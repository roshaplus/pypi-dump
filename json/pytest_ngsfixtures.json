{
  "info": {
    "author": "Per Unneberg",
    "author_email": "per.unneberg@scilifelab.se",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "====================\n pytest-ngsfixtures\n====================\n\n.. image:: https://anaconda.org/percyfal/pytest-ngsfixtures/badges/version.svg\n\t   :target: https://anaconda.org/percyfal/pytest-ngsfixtures\n\nAbout\n=====\n\nThis is a `pytest plugin\n<http://doc.pytest.org/en/latest/plugins.html>`_ that enables next\ngeneration sequencing `pytest fixtures\n<http://doc.pytest.org/en/latest/fixture.html>`_, including fastq\nfiles and output files from a variety of bioinformatics applications\nand tools. There are sequencing fixtures for some common sample\nlayouts, but it's easy to generate additional sample fixture layouts\nusing fixture factories.\n\n* Free software: GNU General Public License v3\n\nFeatures\n--------\n\n- ngs data sets of different sizes\n- predefined sample layouts\n- factories for generating new sample layouts\n- result files from a variety of bioinformatics applications and tools\n\n\nInstallation\n============\n\n.. code-block:: bash\n\n   $ conda install pytest-ngsfixtures\n\n\nUsage\n=====\n\nLayout fixture factories\n------------------------\n\nThe plugin contains two fixture factories that generate sample layouts\n(**sample_layout**) and reference data (**reference_layout**). A\nlayout is simply a set of links to the distributed data files, where\nthe link organization and naming reflect typical file naming schemes\nof sequencing files delivered by sequence providers or as used in\nprojects.\n\nThere are seven predefined sample layouts: **flat**, **sample**,\n**sample_run**, **sample_project_run**, **pop_sample**,\n**pop_sample_run**, and **pop_sample_project_run**, and two reference\nlayouts: **ref** and **scaffolds**.\n\nTo use a fixture, simply depend on it in a test, e.g.:\n\n.. code-block:: python\n\n   def test_foo(sample):\n       # Do something with sample\n\nThe predefined sample layouts cover some common cases. However,\nalternative layouts can be added by using the factory function:\n\n.. code-block:: python\n\n   from pytest_ngsfixtures import factories\n\n   custom_samples = factories.sample_layout(\n       dirname=\"foo\",\n       samples=[\"CHS.HG00512\", \"YRI.NA19238\"],\n       platform_units=['bar', 'foobar'],\n       paired_end=[True, False],\n       use_short_sample_names=False,\n       runfmt=\"{SM}/{SM}_{PU}\",\n   )\n\n   def test_custom(custom_samples):\n       # do something with custom_samples\n\nThe plugin option **-F** (see **Plugin options** below) shows the\nfixture layout. For instance, using this option with the sample layout\nwould generate the following information upon running a test that\ndepends on the sample fixture:\n\n.. code-block:: console\n\n   INFO:pytest_ngsfixtures.factories:sample_layout\n   INFO:pytest_ngsfixtures.factories:-------------\n   INFO:pytest_ngsfixtures.factories:/tmp/pytest-of-user/pytest-1/sample0/s1\n   INFO:pytest_ngsfixtures.factories:/tmp/pytest-of-user/pytest-1/sample0/s1/s1_010101_AAABBB11XX_1.fastq.gz\n   INFO:pytest_ngsfixtures.factories:/tmp/pytest-of-user/pytest-1/sample0/s1/s1_010101_AAABBB11XX_2.fastq.gz\n   INFO:pytest_ngsfixtures.factories:/tmp/pytest-of-user/pytest-1/sample0/s1/s1_020202_AAABBB22XX_1.fastq.gz\n   INFO:pytest_ngsfixtures.factories:/tmp/pytest-of-user/pytest-1/sample0/s1/s1_020202_AAABBB22XX_2.fastq.gz\n   INFO:pytest_ngsfixtures.factories:/tmp/pytest-of-user/pytest-1/sample0/s2\n   INFO:pytest_ngsfixtures.factories:/tmp/pytest-of-user/pytest-1/sample0/s2/s2_010101_AAABBB11XX_1.fastq.gz\n   INFO:pytest_ngsfixtures.factories:/tmp/pytest-of-user/pytest-1/sample0/s2/s2_010101_AAABBB11XX_2.fastq.gz\n   INFO:pytest_ngsfixtures.factories:/tmp/pytest-of-user/pytest-1/sample0/sampleinfo.csv\n\n   \nFile fixture factories\n----------------------\n\nIn addition to sequence and reference input data, there is a\ncollection of downstream files, such as bam files, and application\noutput files, e.g. from samtools and fastqc. As of version 0.3.0,\nthere are two fixture factory functions, **filetype** and **fileset**,\nthat create file fixtures and fileset fixtures, respectively. The\nfiletype factory generates a fixture for a single file, returning the\npath to the file, whereas the fileset factory generates a fixture for\nseveral files, returning the path to the directory in which the files\nreside.\n\n.. code-block:: python\n\n   from pytest_ngsfixtures import factories\n   \n   bam = factories.filetype(\"applications/pe/PUR.HG00731.tiny.bam\", scope=\"function\")\n\n   def test_bam(bam):\n       # Do something with bam file\n\n   \n   bamset = factories.fileset(src=[\"applications/pe/PUR.HG00731.tiny.bam\",\n\t\t                   \"applications/pe/PUR.HG00733.tiny.bam\"],\n                                   fdir=\"bamset\", scope=\"function\")\n\n   def test_bamset(bamset):\n       # Do something with bamset\n\n\nNote that currently you need to provide the path to the file *relative\nto* ``pytest_ngsfixtures/data``.\n       \n\nFiles\n=====\n\nFixture files live in subdirectories of the\n``pytest_ngsfixtures/data`` directory:\n\napplications/\n  application output files\n\nref/\n  reference data files\n\nmedium/\n  medium sequence files\n  \nsmall/\n  small sequence files\n\ntiny/\n  tiny sequence files\n\nyuge/\n  yuge sequence files\n\nEach sequence directory contain the same samples in different sizes:\n\n::\n   \n   File name                   Sample ID         Type                Population      \n   --------------------------  ------------      -----------------   ------------    \n   CHS.HG00512_1.fastq.gz      CHS.HG00512       Individual\t     Han-Chinese     \n   CHS.HG00513_1.fastq.gz      CHS.HG00513       Individual\t     Han-Chinese     \n   CHS_1.fastq.gz              CHS               Pool\t\t     Han-Chinese     \n   PUR.HG00731.A_1.fastq.gz    PUR.HG00731.A     Individual, run A   Puerto Rico     \n   PUR.HG00731.B_1.fastq.gz    PUR.HG00731.B     Individual, run B   Puerto Rico     \n   PUR.HG00733.A_1.fastq.gz    PUR.HG00733.A     Individual, run A   Puerto Rico     \n   PUR.HG00733.B_1.fastq.gz    PUR.HG00733.B     Individual, run B   Puerto Rico     \n   PUR_1.fastq.gz              PUR               Pool, run A\t     Puerto Rico     \n   YRI.NA19238_1.fastq.gz      YRI.NA19238       Individual\t     Yoruban         \n   YRI.NA19239_1.fastq.gz      YRI.NA19238       Individual\t     Yoruban         \n   YRI_1.fastq.gz              YRI               Pool\t\t     Yoruban         \n\n\nand similarly for read 2. The sequence files have been generated from\nthe 1000 genomes project, two each from the populations CHS\n(Han-Chinese), PUR (Puerto Rico) and YRI (Yoruban). They have been\nselected based on mappings to a variable region on chromosome 6 to\nensure that running variant callers on the different data sets will\ngenerate differing variant call sets. When setting up a fixture with\nthe sample_layout factory function, bear in mind that the parameter\n``samples`` **must** be one or several of the labels in the *Sample\nID* column in the table above. The pools are simply concatenated\nversions of the individual files, with a ploidy of 4.\n\t\t\nAdvanced usage\n==============\n\nCustom sample layouts\n---------------------\n\nIn addition to the predefined sample layouts, it is possible to define\ncustom layouts by use of the ``sample_layout`` factory function.\nBasically, the fixture creates links to the data files. The fixture\nlink names are determined by the parameter ``runfmt``, which is a\n`python mini-format string\n<https://docs.python.org/3/library/string.html#formatspec>`_. The\nformat arguments relate to the function parameters as follows:\n\nSM\n  samples - list of sample names (one or several of CHS.HG00512, CHS.HG00513, PUR.HG00731, PUR.HG00733,\n  YRI.NA19238, and YRI.NA19239.)\n  \nPU\n  platform_units - platform unit names, e.g. flowcell name.\n\nBATCH\n  batches - batch (project) name, e.g. if a sequencing center run\n  several rounds of sequencing of a sample\n\nPOP\n  populations - population names\n\n``factories.sample_layout`` generates output file names by iterating\nover the parameters and formatting names according to runfmt. For\ninstance, if ``runfmt=\"{SM}/{SM}_{PU}\"``, values in ``samples`` and\n``platform_units`` will be used to produce the final file names. In\nthis case, ``samples`` and ``platform_units`` must be of equal length.\n\nSee the predefined fixtures in ``pytest_ngsfixtures.plugin`` and the\ntests for examples.\n  \nParametrizing existing sample layouts\n-------------------------------------\n\npytest supports parametrizing tests over fixtures. The following code\nexample shows how to parametrize over the predefined layouts:\n\n.. code-block:: python\n\n   @pytest.fixture(scope=\"function\", autouse=False)\n   def data(request):\n       return request.getfuncargvalue(request.param)\n\n   @pytest.mark.parametrize(\"data\", pytest.config.getoption(\"ngs_layout\", [\"sample\"]), indirect=[\"data\"])\n   def test_run(data):\n       # Do something with data\n\nHere, we define an indirect fixture that calls one of the predefined\nlayout fixtures by use of the ``request.getfuncargvalue`` function. In\naddition, the parametrization is done over the plugin option\n``ngs_layout``, which enables selecting from the command line what\nlayouts to use (see next section).\n\n       \nPlugin options\n==============\n\nThe plugin defines three options that can be used to select and show\npredefined fixtures.\n\n-X, --ngs-size\n--------------\n\nSelect the size of the sequence fixtures (fastq files). There are\ncurrently four sizes to choose from:\n\n1. tiny - 100 sequences (default)\n2. small - 1000 sequences\n3. medium - 10000 sequences\n4. yuge - 1000000000000 sequences!!! No, just kidding, the entire 1000\n   genomes bam file is sampled, with a sample maximum at 100000\n   sequences\n\nExample:\n\n.. code-block:: shell\n\n   pytest -X small\t\t\n\n\n-L, --ngs-layout\n----------------\n\nSelect one of the predefined sample layouts. Note that this option\nonly affects tests that actually depend on the layouts in some\nparametrized way. See ``pytest_ngsfixtures.plugin`` for the setup\nof the predefined sample layouts. Example:\n\n.. code-block:: shell\n\n   pytest -L sample sample_data\t\t\n\n-F, --ngs-show-fixture\n----------------------\n\nPrint information on the files that are setup in the fixture.\n\nCredits\n=======\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.3.1 (2017-03-03)\n------------------\n\nDefer download to script, minor bug fixes\n\n* Add application_fixtures to config module\n* Fix sample_alias bug (#4)\n* Add script download_ngsfixtures_data.py for manual download of data (#5)\n\n\n0.3.0 (2017-03-02)\n------------------\n\nAdd application data, pool data, and functions for downloading data\n\n* Add application data for cutadapt, fastqc, qualimap and samtools\n* Add pooled sequencing data\n* Add functionality for downloading large data sets\n* Improve make targets for easier releases  \n* Minor bug fixes\n\n\n0.2.0 (2017-02-24)\n------------------\n\nAdd new reference files, test files, and factory functions.\n\n* Use snakemake instead of make to generate data files\n* Add separate test file for factory functions\n* Add scaffold file with randomly inserted N's\n* Improve safe_symlink\n* Add threads options for running tests\n* Add Snakefile and rules for generating application files\n* Add fileset, filetype factory functions\n  \n\n0.1.0 (2017-01-24)\n------------------\n\n* First release on PyPI.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/percyfal/pytest-ngsfixtures",
    "keywords": "pytest_ngsfixtures",
    "license": "GNU General Public License v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest_ngsfixtures",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest_ngsfixtures/",
    "release_url": "https://pypi.org/project/pytest_ngsfixtures/0.3.1/",
    "requires_python": "",
    "summary": "pytest ngs fixtures",
    "version": "0.3.1"
  },
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3c52d8cfe56d7c34b547f160482538eb",
          "sha256": "7bb50cd1a584273aa0fe82672ff9e12d7e94c29114c7fc8617c1c906f29f0b3a"
        },
        "downloads": 17,
        "filename": "pytest_ngsfixtures-0.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c52d8cfe56d7c34b547f160482538eb",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 34753400,
        "upload_time": "2017-03-03T12:28:31",
        "url": "https://files.pythonhosted.org/packages/d1/76/a78fca34488250843e75aaa1e6073b8b6a620bfef5beee7e7bf317035b42/pytest_ngsfixtures-0.3.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ff0ae3285c7c0efdafa39eb13195ee09",
          "sha256": "88cf36bce4d26130565fc74c8aaadeb5a8de082c28f39a69e9a2b278a3b271c0"
        },
        "downloads": 16,
        "filename": "pytest_ngsfixtures-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ff0ae3285c7c0efdafa39eb13195ee09",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 34621865,
        "upload_time": "2017-03-03T12:28:13",
        "url": "https://files.pythonhosted.org/packages/9f/04/07c2de01568afa29df758105a9659953db39ab82f780cd6739741f03b25a/pytest_ngsfixtures-0.3.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "3c52d8cfe56d7c34b547f160482538eb",
        "sha256": "7bb50cd1a584273aa0fe82672ff9e12d7e94c29114c7fc8617c1c906f29f0b3a"
      },
      "downloads": 17,
      "filename": "pytest_ngsfixtures-0.3.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3c52d8cfe56d7c34b547f160482538eb",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 34753400,
      "upload_time": "2017-03-03T12:28:31",
      "url": "https://files.pythonhosted.org/packages/d1/76/a78fca34488250843e75aaa1e6073b8b6a620bfef5beee7e7bf317035b42/pytest_ngsfixtures-0.3.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "ff0ae3285c7c0efdafa39eb13195ee09",
        "sha256": "88cf36bce4d26130565fc74c8aaadeb5a8de082c28f39a69e9a2b278a3b271c0"
      },
      "downloads": 16,
      "filename": "pytest_ngsfixtures-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ff0ae3285c7c0efdafa39eb13195ee09",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 34621865,
      "upload_time": "2017-03-03T12:28:13",
      "url": "https://files.pythonhosted.org/packages/9f/04/07c2de01568afa29df758105a9659953db39ab82f780cd6739741f03b25a/pytest_ngsfixtures-0.3.1.tar.gz"
    }
  ]
}