{
  "info": {
    "author": "Angelos Tsiaras",
    "author_email": "aggelostsiaras@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: MacOS :: MacOS X",
      "Programming Language :: Python :: 2.7",
      "Topic :: Scientific/Engineering :: Astronomy"
    ],
    "description": "# PyLightcurve\n\nA python package for modeling and analysing transit light-curves.\n\n* Easy search for parameters of current exoplanets.\n* Calculation of limb darkening coefficients.\n* Calculation of exoplanetary orbits.\n* Calculation of transit models.\n* Flexible fitting of transit light-curves.\n\nThis module makes use of:\n\n* [exodata](https://github.com/ryanvarley/ExoData), [Varley (2016)](http://www.sciencedirect.com/science/article/pii/S0010465516301254)\n* [emcee](https://github.com/dfm/emcee), [Foreman-Mackey et al. (2013)](http://iopscience.iop.org/article/10.1086/670067)\n\n\n## Installation\n\nOpen a terminal and type `pip install pylightcurve`.\n\n\n## Usage\n\nThe code in the examples below can be found in the example/example.py file in this repo.\n\n\t>>> import pylightcurve as plc\n\t>>> import matplotlib.pyplot as plt\n\t>>> import numpy as np\n\t\n\t>>> plt.ion()\n\n\n##### plc.find_oec_parameters(target)\n\nReturns the following stellar and transit parameters: planet oec name, logarithmic stellar surface gravity, stellar \neffective temperature, stellar metallicity, planetary radius relative to teh stellar radius, planetary bolometric \nemission relative o the stellar bolometric emision, orbital period, orbital semi-major axis relative to the stellar \nradius, orbital eccentricity, orbital inclination, orbital argument of periastron, transit mid-time.\n\nNote: The database is automatically updated on a daily basis if internet access is available.\n\n- target  \nName of the planet (str). \n\nFor example, we can find the parameters of HD209458b:\n\t\n\t>>> (planet, stellar_logg, stellar_temperature, stellar_metallicity, rp_over_rs, fp_over_fs, \n\t     period, sma_over_rs, eccentricity, inclination, periastron, mid_time) = plc.find_oec_parameters('hd209458b')\n\n\t>>> print (planet, stellar_logg, stellar_temperature, stellar_metallicity, rp_over_rs, fp_over_fs, \n\t           period, sma_over_rs, eccentricity, inclination, periastron, mid_time)\n\t('HD 209458 b', 4.375254713815686, 6075.0, 0.02, 0.12035170971037652, 5.1956599618667065e-05, 3.52474859, \n\t 8.8593557009493, 0.0004, 86.59, 0.0, 2451370.048)\n\n\n##### plc.clablimb(method, stellar_logg, stellar_temperature, stellar_metallicity, photometric_filter, stellar_model='ATLAS')\n\nReturns a list of limb darkening coefficients.\n\n- method  \nLimb darkening law (str, 'claret' is the only one currently supported).\n\n- stellar_logg  \nLogarithmic stellar surface gravity (float, in cm/s/s).\n\n- stellar_temperature  \nStellar effective temperature (float, in Kelvin).\n\n- stellar_metallicity  \nStellar metallicity (float, dex Fe/H).\n\n- photometric_filter  \nPhotometric band of the observation (str, available filters: 'B', 'C', 'H', 'I', 'J', 'K', 'Kp', 'R', 'S1', 'S2', \n'S3', 'S4', 'U', 'V', 'b', 'g', 'i,', 'r,', 'u', 'u,', 'v', 'y', 'z,').\n\nFor example, we can calculate the limb darkening coefficients for the claret law for HD209458b in the optical band:\n\n\t>>> limb_darkening_coefficients = plc.clablimb('claret', stellar_logg, stellar_temperature, \n\t                                               stellar_metallicity, 'V')\n\n\t>>> print limb_darkening_coefficients\n\t[ 0.38606363  0.58637444 -0.19471546 -0.00559748]\n\n\n##### plc.exoplanet_orbit(period, sma_over_rs, eccentricity, inclination, periastron, mid_time, time_array)\n\nReturns the position vector of the planet in a coordinate system with the parent star at (x,y,z) = (0,0,0), the \nobserver at (x,y,z) = (+inf,0,0) and the z-axis perpendicular to the plane of reference.\n\n- period  \nOrbital period (float, in days).\n\n- sma_over_rs  \nOrbital semi-major axis relative to the stellar radius (float, no units).\n\n- eccentricity  \nOrbital eccentricity (float, no units).\n\n- inclination  \nOrbital inclination (float, in degrees).\n\n- periastron  \nOrbital argument of periastron (float, in degrees).\n\n- mid_time  \nTransit mid-time (float, in days).\n\n- time_array  \nA time sequence (numpy array, in days).\n\nFor example, we can calculate the position vector of HD209458b from 2 hours before the mid-transit to 2 hours after \nthe mid-transit with a frequency of 1 point per minute:\n\n    >>> time_array = np.arange(mid_time - 2.0 / 24.0, mid_time + 2.0 / 24.0, 1.0 / 60.0 / 24.0)\n\n    >>> (position_x, position_y, position_z) = plc.exoplanet_orbit(period, sma_over_rs, eccentricity, inclination, \n                                                                   periastron, mid_time, time_array)\n                                        \n    >>> plt.subplot(3,1,1)\n    >>> plt.plot(time_array, position_x, 'ko', ms=3)\n    >>> plt.ylabel('x (R star)')\n    >>> plt.subplot(3,1,2)\n    >>> plt.plot(time_array, position_y, 'ko', ms=3)\n    >>> plt.ylabel('y (R star)')\n    >>> plt.subplot(3,1,3)\n    >>> plt.plot(time_array, position_z, 'ko', ms=3)\n    >>> plt.ylabel('z (R star)')\n    >>> plt.xlabel('time (days)')\n\n\n##### plc.transit_projected_distance(period, sma_over_rs, eccentricity, inclination, periastron, mid_time, time_array, precision=3)\n\nReturns the projected distance between the planet and its parent star. When the planet is further than the star, \nthe values returned are negative.\n\n- period  \nOrbital period (float, in days).\n\n- sma_over_rs  \nOrbital semi-major axis relative to the stellar radius (float, no units).\n\n- eccentricity  \nOrbital eccentricity (float, no units).\n\n- inclination  \nOrbital inclination (float, in degrees).\n\n- periastron  \nOrbital argument of periastron (float, in degrees).\n\n- mid_time  \nTransit mid-time (float, in days).\n\n- time_array  \nA time sequence (numpy array, in days).\n\nFor example, we can calculate the projected distance of HD209458b from its host star from 2 hours before the \nmid-transit to 2 hours after the mid-transit with a frequency of 1 point per minute:\n    \n    >>> z_over_rs = plc.transit_projected_distance(period, sma_over_rs, eccentricity, inclination, periastron,\n                                                   mid_time, time_array)\n\n    >>> plt.plot(time_array, z_over_rs, 'ko', ms=3)\n    >>> plt.axhline(1, color='k', ls='--')\n    >>> plt.text(0.5 * (plt.xlim()[1] + plt.xlim()[0]), 0.99, 'transit', ha='center', va='top')\n    >>> plt.xlabel('time (days)')\n    >>> plt.ylabel('projected distance (R star)')\n\n\n##### plc.transit_flux_drop(method, limb_darkening_coefficients, rp_over_rs, z_over_rs, precision=3)\n\nReturns the observed stellar flux as a function of time - i.e. the transit light-curve.\n\n- method  \nLimb darkening law (str, available methods: 'claret', 'quad', 'sqrt' or 'linear').\n\n- limb_darkening_coefficients  \nA list containing the limb darkening coefficients. The list should contain 1 element if the method used is the \n'linear', 2 if the method used is the 'quad' or teh 'sqrt', and 4 if the method used is the 'claret'.\n\n- rp_over_rs  \nPlanetary radius relative to the stellar radius (float, no units)\n\n- z_over_rs  \nProjected distance between the planet and its parent star relative to the stellar radius (numpy array, no units).\n\n- precision  \nThe level of the numerical precision for the calculation (int, 0 to 6, default value is 3).\n\nFor example, we can calculate the transit light-curve of HD209458b from 2 hours before the mid-transit to 2 hours \nafter the mid-transit with a frequency of 1 point per minute:\n\n    >>> transit_light_curve = plc.transit_flux_drop('claret', limb_darkening_coefficients, rp_over_rs, z_over_rs)\n\n    >>> plt.plot(time_array, transit_light_curve, 'ko', ms=3)\n    >>> plt.ylim(plt.ylim()[0], 1.001)\n    >>> plt.xlabel('time (days)')\n    >>> plt.ylabel('observed flux (%)')\n\n\n##### plc.transit(method, limb_darkening_coefficients, rp_over_rs, period, sma_over_rs, eccentricity, inclination, periastron, mid_time, time_array, precision=3)\n\nReturns the transit light-curve, directly from the orbital parameters.\n\n- method  \nLimb darkening law (str, available methods: 'claret', 'quad', 'sqrt' or 'linear').\n\n- limb_darkening_coefficients  \nA list containing the limb darkening coefficients. The list should contain 1 element if the method used is the \n'linear', 2 if the method used is the 'quad' or teh 'sqrt', and 4 if the method used is the 'claret'.\n\n- rp_over_rs  \nPlanetary radius relative to the stellar radius (float, no units)\n\n- period  \nOrbital period (float, in days).\n\n- sma_over_rs  \nOrbital semi-major axis relative to the stellar radius (float, no units).\n\n- eccentricity  \nOrbital eccentricity (float, no units).\n\n- inclination  \nOrbital inclination (float, in degrees).\n\n- periastron  \nOrbital argument of periastron (float, in degrees).\n\n- mid_time  \nTransit mid-time (float, in days).\n\n- time_array  \nA time sequence (numpy array, in days).\n\n- precision  \nThe level of the numerical precision for the calculation (int, 0 to 6, default value is 3).\n\nFor example, we can calculate the transit light-curve of HD209458b from 2 hours before the mid-transit to 2 hours after \nthe mid-transit with a frequency of 1 point per minute:\n\n    >>> transit_light_curve = plc.transit('claret', limb_darkening_coefficients, rp_over_rs, period, sma_over_rs, \n                                          eccentricity, inclination, periastron, mid_time, time_array)\n\n    >>> plt.plot(time_array, transit_light_curve, 'ko', ms=3)\n    >>> plt.ylim(plt.ylim()[0], 1.001)\n    >>> plt.xlabel('time (days)')\n    >>> plt.ylabel('observed flux (%)')\n\n\n##### plc.transit_integrated(method, limb_darkening_coefficients, rp_over_rs, period, sma_over_rs, eccentricity, inclination, periastron, mid_time, time_array, exp_time, time_factor, precision=3)\n\nReturns the exposure-integrated transit light-curve, directly from the orbital parameters.\n\n- method  \nLimb darkening law (str, available methods: 'claret', 'quad', 'sqrt' or 'linear').\n\n- limb_darkening_coefficients  \nA list containing the limb darkening coefficients. The list should contain 1 element if the method used is the \n'linear', 2 if the method used is the 'quad' or teh 'sqrt', and 4 if the method used is the 'claret'.\n\n- rp_over_rs  \nPlanetary radius relative to the stellar radius (float, no units)\n\n- period  \nOrbital period (float, in days).\n\n- sma_over_rs  \nOrbital semi-major axis relative to the stellar radius (float, no units).\n\n- eccentricity  \nOrbital eccentricity (float, no units).\n\n- inclination  \nOrbital inclination (float, in degrees).\n\n- periastron  \nOrbital argument of periastron (float, in degrees).\n\n- mid_time  \nTransit mid-time (float, in days).\n\n- time_array  \nA time sequence (numpy array, in days).\n\n- exp_time  \nExposure time (float, in seconds).\n\n- time_factor  \nNumber of sub-exposures to be calculated per exposure (int, no units).\n\n- precision  \nThe level of the numerical precision for the calculation (int, 0 to 6, default value is 3).\n\nFor example, we can calculate the transit light-curve of HD209458b from 2 hours before the mid-transit to 2 hours after \nthe mid-transit with a frequency of 1 point per minute, assuming an exposure time of 30 seconds which is divided into \n10 sub-exposures:\n\n    >>> transit_light_curve = plc.transit_integrated('claret', limb_darkening_coefficients, rp_over_rs, period, \n                                                     sma_over_rs, eccentricity, inclination, periastron, mid_time, \n                                                     time_array, 30, 10)\n\n    >>> plt.plot(time_array, transit_light_curve, 'ko', ms=3)\n    >>> plt.ylim(plt.ylim()[0], 1.001)\n    >>> plt.xlabel('time (days)')\n    >>> plt.ylabel('observed flux (%)')\n\n\n##### plc.TransitAndPolyFitting(data, method, limb_darkening_coefficients, rp_over_rs, period, sma_over_rs, eccentricity, inclination, periastron, mid_time, iterations, walkers, burn, precision=3, exp_time=0, time_factor=1, fit_first_order=False, fit_second_order=False, fit_rp_over_rs=False, fit_period=False, fit_sma_over_rs=False, fit_eccentricity=False, fit_inclination=False, fit_periastron=False, fit_mid_time=False, counter=True, counter_window=False):\n\nOffers a range of options for fitting observed transit light-curves, simultaneously with a second-order polynomial \nde-trending function.\n\n- data  \nA list containing the input data sets. Each element in the list is a list of 3 arrays, \nrepresenting the time (in Heliocentric Julian Date), the stellar flux and the uncertainty in the stellar flux\nexample: `data=[[time_0, flux_0, error_0], [time_1, flux_1, error_1], [time_2, flux_2, error_2]]`\n\n- method  \nLimb darkening law (str, available methods: 'claret', 'quad', 'sqrt' or 'linear').\n\n- limb_darkening_coefficients  \nA list containing the limb darkening coefficients. The list should contain 1 element if the method used is the \n'linear', 2 if the method used is the 'quad' or teh 'sqrt', and 4 if the method used is the 'claret'.\nTo fit for the limb darkening coefficients set `limb_darkening_coefficients='fit'`.\n\n- rp_over_rs  \nInitial value for the planetary radius relative to the stellar radius (float, no units)\n\n- period  \nInitial value for the orbital period (float, in days).\n\n- sma_over_rs  \nInitial value for the orbital semi-major axis relative to the stellar radius (float, no units).\n\n- eccentricity  \nInitial value for the orbital eccentricity (float, no units).\n\n- inclination  \nInitial value for the orbital inclination (float, in degrees).\n\n- periastron  \nInitial value for the orbital argument of periastron (float, in degrees).\n\n- mid_time  \nInitial value for the transit mid-time (float, in days).\n\n- time_array  \nA time sequence (numpy array, in days).\n\n- iterations  \nNumber of total mcmc iterations (int, no units).\n\n- walkers  \nNumber of walkers, as defined in the emcee package (int, no units).\n\n- burn  \nNumber of iterations to be excluded from the beginning of the chains (int, no units).\n\n- precision  \nThe level of the numerical precision for the calculation (int, 0 to 6, default value is 3).\n\n- exp_time  \nExposure time (float, in seconds, default value is 0).\n\n- time_factor  \nNumber of sub-exposures to be calculated per exposure (int, no units, default value is 1).\n\n- fit_first_order  \nFlag for including a first order time-dependent de-trending factor (bool, default value is False).\n\n- fit_second_order  \nFlag for including a second order time-dependent de-trending factor (bool, default value is False).\n\n- fit_rp_over_rs  \nA 2-element list containing the lower and upper limits for fitting the planetary radius relative to the stellar radius.\nTo avoid fitting set `fit_rp_over_rs=False`. Default value is False.\n\n- fit_period  \nA 2-element list containing the lower and upper limits for fitting the orbital period.\nTo avoid fitting set `fit_rp_over_rs=False`. Default value is False.\n\n- fit_sma_over_rs  \nA 2-element list containing the lower and upper limits for fitting the orbital semi-major axis relative to the stellar radius.\nTo avoid fitting set `fit_rp_over_rs=False`. Default value is False.\n\n- fit_eccentricity  \nA 2-element list containing the lower and upper limits for fitting the orbital eccentricity.\nTo avoid fitting set `fit_rp_over_rs=False`. Default value is False.\n\n- fit_inclination  \nA 2-element list containing the lower and upper limits for fitting the orbital inclination.\nTo avoid fitting set `fit_rp_over_rs=False`. Default value is False.\n\n- fit_periastron  \nA 2-element list containing the lower and upper limits for fitting the orbital argument of periastron.\nTo avoid fitting set `fit_rp_over_rs=False`. Default value is False.\n\n- fit_mid_time  \nA 2-element list containing the lower and upper limits for fitting the the transit mid-time.\nTo avoid fitting set `fit_rp_over_rs=False`. Default value is False.\n\n- counter  \nFlag for printing a counter of the completed iterations (bool, default value is True).\n\n- counter_window=False  \nFlag for showing a counter of the completed iterations in an additional Tk window (bool, default value is False).\n\n##### plc.TransitAndPolyFitting methods:\n\n###### .run_mcmc()\n\nSets up and runs the mcmc.\n\n###### .save_all(export_file)\n\nSaves all the mcmc results (including the chains) in the form of a pickle file.\n\n- export_file  \nFile to be created (str).\n\n###### .save_results(export_file)\n\nSaves the final values and uncertainties of the fitted parameters in the form of a txt file.\n\n- export_file  \nFile to be created (str).\n\n###### .plot_corner(export_file)\n\nPlots the correlations between the fitted parameters.\n\n- export_file  \nFile to be created (str).\n\n###### .plot_traces(export_file)\n\nPlots the mcmc chains of the fitted parameters.\n\n- export_file  \nFile to be created (str).\n\n###### .plot_models(export_file)\n\nPlots the original data and the full model fitted. A prefix is added to indicate the different data sets (set_1, set_2, etc.).\n\n- export_file  \nFile to be created (str).\n\n###### .plot_detrended_models(export_file)\n\nPlots the data corrected by the de-trending function and the transit model fitted. A prefix is added to indicate the \ndifferent data sets (set_1, set_2, etc.).\n\n- export_file  \nFile to be created (str).\n\nIn the following example we will create 3 simulated observations of HD209458b, with an exposure time of 2 minutes and \nadditional second-order time-dependent systematics, and fit them using the **plc.TransitAndPolyFitting** class. To \navoid an extremely slow process, we will use a time factor of 2 for the fitting, while we will use a time factor of \n120 to create the simulated observations:\n\n    >>> time_array = np.arange(mid_time + 10.0 * period - 0.11, mid_time + 10.0 * period + 0.11, 2.0 / 60.0 / 24.0)\n    >>> flux_array = plc.transit_integrated('claret', limb_darkening_coefficients, rp_over_rs, period, sma_over_rs, \n                                            eccentricity, inclination, periastron, mid_time, time_array, 120, 120, \n                                            precision=6)\n    >>> systematics_array = 1.2 * (1 + 0.013 * (time_array - time_array[0]) + \n                                   0.03 * ((time_array - time_array[0]) ** 2))\n    >>> error_array = np.random.normal(0, 0.002, len(time_array))\n\n    >>> time0 = time_array\n    >>> flux0 = flux_array * systematics_array + error_array\n    >>> error0 = np.ones_like(error_array) * np.std(error_array)\n\n    >>> time_array = np.arange(mid_time + 25.0 * period - 0.13, mid_time + 25.0 * period + 0.13, 2.0 / 60.0 / 24.0)\n    >>> flux_array = plc.transit_integrated('claret', limb_darkening_coefficients, rp_over_rs, period, sma_over_rs, \n                                            eccentricity, inclination, periastron, mid_time, time_array, 120, 120, \n                                            precision=6)\n    >>> systematics_array = 3.6 * (1 - 0.02 * (time_array - time_array[0]) + \n                                   0.05 * ((time_array - time_array[0]) ** 2))\n    >>> error_array = np.random.normal(0, 0.005, len(time_array))\n\n    >>> time1 = time_array\n    >>> flux1 = flux_array * systematics_array + error_array\n    >>> error1 = np.ones_like(error_array) * np.std(error_array)\n\n    >>> time_array = np.arange(mid_time + 31.0 * period - 0.115, mid_time + 31.0 * period + 0.115, 2.0 / 60.0 / 24.0)\n    >>> flux_array = plc.transit_integrated('claret', limb_darkening_coefficients, rp_over_rs, period, sma_over_rs, \n                                            eccentricity, inclination, periastron, mid_time, time_array, 120, 120, \n                                            precision=6)\n    >>> systematics_array = 0.75 * (1 - 0.01 * (time_array - time_array[0]) \n                                    + 0.0001 * ((time_array - time_array[0]) ** 2))\n    >>> error_array = np.random.normal(0, 0.0009, len(time_array))\n\n    >>> time2 = time_array\n    >>> flux2 = flux_array * systematics_array + error_array\n    >>> error2 = np.ones_like(error_array) * np.std(error_array)\n\n    >>> plt.close('all')\n    >>> plt.ioff()\n\n    >>> fitting = plc.TransitAndPolyFitting(\n            data=[[time0, flux0, error0], [time1, flux1, error1], [time2, flux2, error2]],\n            method='claret',\n            limb_darkening_coefficients=limb_darkening_coefficients,\n            rp_over_rs=rp_over_rs,\n            period=period,\n            sma_over_rs=sma_over_rs,\n            eccentricity=eccentricity,\n            inclination=inclination,\n            periastron=periastron,\n            mid_time=mid_time,\n            iterations=150000,\n            walkers=50,\n            burn=50000,\n            precision=3,\n            time_factor=2,\n            exp_time=120,\n            fit_first_order=True,\n            fit_second_order=True,\n            fit_rp_over_rs=[rp_over_rs / 2.0, rp_over_rs * 2.0],\n            fit_period=[period / 2.0, period * 2.0],\n            fit_sma_over_rs=[sma_over_rs / 2, sma_over_rs * 2.0],\n            fit_inclination=[70, 90],\n            fit_mid_time=[mid_time - 0.1, mid_time + 0.1])\n\n    >>> fitting.run_mcmc()\n\n    >>> fitting.save_all('simulation_data_base.pickle')\n    >>> fitting.save_results('simulation_results.txt')\n    >>> fitting.plot_corner('simulation_correlations.pdf')\n    >>> fitting.plot_traces('simulation_traces.pdf')\n    >>> fitting.plot_models('simulation_full_models.pdf')\n    >>> fitting.plot_detrended_models('simulation_detrended_models.pdf')\n\n\n## Licence\n\nMIT License\n\nCopyright (c) 2016-2017 Angelos Tsiaras, Konstantinos Karpouzas and Ryan Varley\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://https://github.com/ucl-exoplanets/pylightcurve",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pylightcurve",
    "platform": "",
    "project_url": "https://pypi.org/project/pylightcurve/",
    "release_url": "https://pypi.org/project/pylightcurve/1.1.6/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A python package for modeling and analysing transit light-curves.",
    "version": "1.1.6"
  },
  "releases": {
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e860041ea7381bd0fd3cf54cb7de5741",
          "sha256": "208433e64bba8ce6256cbd2ede4ee4225d7173ee24dbf8403e0852dee53d7593"
        },
        "downloads": -1,
        "filename": "pylightcurve-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e860041ea7381bd0fd3cf54cb7de5741",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3242335,
        "upload_time": "2017-10-20T16:20:28",
        "url": "https://files.pythonhosted.org/packages/6c/c4/0462d38df9b04236ed253316fcb932302ea549ee5d0873884ba9aef72e3c/pylightcurve-1.1.1.tar.gz"
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9504765791ed71606252c98f35772a88",
          "sha256": "fa602ef0e41bfeea1058c582e8fc6c992a76511906702311077b65df4ea1f92e"
        },
        "downloads": -1,
        "filename": "pylightcurve-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9504765791ed71606252c98f35772a88",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2753074,
        "upload_time": "2017-10-20T16:59:07",
        "url": "https://files.pythonhosted.org/packages/8d/4d/70f69334628fd4d2d3af9f7c59e239487e8ec481c96b2f491d16417a552b/pylightcurve-1.1.2.tar.gz"
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6bf467084f800f7f97ed36ce15d9dafe",
          "sha256": "d2b6b7c307b0d987e3587ae07698c9d082613ee90872194fd77d97d27cb17a79"
        },
        "downloads": -1,
        "filename": "pylightcurve-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6bf467084f800f7f97ed36ce15d9dafe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3278701,
        "upload_time": "2017-11-29T19:32:47",
        "url": "https://files.pythonhosted.org/packages/c6/49/8da8fa2aec450f3439717378f3858773ec7784f491f076fb4156e791098e/pylightcurve-1.1.3.tar.gz"
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bd3312939fb4c0c8f963c6ee0e993a2c",
          "sha256": "97fa9bde13e50ff2295fae65ecf6ef305e1f016092e6b51f510722af42815d10"
        },
        "downloads": -1,
        "filename": "pylightcurve-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "bd3312939fb4c0c8f963c6ee0e993a2c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3278726,
        "upload_time": "2017-11-30T18:17:24",
        "url": "https://files.pythonhosted.org/packages/c1/d0/cae132fa8aa2497f9cd779c1a62b767f13d07f84ca2dad44c3c64dd220ea/pylightcurve-1.1.4.tar.gz"
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b42d612584b3518d6be5663de60121af",
          "sha256": "e4321b37215bbf59a95857aff86c14cfb18fdfe6b99258713a2b2063ba0bfbb1"
        },
        "downloads": -1,
        "filename": "pylightcurve-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b42d612584b3518d6be5663de60121af",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3250079,
        "upload_time": "2017-12-12T16:31:49",
        "url": "https://files.pythonhosted.org/packages/17/77/05fe40919a8c9b8c315ffd24c2551314a80721667ee4ac3259542432461d/pylightcurve-1.1.5.tar.gz"
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5142a86100facaaf9577dcf955c5d12b",
          "sha256": "894048cab80ead0abd9b95ecc2818ca358b5694b3188d78ac4ac86d63f92e185"
        },
        "downloads": -1,
        "filename": "pylightcurve-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "5142a86100facaaf9577dcf955c5d12b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3279245,
        "upload_time": "2018-01-30T13:20:09",
        "url": "https://files.pythonhosted.org/packages/90/fd/a36ee4d662dc2f795df8d77de475e4dafd701e44d43418a77bfc6e6163aa/pylightcurve-1.1.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5142a86100facaaf9577dcf955c5d12b",
        "sha256": "894048cab80ead0abd9b95ecc2818ca358b5694b3188d78ac4ac86d63f92e185"
      },
      "downloads": -1,
      "filename": "pylightcurve-1.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "5142a86100facaaf9577dcf955c5d12b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3279245,
      "upload_time": "2018-01-30T13:20:09",
      "url": "https://files.pythonhosted.org/packages/90/fd/a36ee4d662dc2f795df8d77de475e4dafd701e44d43418a77bfc6e6163aa/pylightcurve-1.1.6.tar.gz"
    }
  ]
}