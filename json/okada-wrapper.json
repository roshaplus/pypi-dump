{
  "info": {
    "author": "Ben Thompson",
    "author_email": "t.ben.thompson@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "#### Okada wrapper (MATLAB, Python)\r\n\r\nThese files are MATLAB and Python wrappers for the Okada DC3D0 point source\r\nand the DC3D rectangular dislocation surface fortran subroutines. The Matlab \r\nwrappers are written using the MEX functions. The original subroutine was \r\nwritten by Y. Okada as part of the paper:\r\n\r\n**Okada, Y., 1992, Internal deformation due to shear and tensile faults in a half-space, Bull. Seism. Soc. Am., 82, 1018-1040.**\r\n\r\nThe inputs and outputs here are slightly different from the okada implementation,\r\nthough not in any substantial way. Look at the [original documentation webpage\r\nhere](http://www.bosai.go.jp/study/application/dc3d/DC3Dhtml_E.html) for more details\r\n\r\nA different MATLAB mex wrapper for the Okada dislocation sources is available on [Paul Segall's website](https://pangea.stanford.edu/research/CDFM/software/index.html).\r\n\r\n#### MATLAB\r\n\r\nDownload the code::\r\n\r\n```\r\ngit clone https://github.com/tbenthompson/okada_wrapper.git\r\n```\r\n\r\nMake sure that MATLAB has a properly configured compiler. This [page on MATLAB's site has details](http://www.mathworks.com/help/matlab/ref/mex.html). It seem like GCC is automatically found if it is installed.\r\n\r\nOpen matlab and run::\r\n\r\n```\r\nmex 'DC3D0wrapper.F'\r\nmex 'DC3Dwrapper.F'\r\n```\r\n\r\n##### DC3D0wrapper\r\n\r\nThen, DC3D0wrapper can be treated like any other MATLAB function::\r\n\r\n```\r\n[success, u, grad_u] = DC3D0wrapper(0.6, [1.0, 1.0, -1.0],-3.0,...\r\n                                    90, [1.0, 0.0, 0.0, 0.0]);\r\n```\r\n\r\n\r\nFive arguments are required:\r\n\r\n* alpha = (lambda + mu) / (lambda + 2 * mu)\r\n* xo = 3-vector representing the observation point (x, y, z in the\r\n       original)\r\n* depth = the depth of the slip plane\r\n* dip = the dip-angle of the slip plane in degrees\r\n* potency = 4-vector (POT1,2,3,4 in original)\r\n  * index 1 = strike-slip = Moment of double-couple / mu\r\n  * index 2 = dip-slip = Moment of double-couple / mu\r\n  * index 3 = inflation = Intensity of isotropic part / lambda\r\n  * index 4 = tensile = Intensity of linear dipole / mu\r\n\r\nThree outputs are provided:\r\n\r\n* success - a return code from DC3D0=0 if normal, 1 if singular, 2 if a positive z value for the observation point was given\r\n* u - 3-vector representing the displacement at the observation point. for example, u(2) = u_y\r\n* grad_u = the 3x3 tensor representing the partial derivatives of the displacement, for example, grad_u(1, 2) = d(u_x)/dy\r\n\r\n##### DC3Dwrapper\r\n\r\nDC3Dwrapper can also be used for rectangular dislocation sources\r\n```\r\n[success, u, grad_u] = DC3Dwrapper(0.6, [1.0, 1.0, -1.0], 3.0,...\r\n                                    90, [-0.7, 0.7], [-0.7, 0.7],...\r\n                                    [1.0, 0.0, 0.0]);\r\n```\r\n\r\nSeven arguments are required:\r\n\r\n* alpha = (lambda + mu) / (lambda + 2 * mu)\r\n* xo = 3-vector representing the observation point (x, y, z in the\r\n       original)\r\n* depth = the depth of the fault origin\r\n* dip = the dip-angle of the rectangular dislocation surface\r\n* strike_width = the along-strike range of the surface (al1,al2 in\r\n                 the original)\r\n* dip_width = the along-dip range of the surface (aw1, aw2 in the \r\n              original)\r\n* dislocation = 3-vector representing the direction of motion on the\r\n                surface (DISL1 = strike-slip, DISL2 = dip-slip, DISL3 = opening/overlap)\r\n\r\nThe outputs are identical to DC3D0wrapper\r\n\r\n#### Python\r\n\r\nNEW: You can install `okada_wrapper` directly from the PyPI by running::\r\n\r\n```\r\npip install okada_wrapper\r\n```\r\n\r\nFor the old, manual installation method, download the code::\r\n\r\n```\r\ngit clone https://github.com/tbenthompson/okada_wrapper.git\r\n```\r\n\r\nMake sure that a Fortran compiler is installed. The wrappers are tested using gcc/gfortran, but should hopefully work with other fortran compilers.\r\n\r\nThen, run the install script::\r\n\r\n```\r\npython setup.py install\r\n```\r\n\r\nThe syntax is almost identical to the MATLAB version::\r\n\r\n```\r\nfrom okada_wrapper import dc3d0wrapper, dc3dwrapper\r\nsuccess, u, grad_u = dc3d0wrapper(0.6, [1.0, 1.0, -1.0], 3.0,\r\n                                  1.0, [1.0, 0.0, 0.0, 0.0])\r\nsuccess, u, grad_u = dc3dwrapper(0.6, [1.0, 1.0, -1.0],\r\n                                 3.0, 90, [-0.7, 0.7], [-0.7, 0.7],\r\n                                 [1.0, 0.0, 0.0])                                      \r\n```\r\n\r\nThe arguments and outputs are identical to the MATLAB version.\r\n\r\nTests\r\n----\r\n\r\nTo run the tests, from the root directory in MATLAB type::\r\n\r\n    test_okada.m\r\n\r\nor, for python::\r\n    \r\n    python test_okada.py\r\n\r\n![Okada plot](image.png \"\")\r\n\r\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/tbenthompson/okada_wrapper",
    "keywords": "okada",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "okada-wrapper",
    "platform": "",
    "project_url": "https://pypi.org/project/okada-wrapper/",
    "release_url": "https://pypi.org/project/okada-wrapper/17.11.03/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python and MATLAB wrappers for the Okada Green's function codes",
    "version": "17.11.03"
  },
  "releases": {
    "17.07.25": [
      {
        "comment_text": "",
        "digests": {
          "md5": "98f9de88062310c58a8c71811a1f4ab7",
          "sha256": "c36447c18a97ba121efa72f221f13e1086cf71512b71188b4b75e66c197acf86"
        },
        "downloads": -1,
        "filename": "okada_wrapper-17.07.25.tar.gz",
        "has_sig": false,
        "md5_digest": "98f9de88062310c58a8c71811a1f4ab7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11837,
        "upload_time": "2017-07-25T15:35:13",
        "url": "https://files.pythonhosted.org/packages/d9/2e/d7381a3fd42ba42474b3ebee61a453a356cfd3775dd621eee5416b1f0b7b/okada_wrapper-17.07.25.tar.gz"
      }
    ],
    "17.11.03": [
      {
        "comment_text": "",
        "digests": {
          "md5": "be7de78c74231501d901a408bbbda4ef",
          "sha256": "29aa2a6e81caf78b47dd598a065d49615540a0b46e4042117eb40399f6ac9398"
        },
        "downloads": -1,
        "filename": "okada_wrapper-17.11.03.tar.gz",
        "has_sig": false,
        "md5_digest": "be7de78c74231501d901a408bbbda4ef",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11959,
        "upload_time": "2017-11-04T03:33:23",
        "url": "https://files.pythonhosted.org/packages/7d/cb/62e36174560156daf34fa3d6b486530c8a05a31f24888959595139d35e07/okada_wrapper-17.11.03.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "be7de78c74231501d901a408bbbda4ef",
        "sha256": "29aa2a6e81caf78b47dd598a065d49615540a0b46e4042117eb40399f6ac9398"
      },
      "downloads": -1,
      "filename": "okada_wrapper-17.11.03.tar.gz",
      "has_sig": false,
      "md5_digest": "be7de78c74231501d901a408bbbda4ef",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 11959,
      "upload_time": "2017-11-04T03:33:23",
      "url": "https://files.pythonhosted.org/packages/7d/cb/62e36174560156daf34fa3d6b486530c8a05a31f24888959595139d35e07/okada_wrapper-17.11.03.tar.gz"
    }
  ]
}