{
  "info": {
    "author": "Mark Vartanyan",
    "author_email": "kolypto@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "|Build Status|\n\nMail'Em\n=======\n\nFull-featured e-mailing system: flexible, slim and sexy.\n\n-  Unicode\n-  Easy attachments\n-  Inline images\n-  E-Mail templates\n-  Tools for unit-tests\n-  Made perfect once and for all. Simple and cute :)\n\nHere'a a full example:\n\n.. code:: python\n\n    from mailem import Message, Postman, Attachment, ImageAttachment\n    from mailem.connection import SMTPConnection\n\n    # Create the message\n    messages = [\n        # Message with attachments\n        Message(\n            ['kolypto@gmail.com'],\n            u\"Mail'em test\",\n            u\"<b>yeah baby, it works!</b>\",\n            attachments = [\n                Attachment(u'test.txt', open('test.txt').read())\n            ]\n        ),\n        # Message with inline images (!)\n        Message(\n            ['kolypto@gmail.com'],\n            u\"Mail'em test with inline images\",\n            u\"Cute: <img src='cid:cute.jpg' />\",  # cid:<filename>\n            attachments = [\n                ImageAttachment('cute.jpg', open('cute.jpg').read(), 'inline')\n            ]\n        ),\n    ]\n\n    # Initialize a postman with SMTP connection to GMail\n    postman = Postman('user@gmail.com',\n                      SMTPConnection(\n                          'smtp.gmail.com', 587,\n                          'user@gmail.com', 'pass',\n                          tls=True\n                      ))\n\n    # Send everything we have\n    with postman.connect() as c:\n        map(c.sendmail, messages)\n\nAlso see `Template <#template>`__.\n\nTable of Contents\n=================\n\n-  Sending Messages\n\n   -  Message\n\n      -  Attachment\n      -  ImageAttachment\n\n   -  Postman\n\n      -  Postman.connect\n      -  Postman.loopback\n\n   -  Connection\n\n      -  SMTPConnection\n      -  LoopbackConnection\n\n-  Templating\n\n   -  Template\n\n      -  Template.set\\_renderer\n      -  Template.defaults\n      -  Template.call\n      -  Template.from\\_directory\n\n   -  TemplateRegistry\n\n      -  TemplateRegistry.add\n      -  TemplateRegistry.set\\_renderer\n      -  TemplateRegistry.defaults\n      -  TemplateRegistry.get\n      -  TemplateRegistry.from\\_directory\n\nSending Messages\n================\n\nMessage\n-------\n\n.. code:: python\n\n    Message(recipients, subject, html=None,\n            text=None, sender=None, cc=None,\n            bcc=None, attachments=None,\n            reply_to=None, date=None, headers=None)\n\nConstruct a Message object.\n\nNotes:\n\n-  Full unicode support, and Unicode is the default\n-  You can provide ``html`` or ``text`` contents. If both are specified\n   -- the message will have an 'alternative' container, so the user will\n   receive both HTML and plaintext. The client will choose which one to\n   display.\n-  E-Mail addresses, such as ``recipients`` and ``sender``, can be\n   specified in one of the following formats:\n\n   -  ``'user@example.com'``: Just an e-mail address\n   -  ``('user@example.com', u'Honored User')``: email address with name\n\nArguments:\n\n-  ``recipients``: List of recipients\n-  ``subject``: Message subject\n-  ``html``: Message body, HTML\n-  ``text``: Message body, Text\n-  ``sender``: Sender e-mail address. If not set explicitly, the default\n   will be used on send\n-  ``cc``: CC list\n-  ``bcc``: BCC list\n-  ``attachments``: List of attachments\n-  ``reply_to``: Reply-to address\n-  ``date``: Send date\n-  ``headers``: Additional headers\n\nAttachment\n~~~~~~~~~~\n\n.. code:: python\n\n    Attachment(filename, data,\n               content_type='application/octet-stream',\n               disposition='attachment', headers=None)\n\nFile attachment information.\n\nThis can be provided to the ```Message`` <#message>`__ object on\nconstruction.\n\n-  ``filename``: Filename of attachment\n-  ``data``: Taw file data\n-  ``content_type``: File mimetype\n-  ``disposition``: Content-Disposition: 'attachment', 'inline', ...\n-  ``headers``: Additional headers for the attachment\n\nImageAttachment\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    ImageAttachment(filename, data,\n                    disposition='attachment', headers=None)\n\nImage attachment.\n\n-  It guesses the Content-Type from the data stream\n-  Supports 'inline' images: images embedded in the email. Useful for\n   templates.\n\n   Once an 'inline' image is created, its filename is used for\n   'Content-ID', which allows to reference it in the HTML body:\n\n   .. code:: python\n\n       from mailem import Message, Attachment, ImageAttachment\n\n       msg = Message(\n           ['test@example.com'],\n           'Hello',\n           '<img src=\"cid:flowers.jpg\" />',  # Referenced with \"cid:<filename>\"\n           attachments=[\n               ImageAttachment('flowers.jpg', open('flowers.jpg').read(), 'inline')\n           ]\n       )\n\nArguments:\n\n-  ``filename``: Image attachment filename. Will also become\n   'Content-ID' when inlined.\n-  ``data``: The raw file data\n\nPostman\n-------\n\n.. code:: python\n\n    Postman(sender, connection)\n\nPostman is the object you use to send messages through a configured\nConnection object.\n\nExample:\n\n.. code:: python\n\n    from mailem import Message, Postman\n    from mailem.connection import SMTPConnection\n\n    # Construct the message\n    msg = Message(\n        ['kolypto@gmail.com'],\n        u\"Mail'em test\",\n        u\"<b>yeah baby, it works!</b>\"\n    )\n\n    # Create the postman (see SMTPConnection)\n    postman = Postman('user@gmail.com',\n                      SMTPConnection(...))\n\n    # Connect, and send the message\n    with postman.connect() as c:\n        c.sendmail(msg)\n\n-  ``sender``: Default sender: e-mail or (name, email). Is used for\n   messages which do not specify the sender address explicitly.\n-  ``connection``: Connection object to use. See below.\n\nPostman.connect\n~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    connect()\n\nGet connected Postman context manager.\n\nReturns: ``mailem.postman.ConnectedPostman``\n\nPostman.loopback\n~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    loopback()\n\nGet a context manager which installs a LoopbackConnection on this\npostman.\n\nThis allows you to record outgoing messages by mocking a Postman. See\n```LoopbackConnection`` <#loopbackconnection>`__.\n\nReturns: ``MockedPostman`` Context manager which loops back outgoing\nmessages\n\nConnection\n----------\n\nConnection object represents a connection to a service which can send\ne-mail messages for us.\n\nSMTPConnection\n~~~~~~~~~~~~~~\n\n.. code:: python\n\n    SMTPConnection(host, port, username,\n                   password, local_hostname=None,\n                   ssl=False, tls=False)\n\nSMTP connection.\n\nSee `smtplib <https://docs.python.org/2/library/smtplib.html>`__ for the\nlist of exceptions that may occur.\n\nExample:\n\n.. code:: python\n\n    from mailem import Postman\n    from mailem.connection import SMTPConnection\n\n    postman = Postman('user@gmail.com',\n                  SMTPConnection(\n                      'smtp.gmail.com', 587,\n                      'user@gmail.com', 'pass',\n                      tls=True\n                  ))\n\n    with postman.connect() as c:\n        c.sendmail(msg)\n\nArguments:\n\n-  ``host``: SMTP server hostname\n-  ``port``: SMTP server port number.\n-  ``username``: User name to authenticate with\n-  ``password``: Password\n-  ``local_hostname``: FQDN of the local host for the HELO/EHLO command.\n   When ``None``, is detected automatically.\n-  ``ssl``: Use SSL protocol?\n-  ``tls``: Use TLS handshake?\n\nLoopbackConnection\n~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    LoopbackConnection()\n\nLoopback connection allows to record all outgoing messages instead of\nsending them.\n\nYou can install it manually:\n\n.. code:: python\n\n    from mailem import Postman\n    from mailem.connection import LoopbackConnection\n\n    lo = LoopbackConnection()\n    postman = Postman('user@example.com', lo)\n    #... send\n    messages = lo.get_messages()\n\nor you can mock an existing Postman with ``loopback()`` helper:\n\n.. code:: python\n\n    from mailem import Postman\n    from mailem.connection import SMTPConnection\n\n    postman = Postman('user@example.com',\n                  SMTPConnection(...))\n\n    with postman.loopback() as lo:\n        # Send\n        with postman.connect() as c:  # mocked!\n            c.sendmail(msg)\n\n    # Get\n    sent_messages = lo.get_messages()\n\nLoopback can be installed multiple times, and only top-level loopback\nwill catch the messages:\n\n.. code:: python\n\n    with postman.loopback() as lo1:\n        with postman.loopback() as lo2:\n            with postman.connect() as c:\n                c.sendmail(msg)\n\n    len(lo1)  #-> 0\n    len(lo2)  #-> 1\n\nAlso note that ``LoopbackConnection`` subclasses ``list``, so all list\nmethods, including iteration, is available.\n\nTemplating\n==========\n\nTemplate\n--------\n\n.. code:: python\n\n    Template(subject=None, html=None,\n             text=None, attachments=None,\n             defaults=None)\n\nA templated e-mail.\n\nBy default, the Template uses Python's ``Template`` renderer, which\nallows simple PHP-style substitution, but this can be overridden using\nset\\_renderer().\n\nFirst, a template is defined:\n\n.. code:: python\n\n    from mailem import Attachment\n    from mailem.template import Template\n\n    signup = Template('Congrats $user, you've signed up!',\n        'Welcome to our website!<br><img src=\"cid:logo.jpg\" /> -- $domain',\n        attachments=[\n            Attachment('logo.jpg', open('logo.jpg').read(), 'inline'))\n        ],\n        defaults={'domain': 'localhost'}  # default template values\n    )\n\nNow, having the template, you render it to a ```Message`` <#message>`__\nby calling it:\n\n.. code:: python\n\n    message = signup(['user@gmail.com'], dict(user='Honored User',))\n\nReady for sending! :)\n\n-  ``subject``: Message subject template\n-  ``html``: HTML message template, if any\n-  ``text``: Text message template, if any\n-  ``attachments``: Attachments for the template. Most probably, inline\n   elements.\n-  ``defaults``: Default template values, if required. The user can\n   override these later.\n\nTemplate.set\\_renderer\n~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    set_renderer(Renderer, **kwargs)\n\nSet renderer to be used with this template.\n\nA Renderer is any class that can be constructed with a template string\nargument, and called with template values dict to render it.\n\nWhen no renderer was explicitly set, it defaults to\nPythonTemplateRenderer.\n\nSee `mailem/template/renderer.py <mailem/template/renderer.py>`__: it's\neasy to implement renderers with custom behavior!\n\n-  ``Renderer``: Renderer class.\n-  ``**kwargs``: Additional arguments to renderer, if supported\n\nTemplate.defaults\n~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    defaults(values)\n\nSet default values.\n\nNew values will overwrite the previous.\n\n-  ``values``: Default template values\n\nTemplate.\\ **call**\n~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    __call__(recipients, values, **kwargs)\n\nCreate a ``Message`` object using the template values.\n\n-  ``recipients``: Message recipients list\n-  ``values``: Dictionary with template values\n-  ``**kwargs``: keyword arguments for the ```Message`` <#message>`__\n   constructor\n\nReturns: ``Message`` The rendered ``Message`` object\n\nTemplate.from\\_directory\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from_directory(path,\n                   subject_name='subject.txt',\n                   html_name='index.htm',\n                   text_name='index.txt',\n                   inline_rex='^i-(.*)')\n\nConvenience class method to import a directory as a template:\n\n-  ``subject.txt`` is the subject string template\n-  ``index.htm`` is the HTML template\n-  ``index.txt`` is the plaintext template\n-  All files matching the 'i-(\\*)' format are attached as 'inline', and\n   hence can be referenced in the template:\n\n   E.g. file 'i-flower.jpg' can be inlined as\n   ``<img src=\"cid:flower.jpg\" />``.\n\n-  All other files are just attachments.\n\nExample:\n\n.. code:: python\n\n    signup = Template.from_directory('templates/signup/')\n\n-  ``path``: Path to the directory\n-  ``subject_name``: Subject template filename\n-  ``html_name``: Html template filename\n-  ``text_name``: Plaintext template filename\n-  ``inline_rex``: Regular expression to match files that should be\n   inlined.\n\n   If the RegExp defines capture groups, group $1 will be used as the\n   fact filename.\n\nReturns: ``Template`` Template\n\nTemplateRegistry\n----------------\n\n.. code:: python\n\n    TemplateRegistry()\n\nE-Mail template registry.\n\nSimply contains all your templates and allows to render these by name.\nUseful if you have multiple templates in your app and want to have them\nprepared.\n\nInitially, the registry is empty, and you add\n```Template`` <#template>`__ objects one by one:\n\n.. code:: python\n\n    from mailem.template import Template, TemplateRegistry\n\n    templates = TemplateRegistry()\n    templates.add('signup', Template(\n                'Congrats $user, you've signed up!',\n               'Welcome to our website!<br> -- $domain',\n    ))\n    templates.defaults(dict(domain='example.com'))  # set defaults on all templates\n\nAlternatively, you can use\n```TemplateRegistry.from_directory()`` <#templateregistryfrom_directory>`__\nto load templates from filesystem.\n\nNow, to render a template, you ```get()`` <#templateregistryget>`__ it\nby name:\n\n.. code:: python\n\n    msg = templates.get('signup')(['user@gmail.com'], dict(user='Honored User',))\n\nTemplateRegistry.add\n~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    add(name, template)\n\nRegister a template\n\n-  ``template``: Template object\n\nReturns: ``mailem.template.Template`` The added template (in case you\nwant to set something on it)\n\nTemplateRegistry.set\\_renderer\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    set_renderer(renderer, **kwargs)\n\nSet renderer to be used with all templates.\n\nCan be called both before adding templates and after.\n\n-  ``renderer``: Renderer class to use\n-  ``**kwargs``: Additional arguments for the renderer\n\nTemplateRegistry.defaults\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    defaults(values)\n\nSet default values on all templates.\n\nNew values will overwrite the previous.\n\nCan be called both before adding templates and after.\n\n-  ``values``: Default template values\n\nTemplateRegistry.get\n~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    get(name)\n\nGet a Template by name\n\n-  ``name``: Template name\n\nReturns: ``mailem.template.Template``\n\nTemplateRegistry.from\\_directory\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from_directory(path, **kwargs)\n\nConvenience method to construct a template registry with a directory\nwhere each template is in a subdirectory\n\n-  ``path``: Path to templates\n-  ``**kwargs``: Arguments to\n   `Template.from\\_directory() <#templatefrom_directory>`__, if required\n\nReturns: ``mailem.template.registry.TemplateRegistry``\n\n.. |Build Status| image:: https://api.travis-ci.org/kolypto/py-mailem.png?branch=master\n   :target: https://travis-ci.org/kolypto/py-mailem",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/kolypto/py-mailem",
    "keywords": "e-mail,mail,template",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mailem",
    "platform": "any",
    "project_url": "https://pypi.org/project/mailem/",
    "release_url": "https://pypi.org/project/mailem/0.0.3-1/",
    "requires_python": null,
    "summary": "Full-featured e-mailing system: flexible, slim and sexy",
    "version": "0.0.3-1"
  },
  "releases": {
    "0.0.1-0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "56020db6df4953291c3541b21b99c72b",
          "sha256": "dbd9d269730af209aef4408b0803341d8ad9e784612cabd9091e87338970195c"
        },
        "downloads": 1377,
        "filename": "mailem-0.0.1_0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "56020db6df4953291c3541b21b99c72b",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 20364,
        "upload_time": "2014-08-14T14:58:33",
        "url": "https://files.pythonhosted.org/packages/a1/9a/95af77ed338127c2c793a9df5e1fb1bb78432b4551423e35584e4440be3e/mailem-0.0.1_0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a8ec19843dff1d2cef46d9e3d5de5353",
          "sha256": "4b1f436aa6d8c5022bdc2dc7dec6e9a057644510894abce400b7315a4cecc1c7"
        },
        "downloads": 1392,
        "filename": "mailem-0.0.1-0.tar.gz",
        "has_sig": false,
        "md5_digest": "a8ec19843dff1d2cef46d9e3d5de5353",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15790,
        "upload_time": "2014-08-14T14:58:30",
        "url": "https://files.pythonhosted.org/packages/1c/c0/179629c44d6904c1cbd224769d7222d7449e65878984f722e7fc13fc0339/mailem-0.0.1-0.tar.gz"
      }
    ],
    "0.0.2-0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8e1da4648251d8246d0033a83ba47c70",
          "sha256": "8babe897f25dbc1b4ecc528d8b0fece6c1973d99157c785bc1c483f0a0dc02c9"
        },
        "downloads": 1330,
        "filename": "mailem-0.0.2_0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e1da4648251d8246d0033a83ba47c70",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 23381,
        "upload_time": "2014-08-15T15:25:36",
        "url": "https://files.pythonhosted.org/packages/5d/f5/b957f3c604ed3c1787d33ab526fe04af2177a2b0009deef5f434dc8ee81c/mailem-0.0.2_0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "46a85b6805f40abe8e2fc92f9beea911",
          "sha256": "89e9fe68877c02cd8a52fc6948601e1b221c03495609fd388f79d7f77f2c14f1"
        },
        "downloads": 1368,
        "filename": "mailem-0.0.2-0.tar.gz",
        "has_sig": false,
        "md5_digest": "46a85b6805f40abe8e2fc92f9beea911",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19151,
        "upload_time": "2014-08-15T15:25:33",
        "url": "https://files.pythonhosted.org/packages/4e/40/15e818e3e76603ad9470babaa0b284086bb5e7833332a6527ab721cec2d6/mailem-0.0.2-0.tar.gz"
      }
    ],
    "0.0.3-0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b8da5c0d4eb1b31519ee061b35db3f88",
          "sha256": "e2d26ecbe0c6bce3685c28ce4679b946becfb294b964eccc2f62cacfff4e283e"
        },
        "downloads": 1324,
        "filename": "mailem-0.0.3_0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "b8da5c0d4eb1b31519ee061b35db3f88",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 23967,
        "upload_time": "2014-08-15T16:01:33",
        "url": "https://files.pythonhosted.org/packages/63/04/10ae2a3dcc87b5c61a83b901fe3d97b5e78b6d271b21ed739b38f40c00b6/mailem-0.0.3_0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "054e2a9cf5a05ee25cb691593a1b4c6b",
          "sha256": "ec4da8aa86f05ee115117f6e099aea84b7470dffccad2875db77c3007eae4884"
        },
        "downloads": 1370,
        "filename": "mailem-0.0.3-0.tar.gz",
        "has_sig": false,
        "md5_digest": "054e2a9cf5a05ee25cb691593a1b4c6b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19797,
        "upload_time": "2014-08-15T16:01:29",
        "url": "https://files.pythonhosted.org/packages/6e/83/d120edab2d0f3b97ffd2d64bd5e0e2e8005ef660534f6cb46674d260ee24/mailem-0.0.3-0.tar.gz"
      }
    ],
    "0.0.3-1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fa98071966a1e253d6824384c5b05f48",
          "sha256": "e504851c64830f0815517cba94629c182eabba9e6780bd997bbb148ca65c4929"
        },
        "downloads": 1619,
        "filename": "mailem-0.0.3_1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa98071966a1e253d6824384c5b05f48",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 23971,
        "upload_time": "2014-08-15T16:11:01",
        "url": "https://files.pythonhosted.org/packages/33/c2/7241d82d74be94e41ac299b5c74783491809169f827a477164905fc5125a/mailem-0.0.3_1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "af9aa6b889fd27fd79da27927befbd0e",
          "sha256": "ec93920a51cdbc63b225a933d9de2456a0d1b1b6598fe5f86cd873385c7bd6b6"
        },
        "downloads": 1950,
        "filename": "mailem-0.0.3-1.tar.gz",
        "has_sig": false,
        "md5_digest": "af9aa6b889fd27fd79da27927befbd0e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19796,
        "upload_time": "2014-08-15T16:10:58",
        "url": "https://files.pythonhosted.org/packages/24/53/4246fffaa8d6781b00fa75a21a20e13e662e533647a41903f714f699297a/mailem-0.0.3-1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "fa98071966a1e253d6824384c5b05f48",
        "sha256": "e504851c64830f0815517cba94629c182eabba9e6780bd997bbb148ca65c4929"
      },
      "downloads": 1619,
      "filename": "mailem-0.0.3_1-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "fa98071966a1e253d6824384c5b05f48",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "size": 23971,
      "upload_time": "2014-08-15T16:11:01",
      "url": "https://files.pythonhosted.org/packages/33/c2/7241d82d74be94e41ac299b5c74783491809169f827a477164905fc5125a/mailem-0.0.3_1-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "af9aa6b889fd27fd79da27927befbd0e",
        "sha256": "ec93920a51cdbc63b225a933d9de2456a0d1b1b6598fe5f86cd873385c7bd6b6"
      },
      "downloads": 1950,
      "filename": "mailem-0.0.3-1.tar.gz",
      "has_sig": false,
      "md5_digest": "af9aa6b889fd27fd79da27927befbd0e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 19796,
      "upload_time": "2014-08-15T16:10:58",
      "url": "https://files.pythonhosted.org/packages/24/53/4246fffaa8d6781b00fa75a21a20e13e662e533647a41903f714f699297a/mailem-0.0.3-1.tar.gz"
    }
  ]
}