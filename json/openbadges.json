{
  "info": {
    "author": "IMS Global",
    "author_email": "openbadgesinfo@imsglobal.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Education",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Utilities"
    ],
    "description": "Open Badges Validator Core\n==========================\n\nOpen Badges Validator Core is a python package designed to verify the\nvalidity of Open Badges based on a variety of input sources and present\na useful interface for accessing their properties and validation\ninformation. HTTP, Python and command line APIs are provided.\n\nNote - Open Badges Validator Core is in *beta* stage. The results\nprovided *cannot* be used as a reliable indicator of the validity of an\nOpen Badge, and *cannot* be used as proof to claim implementation\nconformance.\n\nOpen Badges Validator Core is released by `IMS Global Learning\nConsortium <https://www.imsglobal.org>`__.\n\nThis package builds on Badgecheck, originated by `Concentric\nSky <https://concentricsky.com>`__. Other IMS Global members who have\ncontributed to this package include `D2L <https://www.d2l.com/>`__ and\n`Chalk & Wire <http://www.chalkandwire.com>`__.\n\nUser documentation\n------------------\n\nInstalling the package\n~~~~~~~~~~~~~~~~~~~~~~\n\nFor best results, `create and activate a local virtual\nenvironment <http://docs.python-guide.org/en/latest/dev/virtualenvs/>`__.\n\nYou may install the validator directly from\n`pypi <https://pypi.python.org/pypi/openbadges/>`__:\n``pip install openbadges``\n\nRunning the validator over the command-line\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen installed into an activated environment, a command line script will\nbe available.\n\n``openbadges verify --data 'https://example.org/badgeassertion'``\n\nSee help with ``openbadges verify --help``\n\nThere are two optional positional arguments, *input\\_file* and\n*output\\_file*. If you don't specify an output file, results will be\nwritten to stdout. If you wish to provide input data, such as a URL from\nthe command and write JSON results to an output file, you may use a\n``-`` to skip the first input\\_file argument.\n``openbadges verify - results.json --data 'https://example.org/badgeassertion'``\n\nYou may pass a JSON string of an expected recipient profile:\n\\`openbadges verify input.json --recipient '{\"email\": \"me@example.org\",\n\"url\": \"http://example.org\"}'\n\nRunning the Flask server\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nA Flask web server is an optional component of the Open Badges\nvalidator. The necessary dependency is installed when you install from\n``pip install -r requirements.txt``. You may install the server using\npip with the optional server flag: ``pip install openbadges [server]``\n\nIn order to run the server, activate your environment, navigate to the\nfolder that was installed, and execute the following command:\n``python openbadges/verifier/server/app.py``\n\nA local server will start up on the development port 5000 (by default),\nwhich you can access from your browser or other HTTP client.\n\nInterpreting the results\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe results returned by the validator is a JSON object. (If you are\nusing a user interface of some kind, you may not see this.) Depending on\nyour use case, you may only be interested in a few parts of this object.\nThe overall structure of the returned object is\n\n::\n\n    {\n     \"report\": {...}\n     \"input\": {...}\n     \"graph\" {...}\n    }\n\n\u2026 where the ``report`` object is the one you would typically be most\ninterested in. If the ``valid`` property of the report object is set to\n``true``, it tells you that the validator did not find any errors when\nanalyzing your badge. If it is set to ``false``, it means that your\nbadge did contain at least one error. Check the ``errorCount`` property\nto find out how many errors there were. For each one of those errors,\nthere will be a corresponding message (with a ``messageLevel`` of\n'ERROR') in the ``messages`` array.\n\nThe validator may also issue warnings (these have a ``messageLevel`` of\n'WARNING') in the ``messages`` array). A warning signals the presence of\na feature in your badge which is discouraged, deprecated, risky, or\ngenerally considered not recommended practice. Your badge however\nremains valid and can safely be publicized. Correcting a warning is in\nother words optional.\n\nThe ``input`` object of the results object shows what input you provided\nto the validator. You will probably already know what you just\nsubmitted; this field is primarily meant for machines to confirm after\nthe fact exactly which input data resulted in the given report.\n\nThe ``graph`` object contains a compact representation of the badge\ndata, including parts of the badge that were fetched over the wire. This\ncan be helpful for debugging, if you\u2019re an expert.\n\nNote that a detailed technical description of the result objects and\nproperties are provided in the HTTP API results section in this\ndocument.\n\nWhat versions of Open Badges does this validator support?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis is primarily a validator for Open Badges 2.0 and later. You can\nsubmit badges that were created under earlier versions of the Open\nBadges specification as well; note however that Open Badges 2.0 rules\nwill be applied to such badges, and as a consequence of this, the\nvalidator may flag a badge as invalid that was flagged as valid by\nearlier validators.\n\nIf the version of your submitted badge is lower than 2.0, the validator\nwill (as represented in the report\u2019s graph object) attempt to upgrade\nthe badge to 2.0 syntax. The graph object can consequently be used as a\npart in the tool chain for forward migration of badges to the current\nversion of the Open Badges standard.\n\nHow do I fix errors with badges?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe Open Badges Validator is (unfortunately) not a repair tool, though\nif you are the issuer, you may find the error messages the validator\nreports essential in identifying the errors. Errors are typically fixed\nby modifying one or more of the objects that make up the badge. Error\nmessages typically target a node\\_id or node\\_path in the message that\nidentifies the location of the error, and the message aims to be as\ndescriptive as possible of what was found to be invalid. Note that\nbeyond the error messages themselves, the ``graph`` object of the report\nmay provide helpful clues to pinpoint the error.\n\nSupport\n~~~~~~~\n\nIf you run into problems after following the installation and running\ninstructions above, or if you have other kinds of questions relating to\nthe use of the tool and/or the interpretation of results, please use the\n`IMS Open Badges Community\nforum <https://www.imsglobal.org/forums/open-badges-community-forum/open-badges-community-discussion>`__\nto ask your questions (and/or help others).\n\nHow to contribute\n-----------------\n\nIf you have found what might be a bug in the application, open an issue\nin the `issue\ntracker <https://github.com/IMSGlobal/openbadges-validator-core/issues>`__\nwith the label \u2018bug\u2019. The project owners will discuss the issue with\nyou, and if it is indeed a bug, the issue will be confirmed and dealt\nwith. (For general usage questions, please use the `IMS Open Badges\nCommunity\nforum <https://www.imsglobal.org/forums/open-badges-community-forum/open-badges-community-discussion>`__\ninstead of the issue tracker. See the Support section in this document).\n\nIf you are a developer and want to contribute to the project, please\nbegin with opening an issue in the tracker describing the change or\naddition you want to contribute. If we after discussing the matter can\nconfirm the usefulness of your planned contribution, then get ready to\ncontribute. We follow the `standard git flow for contributing to\nprojects <https://git-scm.com/book/en/v2/GitHub-Contributing-to-a-Project>`__,\nin other words, using pull requests from topic branches, followed by\nreview by a project owner before merge.\n\nNote that the open source license of this project will apply to your\ninbound contributions. Note also that under certain circumstances an IMS\ncontributor agreement will need to be filled in. (This is one of the\nmain reasons we want you to talk to us in the issue tracker before you\nspend time on coding).\n\nDeveloper documentation\n-----------------------\n\nDesign overview\n~~~~~~~~~~~~~~~\n\nThis Open Badges verification and validation tool is based on principles\nof easy testing of modular components and consistent patterns of\ninteraction between those components. It relies on the Redux pattern\nfrom the ReactJS community. We use the Python port of some of the basic\nRedux tools called Pydux.\n\nApplications that implement Redux have several important characteristics\nthat together make for predictable operation and division of\nresponsibilities:\n\n-  Single source of truth: There is one object tree that represents the\n   entire state of the application. It is managed in a \u201cstore\u201d and\n   expressed in simple data types.\n-  This state is read-only and can only be modified by submitting\n   \u201cactions\u201d, that are handled by the store one at a time, always\n   producing a new copy of the state. Because python variables are\n   pointers to memory space, this makes for efficient storage and\n   comparison. Actions are simple dicts with a \u201ctype\u201d property.\n-  The mechanism for changing state occurs through \u201creducers\u201d, which\n   inspect incoming actions and return a new copy of the portion of the\n   state they oversee.\n\nIn order to verify the integrity of Open Badges, the validator must take\ninput from the user, analyze that input, access the relevant Open Badges\nresources, ensure that each of them are well formed and that they are\nlinked together appropriately before packaging up the results and\nreturning them to the user. This entails the ability to handle a wide\nvariety of different inputs and configurations of badge resources. The\nvalidator takes advantage of Redux patterns to keep track of not only\nthe badge data but also the processing tasks. All application state for\na request is in a state object dict managed by a store created upon user\ninput.\n\nOpen Badges Validator Core is made up of several important components:\n\n-  Action creators: These take input parameters and return an action\n   dict that may be interpreted by the reducers. Each action creator\n   returns a dict with a certain \u2018type\u2019 value that will be handled by\n   one or more parts of the reducer tree.\n-  Reducers: These all have the function signature reducer(state,\n   action) and return a new copy of the state object or the current\n   object if no change has been made. Reducers are \u201ccombined\u201d to each\n   only need to manage one part of the overall state tree. Reducers\n   cannot dispatch new actions, make API calls or do anything else that\n   introduces side effects beyond returning their portion of the\n   application state.\n-  Tasks: Within the state tree is a list of tasks, stored with their\n   results. Tasks may do the things that the reducers are not allowed to\n   do, like make HTTP requests and queue additional tasks (by calling\n   the add\\_task action creator and returning the task to the task\n   manager). Every task has the function signature task(state,\n   task\\_meta) and returns a tuple in the format (result: bool, message:\n   str, actions: list[dict]), made easier with the helper task\\_result()\n-  Validation Tasks (specifically): Tasks are broken down to a micro\n   level with a single responsibility each. Because of their functional\n   structure that inspects state and returns results at this level, they\n   are very testable.\n-  User API and task manager: The application state is created fresh\n   with each request. When a request comes in, the request manager\n   initializes a store and queues up the first relevant tasks. Then,\n   while tasks remain, the task manager runs each of them and dispatches\n   the actions that they return, some of which queue up new tasks.\n-  Tests: Unit tests and integration tests cover action creators,\n   reducers, tasks, and API response. Mock state objects and actions are\n   particularly easy to construct, and tests may implement their own\n   task running system in order to precisely limit what components of\n   the system are under test at any given time. Everything boils down to\n   specifying which changes to state should occur and verifying that\n   they do occur.\n\nWhen the tasks run out, the user API returns the state to the user.\n\nHTTP API\n~~~~~~~~\n\nThe Open Badges Validator includes a simple Flask server application for\nyour convenience (refer to \u201cRunning the Flask server\u201d in this document).\nWhen the server is running, it responds primarily to POST requests at\n``/results``.\n\nRequest Parameters\n^^^^^^^^^^^^^^^^^^\n\nMake a request to ``/results`` with either a JSON body or\nform/multipart. If using image, use ``form/multipart``. Responses may be\nrequested in either ``text/html`` or ``application/json`` format.\n\n+----------+------------------------------------------------------+------------+\n| name     | Expected value(s)                                    | Required?  |\n+==========+======================================================+============+\n| data     | One of: a) URL string for an HTTP-hosted Open Badges | One of     |\n|          | Object, b) JSON string for an Open Badges Object, or | ``data``   |\n|          | c) Cryptographic signature string (JWS format) of a  | or         |\n|          | signed Open Badges Assertion                         | ``image``  |\n|          |                                                      | is         |\n|          |                                                      | required.  |\n+----------+------------------------------------------------------+------------+\n| image    | File: A baked Open Badge image in PNG or SVG format. | One of     |\n|          | See `Baking                                          | ``data``   |\n|          | Specification <https://openbadgespec.org/baking/inde | or         |\n|          | x.html>`__.                                          | ``image``  |\n|          |                                                      | is         |\n|          |                                                      | required.  |\n+----------+------------------------------------------------------+------------+\n| profile  | JSON string of an Open Badges Profile that is        | No.        |\n|          | trusted by the client. If an Assertion is found in   |            |\n|          | the \u201cdata\u201d or \u201cimage\u201d input, the profile will be     |            |\n|          | checked against its recipient value. If input data   |            |\n|          | is not an Assertion, profile will be ignored.        |            |\n+----------+------------------------------------------------------+------------+\n\nExample Request\n^^^^^^^^^^^^^^^\n\nHere is the essential parts of an example request sent in form/multipart\nformat.\n\n::\n\n    Request URL: http://localhost:8000/results\n    Request Method: POST\n    Accept: application/json\n\n    ------WebKitFormBoundaryaBQaPAkvF3DXppQ7\n    Content-Disposition: form-data; name=\"data\"\n\n    https://api.badgr.io/public/assertions/Ph_r3S6jTqqkHNrQUKbqQg?v=2_0\n    ------WebKitFormBoundaryaBQaPAkvF3DXppQ7\n    Content-Disposition: form-data; name=\"image\"; filename=\"\"\n    Content-Type: application/octet-stream\n\n    ------WebKitFormBoundaryaBQaPAkvF3DXppQ7\n    Content-Disposition: form-data; name=\"profile\"\n\n    {\"email\": \"nate@ottonomy.net\"}\n    ------WebKitFormBoundaryaBQaPAkvF3DXppQ7--\n\nA HTML form is available in browser by making a GET request to the root\nof the server. If the flask server is running on http://127.0.0.1:8000\nfor example, a request may be made to that URL to obtain the form in the\nbrowser.\n\nResponse\n^^^^^^^^\n\nThe response will be delivered as a JSON object, either as the complete\nbody of a request for \u201capplication/json\u201d or embedded in an HTML results\ntemplate.\n\n+----------------------------+-----------------------------------------------+\n| Response property          | type/description                              |\n+============================+===============================================+\n| input                      | An object summarizing the request that was    |\n|                            | made. (Input object)                          |\n+----------------------------+-----------------------------------------------+\n| graph                      | Array of objects: The unordered set of linked |\n|                            | data objects discovered during validation of  |\n|                            | the input. Each will be compacted into the    |\n|                            | Open Badges V2 Context and tagged with at     |\n|                            | \u2018type\u2019 and an \u2018id\u2019.                           |\n+----------------------------+-----------------------------------------------+\n| report                     | An object summarizing the validity results    |\n|                            | and the object in the graph that is the       |\n|                            | primary subject of validation (see Report     |\n|                            | object below)                                 |\n+----------------------------+-----------------------------------------------+\n\nHere are the properties found within the 'report':\n\n+----------------------------+-----------------------------------------------+\n| Report Object property     | type/description                              |\n+============================+===============================================+\n| recipientProfile           | An object describing the matching recipient   |\n|                            | identifier property of the submitted          |\n|                            | recipientProfile. For example, if a Profile   |\n|                            | with three possible email addresses was       |\n|                            | submitted and the Assertion was awarded to    |\n|                            | one of them, the recipientProfile would be an |\n|                            | object with a single \u201cemail\u201d property that    |\n|                            | had a single string value of the successfully |\n|                            | confirmed address. If a \u201curl\u201d-type identifier |\n|                            | was the recipient identifier property in a    |\n|                            | validated assertion, the property name in     |\n|                            | recipientProfile would be \u201curl\u201d.              |\n+----------------------------+-----------------------------------------------+\n| valid                      | Boolean: Whether the object parsed from the   |\n|                            | input passed all required verification and    |\n|                            | data validation tests.                        |\n+----------------------------+-----------------------------------------------+\n| errorCount                 | Number (int): The number of critical          |\n|                            | verification and validation task failures     |\n|                            | (violations of MUST-level requirements in the |\n|                            | Open Badges Specification). If this number is |\n|                            | > 0, valid will be false.                     |\n+----------------------------+-----------------------------------------------+\n| warningCount               | Number (int): The number of non-critical      |\n|                            | verification and validation task failures     |\n|                            | (violations of SHOULD-level requirements).    |\n|                            | These will not cause the badge to be invalid, |\n|                            | but consumers MAY treat Open Badge objects    |\n|                            | that fail these tasks as invalid for certain  |\n|                            | purposes.                                     |\n+----------------------------+-----------------------------------------------+\n| messages                   | Array of Message objects (see below)          |\n+----------------------------+-----------------------------------------------+\n| validationSubject          | String: the id matching the \u2018id\u2019 property of  |\n|                            | the object in the response \u2018graph\u2019 that is    |\n|                            | the primary thing validated. For example, if  |\n|                            | the URL of a hosted Assertion is the input    |\n|                            | data, this will be that URL.                  |\n+----------------------------+-----------------------------------------------+\n| openBadgesVersion          | A string corresponding to the detected        |\n|                            | version of the validationSubject. Possible    |\n|                            | values are \u201c0.5\u201d, \u201c1.0\u201d, \u201c1.1\u201d and \u201c2.0\u201d      |\n+----------------------------+-----------------------------------------------+\n\nHere are the properties that describe each of the 'messages' in the\nreport:\n\n+----------------------------+-----------------------------------------------+\n| Message Object property    | type/description                              |\n+============================+===============================================+\n| name                       | A string codename for the task being          |\n|                            | reported. May not appear for \u201cINFO\u201d level     |\n|                            | messages.                                     |\n+----------------------------+-----------------------------------------------+\n| messageLevel               | A string describing the severity of the       |\n|                            | message. Either \u201cERROR\u201d (critical, triggering |\n|                            | invalidity of the overall result), \u201cWARNING\u201d  |\n|                            | (non-critical), or \u201cINFO\u201d (interesting        |\n|                            | tidbit).                                      |\n+----------------------------+-----------------------------------------------+\n| node\\_id                   | String: the \u201cid\u201d matching the subject in the  |\n|                            | graph that was tested for this particular     |\n|                            | task.                                         |\n+----------------------------+-----------------------------------------------+\n| node\\_path                 | Node Path Array (see note below)              |\n+----------------------------+-----------------------------------------------+\n| success                    | Boolean: Whether the task succeeded or        |\n|                            | failed. Successful task results are omitted   |\n|                            | from the response (except \u201cINFO\u201d messages).   |\n+----------------------------+-----------------------------------------------+\n| result                     | String: A human-readable description of the   |\n|                            | problem or informative message.               |\n+----------------------------+-----------------------------------------------+\n| *other properties*         | Other properties vary by task. They provide   |\n|                            | debug information to describe the information |\n|                            | made available to the task and should         |\n|                            | typically be ignored by the client.           |\n+----------------------------+-----------------------------------------------+\n\n**Node Path Array**: A specialized Array used by the validator to locate\na node that is nested within one of the primary objects in the graph.\nFor example ``[\u201chttp://foo.co/bar\u201d, \u201calignment\u201d, 0, \u201calignmentName\u201d]``\nindicates the \u201calignmentName\u201d property of the object that is the first\n(index 0) entry in the list of \u201calignment\u201d objects of the node with the\nid \u201chttp://foo.co/bar\u201d in the graph.\n\nPython API\n~~~~~~~~~~\n\nIn addition to the HTTP server included with the package, a python API\nis available. Response properties are the same, delivered as a python\ndictionary instead of a JSON string.\n\nTo make a request using the python API from within a python application,\nmake sure the package is installed into your python environment (likely\nan activated virtualenv). Then import the verify method and call it:\n\n::\n\n    from openbadges import verify\n    results = verify(\u2018http://assertions.com/example-assertion-url\u2019)\n\nIf you wish to verify assertion input against an expected recipient\nprofile, you may pass the profile dict as a second positional argument:\n\n``results = verify(assertion_json, {\u2018email\u2019: [\u2018possible@example.com\u2019, \u2018other@example.com\u2019]}``\n\nUsing your own cache backend\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis package makes use of RequestsCache to reduce load on frequently\nused resources such as the core Open Badges context files. By default,\nthe validator will instantiate its own in-memory cache, but it is\npossible to pass in a compatible RequestsCache backend of your own with\nhigher performance in the optional \u201coptions\u201d keyword arguments dict.\nThis way, you can reuse the cache across multiple validation requests.\n\n``results = verify(assertion_url, options={\u2018cache_backend\u2019: \u2018redis\u2019, \u2018cache_expire_after\u2019: 60 * 60 * 24})``\n\nRunning tests\n~~~~~~~~~~~~~\n\nTo run tests, install tox into your system's global python environment\nand use the command: ``tox``\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/IMSGlobal/openbadges-validator-core",
    "keywords": "",
    "license": "Apache 2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openbadges",
    "platform": "",
    "project_url": "https://pypi.org/project/openbadges/",
    "release_url": "https://pypi.org/project/openbadges/1.0.0rc1/",
    "requires_dist": [
      "gunicorn (==19.7.1); extra == 'server'",
      "Flask (==0.12.1); extra == 'server'",
      "validators (==0.11.2)",
      "rfc3986 (==0.4.1)",
      "requests-cache (==0.4.13)",
      "requests (>=2.13)",
      "pytz (==2017.2)",
      "PyLD (==0.7.1)",
      "pydux (==0.2.2)",
      "pycrypto (==2.6.1)",
      "openbadges-bakery (>=1.0.0b1)",
      "language-tags (==0.4.3)",
      "jws (==0.1.3)",
      "jsonschema (==2.6.0)",
      "future (==0.16.0)",
      "Click (==6.7)",
      "aniso8601 (>=1.2.0)"
    ],
    "requires_python": "",
    "summary": "A python module that performs verification for Open Badges.",
    "version": "1.0.0rc1"
  },
  "releases": {
    "1.0.0b2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fc7bf1a4e1de8fe0aa0694bb727ed162",
          "sha256": "cfe2d47b543a65686dbd8ed646f8abe7e0e927496669298032ad1a6e89fb6bd9"
        },
        "downloads": 0,
        "filename": "openbadges-1.0.0b2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fc7bf1a4e1de8fe0aa0694bb727ed162",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 59216,
        "upload_time": "2017-09-19T18:58:47",
        "url": "https://files.pythonhosted.org/packages/a6/6d/d1d2695f437e0441d18eb9d8b1321ca9c972fd8357de34f6f2f6a1b25878/openbadges-1.0.0b2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8453beef5b94c9f5f7d65c061f9cff67",
          "sha256": "03267dbe7a08149df10b11776f89fa7d01c6c1d41e7a4ccf60252abc87f1ff3b"
        },
        "downloads": 0,
        "filename": "openbadges-1.0.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "8453beef5b94c9f5f7d65c061f9cff67",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 209475,
        "upload_time": "2017-09-19T18:58:49",
        "url": "https://files.pythonhosted.org/packages/0f/0d/238cc5990dadd573d07b175804792801a355acae5932fdeb9979ea80a1f7/openbadges-1.0.0b2.tar.gz"
      }
    ],
    "1.0.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fda5db5d038538d25b6170b84493acff",
          "sha256": "a68fad5062939fd1a789d9f53db61595a8e4dc4e41f866bc42ddf310a8e4cbf1"
        },
        "downloads": 0,
        "filename": "openbadges-1.0.0rc1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fda5db5d038538d25b6170b84493acff",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 61128,
        "upload_time": "2017-10-01T15:41:46",
        "url": "https://files.pythonhosted.org/packages/d9/40/88e8d40f3d88d0f66d05a28d4730443e47e7226079780adc270cd757e9a0/openbadges-1.0.0rc1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4d1a42af92f9b4eafb123f30e12b293c",
          "sha256": "2a457323bd6712089b859f82bd0d3a5f69dc95e610f5289dad88607ff867c1a0"
        },
        "downloads": 0,
        "filename": "openbadges-1.0.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "4d1a42af92f9b4eafb123f30e12b293c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 220063,
        "upload_time": "2017-10-01T15:41:49",
        "url": "https://files.pythonhosted.org/packages/a6/9a/c2f47e10aaf4b15286a808ce8e7dbf02d5bc6050abaef6e6a5845f91c2c1/openbadges-1.0.0rc1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "fda5db5d038538d25b6170b84493acff",
        "sha256": "a68fad5062939fd1a789d9f53db61595a8e4dc4e41f866bc42ddf310a8e4cbf1"
      },
      "downloads": 0,
      "filename": "openbadges-1.0.0rc1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fda5db5d038538d25b6170b84493acff",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 61128,
      "upload_time": "2017-10-01T15:41:46",
      "url": "https://files.pythonhosted.org/packages/d9/40/88e8d40f3d88d0f66d05a28d4730443e47e7226079780adc270cd757e9a0/openbadges-1.0.0rc1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "4d1a42af92f9b4eafb123f30e12b293c",
        "sha256": "2a457323bd6712089b859f82bd0d3a5f69dc95e610f5289dad88607ff867c1a0"
      },
      "downloads": 0,
      "filename": "openbadges-1.0.0rc1.tar.gz",
      "has_sig": false,
      "md5_digest": "4d1a42af92f9b4eafb123f30e12b293c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 220063,
      "upload_time": "2017-10-01T15:41:49",
      "url": "https://files.pythonhosted.org/packages/a6/9a/c2f47e10aaf4b15286a808ce8e7dbf02d5bc6050abaef6e6a5845f91c2c1/openbadges-1.0.0rc1.tar.gz"
    }
  ]
}