{
  "info": {
    "author": "Frank Sachsenheim",
    "author_email": "funkyfuture@riseup.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Text Processing :: Markup :: XML"
    ],
    "description": "inxs \u2013 XML transformations without boilerplate.\n===============================================\n\ninxs is inexcessive.\n\ninxs is not XSLT.\n\ninxs is ISC-licensed.\n\ninxs is fully documented here: https://inxs.readthedocs.io.\n\n\nAt a glimpse\n------------\n\n`Wikipedia XSLT example #1`_:\n\n.. list-table::\n   :header-rows: 1\n\n   * - **inxs**\n     - **XSLT**\n   * - .. code-block:: python\n\n          def extract_person(element):\n              return element.attrib['username'], element.find('name').text\n\n          def append_person(previous_result, target):\n              element = etree.SubElement(target, 'name', {'username': previous_result[0]})\n              element.text = previous_result[1]\n              return element\n\n          transformation = Transformation(\n              Rule(('person',), (extract_person, append_person)),\n              config=Config(result_object='context.target',\n                            context={'target': etree.Element('root')}))\n\n     - .. code-block:: xslt\n\n          <xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" version=\"1.0\">\n            <xsl:output method=\"xml\" indent=\"yes\"/>\n\n             <xsl:template match=\"/persons\">\n               <root>\n                 <xsl:apply-templates select=\"person\"/>\n               </root>\n             </xsl:template>\n\n             <xsl:template match=\"person\">\n               <name username=\"{@username}\">\n                 <xsl:value-of select=\"name\" />\n               </name>\n             </xsl:template>\n\n          </xsl:stylesheet>\n\n\n`Wikipedia XSLT example #2`_:\n\n.. list-table::\n   :header-rows: 1\n\n   * - **inxs**\n     - **XSLT**\n   * - .. code-block:: python\n\n          e = ElementMaker(namespace='http://www.w3.org/1999/xhtml',\n                           nsmap={None: 'http://www.w3.org/1999/xhtml'})\n\n          def generate_skeleton(context, e):\n              context.html = e.html(\n                  e.head(e.title('Testing XML Example')),\n                  e.body(e.h1('Persons'), e.ul()))\n              context.persons_list = context.html.xpath('./body/ul', smart_prefix=True)[0]\n\n          def extract_person(element, persons):\n              persons.append((element.find('name').text, element.find('family-name').text))\n\n          def list_persons(previous_result, persons_list, e):\n              persons_list.extend(e.li(f'{x[1]}, {x[0]}') for x in previous_result)\n\n          transformation = Transformation(\n              generate_skeleton,\n              Rule(('person',), extract_person),\n              sorter('persons', itemgetter(1)),\n              list_persons,\n              config=Config(result_object='context.html', e=e, context={'persons': []}))\n\n     - .. code-block:: xslt\n\n          <xsl:stylesheet version=\"1.0\"\n            xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n            xmlns=\"http://www.w3.org/1999/xhtml\">\n\n            <xsl:output method=\"xml\" indent=\"yes\" encoding=\"UTF-8\"/>\n\n            <xsl:template match=\"/persons\">\n             <html>\n               <head> <title>Testing XML Example</title> </head>\n               <body>\n                 <h1>Persons</h1>\n                 <ul>\n                   <xsl:apply-templates select=\"person\">\n                     <xsl:sort select=\"family-name\" />\n                   </xsl:apply-templates>\n                 </ul>\n               </body>\n             </html>\n            </xsl:template>\n\n            <xsl:template match=\"person\">\n             <li>\n               <xsl:value-of select=\"family-name\"/> (\u2026) <xsl:value-of select=\"name\"/>\n             </li>\n            </xsl:template>\n\n         </xsl:stylesheet>\n\n\n`Here`_ you can find the source repository and issue tracker of inxs.\n\n.. _here: https://github.com/funkyfuture/inxs\n.. _Wikipedia XSLT example #1: https://en.wikipedia.org/wiki/XSLT#Example_1_.28transforming_XML_to_XML.29\n.. _Wikipedia XSLT example #2: https://en.wikipedia.org/wiki/XSLT#Example_2_.28transforming_XML_to_XHTML.29\n\n\nRoadmap\n-------\n\n0.1b0\n.....\n\n- enough documentation to get someone started\n- take it to the cheeseshop\n\n0.1\n...\n\n- reasonable test coverage\n- some usages in the wild / feedback thereof\n\n\n=======\nHistory\n=======\n\n0.1a (unreleased)\n-----------------\n\n* First release on PyPI.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/funkyfuture/inxs",
    "keywords": "inxs xml processing transformation framework xslt not-xslt",
    "license": "ISC license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "inxs",
    "platform": "",
    "project_url": "https://pypi.org/project/inxs/",
    "release_url": "https://pypi.org/project/inxs/0.1a0/",
    "requires_python": "",
    "summary": "XML transformations without boilerplate.",
    "version": "0.1a0"
  },
  "releases": {
    "0.1a0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6e6a88bb0d7635cde00b01483e28b477",
          "sha256": "2d79bb0c26443fd714cd4cd0097fa366ddde10ae999ed55e67b7ab4dd80200c6"
        },
        "downloads": 0,
        "filename": "inxs-0.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "6e6a88bb0d7635cde00b01483e28b477",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19462,
        "upload_time": "2017-05-03T00:15:09",
        "url": "https://files.pythonhosted.org/packages/44/a8/e58a790efa3ff37c8a7f52ef97d6c8d1cbeecb231a7e8ec305964bdd7dd0/inxs-0.1a0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6e6a88bb0d7635cde00b01483e28b477",
        "sha256": "2d79bb0c26443fd714cd4cd0097fa366ddde10ae999ed55e67b7ab4dd80200c6"
      },
      "downloads": 0,
      "filename": "inxs-0.1a0.tar.gz",
      "has_sig": false,
      "md5_digest": "6e6a88bb0d7635cde00b01483e28b477",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 19462,
      "upload_time": "2017-05-03T00:15:09",
      "url": "https://files.pythonhosted.org/packages/44/a8/e58a790efa3ff37c8a7f52ef97d6c8d1cbeecb231a7e8ec305964bdd7dd0/inxs-0.1a0.tar.gz"
    }
  ]
}