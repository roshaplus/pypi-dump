{
  "info": {
    "author": "Amir Rachum",
    "author_email": "amir@rachum.com",
    "bugtrack_url": "",
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2"
    ],
    "description": "Backporting of the ``yield from`` semantic from Python 3.x.\r\n\r\nIf you want to nest generators in Python 3.x, you can use the ``yield from``\r\nkeywords. This allows you to automatically iterate over sub-generators and\r\ntransparently pass exceptions and return values from the top level caller\r\nto the lowest generator.\r\n\r\n.. code-block:: python\r\n\r\n    def subgen():\r\n        yield 2\r\n        yield 3\r\n        \r\n    def gen():\r\n        yield 1\r\n        yield from subgen()  # Python 3.x only\r\n        yield 4\r\n        \r\n    def main():\r\n        for i in gen():\r\n            print i,\r\n            \r\n    >>> main()\r\n    ... 1 2 3 4\r\n    \r\nThis functionality is not available in Python 2.x, and we emulate it using the ``yieldfrom` decorator and the helper ``From`` class:\r\n\r\n.. code-block:: python\r\n\r\n    from yieldfrom import yieldfrom, From\r\n\r\n    def subgen():\r\n        yield 2\r\n        yield 3\r\n        \r\n    @yieldfrom\r\n    def gen():\r\n        yield 1\r\n        yield From(subgen())\r\n        yield 4\r\n        \r\n    def main():\r\n        for i in gen():\r\n            print i,\r\n            \r\n    >>> main()\r\n    ... 1 2 3 4\r\n    \r\nAdvanced usage allows returning a value from the subgenerator using \r\n``StopIteration``. Using ``Return`` does this conveniently:\r\n\r\n.. code-block:: python\r\n\r\n    from yieldfrom import yieldfrom, From, Return\r\n    \r\n    def subgen():\r\n        yield 2\r\n        yield 3\r\n        Return(100)  # Raises `StopIteration(100)`\r\n        \r\n    @yieldfrom\r\n    def gen():\r\n        yield 1\r\n        ret = (yield From(subgen()))\r\n        yield 4\r\n        yield ret\r\n        \r\n    def main():\r\n        for i in gen():\r\n            print i,\r\n            \r\n    >>> main()\r\n    ... 1 2 3 4 100\r\n\r\nSubgenerators can be nested on multiple levels, each one requiring additional\r\ndecoration by ``yieldfrom``:\r\n\r\n.. code-block:: python\r\n\r\n    def subsubgen():\r\n        yield 2\r\n        \r\n    @yieldfrom\r\n    def subgen():\r\n        yield From(subsubgen())\r\n        yield 3\r\n        \r\n    @yieldfrom\r\n    def gen():\r\n        yield 1\r\n        yield From(subgen())\r\n        yield 4\r\n        \r\n    def main():\r\n        for i in gen():\r\n            print i,\r\n            \r\n    >>> main()\r\n    ... 1 2 3 4\r\n    \r\nExceptions thrown into the top-level generator can be handled in relevant\r\nsubgenerators:\r\n\r\n.. code-block:: python\r\n\r\n    def subsubgen():\r\n        try:\r\n            yield 2\r\n        except ValueError:\r\n            yield 200\r\n            \r\n    @yieldfrom\r\n    def subgen():\r\n        yield From(subsubgen())\r\n        yield 3\r\n        \r\n    @yieldfrom\r\n    def gen():\r\n        yield 1\r\n        yield From(subgen())\r\n        yield 4\r\n        \r\n    def main():\r\n        try:\r\n            g = gen()\r\n            while True:\r\n                i = g.next()\r\n                if i == 2:\r\n                    i = g.throw(ValueError())\r\n            print i,\r\n        except StopIteration:\r\n            pass\r\n            \r\n    >>> main()\r\n    ... 1 200 3 4\r\n    \r\nNote that if you use ``yield From()`` on a simple iterable (``list``, \r\n``tuple``, etc) then the individual members of the iterator will be yielded on\r\neach iteration (perhaps in that case you need the usual ``yield``).\r\n\r\n.. code-block:: python\r\n\r\n    @yieldfrom\r\n    def gen():\r\n        yield From([1, 2, 3])\r\n        yield [1, 2, 3]\r\n        \r\n    def main():\r\n        for i in gen():\r\n            print i\r\n            \r\n    >>> main()\r\n    ... 1\r\n    ... 2\r\n    ... 3\r\n    ... [1, 2, 3]\r\n        \r\nPassing non-iterable objects to ``From`` will result in an empty\r\ngenerator that does nothing.\r\n    \r\n.. code-block:: python\r\n\r\n    @yieldfrom\r\n    def gen():\r\n        yield From(None)\r\n        yield 1\r\n        \r\n    def main():\r\n        for i in gen():\r\n            print i\r\n            \r\n    >>> main()\r\n    ... 1\r\n    \r\nThis module is an adaptation of the following Python recipe:\r\nhttp://code.activestate.com/recipes/576727\r\nModifications include bug fixes in exception handling, naming, documentation,\r\nhandling of empty generators, etc.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Nurdok/yieldfrom/",
    "keywords": "yield,from,yield from,generators,backport",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yieldfrom",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/yieldfrom/",
    "release_url": "https://pypi.org/project/yieldfrom/1.0.0/",
    "requires_python": null,
    "summary": "A backport of the `yield from` semantic from Python 3.x to Python 2.7",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0158d67d9bca2ce8cf8dbac150b70c29",
          "sha256": "7ecd25c43b6c4c62998d106c93662dce3a5720ef854fc304f472860abd22bac9"
        },
        "downloads": 0,
        "filename": "yieldfrom-1.0.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "0158d67d9bca2ce8cf8dbac150b70c29",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 4831,
        "upload_time": "2017-05-01T09:24:46",
        "url": "https://files.pythonhosted.org/packages/ba/81/975780af5226a6b4ff9d8453e155b7c62873b7c34f8627a4ae83a21f57cc/yieldfrom-1.0.0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "15cf2cbfab5385eee28e9c434f11b06e",
          "sha256": "ccacd050540693b214a521f79f456cc1502d1042b65d2c639d02c7bfcc9e8740"
        },
        "downloads": 0,
        "filename": "yieldfrom-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "15cf2cbfab5385eee28e9c434f11b06e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3495,
        "upload_time": "2017-05-12T08:34:49",
        "url": "https://files.pythonhosted.org/packages/87/2b/aa59a1017e5eab96fdd1e99e88353e8656d1e2b903bf78564371331ef246/yieldfrom-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0158d67d9bca2ce8cf8dbac150b70c29",
        "sha256": "7ecd25c43b6c4c62998d106c93662dce3a5720ef854fc304f472860abd22bac9"
      },
      "downloads": 0,
      "filename": "yieldfrom-1.0.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "0158d67d9bca2ce8cf8dbac150b70c29",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "size": 4831,
      "upload_time": "2017-05-01T09:24:46",
      "url": "https://files.pythonhosted.org/packages/ba/81/975780af5226a6b4ff9d8453e155b7c62873b7c34f8627a4ae83a21f57cc/yieldfrom-1.0.0-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "15cf2cbfab5385eee28e9c434f11b06e",
        "sha256": "ccacd050540693b214a521f79f456cc1502d1042b65d2c639d02c7bfcc9e8740"
      },
      "downloads": 0,
      "filename": "yieldfrom-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "15cf2cbfab5385eee28e9c434f11b06e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3495,
      "upload_time": "2017-05-12T08:34:49",
      "url": "https://files.pythonhosted.org/packages/87/2b/aa59a1017e5eab96fdd1e99e88353e8656d1e2b903bf78564371331ef246/yieldfrom-1.0.0.tar.gz"
    }
  ]
}