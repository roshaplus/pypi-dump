{
  "info": {
    "author": "Alex Perry",
    "author_email": "alex.perry@google.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent"
    ],
    "description": "=========\nsre_yield\n=========\n\nQuick Start\n===========\n\nThe goal of ``sre_yield`` is to efficiently generate all values that can match a\ngiven regular expression, or count possible matches efficiently.  It uses the\nparsed regular expression, so you get a much more accurate result than trying\nto just split strings.\n\n.. code-block:: pycon\n\n    >>> s = 'foo|ba[rz]'\n    >>> s.split('|')  # bad\n    ['foo', 'ba[rz]']\n\n    >>> import sre_yield\n    >>> list(sre_yield.AllStrings(s))  # better\n    ['foo', 'bar', 'baz']\n\nIt does this by walking the tree as constructed by ``sre_parse`` (same thing\nused internally by the ``re`` module), and constructing chained/repeating\niterators as appropriate.  There may be duplicate results, depending on your\ninput string though -- these are cases that ``sre_parse`` did not optimize.\n\n.. code-block:: pycon\n\n    >>> import sre_yield\n    >>> list(sre_yield.AllStrings('.|a', charset='ab'))\n    ['a', 'b', 'a']\n\n...and happens in simpler cases too:\n\n.. code-block:: pycon\n\n    >>> list(sre_yield.AllStrings('a|a'))\n    ['a', 'a']\n    >>> list(sre_yield.AllStrings('[aa]'))\n    ['a', 'a']\n\n\nQuirks\n======\n\nThe membership check, ``'abc' in values_obj`` is by necessity fullmatch -- it\nmust cover the entire string.  Imagine that it has ``^(...)$`` around it.\nBecause ``re.search`` can match anywhere in an arbitrarily string, emulating\nthis would produce a large number of junk matches -- probably not what you\nwant.  (If that is what you want, add a ``.*`` on either side.)\n\nHere's a quick example, using the presidents regex from http://xkcd.com/1313/\n\n.. code-block:: pycon\n\n    >>> s = 'bu|[rn]t|[coy]e|[mtg]a|j|iso|n[hl]|[ae]d|lev|sh|[lnd]i|[po]o|ls'\n\n    >>> import re\n    >>> re.search(s, 'kennedy') is not None  # note .search\n    True\n    >>> v = sre_yield.AllStrings(s)\n    >>> v.__len__()\n    23\n    >>> 'bu' in v\n    True\n    >>> v[:5]\n    ['bu', 'rt', 'nt', 'ce', 'oe']\n\nIf you do want to emulate search, you end up with a large number of matches\nquickly.  Limiting the repetition a bit helps, but it's still a very large\nnumber.\n\n.. code-block:: pycon\n\n    >>> v2 = sre_yield.AllStrings('.{,30}(' + s + ').{,30}')\n    >>> v2.__len__()  # too big for int\n    57220492262913872576843611006974799576789176661653180757625052079917448874638816841926032487457234703154759402702651149752815320219511292208238103L\n    >>> 'kennedy' in v2\n    True\n\n\nCapturing Groups\n================\n\nIf you're interested in extracting what would match during generation of a\nvalue, you can use AllMatches instead to get Match objects.\n\n.. code-block:: pycon\n\n    >>> v = sre_yield.AllMatches(r'a(\\d)b')\n    >>> m = v[0]\n    >>> m.group(0)\n    'a0b'\n    >>> m.group(1)\n    '0'\n\nThis even works for simplistic backreferences, in this case to have matching quotes.\n\n.. code-block:: pycon\n\n    >>> v = sre_yield.AllMatches(r'([\"\\'])([01]{3})\\1')\n    >>> m = v[0]\n    >>> m.group(0)\n    '\"000\"'\n    >>> m.groups()\n    ('\"', '000')\n    >>> m.group(1)\n    '\"'\n    >>> m.group(2)\n    '000'\n\n\nReporting Bugs, etc.\n====================\n\nWe welcome bug reports -- see our issue tracker on `Google Code\n<https://code.google.com/p/sre-yield/>`_ to see if it's been reported before.\nIf you'd like to discuss anything, we have a `Google Group\n<https://groups.google.com/group/sre_yield>`_ as well.\n\n\nRelated Modules\n===============\n\nWe're aware of three similar modules, but each has a different goal.\n\n\nxeger\n-----\n\nXeger was originally written `in Java <https://code.google.com/p/xeger/>`_ and\nported `to Python <https://bitbucket.org/leapfrogdevelopment/rstr>`_.  This\ngenerates random entries, which may suffice if you want to get just a few\nmatching values.  This module and ``xeger`` differ statistically in the way\nthey handle repetitions:\n\n.. code-block:: pycon\n\n    >>> import random\n    >>> v = sre_yield.AllStrings('[abc]{1,4}')\n    >>> len(v)\n    120\n\n    # Now random.choice(v) has a 3/120 chance of choosing a single letter.\n    >>> random.seed(1)\n    >>> sum([1 if len(random.choice(v)) == 1 else 0 for _ in range(120)])\n    3\n\n    # xeger(v) has ~25% chance of choosing a single letter, because the length\n    and match are chosen independently.\n    > from rstr import xeger\n    > sum([1 if len(xeger('[abc]{1,4}')) == 1 else 0 for _ in range(120)])\n    26\n\nIn addition, ``xeger`` differs in the default matching of ``'.'`` is for\nprintable characters (which you can get by setting ``charset=string.printable``\nin ``sre_yield``, if desired).\n\n\nsre_dump\n--------\n\nAnother module that walks ``sre_parse``'s tree is ``sre_dump``, although it\ndoes not generate matches, only reconstructs the string pattern (useful\nprimarily if you hand-generate a tree).  If you're interested in the space,\nit's a good read.  http://www.dalkescientific.com/Python/sre_dump.html\n\n\njpetkau1\n--------\n\nCan find matches by using randomization, so sort of handles anchors.  Not\nguaranteed though, but another good look at internals.\nhttp://web.archive.org/web/20071024164712/http://www.uselesspython.com/jpetkau1.py\n(and slightly older version in the announcement on `python-list\n<https://mail.python.org/pipermail/python-list/2001-August/104757.html>`_).\n\n\nDifferences between sre_yield and the re module\n===============================================\n\nThere are certainly valid regular expressions which ``sre_yield`` does not\nhandle.  These include things like lookarounds, backreferences, but also a few\nother exceptions:\n\n- The maximum value for repeats is system-dependant -- CPython's ``sre`` module\n  there's a special value which is treated as infinite (either 2**16-1 or\n  2**32-1 depending on build).  In sre_yield, this is taken as a literal,\n  rather than infinite, thus (on a 2**16-1 platform):\n\n  .. code-block:: pycon\n\n      >>> len(sre_yield.AllStrings('a*')[-1])\n      65535\n      >>> import re\n      >>> len(re.match('.*', 'a' * 100000).group(0))\n      100000\n\n- The ``re`` `module docs <http://docs.python.org/2/library/re.html#regular-expression-syntax>`_\n  say \"Regular expression pattern strings may not contain null bytes\"\n  yet this appears to work fine.\n- Order does not depend on greediness.\n- The regex is treated as fullmatch.\n- ``sre_yield`` is confused by even the simplest of anchors:\n\n  .. code-block:: pycon\n\n      >>> list(sre_yield.AllStrings('foo$'))\n      []",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/google/sre_yield",
    "keywords": "",
    "license": "Apache",
    "maintainer": null,
    "maintainer_email": null,
    "name": "sre_yield",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/sre_yield/",
    "release_url": "https://pypi.org/project/sre_yield/1.0/",
    "requires_python": null,
    "summary": "Expands a regular expression to its possible matches",
    "version": "1.0"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "18adecb75734d1af94ddda79185dfcdb",
          "sha256": "0e5413ae8a56009d993883ded321746f7b8c828d56973d6cb1b67e344c37574d"
        },
        "downloads": 2356,
        "filename": "sre_yield-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "18adecb75734d1af94ddda79185dfcdb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18072,
        "upload_time": "2014-04-14T13:01:21",
        "url": "https://files.pythonhosted.org/packages/49/ff/0bdd5a1f60e871444147cf4f015174b6418ec9232ea7918e052fe5008063/sre_yield-1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "18adecb75734d1af94ddda79185dfcdb",
        "sha256": "0e5413ae8a56009d993883ded321746f7b8c828d56973d6cb1b67e344c37574d"
      },
      "downloads": 2356,
      "filename": "sre_yield-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "18adecb75734d1af94ddda79185dfcdb",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 18072,
      "upload_time": "2014-04-14T13:01:21",
      "url": "https://files.pythonhosted.org/packages/49/ff/0bdd5a1f60e871444147cf4f015174b6418ec9232ea7918e052fe5008063/sre_yield-1.0.tar.gz"
    }
  ]
}