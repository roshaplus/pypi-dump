{
  "info": {
    "author": "Matthew Balvanz",
    "author_email": "matthew.balvanz@workiva.com",
    "bugtrack_url": "",
    "classifiers": [],
    "description": "# pact-python\n\n[![Join the chat at https://gitter.im/realestate-com-au/pact](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/realestate-com-au/pact?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![Build Status](https://travis-ci.org/pact-foundation/pact-python.svg?branch=master)](https://travis-ci.org/pact-foundation/pact-python)\n[![License](https://img.shields.io/github/license/pact-foundation/pact-python.svg?maxAge=2592000)](https://github.com/pact-foundation/pact-python/blob/master/LICENSE)\n\nPython version of Pact. Enables consumer driven contract testing,\nproviding a mock service and DSL for the consumer project, and\ninteraction playback and verification for the service provider project.\n\nFor more information about what Pact is, and how it can help you\ntest your code more efficiently, check out the [Pact documentation].\n\n# How to use pact-python\n\n## Installation\n```\npip install pact-python\n```\n\n## Writing a Pact\nCreating a complete contract is a two step process:\n\n1. Create a test on the consumer side that declares the expectations it has of the provider\n2. Create a provider state that allows the contract to pass when replayed against the provider\n\n## Writing the Consumer Test\n\nIf we have a method that communicates with one of our external services, which we'll call\n`Provider`, and our product, `Consumer` is hitting an endpoint on `Provider` at\n`/users/<user>` to get information about a particular user.\n\nIf the code to fetch a user looked like this:\n\n```python\nimport requests\n\n\ndef user(user_name):\n    \"\"\"Fetch a user object by user_name from the server.\"\"\"\n    uri = 'http://localhost:1234/users/' + user_name\n    return requests.get(uri).json()\n```\n\nThen `Consumer`'s contract test might look something like this:\n\n```python\nimport atexit\nimport unittest\n\nfrom pact import Consumer, Provider\n\n\npact = Consumer('Consumer').has_pact_with(Provider('Provider'))\npact.start_service()\natexit.register(pact.stop_service)\n\n\nclass GetUserInfoContract(unittest.TestCase):\n  def test_get_user(self):\n    expected = {\n      'username': 'UserA',\n      'id': 123,\n      'groups': ['Editors']\n    }\n      \n    (pact\n     .given('UserA exists and is not an administrator')\n     .upon_receiving('a request for UserA')\n     .with_request('get', '/users/UserA')\n     .will_respond_with(200, body=expected))\n\n    with pact:\n      result = user('UserA')\n    \n    self.assertEqual(result, expected)\n\n```\n\nThis does a few important things:\n\n - Defines the Consumer and Provider objects that describe our product and our service under test\n - Uses `given` to define the setup criteria for the Provider `UserA exists and is not an administrator`\n - Defines what the request that is expected to be made by the consumer will contain\n - Defines how the server is expected to respond\n\nUsing the Pact object as a [context manager], we call our method under test\nwhich will then communicate with the Pact mock service. The mock service will respond with\nthe items we defined, allowing us to assert that the method processed the response and\nreturned the expected value. If you want more control over when the mock service is \nconfigured and the interactions verified, use the `setup` and `verify` methods, respectively:\n\n```python\n   (pact\n     .given('UserA exists and is not an administrator')\n     .upon_receiving('a request for UserA')\n     .with_request('get', '/users/UserA')\n     .will_respond_with(200, body=expected))\n\n    pact.setup()\n    # Some additional steps before running the code under test\n    result = user('UserA')\n    # Some additional steps before verifying all interactions have occurred\n    pact.verify()\n````\n\nThe default hostname and port for the Pact mock service will be\n`localhost:1234` but you can adjust this during Pact creation:\n\n```python\nfrom pact import Consumer, Provider\npact = Consumer('Consumer').has_pact_with(\n    Provider('Provider'), host_name='mockservice', port=8080)\n```\n\nThis can be useful if you need to run to create more than one Pact for your test\nbecause your code interacts with two different services. It is important to note\nthat the code you are testing with this contract _must_ contact the mock service.\nSo in this example, the `user` method could accept an argument to specify the\nlocation of the server, or retrieve it from an environment variable so you can\nchange its URI during the test.\n\nThe mock service offers you several important features when building your contracts:\n- It provides a real HTTP server that your code can contact during the test and provides the responses you defined.\n- You provide it with the expectations for the request your code will make and it will assert the contents of the actual requests made based on your expectations.\n- If a request is made that does not match one you defined or if a request from your code is missing it will return an error with details.\n- Finally, it will record your contracts as a JSON file that you can store in your repository or publish to a Pact broker.\n\n## Expecting Variable Content\nThe above test works great if that user information is always static, but what happens if\nthe user has a last updated field that is set to the current time every time the object is\nmodified? To handle variable data and make your tests more robust, there are 3 helpful matchers:\n\n### Term(matcher, generate)\nAsserts the value should match the given regular expression. You could use this\nto expect a timestamp with a particular format in the request or response where\nyou know you need a particular format, but are unconcerned about the exact date:\n\n```python\nfrom pact import Term\n...\nbody = {\n    'username': 'UserA',\n    'last_modified': Term('\\d+-\\d+-\\d+T\\d+:\\d+:\\d+', '2016-12-15T20:16:01')\n}\n\n(pact\n .given('UserA exists and is not an administrator')\n .upon_receiving('a request for UserA')\n .with_request('get', '/users/UserA/info')\n .will_respond_with(200, body=body))\n```\n\nWhen you run the tests for the consumer, the mock service will return the value you provided\nas `generate`, in this case `2016-12-15T20:16:01`. When the contract is verified on the\nprovider, the regex will be used to search the response from the real provider service\nand the test will be considered successful if the regex finds a match in the response.\n\n### SomethingLike(matcher)\nAsserts the element's type matches the matcher. For example:\n\n```python\nfrom pact import SomethingLike\nSomethingLike(123)  # Matches if the value is an integer\nSomethingLike('hello world')  # Matches if the value is a string\nSomethingLike(3.14)  # Matches if the value is a float\n```\n\nThe argument supplied to `SomethingLike` will be what the mock service responds with.\n\n### EachLike(matcher, minimum=None, maximum=None)\nAsserts the value is an array type that consists of elements\nlike the ones passed in. It can be used to assert simple arrays:\n\n```python\nfrom pact import EachLike\nEachLike(1)  # All items are integers\nEachLike('hello')  # All items are strings\n```\n\nOr other matchers can be nested inside to assert more complex objects:\n\n```python\nfrom pact import EachLike, SomethingLike, Term\nEachLike({\n    'username': Term('[a-zA-Z]+', 'username'),\n    'id': SomethingLike(123),\n    'groups': EachLike('administrators')\n})\n```\n\n> Note, you do not need to specify everything that will be returned from the Provider in a\n> JSON response, any extra data that is received will be ignored and the tests will still pass.\n\nFor more information see [Matching](https://docs.pact.io/documentation/matching.html)\n\n## Verifying Pacts Against a Service\n\nIn addition to writing Pacts for Python consumers, you can also verify those Pacts\nagainst a provider of any language. After installing pact-python a `pact-verifier`\napplication should be available. To get details about its use you can call it with the\nhelp argument:\n\n```bash\npact-verifier --help\n```\n\nThe simplest example is verifying a server with locally stored Pact files and no provider\nstates:\n\n```bash\npact-verifier --provider-base-url=http://localhost:8080 --pact-urls=./pacts/consumer-provider.json\n```\n\nWhich will immediately invoke the Pact verifier, making HTTP requests to the server located\nat `http://localhost:8080` based on the Pacts in `./pacts/consumer-provider.json` and\nreporting the results.\n\nThere are several options for configuring how the Pacts are verified:\n\n###### --provider-base-url\n\nRequired. Defines the URL of the server to make requests to when verifying the Pacts.  \n\n###### --pact-urls\n\nRequired. The location of the Pact files you want to verify. This can be a URL to a [Pact Broker]\nor one or more local paths, separated by a comma.\n\n###### --provider-states-url\n\nThe URL where your provider application will produce the list of available provider states.\nThe verifier calls this URL to ensure the Pacts specify valid states before making the HTTP\nrequests.\n\n###### --provider-states-setup-url\n\nThe URL which should be called to setup a specific provider state before a Pact is verified.\n \n###### --pact-broker-username\n\nThe username to use when contacting the Pact Broker.\n\n###### --pact-broker-password\n\nThe password to use when contacting the Pact Broker. You can also specify this value\nas the environment variable `PACT_BROKER_PASSWORD`. \n\n### Provider States\nIn many cases, your contracts will need very specific data to exist on the provider\nto pass successfully. If you are fetching a user profile, that user needs to exist,\nif querying a list of records, one or more records needs to exist. To support\ndecoupling the testing of the consumer and provider, Pact offers the idea of provider\nstates to communicate from the consumer what data should exist on the provider.\n\nWhen setting up the testing of a provider you will also need to setup the management of\nthese provider states. The Pact verifier does this by making additional HTTP requests to\nthe `provider_states_url` and `provider_states_setup_url` you provide. These URLs could be\non the provider application or a separate one. Some strategies for managing state include:\n\n- Having endpoints in your application that are not active in production that create and delete your datastore state\n- A separate application that has access to the same datastore to create and delete, like a separate App Engine module or Docker container pointing to the same datastore\n- A standalone application that can start and stop the other server with different datastore states\n\nFor more information about provider states, refer to the [Pact documentation] on [Provider States].\n\n# Development\nPlease read [CONTRIBUTING.md](CONTRIBUTING.md)\n\nThis project needs a combination of Python and Ruby, as the Pact mock service and verifier\nare currently Ruby based. To setup a development environment:\n\n1. Install Ruby 2.2.2 using a tool like [rvm] or [rbenv]\n2. Install the [bundler] package manager for Ruby with `gem install bundler`\n3. If you want to run tests for all Python versions, install 2.7, 3.3, 3.4, 3.5, and 3.6 from source or using a tool like [pyenv] \n4. Its recommended to create a Python [virtualenv] for the project\n\nThe setup the environment, run tests, and package the application, run:\n`make release`\n\nIf you are just interested in packaging pact-python so you can install it using pip:\n\n`make package`\n\nThis creates a `dist/pact-python-N.N.N.tar.gz` file, where the Ns are the current version.\nFrom there you can use pip to install it:\n\n`pip install ./dist/pact-python-N.N.N.tar.gz`\n\n## Testing\n\nThis project has unit and end to end tests, which can both be run from make:\n\nUnit: `make test`\n\nEnd to end: `make e2e`\n\n[bundler]: http://bundler.io/\n[context manager]: https://en.wikibooks.org/wiki/Python_Programming/Context_Managers\n[Pact]: https://www.gitbook.com/book/pact-foundation/pact/details\n[Pact Broker]: https://docs.pact.io/documentation/sharings_pacts.html\n[Pact documentation]: https://docs.pact.io/\n[Pact Mock Service]: https://github.com/bethesque/pact-mock_service\n[Provider States]: https://docs.pact.io/documentation/provider_states.html\n[pact-provider-verifier]: https://github.com/pact-foundation/pact-provider-verifier\n[pyenv]: https://github.com/pyenv/pyenv\n[rvm]: https://rvm.io/\n[rbenv]: https://github.com/rbenv/rbenv\n[virtualenv]: http://python-guide-pt-br.readthedocs.io/en/latest/dev/virtualenvs/\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pact-foundation/pact-python",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pact-python",
    "platform": null,
    "project_url": "https://pypi.org/project/pact-python/",
    "release_url": "https://pypi.org/project/pact-python/0.5.0/",
    "requires_python": "",
    "summary": "Tools for creating and verifying consumer driven contracts using the Pact framework.",
    "version": "0.5.0"
  },
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "16a63e6ec5981ce1c7f8e158f8dca975",
          "sha256": "7ad4d974ce8929a1b916873f376b3542cf6582e521112f530fb862bca1bf9ba7"
        },
        "downloads": 0,
        "filename": "pact-python-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "16a63e6ec5981ce1c7f8e158f8dca975",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 60787134,
        "upload_time": "2017-05-24T22:02:23",
        "url": "https://files.pythonhosted.org/packages/b7/24/a497fbbbc1fe69fdd5d5ea8b3edc53359c72e755d9fab3910b46b9c4c1d6/pact-python-0.4.0.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1f07af033da6e0737d6e6d42d29348aa",
          "sha256": "a8ab853a520ca822bf6cdd9bdc5dbaa0eea33170cc8f8dce132582c54c39b1e5"
        },
        "downloads": 0,
        "filename": "pact-python-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1f07af033da6e0737d6e6d42d29348aa",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 60732131,
        "upload_time": "2017-05-31T03:54:02",
        "url": "https://files.pythonhosted.org/packages/d7/43/9e35a3d4a4486d4eea159f6c9ec0ff745e797c90ba3d1d8f51bcecc3a1db/pact-python-0.4.1.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a7dd655c06f7dafc9588bdb2b9fec3ab",
          "sha256": "817e0a925a3475a8544fa4f70b378ef63368fd06ea54d3f53ecfb09af6afb13f"
        },
        "downloads": 0,
        "filename": "pact-python-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a7dd655c06f7dafc9588bdb2b9fec3ab",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 60812870,
        "upload_time": "2017-06-19T14:44:55",
        "url": "https://files.pythonhosted.org/packages/02/5b/2b432a46f699f5cc7db1e01c2831db6468f2cdb221f802de951d723ca21e/pact-python-0.5.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a7dd655c06f7dafc9588bdb2b9fec3ab",
        "sha256": "817e0a925a3475a8544fa4f70b378ef63368fd06ea54d3f53ecfb09af6afb13f"
      },
      "downloads": 0,
      "filename": "pact-python-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a7dd655c06f7dafc9588bdb2b9fec3ab",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 60812870,
      "upload_time": "2017-06-19T14:44:55",
      "url": "https://files.pythonhosted.org/packages/02/5b/2b432a46f699f5cc7db1e01c2831db6468f2cdb221f802de951d723ca21e/pact-python-0.5.0.tar.gz"
    }
  ]
}