{
  "info": {
    "author": "Team Belvedere, LLC",
    "author_email": "opensource@belvederetrading.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "**************************\npython-pywinservicemanager\n**************************\n\nPython Windows Service Manager is a python package that helps to easily manage\nwindows services, mirroring the functionality of the Windows Service\nController Utility (sc.exe). It allows to easily manage both Driver and Win32\nservices. The following can be achieved using this package:\n\n * Create, Remove, or Update a service configuration\n * Query a specific or all Service Statuses\n * Get a service configuration\n * Verify a service exists\n * Start, Stop, Pause, Continue, Interrogate a service\n\n==============\nPre-requisites\n==============\n    pypiwin32>=219\n\n============\nInstallation\n============\n * Clone this repository\n * Put the repo dir in your PYTHONPATH\n * Run:\n\n.. code:: python\n\n    python setup.py install\n\n=====================\nHow to Run Unit Tests\n=====================\n1.  pip install nose, mock\n2.  From the module's root directory, run 'nosetests .'\n\n======================\nHow to Run the Example\n======================\n1.  Download the package\n2.  From the module's root directory, run 'python example.py'\n\n  * **Note**: Due to the way Windows Services work, you need to\n    have the powershell scipt, testService.ps1, in the same\n    directory as the example.py\n\n=====\nUsage\n=====\nThis module attempts to follow the ORM design Pattern, where the Class\nWindowsServiceConfigurationManager would be your context, and object that\nrepresents the data store is a ServiceEntity.\n\nWindowsServiceConfigurationManager\n----------------------------------\nThis is the entry point for all operations. This module has static methods that:\n- Creates or Gets a Service, and returns a Entity object that represents that service\n- Query All Service Statuses\n- Verify a service exists\n- Gets a specific service's status\n\nThe following Describes these operations in detail:\n\n  **Create a New Service:**\n\n    The CreateService() function takes a parameter of Type NewServiceDefinition. The following describes the NewServiceDefinition constructor and its arguments:\n\n    **NewServiceDefinition:**\n\n    1.  **serviceName *(Required)***: The name of the service.\n          Valid Values: Any non empty string\n    2.  **displayName *(Required)***: Indicates the friendly name that identifies the service to the user\n          Valid Values: Any non empty string\n    3.  **binaryPathName *(Required)***: Specifies the path to the executable file for the service.\n          Validate Values: Any non empty string that points to an executable\n    4.  **startType**: Indicates how and when the service is started\n          Valid String Values: AUTO_START, DEMAND_START, BOOT_START, DISABLED, SYSTEM_START, INTERACTIVE_SHARE_PROCESS,  INTERACTIVE_OWN_PROCESS\n          Default Value:  DEMAND_START\n    5.  **serviceType**: Represents the type of the service\n          Valid String Values: WIN32_SHARE_PROCESS, WIN32_OWN_PROCESS, KERNEL_DRIVER, FILE_SYSTEM_DRIVER\n          Default Value:  WIN32_OWN_PROCESS\n    6.  **errorControl**: Specifies how to proceed if the driver for the service or device fails to load or initialize properly\n          Valid String Values: ERROR_CRITICAL, ERROR_IGNORE, ERROR_NORMAL, ERROR_SEVERE\n          Default Value:  ERROR_NORMAL\n    7.  **loadOrderGroup**: The name of the load ordering group of which this service is a member\n          Valid Value: String of Group Name\n          Default Value: None\n    8.  **dependencies**:\n          Valid Value: Array of Existing Service Names\n          Default Value: None\n    9.  **serviceStartName**: Name of the account in which the service runs\n          Valid Value: A valid user account as a string\n          Default Value: The System Account\n    10.  **description**: The description of the service\n          Valid Value: Any string\n          Default Value: An empty string\n    11.  **failureActions**: Represents the action the service controller should take on each failure of a service\n          Valid Value: FailureActionConfigurationType\n          Default Value: None\n\n          ***See 'Complex Example for Creating Service' for an example, or the Section that describes the 'FailureActionConfigurationType'**\n    12.  **failureFlag**: Specifies whether recovery actions will be triggered when a service stops as the result of an error\n          Valid Value: Boolean\n          Default Value: False\n    13. **preShutdownInfo**: The time-out value, in milliseconds.\n          Valid Value: long or int\n          Default Value: 180,000 milliseconds\n    14. **serviceSIDInfo**: Represents a service security identifier\n          Valid String Value: SID_TYPE_NONE, SID_TYPE_RESTRICTED, SID_TYPE_UNRESTRICTED\n          Default Value: SID_TYPE_UNRESTRICTED\n    15. **delayedAutoStartInfo**: The value that indicates whether the service should be delayed from starting until other automatically started services are running.\n          Valid Value: Boolean\n          Default Value: False\n\n\n.. code:: python\n\n    #Most simplistic example of creating a service\n\n    from pywinservicemanager.WindowsServiceConfigurationManager import CreateService\n    from pywinservicemanager.NewServiceDefinition import NewServiceDefinition\n\n    serviceName = 'TestService'\n    displayName = 'MyTestService'\n    binaryPathName = 'c:\\\\myBinary.exe'\n\n    newServiceDefinition = NewServiceDefinition(serviceName=serviceName,\n                                                displayName=displayName,\n                                                binaryPathName=binaryPathName)\n\n    myService = CreateService(newServiceDefinition)\n\n    # Note that the Create Service Method just creates the entity in memeory.\n    # To save it to the 'DataStore', you must call Save()\n    myService.Save()\n\n    #Most complex example of creating a service\n\n.. code:: python\n\n    from pywinservicemanager.WindowsServiceConfigurationManager import CreateService\n    from pywinservicemanager.NewServiceDefinition import NewServiceDefinition\n    import pywinservicemanager.ConfigurationTypes as ConfigurationTypes\n\n    serviceName = 'TestService'\n    displayName = 'MyTestService'\n    binaryPathName = 'c:\\\\myBinary.exe'\n    startType = 'DEMAND_START'\n    serviceType= 'WIN32_OWN_PROCESS'\n    errorControl= 'ERROR_IGNORE'\n    loadOrderGroup = None\n    dependencies= ['nsi']\n    description= 'This is a test Service'\n    failureFlag = False\n    preShutdownInfo= 18000\n    serviceSIDInfo = 'SID_TYPE_UNRESTRICTED'\n    userName = None\n    password = None\n    delayedAutoStartInfo = False\n\n    failureActionList = []\n    delay = 1000\n    failureActionList.append(ConfigurationTypes.FailureActionTypeFactory.CreateRestartAction(delay))\n    failureActionList.append(ConfigurationTypes.FailureActionTypeFactory.CreateRunCommandAction(delay))\n    resetPeriod = 1\n    rebootMsg = 'MyRebootMessage'\n    commandLine = 'MyCommandLine'\n    failureActions = FailureActionConfigurationType(failureActionList, resetPeriod, rebootMsg, commandLine)\n\n    newServiceDefinition = NewServiceDefinition(serviceName=serviceName,\n                                                displayName=displayName,\n                                                binaryPathName=binaryPathName,\n                                                startType=startType,\n                                                serviceType=serviceType,\n                                                errorControl=errorControl,\n                                                loadOrderGroup=loadOrderGroup,\n                                                dependencies=dependencies,\n                                                serviceStartName=userName,\n                                                description=description,\n                                                failureActions=failureActions,\n                                                failureFlag=failureFlag,\n                                                preShutdownInfo=preShutdownInfo,\n                                                serviceSIDInfo=serviceSIDInfo,\n                                                delayedAutoStartInfo=delayedAutoStartInfo)\n\n    myService = CreateService(newServiceDefinition)\n\n    # Note that the Create Service Method just creates the entity in memeory.\n    # To save it to the 'DataStore', you must call Save()\n    myService.Save(password)\n\n\n* **Delete a Service:**\n\n.. code:: python\n\n    from pywinservicemanager.WindowsServiceConfigurationManager import GetService\n    serviceName = \"TestService\"\n    myService = GetService(serviceName)\n\n    # Note that the GetService Method reads for the data store and creates the entity in memeory.\n    # To delete it from the 'DataStore', you must call Delete()\n    myService.Delete()\n\n\n* **Query All Services Statuses**:\n  Returns a list of each installed service's status. (Please see status definition below for more details)\n\n.. code:: python\n\n    from pywinservicemanager.WindowsServiceConfigurationManager import QueryAllServicesStatus\n\n    statuses = QueryAllServicesStatus()\n    print statuses\n\n* **Service Exists**:\n\n.. code:: python\n\n    from pywinservicemanager.WindowsServiceConfigurationManager import ServiceExists\n\n    serviceName = 'TestService'\n    serviceExists = ServiceExists(serviceName)\n    print serviceExists\n\n\n\n* **Get Service Status**:\n  Returns a single service's status (Please see status definition below for more details)\n\n.. code:: python\n\n    from pywinservicemanager.WindowsServiceConfigurationManager import GetServiceStatus\n    serviceName = 'TestService'\n    serviceStatus = GetServiceStatus(serviceName)\n    print serviceStatus\n\nServiceEntity\n-------------\nThis is the object that maps to the service.\n\nThe object contains the following commands for each service:\n  * Save\n  * Delete\n  * Start\n  * Stop\n  * Pause\n  * Continue\n  * Interrogate\n  * GetServiceStatus\n  * UpdateConfiguration\n  * Exists\n\nYou need to make sure that the commands Pause, Continue, and Interrogate are\nable to be excepted by the service. The accepted commands are dependent on 2\nthings. First, if the service is configurated to accept such commands, and\nsecond, if the current state of the service allows that command to be called on\nthe service. The code examples below shows how to deal with this. Furthermore,\nif a service is not in a \"Running\" state, than Stop cannot be called.\nVis-a-versa, if a service is not in a \"Stopped\" state, then Start cannot be\ncalled.\n\n* **UpdateConfiguration**: Used to update a service's configuration in memeory.\n  You must call the save method to persist the service.\n\n.. code:: python\n\n    from pywinservicemanager.WindowsServiceConfigurationManager import GetService\n\n    serviceName = 'TestService'\n    myService = GetService(serviceName)\n    myService.UpdateConfiguration('StartType', 'DEMAND_START')\n    myService.Save()\n\n\n* **Save**: Saves the current state of the ServiceEntity as a service in the OS.\n  You can pass a password as an argument to this function if one is needed, the\n  default value is 'None'\n\n.. code:: python\n\n    from pywinservicemanager.WindowsServiceConfigurationManager import GetService\n\n    serviceName = 'TestService'\n    myService = GetService(serviceName)\n    myService.UpdateConfiguration('ServiceStartName', 'MyDomain\\\\MyNewUser')\n    myService.Save('MyNewPassword')\n\n\n* **Delete**: Deletes the Service\n  Deletes a service. Please note that you if your service is running, you will\n  need to stop the service for it to be deleted. Also, if anything has a handle\n  open to the service, those need to be closed as well. If Delete() is called\n  on service in which a handle is open, then it will be 'Marked for Deletion'\n  and will not be deleted until all handles are closed.\n\n.. code:: python\n\n   from pywinservicemanager.WindowsServiceConfigurationManager import GetService\n\n   serviceName = 'TestService'\n   myService = GetService(serviceName)\n   myService.Delete()\n\n\n* **Start**: Deletes the Service\n  Starts a given service that has is stopped. If the service is running, the\n  function will just return. Also, if the service does not return from the Start\n  command within 30 seconds, a TimeoutException is thrown\n\n.. code:: python\n\n   from pywinservicemanager.WindowsServiceConfigurationManager import GetService\n\n   serviceName = 'TestService'\n   myService = WindowsServiceConfigurationManager.GetService(serviceName)\n   myService.Start()\n\n\n* **Stop**: Stops the Service\n  Stops a given service that is started. If the service is stopped, the function\n  will just return. Also, if the service does not return from the Stop\n  command within 30 seconds, a TimeoutException is thrown\n\n.. code:: python\n\n   from pywinservicemanager.WindowsServiceConfigurationManager import GetService\n\n   serviceName = 'TestService'\n   myService = WindowsServiceConfigurationManager.GetService(serviceName)\n   myService.Stop()\n\n* **Restart**: Restart the Service\n  Restarts a given service that is started. If the service is stopped, this is\n  equivelent to just calling start. If the service is running, then service will\n  be stopped and then started. Also, if the service does not return from the\n  Stop or Start command within 30 seconds, a TimeoutException is thrown\n\n.. code:: python\n\n   from pywinservicemanager.WindowsServiceConfigurationManager import GetService\n\n   serviceName = 'TestService'\n   myService = WindowsServiceConfigurationManager.GetService(serviceName)\n   myService.Restart()\n\n* **Continue**: Continues the Service after it was paused\n  Stops a given service that is Paused and/or has the value\n  ACCEPT_PAUSE_CONTINUE in ControlsAccepted. If not, an exception will be\n  thrown. Also, if the service does not return from the Continue command\n  within 30 seconds, a TimeoutException is thrown\n\n.. code:: python\n\n    from pywinservicemanager.WindowsServiceConfigurationManager import GetService\n\n    serviceName = 'TestService'\n    myService = GetService(serviceName)\n    status = myService.GetServiceStatus()\n    if 'ACCEPT_PAUSE_CONTINUE' in status['ControlsAccepted']:\n        myService.Continue()\n\n\n* **Pause**: Pauses the Service\n  Pauses a given service that is Paused and/or has the value\n  ACCEPT_PAUSE_CONTINUE in ControlsAccepted. If not, an exception will be\n  thrown. Also, if the service does not return from the Pause command within\n  30 seconds, a TimeoutException is thrown\n\n.. code:: python\n\n    from pywinservicemanager.WindowsServiceConfigurationManager import GetService\n\n    serviceName = 'TestService'\n    myService = GetService(serviceName)\n    myServiceStatus = myService.GetServiceStatus().Status\n    if 'ACCEPT_PAUSE_CONTINUE' in status['ControlsAccepted']:\n        myService.Pause()\n\n\n* **Interrogate**: Interrogates the Service\n\n.. code:: python\n\n    from pywinservicemanager.WindowsServiceConfigurationManager import GetService\n\n    serviceName = 'TestService'\n    myService = GetService(serviceName)\n    myService.Interrogate()\n\n\n* **GetServiceStatus**: Deletes the Service\n  Returns a the service's status\n  (Please see status definition below for more details)\n\n.. code:: python\n\n   from pywinservicemanager.WindowsServiceConfigurationManager import GetService\n\n   serviceName = 'TestService'\n   myService = WindowsServiceConfigurationManager.GetService(serviceName)\n   status = myService.GetServiceStatus()\n   print status\n\n\n* **Exists**: Deletes the Service\n  Returns if the service exists\n\n.. code:: python\n\n   from pywinservicemanager.WindowsServiceConfigurationManager import Exists\n\n   serviceName = 'TestService'\n   myService = WindowsServiceConfigurationManager.GetService(serviceName)\n   print myService.Exists()\n\n\n\nFailureActionConfigurationType\n------------------------------\nRepresents the action the service controller should take on each failure of a\nservice. A service is considered failed when it terminates without reporting a\nstatus of SERVICE_STOPPED to the service controller\n\nThe constructor of this object takes the following parameters:\n  1. *failureActionsTypeList*: List of FailureActionType Objects\n      - Valid Value: List of FailureActionType Objects (see below)\n      - Default:Value None\n  2. *resetPeriodType*: The time after which to reset the failure count to zero if there are no failures, in seconds\n      - Valid Value: int or ResetPeriodType(see below)\n      - Default:Value None\n  3. *rebootMessageType*: The message to be broadcast to server users before rebooting in response to the SC_ACTION_REBOOT service controller action\n      - Valid Value: string or RebootMessageType (see below)\n      - Default:Value None\n  4. *commandLineType*: The command line of the process for the CreateProcess function to execute in response to the SC_ACTION_RUN_COMMAND service controller action. This process runs under the same account as the service.\n      - Valid Value: string or CommandLineType (see below)\n      - Default:Value None\n\n\nExample:\n\n.. code:: python\n\n    import pywinservicemanager.ConfigurationTypes as ConfigurationTypes\n\n    failureActionList = []\n    delay = 1000\n\n    failureActionList.append(ConfigurationTypes.FailureActionTypeFactory.CreateRestartAction(delay))\n    failureActionList.append(ConfigurationTypes.FailureActionTypeFactory.CreateRunCommandAction(delay))\n    resetPeriod = ConfigurationTypes.FailureActionConfigurationResetPeriodType(1)\n    rebootMsg = ConfigurationTypes.FailureActionConfigurationRebootMessageType('MyRebootMessage')\n    commandLine = ConfigurationTypes.FailureActionConfigurationCommandLineType('MyCommandLineCommand')\n\n    failureActions = ConfigurationTypes.FailureActionConfigurationType(failureActionList, resetPeriod, rebootMsg, commandLine)\n\n    #or\n    failureActionList = []\n    delay = 1000\n\n    failureActionList.append(ConfigurationTypes.FailureActionTypeFactory.CreateRestartAction(delay))\n    failureActionList.append(ConfigurationTypes.FailureActionTypeFactory.CreateRunCommandAction(delay))\n\n    resetPeriod = 1\n    rebootMsg = 'MyRebootMessage'\n    commandLine = 'MyCommandLine'\n\n    failureActions = ConfigurationTypes.FailureActionConfigurationType(failureActionList, resetPeriod, rebootMsg, commandLine)\n\n\n`More information about FailureActionConfiguration Mapping\n<https://msdn.microsoft.com/en-us/library/windows/desktop/ms685939(v=VS.85).aspx>`_.\n\n\nFailureActionType\n-----------------\nRepresents an action that the service control manager can perform.\n\nA FailureAction type can be reurned by the factory object FailureActionTypeFactory, where there are 4 methods defined and an int which represents the delaly as the input parameter:\n  1. Factory Methods:\n      - FailureActionTypeFactory.CreateNoAction(delay): No action.\n      - FailureActionTypeFactory.CreateRestartAction(delay): Restart the service.\n      - FailureActionTypeFactory.CreateRebootAction(delay): Reboot the computer. If the service uses the reboot action, the caller must have the SE_SHUTDOWN_NAME `privilege <https://msdn.microsoft.com/en-us/library/windows/desktop/aa379306(v=vs.85).aspx>`_. For more information, see `Running with Special Privileges <https://msdn.microsoft.com/en-us/library/windows/desktop/ms717802(v=vs.85).aspx>`_.\n      - FailureActionTypeFactory.CreateRunCommandAction(delay):  Run a command.\n  2. delay: The time to wait before performing the specified action, in milliseconds.\n\nExample:\n\n.. code:: python\n\n    import pywinservicemanager.ConfigurationTypes as ConfigurationTypes\n    myAction = ConfigurationTypes.FailureActionTypeFactory.CreateRestartAction(300)\n\n`More information about FailureAction\n<https://msdn.microsoft.com/en-us/library/windows/desktop/ms685126(v=vs.85).aspx>`_.\n\n\nResetPeriodType\n---------------\nThe time after which to reset the failure count to zero if there are no failures, in seconds.\nThe input is of time int\n\nExample:\n\n.. code:: python\n\n    import pywinservicemanager.ConfigurationTypes as ConfigurationTypes\n    resetPeriod = ConfigurationTypes.FailureActionConfigurationResetPeriodType(1)\n\n\nFailureActionConfigurationRebootMessageType\n-------------------------------------------\nThe message to be broadcast to server users before rebooting in response to the SC_ACTION_REBOOT service controller action.\nIf this value is None, the reboot message is unchanged. If the value is an empty string (\"\"), the reboot message is deleted and no message is broadcast.\n\nExample:\n\n.. code:: python\n\n    import pywinservicemanager.ConfigurationTypes as ConfigurationTypes\n    rebootMessage = ConfigurationTypes.FailureActionConfigurationRebootMessageType(\"My Reboot Message\")\n\n\nFailureActionConfigurationRebootMessageType\n-------------------------------------------\nThe message to be broadcast to server users before rebooting in response to the SC_ACTION_REBOOT service controller action.\nIf this value is None, the reboot message is unchanged. If the value is an empty string (\"\"), the reboot message is deleted and no message is broadcast.\n\nExample:\n\n.. code:: python\n\n    import pywinservicemanager.ConfigurationTypes as ConfigurationTypes\n    rebootMessage = ConfigurationTypes.FailureActionConfigurationRebootMessageType(\"My Reboot Message\")\n\n\nFailureActionConfigurationRebootMessageType\n-------------------------------------------\nThe command line of the process for the CreateProcess function to execute in response to the SC_ACTION_RUN_COMMAND service controller action. This process runs under the same account as the service.\nIf this value is None, the command is unchanged. If the value is an empty string (\"\"), the command is deleted and no program is run when the service fails.\n\nExample:\n\n.. code:: python\n\n    import pywinservicemanager.ConfigurationTypes as ConfigurationTypes\n    commandLine = ConfigurationTypes.FailureActionConfigurationCommandLineType(\"myCmd.exe\")\n\n\n===================\nFurther Information\n===================\nFor more information the windows API implemented in the package and/or how the service controller utility works, please consult the `win32service documentation\n<http://docs.activestate.com/activepython/2.6/pywin32/win32service.html>`_.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/belvedere-trading/pywinservicemanager",
    "keywords": null,
    "license": "PyWinServiceManager - Wrapper for the win32service api\n\n   Copyright 2015 Team Belvedere, LLC\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pywinservicemanager",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pywinservicemanager/",
    "release_url": "https://pypi.org/project/pywinservicemanager/1.0.5/",
    "requires_python": null,
    "summary": "Windows Service Manager Module that wraps for the win32service api",
    "version": "1.0.5"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f9c76e4d0476e23628e3dc485fa6b185",
          "sha256": "f0d1c18295eb8c6982635b84999631e81aec6de0fe293747725701397103b676"
        },
        "downloads": 954,
        "filename": "pywinservicemanager-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f9c76e4d0476e23628e3dc485fa6b185",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12979,
        "upload_time": "2015-10-09T14:35:19",
        "url": "https://files.pythonhosted.org/packages/1f/fd/3ac3390cf0025ffaf96c87dbe91e52ce03a11d6c837defe954c362df94cd/pywinservicemanager-1.0.0.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "93d9d9934df111440e2148f24accc562",
          "sha256": "068c181160bcf076079185095a027d86b147ed4b17ab24696adf0e66ae058804"
        },
        "downloads": 683,
        "filename": "pywinservicemanager-1.0.2.zip",
        "has_sig": false,
        "md5_digest": "93d9d9934df111440e2148f24accc562",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 56618,
        "upload_time": "2015-10-28T19:00:36",
        "url": "https://files.pythonhosted.org/packages/36/52/4ce48459a6c96978b715002e8a85defb2e3f7fee9e6e7b73e60ae5daf6df/pywinservicemanager-1.0.2.zip"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "31e38abd67ea5d01018b3e2f15b9de4f",
          "sha256": "a83625b885094398f419a144b468ccfdc5d5d3249bab15a4d3d4475dc841a2fa"
        },
        "downloads": 14,
        "filename": "pywinservicemanager-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "31e38abd67ea5d01018b3e2f15b9de4f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31888,
        "upload_time": "2017-03-01T17:26:03",
        "url": "https://files.pythonhosted.org/packages/68/4a/714cbba0dbc45bef1a7cf14746bd90a8eacf04d3dbfe058a7814ee01628a/pywinservicemanager-1.0.3.tar.gz"
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e64cca49d2f5eb9e2d73f1b6c9fff6ec",
          "sha256": "71338a01fb94959f57ebd33f56332bcc3c00c62435a2be01ca6bff69e5da320a"
        },
        "downloads": 16,
        "filename": "pywinservicemanager-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e64cca49d2f5eb9e2d73f1b6c9fff6ec",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31898,
        "upload_time": "2017-03-03T20:29:06",
        "url": "https://files.pythonhosted.org/packages/ab/6b/5079816fa8679f27b9998ce5f257728ad030cc8603cf56adc188029ee77e/pywinservicemanager-1.0.4.tar.gz"
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d21d54322672492355a5036230ca4a1c",
          "sha256": "77de9b80d73496071f6643c23614a9fb9b1ce4e361ceeae6e7dfa3e516257e03"
        },
        "downloads": 24,
        "filename": "pywinservicemanager-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d21d54322672492355a5036230ca4a1c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31871,
        "upload_time": "2017-03-07T17:26:03",
        "url": "https://files.pythonhosted.org/packages/d3/e6/763e1fb832fba5b90e1e5c5a1015835e84b9f503a0f90a7d19b564273647/pywinservicemanager-1.0.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d21d54322672492355a5036230ca4a1c",
        "sha256": "77de9b80d73496071f6643c23614a9fb9b1ce4e361ceeae6e7dfa3e516257e03"
      },
      "downloads": 24,
      "filename": "pywinservicemanager-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "d21d54322672492355a5036230ca4a1c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 31871,
      "upload_time": "2017-03-07T17:26:03",
      "url": "https://files.pythonhosted.org/packages/d3/e6/763e1fb832fba5b90e1e5c5a1015835e84b9f503a0f90a7d19b564273647/pywinservicemanager-1.0.5.tar.gz"
    }
  ]
}