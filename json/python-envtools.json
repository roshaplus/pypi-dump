{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Python environment toolchain\n\nHome-page: https://github.com/pedroburon/python-envtools\nAuthor: Pedro Bur\u00f3n\nAuthor-email: hi@pedroburon.info\nLicense: MIT\nDescription-Content-Type: UNKNOWN\nDescription: =======================================\n        Useful environment toolchain for python\n        =======================================\n        \n        .. image:: https://travis-ci.org/pedroburon/python-envtools.svg?branch=master\n           :target: https://travis-ci.org/pedroburon/python-envtools\n        \n        .. image:: https://coveralls.io/repos/github/pedroburon/python-envtools/badge.svg?branch=master\n           :target: https://coveralls.io/github/pedroburon/python-envtools?branch=master\n        \n        \n        ********************\n        override_environment\n        ********************\n        \n        Context Processor that overrides environment vars.\n        \n        ::\n        \n            >>> @override_environment(DEBUG=False, FOO=\"Bar\")\n            >>> def foo():\n            >>>     print(os.getenv(\"FOO\"))\n            >>>     return os.getenv(\"DEBUG\")\n            >>> foo()\n            FOO\n            \"DEBUG\"\n        \n        \n        ::\n        \n            >>> with override_environment(DEBUG=\"False\", FOO=\"Bar\"):\n            >>>     print(os.getenv(\"FOO\"))\n            >>>     os.getenv(\"DEBUG\")\n            FOO\n            \"DEBUG\"\n        \n        \n        *****************\n        configure_logging\n        *****************\n        \n        Wrap a `configDict` inside configure_logging, then logging level could be controlled by environment variables\n        \n        ::\n        \n            LOGGING = configure_logging({\n                \"loggers\": {\n                    \"module\": {\n                        \"handlers\": [\"console\"],\n                        \"level\": \"INFO\",\n                    },\n                }\n            })\n        \n        For this example, environment variable must be set as `LOGGING_LEVEL_module=DEBUG`.\n        \n        \n        *******\n        get_env\n        *******\n        \n        Similar to `os.getenv()` but evaluates string content (default) into simple python types.\n        \n        ::\n        \n            >>> os.environ['FOO'] = \"1\"\n            >>> os.getenv('FOO')\n            \"1\"\n            >>> get_env('FOO')\n            1\n        \n            >>> os.environ['FOO'] = \"bar\"\n            >>> get_env('FOO')\n            \"bar\"\n        \n            >>> os.environ['FOO'] = \"True\"\n            >>> os.getenv('FOO')\n            \"True\"\n            >>> get_env('FOO')\n            True\n        \n            >>> os.environ['FOO'] = \"[1,2,3]\"\n            >>> os.getenv('FOO')\n            \"[1,2,3]\"\n            >>> get_env('FOO')\n            [1, 2, 3]\n        \n        \n        it works for list, tuples, dictionaries, numbers, booleans and strings. And is safe!\n        \n            \n        \nPlatform: UNKNOWN\nClassifier: Development Status :: 4 - Beta\nClassifier: Environment :: Web Environment\nClassifier: Framework :: Django\nClassifier: Intended Audience :: Developers\nClassifier: License :: OSI Approved :: MIT License\nClassifier: Operating System :: OS Independent\nClassifier: Programming Language :: Python\nClassifier: Programming Language :: Python :: 2.7\nClassifier: Programming Language :: Python :: 3\nClassifier: Topic :: Software Development :: Libraries :: Python Modules\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-envtools",
    "platform": "",
    "project_url": "https://pypi.org/project/python-envtools/",
    "release_url": "https://pypi.org/project/python-envtools/0.0.1.dev1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "",
    "version": "0.0.1.dev1"
  },
  "releases": {
    "0.0.1.dev1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eccba903774ac1e124a558b9322a983a",
          "sha256": "e6f1dc922d4b489ba74c0d10353df632c18fdec9673f1b1facebc668889afe48"
        },
        "downloads": -1,
        "filename": "python_envtools-0.0.1.dev1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "eccba903774ac1e124a558b9322a983a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 7990,
        "upload_time": "2017-12-02T04:01:08",
        "url": "https://files.pythonhosted.org/packages/11/b9/a1c454b9b67b2513385d663ca47392d7a55f7db0ed50ff637f0ed9f1b4d5/python_envtools-0.0.1.dev1-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "eccba903774ac1e124a558b9322a983a",
        "sha256": "e6f1dc922d4b489ba74c0d10353df632c18fdec9673f1b1facebc668889afe48"
      },
      "downloads": -1,
      "filename": "python_envtools-0.0.1.dev1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "eccba903774ac1e124a558b9322a983a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 7990,
      "upload_time": "2017-12-02T04:01:08",
      "url": "https://files.pythonhosted.org/packages/11/b9/a1c454b9b67b2513385d663ca47392d7a55f7db0ed50ff637f0ed9f1b4d5/python_envtools-0.0.1.dev1-py2.py3-none-any.whl"
    }
  ]
}