{
  "info": {
    "author": "Christopher Flynn",
    "author_email": "crf204@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "fbm\n===\n\nExact methods for simulating fractional Brownian motion (fBm) or fractional\nGaussian noise (fGn) in python.\n\nThe three methods are Hosking's method, the Cholesky method, and the Davies\nHarte method. All three methods are exact in generating a discretely sampled\nfBm/fGn.\n\nUsage:\n\n.. code-block:: python\n\n    from fbm import FBM\n\n\n    f = FBM(n=16, hurst=0.75, length=1, method='daviesharte')\n\n    # Generate a fBm realization\n    fbm_sample = f.fbm()\n\n    # Generate a fGn realization\n    fgn_sample = f.fgn()\n\n    # Get the times associated with the fBm\n    times = f.times()\n\nwhere ``n`` is the number of equispaced increments desired for a fBm with Hurst\nparameter ``hurst`` on the interval [0, ``length``]. Method can be\neither ``'hosking'``, ``'cholesky'``, or ``'daviesharte'``. The ``fbm()``\nmethod returns a length ``n+1`` array of discrete values for the fBm (includes\n0). The ``fgn()`` method returns a length ``n`` array of fBm\nincrements, or fGn. The ``times()`` method returns a length ``n+1`` array of\ntimes corresponding to the fBm realizations.\n\nFor simulating multiple realizations use the FBM class provided as above.\nFor one-off samples of fBm or fGn there are also functions available which\nhandle the FBM object themselves:\n\n.. code-block:: python\n\n    from fbm import fbm, fgn, times\n\n\n    # Generate a fBm realization\n    fbm_sample = fbm(n=16, hurst=0.75, length=1, method='daviesharte')\n\n    # Generate a fGn realization\n    fgn_sample = fgn(n=16, hurst=0.75, length=1, method='daviesharte')\n\n    # Get the times associated with the fBm\n    times = times(n=16, length=1)\n\nFor fastest performance use the Davies and Harte method. It is much faster than\nboth other methods especially for larger increment quantities. Note that the\nDavies and Harte method can fail if the Hurst parameter ``hurst`` is close to\n1 and there are a small amount of increments ``n``. If this occurs, python will\nprint a warning to the console and fallback to using Hosking's method to\ngenerate the realization. See page 412 of the following paper for a more\ndetailed explanation:\n\n* Wood, Andrew TA, and Grace Chan. \"Simulation of stationary Gaussian processes\n  in [0, 1] d.\" Journal of computational and graphical statistics 3, no. 4\n  (1994): 409-432.\n\n\n**Hosking's method:**\n\n* Hosking, Jonathan RM. \"Modeling persistence in hydrological time series\n  using fractional differencing.\" Water resources research 20, no. 12 (1984):\n  1898-1908.\n\n**Cholesky method:**\n\n* Asmussen, S\u00f8ren. Stochastic simulation with a view towards stochastic\n  processes. University of Aarhus. Centre for Mathematical Physics and\n  Stochastics (MaPhySto)[MPS], 1998.\n\n**Davies Harte method:**\n\n* Davies, Robert B., and D. S. Harte. \"Tests for Hurst effect.\" Biometrika 74,\n  no. 1 (1987): 95-101.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/crflynn/fbm",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "fbm",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/fbm/",
    "release_url": "https://pypi.org/project/fbm/0.1.0/",
    "requires_python": null,
    "summary": "Fractional Brownian Motion",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "62214ca03d2ca3d7eff4f0fc8f4c85b2",
          "sha256": "0a94a0809ab88ef543aa66589084f618b39cab9a474c50d5a3785b74f317f897"
        },
        "downloads": 0,
        "filename": "fbm-0.1.0.zip",
        "has_sig": false,
        "md5_digest": "62214ca03d2ca3d7eff4f0fc8f4c85b2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7558,
        "upload_time": "2017-06-09T02:13:55",
        "url": "https://files.pythonhosted.org/packages/fe/9a/7e0b4bda73c0276d0b4d609814bb0e44bb3894a3db4f1f875e10bc4007ec/fbm-0.1.0.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "62214ca03d2ca3d7eff4f0fc8f4c85b2",
        "sha256": "0a94a0809ab88ef543aa66589084f618b39cab9a474c50d5a3785b74f317f897"
      },
      "downloads": 0,
      "filename": "fbm-0.1.0.zip",
      "has_sig": false,
      "md5_digest": "62214ca03d2ca3d7eff4f0fc8f4c85b2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7558,
      "upload_time": "2017-06-09T02:13:55",
      "url": "https://files.pythonhosted.org/packages/fe/9a/7e0b4bda73c0276d0b4d609814bb0e44bb3894a3db4f1f875e10bc4007ec/fbm-0.1.0.zip"
    }
  ]
}