{
  "info": {
    "author": "Benjamin Althues",
    "author_email": "benjamin@babab.nl",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Shells",
      "Topic :: System :: Software Distribution",
      "Topic :: Terminals",
      "Topic :: Utilities"
    ],
    "description": "pycommand 0.3.0\n******************************************************************************\n\n.. image:: https://travis-ci.org/babab/pycommand.svg?branch=master\n    :target: https://travis-ci.org/babab/pycommand\n    :alt: Build Status\n\n**A clean and simplistic alternative for argparse, optparse and getopt**\n\nPycommand is essentially a fancy wrapper around getopt that consists of\none simple `CommandBase` class that you can use to create executable\ncommands for your python programs with very simplistic and readable\ncode. It has support for subcommands and also nesting commands, so you\ncan create (multiple levels of) subcommands, with the ability to pass\nthe values of optional arguments of a command object to its subcommand\nobjects. Supported Python versions are 2.7 and 3.2 and later.\n\n- Github: https://github.com/babab/pycommand\n- Bitbucket: https://bitbucket.org/babab/pycommand\n- PyPI: https://pypi.python.org/pypi/pycommand/\n- Documentation: http://pythonhosted.org/pycommand/\n\n\nDownload and install\n====================\n\nIf you have pip installed, you can just:\n\n.. code-block:: console\n\n   # pip install pycommand\n\nTo work with the current development version, do something like this:\n\n.. code-block:: console\n\n   $ git clone git://bitbucket.org/babab/pycommand.git\n   # cd pycommand\n   # pip install -e .\n\n\nQuick setup from a template\n===========================\n\nTo quicly start writing a command from a template (much like the\nexamples below), use pycommand's helper script by running:\n\n.. code-block:: console\n\n   $ pycommand init\n\nThis will ask you for an executable name, class name and template type\nand it will save it to an executable file, ready to be used as a Python\nshell script (for your Python package/module)).\n\n\nExample\n=======\n\nFor full documentation and examples, visit http://pythonhosted.org/pycommand/\n\nHere is an undocumented code example of getting automated usage text\ngeneration and parsing of optional arguments. If we name the script\nfor which you can see the code below ``basic-example`` and execute it,\nthe following will be the output for running ``basic-example -h`` or\n``basic-example --help``:\n\n.. code-block:: console\n\n   usage: basic-example [options]\n\n   An example of a basic CLI program\n\n   Options:\n   -h, --help                        show this help information\n   -f <filename>, --file=<filename>  use specified file\n   --version                         show version information\n\nAnd here is the code:\n\n.. code-block:: python\n\n   #!/usr/bin/env python\n\n   import pycommand\n   import sys\n\n\n   class BasicExampleCommand(pycommand.CommandBase):\n       '''An example of a basic CLI program'''\n       usagestr = 'usage: basic-example [options]'\n       description = __doc__\n\n       optionList = (\n           ('help', ('h', False, 'show this help information')),\n           ('file', ('f', '<filename>', 'use specified file')),\n           ('version', ('', False, 'show version information')),\n       )\n\n       def run(self):\n           if self.flags.help:\n               print(self.usage)\n               return 0\n           elif self.flags.version:\n               print('Python version ' + sys.version.split()[0])\n               return 0\n           elif self.flags.file:\n               print('filename = ' + self.flags.file)\n               return 0\n\n           print('Program completed. Try adding \"--help\"')\n\n   if __name__ == '__main__':\n       # Shortcut for reading from sys.argv[1:] and sys.exit(status)\n       pycommand.run_and_exit(BasicExampleCommand)\n\n       # The shortcut is equivalent to the following:\n\n       # cmd = BasicExampleCommand(sys.argv[1:])\n       # if cmd.error:\n       #     print('error: {0}'.format(cmd.error))\n       #     sys.exit(1)\n       # else:\n       #     sys.exit(cmd.run())\n\n\nWhy was it created?\n===================\n\nWhen parsing command line program arguments, I sometimes work with\n`argparse` (a replacement for `optparse`). I don't really like the API\nand the output it gives, which is the main reason I've always used\n`getopt` for parsing arguments whenever possible.\n\nThe `CommandBase` class was originally written for *DisPass*,\nwhich is a password manager/generator, as a means to easily define new\nsubcommands and have auto-generated usage messages. Because I want to\nhave this in other projects I've decided to put it in the cheeseshop.\n\n\nSoftware license\n================\n\nCopyright (c) 2013-2015  Benjamin Althues <benjamin@babab.nl>\n\nPermission to use, copy, modify, and distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\nChange Log\n==========\n\npycommand adheres to `Semantic Versioning <http://semver.org/>`_.\n\n\n0.3.0 - 2015-06-04\n------------------\n\nAdded\n#####\n- Shortcut ``run_and_exit()`` for reading from ``sys.argv[1:]`` and exiting\n  the interpreter via ``sys.exit(status)``\n- Package as wheel distribution to speed up installations\n- Add ``man pycommand`` ability, i.e. install mandoc in ``/usr/share/man3/``\n\nChanged\n#######\n- Add support for getting flags by attribute like ``self.flags.help``.\n  The default approach for normal dicts like ``self.flags['help']``\n  remains valid.\n\n\n0.2.0 - 2015-05-21\n------------------\n\nAdded\n#####\n- Full example of a command with subcommands\n- Create quick templates via pycommand script (``pycommand init``)\n- Unit tests and automatic testing via Travis-CI\n- Documentation ``man`` (.3) and ``info`` (.info) pages\n\nChanged\n#######\n- Specification of subcommands can be `defined in CommandBase.command`__\n  as a shortcut.\n\n__ https://github.com/babab/pycommand/commit/a978a05ef92f70f0ce6b06d96a38c2caa8297ecc\n\n0.1.0 - 2013-08-08\n------------------\nAdded\n#####\n- Initial release",
    "docs_url": "https://pythonhosted.org/pycommand/",
    "download_url": "http://pypi.python.org/pypi/pycommand/",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/babab/pycommand",
    "keywords": null,
    "license": "ISC",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pycommand",
    "platform": "any",
    "project_url": "https://pypi.org/project/pycommand/",
    "release_url": "https://pypi.org/project/pycommand/0.3.0/",
    "requires_python": null,
    "summary": "A clean and simplistic alternative for argparse, optparse and getopt",
    "version": "0.3.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1c41cdf89c4b63f9cd04c6b478b439b4",
          "sha256": "52e8cbc9c3c5cae0584b191b8ee34781d7fe17777706a91a5deccbaad393d034"
        },
        "downloads": 2842,
        "filename": "pycommand-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1c41cdf89c4b63f9cd04c6b478b439b4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3836,
        "upload_time": "2013-08-08T20:56:58",
        "url": "https://files.pythonhosted.org/packages/2f/91/7bc47b35a29e013b45182ab311eecf8bafcff5913d8e959b0791ae812081/pycommand-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1d8aea3f12da41a9178c62682f749c35",
          "sha256": "443d79689d4ce48c74d30ad586cf8b6d961a93e39728fd297f81fa7608267cee"
        },
        "downloads": 1280,
        "filename": "pycommand-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1d8aea3f12da41a9178c62682f749c35",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13251,
        "upload_time": "2015-05-20T23:55:48",
        "url": "https://files.pythonhosted.org/packages/0c/3e/4fc8147026fbe5048b241493d440dfc14b99dcdfa48b6e5db52a6aef7642/pycommand-0.2.0.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9b3fe63dfb6ce80544edfaa7483244c9",
          "sha256": "bb9812eb2d1a65c194b5ce8ad2522eecaaa3ec3415b51b0af80580ec483dd147"
        },
        "downloads": 2834,
        "filename": "pycommand-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9b3fe63dfb6ce80544edfaa7483244c9",
        "packagetype": "bdist_wheel",
        "python_version": "3.4",
        "size": 24231,
        "upload_time": "2015-06-04T17:48:06",
        "url": "https://files.pythonhosted.org/packages/24/9f/70cfb27bea2f3930d7cd13bbf411c3611488d6bfdd7b01b5d8f4877b1f82/pycommand-0.3.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2d8197b987c5096ae5646f0155f1aa1d",
          "sha256": "a5dfe969b4aa4585e1f6059f146ef441db2de329788d8ec2cb49018f68bfc239"
        },
        "downloads": 930,
        "filename": "pycommand-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2d8197b987c5096ae5646f0155f1aa1d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17014,
        "upload_time": "2015-06-04T17:47:57",
        "url": "https://files.pythonhosted.org/packages/e2/65/a46ffc8989c8210600aa013ce5892306559cc4c44fe745a3e29cab997709/pycommand-0.3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9b3fe63dfb6ce80544edfaa7483244c9",
        "sha256": "bb9812eb2d1a65c194b5ce8ad2522eecaaa3ec3415b51b0af80580ec483dd147"
      },
      "downloads": 2834,
      "filename": "pycommand-0.3.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9b3fe63dfb6ce80544edfaa7483244c9",
      "packagetype": "bdist_wheel",
      "python_version": "3.4",
      "size": 24231,
      "upload_time": "2015-06-04T17:48:06",
      "url": "https://files.pythonhosted.org/packages/24/9f/70cfb27bea2f3930d7cd13bbf411c3611488d6bfdd7b01b5d8f4877b1f82/pycommand-0.3.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "2d8197b987c5096ae5646f0155f1aa1d",
        "sha256": "a5dfe969b4aa4585e1f6059f146ef441db2de329788d8ec2cb49018f68bfc239"
      },
      "downloads": 930,
      "filename": "pycommand-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2d8197b987c5096ae5646f0155f1aa1d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 17014,
      "upload_time": "2015-06-04T17:47:57",
      "url": "https://files.pythonhosted.org/packages/e2/65/a46ffc8989c8210600aa013ce5892306559cc4c44fe745a3e29cab997709/pycommand-0.3.0.tar.gz"
    }
  ]
}