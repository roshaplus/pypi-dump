{
  "info": {
    "author": "skyduy",
    "author_email": "cuteuy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "dblink\n======\n\n|PyPI version| |Build Status| |codecov|\n\n    Aimed for easily using query, insert, update and delete with an\n    exist table, the filter query syntax likes Django's. You can find\n    out the simple usage in the code below.\n\nSuppose you have two tables: ``users`` and ``addresses`` created by:\n\n.. code:: sql\n\n    CREATE TABLE users (\n        id INTEGER NOT NULL,\n        name VARCHAR(50),\n        fullname VARCHAR(50),\n        password VARCHAR(12),\n        PRIMARY KEY (id)\n    );\n\n    CREATE TABLE addresses (\n        id INTEGER NOT NULL,\n        email_address VARCHAR NOT NULL,\n        user_id INTEGER,\n        PRIMARY KEY (id),\n        FOREIGN KEY(user_id) REFERENCES users (id)\n    );\n\nYou can link to exist table in database using `Database\nUrls <http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls>`__.\n\n.. code:: python\n\n    from dblink import Database, Table\n    db = Database(url='sqlite:///:memory:')\n    user_table = Table('users', db)\n    # ...\n    db.close()\n\n    with Database(url='postgresql://scott:tiger@localhost/mydatabase') as db:\n        address_table = Table('addresses', db)\n        # ...\n\nHere is a simple example.\n\n.. code:: python\n\n    \"\"\"\n    Suppose you have two table: users and addresses.\n    \"\"\"\n    from dblink import Database, Table\n\n\n    with Database('sqlite:///:memory:') as db:\n        table_user = Table('users', db)\n        table_address = Table('addresses', db)\n\n        # show description\n        print(table_user.description)\n        print(table_address.description)\n\n        # chain query, you can call delete on the single table result\n        table_user.query.filter(id=1).one_or_none()\n\n        table_user.query.filter(id__gte=2) \\\n                        .order_by('name') \\\n                        .values_list('id', 'name')\n\n        table_user.query.filter(id__in=[1, 2, 3]) \\\n                        .filter(name__startswith='Yu').all()\n\n        table_user.query.order_by('-name') \\\n                        .values_list('fullname', flat=True, distinct=True)\n\n        table_user.query.distinct('name').values_list('name', flat=True)\n\n        table_user.query.filter(id__in=[1, 2, 3]).delete()\n\n        # join query\n        table_user.join(table_address) \\\n                  .filter(id__lt=10000) \\\n                  .filter(email_address__contains='gmail') \\\n                  .filter(**{'addresses.id__gte': 100}) \\\n                  .values_list('user_id', 'name', 'email_address',\n                               table_address.id, 'users.fullname')\n\n        # get or insert\n        instance, create = table_user.get_or_insert(id=1, name='jone')\n\n        # single record operation.\n        table_user.insert({'id': 1, 'name': 'YuJun', 'password': 'psw'})\n\n        table_user.update({'id': 1, 'name': 'skyduy', 'password': 'psw'},\n                          unique_fields=['id'], update_fields=['name', 'password'])\n\n        table_user.insert_or_update(\n            {'id': 1, 'name': 'skyduy', 'password': 'psw'},\n            unique_fields=['id'], update_fields=['name', 'password']\n        )\n\n        table_user.delete({'id': 1, 'name': \"I don't matter\"},\n                          unique_fields=['id'])\n\n        # bulk operation\n        items = [{'id': 1, 'name': 'yujun', 'password': 'haha'},\n                 {'id': 2, 'name': 'skyduy', 'password': 'aha'},]\n        unique_fields = ['id']\n        update_fields = ['name']\n        table_user.bulk_insert(items)\n        table_user.bulk_delete(items, unique_fields)\n        table_user.bulk_update(items, unique_fields, update_fields)\n        table_user.bulk_insert_or_update(items, unique_fields, update_fields)\n\n.. |PyPI version| image:: https://badge.fury.io/py/dblink.svg\n   :target: https://badge.fury.io/py/dblink\n.. |Build Status| image:: https://travis-ci.org/skyduy/dblink.svg?branch=master\n   :target: https://travis-ci.org/skyduy/dblink\n.. |codecov| image:: https://codecov.io/gh/skyduy/dblink/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/skyduy/dblink\n\n\nV0.1.2 (2018/02/05)\n-------------------\n\n-  Rename.\n-  Bug fix.\n\nV0.1.0 (2018/02/05)\n-------------------\n\n-  Initial release.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/skyduy/dblink",
    "keywords": "sql orm dblink",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dblink",
    "platform": "",
    "project_url": "https://pypi.org/project/dblink/",
    "release_url": "https://pypi.org/project/dblink/0.1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "DBLink tools makes operation on exists table easier.",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5524a7d8a50c16939e76eac24addbf45",
          "sha256": "80d451e06d086fe656554b0e5162cf8475139b6340b332448b76da2d37095aed"
        },
        "downloads": -1,
        "filename": "dblink-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5524a7d8a50c16939e76eac24addbf45",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 8917,
        "upload_time": "2018-02-05T07:33:14",
        "url": "https://files.pythonhosted.org/packages/01/ec/c62151b02b01315d76e58c1d61ebb674ac763f121228b7a5b2ed55c5fffd/dblink-0.1.2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c7aee01e89780d5e242a4e22294af84a",
          "sha256": "319d99ca4144d750b293ee3f660b7547fed1b864deb45cdeeb011d6939f04870"
        },
        "downloads": -1,
        "filename": "dblink-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c7aee01e89780d5e242a4e22294af84a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6514,
        "upload_time": "2018-02-05T07:32:56",
        "url": "https://files.pythonhosted.org/packages/df/72/ea2068071839198c0d5922a87c87f80624174c29932ab1818db0b013b9e1/dblink-0.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5524a7d8a50c16939e76eac24addbf45",
        "sha256": "80d451e06d086fe656554b0e5162cf8475139b6340b332448b76da2d37095aed"
      },
      "downloads": -1,
      "filename": "dblink-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5524a7d8a50c16939e76eac24addbf45",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 8917,
      "upload_time": "2018-02-05T07:33:14",
      "url": "https://files.pythonhosted.org/packages/01/ec/c62151b02b01315d76e58c1d61ebb674ac763f121228b7a5b2ed55c5fffd/dblink-0.1.2-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "c7aee01e89780d5e242a4e22294af84a",
        "sha256": "319d99ca4144d750b293ee3f660b7547fed1b864deb45cdeeb011d6939f04870"
      },
      "downloads": -1,
      "filename": "dblink-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c7aee01e89780d5e242a4e22294af84a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6514,
      "upload_time": "2018-02-05T07:32:56",
      "url": "https://files.pythonhosted.org/packages/df/72/ea2068071839198c0d5922a87c87f80624174c29932ab1818db0b013b9e1/dblink-0.1.2.tar.gz"
    }
  ]
}