{
  "info": {
    "author": "Franz Steinmetz",
    "author_email": "franz.steinmetz@dlr.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Flask",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Object Brokering",
      "Topic :: Utilities"
    ],
    "description": "The ``jsonconversion`` package\n==============================\n\nThis python module helps converting arbitrary Python objects into JSON strings and back. It extends the basic features\nof the ``JSONEncoder`` and ``JSONDecoder`` classes provided by the native ``json`` package. For this purpose,\n``jsonconversion`` ships with these four classes:\n\nThe ``JSONObject`` class\n------------------------\n\nYour serializable classes should inherit from this class. Hereby, they must implement the methods ``from_dict`` and\n``to_dict``. The example further down describes how to do so.\n\nThe ``JSONExtendedEncoder`` class\n---------------------------------\n\nThis is a class used internally by ``JSONObjectEncoder``. However, it can also be used directly, if you do not need the\nfeatures of ``JSONObjectEncoder`` but want to implement your own encoders.\n\nThe class is especially helpful, if you want custom handling of builtins (``int``, ``dict``, ...) or classes deriving\nfrom builtins. This would not be possible if directly inheriting from ``JSONEncoder``. To do so, override the\n``isinstance`` method and return ``False`` for all types you want to handle in the ``default`` method.\n\nIf you look at the source code of ``JSONObjectEncoder``, you will see how this can be used.\n\nThe ``JSONObjectEncoder`` class\n-------------------------------\n\nEncodes Python objects into JSON strings. Supported objects are:\n\n-  Python builtins: ``int``, ``float``, ``str``, ``list``, ``set``, ``dict``, ``tuple``\n-  ``type`` objects: ``isinstance(object, type)``\n-  All classes deriving from ``JSONObject``\n\nThose objects can of course also be nested!\n\nThe ``JSONObjectDecoder`` class\n-------------------------------\n\nDecodes JSON strings converted using the ``JSONObjectEncoder`` back to Python objects.\n\nThe class adds a custom keyword argument to the ``load[s]`` method: ``substitute_modules``. This parameter takes a\n``dict`` in the form ``{\"old.module.MyClass\": \"new.module.MyClass\"}``. It can be used if you have serialized\n``JSONObject``s who's module path has changed.\n\nUsage\n=====\n\nUsing ``jsonconversion`` is easy. You can find further code examples in the ``test`` folder.\n\nEncoding and Decoding\n---------------------\n\nIn order to encode Python objects with JSON conversion and to later decode them, you have to import the Python module\n``json``. The module provides the methods ``dump``/``dumps`` for encoding and ``load``/``loads`` for decoding:\n\n.. code:: python\n\n    import json\n\n    from jsonconversion.decoder import JSONObjectDecoder\n    from jsonconversion.encoder import JSONObjectEncoder\n\n    var = (1, 2, 3)  # variable to be serialized\n\n    # \"dumps\" converts the variable to a string, \"dump\" directly writes it to a file\n    str_var = json.dumps(var, cls=JSONObjectEncoder)\n    # Equivalently, \"loads\" converts the object back from a string. \"load\" from a file\n    var_2 = json.loads(str_var, cls=JSONObjectDecoder)\n    assert var == var_2\n\nDeriving from JSONObject\n------------------------\n\nIn order to serialize arbitrary, self-written classes, they must derive from ``JSONObject`` and implement the two\nmethods ``from_dict`` and ``to_dict``:\n\n.. code:: python\n\n    class MyClass(JSONObject):\n\n        def __init__(self, a, b, c):\n            self.a = a\n            self.b = b\n            self.c = c\n\n        @classmethod\n        def from_dict(cls, dict_):\n            return cls(dict_['a'], dict_['b'], dict_['c'])\n\n        def to_dict(self):\n            return {'a': self.a, 'b': self.b, 'c': self.c}\n\n        def __eq__(self, other):\n            return self.a == other.a and self.b == other.b and self.c == other.c\n\nGeneral notes\n-------------\n\n-  ``jsonconversion`` stores the class path in the JSON string when serializing a JSONObject. When decoding the object\n   back, it automatically imports the correct module. You only have to ensure that the module is within your\n   ``PYTHONPATH``.\n\n-  The ``to_dict`` and ``from_dict`` methods only need to specify the elements of a class, needed to recreate the\n   object. Derived attributes of a class (like ``age`` from ``year_born``) do not need to be serialized.\n\n-  If you compare the original object with the object obtained from serialization and deserialization using ``is``, they\n   will differ, as these are objects at different locations in memory. Also a comparison of JSONObject with ``==`` will\n   fail, if you do not tell Python how to compare two objects. This is why ``MyClass`` overrides the ``__eq__`` method.",
    "docs_url": null,
    "download_url": "https://github.com/DLR-RM/python-jsonconversion/archive/0.2.2.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/DLR-RM/python-jsonconversion",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "jsonconversion",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/jsonconversion/",
    "release_url": "https://pypi.org/project/jsonconversion/0.2.4/",
    "requires_python": null,
    "summary": "This python module helps converting arbitrary Python objects into JSON strings and back.",
    "version": "0.2.4"
  },
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a8023fbad58e4832926ea03be6f26f72",
          "sha256": "ba1ff2f1c1f966912628e0260e69ac4b471179f9ba5aff3097bff13c619542f4"
        },
        "downloads": 24,
        "filename": "jsonconversion-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a8023fbad58e4832926ea03be6f26f72",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10912,
        "upload_time": "2017-04-04T05:59:29",
        "url": "https://files.pythonhosted.org/packages/18/eb/50d6172c996fbc0fe805ad518e70f130cdd0b1f9dc4fdf245dab2725e178/jsonconversion-0.2.2.tar.gz"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4abf79fb0c2c2d96041c006366efb86a",
          "sha256": "4f561dfd2cd7b90c08ce1aae5451093d5b23641d1df39ac22a211272afe5cb04"
        },
        "downloads": 0,
        "filename": "jsonconversion-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4abf79fb0c2c2d96041c006366efb86a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11498,
        "upload_time": "2017-04-10T13:20:53",
        "url": "https://files.pythonhosted.org/packages/ab/e9/1ca38f55e95b8e6c7d0b1c89c8a0265f9c6851389ca845eb38c0bd064789/jsonconversion-0.2.3.tar.gz"
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a92fed0c92fa90e70dd552977acfb68c",
          "sha256": "154140335dbf43f77df7bf615d2d521b3d9ee1bcba5ff1ebb2c9643fa1e065fa"
        },
        "downloads": 0,
        "filename": "jsonconversion-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a92fed0c92fa90e70dd552977acfb68c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11000,
        "upload_time": "2017-04-10T13:37:36",
        "url": "https://files.pythonhosted.org/packages/3b/6a/bb259c113731bbeda7c8f0b061d1819795595b43064be32b275742b010a3/jsonconversion-0.2.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a92fed0c92fa90e70dd552977acfb68c",
        "sha256": "154140335dbf43f77df7bf615d2d521b3d9ee1bcba5ff1ebb2c9643fa1e065fa"
      },
      "downloads": 0,
      "filename": "jsonconversion-0.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a92fed0c92fa90e70dd552977acfb68c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 11000,
      "upload_time": "2017-04-10T13:37:36",
      "url": "https://files.pythonhosted.org/packages/3b/6a/bb259c113731bbeda7c8f0b061d1819795595b43064be32b275742b010a3/jsonconversion-0.2.4.tar.gz"
    }
  ]
}