{
  "info": {
    "author": "Depop",
    "author_email": "dev@depop.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Plugins",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "flexisettings\n=============\n\n|Build Status|\n\n.. |Build Status| image:: https://circleci.com/gh/depop/python-flexisettings.svg?style=shield&circle-token=ae7b355ec3b18c69d3370898a69932091c43d152\n    :alt: Build Status\n\nPartly inspired by Django's ``from django.conf import settings`` settings object.\n\nThe goal is to allow shared libraries to be configured by a settings file in\nthe project which imports them (like how Django libraries can expect the Django\n``settings`` object to exist).\n\nUsage\n-----\n\nWe want the shared lib to be able to load config values *from the app which is*\n*importing it*.\n\nA suggested layout would be as found in ``test_project/test_lib`` in this repo.\nFor example, create a ``test_lib/conf/__init__.py`` like:\n\n.. code:: python\n\n\tfrom flexisettings import Settings\n\n\tsettings = Settings(initial_namespace='TEST_LIB', defaults='test_lib.conf.defaults')\n\nWe have a concept of customisable 'namespace' (prefix) for config values. This\nis as defined by the `ConfigLoader <https://pypi.python.org/pypi/configloader>`__\nlib we are making use of.\n\n``initial_namespace`` is the default namespace for config values of your shared\nlib. Projects who want to use your lib will be able to customise the namespace,\nbut as they are used for bootstrapping there are two config values which will\n*always* use the default name (``APP_CONFIG`` and ``CONFIG_NAMESPACE``).\n\nSo for example, say ``myapp`` wants to use ``test_lib``. ``myapp`` can\ncustomise the namespace by defining ``TEST_LIB_CONFIG_NAMESPACE = 'CUSTOM'``.\n\n``defaults`` is the import path to a python module or object *in your shared lib*\nwhich contains default values for your config. These keys should *not* be\nnamespaced.\n\nFor example if you want the config namespace for your shared lib to be\nconfigurable via env var you could create ``test_lib/conf/defaults.py`` like:\n\n.. code:: python\n\n\timport os\n\n\t# namespace for config keys loaded from e.g. Django conf or env vars\n\tCONFIG_NAMESPACE = os.getenv('TEST_LIB_CONFIG_NAMESPACE', 'TEST_LIB')\n\n\tAPP_CONFIG = os.getenv('TEST_LIB_APP_CONFIG', None)\n\nThen ``myapp`` would be able to ``export TEST_LIB_CONFIG_NAMESPACE=CUSTOM``.\n\nThat explains namespace customisation a bit, what about the ``APP_CONFIG``?\n\nSay for example that ``myapp`` is a Django website and ``test_lib`` has the\ndefaults file shown above. In your ``myapp`` project you could:\n\n.. code:: bash\n\n\texport TEST_LIB_CONFIG_NAMESPACE=CUSTOM\n\texport TEST_LIB_APP_CONFIG=django.conf.settings\n\nThen in ``myapp/settings.py`` you could have:\n\n.. code:: python\n\n\tCUSTOM_VAR1 = 'whatever'\n\nNow, recall the ``test_lib/conf/__init__.py`` that we created at the start. In\nyour ``test_lib`` code you could have:\n\n.. code:: python\n\n\tfrom test_lib.conf import settings\n\n\tassert settings.VAR1 == 'whatever'\n\nAs you can see the ``VAR1`` was set in the importing project's Django settings\nwith the ``CUSTOM_`` prefix but is available in your shared lib's ``settings``\nobject under its non-prefixed name.\n\nCompatibility\n-------------\n\nThis project is tested against:\n\n=========== ===\nPython 2.7   * \nPython 3.6   * \n=========== ===\n\nRunning the tests\n-----------------\n\nCircleCI\n~~~~~~~~\n\n| The easiest way to test the full version matrix is to install the\n  CircleCI command line app:\n| https://circleci.com/docs/2.0/local-jobs/\n| (requires Docker)\n\nThe cli does not support 'workflows' at the moment so you have to run\nthe two Python version jobs separately:\n\n.. code:: bash\n\n    circleci build --job python-2.7\n\n.. code:: bash\n\n    circleci build --job python-3.6\n\npy.test (single python version)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt's also possible to run the tests locally, allowing for debugging of\nerrors that occur.\n\nNow decide which Python version you want to test and create a virtualenv:\n\n.. code:: bash\n\n    pyenv virtualenv 3.6.2 flexisettings\n    pip install -r requirements-test.txt\n\nThe code in ``test_project`` demonstrates collaborative config between a shared\nlibrary ``test_lib`` and the app that wants to use it ``app``. Set the path to\nthe test project\n\n.. code:: bash\n\n    export PYTHONPATH=.:test_project:$PYTHONPATH\n\nNow we can run the tests:\n\n.. code:: bash\n\n    py.test -v -s --pdb test_project/tests/",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/depop/python-flexisettings",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flexisettings",
    "platform": "",
    "project_url": "https://pypi.org/project/flexisettings/",
    "release_url": "https://pypi.org/project/flexisettings/1.0.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Overridable config for shared libraries.",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7b4cd35877dff96abb1696e12cadc310",
          "sha256": "8423b707ec2f910767c1ccfbe0cdbf94dac3e4789bf785307b53a86bd4d8aee1"
        },
        "downloads": -1,
        "filename": "flexisettings-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7b4cd35877dff96abb1696e12cadc310",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4863,
        "upload_time": "2017-11-03T10:25:08",
        "url": "https://files.pythonhosted.org/packages/b9/dd/f979e785d0eb84e4c86154d0e36d488e3e1249c2f749cb6aa0a8e8404b2d/flexisettings-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7b4cd35877dff96abb1696e12cadc310",
        "sha256": "8423b707ec2f910767c1ccfbe0cdbf94dac3e4789bf785307b53a86bd4d8aee1"
      },
      "downloads": -1,
      "filename": "flexisettings-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7b4cd35877dff96abb1696e12cadc310",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4863,
      "upload_time": "2017-11-03T10:25:08",
      "url": "https://files.pythonhosted.org/packages/b9/dd/f979e785d0eb84e4c86154d0e36d488e3e1249c2f749cb6aa0a8e8404b2d/flexisettings-1.0.0.tar.gz"
    }
  ]
}