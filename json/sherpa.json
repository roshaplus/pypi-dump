{
  "info": {
    "author": "Smithsonian Astrophysical Observatory / Chandra X-Ray Center",
    "author_email": "cxchelp@head.cfa.harvard.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: C",
      "Programming Language :: Fortran",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Scientific/Engineering :: Astronomy",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "[![Build Status](https://travis-ci.org/sherpa/sherpa.svg?branch=master)](https://travis-ci.org/sherpa/sherpa)\n[![DOI](https://zenodo.org/badge/683/sherpa/sherpa.svg)](https://zenodo.org/badge/latestdoi/683/sherpa/sherpa)\n[![GPLv3+ License](https://img.shields.io/badge/license-GPLv3+-blue.svg)](https://www.gnu.org/copyleft/gpl.html)\n![Python version](https://img.shields.io/badge/Python-2.7,3.5,3.6-green.svg?style=flat)\n\n<!-- TOC *generated with [DocToc](https://github.com/thlorenz/doctoc)* -->\n**Table of Contents**\n\n- [Sherpa](#sherpa)\n- [License](#license)\n- [How To Install Sherpa](#how-to-install-sherpa)\n  - [Binary installation using Anaconda](#binary-installation-using-anaconda)\n    - [1a. Anaconda](#1a-anaconda)\n    - [1b. Starting from scratch](#1b-starting-from-scratch)\n    - [1c. Other packages](#1c-other-packages)\n  - [Source Build](#source-build)\n    - [2a. Extract the source tarball](#2a-extract-the-source-tarball)\n    - [2b. Get the code from the GitHub repository](#2b-get-the-code-from-the-github-repository)\n    - [2c. Build Sherpa](#2c-build-sherpa)\n    - [2d. Testing the build](#2d-testing-the-build)\n    - [2e. Development mode](#2e-development-mode)\n  - [Testing Sherpa](#testing-sherpa)\n    - [3a. Binary installation](#3a-binary-installation)\n    - [3b. Built from source](#3b-built-from-source)\n- [Custom source build](#custom-source-build)\n  - [FFTW library](#fftw-library)\n  - [XSPEC](#xspec)\n  - [Other customization options](#other-customization-options)\n- [History](#history)\n  - [Release History](#release-history)\n  \n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n\nSherpa\n======\n\nSherpa is a modeling and fitting application for Python. It contains a\npowerful language for combining simple models into complex expressions\nthat can be fit to the data using a variety of statistics and\noptimization methods.  It is easily extensible to include user models,\nstatistics, and optimization methods.  It provides a high-level User\nInterface for interactive data-analysis work, such as within a\nJupyter notebook, and it can also be used as a library component,\nproviding fitting and modeling capabilities to an application.\n\nWhat can you do with Sherpa?\n\n- fit 1D (multiple) data including: spectra, surface brightness profiles, light curves, general ASCII arrays\n- fit 2D images/surfaces in Poisson/Gaussian regime\n- build complex model expressions\n- import and use your own models\n- use appropriate statistics for modeling Poisson or Gaussian data\n- import new statistics, with priors if required by analysis\n- visualize the parameter space with simulations or using 1D/2D cuts of the parameter space\n- calculate confidence levels on the best fit model parameters\n- choose a robust optimization method for the fit: Levenberg-Marquardt, Nelder-Mead Simplex or Monte Carlo/Differential Evolution.\n- For detailed documentation see: [http://cxc.harvard.edu/sherpa](http://cxc.harvard.edu/sherpa)\n\nA [Quick Start Tutorial](http://nbviewer.ipython.org/github/sherpa/sherpa/tree/master/docs/SherpaQuickStart.ipynb)\nis included in the `docs` folder and can be opened with an `ipython notebook`.\n\nLicense\n=======\n\nThis program is free software: you can redistribute it and/or modify it under\nthe terms of the GNU General Public License as published by the Free Software\nFoundation, either version 3 of the License, or (at your option) any later\nversion. A copy of the GNU General Public License can be found in the\n`LICENSE` file provided with the source code, or from the\n[Free Software Foundation](http://www.gnu.org/licenses/).\n\nHow To Install Sherpa\n=====================\n\nSherpa can be installed from a binary distribution or built from\nsources. The 4.9.1 release is available for Python 2.7, 3.5, and 3.6.\n\nThe binary distribution is available for Linux and Mac OS X via conda installation \ndescribed in sections [1a](#1a-anaconda) and [1b](#1b-starting-from-scratch). This is the fastest\nway to start using Sherpa.\n\nSource installation is available for platforms incompatible with the\nbinary builds. It also allows for customization.\n\n1. Binary installation (Anaconda)\n\n2. Source build (from a source tarball or the GitHub repository)\n\nSource builds can be customized, for instance:\n\n- to point to a local build of the [FFTW library](http://www.fftw.org/)\n\n- to build the [`XSPEC`](https://heasarc.gsfc.nasa.gov/xanadu/xspec/)\n  extension to provide many common Astronomical X-ray spectral models \n\nThese and other customization options are described below.\n\n\nBinary installation using Anaconda\n----------------------------------\n\nIf you already have Anaconda installed on your system, you can just follow the\neasy steps in section [1a](#1a-anaconda).\n\nIf you don't have Anaconda you can follow the instructions in section [1b](#1b-starting-from-scratch),\nor you can install Anaconda from:\n[https://store.continuum.io/cshop/anaconda/](https://store.continuum.io/cshop/anaconda/)\nand then refer to section [1a](#1a-anaconda).\n\nNotice that section [1b](#1b-starting-from-scratch). only provides instructions on how to install a minimal\nAnaconda-powered environment, not the full Anaconda distribution.\n\nThe Sherpa 4.9.1  release - which is the latest binary release - is\ncompatible with Python 2.7 and with Python 3.5.\n\n\n### 1a. Anaconda\n\nIf you have Anaconda already installed on your system you can use it\nto seamlessly install Sherpa.\n\nFirst you need to add the Sherpa channel to your configuration,\nand then install Sherpa:\n\n    $ conda config --add channels https://conda.anaconda.org/sherpa\n    $ conda install sherpa\n\nTo update Sherpa:\n\n    $ conda update sherpa\n\n\n### 1b. Starting from scratch\n\nMiniconda is a minimal distribution of Anaconda that allows users to create\nisolated virtual environments in which they can mix and match specific\nversions of software. In this case the instructions show you how to install\nSherpa and its dependencies. After that you will be able to add more packages\nand make them work with Sherpa. You do not need root/administrator privileges\nfor installing Miniconda and Sherpa, and you can activate and deactivate the\nSherpa environment every time you want.\n\nThe instructions cover both TCSH and BASH. However, Anaconda only supports\nBASH, so we recommend that you start a BASH session before installing and\nusing Sherpa through Anaconda.\n\nDownload the Miniconda (a minimal distribution of Anaconda) installer for your\nplatform:\n\n- Linux 64 bit - [http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh](http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh)\n- OS X 64 bit (10.7 and forward) - [http://repo.continuum.io/miniconda/Miniconda-latest-MacOSX-x86_64.sh](http://repo.continuum.io/miniconda/Miniconda-latest-MacOSX-x86_64.sh)\n\nDecide where you are going to install Miniconda, e.g.:\n\n    $ export MINICONDA=/home/miniconda # BASH\n    $ setenv MINICONDA /home/miniconda # TCSH\n\nRun the Miniconda installer. It is assumed that you have read and agree with\nthe [Miniconda End User License Agreement (EULA)](http://docs.continuum.io/anaconda/eula.html)\n\n    $ bash <Miniconda file you downloaded> -b -p $MINICONDA # BASH AND TCSH\n\nAdd miniconda to your PATH:\n\n    $ export PATH=$PATH:$MINICONDA/bin # BASH\n    $ setenv PATH \"${PATH}:${MINICONDA}/bin\" # TCSH\n\nYou may add these lines to your shell's startup script, e.g. `$HOME/.bash_profile`\nfor BASH or `$HOME/.cshrc` for TCSH.\n\nAdd the Sherpa conda repositories to your configuration:\n\n    $ conda config --add channels https://conda.anaconda.org/sherpa\n\nCreate a new environment and install Sherpa:\n\n    $ conda create -n sherpa sherpa=4.9\n\nThe above command will download and install Sherpa and its dependencies in an\nisolated environment, so that Sherpa will not interfere with your System's\nPython and you will be able to install other packages in a safe environment.\n\nYou need to activate the new environment in order to start using Sherpa. This\nis straightforward in BASH, but it takes a little bit more work in TCSH. We\nrecommend TCSH users to create aliases for activating and deactivating the\nSherpa environment.\n\n    $ source activate sherpa # BASH\n    $ setenv OLDPATH $PATH; setenv PATH ${MINICONDA}/envs/sherpa/bin:${PATH} #TCSH\n\nBASH users will be reminded that they are running in the Sherpa environment\nby pre-pending the string (sherpa) to their BASH prompt.\n\nWhen you are done working with Sherpa you can either close the terminal\nwindow you were working with, or you can deactivate the Sherpa environment and\nrestore your default environment:\n\n    $ source deactivate # BASH\n    $ setenv $PATH $OLDPATH # TCSH\n\n### 1c. Other packages\n\nYou can start using Sherpa by starting a Python shell, or you can install\n`ipython` and use it as a more convenient shell. We recommend that you also install\n`ipython-notebook` and `matplotlib` so that you can use the nice `ipython` notebook\nfeatures and the seamless integration with `matplotlib` for plotting from\nSherpa. We also recommend that you install `astropy` for enabling FITS I/O\n(Sherpa will look for `pyfits` if `astropy` is not present).\n\n    $ conda install ipython-notebook matplotlib astropy\n\n\nSource Build\n------------\n\nThe prerequisites for building from source are:\n\n - Python: `setuptools`, `numpy`\n - System: `gcc`, `g++`, `gfortran`, `make`, `flex`, `bison`\n\nThe full test suite requires the `mock`, `pytest`, and `pytest-xvfb` packages,\nwhich should be installed automatically if needed.\n\nThe current Sherpa code base works with Python 2.7, 3.5, and 3.6 (as of the\nSherpa 4.9.1 release); support for versions 3.3 and 3.4 is possible\nbut would require community support.\n\nIt is *highly* recommended that [`matplotlib`](http://matplotlib.org/)\nbe installed, as this is used to create graphical output (although the\ncode can be built and used without this package), and\n[`ipython`](http://ipython.org/), which is for interactive analysis.\nData I/O requires a `FITS` I/O library. Sherpa looks for\n[`astropy`](http://www.astropy.org) by default,\nand it falls back to [`pyfits`](http://www.stsci.edu/institute/software_hardware/pyfits) \nif `astropy` is not installed.\n\nThe instructions on how to set up the prerequisites vary from system to system,\nand even on the same system there may be multiple ways of setting up the requirements.\n\nThere are two ways to download the source code:\n\n - as a source tarball\n\n - directly from GitHub as a git repository\n\n**NOTE:** it is possible to build Sherpa with `fortran` compilers other than\n`gfortran`. While this is not supported, [PR #202](https://github.com/sherpa/sherpa/pull/202/files)\nshows how this can been accomplished with `g95` on `OS X` in a specific setup.\nSimilar changes are probably required for other compilers or setups.\nThe `fortran` extensions are compiled by\n[`f2py` via `numpy.distutils`](http://docs.scipy.org/doc/numpy-1.11.0/f2py/distutils.html).\n\n### 2a. Extract the source tarball\n\nIf you downloaded the Sherpa source tarball, you can extract it by:\n\n    $ tar xf sherpa-<version>.tar.gz\n    $ cd sherpa-<version>\n\n### 2b. Get the code from the GitHub repository\n\nYou can clone the Sherpa repository with:\n\n    $ git clone https://github.com/sherpa/sherpa\n    $ cd sherpa\n\nThe most stable code is available through the 4.9.1 tag. The main\ndevelopment code, which is unstable, is available in the `master`\nbranch. New features and bug fixes or other, even less stable versions\nof the code may be available in other branches.\n\nThe master branch supports Python 2.7, 3.5, and 3.6 (4.9.1 tag). Note the\n4.8.1 tag and earlier are only compatible with Python 2.7.\n\n### 2c. Build Sherpa\n\nOnce the code is available, it can be built and installed with:\n\n    $ python setup.py install\n\n### 2d. Testing the build\n\nTo test that your installation of Sherpa is working, type:\n\n    $ sherpa_test\n\nwhich will run a small test suite (the script may not be in your path,\ndepending on where the installation step chose to install Sherpa).\n\nNote that the test may report several `SKIPPED` lines.  These messages\nare expected - as some of the tests require optional packages to be\ninstalled alongside Sherpa. These warnings may be ignored, as long as\nthe test ends with an `OK` message.\n\n**NOTE:** the `sherpa_test` command requires `pytest` to run. If `pytest`\nis not installed `sherpa_test` will try to install it.\n\n### 2e. Development mode\n\nIf you plan to edit the Sherpa code, it is more convenient\nto work in development mode rather than using the `install` command.\n\nWhen in developer mode changes are picked up by `python` without\nhaving to run `install` after every change.\n\nIn developer mode it may also be more convenient to use the `test`\ncommand rather than the `sherpa_test` script:\n\n    $ python setup.py test\n\nThe `test` command is a wrapper that calls `pytest` under the hood,\nand includes the `develop` command.\n\nYou can pass additional arguments to `pytest` with the `-a` or\n`--pytest-args` arguments.  As an example, a single test can be run\nusing the syntax:\n\n    $ python setup.py test -a sherpa/astro/datastack/tests/test_datastack.py::test_load::test_case3\n\n**NOTE:** if you run both `install` and `develop` or `test` in the same\nPython environment you end up with two competing installations of Sherpa\nwhich result in unexpected behavior. If this happens, simply run\n`pip uninstall sherpa` as many times as necessary, until you get an\nerror message that no more Sherpa installations are available. At this\npoint you can re-install Sherpa.\n\nThe same issue may occur if you install the Sherpa binary release and\nthen try to build Sherpa from source in the same environment.\n\nWhen both the [DS9 image viewer](http://ds9.si.edu/site/Home.html) and\n[XPA toolset](http://hea-www.harvard.edu/RD/xpa/) are installed, the\ntest suite will include tests that check that DS9 can be used from\nSherpa. This causes several copies of the DS9 viewer to be created,\nwhich can be distracting, as it can cause loss of mouse focus (depending\non how X-windows is set up). This can be avoided by installing the \n[X virtual-frame buffer (Xvfb)](https://en.wikipedia.org/wiki/Xvfb).\n\n\nTesting Sherpa\n--------------\n\nTo test that your installation works, just type:\n\n    $ sherpa_test\n\nThe number of tests run by `sherpa_test` depends on what Python\npackages are installed (for example, `astropy` and `matplotlib`), on\nexternal software (are DS9 and the XPA toolset installed), and whether\nthe external Sherpa test data set is installed.\n\nThe external Sherpa test data is large, and mostly useful when\ndeveloping Sherpa. The download method depends on how Sherpa\nwas installed.\n\n### 3a. Binary installation\n\nThe external test data files can be\ninstalled from GitHub channel by saying:\n\n    $ pip install https://github.com/sherpa/sherpa-test-data/archive/4.9.1.tar.gz\n\nAt this point, `sherpa_test` will pick up the data and so run more\ntests.\n\n### 3b. Built from source\n\nAt the top level of the Sherpa distribution, used to [build\nSherpa](#2c-build-sherpa), use the following commands to add the test\ndata set into the `sherpa-test-data/` directory (this assumes that the\nsource code was installed with `git` and not unpacked from a tarball):\n\n    $ git submodule init\n    $ git submodule update\n\nAt this point, the data will be picked up automatically by either of\nthe following commands:\n\n    $ sherpa_test\n    $ python setup.py test\n\nThe data files are also available as a standard Python package with its\nown [`git` repository](https://github.com/sherpa/sherpa-test-data).\n\n\nCustom source build\n===================\n\nThere are several options for customizing the Sherpa build.\n\nFFTW library\n------------\n\nSherpa ships with the [`fftw`](http://www.fftw.org/) library source\ncode and builds it as part of its own build process by\ndefault. However, users might want to point Sherpa to their own\nversion of the library. This might be required because the performance\nof this library can be significantly increased by compiling it with\noptimization flags specific for some system or architecture.\n\nIn order to make Sherpa build its modules against a local `fftw` library, users\nneed to change the default Sherpa build configuration as follows.\n\nFirst, make sure you download the Sherpa source tarball, or get the source\ncode from GitHub:\n\n    $ git clone https://github.com/sherpa/sherpa.git\n    $ cd sherpa\n\nThen, you need to edit the setup.cfg configuration.\nThis file is documented, so it should be easy to follow the instructions\ntherein.\n\nIn particular, you need to make sure that you set the following configuration\noptions:\n\n    fftw=local\n    fftw-include-dirs=/usr/local/include\n    fftw-lib-dirs=/usr/local/lib\n    fftw-libraries=fftw3\n\nYou might need to change the `/usr/local` path in the above example to the\nactual directories on your system that contain the header (.h) files and the\n`libfftw3.so` shared object.\n\nMake sure there are no leading spaces or the python configuration system will\nnot parse the configuration options correctly.\n\nThen, build Sherpa in the standard way:\n\n    $ python setup.py install\n\nXSPEC\n-----\n\nSherpa does not support\n[`XSPEC`](https://heasarc.gsfc.nasa.gov/xanadu/xspec/) models by\ndefault. However, it is possible to instruct Sherpa to build its\n`XSPEC` extension module by changing the build configuration options.\n\nThe `xspec_config` section of the `setup.cfg` file will need\nchanging to point to the libraries, and to turn on the extension.\nIn all cases, set\n\n    with-xspec=True\n\nThe remaining settings depend on how the XSPEC libraries have\nbeen built (in the examples below, environment variables are\nused, but the full path should be in your own copy of the file):\n\n 1. If the full XSPEC system has been built, then use\n\n        xspec_lib_dirs=$HEADAS/lib\n        xspec_libraries=XSFunctions XSModel XSUtil XS wcs-4.20\n        cfitsio_libraries=cfitsio_3.38\n        ccfits_libraries=CCfits_2.5\n\n    The environment variable `$HEADAS` should be expanded out, and the\n    version numbers of the `wcs`, `cfitsio`, and `CCfits` libraries\n    may need to be changed, depending on the version of XSPEC.\n\n 2. Use the model-only build of XSPEC, which will also require\n    building the\n    [cfitsio](http://heasarc.gsfc.nasa.gov/docs/software/fitsio/fitsio.html),\n    [CCfits](http://heasarc.gsfc.nasa.gov/docs/software/fitsio/ccfits/),\n    and\n    [WCSLIB](http://www.atnf.csiro.au/people/mcalabre/WCS/wcslib/)\n    libraries (it is not clear if version 5 is supported, since\n    XSPEC 12.9.0 uses version 4.20). If all the libraries are installed\n    into the same location ($HEADAS/lib), then a similar set up to the\n    full XSPEC build is used\n\n        xspec_lib_dirs=$HEADAS/lib\n        xspec_libraries=XSFunctions XSModel XSUtil XS wcs\n\n    except that the library names (`cfitiso`, `CCfits`, and\n    `wcs`) do not need version numbers. If placed in different\n    directories then the `cfitsio_lib_dirs`, `ccfits_lib_dirs`,\n    and (possibly) `gfortran_lib_dirs` values should be set\n    appropriately.\n\n 3. or point to the XSPEC libraries provided by\n    [CIAO](http://cxc.harvard.edu/ciao/). In this case the\n    `wcs` library does not need to be specified because of\n    the way the XSPEC models-only version was built with\n    CIAO.\n\n        xspec_lib_dirs=$ASCDS_INSTALL/ots/lib\n        xspec_libraries=XSFunctions XSModel XSUtil XS\n\n    **NOTE** Although this is possible, it is strongly recommended\n    that either of the first two approaches is used instead. There\n    have been issues seen using the CIAO binaries on certain OS X\n    systems.\n\nIn all cases, the same version of `gfortran` should be used to build\nSherpa and XSPEC, in order to avoid possible incompatibilities.\n\nIf there are problems building, or using, the module, then the other\noptions may need to be set - in particular the `gfortran_lib_dirs` and\n`gfortran_libraries` settings.\n\nThe XSPEC module is designed for use with XSPEC versions 12.9.0 and\n12.8.2, although 12.9.0 is the preferred version. Use with other\nversions may lead to build problems or incomplete support for the\nXSPEC models.\n\nIn order for the module to work, the `HEADAS` environment variable has\nto be set in the shell from which the Python session is started.  For\nthe CIAO-XSPEC build, `HEADAS` should be set to\n`$ASCDS_INSTALL/ots/spectral`, otherwise it is the parent directory of\nthe `xspec_lib_dirs` directory.\n\nIn order to check that the module is working, importing the\n`sherpa.astro.ui` module will no-longer warn you that the\n`sherpa.astro.xspec` module is not available and you can use routines\nsuch as:\n\n    >>> from sherpa.astro import xspec\n    >>> xspec.get_xsversion()\n    '12.9.0m'\n\nOther customization options\n---------------------------\n\nSherpa supports other build configuration options that are required to\nsupport Sherpa build in specific environments, for instance when\nbuilding the [CIAO analysis system](http://cxc.harvard.edu/ciao/). \nThese options include:\n\n- building Sherpa against a local version of the `CIAO` `region` and `group`\n  libraries\n- specify additional `CFLAGS` options for the group library\n- building Sherpa against a local build of the `wcssubs` routines\n- change the default `./configure` command line\n\nThe `setup.cfg` file in the Sherpa source distribution contains more information\nabout these options.\n\nHistory\n=======\n\nSherpa is developed by the [Chandra X-ray\nObservatory](http://chandra.harvard.edu/) to provide fitting and modelling\ncapabilities to the [CIAO](http://cxc.harvard.edu/ciao/) analysis package. It\nhas been released onto [GitHub](https://github.com/sherpa/sherpa) for users to\nextend (whether to other areas of Astronomy or in other domains).\n\nRelease History\n---------------\n\n4.9.1: 01 August 2017 [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.825839.svg)](https://doi.org/10.5281/zenodo.825839)\n\n4.9.0: 27 January 2017 [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.260416.svg)](https://doi.org/10.5281/zenodo.260416)\n\n4.8.2: 23 September 2016 [![DOI](https://zenodo.org/badge/DOI/10.5281/zenodo.154744.svg)](https://doi.org/10.5281/zenodo.154744)\n\n4.8.1: 15 April 2016 [![DOI](https://zenodo.org/badge/doi/10.5281/zenodo.49832.svg)](http://dx.doi.org/10.5281/zenodo.49832)\n\n4.8.0: 27 January 2016 [![DOI](https://zenodo.org/badge/doi/10.5281/zenodo.45243.svg)](http://dx.doi.org/10.5281/zenodo.45243)",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://cxc.harvard.edu/sherpa/",
    "keywords": "",
    "license": "GNU GPL v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sherpa",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/sherpa/",
    "release_url": "https://pypi.org/project/sherpa/4.9.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Modeling and fitting package for scientific data analysis",
    "version": "4.9.1"
  },
  "releases": {
    "4.9.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e61dcc59bd8bfef26217ec3943e44fa2",
          "sha256": "30b55df0e0f442459913df15538be9af3c3797e366eae39e88cc6da6188892d1"
        },
        "downloads": 9,
        "filename": "sherpa-4.9.0-1.tar.gz",
        "has_sig": false,
        "md5_digest": "e61dcc59bd8bfef26217ec3943e44fa2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8770038,
        "upload_time": "2017-02-01T15:30:36",
        "url": "https://files.pythonhosted.org/packages/22/cb/da4222017bb99dcbaa13deb20ca30bf9703f72f253046bcb83e356b97e6c/sherpa-4.9.0-1.tar.gz"
      }
    ],
    "4.9.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bc86d545e5d7764b1601e7fe0d8e76a6",
          "sha256": "f5de57f99c65c2e804d9526ae45766e2b9f95bc21ba1285681872b001ec7389a"
        },
        "downloads": 0,
        "filename": "sherpa-4.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bc86d545e5d7764b1601e7fe0d8e76a6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8794513,
        "upload_time": "2017-08-03T13:59:46",
        "url": "https://files.pythonhosted.org/packages/f9/16/5fbb1b4e0f2beec3ed6b8d32ee914fe339cdf9b70c74df5f7861b2a2faef/sherpa-4.9.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "bc86d545e5d7764b1601e7fe0d8e76a6",
        "sha256": "f5de57f99c65c2e804d9526ae45766e2b9f95bc21ba1285681872b001ec7389a"
      },
      "downloads": 0,
      "filename": "sherpa-4.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bc86d545e5d7764b1601e7fe0d8e76a6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8794513,
      "upload_time": "2017-08-03T13:59:46",
      "url": "https://files.pythonhosted.org/packages/f9/16/5fbb1b4e0f2beec3ed6b8d32ee914fe339cdf9b70c74df5f7861b2a2faef/sherpa-4.9.1.tar.gz"
    }
  ]
}