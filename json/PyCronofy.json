{
  "info": {
    "author": "Venuebook Dev Team (Dan Pozmanter et al)",
    "author_email": "dev@venuebook.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## pycronofy ##\n\n[![Build Status](https://travis-ci.com/venuebook/pycronofy.svg?token=j1A1J2RZ8nCwcqmzbYLx&branch=master)](https://travis-ci.com/venuebook/pycronofy)\n\nA python library for [Cronofy](http://www.cronofy.com)\n\nInspired by [Cronofy-Ruby](https://github.com/cronofy/cronofy-ruby)\n\n[Developer API](http://www.cronofy.com/developers/api)\n\n**Installation:**\n\n(unless performing a system wide install, it's recommended to install inside of a virtualenv)\n\n```bash\n\n# Install via pip:\npip install pycronofy\n\n# Install via setup.py:\npip install -r requirements.txt # Install core & dependencies for tests\npython setup.py install\n```\n\n**Usage:**\n\n```python\nimport datetime\nimport uuid\nimport pycronofy\n\n# Example timezone id\ntimezone_id = 'US/Eastern'\n\n#######################\n# Authorization:\n#######################\n\n### With a personal access token\ncronofy = pycronofy.Client(access_token=YOUR_TOKEN) # Using a personal token for testing.\n\n### With OAuth\n# Initial authorization\ncronofy = pycronofy.Client(client_id=YOUR_CLIENT_ID, client_secret=YOUR_CLIENT_SECRET)\n\nurl = cronofy.user_auth_link('http://yourwebsite.com')\nprint('Go to this url in your browser, and paste the code below')\nprint(url)\ncode = input('Paste Code Here: ') # raw_input() for python 2.\nauth = cronofy.get_authorization_from_code(code)\nprint(auth)\n# get_authorization_from_code updates the state of the cronofy client. It also returns\n# the authorization tokens (and expiration) in case you need to store them.\n# If that is the case, you will want to initiate the client as follows:\ncronofy = pycronofy.Client(\n    client_id=YOUR_CLIENT_ID,\n    client_secret=YOUR_CLIENT_SECRET,\n    access_token=auth['access_token'],\n    refresh_token=auth['refresh_token'],\n    token_expiration=auth['token_expiration']\n)\n\n# Check if authorization is expired:\ncronofy.is_authorization_expired()\n\n# Refresh\n# Refresh requires the client id and client secret be set.\nauth = cronofy.refresh_authorization()\nprint(auth)\n\n# Revoke\ncronofy.revoke_authorization()\n\n#######################\n# Getting account info\n#######################\n\nprint(cronofy.account())\n\n#######################\n# Getting profiles\n#######################\n\nfor profile in cronofy.list_profiles():\n    print(profile)\n\n#######################\n# Getting calendars\n#######################\n\nprint(cronofy.list_calendars())\n\n#######################\n# Getting events\n#######################\n\n# Dates/Datetimes must be in UTC\n# For from_date, to_date, start, end, you can pass in a datetime object\n# or an ISO 8601 datetime string.\n# For example:\nexample_datetime_string = '2016-01-06T16:49:37Z' #ISO 8601.\n\n# To set to local time, pass in the tzid argument.\nfrom_date = (datetime.datetime.utcnow() - datetime.timedelta(days=2))\nto_date = datetime.datetime.utcnow()\nevents = cronofy.read_events(calendar_ids=(YOUR_CAL_ID,),\n    from_date=from_date,\n    to_date=to_date,\n    tzid=timezone_id # This argument sets the timezone to local, vs utc.\n)\n\n# Automatic pagination through an iterator\nfor event in events:\n    print('%s (From %s to %s, %i attending)' %\n        (event['summary'], event['start'], event['end'], len(event['attendees'])))\n\n# Treat the events as a list (holding the current page only).\nprint(events[2])\nprint(len(events))\n\n# Alternatively grab the actual list object for the current page:\npage = events.current_page()\nprint(page[1])\n\n# Manually move to the next page:\nevents.fetch_next_page()\n\n# Access the raw data returned by the request:\nevents.json()\n\n# Retrieve all data in a list:\n# Option 1:\nall_events = [event for event in cronofy.read_events(calendar_ids=(YOUR_CAL_ID,),\n    from_date=from_date,\n    to_date=to_date,\n    tzid=timezone_id)\n]\n\n# Option 2:\nall_events = cronofy.read_events(calendar_ids=(YOUR_CAL_ID,),\n    from_date=from_date,\n    to_date=to_date,\n    tzid=timezone_id\n).all()\n\n#######################\n# Free/Busy blocks\n#######################\n\n# Essentially the same as reading events.\n\nfree_busy_blocks = cronofy.read_free_busy(calendar_ids=(YOUR_CAL_ID,),\n    from_date=from_date,\n    to_date=to_date\n)\n\nfor block in free_busy_blocks:\n    print(block)\n\n#######################\n# Creating a test event\n#######################\n\n# Create a test event with local timezone.\n# (Note datetime objects or datetime strings must be UTC)\n# You need to supply a uuid, most likely from your system.\ntest_event_id = 'example-%s' % uuid.uuid4(),\nevent = {\n    'event_id': test_event_id,\n    'summary': 'Test Event', # The event title\n    'description': 'Discuss proactive strategies for a reactive world.',\n    'start': datetime.datetime.utcnow(),\n    'end': (datetime.datetime.utcnow() + datetime.timedelta(hours=1)),\n    'tzid': timezone_id,\n    'location': {\n        'description': 'My Desk!',\n    },\n}\ncronofy.upsert_event(calendar_id=cal['calendar_id'], event=event)\n\n#######################\n# Deletion\n#######################\n\ncronofy.delete_event(calendar_id=cal['calendar_id'], event_id=test_event_id)\n\n# Deletes all managed events (events inserted via Cronofy) for all user calendars.\ncronofy.delete_all_events()\n\n# Deletes all managed events for the specified user calendars.\ncronofy.delete_all_events(calendar_ids=(CAL_ID,))\n\n#######################\n# Notification channels\n#######################\n\n# Note this will only work with Oauth, not with a personal access token.\n\nchannel = cronofy.create_notification_channel('http://example.com',\n    calendar_ids=(cal['calendar_id'],)\n)\nprint(channel)\nprint(cronofy.list_notification_channels())\ncronofy.close_notification_channel(channel['channel_id'])\n\n#######################\n# Validation\n#######################\n\n# You can validate any pycronofy client call for:\n# Authentication, required arguments, datetime/date string format.\n# A PyCronofyValidationError will be thrown if there is an error.\n# Some examples:\n\ntry:\n    cronofy.validate('create_notification_channel', 'http://example.com',\n        calendar_ids=(cal['calendar_id'],)\n    )\nexcept pycronofy.exceptions.PyCronofyValidationError as e:\n    print(e.message)\n    print(e.fields)\n    print(e.method)\n\n#######################\n# Debugging\n#######################\n\n# All requests will call response.raise_on_status if the response is not OK or ACCEPTED.\n# You can catch the exception and access\n\ntry:\n    cronofy.upsert(event(calendar_id='ABC', event=malformed_event))\nexcept pycronofy.exceptions.PyCronofyRequestError as e:\n    print(e.response.reason) # Error Message\n    print(e.response.text) # Response Body\n    print(e.request.method) # HTTP Method\n    print(e.request.headers) # Headers\n    print(e.request.url) # URL and Get Data\n    print(e.request.body) # Post Data\n\n# pycronofy provides a \"set_request_hook\" argument to make use of requests' event hooks.\n\ndef on_request(response, *args, **kwargs):\n    \"\"\"\n        \"If the callback function returns a value,\n        it is assumed that it is to replace the data that was passed in.\n        If the function doesn\u2019t return anything, nothing else is effected.\"\n        http://docs.python-requests.org/en/latest/user/advanced/#event-hooks\n    \"\"\"\n    print('%s %s' % (response.request.method, response.url))\n    print(kwargs)\n\npycronofy.set_request_hook(on_request)\n```\n\n**Tests:**\n\n```\npy.test pycronofy --cov=pycronofy\n```\n\n**Dependencies:**\n\nCore library depends on ``requests``.\n\nTests depend on ``pytest, pytest-cov, responses``.\n\n**Notes:**\n\nIn the event of an insecure platform warning:\n\n* Install python >= 2.7.9\n* pip install requests\\[security\\] (you may need to install additional library packages)\n* Call ``requests.packages.urllib3.disable_warnings()`` in your code to suppress the warnings.\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/venuebook/pycronofy",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "PyCronofy",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/PyCronofy/",
    "release_url": "https://pypi.org/project/PyCronofy/1.0.0/",
    "requires_python": null,
    "summary": "Python library for Cronofy",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "744a9fc7e39bc1f3307975be85d48a9c",
          "sha256": "bb00384cbaff8348cd1f17960d47ea586fe6c140e9f2ea132b49ba6ada704191"
        },
        "downloads": 623,
        "filename": "PyCronofy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "744a9fc7e39bc1f3307975be85d48a9c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11616,
        "upload_time": "2016-08-04T02:35:07",
        "url": "https://files.pythonhosted.org/packages/67/eb/fe99026a3b5740ddd82611efb43f6b644522daf9b5e9cedc7fea7ae048d3/PyCronofy-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "744a9fc7e39bc1f3307975be85d48a9c",
        "sha256": "bb00384cbaff8348cd1f17960d47ea586fe6c140e9f2ea132b49ba6ada704191"
      },
      "downloads": 623,
      "filename": "PyCronofy-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "744a9fc7e39bc1f3307975be85d48a9c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 11616,
      "upload_time": "2016-08-04T02:35:07",
      "url": "https://files.pythonhosted.org/packages/67/eb/fe99026a3b5740ddd82611efb43f6b644522daf9b5e9cedc7fea7ae048d3/PyCronofy-1.0.0.tar.gz"
    }
  ]
}