{
  "info": {
    "author": "Emiliano Dalla Verde Marcozzi",
    "author_email": "edvm@msa.com.ar",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "SAW / SQLAlchemy Rap Wrapper\n============================\n\nAbout me:\n---------\n\nThis is a library that tries to make SQLAlchemy usage more easy. SQLAlchemy\ngives you a lot of different ways to acomplish what you want to do, and\nSAW tryies to give you 'one common and easy way to do a specific task' \nwithout interfering if you need to use all the power of SQLAlchemy. \n\nMy documentation is a doctest:\n------------------------------\n\nYou can learn about how to use me reading this doctest, and if you want\nto modify me, feel free to read my unittests, i think it'll be helpfull.\n\nYou can excecute me as a doctest using the script: *rundoctest* .\nFor example:\n    (bash)(saw)$: ./rundoctest\n\n\nIntroduction to saw, configuring the database and declaring a model:\n--------------------------------------------------------------------\n\nGenerally, (when using me) you'll be defining two things to work with \ndatabases:\n    * Database settings like what engine are you using (postgresql, oracle,\n      mysql, whatever), port, user, password, blah, blah, etc ...\n    * Your database model, as model we mean Table definitions, their\n      Columns, Relatinos, types, blah, blah, etc.\n\nLet's go with the first thing, define the database settings, we are going \nto use a sqlite db in memory:\n\n    >>> import saw \n    >>> db = saw.DB(name='doctest', engine='sqlite', in_memory=True)\n\nOur db doesnt have any tables, yet.\n\n    >>> assert len(db.tables.keys()) == 0\n\nLets define a Person model object that will be respresented as a Table\nin the database:\n\n    >>> 'Person' in db.tables\n    False\n\n    >>> class Person(db.Model):\n    ...\n    ...     __tablename__ = u'Person' \n    ...\n    ...     name = saw.Column(u'name',\n    ...                      saw.VARCHAR,\n    ...                      primary_key=True)\n    ...\n    ...     def __init__(self, name):\n    ...         self.name = name\n    ...\n    ...     def __repr__(self):\n    ...         return u'Person(\"%s\")' % self.name\n\n\nNow, create the new model/table defined above:\n\n    >>> db.create()\n    >>> 'Person' in db.tables\n    True\n\nInsert, query and delete registers\n----------------------------------\n\nWe can add a new person like:\n\n    >>> db.insert(Person(name='Foo'))\n\nWe can query the database like:\n\n    >>> with db.query as query:\n    ...     person = query(db.tables.Person).first()\n    ...     assert person is not None\n\nTo delete this person you can do like:\n\n    >>> db.delete(person)\n    >>> with db.query as query:\n    ...     assert query(db.tables.Person).first() is None\n\n\nThat's all! If you would like to know more about how to make more complex\nqueries, you can read:\n\nhttp://docs.sqlalchemy.org/en/rel_0_8/orm/query.html#sqlalchemy.orm.query.Query\n\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://pypi.python.org/pypi/saw/",
    "keywords": null,
    "license": "LICENSE.txt",
    "maintainer": null,
    "maintainer_email": null,
    "name": "saw",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/saw/",
    "release_url": "https://pypi.org/project/saw/0.1.2/",
    "requires_python": null,
    "summary": "Simple sqlalchemy wrapper",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3c1d7b4dfdf3ff0e0d7a4457cdf93a2e",
          "sha256": "179cfed88d1d572b6ee70c8a6f4ba77c585296453a304181338ffe5153f54b0d"
        },
        "downloads": 2265,
        "filename": "saw-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3c1d7b4dfdf3ff0e0d7a4457cdf93a2e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5834,
        "upload_time": "2013-06-26T02:33:15",
        "url": "https://files.pythonhosted.org/packages/0e/de/6598c1ad5b68b0e9e8b264c0036e245b65f1c054556a3862a38d18520132/saw-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a680a502c3e54effc98d458fb157a53e",
          "sha256": "359c237211ec528c6619d6340b5cd882664bed08ff4868825ff6f5b77c018b40"
        },
        "downloads": 2291,
        "filename": "saw-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a680a502c3e54effc98d458fb157a53e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6117,
        "upload_time": "2013-07-26T15:14:44",
        "url": "https://files.pythonhosted.org/packages/9f/87/9f5dcd6ce78e87438e67cc7d17dea6be8f7ea882413914bde043a587ff77/saw-0.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a680a502c3e54effc98d458fb157a53e",
        "sha256": "359c237211ec528c6619d6340b5cd882664bed08ff4868825ff6f5b77c018b40"
      },
      "downloads": 2291,
      "filename": "saw-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a680a502c3e54effc98d458fb157a53e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6117,
      "upload_time": "2013-07-26T15:14:44",
      "url": "https://files.pythonhosted.org/packages/9f/87/9f5dcd6ce78e87438e67cc7d17dea6be8f7ea882413914bde043a587ff77/saw-0.1.2.tar.gz"
    }
  ]
}