{
  "info": {
    "author": "Thomas Huang",
    "author_email": "lyanghwy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "dbpy\n#####\n\n\n\ndbpy is database abstration layer wrote by python. The design is inspired by `webpy db <https://github.com/webpy/webpy>`_ and `drupal database <https://www.drupal.org/developing/api/database>`_ . If like the simple db abstration layer like ``tornado db`` or ``webpy db``, it is worth to try.\n\n\n`\u4e2d\u6587|chinese <https://github.com/thomashuang/dbpy/blob/master/README_CN.rst>`_\n\nchanges\n==========\n\n#. Add pymysql adapter\n\n\n\nInstall the extension with the following command::\n\n    $ easy_install pymysql\n\nor alternatively if you have pip installed::\n\n\n    $ pip install pymysql\n\nFeatues\n================\n\n#. silmple and flexible\n#. graceful and useful sql query builder.\n#. thread-safe connection pool\n#. supports read/write master-slave mode\n#. supports transaction\n\nThe Projects use dbpy\n======================\n\n\n`Lilac (Distributed Scheduler Task System) <https://github.com/thomashuang/Lilac>`_\n\n.. contents::\n    :depth: 4\n\n\n\n\nInstall\n==============\n\nInstall the extension with the following command::\n\n    $ easy_install dbpy\n\nor alternatively if you have pip installed::\n\n\n    $ pip install dbpy\n\n\nor clone it form github then run the command in shell:\n\n.. code-block:: bash\n\n    cd db # the path to the project\n    python setup.py install\n\nDevelopment\n===========\n\nFork or download it, then run:\n\n.. code-block:: bash \n\n    cd db # the path to the project\n    python setup.py develop\n\n\n\nCompatibility\n=============\n\nBuilt and tested under Python 2.7 \n\n\nDB API\n========\n\n\nHave a look:\n\n.. code-block:: python\n\n    config = {\n            'passwd': 'test',\n            'user': 'test',\n            'host': 'localhost',\n            'db': 'test',\n            'max_idle' : 5*60\n        }\n\n    db.setup(config,  minconn=5, maxconn=10,  \n        adapter='mysql', key='defalut', slave=False)\n\n    db.execute('show tables')\n\n\n\nsetup\n---------\n\n:config: the connection basic config, the all of arguements of MySQLDB#connect is acceptable\u3002 the ``max_idle`` is the connect timeout setting that is used to reconnection when connection is timeout, default is 10 seconds.\n:minconn: the minimum connections for the connection pool, default is 5.\n:maxconn: the maximum connections for the connection pool, defalut is 10.\n:adapter: the database driver adapter name, currently supports mysql (MySQLdb, pymysql) only.\n:key: the database idenfify for database,  default database is \"default\"\n:slave: if set to true, the database will be register as a slave database. make sure you setup a master firstly.\n\n\n.. code-block:: python\n\n    config = {\n            'passwd': 'test',\n            'user': 'test',\n            'host': 'localhost',\n            'db': 'test',\n            'max_idle' : 5*60\n        }\n\n    db.setup(config, key='test')\n    config['host'] = 'test.slave'\n    # set a slave, and now the master can only to write\n    db.setup(config, key='test', slave=True) \n\n    config['host'] = 'test.slave2'\n    # add more slave for 'test'\n    db.setup(config, key='test', slave=True)\n\n\n    config['host'] = 'host2'\n    config['db'] = 'social'\n    # set another database\n    db.setup(config, key='social', slave=True)\n\nquery\n-------\n\n\n\nquery api is used for reading database operation, like select..., show tables, if you wanna update your database please use execute api.\n\nquery(sql, args=None, many=None, as_dict=False, key='default'):\n\n:sql: the raw sql\n:args: the args for sql arguement to prepare execute.\n:many: when set to a greater zero integer, it will use fetchmany then yield return a generator, otherwise a list.\n:as_dict: when set to true, query api will return the database result as dict row, otherwise tuple row.\n:key: the idenfify of database.\n\n.. code-block:: python\n\n    print db.query('SELECT 1')\n    # > ((1L,),)\n\n    # use social db\n    print db.query('SELECT 1', key='social')\n    # > ((1L,),)\n\n    print db.query('SELECT * FROM users WHERE uid=%s and name=%s', (1, 'user_1'))\n    # > ((1L, u'user_1'),)\n\n    # Wanna return dict row\n    print db.query('SELECT * FROM users WHERE uid=%s and name=%s', \n                (1, 'user_1'), as_dict=True)\n    # > ({'uid': 1L, 'name': u'user_1'},)\n\n    # Use fetchmany(many) then yeild, Return generator\n    res = db.query('SELECT * FROM users WHERE uid=%s and name=%s', \n                    (1, 'user_1'), many=5, as_dict=True)\n    print res\n    print res.next()\n    # > <generator object _yield at 0x7f818f4b6820>\n    # > {'uid': 1L, 'name': u'user_1'}\n\n\nexecute\n--------\n\nthe api is used for writing database operation, like insert, update, delete.. if you wanna read query your database please use query api.\n\nexecute(sql, args=None, key='default'):\n\n\n:sql: the raw sql\n:args: the args for sql arguement to prepare execute.\n:key: the idenfify of database.\n\n\nReturn::\n\n  it returns last_insert_id when sql is insert statement, otherwise rowcount\n\n.. code-block:: python\n    \n    db.execute('DROP TABLE IF EXISTS `users`')\n    db.execute(\"\"\"CREATE TABLE `users` (\n             `uid` int(10) unsigned NOT NULL AUTO_INCREMENT,\n            `name` varchar(20) NOT NULL,\n            PRIMARY KEY (`uid`))\"\"\")\n    \n    # when inset mutil-values\uff0cthe api will call executemany\n    db.execute('INSERT INTO users VALUES(%s, %s)', [(10, 'execute_test'), (9, 'execute_test')])\n    # > 9\n    db.execute('DELETE FROM users WHERE name=%s', ('execute_test',))\n    # > 2\n\n\n    # use social db\n    db.execute('delete from events where created_at<%s', (expired, ), key='social')\n    # > 10\n\nselect\n-----------\n\nthe api is used for select sql database query.\n\nselect(table, key='default'):\n\n:table: the table name\n:key: the idenfify of database \n\nselect all\n~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    db.select('users')\n    # > SELECT * FROM `users`\n\nspecific columns\n~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    db.select('users').fields('uid', 'name')\n    # > SELECT `uid`, `name` FROM `users`\n\n\nexecute\n~~~~~~~~~~~~~~~~\n\nwhen you already build your sql, try execute api to fetch your database result.\n\nexecute(many=None, as_dict=False):\n\n:many: when set to a greater zero integer, it will use fetchmany then yield return a generator, otherwise a list.\n:as_dict: when set to true, query api will return the database result as dict row, otherwise tuple row.\n\n.. code-block:: python\n\n    q = db.select('users').fields('uid', 'name')\n    res = q.execute()\n    print res\n    # > ((1L, u'user_1'), (2L, u'user_2'), (3L, u'user_3'), (4L, u'user_4'), (5L, None))\n\n    res = q.execute(many=2, as_dict=True)\n    print res\n    print res.next()\n    # > <generator object _yield at 0x7f835825e820>\n    # > {'uid': 1L, 'name': u'user_1'}\n\n\nCondition\n~~~~~~~~~~~\n\nIt is time to try more complex select query.\n\ncondition(field, value=None, operator=None):\n\n:field: the field of table \n:value: the value of field, defaul is None (\"field is null\")\n:operator: the where operator like BETWEEN, IN, NOT IN, EXISTS, NOT EXISTS, IS NULL, IS NOT NULL, LIKE, NOT LIKE, =, <, >, >=, <=, <> and so on.\n\n\nsimple \n^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    db.select('users').condition('uid', 1) # condition('uid', 1, '=')\n    # > SELECT * FROM `users`\n    # > WHERE  `uid` = %s \n\n\nin \n^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n\n    db.select('users').condition('uid', (1, 3)) # condition('uid', [1, 3]) \u4e00\u6837\n    # > SELECT * FROM `users`\n    # > WHERE  `uid` IN  (%s, %s) \n\nbetween \n^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    db.select('users').condition('uid', (1, 3), 'between')\n    # > SELECT * FROM `users`\n    # > WHERE  `uid` BETWEEN %s AND %s \n\n\nmulti condition\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    db.select('users').condition('uid', 1).condition('name', 'blabla')\n    # > SELECT * FROM `users`\n    # > WHERE  `uid` = %s AND `name` = %s \n\nor condition\n^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    or_cond = db.or_().condition('uid', 1).condition('name', 'blabla')\n    db.select('users').condition(or_cond).condition('uid', 1, '<>')\n    # > SELECT * FROM `users`\n    # > WHERE  ( `uid` = %s OR `name` = %s ) AND `uid` <> %s \n\n\n\norder by\n~~~~~~~~~\n\n.. code-block:: python\n\n    db.select('users').order_by('name')\n    # > SELECT * FROM `users`\n    # > ORDER BY `name`\n\n    db.select('users').order_by('name', 'DESC')\n    # > SELECT * FROM `users`\n    # > ORDER BY `name` DESC\n\n    db.select('users').order_by('name', 'DESC').order_by('uid')\n    # > SELECT * FROM `users`\n    # > ORDER BY `name` DESC, `uid`\n\n\n\ndistinct\n~~~~~~~~~\n\n.. code-block:: python\n\n    db.select('users').distinct().condition('uid', 1)\n    # > SELECT DISTINCT * FROM `users`\n    # > WHERE  `uid` = %s \n\n    db.select('users').fields('uid', 'name').distinct().condition('uid', 1)\n    # > SELECT DISTINCT `uid`, `name` FROM `users`\n    # > WHERE  `uid` = %s \n\n\ngroup by\n~~~~~~~~~\n\n.. code-block:: python\n\n    db.select('users').group_by('name', 'uid')\n    # > SELECT * FROM `users`\n    # > GROUP BY `name`, `uid`\n\n\nlimit and offset\n~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    db.select('users').limit(2).offset(5)\n    # > SELECT * FROM `users`\n    # > LIMIT 2 OFFSET 5\n\nnull condition\n~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    db.select('users').is_null('name').condition('uid', 5)\n    # > SELECT * FROM `users`\n    # > WHERE  `name` IS NULL  AND `uid` = %s \n\n    db.select('users').is_not_null('name').condition('uid', 5)\n    # > SELECT * FROM `users`\n    # > WHERE  `name` IS NOT NULL  AND `uid` = %s \n\n    db.select('users').condition('name', None)\n    # > SELECT * FROM `users`\n    # > WHERE  `name` IS NULL  \n\n\ncomplex conditions\n-------------------\n\nusing db.and_(), db.or_(), we can build complex where conditions:\n\n.. code-block:: python\n\n    or_cond = db.or_().condition('field1', 1).condition('field2', 'blabla')\n    and_cond = db.and_().condition('field3', 'what').condition('field4', 'then?')\n    print db.select('table_name').condition(or_cond).condition(and_cond)\n\n    # > SELECT * FROM `table_name`\n    # > WHERE  ( `field1` = %s OR `field2` = %s ) AND ( `field3` = %s AND `field4` = %s ) \n\nexpr\n------------\n\nif you wanna use the aggregate functions like sum, count, please use ``erpr`` :\n\n.. code-block:: python\n\n    from  db import expr\n\n    db.select('users').fields(expr('count(*)'))\n    # > SELECT count(*) FROM `users`\n\n    db.select('users').fields(expr('count(uid)', 'total'))\n    # > SELECT count(uid) AS `total` FROM `users`\n\n\n\ninsert\n-----------\n\nThe ``insert`` api is used for building insert into sql statement.\n\ninsert(table, key='default'):\n\n:table: the table name\n:key: the idenfify of database \n\n.. code-block:: python\n\n    q = db.insert('users').values((10, 'test_insert'))\n    # > INSERT INTO `users` VALUES(%s, %s)\n    print q._values\n    # > [(10, 'test_insert')]\n\n\n    q = db.insert('users').fields('name').values({'name': 'insert_1'}).values(('insert_2',))\n    # > INSERT INTO `users` (`name`) VALUES(%s)\n    print q._values\n    # > [('insert_1',), ('insert_2',)]\n\n\nWhen you use ``execute`` api to get result, it will reutrn the ``last insert id``\uff1a\n\n.. code-block:: python\n    \n    \n    print q.execute()\n    # > 2\n\n\n\nupdate\n-----------\n\nThe ``update`` api is used for building update sql statement.\n\nupdate(table, key='default'):\n\n:table: the table name\n:key: the idenfify of database \n\n\nmset and set\uff1a\n\n:mset: the value must be dict tpye, that sets mutil-fileds at once time.\n:set(column, value): set one field one time.\n\nthe where conditions please see `select`_ for more information.\n\n\n.. code-block:: python\n    \n    \n    db.update('users').mset({'name':None, 'uid' : 12}).condition('name','user_1')\n    # > UPDATE `users` SET `name` = %s, `uid` = %s WHERE  `name` = %s \n\n    q = (db.update('users').set('name', 'update_test').set('uid', 12)\n        .condition('name', 'user_2').condition('uid', 2)) # .execute()\n    print q.to_sql()\n    # > UPDATE `users` SET `name` = %s, `uid` = %s WHERE  `name` = %s AND `uid` = %s \n  \n\n\nWhen you use ``execute`` api to get result, it will reutrn the ``rowcount``\uff1a\n\n\n.. code-block:: python\n    \n    \n    print q.execute()\n    # > 2\n\nlimit\n~~~~~~~~~\n\n\n\nYou can use limit api to lim the quantity of update.\n\n\n.. code-block:: python\n    \n    db.update('users').mset({'name':None, 'uid' : 12}).condition('name','user_1').limit(5)\n    # > UPDATE `users` SET `name` = %s, `uid` = %s WHERE  `name` = %s  LIMIT 5\n\ndelete\n-----------\n\n\nThe ``delete`` api is used for building DELETE FROM sql statement.\n\ndelete(table, key='default'):\n\n:table: the table name\n:key: the idenfify of database \n\nthe where conditions please see `select`_ for more information.\n\n.. code-block:: python\n    \n    db.delete('users').condition('name','user_1')\n    # > DELETE FROM `users` WHERE  `name` = %s \n\t\nWhen you use ``execute`` api to get result, it will reutrn the ``rowcount``\uff1a\n\n.. code-block:: python\n    \n    \n    print q.execute()\n    # > 2\n\n\nto_sql and str\n---------------------\n\nyou can use to_sql or __str__ method to the objects of  ``select``, ``insert``, ``update``, ``delete`` to print the sql you build.\n\n\n.. code-block:: python\n    \n\n    q = (db.update('users').set('name', 'update_test').set('uid', 12)\n            .condition('name', 'user_2').condition('uid', 2))\n    print q.to_sql()\n    print q\n    # > UPDATE `users` SET `name` = %s, `uid` = %s WHERE  `name` = %s AND `uid` = %s \n\n\ntransaction\n------------\n\ntransaction(table, key='default'):\n\n:table: the table name\n:key: the idenfify of database \n\n\nThe simple transaction done all or do nothing, you cann't set savepoint. \n\n\n\n.. code-block:: python\n    \n\n    # with context\n    with db.transaction() as t:\n        t.delete('users').condition('uid', 1).execute()\n        (t.update('users').mset({'name':None, 'uid' : 12})\n            .condition('name','user_1').execute())\n\n\n    # the normal way\n    t = db.transaction()\n    t.begin()\n    t.delete('users').condition('uid', 1).execute()\n    (t.update('users').mset({'name':None, 'uid' : 12})\n        .condition('name','user_1').execute())\n\n    #if failed will rollback\n    t.commit()\n\n.. note:: when uses begin must be combine with commit\uff0cotherwise the connection will not return connection pool.suggets to use ``with context``\n\n\nsimple orm\n-----------\n\nthe orm demo  `samples <https://github.com/thomashuang/dbpy/blob/master/samples>`_\n\n.. code-block:: python\n    \n    import model\n    from orm import Backend\n    import db\n\n    db.setup({ 'host': 'localhost', 'user': 'test', 'passwd': 'test', 'db': 'blog'})\n\n\n    user = Backend('user').find_by_username('username')\n    if user and user.check('password'):\n        print 'auth'\n\n    user = model.User('username', 'email', 'real_name', 'password', \n            'bio', 'status', 'role')\n    if Backend('user').create(user):\n        print 'fine'\n\n    user = Backend('user').find(12)\n    user.real_name = 'blablabla....'\n    if Backend('user').save(user):\n        print 'user saved'\n\n    if Backend('user').delete(user):\n        print 'delete user failed'\n\n\n    post = model.Post('title', 'slug', 'description', 'html', 'css', 'js', \n            'category', 'status', 'comments', 'author')\n    if not Backend('post').create(post):\n        print 'created failed'\n\nFuture\n--------\n\n\nPersonal idea:\n\n#. add ``join``  for select api \n#. add a schema class for creating or changing table.\n#. add some api for mysql individual sql like ``replace`` or ``duplicate update``\n#. improve connection pool.\n\n\nLICENSE\n=======\n\n    Copyright (C) 2014-2015 Thomas Huang\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, version 2 of the License.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/thomashuang/dbpy",
    "keywords": "database abstraction layer for pythoneer(orm,database)",
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dbpy",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dbpy/",
    "release_url": "https://pypi.org/project/dbpy/0.1.2/",
    "requires_python": null,
    "summary": "database abstraction layer for pythoneer",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.0": [],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c452b4983e7c26b0ce776e23f5429028",
          "sha256": "adcce223e1b4056e91b3902ddcfb4b31fdd4f2f3c4232c471e4d691f943a7219"
        },
        "downloads": 1673,
        "filename": "dbpy-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c452b4983e7c26b0ce776e23f5429028",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15116,
        "upload_time": "2015-03-09T03:27:13",
        "url": "https://files.pythonhosted.org/packages/8e/34/95a79dba8c788782ddee184b72f934b151b686b4b2b13ab0a2160196336a/dbpy-0.1.1.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b6939d9cdeb431b0285204bb9559bcbe",
          "sha256": "c03e64f3084941b703d9b70297999c1040a0f3bb25ef61a065aae064c48f0f4c"
        },
        "downloads": 1150,
        "filename": "dbpy-0.1.1.zip",
        "has_sig": false,
        "md5_digest": "b6939d9cdeb431b0285204bb9559bcbe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 34546,
        "upload_time": "2015-03-09T03:27:10",
        "url": "https://files.pythonhosted.org/packages/c3/77/3cf8ee0259be928b12c0b9c89063891addc4f09a4371e932c22c203fcc21/dbpy-0.1.1.zip"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bb499018603672b2b73a677f0d4b67ca",
          "sha256": "fc9c5daa21756a71077ebea67b57a6520742541b4afaba1f22a32add85a07e40"
        },
        "downloads": 2040,
        "filename": "dbpy-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bb499018603672b2b73a677f0d4b67ca",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15502,
        "upload_time": "2015-07-26T05:37:54",
        "url": "https://files.pythonhosted.org/packages/f0/e1/c41e71eaf6b316f078e5fad3cfe61a5e0402c3fdb2a614cb096d9d825176/dbpy-0.1.2.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "da586597f4a7a50e262af68c00c0d308",
          "sha256": "f03bed4ab2ff9e56b36b7c933638453d25e8fb45a5bbacfdeaa1180e9b9d151c"
        },
        "downloads": 892,
        "filename": "dbpy-0.1.2.zip",
        "has_sig": false,
        "md5_digest": "da586597f4a7a50e262af68c00c0d308",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 37109,
        "upload_time": "2015-07-26T05:18:14",
        "url": "https://files.pythonhosted.org/packages/4f/d8/7f7a375c2e31983b78295bf1ba96d3b44ae13bf8f427849e2777b7b74ac8/dbpy-0.1.2.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "bb499018603672b2b73a677f0d4b67ca",
        "sha256": "fc9c5daa21756a71077ebea67b57a6520742541b4afaba1f22a32add85a07e40"
      },
      "downloads": 2040,
      "filename": "dbpy-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "bb499018603672b2b73a677f0d4b67ca",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 15502,
      "upload_time": "2015-07-26T05:37:54",
      "url": "https://files.pythonhosted.org/packages/f0/e1/c41e71eaf6b316f078e5fad3cfe61a5e0402c3fdb2a614cb096d9d825176/dbpy-0.1.2.tar.gz"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "da586597f4a7a50e262af68c00c0d308",
        "sha256": "f03bed4ab2ff9e56b36b7c933638453d25e8fb45a5bbacfdeaa1180e9b9d151c"
      },
      "downloads": 892,
      "filename": "dbpy-0.1.2.zip",
      "has_sig": false,
      "md5_digest": "da586597f4a7a50e262af68c00c0d308",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 37109,
      "upload_time": "2015-07-26T05:18:14",
      "url": "https://files.pythonhosted.org/packages/4f/d8/7f7a375c2e31983b78295bf1ba96d3b44ae13bf8f427849e2777b7b74ac8/dbpy-0.1.2.zip"
    }
  ]
}