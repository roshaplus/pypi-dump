{
  "info": {
    "author": "Richard Cook",
    "author_email": "rcook@rcook.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "IBT: Isolated Build Tool\r\n========================\r\n\r\nProject- and build-oriented tool for working with\r\n`Docker <https://www.docker.com/>`__ images and containers\r\n\r\nWhat's the point of this tool?\r\n------------------------------\r\n\r\nDocker is great for building isolated environments for builds or\r\napplications. For my tastes, however, there are a few usability issues\r\nassociated with it:\r\n\r\n-  The commands are fiddly to use and difficult to remember\r\n-  Docker containers run as root by default resulting in files created\r\n   on the host as the root user, instead of the current user\r\n-  It's too easy to leave intermediate images and containers lying\r\n   around\r\n\r\nNote that this is a very personal list of perceived shortcomings. If\r\nthese aren't issues for you, then don't use this tool!\r\n\r\nIBT makes Docker images and containers more development- and\r\nproject-focused. It encourages the following workflows:\r\n\r\n-  Editing of source files is carried out predominantly on the *host*\r\n   machine\r\n-  Building, running and debugging of targets is always carried out\r\n   within the Docker container\r\n-  Source code will typically be under the control of a VCS such as Git\r\n-  Source files should not be copied *en masse* into the container\r\n-  Output files from builds etc. should be exposed directly to the host\r\n\r\nYou'll notice that the commands strongly resemble those of\r\n`Vagrant <https://www.vagrantup.com/>`__. This is not completely\r\naccidental. The workflows described above strongly resemble Vagrant\r\nworkflows where ``up``, ``destroy``, ``run`` correspond closely to\r\n``up``, ``destroy`` and ``ssh``.\r\n\r\nInstallation\r\n------------\r\n\r\nEnsure you have a working `Python\r\n2.7 <https://www.python.org/downloads/>`__ installation:\r\n\r\n::\r\n\r\n    pip install --user ibt\r\n    env\r\n\r\nYou can also clone from this repository and perform a dev install:\r\n\r\n::\r\n\r\n    git clone https://github.com/rcook/ibt.git\r\n    cd ibt\r\n    pip install --user -e .\r\n    env\r\n\r\nOr run it within a virtual environment:\r\n\r\n::\r\n\r\n    git clone https://github.com/rcook/ibt.git\r\n    cd ibt\r\n    script/virtualenv\r\n    script/env pip install -e .\r\n    script/env ibt\r\n\r\nStandard commands\r\n-----------------\r\n\r\n-  ``destroy``: destroys the project's Docker image\r\n-  ``help``: display help\r\n-  ``info``: shows system and project information\r\n-  ``run``: runs a command inside a Docker container\r\n-  ``script``: runs a script inside a Docker container\r\n-  ``shell``: runs an interactive shell inside a Docker container\r\n-  ``up``: creates Docker image for the project after optionally\r\n   building base Docker image\r\n\r\n``Ibtfile`` settings\r\n--------------------\r\n\r\nConfiguration for any given project is driven by the contents of the\r\n``Ibtfile`` settings file which should be placed in the root directory\r\nof the project. Alternatively, an ``.ibtprojects`` file placed in the\r\nuser's home directory can be used to specify the location of the\r\n``Ibtfile`` for zero or more project root directories for situations\r\nwhere the IBT configuration must be kept out of the source tree.\r\n\r\n-  ``aliases``: (optional) one or more project-specific command aliases\r\n-  ``docker``: specifies base Docker image information for project\r\n   including\r\n-  ``env_vars``: (optional) one or more environment variables to define\r\n   inside container ``image`` and ``build``\r\n-  ``ports``: (optional) one or more host port-container port pairs to\r\n-  ``container-project-dir``: (optional) specifies directory to which\r\n   project directory is mapped in container configure port forwarding\r\n-  ``volumes``: (optional) one or more additional volumes to mount\r\n   inside container\r\n\r\nSample project\r\n--------------\r\n\r\nCreate Docker images\r\n~~~~~~~~~~~~~~~~~~~~\r\n\r\nAll build commands will run inside a fully isolated Debian-based Docker\r\ncontainer as specified by the project configuration in ``Ibtfile``.\r\nFirst, create the base Docker images:\r\n\r\n::\r\n\r\n    $ cd docker-images/debian-gcc\r\n    $ make build\r\n    $ cd ../debian-gcc-python\r\n    $ make build\r\n\r\nThis creates ``debian-gcc`` which contains basic build tools, CMake and\r\ngdb and ``debian-gcc-python`` which extends this with the addition of\r\nPython 2.7.\r\n\r\nAliases\r\n~~~~~~~\r\n\r\nOnce this is done, the following commands (configured as aliases in\r\n``Ibtfile``) can be run to configure/make/run the project code:\r\n\r\n-  ``ibt cmake``: generates CMake build directory\r\n-  ``ibt make``: runs ``make`` inside CMake build directory\r\n-  ``ibt exec``: runs target binary\r\n-  ``ibt debug``: starts gdb and loads target binary\r\n\r\nExample workflow\r\n~~~~~~~~~~~~~~~~\r\n\r\nSee contents of ``example`` subdirectory.\r\n\r\n::\r\n\r\n    $ cd example/\r\n    $ ibt up\r\n    Building Docker image ibt-789dbc504a0690d786ddd43474dfbcc5\r\n    $ ibt cmake\r\n    -- The C compiler identification is GNU 5.4.0\r\n    -- The CXX compiler identification is GNU 5.4.0\r\n    -- Check for working C compiler: /usr/bin/cc\r\n    -- Check for working C compiler: /usr/bin/cc -- works\r\n    -- Detecting C compiler ABI info\r\n    -- Detecting C compiler ABI info - done\r\n    -- Detecting C compile features\r\n    -- Detecting C compile features - done\r\n    -- Check for working CXX compiler: /usr/bin/g++\r\n    -- Check for working CXX compiler: /usr/bin/g++ -- works\r\n    -- Detecting CXX compiler ABI info\r\n    -- Detecting CXX compiler ABI info - done\r\n    -- Detecting CXX compile features\r\n    -- Detecting CXX compile features - done\r\n    -- Configuring done\r\n    -- Generating done\r\n    -- Build files have been written to: /example/build\r\n    $ ibt make\r\n    Scanning dependencies of target hello-world\r\n    [ 50%] Building CXX object CMakeFiles/hello-world.dir/hello-world.cpp.o\r\n    [100%] Linking CXX executable hello-world\r\n    [100%] Built target hello-world\r\n    $ ibt exec first second third\r\n    Hello world\r\n    argc=4\r\n    argv[0] = ./hello-world\r\n    argv[1] = first\r\n    argv[2] = second\r\n    argv[3] = third\r\n    $ ibt status\r\n    IBT: Isolated Build Tool\r\n\r\n    Project information:\r\n      Project directory:   /home/user/src/ibt/example\r\n      Working directory:   /home/user/src/ibt/example\r\n      Project ID:          789dbc504a0690d786ddd43474dfbcc5\r\n      Configuration file:  /home/user/src/ibt/example/Ibtfile\r\n      Temporary directory: /home/user/src/ibt/example/.ibt\r\n    User information:\r\n      User:                user (1002)\r\n      Group:               user (1002)\r\n    Docker container information:\r\n      Docker image ID:     ibt-789dbc504a0690d786ddd43474dfbcc5\r\n      Project directory:   /example\r\n      Temporary directory: /example/.ibt\r\n    IBT status:\r\n      Temporary directory: exists\r\n      Docker image:        built\r\n\r\n    Project aliases:\r\n      cmake = run 'cd $IBTPROJECTDIR && mkdir -p build && cd build && cmake -DCMAKE_BUILD_TYPE=Debug ..'\r\n      debug = shell /bin/sh -c 'cd $IBTPROJECTDIR/build && gdb ./hello-world'\r\n      exec = run 'cd $IBTPROJECTDIR/build && ./hello-world'\r\n      make = run 'cd $IBTPROJECTDIR/build && make'\r\n\r\n    $ ibt destroy\r\n    Destroying Docker image ibt-789dbc504a0690d786ddd43474dfbcc5\r\n\r\nLicence\r\n-------\r\n\r\nReleased under MIT License\r\n\r\nCopyright \u00a9 2016, Richard Cook. All rights reserved.\r\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/rcook/ibt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ibt",
    "platform": "",
    "project_url": "https://pypi.org/project/ibt/",
    "release_url": "https://pypi.org/project/ibt/0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Simple wrappers around Docker etc. for fully isolated build environments",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b71f46f9edf5c2d00eb5a657cb42072d",
          "sha256": "5eaf45158ce23c84034efb61aac7c46a76e42bd3fa713dcd8eb5fb2c5849d6c4"
        },
        "downloads": -1,
        "filename": "ibt-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b71f46f9edf5c2d00eb5a657cb42072d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12144,
        "upload_time": "2017-10-30T19:06:09",
        "url": "https://files.pythonhosted.org/packages/03/06/0bf4803ad7ff4dc7b52250a782c556c42a1976a0ccd11ba7945c0293637a/ibt-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b71f46f9edf5c2d00eb5a657cb42072d",
        "sha256": "5eaf45158ce23c84034efb61aac7c46a76e42bd3fa713dcd8eb5fb2c5849d6c4"
      },
      "downloads": -1,
      "filename": "ibt-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b71f46f9edf5c2d00eb5a657cb42072d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 12144,
      "upload_time": "2017-10-30T19:06:09",
      "url": "https://files.pythonhosted.org/packages/03/06/0bf4803ad7ff4dc7b52250a782c556c42a1976a0ccd11ba7945c0293637a/ibt-0.1.tar.gz"
    }
  ]
}