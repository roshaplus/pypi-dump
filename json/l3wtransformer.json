{
  "info": {
    "author": "Georges Alkhouri",
    "author_email": "georges.alkhouri@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# l3wtransformer\n\n> A word hashing method to reduce the dimensionality of the bag-of-words term vectors. It is based on letter n-gram. Given a word (e.g. good), it first adds word starting and ending marks to the word (e.g. #good#). Then, breaks the word into letter n-grams (e.g. letter trigrams: #go, goo, ood, od#). Finally, the word is represented using a vector of letter n-grams. \n\n[Huang et al.2013, Learning Deep Structured Semantic Models for Web Search using Clickthrough Data]\n\n---\n\nThis implementation supports the transformation from **text into sequences of numbers**, with the numbers indicating the descending word frequency.\n\nFor example:\n\n*Lorem ipsum dolor sit amet, consectetuer adipiscing elit...* is transformed into *23, 1, 80, 86, 47, 50001, 21, 59, 83, 93, 14, 50003, 4, 7*\n\nAlso, after each word flags indicating lower case, upper case, mixed case or initial capitalization are added. \n\n### To do\n\nThere will be an implementation supporting the transformation from **text into bag-of-word vectors**.\n\n## Usage\n\n```\nimport l3wtransformer\n\nl3wt = l3wtransformer.L3wTransformer()\n\nl3wt.fit_on_texts(['First example.', 'And one more!'])\nl3wt.texts_to_sequences(['One example', '2nd exa.'])\n\n# [[5, 18, 17, 50001, 2, 10, 24, 6, 15, 20, 50003], [16, 50003, 2, 10, 50003]]\n```\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/GeorgesAlkhouri/l3wtransformer",
    "keywords": "machine-learning natural-language-processing preprocessing",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "l3wtransformer",
    "platform": "",
    "project_url": "https://pypi.org/project/l3wtransformer/",
    "release_url": "https://pypi.org/project/l3wtransformer/0.1.0/",
    "requires_dist": [
      "nltk"
    ],
    "requires_python": "",
    "summary": "A word hashing method based on vectors of letter n-grams. Currently transforms text into sequences of numbers.",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c9c194de850c68eb5bd86af14102f8df",
          "sha256": "bb661a1c90d8f275cf34e4535d69128a0bece04e4024fd75857c8fff14956ceb"
        },
        "downloads": 0,
        "filename": "l3wtransformer-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9c194de850c68eb5bd86af14102f8df",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 5714,
        "upload_time": "2017-09-19T12:36:18",
        "url": "https://files.pythonhosted.org/packages/3d/38/4a1fa7dfbb0b8d76d7067c2af0aba6b6b51f7bd4427f27a68dd1dc3e1635/l3wtransformer-0.1.0-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c9c194de850c68eb5bd86af14102f8df",
        "sha256": "bb661a1c90d8f275cf34e4535d69128a0bece04e4024fd75857c8fff14956ceb"
      },
      "downloads": 0,
      "filename": "l3wtransformer-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c9c194de850c68eb5bd86af14102f8df",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 5714,
      "upload_time": "2017-09-19T12:36:18",
      "url": "https://files.pythonhosted.org/packages/3d/38/4a1fa7dfbb0b8d76d7067c2af0aba6b6b51f7bd4427f27a68dd1dc3e1635/l3wtransformer-0.1.0-py2.py3-none-any.whl"
    }
  ]
}