{
  "info": {
    "author": "Richard Case",
    "author_email": "rich@racitup.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "djangoshop-subscribe\n====================\n\nDjango-SHOP plugin for email subscriptions\n\nIntroduction\n------------\n\nThis plugin allows Django-SHOP implementations to add email\nsubscriptions for their customers. The plugin is currently compatible\nwith Django v1.10.7 and\n`Django-SHOP <https://github.com/awesto/django-shop>`__ v0.10.2. This\ndocumentation assumes a working knowledge of Django and\n`Django-SHOP <http://django-shop.readthedocs.io/en/latest/>`__.\n\nFeatures\n~~~~~~~~\n\nThis plugin currently has the following features:\n\n-  Django-angular & bootstrap3 based subscription and confirmation forms\n   that can be included in normal templates.\n-  Automatic pickup of any Customer model fields that start with\n   ``subscription_`` for inclusion in forms.\n-  A CMS plugin for inclusion of either form in CMS placeholders.\n-  Default confirmation and subscription management form, or use your\n   own page.\n-  A minimal customer form for the standard Django-SHOP checkout to\n   prevent all fields annoying customers on every checkout.\n-  Email link authentication for management of subscriptions.\n-  Overridable forms and email templates including `Email\n   Framework <https://github.com/g13nn/Email-Framework>`__ compatibility\n   with the majority of email clients.\n\nTODO\n~~~~\n\nPlease let us know of you have any feature suggestions, or wish to\nimplement any of the below:\n\n-  Admin interface to allow emails to be authored and sent out to\n   subscribed users.\n-  Tests.\n-  Continuous build integration including compatibility testing with\n   various python, Django and Django-SHOP versions.\n\nIntegration Guide\n-----------------\n\nPlease follow the guide below to integrate the plugin into your own\nshop.\n\nConfiguration\n~~~~~~~~~~~~~\n\nPlease add the following to your Django settings. If you do not use CMS\nyou do not need the CMS plugin.\n\n.. code:: python\n\n    INSTALLED_APPS = [\n        ...\n        'shop',\n        'shop_subscribe',\n        ...\n    ]\n\n    CMSPLUGIN_CASCADE_PLUGINS = [\n        ...\n        'shop_subscribe.cmsplugin_cascade',\n    ]\n\nCustomer Model\n~~~~~~~~~~~~~~\n\nFor the subscription plugin to work, you must create your own customer\nmodel that extends the provided shop customer model. There are two\nrequirements:\n\n-  Add the ``SubscriptionCustomerManagerMixin`` to a manager class\n-  Add your own subscription options to the customer model which MUST be\n   prefixed with ``subscription_``\n\nFor example:\n\n.. code:: python\n\n    from shop.models.customer import BaseCustomer, CustomerManager as BaseCustomerManager\n    from shop_subscribe.models import SubscriptionCustomerManagerMixin\n\n\n    class CustomerManager(SubscriptionCustomerManagerMixin, BaseCustomerManager):\n        pass\n\n    class Customer(BaseCustomer):\n        \"\"\"\n        Specialised customer class for our additional fields\n        \"\"\"\n        subscription_newsletter = models.BooleanField(_(\"Newsletter\"), default=True,\n            help_text=_(\"Company news subscription\"))\n        subscription_cart_products = models.BooleanField(_(\"Watched Product Updates\"), default=True,\n            help_text=_(\"Subscription to product developments in your watch list or shopping trolley\"))\n        subscription_order_products = models.BooleanField(_(\"Purchased Product Updates\"), default=False,\n            help_text=_(\"Subscription to product developments you have purchased\"))\n\n        objects = CustomerManager()\n\nThe subscription management form will use the default Django modelform\nfields and widgets. Customising this form has not been considered!\n\nURLs\n~~~~\n\nThe subscribe plugin comes with two namespaced URLs that are Django REST\nFramework endpoints:\n\n-  subscribe: Used by the subscription form to sign up with just an\n   email address. Visitors will be added as 'Unrecognized'. The email\n   address used will receive an email asking the user to click a link to\n   confirm their subscription.\n-  confirm: The confirmation link contains a signature that\n   authenticates the user. The form first recognizes the user as\n   'Guest'. The form then allows users to manage their subscriptions.\n\nPlease include these urls in your own urlconf, for example:\n\n.. code:: python\n\n    api_urls = [\n        url(r'^api/', include([\n            url(r'^shop/', include('shop.urls', namespace='shop')),\n            url(r'^shop_subscribe/', include('shop_subscribe.urls')), # for email subscriptions\n        ]))\n    ]\n    urlpatterns += [url(r'', include(api_urls))]\n\nForms\n~~~~~\n\nTwo forms are provided, one for initial subscription, the other for\nconfirming and managing subscriptions without the need to log in. The\nlatter is useful for Guest users that are unable to log in.\n\nEither form can be integrated into existing CMS placeholders using the\nCMS plugin called *Subscriptions Form*, which can be found in the *Shop*\nplugin section. The template rendered for either form can be overridden\nby creating the following templates in your shop app:\n\n-  /shop\\_subscribe/subscribe-form.html\n-  /shop\\_subscribe/confirm-form.html\n\nThese templates will be rendered with ``form`` and ``action`` context\nvariables. Here is what the plugin should look like:\n\n.. figure:: https://github.com/racitup/djangoshop-subscribe/raw/master/doc/img/cms-plugin.png\n   :alt: CMS Plugin\n\n   CMS plugin image\n\nSubscription Form\n^^^^^^^^^^^^^^^^^\n\n.. figure:: https://github.com/racitup/djangoshop-subscribe/raw/master/doc/img/subscribe.png\n   :alt: Subscription form\n\n   Subscription form image\n\nIt is recommended that the subscription form is embedded into an\nexisting product page, for example the product detail page. This can be\nacheived using the CMS plugin as above. Alternatively you may include\nthe form directly into a template, for example:\n\n.. code:: html+django\n\n        <div class=\"col-md-4 text-center\">\n            ...\n            {% include \"shop_subscribe/subscribe-form.html\" %}\n            ...\n        </div>\n\nAn included template tag ensures the relevant context variables are\navailable for rendering.\n\nConfirmation Form\n^^^^^^^^^^^^^^^^^\n\n.. figure:: https://github.com/racitup/djangoshop-subscribe/raw/master/doc/img/confirm.png\n   :alt: Confirmation form\n\n   Confirmation form image\n\nThe confirmation form can be on a CMS page as above, included in a\nstandard Django template, or as a last resort, a default form is\nincluded that will be rendered by Django REST Framework.\n\nConfirmation form email link URL resolution order:\n\n1. CMS page id (aka reverse\\_id): ``shop-subscribe-confirm``;\n2. Django URL name: ``shop-subscribe-confirm``;\n3. Default URL ``shop_subscribe:confirm`` which renders a default form.\n\n**Note:** The confirmation page must be live when the subscription form\nis live and the URL must not be changed. Otherwise the confirmation\nemail links sent out will not point to the correct URL.\n\nMinimal Checkout Customer Form\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLook for the *Customer Form (minimal)* CMS plugin.",
    "docs_url": null,
    "download_url": "https://github.com/racitup/djangoshop-subscribe/archive/0.1.0.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/racitup/djangoshop-subscribe",
    "keywords": "Django,Django-SHOP",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangoshop-subscribe",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/djangoshop-subscribe/",
    "release_url": "https://pypi.org/project/djangoshop-subscribe/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "An email subscription plugin for Django-SHOP",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cafe0dbbc9139f707cfb1480cde24e3d",
          "sha256": "32758507748f9bc302b5636214bcd45d6f01e0067ba4cde015baf82cccd27f0b"
        },
        "downloads": 0,
        "filename": "djangoshop-subscribe-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cafe0dbbc9139f707cfb1480cde24e3d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41833,
        "upload_time": "2017-07-27T23:29:45",
        "url": "https://files.pythonhosted.org/packages/16/bf/4e07f2b4f373e4b7c7339a0c7bcb6ef90db1201f3e3a31d9b24f10941034/djangoshop-subscribe-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "cafe0dbbc9139f707cfb1480cde24e3d",
        "sha256": "32758507748f9bc302b5636214bcd45d6f01e0067ba4cde015baf82cccd27f0b"
      },
      "downloads": 0,
      "filename": "djangoshop-subscribe-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cafe0dbbc9139f707cfb1480cde24e3d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 41833,
      "upload_time": "2017-07-27T23:29:45",
      "url": "https://files.pythonhosted.org/packages/16/bf/4e07f2b4f373e4b7c7339a0c7bcb6ef90db1201f3e3a31d9b24f10941034/djangoshop-subscribe-0.1.0.tar.gz"
    }
  ]
}