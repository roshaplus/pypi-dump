{
  "info": {
    "author": "Yahya Abou Imran",
    "author_email": "yahya-abou-imran@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "CheckTypes package\n------------------\n\nLibrary for creating utility classes giving a nice abstraction for type\nchecking and data validation.\n\nBasic examples\n--------------\n\nCreation\n~~~~~~~~\n\nObject Oriented API\n'''''''''''''''''''\n\n.. code:: python\n\n    >>> from checktypes import CheckType\n    >>> class PositiveInt(int, CheckType):\n    ...     \"'int' > 0\"\n    ...     @staticmethod\n    ...     def predicate(n):\n    ...         return n > 0\n    ...\n    >>> class HumanAge(int, CheckType):\n    ...     \"'int' between 0 and 125\"\n    ...     minval = 0\n    ...     maxval = 125\n    ...     @classmethod\n    ...     def predicate(cls, val):\n    ...         return cls.minval <= val <= cls.maxval\n    ...\n\nYou can also use ``lambda``\\ s:\n\n.. code:: python\n\n    >>> class PositiveInt(int, CheckType):\n    ...     \"'int' > 0\"\n    ...     predicate = lambda n: n > 0\n    ...     # If your linter doesn't like it, try:\n    ...     # predicate = staticmethod(lambda n: n > 0)\n    ...\n    >>> class HumanAge(int, CheckType):\n    ...     \"'int' between 0 and 125\"\n    ...     minval = 0\n    ...     maxval = 125\n    ...     predicate = classmethod(lambda cls, n: cls.minval <= n <= cls.maxval)\n    ...\n\nFunctional API\n''''''''''''''\n\n.. code:: python\n\n    >>> from checktypes import checktype\n    >>> PositiveInt = checktype('PositiveInt', int, lambda n: n > 0, \"'int' > 0\")\n    >>> HumanAge = checktype(\n    ...     'HumanAge', int, doc=\"'int' between 0 and 125\", minval=0, maxval=125,\n    ...     predicate=classmethod(lambda cls, n: cls.minval <= n < cls.maxval))\n    ...\n\n``isinstance()`` overload\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> isinstance(1, PositiveInt)\n    True\n    >>> isinstance(-1, PositiveInt)\n    False\n    >>> isinstance('a', PositiveInt)\n    False\n\n``validate()``\n~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> PositiveInt.validate(1)  # No output => the value is a valid one\n    >>> PositiveInt.validate(-1)\n    Traceback (most recent call last):\n     ...\n    ValueError: expected 'PositiveInt' ('int' > 0) but got -1\n    >>> PositiveInt.validate('a')\n    Traceback (most recent call last):\n     ...\n    TypeError: expected 'PositiveInt' ('int' > 0) but got 'str'\n\n``register()``\n~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> isinstance(0, PositiveInt)\n    False\n    >>> PositiveInt.validate(0)\n    Traceback (most recent call last):\n     ...\n    ValueError: expected 'PositiveInt' ('int' > 0) but got 0\n    >>> PositiveInt.register(0)  # Now let pass 0\n    >>> isinstance(0, PositiveInt)\n    True\n    >>> PositiveInt.validate(0)\n\nAs Descriptor\n~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> class Circle:\n    ...     radius = PositiveInt()\n    ...\n    >>> c = Circle()\n    >>> c.radius = 1\n    >>> c.radius = -1\n    Traceback (most recent call last):\n     ...\n    ValueError: expected 'PositiveInt' ('int' > 0) but got -1 for 'radius' attribute of 'Circle' object\n    >>> c.radius = 'a'\n    Traceback (most recent call last):\n     ...\n    TypeError: expected 'PositiveInt' ('int' > 0) but got 'str' for 'radius' attribute of 'Circle' object\n\nFrom existing annotations\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    >>> from checktypes import descriptors_from_annotations\n    >>> @descriptors_from_annotations\n    ... class Point2D:\n    ...     x: float\n    ...     y: float\n    ...\n    >>> p = Point2D()\n    >>> p.x = 0.0\n    >>> p.y = 1.0\n    >>> p.x = 'a'\n    Traceback (most recent call last):\n     ...\n    TypeError: expected 'float' but got 'str' for 'x' attribute of 'Point2D' object\n\nFor further documentation, see the module docstrings.\n                                                     \n\n``SizedLimited`` and ``PhoneNumber`` recipes\n--------------------------------------------\n\n.. code:: python\n\n    >>> from checktypes import CheckType\n    >>> from collections.abc import Sized\n    >>> class SizedLimited(Sized, CheckType):\n    ...     maxsize = float('inf')\n    ...     predicate = classmethod(lambda cls, s: len(s) <= cls.maxsize)\n    ...\n    >>> class SizedLimit16(SizedLimited):\n    ...     maxsize = 16\n    ...\n    >>> isinstance([], SizedLimited)\n    True\n    >>> isinstance([0, 0, 0, 0], SizedLimit16)\n    True\n    >>> isinstance([0 for _ in range(20)], SizedLimit16)\n    False\n    >>> import re\n    >>> class PhoneNumber(str, SizedLimit16):\n    ...     regex = re.compile(r'^\\+?1?\\d*$')\n    ...     @classmethod\n    ...     def predicate(cls, pn):\n    ...         return cls.regex.match(pn)\n    ...\n    >>> isinstance('+33102030405', PhoneNumber)\n    True\n    >>> isinstance('+99701020304050', PhoneNumber)\n    True\n    >>> isinstance('string', PhoneNumber)\n    False\n    >>> isinstance('+9999999999999999999', PhoneNumber)\n    False\n\n",
    "docs_url": null,
    "download_url": "https://gitlab.com/yahya-abou-imran/checktypes/repository/v0.2/archive.zip",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://gitlab.com/yahya-abou-imran/checktypes",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "checktypes",
    "platform": "",
    "project_url": "https://pypi.org/project/checktypes/",
    "release_url": "https://pypi.org/project/checktypes/0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Library for creating utility classes giving a nice abstraction for type checking and data validation",
    "version": "0.2"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3eb80617f46ee49efcc38c2aa0b570ce",
          "sha256": "8a564a79ab5b66da020fb040d05237ca68daaec717354fed14b62d8f56702146"
        },
        "downloads": -1,
        "filename": "checktypes-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3eb80617f46ee49efcc38c2aa0b570ce",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2607,
        "upload_time": "2018-02-07T21:01:33",
        "url": "https://files.pythonhosted.org/packages/d9/f7/443e89205011d7594f695e57480c719e67b93ca7768db31339fe59122121/checktypes-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b0b8f6fe2b6fa28159d4ed0e1261d86e",
          "sha256": "14ad00bf8433115a6b39c39eb11ed6602cea7f1376edecf1e69ff9afe4e8e8ae"
        },
        "downloads": -1,
        "filename": "checktypes-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b0b8f6fe2b6fa28159d4ed0e1261d86e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6679,
        "upload_time": "2018-02-08T14:00:19",
        "url": "https://files.pythonhosted.org/packages/19/d2/6298db5deab3d427114c1cf86622683986209569c9f5ba2cfc395ab2d4e9/checktypes-0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b0b8f6fe2b6fa28159d4ed0e1261d86e",
        "sha256": "14ad00bf8433115a6b39c39eb11ed6602cea7f1376edecf1e69ff9afe4e8e8ae"
      },
      "downloads": -1,
      "filename": "checktypes-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b0b8f6fe2b6fa28159d4ed0e1261d86e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6679,
      "upload_time": "2018-02-08T14:00:19",
      "url": "https://files.pythonhosted.org/packages/19/d2/6298db5deab3d427114c1cf86622683986209569c9f5ba2cfc395ab2d4e9/checktypes-0.2.tar.gz"
    }
  ]
}