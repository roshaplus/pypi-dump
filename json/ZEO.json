{
  "info": {
    "author": "Zope Foundation and Contributors",
    "author_email": "zodb@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: ZODB",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Zope Public License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Database",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "============================================================\nZEO - Single-server client-server database server for ZODB\n============================================================\n\nZEO is a client-server storage for `ZODB <http://www.zodb.org>`_ for\nsharing a single storage among many clients. When you use ZEO, a\nlower-level storage, typically a file storage, is opened in the ZEO\nserver process.  Client programs connect to this process using a ZEO\nClientStorage.  ZEO provides a consistent view of the database to all\nclients.  The ZEO client and server communicate using a custom\nprotocol layered on top of TCP.\n\nSome alternatives to ZEO:\n\n- `NEO <http://www.neoppod.org/>`_ is a distributed-server\n  client-server storage.\n\n- `RelStorage <http://relstorage.readthedocs.io/en/latest/>`_\n  leverages the RDBMS servers to provide a client-server storage.\n\n.. contents::\n\nIntroduction\n============\n\nThere are several features that affect the behavior of\nZEO.  This section describes how a few of these features\nwork.  Subsequent sections describe how to configure every option.\n\nClient cache\n------------\n\nEach ZEO client keeps an on-disk cache of recently used data records\nto avoid fetching those records from the server each time they are\nrequested.  It is usually faster to read the objects from disk than it\nis to fetch them over the network.  The cache can also provide\nread-only copies of objects during server outages.\n\nThe cache may be persistent or transient. If the cache is persistent,\nthen the cache files are retained for use after process restarts. A\nnon-persistent cache uses temporary files that are removed when the\nclient storage is closed.\n\nThe client cache size is configured when the ClientStorage is created.\nThe default size is 20MB, but the right size depends entirely on the\nparticular database.  Setting the cache size too small can hurt\nperformance, but in most cases making it too big just wastes disk\nspace.\n\nZEO uses invalidations for cache consistency.  Every time an object is\nmodified, the server sends a message to each client informing it of\nthe change.  The client will discard the object from its cache when it\nreceives an invalidation. (It's actually a little more complicated,\nbut we won't get into that here.)\n\nEach time a client connects to a server, it must verify that its cache\ncontents are still valid.  (It did not receive any invalidation\nmessages while it was disconnected.)  This involves asking the server\nto replay invalidations it missed. If it's been disconnected too long,\nit discards its cache.\n\n\nInvalidation queue\n------------------\n\nThe ZEO server keeps a queue of recent invalidation messages in\nmemory.  When a client connects to the server, it sends the timestamp\nof the most recent invalidation message it has received.  If that\nmessage is still in the invalidation queue, then the server sends the\nclient all the missing invalidations.\n\nThe default size of the invalidation queue is 100.  If the\ninvalidation queue is larger, it will be more likely that a client\nthat reconnects will be able to verify its cache using the queue.  On\nthe other hand, a large queue uses more memory on the server to store\nthe message.  Invalidation messages tend to be small, perhaps a few\nhundred bytes each on average; it depends on the number of objects\nmodified by a transaction.\n\nYou can also provide an invalidation age when configuring the\nserver. In this case, if the invalidation queue is too small, but a\nclient has been disconnected for a time interval that is less than the\ninvalidation age, then invalidations are replayed by iterating over\nthe lower-level storage on the server.  If the age is too high, and\nclients are disconnected for a long time, then this can put a lot of\nload on the server.\n\nTransaction timeouts\n--------------------\n\nA ZEO server can be configured to timeout a transaction if it takes\ntoo long to complete.  Only a single transaction can commit at a time;\nso if one transaction takes too long, all other clients will be\ndelayed waiting for it.  In the extreme, a client can hang during the\ncommit process.  If the client hangs, the server will be unable to\ncommit other transactions until it restarts.  A well-behaved client\nwill not hang, but the server can be configured with a transaction\ntimeout to guard against bugs that cause a client to hang.\n\nIf any transaction exceeds the timeout threshold, the client's\nconnection to the server will be closed and the transaction aborted.\nOnce the transaction is aborted, the server can start processing other\nclient's requests.  Most transactions should take very little time to\ncommit.  The timer begins for a transaction after all the data has\nbeen sent to the server.  At this point, the cost of commit should be\ndominated by the cost of writing data to disk; it should be unusual\nfor a commit to take longer than 1 second.  A transaction timeout of\n30 seconds should tolerate heavy load and slow communications between\nclient and server, while guarding against hung servers.\n\nWhen a transaction times out, the client can be left in an awkward\nposition.  If the timeout occurs during the second phase of the two\nphase commit, the client will log a panic message.  This should only\ncause problems if the client transaction involved multiple storages.\nIf it did, it is possible that some storages committed the client\nchanges and others did not.\n\nConnection management\n---------------------\n\nA ZEO client manages its connection to the ZEO server.  If it loses\nthe connection, it attempts to reconnect.  While\nit is disconnected, it can satisfy some reads by using its cache.\n\nThe client can be configured with multiple server addresses.  In this\ncase, it assumes that each server has identical content and will use\nany server that is available.  It is possible to configure the client\nto accept a read-only connection to one of these servers if no\nread-write connection is available.  If it has a read-only connection,\nit will continue to poll for a read-write connection.\n\nIf a single address resolves to multiple IPv4 or IPv6 addresses,\nthe client will connect to an arbitrary of these addresses.\n\nSSL\n---\n\nZEO supports the use of SSL connections between servers and clients,\nincluding certificate authentication.  We're still understanding use\ncases for this, so details of operation may change.\n\nInstalling software\n===================\n\nZEO is installed like any other Python package using pip, buildout, or\nother Python packaging tools.\n\nRunning the server\n==================\n\nTypically, the ZEO server is run using the ``runzeo`` script that's\ninstalled as part of a ZEO installation.  The ``runzeo`` script\naccepts command line options, the most important of which is the\n``-C`` (``--configuration``) option.  ZEO servers are best configured\nvia configuration files.  The ``runzeo`` script also accepts some\ncommand-line arguments for ad-hoc configurations, but there's an\neasier way to run an ad-hoc server described below.  For more on\nconfiguring a ZEO server see `Server configuration`_ below.\n\nServer quick-start/ad-hoc operation\n-----------------------------------\n\nYou can quickly start a ZEO server from a Python prompt::\n\n  import ZEO\n  address, stop = ZEO.server()\n\nThis runs a ZEO server on a dynamic address and using an in-memory\nstorage.\n\nWe can then create a ZEO client connection using the address\nreturned::\n\n  connection = ZEO.connection(addr)\n\nThis is a ZODB connection for a database opened on a client storage\ninstance created on the fly.  This is a shorthand for::\n\n  db = ZEO.DB(addr)\n  connection = db.open()\n\nWhich is a short-hand for::\n\n  client_storage = ZEO.client(addr)\n\n  import ZODB\n  db = ZODB.db(client_storage)\n  connection = db.open()\n\nIf you exit the Python process, the storage exits as well, as it's run\nin an in-process thread.\n\nYou shut down the server more cleanly by calling the stop function\nreturned by the ``ZEO.server`` function.\n\nTo have data stored persistently, you can specify a file-storage path\nname using a ``path`` parameter.  If you want blob support, you can\nspecify a blob-file directory using the ``blob_dir`` directory.\n\nYou can also supply a port to listen on, full storage configuration\nand ZEO server configuration options to the ``ZEO.server``\nfunction. See it's documentation string for more information.\n\nServer configuration\n--------------------\n\nThe script ``runzeo`` runs the ZEO server.  The server can be\nconfigured using command-line arguments or a configuration file.  This\ndocument only describes the configuration file.  Run ``runzeo``\n-h to see the list of command-line arguments.\n\nThe configuration file specifies the underlying storage the server\nuses, the address it binds to, and a few other optional parameters.\nAn example is::\n\n    <zeo>\n      address zeo.example.com:8090\n    </zeo>\n\n    <filestorage>\n      path /var/tmp/Data.fs\n    </filestorage>\n\n    <eventlog>\n      <logfile>\n        path /var/tmp/zeo.log\n        format %(asctime)s %(message)s\n      </logfile>\n    </eventlog>\n\nThe format is similar to the Apache configuration format.  Individual\nsettings have a name, 1 or more spaces and a value, as in::\n\n  address zeo.example.com:8090\n\nSettings are grouped into hierarchical sections.\n\nThe example above configures a server to use a file storage from\n``/var/tmp/Data.fs``.  The server listens on port ``8090`` of\n``zeo.example.com``.  The ZEO server writes its log file to\n``/var/tmp/zeo.log`` and uses a custom format for each line.  Assuming the\nexample configuration it stored in ``zeo.config``, you can run a server by\ntyping::\n\n    runzeo -C zeo.config\n\nA configuration file consists of a ``<zeo>`` section and a storage\nsection, where the storage section can use any of the valid ZODB\nstorage types.  It may also contain an event log configuration.  See\n`ZODB documentation <http://www.zodb.org>`_ for information on\nconfiguring storages.\n\nThe ``zeo`` section must list the address.  All the other keys are\noptional.\n\naddress\n        The address at which the server should listen.  This can be in\n        the form 'host:port' to signify a TCP/IP connection or a\n        pathname string to signify a Unix domain socket connection (at\n        least one '/' is required).  A hostname may be a DNS name or a\n        dotted IP address.  If the hostname is omitted, the platform's\n        default behavior is used when binding the listening socket (''\n        is passed to socket.bind() as the hostname portion of the\n        address).\n\nread-only\n        Flag indicating whether the server should operate in read-only\n        mode.  Defaults to false.  Note that even if the server is\n        operating in writable mode, individual storages may still be\n        read-only.  But if the server is in read-only mode, no write\n        operations are allowed, even if the storages are writable.  Note\n        that pack() is considered a read-only operation.\n\ninvalidation-queue-size\n        The storage server keeps a queue of the objects modified by the\n        last N transactions, where N == invalidation_queue_size.  This\n        queue is used to support client cache verification when a client\n        disconnects for a short period of time.\n\ninvalidation-age\n        The maximum age of a client for which quick-verification\n        invalidations will be provided by iterating over the served\n        storage. This option should only be used if the served storage\n        supports efficient iteration from a starting point near the\n        end of the transaction history (e.g. end of file).\n\ntransaction-timeout\n        The maximum amount of time, in seconds, to wait for a\n        transaction to commit after acquiring the storage lock,\n        specified in seconds.  If the transaction takes too long, the\n        client connection will be closed and the transaction aborted.\n\n        This defaults to 30 seconds.\n\nclient-conflict-resolution\n        Flag indicating that clients should perform conflict\n        resolution. This option defaults to false.\n\nmsgpack\n        Use `msgpack <http://msgpack.org/index.html>`_ to serialize\n        and de-serialize ZEO protocol messages.\n\n        An advantage of using msgpack for ZEO communication is that\n        it's a tiny bit faster and a ZEO server can support Python 2\n        or Python 3 clients (but not both).\n\n        msgpack can also be enabled by setting the ``ZEO_MSGPACK``\n        environment to a non-empty string.\n\nServer SSL configuration\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nA server can optionally support SSL.  Do do so, include a `ssl`\nsubsection of the ZEO section, as in::\n\n    <zeo>\n      address zeo.example.com:8090\n      <ssl>\n        certificate server_certificate.pem\n        key server_certificate_key.pem\n      </ssl>\n    </zeo>\n\n    <filestorage>\n      path /var/tmp/Data.fs\n    </filestorage>\n\n    <eventlog>\n      <logfile>\n        path /var/tmp/zeo.log\n        format %(asctime)s %(message)s\n      </logfile>\n    </eventlog>\n\nThe ``ssl`` section has settings:\n\ncertificate\n  The path to an SSL certificate file for the server. (required)\n\nkey\n  The path to the SSL key file for the server certificate (if not\n  included in certificate file).\n\npassword-function\n  The dotted name if an importable function that, when imported, returns\n  the password needed to unlock the key (if the key requires a password.)\n\nauthenticate\n  The path to a file or directory containing client certificates\n  to authenticate.  ((See the ``cafile`` and ``capath``\n  parameters in the Python documentation for\n  ``ssl.SSLContext.load_verify_locations``.)\n\n  If this setting is used. then certificate authentication is\n  used to authenticate clients.  A client must be configured\n  with one of the certificates supplied using this setting.\n\n  This option assumes that you're using self-signed certificates.\n\nRunning the ZEO server as a daemon\n----------------------------------\n\nIn an operational setting, you will want to run the ZEO server as a\ndaemon process that is restarted when it dies.  ``runzeo`` makes no\nattempt to implement a well behaved daemon. It expects that\nfunctionality to be provided by a wrapper like `zdaemon\n<https://pypi.python.org/pypi/zdaemon>`_ or `supervisord\n<http://supervisord.org/>`_.\n\nRotating log files\n------------------\n\n``runzeo`` will re-initialize its logging subsystem when it receives a\nSIGUSR2 signal.  If you are using the standard event logger, you\nshould first rename the log file and then send the signal to the\nserver.  The server will continue writing to the renamed log file\nuntil it receives the signal.  After it receives the signal, the\nserver will create a new file with the old name and write to it.\n\nZEO Clients\n===========\n\nTo use a ZEO server, you need to connect to it using a ZEO client\nstorage.  You create client storages either using a Python API or\nusing a ZODB storage configuration in a ZODB storage configuration\nsection.\n\nPython API for creating a ZEO client storage\n--------------------------------------------\n\nTo create a client storage from Python, use the ``ZEO.client``\nfunction::\n\n    import ZEO\n    client = ZEO.client(8200)\n\nIn the example above, we created a client that connected to a storage\nlistening on port 8200 on local host.  The first argument is an\naddress, or list of addresses to connect to.  There are many additional\noptions, documented below that should be given as keyword arguments.\n\nAddresses can be:\n\n- A host/port tuple\n\n- An integer, which implies that the host is '127.0.0.1'\n\n- A unix domain socket file name.\n\nOptions:\n\ncache_size\n   The cache size in bytes. This defaults to a 20MB.\n\ncache\n   The ZEO cache to be used.  This can be a file name, which will\n   cause a persistent standard persistent ZEO cache to be used and\n   stored in the given name.  This can also be an object that\n   implements ``ZEO.interfaces.ICache``.\n\n   If not specified, then a non-persistent cache will be used.\n\nblob_dir\n   The name of a directory to hold/cache blob data downloaded from the\n   server.  This must be provided if blobs are to be used.  (Of\n   course, the server storage must be configured to use blobs as\n   well.)\n\nshared_blob_dir\n   A client can use a network files system (or a local directory if\n   the server runs on the same machine) to share a blob directory with\n   the server.  This allows downloading of blobs (except via a\n   distributed file system) to be avoided.\n\nblob_cache_size\n   The size of the blob cache in bytes.  IF unset, then blobs will\n   accumulate. If set, then blobs are removed when the total size\n   exceeds this amount.  Blobs accessed least recently are removed\n   first.\n\nblob_cache_size_check\n   The total size of data to be downloaded to trigger blob cache size\n   reduction. The default is 10 (percent).  This controls how often to\n   remove blobs from the cache.\n\nssl\n   An ``ssl.SSLContext`` object used to make SSL connections.\n\nssl_server_hostname\n   Host name to use for SSL host name checks.\n\n   If using SSL and if host name checking is enabled in the given SSL\n   context then use this as the value to check.  If an address is a\n   host/port pair, then this defaults to the host in the address.\n\nread_only\n   Set to true for a read-only connection.\n\n   If false (the default), then request a read/write connection.\n\n   This option is ignored if ``read_only_fallback`` is set to a true value.\n\nread_only_fallback\n   Set to true, then prefer a read/write connection, but be willing to\n   use a read-only connection.  This defaults to a false value.\n\n   If ``read_only_fallback`` is set, then ``read_only`` is ignored.\n\nserver_sync\n   Flag, false by default, indicating whether the ``sync`` method\n   should make a server request.  The ``sync`` method is called at the\n   start of explicitly begin transactions.  Making a server requests assures\n   that any invalidations outstanding at the beginning of a\n   transaction are processed.\n\n   Setting this to True is important when application activity is\n   spread over multiple ZEO clients. The classic example of this is\n   when a web browser makes a request to an application server (ZEO\n   client) that makes a change and then makes a request to another\n   application server that depends on the change.\n\n   Setting this to True makes transactions a little slower because of\n   the added server round trip.  For transactions that don't otherwise\n   need to access the storage server, the impact can be significant.\n\nwait_timeout\n   How long to wait for an initial connection, defaulting to 30\n   seconds.  If an initial connection can't be made within this time\n   limit, then creation of the client storage will fail with a\n   ``ZEO.Exceptions.ClientDisconnected`` exception.\n\n   After the initial connection, if the client is disconnected:\n\n   - In-flight server requests will fail with a\n     ``ZEO.Exceptions.ClientDisconnected`` exception.\n\n   - New requests will block for up to ``wait_timeout`` waiting for a\n     connection to be established before failing with a\n     ``ZEO.Exceptions.ClientDisconnected`` exception.\n\nclient_label\n   A short string to display in *server* logs for an event relating to\n   this client. This can be helpful when debugging.\n\ndisconnect_poll\n   The delay in seconds between attempts to connect to the\n   server, in seconds.  Defaults to 1 second.\n\nConfiguration strings/files\n---------------------------\n\nZODB databases and storages can be configured using configuration\nfiles, or strings (extracted from configuration files).  They use the\nsame syntax as the server configuration files described above, but\nwith different sections and options.\n\nAn application that used ZODB might configure it's database using a\nstring like::\n\n  <zodb>\n     cache-size-bytes 1000MB\n\n     <filestorage>\n       path /var/lib/Data.fs\n     </filestorage>\n  </zodb>\n\nIn this example, we configured a ZODB database with a object cache\nsize of 1GB.  Inside the database, we configured a file storage.  The\n``filestorage`` section provided file-storage parameters.  We saw a\nsimilar section in the storage-server configuration example in `Server\nconfiguration`_.\n\nTo configure a client storage, you use a ``clientstorage`` section,\nbut first you have to import it's definition, because ZEO isn't built\ninto ZODB.  Here's an example::\n\n  <zodb>\n     cache-size-bytes 1000MB\n\n     %import ZEO\n\n     <clientstorage>\n       server 8200\n     </clientstorage>\n  </zodb>\n\nIn this example, we defined a client storage that connected to a\nserver on port 8200.\n\nThe following settings are supported:\n\ncache-size\n   The cache size in bytes, KB or MB. This defaults to a 20MB.\n   Optional ``KB`` or ``MB`` suffixes can (and usually are) used to\n   specify units other than bytes.\n\ncache-path\n   The file path of a persistent cache file\n\nblob-dir\n   The name of a directory to hold/cache blob data downloaded from the\n   server.  This must be provided if blobs are to be used.  (Of\n   course, the server storage must be configured to use blobs as\n   well.)\n\nshared-blob-dir\n   A client can use a network files system (or a local directory if\n   the server runs on the same machine) to share a blob directory with\n   the server.  This allows downloading of blobs (except via a\n   distributed file system) to be avoided.\n\nblob-cache-size\n   The size of the blob cache in bytes.  IF unset, then blobs will\n   accumulate. If set, then blobs are removed when the total size\n   exceeds this amount.  Blobs accessed least recently are removed\n   first.\n\nblob-cache-size-check\n   The total size of data to be downloaded to trigger blob cache size\n   reduction. The default is 10 (percent).  This controls how often to\n   remove blobs from the cache.\n\nread-only\n   Set to true for a read-only connection.\n\n   If false (the default), then request a read/write connection.\n\n   This option is ignored if ``read_only_fallback`` is set to a true value.\n\nread-only-fallback\n   Set to true, then prefer a read/write connection, but be willing to\n   use a read-only connection.  This defaults to a false value.\n\n   If ``read_only_fallback`` is set, then ``read_only`` is ignored.\n\nserver-sync\n   Sets the ``server_sync`` option described above.\n\nwait_timeout\n   How long to wait for an initial connection, defaulting to 30\n   seconds.  If an initial connection can't be made within this time\n   limit, then creation of the client storage will fail with a\n   ``ZEO.Exceptions.ClientDisconnected`` exception.\n\n   After the initial connection, if the client is disconnected:\n\n   - In-flight server requests will fail with a\n     ``ZEO.Exceptions.ClientDisconnected`` exception.\n\n   - New requests will block for up to ``wait_timeout`` waiting for a\n     connection to be established before failing with a\n     ``ZEO.Exceptions.ClientDisconnected`` exception.\n\nclient_label\n   A short string to display in *server* logs for an event relating to\n   this client. This can be helpful when debugging.\n\ndisconnect_poll\n   The delay in seconds between attempts to connect to the\n   server, in seconds.  Defaults to 1 second.\n\nClient SSL configuration\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nAn ``ssl`` subsection can be used to enable and configure SSL, as in::\n\n  %import ZEO\n\n  <clientstorage>\n    server zeo.example.com8200\n    <ssl>\n    </ssl>\n  </clientstorage>\n\nIn the example above, SSL is enabled in it's simplest form:\n\n- The client expects the server to have a signed certificate, which the\n  client validates.\n\n- The server server host name ``zeo.example.com`` is checked against\n  the server's certificate.\n\nA number of settings can be provided to configure SSL:\n\ncertificate\n  The path to an SSL certificate file for the client.  This is\n  needed to allow the server to authenticate the client.\n\nkey\n  The path to the SSL key file for the client certificate (if not\n  included in the certificate file).\n\npassword-function\n  A dotted name if an importable function that, when imported, returns\n  the password needed to unlock the key (if the key requires a password.)\n\nauthenticate\n  The path to a file or directory containing server certificates\n  to authenticate.  ((See the ``cafile`` and ``capath``\n  parameters in the Python documentation for\n  ``ssl.SSLContext.load_verify_locations``.)\n\n  If this setting is used. then certificate authentication is\n  used to authenticate the server.  The server must be configured\n  with one of the certificates supplied using this setting.\n\ncheck-hostname\n  This is a boolean setting that defaults to true. Verify the\n  host name in the server certificate is as expected.\n\nserver-hostname\n  The expected server host name.  This defaults to the host name\n  used in the server address.  This option must be used when\n  ``check-hostname`` is true and when a server address has no host\n  name (localhost, or unix domain socket) or when there is more\n  than one server and server hostnames differ.\n\n  Using this setting implies a true value for the ``check-hostname`` setting.\n\nChangelog\n=========\n\n5.1.1 (2017-12-18)\n------------------\n\n- All classes are new-style classes on Python 2 (they were already\n  new-style on Python 3). This improves performance on PyPy. See\n  `issue 86 <https://github.com/zopefoundation/ZEO/pull/86>`_.\n\n- Fixed removing UNIX socket files under Python 2 with ZConfig 3.2.0.\n  See `issue 90 <https://github.com/zopefoundation/ZEO/issues/90>`_.\n\n5.1.0 (2017-04-03)\n------------------\n\n- Added support for serializing ZEO messages using `msgpack\n  <http://msgpack.org/index.html>`_ rather than pickle.  This helps\n  pave the way to supporting `byteserver\n  <https://github.com/jimfulton/byteserver>`_, but it also allows ZEO\n  servers to support Python 2 or 3 clients (but not both at the same\n  time) and may provide a small performance improvement.\n\n- Possibly fixed the deprecated and untested zeoctl script.\n\n- Removed zeopasswd, which no longer makes sense given that ZEO\n  authentication was removed, in favor of SSL.\n\n5.0.4 (2016-11-18)\n------------------\n\n- Fixed: ZEO needed changes to work with recent transaction changes.\n\n  ZEO now works with the latest versions of ZODB and transaction\n\n5.0.3 (2016-11-18)\n------------------\n\n- Temporarily require non-quite-current versions of ZODB and\n  transaction until we can sort out some recent breakage.\n\n5.0.2 (2016-11-02)\n------------------\n\n- Provide much better performance on Python 2.\n\n- Provide better error messages when pip tries to install ZEO on an\n  unsupported Python version. See `issue 75\n  <https://github.com/zopefoundation/ZEO/issues/75>`_.\n\n5.0.1 (2016-09-06)\n------------------\n\nPackaging-related doc fix\n\n5.0.0 (2016-09-06)\n------------------\n\nThis is a major ZEO revision, which replaces the ZEO network protocol\nimplementation.\n\nNew features:\n\n- SSL support\n\n- Optional client-side conflict resolution.\n\n- Lots of mostly internal clean ups.\n\n- ``ClientStorage``server-sync`` configuration option and\n  ``server_sync`` constructor argument to force a server round trip at\n  the beginning of transactions to wait for any outstanding\n  invalidations at the start of the transaction to be delivered.\n\n- Client disconnect errors are now transient errors.  When\n  applications retry jobs that raise transient errors, jobs (e.g. web\n  requests) with disconnect errors will be retried. Together with\n  blocking synchronous ZEO server calls for a limited time while\n  disconnected, this change should allow brief disconnections due to\n  server restart to avoid generating client-visible errors (e.g. 500\n  web responses).\n\n- ClientStorage prefetch method to prefetch oids.\n\n  When oids are prefetched, requests are made at once, but the caller\n  doesn't block waiting for the results.  Rather, then the caller\n  later tries to fetch data for one of the object ids, it's either\n  delivered right away from the ZEO cache, if the prefetch for the\n  object id has completed, or the caller blocks until the inflight\n  prefetch completes. (No new request is made.)\n\nDropped features:\n\n- The ZEO authentication protocol.\n\n  This will be replaced by new authentication mechanims leveraging SSL.\n\n- The ZEO monitor server.\n\n- Full cache verification.\n\n- Client suppprt for servers older than ZODB 3.9\n\n- Server support for clients older than ZEO 4.2.0\n\n5.0.0b0 (2016-08-18)\n--------------------\n\n- Added a ``ClientStorage`` ``server-sync`` configuration option and\n  ``server_sync`` constructor argument to force a server round trip at\n  the beginning of transactions to wait for any outstanding\n  invalidations at the start of the transaction to be delivered.\n\n- When creating an ad hoc server, a log file isn't created by\n  default. You must pass a ``log`` option specifying a log file name.\n\n- The ZEO server register method now returns the storage last\n  transaction, allowing the client to avoid an extra round trip during\n  cache verification.\n\n- Client disconnect errors are now transient errors.  When\n  applications retry jobs that raise transient errors, jobs (e.g. web\n  requests) with disconnect errors will be retried. Together with\n  blocking synchronous ZEO server calls for a limited time while\n  disconnected, this change should allow brief disconnections due to\n  server restart to avoid generating client-visible errors (e.g. 500\n  web responses).\n\n- Fixed bugs in using the ZEO 5 client with ZEO 4 servers.\n\n5.0.0a2 (2016-07-30)\n--------------------\n\n- Added the ability to pass credentials when creating client storages.\n\n  This is experimental in that passing credentials will cause\n  connections to an ordinary ZEO server to fail, but it facilitates\n  experimentation with custom ZEO servers. Doing this with custom ZEO\n  clients would have been awkward due to the many levels of\n  composition involved.\n\n  In the future, we expect to support server security plugins that\n  consume credentials for authentication (typically over SSL).\n\n  Note that credentials are opaque to ZEO. They can be any object with\n  a true value.  The client mearly passes them to the server, which\n  will someday pass them to a plugin.\n\n5.0.0a1 (2016-07-21)\n--------------------\n\n- Added a ClientStorage prefetch method to prefetch oids.\n\n  When oids are prefetched, requests are made at once, but the caller\n  doesn't block waiting for the results.  Rather, then the caller\n  later tries to fetch data for one of the object ids, it's either\n  delivered right away from the ZEO cache, if the prefetch for the\n  object id has completed, or the caller blocks until the inflight\n  prefetch completes. (No new request is made.)\n\n- Fixed: SSL clients of servers with signed certs didn't load default\n  certs and were unable to connect.\n\n5.0.0a0 (2016-07-08)\n--------------------\n\nThis is a major ZEO revision, which replaces the ZEO network protocol\nimplementation.\n\nNew features:\n\n- SSL support\n\n- Optional client-side conflict resolution.\n\n- Lots of mostly internal clean ups.\n\nDropped features:\n\n- The ZEO authentication protocol.\n\n  This will be replaced by new authentication mechanims leveraging SSL.\n\n- The ZEO monitor server.\n\n- Full cache verification.\n\n- Client suppprt for servers older than ZODB 3.9\n\n- Server support for clients older than ZEO 4.2.0\n\n4.2.0 (2016-06-15)\n------------------\n\n- Changed loadBefore to operate more like load behaved, especially\n  with regard to the load lock.  This allowes ZEO to work with the\n  upcoming ZODB 5, which used loadbefore rather than load.\n\n  Reimplemented load using loadBefore, thus testing loadBefore\n  extensively via existing tests.\n\n- Other changes to work with ZODB 5 (as well as ZODB 4)\n\n- Fixed: the ZEO cache loadBefore method failed to utilize current data.\n\n- Drop support for Python 2.6 and 3.2.\n\n- Fix AttributeError: 'ZEOServer' object has no attribute 'server' when\n  StorageServer creation fails.\n\n4.2.0b1 (2015-06-05)\n--------------------\n\n- Add support for PyPy.\n\n4.1.0 (2015-01-06)\n------------------\n\n- Add support for Python 3.4.\n\n- Added a new ``ruok`` client protocol for getting server status on\n  the ZEO port without creating a full-blown client connection and\n  without logging in the server log.\n\n- Log errors on server side even if using multi threaded delay.\n\n4.0.0 (2013-08-18)\n------------------\n\n- Avoid reading excess random bytes when setting up an auth_digest session.\n\n- Optimize socket address enumeration in ZEO client (avoid non-TCP types).\n\n- Improve Travis CI testing support.\n\n- Assign names to all threads for better runtime debugging.\n\n- Fix \"assignment to keyword\" error under Py3k in 'ZEO.scripts.zeoqueue'.\n\n4.0.0b1 (2013-05-20)\n--------------------\n\n- Depend on ZODB >= 4.0.0b2\n\n- Add support for Python 3.2 / 3.3.\n\n4.0.0a1 (2012-11-19)\n--------------------\n\nFirst (in a long time) separate ZEO release.\n\nSince ZODB 3.10.5:\n\n- Storage servers now emit Serving and Closed events so subscribers\n  can discover addresses when dynamic port assignment (bind to port 0)\n  is used. This could, for example, be used to update address\n  information in a ZooKeeper database.\n\n- Client storages have a method, new_addr, that can be used to change\n  the server address(es). This can be used, for example, to update a\n  dynamically determined server address from information in a\n  ZooKeeper database.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/zopefoundation/ZEO",
    "keywords": "database,zodb",
    "license": "ZPL 2.1",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ZEO",
    "platform": "any",
    "project_url": "https://pypi.org/project/ZEO/",
    "release_url": "https://pypi.org/project/ZEO/5.1.1/",
    "requires_dist": [],
    "requires_python": ">=2.7.9,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*",
    "summary": "ZEO - Single-server client-server database server for ZODB",
    "version": "5.1.1"
  },
  "releases": {
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "494d8320549185097ba4a6b6b76017d6",
          "sha256": "63555b6d2b5f98d215c4b5fdce004fb0475daa6efc8b70f39c77d646c12d7e51"
        },
        "downloads": -1,
        "filename": "ZEO-4.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "494d8320549185097ba4a6b6b76017d6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 200268,
        "upload_time": "2013-09-18T16:08:20",
        "url": "https://files.pythonhosted.org/packages/c7/5c/7aa1353f7c82ce4df4695f48eef99c47856912f6a44f74598fb823324a34/ZEO-4.0.0.tar.gz"
      }
    ],
    "4.0.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "63d983f65625ea0ec87167e4b1868d0f",
          "sha256": "922d1206f1aa9e04931c32e6cbd34d175a60f04b6d3c72044da7b26a4ea06853"
        },
        "downloads": -1,
        "filename": "ZEO-4.0.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "63d983f65625ea0ec87167e4b1868d0f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 204611,
        "upload_time": "2012-11-19T19:51:11",
        "url": "https://files.pythonhosted.org/packages/0d/d9/79ad6484da2887ef01f69202fdd9f3f03ed503a71a54925bc73ee7b22164/ZEO-4.0.0a1.tar.gz"
      }
    ],
    "4.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "34ad6007afa58ceab92ca47333bfb729",
          "sha256": "b6f8eaf2fac57f7b5ba16dac5c1a0d43d06683b1b5ba2e2906cb6bdfff883b2f"
        },
        "downloads": -1,
        "filename": "ZEO-4.0.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "34ad6007afa58ceab92ca47333bfb729",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 205692,
        "upload_time": "2013-05-20T19:57:07",
        "url": "https://files.pythonhosted.org/packages/db/d9/4e3dc378394d03ac1c53e184bb05edfbd6a8844b97a0025e54d5b3c1c71b/ZEO-4.0.0b1.tar.gz"
      }
    ],
    "4.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "39a3fde5aa89bd56d2747a8d13fd08d1",
          "sha256": "952998a28411eb1e7594b57e9c4fcb30a19ea38c0fec22abb339a844c3ca134f"
        },
        "downloads": -1,
        "filename": "ZEO-4.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "39a3fde5aa89bd56d2747a8d13fd08d1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 242306,
        "upload_time": "2015-01-06T10:53:26",
        "url": "https://files.pythonhosted.org/packages/22/ea/eecffa25ae5318e9cafb0e04e8310a44afb76ec30bd3c2162f4c12206b91/ZEO-4.1.0.tar.gz"
      }
    ],
    "4.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e4219c6079cfd6cb7cc0430d43e3cae8",
          "sha256": "b30d70bef49ba510dc622e5c85b303f6a73c04bf6b34069634790dd234ad9b83"
        },
        "downloads": -1,
        "filename": "ZEO-4.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e4219c6079cfd6cb7cc0430d43e3cae8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 284783,
        "upload_time": "2016-06-15T18:24:58",
        "url": "https://files.pythonhosted.org/packages/6f/18/bd9a692144bdd99c706556cab23588e1b478ddc9fb4b62b49649efe6a621/ZEO-4.2.0.tar.gz"
      }
    ],
    "4.2.0b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c1117f607a38d95525ebf220eaf49bd0",
          "sha256": "ece7b0d8d69f76d07d7f8a6e16d2d45a5c9465b6e9d8d37e285057767bb27f4d"
        },
        "downloads": -1,
        "filename": "ZEO-4.2.0b1.tar.gz",
        "has_sig": true,
        "md5_digest": "c1117f607a38d95525ebf220eaf49bd0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 216627,
        "upload_time": "2015-06-05T13:40:33",
        "url": "https://files.pythonhosted.org/packages/93/5d/3b060e816e01add863a4906a5c7ff52a1c862e063b81b787cdca7237e901/ZEO-4.2.0b1.tar.gz"
      }
    ],
    "4.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c285d1e534a5c7e508deaffc5e2ab597",
          "sha256": "331f99c395c355f88479f1f4e4545ae85bd6c5c6c11ff84e6182817ffb70bd9b"
        },
        "downloads": -1,
        "filename": "ZEO-4.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c285d1e534a5c7e508deaffc5e2ab597",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 284869,
        "upload_time": "2016-06-30T17:22:50",
        "url": "https://files.pythonhosted.org/packages/f6/ad/0fd2076890291b4a1334a3f865b5993de60ecb872d2543c3f59298ee7afa/ZEO-4.2.1.tar.gz"
      }
    ],
    "4.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c04c6725b1b905d041c13b8c0a883d88",
          "sha256": "d9683cd8ba83b5deb30c4dd27995b95faf39741d267588cf196ae8cd70d17d95"
        },
        "downloads": -1,
        "filename": "ZEO-4.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c04c6725b1b905d041c13b8c0a883d88",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 301568,
        "upload_time": "2016-08-02T14:28:20",
        "url": "https://files.pythonhosted.org/packages/8a/1d/673c0dd32fd420df14485434efa5f2c5288ba2046aaa179b007914c887d5/ZEO-4.3.0.tar.gz"
      }
    ],
    "4.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "09b08eb53532fe71618ce5398cd1bb23",
          "sha256": "c94f2b7a40bfd23f45674e144480b09b63db20b43bb3b711477324513401df3b"
        },
        "downloads": -1,
        "filename": "ZEO-4.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "09b08eb53532fe71618ce5398cd1bb23",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 304922,
        "upload_time": "2016-11-18T15:44:33",
        "url": "https://files.pythonhosted.org/packages/f5/3a/5d15ad251b81563b1b41ccab8d62261383368d8d4d688c200facc3416eeb/ZEO-4.3.1.tar.gz"
      }
    ],
    "5.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "efc5490ed7e9d89d7447a5d3795f733e",
          "sha256": "5b0d662d90a1e78c94e0e3e425bb4dce8e6bcbac88be262e659a356d51bf8ba1"
        },
        "downloads": -1,
        "filename": "ZEO-5.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "efc5490ed7e9d89d7447a5d3795f733e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 328737,
        "upload_time": "2016-09-06T14:53:25",
        "url": "https://files.pythonhosted.org/packages/1f/23/1c19970201dfa9ab0d5ed088528db3ad3b5d5ff6534785c1ba10124af6c9/ZEO-5.0.0.tar.gz"
      }
    ],
    "5.0.0a0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b7afce7b963b986f343086c5acd6bd44",
          "sha256": "50d3c939955160ea6805050a42a95af07a29f3cdfa78fe0a65ef4fe0cec84a47"
        },
        "downloads": -1,
        "filename": "ZEO-5.0.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "b7afce7b963b986f343086c5acd6bd44",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 284117,
        "upload_time": "2016-07-08T13:56:41",
        "url": "https://files.pythonhosted.org/packages/e4/1c/acb28be0837ec200210b03ae68fef4e719074f795a791baa62a578c50a6b/ZEO-5.0.0a0.tar.gz"
      }
    ],
    "5.0.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6361744888f29468d3ca1f2fbf705f0e",
          "sha256": "1d8a978ac95d7728a9444d5574778bb71747c45e1fc8fff84ab574a2b2f7d9d2"
        },
        "downloads": -1,
        "filename": "ZEO-5.0.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "6361744888f29468d3ca1f2fbf705f0e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 288528,
        "upload_time": "2016-07-21T15:58:12",
        "url": "https://files.pythonhosted.org/packages/5f/ee/852f4a291d64e0bafd8663bd63652baa663254421d12ef103ae2052ead99/ZEO-5.0.0a1.tar.gz"
      }
    ],
    "5.0.0a2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "753f0112b37ce2e1be7ea23c248d7d06",
          "sha256": "0c17c12caaecf6d6b7d19f9f80b93a0d68a4eff3e7abd338f85f740b133ed2bf"
        },
        "downloads": -1,
        "filename": "ZEO-5.0.0a2.tar.gz",
        "has_sig": false,
        "md5_digest": "753f0112b37ce2e1be7ea23c248d7d06",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 290049,
        "upload_time": "2016-07-30T10:22:19",
        "url": "https://files.pythonhosted.org/packages/b8/2e/d44627a825d7f63a4828ef143f078d03694c9123c8de338c2317280590ac/ZEO-5.0.0a2.tar.gz"
      }
    ],
    "5.0.0b0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "780f7fabc1dd975c07e1024b3579a61a",
          "sha256": "715bf5a5566d1e9f57b9bde263ea61acc80c81a7ad9befbaf7fd7f892bdd1831"
        },
        "downloads": -1,
        "filename": "ZEO-5.0.0b0.tar.gz",
        "has_sig": false,
        "md5_digest": "780f7fabc1dd975c07e1024b3579a61a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 360728,
        "upload_time": "2016-08-18T13:17:01",
        "url": "https://files.pythonhosted.org/packages/a8/19/8f1a4a022d40450d56bb0eb6dd296bc3157888cd2b28ecae42c8acdd222e/ZEO-5.0.0b0.tar.gz"
      }
    ],
    "5.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6d138445e2e3dcef8bc50361f077407c",
          "sha256": "ce843018b17138a548c59ac5e98b4492ecced4324f561455e9239fb766c2699a"
        },
        "downloads": -1,
        "filename": "ZEO-5.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6d138445e2e3dcef8bc50361f077407c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 328782,
        "upload_time": "2016-09-06T14:58:22",
        "url": "https://files.pythonhosted.org/packages/a0/24/732aac114931ba3c932d4560edf2a608fe5be47233103d9fd57112203a26/ZEO-5.0.1.tar.gz"
      }
    ],
    "5.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a2f4959beb65488950faf681e4cad411",
          "sha256": "68ec9a2a581dc0630e3dbd83f5a47fa7aaff7b243af804a8a85a26bc8c231fde"
        },
        "downloads": -1,
        "filename": "ZEO-5.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a2f4959beb65488950faf681e4cad411",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 371917,
        "upload_time": "2016-11-01T17:37:31",
        "url": "https://files.pythonhosted.org/packages/8d/19/5eba4c05acc5f55a28b782e6342cdf4e182e8fce011c9cb00d3851d067f1/ZEO-5.0.2.tar.gz"
      }
    ],
    "5.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "00bb007a1abdcc22daed14ef1ecbc258",
          "sha256": "21c037e0cd4cf7011c5eac9565ea495316c334485c535934e9b8e126c5b871cf"
        },
        "downloads": -1,
        "filename": "ZEO-5.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "00bb007a1abdcc22daed14ef1ecbc258",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 386157,
        "upload_time": "2016-11-18T16:03:08",
        "url": "https://files.pythonhosted.org/packages/e1/52/c09f6a348474d569c49f33e354d805f8bff2738990f8005ff925df4f3439/ZEO-5.0.3.tar.gz"
      }
    ],
    "5.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ae94e63e7b002857b87c194d2d457715",
          "sha256": "6462adb6e41735942ce2f120328c9e170468552d61075a4087b68d0637244b2f"
        },
        "downloads": -1,
        "filename": "ZEO-5.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ae94e63e7b002857b87c194d2d457715",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 386783,
        "upload_time": "2016-11-18T19:11:41",
        "url": "https://files.pythonhosted.org/packages/be/d0/c2a4d4764d89e45ec5a8ecf619afe94f7a3caebc2eb36d0f48ce9e972f04/ZEO-5.0.4.tar.gz"
      }
    ],
    "5.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "571b95602bf1ef67ecdfb345fbf12f48",
          "sha256": "142edf8fcabaeec8c438319d71a12a1d4461befa9111a073c362b75e481e7522"
        },
        "downloads": -1,
        "filename": "ZEO-5.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "571b95602bf1ef67ecdfb345fbf12f48",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 266903,
        "upload_time": "2017-04-03T13:07:34",
        "url": "https://files.pythonhosted.org/packages/d3/ca/7e7ccc650be679058b1dceebd19521120fba11689996a73cd2cad5c43875/ZEO-5.1.0.tar.gz"
      }
    ],
    "5.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cd303604d9b91a5ce5c9b4bc37ebe6fe",
          "sha256": "bb4fcf272ea2d3df5b5faacf66a71ec32d1413070cb1a0ca2e1cccfa8229a0e7"
        },
        "downloads": -1,
        "filename": "ZEO-5.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cd303604d9b91a5ce5c9b4bc37ebe6fe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 274204,
        "upload_time": "2017-12-18T15:55:49",
        "url": "https://files.pythonhosted.org/packages/16/f3/52e390acdfaa8ce2c0c2b42cf7fb2c703524cb2276c08071c9b1c99ba343/ZEO-5.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "cd303604d9b91a5ce5c9b4bc37ebe6fe",
        "sha256": "bb4fcf272ea2d3df5b5faacf66a71ec32d1413070cb1a0ca2e1cccfa8229a0e7"
      },
      "downloads": -1,
      "filename": "ZEO-5.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "cd303604d9b91a5ce5c9b4bc37ebe6fe",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 274204,
      "upload_time": "2017-12-18T15:55:49",
      "url": "https://files.pythonhosted.org/packages/16/f3/52e390acdfaa8ce2c0c2b42cf7fb2c703524cb2276c08071c9b1c99ba343/ZEO-5.1.1.tar.gz"
    }
  ]
}