{
  "info": {
    "author": "Ken Kundert",
    "author_email": "inform@nurdletech.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Utilities"
    ],
    "description": "Inform - Print & Logging Utilities\n==================================\n\n.. image:: https://img.shields.io/travis/KenKundert/inform/master.svg\n    :target: https://travis-ci.org/KenKundert/inform\n\n.. image:: https://img.shields.io/coveralls/KenKundert/inform.svg\n    :target: https://coveralls.io/r/KenKundert/inform\n\n.. image:: https://img.shields.io/pypi/v/inform.svg\n    :target: https://pypi.python.org/pypi/inform\n\n.. image:: https://img.shields.io/pypi/pyversions/inform.svg\n    :target: https://pypi.python.org/pypi/inform/\n\n.. IGNORE: pypi statistics are broken and unlikely to be fixed\n    .. image:: https://img.shields.io/pypi/dd/inform.svg\n        :target: https://pypi.python.org/pypi/inform/\n\n| Version: 1.10.0\n| Released: 2017-11-21\n|\n\nA light-weight package with few dependencies that provides various print-like \nfunctions that are used when communicating with the user. It allows you to \neasily print attractive, informative, and consistent error messages.  For \nexample:\n\n.. code-block:: python\n\n    >> from inform import display, warn, error\n    >> display(\n    ..     'Display is like print'\n    ..     'except that it supports logging and can be disabled.'\n    ..     sep=', ')\n    Display is like print, except that it supports logging and can be disabled.\n\n    >> warn('warnings get a header that is printed in yellow.')\n    warning: warnings get a header that is printed in yellow.\n\n    >> error('errors get a header that is printed in red.')\n    error: errors get a header that is printed in red.\n\nInform also provides logging and output control.\n\nInstall with::\n\n    pip install inform\n\nSupported in Python2.7, Python3.3, Python3.4, Python3.5, and Python3.6.\n\n\nIntroduction\n------------\n\nThis package defines a collection of 'print' functions that have different \nroles.  These functions are referred to as 'informants' and are described below \nin the Informants section. They include include *log*, *comment*, *codicil*, \n*narrate*, *display*, *output*, *notify*, *debug*, *warn*, *error*, *fatal* and \n*panic*.\n\nWith the simplest use of the program, you simply import the informants you need \nand call them (they take the same arguments as Python's built-in *print* \nfunction):\n\n.. code-block:: python\n\n    >>> from inform import display\n    >>> display('ice', 9)\n    ice 9\n\nFor more control of the informants, you can import and instantiate the Inform \nclass yourself along with the desired informants.  This gives you the ability to \nspecify options:\n\n.. code-block:: python\n\n    >>> from inform import Inform, display, error\n    >>> Inform(logfile=False, prog_name=False)\n    <...>\n    >>> display('hello')\n    hello\n    >>> error('file not found.', culprit='data.in')\n    error: data.in: file not found.\n\nAn object of the Inform class is referred to as an informer (not to be confused \nwith the print functions, which are  referred to as informants). Once \ninstantiated, an informer can be used to terminate the program or return a count \nof the number of errors that have occurred.\n\n.. code-block:: python\n\n    >>> from inform import Inform, error\n    >>> informer = Inform(prog_name=\"prog\")\n    >>> error('file not found.', culprit='data.in')\n    prog error: data.in: file not found.\n    >>> informer.errors_accrued()\n    1\n\nYou can also use a *with* statement to invoke the informer. This closes the \ninformer when the *with* statement terminates (you must not use the informants \nwhen no informer is present). This is useful when writing tests. In this case \nyou can provide your own output streams so that you can access the normally \nprinted output of your code:\n\n.. code-block:: python\n\n    >>> from inform import Inform, display\n    >>> import sys\n    >>> if sys.version[0] == '2':\n    ...     # io assumes unicode, which python2 does not provide by default\n    ...     # so use StringIO instead\n    ...     from StringIO import StringIO\n    ...     # Add support for with statement by monkeypatching\n    ...     StringIO.__enter__ = lambda self: self\n    ...     StringIO.__exit__ = lambda self, exc_type, exc_val, exc_tb: self.close()\n    ... else:\n    ...     from io import StringIO\n\n    >>> def run_test():\n    ...     display('running test')\n\n    >>> with StringIO() as stdout, \\\n    ...      StringIO() as stderr, \\\n    ...      StringIO() as logfile, \\\n    ...      Inform(stdout=stdout, stderr=stderr, logfile=logfile) as msg:\n    ...         run_test()\n    ...\n    ...         num_errors = msg.errors_accrued()\n    ...         output_text = stdout.getvalue()\n    ...         error_text = stderr.getvalue()\n    ...         logfile_text = logfile.getvalue()\n\n    >>> num_errors\n    0\n\n    >>> str(output_text)\n    'running test\\n'\n\n    >>> str(error_text)\n    ''\n\n    >>> str(logfile_text[:10]), str(logfile_text[-13:])\n    ('Invoked as', 'running test\\n')\n\nYou can create your own informants:\n\n.. code-block:: python\n\n    >>> from inform import Inform, InformantFactory\n\n    >>> verbose1 = InformantFactory(output=lambda m: m.verbosity >= 1)\n    >>> verbose2 = InformantFactory(output=lambda m: m.verbosity >= 2)\n    >>> with Inform(verbosity=0):\n    ...     verbose1('First level of verbosity.')\n    ...     verbose2('Second level of verbosity.')\n\n    >>> with Inform(verbosity=1):\n    ...     verbose1('First level of verbosity.')\n    ...     verbose2('Second level of verbosity.')\n    First level of verbosity.\n\n    >>> with Inform(verbosity=2):\n    ...     verbose1('First level of verbosity.')\n    ...     verbose2('Second level of verbosity.')\n    First level of verbosity.\n    Second level of verbosity.\n\nThe argument *verbosity* is not an explicitly supported argument to Inform.  In \nthis case Inform simply saves the value and makes it available as an attribute, \nand it is this attribute that is queried by the lambda function passed to the \nInformantFactory when creating the informants.\n\n\nException\n---------\nAn exception, *Error*, is provided that takes the same arguments as an \ninformant.  This allows you to catch the exception and handle it if you like.  \nThe exception provides the *report* and *terminate* methods that processes the \nexception as an error or fatal error if you find that you can do nothing else \nwith the exception:\n\n.. code-block:: python\n\n    >>> from inform import Inform, Error\n\n    >>> Inform(prog_name='myprog')\n    <...>\n    >>> try:\n    ...     raise Error('must not be zero.', culprit='naught')\n    ... except Error as e:\n    ...     e.report()\n    myprog error: naught: must not be zero.\n\n*Error* also provides get_message() and get_culprit() methods, which return the \nmessage and the culprit. You can also cast the exception to a string to get \na string that contains both the message and the culprit formatted so that it can \nbe shown to the user.\n\nAny keyword arguments provided will be available in *e.kwargs*, but certain \nkeyword arguments are reserved by inform (see above).\n\nOne common approach to using *Error* is to pass all the arguments that make up \nthe error message as unnamed arguments and then assemble them into the message \nby providing a template.  In that way the arguments are directly available to \nthe handler if needed. For example:\n\n.. code-block:: python\n\n    >>> from difflib import get_close_matches\n    >>> from inform import Error, codicil, conjoin, fmt\n\n    >>> known_names = 'alpha beta gamma delta epsilon'.split()\n    >>> name = 'alfa'\n\n    >>> try:\n    ...     if name not in known_names:\n    ...         raise Error(name, template=\"name '{}' is not defined.\")\n    ... except Error as e:\n    ...     candidates = get_close_matches(e.args[0], known_names, 1, 0.6)\n    ...     candidates = conjoin(candidates, conj=' or ')\n    ...     e.report()\n    ...     codicil(fmt('Did you mean {candidates}?'))\n    myprog error: name 'alfa' is not defined.\n        Did you mean alpha?\n\n\nInform Class\n------------\nThe Inform class controls the active informants. It takes the following \narguments as options (the value given for the argument is its default):\n\nArguments\n\"\"\"\"\"\"\"\"\"\n\nmute=False (bool)\n   With the provided informants all output is suppressed when set (it is still \n   logged). This is generally used when the program being run is being run by \n   another program that is generating its own messages and does not want the \n   user confused by additional messages. In this case, the calling program is \n   responsible for observing and reacting to the exit status of the called \n   program.\nquiet=False (bool):\n   With the provided informants normal output is suppressed when set (it is \n   still logged). This is used when the user has indicated that they are \n   uninterested in any conversational messages and just want to see the \n   essentials (generally error messages).\nverbose=False (bool):\n   With the provided informants comments are output to user when set; normally \n   they are just logged. Comments are generally used to document unusual \n   occurrences that might warrant the user's attention.\nnarrate=False (bool):\n   With the provided informants narration is output to user when set, normally \n   it is just logged.  Narration is generally used to inform the user as to what \n   is going on. This can help place errors and warnings in context so that they \n   are easier to understand.\nlogfile=False (string or stream):\n   May be a string, in which case it is taken to be the path of the logfile.  \n   May be *True*, in which case ./.<prog_name>.log is used.  May be an open \n   stream.  Or it may be *False*, in which case no log file is created.\nprog_name=True (string):\n   The program name. Is appended to the message headers and used to create the \n   default logfile name. May be a string, in which case it is used as the name \n   of the program.  May be *True*, in which case basename(argv[0]) is used.  May \n   be *False* to indicate that program name should not be added to message \n   headers.\nargv=None (list of strings):\n   System command line arguments (logged). By default, sys.argv is used. If \n   False is passed in, argv is not logged and argv[0] is not available to be the \n   program name.\nversion=None (string):\n   Program version (logged if provided).\ntermination_callback=None (func):\n   A function that is called at program termination.\ncolorscheme='dark' (*None*, 'light', or 'dark'):\n   Color scheme to use. *None* indicates that messages should not be colorized.  \n   Colors are not used if output stream is not a TTY.\nflush=False (bool):\n   Flush the stream after each write. Is useful if you program is crashing, \n   causing loss of the latest writes. Can cause programs to run considerably \n   slower if they produce a lot of output. Not available with python2.\nstdout=None (stream):\n   Messages are sent here by default. Generally used for testing. If \n   not given, sys.stdout is used.\nstderr=None (stream):\n   Termination messages are sent here by default. Generally used for \n   testing.  If not given, sys.stderr is used.\nlength_thresh=80\n   If length of line would be greater than this, split header from body.\nculprit_sep=', '\n   Join string used for culprit collections.\n\\**kwargs:\n   Any additional keyword arguments are made attributes that are ignored by \n   Inform, but may be accessed by the informants.\n\nMethods\n\"\"\"\"\"\"\"\n\nThe Inform class provides the following user accessible methods. Most of these \nmethods are also available as functions, which act on the current informer.\n\nsuppress_output():\n   Allows you to change the mute flag (only available as a method).\n\nset_logfile():\n   Allows you to change the logfile (only available as a method).\n\ndone():\n   Terminates the program normally (exit status is 0).\n\nterminate(status = *None*):\n   Terminate the program with the given exit status. If specified, the exit \n   status should be a positive integer less than 128. Usually, the following \n   values are used:\n\n   | 0: success  \n   | 1: unexpected error \n   | 2: invalid invocation\n   | 3: panic\n\n   If the exit status is not specified, then the exit status is set to 1 if an \n   error occurred and 0 otherwise.\n\n   You may also pass a string for the status, in which case the program prints \n   the string to stderr and terminates with an exit status of 1.\n\nterminate_if_errors(status=1):\n   Terminate the program with the given exit status if an error has occurred.  \n\nerrors_accrued(reset = *False*):\n   Return the number of errors that have accrued.\n\ndisconnect():\n   Deactivate the current informer, restoring the default.\n\nFunctions\n\"\"\"\"\"\"\"\"\"\n\nSeveral of the above methods are also available as stand-alone functions that \nact on the currently active informer.  This make it easy to use their \nfunctionality even if you do not have local access to the informer. They are:\n\n| done()\n| terminate()\n| terminate_if_errors()\n| errors_accrued()\n\nInformantFactory Class\n----------------------\nThe InformantFactory class takes the following arguments:\n\nseverity = *None*:\n   Messages with severities get headers. The header consists of the severity, \n   the program name (if desired), and the culprit (if provided). If the message \n   text does not contain a newline it is appended to the header.  Otherwise the \n   message text is indented and placed on the next line.\nis_error = *False*:\n   Should message be counted as an error.\nlog = *True*:\n   Send message to the log file. May be a boolean or a function that accepts the \n   Inform object as an argument and returns a boolean.\noutput = *True*:\n   Send to the output stream. May be a boolean or a function that accepts the \n   Inform object as an argument and returns a boolean.\nnotify = *False*:\n   Send message to the notifier.  The notifier will display the message that \n   appears temporarily in a bubble at the top of the screen.  May be a boolean \n   or a function that accepts the informer as an argument and returns a boolean.\nterminate = *False*:\n   Terminate the program, exit status is the value of the terminate unless \n   *terminate* is *True*, in which case 1 is returned if an error occurred and \n   0 otherwise.\nis_continuation = *False*:\n   This message is a continuation of the previous message.  It will use the \n   properties of the previous message (output, log, message color, etc) and if \n   the previous message had a header, that header is not output and instead the \n   message is indented.\nmessage_color = *None*:\n   Color used to display the message. Choose from *black*, *red*, *green*, \n   *yellow*, *blue*, *magenta*, *cyan*, *white*.\nheader_color = *None*:\n   Color used to display the header, if one is produced.\n\nAn object of InformantFactory is referred to as an informant. It is generally \ntreated as a function that is called to produce the desired output.\n\n.. code-block:: python\n\n    >>> from inform import InformantFactory\n\n    >>> succeed = InformantFactory(message_color='green')\n    >>> fail = InformantFactory(message_color='red')\n\n    >>> succeed('This message would be green.')\n    This message would be green.\n\n    >>> fail('This message would be red.')\n    This message would be red.\n\n\nStandard Informants\n-------------------\n\nThe following informants are provided. All of the informants except panic and \ndebug do not produce any output if *mute* is set.\n\nlog\n\"\"\"\n\n.. code-block:: python\n\n   log = InformantFactory(\n       output=False,\n       log=True,\n   )\n\nSaves a message to the log file without displaying it.\n\n\ncomment\n\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n   comment = InformantFactory(\n       output=lambda informer: informer.verbose and not informer.mute,\n       log=True,\n       message_color='cyan',\n   )\n\nDisplays a message only if *verbose* is set. Logs the message. The message is \ndisplayed in cyan.\n\nComments are generally used to document unusual occurrences that might warrant \nthe user's attention.\n\ncodicil\n\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n   codicil = InformantFactory(is_continuation=True)\n\nContinues a previous message. Continued messages inherit the properties (output, \nlog, message color, etc) of the previous message.  If the previous message had \na header, that header is not output and instead the message is indented.\n\n.. code-block:: python\n\n    >>> from inform import Inform, warn, codicil\n    >>> informer = Inform(prog_name=\"myprog\")\n    >>> warn('file not found.', culprit='ghost')\n    myprog warning: ghost: file not found.\n\n    >>> codicil('skipping')\n        skipping\n\n\nnarrate\n\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n   narrate = InformantFactory(\n       output=lambda informer: informer.narrate and not informer.mute,\n       log=True,\n       message_color='blue',\n   )\n\nDisplays a message only if *narrate* is set. Logs the message. The message is \ndisplayed in blue.\n\nNarration is generally used to inform the user as to what is going on. This can \nhelp place errors and warnings in context so that they are easier to understand.\nDistinguishing narration from comments allows them to colored differently and \ncontrolled separately.\n\n\ndisplay\n\"\"\"\"\"\"\"\n\n.. code-block:: python\n\n   display = InformantFactory(\n       output=lambda informer: not informer.quiet and not informer.mute,\n       log=True,\n   )\n\nDisplays a message if *quiet* is not set. Logs the message.\n\n.. code-block:: python\n\n    >>> from inform import display\n    >>> display('We the people ...')\n    We the people ...\n\n\noutput\n\"\"\"\"\"\"\n\n.. code-block:: python\n\n   output = InformantFactory(\n       output=lambda informer: not informer.mute,\n       log=True,\n   )\n\nDisplays and logs a message. This is used for messages that are not errors that \nare noteworthy enough that they need to get through even though the user has \nasked for quiet.\n\n.. code-block:: python\n\n    >>> from inform import output\n    >>> output('We the people ...')\n    We the people ...\n\n\nnotify\n\"\"\"\"\"\"\n\n.. code-block:: python\n\n   notify = InformantFactory(\n       notify=True,\n       log=True,\n   )\n\nTemporarily display the message in a bubble at the top of the screen.  Also \nprints the message on the standard output and sends it to the log file.  This is \nused for messages that the user is otherwise unlikely to see because they have \nno access to the standard output.\n\n.. code-block:: python\n\n    >>> from inform import output\n    >>> output('We the people ...')\n    We the people ...\n\n\ndebug\n\"\"\"\"\"\n\n.. code-block:: python\n\n   debug = InformantFactory(\n       severity='DEBUG',\n       output=True,\n       log=True,\n       header_color='magenta',\n   )\n\nDisplays and logs a debugging message. A header with the label *DEBUG* is added \nto the message and the header is colored magenta.\n\n.. code-block:: python\n\n    >>> from inform import Inform, debug\n    >>> informer = Inform(prog_name=\"myprog\")\n    >>> debug('HERE!')\n    myprog DEBUG: HERE!\n\nThe *debug* informant is being deprecated in favor of the debugging functions \n``ddd()``, ``ppp()``, ``sss()`` and ``vvv()``.\n\n\nwarn\n\"\"\"\"\n\n.. code-block:: python\n\n   warn = InformantFactory(\n       severity='warning',\n       header_color='yellow',\n       output=lambda informer: not informer.quiet and not informer.mute,\n       log=True,\n   )\n\nDisplays and logs a warning message. A header with the label *warning* is added \nto the message and the header is colored yellow.\n\n.. code-block:: python\n\n    >>> from inform import Inform, warn\n    >>> informer = Inform(prog_name=\"myprog\")\n    >>> warn('file not found, skipping.', culprit='ghost')\n    myprog warning: ghost: file not found, skipping.\n\n\nerror\n\"\"\"\"\"\n\n.. code-block:: python\n\n   error = InformantFactory(\n       severity='error',\n       is_error=True,\n       header_color='red',\n       output=lambda informer: not informer.mute,\n       log=True,\n   )\n\nDisplays and logs an error message. A header with the label *error* is added to \nthe message and the header is colored red.\n\n.. code-block:: python\n\n    >>> from inform import Inform, error\n    >>> informer = Inform(prog_name=\"myprog\")\n    >>> error('invalid value specified, expected number.', culprit='count')\n    myprog error: count: invalid value specified, expected number.\n\nfatal\n\"\"\"\"\"\n\n.. code-block:: python\n\n   fatal = InformantFactory(\n       severity='error',\n       is_error=True,\n       terminate=1,\n       header_color='red',\n       output=lambda informer: not informer.mute,\n       log=True,\n   )\n\nDisplays and logs an error message. A header with the label *error* is added to \nthe message and the header is colored red. The program is terminated with an \nexit status of 1.\n\n\npanic\n\"\"\"\"\"\n\n.. code-block:: python\n\n   panic = InformantFactory(\n       severity='internal error (please report)',\n       is_error=True,\n       terminate=3,\n       header_color='red',\n       output=True,\n       log=True,\n   )\n\nDisplays and logs a panic message. A header with the label *internal error* is \nadded to the message and the header is colored red. The program is terminated \nwith an exit status of 3.\n\n\nInformant Control\n-----------------\n\nThe exception (Error) and all informants take arguments very much like the \nstandard print function: unnamed arguments are converted to strings and joined \ntogether to produce the output, the named arguments act to control the process.  \nThe available controls (named arguments) are:\n\nsep = ' ':\n   Specifies the string used to join the unnamed arguments.\ntemplate = None:\n   A template that if present interpolates the arguments to form the final \n   message rather than simply joining the unnamed arguments with *sep*. The \n   template is a string, and its *format* method is called with the unnamed and \n   named arguments of the message passed as arguments.\nend = '\\\\n':\n   Specifies a string to append to the message.\nwrap = False:\n   Specifies whether message should be wrapped. *wrap* may be True, in which \n   case the default width of 70 is used.  Alternately, you may specify the \n   desired width. The wrapping occurs on the final message after the arguments \n   have been joined.\nculprit = *None*:\n   A string that is added to the beginning of the message that identifies the \n   culprit (the object for which the problem being reported was found). May also \n   be a collection of strings, in which case they are joined with *culprit_sep* \n   (default is ', ').\nfile = stdout:\n   The destination stream (a file pointer).\nflush = *False*:\n   Whether the message should flush the destination stream (not available in \n   python2).\n\nHere is an example that demonstrates the wrap and composite culprit features.\n\n..  code-block:: python\n\n   >>> value = -1\n   >>> error(\n   ...     'Encountered illegal value',\n   ...     value,\n   ...     'when filtering. Consider regenerating data again.',\n   ...     culprit=('input.data', 32), wrap=True,\n   ... )\n   myprog error: input.data, 32:\n       Encountered illegal value -1 when filtering. Consider regenerating\n       data again.\n\n\nUtilities\n---------\n\nSeveral utility functions are provided for your convenience. They are often \nhelpful when creating messages.\n\nindent(text, leader='    ',  first=0, stops=1, sep='\\\\n'):\n    Indents the text. Multiples of *leader* are added to the beginning of the \n    lines to indent.  *first* is the number of indentations used for the first \n    line relative to the others (may be negative but (first + stops) should not \n    be. *stops* is the default number of indentations to use. *sep* is the \n    string used to separate the lines.\n\nconjoin(iterable, conj=' and ', sep=', '):\n    Like ''.join(), but allows you to specify a conjunction that is placed \n    between the last two elements, ex:\n\n    .. code-block:: python\n\n        >>> from inform import conjoin\n        >>> conjoin(['a', 'b', 'c'])\n        'a, b and c'\n\n        >>> conjoin(['a', 'b', 'c'], conj=' or ')\n        'a, b or c'\n\ncull(collection, [remove]):\n    Strips items from a list that have a particular value. By default, it strips \n    a list of values that would be False when cast to a boolean (0, False, None, \n    '', (), [], etc.).  A particular value may be specified using the 'remove' \n    as a keyword argument.  The value of remove may be a collection, in which \n    case any value in the collection is removed, or it may be a function, in \n    which case it takes a single item as an argument and returns *True* if that \n    item should be removed from the list.\n\nfmt(msg, \\*args, \\**kwargs):\n    Similar to ''.format(), but it can pull arguments from the local scope.\n\nrender(obj, sort=None, level=0, tab='    '):\n    Recursively convert an object to a string with reasonable formatting.  Has \n    built in support for the base Python types (None, bool, int, float, str, \n    set, tuple, list, and dict).  If you confine yourself to these types, the \n    output of render() can be read by the Python interpreter. Other types are \n    converted to string with repr(). The dictionary keys and set values are \n    sorted if sort is True. Sometimes this is not possible because the values \n    are not comparable, in which case render reverts to the natural order.\n\nplural(count, singular_form, plural_form = *None*):\n    Produces either the singular or plural form of a word based on a count.\n    The count may be an integer, or an iterable, in which case its length is \n    used. If the plural form is not give, the singular form is used with an 's' \n    added to the end.\n\nfull_stop(string):\n    Adds a period to the end of the string if needed (if the last character is \n    not a period, question mark or exclamation mark). It applies str() to its \n    argument, so it is generally a suitable replacement for str in \n    str(exception) when trying extract an error message from an exception.\n\ncolumns(array, pagewidth=79, alignment='<', leader='    ')\n    Distribute array over enough columns to fill the screen.\n\nos_error(exception):\n    Generates clean messages for operating system errors.\n\nis_str(obj):\n    Returns *True* if its argument is a string-like object.\n\nis_iterable(obj):\n    Returns *True* if its argument is iterable.\n\nis_collection(obj):\n    Returns *True* if its argument is iterable but is not a string.\n\nFor example:\n\n.. code-block:: python\n\n    >>> from inform import Inform, display, error, conjoin, cull, fmt, plural, os_error\n\n    >>> Inform(prog_name=False)\n    <...>\n    >>> filenames = cull(['a', 'b', None, 'd'])\n    >>> filetype = 'CSV'\n    >>> display(\n    ...     fmt(\n    ...         'Reading {filetype} {files}: {names}.',\n    ...         files=plural(filenames, 'file'),\n    ...         names=conjoin(filenames),\n    ...     )\n    ... )\n    Reading CSV files: a, b and d.\n\n    >>> contents = {}\n    >>> for name in filenames:\n    ...     try:\n    ...         with open(name) as f:\n    ...             contents[name] = f.read()\n    ...     except IOError as e:\n    ...         error(os_error(e))\n    error: a: no such file or directory.\n    error: b: no such file or directory.\n    error: d: no such file or directory.\n\nNotice that *filetype* was not explicitly passed into *fmt()* even though it was \nexplicitly called out in the format string.  *filetype* can be left out of the \nargument list because if *fmt* does not find a named argument in its argument \nlist, it will look for a variable of the same name in the local scope.\n\nHere is an example of render():\n\n.. code-block:: python\n\n    >>> from inform import render, display\n    >>> s1='alpha string'\n    >>> s2='beta string'\n    >>> n=42\n    >>> S={s1, s2}\n    >>> L=[s1, n, S]\n    >>> d = {1:s1, 2:s2}\n    >>> D={'s': s1, 'n': n, 'S': S, 'L': L, 'd':d}\n    >>> display('D', '=', render(D, True))\n    D = {\n        'L': [\n            'alpha string',\n            42,\n            {'alpha string', 'beta string'},\n        ],\n        'S': {'alpha string', 'beta string'},\n        'd': {1: 'alpha string', 2: 'beta string'},\n        'n': 42,\n        's': 'alpha string',\n    }\n\n    >>> E={'s': s1, 'n': n, 'S': S, 'L': L, 'd':d, 'D':D}\n    >>> display('E', '=', render(E, True))\n    E = {\n        'D': {\n            'L': [\n                'alpha string',\n                42,\n                {'alpha string', 'beta string'},\n            ],\n            'S': {'alpha string', 'beta string'},\n            'd': {1: 'alpha string', 2: 'beta string'},\n            'n': 42,\n            's': 'alpha string',\n        },\n        'L': [\n            'alpha string',\n            42,\n            {'alpha string', 'beta string'},\n        ],\n        'S': {'alpha string', 'beta string'},\n        'd': {1: 'alpha string', 2: 'beta string'},\n        'n': 42,\n        's': 'alpha string',\n    }\n\nFinally, here is an example of full_stop and columns. It prints out the phonetic \nalphabet.\n\n.. code-block:: python\n\n    >>> from inform import columns, full_stop\n    >>> title = 'Display the NATO phonetic alphabet'\n    >>> words = \"\"\"\n    ...     Alfa Bravo Charlie Delta Echo Foxtrot Golf Hotel India Juliett Kilo\n    ...     Lima Mike November Oscar Papa Quebec Romeo Sierra Tango Uniform\n    ...     Victor Whiskey X-ray Yankee Zulu\n    ... \"\"\".split()\n    >>> display(full_stop(title), columns(words), sep='\\n')\n    Display the NATO phonetic alphabet.\n        Alfa      Echo      India     Mike      Quebec    Uniform   Yankee\n        Bravo     Foxtrot   Juliett   November  Romeo     Victor    Zulu\n        Charlie   Golf      Kilo      Oscar     Sierra    Whiskey\n        Delta     Hotel     Lima      Papa      Tango     X-ray\n\nDebugging Functions\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nThe debugging functions are intended to be used when you want to print something \nout when debugging your program.  They are colorful to make it easier to find \nthem amoung the program's normal output, and a header is added that describes \nthe location they were called from. This makes it easier to distinguish several \ndebug message and also makes it easy to find and remove the functions once you \nare done debugging.\n\nppp(\\*args, \\*\\*kwargs):\n    This function is very similar to the normal Python print function in that it \n    prints out the values of the unnamed arguments under the control of the \n    named arguments. It also takes the same named arguments as ``print()``, such \n    as ``sep`` and ``end``.\n\n    If given without unnamed arguments, it will just print the header, which \n    good way of confirming that a line of code has been reached.\n\n    .. code:: python\n\n        >>> from inform import ppp, ddd, sss, vvv\n        >>> a = 1\n        >>> b = 'this is a test'\n        >>> c = (2, 3)\n        >>> d = {'a': a, 'b': b, 'c': c}\n        >>> ppp(a, b, c)\n        DEBUG: <doctest README.rst[89]>:1, __main__:\n            1 this is a test (2, 3)\n\nddd(\\*args, \\*\\*kwyargs):\n    This function is pretty prints all of both the unnamed and named arguments.\n\n    .. code:: python\n\n        >>> ddd(a, b, c, d)\n        DEBUG: <doctest README.rst[90]>:1, __main__:\n            1\n            'this is a test'\n            (2, 3)\n            {\n                'a': 1,\n                'b': 'this is a test',\n                'c': (2, 3),\n            }\n\n    If you give named arguments, the name is prepended to its value:\n\n    .. code:: python\n\n        >>> ddd(a=a, b=b, c=c, d=d, s='hey now!')\n        DEBUG: <doctest README.rst[91]>:1, __main__:\n            a = 1\n            b = 'this is a test'\n            c = (2, 3)\n            d = {\n                'a': 1,\n                'b': 'this is a test',\n                'c': (2, 3),\n            }\n            s = 'hey now!'\n\n    If an arguments has a __dict__ attribute, it is printed rather than the \n    argument itself.\n\n    .. code:: python\n\n        >>> class Info:\n        ...     def __init__(self, **kwargs):\n        ...         self.__dict__.update(kwargs)\n        ...         ddd(self=self)\n\n        >>> contact = Info(email='ted@ledbelly.com', name='Ted Ledbelly')\n        DEBUG: <doctest README.rst[92]>:4, __main__.Info.__init__():\n            self = {\n                'email': 'ted@ledbelly.com',\n                'name': 'Ted Ledbelly',\n            }\n\nvvv(\\*args):\n    This function prints variables from the calling scope. If no arguments are \n    given, then all the variables are printed. You can optionally give specific \n    variables on the argument list and only those variables are printed.\n\n    .. code:: python\n\n        >>> vvv(b, d)\n        DEBUG: <doctest README.rst[94]>:1, __main__:\n            b = 'this is a test'\n            d = {\n                'a': 1,\n                'b': 'this is a test',\n                'c': (2, 3),\n            }\n\n    This last feature is not completely robust. The checking is done by value, \n    so if several variables share the value of one requested, they are all \n    shown.\n\n    .. code:: python\n\n        >>> aa = 1\n        >>> vvv(a)\n        DEBUG: <doctest README.rst[96]>:1, __main__:\n            a = 1\n            aa = 1\n\nsss(\\*args):\n    This function prints a stack trace, which can answer the *How did I get \n    here?* question better than a simple print function.\n\n    .. code:: python\n\n        >> def foo():\n        ..     sss()\n        ..     print('CONTINUING')\n\n        >> foo()\n        DEBUG: <doctest README.rst[93]>:2, __main__.foo():\n            Traceback (most recent call last):\n                ...\n        CONTINUING\n\n\nColor Class\n\"\"\"\"\"\"\"\"\"\"\"\n\nThe Color class creates colorizers, which are used to render text in \na particular color.  They are like the Python print function in that they take \nany number of unnamed arguments that are converted to strings and then joined \ninto a single string. The string is then coded for the chosen color and \nreturned. For example:\n\n.. code-block:: python\n\n   >> from inform import Color, display\n\n   >> green = Color('green')\n   >> red = Color('red')\n   >> success = green('pass:')\n   >> failure = red('FAIL:')\n\n   >> failures = {'outrigger': True, 'signalman': False}\n   >> for name, fails in failures.items():\n   ..     result = failure if fails else success\n   ..     display(result, name)\n   FAIL: outrigger\n   pass: signalman\n\nWhen the messages print, the 'pass:' will be green and 'FAIL:' will be red.\n\nThe Color class has the concept of a colorscheme. There are three supported \nschemes: *None*, light, and dark. With *None* the text is not colored. In \ngeneral it is best to use the light colorscheme on dark backgrounds and the dark \ncolorscheme on light backgrounds.\n\nThe Color class takes the following arguments when creating a colorizer:\n\ncolor:\n   Render the text in the specified color. Choose from *None*, 'black', 'red', \n   'green', 'yellow', 'blue', 'magenta', 'cyan' or 'white'.\n\nscheme = 'dark':\n   Use the specified colorscheme when rendering the text.\n   Choose from *None*, 'light' or 'dark'.\n\nenable = True:\n   If set to False, the colorizer does not render the text in color.\n\nA colorizer takes the following arguments:\n\nunnamed arguments:\n   The unnamed arguments are converted to strings and joined to form the text to \n   be colored.\n\nsep = ' ':\n   The join string, used when joining the unnamed arguments.\n\nscheme = *False*:\n   Use to override the colorscheme when rendering the text.  Choose from *None*, \n   *False*, 'light' or 'dark'.  If you specify *False* (the default), the \n   colorscheme specified when creating the colorizer is used.\n\n\nColorizers have one user settable attribute: *enable*. By default *enable* is \nTrue. If you set it to *False* the colorizer no longer renders the text in \ncolor:\n\n.. code-block:: python\n\n   >> warning = Color('yellow', enable=Color.isTTY(sys.stdout))\n   >> warning('Cannot find precusor, ignoring.')\n   Cannot find precusor, ignoring.\n\nThe Color class has the following class methods:\n\nisTTY(stream):\n   Takes a stream as an argument (default is stdout) and returns true if it is \n   a TTY.  A typical use is:\n\n.. code-block:: python\n\n   >>> from inform import Color, display\n   >>> import sys, re\n\n   >>> if Color.isTTY(sys.stdout):\n   ...     emphasize = Color('magenta')\n   ... else:\n   ...     emphasize = str.upper\n\n   >>> def highlight(matchobj):\n   ...     return emphasize(matchobj.group(0))\n\n   >>> display(re.sub('your', highlight, 'Imagine your city without cars.'))\n   Imagine YOUR city without cars.\n\nstrip_colors(text):\n   Takes a string as its input and return that string stripped of any color \n   codes.\n",
    "docs_url": null,
    "download_url": "https://github.com/kenkundert/inform/tarball/master",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://nurdletech.com/linux-utilities/inform",
    "keywords": "inform",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "inform",
    "platform": "",
    "project_url": "https://pypi.org/project/inform/",
    "release_url": "https://pypi.org/project/inform/1.10.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "print & logging utilities for communicating with user",
    "version": "1.10.0"
  },
  "releases": {
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "da21a5de9b6a084653adfea768866341",
          "sha256": "ba603504f04dd3df629f6aadbd48bb32e8da3e5523963e88e92508f4bbb31a72"
        },
        "downloads": -1,
        "filename": "inform-1.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "da21a5de9b6a084653adfea768866341",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25650,
        "upload_time": "2016-01-22T19:38:14",
        "url": "https://files.pythonhosted.org/packages/79/2d/03e250a4ef4174984626a2fb0a0c95662a658259897954b4e099f3f55e40/inform-1.0.10.tar.gz"
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "aa8fb1e9fef606bef11c7414a9b9c0a7",
          "sha256": "58cc5192e62c2d3c8f2155dd3dcca0f3ee704907903586c3b2318e753d0aebc1"
        },
        "downloads": -1,
        "filename": "inform-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "aa8fb1e9fef606bef11c7414a9b9c0a7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23445,
        "upload_time": "2016-01-17T00:57:29",
        "url": "https://files.pythonhosted.org/packages/6a/94/c1520e4f05cdd5c1a393006463b405dd986eee6db7c8752af547c9ca3e1d/inform-1.0.5.tar.gz"
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c6ed992f86afa26ef7b0658b5bfd95f4",
          "sha256": "f4317fc384052b6e8a2681f077709e64871069296ed37f2cee179eb231c46b02"
        },
        "downloads": -1,
        "filename": "inform-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "c6ed992f86afa26ef7b0658b5bfd95f4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23559,
        "upload_time": "2016-01-19T21:21:20",
        "url": "https://files.pythonhosted.org/packages/bf/21/57d49951444cfc3a9d4f80e1d3bd72cb3db71719090345b31a8e90f50d55/inform-1.0.7.tar.gz"
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9d9f915a8dd2dcef5e7c968d8a263c9b",
          "sha256": "e8481025d35d81d480b790d92ea65695a716b4474b24370703c41ef3ecb959ff"
        },
        "downloads": -1,
        "filename": "inform-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "9d9f915a8dd2dcef5e7c968d8a263c9b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23554,
        "upload_time": "2016-01-20T08:46:45",
        "url": "https://files.pythonhosted.org/packages/fe/cc/645ae570e820e4e07d01acba095caed2a63317d25dddd36b377849a0b338/inform-1.0.8.tar.gz"
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4e5b308df5b08a0236fb384663ea7271",
          "sha256": "c39f05ba2e9ff0745229a98dff7c26f7ccfe2e0dd4f9531e00d64499e0cc4c4e"
        },
        "downloads": -1,
        "filename": "inform-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "4e5b308df5b08a0236fb384663ea7271",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24133,
        "upload_time": "2016-01-20T19:56:36",
        "url": "https://files.pythonhosted.org/packages/14/80/cd32f334e04fa099ce350f2a1ef31c0a9d96d33ca6d7b0144d6f3dcc8288/inform-1.0.9.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "230152c693251b29be70b46cd9ed9736",
          "sha256": "153a97475afc30bb18b0d6aa5558d53539a93750b320d02c5229945366da1dfe"
        },
        "downloads": -1,
        "filename": "inform-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "230152c693251b29be70b46cd9ed9736",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26093,
        "upload_time": "2016-01-22T23:53:05",
        "url": "https://files.pythonhosted.org/packages/5b/0a/c4fb8e5d728b0055df7701116d18ea5f83255b405dcea2ea8bc459ebbbc3/inform-1.1.0.tar.gz"
      }
    ],
    "1.10.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "43a44b10e058911c71e0ae6af8b10152",
          "sha256": "f66d4203047f360a2221f980e2982f8eecb2704e94dfa2c8c321122c48f2e3e9"
        },
        "downloads": -1,
        "filename": "inform-1.10.0.tar.gz",
        "has_sig": true,
        "md5_digest": "43a44b10e058911c71e0ae6af8b10152",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43105,
        "upload_time": "2017-11-22T01:24:04",
        "url": "https://files.pythonhosted.org/packages/63/f1/f38566c13fe6ddeb22dbae71404ce608cd0826bc23c819eb129eca321ee3/inform-1.10.0.tar.gz"
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f5075bf154cf1d7699a5224e8cc3b8d1",
          "sha256": "afeee0fa820a83df75ccad9849c775909600be34fa1a4aba24f98079dd097e9d"
        },
        "downloads": -1,
        "filename": "inform-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f5075bf154cf1d7699a5224e8cc3b8d1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26410,
        "upload_time": "2016-01-29T09:05:57",
        "url": "https://files.pythonhosted.org/packages/e0/49/1a0d21ef94df87fd6820cc283048731d7a9e1104e9f75867ad5b09941edc/inform-1.2.1.tar.gz"
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6a51d956ccdcc478ddbe9104c6aa8960",
          "sha256": "f8c9a2a321ebcd312621d377b38ddc3d75f709da0c40d990522d8aded60fd9f9"
        },
        "downloads": -1,
        "filename": "inform-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6a51d956ccdcc478ddbe9104c6aa8960",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26410,
        "upload_time": "2016-01-31T09:10:07",
        "url": "https://files.pythonhosted.org/packages/ed/51/71712b9f96b5c30bffd908f540271925ac6cf64e233c940487f6c736a81c/inform-1.2.2.tar.gz"
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6a45c9cf5fc617c8b10fa2cf57ee66de",
          "sha256": "a1652e2fd76efcb9575d72744c567fcf43657f17f42ed06f850e6660d963a5ad"
        },
        "downloads": -1,
        "filename": "inform-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6a45c9cf5fc617c8b10fa2cf57ee66de",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26442,
        "upload_time": "2016-02-01T01:21:26",
        "url": "https://files.pythonhosted.org/packages/b8/bd/a87ea20f39374667c4170c0e59e398fa76c413d6f3967e5a174478709b2b/inform-1.2.3.tar.gz"
      }
    ],
    "1.2.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a3ab7a31a280a8af5d4a8571f727933a",
          "sha256": "39b82f7ddfcee099ff678bd59333b4974809850fd62c1bbbf866a96d58036ae9"
        },
        "downloads": -1,
        "filename": "inform-1.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a3ab7a31a280a8af5d4a8571f727933a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26933,
        "upload_time": "2016-02-07T00:35:42",
        "url": "https://files.pythonhosted.org/packages/cd/44/37979bfc30ac43a60da04f88cca509cc614debf7df091f0c5376f3c6f3e9/inform-1.2.4.tar.gz"
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f6220f3dbba8f3c849c66042a1e63720",
          "sha256": "2afd81cc7b3297f6cd80fe4bdf21489dc924b5923453754dc53e9d03475dc0cd"
        },
        "downloads": -1,
        "filename": "inform-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f6220f3dbba8f3c849c66042a1e63720",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27754,
        "upload_time": "2016-02-07T22:26:50",
        "url": "https://files.pythonhosted.org/packages/94/d6/0c6323e8e9f8f163d75d6532272738ce354e1a1b0f7e2efdcd69a24ac489/inform-1.3.0.tar.gz"
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0acb35ec1a97a0a6bc5d86ef5fbe48b8",
          "sha256": "a75c93c2d0f48a53ca3035f1afdb7b07a7f74e04d9e386d898ed11e865327923"
        },
        "downloads": -1,
        "filename": "inform-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0acb35ec1a97a0a6bc5d86ef5fbe48b8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27724,
        "upload_time": "2016-02-08T03:11:54",
        "url": "https://files.pythonhosted.org/packages/fa/e2/40191b0c85beed69267ae1691b87ed28e3c89ea1c137cf86a0e4060375a7/inform-1.3.1.tar.gz"
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "036e8492b4758fccf6704e972461a711",
          "sha256": "49d51b32e37e0c83e7c4e45e6a5eae08ca93a9f5dea75a2c458847585a6a8b30"
        },
        "downloads": -1,
        "filename": "inform-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "036e8492b4758fccf6704e972461a711",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27895,
        "upload_time": "2016-02-27T00:56:49",
        "url": "https://files.pythonhosted.org/packages/af/76/b45c82c81bc4c180dc80a5e5bb34a8d6a5382e6da4b04d8e8ca17977d8ae/inform-1.3.2.tar.gz"
      }
    ],
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8f2f0a35d5a7dd437e2d9cbbabdd5c45",
          "sha256": "1683e3da7f5010883b685b96b12da3453b82595a43666d7d081b14814753b809"
        },
        "downloads": -1,
        "filename": "inform-1.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8f2f0a35d5a7dd437e2d9cbbabdd5c45",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27974,
        "upload_time": "2016-02-28T00:45:16",
        "url": "https://files.pythonhosted.org/packages/e1/c4/67fd0aa179017676c2969101230d1727aa4503c3b11b18b35bbc460c838b/inform-1.3.3.tar.gz"
      }
    ],
    "1.3.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1e27f7b78398380cb4b39f2600b2bd3a",
          "sha256": "8d0c2cc8bb1b624c7584d2b11fd905742911003244b01fbb293a90fdc55abfc7"
        },
        "downloads": -1,
        "filename": "inform-1.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1e27f7b78398380cb4b39f2600b2bd3a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28001,
        "upload_time": "2016-05-24T07:27:51",
        "url": "https://files.pythonhosted.org/packages/72/34/e9ad67684c15ab8183a6ad0f82ded5ee3de41404a8e1d66a7388c03a4b00/inform-1.3.4.tar.gz"
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "48b4f388cb805ffdf5ba500ac95b1894",
          "sha256": "cddabbfb9e0ea5b168a5f79548323460ab1f58312420f134d32101967930f504"
        },
        "downloads": -1,
        "filename": "inform-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "48b4f388cb805ffdf5ba500ac95b1894",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29415,
        "upload_time": "2016-07-19T16:51:40",
        "url": "https://files.pythonhosted.org/packages/a0/5d/95e01b629853031cdfd13b0a0a0fa08d1e9262aba3c51056f6e88dd1ba21/inform-1.4.0.tar.gz"
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9655715978870d60940859607d0f0572",
          "sha256": "7e4a5e4403bfafa1c4ef409c75c6e01b71f74f3da8e650b5993a99b0e4ef9183"
        },
        "downloads": -1,
        "filename": "inform-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9655715978870d60940859607d0f0572",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29763,
        "upload_time": "2016-09-29T17:01:41",
        "url": "https://files.pythonhosted.org/packages/f5/00/6e85262cead0261c8c07a8ce8f579dcc0a5b4f5072b58011b60429af3949/inform-1.4.1.tar.gz"
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c020fd23048351efe45a6cfd18918cbd",
          "sha256": "2b7723209aa0d575752932f2efaa35bd9c1d50c7e2b98fb9685a9b2f6867a5d7"
        },
        "downloads": -1,
        "filename": "inform-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c020fd23048351efe45a6cfd18918cbd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29757,
        "upload_time": "2016-09-29T23:30:59",
        "url": "https://files.pythonhosted.org/packages/15/f8/c0f8c1404cd1e2adbee42f9c421e776e203f054423d5818f834e33670e8f/inform-1.4.2.tar.gz"
      }
    ],
    "1.4.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7b805abf53d87b29234dea6fb169b9f1",
          "sha256": "2eb0e0fac44a35209c4c0d5c921e19590da666d7708bfd39dd2e78af3d7643be"
        },
        "downloads": -1,
        "filename": "inform-1.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7b805abf53d87b29234dea6fb169b9f1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29862,
        "upload_time": "2016-09-30T04:56:28",
        "url": "https://files.pythonhosted.org/packages/f5/53/2452087fe8e88aa2d889fe737a36aa44fd36257221d0c06cd1a657203dda/inform-1.4.3.tar.gz"
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "11b8da46bd48ba268650bab4bf4e4268",
          "sha256": "d5d7e302892a79a46794439c78dea29477764737d4ab16d303b5b28792a981ba"
        },
        "downloads": -1,
        "filename": "inform-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "11b8da46bd48ba268650bab4bf4e4268",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31975,
        "upload_time": "2016-12-14T19:20:03",
        "url": "https://files.pythonhosted.org/packages/35/d9/c1f834ea283c42b08e9b15dc51cd535486d7691f60064b76f401fabeada0/inform-1.5.0.tar.gz"
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8f8efaa4ab599b60222b73bc0bd7ab6f",
          "sha256": "4d9cc1f387eade2dd4855b61ea51715c9e1e9f79565c5c0ec5e16df87e28a05c"
        },
        "downloads": -1,
        "filename": "inform-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8f8efaa4ab599b60222b73bc0bd7ab6f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32180,
        "upload_time": "2016-12-22T07:46:58",
        "url": "https://files.pythonhosted.org/packages/ec/d2/a5320fa2793a989fd45650fe4797d5e5d4b611630b059ca46c15708d5c85/inform-1.6.0.tar.gz"
      }
    ],
    "1.7.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f9f0f17c1236a1548de28ff0638c443f",
          "sha256": "bc0da668956d322cbe4338c0a13f693f9583d53b328a9af525b4b657b2833fd3"
        },
        "downloads": -1,
        "filename": "inform-1.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f9f0f17c1236a1548de28ff0638c443f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32317,
        "upload_time": "2017-03-18T07:01:40",
        "url": "https://files.pythonhosted.org/packages/95/84/d1f15caf37bea3fd45548067afdd8bf2a3e848a86083801b2d0af11cff6e/inform-1.7.0.tar.gz"
      }
    ],
    "1.8.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5deb57e45bb5781c838c011e11b4c051",
          "sha256": "698cde26123979523e1d02f498f34d48713f3f64a4276dc35ce3fefc8874ea1f"
        },
        "downloads": -1,
        "filename": "inform-1.8.0.tar.gz",
        "has_sig": true,
        "md5_digest": "5deb57e45bb5781c838c011e11b4c051",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 37917,
        "upload_time": "2017-03-31T20:53:12",
        "url": "https://files.pythonhosted.org/packages/05/29/77bd41f67d8cc46457a962320bccd990aa997c268f43d1fa9d91a1527a09/inform-1.8.0.tar.gz"
      }
    ],
    "1.9.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "04782d221f6a33b65dc1a968ec57386d",
          "sha256": "56e19be84e9012ae7fc77e0baa551b55f393c0d212ecb2d7e304d8f3994741e4"
        },
        "downloads": -1,
        "filename": "inform-1.9.0.tar.gz",
        "has_sig": true,
        "md5_digest": "04782d221f6a33b65dc1a968ec57386d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38034,
        "upload_time": "2017-04-02T16:33:40",
        "url": "https://files.pythonhosted.org/packages/17/bb/609b63761cf3dec57f04f6088e17d1127fb207aa89467c6cb9a2d17b01b4/inform-1.9.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "43a44b10e058911c71e0ae6af8b10152",
        "sha256": "f66d4203047f360a2221f980e2982f8eecb2704e94dfa2c8c321122c48f2e3e9"
      },
      "downloads": -1,
      "filename": "inform-1.10.0.tar.gz",
      "has_sig": true,
      "md5_digest": "43a44b10e058911c71e0ae6af8b10152",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 43105,
      "upload_time": "2017-11-22T01:24:04",
      "url": "https://files.pythonhosted.org/packages/63/f1/f38566c13fe6ddeb22dbae71404ce608cd0826bc23c819eb129eca321ee3/inform-1.10.0.tar.gz"
    }
  ]
}