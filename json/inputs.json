{
  "info": {
    "author": "Zeth",
    "author_email": "theology@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Embedded Systems",
      "Topic :: Software Development :: Libraries",
      "Topic :: System :: Hardware :: Hardware Drivers",
      "Topic :: Utilities"
    ],
    "description": "Inputs\n======\n\n    .. image:: https://raw.githubusercontent.com/zeth/inputs/master/devices.png\n\nInstall\n-------\n\nInstall through pypi::\n\n    pip install inputs\n\nOr download it from github::\n\n    git clone https://github.com/zeth/inputs.git\n    cd inputs\n    python setup.py install\n\nAbout\n-----\n\nThe inputs module provides an easy way for your Python program to\nlisten for user input.\n\nCurrently supported platforms are the Raspberry Pi, Linux, Windows and\nthe Apple Mac.\n\nPython versions supported are all versions of Python 3 and your\ngranddad's Python 2.7.\n\nTo get started quickly, just use the following::\n\n    from inputs import devices\n\nFor other examples, keep reading.\n\nInputs is in pure Python and there are no dependencies on Raspberry\nPi, Linux or Windows. On the Mac, inputs needs PyObjC which Apple\ninstalls by default in the system Python. To get PyObjC for your own\nuser-installed Python go to:\n\n    http://pythonhosted.org/pyobjc/\n\nTo get involved, please visit the github project at:\n\n    https://github.com/zeth/inputs\n\n\nWhy Inputs?\n-----------\n\nObviously high level graphical libraries such as PyGame and PyQT will\nprovide user input support in a very friendly way. However, the inputs\nmodule does not require your program to use any particular graphical\ntoolkit, or even have a monitor at all.\n\nIn the Embedded Linux, Raspberry Pi or Internet of Things type\nsituation, it is quite common not to have an X-server installed or\nrunning.\n\nThis module may also be useful where a computer needs to run a\nparticular application full screen but you would want to listen out in\nthe background for a particular set of user inputs, e.g. to bring up\nan admin panel in a digital signage setup.\n\nIt is still early days. Android should be tested soon and hopefully\nalso BSD. Optional Asyncio-based event loop support will probably be\nincluded eventually.\n\nThis module is a single file, so if you cannot or are not allowed to\nuse setuptools for some reason, just copy the file inputs.py into your\nproject.\n\nThe inputs module is very simple. The majority of the file is just\nconstants, so that no matter what platform you are on, input devices\nwill report the same codes to your program.\n\nNote to Children\n----------------\n\nIt is pretty easy to use any user input device library, including this\none, to build a keylogger. Using this module to spy on your mum or\nteacher or sibling is not cool and may get you into trouble. So please\ndo not do that. Make a game instead, games are cool.\n\nQuick Start\n-----------\n\nTo access all the available input devices on the current system:\n\n>>> from inputs import devices\n>>> for device in devices:\n...     print(device)\n\nYou can also access devices by type:\n\n>>> devices.gamepads\n>>> devices.keyboards\n>>> devices.mice\n>>> devices.other_devices\n\nEach device object has the obvious methods and properties that you\nexpect, stop reading now and just get playing!\n\nIf that is not high level enough, there are three basic functions that\nsimply give you the latest events (key press, mouse movement/press or\ngamepad activity) from the first connected device in the category, for\nexample:\n\n>>> from inputs import get_gamepad\n>>> while 1:\n...     events = get_gamepad()\n...     for event in events:\n...         print(event.ev_type, event.code, event.state)\n\n>>> from inputs import get_key\n>>> while 1:\n...     events = get_key()\n...     for event in events:\n...         print(event.ev_type, event.code, event.state)\n\n>>> from inputs import get_mouse\n>>> while 1:\n...     events = get_mouse()\n...     for event in events:\n...         print(event.ev_type, event.code, event.state)\n\nAdvanced documentation\n----------------------\n\nA keyboard is represented by the Keyboard class, a mouse by the Mouse\nclass and a gamepad by the Gamepad class. These themselves are\nsubclasses of InputDevice.\n\nThe devices object is an instance of DeviceManager, as you can prove:\n\n>>> from inputs import DeviceManager\n>>> devices = DeviceManager()\n\nThe DeviceManager is reponsible for finding input devices on the\nuser's system and setting up InputDevice objects.\n\nThe InputDevice objects emit instances of InputEvent. So from top\ndown, the classes are arranged thus:\n\nDeviceManager > InputDevice > InputEvent\n\nSo when you have a particular InputEvent instance, you can access its\ndevice and manager:\n\n>>> event.device.manager\n\nThe event object has a property called device and the device has a\nproperty called manager.\n\nAs you can see, it is really very simple. The device manager has an\nattribute called codes which is giant dictionary of key, button and\nother codes.\n\nGamepads\n--------\n\nAn approach often taken by PC games, especially open source games, is\nto assume that all gamepads are Microsoft Xbox 360 controllers and\nthen users use software such as x360ce (on Windows) or xboxdrv (on\nLinux) to make other models of gamepad report Xbox 360 style button\nand joystick codes to the operating system.\n\nSo for inputs the primary target device is the Microsoft Xbox 360\nWired Controller and this has the best support. Another gamepad might\njust work but if not you can use xboxdrv or x360ce to configure it\nyourself.\n\nMore testing and support for common gamepads will come in due course.\n\nOn Linux and Raspberry Pi, the guide button (also known as home or\nmode or the fancy branded button) is exposed as BTN_MODE.\n\nOn Windows, I haven't bothered to support it yet. It is not officially\nexposed to applications and using it unofficially requires every user\nto turn Game DVR off in the Windows Xbox app settings.\n\nOn macOS,\n\nRaspberry Pi Sense HAT\n----------------------\n\nThe microcontroller on the Raspberry Pi Sense HAT presents the\njoystick to the operating system as a keyboard, so find it there under\nkeyboards. If you worry about this, you are over-thinking things.\n\nWindows permissions\n-------------------\n\nBy default Windows doesn't stop inputs. However, if you have some\nthird-party security software you may need to white-list Python. Try\nit and find out.\n\nLinux permissions\n-----------------\n\nOn the Raspberry Pi's Raspbian everything just works.\n\nHowever, each Linux distribution is different. Some will work straight\naway, for some you need to fiddle with permissions.\n\nLinux distributions often (quite rightly) assume that applications are\ninstalled through their package manager and given the relevant\npermissions to access the input devices. However, inputs.py is brand\nnew and not yet packaged by any Linux distribution.\n\nTherefore, if the inputs module works as root (e.g. using sudo) but\nnot as your normal user, then you usually need to add yourself to an\ninputs group or similar.\n\nMac permissions\n---------------\n\nOn the Mac, until you write a proper installer for your program, you\nwill probably have to use the settings application to allow your\nprogram to access the input devices.\n\n    .. image:: https://raw.githubusercontent.com/zeth/inputs/master/macsecurity.png\n\nThe first time you use inputs, it will not have any output, then you\nwill either get the above settings window pop up automatically, or you\nwill need to find your way there.\n\nCredits\n-------\n\nInputs is by Zeth, all mistakes are mine.\n\nThanks to Dave Jones for stick.py which is not only the basis for\nSense HAT stick support in this module but more importantly also\ntaught me an easier way to parse the Evdev event format in Python:\n\n    https://github.com/RPi-Distro/python-sense-hat/blob/master/sense_hat/stick.py\n\n    https://github.com/waveform80/pisense/blob/master/pisense/stick.py\n\nThanks to Andy (r4dian) and Jason R. Coombs whose existing (MIT\nlicenced) Python examples for Xbox 360 controller support on Windows\nhelped me understand xinput greatly. Xbox 360 controller support on\nWindows here is based on their work:\n\n    https://github.com/r4dian/Xbox-360-Controller-for-Python\n\n    http://pydoc.net/Python/jaraco.input/1.0.1/jaraco.input.win32.xinput/",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/zeth/inputs",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "inputs",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/inputs/",
    "release_url": "https://pypi.org/project/inputs/0.1/",
    "requires_python": null,
    "summary": "Cross-platform Python support for keyboards, mice and gamepads.",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "84ebf259ac74ce24988d2b0e4483a393",
          "sha256": "af5e008b084d0c876d92217025ea7d0543a6bdbdb9ef6f0a94e9ac82e9a93fe0"
        },
        "downloads": 644,
        "filename": "inputs-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "84ebf259ac74ce24988d2b0e4483a393",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 32401,
        "upload_time": "2016-06-17T16:59:06",
        "url": "https://files.pythonhosted.org/packages/7f/17/af6b9fdbd676885a09c94081d1364c87508b6a67e0ab134c8a3c977ca642/inputs-0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9f539849cb869368e3e90a424fdbb139",
          "sha256": "3bed13d14552905a2936601f6a670d32b0b96ccfc20d88030a7a5323fa48f825"
        },
        "downloads": 166,
        "filename": "inputs-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9f539849cb869368e3e90a424fdbb139",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32063,
        "upload_time": "2016-06-17T16:58:44",
        "url": "https://files.pythonhosted.org/packages/9f/b6/20b1674c0f3591adb3c8ef026e6fb73707190129a0779c1b3e860d6a6d3a/inputs-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "84ebf259ac74ce24988d2b0e4483a393",
        "sha256": "af5e008b084d0c876d92217025ea7d0543a6bdbdb9ef6f0a94e9ac82e9a93fe0"
      },
      "downloads": 644,
      "filename": "inputs-0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "84ebf259ac74ce24988d2b0e4483a393",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 32401,
      "upload_time": "2016-06-17T16:59:06",
      "url": "https://files.pythonhosted.org/packages/7f/17/af6b9fdbd676885a09c94081d1364c87508b6a67e0ab134c8a3c977ca642/inputs-0.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "9f539849cb869368e3e90a424fdbb139",
        "sha256": "3bed13d14552905a2936601f6a670d32b0b96ccfc20d88030a7a5323fa48f825"
      },
      "downloads": 166,
      "filename": "inputs-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9f539849cb869368e3e90a424fdbb139",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 32063,
      "upload_time": "2016-06-17T16:58:44",
      "url": "https://files.pythonhosted.org/packages/9f/b6/20b1674c0f3591adb3c8ef026e6fb73707190129a0779c1b3e860d6a6d3a/inputs-0.1.tar.gz"
    }
  ]
}