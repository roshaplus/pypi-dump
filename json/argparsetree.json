{
  "info": {
    "author": "Wildfish",
    "author_email": "developers@wildfish.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "argparsetree\n============\n\nPackage for creating complex command line argument trees using argparse.\n\nBasic Usage\n-----------\n\nYou can create a single command by creating a class extending ``argparsetree.BaseCommand``\nand overriding the ``add_arguments`` and ``action_methods``. For example::\n\n    from argparsetree import BaseCommand\n\n\n    class MyCommand(BaseCommand):\n        def add_arguments(parser):\n            parser.add_arguments('foo', help='Some description of \"foo\"')\n\n        def action(args):\n            print(args.foo)\n\nThe ``parser`` argument passed to ``add_arguments`` is an ``argparse.ArgumentParser`` object. Similarly\nthe ``args`` parameter passed to the ``action`` method is a ``argparse.Namespace`` object generated by\ncalling ``parse_args`` on the generated argument parser.\n\nAdditionally the description property can be set on the command class, this will be used when building\nthe help message.\n\nIf a return value other than ``None`` is returned from ``action`` this will be used as the return code from the\n``run`` function. If no value is returned (or the value is ``None``) the value is assumed to be 0.\n\nOnce you have created your command you can use it by creating a script similar to::\n\n    #!/usr/bin/env python\n    import sys\n\n    from mycli import MyCommand\n\n\n    if __name__ == '__main__':\n        sys.exit(MyCommand().run())\n\nNested Usage\n------------\n\nChild commands can also be added to a command by specifying the ``sub_commands`` property. This is a dictionary\nthat maps command names to command classes. For example::\n\n    #!/usr/bin/env python\n\n    import sys\n    from argparsetree import BaseCommand\n\n\n    class CleanFooCommand(BaseCommand):\n        description = 'Cleans up the foo object'\n\n        def add_args(self, parser):\n            parser.add_argument('target', help='The foo file to clean up')\n            parser.add_argument('-y', '--yes', help='Automatic answer yes to prompts', action='store_true')\n\n        def action(self, args):\n            # do cleaning\n            return 0\n\n\n    class CheckFooCommand(BaseCommand):\n        description = 'Checks the integrity of a foo object'\n\n        def add_args(self, parser):\n            parser.add_argument('target', help='The foo file to clean up')\n            parser.add_argument('-y', '--yes', help='Automatic answer yes to prompts', action='store_true')\n\n        def action(self, args):\n            # do cleaning\n            return 0\n\n\n    class FooCommand(BaseCommand):\n        description = 'Do things with foos'\n        sub_commands = {\n            'check': CheckFooCommand,\n            'clean': CleanFooCommand,\n            # more sub commands here\n        }\n\n\n    class RootCommand(BaseCommand):\n        description = 'My fancy CLI'\n        sub_commands = {\n            'foo': FooCommand,\n            # more sub commands here\n        }\n\n\n    if __name__ == '__main__':\n        sys.exit(RootCommand().run())\n\nRunning ``./example.py`` would give the following output::\n\n    usage: My fancy CLI [-h] {foo} ...\n\n    positional arguments:\n      {foo}\n        foo       Do things with foos\n\n    optional arguments:\n      -h, --help  show this help message and exit\n\nAnd running ``./example.py foo`` gives::\n\n    usage: Do things with foos [-h] {check,clean} ...\n\n    positional arguments:\n      {check,clean}\n        check        Checks the integrity of a foo object\n        clean        Cleans up the foo object\n\n    optional arguments:\n      -h, --help     show this help message and exit\n\nAn extended help message for each command (and sub-command) can be printed by adding the ``--help`` flag,\nSo running ``./example.py foo check --help`` gives::\n\n    usage: My fancy CLI foo check [-h] [-y] target\n\n    Checks the integrity of a foo object\n\n    positional arguments:\n      target      The foo file to clean up\n\n    optional arguments:\n      -h, --help  show this help message and exit\n      -y, --yes   Automatic answer yes to prompts\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/wildfish/argparsetree",
    "keywords": "class based argparse",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "argparsetree",
    "platform": "",
    "project_url": "https://pypi.org/project/argparsetree/",
    "release_url": "https://pypi.org/project/argparsetree/0.0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Package for creating complex command line argument trees using argparse",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "307c49a31972a0a06f495d93c03fc512",
          "sha256": "5d50e214ff6c1a4afd9867b4293f83fed16cf142b5bf7552738a5828f96c20af"
        },
        "downloads": -1,
        "filename": "argparsetree-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "307c49a31972a0a06f495d93c03fc512",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 7387,
        "upload_time": "2018-01-25T16:53:13",
        "url": "https://files.pythonhosted.org/packages/8e/dc/8c948063bc38014f2e3e162ee333d313c3326e5cf9fe26deea07bbc8bb04/argparsetree-0.0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e69ef4208942def20ace4cd8acaed21f",
          "sha256": "0dbe86bba8256223d04a13a28f72636dfa772e0fa0d6ff9346e242a3328d2031"
        },
        "downloads": -1,
        "filename": "argparsetree-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e69ef4208942def20ace4cd8acaed21f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5307,
        "upload_time": "2018-01-25T16:53:15",
        "url": "https://files.pythonhosted.org/packages/82/de/d98f5efa0912866f8136b1ad2cda3b083bca49b82337858856a841a4a303/argparsetree-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "af1af3fcb0320da6148a1b662de17b5e",
          "sha256": "87bfb01bf10cacc77723ba6177701ee2979cf51f38c7be0a1600504c65eae4a5"
        },
        "downloads": -1,
        "filename": "argparsetree-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "af1af3fcb0320da6148a1b662de17b5e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 7734,
        "upload_time": "2018-01-26T09:54:51",
        "url": "https://files.pythonhosted.org/packages/ae/fa/6e38d3f44b04cc98a4e6e0107ac6d9039b75c765335f904ce95552b5bb26/argparsetree-0.0.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "aa6c32b3a6ffc9514c47056c9ab07fd4",
          "sha256": "2df7677362d8dd31e45344c8a591835fdcdde68851030b87dd9b6403bae8535c"
        },
        "downloads": -1,
        "filename": "argparsetree-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "aa6c32b3a6ffc9514c47056c9ab07fd4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5697,
        "upload_time": "2018-01-26T09:54:53",
        "url": "https://files.pythonhosted.org/packages/64/52/9624e6f1def16a53bb6080f12ad7ec0398f3ca7b3b63dfcf39c8146d9578/argparsetree-0.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "af1af3fcb0320da6148a1b662de17b5e",
        "sha256": "87bfb01bf10cacc77723ba6177701ee2979cf51f38c7be0a1600504c65eae4a5"
      },
      "downloads": -1,
      "filename": "argparsetree-0.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "af1af3fcb0320da6148a1b662de17b5e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 7734,
      "upload_time": "2018-01-26T09:54:51",
      "url": "https://files.pythonhosted.org/packages/ae/fa/6e38d3f44b04cc98a4e6e0107ac6d9039b75c765335f904ce95552b5bb26/argparsetree-0.0.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "aa6c32b3a6ffc9514c47056c9ab07fd4",
        "sha256": "2df7677362d8dd31e45344c8a591835fdcdde68851030b87dd9b6403bae8535c"
      },
      "downloads": -1,
      "filename": "argparsetree-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "aa6c32b3a6ffc9514c47056c9ab07fd4",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5697,
      "upload_time": "2018-01-26T09:54:53",
      "url": "https://files.pythonhosted.org/packages/64/52/9624e6f1def16a53bb6080f12ad7ec0398f3ca7b3b63dfcf39c8146d9578/argparsetree-0.0.2.tar.gz"
    }
  ]
}