{
  "info": {
    "author": "S. Andrew Sheppard",
    "author_email": "andrew@wq.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: JavaScript",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Database :: Database Engines/Servers",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "**Django Data Wizard** is an interactive tool for mapping structured\ndata (e.g. Excel, XML) into a normalized database structure via\n`wq.io <https://wq.io/wq.io>`__ and the `Django REST\nFramework <http://www.django-rest-framework.org/>`__. Django Data Wizard\nallows novice users to map spreadsheet columns to serializer fields (and\ncell values to foreign keys) on-the-fly during the import process. This\nreduces the need for preset spreadsheet formats, which most data import\nsolutions require.\n\n\n.. image:: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/320/02-columns.png\n   :target: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/02-columns.png\n   :width: 33 %\n   :alt: Column Choices\n \n.. image:: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/320/08-data75.png\n   :target: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/08-data75.png\n   :width: 33 %\n   :alt: Auto Import - Progress Bar\n \n.. image:: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/320/10-records.png\n   :target: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/10-records.png\n   :width: 33 %\n   :alt: Imported Records\n\n\nBy default, Django Data Wizard supports any format supported by\n`wq.io <https://wq.io/wq.io>`__ (Excel, CSV, JSON, and XML). Additional\nformats can be integrating by creating a `custom wq.io\nclass <https://wq.io/docs/custom-io>`__ and then registering it with the\nwizard. For example, the `Climata\nViewer <https://github.com/heigeo/climata-viewer>`__ uses Django Data\nWizard to import data from\n`climata <https://github.com/heigeo/climata>`__'s wq.io-based web\nservice client.\n\nThe Data Wizard supports straightforward one-to-one mappings from\nspreadsheet columns to database fields, as well as more complex\nscenarios like `natural\nkeys <https://github.com/wq/django-natural-keys>`__ and\n`Entity-Attribute-Value <https://wq.io/docs/eav-vs-relational>`__ (or\n\"wide\") table mappings. It was originally developed for use with the\n`ERAV data model <https://wq.io/docs/erav>`__ provided by\n`vera <https://wq.io/vera>`__.\n\n|Latest PyPI Release| |Release Notes| |License| |GitHub Stars| |GitHub\nForks| |GitHub Issues|\n\n|Travis Build Status| |Python Support| |Django Support|\n\nUsage\n=====\n\nDjango Data Wizard provides a JSON (and HTML) API for specifying a data\nset to import, selecting a serializer, mapping the data columns and\nidentifiers, and (asynchronously) importing the data into the database.\n\nInstallation\n------------\n\n.. code:: bash\n\n    # Recommended: create virtual environment\n    # python3 -m venv venv\n    # . venv/bin/activate\n\n    pip install data-wizard\n\nSee https://github.com/wq/django-data-wizard to report any issues.\n\nCelery\n------\n\nDjango Data Wizard requires `Celery <http://www.celeryproject.org/>`__\nto handle asynchronous tasks, and is usually used with\n`Redis <https://redis.io/>`__ as the memory store. These should be\nconfigured first or the REST API may not work. Once Redis is installed,\nyou should be able to add the following to your project settings:\n\n.. code:: python\n\n    # myproject/settings.py\n    CELERY_RESULT_BACKEND = BROKER_URL = 'redis://localhost:6379/1'\n\nThen, define a celery app:\n\n.. code:: python\n\n    # myproject/celery.py\n    from __future__ import absolute_import\n    from celery import Celery\n    from django.conf import settings\n    app = Celery('myproject')\n    app.config_from_object('django.conf:settings')\n    app.autodiscover_tasks(lambda: settings.INSTALLED_APPS)\n\nAnd reference it from your project:\n\n.. code:: python\n\n    # myproject/__init__.py\n    from .celery import app as celery_app\n\nFinally, make sure that celery is running in the background. You can\ntest with the following command, then move to a more stable\nconfiguration (e.g.\n`daemonization <http://docs.celeryproject.org/en/latest/userguide/daemonizing.html>`__).\n\n.. code:: bash\n\n    # celery.sh\n    export DJANGO_SETTINGS_MODULE=myproject.settings\n    celery -A myproject worker -l info\n\nNote that any time you change your serializer registration, you should\nreload celery in addition to restarting the Django WSGI instance.\n\nSerializer Registration\n-----------------------\n\nAs of version 1.0, Data Wizard relies on serializer classes as the\nprimary means of detecting model fields. These are subclasses of Django\nREST Framework's `ModelSerializer\nclass <http://www.django-rest-framework.org/api-guide/serializers/#modelserializer>`__.\nYou can register serializers by creating a ``wizard.py`` in your app\ndirectory (analagous to Django's ``admin.py`` and wq.db's ``rest.py``).\n\n.. code:: python\n\n    # myapp/wizard.py\n    from rest_framework import serializers\n    from data_wizard import registry\n    from .models import TimeSeries\n\n    class TimeSeriesSerializer(serializers.ModelSerializer):\n        class Meta:\n            model = TimeSeries\n            fields = '__all__'\n\n    registry.register(\"Time Series\", TimeSeriesSerializer)\n\nAt least one serializer should be registered in order to use the wizard.\nNote the use of a human-friendly serializer label when registering. This\nname should be unique throughout the project, but can be changed later\non without breaking existing data. (The class path is used as the actual\nidentifier behind the scenes.)\n\nREST API\n--------\n\nThe Data Wizard REST API provides the following capabilities. If you are\nusing wq.db, the wizard will automatically register itself with the\nrouter. Otherwise, be sure to include ``data_wizard.urls`` in your URL\nconfiguration:\n\n.. code:: python\n\n    # with wq.db (automatic)\n    # rest.router.register_model(data_wizard.models.Run, ...)\n\n    # without wq.db\n    from django.conf.urls import include, url\n\n    urlpatterns = [\n        # ...\n        url(r'^', include('data_wizard.urls')),\n    ]\n\nThe API is accessible as JSON and as HTML - though the HTML interface is\n(currently) only accessible when using the Mustache template engine\n(i.e. with wq.db).\n\nNew Run\n~~~~~~~\n\n``POST /datawizard/``\n^^^^^^^^^^^^^^^^^^^^^\n\nCreate a new instance of the wizard (i.e. a ``Run``). The returned run\n``id`` should be used in all subsequent calls to the API. Each ``Run``\nis tied to the model containing the actual data via a `generic foreign\nkey <https://docs.djangoproject.com/en/1.11/ref/contrib/contenttypes/>`__.\n\n+---------------------+-------------------------------------------+\n| parameter           | description                               |\n+=====================+===========================================+\n| ``object_id``       | The id of the object containing the data  |\n|                     | to be imported.                           |\n+---------------------+-------------------------------------------+\n| ``content_type_id`` | The app label and model name of the       |\n|                     | referenced model (in the format           |\n|                     | ``app_label.modelname``).                 |\n+---------------------+-------------------------------------------+\n| ``loader``          | (Optional) The class name to use for      |\n|                     | loading the dataset via wq.io. The        |\n|                     | default loader                            |\n|                     | (``data_wizard.loaders.FileLoader``)      |\n|                     | assumes that the referenced model         |\n|                     | contains a ``FileField`` named ``file``.  |\n+---------------------+-------------------------------------------+\n| ``serializer``      | (Optional) The class name to use for      |\n|                     | serialization. This can be left unset to  |\n|                     | allow the user to select it during the    |\n|                     | wizard run.                               |\n+---------------------+-------------------------------------------+\n\nIf you are using wq.db, you could allow the user to initiate an import\nrun by adding the following to the detail HTML for your model:\n\n.. code:: html\n\n    <!-- filemodel_detail.html -->\n    <h1>{{label}}</h1>\n    <a href=\"{{rt}}/media/{{file}}\" rel=\"external\">Download File</a>\n\n    <form action=\"{{rt}}/datawizard/\" method=\"post\" data-ajax=\"true\" data-wq-json=\"false\">\n      {{>csrf}}\n      <input type=\"hidden\" name=\"content_type_id\" value=\"myapp.filemodel\">\n      <input type=\"hidden\" name=\"object_id\" value=\"{{id}}\">\n      <button type=\"submit\">Import Data from This File</button>\n    </form>\n\nauto\n~~~~\n\n``POST /datawizard/[id]/auto``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n.. image:: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/320/06-data25.png\n   :target: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/06-data25.png\n   :height: 240 px\n   :width: 320 px\n   :alt: Auto Import - Progress Bar\n   :align: right\n\n\nThe ``auto`` task attempts to run the entire data wizard process from\nbeginning to end. If any input is needed, the import will halt and\nredirect to the necessary screen. If no input is needed, the ``auto``\ntask is equivalent to starting the ``data`` task directly. This is an\nasynchronous method, and returns a ``task_id`` to be used with the\nstatus API.\n\nThe default\n`run\\_detail.html <https://github.com/wq/django-data-wizard/blob/master/data_wizard/mustache/run_detail.html>`__\ntemplate provides an example form to initiate the ``auto`` task.\n\nstatus\n~~~~~~\n\n``GET /datawizard/[id]/status.json?task=[task]``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``status`` API is used to check the status of an asynchronous task\n(one of ``auto`` or ``data``). The API is designed to be used in\nconjunction with the `wq/progress.js <https://wq.io/docs/progress-js>`__\nplugin for `wq.app <https://wq.io/wq.app>`__, which can be used as a\nreference for custom implementations. Unlike the other methods, this API\nshould always be called as JSON (either as ``status.json`` or\n``status?format=json``). An object of the following format will be\nreturned:\n\n.. code:: js\n\n    {\n        // General properties\n        \"status\": \"PROGRESS\", // or \"SUCCESS\", \"FAILURE\"\n        \"stage\": \"meta\",      // or \"data\"\n        \"current\": 23,        // currently processing row\n        \"total\": 100,         // total number of rows\n        \n        // \"FAILURE\"\n        \"error\": \"Error Message\",\n\n        // Task complete (\"SUCCESS\")\n        \"action\": \"records\",        // or \"serializers\", \"columns\" \"ids\"\n        \"message\": \"Input Needed\",  // if action is not \"records\"\n        \"skipped\": [...],           // rows that could not be imported\n        \"location\": \"/datawizard/[id]/records\",\n    }\n\nNote that the ``status`` field is directly derived from the underlying\n`Celery task\nstate <http://docs.celeryproject.org/en/latest/userguide/tasks.html#task-states>`__.\nWhen running an ``auto`` task, the result is ``SUCCESS`` whenever the\ntask ends without errors, even if there is additional input needed to\nfully complete the run.\n\nThe default\n`run\\_auto.html <https://github.com/wq/django-data-wizard/blob/master/data_wizard/mustache/run_auto.html>`__\nand\n`run\\_data.html <https://github.com/wq/django-data-wizard/blob/master/data_wizard/mustache/run_data.html>`__\ntemplates include a ``<progress>`` element for use with\n`wq/progress.js <https://wq.io/docs/progress-js>`__ and the status task.\n\nserializers\n~~~~~~~~~~~\n\n``GET /datawizard/[id]/serializers``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n.. image:: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/320/00-serializers.png\n   :target: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/00-serializers.png\n   :height: 240 px\n   :width: 320 px\n   :alt: Serializer Choices\n   :align: right\n\n\nThe ``serializers`` task provides a list of all registered serializers.\nThis screen is shown by the ``auto`` task if a serializer was not\nspecified when the ``Run`` was created. The default\n`run\\_serializers.html <https://github.com/wq/django-data-wizard/blob/master/data_wizard/mustache/run_serializers.html>`__\ntemplate includes an interface for selecting a registered serializer. If\na serializer is already selected, the template will display the label\nand a button to (re)start the ``auto`` task.\n\nupdateserializer\n~~~~~~~~~~~~~~~~\n\n``POST /datawizard/[id]/updateserializer``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``updateserializer`` task updates the specified ``Run`` with the\nselected serializer class name. This is typically called from `the\nform <https://github.com/wq/django-data-wizard/blob/master/data_wizard/mustache/run_serializers.html>`__\ngenerated by the ``serializers`` task, and will redirect to that task\nwhen complete.\n\n+----------------+-------------------------------------------+\n| parameter      | description                               |\n+================+===========================================+\n| ``serializer`` | The class name (or label) of the          |\n|                | serializer to use for this run.           |\n+----------------+-------------------------------------------+\n\ncolumns\n~~~~~~~\n\n``GET /datawizard/[id]/columns``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n.. image:: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/320/02-columns.png\n   :target: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/02-columns.png\n   :height: 240 px\n   :width: 320 px\n   :alt: Column Choices\n   :align: right\n\n\nThe ``columns`` task lists all of the columns found in the dataset (i.e.\nspreadsheet) and their mappings to serializer fields. This screen is\nshown by the ``auto`` task if there are any column names that could not\nbe automatically mapped. The potential mappings are one of:\n\n-  simple serializer field names (e.g. ``field``)\n-  nested field names (for `natural\n   keys <https://github.com/wq/django-natural-keys>`__, e.g.\n   ``nested[record][field]``)\n-  `EAV <https://wq.io/docs/eav-vs-relational>`__ attribute-value\n   mappings (e.g. ``values[][value];attribute_id=1``).\n\nTo enable a natural key mapping, the registered serializer should be an\ninstance of ``NaturalKeyModelSerializer``, as in `this\nexample <https://github.com/wq/django-data-wizard/blob/master/tests/naturalkey_app/wizard.py>`__.\nTo enable an EAV mapping, the registered serializer should include a\nnested serializer with ``many=True`` and at least one foreign key to the\nattribute table, as in `this\nexample <https://github.com/wq/django-data-wizard/blob/master/tests/eav_app/wizard.py>`__.\n\nThe default\n`run\\_columns.html <https://github.com/wq/django-data-wizard/blob/master/data_wizard/mustache/run_columns.html>`__\ntemplate includes an interface for mapping data columns to serializer\nfields. If all columns are already mapped, the template will display the\nmappings and a button to (re)start the ``auto`` task.\n\nupdatecolumns\n~~~~~~~~~~~~~\n\n``POST /datawizard/[id]/updatecolumns``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``updatecolumns`` task saves the specified mappings from data\ncolumns to serializer fields. This is typically called from `the\nform <https://github.com/wq/django-data-wizard/blob/master/data_wizard/mustache/run_columns.html>`__\ngenerated by the ``columns`` task, and will redirect to that task when\ncomplete.\n\n+-----------------+-------------------------------------------+\n| parameter       | description                               |\n+=================+===========================================+\n| ``rel_[relid]`` | The column to map to the specified        |\n|                 | serializer field. The ``relid`` and the   |\n|                 | complete list of possible mappings will   |\n|                 | be provided by the ``columns`` task.      |\n+-----------------+-------------------------------------------+\n\nids\n~~~\n\n``GET /datawizard/[id]/ids``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n.. image:: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/320/04-ids.png\n   :target: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/04-ids.png\n   :height: 240 px\n   :width: 320 px\n   :alt: Identifier Choices\n   :align: right\n\n\nThe ``ids`` task lists all of the identifiers found in the dataset (i.e.\nspreadsheet) that are in a column known to correspond to a foreign key.\nThis screen is shown by the ``auto`` task if there are any identifiers\nthat could not be automatically mapped to foreign key values. The\npotential mappings depend on the serializer field used to represent the\nforeign key.\n\n-  Existing record ID or slug (for\n   `PrimaryKeyRelatedField <http://www.django-rest-framework.org/api-guide/relations/#primarykeyrelatedfield>`__,\n   `SlugRelatedField <http://www.django-rest-framework.org/api-guide/relations/#slugrelatedfield>`__,\n   and\n   `NaturalKeySerializer <https://github.com/wq/django-natural-keys>`__)\n-  ``\"new\"`` (``NaturalKeySerializer`` only)\n\nThe primary difference is that ``NaturalKeySerializer`` allows for the\npossibility of creating new records in the foreign table on the fly,\nwhile the regular related fields do not.\n\nThe default\n`run\\_ids.html <https://github.com/wq/django-data-wizard/blob/master/data_wizard/mustache/run_ids.html>`__\ntemplate includes an interface for mapping row identifiers to foreign\nkey values. If all ids are already mapped (or indicated to be new\nnatural keys), the template will display the mappings and a button to\n(re)start the ``auto`` task.\n\nupdateids\n~~~~~~~~~\n\n``POST /datawizard/[id]/updateids``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``updateids`` task saves the specified mappings from row identifiers\nto foreign key values. This is typically called from `the\nform <https://github.com/wq/django-data-wizard/blob/master/data_wizard/mustache/run_ids.html>`__\ngenerated by the ``ids`` task, and will redirect to that task when\ncomplete.\n\n+------------------------+-------------------------------------------+\n| parameter              | description                               |\n+========================+===========================================+\n| ``ident_[identid]_id`` | The identifier to map to the specified    |\n|                        | foreign key value. The ``identid`` and    |\n|                        | the complete list of possible mappings    |\n|                        | will be provided by the ``ids`` task.     |\n+------------------------+-------------------------------------------+\n\ndata\n~~~~\n\n``POST /datawizard/[id]/data``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n.. image:: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/320/08-data75.png\n   :target: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/08-data75.png\n   :height: 240 px\n   :width: 320 px\n   :alt: Auto Import - Progress Bar\n   :align: right\n\n\nThe ``data`` task starts the actual import process (and is called by\n``auto`` behind the scenes). Unlike ``auto``, calling ``data`` directly\nwill not cause a redirect to one of the other tasks if any meta input is\nneeded. Instead, ``data`` will attempt to import each record as-is, and\nreport any errors that occured due to e.g. missing fields or unmapped\nforeign keys.\n\nThis is an asynchronous method, and returns a ``task_id`` to be used\nwith the ``status`` API. The default\n`run\\_data.html <https://github.com/wq/django-data-wizard/blob/master/data_wizard/mustache/run_data.html>`__\ntemplate includes a ``<progress>`` element for use with\n`wq/progress.js <https://wq.io/docs/progress-js>`__ and the status task.\n\nrecords\n~~~~~~~\n\n``GET /datawizard/[id]/records``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\n.. image:: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/320/10-records.png\n   :target: https://raw.githubusercontent.com/wq/django-data-wizard/master/images/10-records.png\n   :height: 240 px\n   :width: 320 px\n   :alt: Imported Records\n   :align: right\n\n\nThe ``records`` task provides a list of imported rows (including\nerrors). It is redirected to by the ``auto`` and ``data`` tasks upon\ncompletion. When used with wq.db, the ``records`` task includes links to\nthe detail page for each newly imported record. The default\n`run\\_records.html <https://github.com/wq/django-data-wizard/blob/master/data_wizard/mustache/run_records.html>`__\ntemplate includes an interface for displaying the record details.\n\n.. |Latest PyPI Release| image:: https://img.shields.io/pypi/v/data-wizard.svg\n   :target: https://pypi.python.org/pypi/data-wizard\n.. |Release Notes| image:: https://img.shields.io/github/release/wq/django-data-wizard.svg\n   :target: https://github.com/wq/django-data-wizard/releases\n.. |License| image:: https://img.shields.io/pypi/l/data-wizard.svg\n   :target: https://wq.io/license\n.. |GitHub Stars| image:: https://img.shields.io/github/stars/wq/django-data-wizard.svg\n   :target: https://github.com/wq/django-data-wizard/stargazers\n.. |GitHub Forks| image:: https://img.shields.io/github/forks/wq/django-data-wizard.svg\n   :target: https://github.com/wq/django-data-wizard/network\n.. |GitHub Issues| image:: https://img.shields.io/github/issues/wq/django-data-wizard.svg\n   :target: https://github.com/wq/django-data-wizard/issues\n.. |Travis Build Status| image:: https://img.shields.io/travis/wq/django-data-wizard.svg\n   :target: https://travis-ci.org/wq/django-data-wizard\n.. |Python Support| image:: https://img.shields.io/pypi/pyversions/data-wizard.svg\n   :target: https://pypi.python.org/pypi/data-wizard\n.. |Django Support| image:: https://img.shields.io/badge/Django-1.8%2C%201.9%2C%201.10%2C%201.11-blue.svg\n   :target: https://pypi.python.org/pypi/data-wizard",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://wq.io/django-data-wizard",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "data-wizard",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/data-wizard/",
    "release_url": "https://pypi.org/project/data-wizard/1.0.0rc1/",
    "requires_python": null,
    "summary": "Django Data Wizard",
    "version": "1.0.0rc1"
  },
  "releases": {
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d629a87e23c09b459648884f9aad81b3",
          "sha256": "9d6b839c94c26816c3cfdddc857c41fa8e7b633ff32032ad10c3201e6977eb73"
        },
        "downloads": 389,
        "filename": "data-wizard-1.0.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "d629a87e23c09b459648884f9aad81b3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13899,
        "upload_time": "2016-09-08T18:25:58",
        "url": "https://files.pythonhosted.org/packages/21/60/c2fbd47f54bcb498cb93a0cfa3ecf4e8f3565c5d2d0f8bc14d1e4ed96f87/data-wizard-1.0.0b1.tar.gz"
      }
    ],
    "1.0.0b2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5be30c4b6d0d586255b3fa2e459aefeb",
          "sha256": "75c38810e71ed89cacae29d7d928e00403a910139588f04a7e84129436ca0d06"
        },
        "downloads": 69,
        "filename": "data-wizard-1.0.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "5be30c4b6d0d586255b3fa2e459aefeb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15647,
        "upload_time": "2016-11-08T22:22:09",
        "url": "https://files.pythonhosted.org/packages/67/f9/217d2e50cb26d1089b73e6d1af7db73c95ebb87af3797c06df40dc414c9d/data-wizard-1.0.0b2.tar.gz"
      }
    ],
    "1.0.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0789e01fdd7e009a1b18b497256c09ab",
          "sha256": "636dd89fc17e3232af0ef5c744c2afbfb9cd3880fd06c03570eb6de5ddda1dd8"
        },
        "downloads": 0,
        "filename": "data-wizard-1.0.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "0789e01fdd7e009a1b18b497256c09ab",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25212,
        "upload_time": "2017-06-16T16:05:47",
        "url": "https://files.pythonhosted.org/packages/d9/c4/b1c6639b412f1f751faef2c80dbc95cd8ea6538106f5f6ea6ee64c285ea7/data-wizard-1.0.0rc1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0789e01fdd7e009a1b18b497256c09ab",
        "sha256": "636dd89fc17e3232af0ef5c744c2afbfb9cd3880fd06c03570eb6de5ddda1dd8"
      },
      "downloads": 0,
      "filename": "data-wizard-1.0.0rc1.tar.gz",
      "has_sig": false,
      "md5_digest": "0789e01fdd7e009a1b18b497256c09ab",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 25212,
      "upload_time": "2017-06-16T16:05:47",
      "url": "https://files.pythonhosted.org/packages/d9/c4/b1c6639b412f1f751faef2c80dbc95cd8ea6538106f5f6ea6ee64c285ea7/data-wizard-1.0.0rc1.tar.gz"
    }
  ]
}