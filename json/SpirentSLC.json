{
  "info": {
    "author": "Spirent.com",
    "author_email": "itest@spirent.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# Spirent Session Control Library\n\nThe Spirent Session Control Library is used to control iTest sessions to enable quick and easy interaction with devices from a Python script. These target devices/APIs may be defined either on the fly, or via session profiles defined in iTest projects.\n\n## How to run\n\nThe simplest way is as follows:\n\n* Download the latest Velocity Agent\n\n* Run it like this\n    ./velocity-agent --agentVelocityHost localhost --sfAgentServerPort 9005 --listeningMode --sfAgentDisableSslValidation\n\n* Write python scripts using SLC\n   Example script could be found and executed here:\n    `python example.py`\n\n## Documentation\n\n### Modes of Operation\n\nThe Python Session Control Library is used to control iTest sessions to enable quick and easy interaction with devices from a Python script. These target devices/APIs may be defined either on the fly, or via session profiles defined in iTest projects.\n\nThe library may operate in either one of these modes:\n\n* Standalone on a workstation\n* Connected to an iTest GUI instance\n\n#### Initialization\n\n##### Standalone\n\nEnsure that the following environment variables are set on the workstation that the library is installed on and that the script will run on:\n\n```bash\n  SPIRENT_SLC_HOST=local\n  ITAR_PATH=path #to folder where iTars are placed\n```\n\nIt is also legal to not have the `SPIRENT_SLC_HOST` environment variable, in which case local is assumed.\n\n`ITAR_PATH` is set on the local environment to point to a folder where iTars and exploded project folders are placed, so that the local execution agent can find projects. It is not necessary to set this when connecting to a running instance of iTest GUI or Velocity.\n\n```python\nfrom SpirentSLC import SLC\nslc = SLC.init()\n```\n\nOnce the library is imported, calling `SLC.init()` will initialize the underlying execution agent as a background process which the library will communicate with. An object is returned which is the entry point for further communication with the library. In this release only one `init()` call may be made within one Python interpreter context.\n\nAn exception will be thrown if unable to initialize the library.\n\n##### iTest GUI\n\nEnsure that the following environment variables are set on the workstation that the library is installed on and that the script will run on:\n\n```bash\nSPIRENT_SLC_HOST=localhost:port  # must be host and port of the configured instance of iTest GUI\nSPIRENT_SLC_PASSWORD=xxxx\n```\n\nAn instance of iTest must be running on the specified host and must be configured to accept connections at the desired port. A password may be optionally configured to restrict access to that instance, in which case the `SPIRENT_SLC_PASSWORD` environment variable must be specified, or provided in the init() call.\n\n```python\nfrom SpirentSLC import SLC\nslc = SLC.init() # will take all values from environment variables\n```\n\nalternatively values may be provided in the init() call:\n\n```python\nslc = SLC.init(host='localhost:3030', password='xxx')\n```\n\nAn exception will be thrown if the library is unable to connect to the iTest GUI instance.\n\n##### Automatic Agent launching\n\nBy specification `SPIRENT_SLC_AGENT_PATH` environment variable pointing to iTest Agent folder it is possible to configure SLC to automatically start instance of new agent.\n\n```bash\nSPIRENT_SLC_AGENT_PATH=path #to agent folder\nITAR_PATH=path #to folder where iTars are placed\n````\n\n```python\nfrom SpirentSLC import SLC\nslc = SLC.init()\n```\n\n##### Working With Projects\n\nOnce initialized, the library will have access to all available iTest Projects.\nEach project contains a number of entities that can be addressed via code.\nThese include Session Profiles, and Topologies.\n\n###### Listing Projects\n\n```python\nslc.list()\n==> ['topologies', 'session_profiles']\n```\n\nAll spaces in the name of a project or any other characters that are not legal in a Python identifier will be replaced by underscores in the returned values.\n\n###### Importing Projects\n\nProjects need to be imported first before being used. Since \"import\" is a reserved word in Python we will call it \"open\". This can be done via the following code:\n\n```python\nproj = slc.open('project_name')\n```\n\nMultiple projects can be imported if needed\n\n```python\nsessions = slc.open('my_sessions')\nresponse_maps = slc.open('response_maps')\n```\n\n###### Querying a Project\n\n* list all the usable topologies and session profiles in the project\n  ```python\n  proj.list()\n  ==> ['dut1_ffsp', 'lab1_setup_tbml']\n  ```\n* list other types of assets, such as parameter files and response maps\n  ```python\n  proj.list(parameter_file=True, response_map=True)\n  ==> ['dut1_ffsp', 'lab1_setup_tbml', 'main_setup_ffpt', 'response_map1_ffrm']\n  ```\n* show all QuickCalls available on a given session profile\n  ```python\n  proj.dut1_ffsp.list()\n  ==> {\n    'init_routes': {\n      'all': 'True if all routes should be initialized'\n    },\n    'do_something_cool': {\n      'param': 'Description of parameter'\n    }\n  }\n  ```\n* access help on QuickCalls on a session attached to a resource in a topology\n  ```python\n  proj.lab1_setup_tbml.router1.ssh.list()\n  ==> { ... same as above }\n  ```\n\n* access the list of parameters for a specific QuickCall\n  ```python\n  proj.dut1_ffsp.list('init_routes')\n  ==> { 'all': 'True if all routes should be initialized' }\n  ```\n  Built in session actions are not listed, only QuickCalls if a QuickCall library is attached to the session profile.\n\n  If the user is accessing a built-in session type such as Telnet or SSH, they may still invoke the actions, but they will not be listed by the list() call.\n\n  It should be noted that all displayed QuickCall names will by transformed into snake-case to conform to Python naming conventions.\n  Working With Sessions\n\n  ###### Opening a Session\n\n  Sessions are opened either directly on a session profile or local topology.\n* open session on a session profile\n  ```python\n  s1 = proj.dut1_ffsp.open()\n  ```\n\n* open session, giving required parameters\n  ```python\n  s1 = proj.rest_session_ffsp.open(url='https://my_site.my_domain.com', accept_all_cookies=True)\n  ```\n* open session, using parameter file\n  ```python\n  s1 = proj.rest_session_ffsp.open(parameter_file=proj.main_setup_ffpt)\n  ```\n* open session, specify a response map to use\n  ```python\n  s1 = proj.rest_session_ffsp.open(response_map=proj.response_map1_ffrm)\n  ```\n* open session, specify a reponse map library to use\n  ```python\n  s1 = proj.rest_session_ffsp.open(response_map_lib=resp_lib)\n  ```\n* open session, specifying additional session properties\n  ```python\n  s1 = proj.rest_session_ffsp.open(properties={'authentication.authentication': 'Basic', 'authentication.user': 'me', 'authentication.password': 'totes_secret!'})\n  ```\n* open session on a resource in a local topology\n  ```python\n  s1 = proj.lab1_setup_tbml.router1.ssh.open(...) # may use any combination of parameters, parameter_file, agent_requirements, properties\n  ```\n\n###### Opening a Native Session Type Directly (Not supported in 6.2)\n\nIt is possible to open a session directly without having a underlying session profile or topology file to start with.\n\n* open the native ssh session type directly, supplying required session profile information\n  ```python\n  s1 = slc.sessions.ssh.open(ip_address='10.20.30.40')\n  ```\n  Session Information\n  Once a session is opened it is possible to find out some basic information about where the session is being handled. This is done via the agent property of a session object.\n  ```python\n  s1.agent\n  ==> {\n    'agent_type': 'local', # may be local, iTestGUI, or Velocity\n    'name': 'agent_identifier',\n    'capabilities': {...} # set of agent capabilities\n  }\n  ```\n\n##### Invoking Actions on Session\n\nAn active session has a number of actions defined on it, which may be either built-in actions or QuickCalls defined on that session type. Any of those can be invoked on the session.\n\n* invoke the init_routes QuickCall with one parameter\n  ```python\n  response = s1.init_routes(all=True)\n  ```\n* invoke a built-in action with a specific response map (which may override what was set for the session as a whole)\n  ```python\n  response = my_ssh_session.command('ls', response_map=proj.response_map_ls_ffrm)\n  ```\n  Response\n  The resulting response object can be used to query details about the action execution as well as the response itself:\n* duration of execution and any error status\n  ```python\n  response.duration\n  ==> 3 # number of seconds\n  response.result\n  ==> 'success' # may be success, failed, timeout\n  ```\n\n* textual rendering of the response\n  ```python\n  response.text\n  ==> 'textual response data'\n  ```\n\n* if the response is json, it is easier to grab the json directly as a dictionary\n  ```python\n  response.json\n  ==> instance of dictionary # null if not available as json\n  ```\n\n* likewise if the response is xml it can be accessed directly as XML\n  ```python\n  response.xml\n  ==> instance of xml.etree.ElementTree # null if not available as XML\n\n  response.data\n  ==> { dictionary of elements that exist in step structured data }\n  ```\n\n##### Queries\n\nThe response object may also have queries defined on it - methods that query the structured data and return values. Queries may be auto-generated in iTest or be defined in response maps.\n\n* list the set of queries that exist for the response\n  ```python\n  response.queries()\n  ==> [ 'is_empty()', 'counter_by_row(row)' ]\n  ```\n\n* invoke query\n  ```python\n  response.counter_by_row(3)\n  ==> 35\n  ```\n  Query names are always converted to snake case.\n\n##### Closing a Session\n\nSessions should be closed when no longer needed, as they consume resources on the agent (and on Velocity if being used.) It is especially important to close sessions if sessions are being opened within a loop.\n\n* close session and free resources\n  ```python\n  s1.close()\n  ```\n\n##### Shutdown\n\nProper shutdown of the library is important to ensure timely release of resources.\n\n* release all resources used by the library\n  ```python\n  slc.close()\n  ```\n  Resources released include all remaining open sessions, all reservations initiated by the script, and (if local) the underlying execution agent.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "SpirentSLC",
    "platform": "",
    "project_url": "https://pypi.org/project/SpirentSLC/",
    "release_url": "https://pypi.org/project/SpirentSLC/1.0.0.dev9/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Spirent Session Control Library",
    "version": "1.0.0.dev9"
  },
  "releases": {
    "1.0.0.dev2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a119a573c226bf47966904368c32492e",
          "sha256": "479cf4b2bf91df7d3ed7153a25415dd696880336f2bb898b5bd3e010711bd534"
        },
        "downloads": -1,
        "filename": "SpirentSLC-1.0.0.dev2.tar.gz",
        "has_sig": false,
        "md5_digest": "a119a573c226bf47966904368c32492e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 70495,
        "upload_time": "2017-09-08T17:23:24",
        "url": "https://files.pythonhosted.org/packages/af/25/a06500921ec25b31208bb40244b948339bea31ad1a9eca23fe0742062bdb/SpirentSLC-1.0.0.dev2.tar.gz"
      }
    ],
    "1.0.0.dev3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cbbeb272ae8a1768ce4e691f71910959",
          "sha256": "65cf3c2749169b48167c46a86b46029bae3c97223938eaf08a8bdee65825f777"
        },
        "downloads": -1,
        "filename": "SpirentSLC-1.0.0.dev3.tar.gz",
        "has_sig": false,
        "md5_digest": "cbbeb272ae8a1768ce4e691f71910959",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 75876,
        "upload_time": "2017-09-15T16:35:38",
        "url": "https://files.pythonhosted.org/packages/2a/d4/fe93a78a68a3ba113371479bd7b8e2f0710d042dbaee8eeba0c1ad1d8e4c/SpirentSLC-1.0.0.dev3.tar.gz"
      }
    ],
    "1.0.0.dev4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "67554f34991c567ee232f669778b5293",
          "sha256": "15e736f77d06084ae34bf1d56944d92fda184041274c7a105e223e0841d569a1"
        },
        "downloads": -1,
        "filename": "SpirentSLC-1.0.0.dev4.tar.gz",
        "has_sig": false,
        "md5_digest": "67554f34991c567ee232f669778b5293",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 76275,
        "upload_time": "2017-09-15T17:25:14",
        "url": "https://files.pythonhosted.org/packages/13/bf/34e6731deb43953c903bae3f9ba114a8fab7a58a65f305ce6450bc4e7f30/SpirentSLC-1.0.0.dev4.tar.gz"
      }
    ],
    "1.0.0.dev5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5df6bc15f1f4e29ef3510ff5407edfaa",
          "sha256": "59f9ca4119fa83eecaccc80b22179284b61cb936ad7223c9b1cade1da6f415c7"
        },
        "downloads": -1,
        "filename": "SpirentSLC-1.0.0.dev5.tar.gz",
        "has_sig": false,
        "md5_digest": "5df6bc15f1f4e29ef3510ff5407edfaa",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 79230,
        "upload_time": "2017-09-26T11:31:45",
        "url": "https://files.pythonhosted.org/packages/37/90/544494d7250509eb14b7744809a724cd1de7fd240017e570d37a78460996/SpirentSLC-1.0.0.dev5.tar.gz"
      }
    ],
    "1.0.0.dev6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "03b059d41ba0bbcc336c11ce07fa682d",
          "sha256": "1f0edede6db99c5c47256dfa73886fef30cd1916c52fb85a7c95cdeb131e0186"
        },
        "downloads": -1,
        "filename": "SpirentSLC-1.0.0.dev6.tar.gz",
        "has_sig": false,
        "md5_digest": "03b059d41ba0bbcc336c11ce07fa682d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 78894,
        "upload_time": "2017-10-17T16:02:57",
        "url": "https://files.pythonhosted.org/packages/6b/34/9c5b8c2db5ab1a0c8ec04a7f6fe644c60e0c98114e927d93dd0a42b36b23/SpirentSLC-1.0.0.dev6.tar.gz"
      }
    ],
    "1.0.0.dev7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b6e83ad120f66869d1ca09819a7da2db",
          "sha256": "b8157fdbbf8fe4f9b2fa4980efa8863c11dc161a3141941e7ee2d87a5ccd63c9"
        },
        "downloads": -1,
        "filename": "SpirentSLC-1.0.0.dev7.tar.gz",
        "has_sig": false,
        "md5_digest": "b6e83ad120f66869d1ca09819a7da2db",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 83248,
        "upload_time": "2017-10-26T06:48:58",
        "url": "https://files.pythonhosted.org/packages/7a/25/a31354d1310e1107eb6accdae285785793252541256718090acc29a597b9/SpirentSLC-1.0.0.dev7.tar.gz"
      }
    ],
    "1.0.0.dev8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "69efe4dcdcbb0bc7d56b36f09bec1452",
          "sha256": "e09352dd33f30112061504f6247381626e82a354fcd940ef3f166a2cb0e2c848"
        },
        "downloads": -1,
        "filename": "SpirentSLC-1.0.0.dev8.tar.gz",
        "has_sig": false,
        "md5_digest": "69efe4dcdcbb0bc7d56b36f09bec1452",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 83256,
        "upload_time": "2017-10-26T06:56:55",
        "url": "https://files.pythonhosted.org/packages/0e/30/94480abf9db08162cf967cc5ef832da5e3279192b95535f68c804206dca3/SpirentSLC-1.0.0.dev8.tar.gz"
      }
    ],
    "1.0.0.dev9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0fffead3425690c56d810250ad95049a",
          "sha256": "57a3b10e0b55575bee0980771ec734feef5a4b1ff02c39e9aa82d7504cf80471"
        },
        "downloads": -1,
        "filename": "SpirentSLC-1.0.0.dev9.tar.gz",
        "has_sig": false,
        "md5_digest": "0fffead3425690c56d810250ad95049a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 83950,
        "upload_time": "2017-10-30T11:15:14",
        "url": "https://files.pythonhosted.org/packages/61/3d/8c33a62aaf1206629ee623dad0c70342fe4fe7908d453e57237657cc95d1/SpirentSLC-1.0.0.dev9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0fffead3425690c56d810250ad95049a",
        "sha256": "57a3b10e0b55575bee0980771ec734feef5a4b1ff02c39e9aa82d7504cf80471"
      },
      "downloads": -1,
      "filename": "SpirentSLC-1.0.0.dev9.tar.gz",
      "has_sig": false,
      "md5_digest": "0fffead3425690c56d810250ad95049a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 83950,
      "upload_time": "2017-10-30T11:15:14",
      "url": "https://files.pythonhosted.org/packages/61/3d/8c33a62aaf1206629ee623dad0c70342fe4fe7908d453e57237657cc95d1/SpirentSLC-1.0.0.dev9.tar.gz"
    }
  ]
}