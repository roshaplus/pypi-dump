{
  "info": {
    "author": "n.io",
    "author_email": "info@n.io",
    "bugtrack_url": null,
    "classifiers": [
      "License :: Other/Proprietary License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# Pubkeeper Server\n\nPubkeeper Server is the central authority, and directory, of clients within the Pubkeeper System.  In the system, the topics of information are published by **Brewers** and are subscribed to by **Patrons**.\n\n## Quick Start\n\n### Install From Wheels\n#### Acquire\n\nSince pubkeeper source is currently closed to a small subset of individuals, the quickest way to install Pubkeeper Server is from a set of wheel files.  Wheels are located in s3 under the Pubkeeper bucket.  For Pubkeeper Server you will need four wheels `pubkeeper-protocol`, `pubkeeper-communication`, `pubkeeper-communication-websocket`, and `pubkeeper-server`.\n\n#### Install\n\nInto your environment install the four wheel files together:\n\n```\npip install pubkeeper-protocol*.whl pubkeeper-comunication*.whl pubkeeper-server*.whl\n```\n\n### Install From Source\n#### Clone the repo\n\nIf you have access to the Pubkeeper project you may install directly from source for development purposes.\n\n```\ngit clone git@github.com:pubkeeper/python-server\n```\n\n#### Install\nEnsure the protocol, and communicaiton wheels are installed into your environment before installing the Pubkeeper Server.  Then you can install Pubkeeper Server into your own virtualenv.\n\n```\npip3 install -e /path/to/where/you/cloned/python-server\n```\n\n### Running Pubkeeper Server\n#### Config\n\nOnce cloned, you will need to create a `pubkeeper.conf` file that defines the secrets, and how the server should start:\n\n```\n[pubkeeper_server]\n; Used when generating and validating issued JWT tokens for clients\njwt_secret      = \"some_secret_value\"\n\n;\n; Networking\n;\n\n; Static server address, used when you have a specific address\n;ip_address = x.x.x.x\n\n; Not used with above, will grab and announce the bound address on the interface\ninterface       = lo0\n\n; Port to run server on\n;port = 9898\n\n; Heartbeat timer for Websocket connections\n;websocket_ping_interval = 10\n\n; If provided, will enable SSL\n;server_cert     = /path/to/cert.pem\n;server_key      = /path/to/key.pem\n```\n\n#### Authentication Tokens\n\nPubkeeper Server handles client authentication with JWT.  Based on the secret provided in the config file.  Tokens will be provided to the client, who will submit authentication packets with the token.\n\n```\npk_gen_token <client-id> <permission[, permission]>\n```\n\nPermissions is a placeholder for future development, for this release the use of `all` is acceptable.\n\n```\npk_gen_token test-client all\n```\n\n#### Running\n\nAfter you have installed the server, created the config file, and generated necessary tokens it is time to start the server.\n\n```\npk_server [-i] [-c /path/to/config]\n```\n\nBy default, if there are defined `server_cert` and `server_key` paths provided in the config the server will start in secure mode.  You may prevent this behavior by passing the `-i` flag.  The config file will be searched for the current directiory, however passing a `-c` flag you can specify the path to the config file to use.\n\n#### Status\n\nWhen the server is running on BSD/MacOS you may hit `^T` which will print out the current running state of the server.  For Linux you can send a `SIGUSR1` signal.\n\n## Complete Documentation\n\nA more complete documentation of the Pubkeeper Server, and Pubkeeper System may be found at: [docs.pubkeeper.com](http://docs.pubkeeper.com)\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/pubkeeper/python-server-core",
    "keywords": "pubkeeper",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pubkeeper.server.core",
    "platform": "",
    "project_url": "https://pypi.org/project/pubkeeper.server.core/",
    "release_url": "https://pypi.org/project/pubkeeper.server.core/1.0.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Brew, Fill, Consume",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "64c99b7d9560cf5c9ddba89a701bf2db",
          "sha256": "71c5d1693da37006ef4dca13a9a66d569b1e68803492a264ceb0f43833c2f450"
        },
        "downloads": -1,
        "filename": "pubkeeper.server.core-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "64c99b7d9560cf5c9ddba89a701bf2db",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 24614,
        "upload_time": "2017-11-15T16:18:33",
        "url": "https://files.pythonhosted.org/packages/fb/08/cf7d05500635340096d5cf42b47ab9bba13d8b28295cf2f20272c8bdeac0/pubkeeper.server.core-1.0.0-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "64c99b7d9560cf5c9ddba89a701bf2db",
        "sha256": "71c5d1693da37006ef4dca13a9a66d569b1e68803492a264ceb0f43833c2f450"
      },
      "downloads": -1,
      "filename": "pubkeeper.server.core-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "64c99b7d9560cf5c9ddba89a701bf2db",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 24614,
      "upload_time": "2017-11-15T16:18:33",
      "url": "https://files.pythonhosted.org/packages/fb/08/cf7d05500635340096d5cf42b47ab9bba13d8b28295cf2f20272c8bdeac0/pubkeeper.server.core-1.0.0-py3-none-any.whl"
    }
  ]
}