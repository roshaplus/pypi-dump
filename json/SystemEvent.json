{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": "",
    "classifiers": [],
    "description": "Introduction\r\n============\r\n\r\n``SystemEvent`` provides a simple synchronization primitive for use across multiple\r\nprocesses. The ``SystemEvent`` object emulates the ``threading.Event`` API exactly. In\r\naddition, simple scripts (``evt_set``, ``evt_wait``, and ``evt_clear``) are installed for\r\neasy usage from shell scripts.\r\n\r\nThe main reason to use ``SystemEvent`` is in situations when you want processes to wait\r\non other processes without the need for polling.\r\n\r\nInstallation\r\n============\r\n\r\n``pip install SystemEvent``\r\n\r\nUsage\r\n=====\r\n\r\n``SystemEvent`` uses named posix semaphores under the hood, so you need to choose event\r\nnames that are unique to your application. Any event references will use this unique name.\r\n\r\nFrom Python, use it *exactly* like you would use a ``threading.Event`` instances, with the\r\nmain difference being that you need to give your event a name so that other processes can\r\nreference it.\r\n\r\nFor example, in as many consoles as you like, set up an event and have it wait (the last\r\nline will block on each ```wait()`` call):\r\n\r\n    >>> import SystemEvent\r\n    >>> evt = SystemEvent.SystemEvent(\"my_event\")\r\n    >>> evt.wait()\r\n\r\nAlternatively, you can just run ``evt_wait my_event`` from your favorite shell (this is\r\njust a small script that does the above almost exactly).\r\n\r\nIn another console, set the event and note that the first event releases:\r\n\r\n    >>> import SystemEvent\r\n    >>> evt = SystemEvent.SystemEvent(\"my_event\")\r\n    >>> evt.set()\r\n\r\nAll events blocking on \"my_event\" will be immediately released by this ``set()`` call.\r\nSubsequent calls to ``evt.wait()`` from any process will not block, since the event is now\r\nglobally latched.\r\n\r\nTo clear the event (so that calls to ``evt.wait()`` will block again), call\r\n``evt.clear()``.\r\n\r\nAs with ``threading.Event`` (and ``multiprocessing.Event``) there is also an ``isSet()``\r\nmethod which tells you the current state (but watch out for race conditions when checking\r\nit).\r\n\r\nShell scripts\r\n=============\r\n\r\nThree shell scripts are provided, with the following usage:\r\n\r\n    evt_wait <event_name> [timeout_s]\r\n\r\n    evt_set <event_name>\r\n\r\n    evt_clear <event_name>\r\n\r\nThese scripts are thin shells over ``SystemEvent`` usage. The ``timeout_s`` option on\r\n``evt_wait`` is optional, and defaults to infinity.\r\n\r\nAll scripts have an exit code of 0, unless ``evt_wait`` times out, in which case it\r\nreturns 1.\r\n\r\nHow does it work?\r\n=================\r\n\r\n``SystemEvent`` currently uses a posix semaphore internally. To integrate with other\r\nnon-python applications, you can just access the same named semaphore. Just be careful\r\nthat you increment and decrement correctly. Check out the code for details... it is\r\nridiculously small.\r\n\r\nLicense\r\n=======\r\nMIT.  See ``LICENSE`` file.\r\n\r\nTODO\r\n====\r\n\r\n1. Add tests\r\n2. Make it work in Windows, too\r\n3. Remove the ``posix_ipc`` requirement",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/rwarren/SystemEvent",
    "keywords": "",
    "license": "MIT",
    "maintainer": "Russell Warren",
    "maintainer_email": "russ@perspexis.com",
    "name": "SystemEvent",
    "platform": "",
    "project_url": "https://pypi.org/project/SystemEvent/",
    "release_url": "https://pypi.org/project/SystemEvent/0.9.0/",
    "requires_python": "",
    "summary": "System-wide Event synchonization for posix (emulating the threading.Event api)",
    "version": "0.9.0"
  },
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e1db06679391bd210c6a0c0d21931955",
          "sha256": "9f66217817c86c9f113525c287e912b0d7baf6a4c6b584657a6ea7dfa0d9043d"
        },
        "downloads": 0,
        "filename": "SystemEvent-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e1db06679391bd210c6a0c0d21931955",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3629,
        "upload_time": "2017-05-25T03:03:18",
        "url": "https://files.pythonhosted.org/packages/03/e1/c87d528b85a6a79f1988bcbc06053275c5d6f064595fed872d9e8fa5ef4a/SystemEvent-0.9.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e1db06679391bd210c6a0c0d21931955",
        "sha256": "9f66217817c86c9f113525c287e912b0d7baf6a4c6b584657a6ea7dfa0d9043d"
      },
      "downloads": 0,
      "filename": "SystemEvent-0.9.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e1db06679391bd210c6a0c0d21931955",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3629,
      "upload_time": "2017-05-25T03:03:18",
      "url": "https://files.pythonhosted.org/packages/03/e1/c87d528b85a6a79f1988bcbc06053275c5d6f064595fed872d9e8fa5ef4a/SystemEvent-0.9.0.tar.gz"
    }
  ]
}