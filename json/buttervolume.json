{
  "info": {
    "author": "Christophe Combelles",
    "author_email": "ccomb@anybox.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Clustering"
    ],
    "description": ".. image:: https://travis-ci.org/anybox/buttervolume.svg?branch=master\n   :target: https://travis-ci.org/anybox/buttervolume\n   :alt: Travis state\n\n\nBTRFS Volume plugin for Docker\n==============================\n\nThis package provides a Docker volume plugin that creates a BTRFS subvolume for\neach container volume.\n\nPlease note this is **not** a BTRFS storage driver for Docker, but a plugin to manage only\nvolumes. It means you can use any storage driver, such as AUFS, this is independant topic.\n\n.. contents::\n\nIntroduction\n************\n\n`BTRFS <https://btrfs.wiki.kernel.org/>`_ is a next-generation copy-on-write\nfilesystem with subvolume and snapshot support. A BTRFS `subvolume\n<https://btrfs.wiki.kernel.org/index.php/SysadminGuide#Subvolumes>`_ can be\nseen as an independant file namespace that can live in a directory and can be\nmounted as a filesystem and snapshotted individually.\n\nOn the other hand, `Docker volumes\n<https://docs.docker.com/engine/tutorials/dockervolumes/>`_ are commonly used\nto store persistent data of stateful containers, such as a MySQL/PostgreSQL\ndatabase or an upload directory of a CMS. By default, Docker volumes are just a\ndumb directory in the host filesystem.  A number of `Volume plugins\n<https://docs.docker.com/engine/extend/legacy_plugins/#/volume-plugins>`_\nalready exist for various storage backends, including distributed filesystems,\nbut small clusters often can't afford to deploy a distributed filesystem.\n\nWe believe BTRFS subvolumes are a powerful and lightweight storage solution for\nDocker volumes, allowing fast and easy replication (and backup) across several\nnodes of a small cluster.\n\nBuild\n*****\n\nYou can build a docker image with the provided Dockerfile::\n\n    $ cd docker\n    $ docker build -t buttervolume .\n\nInstall and run\n***************\n\nMake sure the directory ``/var/lib/docker/volumes`` is living in a BTRFS\nfilesystem. It can be a BTRFS mountpoint or a BTRFS subvolume or both.\nYou should also create the directory for the unix socket of the plugin::\n\n    $ sudo mkdir /run/docker/plugins\n\nThen create a container for buttervolume with access to the host volumes and\nthe unix socket\n\nEither from the image you just built::\n\n    $ sudo docker create --privileged -v /var/lib/docker:/var/lib/docker -v /run/docker/plugins/:/run/docker/plugins/ --name buttervolume buttervolume\n    $ docker start buttervolume\n\nOr directly by pulling a `prebaked image <https://hub.docker.com/r/anybox/buttervolume/>`_ from the Docker hub::\n\n    $ docker run --privileged -v /var/lib/docker/volumes:/var/lib/docker/volumes -v /run/docker/plugins:/run/docker/plugins anybox/buttervolume\n\nYou can also locally install and run the plugin with::\n\n    $ virtualenv venv\n    $ ./venv/bin/python setup.py develop\n    $ sudo ./venv/bin/buttervolume run\n\nUsage\n*****\n\nRunning the plugin\n------------------\n\nIf you installed it locally, You can start the plugin with::\n\n    $ sudo buttervolume run\n\nIf you're running it in a privileged container, it will be automatically started.\n\nWhen started it will create a unix socket ``/var/run/docker/plugins/btrfs.sock`` for use by\nDocker. The name of the socket file is actually the name of the plugin you can\nuse with ``docker volume create -d <driver>`` or ``docker create --volume-driver=<driver>``.  when started, the plugin will also start\nits own scheduler to run periodic jobs (such as a snapshot, replication, purge or synchronization)\n\nCreating and deleting volumes\n-----------------------------\n\nOnce the plugin is running, whenever you create a container you can specify the\nvolume driver with ``docker create --volume-driver=btrfs --name <name>\n<image>``.  You can also manually create a BTRFS volume with ``docker volume\ncreate -d btrfs``. It also works with docker-compose, by specifying the\n``btrfs`` driver in the ``volumes`` section of the compose file.\n\nWhen you delete the volume with ``docker rm -v <container>`` or ``docker volume\nrm <volume>``, the BTRFS subvolume is deleted. If you snapshotted the volume\nelsewhere in the meantime, the snapshots won't be deleted.\n\nManaging volumes and snapshots\n------------------------------\n\nWhen buttervolume is installed, it provides a command line tool\n``buttervolume``, with the following subcommands::\n\n    run                 Run the plugin in foreground\n    snapshot            Snapshot a volume\n    snapshots           List snapshots\n    schedule            (un)Schedule a snapshot, replication or purge\n    scheduled           List scheduled actions\n    restore             Restore a snapshot\n    send                Send a snapshot to another host\n    sync                Synchronise a volume from a remote host volume\n    rm                  Delete a snapshot\n    purge               Purge old snapshot using a purge pattern\n\nCreate a snapshot\n-----------------\n\nYou can create a readonly snapshot of the volume with::\n\n    $ buttervolume snapshot <volume>\n\nThe volumes are currently expected to live in ``/var/lib/docker/volumes`` and\nthe snapshot will be created in ``/var/lib/docker/snapshots``, by appending the\ndatetime to the name of the volume, separated with ``@``.\n\nList the snapshots\n------------------\n\nYou can list all the snapshots::\n\n    $ buttervolume snapshots\n\nor just the snapshots corresponding to a volume with::\n\n    $ buttervolume snapshots <volume>\n\n``<volume>`` is the name of the volume, not the full path. It is expected\nto live in ``/var/lib/docker/volumes``.\n\nRestore a snapshot\n------------------\n\nYou can restore a snapshot as the main volume. The current volume will first be\nsnapshotted, deleted, then replaced with the snapshot.  So no data is lost if\nyou do something wrong. Please take care of stopping the container before\nrestoring a snapshot::\n\n    $ buttervolume restore <snapshot>\n\n``<snapshot>`` is the name of the snapshot, not the full path. It is expected\nto live in ``/var/lib/docker/snapshots``.\n\nDelete a snapshot\n-----------------\n\nYou can delete a snapshot with::\n\n    $ buttervolume rm <snapshot>\n\n``<snapshot>`` is the name of the snapshot, not the full path. It is expected\nto live in ``/var/lib/docker/snapshots``.\n\nReplicate a snapshot to another host\n------------------------------------\n\nYou can incrementally send snapshots to another host, so that data is\nreplicated to several machines, allowing to quickly move a stateful docker\ncontainer to another host. The first snapshot is first sent as a whole, then\nthe next snapshots are used to only send the difference between the current one\nand the previous one. This allows to replicate snapshots very often without\nconsuming a lot of bandwith or disk space::\n\n    $ buttervolume send <host> <snapshot>\n\n``<snapshot>`` is the name of the snapshot, not the full path. It is expected\nto live in ``/var/lib/docker/snapshots`` and is replicated to the same path on\nthe remote host.\n\n\n``<host>`` is the hostname or IP address of the remote host. The snapshot is\ncurrently sent using BTRFS send/receive through ssh. This requires that ssh\nkeys be present and already authorized on the target host, and that the\n``StrictHostKeyChecking no`` option be enabled in ``~/.ssh/config``.\n\n\nSynchronize a volume from another host volume\n---------------------------------------------\n\nYou can receive data from a remote volume, so in case there is a volume on\nthe remote host with the **same name**, it will get new and most recent data\nfrom the distantant volume and replace in the local volume. Before running the\n``rsync`` command a snapshot is made on the locale machine to manage recovery::\n\n    $ buttervolume sync <volume> <host1> [<host2>][...]\n\nThe intent is to synchronize a volume between multi hosts on running\ncontainers, so you should schedule that action on each nodes from all remote\nhosts.\n\n.. note::\n\n   As we are pulling data from multiple hosts we never remove data, consider\n   removing scheduled actions before removing data on each hosts.\n\n.. warning::\n\n   Make sure your application is able to handle such synchronisation\n\n\nPurge old snapshots\n-------------------\n\nYou can purge old snapshot corresponding to the specified volume, using a retention pattern::\n\n    $ buttervolume purge <pattern> <volume>\n\nIf you're unsure whether you retention pattern is correct, you can run the\npurge with the ``--dryrun`` option, to inspect what snapshots would be deleted,\nwithout deleting them::\n\n    $ buttervolume purge --dryrun <pattern> <volume>\n\n``<volume>`` is the name of the volume, not the full path. It is expected\nto live in ``/var/lib/docker/volumes``.\n\n``<pattern>`` is the snapshot retention pattern. It is a semicolon-separated\nlist of time length specifiers with a unit. Units can be ``m`` for minutes,\n``h`` for hours, ``d`` for days, ``w`` for weeks, ``y`` for years. The pattern\nshould have at least 2 items.\n\nHere are a few examples of retention patterns:\n\n- ``4h:1d:2w:2y``\n    Keep all snapshots in the last four hours, then keep only one snapshot\n    every four hours during the first day, then one snapshot per day during\n    the first two weeks, then one snapshot every two weeks during the first\n    two years, then delete everything after two years.\n\n- ``4h:1w``\n    keep all snapshots during the last four hours, then one snapshot every\n    four hours during the first week, then delete older snapshots.\n\n- ``2h:2h``\n    keep all snapshots during the last two hours, then delete older snapshots.\n\nSchedule a job\n--------------\n\nYou can schedule a periodic job, such as a snapshot, a replication, a\nsynchronization or a purge. The schedule it self is stored in\n``/etc/buttervolume/schedule.csv``.\n\n**Schedule a snapshot** of a volume every 60 minutes::\n\n    $ buttervolume schedule snapshot 60 <volume>\n\nRemove the same schedule by specifying a timer of 0 min::\n\n    $ buttervolume schedule snapshot 0 <volume>\n\n**Schedule a replication** of volume ``foovolume`` to ``remote_host``::\n\n    $ buttervolume schedule replicate:remote_host 3600 foovolume\n\nRemove the same schedule::\n\n    $ buttervolume schedule replicate:remote_host 0 foovolume\n\n**Schedule a purge** every hour of the snapshots of volume ``foovolume``, but\nkeep all the snapshots in the last 4 hours, then only one snapshot every 4\nhours during the first week, then one snapshot every week during one year, then\ndelete all snapshots after one year::\n\n    $ buttervolume schedule purge:4h:1w:1y 60 foovolume\n\nRemove the same schedule::\n\n    $ buttervolume schedule purge:4h:1w:1y 0 foovolume\n\nUsing the right combination of snapshot schedule timer, purge schedule timer\nand purge retention pattern, you can create you own backup strategy, from the\nsimplest ones to more elaborate ones. A common one is the following::\n\n    $ buttervolume schedule snapshot 1440 <volume>\n    $ buttervolume schedule purge:1d:4w:1y 1440 <volume>\n\nIt should create a snapshot every day, then purge snapshots everydays while\nkeeping all snapshots in the last 24h, then one snapshot per day during one\nmonth, then one snapshot per month during only one year.\n\n**Schedule a syncrhonization** of volume ``foovolume`` from ``remote_host1``\nabd ``remote_host2``::\n\n    $ buttervolume schedule synchronize:remote_host1,remote_host2 60 foovolume\n\nRemove the same schedule::\n\n    $ buttervolume schedule synchronize:remote_host1,remote_host2 0 foovolume\n\n\nList scheduled jobs\n-------------------\n\nYou can list all the scheduled job with::\n\n    $ buttervolume scheduled\n\nIt will display the schedule in the same format used for adding the schedule,\nwhich is convenient to remove an existing schedule or add a similar one.\n\nDisabling copy-on-write\n-----------------------\n\nUPDATE: Copy On Write is disabled by default.\n\nTODO: replace the .nocow file feature with an option to pass\n\nWith `buttervolume` you can disable copy-on-write in a volume by creating a ``.nocow`` file at the\nroot of the volume. The `buttervolume` plugin will detect it at mount-time and apply ``chattr +C`` on the volume root.\n\nWhy disabling copy-on-write? If your docker volume stores databases such as\nPostgreSQL or MariaDB, the copy-on-write feature may hurt performance a lot.\nThe good news is that disabling copy-on-write does not prevent from doing\nsnaphots, so we get the best of both world: good performances with the ability\nto do snapshots.\n\nCreating such a ``.nocow`` file can easily be done in a Dockerfile, before the\n``VOLUME`` command:\n\n.. code:: Dockerfile\n\n    RUN mkdir -p /var/lib/postgresql/data \\\n        && chown -R postgres: /var/lib/postgresql/data \\\n        && touch /var/lib/postgresql/data/.nocow\n    VOLUME /var/lib/postgresql/data\n\nAlternatively you can create the ``.nocow`` file just after the ``docker\ncreate`` command, by inspecting the location of the created volumes with\n``docker inspect container | grep volumes``.\n\nTest\n****\n\nIf your volumes directory is a BTRFS partition or volume, tests can be run\nwith::\n\n    $ export SSH_PORT=22  # port of your running ssh server with authorized key\n    $ sudo -E python3 setup.py test\n\nor using and testing the docker image (with python >= 3.5)::\n\n    $ docker build -t anybox/buttervolume docker/\n    $ sudo docker run -it --rm --privileged \\\n        -v /var/lib/docker:/var/lib/docker \\\n        -v \"$PWD\":/usr/src/buttervolume \\\n        -w /usr/src/buttervolume \\\n        anybox/buttervolume test\n\nIf you have no BTRFS partitions or volumes you can setup a virtual partition\nin a file as follows (tested on Debian 8):\n\n* Setup BTRFS virtual partition::\n\n    $ sudo qemu-img create /var/lib/docker/btrfs.img 10G\n    Formatting '/var/lib/docker/btrfs.img', fmt=raw size=10737418240\n    $ sudo mkfs.btrfs /var/lib/docker/btrfs.img\n    Btrfs v3.17\n    See http://btrfs.wiki.kernel.org for more information.\n\n    Turning ON incompat feature 'extref': increased hardlink limit per file to 65536\n    ERROR: device scan failed '/var/lib/docker/btrfs.img' - Block device required\n    fs created label (null) on /var/lib/docker/btrfs.img\n        nodesize 16384 leafsize 16384 sectorsize 4096 size 10.00GiB\n\n.. note::\n\n   you can ignore the error, in fact the new FS is formatted\n\n* Mount the partition somewhere temporarily to create 3 new BTRFS subvolumes::\n\n    $ sudo mkdir /tmp/btrfs_mount_point \\\n        && sudo mount -o loop /var/lib/docker/btrfs.img /tmp/btrfs_mount_point/ \\\n        && sudo btrfs subvolume create /tmp/btrfs_mount_point/snapshots \\\n        && sudo btrfs subvolume create /tmp/btrfs_mount_point/volumes \\\n        && sudo btrfs subvolume create /tmp/btrfs_mount_point/received \\\n        && sudo umount /tmp/btrfs_mount_point/ \\\n        && rm -r /tmp/btrfs_mount_point/\n\n* Stop docker, create required mount point and restart docker::\n\n    $ sudo systemctl stop docker \\\n        && sudo mkdir -p /var/lib/docker/volumes \\\n        && sudo mkdir -p /var/lib/docker/snapshots \\\n        && sudo mkdir -p var/lib/docker/received \\\n        && sudo mount -o loop,subvol=volumes /var/lib/docker/btrfs.img /var/lib/docker/volumes \\\n        && sudo mount -o loop,subvol=snapshots /var/lib/docker/btrfs.img /var/lib/docker/snapshots \\\n        && sudo mount -o loop,subvol=received /var/lib/docker/btrfs.img /var/lib/docker/received \\\n        && sudo systemctl start docker\n\n* once you are done with your test when you can umount those volume and you will\n  find back your previous docker volumes::\n\n\n    $ sudo systemctl stop docker \\\n        && sudo umount /var/lib/docker/volumes \\\n        && sudo umount /var/lib/docker/snapshots \\\n        && sudo umount /var/lib/docker/received \\\n        && sudo systemctl start docker \\\n        && sudo rm /var/lib/docker/btrfs.img\n\nCredits\n*******\n\n- Christophe Combelles\n- Pierre Verkest\n\n\nCHANGELOG\n=========\n\n1.0 (2017-05-24)\n****************\n\n- initial release, used in production\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/anybox/buttervolume",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "buttervolume",
    "platform": "",
    "project_url": "https://pypi.org/project/buttervolume/",
    "release_url": "https://pypi.org/project/buttervolume/1.0/",
    "requires_python": "",
    "summary": "Docker plugin to manage Docker Volumes as BTRFS subvolumes",
    "version": "1.0"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dd0343294d567c3f9e01202a75261ce7",
          "sha256": "9c37009ee677a8065bfc1b323d8b6f1d828bd1607f4b578431f0f3096ef3b625"
        },
        "downloads": 0,
        "filename": "buttervolume-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dd0343294d567c3f9e01202a75261ce7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16378,
        "upload_time": "2017-05-24T15:21:08",
        "url": "https://files.pythonhosted.org/packages/7f/aa/665ec886a81bf29a6f825d4becc28b2d519ae7d61c114e5d998a3520578f/buttervolume-1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "dd0343294d567c3f9e01202a75261ce7",
        "sha256": "9c37009ee677a8065bfc1b323d8b6f1d828bd1607f4b578431f0f3096ef3b625"
      },
      "downloads": 0,
      "filename": "buttervolume-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dd0343294d567c3f9e01202a75261ce7",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 16378,
      "upload_time": "2017-05-24T15:21:08",
      "url": "https://files.pythonhosted.org/packages/7f/aa/665ec886a81bf29a6f825d4becc28b2d519ae7d61c114e5d998a3520578f/buttervolume-1.0.tar.gz"
    }
  ]
}