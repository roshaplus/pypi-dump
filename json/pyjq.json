{
  "info": {
    "author": "OMOTO Kenji",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: JavaScript",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "pyjq: Binding for jq JSON Processor\n===================================\n\npyjq is a Python bindings for jq (http://stedolan.github.io/jq/).\n\n    jq is like sed for JSON data \u2013 you can use it to slice and filter\n    and map and transform structured data with the same ease that sed,\n    awk, grep and friends let you play with text.\n\n    http://stedolan.github.io/jq/\n\nYou can seamlessly call jq script (like regular expression) and process\nplain python data structure.\n\nFor your information, https://pypi.python.org/pypi/jq is a also jq\nbindings but different and incompatible with pyjq.\n\nExample\n-------\n\n::\n\n    >>> data = dict(\n    ...     parameters= [\n    ...         dict(name=\"PKG_TAG_NAME\", value=\"trunk\"),\n    ...         dict(name=\"GIT_COMMIT\", value=\"master\"),\n    ...         dict(name=\"TRIGGERED_JOB\", value=\"trunk-buildall\")\n    ...     ],\n    ...     id=\"2013-12-27_00-09-37\",\n    ...     changeSet=dict(items=[], kind=\"git\"),\n    ... )\n    >>> import pyjq\n    >>> pyjq.first('.parameters[] | {\"param_name\": .name, \"param_type\":.type}', data)\n    {'param_type': None, 'param_name': 'PKG_TAG_NAME'}\n\nInstall\n-------\n\nYou can install from PyPI by usual way.\n\n::\n\n    pip install pyjq\n\nAPI\n---\n\nFor jq script, `see its\nmanual <http://stedolan.github.io/jq/manual/>`__.\n\nOnly four APIs are provided:\n\n-  ``all``\n-  ``first``\n-  ``one``\n-  ``compile``\n\n``all`` transforms a value by JSON script and returns all results as a\nlist.\n\n::\n\n    >>> value = {\"user\":\"stedolan\",\"titles\":[\"JQ Primer\", \"More JQ\"]}\n    >>> pyjq.all('{user, title: .titles[]}', value)\n    [{'user': 'stedolan', 'title': 'JQ Primer'}, {'user': 'stedolan', 'title': 'More JQ'}]\n\n``all`` takes an optional argument ``vars``. ``vars`` is a dictonary of\npredefined variables for ``script``. The values in ``vars`` are avaiable\nin the ``script`` as a ``$key``. That is, ``vars`` works like ``--arg``\noption and ``--argjson`` option of jq command.\n\n::\n\n    >>> pyjq.all('{user, title: .titles[]} | select(.title == $title)', value, vars={\"title\": \"More JQ\"})\n    [{'user': 'stedolan', 'title': 'More JQ'}]\n\n``all`` takes an optional argument ``url``. If ``url`` is given, the\nsubject of transformation is got from the ``url``.\n\n::\n\n    >> pyjq.all(\".[] | .login\", url=\"https://api.github.com/repos/stedolan/jq/contributors\") # get all contributors of jq\n    ['nicowilliams', 'stedolan', 'dtolnay', ...\n\nAdditionally, ``all`` takes an optional argument ``opener``. The default\n``opener`` will simply download contents by ``urllib.request.urlopen``\nand decode by ``json.decode``. However, you can customize this behavior\nusing custom ``opener``.\n\n``first`` is almost some to ``all`` but it ``first`` returns the first\nresult of transformation.\n\n::\n\n    >>> value = {\"user\":\"stedolan\",\"titles\":[\"JQ Primer\", \"More JQ\"]}\n    >>> pyjq.all('{user, title: .titles[]}', value)\n    [{'user': 'stedolan', 'title': 'JQ Primer'}, {'user': 'stedolan', 'title': 'More JQ'}]\n\n``first`` returns ``default`` when there are no results.\n\n::\n\n    >>> value = {\"user\":\"stedolan\",\"titles\":[\"JQ Primer\", \"More JQ\"]}\n    >>> pyjq.first('.titles[] | select(test(\"e\"))', value) # The first title which is contains \"e\"\n    'JQ Primer'\n\n``first`` returns the first result of transformation. It returns\n``default`` when there are no results.\n\n::\n\n    >>> value = {\"user\":\"stedolan\",\"titles\":[\"JQ Primer\", \"More JQ\"]}\n    >>> pyjq.first('.titles[] | select(test(\"T\"))', value, \"Third JS\") # The first title which is contains \"T\"\n    'Third JS'\n\n``one`` do also returns the first result of transformation but raise\nException if there are no results.\n\n::\n\n    >>> value = {\"user\":\"stedolan\",\"titles\":[\"JQ Primer\", \"More JQ\"]}\n    >>> pyjq.one('.titles[] | select(test(\"T\"))', value)\n    IndexError: Result of jq is empty\n\nLimitation\n----------\n\njq is a JSON Processor. Therefore pyjq is able to process only \"JSON\ncompatible\" data (object made only from str, int, float, list, dict).\n\nQ&A\n---\n\nHow can I process json string got from API by pyjq?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou should apply ``json.loads`` in the standard library before pass to\npyjq.\n\nLicense\n-------\n\nCopyright (c) 2014 OMOTO Kenji. Released under the MIT license. See\nLICENSE for details.\n\nChanges\n-------\n\n2.0.0\n~~~~~\n\n-  Semantic versioning.\n-  Bundle source codes of jq and oniguruma.\n-  Supported Python 3.5.\n-  Dropped support for Python 3.2.\n-  Aeded ``all`` method.\n\n1.0\n~~~\n\n-  First release.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/doloopwhile/pyjq",
    "keywords": null,
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pyjq",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pyjq/",
    "release_url": "https://pypi.org/project/pyjq/2.0.0/",
    "requires_python": null,
    "summary": "Binding for jq JSON processor.",
    "version": "2.0.0"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9fa52399691d3989f262d36c4e5b66da",
          "sha256": "fc06f90a351ebb05e7ab6c12bb769d7771a0d76df6eb07ea00de137e67c348b5"
        },
        "downloads": 2964,
        "filename": "pyjq-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9fa52399691d3989f262d36c4e5b66da",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 60081,
        "upload_time": "2014-01-08T16:55:48",
        "url": "https://files.pythonhosted.org/packages/14/c8/03bc4f41abe4b1e900d9bc1f1cebdb79f998a5563364e6ea1533f7b228f8/pyjq-1.0.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1372aeaf5bab821eb7522c2c53d1bfb5",
          "sha256": "c34e69b0bcad21877e82c146d6e13e15f999d429d33b36dac2a18899fda2abc4"
        },
        "downloads": 647,
        "filename": "pyjq-2.0.0.zip",
        "has_sig": false,
        "md5_digest": "1372aeaf5bab821eb7522c2c53d1bfb5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1744963,
        "upload_time": "2016-02-13T15:45:45",
        "url": "https://files.pythonhosted.org/packages/3d/ce/a67e6a4ad12e766f01f67caff3313e876bcfcf4360512194db9af55b80c0/pyjq-2.0.0.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1372aeaf5bab821eb7522c2c53d1bfb5",
        "sha256": "c34e69b0bcad21877e82c146d6e13e15f999d429d33b36dac2a18899fda2abc4"
      },
      "downloads": 647,
      "filename": "pyjq-2.0.0.zip",
      "has_sig": false,
      "md5_digest": "1372aeaf5bab821eb7522c2c53d1bfb5",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 1744963,
      "upload_time": "2016-02-13T15:45:45",
      "url": "https://files.pythonhosted.org/packages/3d/ce/a67e6a4ad12e766f01f67caff3313e876bcfcf4360512194db9af55b80c0/pyjq-2.0.0.zip"
    }
  ]
}