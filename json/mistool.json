{
  "info": {
    "author": "Christophe BAL",
    "author_email": "projetmbc@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Topic :: Desktop Environment :: File Managers",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Logging",
      "Topic :: Text Processing :: Markup :: LaTeX",
      "Topic :: Utilities"
    ],
    "description": "What about this package ?\n=========================\n\n**misTool** is the contraction of **missing**, **miscellaneous** and\n**tool(s)**. This package contains some modules that could be useful for\nPython developments.\n\n***If you want more informations and examples than thereafter, just take\na look at the docstrings.***\n\nI beg your pardon for my english...\n===================================\n\nEnglish is not my native language, so be nice if you notice\nmisunderstandings, misspellings or grammatical errors in my documents\nand codes.\n\nWhat's new in this version ``1.2.1-beta`` ?\n===========================================\n\nThe function ``between`` in ``string_use`` has a new optional argument\n``keepseps`` so as to keep or not the seprators.\n\nWhat's new in this version ``1.2.0-beta`` ?\n===========================================\n\nThe module ``date_use`` has been changed to ``datetime_use`` : see the\npresentation above to know how to work now with dates inside\n**misTool**.\n\nWhat's new in this version ``1.1.1-beta`` ?\n===========================================\n\nIn the module ``python_use``, the new class ``MKOrderedDict`` allows to\ndefine kinds of ordered dictionaries accepting several times the same\nkey but at different \"places\".\n\n**Warning !** Here are some important changes.\n\n1. In the module ``python_use``, the class ``OrderedRecuDict`` becomes\n   ``RecuOrderedDict``.\n\n2. In the module ``string_use``, the function ``ascii_it`` becomes\n   ``asciify``.\n\nThe module ``os_use``\n=====================\n\nChanging the working directory for commands\n-------------------------------------------\n\nWith ``os_use.cd``, you have a context which changes temporarily the\ndirectory where launching terminal like commands. When the context is\nclosed, the working directory goes back to the one just before the call\nof ``os_use.cd``.\n\nLet's see an example. We suppose that we have the following directory\nwith the absolute path ``/Users/projetmbc/basic_dir`` in a Unix system.\n\n::\n\n    + basic_dir\n        * latex_1.tex\n        * latex_2.tex\n        * python_1.py\n        * python_2.py\n        * python_3.py\n        * python_4.py\n        * text_1.txt\n        * text_2.txt\n        * text_3.txt\n        + empty_dir\n        + sub_dir\n            * code_A.py\n            * code_B.py\n            * slide_A.pdf\n            * slide_B.pdf\n            + sub_sub_dir\n                * doc.pdf\n\nThe following code first goes inside ``/Users/projetmbc/basic_dir`` and\nthen it moves to ``/Users/projetmbc/basic_dir/sub_dir``. With\n``subprocess.call(\"ls\")``, we simply use the Unix command ``ls`` so as\nto list files and folders inside the current working directory.\n\n.. code:: python\n\n    >>> import subprocess\n    >>> from mistool.os_use import cd\n    >>> with cd(\"/Users/projetmbc/basic_dir\"):\n    ...     subprocess.call(\"ls\")\n    empty_dir   python_1.py python_4.py text_2.txt\n    latex_1.tex python_2.py sub_dir     text_3.txt\n    latex_2.tex python_3.py text_1.txt\n    >>> with cd(\"/Users/projetmbc/basic_dir/sub_dir\"):\n    ...     subprocess.call(\"ls\")\n    code_A.py   slide_A.pdf sub_sub_dir\n    code_B.py   slide_B.pdf\n\nLaunching commands like in a terminal\n-------------------------------------\n\nThe aim of the function ``os_use.runthis`` is to simplify a lot the\nlaunching of subprocesses *(just use commands as you were inside your\nterminal)*. Let's consider the basic following Python script with\nabsolute path ``/Users/projetmbc/script.py``.\n\n.. code:: python\n\n    print(\"Everything is ok.\")\n\nTo launch this program, we just have to use the single string Unix\ncommand ``python3 /Users/projetmbc/script.py`` like in the following\nlines. You can see that by default nothing is printed, so you have to\nuse ``showoutput = True`` if you want to see what the script launched\nprints.\n\n.. code:: python\n\n    >>> from mistool.os_use import PPath, runthis\n    >>> pyfile = PPath(\"/Users/projetmbc/script.py\")\n    >>> runthis(cmd = \"python3 {0}\".format(ppath))\n    >>> runthis(cmd = \"python3 {0}\".format(ppath), showoutput = True)\n    Everything is ok.\n\nSystem used and environment's path\n----------------------------------\n\nThe call to ``os_use.system()`` returns the name, in lower case, of the\nOS used : possible strings returned can be for example ``\"windows\"``,\n``\"mac\"``, ``\"linux\"`` and also ``\"java\"``.\n\n``os_use.pathenv()`` gives you the paths of executables known by your OS\n*(this is indeed an alias for ``os.getenv('PATH')``)*.\n\nEnhanced version of the class ``pathlib.Path``\n----------------------------------------------\n\nThe class ``os_use.PPath`` adds several methods to the useful class\n``pathlib.Path``. Here are examples.\n\nInformations about one path\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following code shows additional informations given by the class\n``os_use.PPath``.\n\n.. code:: python\n\n    >>> from mistool.os_use import PPath\n    >>> path = PPath(\"dir/subdir/file.txt\")\n    >>> path.parent\n    PPath('dir/subdir')\n    >>> print(path.depth)\n    2\n    >>> print(path.ext)\n    'txt'\n\nAnother useful method named ``is_protected`` works as explained below.\n\n1. If the path does not point to an existing file or folder, an OS error\n   is raised.\n\n2. If the path is the one of a folder, the answer returned is ``True``\n   for a modifiable directory and ``False`` otherwise.\n\n3. Finally if the path points to a file, then that is its parent folder\n   which is tested.\n\nThere is also the method ``is_empty`` which can give three different\nresponses.\n\n1. If the path is the one of an empty directory, ``False`` is returned.\n\n2. ``True`` is returned when the path corresponds to an non-empty\n   folder.\n\n3. If the path doesn't point to an existing directory an OS error is\n   raised.\n\nChanging one path\n~~~~~~~~~~~~~~~~~\n\nChanging or adding an extension is very easy with the method\n``with_ext``.\n\n.. code:: python\n\n    >>> from mistool.os_use import PPath\n    >>> path_no_ext = PPath(\"dir/subdir\")\n    >>> path_no_ext.with_ext(\"ext\")\n    PPath('dir/subdir.ext')\n    >>> path_ext = PPath(\"dir/subdir/file.txt\")\n    >>> path_ext.with_ext(\"ext\")\n    PPath('dir/subdir/file.ext')\n\nObtaining a short version or a normalized one of a path needs no effort.\nHere is how to do that *(``~`` is a shortcut for the main OS user's\nfolder)*.\n\n.. code:: python\n\n    >>> from mistool.os_use import PPath\n    >>> path_too_long = PPath(\"~/dir_1/dir_2/dir_3/../../file.txt\")\n    >>> path_too_long.normpath\n    PPath('/Users/projetmbc/dir_1/file.txt')\n    >>> path_long = PPath(\"/Users/projetmbc/dir_1/dir_2/dir_3/../../file.txt\")\n    >>> path_long.shortpath\n    PPath('~/dir_1/file.txt')\n\nComparing paths\n~~~~~~~~~~~~~~~\n\nThe \"common\" folder of several paths is obtained by using the method\n``common_with`` or equivalently the magic operator ``&``.\n\n.. code:: python\n\n    >>> from mistool.os_use import PPath\n    >>> path        = PPath(\"/Users/projetmbc/source/doc\")\n    >>> path_1      = PPath(\"/Users/projetmbc/README\")\n    >>> path_2      = PPath(\"/Users/projetmbc/source/misTool/os_use.py\")\n    >>> path_danger = PPath(\"/NoUser/projects\")\n    >>> path.common_with(path_1)           # Same as ``path & path_1``\n    PPath('/Users/projetmbc')\n    >>> path.common_with(path_2)           # Same as ``path & path_2``\n    PPath('/Users/projetmbc/source')\n    >>> path.common_with(path_danger)      # No error raised !\n    PPath('/')\n    >>> path.common_with(path_1, path_2)   # Same as ``path & path_1 & path_2``\n    PPath('/Users/projetmbc')\n    >>> path.common_with([path_1, path_2]) # Same as ``path & [path_1, path_2]``\n    PPath('/Users/projetmbc')\n\nThe class ``os_use.PPath`` adds a magic method so as to use\n``path - anotherpath`` instead of ``path.relative_to(anotherpath)``\nwhere the method ``relative_to`` is implemented by the class\n``pathlib.Path``.\n\n.. code:: python\n\n    >>> from mistool.os_use import PPath\n    >>> main    = PPath(\"/Users/projetmbc\")\n    >>> path_1  = PPath(\"/Users/projetmbc/README\")\n    >>> path_2  = PPath(\"/Users/projetmbc/source/misTool/os_use.py\")\n    >>> path_1 - main\n    PPath('README')\n    >>> path_2 - main\n    PPath('source/misTool/os_use.py')\n    >>> path_2 - path_1\n    Traceback (most recent call last):\n    [...]\n    ValueError: '/Users/projetmbc/source/misTool/os_use.py' does not start with '/Users/projetmbc/README'\n\nIf you need to know the depth of one path relatively to another, just\ncall the method ``depth_in``.\n\n.. code:: python\n\n    >>> from mistool.os_use import PPath\n    >>> main    = PPath(\"/Users/projetmbc\")\n    >>> path_1  = PPath(\"/Users/projetmbc/README\")\n    >>> path_2  = PPath(\"/Users/projetmbc/source/misTool/os_use.py\")\n    >>> path_pb = PPath(\"/NoUser/projects\")\n    >>> print(path_1.depth_in(main))\n    0\n    >>> print(path_2.depth_in(main))\n    2\n    >>> print(path_pb.depth_in(main))\n    Traceback (most recent call last):\n    [...]\n    ValueError: '/NoUser/projects' does not start with '/Users/projetmbc'\n\nThe special concept of \"regpath\"\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA \"regpath\" is a query mixing all the power of regexes and the Unix-glob\nspecial characters *(there are also some additional query features)*. We\nwill use some \"regpaths\" in the incoming examples.\n\n**See the docstring of the method ``regpath2meta`` for complete\ninformations about the \"regpaths\".**\n\nWalk and see\n~~~~~~~~~~~~\n\nThe method ``see`` **tries** to open the current path with a possible\nassociated application. For example, an HTML file will be opened by your\ndefault browser.\n\nYou can walk very easily inside a directory thanks to the method\n``walk`` and the \"regpaths\" *(see the previous section)*. For example,\nlet's suppose that we have the following directory with absolute path\n``/Users/projetmbc/basic_dir`` in a Unix system.\n\n::\n\n    + basic_dir\n        * latex_1.tex\n        * latex_2.tex\n        * python_1.py\n        * python_2.py\n        * python_3.py\n        * python_4.py\n        * text_1.txt\n        * text_2.txt\n        * text_3.txt\n        + empty_dir\n        + sub_dir\n            * code_A.py\n            * code_B.py\n            * slide_A.pdf\n            * slide_B.pdf\n            + sub_sub_dir\n                * doc.pdf\n\nHere are easy to understand examples where the regpath ``\"*\"`` is for a\nnon-recursive search contrary to the regpath ``\"**\"``.\n\n.. code:: python\n\n    >>> from mistool.os_use import PPath\n    >>> folder = PPath(\"/Users/projetmbc/basic_dir\")\n    >>> for p in folder.walk(\"dir::**\"):\n    ...     print(\"+\", p)\n    ...\n    + /Users/projetmbc/basic_dir/empty_dir\n    + /Users/projetmbc/basic_dir/sub_dir\n    + /Users/projetmbc/basic_dir/sub_dir/sub_sub_dir\n    >>> for p in folder.walk(\"file::**.py\"):\n    ...     print(\"+\", p)\n    ...\n    + /Users/projetmbc/basic_dir/python_1.py\n    + /Users/projetmbc/basic_dir/python_2.py\n    + /Users/projetmbc/basic_dir/python_3.py\n    + /Users/projetmbc/basic_dir/python_4.py\n    + /Users/projetmbc/basic_dir/sub_dir/code_A.py\n    + /Users/projetmbc/basic_dir/sub_dir/code_B.py\n    >>> for p in folder.walk(\"file::*.py\"):\n    ...     print(\"+\", p)\n    ...\n    + /Users/projetmbc/basic_dir/python_1.py\n    + /Users/projetmbc/basic_dir/python_2.py\n    + /Users/projetmbc/basic_dir/python_3.py\n    + /Users/projetmbc/basic_dir/python_4.py\n\nCreate\n~~~~~~\n\nCreating files and folders is straight forward with the method\n``create`` even if this needs to add several parent directories that\ndon't yet exist. In the following example, we suppose that the current\ndirectory has absolute path ``/Users/projetmbc``, and doesn't contain\nany subfolder.\n\n.. code:: python\n\n    >>> from mistool.os_use import PPath\n    >>> path_1 = PPath(\"test/README\")\n    >>> path_1.is_file()\n    False\n    >>> path_1.create(\"file\")\n    >>> path_1.is_file()\n    True\n    >>> path_2 = PPath(\"test/README\")\n    >>> path_2.create(\"dir\")\n    Traceback (most recent call last):\n    [...]\n    ValueError: path points to an existing file.\n\nRemove\n~~~~~~\n\nIf you want to destroy a whole directory, or simply a file, given by its\n``PPath``, just use the method ``remove``.\n\n**Warning ! Because removing a file or a directory can be a dangerous\nthing, you can use the method ``can_be_removed`` which by default will\nraise an OS error if the ``PPath`` is one of an existing file or\nfolder.**\n\nThe method ``clean`` allows to remove specific files and/or directories\nmatching a regpath given as an argument.\n\nMove & copy\n~~~~~~~~~~~\n\nBy default, the method ``copy_to`` allows you to copy a file or a\ndirectory into another location, whereas the method ``move_to`` will\nmove a file or a directory to another place.\n\nThe module ``string_use``\n=========================\n\nMulti-replacements\n------------------\n\nThe class ``string_use.MultiReplace`` makes possible to do\nmulti-replacements recursively or not *(by default\n``mode = \"norecu\"``)*.\n\n.. code:: python\n\n    >>> from mistool.string_use import MultiReplace\n    >>> from mistool.config.pattern import PATTERNS_WORDS\n    >>> oldnew = {\n    ...     'W1': \"Word #1\",\n    ...     'W2': \"Word #2\",\n    ...     'W3': \"W1 and W2\"\n    ... }\n    >>> mreplace = MultiReplace(\n    ...     oldnew  = oldnew,\n    ...     mode    = \"recu\",\n    ...     pattern = PATTERNS_WORDS['var']\n    ... )\n    >>> print(mreplace(\"W1 and W2 = W3\"))\n    Word #1 and Word #2 = Word #1 and Word #2\n    >>> mreplace.mode = \"norecu\"  \n    >>> mreplace.build()\n    >>> print(mreplace(\"W1 and W2 = W3\"))\n    Word #1 and Word #2 = W1 and W2\n\nThe code above show that cyclic definitions will raise a ``ValueError``\nexception.\n\n.. code:: python\n\n    >>> from mistool.string_use import MultiReplace\n    >>> from mistool.config.pattern import PATTERNS_WORDS\n    >>> oldnew = {\n    ...     'WRONG_1': \"one small text and  WRONG_2\",\n    ...     'WRONG_2': \"one small text, and then WRONG_3\",\n    ...     'WRONG_3': \"with WRONG_1, there is one problem here\"\n    ... }\n    >>> mreplace = MultiReplace(\n    ...     oldnew  = oldnew,\n    ...     mode    = \"recu\",\n    ...     pattern = PATTERNS_WORDS[\"var\"]\n    ... )\n    Traceback (most recent call last):\n    [...]\n    ValueError: the following viscious circle has been found.\n         + WRONG_2 --> WRONG_3 --> WRONG_1 --> WRONG_2\n\nMulti-splits\n------------\n\nThe aim of the class ``string_use.MultiSplit`` is to split a text on\nseveral semantic depths. Here is an example of use.\n\n.. code:: python\n\n    >>> from mistool.string_use import MultiSplit\n    >>> msplit = MultiSplit(seps = \"|\")\n    >>> print(msplit(\"p_1 ; p_2 ; p_3 | r_1 ; r_2 | s\"))\n    [\n        'p_1 ; p_2 ; p_3 ',\n        ' r_1 ; r_2 ',\n        ' s'\n    ]\n    >>> msplit.seps  = [\"|\", \";\"]\n    >>> msplit.strip = True\n    >>> print(msplit(\"p_1 ; p_2 ; p_3 | r_1 ; r_2 | s\"))\n    [\n        ['p_1', 'p_2', 'p_3'],\n        ['r_1', 'r_2'],\n        ['s']\n    ]\n\nBefore, between and after\n-------------------------\n\nThe function ``string_use.between`` looks for two separators such as to\nreturn the text before, between and after the first matching of this\nseparators. By default, separators are not kept but you can ask to the\nfunction to keep them. ``None`` is returned if no matching has been\nfound. Just take a look at a concrete example.\n\n.. code:: python\n\n    >>> from mistool.string_use import between\n    >>> text = \"f(x ; y) = x**2 + y**2\"\n    >>> seps = [\"(\", \")\"]\n    >>> print(between(text, seps))\n    [\n        'f',                # Before\n        'x ; y',            # Between\n        ' = x**2 + y**2'    # After\n    ]\n    >>> print(between(text, seps, True))\n    [\n        'f(',                # Before\n        'x ; y',             # Between\n        ') = x**2 + y**2'    # After\n    ]\n    >>> seps = [\"{\", \"}\"]\n    >>> print(between(text, seps))\n    None\n\nJoin with a last special text\n-----------------------------\n\nYou can join several strings with a special final separator as the\nexamples above show.\n\n.. code:: python\n\n    >>> from mistool.string_use import joinand\n    >>> texts = [\"1\", \"2\", \"3\"]\n    >>> print(joinand(texts))\n    1, 2 and 3\n    >>> print(joinand(texts = texts, andtext = \"et\"))\n    1, 2 et 3\n    >>> print(joinand(texts = texts, sep = \" + \", andtext = \"=\"))\n    1 + 2 = 3\n\nPlaying with cases of letters\n-----------------------------\n\nThe function ``string_use.case`` gives more auto-formatting of strings\n*(the last formatting looks strange but it is useful for an incoming\nproject of the author of ``mistool``)*.\n\n.. code:: python\n\n    >>> from mistool.string_use import case\n    >>> text = \"onE eXamPLe\"\n    >>> for kind in ['lower', 'upper', 'sentence', 'title']:\n    ...     print(\"{0}  [{1}]\".format(case(text, kind), kind))\n    ...\n    one example   [lower]\n    ONE EXAMPLE   [upper]\n    One example   [sentence]\n    One Example   [title]\n\nA camel case string can be \"uncamelized\" by the function\n``string_use.camelto``. Here is how to use it *(you can change the\nseparator by using the optional argument ``sep`` which is ``\"_\"`` by\ndefault)*.\n\n.. code:: python\n\n    >>> from mistool.string_use import camelto\n    >>> text = \"OneSmallExampLE\"\n    >>> for kind in ['lower', 'upper', 'sentence', 'title']:\n    ...     print(\"{0}  [{1}]\".format(camelto(text, kind), kind))\n    ...\n    one_small_examp_l_e   [lower]\n    ONE_SMALL_EXAMP_L_E   [upper]\n    One_small_examp_l_e   [sentence]\n    One_Small_Examp_L_E   [title]\n\nIf you need to check the case of a string, just use\n``string_use.iscase(text, kind)``.\n\nPlaying with ASCII\n------------------\n\nYou can check if a string is a pure ASCII one.\n\n.. code:: python\n\n    >>> from mistool.string_use import isascii\n    >>> print(isascii(\"Vive la France !\"))\n    True\n    >>> print(isascii(\"\u00a1Viva Espa\u00f1a!\"))\n    False\n\nYou can also transform a string to a pure ASCII one *(this will not\nalways work but in case of failure you can contribute very easily to\nenhance ``string_use.asciify``)*.\n\n.. code:: python\n\n    >>> from mistool.string_use import asciify\n    >>> print(asciify(\"\u00a1Viva Espa\u00f1a!\"))\n    Viva Espana!\n    >>> oldnew = {'!': \"\"}\n    >>> print(asciify(text = \"\u00a1Viva Espa\u00f1a!\", oldnew = oldnew))\n    Viva Espana\n\nThe last example above shows how to be permissive : this means that\n``string_use.asciify`` will \"asciify\" the most characters as possible.\n\n.. code:: python\n\n    >>> from mistool.string_use import asciify\n    >>> print(asciify(text = \"L'Odyss\u00e9e de \u220f\", strict = False))\n    L'Odyssee de \u220f\n    >>> print(asciify(\"L'Odyss\u00e9e de \u220f\"))\n    Traceback (most recent call last):\n    [...]\n    ValueError: ASCII conversion can't be made because of the character << \u220f >>.\n    You can use the function ``_ascii_report`` so as to report more precisely\n    this fealure with eventually an ascii alternative.\n\nAuto completion\n---------------\n\nThe class ``string_use.AutoComplete`` gives the auto-completion feature\naccessible without using any GUI package.\n\n.. code:: python\n\n    >>> from mistool.string_use import AutoComplete\n    >>> myac = AutoComplete(\n    ...     words = [\n    ...         \"article\", \"artist\", \"art\",\n    ...         \"when\", \"who\", \"whendy\",\n    ...         \"bar\", \"barbie\", \"barber\", \"bar\"\n    ...     ]\n    ... )\n    >>> print(myac.matching(\"art\"))\n    ['article', 'artist']\n    >>> print(myac.matching(\"\"))\n    [\n        'art', 'article', 'artist',\n        'bar', 'barber', 'barbie',\n        'when', 'whendy', 'who'\n    ]\n    >>> print(myac.missing(\"art\", 'article'))\n    icle\n\nIt is a convention in GUI applications to give auto-completion only for\nat least three characters. You can do that by using the optional\nargument ``minsize`` which is ``1`` by default.\n\nThe module ``term_use``\n=======================\n\nAuto-numbering steps\n--------------------\n\nFor terminal informations, it can be useful to number some important\nprinted steps. This can be done easily with the class ``term_use.Step``.\n\n.. code:: python\n\n    >>> from mistool.term_use import Step\n    >>> mysteps = Step()\n    >>> i = 0\n    >>> while i <= 12:\n    ...     if i % 2:\n    ...         mysteps(\"Action #{0}\".format(i))\n    ...     i += 1\n    ...\n    1) Action #1\n    2) Action #3\n    3) Action #5\n    4) Action #7\n    5) Action #9\n    6) Action #11\n\nThe class ``term_use.Step`` has two optional arguments.\n\n1. ``start`` gives the first number which is ``1`` by default.\n\n2. ``textit`` is a function of two variables ``(n, t)`` returning the\n   text containing the step number ``n`` and the text ``t``. By default,\n   ``textit = lambda n, t: \"{0}) {1}\".format(n, t)``.\n\nFrame\n-----\n\nThe function ``term_use.withframe`` puts a text inside an ASCII frame\n*(you can choose the alignment and use other kinds of frames if\nnecessary as it is explained in the docstrings)*.\n\n.. code:: python\n\n    >>> from mistool.term_use import withframe\n    >>> text = '''\n    ... One small\n    ... text\n    ... to do tests\n    ... '''.strip()\n    >>> print(withframe(text))\n    ###############\n    # One small   #\n    # text        #\n    # to do tests #\n    ###############\n\nASCII tree views of one directory\n---------------------------------\n\nFor our examples, we consider a folder with the following structure and\nthe absolute path ``/Users/projetmbc/dir``.\n\n::\n\n    + dir\n        * code_1.py\n        * code_2.py\n        * file_1.txt\n        * file_2.txt\n        + doc\n            * code_A.py\n            * code_B.py\n            * slide_A.pdf\n            * slide_B.pdf\n            + licence\n                * doc.pdf\n        + emptydir\n\nThe preceding ASCII tree view was built easily using the following code\n*(``PPath`` is the class defined in ``os_use`` added in ``term_use`` for\nyou comfort)*.\n\n.. code:: python\n\n    >>> from mistool.term_use import DirView, PPath\n    >>> dir     = PPath(\"/Users/projetmbc/dir\")\n    >>> dirview = DirView(\n    ...     ppath   = dir,\n    ...     sorting = \"filefirst\"\n    ... )\n    >>> print(dirview.ascii)\n    + dir\n        * code_1.py\n        * code_2.py\n        * file_1.txt\n        * file_2.txt\n        + doc\n            * code_A.py\n            * code_B.py\n            * slide_A.pdf\n            * slide_B.pdf\n            + licence\n                * doc.pdf\n        + emptydir\n\nUsing the \"regpath\" concept of the module ``os_use``, we can filter\nfolders and files shown as in the example above *(we also use the\nargument ``display`` so as to customize the output)*.\n\n.. code:: python\n\n    >>> from mistool.term_use import DirView, PPath\n    >>> dir     = PPath(\"/Users/projetmbc/dir\")\n    >>> dirview = DirView(\n    ...     ppath   = dir,\n    ...     regpath = \"file::**.py\",\n    ...     display = \"main short found\"\n    ... )\n    >>> print(dirview.ascii)\n    + dir\n        * code_1.py\n        * code_2.py\n        + doc\n            * code_A.py\n            * code_B.py\n\nYou can also use the following property methods.\n\n1. ``dirview.tree`` is a graphical tree.\n\n2. ``dirview.toc`` gives a minimal tabulated tree.\n\n3. ``dirview.latex`` is for the LaTeX package ``dirtree``.\n\nThe module ``python_use``\n=========================\n\nA multikeys dictionary\n----------------------\n\nThe class ``MKOrderedDict`` allows to work easily with multikeys ordered\ndictionaries. Here is a complete example of use.\n\n.. code:: python\n\n    >>> from mistool.python_use import MKOrderedDict\n    >>> onemkdict = MKOrderedDict()\n    >>> onemkdict[(1, 2, 4)] = \"1st value\"\n    >>> onemkdict[\"key\"] = \"2nd value\"\n    >>> onemkdict[\"key\"] = \"3rd value\"\n    >>> print(onemkdict)\n    MKOrderedDict([\n        ((id=0, key=(1, 2, 4)), value='1st value'),\n        ((id=0, key='key')    , value='2nd value'),\n        ((id=1, key='key')    , value='3rd value')\n    ])\n    >>> for k_id, val in onemkdict[\"key\"]:\n    ...     print(k_id, val)\n    ...\n    0 2nd value\n    1 3rd value\n    >>> print(onemkdict.getitembyid(1, \"key\"))\n    3rd value\n    >>> for (k_id, key), val in onemkdict.items():\n    ...     print((k_id, key), \"===>\", val)\n    ...\n    (0, (1, 2, 4)) ===> 1st value\n    (0, 'key') ===> 2nd value\n    (1, 'key') ===> 3rd value\n    >>> for key, val in onemkdict.items(noid=True):\n    ...     print(key, \"===>\", val)\n    ...\n    (1, 2, 4) ===> 1st value\n    key ===> 2nd value\n    key ===> 3rd value\n    >>> \"key\" in onemkdict\n    True\n    >>> \"kaaaay\" in onemkdict\n    False\n    >>> onemkdict.setitembyid(0, \"key\", \"New 2nd value\")\n    >>> print(onemkdict)\n    MKOrderedDict([\n        ((id=0, key=(1, 2, 4)), value='1st value'),\n        ((id=0, key='key')    , value='New 2nd value'),\n        ((id=1, key='key')    , value='3rd value')])\n\nA dictionary defined recursively\n--------------------------------\n\nThe class ``RecuOrderedDict`` allows to use a list of hashable keys, or\njust a single hashable key. Here is a complete example of use.\n\n.. code:: python\n\n    >>> from mistool.python_use import RecuOrderedDict\n    >>> onerecudict = RecuOrderedDict()\n    >>> onerecudict[[1, 2, 4]] = \"1st value\"\n    >>> onerecudict[(1, 2, 4)] = \"2nd value\"\n    >>> onerecudict[\"key\"] = \"3rd value\"\n    >>> print(onerecudict)\n    RecuOrderedDict([\n        (\n            1,\n            RecuOrderedDict([\n                (\n                    2,\n                    RecuOrderedDict([ (4, '1st value') ])\n                )\n            ])\n        ),\n        (\n            (1, 2, 4),\n            '2nd value'\n        ),\n        (\n            'key',\n            '3rd value'\n        )\n    ])\n    >>> [1, 2, 4] in onerecudict\n    True\n    >>> [2, 4] in onerecudict[1]\n    True\n\nList of single values of a dictionary\n-------------------------------------\n\nIf you need to list all the value of one dictionary, the function\n``python_use.dictvalues`` is made for you.\n\n.. code:: python\n\n    >>> from mistool.python_use import dictvalues\n    >>> onedict = {\"a\": 1, \"b\": 2, \"c\": 1}\n    >>> print(dictvalues(onedict))\n    [1, 2]\n    >>> print(list(onedict.values()))\n    [2, 1, 1]\n\nEasy quoted text with the least escaped quote symbols\n-----------------------------------------------------\n\nWith ``python_use.quote`` you can add without pain quotes around a text.\n\n.. code:: python\n\n    >>> from mistool.python_use import quote\n    >>> print(quote('First example.'))\n    'First example.'\n    >>> print(quote(\"Same example.\"))\n    'Same example.'\n    >>> print(quote('One \"small\" example.'))\n    'One \"small\" example.'\n    >>> print(quote(\"Another kind of \\\"example\\\".\"))\n    'Another kind of \"example\".'\n    >>> print(quote(\"An example a 'little' more \\\"problematic\\\".\"))\n    'An example a \\'little\\' more \"problematic\".'\n\nThe module ``datetime_use``\n===========================\n\nSpecial class ``ddatetime``\n---------------------------\n\nThe class ``ddatetime`` is an enhanced version of the class\n``datetime.datetime`` : see the two sections below. It is very easy to\nbuild an instance of ``ddatetime`` thanks to the very cool function\n``build_ddatetime``. The examples above show different ways to define a\ndate.\n\n.. code:: python\n\n    >>> from mistool.datetime_use import build_ddatetime\n    >>> build_ddatetime((2017, 8, 1))\n    ddatetime(2017, 8, 1, 0, 0)\n    >>> build_ddatetime(2017, 8, 1)\n    ddatetime(2017, 8, 1, 0, 0)\n    >>> build_ddatetime(\"2017-08-01\")\n    ddatetime(2017, 8, 1, 0, 0)\n    >>> build_ddatetime(\"Friday 01 august 2017\")\n    ddatetime(2017, 8, 1, 0, 0)\n    >>> build_ddatetime(\"Vendredi 1er ao\u00fbt 2017\", lang = \"fr_FR\")\n    ddatetime(2017, 8, 1, 0, 0)\n    >>> build_ddatetime(\"Vendredi 1er ao\u00fbt 2017\")\n    [...]\n    ValueError: Unknown string format\n    >>> build_ddatetime(\"Vendredi 1er ao\u00fbt 2017\", \"fr_FR\")\n    [...]\n    TypeError: an integer is required (got type str)\n\nNote that you **must** define a special language using\n``lang = \"fr_FR\"`` as you can see in the two last commands in the\npreceding example.\n\nNext day having a fixed english name\n------------------------------------\n\nIn some applications you want to know the next monday after a fixing\ndate.\n\n.. code:: python\n\n    >>> from mistool.datetime_use import ddatetime\n    >>> onedate = ddatetime(2017,8, 1)\n    >>> print(onedate.strftime(\"%Y-%m-%d is a %A.\"))\n    2017-08-01 is a Tuesday.\n    >>> nextfriday = onedate.nextday(name = \"friday\")\n    >>> print(\"Next Friday:\", nextfriday.strftime(\"%Y-%m-%d\"))\n    Next Friday: 2017-08-04\n\nTranslating a date\n------------------\n\nThanks to the class ``ddatetime``, it is easy to safely translate all\nthe names in a date.\n\n.. code:: python\n\n    >>> from mistool.datetime_use import ddatetime\n    >>> onedate   = ddatetime(2015, 6, 2)\n    >>> oneformat = \"%A %d %B %Y\"\n    >>> print(onedate.translate(strformat = oneformat))\n    Tuesday 02 June 2015\n    >>> print(onedate.translate(strformat = oneformat, lang = \"fr_FR\"))\n    Mardi 02 juin 2015\n\nParsing a string to build a date\n--------------------------------\n\nThe function ``parsedate`` is an international version of the function\n``dateutil.parser.parse`` (translations need external contributions :\nthe job is very easy to do !).\n\n.. code:: python\n\n    >>> from mistool.datetime_use import parsedate\n    >>> parsedate(\"Friday 01 august 2017\")\n    ddatetime(2017, 8, 1, 0, 0)\n    >>> parsedate(timestr = \"Vendredi 1er Ao\u00fbt 2017\", lang = \"fr_FR\")\n    ddatetime(2017, 8, 1, 0, 0)\n    >>> parsedate(timestr = \"Montag, 11. April 2016\", lang = \"de_DE\")\n    [...]\n    ValueError: unsupported language ''de_DE''\n\nThe module ``url_use``\n======================\n\nLooking for dead or bad urls\n----------------------------\n\nFor the following example, we suppose that we have a working internet\nconnection.\n\n.. code:: python\n\n    >>> from mistool.url_use import islinked\n    >>> islinked(\"http://www.google.com\")\n    True\n    >>> islinked(\"http://www.g-o-o-g-l-e.com\")\n    False\n\nEscaping special characters in urls\n-----------------------------------\n\nIt is safe to not use non-ASCII characters in a url. Here is one way to\ndo that.\n\n.. code:: python\n\n    >>> from mistool.url_use import escape\n    >>> print(escape(\"http://www.vivaespa\u00f1a.com/cami\u00f3n/\"))\n    http://www.vivaespa%C3%B1a.com/cami%C3%B3n/\n\nThe module ``latex_use``\n========================\n\nEscaping the special LaTeX characters\n-------------------------------------\n\nThe function ``latex_use.escape`` will escape all special characters for\nyou regarding the text or math mode.\n\n.. code:: python\n\n    >>> from mistool.latex_use import escape\n    >>> onetext = \"\\OH/ & ...\"\n    >>> print(escape(onetext))\n    \\textbackslash{}OH/ \\& ...\n    >>> print(escape(text = onetext, mode = \"math\"))\n    \\backslash{}OH/ \\& ...\n\nEasy LaTeX compilation(s)\n-------------------------\n\nThe class ``latex_use.Build`` compiles a LaTeX file for you *(for the\nmoment only the PDF compilation is implemented)*. Let's consider the\nfollowing LaTeX file with the absolute path\n``/Users/projetmbc/latex/file.tex``.\n\n.. code:: latex\n\n    \\documentclass[11pt, oneside]{article}\n\n    \\begin{document}\n\n    \\section{One little test}\n\n    One basic formula : $E = mc^2$.\n\n    \\end{document}\n\nIn the following code, we call to the class ``term_use.DirView`` so as\nto show the new files made by LaTeX *(the ellipsis ``[...]`` indicates\nsome lines not reproduced here)*.\n\n.. code:: python\n\n    >>> from mistool.latex_use import Build, PPath\n    >>> from mistool.term_use import DirView\n    >>> latexdir = PPath(\"/Users/projetmbc/latex/file.tex\")\n    >>> print(DirView(latexdir.parent).ascii)\n    + latex\n        * file.tex\n    >>> builder   = Build(latexdir)\n    >>> builder.pdf()\n    # -- Start of compilation Nb.1 -- #\n\n    This is pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2014) (preloaded\n    format=pdflatex)\n     restricted \\write18 enabled.\n    entering extended mode\n\n    [...]\n\n    Output written on file.pdf (1 page, 36666 bytes).\n    Transcript written on file.log.\n\n    # -- End of compilation Nb.1 -- #\n    >>> print(DirView(latexdir.parent).ascii)\n    + latex\n        * file.aux\n        * file.log\n        * file.pdf\n        * file.tex\n\nThe PDF file has been build by LaTeX but there are also temporary ones.\nIf you need several compilations, so as to build a table of content for\nexample, just use the attribut-argument ``repeat``, and if you don't\nwant to see the LaTeX ouput, just set the attribut-argument\n``showinfos`` to ``False``.\n\nRemoving the temporary files produced by LaTeX\n----------------------------------------------\n\nWe keep the same LaTeX example file. The function ``latex_use.clean``\ncleans all unuseful temporary files when the compilation has been done.\n\n.. code:: python\n\n    >>> from mistool.latex_use import clean, PPath\n    >>> from mistool.term_use import DirView\n    >>> latexdir = PPath(\"/Users/projetmbc/latex\")\n    >>> print(DirView(latexdir.parent).ascii)\n    + latex\n        * file.aux\n        * file.log\n        * file.pdf\n        * file.synctex.gz\n        * file.tex\n    >>> clean(ppath = latexdir, showinfos = True)\n    * Cleaning for \"/Users/projetmbc/latex/file.tex\"\n    >>> print(DirView(latexdir.parent).ascii)\n    + latex\n        * file.pdf\n        * file.tex\n\nAutomatic installation of personal LaTeX packages\n-------------------------------------------------\n\nLet's suppose that we have package named ``lyxam`` stored in a folder\nhaving the absolute path ``/Users/projetmbc/latex/lyxam`` and whose\nstructure is the following one.\n\n::\n\n    + lyxam\n        + change_log\n            + 2012\n                * 02.txt\n                * 03.txt\n                * 04.txt\n                * 10.txt\n            * todo.txt\n        * lyxam.sty\n        + config\n            * settings.tex\n            + lang\n                * en.tex\n                * fr.tex\n                + special\n                    * fr.config\n                + standard\n                    * en.config\n                    * fr.config\n            + style\n                * apmep.tex\n                * default.tex\n\nTo install this package locally in your LaTeX distribution, just do like\nin the code above.\n\n.. code:: python\n\n    >>> from mistool.latex_use import install, PPath\n    >>> package = PPath(\"/Users/projetmbc/latex/lyxam\")\n    >>> install(package)\n    Starting installation of the package locally.\n        * Deletion of the old << lyxam >> package in the local LaTeX directory.\n        * Creation of a new << lyxam >> package in the local LaTeX directory.\n            + Adding the new file << lyxam.sty >>\n            + Adding the new file << change_log/todo.txt >>\n            + Adding the new file << change_log/2012/02.txt >>\n            + Adding the new file << change_log/2012/03.txt >>\n            + Adding the new file << change_log/2012/04.txt >>\n            + Adding the new file << change_log/2012/10.txt >>\n            + Adding the new file << config/settings.tex >>\n            + Adding the new file << config/lang/en.tex >>\n            + Adding the new file << config/lang/fr.tex >>\n            + Adding the new file << config/lang/special/fr.config >>\n            + Adding the new file << config/lang/standard/en.config >>\n            + Adding the new file << config/lang/standard/fr.config >>\n            + Adding the new file << config/style/apmep.tex >>\n            + Adding the new file << config/style/default.tex >>\n        * Refreshing the list of LaTeX packages.\n\nUsing the concept of \"regpath\" of the module ``os_use``, you can for\nexample choose to not install all the ``TXT`` files.\n\n.. code:: python\n\n    >>> from mistool.latex_use import install, PPath\n    >>> package = PPath(\"/Users/projetmbc/latex/lyxam\")\n    >>> install(ppath = package, regpath = \"file not::**.txt\")\n    Starting installation of the package locally.\n        * Deletion of the old << lyxam >> package in the local LaTeX directory.\n        * Creation of a new << lyxam >> package in the local LaTeX directory.\n            + Adding the new file << lyxam.sty >>\n            + Adding the new file << config/settings.tex >>\n            + Adding the new file << config/lang/en.tex >>\n            + Adding the new file << config/lang/fr.tex >>\n            + Adding the new file << config/lang/special/fr.config >>\n            + Adding the new file << config/lang/standard/en.config >>\n            + Adding the new file << config/lang/standard/fr.config >>\n            + Adding the new file << config/style/apmep.tex >>\n            + Adding the new file << config/style/default.tex >>\n        * Refreshing the list of LaTeX packages.\n\nRemove a personal LaTeX packages\n--------------------------------\n\nJust use ``remove(name)`` where ``name`` is the name of a local LaTeX\npackage.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/bc-python-tools/mistool",
    "keywords": "python latex os path string terminal tool",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mistool",
    "platform": "",
    "project_url": "https://pypi.org/project/mistool/",
    "release_url": "https://pypi.org/project/mistool/1.2.1b0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Miscellaneous missing tools that can help the py-developper.",
    "version": "1.2.1b0"
  },
  "releases": {
    "1.0.0b0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "42c8e2973f4cac51e6ea7d7b79c8a9c0",
          "sha256": "bf1bc268f22c1031597a2e533b5990676d07e7927b386849f89cc86c4418d08a"
        },
        "downloads": 11,
        "filename": "mistool-1.0.0b0-py3.5.egg",
        "has_sig": false,
        "md5_digest": "42c8e2973f4cac51e6ea7d7b79c8a9c0",
        "packagetype": "bdist_egg",
        "python_version": "3.5",
        "size": 132637,
        "upload_time": "2017-02-19T14:36:07",
        "url": "https://files.pythonhosted.org/packages/d0/f8/fc569530df86e5e2186d9292507ef94633021a021b4c8428e6383dbd84ac/mistool-1.0.0b0-py3.5.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "82d8fa65dbfdfb3207023ae44ec76e77",
          "sha256": "6bd9f930f187c3f97e633bfa54932e8b010f5e0fbc02a1c36ef692e6e8ed3dbe"
        },
        "downloads": 365,
        "filename": "mistool-1.0.0b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82d8fa65dbfdfb3207023ae44ec76e77",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 73593,
        "upload_time": "2016-07-27T22:41:59",
        "url": "https://files.pythonhosted.org/packages/a7/fb/e32dbd8a868c07e5c04d3487dfcade4cb374601d5180942f4e2976055233/mistool-1.0.0b0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4b640fda466fa6f673a0d5a8cc7d5cc1",
          "sha256": "fe9329ab5a332f5f16cb812631cfe498226d4da2af30e1e83f20fb87a9e1c268"
        },
        "downloads": 114,
        "filename": "mistool-1.0.0b0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b640fda466fa6f673a0d5a8cc7d5cc1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 80259,
        "upload_time": "2016-07-27T22:42:12",
        "url": "https://files.pythonhosted.org/packages/8f/15/25ddcfdad49e097e393f99cde23c7c8e9e649b74a984be5305816e031137/mistool-1.0.0b0.tar.gz"
      }
    ],
    "1.1.0b0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5a5e0c3e2a20b8fefdea03b6435e9cad",
          "sha256": "070beff6fa735e68228321d4dea7393fedb3f6980997060052cb35b068ab4406"
        },
        "downloads": 14,
        "filename": "mistool-1.1.0b0-py3.5.egg",
        "has_sig": false,
        "md5_digest": "5a5e0c3e2a20b8fefdea03b6435e9cad",
        "packagetype": "bdist_egg",
        "python_version": "3.5",
        "size": 133922,
        "upload_time": "2017-02-19T14:36:24",
        "url": "https://files.pythonhosted.org/packages/f6/ca/3c7af50c1566c0efc700fddc21cc9d8d272503249fda3e546ff0925f0cbc/mistool-1.1.0b0-py3.5.egg"
      }
    ],
    "1.1.1b0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7523eb3bc244361ed27483a91298b8ef",
          "sha256": "42503178ee8e0b2e6f60b366033b35f671f894fd32d8991739d429101ad03cdc"
        },
        "downloads": 0,
        "filename": "mistool-1.1.1b0-py3.5.egg",
        "has_sig": false,
        "md5_digest": "7523eb3bc244361ed27483a91298b8ef",
        "packagetype": "bdist_egg",
        "python_version": "3.5",
        "size": 146943,
        "upload_time": "2017-09-27T16:21:27",
        "url": "https://files.pythonhosted.org/packages/b8/ac/fa802e4b5526cb76ce8724c7fae7d1fdb7cd366b88fc79b4573781019b41/mistool-1.1.1b0-py3.5.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c3101a1a7d8be2417d5721f7466be9af",
          "sha256": "90984afb484ab490ec45f2a6231d1be1c964efb1c6fad95c7258b24d3797b08f"
        },
        "downloads": 12,
        "filename": "mistool-1.1.1b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c3101a1a7d8be2417d5721f7466be9af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 75735,
        "upload_time": "2017-02-19T14:35:57",
        "url": "https://files.pythonhosted.org/packages/6d/a6/4720b8d6a84c774d4081a6e11cb1fd975d16fa9f0b247e5bb5dd3bcd2fc1/mistool-1.1.1b0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3de599071f5ea3a2a2d8c9ee9a6b23dd",
          "sha256": "5016fd3e3bc345fc41a2567eda034ab5c7cd51107c3b77828f65c45e9f2ef103"
        },
        "downloads": 15,
        "filename": "mistool-1.1.1b0.tar.gz",
        "has_sig": false,
        "md5_digest": "3de599071f5ea3a2a2d8c9ee9a6b23dd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 82655,
        "upload_time": "2017-02-19T14:36:29",
        "url": "https://files.pythonhosted.org/packages/55/82/019aaf6486b3023ef181b41205dffeed5eb14166330802d0a381d6077f91/mistool-1.1.1b0.tar.gz"
      }
    ],
    "1.2.0b0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e1cb8cfb9add1d129e4f3b6ca669873f",
          "sha256": "4bde861cfb4b17d89038d694fe985e02a80d9e6dfd4087dca72aefdd405cf9b1"
        },
        "downloads": 0,
        "filename": "mistool-1.2.0b0-py3.5.egg",
        "has_sig": false,
        "md5_digest": "e1cb8cfb9add1d129e4f3b6ca669873f",
        "packagetype": "bdist_egg",
        "python_version": "3.5",
        "size": 146933,
        "upload_time": "2017-09-27T16:21:32",
        "url": "https://files.pythonhosted.org/packages/c4/92/cdb4a3f4416867bc0984861ab00915293eeffdaae7f8c22a0b46b9531da1/mistool-1.2.0b0-py3.5.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "65c429069d2837f8c526d704e4bf9675",
          "sha256": "9546f141a5b4f4ff2d461c7055ca5539f98d78d12ee7420e80bd435a5cabc066"
        },
        "downloads": 0,
        "filename": "mistool-1.2.0b0-py3.6.egg",
        "has_sig": false,
        "md5_digest": "65c429069d2837f8c526d704e4bf9675",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "size": 146986,
        "upload_time": "2017-09-27T16:21:37",
        "url": "https://files.pythonhosted.org/packages/e9/a0/2d1433daa380229033f77f526a1f27b4b3e40276cda737809c8701c5bc5a/mistool-1.2.0b0-py3.6.egg"
      }
    ],
    "1.2.1b0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ec4c3a3bf5d81c6befb9f9eef5593bbd",
          "sha256": "1f977ad167c836e66bf624bdf974c1b154bdf22bf74b70141e094e2ee06f3986"
        },
        "downloads": 0,
        "filename": "mistool-1.2.1b0-py3.6.egg",
        "has_sig": false,
        "md5_digest": "ec4c3a3bf5d81c6befb9f9eef5593bbd",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "size": 147320,
        "upload_time": "2017-09-27T16:21:41",
        "url": "https://files.pythonhosted.org/packages/25/ea/a38826b7ee318be8089c3426a7c6de1ef34d3be9f84e98b0ee0f001c64ab/mistool-1.2.1b0-py3.6.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "cdb5af6674a95afa0555718769dd8032",
          "sha256": "3af71b461f9350f095785fba0db0310c365ca112840b1922d30bcc2cb1653771"
        },
        "downloads": 0,
        "filename": "mistool-1.2.1b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cdb5af6674a95afa0555718769dd8032",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 83228,
        "upload_time": "2017-09-27T16:21:17",
        "url": "https://files.pythonhosted.org/packages/0b/6b/6b84047ee29aa020c62e8c204a3283d89dc5fbd5c55e4db53ec84b8980df/mistool-1.2.1b0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d952db10b088e606f27a034031c56ead",
          "sha256": "4be4ebecca8f5ed8278104fd7e5481f52aa0dd43d3516032c7d5ea18962f51eb"
        },
        "downloads": 0,
        "filename": "mistool-1.2.1b0.tar.gz",
        "has_sig": false,
        "md5_digest": "d952db10b088e606f27a034031c56ead",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 85233,
        "upload_time": "2017-09-27T16:21:44",
        "url": "https://files.pythonhosted.org/packages/5c/19/a46a681f69830e643ca9202a66539e96cc546b86d43690f08bef142b38e4/mistool-1.2.1b0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ec4c3a3bf5d81c6befb9f9eef5593bbd",
        "sha256": "1f977ad167c836e66bf624bdf974c1b154bdf22bf74b70141e094e2ee06f3986"
      },
      "downloads": 0,
      "filename": "mistool-1.2.1b0-py3.6.egg",
      "has_sig": false,
      "md5_digest": "ec4c3a3bf5d81c6befb9f9eef5593bbd",
      "packagetype": "bdist_egg",
      "python_version": "3.6",
      "size": 147320,
      "upload_time": "2017-09-27T16:21:41",
      "url": "https://files.pythonhosted.org/packages/25/ea/a38826b7ee318be8089c3426a7c6de1ef34d3be9f84e98b0ee0f001c64ab/mistool-1.2.1b0-py3.6.egg"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "cdb5af6674a95afa0555718769dd8032",
        "sha256": "3af71b461f9350f095785fba0db0310c365ca112840b1922d30bcc2cb1653771"
      },
      "downloads": 0,
      "filename": "mistool-1.2.1b0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cdb5af6674a95afa0555718769dd8032",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 83228,
      "upload_time": "2017-09-27T16:21:17",
      "url": "https://files.pythonhosted.org/packages/0b/6b/6b84047ee29aa020c62e8c204a3283d89dc5fbd5c55e4db53ec84b8980df/mistool-1.2.1b0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "d952db10b088e606f27a034031c56ead",
        "sha256": "4be4ebecca8f5ed8278104fd7e5481f52aa0dd43d3516032c7d5ea18962f51eb"
      },
      "downloads": 0,
      "filename": "mistool-1.2.1b0.tar.gz",
      "has_sig": false,
      "md5_digest": "d952db10b088e606f27a034031c56ead",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 85233,
      "upload_time": "2017-09-27T16:21:44",
      "url": "https://files.pythonhosted.org/packages/5c/19/a46a681f69830e643ca9202a66539e96cc546b86d43690f08bef142b38e4/mistool-1.2.1b0.tar.gz"
    }
  ]
}