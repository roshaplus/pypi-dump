{
  "info": {
    "author": "Alaric M\u00e4gerle",
    "author_email": "info@rouxcode.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# django-admin-sort\n\n[![Django Admin Sort Build Status](https://travis-ci.org/rouxcode/django-admin-sort.svg \"Django Admin Sort Build Status\")](https://travis-ci.org/rouxcode/django-admin-sort)\n\nSortable changelist, tabular and stacked inlines. Using existing order fields, flexible.\n\nOriginally based on [jrief's django-admin-sortable2](https://github.com/jrief/django-admin-sortable2),\ndjango-admin-sort tries to further simplify, but also add some minor new features (like dropdown sortables, someday).\n\n## Installation\n\nThe latest stable release can be found on PyPI.\n\n\tpip install django-admin-sort\n\nAdd ``'admin_sort'`` to the list of ``INSTALLED_APPS`` in your project's ``settings.py`` file.\n\n\tINSTALLED_APPS = (\n\t    ..,\n\t    'admin_sort',\n\t)\n\n\n## Using Admin Sort\n\nThis Django module offers two mixin classes to be added to the existing classes of your model\nadmin:\n\n* ``admin_sort.admin.SortableAdminMixin``\n* ``admin_sort.admin.SortableInlineAdminMixin``\n\nThey slightly modify the admin views of a sortable model. There is no need to derive your model\nclass from a special base model class.\n\n\n### Integrate your models\n\nEach database model which shall be sortable, requires a position value in its model description. The only requirement\nfor this module is, that the position value be specified as the primary field used for sorting.\n\n\tclass SortableBook(models.Model):\n\t    title = models.CharField('Title', null=True, blank=True, max_length=255)\n\t    my_order = models.PositiveIntegerField(default=0, blank=False, null=False)\n\n\t    class Meta(object):\n\t        ordering = ('my_order', 'title', )\n\nHere the ordering field is named ``my_order``, but you may choose any other name. There are only\ntwo constraints:\n\n* ``my_order`` is the first field in the ``ordering`` tuple of the model's Meta class.\n* ``my_order``'s default value must be 0. The JavaScript which performs the sorting is 1-indexed,\n\tso this will not interfere with the order of your items, even if you're already using 0-indexed\n\tordering fields.\n\nThe field used to store the ordering position may be any kind of numeric model field offered by\nDjango. Use one of these models fields:\n\n* ``models.BigIntegerField``\n* ``models.IntegerField``\n* ``models.PositiveIntegerField`` (recommended)\n* ``models.PositiveSmallIntegerField`` (recommended for small sets)\n* ``models.SmallIntegerField``\n\nAdditionally you may use ``models.DecimalField`` or ``models.FloatField``, but these model fields\nare not recommended.\n\n**WARNING:** Do not make this field unique! See below why.\n\n\n### Sortable list view\n\nIn ``admin.py``, add a mixin class to augment the functionality for sorting (be sure to put the\nmixin class before model.ModelAdmin):\n\n\tfrom django.contrib import admin\n\tfrom admin_sort.admin import SortableAdminMixin\n\tfrom models import MyModel\n\n\tclass MyModelAdmin(SortableAdminMixin, admin.ModelAdmin):\n\t    pass\n\tadmin.site.register(MyModel, MyModelAdmin)\n\nThe list view of the model admin interface now adds a column with a sensitive area.\nBy clicking on that area, the user can move that row up or down. If he wants to move it to another\npage, he can do that as a bulk operation, using the admin actions.\n\n\n### Sortable stacked or tabular inline\n\n\tfrom django.contrib import admin\n\tfrom admin_sort.admin import SortableInlineAdminMixin\n\tfrom models import MySubModel, MyModel\n\n\tclass MySubModelInline(SortableInlineAdminMixin, admin.TabularInline):  # or admin.StackedInline\n\t    model = MySubModel\n\n\tclass MyModelAdmin(admin.ModelAdmin):\n\t    inlines = (MySubModelInline,)\n\tadmin.site.register(MyModel, MyModelAdmin)\n\nThe interface for a sortable stacked inline view is similar. If you click on an stacked\ninline's field title, this whole inline form can be moved up and down.\n\nThe interface for a sortable tabular inline view adds a sensitive area to each draggable row. These\nrows then can be moved up and down.\n\nAfter moving a tabular or stacked inline, save the model form to persist\nits sorting order.\n\n\n### Initial data\n\nIn case you just changed your model to contain an additional sorting\nfield (e.g. ``my_order``), which does not yet contain any values, then\nyou must set initial ordering values.\n\ndjango-admin-sort is shipping with a management command which can be used to prepopulate\nthe ordering field:\n\n\tshell> ./manage.py reorder my_app.models.MyModel\n\nIf you prefer to do a one-time database migration, just after having added the ordering field\nto the model, then create a datamigration, more advanced fiddling is possible there.\n\n**NOTE:** If you omit to prepopulate the ordering field with unique values, after adding this field\n          to an existing model, then attempting to reorder field manually will fail.\n\n\n### Note on unique indices on the position field\n\nFrom a design consideration, one might be tempted to add a unique index on the ordering field. But\nin practice this has serious drawbacks:\n\nMySQL has a feature (or bug?) which requires to use the ``ORDER BY`` clause in bulk updates on\nunique fields.\n\nSQLite has the same bug which is even worse, because it does neither update all the fields in one\ntransaction, nor does it allow to use the ``ORDER BY`` clause in bulk updates.\n\nOnly PostgreSQL does it \"right\" in the sense, that it updates all fields in one transaction and\nafterwards rebuilds the unique index. Here one can not use the ``ORDER BY`` clause during updates,\nwhich from the point of view for SQL semantics, is senseless anyway.\n\nSee https://code.djangoproject.com/ticket/20708 for details.\n\nTherefore we strongly advise against setting ``unique=True`` on the position field, unless you want\nunportable code, which only works with Postgres databases.\n\n\n## License\n\nCopyright \u00a9 2015 Alaric M\u00e4gerle & Ben St\u00e4hli\nLicensed under the MIT license.\n\n\n## Run Example Code\n\nTo get a quick first impression of this plugin, clone this repositoty\nfrom GitHub and run an example webserver:\n\n.. code:: bash\n\n\tgit clone https://github.com/rouxcode/django-admin-sort.git\n\tcd django-admin-sort/example/\n\t./manage.py syncdb\n\t./manage.py createsuperuser\n\t./manage.py loaddata testapp/fixtures/data.json\n\t./manage.py runserver\n\nPoint a browser onto http://localhost:8000/admin/, log in and go to *Sortable books*. There you can\ntest the behavior of this Django app.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/rouxcode/django-admin-sort",
    "keywords": "django",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-admin-sort",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/django-admin-sort/",
    "release_url": "https://pypi.org/project/django-admin-sort/0.2.2/",
    "requires_python": null,
    "summary": "Sortable changelist, tabular and stacked inlines, drag-and-drop and dropdowns",
    "version": "0.2.2"
  },
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3f0cbe36a088054e4579ae1a861123c0",
          "sha256": "1970f2170a7f1d042863072213a47fc0f0cf469083eca625278d1c3fa7466866"
        },
        "downloads": 0,
        "filename": "django-admin-sort-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3f0cbe36a088054e4579ae1a861123c0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26276,
        "upload_time": "2017-06-15T11:04:32",
        "url": "https://files.pythonhosted.org/packages/16/90/d50fdfb7b53aa917875c8948cba2b565e9efe4f486157a4083e9a4aa129d/django-admin-sort-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "460bcca10473fdb4788658505cf900fc",
          "sha256": "3c73da38d99aec79a265e1a6596f46c5be277ad9f855e6d39fc76f28e8b2dc86"
        },
        "downloads": 0,
        "filename": "django_admin_sort-0.2.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "460bcca10473fdb4788658505cf900fc",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 42829,
        "upload_time": "2017-06-15T16:03:13",
        "url": "https://files.pythonhosted.org/packages/81/b5/69b292189311ac5b1f78ea816c8365f22d88348e9c583180ae831dfca2a7/django_admin_sort-0.2.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "efbf86d0ecee1c55b332376ae06ae857",
          "sha256": "eece9a0918f1dc5174847a9b6709ba6b9d3063fae602d791c60acddd18e0f078"
        },
        "downloads": 0,
        "filename": "django-admin-sort-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "efbf86d0ecee1c55b332376ae06ae857",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29344,
        "upload_time": "2017-06-15T16:03:15",
        "url": "https://files.pythonhosted.org/packages/d5/dd/089d8b0531cf445f3ed8ec6e9874d44d51be565c4d3473072dcae71f4202/django-admin-sort-0.2.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "460bcca10473fdb4788658505cf900fc",
        "sha256": "3c73da38d99aec79a265e1a6596f46c5be277ad9f855e6d39fc76f28e8b2dc86"
      },
      "downloads": 0,
      "filename": "django_admin_sort-0.2.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "460bcca10473fdb4788658505cf900fc",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 42829,
      "upload_time": "2017-06-15T16:03:13",
      "url": "https://files.pythonhosted.org/packages/81/b5/69b292189311ac5b1f78ea816c8365f22d88348e9c583180ae831dfca2a7/django_admin_sort-0.2.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "efbf86d0ecee1c55b332376ae06ae857",
        "sha256": "eece9a0918f1dc5174847a9b6709ba6b9d3063fae602d791c60acddd18e0f078"
      },
      "downloads": 0,
      "filename": "django-admin-sort-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "efbf86d0ecee1c55b332376ae06ae857",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 29344,
      "upload_time": "2017-06-15T16:03:15",
      "url": "https://files.pythonhosted.org/packages/d5/dd/089d8b0531cf445f3ed8ec6e9874d44d51be565c4d3473072dcae71f4202/django-admin-sort-0.2.2.tar.gz"
    }
  ]
}