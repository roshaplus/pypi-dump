{
  "info": {
    "author": "Tilman Blumenbach",
    "author_email": "tilman+pypi@ax86.net",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 2 :: Only",
      "Topic :: Software Development"
    ],
    "description": "jProperties for Python 2\r\n========================\r\n\r\njProperties is a Java Property file parser and writer for Python 2. It aims to provide the same functionality\r\nas `Java's Properties class <http://docs.oracle.com/javase/7/docs/api/java/util/Properties.html>`_, although\r\ncurrently the XML property format is not supported.\r\n\r\n.. sectnum::\r\n.. contents:: **Table of Contents**\r\n\r\nInstallation\r\n------------\r\n\r\nYou can install jProperties using `pip <https://pip.pypa.io/>`_::\r\n\r\n    pip install jproperties\r\n\r\nOverview\r\n--------\r\n\r\nObjects of the type ``Properties`` can be used like a Python dictionary (but see Caveats_ below).\r\nThe ``load()`` method populates the object by parsing input in the Java Property file format; the ``store()``\r\nmethod writes the key-value pairs stored in the object to a stream in the same format.\r\n\r\nThe ``load()`` and ``store()`` methods both take an ``encoding`` parameter. By default this is set to\r\n``iso-8859-1``, but it can be set to any encoding supported by Python, including e. g. the widely used\r\n``utf-8``.\r\n\r\nParsing a property file\r\n+++++++++++++++++++++++\r\n\r\n.. code:: python\r\n\r\n    from jproperties import Properties\r\n\r\n    p = Properties()\r\n    with open(\"foobar.properties\", \"rb\") as f:\r\n        p.load(f, \"utf-8\")\r\n\r\nThat's it, ``p`` now can be used like a dictionary containing properties from ``foobar.properties``.\r\n\r\nWriting a property file\r\n+++++++++++++++++++++++\r\n\r\n.. code:: python\r\n\r\n    from jproperties import Properties\r\n\r\n    p = Properties()\r\n    p[\"foobar\"] = \"A very important message from our sponsors: Python is great!\"\r\n\r\n    with open(\"foobar.properties\", \"wb\") as f:\r\n        p.store(f, encoding=\"utf-8\")\r\n\r\nReading from and writing to the same file-like object\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++\r\n\r\n.. code:: python\r\n\r\n    from jproperties import Properties\r\n\r\n    with open(\"foobar.properties\", \"r+b\") as f:\r\n        p = Properties()\r\n        p.load(f, \"utf-8\")\r\n\r\n        # Do stuff with the p object...\r\n\r\n        f.truncate(0)\r\n        p.store(f, encoding=\"utf-8\")\r\n\r\nSpecial features\r\n----------------\r\n\r\nMetadata\r\n++++++++\r\n\r\nThe property file parser supports including programmatically readable and settable metadata in property files.\r\nMetadata for a key is represented as a Python dictionary; the keys and values of this dictionary should be strings,\r\nalthough when the property file is written, all non-string objects will be converted to strings. **This is a\r\none-way conversion**; when the metadata is read back again during a ``load()``, all keys and values will be treated\r\nas simple strings.\r\n\r\nBy default, the ``store()`` method does not write out the metadata. To enable that feature, set the keyword argument\r\n``strip_meta=False`` when calling the method.\r\n\r\nNote that metadata support is always enabled. The only thing that is optional is actually writing out the metadata.\r\n\r\nMetadata keys beginning with two underscores (``__``) are not written to the output stream by the ``store()`` method.\r\nThus, they can be used to attach \"runtime-only\" metadata to properties. Currently, however, metadata with such keys is\r\nstill read from the input stream by ``load()``; this should probably be considered erroneous behaviour.\r\n\r\nCaveats\r\n^^^^^^^\r\n\r\nMetadata support influences how ``Properties`` objects are used as dictionary objects:\r\n\r\n- To set a value for a key, do ``prop_object[key] = value`` or ``prop_object[key] = value, metadata``. The first form\r\n  will leave the key's metadata unchanged. You can also use the ``setmeta()`` method to set a key's metadata.\r\n- To get the value of a key, do ``value, metadata = prop_object[key]``. If there is no metadata for a key,\r\n  ``metadata`` will be an empty dictionary. To retrieve only the metadata for a key, the ``getmeta()`` method can\r\n  be used.\r\n- When used as an iterator, ``Properties`` objects will simply return all keys in an unspecified order. No metadata is\r\n  returned (but can be retrieved using  ``getmeta()``).\r\n\r\nSetting defaults\r\n++++++++++++++++\r\n\r\nThe internal dictionary holding the key-value pairs can be accessed using the ``properties`` property. Deleting that\r\nproperty deletes all key-value pairs from the object.\r\n\r\nHowever, modifying properties using this special property will **not** modify metadata in any way. That means that\r\ndeleting properties by doing ``del prop_obj.properties[key]`` will not remove the associated metadata from the object.\r\nInstead, do ``del prop_obj[key]``.\r\n\r\nThe ``properties`` property is nevertheless useful to set many default values before parsing a property file:\r\n\r\n.. code:: python\r\n\r\n    from jproperties import Properties\r\n\r\n    prop_obj = Properties()\r\n    prop_obj.properties = a_big_dictionary_with_defaults\r\n    file_obj = codecs.open(\"foobar.properties\", \"rb\", \"iso-8859-1\")\r\n    prop_obj.load(file_obj, encoding=None)\r\n\r\nVersion history\r\n---------------\r\n\r\nVersion 1.0.1\r\n+++++++++++++\r\n\r\n- This is the first \"proper\" PyPI release, with proper PyPI metadata and proper PyPI distributions.\r\n  Nothing else has changed.\r\n\r\nVersion 1.0\r\n+++++++++++\r\n\r\n- Initial release",
    "docs_url": null,
    "download_url": "https://github.com/Tblue/python-jproperties/archive/v1.0.1.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Tblue/python-jproperties",
    "keywords": "java property properties file parser reader writer",
    "license": "BSD 3-Clause License; partially licensed under the Python Software Foundation License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jproperties",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/jproperties/",
    "release_url": "https://pypi.org/project/jproperties/1.0.1/",
    "requires_python": null,
    "summary": "Java Property file parser and writer for Python 2",
    "version": "1.0.1"
  },
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bdefdf3c191bd369642ff966064abb35",
          "sha256": "f51d9c0875ae4602930f18e198c69ce2bd1d7008a71f7628316abec56e73db83"
        },
        "downloads": 4952,
        "filename": "jproperties-1.0.1-py2-none-any.whl",
        "has_sig": true,
        "md5_digest": "bdefdf3c191bd369642ff966064abb35",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 16551,
        "upload_time": "2015-12-23T19:04:38",
        "url": "https://files.pythonhosted.org/packages/c1/ae/4d682c901b9e6b8ead960ffd82c514123fa3f39a9689f85626f27ba3d937/jproperties-1.0.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "47916fa9def818178dfab2abd8134d04",
          "sha256": "327e14082653a4f2212ff81a96fbf141382f727f421e8afc933bf56ff7c010f4"
        },
        "downloads": 506,
        "filename": "jproperties-1.0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "47916fa9def818178dfab2abd8134d04",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16484,
        "upload_time": "2015-12-23T19:04:50",
        "url": "https://files.pythonhosted.org/packages/b8/a8/bc4c49c2d2d79f0e67e7f0ca2a945b847aade3e2776541281a21c19acae1/jproperties-1.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "bdefdf3c191bd369642ff966064abb35",
        "sha256": "f51d9c0875ae4602930f18e198c69ce2bd1d7008a71f7628316abec56e73db83"
      },
      "downloads": 4952,
      "filename": "jproperties-1.0.1-py2-none-any.whl",
      "has_sig": true,
      "md5_digest": "bdefdf3c191bd369642ff966064abb35",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 16551,
      "upload_time": "2015-12-23T19:04:38",
      "url": "https://files.pythonhosted.org/packages/c1/ae/4d682c901b9e6b8ead960ffd82c514123fa3f39a9689f85626f27ba3d937/jproperties-1.0.1-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "47916fa9def818178dfab2abd8134d04",
        "sha256": "327e14082653a4f2212ff81a96fbf141382f727f421e8afc933bf56ff7c010f4"
      },
      "downloads": 506,
      "filename": "jproperties-1.0.1.tar.gz",
      "has_sig": true,
      "md5_digest": "47916fa9def818178dfab2abd8134d04",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 16484,
      "upload_time": "2015-12-23T19:04:50",
      "url": "https://files.pythonhosted.org/packages/b8/a8/bc4c49c2d2d79f0e67e7f0ca2a945b847aade3e2776541281a21c19acae1/jproperties-1.0.1.tar.gz"
    }
  ]
}