{
  "info": {
    "author": "Zope Foundation and Contributors",
    "author_email": "zope-dev@zope.org",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Framework :: Zope3",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Zope Public License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing"
    ],
    "description": "***************\nzope.testrunner\n***************\n\n.. image:: https://img.shields.io/pypi/v/zope.testrunner.svg\n        :target: https://pypi.python.org/pypi/zope.testrunner/\n        :alt: Latest release\n\n.. image:: https://img.shields.io/pypi/pyversions/zope.testrunner.svg\n        :target: https://pypi.org/project/zope.testrunner/\n        :alt: Supported Python versions\n\n.. image:: https://travis-ci.org/zopefoundation/zope.testrunner.svg?branch=master\n        :target: https://travis-ci.org/zopefoundation/zope.testrunner\n\n.. contents::\n\nThis package provides a flexible test runner with layer support.\n\nYou can find more `detailed documentation`_ on PyPI or in the ``src/``\ndirectory.\n\n\nGetting started\n***************\n\nBuildout-based projects\n=======================\n\nzope.testrunner is often used for projects that use buildout_::\n\n    [buildout]\n    develop = .\n    parts = ... test ...\n\n    [test]\n    recipe = zc.recipe.testrunner\n    eggs = mypackage\n\nThe usual buildout process ::\n\n    python bootstrap.py\n    bin/buildout\n\ncreates a ``bin/test`` script that will run the tests for *mypackage*.\n\n.. tip::\n\n    zc.recipe.testrunner_ takes care to specify the right\n    ``--test-path`` option in the generated script.  You can add\n    other options (such as ``--tests-pattern``) too; check\n    zc.recipe.testrunner_'s documentation for details.\n\n\nVirtualenv-based projects\n=========================\n\n``pip install zope.testrunner`` and you'll get a ``zope-testrunner``\nscript.  Run your tests with ::\n\n    zope-testrunner --test-path=path/to/your/source/tree\n\nYour source code needs to be available for the testrunner to import,\nso you need to run ``python setup.py install`` or ``pip install -e\n.`` into the same virtualenv_.\n\n\nSome useful command-line options to get you started\n===================================================\n\n-p              show a percentage indicator\n-v              increase verbosity\n-c              colorize the output\n-t test         specify test names (one or more regexes)\n-m module       specify test modules (one or more regexes)\n-s package      specify test packages (one or more regexes)\n--list-tests    show names of tests instead of running them\n-x              stop on first error or failure\n-D, --pdb       enable post-mortem debugging of test failures\n--help          show *all* command-line options (there are many more!)\n\nFor example ::\n\n    bin/test -pvc -m test_foo -t TestBar\n\nruns all TestBar tests from a module called test_foo.py.\n\n\nWriting tests\n=============\n\n``zope.testrunner`` expects to find your tests inside your package\ndirectory, in a subpackage or module named ``tests``.  Test modules\nin a test subpackage should be named ``test*.py``.\n\n.. tip::\n\n    You can change these assumptions with ``--tests-pattern`` and\n    ``--test-file-pattern`` test runner options.\n\nTests themselves should be classes inheriting from\n``unittest.TestCase``, and if you wish to use doctests, please tell\nthe test runner where to find them and what options to use for them\nin by supplying a function named ``test_suite``.\n\nExample::\n\n    import unittest\n    import doctest\n\n    class TestArithmetic(unittest.TestCase):\n\n        def test_two_plus_two(self):\n            self.assertEqual(2 + 2, 4)\n\n\n    def doctest_string_formatting():\n        \"\"\"Test Python string formatting\n\n            >>> print('{} + {}'.format(2, 2))\n            2 + 2\n\n        \"\"\"\n\n    def test_suite():\n        return unittest.TestSuite([\n            unittest.makeSuite(TestArithmetic),\n            doctest.DocTestSuite(),\n            doctest.DocFileSuite('../README.txt',\n                                 optionflags=doctest.ELLIPSIS),\n        ])\n\n\nTest grouping\n=============\n\nIn addition to per-package and per-module filtering, zope.testrunner\nhas other mechanisms for grouping tests:\n\n* **layers** allow you to have shared setup/teardown code to be used\n  by a group of tests, that is executed only once, and not for each\n  test.  Layers are orthogonal to the usual package/module structure\n  and are specified by setting the ``layer`` attribute on test\n  suites.\n\n* **levels** allow you to group slow-running tests and not run them\n  by default.  They're specified by setting the ``level`` attribute\n  on test suites to an int.\n\nFor more details please see the `detailed documentation`_.\n\n\nOther features\n==============\n\nzope.testrunner can profile your tests, measure test coverage,\ncheck for memory leaks, shuffle the test execution order, and run\nmultiple tests in parallel.\n\nFor more details please see the `detailed documentation`_.\n\n.. _buildout: http://www.buildout.org/\n.. _virtualenv: http://www.virtualenv.org/\n.. _zc.recipe.testrunner: http://pypi.python.org/pypi/zc.recipe.testrunner\n.. _detailed documentation: http://docs.zope.org/zope.testrunner/\n\nzope.testrunner Changelog\n*************************\n\n4.8.1 (2017-11-12)\n==================\n\n- Enable ``DeprecationWarning`` earlier, when discovering test\n  modules. This lets warnings that are raised on import (such as those\n  produced by ``zope.deprecation.moved``) be reported. See `issue 57\n  <https://github.com/zopefoundation/zope.testrunner/issues/57>`_.\n\n\n4.8.0 (2017-11-10)\n==================\n\n- Automatically enable ``DeprecationWarning`` when running tests. This\n  is recommended by the Python core developers and matches the\n  behaviour of the ``unittest`` module. This can be overridden with\n  Python command-line options (``-W``) or environment variables\n  (``PYTHONWARNINGS``). See `issue 54\n  <https://github.com/zopefoundation/zope.testrunner/issues/54>`_.\n\n4.7.0 (2017-05-30)\n==================\n\n- Drop all support for ``subunit``.\n\n\n4.6.0 (2016-12-28)\n==================\n\n- Make the ``subunit`` support purely optional: applications which have\n  been getting the dependencies via ``zope.testrunner`` should either add\n  ``zope.testrunner[subunit]`` to their ``install_requires`` or else\n  depend directly on ``python-subunit``.\n\n- New option ``--ignore-new-thread=<regexp>`` to suppress \"New thread(s)\"\n  warnings.\n\n- Support Python 3.6.\n\n\n4.5.1 (2016-06-20)\n==================\n\n- Fixed: Using the ``-j`` option to run tests in multiple processes\n  caused tests that used the ``multiprocessing`` package to hang\n  (because the testrunner replaced ``sys.stdin`` with an unclosable\n  object).\n\n- Drop conditional dependency on ``unittest2`` (redundant after dropping\n  support for Python 2.6).\n\n\n4.5.0 (2016-05-02)\n==================\n\n- Stop tests for all layers when test fails/errors when started with\n  -x/--stop-on-error\n  (`#37 <https://github.com/zopefoundation/zope.testrunner/pull/37>`_).\n\n- Drop support for Python 2.6 and 3.2.\n\n\n4.4.10 (2015-11-10)\n===================\n\n- Add support for Python 3.5\n  (`#31 <https://github.com/zopefoundation/zope.testrunner/pull/31>`_).\n\n- Insert extra paths (from ``--path``) to the front of sys.argv\n  (`#32 <https://github.com/zopefoundation/zope.testrunner/issues/32>`_).\n\n\n4.4.9 (2015-05-21)\n==================\n\n- When using ``-j``, parallelize all the tests, including the first test layer\n  (`#28 <https://github.com/zopefoundation/zope.testrunner/issues/28>`_).\n\n\n4.4.8 (2015-05-01)\n==================\n\n- Support skipped tests in subunit output\n  (`#25 <https://github.com/zopefoundation/zope.testrunner/pull/25>`_).\n\n- More efficient test filtering\n  (`#26 <https://github.com/zopefoundation/zope.testrunner/pull/26>`_).\n\n\n4.4.7 (2015-04-02)\n==================\n\n- Work around a bug in PyPy3's curses module\n  (`#24 <https://github.com/zopefoundation/zope.testrunner/issues/24>`_).\n\n\n4.4.6 (2015-01-21)\n==================\n\n- Restore support for instance-based test layers that regressed in 4.4.5\n  (`#20 <https://github.com/zopefoundation/zope.testrunner/pull/20>`_).\n\n\n4.4.5 (2015-01-06)\n==================\n\n- Sort related layers close to each other to reduce the number of unnecessary\n  teardowns (fixes `#14\n  <https://github.com/zopefoundation/zope.testrunner/issues/14>`_).\n\n- Run the unit test layer first (fixes `LP #497871\n  <https://bugs.launchpad.net/zope.testrunner/+bug/497871>`__).\n\n\n4.4.4 (2014-12-27)\n==================\n\n- When looking for the right location of test code, start with longest\n  location paths first. This fixes problems with nested code locations.\n\n\n4.4.3 (2014-03-19)\n==================\n\n- Added support for Python 3.4.\n\n\n4.4.2 (2014-02-22)\n==================\n\n- Drop support for Python 3.1.\n\n- Fix post-mortem debugging when a non-printable exception happens\n  (https://github.com/zopefoundation/zope.testrunner/issues/8).\n\n\n4.4.1 (2013-07-10)\n==================\n\n- Updated ``boostrap.py`` to version 2.2.\n\n- Fix nondeterministic test failures on Python 3.3\n\n- Tear down layers after ``post_mortem`` debugging is finished.\n\n- Fix tests that write to source directory, it might be read-only.\n\n\n4.4.0 (2013-06-06)\n==================\n\n- Fix tests selection when the negative \"!\" pattern is used several times\n  (LP #1160965)\n\n- Moved tests into a 'tests' subpackage.\n\n- Made ``python -m zope.testrunner`` work again.\n\n- Support 'skip' feature of unittest2 (which became the new unittest in Python\n  2.7).\n\n- Better diagnostics when communication with subprocess fails\n  (https://github.com/zopefoundation/zope.testrunner/issues/5).\n\n- Do not break subprocess execution when the test suite changes the working\n  directory (https://github.com/zopefoundation/zope.testrunner/issues/6).\n\n- Count test module import errors as errors (LP #1026576).\n\n\n4.3.3 (2013-03-03)\n==================\n\n- Running layers in sub-processes did not use to work when run via\n  ``python setup.py ftest`` since it tried to run setup.py with all the\n  command line options. It now detects ``setup.py`` runs and we run the test\n  runner directly.\n\n\n4.3.2 (2013-03-03)\n==================\n\n- Fix ``SkipLayers`` class in cases where the distribution specifies a\n  ``test_suite`` value.\n\n\n4.3.1 (2013-03-02)\n==================\n\n- Fixed a bug in the `ftest` command and added a test.\n\n- Fixed a trivial test failure with Python 3 of the previous release.\n\n\n4.3.0 (2013-03-02)\n==================\n\n- Expose `ftest` distutils command via an entry point.\n\n- Added tests for ``zope.testrunner.eggsupport``.\n\n\n4.2.0 (2013-02-12)\n==================\n\n- Dropped use of 2to3, rewrote source code to be compatible with all Python\n  versions.  Introduced a dependency on `six`_.\n\n\n4.1.1 (2013-02-08)\n==================\n\n- Dropped use of zope.fixers (LP: #1118877).\n\n- Fixed tox test error reporting; fixed tests on Pythons 2.6, 3.1, 3.2, 3.3 and\n  PyPy 1.9.\n\n- Fix --shuffle ordering on Python 3.2 to be the same as it was on older Python\n  versions.\n\n- Fix --shuffle nondeterminism when multiple test layers are present.\n  Note: this will likely change the order of tests for the same --shuffle-seed.\n\n- New option: --profile-directory.  Use it in the test suite so that tests\n  executed by detox in parallel don't conflict.\n\n- Use a temporary coverage directory in the test suite so that tests\n  executed by detox in parallel don't conflict.\n\n- Fix --post-mortem (aka -D, --pdb) when a test module cannot be imported\n  or is invalid (LP #1119363).\n\n\n4.1.0 (2013-02-07)\n==================\n\n- Replaced deprecated ``zope.interface.implements`` usage with equivalent\n  ``zope.interface.implementer`` decorator.\n\n- Dropped support for Python 2.4 and 2.5.\n\n- Made StartUpFailure compatible with unittest.TextTestRunner() (LP #1118344).\n\n\n4.0.4 (2011-10-25)\n==================\n\n- Work around sporadic timing-related issues in the subprocess buffering\n  tests.  Thanks to Jonathan Ballet for the patch!\n\n\n4.0.3 (2011-03-17)\n==================\n\n- Added back support for Python <= 2.6 which was broken in 4.0.2.\n\n\n4.0.2 (2011-03-16)\n==================\n\n- Added back Python 3 support which was broken in 4.0.1.\n\n- Fixed `Unexpected success`_ support by implementing the whole concept.\n\n- Added support for the new __pycache__ directories in Python 3.2.\n\n\n4.0.1 (2011-02-21)\n==================\n\n- LP #719369: An `Unexpected success`_ (concept introduced in Python 2.7) is\n  no longer handled as success but as failure. This is a workaround. The\n  whole unexpected success concept might be implemented later.\n\n.. _`Unexpected success`: http://www.voidspace.org.uk/python/articles/unittest2.shtml#more-skipping\n\n\n4.0.0 (2010-10-19)\n==================\n\n- Show more information about layers whose setup fails (LP #638153).\n\n\n4.0.0b5 (2010-07-20)\n====================\n\n- Update fix for LP #221151 to a spelling compatible with Python 2.4.\n\n- Timestamps are now always included in subunit output (r114849).\n\n- LP #591309: fix a crash when subunit reports test failures containing\n  UTF8-encoded data.\n\n\n4.0.0b4 (2010-06-23)\n====================\n\n- Package as a zipfile to work around Python 2.4 distutils bug (no\n  feature changes or bugfixes in ``zope.testrunner`` itself).\n\n\n4.0.0b3 (2010-06-16)\n====================\n\n- LP #221151: keep ``unittest.TestCase.shortDescription`` happy by supplying\n  a ``_testMethodDoc`` attribute.\n\n- LP #595052: keep the distribution installable under Python 2.4:  its\n  distutils appears to munge the empty ``__init__.py`` file in the\n  ``foo.bar`` egg used for testing into a directory.\n\n- LP #580083: fix the ``bin/test`` script to run only tests from\n  ``zope.testrunner``.\n\n- LP #579019: When layers were run in parallel, their tearDown was\n  not called. Additionally, the first layer which was run in the main\n  thread did not have its tearDown called either.\n\n\n4.0.0b2 (2010-05-03)\n====================\n\n- Having 'sampletests' in the MANIFEST.in gave warnings, but doesn't actually\n  seem to include any more files, so I removed it.\n\n- Moved zope.testing.exceptions to zope.testrunner.exceptions. Now\n  zope.testrunner no longer requires zope.testing except for when running\n  its own tests.\n\n\n4.0.0b1 (2010-04-29)\n====================\n\n- Initial release of the testrunner from zope.testrunner as its own module.\n  (Previously it was part of zope.testing.)\n\n\n.. _six: http://pypi.python.org/pypi/six\n\nDetailed Documentation\n**********************\n\nTest Runner\n===========\n\nThe testrunner module is used to run automated tests defined using the\nunittest framework.  Its primary feature is that it *finds* tests by\nsearching directory trees.  It doesn't require the manual\nconcatenation of specific test suites.  It is highly customizable and\nshould be usable with any project.  In addition to finding and running\ntests, it provides the following additional features:\n\n- Test filtering using specifications of:\n\n  o test packages within a larger tree\n\n  o regular expression patterns for test modules\n\n  o regular expression patterns for individual tests\n\n- Organization of tests into levels and layers\n\n  Sometimes, tests take so long to run that you don't want to run them\n  on every run of the test runner.  Tests can be defined at different\n  levels.  The test runner can be configured to only run tests at a\n  specific level or below by default.  Command-line options can be\n  used to specify a minimum level to use for a specific run, or to run\n  all tests.  Individual tests or test suites can specify their level\n  via a 'level' attribute. where levels are integers increasing from 1.\n\n  Most tests are unit tests.  They don't depend on other facilities, or\n  set up whatever dependencies they have.  For larger applications,\n  it's useful to specify common facilities that a large number of\n  tests share.  Making each test set up and and tear down these\n  facilities is both ineffecient and inconvenient.  For this reason,\n  we've introduced the concept of layers, based on the idea of layered\n  application architectures.  Software build for a layer should be\n  able to depend on the facilities of lower layers already being set\n  up.  For example, Zope defines a component architecture.  Much Zope\n  software depends on that architecture.  We should be able to treat\n  the component architecture as a layer that we set up once and reuse.\n  Similarly, Zope application software should be able to depend on the\n  Zope application server without having to set it up in each test.\n\n  The test runner introduces test layers, which are objects that can\n  set up environments for tests within the layers to use.  A layer is\n  set up before running the tests in it.  Individual tests or test\n  suites can define a layer by defining a `layer` attribute, which is\n  a test layer.\n\n- Reporting\n\n  - progress meter\n\n  - summaries of tests run\n\n- Analysis of test execution\n\n  - post-mortem debugging of test failures\n\n  - memory leaks\n\n  - code coverage\n\n  - source analysis using pychecker\n\n  - memory errors\n\n  - execution times\n\n  - profiling\n\nSimple Usage\n============\n\nThe test runner consists of an importable module.  The test runner is\nused by providing scripts that import and invoke the `run` method from\nthe module.  The `testrunner` module is controlled via command-line\noptions.  Test scripts supply base and default options by supplying a\nlist of default command-line options that are processed before the\nuser-supplied command-line options are provided.\n\nTypically, a test script does 2 things:\n\n- Adds the directory containing the zope package to the Python\n  path.\n\n- Calls the test runner with default arguments and arguments supplied\n  to the script.\n\n  Normally, it just passes default/setup arguments.  The test runner\n  uses `sys.argv` to get the user's input.\n\nThis testrunner_ex subdirectory contains a number of sample packages\nwith tests.  Let's run the tests found here. First though, we'll set\nup our default options:\n\n    >>> import os.path\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n\nThe default options are used by a script to customize the test runner\nfor a particular application.  In this case, we use two options:\n\npath\n  Set the path where the test runner should look for tests.  This path\n  is also added to the Python path.\n\ntests-pattern\n  Tell the test runner how to recognize modules or packages containing\n  tests.\n\nNow, if we run the tests, without any other options:\n\n    >>> from zope import testrunner\n    >>> import sys\n    >>> sys.argv = ['test']\n    >>> testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Ran 156 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer1 tests:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Ran 9 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer11 tests:\n      Set up samplelayers.Layer11 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer111 tests:\n      Set up samplelayers.Layerx in N.NNN seconds.\n      Set up samplelayers.Layer111 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer112 tests:\n      Tear down samplelayers.Layer111 in N.NNN seconds.\n      Set up samplelayers.Layer112 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer12 tests:\n      Tear down samplelayers.Layer112 in N.NNN seconds.\n      Tear down samplelayers.Layerx in N.NNN seconds.\n      Tear down samplelayers.Layer11 in N.NNN seconds.\n      Set up samplelayers.Layer12 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer121 tests:\n      Set up samplelayers.Layer121 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer122 tests:\n      Tear down samplelayers.Layer121 in N.NNN seconds.\n      Set up samplelayers.Layer122 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in N.NNN seconds.\n      Tear down samplelayers.Layer12 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    Total: 321 tests, 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    False\n\nwe see the normal testrunner output, which summarizes the tests run for\neach layer.  For each layer, we see what layers had to be torn down or\nset up to run the layer and we see the number of tests run, with\nresults.\n\nThe test runner returns a boolean indicating whether there were\nerrors.  In this example, there were no errors, so it returned False.\n\n(Of course, the times shown in these examples are just examples.\nTimes will vary depending on system speed.)\n\nLayers\n======\n\nA Layer is an object providing setup and teardown methods used to setup\nand teardown the environment provided by the layer. It may also provide\nsetup and teardown methods used to reset the environment provided by the\nlayer between each test.\n\nLayers are generally implemented as classes using class methods.\n\n>>> class BaseLayer:\n...     def setUp(cls):\n...         log('BaseLayer.setUp')\n...     setUp = classmethod(setUp)\n...\n...     def tearDown(cls):\n...         log('BaseLayer.tearDown')\n...     tearDown = classmethod(tearDown)\n...\n...     def testSetUp(cls):\n...         log('BaseLayer.testSetUp')\n...     testSetUp = classmethod(testSetUp)\n...\n...     def testTearDown(cls):\n...         log('BaseLayer.testTearDown')\n...     testTearDown = classmethod(testTearDown)\n...\n\nLayers can extend other layers. Note that they do not explicitly\ninvoke the setup and teardown methods of other layers - the test runner\ndoes this for us in order to minimize the number of invocations.\n\n>>> class TopLayer(BaseLayer):\n...     def setUp(cls):\n...         log('TopLayer.setUp')\n...     setUp = classmethod(setUp)\n...\n...     def tearDown(cls):\n...         log('TopLayer.tearDown')\n...     tearDown = classmethod(tearDown)\n...\n...     def testSetUp(cls):\n...         log('TopLayer.testSetUp')\n...     testSetUp = classmethod(testSetUp)\n...\n...     def testTearDown(cls):\n...         log('TopLayer.testTearDown')\n...     testTearDown = classmethod(testTearDown)\n...\n\nTests or test suites specify what layer they need by storing a reference\nin the 'layer' attribute.\n\n>>> import unittest\n>>> class TestSpecifyingBaseLayer(unittest.TestCase):\n...     'This TestCase explicitly specifies its layer'\n...     layer = BaseLayer\n...     name = 'TestSpecifyingBaseLayer' # For testing only\n...\n...     def setUp(self):\n...         log('TestSpecifyingBaseLayer.setUp')\n...\n...     def tearDown(self):\n...         log('TestSpecifyingBaseLayer.tearDown')\n...\n...     def test1(self):\n...         log('TestSpecifyingBaseLayer.test1')\n...\n...     def test2(self):\n...         log('TestSpecifyingBaseLayer.test2')\n...\n>>> class TestSpecifyingNoLayer(unittest.TestCase):\n...     'This TestCase specifies no layer'\n...     name = 'TestSpecifyingNoLayer' # For testing only\n...     def setUp(self):\n...         log('TestSpecifyingNoLayer.setUp')\n...\n...     def tearDown(self):\n...         log('TestSpecifyingNoLayer.tearDown')\n...\n...     def test1(self):\n...         log('TestSpecifyingNoLayer.test')\n...\n...     def test2(self):\n...         log('TestSpecifyingNoLayer.test')\n...\n\nCreate a TestSuite containing two test suites, one for each of\nTestSpecifyingBaseLayer and TestSpecifyingNoLayer.\n\n>>> umbrella_suite = unittest.TestSuite()\n>>> umbrella_suite.addTest(unittest.makeSuite(TestSpecifyingBaseLayer))\n>>> no_layer_suite = unittest.makeSuite(TestSpecifyingNoLayer)\n>>> umbrella_suite.addTest(no_layer_suite)\n\nBefore we can run the tests, we need to setup some helpers.\n\n>>> from zope.testrunner import options\n>>> from zope.testing.loggingsupport import InstalledHandler\n>>> import logging\n>>> log_handler = InstalledHandler('zope.testrunner.tests')\n>>> def log(msg):\n...     logging.getLogger('zope.testrunner.tests').info(msg)\n>>> def fresh_options():\n...     opts = options.get_options(['--test-filter', '.*'])\n...     opts.resume_layer = None\n...     opts.resume_number = 0\n...     return opts\n\nNow we run the tests. Note that the BaseLayer was not setup when\nthe TestSpecifyingNoLayer was run and setup/torn down around the\nTestSpecifyingBaseLayer tests.\n\n>>> from zope.testrunner.runner import Runner\n>>> runner = Runner(options=fresh_options(), args=[], found_suites=[umbrella_suite])\n>>> succeeded = runner.run()\nRunning zope.testrunner.layer.UnitTests tests:\n  Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n  Ran 2 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\nRunning ...BaseLayer tests:\n  Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n  Set up ...BaseLayer in N.NNN seconds.\n  Ran 2 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\nTearing down left over layers:\n  Tear down ...BaseLayer in N.NNN seconds.\nTotal: 4 tests, 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n\n\nNow lets specify a layer in the suite containing TestSpecifyingNoLayer\nand run the tests again. This demonstrates the other method of specifying\na layer. This is generally how you specify what layer doctests need.\n\n>>> no_layer_suite.layer = BaseLayer\n>>> runner = Runner(options=fresh_options(), args=[], found_suites=[umbrella_suite])\n>>> succeeded = runner.run()\nRunning ...BaseLayer tests:\n  Set up ...BaseLayer in N.NNN seconds.\n  Ran 4 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\nTearing down left over layers:\n  Tear down ...BaseLayer in N.NNN seconds.\n\nClear our logged output, as we want to inspect it shortly.\n\n>>> log_handler.clear()\n\nNow lets also specify a layer in the TestSpecifyingNoLayer class and rerun\nthe tests. This demonstrates that the most specific layer is used. It also\nshows the behavior of nested layers - because TopLayer extends BaseLayer,\nboth the BaseLayer and TopLayer environments are setup when the\nTestSpecifyingNoLayer tests are run.\n\n>>> TestSpecifyingNoLayer.layer = TopLayer\n>>> runner = Runner(options=fresh_options(), args=[], found_suites=[umbrella_suite])\n>>> succeeded = runner.run()\nRunning ...BaseLayer tests:\n  Set up ...BaseLayer in N.NNN seconds.\n  Ran 2 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\nRunning ...TopLayer tests:\n  Set up ...TopLayer in N.NNN seconds.\n  Ran 2 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\nTearing down left over layers:\n  Tear down ...TopLayer in N.NNN seconds.\n  Tear down ...BaseLayer in N.NNN seconds.\nTotal: 4 tests, 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n\n\nIf we inspect our trace of what methods got called in what order, we can\nsee that the layer setup and teardown methods only got called once. We can\nalso see that the layer's test setup and teardown methods got called for\neach test using that layer in the right order.\n\n>>> def report():\n...     print(\"Report:\")\n...     for record in log_handler.records:\n...         print(record.getMessage())\n>>> report()\nReport:\nBaseLayer.setUp\nBaseLayer.testSetUp\nTestSpecifyingBaseLayer.setUp\nTestSpecifyingBaseLayer.test1\nTestSpecifyingBaseLayer.tearDown\nBaseLayer.testTearDown\nBaseLayer.testSetUp\nTestSpecifyingBaseLayer.setUp\nTestSpecifyingBaseLayer.test2\nTestSpecifyingBaseLayer.tearDown\nBaseLayer.testTearDown\nTopLayer.setUp\nBaseLayer.testSetUp\nTopLayer.testSetUp\nTestSpecifyingNoLayer.setUp\nTestSpecifyingNoLayer.test\nTestSpecifyingNoLayer.tearDown\nTopLayer.testTearDown\nBaseLayer.testTearDown\nBaseLayer.testSetUp\nTopLayer.testSetUp\nTestSpecifyingNoLayer.setUp\nTestSpecifyingNoLayer.test\nTestSpecifyingNoLayer.tearDown\nTopLayer.testTearDown\nBaseLayer.testTearDown\nTopLayer.tearDown\nBaseLayer.tearDown\n\nNow lets stack a few more layers to ensure that our setUp and tearDown\nmethods are called in the correct order.\n\n>>> from zope.testrunner.find import name_from_layer\n>>> class A(object):\n...     def setUp(cls):\n...         log('%s.setUp' % name_from_layer(cls))\n...     setUp = classmethod(setUp)\n...\n...     def tearDown(cls):\n...         log('%s.tearDown' % name_from_layer(cls))\n...     tearDown = classmethod(tearDown)\n...\n...     def testSetUp(cls):\n...         log('%s.testSetUp' % name_from_layer(cls))\n...     testSetUp = classmethod(testSetUp)\n...\n...     def testTearDown(cls):\n...         log('%s.testTearDown' % name_from_layer(cls))\n...     testTearDown = classmethod(testTearDown)\n...         \n>>> class B(A): pass\n>>> class C(B): pass\n>>> class D(A): pass\n>>> class E(D): pass\n>>> class F(C,E): pass\n\n>>> class DeepTest(unittest.TestCase):\n...     layer = F\n...     def test(self):\n...         pass\n>>> suite = unittest.makeSuite(DeepTest)\n>>> log_handler.clear()\n>>> runner = Runner(options=fresh_options(), args=[], found_suites=[suite])\n>>> succeeded = runner.run() #doctest: +ELLIPSIS\nRunning ...F tests:\n  Set up ...A in N.NNN seconds.\n  Set up ...B in N.NNN seconds.\n  Set up ...C in N.NNN seconds.\n  Set up ...D in N.NNN seconds.\n  Set up ...E in N.NNN seconds.\n  Set up ...F in N.NNN seconds.\n  Ran 1 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\nTearing down left over layers:\n  Tear down ...F in N.NNN seconds.\n  Tear down ...E in N.NNN seconds.\n  Tear down ...D in N.NNN seconds.\n  Tear down ...C in N.NNN seconds.\n  Tear down ...B in N.NNN seconds.\n  Tear down ...A in N.NNN seconds.\n\n\n>>> report() #doctest: +ELLIPSIS\nReport:\n...A.setUp\n...B.setUp\n...C.setUp\n...D.setUp\n...E.setUp\n...F.setUp\n...A.testSetUp\n...B.testSetUp\n...C.testSetUp\n...D.testSetUp\n...E.testSetUp\n...F.testSetUp\n...F.testTearDown\n...E.testTearDown\n...D.testTearDown\n...C.testTearDown\n...B.testTearDown\n...A.testTearDown\n...F.tearDown\n...E.tearDown\n...D.tearDown\n...C.tearDown\n...B.tearDown\n...A.tearDown\n\n\nLayer Selection\n===============\n\nWe can select which layers to run using the --layer option:\n\n    >>> import os.path, sys\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n\n    >>> sys.argv = 'test --layer 112 --layer Unit'.split()\n    >>> from zope import testrunner\n    >>> testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Ran 156 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer112 tests:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Set up samplelayers.Layerx in N.NNN seconds.\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Set up samplelayers.Layer11 in N.NNN seconds.\n      Set up samplelayers.Layer112 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer112 in N.NNN seconds.\n      Tear down samplelayers.Layerx in N.NNN seconds.\n      Tear down samplelayers.Layer11 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    Total: 182 tests, 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    False\n\n\nWe can also specify that we want to run only the unit tests:\n\n    >>> sys.argv = 'test -u'.split()\n    >>> testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Ran 156 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\nOr that we want to run all of the tests except for the unit tests:\n\n    >>> sys.argv = 'test -f'.split()\n    >>> testrunner.run_internal(defaults)\n    Running samplelayers.Layer1 tests:\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Ran 9 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer11 tests:\n      Set up samplelayers.Layer11 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer111 tests:\n      Set up samplelayers.Layerx in N.NNN seconds.\n      Set up samplelayers.Layer111 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer112 tests:\n      Tear down samplelayers.Layer111 in N.NNN seconds.\n      Set up samplelayers.Layer112 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer12 tests:\n      Tear down samplelayers.Layer112 in N.NNN seconds.\n      Tear down samplelayers.Layerx in N.NNN seconds.\n      Tear down samplelayers.Layer11 in N.NNN seconds.\n      Set up samplelayers.Layer12 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer121 tests:\n      Set up samplelayers.Layer121 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer122 tests:\n      Tear down samplelayers.Layer121 in N.NNN seconds.\n      Set up samplelayers.Layer122 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in N.NNN seconds.\n      Tear down samplelayers.Layer12 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    Total: 165 tests, 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    False\n\nOr we can explicitly say that we want both unit and non-unit tests.\n\n    >>> sys.argv = 'test -uf'.split()\n    >>> testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Ran 156 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer1 tests:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Ran 9 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer11 tests:\n      Set up samplelayers.Layer11 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer111 tests:\n      Set up samplelayers.Layerx in N.NNN seconds.\n      Set up samplelayers.Layer111 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer112 tests:\n      Tear down samplelayers.Layer111 in N.NNN seconds.\n      Set up samplelayers.Layer112 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer12 tests:\n      Tear down samplelayers.Layer112 in N.NNN seconds.\n      Tear down samplelayers.Layerx in N.NNN seconds.\n      Tear down samplelayers.Layer11 in N.NNN seconds.\n      Set up samplelayers.Layer12 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer121 tests:\n      Set up samplelayers.Layer121 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer122 tests:\n      Tear down samplelayers.Layer121 in N.NNN seconds.\n      Set up samplelayers.Layer122 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in N.NNN seconds.\n      Tear down samplelayers.Layer12 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    Total: 321 tests, 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    False\n\nIt is possible to force the layers to run in subprocesses and parallelize them.\n``EmptyLayer`` will be inserted as first to start spreading out\nsubprocesses ASAP.\n\n    >>> sys.argv = [testrunner_script, '-j2']\n    >>> testrunner.run_internal(defaults)\n    Running .EmptyLayer tests:\n      Set up .EmptyLayer in N.NNN seconds.\n      Ran 0 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running zope.testrunner.layer.UnitTests tests:\n      Running in a subprocess.\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Ran 156 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    Running samplelayers.Layer1 tests:\n      Running in a subprocess.\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Ran 9 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    Running samplelayers.Layer11 tests:\n      Running in a subprocess.\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Set up samplelayers.Layer11 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n      Tear down samplelayers.Layer11 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    Running samplelayers.Layer111 tests:\n      Running in a subprocess.\n      Set up samplelayers.Layerx in N.NNN seconds.\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Set up samplelayers.Layer11 in N.NNN seconds.\n      Set up samplelayers.Layer111 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n      Tear down samplelayers.Layer111 in N.NNN seconds.\n      Tear down samplelayers.Layerx in N.NNN seconds.\n      Tear down samplelayers.Layer11 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    Running samplelayers.Layer112 tests:\n      Running in a subprocess.\n      Set up samplelayers.Layerx in N.NNN seconds.\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Set up samplelayers.Layer11 in N.NNN seconds.\n      Set up samplelayers.Layer112 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n      Tear down samplelayers.Layer112 in N.NNN seconds.\n      Tear down samplelayers.Layerx in N.NNN seconds.\n      Tear down samplelayers.Layer11 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    Running samplelayers.Layer12 tests:\n      Running in a subprocess.\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Set up samplelayers.Layer12 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n      Tear down samplelayers.Layer12 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    Running samplelayers.Layer121 tests:\n      Running in a subprocess.\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Set up samplelayers.Layer12 in N.NNN seconds.\n      Set up samplelayers.Layer121 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n      Tear down samplelayers.Layer121 in N.NNN seconds.\n      Tear down samplelayers.Layer12 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    Running samplelayers.Layer122 tests:\n      Running in a subprocess.\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Set up samplelayers.Layer12 in N.NNN seconds.\n      Set up samplelayers.Layer122 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n      Tear down samplelayers.Layer122 in N.NNN seconds.\n      Tear down samplelayers.Layer12 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down .EmptyLayer in N.NNN seconds.\n    Total: 321 tests, 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    False\n\nPassing arguments explicitly\n============================\n\nIn most of the examples here, we set up `sys.argv`.  In normal usage,\nthe testrunner just uses `sys.argv`.  It is possible to pass arguments\nexplicitly.\n\n    >>> import os.path\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n    >>> from zope import testrunner\n    >>> testrunner.run_internal(defaults, 'test --layer 111'.split())\n    Running samplelayers.Layer111 tests:\n      Set up samplelayers.Layerx in N.NNN seconds.\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Set up samplelayers.Layer11 in N.NNN seconds.\n      Set up samplelayers.Layer111 in N.NNN seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer111 in N.NNN seconds.\n      Tear down samplelayers.Layerx in N.NNN seconds.\n      Tear down samplelayers.Layer11 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    False\n\nIf options already have default values, then passing a different default will\noverride.\n\nFor example, --list-tests defaults to being turned off, but if we pass in a\ndifferent default, that one takes effect.\n\n    >>> defaults = [\n    ...     '--list-tests',\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n    >>> from zope import testrunner\n    >>> testrunner.run_internal(defaults, 'test --layer 111'.split())\n    Listing samplelayers.Layer111 tests:\n      test_x1 (sample1.sampletests.test111.TestA)\n      test_y0 (sample1.sampletests.test111.TestA)\n      test_z0 (sample1.sampletests.test111.TestA)\n      test_x0 (sample1.sampletests.test111.TestB)\n      test_y1 (sample1.sampletests.test111.TestB)\n      test_z0 (sample1.sampletests.test111.TestB)\n      test_1 (sample1.sampletests.test111.TestNotMuch)\n      test_2 (sample1.sampletests.test111.TestNotMuch)\n      test_3 (sample1.sampletests.test111.TestNotMuch)\n      test_x0 (sample1.sampletests.test111)\n      test_y0 (sample1.sampletests.test111)\n      test_z1 (sample1.sampletests.test111)\n      /home/benji/workspace/zope.testrunner/1/src/zope/testing/testrunner/testrunner-ex/sample1/sampletests/../../sampletestsl.txt\n      test_x1 (sampletests.test111.TestA)\n      test_y0 (sampletests.test111.TestA)\n      test_z0 (sampletests.test111.TestA)\n      test_x0 (sampletests.test111.TestB)\n      test_y1 (sampletests.test111.TestB)\n      test_z0 (sampletests.test111.TestB)\n      test_1 (sampletests.test111.TestNotMuch)\n      test_2 (sampletests.test111.TestNotMuch)\n      test_3 (sampletests.test111.TestNotMuch)\n      test_x0 (sampletests.test111)\n      test_y0 (sampletests.test111)\n      test_z1 (sampletests.test111)\n      /home/benji/workspace/zope.testrunner/1/src/zope/testing/testrunner/testrunner-ex/sampletests/../sampletestsl.txt\n    False\n\nVerbose Output\n==============\n\nNormally, we just get a summary.  We can use the -v option to get\nincreasingly more information.\n\nIf we use a single --verbose (-v) option, we get a dot printed for each\ntest:\n\n    >>> import os.path, sys\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n    >>> sys.argv = 'test --layer 122 -v'.split()\n    >>> from zope import testrunner\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running samplelayers.Layer122 tests:\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Set up samplelayers.Layer12 in 0.000 seconds.\n      Set up samplelayers.Layer122 in 0.000 seconds.\n      Running:\n        ..................................\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.007 seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in 0.000 seconds.\n      Tear down samplelayers.Layer12 in 0.000 seconds.\n      Tear down samplelayers.Layer1 in 0.000 seconds.\n    False\n\nIf there are more than 50 tests, the dots are printed in groups of\n50:\n\n    >>> sys.argv = 'test -uv'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n    ................................................................................................................................................................................................\n      Ran 156 tests with 0 failures, 0 errors and 0 skipped in 0.035 seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nIf the --verbose (-v) option is used twice, then the name and location of\neach test is printed as it is run:\n\n    >>> sys.argv = 'test --layer 122 -vv'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running samplelayers.Layer122 tests:\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Set up samplelayers.Layer12 in 0.000 seconds.\n      Set up samplelayers.Layer122 in 0.000 seconds.\n      Running:\n        test_x1 (sample1.sampletests.test122.TestA)\n        test_y0 (sample1.sampletests.test122.TestA)\n        test_z0 (sample1.sampletests.test122.TestA)\n        test_x0 (sample1.sampletests.test122.TestB)\n        test_y1 (sample1.sampletests.test122.TestB)\n        test_z0 (sample1.sampletests.test122.TestB)\n        test_1 (sample1.sampletests.test122.TestNotMuch)\n        test_2 (sample1.sampletests.test122.TestNotMuch)\n        test_3 (sample1.sampletests.test122.TestNotMuch)\n        test_x0 (sample1.sampletests.test122)\n        test_y0 (sample1.sampletests.test122)\n        test_z1 (sample1.sampletests.test122)\n        testrunner-ex/sample1/sampletests/../../sampletestsl.txt\n        test_x1 (sampletests.test122.TestA)\n        test_y0 (sampletests.test122.TestA)\n        test_z0 (sampletests.test122.TestA)\n        test_x0 (sampletests.test122.TestB)\n        test_y1 (sampletests.test122.TestB)\n        test_z0 (sampletests.test122.TestB)\n        test_1 (sampletests.test122.TestNotMuch)\n        test_2 (sampletests.test122.TestNotMuch)\n        test_3 (sampletests.test122.TestNotMuch)\n        test_x0 (sampletests.test122)\n        test_y0 (sampletests.test122)\n        test_z1 (sampletests.test122)\n        testrunner-ex/sampletests/../sampletestsl.txt\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.009 seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in 0.000 seconds.\n      Tear down samplelayers.Layer12 in 0.000 seconds.\n      Tear down samplelayers.Layer1 in 0.000 seconds.\n    False\n\nif the --verbose (-v) option is used three times, then individual\ntest-execution times are printed:\n\n    >>> sys.argv = 'test --layer 122 -vvv'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running samplelayers.Layer122 tests:\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Set up samplelayers.Layer12 in 0.000 seconds.\n      Set up samplelayers.Layer122 in 0.000 seconds.\n      Running:\n        test_x1 (sample1.sampletests.test122.TestA) (0.000 s)\n        test_y0 (sample1.sampletests.test122.TestA) (0.000 s)\n        test_z0 (sample1.sampletests.test122.TestA) (0.000 s)\n        test_x0 (sample1.sampletests.test122.TestB) (0.000 s)\n        test_y1 (sample1.sampletests.test122.TestB) (0.000 s)\n        test_z0 (sample1.sampletests.test122.TestB) (0.000 s)\n        test_1 (sample1.sampletests.test122.TestNotMuch) (0.000 s)\n        test_2 (sample1.sampletests.test122.TestNotMuch) (0.000 s)\n        test_3 (sample1.sampletests.test122.TestNotMuch) (0.000 s)\n        test_x0 (sample1.sampletests.test122) (0.001 s)\n        test_y0 (sample1.sampletests.test122) (0.001 s)\n        test_z1 (sample1.sampletests.test122) (0.001 s)\n        testrunner-ex/sample1/sampletests/../../sampletestsl.txt (0.001 s)\n        test_x1 (sampletests.test122.TestA) (0.000 s)\n        test_y0 (sampletests.test122.TestA) (0.000 s)\n        test_z0 (sampletests.test122.TestA) (0.000 s)\n        test_x0 (sampletests.test122.TestB) (0.000 s)\n        test_y1 (sampletests.test122.TestB) (0.000 s)\n        test_z0 (sampletests.test122.TestB) (0.000 s)\n        test_1 (sampletests.test122.TestNotMuch) (0.000 s)\n        test_2 (sampletests.test122.TestNotMuch) (0.000 s)\n        test_3 (sampletests.test122.TestNotMuch) (0.000 s)\n        test_x0 (sampletests.test122) (0.001 s)\n        test_y0 (sampletests.test122) (0.001 s)\n        test_z1 (sampletests.test122) (0.001 s)\n        testrunner-ex/sampletests/../sampletestsl.txt (0.001 s)\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.009 seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in 0.000 seconds.\n      Tear down samplelayers.Layer12 in 0.000 seconds.\n      Tear down samplelayers.Layer1 in 0.000 seconds.\n    False\n\nQuiet output\n------------\n\nThe --quiet (-q) option cancels all verbose options.  It's useful when\nthe default verbosity is non-zero:\n\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     '-v'\n    ...     ]\n    >>> sys.argv = 'test -q -u'.split()\n    >>> testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Ran 156 tests with 0 failures, 0 errors and 0 skipped in 0.034 seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nTest Selection\n==============\n\nWe've already seen that we can select tests by layer.  There are three\nother ways we can select tests.  We can select tests by package:\n\n    >>> import os.path, sys\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n\n    >>> sys.argv = 'test --layer 122 -ssample1 -vv'.split()\n    >>> from zope import testrunner\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running samplelayers.Layer122 tests:\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Set up samplelayers.Layer12 in 0.000 seconds.\n      Set up samplelayers.Layer122 in 0.000 seconds.\n      Running:\n        test_x1 (sample1.sampletests.test122.TestA)\n        test_y0 (sample1.sampletests.test122.TestA)\n        test_z0 (sample1.sampletests.test122.TestA)\n        test_x0 (sample1.sampletests.test122.TestB)\n        test_y1 (sample1.sampletests.test122.TestB)\n        test_z0 (sample1.sampletests.test122.TestB)\n        test_1 (sample1.sampletests.test122.TestNotMuch)\n        test_2 (sample1.sampletests.test122.TestNotMuch)\n        test_3 (sample1.sampletests.test122.TestNotMuch)\n        test_x0 (sample1.sampletests.test122)\n        test_y0 (sample1.sampletests.test122)\n        test_z1 (sample1.sampletests.test122)\n        testrunner-ex/sample1/sampletests/../../sampletestsl.txt\n      Ran 13 tests with 0 failures, 0 errors and 0 skipped in 0.005 seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in 0.000 seconds.\n      Tear down samplelayers.Layer12 in 0.000 seconds.\n      Tear down samplelayers.Layer1 in 0.000 seconds.\n    False\n\nYou can specify multiple packages:\n\n    >>> sys.argv = 'test -u  -vv -ssample1 -ssample2'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     test_x1 (sample1.sampletestsf.TestA)\n     test_y0 (sample1.sampletestsf.TestA)\n     test_z0 (sample1.sampletestsf.TestA)\n     test_x0 (sample1.sampletestsf.TestB)\n     test_y1 (sample1.sampletestsf.TestB)\n     test_z0 (sample1.sampletestsf.TestB)\n     test_1 (sample1.sampletestsf.TestNotMuch)\n     test_2 (sample1.sampletestsf.TestNotMuch)\n     test_3 (sample1.sampletestsf.TestNotMuch)\n     test_x0 (sample1.sampletestsf)\n     test_y0 (sample1.sampletestsf)\n     test_z1 (sample1.sampletestsf)\n     testrunner-ex/sample1/../sampletests.txt\n     test_x1 (sample1.sample11.sampletests.TestA)\n     test_y0 (sample1.sample11.sampletests.TestA)\n     test_z0 (sample1.sample11.sampletests.TestA)\n     test_x0 (sample1.sample11.sampletests.TestB)\n     test_y1 (sample1.sample11.sampletests.TestB)\n     test_z0 (sample1.sample11.sampletests.TestB)\n     test_1 (sample1.sample11.sampletests.TestNotMuch)\n     test_2 (sample1.sample11.sampletests.TestNotMuch)\n     test_3 (sample1.sample11.sampletests.TestNotMuch)\n     test_x0 (sample1.sample11.sampletests)\n     test_y0 (sample1.sample11.sampletests)\n     test_z1 (sample1.sample11.sampletests)\n     testrunner-ex/sample1/sample11/../../sampletests.txt\n     test_x1 (sample1.sample13.sampletests.TestA)\n     test_y0 (sample1.sample13.sampletests.TestA)\n     test_z0 (sample1.sample13.sampletests.TestA)\n     test_x0 (sample1.sample13.sampletests.TestB)\n     test_y1 (sample1.sample13.sampletests.TestB)\n     test_z0 (sample1.sample13.sampletests.TestB)\n     test_1 (sample1.sample13.sampletests.TestNotMuch)\n     test_2 (sample1.sample13.sampletests.TestNotMuch)\n     test_3 (sample1.sample13.sampletests.TestNotMuch)\n     test_x0 (sample1.sample13.sampletests)\n     test_y0 (sample1.sample13.sampletests)\n     test_z1 (sample1.sample13.sampletests)\n     testrunner-ex/sample1/sample13/../../sampletests.txt\n     test_x1 (sample1.sampletests.test1.TestA)\n     test_y0 (sample1.sampletests.test1.TestA)\n     test_z0 (sample1.sampletests.test1.TestA)\n     test_x0 (sample1.sampletests.test1.TestB)\n     test_y1 (sample1.sampletests.test1.TestB)\n     test_z0 (sample1.sampletests.test1.TestB)\n     test_1 (sample1.sampletests.test1.TestNotMuch)\n     test_2 (sample1.sampletests.test1.TestNotMuch)\n     test_3 (sample1.sampletests.test1.TestNotMuch)\n     test_x0 (sample1.sampletests.test1)\n     test_y0 (sample1.sampletests.test1)\n     test_z1 (sample1.sampletests.test1)\n     testrunner-ex/sample1/sampletests/../../sampletests.txt\n     test_x1 (sample1.sampletests.test_one.TestA)\n     test_y0 (sample1.sampletests.test_one.TestA)\n     test_z0 (sample1.sampletests.test_one.TestA)\n     test_x0 (sample1.sampletests.test_one.TestB)\n     test_y1 (sample1.sampletests.test_one.TestB)\n     test_z0 (sample1.sampletests.test_one.TestB)\n     test_1 (sample1.sampletests.test_one.TestNotMuch)\n     test_2 (sample1.sampletests.test_one.TestNotMuch)\n     test_3 (sample1.sampletests.test_one.TestNotMuch)\n     test_x0 (sample1.sampletests.test_one)\n     test_y0 (sample1.sampletests.test_one)\n     test_z1 (sample1.sampletests.test_one)\n     testrunner-ex/sample1/sampletests/../../sampletests.txt\n     test_x1 (sample2.sample21.sampletests.TestA)\n     test_y0 (sample2.sample21.sampletests.TestA)\n     test_z0 (sample2.sample21.sampletests.TestA)\n     test_x0 (sample2.sample21.sampletests.TestB)\n     test_y1 (sample2.sample21.sampletests.TestB)\n     test_z0 (sample2.sample21.sampletests.TestB)\n     test_1 (sample2.sample21.sampletests.TestNotMuch)\n     test_2 (sample2.sample21.sampletests.TestNotMuch)\n     test_3 (sample2.sample21.sampletests.TestNotMuch)\n     test_x0 (sample2.sample21.sampletests)\n     test_y0 (sample2.sample21.sampletests)\n     test_z1 (sample2.sample21.sampletests)\n     testrunner-ex/sample2/sample21/../../sampletests.txt\n     test_x1 (sample2.sampletests.test_1.TestA)\n     test_y0 (sample2.sampletests.test_1.TestA)\n     test_z0 (sample2.sampletests.test_1.TestA)\n     test_x0 (sample2.sampletests.test_1.TestB)\n     test_y1 (sample2.sampletests.test_1.TestB)\n     test_z0 (sample2.sampletests.test_1.TestB)\n     test_1 (sample2.sampletests.test_1.TestNotMuch)\n     test_2 (sample2.sampletests.test_1.TestNotMuch)\n     test_3 (sample2.sampletests.test_1.TestNotMuch)\n     test_x0 (sample2.sampletests.test_1)\n     test_y0 (sample2.sampletests.test_1)\n     test_z1 (sample2.sampletests.test_1)\n     testrunner-ex/sample2/sampletests/../../sampletests.txt\n     test_x1 (sample2.sampletests.testone.TestA)\n     test_y0 (sample2.sampletests.testone.TestA)\n     test_z0 (sample2.sampletests.testone.TestA)\n     test_x0 (sample2.sampletests.testone.TestB)\n     test_y1 (sample2.sampletests.testone.TestB)\n     test_z0 (sample2.sampletests.testone.TestB)\n     test_1 (sample2.sampletests.testone.TestNotMuch)\n     test_2 (sample2.sampletests.testone.TestNotMuch)\n     test_3 (sample2.sampletests.testone.TestNotMuch)\n     test_x0 (sample2.sampletests.testone)\n     test_y0 (sample2.sampletests.testone)\n     test_z1 (sample2.sampletests.testone)\n     testrunner-ex/sample2/sampletests/../../sampletests.txt\n      Ran 104 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nYou can specify directory names instead of packages (useful for\ntab-completion):\n\n    >>> subdir = os.path.join(directory_with_tests, 'sample1')\n    >>> sys.argv = ['test', '--layer', '122', '-s', subdir, '-vv']\n    >>> from zope import testrunner\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running samplelayers.Layer122 tests:\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Set up samplelayers.Layer12 in 0.000 seconds.\n      Set up samplelayers.Layer122 in 0.000 seconds.\n      Running:\n        test_x1 (sample1.sampletests.test122.TestA)\n        test_y0 (sample1.sampletests.test122.TestA)\n        test_z0 (sample1.sampletests.test122.TestA)\n        test_x0 (sample1.sampletests.test122.TestB)\n        test_y1 (sample1.sampletests.test122.TestB)\n        test_z0 (sample1.sampletests.test122.TestB)\n        test_1 (sample1.sampletests.test122.TestNotMuch)\n        test_2 (sample1.sampletests.test122.TestNotMuch)\n        test_3 (sample1.sampletests.test122.TestNotMuch)\n        test_x0 (sample1.sampletests.test122)\n        test_y0 (sample1.sampletests.test122)\n        test_z1 (sample1.sampletests.test122)\n        testrunner-ex/sample1/sampletests/../../sampletestsl.txt\n      Ran 13 tests with 0 failures, 0 errors and 0 skipped in 0.005 seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in 0.000 seconds.\n      Tear down samplelayers.Layer12 in 0.000 seconds.\n      Tear down samplelayers.Layer1 in 0.000 seconds.\n    False\n\nWe can select by test module name using the --module (-m) option:\n\n    >>> sys.argv = 'test -u  -vv -ssample1 -m_one -mtest1'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     test_x1 (sample1.sampletests.test1.TestA)\n     test_y0 (sample1.sampletests.test1.TestA)\n     test_z0 (sample1.sampletests.test1.TestA)\n     test_x0 (sample1.sampletests.test1.TestB)\n     test_y1 (sample1.sampletests.test1.TestB)\n     test_z0 (sample1.sampletests.test1.TestB)\n     test_1 (sample1.sampletests.test1.TestNotMuch)\n     test_2 (sample1.sampletests.test1.TestNotMuch)\n     test_3 (sample1.sampletests.test1.TestNotMuch)\n     test_x0 (sample1.sampletests.test1)\n     test_y0 (sample1.sampletests.test1)\n     test_z1 (sample1.sampletests.test1)\n     testrunner-ex/sample1/sampletests/../../sampletests.txt\n     test_x1 (sample1.sampletests.test_one.TestA)\n     test_y0 (sample1.sampletests.test_one.TestA)\n     test_z0 (sample1.sampletests.test_one.TestA)\n     test_x0 (sample1.sampletests.test_one.TestB)\n     test_y1 (sample1.sampletests.test_one.TestB)\n     test_z0 (sample1.sampletests.test_one.TestB)\n     test_1 (sample1.sampletests.test_one.TestNotMuch)\n     test_2 (sample1.sampletests.test_one.TestNotMuch)\n     test_3 (sample1.sampletests.test_one.TestNotMuch)\n     test_x0 (sample1.sampletests.test_one)\n     test_y0 (sample1.sampletests.test_one)\n     test_z1 (sample1.sampletests.test_one)\n     testrunner-ex/sample1/sampletests/../../sampletests.txt\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\nand by test within the module using the --test (-t) option:\n\n    >>> sys.argv = 'test -u  -vv -ssample1 -m_one -mtest1 -tx0 -ty0'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     test_y0 (sample1.sampletests.test1.TestA)\n     test_x0 (sample1.sampletests.test1.TestB)\n     test_x0 (sample1.sampletests.test1)\n     test_y0 (sample1.sampletests.test1)\n     test_y0 (sample1.sampletests.test_one.TestA)\n     test_x0 (sample1.sampletests.test_one.TestB)\n     test_x0 (sample1.sampletests.test_one)\n     test_y0 (sample1.sampletests.test_one)\n      Ran 8 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\n    >>> sys.argv = 'test -u  -vv -ssample1 -ttxt'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     testrunner-ex/sample1/../sampletests.txt\n     testrunner-ex/sample1/sample11/../../sampletests.txt\n     testrunner-ex/sample1/sample13/../../sampletests.txt\n     testrunner-ex/sample1/sampletests/../../sampletests.txt\n     testrunner-ex/sample1/sampletests/../../sampletests.txt\n      Ran 5 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\nThe --module and --test options take regular expressions.  If the\nregular expressions specified begin with '!', then tests that don't\nmatch the regular expression are selected:\n\n    >>> sys.argv = 'test -u  -vv -ssample1 -m!sample1[.]sample1'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     test_x1 (sample1.sampletestsf.TestA)\n     test_y0 (sample1.sampletestsf.TestA)\n     test_z0 (sample1.sampletestsf.TestA)\n     test_x0 (sample1.sampletestsf.TestB)\n     test_y1 (sample1.sampletestsf.TestB)\n     test_z0 (sample1.sampletestsf.TestB)\n     test_1 (sample1.sampletestsf.TestNotMuch)\n     test_2 (sample1.sampletestsf.TestNotMuch)\n     test_3 (sample1.sampletestsf.TestNotMuch)\n     test_x0 (sample1.sampletestsf)\n     test_y0 (sample1.sampletestsf)\n     test_z1 (sample1.sampletestsf)\n     testrunner-ex/sample1/../sampletests.txt\n     test_x1 (sample1.sampletests.test1.TestA)\n     test_y0 (sample1.sampletests.test1.TestA)\n     test_z0 (sample1.sampletests.test1.TestA)\n     test_x0 (sample1.sampletests.test1.TestB)\n     test_y1 (sample1.sampletests.test1.TestB)\n     test_z0 (sample1.sampletests.test1.TestB)\n     test_1 (sample1.sampletests.test1.TestNotMuch)\n     test_2 (sample1.sampletests.test1.TestNotMuch)\n     test_3 (sample1.sampletests.test1.TestNotMuch)\n     test_x0 (sample1.sampletests.test1)\n     test_y0 (sample1.sampletests.test1)\n     test_z1 (sample1.sampletests.test1)\n     testrunner-ex/sample1/sampletests/../../sampletests.txt\n     test_x1 (sample1.sampletests.test_one.TestA)\n     test_y0 (sample1.sampletests.test_one.TestA)\n     test_z0 (sample1.sampletests.test_one.TestA)\n     test_x0 (sample1.sampletests.test_one.TestB)\n     test_y1 (sample1.sampletests.test_one.TestB)\n     test_z0 (sample1.sampletests.test_one.TestB)\n     test_1 (sample1.sampletests.test_one.TestNotMuch)\n     test_2 (sample1.sampletests.test_one.TestNotMuch)\n     test_3 (sample1.sampletests.test_one.TestNotMuch)\n     test_x0 (sample1.sampletests.test_one)\n     test_y0 (sample1.sampletests.test_one)\n     test_z1 (sample1.sampletests.test_one)\n     testrunner-ex/sample1/sampletests/../../sampletests.txt\n      Ran 39 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\nModule and test filters can also be given as positional arguments:\n\n\n    >>> sys.argv = 'test -u  -vv -ssample1 !sample1[.]sample1'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     test_x1 (sample1.sampletestsf.TestA)\n     test_y0 (sample1.sampletestsf.TestA)\n     test_z0 (sample1.sampletestsf.TestA)\n     test_x0 (sample1.sampletestsf.TestB)\n     test_y1 (sample1.sampletestsf.TestB)\n     test_z0 (sample1.sampletestsf.TestB)\n     test_1 (sample1.sampletestsf.TestNotMuch)\n     test_2 (sample1.sampletestsf.TestNotMuch)\n     test_3 (sample1.sampletestsf.TestNotMuch)\n     test_x0 (sample1.sampletestsf)\n     test_y0 (sample1.sampletestsf)\n     test_z1 (sample1.sampletestsf)\n     testrunner-ex/sample1/../sampletests.txt\n     test_x1 (sample1.sampletests.test1.TestA)\n     test_y0 (sample1.sampletests.test1.TestA)\n     test_z0 (sample1.sampletests.test1.TestA)\n     test_x0 (sample1.sampletests.test1.TestB)\n     test_y1 (sample1.sampletests.test1.TestB)\n     test_z0 (sample1.sampletests.test1.TestB)\n     test_1 (sample1.sampletests.test1.TestNotMuch)\n     test_2 (sample1.sampletests.test1.TestNotMuch)\n     test_3 (sample1.sampletests.test1.TestNotMuch)\n     test_x0 (sample1.sampletests.test1)\n     test_y0 (sample1.sampletests.test1)\n     test_z1 (sample1.sampletests.test1)\n     testrunner-ex/sample1/sampletests/../../sampletests.txt\n     test_x1 (sample1.sampletests.test_one.TestA)\n     test_y0 (sample1.sampletests.test_one.TestA)\n     test_z0 (sample1.sampletests.test_one.TestA)\n     test_x0 (sample1.sampletests.test_one.TestB)\n     test_y1 (sample1.sampletests.test_one.TestB)\n     test_z0 (sample1.sampletests.test_one.TestB)\n     test_1 (sample1.sampletests.test_one.TestNotMuch)\n     test_2 (sample1.sampletests.test_one.TestNotMuch)\n     test_3 (sample1.sampletests.test_one.TestNotMuch)\n     test_x0 (sample1.sampletests.test_one)\n     test_y0 (sample1.sampletests.test_one)\n     test_z1 (sample1.sampletests.test_one)\n     testrunner-ex/sample1/sampletests/../../sampletests.txt\n      Ran 39 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\n    >>> sys.argv = 'test -u  -vv -ssample1 . txt'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     testrunner-ex/sample1/../sampletests.txt\n     testrunner-ex/sample1/sample11/../../sampletests.txt\n     testrunner-ex/sample1/sample13/../../sampletests.txt\n     testrunner-ex/sample1/sampletests/../../sampletests.txt\n     testrunner-ex/sample1/sampletests/../../sampletests.txt\n      Ran 5 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nSometimes, There are tests that you don't want to run by default.\nFor example, you might have tests that take a long time.  Tests can\nhave a level attribute.  If no level is specified, a level of 1 is\nassumed and, by default, only tests at level one are run.  to run\ntests at a higher level, use the --at-level (-a) option to specify a higher\nlevel.  For example, with the following options:\n\n\n    >>> sys.argv = 'test -u  -vv -t test_y1 -t test_y0'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     test_y0 (sampletestsf.TestA)\n     test_y1 (sampletestsf.TestB)\n     test_y0 (sampletestsf)\n     test_y0 (sample1.sampletestsf.TestA)\n     test_y1 (sample1.sampletestsf.TestB)\n     test_y0 (sample1.sampletestsf)\n     test_y0 (sample1.sample11.sampletests.TestA)\n     test_y1 (sample1.sample11.sampletests.TestB)\n     test_y0 (sample1.sample11.sampletests)\n     test_y0 (sample1.sample13.sampletests.TestA)\n     test_y1 (sample1.sample13.sampletests.TestB)\n     test_y0 (sample1.sample13.sampletests)\n     test_y0 (sample1.sampletests.test1.TestA)\n     test_y1 (sample1.sampletests.test1.TestB)\n     test_y0 (sample1.sampletests.test1)\n     test_y0 (sample1.sampletests.test_one.TestA)\n     test_y1 (sample1.sampletests.test_one.TestB)\n     test_y0 (sample1.sampletests.test_one)\n     test_y0 (sample2.sample21.sampletests.TestA)\n     test_y1 (sample2.sample21.sampletests.TestB)\n     test_y0 (sample2.sample21.sampletests)\n     test_y0 (sample2.sampletests.test_1.TestA)\n     test_y1 (sample2.sampletests.test_1.TestB)\n     test_y0 (sample2.sampletests.test_1)\n     test_y0 (sample2.sampletests.testone.TestA)\n     test_y1 (sample2.sampletests.testone.TestB)\n     test_y0 (sample2.sampletests.testone)\n     test_y0 (sample3.sampletests.TestA)\n     test_y1 (sample3.sampletests.TestB)\n     test_y0 (sample3.sampletests)\n     test_y0 (sampletests.test1.TestA)\n     test_y1 (sampletests.test1.TestB)\n     test_y0 (sampletests.test1)\n     test_y0 (sampletests.test_one.TestA)\n     test_y1 (sampletests.test_one.TestB)\n     test_y0 (sampletests.test_one)\n      Ran 36 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\nWe get run 36 tests.  If we specify a level of 2, we get some\nadditional tests:\n\n    >>> sys.argv = 'test -u  -vv -a 2 -t test_y1 -t test_y0'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 2\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     test_y0 (sampletestsf.TestA)\n     test_y0 (sampletestsf.TestA2)\n     test_y1 (sampletestsf.TestB)\n     test_y0 (sampletestsf)\n     test_y0 (sample1.sampletestsf.TestA)\n     test_y1 (sample1.sampletestsf.TestB)\n     test_y0 (sample1.sampletestsf)\n     test_y0 (sample1.sample11.sampletests.TestA)\n     test_y1 (sample1.sample11.sampletests.TestB)\n     test_y1 (sample1.sample11.sampletests.TestB2)\n     test_y0 (sample1.sample11.sampletests)\n     test_y0 (sample1.sample13.sampletests.TestA)\n     test_y1 (sample1.sample13.sampletests.TestB)\n     test_y0 (sample1.sample13.sampletests)\n     test_y0 (sample1.sampletests.test1.TestA)\n     test_y1 (sample1.sampletests.test1.TestB)\n     test_y0 (sample1.sampletests.test1)\n     test_y0 (sample1.sampletests.test_one.TestA)\n     test_y1 (sample1.sampletests.test_one.TestB)\n     test_y0 (sample1.sampletests.test_one)\n     test_y0 (sample2.sample21.sampletests.TestA)\n     test_y1 (sample2.sample21.sampletests.TestB)\n     test_y0 (sample2.sample21.sampletests)\n     test_y0 (sample2.sampletests.test_1.TestA)\n     test_y1 (sample2.sampletests.test_1.TestB)\n     test_y0 (sample2.sampletests.test_1)\n     test_y0 (sample2.sampletests.testone.TestA)\n     test_y1 (sample2.sampletests.testone.TestB)\n     test_y0 (sample2.sampletests.testone)\n     test_y0 (sample3.sampletests.TestA)\n     test_y1 (sample3.sampletests.TestB)\n     test_y0 (sample3.sampletests)\n     test_y0 (sampletests.test1.TestA)\n     test_y1 (sampletests.test1.TestB)\n     test_y0 (sampletests.test1)\n     test_y0 (sampletests.test_one.TestA)\n     test_y1 (sampletests.test_one.TestB)\n     test_y0 (sampletests.test_one)\n      Ran 38 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\nWe can use the --all option to run tests at all levels:\n\n    >>> sys.argv = 'test -u  -vv --all -t test_y1 -t test_y0'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at all levels\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     test_y0 (sampletestsf.TestA)\n     test_y0 (sampletestsf.TestA2)\n     test_y1 (sampletestsf.TestB)\n     test_y0 (sampletestsf)\n     test_y0 (sample1.sampletestsf.TestA)\n     test_y1 (sample1.sampletestsf.TestB)\n     test_y0 (sample1.sampletestsf)\n     test_y0 (sample1.sample11.sampletests.TestA)\n     test_y0 (sample1.sample11.sampletests.TestA3)\n     test_y1 (sample1.sample11.sampletests.TestB)\n     test_y1 (sample1.sample11.sampletests.TestB2)\n     test_y0 (sample1.sample11.sampletests)\n     test_y0 (sample1.sample13.sampletests.TestA)\n     test_y1 (sample1.sample13.sampletests.TestB)\n     test_y0 (sample1.sample13.sampletests)\n     test_y0 (sample1.sampletests.test1.TestA)\n     test_y1 (sample1.sampletests.test1.TestB)\n     test_y0 (sample1.sampletests.test1)\n     test_y0 (sample1.sampletests.test_one.TestA)\n     test_y1 (sample1.sampletests.test_one.TestB)\n     test_y0 (sample1.sampletests.test_one)\n     test_y0 (sample2.sample21.sampletests.TestA)\n     test_y1 (sample2.sample21.sampletests.TestB)\n     test_y0 (sample2.sample21.sampletests)\n     test_y0 (sample2.sampletests.test_1.TestA)\n     test_y1 (sample2.sampletests.test_1.TestB)\n     test_y0 (sample2.sampletests.test_1)\n     test_y0 (sample2.sampletests.testone.TestA)\n     test_y1 (sample2.sampletests.testone.TestB)\n     test_y0 (sample2.sampletests.testone)\n     test_y0 (sample3.sampletests.TestA)\n     test_y1 (sample3.sampletests.TestB)\n     test_y0 (sample3.sampletests)\n     test_y0 (sampletests.test1.TestA)\n     test_y1 (sampletests.test1.TestB)\n     test_y0 (sampletests.test1)\n     test_y0 (sampletests.test_one.TestA)\n     test_y1 (sampletests.test_one.TestB)\n     test_y0 (sampletests.test_one)\n      Ran 39 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\nListing Selected Tests\n----------------------\n\nWhen you're trying to figure out why the test you want is not matched by the\npattern you specified, it is convenient to see which tests match your\nspecifications.\n\n    >>> sys.argv = 'test --all -m sample1 -t test_y0 --list-tests'.split()\n    >>> testrunner.run_internal(defaults)\n    Listing zope.testrunner.layer.UnitTests tests:\n      test_y0 (sample1.sampletestsf.TestA)\n      test_y0 (sample1.sampletestsf)\n      test_y0 (sample1.sample11.sampletests.TestA)\n      test_y0 (sample1.sample11.sampletests.TestA3)\n      test_y0 (sample1.sample11.sampletests)\n      test_y0 (sample1.sample13.sampletests.TestA)\n      test_y0 (sample1.sample13.sampletests)\n      test_y0 (sample1.sampletests.test1.TestA)\n      test_y0 (sample1.sampletests.test1)\n      test_y0 (sample1.sampletests.test_one.TestA)\n      test_y0 (sample1.sampletests.test_one)\n    Listing samplelayers.Layer11 tests:\n      test_y0 (sample1.sampletests.test11.TestA)\n      test_y0 (sample1.sampletests.test11)\n    Listing samplelayers.Layer111 tests:\n      test_y0 (sample1.sampletests.test111.TestA)\n      test_y0 (sample1.sampletests.test111)\n    Listing samplelayers.Layer112 tests:\n      test_y0 (sample1.sampletests.test112.TestA)\n      test_y0 (sample1.sampletests.test112)\n    Listing samplelayers.Layer12 tests:\n      test_y0 (sample1.sampletests.test12.TestA)\n      test_y0 (sample1.sampletests.test12)\n    Listing samplelayers.Layer121 tests:\n      test_y0 (sample1.sampletests.test121.TestA)\n      test_y0 (sample1.sampletests.test121)\n    Listing samplelayers.Layer122 tests:\n      test_y0 (sample1.sampletests.test122.TestA)\n      test_y0 (sample1.sampletests.test122)\n    False\n\nTest Progress\n=============\n\nIf the --progress (-p) option is used, progress information is printed and\na carriage return (rather than a new-line) is printed between\ndetail lines.  Let's look at the effect of --progress (-p) at different\nlevels of verbosity.\n\n    >>> import os.path, sys\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n\n    >>> sys.argv = 'test --layer 122 -p'.split()\n    >>> from zope import testrunner\n    >>> testrunner.run_internal(defaults)\n    Running samplelayers.Layer122 tests:\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Set up samplelayers.Layer12 in N.NNN seconds.\n      Set up samplelayers.Layer122 in N.NNN seconds.\n      Running:\n        1/26 (3.8%)##r##\n                   ##r##\n        2/26 (7.7%)##r##\n                   ##r##\n        3/26 (11.5%)##r##\n                    ##r##\n        4/26 (15.4%)##r##\n                    ##r##\n        5/26 (19.2%)##r##\n                    ##r##\n        6/26 (23.1%)##r##\n                    ##r##\n        7/26 (26.9%)##r##\n                    ##r##\n        8/26 (30.8%)##r##\n                    ##r##\n        9/26 (34.6%)##r##\n                    ##r##\n        10/26 (38.5%)##r##\n                     ##r##\n        11/26 (42.3%)##r##\n                     ##r##\n        12/26 (46.2%)##r##\n                     ##r##\n        13/26 (50.0%)##r##\n                     ##r##\n        14/26 (53.8%)##r##\n                     ##r##\n        15/26 (57.7%)##r##\n                     ##r##\n        16/26 (61.5%)##r##\n                     ##r##\n        17/26 (65.4%)##r##\n                     ##r##\n        18/26 (69.2%)##r##\n                     ##r##\n        19/26 (73.1%)##r##\n                     ##r##\n        20/26 (76.9%)##r##\n                     ##r##\n        21/26 (80.8%)##r##\n                     ##r##\n        22/26 (84.6%)##r##\n                     ##r##\n        23/26 (88.5%)##r##\n                     ##r##\n        24/26 (92.3%)##r##\n                     ##r##\n        25/26 (96.2%)##r##\n                     ##r##\n        26/26 (100.0%)##r##\n                      ##r##\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in N.NNN seconds.\n      Tear down samplelayers.Layer12 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    False\n\n\n(Note that, in the examples above and below, we show \"##r##\" followed by\nnew lines where carriage returns would appear in actual output.)\n\nUsing a single level of verbosity causes test descriptions to be\noutput, but only if they fit in the terminal width.  The default\nwidth, when the terminal width can't be determined, is 80:\n\n    >>> sys.argv = 'test --layer 122 -pv'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running samplelayers.Layer122 tests:\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Set up samplelayers.Layer12 in N.NNN seconds.\n      Set up samplelayers.Layer122 in N.NNN seconds.\n      Running:\n        1/26 (3.8%) test_x1 (sample1.sampletests.test122.TestA)##r##\n                                                               ##r##\n        2/26 (7.7%) test_y0 (sample1.sampletests.test122.TestA)##r##\n                                                               ##r##\n        3/26 (11.5%) test_z0 (sample1.sampletests.test122.TestA)##r##\n                                                                ##r##\n        4/26 (15.4%) test_x0 (sample1.sampletests.test122.TestB)##r##\n                                                                ##r##\n        5/26 (19.2%) test_y1 (sample1.sampletests.test122.TestB)##r##\n                                                                ##r##\n        6/26 (23.1%) test_z0 (sample1.sampletests.test122.TestB)##r##\n                                                                ##r##\n        7/26 (26.9%) test_1 (sample1.sampletests.test122.TestNotMuch)##r##\n                                                                     ##r##\n        8/26 (30.8%) test_2 (sample1.sampletests.test122.TestNotMuch)##r##\n                                                                     ##r##\n        9/26 (34.6%) test_3 (sample1.sampletests.test122.TestNotMuch)##r##\n                                                                     ##r##\n        10/26 (38.5%) test_x0 (sample1.sampletests.test122)##r##\n                                                           ##r##\n        11/26 (42.3%) test_y0 (sample1.sampletests.test122)##r##\n                                                           ##r##\n        12/26 (46.2%) test_z1 (sample1.sampletests.test122)##r##\n                                                           ##r##\n     testrunner-ex/sample1/sampletests/../../sampletestsl.txt##r##\n                                                                                   ##r##\n        14/26 (53.8%) test_x1 (sampletests.test122.TestA)##r##\n                                                         ##r##\n        15/26 (57.7%) test_y0 (sampletests.test122.TestA)##r##\n                                                         ##r##\n        16/26 (61.5%) test_z0 (sampletests.test122.TestA)##r##\n                                                         ##r##\n        17/26 (65.4%) test_x0 (sampletests.test122.TestB)##r##\n                                                         ##r##\n        18/26 (69.2%) test_y1 (sampletests.test122.TestB)##r##\n                                                         ##r##\n        19/26 (73.1%) test_z0 (sampletests.test122.TestB)##r##\n                                                         ##r##\n        20/26 (76.9%) test_1 (sampletests.test122.TestNotMuch)##r##\n                                                              ##r##\n        21/26 (80.8%) test_2 (sampletests.test122.TestNotMuch)##r##\n                                                              ##r##\n        22/26 (84.6%) test_3 (sampletests.test122.TestNotMuch)##r##\n                                                              ##r##\n        23/26 (88.5%) test_x0 (sampletests.test122)##r##\n                                                   ##r##\n        24/26 (92.3%) test_y0 (sampletests.test122)##r##\n                                                   ##r##\n        25/26 (96.2%) test_z1 (sampletests.test122)##r##\n                                                   ##r##\n     testrunner-ex/sampletests/../sampletestsl.txt##r##\n                                                                                   ##r##\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in N.NNN seconds.\n      Tear down samplelayers.Layer12 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    False\n\n\nThe terminal width is determined using the curses module.  To see\nthat, we'll provide a fake curses module:\n\n    >>> class FakeCurses:\n    ...     class error(Exception):\n    ...         pass\n    ...     def setupterm(self):\n    ...         pass\n    ...     def tigetnum(self, ignored):\n    ...         return 60\n    >>> old_curses = sys.modules.get('curses')\n    >>> sys.modules['curses'] = FakeCurses()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running samplelayers.Layer122 tests:\n      Set up samplelayers.Layer1 in N.NNN seconds.\n      Set up samplelayers.Layer12 in N.NNN seconds.\n      Set up samplelayers.Layer122 in N.NNN seconds.\n      Running:\n        1/26 (3.8%) test_x1 (sample1.sampletests.test122.TestA)##r##\n                                                               ##r##\n        2/26 (7.7%) test_y0 (sample1.sampletests.test122.TestA)##r##\n                                                               ##r##\n        3/26 (11.5%) test_z0 (...le1.sampletests.test122.TestA)##r##\n                                                               ##r##\n        4/26 (15.4%) test_x0 (...le1.sampletests.test122.TestB)##r##\n                                                               ##r##\n        5/26 (19.2%) test_y1 (...le1.sampletests.test122.TestB)##r##\n                                                               ##r##\n        6/26 (23.1%) test_z0 (...le1.sampletests.test122.TestB)##r##\n                                                               ##r##\n        7/26 (26.9%) test_1 (...ampletests.test122.TestNotMuch)##r##\n                                                               ##r##\n        8/26 (30.8%) test_2 (...ampletests.test122.TestNotMuch)##r##\n                                                               ##r##\n        9/26 (34.6%) test_3 (...ampletests.test122.TestNotMuch)##r##\n                                                               ##r##\n        10/26 (38.5%) test_x0 (sample1.sampletests.test122)##r##\n                                                           ##r##\n        11/26 (42.3%) test_y0 (sample1.sampletests.test122)##r##\n                                                           ##r##\n        12/26 (46.2%) test_z1 (sample1.sampletests.test122)##r##\n                                                           ##r##\n        13/26 (50.0%) ... e1/sampletests/../../sampletestsl.txt##r##\n                                                               ##r##\n        14/26 (53.8%) test_x1 (sampletests.test122.TestA)##r##\n                                                         ##r##\n        15/26 (57.7%) test_y0 (sampletests.test122.TestA)##r##\n                                                         ##r##\n        16/26 (61.5%) test_z0 (sampletests.test122.TestA)##r##\n                                                         ##r##\n        17/26 (65.4%) test_x0 (sampletests.test122.TestB)##r##\n                                                         ##r##\n        18/26 (69.2%) test_y1 (sampletests.test122.TestB)##r##\n                                                         ##r##\n        19/26 (73.1%) test_z0 (sampletests.test122.TestB)##r##\n                                                         ##r##\n        20/26 (76.9%) test_1 (sampletests.test122.TestNotMuch)##r##\n                                                              ##r##\n        21/26 (80.8%) test_2 (sampletests.test122.TestNotMuch)##r##\n                                                              ##r##\n        22/26 (84.6%) test_3 (sampletests.test122.TestNotMuch)##r##\n                                                              ##r##\n        23/26 (88.5%) test_x0 (sampletests.test122)##r##\n                                                   ##r##\n        24/26 (92.3%) test_y0 (sampletests.test122)##r##\n                                                   ##r##\n        25/26 (96.2%) test_z1 (sampletests.test122)##r##\n                                                   ##r##\n        26/26 (100.0%) ... r-ex/sampletests/../sampletestsl.txt##r##\n                                                               ##r##\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in N.NNN seconds.\n      Tear down samplelayers.Layer12 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    False\n\n    >>> sys.modules['curses'] = old_curses\n\nIf a second or third level of verbosity are added, we get additional\ninformation.\n\n    >>> sys.argv = 'test --layer 122 -pvv -t !txt'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running samplelayers.Layer122 tests:\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Set up samplelayers.Layer12 in 0.000 seconds.\n      Set up samplelayers.Layer122 in 0.000 seconds.\n      Running:\n        1/24 (4.2%) test_x1 (sample1.sampletests.test122.TestA)##r##\n                                                              ##r##\n        2/24 (8.3%) test_y0 (sample1.sampletests.test122.TestA)##r##\n                                                              ##r##\n        3/24 (12.5%) test_z0 (sample1.sampletests.test122.TestA)##r##\n                                                               ##r##\n        4/24 (16.7%) test_x0 (sample1.sampletests.test122.TestB)##r##\n                                                               ##r##\n        5/24 (20.8%) test_y1 (sample1.sampletests.test122.TestB)##r##\n                                                               ##r##\n        6/24 (25.0%) test_z0 (sample1.sampletests.test122.TestB)##r##\n                                                               ##r##\n        7/24 (29.2%) test_1 (sample1.sampletests.test122.TestNotMuch)##r##\n                                                                    ##r##\n        8/24 (33.3%) test_2 (sample1.sampletests.test122.TestNotMuch)##r##\n                                                                    ##r##\n        9/24 (37.5%) test_3 (sample1.sampletests.test122.TestNotMuch)##r##\n                                                                    ##r##\n        10/24 (41.7%) test_x0 (sample1.sampletests.test122)##r##\n                                                          ##r##\n        11/24 (45.8%) test_y0 (sample1.sampletests.test122)##r##\n                                                          ##r##\n        12/24 (50.0%) test_z1 (sample1.sampletests.test122)##r##\n                                                          ##r##\n        13/24 (54.2%) test_x1 (sampletests.test122.TestA)##r##\n                                                        ##r##\n        14/24 (58.3%) test_y0 (sampletests.test122.TestA)##r##\n                                                        ##r##\n        15/24 (62.5%) test_z0 (sampletests.test122.TestA)##r##\n                                                        ##r##\n        16/24 (66.7%) test_x0 (sampletests.test122.TestB)##r##\n                                                        ##r##\n        17/24 (70.8%) test_y1 (sampletests.test122.TestB)##r##\n                                                        ##r##\n        18/24 (75.0%) test_z0 (sampletests.test122.TestB)##r##\n                                                        ##r##\n        19/24 (79.2%) test_1 (sampletests.test122.TestNotMuch)##r##\n                                                             ##r##\n        20/24 (83.3%) test_2 (sampletests.test122.TestNotMuch)##r##\n                                                             ##r##\n        21/24 (87.5%) test_3 (sampletests.test122.TestNotMuch)##r##\n                                                             ##r##\n        22/24 (91.7%) test_x0 (sampletests.test122)##r##\n                                                  ##r##\n        23/24 (95.8%) test_y0 (sampletests.test122)##r##\n                                                  ##r##\n        24/24 (100.0%) test_z1 (sampletests.test122)##r##\n                                                   ##r##\n      Ran 24 tests with 0 failures, 0 errors and 0 skipped in 0.006 seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in 0.000 seconds.\n      Tear down samplelayers.Layer12 in 0.000 seconds.\n      Tear down samplelayers.Layer1 in 0.000 seconds.\n    False\n\nNote that, in this example, we used a test-selection pattern starting\nwith '!' to exclude tests containing the string \"txt\".\n\n    >>> sys.argv = 'test --layer 122 -pvvv -t!(txt|NotMuch)'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running samplelayers.Layer122 tests:\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Set up samplelayers.Layer12 in 0.000 seconds.\n      Set up samplelayers.Layer122 in 0.000 seconds.\n      Running:\n        1/18 (5.6%) test_x1 (sample1.sampletests.test122.TestA) (0.000 s)##r##\n                                                                          ##r##\n        2/18 (11.1%) test_y0 (sample1.sampletests.test122.TestA) (0.000 s)##r##\n                                                                           ##r##\n        3/18 (16.7%) test_z0 (sample1.sampletests.test122.TestA) (0.000 s)##r##\n                                                                           ##r##\n        4/18 (22.2%) test_x0 (sample1.sampletests.test122.TestB) (0.000 s)##r##\n                                                                           ##r##\n        5/18 (27.8%) test_y1 (sample1.sampletests.test122.TestB) (0.000 s)##r##\n                                                                           ##r##\n        6/18 (33.3%) test_z0 (sample1.sampletests.test122.TestB) (0.000 s)##r##\n                                                                           ##r##\n        7/18 (38.9%) test_x0 (sample1.sampletests.test122) (0.001 s)##r##\n                                                                     ##r##\n        8/18 (44.4%) test_y0 (sample1.sampletests.test122) (0.001 s)##r##\n                                                                     ##r##\n        9/18 (50.0%) test_z1 (sample1.sampletests.test122) (0.001 s)##r##\n                                                                     ##r##\n        10/18 (55.6%) test_x1 (sampletests.test122.TestA) (0.000 s)##r##\n                                                                    ##r##\n        11/18 (61.1%) test_y0 (sampletests.test122.TestA) (0.000 s)##r##\n                                                                    ##r##\n        12/18 (66.7%) test_z0 (sampletests.test122.TestA) (0.000 s)##r##\n                                                                    ##r##\n        13/18 (72.2%) test_x0 (sampletests.test122.TestB) (0.000 s)##r##\n                                                                    ##r##\n        14/18 (77.8%) test_y1 (sampletests.test122.TestB) (0.000 s)##r##\n                                                                    ##r##\n        15/18 (83.3%) test_z0 (sampletests.test122.TestB) (0.000 s)##r##\n                                                                    ##r##\n        16/18 (88.9%) test_x0 (sampletests.test122) (0.001 s)##r##\n                                                              ##r##\n        17/18 (94.4%) test_y0 (sampletests.test122) (0.001 s)##r##\n                                                              ##r##\n        18/18 (100.0%) test_z1 (sampletests.test122) (0.001 s)##r##\n                                                               ##r##\n      Ran 18 tests with 0 failures, 0 errors and 0 skipped in 0.006 seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in 0.000 seconds.\n      Tear down samplelayers.Layer12 in 0.000 seconds.\n      Tear down samplelayers.Layer1 in 0.000 seconds.\n    False\n\nIn this example, we also excluded tests with \"NotMuch\" in their names.\n\nUnfortunately, the time data above doesn't buy us much because, in\npractice, the line is cleared before there is time to see the\ntimes. :/\n\n\nAutodetecting progress\n----------------------\n\nThe --auto-progress option will determine if stdout is a terminal, and only enable\nprogress output if so.\n\nLet's pretend we have a terminal\n\n    >>> class Terminal(object):\n    ...     def __init__(self, stream):\n    ...         self._stream = stream\n    ...     def __getattr__(self, attr):\n    ...         return getattr(self._stream, attr)\n    ...     def isatty(self):\n    ...         return True\n    >>> real_stdout = sys.stdout\n    >>> sys.stdout = Terminal(sys.stdout)\n\n    >>> sys.argv = 'test -u -t test_one.TestNotMuch --auto-progress'.split()\n    >>> testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n        1/6 (16.7%)##r##\n                   ##r##\n        2/6 (33.3%)##r##\n                   ##r##\n        3/6 (50.0%)##r##\n                   ##r##\n        4/6 (66.7%)##r##\n                   ##r##\n        5/6 (83.3%)##r##\n                   ##r##\n        6/6 (100.0%)##r##\n                    ##r##\n      Ran 6 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\nLet's stop pretending\n\n    >>> sys.stdout = real_stdout\n\n    >>> sys.argv = 'test -u -t test_one.TestNotMuch --auto-progress'.split()\n    >>> testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Ran 6 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\nDisabling progress indication\n-----------------------------\n\nIf -p or --progress have been previously provided on the command line (perhaps by a\nwrapper script) but you do not desire progress indication, you can switch it off with\n--no-progress:\n\n    >>> sys.argv = 'test -u -t test_one.TestNotMuch -p --no-progress'.split()\n    >>> testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Ran 6 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nDebugging\n=========\n\nThe testrunner module supports post-mortem debugging and debugging\nusing `pdb.set_trace`.  Let's look first at using `pdb.set_trace`.\nTo demonstrate this, we'll provide input via helper Input objects:\n\n    >>> class Input:\n    ...     def __init__(self, src):\n    ...         self.lines = src.split('\\n')\n    ...     def readline(self):\n    ...         line = self.lines.pop(0)\n    ...         print(line)\n    ...         return line+'\\n'\n\nIf a test or code called by a test calls pdb.set_trace, then the\nrunner will enter pdb at that point:\n\n    >>> import os.path, sys\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> from zope import testrunner\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n\n    >>> real_stdin = sys.stdin\n    >>> sys.stdin = Input('p x\\nc')\n\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t set_trace1').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    ... # doctest: +ELLIPSIS\n    Running zope.testrunner.layer.UnitTests tests:\n    ...\n    > testrunner-ex/sample3/sampletests_d.py(27)test_set_trace1()\n    -> y = x\n    (Pdb) p x\n    1\n    (Pdb) c\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.001 seconds.\n    ...\n    False\n\nNote that, prior to Python 2.4, calling pdb.set_trace caused pdb to\nbreak in the pdb.set_trace function.  It was necessary to use 'next'\nor 'up' to get to the application code that called pdb.set_trace.  In\nPython 2.4, pdb.set_trace causes pdb to stop right after the call to\npdb.set_trace.\n\nYou can also do post-mortem debugging, using the --post-mortem (-D)\noption:\n\n    >>> sys.stdin = Input('p x\\nc')\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t post_mortem1 -D').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    ... # doctest: +NORMALIZE_WHITESPACE +REPORT_NDIFF +ELLIPSIS\n    Running zope.testrunner.layer.UnitTests tests:\n    ...\n    Error in test test_post_mortem1 (sample3.sampletests_d.TestSomething)\n    Traceback (most recent call last):\n      File \"testrunner-ex/sample3/sampletests_d.py\",\n              line 34, in test_post_mortem1\n        raise ValueError\n    ValueError\n    <BLANKLINE>\n    ...ValueError\n    <BLANKLINE>\n    > testrunner-ex/sample3/sampletests_d.py(34)test_post_mortem1()\n    -> raise ValueError\n    (Pdb) p x\n    1\n    (Pdb) c\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nNote that the test runner exits after post-mortem debugging.\n\nIn the example above, we debugged an error.  Failures are actually\nconverted to errors and can be debugged the same way:\n\n    >>> sys.stdin = Input('p x\\np y\\nc')\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t post_mortem_failure1 -D').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    ... # doctest: +NORMALIZE_WHITESPACE +REPORT_NDIFF +ELLIPSIS\n    Running zope.testrunner.layer.UnitTests tests:\n    ...\n    Error in test test_post_mortem_failure1 (sample3.sampletests_d.TestSomething)\n    Traceback (most recent call last):\n      File \".../unittest.py\",  line 252, in debug\n        getattr(self, self.__testMethodName)()\n      File \"testrunner-ex/sample3/sampletests_d.py\",\n        line 42, in test_post_mortem_failure1\n        assert x == y\n    AssertionError\n    <BLANKLINE>\n    ...AssertionError\n    <BLANKLINE>\n    > testrunner-ex/sample3/sampletests_d.py(42)test_post_mortem_failure1()\n    -> assert x == y\n    (Pdb) p x\n    1\n    (Pdb) p y\n    2\n    (Pdb) c\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\nLayers that can't be torn down\n==============================\n\nA layer can have a tearDown method that raises NotImplementedError.\nIf this is the case and there are no remaining tests to run, the test\nrunner will just note that the tear down couldn't be done:\n\n    >>> import os.path, sys\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> from zope import testrunner\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n\n    >>> sys.argv = 'test -ssample2 --tests-pattern sampletests_ntd$'.split()\n    >>> testrunner.run_internal(defaults)\n    Running sample2.sampletests_ntd.Layer tests:\n      Set up sample2.sampletests_ntd.Layer in 0.000 seconds.\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n    Tearing down left over layers:\n      Tear down sample2.sampletests_ntd.Layer ... not supported\n    False\n\nIf the tearDown method raises NotImplementedError and there are remaining\nlayers to run, the test runner will restart itself as a new process,\nresuming tests where it left off:\n\n    >>> sys.argv = [testrunner_script, '--tests-pattern', 'sampletests_ntd$']\n    >>> testrunner.run_internal(defaults)\n    Running sample1.sampletests_ntd.Layer tests:\n      Set up sample1.sampletests_ntd.Layer in N.NNN seconds.\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running sample2.sampletests_ntd.Layer tests:\n      Tear down sample1.sampletests_ntd.Layer ... not supported\n      Running in a subprocess.\n      Set up sample2.sampletests_ntd.Layer in N.NNN seconds.\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n      Tear down sample2.sampletests_ntd.Layer ... not supported\n    Running sample3.sampletests_ntd.Layer tests:\n      Running in a subprocess.\n      Set up sample3.sampletests_ntd.Layer in N.NNN seconds.\n    <BLANKLINE>\n    <BLANKLINE>\n    Error in test test_error1 (sample3.sampletests_ntd.TestSomething)\n    Traceback (most recent call last):\n     testrunner-ex/sample3/sampletests_ntd.py\", Line NNN, in test_error1\n        raise TypeError(\"Can we see errors\")\n    TypeError: Can we see errors\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    Error in test test_error2 (sample3.sampletests_ntd.TestSomething)\n    Traceback (most recent call last):\n     testrunner-ex/sample3/sampletests_ntd.py\", Line NNN, in test_error2\n        raise TypeError(\"I hope so\")\n    TypeError: I hope so\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    Failure in test test_fail1 (sample3.sampletests_ntd.TestSomething)\n    Traceback (most recent call last):\n     testrunner-ex/sample3/sampletests_ntd.py\", Line NNN, in test_fail1\n        self.assertEqual(1, 2)\n    AssertionError: 1 != 2\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    Failure in test test_fail2 (sample3.sampletests_ntd.TestSomething)\n    Traceback (most recent call last):\n     testrunner-ex/sample3/sampletests_ntd.py\", Line NNN, in test_fail2\n        self.assertEqual(1, 3)\n    AssertionError: 1 != 3\n    <BLANKLINE>\n      Ran 6 tests with 2 failures, 2 errors and 0 skipped in N.NNN seconds.\n      Tear down sample3.sampletests_ntd.Layer ... not supported\n    Total: 8 tests, 2 failures, 2 errors and 0 skipped in N.NNN seconds.\n    True\n\nin the example above, some of the tests run as a subprocess had errors\nand failures. They were displayed as usual and the failure and error\nstatistice were updated as usual.\n\nNote that debugging doesn't work when running tests in a subprocess:\n\n    >>> sys.argv = [testrunner_script, '--tests-pattern', 'sampletests_ntd$',\n    ...             '-D', ]\n    >>> testrunner.run_internal(defaults)\n    Running sample1.sampletests_ntd.Layer tests:\n      Set up sample1.sampletests_ntd.Layer in N.NNN seconds.\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running sample2.sampletests_ntd.Layer tests:\n      Tear down sample1.sampletests_ntd.Layer ... not supported\n      Running in a subprocess.\n      Set up sample2.sampletests_ntd.Layer in N.NNN seconds.\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n      Tear down sample2.sampletests_ntd.Layer ... not supported\n    Running sample3.sampletests_ntd.Layer tests:\n      Running in a subprocess.\n      Set up sample3.sampletests_ntd.Layer in N.NNN seconds.\n    <BLANKLINE>\n    <BLANKLINE>\n    Error in test test_error1 (sample3.sampletests_ntd.TestSomething)\n    Traceback (most recent call last):\n     testrunner-ex/sample3/sampletests_ntd.py\", Line NNN, in test_error1\n        raise TypeError(\"Can we see errors\")\n    TypeError: Can we see errors\n    <BLANKLINE>\n    <BLANKLINE>\n    **********************************************************************\n    Can't post-mortem debug when running a layer as a subprocess!\n    **********************************************************************\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    Error in test test_error2 (sample3.sampletests_ntd.TestSomething)\n    Traceback (most recent call last):\n     testrunner-ex/sample3/sampletests_ntd.py\", Line NNN, in test_error2\n        raise TypeError(\"I hope so\")\n    TypeError: I hope so\n    <BLANKLINE>\n    <BLANKLINE>\n    **********************************************************************\n    Can't post-mortem debug when running a layer as a subprocess!\n    **********************************************************************\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    Error in test test_fail1 (sample3.sampletests_ntd.TestSomething)\n    Traceback (most recent call last):\n     testrunner-ex/sample3/sampletests_ntd.py\", Line NNN, in test_fail1\n        self.assertEqual(1, 2)\n    AssertionError: 1 != 2\n    <BLANKLINE>\n    <BLANKLINE>\n    **********************************************************************\n    Can't post-mortem debug when running a layer as a subprocess!\n    **********************************************************************\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    Error in test test_fail2 (sample3.sampletests_ntd.TestSomething)\n    Traceback (most recent call last):\n     testrunner-ex/sample3/sampletests_ntd.py\", Line NNN, in test_fail2\n        self.assertEqual(1, 3)\n    AssertionError: 1 != 3\n    <BLANKLINE>\n    <BLANKLINE>\n    **********************************************************************\n    Can't post-mortem debug when running a layer as a subprocess!\n    **********************************************************************\n    <BLANKLINE>\n      Ran 6 tests with 0 failures, 4 errors and 0 skipped in N.NNN seconds.\n      Tear down sample3.sampletests_ntd.Layer ... not supported\n    Total: 8 tests, 0 failures, 4 errors and 0 skipped in N.NNN seconds.\n    True\n\nSimilarly, pdb.set_trace doesn't work when running tests in a layer\nthat is run as a subprocess:\n\n    >>> sys.argv = [testrunner_script, '--tests-pattern', 'sampletests_ntds']\n    >>> testrunner.run_internal(defaults)\n    Running sample1.sampletests_ntds.Layer tests:\n      Set up sample1.sampletests_ntds.Layer in 0.000 seconds.\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n    Running sample2.sampletests_ntds.Layer tests:\n      Tear down sample1.sampletests_ntds.Layer ... not supported\n      Running in a subprocess.\n      Set up sample2.sampletests_ntds.Layer in 0.000 seconds.\n    --Return--\n    > testrunner-ex/sample2/sampletests_ntds.py(37)test_something()->None\n    -> import pdb; pdb.set_trace()\n    (Pdb) c\n    <BLANKLINE>\n    **********************************************************************\n    Can't use pdb.set_trace when running a layer as a subprocess!\n    **********************************************************************\n    <BLANKLINE>\n    --Return--\n    > testrunner-ex/sample2/sampletests_ntds.py(40)test_something2()->None\n    -> import pdb; pdb.set_trace()\n    (Pdb) c\n    <BLANKLINE>\n    **********************************************************************\n    Can't use pdb.set_trace when running a layer as a subprocess!\n    **********************************************************************\n    <BLANKLINE>\n    --Return--\n    > testrunner-ex/sample2/sampletests_ntds.py(43)test_something3()->None\n    -> import pdb; pdb.set_trace()\n    (Pdb) c\n    <BLANKLINE>\n    **********************************************************************\n    Can't use pdb.set_trace when running a layer as a subprocess!\n    **********************************************************************\n    <BLANKLINE>\n    --Return--\n    > testrunner-ex/sample2/sampletests_ntds.py(46)test_something4()->None\n    -> import pdb; pdb.set_trace()\n    (Pdb) c\n    <BLANKLINE>\n    **********************************************************************\n    Can't use pdb.set_trace when running a layer as a subprocess!\n    **********************************************************************\n    <BLANKLINE>\n    --Return--\n    > testrunner-ex/sample2/sampletests_ntds.py(52)f()->None\n    -> import pdb; pdb.set_trace()\n    (Pdb) c\n    <BLANKLINE>\n    **********************************************************************\n    Can't use pdb.set_trace when running a layer as a subprocess!\n    **********************************************************************\n    <BLANKLINE>\n    --Return--\n    > doctest.py(351)set_trace()->None\n    -> Pdb().set_trace()\n    (Pdb) c\n    <BLANKLINE>\n    **********************************************************************\n    Can't use pdb.set_trace when running a layer as a subprocess!\n    **********************************************************************\n    <BLANKLINE>\n    --Return--\n    > doctest.py(351)set_trace()->None\n    -> Pdb().set_trace()\n    (Pdb) c\n    <BLANKLINE>\n    **********************************************************************\n    Can't use pdb.set_trace when running a layer as a subprocess!\n    **********************************************************************\n    <BLANKLINE>\n      Ran 7 tests with 0 failures, 0 errors and 0 skipped in 0.008 seconds.\n      Tear down sample2.sampletests_ntds.Layer ... not supported\n    Total: 8 tests, 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    False\n\nIf you want to use pdb from a test in a layer that is run as a\nsubprocess, then rerun the test runner selecting *just* that layer so\nthat it's not run as a subprocess.\n\n\nIf a test is run in a subprocess and it generates output on stderr (as\nstderrtest does), the output is ignored (but it doesn't cause a SubprocessError\nlike it once did).\n\n    >>> from six import StringIO\n    >>> real_stderr = sys.stderr\n    >>> sys.stderr = StringIO()\n\n    >>> sys.argv = [testrunner_script, '-s', 'sample2', '--tests-pattern',\n    ...     '(sampletests_ntd$|stderrtest)']\n    >>> testrunner.run_internal(defaults)\n    Running sample2.sampletests_ntd.Layer tests:\n      Set up sample2.sampletests_ntd.Layer in 0.000 seconds.\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n    Running sample2.stderrtest.Layer tests:\n      Tear down sample2.sampletests_ntd.Layer ... not supported\n      Running in a subprocess.\n      Set up sample2.stderrtest.Layer in 0.000 seconds.\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.002 seconds.\n      Tear down sample2.stderrtest.Layer in 0.000 seconds.\n    Total: 2 tests, 0 failures, 0 errors and 0 skipped in 0.197 seconds.\n    False\n\n    >>> print((sys.stderr.getvalue()))\n    A message on stderr.  Please ignore (expected in test output).\n\n    >>> sys.stderr = real_stderr\n\n\n\nEgg Support\n===========\n\n\nThe `ftest` Setup Command\n-------------------------\n\nThe `ftest` class is a proper `distutils` command and `zope.testrunner`\nexposes it as such via an entry point.\n\n  >>> import pkg_resources\n  >>> ws = pkg_resources.WorkingSet()\n  >>> eps = dict([(ep.name, ep)\n  ...             for ep in ws.iter_entry_points('distutils.commands')])\n  >>> 'ftest' in eps\n  True\n  >>> eps['ftest']\n  EntryPoint.parse('ftest = zope.testrunner.eggsupport:ftest')\n\nLet's now run this command:\n\n  >>> import zope.testrunner\n  >>> org_run = zope.testrunner.run\n\n  >>> def run(args):\n  ...     print(' '.join(args))\n  >>> zope.testrunner.run = run\n\n  >>> import os, tempfile, shutil\n  >>> tmpdir = tempfile.mkdtemp()\n  >>> srcdir = os.path.join(tmpdir, 'src')\n  >>> os.mkdir(srcdir)\n\n  >>> import setuptools.dist\n  >>> dist = setuptools.dist.Distribution(\n  ...     {'package_dir': {'': srcdir},\n  ...      'script_name': __file__})\n\n  >>> from zope.testrunner.eggsupport import ftest\n  >>> ftest(dist).run()\n  IGNORE_ME --test-path .../src\n\nCleanup:\n\n  >>> zope.testrunner.run = org_run\n  >>> shutil.rmtree(tmpdir)\n\n\nSkipping Tests with Layers\n--------------------------\n\nThe ``SkipLayers`` scanning test loader can replace the standard test loader,\nso that any tests that require layers are skipped. This is necessary, since\nthe standard setuptools testing facility does not handle layers. It can be\nused as follows::\n\n      setup(\n      ...\n      setup_requires=['eggtestinfo' # captures testing metadata in EGG-INFO\n                     ],\n      tests_require=['zope.testrunner',\n                    ],\n      ...\n      test_loader='zope.testrunner.eggsupport:SkipLayers',\n      ...\n      )\n\nLet's now crete some test suites to make sure that all tests with layers are\nproperly skipped.\n\n  >>> import doctest\n  >>> import unittest\n\n  >>> all = unittest.TestSuite()\n  >>> class T1(unittest.TestCase):\n  ...     def test_t1(self):\n  ...         pass\n  >>> class T2(unittest.TestCase):\n  ...     layer = 'layer'\n  ...     def test_t2(self):\n  ...         pass\n  >>> T3 = doctest.DocTestSuite('zope.testrunner.find')\n  >>> T4 = doctest.DocTestSuite('zope.testrunner.options')\n  >>> T4.layer = 'layer'\n  >>> T5 = doctest.DocFileSuite('testrunner.txt', package='zope.testrunner.tests')\n  >>> T6 = doctest.DocFileSuite('testrunner-gc.txt', package='zope.testrunner.tests')\n  >>> T6.layer = 'layer'\n\n  >>> all = unittest.TestSuite((\n  ...     unittest.makeSuite(T1), unittest.makeSuite(T2), T3, T4, T5, T6,\n  ...     ))\n\nLet's return those tests from the scan:\n\n  >>> from setuptools.command.test import ScanningLoader\n  >>> orig_loadTestsFromModule = ScanningLoader.loadTestsFromModule\n  >>> ScanningLoader.loadTestsFromModule = lambda *args: all\n\nNow we can retrieve the modules from the layer skipping loader:\n\n  >>> from zope.testrunner.eggsupport import SkipLayers\n  >>> filtered = SkipLayers().loadTestsFromModule('zope.testrunner')\n\n  >>> len(filtered._tests)\n  3\n  >>> from pprint import pprint\n  >>> pprint(filtered._tests)\n  [<...T1 testMethod=test_t1>,\n   StartUpFailure (zope.testrunner.find),\n   .../zope/testrunner/tests/testrunner.txt]\n\nCleanup:\n\n  >>> ScanningLoader.loadTestsFromModule = orig_loadTestsFromModule\n\nWhen the distribution specified a ``test_suite``, another method is used to\nload the tests.\n\n  >>> orig_loadTestsFromNames = ScanningLoader.loadTestsFromNames\n  >>> ScanningLoader.loadTestsFromNames = lambda *args: all\n\nNow we can retrieve the modules from the layer skipping loader:\n\n  >>> from zope.testrunner.eggsupport import SkipLayers\n  >>> filtered = SkipLayers().loadTestsFromNames(\n  ...     'zope.testrunner.tests.test_suite', 'zope.testrunner')\n\n  >>> len(filtered._tests)\n  3\n  >>> from pprint import pprint\n  >>> pprint(filtered._tests)\n  [<...T1 testMethod=test_t1>,\n   StartUpFailure (zope.testrunner.find),\n   .../zope/testrunner/tests/testrunner.txt]\n\nCleanup:\n\n  >>> ScanningLoader.loadTestsFromNames = orig_loadTestsFromNames\n\nCode Coverage\n=============\n\nIf the --coverage option is used, test coverage reports will be generated.  The\ndirectory name given as the parameter will be used to hold the reports.\n\n\n    >>> import os.path, sys, tempfile\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n\n    >>> tempdir = tempfile.mkdtemp(prefix='zope.testrunner-')\n    >>> coverage_dir = os.path.join(tempdir, 'coverage_dir')\n\n    >>> sys.argv = ['test', '--coverage', coverage_dir]\n\n    >>> from zope import testrunner\n    >>> testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in 0.000 seconds.\n      Ran 156 tests with 0 failures, 0 errors and 0 skipped in 0.687 seconds.\n    Running samplelayers.Layer1 tests:\n      Tear down zope.testrunner.layer.UnitTests in 0.000 seconds.\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Ran 9 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n    Running samplelayers.Layer11 tests:\n      Set up samplelayers.Layer11 in 0.000 seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.125 seconds.\n    Running samplelayers.Layer111 tests:\n      Set up samplelayers.Layerx in 0.000 seconds.\n      Set up samplelayers.Layer111 in 0.000 seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.125 seconds.\n    Running samplelayers.Layer112 tests:\n      Tear down samplelayers.Layer111 in 0.000 seconds.\n      Set up samplelayers.Layer112 in 0.000 seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.125 seconds.\n    Running samplelayers.Layer12 tests:\n      Tear down samplelayers.Layer112 in 0.000 seconds.\n      Tear down samplelayers.Layerx in 0.000 seconds.\n      Tear down samplelayers.Layer11 in 0.000 seconds.\n      Set up samplelayers.Layer12 in 0.000 seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.140 seconds.\n    Running samplelayers.Layer121 tests:\n      Set up samplelayers.Layer121 in 0.000 seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.125 seconds.\n    Running samplelayers.Layer122 tests:\n      Tear down samplelayers.Layer121 in 0.000 seconds.\n      Set up samplelayers.Layer122 in 0.000 seconds.\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.125 seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in 0.000 seconds.\n      Tear down samplelayers.Layer12 in 0.000 seconds.\n      Tear down samplelayers.Layer1 in 0.000 seconds.\n    lines   cov%   module   (path)\n    ...\n       48   100%   sampletests.test1   (testrunner-ex/sampletests/test1.py)\n       74   100%   sampletests.test11   (testrunner-ex/sampletests/test11.py)\n       74   100%   sampletests.test111   (testrunner-ex/sampletests/test111.py)\n       76   100%   sampletests.test112   (testrunner-ex/sampletests/test112.py)\n       74   100%   sampletests.test12   (testrunner-ex/sampletests/test12.py)\n       74   100%   sampletests.test121   (testrunner-ex/sampletests/test121.py)\n       74   100%   sampletests.test122   (testrunner-ex/sampletests/test122.py)\n       48   100%   sampletests.test_one   (testrunner-ex/sampletests/test_one.py)\n      112    95%   sampletestsf   (testrunner-ex/sampletestsf.py)\n    Total: 321 tests, 0 failures, 0 errors and 0 skipped in 0.630 seconds.\n    False\n\nThe directory specified with the --coverage option will have been created and\nwill hold the coverage reports.\n\n    >>> os.path.exists(coverage_dir)\n    True\n    >>> os.listdir(coverage_dir)\n    [...]\n\n(We should clean up after ourselves.)\n\n    >>> import shutil\n    >>> shutil.rmtree(tempdir)\n\n\nIgnoring Tests\n--------------\n\nThe ``trace`` module supports ignoring directories and modules based the test\nselection. Only directories selected for testing should report coverage. The\ntest runner provides a custom implementation of the relevant API.\n\nThe ``TestIgnore`` class, the class managing the ignoring, is initialized by\npassing the command line options. It uses the options to determine the\ndirectories that should be covered.\n\n  >>> class FauxOptions(object):\n  ...   package = None\n  ...   test_path = [('/myproject/src/blah/foo', ''),\n  ...                ('/myproject/src/blah/bar', '')]\n  >>> from zope.testrunner import coverage\n  >>> from zope.testrunner.find import test_dirs\n  >>> ignore = coverage.TestIgnore(test_dirs(FauxOptions(), {}))\n  >>> ignore._test_dirs\n  ['/myproject/src/blah/foo/', '/myproject/src/blah/bar/']\n\nWe can now ask whether a particular module should be ignored:\n\n  >>> ignore.names('/myproject/src/blah/foo/baz.py', 'baz')\n  False\n  >>> ignore.names('/myproject/src/blah/bar/mine.py', 'mine')\n  False\n  >>> ignore.names('/myproject/src/blah/foo/__init__.py', 'foo')\n  False\n  >>> ignore.names('/myproject/src/blah/hello.py', 'hello')\n  True\n\nWhen running the test runner, modules are sometimes created from text\nstrings. Those should *always* be ignored:\n\n  >>> ignore.names('/myproject/src/blah/hello.txt', '<string>')\n  True\n\nTo make this check fast, the class implements a cache. In an early\nimplementation, the result was cached by the module name, which was a problem,\nsince a lot of modules carry the same name (not the Python dotted name\nhere!). So just because a module has the same name in an ignored and tested\ndirectory, does not mean it is always ignored:\n\n  >>> ignore.names('/myproject/src/blah/module.py', 'module')\n  True\n  >>> ignore.names('/myproject/src/blah/foo/module.py', 'module')\n  False\n\nProfiling\n=========\nThe testrunner supports hotshot and cProfile profilers. Hotshot profiler\nsupport does not work with python2.6\n\n    >>> import os.path, sys, tempfile\n    >>> profiler = '--profile=hotshot'\n    >>> if sys.hexversion >= 0x02060000:\n    ...     profiler = '--profile=cProfile'\n\nThe testrunner includes the ability to profile the test execution with hotshot\nvia the --profile option, if it a python <= 2.6\n\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> sys.path.append(directory_with_tests)\n\n    >>> tempdir = tempfile.mkdtemp(prefix='zope.testrunner-')\n\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     '--profile-directory', tempdir,\n    ...     ]\n\n    >>> sys.argv = [testrunner_script, profiler]\n\nWhen the tests are run, we get profiling output.\n\n    >>> from zope import testrunner\n    >>> testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n    ...\n    Running samplelayers.Layer1 tests:\n    ...\n    Running samplelayers.Layer11 tests:\n    ...\n       ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    ...\n    Total: ... tests, 0 failures, 0 errors and 0 skipped in ... seconds.\n    False\n\nProfiling also works across layers.\n\n    >>> sys.argv = [testrunner_script, '-ssample2', profiler,\n    ...             '--tests-pattern', 'sampletests_ntd']\n    >>> testrunner.run_internal(defaults)\n    Running...\n      Tear down ... not supported...\n       ncalls  tottime  percall  cumtime  percall filename:lineno(function)...\n\nThe testrunner creates temnporary files containing hotshot profiler\ndata:\n\n    >>> os.listdir(tempdir)\n    ['tests_profile.cZj2jt.prof', 'tests_profile.yHD-so.prof']\n\nIt deletes these when rerun.  We'll delete these ourselves:\n\n    >>> import shutil\n    >>> shutil.rmtree(tempdir)\n\nRunning Without Source Code\n===========================\n\nThe ``--usecompiled`` option allows running tests in a tree without .py\nsource code, provided compiled .pyc or .pyo files exist (without\n``--usecompiled``, .py files are necessary).\n\nWe have a very simple directory tree, under ``usecompiled/``, to test\nthis.  Because we're going to delete its .py files, we want to work\nin a copy of that:\n\n    >>> import os.path, shutil, sys, tempfile\n    >>> directory_with_tests = tempfile.mkdtemp()\n\n    >>> NEWNAME = \"unlikely_package_name\"\n    >>> src = os.path.join(this_directory, 'testrunner-ex', 'usecompiled')\n    >>> os.path.isdir(src)\n    True\n    >>> dst = os.path.join(directory_with_tests, NEWNAME)\n    >>> os.path.isdir(dst)\n    False\n\nHave to use our own copying code, to avoid copying read-only SVN files that\ncan't be deleted later.\n\n    >>> n = len(src) + 1\n    >>> for root, dirs, files in os.walk(src):\n    ...     dirs[:] = [d for d in dirs if d == \"package\"] # prune cruft\n    ...     os.mkdir(os.path.join(dst, root[n:]))\n    ...     for f in files:\n    ...         _ = shutil.copy(os.path.join(root, f),\n    ...                         os.path.join(dst, root[n:], f))\n\nNow run the tests in the copy:\n\n    >>> from zope import testrunner\n\n    >>> mydefaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^compiletest$',\n    ...     '--package', NEWNAME,\n    ...     '-vv',\n    ...     ]\n    >>> sys.argv = ['test']\n    >>> testrunner.run_internal(mydefaults)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     test1 (unlikely_package_name.compiletest.Test)\n     test2 (unlikely_package_name.compiletest.Test)\n     test1 (unlikely_package_name.package.compiletest.Test)\n     test2 (unlikely_package_name.package.compiletest.Test)\n      Ran 4 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\nIf we delete the source files, it's normally a disaster:  the test runner\ndoesn't believe any test files, or even packages, exist.  Note that we pass\n``--keepbytecode`` this time, because otherwise the test runner would\ndelete the compiled Python files too:\n\n    >>> for root, dirs, files in os.walk(dst):\n    ...    for f in files:\n    ...        if f.endswith(\".py\"):\n    ...            os.remove(os.path.join(root, f))\n    >>> testrunner.run_internal(mydefaults, [\"test\", \"--keepbytecode\"])\n    Running tests at level 1\n    Total: 0 tests, 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    False\n\nFinally, passing ``--usecompiled`` asks the test runner to treat .pyc\nand .pyo files as adequate replacements for .py files.  Note that the\noutput is the same as when running with .py source above.  The absence\nof \"removing stale bytecode ...\" messages shows that ``--usecompiled``\nalso implies ``--keepbytecode``:\n\n    >>> if sys.version_info >= (3, 2):\n    ...     # PEP-3147: pyc files in __pycache__ directories cannot be\n    ...     # imported; legacy source-less imports need to use the legacy\n    ...     # layout\n    ...     for root, dirs, files in os.walk(dst):\n    ...         for f in files:\n    ...             if f.endswith((\".pyc\", \".pyo\")):\n    ...                 # \"root/f\" is \"dirname/__pycache__/name.magic.ext\"\n    ...                 dirname = os.path.dirname(os.path.abspath(root))\n    ...                 namewmagic, ext = os.path.splitext(os.path.basename(f))\n    ...                 newname = os.path.splitext(namewmagic)[0] + ext\n    ...                 os.rename(os.path.join(root, f),\n    ...                           os.path.join(dirname, newname))\n\n    >>> testrunner.run_internal(mydefaults, [\"test\", \"--usecompiled\"])\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     test1 (unlikely_package_name.compiletest.Test)\n     test2 (unlikely_package_name.compiletest.Test)\n     test1 (unlikely_package_name.package.compiletest.Test)\n     test2 (unlikely_package_name.package.compiletest.Test)\n      Ran 4 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\nRemove the temporary directory:\n\n    >>> shutil.rmtree(directory_with_tests)\n\nRepeating Tests\n===============\n\nThe --repeat option can be used to repeat tests some number of times.\nRepeating tests is useful to help make sure that tests clean up after\nthemselves.\n\n    >>> import os.path, sys\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n\n    >>> sys.argv = 'test --layer 112 --layer UnitTests --repeat 3'.split()\n    >>> from zope import testrunner\n    >>> testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    Iteration 1\n      Ran 156 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Iteration 2\n      Ran 156 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Iteration 3\n      Ran 156 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer112 tests:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Set up samplelayers.Layerx in 0.000 seconds.\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Set up samplelayers.Layer11 in 0.000 seconds.\n      Set up samplelayers.Layer112 in 0.000 seconds.\n    Iteration 1\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.010 seconds.\n    Iteration 2\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.010 seconds.\n    Iteration 3\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.010 seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer112 in N.NNN seconds.\n      Tear down samplelayers.Layerx in N.NNN seconds.\n      Tear down samplelayers.Layer11 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    Total: 182 tests, 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    False\n\nThe tests are repeated by layer.  Layers are set up and torn down only\nonce.\n\nGarbage Collection Control\n==========================\n\nWhen having problems that seem to be caused my memory-management\nerrors, it can be helpful to adjust Python's cyclic garbage collector\nor to get garbage colection statistics.  The --gc option can be used\nfor this purpose.\n\nIf you think you are getting a test failure due to a garbage\ncollection problem, you can try disabling garbage collection by\nusing the --gc option with a value of zero.\n\n    >>> import os.path, sys\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> defaults = ['--path', directory_with_tests]\n\n    >>> from zope import testrunner\n\n    >>> sys.argv = 'test --tests-pattern ^gc0$ --gc 0 -vv'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Cyclic garbage collection is disabled.\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     make_sure_gc_is_disabled (gc0)\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n\n\nAlternatively, if you think you are having a garbage collection\nrelated problem, you can cause garbage collection to happen more often\nby providing a low threshold:\n\n    >>> sys.argv = 'test --tests-pattern ^gc1$ --gc 1 -vv'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Cyclic garbage collection threshold set to: (1,)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     make_sure_gc_threshold_is_one (gc1)\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n\nYou can specify up to 3 --gc options to set each of the 3 gc threshold\nvalues:\n\n\n    >>> sys.argv = ('test --tests-pattern ^gcset$ --gc 701 --gc 11 --gc 9 -vv'\n    ...             .split())\n    >>> _ = testrunner.run_internal(defaults)\n    Cyclic garbage collection threshold set to: (701, 11, 9)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     make_sure_gc_threshold_is_701_11_9 (gcset)\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n\nSpecifying more than 3 --gc options is not allowed:\n\n\n    >>> from six import StringIO\n    >>> out = StringIO()\n    >>> stdout = sys.stdout\n    >>> sys.stdout = out\n\n    >>> sys.argv = ('test --tests-pattern ^gcset$ --gc 701 --gc 42 --gc 11 --gc 9 -vv'\n    ...             .split())\n    >>> _ = testrunner.run_internal(defaults)\n    Traceback (most recent call last):\n    ...\n    SystemExit: 1\n\n    >>> sys.stdout = stdout\n\n    >>> print(out.getvalue())\n    Too many --gc options\n\nGarbage Collection Statistics\n-----------------------------\n\nYou can enable gc debugging statistics using the --gc-options (-G)\noption.  You should provide names of one or more of the flags\ndescribed in the library documentation for the gc module.\n\nThe output statistics are written to standard error.\n\n    >>> from six import StringIO\n    >>> err = StringIO()\n    >>> stderr = sys.stderr\n    >>> sys.stderr = err\n    >>> sys.argv = ('test --tests-pattern ^gcstats$ -G DEBUG_STATS'\n    ...             ' -G DEBUG_COLLECTABLE -vv'\n    ...             .split())\n    >>> _ = testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     generate_some_gc_statistics (gcstats)\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n\n    >>> sys.stderr = stderr\n\n    >>> print(err.getvalue())        # doctest: +ELLIPSIS\n    gc: collecting generation ...\n\n\nDebugging Memory Leaks\n======================\n\nThe --report-refcounts (-r) option can be used with the --repeat (-N)\noption to detect and diagnose memory leaks.  To use this option, you\nmust configure Python with the --with-pydebug option. (On Unix, pass\nthis option to configure and then build Python.)\n\n    >>> import os.path, sys\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n\n    >>> from zope import testrunner\n\n    >>> sys.argv = 'test --layer Layer11$ --layer Layer12$ -N4 -r'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Running samplelayers.Layer11 tests:\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Set up samplelayers.Layer11 in 0.000 seconds.\n    Iteration 1\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.013 seconds.\n    Iteration 2\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.012 seconds.\n      sys refcount=100401   change=0     \n    Iteration 3\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.012 seconds.\n      sys refcount=100401   change=0     \n    Iteration 4\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.013 seconds.\n      sys refcount=100401   change=0     \n    Running samplelayers.Layer12 tests:\n      Tear down samplelayers.Layer11 in 0.000 seconds.\n      Set up samplelayers.Layer12 in 0.000 seconds.\n    Iteration 1\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.013 seconds.\n    Iteration 2\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.012 seconds.\n      sys refcount=100411   change=0     \n    Iteration 3\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.012 seconds.\n      sys refcount=100411   change=0     \n    Iteration 4\n      Ran 26 tests with 0 failures, 0 errors and 0 skipped in 0.012 seconds.\n      sys refcount=100411   change=0     \n    Tearing down left over layers:\n      Tear down samplelayers.Layer12 in 0.000 seconds.\n      Tear down samplelayers.Layer1 in 0.000 seconds.\n    Total: 68 tests, 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n\nEach layer is repeated the requested number of times.  For each\niteration after the first, the system refcount and change in system\nrefcount is shown. The system refcount is the total of all refcount in\nthe system.  When a refcount on any object is changed, the system\nrefcount is changed by the same amount.  Tests that don't leak show\nzero changes in systen refcount.\n\nLet's look at an example test that leaks:\n\n    >>> sys.argv = 'test --tests-pattern leak -N4 -r'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:...\n    Iteration 1\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n    Iteration 2\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n      sys refcount=92506    change=12\n    Iteration 3\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n      sys refcount=92513    change=12\n    Iteration 4\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n      sys refcount=92520    change=12\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n\nHere we see that the system refcount is increating.  If we specify a\nverbosity greater than one, we can get details broken out by object\ntype (or class):\n\n    >>> sys.argv = 'test --tests-pattern leak -N5 -r -v'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:...\n    Iteration 1\n      Running:\n        .\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n    Iteration 2\n      Running:\n        .\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n      sum detail refcount=95832    sys refcount=105668   change=16    \n        Leak details, changes in instances and refcounts by type/class:\n        type/class                                               insts   refs\n        -------------------------------------------------------  -----   ----\n        classobj                                                     0      1\n        dict                                                         2      2\n        float                                                        1      1\n        int                                                          2      2\n        leak.ClassicLeakable                                         1      1\n        leak.Leakable                                                1      1\n        str                                                          0      4\n        tuple                                                        1      1\n        type                                                         0      3\n        -------------------------------------------------------  -----   ----\n        total                                                        8     16\n    Iteration 3\n      Running:\n        .\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n      sum detail refcount=95844    sys refcount=105680   change=12    \n        Leak details, changes in instances and refcounts by type/class:\n        type/class                                               insts   refs\n        -------------------------------------------------------  -----   ----\n        classobj                                                     0      1\n        dict                                                         2      2\n        float                                                        1      1\n        int                                                         -1      0\n        leak.ClassicLeakable                                         1      1\n        leak.Leakable                                                1      1\n        str                                                          0      4\n        tuple                                                        1      1\n        type                                                         0      1\n        -------------------------------------------------------  -----   ----\n        total                                                        5     12\n    Iteration 4\n      Running:\n        .\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n      sum detail refcount=95856    sys refcount=105692   change=12    \n        Leak details, changes in instances and refcounts by type/class:\n        type/class                                               insts   refs\n        -------------------------------------------------------  -----   ----\n        classobj                                                     0      1\n        dict                                                         2      2\n        float                                                        1      1\n        leak.ClassicLeakable                                         1      1\n        leak.Leakable                                                1      1\n        str                                                          0      4\n        tuple                                                        1      1\n        type                                                         0      1\n        -------------------------------------------------------  -----   ----\n        total                                                        6     12\n    Iteration 5\n      Running:\n        .\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n      sum detail refcount=95868    sys refcount=105704   change=12    \n        Leak details, changes in instances and refcounts by type/class:\n        type/class                                               insts   refs\n        -------------------------------------------------------  -----   ----\n        classobj                                                     0      1\n        dict                                                         2      2\n        float                                                        1      1\n        leak.ClassicLeakable                                         1      1\n        leak.Leakable                                                1      1\n        str                                                          0      4\n        tuple                                                        1      1\n        type                                                         0      1\n        -------------------------------------------------------  -----   ----\n        total                                                        6     12\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n\nIt is instructive to analyze the results in some detail.  The test\nbeing run was designed to intentionally leak:\n\n    class ClassicLeakable:\n        def __init__(self):\n            self.x = 'x'\n\n    class Leakable(object):\n        def __init__(self):\n            self.x = 'x'\n\n    leaked = []\n\n    class TestSomething(unittest.TestCase):\n\n        def testleak(self):\n            leaked.append((ClassicLeakable(), Leakable(), time.time()))\n\nLet's go through this by type.\n\nfloat, leak.ClassicLeakable, leak.Leakable, and tuple\n    We leak one of these every time.  This is to be expected because\n    we are adding one of these to the list every time.\n\nstr\n    We don't leak any instances, but we leak 4 references. These are\n    due to the instance attributes avd values.\n\ndict\n    We leak 2 of these, one for each ClassicLeakable and Leakable\n    instance. \n\nclassobj\n    We increase the number of classobj instance references by one each\n    time because each ClassicLeakable instance has a reference to its\n    class.  This instances increases the references in it's class,\n    which increases the total number of references to classic classes\n    (clasobj instances).\n\ntype\n    For most interations, we increase the number of type references by\n    one for the same reason we increase the number of clasobj\n    references by one.  The increase of the number of type references\n    by 3 in the second iteration is puzzling, but illustrates that\n    this sort of data is often puzzling.\n\nint\n    The change in the number of int instances and references in this\n    example is a side effect of the statistics being gathered.  Lots\n    of integers are created to keep the memory statistics used here.\n\nThe summary statistics include the sum of the detail refcounts.  (Note\nthat this sum is less than the system refcount.  This is because the\ndetailed analysis doesn't inspect every object. Not all objects in the\nsystem are returned by sys.getobjects.)\n\nKnitting in extra package directories\n=====================================\n\nPython packages have __path__ variables that can be manipulated to add\nextra directories cntaining software used in the packages.  The\ntestrunner needs to be given extra information about this sort of\nsituation.\n\nLet's look at an example.  The testrunner-ex-knit-lib directory\nis a directory that we want to add to the Python path, but that we\ndon't want to search for tests.  It has a sample4 package and a\nproducts subpackage.  The products subpackage adds the\ntestrunner-ex-knit-products to it's __path__.  We want to run tests\nfrom the testrunner-ex-knit-products directory.  When we import these\ntests, we need to import them from the sample4.products package.  We\ncan't use the --path option to name testrunner-ex-knit-products.\nIt isn't enough to add the containing directory to the test path\nbecause then we wouldn't be able to determine the package name\nproperly.  We might be able to use the --package option to run the\ntests from the sample4/products package, but we want to run tests in\ntestrunner-ex that aren't in this package.  \n\nWe can use the --package-path option in this case.  The --package-path\noption is like the --test-path option in that it defines a path to be\nsearched for tests without affecting the python path.  It differs in\nthat it supplied a package name that is added a profex when importing\nany modules found.  The --package-path option takes *two* arguments, a\npackage name and file path.\n\n    >>> import os.path, sys\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> sys.path.append(os.path.join(this_directory, 'testrunner-ex-pp-lib'))\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     '--package-path',\n    ...     os.path.join(this_directory, 'testrunner-ex-pp-products'),\n    ...     'sample4.products',\n    ...     ]\n\n    >>> from zope import testrunner\n\n    >>> sys.argv = 'test --layer Layer111 -vv'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running samplelayers.Layer111 tests:\n      Set up samplelayers.Layerx in 0.000 seconds.\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Set up samplelayers.Layer11 in 0.000 seconds.\n      Set up samplelayers.Layer111 in 0.000 seconds.\n      Running:\n        test_x1 (sample1.sampletests.test111.TestA)\n        test_y0 (sample1.sampletests.test111.TestA)\n        ...\n        test_y0 (sampletests.test111)\n        test_z1 (sampletests.test111)\n        testrunner-ex/sampletests/../sampletestsl.txt\n        test_extra_test_in_products (sample4.products.sampletests.Test)\n        test_another_test_in_products (sample4.products.more.sampletests.Test)\n      Ran 28 tests with 0 failures, 0 errors and 0 skipped in 0.008 seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer111 in 0.000 seconds.\n      Tear down samplelayers.Layerx in 0.000 seconds.\n      Tear down samplelayers.Layer11 in 0.000 seconds.\n      Tear down samplelayers.Layer1 in 0.000 seconds.\n\nIn the example, the last test, test_extra_test_in_products, came from\nthe products directory.  As usual, we can select the knit-in packages\nor individual packages within knit-in packages:\n\n    >>> sys.argv = 'test --package sample4.products -vv'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running samplelayers.Layer111 tests:\n      Set up samplelayers.Layerx in 0.000 seconds.\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Set up samplelayers.Layer11 in 0.000 seconds.\n      Set up samplelayers.Layer111 in 0.000 seconds.\n      Running:\n        test_extra_test_in_products (sample4.products.sampletests.Test)\n        test_another_test_in_products (sample4.products.more.sampletests.Test)\n      Ran 2 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer111 in 0.000 seconds.\n      Tear down samplelayers.Layerx in 0.000 seconds.\n      Tear down samplelayers.Layer11 in 0.000 seconds.\n      Tear down samplelayers.Layer1 in 0.000 seconds.\n\n    >>> sys.argv = 'test --package sample4.products.more -vv'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running samplelayers.Layer111 tests:\n      Set up samplelayers.Layerx in 0.000 seconds.\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Set up samplelayers.Layer11 in 0.000 seconds.\n      Set up samplelayers.Layer111 in 0.000 seconds.\n      Running:\n        test_another_test_in_products (sample4.products.more.sampletests.Test)\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer111 in 0.000 seconds.\n      Tear down samplelayers.Layerx in 0.000 seconds.\n      Tear down samplelayers.Layer11 in 0.000 seconds.\n      Tear down samplelayers.Layer1 in 0.000 seconds.\n\n\ntestrunner Edge Cases\n=====================\n\nThis document has some edge-case examples to test various aspects of\nthe test runner.\n\nSeparating Python path and test directories\n-------------------------------------------\n\nThe --path option defines a directory to be searched for tests *and* a\ndirectory to be added to Python's search path.  The --test-path option\ncan be used when you want to set a test search path without also\naffecting the Python path:\n\n    >>> import os, sys\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n\n    >>> from zope import testrunner\n\n    >>> defaults = [\n    ...     '--test-path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n    >>> sys.argv = ['test']\n    >>> testrunner.run_internal(defaults)\n    ... # doctest: +ELLIPSIS\n    Test-module import failures:\n    <BLANKLINE>\n    Module: sampletestsf\n    <BLANKLINE>\n    Traceback (most recent call last):\n    ImportError: No module named sampletestsf\n    ...\n\n    >>> sys.path.append(directory_with_tests)\n    >>> sys.argv = ['test']\n    >>> testrunner.run_internal(defaults)\n    ... # doctest: +ELLIPSIS\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Ran 156 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Running samplelayers.Layer1 tests:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Ran 9 tests with 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n    ...\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in N.NNN seconds.\n      Tear down samplelayers.Layer12 in N.NNN seconds.\n      Tear down samplelayers.Layer1 in N.NNN seconds.\n    Total: 321 tests, 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    False\n\nBug #251759: The test runner's protection against descending into non-package\ndirectories was ineffective, e.g. picking up tests from eggs that were stored\nclose by:\n\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex-251759')\n\n    >>> defaults = [\n    ...     '--test-path', directory_with_tests,\n    ...     ]\n    >>> testrunner.run_internal(defaults)\n    Total: 0 tests, 0 failures, 0 errors and 0 skipped in 0.000 seconds.\n    False\n\n\nDebugging Edge Cases\n--------------------\n\n    >>> directory_with_tests = os.path.join(this_directory, 'testrunner-ex')\n    >>> defaults = [\n    ...     '--test-path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n    >>> class Input:\n    ...     def __init__(self, src):\n    ...         self.lines = src.split('\\n')\n    ...     def readline(self):\n    ...         line = self.lines.pop(0)\n    ...         print(line)\n    ...         return line+'\\n'\n\n    >>> real_stdin = sys.stdin\n\nUsing pdb.set_trace in a function called by an ordinary test:\n\n    >>> sys.stdin = Input('p x\\nc')\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t set_trace2').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    ... # doctest: +ELLIPSIS\n    Running zope.testrunner.layer.UnitTests tests:...\n    > testrunner-ex/sample3/sampletests_d.py(47)f()\n    -> y = x\n    (Pdb) p x\n    1\n    (Pdb) c\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in 0.001 seconds.\n    ...\n    False\n\nUsing pdb.set_trace in a function called by a doctest in a doc string:\n\n    >>> sys.stdin = Input('n\\np x\\nc')\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t set_trace4').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    > testrunner-ex/sample3/sampletests_d.py(NNN)f()\n    -> y = x\n    (Pdb) n\n    --Return--\n    > ...->None\n    -> y = x\n    (Pdb) p x\n    1\n    (Pdb) c\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nUsing pdb in a docstring-based doctest\n\n    >>> sys.stdin = Input('n\\np x\\nc')\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t set_trace3').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    > <doctest sample3.sampletests_d.set_trace3[1]>(3)?()\n    -> y = x\n    (Pdb) n\n    --Return--\n    > ...->None\n    -> y = x\n    (Pdb) p x\n    1\n    (Pdb) c\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nUsing pdb.set_trace in a doc file:\n\n\n    >>> sys.stdin = Input('n\\np x\\nc')\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t set_trace5').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    > <doctest set_trace5.txt[1]>(3)?()\n    -> y = x\n    (Pdb) n\n    --Return--\n    > ...->None\n    -> y = x\n    (Pdb) p x\n    1\n    (Pdb) c\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nUsing pdb.set_trace in a function called by a doctest in a doc file:\n\n\n    >>> sys.stdin = Input('n\\np x\\nc')\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t set_trace6').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    > testrunner-ex/sample3/sampletests_d.py(NNN)f()\n    -> y = x\n    (Pdb) n\n    --Return--\n    > ...->None\n    -> y = x\n    (Pdb) p x\n    1\n    (Pdb) c\n      Ran 1 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nPost-mortem debugging function called from ordinary test:\n\n    >>> sys.stdin = Input('p x\\nc')\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t post_mortem2 -D').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    ... # doctest: +NORMALIZE_WHITESPACE\n    Running zope.testrunner.layer.UnitTests tests:...\n    <BLANKLINE>\n    <BLANKLINE>\n    Error in test test_post_mortem2 (sample3.sampletests_d.TestSomething)\n    Traceback (most recent call last):\n      File \"testrunner-ex/sample3/sampletests_d.py\",\n           line 37, in test_post_mortem2\n        g()\n      File \"testrunner-ex/sample3/sampletests_d.py\", line 46, in g\n        raise ValueError\n    ValueError\n    <BLANKLINE>\n    ...ValueError\n    <BLANKLINE>\n    > testrunner-ex/sample3/sampletests_d.py(46)g()\n    -> raise ValueError\n    (Pdb) p x\n    1\n    (Pdb) c\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\nPost-mortem debugging docstring-based doctest:\n\n    >>> sys.stdin = Input('p x\\nc')\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t post_mortem3 -D').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    ... # doctest: +NORMALIZE_WHITESPACE\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    <BLANKLINE>\n    <BLANKLINE>\n    Error in test post_mortem3 (sample3.sampletests_d)\n    Traceback (most recent call last):\n    ...UnexpectedException: testrunner-ex/sample3/sampletests_d.py:NNN (2 examples)>\n    <BLANKLINE>\n    ...ValueError\n    <BLANKLINE>\n    > <doctest sample3.sampletests_d.post_mortem3[1]>(1)?()\n    (Pdb) p x\n    1\n    (Pdb) c\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nPost-mortem debugging function called from docstring-based doctest:\n\n    >>> sys.stdin = Input('p x\\nc')\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t post_mortem4 -D').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    ... # doctest: +NORMALIZE_WHITESPACE\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    <BLANKLINE>\n    <BLANKLINE>\n    Error in test post_mortem4 (sample3.sampletests_d)\n    Traceback (most recent call last):\n    ...UnexpectedException: testrunner-ex/sample3/sampletests_d.py:NNN (1 example)>\n    <BLANKLINE>\n    ...ValueError\n    <BLANKLINE>\n    > testrunner-ex/sample3/sampletests_d.py(NNN)g()\n    -> raise ValueError\n    (Pdb) p x\n    1\n    (Pdb) c\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nPost-mortem debugging file-based doctest:\n\n    >>> sys.stdin = Input('p x\\nc')\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t post_mortem5 -D').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    ... # doctest: +NORMALIZE_WHITESPACE\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    <BLANKLINE>\n    <BLANKLINE>\n    Error testrunner-ex/sample3/post_mortem5.txt\n    Traceback (most recent call last):\n    ...UnexpectedException: testrunner-ex/sample3/post_mortem5.txt:0 (2 examples)>\n    <BLANKLINE>\n    ...ValueError\n    <BLANKLINE>\n    > <doctest post_mortem5.txt[1]>(1)?()\n    (Pdb) p x\n    1\n    (Pdb) c\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\n\nPost-mortem debugging function called from file-based doctest:\n\n    >>> sys.stdin = Input('p x\\nc')\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t post_mortem6 -D').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    ... # doctest: +NORMALIZE_WHITESPACE\n    Running zope.testrunner.layer.UnitTests tests:...\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    <BLANKLINE>\n    <BLANKLINE>\n    Error testrunner-ex/sample3/post_mortem6.txt\n    Traceback (most recent call last):\n      File \".../zope/testing/doctest/__init__.py\", Line NNN, in debug\n        runner.run(self._dt_test, clear_globs=False)\n      File \".../zope/testing/doctest/__init__.py\", Line NNN, in run\n        r = DocTestRunner.run(self, test, compileflags, out, False)\n      File \".../zope/testing/doctest/__init__.py\", Line NNN, in run\n        return self.__run(test, compileflags, out)\n      File \".../zope/testing/doctest/__init__.py\", Line NNN, in __run\n        exc_info)\n      File \".../zope/testing/doctest/__init__.py\", Line NNN, in report_unexpected_exception\n        raise UnexpectedException(test, example, exc_info)\n    ...UnexpectedException: testrunner-ex/sample3/post_mortem6.txt:0 (2 examples)>\n    <BLANKLINE>\n    ...ValueError\n    <BLANKLINE>\n    > testrunner-ex/sample3/sampletests_d.py(NNN)g()\n    -> raise ValueError\n    (Pdb) p x\n    1\n    (Pdb) c\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nPost-mortem debugging of a docstring doctest failure:\n\n    >>> sys.stdin = Input('p x\\nc')\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t post_mortem_failure2 -D').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    ... # doctest: +NORMALIZE_WHITESPACE\n    Running zope.testrunner.layer.UnitTests tests:...\n    <BLANKLINE>\n    <BLANKLINE>\n    Error in test post_mortem_failure2 (sample3.sampletests_d)\n    <BLANKLINE>\n    File \"testrunner-ex/sample3/sampletests_d.py\",\n                   line 81, in sample3.sampletests_d.post_mortem_failure2\n    <BLANKLINE>\n    x\n    <BLANKLINE>\n    Want:\n    2\n    <BLANKLINE>\n    Got:\n    1\n    <BLANKLINE>\n    <BLANKLINE>\n    > testrunner-ex/sample3/sampletests_d.py(81)_()\n    ...ValueError: Expected and actual output are different\n    > <string>(1)...()\n    (Pdb) p x\n    1\n    (Pdb) c\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\n\nPost-mortem debugging of a docfile doctest failure:\n\n    >>> sys.stdin = Input('p x\\nc')\n    >>> sys.argv = ('test -ssample3 --tests-pattern ^sampletests_d$'\n    ...             ' -t post_mortem_failure.txt -D').split()\n    >>> try: testrunner.run_internal(defaults)\n    ... finally: sys.stdin = real_stdin\n    ... # doctest: +NORMALIZE_WHITESPACE\n    Running zope.testrunner.layer.UnitTests tests:...\n    <BLANKLINE>\n    <BLANKLINE>\n    Error in test /home/jim/z3/zope.testrunner/src/zope/testing/testrunner-ex/sample3/post_mortem_failure.txt\n    <BLANKLINE>\n    File \"testrunner-ex/sample3/post_mortem_failure.txt\",\n                                      line 2, in post_mortem_failure.txt\n    <BLANKLINE>\n    x\n    <BLANKLINE>\n    Want:\n    2\n    <BLANKLINE>\n    Got:\n    1\n    <BLANKLINE>\n    <BLANKLINE>\n    > testrunner-ex/sample3/post_mortem_failure.txt(2)_()\n    ...ValueError:\n    Expected and actual output are different\n    > <string>(1)...()\n    (Pdb) p x\n    1\n    (Pdb) c\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nPost-mortem debugging with triple verbosity\n\n    >>> sys.argv = 'test --layer samplelayers.Layer1$ -vvv -D'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running samplelayers.Layer1 tests:\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Running:\n        test_x1 (sampletestsf.TestA1) (0.000 s)\n        test_y0 (sampletestsf.TestA1) (0.000 s)\n        test_z0 (sampletestsf.TestA1) (0.000 s)\n        test_x0 (sampletestsf.TestB1) (0.000 s)\n        test_y1 (sampletestsf.TestB1) (0.000 s)\n        test_z0 (sampletestsf.TestB1) (0.000 s)\n        test_1 (sampletestsf.TestNotMuch1) (0.000 s)\n        test_2 (sampletestsf.TestNotMuch1) (0.000 s)\n        test_3 (sampletestsf.TestNotMuch1) (0.000 s)\n      Ran 9 tests with 0 failures, 0 errors and 0 skipped in 0.001 seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer1 in 0.000 seconds.\n    False\n\nTest Suites with None for suites or tests\n-----------------------------------------\n\n    >>> sys.argv = ['test',\n    ...             '--tests-pattern', '^sampletests_none_suite$',\n    ...     ]\n    >>> testrunner.run_internal(defaults)\n    Test-module import failures:\n    <BLANKLINE>\n    Module: sample1.sampletests_none_suite\n    <BLANKLINE>\n    Traceback (most recent call last):\n    TypeError: Invalid test_suite, None, in sample1.sampletests_none_suite\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    Test-modules with import problems:\n      sample1.sampletests_none_suite\n    Total: 0 tests, 0 failures, 1 errors and 0 skipped in N.NNN seconds.\n    True\n\n\n    >>> sys.argv = ['test',\n    ...             '--tests-pattern', '^sampletests_none_test$',\n    ...     ]\n    >>> testrunner.run_internal(defaults)\n    Test-module import failures:\n    <BLANKLINE>\n    Module: sample1.sampletests_none_test\n    <BLANKLINE>\n    Traceback (most recent call last):\n    TypeError: ...\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    Test-modules with import problems:\n      sample1.sampletests_none_test\n    Total: 0 tests, 0 failures, 1 errors and 0 skipped in N.NNN seconds.\n    True\n\nYou must use --repeat with --report-refcounts\n---------------------------------------------\n\nIt is an error to specify --report-refcounts (-r) without specifying a\nrepeat count greater than 1\n\n    >>> sys.argv = 'test -r'.split()\n    >>> testrunner.run_internal(defaults)\n            You must use the --repeat (-N) option to specify a repeat\n            count greater than 1 when using the --report_refcounts (-r)\n            option.\n    <BLANKLINE>\n    True\n\n    >>> sys.argv = 'test -r -N1'.split()\n    >>> testrunner.run_internal(defaults)\n            You must use the --repeat (-N) option to specify a repeat\n            count greater than 1 when using the --report_refcounts (-r)\n            option.\n    <BLANKLINE>\n    True\n\n\nSelection\n---------\n\nSeveral tests can be excluded using the '!' notation:\n\n    >>> sys.argv = 'test -u -vv -ssample1.sample13 -t!test_x -t!test_y'.split()\n    >>> testrunner.run_internal(defaults)\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n     test_z0 (sample1.sample13.sampletests.TestA)\n     test_z0 (sample1.sample13.sampletests.TestB)\n     test_1 (sample1.sample13.sampletests.TestNotMuch)\n     test_2 (sample1.sample13.sampletests.TestNotMuch)\n     test_3 (sample1.sample13.sampletests.TestNotMuch)\n     test_z1 (sample1.sample13.sampletests)\n     testrunner-ex/sample1/sample13/../../sampletests.txt\n      Ran 7 tests with 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    False\n\nErrors and Failures\n===================\n\nLet's look at tests that have errors and failures, first we need to make a\ntemporary copy of the entire testing directory (except .svn files which may\nbe read only):\n\n    >>> import os.path, sys, tempfile, shutil\n    >>> tmpdir = tempfile.mkdtemp()\n    >>> directory_with_tests = os.path.join(tmpdir, 'testrunner-ex')\n    >>> source = os.path.join(this_directory, 'testrunner-ex')\n    >>> n = len(source) + 1\n    >>> for root, dirs, files in os.walk(source):\n    ...     dirs[:] = [d for d in dirs if d != \".svn\"] # prune cruft\n    ...     os.mkdir(os.path.join(directory_with_tests, root[n:]))\n    ...     for f in files:\n    ...         _ = shutil.copy(os.path.join(root, f),\n    ...                         os.path.join(directory_with_tests, root[n:], f))\n\n    >>> from zope import testrunner\n    >>> defaults = [\n    ...     '--path', directory_with_tests,\n    ...     '--tests-pattern', '^sampletestsf?$',\n    ...     ]\n\n    >>> sys.argv = 'test --tests-pattern ^sampletests(f|_e|_f)?$ '.split()\n    >>> testrunner.run_internal(defaults)\n    ... # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS\n    Running zope.testrunner.layer.UnitTests tests:\n    ...\n    <BLANKLINE>\n    <BLANKLINE>\n    Failure in test eek (sample2.sampletests_e)\n    Failed doctest test for sample2.sampletests_e.eek\n      File \"testrunner-ex/sample2/sampletests_e.py\", line 28, in eek\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/sample2/sampletests_e.py\", line 30, in sample2.sampletests_e.eek\n    Failed example:\n        f()\n    Exception raised:\n        Traceback (most recent call last):\n          File \".../doctest.py\", line 1256, in __run\n            compileflags, 1) in test.globs\n          File \"<doctest sample2.sampletests_e.eek[0]>\", line 1, in ?\n            f()\n          File \"testrunner-ex/sample2/sampletests_e.py\", line 19, in f\n            g()\n          File \"testrunner-ex/sample2/sampletests_e.py\", line 24, in g\n            x = y + 1\n           - __traceback_info__: I don't know what Y should be.\n        NameError: global name 'y' is not defined\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    Error in test test3 (sample2.sampletests_e.Test)\n    Traceback (most recent call last):\n      File \"testrunner-ex/sample2/sampletests_e.py\", line 43, in test3\n        f()\n      File \"testrunner-ex/sample2/sampletests_e.py\", line 19, in f\n        g()\n      File \"testrunner-ex/sample2/sampletests_e.py\", line 24, in g\n        x = y + 1\n       - __traceback_info__: I don't know what Y should be.\n    NameError: global name 'y' is not defined\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    Failure in test testrunner-ex/sample2/e.txt\n    Failed doctest test for e.txt\n      File \"testrunner-ex/sample2/e.txt\", line 0\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/sample2/e.txt\", line 4, in e.txt\n    Failed example:\n        f()\n    Exception raised:\n        Traceback (most recent call last):\n          File \".../doctest.py\", line 1256, in __run\n            compileflags, 1) in test.globs\n          File \"<doctest e.txt[1]>\", line 1, in ?\n            f()\n          File \"<doctest e.txt[0]>\", line 2, in f\n            return x\n        NameError: global name 'x' is not defined\n    <BLANKLINE>\n    <BLANKLINE>\n    <BLANKLINE>\n    Failure in test test (sample2.sampletests_f.Test)\n    Traceback (most recent call last):\n      File \"testrunner-ex/sample2/sampletests_f.py\", line 21, in test\n        self.assertEqual(1,0)\n      File \"/usr/local/python/2.3/lib/python2.3/unittest.py\", line 302, in failUnlessEqual\n        raise self.failureException, \\\n    AssertionError: 1 != 0\n    <BLANKLINE>\n      Ran 164 tests with 3 failures, 1 errors and 0 skipped in N.NNN seconds.\n    ...\n    Total: 329 tests, 3 failures, 1 errors and 0 skipped in N.NNN seconds.\n    True\n\nWe see that we get an error report and a traceback for the failing\ntest.  In addition, the test runner returned True, indicating that\nthere was an error.\n\nIf we ask for verbosity, the dotted output will be interrupted, and\nthere'll be a summary of the errors at the end of the test:\n\n    >>> sys.argv = 'test --tests-pattern ^sampletests(f|_e|_f)?$ -uv'.split()\n    >>> testrunner.run_internal(defaults)\n    ... # doctest: +NORMALIZE_WHITESPACE +REPORT_NDIFF\n    Running tests at level 1\n    Running zope.testrunner.layer.UnitTests tests:\n    ...\n      Running:\n    .................................................................................................\n    <BLANKLINE>\n    Failure in test eek (sample2.sampletests_e)\n    Failed doctest test for sample2.sampletests_e.eek\n      File \"testrunner-ex/sample2/sampletests_e.py\", line 28, in eek\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/sample2/sampletests_e.py\", line 30,\n        in sample2.sampletests_e.eek\n    Failed example:\n        f()\n    Exception raised:\n        Traceback (most recent call last):\n          File \".../doctest.py\", line 1256, in __run\n            compileflags, 1) in test.globs\n          File \"<doctest sample2.sampletests_e.eek[0]>\", line 1, in ?\n            f()\n          File \"testrunner-ex/sample2/sampletests_e.py\", line 19, in f\n            g()\n          File \"testrunner-ex/sample2/sampletests_e.py\", line 24, in g\n            x = y + 1\n           - __traceback_info__: I don't know what Y should be.\n        NameError: global name 'y' is not defined\n    <BLANKLINE>\n    ...\n    <BLANKLINE>\n    <BLANKLINE>\n    Error in test test3 (sample2.sampletests_e.Test)\n    Traceback (most recent call last):\n      File \"testrunner-ex/sample2/sampletests_e.py\", line 43, in test3\n        f()\n      File \"testrunner-ex/sample2/sampletests_e.py\", line 19, in f\n        g()\n      File \"testrunner-ex/sample2/sampletests_e.py\", line 24, in g\n        x = y + 1\n       - __traceback_info__: I don't know what Y should be.\n    NameError: global name 'y' is not defined\n    <BLANKLINE>\n    ...\n    <BLANKLINE>\n    Failure in test testrunner-ex/sample2/e.txt\n    Failed doctest test for e.txt\n      File \"testrunner-ex/sample2/e.txt\", line 0\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/sample2/e.txt\", line 4, in e.txt\n    Failed example:\n        f()\n    Exception raised:\n        Traceback (most recent call last):\n          File \".../doctest.py\", line 1256, in __run\n            compileflags, 1) in test.globs\n          File \"<doctest e.txt[1]>\", line 1, in ?\n            f()\n          File \"<doctest e.txt[0]>\", line 2, in f\n            return x\n        NameError: global name 'x' is not defined\n    <BLANKLINE>\n    .\n    <BLANKLINE>\n    Failure in test test (sample2.sampletests_f.Test)\n    Traceback (most recent call last):\n      File \"testrunner-ex/sample2/sampletests_f.py\", line 21, in test\n        self.assertEqual(1,0)\n      File \".../unittest.py\", line 302, in failUnlessEqual\n        raise self.failureException, \\\n    AssertionError: 1 != 0\n    <BLANKLINE>\n    ................................................................................................\n    <BLANKLINE>\n      Ran 164 tests with 3 failures, 1 errors and 0 skipped in 0.040 seconds.\n    ...\n    <BLANKLINE>\n    Tests with errors:\n       test3 (sample2.sampletests_e.Test)\n    <BLANKLINE>\n    Tests with failures:\n       eek (sample2.sampletests_e)\n       testrunner-ex/sample2/e.txt\n       test (sample2.sampletests_f.Test)\n    True\n\nSimilarly for progress output, the progress ticker will be interrupted:\n\n    >>> sys.argv = ('test --tests-pattern ^sampletests(f|_e|_f)?$ -u -ssample2'\n    ...             ' -p').split()\n    >>> testrunner.run_internal(defaults)\n    ... # doctest: +NORMALIZE_WHITESPACE +REPORT_NDIFF\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n      Running:\n        1/47 (2.1%)\n    <BLANKLINE>\n    Failure in test eek (sample2.sampletests_e)\n    Failed doctest test for sample2.sampletests_e.eek\n      File \"testrunner-ex/sample2/sampletests_e.py\", line 28, in eek\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/sample2/sampletests_e.py\", line 30, in sample2.sampletests_e.eek\n    Failed example:\n        f()\n    Exception raised:\n        Traceback (most recent call last):\n          File \".../doctest.py\", line 1256, in __run\n            compileflags, 1) in test.globs\n          File \"<doctest sample2.sampletests_e.eek[0]>\", line 1, in ?\n            f()\n          File \"testrunner-ex/sample2/sampletests_e.py\", line 19, in f\n            g()\n          File \"testrunner-ex/sample2/sampletests_e.py\", line 24, in g\n            x = y + 1\n           - __traceback_info__: I don't know what Y should be.\n        NameError: global name 'y' is not defined\n    <BLANKLINE>\n        2/47 (4.3%)\\r\n                   \\r\n        3/47 (6.4%)\\r\n                   \\r\n        4/47 (8.5%)\n    <BLANKLINE>\n    Error in test test3 (sample2.sampletests_e.Test)\n    Traceback (most recent call last):\n      File \"testrunner-ex/sample2/sampletests_e.py\", line 43, in test3\n        f()\n      File \"testrunner-ex/sample2/sampletests_e.py\", line 19, in f\n        g()\n      File \"testrunner-ex/sample2/sampletests_e.py\", line 24, in g\n        x = y + 1\n       - __traceback_info__: I don't know what Y should be.\n    NameError: global name 'y' is not defined\n    <BLANKLINE>\n        5/47 (10.6%)\\r\n                   \\r\n        6/47 (12.8%)\\r\n                    \\r\n        7/47 (14.9%)\n    <BLANKLINE>\n    Failure in test testrunner-ex/sample2/e.txt\n    Failed doctest test for e.txt\n      File \"testrunner-ex/sample2/e.txt\", line 0\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/sample2/e.txt\", line 4, in e.txt\n    Failed example:\n        f()\n    Exception raised:\n        Traceback (most recent call last):\n          File \".../doctest.py\", line 1256, in __run\n            compileflags, 1) in test.globs\n          File \"<doctest e.txt[1]>\", line 1, in ?\n            f()\n          File \"<doctest e.txt[0]>\", line 2, in f\n            return x\n        NameError: global name 'x' is not defined\n    <BLANKLINE>\n        8/47 (17.0%)\n    <BLANKLINE>\n    Failure in test test (sample2.sampletests_f.Test)\n    Traceback (most recent call last):\n      File \"testrunner-ex/sample2/sampletests_f.py\", line 21, in test\n        self.assertEqual(1,0)\n      File \".../unittest.py\", line 302, in failUnlessEqual\n        raise self.failureException, \\\n    AssertionError: 1 != 0\n    <BLANKLINE>\n        9/47 (19.1%)\\r\n                    \\r\n        10/47 (21.3%)\\r\n                     \\r\n        11/47 (23.4%)\\r\n                     \\r\n        12/47 (25.5%)\\r\n                     \\r\n        13/47 (27.7%)\\r\n                     \\r\n        14/47 (29.8%)\\r\n                     \\r\n        15/47 (31.9%)\\r\n                     \\r\n        16/47 (34.0%)\\r\n                     \\r\n        17/47 (36.2%)\\r\n                     \\r\n        18/47 (38.3%)\\r\n                     \\r\n        19/47 (40.4%)\\r\n                     \\r\n        20/47 (42.6%)\\r\n                     \\r\n        21/47 (44.7%)\\r\n                     \\r\n        22/47 (46.8%)\\r\n                     \\r\n        23/47 (48.9%)\\r\n                     \\r\n        24/47 (51.1%)\\r\n                     \\r\n        25/47 (53.2%)\\r\n                     \\r\n        26/47 (55.3%)\\r\n                     \\r\n        27/47 (57.4%)\\r\n                     \\r\n        28/47 (59.6%)\\r\n                     \\r\n        29/47 (61.7%)\\r\n                     \\r\n        30/47 (63.8%)\\r\n                     \\r\n        31/47 (66.0%)\\r\n                     \\r\n        32/47 (68.1%)\\r\n                     \\r\n        33/47 (70.2%)\\r\n                     \\r\n        34/47 (72.3%)\\r\n                     \\r\n        35/47 (74.5%)\\r\n                     \\r\n        36/47 (76.6%)\\r\n                     \\r\n        37/47 (78.7%)\\r\n                     \\r\n        38/47 (80.9%)\\r\n                     \\r\n        39/47 (83.0%)\\r\n                     \\r\n        40/47 (85.1%)\\r\n                     \\r\n        41/47 (87.2%)\\r\n                     \\r\n        42/47 (89.4%)\\r\n                     \\r\n        43/47 (91.5%)\\r\n                     \\r\n        44/47 (93.6%)\\r\n                     \\r\n        45/47 (95.7%)\\r\n                     \\r\n        46/47 (97.9%)\\r\n                     \\r\n        47/47 (100.0%)\\r\n                      \\r\n    <BLANKLINE>\n      Ran 47 tests with 3 failures, 1 errors and 0 skipped in 0.054 seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    True\n\nIf you also want a summary of errors at the end, ask for verbosity as well\nas progress output.\n\n\nSuppressing multiple doctest errors\n-----------------------------------\n\nOften, when a doctest example fails, the failure will cause later\nexamples in the same test to fail.  Each failure is reported:\n\n    >>> sys.argv = 'test --tests-pattern ^sampletests_1$'.split()\n    >>> testrunner.run_internal(defaults) # doctest: +NORMALIZE_WHITESPACE\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    <BLANKLINE>\n    <BLANKLINE>\n    Failure in test eek (sample2.sampletests_1)\n    Failed doctest test for sample2.sampletests_1.eek\n      File \"testrunner-ex/sample2/sampletests_1.py\", line 17, in eek\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/sample2/sampletests_1.py\", line 19,\n         in sample2.sampletests_1.eek\n    Failed example:\n        x = y\n    Exception raised:\n        Traceback (most recent call last):\n          File \".../doctest.py\", line 1256, in __run\n            compileflags, 1) in test.globs\n          File \"<doctest sample2.sampletests_1.eek[0]>\", line 1, in ?\n            x = y\n        NameError: name 'y' is not defined\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/sample2/sampletests_1.py\", line 21,\n         in sample2.sampletests_1.eek\n    Failed example:\n        x\n    Exception raised:\n        Traceback (most recent call last):\n          File \".../doctest.py\", line 1256, in __run\n            compileflags, 1) in test.globs\n          File \"<doctest sample2.sampletests_1.eek[1]>\", line 1, in ?\n            x\n        NameError: name 'x' is not defined\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/sample2/sampletests_1.py\", line 24,\n         in sample2.sampletests_1.eek\n    Failed example:\n        z = x + 1\n    Exception raised:\n        Traceback (most recent call last):\n          File \".../doctest.py\", line 1256, in __run\n            compileflags, 1) in test.globs\n          File \"<doctest sample2.sampletests_1.eek[2]>\", line 1, in ?\n            z = x + 1\n        NameError: name 'x' is not defined\n    <BLANKLINE>\n      Ran 1 tests with 1 failures, 0 errors and 0 skipped in 0.002 seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    True\n\nThis can be a bit confusing, especially when there are enough tests\nthat they scroll off a screen.  Often you just want to see the first\nfailure.  This can be accomplished with the -1 option (for \"just show\nme the first failed example in a doctest\" :)\n\n    >>> sys.argv = 'test --tests-pattern ^sampletests_1$ -1'.split()\n    >>> testrunner.run_internal(defaults) # doctest:\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    <BLANKLINE>\n    <BLANKLINE>\n    Failure in test eek (sample2.sampletests_1)\n    Failed doctest test for sample2.sampletests_1.eek\n      File \"testrunner-ex/sample2/sampletests_1.py\", line 17, in eek\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/sample2/sampletests_1.py\", line 19,\n         in sample2.sampletests_1.eek\n    Failed example:\n        x = y\n    Exception raised:\n        Traceback (most recent call last):\n          File \".../doctest.py\", line 1256, in __run\n            compileflags, 1) in test.globs\n          File \"<doctest sample2.sampletests_1.eek[0]>\", line 1, in ?\n            x = y\n        NameError: name 'y' is not defined\n    <BLANKLINE>\n      Ran 1 tests with 1 failures, 0 errors and 0 skipped in 0.001 seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    True\n\nThe --hide-secondary-failures option is an alias for -1:\n\n    >>> sys.argv = (\n    ...     'test --tests-pattern ^sampletests_1$'\n    ...     ' --hide-secondary-failures'\n    ...     ).split()\n    >>> testrunner.run_internal(defaults) # doctest:\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    <BLANKLINE>\n    <BLANKLINE>\n    Failure in test eek (sample2.sampletests_1)\n    Failed doctest test for sample2.sampletests_1.eek\n      File \"testrunner-ex/sample2/sampletests_1.py\", line 17, in eek\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/sample2/sampletests_1.py\", line 19, in sample2.sampletests_1.eek\n    Failed example:\n        x = y\n    Exception raised:\n        Traceback (most recent call last):\n          File \".../doctest.py\", line 1256, in __run\n            compileflags, 1) in test.globs\n          File \"<doctest sample2.sampletests_1.eek[0]>\", line 1, in ?\n            x = y\n        NameError: name 'y' is not defined\n    <BLANKLINE>\n      Ran 1 tests with 1 failures, 0 errors and 0 skipped in 0.001 seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    True\n\nThe --show-secondary-failures option counters -1 (or it's alias),\ncausing the second and subsequent errors to be shown.  This is useful\nif -1 is provided by a test script by inserting it ahead of\ncommand-line options in sys.argv.\n\n    >>> sys.argv = (\n    ...     'test --tests-pattern ^sampletests_1$'\n    ...     ' --hide-secondary-failures --show-secondary-failures'\n    ...     ).split()\n    >>> testrunner.run_internal(defaults) # doctest: +NORMALIZE_WHITESPACE\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    <BLANKLINE>\n    <BLANKLINE>\n    Failure in test eek (sample2.sampletests_1)\n    Failed doctest test for sample2.sampletests_1.eek\n      File \"testrunner-ex/sample2/sampletests_1.py\", line 17, in eek\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/sample2/sampletests_1.py\", line 19, in sample2.sampletests_1.eek\n    Failed example:\n        x = y\n    Exception raised:\n        Traceback (most recent call last):\n          File \".../doctest.py\", line 1256, in __run\n            compileflags, 1) in test.globs\n          File \"<doctest sample2.sampletests_1.eek[0]>\", line 1, in ?\n            x = y\n        NameError: name 'y' is not defined\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/sample2/sampletests_1.py\", line 21, in sample2.sampletests_1.eek\n    Failed example:\n        x\n    Exception raised:\n        Traceback (most recent call last):\n          File \".../doctest.py\", line 1256, in __run\n            compileflags, 1) in test.globs\n          File \"<doctest sample2.sampletests_1.eek[1]>\", line 1, in ?\n            x\n        NameError: name 'x' is not defined\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/sample2/sampletests_1.py\", line 24, in sample2.sampletests_1.eek\n    Failed example:\n        z = x + 1\n    Exception raised:\n        Traceback (most recent call last):\n          File \".../doctest.py\", line 1256, in __run\n            compileflags, 1) in test.globs\n          File \"<doctest sample2.sampletests_1.eek[2]>\", line 1, in ?\n            z = x + 1\n        NameError: name 'x' is not defined\n    <BLANKLINE>\n      Ran 1 tests with 1 failures, 0 errors and 0 skipped in 0.002 seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    True\n\n\nGetting diff output for doctest failures\n----------------------------------------\n\nIf a doctest has large expected and actual output, it can be hard to\nsee differences when expected and actual output differ.  The --ndiff,\n--udiff, and --cdiff options can be used to get diff output of various\nkinds.\n\n    >>> sys.argv = 'test --tests-pattern ^pledge$'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    <BLANKLINE>\n    <BLANKLINE>\n    Failure in test pledge (pledge)\n    Failed doctest test for pledge.pledge\n      File \"testrunner-ex/pledge.py\", line 24, in pledge\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/pledge.py\", line 26, in pledge.pledge\n    Failed example:\n        print_pledge()\n    Expected:\n        I give my pledge, as an earthling,\n        to save, and faithfully, to defend from waste,\n        the natural resources of my planet.\n        It's soils, minerals, forests, waters, and wildlife.\n        <BLANKLINE>\n    Got:\n        I give my pledge, as and earthling,\n        to save, and faithfully, to defend from waste,\n        the natural resources of my planet.\n        It's soils, minerals, forests, waters, and wildlife.\n        <BLANKLINE>\n    <BLANKLINE>\n      Ran 1 tests with 1 failures, 0 errors and 0 skipped in 0.002 seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n\nHere, the actual output uses the word \"and\" rather than the word \"an\",\nbut it's a bit hard to pick this out.  We can use the various diff\noutputs to see this better. We could modify the test to ask for diff\noutput, but it's easier to use one of the diff options.\n\nThe --ndiff option requests a diff using Python's ndiff utility. This\nis the only method that marks differences within lines as well as\nacross lines. For example, if a line of expected output contains digit\n1 where actual output contains letter l, a line is inserted with a\ncaret marking the mismatching column positions.\n\n    >>> sys.argv = 'test --tests-pattern ^pledge$ --ndiff'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    <BLANKLINE>\n    <BLANKLINE>\n    Failure in test pledge (pledge)\n    Failed doctest test for pledge.pledge\n      File \"testrunner-ex/pledge.py\", line 24, in pledge\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/pledge.py\", line 26, in pledge.pledge\n    Failed example:\n        print_pledge()\n    Differences (ndiff with -expected +actual):\n        - I give my pledge, as an earthling,\n        + I give my pledge, as and earthling,\n        ?                        +\n          to save, and faithfully, to defend from waste,\n          the natural resources of my planet.\n          It's soils, minerals, forests, waters, and wildlife.\n        <BLANKLINE>\n    <BLANKLINE>\n      Ran 1 tests with 1 failures, 0 errors and 0 skipped in 0.003 seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n\nThe -udiff option requests a standard \"unified\" diff:\n\n    >>> sys.argv = 'test --tests-pattern ^pledge$ --udiff'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    <BLANKLINE>\n    <BLANKLINE>\n    Failure in test pledge (pledge)\n    Failed doctest test for pledge.pledge\n      File \"testrunner-ex/pledge.py\", line 24, in pledge\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/pledge.py\", line 26, in pledge.pledge\n    Failed example:\n        print_pledge()\n    Differences (unified diff with -expected +actual):\n        @@ -1,3 +1,3 @@\n        -I give my pledge, as an earthling,\n        +I give my pledge, as and earthling,\n         to save, and faithfully, to defend from waste,\n         the natural resources of my planet.\n    <BLANKLINE>\n      Ran 1 tests with 1 failures, 0 errors and 0 skipped in 0.002 seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n\nThe -cdiff option requests a standard \"context\" diff:\n\n    >>> sys.argv = 'test --tests-pattern ^pledge$ --cdiff'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    <BLANKLINE>\n    <BLANKLINE>\n    Failure in test pledge (pledge)\n    Failed doctest test for pledge.pledge\n      File \"testrunner-ex/pledge.py\", line 24, in pledge\n    <BLANKLINE>\n    ----------------------------------------------------------------------\n    File \"testrunner-ex/pledge.py\", line 26, in pledge.pledge\n    Failed example:\n        print_pledge()\n    Differences (context diff with expected followed by actual):\n        ***************\n        *** 1,3 ****\n        ! I give my pledge, as an earthling,\n          to save, and faithfully, to defend from waste,\n          the natural resources of my planet.\n        --- 1,3 ----\n        ! I give my pledge, as and earthling,\n          to save, and faithfully, to defend from waste,\n          the natural resources of my planet.\n    <BLANKLINE>\n      Ran 1 tests with 1 failures, 0 errors and 0 skipped in 0.002 seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n\nSpecifying more than one diff option at once causes an error:\n\n    >>> sys.argv = 'test --tests-pattern ^pledge$ --cdiff --udiff'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Traceback (most recent call last):\n    ...\n    SystemExit: 1\n\n    >>> sys.argv = 'test --tests-pattern ^pledge$ --cdiff --ndiff'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Traceback (most recent call last):\n    ...\n    SystemExit: 1\n\n    >>> sys.argv = 'test --tests-pattern ^pledge$ --udiff --ndiff'.split()\n    >>> _ = testrunner.run_internal(defaults)\n    Traceback (most recent call last):\n    ...\n    SystemExit: 1\n\n\nTesting-Module Import Errors\n----------------------------\n\nIf there are errors when importing a test module, these errors are\nreported.  In order to illustrate a module with a syntax error, we create\none now:  this module used to be checked in to the project, but then it was\nincluded in distributions of projects using zope.testrunner too, and distutils\ncomplained about the syntax error when it compiled Python files during\ninstallation of such projects.  So first we create a module with bad syntax:\n\n    >>> badsyntax_path = os.path.join(directory_with_tests,\n    ...                               \"sample2\", \"sampletests_i.py\")\n    >>> f = open(badsyntax_path, \"w\")\n    >>> print(\"importx unittest\", file=f)  # syntax error\n    >>> f.close()\n\nThen run the tests:\n\n    >>> sys.argv = ('test --tests-pattern ^sampletests(f|_i)?$ --layer 1 '\n    ...            ).split()\n    >>> testrunner.run_internal(defaults)\n    ... # doctest: +NORMALIZE_WHITESPACE\n    Test-module import failures:\n    <BLANKLINE>\n    Module: sample2.sampletests_i\n    <BLANKLINE>\n    Traceback (most recent call last):\n      File \"testrunner-ex/sample2/sampletests_i.py\", line 1\n        importx unittest\n                       ^\n    SyntaxError: invalid syntax\n    <BLANKLINE>\n    <BLANKLINE>\n    Module: sample2.sample21.sampletests_i\n    <BLANKLINE>\n    Traceback (most recent call last):\n      File \"testrunner-ex/sample2/sample21/sampletests_i.py\", line 15, in ?\n        import zope.testrunner.huh\n    ImportError: No module named huh\n    <BLANKLINE>\n    <BLANKLINE>\n    Module: sample2.sample23.sampletests_i\n    <BLANKLINE>\n    Traceback (most recent call last):\n      File \"testrunner-ex/sample2/sample23/sampletests_i.py\", line 18, in ?\n        class Test(unittest.TestCase):\n      File \"testrunner-ex/sample2/sample23/sampletests_i.py\", line 23, in Test\n        raise TypeError('eek')\n    TypeError: eek\n    <BLANKLINE>\n    <BLANKLINE>\n    Running samplelayers.Layer1 tests:\n      Set up samplelayers.Layer1 in 0.000 seconds.\n      Ran 9 tests with 0 failures, 3 errors and 0 skipped in 0.000 seconds.\n    Running samplelayers.Layer11 tests:\n      Set up samplelayers.Layer11 in 0.000 seconds.\n      Ran 26 tests with 0 failures, 3 errors and 0 skipped in 0.007 seconds.\n    Running samplelayers.Layer111 tests:\n      Set up samplelayers.Layerx in 0.000 seconds.\n      Set up samplelayers.Layer111 in 0.000 seconds.\n      Ran 26 tests with 0 failures, 3 errors and 0 skipped in 0.007 seconds.\n    Running samplelayers.Layer112 tests:\n      Tear down samplelayers.Layer111 in 0.000 seconds.\n      Set up samplelayers.Layer112 in 0.000 seconds.\n      Ran 26 tests with 0 failures, 3 errors and 0 skipped in 0.007 seconds.\n    Running samplelayers.Layer12 tests:\n      Tear down samplelayers.Layer112 in 0.000 seconds.\n      Tear down samplelayers.Layerx in 0.000 seconds.\n      Tear down samplelayers.Layer11 in 0.000 seconds.\n      Set up samplelayers.Layer12 in 0.000 seconds.\n      Ran 26 tests with 0 failures, 3 errors and 0 skipped in 0.007 seconds.\n    Running samplelayers.Layer121 tests:\n      Set up samplelayers.Layer121 in 0.000 seconds.\n      Ran 26 tests with 0 failures, 3 errors and 0 skipped in 0.007 seconds.\n    Running samplelayers.Layer122 tests:\n      Tear down samplelayers.Layer121 in 0.000 seconds.\n      Set up samplelayers.Layer122 in 0.000 seconds.\n      Ran 26 tests with 0 failures, 3 errors and 0 skipped in 0.006 seconds.\n    Tearing down left over layers:\n      Tear down samplelayers.Layer122 in 0.000 seconds.\n      Tear down samplelayers.Layer12 in 0.000 seconds.\n      Tear down samplelayers.Layer1 in 0.000 seconds.\n    <BLANKLINE>\n    Test-modules with import problems:\n      sample2.sampletests_i\n      sample2.sample21.sampletests_i\n      sample2.sample23.sampletests_i\n    Total: 165 tests, 0 failures, 3 errors and 0 skipped in N.NNN seconds.\n    True\n\n\nReporting Errors to Calling Processes\n-------------------------------------\n\nThe testrunner returns the error status, indicating that the tests\nfailed.  This can be useful for an invoking process that wants to\nmonitor the result of a test run.\n\nThis is applied when invoking the testrunner using the ``run()`` function\ninstead of ``run_internal()``:\n\n    >>> sys.argv = (\n    ...     'test --tests-pattern ^sampletests_1$'.split())\n    >>> try:\n    ...     testrunner.run(defaults)\n    ... except SystemExit as e:\n    ...     print('exited with code', e.code)\n    ... else:\n    ...     print('sys.exit was not called')\n    ... # doctest: +ELLIPSIS\n    Running zope.testrunner.layer.UnitTests tests:\n      Set up zope.testrunner.layer.UnitTests in N.NNN seconds.\n    ...\n      Ran 1 tests with 1 failures, 0 errors and 0 skipped in 0.002 seconds.\n    Tearing down left over layers:\n      Tear down zope.testrunner.layer.UnitTests in N.NNN seconds.\n    exited with code 1\n\nPassing tests exit with code 0 according to UNIX practices:\n\n    >>> sys.argv = (\n    ...     'test --tests-pattern ^sampletests$'.split())\n    >>> try:\n    ...     testrunner.run(defaults)\n    ... except SystemExit as e2:\n    ...     print('exited with code', e2.code)\n    ... else:\n    ...     print('sys.exit was not called')\n    ... # doctest: +ELLIPSIS\n    Running zope.testrunner.layer.UnitTests tests:\n    ...\n    Total: 286 tests, 0 failures, 0 errors and 0 skipped in N.NNN seconds.\n    exited with code 0\n\nAnd remove the temporary directory:\n\n    >>> shutil.rmtree(tmpdir)\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/zopefoundation/zope.testrunner",
    "keywords": "",
    "license": "ZPL 2.1",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zope.testrunner",
    "platform": "",
    "project_url": "https://pypi.org/project/zope.testrunner/",
    "release_url": "https://pypi.org/project/zope.testrunner/4.8.1/",
    "requires_dist": [
      "zope.testing; extra == 'test'",
      "zope.interface",
      "zope.exceptions",
      "six",
      "setuptools"
    ],
    "requires_python": "",
    "summary": "Zope testrunner script.",
    "version": "4.8.1"
  },
  "releases": {
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b45a18d095e643f8ec2d6d8ffd3b4664",
          "sha256": "eceb1296efc4abb7f236c23a7566e69e9b4628ff1634c0b67e95af83c7dcbb5a"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.0.0.zip",
        "has_sig": false,
        "md5_digest": "b45a18d095e643f8ec2d6d8ffd3b4664",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 211413,
        "upload_time": "2010-10-19T17:58:25",
        "url": "https://files.pythonhosted.org/packages/cc/e9/9c99328496c2a4b9052b75ec59c262b1af1e8c042176571ad6fd58df7dcd/zope.testrunner-4.0.0.zip"
      }
    ],
    "4.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5860003f8f2425450970a54c5f221806",
          "sha256": "d9d9763f31fbec26cf2f68db5721ff08a60d1511edba8bca9b08146d6460f697"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.0.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "5860003f8f2425450970a54c5f221806",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 124678,
        "upload_time": "2010-04-29T12:44:57",
        "url": "https://files.pythonhosted.org/packages/6c/e4/00abf57b29ab01f57e71eeeb0127736b23a3b7c5ae99d3daf46b93d4936f/zope.testrunner-4.0.0b1.tar.gz"
      }
    ],
    "4.0.0b2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e946ea5c3934590229acddb76d859419",
          "sha256": "28009ad0b3458f2e710c1642f1b335a8e08dfc8c59ea10612761894b8497af62"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.0.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "e946ea5c3934590229acddb76d859419",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 125074,
        "upload_time": "2010-05-03T16:59:57",
        "url": "https://files.pythonhosted.org/packages/fa/87/2422a6a1af2b5f7a67c13099ec21282e0c842925b5ab7f3a4c7039b8f6d6/zope.testrunner-4.0.0b2.tar.gz"
      }
    ],
    "4.0.0b3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fdfbdb86f5b04fd0c8d7c08def86b81e",
          "sha256": "771fb709dab81288154e499f01bd3a00e95864064d51453c209779fc2ad4c9f2"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.0.0b3.tar.gz",
        "has_sig": false,
        "md5_digest": "fdfbdb86f5b04fd0c8d7c08def86b81e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 125028,
        "upload_time": "2010-06-16T16:20:36",
        "url": "https://files.pythonhosted.org/packages/b7/ed/3f29980ef07fe529949704fa1c216d5a22afe42eedba976398bcf15f4760/zope.testrunner-4.0.0b3.tar.gz"
      }
    ],
    "4.0.0b4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "516e76eddb447261c60eba22be6aa723",
          "sha256": "ce8d4d5a28eb255ce629cccb70a38064fd25da56254405929048f98573b60461"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.0.0b4.zip",
        "has_sig": false,
        "md5_digest": "516e76eddb447261c60eba22be6aa723",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 209969,
        "upload_time": "2010-06-23T16:48:01",
        "url": "https://files.pythonhosted.org/packages/3c/13/c77b589a65b23d27c3e92e55f1f57b3de544a4ff8c87ea57ff8b4541cd31/zope.testrunner-4.0.0b4.zip"
      }
    ],
    "4.0.0b5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d5135851330ef52423ed56accebacc6f",
          "sha256": "a88a5e2ae90a1534c61610f6cd5a6ca1a94583563859d45ba9349af2a686b85c"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.0.0b5.zip",
        "has_sig": false,
        "md5_digest": "d5135851330ef52423ed56accebacc6f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 211954,
        "upload_time": "2010-07-20T17:44:30",
        "url": "https://files.pythonhosted.org/packages/c8/76/a53f428b91ae800c766c9979aebafb31f850ac732a22f8b67ad5b6ba32f4/zope.testrunner-4.0.0b5.zip"
      }
    ],
    "4.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "786760464c87039322bccc0c2a084512",
          "sha256": "a53f4af4ffae4f629aab540a85a1915d1031c064b0ae31b717926f57f28cdfe9"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.0.1.zip",
        "has_sig": false,
        "md5_digest": "786760464c87039322bccc0c2a084512",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 213685,
        "upload_time": "2011-02-21T13:23:34",
        "url": "https://files.pythonhosted.org/packages/94/21/0d684c20d22b23dd78dd69fd2ce60c513f4cb4aeef35db207bcef72480fe/zope.testrunner-4.0.1.zip"
      }
    ],
    "4.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "41b5ef495cf894be37d5641bcf3f703b",
          "sha256": "e1d822fa0d5533432a7ab4617b3ffef9b8602fd1845359dac62ddfce6f7ddfb4"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.0.2.zip",
        "has_sig": false,
        "md5_digest": "41b5ef495cf894be37d5641bcf3f703b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 226125,
        "upload_time": "2011-03-16T16:28:01",
        "url": "https://files.pythonhosted.org/packages/97/49/ed7b67a1183f940a535b34b91c9b9689aaf0d00b082abc8080fabc94f2f6/zope.testrunner-4.0.2.zip"
      }
    ],
    "4.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1ff6c7af13fa2a57b81ad1f91f39c195",
          "sha256": "1eb0f9f610c0540f2b209c2e46f1c290cf036002cc4dbbfdd86fc66207619495"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.0.3.zip",
        "has_sig": false,
        "md5_digest": "1ff6c7af13fa2a57b81ad1f91f39c195",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 226293,
        "upload_time": "2011-03-17T09:22:27",
        "url": "https://files.pythonhosted.org/packages/db/cc/22430e37073fbedd21715b9a659792aec0df7813be36651a7d771e4ea3a7/zope.testrunner-4.0.3.zip"
      }
    ],
    "4.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cd648fc865a79aa0950e73342836dd4c",
          "sha256": "cdca6b85ae41521d109bc102c3101d7f7c268d19d7a234a5c3d543ef463b8214"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.0.4.zip",
        "has_sig": false,
        "md5_digest": "cd648fc865a79aa0950e73342836dd4c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 226570,
        "upload_time": "2011-10-25T19:26:19",
        "url": "https://files.pythonhosted.org/packages/26/61/97ace791f99a50613c1b55cffa021eb621b5b0e198a66fc7862d52f5f396/zope.testrunner-4.0.4.zip"
      }
    ],
    "4.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0f9da089f8a71f589f693e7fdbc729e0",
          "sha256": "46e06e262b57c18ebb2be9c41af6bf5df2796f23c343c59d76ef8de4b283ef34"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.1.0.zip",
        "has_sig": false,
        "md5_digest": "0f9da089f8a71f589f693e7fdbc729e0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 227260,
        "upload_time": "2013-02-07T13:18:08",
        "url": "https://files.pythonhosted.org/packages/fb/cd/282f7b24abbade2372acd830858f5aec138d27f98a59a22982ec1e922c19/zope.testrunner-4.1.0.zip"
      }
    ],
    "4.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "449ba3f46d7c82ad1174c2ead07dc6c2",
          "sha256": "4e831493274c0afb0310bc24224bf2ad2fdfe4fb163f59835d3aa7f3d9814f2b"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.1.1.zip",
        "has_sig": false,
        "md5_digest": "449ba3f46d7c82ad1174c2ead07dc6c2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 231186,
        "upload_time": "2013-02-08T13:41:58",
        "url": "https://files.pythonhosted.org/packages/f4/28/ee8bae60e5ee01623621cfefa0f35dfde757864f3bfe0ed1de6f24a85683/zope.testrunner-4.1.1.zip"
      }
    ],
    "4.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e89dd72f5d840f566347ebd33145e6d0",
          "sha256": "15f189b228e0f6686d56dd7bbf60adc6a94e1ca5057ff852533dbf2ed0605ae2"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.2.0.zip",
        "has_sig": false,
        "md5_digest": "e89dd72f5d840f566347ebd33145e6d0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 236587,
        "upload_time": "2013-02-12T14:09:43",
        "url": "https://files.pythonhosted.org/packages/72/4f/4f52273b87e84fcd9706d99ef7bd2a8e94444aa250322caa239775c3117f/zope.testrunner-4.2.0.zip"
      }
    ],
    "4.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cc18a624a91feca842c170b5f61324b8",
          "sha256": "3c3c10315d312854b8ff7ffb3ef52abb2edc58f6e3ab6e75ddbca1f25153e7f6"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.3.0.zip",
        "has_sig": false,
        "md5_digest": "cc18a624a91feca842c170b5f61324b8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 239862,
        "upload_time": "2013-03-03T00:51:34",
        "url": "https://files.pythonhosted.org/packages/f6/70/56d7310bf50e6a7d487e241cd994e266269f841248f1eaa9d5172d36e0c0/zope.testrunner-4.3.0.zip"
      }
    ],
    "4.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d3d9cc5a93476b25583fa2d0076e9eb2",
          "sha256": "3c429ae0927070df8fdf4b0678bbcd1330f9287c11059800512da4e2af4ee134"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.3.1.zip",
        "has_sig": false,
        "md5_digest": "d3d9cc5a93476b25583fa2d0076e9eb2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 240579,
        "upload_time": "2013-03-03T02:01:09",
        "url": "https://files.pythonhosted.org/packages/91/c9/90eca5adeb1a8112835174ec15b9d1b8cfb283cf73fbd6b9ef0fe537f2aa/zope.testrunner-4.3.1.zip"
      }
    ],
    "4.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7f652ac9a88ac2c0f0469f2bdc81e70d",
          "sha256": "6310be2f6e9675b583ad8b8de14addae6aa30d5e464e622f503d9dca5100f22a"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.3.2.zip",
        "has_sig": false,
        "md5_digest": "7f652ac9a88ac2c0f0469f2bdc81e70d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 241041,
        "upload_time": "2013-03-03T06:19:24",
        "url": "https://files.pythonhosted.org/packages/80/23/ba59f556a63a02c6e4e5c2208086c01fd7660602830f1cf46dab2f1e3744/zope.testrunner-4.3.2.zip"
      }
    ],
    "4.3.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "741bfa4d63db4a3ce27908889a8826a3",
          "sha256": "6342e5bed81be6158af7905dd5a950aea899d6d8becdb815c29ec52e6011efad"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.3.3.zip",
        "has_sig": false,
        "md5_digest": "741bfa4d63db4a3ce27908889a8826a3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 241408,
        "upload_time": "2013-03-03T07:14:19",
        "url": "https://files.pythonhosted.org/packages/ea/ec/94d98af74c72c264a9ec2ce3848b2d310344334340d9443bc192b1cdcfe4/zope.testrunner-4.3.3.zip"
      }
    ],
    "4.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "39466b6d7e876f02aa6526dc67c94308",
          "sha256": "e15b2ef37825cbde95e5765e7b3f2dfa07102f944ff7394275de15242e476111"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.4.0.zip",
        "has_sig": false,
        "md5_digest": "39466b6d7e876f02aa6526dc67c94308",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 252059,
        "upload_time": "2013-06-06T12:31:23",
        "url": "https://files.pythonhosted.org/packages/30/c8/7f4ce653f8e9438ab1620168800d23532a103b1aff11027beb72a5062d3e/zope.testrunner-4.4.0.zip"
      }
    ],
    "4.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1d689abad000419891494b30dd7d8190",
          "sha256": "ef1614872a27902c7f8487a9eec63fd94ca3446ea40b8776ce96374399615192"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.4.1.zip",
        "has_sig": false,
        "md5_digest": "1d689abad000419891494b30dd7d8190",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 252946,
        "upload_time": "2013-07-10T16:14:56",
        "url": "https://files.pythonhosted.org/packages/d8/0b/94e4f561afa7c880c7baf16bb5cdd9c246a525461f196e76036c944d52d4/zope.testrunner-4.4.1.zip"
      }
    ],
    "4.4.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a9b720d6a56e164eb4adae5e6a8dc21d",
          "sha256": "4be18b8bef618988c9a4dfb637cc4e226477d87724d6aaf28606571cf1e209f0"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.4.10.zip",
        "has_sig": false,
        "md5_digest": "a9b720d6a56e164eb4adae5e6a8dc21d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 264709,
        "upload_time": "2015-11-10T06:51:38",
        "url": "https://files.pythonhosted.org/packages/e9/74/fe03c1df5a0f24b74ab3f00b003346d3899fd42643aa68c08cb51573034b/zope.testrunner-4.4.10.zip"
      }
    ],
    "4.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4c7a7e334c73efc94eeb8d976494ae12",
          "sha256": "2040fee2e324924315aebd7db3d4fbec0978729d6ad72b7b6d10413e2bf944c6"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.4.2.zip",
        "has_sig": false,
        "md5_digest": "4c7a7e334c73efc94eeb8d976494ae12",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 254588,
        "upload_time": "2014-02-22T17:04:08",
        "url": "https://files.pythonhosted.org/packages/8b/af/9ee277f46e4041d7bf58cd429ae67cba5d22a9ddda1cbdd5210e199d48cc/zope.testrunner-4.4.2.zip"
      }
    ],
    "4.4.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5fa0716fc657b7ecd07afec634a942c3",
          "sha256": "88eb85f7287e18893c702b01d574c1c4ec66ee5ba239723f15b22ef0661993b7"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.4.3.zip",
        "has_sig": false,
        "md5_digest": "5fa0716fc657b7ecd07afec634a942c3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 256765,
        "upload_time": "2014-03-19T18:47:34",
        "url": "https://files.pythonhosted.org/packages/69/16/14841e89026d9798eac816a03f245b8ce1ea9fa96afd9b521d12470d78dd/zope.testrunner-4.4.3.zip"
      }
    ],
    "4.4.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0c4a6263a12868ad0dcd5096391046f0",
          "sha256": "4708b539389fb48197c9e28f9f3f661c4cb7fc8f3ea4cd77882e0825eebda2cf"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.4.4.zip",
        "has_sig": false,
        "md5_digest": "0c4a6263a12868ad0dcd5096391046f0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 256060,
        "upload_time": "2014-12-26T23:44:08",
        "url": "https://files.pythonhosted.org/packages/e9/d4/f8383c3bb4798abf4a4fbe0eb89f39798eb65b46837667f093936ed8c977/zope.testrunner-4.4.4.zip"
      }
    ],
    "4.4.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fb17ddba4aa4db536c6baccdb43de856",
          "sha256": "c078d90f7fc331737e8ab783b7b1e65c9f69198308a88c479b418288b5d162de"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.4.5.zip",
        "has_sig": false,
        "md5_digest": "fb17ddba4aa4db536c6baccdb43de856",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 257318,
        "upload_time": "2015-01-06T14:30:54",
        "url": "https://files.pythonhosted.org/packages/b3/8c/3ef4fb3272831ae86a0870c2ce562fe3fccaa847b564f36ca0a4b491230c/zope.testrunner-4.4.5.zip"
      }
    ],
    "4.4.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c39782f72567702329a8c1022f09d882",
          "sha256": "1e3cea3cd7d3a37e4733ca9cbfc7d0db7e9890562ecb166d0f49a8f1c5727668"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.4.6.zip",
        "has_sig": false,
        "md5_digest": "c39782f72567702329a8c1022f09d882",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 261827,
        "upload_time": "2015-01-21T06:32:47",
        "url": "https://files.pythonhosted.org/packages/5f/c7/9105564069a15f76c7c87096bec182e9311120e44656dad186e12dc90bf9/zope.testrunner-4.4.6.zip"
      }
    ],
    "4.4.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "84f4e003924e3f484007a93762cb02e4",
          "sha256": "2e6a4c07229a1738f7af3a17fc9e3671202176460676f5dd2e72c37fd3f6af5c"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.4.7.zip",
        "has_sig": false,
        "md5_digest": "84f4e003924e3f484007a93762cb02e4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 261941,
        "upload_time": "2015-04-02T07:36:40",
        "url": "https://files.pythonhosted.org/packages/8c/fc/b91d6aa14c4f04b84ce6e8fd64e798d73fd82c58e9fb8795f276fbf46e5e/zope.testrunner-4.4.7.zip"
      }
    ],
    "4.4.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e842dc4e575e8f2e15184f7326c98776",
          "sha256": "b426d7ac5d219bb58224c5a3fda97eb187656468a1e7a02fa0b0eeba395eeae2"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.4.8.zip",
        "has_sig": false,
        "md5_digest": "e842dc4e575e8f2e15184f7326c98776",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 262258,
        "upload_time": "2015-05-01T17:19:42",
        "url": "https://files.pythonhosted.org/packages/b9/ad/a5394bc0f34b2fe9d667f577e44236f6a552411d8292e1af13ae7c7440d2/zope.testrunner-4.4.8.zip"
      }
    ],
    "4.4.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f8dd244ebe89f68c038c7054c2169d57",
          "sha256": "4149fb1fc2a66f0534286386100324a3fffde083e557625c21be1408edc4f1e4"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.4.9.zip",
        "has_sig": false,
        "md5_digest": "f8dd244ebe89f68c038c7054c2169d57",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 264055,
        "upload_time": "2015-05-21T07:58:45",
        "url": "https://files.pythonhosted.org/packages/67/a8/222650e12c1c041347f1ed7e716d6ca8213bbfda082266e4b7eb4e193a49/zope.testrunner-4.4.9.zip"
      }
    ],
    "4.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bdb4e50f1016dd5ec3515cc910dc91ea",
          "sha256": "2ce18f274828e48eca8323f0dde33d3c3aa0786c48d4633206cf7de5dc6b6dd8"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.5.0.zip",
        "has_sig": false,
        "md5_digest": "bdb4e50f1016dd5ec3515cc910dc91ea",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 267828,
        "upload_time": "2016-05-02T11:25:24",
        "url": "https://files.pythonhosted.org/packages/1c/f1/8d31e64d1c82a730d7438d5d41d907fcb8562c0133d8468b48e3c0de0d3e/zope.testrunner-4.5.0.zip"
      }
    ],
    "4.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6f19d6ba2eee06aa310a4399f8c16639",
          "sha256": "5e547a394f53adf64bb126634980058ed3950ba58432e20e0e030ed2323fce26"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.5.1.zip",
        "has_sig": false,
        "md5_digest": "6f19d6ba2eee06aa310a4399f8c16639",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 268236,
        "upload_time": "2016-06-21T00:23:56",
        "url": "https://files.pythonhosted.org/packages/46/8d/40b0b3b81088f731943b5b2fdf72ab17d533f56b5727db18b2ec424b5b7d/zope.testrunner-4.5.1.zip"
      }
    ],
    "4.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ab7c0708889218002a4f3f5b6824eb25",
          "sha256": "f57aa4729c353a137090081ad110d6bdf3a6489108e6878136e907fc14d6edff"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.6.0.zip",
        "has_sig": false,
        "md5_digest": "ab7c0708889218002a4f3f5b6824eb25",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 278215,
        "upload_time": "2016-12-28T09:14:36",
        "url": "https://files.pythonhosted.org/packages/bb/a7/d27e38f33c600ac823680e41b1f6780ad7b8a7f582d115b35da50712d1e2/zope.testrunner-4.6.0.zip"
      }
    ],
    "4.7.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dbd2dbf7b588824350c0ce5454d081b1",
          "sha256": "d78da70fe5863d953f55d9a609fddfffd067b45a2db399335f517e4cabfbbb3e"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.7.0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "dbd2dbf7b588824350c0ce5454d081b1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 240321,
        "upload_time": "2017-06-13T20:43:06",
        "url": "https://files.pythonhosted.org/packages/df/a6/899d21e90e2fccec31481ed5c137c4f967c59ad6f827546d7f60b74a8455/zope.testrunner-4.7.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c096363c683a31d7fa71bcc6485e2aa3",
          "sha256": "8ffcb4989829544a83d27e42b2eeb28f8fc134bd847d71ce8dca54f710526ef0"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.7.0.zip",
        "has_sig": true,
        "md5_digest": "c096363c683a31d7fa71bcc6485e2aa3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 260508,
        "upload_time": "2017-05-30T23:26:23",
        "url": "https://files.pythonhosted.org/packages/fb/1c/9ec186347393989b6052b0f8550ebc1bf1bd72ac3dd7604b386ca0dd5c95/zope.testrunner-4.7.0.zip"
      }
    ],
    "4.8.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7b8e8f3b81a224a4f36d1a97b54309e7",
          "sha256": "ed2a34164c7da873b614aac63dba9d0d1be6a8b184034c890bd3b7a23065d65d"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.8.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7b8e8f3b81a224a4f36d1a97b54309e7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 241648,
        "upload_time": "2017-11-10T15:40:10",
        "url": "https://files.pythonhosted.org/packages/1b/d0/31cf3059fb7b13c5c7dd81c0642c9b98cc196cd8d13d92f1c2ddde01cb8f/zope.testrunner-4.8.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "150610c418d6ad2b53dd8e5caf8aaf21",
          "sha256": "9aa26786e11d3e3cc9acd83eda2d7a83437517777a60fb5651e88362c896509d"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "150610c418d6ad2b53dd8e5caf8aaf21",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 161844,
        "upload_time": "2017-11-10T15:40:13",
        "url": "https://files.pythonhosted.org/packages/97/78/e0a082ec938e85690597d51ec57d5db8975392af0aa8f18a96a9c3664853/zope.testrunner-4.8.0.tar.gz"
      }
    ],
    "4.8.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d508473c1190da3d509a58bd0fff5688",
          "sha256": "fc88d4c1841a5802d2ef8754a73b56d1b1f4e4c4d10e407d21447d232a7144b7"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.8.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d508473c1190da3d509a58bd0fff5688",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 241899,
        "upload_time": "2017-11-12T14:02:27",
        "url": "https://files.pythonhosted.org/packages/ca/3b/631598843398bdfcd7c7ab68fc071d6a77edb4760a9cf6ec2919b76050a0/zope.testrunner-4.8.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "5183944f6a8a4b74e6b8a9efec863893",
          "sha256": "5fc9d31a6dcc1a40763b4384a59322d32464bbaa960851e9c7cee4100b4e3f0d"
        },
        "downloads": -1,
        "filename": "zope.testrunner-4.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5183944f6a8a4b74e6b8a9efec863893",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 162192,
        "upload_time": "2017-11-12T14:02:28",
        "url": "https://files.pythonhosted.org/packages/ab/0f/fcb49061023b648c4db71c93ad2d74ee93b81c17e13d2cc1f5e1c74b72b0/zope.testrunner-4.8.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d508473c1190da3d509a58bd0fff5688",
        "sha256": "fc88d4c1841a5802d2ef8754a73b56d1b1f4e4c4d10e407d21447d232a7144b7"
      },
      "downloads": -1,
      "filename": "zope.testrunner-4.8.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d508473c1190da3d509a58bd0fff5688",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 241899,
      "upload_time": "2017-11-12T14:02:27",
      "url": "https://files.pythonhosted.org/packages/ca/3b/631598843398bdfcd7c7ab68fc071d6a77edb4760a9cf6ec2919b76050a0/zope.testrunner-4.8.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "5183944f6a8a4b74e6b8a9efec863893",
        "sha256": "5fc9d31a6dcc1a40763b4384a59322d32464bbaa960851e9c7cee4100b4e3f0d"
      },
      "downloads": -1,
      "filename": "zope.testrunner-4.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5183944f6a8a4b74e6b8a9efec863893",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 162192,
      "upload_time": "2017-11-12T14:02:28",
      "url": "https://files.pythonhosted.org/packages/ab/0f/fcb49061023b648c4db71c93ad2d74ee93b81c17e13d2cc1f5e1c74b72b0/zope.testrunner-4.8.1.tar.gz"
    }
  ]
}