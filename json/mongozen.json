{
  "info": {
    "author": "Shay Palachy",
    "author_email": "shay.palachy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "mongozen\n########\n|PyPI-Status| |PyPI-Versions| |Build-Status| |Codecov| |LICENCE|\n\nEnhance MongoDB for Python dynamic shells and scripts.\n\n.. code-block:: python\n\n  import mongozen\n  users = mongozen.get_collection('users')\n\n.. contents::\n\n.. section-numbering::\n\n\nInstallation\n============\n\n.. code-block:: bash\n\n  pip install mongozen\n\n\nSetting up mongozen\n===================\n\nmongozen uses a couple of simple conventions to handle credentials and refer to MongoDB servers:\n\n1. Many companys deploy corresponding MongoDB servers on several environments, using a largely similar (though not identical) architecture. Common environments include production, staging and performance.\n2. On each of these environment a set of MongoDB servers are deployed.\n\nTo use mongozen you will need to set up a configuration file, detailing connection parameters, and a credentials file for mongozen to use.\n\nThe motivation behind this division is that the same group of developers (in a certain company, working on a certain project, etc.) might share a configuration file to both share connection details to a server (or a group of servers) and to enforce best practices (pool sizes, timeouts and read preferences), while credentials should be maintained per user.\n\n\nConfiguration file\n------------------\n\nTo configure ``mongozen``, create a ``.mongozen/mongozen_cfg.yml`` file in your **home folder**, populating it with the desired parameters and connection details. Here is an example (explanation follows):\n\n.. code-block:: yaml\n\n  envs:\n    production:\n      mongozen_env_params:\n        maxPoolSize: 10\n      transactionl_server:\n        host:\n          - 'ourmongo.bestcompany.com'\n        port: 28177\n        mongozen_server_params:\n          connectTimeoutMS: 2500\n  global_params:\n    readPreference: 'secondary'\n    maxIdleTimeMS: 60000\n\n* The ``envs`` parameter is the only mandatory parameter, and it is used to define which environments and servers mongozen \"knows\" about, and to define connection parameters for each of them. The only mandatory parameters are host (for host name) and port.\n\n  * Each environment can contain many server mappings.\n  * Each server mapping should include a ``host`` and ``port`` parameters, where ``host`` is a list of hostnames (which can be more than one in the case of a sharded cluster, for example) and ``port`` is an integer.\n\n* The ``global_params`` parameter can be used to detail parameters used for all connections (they will be passed to all ``pymongo.MongoClient`` constructor calls, unless overriden in the following ways).\n\n* The ``mongozen_env_params`` can be used in the same way inside a specific environment context, determining parameters used to initialize all clients connecting to that environment (also overiding corresponding values given at the global level).\n\n* The ``mongo_server_params`` works the same way for a specific server, also overiding global and environment level values.\n\nAny optional parameter of the ``pymongo.MongoClient`` constructor (of a type supported by the ``yaml`` format) can be given in the above three ways. Naturally, client objects are initialized without explictly stating the value of any optional optional parameter not given in the configuration file, thus delegating decisions regarding the appropriate default value to ``pymongo``.\n\nYou can print the current configuration your ``mongozen`` installation uses to terminal by running the following shell command:\n\n.. code-block:: bash\n\n  mongozen util printcfg\n\n\nCredentials file\n----------------\n\nYou must set up a credentials file for mongozen to use. Create a ``.mongozen/mongozen_credentials.yml`` file in your home folder, populating it with your MongoDB credentials, using an identical structure to the inner structure of the ``envs`` configuration parameters:\n\n.. code-block:: python\n\n  environment_name:\n    server_name:\n      reading:\n        username: reading_username\n        password: password1\n      writing:\n        username: writing_username\n        password: password2\n\nYou can extend this to include any number of environments and servers.\n\n\nConfiguring advanced features\n------------------------------\n\nThe following parameters control some of the more advanced features of ``mongozen``, detailed in the `Enhanced Python-based MongoDB shell`_ section. These too should be added to ``~/.mongozen/mongozen_cfg.yml``.\n\n* Use ``infer_parameters`` to turn the parameter inference feature on.\n* Use ``default_env`` to set which environment is used when the environment parameter is not supplied, and hints cannot be used (for example when directly getting a client object). Used only if ``infer_parameters`` is set to true.\n* Use ``default_server`` to similarly set which server is used when the server parameter is not supplied and hints cannot be used. Used only if ``infer_parameters`` is set to true.\n* Use ``env_priority`` and ``server_priority`` to give ordered lists detailing priorities when solving ambiguity for identically-named collections or databases present in several different environments and/or servers.\n* Use ``bad_db_terms`` to detail terms that, if appear in a db name, will prevent it from being inferred as a missing parameter. Common examples are terms such as ``admin``, ``config``, ``mirror``, etc.\n* Use ``bad_collection_names`` to prevent certain collections from being added as attributes of database objects (e.g. ``$cmd``).\n\nFor example:\n\n.. code-block:: python\n\n  env_priority:\n    - staging\n    - local\n    - production\n  server_priority:\n    production:\n      - user_data\n      - system_data\n    staging:\n      - system_data\n      - user_data\n  infer_parameters: True\n\n\nBasic Use\n=========\n\nGetting pymongo objects\n-----------------------\n\nTo get a ``pymongo`` MongoClient object with reading permissions connected to a server use:\n\n.. code-block:: python\n\n  prod_tr = mongozen.get_reading_client(server_name='system', env_name='production')\n\n``get_writing_clint`` works similarly to provide writing permissions.\n\nTo get a ``pymongo`` Database object use:\n\n.. code-block:: python\n\n  user_data = mongozen.get_db(db_name='user_data', server_name='system', env_name='staging')\n\nUse ``mode='writing'`` to get a db connected to a writing client; otherwise, the default mode is reading.\n\nFinally, to get a ``pymongo`` Collection object use:\n\n.. code-block:: python\n\n  users = mongozen.get_collection(collection_name='users', db_name='user_data', server_name='system', env_name='production')\n\nYou can of course omit keyword argument names for brevity:\n\n.. code-block:: python\n\n  users = mongozen.get_collection('users', 'user_data', 'system', 'production')\n\nLike with DB objects, reading access is the default (again, use ``mode='writing'`` for writing permissions).\n\n\nSmart pymongo objects\n---------------------------\n\nEnvironment and server attributes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo make things a little easier, ``mongozen`` also holds an attribute for each environment which can be used to access the servers of that environment using the following syntax:\n\n.. code-block:: python\n\n  sys_prod = mongozen.production.system\n\n\nDB and collection attributes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nmongozen also enhances the client, database and collection pymongo objects it returns. Client objects have all the databases of the server they are connected to as **attributes**, and the same goes for database objects and the collections they contain. For example:\n\n.. code-block:: python\n\n  sys_prod = mongozen.production.system\n  users = sys_prod.user_data.users\n  contacts = mongozen.production.system.user_data.contacts\n\nThis is unlike the default pymongo objects, where the same syntax can be used but rather accesses an object property. Having these as attributes (or descriptors, in some cases) rather than properties means they pop up in suggestions and auto-completions when using a dynamic Python REPL.\n\n\nCollection field types\n~~~~~~~~~~~~~~~~~~~~~~\n\nAdditionally, each collection object returned by ``mongozen`` has an attribute named ``fields`` which is a dictionary mapping field names to their types. This again enables some collection-agnostic code, such as:\n\n.. code-block:: python\n\n  def get_docs_since_timestamp(collection, timestamp):\n      if collection.fields['start'] == int:\n        matchop = {'start': {'$gte': timestamp}}\n      elif collection.fields['start'] == datetime.datetime:\n        matchop = {'start': {'$gte': timestamp_to_datetime(timestamp)}}\n      cursor = collection.find(filter=matchop)\n      return cursor\n\nThis attribute files need to be built (or rebuilt, on changes) using:\n\n.. code-block:: bash\n\n  mongozen util rebuildattr\n\n\nMatchop\n-------\n\nThe utility class ``Matchop``, which extends the standard Python ``dict``, provides a smart representation of a MongoDB matching operator with well-defined and optimized ``&`` and ``|`` operators. For example:\n\n.. code-block:: python\n\n  match_dateint = Matchop({'dateInt': {'$gt': 20161203}})\n  match_dateint_and_id = match_dateint & {'user_id': 12}\n  print(match_dateint_and_id)\n\nwill output\n\n.. code-block:: python\n\n  {'user_id': 12, 'dateInt': {'$gt': 20161203}}\n\nWhile\n\n.. code-block:: python\n\n  match_dateint = Matchop({'dateInt': {'$gt': 20161203}})\n  match_dateint_updated = match_dateint & {'dateInt': {'$gt': 20161208}}\n  print(match_dateint_updated)\n\nwill output\n\n.. code-block:: python\n\n  { {'dateInt': {'$gt': 20161208}} }\n\n\nUsefull Queries\n---------------\n\nAdditionally, mongozen contains quite a few useful MongoDB queries. They can be found in ``mongozen.queries``, divided into sub-modules by subject (such as common and time queries).\n\n\nEnhanced Python-based MongoDB Shell\n===================================\n\nmongozen can be configured to enhance the use of a Python REPL (for example IPython_ or the wonderfull ptpython_, especially when it is wrapped around IPython by running ``ptiptyhon``) as a powerfull MongoDB shell.\n\n.. _IPython: https://ipython.org/\n.. _ptpython: https://github.com/jonathanslenders/ptpython\n\nAll features geared towards this use of ``mongozen`` are optional, so as to leave the default behavior of ``mongozen`` appropriate for a component meant to be used in other Python scripts.\n\n\nIntelligent collection inference\n--------------------------------\n\nmongozen can be configured to intelligently infer parameters for the ``get_db`` and the ``get_collection`` methods. To enable parameter inference add the following line to your ``~/.mongozen/mongozen_cfg.yml`` file:\n\n.. code-block:: python\n\n  infer_parameters: True\n\nNow, with the parameter inference, you can ommit database and server names when \"getting\" a colection or a db object. ``mongozen`` will intelligently infer the missing parameters; ambiguity for identically-named collections present in several different environments and/or servers is solved using the a config parameter named ``env_priority``:\n\n.. code-block:: python\n\n  env_priority:\n    - production\n    - staging\n    - performance\n\nThe same can be done with per-environment server priority using:\n\n.. code-block:: python\n\n  server_priority:\n    production:\n      - system\n      - data_dumps\n\nFor example, to get the Pymongo Collection object corresponding to the *users* collection on the *ystem production* server, simply use:\n\n.. code-block:: python\n\n  import mongozen\n  users = mongozen.get_collection('users')\n\nYou can provide explicit hints using either `db_name` or `server_name`, but if configured correctly the ``get_collection`` method should intelligently infer these without needing any hints.\n\nSee the above `Configuration`_ section for further details on how to configure ``mongozen``.\n\n``mongozen`` needs mapping files that enable this feature. To use the feature, you will have to build them using:\n\n.. code-block:: bash\n\n  mongozen util rebuildmaps\n\n If new databases and collections are added these maps become outdated, and might infere parameters incorrectly. If you encounter this problem, run the command again.\n\nContributing\n============\n\nPackage author and current maintainer is Shay Palachy (shay.palachy@gmail.com); You are more than welcome to approach him for help. Contributions are very welcomed.\n\nInstalling for development\n----------------------------\n\nClone:\n\n.. code-block:: bash\n\n  git clone git@github.com:shaypal5/mongozen.git\n\n\nInstall in development mode:\n\n.. code-block:: bash\n\n  cd mongozen\n  pip install -e .\n\n\nRunning the tests\n-----------------\n\nTo run the tests use:\n\n.. code-block:: bash\n\n  pip install pytest pytest-cov coverage\n  cd mongozen\n  pytest\n\n\nAdding documentation\n--------------------\n\nThe project is documented using the `numpy docstring conventions`_, which were chosen as they are perhaps the most widely-spread conventions that are both supported by common tools such as Sphinx and result in human-readable docstrings. When documenting code you add to this project, follow `these conventions`_.\n\n.. _`numpy docstring conventions`: https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt\n.. _`these conventions`: https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt\n\n\nCredits\n=======\n\nCreated by Shay Palachy (shay.palachy@gmail.com).\n\n\n.. |PyPI-Status| image:: https://img.shields.io/pypi/v/mongozen.svg\n  :target: https://pypi.python.org/pypi/mongozen\n\n.. |PyPI-Versions| image:: https://img.shields.io/pypi/pyversions/mongozen.svg\n   :target: https://pypi.python.org/pypi/mongozen\n\n.. |Build-Status| image:: https://travis-ci.org/shaypal5/mongozen.svg?branch=master\n  :target: https://travis-ci.org/shaypal5/mongozen\n\n.. |LICENCE| image:: https://img.shields.io/github/license/shaypal5/mongozen.svg\n  :target: https://github.com/shaypal5/mongozen/blob/master/LICENSE\n\n.. |Codecov| image:: https://codecov.io/github/shaypal5/mongozen/coverage.svg?branch=master\n   :target: https://codecov.io/github/shaypal5/mongozen?branch=master\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/shaypal5/mongozen",
    "keywords": "mongodb",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mongozen",
    "platform": "any",
    "project_url": "https://pypi.org/project/mongozen/",
    "release_url": "https://pypi.org/project/mongozen/0.0.5/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Enhance MongoDB for Python dynamic shells and scripts.",
    "version": "0.0.5"
  },
  "releases": {
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6875a5544f69b5c6df81932498774667",
          "sha256": "364dc8099ea645a1cd3ea3231292d2f96a7689b4a89da23724b36479a453c6ae"
        },
        "downloads": -1,
        "filename": "mongozen-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6875a5544f69b5c6df81932498774667",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 136642,
        "upload_time": "2017-10-10T23:02:18",
        "url": "https://files.pythonhosted.org/packages/b5/f3/40b19f13b9f3995e779a369b3c81d59b4ec26a1a1bf947e32b7fb21d474f/mongozen-0.0.3.tar.gz"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1659745e28aea1c58e6648f153971cf5",
          "sha256": "dded8c468c54ead3a1b23fc19e4bcbee63b68350335dbcbf775569ec408dc0a3"
        },
        "downloads": -1,
        "filename": "mongozen-0.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1659745e28aea1c58e6648f153971cf5",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 206324,
        "upload_time": "2017-12-13T16:09:27",
        "url": "https://files.pythonhosted.org/packages/20/fe/b40d2e1f2919d3e0f63e6908c73b511b212570bb7be24cc87d7fd3f8b0e6/mongozen-0.0.4-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "275db39a89ea760fc96ecfba759aa337",
          "sha256": "abac24b285dc180025b99e60c865d9a97aa0c7f31f906f3f58fb04f773644c1d"
        },
        "downloads": -1,
        "filename": "mongozen-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "275db39a89ea760fc96ecfba759aa337",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 149560,
        "upload_time": "2017-12-13T16:09:22",
        "url": "https://files.pythonhosted.org/packages/6b/6b/1c0f871e22fe2059443bd999adf9a765d6346763706806326d0641dd3959/mongozen-0.0.4.tar.gz"
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "55be8afb7d9003697050a28cf1c0083c",
          "sha256": "69f37e8f6012a93dca4a4b7b5aa16616e498485fd77a8e0c1de6ace345473dab"
        },
        "downloads": -1,
        "filename": "mongozen-0.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55be8afb7d9003697050a28cf1c0083c",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 75854,
        "upload_time": "2018-02-05T00:18:26",
        "url": "https://files.pythonhosted.org/packages/20/64/360b5d41c694cd30c2d7a5058916880d4fce13963825dad848d9a6b8a955/mongozen-0.0.5-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ed3b04538efd27eff41064d29420d7d2",
          "sha256": "ba19680a63cb9ac41bdae0dfe171fc4caaf8226b99ee847f5bcfa105cc80cb65"
        },
        "downloads": -1,
        "filename": "mongozen-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ed3b04538efd27eff41064d29420d7d2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 74074,
        "upload_time": "2018-02-05T00:18:24",
        "url": "https://files.pythonhosted.org/packages/73/94/bde258dc2ce741962f90167c3a550bb41f964eee594b0044baa0a97092e3/mongozen-0.0.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "55be8afb7d9003697050a28cf1c0083c",
        "sha256": "69f37e8f6012a93dca4a4b7b5aa16616e498485fd77a8e0c1de6ace345473dab"
      },
      "downloads": -1,
      "filename": "mongozen-0.0.5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "55be8afb7d9003697050a28cf1c0083c",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "size": 75854,
      "upload_time": "2018-02-05T00:18:26",
      "url": "https://files.pythonhosted.org/packages/20/64/360b5d41c694cd30c2d7a5058916880d4fce13963825dad848d9a6b8a955/mongozen-0.0.5-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "ed3b04538efd27eff41064d29420d7d2",
        "sha256": "ba19680a63cb9ac41bdae0dfe171fc4caaf8226b99ee847f5bcfa105cc80cb65"
      },
      "downloads": -1,
      "filename": "mongozen-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "ed3b04538efd27eff41064d29420d7d2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 74074,
      "upload_time": "2018-02-05T00:18:24",
      "url": "https://files.pythonhosted.org/packages/73/94/bde258dc2ce741962f90167c3a550bb41f964eee594b0044baa0a97092e3/mongozen-0.0.5.tar.gz"
    }
  ]
}