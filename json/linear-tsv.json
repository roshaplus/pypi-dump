{
  "info": {
    "author": "Jason Dusek",
    "author_email": "jason.dusek@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "`Linear TSV`__ is a line-oriented, portable tabular data format. Tabular data\n-- rows of tuples, each of the same length -- is commonly stored as CSV and is\nthe lingua franca of spreadsheets, databases and analysis tools.\n\n__ http://dataprotocols.org/linear-tsv/\n\nCSV is almost but not quite line-oriented, because newlines are quoted, not\nescaped. In the TSV format presented here, escape codes are used for newlines\nand tabs in field data, allowing naive filtering with line-oriented shell\ntools like ``sort``, ``fgrep`` and ``cut`` to work as expected. In all of its\ndetails, the format derives from the ``TEXT`` serialization mode of Postgres\nand MySQL.\n\n----------\nPython API\n----------\n\n.. code:: python\n\n    from collections import namedtuple\n    import sys\n\n    import tsv\n\n\n    # Simplest access mode: parse a text stream (strings are okay, too) to a\n    # generator of lists of strings.\n    lists = tsv.un(sys.stdin)\n\n\n    # Parse each row as a particular class derived with namedtuple()\n    class Stats(namedtuple('Stats', ['state', 'city', 'population', 'area'])): \n        pass\n\n    tuples = tsv.un(sys.stdin, Stats)\n\n\n    # Format a collection of rows, getting back a generator of strings, one\n    # each row. Any parseable type is okay.\n    strings = tsv.to(lists)\n    strings = tsv.to(tuples)\n\n    # Write the rows to a handle:\n    strings = tsv.to(tuples, sys.stdout)\n\n------------------\nFormat Description\n------------------\n\nIn this format, all records are separated by ASCII newlines (``0x0a``) and\nfields within a record are separated with ASCII tab (``0x09``). It is permitted\nbut discouraged to separate records with ``\\r\\n``.\n\nTo include newlines, tabs, carriage returns and backslashes in field data, the\nfollowing escape sequences must be used:\n\n* ``\\n`` for newline,\n\n* ``\\t`` for tab,\n\n* ``\\r`` for carriage return,\n\n* ``\\\\`` for backslash.\n\nTo indicate missing data for a field, the character sequence ``\\N`` (bytes\n``0x5c`` and ``0x4e``) is used. Note that the ``N`` is capitalized. This\ncharacter sequence is exactly that used by SQL databases to indicate SQL\n``NULL`` in their tab-separated output mode.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~\nA Word About Header Lines\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are no header lines specified by this format. One objection to them is\nthat they break the naive concantenation of files. Another is that they are\nanithetical to stream processing. Yet another is that one generally wants more\nthan column names -- one wants at least column types. Better to do nothing\nthan too little.\n\n----------\nMotivation\n----------\n\nIn advocating a shift to a line-oriented, tab-separated serialization format,\nwe are endorsing an existing format: the default serialization format of both\nPostgres and MySQL. We propose to standardize a subset of the format common to\nboth database systems.\n\nA truly line-oriented format for tabular data, where newline, carriage return\nand the separator are always represented by escape sequences, offers many\npractical advantages, among them:\n\n* The parsers are simple and fast.\n\n* First pass filtering and sorting for line-oriented formats is easy to\n  implement in high-level languages, like Python and Java.\n\n* Analysis and transformation of line-oriented data with command line tools is\n  simple, dependable and often surprisingly efficient.\n\n* By requiring escape sequences when newlines and tabs are in field text, the\n  format allows parsers to naively and efficiently split data on raw byte\n  values: ``0x09`` for fields and ``0x0a`` for records.\n\nCSV is almost right and it's worth talking about the disadvantages of CSV that\nmotivate the author to promote another tabular data format:\n\n* In some locales, ``,`` is the decimal separator; whereas the ASCII tab never\n  collides with the decimal separator. More generally, the tab is not a\n  centuries old glyph that one encounters in natural language.\n\n* CSV is not truly line-oriented -- newlines are quoted, not escaped. A single\n  record can span multiple physical lines. In consequence, line-oriented\n  processing almost works until it doesn't, and then simple tricks -- sorting\n  on the first column to optimize insertion order or batching records in to\n  groups of a few thousand to get better insert performance -- require\n  relatively complicated code to get right.\n\n* CSV's quoting style requires one to mingle field data parsing and record\n  splitting. Taking every third record still requires one to parse the prior\n  two, since a newline inside quotes is not a record separator.\n\n* CSV is ambiguous in many small areas -- the presence or absence of a header\n  line, the choice of quote character (single or double?) and even the choice\n  of separator character are all axes of variability.\n\n----------------------------\nSample Parsers & Serializers\n----------------------------\n\nA few sample parsers are included in the distribution.\n\nBash\n  ``tsv.bash < cities10.tsv``\n\nPython\n  ``example.py < cities10.tsv``\n\n-------\nGrammar\n-------\n\nThis grammar is presented in the W3C EBNF format.\n\n.. code:: bnf\n\n    TSV        ::= Row (NL Row)*\n\n    /* This form may be read but not written by conforming implementations. */\n    TSVInput   ::= Row (CR? NL Row)*\n\n    Row        ::= Field (Tab Field)*\n    Field      ::= (Escape|NoOpEscape|PlainChar)*\n\n    Char       ::= [http://www.w3.org/TR/xml#NT-Char]\n    PlainChar  ::= Char - (NL|Tab|CR|'\\')\n    NL         ::= #x0A\n    CR         ::= #x0D\n    Tab        ::= #x09\n\n    Escape     ::= '\\n' | '\\r' | '\\t' | '\\\\'\n    NoOpEscape ::= '\\' (Char - ('n'|'r'|'t'|'\\'))\n\nA diagram of the grammar can be generated online with the\n`Bottlecaps Railroad Diagram generator`__.\n\n__ http://bottlecaps.de/rr/ui\n\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/solidsnack/tsv",
    "keywords": null,
    "license": "Apache",
    "maintainer": null,
    "maintainer_email": null,
    "name": "linear-tsv",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/linear-tsv/",
    "release_url": "https://pypi.org/project/linear-tsv/1.0.0/",
    "requires_python": null,
    "summary": "Line-oriented, tab-separated value format",
    "version": "1.0.0"
  },
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7a16f324bb0b50ca042d5e86093c3e96",
          "sha256": "05296ee3f0e8539b5f8f56eeb03c24c128d3312736c778b81047c30f3a931149"
        },
        "downloads": 1738,
        "filename": "linear-tsv-0.0.0.tar.gz",
        "has_sig": true,
        "md5_digest": "7a16f324bb0b50ca042d5e86093c3e96",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3129,
        "upload_time": "2014-06-16T04:30:28",
        "url": "https://files.pythonhosted.org/packages/18/72/e5f99335b7da8bfe2d5df88df4eb045e486e3c1b368a02cd66a6f39ba080/linear-tsv-0.0.0.tar.gz"
      }
    ],
    "0.99.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f334ecf64b71f83263f88c82cadbdb6e",
          "sha256": "4e9db9f447d507416bbc56107173c60045f5ab5c8c6c5ab8a48f773c4885e3f8"
        },
        "downloads": 396,
        "filename": "linear-tsv-0.99.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f334ecf64b71f83263f88c82cadbdb6e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4917,
        "upload_time": "2016-05-08T20:35:44",
        "url": "https://files.pythonhosted.org/packages/0f/75/80eb72f7f35d012c4ff136e046e00e62cdf4af11d0a1e9c29dde366de98c/linear-tsv-0.99.0.tar.gz"
      }
    ],
    "0.99.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4c67d979322da4b5fc4878b222584d4d",
          "sha256": "10fa5fb596995beea788636b7c349715e8fa2d2d801ab06e9016f6bd3951eec3"
        },
        "downloads": 927,
        "filename": "linear-tsv-0.99.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4c67d979322da4b5fc4878b222584d4d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5130,
        "upload_time": "2016-05-09T00:58:46",
        "url": "https://files.pythonhosted.org/packages/2d/a1/00ecc5d8f72580bd64b80cd8a5c30bcff9a21822559c3bca8e6fadd35bad/linear-tsv-0.99.1.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "65b389bc35076ae9e3ac87518232f8b3",
          "sha256": "052d982e6b1133d1c090cad890bcf014e7b8d65fc7154da84bfc20b6876152c6"
        },
        "downloads": 1879,
        "filename": "linear-tsv-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "65b389bc35076ae9e3ac87518232f8b3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5119,
        "upload_time": "2016-09-28T06:28:23",
        "url": "https://files.pythonhosted.org/packages/2e/2a/aa4ab710c0d641e8411ccbd380acd8942f14e18d7891a751a22fde9b11ee/linear-tsv-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "65b389bc35076ae9e3ac87518232f8b3",
        "sha256": "052d982e6b1133d1c090cad890bcf014e7b8d65fc7154da84bfc20b6876152c6"
      },
      "downloads": 1879,
      "filename": "linear-tsv-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "65b389bc35076ae9e3ac87518232f8b3",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5119,
      "upload_time": "2016-09-28T06:28:23",
      "url": "https://files.pythonhosted.org/packages/2e/2a/aa4ab710c0d641e8411ccbd380acd8942f14e18d7891a751a22fde9b11ee/linear-tsv-1.0.0.tar.gz"
    }
  ]
}