{
  "info": {
    "author": "Open Knowledge Foundation",
    "author_email": "info@okfn.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "tableschema-py\n==============\n\n| |Travis|\n| |Coveralls|\n| |PyPi|\n| |SemVer|\n| |Gitter|\n\nA library for working with `Table\nSchema <http://specs.frictionlessdata.io/table-schema/>`__ in Python.\n\n    Version v1.0 includes various important changes. Please read a\n    `migration guide <#v10>`__.\n\nFeatures\n--------\n\n-  ``Table`` to work with data tables described by Table Schema\n-  ``Schema`` representing Table Schema\n-  ``Field`` representing Table Schema field\n-  ``validate`` to validate Table Schema\n-  ``infer`` to infer Table Schema from data\n-  built-in command-line interface to validate and infer schemas\n-  storage/plugins system to connect tables to different storage\n   backends like SQL Database\n\nGettings Started\n----------------\n\nInstallation\n~~~~~~~~~~~~\n\nThe package use semantic versioning. It means that major versions could\ninclude breaking changes. It's highly recommended to specify\n``tableschema`` version range in your ``setup/requirements`` file e.g.\n``tableschema>=1.0,<2.0``.\n\n.. code:: bash\n\n    $ pip install tableschema\n\nExamples\n~~~~~~~~\n\nCode examples in this readme requires Python 3.3+ interpreter. You could\nsee even more example in\n`examples <https://github.com/frictionlessdata/tableschema-py/tree/master/examples>`__\ndirectory.\n\n.. code:: python\n\n    from tableschema import Table\n\n    # Create table\n    table = Table('path.csv', schema='schema.json')\n\n    # Print schema descriptor\n    print(table.schema.descriptor)\n\n    # Print cast rows in a dict form\n    for keyed_row in table.iter(keyed=True):\n        print(keyed_row)\n\nDocumentation\n-------------\n\nTable\n~~~~~\n\nA table is a core concept in a tabular data world. It represents a data\nwith a metadata (Table Schema). Let's see how we could use it in\npractice.\n\nConsider we have some local csv file. It could be inline data or remote\nlink - all supported by ``Table`` class (except local files for\nin-brower usage of course). But say it's ``data.csv`` for now:\n\n.. code:: csv\n\n    city,location\n    london,\"51.50,-0.11\"\n    paris,\"48.85,2.30\"\n    rome,N/A\n\nLet's create and read a table. We use static ``Table.load`` method and\n``table.read`` method with a ``keyed`` option to get array of keyed\nrows:\n\n.. code:: python\n\n    table = Table('data.csv')\n    table.headers # ['city', 'location']\n    table.read(keyed=True)\n    # [\n    #   {city: 'london', location: '51.50,-0.11'},\n    #   {city: 'paris', location: '48.85,2.30'},\n    #   {city: 'rome', location: 'N/A'},\n    # ]\n\nAs we could see our locations are just a strings. But it should be\ngeopoints. Also Rome's location is not available but it's also just a\n``N/A`` string instead of JavaScript ``null``. First we have to infer\nTable Schema:\n\n.. code:: python\n\n    table.infer()\n    table.schema.descriptor\n    # { fields:\n    #   [ { name: 'city', type: 'string', format: 'default' },\n    #     { name: 'location', type: 'geopoint', format: 'default' } ],\n    #  missingValues: [ '' ] }\n    table.read(keyed=True)\n    # Fails with a data validation error\n\nLet's fix not available location. There is a ``missingValues`` property\nin Table Schema specification. As a first try we set ``missingValues``\nto ``N/A`` in ``table.schema.descriptor``. Schema descriptor could be\nchanged in-place but all changes sould be commited by\n``table.schema.commit()``:\n\n.. code:: python\n\n    table.schema.descriptor['missingValues'] = 'N/A'\n    table.schema.commit()\n    table.schema.valid # false\n    table.schema.errors\n    # [<ValidationError: \"'N/A' is not of type 'array'\">]\n\nAs a good citiziens we've decided to check out schema descriptor\nvalidity. And it's not valid! We sould use an array for\n``missingValues`` property. Also don't forget to have an empty string as\na missing value:\n\n.. code:: python\n\n    table.schema.descriptor['missingValues'] = ['', 'N/A']\n    table.schema.commit()\n    table.schema.valid # true\n\nAll good. It looks like we're ready to read our data again:\n\n.. code:: python\n\n    table.read(keyed=True)\n    # [\n    #   {city: 'london', location: [51.50,-0.11]},\n    #   {city: 'paris', location: [48.85,2.30]},\n    #   {city: 'rome', location: null},\n    # ]\n\nNow we see that:\n\n-  locations are arrays with numeric lattide and longitude\n-  Rome's location is a native Python ``None``\n\nAnd because there are no errors on data reading we could be sure that\nour data is valid againt our schema. Let's save it:\n\n.. code:: python\n\n    table.schema.save('schema.json')\n    table.save('data.csv')\n\nOur ``data.csv`` looks the same because it has been stringified back to\n``csv`` format. But now we have ``schema.json``:\n\n.. code:: json\n\n    {\n        \"fields\": [\n            {\n                \"name\": \"city\",\n                \"type\": \"string\",\n                \"format\": \"default\"\n            },\n            {\n                \"name\": \"location\",\n                \"type\": \"geopoint\",\n                \"format\": \"default\"\n            }\n        ],\n        \"missingValues\": [\n            \"\",\n            \"N/A\"\n        ]\n    }\n\nIf we decide to improve it even more we could update the schema file and\nthen open it again. But now providing a schema path:\n\n.. code:: python\n\n    table = Table('data.csv', schema='schema.json')\n    # Continue the work\n\nIt was onle basic introduction to the ``Table`` class. To learn more\nlet's take a look on ``Table`` class API reference.\n\n``Table(source, schema=None, strict=False, post_cast=[], storage=None, **options})``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nConstructor to instantiate ``Table`` class. If ``references`` argument\nis provided foreign keys will be checked on any reading operation.\n\n-  ``source (str/list[])`` - data source (one of):\n-  local file (path)\n-  remote file (url)\n-  array of arrays representing the rows\n-  ``schema (any)`` - data schema in all forms supported by ``Schema``\n   class\n-  ``strict (bool)`` - strictness option to pass to ``Schema``\n   constructor\n-  ``post_cast (function[])`` - list of post cast processors\n-  ``storage (None/str)`` - storage name like ``sql`` or ``bigquery``\n-  ``options (dict)`` - ``tabulator`` or storage options\n-  ``(exceptions.TableSchemaException)`` - raises any error occured in\n   table creation process\n-  ``(Table)`` - returns data table class instance\n\n``table.headers``\n^^^^^^^^^^^^^^^^^\n\n-  ``(str[])`` - returns data source headers\n\n``table.schema``\n^^^^^^^^^^^^^^^^\n\n-  ``(Schema)`` - returns schema class instance\n\n``table.iter(keyed=Fase, extended=False, cast=True, relations=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIter through the table data and emits rows cast based on table schema.\nData casting could be disabled.\n\n-  ``keyed (bool)`` - iter keyed rows\n-  ``extended (bool)`` - iter extended rows\n-  ``cast (bool)`` - disable data casting if false\n-  ``relations (dict)`` - dict of foreign key references in a form of\n   ``{resource1: [{field1: value1, field2: value2}, ...], ...}``. If\n   provided foreign key fields will checked and resolved to its\n   references\n-  ``(exceptions.TableSchemaException)`` - raises any error occured in\n   this process\n-  ``(any[]/any{})`` - yields rows:\n-  ``[value1, value2]`` - base\n-  ``{header1: value1, header2: value2}`` - keyed\n-  ``[rowNumber, [header1, header2], [value1, value2]]`` - extended\n\n``table.read(keyed=False, extended=False, cast=True, relations=False, limit=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRead the whole table and returns as array of rows. Count of rows could\nbe limited.\n\n-  ``keyed (bool)`` - flag to emit keyed rows\n-  ``extended (bool)`` - flag to emit extended rows\n-  ``cast (bool)`` - flag to disable data casting if false\n-  ``relations (dict)`` - dict of foreign key references in a form of\n   ``{resource1: [{field1: value1, field2: value2}, ...], ...}``. If\n   provided foreign key fields will checked and resolved to its\n   references\n-  ``limit (int)`` - integer limit of rows to return\n-  ``(exceptions.TableSchemaException)`` - raises any error occured in\n   this process\n-  ``(list[])`` - returns array of rows (see ``table.iter``)\n\n``table.infer(limit=100)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInfer a schema for the table. It will infer and set Table Schema to\n``table.schema`` based on table data.\n\n-  ``limit (int)`` - limit rows samle size\n-  ``(dict)`` - returns Table Schema descriptor\n\n``table.save(target, storage=None, **options)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n    To save schema use ``table.schema.save()``\n\nSave data source to file locally in CSV format with ``,`` (comma)\ndelimiter\n\n-  ``target (str)`` - saving target (e.g. file path)\n-  ``storage (None/str)`` - storage name like ``sql`` or ``bigquery``\n-  ``options (dict)`` - ``tabulator`` or storage options\n-  ``(exceptions.TableSchemaException)`` - raises an error if there is\n   saving problem\n-  ``(True/Storage)`` - returns true or storage instance\n\nSchema\n~~~~~~\n\nA model of a schema with helpful methods for working with the schema and\nsupported data. Schema instances can be initialized with a schema source\nas a url to a JSON file or a JSON object. The schema is initially\nvalidated (see `validate <#validate>`__ below). By default validation\nerrors will be stored in ``schema.errors`` but in a strict mode it will\nbe instantly raised.\n\nLet's create a blank schema. It's not valid because\n``descriptor.fields`` property is required by the `Table\nSchema <http://specs.frictionlessdata.io/table-schema/>`__\nspecification:\n\n.. code:: python\n\n    schema = Schema()\n    schema.valid # false\n    schema.errors\n    # [<ValidationError: \"'fields' is a required property\">]\n\nTo do not create a schema descriptor by hands we will use a\n``schema.infer`` method to infer the descriptor from given data:\n\n.. code:: python\n\n    schema.infer([\n      ['id', 'age', 'name'],\n      ['1','39','Paul'],\n      ['2','23','Jimmy'],\n      ['3','36','Jane'],\n      ['4','28','Judy'],\n    ])\n    schema.valid # true\n    schema.descriptor\n    #{ fields:\n    #   [ { name: 'id', type: 'integer', format: 'default' },\n    #     { name: 'age', type: 'integer', format: 'default' },\n    #     { name: 'name', type: 'string', format: 'default' } ],\n    #  missingValues: [ '' ] }\n\nNow we have an inferred schema and it's valid. We could cast data row\nagainst our schema. We provide a string input by an output will be cast\ncorrespondingly:\n\n.. code:: python\n\n    schema.cast_row(['5', '66', 'Sam'])\n    # [ 5, 66, 'Sam' ]\n\nBut if we try provide some missing value to ``age`` field cast will fail\nbecause for now only one possible missing value is an empty string.\nLet's update our schema:\n\n.. code:: python\n\n    schema.cast_row(['6', 'N/A', 'Walt'])\n    # Cast error\n    schema.descriptor['missingValues'] = ['', 'N/A']\n    schema.commit()\n    schema.cast_row(['6', 'N/A', 'Walt'])\n    # [ 6, None, 'Walt' ]\n\nWe could save the schema to a local file. And we could continue the work\nin any time just loading it from the local file:\n\n.. code:: python\n\n    schema.save('schema.json')\n    schema = Schema('schema.json')\n\nIt was onle basic introduction to the ``Schema`` class. To learn more\nlet's take a look on ``Schema`` class API reference.\n\n``Schema(descriptor, strict=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nConstructor to instantiate ``Schema`` class.\n\n-  ``descriptor (str/dict)`` - schema descriptor:\n-  local path\n-  remote url\n-  dictionary\n-  ``strict (bool)`` - flag to alter validation behaviour:\n-  if false error will not be raised and all error will be collected in\n   ``schema.errors``\n-  if strict is true any validation error will be raised immediately\n-  ``(exceptions.TableSchemaException)`` - raises any error occured in\n   the process\n-  ``(Schema)`` - returns schema class instance\n\n``schema.valid``\n^^^^^^^^^^^^^^^^\n\n-  ``(bool)`` - returns validation status. It always true in strict\n   mode.\n\n``schema.errors``\n^^^^^^^^^^^^^^^^^\n\n-  ``(Exception[])`` - returns validation errors. It always empty in\n   strict mode.\n\n``schema.descriptor``\n^^^^^^^^^^^^^^^^^^^^^\n\n-  ``(dict)`` - returns schema descriptor\n\n``schema.primary_key``\n^^^^^^^^^^^^^^^^^^^^^^\n\n-  ``(str[])`` - returns schema primary key\n\n``schema.foreign_keys``\n^^^^^^^^^^^^^^^^^^^^^^^\n\n-  ``(dict[])`` - returns schema foreign keys\n\n``schema.fields``\n^^^^^^^^^^^^^^^^^\n\n-  ``(Field[])`` - returns an array of ``Field`` instances\n\n``schema.field_names``\n^^^^^^^^^^^^^^^^^^^^^^\n\n-  ``(str[])`` - returns an array of field names.\n\n``schema.get_field(name)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGet schema field by name.\n\n-  ``name (str)`` - schema field name\n-  ``(Field/None)`` - returns ``Field`` instance or null if not found\n\n``schema.add_field(descriptor)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd new field to schema. The schema descriptor will be validated with\nnewly added field descriptor.\n\n-  ``descriptor (dict)`` - field descriptor\n-  ``(exceptions.TableSchemaException)`` - raises any error occured in\n   the process\n-  ``(Field/None)`` - returns added ``Field`` instance or null if not\n   added\n\n``schema.remove_field(name)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRemove field resource by name. The schema descriptor will be validated\nafter field descriptor removal.\n\n-  ``name (str)`` - schema field name\n-  ``(exceptions.TableSchemaException)`` - raises any error occured in\n   the process\n-  ``(Field/None)`` - returns removed ``Field`` instances or null if not\n   found\n\n``schema.cast_row(row)``\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nCast row based on field types and formats.\n\n-  ``row (any[])`` - data row as an array of values\n-  ``(any[])`` - returns cast data row\n\n``schema.infer(rows, headers=1)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInfer and set ``schema.descriptor`` based on data sample.\n\n-  ``rows (list[])`` - array of arrays representing rows.\n-  ``headers (int/str[])`` - data sample headers (one of):\n-  row number containing headers (``rows`` should contain headers rows)\n-  array of headers (``rows`` should NOT contain headers rows)\n-  ``{dict}`` - returns Table Schema descriptor\n\n``schema.commit(strict=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUpdate schema instance if there are in-place changes in the descriptor.\n\n-  ``strict (bool)`` - alter ``strict`` mode for further work\n-  ``(exceptions.TableSchemaException)`` - raises any error occured in\n   the process\n-  ``(bool)`` - returns true on success and false if not modified\n\n.. code:: python\n\n    descriptor = {'fields': [{'name': 'field', 'type': 'string'}]}\n    schema = Schema(descriptor)\n\n    schema.getField('name')['type'] # string\n    schema.descriptor.fields[0]['type'] = 'number'\n    schema.getField('name')['type'] # string\n    schema.commit()\n    schema.getField('name')['type'] # number\n\n``schema.save(target)``\n^^^^^^^^^^^^^^^^^^^^^^^\n\nSave schema descriptor to target destination.\n\n-  ``target (str)`` - path where to save a descriptor\n-  ``(exceptions.TableSchemaException)`` - raises any error occured in\n   the process\n-  ``(bool)`` - returns true on success\n\nField\n~~~~~\n\n.. code:: python\n\n    from tableschema import Field\n\n    # Init field\n    field = Field({'name': 'name', type': 'number'})\n\n    # Cast a value\n    field.cast_value('12345') # -> 12345\n\nData values can be cast to native Python objects with a Field instance.\nType instances can be initialized with `field\ndescriptors <https://specs.frictionlessdata.io/table-schema/>`__. This\nallows formats and constraints to be defined.\n\nCasting a value will check the value is of the expected type, is in the\ncorrect format, and complies with any constraints imposed by a schema.\nE.g. a date value (in ISO 8601 format) can be cast with a DateType\ninstance. Values that can't be cast will raise an ``InvalidCastError``\nexception.\n\nCasting a value that doesn't meet the constraints will raise a\n``ConstraintError`` exception.\n\nHere is an API reference for the ``Field`` class:\n\n``new Field(descriptor, missingValues=[''])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nConstructor to instantiate ``Field`` class.\n\n-  ``descriptor (dict)`` - schema field descriptor\n-  ``missingValues (str[])`` - an array with string representing missing\n   values\n-  ``(exceptions.TableSchemaException)`` - raises any error occured in\n   the process\n-  ``(Field)`` - returns field class instance\n\n``field.name``\n^^^^^^^^^^^^^^\n\n-  ``(str)`` - returns field name\n\n``field.type``\n^^^^^^^^^^^^^^\n\n-  ``(str)`` - returns field type\n\n``field.format``\n^^^^^^^^^^^^^^^^\n\n-  ``(str)`` - returns field format\n\n``field.required``\n^^^^^^^^^^^^^^^^^^\n\n-  ``(bool)`` - returns true if field is required\n\n``field.constraints``\n^^^^^^^^^^^^^^^^^^^^^\n\n-  ``(dict)`` - returns an object with field constraints\n\n``field.descriptor``\n^^^^^^^^^^^^^^^^^^^^\n\n-  ``(dict)`` - returns field descriptor\n\n``field.castValue(value, constraints=true)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCast given value according to the field type and format.\n\n-  ``value (any)`` - value to cast against field\n-  ``constraints (boll/str[])`` - gets constraints configuration\n-  it could be set to true to disable constraint checks\n-  it could be an Array of constraints to check e.g. ['minimum',\n   'maximum']\n-  ``(exceptions.TableSchemaException)`` - raises any error occured in\n   the process\n-  ``(any)`` - returns cast value\n\n``field.testValue(value, constraints=true)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTest if value is compliant to the field.\n\n-  ``value (any)`` - value to cast against field\n-  ``constraints (bool/str[])`` - constraints configuration\n-  ``(bool)`` - returns if value is compliant to the field\n\nvalidate\n~~~~~~~~\n\nGiven a schema as JSON file, url to JSON file, or a Python dict,\n``validate`` returns ``True`` for a valid Table Schema, or raises an\nexception, ``exceptions.ValidationError``. It validates only **schema**,\nnot data against schema!\n\n.. code:: python\n\n    from tableschema import validate, exceptions\n\n    try:\n        valid = validate(descriptor)\n    except exceptions.ValidationError as exception:\n       for error in exception.errors:\n           # handle individual error\n\n``validate(descriptor)``\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nValidate a Table Schema descriptor.\n\n-  ``descriptor (str/dict)`` - schema descriptor (one of):\n-  local path\n-  remote url\n-  object\n-  (exceptions.ValidationError) - raises on invalid\n-  ``(bool)`` - returns true on valid\n\ninfer\n~~~~~\n\nGiven headers and data, ``infer`` will return a Table Schema as a Python\ndict based on the data values. Given the data file,\n``data_to_infer.csv``:\n\n::\n\n    id,age,name\n    1,39,Paul\n    2,23,Jimmy\n    3,36,Jane\n    4,28,Judy\n\nLet's call ``infer`` for this file:\n\n.. code:: python\n\n    from tableschema import infer\n\n    descriptor = infer('data_to_infer.csv')\n    #{'fields': [\n    #    {\n    #        'format': 'default',\n    #        'name': 'id',\n    #        'type': 'integer'\n    #    },\n    #    {\n    #        'format': 'default',\n    #        'name': 'age',\n    #        'type': 'integer'\n    #    },\n    #    {\n    #        'format': 'default',\n    #        'name': 'name',\n    #        'type': 'string'\n    #    }]\n    #}\n\nThe number of rows used by ``infer`` can be limited with the ``limit``\nargument.\n\n``infer(source, headers=1, limit=100, **options)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInfer source schema.\n\n-  ``source (any)`` - source as path, url or inline data\n-  ``headers (int/str[])`` - headers rows number or headers list\n-  ``(exceptions.TableSchemaException)`` - raises any error occured in\n   the process\n-  ``(dict)`` - returns schema descriptor\n\nExceptions\n~~~~~~~~~~\n\n``exceptions.TableSchemaException``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBase class for all library exceptions. If there are multiple errors it\ncould be read from an exceptions object:\n\n.. code:: python\n\n\n    try:\n        # lib action\n    except exceptions.TableSchemaException as exception:\n        if exception.multiple:\n            for error in exception.errors:\n                # handle error\n\n``exceptions.LoadError``\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nAll loading errors.\n\n``exceptions.ValidationError``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAll validation errors.\n\n``exceptions.CastError``\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nAll value cast errors.\n\n``exceptions.RelationError``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAll integrity errors.\n\n``exceptions.StorageError``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAll storage errors.\n\nStorage\n~~~~~~~\n\nThe library includes interface declaration to implement tabular\n``Storage``. This interface allow to use different data storage systems\nlike SQL with ``tableschema.Table`` class (load/save) as well as on the\ndata package level:\n\n|Storage|\n\nFor instantiation of concrete storage instances ``tableschema.Storage``\nprovides a unified factory method ``connect`` (under the hood the plugin\nsystem will be used):\n\n.. code:: python\n\n    # pip install tableschema_sql\n    from tableschema import Storage\n\n    storage = Storage.connect('sql', **options)\n    storage.create('bucket', descriptor)\n    storage.write('bucket', rows)\n    storage.read('bucket')\n\n``Storage.connect(name, **options)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate tabular ``storage`` based on storage name.\n\n-  ``name (str)`` - storage name like ``sql``\n-  ``options (dict)`` - concrete storage options\n-  ``(exceptions.StorageError)`` - raises on any error\n-  ``(Storage)`` - returns ``Storage`` instance\n\n--------------\n\nAn implementor should follow ``tableschema.Storage`` interface to write\nhis own storage backend. Concrete storage backends could include\nadditional functionality specific to conrete storage system. See\n``plugins`` system below to know how to integrate custom storage plugin\ninto your workflow.\n\n``<<Interface>>Storage(**options)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate tabular ``storage``. Implementations should fully implement this\ninterface to be compatible to ``Storage`` API.\n\n-  ``options (dict)`` - concrete storage options\n-  ``(exceptions.StorageError)`` - raises on any error\n-  ``(Storage)`` - returns ``Storage`` instance\n\n``storage.buckets``\n^^^^^^^^^^^^^^^^^^^\n\nReturn list of storage bucket names. A ``bucket`` is a special term\nwhich has almost the same meaning as the term ``table``. You should\nconsider ``bucket`` as a ``table`` stored in the ``storage``.\n\n-  ``(exceptions.StorageError)`` - raises on any error\n-  ``str[]`` - return list of bucket names\n\n``create(bucket, descriptor, force=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate one/multiple buckets.\n\n-  ``bucket (str/list)`` - bucket name or list of bucket names\n-  ``descriptor (dict/dict[])`` - schema descriptor or list of\n   descriptors\n-  ``force (bool)`` - delete and re-create already existent buckets\n-  ``(exceptions.StorageError)`` - raises on any error\n\n``delete(bucket=None, ignore=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDelete one/multiple/all buckets.\n\n-  ``bucket (str/list/None)`` - bucket name or list of bucket names to\n   delete. If None all buckets will be deleted\n-  ``descriptor (dict/dict[])`` - schema descriptor or list of\n   descriptors\n-  ``ignore (bool)`` - don't raise an error on non-existent bucket\n   deletion from storage\n-  ``(exceptions.StorageError)`` - raises on any error\n\n``describe(bucket, descriptor=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGet/set bucket's Table Schema descriptor.\n\n-  ``bucket (str)`` - bucket name\n-  ``descriptor (dict/None)`` - schema descriptor to set\n-  ``(exceptions.StorageError)`` - raises on any error\n-  ``(dict)`` - returns Table Schema descriptor\n\n``iter(bucket)``\n^^^^^^^^^^^^^^^^\n\nThis method should iter typed values based on the schema of this bucket.\n\n-  ``bucket (str)`` - bucket name\n-  ``(exceptions.StorageError)`` - raises on any error\n-  ``(list[])`` - yields data rows\n\n``read(bucket)``\n^^^^^^^^^^^^^^^^\n\nThis method should read typed values based on the schema of this bucket.\n\n-  ``bucket (str)`` - bucket name\n-  ``(exceptions.StorageError)`` - raises on any error\n-  ``(list[])`` - returns data rows\n\n``write(bucket, rows)``\n^^^^^^^^^^^^^^^^^^^^^^^\n\nThis method writes data rows into the ``storage``. It should store\nvalues of unsupported types as strings internally (like csv does).\n\n-  ``bucket (str)`` - bucket name\n-  ``rows (list[])`` - data rows to write\n-  ``(exceptions.StorageError)`` - raises on any error\n\nPlugins\n~~~~~~~\n\nTable Schema has a plugin system. Any package with the name like\n``tableschema_<name>`` could be imported as:\n\n.. code:: python\n\n    from tableschema.plugins import <name>\n\nIf a plugin is not installed ``ImportError`` will be raised with a\nmessage describing how to install the plugin.\n\nOfficial plugins\n^^^^^^^^^^^^^^^^\n\n-  `BigQuery\n   Storage <https://github.com/frictionlessdata/tableschema-bigquery-py>`__\n-  `Elasticsearch\n   Storage <https://github.com/frictionlessdata/tableschema-elasticsearch-py>`__\n-  `Pandas\n   Storage <https://github.com/frictionlessdata/tableschema-pandas-py>`__\n-  `SQL\n   Storage <https://github.com/frictionlessdata/tableschema-sql-py>`__\n-  `SPSS\n   Storage <https://github.com/frictionlessdata/tableschema-spss-py>`__\n\nCLI\n~~~\n\n    It's a provisional API excluded from SemVer. If you use it as a part\n    of other program please pin concrete ``tableschema`` version to your\n    requirements file.\n\nTable Schema features a CLI called ``tableschema``. This CLI exposes the\n``infer`` and ``validate`` functions for command line use.\n\nExample of ``validate`` usage:\n\n::\n\n    $ tableschema validate path/to-schema.json\n\nExample of ``infer`` usage:\n\n::\n\n    $ tableschema infer path/to/data.csv\n\nThe response is a schema as JSON. The optional argument ``--encoding``\nallows a character encoding to be specified for the data file. The\ndefault is utf-8.\n\nContributing\n------------\n\nThe project follows the `Open Knowledge International coding\nstandards <https://github.com/okfn/coding-standards>`__.\n\n| Recommended way to get started is to create and activate a project\nvirtual environment.\n| To install package and development dependencies into active\nenvironment:\n\n::\n\n    $ make install\n\nTo run tests with linting and coverage:\n\n.. code:: bash\n\n    $ make test\n\n| For linting ``pylama`` configured in ``pylama.ini`` is used. On this\nstage it's already\n| installed into your environment and could be used separately with more\nfine-grained control\n| as described in documentation -\nhttps://pylama.readthedocs.io/en/latest/.\n\nFor example to sort results by error type:\n\n.. code:: bash\n\n    $ pylama --sort <path>\n\n| For testing ``tox`` configured in ``tox.ini`` is used.\n| It's already installed into your environment and could be used\nseparately with more fine-grained control as described in documentation\n- https://testrun.org/tox/latest/.\n\n| For example to check subset of tests against Python 2 environment with\nincreased verbosity.\n| All positional arguments and options after ``--`` will be passed to\n``py.test``:\n\n.. code:: bash\n\n    tox -e py27 -- -v tests/<path>\n\n| Under the hood ``tox`` uses ``pytest`` configured in ``pytest.ini``,\n``coverage``\n| and ``mock`` packages. This packages are available only in tox\nenvionments.\n\nChangelog\n---------\n\nHere described only breaking and the most important changes. The full\nchangelog and documentation for all released versions could be found in\nnicely formatted `commit\nhistory <https://github.com/frictionlessdata/tableschema-py/commits/master>`__.\n\nv1.0\n~~~~\n\nThis version includes various big changes. **A migration guide is under\ndevelopment and will be published here**.\n\nv0.10\n~~~~~\n\nLast pre-v1 stable version of the library.\n\n.. |Travis| image:: https://travis-ci.org/frictionlessdata/tableschema-py.svg?branch=master\n   :target: https://travis-ci.org/frictionlessdata/tableschema-py\n.. |Coveralls| image:: http://img.shields.io/coveralls/frictionlessdata/tableschema-py.svg?branch=master\n   :target: https://coveralls.io/r/frictionlessdata/tableschema-py?branch=master\n.. |PyPi| image:: https://img.shields.io/pypi/v/tableschema.svg\n   :target: https://pypi.python.org/pypi/tableschema\n.. |SemVer| image:: https://img.shields.io/badge/versions-SemVer-brightgreen.svg\n   :target: http://semver.org/\n.. |Gitter| image:: https://img.shields.io/gitter/room/frictionlessdata/chat.svg\n   :target: https://gitter.im/frictionlessdata/chat\n.. |Storage| image:: https://raw.githubusercontent.com/frictionlessdata/tableschema-py/master/data/storage.png\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/frictionlessdata/tableschema-py",
    "keywords": "frictionless data,open data,json schema,table schema,data package,tabular data package",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tableschema",
    "platform": "",
    "project_url": "https://pypi.org/project/tableschema/",
    "release_url": "https://pypi.org/project/tableschema/1.0.7/",
    "requires_dist": [
      "tox; extra == 'develop'",
      "pylama; extra == 'develop'",
      "unicodecsv (>=0.14,<2.0)",
      "tabulator (>=1.3,<2.0)",
      "six (>=1.9,<2.0)",
      "rfc3986 (>=0.4,<2.0)",
      "requests (>=2.5,<3.0)",
      "python-dateutil (>=2.4,<3.0)",
      "jsonschema (>=2.5,<3.0)",
      "isodate (>=0.5.4,<2.0)",
      "click (<7.0,>=3.3)"
    ],
    "requires_python": "",
    "summary": "A utility library for working with Table Schema in Python",
    "version": "1.0.7"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6356f037eabddca017dda4492f186546",
          "sha256": "527edd2034a7e13c04b344530f9d5b4309e45a303ee73bf7dc744bfe8ca1aeba"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6356f037eabddca017dda4492f186546",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 62371,
        "upload_time": "2017-09-04T09:41:34",
        "url": "https://files.pythonhosted.org/packages/a2/f1/4da4c6e0909c893286e9dad659c3147690f6bf3805666a6ca71b34a7281b/tableschema-1.0.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ae263753cc152d58dfcbda52e5fdfd55",
          "sha256": "0472b12b228308d65a24a69296dba2afd1e2c2ab4c421b7b4e32a799280d9da1"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ae263753cc152d58dfcbda52e5fdfd55",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 69435,
        "upload_time": "2017-09-04T09:41:35",
        "url": "https://files.pythonhosted.org/packages/c0/93/00749c33d31c15878aee6bd3da1504456caf79e800fc4704fa536e1e63b1/tableschema-1.0.0.tar.gz"
      }
    ],
    "1.0.0a10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "85c2c8f75f23cea1bd2cb33e47b58278",
          "sha256": "a11ceda69a3acb90101a8680946e2e02aea20eeab48ab6920da61c088adefbb3"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a10-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85c2c8f75f23cea1bd2cb33e47b58278",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 61484,
        "upload_time": "2017-08-22T07:27:55",
        "url": "https://files.pythonhosted.org/packages/66/f9/dacc3ed54d2e891e2aaeaba88808c103be669d1861b782e482650479fb65/tableschema-1.0.0a10-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3cbb4083fd2df1219f0ef12efe39b38a",
          "sha256": "6dfbf745e404091d011611dcdf38cc3ee21fac9bd7014e3863daa77874077d05"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a10.tar.gz",
        "has_sig": false,
        "md5_digest": "3cbb4083fd2df1219f0ef12efe39b38a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 68125,
        "upload_time": "2017-08-22T07:27:57",
        "url": "https://files.pythonhosted.org/packages/e5/fe/4b45d6733a915922617266b823faaea981fb09e530bc62c8dfb7f0552914/tableschema-1.0.0a10.tar.gz"
      }
    ],
    "1.0.0a11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d656f1c434a2ce84748f64422af22bf8",
          "sha256": "0c90655e00026ec7f3e203453d8a85e1ca3db1c5fc88f6e2bfa4f8461d62cede"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a11-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d656f1c434a2ce84748f64422af22bf8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 61414,
        "upload_time": "2017-08-22T08:22:05",
        "url": "https://files.pythonhosted.org/packages/73/ce/6859bb3a44322822be12aa623287c4c239f9415459d8ddccc9f893a91bd3/tableschema-1.0.0a11-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "13c3cb093b48073dca98754ec9fb9deb",
          "sha256": "49e6780c82bba42e23481ba61d6f66d63cb3b6f3461987a01b3ccca94b32c164"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a11.tar.gz",
        "has_sig": false,
        "md5_digest": "13c3cb093b48073dca98754ec9fb9deb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 68573,
        "upload_time": "2017-08-22T08:22:06",
        "url": "https://files.pythonhosted.org/packages/85/8c/9558d7bec77816a027d08107d1e7f9c580c5174085a43835e02a151adefa/tableschema-1.0.0a11.tar.gz"
      }
    ],
    "1.0.0a12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "96027ae6a3d5085929beecc947a2bfe1",
          "sha256": "bbb701a2f73e6d06df8d6aa6357563680d4795560cc27d89da8aedf87dde6f33"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a12-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96027ae6a3d5085929beecc947a2bfe1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 61697,
        "upload_time": "2017-08-22T14:00:36",
        "url": "https://files.pythonhosted.org/packages/1a/33/d49edcf3e93f5125efb89a79450332afa5ed025fe859fc4517f2bed4a499/tableschema-1.0.0a12-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "517098ef58a7db8ce77ccac565e8d3bc",
          "sha256": "18b215d7059e87094bb32f36f0c62b380488788a975e99b005ca953c47700a12"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a12.tar.gz",
        "has_sig": false,
        "md5_digest": "517098ef58a7db8ce77ccac565e8d3bc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 68777,
        "upload_time": "2017-08-22T14:00:38",
        "url": "https://files.pythonhosted.org/packages/db/26/38cf9eca2ed1ae6e2846941d4bd922d44ca42a30254e778a8aa2f0e87395/tableschema-1.0.0a12.tar.gz"
      }
    ],
    "1.0.0a13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c4d5067e69d65da094227feccabe5620",
          "sha256": "37db550b72fc073abb6b311050894dab10a1a2d3f765612941fa06965de5b5a2"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a13-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c4d5067e69d65da094227feccabe5620",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 62444,
        "upload_time": "2017-08-29T13:22:34",
        "url": "https://files.pythonhosted.org/packages/c0/70/be78bd5a09ff30ab0c4fea90d8ed40b48cade00ccbd2b1f1c5df3c826df6/tableschema-1.0.0a13-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "67ce060b0eb9d9482ac48ad35680cf79",
          "sha256": "9c9f25d4db1fab3ee71f0235deddbe18705df83a2cbff67771a05cdade4e4385"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a13.tar.gz",
        "has_sig": false,
        "md5_digest": "67ce060b0eb9d9482ac48ad35680cf79",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 69638,
        "upload_time": "2017-08-29T13:22:36",
        "url": "https://files.pythonhosted.org/packages/49/54/a6b6290076dfb2c0dbbb9ec3b6693c25a9de6cb725c3d1c9b8a55ad5332d/tableschema-1.0.0a13.tar.gz"
      }
    ],
    "1.0.0a14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a02744fd08cbfad79b45217349499e02",
          "sha256": "abf69cf98024f92497762ac38c458ba1ff20c6304539e3a1748afb8074593333"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a14-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a02744fd08cbfad79b45217349499e02",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 62432,
        "upload_time": "2017-08-31T19:25:49",
        "url": "https://files.pythonhosted.org/packages/9c/a0/de0d8e473c910a893ad7ac9a3201fb42e06aa2bab8cf356cde1536774d25/tableschema-1.0.0a14-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6efce7239d4786a5d1bf89e6ba945486",
          "sha256": "85ea093347a1db3729ef5dd97a7c41c43fec89a718adb085e10b34bb991376e9"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a14.tar.gz",
        "has_sig": false,
        "md5_digest": "6efce7239d4786a5d1bf89e6ba945486",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 69674,
        "upload_time": "2017-08-31T19:25:51",
        "url": "https://files.pythonhosted.org/packages/d9/51/db4117a3f981d8436de929be1e6c076ed1e91ae1a8cde0d98a5f36fd35da/tableschema-1.0.0a14.tar.gz"
      }
    ],
    "1.0.0a3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c57394825d3132d33a3e2333cbd255ee",
          "sha256": "a65b737fa0b1193ecfe41b6dc8675d1cea36149bc9071a29c1b1ad74660728c4"
        },
        "downloads": 104,
        "filename": "tableschema-1.0.0a3.tar.gz",
        "has_sig": false,
        "md5_digest": "c57394825d3132d33a3e2333cbd255ee",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 122863,
        "upload_time": "2017-04-05T20:19:51",
        "url": "https://files.pythonhosted.org/packages/0f/2a/75d2da3563fbf817a8ceb53144328481345b205f7ad2eaa97892cd80b0ec/tableschema-1.0.0a3.tar.gz"
      }
    ],
    "1.0.0a4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "80c9137ea913eaeec52f0f61b2314aa9",
          "sha256": "902df50441fc61bf36af1378c1af1c05e7ec2d49a797ca48497fbc83ea13a683"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80c9137ea913eaeec52f0f61b2314aa9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 55137,
        "upload_time": "2017-04-11T08:30:22",
        "url": "https://files.pythonhosted.org/packages/66/ef/b6950d9267c56821c9247a2accb8250dd4c80faaffefc4af2e091fd11992/tableschema-1.0.0a4-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ec5e5070cc8ce9c5ff019beca9269ba3",
          "sha256": "4c700346b01bd34c53ef24da0b649e5325ad4b57e329cd880ee14a8cfed357de"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a4.tar.gz",
        "has_sig": false,
        "md5_digest": "ec5e5070cc8ce9c5ff019beca9269ba3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35283,
        "upload_time": "2017-04-11T08:30:24",
        "url": "https://files.pythonhosted.org/packages/f6/8b/a518e76bfbb151ff52b4d4e33f4a332bb85c5c27f8d596824eced7c94247/tableschema-1.0.0a4.tar.gz"
      }
    ],
    "1.0.0a5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a23d3dd91d82ca5ee75db07b16de3182",
          "sha256": "58436b4042c536f17541017d96b1001358450f402e9b0f90d3364b9581c2d121"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a23d3dd91d82ca5ee75db07b16de3182",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 55139,
        "upload_time": "2017-05-25T08:12:18",
        "url": "https://files.pythonhosted.org/packages/14/d1/ac49f9515af40ce03cc764a80d882bb05ac22f7260262c618acf47eb1baa/tableschema-1.0.0a5-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2f2c8dd79f222dd33ca697d7e04f9696",
          "sha256": "891ff9b3ea4a01de7ef5f9608dd70929106836f9ef49706324040a2082cb7063"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a5.tar.gz",
        "has_sig": false,
        "md5_digest": "2f2c8dd79f222dd33ca697d7e04f9696",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35301,
        "upload_time": "2017-05-25T08:12:19",
        "url": "https://files.pythonhosted.org/packages/42/e5/89007e147c6eb80f85fba1b31ad476936eb404713f4f6a4943443e7d2c49/tableschema-1.0.0a5.tar.gz"
      }
    ],
    "1.0.0a7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1cb5f99457a8347b2055257f1ea6a88f",
          "sha256": "cd014bf96be51a12eb0128612ed1516cca2d4a4ba0e4ec1bce3cd86766c166f0"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1cb5f99457a8347b2055257f1ea6a88f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 55504,
        "upload_time": "2017-06-09T08:47:14",
        "url": "https://files.pythonhosted.org/packages/3a/d9/d77c2fed04f73b433e7426f68de23c8b1ab31bf70413a3ae42a800ae8087/tableschema-1.0.0a7-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2107083501d81c20fbe313f68c3bc918",
          "sha256": "4feebf7e34a14531d4e3fbbc2dc82606b929a3efa17c695c5cbfc00a068c443a"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a7.tar.gz",
        "has_sig": false,
        "md5_digest": "2107083501d81c20fbe313f68c3bc918",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 55780,
        "upload_time": "2017-06-09T08:47:16",
        "url": "https://files.pythonhosted.org/packages/63/70/2f9fc8691a1cafc2189b070c0b0823deaba998aa65be68670f7b061e2926/tableschema-1.0.0a7.tar.gz"
      }
    ],
    "1.0.0a8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "08400034b069f3cbb5499e434e6b1e1d",
          "sha256": "36025ae63ea076ba483b3ec76196f8893068a7d7837aa6ba9ba1a7f017966f08"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08400034b069f3cbb5499e434e6b1e1d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 55275,
        "upload_time": "2017-07-27T13:32:10",
        "url": "https://files.pythonhosted.org/packages/c6/42/c2775eb78025d4405cb20b4889d5f936e62bd02e24bed00349121379c70e/tableschema-1.0.0a8-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c351fd167b8ab8f2a9011114ca9ef925",
          "sha256": "23585d907805d5c279d07fa938bf88d29973f2f22146f4dafa149df10015766b"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a8.tar.gz",
        "has_sig": false,
        "md5_digest": "c351fd167b8ab8f2a9011114ca9ef925",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 56412,
        "upload_time": "2017-07-27T13:32:11",
        "url": "https://files.pythonhosted.org/packages/96/7a/fd984a3f11f764baf45c74396a55baeeaf46a08bbcbf959e0ddaf4814403/tableschema-1.0.0a8.tar.gz"
      }
    ],
    "1.0.0a9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "80a10104a4d35e37bf0eed5d10b98b79",
          "sha256": "6ab74db1ae68b4502e9874d31d631943a8591ab5884c88adbb4f10f31369df9d"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a9-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80a10104a4d35e37bf0eed5d10b98b79",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 61425,
        "upload_time": "2017-08-19T06:58:51",
        "url": "https://files.pythonhosted.org/packages/7c/d2/bf08ea930241bd7021980059a46fc34b439ccf2b8e47e435ba1e0fbebb50/tableschema-1.0.0a9-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4db2c1767b3a29754e15e090132759f5",
          "sha256": "d0d6c6f1d0c3f293f6d1a2ac8d6ba311900aa40a78f916f104dbb6767612d68c"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a9.tar.gz",
        "has_sig": false,
        "md5_digest": "4db2c1767b3a29754e15e090132759f5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 67835,
        "upload_time": "2017-08-19T06:58:52",
        "url": "https://files.pythonhosted.org/packages/85/c0/6c4165ba12f10825d5dd55330849f841cc634c20b6d7726698160c2a1933/tableschema-1.0.0a9.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "74275b20471c2be9a5ab576b619ce8b9",
          "sha256": "6f93d5952349d76c9209ec4c0c61466a96a0898ea9a8847e78bc9ca52426c631"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74275b20471c2be9a5ab576b619ce8b9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 63157,
        "upload_time": "2017-09-07T13:49:50",
        "url": "https://files.pythonhosted.org/packages/90/ca/1dc6c24e2df73c3bcb21d472ecfa909f1a31faec576fee97ae29000b2834/tableschema-1.0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1807968b1047cb0f681854266a129291",
          "sha256": "d162f475dd43771c5a72ee7433e83fe6904de0925e84d1856fa98351369762fd"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1807968b1047cb0f681854266a129291",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 71123,
        "upload_time": "2017-09-07T13:49:51",
        "url": "https://files.pythonhosted.org/packages/17/29/f75b462f958b5e707d2a4c7f2afe81935d6424da84a9b0b01eee1f432568/tableschema-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d3425769fa977d8ef4c85750acb903a9",
          "sha256": "f99e7aac641ffde81fe44d53d0662ae9708954b497828612e8f7fd1b8570a997"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3425769fa977d8ef4c85750acb903a9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 63281,
        "upload_time": "2017-09-18T08:44:05",
        "url": "https://files.pythonhosted.org/packages/d4/66/e6ac2057b6008c24b4cd2dfffb97476071f65e95503b32ebeab38d0f4de2/tableschema-1.0.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c84c1cef1db85747f98b8c0813f701ee",
          "sha256": "b5f6de549936b688df42525672bbd997f81140f5caf343b84356863c06fbb07f"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c84c1cef1db85747f98b8c0813f701ee",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 69149,
        "upload_time": "2017-09-18T08:44:06",
        "url": "https://files.pythonhosted.org/packages/9f/8a/33102a401381ec24e4e27a0efe1eeabfebbc15cb4c480378878b12ecc7c5/tableschema-1.0.2.tar.gz"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bb7e10584b89d1b8e0066c596b3d8cb6",
          "sha256": "89087e2e2c0b08dbb4472ec2d1a00ae7ad0119fa08494e5a9760413ec1b11722"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb7e10584b89d1b8e0066c596b3d8cb6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 63432,
        "upload_time": "2017-09-20T16:10:42",
        "url": "https://files.pythonhosted.org/packages/83/e0/6e7b2142f75897462cb43c85f93a89ac707efbdbebfca83f506f8499dce9/tableschema-1.0.3-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ceffda7d072a64118fe11ff4965677a8",
          "sha256": "1f451e18d40aaa46c89aee6833981c2b1e675484a9840a556d045a64c51211ff"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ceffda7d072a64118fe11ff4965677a8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 69269,
        "upload_time": "2017-09-20T16:10:44",
        "url": "https://files.pythonhosted.org/packages/5a/e7/b4caf41f0784cffa09e38c42d7626c9e95a3cd61bd8c15dff99341cead5d/tableschema-1.0.3.tar.gz"
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2e296ff79bdb8608aa70dac1cabe1e36",
          "sha256": "e176149ae80fbf09e71ad06de7ad98fed0e0f90340a57ab86ad3f20cd85c992d"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e296ff79bdb8608aa70dac1cabe1e36",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 63458,
        "upload_time": "2017-09-27T08:27:25",
        "url": "https://files.pythonhosted.org/packages/df/09/6d4f665220eecf775dd19cb95efb1d27e3cc89f1db9bd5832915012d6ab1/tableschema-1.0.4-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0f6ec44bf22f79430c6800315098536e",
          "sha256": "26f004ee9ccf36c98450147448adb0024503bcb633b3c228de0fbcdbbcee18dd"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0f6ec44bf22f79430c6800315098536e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 69155,
        "upload_time": "2017-09-27T08:27:27",
        "url": "https://files.pythonhosted.org/packages/32/b6/0bc27b3a767e44fac42f97cb02a0795d39d569f4c53813bd6c6545b06c70/tableschema-1.0.4.tar.gz"
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "26fa3aa01582a687d1639e5a110e7de5",
          "sha256": "ce3cecf3670cf57dd81d40a94a217ec79c2e252c5bc211391e8a2267dbc608b3"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "26fa3aa01582a687d1639e5a110e7de5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 63763,
        "upload_time": "2017-09-30T09:28:43",
        "url": "https://files.pythonhosted.org/packages/e6/63/1d6779a2728bdf47bf160cfc262eb37bc051f6a6542f860607a6275a3c7a/tableschema-1.0.5-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "377abd506506c7c13c7e85fb813faa83",
          "sha256": "b629fd0e2ce5677480029040a80172af1cfc645bb89c716ecfb84ae852b1ff06"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "377abd506506c7c13c7e85fb813faa83",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 69631,
        "upload_time": "2017-09-30T09:28:45",
        "url": "https://files.pythonhosted.org/packages/49/2d/247cbc6cbb5e350e6343ffade9336da6fc23b9c38b8697c9eccc580f12ef/tableschema-1.0.5.tar.gz"
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2036738d3fcf1290f37f7843f52175b6",
          "sha256": "94a9ee039fcd16980a15e32f22978358ca22086d2584a70254cb5f6d1c74ea5f"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2036738d3fcf1290f37f7843f52175b6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 63900,
        "upload_time": "2017-09-30T10:09:50",
        "url": "https://files.pythonhosted.org/packages/17/75/a570d3ec1097c3c4978f7b5fb4b5f1932d4ed520b230f8b0fcf0bcf60f39/tableschema-1.0.6-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1746b046ba7eef396e4632790adfbc46",
          "sha256": "b1da7894cf756221b4647945438bfbf6d78f63bfb94b2478ae93272a5a23fabe"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "1746b046ba7eef396e4632790adfbc46",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 69810,
        "upload_time": "2017-09-30T10:09:54",
        "url": "https://files.pythonhosted.org/packages/27/c7/c4ef0ab11d427ca1aa83a5d3f429b4f5cbe63ef9d44c35a5a00ba00d8be2/tableschema-1.0.6.tar.gz"
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6863c051419716e0559c2e7dddc40003",
          "sha256": "481c914041349430d2120d64828f7ce6f832d35e3d154702ddc215cd8ac0531a"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6863c051419716e0559c2e7dddc40003",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 63895,
        "upload_time": "2017-09-30T13:45:14",
        "url": "https://files.pythonhosted.org/packages/9a/97/51576529579c67e6192fd1436a0e7f63d94cffbc8da011c0552ab1c0a430/tableschema-1.0.7-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "016938549de555bcd8fc3b0bee1c1530",
          "sha256": "388693cf904d43f98d58b55b7acb1579b5afac7686a521aeea0b3e65a61886dd"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "016938549de555bcd8fc3b0bee1c1530",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 69375,
        "upload_time": "2017-09-30T13:45:17",
        "url": "https://files.pythonhosted.org/packages/80/4c/687e6cd8fe07d6513717f2e2d54d56444c477ccce1a6a748fc898f0c2500/tableschema-1.0.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6863c051419716e0559c2e7dddc40003",
        "sha256": "481c914041349430d2120d64828f7ce6f832d35e3d154702ddc215cd8ac0531a"
      },
      "downloads": 0,
      "filename": "tableschema-1.0.7-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6863c051419716e0559c2e7dddc40003",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 63895,
      "upload_time": "2017-09-30T13:45:14",
      "url": "https://files.pythonhosted.org/packages/9a/97/51576529579c67e6192fd1436a0e7f63d94cffbc8da011c0552ab1c0a430/tableschema-1.0.7-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "016938549de555bcd8fc3b0bee1c1530",
        "sha256": "388693cf904d43f98d58b55b7acb1579b5afac7686a521aeea0b3e65a61886dd"
      },
      "downloads": 0,
      "filename": "tableschema-1.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "016938549de555bcd8fc3b0bee1c1530",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 69375,
      "upload_time": "2017-09-30T13:45:17",
      "url": "https://files.pythonhosted.org/packages/80/4c/687e6cd8fe07d6513717f2e2d54d56444c477ccce1a6a748fc898f0c2500/tableschema-1.0.7.tar.gz"
    }
  ]
}