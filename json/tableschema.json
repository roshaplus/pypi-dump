{
  "info": {
    "author": "Open Knowledge Foundation",
    "author_email": "info@okfn.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# tableschema-py\n\n[![Travis](https://travis-ci.org/frictionlessdata/tableschema-py.svg?branch=master)](https://travis-ci.org/frictionlessdata/tableschema-py)\n[![Coveralls](http://img.shields.io/coveralls/frictionlessdata/tableschema-py.svg?branch=master)](https://coveralls.io/r/frictionlessdata/tableschema-py?branch=master)\n[![PyPi](https://img.shields.io/pypi/v/tableschema.svg)](https://pypi.python.org/pypi/tableschema)\n[![SemVer](https://img.shields.io/badge/versions-SemVer-brightgreen.svg)](http://semver.org/)\n[![Gitter](https://img.shields.io/gitter/room/frictionlessdata/chat.svg)](https://gitter.im/frictionlessdata/chat)\n\nA library for working with [Table Schema](http://specs.frictionlessdata.io/table-schema/) in Python.\n\n## Features\n\n- `Table` to work with data tables described by Table Schema\n- `Schema` representing Table Schema\n- `Field` representing Table Schema field\n- `validate` to validate Table Schema\n- `infer` to infer Table Schema from data\n- built-in command-line interface to validate and infer schemas\n- storage/plugins system to connect tables to different storage backends like SQL Database\n\n## Important Notes\n\n- There are BREAKING changes in `v1` (pre-release):\n  - package on PyPi has been renamed to `tableschema`\n  - following deprecated API has been removed the package:\n    - `tableschema.push/pull_resource` (use `tableschema.Table`)\n    - `tableschema.Validator` (use `tableschema.validate`)\n    - `tableschema.storage` (use `tableschema.Storage`)\n    - `tableschema.model` (use `tableschema.Schema`)\n    - `tableschema.types` (use `tableschema.Field`)\n  - rebased on Table Schema v1 null/types/constraints symantics\n  - `Field.cast/test_value` now accepts `constraints=bool/list` argument instead of `skip_constraints=bool` and `constraint=str`\n  - other changes could be introduced before final release\n  - documentation for previous release (`v0.10`) could be found [here](https://github.com/frictionlessdata/tableschema-py/tree/v0.10.0)\n- There are deprecating changes in `v0.7`:\n  - renewed API has been introduced in non breaking manner\n  - documentation for deprecated API could be found [here](https://github.com/frictionlessdata/tableschema-py/tree/0.6.5)\n\n## Gettings Started\n\n### Installation\n\n```bash\n$ pip install jsontableschema # v0.10\n$ pip install tableschema --pre # v1.0-alpha\n```\n### Example\n\n```python\nfrom tableschema import Table\n\n# Create table\ntable = Table('path.csv', schema='schema.json')\n\n# Print schema descriptor\nprint(table.schema.descriptor)\n\n# Print cast rows in a dict form\nfor keyed_row in table.iter(keyed=True):\n    print(keyed_row)\n```\n\n### Table\n\nTable represents data described by Table Schema:\n\n```python\n# pip install sqlalchemy tableschema-sql\nimport sqlalchemy as sa\nfrom pprint import pprint\nfrom tableschema import Table\n\n# Data source\nSOURCE = 'https://raw.githubusercontent.com/frictionlessdata/tableschema-py/master/data/data_infer.csv'\n\n# Create SQL database\ndb = sa.create_engine('sqlite://')\n\n# Data processor\ndef skip_under_30(erows):\n    for number, headers, row in erows:\n        krow = dict(zip(headers, row))\n        if krow['age'] >= 30:\n            yield (number, headers, row)\n\n# Work with table\ntable = Table(SOURCE, post_cast=[skip_under_30])\ntable.schema.save('tmp/persons.json') # Save INFERRED schema\ntable.save('persons', backend='sql', engine=db) # Save data to SQL\ntable.save('tmp/persons.csv')  # Save data to DRIVE\n\n# Check the result\npprint(Table('persons', backend='sql', engine=db).read(keyed=True))\npprint(Table('tmp/persons.csv').read(keyed=True))\n# Will print (twice)\n# [{'age': 39, 'id': 1, 'name': 'Paul'},\n#  {'age': 36, 'id': 3, 'name': 'Jane'}]\n```\n\n### Schema\n\nA model of a schema with helpful methods for working with the schema and supported data. Schema instances can be initialized with a schema source as a filepath or url to a JSON file, or a Python dict. The schema is initially validated (see [validate](#validate) below), and will raise an exception if not a valid Table Schema.\n\n```python\nfrom tableschema import Schema\n\n# Init schema\nschema = Schema('path.json')\n\n# Cast a row\nschema.cast_row(['12345', 'a string', 'another field'])\n```\n\nMethods available to `Schema` instances:\n\n- `descriptor` - return schema descriptor\n- `fields` - an array of the schema's Field instances\n- `headers` - an array of the schema headers\n- `primary_key` - the primary key field for the schema as an array\n- `foreignKey` - the foreign key property for the schema as an array\n- `get_field(name)` - return the field object for given name\n- `has_field(name)` - return a bool if the field exists in the schema\n- `cast_row(row, no_fail_fast=False)` - return row cast against schema\n- `save(target)` - save schema to filesystem\n\nWhere the option `no_fail_fast` is given, it will collect all errors it encouters and an exceptions.MultipleInvalid will be raised (if there are errors).\n\n### Field\n\n```python\nfrom tableschema import Field\n\n# Init field\nfield = Field({'name': 'name', type': 'number'})\n\n# Cast a value\nfield.cast_value('12345') # -> 12345\n```\n\nData values can be cast to native Python objects with a Field instance. Type instances can be initialized with [field descriptors](https://specs.frictionlessdata.io/table-schema/). This allows formats and constraints to be defined.\n\nCasting a value will check the value is of the expected type, is in the correct format, and complies with any constraints imposed by a schema. E.g. a date value (in ISO 8601 format) can be cast with a DateType instance. Values that can't be cast will raise an `InvalidCastError` exception.\n\nCasting a value that doesn't meet the constraints will raise a `ConstraintError` exception.\n\n### validate\n\nGiven a schema as JSON file, url to JSON file, or a Python dict, `validate` returns `True` for a valid Table Schema, or raises an exception, `SchemaValidationError`. It validates only **schema**, not data against schema!\n\n```python\nimport io\nimport json\n\nfrom tableschema import validate\n\nwith io.open('schema_to_validate.json') as stream:\n    descriptor = json.load(stream)\n\ntry:\n    tableschema.validate(descriptor)\nexcept tableschema.exceptions.SchemaValidationError as exception:\n   # handle error\n\n```\n\nIt may be useful to report multiple errors when validating a schema. This can be done with `no_fail_fast` flag set to True.\n\n```python\ntry:\n    tableschema.validate(descriptor, no_fail_fast=True)\nexcept tableschema.exceptions.MultipleInvalid as exception:\n    for error in exception.errors:\n        # handle error\n```\n\n### infer\n\nGiven headers and data, `infer` will return a Table Schema as a Python dict based on the data values. Given the data file, data_to_infer.csv:\n\n```\nid,age,name\n1,39,Paul\n2,23,Jimmy\n3,36,Jane\n4,28,Judy\n```\n\nCall `infer` with headers and values from the datafile:\n\n```python\nimport io\nimport csv\n\nfrom tableschema import infer\n\nfilepath = 'data_to_infer.csv'\nwith io.open(filepath) as stream:\n    headers = stream.readline().rstrip('\\n').split(',')\n    values = csv.reader(stream)\n\nschema = infer(headers, values)\n```\n\n`schema` is now a schema dict:\n\n```python\n{u'fields': [\n    {\n        u'description': u'',\n        u'format': u'default',\n        u'name': u'id',\n        u'title': u'',\n        u'type': u'integer'\n    },\n    {\n        u'description': u'',\n        u'format': u'default',\n        u'name': u'age',\n        u'title': u'',\n        u'type': u'integer'\n    },\n    {\n        u'description': u'',\n        u'format': u'default',\n        u'name': u'name',\n        u'title': u'',\n        u'type': u'string'\n    }]\n}\n```\n\nThe number of rows used by `infer` can be limited with the `row_limit` argument.\n\n### CLI\n\n> It's a provisional API excluded from SemVer. If you use it as a part of other program please pin concrete `goodtables` version to your requirements file.\n\nTable Schema features a CLI called `tableschema`. This CLI exposes the `infer` and `validate` functions for command line use.\n\nExample of `validate` usage:\n\n```\n$ tableschema validate path/to-schema.json\n```\n\nExample of `infer` usage:\n\n```\n$ tableschema infer path/to/data.csv\n```\n\nThe response is a schema as JSON. The optional argument `--encoding` allows a character encoding to be specified for the data file. The default is utf-8.\n\n### Storage\n\nThe library includes interface declaration to implement tabular `Storage`:\n\n![Storage](data/storage.png)\n\nAn implementor should follow `tableschema.Storage` interface to write his\nown storage backend. This backend could be used with `Table` class. See `plugins`\nsystem below to know how to integrate custom storage plugin.\n\n### plugins\n\nTable Schema has a plugin system.  Any package with the name like `tableschema_<name>` could be imported as:\n\n```python\nfrom tableschema.plugins import <name>\n```\n\nIf a plugin is not installed `ImportError` will be raised with a message describing how to install the plugin.\n\nA list of officially supported plugins:\n- BigQuery Storage - https://github.com/frictionlessdata/tableschema-bigquery-py\n- Pandas Storage - https://github.com/frictionlessdata/tableschema-pandas-py\n- SQL Storage - https://github.com/frictionlessdata/tableschema-sql-py\n\n## API Reference\n\n### Snapshot\n\n```\nTable(source, schema=None, post_cast=None, backend=None, **options)\n    stream -> tabulator.Stream\n    schema -> Schema\n    name -> str\n    iter(keyed/extended=False) -> (generator) (keyed/extended)row[]\n    read(keyed/extended=False, limit=None) -> (keyed/extended)row[]\n    save(target, backend=None, **options)\nSchema(descriptor)\n    descriptor -> dict\n    fields -> Field[]\n    headers -> str[]\n    primary_key -> str[]\n    foreign_keys -> str[]\n    get_field(name) -> Field\n    has_field(name) -> bool\n    cast_row(row, no_fail_fast=False) -> row\n    save(target)\nField(descriptor)\n    descriptor -> dict\n    name -> str\n    type -> str\n    format -> str\n    constraints -> dict\n    cast_value(value, constraints=True) -> value\n    test_value(value, constraints=True) -> bool\nvalidate(descriptor, no_fail_fast=False) -> bool\ninfer(headers, values) -> descriptor\nexceptions\n~cli\n---\nStorage(**options)\n    buckets -> str[]\n    create(bucket, descriptor, force=False)\n    delete(bucket=None, ignore=False)\n    describe(bucket, descriptor=None) -> descriptor\n    iter(bucket) -> (generator) row[]\n    read(bucket) -> row[]\n    write(bucket, rows)\nplugins\n```\n\n### Detailed\n\n- [Docstrings](https://github.com/frictionlessdata/tableschema-py/tree/master/tableschema)\n- [Changelog](https://github.com/frictionlessdata/tableschema-py/commits/master)\n\n## Contributing\n\nPlease read the contribution guideline:\n\n[How to Contribute](CONTRIBUTING.md)\n\nThanks!",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/frictionlessdata/tableschema-py",
    "keywords": "frictionless data,open data,json schema,table schema,data package,tabular data package",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tableschema",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/tableschema/",
    "release_url": "https://pypi.org/project/tableschema/1.0.0a5/",
    "requires_python": "",
    "summary": "A utility library for working with Table Schema in Python",
    "version": "1.0.0a5"
  },
  "releases": {
    "1.0.0a3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c57394825d3132d33a3e2333cbd255ee",
          "sha256": "a65b737fa0b1193ecfe41b6dc8675d1cea36149bc9071a29c1b1ad74660728c4"
        },
        "downloads": 104,
        "filename": "tableschema-1.0.0a3.tar.gz",
        "has_sig": false,
        "md5_digest": "c57394825d3132d33a3e2333cbd255ee",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 122863,
        "upload_time": "2017-04-05T20:19:51",
        "url": "https://files.pythonhosted.org/packages/0f/2a/75d2da3563fbf817a8ceb53144328481345b205f7ad2eaa97892cd80b0ec/tableschema-1.0.0a3.tar.gz"
      }
    ],
    "1.0.0a4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "80c9137ea913eaeec52f0f61b2314aa9",
          "sha256": "902df50441fc61bf36af1378c1af1c05e7ec2d49a797ca48497fbc83ea13a683"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "80c9137ea913eaeec52f0f61b2314aa9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 55137,
        "upload_time": "2017-04-11T08:30:22",
        "url": "https://files.pythonhosted.org/packages/66/ef/b6950d9267c56821c9247a2accb8250dd4c80faaffefc4af2e091fd11992/tableschema-1.0.0a4-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ec5e5070cc8ce9c5ff019beca9269ba3",
          "sha256": "4c700346b01bd34c53ef24da0b649e5325ad4b57e329cd880ee14a8cfed357de"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a4.tar.gz",
        "has_sig": false,
        "md5_digest": "ec5e5070cc8ce9c5ff019beca9269ba3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35283,
        "upload_time": "2017-04-11T08:30:24",
        "url": "https://files.pythonhosted.org/packages/f6/8b/a518e76bfbb151ff52b4d4e33f4a332bb85c5c27f8d596824eced7c94247/tableschema-1.0.0a4.tar.gz"
      }
    ],
    "1.0.0a5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a23d3dd91d82ca5ee75db07b16de3182",
          "sha256": "58436b4042c536f17541017d96b1001358450f402e9b0f90d3364b9581c2d121"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a23d3dd91d82ca5ee75db07b16de3182",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 55139,
        "upload_time": "2017-05-25T08:12:18",
        "url": "https://files.pythonhosted.org/packages/14/d1/ac49f9515af40ce03cc764a80d882bb05ac22f7260262c618acf47eb1baa/tableschema-1.0.0a5-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2f2c8dd79f222dd33ca697d7e04f9696",
          "sha256": "891ff9b3ea4a01de7ef5f9608dd70929106836f9ef49706324040a2082cb7063"
        },
        "downloads": 0,
        "filename": "tableschema-1.0.0a5.tar.gz",
        "has_sig": false,
        "md5_digest": "2f2c8dd79f222dd33ca697d7e04f9696",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35301,
        "upload_time": "2017-05-25T08:12:19",
        "url": "https://files.pythonhosted.org/packages/42/e5/89007e147c6eb80f85fba1b31ad476936eb404713f4f6a4943443e7d2c49/tableschema-1.0.0a5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a23d3dd91d82ca5ee75db07b16de3182",
        "sha256": "58436b4042c536f17541017d96b1001358450f402e9b0f90d3364b9581c2d121"
      },
      "downloads": 0,
      "filename": "tableschema-1.0.0a5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a23d3dd91d82ca5ee75db07b16de3182",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 55139,
      "upload_time": "2017-05-25T08:12:18",
      "url": "https://files.pythonhosted.org/packages/14/d1/ac49f9515af40ce03cc764a80d882bb05ac22f7260262c618acf47eb1baa/tableschema-1.0.0a5-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "2f2c8dd79f222dd33ca697d7e04f9696",
        "sha256": "891ff9b3ea4a01de7ef5f9608dd70929106836f9ef49706324040a2082cb7063"
      },
      "downloads": 0,
      "filename": "tableschema-1.0.0a5.tar.gz",
      "has_sig": false,
      "md5_digest": "2f2c8dd79f222dd33ca697d7e04f9696",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 35301,
      "upload_time": "2017-05-25T08:12:19",
      "url": "https://files.pythonhosted.org/packages/42/e5/89007e147c6eb80f85fba1b31ad476936eb404713f4f6a4943443e7d2c49/tableschema-1.0.0a5.tar.gz"
    }
  ]
}