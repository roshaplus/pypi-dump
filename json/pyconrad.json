{
  "info": {
    "author": "Andreas Maier",
    "author_email": "andreas.maier@fau.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python"
    ],
    "description": "# pyConrad\n\nA python wrapper for the CONRAD framework (https://www5.cs.fau.de/conrad/)\n\n- [pyConrad](#pyconrad)\n- [CONRAD](#conrad)\n- [Installation](#installation)\n- [Tests](#tests)\n- [Usage](#usage)\n    - [Basic example](#basic-example)\n    - [More Examples](#more-examples)\n    - [Autocomplete](#autocomplete)\n    - [Extension methods for java classes](#extension-methods-for-java-classes)\n    - [Frequently encountered problems](#frequently-encountered-problems)\n\n# CONRAD\n\nCONRAD is a state-of-the-art software platform with extensive documentation. It is based on platform-independent technologies. Special libraries offer access to hardware acceleration such as CUDA and OpenCL. There is an easy interface for parallel processing. The software package includes different simulation tools that are able to generate 4-D projection and volume data and respective vector motion fields. Well known reconstruction algorithms such as FBP, DBP, and ART are included. All algorithms in the package are referenced to a scientific source. Please visit http://conrad.stanford.edu for more information.\n\n# Installation\n\nInstall via pip:\n\n```bash\npip install pyconrad\n```\n\nor if you downloaded this repository (https://git5.cs.fau.de/PyConrad/pyCONRAD) using:\n```bash\npip install -e .\n```\n\nThis will automatically install CONRAD and all python dependencies. \n\nIf you encounter a problem during the installation have a look at our wiki: https://git5.cs.fau.de/PyConrad/pyCONRAD/wikis/home\n\n# Tests\n\nIf you want to test whether pyconrad is working correctly on your computer you may execute all tests included in this repo via:\n\n```bash\npython setup.py test\n```\n\n# Usage\n\nYou can start CONRAD like this:\n```python\nimport pyconrad\n\npyconrad.setup_pyconrad()\npyconrad.start_gui()  # start ImageJ\npyconrad.start_reconstruction_pipeline_gui() # if you want to start CONRAD's reconstruction filter pipeline\n```\n\n## Basic example\n\nYou can access CONRAD's Java classes via pyconrad.edu() or using the convinience class ClassGetter.\n\n``` python\nimport pyconrad\n\n# setup PyConrad\npyconrad.setup_pyconrad(min_ram='500M', max_ram='8G')\n# Optional parameters for Java Virtual Machine RAM\n\npyconrad.start_gui()\n\n# Create Phantom (edu.stanford.rsl.tutorial.phantoms.MickeyMouseGrid2D)\nphantom = pyconrad.edu().stanford.rsl.tutorial.phantoms.MickeyMouseGrid2D(300, 300)\n\n\n# Access more easily using ClassGetter (# type: pyconrad.AutoCompleteConrad adds static auto-complete feature for ClassGetter.edu)\n_ = pyconrad.ClassGetter(\n    'edu.stanford.rsl.tutorial.phantoms',\n    'edu.stanford.rsl.conrad.phantom'\n)  # type: pyconrad.AutoCompleteConrad\n\n# You can add more namespaces also later\n_.add_namespaces('edu.stanford.rsl.tutorial.dmip')\n\nphantom2d = _.MickeyMouseGrid2D(200, 200)\nphantom3d = _.NumericalSheppLogan3D(\n    200, 200, 200).getNumericalSheppLoganPhantom()\n\n# Use Java method of class MickeyMouseGrid2D\nphantom.show()\nphantom3d.show()\n```\n\nAlso memory transfers to numpy.ndarray are possible.\nData changes have to be synchronized:\n``` python\n...\n\n# Create PyGrid from numpy array (must be of type pyconrad.java_float_dtype)\narray = np.random.rand(4,2,3).astype(java_float_dtype)\npygrid2 = PyGrid.from_numpy(array)\n\n# Manipulate data in using CONRAD at Position (x,y,z) = (1,2,4)\npygrid2.grid.setValue(5.0, [0,1,3])\n\n# Print this pixel using Python indexes [z,y,x]\nprint(\"Before update: %f\" % pygrid2[3,1,0])\n# Python data must be synchronized with CONRAD\npygrid2.update_numpy()\nprint(\"After update: %f\" % pygrid2[3,1,0])\n\n# Manipulate pixel using python\npygrid2[1,1,1] = 3.0\n# Update CONRAD data\npygrid2.update_grid()\n\n# Print\nprint(pygrid2)\n```\n## More Examples\n\nMore examples can be found [here](examples)\n\n## Autocomplete\n\nAs it might be difficult to remember the exact names of Java functions and classes, pyconrad provides basic autocomplete feature for CONRAD classes.\nJust give your IDE a type hint that a object represents a certain Java namespace or class (`# type: pyconrad.AutoCompleteConrad.edu.standford...`).\n\nWorks with pycharm:\n\n![autocomplete_video](README.md_files/autocomplete.webm)\n\n## Extension methods for java classes\nFor easy transition between Java and Python we extented some important Java classes in Python to convert between the respective Java class and the respective numpy structure.\nThe following java classes are extended:\n- PointND\n- SimpleVector\n- SimpleMatrix\n- Numeric Grid(therefore all Grid1D - Grid4D)\n\nwith the methods:\n- as_numpy (array or matrix depending on the class representation)\n- from_numpy\n- from_list\n- from_tif\n- save_tif\n- save_vtk\n\n## Frequently encountered problems\n```python\n# Creating a PointND\n_.PointND(3,3)  # does not work\n_.PointND([3,3])  # neither does this\n_.PointND(JArray(JDouble)([3,2]))  # works\n_.PointND.from_numpy(np.array([2.1,3.1])) #works, uses extension method\n_.PointND.from_list([2.1,3.1]) #works, uses extension method\n\n# Getting PointND as numpy array\nnumpy_point = java_point.as_numpy()\n\n# the same applies for SimpleVector\n_.SimpleVector(JArray(JDouble)([3,2]))  # works\n_.SimpleVector.from_numpy(np.array([2.1,3.1])) #works, uses extension method\n_.SimpleVector.from_list([2.1,3.1]) #works, uses extension method\n\n#Getting SimpleVector as numpy array\nnumpy_vector = java_vector.as_numpy()\n\n#the same applies for SimpleMatrix\nSimpleMatrix(JArray(JDouble,2)([[1.1,2.2,3.3],[4.4,5.5,6.6]]))  # works\nSimpleMatrix.from_numpy(np.matrix([[1.1,2.2,3.3],[4.4,5.5,6.6]])) #works, uses extension method\nSimpleMatrix.from_list([[1.1,2.2,3.3],[4.4,5.5,6.6]]) #works, uses extension method\n\n#Getting SimpleMatrix as numpy matrix\nnumpy_matrix = java_matrix.as_numpy()\n\n# Grid.setOrigin(...), setSpacing\n_.Grid2D(3,2).setOrigin(JArray(JDouble)([2,3]))\nPyGrid.from_grid(_.Grid2D(3,2)).set_origin([2,3])\nPyGrid.from_grid(_.Grid2D(3,2)).set_spacing([2,3])\n\n# Creating nested enums\ntraj = _.HelicalTrajectory()\nprint(traj.getDetectorOffsetU())  # returns a float\nenumval = _.['Projection$CameraAxisDirection'].values()[int(traj.getDetectorOffsetU())] # Convert back to enum\nenumval = jvm.enumval_from_int('Projection$CameraAxisDirection', traj.getDetectorOffsetU())  # or like that\n```",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://git5.cs.fau.de/PyConrad/pyCONRAD/",
    "keywords": "",
    "license": "GPL 3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyconrad",
    "platform": "",
    "project_url": "https://pypi.org/project/pyconrad/",
    "release_url": "https://pypi.org/project/pyconrad/0.0.7/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python wrapper for CONRAD (https://www5.cs.fau.de/conrad/), a framework for cone beam radiography",
    "version": "0.0.7"
  },
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "09b88ed37b4bc95b9b8af700f03b7aab",
          "sha256": "97b37fef65708e2ef58079dea6adfa009df5e1fdbffdb3a06dac403ef994d2b6"
        },
        "downloads": -1,
        "filename": "pyconrad-0.0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "09b88ed37b4bc95b9b8af700f03b7aab",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16505,
        "upload_time": "2017-08-24T11:36:40",
        "url": "https://files.pythonhosted.org/packages/97/c7/196b79fd006209363212450e53056295d7c1b4baee85d9150013687f9c59/pyconrad-0.0.2.0.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3a01915acea54d099be98859eddec5be",
          "sha256": "e94ff4c0add704f993d4a60ac65b478d2d7baf5752070dc360398aae5d2b0c89"
        },
        "downloads": -1,
        "filename": "pyconrad-0.0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3a01915acea54d099be98859eddec5be",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17393,
        "upload_time": "2017-08-25T07:13:28",
        "url": "https://files.pythonhosted.org/packages/70/53/2aee9cede564ef59733f39aa34c1cd05af8b15309c3aee738733898f7077/pyconrad-0.0.3.0.tar.gz"
      }
    ],
    "0.0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ac78ca692f5b6da21433533d9136c8d0",
          "sha256": "d76ed2edeaa59b205cbcb6b0de958c5becbc693e2ea28257c5fbf452caf94608"
        },
        "downloads": -1,
        "filename": "pyconrad-0.0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ac78ca692f5b6da21433533d9136c8d0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17361,
        "upload_time": "2017-08-25T10:50:31",
        "url": "https://files.pythonhosted.org/packages/a2/98/6a00743bb2a825f046c39f7657b81e64434d3ce7a6eda84d824433317fdb/pyconrad-0.0.3.1.tar.gz"
      }
    ],
    "0.0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "71b0b49d0e5a647c4d968e6f099e596b",
          "sha256": "524b84e255026cc23172f537391084aa74a8832d0ec9eca3c2d84b9b3a984762"
        },
        "downloads": -1,
        "filename": "pyconrad-0.0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "71b0b49d0e5a647c4d968e6f099e596b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19181,
        "upload_time": "2017-08-31T13:22:23",
        "url": "https://files.pythonhosted.org/packages/0e/27/ec543de7e6631aafc4bdccb1ac85a836ad4d6112e2248d7f1b886faf4adb/pyconrad-0.0.5.0.tar.gz"
      }
    ],
    "0.0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f5ecdf185603c67cfd8535a65721f997",
          "sha256": "7d8e6e1139e5e7726ea1f6f3f24462bca3a89594f4926fc8c4c53bd6593fe05e"
        },
        "downloads": -1,
        "filename": "pyconrad-0.0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f5ecdf185603c67cfd8535a65721f997",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6325,
        "upload_time": "2017-08-31T21:58:08",
        "url": "https://files.pythonhosted.org/packages/a5/08/38798fe6c18e4305cdc067bc2a5d0d53c51c2443eb6cedfff8c330a67f12/pyconrad-0.0.6.0.tar.gz"
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4e1c8c81a9cb06745f5d9c952660f8ba",
          "sha256": "7e17fa9c3e6f1f6b25c068f8f785562a41c3a473775049a1466503bf9cd32be1"
        },
        "downloads": -1,
        "filename": "pyconrad-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "4e1c8c81a9cb06745f5d9c952660f8ba",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 786685,
        "upload_time": "2017-12-13T16:52:18",
        "url": "https://files.pythonhosted.org/packages/07/1a/a872c06f739194cae3491755755adeafb383bffaa666c395ad3654005837/pyconrad-0.0.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4e1c8c81a9cb06745f5d9c952660f8ba",
        "sha256": "7e17fa9c3e6f1f6b25c068f8f785562a41c3a473775049a1466503bf9cd32be1"
      },
      "downloads": -1,
      "filename": "pyconrad-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "4e1c8c81a9cb06745f5d9c952660f8ba",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 786685,
      "upload_time": "2017-12-13T16:52:18",
      "url": "https://files.pythonhosted.org/packages/07/1a/a872c06f739194cae3491755755adeafb383bffaa666c395ad3654005837/pyconrad-0.0.7.tar.gz"
    }
  ]
}