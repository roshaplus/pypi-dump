{
  "info": {
    "author": "Ken Dreyer",
    "author_email": "kdreyer@redhat.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "``errata-tool``\n===============\n\n.. image:: https://travis-ci.org/red-hat-storage/errata-tool.svg?branch=master\n          :target: https://travis-ci.org/red-hat-storage/errata-tool\n\n.. image:: https://badge.fury.io/py/errata-tool.svg\n             :target: https://badge.fury.io/py/errata-tool\n\nModern Python API to Red Hat's Errata Tool.\n\npython-errata-tool is a Python library that wraps the Errata Tool's REST API.\nIt uses `requests_kerberos <https://pypi.python.org/pypi/requests-kerberos>`_\nto authenticate and parses JSON responses into ``Erratum`` objects. You can\nuse it to create new advisories, or read and update existing advisories. The\n``ErratumConnector`` class also provides lower-level access to all of the\nErrata Tool's REST API.\n\nExample:\n\n.. code-block:: python\n\n    from errata_tool import Erratum\n\n    e = Erratum(errata_id=1234)\n\n    print(e.errata_state)\n    # prints \"NEW_FILES\"\n\n    print(e.url())\n    # prints \"https://errata.devel.redhat.com/advisory/1234\"\n\nCreating a new advisory:\n\n.. code-block:: python\n\n    e = Erratum(product='RHCEPH',\n                release='RHCEPH-2-RHEL-7',\n                synopsis='Red Hat Ceph Storage 2.1 bug fix update',\n                topic='An update for Red Hat Ceph 2.1 is now available.',\n                description='This update contains the following fixes ...',\n                solution='Before applying this update...',\n                qe_email='someone@redhat.com',\n                qe_group='RHC (Ceph) QE',\n                errata_type='RHBA',\n                owner_email='kdreyer@redhat.com',\n                manager_email='ohno@redhat.com',\n                )\n    e.commit()\n    print(e.url())\n\nRemoving bugs:\n\n.. code-block:: python\n\n    e = Erratum(errata_id=22986)\n\n    e.removeBugs([12345, 123678])\n\n    # You can simply call \"commit()\" without checking the return code, or check\n    # it and use refresh() to refresh our local instance data for the errata\n    # advisory.\n    need_refresh = e.commit()\n\n    if need_refresh:\n        print('refreshing')\n        e.refresh()\n\nChecking whether an advisory is embargoed:\n\n.. code-block:: python\n\n    e = Erratum(errata_id=22986)\n\n    if e.embargoed:\n        # it's embargoed\n    else:\n        # it's not embargoed\n\nChecking whether an advisory is text-only:\n\n.. code-block:: python\n\n    e = Erratum(errata_id=24075)\n\n    if e.text_only:\n        # it's text-only\n    else:\n        # it's not text-only\n\nAdding builds:\n\n.. code-block:: python\n\n    e = Erratum(errata_id=24075)\n\n    e.addBuilds(['ceph-10.2.3-17.el7cp'], release='RHEL-7-CEPH-2')\n\nChanging state:\n\n.. code-block:: python\n\n    e = Erratum(errata_id=24075)\n\n    e.setState('QE')\n\nChanging docs reviewer:\n\n.. code-block:: python\n\n    e = Erratum(errata_id=24075)\n\n    e.changeDocsReviewer('kdreyer@redhat.com')\n\nAdding someone to the CC list:\n\n.. code-block:: python\n\n    e = Erratum(errata_id=24075)\n\n    e.addCC('kdreyer@redhat.com')\n\n\nUsing the staging server\n------------------------\n\nTo use the staging Errata Tool environment without affecting production, set\nthe ``ErrataConnector._url`` member variable to the staging URL.\n\n.. code-block:: python\n\n    from errata_tool import ErrataConnector, Erratum\n\n    ErrataConnector._url = 'https://errata.stage.engineering.redhat.com/'\n    # Now try something like creating an advisory, and it will not show up in\n    # prod, or bother people with emails, etc.\n    e = Erratum(product='RHCEPH',\n                release='RHCEPH-2-RHEL-7',\n                synopsis='Red Hat Ceph Storage 2.1 bug fix update',\n                ...\n                )\n    e.commit()\n\n\nDebugging many Errata Tool API calls\n------------------------------------\n\nMaybe your application makes many API calls (lots of advisories, builds, etc),\nWhen processing large numbers of errata from higher-level tools, it's helpful\nto understand where the time is spent to see if multiple calls can be avoided.\n\nSet ``ErrataConnector.debug = True``, and then your connector object will\nrecord information about each call it makes.  Each GET/PUT/POST is recorded,\nalong with totals / mean / min / max.\n\nURL APIs are deduplicated based on their name, so two calls to different\nerrata on the same API is recorded as a single API.\n\nTo extract the information and print it, one might use PrettyTable:\n\n.. code-block:: python\n\n    e = Erratum(errata_id=24075)\n    pt = PrettyTable()\n    for c in ErrataConnector.timings:\n        for u in ErrataConnector.timings[c]:\n            pt.add_row([c, u,\n                       ErrataConnector.timings[c][u]['count'],\n                       ErrataConnector.timings[c][u]['total'],\n                       ErrataConnector.timings[c][u]['mean'],\n                       ErrataConnector.timings[c][u]['min'],\n                       ErrataConnector.timings[c][u]['max']])\n    print(pt.get_string())\n\n\nSSL errors\n----------\n\nThis library verifies the ET server's HTTPS certificate by default. This is\nmore of a python-requests thing, but if you receive an SSL verification error,\nit's probably because you don't have the Red Hat IT CA set up for your Python\nenvironment. Particularly if you're running this in a virtualenv, you'll want\nto set the following configuration variable::\n\n    REQUESTS_CA_BUNDLE=/etc/pki/ca-trust/source/anchors/RH-IT-Root-CA.crt\n\nWhere \"RH-IT-Root-CA.crt\" is the public cert that signed the ET server's\nHTTPS certificate.\n\nWhen using RHEL 7's python-requests RPM, requests simply checks\n``/etc/pki/tls/certs/ca-bundle.crt``, so you'll need to add the IT CA cert to\nthat big bundle file.\n\nIf you've already added the Red Hat IT CA to your system-wide bundle, you can\nhave your Python code always use this file:\n\n.. code-block:: python\n\n    if 'REQUESTS_CA_BUNDLE' not in os.environ:\n        os.environ['REQUESTS_CA_BUNDLE'] = '/etc/pki/tls/certs/ca-bundle.crt'\n\nThis will make requests behave the same inside or outside your virtualenv. In\nother words, with this code, your program will always validate the Red Hat IT\nCA.\n\nBuilding RPMs\n-------------\n\nInstall fedpkg, then use the Makefile::\n\n    $ make srpm\n\nYou can then upload the SRPM to Copr. Or, to build RPMs on your local\ncomputer, using mock::\n\n    $ make rpm\n\n\nChangelog\n---------\nCheck out the `CHANGELOG`_.\n\n.. _CHANGELOG: CHANGELOG.rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/red-hat-storage/errata-tool",
    "keywords": "packaging,build",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "errata-tool",
    "platform": "",
    "project_url": "https://pypi.org/project/errata-tool/",
    "release_url": "https://pypi.org/project/errata-tool/1.9.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python API for Red Hat Errata Tool",
    "version": "1.9.0"
  },
  "releases": {
    "1.8.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5fc518a8a9bd5c611a49d71454549ee5",
          "sha256": "a5e394e29e0a53e63f05bf789eb417a62d6c227657e0258e81285c07f5b9dda8"
        },
        "downloads": 0,
        "filename": "errata-tool-1.8.0.tar.gz",
        "has_sig": true,
        "md5_digest": "5fc518a8a9bd5c611a49d71454549ee5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38532,
        "upload_time": "2017-05-30T20:43:42",
        "url": "https://files.pythonhosted.org/packages/d3/8e/d9f3aea16c9ab1a828a5c525003f131bb14c462ad4981863d3bb6052d771/errata-tool-1.8.0.tar.gz"
      }
    ],
    "1.8.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1d83be801eef4f186f11a780024e8045",
          "sha256": "d5bf695098a5596f25b3e7e6c1eefed84d10e09c3e5a4ccdef5dc5680e9b20a8"
        },
        "downloads": 0,
        "filename": "errata-tool-1.8.1.tar.gz",
        "has_sig": true,
        "md5_digest": "1d83be801eef4f186f11a780024e8045",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38798,
        "upload_time": "2017-07-24T20:28:29",
        "url": "https://files.pythonhosted.org/packages/e2/89/e08dfee82de6b0eff6b6b0672e698c722e457f091a69f8b1c807a91557f9/errata-tool-1.8.1.tar.gz"
      }
    ],
    "1.8.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e3fc8c4099bc930aa251b9bb517f8d0f",
          "sha256": "f651ed529e023e297907cb8d1648f3e941dd70dfa735c7eb01eea6f2ae38ef24"
        },
        "downloads": 0,
        "filename": "errata-tool-1.8.2.tar.gz",
        "has_sig": true,
        "md5_digest": "e3fc8c4099bc930aa251b9bb517f8d0f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39057,
        "upload_time": "2017-08-23T18:58:08",
        "url": "https://files.pythonhosted.org/packages/11/57/b6a1af0c4aa4bb5f6e6ba2c2241a9d7fcf2f57ad187c3d1237d2fce4eade/errata-tool-1.8.2.tar.gz"
      }
    ],
    "1.9.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "75d32becde30197b993dbe24edcf9845",
          "sha256": "e6c687c011ab98ffb145cc4705ea4137c38de0062bad2b814becbb665ec60374"
        },
        "downloads": 0,
        "filename": "errata-tool-1.9.0.tar.gz",
        "has_sig": true,
        "md5_digest": "75d32becde30197b993dbe24edcf9845",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39744,
        "upload_time": "2017-10-05T20:21:29",
        "url": "https://files.pythonhosted.org/packages/6c/c7/77c4c079a847553160b6134afc5cebc0c5061bfdc23d05e01fb813afb3ce/errata-tool-1.9.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "75d32becde30197b993dbe24edcf9845",
        "sha256": "e6c687c011ab98ffb145cc4705ea4137c38de0062bad2b814becbb665ec60374"
      },
      "downloads": 0,
      "filename": "errata-tool-1.9.0.tar.gz",
      "has_sig": true,
      "md5_digest": "75d32becde30197b993dbe24edcf9845",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 39744,
      "upload_time": "2017-10-05T20:21:29",
      "url": "https://files.pythonhosted.org/packages/6c/c7/77c4c079a847553160b6134afc5cebc0c5061bfdc23d05e01fb813afb3ce/errata-tool-1.9.0.tar.gz"
    }
  ]
}