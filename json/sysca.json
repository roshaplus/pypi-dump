{
  "info": {
    "author": "Marko Kreen",
    "author_email": "markokr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Security :: Cryptography",
      "Topic :: System :: Systems Administration",
      "Topic :: Utilities"
    ],
    "description": "SysCA - Certificate tool for Sysadmins\n======================================\n\nDescription\n-----------\n\nEasy-to-use tool for certificate management.  To make data flow simple,\nit does not support metadata rewrite during signing, all data should\nbe correct in certificate request.\n\nFeatures\n--------\n\n- **No interactive data entry.**\n- Simple command-line UI.\n- Good defaults, sets up common extensions automatically.\n- PGP- and password-protected private keys.\n- OCSP and CRL info settings.\n- Supports both EC and RSA keys.\n\nDependencies\n------------\n\n- Python `cryptography`_ module (version >= 1.2).\n- (Optional) `gpg`_ command-line tool to decrypt files.\n- (Optional) `openssl`_ command-line tool to show CRT/CSR contents.\n\n.. _cryptography: https://cryptography.io/\n.. _gpg: https://www.gnupg.org/\n.. _openssl: https://www.openssl.org/\n\nSummary\n-------\n\nGenerate new key::\n\n    sysca new-key              [--password-file TXT_FILE] [--out DST]\n    sysca new-key ec[:<curve>] [--password-file TXT_FILE] [--out DST]\n    sysca new-key rsa[:<bits>] [--password-file TXT_FILE] [--out DST]\n\nCreate certificate signing request::\n\n    sysca request --key KEY_FILE [--password-file TXT_FILE]\n                  [--subject DN] [--san ALTNAMES]\n                  [--CA] [--path-length DEPTH]\n                  [--usage FLAGS] [--ocsp-url URLS] [--crl-url URLS]\n                  [--issuer-cert-url URLS]\n                  [--out CSR_FN]\n\nSign certificate signing request::\n\n    sysca sign --ca-key KEY_FILE --ca-info CRT_FILE\n               --request CSR_FILE --days NUM\n               [--out CRT_FN] [--password-file TXT_FILE]\n\nDisplay contents of CSR or CRT file::\n\n    sysca show FILE\n\nCommands\n--------\n\nnew-key\n~~~~~~~\n\nGenerate new key.\n\nTakes key type as optional argument.  Value can be either ``ec:<curve>``\nor ``rsa:<bits>``.  Shortcuts: ``ec`` is ``ec:secp256r1``,\n``rsa`` is ``rsa:2048``.  Default: ``ec``.\n\nAvailable curves for EC: ``secp256r1``, ``secp384r1``,\n``secp521r1``, ``secp224r1``, ``secp192r1``.\n\nOptions:\n\n--password-file FILE\n    Password will be loaded from file.  Can be PGP-encrypted.\n    Resulting private key will be encrypted with this password.\n\n--out DST_FN\n    Target file to write key to.  It's preferable to write to\n    stdout and encrypt with GPG.\n\nrequest\n~~~~~~~\n\nCreate certificate request.\n\nOptions:\n\n--out CSR_FILE\n    Target file to write CSR to.\n\n--key KEY_FILE\n    Private key file to create request for.  Can be PGP-encrypted.\n    Can be password-protected.\n\n--password-file FN\n    Password file for private key.  Can be PGP-encrypted.\n\n--subject DN\n    Subject's DistinguishedName which is X509 Name structure, which is collection\n    of key-value pairs.\n\n    Each pair is separated with \"/\", key and value are separated with \"=\".\n    Surrounding whitespace around both \"/\" and \"=\" will be stripped.\n    \"\\\\\" can be used for escaping.\n\n    Most important field: CN=commonName.\n\n    Common fields: O=organizationName, OU=organizationalUnit, C=countryName,\n    L=locality, ST=stateOrProvinceName.\n\n    Less common fields: SN=surname, GN=givenName, T=title, P=pseudonym,\n    SA=streetAddress.\n\n    Example: ``--subject \"/CN=www.example.com/ O=My Company / OU = DevOps\"``\n\n    Default: empty.\n\n    Certificate field: Subject_.\n\n--CA\n    The certificate will have CA rights - that means it can\n    sign other certificates.\n\n    Extension: BasicConstraints_.\n\n--path-length\n    Applies only for CA certs - limits how many levels on sub-CAs\n    can exist under generated certificate.  Default: 0.\n\n    Extension: BasicConstraints_.\n\n--san ALT_NAMES\n    Specify alternative names for subject as list of comma-separated\n    strings, that have prefix that describes data type.\n\n    Supported prefixes:\n\n        dns\n            Domain name.\n        email\n            Email address.  Plain addr-spec_ (local_part @ domain) is allowed here,\n            no <> or full name.\n        ip\n            IPv4 or IPv6 address.\n        uri\n            Uniform Resource Identifier.\n        dn\n            DirectoryName, which is X509 Name structure.  See ``--subject`` for syntax.\n\n    Example: ``--san \"dns: *.example.com, dns: www.foo.org, ip: 127.0.0.1 \"``\n\n    Extension: SubjectAlternativeName_.\n\nOptions useful only when apps support them:\n\n--crl-url URLS\n    List of URLS where certificate revocation lists can be downloaded.\n\n    Extension: CRLDistributionPoints_.\n\n--ocsp-url URLS\n    List of URL for OCSP endpoint where validity can be checked.\n\n    Extension: AuthorityInformationAccess_.\n\n--issuer-url URLS\n    List of URLS where parent certificate can be downloaded,\n    in case the parent CA is not root CA.  Usually sub-CA certificates\n    should be provided during key-agreement (TLS).  This setting\n    is for situations where this cannot happen or for fallback\n    for badly-configured TLS servers.\n\n    Extension: AuthorityInformationAccess_.\n\n--usage USAGE_FLAGS\n    Comma-separated keywords that set KeyUsage and ExtendedKeyUsage flags.\n\n    ExtendedKeyUsage_ flags, none set by default.\n\n        client\n            TLS Web Client Authentication.\n        server\n            TLS Web Server Authentication.\n        code\n            Code signing.\n        email\n            E-mail protection.\n        time\n            Time stamping.\n        ocsp\n            OCSP signing.\n        any\n            All other purposes too that are not explicitly mentioned.\n\n    KeyUsage_ flags, set by default.  Not much use for non-default\n    settings.\n\n        digital_signature\n            Allowed to sign anything that is not certificate for key.\n            Set by default for non-CAs.\n        key_agreement\n            Key is allowed to use in key agreement.\n            Set by default for non-CAs.\n        key_cert_sign\n            Allowed to sign certificates for other keys.\n            Set by default for CAs.\n        crl_sign\n            Allowed to sign certificates for certificate revocation lists (CRLs).\n            Set by default for CAs.\n        key_encipherment\n            Secret keys (either private or symmetric) can be encrypted against\n            public key in certificate.  Does not apply to session keys, but\n            standalone secret keys?\n        data_encipherment\n            Raw data can be encrypted against public key in certificate. [Bad idea.]\n        content_commitment\n            Public key in certificate can be used for signature checking in\n            \"seriously-i-mean-it\" environment.  [Historical.]\n        encipher_only\n            If ``key_agreement`` is true, this flag limits use only for data encryption.\n        decipher_only\n            If ``key_agreement`` is true, this flag limits use only for data decryption.\n\n--exclude-subtrees NAME_PATTERNS\n    Disallow CA to sign subjects that match patterns.  See ``--permit-subtrees``\n    for details.\n\n--permit-subtrees NAME_PATTERNS\n    Allow CA to sign subjects that match patterns.\n\n\n    Specify patters for subject as list of comma-separated\n    strings, that have prefix that describes data type.\n\n    Supported prefixes:\n\n        dns\n            Domain name.\n        email\n            Email address.  Plain addr-spec_ (local_part @ domain) is allowed here,\n            no <> or full name.\n        net\n            IPv4 or IPv6 network.\n        uri\n            Uniform Resource Identifier.\n        dn\n            DirectoryName, which is X509 Name structure.  See ``--subject`` for syntax.\n\n    Extension: NameConstraints_.\n\nsign\n~~~~\n\nCreate signed certificate based on data in request.\nAny unsupported extensions in request will cause error.\n\nIt will add SubjectKeyIdentifier_ and AuthorityKeyIdentifier_\nextensions to final certificate that help to uniquely identify\nboth subject and issuers public keys.  Also IssuerAlternativeName_\nis added as copy of CA cert's SubjectAlternativeName_ extension\nif present.\n\nOptions:\n\n--out CRT_FILE\n    Target file to write certificate to.\n\n--days NUM\n    Lifetime for certificate in days.\n\n--request CSR_FILE\n    Certificate request file generated by **request** command.\n\n--ca-key KEY_FILE\n    CA private key file.  Can be PGP-encrypted.\n    Can be password-protected.\n\n--ca-info CRT_FILE\n    CRT file generated by **request** command.  Issuer CA info\n    will be loaded from it.\n\n--password-file FN\n    Password file for CA private key.  Can be PGP-encrypted.\n\nshow\n~~~~\n\nDisplay contents of CSR or CRT file.\n\nPrivate Key Protection\n----------------------\n\nPrivate keys can be stored unencryped, encrypted with PGP, encrypted with password or both.\nUnencrypted keys are good only for testing.  Good practice is to encrypt both CA and\nend-entity keys with PGP and use passwords only for keys that can be deployed to servers\nwith password-protection.\n\nFor each key, different set of PGP keys can be used that can decrypt it::\n\n    $ ./sysca.py new-key | gpg -aes -r \"admin@example.com\" -r \"backup@example.com\" > CA.key.gpg\n    $ ./sysca.py new-key | gpg -aes -r \"admin@example.com\" -r \"devops@example.com\" > server.key.gpg\n\nExample\n-------\n\nSelf-signed CA example::\n\n    $ ./sysca.py new-key | gpg -aes -r \"admin@example.com\" > TestCA.key.gpg\n    $ ./sysca.py request --key TestCA.key.gpg --subject \"/CN=TestCA/O=Gov\" --CA > TestCA.csr\n    $ ./sysca.py sign --request TestCA.csr --ca-key TestCA.key.gpg --ca-info TestCA.csr > TestCA.crt\n\nSign server key::\n\n    $ ./sysca.py new-key | gpg -aes -r \"admin@example.com\" > Server.key.gpg\n    $ ./sysca.py request --key Server.key.gpg --subject \"/CN=web.server.com/O=Gov\" > Server.csr\n    $ ./sysca.py sign --days 365 --request Server.csr --ca-key TestCA.key.gpg --ca-info TestCA.crt > Server.crt\n\n\nCompatibility notes\n-------------------\n\nAlthough SysCA allows to set various extension parameters, that does not\nmean any software that uses the certificates actually the looks\nor acts on the extensions.  So it's reasonable to set up only\nextensions that are actually used.\n\nTODO\n----\n\n* Shortcut for selfsigned cert?  (For top-CA)\n* Allow field overrides during sign?\n\n.. _Subject: https://tools.ietf.org/html/rfc5280#section-4.1.2.6\n.. _BasicConstraints: https://tools.ietf.org/html/rfc5280#section-4.2.1.9\n.. _KeyUsage: https://tools.ietf.org/html/rfc5280#section-4.2.1.3\n.. _ExtendedKeyUsage: https://tools.ietf.org/html/rfc5280#section-4.2.1.12\n.. _CRLDistributionPoints: https://tools.ietf.org/html/rfc5280#section-4.2.1.13\n.. _SubjectAlternativeName: https://tools.ietf.org/html/rfc5280#section-4.2.1.6\n.. _IssuerAlternativeName: https://tools.ietf.org/html/rfc5280#section-4.2.1.7\n.. _AuthorityInformationAccess: https://tools.ietf.org/html/rfc5280#section-4.2.2.1\n.. _NameConstraints: https://tools.ietf.org/html/rfc5280#section-4.2.1.10\n.. _AuthorityKeyIdentifier: https://tools.ietf.org/html/rfc5280#section-4.2.1.1\n.. _SubjectKeyIdentifier: https://tools.ietf.org/html/rfc5280#section-4.2.1.2\n.. _addr-spec: https://tools.ietf.org/html/rfc5322#section-3.4.1",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/markokr/sysca",
    "keywords": "x509,tls,ssl,certificate,authority,command-line,server,authentication",
    "license": "ISC",
    "maintainer": null,
    "maintainer_email": null,
    "name": "sysca",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/sysca/",
    "release_url": "https://pypi.org/project/sysca/1.0.2/",
    "requires_python": null,
    "summary": "Certificate tool for Sysadmins",
    "version": "1.0.2"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "63bdcfe13102d5f88eb51fb927d57aad",
          "sha256": "b4a6d200bcbabc3743fb36dd035db4b88b06cdc923b61cfb78e0deb20db8100b"
        },
        "downloads": 558,
        "filename": "sysca-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "63bdcfe13102d5f88eb51fb927d57aad",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17209,
        "upload_time": "2016-07-14T14:34:45",
        "url": "https://files.pythonhosted.org/packages/30/df/f2bd18fe5e60eb528473153cbca00a29240dfb91ae896d9a108cbe16763c/sysca-1.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ef14659493eb71c969b33fb7236c7591",
          "sha256": "f9fbd4ea706f31131f7771dbae46fe7a7c4c2a6b1b709744bfb409b3a4596614"
        },
        "downloads": 308,
        "filename": "sysca-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ef14659493eb71c969b33fb7236c7591",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17268,
        "upload_time": "2016-07-14T15:13:16",
        "url": "https://files.pythonhosted.org/packages/c9/47/fb6549e42cd065a1b89f582cc6e649585d545c3a3e4883c61f2e803956bc/sysca-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d3648ea3b777e1db8ea860bf7414ecb0",
          "sha256": "f53d6df0e5be7745976c7f711e1e1f078c4026492f6b3295f8be64916d775b33"
        },
        "downloads": 219,
        "filename": "sysca-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d3648ea3b777e1db8ea860bf7414ecb0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17402,
        "upload_time": "2016-09-01T16:01:52",
        "url": "https://files.pythonhosted.org/packages/41/a1/775dac6135bbb05438f79fd34c4bdeeffaa47c0736703fa2c6d77a863b0e/sysca-1.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d3648ea3b777e1db8ea860bf7414ecb0",
        "sha256": "f53d6df0e5be7745976c7f711e1e1f078c4026492f6b3295f8be64916d775b33"
      },
      "downloads": 219,
      "filename": "sysca-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d3648ea3b777e1db8ea860bf7414ecb0",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 17402,
      "upload_time": "2016-09-01T16:01:52",
      "url": "https://files.pythonhosted.org/packages/41/a1/775dac6135bbb05438f79fd34c4bdeeffaa47c0736703fa2c6d77a863b0e/sysca-1.0.2.tar.gz"
    }
  ]
}