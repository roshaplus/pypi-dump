{
  "info": {
    "author": "Nick Maina",
    "author_email": "nick.maina1@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.0",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "## Atomic Pay: Integrate Payments Easily\r\n### Provides Python APIs to create, process and manage mobile payments.\r\nUsed internally at Atom Payments Ltd subsidiary of *Turbopay Holdings Ltd*\r\n\r\n[![Build Status](https://travis-ci.org/mainanick/atomic-pay.svg?branch=master)](https://travis-ci.org/mainanick/atomic-pay)\r\n[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)\r\n[![Say Thanks!](https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg)](https://saythanks.io/to/mainanick)\r\n\r\n\r\n#### Stage: Draft\r\n\r\nAtomic Pay makes it easily possible to intergrate with mpesa or equity. Many More to be supported in future\r\n\r\n\r\n\r\n# Mpesa\r\n```python\r\n>>> import atomic as atm \r\n\r\n>>> mpesa = atm.Mpesa(<key>, <secret>, <config>)\r\n```\r\nOr\r\n```python\r\n>>> import atomic as atm\r\n\r\n>>> with atm.Mpesa(<key>, <secret>, config=configs) as at:\r\n>>>      print(at.balance())\r\n```\r\n\r\nTakes the consumer key, consumer secret and the configuration dict\r\n\r\n*Live defaults to False*\r\n\r\n```python\r\n>>> mpesa = atm.Mpesa(<key>, <secret>, <config>, live=True)\r\n```\r\n### Test listener (https://github.com/mainanick/atomic-pay/tree/master/docs/listener)\r\n## Configurations\r\nIn order to simplify the work of integrating it is worth it to write a one time config dict\r\n\r\n```python\r\nconfigs = {\r\n    \"Shortcode\": 111111,\r\n    \"Initiator\": \"AtomicPay\",\r\n    \"SecurityCredential\": \"xxxxxxxx...\",\r\n    \"Shortcode2\": 222222, #Test PartyB\r\n    \"MSISDN\": 254712345678, #Test\r\n    \"LipaShortcode\": 333333,\r\n    \"LipaPassKey\": \"xxxxxxxx...\",\r\n    \"URLS\":{\r\n        \"BALANCE\":{\r\n            \"QueueTimeOutURL\": \"\",\r\n            \"ResultURL\": \"\",\r\n        },\r\n        \"TRANSACTIONS\":{\r\n            \"QueueTimeOutURL\": \"\",\r\n            \"ResultURL\": \"\",\r\n        },\r\n        \"B2B\":{\r\n            \"QueueTimeOutURL\": \"\",\r\n            \"ResultURL\": \",\r\n        },\r\n        \"B2C\":{\r\n            \"QueueTimeOutURL\": \"\",\r\n            \"ResultURL\": \"\",\r\n        },\r\n        \"LIPA\":{\r\n            \"CallBackURL\": \"\",\r\n        }\r\n    }   \r\n}\r\n```\r\nPass the configs\r\n```python\r\n>>> mpesa = atm.Mpesa(<key>, <secret>, config=configs, live=False)\r\n```\r\n\r\n\r\n## Responses\r\nEvery mpesa api call return an instance of MpesaResponse\r\n\r\nEvery equity api call return an instance of EquityResponse\r\n\r\n#### MpesaResponse\r\n- .json(): Returns the original json response [json]\r\n- .code: Returns mpesa status code [str]\r\n- .ok: Returns True for successful requests else False\r\n- .text: Returns the response description\r\n\r\n```python\r\n>>> response = mpesa.balance()\r\n\r\n>>> print(response) #prints <MpesaResponse [200]>\r\n\r\n\"\"\"Response Description message\"\"\"\r\n>>> response.text\r\n\r\n\"\"\"Mpesa status code\"\"\"\r\n>>> response.code\r\n\r\n\"\"\"Check if requests was successful\"\"\"\r\n>>> if response.ok:\r\n>>>    print(\"Okayyy\")\r\n```\r\n\r\n## Balance\r\n```python\r\n>>> response = mpesa.balance()\r\n```\r\n## Transactions\r\n```python\r\n>>> response = mpesa.transaction(<txn_id>, <originator_id>)\r\n```\r\n\r\n## Business to Business\r\n```python\r\n>>> b2b = mpesa.b2b()\r\n\r\n>>> response = b2b.buy_goods(<to>, <amount>, <reference>,<remarks>)\r\n\r\n>>> response = b2b.paybill(<to>, <amount>, <reference>,<remarks>)\r\n```\r\n\r\n## Business to Customer\r\n```python\r\n>>> b2c = mpesa.b2c()\r\n\r\n>>> response = b2c.pay_salary(<to>, <amount>, <remarks>)\r\n\r\n>>> response = b2c.pay_business(<to>, <amount>, <remarks>)\r\n\r\n>>> response = b2c.pay_promotion(<to>, <amount>, <remarks>, <occassion>)\r\n\r\n```\r\n\r\n## Lipa Na Mpesa\r\n```python\r\n>>> lipa = mpesa.lipa()\r\n\r\n>>> pay = lipa.pay(<to>, <amount>, <description>, <reference>)\r\n\r\n>>> if pay.ok:\r\n        checkout_id = r.json()['CheckoutRequestID']\r\n        response = lipa.query(checkout_id)        \r\n        print(response.json())\r\n```\r\n## Advanced\r\nAtomic apis are also async\r\njust pass a callback and thats all\r\n```python\r\n>>> def callback(response):\r\n>>>     print(response.json())\r\n\r\n>>> mpesa.balance(callback=callback)\r\n\r\n>>> lipa.pay(<to>, <amount>, <description>, <reference>, callback=callback)\r\n```\r\n\r\n## Not Implemented\r\n### B2B\r\n- DisburseFundsToBusiness\r\n- BusinessToBusinessTransfer\r\n- MerchantToMerchantTransfer\r\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/mainanick/atomicpay",
    "keywords": "payments development",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "atomicpay",
    "platform": "",
    "project_url": "https://pypi.org/project/atomicpay/",
    "release_url": "https://pypi.org/project/atomicpay/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Simplified Payments",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7a4817b94d81d85c69cc5297588280ab",
          "sha256": "b72badfc9c44c1b1dafd56ee1a9f63373f4987ce0531befd676566c00a828080"
        },
        "downloads": -1,
        "filename": "atomicpay-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7a4817b94d81d85c69cc5297588280ab",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8189,
        "upload_time": "2017-11-25T18:08:55",
        "url": "https://files.pythonhosted.org/packages/c0/93/30dac294845c9b6dfa966d315fd43e86494b7153dd35fce3147d6bb00bb7/atomicpay-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7a4817b94d81d85c69cc5297588280ab",
        "sha256": "b72badfc9c44c1b1dafd56ee1a9f63373f4987ce0531befd676566c00a828080"
      },
      "downloads": -1,
      "filename": "atomicpay-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7a4817b94d81d85c69cc5297588280ab",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8189,
      "upload_time": "2017-11-25T18:08:55",
      "url": "https://files.pythonhosted.org/packages/c0/93/30dac294845c9b6dfa966d315fd43e86494b7153dd35fce3147d6bb00bb7/atomicpay-0.1.0.tar.gz"
    }
  ]
}