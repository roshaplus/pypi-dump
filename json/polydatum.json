{
  "info": {
    "author": "Mike Thornton",
    "author_email": "six8@devdetails.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=========\nPolydatum\n=========\n\nA Python encapsulated persistence layer for supporting many data access layers.\n\n\nComponents\n----------\n\n### DataManager\n\nThe DataManager is the central object of Polydatum. It is a top-level registry for\nServices, Resources, and Middleware. Typically an application has one DataManager\nper process. The DataManager also manages Contexts and gives access the DAL.\n\n\n### Context\n\nThe Context contains the current state for the active request. It also provides\naccess to Resources. When used in an HTTP framework typically one context is\ncreated at the start of the HTTP request and it ends before the HTTP response\nis sent.\n\nWhen used with task managers such as Celery, the Context is created at the\nstart of a task and ends before the task result is returned.\n\n\n### DAL\n\nThe DAL is the \"Data Access Layer\". The DAL is the registry for all Services.\nTo make call a method on a Service, you start with the DAL.\n\n::\n\n    result = dal.someservice.somemethod()\n\n\n### Service\n\nServices encapsulate business logic and data access. They are the Controller of\nMVC-like applications. Services can be nested within other services.\n\n::\n\n    dal.register_services(\n        someservice=SomeService().register_services(\n            subservice=SubService()\n        )\n    )\n\n    result = dal.someservice.subservice.somemethod()\n\n\n### Meta\n\nMeta is data about the context and usually includes things like the active\nuser or HTTP request. Meta is read only and can not be modified inside the\ncontext.\n\n::\n\n    class UserService(Service):\n        def get_user(self):\n            return self._ctx.meta.user\n\n    dm = DataManager()\n    dm.register_services(users=UserService())\n\n    with dm.context(meta={'user': 'bob'}) as ctx:\n        assert ctx.dal.test.get_user() == 'bob'\n\n\n### Resource\n\nResources are on-demand access to data backends such as SQL databases, key\nstores, and blob stores. Resources have a setup and teardown phase. Resources\nare only initialized and setup when they are first accessed within a context.\nThis lazy loading ensures that only the Resources that are needed for a\nparticular request are initialized.\n\nThe setup/teardown phases are particularly good for checking connections out\nfrom a connection pool and checking them back in at the end of the request.\n\n::\n\n    def db_pool(context):\n        conn = db.checkout_connection()\n        yield conn\n        db.checkin_connection(conn)\n\n    class ItemService(Service):\n        def get_item(self, id):\n            return self._data_manager.db.query(\n                'SELECT * FROM table WHERE id={id}',\n                id=id\n            )\n\n    dm = DataManager()\n    dm.register_services(items=ItemService())\n    dm.register_resources(db=db_pool)\n\n    with dm.dal() as dal:\n        item = dal.items.get_item(1)\n\n\n### Middleware\n\nMiddleware have a setup and teardown phase for each context. They are\nparticularly useful for managing transactions or error handling.\n\nContext Middleware may only see and modify the Context. With the\nContext, Context Middleware can gain access to Resources.\n\n::\n\n    def transaction_middleware(context):\n        trans = context.db_resource.new_transaction()\n        trans.start()\n        try:\n            yield trans\n        except:\n            trans.abort()\n        else:\n            trans.commit()\n\n    dm = DataManager()\n    dm.register_context_middleware(transaction_middleware)\n\n\nPrincipals\n----------\n\n- Methods that get an object should return `None` if an object can not be found.\n- Methods that rely on an object existing to work (such as `create` that relies\n  on a parent object) should raise `NotFound` if the parent object does not exist.\n- All data access (SQL, MongoDB, Redis, S3, etc) must be done within a Service.\n\n\nConsiderations\n--------------\n\n### Middleware vs Resource\n\nA Resource is created on demand. It's purpose is to create a needed resource\nfor a request and clean it up when done. It is created inside the context (and possibly\nby middleware). Errors that occur during Resource teardown are suppressed.\n\nMiddleware is ran on every context. It is setup before the context is active and\ntorndown before resources are torndown. It's purpose is to do setup/teardown within\nthe context. Errors that occur in-context are propagated to middleware. Errors that\noccur in middleware are also propagated.\n\n\nTesting\n-------\n\nTo run tests you'll need to install the test requirements:\n\n    pip install -e .\n    pip install -r src/tests/requirements.txt\n\nRun tests:\n\n    cd src/tests && py.test",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/six8/polydatum",
    "keywords": "orm,persistence",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "polydatum",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/polydatum/",
    "release_url": "https://pypi.org/project/polydatum/0.8.4/",
    "requires_python": null,
    "summary": "An encapsulated persistance layer for Python",
    "version": "0.8.4"
  },
  "releases": {
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c39fffc1643d91351b161d787428a94e",
          "sha256": "f3ed3a0209a3cdc9d790182e5abdd9fc5ffc0286e283b83ff9fa9385a64c8357"
        },
        "downloads": 1744,
        "filename": "polydatum-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c39fffc1643d91351b161d787428a94e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11456,
        "upload_time": "2014-04-21T22:09:09",
        "url": "https://files.pythonhosted.org/packages/50/ea/6d5c277603bc225372e70dd3ee2d2d493c1296f2ad77ce161df35532dd2e/polydatum-0.7.3.tar.gz"
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "762ae8303c1ef5356da8cef25fcce028",
          "sha256": "2e168abeb35cd415b7b8b78284d9af13519fc232989a4617f64f0dfde9f9f23d"
        },
        "downloads": 1406,
        "filename": "polydatum-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "762ae8303c1ef5356da8cef25fcce028",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5379,
        "upload_time": "2014-08-25T19:33:49",
        "url": "https://files.pythonhosted.org/packages/a8/24/fcb1c779b553468e921ac98c5ad0593ada02dcc936809aaa98269edcf1bb/polydatum-0.8.1.tar.gz"
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6ac781ebf0e044b5db51d0c117f5f569",
          "sha256": "c4b44dcdd68ca3083793234ec2a0e29c6fbd761aa1c51158afff11c11dcb5787"
        },
        "downloads": 1171,
        "filename": "polydatum-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6ac781ebf0e044b5db51d0c117f5f569",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6446,
        "upload_time": "2014-12-19T21:05:42",
        "url": "https://files.pythonhosted.org/packages/a4/fd/cb7220c9034e52d90d8ef165c6f6dea84674f063316af579633b84c9b843/polydatum-0.8.2.tar.gz"
      }
    ],
    "0.8.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "87ea525ab68148af5668b73f1e14df81",
          "sha256": "f19a44adedf45d58185099408e1b523ad78c2a83b59b0b6e0c58bdc1a8724d08"
        },
        "downloads": 2110,
        "filename": "polydatum-0.8.4.tar.gz",
        "has_sig": false,
        "md5_digest": "87ea525ab68148af5668b73f1e14df81",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14265,
        "upload_time": "2015-04-05T01:22:38",
        "url": "https://files.pythonhosted.org/packages/62/8e/ae482442f28a7a640928ad5b647b0302f0da34ae5d28226320aa70d3b6d9/polydatum-0.8.4.tar.gz"
      }
    ],
    "0.8.4rc1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e6f0efe48d1d1df448cc5b27b3cf7d63",
          "sha256": "b2f7d69d28b593dae5f77cfa2c8d1a251205d879ee9af21f3c380026c54e9337"
        },
        "downloads": 1000,
        "filename": "polydatum-0.8.4rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "e6f0efe48d1d1df448cc5b27b3cf7d63",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10640,
        "upload_time": "2015-01-26T02:23:43",
        "url": "https://files.pythonhosted.org/packages/cc/01/bbe6a1c22e7c4b79939298ce3ba37128c087953121b06a3fdca4a43d78ef/polydatum-0.8.4rc1.tar.gz"
      }
    ],
    "0.8.4rc2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "041eee5760a5ae148786804fe0c9d917",
          "sha256": "9b31f09b9cea3aec03ab30777dc8d2ac514973c0d5437ec61386cd37c884cb35"
        },
        "downloads": 1044,
        "filename": "polydatum-0.8.4rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "041eee5760a5ae148786804fe0c9d917",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14263,
        "upload_time": "2015-02-05T21:07:12",
        "url": "https://files.pythonhosted.org/packages/53/cf/9d1922c7e81fe2ea6a3570118c1601a0ff23c55d5ad83047ded83a0c362b/polydatum-0.8.4rc2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "87ea525ab68148af5668b73f1e14df81",
        "sha256": "f19a44adedf45d58185099408e1b523ad78c2a83b59b0b6e0c58bdc1a8724d08"
      },
      "downloads": 2110,
      "filename": "polydatum-0.8.4.tar.gz",
      "has_sig": false,
      "md5_digest": "87ea525ab68148af5668b73f1e14df81",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 14265,
      "upload_time": "2015-04-05T01:22:38",
      "url": "https://files.pythonhosted.org/packages/62/8e/ae482442f28a7a640928ad5b647b0302f0da34ae5d28226320aa70d3b6d9/polydatum-0.8.4.tar.gz"
    }
  ]
}