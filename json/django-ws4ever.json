{
  "info": {
    "author": "turen",
    "author_email": "nb@turen.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "==============\ndjango-ws4ever\n==============\n\n\u63d0\u4f9b\u57fa\u4e8egevent\u7684websocket\u7684handler\n\nQuick start\n-----------\n1. Install::\n\n    pip install django_ws4ever\n\n\n2. Add \"ws4ever\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = [\n        ...\n        'ws4ever',\n    ]\n\n3. complete your own websocket handler class::\n\n    from ws4ever.views import BaseWebSocketApplication\n    class WebSocketClientApplication(BaseWebSocketApplication):\n        def __init__(self, ws):\n            pass\n\n        def handle_message(self, kind, payload=None):\n            pass\n\n4. set the websocket config path::\n\n    #websocket path and handler class\n    WEBSOCKET_PATHS = {\n        \"/ws\": \"myproject.views.WebSocketClientApplication\"\n    }\n\n    # time interval to check zombile websocket connections\n    CHECK_ZOMBIE_INTERVAL = 5\n\n    # redis conf\n    REDIS_HOST = \"\"\n    REDIS_PASSWORD = \"\"\n\n5. runserver\n    python manage.py runserver\n\n6. test websocket in js::\n\n    var ws = new WebSocket(\"ws://localhost:8000/ws\");\n    ws.onopen = function()\n    {\n       console.log(\"on open\");\n       ws.send(JSON.stringify({kind:'kind', payload:'payload'}));\n    };\n    ws.onmessage = function (evt)\n    {\n       var received_msg = evt.data;\n       console.log(\"receive message\", received_msg);\n    };\n    ws.onclose = function()\n    {\n       console.log(\"Connection is closed...\");\n    };\n\n7. runserver as usual::\n\n    python manage.py runserver\n\n8. [Optional] if you want to use wsgi to run websocket(ig.use gunicorn), config wsgi like that\n  8.1 config wsgi.py::\n\n    #append to tail, must after  os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"xx.settings\")\n    # gunicorn \u7528\u7684 websocket wsgi\n    from geventwebsocket import Resource\n    from ws4ever.helpers import get_websocket_sources\n    ws_application = Resource(get_websocket_sources())\n\n  8.2 run gunicorn like::\n\n    `gunicorn -k \"geventwebsocket.gunicorn.workers.GeventWebSocketWorker\" my.wsgi::ws_application -b 0.0.0.0:port_number`\n\n9. [Optional/Advanced] broadcast and receive message\n  9.1 can send broadcast by::\n\n    from ws4ever.redis import redis_client, CH_WEBSOCKET_NOTIFY\n    rc_main.publish(CH_WEBSOCKET_NOTIFY, json.dumps({'kind':'','payload':'', 'extra':''}))\n\n  9.2 then can handle the messages in WebSocketClientApplication you creaed in 3. above::\n\n    class WebSocketClientApplication(BaseWebSocketApplication):\n        ...\n\n        @classmethod\n        def handle_redis_message(cls, m):\n            #m == {'kind':'','payload':'','extra':''}\n            #add your handle code here",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-ws4ever",
    "platform": "",
    "project_url": "https://pypi.org/project/django-ws4ever/",
    "release_url": "https://pypi.org/project/django-ws4ever/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "websocket server for django",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fd7062a2ceba7fd49b84ee94dab6df82",
          "sha256": "862dbbde70c762c1eb0e42650635160554777af00c24bf14b0bdf5357e5d784e"
        },
        "downloads": 0,
        "filename": "django-ws4ever-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fd7062a2ceba7fd49b84ee94dab6df82",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8395,
        "upload_time": "2017-08-09T09:07:29",
        "url": "https://files.pythonhosted.org/packages/fd/94/f83d7589228013369bf679bb6007a439019e90de9129ae12659240141327/django-ws4ever-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "fd7062a2ceba7fd49b84ee94dab6df82",
        "sha256": "862dbbde70c762c1eb0e42650635160554777af00c24bf14b0bdf5357e5d784e"
      },
      "downloads": 0,
      "filename": "django-ws4ever-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fd7062a2ceba7fd49b84ee94dab6df82",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8395,
      "upload_time": "2017-08-09T09:07:29",
      "url": "https://files.pythonhosted.org/packages/fd/94/f83d7589228013369bf679bb6007a439019e90de9129ae12659240141327/django-ws4ever-0.1.0.tar.gz"
    }
  ]
}