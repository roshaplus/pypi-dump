{
  "info": {
    "author": "nhedlund",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "intrinio\n========\n\n`|Build Status| <https://travis-ci.org/nhedlund/intrinio>`_\n\nUnofficial Intrinio API client for Python. It gives easy access to\nfinancial data.\n\nSetup\n-----\n\nInstall this package by using the pip tool:\n\n::\n\n    pip install intrinio\n\nBefore retrieving data using the package the API username and password\nhas to be configured, either by setting the username and password\nattributes of the intrinio package:\n\n::\n\n    import intrinio\n    intrinio.username = 'USERNAME_FROM_INTRINIO'\n    intrinio.password = 'PASSWORD_FROM_INTRINIO'\n\nOr by setting the system environment variables:\n\n-  INTRINIO\\_USERNAME\n-  INTRINIO\\_PASSWORD\n\nQuick start\n-----------\n\nGet prices starting at 2016-01-01 for Apple:\n\n::\n\n    import intrinio\n    intrinio.prices('AAPL', start_date='2016-01-01')\n\nGet company information about Google:\n\n``python import intrinio intrinio.companies('GOOG')`` Get company\ninformation about Google using the low level **get** function:\n\n::\n\n    import intrinio\n    intrinio.get('companies', identifier='GOOG')\n\nGet cik, lei, name and ticker of companies with \"Bank\" in their company\nname:\n\n::\n\n    import intrinio\n    intrinio.companies(query='Bank')\n\nUsage\n-----\n\nThere are a high- and low level functions used to access the Intrinio\nAPI.\n\nThe high level functions are mostly simple wrappers of the **get**\nfunction that retrieves all data with optional parameters to filter the\ndata. They might also do some data conversion like for example the\nprices endpoint where the date column is used as the index for the\nPandas DataFrame.\n\nLow level functions\n~~~~~~~~~~~~~~~~~~~\n\nFor more information about available endpoints and their parameters, see\nIntrinio API documentation at: http://docs.intrinio.com/\n\n-  get(endpoint, \\*\\*parameters):\n\n   Get complete dataset from an endpoint using optional query\n   parameters.\n\n   Args:\n\n   ::\n\n       endpoint: Intrinio endpoint, for example: companies\n       parameters: Optional query parameters\n\n   Returns: Dataset as a Pandas DataFrame\n\n-  get\\_page(endpoint, page\\_number=1, page\\_size=None, \\*\\*parameters):\n\n   Get a dataset page from an endpoint using optional query parameters.\n\n   Args:\n\n   ::\n\n       endpoint: Intrinio endpoint, for example: companies\n       page_number: Optional page number where 1 is first page (default 1)\n       page_size: Optional page size (default max page size for the endpoint)\n       parameters: Optional query parameters\n\n   Returns: Dataset page as a Pandas DataFrame with an additional\n   total\\_pages attribute\n\nHigh level functions\n~~~~~~~~~~~~~~~~~~~~\n\n-  companies(identifier=None, query=None):\n\n   Get companies with optional filtering using parameters.\n\n   Args:\n\n   ::\n\n       identifier: Identifier for the legal entity or a security associated\n           with the company: TICKER SYMBOL | FIGI | OTHER IDENTIFIER\n       query: Search of company name or ticker symbol\n\n   Returns: Dataset as a Pandas DataFrame\n\n-  securities(identifier=None, query=None, exch\\_symbol=None):\n\n   Get securities with optional filtering using parameters.\n\n   Args:\n\n   ::\n\n       identifier: Identifier for the legal entity or a security associated\n           with the company: TICKER SYMBOL | FIGI | OTHER IDENTIFIER\n       query: Search of security name or ticker symbol\n       exch_symbol: Exchange symbol\n\n   Returns: Dataset as a Pandas DataFrame\n\n-  indices(identifier=None, query=None, type=None):\n\n   Get indices with optional filtering using parameters.\n\n   Args:\n\n   ::\n\n       identifier: Intrinio symbol associated with the index\n       query: Search of index name or symbol\n       type: Type of indices: stock_market | economic | sic\n\n   Returns: Dataset as a Pandas DataFrame\n\n-  prices(identifier, start\\_date=None, end\\_date=None,\n   frequency='daily', sort\\_order='desc'):\n\n   Get historical stock market prices or indices.\n\n   Args:\n\n   ::\n\n       identifier: Stock market symbol or index\n       start_date: Start date of prices (default no filter)\n       end_date: Last date (default today)\n       frequency: Frequency of prices: daily (default) | weekly | monthly |\n           quarterly | yearly\n       sort_order: Order of prices: asc | desc (default)\n\n   Returns: Dataset as a Pandas DataFrame\n\n-  news(identifier):\n\n   Get news for a company.\n\n   Args:\n\n   ::\n\n       identifier: stock market ticker symbol associated with the company's\n           common stock. If the company is foreign, use the stock exchange\n           code, followed by a colon, then the ticker.\n\n   Returns: Dataset as a Pandas DataFrame\n\nTests\n-----\n\nRun the tests using pytest in the root directory of the project:\n\n::\n\n    py.test\n\nOr run the runtests script to also generate a coverage report (saved to\ntmp/).\n\n::\n\n    bin/runtests\n\nVersion history\n---------------\n\n-  0.1: Initial version\n\nLicense\n-------\n\n-  MIT License\n\n.. |Build\nStatus| image:: https://travis-ci.org/nhedlund/intrinio.svg?branch=master",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/nhedlund/intrinio",
    "keywords": "intrinio,API,data,client,quant,finance",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "intrinio",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/intrinio/",
    "release_url": "https://pypi.org/project/intrinio/0.1.15/",
    "requires_python": "",
    "summary": "Intrinio API client",
    "version": "0.1.15"
  },
  "releases": {
    "0.1.14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5ac2dd7e01a24a37057e98166a2ead2d",
          "sha256": "d913a1760608e7e80f2dae664fa166d4a1156f768818acc69069d174b7a12264"
        },
        "downloads": 13,
        "filename": "intrinio-0.1.14.tar.gz",
        "has_sig": false,
        "md5_digest": "5ac2dd7e01a24a37057e98166a2ead2d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4874,
        "upload_time": "2017-01-16T13:05:38",
        "url": "https://files.pythonhosted.org/packages/c6/47/a4926f944f3f193b3a06b6f0a78f334575a5d8a0796765fb1495ddfc7cfa/intrinio-0.1.14.tar.gz"
      }
    ],
    "0.1.15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7a080fa9c6c1f3dac73bf6d08a41a4dc",
          "sha256": "5203143954993774fb658c1715d9369298f4bf96a6714a80caa7452d623c503e"
        },
        "downloads": 14,
        "filename": "intrinio-0.1.15.tar.gz",
        "has_sig": false,
        "md5_digest": "7a080fa9c6c1f3dac73bf6d08a41a4dc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4914,
        "upload_time": "2017-02-05T16:50:02",
        "url": "https://files.pythonhosted.org/packages/d5/30/7a00b26383ee89ac8849579688d07115f66c8446d3ef12742865aac9204e/intrinio-0.1.15.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7a080fa9c6c1f3dac73bf6d08a41a4dc",
        "sha256": "5203143954993774fb658c1715d9369298f4bf96a6714a80caa7452d623c503e"
      },
      "downloads": 14,
      "filename": "intrinio-0.1.15.tar.gz",
      "has_sig": false,
      "md5_digest": "7a080fa9c6c1f3dac73bf6d08a41a4dc",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4914,
      "upload_time": "2017-02-05T16:50:02",
      "url": "https://files.pythonhosted.org/packages/d5/30/7a00b26383ee89ac8849579688d07115f66c8446d3ef12742865aac9204e/intrinio-0.1.15.tar.gz"
    }
  ]
}