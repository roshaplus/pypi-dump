{
  "info": {
    "author": "Jacek Ostanski",
    "author_email": "jacek@arabel.la",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "===========\naa-intercom\n===========\n|travis|_ |pypi|_ |coveralls|_ |requiresio|_\n\nDjango integration for Intercom_ API\n\nThe **aa-intercom** package allows to\n\n* upload user data to Intercom including the last seen feature\n* push data to the Intercom API according to any event happening in your app\n\nInstallation\n============\nTo use, add ``aa_intercom`` to your ``INSTALLED_APPS``, and then migrate the project.\n\nSetting up models\n-----------------\n**aa-intercom** requires a few fields in the user model to be set. To make it work, you need to apply the\n``aa_intercom.mixins.IntercomUserMixin`` to your custom user model (if you do not have your own custom user model set,\ncheck the `documentation <https://docs.djangoproject.com/en/1.11/topics/auth/customizing/#specifying-a-custom-user-model>`_).\nThe ``IntercomUserMixin.get_intercom_data()`` method can be overloaded to change the default user data sent to the Intercom API.\n\nAnother step is to provide own ``IntercomEvent`` model. Create a model which will inherit from\n``aa_intercom.models.AbstractIntercomEvent``, and also implement the ``get_intercom_data()`` method (the returned value should depend on\nevent type). Sample ``IntercomEvent`` model (taken from **test_project/models.py**):\n\n::\n\n  class IntercomEvent(AbstractIntercomEvent):\n    TYPE_EXAMPLE_EVENT = \"example_event\"\n    TYPE_GENERIC = \"generic\"\n\n    LABEL_EXAMPLE_EVENT = _(\"example event\")\n    LABEL_GENERIC = _(\"generic event\")\n\n    EVENT_TYPES = (\n        (TYPE_EXAMPLE_EVENT, LABEL_EXAMPLE_EVENT),\n        (TYPE_GENERIC, LABEL_GENERIC)\n    )\n\n    type = models.CharField(max_length=100, choices=EVENT_TYPES)\n\n    def get_intercom_data(self):\n        data = super(IntercomEvent, self).get_intercom_data()\n        if self.type == IntercomEvent.TYPE_EXAMPLE_EVENT:\n            data[\"metadata\"] = {\n                \"text_content\": self.text_content,\n                # anything more you want\n            }\n        elif self.type in [\n            IntercomEvent.TYPE_GENERIC,\n            # some other types can be added\n        ]:\n            data[\"metadata\"] = {\n                \"text_content\": self.text_content,  # text, depending on the object\n                # type of content (topic, session, what to do, etc)\n                \"type\": self.content_type.name if self.content_type else \"\",\n                \"id\": self.object_id if self.object_id else \"\",  # id of object from type\n            }\n        else:\n            raise UnsupportedIntercomEventType\n\n        return data\n\nTo make your custom models work properly, you need to connect all ``post_save`` signals, for example (in your models.py):\n::\n\n  from aa_intercom.signals import account_post_save, intercom_event_push_to_intercom_post_save\n  from django.db.models.signals import post_save\n\n  post_save.connect(account_post_save, sender=UserModel)\n  post_save.connect(intercom_event_push_to_intercom_post_save, sender=IntercomEvent)\n\nAnd then specify the event model name in settings, for example:\n\n::\n\n  INTERCOM_EVENT_MODEL = \"test_project.IntercomEvent\"\n\nIf you want to use the user last seen feature on Intercom, execute the following task right after the user logs in:\n::\n\n  from aa_intercom.tasks import push_account_last_seen_tasks\n  push_account_last_seen_task.apply_async(args=[user.id], countdown=100)\n\nConfiguration\n-------------\nThe last thing is to specify Intercom credentials in your settings file\n::\n\n  INTERCOM_API_ACCESS_TOKEN = \"your access token\"\n\nMake sure, you have the ``CACHES`` set (see: `docs <https://docs.djangoproject.com/en/1.11/topics/cache/#setting-up-the-cache>`_),\nand also as this app uses Celery_, you need to have it configured.\n\nTo provide id prefix for Intercom user id, set ``INTERCOM_ID_PREFIX`` to desired value.\n\nUsing the IntercomEvent model\n-----------------------------\nAfter you have created your own **IntercomEvent** model, you are able to send any kind of event data to the Intercom API\nin a convenient way. All you need to do is to create an instance of **IntercomEvent** filled with desired data, for example:\n::\n\n  IntercomEvent.objects.create(\n    user=request.user, type=IntercomEvent.TYPE_POST_ADDED, text_content=post.content,\n    content_type=Post, object_id=post.id)\n\nThen if you have set the ``post_save`` signal correctly, the event should be pushed to the Intercom API.\n\nSending unregistered user data\n------------------------------\nIn case an upload of unregistered user data is needed, the ``aa_intercom.tasks.push_not_registered_user_data_task`` task\ncan be used (**email** and **name** keys are required), for example:\n::\n\n  push_not_registered_user_data_task.apply_async(args=[{\n    \"email\": \"test@arabel.la\",\n    \"name\": \"Foo Bar\",\n    \"pseudonym\": \"foobar\"\n  }])\n\nDjango Admin\n------------\nIf you wish to have an overview over the events, you can also add a Django admin model for your ``IntercomEvent`` model,\nfor example (taken from **test_project/admin.py**):\n::\n\n  class IntercomEventAdmin(admin.ModelAdmin):\n      readonly_fields = (\"id\", \"user\", \"type\", \"text_content\", \"created\", \"modified\", \"content_type\", \"object_id\",\n                         \"content_object\", \"is_sent\")\n\n      list_display = (\"id\", \"user\", \"type\", \"is_sent\", \"created\")\n      list_filter = (\"id\", \"user\", \"type\", \"is_sent\")\n\n      def has_add_permission(self, request):\n          return False\n\n  admin.site.register(IntercomEvent, IntercomEventAdmin)\n\nCommands\n========\n* ``resend_intercom_events`` - resends all events (in case something went wrong, should be run chronically)\n\nSupport\n=======\n* Django 1.11\n* Python 2.7, 3.6\n\n.. |travis| image:: https://secure.travis-ci.org/ArabellaTech/aa-intercom.svg?branch=master\n.. _travis: http://travis-ci.org/ArabellaTech/aa-intercom\n\n.. |pypi| image:: https://img.shields.io/pypi/v/aa-intercom.svg\n.. _pypi: https://pypi.python.org/pypi/aa-intercom\n\n.. |coveralls| image:: https://coveralls.io/repos/github/ArabellaTech/aa-intercom/badge.svg?branch=master\n.. _coveralls: https://coveralls.io/github/ArabellaTech/aa-intercom\n\n.. |requiresio| image:: https://requires.io/github/ArabellaTech/aa-intercom/requirements.svg?branch=master\n.. _requiresio: https://requires.io/github/ArabellaTech/aa-intercom/requirements/\n\n.. _Intercom: http://intercom.com\n\n.. _Celery: http://www.celeryproject.org/\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ArabellaTech/aa-intercom",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aa-intercom",
    "platform": "",
    "project_url": "https://pypi.org/project/aa-intercom/",
    "release_url": "https://pypi.org/project/aa-intercom/1.0.0/",
    "requires_python": "",
    "summary": "Django integration for Intercom API",
    "version": "1.0.0"
  },
  "releases": {
    "0.0.1": [],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cd93e17248ce81f68c58bb6156968b45",
          "sha256": "f6a6f37fbbaba74b8fc74853226cfb28898e24702815db191c7d5c0f225e4140"
        },
        "downloads": 0,
        "filename": "aa_intercom-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd93e17248ce81f68c58bb6156968b45",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 39015,
        "upload_time": "2017-05-25T15:30:27",
        "url": "https://files.pythonhosted.org/packages/4e/e3/7188d987bb3df773a68262c3d1b0968837bff51334d054008686262e5812/aa_intercom-0.0.2-py2.py3-none-any.whl"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d99cd8375eb83a02f009c01342a44935",
          "sha256": "611d1c9629040a6b1ebadeeb3f9df85450f390b708ab5e3674c35a951fe1b6b6"
        },
        "downloads": 0,
        "filename": "aa_intercom-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d99cd8375eb83a02f009c01342a44935",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 16572,
        "upload_time": "2017-06-05T10:06:11",
        "url": "https://files.pythonhosted.org/packages/ca/f3/413116f1ab406eea088cc29a853673a0b4480439cab23c21cf58ab219b99/aa_intercom-1.0.0-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d99cd8375eb83a02f009c01342a44935",
        "sha256": "611d1c9629040a6b1ebadeeb3f9df85450f390b708ab5e3674c35a951fe1b6b6"
      },
      "downloads": 0,
      "filename": "aa_intercom-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d99cd8375eb83a02f009c01342a44935",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 16572,
      "upload_time": "2017-06-05T10:06:11",
      "url": "https://files.pythonhosted.org/packages/ca/f3/413116f1ab406eea088cc29a853673a0b4480439cab23c21cf58ab219b99/aa_intercom-1.0.0-py2.py3-none-any.whl"
    }
  ]
}