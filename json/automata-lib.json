{
  "info": {
    "author": "Caleb Evans",
    "author_email": "caleb@calebevans.me",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Automata\n========\n\n| *Copyright 2016 Caleb Evans*\n| *Released under the MIT license*\n\n|Build Status| |Coverage Status|\n\nAutomata is a Python 3 library which implements the structures and\nalgorithms I am learning in my Automata Theory class, particularly\nfinite automata and Turing machines.\n\nAutomata requires Python 3.4 or newer.\n\nInstalling\n----------\n\nYou can install the latest version of Automata via pip:\n\n::\n\n    pip install automata-lib\n\nAPI\n---\n\nclass Automaton\n~~~~~~~~~~~~~~~\n\nThe ``Automaton`` class is an abstract base class from which all\nautomata (including Turing machines) inherit. As such, it cannot be\ninstantiated on its own; you must use a defined subclasses instead (or\nyou may create your own subclass if you're feeling adventurous). The\n``Automaton`` class can be found under ``automata/shared/automaton.py``.\n\nIf you wish to subclass ``Automaton``, you can import it like so:\n\n.. code:: python\n\n    from automata.shared.automaton import Automaton\n\nclass FA\n~~~~~~~~\n\nThe ``FA`` class is an abstract base class from which all finite\nautomata inherit. As such, it cannot be instantiated on its own; you\nmust use the ``DFA`` and ``NFA`` classes instead (or you may create your\nown subclass if you're feeling adventurous). The ``FA`` class can be\nfound under ``automata/fa/fa.py``.\n\nIf you wish to subclass ``FA``, you can import it like so:\n\n.. code:: python\n\n    from automata.fa.fa import FA\n\nclass DFA\n~~~~~~~~~\n\nThe ``DFA`` class is a subclass of class ``FA`` which represents a\ndeterministic finite automaton. The ``DFA`` class can be found under\n``automata/fa/dfa.py``.\n\nDFA properties\n^^^^^^^^^^^^^^\n\nEvery DFA instance has the following properties:\n\n1. ``states``: a ``set`` of the DFA's valid states, each of which must\n   be represented as a string\n\n2. ``input_symbols``: a ``set`` of the DFA's valid input symbols, each\n   of which must also be represented as a string\n\n3. ``transitions``: a ``dict`` consisting of the transitions for each\n   state. Each key is a state name and each value is a ``dict`` which\n   maps a symbol (the key) to a state (the value).\n\n4. ``initial_state``: the name of the initial state for this DFA\n\n5. ``final_states``: a ``set`` of final states for this DFA\n\nAll of these properties must be supplied when the DFA is instantiated\n(see the examples below).\n\n.. code:: python\n\n    from automata.fa.dfa import DFA\n    # DFA which matches all binary strings ending in an odd number of '1's\n    dfa = DFA(\n        states={'q0', 'q1', 'q2'},\n        input_symbols={'0', '1'},\n        transitions={\n            'q0': {'0': 'q0', '1': 'q1'},\n            'q1': {'0': 'q0', '1': 'q2'},\n            'q2': {'0': 'q2', '1': 'q1'}\n        },\n        initial_state='q0',\n        final_states={'q1'}\n    )\n\nPlease note that the below DFA code examples reference the above ``dfa``\nobject.\n\nDFA.validate\\_input(self, input\\_str, step=False)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``validate_input()`` method checks whether or not the given string\nis accepted by the DFA.\n\nIf the string is accepted, the method returns the state the DFA stopped\non (which presumably is a valid final state).\n\n.. code:: python\n\n    dfa.validate_input('01')  # returns 'q1'\n\nIf the string is rejected by the DFA, the method will raise a\n``RejectionError``.\n\n.. code:: python\n\n    dfa.validate_input('011')  # raises RejectionError\n\nIf you supply the ``step`` keyword argument with a value of ``True``,\nthe method will return a generator which yields each state reached as\nthe DFA reads characters from the input string.\n\n.. code:: python\n\n    list(dfa.validate_input('0111', step=True))\n    # returns ['q0', 'q0', 'q1', 'q2', 'q1']\n\nNote that the first yielded state is always the DFA's initial state\n(before any input has been read) and the last yielded state is always\nthe DFA's final state (after all input has been read). If the string is\nrejected by the DFA, the method still raises a ``RejectionError``.\n\nDFA.validate\\_self(self)\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``validate_self()`` method checks whether the DFA is actually a\nvalid DFA. The method returns ``True`` if the DFA is valid; otherwise,\nit will raise the appropriate exception (*e.g.* the state transition is\nmissing for a particular symbol). This method is automatically called\nwhen the DFA is initialized, so it's only really useful if a DFA object\nis modified after instantiation.\n\nCopying a DFA\n^^^^^^^^^^^^^\n\nTo create a deep copy of a DFA, simply pass an ``DFA`` instance into the\n``DFA`` constructor.\n\n.. code:: python\n\n    dfa_copy = DFA(dfa)  # returns a deep copy of dfa\n\nclass NFA\n~~~~~~~~~\n\nThe ``NFA`` class is a subclass of class ``FA`` which represents a\nnondeterministic finite automaton. The ``NFA`` class can be found under\n``automata/fa/nfa.py``.\n\nNFA properties\n^^^^^^^^^^^^^^\n\nEvery NFA contains the same five DFA properties: ``state``,\n``input_symbols``, ``transitions``, ``initial_state``, and\n``final_states``. However, the structure of the ``transitions`` object\nhas been modified slightly to accommodate the fact that a single state\ncan have more than one transition for the same symbol. Therefore,\ninstead of mapping a symbol to *one* end state in each sub-dict, each\nsymbol is mapped to a *set* of end states.\n\n.. code:: python\n\n    from automata.fa.nfa import NFA\n    # NFA which matches strings beginning with 'a', ending with 'a', and containing\n    # no consecutive 'b's\n    nfa = NFA(\n        states={'q0', 'q1', 'q2'},\n        input_symbols={'a', 'b'},\n        transitions={\n            'q0': {'a': {'q1'}},\n            # Use '' as the key name for empty string (lambda/epsilon) transitions\n            'q1': {'a': {'q1'}, '': {'q2'}},\n            'q2': {'b': {'q0'}}\n        },\n        initial_state='q0',\n        final_states={'q1'}\n    )\n\nNFA.validate\\_input(self, input\\_str, step=False)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``validate_input()`` method checks whether or not the given string\nis accepted by the NFA.\n\nIf the string is accepted, the method returns a ``set`` of states the FA\nstopped on (which presumably contains at least one valid final state).\n\n.. code:: python\n\n    nfa.validate_input('aba')  # returns {'q1', 'q2'}\n\nIf the string is rejected by the NFA, the method will raise a\n``RejectionError``.\n\n.. code:: python\n\n    nfa.validate_input('abba')  # raises RejectionError\n\nIf you supply the ``step`` keyword argument with a value of ``True``,\nthe method will return a generator which yields each set of states\nreached as the NFA reads characters from the input string.\n\n.. code:: python\n\n    list(nfa.validate_input('aba', step=True))\n    # returns [{'q0'}, {'q1', 'q2'}, {'q0'}, {'q1', 'q2'}]\n\nNote that the first yielded set is always the lambda closure of the\nNFA's initial state, and the last yielded set always contains the lambda\nclosure of at least one of the NFA's final states (after all input has\nbeen read). If the string is rejected by the NFA, the method still\nraises a ``RejectionError``.\n\nNFA.validate\\_self(self)\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``validate_self()`` method checks whether the NFA is actually a\nvalid NFA. The method has the same basic behavior and prescribed use\ncase as the ``DFA.validate_self()`` method, despite being less\nrestrictive (since NFAs are naturally less restrictive than DFAs).\n\nConverting an NFA to a DFA\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo create a DFA that is equivalent to an existing NFA, simply pass the\n``NFA`` instance to the ``DFA`` constructor.\n\n.. code:: python\n\n    from automata.fa.dfa import DFA\n    dfa = DFA(nfa)  # returns an equivalent DFA\n\nCopying an NFA\n^^^^^^^^^^^^^^\n\nTo create a deep copy of an NFA, simply pass an ``NFA`` instance into\nthe ``NFA`` constructor.\n\n.. code:: python\n\n    nfa_copy = NFA(nfa)  # returns a deep copy of nfa\n\nclass PDA\n^^^^^^^^^\n\nThe ``PDA`` class is an abstract base class from which all pushdown\nautomata inherit. The ``PDA`` class can be found under\n``automata/pda/pda.py``.\n\nclass DPDA\n~~~~~~~~~~\n\nThe ``DPDA`` class is a subclass of class ``PDA`` which represents a\ndeterministic finite automaton. The ``DPDA`` class can be found under\n``automata/pda/dpda.py``.\n\nDPDA properties\n^^^^^^^^^^^^^^^\n\nEvery DPDA instance has the following properties:\n\n1. ``states``: a ``set`` of the DPDA's valid states, each of which must\n   be represented as a string\n\n2. ``input_symbols``: a ``set`` of the DPDA's valid input symbols, each\n   of which must also be represented as a string\n\n3. ``stack_symbols``: a ``set`` of the DPDA's valid stack symbols\n\n4. ``transitions``: a ``dict`` consisting of the transitions for each\n   state; see the example below for the exact syntax\n\n5. ``initial_state``: the name of the initial state for this DPDA\n\n6. ``initial_stack_symbol``: the name of the initial symbol on the stack\n   for this DPDA\n\n7. ``final_states``: a ``set`` of final states for this DPDA\n\nAll of these properties must be supplied when the DPDA is instantiated\n(see the examples below).\n\n.. code:: python\n\n    from automata.pda.dpda import DPDA\n    # DPDA which which matches zero or more 'a's, followed by the same\n    # number of 'b's (accepting by final state)\n    dpda = DPDA(\n        states={'q0', 'q1', 'q2', 'q3'},\n        input_symbols={'a', 'b'},\n        stack_symbols={'0', '1'},\n        transitions={\n            'q0': {\n                'a': {'0': ('q1', ('1', '0'))}  # transition pushes '1' to stack\n            },\n            'q1': {\n                'a': {'1': ('q1', ('1', '1'))},\n                'b': {'1': ('q2', '')}  # transition pops from stack\n            },\n            'q2': {\n                'b': {'1': ('q2', '')},\n                '': {'0': ('q3', ('0',))}  # transition does not change stack\n            }\n        },\n        initial_state='q0',\n        initial_stack_symbol='0',\n        final_states={'q3'}\n    )\n\nPlease note that the below DPDA code examples reference the above\n``dpda`` object.\n\nDPDA.validate\\_input(self, input\\_str, step=False)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``validate_input()`` method checks whether or not the given string\nis accepted by the DPDA.\n\nIf the string is accepted, the method returns a tuple containing the\nstate the DPDA stopped on (which presumably is a valid final state), as\nwell as a ``PDAStack`` object representing the DPDA's internal stack.\n\n.. code:: python\n\n    dpda.validate_input('ab')  # returns PDAStack(['0'])\n\nIf the string is rejected by the DPDA, the method will raise a\n``RejectionError``.\n\n.. code:: python\n\n    dpda.validate_input('aab')  # raises RejectionError\n\nIf you supply the ``step`` keyword argument with a value of ``True``,\nthe method will return a generator which yields a tuple containing the\ncurrent state and the current tape as a ``PDAStack`` object.\n\n.. code:: python\n\n    [(state, stack.copy()) for state, stack in dpda.validate_input('ab', step=True)]\n    # returns [\n    #   ('q0', PDAStack(['0'])),\n    #   ('q1', PDAStack(['0', '1'])),\n    #   ('q3', PDAStack(['0'])),\n    # ]\n\nNote that the first yielded state is always the DPDA's initial state\n(before any input has been read) and the last yielded state is always\nthe DPDA's final state (after all input has been read) (or possibly a\nnon-final state if the stack is empty). If the string is rejected by the\nDPDA, the method still raises a ``RejectionError``.\n\nDPDA.validate\\_self(self)\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``validate_self()`` method checks whether the DPDA is actually a\nvalid DPDA. The method has the same basic behavior and prescribed use\ncase as the ``DFA.validate_self()`` and ``NFA.validate_self()`` methods,\nwhile (naturally) containing validation checks specific to DPDAs.\n\nCopying a DPDA\n^^^^^^^^^^^^^^\n\nTo create a deep copy of a DPDA, simply pass an ``DPDA`` instance into\nthe ``DPDA`` constructor.\n\n.. code:: python\n\n    dpda_copy = DPDA(dpda)  # returns a deep copy of dpda\n\nclass TM\n~~~~~~~~\n\nThe ``TM`` class is an abstract base class from which all Turing\nmachines inherit. The ``TM`` class can be found under\n``automata/tm/tm.py``.\n\nclass DTM\n~~~~~~~~~\n\nThe ``DTM`` class is a subclass of class ``TM`` which represents a\ndeterministic Turing machine. The ``DTM`` class can be found under\n``automata/tm/dtm.py``.\n\nDTM properties\n^^^^^^^^^^^^^^\n\nEvery DTM instance has the following properties:\n\n1. ``states``: a ``set`` of the DTM's valid states, each of which must\n   be represented as a string\n\n2. ``input_symbols``: a ``set`` of the DTM's valid input symbols\n   represented as strings\n\n3. ``tape_symbols``: a ``set`` of the DTM's valid tape symbols\n   represented as strings\n\n4. ``transitions``: a ``dict`` consisting of the transitions for each\n   state; each key is a state name and each value is a ``dict`` which\n   maps a symbol (the key) to a state (the value)\n\n5. ``initial_state``: the name of the initial state for this DTM\n\n6. ``blank_symbol``: a symbol from ``tape_symbols`` to be used as the\n   blank symbol for this DTM\n\n7. ``final_states``: a ``set`` of final states for this DTM\n\nAll of these properties must be supplied when the DTM is instantiated\n(see the examples below).\n\n.. code:: python\n\n    from automata.tm.dtm import DTM\n    # DTM which matches all strings beginning with '0's, and followed by\n    # the same number of '1's\n    dtm = DTM(\n        states={'q0', 'q1', 'q2', 'q3', 'q4'},\n        input_symbols={'0', '1'},\n        tape_symbols={'0', '1', 'x', 'y', '.'},\n        transitions={\n            'q0': {\n                '0': ('q1', 'x', 'R'),\n                'y': ('q3', 'y', 'R')\n            },\n            'q1': {\n                '0': ('q1', '0', 'R'),\n                '1': ('q2', 'y', 'L'),\n                'y': ('q1', 'y', 'R')\n            },\n            'q2': {\n                '0': ('q2', '0', 'L'),\n                'x': ('q0', 'x', 'R'),\n                'y': ('q2', 'y', 'L')\n            },\n            'q3': {\n                'y': ('q3', 'y', 'R'),\n                '.': ('q4', '.', 'R')\n            }\n        },\n        initial_state='q0',\n        blank_symbol='.',\n        final_states={'q4'}\n    )\n\nPlease note that the below DTM code examples reference the above ``dtm``\nobject.\n\nDTM.validate\\_input(self, input\\_str, step=False)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``validate_input()`` method checks whether or not the given string\nis accepted by the DTM.\n\nIf the string is accepted, the method returns a tuple containing the\nstate the machine stopped on (which presumably is a valid final state),\nas well as a ``TMTape`` object representing the DTM's internal tape.\n\n.. code:: python\n\n    dtm.validate_input('01')  # returns ('q4', TMTape('xy.'))\n\nIf the string is rejected by the DTM, the method will raise a\n``RejectionError``.\n\n.. code:: python\n\n    dtm.validate_input('011')  # raises RejectionError\n\nIf you supply the ``step`` keyword argument with a value of ``True``,\nthe method will return a generator which yields a tuple containing the\ncurrent state and the current tape as a ``TMTape`` object.\n\n.. code:: python\n\n    [(state, tape.copy()) for state, tape in dtm.validate_input('01', step=True)]\n    # returns [\n    #   ('q0', TMTape('01'))\n    #   ('q1', TMTape('x1'))\n    #   ('q2', TMTape('xy'))\n    #   ('q0', TMTape('xy'))\n    #   ('q3', TMTape('xy'))\n    #   ('q3', TMTape('xy.'))\n    # ]\n\nPlease note that each tuple contains a reference to (not a copy of) the\ncurrent ``TMTape`` object. Therefore, if you wish to store the tape at\nevery step, you must copy the tape as you iterate over the machine\nconfigurations (as shown above).\n\nAlso note that the first yielded state is always the DTM's initial state\n(before any input has been read) and the last yielded state is always\nthe DTM's final state (after all input has been read). If the string is\nrejected by the DTM, the method still raises a ``RejectionError``.\n\nDTM.validate\\_self(self)\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``validate_self()`` method checks whether the DTM is actually a\nvalid DTM. The method has the same basic behavior and prescribed use\ncase as the ``DFA.validate_self()`` and ``NFA.validate_self()`` methods,\nwhile (naturally) containing validation checks specific to DTMs.\n\nCopying a DTM\n^^^^^^^^^^^^^\n\nTo create a deep copy of a DTM, simply pass a ``DTM`` instance into the\n``DTM`` constructor.\n\n.. code:: python\n\n    dtm_copy = DTM(dtm)  # returns a deep copy of dtm\n\nShared exception classes\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe library also includes a number of exception classes to ensure that\nerrors never pass silently (unless explicitly silenced). See\n``automata/fa.py`` for these class definitions.\n\nTo reference these exceptions (so as to catch them in a ``try..except``\nblock or whatnot), simply import ``automata.shared.exceptions`` however\nyou'd like:\n\n.. code:: python\n\n    import automata.shared.exceptions as exceptions\n\nclass AutomatonError\n^^^^^^^^^^^^^^^^^^^^\n\nA base class from which all other automata exceptions inherit (including\nfinite automata and Turing machines).\n\nclass InvalidStateError\n^^^^^^^^^^^^^^^^^^^^^^^\n\nRaised if a state is not a valid state for this FA.\n\nclass InvalidSymbolError\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nRaised if a symbol is not a valid symbol for this FA.\n\nclass MissingStateError\n^^^^^^^^^^^^^^^^^^^^^^^\n\nRaised if a state is missing from the machine definition.\n\nclass MissingSymbolError\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nRaised if a symbol is missing from the machine definition.\n\nclass InitialStateError\n^^^^^^^^^^^^^^^^^^^^^^^\n\nRaised if the initial state fails to meet some required condition for\nthis type of machine.\n\nclass FinalStateError\n^^^^^^^^^^^^^^^^^^^^^\n\nRaised if a final state fails to meet some required condition for this\ntype of machine.\n\nclass RejectionError\n^^^^^^^^^^^^^^^^^^^^\n\nRaised if the FA stopped on a non-final state after validating input.\n\nTuring machine exception classes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``automata.tm`` package also includes a module for exceptions\nspecific to Turing machines. You can reference these exception classes\nlike so:\n\n.. code:: python\n\n    import automata.tm.exceptions as tmexceptions\n\nclass TMError\n^^^^^^^^^^^^^\n\nA base class from which all other Turing machine exceptions inherit.\n\nclass InvalidDirectionError\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRaised if a direction specified in this machine's transition map is not\na valid direction.\n\n.. |Build Status| image:: https://travis-ci.org/caleb531/automata.svg?branch=master\n   :target: https://travis-ci.org/caleb531/automata\n.. |Coverage Status| image:: https://coveralls.io/repos/caleb531/automata/badge.svg?branch=master\n   :target: https://coveralls.io/r/caleb531/automata?branch=master\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/caleb531/automata",
    "keywords": "automata turing machine",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "automata-lib",
    "platform": "",
    "project_url": "https://pypi.org/project/automata-lib/",
    "release_url": "https://pypi.org/project/automata-lib/1.0.0.post4/",
    "requires_python": "",
    "summary": "A Python library for simulating automata and Turing machines",
    "version": "1.0.0.post4"
  },
  "releases": {
    "1.0.0": [],
    "1.0.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d51bf7a48e34593b22b38106a90f1770",
          "sha256": "459641308b939a2d250859e16195372174c1c54f9c639f0c4cc01a08a4285964"
        },
        "downloads": 371,
        "filename": "automata-lib-1.0.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "d51bf7a48e34593b22b38106a90f1770",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7191,
        "upload_time": "2016-07-07T17:19:40",
        "url": "https://files.pythonhosted.org/packages/a5/1b/13008c82866fac6b18a77783aa8f0017634280c1aa2bc78a8f0aa2b2a13c/automata-lib-1.0.0.post1.tar.gz"
      }
    ],
    "1.0.0.post2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a616a1077b0b88ed6c6ebd1a7aa003a9",
          "sha256": "02584e14b4a32cac43059123d8aa81cc99289f658d79804aa620c8e9cfce8a03"
        },
        "downloads": 698,
        "filename": "automata-lib-1.0.0.post2.tar.gz",
        "has_sig": false,
        "md5_digest": "a616a1077b0b88ed6c6ebd1a7aa003a9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11662,
        "upload_time": "2016-07-07T20:18:51",
        "url": "https://files.pythonhosted.org/packages/a2/d1/4a5910ac8b3e22711551c7f1f54c96ac75b2c9cbc77253b9578a9e8b6c08/automata-lib-1.0.0.post2.tar.gz"
      }
    ],
    "1.0.0.post3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ce622a90e2c39c106c7a24a3e5a6d809",
          "sha256": "b96f3d1bdf6c0ec75a423649845199fdd221a4cfb840cdb83d0e5867a2de1d05"
        },
        "downloads": 336,
        "filename": "automata-lib-1.0.0.post3.tar.gz",
        "has_sig": false,
        "md5_digest": "ce622a90e2c39c106c7a24a3e5a6d809",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11644,
        "upload_time": "2016-07-09T04:14:17",
        "url": "https://files.pythonhosted.org/packages/70/45/72b4ed5662fec40c38f5f37827fac0e1d6968beea1331eb9a8be7b9d64d5/automata-lib-1.0.0.post3.tar.gz"
      }
    ],
    "1.0.0.post4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "33e4557f1662dcd938579551369bc0dd",
          "sha256": "d3851f9a6437a596af87f6353306d1ce7a6f75a79eacf7ef3909a225b0021984"
        },
        "downloads": 0,
        "filename": "automata-lib-1.0.0.post4.tar.gz",
        "has_sig": false,
        "md5_digest": "33e4557f1662dcd938579551369bc0dd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11634,
        "upload_time": "2017-05-02T04:15:21",
        "url": "https://files.pythonhosted.org/packages/85/a6/b33bb665852d62931130be77afd22f11b00b1e5e03faa2435a2367feeb16/automata-lib-1.0.0.post4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "33e4557f1662dcd938579551369bc0dd",
        "sha256": "d3851f9a6437a596af87f6353306d1ce7a6f75a79eacf7ef3909a225b0021984"
      },
      "downloads": 0,
      "filename": "automata-lib-1.0.0.post4.tar.gz",
      "has_sig": false,
      "md5_digest": "33e4557f1662dcd938579551369bc0dd",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 11634,
      "upload_time": "2017-05-02T04:15:21",
      "url": "https://files.pythonhosted.org/packages/85/a6/b33bb665852d62931130be77afd22f11b00b1e5e03faa2435a2367feeb16/automata-lib-1.0.0.post4.tar.gz"
    }
  ]
}