{
  "info": {
    "author": "Richard Campen",
    "author_email": "richard@campen.co",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Win32 (MS Windows)",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "mothur-py\r\n=========\r\n\r\nCopyright \u00a9 2017, Richard Campen. All rights reserved.\r\n\r\nSee LICENSE.txt for full license conditions.\r\n\r\n--------------\r\n\r\nDescription\r\n~~~~~~~~~~~\r\n\r\nA python wrapper for the command line version of the bioinformatics tool\r\n`mothur <https://www.mothur.org/>`__.\r\n\r\nMothur-py was inspired by the\r\n`ipython-mothurmagic <https://github.com/SchlossLab/ipython-mothurmagic>`__\r\nmodule, but with an intention to provide a more general python wrapper\r\nthat would work outside of the IPython/Jupyter notebook environment, as\r\nwell as provide support for mothur's ``current`` keyword functionality.\r\n\r\n**Note:** This module has only been tested with mothur v1.39.5 and\r\npython 3.6 on Windows 10 (64-bit). It should in theory work with other\r\nversions of mothur, but the older the version the less likely as this\r\nmodule relies upon some of the more recent mothur commands/output to\r\nfunction properly.\r\n\r\n--------------\r\n\r\nInstallation\r\n~~~~~~~~~~~~\r\n\r\nTo install the latest release version you can just\r\n``pip install mothur-py``. To install the most up to date code you\r\nshould download/clone this repository and create a binary distribution\r\nusing ``python setup.py bdist_wheel`` that will create a .whl file in\r\nthe ``dist`` folder. You can then install mothur-py with pip from the\r\n.whl file using ``pip install <wheel_file_name>``. The advantage of this\r\nmethod over just running ``python setup.py install`` is that you can\r\neasily remove or update the package via pip.\r\n\r\n--------------\r\n\r\nBasic Usage\r\n~~~~~~~~~~~\r\n\r\nThe use of this module requires that mothur is in the users ``PATH``\r\nenvironment variable.\r\n\r\nUse of this module revolves around the ``Mothur`` class that catches\r\nmethod calls and passes them off to mothur to be run as commands. An\r\ninstance of the ``Mothur`` class needs to be created before running any\r\ncommands:\r\n\r\n::\r\n\r\n    # create instance of Mothur class\r\n    from mothur_py import Mothur\r\n    m = Mothur()\r\n\r\nCommands in mothur can then be executed as methods of the ``Mothur``\r\nclass instance using the same names you would use within the command\r\nline version of mothur:\r\n\r\n::\r\n\r\n    # run the mothur help command\r\n    m.help()\r\n\r\nCommand parameters can either be passed as python native types (i.e.\r\nstrings, integers, floats, booleans, lists) *or* as strings that match\r\nthe format that mothur would expect:\r\n\r\n::\r\n\r\n    # running make contigs using str input for file parameter, and int for processor paramenter\r\n    m.make.contigs(file='basic_usage.files', processors=2)\r\n\r\n    # running summary.single, passing calculators as mothur formatted list\r\n    m.summary.single(shared='basic_usage.shared', calc='nseqs-sobs-coverage-shannon-simpson')\r\n\r\n    # running summary.single, passing calculators as python list also works\r\n    m.summary.single(shared='basic_usage.shared', calc=['nseqs', 'sobs', 'coverage', 'shannon', 'simpson'])\r\n\r\nThe ``Mothur`` object saves a record of the current directories and\r\nfiles and the output files from mothur after executing each command.\r\nThese are stored as dictionary attributes of the ``Mothur`` object and\r\ncan be accessed easily:\r\n\r\n::\r\n\r\n    # run a command\r\n    m.summary.seqs(fasta='basic_usage.fasta')\r\n\r\n    # get current output directory\r\n    out_dir = m.current_dirs['output']\r\n\r\n    # get output file\r\n    with open(m.output_files['summary'][0], 'r') as in_handle:\r\n        in_handle.read()\r\n\r\n**NOTE:** Due to the possibility of multiple output files with the same\r\nextension the output files are saved as lists within the attribute\r\ndictionaries with the file extension as the key. This issue does not\r\noccur for current files and dirs so they are stored as the actual\r\nvalues, not as lists of the values, with the key being the type of file\r\naccording to mothur (usually the same as the file extension).\r\n\r\n**NOTE:** Each successive execution of a mothur command will update the\r\ncurrent files and dirs, but will completely overwrite the saved output\r\nfiles. This is so that you have access to the current files generated\r\nmore than one command ago, but do not get access to output from more\r\nthan one command ago, which would be confusing.\r\n\r\nThere is also implementation of the ``current`` keyword used in the\r\ncommand line version of mothur:\r\n\r\n::\r\n\r\n    # run the mothur summary.seqs command using the 'current' option\r\n    # NOTE: current is being passed as a string\r\n    m.summary.seqs(fasta='current')\r\n     \r\n    # like the command line version, you don't even need to specify \r\n    # the 'current' keyword for some commands\r\n    m.summary.seqs() \r\n\r\nBehind the scenes, the ``current`` keyword is enabled by appending the\r\nusers command with the ``get.current()`` command to list the current\r\ndirectories and files being used by mothur, parsing of the output to\r\nextract this information, and prepending future commands with\r\n``set.dir()`` and ``set.current()`` to tell mothur what these should be.\r\nThis is necessary as each call to mothur is executed as a separate\r\nmothur session and therefore mothur can not store this information\r\nitself.\r\n\r\n--------------\r\n\r\nConfiguration\r\n~~~~~~~~~~~~~\r\n\r\nThe ``Mothur`` class stores configuration options for how mothur is\r\nexecuted. These options include ``verbosity`` to control how much output\r\nthere is, ``mothur_seed`` to control the seed used by mothur for random\r\nnumber generation, and ``suppress_logfile`` which suppresses the\r\ncreation of the mothur logfile.\r\n\r\nWhen ``verbosity`` is set to ``0`` there is no output printed, ``1``\r\nprints the normal output as would be seen with command line execution\r\n(minus the header that contains the mothur version and runtime\r\ninformation), and ``2`` displays all output including the commands being\r\nexecuted behind the scenes to enable the ``current`` keyword to work.\r\nThe default option is ``0``, with ``1`` being useful when you want to\r\nsee the standard mothur output, and ``2`` being useful for debugging\r\npurposes.\r\n\r\nIf ``mothur_seed`` is set to a valid integer then this number will be\r\npassed to mothur to be used for random number generation. This is\r\nimplemented by adding the ``seed=<your seed here>`` named parameter to\r\neach mothur command. Not all commands will accept having a seed set. For\r\nthese commands you may need to set the ``mothur_seed`` parameter to\r\n``None`` for the execution of that command, e.g.:\r\n\r\n::\r\n\r\n    m = Mothur(mothur_seed=12345)\r\n\r\n    # summary.seqs() allows setting the seed so this will run fine\r\n    m.summary.seqs(fasta='current')\r\n\r\n    # help() does not accept having the seed set so need to alter that value temporarily, otherwise an error will occur\r\n    seed = m.mothur_seed\r\n    m.mothur_seed = None\r\n    m.help()\r\n    m.mothur_seed = seed\r\n\r\nThe ``supress_logfile`` option is useful when you don't want the log\r\nfiles, such as when running in an Jupyter (nee IPython) notebook with\r\n``verbosity=1``, in which case you already have a record of mothur's\r\noutput and the mothur logfiles are superfluous.\r\n\r\n**Note:** Currently, due to the way that mothur creates the logfiles, a\r\nlogfile will always be created BUT it will be cleaned up upon successful\r\nexecution if ``suppress_logfile=True``. However, if mothur fails to\r\nsuccessfully execute, i.e. execution hangs or is interrupted, the\r\nlogfile will not be cleaned up. For relevant discussion of this\r\nbehaviour in mothur see\r\n`here <https://github.com/mothur/mothur/issues/281>`__ and\r\n`here <https://github.com/mothur/mothur/issues/377>`__.\r\n\r\nYou can also instantiate the ``Mothur`` object with your desired\r\nconfiguration options.\r\n\r\n::\r\n\r\n    m = Mothur(verbosity=1, mothur_seed=543210, suppress_logfile=True)\r\n\r\n--------------\r\n\r\nAdvanced Usage\r\n~~~~~~~~~~~~~~\r\n\r\nThe current files and current directories for use in mothur are stored\r\nin dictionary attributes of the ``Mothur`` instance, ``current_files``\r\nand ``current_dirs`` respectively. These values can be passed to mothur\r\ncommands, e.g:\r\n\r\n::\r\n\r\n    # passing current fasta file to summary.seqs()\r\n    m.summary.seqs(fasta=m.current_files['fasta'])\r\n       \r\n\r\nThe ``current`` keyword is actually just a shortcut for this\r\nfunctionality so it will always be easier to just pass ``'current'``.\r\nHowever, this demonstrates that the parameters of the mothur commands\r\ncan accept any variable as long as it will resolve to something that\r\nmothur accepts. In the above example, the dictionary value resolves to a\r\nstring that is the path to the ``.fasta`` file. As a better example of\r\npassing python variables as mothur command parameters, you could perform\r\nclassification of sequences at multiple defined cutoffs as follows:\r\n\r\n::\r\n\r\n    # iterate over list off possible cutoff values\r\n    for cutoff in [70, 80, 90]:   \r\n        # save outputs to different folders, but keep input the same\r\n        output_dir = 'cutoff_%s' % cutoff\r\n        m.set.dir(output=output_dir, input='.')\r\n        m.classify.seqs(fasta='current', count='current', reference='reference.fasta', taxonomy='referenece.tax',\r\n        cutoff=cutoff)\r\n        \r\n\r\nThis may be a convoluted example, but it demonstrates the functionality\r\nwell. One note of caution with this approach is that depending on the\r\nmothur command and the parameter you are changing, you may be\r\noverwriting your output files as you go. This is the reason for saving\r\neach output to a different folder in the above example.\r\n\r\nYou can also instantiate a ``Mothur`` instance with predefined current\r\nfile and directory dictionaries:\r\n\r\n::\r\n\r\n    m = Mothur(current_files=my_predefined_files_dict, current_dirs=my_predefined_files_dict)\r\n\r\nThis can be convenient for saving and loading the state of a mothur\r\nobject to/from file as such:\r\n\r\n::\r\n\r\n    import json\r\n\r\n    # save state of mothur object, m, to json file\r\n    with open('mothur_object.json', 'w') as out_handle:\r\n        json.dump(vars(m), out_handle)\r\n\r\n    # can reload mothur object from the json file\r\n    with open('mothur_object.json', 'r') as in_handle:\r\n        m = Mothur(**json.load(in_handle))\r\n\r\nYou can also modify the contents of these dictionaries in between mothur\r\ncommands. In the previous example where we classified at different\r\ncutoffs, we could have instead controlled the input and output\r\ndirectories in python instead of within mothur:\r\n\r\n::\r\n\r\n    for cutoff in [70, 80, 90]:   \r\n        # save outputs to different folders, but keep input the same\r\n        m.current_dirs['output'] = 'cutoff_%s' % cutoff\r\n        m.current_dirs['input'] = '.'\r\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/campenr/mothur-py",
    "keywords": "mothur bioinformatics",
    "license": "Modified BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mothur-py",
    "platform": "",
    "project_url": "https://pypi.org/project/mothur-py/",
    "release_url": "https://pypi.org/project/mothur-py/0.2.4/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python wrapper for the bioinformatics tool mothur",
    "version": "0.2.4"
  },
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2b173f07a1b27b015842e81e81ed9177",
          "sha256": "70831e06b6c23011de4aae702d4dc73488a47aa576818c2d0eeee4a0e7125d4c"
        },
        "downloads": -1,
        "filename": "mothur_py-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2b173f07a1b27b015842e81e81ed9177",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19849,
        "upload_time": "2017-10-02T13:50:26",
        "url": "https://files.pythonhosted.org/packages/1f/e5/b34621cccac74f6d4d6f095b4bf92d7741b994e930cf4c30d3a88e81ef2e/mothur_py-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3825897fa134abfc9c483c8e866bad5b",
          "sha256": "ec832bc8ecdc0e97a2f817106f7fc31e209234096b3cea68db8e2e1d7924e405"
        },
        "downloads": -1,
        "filename": "mothur_py-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3825897fa134abfc9c483c8e866bad5b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19985,
        "upload_time": "2017-10-06T01:37:27",
        "url": "https://files.pythonhosted.org/packages/92/1a/e1ac79d965667e4947542a5c7f01b4d8393abb10d0399e3ab40c779b4bef/mothur_py-0.2.1.tar.gz"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "68ea850cce29e43c993c90edfe285e0e",
          "sha256": "9d597c3a33b8e72333b52dc71b5b87d5843bdf17a641ba4949da921e6a8b786c"
        },
        "downloads": -1,
        "filename": "mothur_py-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "68ea850cce29e43c993c90edfe285e0e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20388,
        "upload_time": "2017-10-20T11:36:45",
        "url": "https://files.pythonhosted.org/packages/34/ed/1f25a5eb4917d5d01880e7d464394f05c919d356cc7fcebf184dcb30dff6/mothur_py-0.2.3.tar.gz"
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "897a3bbd93bfb127ca5693d498587e26",
          "sha256": "ed9f23252da05de88f235e687c689c92782c012007dff9113dc38b1493d6d49a"
        },
        "downloads": -1,
        "filename": "mothur_py-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "897a3bbd93bfb127ca5693d498587e26",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22498,
        "upload_time": "2017-11-02T00:03:51",
        "url": "https://files.pythonhosted.org/packages/0d/38/29cb88993b616d5c2dbd3d0b1717d3efe73e12a6f2b81df670ffbaf90ca1/mothur_py-0.2.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "897a3bbd93bfb127ca5693d498587e26",
        "sha256": "ed9f23252da05de88f235e687c689c92782c012007dff9113dc38b1493d6d49a"
      },
      "downloads": -1,
      "filename": "mothur_py-0.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "897a3bbd93bfb127ca5693d498587e26",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 22498,
      "upload_time": "2017-11-02T00:03:51",
      "url": "https://files.pythonhosted.org/packages/0d/38/29cb88993b616d5c2dbd3d0b1717d3efe73e12a6f2b81df670ffbaf90ca1/mothur_py-0.2.4.tar.gz"
    }
  ]
}