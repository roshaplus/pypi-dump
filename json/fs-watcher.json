{
  "info": {
    "author": "Oleg Palij",
    "author_email": "o.palij@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "filesystem watcher\n==================\n\n.. image:: https://img.shields.io/pypi/v/fs-watcher.svg?style=flat-square\n    :target: https://warehouse.python.org/project/fs-watcher/\n    :alt: fs-watcher on PyPI\n\n.. image:: https://img.shields.io/pypi/l/fs-watcher.svg?style=flat-square\n    :target: https://warehouse.python.org/project/fs-watcher/\n    :alt: fs-watcher on PyPI\n\n.. image:: https://img.shields.io/github/issues/paleg/Watcher.svg?style=flat-square\n    :target: https://github.com/paleg/Watcher/issues\n    :alt: GitHub issues for Watcher\n\n|\n\n``Watcher`` is a daemon that watches specified files/folders for changes and\nfires commands in response to those changes. It is similar to\nincron_, however, configuration uses a simpler\nto read ini file instead of a plain text file. Unlike incron it can also\nrecursively monitor directories.\n\nIt's written in Python, making it easier to hack.\n\n* `Source on GitHub <https://github.com/paleg/Watcher>`_\n* `Packages on PyPI <https://warehouse.python.org/project/fs-watcher/>`_\n\nThis fork is a rewritting of the code using python-daemon implementation of PEP3143_ with additional features:\n\n* async commands executing which allows several copies of command can be executed simultaneously for single job\n* capturing command output to separate log file\n* exclude watching files by regular expression\n* perform actions on successful/failure command completion.\n\nRequirements\n------------\n\n``Watcher`` supports both Python 2.7 and Python 3.x. It has following dependencies which can be installed with your package manager or `pip`:\n\n* pyinotify_\n* python-daemon_\n* lockfile_\n* chardet_\n* future_\n\nTo install dependencies on Debian:\n\n.. code-block:: bash\n\n    sudo apt-get install python-pyinotify python-daemon python-lockfile python-chardet python-future\n\n.. code-block:: bash\n\n    sudo apt-get install python3-pyinotify python3-daemon python3-lockfile python3-chardet python3-future\n\nTo install dependencies on Gentoo:\n\n.. code-block:: bash\n\n    emerge -av dev-python/pyinotify dev-python/python-daemon dev-python/lockfile dev-python/chardet dev-python/future\n\nInstallation\n------------\n\nSystem-wide using pip_:\n\n.. code-block:: bash\n\n    sudo pip install fs-watcher\n\n.. code-block:: bash\n\n    sudo pip3 install fs-watcher\n\n\nThis command will install:\n\n* Python modules for ``Watcher``\n* sample configuration file\n* samples of startup scripts\n* executable to start ``Watcher``\n\nUse following command to check exact locations:\n\n.. code-block:: bash\n\n    pip show -f fs-watcher\n\nAutostart Watcher on system startup\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are samples startup scripts in the repo. Use your init system manual to install them properly. Check/fix path to ``Watcher`` executable in samples before using, by default it is assumed to be ``/usr/local/bin/watcher``.\n\nFor systemd:\n\n.. code-block:: bash\n\n    cp share/init/watcher.service /etc/systemd/system/watcher.service\n    systemctl daemon-reload\n    systemctl enable watcher\n    systemctl start watcher\n\nFor SysV:\n\n.. code-block:: bash\n\n    cp share/init/watcher.sysvinit /etc/init.d/watcher\n    update-rc.d watcher defaults\n    /etc/init.d/watcher start\n    \nFor OpenRC:\n\n.. code-block:: bash\n\n    cp share/init/watcher.openrc /etc/init.d/watcher\n    rc-update add watcher default\n    /etc/init.d/watcher start\n    \n\nConfiguration\n-------------\n\nCheck provided `watcher.ini`_ file for an example job configuration. The config file should reside in ``/etc/watcher.ini`` or ``~/.watcher.ini``. You can also specify the path to the config file as a command line parameter using the ``--config`` option.\n\nIf you edit the ini file you must restart the daemon for it to reload the configuration.\n\nUsage\n-----\n\n.. code::\n\n\tusage: watcher [-h] [--version] [-c CONFIG] [-v] {start,stop,restart,debug}\n\n\tpositional arguments:\n\t  {start,stop,restart,debug}\n\t\t\t\t\t\t\tWhat to do.\n\n\toptional arguments:\n\t  -h, --help            show this help message and exit\n\t  --version             show program's version number and exit\n\t  -c CONFIG, --config CONFIG\n\t\t\t\t\t\t\tPath to the config file (default: None)\n\t  -v, --verbose         verbose output\n\nDebug mode\n~~~~~~~~~~\nYou can start ``Watcher`` with `debug` positional argument to prevent it from forking to the background and log messages to stdout:\n\n.. code-block:: bash\n\n\twatcher debug\n\n.. _incron: http://incron.aiken.cz/\n.. _PEP3143: http://legacy.python.org/dev/peps/pep-3143/\n.. _pyinotify: http://github.com/seb-m/pyinotify\n.. _python-daemon: https://alioth.debian.org/projects/python-daemon/\n.. _lockfile: https://launchpad.net/pylockfile\n.. _chardet: https://chardet.github.io/\n.. _future: https://pypi.python.org/pypi/future\n.. _pip: https://pip.readthedocs.org/\n.. _watcher.ini: /share/etc/watcher.ini",
    "docs_url": null,
    "download_url": "https://github.com/paleg/Watcher/releases",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/paleg/Watcher",
    "keywords": "inotify,filesystem,python,watcher",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fs-watcher",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/fs-watcher/",
    "release_url": "https://pypi.org/project/fs-watcher/1.0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Daemon that watches specified files/folders for changes and fires commands in response to those changes",
    "version": "1.0.2"
  },
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9082e3357024250d5ff7fb9dc71ebaf8",
          "sha256": "96c3f2cf1d283fb4686a283c6aa79659232bba71d6984dd06c8e91ca9489a220"
        },
        "downloads": 0,
        "filename": "fs-watcher-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9082e3357024250d5ff7fb9dc71ebaf8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14878,
        "upload_time": "2017-08-21T13:52:54",
        "url": "https://files.pythonhosted.org/packages/18/02/bae2f6973dd8efd57b0911b941ba8db131f2d39af6d289314e2f56ff3d0e/fs-watcher-1.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9082e3357024250d5ff7fb9dc71ebaf8",
        "sha256": "96c3f2cf1d283fb4686a283c6aa79659232bba71d6984dd06c8e91ca9489a220"
      },
      "downloads": 0,
      "filename": "fs-watcher-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9082e3357024250d5ff7fb9dc71ebaf8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 14878,
      "upload_time": "2017-08-21T13:52:54",
      "url": "https://files.pythonhosted.org/packages/18/02/bae2f6973dd8efd57b0911b941ba8db131f2d39af6d289314e2f56ff3d0e/fs-watcher-1.0.2.tar.gz"
    }
  ]
}