{
  "info": {
    "author": "NOAA Northwest science Fishery Resource Analysis and Montoring (FRAM) Data team",
    "author_email": "nwfsc.fram.data@noaa.gov",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Systems Administration :: Authentication/Directory"
    ],
    "description": "PyICAM\n======\n\n.. figure:: https://img.shields.io/badge/license-CC0-green.png\n   :alt: License: Creative Commons Zero v1.0 Universal\n\nPython Identity, Credential, and Access Management.\n\nInstall\n-------\n\n::\n\n    pip install pyicam\n\nSupported Python Versions\n-------------------------\n\n-  Python 3.3+\n\nOverview\n--------\n\nPyICAM is a simple, SAML authentication library to help Python software\ndevelopers use the `NOAA Identity, Credential, Access and Federation\nManagement (ICAM) <https://noaaonline.noaa.gov/contact_us.html>`__ login\nprovider in a consistent fashion.\n\nIt consists of a minimal, easy to use interface around the open-source\n`python3-saml <https://pypi.python.org/pypi/python3-saml>`__ toolkit\nfrom Onelogin, Inc.\n\nOnline documentation is at https://github.com/nwfsc-data/PyICAM\n\nDisclaimer\n----------\n\nThis repository is a scientific product and is not official\ncommunication of the National Oceanic and Atmospheric Administration, or\nthe United States Department of Commerce. All NOAA GitHub project code\nis provided on an \u2018as is\u2019 basis and the user assumes responsibility for\nits use. Any claims against the Department of Commerce or Department of\nCommerce bureaus stemming from the use of this GitHub project will be\ngoverned by all applicable Federal law. Any reference to specific\ncommercial products, processes, or services by service mark, trademark,\nmanufacturer, or otherwise, does not constitute or imply their\nendorsement, recommendation or favoring by the Department of Commerce.\nThe Department of Commerce seal and logo, or the seal and logo of a DOC\nbureau, shall not be used in any manner to imply endorsement of any\ncommercial product or activity by DOC or the United States Government.\n\nQuick Start\n-----------\n\nAdd SSO authentication to your existing Python webserver:\n\n-  `Generate signed certificate <#generate-signed-certificate>`__\n-  `Define your application\n   attributes <#define-your-application-attributes>`__\n-  `Obtain SSO Authority\n   attributes <#obtain-sso-authority-attributes>`__\n-  `Create settings file <#create-settings-file>`__\n-  `Submit Metadata <#submit-metadata>`__\n-  `Add your metadata URL <#add-your-metadata-url>`__\n-  `Add your login URL <#add-your-login-url>`__\n-  `Add your logout URL <#add-your-logout-url>`__ - TBD\n\nGenerate signed certificate\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1). Generate a secret key & certificate request for signature, which\nwill be used to identify your webserver to the SSO authority. Complete\ncertificate details, as required by the Certificate Authority from whom\nyou obtain a signed HTTPS certificate.\n\n-  Send your Certificate Authority the contents of: ``CERT_REQUEST.csr``\n-  keep your ``secrets/server.key`` file secure. If anyone, at any time,\n   can read this file - they can copy the key and impersonate your\n   Python webserver.\n\n::\n\n    openssl req -new -newkey rsa:2048 -nodes -keyout secrets/server.key -out CERT_REQUEST.csr\n\nDefine your application attributes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n2). Define a unique name, id, description & three URLs for your\nwebserver. The URLs will be used to identify your webserver, and accept\nSSO and Single-Log-Out (SLO) transmissions from the remote SSO\nauthority:\n\n-  serviceName: \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n-  serviceId: \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_ (short, no\n   spaces)\n-  serviceDescription:\n   \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n-  custom URLs:\n\n   -  entityIdURL:\n      \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n      (E.g.: ``https://my.sample_domain/great_service/saml/metadata/``)\n   -  assertionConsumerServiceURL:\n      \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n      (E.g.: ``https://my.sample_domain/great_service/saml/?acs``)\n   -  singleLogoutServiceURL:\n      \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n      (E.g.: ``https://my.sample_domain/great_service/saml/?sls``)\n\nObtain SSO Authority attributes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n3). Obtain the id, url & identifying certificate of your SSO authority:\n\n-  id: \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_ (typically short, no spaces. Often\n   at the end of the authority URLs)\n-  certificateText:\n   \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n   (base64 encoded text)\n-  remote SSO authority URLs:\n\n   -  singleSignOnServiceURL:\n      \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n   -  singleLogoutServiceURL:\n      \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\nCreate settings file\n~~~~~~~~~~~~~~~~~~~~\n\n4). Create a file called ``settings.json`` and populate it with the\ndetails from Step 2. & 3.:\n\n::\n\n    {\n        \"strict\": true,\n\n        \"debug\": true,\n\n        \"sp\": {\n            \"entityId\": \"__Enter_step2_entityIdURL__\",\n            \"assertionConsumerService\": {\n                \"url\": \"__Enter_step2_assertionConsumerServiceURL__\",\n                \"binding\": \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\n            },\n            \"singleLogoutService\": {\n                \"url\": \"__Enter_step2_singleLogoutServiceURL__\",\n                \"binding\": \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"\n            },\n            \"attributeConsumingService\": {\n                    \"serviceName\": \"__Enter_step2_name__\",\n                    \"serviceDescription\": \"__Enter_step2_description__\",\n                    \"requestedAttributes\": [\n                        {\n                            \"name\": \"__Enter_step2_id__\",\n                            \"isRequired\": false,\n                            \"nameFormat\": \"\",\n                            \"friendlyName\": \"\",\n                            \"attributeValue\": []\n                        }\n                    ]\n            },\n            \"NameIDFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\",\n            \"x509cert\": \"\",\n            \"privateKey\": \"\"\n        },\n\n        \"idp\": {\n            \"entityId\": \"__Enter_step3_id__\",\n            \"singleSignOnService\": {\n                \"url\": \"__Enter_step3_singleSignOnServiceURL__\",\n                \"binding\": \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"\n            },\n            \"singleLogoutService\": {\n                \"url\": \"__Enter_step3_singleLogoutServiceURL__\",\n                \"binding\": \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"\n            },\n            \"x509cert\": \"__Enter_step3_certificateText__\"\n\n        }\n    }\n\nSubmit metadata\n~~~~~~~~~~~~~~~\n\n5). Generate metadata for your webserver & submit it to your SSO\nauthority.\n\n-  Your SSO Identity Provider operator will let you know if submitted\n   metadata is acceptable, or if any settings changes must be made.\n-  SSO operator will provide you with a SSO login URL, to allow users to\n   log into your application via their Identity server:\n   \\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\\_\n\n.. code:: python\n\n    from pyicam.saml.metadata import get_entity_descriptor\n    settings = 'settings.json' #specify the path to your files\n    cert = 'cert.pem' #save cert issued by your Certificate Authority in Step 1). in PEM format\n    key = 'secrets/server.key'\n    metadata, content_type = get_entity_descriptor(settings, cert, key)\n    print(metadata)\n\nAdd your metadata URL\n~~~~~~~~~~~~~~~~~~~~~\n\n6). Add the custom entityIdURL from `Step: Define your application\nattributes <#define-your-application-attributes>`__ to your webserver,\nso it returns metadata as shown in the previous `Step: Submit\nmetadata <#submit-metadata>`__.\n\n-  Note: the HTTP response returned by the URL must have the content\n   type (``text/xml``) indicated by PyICAM.\n\nAdd your login URL\n~~~~~~~~~~~~~~~~~~\n\n7). Add the custom assertionConsumerServiceURL from `Step: Define your\napplication attributes <#define-your-application-attributes>`__ to your\nwebserver, to recieve login notifications via HTTP POST:\n\n.. code:: python\n\n    from pyicam.saml.sso import login\n    host = request.env['HTTP_HOST'] #get the HTTP request details from your webserver\n    port = request.env['SERVER_PORT']\n    path = request.env['SCRIPT_NAME']+request.env['PATH_INFO']\n    settings = 'settings.json' #specify the path to your files\n    cert = 'cert.pem'\n    key = 'secrets/server.key'\n    user = login(host, port, path, settings, cert, key, post_data=request.params)\n    # log in the user, using the provided dict, in whatever fashion used by your program\n    # your URL may now respond to the user, or redirect them, however you see fit\n    if 'relay_state' in user:\n        # If the SSO login URL specified a SAML2 \"RelayState\" parameter for\n        # the final redirect destination, PyICAM will return that value as: 'relay_state'\n        users_saml2_RelayState_redirect_value = user['relay_state']\n\nCongratulations! Users may now log into your application via the SSO\nlink provided by your Identity authority in `Step: Submit\nmetadata <#submit-metadata>`__.\n\nAdd your logout URL\n~~~~~~~~~~~~~~~~~~~\n\n8). (Adding custom singleLogoutServiceURL - TBD)\n\nCopyright (C) 2017-2018 ERT Inc.\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/nwfsc-data/PyICAM",
    "keywords": "saml saml2 sso icam noaa",
    "license": "CC0-1.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyicam",
    "platform": "",
    "project_url": "https://pypi.org/project/pyicam/",
    "release_url": "https://pypi.org/project/pyicam/0.1.0rc2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "SAML 2.0 client authentication library",
    "version": "0.1.0rc2"
  },
  "releases": {
    "0.1.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "613679a42fb750f42cbf9396c1b1145f",
          "sha256": "e938cef1b31cfeb5a10542c8ef864c36d94b3cad4b480664af6e980953e5f383"
        },
        "downloads": -1,
        "filename": "pyicam-0.1.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "613679a42fb750f42cbf9396c1b1145f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9292,
        "upload_time": "2017-11-06T17:50:17",
        "url": "https://files.pythonhosted.org/packages/06/ef/adb4f36b9f285151a0f126bc0334099b5efce715ee024d29f63e04460bf4/pyicam-0.1.0rc1.tar.gz"
      }
    ],
    "0.1.0rc2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9d90a8b5297caf1f30e207f0885db5d1",
          "sha256": "d2a876bf6150f930414e0d084b74509014b87a31be4b9f963c665e100e0bd182"
        },
        "downloads": -1,
        "filename": "pyicam-0.1.0rc2.tar.gz",
        "has_sig": false,
        "md5_digest": "9d90a8b5297caf1f30e207f0885db5d1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9453,
        "upload_time": "2018-01-10T23:20:51",
        "url": "https://files.pythonhosted.org/packages/59/56/60bba8d6375b4935e02243a17550f9a8146c9d24fb1e9681ac2616f55a3c/pyicam-0.1.0rc2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9d90a8b5297caf1f30e207f0885db5d1",
        "sha256": "d2a876bf6150f930414e0d084b74509014b87a31be4b9f963c665e100e0bd182"
      },
      "downloads": -1,
      "filename": "pyicam-0.1.0rc2.tar.gz",
      "has_sig": false,
      "md5_digest": "9d90a8b5297caf1f30e207f0885db5d1",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9453,
      "upload_time": "2018-01-10T23:20:51",
      "url": "https://files.pythonhosted.org/packages/59/56/60bba8d6375b4935e02243a17550f9a8146c9d24fb1e9681ac2616f55a3c/pyicam-0.1.0rc2.tar.gz"
    }
  ]
}