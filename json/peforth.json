{
  "info": {
    "author": "H.C. Chen",
    "author_email": "hcchen_1471@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# peforth\n\n### A FORTH programming language lives in python started with only two words 'code' and 'end-code'.\n\nThere are many ways to run peforth:\n\n1. In the project folder \n   run ```python __main__.py``` or ```python __init__.py``` or double click them.\n\n2. From above the project folder run ```python peforth```\n\n3. If the peforth package is installed. At any folder, run ```python -m peforth```\n\n4. If the peforth package is installed. At any folder, run ```python``` \n   then ```import peforth``` then type ```peforth.ok()``` to run it, type ```exit``` \n   to come back to python interpreter, and do it again and again. peforth context \n   will be all of the same session for all runs.\n\n# Install peforth as a package:\n\n### Method-1\n\nCopy all five files (```projectk.py quit.f peforth.f __main__.py __init__.py```) from the peforth project folder to the new created folder: ```c:\\Users\\...\\Python36\\Lib\\site-packages\\peforth``` , that's all.\nThe sample path is for this computer on my desk. For your computer, do these steps to get the corresponding path:\n\n    >>> import re\n    >>> re\n    <module 're' from '*C:\\\\Users\\\\hcche\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python36\\\\lib\\\\*re.py'>\n    >>>\n\nUse this method if you are participating peforth developing and debugging.\n\n### Method-2\n\nUse the pip install: *** Note ready yet ***\n\n    pip install peforth \n\n# Hello World! \n\nAll peforth words have their help messages.\n\n    : hi  ( -- ) // The hello world! command\n        .\" Hello World!!\" cr ;\n        /// if help message is not enough then use /// leading lines to add comments.\n        /// Both // and /// leading messages go to the last word.\n\nThe first stack diagram and the // leading comment line become help messages.\n\n    OK hi\n    Hello World!!\n    OK help hi\n    ( -- ) The hello world! command\n        if help message is not enough then use /// leading lines to add comments.\n        Both // and /// leading messages go to the last word.\n\n'see' command to see a word's source code and attributes.\n\n    OK see hi\n    {\n        \"__class__\": \"Word\",\n        \"__module__\": \"peforth.projectk\",\n        \"name\": \"hi\",\n        \"xt\": {\n            \"__class__\": \"function\",\n            \"__module__\": \"peforth.projectk\"\n        },\n        \"immediate\": false,\n        \"help\": \"( -- ) The hello world! command\",\n        \"comment\": \"\\tif help message is not enough then use /// leading lines to add comments.\\n\\tBoth // and /// leading messages goes to the last word.\\n\",\n        \"vid\": \"forth\",\n        \"wid\": 242,\n        \"type\": \"colon\",\n        \"private\": false,\n        \"cfa\": 717\n    }\n    ------------ Definition in dictionary ------------\n    00717: Literal: Hello World!! <class 'str'>\n    00718: . ( x -- ) Print the TOS __str__  (<class 'peforth.projectk.Word'>)\n    00719: cr ( -- ) print a carriage return __str__  (<class 'peforth.projectk.Word'>)\n    00720: RET  (<class 'NoneType'>)\n    ------------ End of the difinition ---------------\n    OK\n\n# code ... end-code \n\npeforth like eforth attempts to use very basic words to build the entire forth system. Actually, peforth is started with only two words 'code' and 'end-code'. \n\nTo define a code word, we press Ctrl-D to make the Windows DOS-Box CLI to accept multiple lines at once then type in the example and at the end drop another Ctrl-D to terminate the multiple-line input.\n\n    OK ^D\n    code hello\n        print('hello world!\\n')\n    end-code\n    ^D\n    OK hello\n    hello world!\n\n    OK see hello\n    {\n        \"__class__\": \"Word\",\n        \"__module__\": \"peforth.projectk\",\n        \"name\": \"hello\",\n        \"xt\": {\n            \"__class__\": \"function\",\n            \"__module__\": \"peforth.projectk\",\n            \"name\": \"hello\"\n        },\n        \"immediate\": false,\n        \"help\": \"\",\n        \"comment\": \"\",\n        \"vid\": \"forth\",\n        \"wid\": 243,\n        \"type\": \"code\"\n    }\n    ------------ Source code ------------\n    def xt(_me=None): ### hello ###\n        print('hello world!\\n')\n\n    -------------------------------------\n    OK\n\nWhere _me refers to the forth word object itself if you need to access its own attributes.\n\n# inline python code \\<py> \\</py> \\</pyV> py: py>  \n\npython code can be put inline mixed with forth code. This example brings you the \npython '''help()''' utility:\n\n    OK py: help()\n\n    Welcome to Python 3.6's help utility!\n\n    If this is your first time using Python, you should definitely check out\n    the tutorial on the Internet at http://docs.python.org/3.6/tutorial/.\n\n    Enter the name of any module, keyword, or topic to get help on writing\n    Python programs and using Python modules.  To quit this help utility and\n    return to the interpreter, just type \"quit\".\n\n    To get a list of available modules, keywords, symbols, or topics, type\n    \"modules\", \"keywords\", \"symbols\", or \"topics\".  Each module also comes\n    with a one-line summary of what it does; to list the modules whose name\n    or summary contain a given string such as \"spam\", type \"modules spam\".\n\n    help> quit\n\n    You are now leaving help and returning to the Python interpreter.\n    If you want to ask for help on a particular object directly from the\n    interpreter, you can type \"help(object)\".  Executing \"help('string')\"\n    has the same effect as typing a particular string at the help> prompt.\n    OK\n\nThis example defines a 'dos-dir' command to go out to DOS box, run the 'dir' DOS command, and come back.\n\n    OK : dos-dir <py> import os; os.system('dir') </py> ;\n    OK dos-dir\n     Volume in drive C is Windows\n     Volume Serial Number is 2EA4-3202\n\n     Directory of c:\\Users\\hcche\\Documents\\GitHub\\ML\\machine-learning-recipes\\src\\part_5\n\n    2017-09-03  16:09    <DIR>          .\n    2017-09-03  16:09    <DIR>          ..\n    2017-06-11  08:53               240 check.py\n    2017-06-23  17:00    <DIR>          Datasets\n    2017-06-11  08:53             2,218 Fisher.csv\n    2017-09-03  17:41             6,912 kNNClassifier.f\n    2017-09-01  19:45             2,256 kNNClassifier.py\n    2017-06-11  08:53             2,079 Part5.py\n    2017-09-03  16:09    <DIR>          __pycache__\n                   5 File(s)         13,705 bytes\n                   4 Dir(s)  262,004,789,248 bytes free\n    OK\n\nAgain, use 'see' to view its source code:\n\n    OK see dos-dir\n    {\n        \"__class__\": \"Word\",\n        \"__module__\": \"peforth.projectk\",\n        \"name\": \"dos-dir\",\n        \"xt\": {\n            \"__class__\": \"function\",\n            \"__module__\": \"peforth.projectk\"\n        },\n        \"immediate\": false,\n        \"help\": \"\",\n        \"comment\": \"\",\n        \"vid\": \"forth\",\n        \"wid\": 242,\n        \"type\": \"colon\",\n        \"private\": false,\n        \"cfa\": 717\n    }\n    ------------ Definition in dictionary ------------\n    00717: def compyle_anonymous():\n        import os; os.system('dir') (<class 'function'>)\n      2           0 LOAD_CONST               1 (0)\n                  2 LOAD_CONST               0 (None)\n                  4 IMPORT_NAME              0 (os)\n                  6 STORE_FAST               0 (os)\n                  8 LOAD_FAST                0 (os)\n                 10 LOAD_ATTR                1 (system)\n                 12 LOAD_CONST               2 ('dir')\n                 14 CALL_FUNCTION            1\n                 16 POP_TOP\n                 18 LOAD_CONST               0 (None)\n                 20 RETURN_VALUE\n    00718: RET  (<class 'NoneType'>)\n    ------------ End of the difinition ---------------\n    OK\n\nNow we have seen ```<py> ... </py>``` brings in a block of python code that does \nnot return value. While ```<py> ... </pyV>``` is to envelope a python statement \nthat returns a value back to forth's top of the data stack. We'll use it's short \nform ```py>``` that followed with a statement without space to get CPU information \nfrom DOS environment variable PROCESSOR_IDENTIFIER:\n\n    OK : CPU ( -- string ) // View CPU info\n    OK   py> os.getenv('PROCESSOR_IDENTIFIER') . cr ;\n    OK CPU\n    Intel64 Family 6 Model 142 Stepping 9, GenuineIntel  \n    OK\n\nSo ```py>``` and ```py:``` are short form of ```<py>...</pyV>``` and ```<py>...</py>``` respectively.\n\n\nVisit this project's [Wiki](https://github.com/hcchengithub/peforth/wiki) for more examples.\n\nFigTaiwan H.C. Chen<br>\nhcchen_1471@hotmail.com<br>\nJust undo it!</br>\n\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/hcchengithub/peforth",
    "keywords": "",
    "license": "The MIT License (MIT) Copyright \u00a9 2017 H.C. Chen",
    "maintainer": "",
    "maintainer_email": "",
    "name": "peforth",
    "platform": "",
    "project_url": "https://pypi.org/project/peforth/",
    "release_url": "https://pypi.org/project/peforth/1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A FORTH programming language lives in python. Started with only two words 'code' and 'end-code'.",
    "version": "1.2"
  },
  "releases": {
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fe5891bd7cf705ba558e635332d92c47",
          "sha256": "2432543d3dc39fdb4210af09554ac0551eb58580d86bcf7baa8818330b02a33f"
        },
        "downloads": 0,
        "filename": "peforth-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe5891bd7cf705ba558e635332d92c47",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 48860,
        "upload_time": "2017-09-08T12:51:48",
        "url": "https://files.pythonhosted.org/packages/c5/dc/4f6883f084895e710e81603b187d360c1e9a54d47079b9611b771239b882/peforth-1.2-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "fe5891bd7cf705ba558e635332d92c47",
        "sha256": "2432543d3dc39fdb4210af09554ac0551eb58580d86bcf7baa8818330b02a33f"
      },
      "downloads": 0,
      "filename": "peforth-1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe5891bd7cf705ba558e635332d92c47",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 48860,
      "upload_time": "2017-09-08T12:51:48",
      "url": "https://files.pythonhosted.org/packages/c5/dc/4f6883f084895e710e81603b187d360c1e9a54d47079b9611b771239b882/peforth-1.2-py3-none-any.whl"
    }
  ]
}