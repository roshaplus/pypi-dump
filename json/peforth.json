{
  "info": {
    "author": "H.C. Chen",
    "author_email": "hcchen_1471@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "\npeforth\n#######\n\nA FORTH programming language begins with only two words 'code' and 'end-code'.\n\nWays to run peforth\n***********************************\n1. In the project folder \n   run ```python __main__.py``` or ```python __init__.py``` or double click them.\n\n2. From above the project folder run ```python peforth```\n\n3. If the peforth package is installed. At any folder, run ```python -m peforth```\n\n4. If the peforth package is installed. At any folder, run ```python``` \n   then ```import peforth``` then type ```peforth.ok()``` to run it, type ```exit``` \n   to come back to python interpreter, and do it again and again. peforth context \n   will be all of the same session for all runs.\n\nInstall peforth\n***************\n\nUse the pip install\n\n::\n\n     pip install peforth \n\nHello World!\n************ \n\nAll peforth words have their help messages.\n\n::\n\n    : hi  ( -- ) // The hello world! command\n        .\" Hello World!!\" cr ;\n        /// if help message is not enough then use /// leading lines to add comments.\n        /// Both // and /// leading messages go to the last word.\n\n\nThe first stack diagram and the ```//``` leading comment line become help messages. Let's execute it and see its help:\n\n::\n\n    OK hi\n    Hello World!!\n    OK help hi\n    ( -- ) The hello world! command\n        if help message is not enough then use /// leading lines to add comments.\n        Both // and /// leading messages go to the last word.\n\n\n```see``` command sees a word's source code and attributes.\n::\n\n    OK see hi\n    {\n        \"__class__\": \"Word\",\n        \"__module__\": \"peforth.projectk\",\n        \"name\": \"hi\",\n        \"xt\": {\n            \"__class__\": \"function\",\n            \"__module__\": \"peforth.projectk\"\n        },\n        \"immediate\": false,\n        \"help\": \"( -- ) The hello world! command\",\n        \"comment\": \"\\tif help message is not enough then use /// leading lines to add comments.\\n\\tBoth // and /// leading messages goes to the last word.\\n\",\n        \"vid\": \"forth\",\n        \"wid\": 242,\n        \"type\": \"colon\",\n        \"private\": false,\n        \"cfa\": 717\n    }\n    ------------ Definition in dictionary ------------\n    00717: Literal: Hello World!! <class 'str'>\n    00718: . ( x -- ) Print the TOS __str__  (<class 'peforth.projectk.Word'>)\n    00719: cr ( -- ) print a carriage return __str__  (<class 'peforth.projectk.Word'>)\n    00720: RET  (<class 'NoneType'>)\n    ------------ End of the difinition ---------------\n    OK\n\n\ncode ... end-code \n*****************\n\npeforth, like eforth, attempts to use very basic words to build the entire\nforth system. Actually, peforth is started with only two words ```code```\nand ```end-code```. As a demo to define a code word, let's press Ctrl-D to make the Windows \nDOS-Box CLI to accept multiple lines at once, then type in the example, and at the end\ndrop another Ctrl-D to terminate the multiple-line input.\n\n::\n\n    OK ^D\n    code hello\n        print('hello world!\\n')\n    end-code\n    ^D\n    OK\n\nWe have defined our first code word ```hello```. Let's execute it and ```see``` its details,\n\n::\n\n    OK hello\n    hello world!\n\n    OK see hello\n    {\n        \"__class__\": \"Word\",\n        \"__module__\": \"peforth.projectk\",\n        \"name\": \"hello\",\n        \"xt\": {\n            \"__class__\": \"function\",\n            \"__module__\": \"peforth.projectk\",\n            \"name\": \"hello\"\n        },\n        \"immediate\": false,\n        \"help\": \"\",\n        \"comment\": \"\",\n        \"vid\": \"forth\",\n        \"wid\": 243,\n        \"type\": \"code\"\n    }\n    ------------ Source code ------------\n    def xt(_me=None): ### hello ###\n        print('hello world!\\n')\n\n    -------------------------------------\n    OK\n\nWhere ```_me``` refers to the forth word object itself if you need to access\nits own attributes.\n\ninline python code\n******************\n\npython code can be put inline mixed with forth code. \nThis example defines a ```dos-dir``` command to go out to DOS box, run the\n```dir``` DOS command, and come back.\n\n::\n\n    OK : dos-dir <py> import os; os.system('dir') </py> ;\n\nStatements in between ```<py> ... </py>``` are python code. Let's execute the new word:\n\n::\n\n    OK dos-dir\n     Volume in drive C is Windows\n     Volume Serial Number is 2EA4-3202\n\n     Directory of c:\\Users\\hcche\\Documents\\GitHub\\ML\\machine-learning-recipes\\src\\part_5\n\n    2017-09-03  16:09    <DIR>          .\n    2017-09-03  16:09    <DIR>          ..\n    2017-06-11  08:53               240 check.py\n    2017-06-23  17:00    <DIR>          Datasets\n    2017-06-11  08:53             2,218 Fisher.csv\n    2017-09-03  17:41             6,912 kNNClassifier.f\n    2017-09-01  19:45             2,256 kNNClassifier.py\n    2017-06-11  08:53             2,079 Part5.py\n    2017-09-03  16:09    <DIR>          __pycache__\n                   5 File(s)         13,705 bytes\n                   4 Dir(s)  262,004,789,248 bytes free\n    OK\n\nAgain, use ```see``` to view its source code:\n\n::\n\n    OK see dos-dir\n    {\n        \"__class__\": \"Word\",\n        \"__module__\": \"peforth.projectk\",\n        \"name\": \"dos-dir\",\n        \"xt\": {\n            \"__class__\": \"function\",\n            \"__module__\": \"peforth.projectk\"\n        },\n        \"immediate\": false,\n        \"help\": \"\",\n        \"comment\": \"\",\n        \"vid\": \"forth\",\n        \"wid\": 242,\n        \"type\": \"colon\",\n        \"private\": false,\n        \"cfa\": 717\n    }\n    ------------ Definition in dictionary ------------\n    00717: def compyle_anonymous():\n        import os; os.system('dir') (<class 'function'>)\n      2           0 LOAD_CONST               1 (0)\n                  2 LOAD_CONST               0 (None)\n                  4 IMPORT_NAME              0 (os)\n                  6 STORE_FAST               0 (os)\n                  8 LOAD_FAST                0 (os)\n                 10 LOAD_ATTR                1 (system)\n                 12 LOAD_CONST               2 ('dir')\n                 14 CALL_FUNCTION            1\n                 16 POP_TOP\n                 18 LOAD_CONST               0 (None)\n                 20 RETURN_VALUE\n    00718: RET  (<class 'NoneType'>)\n    ------------ End of the difinition ---------------\n    OK\n\nNow we have seen ```<py> ... </py>``` brings in a block of python code\nthat does not return value. While ```<py> ... </pyV>``` is to envelope a\npython statement that returns a value back to forth's top of the data\nstack. We'll use it's short form ```py>``` that followed with a statement\nwithout space to get CPU information from DOS environment variable\nPROCESSOR\\_IDENTIFIER:\n\n::\n\n    : CPU ( -- string ) // View CPU info\n    py> os.getenv('PROCESSOR_IDENTIFIER') . cr ;\n\nType ```CPU``` to execute the new word:\n\n::\n\n    OK CPU\n    Intel64 Family 6 Model 142 Stepping 9, GenuineIntel  \n    OK\n\n\nSo ```py>``` and ```py:``` are short forms of ```<py>...</pyV>``` and\n```<py>...</py>``` respectively if the python statement after them do \nnot contain any space character. Visit this project's `Wiki`_ for more \nexamples.\n\n- H.C. Chen, FigTaiwan\n- hcchen\\_1471@hotmail.com\n- 2017.9.21 \n\nEdited by: `rst online editor`_\n\n.. _Wiki: https://github.com/hcchengithub/peforth/wiki\n.. _rst online editor: http://rst.ninjs.org\n\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/hcchengithub/peforth",
    "keywords": "",
    "license": "The MIT License (MIT) Copyright \u00a9 2017 H.C. Chen",
    "maintainer": "",
    "maintainer_email": "",
    "name": "peforth",
    "platform": "",
    "project_url": "https://pypi.org/project/peforth/",
    "release_url": "https://pypi.org/project/peforth/1.6/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A FORTH programming language lives in python and begins with only two words 'code' and 'end-code'.",
    "version": "1.6"
  },
  "releases": {
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fe5891bd7cf705ba558e635332d92c47",
          "sha256": "2432543d3dc39fdb4210af09554ac0551eb58580d86bcf7baa8818330b02a33f"
        },
        "downloads": 0,
        "filename": "peforth-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe5891bd7cf705ba558e635332d92c47",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 48860,
        "upload_time": "2017-09-08T12:51:48",
        "url": "https://files.pythonhosted.org/packages/c5/dc/4f6883f084895e710e81603b187d360c1e9a54d47079b9611b771239b882/peforth-1.2-py3-none-any.whl"
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "97c6138652b943f1da6a30d268dfbfe6",
          "sha256": "0cbe6094671fa14ff99eb61e894574f35c1c17068eba1ae4dab2a135fe061fe2"
        },
        "downloads": 0,
        "filename": "peforth-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "97c6138652b943f1da6a30d268dfbfe6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 49389,
        "upload_time": "2017-09-14T07:06:20",
        "url": "https://files.pythonhosted.org/packages/a5/04/c0658c1518b6fee8019f0c83935af3e48a8d6fcc6e6c92cee5661d2cc95f/peforth-1.3-py3-none-any.whl"
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5e37fdf6c893b46f61c5865ef24ea2ca",
          "sha256": "e0e8a674b3eda9327ec4acdb85b652e29b6ffd354fa6be0e8ef922c98dcb60ae"
        },
        "downloads": 0,
        "filename": "peforth-1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e37fdf6c893b46f61c5865ef24ea2ca",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 44579,
        "upload_time": "2017-09-20T10:35:39",
        "url": "https://files.pythonhosted.org/packages/ee/82/a7ebb6287bc8048cc8a6ac7587ffd3268699950969afa7aecd4ecc07e1f8/peforth-1.4-py3-none-any.whl"
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ce93b2c5e7572026d85a5199e814e9ae",
          "sha256": "aad9f0473099227ce3cbd305b89e6523c2fc181f9e6224b3d2b60c16957e756a"
        },
        "downloads": 0,
        "filename": "peforth-1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce93b2c5e7572026d85a5199e814e9ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 43601,
        "upload_time": "2017-09-22T08:09:22",
        "url": "https://files.pythonhosted.org/packages/58/2b/4773b9bee61b7c025df16f2a28a29c37d4c20c6198c203a8cf178574be3d/peforth-1.5-py3-none-any.whl"
      }
    ],
    "1.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cf8bb30cb6d7b1fbb680132f2efca6b4",
          "sha256": "ee2666dc5085ad775279ad70e7338e19150e7db1bf0d347394cf15f25eac7f8e"
        },
        "downloads": 0,
        "filename": "peforth-1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf8bb30cb6d7b1fbb680132f2efca6b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 45527,
        "upload_time": "2017-10-02T15:33:23",
        "url": "https://files.pythonhosted.org/packages/a5/d4/37772671a9fc7e7ec96a51b40ac0c16e0becf0414173b486033ba57d56f3/peforth-1.6-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "cf8bb30cb6d7b1fbb680132f2efca6b4",
        "sha256": "ee2666dc5085ad775279ad70e7338e19150e7db1bf0d347394cf15f25eac7f8e"
      },
      "downloads": 0,
      "filename": "peforth-1.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cf8bb30cb6d7b1fbb680132f2efca6b4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 45527,
      "upload_time": "2017-10-02T15:33:23",
      "url": "https://files.pythonhosted.org/packages/a5/d4/37772671a9fc7e7ec96a51b40ac0c16e0becf0414173b486033ba57d56f3/peforth-1.6-py3-none-any.whl"
    }
  ]
}