{
  "info": {
    "author": "Felix Berkenkamp",
    "author_email": "befelix@inf.ethz.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "====================================\nSafeOpt - Safe Bayesian Optimization\n====================================\n\n.. image:: https://travis-ci.org/befelix/SafeOpt.svg?branch=master\n  :target: https://travis-ci.org/befelix/SafeOpt\n  :alt: Build Status\n.. image:: https://readthedocs.org/projects/safeopt/badge/?version=latest\n  :target: http://safeopt.readthedocs.io/en/latest/?badge=latest\n  :alt: Documentation Status\n\nThis code implements an adapted version of the safe, Bayesian optimization algorithm, SafeOpt [1]_, [2]_. It also provides a more scalable implementation based on [3]_ as well as an implementation for the original algorithm in [4]_.\nThe code can be used to automatically optimize a performance measures subject to a safety constraint by adapting parameters.\nThe prefered way of citing this code is by referring to [1] or [2].\n\n.. image:: http://img.youtube.com/vi/GiqNQdzc5TI/0.jpg\n  :target: http://www.youtube.com/watch?feature=player_embedded&v=GiqNQdzc5TI\n  :alt: Youtube video\n\n.. [1] F. Berkenkamp, A. P. Schoellig, A. Krause,\n  `Safe Controller Optimization for Quadrotors with Gaussian Processes <http://arxiv.org/abs/1509.01066>`_\n  in Proc. of the IEEE International Conference on Robotics and Automation (ICRA), 2016, pp. 491-496.\n\n.. [2] F. Berkenkamp, A. Krause, A. P. Schoellig,\n  `Bayesian Optimization with Safety Constraints: Safe and Automatic Parameter Tuning in Robotics  <http://arxiv.org/abs/1602.04450>`_,\n  ArXiv, 2016, arXiv:1602.04450 [cs.RO].\n\n.. [3] Rikky R.P.R. Duivenvoorden, Felix Berkenkamp, Nicolas Carion, Andreas Krause, Angela P. Schoellig,\n  `Constrained Bayesian optimization with Particle Swarms for Safe Adaptive Controller Tuning <http://www.dynsyslab.org/wp-content/papercite-data/pdf/duivenvoorden-ifac17.pdf>`_,\n  in Proc. of the IFAC (International Federation of Automatic Control) World Congress, 2017.\n\n.. [4] Y. Sui, A. Gotovos, J. W. Burdick, and A. Krause,\n  `Safe exploration for optimization with Gaussian processes <https://las.inf.ethz.ch/files/sui15icml-long.pdf>`_\n  in Proc. of the International Conference on Machine Learning (ICML), 2015, pp. 997\u20131005.\n\n\nInstallation\n------------\nThe easiest way to install the necessary python libraries is by installing pip (e.g. ``apt-get install python-pip`` on Ubuntu) and running\n\n``pip install safeopt``\n\nAlternatively you can clone the repository and install it using\n\n``python setup.py install``\n\nUsage\n-----\n\n*The easiest way to get familiar with the library is to run the interactive example ipython notebooks!*\n\nMake sure that the ``ipywidgets`` module is installed.\n\nAll functions and classes are documented on `Read The Docs <http://safeopt.readthedocs.org/en/latest/>`_.\n\nDetails\n-------\n\nThe algorithm is implemented in the ``gp_opt.py`` file. Next to some helper\nfunctions, the class ``SafeOpt`` implements the core algorithm. It can be\ninitialized as\n\n``SafeOpt(gp, parameter_set, fmin, lipschitz=None, beta=3.0, num_contexts=0, threshold=0, scaling=None)``\n\n* ``gp`` is a Gaussian process from the ``GPy`` toolbox at `<https://github.com/SheffieldML/GPy>`_. This Gaussian process should already include the points of the initial, safe set. For multiple constraints, this is a list of independent GPs instead.\n* The ``parameter_set`` is a 2d-array of sampling locations for the GP, which is used to compute new evaluation points. It can, for example, be create with the ```linearly_spaced_combinations``` function in the safeopt library.\n* Lastly, fmin defines the safe lower bounds on the function values.\n\nThe class several optional arguments:\n\n* The `lipschitz` argument can be used to specify the Lipschitz constant to determine the set of expanders. If it is not None, the algorithm in [1] is used to determine expanders directly with the confidence itnervals.\n* The confidence interval that is used can be specified by `beta`, which can be a constant or a function of the iteration number.\n* ``num_contexts`` can be used to specify which of the parameters are contexts that we do not optimize over, see [2].\n* Potential expanders that have confidence intervals smaller than the ``threshold`` value are not considered by the algorithm. This is useful to avoid unecessary exploration (Typical values are the noise standard deviation).\n* `scaling` is used when multiple constraints are specified, in order to account for different magnitudes of functions.\n\nOnce the class is initialized, its `optimize` method can be used to determine the next parameters at which to evaluate the objective function.\nThe resulting data point can be added with the ``add_new_data_point` method. The `plot`` method illustrates the Gaussian process intervals in 1 or 2 dimensions.\n\nFor a more detailed documentation see the class/method docstrings within the source code.\n\nLicense\n-------\n\nThe code is licenced under the MIT license and free to use by anyone without any restrictions.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/befelix/SafeOpt",
    "keywords": "Bayesian optimization,Safety",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "safeopt",
    "platform": "",
    "project_url": "https://pypi.org/project/safeopt/",
    "release_url": "https://pypi.org/project/safeopt/0.14/",
    "requires_dist": [
      "scipy (>=0.12)",
      "numpy (>=1.7)",
      "matplotlib (>=1.3)",
      "future",
      "GPy (>=0.8)"
    ],
    "requires_python": "",
    "summary": "Safe Bayesian optimization",
    "version": "0.14"
  },
  "releases": {
    "0.14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1241663379faa919d0d302e7d03e7605",
          "sha256": "bc8d179796d1ca4873f77241899e572217a2d464f4f35e9919ecf1359198d44f"
        },
        "downloads": 0,
        "filename": "safeopt-0.14-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1241663379faa919d0d302e7d03e7605",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 21760,
        "upload_time": "2017-08-15T08:56:24",
        "url": "https://files.pythonhosted.org/packages/3d/b3/626c836955b60523aac372d2c676710b77b7353be41a2064a6cdc6609080/safeopt-0.14-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1241663379faa919d0d302e7d03e7605",
        "sha256": "bc8d179796d1ca4873f77241899e572217a2d464f4f35e9919ecf1359198d44f"
      },
      "downloads": 0,
      "filename": "safeopt-0.14-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1241663379faa919d0d302e7d03e7605",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 21760,
      "upload_time": "2017-08-15T08:56:24",
      "url": "https://files.pythonhosted.org/packages/3d/b3/626c836955b60523aac372d2c676710b77b7353be41a2064a6cdc6609080/safeopt-0.14-py2.py3-none-any.whl"
    }
  ]
}