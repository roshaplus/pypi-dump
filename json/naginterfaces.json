{
  "info": {
    "author": "Numerical Algorithms Group",
    "author_email": "support@nag.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "The `naginterfaces` Python Package\n==================================\n\n:Author: The Numerical Algorithms Group Limited, Oxford, UK\n:Copyright: The Numerical Algorithms Group Limited, 2017.\n\nIntroduction\n------------\nThe `naginterfaces` package is a set of Python interfaces for the Mark 26.1 NAG\nLibrary Engine, which is the software implementation of NAG's collection of\nseveral thousand mathematical and statistical routines serving a diverse range\nof application areas.\n\nNAG's collection of algorithms is fully documented in the NAG Library Manual:\n\nhttps://www.nag.com/numeric/fl/nagdoc_fl26.1/html/frontmatter/manconts.html\n\nThe document linked above is also available in the downloadable archive of the\nManual at\n\nhttps://www.nag.com/numeric/fl/nagdoc_fl26.1/nagdoc_fl26.zip\n\nThe package is compatible with Python 2.7, 3.TextRequiredHere and 3.TextRequiredHere. See the\nApplicability section below for more details.\n\nA selection of example files are included in the package\ndistribution. These serve to demonstrate some important usage\npoints and can also be used as short tests of the package.\n\nThe source distribution of the package contains a ``CHANGELOG.rst`` file\nlisting interesting enhancements and fixes introduced in each `naginterfaces`\nrelease. This document is section `Changelog <changelog>` in the\n`naginterfaces` HTML documentation.\n\nA ``SUPPLEMENTARY.rst`` file in the source distribution gives details of\nadditional applicability or usage information for the product. This document\nis section `Supplementary Information <supplementary>` in the\n`naginterfaces` HTML documentation.\n\nThe required NAG library and its appropriate runtime dependencies are included\nin and installed with the package. The NAG library is customized for the\npackage and cannot be used in any other context.\n\nBy installing this software you agree to the terms found in the source\ndistribution's ``LICENSE.txt`` file. The terms can also be found in the section\n`Terms and Conditions <terms>` in the `naginterfaces` HTML documentation.\n\nDependencies\n------------\n- A valid licence for the underlying NAG library.\n- Python.\n- NumPy.\n\nThe package will raise **RuntimeError** if the target system for installation is\nnot supported.\n\nInstallation\n------------\nInstalling with Intel Python\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThe primary installation framework supported by NAG is through Intel Python\n2017\n\nhttps://software.intel.com/en-us/articles/using-intel-distribution-for-python-with-anaconda\n\nvia Anaconda\n\nhttps://www.continuum.io/\n\nand using a NumPy at version 1.TextRequiredHere enabled with Intel MKL version TextRequiredHere.\n\nTo use an existing Anaconda installation to create a new Intel Python\nenvironment with the required NumPy, invoke ::\n\n  conda create --channel intel --prefix ni2 \\\n    python=2.7 intelpython=2017 mkl=2017 numpy=1.TextRequiredHere\n\nor ::\n\n  conda create --channel intel --prefix ni3 \\\n    python=3.TextRequiredHere intelpython=2017 mkl=2017 numpy=1.TextRequiredHere\n\nsay, depending on the Python version required.\n\nYou must then activate the resulting Intel Python enviroment. For users\nof the bash or zsh shells (Linux and macOS) ::\n\n  source ni2/bin/activate ni2\n\nor on Microsoft Windows ::\n\n  ni2\\bin\\activate ni2\n\nfor example.\n\nInstallation of the `naginterfaces` package is TextRequiredHere for conda\ncommand.\n\nInstalling with ``pip``\n~~~~~~~~~~~~~~~~~~~~~~~\nThe package may also be installed using the official CPython distribution\n\nhttps://www.python.org\n\nfrom the Python wheel in the package's ``dist`` directory in its source\ndistribution.\n\nThe installation command, which uses ``pip``, looks like ::\n\n  python -m pip install \\\n    naginterfaces-{naginterfaces version}-{python tag}-none-${platform tag}.whl\n\nA correct prerequisite NumPy will be automatically installed from the Python\nPackage Index if not already present.\n\nSee the core Python documentation (https://docs.python.org) for additional ways\nthat a wheel may be installed.\n\nOnce installed by ``pip`` the package can later be uninstalled using ::\n\n   python -m pip uninstall naginterfaces\n\nBefore Use\n----------\nFollowing a successful deployment of the `naginterfaces` materials, it is\nrecommended that you review the full documentation for the package before use.\nTo access from a command prompt execute ::\n\n  python -m pydoc naginterfaces\n\nFor information on how to obtain a valid licence for the underlying NAG library\nsee the accompanying platform-specific README file in the source\ndistribution's ``licence`` directory or the section `licence` in the\n`naginterfaces` HTML documentation.\n\nQuickstart\n----------\nBy way of a short worked example, suppose that we wish to minimize the\n'generalized Rosenbrock' function using bound constrained optimization by\nquadratic approximations.\n\nNAG interfaces with a specific focus on NumPy datatypes are provided in\nthe ``naginterfaces.numpy`` subpackage:\n\n>>> import naginterfaces.numpy as ni_np\n\nExamining the output from\n\n>>> help(ni_np)\nHelp on package naginterfaces.numpy in naginterfaces:\n<BLANKLINE>\nNAME\n    naginterfaces.numpy\n...\n    Submodule Summary\n    -----------------\n    Python interfaces are available for the following algorithmic submodules.\n...\n    Minimizing or Maximizing a Function - ``opt`` (e04)\n<BLANKLINE>\n      This module provides functions for solving various mathematical optimization\n      problems by solvers based on local stopping criteria.\n...\n\nand further\n\n>>> from naginterfaces.numpy import opt as ni_opt; help(ni_opt)\nHelp on module naginterfaces.numpy.opt in naginterfaces.numpy:\n<BLANKLINE>\n...\nFUNCTIONS\n    bounds_bobyqa_func(objfun, npt, x, bl, bu, rhobeg, rhoend, monfun, maxcal, data=None)\n        Bound constrained minimum, model-based algorithm, using function\n        values only.\n<BLANKLINE>\n        Parameters\n        ----------\n        objfun : callable f = objfun(x, data=None)\n...\n        x : float, array_like, shape (n)\n            an estimate of the position of the minimum\n...\n\nconfirms that the relevant solver to call is ``bounds_bobyqa_func`` from the\n``opt`` submodule. (The `opt` Chapter is also known by its 'short' name `e04`\nin the NAG Library Manual.)\n\nInformation can also be discovered by using the search facility in the\n`naginterfaces` HTML documentation.\n\nThe function may be imported directly if desired:\n\n>>> from naginterfaces.numpy.opt import bounds_bobyqa_func\n\nNow define the optimization problem: first, the objective function for the\ngeneralized Rosenbrock problem. From the signature displayed above we can infer\nthat parameter ``objfun`` in ``bounds_bobyqa_func`` may be specified as a\nlambda expression in our case, where we do not have any communication data\n(``data``) to pass to the function:\n\n>>> rosen = lambda x: (\n...     sum(100.0*(x[1:]-x[:-1]**2.0)**2.0 + (1.0-x[:-1])**2.0)\n... )\n\nThen define an initial guess for the optimization. In the\n``naginterfaces.numpy`` subpackage input array data may be supplied in any\n'array_like' container, as noted above in the ``float, array_like, shape (n)``\nspecification for argument ``x``. For our one-dimensional ``x``, this means\nthat any sequence of data will be a suitable container, as will a\n``numpy.ndarray``.\n(In functions taking multi-dimensional data, nested sequences and again\ninstances of ``numpy.ndarray`` are valid.) Furthermore, the shape (length) of\nthe ``x`` we supply determines the (inferred) value of ``n`` for the problem.\n\nOur chosen start point is :math:`(1.2, 1.0, 1.2, 1.0)` and thus any of the\nfollowing may be used to supply the 'array_like' vector ``x``:\n\n- as a ``list``\n\n>>> x = [1.2, 1.0, 1.2, 1.0]\n\n- as a ``tuple``\n\n>>> x = (1.2, 1.0, 1.2, 1.0)\n\n- as an ``ndarray``\n\n>>> import numpy as np; x = np.array([1.2, 1.0, 1.2, 1.0])\n\nNow define box bounds for the problem:\n\n>>> n = len(x)\n>>> bl, bu = ([0.0]*n, [2.0]*n)\n\nThe solver has a function argument for monitoring the progress of the\noptimization. We do not wish to make use of this facility at this time:\n\n>>> def mon(nf, x, f, rho):\n...     pass\n\nInitialize the remaining parameters for the optimization, which control\nthe quadratic-approximation process, the size of the trust region used\nduring the optimization, and the limit on iterations:\n\n>>> npt = 2*n + 1\n>>> rhobeg, rhoend = (1e-1, 1e-6)\n>>> maxcal = 500\n\nMinimize the problem:\n\n>>> x_min, f, nf = bounds_bobyqa_func(\n...     rosen, npt, x, bl, bu, rhobeg, rhoend, mon, maxcal,\n... )\n\nDisplay the results:\n\n>>> print('Function value at lowest point found is {:.5f}.'.format(f))\nFunction value at lowest point found is 0.00000.\n\n>>> print('The objective function was called {:d} times.'.format(nf))\nThe objective function was called ... times.\n\n>>> print('The corresponding x is (' +\n...     ', '.join(['{:.4f}'] * n).format( *x_min ) +\n... ').')\nThe corresponding x is (1.0000, 1.0000, 1.0000, 1.0000).\n\nExample Files\n-------------\nAll example files in the source distribution can be run as standard Python\n'main' scripts from the command prompt, by executing for instance ::\n\n  python naginterfaces/numpy/examples/info/impl_details_ex.py\n\nAfter the package has been installed each example will also be available as a\nPython module, invocable via for instance ::\n\n  python -m naginterfaces.numpy.examples.info.impl_details_ex\n\nRunning ::\n\n  python -m pydoc naginterfaces.numpy.examples.info.impl_details_ex\n\nwill confirm the installation location of the associated file.\n\nPython's ``inspect`` module can be used to access the source code of objects:\n\n>>> import inspect\n>>> from naginterfaces.numpy.examples.opt import bounds_bobyqa_func_ex\n>>> print(''.join(inspect.getsourcelines(bounds_bobyqa_func_ex)[0]))\n#!/usr/bin/env python\n\"``naginterfaces.numpy.opt.bounds_bobyqa_func`` Python Example.\"\n...\n\nAll examples may be executed sequentially by running ::\n\n  python -m naginterfaces.numpy.examples\n\nEvery example is executed using the ``doctest`` module, which will\nprint details of any unexpected output.\n\nRun ::\n\n  python -m naginterfaces.numpy.examples --help\n\nto see any additional usage.\n\nApplicability\n-------------\nThis package has been tested on the following systems:\n\n- 64-bit Windows (Windows 10)\n\n- 64-bit Linux (Fedora TextRequiredHere)\n\n- 64-bit Mac (macOS 10.11/El Capitan and TextRequiredHere)\n\nusing Pythons\n\n- Intel Python 2017.TextRequiredHere\n\n  - Python 2.7.TextRequiredHere (64-bit)\n\n  - Python 3.TextRequiredHere (64-bit)\n\n  both with NumPy\n\n  - Intel numpy 1.TextRequiredHEre enabled with Intel MKL TextRequiredHere\n\n- CPython\n\n  - Python 2.7.TextRequiredHere (64-bit)\n\n  - Python 3.TextRequiredHere (64-bit)\n\n  both with NumPy\n\n  - PyPI numpy 1.TextRequiredHere\n\nKnown Issues\n------------\nApplicability\n~~~~~~~~~~~~~\nOn Linux the only MKL-enabled NumPy which is known to be compatible with\n`naginterfaces` is that from the Intel Python distribution. A simple diagnostic\nof incompatibility is failure of the example ::\n\n  python -m naginterfaces.numpy.examples.lapacklin.dgesv_ex\n\n\nFurther Support\n---------------\nPlease see\n\nhttps://www.nag.com/content/nag-technical-support-service\n\nfor information about the NAG Technical Support Service, including\ndetails of the NAG Technical Support Service contact points.\nWe would also be delighted to receive your feedback on NAG's products\nand services.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://www.nag.com/",
    "keywords": "nag numerical algorithms",
    "license": "Other/Proprietary License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "naginterfaces",
    "platform": "Darwin",
    "project_url": "https://pypi.org/project/naginterfaces/",
    "release_url": "https://pypi.org/project/naginterfaces/26.1.0.0rc0.dev160069/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": ">=2.7, !=3.0, !=3.1, !=3.2, !=3.3, <4",
    "summary": "Python interfaces for the NAG algorithmic library, Mark 26.1",
    "version": "26.1.0.0rc0.dev160069"
  },
  "releases": {
    "26.1.0.0rc0.dev160069": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c732175e95ff8e0ed7e7cd95b41a3918",
          "sha256": "acffb40916890e113a2804a41ce56a114325da8cdd5598559b16947c0327d736"
        },
        "downloads": -1,
        "filename": "naginterfaces-26.1.0.0rc0.dev160069-py2.py3-none-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "c732175e95ff8e0ed7e7cd95b41a3918",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 398057,
        "upload_time": "2017-11-28T11:19:00",
        "url": "https://files.pythonhosted.org/packages/b8/50/21f9c0041d7fc042399fb8a69e36e4106a3fbc48b6db68d5eae8df2433b5/naginterfaces-26.1.0.0rc0.dev160069-py2.py3-none-manylinux1_x86_64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1cf79403a8ff1b01f93da5b28c8c8d30",
          "sha256": "92dfb25fd6e197460b43caf108c8b4edc0b065d9f6adca6e080edcec495806a9"
        },
        "downloads": -1,
        "filename": "naginterfaces-26.1.0.0rc0.dev160069.zip",
        "has_sig": false,
        "md5_digest": "1cf79403a8ff1b01f93da5b28c8c8d30",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 646822,
        "upload_time": "2017-11-28T11:19:03",
        "url": "https://files.pythonhosted.org/packages/fc/d5/11e5716612546025e97f79900ad5cac0a3a14bbd7849d259c2b8a99f7f64/naginterfaces-26.1.0.0rc0.dev160069.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c732175e95ff8e0ed7e7cd95b41a3918",
        "sha256": "acffb40916890e113a2804a41ce56a114325da8cdd5598559b16947c0327d736"
      },
      "downloads": -1,
      "filename": "naginterfaces-26.1.0.0rc0.dev160069-py2.py3-none-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "c732175e95ff8e0ed7e7cd95b41a3918",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 398057,
      "upload_time": "2017-11-28T11:19:00",
      "url": "https://files.pythonhosted.org/packages/b8/50/21f9c0041d7fc042399fb8a69e36e4106a3fbc48b6db68d5eae8df2433b5/naginterfaces-26.1.0.0rc0.dev160069-py2.py3-none-manylinux1_x86_64.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "1cf79403a8ff1b01f93da5b28c8c8d30",
        "sha256": "92dfb25fd6e197460b43caf108c8b4edc0b065d9f6adca6e080edcec495806a9"
      },
      "downloads": -1,
      "filename": "naginterfaces-26.1.0.0rc0.dev160069.zip",
      "has_sig": false,
      "md5_digest": "1cf79403a8ff1b01f93da5b28c8c8d30",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 646822,
      "upload_time": "2017-11-28T11:19:03",
      "url": "https://files.pythonhosted.org/packages/fc/d5/11e5716612546025e97f79900ad5cac0a3a14bbd7849d259c2b8a99f7f64/naginterfaces-26.1.0.0rc0.dev160069.zip"
    }
  ]
}