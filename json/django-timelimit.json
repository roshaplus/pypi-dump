{
  "info": {
    "author": "Erik van Zijst",
    "author_email": "erik.van.zijst@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Debuggers",
      "Topic :: System :: Monitoring",
      "Topic :: Utilities"
    ],
    "description": "Django Timelimit\n================\n\nDjango-timelimit allows you to wrap sections of Django templates with a\ntimeout to enforce an upper bound on render time. When the templates exceeds\nthis time, an alternative fragment is rendered instead::\n\n    {% load timelimit %}\n\n    {% timelimit 0.05 %}\n      {# perform a potentially very slow operation #}\n      <p>No timeout occurred</p>\n      {% sleep 0.5 %}\n    {% else %}\n      <p>Sorry, couldn't render the fragment in time.</p>\n    {% endtimelimit %}\n\n\nInstallation\n------------\n::\n\n    $ pip install django-timelimit\n\n\nReentrant\n---------\n\nDjango-timelimit is fully reentrant, which means that you can have nested\ntimeouts::\n\n    {% load timelimit %}\n\n    {% timelimit 0.10 %}\n      {# perform a potentially very slow operation #}\n\n        {% timelimit 0.05 %}\n          {# perform another potentially slow operation #}\n        {% else %}\n          <p>Sorry, couldn't render the nested fragment in time.</p>\n        {% endtimelimit %}\n\n      <p>No timeout occurred</p>\n    {% else %}\n      <p>Sorry, couldn't render the fragment in time.</p>\n    {% endtimelimit %}\n\nNested timeouts allow a large outer timeout to contain smaller timeouts. If the\ninner timeout is larger than the outer timeout, it is treated as a no-op.\n\n\nQuotas\n------\n\nInterruptingcow quotas (introduced in interruptingcow 0.7) are supported too,\nallowing you to share a single allocation of time between different timelimit\ntags::\n\n    {% load timelimit %}\n\n    {% for foo in bar %}\n      {% timelimit quota_var %}\n        ...\n      {% else %}\n        ...\n      {% endtimelimit %}\n    {% endif %}\n\nThis is useful in loops where you do not want the total render time to go up\nwith the number of iterations of the loop.\n\n\nCaveats\n-------\n\nDjango-timelimit is based on interruptingcow and so it shares its limitations.\nInterruptingcow uses ``signal(SIGALRM)`` to let the operating system interrupt\nprogram execution, meaning:\n\n1. Python signal handlers only apply to the main thread, so you cannot use this\n   from other threads (this also means you cannot use this in a multithreaded\n   webserver, or even ones that use a background thread for request handling\n   (Gunicorn works great).\n2. You must not use this in a program that uses ``SIGALRM`` itself (this\n   includes certain profilers)",
    "docs_url": null,
    "download_url": "https://bitbucket.org/evzijst/django-timelimit/downloads/django-timelimit-0.1.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/evzijst/django-timelimit",
    "keywords": "django debug watchdog timer timelimit timeout interrupt interruptingcow",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-timelimit",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-timelimit/",
    "release_url": "https://pypi.org/project/django-timelimit/0.1/",
    "requires_python": null,
    "summary": "A Django template tag used to enforce render time limits within templates.",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "814f0aad4a3dc1f1c119882a4fe28698",
          "sha256": "d798cabe449505e1ddff2eef4c38084c4dc983de59b501dd437fa75fa7bf4179"
        },
        "downloads": 2673,
        "filename": "django-timelimit-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "814f0aad4a3dc1f1c119882a4fe28698",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3761,
        "upload_time": "2013-09-10T22:47:47",
        "url": "https://files.pythonhosted.org/packages/e0/c2/cc534ead9b23f5cf4c1add26ae8edbcb3945cc6228d34a3180dac6f974a0/django-timelimit-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "814f0aad4a3dc1f1c119882a4fe28698",
        "sha256": "d798cabe449505e1ddff2eef4c38084c4dc983de59b501dd437fa75fa7bf4179"
      },
      "downloads": 2673,
      "filename": "django-timelimit-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "814f0aad4a3dc1f1c119882a4fe28698",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3761,
      "upload_time": "2013-09-10T22:47:47",
      "url": "https://files.pythonhosted.org/packages/e0/c2/cc534ead9b23f5cf4c1add26ae8edbcb3945cc6228d34a3180dac6f974a0/django-timelimit-0.1.tar.gz"
    }
  ]
}