{
  "info": {
    "author": "Aur\u00e9lien",
    "author_email": "aurelien.amilin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Programming Language :: Python"
    ],
    "description": "# clustaar.authorize\n\n[![Build Status](https://travis-ci.org/Clustaar/clustaar.authorize.svg?branch=master)](https://travis-ci.org/Clustaar/clustaar.authorize)\n[![Code Climate](https://codeclimate.com/github/Clustaar/clustaar.authorize/badges/gpa.svg)](https://codeclimate.com/github/Clustaar/clustaar.authorize)\n\n## Description\n\nA micro authorization system.\n\nDefinition of the access rules is up to you as it's too much specific of a project.\n\nIt can be used with **Falcon**, just use the `@authorize` decorator and be sure to provide an `ability` property on the request context.\n\n## Examples\n### Usage\n#### Creating authorizations\n\n```python\nfrom clustaar.authorize import Action, Ability, Authorizations\n\nclass AdminAuthorizations(Authorizations):\n    def __init__(self):\n        # Admins can do whatever they want\n        super().__init__(default_action=\"allow\")\n\nclass UserAuthorizations(Authorizations):\n    def can_create_project(self):\n        # Users can't create a project\n        return False\n\n    def can_view_project(self, id):\n        # Users can only see project with ID = 1\n        return id == \"1\"\n\nuser_ability = Ability(UserAuthorizations())\nadmin_ability = Ability(AdminAuthorizations())\ncreate_action = Action(name=\"create_project\")\nview_action = Action(name=\"view_project\")\n```\n\n#### Using authorizations\n\n```python\nadmin_ability.can(view_action, id=\"1\")  # => True\nadmin_ability.can(create_action)  # => True\nadmin_ability.authorize(view_action, id=1)  # => No exception raised\nadmin_ability.authorize(create_action)  # => No exception raised\n\nuser_ability.can(view_action, id=\"1\")  # => True\nuser_ability.can(view_action, id=\"2\")  # => False\nuser_ability.can(create_action) # => False\nuser_ability.authorize(view_action, id=\"1\")  # => No exception raised\nuser_ability.authorize(create_action)  # => Raises an Exception : Access denied for create_project ({})\n```\n\n#### Falcon\n\n```python\nimport falcon\nfrom clustaar.authorize.falcon import authorize\n\nclass AbilityInjectionMiddleware(object):\n    \"\"\"\n    Set the `ability` property from the request context.\n    It choses the right ability depending on the user roles (if admin ability\n    will be an AdminAbility, etc.)\n    \"\"\"\n    def process_request(self, request, *args):\n        # another middleware has injected current user in context\n        user = request.context.user\n        if user.has_role(\"admin\"):\n            authorizations = AdminAuthorizations()\n        else:\n            authorizations = UserAuthorizations(user)\n        request.context.ability = Ability(authorizations)\n\n\nclass ProjectsHandler(object):\n    @authorize(create_action)\n    def on_post(self, request, response):\n\t    pass\n\nclass ProjectHandler(object):\n    @authorize(view_action)\n    def on_get(self, request, response, id):\n\t    pass\n\napp = falcon.API(middlewares=(AbilityInjectionMiddleware(),))\napp.add_route(\"/projects\", ProjectsHandler())\napp.add_route(\"/projects/{id}\", ProjectHandler())\n```",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Clustaar/clustaar.authorize",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "clustaar.authorize",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/clustaar.authorize/",
    "release_url": "https://pypi.org/project/clustaar.authorize/0.1.1/",
    "requires_python": null,
    "summary": "A micro authorization system",
    "version": "0.1.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "85f5376e958210381f07f15d4a66323d",
          "sha256": "f197d28866f7f26b4d49004db6dda9c99091cbd98eb4cee4671e6abdbbd58d91"
        },
        "downloads": 30,
        "filename": "clustaar.authorize-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "85f5376e958210381f07f15d4a66323d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11888,
        "upload_time": "2017-03-15T21:13:56",
        "url": "https://files.pythonhosted.org/packages/88/88/183b03859edd799b95dfbf73e03c79687ce98758cc56273cfba4b190a169/clustaar.authorize-0.1.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b2fb0d58deac39287ec8856a52dbba36",
          "sha256": "5b538056cd25e1782dbdbf9eaeb35cf9987faaf10d82ae9ccd96077346531a11"
        },
        "downloads": 14,
        "filename": "clustaar.authorize-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b2fb0d58deac39287ec8856a52dbba36",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12675,
        "upload_time": "2017-03-22T10:39:01",
        "url": "https://files.pythonhosted.org/packages/75/55/b90d608e8306569b720cf3a742b298f5841337cba832b9b63dbaecb67bce/clustaar.authorize-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b2fb0d58deac39287ec8856a52dbba36",
        "sha256": "5b538056cd25e1782dbdbf9eaeb35cf9987faaf10d82ae9ccd96077346531a11"
      },
      "downloads": 14,
      "filename": "clustaar.authorize-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b2fb0d58deac39287ec8856a52dbba36",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 12675,
      "upload_time": "2017-03-22T10:39:01",
      "url": "https://files.pythonhosted.org/packages/75/55/b90d608e8306569b720cf3a742b298f5841337cba832b9b63dbaecb67bce/clustaar.authorize-0.1.1.tar.gz"
    }
  ]
}