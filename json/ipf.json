{
  "info": {
    "author": "Warren Smith",
    "author_email": "wsmith@tacc.utexas.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Topic :: System :: Monitoring"
    ],
    "description": "Overview\n--------\n\nThe Information Publishing Framework (IPF) is a generic framework for gathering and publishing\ninformation. This project is narrowly focused on those topics and does not include mechanisms to analyze or\nvisualize information. IPF grew out of work to publish information about TeraGrid compute resources according\nto the [GLUE 2 specification](http://www.ogf.org/documents/GFD.147.pdf) and that continues to be one of the\nmain goals of this project.\n\nIPF gathers and publishes information using simple workflows. These workflows are defined using JSON (see the\netc/workflows directory) and steps in the workflows are implemented as Python classes. Each step in the\nworkflow can require input Data, can produce output Data, and can publish Representations of Data. A typical\nworkflow consists of a number of information gathering steps and a few steps that publish Representations to\nfiles or to remote services (e.g. REST, messaging).\n\nWorkflow steps specify what Data they require and what Data they produce. This allows IPF to construct\nworkflows based on partial information - in the case where there are not steps that produce the same Data, an\nentire workflow can be constructed from a single publish step and its required input Data. At the other\nextreme, workflows can be exactly specified with specific steps identified and the outputs of steps bound to\nthe inputs of other steps. A typical workflow (e.g. GLUE 2) specifies what steps to include but lets IPF\nautomatically link outputs to inputs of these steps.\n\nWorkflows can run to completion relatively quickly or they can continuously run. The first type of workflow\ncan be used to run a few commands or look at status files and publish that information. The second type of\nworkflow can be used to monitor log files and publish entries written to those files. Workflows are typically\nrun periodically as cron jobs.  The program libexec/run_workflow.py is for executing workflows that complete\nquickly and the program libexec/run_workflow_daemon.py is used to manage long-running workflows. The daemon\n\n\nLicense\n----------\n\nThis software is licensed under Version 2.0 of the Apache License.\n\nInstallation\n--------------\n\nThis software can be configured using pip, setuptools, or if you are participating in `XSEDE <http://www.xsede.org>`_, via RPM packages.\n\npip Installation\n-------------------\n\nYou may need to install `pip` on your system. There is a package named `python-pip` that a system administrator can install or you can install it as a normal user by downloading and running the `get-pip.py <http://pip.readthedocs.org/en/latest/installing.html>`_ script.\n\nIf you are not a system administrator or you wish to install this software outside of the shared Python directories, you may wish to create a Python `virtual environment <http://virtualenv.readthedocs.org/en/latest/>`_. Don't forget to add the virtual environment to your shell environment before running pip.\n\nTo install via `pip`, you may need to install simply execute:\n\n    $ pip install ipf\n\neasy_install Installation\n-------------------------------\n\nYou can also install IPF via `easy_install` by:\n\n    $ easy_install ipf\n\nContact Information\n--------------------------\n\nThis software is maintained by `Warren Smith <https://bitbucket.org/wwsmith>`_ and you can contact him on bitbucket via a message. If you have problems with this software you are welcome to submit an `issue <https://bitbucket.org/wwsmith/ipf/issues>`_.\n\nAcknowledgements\n----------------\n\nThis work was supported by the TeraGrid, XSEDE, and FutureGrid projects under National Science Foundation\ngrants 0503697, 1053575, and 0910812.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/wwsmith/ipf",
    "keywords": "monitoring information gathering publishing",
    "license": "Apache",
    "maintainer": null,
    "maintainer_email": null,
    "name": "ipf",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/ipf/",
    "release_url": "https://pypi.org/project/ipf/1.0a8/",
    "requires_python": null,
    "summary": "The Information Publishing Framework",
    "version": "1.0a8"
  },
  "releases": {
    "1.0a8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d8d29ab6cc781474f05b64b0a148fe5a",
          "sha256": "596af373b2ae5b3edcd3a6e267729574a5fd99bbe5bf4b1d07660d3f48009ddc"
        },
        "downloads": 1937,
        "filename": "ipf-1.0a8.tar.gz",
        "has_sig": false,
        "md5_digest": "d8d29ab6cc781474f05b64b0a148fe5a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 93790,
        "upload_time": "2014-10-12T03:18:42",
        "url": "https://files.pythonhosted.org/packages/51/d6/e3baa9416c92b32a7ef09f3ef896bb5c823577f55bf4857e573e117edd96/ipf-1.0a8.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d8d29ab6cc781474f05b64b0a148fe5a",
        "sha256": "596af373b2ae5b3edcd3a6e267729574a5fd99bbe5bf4b1d07660d3f48009ddc"
      },
      "downloads": 1937,
      "filename": "ipf-1.0a8.tar.gz",
      "has_sig": false,
      "md5_digest": "d8d29ab6cc781474f05b64b0a148fe5a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 93790,
      "upload_time": "2014-10-12T03:18:42",
      "url": "https://files.pythonhosted.org/packages/51/d6/e3baa9416c92b32a7ef09f3ef896bb5c823577f55bf4857e573e117edd96/ipf-1.0a8.tar.gz"
    }
  ]
}