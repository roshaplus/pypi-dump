{
  "info": {
    "author": "Piper Merriam",
    "author_email": "pipermerriam@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# Ethereum Tester\n\n[![Join the chat at https://gitter.im/pipermerriam/ethereum-tester](https://badges.gitter.im/pipermerriam/ethereum-tester.svg)](https://gitter.im/pipermerriam/ethereum-tester?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status](https://travis-ci.org/pipermerriam/ethereum-tester.png)](https://travis-ci.org/pipermerriam/ethereum-tester)\n\n\nTools for testing ethereum based applications.\n\n\n## Installation\n\n```sh\npip install ethereum-tester\n```\n\n\n## Quick Start\n\n```python\n>>> from eth_tester import EthereumTester\n>>> t = EthereumTester()\n>>> t.get_accounts()\n('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e',\n '0xDCEceAF3fc5C0a63d195d69b1A90011B7B19650D',\n '0x598443F1880Ef585B21f1d7585Bd0577402861E5',\n '0x13cBB8D99C6C4e0f2728C7d72606e78A29C4E224',\n '0x77dB2BEBBA79Db42a978F896968f4afCE746ea1F',\n '0x24143873e0E0815fdCBcfFDbe09C979CbF9Ad013',\n '0x10A1c1CB95c92EC31D3f22C66Eef1d9f3F258c6B',\n '0xe0FC04FA2d34a66B779fd5CEe748268032a146c0',\n '0x90F0B1EBbbA1C1936aFF7AAf20a7878FF9e04B6c')\n>>> t.get_balance('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n1000000000000000000000000\n>>> t.send_transaction({'from': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1', 'to': '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e', 'gas': 21000, 'value': 1})\n'0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25'\n>>> t.get_transaction_by_hash(0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25')\n{'block_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n 'block_number': 0,\n 'data': '0x',\n 'from': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n 'gas': 21000,\n 'gas_price': 1,\n 'hash': '0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25',\n 'nonce': 0,\n 'r': 114833774457827084417823702749930473879683934597320921824765632039428214735160,\n 's': 52192522150044217242428968890330558187037131043598164958282684822175843828481,\n 'to': '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e',\n 'transaction_index': 0,\n 'v': 27,\n 'value': 1}\n\n>>> t.get_transaction_receipt('0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25')\n{'block_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n 'block_number': 0,\n 'contract_address': None,\n 'cumulative_gas_used': 21000,\n 'gas_used': 21000,\n 'logs': (),\n 'transaction_hash': '0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25',\n 'transaction_index': 0}\n```\n\n\n# Documentation\n\n## Input and output data formats\n\nThe ethereum tester library strictly enforces the following input formats and\ntypes.\n\n* Hexidecimal values **must** be text (not byte) strings.  The `0x` prefix is optional.\n* Any address which contains mixed-case alpha characters will be validated as a checksummed address as specified by [EIP-55](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md)\n* 32-byte hashes **must** be hexidecimal encoded.\n* Numeric values **must** be in their integer representation.\n\nSimilarly, ethereum tester ensures that return values conform to similar rules.\n\n* 32-byte hashes will be returned in their hexidecimal encoded representation.\n* Addresses will be returned in their hexidecimal representation and EIP55 checksummed.\n* Numeric values will be returned as integers.\n\n\n## Block Numbers\n<a id=\"block-numbers\"></a>\n\nAny `block_number` parameter will accept the following string values.\n\n* `'latest'`: for the latest mined block.\n* `'pending'`: for the current un-mined block.\n* `'earliest'`: for the genesis block.\n\n> Note: These **must** be text strings (not byte stringS)\n\n\n## `eth_tester.EthereumTester`\n\n### API\n\n### Instantiation\n\n* `eth_tester.EthereumTester(backend=None, validator=None, normalizer=None, auto_mine_transactions=True, fork_blocks=None)`\n\nThe `EthereumTester` object is the sole API entrypoint.  Instantiation of this\nobject accepts the following parameters.\n\n- `backend`: The chain backend being used.  See the [chain backends](#chain-backends)\n- `validator`: The validator to used.  See the [validators](#validation)\n- `normalizer`: The normalizer to used.  See the [normalizers](#normalization)\n- `auto_mine_transactions`: If *truthy* transactions will be automatically mined at the time they are submitted.  See [`enable_auto_mine_transactions`](#api-enable_auto_mine_transactions) and [`disable_auto_mine_transactions`](#api-disable_auto_mine_transactions).\n- `fork_blocks`: configures which block numbers the various network hard fork rules will be activated.  See [fork-rules](#fork-rules)\n\n\n```python\n>>> from eth_tester import EthereumTester\n>>> t = EthereumTester()\n>>> t\n<eth_tester.main.EthereumTester at 0x102255710>\n```\n\n\n### Fork Rules\n<a id=\"fork-rules\"></a>\n\nEthereum tester supports the following hard forks.\n\n- Homestead\n- DAO\n- Anti DOS\n- State Clearing\n\nBy default, all forks will be active at the genesis block (block 0).\n\nManual configuration and retrieval of fork rules can be done with the following\nAPI.\n\n* `EthereumTester.set_fork_block(fork_name, fork_block)`\n\nSets the fork rules for the fork denoted by `fork_name` to activate at `fork_block`.\n\n* `EthereumTester.get_fork_block(fork_name)`\n\nReturns the block number on which the named fork will activate.\n\n\nThe `fork_name` parameter must be one of the following strings.\n\n- `\"FORK_HOMESTEAD\"`\n- `\"FORK_DAO\"`\n- `\"FORK_ANTI_DOS\"`\n- `\"FORK_STATE_CLEANUP\"`\n\n\n### Time Travel\n<a id=\"time-travel\"></a>\n\nThe chain can only time travel forward in time.\n\n<a id=\"api-time_travel\"></a>\n* `EthereumTester.time_travel(timestamp)`\n\nThe `timestamp` must be an integer, strictly greater than the current timestamp\nof the latest block.  \n\n> Note: Time traveling will result in a new block being mined.\n\n\n### Mining\n\nManually mining blocks can be done with the following API.  The `coinbase`\nparameter of these methods **must** be a hexidecimal encoded address.\n\n<a id=\"api-mine_blocks\"></a>\n* `EthereumTester.mine_blocks(num_blocks=1, coinbase=None)`\n\nMines `num_blocks` new blocks, returning an iterable of the newly mined block hashes.\n\n\n<a id=\"api-mine_block\"></a>\n* `EthereumTester.mine_block(coinbase=None)`\n\nMines a single new block, returning the mined block's hash.\n\n\n<a id=\"api-auto_mine_transactions\"></a>\n#### Auto-mining transactions\n\nBy default all transactions are mined immediately.  This means that each transaction you send will result in a new block being mined, and that all blocks will only ever have at most a single transaction.  This behavior can be controlled with the following methods.\n\n<a id=\"api-enable_auto_mine_transactions\"></a>\n* `EthereumTester.enable_auto_mine_transactions()`\n\nTurns on auto-mining of transactions.\n\n<a id=\"api-disable_auto_mine_transactions\"></a>\n* `EthereumTester.disable_auto_mine_transactions()`\n\nTurns **off** auto-mining of transactions.\n\n\n### Accounts\n\nThe following API can be used to interact with account data.  The `account`\nparameter in these methods **must** be a hexidecimal encode address.\n\n<a id=\"api-get_accounts\"></a>\n* `EthereumTester.get_accounts()`\n\nReturns an iterable of the accounts that the tester knows about.  All accounts\nin this list will be EIP55 checksummed.\n\n```python\n>>> t.get_accounts()\n('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e',\n ...\n '0x90F0B1EBbbA1C1936aFF7AAf20a7878FF9e04B6c')\n```\n\n\n<a id=\"api-get_balance\"></a>\n* `EthereumTester.get_balance(account) -> integer`\n\nReturns the balance, in wei, for the provided account.\n\n```python\n>>> t.get_balance('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n1000004999999999999999999\n```\n\n\n<a id=\"api-get_nonce\"></a>\n* `EthereumTester.get_nonce(account) -> integer`\n\nReturns the nonce for the provided account.\n\n```python\n>>> t.get_nonce('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n1\n```\n\n<a id=\"api-get_code\"></a>\n* `EthereumTester.get_code(account) -> hex string`\n\nReturns the code for the given account.\n\n```python\n>>> t.get_code('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n\"0x\"\n```\n\n\n### Blocks, Transactions, and Receipts\n\n<a id=\"api-get_transaction_by_hash\"></a>\n* `EthereumTester.get_transaction_by_hash(transaction_hash) -> transaction-object`\n\nReturns the transaction for the given hash, raising a\n[`TransactionNotFound`](#errors-TransactionNotFound) exception if the\ntransaction cannot be found.\n\n```python\n>>> t.get_transaction_by_hash('0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25')\n{'block_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n 'block_number': 0,\n 'hash': '0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25',\n 'transaction_index': 0,\n 'from': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n 'to': '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e',\n 'value': 1,\n 'gas': 21000,\n 'gas_price': 1,\n 'nonce': 0,\n 'data': '0x',\n 'v': 27,\n 'r': 114833774457827084417823702749930473879683934597320921824765632039428214735160,\n 's': 52192522150044217242428968890330558187037131043598164958282684822175843828481}\n```\n\n> Note: For unmined transaction, `transaction_index`, `block_number` and `block_hash` will all be `None`.\n\n\n<a id=\"api-get_block_by_numbera>\n* `EthereumTester.get_block_by_number(block_number, full_transactions=False) -> block-object`\n\nReturns the block for the given `block_number`.  See [block\nnumbers](#block-numbers) for named block numbers you can use.  If\n`full_transactions` is truthy, then the transactions array will be populated\nwith full transaction objects as opposed to their hashes.\n\nRaises [`BlockNotFound`](#errors-BlockNotFound) if a block for the given number\ncannot be found.\n\n```python\n>>> t.get_block_by_numbers(1)\n{'difficulty': 131072,\n 'extra_data': '0x0000000000000000000000000000000000000000000000000000000000000000',\n 'gas_limit': 999023468,\n 'gas_used': 0,\n 'hash': '0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd',\n 'logs_bloom': 0,\n 'miner': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n 'nonce': '0x0000000000000000',\n 'number': 1,\n 'parent_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n 'sha3_uncles': '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n 'size': 472,\n 'state_root': '0xbd92123803c9e71018617ce3dc6cbbdf130973bdbd0e14ff340c57c8a835b74b',\n 'timestamp': 1410973360,\n 'total_difficulty': 262144,\n 'transactions': (),\n 'transactions_root': '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n 'uncles': ()}\n```\n\n\n<a id=\"api-get_block_by_hash\"></a>\n* `EthereumTester.get_block_by_hash(block_hash, full_transactions=True) -> block-object`\n\nReturns the block for the given `block_hash`.  The `full_transactions`\nparameter behaves the same as in\n[`get_block_by_number`](#api-get_block_by_number).\n\nRaises [`BlockNotFound`](#errors-BlockNotFound) if a block for the given hash\ncannot be found.\n\n```python\n>>> t.get_block_by_hash('0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd')\n{'difficulty': 131072,\n 'extra_data': '0x0000000000000000000000000000000000000000000000000000000000000000',\n 'gas_limit': 999023468,\n 'gas_used': 0,\n 'hash': '0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd',\n 'logs_bloom': 0,\n 'miner': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n 'nonce': '0x0000000000000000',\n 'number': 1,\n 'parent_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n 'sha3_uncles': '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n 'size': 472,\n 'state_root': '0xbd92123803c9e71018617ce3dc6cbbdf130973bdbd0e14ff340c57c8a835b74b',\n 'timestamp': 1410973360,\n 'total_difficulty': 262144,\n 'transactions': (),\n 'transactions_root': '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n 'uncles': ()}\n```\n\n<a id=\"api-get_transaction_receipt\"></a>\n* `EthereumTester.get_transaction_receipt(transaction_hash)`\n\nReturns the receipt for the given `transaction_hash`, raising\n[`TransactionNotFound`](#errors-TransactionNotFound) if no transaction can be\nfound for the given hash.\n\n\n```python\n>>> t.get_transaction_receipt('0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b')\n {'block_hash': '0x878f779d8bb25b25fb78fc16b8d64d70a5961310ef1689571aec632e9424290c',\n 'block_number': 2,\n 'contract_address': None,\n 'cumulative_gas_used': 23154,\n 'gas_used': 23154,\n 'logs': ({'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\n   'block_hash': '0x878f779d8bb25b25fb78fc16b8d64d70a5961310ef1689571aec632e9424290c',\n   'block_number': 2,\n   'data': '0x',\n   'log_index': 0,\n   'topics': (\n    '0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n    '0x0000000000000000000000000000000000000000000000000000000000003039'),\n   'transaction_hash': '0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b',\n   'transaction_index': 0,\n   'type': 'mined'},),\n 'transaction_hash': '0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b',\n 'transaction_index': 0}\n```\n\n- Receipts for unmined transactions will have all of `block_hash`, `block_number` and `transaction_index` set to `None`.  \n- Receipts for transactions which create a contract will have the created contract address in the `contract_address` field.\n\n\n### Transaction Sending\n\nA transaction is a formatted as a dictionary with the following keys and\nvalues.\n\n* `from`: The address of the account sending the transaction (hexidecimal string).\n* `to`: The address of the account the transaction is being sent to.  Empty string should be used to trigger contract creation (hexidecimal string).\n* `gas`: Sets the gas limit for transaction execution (integer).\n* `gas_price`: Sets the price per unit of gas in wei that will be paid for transaction execution (integer).\n* `value`: The amount of ether in wei that should be sent with the transaction (integer).\n* `data`: The data for the transaction (hexidecimal string).\n\n\n#### Methods\n\n<a id=\"api-send_transaction\"></a>\n* `EthereumTester.send_transaction(transaction) -> transaction_hash`\n\nSends the provided `transaction` object, returning the `transaction_hash` for\nthe sent transaction.\n\n\n<a id=\"api-call\"></a>\n* `EthereumTester.call(transaction, block_number='latest')`\n\nExecutes the provided `transaction` object at the evm state from the block\ndenoted by the `block_number` parameter, returning the resulting bytes return\nvalue from the evm.\n\n<a id=\"api-estimate_gas\"></a>\n* `EthereumTester.estimate_gas(transaction)`\n\nExecutes the provided `transaction` object, measuring and returning the gas\nconsumption.\n\n\n### Logs and Filters\n\n<a id=\"api-create_block_filter\"></a>\n* `EthereumTester.create_block_filter() -> integer`\n\nCreates a new filter for newly mined blocks.  Returns the `filter_id` which can\nbe used to retrieve the block hashes for the mined blocks.\n\n```python\n>>> filter_id = t.create_block_filter()\n>>> filter_id = t.create_block_filter()\n>>> t.mine_blocks(3)\n>>> t.get_only_filter_changes(filter_id)\n('0x07004287f82c1a7ab15d7b8baa03ac14d7e9167ab74e47e1dc4bd2213dd18431',\n '0x5e3222c506585e1202da08c7231afdc5e472c777c245b822f44f141d335c744a',\n '0x4051c3ba3dcca95da5db1be38e44f5b47fd1a855ba522123e3254fe3f8e271ea')\n>>> t.mine_blocks(2)\n>>> t.get_only_filter_changes(filter_id)\n('0x6649c3a7cb3c7ede3a4fd10ae9dd63775eccdafe39ace5f5a9ae81d360089fba',\n '0x04890a08bca0ed2f1496eb29c5dc7aa66014c85377c6d9d9c2c315f85204b39c')\n>>> t.get_all_filter_logs(filter_id)\n('0x07004287f82c1a7ab15d7b8baa03ac14d7e9167ab74e47e1dc4bd2213dd18431',\n '0x5e3222c506585e1202da08c7231afdc5e472c777c245b822f44f141d335c744a',\n '0x4051c3ba3dcca95da5db1be38e44f5b47fd1a855ba522123e3254fe3f8e271ea',\n '0x6649c3a7cb3c7ede3a4fd10ae9dd63775eccdafe39ace5f5a9ae81d360089fba',\n '0x04890a08bca0ed2f1496eb29c5dc7aa66014c85377c6d9d9c2c315f85204b39c')\n```\n\n<a id=\"api-create_pending_transaction_filter\"></a>\n* `EthereumTester.create_pending_transaction_filter() -> integer`\n\nCreates a new filter for pending transactions.  Returns the `filter_id` which\ncan be used to retrieve the transaction hashes for the pending transactions.\n\n```python\n>>> filter_id = t.create_pending_transaction_filter()\n>>> t.send_transaction({...})\n'0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566'\n>>> t.send_transaction({...})\n'0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505'\n>>> t.get_only_filter_changes(filter_id)\n('0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566',\n '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505')\n>>> t.send_transaction({...})\n'0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a'\n>>> t.get_only_filter_changes(filter_id)\n('0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a',)\n>>> t.get_all_filter_logs(filter_id)\n('0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566',\n '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505',\n '0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a')\n```\n\n<a id=\"api-create_log_filter\"></a>\n* `EthereumTester.create_log_filter(from_block=None, to_block=None, address=None, topics=None) -> integer`\n\nCreates a new filter for logs produced by transactions.  The parameters for\nthis function can be used to filter the log entries.  \n\n```python\n>>> filter_id = t.create_log_filter()\n>>> t.send_transaction({...})  # something that produces a log entry\n'0x728bf75fc7d23845f328d2223df7fe9cafc6e7d23792457b625d5b60d2b22b7c'\n>>> t.send_transaction({...})  # something that produces a log entry\n'0x63f5b381ffd09940ce22c45a3f4e163bd743851cb6b4f43771fbf0b3c14b2f8a'\n>>> t.get_only_filter_changes(filter_id)\n({'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\n  'block_hash': '0x68c0f318388003b652eae334efbed8bd345c469bd0ca77469183fc9693c23e13',\n  'block_number': 11,\n  'data': '0x',\n  'log_index': 0,\n  'topics': ('0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n   '0x0000000000000000000000000000000000000000000000000000000000003039'),\n  'transaction_hash': '0x728bf75fc7d23845f328d2223df7fe9cafc6e7d23792457b625d5b60d2b22b7c',\n  'transaction_index': 0,\n  'type': 'mined'},\n {'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\n  'block_hash': '0x07d7e46be6f9ba53ecd4323fb99ec656e652c4b14f4b8e8a244ee7f997464725',\n  'block_number': 12,\n  'data': '0x',\n  'log_index': 0,\n  'topics': ('0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n   '0x0000000000000000000000000000000000000000000000000000000000010932'),\n  'transaction_hash': '0x63f5b381ffd09940ce22c45a3f4e163bd743851cb6b4f43771fbf0b3c14b2f8a',\n  'transaction_index': 0,\n  'type': 'mined'})\n```\n\nSee [the filtering guide](#guide-filtering) for detailed information on how to use filters.\n\n<a id=\"api-delete_filter\"></a>\n* `EthereumTester.delete_filter(filter_id)`\n\nRemoves the filter for the provide `filter_id`.  If no filter is found for the\ngiven `filter_id`, raises [`FilterNotFound`](#errors-FilterNotFound).\n\n\n<a id=\"api-get_only_filter_changes\"></a>\n* `EthereumTester.get_only_filter_changes(filter_id) -> transaction_hash or block_hash or log_entry`\n\nReturns all new values for the provided `filter_id` that have not previously\nbeen returned through this API.  Raises\n[`FilterNotFound`](#errors-FilterNotFound) if no filter is found for the given\n`filter_id`.\n\n<a id=\"api-get_only_filter_changes\"></a>\n* `EthereumTester.get_all_filter_logs(filter_id) -> transaction_hash or block_hash or log_entry`\n\nReturns all values for the provided `filter_id`. Raises\n[`FilterNotFound`](#errors-FilterNotFound) if no filter is found for the given\n`filter_id`.\n\n\n### Snapshots and Resetting\n\n<a id=\"api-take_snapshot\"></a>\n* `EthereumTester.take_snapshot() -> snapshot_id`\n\nTakes a snapshot of the current chain state and returns the snapshot id.\n\n\n<a id=\"api-revert_to_snapshot\"></a>\n* `EthereumTester.revert_to_snapshot(snapshot_id)`\n\nReverts the chain to the chain state associated with the given `snapshot_id`.\nRaises [`SnapshotNotFound`](#errors-SnapshotNotFound) if no snapshot is know\nfor the given id.\n\n### Errors and Exceptions\n\n<a id=\"errors-TransactionNotFound\"></a>\n* `eth_tester.exceptions.TransactionNotFound`\n\nRaised in cases where a transaction cannot be found for the provided transaction hash.\n\n\n<a id=\"errors-BlockNotFound\"></a>\n* `eth_tester.exceptions.BlockNotFound`\n\nRaised in cases where a block cannot be found for either a provided number or\nhash.\n\n\n<a id=\"errors-FilterNotFound\"></a>\n* `eth_tester.exceptions.FilterNotFound`\n\nRaised in cases where a filter cannot be found for the provided filter id.\n\n\n<a id=\"errors-SnapshotNotFound\"></a>\n* `eth_tester.exceptions.SnapshotNotFound`\n\nRaised in cases where a snapshot cannot be found for the provided snapshot id.\n\n\n## Backends\n\nEthereum tester is written using a pluggable backend system.\n\n### Backend Dependencies\n\nEthereum tester does not install any of the dependencies needed to use the\nvarious backends by default.  You can however install ethereum tester with the\nnecessary dependencies using the following method.\n\n```bash\n$ pip install ethereum-tester[pyethereum16]\n```\n\n### Selecting a Backend\n\nYou can select which backend in a few different ways.\n\nThe most direct way is to manually pass in the backend instance you wish to\nuse.\n\n```python\n>>> from eth_tester import EthereumTester\n>>> from eth_tester.backends.pyethereum import PyEthereum16Backend\n>>> t = EthereumTester(backend=PyEthereum16Backend())\n```\n\nEthereum tester also supports configuration using the environment variable\n`ETHEREUM_TESTER_CHAIN_BACKEND`.  This should be set to the import path for the\nbackend class you wish to use.\n\n### Available Backends\n\nEthereum tester can be used with the following backends.\n\n* PyEthereum 1.6.x (default)\n\nThe following backends on the roadmap to be developed.\n\n* PyEthereum 2.0.x (under development)\n* PyEVM (experimental)\n\n#### PyEthereum 1.6.x\n\nTODO\n\n#### PyEthereum 2.0.x (under development)\n\n> Under development\n\n#### PyEVM (experimental)\n\n> Under development\n\n### Implementing Custom Backends\n\nThe base class `eth_tester.backends.base.BaseChainBackend` is the recommended\nbase class to begin with if you wish to write your own backend.  In order for\nethereum tester to operate correctly, your backend **must** be able to do all\nof the following.\n\nTODO\n\n\n## Data Formats\n\n### Canonical Formats\n\nThe canonical format is intended for low level handling by backends.\n\n* 32 byte hashes: `bytes` of length 32\n* Arbitrary length strings: `bytes`\n* Addresses: `bytes` of length 20\n* Integers: `int` (or `long` in python 2.7)\n* Array Types: `tuple`\n\n### Normal Formats\n\nThe normal format is intended for use by end users.\n\n* 32 byte hashes: `0x` prefixed hexidecimal encoded text strings (not byte strings)\n* Arbitrary length strings: `0x` prefixed hexidecimal encoded text strings (not byte strings)\n* Addresses: `0x` prefixed and EIP55 checksummed hexidecimal encoded text strings (not byte strings)\n* Integers: `int` (or `long` in python 2.7)\n* Array Types: `tuple`\n\n\n## Normalization and Validation\n\n> Beware! Here there be dragons...  This section of the documentation is only\n> relevant if you intend to build tooling on top of this library.\n\nThe ethereum tester provides strong guarantees that backends can be swapped out\nseamlessly without effecting the data formats of both the input arguments and\nreturn values.  This is accomplished using a two step process of strict\n*normalization* and *validation*.\n\nAll inputs to the methods of the `EthereumTester` are first validated then\nnormalized to a *canonical* format.  Return values are put through this process\nas well, first validating the data returned by the backend, and then\nnormalizing it from the *canonical* format to the *normal* form before being\nreturned.\n\n\n<a id=\"normalization\"></a>\n### Normalization\n\nThe `EthereumTester` delegates normalization to whatever `normalizer` was\npassed in during instantiation.  If no value was provided, the default\nnormalizer will be used from\n`eth_tester.normalization.default.DefaultNormalizer`.\n\nThe specifics of this object are beyong the scope of this document.\n\n<a id=\"validation\"></a>\n### Validation\n\nThe `EthereumTester` delegates validation to whatever `validator` was\npassed in during instantiation.  If no value was provided, the default\nvalidator will be used from\n`eth_tester.validation.default.DefaultValidator`.\n\nThe specifics of this object are beyong the scope of this document.\n\n\n# Use with Web3.py\n\nWhile the `ethereum-tester` library can be used on its own it can also be used\nwith the [`web3.py`](https://github.com/pipermerriam/web3.py) library.  The\n`ethereum-tester` library comes with the provider class\n`eth_tester.web3.EthereumTesterProvider`.  You can use it like this:\n\n```python\n>>> from eth_tester import EthereumTester\n>>> from eth_tester.web3 import EthereumTesterProvider\n>>> from web3 import Web3\n>>> eth_tester = EthereumTester()\n>>> provider = EthereumTesterProvider(eth_tester)\n>>> web3 = Web3(provider)\n```\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pipermerriam/ethereum-tester",
    "keywords": "ethereum",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ethereum-tester",
    "platform": "",
    "project_url": "https://pypi.org/project/ethereum-tester/",
    "release_url": "https://pypi.org/project/ethereum-tester/0.1.0a5/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Tools for testing Ethereum applications.",
    "version": "0.1.0a5"
  },
  "releases": {
    "0.1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f4c0e5203b712294a826f9997b461bef",
          "sha256": "bb02de90b122b961155b6b15a7e81a1761e4adf9f5619afba16b91a2fd6f529b"
        },
        "downloads": 0,
        "filename": "ethereum_tester-0.1.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4c0e5203b712294a826f9997b461bef",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 3465,
        "upload_time": "2017-07-05T22:00:51",
        "url": "https://files.pythonhosted.org/packages/97/25/0a4fbf70e2d1075005a1a50c6d72a533e25ffe0c88fc4c7f0fcb05f47406/ethereum_tester-0.1.0a1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4b2aaa9eda23a770d9ab9201ecf5d78b",
          "sha256": "40dac8b5dfdaa4b83b92a149b3d07914310929bd0989791d83a631377feffa6d"
        },
        "downloads": 0,
        "filename": "ethereum-tester-0.1.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "4b2aaa9eda23a770d9ab9201ecf5d78b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2384,
        "upload_time": "2017-07-05T22:00:46",
        "url": "https://files.pythonhosted.org/packages/c0/7a/bfaf686c72cabc2108beb92c90de1752208461b5af25853ed1785a1b1322/ethereum-tester-0.1.0a1.tar.gz"
      }
    ],
    "0.1.0a2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "59abead405825db66767c85c491b8f07",
          "sha256": "4fce659a010cec27674d7c8d7085e88cc6375aa70579cc707b1a5d4d790faa29"
        },
        "downloads": 0,
        "filename": "ethereum_tester-0.1.0a2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "59abead405825db66767c85c491b8f07",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 48766,
        "upload_time": "2017-08-03T06:12:46",
        "url": "https://files.pythonhosted.org/packages/3a/27/75792885d6a707228a5407f5630d4e091408524a607c9c04a9cc39165ebc/ethereum_tester-0.1.0a2-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9ea14681d5e7098c3021c230b667f397",
          "sha256": "325a02de216c934e6957b1b75257aed523c9b63148775b94c110c56d88594125"
        },
        "downloads": 0,
        "filename": "ethereum-tester-0.1.0a2.tar.gz",
        "has_sig": false,
        "md5_digest": "9ea14681d5e7098c3021c230b667f397",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39159,
        "upload_time": "2017-08-03T06:12:25",
        "url": "https://files.pythonhosted.org/packages/f5/d1/2411908f13bb7de601822ee7ecb5dab53e71faa605a8e29bfabc6fcbeb09/ethereum-tester-0.1.0a2.tar.gz"
      }
    ],
    "0.1.0a3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b3ff4f8edd1a47c0ad2075c89916e5ed",
          "sha256": "48ba007a07ca9a70a421149503d7a2c8cfa9a8798c3d04e2d0a8d86bb4306bde"
        },
        "downloads": 0,
        "filename": "ethereum_tester-0.1.0a3-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3ff4f8edd1a47c0ad2075c89916e5ed",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 48836,
        "upload_time": "2017-08-03T06:16:47",
        "url": "https://files.pythonhosted.org/packages/f9/3b/55a38a1dcea4061fd1f7b9061c90783e7767d046439b68679b89b8a1c080/ethereum_tester-0.1.0a3-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ad9a99113fdf2f1ba6ef04ec84c2c5ee",
          "sha256": "12015f01c5ed10a44900ff2f7efe71b214d0fd35940c98207c95d9e1587987ae"
        },
        "downloads": 0,
        "filename": "ethereum-tester-0.1.0a3.tar.gz",
        "has_sig": false,
        "md5_digest": "ad9a99113fdf2f1ba6ef04ec84c2c5ee",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39223,
        "upload_time": "2017-08-03T06:16:25",
        "url": "https://files.pythonhosted.org/packages/79/a5/5c33d9d23b190867f36b0e0309c0e87007865d7922069675599662fec6b4/ethereum-tester-0.1.0a3.tar.gz"
      }
    ],
    "0.1.0a4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "34f1245cee6c1dc54537577302df1ff1",
          "sha256": "9c7476326a4db801d8548f4152530d780f36992368b7303a0534db32b972c8a4"
        },
        "downloads": 0,
        "filename": "ethereum_tester-0.1.0a4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "34f1245cee6c1dc54537577302df1ff1",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 58598,
        "upload_time": "2017-09-05T22:09:09",
        "url": "https://files.pythonhosted.org/packages/c9/a8/a40c628ccbe65944da1d389c43ce04f84d3a56e956c07dd20688062bce91/ethereum_tester-0.1.0a4-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "17bb471df1b7ab9af3f5278d3f5e8281",
          "sha256": "856ac6c6eede9d56f06d50143312104e391838bc8d9162455d9cc76498d8fb8d"
        },
        "downloads": 0,
        "filename": "ethereum-tester-0.1.0a4.tar.gz",
        "has_sig": false,
        "md5_digest": "17bb471df1b7ab9af3f5278d3f5e8281",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45981,
        "upload_time": "2017-09-05T22:08:59",
        "url": "https://files.pythonhosted.org/packages/c4/cf/0f4b9119833f902f80870af16ed47ad419a1f52e5116407c20915b6e04fe/ethereum-tester-0.1.0a4.tar.gz"
      }
    ],
    "0.1.0a5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0460a611b773b7b3bebc382b5869566d",
          "sha256": "a6220f22fb409d6d4755d11b9be25ffe65f609c4dabb392e8fcb68659a3e09db"
        },
        "downloads": 0,
        "filename": "ethereum_tester-0.1.0a5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0460a611b773b7b3bebc382b5869566d",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 55640,
        "upload_time": "2017-09-07T03:22:49",
        "url": "https://files.pythonhosted.org/packages/99/56/9a0f6db941300687aae2c4cd35180653f4732c9805384a07abd2a714495b/ethereum_tester-0.1.0a5-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a40739e7bd327887a9aa29c55635c72e",
          "sha256": "296a575ac43ab3c4a6907e452155da351f03ecdcf1a883bd5a29569142c5e39f"
        },
        "downloads": 0,
        "filename": "ethereum-tester-0.1.0a5.tar.gz",
        "has_sig": false,
        "md5_digest": "a40739e7bd327887a9aa29c55635c72e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 44008,
        "upload_time": "2017-09-07T03:22:39",
        "url": "https://files.pythonhosted.org/packages/21/01/150a96ed722e918a5e413814188551ddef55c380879b7e3df5aa6304f20c/ethereum-tester-0.1.0a5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0460a611b773b7b3bebc382b5869566d",
        "sha256": "a6220f22fb409d6d4755d11b9be25ffe65f609c4dabb392e8fcb68659a3e09db"
      },
      "downloads": 0,
      "filename": "ethereum_tester-0.1.0a5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0460a611b773b7b3bebc382b5869566d",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 55640,
      "upload_time": "2017-09-07T03:22:49",
      "url": "https://files.pythonhosted.org/packages/99/56/9a0f6db941300687aae2c4cd35180653f4732c9805384a07abd2a714495b/ethereum_tester-0.1.0a5-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "a40739e7bd327887a9aa29c55635c72e",
        "sha256": "296a575ac43ab3c4a6907e452155da351f03ecdcf1a883bd5a29569142c5e39f"
      },
      "downloads": 0,
      "filename": "ethereum-tester-0.1.0a5.tar.gz",
      "has_sig": false,
      "md5_digest": "a40739e7bd327887a9aa29c55635c72e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 44008,
      "upload_time": "2017-09-07T03:22:39",
      "url": "https://files.pythonhosted.org/packages/21/01/150a96ed722e918a5e413814188551ddef55c380879b7e3df5aa6304f20c/ethereum-tester-0.1.0a5.tar.gz"
    }
  ]
}