{
  "info": {
    "author": "Valentin Berlier",
    "author_email": "berlier.v@mail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "nbtlib\n======\n\n|Build Status| |PyPI Version| |Python Version|\n\nA python library to read and edit `nbt data <http://wiki.vg/NBT>`__.\nRequires python 3.6.\n\n**Features**\n\n- Create, read and edit nbt files\n- Supports gzipped and uncompressed files\n- Parse and serialize raw nbt data\n- Define tag schemas that automatically enforce predefined tag types\n- Convert nbt between binary form and literal notation\n- Includes a CLI to quickly perform read/write/merge operations\n\nInstallation\n------------\n\nThe package can be installed with ``pip``.\n\n.. code::\n\n    $ pip install nbtlib\n\nBasic usage\n-----------\n\nThe following examples will give you a very basic overview of what you\ncan do. For more advanced examples, check out the\n\"`Usage <https://github.com/vberlier/nbtlib/blob/master/docs/Usage.ipynb>`__\"\nnotebook in the docs folder.\n\nReading files\n~~~~~~~~~~~~~\n\nReading files can be done directly with the ``load()`` function. The\n``root`` property contains the root nbt tag. Every nbt tag inherits from\nits python counterpart so you can use all the usual builtin operations\non nbt tags.\n\n.. code:: py\n\n    from nbtlib import nbt\n\n    nbt_file = nbt.load('bigtest.nbt')\n    assert nbt_file.root['intTest'] == 2147483647\n\nEditing files\n~~~~~~~~~~~~~\n\nYou can use nbt files as context managers in order to save modifications\nautomatically at the end of the ``with`` block.\n\n.. code:: py\n\n    from nbtlib import nbt\n    from nbtlib.tag import *\n\n    with nbt.load('demo.nbt') as demo:\n        demo.root['counter'] = Int(demo.root['counter'] + 1)\n\nYou can also use the ``save()`` method.\n\n.. code:: py\n\n    from nbtlib import nbt\n    from nbtlib.tag import *\n\n    demo = nbt.load('demo.nbt')\n    demo.root['counter'] = Int(demo.root['counter'] + 1)\n    demo.save()\n\nFor more details check out the \"`Usage <https://github.com/vberlier/nbtlib/blob/master/docs/Usage.ipynb>`__\"\nnotebook.\n\nUsing schemas\n~~~~~~~~~~~~~\n\nA schema lets you create compound tags that enforce a specific tag type\nfor any given key.\n\n.. code:: py\n\n    from nbtlib import schema\n    from nbtlib.tag import *\n\n    MySchema = schema('MySchema', {\n        'foo': String,\n        'bar': Short\n    })\n\n    my_object = MySchema({'foo': 'hello world', 'bar': 21})\n    assert isinstance(my_object['foo'], String)\n\nNbt literals\n~~~~~~~~~~~~\n\n``nbtlib`` also defines utilities to deal with literal nbt data. For\ninstance, you can parse nbt literals using the ``parse_nbt()`` function.\n\n.. code:: py\n\n    from nbtlib import parse_nbt\n    from nbtlib.tag import *\n\n    my_compound = parse_nbt('{foo:[hello,world],bar:[I;1,2,3]}')\n    assert my_compound == Compound({\n        'foo': List[String](['hello', 'world']),\n        'bar': IntArray([1, 2, 3])\n    })\n\nCommand-line interface\n----------------------\n\nThe package comes with a small CLI that makes it easy to quickly perform\nbasic operations on nbt files.\n\n.. code::\n\n    $ nbt --help\n    usage: nbt [-h] (-r | -w <nbt> | -m <nbt>) [--plain] <file>\n\n    Perform basic operations on nbt files.\n\n    positional arguments:\n      <file>      the target file\n\n    optional arguments:\n      -h, --help  show this help message and exit\n      -r          read nbt data from a file\n      -w <nbt>    write nbt to a file\n      -m <nbt>    merge nbt into an nbt file\n      --plain     don't use gzip compression\n\nRead nbt data\n~~~~~~~~~~~~~\n\nYou can read nbt files by using the ``-r`` option. This will print the\nliteral notation of the binary nbt data.\n\n.. code::\n\n    $ nbt -r demo.nbt\n    {counter:42}\n\nYou can use the following command if you want to save the output into a\nfile.\n\n.. code::\n\n    $ nbt -r my_file.nbt > my_file.txt\n\nWrite nbt data\n~~~~~~~~~~~~~~\n\nYou can write nbt data to a file by using the ``-w`` option. This will\nconvert the literal nbt notation to its binary form and save it in the\nspecified file.\n\n.. code::\n\n    $ nbt -w '{foo:[1,2,3],bar:{hello:[B;1b,1b,0b,1b]}}' my_file.nbt\n\nThe file will be created if it doesn't already exist.\n\nMerge nbt data\n~~~~~~~~~~~~~~\n\nFinally, you can merge some nbt data into an already existing file by\nusing the ``-m`` option. This will recursively update the file with\nthe values parsed from the literal argument.\n\n.. code::\n\n    $ nbt -m '{bar:{\"new key\":56f}}' my_file.nbt\n\nYou can check the result by using the ``-r`` option.\n\n.. code::\n\n    $ nbt -r my_file.nbt\n    {foo:[1,2,3],bar:{hello:[B;1b,1b,0b,1b],\"new key\":56.0f}}\n\nHere, the compound values that aren't present in the input literal are\nleft untouched. Using the ``-w`` option instead of ``-m`` would\noverwrite the whole file.\n\nCompression\n~~~~~~~~~~~\n\nBy default, the CLI will assume that you're working with gzipped nbt\nfiles. If you want to read, write or merge uncompressed nbt files, you\ncan use the ``--plain`` option.\n\n**Reading**\n\n.. code::\n\n    $ nbt -r my_file.nbt --plain\n    {name:\"Reading from an uncompressed file\"}\n\n**Writing**\n\n.. code::\n\n    $ nbt -w '{name:\"Writing in an uncompressed file\"} my_file.nbt --plain\n\n**Merging**\n\n.. code::\n\n    $ nbt -m '{name:\"Merging in an uncompressed file\"} my_file.nbt --plain\n\nContributing\n------------\n\nContributions are welcome. Unit tests are built with ``pytest``. You can\nrun the test suite with:\n\n.. code::\n\n    $ python -m pytest tests\n\n----\n\nLicense: `MIT <https://github.com/vberlier/nbtlib/blob/master/LICENSE>`__\n\n.. |Build Status| image:: https://travis-ci.org/vberlier/nbtlib.svg?branch=master\n   :target: https://travis-ci.org/vberlier/nbtlib\n\n.. |PyPI Version| image:: https://img.shields.io/pypi/v/nbtlib.svg\n   :target: https://pypi.python.org/pypi/nbtlib\n\n.. |Python Version| image:: https://img.shields.io/pypi/pyversions/nbtlib.svg\n   :target: https://pypi.python.org/pypi/nbtlib\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/vberlier/nbtlib",
    "keywords": "nbt schema minecraft package library parser reader module",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nbtlib",
    "platform": "any",
    "project_url": "https://pypi.org/project/nbtlib/",
    "release_url": "https://pypi.org/project/nbtlib/0.1.13/",
    "requires_dist": [],
    "requires_python": ">=3.6",
    "summary": "A python package to read and edit nbt data",
    "version": "0.1.13"
  },
  "releases": {
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "429c2c954bbd7ea40092c857a9b0afdf",
          "sha256": "7db4845314b7f2e411dd8cfb87dc89539815c3a58250d62d7f01712f5d4cadb7"
        },
        "downloads": -1,
        "filename": "nbtlib-0.1.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "429c2c954bbd7ea40092c857a9b0afdf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 10780,
        "upload_time": "2018-01-22T23:48:11",
        "url": "https://files.pythonhosted.org/packages/2e/00/7b4417985dec339b0de744fa3638fe6d2d803f7cf1c5ea5e9e3ba4bac8bf/nbtlib-0.1.10-py3-none-any.whl"
      }
    ],
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dcc0fcf2ce73d64df3a92da542652c70",
          "sha256": "e30d23e86bf38c66a89c1f416d7fade59aed4cfc1e1d3c936dc29d3193c3dc96"
        },
        "downloads": -1,
        "filename": "nbtlib-0.1.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dcc0fcf2ce73d64df3a92da542652c70",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 13100,
        "upload_time": "2018-02-01T10:46:42",
        "url": "https://files.pythonhosted.org/packages/d0/c1/2e2e761c3ac39d715cd373b718c255c28445e93eb1da87be2c1360c28087/nbtlib-0.1.11-py3-none-any.whl"
      }
    ],
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "37e3b91c4b3b64d0962fdba182033b8a",
          "sha256": "4533b00ddf23f647f4b058ba830d2099173ac3a5bd549eb5c184486c385bd107"
        },
        "downloads": -1,
        "filename": "nbtlib-0.1.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37e3b91c4b3b64d0962fdba182033b8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 13440,
        "upload_time": "2018-02-01T11:07:30",
        "url": "https://files.pythonhosted.org/packages/9d/95/418f917b2687a6db5dc2d7ca7a6c013167055551f8e3f3c3605a7f56afd6/nbtlib-0.1.12-py3-none-any.whl"
      }
    ],
    "0.1.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c2ab88b1d0b5d21551e204728bae17db",
          "sha256": "d745d9fd55fca4f57e028a0c03a615f01369b968444d450c052a2140c17de070"
        },
        "downloads": -1,
        "filename": "nbtlib-0.1.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2ab88b1d0b5d21551e204728bae17db",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 16565,
        "upload_time": "2018-02-03T00:48:57",
        "url": "https://files.pythonhosted.org/packages/66/94/d6b10cee2cea6495bd059a421085fe87129a8c769bc495fd233b47a7e98a/nbtlib-0.1.13-py3-none-any.whl"
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0db4f4af0df630b00eca54ed1c1818ad",
          "sha256": "3d77312b9ba8f0a32f27dd9e3ef0f60c3d76c10a30f81226bdbf13c792ff017c"
        },
        "downloads": -1,
        "filename": "nbtlib-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0db4f4af0df630b00eca54ed1c1818ad",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 10083,
        "upload_time": "2017-12-16T16:46:35",
        "url": "https://files.pythonhosted.org/packages/a7/bf/781c46936dd2ed831dc25f579511bec61ca1dcb00360edb7840de9bbdc19/nbtlib-0.1.8-py3-none-any.whl"
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d0d7d98b2086e9e356f216803182f1e0",
          "sha256": "12d082a3b754bba90f7386c0d4fe8f4c1b12961ee0f9d66acb4dc9b0e2b8d319"
        },
        "downloads": -1,
        "filename": "nbtlib-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d0d7d98b2086e9e356f216803182f1e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 10609,
        "upload_time": "2018-01-21T16:47:22",
        "url": "https://files.pythonhosted.org/packages/85/ba/2a45b8c77a33572968d0c49e9e56bee7d408fbab5a24835abd5aa178f47a/nbtlib-0.1.9-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c2ab88b1d0b5d21551e204728bae17db",
        "sha256": "d745d9fd55fca4f57e028a0c03a615f01369b968444d450c052a2140c17de070"
      },
      "downloads": -1,
      "filename": "nbtlib-0.1.13-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c2ab88b1d0b5d21551e204728bae17db",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 16565,
      "upload_time": "2018-02-03T00:48:57",
      "url": "https://files.pythonhosted.org/packages/66/94/d6b10cee2cea6495bd059a421085fe87129a8c769bc495fd233b47a7e98a/nbtlib-0.1.13-py3-none-any.whl"
    }
  ]
}