{
  "info": {
    "author": "Gordon Messmer",
    "author_email": "gordon@dragonsdawn.net",
    "bugtrack_url": "",
    "classifiers": [
      "Topic :: Communications :: Email :: Filters"
    ],
    "description": "Courier pythonfilter\r\n====================\r\n\r\npythonfilter is a collection of useful filters for the Courier MTA,\r\nand a framework for developing new filters in Python.  If you are\r\ninterested in developing your own filters, see the \"Hacking\" section\r\nbelow.\r\n\r\npythonfilter can be used to filter spam and viruses, as well as\r\nimplement other local mail policies.  The individual modules are\r\ndiscussed below in the \"Modules\" section, and policy design is\r\ndiscussed in the \"Use\" section.\r\n\r\n\r\nInstallation\r\n============\r\n\r\nRequirements:\r\n o Courier - http://www.courier-mta.org/\r\n o Python 2 or better - http://www.python.org/\r\n\r\nSome modules have additional requirements.  These modules are\r\noptional:\r\n o pyclamav (for \"clamav\") - http://xael.org/norman/python/pyclamav/\r\n o pydns (for \"dialback\") - http://pydns.sourceforge.net/\r\n o spf (for \"spfcheck\" and \"whitelist_spf\") - http://www.wayforward.net/spf/\r\n\r\npythonfilter uses Distutils to ease installation. The majority of\r\npeople should be able to install & run pythonfilter by entering:\r\n\r\n   python setup.py install\r\n\r\n   mkdir /var/lib/pythonfilter\r\n   chown daemon:daemon /var/lib/pythonfilter\r\n\r\n   ln -s /usr/bin/pythonfilter /usr/lib/courier/libexec/filters\r\n\r\n   filterctl start pythonfilter\r\n\r\nThe directory /var/lib/pythonfilter is required for persistent data\r\nused by some of the filters.  It should be owned by the user and group\r\nas which Courier's mail daemon runs.  Check MAILUSER and MAILGROUP in\r\nyour esmtpd configuration file.\r\n\r\n\r\nModules\r\n=======\r\n\r\nauto_whitelist: examines messages to determine whether or not they\r\nwere sent by a local, authenticated user.  When authenticated users\r\nsend mail, a record will be created detailing the relationship between\r\nthe message sender and recipients.\r\n\r\nWhen messages are received that aren't sent by authenticated users,\r\nthe records are examined to determine whether or not all of the\r\nrecipients have \"whitelisted\" that sender as a result of their own\r\nmail.  If the all of the recipients have previously emailed the\r\nsender, then this module will whitelist the message.  No filters\r\nlisted after this one in pythonfilter.conf will be run on this\r\nmessage.  Note that this module does not whitelist the authenticated\r\nsender, only the remote senders who have previously received mail from\r\nauthenticated senders.\r\n\r\nwhitelist_relayclients: examines messages to determine whether or not\r\nthey were sent from an IP address for which you relay.  This\r\ninformation is taken from Courier's \"smtpaccess\" database.  If the\r\nmail server relays for that IP, the message is whitelisted.  No\r\nfilters listed after this one in pythonfilter.conf will be run on this\r\nmessage.\r\n\r\nwhitelist_auth: examines messages to determine whether or not they\r\nwere sent by a user with SMTP AUTH.  If so, then the message is\r\nexempt from further filtering in pythonfilter.\r\n\r\nwhitelist_block: examines messages to determine whether or not the\r\nsmtpaccess.dat file contains an empty BLOCK value for the sender's\r\naddress.  If so, the message is exempt from further filtering in\r\npythonfilter.  This can be used to whitelist IP addresses and\r\nnetworks, and will also exempt those addresses from RBL blocking.\r\n\r\nwhitelist_dnswl: examines messages and looks up the sender's\r\naddress in a DNS based whitelist, like dnswl.org.  If the sender's\r\naddress is found, the message is exempt from further filtering in\r\npythonfilter.\r\n\r\nwhitelist_spf: examines messages to determine whether or not the\r\nSPF records for the sender's domain approve their address.  If so,\r\nthen the message is exempt from further filtering in pythonfilter.\r\n\r\nattachments: checks message MIME parts against a regex listing\r\nforbidden patterns in the filename or name Content-type parameters.\r\n\r\nlog_aliases: logs info about the alias used to reach recipients\r\n\r\nclamav: scans each message MIME part with the ClamAV virus scanner.\r\n\r\nlocalsenders: validates sender addresses, using authdaemon, if their\r\ndomains are locally hosted.\r\n\r\ncomeagain: issues a temporary failure notice if the sender has never\r\nbefore tried to contact each recipient.  This blocks most spam engines\r\nand viruses.  It's a simplified version of greylisting.\r\n\r\ndebug: prints debugging information to the mail log.  This module is\r\nprimarily useful to developers.  You can enable it to get some basic\r\ninformation about the data given to pythonfilter, and to test that\r\npythonfilter is working.  You might also modify the filter to print\r\nout more details from the body or control files.\r\n\r\ngreylist: is a more complete implementation of the strategy described here:\r\nhttp://projects.puremagic.com/greylisting/whitepaper.html\r\nIn short, the greylist filter examines a message and creates tokens\r\nrepresenting the sender, recipient, and sender's IP address.  If any\r\nof those tokens are new, they are recorded, and the sender is given a\r\ntemporary failure notice.  After a period of time has passed, those\r\ntokens become valid, so that when the mail server re-sends the\r\nmessage, the local server accepts it.  Those tokens will be saved for\r\n36 days to prevent delays in delivery, after the first one.  Because\r\nthey do similar things, greylist and comeagain should not be used\r\ntogether.\r\n\r\nYou will find that some senders do not behave well enough to be\r\ncompatible with the basic assumptions of the greylisting technique.\r\nIt is recommended that you whitelist those senders using the\r\nwhitelist_block module.  Information on known bad senders is at:\r\nhttp://greylisting.org/whitelisting.shtml\r\nYou could build the whitelist for those senders by:\r\n# wget -O - 'http://cvs.puremagic.com/viewcvs/*checkout*/greylisting/schema/whitelist_ip.txt?rev=1.16' \\\r\n\t| grep '^[[:digit:]]' | sed -e 's/[[:blank:]].*\\|$/\\tallow,BLOCK/' \\\r\n\t> /etc/courier/smtpaccess/nogreylisting\r\n# makesmtpaccess\r\n\r\nnoduplicates: If courier receives a message with multiple aliases that\r\nexpand to the same address, the message may be delivered to that\r\naddress multiple times.  This module checks for, and removes the\r\nduplicates.\r\n\r\nnosuccessdsn: removes delivery status notification requests for\r\nsuccessful delivery.  Some spammers request a notice when their mail\r\nis delivered to a user's mailbox, apparently as a replacement for or\r\nsupplement to dictionary attacks for working addresses.  This module\r\nwill only remove the instruction to notify the sender on delivery,\r\nwhich thwarts that particular attack, and causes very little\r\ndisruption for legitimate messages.\r\n\r\ndeliveredto: checks for Delivered-To header with local domains.  Any\r\nmessages containing such a header will be rejected.\r\n\r\nprivateaddr: can be used to restrict local addresses to specific\r\nsenders.  This can be useful for aliases that don't have their own\r\nprotection mechanisms.\r\n\r\nratelimit: tracks the number of messages received from a remote host\r\nduring a specified time interval and issues temporary failure notices\r\nto hosts that send too many messages.\r\n\r\nspfcheck: checks the sender against SPF records.  Since Courier now\r\nsupports SPF checking on its own, this module is deprecated.  It may\r\nbe useful as a template for other SPF related checks, though.\r\n\r\ndialback: checks the envelope sender's address to make sure that a\r\nbounce or reply can be delivered.  Mail from addresses that can't be\r\nverified will be refused.\r\n\r\nspamassassin: scans messages using \"spamc\".  This requires that\r\nSpamAssassin's daemon is running.  Note that all mail will be filtered\r\nunder the settings for courier's user, which means that your users'\r\nindividual whitelists and thresholds won't be processed.\r\n\r\nquota: checks the maildir quota for each local recipient, and temporarily\r\nrefuses messages if any recipient is over quota.\r\n\r\nadd_signature: examines the AUTH information for authenticated senders,\r\nand adds a signature to the message body if the domain in the AUTH\r\ninformation is listed in the \"domains\" dictionary.  This dictionary can\r\nbe customized in the pythonfilter-modules.conf file.  It should be a\r\nmapping of domains to the paths of plain text files which will be used\r\nas signatures.\r\n\r\nnoreceivedheaders: removes the first Received header from messages sent\r\nby authenticated senders.  This should effectively remove any\r\nidentifying information about those senders.\r\n\r\n\r\nTtlDb\r\n=====\r\n\r\nThe TtlDb module has experimental support for PostgreSQL.  This support\r\ncan be useful if you are clustering Courier servers and need a shared\r\nstorage for TtlDb.\r\n\r\nTo enable SQL support, open pythonfilter-modules.conf in your text\r\neditor and locate the TtlDb section.  Change \"type\" to 'psycopg2' for\r\nPostgreSQL, and set appropriate values for the other settings.\r\n\r\n[TtlDb]\r\ntype = 'psycopg2'\r\nhost = 'localhost'\r\nport = '5432'\r\ndb = 'pythonfilter'\r\nuser = 'pythonfilter'\r\npassword = 'password'\r\n\r\n\r\nQuarantine\r\n==========\r\n\r\npythonfilter's quarantine support allows filters to move a message\r\ninto the quarantine, rather than deliver it to the intended recipients.\r\nEach recipient will, instead, get a notice with some basic details\r\nabout the message and instructions on releasing the message from the\r\nquarantine.  In most cases, you must make sure that Courier's\r\n\"enablefiltering\" file does not include \"local\".  If you filter local\r\nmail, the filter which quarantined a message is likely to simply\r\nquarantine it again when users attempt to release it.\r\n\r\nThe quarantine module needs a directory where it can store the data\r\nand control files.  You must create a directory writable by the user\r\nas which Courier runs if you plan to use any module that quarantines\r\nmessages.\r\n\r\n# mkdir /var/lib/pythonfilter/quarantine\r\n# chown daemon:daemon /var/lib/pythonfilter/quarantine\r\n\r\nThe configuration file must contain the location of this directory,\r\nas well as an indication of how long messages should be held in the\r\nquarantine.  Open pythonfilter-modules.conf in your text editor and\r\nlocate the Quarantine section.\r\n\r\n[Quarantine]\r\nsiteid = '7d35f0b0-4a07-40a6-b513-f28bd50476d3'\r\ndir = '/var/lib/pythonfilter/quarantine'\r\ndays = 14\r\nnotifyRecipient = 1\r\nalsoNotify = 'quarantinemgr@example.com'\r\nuserRelease = 1\r\n\r\nThe siteid value is a randomly generated ID for your site.  It helps\r\nprevent forged requests to release items from the quarantine.  On\r\nLinux systems, the \"uuidgen\" program can be used to generate an ID.\r\nIf \"uuidgen\" isn't available, any string will do.\r\n\r\nSet the dir value to the path which you created earlier.  Set days\r\naccording to your preference for quarantine lifetime.\r\n\r\nThe alsoNotify value may be used to send a copy of all quarantine\r\nnotices to an admin account for review or tracking.\r\n\r\nIf you only want to notify users that their messages are quarantined,\r\nbut not to allow them to release the messages, set userRelease to 0,\r\nand do not set up the dot-courier file for the quarantine address.\r\nIn this case, alsoNotify must be set, and users will be instructed to\r\nreply to that address.\r\n\r\nThe notifyRecipient value can be set to 0 to disable notifying users\r\nthat messages have been quarantined.  If there is an address specified\r\nby the alsoNotify setting, that address will still be notified.  If\r\nnotifyRecipient is set to 0, and no alsoNotify setting is available,\r\nthen quarantines will be completely silent.\r\n\r\nAfter configuring the quaranting settings, you'll also need to create an\r\nalias which users can use to release messages.  The address given to\r\nusers will use the system's hostname or Courier's \"me\" configuration\r\nfile. See the man page for 'courier' for more information.  That\r\nhostname must appear in the \"locals\" configuration file.  The alias\r\nshould be set up as a dot-courier file beginning with \"quarantine\",\r\nfollowed by a hyphen and then the siteid, ending with \"-default\".\r\nFor example:\r\n\r\n/etc/courier/aliasdir/.courier-quarantine-7d35f0b0-4a07-40a6-b513-f28bd50476d3-default\r\n\r\nThis file should contain a single delivery instruction:\r\n\r\n| /usr/bin/pythonfilter-quarantine -release\r\n\r\nFinally, you will need a scheduled job to clean out the quarantine\r\nperiodically.  The job will delete the quarantine files and clean\r\nup the database of IDs.  Once a day, you should run:\r\n\r\n/usr/bin/pythonfilter-quarantine -purge\r\n\r\n\r\nUse\r\n===\r\n\r\nThe configuration file, /etc/pythonfilter.conf, is used to control\r\nyour local policy.  Each line in the file which does not start with a\r\n'#' character is assumed to be the name of a filter module.\r\npythonfilter will attempt to load each filter the order listed.  Each\r\nmessage that Courier receives from a source listed in its\r\n\"enablefiltering\" file will be given to pythonfilter, which will then\r\nrun each filter in the same order.\r\n\r\nIf a filter indicates that a message should be allowed to pass through\r\nthe pythonfilter policy, as the whitelist modules do, then that\r\nmessage won't be filtered by modules listed later in the configuration\r\nfile.  A filter may also indicate temporary or permanent failure,\r\nwhich will also stop further processing, and cause Courier to refuse\r\nthe message.  If a filter returns no decision, filtering will\r\ncontinue.\r\n\r\nThe local policy should list the filters it wants applied to all\r\nmessages first, followed by filters which whitelist trusted users, and\r\nthen filters which should be applied to untrusted senders.  For\r\ninstance, this configuration would apply virus filtering to all users,\r\nand greylist only senders who have not received messages from local\r\nusers:\r\n\r\n---\r\nclamav\r\nauto_whitelist\r\nwhitelist_relayclients\r\nwhitelist_auth\r\ngreylist\r\n---\r\n\r\nIt is important that the auto_whitelist module, when used, is listed\r\nbefore the whitelist_auth module.  If whitelist_auth is listed first,\r\nmessages from authenticated senders won't be given to the\r\nauto_whitelist module.\r\n\r\nThis example will apply virus filtering to all messages, rate limit\r\nmessages from all sources that don't authenticate themselves, and\r\nprohibit bad attachments from sources that aren't either authenticated\r\nor configured as a relayed client in Courier's \"smtpaccess\" database:\r\n\r\n---\r\nclamav\r\nwhitelist_auth\r\nratelimit\r\nwhitelist_relayclients\r\nattachments\r\n---\r\n\r\nThe configuration file, /etc/pythonfilter-modules.conf, can be used\r\nto modify the behavior of some filters.  Each filter which has some\r\nbehavior which can be modified will have a section present in the\r\nconfiguration file with its default values listed.  Uncomment the\r\nsection header and the values that you'd like to modify.\r\n\r\nThe values read from this configuration file will be passed to Python's\r\neval(), so they must be valid python expressions.\r\n\r\n\r\nLicense\r\n=======\r\n\r\npythonfilter is distributed under the GNU General Public License\r\n(GPL), as described in the COPYING file.",
    "docs_url": null,
    "download_url": "http://phantom.dragonsdawn.net/~gordon/courier-pythonfilter/courier-pythonfilter-1.11.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://www.dragonsdawn.net/~gordon/courier-pythonfilter/",
    "keywords": "",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "courier-pythonfilter",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/courier-pythonfilter/",
    "release_url": "https://pypi.org/project/courier-pythonfilter/1.11/",
    "requires_python": null,
    "summary": "Python filtering architecture for the Courier MTA.",
    "version": "1.11"
  },
  "releases": {
    "1.10": [],
    "1.11": [],
    "1.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c9e31489bf4753f30b000d1a63e80cd8",
          "sha256": "b3ee1bf3dd1488e736a8b3a604c8ae34930eb556eea8db99d5ed5bdd06a92b54"
        },
        "downloads": 2189,
        "filename": "courier-pythonfilter-1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "c9e31489bf4753f30b000d1a63e80cd8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 70507,
        "upload_time": "2014-07-23T10:44:13",
        "url": "https://files.pythonhosted.org/packages/e9/dd/28518904a451a7f7bed71ec45e3cc72ac151f7b267282e14449b88632e04/courier-pythonfilter-1.8.tar.gz"
      }
    ]
  },
  "urls": []
}