{
  "info": {
    "author": "Zalando SE",
    "author_email": "",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "==========\r\nEcological\r\n==========\r\n\r\n``Ecological`` combines PEP526_ and environment variables to make the configuration of\r\n`12 factor apps <https://12factor.net/config>`_ easy.\r\n\r\nGetting Started\r\n===============\r\n``Ecological`` automatically gets and converts environment variables according to the configuration class definition.\r\n\r\nFor example, imagine your application has a configurable (integer) Port and (boolean) Debug flag and a (string) Log\r\nLevel, that is ``INFO`` by default, you could simply declare your configuration as:\r\n\r\n.. code-block:: python\r\n\r\n    class Configuration(ecology.AutoConfig):\r\n        port: int\r\n        debug: bool\r\n        log_level: str = \"INFO\"\r\n\r\nAnd then set the environment variables ``PORT``, ``DEBUG`` and ``LOG_LEVEL``. ``Ecological`` will automatically set the\r\nclass properties from the environment variables with the same (but upper cased) name.\r\n\r\nThe values are set at the class definition type and assigned to the class itself (i.e. the class doesn't need to be\r\ninstantiated).\r\n\r\nTyping Support\r\n==============\r\n``Ecological`` also supports some of the types defined in PEP484_, for example:\r\n\r\n.. code-block:: python\r\n\r\n\r\n    class Configuration(ecology.AutoConfig):\r\n        list_of_values: List[str]\r\n\r\nWill automatically parse the environment variable value as a list.\r\n\r\n.. note:: Please note that while this will ensure ``Configuration.list_of_values`` is a list it will not check that it\r\n          contains only strings.\r\n\r\nPrefixed Configuration\r\n======================\r\nYou can also decide to prefix your application configuration, for example, to avoid collisions:\r\n\r\n.. code-block:: python\r\n\r\n    class Configuration(ecology.AutoConfig, prefix='myapp'):\r\n        home: str\r\n\r\n\r\nIn this case the ``home`` property will be fetched from the ``MYAPP_HOME`` environment property.\r\n\r\n\r\nCaveats and Known Limitations\r\n=============================\r\n\r\n- ``Ecological`` doesn't support (public) methods in ``AutoConfig`` classes\r\n\r\n\r\nAdvanced Usage\r\n==============\r\n\r\nFine-grained control\r\n--------------------\r\nYou can control how the configuration properties are set by providing a ``ecological.Variable`` instance as the default\r\nvalue.\r\n\r\n``ecological.Variable`` receives the following parameters:\r\n\r\n    - **``variable_name``** (mandatory) - exact name of the environment variable that will be used.\r\n    - **``default``** (optional) - default value for the property if it isn't set.\r\n    - **``transform``** (optional) - function that converts the string in the environment to the value and type you\r\n                                     expect in your application. The default ``transform`` function will try to cast the\r\n                                     string to the annotation type of the property.\r\n\r\nTransformation function\r\n.......................\r\n\r\nThe transformation function receive two parameters, a string ``representation`` with the raw value, and a\r\n``wanted_type`` with the value of the annotation (usually, but not mandatorily a ``type``).\r\n\r\nNested Configuration\r\n--------------------\r\n``Ecological.AutoConfig`` also supports nested configurations, for example:\r\n\r\n\r\n.. code-block:: python\r\n\r\n\r\n    class Configuration(ecology.AutoConfig):\r\n        integer: int\r\n\r\n        class Nested(ecology.AutoConfig, prefix='nested'):\r\n            boolean: bool\r\n\r\nThis way you can group related configuration properties hierarchically.\r\n\r\n.. _PEP484: https://www.python.org/dev/peps/pep-0484/\r\n.. _PEP526: https://www.python.org/dev/peps/pep-0526/",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jmcs/ecological",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ecological",
    "platform": "",
    "project_url": "https://pypi.org/project/ecological/",
    "release_url": "https://pypi.org/project/ecological/1.0/",
    "requires_python": "",
    "summary": "Map a python configuration from environment variables",
    "version": "1.0"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4722d18f2baa3b698b41aa1e7183993f",
          "sha256": "1c94c7c407317a967247e8ba91555dbffc5186b0015fbd100a8fbac67738602b"
        },
        "downloads": 0,
        "filename": "ecological-1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4722d18f2baa3b698b41aa1e7183993f",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 6456,
        "upload_time": "2017-06-11T14:18:02",
        "url": "https://files.pythonhosted.org/packages/9a/61/8c0618f8714ee9450b4131ef592938a45063631645277357a5dc7be01f63/ecological-1.0-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4722d18f2baa3b698b41aa1e7183993f",
        "sha256": "1c94c7c407317a967247e8ba91555dbffc5186b0015fbd100a8fbac67738602b"
      },
      "downloads": 0,
      "filename": "ecological-1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4722d18f2baa3b698b41aa1e7183993f",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "size": 6456,
      "upload_time": "2017-06-11T14:18:02",
      "url": "https://files.pythonhosted.org/packages/9a/61/8c0618f8714ee9450b4131ef592938a45063631645277357a5dc7be01f63/ecological-1.0-py3-none-any.whl"
    }
  ]
}