{
  "info": {
    "author": "Joel Lawhead",
    "author_email": "jlawhead@geospatialpython.com",
    "bugtrack_url": "",
    "classifiers": [
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: GIS",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# PyShp\n\nThe Python Shapefile Library (pyshp) reads and writes ESRI Shapefiles in pure Python.\n\n![pyshp logo](http://4.bp.blogspot.com/_SBi37QEsCvg/TPQuOhlHQxI/AAAAAAAAAE0/QjFlWfMx0tQ/S350/GSP_Logo.png \"PyShp\")\n\n[![Build Status](https://travis-ci.org/GeospatialPython/pyshp.svg?branch=master)](https://travis-ci.org/GeospatialPython/pyshp)\n\n## Contents\n\n[Overview](#overview)\n\n[Examples](#examples)\n- [Reading Shapefiles](#reading-shapefiles)\n  - [Reading Shapefiles from File-Like Objects](#reading-shapefiles-from-file-like-objects)\n  - [Reading Geometry](#reading-geometry)\n  - [Reading Records](#reading-records)\n  - [Reading Geometry and Records Simultaneously](#reading-geometry-and-records-simultaneously)\n- [Writing Shapefiles](#writing-shapefiles)\n  - [Setting the Shape Type](#setting-the-shape-type)\n  - [Geometry and Record Balancing](#geometry-and-record-balancing)\n  - [Adding Geometry](#adding-geometry)\n  - [Creating Attributes](#creating-attributes)\n  - [File Names](#file-names)\n  - [Saving to File-Like Objects](#saving-to-file-like-objects)\n- [Editing Shapefiles](#editing-shapefiles)\n  - [Geometry and Record Balancing](#geometry-and-record-balancing)\n- [Python \\_\\_geo_interface\\_\\_](#python-\\_\\_geo\\_interface\\_\\_)\n- [Testing](#testing)\n\n# Overview\n\nThe Python Shapefile Library (pyshp) provides read and write support for the\nEsri Shapefile format. The Shapefile format is a popular Geographic\nInformation System vector data format created by Esri. For more information\nabout this format please read the well-written \"ESRI Shapefile Technical\nDescription - July 1998\" located at [http://www.esri.com/library/whitepapers/p\ndfs/shapefile.pdf](http://www.esri.com/library/whitepapers/pdfs/shapefile.pdf)\n. The Esri document describes the shp and shx file formats. However a third\nfile format called dbf is also required. This format is documented on the web\nas the \"XBase File Format Description\" and is a simple file-based database\nformat created in the 1960's. For more on this specification see: [http://www.clicketyclick.dk/databases/xbase/format/index.html](http://www.clicketyclick.d\nk/databases/xbase/format/index.html)\n\nBoth the Esri and XBase file-formats are very simple in design and memory\nefficient which is part of the reason the shapefile format remains popular\ndespite the numerous ways to store and exchange GIS data available today.\n\nPyshp is compatible with Python 2.4-3.x.\n\nThis document provides examples for using pyshp to read and write shapefiles. However \nmany more examples are continually added to the pyshp wiki on GitHub, the blog [http://GeospatialPython.com](http://GeospatialPython.com),\nand by searching for pyshp on [https://gis.stackexchange.com](https://gis.stackexchange.com). \n\nCurrently the sample census blockgroup shapefile referenced in the examples is available on the GitHub project site at\n[https://github.com/GeospatialPython/pyshp](https://github.com/GeospatialPython/pyshp). These\nexamples are straight-forward and you can also easily run them against your\nown shapefiles with minimal modification. \n\nImportant: If you are new to GIS you should read about map projections.\nPlease visit: [https://github.com/GeospatialPython/pyshp/wiki/Map-Projections](https://github.com/GeospatialPython/pyshp/wiki/Map-Projections)\n\nI sincerely hope this library eliminates the mundane distraction of simply\nreading and writing data, and allows you to focus on the challenging and FUN\npart of your geospatial project.\n\n# Examples\n\nBefore doing anything you must import the library.\n\n    >>> import shapefile\n\nThe examples below will use a shapefile created from the U.S. Census Bureau\nBlockgroups data set near San Francisco, CA and available in the git\nrepository of the pyshp GitHub site.\n\n## Reading Shapefiles\n\nTo read a shapefile create a new \"Reader\" object and pass it the name of an\nexisting shapefile. The shapefile format is actually a collection of three\nfiles. You specify the base filename of the shapefile or the complete filename\nof any of the shapefile component files.\n\n\n    >>> sf = shapefile.Reader(\"shapefiles/blockgroups\")\n\nOR\n\n\n    >>> sf = shapefile.Reader(\"shapefiles/blockgroups.shp\")\n\nOR\n\n\n    >>> sf = shapefile.Reader(\"shapefiles/blockgroups.dbf\")\n\nOR any of the other 5+ formats which are potentially part of a shapefile. The\nlibrary does not care about file extensions.\n\n### Reading Shapefiles from File-Like Objects\n\nYou can also load shapefiles from any Python file-like object using keyword\narguments to specify any of the three files. This feature is very powerful and\nallows you to load shapefiles from a url, from a zip file, serialized object,\nor in some cases a database.\n\n\n    >>> myshp = open(\"shapefiles/blockgroups.shp\", \"rb\")\n    >>> mydbf = open(\"shapefiles/blockgroups.dbf\", \"rb\")\n    >>> r = shapefile.Reader(shp=myshp, dbf=mydbf)\n\nNotice in the examples above the shx file is never used. The shx file is a\nvery simple fixed-record index for the variable length records in the shp\nfile. This file is optional for reading. If it's available pyshp will use the\nshx file to access shape records a little faster but will do just fine without\nit.\n\n### Reading Geometry\n\nA shapefile's geometry is the collection of points or shapes made from\nvertices and implied arcs representing physical locations. All types of\nshapefiles just store points. The metadata about the points determine how they\nare handled by software.\n\nYou can get the a list of the shapefile's geometry by calling the shapes()\nmethod.\n\n\n    >>> shapes = sf.shapes()\n\nThe shapes method returns a list of Shape objects describing the geometry of\neach shape record.\n\n\n    >>> len(shapes)\n    663\n\nYou can iterate through the shapefile's geometry using the iterShapes()\nmethod.\n\n\n    >>> len(list(sf.iterShapes()))\n    663\n\nEach shape record contains the following attributes:\n\n\n    >>> for name in dir(shapes[3]):\n    ...     if not name.startswith('__'):\n    ...         name\n    'bbox'\n    'parts'\n    'points'\n    'shapeType'\n\n  * shapeType: an integer representing the type of shape as defined by the\n      shapefile specification.\n\n\n        >>> shapes[3].shapeType\n        5\n\n  * bbox: If the shape type contains multiple points this tuple describes the\n      lower left (x,y) coordinate and upper right corner coordinate creating a\n      complete box around the points. If the shapeType is a\n      Null (shapeType == 0) then an AttributeError is raised.\n\n\n        >>> # Get the bounding box of the 4th shape.\n        >>> # Round coordinates to 3 decimal places\n        >>> bbox = shapes[3].bbox\n        >>> ['%.3f' % coord for coord in bbox]\n        ['-122.486', '37.787', '-122.446', '37.811']\n\n  * parts: Parts simply group collections of points into shapes. If the shape\n      record has multiple parts this attribute contains the index of the first\n      point of each part. If there is only one part then a list containing 0 is\n      returned.\n\n        >>> shapes[3].parts\n        [0]\n\n  * points: The points attribute contains a list of tuples containing an\n      (x,y) coordinate for each point in the shape.\n\n        >>> len(shapes[3].points)\n        173\n        >>> # Get the 8th point of the fourth shape\n        >>> # Truncate coordinates to 3 decimal places\n        >>> shape = shapes[3].points[7]\n        >>> ['%.3f' % coord for coord in shape]\n        ['-122.471', '37.787']\n\nTo read a single shape by calling its index use the shape() method. The index\nis the shape's count from 0. So to read the 8th shape record you would use its\nindex which is 7.\n\n\n    >>> s = sf.shape(7)\n\n    >>> # Read the bbox of the 8th shape to verify\n    >>> # Round coordinates to 3 decimal places\n    >>> ['%.3f' % coord for coord in s.bbox]\n    ['-122.450', '37.801', '-122.442', '37.808']\n\n### Reading Records\n\nA record in a shapefile contains the attributes for each shape in the\ncollection of geometry. Records are stored in the dbf file. The link between\ngeometry and attributes is the foundation of all geographic information systems.\nThis critical link is implied by the order of shapes and corresponding records\nin the shp geometry file and the dbf attribute file.\n\nThe field names of a shapefile are available as soon as you read a shapefile.\nYou can call the \"fields\" attribute of the shapefile as a Python list. Each\nfield is a Python list with the following information:\n\n  * Field name: the name describing the data at this column index.\n  * Field type: the type of data at this column index. Types can be: Character,\n       Numbers, Longs, Dates, or Memo. The \"Memo\" type has no meaning within a\n       GIS and is part of the xbase spec instead.\n  * Field length: the length of the data found at this column index. Older GIS\n       software may truncate this length to 8 or 11 characters for \"Character\"\n       fields.\n  * Decimal length: the number of decimal places found in \"Number\" fields.\n\nTo see the fields for the Reader object above (sf) call the \"fields\"\nattribute:\n\n\n    >>> fields = sf.fields\n\n    >>> assert fields == [(\"DeletionFlag\", \"C\", 1, 0), [\"AREA\", \"N\", 18, 5],\n    ... [\"BKG_KEY\", \"C\", 12, 0], [\"POP1990\", \"N\", 9, 0], [\"POP90_SQMI\", \"N\", 10, 1],\n    ... [\"HOUSEHOLDS\", \"N\", 9, 0],\n    ... [\"MALES\", \"N\", 9, 0], [\"FEMALES\", \"N\", 9, 0], [\"WHITE\", \"N\", 9, 0],\n    ... [\"BLACK\", \"N\", 8, 0], [\"AMERI_ES\", \"N\", 7, 0], [\"ASIAN_PI\", \"N\", 8, 0],\n    ... [\"OTHER\", \"N\", 8, 0], [\"HISPANIC\", \"N\", 8, 0], [\"AGE_UNDER5\", \"N\", 8, 0],\n    ... [\"AGE_5_17\", \"N\", 8, 0], [\"AGE_18_29\", \"N\", 8, 0], [\"AGE_30_49\", \"N\", 8, 0],\n    ... [\"AGE_50_64\", \"N\", 8, 0], [\"AGE_65_UP\", \"N\", 8, 0],\n    ... [\"NEVERMARRY\", \"N\", 8, 0], [\"MARRIED\", \"N\", 9, 0], [\"SEPARATED\", \"N\", 7, 0],\n    ... [\"WIDOWED\", \"N\", 8, 0], [\"DIVORCED\", \"N\", 8, 0], [\"HSEHLD_1_M\", \"N\", 8, 0],\n    ... [\"HSEHLD_1_F\", \"N\", 8, 0], [\"MARHH_CHD\", \"N\", 8, 0],\n    ... [\"MARHH_NO_C\", \"N\", 8, 0], [\"MHH_CHILD\", \"N\", 7, 0],\n    ... [\"FHH_CHILD\", \"N\", 7, 0], [\"HSE_UNITS\", \"N\", 9, 0], [\"VACANT\", \"N\", 7, 0],\n    ... [\"OWNER_OCC\", \"N\", 8, 0], [\"RENTER_OCC\", \"N\", 8, 0],\n    ... [\"MEDIAN_VAL\", \"N\", 7, 0], [\"MEDIANRENT\", \"N\", 4, 0],\n    ... [\"UNITS_1DET\", \"N\", 8, 0], [\"UNITS_1ATT\", \"N\", 7, 0], [\"UNITS2\", \"N\", 7, 0],\n    ... [\"UNITS3_9\", \"N\", 8, 0], [\"UNITS10_49\", \"N\", 8, 0],\n    ... [\"UNITS50_UP\", \"N\", 8, 0], [\"MOBILEHOME\", \"N\", 7, 0]]\n\nYou can get a list of the shapefile's records by calling the records() method:\n\n\n    >>> records = sf.records()\n\n    >>> len(records)\n    663\n\nSimilar to the geometry methods, you can iterate through dbf records using the\niterRecords() method.\n\n\n    >>> len(list(sf.iterRecords()))\n    663\n\nEach record is a list containing an attribute corresponding to each field in\nthe field list.\n\nFor example in the 4th record of the blockgroups shapefile the 2nd and 3rd\nfields are the blockgroup id and the 1990 population count of that San\nFrancisco blockgroup:\n\n\n    >>> records[3][1:3]\n    ['060750601001', 4715]\n\nTo read a single record call the record() method with the record's index:\n\n\n    >>> rec = sf.record(3)\n\n    >>> rec[1:3]\n    ['060750601001', 4715]\n\n### Reading Geometry and Records Simultaneously\n\nYou may want to examine both the geometry and the attributes for a record at\nthe same time. The shapeRecord() and shapeRecords() method let you do just\nthat.\n\nCalling the shapeRecords() method will return the geometry and attributes for\nall shapes as a list of ShapeRecord objects. Each ShapeRecord instance has a\n\"shape\" and \"record\" attribute. The shape attribute is a ShapeRecord object as\ndiscussed in the first section \"Reading Geometry\". The record attribute is a\nlist of field values as demonstrated in the \"Reading Records\" section.\n\n\n    >>> shapeRecs = sf.shapeRecords()\n\nLet's read the blockgroup key and the population for the 4th blockgroup:\n\n\n    >>> shapeRecs[3].record[1:3]\n    ['060750601001', 4715]\n\nNow let's read the first two points for that same record:\n\n\n    >>> points = shapeRecs[3].shape.points[0:2]\n\n    >>> len(points)\n    2\n\nThe shapeRecord() method reads a single shape/record pair at the specified index.\nTo get the 4th shape record from the blockgroups shapefile use the third index:\n\n\n    >>> shapeRec = sf.shapeRecord(3)\n\nThe blockgroup key and population count:\n\n\n    >>> shapeRec.record[1:3]\n    ['060750601001', 4715]\n\n    >>> points = shapeRec.shape.points[0:2]\n\n    >>> len(points)\n    2\n    \nThere is also an iterShapeRecords() method to iterate through large files:\n\n\n    >>> shapeRecs = sf.iterShapeRecords()\n    >>> for shapeRec in shapeRecs:\n    ...     # do something here\n    ...     pass\n    \n\n## Writing Shapefiles\n\nPyShp tries to be as flexible as possible when writing shapefiles while\nmaintaining some degree of automatic validation to make sure you don't\naccidentally write an invalid file.\n\nPyShp can write just one of the component files such as the shp or dbf file\nwithout writing the others. So in addition to being a complete shapefile\nlibrary, it can also be used as a basic dbf (xbase) library. Dbf files are a\ncommon database format which are often useful as a standalone simple database\nformat. And even shp files occasionally have uses as a standalone format. Some\nweb-based GIS systems use an user-uploaded shp file to specify an area of\ninterest. Many precision agriculture chemical field sprayers also use the shp\nformat as a control file for the sprayer system (usually in combination with\ncustom database file formats).\n\nTo create a shapefile you add geometry and/or attributes using methods in the\nWriter class until you are ready to save the file.\n\nCreate an instance of the Writer class to begin creating a shapefile:\n\n\n    >>> w = shapefile.Writer()\n\n### Setting the Shape Type\n\nThe shape type defines the type of geometry contained in the shapefile. All of\nthe shapes must match the shape type setting.\n\nShape types are represented by numbers between 0 and 31 as defined by the\nshapefile specification. It is important to note that numbering system has\nseveral reserved numbers which have not been used yet therefore the numbers of\nthe existing shape types are not sequential.\n\nThere are three ways to set the shape type: \n  * Set it when creating the class instance. \n  * Set it by assigning a value to an existing class instance. \n  * Set it automatically to the type of the first non-null shape by saving the shapefile.\n\nTo manually set the shape type for a Writer object when creating the Writer:\n\n\n    >>> w = shapefile.Writer(shapeType=1)\n\n    >>> w.shapeType\n    1\n\nOR you can set it after the Writer is created:\n\n\n    >>> w.shapeType = 3\n\n    >>> w.shapeType\n    3\n\n### Geometry and Record Balancing\n\nBecause every shape must have a corresponding record it is critical that the\nnumber of records equals the number of shapes to create a valid shapefile. You\nmust take care to add records and shapes in the same order so that the record\ndata lines up with the geometry data. For example:\n\n\n    >>> w.field(\"field1\", \"C\")\n    >>> w.field(\"field2\", \"C\")\n    >>> w.record(\"row\", \"one\")\n    >>> w.record(\"row\", \"two\")\n    >>> w.point(1, 1)\n    >>> w.point(2, 2)\n\n### Adding Geometry\n\nGeometry is added using one of three methods: \"null\", \"point\", or \"poly\". The\n\"null\" method is used for null shapes, \"point\" is used for point shapes, \"line\" for lines, and\n\"poly\" is used for polygons and everything else.\n\n**Adding a Point shape**\n\nPoint shapes are added using the \"point\" method. A point is specified by an x,\ny, and optional z (elevation) and m (measure) value.\n\n\n    >>> w = shapefile.Writer(shapefile.POINTM)\n\t\n    >>> w.point(122, 37) # No elevation or measure values\n\n    >>> w.shapes()[0].points\n    [[122, 37, 0, 0]]\n\n    >>> w.point(118, 36, 4, 8)\n\n    >>> w.shapes()[1].points\n    [[118, 36, 4, 8]]\n\t\n\t>>> w.field('FIRST_FLD', 'C')\n\t>>> w.field('SECOND_FLD', 'C')\n\t\n\t>>> w.save('shapefiles/test/point')\n\n**Adding a Polygon shape**\n\nShapefile polygons must have at\nleast 4 points and the last point must be the same as the first. PyShp\nautomatically enforces closed polygons. \n\n\n    >>> w = shapefile.Writer()\n\n    >>> w.poly(parts=[[[122,37,4,9], [117,36,3,4]], [[115,32,8,8],\n    ... [118,20,6,4], [113,24]]])\n\n\t>>> w.field('FIRST_FLD', 'C')\n\t>>> w.field('SECOND_FLD', 'C')\n\t\n\t>>> w.save('shapefiles/test/polygon')\n\n**Adding a Line shape**\n\nA line must have at least two points.\nBecause of the similarities between polygon and line types it is possible to create\na line shape using either the \"line\" or \"poly\" method.\n\t\n\t\n\t>>> w = shapefile.Writer()\n\t\n    >>> w.line(parts=[[[1,5],[5,5],[5,1],[3,3],[1,1]]])\n    >>> w.poly(parts=[[[1,3],[5,3]]], shapeType=shapefile.POLYLINE)\n\t\n\t>>> w.field('FIRST_FLD', 'C')\n\t>>> w.field('SECOND_FLD', 'C')\n\t\n\t>>> w.save('shapefiles/test/polygon')\n\t\n**Adding a Null shape**\n\nBecause Null shape types (shape type 0) have no geometry the \"null\" method is\ncalled without any arguments.  This type of shapefile is rarely used but it is valid.\n\n\n    >>> w = shapefile.Writer()\n\n    >>> w.null()\n\nThe writer object's shapes list will now have one null shape:\n\n\n    >>> assert w.shapes()[0].shapeType == shapefile.NULL\n\n### Creating Attributes\n\nCreating attributes involves two steps. Step 1 is to create fields to contain\nattribute values and step 2 is to populate the fields with values for each\nshape record. \n\nThere are several different field types, all of which support storing None values as NULL. \n\nText fields are created using the 'C' type, and the third 'size' argument can be customized to the expected\nlength of text values to save space:\n\n\n    >>> w = shapefile.Writer()\n    >>> w.field('TEXT', 'C')\n\t>>> w.field('SHORT_TEXT', 'C', size=5)\n\t>>> w.field('LONG_TEXT', 'C', size=250)\n\t>>> w.null()\n    >>> w.record('Hello', 'World', 'World'*50)\n    >>> w.save('shapefiles/test/dtype')\n\t\n\t>>> r = shapefile.Reader('shapefiles/test/dtype')\n\t>>> assert r.record(0) == ['Hello', 'World', 'World'*50]\n\nDate fields are created using the 'D' type, and can be created using either \ndate objects, lists, or a YYYYMMDD formatted string. \nField length or decimal have no impact on this type:\n\n\n\t>>> from datetime import date\n    >>> w = shapefile.Writer()\n    >>> w.field('DATE', 'D')\n\t>>> w.null()\n\t>>> w.null()\n\t>>> w.null()\n\t>>> w.null()\n    >>> w.record(date(1998,1,30))\n\t>>> w.record([1998,1,30])\n\t>>> w.record('19980130')\n\t>>> w.record(None)\n    >>> w.save('shapefiles/test/dtype')\n\t\n\t>>> r = shapefile.Reader('shapefiles/test/dtype')\n\t>>> assert r.record(0) == [date(1998,1,30)]\n\t>>> assert r.record(1) == [date(1998,1,30)]\n\t>>> assert r.record(2) == [date(1998,1,30)]\n\t>>> assert r.record(3) == [None]\n\nNumeric fields are created using the 'N' type (or the 'F' type, which is exactly the same). \nBy default the fourth decimal argument is set to zero, essentially creating an integer field. \nTo store floats you must set the decimal argument to the precision of your choice. \nTo store very large numbers you must increase the field length size to the total number of digits \n(including comma and minus). \n\n\n    >>> w = shapefile.Writer()\n\t>>> w.field('INT', 'N')\n    >>> w.field('LOWPREC', 'N', decimal=2)\n\t>>> w.field('MEDPREC', 'N', decimal=10)\n\t>>> w.field('HIGHPREC', 'N', decimal=30)\n\t>>> w.field('FTYPE', 'F', decimal=10)\n\t>>> w.field('LARGENR', 'N', 101)\n\t>>> nr = 1.3217328\n\t>>> w.null()\n\t>>> w.null()\n    >>> w.record(INT=int(nr), LOWPREC=nr, MEDPREC=nr, HIGHPREC=-3.2302e-25, FTYPE=nr, LARGENR=int(nr)*10**100)\n\t>>> w.record(None, None, None, None, None, None)\n    >>> w.save('shapefiles/test/dtype')\n\t\n\t>>> r = shapefile.Reader('shapefiles/test/dtype')\n\t>>> assert r.record(0) == [1, 1.32, 1.3217328, -3.2302e-25, 1.3217328, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]\n\t>>> assert r.record(1) == [None, None, None, None, None, None]\n\n\t\nFinally, we can create boolean fields by setting the type to 'L'. \nThis field can take True or False values, or 1 (True) or 0 (False). \nNone is interpreted as missing. \n\n\n    >>> w = shapefile.Writer()\n\t>>> w.field('BOOLEAN', 'L')\n\t>>> w.null()\n\t>>> w.null()\n\t>>> w.null()\n\t>>> w.null()\n\t>>> w.null()\n    >>> w.record(True)\n\t>>> w.record(1)\n\t>>> w.record(False)\n\t>>> w.record(0)\n\t>>> w.record(None)\n\t>>> w.record(\"Nonesense\")\n    >>> w.save('shapefiles/test/dtype')\n\t\n\t>>> r = shapefile.Reader('shapefiles/test/dtype')\n\t>>> r.record(0)\n\t[True]\n\t>>> r.record(1)\n\t[True]\n\t>>> r.record(2)\n\t[False]\n\t>>> r.record(3)\n\t[False]\n\t>>> r.record(4)\n\t[None]\n\t>>> r.record(5)\n\t[None]\n\t\nYou can also add attributes using keyword arguments where the keys are field names.\n\n\n\t>>> w = shapefile.Writer()\n\t>>> w.field('FIRST_FLD','C','40')\n\t>>> w.field('SECOND_FLD','C','40')\n\t>>> w.record('First', 'Line')\n\t>>> w.record(FIRST_FLD='First', SECOND_FLD='Line')\n\t>>> assert w.records[0] == w.records[1]\n\t\n\t\n\n### File Names\n\nFile extensions are optional when reading or writing shapefiles. If you specify\nthem PyShp ignores them anyway. When you save files you can specify a base\nfile name that is used for all three file types. Or you can specify a name for\none or more file types. In that case, any file types not assigned will not\nsave and only file types with file names will be saved. If you do not specify\nany file names (i.e. save()), then a unique file name is generated with the\nprefix \"shapefile_\" followed by random characters which is used for all three\nfiles. The unique file name is returned as a string.\n\n\n    >>> targetName = w.save()\n    >>> assert(\"shapefile_\" in targetName)\n\n### Saving to File-Like Objects\n\nJust as you can read shapefiles from python file-like objects you can also\nwrite them.\n\n\n    >>> try:\n    ...     from StringIO import StringIO\n    ... except ImportError:\n    ...     from io import BytesIO as StringIO\n    >>> shp = StringIO()\n    >>> shx = StringIO()\n    >>> dbf = StringIO()\n    >>> w.saveShp(shp)\n    >>> w.saveShx(shx)\n    >>> w.saveDbf(dbf)\n    >>> # Normally you would call the \"StringIO.getvalue()\" method on these objects.\n    >>> shp = shx = dbf = None\n\n## Editing Shapefiles\n\nThe Editor class attempts to make changing existing shapefiles easier by\nhandling the reading and writing details behind the scenes.  This class is\nexperimental, has lots of issues, and should be avoided for production use.  *You can do the same\nthing by reading a shapefile into memory, making changes to the python objects,\nand write out a new shapefile with the same or different name.*\n\nLet's add shapes to existing shapefiles:\n\nAdd a point to a point shapefile:\n\n\n    >>> e = shapefile.Editor(shapefile=\"shapefiles/test/point.shp\")\n    >>> e.point(0,0,10,2)\n    >>> e.record(\"Appended\",\"Point\")\n    >>> e.save('shapefiles/test/point')\n\nAdd a new line to a line shapefile:\n\n\n    >>> e = shapefile.Editor(shapefile=\"shapefiles/test/line.shp\")\n    >>> e.line(parts=[[[10,5],[15,5],[15,1],[13,3],[11,1]]])\n    >>> e.record('Appended','Line')\n    >>> e.save('shapefiles/test/line')\n\nAdd a new polygon to a polygon shapefile:\n\n\n    >>> e = shapefile.Editor(shapefile=\"shapefiles/test/polygon.shp\")\n    >>> e.poly(parts=[[[5.1,5],[9.9,5],[9.9,1],[7.5,3],[5.1,1]]])\n    >>> e.record(\"Appended\",\"Polygon\")\n    >>> e.save('shapefiles/test/polygon')\n\nRemove the first point in each shapefile - for a point shapefile that is the\nfirst shape and record\":\n\n\n    >>> e = shapefile.Editor(shapefile=\"shapefiles/test/point.shp\")\n    >>> e.delete(0)\n    >>> e.save('shapefiles/test/point')\n\nRemove the last shape in the polygon shapefile:\n\n\n    >>> e = shapefile.Editor(shapefile=\"shapefiles/test/polygon.shp\")\n    >>> e.delete(-1)\n    >>> e.save('shapefiles/test/polygon')\n    \n### Geometry and Record Balancing\n\nBecause every shape must have a corresponding record it is critical that the\nnumber of records equals the number of shapes to create a valid shapefile. To\nhelp prevent accidental misalignment pyshp has an \"auto balance\" feature to\nmake sure when you add either a shape or a record the two sides of the\nequation line up. This feature is NOT turned on by default. To activate it set\nthe attribute autoBalance to 1 (True):\n\n\n    >>> e.autoBalance = 1\n\nYou also have the option of manually calling the balance() method each time\nyou add a shape or a record to ensure the other side is up to date. When\nbalancing is used null shapes are created on the geometry side or a record\nwith a value of \"NULL\" for each field is created on the attribute side.\n\nThe balancing option gives you flexibility in how you build the shapefile.\n\nWithout auto balancing you can add geometry or records at anytime. You can\ncreate all of the shapes and then create all of the records or vice versa. You\ncan use the balance method after creating a shape or record each time and make\nupdates later. If you do not use the balance method and forget to manually\nbalance the geometry and attributes the shapefile will be viewed as corrupt by\nmost shapefile software.\n\nWith auto balancing you can add either shapes or geometry and update blank\nentries on either side as needed. Even if you forget to update an entry the\nshapefile will still be valid and handled correctly by most shapefile\nsoftware.\n\n## Python \\_\\_geo_interface\\_\\_\n\nThe Python \\_\\_geo_interface\\_\\_ convention provides a data interchange interface\namong geospatial Python libraries. The interface returns data as GeoJSON which gives you\nnice compatibility with other libraries and tools including Shapely, Fiona, and PostGIS. \nMore information on the \\_\\_geo_interface\\_\\_ protocol can be found at:\n[https://gist.github.com/sgillies/2217756](https://gist.github.com/sgillies/2217756).\nMore information on GeoJSON is available at [http://geojson.org](http://geojson.org).\n\n\n    >>> s = sf.shape(0)\n    >>> s.__geo_interface__[\"type\"]\n    'MultiPolygon'\n\n# Testing\n\nThe testing framework is doctest, which are located in this file README.md.\nIn the same folder as README.md and shapefile.py, from the command line run \n```\n$ python shapefile.py\n``` \n\nLinux/Mac and similar platforms will need to run `$ dos2unix README.md` in order\ncorrect line endings in README.md.",
    "docs_url": null,
    "download_url": "https://github.com/GeospatialPython/pyshp/archive/1.2.10.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/GeospatialPython/pyshp",
    "keywords": "gis geospatial geographic shapefile shapefiles",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyshp",
    "platform": "",
    "project_url": "https://pypi.org/project/pyshp/",
    "release_url": "https://pypi.org/project/pyshp/1.2.12/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Pure Python read/write support for ESRI Shapefile format",
    "version": "1.2.12"
  },
  "releases": {
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "94e3365595be166331fdaedd7377631d",
          "sha256": "4c2e4a7f8c8994cf89c0166bfbdfd8335d3d2d4c1f9207c0a0c7df6df91229a0"
        },
        "downloads": 2449,
        "filename": "pyshp-1.0.5-py2.7.egg",
        "has_sig": false,
        "md5_digest": "94e3365595be166331fdaedd7377631d",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 38146,
        "upload_time": "2011-09-02T21:19:11",
        "url": "https://files.pythonhosted.org/packages/35/e4/f3202d9a935a30d628f1e869a535a7fe3c330c7c1afc9ba1f081bcdb9064/pyshp-1.0.5-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4549091975758208bfe755ecbb1a5c81",
          "sha256": "f10a59b955e8d71c8391916bf13ef015b4e89322de4559249ee0c04cd0b94bdc"
        },
        "downloads": 2374,
        "filename": "pyshp-1.0.5.zip",
        "has_sig": false,
        "md5_digest": "4549091975758208bfe755ecbb1a5c81",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27592,
        "upload_time": "2011-09-02T21:18:14",
        "url": "https://files.pythonhosted.org/packages/d9/68/38c3c5e422d54d61dc17b005592b69c4cf242458bcfa6d865efa0b6a68aa/pyshp-1.0.5.zip"
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b17b867a6e8a6e7f136d10aaadfae14d",
          "sha256": "90a363d591cef62dd63c60a8f276120110bd88f651924bed0f16e2cbdcadcc98"
        },
        "downloads": 2457,
        "filename": "pyshp-1.0.6-py2.7.egg",
        "has_sig": false,
        "md5_digest": "b17b867a6e8a6e7f136d10aaadfae14d",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 38197,
        "upload_time": "2011-09-05T18:22:44",
        "url": "https://files.pythonhosted.org/packages/7d/14/9fd7628b12b6bff6b82afd231457dc50f927bee4d547190cd2421eea4531/pyshp-1.0.6-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "03dd68f7b48913fff036ab1142867ca3",
          "sha256": "8fa2482b4c1d71ca5dd73b9ece85f94781636d4a74a87e24eed36c7a11dc538b"
        },
        "downloads": 2399,
        "filename": "pyshp-1.0.6.zip",
        "has_sig": false,
        "md5_digest": "03dd68f7b48913fff036ab1142867ca3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27628,
        "upload_time": "2011-09-05T18:22:12",
        "url": "https://files.pythonhosted.org/packages/ea/bb/fce489a4338dd4a37ad03776c5ec5b1f9ea2d74ecad9cc521af631c3cf48/pyshp-1.0.6.zip"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e5dc20d8dd4d5c5262277a997adcec7e",
          "sha256": "e6e8b33f528d7be6e266d46592127b5c35b607325d7f6975096fb8596df9cfed"
        },
        "downloads": 2756,
        "filename": "pyshp-1.1.0-py2.7.egg",
        "has_sig": false,
        "md5_digest": "e5dc20d8dd4d5c5262277a997adcec7e",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 41504,
        "upload_time": "2011-09-22T05:25:15",
        "url": "https://files.pythonhosted.org/packages/2f/05/430a903f94a78ec5668a8580ea8a1153d13167c441e16edc1373e4eee238/pyshp-1.1.0-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "da89ce9e9124f29fd7f0a8b1fbe995f4",
          "sha256": "525eb76a34f1dbdb4024982bd9c4dd47237031f3a4165f9c49767c2945558a02"
        },
        "downloads": 2355,
        "filename": "pyshp-1.1.0.zip",
        "has_sig": false,
        "md5_digest": "da89ce9e9124f29fd7f0a8b1fbe995f4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 183520,
        "upload_time": "2011-09-22T05:23:53",
        "url": "https://files.pythonhosted.org/packages/8f/fb/5b81d357a69c81975f7563f653e5a2b8315af9d67164137e5525d0d5c826/pyshp-1.1.0.zip"
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "721f915105be8f56eaa0eb54a574d4b0",
          "sha256": "c5d5c8088a70dfc2fd500ae5cbd37735ef8f4ff4f2635f958255781852faf905"
        },
        "downloads": 2380,
        "filename": "pyshp-1.1.3-py2.7.egg",
        "has_sig": false,
        "md5_digest": "721f915105be8f56eaa0eb54a574d4b0",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 28829,
        "upload_time": "2011-09-27T04:58:08",
        "url": "https://files.pythonhosted.org/packages/aa/53/d75eb9a28d12dc9dad73bedd72260917cfb0c885f480454fa46e47e27968/pyshp-1.1.3-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3f1c716ba602f71b495c25a8b27d20a7",
          "sha256": "615ff3ed290305a6427e19df4fc3a494b1b7c328103e07079e649d09ad8f5408"
        },
        "downloads": 2340,
        "filename": "pyshp-1.1.3.zip",
        "has_sig": false,
        "md5_digest": "3f1c716ba602f71b495c25a8b27d20a7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 184036,
        "upload_time": "2011-09-27T04:58:00",
        "url": "https://files.pythonhosted.org/packages/c6/ea/f77e19cf654e99766db49f107b3f77d4d8e486925d5aaa9f003d6001b888/pyshp-1.1.3.zip"
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1abbbee8ffe83e24f7a49b351574c995",
          "sha256": "e2c6f1f6d8b549a632b3ea976a245ac7fb2fb152fe1da47f5dfff486bf728df2"
        },
        "downloads": 5230,
        "filename": "pyshp-1.1.4-py2.7.egg",
        "has_sig": false,
        "md5_digest": "1abbbee8ffe83e24f7a49b351574c995",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 29562,
        "upload_time": "2011-10-03T06:43:59",
        "url": "https://files.pythonhosted.org/packages/9c/2a/61f222f3044e61dee810b81999e55cedfe62c90b17495ec20d05a89df526/pyshp-1.1.4-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "67153ea40a3d162ce5946b23b8f67d6a",
          "sha256": "8a54365252cf56f09341f28aee0ec6b3ef1ce83f37ace5cc272e50b63309ac81"
        },
        "downloads": 50767,
        "filename": "pyshp-1.1.4.zip",
        "has_sig": false,
        "md5_digest": "67153ea40a3d162ce5946b23b8f67d6a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 183836,
        "upload_time": "2011-10-03T06:43:47",
        "url": "https://files.pythonhosted.org/packages/0d/34/8c7df11cd1c46022a3860038f2bf5c015fc9912a9a90cf8297fcb035e9f5/pyshp-1.1.4.zip"
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1404f804c0eabe101eee57781e31c6dd",
          "sha256": "d8ee8dd95550c0ff80be37ad11e8b8c36b8420b6ee0d00d6e5c68ae4d7e055fa"
        },
        "downloads": 1916,
        "filename": "pyshp-1.1.7-py2.7.egg",
        "has_sig": false,
        "md5_digest": "1404f804c0eabe101eee57781e31c6dd",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 32741,
        "upload_time": "2013-06-23T19:34:25",
        "url": "https://files.pythonhosted.org/packages/18/ec/9327222ad784c82b0ae84bb049290b28ce1ee24dd61e6c4fa96034919891/pyshp-1.1.7-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2a6ab78d48308000f1ad7e73f20227f4",
          "sha256": "f0785f589cf3fa94f13a2709f0ad950cca6566774f8e96f874edb2c0a7034c7c"
        },
        "downloads": 1874,
        "filename": "pyshp-1.1.7-py3.2.egg",
        "has_sig": false,
        "md5_digest": "2a6ab78d48308000f1ad7e73f20227f4",
        "packagetype": "bdist_egg",
        "python_version": "3.2",
        "size": 33235,
        "upload_time": "2013-06-23T19:42:05",
        "url": "https://files.pythonhosted.org/packages/85/a6/f9cfe5364249a0c34c9459135813350d92ed896f2e5ca5ed5e6452e1ab8a/pyshp-1.1.7-py3.2.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8372c3b1414f92bbd72c2707c28795a5",
          "sha256": "8fb6988282a27d9e6ae50816b6fee644a62ff05b07808c64423a97794d513551"
        },
        "downloads": 2030,
        "filename": "pyshp-1.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "8372c3b1414f92bbd72c2707c28795a5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 47017,
        "upload_time": "2013-06-23T19:35:15",
        "url": "https://files.pythonhosted.org/packages/4f/6a/0fb71cf32e07c07120c971588856002e6a6561ff67cdc2a7c800290a7df3/pyshp-1.1.7.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b44b739267f7871e0efd1f9b5868b952",
          "sha256": "2632771a0abfb763620f95695712b36cbd41f704a92fc5a58be8fa4172d73984"
        },
        "downloads": 2084,
        "filename": "pyshp-1.1.7.zip",
        "has_sig": false,
        "md5_digest": "b44b739267f7871e0efd1f9b5868b952",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58690,
        "upload_time": "2013-06-23T19:34:39",
        "url": "https://files.pythonhosted.org/packages/a7/47/26fc798c72312b74ed06da13cbaeb6aacb903f7a6bfb67457778ad3cf41f/pyshp-1.1.7.zip"
      }
    ],
    "1.1.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0a9c3eaa782c6b95e91eb08e4d5454b9",
          "sha256": "a3aa489205b7ea4933aa005bcdb5e7341a0a0190d023128c5590e0b391f02ca4"
        },
        "downloads": 2008,
        "filename": "pyshp-1.1.8-py2.7.egg",
        "has_sig": false,
        "md5_digest": "0a9c3eaa782c6b95e91eb08e4d5454b9",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 33233,
        "upload_time": "2013-07-02T16:36:10",
        "url": "https://files.pythonhosted.org/packages/41/72/8e17e9085090320206f5471d2831d6df03cf651a47745921ea4b1cd83c7f/pyshp-1.1.8-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "04908cbd64302f1c2c8b022fcfd3fc1a",
          "sha256": "2b2bcef4c941c9aeaeb91333347ab353dfd83d16a8f62116c331ad85bc8902aa"
        },
        "downloads": 1925,
        "filename": "pyshp-1.1.8-py3.2.egg",
        "has_sig": false,
        "md5_digest": "04908cbd64302f1c2c8b022fcfd3fc1a",
        "packagetype": "bdist_egg",
        "python_version": "3.2",
        "size": 33730,
        "upload_time": "2013-07-02T16:36:17",
        "url": "https://files.pythonhosted.org/packages/0c/45/ad23342fbfb2bba82c307a6c3b75a2e98bc83855bd8417e3defddd5916bd/pyshp-1.1.8-py3.2.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d3eb5fe70de2c3019cb8385fc367ca92",
          "sha256": "97742b8855090b50dd3e4a9c510024e31a6b8b48da6b642d3e3ad28732710bd8"
        },
        "downloads": 4356,
        "filename": "pyshp-1.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "d3eb5fe70de2c3019cb8385fc367ca92",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48766,
        "upload_time": "2013-07-02T16:36:04",
        "url": "https://files.pythonhosted.org/packages/27/92/7c2db73be5d32d1faed842ca5a7796641d7d36c21d8d86200750c14546dc/pyshp-1.1.8.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b75768d467c1ca88fcbd9d7d75d62018",
          "sha256": "4c9c8468e152c5e773cc46cddf591074d5ad0df4bb3f5393e6403e5a7788cf7d"
        },
        "downloads": 3626,
        "filename": "pyshp-1.1.8.zip",
        "has_sig": false,
        "md5_digest": "b75768d467c1ca88fcbd9d7d75d62018",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 60372,
        "upload_time": "2013-07-02T16:36:01",
        "url": "https://files.pythonhosted.org/packages/8c/1f/d8013ab5ab369e83204fefca929da9acc8114f5d15c0df1ea1f0fe309b7a/pyshp-1.1.8.zip"
      }
    ],
    "1.1.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0d6095d8a822745f9c8b8c48a7b0a5ec",
          "sha256": "2bec94ca576860418b9cc6501abf1a0617921b301bfc7be82cc49b97903381bb"
        },
        "downloads": 2093,
        "filename": "pyshp-1.1.9-py2.7.egg",
        "has_sig": false,
        "md5_digest": "0d6095d8a822745f9c8b8c48a7b0a5ec",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 33931,
        "upload_time": "2013-07-27T21:09:47",
        "url": "https://files.pythonhosted.org/packages/21/99/fc1fcdd6966719171d59392944ec127c3a1a52b24a2f18be7b764453e093/pyshp-1.1.9-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "25eb1ac17bd49c64babc69329d6addc4",
          "sha256": "575669332c132bcad25f3c063fa9bc7f3bef1772c4f96b5d9080c8db2155f203"
        },
        "downloads": 1944,
        "filename": "pyshp-1.1.9-py3.2.egg",
        "has_sig": false,
        "md5_digest": "25eb1ac17bd49c64babc69329d6addc4",
        "packagetype": "bdist_egg",
        "python_version": "3.2",
        "size": 34442,
        "upload_time": "2013-07-27T21:09:53",
        "url": "https://files.pythonhosted.org/packages/73/23/5dce5a890e00469686708cd0b16ce4912a1340ea63c085263bb84c62ca0b/pyshp-1.1.9-py3.2.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "415d7bc6668ebf3ed8d28541c37aad93",
          "sha256": "6d88007c9158b28856b1b61bb696668f673a9050ae21255f066b293380dc81af"
        },
        "downloads": 7643,
        "filename": "pyshp-1.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "415d7bc6668ebf3ed8d28541c37aad93",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 50620,
        "upload_time": "2013-07-27T21:09:40",
        "url": "https://files.pythonhosted.org/packages/1d/73/e2d7bb82a8c6a2f4a81ce3774c5c4fa78f86ca8828be0cfb4bf3ec5692fd/pyshp-1.1.9.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ce245620ce9b0f1c0c80018b90e6b4b0",
          "sha256": "1e391df5818347588396e56bcd7cc69c44fbdece55c5100d5d3342f4b29e8d4a"
        },
        "downloads": 4642,
        "filename": "pyshp-1.1.9.zip",
        "has_sig": false,
        "md5_digest": "ce245620ce9b0f1c0c80018b90e6b4b0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 62577,
        "upload_time": "2013-07-27T21:09:36",
        "url": "https://files.pythonhosted.org/packages/aa/c2/4591baf1fb02625b44b7ee788909f87b388a35b7715422cde003a3b45075/pyshp-1.1.9.zip"
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3af141343620cf2d5840fbb221e29ebf",
          "sha256": "e11bc95bdda086edc573349a138c502610ed36f045d0fd11bc296961f1f71522"
        },
        "downloads": 3286,
        "filename": "pyshp-1.2.0-py2.7.egg",
        "has_sig": false,
        "md5_digest": "3af141343620cf2d5840fbb221e29ebf",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 34243,
        "upload_time": "2013-09-06T02:09:14",
        "url": "https://files.pythonhosted.org/packages/ea/83/649bc72ef657520febf2440ba1d2bc769911ac26594cd77c013d9eafdf08/pyshp-1.2.0-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b97e9b21e04bd1fc2f98fec6b088febf",
          "sha256": "d97dc0cb471366ec08c39fc4ee8441646b5dbd1eff8adcef55c61fc9ffb06619"
        },
        "downloads": 1991,
        "filename": "pyshp-1.2.0-py3.2.egg",
        "has_sig": false,
        "md5_digest": "b97e9b21e04bd1fc2f98fec6b088febf",
        "packagetype": "bdist_egg",
        "python_version": "3.2",
        "size": 34763,
        "upload_time": "2013-09-06T02:09:21",
        "url": "https://files.pythonhosted.org/packages/13/d8/be9adfe5bd2686df7d9acc00dce7f0ee86ff31c661262dfe31f5d94aa6f3/pyshp-1.2.0-py3.2.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9075f34109f0bb4b45a90fd1fb5db94b",
          "sha256": "16e9a9b5caae5b69149c7be09415381b61af4f85f2087d08c0698c75e70000e7"
        },
        "downloads": 51897,
        "filename": "pyshp-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9075f34109f0bb4b45a90fd1fb5db94b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58993,
        "upload_time": "2013-09-06T02:09:08",
        "url": "https://files.pythonhosted.org/packages/3e/a0/1c763c5809faa97cbfc1fb7ad31f470da897d130c473032c2c8f22bec253/pyshp-1.2.0.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1ab1a1c76740636eeaa3af5889c033ea",
          "sha256": "5975e46808fd9c804774765984330fb695822f096554bb0eda16cf5547a4690c"
        },
        "downloads": 3321,
        "filename": "pyshp-1.2.0.zip",
        "has_sig": false,
        "md5_digest": "1ab1a1c76740636eeaa3af5889c033ea",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 63934,
        "upload_time": "2013-09-06T02:09:06",
        "url": "https://files.pythonhosted.org/packages/7b/63/624ab15ec0504ae0ef4e1de4f48ec49baf277dcd0e18640f8a634a8b5483/pyshp-1.2.0.zip"
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "60f092c8f27a9e672fc0e3ad8cde44db",
          "sha256": "35b65f6e807723746030c2af7caffc5b30298ab272bbf7c0e2687b0ce81e62cb"
        },
        "downloads": 4029,
        "filename": "pyshp-1.2.1-py2.7.egg",
        "has_sig": false,
        "md5_digest": "60f092c8f27a9e672fc0e3ad8cde44db",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 34514,
        "upload_time": "2014-05-12T03:02:52",
        "url": "https://files.pythonhosted.org/packages/29/ec/c866a53668c89b0f1d54c0acad97dfe47ce57aeb5f01735aff7a92f4274f/pyshp-1.2.1-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ac1dffea96e676030e99b4cbd54e3cc2",
          "sha256": "89883764ade2d4071dadc8589dcc941bcd49fad0c143f07425cb2ed525723819"
        },
        "downloads": 1882,
        "filename": "pyshp-1.2.1-py3.2.egg",
        "has_sig": false,
        "md5_digest": "ac1dffea96e676030e99b4cbd54e3cc2",
        "packagetype": "bdist_egg",
        "python_version": "3.2",
        "size": 35043,
        "upload_time": "2014-05-12T03:02:59",
        "url": "https://files.pythonhosted.org/packages/35/84/08a5a3a12a3f767a3dde8cad4c461f86cfdc9f09d6786b1beaf368960259/pyshp-1.2.1-py3.2.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "156654b3c7878c4a31d27e4b9dc34377",
          "sha256": "eb4a1999f7c7bd573f3c8920344f50bd86221114980f07f521858d23654a33b0"
        },
        "downloads": 121734,
        "filename": "pyshp-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "156654b3c7878c4a31d27e4b9dc34377",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 59218,
        "upload_time": "2014-05-12T03:02:48",
        "url": "https://files.pythonhosted.org/packages/20/98/18103bcbca6086aad96f7386d05486303fbca45ad852baa9e3c2dd69930b/pyshp-1.2.1.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2a6ea8f28bd104393b8618e855fb68d4",
          "sha256": "c4bb7fa3446ffc79bc2d136c8b2c0bdc5aba5495c7b556e7627290271096ba44"
        },
        "downloads": 2590,
        "filename": "pyshp-1.2.1.zip",
        "has_sig": false,
        "md5_digest": "2a6ea8f28bd104393b8618e855fb68d4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 64160,
        "upload_time": "2014-05-12T03:02:44",
        "url": "https://files.pythonhosted.org/packages/f4/20/d97172b34bc25b7495b7fe56e35dff00b8952aedb6cb5200569324f90fe4/pyshp-1.2.1.zip"
      }
    ],
    "1.2.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cff5b8530f747656f518526054c43eee",
          "sha256": "009e02b281d7f509c34d31aca3545334e45bea15136f3bb81a37b4d13e21f9bd"
        },
        "downloads": 9997,
        "filename": "pyshp-1.2.10.tar.gz",
        "has_sig": false,
        "md5_digest": "cff5b8530f747656f518526054c43eee",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 176501,
        "upload_time": "2016-09-24T19:48:32",
        "url": "https://files.pythonhosted.org/packages/c2/cc/1851049f2740d09c7bd8e4b464b1b78638723f6173e71d44aea12deca1f8/pyshp-1.2.10.tar.gz"
      }
    ],
    "1.2.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6734346e50ad4b6003318d00dff8da4c",
          "sha256": "8b4be2ec3d816067972e9ecc38526e9c45e9ee9b49b7fd94acfab9c0fc84fa63"
        },
        "downloads": 0,
        "filename": "pyshp-1.2.11.tar.gz",
        "has_sig": false,
        "md5_digest": "6734346e50ad4b6003318d00dff8da4c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 192763,
        "upload_time": "2017-04-29T21:14:41",
        "url": "https://files.pythonhosted.org/packages/31/a1/b4bc192188af5b761bb5dde39fde6c1439adef0dc63c62bcdacb215ace6a/pyshp-1.2.11.tar.gz"
      }
    ],
    "1.2.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "63d33d151ac308f1db71ea0f22c30d8b",
          "sha256": "8dcd65e0aa2aa2951527ddb7339ea6e69023543d8a20a73fc51e2829b9ed6179"
        },
        "downloads": 0,
        "filename": "pyshp-1.2.12.tar.gz",
        "has_sig": false,
        "md5_digest": "63d33d151ac308f1db71ea0f22c30d8b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 193089,
        "upload_time": "2017-08-24T14:58:09",
        "url": "https://files.pythonhosted.org/packages/c8/ac/8e9adb8e0dadabbb3b708d38a83119ee42115d9f8fd88858261f5bec50f0/pyshp-1.2.12.tar.gz"
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dc99cd3237f20894d5b9d445275390a6",
          "sha256": "0fb48d9fe8db5f6c8709c437cbb13bf8b44a31a47c79970f1d1397f56352b39f"
        },
        "downloads": 3404,
        "filename": "pyshp-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dc99cd3237f20894d5b9d445275390a6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28707,
        "upload_time": "2015-06-22T03:03:59",
        "url": "https://files.pythonhosted.org/packages/d0/b8/43638fae7e1fa75e428533453f03a5589a5cd1f2260ed20757399c6d7f9a/pyshp-1.2.2.tar.gz"
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f857099a57f93830e0c72a31e9c506a8",
          "sha256": "e18cc19659dadc5ddaa891eb780a6958094da0cf105a1efe0f67e75b4fa1cdf9"
        },
        "downloads": 40714,
        "filename": "pyshp-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f857099a57f93830e0c72a31e9c506a8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28708,
        "upload_time": "2015-06-22T04:11:09",
        "url": "https://files.pythonhosted.org/packages/e1/90/f6a8734f6fbf31cc1d133e90c9dfa4ddf34fa6e387e44fbd79b0cf38a14e/pyshp-1.2.3.tar.gz"
      }
    ],
    "1.2.9": []
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "63d33d151ac308f1db71ea0f22c30d8b",
        "sha256": "8dcd65e0aa2aa2951527ddb7339ea6e69023543d8a20a73fc51e2829b9ed6179"
      },
      "downloads": 0,
      "filename": "pyshp-1.2.12.tar.gz",
      "has_sig": false,
      "md5_digest": "63d33d151ac308f1db71ea0f22c30d8b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 193089,
      "upload_time": "2017-08-24T14:58:09",
      "url": "https://files.pythonhosted.org/packages/c8/ac/8e9adb8e0dadabbb3b708d38a83119ee42115d9f8fd88858261f5bec50f0/pyshp-1.2.12.tar.gz"
    }
  ]
}