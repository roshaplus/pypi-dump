{
  "info": {
    "author": "Joel Lawhead",
    "author_email": "jlawhead@geospatialpython.com",
    "bugtrack_url": "",
    "classifiers": [
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: GIS",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "PyShp\r\n++++++\r\n\r\nThe Python Shapefile Library (pyshp) reads and writes ESRI Shapefiles in\r\npure Python.\r\n\r\n.. figure:: http://4.bp.blogspot.com/_SBi37QEsCvg/TPQuOhlHQxI/AAAAAAAAAE0/QjFlWfMx0tQ/S350/GSP_Logo.png\r\n   :alt: PyShp\r\n\r\n|Build Status|\r\n\r\nContents\r\n========\r\n\r\n- `Overview <#overview>`__\r\n\r\n- `Examples <#examples>`__ \r\n\r\n  - `Reading Shapefiles <#reading-shapefiles>`__\r\n\r\n  - `Writing Shapefiles <#writing-shapefiles>`__\r\n\r\n  - `Editing Shapefiles <#editing-shapefiles>`__\r\n\r\n  - `Testing <#testing>`__\r\n\r\nOverview\r\n========\r\n\r\nThe Python Shapefile Library (pyshp) provides read and write support for\r\nthe Esri Shapefile format. The Shapefile format is a popular Geographic\r\nInformation System vector data format created by Esri. For more\r\ninformation about this format please read the well-written \"ESRI\r\nShapefile Technical Description - July 1998\" located at\r\n`http://www.esri.com/library/whitepapers/p\r\ndfs/shapefile.pdf <http://www.esri.com/library/whitepapers/pdfs/shapefile.pdf>`__\r\n. The Esri document describes the shp and shx file formats. However a\r\nthird file format called dbf is also required. This format is documented\r\non the web as the \"XBase File Format Description\" and is a simple\r\nfile-based database format created in the 1960's. For more on this\r\nspecification see:\r\n`http://www.clicketyclick.dk/databases/xbase/format/index.html <http://www.clicketyclick.d%20k/databases/xbase/format/index.html>`__\r\n\r\nBoth the Esri and XBase file-formats are very simple in design and\r\nmemory efficient which is part of the reason the shapefile format\r\nremains popular despite the numerous ways to store and exchange GIS data\r\navailable today.\r\n\r\nPyshp is compatible with Python 2.4-3.x.\r\n\r\nThis document provides examples for using pyshp to read and write\r\nshapefiles. However many more examples are continually added to the\r\npyshp wiki on GitHub, the blog http://GeospatialPython.com, and by\r\nsearching for pyshp on https://gis.stackexchange.com.\r\n\r\nCurrently the sample census blockgroup shapefile referenced in the\r\nexamples is available on the GitHub project site at\r\nhttps://github.com/GeospatialPython/pyshp. These examples are\r\nstraight-forward and you can also easily run them against your own\r\nshapefiles with minimal modification.\r\n\r\nImportant: If you are new to GIS you should read about map projections.\r\nPlease visit:\r\nhttps://github.com/GeospatialPython/pyshp/wiki/Map-Projections\r\n\r\nI sincerely hope this library eliminates the mundane distraction of\r\nsimply reading and writing data, and allows you to focus on the\r\nchallenging and FUN part of your geospatial project.\r\n\r\nExamples\r\n========\r\n\r\nBefore doing anything you must import the library.\r\n\r\n::\r\n\r\n    >>> import shapefile\r\n\r\nThe examples below will use a shapefile created from the U.S. Census\r\nBureau Blockgroups data set near San Francisco, CA and available in the\r\ngit repository of the pyshp GitHub site.\r\n\r\nReading Shapefiles\r\n------------------\r\n\r\nTo read a shapefile create a new \"Reader\" object and pass it the name of\r\nan existing shapefile. The shapefile format is actually a collection of\r\nthree files. You specify the base filename of the shapefile or the\r\ncomplete filename of any of the shapefile component files.\r\n\r\n::\r\n\r\n    >>> sf = shapefile.Reader(\"shapefiles/blockgroups\")\r\n\r\nOR\r\n\r\n::\r\n\r\n    >>> sf = shapefile.Reader(\"shapefiles/blockgroups.shp\")\r\n\r\nOR\r\n\r\n::\r\n\r\n    >>> sf = shapefile.Reader(\"shapefiles/blockgroups.dbf\")\r\n\r\nOR any of the other 5+ formats which are potentially part of a\r\nshapefile. The library does not care about file extensions.\r\n\r\nReading Shapefiles from File-Like Objects\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nYou can also load shapefiles from any Python file-like object using\r\nkeyword arguments to specify any of the three files. This feature is\r\nvery powerful and allows you to load shapefiles from a url, from a zip\r\nfile, serialized object, or in some cases a database.\r\n\r\n::\r\n\r\n    >>> myshp = open(\"shapefiles/blockgroups.shp\", \"rb\")\r\n    >>> mydbf = open(\"shapefiles/blockgroups.dbf\", \"rb\")\r\n    >>> r = shapefile.Reader(shp=myshp, dbf=mydbf)\r\n\r\nNotice in the examples above the shx file is never used. The shx file is\r\na very simple fixed-record index for the variable length records in the\r\nshp file. This file is optional for reading. If it's available pyshp\r\nwill use the shx file to access shape records a little faster but will\r\ndo just fine without it.\r\n\r\nReading Geometry\r\n~~~~~~~~~~~~~~~~\r\n\r\nA shapefile's geometry is the collection of points or shapes made from\r\nvertices and implied arcs representing physical locations. All types of\r\nshapefiles just store points. The metadata about the points determine\r\nhow they are handled by software.\r\n\r\nYou can get the a list of the shapefile's geometry by calling the\r\nshapes() method.\r\n\r\n::\r\n\r\n    >>> shapes = sf.shapes()\r\n\r\nThe shapes method returns a list of Shape objects describing the\r\ngeometry of each shape record.\r\n\r\n::\r\n\r\n    >>> len(shapes)\r\n    663\r\n\r\nYou can iterate through the shapefile's geometry using the iterShapes()\r\nmethod.\r\n\r\n::\r\n\r\n    >>> len(list(sf.iterShapes()))\r\n    663\r\n\r\nEach shape record contains the following attributes:\r\n\r\n::\r\n\r\n    >>> for name in dir(shapes[3]):\r\n    ...     if not name.startswith('__'):\r\n    ...         name\r\n    'bbox'\r\n    'parts'\r\n    'points'\r\n    'shapeType'\r\n\r\n-  shapeType: an integer representing the type of shape as defined by\r\n   the shapefile specification.\r\n\r\n   ::\r\n\r\n       >>> shapes[3].shapeType\r\n       5\r\n\r\n-  bbox: If the shape type contains multiple points this tuple describes\r\n   the lower left (x,y) coordinate and upper right corner coordinate\r\n   creating a complete box around the points. If the shapeType is a Null\r\n   (shapeType == 0) then an AttributeError is raised.\r\n\r\n   ::\r\n\r\n       >>> # Get the bounding box of the 4th shape.\r\n       >>> # Round coordinates to 3 decimal places\r\n       >>> bbox = shapes[3].bbox\r\n       >>> ['%.3f' % coord for coord in bbox]\r\n       ['-122.486', '37.787', '-122.446', '37.811']\r\n\r\n-  parts: Parts simply group collections of points into shapes. If the\r\n   shape record has multiple parts this attribute contains the index of\r\n   the first point of each part. If there is only one part then a list\r\n   containing 0 is returned.\r\n\r\n   ::\r\n\r\n       >>> shapes[3].parts\r\n       [0]\r\n\r\n-  points: The points attribute contains a list of tuples containing an\r\n   (x,y) coordinate for each point in the shape.\r\n\r\n   ::\r\n\r\n       >>> len(shapes[3].points)\r\n       173\r\n       >>> # Get the 8th point of the fourth shape\r\n       >>> # Truncate coordinates to 3 decimal places\r\n       >>> shape = shapes[3].points[7]\r\n       >>> ['%.3f' % coord for coord in shape]\r\n       ['-122.471', '37.787']\r\n\r\nTo read a single shape by calling its index use the shape() method. The\r\nindex is the shape's count from 0. So to read the 8th shape record you\r\nwould use its index which is 7.\r\n\r\n::\r\n\r\n    >>> s = sf.shape(7)\r\n\r\n    >>> # Read the bbox of the 8th shape to verify\r\n    >>> # Round coordinates to 3 decimal places\r\n    >>> ['%.3f' % coord for coord in s.bbox]\r\n    ['-122.450', '37.801', '-122.442', '37.808']\r\n\r\nReading Records\r\n~~~~~~~~~~~~~~~\r\n\r\nA record in a shapefile contains the attributes for each shape in the\r\ncollection of geometry. Records are stored in the dbf file. The link\r\nbetween geometry and attributes is the foundation of all geographic\r\ninformation systems. This critical link is implied by the order of\r\nshapes and corresponding records in the shp geometry file and the dbf\r\nattribute file.\r\n\r\nThe field names of a shapefile are available as soon as you read a\r\nshapefile. You can call the \"fields\" attribute of the shapefile as a\r\nPython list. Each field is a Python list with the following information:\r\n\r\n-  Field name: the name describing the data at this column index.\r\n-  Field type: the type of data at this column index. Types can be:\r\n   Character, Numbers, Longs, Dates, or Memo. The \"Memo\" type has no\r\n   meaning within a GIS and is part of the xbase spec instead.\r\n-  Field length: the length of the data found at this column index.\r\n   Older GIS software may truncate this length to 8 or 11 characters for\r\n   \"Character\" fields.\r\n-  Decimal length: the number of decimal places found in \"Number\"\r\n   fields.\r\n\r\nTo see the fields for the Reader object above (sf) call the \"fields\"\r\nattribute:\r\n\r\n::\r\n\r\n    >>> fields = sf.fields\r\n\r\n    >>> assert fields == [(\"DeletionFlag\", \"C\", 1, 0), [\"AREA\", \"N\", 18, 5],\r\n    ... [\"BKG_KEY\", \"C\", 12, 0], [\"POP1990\", \"N\", 9, 0], [\"POP90_SQMI\", \"N\", 10, 1],\r\n    ... [\"HOUSEHOLDS\", \"N\", 9, 0],\r\n    ... [\"MALES\", \"N\", 9, 0], [\"FEMALES\", \"N\", 9, 0], [\"WHITE\", \"N\", 9, 0],\r\n    ... [\"BLACK\", \"N\", 8, 0], [\"AMERI_ES\", \"N\", 7, 0], [\"ASIAN_PI\", \"N\", 8, 0],\r\n    ... [\"OTHER\", \"N\", 8, 0], [\"HISPANIC\", \"N\", 8, 0], [\"AGE_UNDER5\", \"N\", 8, 0],\r\n    ... [\"AGE_5_17\", \"N\", 8, 0], [\"AGE_18_29\", \"N\", 8, 0], [\"AGE_30_49\", \"N\", 8, 0],\r\n    ... [\"AGE_50_64\", \"N\", 8, 0], [\"AGE_65_UP\", \"N\", 8, 0],\r\n    ... [\"NEVERMARRY\", \"N\", 8, 0], [\"MARRIED\", \"N\", 9, 0], [\"SEPARATED\", \"N\", 7, 0],\r\n    ... [\"WIDOWED\", \"N\", 8, 0], [\"DIVORCED\", \"N\", 8, 0], [\"HSEHLD_1_M\", \"N\", 8, 0],\r\n    ... [\"HSEHLD_1_F\", \"N\", 8, 0], [\"MARHH_CHD\", \"N\", 8, 0],\r\n    ... [\"MARHH_NO_C\", \"N\", 8, 0], [\"MHH_CHILD\", \"N\", 7, 0],\r\n    ... [\"FHH_CHILD\", \"N\", 7, 0], [\"HSE_UNITS\", \"N\", 9, 0], [\"VACANT\", \"N\", 7, 0],\r\n    ... [\"OWNER_OCC\", \"N\", 8, 0], [\"RENTER_OCC\", \"N\", 8, 0],\r\n    ... [\"MEDIAN_VAL\", \"N\", 7, 0], [\"MEDIANRENT\", \"N\", 4, 0],\r\n    ... [\"UNITS_1DET\", \"N\", 8, 0], [\"UNITS_1ATT\", \"N\", 7, 0], [\"UNITS2\", \"N\", 7, 0],\r\n    ... [\"UNITS3_9\", \"N\", 8, 0], [\"UNITS10_49\", \"N\", 8, 0],\r\n    ... [\"UNITS50_UP\", \"N\", 8, 0], [\"MOBILEHOME\", \"N\", 7, 0]]\r\n\r\nYou can get a list of the shapefile's records by calling the records()\r\nmethod:\r\n\r\n::\r\n\r\n    >>> records = sf.records()\r\n\r\n    >>> len(records)\r\n    663\r\n\r\nSimilar to the geometry methods, you can iterate through dbf records\r\nusing the iterRecords() method.\r\n\r\n::\r\n\r\n    >>> len(list(sf.iterRecords()))\r\n    663\r\n\r\nEach record is a list containing an attribute corresponding to each\r\nfield in the field list.\r\n\r\nFor example in the 4th record of the blockgroups shapefile the 2nd and\r\n3rd fields are the blockgroup id and the 1990 population count of that\r\nSan Francisco blockgroup:\r\n\r\n::\r\n\r\n    >>> records[3][1:3]\r\n    ['060750601001', 4715]\r\n\r\nTo read a single record call the record() method with the record's\r\nindex:\r\n\r\n::\r\n\r\n    >>> rec = sf.record(3)\r\n\r\n    >>> rec[1:3]\r\n    ['060750601001', 4715]\r\n\r\nReading Geometry and Records Simultaneously\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nYou may want to examine both the geometry and the attributes for a\r\nrecord at the same time. The shapeRecord() and shapeRecords() method let\r\nyou do just that.\r\n\r\nCalling the shapeRecords() method will return the geometry and\r\nattributes for all shapes as a list of ShapeRecord objects. Each\r\nShapeRecord instance has a \"shape\" and \"record\" attribute. The shape\r\nattribute is a ShapeRecord object as discussed in the first section\r\n\"Reading Geometry\". The record attribute is a list of field values as\r\ndemonstrated in the \"Reading Records\" section.\r\n\r\n::\r\n\r\n    >>> shapeRecs = sf.shapeRecords()\r\n\r\nLet's read the blockgroup key and the population for the 4th blockgroup:\r\n\r\n::\r\n\r\n    >>> shapeRecs[3].record[1:3]\r\n    ['060750601001', 4715]\r\n\r\nNow let's read the first two points for that same record:\r\n\r\n::\r\n\r\n    >>> points = shapeRecs[3].shape.points[0:2]\r\n\r\n    >>> len(points)\r\n    2\r\n\r\nThe shapeRecord() method reads a single shape/record pair at the\r\nspecified index. To get the 4th shape record from the blockgroups\r\nshapefile use the third index:\r\n\r\n::\r\n\r\n    >>> shapeRec = sf.shapeRecord(3)\r\n\r\nThe blockgroup key and population count:\r\n\r\n::\r\n\r\n    >>> shapeRec.record[1:3]\r\n    ['060750601001', 4715]\r\n\r\n    >>> points = shapeRec.shape.points[0:2]\r\n\r\n    >>> len(points)\r\n    2\r\n\r\nThere is also an iterShapeRecords() method to iterate through large\r\nfiles:\r\n\r\n::\r\n\r\n    >>> shapeRecs = sf.iterShapeRecords()\r\n    >>> for shapeRec in shapeRecs:\r\n    ...     # do something here\r\n    ...     pass\r\n\r\nWriting Shapefiles\r\n------------------\r\n\r\nPyShp tries to be as flexible as possible when writing shapefiles while\r\nmaintaining some degree of automatic validation to make sure you don't\r\naccidentally write an invalid file.\r\n\r\nPyShp can write just one of the component files such as the shp or dbf\r\nfile without writing the others. So in addition to being a complete\r\nshapefile library, it can also be used as a basic dbf (xbase) library.\r\nDbf files are a common database format which are often useful as a\r\nstandalone simple database format. And even shp files occasionally have\r\nuses as a standalone format. Some web-based GIS systems use an\r\nuser-uploaded shp file to specify an area of interest. Many precision\r\nagriculture chemical field sprayers also use the shp format as a control\r\nfile for the sprayer system (usually in combination with custom database\r\nfile formats).\r\n\r\nTo create a shapefile you add geometry and/or attributes using methods\r\nin the Writer class until you are ready to save the file.\r\n\r\nCreate an instance of the Writer class to begin creating a shapefile:\r\n\r\n::\r\n\r\n    >>> w = shapefile.Writer()\r\n\r\nSetting the Shape Type\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThe shape type defines the type of geometry contained in the shapefile.\r\nAll of the shapes must match the shape type setting.\r\n\r\nShape types are represented by numbers between 0 and 31 as defined by\r\nthe shapefile specification. It is important to note that numbering\r\nsystem has several reserved numbers which have not been used yet\r\ntherefore the numbers of the existing shape types are not sequential.\r\n\r\nThere are three ways to set the shape type: \\* Set it when creating the\r\nclass instance. \\* Set it by assigning a value to an existing class\r\ninstance. \\* Set it automatically to the type of the first non-null\r\nshape by saving the shapefile.\r\n\r\nTo manually set the shape type for a Writer object when creating the\r\nWriter:\r\n\r\n::\r\n\r\n    >>> w = shapefile.Writer(shapeType=1)\r\n\r\n    >>> w.shapeType\r\n    1\r\n\r\nOR you can set it after the Writer is created:\r\n\r\n::\r\n\r\n    >>> w.shapeType = 3\r\n\r\n    >>> w.shapeType\r\n    3\r\n\r\nGeometry and Record Balancing\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nBecause every shape must have a corresponding record it is critical that\r\nthe number of records equals the number of shapes to create a valid\r\nshapefile. You must take care to add records and shapes in the same\r\norder so that the record data lines up with the geometry data. For\r\nexample:\r\n\r\n::\r\n\r\n    >>> w.field(\"field1\", \"C\")\r\n    >>> w.field(\"field2\", \"C\")\r\n    >>> w.record(\"row\", \"one\")\r\n    >>> w.record(\"row\", \"two\")\r\n    >>> w.point(1, 1)\r\n    >>> w.point(2, 2)\r\n\r\nAdding Geometry\r\n~~~~~~~~~~~~~~~\r\n\r\nGeometry is added using one of three methods: \"null\", \"point\", or\r\n\"poly\". The \"null\" method is used for null shapes, \"point\" is used for\r\npoint shapes, \"line\" for lines, and \"poly\" is used for polygons and\r\neverything else.\r\n\r\n**Adding a Point shape**\r\n\r\nPoint shapes are added using the \"point\" method. A point is specified by\r\nan x, y, and optional z (elevation) and m (measure) value.\r\n\r\n::\r\n\r\n    >>> w = shapefile.Writer(shapefile.POINTM)\r\n\r\n    >>> w.point(122, 37) # No elevation or measure values\r\n\r\n    >>> w.shapes()[0].points\r\n    [[122, 37, 0, 0]]\r\n\r\n    >>> w.point(118, 36, 4, 8)\r\n\r\n    >>> w.shapes()[1].points\r\n    [[118, 36, 4, 8]]\r\n\r\n    >>> w.field('FIRST_FLD', 'C')\r\n    >>> w.field('SECOND_FLD', 'C')\r\n\r\n    >>> w.save('shapefiles/test/point')\r\n\r\n**Adding a Polygon shape**\r\n\r\nShapefile polygons must have at least 4 points and the last point must\r\nbe the same as the first. PyShp automatically enforces closed polygons.\r\n\r\n::\r\n\r\n    >>> w = shapefile.Writer()\r\n\r\n    >>> w.poly(parts=[[[122,37,4,9], [117,36,3,4]], [[115,32,8,8],\r\n    ... [118,20,6,4], [113,24]]])\r\n\r\n    >>> w.field('FIRST_FLD', 'C')\r\n    >>> w.field('SECOND_FLD', 'C')\r\n\r\n    >>> w.save('shapefiles/test/polygon')\r\n\r\n**Adding a Line shape**\r\n\r\nA line must have at least two points. Because of the similarities\r\nbetween polygon and line types it is possible to create a line shape\r\nusing either the \"line\" or \"poly\" method.\r\n\r\n::\r\n\r\n    >>> w = shapefile.Writer()\r\n\r\n    >>> w.line(parts=[[[1,5],[5,5],[5,1],[3,3],[1,1]]])\r\n    >>> w.poly(parts=[[[1,3],[5,3]]], shapeType=shapefile.POLYLINE)\r\n\r\n    >>> w.field('FIRST_FLD', 'C')\r\n    >>> w.field('SECOND_FLD', 'C')\r\n\r\n    >>> w.save('shapefiles/test/polygon')\r\n\r\n**Adding a Null shape**\r\n\r\nBecause Null shape types (shape type 0) have no geometry the \"null\"\r\nmethod is called without any arguments. This type of shapefile is rarely\r\nused but it is valid.\r\n\r\n::\r\n\r\n    >>> w = shapefile.Writer()\r\n\r\n    >>> w.null()\r\n\r\nThe writer object's shapes list will now have one null shape:\r\n\r\n::\r\n\r\n    >>> assert w.shapes()[0].shapeType == shapefile.NULL\r\n\r\nCreating Attributes\r\n~~~~~~~~~~~~~~~~~~~\r\n\r\nCreating attributes involves two steps. Step 1 is to create fields to\r\ncontain attribute values and step 2 is to populate the fields with\r\nvalues for each shape record.\r\n\r\nThere are several different field types, all of which support storing\r\nNone values as NULL.\r\n\r\nText fields are created using the 'C' type, and the third 'size'\r\nargument can be customized to the expected length of text values to save\r\nspace:\r\n\r\n::\r\n\r\n    >>> w = shapefile.Writer()\r\n    >>> w.field('TEXT', 'C')\r\n    >>> w.field('SHORT_TEXT', 'C', size=5)\r\n    >>> w.field('LONG_TEXT', 'C', size=250)\r\n    >>> w.null()\r\n    >>> w.record('Hello', 'World', 'World'*50)\r\n    >>> w.save('shapefiles/test/dtype')\r\n\r\n    >>> r = shapefile.Reader('shapefiles/test/dtype')\r\n    >>> assert r.record(0) == ['Hello', 'World', 'World'*50]\r\n\r\nDate fields are created using the 'D' type, and can be created using\r\neither date objects, lists, or a YYYYMMDD formatted string. Field length\r\nor decimal have no impact on this type:\r\n\r\n::\r\n\r\n    >>> from datetime import date\r\n    >>> w = shapefile.Writer()\r\n    >>> w.field('DATE', 'D')\r\n    >>> w.null()\r\n    >>> w.null()\r\n    >>> w.null()\r\n    >>> w.null()\r\n    >>> w.record(date(1998,1,30))\r\n    >>> w.record([1998,1,30])\r\n    >>> w.record('19980130')\r\n    >>> w.record(None)\r\n    >>> w.save('shapefiles/test/dtype')\r\n\r\n    >>> r = shapefile.Reader('shapefiles/test/dtype')\r\n    >>> assert r.record(0) == [date(1998,1,30)]\r\n    >>> assert r.record(1) == [date(1998,1,30)]\r\n    >>> assert r.record(2) == [date(1998,1,30)]\r\n    >>> assert r.record(3) == [None]\r\n\r\nNumeric fields are created using the 'N' type (or the 'F' type, which is\r\nexactly the same). By default the fourth decimal argument is set to\r\nzero, essentially creating an integer field. To store floats you must\r\nset the decimal argument to the precision of your choice. To store very\r\nlarge numbers you must increase the field length size to the total\r\nnumber of digits (including comma and minus).\r\n\r\n::\r\n\r\n    >>> w = shapefile.Writer()\r\n    >>> w.field('INT', 'N')\r\n    >>> w.field('LOWPREC', 'N', decimal=2)\r\n    >>> w.field('MEDPREC', 'N', decimal=10)\r\n    >>> w.field('HIGHPREC', 'N', decimal=30)\r\n    >>> w.field('FTYPE', 'F', decimal=10)\r\n    >>> w.field('LARGENR', 'N', 101)\r\n    >>> nr = 1.3217328\r\n    >>> w.null()\r\n    >>> w.null()\r\n    >>> w.record(INT=int(nr), LOWPREC=nr, MEDPREC=nr, HIGHPREC=-3.2302e-25, FTYPE=nr, LARGENR=int(nr)*10**100)\r\n    >>> w.record(None, None, None, None, None, None)\r\n    >>> w.save('shapefiles/test/dtype')\r\n\r\n    >>> r = shapefile.Reader('shapefiles/test/dtype')\r\n    >>> assert r.record(0) == [1, 1.32, 1.3217328, -3.2302e-25, 1.3217328, 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000]\r\n    >>> assert r.record(1) == [None, None, None, None, None, None]\r\n\r\nFinally, we can create boolean fields by setting the type to 'L'. This\r\nfield can take True or False values, or 1 (True) or 0 (False). None is\r\ninterpreted as missing.\r\n\r\n::\r\n\r\n    >>> w = shapefile.Writer()\r\n    >>> w.field('BOOLEAN', 'L')\r\n    >>> w.null()\r\n    >>> w.null()\r\n    >>> w.null()\r\n    >>> w.null()\r\n    >>> w.null()\r\n    >>> w.record(True)\r\n    >>> w.record(1)\r\n    >>> w.record(False)\r\n    >>> w.record(0)\r\n    >>> w.record(None)\r\n    >>> w.record(\"Nonesense\")\r\n    >>> w.save('shapefiles/test/dtype')\r\n\r\n    >>> r = shapefile.Reader('shapefiles/test/dtype')\r\n    >>> r.record(0)\r\n    [True]\r\n    >>> r.record(1)\r\n    [True]\r\n    >>> r.record(2)\r\n    [False]\r\n    >>> r.record(3)\r\n    [False]\r\n    >>> r.record(4)\r\n    [None]\r\n    >>> r.record(5)\r\n    [None]\r\n\r\nYou can also add attributes using keyword arguments where the keys are\r\nfield names.\r\n\r\n::\r\n\r\n    >>> w = shapefile.Writer()\r\n    >>> w.field('FIRST_FLD','C','40')\r\n    >>> w.field('SECOND_FLD','C','40')\r\n    >>> w.record('First', 'Line')\r\n    >>> w.record(FIRST_FLD='First', SECOND_FLD='Line')\r\n    >>> assert w.records[0] == w.records[1]\r\n\r\nFile Names\r\n~~~~~~~~~~\r\n\r\nFile extensions are optional when reading or writing shapefiles. If you\r\nspecify them PyShp ignores them anyway. When you save files you can\r\nspecify a base file name that is used for all three file types. Or you\r\ncan specify a name for one or more file types. In that case, any file\r\ntypes not assigned will not save and only file types with file names\r\nwill be saved. If you do not specify any file names (i.e. save()), then\r\na unique file name is generated with the prefix \"shapefile\\_\" followed\r\nby random characters which is used for all three files. The unique file\r\nname is returned as a string.\r\n\r\n::\r\n\r\n    >>> targetName = w.save()\r\n    >>> assert(\"shapefile_\" in targetName)\r\n\r\nSaving to File-Like Objects\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nJust as you can read shapefiles from python file-like objects you can\r\nalso write them.\r\n\r\n::\r\n\r\n    >>> try:\r\n    ...     from StringIO import StringIO\r\n    ... except ImportError:\r\n    ...     from io import BytesIO as StringIO\r\n    >>> shp = StringIO()\r\n    >>> shx = StringIO()\r\n    >>> dbf = StringIO()\r\n    >>> w.saveShp(shp)\r\n    >>> w.saveShx(shx)\r\n    >>> w.saveDbf(dbf)\r\n    >>> # Normally you would call the \"StringIO.getvalue()\" method on these objects.\r\n    >>> shp = shx = dbf = None\r\n\r\nEditing Shapefiles\r\n------------------\r\n\r\nThe Editor class attempts to make changing existing shapefiles easier by\r\nhandling the reading and writing details behind the scenes. This class\r\nis experimental, has lots of issues, and should be avoided for\r\nproduction use. *You can do the same thing by reading a shapefile into\r\nmemory, making changes to the python objects, and write out a new\r\nshapefile with the same or different name.*\r\n\r\nLet's add shapes to existing shapefiles:\r\n\r\nAdd a point to a point shapefile:\r\n\r\n::\r\n\r\n    >>> e = shapefile.Editor(shapefile=\"shapefiles/test/point.shp\")\r\n    >>> e.point(0,0,10,2)\r\n    >>> e.record(\"Appended\",\"Point\")\r\n    >>> e.save('shapefiles/test/point')\r\n\r\nAdd a new line to a line shapefile:\r\n\r\n::\r\n\r\n    >>> e = shapefile.Editor(shapefile=\"shapefiles/test/line.shp\")\r\n    >>> e.line(parts=[[[10,5],[15,5],[15,1],[13,3],[11,1]]])\r\n    >>> e.record('Appended','Line')\r\n    >>> e.save('shapefiles/test/line')\r\n\r\nAdd a new polygon to a polygon shapefile:\r\n\r\n::\r\n\r\n    >>> e = shapefile.Editor(shapefile=\"shapefiles/test/polygon.shp\")\r\n    >>> e.poly(parts=[[[5.1,5],[9.9,5],[9.9,1],[7.5,3],[5.1,1]]])\r\n    >>> e.record(\"Appended\",\"Polygon\")\r\n    >>> e.save('shapefiles/test/polygon')\r\n\r\nRemove the first point in each shapefile - for a point shapefile that is\r\nthe first shape and record\":\r\n\r\n::\r\n\r\n    >>> e = shapefile.Editor(shapefile=\"shapefiles/test/point.shp\")\r\n    >>> e.delete(0)\r\n    >>> e.save('shapefiles/test/point')\r\n\r\nRemove the last shape in the polygon shapefile:\r\n\r\n::\r\n\r\n    >>> e = shapefile.Editor(shapefile=\"shapefiles/test/polygon.shp\")\r\n    >>> e.delete(-1)\r\n    >>> e.save('shapefiles/test/polygon')\r\n\r\nGeometry and Record Balancing\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nBecause every shape must have a corresponding record it is critical that\r\nthe number of records equals the number of shapes to create a valid\r\nshapefile. To help prevent accidental misalignment pyshp has an \"auto\r\nbalance\" feature to make sure when you add either a shape or a record\r\nthe two sides of the equation line up. This feature is NOT turned on by\r\ndefault. To activate it set the attribute autoBalance to 1 (True):\r\n\r\n::\r\n\r\n    >>> e.autoBalance = 1\r\n\r\nYou also have the option of manually calling the balance() method each\r\ntime you add a shape or a record to ensure the other side is up to date.\r\nWhen balancing is used null shapes are created on the geometry side or a\r\nrecord with a value of \"NULL\" for each field is created on the attribute\r\nside.\r\n\r\nThe balancing option gives you flexibility in how you build the\r\nshapefile.\r\n\r\nWithout auto balancing you can add geometry or records at anytime. You\r\ncan create all of the shapes and then create all of the records or vice\r\nversa. You can use the balance method after creating a shape or record\r\neach time and make updates later. If you do not use the balance method\r\nand forget to manually balance the geometry and attributes the shapefile\r\nwill be viewed as corrupt by most shapefile software.\r\n\r\nWith auto balancing you can add either shapes or geometry and update\r\nblank entries on either side as needed. Even if you forget to update an\r\nentry the shapefile will still be valid and handled correctly by most\r\nshapefile software.\r\n\r\nPython \\_\\_geo\\_interface\\_\\_\r\n-----------------------------\r\n\r\nThe Python \\_\\_geo\\_interface\\_\\_ convention provides a data interchange\r\ninterface among geospatial Python libraries. The interface returns data\r\nas GeoJSON which gives you nice compatibility with other libraries and\r\ntools including Shapely, Fiona, and PostGIS. More information on the\r\n\\_\\_geo\\_interface\\_\\_ protocol can be found at:\r\nhttps://gist.github.com/sgillies/2217756. More information on GeoJSON is\r\navailable at http://geojson.org.\r\n\r\n::\r\n\r\n    >>> s = sf.shape(0)\r\n    >>> s.__geo_interface__[\"type\"]\r\n    'MultiPolygon'\r\n\r\nTesting\r\n=======\r\n\r\nThe testing framework is doctest, which are located in this file\r\nREADME.md. In the same folder as README.md and shapefile.py, from the\r\ncommand line run\r\n\r\n::\r\n\r\n    $ python shapefile.py\r\n\r\nLinux/Mac and similar platforms will need to run ``$ dos2unix README.md`` in order correct line endings in README.md. \r\n\r\n.. |Build Status| image:: https://travis-ci.org/GeospatialPython/pyshp.svg?branch=master\r\n   :target: https://travis-ci.org/GeospatialPython/pyshp",
    "docs_url": null,
    "download_url": "https://github.com/GeospatialPython/pyshp/archive/1.2.11.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/GeospatialPython/pyshp",
    "keywords": "gis geospatial geographic shapefile shapefiles",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyshp",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pyshp/",
    "release_url": "https://pypi.org/project/pyshp/1.2.11/",
    "requires_python": "",
    "summary": "Pure Python read/write support for ESRI Shapefile format",
    "version": "1.2.11"
  },
  "releases": {
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "94e3365595be166331fdaedd7377631d",
          "sha256": "4c2e4a7f8c8994cf89c0166bfbdfd8335d3d2d4c1f9207c0a0c7df6df91229a0"
        },
        "downloads": 2449,
        "filename": "pyshp-1.0.5-py2.7.egg",
        "has_sig": false,
        "md5_digest": "94e3365595be166331fdaedd7377631d",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 38146,
        "upload_time": "2011-09-02T21:19:11",
        "url": "https://files.pythonhosted.org/packages/35/e4/f3202d9a935a30d628f1e869a535a7fe3c330c7c1afc9ba1f081bcdb9064/pyshp-1.0.5-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4549091975758208bfe755ecbb1a5c81",
          "sha256": "f10a59b955e8d71c8391916bf13ef015b4e89322de4559249ee0c04cd0b94bdc"
        },
        "downloads": 2374,
        "filename": "pyshp-1.0.5.zip",
        "has_sig": false,
        "md5_digest": "4549091975758208bfe755ecbb1a5c81",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27592,
        "upload_time": "2011-09-02T21:18:14",
        "url": "https://files.pythonhosted.org/packages/d9/68/38c3c5e422d54d61dc17b005592b69c4cf242458bcfa6d865efa0b6a68aa/pyshp-1.0.5.zip"
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b17b867a6e8a6e7f136d10aaadfae14d",
          "sha256": "90a363d591cef62dd63c60a8f276120110bd88f651924bed0f16e2cbdcadcc98"
        },
        "downloads": 2457,
        "filename": "pyshp-1.0.6-py2.7.egg",
        "has_sig": false,
        "md5_digest": "b17b867a6e8a6e7f136d10aaadfae14d",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 38197,
        "upload_time": "2011-09-05T18:22:44",
        "url": "https://files.pythonhosted.org/packages/7d/14/9fd7628b12b6bff6b82afd231457dc50f927bee4d547190cd2421eea4531/pyshp-1.0.6-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "03dd68f7b48913fff036ab1142867ca3",
          "sha256": "8fa2482b4c1d71ca5dd73b9ece85f94781636d4a74a87e24eed36c7a11dc538b"
        },
        "downloads": 2399,
        "filename": "pyshp-1.0.6.zip",
        "has_sig": false,
        "md5_digest": "03dd68f7b48913fff036ab1142867ca3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27628,
        "upload_time": "2011-09-05T18:22:12",
        "url": "https://files.pythonhosted.org/packages/ea/bb/fce489a4338dd4a37ad03776c5ec5b1f9ea2d74ecad9cc521af631c3cf48/pyshp-1.0.6.zip"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e5dc20d8dd4d5c5262277a997adcec7e",
          "sha256": "e6e8b33f528d7be6e266d46592127b5c35b607325d7f6975096fb8596df9cfed"
        },
        "downloads": 2756,
        "filename": "pyshp-1.1.0-py2.7.egg",
        "has_sig": false,
        "md5_digest": "e5dc20d8dd4d5c5262277a997adcec7e",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 41504,
        "upload_time": "2011-09-22T05:25:15",
        "url": "https://files.pythonhosted.org/packages/2f/05/430a903f94a78ec5668a8580ea8a1153d13167c441e16edc1373e4eee238/pyshp-1.1.0-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "da89ce9e9124f29fd7f0a8b1fbe995f4",
          "sha256": "525eb76a34f1dbdb4024982bd9c4dd47237031f3a4165f9c49767c2945558a02"
        },
        "downloads": 2355,
        "filename": "pyshp-1.1.0.zip",
        "has_sig": false,
        "md5_digest": "da89ce9e9124f29fd7f0a8b1fbe995f4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 183520,
        "upload_time": "2011-09-22T05:23:53",
        "url": "https://files.pythonhosted.org/packages/8f/fb/5b81d357a69c81975f7563f653e5a2b8315af9d67164137e5525d0d5c826/pyshp-1.1.0.zip"
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "721f915105be8f56eaa0eb54a574d4b0",
          "sha256": "c5d5c8088a70dfc2fd500ae5cbd37735ef8f4ff4f2635f958255781852faf905"
        },
        "downloads": 2380,
        "filename": "pyshp-1.1.3-py2.7.egg",
        "has_sig": false,
        "md5_digest": "721f915105be8f56eaa0eb54a574d4b0",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 28829,
        "upload_time": "2011-09-27T04:58:08",
        "url": "https://files.pythonhosted.org/packages/aa/53/d75eb9a28d12dc9dad73bedd72260917cfb0c885f480454fa46e47e27968/pyshp-1.1.3-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3f1c716ba602f71b495c25a8b27d20a7",
          "sha256": "615ff3ed290305a6427e19df4fc3a494b1b7c328103e07079e649d09ad8f5408"
        },
        "downloads": 2340,
        "filename": "pyshp-1.1.3.zip",
        "has_sig": false,
        "md5_digest": "3f1c716ba602f71b495c25a8b27d20a7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 184036,
        "upload_time": "2011-09-27T04:58:00",
        "url": "https://files.pythonhosted.org/packages/c6/ea/f77e19cf654e99766db49f107b3f77d4d8e486925d5aaa9f003d6001b888/pyshp-1.1.3.zip"
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1abbbee8ffe83e24f7a49b351574c995",
          "sha256": "e2c6f1f6d8b549a632b3ea976a245ac7fb2fb152fe1da47f5dfff486bf728df2"
        },
        "downloads": 5230,
        "filename": "pyshp-1.1.4-py2.7.egg",
        "has_sig": false,
        "md5_digest": "1abbbee8ffe83e24f7a49b351574c995",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 29562,
        "upload_time": "2011-10-03T06:43:59",
        "url": "https://files.pythonhosted.org/packages/9c/2a/61f222f3044e61dee810b81999e55cedfe62c90b17495ec20d05a89df526/pyshp-1.1.4-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "67153ea40a3d162ce5946b23b8f67d6a",
          "sha256": "8a54365252cf56f09341f28aee0ec6b3ef1ce83f37ace5cc272e50b63309ac81"
        },
        "downloads": 50767,
        "filename": "pyshp-1.1.4.zip",
        "has_sig": false,
        "md5_digest": "67153ea40a3d162ce5946b23b8f67d6a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 183836,
        "upload_time": "2011-10-03T06:43:47",
        "url": "https://files.pythonhosted.org/packages/0d/34/8c7df11cd1c46022a3860038f2bf5c015fc9912a9a90cf8297fcb035e9f5/pyshp-1.1.4.zip"
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1404f804c0eabe101eee57781e31c6dd",
          "sha256": "d8ee8dd95550c0ff80be37ad11e8b8c36b8420b6ee0d00d6e5c68ae4d7e055fa"
        },
        "downloads": 1916,
        "filename": "pyshp-1.1.7-py2.7.egg",
        "has_sig": false,
        "md5_digest": "1404f804c0eabe101eee57781e31c6dd",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 32741,
        "upload_time": "2013-06-23T19:34:25",
        "url": "https://files.pythonhosted.org/packages/18/ec/9327222ad784c82b0ae84bb049290b28ce1ee24dd61e6c4fa96034919891/pyshp-1.1.7-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2a6ab78d48308000f1ad7e73f20227f4",
          "sha256": "f0785f589cf3fa94f13a2709f0ad950cca6566774f8e96f874edb2c0a7034c7c"
        },
        "downloads": 1874,
        "filename": "pyshp-1.1.7-py3.2.egg",
        "has_sig": false,
        "md5_digest": "2a6ab78d48308000f1ad7e73f20227f4",
        "packagetype": "bdist_egg",
        "python_version": "3.2",
        "size": 33235,
        "upload_time": "2013-06-23T19:42:05",
        "url": "https://files.pythonhosted.org/packages/85/a6/f9cfe5364249a0c34c9459135813350d92ed896f2e5ca5ed5e6452e1ab8a/pyshp-1.1.7-py3.2.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8372c3b1414f92bbd72c2707c28795a5",
          "sha256": "8fb6988282a27d9e6ae50816b6fee644a62ff05b07808c64423a97794d513551"
        },
        "downloads": 2030,
        "filename": "pyshp-1.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "8372c3b1414f92bbd72c2707c28795a5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 47017,
        "upload_time": "2013-06-23T19:35:15",
        "url": "https://files.pythonhosted.org/packages/4f/6a/0fb71cf32e07c07120c971588856002e6a6561ff67cdc2a7c800290a7df3/pyshp-1.1.7.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b44b739267f7871e0efd1f9b5868b952",
          "sha256": "2632771a0abfb763620f95695712b36cbd41f704a92fc5a58be8fa4172d73984"
        },
        "downloads": 2084,
        "filename": "pyshp-1.1.7.zip",
        "has_sig": false,
        "md5_digest": "b44b739267f7871e0efd1f9b5868b952",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58690,
        "upload_time": "2013-06-23T19:34:39",
        "url": "https://files.pythonhosted.org/packages/a7/47/26fc798c72312b74ed06da13cbaeb6aacb903f7a6bfb67457778ad3cf41f/pyshp-1.1.7.zip"
      }
    ],
    "1.1.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0a9c3eaa782c6b95e91eb08e4d5454b9",
          "sha256": "a3aa489205b7ea4933aa005bcdb5e7341a0a0190d023128c5590e0b391f02ca4"
        },
        "downloads": 2008,
        "filename": "pyshp-1.1.8-py2.7.egg",
        "has_sig": false,
        "md5_digest": "0a9c3eaa782c6b95e91eb08e4d5454b9",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 33233,
        "upload_time": "2013-07-02T16:36:10",
        "url": "https://files.pythonhosted.org/packages/41/72/8e17e9085090320206f5471d2831d6df03cf651a47745921ea4b1cd83c7f/pyshp-1.1.8-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "04908cbd64302f1c2c8b022fcfd3fc1a",
          "sha256": "2b2bcef4c941c9aeaeb91333347ab353dfd83d16a8f62116c331ad85bc8902aa"
        },
        "downloads": 1925,
        "filename": "pyshp-1.1.8-py3.2.egg",
        "has_sig": false,
        "md5_digest": "04908cbd64302f1c2c8b022fcfd3fc1a",
        "packagetype": "bdist_egg",
        "python_version": "3.2",
        "size": 33730,
        "upload_time": "2013-07-02T16:36:17",
        "url": "https://files.pythonhosted.org/packages/0c/45/ad23342fbfb2bba82c307a6c3b75a2e98bc83855bd8417e3defddd5916bd/pyshp-1.1.8-py3.2.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d3eb5fe70de2c3019cb8385fc367ca92",
          "sha256": "97742b8855090b50dd3e4a9c510024e31a6b8b48da6b642d3e3ad28732710bd8"
        },
        "downloads": 4356,
        "filename": "pyshp-1.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "d3eb5fe70de2c3019cb8385fc367ca92",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48766,
        "upload_time": "2013-07-02T16:36:04",
        "url": "https://files.pythonhosted.org/packages/27/92/7c2db73be5d32d1faed842ca5a7796641d7d36c21d8d86200750c14546dc/pyshp-1.1.8.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b75768d467c1ca88fcbd9d7d75d62018",
          "sha256": "4c9c8468e152c5e773cc46cddf591074d5ad0df4bb3f5393e6403e5a7788cf7d"
        },
        "downloads": 3626,
        "filename": "pyshp-1.1.8.zip",
        "has_sig": false,
        "md5_digest": "b75768d467c1ca88fcbd9d7d75d62018",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 60372,
        "upload_time": "2013-07-02T16:36:01",
        "url": "https://files.pythonhosted.org/packages/8c/1f/d8013ab5ab369e83204fefca929da9acc8114f5d15c0df1ea1f0fe309b7a/pyshp-1.1.8.zip"
      }
    ],
    "1.1.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0d6095d8a822745f9c8b8c48a7b0a5ec",
          "sha256": "2bec94ca576860418b9cc6501abf1a0617921b301bfc7be82cc49b97903381bb"
        },
        "downloads": 2093,
        "filename": "pyshp-1.1.9-py2.7.egg",
        "has_sig": false,
        "md5_digest": "0d6095d8a822745f9c8b8c48a7b0a5ec",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 33931,
        "upload_time": "2013-07-27T21:09:47",
        "url": "https://files.pythonhosted.org/packages/21/99/fc1fcdd6966719171d59392944ec127c3a1a52b24a2f18be7b764453e093/pyshp-1.1.9-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "25eb1ac17bd49c64babc69329d6addc4",
          "sha256": "575669332c132bcad25f3c063fa9bc7f3bef1772c4f96b5d9080c8db2155f203"
        },
        "downloads": 1944,
        "filename": "pyshp-1.1.9-py3.2.egg",
        "has_sig": false,
        "md5_digest": "25eb1ac17bd49c64babc69329d6addc4",
        "packagetype": "bdist_egg",
        "python_version": "3.2",
        "size": 34442,
        "upload_time": "2013-07-27T21:09:53",
        "url": "https://files.pythonhosted.org/packages/73/23/5dce5a890e00469686708cd0b16ce4912a1340ea63c085263bb84c62ca0b/pyshp-1.1.9-py3.2.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "415d7bc6668ebf3ed8d28541c37aad93",
          "sha256": "6d88007c9158b28856b1b61bb696668f673a9050ae21255f066b293380dc81af"
        },
        "downloads": 7643,
        "filename": "pyshp-1.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "415d7bc6668ebf3ed8d28541c37aad93",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 50620,
        "upload_time": "2013-07-27T21:09:40",
        "url": "https://files.pythonhosted.org/packages/1d/73/e2d7bb82a8c6a2f4a81ce3774c5c4fa78f86ca8828be0cfb4bf3ec5692fd/pyshp-1.1.9.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ce245620ce9b0f1c0c80018b90e6b4b0",
          "sha256": "1e391df5818347588396e56bcd7cc69c44fbdece55c5100d5d3342f4b29e8d4a"
        },
        "downloads": 4642,
        "filename": "pyshp-1.1.9.zip",
        "has_sig": false,
        "md5_digest": "ce245620ce9b0f1c0c80018b90e6b4b0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 62577,
        "upload_time": "2013-07-27T21:09:36",
        "url": "https://files.pythonhosted.org/packages/aa/c2/4591baf1fb02625b44b7ee788909f87b388a35b7715422cde003a3b45075/pyshp-1.1.9.zip"
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3af141343620cf2d5840fbb221e29ebf",
          "sha256": "e11bc95bdda086edc573349a138c502610ed36f045d0fd11bc296961f1f71522"
        },
        "downloads": 3286,
        "filename": "pyshp-1.2.0-py2.7.egg",
        "has_sig": false,
        "md5_digest": "3af141343620cf2d5840fbb221e29ebf",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 34243,
        "upload_time": "2013-09-06T02:09:14",
        "url": "https://files.pythonhosted.org/packages/ea/83/649bc72ef657520febf2440ba1d2bc769911ac26594cd77c013d9eafdf08/pyshp-1.2.0-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b97e9b21e04bd1fc2f98fec6b088febf",
          "sha256": "d97dc0cb471366ec08c39fc4ee8441646b5dbd1eff8adcef55c61fc9ffb06619"
        },
        "downloads": 1991,
        "filename": "pyshp-1.2.0-py3.2.egg",
        "has_sig": false,
        "md5_digest": "b97e9b21e04bd1fc2f98fec6b088febf",
        "packagetype": "bdist_egg",
        "python_version": "3.2",
        "size": 34763,
        "upload_time": "2013-09-06T02:09:21",
        "url": "https://files.pythonhosted.org/packages/13/d8/be9adfe5bd2686df7d9acc00dce7f0ee86ff31c661262dfe31f5d94aa6f3/pyshp-1.2.0-py3.2.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9075f34109f0bb4b45a90fd1fb5db94b",
          "sha256": "16e9a9b5caae5b69149c7be09415381b61af4f85f2087d08c0698c75e70000e7"
        },
        "downloads": 51897,
        "filename": "pyshp-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9075f34109f0bb4b45a90fd1fb5db94b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58993,
        "upload_time": "2013-09-06T02:09:08",
        "url": "https://files.pythonhosted.org/packages/3e/a0/1c763c5809faa97cbfc1fb7ad31f470da897d130c473032c2c8f22bec253/pyshp-1.2.0.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1ab1a1c76740636eeaa3af5889c033ea",
          "sha256": "5975e46808fd9c804774765984330fb695822f096554bb0eda16cf5547a4690c"
        },
        "downloads": 3321,
        "filename": "pyshp-1.2.0.zip",
        "has_sig": false,
        "md5_digest": "1ab1a1c76740636eeaa3af5889c033ea",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 63934,
        "upload_time": "2013-09-06T02:09:06",
        "url": "https://files.pythonhosted.org/packages/7b/63/624ab15ec0504ae0ef4e1de4f48ec49baf277dcd0e18640f8a634a8b5483/pyshp-1.2.0.zip"
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "60f092c8f27a9e672fc0e3ad8cde44db",
          "sha256": "35b65f6e807723746030c2af7caffc5b30298ab272bbf7c0e2687b0ce81e62cb"
        },
        "downloads": 4029,
        "filename": "pyshp-1.2.1-py2.7.egg",
        "has_sig": false,
        "md5_digest": "60f092c8f27a9e672fc0e3ad8cde44db",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 34514,
        "upload_time": "2014-05-12T03:02:52",
        "url": "https://files.pythonhosted.org/packages/29/ec/c866a53668c89b0f1d54c0acad97dfe47ce57aeb5f01735aff7a92f4274f/pyshp-1.2.1-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ac1dffea96e676030e99b4cbd54e3cc2",
          "sha256": "89883764ade2d4071dadc8589dcc941bcd49fad0c143f07425cb2ed525723819"
        },
        "downloads": 1882,
        "filename": "pyshp-1.2.1-py3.2.egg",
        "has_sig": false,
        "md5_digest": "ac1dffea96e676030e99b4cbd54e3cc2",
        "packagetype": "bdist_egg",
        "python_version": "3.2",
        "size": 35043,
        "upload_time": "2014-05-12T03:02:59",
        "url": "https://files.pythonhosted.org/packages/35/84/08a5a3a12a3f767a3dde8cad4c461f86cfdc9f09d6786b1beaf368960259/pyshp-1.2.1-py3.2.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "156654b3c7878c4a31d27e4b9dc34377",
          "sha256": "eb4a1999f7c7bd573f3c8920344f50bd86221114980f07f521858d23654a33b0"
        },
        "downloads": 121734,
        "filename": "pyshp-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "156654b3c7878c4a31d27e4b9dc34377",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 59218,
        "upload_time": "2014-05-12T03:02:48",
        "url": "https://files.pythonhosted.org/packages/20/98/18103bcbca6086aad96f7386d05486303fbca45ad852baa9e3c2dd69930b/pyshp-1.2.1.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2a6ea8f28bd104393b8618e855fb68d4",
          "sha256": "c4bb7fa3446ffc79bc2d136c8b2c0bdc5aba5495c7b556e7627290271096ba44"
        },
        "downloads": 2590,
        "filename": "pyshp-1.2.1.zip",
        "has_sig": false,
        "md5_digest": "2a6ea8f28bd104393b8618e855fb68d4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 64160,
        "upload_time": "2014-05-12T03:02:44",
        "url": "https://files.pythonhosted.org/packages/f4/20/d97172b34bc25b7495b7fe56e35dff00b8952aedb6cb5200569324f90fe4/pyshp-1.2.1.zip"
      }
    ],
    "1.2.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cff5b8530f747656f518526054c43eee",
          "sha256": "009e02b281d7f509c34d31aca3545334e45bea15136f3bb81a37b4d13e21f9bd"
        },
        "downloads": 9997,
        "filename": "pyshp-1.2.10.tar.gz",
        "has_sig": false,
        "md5_digest": "cff5b8530f747656f518526054c43eee",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 176501,
        "upload_time": "2016-09-24T19:48:32",
        "url": "https://files.pythonhosted.org/packages/c2/cc/1851049f2740d09c7bd8e4b464b1b78638723f6173e71d44aea12deca1f8/pyshp-1.2.10.tar.gz"
      }
    ],
    "1.2.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6734346e50ad4b6003318d00dff8da4c",
          "sha256": "8b4be2ec3d816067972e9ecc38526e9c45e9ee9b49b7fd94acfab9c0fc84fa63"
        },
        "downloads": 0,
        "filename": "pyshp-1.2.11.tar.gz",
        "has_sig": false,
        "md5_digest": "6734346e50ad4b6003318d00dff8da4c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 192763,
        "upload_time": "2017-04-29T21:14:41",
        "url": "https://files.pythonhosted.org/packages/31/a1/b4bc192188af5b761bb5dde39fde6c1439adef0dc63c62bcdacb215ace6a/pyshp-1.2.11.tar.gz"
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dc99cd3237f20894d5b9d445275390a6",
          "sha256": "0fb48d9fe8db5f6c8709c437cbb13bf8b44a31a47c79970f1d1397f56352b39f"
        },
        "downloads": 3404,
        "filename": "pyshp-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dc99cd3237f20894d5b9d445275390a6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28707,
        "upload_time": "2015-06-22T03:03:59",
        "url": "https://files.pythonhosted.org/packages/d0/b8/43638fae7e1fa75e428533453f03a5589a5cd1f2260ed20757399c6d7f9a/pyshp-1.2.2.tar.gz"
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f857099a57f93830e0c72a31e9c506a8",
          "sha256": "e18cc19659dadc5ddaa891eb780a6958094da0cf105a1efe0f67e75b4fa1cdf9"
        },
        "downloads": 40714,
        "filename": "pyshp-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f857099a57f93830e0c72a31e9c506a8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28708,
        "upload_time": "2015-06-22T04:11:09",
        "url": "https://files.pythonhosted.org/packages/e1/90/f6a8734f6fbf31cc1d133e90c9dfa4ddf34fa6e387e44fbd79b0cf38a14e/pyshp-1.2.3.tar.gz"
      }
    ],
    "1.2.9": []
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6734346e50ad4b6003318d00dff8da4c",
        "sha256": "8b4be2ec3d816067972e9ecc38526e9c45e9ee9b49b7fd94acfab9c0fc84fa63"
      },
      "downloads": 0,
      "filename": "pyshp-1.2.11.tar.gz",
      "has_sig": false,
      "md5_digest": "6734346e50ad4b6003318d00dff8da4c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 192763,
      "upload_time": "2017-04-29T21:14:41",
      "url": "https://files.pythonhosted.org/packages/31/a1/b4bc192188af5b761bb5dde39fde6c1439adef0dc63c62bcdacb215ace6a/pyshp-1.2.11.tar.gz"
    }
  ]
}