{
  "info": {
    "author": "David R. Mortensen",
    "author_email": "dmortens@cs.cmu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "PanPhon\n=======\n\nThis package constitutes a database of segments in the International\nPhonetic Alphabet (IPA) and their equivalents in terms of (articulatory)\nphonological features. They include both data files and the tool\n``generate_ipa_all.py``, which allows the application of rules for\ndiacritics and modifiers to collections of IPA characters, data files,\nand configuration/rule files and well as the tool ``validate_ipa.py``,\nwhich checks Unicode IPA text from STDIN for well-formedness.\n\nPython API for Accessing Phonological Features of IPA Segments\n--------------------------------------------------------------\n\nThe ``panphon`` module provides a straightforward API that allows users\nand developers to access the segment-feature relationships encoded in\nthe IPA database ``panphon/data/ipa_all.csv``.\n\n::\n\n    >>> import panphon.panphon as panphon\n    >>> ft = panphon.FeatureTable()\n    >>> ft.ftr_match(set([(u'+', u'syl')]), u'a')\n    True\n    >>> ft.segs(u'p\u02b2a\u0303k')\n    [u'p\\u02b2', u'a\\u0303', u'k']\\\n    >>> ft.word_fts(u'p\u02b2a\u0303k')\n    [set([(u'-', u'syl'), (u'-', u'long'), (u'-', u'voi'), (u'+', u'ant'), (u'-', u'cg'), (u'+', u'hi'), (u'-', u'son'), (u'0', u'tense'), (u'-', u'lat'), (u'-', u'back'), (u'-', u'cont'), (u'-', u'nas'), (u'-', u'lo'), (u'0', u'distr'), (u'-', u'round'), (u'-', u'delrel'), (u'+', u'lab'), (u'-', u'sg'), (u'+', u'cons'), (u'0', u'strid'), (u'-', u'cor')]), set([(u'+', u'son'), (u'+', u'tense'), (u'+', u'cont'), (u'+', u'nas'), (u'+', u'lo'), (u'+', u'voi'), (u'-', u'cg'), (u'-', u'hi'), (u'-', u'lat'), (u'+', u'syl'), (u'0', u'strid'), (u'-', u'long'), (u'-', u'cor'), (u'0', u'distr'), (u'-', u'round'), (u'-', u'delrel'), (u'0', u'ant'), (u'-', u'sg'), (u'+', u'back'), (u'-', u'cons'), (u'-', u'lab')]), set([(u'-', u'syl'), (u'-', u'lab'), (u'-', u'voi'), (u'0', u'distr'), (u'+', u'back'), (u'-', u'cg'), (u'+', u'hi'), (u'-', u'son'), (u'0', u'tense'), (u'-', u'lat'), (u'-', u'cont'), (u'-', u'nas'), (u'-', u'lo'), (u'-', u'ant'), (u'-', u'round'), (u'-', u'delrel'), (u'-', u'sg'), (u'+', u'cons'), (u'0', u'strid'), (u'-', u'cor'), (u'-', u'long')])]\n\nSummary of Functionality\n------------------------\n\nOperations on feature sets and segments\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``FeatureTable`` class includes a broad range of operations on\nfeatures and segments (consonants and vowels).\n\nConverting words to feature arrays\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``panphon`` class includes the function word2array which takes a\nlist of feature names (as a list of strings) and a panphon word (from\nFeatureTable().word\\_fts()) and returns a NumPy array where each row\ncorresponds to a segment in the word and each column corresponds to one\nof the specified features. Basic usage is illustrated in the following\nexample:\n\n::\n\n    >>> import panphon\n    >>> ft=panphon.FeatureTable()\n    >>> panphon.word2array(['syl', 'son', 'cont'], ft.word_fts(u'snik'))\n    array([[-1, -1,  1],\n           [-1,  1, -1],\n           [ 1,  1,  1],\n           [-1, -1, -1]])\n\nFixed-width pattern matching\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``FeatureTable`` class also allows matching of fixed-width,\nfeature-based patterns.\n\nSonority calculations\n~~~~~~~~~~~~~~~~~~~~~\n\nThe ``Sonority`` class has methods for computing sonority scores for\nsegments.\n\nFeature edit distance\n~~~~~~~~~~~~~~~~~~~~~\n\nThe ``Distance`` class includes methods for calculating edit distance,\nboth in which the cost of substitutions is based upon Hamming distance\nbetween the feature vectors and in which the cost of substitutions are\nbased upon edit weights for individual features.\n\nThe ``panphon.distance`` Module\n-------------------------------\n\nThis module includes the ``Distance`` class, which includes various\nmethods for computing the distance between Unicode IPA strings,\nincluding convenience methods (really \"inconvenience methods\") for\ncomputing Levenshtein distance, but--more importantly--methods for\ncomputing similarity metrics related to articulatory features. The\nmethods include the following:\n\n``panphon.distance.Distance`` .\\ **levenshtein\\_distance**\n\nA Python implementation of Levenshtein's string edit distance.\n\n``panphon.distance.Distance`` .\\ **fast\\_levenshtein\\_distance**\n\nA C implementation of Levenshtein's string edit distance.\nUnsurprisingly, must faster than the former.\n\n``panphon.distance.Distance`` .\\ **dogol\\_prime\\_distance**\n\nFast Levenshtein distance after collapsing segments into an enhanced\nversion of Dogolpolsky's equivalence classes.\n\n``panphon.distance.Distance`` .\\ **feature\\_edit\\_distance**\n\nEdit distance where each feature-edit has cost 1/22. Edits from\nunspecified to specified cost 1/44.\n\n``panphon.distance.Distance`` .\\ **hamming\\_feature\\_edit\\_distance**\n\nEdit distance where each feature-edit has cost 1/22. Edits from\nunspecified to specified also cost 1/22. Insertions and substitutions\neach cost 1.\n\n``panphon.distance.Distance`` .\\ **weighted\\_feature\\_edit\\_distance**\n\nEdit distance where costs of feature edits are differently weighted\ndepending on their class and subjective variability. All of these\nmethods have the same interface and patterns of usage, demonstrated\nbelow:\n\n::\n\n    >>> import panphon.distance\n    >>> dst = panphon.distance.Distance()\n    >>> dst.dogol_prime_distance(u'pops', u'bobz')\n    0\n    >>> dst.dogol_prime_distance(u'pops', u'bobo')\n    1\n\nScripts\n-------\n\nThe ``generate_ipa_all.py`` Script\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSummary\n^^^^^^^\n\nThis small Python program allows the user to apply sets of rules,\ndefined in YAML, for adding diacritics and modifiers to IPA segments\nbased upon their phonological features.\n\nUsage\n^^^^^\n\nTo generate a segment features file (``ipa_all.csv``), use the following\n**in the panphon data directory**:\n\n::\n\n    $ generate_ipa_all.py ipa_bases.csv -d diacritic_definitions.yml -s sort_order.yml ipa_all.csv\n\nNote that this will overwrite your existing ``ipa_all.csv`` file, which\nis often what you want.\n\nThe ``validate_ipa.py`` Script\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n[To be added.]\n\nThe ``align_wordlists.py`` Script\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n[To be added.]\n\nData Files\n----------\n\nThis package also includes multiple data files. The most important of\nthese is ipa\\_bases.csv, a CSV table of IPA characters with definitions\nin terms of phonological features. From it, and the\n``diacritics_definitions.yml`` file, the comprehensive ``ipa_all.csv``\nis generated.\n\nIPA Character Databases: ``ipa_bases.csv`` and ``ipa_all.csv``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe IPA Character Table is a CSV file in which the first column contains\nan IPA segment and each subsequent column contains a phonological\nfeature, coded as +, -, or 0. The features are as follows:\n\n-  **syl**: syllabic\n-  **son**: sonorant\n-  **cons**: consonantal\n-  **cont**: continuant\n-  **delrel**: delayed release\n-  **lat**: lateral\n-  **nas**: nasal\n-  **strid**: strident\n-  **voi**: voice\n-  **sg**: spread glottis\n-  **cg**: constricted glottis\n-  **ant**: anterior\n-  **cor**: coronal\n-  **distr**: distributed\n-  **lab**: labial\n-  **hi**: high (vowel/consonant, not tone)\n-  **lo**: low (vowel/consonant, not tone)\n-  **back**: back\n-  **round**: round\n-  **tense**: tense\n\nInspiration for the data in these tables is drawn primarily from two\nsources: the data files for `HsSPE <https://github.com/dmort27/HsSPE>`__\nand Bruce Hayes's `feature\nspreadsheet <http://www.linguistics.ucla.edu/people/hayes/IP/#features>`__.\nIt has since be re-rationalizeds based on evidence from a wide range of\nsources. As such, any special relationship to these prior inspirations\nhas been eliminated.\n\nThe IPA Character Table ``ipa_bases.csv`` is intended to contain all of\nthe unmodified segmental symbols in IPA, as well as all common\naffricates and dually-articulated segments. It is meant to be augmented\nby the rule-driven application of diacritics and modifiers.\n\nConfiguration and Rule Files\n----------------------------\n\nThis package includes two files that control the behavior of\n``generate_ipa_all.py``. These are intended to be edited by the end\nuser. Both are written in `YAML <http://www.yaml.org/>`__, a\nstandardized and human-readable and editable data serialization\nlanguage.\n\nSort Order Specification: sort\\_order.yml\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe file ``sort_order.yml`` controls the ordering of segments in the\noutput of the Diacritic Application Tool. It is a sequence of maps, each\nwith two fields:\n\n-  **name** The name of a feature.\n-  **reverse** A boolean value (True or False) specifying whether\n   sorting on the named feature will be reversed or not.\n\nThe order of the features determines the priority of sorting.\n\nThe file ``sort_order_schema_.yml`` is a\n`Kwalify <http://www.kuwata-lab.com/kwalify/>`__ schema that defines a\nsyntactically valid sort order file.\n\nDiacritic and Modifier Rules: diacritic\\_definitions.yml\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe most important file for controlling the Diacritic Application Tool\nis ``diacritic_definitions.yml``, a list of rules for applying\ndiacritics and modifiers to IPA segments based on their phonological\nfeatures. It has two sections, **diacritics** and **combinations**. Each\nof these is the key to an item in the top-level map.\n\nDiacritics\n^^^^^^^^^^\n\nThe key **diacritics** points to a list of rules for applying\ndiacritics/modifiers to bases. Each rule is a map with the following\nfields:\n\n-  **marker.** The Unicode diacritic or modifier.\n-  **name.** The name of the series derived from applying the diacritic\n   or modifier.\n-  **postion.** The position of the diacritic relative to the base (pre\n   or post).\n-  **conditions.** A list of conditions, each of them consisting of an\n   associative array of feature specifications, under which the\n   diacritic or modifier will be applied to a base.\n-  **exclude.** A sequence of segments to be excluded from the\n   application of the diacritic/modifier even if they match the\n   conditions.\n-  **content.** The feature specifications that will be set if the\n   diacritic or modifier is applied, given as a map of feature\n   specifications.\n\nCombinations\n^^^^^^^^^^^^\n\nThe key **combinations** likewise points to a list of rules for\ncombining the rules in **diacritics**. These rules are very simple, and\ninclude only the following fields:\n\n-  **name.** The name of the combined category.\n-  **combines.** A sequence of the names of the rules from\n   **diacritics** that are to be combined.\n\nThe file ``diacritic_definitions_schema.yml`` is a\n`Kwalify <http://www.kuwata-lab.com/kwalify/>`__ schema that defines a\nsyntactically valid diacritics definition file.\n",
    "docs_url": null,
    "download_url": "https://github.com/dmort27/panphon/tarball/0.7",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/dmort27/panphon",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "panphon",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/panphon/",
    "release_url": "https://pypi.org/project/panphon/0.7/",
    "requires_python": null,
    "summary": "Tools for using the International Phonetic Alphabet with phonological features",
    "version": "0.7"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f240393e1f996ac4287afabfc7cc077a",
          "sha256": "dec3bd22c234bf7091fe24e6c962b6849625cbb68295793bcfa4b162317415e6"
        },
        "downloads": 423,
        "filename": "panphon-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f240393e1f996ac4287afabfc7cc077a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48496,
        "upload_time": "2016-03-31T15:25:17",
        "url": "https://files.pythonhosted.org/packages/32/05/e57b9d0259be5d2156f97c50e486332961560bffb270bc04fdbdd563efe0/panphon-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3ae64c26624bad93bd32cc12fc5e8708",
          "sha256": "3be425dfeac1295c5cb17e2975d84002f7b3fefc786cf53048e72bf4fd9b7c38"
        },
        "downloads": 106,
        "filename": "panphon-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3ae64c26624bad93bd32cc12fc5e8708",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 50063,
        "upload_time": "2016-04-14T21:16:54",
        "url": "https://files.pythonhosted.org/packages/4a/3d/99886070c68766ec50cec2189086afe96b231d084cb78ba8f140500bf51e/panphon-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e4ccde75ead61d60d127bfc13d12e376",
          "sha256": "417cc7a4c2247313fb0783edf25dfc5bfffdbf88537267b263ad2fa18fc09d23"
        },
        "downloads": 105,
        "filename": "panphon-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e4ccde75ead61d60d127bfc13d12e376",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 50140,
        "upload_time": "2016-04-22T15:49:08",
        "url": "https://files.pythonhosted.org/packages/72/11/1b7b855c3e8530e6d8e0d8a424616243fde1538ad35c829811233a4376a4/panphon-0.3.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2b3bb0d6716bc079bcb3171941d164b4",
          "sha256": "46dc4416b203c63897d417bc07f8ca0e0214781835c4ea91390eed77008854fc"
        },
        "downloads": 144,
        "filename": "panphon-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2b3bb0d6716bc079bcb3171941d164b4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45995,
        "upload_time": "2016-08-19T18:25:39",
        "url": "https://files.pythonhosted.org/packages/3c/18/043ac96df0d3607946db0105526f09f612fba1e0be1c7ae311ff7b23482b/panphon-0.4.tar.gz"
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a166a0e286df8c53166b00c3633dfacc",
          "sha256": "6b02f3ee93811cb4d9dcd5f1e2a09d64196f3a206d06567dd3de70cf4fc38e94"
        },
        "downloads": 21,
        "filename": "panphon-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a166a0e286df8c53166b00c3633dfacc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 52053,
        "upload_time": "2017-02-16T15:05:25",
        "url": "https://files.pythonhosted.org/packages/19/62/80119d48d72f3520bde47bbed39cb5cebf858270d3ed4bea560a13921c36/panphon-0.5.tar.gz"
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "682ad8e376cffaccfe72bc2e5de40176",
          "sha256": "c35317c419733c5298443073b83d4f6e6fedb04d6353c6ec04c534e7b334a1f0"
        },
        "downloads": 0,
        "filename": "panphon-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "682ad8e376cffaccfe72bc2e5de40176",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 55230,
        "upload_time": "2017-04-22T01:03:48",
        "url": "https://files.pythonhosted.org/packages/7e/7b/68d1c017dc4968cd0dd53588dc6fb25b3dec15724bf629f4ea111e6213c2/panphon-0.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "682ad8e376cffaccfe72bc2e5de40176",
        "sha256": "c35317c419733c5298443073b83d4f6e6fedb04d6353c6ec04c534e7b334a1f0"
      },
      "downloads": 0,
      "filename": "panphon-0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "682ad8e376cffaccfe72bc2e5de40176",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 55230,
      "upload_time": "2017-04-22T01:03:48",
      "url": "https://files.pythonhosted.org/packages/7e/7b/68d1c017dc4968cd0dd53588dc6fb25b3dec15724bf629f4ea111e6213c2/panphon-0.7.tar.gz"
    }
  ]
}