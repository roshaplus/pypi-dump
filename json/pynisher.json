{
  "info": {
    "author": "Stefan Falkner",
    "author_email": "sfalkner@informatik.uni-freiburg.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "The pynisher is a little module intended to limit a functions resources.\nIt starts a new process, sets the desired limits, and executes the\nfunction inside it. In the end, it returns the function return value.\nIf, for any reason, the function call is not successful, None is returned.\n\nCurrently, the total memory usage(*), wall and cpu time, and the number of subprocesses can be limited.\n\n\n(*) As the subprocess also includes the Python interpreter, the actual memory available to your function is less than the specified value.\n\nTo show the basic usage, consider the following script\n\n.. code-block:: python\n\n        import pynisher\n        import time\n\n        # using it as a decorator for every call to this function\n        @pynisher.enforce_limits(wall_time_in_s=2)\n        def my_function (t):\n        \ttime.sleep(t)\n        \treturn(t)\n\n        for t in range(5):\n        \tprint(my_function(t))\n\nThe full list of argments to enforce_limits reads: \n\n.. code-block:: python\n\n\t\tpynisher.enforce_limits(mem_in_mb=None, cpu_time_in_s=None,\\\n\t\t\t\t\twall_time_in_s=None, num_processes=None,\\\n\t\t\t\t\tgrace_period_in_s = None, logger = None)\n\nThe first four are actual constraints on the memory, the CPU time, the wall time, and the\nnumber of subprocesses of the function. All values should be integers or None, which means\nno restriction.\n\nThe grace period allows the function to properly end. More technically, the subprocess receives\na SIGXCPU/SIGALARM signal if the CPU/wall clock limit is reached. After the grace period a\nSIGKILL is send terminating the process immediately. Without a grace period, pynisher might\nnot be able to correctly determine the cause of the shutdown, as the subprocess might die without\nany notice (more on that below).\n\nThe logger is used to display additional information about the status of the pynisher module\n(mostly debug level). This might come in handy while debugging.\n\nIf you need to know what happend to the function call or why it was aborted,\nyou can use the object returned from pynisher.enforce_limits. Consider this\nslight variation of the above example:\n\n.. code-block:: python\n\n\t\timport pynisher\n\t\timport time\n\n\t\tdef my_function (t):\n\t\t\ttime.sleep(t)\n\t\t\treturn(t)\n\n\t\tfor t in range(5):\n\t\t\tobj = pynisher.enforce_limits(wall_time_in_s=2)(my_function)\n\t\t\tresult = obj(t)\n\t\t\tprint(result, obj.result, obj.exit_status, obj.wall_clock_time)\n\t\t\n\t\t# see all the available information\n\t\tprint(vars(f))\n\nThe object ```obj``` can be used as the original function. After calling it, it contains\nthe actual result, but also an indicator of what happend. The ```exit_status``` attribute\nis either zero (function returned properly) or one of the following exceptions:\n\n.. code-block:: python\n\n\t\tpynisher.CpuTimeoutException\t# CPU time limit was reached\n\t\tpynisher.TimeoutException\t# Wall clock time limit exceeded\n\t\tpynisher.MemorylimitException\t# function hit the memory constraint\n\t\tpynisher.SubprocessException\t# function tried to spawn too many subprocesses\n\t\tpynisher.AnythingException\t# Something else went wrong, e.g., your function received a signal and just died.\n\nHere, the above issue about the grace period becomes interesting. Without it, it is likely that\na AnythingException is returned where a Cpu-/TimeoutException would be appropriate.\n",
    "docs_url": null,
    "download_url": "https://github.com/sfalkner/pynisher/tarball/0.4.1",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/sfalkner/pynisher",
    "keywords": "resources",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pynisher",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pynisher/",
    "release_url": "https://pypi.org/project/pynisher/0.4.2/",
    "requires_python": null,
    "summary": "A small Python library to limit the resources used by a function by executing it inside a subprocess.",
    "version": "0.4.2"
  },
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1fc5ca28ad028810c3a18d3788a2e433",
          "sha256": "4bae0deba1f7de427e787bb98a5bbd106181d2a5d7d062585dcc8aff98759295"
        },
        "downloads": 1747,
        "filename": "pynisher-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1fc5ca28ad028810c3a18d3788a2e433",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2933,
        "upload_time": "2015-07-21T13:50:57",
        "url": "https://files.pythonhosted.org/packages/8a/e3/b4cb9c1a75d78af036ec630a01f23922f87f505a2437482932bda01bd6f6/pynisher-0.2.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "built for Linux-4.1.12-gentoo-x86_64-Intel-R-_Core-TM-_i5-4690_CPU_@_3.50GHz-with-glibc2.3.4",
        "digests": {
          "md5": "c632ec3649d417f8696b50e357e8b992",
          "sha256": "530b3d1e3a71d09261164f21b92ffffd1b0d3b9a7ab1bea847a1a3980fae14e4"
        },
        "downloads": 331,
        "filename": "pynisher-0.3.1.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "c632ec3649d417f8696b50e357e8b992",
        "packagetype": "bdist_dumb",
        "python_version": "any",
        "size": 4560,
        "upload_time": "2016-01-14T13:50:26",
        "url": "https://files.pythonhosted.org/packages/ab/a4/3c908aa2bd1f21f05ac8b8eda66f935b6a1ba434df2408f30efb52031c3e/pynisher-0.3.1.linux-x86_64.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2496c2631ef14d20a224623b2bea59b2",
          "sha256": "603c4499359abc0a9159036cdc8a233d04e3f9f8e4ebed1552df46a2f3b7e02f"
        },
        "downloads": 343,
        "filename": "pynisher-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2496c2631ef14d20a224623b2bea59b2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3309,
        "upload_time": "2016-01-14T13:49:33",
        "url": "https://files.pythonhosted.org/packages/aa/87/6e068b6420484fa3e2a35479667b6bca1785c2ff0ce4a83a8152d0510325/pynisher-0.3.1.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "997727f1c8723ddbfc81246b2c8a6335",
          "sha256": "724e738e2e5d1d0a4053f73185957cda3097e100ee98ae02c6f779742ced5767"
        },
        "downloads": 134,
        "filename": "pynisher-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "997727f1c8723ddbfc81246b2c8a6335",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4656,
        "upload_time": "2016-02-17T15:34:38",
        "url": "https://files.pythonhosted.org/packages/e0/1c/6300893f6fc1d9ae72626978e7a3307d810e8419d8427aef5188bfc19c62/pynisher-0.4.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "947863c769368ed479785caafaab8b48",
          "sha256": "0ead86900968fc123c7365ad76965306ccb3798a241cb39736513470ff35efa6"
        },
        "downloads": 450,
        "filename": "pynisher-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "947863c769368ed479785caafaab8b48",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4887,
        "upload_time": "2016-03-07T19:31:43",
        "url": "https://files.pythonhosted.org/packages/ab/b9/b338b32f175e8be5a2b73be9c7ebcfdb8aaa3a47c187c87db77d818c8112/pynisher-0.4.1.tar.gz"
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5cd1e003ecda082200942f44108dc3b8",
          "sha256": "b4cfd460143c6651db61ef494515a9c2fc83820fdc290b7da19b6486ff1f0a6b"
        },
        "downloads": 1104,
        "filename": "pynisher-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5cd1e003ecda082200942f44108dc3b8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4897,
        "upload_time": "2016-04-18T13:36:09",
        "url": "https://files.pythonhosted.org/packages/d2/cd/4e0469a55fd280df177af2d5e94d72541d3bb0115280e31a23c8922987e6/pynisher-0.4.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5cd1e003ecda082200942f44108dc3b8",
        "sha256": "b4cfd460143c6651db61ef494515a9c2fc83820fdc290b7da19b6486ff1f0a6b"
      },
      "downloads": 1104,
      "filename": "pynisher-0.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5cd1e003ecda082200942f44108dc3b8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4897,
      "upload_time": "2016-04-18T13:36:09",
      "url": "https://files.pythonhosted.org/packages/d2/cd/4e0469a55fd280df177af2d5e94d72541d3bb0115280e31a23c8922987e6/pynisher-0.4.2.tar.gz"
    }
  ]
}