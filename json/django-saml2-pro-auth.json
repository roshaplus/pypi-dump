{
  "info": {
    "author": "Jonathan Davila",
    "author_email": "jonathan@davila.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Security",
      "Topic :: System :: Systems Administration :: Authentication/Directory"
    ],
    "description": "[![Pypi version](https://img.shields.io/pypi/v/django-saml2-pro-auth.svg)](https://pypi.org/project/django-saml2-pro-auth/) [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/MindPointGroup/django-saml2-pro-auth/master/LICENSE)\n\n[![Coverage Status](https://coveralls.io/repos/github/MindPointGroup/django-saml2-pro-auth/badge.svg?branch=master)](https://coveralls.io/github/MindPointGroup/django-saml2-pro-auth?branch=master) [![CircleCI](https://circleci.com/gh/MindPointGroup/django-saml2-pro-auth.svg?style=svg)](https://circleci.com/gh/MindPointGroup/django-saml2-pro-auth)\n\n\n![Python versions](https://img.shields.io/pypi/pyversions/django-saml2-pro-auth.svg) [![Django versions](https://img.shields.io/badge/django-1.8%2C%201.10%2C%201.11-44B78B.svg)](https://pypi.org/project/django-saml2-pro-auth/)\n\n\n# django-saml2-pro-auth\nSAML2 authentication backend for Django\n\n\n## Installation\n\n`pip install django-saml2-pro-auth`\n\n### Prerequisites\n\nOn your OS you must install libxml, xmlsec1 and openssl (dev packages where available). The package name will vary by OS.\n\nFor example, on Ubuntu the prerequisite package names are `build-essential libssl-dev libffi-dev python-dev libxml2-dev libxmlsec1 xmlsec1 libxmlsec1-openssl libxmlsec1-dev`\n\nYou'll want to find the equivalent on your OS of choice.\n\n## Configuration\n\n### Installation\n\n**Python 2**\n\n```\n  pip install django-saml2-pro-auth\n```\n\n**Python 3**\n\n```\n  pip3 install django-saml2-pro-auth\n```\n\n\n### settings.py\n\nHere is an example full configuration. Scroll down to read about each option\n\n```python\n\nAUTHENTICATION_BACKENDS = [\n      'django_saml2_pro_auth.auth.Backend'\n]\n\nSAML_ROUTE = 'sso/saml/'\n\nSAML_REDIRECT = '/'\n\nSAML_USERS_MAP = [{\n    \"MyProvider\" : {\n      \"email\": dict(key=\"Email\", index=0),\n      \"name\": dict(key=\"Username\", index=0)\n    }\n\n}]\n\n\nSAML_PROVIDERS = [{\n    \"MyProvider\": {\n        \"strict\": True,\n        \"debug\": False,\n        \"custom_base_path\": \"\",\n        \"sp\": {\n            \"entityId\": \"https://test.davila.io/sso/saml/metadata\",\n            \"assertionConsumerService\": {\n                \"url\": \"https://test.davila.io/sso/saml/?acs\",\n                \"binding\": \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST\"\n            },\n            \"singleLogoutService\": {\n                \"url\": \"https://test.davila.io/sso/saml/?sls\",\n                \"binding\": \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"\n            },\n            \"NameIDFormat\": \"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\",\n            ## For the cert/key you can place their content in\n            ## the x509cert and privateKey params\n            ## as single-line strings or place them in \n            ## certs/sp.key and certs/sp.crt or you can supply a \n            ## path via custom_base_path which should contain\n            ## sp.crt and sp.key\n            \"x509cert\": \"\",\n            \"privateKey\": \"\",\n        },\n        \"idp\": {\n            \"entityId\": \"https://kdkdfjdfsklj.my.MyProvider.com/0f3172cf-5aa6-40f4-8023-baf9d0996cec\",\n            \"singleSignOnService\": {\n                \"url\": \"https://kdkdfjdfsklj.my.MyProvider.com/applogin/appKey/0f3172cf-5aa6-40f4-8023-baf9d0996cec/customerId/kdkdfjdfsklj\",\n                \"binding\": \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"\n            },\n            \"singleLogoutService\": {\n                \"url\": \"https://kdkdfjdfsklj.my.MyProvider.com/applogout\",\n                \"binding\": \"urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect\"\n            },\n            \"x509cert\": open(os.path.join(BASE_DIR,'certs/MyProvider.crt'), 'r').read(),\n        },\n        \"organization\": {\n            \"en-US\": {\n                \"name\": \"example inc\",\n                \"displayname\": \"Example Incorporated\",\n                \"url\": \"example.com\"\n            }\n        },\n        \"contact_person\": {\n            \"technical\": {\n                \"given_name\": \"Jane Doe\",\n                \"email_address\": \"jdoe@examp.com\"\n            },\n            \"support\": {\n                \"given_name\": \"Jane Doe\",\n                \"email_address\": \"jdoe@examp.com\"\n            }\n        },\n        \"security\": {\n            \"name_id_encrypted\": False,\n            \"authn_requests_signed\": True,\n            \"logout_requests_signed\": False,\n            \"logout_response_signed\": False,\n            \"sign_metadata\": False,\n            \"want_messages_signed\": False,\n            \"want_assertions_signed\": True,\n            \"want_name_id\": True,\n            \"want_name_id_encrypted\": False,\n            \"want_assertions_encrypted\": True,\n            \"signature_algorithm\": \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\",\n            \"digest_algorithm\": \"http://www.w3.org/2000/09/xmldsig#rsa-sha1\",\n        }\n\n    }\n}]\n```\n\n**AUTHENTICATION_BACKENDS:** This is required exactly as in the example. It tells Django to use this as a valid auth mechanism.\n\n**SAML_ROUTE (optional, default=/sso/saml/):** This tells Django where to do all SAML related activities. The default route is /sso/saml/. You still need to include the source urls in your own `urls.py`. For example:\n\n```python\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nimport profiles.urls\nimport accounts.urls\nimport django_saml2_pro_auth.urls as saml_urls\n\nfrom . import views\n\nurlpatterns = [\n    url(r'^$', views.HomePage.as_view(), name='home'),\n    url(r'^about/$', views.AboutPage.as_view(), name='about'),\n    url(r'^users/', include(profiles.urls, namespace='profiles')),\n    url(r'^admin/', include(admin.site.urls)),\n    url(r'^', include(accounts.urls, namespace='accounts')),\n    url(r'^', include(saml_urls, namespace='saml')),\n]\n\n```\nSo first import the urls via `import django_saml2_pro_auth.urls as saml_urls` (it's up to you if you want name it or not). Then add it to your patterns via `url(r'^', include(saml_urls, namespace='saml'))`. This example will give you the default routes that this auth backend provides.\n\n**SAML_REDIRECT (optional, default=None):** This tells the auth backend where to redirect users after they've logged in via the IdP. **NOTE**: This is not needed for _most_ users. Order of precedence is: SAML_REDIRECT value (if defined), RELAY_STATE provided in the SAML response, and the fallback is simply to go to the root path of your application.\n\n**SAML_USERS_MAP (required):** This is what makes it possible to map the attributes as they come from your IdP into attributes that are part of your User model in Django. There a few ways you can define this. The dict keys (the left-side) are the attributes as defined in YOUR User model, the dict values (the right-side) are the attributes as supplied by your IdP.\n\n```python\n## Simplest Approach, when the SAML attributes supplied by the IdP are just plain strings\n## This means my User model has an 'email' and 'name' attribute while my IdP passes 'Email' and 'Username' attrs\nSAML_USERS_MAP = [{\n    \"myIdp\" : {\n      \"email\": \"Email\",\n      \"name\": \"Username\n    }\n}]\n```\n\nSometimes, IdPs might provide values as Arrays (even when it really should just be a string). This package supports that too. For example, suppose your IdP supplied user attributes with the following data structure:\n`{\"Email\": [\"foo@example.com\"], \"Username\": \"foo\"}`\nYou simply would make the key slightly more complex where `key` is the key and `index` represents the index where the desired value is located. See below:\n\n```python\nSAML_USERS_MAP = [{\n    \"myIdp\" : {\n      \"email\": {\"key\": \"Email\", \"index\": 0},\n      \"name\": \"Username\n    }\n```\n\nAnd of course, you can use the dict structure even when there IdP supplied attribute isn't an array. For example:\n\n```python\nSAML_USERS_MAP = [{\n    \"myIdp\" : {\n      \"email\": {\"key\": \"Email\"},\n      \"name\": {\"key\": \"Username\n    }\n```\n\n\n\n**SAML_PROVIDERS:** This is exactly the same spec as OneLogin's [python-saml and python3-saml packages](https://github.com/onelogin/python3-saml#settings). The big difference is here you supply a list of dicts where the top most key(s) must map 1:1 to the top most keys in `SAML_USERS_MAP`. Also, this package allows you to ref the cert/key files via `open()` calls. This is to allow those of you with multiple external customers to login to your platform with any N number of IdPs.\n\n\n## Routes\n\n| **Route**                                 | **Uses**                                                                                                                                                                                                              |\n|-------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `/sso/saml2/?acs&provider=MyProvider`     | The Assertion Consumer Service Endpoint. This is where your IdP will be POSTing assertions. The 'provider' query string must have a value that matches a top level key of your SAML_PROVIDERS settings.               |\n| `/sso/saml2/metadata&provider=MyProvider` | This is where the SP (ie your Django App) has metadata. Some IdPs request this to generate configuration. The 'provider' query string must have a value that matches a top level key of your SAML_PROVIDERS settings. |\n| `/sso/saml2/?provider=MyProvider`         | Use this endpoint when you want to trigger an SP-initiated login. For example, this could be the `href`of a \"Login with ClientX Okta\" button.                                                                         |\n\n## Gotchas\n\nThe following are things that you may run into issue with. Here are some tips.\n\n* Ensure the value of the SP `entityId` config matches up with what you supply in your IdPs configuration.\n* Your IdP may default to particular Signature type, usually `Assertion` or `Response` are the options. Depending on how you define your SAML provider config, it will dictate what this value should be.\n\n# Wishlist and TODOs\n\nThe following are things that arent present yet but would be cool to have \n\n* Implement logic for Single Logout Service\n* ADFS IdP support\n* Integration test with full on mock saml interactions to test the actual backend auth\n* Tests add coverage to views and the authenticate() get_user() methods in the auth backend\n* models (with multi-tentant support) for idp and sp in order to facilitate management via django admin\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/MindPointGroup/django-saml2-pro-auth",
    "keywords": "sso single-signon authentication saml saml2 django development okta onelogin",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-saml2-pro-auth",
    "platform": "",
    "project_url": "https://pypi.org/project/django-saml2-pro-auth/",
    "release_url": "https://pypi.org/project/django-saml2-pro-auth/0.0.2/",
    "requires_dist": [
      "check-manifest; extra == 'dev'",
      "six",
      "python3-saml"
    ],
    "requires_python": "",
    "summary": "SAML2 authentication backend for Django wrapping OneLogin's python-saml package https://github.com/onelogin/python-saml",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4e582fb9582039cf4c3903e44db34fc1",
          "sha256": "d191f773ebaa46a17497dc7bc8985f4838e9855c490cd6a1c745b9fa0b75a865"
        },
        "downloads": -1,
        "filename": "django_saml2_pro_auth-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e582fb9582039cf4c3903e44db34fc1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 13409,
        "upload_time": "2017-11-01T14:13:41",
        "url": "https://files.pythonhosted.org/packages/b7/f1/47a0b9fc4ef28816bcf9445b99dfae21659872aa6e4f3aabd7a232e406bc/django_saml2_pro_auth-0.0.1-py2.py3-none-any.whl"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0090577a45bec3aae4582a65a86baf2c",
          "sha256": "fe33a30d1a3897ad1ce218cc5fe10b973906566189f84e801e0d8dbc2b1d1f55"
        },
        "downloads": -1,
        "filename": "django_saml2_pro_auth-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0090577a45bec3aae4582a65a86baf2c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 13920,
        "upload_time": "2017-11-02T13:01:53",
        "url": "https://files.pythonhosted.org/packages/3e/23/61344fea847f1ffc4c8ba4b285cbea531ae1f4b32fa07e9a070e4ff63e6e/django_saml2_pro_auth-0.0.2-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0090577a45bec3aae4582a65a86baf2c",
        "sha256": "fe33a30d1a3897ad1ce218cc5fe10b973906566189f84e801e0d8dbc2b1d1f55"
      },
      "downloads": -1,
      "filename": "django_saml2_pro_auth-0.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0090577a45bec3aae4582a65a86baf2c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 13920,
      "upload_time": "2017-11-02T13:01:53",
      "url": "https://files.pythonhosted.org/packages/3e/23/61344fea847f1ffc4c8ba4b285cbea531ae1f4b32fa07e9a070e4ff63e6e/django_saml2_pro_auth-0.0.2-py2.py3-none-any.whl"
    }
  ]
}