{
  "info": {
    "author": "Hari Mahadevan",
    "author_email": "hari@smallpearl.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "================\ndjango-popupcrud\n================\n\nA CRUD framework leveraging Django's generic views that implements CRUD \noperations through HTML popups.\n\nRequirements\n------------\n\n- Python 2.7, 3.4\n- Django >= 1.9\n- `django-bootstrap3 <https://github.com/dyve/django-bootstrap3.git>`_\n- `django-pure-pagination <https://github.com/jamespacileo/django-pure-pagination.git>`_\n\nDocumentation\n-------------\n\nAvailable at `django-popupcrud.readthedocs.io \n<http://django-popupcrud.readthedocs.io/en/latest/index.html>`_.\n\nLicense\n-------\nDistributed under BSD 3-Clause License.\n\n\nQuickstart\n----------\n\n1. Install ``django-popupcrud`` using pip: \n\n   ``pip install django-popucrud``\n   \n   Or install it directly from the source repository:\n   \n   ``pip intall git+https://github.com/harikvpy/django-popupcrud.git``\n\n   Yet another way would be to clone this repository and install from the cloned \n   root folder via ``pip install -e .``.\n\n2. Install the dependencies - ``django-bootstrap3`` and \n   ``django-pure-pagination``.  Add the dependencies and ``popupcrud`` to \n   ``INSTALLED_APPS`` in your project's ``settings.py``::\n\n       INSTALLED_APPS = [\n           ...\n           'bootstrap3',\n           'pure_pagination',\n           'popupcrud',\n           ...\n       ]\n\n3. Let ``PopupCrudViewSet`` know of your base template file name. This defaults \n   to ``base.html``, but if your project uses a different base template \n   filename, inform ``PopupCrudViewSet`` about it in ``settings.py``::\n\n        POPUPCRUD = {\n            'base_template': 'mybase.html',\n        }\n\n   Include Bootstrap CSS & JS resources in this base template.\n   If you were to use ``django-bootstrap3`` tags for these, your base \n   template should look something like this::\n\n    <head>\n        {% bootstrap_css %}\n        <script src=\"{% bootstrap_jquery_url %}\" type=\"text/javascript\" charset=\"utf-8\"></script>\n        {% bootstrap_javascript %}\n        {% block extrahead %}{% endblock extrahead %}\n    </head>\n\n   Also, define a block named ``extrahead`` within the ``<head>`` element.\n   ``PopupCrudViewSet`` views use a few custom CSS styles to show column \n   sorting options and sort priority. These styles are defined in \n   ``static/popupcrud/css/popupcrud.css`` which is inserted into \n   the ``extrahead`` block. If you don't declare this block,\n   you will have to explicitly load the stylesheet into your base template.\n\n4. In your app's ``views.py``, create a ``ViewSet`` for each model for which you\n   want to support CRUD operations.\n\n   Models.py::\n\n    from django.db import models\n\n    class Author(models.Model):\n        name = models.CharField(\"Name\", max_length=128)\n        penname = models.CharField(\"Pen Name\", max_length=128)\n        age = models.SmallIntegerField(\"Age\", null=True, blank=True)\n\n        class Meta:\n            ordering = ('name',)\n            verbose_name = \"Author\"\n            verbose_name_plural = \"Authors\"\n\n        def __str__(self):\n            return self.name\n\n   Views.py::\n\n    from popupcrud.views import PopupCrudViewSet\n\n    class AuthorViewSet(PopupCrudViewSet):\n        model = Author\n        fields = ('name', 'penname', 'age')\n        list_display = ('name', 'penname', 'age')\n        list_url = reverse_lazy(\"library:authors\")\n        new_url = reverse_lazy(\"library:new-author\")\n\n        def get_edit_url(self, obj):\n            return reverse_lazy(\"library:edit-author\", kwargs={'pk': obj.pk})\n\n        def get_delete_url(self, obj):\n            return reverse_lazy(\"library:delete-author\", kwargs={'pk': obj.pk})\n\n5. Wire up the individual CRUD views generated by the viewset to the URL \n   namespace::\n\n    urlpatterns= [\n        url(r'^authors/$', views.AuthorCrudViewset.list(), name='authors'),\n        url(r'^authors/new/$', views.AuthorCrudViewset.create(), name='new-author'),\n        url(r'^authors(?P<pk>\\d+)/edit/$', views.AuthorCrudViewset.update(), name='edit-author'),\n        url(r'^authors(?P<pk>\\d+)/delete/$', views.AuthorCrudViewset.delete(), name='delete-author'),\n        ]\n\n6. Thats it! Your modern HTML popup based CRUD for your table is up and running.\n\n   PopupCrudViewSet has many options to customize the fields displayed in list\n   view, form used for create/update operations, permission control and more.\n   Refer to the Reference and How-to sections of the documentation for more\n   details.\n\n\nHistory\n-------\n\n0.1.0 (2017-09-25)\n++++++++++++++++++\n\n* Initial release",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/harikvpy/django-popupcrud",
    "keywords": "django-popupcrud",
    "license": "BSD 3-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-popupcrud",
    "platform": "",
    "project_url": "https://pypi.org/project/django-popupcrud/",
    "release_url": "https://pypi.org/project/django-popupcrud/0.1.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A CRUD framework that uses HTML popups for CRUD operations.",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "652437496b0959b03cc12f9519469fab",
          "sha256": "6704b8d87a8a057503b47b38a60cf715d93f0c3b2fc19903d21dffa14dd3449c"
        },
        "downloads": 0,
        "filename": "django-popupcrud-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "652437496b0959b03cc12f9519469fab",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25438,
        "upload_time": "2017-09-25T15:24:59",
        "url": "https://files.pythonhosted.org/packages/95/c3/a713c1f6da16cf8c8eda50e0f89cf6fc7dc6dc6523853b2d7ea11cba4acc/django-popupcrud-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "652437496b0959b03cc12f9519469fab",
        "sha256": "6704b8d87a8a057503b47b38a60cf715d93f0c3b2fc19903d21dffa14dd3449c"
      },
      "downloads": 0,
      "filename": "django-popupcrud-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "652437496b0959b03cc12f9519469fab",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 25438,
      "upload_time": "2017-09-25T15:24:59",
      "url": "https://files.pythonhosted.org/packages/95/c3/a713c1f6da16cf8c8eda50e0f89cf6fc7dc6dc6523853b2d7ea11cba4acc/django-popupcrud-0.1.1.tar.gz"
    }
  ]
}