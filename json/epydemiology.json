{
  "info": {
    "author": "Phil Jones",
    "author_email": "phjones@me.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Scientific/Engineering :: Medical Science Apps."
    ],
    "description": "epydemiology\n============\n\nLibrary of python code for epidemiologists \u2013 eventually.\n\nA. Installation\n---------------\n\n.. code:: python\n\n    pip install epydemiology as epy\n\nB. Usage\n--------\n\nThe following functions are available: 1. To load data from a named\nExcel cell range\n\n.. code:: python\n\n    myDF = epy.phjReadDataFromExcelNamedCellRange()\n\n2. To load data from MySQL or SQL SERVER database into Pandas dataframe\n\n.. code:: python\n\n    myDF = epy.phjGetDataFromDatabase()\n\n3. To load text from a text file (e.g. a SQL query or regular\n   expression)\n\n.. code:: python\n\n    myString = phjReadTextFromFile()\n\n4. To convert columns of binary data to a square matrix containing\n   co-occurrences\n\n.. code:: python\n\n    myArr = epy.phjBinaryVarsToSquareMatrix()\n\n5. To select matched or unmatced case-control data (without\n   replacement):\n\n.. code:: python\n\n    myDF = epy.phjSelectCaseControlDataset()\n\n6. To calculate odds and odds ratios for case-control studies\n\n.. code:: python\n\n    myDF = epy.phjOddsRatio()\n\n7. To calculate relative risks for cross-sectional or longitudinal\n   studies\n\n.. code:: python\n\n    myDF = epy.phjRelativeRisk()\n\nC. Details of functions\n-----------------------\n\n1. phjReadDataFromExcelNamedCellRange()\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    df = phjReadDataFromExcelNamedCellRange(phjExcelPathAndFileName = None,\n                                            phjExcelCellRangeName = None,\n                                            phjDatetimeFormat = \"%Y-%m-%d %H:%M:%S\",\n                                            phjMissingValue = \"missing\",\n                                            phjHeaderRow = False,\n                                            phjPrintResults = False)\n\nPython function to read data from a named cell range in an Excel\nworkbook.\n\nDescription\n^^^^^^^^^^^\n\nFunction parameters\n^^^^^^^^^^^^^^^^^^^\n\nExceptions raised\n^^^^^^^^^^^^^^^^^\n\nNone\n\nReturns\n^^^^^^^\n\nPandas dataframe containing data read from named cell range.\n\nOther notes\n^^^^^^^^^^^\n\nNone.\n\nExample\n^^^^^^^\n\nAn example of the function in use is given below:\n\n.. code:: python\n\n    Under construction.\n\n2. phjGetDataFromDatabase()\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    df = epy.phjGetDataFromDatabase(phjQueryPathAndFileName = None,\n                                    phjPrintResults = False)\n\nPython function to read data from a MySQL or SQL SERVER database.\n\nDescription\n^^^^^^^^^^^\n\nFunction parameters\n^^^^^^^^^^^^^^^^^^^\n\nExceptions raised\n^^^^^^^^^^^^^^^^^\n\nNone\n\nReturns\n^^^^^^^\n\nPandas dataframe containing data read from database.\n\nOther notes\n^^^^^^^^^^^\n\nNone.\n\nExample\n^^^^^^^\n\nAn example of the function in use is given below:\n\n.. code:: python\n\n    Under construction.\n\n3. phjReadTextFromFile()\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    myStr = phjReadTextFromFile(phjFilePathAndName = None,\n                                maxAttempts = 3,\n                                phjPrintResults = False)\n\nDescription\n^^^^^^^^^^^\n\nFunction parameters\n^^^^^^^^^^^^^^^^^^^\n\nExceptions raised\n^^^^^^^^^^^^^^^^^\n\nReturns\n^^^^^^^\n\nOther notes\n^^^^^^^^^^^\n\nExample\n^^^^^^^\n\n4. phjBinaryVarsToSquareMatrix()\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    arr = phjBinaryVarsToSquareMatrix(phjDataDF,\n                                      phjColumnNamesList,\n                                      phjOutputFormat = 'arr',\n                                      phjPrintResults = False)\n\nFunction to produce a Numpy array from a group of binary variables to\nshow co-occurrence. #### Description This function takes a number of\nvariables containing binary data and returns a Numpy array representing\na square matrix that shows co-occurrence of positive variables.\n\nFunction parameters\n^^^^^^^^^^^^^^^^^^^\n\n1. **phjDataDF**\n\n   -  Pandas dataframe\n\n2. **phjColumnNamesList**\n\n   -  A list of variable names contained in the dataframe that contains\n      binary data.\n\n3. **phjOutputFormat** (Default = 'arr')\n\n   -  Output format. Default is a Numpy array ('arr'). Alternative is\n      'df' to return a Pandas dataframe.\n\n4. **phjPrintResults** (Default = False.)\n\n-  Print verbose output during execution of scripts. If running on\n   Jupyter-Notebook, setting PrintResults = True causes a lot a output\n   and can cause problems connecting to kernel.\n\nExceptions raised\n^^^^^^^^^^^^^^^^^\n\nNone\n\nReturns\n^^^^^^^\n\nBy default, function returns a Numpy array of a square matrix\n(phjOutputFormat = 'arr'). Matrix can be returned as a Pandas dataframe\n(phjOutputFormat = 'df').\n\nOther notes\n^^^^^^^^^^^\n\nNone\n\nExample\n^^^^^^^\n\n.. code:: python\n\n    import pandas as pd\n\n    rawDataDF = pd.DataFrame({'a':[0,1,1,1,0,0,1,0],\n                              'b':[1,1,0,0,1,0,0,1],\n                              'c':[0,0,1,0,1,1,1,1],\n                              'd':[1,0,0,0,1,0,0,0],\n                              'e':[1,0,0,0,0,1,0,0]})\n\n    columns = ['a','b','c','d','e']\n\n    phjMatrix = phjBinaryVarsToSquareMatrix(phjDataDF = rawDataDF,\n                                            phjColumnNamesList = columns,\n                                            phjOutputFormat = 'arr',\n                                            phjPrintResults = False)\n\n    print(phjMatrix)\n\nOutput:\n\n::\n\n    [[1 1 2 0 0]\n     [1 0 2 2 1]\n     [2 2 0 1 1]\n     [0 2 1 0 1]\n     [0 1 1 1 0]]\n\n5. phjSelectCaseControlDataset()\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    df = epy.phjSelectCaseControlDataset(phjCasesDF,\n                                         phjPotentialControlsDF,\n                                         phjUniqueIdentifierVarName,\n                                         phjMatchingVariablesList = None,\n                                         phjControlsPerCaseInt = 1,\n                                         phjPrintResults = False)\n\nPython function to randomly select matched or unmatched case-control\ndata. #### Description This function selects case-control datasets from\nthe SAVSNET database. It receives, as parameters, two Pandas dataframes,\none containing known cases and, the other, potential controls. The\nalgorithm steps through each case in turn and selects the relevant\nnumber of control subjects from the second dataframe, matching on the\nlist of variables. The function then adds the details of the case and\nthe selected controls to a separate, pre-defined dataframe before moving\nonto the next case.\n\nInitially, the phjSelectCaseControlDataset() function calls\nphjParameterCheck() to check that passed parameters meet specified\ncriteria (e.g. ensure lists are lists and ints are ints etc.). If all\nrequirements are met, phjParameterCheck() returns True and\nphjSelectCaseControlDataset() continues.\n\nThe function requires a parameter called phjMatchingVariablesList. If\nthis parameter is None (the default), an unmatched case-control dataset\nis produced. If, however, the parameter is a list of variable names, the\nfunction will return a dataset where controls have been matched on the\nvariables in the list.\n\nThe phjSelectCaseControlDataset() function proceeds as follows:\n\n1. Creates an empty dataframe in which selected cases and controls will\n   be stored.\n2. Steps through each case in the phjCasesDF dataframe, one at a time.\n3. Gets data from matched variables for the case and store in a dict\n4. Creates a mask for the controls dataframe to select all controls that\n   match the cases in the matched variables\n5. Applies mask to controls dataframe and count number of potential\n   matches\n6. Adds cases and controls to dataframe (through call to phjAddRecords()\n   function)\n7. Removes added control records from potential controls database so\n   single case cannot be selected more than once\n8. Returns Pandas dataframe containing list of cases and controls. This\n   dataframe only contains columns for unique identifier, case and group\n   id. It will, therefore need to be merged with the full database to\n   get and additional required columns.\n\nFunction parameters\n^^^^^^^^^^^^^^^^^^^\n\nThe function takes the following parameters:\n\n1. **phjCasesDF**\n\n-  Pandas dataframe containing list of cases.\n\n2. **phjPotentialControlsDF**\n\n-  Pandas dataframe containing a list of potential control cases.\n\n3. **phjUniqueIdentifierVarName**\n\n-  Name of variable that acts as a unique identifier (e.g. consulations\n   ID number would be a good example). N.B. In some cases, the\n   consultation number is not unique but has been entered several times\n   in the database, sometimes in very quick succession (ms). Data must\n   be cleaned to ensure that the unique identifier variable is, indeed,\n   unique.\n\n4. **phjMatchingVariablesList** (Default = None.)\n\n-  List of variable names for which the cases and controls should be\n   matched. Must be a list. The default is None. If\n\n5. **phjControlsPerCaseInt** (Default = 1.)\n\n-  Number of controls that should be selected per case.\n\n6. **phjPrintResults** (Default= False.)\n\n-  Print verbose output during execution of scripts. If running on\n   Jupyter-Notebook, setting PrintResults = True causes a lot a output\n   and can cause problems connecting to kernel.\n\nExceptions raised\n^^^^^^^^^^^^^^^^^\n\nNone\n\nReturns\n^^^^^^^\n\nPandas dataframe containing a column containing the unique identifier\nvariable, a column containing case/control identifier and \u2013 for matched\ncase-control studies \u2013 a column containing a group identifier. The\nreturned dataframe will need to be left-joined with another dataframe\nthat contains additional required variables.\n\nOther notes\n^^^^^^^^^^^\n\nSetting phjPrintResults = True can cause problems when running script on\nJupyiter-Notebook.\n\nExample\n^^^^^^^\n\nAn example of the function in use is given below:\n\n.. code:: python\n\n    import pandas as pd\n    import epydemiology as epy\n\n    casesDF = pd.DataFrame({'animalID':[1,2,3,4,5],'var1':[43,45,34,45,56],'sp':['dog','dog','dog','dog','dog']})\n    potControlsDF = pd.DataFrame({'animalID':[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],\n                                  'var1':[34,54,34,23,34,45,56,67,56,67,78,98,65,54,34,76,87,56,45,34],\n                                  'sp':['dog','cat','dog','dog','cat','dog','cat','dog','cat','dog',\n                                        'dog','dog','dog','cat','dog','cat','dog','dog','dog','cat']})\n\n    print(\"This dataframe contains all the cases of disease\\n\")\n    print(casesDF)\n    print(\"\\n\")\n    print(\"This dataframe contains all the animals you could potentially use as controls\\n\")\n    print(potControlsDF)\n    print(\"\\n\")\n\n    # Selecting unmatched controls\n    unmatchedDF = epy.phjSelectCaseControlDataset(phjCasesDF = casesDF,\n                                                  phjPotentialControlsDF = potControlsDF,\n                                                  phjUniqueIdentifierVarName = 'animalID',\n                                                  phjMatchingVariablesList = None,\n                                                  phjControlsPerCaseInt = 2,\n                                                  phjPrintResults = False)\n\n    print(unmatchedDF)\n    print(\"\\n\")\n\n    # Selecting controls that are matched to cases on variable 'sp'\n    matchedDF = epy.phjSelectCaseControlDataset(phjCasesDF = casesDF,\n                                                phjPotentialControlsDF = potControlsDF,\n                                                phjUniqueIdentifierVarName = 'animalID',\n                                                phjMatchingVariablesList = ['sp'],\n                                                phjControlsPerCaseInt = 2,\n                                                phjPrintResults = False)\n\n    print(matchedDF)\n\nOutput\n\n::\n\n    This dataframe contains all the cases of disease\n\n       animalID   sp  var1\n    0         1  dog    43\n    1         2  dog    45\n    2         3  dog    34\n    3         4  dog    45\n    4         5  dog    56\n\n\n    This dataframe contains all the animals you could potentially use as controls\n\n        animalID   sp  var1\n    0         11  dog    34\n    1         12  cat    54\n    2         13  dog    34\n    3         14  dog    23\n    4         15  cat    34\n    5         16  dog    45\n    6         17  cat    56\n    7         18  dog    67\n    8         19  cat    56\n    9         20  dog    67\n    10        21  dog    78\n    11        22  dog    98\n    12        23  dog    65\n    13        24  cat    54\n    14        25  dog    34\n    15        26  cat    76\n    16        27  dog    87\n    17        28  dog    56\n    18        29  dog    45\n    19        30  cat    34\n\n\n    UNMATCHED CONTROLS\n\n        case  animalID\n    0      1         1\n    1      1         2\n    2      1         3\n    3      1         4\n    4      1         5\n    5      0        22\n    6      0        13\n    7      0        30\n    8      0        18\n    9      0        25\n    10     0        28\n    11     0        14\n    12     0        15\n    13     0        24\n    14     0        19\n\n\n    MATCHED CONTROLS\n\n       animalID group case   sp\n    0         1     0    1  dog\n    1        28     0    0  dog\n    2        16     0    0  dog\n    3         2     1    1  dog\n    4        25     1    0  dog\n    5        27     1    0  dog\n    6         3     2    1  dog\n    7        21     2    0  dog\n    8        11     2    0  dog\n    9         4     3    1  dog\n    10       18     3    0  dog\n    11       14     3    0  dog\n    12        5     4    1  dog\n    13       22     4    0  dog\n    14       29     4    0  dog\n\n--------------\n\n6. phjOddsRatio()\n~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    df = phjOddsRatio(phjTempDF,\n                      phjCaseVarName,\n                      phjCaseValue,\n                      phjRiskFactorVarName,\n                      phjRiskFactorBaseValue)\n\nDescription\n^^^^^^^^^^^\n\nThis function can be used to calculate odds ratios and 95% confidence\nintervals for case-control studies. The function is passed a Pandas\ndataframe containing the data together with the name of the 'case'\nvariable and the name of the potential risk factor variable. The\nfunction returns a Pandas dataframe based on a 2 x 2 or n x 2\ncontingency table together with columns containing the odds, odds ratios\nand 95% confidence intervals (Woolf). Rows that contain a missing value\nin either the case variable or the risk factor variable are removed\nbefore calculations are made.\n\nFunction parameters\n^^^^^^^^^^^^^^^^^^^\n\nThe function takes the following parameters:\n\n1. **phjTempDF**\n\n-  This is a Pandas dataframe that contains the data to be analysed. One\n   of the columns should be a variable that indicates whether the row is\n   a case or a control.\n\n2. **phjCaseVarName**\n\n-  Name of the variable that indicates whether the row is a case or a\n   control.\n\n3. **phjCaseValue**\n\n-  The value used in phjCaseVarName variable to indicate a case (e.g.\n   True, yes, 1, etc.)\n\n4. **phjRiskFactorVarName**\n\n-  The name of the potential risk factor to be analysed. This needs to\n   be a categorical variable.\n\n5. **phjRiskFactorBaseValue**\n\n-  The level or stratum of the potential risk factor that will be used\n   as the base level in the calculation of odds ratios.\n\nExceptions raised\n^^^^^^^^^^^^^^^^^\n\nNone\n\nReturns\n^^^^^^^\n\nPandas dataframe containing a cross-tabulation of the case and risk\nfactor varible. In addition, odds, odds ratios and 95% confidence\ninterval (Woolf) of the odds ratio is presented.\n\nOther notes\n^^^^^^^^^^^\n\nNone\n\nExample\n^^^^^^^\n\nAn example of the function in use is given below:\n\n.. code:: python\n\n    import pandas as pd\n    import epydemiology as epy\n\n    tempDF = pd.DataFrame({'caseN':[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],\n                           'caseA':['y','y','y','y','y','y','y','y','n','n','n','n','n','n','n','n','n','n','n','n'],\n                           'catN':[1,2,3,2,3,4,3,2,3,4,3,2,1,2,1,2,3,2,3,4],\n                           'catA':['a','a','b','b','c','d','a','c','c','d','a','b','c','a','d','a','b','c','a','d'],\n                           'floatN':[1.2,4.3,2.3,4.3,5.3,4.3,2.4,6.5,4.5,7.6,5.6,5.6,4.8,5.2,7.4,5.4,6.5,5.7,6.8,4.5]})\n\n    phjORTable = epy.phjOddsRatio( phjTempDF = tempDF,\n                                   phjCaseVarName = 'caseA',\n                                   phjCaseValue = 'y',\n                                   phjRiskFactorVarName = 'catA',\n                                   phjRiskFactorBaseValue = 'a')\n\n    pd.options.display.float_format = '{:,.3f}'.format\n\n    print(phjORTable)\n\nOutput\n\n::\n\n    caseA  y  n  odds    or       95pcCI_Woolf\n    catA                                      \n    a      3  4 0.750 1.000                ---\n    b      2  2 1.000 1.333  [0.1132, 15.7047]\n    c      2  3 0.667 0.889   [0.0862, 9.1622]\n    d      1  3 0.333 0.444   [0.0295, 6.7031]\n\n--------------\n\n7. phjRelativeRisk()\n~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    df = phjRelativeRisk(phjTempDF,\n                         phjCaseVarName,\n                         phjCaseValue,\n                         phjRiskFactorVarName,\n                         phjRiskFactorBaseValue)\n\nDescription\n^^^^^^^^^^^\n\nThis function can be used to calculate relative risk (risk ratios) and\n95% confidence intervals for cross-sectional and longitudinal (cohort)\nstudies. The function is passed a Pandas dataframe containing the data\ntogether with the name of the 'case' variable and the name of the\npotential risk factor variable. The function returns a Pandas dataframe\nbased on a 2 x 2 or n x 2 contingency table together with columns\ncontaining the risk, risk ratios and 95% confidence intervals. Rows that\ncontain a missing value in either the case variable or the risk factor\nvariable are removed before calculations are made.\n\nFunction parameters\n^^^^^^^^^^^^^^^^^^^\n\nThe function takes the following parameters:\n\n1. **phjTempDF**\n\n-  This is a Pandas dataframe that contains the data to be analysed. One\n   of the columns should be a variable that indicates whether the row\n   has disease (diseased) or not (healthy).\n\n2. **phjCaseVarName**\n\n-  Name of the variable that indicates whether the row has disease or is\n   healthy.\n\n3. **phjCaseValue**\n\n-  The value used in phjCaseVarName variable to indicate disease (e.g.\n   True, yes, 1, etc.)\n\n4. **phjRiskFactorVarName**\n\n-  The name of the potential risk factor to be analysed. This needs to\n   be a categorical variable.\n\n5. **phjRiskFactorBaseValue**\n\n-  The level or stratum of the potential risk factor that will be used\n   as the base level in the calculation of odds ratios.\n\nExceptions raised\n^^^^^^^^^^^^^^^^^\n\nNone\n\nReturns\n^^^^^^^\n\nPandas dataframe containing a cross-tabulation of the disease status and\nrisk factor varible. In addition, risk, relative risk and 95% confidence\ninterval of the relative risk is presented.\n\nOther notes\n^^^^^^^^^^^\n\nNone\n\nExample\n^^^^^^^\n\nAn example of the function in use is given below:\n\n.. code:: python\n\n    import pandas as pd\n    import epydemiology as epy\n\n    # Pretend this came from a cross-sectional study (even though it's the same example data as used for the case-control study above.\n    tempDF = pd.DataFrame({'caseN':[1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0],\n                           'caseA':['y','y','y','y','y','y','y','y','n','n','n','n','n','n','n','n','n','n','n','n'],\n                           'catN':[1,2,3,2,3,4,3,2,3,4,3,2,1,2,1,2,3,2,3,4],\n                           'catA':['a','a','b','b','c','d','a','c','c','d','a','b','c','a','d','a','b','c','a','d'],\n                           'floatN':[1.2,4.3,2.3,4.3,5.3,4.3,2.4,6.5,4.5,7.6,5.6,5.6,4.8,5.2,7.4,5.4,6.5,5.7,6.8,4.5]})\n\n    phjRRTable = epy.phjRelativeRisk( phjTempDF = tempDF,\n                                      phjCaseVarName = 'caseA',\n                                      phjCaseValue = 'y',\n                                      phjRiskFactorVarName = 'catA',\n                                      phjRiskFactorBaseValue = 'a')\n\n    pd.options.display.float_format = '{:,.3f}'.format\n\n    print(phjRRTable)\n\nOutput\n\n::\n\n    caseA  y  n  risk    rr            95pcCI\n    catA                                     \n    a      3  4 0.429 1.000               ---\n    b      2  2 0.500 1.167  [0.3177, 4.2844]\n    c      2  3 0.400 0.933  [0.2365, 3.6828]\n    d      1  3 0.250 0.583  [0.0872, 3.9031]",
    "docs_url": null,
    "download_url": "https://github.com/lvphj/epydemiology/archive/0.1.17.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/lvphj/epydemiology",
    "keywords": "database,mysql,epidemiology,case-control study,odds ratio,relative risk,risk ratio",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "epydemiology",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/epydemiology/",
    "release_url": "https://pypi.org/project/epydemiology/0.1.17/",
    "requires_python": "",
    "summary": "A library of Python code for epidemiologists",
    "version": "0.1.17"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "633edf67adb290b5c1c6fdb29950fb9d",
          "sha256": "6a9cbcb86b6f37905deafef4b95ca7591a735869a11986408e90e14a8d76b2d0"
        },
        "downloads": 21,
        "filename": "epydemiology-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "633edf67adb290b5c1c6fdb29950fb9d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 5339,
        "upload_time": "2017-04-03T12:59:56",
        "url": "https://files.pythonhosted.org/packages/13/c2/fa9a25648e449d771f0661bc4a00486fa20bccd8ad9ed6d0926d8581cc0b/epydemiology-0.1.0-py3-none-any.whl"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "81b1eabd36a4a245084ba25185a8290b",
          "sha256": "6a8dbfb953e23143f5d18a6cafc92b48dd682facd5dfd7e24c492c7c23009ea2"
        },
        "downloads": 21,
        "filename": "epydemiology-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "81b1eabd36a4a245084ba25185a8290b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 5341,
        "upload_time": "2017-04-03T15:32:10",
        "url": "https://files.pythonhosted.org/packages/e5/73/d170c7a9570c0608326992d6049a7dd17e7b6880903e966d67526bf708ae/epydemiology-0.1.1-py3-none-any.whl"
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b28c7f04c29789704484d3aa0b07a525",
          "sha256": "d26b54e4ca73c31945a0b3c7e875de3d3b3d82ed7b9c88df5a14aeba6ae282a1"
        },
        "downloads": 0,
        "filename": "epydemiology-0.1.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b28c7f04c29789704484d3aa0b07a525",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 27167,
        "upload_time": "2017-05-16T01:14:01",
        "url": "https://files.pythonhosted.org/packages/c2/1b/f3ef4098f13b5b5b6ccc7daaf000009533fecd4aa3522af497752b37737d/epydemiology-0.1.10-py3-none-any.whl"
      }
    ],
    "0.1.15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "604b2128a3b874b08cd11d33b46bf54a",
          "sha256": "bf881b34bdb4127fd5e5117786bf1597fdcd38c0357f69035ec0df0da597d7a7"
        },
        "downloads": 0,
        "filename": "epydemiology-0.1.15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "604b2128a3b874b08cd11d33b46bf54a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 27286,
        "upload_time": "2017-05-17T00:40:35",
        "url": "https://files.pythonhosted.org/packages/95/72/cb9d1bb688ff1dcfa42393253c99cee3ffdac3d9846efeab43f8b8384132/epydemiology-0.1.15-py3-none-any.whl"
      }
    ],
    "0.1.16": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d911a1d13bf395a026b4b069424682ae",
          "sha256": "aea2006ec71dff1e7328ea1a3ca7ab279a1be7ad27cd60844ff63bcba53d5476"
        },
        "downloads": 0,
        "filename": "epydemiology-0.1.16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d911a1d13bf395a026b4b069424682ae",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 28371,
        "upload_time": "2017-05-19T02:33:25",
        "url": "https://files.pythonhosted.org/packages/2c/62/597ec253f1abc465fbbc56c7bbb707982b1646d6de09e3fd0e64e245c314/epydemiology-0.1.16-py3-none-any.whl"
      }
    ],
    "0.1.17": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8871595c8b3e872ffd5e70483d51afda",
          "sha256": "e2525961000a9606da92ca8fa88cee506b21edaa15fe0e8c9f44807514e6fcc1"
        },
        "downloads": 0,
        "filename": "epydemiology-0.1.17-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8871595c8b3e872ffd5e70483d51afda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 28602,
        "upload_time": "2017-05-29T22:08:41",
        "url": "https://files.pythonhosted.org/packages/9e/7c/06994a4756333021397a9345c2e0938c8e2d53ec4000995c58d0367166c8/epydemiology-0.1.17-py3-none-any.whl"
      }
    ],
    "0.1.1b0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cafed9964df8cf6d18d4e28c15e6c202",
          "sha256": "45f51f28f2acfe8365e693d2ec0aa73d041228b0cc7b152e949bb62a9d680e84"
        },
        "downloads": 22,
        "filename": "epydemiology-0.1.1b0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cafed9964df8cf6d18d4e28c15e6c202",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 5392,
        "upload_time": "2017-04-03T18:27:22",
        "url": "https://files.pythonhosted.org/packages/7f/0f/e01dc3e37108b1f46f00a6c705ca234b42a1de5506014c6b69ba8089a98e/epydemiology-0.1.1b0-py3-none-any.whl"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b77305b2a700e46a4be1e53fd7ae9455",
          "sha256": "a94e9210a6eca010ff17f09081645556f36432dbd06d43068bc38ba39a5cd248"
        },
        "downloads": 21,
        "filename": "epydemiology-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b77305b2a700e46a4be1e53fd7ae9455",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 5364,
        "upload_time": "2017-04-03T18:47:28",
        "url": "https://files.pythonhosted.org/packages/1f/6d/5fa5682e47c5ca0587772d24ff306f6658fc20e4287d9772bbeaea0d513f/epydemiology-0.1.2-py3-none-any.whl"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e11188b4d9138b389ca093818ffd2b5d",
          "sha256": "a8edcb086acc821f05a35cda8d22ade2dc2bcbcbdc6b722f6c252a1d734ad8ad"
        },
        "downloads": 21,
        "filename": "epydemiology-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e11188b4d9138b389ca093818ffd2b5d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 10476,
        "upload_time": "2017-04-04T02:01:24",
        "url": "https://files.pythonhosted.org/packages/03/f1/e975634e62099d5082eb3b9cd28219fab3d3ec6bc233433a04e30d681050/epydemiology-0.1.3-py3-none-any.whl"
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ee80939505136f530098e77b6aeabf15",
          "sha256": "b9edf242b77ab230469b384770493a85bd35cc7d5ee55c5320aeed7ce397d05e"
        },
        "downloads": 33,
        "filename": "epydemiology-0.1.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee80939505136f530098e77b6aeabf15",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 18311,
        "upload_time": "2017-04-05T00:46:05",
        "url": "https://files.pythonhosted.org/packages/79/ab/265aaa8e8b37a304b905269382c91b69b1fe5f1a15edba2df19a5d75816c/epydemiology-0.1.4-py3-none-any.whl"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "527911871cffffc1baf3c7477f7bf91f",
          "sha256": "e76ebefa6eab10458ce95f735556adb7166c6b4d866f14456b75ab14db9d1137"
        },
        "downloads": 0,
        "filename": "epydemiology-0.1.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "527911871cffffc1baf3c7477f7bf91f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 24452,
        "upload_time": "2017-04-17T23:39:33",
        "url": "https://files.pythonhosted.org/packages/55/fa/35c592b315c8809eda133813e961b71789e7b68871b8928acb69d3218456/epydemiology-0.1.5-py3-none-any.whl"
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f9120705c39eccca9bb127298a82161b",
          "sha256": "d14deb349d774376c31b333975723a75eb31836cb35d0cafc1b56ea747b08ddd"
        },
        "downloads": 0,
        "filename": "epydemiology-0.1.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9120705c39eccca9bb127298a82161b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 27096,
        "upload_time": "2017-05-15T02:58:05",
        "url": "https://files.pythonhosted.org/packages/52/89/dd295b790d4db9c2fd2196e2006b3fc068d1fdfe54d2f119621202c16576/epydemiology-0.1.6-py3-none-any.whl"
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "53aa3cecc19ed449490edc02a7e7803f",
          "sha256": "deb7f5a11795a3e53f156a47e0cffd167b814c2ffc6b5a234a04931a95238226"
        },
        "downloads": 0,
        "filename": "epydemiology-0.1.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "53aa3cecc19ed449490edc02a7e7803f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 27122,
        "upload_time": "2017-05-15T03:34:03",
        "url": "https://files.pythonhosted.org/packages/6d/76/c1c6113bc2bc29bb7bf69735336c53fb6be228a99e3f39c1b8eb2d76dd32/epydemiology-0.1.7-py3-none-any.whl"
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0edb265357a136bb5bf8fd22fc68b6c2",
          "sha256": "21d33ab15c432bf2fed338e473abb72c1fa42152f879b1556e9e3918be7efd64"
        },
        "downloads": 0,
        "filename": "epydemiology-0.1.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0edb265357a136bb5bf8fd22fc68b6c2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 27118,
        "upload_time": "2017-05-15T03:46:47",
        "url": "https://files.pythonhosted.org/packages/c5/bb/6150bf4b0f67b2e7df0c0bf90896bddbb5ca27e1f42cb0b833be4f908651/epydemiology-0.1.8-py3-none-any.whl"
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a4e1fffe3d01794d8202301b0c0bc126",
          "sha256": "e9bc9ef3c39a91c353456a6bd6c0a0d3747460d6675bb32d0657f62999d38729"
        },
        "downloads": 0,
        "filename": "epydemiology-0.1.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a4e1fffe3d01794d8202301b0c0bc126",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 27126,
        "upload_time": "2017-05-15T22:28:51",
        "url": "https://files.pythonhosted.org/packages/12/7a/3d3b48432013e54a48f864a86c95430750a2f4deaaed510c4740956364a7/epydemiology-0.1.9-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8871595c8b3e872ffd5e70483d51afda",
        "sha256": "e2525961000a9606da92ca8fa88cee506b21edaa15fe0e8c9f44807514e6fcc1"
      },
      "downloads": 0,
      "filename": "epydemiology-0.1.17-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8871595c8b3e872ffd5e70483d51afda",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 28602,
      "upload_time": "2017-05-29T22:08:41",
      "url": "https://files.pythonhosted.org/packages/9e/7c/06994a4756333021397a9345c2e0938c8e2d53ec4000995c58d0367166c8/epydemiology-0.1.17-py3-none-any.whl"
    }
  ]
}