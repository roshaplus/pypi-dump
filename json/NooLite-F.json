{
  "info": {
    "author": "Sergey Prytkov",
    "author_email": "sergej.prytkov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Home Automation",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Hardware"
    ],
    "description": "NooLite-F\n=========\n\nSend commands to modules\n========================\n\nPython module to work with NooLite-F (MTRF-64-USB)\nThere are possible three levels of usage:\n\nLow level of usage.\n-------------------\nYou can work directly with adapter::\n\n    adapter = MTRF64USBAdapter(\"COM3\")\n\n    request = Request()\n    request.action = Action.SEND_COMMAND\n    request.mode = Mode.TX\n    request.channel = 60\n    request.command = Command.TEMPORARY_ON\n    request.format = 6\n    request.data[0] = 1\n\n    response = adapter.send(request)\n\n    print(response)\n\n**Note** Request and response directly maps to low-level api for adapter.\nYou can find more details about MTRF-64-USB api on official NooLite site: https://www.noo.com.by/\n\nMiddle level of usage.\n----------------------\nYou can use MTRF64Controller and abstract from manual request data creating. Just call appropriate function::\n\n    controller = MTRF64Controller(\"COM3\")\n    controller.set_brightness(channel=60, brightness=0.3, module_type=ModuleType.NOOLITE)\n\n\nController supports following commands:\n\n* on - turn on the module\n* off - turn off the module\n* switch - switch module state\n\n* temporary_on - turn on the module for a specified time\n* enable_temporary_on - enable \"temporary on\" mode\n* disable_temporary_on - disable \"temporary on\" mode\n\n* bright_tune - start to increase/decrease brightness\n* bright_tune_back - invert direction of the brightness change\n* bright_tune_stop - stop brightness changing\n* bright_tune_custom - start to increase/decrease brightness with a specified speed\n* bright_step - increase/decrease brightness once with a specified step\n* set_brightness - set brightness\n\n* load_preset - load saved module state from preset\n* save_preset - save current module state as preset\n\n* roll_rgb_color - start color changing **(only for RGB Led modules)**\n* switch_rgb_color - switch color  **(only for RGB Led modules)**\n* switch_rgb_mode - switch color changing modes **(only for RGB Led modules)**\n* switch_rgb_mode_speed - switch speed of the color changing **(only for RGB Led modules)**\n* set_rgb_brightness - set brightness for each rgb color **(only for RGB Led modules)**\n\n* read_state - read module state **(only for NooLite-F modules)**\n\n* bind - send bind command to module\n* unbind - send unbind command to module\n* service_mode_on - turn on the service mode on module **(only for NooLite-F modules)**\n* service_mode_off - turn off the service mode on module **(only for NooLite-F modules)**\n\nEach command can accept following parameters:\n\n* channel - the number of the channel for command. The command will be send to all modules that are binded with selected channel.\n* broadcast - broadcast mode for command. If True then command will be send simultaneously to all modules that are binded with selected channel (default - False)\n* module_type - type of module assigned to the specified channel. It is need to determine correct adapter mode for command sending. **Note:** NooLite-F can accept commands sending in NooLite mode.\n\nSome commands require additional parameters. For more details see inline help.\n\n\nIn response for each command returns:\n\n* for **nooLite-F** modules returns array which contains command result and module info for each module that are binded with selected channel.\n* for **nooLite** modules returns nothing.\n\nCommand result equals True if command send successfully, otherwise False.\nModule info contains information about module: type, firmware version, state (on/off/temporary on), current brightness and bind mode (on/off)::\n\n    [\n        (True, <ModuleInfo (0x2e25b90), id: 0x52e9, type: 1, hardware: 3, state: 1, brightness: 1.0, mode: 0>),\n        (True, <ModuleInfo (0x2e25a90), id: 0x52e3, type: 1, hardware: 3, state: 1, brightness: 1.0, mode: 0>)\n    ]\n\nIf command result is False, then module info is None.::\n\n    [(False, None)]\n\n\nHigh level of usage.\n--------------------\nYou can use special classes that are wrappers around controller. Each class is representation of the\nconcrete module or modules assigned with specific channel::\n\n    controller = MTRF64Controller(\"COM3\")\n    dimmer = Dimmer(controller, 62, ModuleType.NOOLITE)\n    dimmer.set_brightness(0.4)\n\n    switch = Switch(controller, 60, ModuleType.NOOLITE)\n    switch.on()\n\n\n\nReceiving commands from remote controls\n=======================================\n\nYou can use two ways to read commands from remote controls.\n\nUsing adapter.\n--------------\n\nYou can read command from remote controls using MTRF64USBAdapter directly. All received commands are stored in internal queue.\nYou can get stored commands by call get method::\n\n    adapter = MTRF64USBAdapter(\"COM3\")\n\n    response = adapter.get()\n\n    print(response)\n\n\n\nUsing listener.\n---------------\n\nAlso you can create special listener and set it to controller::\n\n    controller = MTRF64Controller(\"COM3\")\n    switch = RGBLed(controller, 62, ModuleType.NOOLITE)\n\n\n    class Listener(RemoteListener):\n        def off(self):\n            switch.off()\n\n        def roll_rgb_color(self):\n            switch.roll_rgb_color()\n\n        def brightness_tune_stop(self):\n            switch.brightness_tune_stop()\n\n        def on(self):\n            switch.on()\n\n        def temporary_on(self, duration: int):\n            pass\n\n        def set_brightness(self, brightness: float):\n            switch.set_brightness(brightness)\n\n        def brightness_tune_step(self, direction: BrightnessDirection, step: int = None):\n            pass\n\n        def brightness_tune_custom(self, direction: BrightnessDirection, speed: float):\n            pass\n\n        def brightness_tune_back(self):\n            switch.brightness_tune_back()\n\n        def save_preset(self):\n            switch.save_preset()\n\n        def brightness_tune(self, direction: BrightnessDirection):\n            switch.brightness_tune(direction)\n\n        def switch_rgb_mode_speed(self):\n            switch.switch_rgb_mode_speed()\n\n        def switch_rgb_mode(self):\n            switch.switch_rgb_mode()\n\n        def switch(self):\n            switch.switch()\n\n        def switch_rgb_color(self):\n            switch.switch_rgb_color()\n\n        def load_preset(self):\n            switch.load_preset()\n\n        def set_rgb_brightness(self, red: float, green: float, blue: float):\n            switch.set_rgb_brightness(red, green, blue)\n\n\n    listener = Listener()\n    controller.set_listener(63, listener)\n\n\nNote\n====\n\nTested with MTRF-64-USB adapter and SLF-1-300 (NooLite-F), SD-1-180 (NooLite), SU-1-500 (NooLite) modules.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/SergejPr/NooLite-F",
    "keywords": "noolite noolite-f noolitef",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "NooLite-F",
    "platform": "any",
    "project_url": "https://pypi.org/project/NooLite-F/",
    "release_url": "https://pypi.org/project/NooLite-F/0.0.7/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Module to work with NooLite/NooLite-F modules via MTRF-64-USB adapter",
    "version": "0.0.7"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cdf03f948df6c95bda4877defe44b911",
          "sha256": "a5d89914227836d9cc2db9d6fe52b17fcebe1dc4911e3915a9f32e0c7b515f5e"
        },
        "downloads": -1,
        "filename": "NooLite_F-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cdf03f948df6c95bda4877defe44b911",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5153,
        "upload_time": "2017-10-16T23:38:19",
        "url": "https://files.pythonhosted.org/packages/74/76/43c6a7eb72704e1adaafbab0e645f7686a03cca8b3ee54b36c67463b1e35/NooLite_F-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "24935081ad7f5c6e135c80b8c399e559",
          "sha256": "5a19764a0be9d70e4479d34b32e4503780473d804949fe645e0e8722517dbfcf"
        },
        "downloads": -1,
        "filename": "NooLite_F-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "24935081ad7f5c6e135c80b8c399e559",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5122,
        "upload_time": "2017-10-16T23:45:22",
        "url": "https://files.pythonhosted.org/packages/77/58/e8a9e3360f39a3ac75a2bf42bc3d9da03044f745d382a496c49a074b767d/NooLite_F-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cfd84fc92ba1abf0307fec6fcbfca1f2",
          "sha256": "d421a1ebf86d4739b679f48828a553c64a7b8e3e80e6726773bc667b106318da"
        },
        "downloads": -1,
        "filename": "NooLite_F-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cfd84fc92ba1abf0307fec6fcbfca1f2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5096,
        "upload_time": "2017-10-16T23:53:06",
        "url": "https://files.pythonhosted.org/packages/d1/14/218c5203f50857de77311837dd79dbbf06c9e9256b17ccf845749689f121/NooLite_F-0.0.3.tar.gz"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a75a0c78b0754f4d73a13d0cb6b768e7",
          "sha256": "23b7e7e109fbe1793378c913dab1c68c7734b2ec33ca249787850f699e44444a"
        },
        "downloads": -1,
        "filename": "NooLite_F-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a75a0c78b0754f4d73a13d0cb6b768e7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17091,
        "upload_time": "2017-10-21T22:30:41",
        "url": "https://files.pythonhosted.org/packages/2a/17/7548c491086816be48ece66aae06315ba1d2a51b4960a528de9cadb9350f/NooLite_F-0.0.4.tar.gz"
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "84ed5ce3be23549b451ab4477cf8c9f1",
          "sha256": "4349661ac12735fbd762fb85b64d0edb14045c8d5dea06542f340635af2aca2c"
        },
        "downloads": -1,
        "filename": "NooLite_F-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "84ed5ce3be23549b451ab4477cf8c9f1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24940,
        "upload_time": "2017-10-26T21:05:42",
        "url": "https://files.pythonhosted.org/packages/8e/f6/d58a0d7f373862be2e4d9a500d5e91e10ed7449cc423efdfb3bd168ba78f/NooLite_F-0.0.5.tar.gz"
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2b28f2be85ed1073c1ea67bcc8db9340",
          "sha256": "efc985be44cee2491d451c7021d2d5971d8b0431c5f54fda28b2fd5ba4624681"
        },
        "downloads": -1,
        "filename": "NooLite_F-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2b28f2be85ed1073c1ea67bcc8db9340",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18462,
        "upload_time": "2017-10-27T20:11:43",
        "url": "https://files.pythonhosted.org/packages/c0/f8/21ccb21c2a7b849dc7076180fb732705f27dd40eac8fd8255d6687e0cb59/NooLite_F-0.0.6.tar.gz"
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4e9918e21fe6aba3edf8c5b561c6a13c",
          "sha256": "895ebc9075cb8a9b5ebbf962d7942e37673984039c5104ae6e45e9755de53fff"
        },
        "downloads": -1,
        "filename": "NooLite_F-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "4e9918e21fe6aba3edf8c5b561c6a13c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10488,
        "upload_time": "2017-11-05T16:46:44",
        "url": "https://files.pythonhosted.org/packages/0b/c9/8eb80bee6a08a9ccc64dccd0e1b3b6572e9f1fc74c985fc96aac627aeeb4/NooLite_F-0.0.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4e9918e21fe6aba3edf8c5b561c6a13c",
        "sha256": "895ebc9075cb8a9b5ebbf962d7942e37673984039c5104ae6e45e9755de53fff"
      },
      "downloads": -1,
      "filename": "NooLite_F-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "4e9918e21fe6aba3edf8c5b561c6a13c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10488,
      "upload_time": "2017-11-05T16:46:44",
      "url": "https://files.pythonhosted.org/packages/0b/c9/8eb80bee6a08a9ccc64dccd0e1b3b6572e9f1fc74c985fc96aac627aeeb4/NooLite_F-0.0.7.tar.gz"
    }
  ]
}