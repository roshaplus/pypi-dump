{
  "info": {
    "author": "Anderson Marques",
    "author_email": "andersonoanjo18@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "PyFixedFlatFile\n===============\n\n\u00c9 uma biblioteca python que tem como objetivo facilitar a cria\u00e7\u00e3o de\narquivo de texto do tipo chamado ``flat file`` com dados de tamanho\nfixo. Em v\u00e1rios ambientes corporativos, empresas trocam dados atrav\u00e9s de\narquivos de textos que obedecem uma determinada estrutura, uma\ndeterminada especifica\u00e7\u00e3o acordada entre elas.\n\nComo usar?\n----------\n\nNessa se\u00e7\u00e3o uma especifica\u00e7\u00e3o exemplo de como o conte\u00fado do arquivo deve\nser estruturado e na sequ\u00eancia como usar o PyFixedFlatFile(Py3F :D) para\ngerar o arquivo desejado. #### Especifica\u00e7\u00e3o O arquivo vai ser referente\na informa\u00e7\u00f5es de um empresa fict\u00edcia chamada AnjosCompany. No arquivo\ncada resgistro (linha) deve possuir um identificador com tamanho dois,\nafim de identificar quais s\u00e3o os dados que aquele registro possui.\n\nO resgistro que come\u00e7ar com 10, vai ter as seguintes informa\u00e7\u00f5es: \\|\nNome \\| Tamanho \\| tipo \\| \\| ------ \\| ------ \\| ---- \\| \\| id \\| 2 \\|\nn (N\u00famerico) \\| \\|cnpj \\| 14 \\| a (Alfa-n\u00famerico) \\| \\|inscri\u00e7\u00e3o\nestadual \\| 14 \\| a (Alfa-n\u00famerico) \\| \\|nome administradora\\| 34 \\| a\n(Alfa-n\u00famerico) \\| \\|valor fixo 2 \\| 1 \\| a (Alfa-n\u00famerico) \\| \\|data\ncria\u00e7\u00e3o \\| 8 \\| a (Alfa-n\u00famerico) \\|\n\nO registro que come\u00e7ar com 11, vai ter as informa\u00e7\u00f5es: \\| Nome \\|\nTamanho \\| tipo \\| \\| ------ \\| ------ \\| ---- \\| \\| id \\| 2 \\| n\n(N\u00famerico) \\| \\| logradouro \\| 34 \\| a (Alfa-n\u00famerico) \\| \\| numero \\| 5\n\\| n (N\u00famerico) \\| \\| bairro \\| 15 \\| a (Alfa-n\u00famerico) \\|\n\nO registro que come\u00e7ar com 90, vai ter as seguintes informa\u00e7\u00f5es:\n\n+-------------------+-----------+---------------------+\n| Nome              | Tamanho   | tipo                |\n+===================+===========+=====================+\n| id                | 2         | n (N\u00famerico)        |\n+-------------------+-----------+---------------------+\n| cnpj              | 14        | a (Alfa-n\u00famerico)   |\n+-------------------+-----------+---------------------+\n| total registros   | 12        | n (N\u00famerico)        |\n+-------------------+-----------+---------------------+\n\nAgora que foi definido como os dados devem ser representados no arquivo,\niremos ver como usar o PyFixedFlatFile para criar o ``flat file``.\n\nUsando o PyFixedFlatFile.\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nO c\u00f3digo abaixo \u00e9 como definimos atr\u00e1ves da biblioteca a especifica\u00e7\u00e3o\ndescrita no sub-se\u00e7\u00e3o anterior.\n\n.. code:: python\n\n    from pyFixedFlatFile import PyFixedFlatFile\n    from datetime import datetime\n\n\n    builder = PyFixedFlatFile() # inst\u00e2nciando um objeto PyFixedFlatFile \n\n    # Aqui definimos a constru\u00e7\u00e3o do flat file atrav\u00e9s do objeto \n    builder.eq(\"10\") \n    builder.id(2).\\\n            cnpj(14, fmt=lambda v: \"{:>14}\".format(v)).\\\n            inscricaoEstadual(14, default='').\\\n            nomeAdm(33).\\\n            constant('2').\\\n            dataCriacao(8, fmt=lambda d: format(d, '%d%m%Y'))\n    builder.eq(11)\n    builder.id(2).\\\n            logradouro(34).\\\n            numero(5, tp='numeric').\\\n            bairro(15)\n    builder.eq(\"90\")\n    builder.id(2).\\\n            cnpj(14, fmt=lambda v: \"{:>14}\".format(v)).\\\n            totalReg(12, tp='numeric').\\\n            constant('99')\n\nPrimeiro importamos o PyFixedFlatFile, al\u00e9m o datetime pois iremos\nutilizar no exemplo.\n\n.. code:: python\n\n    from pyFixedFlatFile import PyFixedFlatFile\n    from datetime import datetime\n\nEnt\u00e3o \u00e9 inst\u00e2nciado o objeto respons\u00e1vel por criar a estrutura ou\nespecifica\u00e7\u00e3o.\n\n.. code:: python\n\n    builder = PyFixedFlatFile() \n\nE assim come\u00e7amos a criar as nossas defini\u00e7\u00f5es.\n\n.. code:: python\n\n    builder.eq(\"10\")\n\nO trecho de c\u00f3digo acima informa ao PyFixedFlatFile que se nos dados que\nforem passados para ele tiver um id igual a 10, \u00e9 para vincular os dados\ncom as defini\u00e7\u00f5es logo ap\u00f3s o .eq\n\n.. code:: python\n\n    builder.eq(\"10\") \n    builder.id(2).\\ \n            cnpj(14, fmt=lambda v: \"{:>14}\".format(v)).\\\n            inscricaoEstadual(14, default='').\\\n            nomeAdm(33).\\\n            constant('2').\\\n            dataCriacao(8, fmt=lambda d: format(d, '%d%m%Y'))\n\n    o *.id(2)* indica que o atributo id deve ter o tamanho 2. primeiro\n    par\u00e2metro \u00e9 sempre o tamanho que o atributo deve ter.\n\n    o *.cnpj(14, fmt=lambda v: \"{:>14}\".format(v))*, indica que o cnpj\n    deve ter o tamanho 14 e como segundo par\u00e2metro \u00e9 passado um fun\u00e7\u00e3o\n    para formatar o cnpj. Essa fun\u00e7\u00e3o ser\u00e1 executada pelo builder e\n    aplicada ao campo passado, no caso o cnpj.\n\n    o *.inscricaoEstadual(14, default='')*, indica que a inscri\u00e7\u00e3o\n    estadual deve ter o tamanho 14 e \u00e9 passado tamb\u00e9m o par\u00e2metro\n    nomeado default. Com ele podemos indicar um valor para quando esse\n    atributo for passado uma string vazia.\n\nExistem tr\u00eas par\u00e2metros nomeados que podemos passar: 1. ``default``,\nonde dizemos um valor padr\u00e3o para aquele campo caso ele estja vazio\n(string vazia). 2. ``fmt``, onde passamos uma fun\u00e7\u00e3o que deve ter sempre\num \u00fanico argumento. Esse argumento ser\u00e1 o valor do pr\u00f3prio atributo. 3.\n``tp``, que \u00e9 usado em conjunto com seu valor 'numeric', para indicar\nque o campo \u00e9 num\u00e9rico, pois por default os atributos ser\u00e3o tratados\ncomo strings.\n\nNa espec\u00edfica\u00e7\u00e3o \u00e9 definido que tem um valor fixo para a posi\u00e7\u00e3o ap\u00f3s o\nnomeAdm quando o registro come\u00e7ar com o identificador '10'. Esse valor\nfixo \u00e9 2. Para esse tipo de situ\u00e7\u00e3o foi criado o atributo constant, que\nna nossa constru\u00e7\u00e3o fica contant('2').\n\nCom isso j\u00e1 sabemos tudo o que \u00e9 necess\u00e1rio para definir a nossa\nespecifica\u00e7\u00e3o usando a biblioteca. Agora precisamos passar os dados para\nque ela trate e gere o que precisamos. Suponha que vamos buscar os dados\nem um banco de dados e montamos uma estruta como abaixo.\n\n.. code:: python\n\n    registros = [\n        {\n            \"id\": \"10\", \"cnpj\": \"00644422230\", \"inscricaoEstadual\": \"\", \"nomeAdm\": \"AnjosCompany\",\n            \"dataCriacao\": datetime.now(),\n        },\n        {\n            \"id\": \"11\", \"logradouro\": \"Av Dario Lopes dos Santos\", \"numero\": \"2197\", \"bairro\": \"Jardim Botanico\", \n        },\n        {\n            \"id\": \"90\", \"cnpj\": \"01234567891234\", \"totalReg\": 23,   \n        }\n    ]\n\nOs ids nos dicion\u00e1rios presentes na lista registros, n\u00e3o s\u00e3o ids objetos\nvindo dos bancos de dados e sim a indica\u00e7\u00e3o de qual bloco da\nespecifica\u00e7\u00e3o do PyFixedFlatFile vai tratar o dicion\u00e1rio espec\u00edfico.\nAssim o dicion\u00e1rio\n\n.. code:: python\n\n    {\n            \"id\": \"10\", \"cnpj\": \"00644422230\", \"inscricaoEstadual\": \"\", \"nomeAdm\": \"AnjosCompany\",\n            \"dataCriacao\": datetime.now(),\n    }\n\nser\u00e1 tratado pelo bloco:\n\n.. code:: python\n\n    builder.eq(\"10\") \n    builder.id(2).\\\n            cnpj(14, fmt=lambda v: \"{:>14}\".format(v)).\\\n            inscricaoEstadual(14, default='').\\\n            nomeAdm(33).\\\n            constant('2').\\\n            dataCriacao(8, fmt=lambda d: format(d, '%d%m%Y'))\n\nPercebam que as chaves dos dicion\u00e1rios devem ser iguais ao que foi\nespecificado, exceto pelo atributo ``constant``, que n\u00e3o \u00e9 passado pelo\ndicion\u00e1rio, pois o seu par\u00e2metro ('2'), j\u00e1 \u00e9 o seu valor.\n\nAbaixo como passar os dados para a biblioteca:\n\n.. code:: python\n\n    s = \"\"    \n    for registro in registros:\n        print(registro)\n        s += builder.generate(registro) + \"\\n\"\n    print(s)\n    with open(\"fixed_flat_file.txt\", \"w\") as f:\n        f.write(s)\n\nO m\u00e9todo generate ir\u00e1 retorna uma string formatada de acordo com a\nespec\u00edfica\u00e7\u00e3o representando um registro (uma linha) do arquivo. No\nexemplo, esse retorno \u00e9 concatenado na vari\u00e1vel s, que ser\u00e1 salva em um\narquivo .txt, que \u00e9 o ``fixed flat file``\n\nMeta\n----\n\nAnderson Marques - andersonoanjo18@gmail.com\n\nDistribu\u00eddo sobre lincensa MIT. Veja ``LICENSE.txt`` para mais\ninform\u00e7\u00f5es.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/anderson89marques/PyFixedFlatFile",
    "keywords": "",
    "license": "",
    "maintainer": "anderson89marques",
    "maintainer_email": "",
    "name": "pyFixedFlatFile",
    "platform": "",
    "project_url": "https://pypi.org/project/pyFixedFlatFile/",
    "release_url": "https://pypi.org/project/pyFixedFlatFile/0.1/",
    "requires_dist": [],
    "requires_python": ">=3.5",
    "summary": "PyFixedFlatFile",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3377f462f929c1524f66dfe4593c5eed",
          "sha256": "8c0abe4fbc692ba5debee2627e5b9fd2690f97b7b16a2f3072565036f38b8f0b"
        },
        "downloads": 0,
        "filename": "pyFixedFlatFile-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3377f462f929c1524f66dfe4593c5eed",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 12684,
        "upload_time": "2017-09-01T00:39:14",
        "url": "https://files.pythonhosted.org/packages/04/96/a939df5e9c2902e52896a541ccade670e85392430099ca93a60b1bbb58d1/pyFixedFlatFile-0.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "7a00604210fd61e24d520464eef8b1b1",
          "sha256": "784b6f441d6f5ab3f0de2b118a13c9e32841221aaadc53f0bbeecc6251a145c7"
        },
        "downloads": 0,
        "filename": "pyFixedFlatFile-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7a00604210fd61e24d520464eef8b1b1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6625,
        "upload_time": "2017-09-01T00:39:16",
        "url": "https://files.pythonhosted.org/packages/22/a1/41896286ae147dff37eb2eb15093b18c93891c2c83cb385f2591ac606bda/pyFixedFlatFile-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "3377f462f929c1524f66dfe4593c5eed",
        "sha256": "8c0abe4fbc692ba5debee2627e5b9fd2690f97b7b16a2f3072565036f38b8f0b"
      },
      "downloads": 0,
      "filename": "pyFixedFlatFile-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3377f462f929c1524f66dfe4593c5eed",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 12684,
      "upload_time": "2017-09-01T00:39:14",
      "url": "https://files.pythonhosted.org/packages/04/96/a939df5e9c2902e52896a541ccade670e85392430099ca93a60b1bbb58d1/pyFixedFlatFile-0.1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "7a00604210fd61e24d520464eef8b1b1",
        "sha256": "784b6f441d6f5ab3f0de2b118a13c9e32841221aaadc53f0bbeecc6251a145c7"
      },
      "downloads": 0,
      "filename": "pyFixedFlatFile-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7a00604210fd61e24d520464eef8b1b1",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6625,
      "upload_time": "2017-09-01T00:39:16",
      "url": "https://files.pythonhosted.org/packages/22/a1/41896286ae147dff37eb2eb15093b18c93891c2c83cb385f2591ac606bda/pyFixedFlatFile-0.1.tar.gz"
    }
  ]
}