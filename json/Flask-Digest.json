{
  "info": {
    "author": "Victor Andrade de Almeida",
    "author_email": "vct.a.almeida@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Flask",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: Implementation"
    ],
    "description": "#############################\r\nFlask Digest |license| |pypi|\r\n#############################\r\n\r\n.. |license| image:: https://img.shields.io/pypi/l/Flask-Digest.svg?style=flat-square\r\n   :target: https://github.com/vctandrade/flask-digest/blob/master/LICENSE.txt\r\n\r\n.. |pypi| image:: https://img.shields.io/pypi/v/Flask-Digest.svg?style=flat-square\r\n   :target: https://pypi.python.org/pypi/Flask-Digest\r\n\r\nFlask Digest provides a RESTful way of authenticating users using a Flask\r\napplication. To achieve that, it uses the Digest Access Authentication protocol\r\nand most optional features described in `RFC 2617`_.\r\n\r\nIn a simplified manner, Flask Digest allows you to make your resources available\r\nonly to those registered in your system, while taking care of security issues by\r\nfollowing well known protocols.\r\n\r\n.. _RFC 2617: https://www.ietf.org/rfc/rfc2617.txt\r\n\r\nQuick start\r\n===========\r\n\r\nFirst of all, installation is as simple as:\r\n\r\n.. code-block:: console\r\n\r\n   $ pip install flask-digest\r\n\r\nAfter doing that, it's important to note this module is\r\nimplementation-independent of how the user database is handled and accessed. So\r\nthe first thing you need to do is set that up, including methods for registering\r\nusers and accessing their passwords.\r\n\r\nThen, you need to create a ``Stomach`` object and inform it of how to use the\r\ndatabase you created. The only thing left now is to decide which resources\r\nshould be protected and mark them accordingly.\r\n\r\nAll the steps regarding the ``Stomach`` object are done with the use of three\r\ndecorator methods, similar to the ones used by Flask. Those are exemplified\r\nbellow, where ``myRealm`` is a string of your choosing, used to describe and\r\nidentify your server in a unique fashion:\r\n\r\n.. code-block:: python\r\n\r\n   from flask import Flask\r\n   from flask_digest import Stomach\r\n\r\n   app = Flask(__name__)\r\n   stomach = Stomach('myRealm')\r\n\r\n   db = dict()\r\n\r\n   @stomach.register\r\n   def add_user(username, password):\r\n       db[username] = password\r\n\r\n   @stomach.access\r\n   def get_user(username):\r\n       return db.get(username, None)\r\n\r\n   @app.route('/')\r\n   @stomach.protect\r\n   def main():\r\n       return '<h1> resource <h1>'\r\n\r\n   add_user('admin', '12345')\r\n   app.run()\r\n\r\nKeep in mind that the ``protect`` decorator MUST be located between the chosen\r\nmethod and Flask's ``route`` decorator.\r\n\r\nAlso, the method for registering new users is expected to receive a username as\r\nfirst parameter and a password as second. If you need to, other parameters are\r\nallowed as well.\r\n\r\nAs for the database access method, it should only have the username as required\r\nparameter, while returning the stored password or ``None`` if the username was\r\nnot registered. For more advanced uses, notice that the ``request`` object is\r\nvisible from this method, when called internally.\r\n\r\nAccessing\r\n=========\r\n\r\nOkay, now you know how to protect your resources. But how do you access them,\r\nwith all this security casing? Depending on the context of your application,\r\nit can be quite simple. For example, most browsers already support this kind of\r\nauthentication protocol out of the box!\r\n\r\nIf you're thinking of accessing your stuff through another python script, you're\r\nalso in luck! There's a module called **Requests**, which seamlessly supports\r\nDigest and will do all the work for you. I *strongly* recommend\r\n`checking it out`_.\r\n\r\n.. _checking it out: http://docs.python-requests.org/en/latest/\r\n\r\nOn the other hand, if it's written in another language there's no easy solution\r\nI can offer. Either you look for another module with that functionality or\r\ncreate one yourself. In any case, make sure to tell me how it went, so I can\r\nshare your experience here.\r\n\r\nBellow, there's a small list of possible response codes you can get when making\r\na request to a protected resource and their causes. If the code you got is not\r\nin this list, it probably wasn't generated by Flask Digest.\r\n\r\nResponses\r\n=========\r\n\r\n**401 Unauthorized**\r\n  When the user provides an invalid combination of username/password, uses a\r\n  ``nonce`` created for another IP or provides a wrong ``nc``, the server will\r\n  deny access to the resource.\r\n\r\n  However, if the user does not provide an ``Authorization`` header or uses a\r\n  stale ``nonce``, the server will include a ``WWW-Authenticate`` header, with\r\n  everything he needs to provide his credentials.\r\n\r\n**400 BadRequest**\r\n  If the user's ``Authorization`` header is missing a field, does not use the\r\n  requested ``qop`` value or provides the wrong ``uri``, the server will deny\r\n  access to the resource.\r\n\r\nFeatures\r\n========\r\n\r\nThis implementation of the Digest Authentication scheme uses the **Quality of\r\nProtection (qop)** optional feature. More specifically, it forces you to use the\r\n``auth`` variation of it, since it makes the protocol much more secure. Also, it\r\ndiscards the ``nonce`` tokens after half an hour and makes sure they are only\r\nused from the IP for whom they were created.\r\n\r\nBesides authenticating users, Flask Digest also makes it possible for the client\r\nto authenticate the server. This is done by using the ``Authentication-Info``\r\nheader, as it contains a hash that could only be produced if one knew the\r\nclient's credentials. This header is included on every successful response.\r\n\r\nRegarding user database security, the ``register`` decorator does not allow you\r\nto store passwords in plain text, offering instead a digest of the user's\r\ncredentials to the underlying method when it is called.\r\n\r\nAll of this together results in your application being protected against the\r\nfollowing attacks:\r\n\r\n* **Replay**: the request is intercepted and reproduced in the future\r\n* **Reflection**: attacker repasses the server's challenge to the user\r\n* **Cryptanalysis**\r\n\r\n  * **Chosen plaintext**: malicious server chooses the ``nonce``\r\n  * **Precomputed dictionary**: precomputed version of the above\r\n  * **Batch brute force**: chosen plain text on multiple users at once\r\n\r\n**Man-in-the-middle attacks**, i.e. intercept and modify requests, are also\r\nprevented regarding the request URIs, but until ``auth-int`` is implemented\r\nentity bodies CAN be modified. So ``POST`` and ``PUT`` methods are still\r\nvulnerable.\r\n\r\nRecommendations\r\n===============\r\n\r\nEven thought Flask Digest doesn't allow you to store plain text passwords, it's\r\nstill a good idea to encrypt the file in some way. Also, if maintaining multiple\r\nrealms, make sure their names differ, so that a security breach in one doesn't\r\naffect the other.\r\n\r\nTo avoid **online dictionary attacks**, i.e. a brute force attack using a list\r\nof common passwords, do not permit your users to choose easy passwords. And to\r\navoid **spoofing** do not trust any server that doesn't use Quality of\r\nProtection and have the clients also authenticates the server.\r\n\r\nChangelog\r\n=========\r\n\r\nTo check out the complete changelog, click `here`_.\r\n\r\n.. _here: https://github.com/vctandrade/flask-digest/releases\r\n\r\nWhat the future holds\r\n=====================\r\n\r\n* Logging of possible attacks\r\n* Implementation of ``auth-int``\r\n* Per user/resource authentication\r\n* Support Werkzeug's ``views`` and ``blueprints``",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/vctandrade/flask-digest",
    "keywords": "digest,authentication,flask",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Flask-Digest",
    "platform": "Platform Independent",
    "project_url": "https://pypi.org/project/Flask-Digest/",
    "release_url": "https://pypi.org/project/Flask-Digest/0.2.0/",
    "requires_python": null,
    "summary": "A RESTful authentication service for Flask applications",
    "version": "0.2.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6638764d4dde1dde8cced4e474967958",
          "sha256": "e7507a2ec2066ebd1cc44db3032c31e0a767f02c67f106359d7f4a21c31ef98b"
        },
        "downloads": 2227,
        "filename": "Flask_Digest-0.1.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "6638764d4dde1dde8cced4e474967958",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 6608,
        "upload_time": "2015-07-12T05:00:50",
        "url": "https://files.pythonhosted.org/packages/aa/7b/dd4cd039edc43b6b82c4dd45cc6032c331ec8a3400923d7fb763d0bdbebb/Flask_Digest-0.1.0-py2-none-any.whl"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1b95a7d780d1dc94e987703a9d19ef1d",
          "sha256": "4884a892d054a45e650c750a730c6a7211bddaa17542edb06d5a118686009f15"
        },
        "downloads": 1014,
        "filename": "Flask_Digest-0.1.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b95a7d780d1dc94e987703a9d19ef1d",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 10660,
        "upload_time": "2015-07-17T18:51:23",
        "url": "https://files.pythonhosted.org/packages/81/74/e0c03c770a0e0e009d6e60119abd85ca0c650a468fbd4ae9cc8ed683ec23/Flask_Digest-0.1.1-py2-none-any.whl"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "69686c1c240b150c704c4c427f9c91ca",
          "sha256": "98b4026ca7668bc7c44bd149ee220cf1f821661057e25e74e34d5b6df99aebe3"
        },
        "downloads": 182,
        "filename": "Flask_Digest-0.2.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "69686c1c240b150c704c4c427f9c91ca",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 10899,
        "upload_time": "2016-03-14T22:35:41",
        "url": "https://files.pythonhosted.org/packages/68/fe/f8ea70c80fe6eb0b5033364692404e8fad3cabac492621f142526b485e4a/Flask_Digest-0.2.0-py2-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "69686c1c240b150c704c4c427f9c91ca",
        "sha256": "98b4026ca7668bc7c44bd149ee220cf1f821661057e25e74e34d5b6df99aebe3"
      },
      "downloads": 182,
      "filename": "Flask_Digest-0.2.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "69686c1c240b150c704c4c427f9c91ca",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "size": 10899,
      "upload_time": "2016-03-14T22:35:41",
      "url": "https://files.pythonhosted.org/packages/68/fe/f8ea70c80fe6eb0b5033364692404e8fad3cabac492621f142526b485e4a/Flask_Digest-0.2.0-py2-none-any.whl"
    }
  ]
}