{
  "info": {
    "author": "Hans Roh",
    "author_email": "hansroh@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Indexing"
    ],
    "description": "==================================================\nWissen: Full-Text Search and Classification Engine\n==================================================\n\n.. contents:: Table of Contents\n\n\nIntroduce\n============\n\nWissen Search & Classification Engine is a simple search engine mostly written in Python and C in year 2008.\n\nAt that time, I would like to study Lucene_ earlier version with Lupy_ and CLucene_. And I also had maden my own search engine for excercise.\n\nIts file format, numeric compressing algorithm, indexing process are quiet similar with Lucene. \n\nBut I got tired reverse engineering, so query and result-fetching parts was built from my imagination. As a result it's entirely unorthodox and possibly very inefficient. Wissen's searching mechanism is similar with DNA-RNA-Protein working model translated into 'Index File-Temporary Small Replication Buffer-Query Result'.\n\n* Every searcher (Cell) has a single index file handlers group (DNA group in nuclear)\n* Thread has multiple small buffer (RNA) for replicating index as needed part\n* Query class (Ribosome) creates query result (Protein) by synthesising buffers' inforamtion (RNAs)\n* Repeat from 2nd if expected more results\n\n.. _Lucene: https://lucene.apache.org/core/\n.. _Lupy: https://pypi.python.org/pypi/Lupy\n.. _CLucene: http://clucene.sourceforge.net/\n\n\nInstallation\n=============\n\nWissen contains C extension, so need C compiler.\n \n.. code:: bash\n\n  pip install wissen\n  \n\nQuick Start\n============\n\nAll field text type should be str or utf-8 encoded bytes in Python 3.x, and unicode or utf-8 encoded string in Python 2.7. Otherwise encoding should be specified.\n\nIndexing and Searching\n-------------------------\n\nHere's an example indexing only one document.\n\n.. code:: python\n\n  import wissen\n  \n  # indexing\n  analyzer = wissen.standard_analyzer (max_term = 3000)\n  col = wissen.collection (\"./col\", wissen.CREATE, analyzer)\n  indexer = col.get_indexer ()\n  \n  song = \"violin sonata in c k.301\"\n  composer = u\"wolfgang amadeus mozart\"\n  birth = 1756\n  home = \"50.665629/8.048906\" # Lattitude / Longitude of Salzurg\n  genre = \"01011111\" # (rock serenade jazz piano symphony opera quartet sonata)\n  \n  document = wissen.document ()\n  \n  # object to return, any object serializable by pickle\n  document.set_content ([song, composer])\n  \n  # text content to generating auto snippet by given query terms\n  document.set_auto_snippet (song)\n  \n  # add searchable fields\n  document.add_field (\"default\", song, wissen.TEXT)\n  document.add_field (\"composer\", composer, wissen.TEXT)\n  document.add_field (\"birth\", birth, wissen.INT16)\n  document.add_field (\"genre\", genre, wissen.BIT8)\n  document.add_field (\"home\", home, wissen.COORD)\n  \n  indexer.add_document (document)\n  indexer.close ()\n  \n  # searching\n  analyzer = wissen.standard_analyzer (max_term = 8)\n  col = wissen.collection (\"./col\", wissen.READ, analyzer)\n  searcher = col.get_searcher ()\n  print searcher.query (u'violin', offset = 0, fetch = 2, sort = \"tfidf\", summary = 30)\n  searcher.close ()\n  \n\nResult will be like this:\n\n.. code:: python\n  \n  {\n   'code': 200, \n   'time': 0, \n   'total': 1\n   'result': [\n    [\n     ['violin sonata in c k.301', 'wofgang amadeus mozart'], # content\n     '<b>violin</b> sonata in c k.301', # auto snippet\n     14, 0, 0, 0 # additional info\n    ]\n   ],   \n   'sorted': [None, 0], \n   'regex': 'violin|violins',   \n  }\n  \n\nLearning and Classification\n---------------------------\n\nHere's an example guessing one of 'play golf', 'go to bed' by weather conditions.\n\n.. code:: python\n\n   import wissen\n   \n   analyzer = wissen.standard_analyzer (max_term = 3000)\n   \n   # learning\n   \n   mdl = wissen.model (\"./mdl\", wissen.CREATE, analyzer)\n   learner = mdl.get_learner ()\n   \n   document = wissen.labeled_document (\"Play Golf\", \"cloudy windy warm\")\n   learner.add_document (document)  \n   document = wissen.labeled_document (\"Play Golf\", \"windy sunny warm\")\n   learner.add_document (document)  \n   document = wissen.labeled_document (\"Go To Bed\", \"cold rainy\")\n   learner.add_document (document)  \n   document = wissen.labeled_document (\"Go To Bed\", \"windy rainy warm\")\n   learner.add_document (document)   \n   learner.close ()\n   \n   mdl = wissen.model (\"./mdl\", wissen.MODIFY, analyzer)\n   learner = mdl.get_learner ()\n   learner.listbydf () # show all terms with DF (Document Frequency)\n   learner.close ()\n   \n   mdl = wissen.model (\"./mdl\", wissen.MODIFY, analyzer)\n   learner = mdl.get_learner ()\n   learner.build (dfmin = 2) # build corpus DF >= 2\n   learner.close ()\n   \n   mdl = wissen.model (\"./mdl\", wissen.MODIFY, analyzer)\n   learner = mdl.get_learner ()\n   learner.train (\n     cl_for = wissen.ALL, # for which classifier\n     selector = wissen.CHI2, # feature selecting method\n     select = 0.99, # how many features?\n     orderby = wissen.MAX, # feature ranking by what?\n     dfmin = 2 # exclude DF < 2\n   )\n   learner.close ()\n   \n   \n   # gusessing\n   \n   mdl = wissen.model (\"./mdl\", wissen.READ, analyzer)\n   classifier = mdl.get_classifier ()\n   print classifier.guess (\"rainy cold\", cl = wissen.NAIVEBAYES)\n   print classifier.guess (\"rainy cold\", cl = wissen.FEATUREVOTE)\n   print classifier.guess (\"rainy cold\", cl = wissen.TFIDF)\n   print classifier.guess (\"rainy cold\", cl = wissen.SIMILARITY)\n   print classifier.guess (\"rainy cold\", cl = wissen.ROCCHIO)\n   print classifier.guess (\"rainy cold\", cl = wissen.MULTIPATH)\n   print classifier.guess (\"rainy cold\", cl = wissen.META)\n   classifier.close ()\n   \n\nResult will be like this:\n\n.. code:: python\n\n  {\n    'code': 200, \n    'total': 1, \n    'time': 5,\n    'result': [('Go To Bed', 1.0)],\n    'classifier': 'meta'  \n  }\n\n\nLimitation\n==============\n\nBefore you test Wissen, you should know some limitation.\n\n- Wissen search cannot sort by string type field, but can by int/bit/coord types and TFIDF ranking. \n\n- Wissen classification doesn't have purpose for accuracy but realtime (means within 1 second) guessing performance. So I used relatvely simple and fast classification algorithms. If you need accuracy, it's not fit to you.\n\n\nConfigure Wissen\n==================\n\nWhen indexing/learing it's not necessory to configure, but searching/guessing it should be configure. The reason why Wissen allocates memory per thread for searching and classifying on initializing.\n\n.. code:: python\n\n  wissen.configure (\n    numthread, \n    logger, \n    io_buf_size = 4096, \n    mem_limit = 256\n  )\n\n \n- numthread: number of threads which access to Wissen collections and models. if set to 8, you can open multiple collections (or models) and access with 8 threads. If 9th thread try to access to wissen, it will raise error\n\n- logger: *see next chapter*\n\n- io_buf_size = 4096: Bytes size of flash buffer for repliacting index files\n\n- mem_limit = 256: Memory limit per a thread, but it's not absolute. It can be over during calculation if need, but when calcuation has been finished, would return memory ASAP.\n\n\nFinally when your app is terminated, call shutdown.\n\n.. code:: python\n\n  wissen.shutdown ()\n  \n\nLogger\n========\n\n.. code:: python\n\n  from wissen.lib import logger\n  \n  logger.screen_logger ()\n  \n  # it will create file '/var/log.wissen.log', and rotated by daily base\n  logger.rotate_logger (\"/var/log\", \"wissen\", \"daily\")\n  \n\nStandard Analyzer\n====================\n\nAnalyzer is needed by TEXT, TERM types.\n\nBasic Usage is:\n\n.. code:: python\n\n  analyzer = wissen.standard_analyzer (\n    max_term = 8, \n    numthread = 1,\n    ngram = True or False,\n    stem_level = 0, 1 or 2 (2 is only applied to English Language),\n    make_lower_case = True or False,\n    stopwords_case_sensitive = True or False,\n    ngram_no_space = True or False,\n    strip_html = True or False,  \n    contains_alpha_only = True or False,  \n    stopwords = [word,...]\n  )\n\n- stem_level: 0 and 1, especially 'en' language has level 2 for hard stemming\n\n- make_lower_case: make lower case for every text\n\n- stopwords_case_sensitive: it will work if make_lower_case is False\n\n- ngram_no_space: if False, '\u6ce3\u65ac \u99ac\u8b16' will be tokenized to _\u6ce3, \u6ce3\u65ac, \u65ac\\_, _\u99ac, \u99ac\u8b16, \u8b16\\_. But if True, addtional bi-gram \u65ac\u99ac will be created between \u65ac\\_ and _\u99ac.\n\n- strip_html\n\n- contains_alpha_only: remove term which doesn't contain alphabet, this option is useful for full-text training in some cases\n\n- stopwords: Wissen has only English stopwords list, You can use change custom stopwords. Stopwords sould be unicode or utf8 encoded bytes\n\nWissen has some kind of stemmers and n-gram methods for international languages and can use them by this way:\n\n.. code:: python\n\n  analyzer = standard_analyzer (ngram = True, stem_level = 1)\n  col = wissen.collection (\"./col\", wissen.CREATE, analyzer)\n  indexer = col.get_indexer ()\n  document.add_field (\"default\", song, wissen.TEXT, lang = \"en\")\n\n\nImplemented Stemmers\n---------------------\n\nExcept English stemmer, all stemmers can be obtained at `IR Multilingual Resources at UniNE`__.\n\n  - ar: Arabic\n  - de: German\n  - en: English\n  - es: Spanish\n  - fi: Finnish\n  - fr: French\n  - hu: Hungarian\n  - it: Italian\n  - pt: Portuguese\n  - sv: Swedish\n \n.. __: http://members.unine.ch/jacques.savoy/clef/index.html\n\n\nBi-Gram Index\n----------------\n\nIf ngram is set to True, these languages will be indexed with bi-gram.\n\n  - cn: Chinese\n  - ja: Japanese\n  - ko: Korean\n\nAlso note that if word contains only alphabet, will be used English stemmer.\n\n\nTri-Gram Index\n---------------\n\nThe other languages will be used English stemmer if all spell is Alphabet. And if ngram is set to True, will be indexed with tri-gram if word has multibytes.\n\n**Methods Spec**\n\n  - analyzer.index (document, lang)\n  - analyzer.freq (document, lang)\n  - analyzer.stem (document, lang)\n  - analyzer.count_stopwords (document, lang)\n\n\nCollection\n==================\n\nCollection manages index files, segments and properties.\n\n.. code:: python\n\n  col = wissen.collection (\n    indexdir = [dirs], \n    mode = [ CREATE | READ | APPEND ], \n    analyzer = None,\n    logger = None \n  )\n\n- indexdir: path or list of path for using multiple disks efficiently\n- mode\n- analyzer\n- logger: # if logger configured by wissen.configure, it's not necessary\n\nCollection has 2 major class: indexer and searcher.\n\n\n\nIndexer\n---------\n\nFor searching documents, it's necessary to indexing text to build Inverted Index for fast term query. \n\n.. code:: python\n\n  indexer = col.get_indexer (\n    max_segments = int,\n    force_merge = True or False,\n    max_memory = 10000000 (10Mb),\n    optimize = True or False\n  )\n\n- max_segments: maximum number of segments of index, if it's over, segments will be merged. also note during indexing, segments will be created 3 times of max_segments and when called index.close (), automatically try to merge until segemtns is proper numbers\n\n- force_merge: When called index.close (), forcely try to merge to a single segment. But it's failed if too big index - on 32bit OS > 2GB, 64bit > 10 GB\n\n- max_memory: if it's over, created new segment on indexing\n\n- optimize: When called index.close (), segments will be merged by optimal number as possible\n\n\nFor add docuemtn to indexer, create document object:\n\n.. code:: python\n\n  document = wissen.document ()     \n\nWissen handle 3 objects as completly different objects between no relationship\n\n- returning content\n- snippet generating field\n- searcherble fields\n\n\n**Returning Content**\n\nWissen serialize returning contents by pickle, so you can set any objects pickle serializable.\n\n.. code:: python\n\n  document.set_content ({\"userid\": \"hansroh\", \"preference\": {\"notification\": \"email\", ...}})\n  \n  or \n  \n  document.set_content ([32768, \"This is smaple ...\"])\n\n\n**Snippet Generating Field**  \n\nThis field should be unicode/utf8 encoded bytes.\n\n.. code:: python\n\n  document.set_auto_snippet (\"This is sample...\")\n\n\n**Searchable Fields**\n\ndocument also recieve searchable fields:\n\n.. code:: python\n\n  document.add_field (name, value, ftype = wissen.TEXT, lang = \"un\", encoding = None)\n  \n  document.add_field (\"default\", \"violin sonata in c k.301\", wissen.TEXT, \"en\")\n  document.add_field (\"composer\", \"wolfgang amadeus mozart\", wissen.TEXT, \"en\")\n  document.add_field (\"lastname\", \"mozart\", wissen.STRING)\n  document.add_field (\"birth\", 1756, wissen.INT16)\n  document.add_field (\"genre\", \"01011111\", wissen.BIT8)\n  document.add_field (\"home\", \"50.665629/8.048906\", wissen.COORD6)\n  \n  \n- name: if 'default', this field will be searched by simple string, or use 'name:query_text'\n- value: unicode/utf8 encode text, or should give encoding arg.\n- ftype: *see below*\n- encoding: give like 'iso8859-1' if value is not unicode/utf8\n- lang: language code for standard_analyzer, \"un\" (unknown) is default\n  \nAvalible Field types are:\n\n  - TEXT: analyzable full-text, result-not-sortable\n  \n  - TERM: analyzable full-text but position data will not be indexed as result can't search phrase, result-not-sortable\n  \n  - STRING: exactly string match like nation codes, result-not-sortable\n  \n  - LIST: comma seperated STRING, result-not-sortable\n  \n  - COORDn, n=4,6,8 decimal precision: comma seperated string 'latitude,longititude', latitude and longititude sould be float type range -90 ~ 90, -180 ~ 180. n is precision of coordinates. n=4 is 10m radius precision, 6 is 1m and 8 is 10cm. result-sortable\n  \n  - BITn, n=8,16,24,32,40,48,56,64: bitwise operation, bit makred string required by n, result-sortable\n  \n  - INTn, n=8,16,24,32,40,48,56,64: range, int required, result-sortable\n\n\nRepeat add_document as you need and close indexer.\n\n.. code:: python\n\n  for ...:  \n    document = wissen.document ()\n    ...\n    indexer.add_document (document) \n    indexer.close ()  \n\nIf searchers using this collection runs with another process or thread, searcher automatically reloaded within a few seconds for applying changed index.\n\n\nSearcher\n---------\n\nFor running searcher, you should wissen.configure () first and creat searcher.\n\n.. code:: python\n  \n  searcher = col.get_searcher (\n    max_result = 2000,\n    num_query_cache = 200\n  ) \n  \n- max_result: max returned number of searching results. default 2000, if set to 0, unlimited results\n\n- num_query_cache: default is 200, if over 200, removed by access time old\n\n\nQuery is simple:\n\n.. code:: python\n\n  searcher.query (\n    qs, \n    offset = 0, \n    fetch = 10, \n    sort = \"tfidf\", \n    summary = 30, \n    lang = \"un\"\n  )\n  \n- qs: string (unicode) or utf8 encoded bytes. for detail query syntax, see below\n- offset: return start position of result records\n- fetch: number of records from offset\n- sort: \"(+-)tfidf\" or \"(+-)field name\", field name should be int/bit type, and '-' means descending (high score/value first) and default if not specified. if sort is \"\", records order is reversed indexing order\n- summary: number of terms for snippet\n- lang: default is \"un\" (unknown)\n\n\nFor deleting indexed document:\n\n.. code:: python\n\n  searcher.delete (qs)\n\nAll documents will be deleted immediatly. And if searchers using this collection run with another process or thread, theses searchers automatically reloaded within a few seconds.\n\nFinally, close searcher.\n\n.. code:: python\n\n  searcher.close ()\n\n\n**Query Syntax**\n\n  - violin composer:mozart birth:1700~1800 \n  \n    search 'violin' in default field, 'mozart' in composer field and search range between 1700, 1800 in birth field\n    \n  - violin allcomposer:wolfgang mozart\n  \n    search 'violin' in default field and any terms after allcomposer will be searched in composer field\n    \n  - violin -sonata birth:~1800\n  \n    not contain sonata in default field\n  \n  - violin -composer:mozart\n  \n    not contain mozart in composer field\n  \n  - violin or piano genre:00001101/all\n  \n    matched all 5, 6 and 8th bits are 1. also /any or /none is available  \n    \n  - violin or ((piano composer:mozart) genre:00001101/any)\n  \n    support unlimited priority '()' and 'or' operators\n  \n  - (violin or ((allcomposer:mozart wolfgang) -amadeus)) sonata (genre:00001101/none home:50.6656,8.0489~10000)\n  \n    search home location coordinate (50.6656, 8.0489) within 10 Km\n  \n  - \"violin sonata\" genre:00001101/none home:50.6656/8.0489~10\n  \n    search exaclt phrase \"violin sonata\"\n  \n  - \"violin^3 piano\" -composer:\"ludwig van beethoven\"\n\n    search loose phrase \"violin sonata\" within 3 terms\n\n    \nModel\n=============\n\nModel manages index, train files, segments and properties.\n\n.. code:: python\n\n  mdl = wissen.model (\n    indexdir = [dirs],\n    mode = [ CREATE | READ | MODIFY | APPEND ], \n    analyzer = None, \n    logger = None\n  )\n\n\nLearner\n---------\n\nFor building model, on Wissen, there're 3 steps need.\n\n- Step I. Index documents to learn\n- Step II. Build Corpus\n- Step III. Selecting features and save trained model\n\n**Step I. Index documents** \n\nLearner use wissen.labeled_document, not wissen.document. And can additional searchable fields if you need. Label is name of category.\n\n.. code:: python\n  \n  learner = mdl.get_learner ()\n  for label, document in trainset:\n  \n    labeled_document = wissen.labeled_document (label, document)\t  \t      \n    # addtional searcherble fields if you need\n    labeled_document.add_field (name, value, ftype = TEXT, lang = \"un\", encoding = None)    \n    learner.add_document (labeled_document)\n\t  \t  \n  learner.close ()\n\n\n**Step II. Building Corpus** \n\nDocument Frequency (DF) is one of major factor of classifier. Low DF is important to searching but not to classifier. One of importance part of learning is selecting valuable terms, but so low DF terms is not very helpful for classifying new document because new document has also low probablity of appearance.\n\nSo for learnig/classification efficient, it's useful to eliminate too low and too high DF terms. For example, Let's assume you index 30,000 web pages for learing and there're about 100,000 terms. If you build corpus with all terms, it takes so long time for learing. But if you remove DF < 10 and DF > 7000 terms, 75% - 80% of all terms will be removed.\n\n.. code:: python  \n  \n  # reopen model with MODIFY\n  mdl = wissen.model (indexdir, MODIFY)\n  learner = mdl.get_learner ()\n  \n  # show terms order by DF for examin\n  learner.listbydf (dfmin = 10, dfmax = 7000)\n  \n  # build corpus and save\n  learner.build (dfmin = 10, dfmax = 7000)\n  \nAs a result, corpus built with about 25,000 terms. It will take time by number of terms.\n\n\n**Step III. Feature Selecting and Saving Model** \n\nFeatures means most valuable terms to classify new documents. It is important understanding many/few features is not good for best result. It maybe most important to select good features for classification.\n\nFor example of my URL classification into 2 classes works show below results. Classifier is NAIVEBAYES, selector is GSS and min DF is 2. Train set is 20,000, test set is 2,000.\n\n  - features 3,000 => 82.9% matched, 73 documents is unclassified\n  - features 2,000 => 82.9% matched, 73 documents is unclassified\n  - features 1,500 => 83.4% matched, 75 documents is unclassified\n  - features 1,000 => 83.6% matched, 79 documents is unclassified\n  - features   500 => 83.1% matched, 86 documents is unclassified\n  - features   200 => 81.1% matched, 108 documents is unclassified\n  - features   50 => 76.0% matched, 155 documents is unclassified\n  - features   10 => 58.7% matched, 326 documents is unclassified\n\nAs results show us that over 2,000 snd under 1,000 features will be unchanged or degraded for classification quality. Also to the most classifiers, too few features increase unclassified ratio but especially to NAIVEBAYES, too many features will increase unclassified ratio cause of its calculating way.\n\n.. code:: python  \n  \n  mdl = wissen.model (indexdir, MODIFY)\n  learner = mdl.get_learner ()\n  \n  learner.train (\n    cl_for = [\n      ALL (default) | NAIVEBAYES | FEATUREVOTE | \n      TFIDF | SIMILARITY | ROCCHIO | MULTIPATH\n    ],\n    select = number of features if value is > 1 or ratio,\n    selector = [\n      CHI2 | GSS | DF | NGL | MI | TFIDF | IG | OR | \n      OR4P | RS | LOR | COS | PPHI | YULE | RMI\n    ],\n    orderby = [SUM | MAX | AVG],\n    dfmin = 0, \n    dfmax = 0\n  )\n  learner.close ()\n  \n- cl_for: train for which classifier, if not specified this features used default for every classifiers haven't own feature set. So train () can be called repeatly for each classifiers\n\n- select: number of features if value is > 1 or ratio to all terms. Generally it might be not over 7,000 features for classifying web pages or news articles into 20 classes.\n\n- selector: mathemetical term scoring alorithm to selecting features considering relation between term and term / term and label. Also DF, and term frequency (TF) etc.\n\n- orderby: final scoring method. one of sum, max, average value\n\n- dfmin, dfmax: In spite of it had been already removed by build(), it can be also additional removed for optimal result for specific classifier\n\n\nIf you remove training data for specific classifier,\n\n.. code:: python  \n  \n  mdl = wissen.model (indexdir, MODIFY)\n  learner = mdl.get_learner ()\n  \n  learner.untrain (cl_for)\n  learner.close ()\n\n\n**Finding Best Training Options**\n\nGenerally, differnce attibutes of data set, it hard to say which options are best. It is stongly necessary number of times repeating process between train () and guess () for best result and that's not easy process.\n\n- index ()\n- build ()\n- train (initial options)\n- measure results with guess ()\n- append additional documents, build () if need\n- train (another options)\n- measure results again with guess ()\n- ...\n- find best optiaml training options with your data set\n\nFor getting result accuracy, your pre-requisite data should be splitted into train set for tran () and test set for guess () to measure like `precision and recall`_.\n\nFor example, there were 27,000 web pages to training set and 2,700 test set for classifying to spam page or not. Total indexed terms are 199,183 and I eliminated 94% terms by DF < 30 or DF > 7000 and remains only 10,221 terms.\n\n- F: selected features by OR(Odds Ratio) MAX\n- NB: NAIVEBAYES, RO: ROCCHIO\n- Numbers means: Matched % Ratio Excluding Unclassified (Unclassified Documents)\n\n  - F 7,000: NB 97.2 (1,100), RO 95.4 (50)\n  - F 5,000: NB 97.4 (493), RO 94.8 (69) \n  - F 4,000: NB 96.6 (282), RO 91.6 (96)\n  - F 3,000: NB 93.2 (214), RO 86.2 (151)\n  - F 2,000: NB 89.4 (293), RO 80.1 (281)\n\nWhich do you choice? In my case, I choose F 5,000 with ROCCHIO cause of low unclassified ratio. But if speed was more important I might choice F 3,000 with NAIVEBAYES.\n\nAnyway everything is done, and if you has been found optimal parameters, you can optimize classifier model.\n\n.. code:: python\n\n  mdl = wissen.model (indexdir, wissen.MODIFY, an)\n  learner = mdl.get_learner ()\n  learner.optimize ()\n  learner.close ()\n\nNote that once called optimize (),\n\n- you cannot add additional training documents\n- you cannot rebuild corpus by calling build () again\n- but you can still call train () any time\n\nThe reason why when low/high DF terms are eliminated by optimize (), related index files will be also shrinked unrecoverably for performance. Then if these works are needed, you should do from step I again.\n\nIf you don't do optimize it make SIMILARITY and ROCCHIO classifiers inefficient (also it will be NOT influence to NAIVEBAYES, TFDIF, FEATUREVOTE classifiers). But you think it's more important retraining regulary rather than speed performance, you should not optimize.\n\n.. _`precision and recall`: https://en.wikipedia.org/wiki/Precision_and_recall\n\n\n**Feature Selecting Methods**\n\n  - CHI2 = Chi Square Statistic\n  - GSS = GSS Coefficient \n  - DF = Document Frequency\n  - NGL = NGL\n  - MI = Mutual Information\n  - TFIDF = Term Frequecy - Inverted Document Frequency\n  - IG = Information Gain\n  - OR = Odds Ratio\n  - OR4P = Kind of Odds Ratio(? can't remember)\n  - RS = Relevancy Score\n  - LOR = Log Odds Ratio\n  - COS = Cosine Similarity \n  - PPHI = Pearson's PHI\n  - YULE = Yule\n  - RMI = Residual Mutual Information\n  \nI personally prefer OR, IG and GSS selectors with MAX method.\n\n\nClassifier\n------------\n  \nFinally,\n\n.. code:: python  \n  \n  classifier = mdl.get_classifier ()\n  classifier.quess (\n    qs, \n    lang = \"un\", \n    cl = [ \n      NAIVEBAYES (Default) | FEATUREVOTE | ROCCHIO | \n      TFIDF | SIMILARITY | META | MULTIPATH\n    ],\n    top = 0,\n    cond = \"\"\n  )\n  \n  classifier.cluster (\n    qs, \n    lang = \"un\"    \n  )\n  \n  classifier.close ()\n  \n- qs: full text stream to classify\n\n- lang\n\n- cl: which classifer, META is default\n\n- top: how many high scored classified results, default is 0, means high scored result(s) only\n\n- cond: conditional document selecting query. Some classifier execute calculating with lots of documents like ROCCHIO and SIMILARITY, so it's useful shrinking number of documents. This  only work when you put additional searchable fields using labeled_document.add_field (...).\n\n**Implemented Classifiers**\n\n  - NAIVEBAYES: Naive Bayes Probablility, default guessing\n  - FEATUREVOTE: Feature Voting Classifier\n  - ROCCHIO: Rocchio Classifier\n  - TFIDF: Max TDIDF Score\n  - SIMILARITY: Max Cosine Similarity\n  - MULTIPATH: Experimental Multi Path Classifier, terms of classifying document will be clustered into multiple sets by co-word frequency before guessing\n  - META: merging and decide with multiple results guessed by NAIVEBAYES, FEATUREVOTE, ROCCHIO Classifiers\n\nIf you need speed most of all, NAIVEBAYES is a good choice. NAIVEBAYES is an old theory but it still works with very high performance at both speed and accuracy if given proper training set.\n\nMore detail for each classifier alorithm, googling please.\n\n\n**Optimizing Each Classifiers**\n\nFor give some detail options to a classifier you can use setopt (classfier, option name = option value,...).\n\n\n.. code:: python  \n\n  classifier = mdl.get_classifier ()\n  classifier.setopt (wissen.ROCCHIO, topdoc = 200)\n  \nSIMILARITY, ROCCHIO classifiers basically have to compare with entire indexed document documents, but Wissen can compare with selected documents by 'topdoc' option. These number of documents will be selected by high TFIDF score for classifying performance reason. Default topdoc value is 100. If you set to 0, Wissen will compare with all documents have one of features at least. But on my experience, there's no critical difference except speed performance.\n\nCurrently available options are:\n\n* ALL\n\n  - verbose = False\n\n* ROCCHIO\n\n  - topdoc = 100\n\n* MULTIPATH\n\n  + subcl = [ FEATUREVOTE (default) | NAIVEBAYES | ROCCHIO ]\n  + scoreby = [ IG (default) | MI | OR | R ]\n  + choiceby = [ AVG (default) | MIN ], when scorring between term and each terms in cluster, which do you want to use value\n  + threshold = 1.0, float value for creating new cluster and this value is measured with Information Gain and value range is somewhat different by number of training documents.\n\n\nDocument Cluster\n-----------------\n\nTODO\n\n.. code:: python  \n\n  cluster = mdl.get_dcluster ()\n  \n\nTerm Cluster\n-------------\n\nTODO\n\n.. code:: python  \n\n  cluster = mdl.get_tcluster ()\n  \n    \n\nHandling Multiple Searchers & Classifiers\n===========================================\n\nIn case of creating multiple searchers and classifers, wissen.task might be useful.\nHere's a script named 'config.py'\n\n.. code:: python\n\n  import wissen\n  from wissen.lib import logger\n  \n  def start_wissen (numthreads, logger):    \n    wissen.configure (numthreads, logger)\n        \n    analyzer = wissen.standard_analyzer ()\n    col = wissen.collection (\"./data1\", wissen.READ, analyzer)\n    wissen.assign (\"data1\", col.get_searcher (max_result = 2000))\n    \n    analyzer = wissen.standard_analyzer (max_term = 1000, stem = 2)\n    mdl = wissen.model (\"./data2\", wissen.READ, analyzer)\n    wissen.assign (\"data2\", mdl.get_classifier ())\n  \nThe first argument of assign () is alias for searcher or classifier.\n\nIf you call config.start_wissen () at any script, you can just import wissen and use it at another python scripts.\n\n.. code:: python\n\n  import wissen\n  \n  wissen.query (\"data1\", \"mozart sonatas\")\n  wissen.guess (\"data2\", \"mozart sonatas\")\n  \n  # close and resign  \n  wissen.close (\"data1\")\n  wissen.resign (\"data1\")\n\n\nAt the end of you app, call wissen.shutdown ()\n  \n.. code:: python\n\n  import wissen\n  \n  wissen.shutdown ()\n\n\nMounting Wissen On Skitai with Saddle\n======================================\n\n**New in version 0.12.14**\n\nYou can use RESTful API with `Skitai-Saddle`_.\n\nCopy and save below code to app.py.\n\n.. code:: python\n  \n  import os\n  import wissen\n  import skitai\t\n  \n  pref = skitai.pref ()\n  pref.use_reloader = 1\n  pref.debug = 1\n  \n  config = pref.config\n  config.sched = \"0/15 * * * *\"\n  config.enable_mirror = False\n  config.remote = \"http://192.168.1.100:5000\"\n  config.local = \"http://127.0.0.1:5000\"\n  \n  config.enable_index = False\n  config.resource_dir = skitai.joinpath ('resources')\n  \n  config.logpath = os.name == \"posix\" and '/var/log/assai' or None\n  \n  skitai.mount (\"/v1\", (wissen, \"app_v1\"), \"app\", pref)\n  skitai.run (\t\n  \tport = 5000,\n  \tlogpath = config.logpath\n  )\n\nAnd run\n\n.. code:: bash\n\n  python app.py -v\n\nHere's example of client side indexer script using API.\n\n.. code:: python\n\n  colopt = {\n    'data_dir': [\n    \t'models/0/books',\n    \t'models/1/books',\n    \t'models/2/books'\n    ],\n    'analyzer': {\n    \t\"ngram\": 0,\n    \t\"stem_level\": 1,\t\t\t\t\t\t\n    \t\"strip_html\": 0,\n    \t\"make_lower_case\": 1\t\t\n    },\n    'indexer': {\n    \t'force_merge': 0,\n    \t'optimize': 0, \n    \t'max_memory': 10000000,\n    \t'max_segments': 10,\n    },\t\n    'searcher': {\n      'max_result': 2000,\n      'num_query_cache': 200\n    }\n  }\t\n  \n  import requests    \n  session = requests.Session ()\n  \n  # check current collections\n  r = session.get ('http://127.0.0.1:5000/v1/, doc).json ()\n  if 'books' not in r [\"collections\"]:  \n    # collections dose not exist, then create\n    session.post ('http://127.0.0.1:5000/v1/books', colopt)\n  \n  dbc = db.connect (...)\n  cursor = dbc.curosr ()\n  cursor.execute (...)  \n  \n  numdoc = 0\n  while 1:\n    row = cursor.fetchone ()\n    if not row: break\n    doc = {\n      'document': {\"author\": row.author, \"title\": row.title , \"abstract\": row.abstract},\n      'snippet': row.abstract,\n      'fields': {\n        '_id': row._id,\n        'default': {'data': \"%s %s\" % (row.title, row.abstract), 'type': wissen.TEXT, 'lang': 'en'},\n        'title': {'data': row.title, 'type': wissen.TEXT, 'lang': 'en'},\n        'author': {'data': row.author, 'type': wissen.STRING},\n        'isbn': {'data': row.isbn, 'type': wissen.STRING},\n        'year': {'data': row.year, 'type': wissen.INT16}\n      }\n    }    \n    session.post ('http://127.0.0.1:5000/v1/books/documents', doc)\n    numdoc += 1\n    if numdoc % 1000:\n    \tsession.post ('http://127.0.0.1:5000/v1/books/collection/commit')\n  \n  cursor.close ()\n  dbc.close ()\n  \nFor more detail about API, see `app_v1.py`_.\n     \n.. _`Skitai-Saddle`: https://pypi.python.org/pypi/skitai\n.. _`app_v1.py`: https://gitlab.com/hansroh/wissen/blob/master/wissen/export/skitai/app_v1.py\n\n\nLinks\n======\n\n- `GitLab Repository`_\n- Bug Report: `GitLab issues`_\n\n.. _`GitLab Repository`: https://gitlab.com/hansroh/wissen\n.. _`GitLab issues`: https://gitlab.com/hansroh/wissen/issues\n\n\n\nChange Log\n============\n  \n  0.12 \n  \n  - change export package name from appack to package\n  - add Skito-Saddle app\n  - fix analyzer.count_stopwords return value\n  - change development status to Alpha\n  - add wissen.assign(alias, searcher/classifier) and query(alias), guess(alias)\n  - fix threads count and memory allocation\n  - add example for Skitai-Saddle app to mannual\n  \n  0.11 \n  \n  - fix HTML strip and segment merging etc.\n  - add MULTIPATH classifier\n  - add learner.optimize ()\n  - make learner.build & learner.train efficient\n  \n  0.10 - change version format, remove all str*_s ()\n  \n  0.9 - support Python 3.x\n\n  0.8 - change license from BSD to GPL V3\n  \n  \n\n",
    "docs_url": null,
    "download_url": "https://pypi.python.org/pypi/wissen",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://gitlab.com/hansroh/wissen",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wissen",
    "platform": "posix",
    "project_url": "https://pypi.org/project/wissen/",
    "release_url": "https://pypi.org/project/wissen/0.12.14.26/",
    "requires_python": "",
    "summary": "Wissen Full-Text Search & Classification Engine",
    "version": "0.12.14.26"
  },
  "releases": {
    "0.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eac0760fafb6694f899160dbd5943b1f",
          "sha256": "c4c4aa842c71d8fcd8397a35897f5cbdff7ba300a7d6198e8fa376f91ff6f4d8"
        },
        "downloads": 114,
        "filename": "wissen-0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "eac0760fafb6694f899160dbd5943b1f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1998213,
        "upload_time": "2016-03-01T04:59:04",
        "url": "https://files.pythonhosted.org/packages/27/eb/e9d9f8ae1c32d8bbba8706b8ee03bc06e6766b9b81c0a15727b9fdbaae67/wissen-0.10.tar.gz"
      }
    ],
    "0.10.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7fed907b35ccfe1ed7d116eeb18b60ae",
          "sha256": "ef70500c66cd2ee755da063f99bf7195d36c483f6effe52d640c36f34c43e934"
        },
        "downloads": 406,
        "filename": "wissen-0.10.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7fed907b35ccfe1ed7d116eeb18b60ae",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1755334,
        "upload_time": "2016-03-26T12:19:10",
        "url": "https://files.pythonhosted.org/packages/0d/53/660ac75b902ae5b047a23c47b8da17bdeaf70673d8ed4ba3931288ebfce8/wissen-0.10.1.tar.gz"
      }
    ],
    "0.10.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d8c93625dc63110408926dc596523465",
          "sha256": "7e3639d42569c79cefc004c8363cf94b61c8f452f79c7e22ef80e64f0179f547"
        },
        "downloads": 137,
        "filename": "wissen-0.10.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d8c93625dc63110408926dc596523465",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1755386,
        "upload_time": "2016-03-27T08:10:24",
        "url": "https://files.pythonhosted.org/packages/b1/61/ffe81892b8147de681a5b7c13b3a2fa74d82e9a5677f9b29ba8ee2f2895d/wissen-0.10.2.tar.gz"
      }
    ],
    "0.11.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "817696a1cbed81b8d9f84803cbe91ede",
          "sha256": "fd793e53fbee1bcd8cab08e759aefeae7c33feeff600baec54765d77d03edeeb"
        },
        "downloads": 107,
        "filename": "wissen-0.11.10.tar.gz",
        "has_sig": false,
        "md5_digest": "817696a1cbed81b8d9f84803cbe91ede",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1762638,
        "upload_time": "2016-04-05T06:51:50",
        "url": "https://files.pythonhosted.org/packages/83/3a/b7b84fe0bd6833cae9f80135a52749e121b4ba2bf7292fad250f56786ab5/wissen-0.11.10.tar.gz"
      }
    ],
    "0.11.22": [
      {
        "comment_text": "",
        "digests": {
          "md5": "729da924bce7df0f8c5e05aa57005533",
          "sha256": "e722e5c4e8b2287e35608048c1374446dc7cac60a5f3bd468933cb406abe1e5b"
        },
        "downloads": 111,
        "filename": "wissen-0.11.22.tar.gz",
        "has_sig": false,
        "md5_digest": "729da924bce7df0f8c5e05aa57005533",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1764535,
        "upload_time": "2016-04-09T13:58:26",
        "url": "https://files.pythonhosted.org/packages/fd/f3/674e096f73377ca6d9f0794099ec7b94fc4f81c0ab290c24de7528db1280/wissen-0.11.22.tar.gz"
      }
    ],
    "0.11.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "aeb16ec11c4cde91f099a78392cff0e5",
          "sha256": "0551b21e54f0f566b6b62592bb447d55c8932d62b7d5baf64df2f64cbdd1f5ec"
        },
        "downloads": 136,
        "filename": "wissen-0.11.6.tar.gz",
        "has_sig": false,
        "md5_digest": "aeb16ec11c4cde91f099a78392cff0e5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1761958,
        "upload_time": "2016-04-01T12:43:57",
        "url": "https://files.pythonhosted.org/packages/3e/45/8a70a421fd2c2d3a54de2ca2ec5244770c346a7e4a6f8549d02ab6bfda9e/wissen-0.11.6.tar.gz"
      }
    ],
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "389d5f097d20b3d49b016b233b3f48a8",
          "sha256": "3a4fd413415a178da28accaa627923c7363d83506145dd5ed597ec61ebdace25"
        },
        "downloads": 111,
        "filename": "wissen-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "389d5f097d20b3d49b016b233b3f48a8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1765429,
        "upload_time": "2016-04-11T08:29:43",
        "url": "https://files.pythonhosted.org/packages/3d/ce/9740b21817a6732f3f984df528d0a678b2658ea6adcc225c67fd4e90d161/wissen-0.12.tar.gz"
      }
    ],
    "0.12.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f0a44e262833cdf18823db7e9b8b2dde",
          "sha256": "4ff8129b5679d7cf1f35b0baaad5bb8b98ac799b633feb9d0f8097d7d4d750fe"
        },
        "downloads": 298,
        "filename": "wissen-0.12.10.tar.gz",
        "has_sig": false,
        "md5_digest": "f0a44e262833cdf18823db7e9b8b2dde",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1765442,
        "upload_time": "2016-12-26T10:06:26",
        "url": "https://files.pythonhosted.org/packages/e3/aa/2db8ba1ac0a3a37ee960cfb166f89ac7d3f79d85069c0ba0d0a22f1bf736/wissen-0.12.10.tar.gz"
      }
    ],
    "0.12.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d0f9a083fd5368c13607463a7dd501fe",
          "sha256": "1be5cd73c44b1ba7d9b30788117c75849f02c6fe111fcdc96bf9e4bdf9087739"
        },
        "downloads": 20,
        "filename": "wissen-0.12.11.tar.gz",
        "has_sig": false,
        "md5_digest": "d0f9a083fd5368c13607463a7dd501fe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1765862,
        "upload_time": "2017-03-10T11:49:58",
        "url": "https://files.pythonhosted.org/packages/99/f9/a235538bc99f89dbb471b6ede5f5bab81386f284cba0bc8d136263f7195e/wissen-0.12.11.tar.gz"
      }
    ],
    "0.12.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "462ecc8ed834aaa51c56c08465957392",
          "sha256": "bbb5a775b63a9fa7a0c316f1a927cdc9f2266d576b00da51dd9cd329eaf61913"
        },
        "downloads": 174,
        "filename": "wissen-0.12.12.tar.gz",
        "has_sig": false,
        "md5_digest": "462ecc8ed834aaa51c56c08465957392",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1769959,
        "upload_time": "2017-04-06T03:23:17",
        "url": "https://files.pythonhosted.org/packages/0a/84/0336e3024bd8b6c7a2d220748257de5711e154a609b6b22e25492a7347d0/wissen-0.12.12.tar.gz"
      }
    ],
    "0.12.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "12c3bc902863cccd6a949c5461b11d45",
          "sha256": "fa5afae7b376ffbf4da49243661e370a60945a24cab1de4e311c42aea61e4416"
        },
        "downloads": 0,
        "filename": "wissen-0.12.13.tar.gz",
        "has_sig": false,
        "md5_digest": "12c3bc902863cccd6a949c5461b11d45",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1769974,
        "upload_time": "2017-04-10T14:38:51",
        "url": "https://files.pythonhosted.org/packages/1f/ac/884d9abc662fc9f578a6908dacf5deaad1933229ee32109ee0f0095ec326/wissen-0.12.13.tar.gz"
      }
    ],
    "0.12.14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3088726266a50d5f31bf2c6fd548f374",
          "sha256": "a1730e58dab4223ebff17b117638e4512d7a1e1e803eed07556d1d9ebe67beb9"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.tar.gz",
        "has_sig": false,
        "md5_digest": "3088726266a50d5f31bf2c6fd548f374",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1774807,
        "upload_time": "2017-04-21T13:24:04",
        "url": "https://files.pythonhosted.org/packages/9f/d4/f70a83f46d7dac63661cae5f85a27c38fadc2d4f2eedb6c49f1a2f2efb1d/wissen-0.12.14.tar.gz"
      }
    ],
    "0.12.14.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b42dc435270c52639c9138419235dc47",
          "sha256": "05250433a0c3a009ebb88c81c1736364925bbb25862a1236ccad8367a55e2fa8"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b42dc435270c52639c9138419235dc47",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1774836,
        "upload_time": "2017-04-21T14:55:58",
        "url": "https://files.pythonhosted.org/packages/f8/bd/bda9740771b0ad346801c3008f41572024b8c6b8a9292749673b7140076e/wissen-0.12.14.1.tar.gz"
      }
    ],
    "0.12.14.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2d81e77841a125a66301a6c80b4b041e",
          "sha256": "f61f697cc1b4084d1e27912e4530800ead2f97ea3383980abff0573c87e7a546"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.10.tar.gz",
        "has_sig": false,
        "md5_digest": "2d81e77841a125a66301a6c80b4b041e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1774952,
        "upload_time": "2017-04-22T11:04:15",
        "url": "https://files.pythonhosted.org/packages/fd/95/89550e1d2828b7e7526e1dba26728653ddaf8c9cf7f81a92a94d8945f373/wissen-0.12.14.10.tar.gz"
      }
    ],
    "0.12.14.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "61aede31d2f1f6038367b352a43bb1bc",
          "sha256": "cedc778eef85bba7f38fbba54fd2036903713290f29b4f2f794b06c14418ba64"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.11.tar.gz",
        "has_sig": false,
        "md5_digest": "61aede31d2f1f6038367b352a43bb1bc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1774925,
        "upload_time": "2017-04-22T12:10:39",
        "url": "https://files.pythonhosted.org/packages/f5/56/7b9d209c74ade4062016b85981fb63113038a15fda57d61436b627c48f88/wissen-0.12.14.11.tar.gz"
      }
    ],
    "0.12.14.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e96adab62a5e6de51947d3087aeb16e9",
          "sha256": "b066f3be3eb63f121cb0f0b81c7bcc2a505a7c988f9b19703d55e00fb1cd64e3"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.12.tar.gz",
        "has_sig": false,
        "md5_digest": "e96adab62a5e6de51947d3087aeb16e9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1774847,
        "upload_time": "2017-04-22T17:58:35",
        "url": "https://files.pythonhosted.org/packages/67/68/9ad5e8fa848eb6e893ab4bcfe441b0532d1f34633ec91729c422f6dc68e6/wissen-0.12.14.12.tar.gz"
      }
    ],
    "0.12.14.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5642c09c96d56c51216dce66daa109c2",
          "sha256": "60d6fc0bfbe765b8efaef2d31cd9ea68946ec6d7f6344cb160623818c1aaafc8"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.13.tar.gz",
        "has_sig": false,
        "md5_digest": "5642c09c96d56c51216dce66daa109c2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1774864,
        "upload_time": "2017-04-22T18:22:16",
        "url": "https://files.pythonhosted.org/packages/87/42/c144bc782ed5e00d8f120b7e0e7998dc9f4a486a3640b3388bd0d5b43cfc/wissen-0.12.14.13.tar.gz"
      }
    ],
    "0.12.14.14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "12ebe28f51e268ad930bb81d5069e4d0",
          "sha256": "094484cd52fdfbe7418eaca436092229794d8687b942a2d19b785610ae85036f"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.14.tar.gz",
        "has_sig": false,
        "md5_digest": "12ebe28f51e268ad930bb81d5069e4d0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1775004,
        "upload_time": "2017-04-22T22:48:58",
        "url": "https://files.pythonhosted.org/packages/35/4f/d6d56332544459b8b5b25045426fd05de8b4d07bbe3d3f94720e0b6e72b8/wissen-0.12.14.14.tar.gz"
      }
    ],
    "0.12.14.15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b8cbfe842f429bcfa7d2c83a8fc236f6",
          "sha256": "bf129e272fe8c4d133c6b600bd9de67254edd9592034653a3bedc3c56e66caae"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.15.tar.gz",
        "has_sig": false,
        "md5_digest": "b8cbfe842f429bcfa7d2c83a8fc236f6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1775414,
        "upload_time": "2017-04-23T04:59:49",
        "url": "https://files.pythonhosted.org/packages/7f/d0/948d689b09c9c12e49547a8b7bf199036d7d254b507a71b5a7f65365c7eb/wissen-0.12.14.15.tar.gz"
      }
    ],
    "0.12.14.16": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8d57403bf678fcec9010ff5234ce58d7",
          "sha256": "d75771f8f29c88f43318f77e2f47019f0c9a5dfbb6b6f3398fae7af8c0b47d31"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.16.tar.gz",
        "has_sig": false,
        "md5_digest": "8d57403bf678fcec9010ff5234ce58d7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1775388,
        "upload_time": "2017-04-23T05:08:29",
        "url": "https://files.pythonhosted.org/packages/50/62/ef06552c381f256e261ad6058125fe16540bb5428818fc37bf0d661751c9/wissen-0.12.14.16.tar.gz"
      }
    ],
    "0.12.14.17": [
      {
        "comment_text": "",
        "digests": {
          "md5": "90e1c11bab9a17691f66ae88935e18d6",
          "sha256": "9fc2d11577f5e280181c30c08d89d25170508526f3a635f211644bbf49ea121a"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.17.tar.gz",
        "has_sig": false,
        "md5_digest": "90e1c11bab9a17691f66ae88935e18d6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1775382,
        "upload_time": "2017-04-23T05:13:49",
        "url": "https://files.pythonhosted.org/packages/a4/47/7c31e4ecbea832c3ea4fe46420338cf2fd49fd7dd583aed82ea01c718e99/wissen-0.12.14.17.tar.gz"
      }
    ],
    "0.12.14.18": [
      {
        "comment_text": "",
        "digests": {
          "md5": "09669bb6524e07192e787251440f10c5",
          "sha256": "eeb6c9ee33c8e09776c2793c31d2b487c1d0f0e6a619c7b5c0bf61731d9b60d5"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.18.tar.gz",
        "has_sig": false,
        "md5_digest": "09669bb6524e07192e787251440f10c5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1775385,
        "upload_time": "2017-04-23T05:14:49",
        "url": "https://files.pythonhosted.org/packages/89/5d/fb4aea74fa7b171e4015db9a03103bb8ec4777024790a2358748a917b25d/wissen-0.12.14.18.tar.gz"
      }
    ],
    "0.12.14.19": [
      {
        "comment_text": "",
        "digests": {
          "md5": "276b734d91f38832b3d4a3f9e2a388e1",
          "sha256": "ec48525666c739d20d3ec3d15dfa40db6c1ffea40269b53977ec6ce2b11d9fa3"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.19.tar.gz",
        "has_sig": false,
        "md5_digest": "276b734d91f38832b3d4a3f9e2a388e1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1775430,
        "upload_time": "2017-04-23T05:17:08",
        "url": "https://files.pythonhosted.org/packages/e3/5d/06e589e9967e70208c5c2b2cbc1b09129e40950887af02e493bde2820cac/wissen-0.12.14.19.tar.gz"
      }
    ],
    "0.12.14.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3bb949dee1cd662fbb1d34936e90d13a",
          "sha256": "4edebb2c4bbba8e2debc23bf23eaed5b07472b3cb249f391b7284db1cf5cecc4"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3bb949dee1cd662fbb1d34936e90d13a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1775001,
        "upload_time": "2017-04-21T20:54:13",
        "url": "https://files.pythonhosted.org/packages/3e/e9/054d68534695f619b4b558a6baaf6b327a9179df834676d9ce361c4b8d9d/wissen-0.12.14.2.tar.gz"
      }
    ],
    "0.12.14.20": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e6bbe9f018ca8abeaa0ad1bd27e971ce",
          "sha256": "3f351debbee63056ded41f6e7e979f5ed1bd619fd09f885a58353532d0f2c0bd"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.20.tar.gz",
        "has_sig": false,
        "md5_digest": "e6bbe9f018ca8abeaa0ad1bd27e971ce",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1775413,
        "upload_time": "2017-04-23T10:27:40",
        "url": "https://files.pythonhosted.org/packages/75/76/691143e7bd30a0cb57b89ee6d7f3931d1a620f4296ac1f0b2b8fb932defe/wissen-0.12.14.20.tar.gz"
      }
    ],
    "0.12.14.21": [
      {
        "comment_text": "",
        "digests": {
          "md5": "256f7a461322ee254a5cd9cc92d916d4",
          "sha256": "3aac9c547a2ea7e536778e9b2c1cc58bfd0cac0de0a00d0c06cb4b0e1e8b49c2"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.21.tar.gz",
        "has_sig": false,
        "md5_digest": "256f7a461322ee254a5cd9cc92d916d4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1775428,
        "upload_time": "2017-04-23T10:42:28",
        "url": "https://files.pythonhosted.org/packages/e2/0b/f514c784e41daaa048af1c924c2b6a15f15e9c7e560f05cc97379520b0aa/wissen-0.12.14.21.tar.gz"
      }
    ],
    "0.12.14.23": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e4b34b8821c8f7457a1f2e81b1ecca52",
          "sha256": "f88e16823abd7e2446561540c030358d5871c9120584e1324462cab1cdbdbd90"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.23.tar.gz",
        "has_sig": false,
        "md5_digest": "e4b34b8821c8f7457a1f2e81b1ecca52",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1775438,
        "upload_time": "2017-04-23T23:13:09",
        "url": "https://files.pythonhosted.org/packages/fa/29/a1a5792a0f5a597961758ca3a31a43c473f030dfa3dceb84766e69a485cf/wissen-0.12.14.23.tar.gz"
      }
    ],
    "0.12.14.24": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2c4e61589d7f9b03be19df4571f64806",
          "sha256": "702365cdfc8282451f91cb3c0ec1fa49c6b11be956f36b611fadc1fbbfd706c2"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.24.tar.gz",
        "has_sig": false,
        "md5_digest": "2c4e61589d7f9b03be19df4571f64806",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1775381,
        "upload_time": "2017-04-23T23:19:35",
        "url": "https://files.pythonhosted.org/packages/a6/a2/bfcd2d1bc87038835199344e7095dc1a690f8e8aeeb03a0c9226b4fcb4c1/wissen-0.12.14.24.tar.gz"
      }
    ],
    "0.12.14.25": [
      {
        "comment_text": "",
        "digests": {
          "md5": "239ab08792156e4875d88dbc71262657",
          "sha256": "1f5e2a6251338a4c84bd33e37aa646ff9337e3f0bb0f984a7850d3d196aaa7fb"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.25.tar.gz",
        "has_sig": false,
        "md5_digest": "239ab08792156e4875d88dbc71262657",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1796328,
        "upload_time": "2017-05-04T00:27:16",
        "url": "https://files.pythonhosted.org/packages/ba/03/20737e1161221410f37864b475e7076074bd2331cc1f33e877005eb1e3fd/wissen-0.12.14.25.tar.gz"
      }
    ],
    "0.12.14.26": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bf21db14c0a88826bcb7f1a81321be1a",
          "sha256": "09d329f39e7560b8eb278e1fac5a976d9bb463d76dcc71c84b3ad9751ae6b720"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.26.tar.gz",
        "has_sig": false,
        "md5_digest": "bf21db14c0a88826bcb7f1a81321be1a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1796404,
        "upload_time": "2017-05-08T01:56:58",
        "url": "https://files.pythonhosted.org/packages/c1/96/0f1b4f6b8aa436ea49fcf8a59bf280d01a483cab09766f55bda348c5fceb/wissen-0.12.14.26.tar.gz"
      }
    ],
    "0.12.14.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bee7262e588d4ecaecd1a53b6fa0434c",
          "sha256": "e876098dec40cc693d114d09a97833ecf3e591f8d64ff2767868cc18f5c3d5d3"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.3.tar.gz",
        "has_sig": false,
        "md5_digest": "bee7262e588d4ecaecd1a53b6fa0434c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1774999,
        "upload_time": "2017-04-22T02:00:20",
        "url": "https://files.pythonhosted.org/packages/1a/09/1613bdf4bf1c535ab6aa903297a34d4349c750140e650262f8684875073f/wissen-0.12.14.3.tar.gz"
      }
    ],
    "0.12.14.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "555cd28f48e98bdd9377ce843f13ce21",
          "sha256": "81819b9f6ad67c449d1285000861b19762ba653f516b112dace21768ade212c6"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.4.tar.gz",
        "has_sig": false,
        "md5_digest": "555cd28f48e98bdd9377ce843f13ce21",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1774970,
        "upload_time": "2017-04-22T02:11:44",
        "url": "https://files.pythonhosted.org/packages/78/8f/81ada611763d9d7aa447b7fb5da5d737bead5d3aa6e8168f52443fb28b91/wissen-0.12.14.4.tar.gz"
      }
    ],
    "0.12.14.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "df878f5c94e14f6b31eed8b8a8b8f476",
          "sha256": "cd96b3bba99ff5856ac330aa749ccb2722df7f46e707c63ad0e6ef5979f79554"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.5.tar.gz",
        "has_sig": false,
        "md5_digest": "df878f5c94e14f6b31eed8b8a8b8f476",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1774930,
        "upload_time": "2017-04-22T02:35:58",
        "url": "https://files.pythonhosted.org/packages/37/13/3a5e42e0d9cef7e7fe318b82a27766fb500ffa0947576164241a2cdd226a/wissen-0.12.14.5.tar.gz"
      }
    ],
    "0.12.14.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f176ba9f6b7f011911d8e1365f0aeb0a",
          "sha256": "cab8c39ed342d80c74c619199e4ea674c60fb53245bb540527df88c4a068bc99"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.6.tar.gz",
        "has_sig": false,
        "md5_digest": "f176ba9f6b7f011911d8e1365f0aeb0a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1774988,
        "upload_time": "2017-04-22T03:11:35",
        "url": "https://files.pythonhosted.org/packages/c0/d2/46ab277d4bcacb18bd72e6056b8fd982d25e3133624a5acfe4a24e759e61/wissen-0.12.14.6.tar.gz"
      }
    ],
    "0.12.14.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "68ece9d4c1211262c84afdf9f94b2d93",
          "sha256": "83dfb6ba502619d000d36f7114ace3b594f84386dfc4da3d00712aeba5bbe43c"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.7.tar.gz",
        "has_sig": false,
        "md5_digest": "68ece9d4c1211262c84afdf9f94b2d93",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1774940,
        "upload_time": "2017-04-22T08:17:39",
        "url": "https://files.pythonhosted.org/packages/e9/4f/1c4065e5aee0bc56f46af5167c95522b82850c8a5dfc3d0266c6358beba9/wissen-0.12.14.7.tar.gz"
      }
    ],
    "0.12.14.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b82f1e13929f8f61d45ee8976e6d153e",
          "sha256": "77630f2402a80c443cffa40c23f384a33b676334be19317f0c91c5978306adf1"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.8.tar.gz",
        "has_sig": false,
        "md5_digest": "b82f1e13929f8f61d45ee8976e6d153e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1774932,
        "upload_time": "2017-04-22T10:04:46",
        "url": "https://files.pythonhosted.org/packages/ab/0e/3656395d3cdc62e7d074475bbdcbcbbcf0b7acaf72027d2cf8ecac132891/wissen-0.12.14.8.tar.gz"
      }
    ],
    "0.12.14.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8b8ca2fa012e1510b35b71b810c0c15c",
          "sha256": "144f0f8890a162395da01f1eb80844e252123ac3cad47a3a256e268453358503"
        },
        "downloads": 0,
        "filename": "wissen-0.12.14.9.tar.gz",
        "has_sig": false,
        "md5_digest": "8b8ca2fa012e1510b35b71b810c0c15c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1774904,
        "upload_time": "2017-04-22T10:35:39",
        "url": "https://files.pythonhosted.org/packages/e8/c3/b2118d37380ca6250fdeffb582d0f2786daac4315556cf9d29f903e374c6/wissen-0.12.14.9.tar.gz"
      }
    ],
    "0.9.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "10af4bafd8d6ff8f47ec01975e35fb8e",
          "sha256": "a45d38fa500066b1bfc249cd3dec9f506a1ad64d730cca922d8adf8f8b9b2925"
        },
        "downloads": 433,
        "filename": "wissen-0.9.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "10af4bafd8d6ff8f47ec01975e35fb8e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1998009,
        "upload_time": "2015-11-29T05:38:07",
        "url": "https://files.pythonhosted.org/packages/59/33/b1eeb13f02c33ce0a10611a18dbf02055d3a43c6a234cf366f9b12bbe407/wissen-0.9.0.3.tar.gz"
      }
    ],
    "0.9.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2f5a6bb811135e5ff4cce91a0b619a80",
          "sha256": "b2ef4678bb32eed861ad0e602a31c03b9e624da5935fef047718ce4c996b2d14"
        },
        "downloads": 349,
        "filename": "wissen-0.9.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2f5a6bb811135e5ff4cce91a0b619a80",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1998081,
        "upload_time": "2016-01-03T11:00:30",
        "url": "https://files.pythonhosted.org/packages/50/55/c90c8b0f7ed52ccd983cbe76270e391f67f9f25c22a9e6be13f3bf5f94a7/wissen-0.9.0.4.tar.gz"
      }
    ],
    "0.9.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "af60b5ad38c4fccca4aa17768b46108e",
          "sha256": "5c967148e578b603279987239d3d51eae81bd00b7bce6fb0f88cbe6c6a111920"
        },
        "downloads": 358,
        "filename": "wissen-0.9.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "af60b5ad38c4fccca4aa17768b46108e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1998432,
        "upload_time": "2016-01-04T07:50:52",
        "url": "https://files.pythonhosted.org/packages/1d/2e/d564719f5fdcee866598ffe532a00dde58ecc59c9ca52d05f8db037072dd/wissen-0.9.0.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "bf21db14c0a88826bcb7f1a81321be1a",
        "sha256": "09d329f39e7560b8eb278e1fac5a976d9bb463d76dcc71c84b3ad9751ae6b720"
      },
      "downloads": 0,
      "filename": "wissen-0.12.14.26.tar.gz",
      "has_sig": false,
      "md5_digest": "bf21db14c0a88826bcb7f1a81321be1a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 1796404,
      "upload_time": "2017-05-08T01:56:58",
      "url": "https://files.pythonhosted.org/packages/c1/96/0f1b4f6b8aa436ea49fcf8a59bf280d01a483cab09766f55bda348c5fceb/wissen-0.12.14.26.tar.gz"
    }
  ]
}