{
  "info": {
    "author": "Florian Plattner",
    "author_email": "me@florianplattner.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Other Environment",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "config_py\n=========\n\nDeclare and load configuration from environment variables.\n\n\nInstall\n-------\n\n.. code-block:: sh\n\n   pip install config\n\n\n\nExamples\n--------\n\n\nDeclare and load scalar values\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n   from config import Config, parse_int, parse_float, parse_str, parse_bool\n\n   cfg = Config()\n\n   # declare variables with the appropriate parser\n   cfg.declare('my_int_variable', parse_int())\n   cfg.declare('my_float_variable', parse_float())\n   cfg.declare('my_str_variable', parse_str())\n   cfg.declare('my_bool_variable', parse_bool())\n\n   # load the values\n\n   # will load the value of MY_INT_VARIABLE as an int\n   int_result = cfg.get('my_int_variable')\n   # will load the value of MY_FLOAT_VARIABLE as a float\n   float_result  = cfg.get('my_float_variable')\n   # will load the value of MY_STR_VARIABLE as a str\n   str_result = cfg.get('my_str_variable')\n\n\nDeclare and load list values\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n   from config import Config, parse_int_list\n\n   cfg = Config()\n\n   # declare variables with the appropriate parser\n   cfg.declare('my_int_list_variable', parse_int_list())\n\n   # load the values\n\n   # will load the value of MY_INT_LIST_VARIABLE as a list of ints.\n   # By default it assumes the elements to be comma separated\n   int_list_result = cfg.get('my_int_list_variable')\n\n\nDeclare and load nested values\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n   from config import Config, parse_str\n\n   cfg = Config()\n   cfg.declare(\n       'dict',\n       {\n          'value1': parse_str(),\n          'dict2': {\n              'value2': parse_str(),\n          },\n       },\n   )\n\n   # this will load values from two environment variables DICT_VALUE_1 and DICT_DICT2_VALUE2 and return them in the\n   # same structure as declared above\n   dict_result = cfg.get('dict')\n\n\nAdd validation\n^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n   from config import Config, parse_str, parse_str_list\n   from validators import email\n\n   # config expects validators to raise an Error on failure.\n   # Since the validators package returns Failures instead of raising, we create a small adapter.\n   def email_validator(value):\n       result = email(value)\n       if isinstance(result, ValidationFailure):\n           raise ValueError('\"{}\" is not a valid email address'.format(value))\n\n   cfg = Config()\n\n   cfg.declare('valid_email', parse_str(validator=email_validator))\n   # this also works with lists. The validator function is applied to each value separately\n   cfg.declare('valid_list_of_emails, parse_str_list(validator=email_validator))\n\n   valid_email = cfg.get('valid_email')\n   valid_list_of_emails = cfg.get('valid_list_of_emails')\n\n\nReloading configuration at runtime\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n   from config import Config, parse_str, reload\n\n   cfg = Config()\n   cfg.declare('some_value', parse_str())\n   value = cfg.get('some_value')\n\n   # Values are actually loaded during declare().\n   # Changes to the environment at runtime are not picked up automatically.\n   # Relaoding has to be triggered explicitly.\n\n   cfg.reload()\n\n   new_value = cfg.get('some_value')\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/flowpl/env_config",
    "keywords": "config\nconfiguration\nenvironment\nenv\nenvironment variables",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "env_config",
    "platform": "",
    "project_url": "https://pypi.org/project/env_config/",
    "release_url": "https://pypi.org/project/env_config/1.3.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Declare and load configuration from environment variables",
    "version": "1.3.0"
  },
  "releases": {
    "0.0.1.dev11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6a464c5f71bf7c7ebca33b358c87b6c8",
          "sha256": "dc3e5756c67f83b86305f80f764c4339dc0a22b49dafd820cdfc13cde374c929"
        },
        "downloads": -1,
        "filename": "env_config-0.0.1.dev11.tar.gz",
        "has_sig": false,
        "md5_digest": "6a464c5f71bf7c7ebca33b358c87b6c8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8284,
        "upload_time": "2017-10-29T17:21:53",
        "url": "https://files.pythonhosted.org/packages/bc/d2/5ca93938fc2f11cdbfd57a8f4b8f6f401ce91ba410b4eeb063aa4f696a97/env_config-0.0.1.dev11.tar.gz"
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "06239d1d5c7bd0c62bed9288475fc7a9",
          "sha256": "9a1729657e48202266c96bd4aa205597aa2f5e5ebb8dfba31578be6e7b6ca818"
        },
        "downloads": -1,
        "filename": "env_config-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "06239d1d5c7bd0c62bed9288475fc7a9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4731,
        "upload_time": "2017-10-29T17:13:49",
        "url": "https://files.pythonhosted.org/packages/12/da/ec932cde69a9a3a7771c723dfc050e721f4d584f5816bd8c19f07599131e/env_config-1.0.tar.gz"
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "950ce8cc67778ebe1adeec8109dd2a23",
          "sha256": "a757b9af6d038fb19154b55fb2c437261f8130b556042d960aa39d00ed00eb72"
        },
        "downloads": -1,
        "filename": "env_config-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "950ce8cc67778ebe1adeec8109dd2a23",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8307,
        "upload_time": "2017-10-29T17:24:11",
        "url": "https://files.pythonhosted.org/packages/db/ba/fcbea337b76426a4ef5d786800cac12ca87d6586d6e0678616e40c03a364/env_config-1.2.0.tar.gz"
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "366c301d5e6fb17cd209ee6631a81e6c",
          "sha256": "dd298d4b1b27e96a594681d216fe8b79529f713132c804fd73a29c426a008e99"
        },
        "downloads": -1,
        "filename": "env_config-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "366c301d5e6fb17cd209ee6631a81e6c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8425,
        "upload_time": "2017-10-29T17:36:44",
        "url": "https://files.pythonhosted.org/packages/97/ab/a7f98fc249ef1a9ff30e86ad3585d847c23187bab89228e669512c1336ea/env_config-1.3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "366c301d5e6fb17cd209ee6631a81e6c",
        "sha256": "dd298d4b1b27e96a594681d216fe8b79529f713132c804fd73a29c426a008e99"
      },
      "downloads": -1,
      "filename": "env_config-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "366c301d5e6fb17cd209ee6631a81e6c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8425,
      "upload_time": "2017-10-29T17:36:44",
      "url": "https://files.pythonhosted.org/packages/97/ab/a7f98fc249ef1a9ff30e86ad3585d847c23187bab89228e669512c1336ea/env_config-1.3.0.tar.gz"
    }
  ]
}