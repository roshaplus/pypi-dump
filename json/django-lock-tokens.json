{
  "info": {
    "author": "Renaud Parent",
    "author_email": "renaud.parent@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "==================\ndjango-lock-tokens\n==================\n\ndjango-lock-tokens is a Django application that provides a locking mechanism to prevent concurrency editing.\n\nIt is not user-based nor session-based, it is just token based. When you lock a resource, you are given a token string with an expiration date, and you will need to provide this token to unlock that resource.\n\nThe application provides some useful functions to handle this token mechanism with sessions if you want to, and a REST API (with a javascript client for it) to deal with lock tokens without sessions.\n\nRequires Django >= 1.7.\n\nTable of Contents\n-----------------\n\n1. `Install`_\n2. `TL;DR`_\n3. `LockableModel proxy`_\n4. `LockableModelAdmin for admin interface`_\n5. `Session-based usage: lock_tokens.sessions module`_\n6. `Session-based usage: lock_tokens.decorators module`_\n7. `REST API`_\n8. `REST API Javascript client`_\n9. `Settings`_\n10. `Tests`_\n\nInstall\n-------\n\n1. Run ``pip install django-lock-tokens``\n\n2. Add ``lock_tokens`` to your ``INSTALLED_APPS`` setting. As django-lock-tokens uses the ``contenttypes`` framework, make sure it is also available in your ``INSTALLED_APPS`` setting:\n\n.. code:: python\n\n    INSTALLED_APPS = [\n        ...\n        'django.contrib.contenttypes',\n        ...\n        'lock_tokens',\n    ]\n\n3. Run ``python manage.py migrate`` from the root of your django project to install the lock tokens model.\n\n4. If you want to use the ``LockableAdmin`` and all the session-based functionalities, make sure you have enabled a session middleware in your settings, for example:\n\n.. code:: python\n\n    MIDDLEWARE_CLASSES = (\n        ...\n        'django.contrib.sessions.middleware.SessionMiddleware',\n        ...\n    )\n\n5. If you want to use the REST API, include ``lock_tokens.urls`` with the correct namespace in your ``urls.py`` like this (it is mandatory if you want to use the ``LockableModelAdmin``):\n\n.. code:: python\n\n    urlpatterns = [\n      ...\n      url(r'^lock_tokens/', include('lock_tokens.urls', namespace='lock-tokens')),\n      ...\n    ]\n\nTL;DR\n-----\n\nAfter having completed previous steps, using the locking mechanism in your views is as simple as this:\n\n.. code:: python\n\n  from django.http import HttpResponseForbidden\n  from lock_tokens.exceptions import AlreadyLockedError, UnlockForbiddenError\n  from lock_tokens.sessions import check_for_session, lock_for_session, unlock_for_session\n\n  from my_app.models import MyModel\n\n  def view_with_object_edition(request):\n    \"\"\"This view locks the instance of MyModel that is to be edited.\"\"\"\n    # Get MyModel instance:\n    obj = MyModel.objects.get(...)\n    try:\n        lock_for_session(obj, request.session)\n    except AlreadyLockedError:\n        return HttpResponseForbidden(\"This resource is locked, sorry !\")\n    # ... Do stuff\n    return render(...)\n\n  def view_that_saves_object(request):\n    \"\"\"This view locks the instance of MyModel that is to be edited.\"\"\"\n    # Get MyModel instance:\n    obj = MyModel.objects.get(...)\n    if not check_for_session(obj, request.session):\n        return HttpResponseForbidden(\"Cannot modify the object, you don't have the lock.\")\n    # ... Do stuff\n    unlock_for_session(obj, request.session)\n    return render(...)\n\n\nOr use it directly in your Django templates to handle locking on the client side::\n\n  {% load lock_tokens_tags %}\n  {% lock_tokens_api_client %}\n  ...\n  <script type=\"text/javascript\">\n    window.addEventListener('lock_tokens.clientready', function () {\n      LockTokens.lock(...);\n      ...\n      LockTokens.unlock(...);\n    });\n  </script>\n\n\n``LockableModel`` proxy\n-----------------------\n\nTo make one of your models lockable, use the ``LockableModel`` class. ``LockableModel`` is just a Django proxy model, which simply provides additional locking methods to your models.\n\nSo you can either make your models inherit from ``LockableModel``:\n\n.. code:: python\n\n  from lock_tokens.models import LockableModel\n\n  class MyModel(LockableModel):\n      ...\n\n\n  obj = MyModel.get(...)\n  token = obj.lock()\n\nor you can simply use it as a proxy on a given model instance:\n\n.. code:: python\n\n  from lock_tokens.models import LockableModel\n\n  from my_app.models import MyModel\n\n  obj = MyModel.get(...)\n  token = LockableModel.lock(obj)\n\nThis can be useful if you don't want to expose the locking methods for your models everywhere, or if you want to lock resources that come from a third party application.\n\nNote that as ``LockableModel`` is just a proxy model, make your models inherit from it won't change their fields so there will be no additional migrations required.\n\nAdditionally, if your model inherits from ``LockableModel``, the ``objects`` Manager has a specific method that allows you to get and lock a model like so:\n\n.. code:: python\n\n  >>>obj, token = MyModel.get_and_lock(...<usual get arguments>)\n\nIf you already overrided the default ``objects`` manager with a custom one and that you want to get this method available, make your custom manager inherit from ``lock_tokens.managers.LockableModelManager``.\n\n\n``LockableModel.lock(self, token=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLocks the given object, or renew existing lock if the token parameter is provided.\n\nReturns a ``dict`` containing a token a its expiration date.\n\nRaises a ``lock_tokens.exceptions.AlreadyLockedError`` if the resource is already locked, or if the token is wrong.\n\nExample:\n\n.. code:: python\n\n  def test(myObject):\n      try:\n          token = myObject.lock()\n      except AlreadyLockedError:\n          print \"This object is already locked\"\n      return token\n\n  >>>token = test(obj)\n  {\"token\": \"9692ac52a27a40308b82b49b77357c97\", \"expires\": \"2016-06-23 09:48:06\"}\n  >>>test(obj)\n  \"This object is already locked\"\n  >>>test(obj, token['token'])\n  {\"token\": \"9692ac52a27a40308b82b49b77357c97\", \"expires\": \"2016-06-23 09:48:26\"}\n\n\n``LockableModel.unlock(self, token)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUnlocks the given object if the provided token is correct.\n\nRaises a ``lock_tokens.exceptions.UnlockForbiddenError``\n\n``LockableModel.is_locked(self)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns a boolean that indicates whether the given object is currently locked or not.\n\n``LockableModel.check_lock(self, token)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns a boolean that indicates if the given token is valid for this object. Will also return ``True`` with a warning if the object is not locked (lock expired or no lock).\n\n\n``LockableModelAdmin`` for admin interface\n------------------------------------------\n\nIf you want to make the admin interface lock-aware, and lock objects that are edited,\nsimply make your ``ModelAdmin`` class inherit from ``LockableModelAdmin``:\n\n.. code:: python\n\n  from lock_tokens.admin import LockableModelAdmin\n  from django.contrib import admin\n\n  from my_app.models import MyModel\n\n  class MyModelAdmin(LockableModelAdmin):\n    ...\n\n  admin.site.register(MyModel, MyModelAdmin)\n\nWith this, when accessing a given instance of ``MyModel`` from the admin interface,\nit will check that the instance is not locked. If it is not, it will lock it. If it is,\nthen there will be a warning message displayed to inform that the object cannot be edited,\nand the saving buttons will not appear. And if despite this, the change form is sent, it will raise a ``PermissionDenied`` exception so you will get a HTTP 403 error.\n\n\nSession-based usage: ``lock_tokens.sessions`` module\n----------------------------------------------------\n\nIn most cases, it will be the easiest way to deal with lock tokens, as you won't need to handle them at all.\n\n``lock_for_session(obj, session)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLock an object in the given session. This function will try to lock the object,\nand if it succeeds, it will hold the token value in a session variable.\n\nRaises a ``lock_tokens.exceptions.AlreadyLockedError`` if the resource is already locked.\n\n``unlock_for_session(obj, session)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUnlocks an object in the given session.\n\nRaises a ``lock_tokens.exceptions.UnlockForbiddenError`` if the session does not hold the lock on the object.\n\nSession-based usage: ``lock_tokens.decorators`` module\n------------------------------------------------------\n\nThis module provides view decorators for common use cases.\n\n``locks_object(model, get_object_id_callable)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLocks an object before executing view, and keep lock token in the request session. Does not unlock it when the view returns.\n\nArguments:\n\n- ``model``: the concerned django Model\n- ``get_object_id_callable``: a callable that will return the concerned object id based on the view arguments\n\nExample:\n\n.. code:: python\n\n  from lock_tokens.decorators import locks_object\n\n  @locks_object(MyModel, lambda request: request.GET.get('my_model_id'))\n  def myview(request):\n    # In this example the view will lock the MyModel instance with the id\n    # provided in the request GET parameter my_model_id\n    ...\n\n  @locks_object(MyModel, lambda request, object_id: object_id)\n  def anotherview(request, object_id):\n    # In this example the view will lock the MyModel instance with the id\n    # provided as the second view argument\n    ...\n\n``holds_lock_on_object(model, get_object_id_callable)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLocks an object before executing view, and keep lock token in the request session. Hold lock until the view is finished executing, then release it.\n\nArguments:\n\n- ``model``: the concerned django Model\n- ``get_object_id_callable``: a callable that will return the concerned object id based on the view arguments\n\nSee examples for ``locks_object``.\n\n\nREST API\n--------\n\nIf you want to use locking mechanism from outside your views, there is a simple HTTP API to handle tokens. It does not use sessions at all, so you need to handle the tokens yourself in this case.\n\nHere are the different entry points, where ``<app_label>`` is the name of the application of the concerned model, ``<model>`` is the name of the model, ``<object_id>`` is the id of the cmodel instance, and ``<token>`` is the lock token value.\n\n*POST* ``/lock_tokens/<app_label>/<model>/<object_id>/``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nLocks object. Returns a JSON response with \"token\" and \"expires\" keys.\n\nReturns a 404 HTTP error if the object could not be found.\n\nReturns a 403 HTTP error if the object is already locked.\n\n*GET* ``/lock_tokens/<app_label>/<model>/<object_id>/<token>/``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nReturns a JSON response with \"token\" and \"expires\" keys.\n\nReturns a 404 HTTP error if the object could not be found.\n\nReturns a 403 HTTP error if the token is incorrect.\n\n*PATCH* ``/lock_tokens/<app_label>/<model>/<object_id>/<token>/``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nRenews the lock on the object. Returns a JSON response with \"token\" and \"expires\" keys.\n\nReturns a 404 HTTP error if the object could not be found.\n\nReturns a 403 HTTP error if the token is incorrect.\n\n*DELETE* ``/lock_tokens/<app_label>/<model>/<object_id>/<token>/``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nUnlocks object.\n\nReturns a 404 HTTP error if the object could not be found.\n\nReturns a 403 HTTP error if the token is incorrect.\n\n\nREST API Javascript client\n--------------------------\n\nThe application includes a javascript client to interact with the API. To enable it, simply add the following lines to your template, somewhere in the ``<body>`` section ::\n\n  {% load lock_tokens_tags %}\n  {% lock_tokens_api_client %}\n\nDon't forget to include the REST API urls with the correct namespace as described in section 1, otherwise it won't work.\n\nAdding those lines in your template will create a variable named ``LockTokens``, and emit a ``lock_tokens.clientready`` event when it is available in the javascript scope. This object has the following methods (parameters are self-describing):\n\n``LockTokens.lock(app_label, model, object_id, callback)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLocks the corresponding object. When the call to the API is completed, calls the ``callback`` method with a ``lock_tokens.Token`` instance as an argument, or ``null`` if the API request failed.\n\nNB: The ``LockTokens`` handles the tokens for you, so you don't need to read API responses and/or store tokens yourself.\n\n``LockTokens.register_existing_lock_token(app_label, model, object_id, token_string, callback)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd an existing token to the ``LockTokens`` registry. This method is useful for example when you want to handle on client side a lock that has been set on the server side. You must provide the token string in addition to other parameters, the client will make a call to the API to ensure the token is valid and get its expiration date. Calls the ``callback`` method with a ``lock_tokens.Token`` instance as an argument, or ``null`` if the registration failed.\n\n``LockTokens.unlock(app_label, model, object_id, callback)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLocks the corresponding object. When the call to the API is completed, calls the ``callback`` method with a boolean that indicates whether the API request has succeeded. Note that this method can be called only on an object that has been locked or registered as locked by the ``LockTokens`` object.\n\n``LockTokens.hold_lock(app_label, model, object_id)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nHolds a lock on the corresponding object. It is like the ``lock`` method, except it renews the token each time it is about to expire. A call to ``unlock`` will stop the lock holding.\n\n\n``LockTokens.clear_all_locks(callback)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUnlocks all registered objects. Calls ``callback`` with no arguments when unlocking of every objects is done.\n\n\nSettings\n--------\n\nYou can override ``lock_token`` default settings by adding a ``dict`` named ``LOCK_TOKENS`` to your ``settings.py`` like so:\n\n.. code:: python\n\n  LOCK_TOKENS = {\n    'API_CSRF_EXEMPT': True,\n    'DATEFORMAT': \"%Y%m%d%H%M%S\",\n    'TIMEOUT': 60,\n  }\n\nTIMEOUT\n^^^^^^^\n\nThe validity duration for a lock token in seconds. Defaults to ``3600`` (one hour).\n\nDATEFORMAT\n^^^^^^^^^^\n\nThe format of the expiration date returned in the token ``dict``. Defaults to ``\"%Y-%m-%d %H:%M:%S %Z\"``\n\nAPI_CSRF_EXEMPT\n^^^^^^^^^^^^^^^\n\nA boolean that indicates whether to deactivate CSRF checks on the API views or not. Defaults to ``False``.\n\nTests\n-----\n\nTo run tests, make sure Django >= 1.7 is installed in your virtualenv, then simply run ``python ./runtests.py`` from the root of the repository.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/rparent/django-lock-tokens",
    "keywords": "django concurrent editing lock locking tokens",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-lock-tokens",
    "platform": "",
    "project_url": "https://pypi.org/project/django-lock-tokens/",
    "release_url": "https://pypi.org/project/django-lock-tokens/0.1.3/",
    "requires_python": "",
    "summary": "A Django application that provides a locking mechanism to prevent concurrency editing.",
    "version": "0.1.3"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "12245a30f3a0350603d741fd98bebd4f",
          "sha256": "dd6d9266bc51e1896dbc9b1d75a56a469dcd341b861de325f6f3292eb1876598"
        },
        "downloads": 289,
        "filename": "django_lock_tokens-0.1.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "12245a30f3a0350603d741fd98bebd4f",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 21563,
        "upload_time": "2016-10-21T14:09:54",
        "url": "https://files.pythonhosted.org/packages/52/60/f2f4139c847d3f2a26860f84d83c2fedf1ccd7574bf15eb998ca0d4219da/django_lock_tokens-0.1.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "085ed747c7ae122962ed55ce13c95891",
          "sha256": "01a6e0440b997077cae1eee8a18d6750e7453b1e30d7d4455cf71fcb77438510"
        },
        "downloads": 305,
        "filename": "django-lock-tokens-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "085ed747c7ae122962ed55ce13c95891",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17826,
        "upload_time": "2016-10-21T14:09:52",
        "url": "https://files.pythonhosted.org/packages/44/6b/dcf3fedf88a2c17654982c02556128788359bae1ad3d2b12f33a29aeb173/django-lock-tokens-0.1.1.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8480dcd117e1767c37c5ddd565a380b4",
          "sha256": "74fb2a7e815162ff614e9e694a9a383bc3242bcb2aa3633611c15fed941a7157"
        },
        "downloads": 51,
        "filename": "django-lock-tokens-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8480dcd117e1767c37c5ddd565a380b4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18609,
        "upload_time": "2016-12-02T11:44:29",
        "url": "https://files.pythonhosted.org/packages/01/53/9cbf2676b4b400805b1b29327bde8ac7635aa8571401720a9941460fb17f/django-lock-tokens-0.1.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8480dcd117e1767c37c5ddd565a380b4",
        "sha256": "74fb2a7e815162ff614e9e694a9a383bc3242bcb2aa3633611c15fed941a7157"
      },
      "downloads": 51,
      "filename": "django-lock-tokens-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8480dcd117e1767c37c5ddd565a380b4",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 18609,
      "upload_time": "2016-12-02T11:44:29",
      "url": "https://files.pythonhosted.org/packages/01/53/9cbf2676b4b400805b1b29327bde8ac7635aa8571401720a9941460fb17f/django-lock-tokens-0.1.3.tar.gz"
    }
  ]
}