{
  "info": {
    "author": "Hg",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: Public Domain",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Text Processing :: Filters",
      "Topic :: Utilities"
    ],
    "description": "pjy - JSON Python processor\n===========================\n\n``pjy`` is a command-line tool to process JSON data and execute queries on it.\nIt is a bit like `jq <https://stedolan.github.io/jq/>`_ but with a Python syntax for queries.\n\nUsage\n+++++\n\n    pjy <EXPR> [FILE]\n\n``pjy`` will read JSON data from ``FILE`` and print the evaluation result of the Python expression ``EXPR``.\n\nIf ``FILE`` is missing or is \"``-``\", pjy will use stdin.\n\nThe simplest expression to use, which outputs the input unchanged is \"``d``\" (for data).\n\nExamples\n++++++++\n\nIn ``pjy``, expressions are also called \"filters\", as in ``jq``.\n\nJust pretty-print\n-----------------\n\n``d`` (short for \"data\") is the most basic filter, it represents the whole input::\n\n    pjy 'd'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nPrints::\n\n    {\n      \"foo\": \"bar\",\n      \"baz\": [\n        1,\n        2,\n        3\n      ]\n    }\n\nSelect a dict key\n-----------------\n\nThe filters are Python expressions, hence we can select a dict key::\n\n    pjy 'd[\"baz\"]'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nAlternatively, in ``pjy``, dicts keys are also attributes::\n\n    pjy 'd.baz'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nBoth filters will print::\n\n    [\n      1,\n      2,\n      3\n    ]\n\nIn case a key has a reserved name, like ``import`` (keyword) or ``keys`` (dict method), simply use the bracket form.\n\nDo a basic operation\n--------------------\n\nIt's possible to use everything that a Python expression can contain::\n\n    pjy '[i + 1 for i in d[\"baz\"]]'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nPrints::\n\n    [\n      2,\n      3,\n      4\n    ]\n\nLambda-placeholder\n------------------\n\nA special identifier, ``_`` can be used to create lambdas. This identifier will absorb most operations done to it and return a lambda applying them.\nThen, the returned lambda can be applied::\n\n    pjy 'map(_ + 1, d.baz)'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nIs equivalent to::\n\n    pjy 'map((lambda x: x + 1), d.baz)'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nWhich will print::\n\n    [\n      2,\n      3,\n      4\n    ]\n\nThe lambda-placeholder will absorb chained operations::\n\n    pjy 'map((_ + 1) * 2, d.baz)'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\n\nWill result in::\n\n    [\n      4,\n      6,\n      8\n    ]\n\nAnd::\n\n    ./pjy 'd | _[1:3] * 2'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nWill return::\n\n    {\n      \"foo\": \"arar\",\n      \"baz\": [\n        2,\n        3,\n        2,\n        3\n      ]\n    }\n\nPipe-like iteration\n-------------------\n\nThe pipe (``|``) can be used to iterate on a list, it accepts a function as right operand::\n\n    pjy 'd.baz | _ + 1'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nWhich prints::\n\n    [\n      2,\n      3,\n      4\n    ]\n\nIt also operates on a dict's values, and returns a dict::\n\n    pjy 'd | (lambda x: repr(x))'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nThe values are replaced by the right operand value, the keys are unchanged::\n\n    {\n      \"foo\": \"'bar'\",\n      \"baz\": \"[1, 2, 3]\"\n    }\n\nPartial placeholder\n-------------------\n\nIt's not possible to call a function on a placeholder, for example, ``len(_)`` will not work.\nHowever, it's possible to use the ``partial`` helper to prepare the function call::\n\n    pjy 'd | partial(len, _)'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nPrints::\n\n    {\n      \"foo\": 3,\n      \"baz\": 3\n    }\n\n``partial`` ressembles the ``functools.partial`` function: it returns a function wrapping the function passed as first argument.\nThe returned function will call the original function with the fixed arguments passed.\nThe difference is that lambda-placeholders can be passed, and they will be replaced by the wrapper's argument.\n\n``p`` is a short alias for the ``partial`` function which can be used in pjy expressions.\n\nImports\n-------\n\nIt's possible to import modules with the ``imp`` function::\n\n   pjy 'filter(p(imp(\"re\").match, \"f.*\", _), d.keys())'\n        {\"foo\":\"bar\",\"baz\":[1,2,3]}\n\nWill print::\n\n    [\n      \"foo\"\n    ]\n\nThe ``math`` module is already imported and available directly with the ``math`` name.\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/hydrargyrum/pjy",
    "keywords": "json processor query filter jq",
    "license": "WTFPLv2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pjy",
    "platform": "",
    "project_url": "https://pypi.org/project/pjy/",
    "release_url": "https://pypi.org/project/pjy/0.5/",
    "requires_python": "",
    "summary": "pjy - command-line JSON processor",
    "version": "0.5"
  },
  "releases": {
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "35128be48de10ad54d93b0e36dafde40",
          "sha256": "6786e6603a2625eb7c9138590666113e46cfe36c8fdd5068ed9d364bde1a2635"
        },
        "downloads": 0,
        "filename": "pjy-0.5-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "35128be48de10ad54d93b0e36dafde40",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 8232,
        "upload_time": "2017-06-02T07:07:55",
        "url": "https://files.pythonhosted.org/packages/65/fb/d6b0bfd338e3bcdb6f98ceb245c2e7bccbee1c8dcdf05e3ddb8b1eb1479e/pjy-0.5-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8eb7b18573da76dd057f06981f7d6fb7",
          "sha256": "6d95f053aa6e82bf397e1987096e21f9e349f862fc2fc190c5ebf467092ac7b2"
        },
        "downloads": 0,
        "filename": "pjy-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8eb7b18573da76dd057f06981f7d6fb7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4489,
        "upload_time": "2017-06-02T07:07:56",
        "url": "https://files.pythonhosted.org/packages/71/e7/283e82e604e7ffce21866cdeb1254acbef85b5b77407355c3ae6311f7a3f/pjy-0.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "35128be48de10ad54d93b0e36dafde40",
        "sha256": "6786e6603a2625eb7c9138590666113e46cfe36c8fdd5068ed9d364bde1a2635"
      },
      "downloads": 0,
      "filename": "pjy-0.5-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "35128be48de10ad54d93b0e36dafde40",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 8232,
      "upload_time": "2017-06-02T07:07:55",
      "url": "https://files.pythonhosted.org/packages/65/fb/d6b0bfd338e3bcdb6f98ceb245c2e7bccbee1c8dcdf05e3ddb8b1eb1479e/pjy-0.5-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "8eb7b18573da76dd057f06981f7d6fb7",
        "sha256": "6d95f053aa6e82bf397e1987096e21f9e349f862fc2fc190c5ebf467092ac7b2"
      },
      "downloads": 0,
      "filename": "pjy-0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "8eb7b18573da76dd057f06981f7d6fb7",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4489,
      "upload_time": "2017-06-02T07:07:56",
      "url": "https://files.pythonhosted.org/packages/71/e7/283e82e604e7ffce21866cdeb1254acbef85b5b77407355c3ae6311f7a3f/pjy-0.5.tar.gz"
    }
  ]
}