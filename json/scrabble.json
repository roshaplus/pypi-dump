{
  "info": {
    "author": "Benjamin B. Crom",
    "author_email": "benjamincrom@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "**Table of Contents**\n\n- [Scrabble](#scrabble)\n    - [Installing from pypi](#installing-from-pypi)\n    - [Installing from source](#installing-from-source)\n    - [Testing](#testing)\n    - [Recover Scrabble Game](#recover-scrabble-game)\n    - [Play Scrabble Game](#play-scrabble-game)\n        - [Create a new Scrabble game object](#create-a-new-scrabble-game-object)\n        - [Make Move](#make-move)\n        - [Find Best Move (Brute Force)](#find-best-move-brute-force)\n        - [Exchange Tiles](#exchange-tiles)\n        - [Conclude Game](#conclude-game)\n\n# Scrabble\nThis package implements the game of Scrabble and also adds features that\nrecover previous moves as well as determine the best next move for a given\nScrabble game.\n\n## Installing from pypi\n```\npip3 install scrabble\n```\n## Installing from source\n```\ngit clone git@github.com:benjamincrom/scrabble.git\ncd scrabble/\npython3 setup.py install\n```\n\n## Testing\nTests take about two hours to run on an average machine.\n\n```\npython3 setup.py test\n```\n\n## Recover Scrabble Game\nRecover the moves of a Scrabble game given only the \nfinal board and the list of player scores for each move.\n\nUsage:\n```shell\n./bin/recover_scrabble_game [INPUT_FILENAME]\n```\n\nSee [scrabble/tests/sample_input_files](scrabble/tests/sample_input_files)\nfor examples of correctly formatted input files\n\nExample:\n```\n$ ./bin/recover_scrabble_game ./tests/sample_input_files/sample_input30.json\n\n[\n    [\n        [(('h', 8), '*OWDY')],\n        [(('e', 10), 'R(A)ZE')],\n        [(('h', 12), '(Y)IP')],\n        [(('b', 13), 'MOV(E)')],\n        [(('c', 6), 'GU(Y)')],\n        [(('l', 10), '(D)OTE')],\n        [(('e', 3), '(G)UILE')],\n        [(('i', 2), 'B(E)ER')],\n        [(('i', 5), '(R)IP')],\n        [(('g', 2), 'H(I)NT')],\n        [(('l', 2), '(D)UNE')],\n        [(('j', 12), '(PI)TA')],\n        [(('h', 9), '(O)R*')],\n        [(('o', 13), 'LI(T)')],\n        [(('e', 15), 'BANAN(A)')]\n    ], [\n        [(('d', 11), 'FAME(D)')],\n        [(('d', 8), 'CRIE(*)')],\n        [\n            (('i', 12), '(I)T'),\n            (('j', 12), '(P)I'),\n            (('i', 13), 'TIGHT')\n        ],\n        [(('e', 3), 'GRAYE(R)')],\n        [(('l', 10), 'DAS(H)')],\n        [(('o', 8), 'OV(E)N')],\n        [(('c', 4), 'JA(R)')],\n        [(('c', 4), '(J)I(G)')],\n        [(('b', 10), 'LOO(M)S')],\n        [\n            (('l', 2), 'DOWEL'),\n            (('i', 5), '(RIP)E')\n        ],\n        [(('o', 1), 'R(E)ASON')],\n        [(('m', 13), '(T)AX')],\n        [(('l', 15), 'E(X)IT')],\n        [\n            (('a', 14), 'I(S)'),\n            (('a', 14), 'ID')\n        ],\n        [(('j', 7), 'SE(*)K')]\n    ]\n]\n```\n\n## Play Scrabble Game\n### Create a new Scrabble game object\n\n* __scrabble.main.ScrabbleGame(__*num_players*__)__\n\n```\n>>> from scrabble.main import ScrabbleGame\n>>> game = ScrabbleGame(num_players=4)\n>>> game\n  abcdefghijklmno\n1 _______________\n2 _______________\n3 _______________\n4 _______________\n5 _______________\n6 _______________\n7 _______________\n8 _______\u2605_______\n9 _______________\n10_______________\n11_______________\n12_______________\n13_______________\n14_______________\n15_______________\n[[G, T, E, A, D, P, C], [E, I, S, O, N, G, M], [M, S, T, U, R, O, J], [E, *, L, A, R, I, A]]\nMoves played: 0\nPlayer 1's move\n72 tiles remain in bag\nPlayer 1: 0\nPlayer 2: 0\nPlayer 3: 0\nPlayer 4: 0\n```\n\n### Make Move\n* __scrabble.main.ScrabbleGame.place\\_word(__*word, start_location, is_vertical_move*__)__\n\nPlace a word from the rack of the next player onto the board.  If the\nmove is legal you will be prompted as to whether or not the move was\nsuccessfully challenged.  If the move goes through through then the method will\nreturn `True`.  If the move is illegal you will not receive a challenge prompt\nand the method will return `False`.\n```\n>>> game.place_word(word='GATE', start_location=('h', 8), is_vertical_move=False)\nChallenge successful (Y/N)N\nTrue\n\n>>> game\n  abcdefghijklmno\n1 _______________\n2 _______________\n3 _______________\n4 _______________\n5 _______________\n6 _______________\n7 _______________\n8 _______GATE____\n9 _______________\n10_______________\n11_______________\n12_______________\n13_______________\n14_______________\n15_______________\n[[D, P, C, O, E, F, N], [E, I, S, O, N, G, M], [M, S, T, U, R, O, J], [E, *, L, A, R, I, A]]\nMoves played: 1\nPlayer 2's move\n68 tiles remain in bag\nPlayer 1: 10\nPlayer 2: 0\nPlayer 3: 0\nPlayer 4: 0\n```\n\n### Find Best Move (Brute Force)\n* **scrabble.main.ScrabbleGame.get_best_move()**\n\nFind the best move via brute-force search.  Returns the move score and move\ntuple of the form *(location, word, is_vertical_move)*.\n```\n>>> game.get_best_move()\n\n(27, (('l', 4), 'EGOISM', True))\n```\n\n### Exchange Tiles\n* __scrabble.main.ScrabbleGame.exchange(__*letter_list*__)__\n\nExchange up to all a player's rack tiles as long as the bag has at least\none entire rack of tiles remaining.\n```\n>>> game.exchange(letter_list=['E', 'I', 'S', 'O'])\nTrue\n\n>>> game\n  abcdefghijklmno\n1 _______________\n2 _______________\n3 _______________\n4 _______________\n5 _______________\n6 _______________\n7 _______________\n8 _______GATE____\n9 _______________\n10_______________\n11_______________\n12_______________\n13_______________\n14_______________\n15_______________\n[[D, P, C, O, E, F, N], [A, P, R, M, N, G, M], [M, S, T, U, R, O, J], [E, *, L, A, R, I, A]]\nMoves played: 1\nPlayer 3's move\n68 tiles remain in bag\nPlayer 1: 10\nPlayer 2: 0\nPlayer 3: 0\nPlayer 4: 0\n```\n\n### Conclude Game\n* __scrabble.main.ScrabbleGame.conclude\\_game(__*empty_rack_id=None*__)__\n\nCalculates final scores and declares a winner.  This method will automatically\nbe called and bonuses automatically awarded if one player has an empty rack\n(plays out) when the tile bag is empty.\n```\n>>> game.conclude_game()\nGame Over! Player 1 wins with a score of 10\n```\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/benjamincrom/scrabble",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "scrabble",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/scrabble/",
    "release_url": "https://pypi.org/project/scrabble/1.0/",
    "requires_python": null,
    "summary": "Scrabble game with move recovery and best move analysis",
    "version": "1.0"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "53bf18e16f06aedb238e508c7a17f4b5",
          "sha256": "9648e856bb5c97c83c3fbb9ccc7a8941882e7cecb7f6e13faf320da32fac3a91"
        },
        "downloads": 13,
        "filename": "scrabble-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "53bf18e16f06aedb238e508c7a17f4b5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 485135,
        "upload_time": "2017-03-05T08:15:32",
        "url": "https://files.pythonhosted.org/packages/1e/64/35aab852857431b2cb03ac41999938b343183f048b6f0cc2815a47cf7ef8/scrabble-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "31b3ac3e772edb55b370aabe7143a11d",
          "sha256": "1b1815799dd9ca816204617554d338a7def88b53de0b5608a86038495ebae57b"
        },
        "downloads": 15,
        "filename": "scrabble-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "31b3ac3e772edb55b370aabe7143a11d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 485143,
        "upload_time": "2017-03-05T16:15:34",
        "url": "https://files.pythonhosted.org/packages/3d/38/435dfbfa74f0c88bbff7f805de63859ca38c1ceee00d2fe64dc269fee4cc/scrabble-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ac34573e3320918d1371206e50707aba",
          "sha256": "19d7e3e09b6412bb35824fc2eec52fb4e1fed0097957d544b421e600b19fd77d"
        },
        "downloads": 11,
        "filename": "scrabble-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ac34573e3320918d1371206e50707aba",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 485196,
        "upload_time": "2017-03-05T16:34:24",
        "url": "https://files.pythonhosted.org/packages/38/29/93873fefef29229527c617df07f3f3c0c155f24a721ae13ce6988a31209b/scrabble-0.3.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "39cd729c51958248ff9a1291b6c9d53c",
          "sha256": "63dd6b0892621c1f832eefbd2d518c535e06dafbdf31b21812ed8bf979db85c3"
        },
        "downloads": 11,
        "filename": "scrabble-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "39cd729c51958248ff9a1291b6c9d53c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 485373,
        "upload_time": "2017-03-05T17:37:53",
        "url": "https://files.pythonhosted.org/packages/ef/e6/346f315c30b682c7755cb9321d40df266d5371280a8f659b8dfde3dc06c6/scrabble-0.4.tar.gz"
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a9b1f1431a630a7f6acf75e46c3ab5ff",
          "sha256": "b0879d29ce897def5874a511953330e3a6a37528f77fb853729f95f7148e0244"
        },
        "downloads": 10,
        "filename": "scrabble-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a9b1f1431a630a7f6acf75e46c3ab5ff",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 485357,
        "upload_time": "2017-03-05T17:40:02",
        "url": "https://files.pythonhosted.org/packages/f0/42/9007ca46a86b22753a74407ff903eec8406ca494f2b54025958db393e3fd/scrabble-0.5.tar.gz"
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "37979cd0d671d3588181068828cfd0f9",
          "sha256": "edb39629e64d6e7ada7b8069fa6f814aff66030d0e10643b19b987a593eb4df4"
        },
        "downloads": 11,
        "filename": "scrabble-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "37979cd0d671d3588181068828cfd0f9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 497183,
        "upload_time": "2017-03-05T18:39:02",
        "url": "https://files.pythonhosted.org/packages/d8/9c/fd7729b42fb632b94535785d9d2fbf35958f5eca80a58b2df5792dc94ab0/scrabble-0.6.tar.gz"
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c9e0bd8967d1ee62982a18fa6a6af0a5",
          "sha256": "331e76941d32f1b6204ea9b8d00aa226973dcb9a2d4ece2e760b57fc4290b3a3"
        },
        "downloads": 22,
        "filename": "scrabble-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c9e0bd8967d1ee62982a18fa6a6af0a5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 497587,
        "upload_time": "2017-03-05T20:26:55",
        "url": "https://files.pythonhosted.org/packages/dd/8a/b2b3198f77f6d0cdd184aa6b90ef4e9ba155c11fc8a59d1f093587984614/scrabble-1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c9e0bd8967d1ee62982a18fa6a6af0a5",
        "sha256": "331e76941d32f1b6204ea9b8d00aa226973dcb9a2d4ece2e760b57fc4290b3a3"
      },
      "downloads": 22,
      "filename": "scrabble-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c9e0bd8967d1ee62982a18fa6a6af0a5",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 497587,
      "upload_time": "2017-03-05T20:26:55",
      "url": "https://files.pythonhosted.org/packages/dd/8a/b2b3198f77f6d0cdd184aa6b90ef4e9ba155c11fc8a59d1f093587984614/scrabble-1.0.tar.gz"
    }
  ]
}