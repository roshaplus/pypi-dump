{
  "info": {
    "author": "Ami Tavory",
    "author_email": "atavory at gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: C++",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=======\nDAGPype\n=======\n\nThis is a Python framework for scientific data-processing and data-preparation DAG (directed acyclic graph) pipelines.\n\nIt is designed to work well within Python scripts or IPython_, provide an in-Python alternative for sed_, awk_, perl_, and grep_, and complement libraries such as NumPy_/SciPy_, SciKits_, pandas_, MayaVi_, PyTables_, and so forth. Those libraries process data once it has been assembled. This library is for flexible data assembly and quick exploration, or for aggregating huge data which cannot be reasonably assembled.\n\n.. _sed: http://www.gnu.org/software/sed/\n.. _awk: http://www.gnu.org/software/gawk/\n.. _perl: http://www.perl.org\n.. _grep: http://www.gnu.org/software/grep/\n.. _IPython: http://ipython.org/\n.. _SciKits: http://scikits.appspot.com/\n.. _NumPy: http://www.numpy.org/\n.. _SciPy: http://www.scipy.org/\n.. _pandas: http://pandas.pydata.org/\n.. _MayaVi: http://mayavi.sourceforge.net/\n.. _PyTables: http://www.pytables.org/moin\n\n\n------------------\nMotivating Example\n------------------\n\nSuppose we wish to check the correlation between the 'wind' and 'rain' columns in a `CSV`_ file, excluding all entries with values larger than 10 as outliers.\n\n.. _`CSV`: http://en.wikipedia.org/wiki/Comma-separated_values\n\nHere is some straightforward code that does this:\n::\n\n    r = csv.DictReader('meteo.csv', ('wind', 'rain'))\n   \n    sx, sxx, sy, syy, sxy, n = 0, 0, 0, 0, 0, 0\n    for row in r:\n        x, y = float(row['wind']), float(row['rain'])\n        if x < 10 and y < 10:\n            sx += x\n            sxx += x * x\n            sy += y\n            sxy += x * y\n            syy += y * y\n            n += 1\n    c = (n * sxy - sx * sy) / math.sqrt(n * sxx - sx * sx) / math.sqrt(n * syy - sy * sy)\n\nThis code is relatively long. The source-reading logic, filtering logic, and calculation logic, are not\ncleanly separated; the code cannot flexibly deal with changes to the data format from CSV to something else, for example.\n\nAlternatively, here is some NumPy-based code that does this:\n::\n\n    data = numpy.genfromtxt('meteo.csv', names = ('wind', 'rain'), delimiter = ',', skip_header = True)\n    wind = [wind for (wind, rain) in data if wind < 10 and rain < 10]\n    rain = [rain for (wind, rain) in data if wind < 10 and rain < 10]\n    c = numpy.corrcoef(wind, rain)[0, 1]\n\nThis code is shorter and more separated, but the ``numpy.genfromtxt`` call loads the entire dataset into memory, which can be very inefficient.\n    \nConversely, using this library, the code becomes (assuming having typed ``from dagpype import *``):\n::\n\n    >>> c = stream_vals('meteo.csv', (b'wind', b'rain')) | \\\n    ...    filt(pre = lambda (wind, rain) : wind < 10 and rain < 10) | \\\n    ...    corr()\n\nwhich processes the data efficiently, and, moreover, is short enough to use from the command line for quick data exploration.\n\n\n--------\nFeatures\n--------\n\nThe library has the following features:\n\n* Pipelines have low memory footprint, even when processing large datasets.\n* Reusable pipe stages can be written easily and combined flexibly. The resulting pipelines can be used from within scripts or Python's interactive interpreter.\n* In-Python pipelines are a viable alternative to relatively-specialized utilities such as awk_, sed_, perl_, grep_, etc.\n* Stage combination has the expressiveness needed for common data processing tasks:\n\n  * Full combination of pipe elements to DAGs (Directed Acyclic Graphs)\n  * On-the-fly creation, by pipe elements, of sub-pipelines, for common SQL-type operations\n\n\n------------------------------------------------------\nDownload, Installation, Documentation, And Bugtracking\n------------------------------------------------------\n\n* The package is at PyPI_.\n\n    .. _PyPI: http://pypi.python.org/pypi/DAGPype\n\n* The usual setup for Python libraries is used. Type:\n    \n    ``$ pip install dagpype``\n    \n    or\n\n    ``$ sudo pip install dagpype``\n\n        .. Note::\n        \n            To install this package from the source distribution, the system must have a C++ compiler installed. The setup script will invoke this compiler. \n            \n            Using Python 2.* on Windows will attempt to invoke Visual Studio 2008. If you are using a Visual Studio 2010 or 2012, download and extract the archive. From within the DAGPype directory, use\n            \n            ``> SET VS90COMNTOOLS=%VS100COMNTOOLS%``\n            \n            or\n            \n            ``> SET VS90COMNTOOLS=%VS110COMNTOOLS%``\n            \n            (for Visual Studio 2010 and 2012, respectively), followed by\n            \n            ``> python setup.py install``\n\n* The documentation is hosted at `PyPI Docs`_ and can also be found in the 'docs' directory of the distribution.\n\n    .. _`PyPI Docs`: http://packages.python.org/DAGPype/\n\n* Bugtracking is on `Google Code`_.\n\n    .. _`Google Code`: http://code.google.com/p/dagpype/issues/list?can=1&q=\n\n\n--------------------\nA Few Quick Examples\n--------------------\n\n(See more online `sed-like`_, `perl-like`_, and `awk-like`_ examples)\n\n.. _`sed-like`: http://packages.python.org/DAGPype/sed.html\n.. _`perl-like`: http://packages.python.org/DAGPype/perl.html\n.. _`awk-like`: http://packages.python.org/DAGPype/awk.html\n\n.. Note::\n\n    The following examples assume first typing ``from dagpype import *``\n\n#. Find the correlation between the data in two different files, 'wind.txt', and 'rain.txt':\n    ::\n    \n        >>> stream_vals('wind.txt') + stream_vals('rain.txt') | corr()\n        0.74\n\n#. Find the average, standard deviation, min and max, of the contents of 'rain.txt':\n    ::\n\n        >>> stream_vals('wind.txt') | mean() + stddev() + min_() + max_()\n        (3, 0.4, 0, 9)\n\n#. Truncate outliers from the 'wind' and 'rain' columns of 'meteo.csv':\n    ::\n\n        >>> stream_vals('meteo.csv', (b'wind', b'rain')) | \\\n        ...    filt(lambda (wind, rain) : (min(wind, 10), min(rain, 10))) | \\\n        ...    to_csv('fixed_data.csv', (b'wind', b'rain'))\n\n#. Create a numpy.array from the values of 'wind.txt':\n    ::\n\n        >>> v = stream_vals('wind.txt') | np.to_array()\n\n#. Create a list of the values of 'rain.txt', excluding the first 3 and last 4:\n    ::\n\n        >>> v = stream_vals('rain.txt') | skip(3) | skip(-4) | to_list()\n\n#. From 'meteo.csv', summarize consecutive 'wind' values with the same 'day' value by their average and standard deviation; write the result into 'day_wind.csv':\n    ::\n\n        >>> stream_vals('meteo.csv', (b'day', b'wind')) | \\\n        ...     group(\n        ...         key = lambda (day, wind) : day,\n        ...         key_pipe = lambda day : sink(day) + (select_inds(1) | mean()) + (select_inds(1) | stddev())) | \\\n        ...     to_csv('day_wind.csv', (b'day', b'mean', b'stddev'))\n\n\n#. Find the autocorrelation of the values of 'wind.txt', shifted 5 to the past and 5 to the future:\n    ::\n\n        >>> c = stream_vals('wind.txt') | skip_n(-5) + skip_n(5) | corr()\n\n#. Find the correlation between smoothed versions of the 'wind' and 'rain' columns of 'meteo.csv':\n    ::\n    \n        >>> c = stream_vals('meteo.csv', (b'wind', b'rain')) | \\\n        ...    (select_inds(0) | low_pass_filter(0.5)) + (select_inds(1) | low_pass_filter(0.5)) | \\\n        ...    corr()\n\n#. Sample approximately 1% of the elements in the 'rain' column of 'meteo.csv', and use them to approximate the median:\n    ::\n\n        >>> stream_vals('meteo.csv', 'rain') | prob_rand_sample(0.01) | (to_array() | sink(lambda a : numpy.median(a))\n\n#. Sample approximately 100 of the elements in the 'rain' column of 'meteo.csv' (with replacement), and use them to approximate the median:\n    ::\n\n        >>> stream_vals('meteo.csv', 'rain') | size_rand_sample(100) | (to_array() | sink(lambda a : numpy.median(a))\n\n\n#. Use stages with regular Python conditionals. The following shows how a stage can be selected at runtime; if ``debug`` is used, a trace stage - tracing the elements piped through it - will be used, otherwise, a relay stage - passing elements passed through it - will be used:\n    ::\n\n        >>> debug = True\n        >>> stream_vals('wind.txt') | (trace() if debug else relay()) | sum_()\n        0 : 2.0\n        1 : 4.0\n        2 : 7.0\n        3 : 23.0\n        ...\n        57 : 7.0\n        58 : 23.0\n        59 : 0.0\n        432.0\n        >>> debug = False\n        >>> stream_vals('wind.txt') | (trace() if debug else relay()) | sum_()\n        432.0\n        \n#. Use regular Python functions returning sub-pipes. The following function takes a file name, and returns a pipeline of the exponential average of the absolute values of its values, which is then used for finding a correlation:\n    ::\n\n        >>> def abs_exp_ave(f_name):\n        ...     return stream_vals(f_name) | abs_() | exp_ave(0.5)\n            \n        >>> abs_exp_ave('foo.dat') + abs_exp_ave('bar.dat') | corr()        \n\n#. Use pipelines within regular Python list comprehension. The following creates a list of means and standard deviations of the contents of the files in some directory\n    ::\n\n        >>> stats = [stream_vals(f) | mean() + stddev() for f in glob.glob('dir/*.txt')]\n\n#. From 'meteo.csv', summarize consecutive 'wind' values with the same 'day' value by their average; plot the cumulative average of these day averages:\n    ::\n\n        >>> stream_vals('meteo.csv', (b'day', b'wind')) | \\\n        ...     group(lambda (day, wind) : day, lambda day : select_inds(1) | mean()) | \\\n        ...     cum_ave() | (plot.plot() | plot.show())\n\n#. From 'meteo.csv', summarize consecutive 'wind' values with the same 'day' value by their median; plot the cumulative average of these day medians:\n    ::\n\n        >>> stream_vals('meteo.csv', (b'day', b'wind')) | \\\n        ...     group(\n        ...         lambda (day, wind) : day, \n        ...         lambda day : select_inds(1) | (np.to_array() | sink(lambda a : median(a))) | \\\n        ...     cum_ave() | (plot.plot() | plot.show())\n\n\n-------\nChanges\n-------\n\n.. csv-table:: Changes\n    :header: \"Version\", \"Date\", \"Description\"\n    :widths: 15, 15, 70\n    :delim: $\n\n    0.1.5.1 $ 19/04/2013 $ NumPy 1.7.1 Compilation bugfix \n    0.1.5 $ 18/04/2013 $ Doctest in unittests: numerous doc bugfixes, illegal floats parse bugfix\n    0.1.4.0 $ 18/02/2013 $ CSV parser IEEE exception bugfix, offline docs bugfix\n    0.1.3.9 $ 03/02/2013 $ Python 2.6 backport\n    0.1.3.8 $ 28/01/2013 $ OS X build bugfixes\n    0.1.3.7 $ 18/01/2013 $ Windows build / IO bugfixes\n    0.1.3.6 $ 16/01/2013 $ Py3K\n    0.1.3.5 $ 15/01/2013 $ CSV parser bugfix, Perl, Awk, and Sed type stages, GNU/Linux gather-IO backend   \n    0.1.3.4 $ 05/01/2013 $ Moving to PyPI\n    0.1.3.3 $ 02/01/2013 $ Consecutive vs. non-consecutive grouping, import bugfix\n    0.1.3.2 $ 20/12/2012 $ CSV filter stage\n    0.1.3.1 $ 12/12/2012 $ Missing extension bugfix\n    0.1.3 $ 12/12/2012 $ Optimized C numpy IO \n    0.1.2.3 $ 7/12/2012 $ Bugfix (stream_vals)\n    0.1.2.2 $ 3/12/2012 $ Bugfixes (VC++, select_inds)\n    0.1.2.1 $ 2/12/2012 $ Better pyplot keyword args support\n    0.1.2 $ 29/11/2012 $ Various plotting stages\n    0.1.1.3 $ 29/11/2012 $ Rand size samples, text/regex grep\n    0.1.1.1 $ 20/10/2012 $ More moving averages, min/max, quantiles, etc.\n    0.1.1 $ 20/10/2012 $ Optimized C CSV reader \n    0.1.0.3 $ 30/9/2012 $ Py3 compatibility\n    0.1.0.2 $ 28/9/2012 $ More numpy stages\n    0.1.0.1 $ 22/9/2012 $ Setup bugfix\n    0.1.0 $ 18/8/2012 $ Initial release\n\n\n----------------\nAcknowledgements\n----------------\n\nThis library uses many ideas from David Beazley's generator talk [Beazley08]_ and coroutine talk [Beazley09]_\n\n.. [Beazley08] http://www.dabeaz.com/generators/\n.. [Beazley09] http://www.dabeaz.com/coroutines/\n\nMany thanks to Anand Jeyahar, Brad Reisfeld, Tal Kremerman, Eran Segal, and Simon Pantzare for patches.",
    "docs_url": "https://pythonhosted.org/DAGPype/",
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://pypi.python.org/pypi/DAGPype",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "DAGPype",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/DAGPype/",
    "release_url": "https://pypi.org/project/DAGPype/0.1.5.1/",
    "requires_python": null,
    "summary": "Low-footprint flexible data-processing and data-preparation pipelines",
    "version": "0.1.5.1"
  },
  "releases": {
    "0.1.3.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1ca1c454d9eff3fbc62c5b8bea7b06d0",
          "sha256": "de840aebcd854017a3e6cc67faad0d33d0d20e66c14e48643c3118c3f66955a0"
        },
        "downloads": 3593,
        "filename": "DAGPype-0.1.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1ca1c454d9eff3fbc62c5b8bea7b06d0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 500632,
        "upload_time": "2013-01-05T19:13:33",
        "url": "https://files.pythonhosted.org/packages/80/10/f2308709e94808dc41f39599859ef5aed9395e0833faca6a38adf880971e/DAGPype-0.1.3.4.tar.gz"
      }
    ],
    "0.1.3.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a6c3135a8d4139f6c330233f5f010518",
          "sha256": "0e1ec3073de28ff04447c66bf6f8860bde939dcde7fe0af7443907a1a59d44f1"
        },
        "downloads": 3484,
        "filename": "DAGPype-0.1.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a6c3135a8d4139f6c330233f5f010518",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 887627,
        "upload_time": "2013-01-15T19:33:05",
        "url": "https://files.pythonhosted.org/packages/67/ef/57747b8feb5a5f7bdfbf223128269f5bf848335d7b626147d151bd0529e8/DAGPype-0.1.3.5.tar.gz"
      }
    ],
    "0.1.3.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "441ad271adbdbbcc89da2b560c9416b3",
          "sha256": "aea19183d12e7591ad8cfe11854a6e6d5dc8933e96df1c3d381dc112613d982b"
        },
        "downloads": 3447,
        "filename": "DAGPype-0.1.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "441ad271adbdbbcc89da2b560c9416b3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 887661,
        "upload_time": "2013-01-16T21:26:41",
        "url": "https://files.pythonhosted.org/packages/9a/99/e33e74a514b9c182b4114f7ac5f395ed4cdb95ea057b732960f2249ea27e/DAGPype-0.1.3.6.tar.gz"
      }
    ],
    "0.1.3.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a8f5c81119266d002b01dc369ea28cd0",
          "sha256": "aee90c0275baaaa30813b20508bad2efb71ab2fa97c80579f7acfc0aab9f2cd1"
        },
        "downloads": 3418,
        "filename": "DAGPype-0.1.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "a8f5c81119266d002b01dc369ea28cd0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3819283,
        "upload_time": "2013-01-20T20:40:38",
        "url": "https://files.pythonhosted.org/packages/c1/cc/62d76c8d40dd9257a7eaf5092aeb271b19f197da91a274cb87d8b12143bf/DAGPype-0.1.3.7.tar.gz"
      }
    ],
    "0.1.3.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cb9c40a24d3304d2fee19060624e1041",
          "sha256": "df1c993169ebaf9d5a984ab02dc4fbd82777bd18dec92e45e57f0e06d78e86af"
        },
        "downloads": 3266,
        "filename": "DAGPype-0.1.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "cb9c40a24d3304d2fee19060624e1041",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3816593,
        "upload_time": "2013-01-28T13:39:38",
        "url": "https://files.pythonhosted.org/packages/60/1e/25ddba1f2742f73ffa9bdb21d3776c03a34873623af60e890dfff0d14f9f/DAGPype-0.1.3.8.tar.gz"
      }
    ],
    "0.1.3.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "20f627c6e9969d40e12b0a9f8359f7c8",
          "sha256": "d0c24880c05d7e7c676c9d46e804c02376246ab77119e9918e38a7a3567640c2"
        },
        "downloads": 3552,
        "filename": "DAGPype-0.1.3.9.tar.gz",
        "has_sig": false,
        "md5_digest": "20f627c6e9969d40e12b0a9f8359f7c8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3817397,
        "upload_time": "2013-02-05T16:44:11",
        "url": "https://files.pythonhosted.org/packages/98/29/57d06a9338ddfb5b0dc1a4c210e4a6cd58c2035cac5c37ac3c70b867fa8a/DAGPype-0.1.3.9.tar.gz"
      }
    ],
    "0.1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "14a762a49d427a5fa1f21efbcf4662b6",
          "sha256": "bceefe978f84855c5f6cc1e9694fdbb0717d4316288f5e4c3f743c53d9fbb000"
        },
        "downloads": 2942,
        "filename": "DAGPype-0.1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "14a762a49d427a5fa1f21efbcf4662b6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 999536,
        "upload_time": "2013-02-18T19:56:02",
        "url": "https://files.pythonhosted.org/packages/22/23/6ce053d1f84581b1739b1aec95bd626962d8169520e7be09637b2686fdde/DAGPype-0.1.4.0.tar.gz"
      }
    ],
    "0.1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d5ccd8780040b3117d8d3c20b8a6f236",
          "sha256": "e4b006cf9eb5e1ef043d8cc51ba13fc0557b0a4456d9c563ca6252ca16541298"
        },
        "downloads": 2914,
        "filename": "DAGPype-0.1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d5ccd8780040b3117d8d3c20b8a6f236",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1000490,
        "upload_time": "2013-02-20T22:27:14",
        "url": "https://files.pythonhosted.org/packages/4a/0f/e5f55ab9d7daabdf782c98a2dd921de87fc0513b2cdeefde0b3e122e45f8/DAGPype-0.1.4.1.tar.gz"
      }
    ],
    "0.1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f230f56a162e04df2fcff65e63d17ccc",
          "sha256": "81a516eb7488a4b1d5b94b1033bc72b4b30acd6f7e6b23c186670335c1fa27c5"
        },
        "downloads": 2671,
        "filename": "DAGPype-0.1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f230f56a162e04df2fcff65e63d17ccc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1040938,
        "upload_time": "2013-04-18T16:28:14",
        "url": "https://files.pythonhosted.org/packages/96/62/616377c8c4af97c93861e37fa865f0b1d423370b2c1991f21a710d649c5d/DAGPype-0.1.5.0.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8d061649829326665da7fb3b390d271c",
          "sha256": "fd053354be82a8c0c3e8977fa8ad7503be181761cc553e838b2b3057c9ec377b"
        },
        "downloads": 2662,
        "filename": "DAGPype-0.1.5.0.zip",
        "has_sig": false,
        "md5_digest": "8d061649829326665da7fb3b390d271c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1106257,
        "upload_time": "2013-04-18T16:28:11",
        "url": "https://files.pythonhosted.org/packages/03/d5/b4f8055ae425156939b9c5999cee27b662ba903407d5340eb62a1c2bc88d/DAGPype-0.1.5.0.zip"
      }
    ],
    "0.1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9c819b82ab98bf1e3b3bdd4d6f56b4b2",
          "sha256": "85015042ad79c9728a50dfc61c812f2eb9ad71cb9c83ff90c8ee228c35a3d3ad"
        },
        "downloads": 3389,
        "filename": "DAGPype-0.1.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9c819b82ab98bf1e3b3bdd4d6f56b4b2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1041457,
        "upload_time": "2013-04-19T17:42:12",
        "url": "https://files.pythonhosted.org/packages/4e/5c/c2326777809e8c1771610d4fb9072e78243fc5f16c157dc91726f0edf7b5/DAGPype-0.1.5.1.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6d9ba9544977f242f14c71b7a85f94c2",
          "sha256": "7ac29c7223cee16206e70fa0fea72e36b0ce95618431825b01745a25c5a7f1f6"
        },
        "downloads": 2952,
        "filename": "DAGPype-0.1.5.1.zip",
        "has_sig": false,
        "md5_digest": "6d9ba9544977f242f14c71b7a85f94c2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1106796,
        "upload_time": "2013-04-19T17:42:21",
        "url": "https://files.pythonhosted.org/packages/40/c5/9cd5bf272d45b23a9e0538e6b91ac8639cabab1f85cc2aa5e94b8fbfef2d/DAGPype-0.1.5.1.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9c819b82ab98bf1e3b3bdd4d6f56b4b2",
        "sha256": "85015042ad79c9728a50dfc61c812f2eb9ad71cb9c83ff90c8ee228c35a3d3ad"
      },
      "downloads": 3389,
      "filename": "DAGPype-0.1.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9c819b82ab98bf1e3b3bdd4d6f56b4b2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 1041457,
      "upload_time": "2013-04-19T17:42:12",
      "url": "https://files.pythonhosted.org/packages/4e/5c/c2326777809e8c1771610d4fb9072e78243fc5f16c157dc91726f0edf7b5/DAGPype-0.1.5.1.tar.gz"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "6d9ba9544977f242f14c71b7a85f94c2",
        "sha256": "7ac29c7223cee16206e70fa0fea72e36b0ce95618431825b01745a25c5a7f1f6"
      },
      "downloads": 2952,
      "filename": "DAGPype-0.1.5.1.zip",
      "has_sig": false,
      "md5_digest": "6d9ba9544977f242f14c71b7a85f94c2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 1106796,
      "upload_time": "2013-04-19T17:42:21",
      "url": "https://files.pythonhosted.org/packages/40/c5/9cd5bf272d45b23a9e0538e6b91ac8639cabab1f85cc2aa5e94b8fbfef2d/DAGPype-0.1.5.1.zip"
    }
  ]
}