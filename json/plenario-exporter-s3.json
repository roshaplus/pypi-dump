{
  "info": {
    "author": "Vince Forgione",
    "author_email": "vforgione@uhicago.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Plenario Exporter S3\n====================\n\nUsage\n-----\n\nThis is both a simple application and a rather complicated application. The\nactions it performs are straight forward - create a job to export a data set,\nzip up the generated CSVs, upload them to Amazon S3, and email the requestor.\n\nThe application uses ``django-channels``: it's a new asynchronous back end for\nDjango, thus relieving us of the hassle of running separate instances for\n``celery`` and ``flower``. It has its own baggage though - in production it has\nits own server environment and relies on Redis for message passing.\n\nOverall, it's pretty snappy and I'm confident that ``channels`` is the future\nof Django, and not ``celery``.\n\nTo wire this up, it's a relatively simple install::\n\n    # your site/settings.py\n    INSTALLED_APPS = [\n        'whatever django and local stuff',\n        'channels',  # necessary to make exporter go\n        'plenario_exporter_s3',  # this app\n    ]\n\n    CHANNEL_LAYERS = {\n        'default': {\n            'BACKEND': 'asgi_redis.RedisChannelLayer',\n            'CONFIG': {\n                'hosts': [os.environ.get('REDIS_URL', 'redis://localhost:6379')],\n            },\n            'ROUTING': 'plenario_exporter_s3.routing.channel_routing',\n        },\n    }\n\nYou're also going to need an ``asgi.py`` file alongside your wsgi file::\n\n    import os\n    import channels.asgi\n\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your app.settings')\n    channel_layer = channels.asgi.get_channel_layer()\n\nAnd in your views, wire up the provided export service function as the\n``async_handler`` argument to the ``plenario-core`` export view::\n\n    from plenario_core.views.export import GenericMetaExportView\n    from plenario_exporter_s3.services import create_models_and_start_job\n\n    from .models import EtlEventMeta\n\n    export_meta = GenericMetaExportView.as_view(\n        models=[EtlEventMeta],\n        async_handler=create_models_and_start_job)\n\n\nDevelopment\n-----------\n\nFire up a virtualenv and install the dev requirements::\n\n    $ python3.6 -m venv .env\n    $ source .env/bin/activate\n    $ pip install -r dev-requirements.txt\n\nTo run the tests, in a separate terminal pull in the PostGIS docker image and create the database::\n\n    $ docker pull mdillon/postgis\n    $ docker run -d -p 5432:5432 mdillon/postgis\n    $ docker ps\n    ...\n    $ docker exec -it {container hash} /bin/bash\n    ...\n    # su postgres -c psql\n    ...\n    > create database plenario;\n\nYou're also going to need a local Redis server running::\n\n    $ docker pull redis\n    $ docker run -d -p 6379:6379 redis\n\nThen all you have to do is run the tests normally::\n\n    $ coverage run manage.py test\n    $ coverage report\n    $ flake8\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/UrbanCCD-UChicago/plenario-exporter-s3",
    "keywords": "plenario",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "plenario-exporter-s3",
    "platform": "",
    "project_url": "https://pypi.org/project/plenario-exporter-s3/",
    "release_url": "https://pypi.org/project/plenario-exporter-s3/0.0.1/",
    "requires_dist": [
      "boto3",
      "arrow",
      "asgi-redis",
      "channels",
      "Django (<1.12,>=1.11)"
    ],
    "requires_python": ">=3.6",
    "summary": "export pleanrio data sets to s3",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "84eec957412e323e2a2487270180985a",
          "sha256": "d7775ef60dcbcb7d1bbcb9f229ad8e07b25e3c5237596abd097e62d27a74bc25"
        },
        "downloads": 0,
        "filename": "plenario_exporter_s3-0.0.1-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "84eec957412e323e2a2487270180985a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 15259,
        "upload_time": "2017-09-25T21:06:45",
        "url": "https://files.pythonhosted.org/packages/a7/9c/9f23f01f5f5d3bbf379e5c3860fde5cae0d19c0944b43a9a364b06c5b929/plenario_exporter_s3-0.0.1-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "84eec957412e323e2a2487270180985a",
        "sha256": "d7775ef60dcbcb7d1bbcb9f229ad8e07b25e3c5237596abd097e62d27a74bc25"
      },
      "downloads": 0,
      "filename": "plenario_exporter_s3-0.0.1-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "84eec957412e323e2a2487270180985a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 15259,
      "upload_time": "2017-09-25T21:06:45",
      "url": "https://files.pythonhosted.org/packages/a7/9c/9f23f01f5f5d3bbf379e5c3860fde5cae0d19c0944b43a9a364b06c5b929/plenario_exporter_s3-0.0.1-py3-none-any.whl"
    }
  ]
}