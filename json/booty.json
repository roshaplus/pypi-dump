{
  "info": {
    "author": "Jason R. Jones",
    "author_email": "slightlynybbled@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "====================\nPurpose\n====================\n\nThis code base is for creating a bootloader to be utilized for programming microcontroller flash\nmemory.  This program takes a hex file as the input and will parse that hex file and send it to\nthe microcontroller bootloader over a serial UART (commonly referred to as a \"serial port\" or\n\"COM port\").\n\nThe companion project to this is the `bootypic <http://github.com/slightlynybbled/bootypic>`_ project.\nHopefully, more will follow.  GUI provided at `bootycontrol <http://github.com/slightlynybbled/bootycontrol>`_.\n\n====================\nInstallation\n====================\n\nThe easiest way to install this utility is to ``pip install booty``.  Alternatively, you may download\nthis repository, navigate to the root directory of the repository, and ``python setup.py install``.\n\nThis utility is dependent on three currently-maintained python projects:\n\n * click - for easy command-line utilities\n * intelhex - for easy parsing of hex files\n * pyserial - for UART communication \n\n====================\nRunning\n====================\n\nAssuming that this is installed in your root python environment, it will create a command-line utility\nwhich can be directly invoked::\n\n    Usage: __main__.py [OPTIONS]\n\n    Options:\n      -h, --hexfile PATH      The path to the hex file\n      -p, --port TEXT         Serial port (COMx on Windows devices, ttyXX on Unix-\n                              like devices)  [required]\n      -b, --baudrate INTEGER  Baud rate in bits/s (defaults to 115200)\n      -e, --erase             Erase the application space of the device\n      -l, --load              Load the device with the hex file\n      -v, --verify            Verify device\n      -V, --version           Show software version\n      --help                  Show this message and exit.\n\nOf course, to use the package, there are some options that need to be specified.  The two most necessary\noptions are the `--hexfile` and `--port` options.  Additionally, either the `--erase`, `--load`, or `--verify` should\nbe specified or no action will take place.  This is, after all, a loading and/or verification utility.\n\nRegardless of the order of the input parameters, the order of execution will be erase, load, then verify.\n\nA common command to load and verify a device might look like this::\n\n    user ~$ booty -p COM20 --load --verify -hexfile \"C:/path/to/my/hex.hex\"\n\nThe utility will execute a series of commands and result in an output similar to this::\n\n    user ~$ booty -p COM20 --load --verify -hexfile \"C:/path/to/my/hex.hex\"\n    INFO:booty:Using provided hex file at \"C:/path/to/my/hex.hex\" to load and verify device\n    INFO:booty.comm_thread:platform set: dspic33ep32mc204\n    INFO:booty.comm_thread:version set: 0.1\n    INFO:booty.comm_thread:row length set: 2\n    INFO:booty.comm_thread:page length set: 512\n    INFO:booty.comm_thread:program length set: 21996\n    INFO:booty.comm_thread:max programming size set: 128\n    INFO:booty.comm_thread:application start address set: 4096\n    INFO:booty.comm_thread:device identification complete\n    INFO:booty:loading...\n    INFO:booty:device successfully loaded!\n    INFO:booty:verifying...\n    INFO:booty:device verified!\n\n====================\nHow it Works\n====================\n\n-------------------\nProgramming Sequence\n-------------------\n\nAll relevant information is stored on the microcontroller, meaning that the relevant data is stored at compile-time.\n\nThe programming takes place in three stages:\n\n 1. device identification - determines what the device is, the command set available, and the page erase and write sizes\n 2. erasure - erasure of all application-programmable memory\n 2. loading - a series of write cycles which write to the program memory of the microcontroller\n 3. verify - a series of read cycles and final verification of the user memory\n\nShown is a complete id/erase/load/verify of a 16k device at 57600bits/s and operating at 12MIPS, which takes 15.8s.\nEach section is delimited by the green markers.  This load time could obviously be reduced by running at a faster baud\nrate.\n\n    .. image:: https://github.com/slightlynybbled/booty/blob/master/docs/img/id-erase-load-verify.png\n\n-------------------\nThreaded Execution\n-------------------\n\nAt the lowest level, there is a thread which takes commands from higher level software and creates an internal queue which \nis executed in sequence.  This layer will execute simple commands, such as \"read flash\", \"write flash\", etc. while also \nensuring that the protocols, required sizes, and timing constraints are enforced.\n\nAt the higher level, the hex file is read and a command set is created for the low-level software.  At various places, there \nare \"waits\" put in place.  For instance, the high level software might request that the low level software do all of the \nwrite operations before it moves on to a verification stage.  This is more clear in the source code.\n\nThe high-level operations may be found in ``/booty/__main__.py`` and ``/booty/util.py`` while the low-level thread may be \nfound in ``/booty/comm_thread.py``.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/slightlynybbled/booty",
    "keywords": "bootloader pic24 dspic",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "booty",
    "platform": "",
    "project_url": "https://pypi.org/project/booty/",
    "release_url": "https://pypi.org/project/booty/0.2.1/",
    "requires_dist": [
      "pyserial (>=3.3)",
      "intelhex (>=2.1)",
      "click (>=6.7)"
    ],
    "requires_python": "",
    "summary": "Bootloader application",
    "version": "0.2.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "27a1cf1263de9e789a01b5b2001c0390",
          "sha256": "c9e5a4fa098276c30db07b900605cf12efdfa74bafccd2d3701b1eb214f7b7ac"
        },
        "downloads": 0,
        "filename": "booty-0.1.0-py3.5.egg",
        "has_sig": false,
        "md5_digest": "27a1cf1263de9e789a01b5b2001c0390",
        "packagetype": "bdist_egg",
        "python_version": "3.5",
        "size": 23343,
        "upload_time": "2017-09-02T00:43:28",
        "url": "https://files.pythonhosted.org/packages/4b/2a/3ecff44c3b2cf21cd92fcef80f255a5737779074ac3f89e7768d0ca420fc/booty-0.1.0-py3.5.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "df92e96c74e9226e708ac86511313b02",
          "sha256": "b1ef2e5abcf0b496d53dbbfe7c1093870b47c50d012009768567946cafdde7d0"
        },
        "downloads": 0,
        "filename": "booty-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df92e96c74e9226e708ac86511313b02",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 13816,
        "upload_time": "2017-09-02T00:43:25",
        "url": "https://files.pythonhosted.org/packages/6b/03/3f05165a46bbf8a729679a52092eb827bb7eb46ca4eb0e09ccde6ab4cdf0/booty-0.1.0-py3-none-any.whl"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c12d8b0563d53dc4a96a2e87d5c1ff83",
          "sha256": "9d448bfae755c03bac4b6fdabe2b00dd9f88ac3d53426ac891894adc3bf5f58d"
        },
        "downloads": 0,
        "filename": "booty-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c12d8b0563d53dc4a96a2e87d5c1ff83",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 14761,
        "upload_time": "2017-09-18T00:10:15",
        "url": "https://files.pythonhosted.org/packages/d1/12/3ff77e6828699f8264067e81625c90a3614c37dd2d61c4e6b4706930774b/booty-0.2.1-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c12d8b0563d53dc4a96a2e87d5c1ff83",
        "sha256": "9d448bfae755c03bac4b6fdabe2b00dd9f88ac3d53426ac891894adc3bf5f58d"
      },
      "downloads": 0,
      "filename": "booty-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c12d8b0563d53dc4a96a2e87d5c1ff83",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 14761,
      "upload_time": "2017-09-18T00:10:15",
      "url": "https://files.pythonhosted.org/packages/d1/12/3ff77e6828699f8264067e81625c90a3614c37dd2d61c4e6b4706930774b/booty-0.2.1-py3-none-any.whl"
    }
  ]
}