{
  "info": {
    "author": "Jason R. Jones",
    "author_email": "slightlynybbled@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "====================\nPurpose\n====================\n\nThis code base is for creating a bootloader to be utilized for programming microcontroller flash\nmemory.  This program takes a hex file as the input and will parse that hex file and send it to\nthe microcontroller bootloader over a serial UART (commonly referred to as a \"serial port\" or\n\"COM port\").\n\nThe sole companion project to this is the `bootypic <http://github.com/slightlynybbled/bootpic>`_ project.\nHopefully, more will follow.\n\n====================\nInstallation\n====================\n\nThe easiest way to install this utility is to `pip install booty`.  Alternatively, you may download\nthis repository, navigate to the root directory of the repository, and `python setup.py install`.\n\n====================\nRunning\n====================\n\nAssuming that this is installed in your root python environment, it will create a command-line utility\nwhich can be directly invoked::\n\n    user ~$ booty --help\n    Usage: booty [OPTIONS]\n\n    Options:\n      -h, --hexfile PATH      The path to the hex file  [required]\n      -p, --port TEXT         Serial port (COMx on Windows devices, ttyXX on Unix-\n                              like devices)  [required]\n      -b, --baudrate INTEGER  Baud rate in bits/s (defaults to 115200)\n      -l, --load              Load the device with the hex file\n      -v, --verify            Verify device\n      --help                  Show this message and exit.\n\nOf course, to use the package, there are some options that need to be specified.  The two most necessary\noptions are the `--hexfile` and `--port` options.  Additionally, either the `--load` or `--verify` should\nbe specified or no action will take place.  This is, after all, a loading and/or verification utility.\n\nIf `--load` and `--verify` are specified, the loading will take place first.\n\nA common command to load and verify a device might look like this::\n\n    user ~$ booty -p COM20 --load --verify -hexfile \"C:/path/to/my/hex.hex\"\n\nThe utility will execute a series of commands and result in an output similar to this::\n\n    user ~$ booty -p COM20 --load --verify -hexfile \"C:/path/to/my/hex.hex\"\n    INFO:booty:Using provided hex file at \"C:/path/to/my/hex.hex\" to load and verify device\n    INFO:booty.comm_thread:platform set: dspic33ep32mc204\n    INFO:booty.comm_thread:version set: 0.1\n    INFO:booty.comm_thread:row length set: 2\n    INFO:booty.comm_thread:page length set: 512\n    INFO:booty.comm_thread:program length set: 21996\n    INFO:booty.comm_thread:max programming size set: 128\n    INFO:booty.comm_thread:application start address set: 4096\n    INFO:booty.comm_thread:device identification complete\n    INFO:booty:loading...\n    INFO:booty:device successfully loaded!\n    INFO:booty:verifying...\n    INFO:booty:device verified!\n\n====================\nHow it Works\n====================\n\nAll relevant information is stored on the microcontroller, meaning that the relevant data is stored at compile-time.\n\nThe programming takes place in three stages:\n\n 1. device polling - determines what the device is, the command set available, and the page erase and write sizes\n 2. erase/program - a series of erase/program cycles which write to the program memory of the microcontroller\n 3. read/verify - a complete read and verification of the user memory\n\nEach of these sections can be clearly observed on a logic analyzer.  The capture shown was using a dsPIC33EP32MC204\nand takes 17.1s from first byte to last in order to transfer and verify 27.6kB of program data.  There is probably some\nroom to improve this a bit, but not much without impacting the compiled size of the device bootloader.  Also keep in\nmind that flash erase and write cycles have minimum times associated with them.\n\n    .. image:: /docs/img/poll-program-verify.png\n\nA close up of page erase followed by a series of writes (4 writes of 128 instructions for each erase of 512 instructions):\n\n    .. image:: /docs/img/erase-load.png\n\nA close up of reads:\n\n    .. image:: /docs/img/read.png\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/slightlynybbled/booty",
    "keywords": "bootloader pic24 dspic",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "booty",
    "platform": "",
    "project_url": "https://pypi.org/project/booty/",
    "release_url": "https://pypi.org/project/booty/0.1.0/",
    "requires_dist": [
      "pyserial (>=3.3)",
      "intelhex (>=2.1)",
      "click (>=6.7)"
    ],
    "requires_python": "",
    "summary": "Bootloader application",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "27a1cf1263de9e789a01b5b2001c0390",
          "sha256": "c9e5a4fa098276c30db07b900605cf12efdfa74bafccd2d3701b1eb214f7b7ac"
        },
        "downloads": 0,
        "filename": "booty-0.1.0-py3.5.egg",
        "has_sig": false,
        "md5_digest": "27a1cf1263de9e789a01b5b2001c0390",
        "packagetype": "bdist_egg",
        "python_version": "3.5",
        "size": 23343,
        "upload_time": "2017-09-02T00:43:28",
        "url": "https://files.pythonhosted.org/packages/4b/2a/3ecff44c3b2cf21cd92fcef80f255a5737779074ac3f89e7768d0ca420fc/booty-0.1.0-py3.5.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "df92e96c74e9226e708ac86511313b02",
          "sha256": "b1ef2e5abcf0b496d53dbbfe7c1093870b47c50d012009768567946cafdde7d0"
        },
        "downloads": 0,
        "filename": "booty-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df92e96c74e9226e708ac86511313b02",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 13816,
        "upload_time": "2017-09-02T00:43:25",
        "url": "https://files.pythonhosted.org/packages/6b/03/3f05165a46bbf8a729679a52092eb827bb7eb46ca4eb0e09ccde6ab4cdf0/booty-0.1.0-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "27a1cf1263de9e789a01b5b2001c0390",
        "sha256": "c9e5a4fa098276c30db07b900605cf12efdfa74bafccd2d3701b1eb214f7b7ac"
      },
      "downloads": 0,
      "filename": "booty-0.1.0-py3.5.egg",
      "has_sig": false,
      "md5_digest": "27a1cf1263de9e789a01b5b2001c0390",
      "packagetype": "bdist_egg",
      "python_version": "3.5",
      "size": 23343,
      "upload_time": "2017-09-02T00:43:28",
      "url": "https://files.pythonhosted.org/packages/4b/2a/3ecff44c3b2cf21cd92fcef80f255a5737779074ac3f89e7768d0ca420fc/booty-0.1.0-py3.5.egg"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "df92e96c74e9226e708ac86511313b02",
        "sha256": "b1ef2e5abcf0b496d53dbbfe7c1093870b47c50d012009768567946cafdde7d0"
      },
      "downloads": 0,
      "filename": "booty-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "df92e96c74e9226e708ac86511313b02",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 13816,
      "upload_time": "2017-09-02T00:43:25",
      "url": "https://files.pythonhosted.org/packages/6b/03/3f05165a46bbf8a729679a52092eb827bb7eb46ca4eb0e09ccde6ab4cdf0/booty-0.1.0-py3-none-any.whl"
    }
  ]
}