{
  "info": {
    "author": "Vincent Verdeil, Antoine Rousseaux",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Multimedia :: Graphics :: Capture :: Digital Camera"
    ],
    "description": ".. image:: https://raw.githubusercontent.com/werdeil/pibooth/master/templates/pibooth.png\n   :align: center\n   :alt: Pibooth\n\n\nThe ``pibooth`` project attempts to provide a Photo Booth application *out-of-the-box*\nfor Raspberry Pi.\n\nRequirements\n------------\n\nThe requirements listed below are the one used for the development of ``pibooth``, but\nother configuration may work fine. All hardware buttons and lights are optional.\n\nHardware:\n^^^^^^^^^\n\n* 1 Raspberry Pi Model B+\n* 1 Camera (Pi Camera v2.1 8 MP 1080p or any camera `compatible with gphoto2\n  <http://www.gphoto.org/proj/libgphoto2/support.php>`_)\n* 2 push buttons\n* 1 LED\n* 1 resistor of 100 Ohm\n\nSoftware:\n^^^^^^^^^\n\n* Python ``3.5.3``\n* RPi.GPIO ``0.6.3``\n* picamera ``1.13``\n* Pillow ``4.0.0``\n* pygame ``1.9.3``\n* gphoto2 ``1.8.0`` ( libgphoto2 ``2.5.15`` )\n\nInstall\n-------\n\nA brief description on how to set-up a Raspberry Pi to use this software.\n\n1. Download latest Raspbian image and set-up an SD-card. You can follow\n   `these instructions <https://www.raspberrypi.org/documentation/installation/installing-images/README.md>`_ .\n2. Insert the SD-card into the Raspberry Pi and fire it up. Use the raspi-config tool that is shown\n   automatically on the first boot to configure your system (e.g., expand partition, change hostname,\n   password, enable SSH, configure to boot into GUI, etc.)\n3. Reboot and open a terminal. Install the latest firmware version\n\n   ::\n\n        $ sudo rpi-update\n4. Upgrade all installed software\n\n   ::\n\n        $ sudo apt-get update\n        $ sudo apt-get upgrade\n5. Install ``gphoto2`` (required only for external Camera)\n\n   ::\n\n        $ sudo wget raw.github.com/gonzalo/gphoto2-updater/master/gphoto2-updater.sh\n        $ sudo chmod 755 gphoto2-updater.sh\n        $ sudo ./gphoto2-updater.sh\n6. Install ``pibooth`` from the pypi repository\n\n   ::\n\n        $ sudo pip install pibooth\n\nRun\n---\n\nStart the Photo Booth application using the command::\n\n    $ pibooth\n\nAfter the graphical interface is started, the following actions are available:\n\n==================== ================ ================\nAction               Keyboard key     Physical button\n==================== ================ ================\nToggle Full screen   Ctrl + F         \\-\nTake pictures        P                Button 1\nExport Printer/Cloud Ctrl + E         Button 2\nQuit                 ESC              \\-\n==================== ================ ================\n\nAll pictures taken are stored in a subfolder of the one defined in the configuration,\nnamed **YYYY-mm-dd hh-mm-ss** which the time when first photo of the sequence was taken.\n\nConfiguration\n-------------\n\nAt the first run, a configuration file is generated in ``~/.config/pibooth/pibooth.cfg``\nwhich permits to configure the behavior of the application. The configuration can be\neasily edited using the command::\n\n \u00a0  $ pibooth --config\n\nThe default configuration can be restored with the command::\n\n \u00a0 \u00a0$ pibooth --reset\n\nBelow is the default configuration file:\n\n.. code-block:: ini\n\n    [GENERAL]\n    # Path to save images\n    directory = ~/Pictures/pibooth\n\n    # Clear previously stored photos\n    clear_on_startup = True\n\n    # How long to debounce the button in seconds\n    debounce_delay = 0.3\n\n    [WINDOW]\n    # (Width, Height) of the display monitor\n    size = (800, 480)\n\n    # Show a counter between taking photos\n    capture_counter = True\n\n    # How long is the preview in seconds\n    preview_delay = 3\n\n    # Preview window position related to the main window\n    preview_offset = (50, 60)\n\n    [PICTURE]\n    # How many pictures to take (4 max)\n    captures = 4\n\n    # First text displayed\n    footer_text1 = Footer 1\n\n    # Second text displayed\n    footer_text2 = Footer 2\n\n    # Footer text RGB color\n    text_color = (0, 0, 0)\n\n    # Background RGB color\n    bg_color = (255, 255, 255)\n\n    [CAMERA]\n    # Resolution for camera captures (see picamera modes)\n    resolution = (3280, 2464)\n\n    # Adjust for lighting issues. Normal is 100 or 200. Dark is 800 max\n    iso = 100\n\nCircuit diagram\n---------------\n\n.. image:: https://raw.githubusercontent.com/werdeil/pibooth/master/templates/sketch.png\n   :height: 990 px\n   :width: 1215 px\n   :scale: 50 %\n   :align: center\n   :alt: electronic sketch\n\nCredits:\n--------\n\nIcons from the Noun Project\n\n- Button by Prerak Patel\n- Disco pose by Moriah Rich\n- Fireworks by Creative Stall\n- Hamster wheel by Dream Icons\n- Tap by Prerak Patel\n- Yoga poses by Claire Jones\n\nThe code was developed from scratch but inspired by the following tutorials/projects:\n\n- https://github.com/reuterbal/photobooth\n- http://www.instructables.com/lesson/Build-a-Photo-Booth\n- http://www.instructables.com/id/Raspberry-Pi-photo-booth-controller\n- http://www.instructables.com/id/Lininger-Rood-Photo-Booth\n\n\n",
    "docs_url": null,
    "download_url": "https://github.com/werdeil/pibooth/archive/0.0.2.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/werdeil/pibooth",
    "keywords": "raspberrypi,camera,photobooth",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pibooth",
    "platform": "unix",
    "project_url": "https://pypi.org/project/pibooth/",
    "release_url": "https://pypi.org/project/pibooth/0.0.2/",
    "requires_dist": [
      "pygame",
      "picamera",
      "gphoto2",
      "RPi.GPIO",
      "Pillow"
    ],
    "requires_python": "",
    "summary": "A Photo Booth application in pure Python for the Raspberry Pi.",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8c88aa409298c4046304c1cc1ee2cccc",
          "sha256": "af14bc98657f03cebf82e6c97add17cabb99b835316f535bd1aa1a436f10612d"
        },
        "downloads": -1,
        "filename": "pibooth-0.0.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "8c88aa409298c4046304c1cc1ee2cccc",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 358160,
        "upload_time": "2018-01-07T18:34:20",
        "url": "https://files.pythonhosted.org/packages/86/7a/a46c741929e218cb73341fa61c4127955650cac30efea1da01c5b2164371/pibooth-0.0.2-py2-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8c88aa409298c4046304c1cc1ee2cccc",
        "sha256": "af14bc98657f03cebf82e6c97add17cabb99b835316f535bd1aa1a436f10612d"
      },
      "downloads": -1,
      "filename": "pibooth-0.0.2-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "8c88aa409298c4046304c1cc1ee2cccc",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 358160,
      "upload_time": "2018-01-07T18:34:20",
      "url": "https://files.pythonhosted.org/packages/86/7a/a46c741929e218cb73341fa61c4127955650cac30efea1da01c5b2164371/pibooth-0.0.2-py2-none-any.whl"
    }
  ]
}