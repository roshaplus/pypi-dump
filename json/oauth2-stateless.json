{
  "info": {
    "author": "Andrew Grytsenko",
    "author_email": "darkanthey@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "oauth2-stateless\n#############\n\noauth2-stateless is a framework that aims at making it easy to provide authentication\nvia `OAuth 2.0 <http://tools.ietf.org/html/rfc6749>`_ within an application stack.\nMain difference of this library is the simplicity\nand the ability to work without any database just with 'stateless'\ntokens based on JWT (JSON Web Tokens).\n\n\n`Documentation <http://oauth2-stateless.readthedocs.org/en/latest/index.html>`_\n\nStatus\n******\n\noauth2-stateless has reached its beta phase. All main parts of the `OAuth 2.0 RFC <http://tools.ietf.org/html/rfc6749>`_ such as the various types of Grants, Refresh Token and Scopes have been implemented.\n\nInstallation\n************\n\noauth2-stateless is available on\n`PyPI <http://pypi.python.org/pypi/oauth2-stateless/>`_.\n\n    pip install oauth2-stateless\n\n\nUsage\n*****\n\nExample Authorization server\n\n.. code-block:: python\n\n    from wsgiref.simple_server import make_server\n    import oauth2\n    import oauth2.grant\n    import oauth2.error\n    from oauth2.store.memory import ClientStore\n    from oauth2.store.stateless import Token Store\n    import oauth2.tokengenerator\n    import oauth2.web.wsgi\n\n\n    # Create a SiteAdapter to interact with the user.\n    # This can be used to display confirmation dialogs and the like.\n    class ExampleSiteAdapter(oauth2.web.AuthorizationCodeGrantSiteAdapter, oauth2.web.ImplicitGrantSiteAdapter):\n        TEMPLATE = '''\n    <html>\n        <body>\n            <p>\n                <a href=\"{url}&confirm=confirm\">confirm</a>\n            </p>\n            <p>\n                <a href=\"{url}&deny=deny\">deny</a>\n            </p>\n        </body>\n    </html>'''\n\n        def authenticate(self, request, environ, scopes, client):\n            # Check if the user has granted access\n            if request.post_param(\"confirm\") == \"confirm\":\n                return {}\n\n            raise oauth2.error.UserNotAuthenticated\n\n        def render_auth_page(self, request, response, environ, scopes, client):\n            url = request.path + \"?\" + request.query_string\n            response.body = self.TEMPLATE.format(url=url)\n            return response\n\n        def user_has_denied_access(self, request):\n            # Check if the user has denied access\n            if request.post_param(\"deny\") == \"deny\":\n                return True\n            return False\n\n    # Create an in-memory storage to store your client apps.\n    client_store = ClientStore()\n    # Add a client\n    client_store.add_client(client_id=\"abc\", client_secret=\"xyz\", redirect_uris=[\"http://localhost/callback\"])\n\n    site_adapter = ExampleSiteAdapter()\n\n    # Create an in-memory storage to store issued tokens.\n    # LocalTokenStore can store access and auth tokens\n    stateless_token = oauth2.tokengenerator.StatelessTokenGenerator(secret_key='xxx')\n    token_store = TokenStore(stateless)\n\n    # Create the controller.\n    provider = oauth2.Provider(\n        access_token_store=token_store,\n        auth_code_store=token_store,\n        client_store=client_store,\n        token_generator=stateless_token)\n    )\n\n    # Add Grants you want to support\n    provider.add_grant(oauth2.grant.AuthorizationCodeGrant(site_adapter=site_adapter))\n    provider.add_grant(oauth2.grant.ImplicitGrant(site_adapter=site_adapter))\n\n    # Add refresh token capability and set expiration time of access tokens to 30 days\n    provider.add_grant(oauth2.grant.RefreshToken(expires_in=2592000))\n\n    # Wrap the controller with the Wsgi adapter\n    app = oauth2.web.wsgi.Application(provider=provider)\n\n    if __name__ == \"__main__\":\n        httpd = make_server('', 8080, app)\n        httpd.serve_forever()\n\n\nThis example only shows how to instantiate the server.\nIt is not a working example as a client app is missing.\nTake a look at the `examples <docs/examples/>`_ directory.\n\nOr just run this example:\npython docs/examples/stateless_client_server.py\n\nThis is already a workable example. They can work without database\nbecause oauth token already contain all the necessary information like\na user_id, grant_type, data, scopes and client_id.\nIf you want to check user state like a ban, disable, etc.\nYou can check this param on server site from database. By adding this check to\n/api/me or redefine oauth2.tokengenerator and add specific logic.\n\n\nSupported storage backends\n**************************\n\noauth2-stateless does not force you to use a specific database or you\ncan work without database with stateless token.\n\nIt currently supports these storage backends out-of-the-box:\n\n- MongoDB\n- MySQL\n- Redis\n- Memcached\n- Dynamodb\n  \nHowever, you are not not bound to these implementations.\nBy adhering to the interface defined by the base classes in ``oauth2.store``,\nyou can easily add an implementation of your backend.\nIt also is possible to mix different backends and e.g. read data of a client\nfrom MongoDB while saving all tokens in memcached for fast access.\n\nTake a look at the examples in the *examples* directory of the project.\n\n\nSite adapter\n************\n\n- tornado\n- flask\n- uwsgi\n  \nLike for storage, oauth2-stateless does not define how you identify a\nuser or show a confirmation dialogue.\nInstead your application should use the API defined by ``oauth2.web.SiteAdapter``.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/darkanthey/oauth2-stateless",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "oauth2-stateless",
    "platform": "",
    "project_url": "https://pypi.org/project/oauth2-stateless/",
    "release_url": "https://pypi.org/project/oauth2-stateless/1.0.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "OAuth 2.0 provider for python with Stateless tokens support",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ea5a7c190782258b1b5bdf9ded587d7e",
          "sha256": "4d8fec47d09affc6db74a95d257909daf49b6ab7a5eb700faaa8be87d36c1a46"
        },
        "downloads": -1,
        "filename": "oauth2-stateless-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ea5a7c190782258b1b5bdf9ded587d7e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 44455,
        "upload_time": "2018-01-19T11:15:09",
        "url": "https://files.pythonhosted.org/packages/42/d8/c0f81330afe137611e7861159544395a22be02207cf0aae387d288c197b2/oauth2-stateless-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ea5a7c190782258b1b5bdf9ded587d7e",
        "sha256": "4d8fec47d09affc6db74a95d257909daf49b6ab7a5eb700faaa8be87d36c1a46"
      },
      "downloads": -1,
      "filename": "oauth2-stateless-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ea5a7c190782258b1b5bdf9ded587d7e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 44455,
      "upload_time": "2018-01-19T11:15:09",
      "url": "https://files.pythonhosted.org/packages/42/d8/c0f81330afe137611e7861159544395a22be02207cf0aae387d288c197b2/oauth2-stateless-1.0.0.tar.gz"
    }
  ]
}