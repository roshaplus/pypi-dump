{
  "info": {
    "author": "Calvin Smith",
    "author_email": "sapientdust+pytest-tornasync@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Testing"
    ],
    "description": "================\npytest-tornasync\n================\n\n.. image:: https://travis-ci.org/eukaryote/pytest-tornasync.svg?branch=master\n    :target: https://travis-ci.org/eukaryote/pytest-tornasync\n\n\nA simple pytest plugin that provides some helpful fixtures for testing\nTornado apps and easy handling of plain (undecoratored) native coroutine tests\n(Python 3.5+).\n\nWhy another Tornado pytest plugin when the excellent ``pytest-tornado`` already\nexists? The main reason is that I didn't want to have to decorate every test\ncoroutine with ``@pytest.mark.gen_test``. This plugin doesn't have anything\nlike ``gen_test``. Defining a test with ``async def`` is all that is required.\n\n\nInstallation\n------------\n\nInstall using pip, which must be run with Python 3.5+:\n\n.. code-block:: sh\n\n    pip install pytest-tornasync\n\n\nUsage\n-----\n\nDefine an ``app`` fixture:\n\n.. code-block:: python\n\n    import pytest\n\n\n    @pytest.fixture\n    def app():\n        import yourapp\n        return yourapp.make_app()  # a tornado.web.Application\n\n\nCreate tests as native coroutines using Python 3.5+ ``async def``:\n\n.. code-block:: python\n\n    async def test_app(http_server_client):\n        resp = await http_server_client.fetch('/')\n        assert resp.code == 200\n        # ...\n\n\nIf you want to use the Tornado 3.2+ ``asyncio`` event loop, redefine the\n``io_loop`` fixture in your ``conftext.py`` as follows:\n\n.. code-block:: python\n\n    import pytest\n\n\n    @pytest.fixture\n    def io_loop(io_loop_asyncio)\n        return io_loop_asyncio\n\n\n\nFixtures\n--------\n\nWhen the plugin is installed, then ``py.test --fixtures`` will show\nthe fixtures that are available::\n\nhttp_server_port\n    Port used by `http_server`.\nhttp_server\n    Start a tornado HTTP server that listens on all available interfaces.\n\n    You must create an `app` fixture, which returns\n    the `tornado.web.Application` to be tested.\n\n    Raises:\n    FixtureLookupError: tornado application fixture not found\nhttp_server_client\n    Create an asynchronous HTTP client that can fetch from `http_server`.\nhttp_client\n    Create an asynchronous HTTP client that can fetch from anywhere.\nio_loop_tornado\n    Create a new `tornado.ioloop.IOLoop` for each test case.\nio_loop_asyncio\n    Create a new `tornado.platform.asyncio.AsyncIOLoop` for each test case.\nio_loop\n    Alias for `io_loop_tornado`, by default.\n\n    You may define an `io_loop` that uses the `io_loop_asyncio` fixture to\n    use an asyncio-backed Tornado event loop.\n\n\n\nExamples\n--------\n\n.. code-block:: python\n\n    import time\n\n    import tornado.web\n    import tornado.gen\n\n    import pytest\n\n\n    class MainHandler(tornado.web.RequestHandler):\n        def get(self):\n            self.write(\"Hello, world!\")\n\n\n    @pytest.fixture\n    def app():\n        return tornado.web.Application([(r\"/\", MainHandler)])\n\n\n    async def test_http_server_client(http_server_client):\n        # http_server_client fetches from the `app` fixture and takes path\n        resp = await http_server_client.fetch('/')\n        assert resp.code == 200\n        assert resp.body == b\"Hello, world!\"\n\n\n    async def test_http_client(http_client):\n        # http_client fetches from anywhere and takes full URL\n        resp = await http_client.fetch('http://httpbin.org/status/204')\n        assert resp.code == 204\n\n\n    async def example_coroutine(period):\n        await tornado.gen.sleep(period)\n\n\n    async def test_example():\n        # no fixtures needed\n        period = 1.0\n        start = time.time()\n        await example_coroutine(period)\n        elapsed = time.time() - start\n        assert elapsed >= period",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/eukaryote/pytest-tornasync",
    "keywords": "testing py.test tornado",
    "license": "http://www.opensource.org/licenses/mit-license.php",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-tornasync",
    "platform": "any",
    "project_url": "https://pypi.org/project/pytest-tornasync/",
    "release_url": "https://pypi.org/project/pytest-tornasync/0.4.0/",
    "requires_python": "",
    "summary": "py.test plugin for testing Python 3.5+ Tornado code",
    "version": "0.4.0"
  },
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bb00df7759efc30ec44d7c0d2187472d",
          "sha256": "bbed467a0ad42ceabb67f844dd66eb26bbbcd899f97fff0a077da3510bb9c2c9"
        },
        "downloads": 134,
        "filename": "pytest_tornasync-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb00df7759efc30ec44d7c0d2187472d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 7110,
        "upload_time": "2016-05-23T00:31:12",
        "url": "https://files.pythonhosted.org/packages/04/30/df41d16e6a150c8bf010d76079286a7bf45337dcec60e8f2c8b77d8d0a82/pytest_tornasync-0.2.0-py3-none-any.whl"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9758a6d4d86451b4296bf03b4c4ac1af",
          "sha256": "4d2db70c1f9d8d8660ccece95bd2f6b438c81cdfa663a2b3a18789f15e9551eb"
        },
        "downloads": 250,
        "filename": "pytest_tornasync-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9758a6d4d86451b4296bf03b4c4ac1af",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 7276,
        "upload_time": "2016-05-25T04:17:22",
        "url": "https://files.pythonhosted.org/packages/43/70/10a778570c91b3e80da934527e8f3659d33c96a428ef13cc3995b2c6aa32/pytest_tornasync-0.3.0-py3-none-any.whl"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d3a65c6cc5938795528a5bd1d0f0e1e0",
          "sha256": "58bf90d1cfa1223ea57177754ffc8aa45d22e9087a824d98dc9c3f0232f6e0bd"
        },
        "downloads": 590,
        "filename": "pytest_tornasync-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d3a65c6cc5938795528a5bd1d0f0e1e0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 7280,
        "upload_time": "2016-08-25T19:22:27",
        "url": "https://files.pythonhosted.org/packages/03/b4/b3e7ee42eb5f798d9c6a3bd85ed6def578d8d08ea1156e5d97fcd4013228/pytest_tornasync-0.4.0-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d3a65c6cc5938795528a5bd1d0f0e1e0",
        "sha256": "58bf90d1cfa1223ea57177754ffc8aa45d22e9087a824d98dc9c3f0232f6e0bd"
      },
      "downloads": 590,
      "filename": "pytest_tornasync-0.4.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d3a65c6cc5938795528a5bd1d0f0e1e0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 7280,
      "upload_time": "2016-08-25T19:22:27",
      "url": "https://files.pythonhosted.org/packages/03/b4/b3e7ee42eb5f798d9c6a3bd85ed6def578d8d08ea1156e5d97fcd4013228/pytest_tornasync-0.4.0-py3-none-any.whl"
    }
  ]
}