{
  "info": {
    "author": "Jamie Hewland",
    "author_email": "jamie@praekelt.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Twisted",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "marathon-acme\n=============\n\n|PyPI| |Build Status| |codecov|\n\nAutomate\n`ACME <https://en.wikipedia.org/wiki/Automated_Certificate_Management_Environment>`__\ncertificates for `Marathon <https://mesosphere.github.io/marathon/>`__\napps served by\n```marathon-lb`` <https://github.com/mesosphere/marathon-lb>`__\n\nHow it works\n------------\n\nThere is one big requirement for deploying ``marathon-acme``: there must\nbe shared persistent storage between ``marathon-acme`` and all\n``marathon-lb`` instances. This will be used to store the certificates.\n\n1. ``marathon-acme`` watches Marathon for changes to app definitions.\n2. It collects the values of all ``MARATHON_ACME_{n}_DOMAIN`` labels on\n   apps. This will form the set of domains to fetch certificates for.\n3. It generates, verifies and stores certificates for any new domains\n   using the configured ACME certificate authority.\n4. It tells ``marathon-lb`` to reload using the ``marathon-lb`` HTTP\n   API.\n5. It issues new certificates for soon-to-expire certificates once a\n   day.\n\n``marathon-acme`` is written in Python using\n`Twisted <https://twistedmatrix.com/trac/>`__. The certificate issuing\nfunctionality is possible thanks to the\n```txacme`` <https://github.com/mithrandi/txacme>`__ library.\n\nThe ACME provider that most people are likely to use is `Let's\nEncrypt <https://letsencrypt.org/>`__. Before using ``marathon-acme``\nwith Let's Encrypt, make sure you are aware of their `rate\nlimits <https://letsencrypt.org/docs/rate-limits/>`__.\n\nUsage\n-----\n\n``marathon-acme`` is available as a pip-installable Python package on\n`PyPI <https://pypi.python.org/pypi/marathon-acme>`__. However, most\nusers will probably want to use the Docker image available from `Docker\nHub <https://hub.docker.com/r/praekeltfoundation/marathon-acme/>`__.\n\n::\n\n    > $ docker run --rm praekeltfoundation/marathon-acme --help\n    usage: marathon-acme [-h] [-a ACME] [-e EMAIL] [-m MARATHON[,MARATHON,...]]\n                         [-l LB[,LB,...]] [-g GROUP] [--listen LISTEN]\n                         [--log-level {debug,info,warn,error,critical}]\n                         storage-dir\n\n    Automatically manage ACME certificates for Marathon apps\n\n    positional arguments:\n      storage-dir           Path to directory for storing certificates\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -a ACME, --acme ACME  The address for the ACME Directory Resource (default:\n                            https://acme-v01.api.letsencrypt.org/directory)\n      -e EMAIL, --email EMAIL\n                            An email address to register with the ACME service\n                            (optional)\n      -m MARATHON[,MARATHON,...], --marathon MARATHON[,MARATHON,...]\n                            The addresses for the Marathon HTTP API (default:\n                            http://marathon.mesos:8080)\n      -l LB[,LB,...], --lb LB[,LB,...]\n                            The addresses for the marathon-lb HTTP API (default:\n                            http://marathon-lb.marathon.mesos:9090)\n      -g GROUP, --group GROUP\n                            The marathon-lb group to issue certificates for\n                            (default: external)\n      --listen LISTEN       The address for the port to listen on (default: :8000)\n      --log-level {debug,info,warn,error,critical}\n                            The minimum severity level to log messages at\n                            (default: info)\n\n``marathon-acme`` app definition\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``marathon-acme`` should be deployed as a Marathon app.\n\n.. code:: json\n\n    {\n      \"id\": \"/marathon-acme\",\n      \"cpus\": 0.01,\n      \"mem\": 128.0,\n      \"args\": [\n        \"--email\", \"letsencrypt@example.com\",\n        \"--marathon\", \"http://marathon1:8080,http://marathon2:8080,http://marathon3:8080\",\n        \"--lb\", \"http://lb1:9090,http://lb2:9090\",\n        \"/var/lib/marathon-acme\"\n      ],\n      \"labels\": {\n        \"HAPROXY_GROUP\": \"external\",\n        \"HAPROXY_0_VHOST\": \"example.com\",\n        \"HAPROXY_0_BACKEND_WEIGHT\": \"1\",\n        \"HAPROXY_0_PATH\": \"/.well-known/acme-challenge/\",\n        \"HAPROXY_0_HTTP_FRONTEND_ACL_WITH_PATH\": \"  acl path_{backend} path_beg {path}\\n  use_backend {backend} if path_{backend}\\n\",\n        \"HAPROXY_0_HTTPS_FRONTEND_ACL_WITH_PATH\": \"  use_backend {backend} if path_{backend}\\n\"\n      },\n      \"container\": {\n        \"type\": \"DOCKER\",\n        \"docker\": {\n          \"image\": \"praekeltfoundation/marathon-acme\",\n          \"network\": \"BRIDGE\",\n          \"portMappings\": [\n            { \"containerPort\": 8000, \"hostPort\": 0 }\n          ],\n          \"parameters\": [\n            {\n              \"value\": \"my-volume-driver\",\n              \"key\": \"volume-driver\"\n            },\n            {\n              \"value\": \"marathon-acme-certs:/var/lib/marathon-acme\",\n              \"key\": \"volume\"\n            }\n          ],\n        }\n      }\n    }\n\nThe above should mostly be standard across different deployments. The\nvolume parameters will depend on your particular networked storage\nsolution.\n\n``HAPROXY`` labels\n^^^^^^^^^^^^^^^^^^\n\nSeveral special ``marathon-lb`` labels are needed in order to forward\nall HTTP requests whose path begins with\n``/.well-known/acme-challenge/`` to ``marathon-acme``, in order to serve\nACME `HTTP\nchallenge <https://ietf-wg-acme.github.io/acme/#rfc.section.7.2>`__\nresponses.\n\n``HAPROXY_GROUP``\n'''''''''''''''''\n\n``marathon-lb`` instances are assigned a group. Only Marathon apps with\na ``HAPROXY_GROUP`` label that matches their group are routed with that\ninstance. \"external\" is the common name for publicly-facing load\nbalancers.\n\n``HAPROXY_0_VHOST``\n'''''''''''''''''''\n\n``marathon-lb`` is designed with the assumption that things have\ndomains. ``marathon-acme`` doesn't technically need one, but if we don\u2019t\nspecify this label, the app is not exposed to the outside world. Any\nvalue will do here, since we change the templates to never include this\nvalue.\n\n``HAPROXY_0_BACKEND_WEIGHT``\n''''''''''''''''''''''''''''\n\nWe want this rule in HAProxy's config file to come before any others so\nthat requests are routed to ``marathon-acme`` before we do the (usually)\ndomain-based routing for the other Marathon apps. The default weight is\n``0``, so we set to ``1`` so that the rule comes first.\n\n``HAPROXY_0_PATH``\n''''''''''''''''''\n\nThis is the beginning of the HTTP path to ACME validation challenges.\n\n``HAPROXY_0_HTTP_FRONTEND_ACL_WITH_PATH``\n'''''''''''''''''''''''''''''''''''''''''\n\nThis is where it gets complicated... It\u2019s possible to edit the templates\nused for generating the HAProxy on a per-app basis using labels. This is\nnecessary because by default ``marathon-lb`` will route based on domain\nfirst, but we don\u2019t want to do that. You can see the standard template\n`here <https://github.com/mesosphere/marathon-lb/blob/master/Longhelp.md#haproxy_http_frontend_acl_with_path>`__.\nWe simply remove the first line containing the hostname ACL.\n\n``HAPROXY_0_HTTPS_FRONTEND_ACL_WITH_PATH``\n''''''''''''''''''''''''''''''''''''''''''\n\n``marathon-lb`` exposes apps via port 443/HTTPS by default and there\ndoesn\u2019t seem to be a way to switch it off. We change the ACL template\nhere so that HAProxy doesn\u2019t try to do an SNI match on the hostname. The\nACME Simple HTTP spec allows for challenges to occur over HTTPS if the\nclient requests as such and will ignore the certificate presented on our\nside.\n\nDocker images\n^^^^^^^^^^^^^\n\nDocker images are available from `Docker\nHub <https://hub.docker.com/r/praekeltfoundation/marathon-acme/>`__.\nThere are two different streams of Docker images available: \\*\n``:latest``/``:<version>``: Tracks the latest released version of\n``marathon-acme`` on\n`PyPI <https://pypi.python.org/pypi/marathon-acme>`__. The Dockerfile\nfor these is in the\n```praekeltfoundation/docker-marathon-acme`` <https://github.com/praekeltfoundation/docker-marathon-acme>`__\nrepo. \\* ``:develop``: Tracks the ``develop`` branch of this repo and is\nbuilt using the `Dockerfile <Dockerfile>`__ in this repo.\n\nFor more details on the Docker images, see the\n```praekeltfoundation/docker-marathon-acme`` <https://github.com/praekeltfoundation/docker-marathon-acme>`__\nrepo.\n\nVolumes and ports\n'''''''''''''''''\n\nThe ``marathon-acme`` container defaults to the\n``/var/lib/marathon-acme`` directory to store certificates and the ACME\nclient private key. This is the path inside the container that should be\nmounted as a shared volume.\n\nThe container also defaults to listening on port 8000 on all interfaces.\n\nYou can override these values by providing arguments to the Docker\ncontainer.\n\nCertificate files\n^^^^^^^^^^^^^^^^^\n\n``marathon-acme`` creates the following directory/file structure: \\*\n``/var/lib/marathon-acme/`` \\* ``client.key``: The ACME client private\nkey \\* ``default.pem``: A self-signed wildcard cert for HAProxy to\nfallback to \\* ``certs/`` \\* *``www.example.com.pem``*: An issued ACME\ncertificate for a domain\n\n``marathon-lb`` configuration\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``marathon-acme`` requires ``marathon-lb`` 1.4.0 or later in order to be\nable to trigger HAProxy reloads.\n\nAs mentioned earlier, ``marathon-lb`` must share persistent storage with\n``marathon-acme``. BYONS: *bring your own networked storage.*\n\nThe only real configuration needed for ``marathon-lb`` is to add the\npath to ``marathon-acme``'s certificate storage directory as a source of\ncertificates. HAProxy supports loading certificates from a directory.\nYou should set ``marathon-lb``'s ``--ssl-certs`` CLI option to the\ncertificate directory path as well as the fallback certificate (if\nHAProxy cannot find any certificates in the paths it is given it will\nfail to start).\n\n::\n\n    --ssl-certs <storage-dir>/certs,<storage-dir>/default.pem\n\nApp configuration\n~~~~~~~~~~~~~~~~~\n\n``marathon-acme`` uses a single ``marathon-lb``-like label to assign\ndomains to app ports: ``MARATHON_ACME_{n}_DOMAIN``, where ``{n}`` is the\nport index. The value of the label is a set of comma-separated domain\nnames, although currently only the first domain name will be considered.\n\nThe app or its port must must be in the same ``HAPROXY_GROUP`` as\n``marathon-acme`` was configured with at start-up.\n\nWe decided not to reuse the ``HAPROXY_{n}_VHOST`` label so as to limit\nthe number of domains that certificates are issued for.\n\nLimitations\n-----------\n\nThe current biggest limitation with ``marathon-acme`` is that it will\nonly issue one certificate for one domain per app port. This is to limit\nthe number of certificates issued so as to prevent hitting Let's Encrypt\nrate limits.\n\nThe library used for ACME certificate management, ``txacme``, is\ncurrently quite limited in its functionality. The two biggest\nlimitations are: \\* There is no `Subject Alternative\nName <https://en.wikipedia.org/wiki/Subject_Alternative_Name>`__ (SAN)\nsupport yet (`#37 <https://github.com/mithrandi/txacme/issues/37>`__).\nEach certificate will correspond to exactly one domain name. This\nlimitation makes it easier to hit Let's Encrypt's rate limits. \\* There\nis no support for *removing* certificates from ``txacme``'s certificate\nstore (`#77 <https://github.com/mithrandi/txacme/issues/77>`__). Once\n``marathon-acme`` issues a certificate for an app it will try to renew\nthat certificate *forever* unless it is manually deleted from the\ncertificate store.\n\nFor a more complete list of issues, see the issues page for this repo.\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/marathon-acme.svg\n   :target: https://pypi.python.org/pypi/marathon-acme\n.. |Build Status| image:: https://travis-ci.org/praekeltfoundation/marathon-acme.svg?branch=develop\n   :target: https://travis-ci.org/praekeltfoundation/marathon-acme\n.. |codecov| image:: https://codecov.io/gh/praekeltfoundation/marathon-acme/branch/develop/graph/badge.svg\n   :target: https://codecov.io/gh/praekeltfoundation/marathon-acme",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/praekeltfoundation/marathon-acme",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "marathon-acme",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/marathon-acme/",
    "release_url": "https://pypi.org/project/marathon-acme/0.1.1/",
    "requires_python": "",
    "summary": "Automated management of Let's Encrypt certificates for apps running on Mesosphere Marathon",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2fb62b4dde7c85e1af28e4a8240e11a2",
          "sha256": "9f4290f4f06fa5c1adf2baa5918612cd74b74f66c3adf9af19af62abf93e5c28"
        },
        "downloads": 52,
        "filename": "marathon_acme-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2fb62b4dde7c85e1af28e4a8240e11a2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 51816,
        "upload_time": "2016-12-13T13:11:28",
        "url": "https://files.pythonhosted.org/packages/02/c6/03e5e62f5be74a5f000721d3c84a6517ce25816da14832c4e869d683eadb/marathon_acme-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "65a24918fd9d3b4804a8454adb17abb6",
          "sha256": "7860293e3394d7ec9470c25042d722ffbf02b393e139ae9ae43c48c0ca76eb9e"
        },
        "downloads": 60,
        "filename": "marathon-acme-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "65a24918fd9d3b4804a8454adb17abb6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41128,
        "upload_time": "2016-12-13T13:09:22",
        "url": "https://files.pythonhosted.org/packages/7e/37/28cfb02a243537336a4a4af4bdb679503bff04edc1414144049b7103198a/marathon-acme-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d13ca86ab6329b419ca20ffe5fc3f1f9",
          "sha256": "fc092c369535644db2a1a3a178d6010a16b51487bd729c03b40848a51aa44f87"
        },
        "downloads": 0,
        "filename": "marathon_acme-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d13ca86ab6329b419ca20ffe5fc3f1f9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 51770,
        "upload_time": "2017-06-12T12:29:00",
        "url": "https://files.pythonhosted.org/packages/6a/1f/3ff748f1b4fe3f42d59a8ab9fab7bede1e5c6df2c140b5d9d28922718eea/marathon_acme-0.1.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0bd4aeb81084fa607869ef2dce76cab1",
          "sha256": "00fa5dfbd223bfccc09c739677296b258c44516e2b3e2d56ff5d2f99acd5551f"
        },
        "downloads": 0,
        "filename": "marathon-acme-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0bd4aeb81084fa607869ef2dce76cab1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 42718,
        "upload_time": "2017-06-12T12:29:02",
        "url": "https://files.pythonhosted.org/packages/58/90/02701ef62efeeee66f1d0fce2f0c117a3d65654729752062fd6adb1c54af/marathon-acme-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d13ca86ab6329b419ca20ffe5fc3f1f9",
        "sha256": "fc092c369535644db2a1a3a178d6010a16b51487bd729c03b40848a51aa44f87"
      },
      "downloads": 0,
      "filename": "marathon_acme-0.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d13ca86ab6329b419ca20ffe5fc3f1f9",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 51770,
      "upload_time": "2017-06-12T12:29:00",
      "url": "https://files.pythonhosted.org/packages/6a/1f/3ff748f1b4fe3f42d59a8ab9fab7bede1e5c6df2c140b5d9d28922718eea/marathon_acme-0.1.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "0bd4aeb81084fa607869ef2dce76cab1",
        "sha256": "00fa5dfbd223bfccc09c739677296b258c44516e2b3e2d56ff5d2f99acd5551f"
      },
      "downloads": 0,
      "filename": "marathon-acme-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0bd4aeb81084fa607869ef2dce76cab1",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 42718,
      "upload_time": "2017-06-12T12:29:02",
      "url": "https://files.pythonhosted.org/packages/58/90/02701ef62efeeee66f1d0fce2f0c117a3d65654729752062fd6adb1c54af/marathon-acme-0.1.1.tar.gz"
    }
  ]
}