{
  "info": {
    "author": "Bernhard C. Thiel",
    "author_email": "thiel@tbi.univie.ac.at",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "Self-logging exceptions\n=======================\n\n* `Source on GitHub <https://github.com/bernhard10/logging_exceptions>`_\n\nInstallation\n------------\n\n\nUse setup.py :\n\n.. code-block:: bash\n\n    python setup.py install\n\nWarning\n-------\n\nThis module modifies `sys.excepthook` when it is imported!\n\nUsage\n-----\n\nSelf-logging exceptions\n~~~~~~~~~~~~~~~~~~~~~~~\n\nAttach a log message to an exception:\n\n.. code-block:: python\n\n    import logging\n    import logging_exceptions as exlog\n\n    e = ValueError(\"Wrong value\")\n    logger = logging.getLogger(__name__)\n    with exlog.log_to_exception(logger, e):\n        logger.critical(\"This is a %s log mressage\", \"long\")\n    raise e # The exception can also be raised inside the with statement\n\n\nIf the error is not caught, the log message will be displayed upon program\ntermination.\n\nCatch the error and display the log message at a costum log-level:\n\n.. code-block:: python\n\n    import logging_exceptions as exlog\n    import logging\n    try:\n        e = ValueError(\"Wrong value\")\n        logger = logging.getLogger(__name__)\n        with exlog.log_to_exception(logger, e):\n            logger.critical(\"This is a %s log mressage\", \"long\")\n            raise e\n    except ValueError as err:\n        exlog.log(err, level=logging.DEBUG)\n\n\nCommandline convenience functions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following convenience functions are not directly related to exceptions,\nbut useful if you use argparse.\n\nAdd the '--verbose', '--debug' and '--quiet' options to an\nargparse.Argumentparser instance.\n\n.. code-block:: python\n\n    import argparse\n    import logging_exceptions as exlog\n\n    parser=argparse.ArgumentParser(\"Some help text\")\n    exlog.update_parser(parser)\n    args = parser.parse_args()\n\n    logging.basicConfig()\n    # The following call updates the log levels of the root logger\n    # and potential some other loggers.\n    exlog.config_from_args(args)\n\nNow the script can be used from the commandline like this:\n\n.. code-block:: bash\n\n    # Set the log-level for the loggers with the names `path.to.module1`\n    # and `path.to.module2` to DEBUG.\n    python script.py --debug path.to.module1,path.to.module2\n\nExamples\n--------\n\nSee the file 'logging_exceptions_examples.py'\n\nComparison to logging.handlers.MemoryHandler\n--------------------------------------------\n\nThe logging.handlers module contains a handler for a similar purpose: The MemoryHandler.\nIt buffers log messages and only emits them, if a log record of severity error or above is encountered.\nI will quickly explain the differences between MemoryHandler and my module:\n\nMemoryHandler is great if you know that an event of severity ERROR may occur \nin the future (typically in the same function) and you want to prepare for \nthis potential exception. Typically, you know the scope for which the exceptions\nhave to be buffered and you know when the buffered exceptions are no longer needed and can be discarded.\n\nWhile for MemoryHandler the error condition is rather unspecific, the scope in \nwhich we have to decide between discarding and emitting the log messages is well\nknown.\n\nThe `log_to_exception` decorator, on the other hand, is useful if the exception\nis well specified (it is already created/ caught), but the the scope in which\nthe exception may or may not be caught is unspecified. Examples would be \nlibrary functions that raise an error.\n\nA typical example would be the following:\n\n.. code-block:: python\n\n    import logging\n    from logging_exceptions import log_to_exception\n\n    # Whoever calls public_function may want to catch the ValueError and hide\n    # the log messages or change their level to logging.DEBUG\n    def public_function():\n        logger = logging.getLogger(__name__)\n        a = some_complex_calculation(12)\n        try:\n            some_function(a)\n        except ValueError as e:\n            with log_to_exception(logger, e):\n                log.error(\"While calling `some_function` with %s, \"\n                          \"which is result of `some_complex_calculation`(%d),\"\n                          \" an error occurred\", a, 12)\n            raise\n\n\nCompatibility\n-------------\n\nCompatible with python 2.7 and python 3\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Bernhard10/logging_exceptions",
    "keywords": "logging exceptions",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logging-exceptions",
    "platform": "",
    "project_url": "https://pypi.org/project/logging-exceptions/",
    "release_url": "https://pypi.org/project/logging-exceptions/0.1.5/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Self-logging exceptions: Attach log messages to exceptions and output them conditionally.",
    "version": "0.1.5"
  },
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8786cbde11ce60a634e6a1760b8768f8",
          "sha256": "4254b82b5ee13e8dc12caeb9eea9391f321b98daf6650911cd52ed8b575fa420"
        },
        "downloads": 0,
        "filename": "logging_exceptions-0.1.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8786cbde11ce60a634e6a1760b8768f8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 7857,
        "upload_time": "2017-06-19T14:18:24",
        "url": "https://files.pythonhosted.org/packages/fd/db/f67ea893b76ce3508f61eb4c456c7bc77f94a7cdc197d5ee53f5f4df9499/logging_exceptions-0.1.4-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "7eb5ac02c4bbcc6e9fe0aba1b2348120",
          "sha256": "352b8beecdf4358ea5f2ee3dc6dfdf99a24a7a366d84f0d8812ebcd9fa3d1262"
        },
        "downloads": 0,
        "filename": "logging_exceptions-0.1.4.tar.gz",
        "has_sig": true,
        "md5_digest": "7eb5ac02c4bbcc6e9fe0aba1b2348120",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5294,
        "upload_time": "2017-06-19T14:18:25",
        "url": "https://files.pythonhosted.org/packages/4b/2a/1de1c7bd87126ffddaf01221650521ffd0aef5c39e5e1ae08126f0a4710b/logging_exceptions-0.1.4.tar.gz"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "020cb8a4c23bbb8a9704837a3bb9de0d",
          "sha256": "6be9512f92ded4911e30ef80e5e1db51a1dabc8196bd351334bd24ff2977a382"
        },
        "downloads": 0,
        "filename": "logging_exceptions-0.1.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "020cb8a4c23bbb8a9704837a3bb9de0d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 7893,
        "upload_time": "2017-07-26T22:33:24",
        "url": "https://files.pythonhosted.org/packages/b2/1a/b958c17050acc6116b3b030cf0ef06cad7a15a3b59214204d33e5e06a48d/logging_exceptions-0.1.5-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0bac6225aa560b95997be13a467aece4",
          "sha256": "83c2d673710e7fbbc13fc3ba2616bf70dda69494d6fe90b3c52ea7dfffe292ae"
        },
        "downloads": 0,
        "filename": "logging_exceptions-0.1.5.tar.gz",
        "has_sig": true,
        "md5_digest": "0bac6225aa560b95997be13a467aece4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5332,
        "upload_time": "2017-07-26T22:33:27",
        "url": "https://files.pythonhosted.org/packages/91/2a/f388959962f606657d4be1eae0232919693692d48e12ed3bb00d0b947f87/logging_exceptions-0.1.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "020cb8a4c23bbb8a9704837a3bb9de0d",
        "sha256": "6be9512f92ded4911e30ef80e5e1db51a1dabc8196bd351334bd24ff2977a382"
      },
      "downloads": 0,
      "filename": "logging_exceptions-0.1.5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "020cb8a4c23bbb8a9704837a3bb9de0d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 7893,
      "upload_time": "2017-07-26T22:33:24",
      "url": "https://files.pythonhosted.org/packages/b2/1a/b958c17050acc6116b3b030cf0ef06cad7a15a3b59214204d33e5e06a48d/logging_exceptions-0.1.5-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "0bac6225aa560b95997be13a467aece4",
        "sha256": "83c2d673710e7fbbc13fc3ba2616bf70dda69494d6fe90b3c52ea7dfffe292ae"
      },
      "downloads": 0,
      "filename": "logging_exceptions-0.1.5.tar.gz",
      "has_sig": true,
      "md5_digest": "0bac6225aa560b95997be13a467aece4",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5332,
      "upload_time": "2017-07-26T22:33:27",
      "url": "https://files.pythonhosted.org/packages/91/2a/f388959962f606657d4be1eae0232919693692d48e12ed3bb00d0b947f87/logging_exceptions-0.1.5.tar.gz"
    }
  ]
}