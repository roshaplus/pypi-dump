{
  "info": {
    "author": "\u0141ukasz Langa",
    "author_email": "lukasz@langa.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Quality Assurance"
    ],
    "description": "retype\n======\n\n|Build Status|\n\nRe-apply type annotations from .pyi stubs to your codebase.\n\nUsage\n-----\n\n::\n\n    retype [OPTIONS] [SRC]...\n\n    Options:\n      -p, --pyi-dir DIRECTORY     Where to find .pyi stubs.  [default: types]\n      -t, --target-dir DIRECTORY  Where to write annotated sources.  [default: typed-src]\n      -q, --quiet                 Don't emit warnings, just errors.\n      --hg                        Post-process source files to preserve\n                                  implicit byte literals.\n      --traceback                 Show a Python traceback on error\n      --version                   Show the version and exit.\n      --help                      Show this message and exit.\n\nWhen you run ``retype``, it goes through all files you passed as SRC,\nfinds the corresponding .pyi files in the ``types/`` directory, and\nre-applies typing annotations from .pyi to the sources, using the Python\n3 function and variable annotation syntax. The resulting combined\nsources are saved in ``typed-src/``.\n\nYou can also pass directories as sources, in which case ``retype`` will\nlook for .py files in them recursively.\n\nIt's smart enough to do the following:\n\n-  reapply typing imports\n-  reapply function argument annotations\n-  reapply function return value annotations\n-  reapply method argument and return value annotations\n-  reapply function-level variable annotations\n-  reapply module-level name annotations\n-  reapply module-level type aliases\n-  reapply class-level field annotations\n-  reapply instance-level field annotations\n-  validate existing source annotations against the .pyi file\n-  validate source function signatures against the .pyi file\n-  read function signature type comments in .pyi files\n-  read variable type comments in .pyi files\n-  consider existing source type comments as annotations\n-  remove duplicate type comments from source when annotations are\n   applied\n-  normalize remaining type comments in the source to annotations; this\n   is done even if the corresponding .pyi file is missing\n\nList of things to be done\n-------------------------\n\n-  [ ] add a --backward option to output type comments instead of\n   annotations\n-  [ ] handle if sys.version\\_info and sys.platform checks in stubs\n\nDesign principles\n-----------------\n\n-  it's okay for a given .pyi file to be incomplete (gradual typing,\n   baby!)\n-  it's okay for functions and classes to be out of order in .pyi files\n   and the source\n-  it's an **error** for a function or class to be missing in the source\n-  it's an **error** for a function's signature to be incompatible\n   between the .pyi file and the source\n-  it's an **error** for an annotation in the source to be incompatible\n   with the .pyi file\n\nKnown limitations\n-----------------\n\n-  Line numbers in the annotated source will no longer match original\n   source code; this is because re-application of types requires copying\n   typing imports and alias definitions from the .pyi file.\n-  While formatting of the original source will be preserved, formatting\n   of the applied annotations might differ from the formatting in .pyi\n   files.\n-  The source where type annotations get re-applied cannot use the\n   legacy ``print`` statement; that wouldn't work at runtime.\n-  Class attribute annotations in ``__init__()`` methods are moved\n   verbatim to the respective ``__init__()`` method in the\n   implementation. They are never translated into class-level attribute\n   annotations, so if that method is missing, the translation will fail.\n   Similarly, class-level attribute annotations are never applied to\n   ``__init__()`` methods.\n-  Forward references in .pyi files will only be properly resolved for\n   type aliases and type vars (by inserting them right before they're\n   used in the source). Other forms of forward references will not work\n   in the source code due to out-of-order class and function\n   definitions. Modify your .pyi files to use strings. ``retype`` will\n   not automatically discover failing forward references and stringify\n   them.\n-  Local variable annotations present in the .pyi file are transferred\n   to the body level of the given function in the source. In other\n   words, if the source defines a variable within a loop or a\n   conditional statement branch, ``retype`` will create an value-less\n   variable annotation at the beginning of the function. Use a broad\n   type and constrain types in relevant code paths using\n   ``assert isinstance()`` checks.\n-  Because of the above, existing source variable annotations and type\n   comments buried in conditionals and loops will not be deduplicated\n   (and ``mypy`` will complain that a name was already defined).\n-  An async function in the stub will match a regular function of the\n   same name in the same scope and vice versa. This is to enable\n   annotating async functions spelled with ``@asyncio.coroutine``.\n\nTests\n-----\n\nJust run:\n\n::\n\n    python setup.py test\n\nOMG, this is Python 3 only!\n---------------------------\n\nRelax, you can run *retype* **as a tool** perfectly fine under Python\n3.6+ even if you want to analyze Python\u00a02 code. This way you'll be able\nto parse all of the new syntax supported on Python 3 but also\n*effectively all* the Python 2 syntax at the same time.\n\nBy making the code exclusively Python 3.6+, I'm able to focus on the\nquality of the checks and re-use all the nice features of the new\nreleases (check out `pathlib <docs.python.org/3/library/pathlib.html>`__\nor f-strings) instead of wasting cycles on Unicode compatibility, etc.\n\nNote: to retype modules using f-strings you need to run on Python 3.6.2+\ndue to `bpo-23894 <http://bugs.python.org/issue23894>`__.\n\nLicense\n-------\n\nMIT\n\nChange Log\n----------\n\n17.6.0\n~~~~~~\n\n-  support async functions\n\n-  support --traceback for getting more information about internal\n   errors\n\n17.4.0\n~~~~~~\n\n-  first published version\n\n-  date-versioned\n\nAuthors\n-------\n\nGlued together by `\u0141ukasz Langa <mailto:lukasz@langa.pl>`__.\n\n.. |Build Status| image:: https://travis-ci.org/ambv/retype.svg?branch=master\n   :target: https://travis-ci.org/ambv/retype\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ambv/retype",
    "keywords": "mypy typing typehints type hints pep484 pyi stubs",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "retype",
    "platform": "",
    "project_url": "https://pypi.org/project/retype/",
    "release_url": "https://pypi.org/project/retype/17.6.0/",
    "requires_python": "",
    "summary": "Re-apply types from .pyi stub files to your codebase.",
    "version": "17.6.0"
  },
  "releases": {
    "17.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "80781af8d400c59bc3364e5e692bd369",
          "sha256": "99178bc4871ac2ea885c73377274421dae979128fa20b1f75142620a2a6d6692"
        },
        "downloads": 0,
        "filename": "retype-17.4.0.tar.gz",
        "has_sig": true,
        "md5_digest": "80781af8d400c59bc3364e5e692bd369",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24321,
        "upload_time": "2017-04-14T01:20:37",
        "url": "https://files.pythonhosted.org/packages/c6/a4/61878edd40dc0386fbd47ae31f4d4f83eb5ce345da9ed73703d5ece91b71/retype-17.4.0.tar.gz"
      }
    ],
    "17.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7a75c71f3f21ad572913ddd210d5c3c8",
          "sha256": "0480d5ec4c277613f03faea35c5f5db9dd03c49d19e1ab30f0d44655612a3192"
        },
        "downloads": 0,
        "filename": "retype-17.6.0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "7a75c71f3f21ad572913ddd210d5c3c8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 23346,
        "upload_time": "2017-06-01T21:17:47",
        "url": "https://files.pythonhosted.org/packages/b6/ce/ab602574fbbae73ce2f23a65398fd2316a8fca240e08c8d6ae11d7eedd08/retype-17.6.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8d25f86b10e488bc99dad9a4cada89c0",
          "sha256": "15d7369f5f22cf7507c7c9f2f396a613cf6a1a355abfe7132625055a48d16cc6"
        },
        "downloads": 0,
        "filename": "retype-17.6.0.tar.gz",
        "has_sig": true,
        "md5_digest": "8d25f86b10e488bc99dad9a4cada89c0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24685,
        "upload_time": "2017-06-01T21:17:48",
        "url": "https://files.pythonhosted.org/packages/ab/4e/a4b9f1163567c9cb295793c0ecd3b8cbe7c66eb7982a5935c1e32add2186/retype-17.6.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7a75c71f3f21ad572913ddd210d5c3c8",
        "sha256": "0480d5ec4c277613f03faea35c5f5db9dd03c49d19e1ab30f0d44655612a3192"
      },
      "downloads": 0,
      "filename": "retype-17.6.0-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "7a75c71f3f21ad572913ddd210d5c3c8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 23346,
      "upload_time": "2017-06-01T21:17:47",
      "url": "https://files.pythonhosted.org/packages/b6/ce/ab602574fbbae73ce2f23a65398fd2316a8fca240e08c8d6ae11d7eedd08/retype-17.6.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "8d25f86b10e488bc99dad9a4cada89c0",
        "sha256": "15d7369f5f22cf7507c7c9f2f396a613cf6a1a355abfe7132625055a48d16cc6"
      },
      "downloads": 0,
      "filename": "retype-17.6.0.tar.gz",
      "has_sig": true,
      "md5_digest": "8d25f86b10e488bc99dad9a4cada89c0",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 24685,
      "upload_time": "2017-06-01T21:17:48",
      "url": "https://files.pythonhosted.org/packages/ab/4e/a4b9f1163567c9cb295793c0ecd3b8cbe7c66eb7982a5935c1e32add2186/retype-17.6.0.tar.gz"
    }
  ]
}