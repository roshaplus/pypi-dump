{
  "info": {
    "author": "Nico Schl\u00f6mer",
    "author_email": "nico.schloemer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "colorio\n=======\n\nTools for color models.\n\n|CircleCI| |codecov| |awesome| |PyPi Version| |GitHub stars|\n\nAll methods in colorio are fully vectorized.\n\nColor spaces\n~~~~~~~~~~~~\n\nAll color spaces implement the two methods\n\n.. code:: python\n\n    vals = colorspace.from_xyz100(xyz)\n    xyz = colorspace.to_xyz100(vals)\n\nfor conversion from and to XYZ100. Adding new color maps is as easy as\nthat.\n\nThe images below all show the SRGB gamut in the respective color space.\n\nSRGB\n^^^^\n\n.. figure:: https://nschloe.github.io/colorio/srgb.png\n   :alt: \n   :width: 40.0%\n\nLinear SRGB space.\n\nThis class has the two additional methods\n\n::\n\n    from_srgb1()\n    to_srgb1()\n\nfor conversion from and to standard RGB.\n\nCIE XYZ\n^^^^^^^\n\n.. figure:: https://nschloe.github.io/colorio/xyz.png\n   :alt: \n   :width: 40.0%\n\n.. code:: python\n\n    import colorio\n    import numpy\n\n    colorspace = colorio.XYZ()\n    xyz100 = numpy.random.rand(3)\n    vals = colorspace.from_xyz100(xyz100)\n    xyz100 = colorspace.to_xyz100(vals)\n\nCIE XYY\n^^^^^^^\n\n.. figure:: https://nschloe.github.io/colorio/xyy.png\n   :alt: \n   :width: 40.0%\n\n.. code:: python\n\n    import colorio\n    import numpy\n\n    colorspace = colorio.XYY()\n    xyz100 = numpy.random.rand(3)\n    vals = colorspace.from_xyz100(xyz100)\n    xyz100 = colorspace.to_xyz100(vals)\n\nCIELAB\n^^^^^^\n\n.. figure:: https://nschloe.github.io/colorio/cielab.png\n   :alt: \n   :width: 40.0%\n\n.. code:: python\n\n    import colorio\n    import numpy\n\n    colorspace = colorio.CIELAB()\n    xyz100 = numpy.random.rand(3)\n    vals = colorspace.from_xyz100(xyz100)\n    xyz100 = colorspace.to_xyz100(vals)\n\nCIELUV\n^^^^^^\n\n.. figure:: https://nschloe.github.io/colorio/cieluv.png\n   :alt: \n   :width: 40.0%\n\n.. code:: python\n\n    import colorio\n    import numpy\n\n    colorspace = colorio.CIELUV()\n    xyz100 = numpy.random.rand(3)\n    vals = colorspace.from_xyz100(xyz100)\n    xyz100 = colorspace.to_xyz100(vals)\n\nCIECAM / CAM02-UCS\n^^^^^^^^^^^^^^^^^^\n\n.. figure:: https://nschloe.github.io/colorio/cam02ucs.png\n   :alt: \n   :width: 40.0%\n\n.. code:: python\n\n    import colorio\n    import numpy\n\n    L_A = 64 / numpy.pi / 5\n    ciecam02 = colorio.CIECAM02(0.69, 20, L_A)\n\n    xyz100 = numpy.random.rand(3)\n    J, C, H, h, M, s, Q = ciecam02.from_xyz100(xyz100)\n    xyz100 = ciecam02.to_xyz100(numpy.array([J, C, H]), 'JCH')\n\n    cam02 = colorio.CAM02('UCS', 0.69, 20, L_A)\n    vals = cam02.from_xyz100(xyz100)\n    xyz100 = cam02.to_xyz100(vals)\n\nThe implementation contains a few improvements over the CIECAM02\nspecification.\n\nCAM16 / CAM16-UCS\n^^^^^^^^^^^^^^^^^\n\n.. figure:: https://nschloe.github.io/colorio/cam16ucs.png\n   :alt: \n   :width: 40.0%\n\nFrom the article `Comprehensive color solutions: CAM16, CAT16, and\nCAM16-UCS <https://doi.org/10.1002/col.22131>`__ by Li et al.\n\n.. code:: python\n\n    import colorio\n    import numpy\n\n    L_A = 64 / numpy.pi / 5\n    cs = colorio.CAM16(0.69, 20, L_A)\n\n    xyz100 = numpy.random.rand(3)\n    J, C, H, h, M, s, Q = cs.from_xyz100(xyz100)\n    xyz100 = ciecam02.to_xyz100(numpy.array([J, C, H]), 'JCH')\n\n    cs = colorio.CAM16UCS(0.69, 20, L_A)\n    vals = cs.from_xyz100(xyz100)\n    xyz100 = cs.to_xyz100(vals)\n\nThe implementation contains a few improvements over the CAM16\nspecification.\n\nJzazbz\n^^^^^^\n\n.. figure:: https://nschloe.github.io/colorio/jzazbz.png\n   :alt: \n   :width: 40.0%\n\nFrom the article `Perceptually uniform color space for image signals\nincluding high dynamic range and wide\ngamut <https://doi.org/10.1364/OE.25.015131>`__ by Safdar et al.\n\n.. code:: python\n\n    import colorio\n    import numpy\n\n    colorspace = colorio.JzAzBz()\n    xyz100 = numpy.random.rand(3)\n    vals = colorspace.from_xyz100(xyz100)\n    xyz100 = colorspace.to_xyz100(vals)\n\nOther tools\n~~~~~~~~~~~\n\n-  To create the above gamut plots, write the corresponding mesh out to\n   a file\n   with\\ `````python   colorio.show_srgb_gamut(colorspace, 'srgb.vtu', n=20)   ```   and open it with any program that knows how to handle VTU (e.g.,   [ParaView](https://www.paraview.org/)). The``\\ srgb\\`\n   data set is defined in all points of the mesh.\n\n-  Color differences in any space can be computed with\n   ``colorio.delta(a, b)``.\n\nInstallation\n~~~~~~~~~~~~\n\ncolorio is `available from the Python Package\nIndex <https://pypi.python.org/pypi/colorio/>`__, so with\n\n::\n\n    pip install -U colorio\n\nyou can install/upgrade.\n\nTesting\n~~~~~~~\n\nTo run the tests, simply check out this repository and run\n\n::\n\n    pytest\n\nDistribution\n~~~~~~~~~~~~\n\nTo create a new release\n\n1. bump the ``__version__`` number,\n\n2. publish to PyPi and GitHub:\n\n   ::\n\n       $ make publish\n\nLicense\n~~~~~~~\n\ncolorio is published under the `MIT\nlicense <https://en.wikipedia.org/wiki/MIT_License>`__.\n\n.. |CircleCI| image:: https://img.shields.io/circleci/project/github/nschloe/colorio/master.svg\n   :target: https://circleci.com/gh/nschloe/colorio/tree/master\n.. |codecov| image:: https://img.shields.io/codecov/c/github/nschloe/colorio.svg\n   :target: https://codecov.io/gh/nschloe/colorio\n.. |awesome| image:: https://img.shields.io/badge/awesome-yes-brightgreen.svg\n   :target: https://img.shields.io/badge/awesome-yes-brightgreen.svg\n.. |PyPi Version| image:: https://img.shields.io/pypi/v/colorio.svg\n   :target: https://pypi.python.org/pypi/colorio\n.. |GitHub stars| image:: https://img.shields.io/github/stars/nschloe/colorio.svg?style=social&label=Stars\n   :target: https://github.com/nschloe/colorio\n\n\n",
    "docs_url": null,
    "download_url": "https://pypi.python.org/pypi/colorio",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/nschloe/colorio",
    "keywords": "",
    "license": "License :: OSI Approved :: MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "colorio",
    "platform": "",
    "project_url": "https://pypi.org/project/colorio/",
    "release_url": "https://pypi.org/project/colorio/0.0.3/",
    "requires_dist": [
      "numpy",
      "meshzoo",
      "meshio",
      "matplotlib"
    ],
    "requires_python": "",
    "summary": "tools for color models",
    "version": "0.0.3"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "319e0b688faa5f9327833bf5bf91f977",
          "sha256": "2b2b932511c73bb62ee89b9d1518f6e57c66da247958403ca0e66f7d294b64b5"
        },
        "downloads": -1,
        "filename": "colorio-0.0.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "319e0b688faa5f9327833bf5bf91f977",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 24563,
        "upload_time": "2018-01-20T12:18:37",
        "url": "https://files.pythonhosted.org/packages/86/60/793d32b0ad392778c4272a7bcbdd8e3d99c7b5154e0fbd50dfeb6b5fd3ba/colorio-0.0.1-py2.py3-none-any.whl"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b48a72485197bd4b95fc5fa2530ee602",
          "sha256": "cfa1d18980cf0ad49a39cc74012d0b3410818fcea3a7e9466e8debac15625ed9"
        },
        "downloads": -1,
        "filename": "colorio-0.0.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "b48a72485197bd4b95fc5fa2530ee602",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 38054,
        "upload_time": "2018-01-29T20:24:17",
        "url": "https://files.pythonhosted.org/packages/0c/23/b74b3875db8dc9b92176f998a2b9be1f911e213b68fd88336685859af09e/colorio-0.0.2-py2.py3-none-any.whl"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bd9b1d9856a18b93e776123aaf43218f",
          "sha256": "8a78a948fc39f8927451c0cbab71cb6133a5aaebb5b123d2c400fc60dd393e14"
        },
        "downloads": -1,
        "filename": "colorio-0.0.3-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "bd9b1d9856a18b93e776123aaf43218f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 36787,
        "upload_time": "2018-02-05T17:57:30",
        "url": "https://files.pythonhosted.org/packages/f2/82/2f7196bf146d04d7c00ae52c2ee914ed74eb9f0e27bbfc7fd14f2a219947/colorio-0.0.3-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "bd9b1d9856a18b93e776123aaf43218f",
        "sha256": "8a78a948fc39f8927451c0cbab71cb6133a5aaebb5b123d2c400fc60dd393e14"
      },
      "downloads": -1,
      "filename": "colorio-0.0.3-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "bd9b1d9856a18b93e776123aaf43218f",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 36787,
      "upload_time": "2018-02-05T17:57:30",
      "url": "https://files.pythonhosted.org/packages/f2/82/2f7196bf146d04d7c00ae52c2ee914ed74eb9f0e27bbfc7fd14f2a219947/colorio-0.0.3-py2.py3-none-any.whl"
    }
  ]
}