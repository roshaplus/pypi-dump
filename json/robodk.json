{
  "info": {
    "author": "RoboDK Inc.",
    "author_email": "info@robodk.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Robot Framework",
      "Framework :: Robot Framework :: Library",
      "Framework :: Robot Framework :: Tool",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Manufacturing",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: OS Independent",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C#",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Visual Basic",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "RoboDK\n======\n\nThe RoboDK package implements the RoboDK API for Python. \nThe package allows creating simulations for industrial robots, specific mechanisms and generating vendor-specific programs for robots.\nWhereas RoboDK's graphical user interface can be used to create programs, it is possible to extend the robot controller limitations by using a universal programming language such as Python.\n\nWith the RoboDK API for Python it is possible to simulate and program any industrial robot using Python programming language. \nThis avoids using vendor-specific programming languages.\n\nThe package contains the following 2 modules:\n * The `robolink module <https://robodk.com/doc/en/PythonAPI/robolink.html>`_ is the link between RoboDK and Python. Any item from the RoboDK item tree can be retrieved. Items are represented by the object Item. An item can be a robot, a reference frame, a tool, an object or a specific project.\n * The `robodk module <https://robodk.com/doc/en/PythonAPI/robodk.html>`_ is a robotics toolbox for Python, inspired from Peter Corke's Robotics Toolbox: http://petercorke.com/Robotics_Toolbox.html.\n\nThe following page provides an overview of the RoboDK API for Python:\nhttps://robodk.com/offline-programming\n\nRoboDK can be used for a wide range of applications, such as 3D printing, robot machining, synchronizing multiple robots, pick and place...\n * Examples: https://robodk.com/examples\n * Blog: https://robodk.com/blog\n\nHow to install\n==============\n\nType::\n\n  pip install robodk\n\n\nRequirements\n============\n\nRoboDK must be installed:\n * RoboDK Simulation Software: https://robodk.com/download\n\nThe Python API can be used with a free RoboDK license.\n\n\nExample\n=======\n\nThe following script shows an example that uses the RoboDK package for robot simulation and offline programming::\n\n  from robolink import *    # RoboDK's API\n  from robodk import *      # Math toolbox for robots\n\n  # Start the RoboDK API:\n  RDK = Robolink()\n\n  # Get the robot item by name:\n  robot = RDK.Item('Fanuc LR Mate 200iD', ITEM_TYPE_ROBOT)\n\n  # Get the reference target by name:\n  target = RDK.Item('Target 1')\n  target_pose = target.Pose()\n  xyz_ref = target_pose.Pos()\n\n  # Move the robot to the reference point:\n  robot.MoveJ(target)\n\n  # Draw a hexagon around the reference target:\n  for i in range(7):\n      ang = i*2*pi/6 #ang = 0, 60, 120, ..., 360\n\n      # Calculate the new position around the reference:\n      x = xyz_ref[0] + R*cos(ang) # new X coordinate\n      y = xyz_ref[1] + R*sin(ang) # new Y coordinate\n      z = xyz_ref[2]              # new Z coordinate    \n      target_pos.setPos([x,y,z])\n\n      # Move to the new target:\n      robot.MoveL(target_pos)\n\n  # Trigger a program call at the end of the movement\n  robot.RunCode('Program_Done')\n\n  # Move back to the reference target:\n  robot.MoveL(target)\n\nThe same script used for simulation can be used for offline programming, which means that the appropriate program can be generated for the robot being used. RoboDK supports a large number of robot controllers and it is easy to include compatibility for new robot controllers using Post Processors.\n\nFor more information about robot post processors:\n * https://robodk.com/help#PostProcessor\n * https://robodk.com/doc/en/Post-Processors.html\n * https://robodk.com/doc/en/PythonAPI/postprocessor.html\n\nFor more Examples:\n * https://robodk.com/doc/en/PythonAPI/examples.html\n\n\nDocumentation\n=============\n\n * `RoboDK package for Python <https://robodk.com/doc/en/PythonAPI/index.html>`_\n * `Introduction to RoboDK for robot simulation and offline programming <https://robodk.com/offline-programming>`_\n * `RoboDK API documentation <https://robodk.com/doc/en/RoboDK-API.html#PythonAPI>`_\n\n\nSupported robots\n================\n\nThe following list includes the robot controllers supported by RoboDK:\n * ABB RAPID IRC5: for ABB IRC5 robot controllers\n * ABB RAPID S4C: for ABB S4C robot controllers\n * Adept Vplus: for Adept V+ programming language\n * Allen Bradley Logix5000: for Allen Bradley Logix5000 PCL\n * Comau C5G: for Comau C5G robot controllers.\n * Denso PAC: for Denso RC7 (and older) robot controllers (PAC programming language)\n * Denso RC8: for Denso RC8 (and newer) robot controllers (PacScript programming language)\n * Dobot: for educational Dobot robots\n * Fanuc R30iA: for Fanuc R30iA and R30iB robot controllers\n * Fanuc R30iA Arc: for Fanuc Arc welding\n * Fanuc RJ3: for Fanuc RJ3 robot controllers\n * GCode BnR: for B&R robot controllers\n * GSK: for GSK robots\n * HIWIN HRSS: for HIWIN robots\n * KAIRO: for Keba Kairo robot controllers\n * KUKA IIWA: for KUKA IIWA sunrise programming in Java\n * KUKA KRC2: for KUKA KRC2 robot controllers\n * KUKA KRC2 CamRob: for KUKA CamRob milling option\n * KUKA KRC2 DAT: for KUKA KRC2 robot controllers including DAT data files\n * KUKA KRC4: for KUKA KRC4 robot controllers\n * KUKA KRC4 Config: for KUKA KRC4 robot controllers with configuration data in each line\n * KUKA KRC4 DAT: for KUKA KRC4 robot controllers including DAT data files\n * Kawasaki: for Kawasaki AS robot controllers\n * Mecademic: for Mecademic Meca500 robot\n * Mitsubishi: for Mitsubishi robot controllers\n * Nachi AX FD: for Nachi AX and FD robot controllers\n * Daihen OTC: for Daihen OTC robot controllers\n * Precise: for Precise Scara robots\n * Siemens Sinumerik: for Siemens Sinumerik ROBX robot controller\n * Staubli VAL3: for Staubli VAL3 robot programs (CS8 controllers and later)\n * Staubli VAL3 InlineMove: to generate Staubli VAL3 programs with inline movement data\n * Staubli S6: for Staubli S6 robot controllers\n * Toshiba: for Toshiba robots\n * Universal Robots: for UR robots, generates linear movements as pose targets\n * Universal Robots RobotiQ: for UR robots including support for RobotiQ gripper\n * Universal Robots joints: for UR robots, generates linear movements as joint targets\n * Yamaha: for Yamaha robots\n\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://robodk.com/doc/en/PythonAPI/index.html",
    "keywords": "industrial robot,simulation,offline programming,online programming,3D simulator,post processors",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "robodk",
    "platform": "",
    "project_url": "https://pypi.org/project/robodk/",
    "release_url": "https://pypi.org/project/robodk/3.3.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "RoboDK tools for simulating and programming industrial robots and the API for RoboDK software",
    "version": "3.3.0"
  },
  "releases": {
    "3.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "540eb10cbfe853f69474c5e1322dd9c5",
          "sha256": "639640086c7e0fefbaf5d64e1a1a1d16140d2a208c97f747d34e44d2e24ae92e"
        },
        "downloads": 0,
        "filename": "robodk-3.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "540eb10cbfe853f69474c5e1322dd9c5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 62836,
        "upload_time": "2017-09-28T19:26:52",
        "url": "https://files.pythonhosted.org/packages/87/11/a82c828977a9c85b214f02765a060413b97d4e235de35246d7e61bc2876b/robodk-3.3.0-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "540eb10cbfe853f69474c5e1322dd9c5",
        "sha256": "639640086c7e0fefbaf5d64e1a1a1d16140d2a208c97f747d34e44d2e24ae92e"
      },
      "downloads": 0,
      "filename": "robodk-3.3.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "540eb10cbfe853f69474c5e1322dd9c5",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 62836,
      "upload_time": "2017-09-28T19:26:52",
      "url": "https://files.pythonhosted.org/packages/87/11/a82c828977a9c85b214f02765a060413b97d4e235de35246d7e61bc2876b/robodk-3.3.0-py2.py3-none-any.whl"
    }
  ]
}