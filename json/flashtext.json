{
  "info": {
    "author": "Vikash Singh",
    "author_email": "vikash.duliajan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "This code is not ready yet. \n=============\nPlease use https://github.com/vi3k6i5/synonym-extractor till I finish this.\n\nThis code is successor to https://github.com/vi3k6i5/synonym-extractor.\n\nflashtext\n==============\n\nFlash Text is a python library that is loosely based on `Aho-Corasick algorithm\n<https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm>`_.\n\nThe idea is that say we have a corpus of terms/keywords. We want to extract any of the term from the corpus present in a sentence by making on pass on the sentence.\n\nBasically say I have a vocabulary of 10K words and I want to get all the words from that set present in a sentence. A simple regex match will take a lot of time to loop over the 10K words.\n\nHence we use a simpler yet much faster algorithm to get the desired result.\n\nInstallation\n-------\n::\n\n    pip install flashtext\n\nUsage\n------\n::\n    \n    # import module\n    from synonym.extractor import SynonymExtractor\n\n    # Create an object of SynonymExtractor\n    synonym_extractor = SynonymExtractor()\n\n    # add synonyms\n    synonym_names = ['NY', 'new-york', 'SF']\n    clean_names = ['new york', 'new york', 'san francisco']\n\n    for synonym_name, clean_name in zip(synonym_names, clean_names):\n        synonym_extractor.add_to_synonym(synonym_name, clean_name)\n\n    synonyms_found = synonym_extractor.get_synonyms_from_sentence('I love SF and NY. new-york is the best.')\n\n    synonyms_found\n    >> ['san francisco', 'new york', 'new york']\n\n\nAlgorithm\n----------\n\nsynonym-extractor is based on `Aho-Corasick algorithm\n<https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_algorithm>`_.\n\nDocumentation\n----------\n\nDocumentation can be found at `Read the Docs\n<http://synonym-extractor.readthedocs.org>`_.\n\n\nWhy\n------\n\n::\n\nSay you have a corpus where similar words appear frequently.\n\neg: Last weekened I was in NY.\n    I am traveling to new york next weekend.\n\nIf you train a word2vec model on this or do any sort of NLP it will treat NY and new york as 2 different words. \n\nInstead if you create a synonym dictionary like:\n\neg: NY=>new york\n    new york=>new york\n\nThen you can extract NY and new york as the same text.\n\nTo do the same with regex it will take a lot of time:\n\n============  ========== = =========  ============\nDocs count    # Synonyms : Regex      synonym-extractor\n============  ========== = =========  ============\n1.5 million   2K         : 16 hours   NA\n2.5 million   10K        : 15 days    15 mins\n============  ========== = =========  ============\n\nThe idea for this library came from the following `StackOverflow question\n<https://stackoverflow.com/questions/44178449/regex-replace-is-taking-time-for-millions-of-documents-how-to-make-it-faster>`_.\n\n\nLicense\n-------\n\nThe project is licensed under the MIT license.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/vi3k6i5/flashtext",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flashtext",
    "platform": "any",
    "project_url": "https://pypi.org/project/flashtext/",
    "release_url": "https://pypi.org/project/flashtext/1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Extract/Replaces keywords in sentences.",
    "version": "1.0"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4d2242178df41241534ad49c69ddd7a3",
          "sha256": "6d8560df1634cc4cd3d5263e0892197775343991f9f8ed85a604dc456e7dddeb"
        },
        "downloads": 0,
        "filename": "flashtext-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4d2242178df41241534ad49c69ddd7a3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5881,
        "upload_time": "2017-08-16T18:55:33",
        "url": "https://files.pythonhosted.org/packages/39/b6/bfaca1baff932792cb402b6c63cb85d778ed385c47ca2490c4239e4a737e/flashtext-1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4d2242178df41241534ad49c69ddd7a3",
        "sha256": "6d8560df1634cc4cd3d5263e0892197775343991f9f8ed85a604dc456e7dddeb"
      },
      "downloads": 0,
      "filename": "flashtext-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4d2242178df41241534ad49c69ddd7a3",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5881,
      "upload_time": "2017-08-16T18:55:33",
      "url": "https://files.pythonhosted.org/packages/39/b6/bfaca1baff932792cb402b6c63cb85d778ed385c47ca2490c4239e4a737e/flashtext-1.0.tar.gz"
    }
  ]
}