{
  "info": {
    "author": "Adrian Turjak",
    "author_email": "adriant@catalyst.net.nz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Environment :: OpenStack",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "OpenStack Interpreter\n=====================\n\nThis is a simple tool to facilitate better python interpreter use of the\nvarious OpenStack python clients and help promote better literacy for\nall those tools. The hope is that this tool allows developers to more easily\nuse and test the various libraries, and also to offer operators a useful tool\nfor one off operations where writing a script is not needed and where the\nOpenStackClient is not flexible enough without resorting to complex bash.\n\n\nUsing the OpenStack Interpreter\n-------------------------------\n\nFirst install the plugin:\n\n::\n\n    pip install openstack-interpreter\n\nThis will now be installed as a plugin on the OpenStackClient or install the\nOpenStackClient as well.\n\nYou will need to either have some environment variables setup, or a\n`clouds.yaml` file so that the client can authenticate and setup your\nsession.\n\nTo run the interpreter:\n\n::\n\n    $ openstack interpreter\n\nThis will drop you into an ipython interpreter. You will be setup with a\nsession based on your auth credentials.\n\nBecause this is using ipython as the interpreter you can make use of the\nautocomplete and help functionality. There is also history search support\nand many other features. For more details look at the ipython docs.\n\nTo get some basic help you can start with:\n\n::\n\n    In [1]: interpreter?\n\nOr if you want to get and start using the clients, this is how you can get\nacess to novaclient:\n\n::\n\n    In [2]: novaclient = interpreter.clients.compute\n\nOr if you want novaclient in a region other than your configured one:\n\n::\n\n    In [2]: novaclient = interpreter.clients.get_client(\n       ...:     'compute', region='RegionOne')\n\n\nAdditional inbuilt tools\n------------------------\n\nThis library has a few basic tools for helping you deal with the data you are\nplaying with and present it to you a little nicer. This will improve over time\nas more is added, but for now we have some output functions, basic profiling,\nand a few prompts.\n\ntools examples\n**************\n\nMaybe you want to look at some of the values on an OpenStack resource. Since\nmost of the client libraries give resources a to_dict function (NOTE: this may\nnot always be the case) you can do the following:\n\n::\n\n    In [3]: servers = novaclient.servers.list()\n\n    In [4]: server = servers[0]\n\n    In [5]: output.print_dict(server.to_dict())\n\nOr just print the object itself, since it may not have to_dict anyway:\n\n::\n\n    In [5]: output.print_object(server)\n\nAlthough some of the fields may be dicts and this harder to read, so we'd like\nto format them a little:\n\n::\n\n    In [5]: output.print_object(\n       ...:     servers[0], formatters={\n       ...:         'addresses': output.json_formatter,\n       ...:         'flavor': output.json_formatter,\n       ...:         'image': output.json_formatter,\n       ...:         'links': output.json_formatter})\n\nOr maybe you're looking at a list of resources, and you only care about certain\nfields:\n\n::\n\n    In [4]: output.print_list(servers, [\"name\", \"id\", \"status\"])\n\nYou can even format lists, although be careful as listing does not auto wrap\nproperly yet:\n\n::\n\n    In [4]: output.print_list(\n       ...:     servers, ['name', 'status', 'addresses'],\n       ...:         formatters={'addresses': output.json_formatter})\n\nOr maybe you are looking at a lot of data and want to highlight something:\n\n::\n\n    In [5]: rows = []\n\n    In [6]: for server in servers:\n       ...:     if server.status == \"ACTIVE\":\n       ...:         rows.append([\n       ...:             server.name, server.id,\n                        output.style_text(server.status, ['green', 'bold'])\n       ...:         ])\n       ...:     elif server.status == \"ERROR\":\n       ...:         rows.append([\n       ...:             server.name, server.id,\n                        output.style_text(server.status, ['red', 'bold'])\n       ...:         ])\n       ...:     else:\n       ...:         rows.append([server.name, server.id, server.status])\n\n    In [7]: output.print_list_rows(rows, [\"name\", \"id\", \"status\"])\n\nOr want to delete a ton of instances, but want ones with certain names (or\nmaybe even tags) to ask for a prompt first:\n\n::\n\n    In [3]: servers = novaclient.servers.list()\n\n    In [4]: for server in servers:\n       ...:     if \"prod\" in server.name:\n       ...:         output.print_object(server)\n       ...:         if prompt.prompt_yes_no(\n       ...:                 \"Are you sure you want to delete this?\"):\n       ...:             server.delete()\n       ...:     else:\n       ...:         server.delete()\n\nOr maybe you're just curious how long it takes to run something:\n\n::\n\n    In [3]: with timed(\"listing servers\"):\n       ...:     servers = novaclient.servers.list()\n\nUseful patterns\n---------------\n\nGet my servers (or any resource) across all regions:\n\n::\n\n    In [1]: keystone = interpreter.clients.identity\n\n    In [2]: servers = {}\n\n    In [3]: for region in keystone.regions.list():\n       ...:     servers[region.id] = interpreter.clients.get_client(\n       ...:         \"compute\", region=region.id).servers.list()\n\nDevelopment\n-----------\n\nGoing forward the plan is to add support for OpenStackSDK, and Shade (if I can\nfind a way to connect it and reuse parts of the same session).\n\nIn addition I also want to add more help functionality as is possible.\n\nAdding support for new clients is easy. If you have a client you want added,\nmake a pull request, or open an issue.\n\nI may be moving this project to OpenStack's gerrit, but in part I'd prefer not\nto as the interface for gerrit is awful.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Adrian-Turjak/openstack-interpreter",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "openstack-interpreter",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/openstack-interpreter/",
    "release_url": "https://pypi.org/project/openstack-interpreter/0.2.2/",
    "requires_python": null,
    "summary": "OpenStack Interpreter",
    "version": "0.2.2"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ca9192cf47dfff82df6c4b5b81588620",
          "sha256": "1c6c9650f5988cac3897f4dddbfb9c0792fb6d29ac597c87452a5d863e9ed5d9"
        },
        "downloads": 26,
        "filename": "openstack-interpreter-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ca9192cf47dfff82df6c4b5b81588620",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1800,
        "upload_time": "2017-03-13T23:38:27",
        "url": "https://files.pythonhosted.org/packages/1f/0d/c1b198e8c0d6b7b6e0a91b9196f57ba9eb90c80eb7c440b07293be193d19/openstack-interpreter-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4aa9555ee802da9c043841363f9d44e9",
          "sha256": "d18b69b083e9e9b1a9be9eecd99e1a172238d1d7b2e27d2cf1362c54602525a6"
        },
        "downloads": 20,
        "filename": "openstack-interpreter-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4aa9555ee802da9c043841363f9d44e9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3697,
        "upload_time": "2017-03-13T23:44:18",
        "url": "https://files.pythonhosted.org/packages/6e/e8/62226ca81f728c66f81cd3fda1f2b8f29129a0528f82cf64a8a6b3aa70ea/openstack-interpreter-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1b8bf0a1c9d6bc828f4cb41e2181a6b5",
          "sha256": "f6a6032b36d7b0dd03ca8a12763f81ba008d70c70bab5380e9ef48669fff1d03"
        },
        "downloads": 25,
        "filename": "openstack-interpreter-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1b8bf0a1c9d6bc828f4cb41e2181a6b5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3684,
        "upload_time": "2017-03-14T00:28:38",
        "url": "https://files.pythonhosted.org/packages/aa/5a/d3eb0f44c943d5c3fc969953660cfc5077bf507586419e945bea3a5e4b5d/openstack-interpreter-0.1.3.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fc5b3e9791e1218305620ef19f98ace4",
          "sha256": "3cc372e3abfcc68f540598d229aed29af055c9c3288fc1b0c2034f7bf60f5869"
        },
        "downloads": 0,
        "filename": "openstack-interpreter-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fc5b3e9791e1218305620ef19f98ace4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12871,
        "upload_time": "2017-05-01T04:21:07",
        "url": "https://files.pythonhosted.org/packages/21/25/701752cff4eced6815fec926bf056984bccb679c842164db0c0be9948b4b/openstack-interpreter-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "add545ca97ccd0208881f1e09cc04e87",
          "sha256": "8f74fe67f0c1420c3fabb7a69b8afe5391174cd9e2973aca4dbd714b359bc4ec"
        },
        "downloads": 0,
        "filename": "openstack-interpreter-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "add545ca97ccd0208881f1e09cc04e87",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12884,
        "upload_time": "2017-05-01T05:09:14",
        "url": "https://files.pythonhosted.org/packages/29/44/41456bd59238893688b161be07def90c177184be775eb7267064667978fd/openstack-interpreter-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3f06ca7a05d3bd5ede760344b456fcb2",
          "sha256": "d4b98a5a79e07fe2c7d83a1bd8e33d6e1cfabd38aaaa0041f038330439855cff"
        },
        "downloads": 0,
        "filename": "openstack-interpreter-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3f06ca7a05d3bd5ede760344b456fcb2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14716,
        "upload_time": "2017-05-03T07:25:14",
        "url": "https://files.pythonhosted.org/packages/32/9c/3325bdaa1e40c8f1b92f1e072737551ae291c07e6135e71e0dc7f3733b13/openstack-interpreter-0.2.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "3f06ca7a05d3bd5ede760344b456fcb2",
        "sha256": "d4b98a5a79e07fe2c7d83a1bd8e33d6e1cfabd38aaaa0041f038330439855cff"
      },
      "downloads": 0,
      "filename": "openstack-interpreter-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "3f06ca7a05d3bd5ede760344b456fcb2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 14716,
      "upload_time": "2017-05-03T07:25:14",
      "url": "https://files.pythonhosted.org/packages/32/9c/3325bdaa1e40c8f1b92f1e072737551ae291c07e6135e71e0dc7f3733b13/openstack-interpreter-0.2.2.tar.gz"
    }
  ]
}