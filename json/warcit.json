{
  "info": {
    "author": "Ilya Kreymer",
    "author_email": "ikreymer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "WARCIT\n======\n\n``warcit`` is a command-line tool to convert on-disk directories of web documents (HTML, images, and any related assets) into an ISO standard web archive (WARC) files.\n\nConversion to WARC file allows for improved durability in a standardized format, and allows for any web files stored on disk to be uploaded into  `Webrecorder <https://github.com/webrecorder/webrecorder>`_, or replayed locally with `Webrecorder Player <https://github.com/webrecorder/webrecorderplayer-electron/releases>`_ or  `pywb <https://github.com/ikreymer/pywb>`_\n\n(Many other tools also operate on WARC files, see: `Awesome Web Archiving -- Tools and Software <https://github.com/iipc/awesome-web-archiving#tools--software>`_)\n\nWARCIT supports converting individual files, directories with nested directory structure, ZIP file archives into WARCs.\n\n\nBasic Usage\n-----------\n\n``warcit <prefix> <dir or file> ...``\n\nSee ``warcit -h`` for a complete list of flags and options.\n\n\nFor example, the following example will download a simple web site via ``wget`` (for simplicity, this retrieves one level deep only), then use ``warcit`` to convert to ``www.iana.org.warc.gz``::\n\n   wget -l 1 -r www.iana.org/\n   warcit http://www.iana.org/ ./www.iana.org/\n\nThe WARC ``www.iana.org.warc.gz`` should now have been created!\n\n\nMime Type Detection and Overrides\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, ``warcit`` supports the the default Python ``mimetypes`` library to determine a mime type based on a file extension.\n\nHowever, it also supports using `python-magic <https://pypi.python.org/pypi/python-magic>`_ (libmagic) if available and custom mime overrides configured via the command line.\n\nThe mime detection is as follows:\n\n1) If the filename matches an override specified via ``--mime-overrides``, use that as the mime type.\n\n2) If ``mimetypes.guess_type()`` returns a valid mime type, use that as the mime type.\n\n3) If ``--use-magic`` flag is specified, use the ``magic`` api to determine mime type (``warcit`` will error if ``magic`` is not available when using this flag).\n\n4) Default to ``text/html`` if all previous attempts did not yield a mime type.\n\n\nThe ``--mime-overrides`` flag can be used to specify wildcard query (applied to the full url) and corresponding mime types as a comma-delimeted property list::\n\n  warcit '--mime-overrides=*.html=text/html; charset=\"utf-8\",image.ico=image/png' http://www.iana.org/ ./www.iana.org/\n\nWhen a url ending in ``*.html`` or ``*.ico`` is encountered, the specified mime type will be used for the ``Content-Type`` header, by passing any auto-detection.\n\n\nWARC Format\n~~~~~~~~~~~\n\nThe tool produces ISO standard WARC 1.0 files.\n\nA ``warcinfo`` record is added at the beginning of the WARC, unless the ``--no-warcinfo`` flag is specified.\n\nEach encountered file is stored as a WARC ``resource`` record.\n\nAdditionally, ``warcit`` adds ``revisit`` records for top-level directories if index files are present.\nIndex files can be specified via the ``--index-files`` flag, the default being ``--index-files=index.html,index.htm``\n\nFor example, when running:\n``warcit http://example.com/ ./path/`` and there exists a file: ``./path/subdir/index.html``, warcit will create:\n\n- a ``resource`` record for ``http://example.com/path/subdir/index.html``\n\n- a ``revisit`` record for ``http://example.com/path/subdir/`` pointing to ``http://example.com/path/subdir/index.html``\n\n\nZIP Files\n~~~~~~~~~\n\n``warcit`` also supports converting ZIP files to WARCs, including portions of zip files.\n\nFor example, if a zip file contains::\n\n  my_zip_file.zip\n  |\n  +-- www.example.com/\n  |\n  +-- another.example.com/\n  |\n  +-- some_other_data/\n\nIt is possible to specify the two paths in the zip file to be converted to a WARC separately::\n\n  warcit --name my-warc.gz http:// my_zip_file.zip/www.example.com/ my_zip_file.zip/another.example.com/\n\nThis should result in a new WARC ``my-warc.gz`` converting the specified zip file paths. The ``some_other_data`` path is not processed.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/webrecorder/warcit",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "warcit",
    "platform": "",
    "project_url": "https://pypi.org/project/warcit/",
    "release_url": "https://pypi.org/project/warcit/0.2.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Convert Directories, Files and Zip Files to Web Archives (WARC)",
    "version": "0.2.0"
  },
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "15c4eccd532d2f4465f7b2587f78e620",
          "sha256": "ec903eae4a2db1934beca8043804c503de7b45b7201f6a3e3abad318817abbc2"
        },
        "downloads": -1,
        "filename": "warcit-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "15c4eccd532d2f4465f7b2587f78e620",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 9495,
        "upload_time": "2017-12-05T05:50:52",
        "url": "https://files.pythonhosted.org/packages/84/9c/b6518e7682e8a4cc3e526782a67859b2c8cddffaefda8ddcf7aa3dc8240e/warcit-0.2.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "57b100b589b2fd8ef6ac71f82087315b",
          "sha256": "0fe89cb0f6540994cbf5ecb6bb25a6632089ea853364dc57671287daae17268b"
        },
        "downloads": -1,
        "filename": "warcit-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "57b100b589b2fd8ef6ac71f82087315b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9119,
        "upload_time": "2017-12-05T05:50:31",
        "url": "https://files.pythonhosted.org/packages/25/12/004c04543720ccc1716096142627c0d0b26c01c02a6d1f3db0064c607d29/warcit-0.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "15c4eccd532d2f4465f7b2587f78e620",
        "sha256": "ec903eae4a2db1934beca8043804c503de7b45b7201f6a3e3abad318817abbc2"
      },
      "downloads": -1,
      "filename": "warcit-0.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "15c4eccd532d2f4465f7b2587f78e620",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 9495,
      "upload_time": "2017-12-05T05:50:52",
      "url": "https://files.pythonhosted.org/packages/84/9c/b6518e7682e8a4cc3e526782a67859b2c8cddffaefda8ddcf7aa3dc8240e/warcit-0.2.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "57b100b589b2fd8ef6ac71f82087315b",
        "sha256": "0fe89cb0f6540994cbf5ecb6bb25a6632089ea853364dc57671287daae17268b"
      },
      "downloads": -1,
      "filename": "warcit-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "57b100b589b2fd8ef6ac71f82087315b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9119,
      "upload_time": "2017-12-05T05:50:31",
      "url": "https://files.pythonhosted.org/packages/25/12/004c04543720ccc1716096142627c0d0b26c01c02a6d1f3db0064c607d29/warcit-0.2.0.tar.gz"
    }
  ]
}