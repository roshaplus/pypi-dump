{
  "info": {
    "author": "Plone Foundation",
    "author_email": "plone-developers@lists.sourceforge.net",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Plone",
      "Framework :: Plone :: 4.3",
      "Framework :: Plone :: 5.0",
      "Framework :: Plone :: 5.1",
      "Framework :: Zope2",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7"
    ],
    "description": ".. image:: https://secure.travis-ci.org/plone/plone.rest.png?branch=master\n  :target: http://travis-ci.org/plone/plone.rest\n\n.. image:: https://coveralls.io/repos/plone/plone.rest/badge.png?branch=master\n  :target: https://coveralls.io/r/plone/plone.rest\n\n.. image:: https://landscape.io/github/plone/plone.rest/master/landscape.svg?style=plastic\n  :target: https://landscape.io/github/plone/plone.rest/master\n  :alt: Code Health\n\n.. image:: https://img.shields.io/pypi/v/plone.rest.svg\n    :target: https://pypi.python.org/pypi/plone.rest/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/status/plone.rest.svg\n    :target: https://pypi.python.org/pypi/plone.rest/\n    :alt: Egg Status\n\n.. image:: https://img.shields.io/pypi/l/plone.rest.svg\n    :target: https://pypi.python.org/pypi/plone.rest/\n    :alt: License\n\n\n==========\nPlone REST\n==========\n\nPurpose\n-------\n\nplone.rest allows you to use HTTP verbs such as GET, POST, PUT, DELETE, etc. in `Plone <https://www.plone.org>`_.\n\nREST stands for `Representational State Transfer <http://en.wikipedia.org/wiki/Representational_state_transfer>`_.\nIt is a software architectural principle to create loosely coupled web APIs.\n\nplone.rest provides the basic infrastructure that allows us to build RESTful endpoints in Plone.\n\nThe reason for separating this infrastructure into a separate package from the 'main' full `Plone REST API <https://github.com/plone/plone.restapi>`_ is so you can create alternative endpoints tailored to specific usecases. A number of these specific endpoints are already in active use.\n\n\nAudience\n--------\n\nplone.rest is for experienced web developers who want to build their own HTTP/REST endpoints on top of Plone.\n\nIf you want to **use** a ready-made full RESTful Plone API, you should use `plone.restapi <https://github.com/plone/plone.restapi>`_.\nThat package uses, and depends upon, this one.\n\n\nFeatures\n--------\n\n* Registering RESTful service endpoints for the following HTTP verbs:\n\n  * GET\n  * POST\n  * PUT\n  * DELETE\n  * PATCH\n  * OPTIONS\n\n* Support for Dexterity and Archetypes-based content objects\n* Content negotiation: Services can be registered for arbitrary media types (e.g. 'application/json').\n* Named services allows to register service endpoints for custom URLs\n\n\nRegistering RESTful Service Endpoints\n-------------------------------------\n\nplone.rest allows you to register HTTP verbs for Plone content with ZCML.\n\nThis is how you would register a PATCH request on Dexterity content:\n\n.. code-block:: xml\n\n  <plone:service\n    method=\"PATCH\"\n    accept=\"application/json\"\n    for=\"plone.dexterity.interfaces.IDexterityContent\"\n    factory=\".service.Patch\"\n    permission=\"cmf.ModifyPortalContent\"\n    />\n\nYou have to specify the HTTP verb (GET, POST, PUT, DELETE, HEAD, OPTIONS), the\nmedia type used for content negotiation, the interface for the content objects,\nthe factory class that actually returns the content and the permission required\nto access the service.\n\nThe factory class needs to inherit from the plone.rest 'Service' class and to implement a render method that returns the body of the response::\n\n  from plone.rest import Service\n\n  class Patch(Service):\n\n      def render(self):\n          return '{\"message\": \"PATCH: Hello World!\"}'\n\n\nContent Negotiation\n-------------------\n\nTo access the service endpoint we just created we have to send a GET request to a Dexterity object by setting the 'Accept' header to 'application/json'::\n\n  PATCH /Plone/doc1 HTTP/1.1\n  Host: localhost:8080\n  Accept: application/json\n\nThe server then will respond with '200 OK'::\n\n  HTTP/1.1 200 OK\n  Content-Type: application/json\n\n  {\n    \"message\": \"PATCH: Hello World!\"\n  }\n\nYou can try this out on the command line:\n\n.. code-block:: console\n\n    $ http --auth admin:admin PATCH localhost:8080/Plone/doc1 Accept:application/json\n\n.. note:: You have to install httpie (pip install httpie) to make this example work.\n\nHere is a list of examples for all supported HTTP verbs:\n\nGET::\n\n  $ http --auth admin:admin GET localhost:8080/Plone/doc1 Accept:application/json\n\nPOST::\n\n  $ http --auth admin:admin POST localhost:8080/Plone/doc1 Accept:application/json\n\nPUT::\n\n  $ http --auth admin:admin PUT localhost:8080/Plone/doc1 Accept:application/json\n\nDELETE::\n\n  $ http --auth admin:admin DELETE localhost:8080/Plone/doc1 Accept:application/json\n\nPATCH::\n\n  $ http --auth admin:admin PATCH localhost:8080/Plone/doc1 Accept:application/json\n\nOPTIONS::\n\n  $ http --auth admin:admin OPTIONS localhost:8080/Plone/doc1 Accept:application/json\n\n\nNamed Services\n--------------\n\nNamed services can be registered by providing a 'name' attribute in the service directive:\n\n.. code-block:: xml\n\n  <plone:service\n    method=\"GET\"\n    accept=\"application/json\"\n    for=\"Products.CMFPlone.interfaces.IPloneSiteRoot\"\n    factory=\".service.Search\"\n    name=\"search\"\n    permission=\"zope2.View\"\n    />\n\nThis registers a service endpoint accessible at the site root using the\nfollowing request::\n\n  GET /Plone/search HTTP/1.1\n  Host: localhost:8080\n  Accept: application/json\n\n\nAdditional Path Segments\n------------------------\n\nTo handle additional path segments after the service url like `/Plone/myservice/1/2`\na service has to implement `IPublishTraverse`. The following example simply\nstores all path segments in an array in `self.params`.\n\n.. code-block:: python\n\n  from plone.rest import Service\n  from zope.interface import implements\n  from zope.publisher.interfaces import IPublishTraverse\n\n  class MyService(Service):\n\n      implements(IPublishTraverse)\n\n      def __init__(self, context, request):\n          super(MyService, self).__init__(context, request)\n          self.params = []\n\n      def publishTraverse(self, request, name):\n          self.params.append(name)\n          return self\n\n      def render(self):\n          return {'service': 'named get', 'params': self.params}\n\n\nSee also the implementation of the workflow transition endpoint in\nplone.restapi for an other example.\n\n\nCORS\n----\n\nplone.rest allows you to define CORS policies for services in ZCML. The\nfollowing example defines a policy for all services.\n\n.. code-block:: xml\n\n  <plone:CORSPolicy\n    allow_origin=\"http://example.net\"\n    allow_methods=\"DELETE,GET,OPTIONS,PATCH,POST,PUT\"\n    allow_credentials=\"true\"\n    expose_headers=\"Content-Length,X-My-Header\"\n    allow_headers=\"Accept,Authorization,Content-Type,X-Custom-Header\"\n    max_age=\"3600\"\n    />\n\nCORS policies can be bound to specific interfaces of content objects and to\nspecific browser layers. This allows us to define different policies for\ndifferent content types or to override existing policies. The following example\ndefines a policy for the site root.\n\n.. code-block:: xml\n\n  <plone:CORSPolicy\n    for=\"Products.CMFPlone.interfaces.IPloneSiteRoot\"\n    layer=\"myproduct.interfaces.IMyBrowserLayer\"\n    allow_origin=\"*\"\n    allow_methods=\"GET\"\n    />\n\nThe CORSPolicy directive supports the following options:\n\nallow_origin\n  Origins that are allowed to access the resource. Either a comma separated\n  list of origins, e.g. \"http://example.net,http://mydomain.com\" or \"*\".\n\nallow_methods\n  A comma separated list of HTTP method names that are allowed by this CORS\n  policy, e.g. \"DELETE,GET,OPTIONS,PATCH,POST,PUT\". If not specified, all\n  methods for which there's a service registerd are allowed.\n\nallow_credentials\n  Indicates whether the resource supports user credentials in the request.\n\nallow_headers\n  A comma separated list of request headers allowed to be sent by the client,\n  e.g. \"X-My-Header\"\n\nexpose_headers\n  A comma separated list of response headers clients can access,\n  e.g. \"Content-Length,X-My-Header\".\n\nmax_age\n  Indicates how long the results of a preflight request can be cached.\n\nfor\n  Specifies the interface for which the CORS policy is registered. If this\n  attribute is not specified, the CORS policy applies to all objects.\n\nlayer\n  A browser layer for which this CORS policy is registered. Useful for\n  overriding existing policies or for making them available only if a specific\n  add-on has been installed.\n\n\nInstallation\n------------\n\nInstall plone.rest by adding it to your buildout::\n\n   [buildout]\n\n    ...\n\n    eggs =\n        plone.rest\n\nand then running \"bin/buildout\"\n\n\nContribute\n----------\n\n- Issue Tracker: https://github.com/plone/plone.rest/issues\n- Source Code: https://github.com/plone/plone.rest\n- Documentation: https://pypi.python.org/pypi/plone.rest\n\n\nSupport\n-------\n\nThis package is maintained by Timo Stollenwerk <tisto@plone.org> and Ramon Navarro Bosch <ramon.nb@gmail.com>.\n\nIf you are having issues, please `let us know <https://github.com/plone/plone.rest/issues>`_.\n\n\nLicense\n-------\n\nThe project is licensed under the GPLv2.\n\n\nChangelog\n=========\n\n1.0.0 (2018-01-17)\n------------------\n\n- Add support for Plone 5.1.\n  [timo]\n\n- Add Plone 4.3, 5.0 and 5.1 to list classifiers in setup.py.\n  [timo]\n\n- Set development status to production/stable in setup.py.\n  [timo]\n\n\n1.0b1 (2017-05-14)\n------------------\n\nBugfixes:\n\n- Do not render service in preflight requests when no CORS policy was defined.\n  Fixes: https://github.com/plone/plone.rest/issues/63\n  [buchi]\n\n\n1.0a7 (2016-11-21)\n------------------\n\nBugfixes:\n\n- Do not handle view namespace at all. This fixes: https://github.com/plone/plone.rest/issues/50\n  [buchi]\n\n\n1.0a6 (2016-05-22)\n------------------\n\n- Add support for CORS policies.\n  [buchi]\n\n- Remove JSON render implementation in service base class. Services\n  must provide their own render implementation.\n  [buchi]\n\n- Fallback to regular views during traversal to ensure compatibility with\n  views beeing called with a specific Accept header.\n  [buchi]\n\n\n1.0a5 (2016-02-27)\n------------------\n\n- Implement permission handling. The permission required to access a service\n  must be declared in the service directive.\n  [buchi]\n\n- Register services with the Zope configuration system. This provides better\n  conflict detection and resolution.\n  [buchi]\n\n- Improve message for 404 Not Found exceptions (don't return HTML).\n  [lgraf]\n\n- Add regression tests for service dispatching.\n  [lgraf]\n\n- Restrict traversal of REST requests to content objects. This allows us to\n  override existing views with a named service (e.g. /search).\n  [buchi]\n\n- Allow virtual hosting scenarios. This fixes #48.\n  [tomgross]\n\n\n1.0a4 (2016-02-07)\n------------------\n\n- Refactor Dexterity tests to make sure services return the correct object.\n  [timo]\n\n- Add support for browser layers. REST services can now be registered to a\n  specific browser layer using the 'layer' attribute.\n  [buchi]\n\n- Remove request method specific marker interfaces (IGET, IPOST, etc.) because\n  they're no longer required for service lookup.\n  [buchi]\n\n- Add support for content negotiation. REST services are no longer hardwired\n  to 'application/json' Accept headers. Instead the media type can be\n  configured with the service directive.\n  [buchi]\n\n- Refactor traversal of REST requests by using a traversal adapter on the site\n  root instead of a traversal adapter for each REST service. This prevents\n  REST services from being overriden by other traversal adapters.\n  [buchi]\n\n\n1.0a3 (2015-12-16)\n------------------\n\n- Release fix. 1.0a2 was a brown-bag release. This fixes https://github.com/plone/plone.rest/issues/34.\n  [timo]\n\n\n1.0a2 (2015-12-10)\n------------------\n\n- Simplify patch of DynamicType pre-traversal hook and actually make it work\n  with Archetypes.\n  [buchi]\n\n- Render errors as JSON.\n  [jone]\n\n- Add support for named services which allows registering services like\n  ``GET /Plone/search`` or ``GET /Plone/doc1/versions/1`` using a 'name' attribute.\n  [jone, lukasgraf, buchi]\n\n- Remove \"layer\" from service directive for now,\n  because it is not yet implemented properly.\n  [jone]\n\n\n1.0a1 (2015-08-01)\n------------------\n\n- Initial release.\n  [bloodbare, timo]",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://pypi.python.org/pypi/plone.rest",
    "keywords": "",
    "license": "GPL version 2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "plone.rest",
    "platform": "",
    "project_url": "https://pypi.org/project/plone.rest/",
    "release_url": "https://pypi.org/project/plone.rest/1.0.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Plone support for HTTP verbs.",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b99e251a701c8c3a3db23b71bbde869d",
          "sha256": "75c202d52a063179e6db99bd13a2780733e72e8ba3ccfe012c1095098309dd00"
        },
        "downloads": -1,
        "filename": "plone.rest-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b99e251a701c8c3a3db23b71bbde869d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 98745,
        "upload_time": "2018-01-17T14:31:51",
        "url": "https://files.pythonhosted.org/packages/90/b1/062bb8ebfe32ddc6c16e43f02212b042baa5d72f50cdedb603524b839986/plone.rest-1.0.0.tar.gz"
      }
    ],
    "1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "16008acccd10aed89194e7c9f0ab4bf9",
          "sha256": "6ae463c721595721a3fe42b3d948f47741932d350c01c153daecf49745da8966"
        },
        "downloads": -1,
        "filename": "plone.rest-1.0a1.zip",
        "has_sig": false,
        "md5_digest": "16008acccd10aed89194e7c9f0ab4bf9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18666,
        "upload_time": "2015-08-01T04:50:15",
        "url": "https://files.pythonhosted.org/packages/b9/46/46da5b8a21a6c399997e139d99f19856a9c1980407b395b0fca02adf2293/plone.rest-1.0a1.zip"
      }
    ],
    "1.0a2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c13c7cf09a680285d8905006fb2aa42a",
          "sha256": "3f8755b06853cd089384f7253662e265476575b79aeb69d8e17e96946c0150e0"
        },
        "downloads": -1,
        "filename": "plone.rest-1.0a2.zip",
        "has_sig": false,
        "md5_digest": "c13c7cf09a680285d8905006fb2aa42a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24253,
        "upload_time": "2015-12-10T20:17:32",
        "url": "https://files.pythonhosted.org/packages/99/e5/969dfdd27bede4215266b311622aa10b2e259c0e4b9e6a6781a49f1df5f4/plone.rest-1.0a2.zip"
      }
    ],
    "1.0a3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4b28269471e64ced22d8bfab975ef997",
          "sha256": "4f176dfd6d084ee0c97d4773abc8330d7326cf7c679b1046de5fe1c73e24ed51"
        },
        "downloads": -1,
        "filename": "plone.rest-1.0a3.zip",
        "has_sig": false,
        "md5_digest": "4b28269471e64ced22d8bfab975ef997",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 96645,
        "upload_time": "2015-12-16T19:54:50",
        "url": "https://files.pythonhosted.org/packages/64/ca/401b0a8c4170ebfc5ca3f1edd9cc3a6dd8af832aa89fd7ea0c3cc652aa11/plone.rest-1.0a3.zip"
      }
    ],
    "1.0a4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "00657e52ce01127fab87242aaa446ff1",
          "sha256": "e0b1779f6e77faf264c71feb5f782fd15e3a1a7ec07f894b4bec91048bfad164"
        },
        "downloads": -1,
        "filename": "plone.rest-1.0a4.zip",
        "has_sig": false,
        "md5_digest": "00657e52ce01127fab87242aaa446ff1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 100684,
        "upload_time": "2016-02-07T12:28:42",
        "url": "https://files.pythonhosted.org/packages/c7/ce/45c2a6b8f059804736c81252643fd4679b28d6d3f1e89935862759d218b8/plone.rest-1.0a4.zip"
      }
    ],
    "1.0a5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "75ce779c0da2a5ac6a88785e6cc0656b",
          "sha256": "63b3acff1e4a9fbaf9bc0b3c974b6b1afe56b8418832271838900b26c043b4eb"
        },
        "downloads": -1,
        "filename": "plone.rest-1.0a5.zip",
        "has_sig": false,
        "md5_digest": "75ce779c0da2a5ac6a88785e6cc0656b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 104865,
        "upload_time": "2016-02-27T16:47:34",
        "url": "https://files.pythonhosted.org/packages/5e/c6/5be5de1f2dc94e5c6dd62f4e4e82abea2a9c5c7ffe4ddd9ec408cc02904d/plone.rest-1.0a5.zip"
      }
    ],
    "1.0a6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2083db2ce79ebaed18fcb7251ff6be47",
          "sha256": "8c3619d3877980cff788a7cbb2c21a87205174825d0af804b82612c42250a94c"
        },
        "downloads": -1,
        "filename": "plone.rest-1.0a6.zip",
        "has_sig": false,
        "md5_digest": "2083db2ce79ebaed18fcb7251ff6be47",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 110520,
        "upload_time": "2016-05-22T19:18:18",
        "url": "https://files.pythonhosted.org/packages/fb/b7/78adb1d2fe1bf9fac4d308f11945e7a996e46c4e7192298909ca05d143c7/plone.rest-1.0a6.zip"
      }
    ],
    "1.0a7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "06fb41fe1ba39c0e140268f9a9eeab62",
          "sha256": "7c796b8c040cd7a6b0dfb297b5b6df0a233c46a22a95b63dcbc042323078c211"
        },
        "downloads": -1,
        "filename": "plone.rest-1.0a7.zip",
        "has_sig": false,
        "md5_digest": "06fb41fe1ba39c0e140268f9a9eeab62",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 110763,
        "upload_time": "2016-11-21T09:32:17",
        "url": "https://files.pythonhosted.org/packages/76/c5/7a6247c282c778a6039df74d977850429fd64bd4aff4e86d3f46b2372959/plone.rest-1.0a7.zip"
      }
    ],
    "1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ecf51002ad26a325b87506369a2bb896",
          "sha256": "40813eeb58f2ed149232943f2c0f417e49461c6d9e7b8468af1a1b2ad30dfe87"
        },
        "downloads": -1,
        "filename": "plone.rest-1.0b1.zip",
        "has_sig": false,
        "md5_digest": "ecf51002ad26a325b87506369a2bb896",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 111138,
        "upload_time": "2017-05-14T17:49:27",
        "url": "https://files.pythonhosted.org/packages/b3/dd/82d3d81939fe9732cca7ff3ee02e724696f106d6877b7d6c64a5f6fa6392/plone.rest-1.0b1.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b99e251a701c8c3a3db23b71bbde869d",
        "sha256": "75c202d52a063179e6db99bd13a2780733e72e8ba3ccfe012c1095098309dd00"
      },
      "downloads": -1,
      "filename": "plone.rest-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b99e251a701c8c3a3db23b71bbde869d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 98745,
      "upload_time": "2018-01-17T14:31:51",
      "url": "https://files.pythonhosted.org/packages/90/b1/062bb8ebfe32ddc6c16e43f02212b042baa5d72f50cdedb603524b839986/plone.rest-1.0.0.tar.gz"
    }
  ]
}