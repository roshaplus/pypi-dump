{
  "info": {
    "author": "Tudor Brindus",
    "author_email": "tbrindus@gmail.com",
    "bugtrack_url": "http://github.com/Xyene/sphere2cube/issues",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Artistic Software"
    ],
    "description": "sphere2cube\n===========\n\n``sphere2cube`` is a script to map  equirectangular\n(cylindrical projection, skysphere) map into 6 cube (cubemap, skybox)\nfaces.\n\nUsage\n=====\n\n::\n\n    $ sphere2cube -h\n    usage: sphere2cube [-h] [-v] [-r <size>] [-R <rx> <ry> <rz>] [-o <path>]\n                   [-f <name>] [-b <path>] [-t <count>] [-V]\n                   [<source>]\n\n    Maps an equirectangular (cylindrical projection, skysphere) map into 6 cube\n    (cubemap, skybox) faces.\n\n    positional arguments:\n      <source>              source equirectangular image filename\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -v, --version         show program's version number and exit\n      -r <size>, --resolution <size>\n                            resolution for each generated cube face (defaults to\n                            1024)\n      -R <rx> <ry> <rz>, --rotation <rx> <ry> <rz>\n                            rotation in degrees to apply before rendering cube\n                            faces (z is up)\n      -o <path>, --output <path>\n                            filename for rendered faces: default is \"face_%n_%r\",\n                            where %n is replaced by the face number, and %r by the\n                            resolution\n      -f <name>, --format <name>\n                            format to use when saving faces, i.e. \"PNG\" or \"TGA\"\n      -b <path>, --blender-path <path>\n                            filename of the Blender executable (defaults to\n                            \"blender\")\n      -t <count>, --threads <count>\n                            number of threads to use when rendering (1-64)\n      -V, --verbose         enable verbose logging\n\nSupported output formats depend on the Blender installation, but will\ngenerally include TGA, IRIS, JPEG, MOVIE, IRIZ, RAWTGA, AVIRAW, AVIJPEG, PNG,\nBMP, and FRAMESERVER.\n\n``sphere2cube`` can be run in a headless environment (e.g., a\nserver).\n\nExamples\n========\n\nFor instance, to render a 2048-resolution TGA cubemap from\n``source.jpg``, we could use the following command:\n\n::\n\n    $ sphere2cube source.jpg -r2048 -fTGA\n\nThis would generate ``face_1_2048.tga``, \u2026, ``face_6_2048.tga`` in the\nworking directory.\n\nInstallation\n============\n\n``sphere2cube`` can be easily installed with ``pip``.\n\nIt assumes that Blender is installed and the ``blender`` executable is listed in the system PATH environment variable. If it is not possible for PATH to be edited (as in the case of an unprivileged user), the path to the ``blender`` executable may instead be passed through the ``-b`` flag.\n\nWindows\n-------\n\nInstall `Blender`_, and add ``blender.exe`` to ``PATH``. Finally,\n\n::\n\n    pip install sphere2cube\n\nLinux\n-----\n\n::\n\n    $ apt-get install blender\n    $ pip install sphere2cube\n\nMac OS X\n--------\n\nSimilar to Windows, install `Blender`_, and add the ``blender`` executable to ``$PATH``. Then,\n\n::\n\n    $ pip install sphere2cube\n\n.. _Blender: https://www.blender.org/",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/Xyene/sphere2cube",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "sphere2cube",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/sphere2cube/",
    "release_url": "https://pypi.org/project/sphere2cube/0.1.8/",
    "requires_python": null,
    "summary": "Utility to map an equirectangular (cylindrical projection; skysphere) map into 6 cube (cubemap; skybox) faces",
    "version": "0.1.8"
  },
  "releases": {
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dce32f4b2d3d08ae03efbe13c12f4730",
          "sha256": "f4bae3af9003a696eb712dd0f64fd010accf94a302e7fc1cb4f8f7b9102df966"
        },
        "downloads": 1270,
        "filename": "sphere2cube-0.1.8.zip",
        "has_sig": false,
        "md5_digest": "dce32f4b2d3d08ae03efbe13c12f4730",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 107797,
        "upload_time": "2015-08-31T00:37:34",
        "url": "https://files.pythonhosted.org/packages/2e/27/d0e397407267580b0e397a1f1f6363ecc825fdebb973b862a8de26a50661/sphere2cube-0.1.8.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "dce32f4b2d3d08ae03efbe13c12f4730",
        "sha256": "f4bae3af9003a696eb712dd0f64fd010accf94a302e7fc1cb4f8f7b9102df966"
      },
      "downloads": 1270,
      "filename": "sphere2cube-0.1.8.zip",
      "has_sig": false,
      "md5_digest": "dce32f4b2d3d08ae03efbe13c12f4730",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 107797,
      "upload_time": "2015-08-31T00:37:34",
      "url": "https://files.pythonhosted.org/packages/2e/27/d0e397407267580b0e397a1f1f6363ecc825fdebb973b862a8de26a50661/sphere2cube-0.1.8.zip"
    }
  ]
}