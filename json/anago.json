{
  "info": {
    "author": "Hironsan",
    "author_email": "hiroki.nakayama.py@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "\n# anaGo\n***anaGo*** is a state-of-the-art library for sequence labeling using Keras. \n\nanaGo can performs named-entity recognition (NER), part-of-speech tagging (POS tagging), semantic role labeling (SRL) and so on for **many languages**. \nFor example, **English Named-Entity Recognition** is shown in the following picture:\n<img src=\"https://github.com/Hironsan/anago/blob/docs/docs/images/example.en2.png?raw=true\">\n\n**Japanese Named-Entity Recognition** is shown in the following picture:\n<img src=\"https://github.com/Hironsan/anago/blob/docs/docs/images/example.ja2.png?raw=true\">\n\nSimilarly, **you can solve your task for your language.**\nYou have only to prepare input and output data. :)\n\n## Feature Support\nanaGo provide following features:\n* learning your own task without any knowledge.\n* defining your own model.\n* ~~(Not yet supported)downloading learned model for many tasks. (e.g. NER, POS Tagging, etc...)~~\n\n\n## Install\nTo install anaGo, simply run:\n\n```\n$ pip install anago\n```\n\nor install from the repository:\n\n```\n$ git clone https://github.com/Hironsan/anago.git\n$ cd anago\n$ pip install -r requirements.txt\n```\n\n## Data and Word Vectors\nThe data must be in the following format(tsv).\nWe provide an example in train.txt:\n\n```\nEU\tB-ORG\nrejects\tO\nGerman\tB-MISC\ncall\tO\nto\tO\nboycott\tO\nBritish\tB-MISC\nlamb\tO\n.\tO\n\nPeter\tB-PER\nBlackburn\tI-PER\n```\n\nYou also need to download [GloVe vectors](https://nlp.stanford.edu/projects/glove/) and store it in *data/glove.6B* directory.\n\n## Get Started\n### Import\nFirst, import the necessary modules:\n```python\nimport os\nimport anago\nfrom anago.data.reader import load_data_and_labels, load_word_embeddings\nfrom anago.data.preprocess import prepare_preprocessor\nfrom anago.config import ModelConfig, TrainingConfig\nfrom anago.models import SeqLabeling\n```\nThey include loading modules, a preprocessor and configs.\n\n\nAnd set parameters to use later:\n```python\nDATA_ROOT = 'data/conll2003/en/ner'\nSAVE_ROOT = './models'  # trained model\nLOG_ROOT = './logs'     # checkpoint, tensorboard\nembedding_path = './data/glove.6B/glove.6B.100d.txt'\nmodel_config = ModelConfig()\ntraining_config = TrainingConfig()\n```\n\n### Loading data\n\nAfter importing the modules, read data for training, validation and test:\n```python\ntrain_path = os.path.join(DATA_ROOT, 'train.txt')\nvalid_path = os.path.join(DATA_ROOT, 'valid.txt')\ntest_path = os.path.join(DATA_ROOT, 'test.txt')\nx_train, y_train = load_data_and_labels(train_path)\nx_valid, y_valid = load_data_and_labels(valid_path)\nx_test, y_test = load_data_and_labels(test_path)\n```\n\nAfter reading the data, build preprocessor and load pre-trained word embeddings:\n```python\np = prepare_preprocessor(x_train, y_train)\nembeddings = load_word_embeddings(p.vocab_word, embedding_path, model_config.word_embedding_size)\nmodel_config.vocab_size = len(p.vocab_word)\nmodel_config.char_vocab_size = len(p.vocab_char)\n```\n\nNow we are ready for training :)\n\n\n### Training a model\nLet's train a model. For training a model, we can use ***Trainer***. \nTrainer manages everything about training.\nPrepare an instance of Trainer class and give train data and valid data to train method:\n```python\nmodel = SeqLabeling(model_config, embeddings, len(p.vocab_tag))\ntrainer = anago.Trainer(model,\n                        training_config,\n                        checkpoint_path=LOG_ROOT,\n                        save_path=SAVE_ROOT,\n                        preprocessor=p,\n                        embeddings=embeddings)\ntrainer.train(x_train, y_train, x_valid, y_valid)\n```\n\nIf training is progressing normally, progress bar will be displayed as follows:\n\n```commandline\n...\nEpoch 3/15\n702/703 [============================>.] - ETA: 0s - loss: 60.0129 - f1: 89.70\n703/703 [==============================] - 319s - loss: 59.9278   \nEpoch 4/15\n702/703 [============================>.] - ETA: 0s - loss: 59.9268 - f1: 90.03\n703/703 [==============================] - 324s - loss: 59.8417   \nEpoch 5/15\n702/703 [============================>.] - ETA: 0s - loss: 58.9831 - f1: 90.67\n703/703 [==============================] - 297s - loss: 58.8993   \n...\n```\n\n\n### Evaluating a model\nTo evaluate the trained model, we can use ***Evaluator***.\nEvaluator performs evaluation.\nPrepare an instance of Evaluator class and give test data to eval method:\n\n```python\nevaluator = anago.Evaluator(model, preprocessor=p)\nevaluator.eval(x_test, y_test)\n```\n\nAfter evaluation, F1 value is output:\n```commandline\n- f1: 90.67\n```\n\n### Tagging a sentence\nTo tag any text, we can use ***Tagger***.\nPrepare an instance of Tagger class and give text to tag method:\n```python\ntagger = anago.Tagger(model, preprocessor=p)\n```\n\nLet's try tagging a sentence, \"President Obama is speaking at the White House.\"\nWe can do it as follows:\n```python\n>>> sent = 'President Obama is speaking at the White House.'\n>>> tagger.analyze(sent)\n{\n  'text': 'President Obama is speaking at the White House.',\n  'words': [\n             'President',\n             'Obama',\n             'is',\n             'speaking',\n             'at',\n             'the',\n             'White',\n             'House.'\n            ],\n  'entities': [\n    {\n      'beginOffset': 1,\n      'endOffset': 2,\n      'score': 1.0,\n      'text': 'Obama',\n      'type': 'PER'\n    },\n    {\n      'beginOffset': 6,\n      'endOffset': 8,\n      'score': 1.0,\n      'text': 'White House.',\n      'type': 'ORG'\n    }\n  ]\n}\n```\n\n\n## Reference\nThis library uses bidirectional LSTM + CRF model based on\n[Neural Architectures for Named Entity Recognition](https://arxiv.org/abs/1603.01360)\nby Lample, Guillaume, et al., NAACL 2016.\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Hironsan/anago",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "anago",
    "platform": "",
    "project_url": "https://pypi.org/project/anago/",
    "release_url": "https://pypi.org/project/anago/0.0.2/",
    "requires_dist": [
      "tensorflow (>=1.4.0)",
      "numpy (>=1.13.3)",
      "scikit-learn (>0.19.1)",
      "h5py (>=2.7.1)",
      "Keras (>=2.1.1)"
    ],
    "requires_python": "",
    "summary": "Sequence labeling library using Keras.",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c06ce6df4afccfadc5d7e4cdb4097391",
          "sha256": "7455d37aa22160072fe20da31ce35492b53f477a08fdafe2c8bea5e7e1ef6b39"
        },
        "downloads": -1,
        "filename": "anago-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c06ce6df4afccfadc5d7e4cdb4097391",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 20874,
        "upload_time": "2017-08-31T06:45:31",
        "url": "https://files.pythonhosted.org/packages/58/c8/98c8238dd79827abc030e85d54b7d631766142d86ff925d166ec369c2a53/anago-0.0.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b92452128c44757cd2fe34d55841bf3a",
          "sha256": "de1baad520e6a7bc507839b692ba70755b45d51c49aad6a24288a673a500cc1f"
        },
        "downloads": -1,
        "filename": "anago-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b92452128c44757cd2fe34d55841bf3a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15335,
        "upload_time": "2017-08-31T06:45:29",
        "url": "https://files.pythonhosted.org/packages/92/75/03483690d09fe348c9fba91f354c20809d08c63332d540dd8cd77c472eba/anago-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "67dad339d71d655f7029573d3391fa10",
          "sha256": "30d90d4e49ba0e488ef10d9d5bdb6db73138d54409c6c52dc8808f6b6d51683a"
        },
        "downloads": -1,
        "filename": "anago-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "67dad339d71d655f7029573d3391fa10",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 21255,
        "upload_time": "2017-11-18T12:50:23",
        "url": "https://files.pythonhosted.org/packages/2f/35/c7e13754c9102718bbd029e67d64fbbeaf7c3eb79fee95309e15114c3b18/anago-0.0.2-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "67dad339d71d655f7029573d3391fa10",
        "sha256": "30d90d4e49ba0e488ef10d9d5bdb6db73138d54409c6c52dc8808f6b6d51683a"
      },
      "downloads": -1,
      "filename": "anago-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "67dad339d71d655f7029573d3391fa10",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 21255,
      "upload_time": "2017-11-18T12:50:23",
      "url": "https://files.pythonhosted.org/packages/2f/35/c7e13754c9102718bbd029e67d64fbbeaf7c3eb79fee95309e15114c3b18/anago-0.0.2-py3-none-any.whl"
    }
  ]
}