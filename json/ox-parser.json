{
  "info": {
    "author": "F\u00e1bio Mac\u00eado Mendes",
    "author_email": "fabiomacedomendes@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "Ox is a simplified API to the excellent PLY_ library. \n\n.. PLY: http://www.dabeaz.com/ply/\n\n\nWhy Ox?\n=======\n\nPLY is a powerful and reasonably efficient pure Python implementation of \nYacc/Bison. Its API is a little bit awkward from a Python point of view and it \ndoes a lot of magic under the hood. Ox wraps main PLY functionality into an API\nthat aims to be more explicit while still being easy to use. \n\nIt can be useful for production code, but just like PLY, it was created as a \ntool for a introductory compilers course. One explicit goal of Ox is to make the\nboundaries of the different phases of compilation sharper and to make each step\nmore easily pluggable into each other. This pedagogical approach is good for\nteaching but it is often not the most efficient or practical way to implement \nreal compilers.\n \n \nWhat about the name?\n====================\n\nPLY is a Pythonic implementation/interpretation of Yacc. The most widespread\nYacc implementation is of course GNU Bison. We decided to keep the bovine \ntheme alive and decided to call it Ox. \n\n\nUsage\n=====\n \nCompilation is usually broken in a few steps:\n\n1) Tokenization/lexical analysis: a string of source code is broken into a \n   list of tokens. In Ox, a lexer function is any function that receives a \n   string input and return a list of tokens.\n2) Parsing: the list of tokens is converted to a syntax tree. In Ox, the parser\n   function is usually derived from a grammar in BNF form. It receives a list\n   of tokens and outputs an arbitrary parse tree.\n3) Semantic analysis: the parse tree is scanned for semantic errors (e.g. \n   invalid variable names, invalid type signatures, etc). The parse tree is \n   often converted to a different representation in this process.\n4) Code optimization: many optimizations are applied in order to generate \n   efficient internal representations. This is highly dependent on the source\n   language and on the target language and it tends to be the largest part of \n   a parser in real compiler.\n5) Code generation: the intermediate representation is used to emit code in the\n   target language. The target language is often a low level language such as\n   assembly or machine code. Nothing prevents us to emmit Python or Javascript,\n   however.   \n\nOx is mostly concerned with steps 1 and 2. The library may evolve in the future\nto steps 3 onwards, but they tend to be very application specific and usually\na generic tool such as Ox do not offer much help.\n\nWhile you can implement a lexer function manually, Ox help us to build a lexer \nby simply providing a list of token names associated with their corresponding\nregular expressions:\n\n.. code-block:: python\n    \n    import ox\n    \n    lexer_rules = [\n        ('NUMBER', r'\\d+(\\.\\d*)?'),\n        ('PLUS', r'\\+'),\n        ('MINUS', r'\\-'),\n        ('MUL', r'\\*'),\n        ('DIV', r'\\/'),\n    ] \n    \n    lexer = ox.make_lexer(lexer_rules)\n\n\nThis declares a tokenizer function that receives a string of source code and\nreturns a list of tokens:\n \n>>> lexer('21 + 21')\n[NUMBER(21), PLUS(+), NUMBER(21)]\n \nThe next step, of course, is to pass this list of tokens to a parser in order to \ngenerate the parse tree. We can easily declare a parser in Ox from a mapping \nof grammar rules to handler functions.\n\nEach handler function receives a number of inputs from the grammar rule and\nreturn an AST node. In the example bellow, we return tuples to build our AST\nas a LISP-like S-expr. \n\n.. code-block:: python\n\n    binop = lambda x, op, y: (op, x, y)\n    number = lambda x: ('atom', float(x))\n    \nNow the rules:\n\n.. code-block:: python\n\n    parser_rules = [\n        ('expr : expr PLUS term', binop),\n        ('expr : expr MINUS term', binop),\n        ('expr : term', None),\n        ('term : term MUL atom', binop),\n        ('term : term DIV atom', binop),\n        ('term : atom', None),\n        ('atom : NUMBER', number),\n    ]\n    \n    token_names = [tk_name for tk_name, _ in lexer_rules]\n    parser = ox.make_parser(parser_rules, token_names) \n    \nThe parser takes a list of tokens and convert it to an AST:\n\n>>> parser(lexer('2 + 2 * 20'))\n('+', ('atom', 2.0), ('*', ('atom', 2.0), ('atom', 20.0)))\n\n\nThe AST is easier to evaluate than the original string expression. We can\nwrite a simple evaluator as follows:\n\n.. code-block:: python\n\n    import operator as op\n    operations = {'+': op.add, '-': op.sub, '*': op.mul, '/': op.truediv}\n    \n    def eval(ast):\n        head, *tail = ast\n        if head == 'atom':\n            return tail[0]\n        else:\n            func = operations[head]\n            args = (eval(x) for x in tail)\n            return func(*args)\n\n    def eval_loop():\n        expr = input('expr: ')\n        \n        tokens = lexer(expr)\n        ast    = parser(tokens)\n        value  = eval(ast)\n        \n        print('result:', value)\n\nThe eval function receives an AST, but we can easily compose it with the other\nfunctions in order to accept string inputs. (We are using sidekick's pipeline\noperator to compose functions. It simply passes the output of each function\nto the input of the next function in the pipeline).\n\n>>> eval_input = lexer >> parser >> eval\n>>> eval_input('2 + 2 * 20')\n42.0\n\nThat's it. Call the `eval_loop()` at the end of the script and you have a nice \ncalculator written with only a few lines of Python! ",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/fabiommendes/ox/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ox-parser",
    "platform": "any",
    "project_url": "https://pypi.org/project/ox-parser/",
    "release_url": "https://pypi.org/project/ox-parser/0.1.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A simplified API to PLY (Python Lex & Yacc).",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2575a9ec1f6428d1efd76dc21a4ba527",
          "sha256": "5166646710cdfe27981bea4991566c8f4057d0e79ef54be4262c8baf53b7f86d"
        },
        "downloads": 0,
        "filename": "ox-parser-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2575a9ec1f6428d1efd76dc21a4ba527",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12607,
        "upload_time": "2017-08-08T01:31:34",
        "url": "https://files.pythonhosted.org/packages/80/ce/984a22182d44950bf013dbe442c74079d171621022cbf6964f3f54d6f577/ox-parser-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "123e1aec4cb6070f2d22ae88eddd2690",
          "sha256": "f0b83fbcc91444aff7f3111ed82547435152d8366e05840ff0e13b531e766fe5"
        },
        "downloads": 0,
        "filename": "ox-parser-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "123e1aec4cb6070f2d22ae88eddd2690",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12703,
        "upload_time": "2017-08-08T01:54:05",
        "url": "https://files.pythonhosted.org/packages/27/be/910f0f18da43acc55036d7d860f5989eb336627c6f9b1a322d722a066f9c/ox-parser-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "123e1aec4cb6070f2d22ae88eddd2690",
        "sha256": "f0b83fbcc91444aff7f3111ed82547435152d8366e05840ff0e13b531e766fe5"
      },
      "downloads": 0,
      "filename": "ox-parser-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "123e1aec4cb6070f2d22ae88eddd2690",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 12703,
      "upload_time": "2017-08-08T01:54:05",
      "url": "https://files.pythonhosted.org/packages/27/be/910f0f18da43acc55036d7d860f5989eb336627c6f9b1a322d722a066f9c/ox-parser-0.1.1.tar.gz"
    }
  ]
}