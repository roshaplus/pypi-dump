{
  "info": {
    "author": "Daniel Quinn",
    "author_email": "code@danielquinn.org",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "pyletheia\n=========\n\nA Python implementation of `Aletheia`_.\n\n.. _Aletheia: https://github.com/danielquinn/aletheia\n\n\nProcess\n-------\n\nThe process is pretty simple:\n\n1. Generate a public/private key pair\n2. Sign an image with the private key\n3. Publish your public key\n4. Verify the image with your public key\n\nSystem Requirements\n-------------------\n\nAletheia makes us of the excellent Exiftool program which is available in most\nLinux distributions:\n\nDebian Linux and other derivatives like Ubuntu & Mint\n.....................................................\n\n.. code:: bash\n\n    $ sudo apt install libimage-exiftool-perl\n\nArch Linux\n..........\n\n.. code:: bash\n\n    $ sudo pacman -S perl-image-exiftool\n\nGentoo Linux\n............\n\n.. code:: bash\n\n    $ sudo emerge exiftool\n\n\nInstallation\n------------\n\nAs this is a Python package, use ``pip``:\n\n.. code:: bash\n\n    $ pip install aletheia\n\n\nCommand Line\n------------\n\nThis package comes with a simple command-line program that does everything you\nneed to support the Aletheia process.\n\n\nGenerate your public/private key pair\n.....................................\n\n.. code:: bash\n\n    $ aletheia generate\n    Generating private/public key pair...\n\n    All finished!\n\n    You now have two files: aletheia.pem (your private key) and\n    aletheia.pub (your public key).  Keep the former private, and share\n    the latter far-and-wide.  Importantly, place your public key at a\n    publicly accessible URL so that when you sign a file with your\n    private key, it can be verified by reading the public key at that\n    URL.\n\nYour public & private key will be stored in ``${HOME}/.aletheia/``.  For\nAletheia to work, you need to publish your public key on a website somewhere so\nit can be used to verify files later.\n\n\nSign an image with your private key\n...................................\n\n.. code:: bash\n\n    $ aletheia sign file.jpg https://example.com/my-public-key.pub\n\nAletheia will modify the EXIF data on your image to include a signature and a\nlink to where your public key can be found so when it comes time to verify it,\neverything that's necessary is available.\n\n\nVerify the image with your public key\n.....................................\n\n.. code:: bash\n\n    $ aletheia verify file.jpg\n\nNow, anyone who receives your image can verify its origin with this command so\nlong as your public key remains available at the URL you used above.\n\n\nPython API\n----------\n\nThere's no reason that you would have to do all this on the command line of\ncourse.  All of the above can be done programmatically as well.\n\n\nGenerate your public/private key pair\n.....................................\n\n.. code:: python\n\n    from aletheia.utils import generate\n\n    generate()\n\nJust like the command line utility, ``generate()`` will create your\npublic/private key pair in ``${HOME}/aletheia``.\n\n\nSign an image with your private key\n...................................\n\n.. code:: python\n\n    from aletheia.utils import sign\n\n    my_image_file = \"/path/to/file.jpg\"\n    public_key_location = \"https://example.com/my-public-key.pub\"\n\n    sign(my_image_file, url)\n\nSo long as you've got your public/private key pair in ``${HOME}/aletheia/``,\n``sign()`` will modify the metadata on your file to include a signature and\nURL for your public key.\n\nThere is also a ``sign_bulk()`` utility for multiple files:\n\n.. code:: python\n\n    from aletheia.utils import sign\n\n    my_image_files = (\"/path/to/file1.jpg\", \"/path/to/file1.jpg\")\n    public_key_location = \"https://example.com/my-public-key.pub\"\n\n    sign(my_image_files, url)\n\n\nVerify the image with your public key\n.....................................\n\n.. code:: python\n\n    from aletheia.utils import verify\n\n    verify(\"/path/to/file.jpg\")\n\nAletheia will import the public key from the URL in the file's metadata and\nattempt to verify the image data by comparing the key to the embedded\nsignature.  If the file is verified, it returns ``True``, otherwise it returns\n``False``.\n\nThere's also a ``verify_bulk()`` utility for multiple files:\n\n.. code:: python\n\n    from aletheia.utils import verify\n\n    verify_bulk((\"/path/to/file.jpg\", \"/path/to/file.jpg\"))\n\n\n",
    "docs_url": null,
    "download_url": "https://github.com/danielquinn/pyletheia",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/danielquinn/pyletheia",
    "keywords": "Command Line,verification,fake news",
    "license": "AGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aletheia",
    "platform": "",
    "project_url": "https://pypi.org/project/aletheia/",
    "release_url": "https://pypi.org/project/aletheia/0.0.1/",
    "requires_dist": [
      "sphinx-rtd-theme; extra == 'doc'",
      "sphinx; extra == 'doc'",
      "requests (==2.18.4)",
      "cryptography (==2.1.2)"
    ],
    "requires_python": "",
    "summary": "A Python implementation of Aletheia",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f46c7ea248a39ed58764725b7a6503fe",
          "sha256": "b266775430373e491163c842c199996b4b2a496e3cfb830670b10074c8b3c92d"
        },
        "downloads": -1,
        "filename": "aletheia-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f46c7ea248a39ed58764725b7a6503fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 8981,
        "upload_time": "2017-11-10T00:54:07",
        "url": "https://files.pythonhosted.org/packages/e8/53/b9b31d56ce40db645e4815f86c90100008bcae8fbd098942e51b889faae0/aletheia-0.0.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d030694a53558dd7fa3d424efad8587e",
          "sha256": "8e1862e4325326d2e00cd0ae0db24cde42ae167c1d437fce268c9a6374cfb13b"
        },
        "downloads": -1,
        "filename": "aletheia-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d030694a53558dd7fa3d424efad8587e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5895,
        "upload_time": "2017-11-10T00:54:09",
        "url": "https://files.pythonhosted.org/packages/a8/7c/bdba251f6ffb7ca7705c489d0caea5d5d6a7d1337ba46b94ca8ee7f8bf8c/aletheia-0.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f46c7ea248a39ed58764725b7a6503fe",
        "sha256": "b266775430373e491163c842c199996b4b2a496e3cfb830670b10074c8b3c92d"
      },
      "downloads": -1,
      "filename": "aletheia-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f46c7ea248a39ed58764725b7a6503fe",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 8981,
      "upload_time": "2017-11-10T00:54:07",
      "url": "https://files.pythonhosted.org/packages/e8/53/b9b31d56ce40db645e4815f86c90100008bcae8fbd098942e51b889faae0/aletheia-0.0.1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "d030694a53558dd7fa3d424efad8587e",
        "sha256": "8e1862e4325326d2e00cd0ae0db24cde42ae167c1d437fce268c9a6374cfb13b"
      },
      "downloads": -1,
      "filename": "aletheia-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "d030694a53558dd7fa3d424efad8587e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5895,
      "upload_time": "2017-11-10T00:54:09",
      "url": "https://files.pythonhosted.org/packages/a8/7c/bdba251f6ffb7ca7705c489d0caea5d5d6a7d1337ba46b94ca8ee7f8bf8c/aletheia-0.0.1.tar.gz"
    }
  ]
}