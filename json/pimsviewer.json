{
  "info": {
    "author": "Casper van der Wel",
    "author_email": "caspervdw@gmail.com",
    "bugtrack_url": "",
    "classifiers": [],
    "description": "pimsviewer\r\n==========\r\n\r\nA graphical user interface (GUI) for PIMS\r\n\r\nThis viewer was based on ``skimage.viewer.CollectionViewer``\r\n(`docs <http://scikit-image.org/docs/dev/user_guide/viewer.html>`__) and\r\nis able to work with N-dimensional image files that are opened by PIMS.\r\n\r\nAlso, it exposes a matplotlib plotting area on which images can be\r\n(dynamically) annotated, making use of the ``Plugin`` infrastructure.\r\n\r\nStarting the viewer\r\n-------------------\r\n\r\nYou can start the viewer as follows:\r\n\r\n::\r\n\r\n    from pimsviewer import Viewer\r\n    viewer = Viewer()\r\n    viewer.show()\r\n\r\nOptionally you may include a reader:\r\n\r\n::\r\n\r\n    import pims\r\n    from pimsviewer import Viewer\r\n    viewer = Viewer(pims.open('path/to/file'))\r\n    viewer.show()\r\n\r\nExample: evaluating the effect of a processing function\r\n-------------------------------------------------------\r\n\r\nThis example adds a processing function that adds an adjustable amount\r\nof noise to an image. The amount of noise is tunable with a slider,\r\nwhich is displayed on the right of the image window.\r\n\r\n::\r\n\r\n    import numpy as np\r\n    import pims\r\n    from pimsviewer import Viewer, ProcessPlugin, Slider\r\n\r\n    reader = pims.open('path/to/file')\r\n\r\n    def add_noise(img, noise_level):\r\n        return img + np.random.random(img.shape) * noise_level / 100 * img.max()\r\n\r\n    AddNoise = ProcessPlugin(add_noise, 'Add noise', dock='right')\r\n    AddNoise += Slider('noise_level', low=0, high=100, value=10,\r\n                       orientation='vertical')\r\n    viewer = Viewer(reader) + AddNoise\r\n    viewer.show()\r\n\r\nExample: annotating features on a video\r\n---------------------------------------\r\n\r\nThis example annotates features that were obtained via trackpy onto a\r\nvideo.\r\n\r\n::\r\n\r\n    import trackpy as tp\r\n    from pimsviewer import Viewer, AnnotatePlugin\r\n    reader = pims.open('path/to/file')\r\n    f = tp.batch(reader, diameter=15)\r\n    (Viewer(reader) + AnnotatePlugin(f)).show()\r\n\r\nExample: selecting features on a video\r\n--------------------------------------\r\n\r\nThis example annotates features on a video, allows to hide and move\r\nfeatures, and returns the adapted dataframe.\r\n\r\n::\r\n\r\n    import trackpy as tp\r\n    from pimsviewer import Viewer, SelectionPlugin\r\n    reader = pims.open('path/to/file')\r\n    f = tp.batch(reader, diameter=15)\r\n    f = tp.link_df(f, search_range=10)\r\n    viewer = Viewer(reader) + SelectionPlugin(f)\r\n    f_result = viewer.show()\r\n\r\nExample: designing a custom plotting function\r\n---------------------------------------------\r\n\r\nThis dynamically shows the effect of ``tp.locate``.\r\n\r\n::\r\n\r\n    import trackpy as tp\r\n    from pimsviewer import Viewer, Slider, PlottingPlugin\r\n\r\n    def locate_and_plot(image, radius, minmass, separation, ax):\r\n        f = tp.locate(image, diameter=radius * 2 + 1, minmass=minmass,\r\n                      separation=separation)\r\n        if len(f) == 0:\r\n            return\r\n        return ax.plot(f['x'], f['y'], markersize=15, markeredgewidth=2,\r\n                       markerfacecolor='none', markeredgecolor='r',\r\n                       marker='o', linestyle='none')\r\n\r\n    reader = pims.open('path/to/file')\r\n    Locate = PlottingPlugin(locate_and_plot, 'Locate', dock='right')\r\n    Locate += Slider('radius', 2, 20, 7, value_type='int', orientation='vertical')\r\n    Locate += Slider('separation', 1, 100, 7, value_type='float', orientation='vertical')\r\n    Locate += Slider('minmass', 1, 10000, 100, value_type='int', orientation='vertical')\r\n    viewer = Viewer(reader) + Locate\r\n    viewer.show()",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/soft-matter/pimsviewer",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pimsviewer",
    "platform": "",
    "project_url": "https://pypi.org/project/pimsviewer/",
    "release_url": "https://pypi.org/project/pimsviewer/1.0/",
    "requires_python": "",
    "summary": "Viewer for Python IMage Sequence (PIMS).",
    "version": "1.0"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "623a81adcee7d486c6c1443db629e0e8",
          "sha256": "f78fc0d3431d4c9c19a5e20d05a429cce01fe9c645aa6da7c446b538e5a0473b"
        },
        "downloads": 0,
        "filename": "pimsviewer-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "623a81adcee7d486c6c1443db629e0e8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18994,
        "upload_time": "2017-06-06T15:46:12",
        "url": "https://files.pythonhosted.org/packages/99/a9/95cfd2e45bef01dbf476a86b8dafa8f4c0c7d090cde147dd8b36e4b8b72b/pimsviewer-1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "623a81adcee7d486c6c1443db629e0e8",
        "sha256": "f78fc0d3431d4c9c19a5e20d05a429cce01fe9c645aa6da7c446b538e5a0473b"
      },
      "downloads": 0,
      "filename": "pimsviewer-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "623a81adcee7d486c6c1443db629e0e8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 18994,
      "upload_time": "2017-06-06T15:46:12",
      "url": "https://files.pythonhosted.org/packages/99/a9/95cfd2e45bef01dbf476a86b8dafa8f4c0c7d090cde147dd8b36e4b8b72b/pimsviewer-1.0.tar.gz"
    }
  ]
}