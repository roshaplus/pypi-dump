{
  "info": {
    "author": "OpenStack",
    "author_email": "openstack-dev@lists.openstack.org",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: OpenStack",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "==================================================\nHP OneView Mechanism Driver for Neutron ML2 plugin\n==================================================\n\nOverview\n========\nThe mechanism driver interacts with Neutron and OneView to\ndynamically reflect networking operations made by OpenStack on OneView. With\nthese operations it's possible to a OneView administrator to know what is\nhappening in OpenStack System which is running in the Data Center and also\nautomatizes some operations previously required to be manual.\n\nThe diagram below provides an overview of how Neutron and OneView will\ninteract using the OneView Mechanism Driver. OneView Mechanism\nDriver uses HPE Oneview SDK for Python to provide communication between\nNeutron and OneView through OneView's REST API.\n\nFlows:\n::\n\n    +---------------------------------+\n    |                                 |\n    |       Neutron Server            |\n    |      (with ML2 plugin)          |\n    |                                 |\n    |           +---------------------+\n    |           |       OneView       |  Ironic API  +----------------+\n    |           |      Mechanism      +--------------+     Ironic     |\n    |           |       Driver        |              +----------------+\n    +-----------+----------+----------+\n                           |\n                 REST API  |\n                           |\n                 +---------+---------+\n                 |     OneView       |\n                 +-------------------+\n\n\nThe OneView Mechanism Driver aims at having the Ironic-Neutron\nintegration for multi-tenancy working with nodes driven by the OneView\ndrivers for Ironic.\n\nHow the driver works\n====================\n\nThe OneView Mechanism Driver considers that not all networking operations that\nare performed in OpenStack need to be reflected in OneView. To identify if a certain\nrequest should be executed by the driver it might check if the networks and ports are\nrelated with networks/connections which should be reflected OneView.\n\nFor Network Operations, the driver checks if the physical provider-network\nFrom Neutron network belongs to is defined as one of the \"managed networks\" of the\ndriver. The concept of \"managed networks\" refers to the networks configured in\nthe driver config file with a mapping to attached it to an Uplink Set in OneView.\nOperations of Networks with no mappings are just ignored by the driver.\n\nThese mappings configuration can be made in the configuration file using the\n\"uplinkset_mappings\" and \"flat_net_mappings\" attributes, as follows:\n\n- \"uplinkset_mappings\" are used to define which provider networks from Neutron should be controlled by the OneView Mechanism Driver.\n  The administrator defines comma-separated triples of [Provider_Network:Logical_Interconnect_Group_UUID:Uplink_Set_name] \n  to represent each desired mapping of a Neutron network to the Logical Interconnect Group's Uplink Set in which it will \n  be created in OneView. These mappings can be related to two types of Uplink Sets: \u201cEthernet\u201d Uplink Sets to support VLAN\n  networks or \u201cUntagged\u201d Uplink Sets to support flat network. In the former, OneView does not allow more than one network\n  to use the same VLAN ID in the same Uplink Set and only one mapping is allowed per Logical Interconnect. In the latter,\n  OneView restricts that only one network can be configured to use it.\n\n- \"flat_net_mappings\" are used to define manual mappings of specific flat provider networks from Neutron to existing Untagged networks in OneView. This configuration can be done to allow OneView administrator to use a configured environment instead of create an entire new one interacting with OpenStack. When a network is mapped with \"flat_net_mappings\" no operations in OneView are performed since it is considered that all environment was correctly configured by OneView Administrator.\n\nIn the case of Port Operations, only ports related to managed networks and with\nthe \"local_link_information\" field populated are considered. When the driver\nidentifies that \"local_link_information\" exists in a given port, it checks if\nit contains a Server Hardware UUID and boot information. The mech driver also\nuses the information of the MAC address of the requested port to identify the\nspecific NIC of the Server Profile where the operation should be executed.\nThis information can be directly configured in the Neutron port or passed by\nIronic port field \"local_link_connection\".\n\nConsidering these restrictions, OneView Mechanism Driver is capable of:\n\n- Create a network in OneView for each network in Neutron to physical provider-networks configured in the driver config file\n\n- Add networks to Uplink Sets in OneView according to Uplink Set mappings defined to the physical provider-network in the driver config file\n\n    - \"Ethernet\" Uplink Sets are used with \"vlan\" typed provider networks\n    - \"Untagged\" Uplink Sets are used with \"flat\" typed provider networks\n    - Other kinds of Uplink Sets neither other types of provider networks are used\n\n- Manual mapping of Neutron flat networks onto specified pre-existing networks of OneView\n\n    - This covers migration from the flat model to the multi-tenant model\n\n- Create, remove and update connections in Server Profiles, implementing Neutron port binding\n\n    - Works only with vif_type = baremetal\n    - Expects Server Hardware UUID and boot priority in the local_link_information of the port\n\nOneView Mechanism Driver also implements a fault tolerance process to guarantee\nthat all networks and ports that are present in Neutron are correctly reflected\nin OneView. To ensure that, the verification is executed in the startup of the\nmechanism driver to check if all the networks and ports which were managed in a\nprior execution still need to be reflected and, in the same way, if new one\nshould be created in OneView based in the information from the configuration\nfile.\n\nThis synchronization process will consider the information of the networks\nindicated to be managed by the mechanism driver\n(uplink_set_mappings and flat_net_mappings) from the configuration file and\nthe information stored in the OneView Mechanism Driver tables present in\nOpenStack Database.\n\nInitially, mapped provider networks are obtained from the configuration file\nand all networks belonging to them are obtained from Neutron. The mechanism\ndriver checks if these networks are present in its tables and if any of them is\nmissing they will be added in the database, created in the OneView and attached\nto the configured Uplink Sets. After this verification, if any network not\npresent in the list obtained from Neutron still exists in the database they\nwill be erased from OneView and removed from the table.\n\nIn the same way, OneView Mechanism Driver checks the consistence of the ports\nrelated with the managed networks with the connections of the server profiles\nrelated with the server hardware used by OpenStack. As Neutron Ports stores\nthe \u201cserver_hardware_uuid\u201d received by the local_link_information, the\nMechanism Driver gets the information for each port and check if the Server\nProfile used by the indicated Server Hardware have a connection correctly\nrepresenting this port, and if not, creates it.\n\nIronic Configuration\n====================\nBy default, Ironic is configured to use flat networks during deployment process.\nIn order to use Ironic-Neutron integration to provide networks isolation during\ndeployment, some configuration is necessary. In ironic.conf file the following\nconfiguration should be done:\n\n::\n\n    [DEFAULT]\n    enabled_network_interfaces = flat,noop,neutron\n    default_network_interface = neutron\n\n    [neutron]\n    cleaning_network_uuid = neutron_cleaning_network_UUID\n    provisioning_network_uuid = neutron_provisioning_network_UUID\n\nAs mentioned in the previous section, the OneView Mechanism Driver needs to receive\nthe \u201clocal_link_connection\u201d from Ironic ports to perform networking ports operations.\nOnce Ironic ports don\u2019t have any information stored by default, it\u2019s necessary to\nupdate existing ports with the desired data to data field as follow:\n\n::\n\n    ironic --ironic-api-version 1.22 port-update IRONIC_NODE_ID replace local_link_connection=\"{\\\"switch_id\\\": \\\"aa:bb:cc:dd:ee:ff\\\", \\\"port_id\\\": \\\"\\\", \\\"switch_info\\\": \\\"{'server_hardware_uuid': 'value', 'bootable':'true/false'}\\\"}\"\n\nIn \u201clocal_link_connection\u201d, switch_id and port_id are necessary to identify the specific\nswitch/port where the operation should be performed, but as OneView Mechanism Driver\ndoesn\u2019t deals directly with switches, this information is not necessary. \u201cswitch_info\u201d\nattribute can receive any information and because of it, will be to configured with\ninformation demanded by OneView Mechanism Driver. Two information need to be passed:\n\u2018server_hardware_uuid\u2019 and \u2018bootable\u2019. \u2018server_hardware_uuid\u2019 identifies in which\nServer Hardware the connection to represent the new port will be created and \u2018bootable\u2019\nindicates if this connection will be bootable or not. To identify the port where the\nconnection need to be created, the MAC address already configured in the Ironic port will be used.\n\nInstall using DevStack\n======================\n\n1. Install with PIP:\n \n- Requirement: Python => 2.7.9\n\n- To install the OneView Mechanism Driver, run:\n\n::\n\n  $ pip install networking-oneview\n\n- Go to the Configuration section\n\n2. Install with GIT:\n\n- Make the git clone of the mech driver files for a folder of your choice <download_directory>:\n\n::\n\n    $ git clone git@git.lsd.ufcg.edu.br:ironic-neutron-oneview/networking-oneview.git\n\n- Access the folder <networking-oneview>:\n\n::\n\n    $ cd networking-oneview\n\n- Run:\n\n::\n\n    $ pip install .\n\n- Go to the Configuration section\n\n\nConfiguration\n=============\n\n1. Making ml2_conf.ini file configurations:\n\n- Edit the /etc/neutron/plugins/ml2/ml2_conf.ini file. Find the correspondent line and insert the word *oneview* as follow:\n\n::\n\n    mechanism_drivers = <others Drivers>,oneview\n\n- Find the correspondent line and insert the words *flat,vlan* as follow:\n\n::\n\n    tenant_network_types = vxlan,flat,vlan\n\n- Find the correspondent line and insert the flat physical networks:\n\n::\n\n    [ml2_type_flat]\n\n    flat_networks = public,<flat-physical-network1-name>,<flat-physical-network2-name>*\n\n- Find the correspondent line and insert the vlan physical networks:\n\n::\n\n    [ml2_type_vlan]\n\n    network_vlan_ranges = public,<vlan-physical-network1-name>,<vlan-physical-network2-name>\n\n2. ml2_conf_oneview.ini file configurations:\n\n::\n\n  Edit the /etc/neutron/plugins/ml2/ml2_conf_oneview.ini file.\n\n\u201cov_refresh_interval\u201d is used to configure the period (in seconds) in which the mechanism driver will execute the periodic synchronization to check if any inconsistence exists between Neutron and OneView and correct them if possible. This attribute is optional and if not configured the default value is 3600 seconds.\n\nTo set TLS options for the communication with OneView, it is necessary to download the credentials(appliance.com.crt) from OneView.\n\n- Examples of the lines are:\n\n::\n\n    oneview_host=1.2.3.4\n\n    username=admin\n\n    password=password\n\n    uplinkset_mappings=PHYSNET1:LOGICAL_INTERCCONECT_GROUP_UUID:UPLINK_NAME1,PHYSNET2:LOGICAL_INTERCCONECT_GROUP_UUID:UPLINK_NAME2\n\n    flat_net_mappings=PHYSNET3:ONEVIEW_NETWORK_ID,PHYSNET4:ONEVIEW_NETWORK_ID2\n\n    ov_refresh_interval=3600\n\n    tls_cacert_file = /home/ubuntu/certificate/appliance.com.crt\n\n3. Restart Neutron and upgrade Database:\n\n- Upgrade Database:\n\n::\n\n$ neutron-db-manage upgrade heads\n\n- Restart the neutron service adding the new configuration file using '--config-file /etc/neutron/plugins/ml2/ml2_conf_oneview.ini'. Example:\n\n::\n\n$ /usr/local/bin/neutron-server --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini --config-file /etc/neutron/plugins/ml2/ml2_conf_oneview.ini & echo $! >/opt/stack/status/stack/q-svc.pid; fg || echo \"q-svc failed to start\" | tee \"/opt/stack/status/stack/q-svc.failure\"\n\n- If everything is well, the mechanism driver is working.\n\nInstall using OpenStack\n=======================\n\nTo install the OneView Mechanism Driver, access the virtual environment Neutron Server Container, execute:\n\n::\n\n $ sudo source /openstack/venvs/neutron-master/bin/activate\n\n1. Install with PIP\n\n- Requirement: Python => 2.7.9\n\n- To install the OneView Mechanism Driver, run:\n\n::\n\n    $ pip install networking-oneview\n\n- Go to the Configuration section\n\n2. Install with GIT\n\n- Make the git clone of the mech driver files for a folder of your choice <download_directory>:\n\n::\n\n    $ git clone git@git.lsd.ufcg.edu.br:ironic-neutron-oneview/networking-oneview.git\n\n- Access the folder <networking-oneview>:\n\n::\n\n    $ cd networking-oneview\n\n- Run:\n\n::\n\n    $ pip install .\n\n- Go to the Configuration section\n\nConfiguration\n=============\n\n1. Making ml2_conf.ini file configurations:\n\n- Edit the /etc/neutron/plugins/ml2/ml2_conf.ini file. Find the correspondent line and insert the word *oneview* as follow:\n\n::\n\n    mechanism_drivers = <others Drivers>,oneview\n\n- Find the correspondent line and insert the words *flat,vlan* as follow:\n\n  These following configurations need to be made on both containers (Neutron Server and Neutron Agent):\n\n::\n\n    tenant_network_types = vxlan,flat,vlan\n\n- Find the correspondent line and insert the flat physical networks:\n\n  These following configurations need to be made on both containers (Neutron Server and Neutron Agent):\n\n::\n\n    [ml2_type_flat]\n\n    flat_networks = public,<flat-physical-network1-name>,<flat-physical-network2-name>*\n\n- Find the correspondent line and insert the vlan physical networks:\n\n  These following configurations need to be made on both containers (Neutron Server and Neutron Agent):\n\n::\n\n    [ml2_type_vlan]\n\n    network_vlan_ranges = public,<vlan-physical-network1-name>,<vlan-physical-network2-name>\n\n2. ml2_conf_oneview.ini file configurations:\n\n::\n\n  Edit the /etc/neutron/plugins/ml2/ml2_conf_oneview.ini file.\n\n\u201cov_refresh_interval\u201d is used to configure the period (in seconds) in which the mechanism driver will execute the periodic synchronization to check if any inconsistence exists between Neutron and OneView and correct them if possible. This attribute is optional and if not configured the default value is 3600 seconds.\n\nTo set TLS options for the communication with OneView, it is necessary to download the credentials(appliance.com.crt) from OneView.\n\n- Examples of the lines are:\n\n::\n\n    oneview_host=1.2.3.4\n\n    username=admin\n\n    password=password\n\n    uplinkset_mappings=PHYSNET1:LOGICAL_INTERCCONECT_GROUP_UUID:UPLINK_NAME1,PHYSNET2:LOGICAL_INTERCCONECT_GROUP_UUID:UPLINK_NAME2\n\n    flat_net_mappings=PHYSNET3:ONEVIEW_NETWORK_ID,PHYSNET4:ONEVIEW_NETWORK_ID2\n\n    ov_refresh_interval=3600\n\n    tls_cacert_file = /home/ubuntu/certificate/appliance.com.crt\n\n3. In Neutron Agent, edit /etc/neutron/plugins/ml2/linuxbridge_agent.ini to mapping neutron ports used by container as follow:\n\n::\n\n [linux_bridge]\n physical_interface_mappings = <flat-physical-network1-name>:eth12,<vlan-physical-network1-name>:eth11\n\n4. Restart Neutron and upgrade Database:\n\n- Upgrade Database in virtual environment:\n\n::\n\n$ neutron-db-manage upgrade heads\n\n- Edit the /etc/systemd/system/neutron-server.service file.\n\n::\n\n - In the line ExecStart=/openstack/venvs/neutron-master/bin/neutron-server --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini --log-file=/var/log/neutron/neutron-server.log\n\n - Change to ExecStart=/openstack/venvs/neutron-master/bin/neutron-server --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini --config-file /etc/neutron/plugins/ml2/ml2_conf_oneview.ini --log-file=/var/log/neutron/neutron-server.log\n\n- Restart the neutron service, execute:\n\n::\n\n systemctl daemon-reload && service neutron-server restart\n\nRestart the neutron-agent container:\n\n::\n\n  service neutron-linuxbridge-agent restart\n\n- If everything is well, the mechanism driver is working.\n\n5. Configuring haproxy timeout in the outside container (host):\n\n- To set the time on haproxy, edit the files:\n\n::\n\n- Edit /etc/haproxy/conf.d/00-haproxy and /etc/haproxy/haproxy.cfg files\n\n- In the defaults section of the files, change the following lines to:\n\n::\n\n    timeout client 5000s\n    timeout connect 10s\n    timeout server 5000s\n\nRestart the haproxy service:\n\n::\n\n systemctl restart haproxy.service\n\nLicense\n=======\n\nOneView ML2 Mechanism Driver is distributed under the terms of the Apache\nLicense, Version 2.0. The full terms and conditions of this license are detailed\nin the LICENSE file.\n\nContributing\n============\n\nYou know the drill. Fork it, branch it, change it, commit it, and pull-request\nit. We are passionate about improving this project, and glad to accept help to\nmake it better. However, keep the following in mind:\n\n-  Contributed code must have the same license of the repository.\n\n- We reserve the right to reject changes that we feel do not fit the scope of this project, so for feature additions, please open an issue to discuss your ideas before doing the work.\n\n- If you would like to contribute to the development of OpenStack, you must follow the steps in this page:\n\n    http://docs.openstack.org/infra/manual/developers.html\n\n- Once those steps have been completed, changes to OpenStack should be submitted for review via the Gerrit\n  tool, following the workflow documented at:\n\n    http://docs.openstack.org/infra/manual/developers.html#development-workflow",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://www.openstack.org/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "networking-oneview",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/networking-oneview/",
    "release_url": "https://pypi.org/project/networking-oneview/0.3.0/",
    "requires_python": null,
    "summary": "HP OneView Mechanism Driver for Neutron ML2 plugin",
    "version": "0.3.0"
  },
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2f079c302828185fe076b8cc1caa5f98",
          "sha256": "c3dcf528f2a88ebdd1665a084263a0e78aa76e2cda85aa77d74a51b648e6e9c8"
        },
        "downloads": 63,
        "filename": "networking-oneview-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2f079c302828185fe076b8cc1caa5f98",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35607,
        "upload_time": "2016-12-20T13:11:40",
        "url": "https://files.pythonhosted.org/packages/91/82/a97dca1aa42dc93384a0df69a4f8b11ebbe79a64c50a2c82b3efcdf5ce5c/networking-oneview-0.0.2.tar.gz"
      }
    ],
    "0.1.0": [],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "793cbb21681de6b3fd3de13234aaf251",
          "sha256": "84862ed97b7df2bc81878367943f57351e30527d97ac53b82bd8dbe3d1b006e4"
        },
        "downloads": 241,
        "filename": "networking-oneview-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "793cbb21681de6b3fd3de13234aaf251",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38515,
        "upload_time": "2016-12-22T17:08:49",
        "url": "https://files.pythonhosted.org/packages/c9/e2/101788cf03182cac4d123c2698ca50b56578aaa45abc216d99e6b6d59a16/networking-oneview-0.1.1.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7a83100923061aaf53c006311c19707f",
          "sha256": "fab673b8ccf845504d723f3229f7dbcddcf0bca58630fa390f7d0bc1109b57c5"
        },
        "downloads": 14,
        "filename": "networking-oneview-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7a83100923061aaf53c006311c19707f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43173,
        "upload_time": "2017-03-23T19:45:45",
        "url": "https://files.pythonhosted.org/packages/30/fa/7a838105c5a0471f5f4edf6e2b72984a0aa845f851f1f1bb837543f3279c/networking-oneview-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3d8137154c7826b0c2b71e7fc07662fb",
          "sha256": "a73f3e64be991ae353bc0bce4b2649fea2e1e18f08f20046dac42c2082856501"
        },
        "downloads": 19,
        "filename": "networking-oneview-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3d8137154c7826b0c2b71e7fc07662fb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43233,
        "upload_time": "2017-03-31T11:59:10",
        "url": "https://files.pythonhosted.org/packages/eb/7c/e4617f2404428af63c4f5d8f1f7402eee59e8f3be6636ddd8d3c834d0358/networking-oneview-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f3ad2d09c1dc101941a7a9d287000156",
          "sha256": "1466a081ae408ec7b8a7d4f877cee59567b3ab2cebbd15751a01262241886228"
        },
        "downloads": 0,
        "filename": "networking-oneview-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f3ad2d09c1dc101941a7a9d287000156",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43883,
        "upload_time": "2017-05-16T20:16:20",
        "url": "https://files.pythonhosted.org/packages/6c/73/7835cc894195ca782b09dc31b3733b536a9821688c000e3ac2c217da6a04/networking-oneview-0.2.2.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8db764825b3844036bef5bfdcb148dcc",
          "sha256": "e54d710acc7a1d1c8ca33ece1659c644b713c8bc9522455c68919ab1da4c6019"
        },
        "downloads": 0,
        "filename": "networking-oneview-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8db764825b3844036bef5bfdcb148dcc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43834,
        "upload_time": "2017-05-23T12:58:42",
        "url": "https://files.pythonhosted.org/packages/46/d0/f44f2e3e7e468393faa793540f087d0580b3748650376f9e7b37b67dbe82/networking-oneview-0.3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8db764825b3844036bef5bfdcb148dcc",
        "sha256": "e54d710acc7a1d1c8ca33ece1659c644b713c8bc9522455c68919ab1da4c6019"
      },
      "downloads": 0,
      "filename": "networking-oneview-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8db764825b3844036bef5bfdcb148dcc",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 43834,
      "upload_time": "2017-05-23T12:58:42",
      "url": "https://files.pythonhosted.org/packages/46/d0/f44f2e3e7e468393faa793540f087d0580b3748650376f9e7b37b67dbe82/networking-oneview-0.3.0.tar.gz"
    }
  ]
}