{
  "info": {
    "author": "Arie van Luttikhuizen",
    "author_email": "aluttik@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "==========\ncrossplane\n==========\n\n|Build| |Release| |License| |Versions|\n\nReliable and fast NGINX configuration file parser.\n\n- `Install`_\n- `Command Line Tool`_\n\n  - `crossplane parse`_\n  - `crossplane lex`_\n  - `crossplane format`_\n  - `crossplane minify`_\n\n- `Python Module`_\n\n  - `crossplane.parse()`_\n  - `crossplane.lex()`_\n\n- `Contributing`_\n\n  - `Types of Contributions`_\n  - `Get Started`_\n  - `Pull Request Guidelines`_\n  - `Tips`_\n\n\nInstall\n=======\n\nYou can install both the `Command Line Tool`_ and `Python Module`_ via::\n\n   pip install crossplane\n\n\nCommand Line Tool\n=================\n\n.. code-block::\n\n   usage: crossplane <command> [options]\n\n   various operations for nginx config files\n\n   optional arguments:\n     -h, --help            show this help message and exit\n\n   commands:\n     parse                 parses a json payload for an nginx config\n     lex                   lexes tokens from an nginx config file\n     minify                removes all whitespace from an nginx config\n     format                formats an nginx config file\n     help                  show help for commands\n\nCurrently, the only way to run this script is to clone this repository, but soon it will be\nautomatically installed when installing the package via pip.\n\ncrossplane parse\n----------------\n\nThis command will take a path to a main NGINX config file as input, then parse the entire config into\nthe schema defined below, and dumps the entire thing as a JSON payload.\n\n.. code-block::\n\n   usage: crossplane parse [-h] [-o OUT] [-i NUM] [--no-catch] [--tb-onerror]\n                           filename\n\n   parses a json payload for an nginx config\n\n   positional arguments:\n     filename              the nginx config file\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     -o OUT, --out OUT     write output to a file\n     -i NUM, --indent NUM  number of spaces to indent output\n     --no-catch            only collect first error in file\n     --tb-onerror          include tracebacks in config errors\n\nSchema\n~~~~~~\n\n**Response Object**\n\n.. code-block:: js\n\n    {\n        \"status\": String, // \"ok\" or \"failed\" if \"errors\" is not empty\n        \"errors\": Array,  // aggregation of \"errors\" from Config objects\n        \"config\": Array   // Array of Config objects\n    }\n\n**Config Object**\n\n.. code-block:: js\n\n    {\n        \"file\": String,   // the full path of the config file\n        \"status\": String, // \"ok\" or \"failed\" if errors is not empty array\n        \"errors\": Array,  // Array of Error objects\n        \"parsed\": Array   // Array of Directive objects\n    }\n\n**Directive Object**\n\n.. code-block:: js\n\n    {\n        \"directive\": String, // the name of the directive\n        \"line\": Number,      // integer line number the directive started on\n        \"args\": Array,       // Array of String arguments\n        \"includes\": Array,   // Array of integers (included iff this is an include directive)\n        \"block\": Array       // Array of Directive Objects (included iff this is a block)\n    }\n\n.. note::\n\n   If this is an ``include`` directive, an ``\"includes\"`` value will be used that holds an Array of indices of the configs that are included by this directive.\n\n   If this is a block directive, a ``\"block\"`` value will be used that holds an Array of more Directive Objects that define the block context.\n\n**Error Object**\n\n.. code-block:: js\n\n    {\n        \"file\": String,     // the full path of the config file\n        \"line\": Number,     // integer line number the directive that caused the error\n        \"error\": String,    // the error message\n        \"callback\": Object  // only included iff an \"onerror\" function was passed to parse()\n    }\n\n.. note::\n\n   If the ``--tb-onerror`` flag was used by crossplane parse, ``\"callback\"`` will contain a string that represents the traceback that the error caused.\n\nExample\n~~~~~~~\n\nThe main NGINX config file is at ``/etc/nginx/nginx.conf``:\n\n.. code-block:: nginx\n\n   events {\n       worker_connections 1024;\n   }\n\n   http {\n       include conf.d/*.conf;\n   }\n\nAnd this config file is at ``/etc/nginx/conf.d/servers.conf``:\n\n.. code-block:: nginx\n\n   server {\n       listen 8080;\n       location / {\n           try_files 'foo bar' baz;\n       }\n   }\n\n   server {\n       listen 8081;\n       location / {\n           return 200 'success!';\n       }\n   }\n\nSo then if you run this::\n\n   crossplane parse --indent=4 /etc/nginx/nginx.conf\n\nThe prettified JSON output would look like this:\n\n.. code-block:: js\n\n   {\n       \"status\": \"ok\",\n       \"errors\": [],\n       \"config\": [\n           {\n               \"file\": \"/etc/nginx/nginx.conf\",\n               \"status\": \"ok\",\n               \"errors\": [],\n               \"parsed\": [\n                   {\n                       \"directive\": \"events\",\n                       \"line\": 1,\n                       \"args\": [],\n                       \"block\": [\n                           {\n                               \"directive\": \"worker_connections\",\n                               \"line\": 2,\n                               \"args\": [\n                                   \"1024\"\n                               ]\n                           }\n                       ]\n                   },\n                   {\n                       \"directive\": \"http\",\n                       \"line\": 5,\n                       \"args\": [],\n                       \"block\": [\n                           {\n                               \"directive\": \"include\",\n                               \"line\": 6,\n                               \"args\": [\n                                   \"conf.d/*.conf\"\n                               ],\n                               \"includes\": [\n                                   1\n                               ]\n                           }\n                       ]\n                   }\n               ]\n           },\n           {\n               \"file\": \"/etc/nginx/conf.d/servers.conf\",\n               \"status\": \"ok\",\n               \"errors\": [],\n               \"parsed\": [\n                   {\n                       \"directive\": \"server\",\n                       \"line\": 1,\n                       \"args\": [],\n                       \"block\": [\n                           {\n                               \"directive\": \"listen\",\n                               \"line\": 2,\n                               \"args\": [\n                                   \"8080\"\n                               ]\n                           },\n                           {\n                               \"directive\": \"location\",\n                               \"line\": 3,\n                               \"args\": [\n                                   \"/\"\n                               ],\n                               \"block\": [\n                                   {\n                                       \"directive\": \"try_files\",\n                                       \"line\": 4,\n                                       \"args\": [\n                                           \"foo bar\",\n                                           \"baz\"\n                                       ]\n                                   }\n                               ]\n                           }\n                       ]\n                   },\n                   {\n                       \"directive\": \"server\",\n                       \"line\": 8,\n                       \"args\": [],\n                       \"block\": [\n                           {\n                               \"directive\": \"listen\",\n                               \"line\": 9,\n                               \"args\": [\n                                   \"8081\"\n                               ]\n                           },\n                           {\n                               \"directive\": \"location\",\n                               \"line\": 10,\n                               \"args\": [\n                                   \"/\"\n                               ],\n                               \"block\": [\n                                   {\n                                       \"directive\": \"return\",\n                                       \"line\": 11,\n                                       \"args\": [\n                                           \"200\",\n                                           \"success!\"\n                                       ]\n                                   }\n                               ]\n                           }\n                       ]\n                   }\n               ]\n           }\n       ]\n   }\n\ncrossplane parse (advanced)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis tool uses two flags that can change how ``crossplane`` handles errors.\n\nThe first, ``--no-catch``, can be used if you'd prefer that crossplane quit parsing after the first error it finds.\n\nThe second, ``--tb-onerror``, will add a ``\"callback\"`` key to all error objects in the JSON output, each containing\na string representation of the traceback that would have been raised by the parser if the exception had not been caught.\nThis can be useful for logging purposes.\n\ncrossplane lex\n--------------\n\nThis command takes an NGINX config file, splits it into tokens by removing whitespace and comments, and dumps the list of tokens as a JSON array.\n\n.. code-block::\n\n   usage: crossplane lex [-h] [-o OUT] [-i NUM] [-n] filename\n\n   lexes tokens from an nginx config file\n\n   positional arguments:\n     filename              the nginx config file\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     -o OUT, --out OUT     write output to a file\n     -i NUM, --indent NUM  number of spaces to indent output\n     -n, --line-numbers    include line numbers in json payload\n\nExample\n~~~~~~~\n\nPassing in this NGINX config file at ``/etc/nginx/nginx.conf``:\n\n.. code-block:: nginx\n\n   events {\n       worker_connections 1024;\n   }\n\n   http {\n       include conf.d/*.conf;\n   }\n\nBy running::\n\n   crossplane lex /etc/nginx/nginx.conf\n\nWill result in this JSON output:\n\n.. code-block:: js\n\n   [\"events\",\"{\",\"worker_connections\",\"1024\",\";\",\"}\",\"http\",\"{\",\"include\",\"conf.d/*.conf\",\";\",\"}\"]\n\nHowever, if you decide to use the ``--line-numbers`` flag, your output will look like:\n\n.. code-block::\n\n   [[\"events\",1],[\"{\",1],[\"worker_connections\",2],[\"1024\",2],[\";\",2],[\"}\",3],[\"http\",5],[\"{\",5],[\"include\",6],[\"conf.d/*.conf\",6],[\";\",6],[\"}\",7]]\n\ncrossplane format\n-----------------\n\nThis is a quick and dirty tool that uses `crossplane parse`_ internally to format an NGINX config file.\nCurrently it removes all blank lines and comments, but this may get improved more in the future if there's\ndemand for it. As of now, it serves the purpose of demonstrating what you can do with ``crossplane``'s parsing abilities.\n\n.. code-block::\n\n   usage: crossplane format [-h] [-o OUT] [-i NUM | -t] filename\n\n   formats an nginx config file\n\n   positional arguments:\n     filename              the nginx config file\n\n   optional arguments:\n     -h, --help            show this help message and exit\n     -o OUT, --out OUT     write output to a file\n     -i NUM, --indent NUM  number of spaces to indent output\n     -t, --tabs            indent with tabs instead of spaces\n\ncrossplane minify\n-----------------\n\nThis is a simple and fun little tool that uses `crossplane lex`_ internally to remove as much whitespace from\nan NGINX config file as possible without affecting what it does. It can't imagine it will have much of a use to\nmost people, but it demonstrates the kinds of things you can do with ``crossplane``'s lexing abilities.\n\n.. code-block::\n\n   usage: crossplane minify [-h] [-o OUT] filename\n\n   removes all whitespace from an nginx config\n\n   positional arguments:\n     filename           the nginx config file\n\n   optional arguments:\n     -h, --help         show this help message and exit\n     -o OUT, --out OUT  write output to a file\n\n\nPython Module\n=============\n\nIn addition to the command line tool, you can import ``crossplane`` as a python module.\nThere are two basic functions that the module will provide you: ``parse`` and ``lex``.\n\ncrossplane.parse()\n------------------\n\n.. code-block:: python\n\n   import crossplane\n   crossplane.parse('/etc/nginx/nginx.conf')\n\nThis will return the same payload as described in the `crossplane parse`_ section, except it will be\nPython dicts and not one giant JSON string.\n\ncrossplane.lex()\n----------------\n\n.. code-block:: python\n\n   import crossplane\n   crossplane.lex('/etc/nginx/nginx.conf')\n\n``crossplane.lex`` generates 2-tuples. Inserting these pairs into a list will result in a long list similar\nto what you can see in the `crossplane lex`_ section when the ``--line-numbers`` flag is used, except it\nwill obviously be a Python list of tuples and not one giant JSON string.\n\n\nContributing\n============\n\nContributions are welcome, and they are greatly appreciated! Every\nlittle bit helps, and credit will always be given.\n\nYou can contribute in many ways:\n\nTypes of Contributions\n----------------------\n\nReport Bugs\n~~~~~~~~~~~\n\nReport bugs at https://github.com/nginxinc/crossplane/issues.\n\nIf you are reporting a bug, please include:\n\n* Your operating system name and version.\n* Any details about your local setup that might be helpful in troubleshooting.\n* Detailed steps to reproduce the bug.\n\nFix Bugs\n~~~~~~~~\n\nLook through the GitHub issues for bugs. Anything tagged with \"bug\"\nis open to whoever wants to implement it.\n\nImplement Features\n~~~~~~~~~~~~~~~~~~\n\nLook through the GitHub issues for features. Anything tagged with \"feature\"\nis open to whoever wants to implement it.\n\nWrite Documentation\n~~~~~~~~~~~~~~~~~~~\n\ncrossplane could always use more documentation, whether as part of the\nofficial crossplane docs, in docstrings, or even on the web in blog posts,\narticles, and such.\n\nSubmit Feedback\n~~~~~~~~~~~~~~~\n\nThe best way to send feedback is to file an issue at https://github.com/nginxinc/crossplane/issues.\n\nIf you are proposing a feature:\n\n* Explain in detail how it would work.\n* Keep the scope as narrow as possible, to make it easier to implement.\n* Remember that this is a volunteer-driven project, and that contributions are welcome :)\n\nGet Started\n-----------\n\nReady to contribute? Here's how to set up `crossplane` for\nlocal development.\n\n#. Fork_ the `crossplane` repo on GitHub.\n#. Clone your fork locally::\n\n    git clone git@github.com:your_name_here/crossplane.git\n\n#. Create a branch for local development::\n\n    git checkout -b name-of-your-bugfix-or-feature\n\n   Now you can make your changes locally.\n\n#. When you're done making changes, check that your changes pass style and unit\n   tests, including testing other Python versions with tox::\n\n    tox\n\n   To get tox, just pip install it.\n\n#. Commit your changes and push your branch to GitHub::\n\n    git add .\n    git commit -m \"Your detailed description of your changes.\"\n    git push origin name-of-your-bugfix-or-feature\n\n#. Submit a pull request through the GitHub website.\n\n.. _Fork: https://github.com/nginxinc/crossplane/fork\n\nPull Request Guidelines\n-----------------------\n\nBefore you submit a pull request, check that it meets these guidelines:\n\n#. The pull request should include tests.\n#. The pull request should work for CPython 2.6, 2.7, 3.3, and 3.6, and for PyPy.\n   Check https://travis-ci.org/nginxinc/crossplane under pull requests for\n   active pull requests or run the ``tox`` command and make sure that the\n   tests pass for all supported Python versions.\n#. Make sure to add yourself to the Contributors list in AUTHORS.rst :)\n\n\n.. #. If the pull request adds functionality, the docs should be updated. Put\n      your new functionality into a function with a docstring, and add the\n      feature to the list in README.rst.\n\nTips\n----\n\nTo run a subset of tests::\n\n    tox -e <env> -- py.test <test>\n\nTo run all the test environments in *parallel* (you need to ``pip install detox``)::\n\n    detox\n\n.. |Build| image:: https://img.shields.io/travis/nginxinc/crossplane.svg\n   :target: https://travis-ci.org/nginxinc/crossplane\n\n.. |Release| image:: https://img.shields.io/github/release/nginxinc/crossplane.svg\n   :target: https://github.com/nginxinc/crossplane/releases\n\n.. |License| image:: https://img.shields.io/pypi/l/crossplane.svg\n   :target: https://pypi.python.org/pypi/crossplane\n\n.. |Versions| image:: https://img.shields.io/pypi/pyversions/crossplane.svg\n   :target: https://pypi.python.org/pypi/crossplane\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/nginxinc/crossplane",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "crossplane",
    "platform": "",
    "project_url": "https://pypi.org/project/crossplane/",
    "release_url": "https://pypi.org/project/crossplane/0.1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Reliable and fast NGINX configuration file parser.",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c0bd7414f9e1882029ec6668581ca56b",
          "sha256": "9ca8932def3c593e2963072cf923876f79cce2c4780d3bc0146780948fc44402"
        },
        "downloads": -1,
        "filename": "crossplane-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0bd7414f9e1882029ec6668581ca56b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 24303,
        "upload_time": "2017-10-24T01:51:55",
        "url": "https://files.pythonhosted.org/packages/91/00/03de97d0ee46ad24d19d75a3d553fc0f7e4e1dcadfdc80e131c8f95f4ee5/crossplane-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9a3350289fe41881984496b2f32b863a",
          "sha256": "cb5e9de6ec8f87d5190cedbdf3b8653d5f0606c6cf49ed150e3af79a78626bd0"
        },
        "downloads": -1,
        "filename": "crossplane-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9a3350289fe41881984496b2f32b863a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28332,
        "upload_time": "2017-10-24T01:51:58",
        "url": "https://files.pythonhosted.org/packages/43/f5/af2ea7e4c6ad4a7702c731a485a37963edcc3f784ddf8e4726ee7ec59460/crossplane-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "156f47fa465978f8661741bd0410b9ea",
          "sha256": "2b9b08e9f0dfd055c40d2f4921c107ec246c4d1a8bad378eedb26b41116c7233"
        },
        "downloads": -1,
        "filename": "crossplane-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "156f47fa465978f8661741bd0410b9ea",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 24508,
        "upload_time": "2017-10-25T22:15:40",
        "url": "https://files.pythonhosted.org/packages/5c/ec/dc85dfca077c5f04f2986de417922b0381fb8cb9da020a25a8989aae40b6/crossplane-0.1.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "01adf446ed9bf8ef1f38273de9fe30c2",
          "sha256": "f143c8cca2afac38f84bbdcc0988d9a0e9003ee71fc3850e988445e4652c70c8"
        },
        "downloads": -1,
        "filename": "crossplane-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "01adf446ed9bf8ef1f38273de9fe30c2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28456,
        "upload_time": "2017-10-25T22:15:42",
        "url": "https://files.pythonhosted.org/packages/f5/ce/fbbb02b4f90d52c2bf9b8c1a2bf1c332cb811977b1f1145236314a77b05f/crossplane-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ef93cd708b2fdf603fc055ec69c17368",
          "sha256": "fc13c937eb22cecf7f9adef5dd37e9a1ce98ab53a5ecf75525d56370433b77c3"
        },
        "downloads": -1,
        "filename": "crossplane-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef93cd708b2fdf603fc055ec69c17368",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 24736,
        "upload_time": "2018-01-05T20:08:00",
        "url": "https://files.pythonhosted.org/packages/d0/0d/fb20192ce5a6dae9f21350950a9f0b8a4e5c7dec42b26d374967e40d5c09/crossplane-0.1.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "faa8aa7c288cb81e866469c87abfce97",
          "sha256": "bb4ae9a93784114203d50b49db7b86e0e9e970240f187cd80f85016ebd3270a0"
        },
        "downloads": -1,
        "filename": "crossplane-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "faa8aa7c288cb81e866469c87abfce97",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29038,
        "upload_time": "2018-01-05T20:08:02",
        "url": "https://files.pythonhosted.org/packages/83/cc/669f57e3fe6b637f16bf714f725365c99d64f5f9750fed49a8d101cf2d7c/crossplane-0.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ef93cd708b2fdf603fc055ec69c17368",
        "sha256": "fc13c937eb22cecf7f9adef5dd37e9a1ce98ab53a5ecf75525d56370433b77c3"
      },
      "downloads": -1,
      "filename": "crossplane-0.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ef93cd708b2fdf603fc055ec69c17368",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 24736,
      "upload_time": "2018-01-05T20:08:00",
      "url": "https://files.pythonhosted.org/packages/d0/0d/fb20192ce5a6dae9f21350950a9f0b8a4e5c7dec42b26d374967e40d5c09/crossplane-0.1.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "faa8aa7c288cb81e866469c87abfce97",
        "sha256": "bb4ae9a93784114203d50b49db7b86e0e9e970240f187cd80f85016ebd3270a0"
      },
      "downloads": -1,
      "filename": "crossplane-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "faa8aa7c288cb81e866469c87abfce97",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 29038,
      "upload_time": "2018-01-05T20:08:02",
      "url": "https://files.pythonhosted.org/packages/83/cc/669f57e3fe6b637f16bf714f725365c99d64f5f9750fed49a8d101cf2d7c/crossplane-0.1.2.tar.gz"
    }
  ]
}