{
  "info": {
    "author": "Victor Wagner",
    "author_email": "vitus@wagner.pp.ru",
    "bugtrack_url": "",
    "classifiers": [],
    "description": "ctypescrypto\n============\n\nPython interface to some openssl function based on ctypes module\n\nThis module is based on works from\n\nhttp://code.google.com/p/ctypescrypto/\n\nmost recent version can be checked out from\n\nhttps://github.com/vbwagner/ctypescrypto.git\n\nRationale\n---------\n\nWhy have yet another crypto extension for Python? There is pyopenssl,\nm2crypto, hashlib in the standard library and many more.\n\nBut most of these extension implement interfaces to particular set of\ncryptoalgorthms. This extension takes an another approach \u2014 it uses\nalgorithm-agnostic EVP layer whenever possible, and so support any\nalgorithms which are supported by underlying library, even this\nalgorithms are implemented in the loadable modules (engines). Algorithms\nwhich you've just added to library, should be supported too.\n\nAlso, this extension takes some care of correctly converting textual\ninformation from ASN.1 structures into unicode.\n\n\nDigest calculation\n------------------\n\nModule **ctypescrypto.digest** contain **new()** function which produces\nobjects simular to python **hashlib** module objects. \n\nOn the systems where hashlib is linked with libcrypto dynamically,\nhashlib even able to make use of digest types, provided by loadable\nengines. \n\nThis module would utilize same copy of libcrypto library as other\nctypescrypto modules, so it would work with engine-provided digests.\n\nAdditionally there is **DigestType** class which may be needed to\nconstruct CMS SignedData objects or add signatures to them.\n\n\nMAC calculation\n---------------\n\nMac is Message Authentication Code - it is like keyed digest, which\ndepends not only on message, but also on key, which should be used both\nwhen initially computing MAC and when verifying it. MACs can be viewed\nas \"digital signatures with symmetric keys\".\n\nMost common type of MAC is HMAC (i.e. hash-based MAC), described in \n[RFC 2104](https://tools.ietf.org/html/rfc2104), but there are other,\nfor instance [GOST 28147-89](https://tools.ietf.org/html/rfc5830) defines MAC based on symmetric cipher.\nAlso GSM 0348 uses DES symmetric cipher as MAC. OpenSSL supports\nGOST mac via loadable engine module, but doesn't seem to support any\nnon-HMAC MAC in the core. So, MAC is only test in the test suite which\nrequires loadable engine.\n\nSymmetric ciphers\n-----------------\n\nModule *ctypescrypto.cipher* contain *new()* function which provides\nway to create cipher objects. Cipher padding can be configure later.\nThis object provides methods *update* and *finish* which allows to\nencrypt/decrypt data. All ciphers, supported by your version of OpenSSL\nand its loadable engines are supported.\n\nAdditionally the **CipherType** class instances may be used directly to\npass to other functions such as CMS EnvelopedData or EncryptedData\n**create**\n\nPublic key operations\n---------------------\n\nModule **ctypescrypto.pkey** provides **PKey** object, which represents\npublic/private key pair or just public key. With this object you can\nsign data, derive shared key and verify signatures.\n\nThis is quite low-level object, which can be used to implement some\nnon-standard protocols and operations.\n\nIt is possible to extract public key from the certificate as PKey\nobject (see below).\n\nAdditional module **ctypescrypto.ec** allows to create **PKey** objects\nwith elliptic curve keys from just raw secret key as byte buffer or\npython big integer.\n\nX509 certificates\n-----------------\n\nCertificates are cryptographically signed documents, which tie together\npublic key and some attributes of key owner (certificate subject).\nCertificates are signed by some trusted organizations called Certificate\nAuthorities (one which have issued given certificate, is called\ncertificate issuer). Your browser or operating system typically have\npredefined store of the trusted CA certificates (although nothing\nprevent you from running your own CA using openssl command line utility,\nand trust only it). \n\n\n\nCertificates are described in [RFC 5280](http://tools.ietf.org/html/rfc5280)\n\nModule **ctypescrypto.x509** contains objects **X509** which represents\ncertificate (and can be constructed from string, contained PEM\nor DER certificate) and object **X509Store** which is a store of trusted\nCA certificates which can be used to high-level signature verifications\n(i.e. in PKCS7/CMS messages).\n\nThere is no support for creating and signing certificates, i.e. to\nperform Certificate Authority functions. This library for now focuses on\ncryptography user functionality. \n\nCertificate has properties corresponding to its subject and issuer\nnames, public key (of course it is PKey object described above) and\nserial number. Subject and issuer names can be indexed by OIDs or by\nposition of field. Unicode in the names is supported.\n\nSupport for visualising certificate extensions is minimal for now.\nExtension object can be converted into string, extension Oid can be\nretrieved and critical flag is checked.\n\n**StackOfX509** implements collection of certificates, necessary for\nsome operations with CMS and certificate verification.\n\nCMS documents\n-------------\n\nCMS stands for Cryptographic Message Syntax. It is defined in the\n[RFC 5652](http://tools.ietf.org/html/rfc5652).\nCMS defines several types of documents. There is **SignedData**,\nwhich can be read by anyone, but is protected from authorized changes\nby digital signature of its author. There is **EnvelopedData** protected\nfrom unauthorized reading by cipher and allowed to be read only by\nowners of certain private keys, and there is **EncryptedData**, which\nare protected by symmetric cipher keys.\n\n\nThere is basic factory function **CMS()**, which parses PEM or der\nrepresentation of cryptographic message and generates appropriate\nobject. There are **SignedData**, **EnvelopedData** and\n**EncryptedData** classes. Each class has static method **create**\nallowing to create this subtype of message from raw data and appropriate\nkeys and certificates.\n\n**SignedData** has **verify()** method. **EnvelopedData** and\n**EncryptedData** - **decrypt** method.\n\nUnfortunately, **SignedAndEnvelopedData** seems to be unsupported in\nlibcrypto as of version 1.0.1 of OpenSSL.\n\nPBKDF2\n------\n\nProvides interface to password based key derivation function\nInterface slightly differs from the **hashlib.pbkdf2_hmac** function,\nwhich have appeared in Python 2.7.8 but functionality is just same,\nalthough OpenSSL implementation might be faster.\n\n\n\nOID database\n------------\n\nOpenSSL contains internal object identifiers (OID) database. Each OID\nhave apart from dotted-decimal representation long name, short name and\nnumeric identifier. Module **ctypescrypto.oid** provides interface to the\ndatabase. **Oid** objects store numeric identifier internally and can\nreturn both long and short name and dotted-decimal representation.\n\nBIO library\n-----------\n\nOpenSSL contain BIO (basic input-output) abstraction. And all object\nserialization/deserialization use this library. Also human-readable\nrepresentation of  ASN.1 structures use this library extensively. So,\nwe've to develop python object which allow to read from python string\nvia BIO abstraction or write to buffer, which can be returned as python\nstring or unicode object. \n\nExceptions\n----------\n\nExceptions, used in the **ctypescrypto** to report problems are tied\nclosely with OpenSSL error-reporting functions, so if such an exception\noccurs, as much as possibly information from inside libcrypto would be\navailable in the Python\n\nEngine support\n--------------\n\nThere is just one function **ctypescrypt.engine.set_default**, which loads \nspecified engine by id and makes it default for all algorithms,\nsupported by it. It is enough for me to use Russian national\ncryptographic algorithms, provided by **gost** engine.\n\nTest Suite\n----------\n\nTests can be run using\n\n    python setup.py test\n\nTest suite is fairly incomplete. Contributions are welcome.\n\nNote that you need properly installed OpenSSL library with set of CA\ncertificates in the certs directory, otherwise default certstore test\nwould fail.\n\nYou also need gost engine to be available (check with \n\n   openssl engine gost\n\n) otherwise mac test would crash with error. Unfortunately there is no\nnon-HMAC MAC in the openssl core, so GOST MAC is only option.\n\nPossible future enhancements\n----------------------------\n\n1. Creation and signing of the certificate requests (PKCS#10)\n2. Parsing and analyzing CRLs\n3. OCSP ([RFC 6960](http://tools.ietf.org/html/rfc6960))request creation and response parsing\n4. Timestamping ([RFC 3161](http://tools.ietf.org/html/rfc3161))\nsupport.\n\n  vim: spelllang=en tw=72\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/vbwagner/ctypescrypto",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "ctypescrypto",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/ctypescrypto/",
    "release_url": "https://pypi.org/project/ctypescrypto/0.4.2/",
    "requires_python": null,
    "summary": "CTypes-based interface for some OpenSSL libcrypto features",
    "version": "0.4.2"
  },
  "releases": {
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "408eb067dfdc2b9d1174434206f348ef",
          "sha256": "d9b6dc5493be7a4f1ad08263e4d4a773585d07357cf5414393c3fadd7ba874d8"
        },
        "downloads": 2068,
        "filename": "ctypescrypto-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "408eb067dfdc2b9d1174434206f348ef",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39266,
        "upload_time": "2015-06-29T09:20:30",
        "url": "https://files.pythonhosted.org/packages/d1/12/de78f8ba6f16982828f0c463386f303e5a5851f984a78753466220e3f357/ctypescrypto-0.3.0.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2edf217a3a507f7f8061234320d171c4",
          "sha256": "961f67a2f00e7d8814e9567201d97f23c485c005cf3e4f11a24a9c1185e28208"
        },
        "downloads": 911,
        "filename": "ctypescrypto-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2edf217a3a507f7f8061234320d171c4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39112,
        "upload_time": "2015-09-10T12:23:51",
        "url": "https://files.pythonhosted.org/packages/9a/db/e90f97ace88bc475d66a905c7994d7b328fd37e12f7ab7ba47959199a8f7/ctypescrypto-0.3.1.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e2f2b2b274bb428643ad3bb8e7dfb942",
          "sha256": "67b9c1deb7b67d9aae87352c9b2d9a79307f8a451bdd91e6a09385d19e60e4ec"
        },
        "downloads": 149,
        "filename": "ctypescrypto-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e2f2b2b274bb428643ad3bb8e7dfb942",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39015,
        "upload_time": "2016-02-06T19:37:44",
        "url": "https://files.pythonhosted.org/packages/85/5c/030bdfd92fe0b6a4c4d932ff1b64cc7ce5b7f06114e93cf87dc0633ca3cf/ctypescrypto-0.4.0.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1bfd9a4c4321c25d0d4fc1717451c3ad",
          "sha256": "3c52f711ebfd510f830e7c33ff0a0f72b578e374ad4ba45dd999e29ccd6d6538"
        },
        "downloads": 525,
        "filename": "ctypescrypto-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1bfd9a4c4321c25d0d4fc1717451c3ad",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39883,
        "upload_time": "2016-06-22T19:05:08",
        "url": "https://files.pythonhosted.org/packages/4b/d8/7da2806028b4932a6440b18271934b257626dbc4769fd1779d43e2ea8387/ctypescrypto-0.4.1.tar.gz"
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8dff494df989dbcc0c5a598bb81106b9",
          "sha256": "b29ec67268e5a13270b107c5dfb63c02e16bb5cfcfa89e92354492e36034d0f0"
        },
        "downloads": 85,
        "filename": "ctypescrypto-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8dff494df989dbcc0c5a598bb81106b9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 42300,
        "upload_time": "2016-11-15T21:27:32",
        "url": "https://files.pythonhosted.org/packages/13/cc/5e9aa65667319f8ac8a90472718f1b90353de75aa3e0274004ca068d57cb/ctypescrypto-0.4.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8dff494df989dbcc0c5a598bb81106b9",
        "sha256": "b29ec67268e5a13270b107c5dfb63c02e16bb5cfcfa89e92354492e36034d0f0"
      },
      "downloads": 85,
      "filename": "ctypescrypto-0.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8dff494df989dbcc0c5a598bb81106b9",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 42300,
      "upload_time": "2016-11-15T21:27:32",
      "url": "https://files.pythonhosted.org/packages/13/cc/5e9aa65667319f8ac8a90472718f1b90353de75aa3e0274004ca068d57cb/ctypescrypto-0.4.2.tar.gz"
    }
  ]
}