{
  "info": {
    "author": "Distributed ci team.",
    "author_email": "distributed-ci@redhat.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Topic :: System :: Distributed Computing"
    ],
    "description": "Distributed CI control server\n=============================\n\nThis repository is used for the development of the API of Distributed CI.\nIt contains the source code, tests, development and building scripts.\n\nGetting started\n---------------\nIf you are using the development environment provided\n`here <https://github.com/redhat-cip/dci-dev-env>`__ you can directly start at\nstep 5.\n\nTo run the api in development mode follow those steps:\n\n1. clone the repository: http://softwarefactory-project.io/r/dci-control-server\n2. ensure that a postgresql database is running and accessible on the URI\n   defined in the ``src/settings.py`` (if no database is running see\n   `database installation`_)\n3. ensure that an elastic search is running and accessible on the URI\n   defined in the ``src/settings.py`` (if no elastic search is running see\n   `elastic search installation`_)\n4. install the python requirements: ``pip install -r requirements.txt``\n5. provision the database: ``./scripts/db_provisioning.py``\n   (BEWARE: it will erase the previous db)\n6. run the dev server: ``./scripts/runtestserver.py``\n\nDatabase installation\n---------------------\n\nAssuming that we are running on a fedora based distribution here are the steps\nfor installing the database which will be used by the API and its tests.\n\ninstall and configure PostgreSQL:\n\n.. code-block:: bash\n\n  $ yum install postgresql-server postgresql-contrib\n  $ postgresql-setup initdb\n\nAllow local account with password:\n\n.. code-block:: bash\n\n  $ editor /var/lib/pgsql/data/pg_hba.conf\n\nAdd the following line on the top of the file:\n\n.. code-block:: bash\n\n  host    all             all             127.0.0.1/32            md5\n\nRestart PostgreSQL with the new settings:\n\n.. code-block:: bash\n\n  $ systemctl restart postgresql.service\n\nConnect with the postgres user:\n\n.. code-block:: bash\n\n  $ sudo su - postgres\n  $ createuser -P dci\n  Enter password for new role:\n  Enter it again:\n\n  $ createdb dci_control_server -O dci\n\nElastic search installation\n---------------------------\n\nAssuming that we are running on a fedora based distribution here are the steps\nfor installing the elastic search database which will be used by the API and\nits tests.\n\nInstall the elastic search repo keys\n\n.. code-block:: bash\n\n  $ rpm --import https://packages.elastic.co/GPG-KEY-elasticsearch\n\nInstall the repository by copying the following content into\n``/etc/yum.repos.d/elasticsearch.repo``\n\n.. code-block:: ini\n\n  [elasticsearch-2.x]\n  name=Elasticsearch repository for 2.x packages\n  baseurl=http://packages.elastic.co/elasticsearch/2.x/centos\n  gpgcheck=1\n  gpgkey=http://packages.elastic.co/GPG-KEY-elasticsearch\n  enabled=1\n\nUpdate and install the required packages, then start elasticsearch\n\n.. code-block:: bash\n\n  $ dnf update -y\n  $ dnf install -y elasticsearch java-1.8.0-openjdk hostname\n  $ /usr/share/elasticsearch/bin/elasticsearch\n\n\nREST interface\n--------------\n\nThe REST API is available for any type of objects. You can browse the database on http://127.0.0.1:5000/.\n\nEndpoints\n~~~~~~~~~\n\nThe resources of DCI can be accessed through our API in a Restful way.\nCurrently, only the json output format is supported.\n\nEach resource provides two endpoints, one for listing: `/resources/`,\none for fetching a dedicated element: `/resources/<resource_id>/`.\n\nOn those endpoints we can use some parameters on the GET method to filter,\nsearch or complete results.\n\nOn the listing endpoint:\n\n``/resources?sort=field1,-field2&limit=20&offset=0&where=field1:foo,field2:bar&embed:resource1,resource2``\n\n* **sort** parameter will allow the user to sort the listing output according\n  to fields, the sorting is done by ascending results, if the field is\n  prefixed with ``-``, the sorting is done descending. The order also matter,\n  it sorts the first field, when its done it sorts the second field with the\n  resources which have the same first field values, and so on. In our example,\n  it will sort ascending on field1 and on resources which have the same value\n  for field1 will sort descending on field2.\n\n* **limit** parameter is usually used with the offset one in order to paginate\n  results. It will limit the number of resources retrivied, by default it is\n  set to 20 entries, but you can augment that value. Be careful, the more you\n  fetch the longer the http call can be.\n\n* **offset** parameter is the second pagination parameter, this will indicate\n  at which entry we want to start the listing in the order defined by default\n  or with other parameters.\n\n* **where** parameter is here to filter the resources according to a field\n  value. In this example we will retrieve the resources which field1 is equal\n  to foo and field2 equal to bar.\n\n* **embed** parameter is for shipping linked resources in the result, in this\n  example, the result will contain the resource1 and resource2 object into the\n  resources fetched. Like the paginations parameter be careful when using this\n  parameter as it can considerably slow down the http request.\n\nOn the resource endpoint:\n\n``/resources/<resource_id>?embed:resource1,resource2``\n\n* **embed** parameter is the only one available at this endpoint and provides\n  the same features as the one in the listing endpoint.\n\nConcurrency control with etag:\n\nThe REST API support etag headers, each request result contains the HTTP\nheader 'ETag' which is a fingerprint of the requested resource.\n\nWhen a user wants to update or delete a resource then the API requires the\nuser to provide the HTTP header 'If-match' with the corresponding etag in\norder to prevent concurrency errors.\n\nThis mechanism ensure that the user has read the most up to date value of the\nresource before to update/delete it.\n\nExample:\n\n.. code-block:: bash\n\n   $ http POST http://127.0.0.1:5000/api/v1/componenttypes name=kikoolol\n   HTTP/1.0 201 CREATED\n   Content-Length: 217\n   Content-Type: application/json\n   Date: Fri, 13 Nov 2015 12:46:18 GMT\n   ETag: 8f5dc53c14b865d2c2f0ca6654a4a5c2\n   Server: Werkzeug/0.10.4 Python/2.7.6\n\nHere is the etag 'ETag: 8f5dc53c14b865d2c2f0ca6654a4a5c2'.\n\n.. code-block:: bash\n\n  $ http PUT http://127.0.0.1:5000/api/v1/componenttypes/kikoolol name=kikoolol2\n  HTTP/1.0 412 PRECONDITION FAILED\n  Content-Length: 92\n  Content-Type: application/json\n  Date: Fri, 13 Nov 2015 12:47:33 GMT\n  Server: Werkzeug/0.10.4 Python/2.7.6\n  {\n      \"message\": \"'If-match' header must be provided\",\n      \"payload\": {},\n      \"status_code\": 412\n  }\n\nHere an update request must provide the 'If-match' header.\n\n.. code-block:: bash\n\n    $ http PUT http://127.0.0.1:5000/api/v1/componenttypes/kikoolol \\\n    If-match:8f5dc53c14b865d2c2f0ca6654a4a5c2 name=kikoolol2\n    HTTP/1.0 204 NO CONTENT\n    Content-Length: 0\n    Content-Type: application/json\n    Date: Fri, 13 Nov 2015 12:48:45 GMT\n    ETag: 71c076a7ccda10632a40be60ba065511\n    Server: Eve/0.6 Werkzeug/0.10.4 Python/2.7.6\n\nThe update succeed and the etag has been updated.\n\nComponent Type\n**************\n\nobject attributes:\n\n* id\n* created_at\n* updated_at\n* name\n\n\nlisting url: ``/api/v1/componenttypes``\n\n* ``GET``: get all the components type\n\n  * response: 200 {'componenttypes': [{componenttype1}, {componenttype2}]}\n\n* ``POST``: create a component type element\n\n  * data: {'name': ...}\n  * response: 201 {'componenttype': {componenttype}}\n\nresource url: ``/api/v1/componenttypes/<componenttype_id>``\n\n* ``GET``: retrieve the dedicated component type\n\n  * response: 200 {'componenttype': {componenttype}}\n\n* ``PUT``: update the given component type\n\n  * data: {'name': ...}\n  * response: 204 {'componenttype': {componentype}}\n\n* ``DELETE``: remove the given component type\n\n  * response: 204\n\n\nComponent\n*********\n\nobject attributes\n\n* id\n* created_at\n* updated_at\n* name\n* componenttype\n\nlisting url: ``/api/v1/components``\n\n* ``GET``: get all the components\n\n  * response: 200 {'components': [{component1}, {component2}]}\n\n* ``POST``: create a component element\n\n  * data: {'name': ..., 'componenttype': ...}\n  * response: 201 {'component': {component}}\n\nresource url: ``/api/v1/components/<component_id>``\n\n* ``GET``: retrieve the dedicated component\n\n  * response: 200 {'component': {component}}\n\n* ``PUT``: update the given component\n\n  * data: {'name': ..., 'componenttype': ...}\n  * response: 201 {'component': {component}}\n\n* ``DELETE``: remove the given component\n\n  * response: 204\n\nJobs priorities\n~~~~~~~~~~~~~~~\n\nEach jobdefinition contains a 'priority' attribute which is used to weight it.\nWhen an agent requests a new job then the server will sort the jobdefinition\nby using the 'priority' attribute in order to select one.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/redhat-cip/dci-control-server",
    "keywords": "",
    "license": "Apache v2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dci",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dci/",
    "release_url": "https://pypi.org/project/dci/0.1a1/",
    "requires_python": "",
    "summary": "Server which manage products deployments",
    "version": "0.1a1"
  },
  "releases": {
    "0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "582517e5ae092c75af3082b688c347ec",
          "sha256": "2f7ef5aeda7d3978a1ad644c2d7ee9a29d5b44fb13f5c90da5511b50f8c59521"
        },
        "downloads": 425,
        "filename": "dci-0.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "582517e5ae092c75af3082b688c347ec",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29387,
        "upload_time": "2016-03-22T08:04:48",
        "url": "https://files.pythonhosted.org/packages/db/1a/34958250aadae78becec1a0936d9e44832de99c0dda916586a87c58b3bcc/dci-0.1a1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "582517e5ae092c75af3082b688c347ec",
        "sha256": "2f7ef5aeda7d3978a1ad644c2d7ee9a29d5b44fb13f5c90da5511b50f8c59521"
      },
      "downloads": 425,
      "filename": "dci-0.1a1.tar.gz",
      "has_sig": false,
      "md5_digest": "582517e5ae092c75af3082b688c347ec",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 29387,
      "upload_time": "2016-03-22T08:04:48",
      "url": "https://files.pythonhosted.org/packages/db/1a/34958250aadae78becec1a0936d9e44832de99c0dda916586a87c58b3bcc/dci-0.1a1.tar.gz"
    }
  ]
}