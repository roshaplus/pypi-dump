{
  "info": {
    "author": "thautwarm",
    "author_email": "twshere@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "|Docs| |License| |PyPI version|\n\n| Efficient pattern matching for standard python.\n| ``coroutines`` makes it possible to flatten the function stacks, and\n  ``code-generator`` makes it possible to use ``TCO``'s syntax sugars.\n\n.. code:: python\n\n    from pattern_matching.core.match import when, overwrite\n    from pattern_matching import var, Using\n    from numpy.random import randint\n\n    with Using(scope=locals(), use_tco=True):\n        @overwrite((var, *var))\n        def qsort(head, tail):\n            lowers = [i for i in tail if i < head]\n            highers = [i for i in tail if i >= head]\n            return qsort(lowers) + [head] + qsort(highers)\n\n    @when(var)\n    def qsort(lst):\n        return lst\n    print(qsort(randint(0, 2000, size=(1200, ))))\n\nPattern-Matching\n================\n\nThe library name ``destruct`` has been registered at ``PyPI``, so we\nrename ``Destruct.py`` with ``pattern-matching``. The new one could be\nmore accurate.\n\nInstall\n-------\n\n``pip install -U pattern-matching``.\n\nExample\n-------\n\n-  Pattern Matching for functions.\n\nWe can overload the functions easily.\n\n.. code:: python\n\n    from pattern_matching import Match, when, var, T, t, match_err, _, overwrite\n\n    @when(_ == 1, var[int])\n    def u_func(res):\n        return res\n\n    @when(var < 0, _)\n    def u_func():\n      raise varueError('input should be positive.')\n\n    @when(var[int] > 1, var) \n    def u_func(now, res):\n      return u_func(now-1, res*now)\n\n    @when(var[int])\n    def u_func(now):\n      return u_func(now, 1)\n\n    u_func(10, 1)  # => 3628800\n\n-  Explicit pattern matching.\n\n.. code:: python\n\n    with Match(1, 2, (3, int)) as m:\n        for a, b, c in m.case((var[int], var, var[list])):  # not matched\n            print(a, b, c)\n\n        for typ, in m.case((_, _, (_, var.when(is_type)))): # supposed to match here\n            print(typ)\n\n        else:\n            print('none matched')\n\n    # => <class 'int'>\n\nDocument\n--------\n\nSee the document\n`here <https://github.com/Xython/Destruct.py/blob/master/docs.md>`__.\n\nSome codes as examples\n`here <https://github.com/Xython/pattern-matching/blob/master/tutorials.py>`__.\n\n.. |Docs| image:: https://img.shields.io/badge/docs-destruct!-blue.svg?style=flat\n   :target: https://github.com/Xython/Destruct.py/blob/master/docs.md\n.. |License| image:: https://img.shields.io/badge/license-MIT-green.svg\n   :target: https://github.com/Xython/Destruct.py/blob/master/LICENSE\n.. |PyPI version| image:: https://img.shields.io/pypi/v/pattern-matching.svg\n   :target: https://pypi.python.org/pypi/pattern-matching\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Xython/pattern-matching",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pattern-matching",
    "platform": "any",
    "project_url": "https://pypi.org/project/pattern-matching/",
    "release_url": "https://pypi.org/project/pattern-matching/0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "effective and graceful pattern matching for original python",
    "version": "0.2"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f4ba6f4f5cf0ea3487b9a70cc858a33c",
          "sha256": "9c761bfe5dd81f360879ae5180c8fdc18fe267c4287a088c6c77d80734f11765"
        },
        "downloads": -1,
        "filename": "pattern_matching-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4ba6f4f5cf0ea3487b9a70cc858a33c",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 8020,
        "upload_time": "2017-12-30T17:13:00",
        "url": "https://files.pythonhosted.org/packages/dc/33/b9d32cf985d26ac44015c5b24aac5a162486f3bf8b615d78f276b792e2e3/pattern_matching-0.1-py3-none-any.whl"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8a99772c7ab009cdd3870a45e781a86b",
          "sha256": "91d7ce71db28105a81e5cf7cb8739fa11fa0a06394f8ec044afd197cf650258b"
        },
        "downloads": -1,
        "filename": "pattern_matching-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a99772c7ab009cdd3870a45e781a86b",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 12902,
        "upload_time": "2018-01-07T19:48:33",
        "url": "https://files.pythonhosted.org/packages/0e/85/40faf15fa9ada93b8ad09c830962691a0fd98bc9a829540a706daaa34c9f/pattern_matching-0.2-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8a99772c7ab009cdd3870a45e781a86b",
        "sha256": "91d7ce71db28105a81e5cf7cb8739fa11fa0a06394f8ec044afd197cf650258b"
      },
      "downloads": -1,
      "filename": "pattern_matching-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8a99772c7ab009cdd3870a45e781a86b",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "size": 12902,
      "upload_time": "2018-01-07T19:48:33",
      "url": "https://files.pythonhosted.org/packages/0e/85/40faf15fa9ada93b8ad09c830962691a0fd98bc9a829540a706daaa34c9f/pattern_matching-0.2-py3-none-any.whl"
    }
  ]
}