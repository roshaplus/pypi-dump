{
  "info": {
    "author": "Kirill Simonov (Prometheus Research, LLC)",
    "author_email": "xi@resolvent.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "******************************************************************\n  Cogs - Toolkit for developing command-line utilities in Python\n******************************************************************\n\nOverview\n========\n\nCogs is a toolkit for developing command-line utilities in Python.  It\nhandles common operations such as parsing command-line parameters,\ndispatching commands and loading configuration files. It is targeted to\ndevelopers, sysadmins, testers, or anyone who needs to script their\nroutine tasks.\n\nCogs is a free software licensed under MIT license.  Cogs is written by\nKirill Simonov from Prometheus Research, LLC.\n\n\nGetting Started\n===============\n\nYou can install Cogs using `PIP package manager`_::\n\n    # pip install Cogs\n\n.. _PIP package manager: http://www.pip-installer.org/\n\nThis operation installs a command-line utility ``cogs`` and a Python\npackage of the same name.  The ``cogs`` utility is a dispatcher which\nwhich lets you select and execute your scripts (called *tasks*).  Let us\nshow how to do it with a simple example.\n\nIn the current directory, create a file ``cogs.local.py`` with the\nfollowing content::\n\n    from cogs import task\n    import os\n\n    @task\n    def Hello(name=None):\n        \"\"\"greet someone (if not specified, the current user)\"\"\"\n        if name is None:\n            name = os.getlogin()\n        print \"Hello, %s!\" % name.capitalize()\n\nNow run::\n\n    $ cogs hello world\n    Hello, World!\n\n    $ cogs hello\n    Hello, Xi!\n\n    $ cogs help hello\n    HELLO - greet someone (if not specified, the current user)\n    Usage: cogs hello [<name>]\n\nCogs converts function ``Hello()`` into a command-line script with\nparameters inferred from the function signature, so then when you\nexecute a command ``cogs hello world``, you invoke a function\n``Hello('world')``.\n\n\nLoading Extensions\n==================\n\nIn this section, we describe how Cogs finds and loads extensions.\n\nCogs loads extensions from two places:\n\n* ``cogs.local.py`` or ``cogs.local/__init__.py`` module in the current\n  directory;\n* all Python packages under ``cogs.extensions`` entry point.\n\nThe easiest way to add an extension is to create a ``cogs.local.py``\nmodule and add your tasks there.  If you want to split the module into\nmultiple files, create a ``cogs.local`` subdirectory with an\n``__init__.py`` module.  ``cogs.local.py`` or ``cogs.local/__init__.py``\nare executed by Cogs on startup.  The modules must be owned by the same\nuser who runs the ``cogs`` script, or by ``root``; otherwise they are\nignored.\n\nIf you need to package and distribute your Cogs extensions, using\n``cogs.local`` may be inconvenient.  In this case, you may package your\nCogs extensions as a regular Python distribution.\n\nSuppose we want to pack the ``hello`` task as a separate package.\nCreate a directory tree with the following structure::\n\n    Cogs-Hello/\n        src/\n            cogs/\n                __init__.py\n                hello.py\n        setup.py\n\nThe file ``cogs/hello.py`` contains the definition of the ``hello`` task\nand has the same content as ``cogs.local.py`` in our previous example.\n\nThe file ``cogs/__init__.py`` contains just one line::\n\n    __import__('pkg_resources').declare_namespace(__name__)\n\nThe file ``setup.py`` contains the meta-data of the package and may\nlook like this::\n\n    from setuptools import setup\n\n    setup(\n        name='Cogs-Hello',\n        version='0.1',\n        description=\"\"\"A Cogs task to greet somebody\"\"\",\n        packages=['cogs'],\n        namespace_packages=['cogs'],\n        package_dir={'': 'src'},\n        install_requires=['Cogs'],\n        entry_points={ 'cogs.extensions': ['Hello = cogs.hello'] },\n    )\n\nNote the parameter ``entry_points`` in ``setup()`` invocation; it adds\nan entry point ``cogs.extensions`` named ``Hello`` that refers to module\n``cogs.hello``.  On startup, Cogs finds and loads all packages defined\nfor the entry point ``cogs.extensions``.\n\n\nDefining Tasks\n==============\n\nA task can be created from a function or a class by augmenting it with\nthe ``task`` decorator::\n\n    from cogs import task, argument\n    from cogs.log import log, fail\n\n    @task\n    def Factorial(n):\n        \"\"\"calculate n!\n\n        This task calculates the value of the factorial of the given\n        positive number `n`.  Factorial of n, also known as n!, is\n        defined by the formula:\n\n            n! = 1*2*...*(n-1)*n\n        \"\"\"\n        try:\n            n = int(n)\n        except ValueError:\n            raise fail(\"n must be an integer\")\n        if n < 1:\n            raise fail(\"n must be positive\")\n        f = 1\n        for k in range(2, n+1):\n            f *= k\n        log(\"{}! = `{}`\", n, f)\n\n    @task\n    class Fibonacci:\n        \"\"\"calculate the n-th Fibonacci number\n\n        The n-th Fibonacci number `F_n` is defined by:\n\n            F_0 = 0\n            F_1 = 1\n            F_n = F_{n-1}+F_{n-2} (n>1)\n        \"\"\"\n\n        n = argument(int)\n\n        def __init__(self, n):\n            if n < 0:\n                raise ValueError(\"n must be non-negative\")\n            self.n = n\n\n        def __call__(self):\n            p, q = 0, 1\n            for k in range(self.n):\n                p, q = p+q, p\n            log(\"F_{} = `{}`\", self.n, p)\n\nYou can now execute the tasks by running::\n\n    $ cogs factorial 10\n    10! = 3628800\n\n    $ cogs fibonacci 10\n    F_10 = 55\n\nCogs uses the name of the function or the class as the task identifier.\nThe name is normalized: it is converted to lower case and has all\nunderscore characters converted to the dash symbol.\n\nIf the task is derived from a function, the task arguments are inferred\nfrom the function signature.  Cogs executes such task by calling the\nfunction with the parsed command-line parameters.\n\nIf the task is derived from a class, the task arguments and options must\nbe defined using ``argument()`` and ``option()`` descriptors.  To\nexecute a task, Cogs creates an instance of the class passing the task\nparameters as the constructor arguments.  Then Cogs invokes the\n``__call__`` method of the instance.  Thus the call of::\n\n    $ cogs factorial 10\n\nis translated to::\n\n    Factorial('10')\n\nand the call of::\n\n    $ cogs fibonacci 10\n\nis translated to::\n\n    t = Fibonacci(10)\n    t()\n\nThe docstring of the function or the class becomes the task\ndescription::\n\n    $ cogs help factorial\n    FACTORIAL - calculate n!\n    Usage: cogs factorial <n>\n\n    This task calculates the value of the factorial of the given\n    positive number n.  Factorial of n, also known as n!, is\n    defined by the formula:\n\n        n! = 1*2*...*(n-1)*n\n\n    $ cogs help fibonacci\n    Usage: cogs fibonacci <n>\n\n    The n-th Fibonacci number F_n is defined by:\n\n        F_0 = 0\n        F_1 = 1\n        F_n = F_{n-1}+F_{n-2} (n>1)\n\nA task derived from a function cannot have options.  To add an option to\na task derived from a class, use the ``option()`` descriptor.  For\nexample::\n\n    from cogs import task, argument, option\n    import sys, os\n\n    @task\n    class Write_Hello:\n\n        name = argument(default=None)\n        output = option(key='o', default=None)\n\n        def __init__(self, name, output):\n            if name is None:\n                name = os.getlogin()\n            self.name = name\n            if output is None:\n                self.file = sys.stdout\n            else:\n                self.file = open(output, 'w')\n\n        def __call__(self):\n            self.file.write(\"Hello, %s!\\n\" % self.name.capitalize())\n\nYou can execute this task with option ``--output`` or ``-o`` to redirect\nthe output to a file::\n\n    $ cogs write-hello world -o hello.txt\n\n\nConfiguration and Environment\n=============================\n\nCogs allows you to define custom configuration parameters.  For example::\n\n    from cogs import env, task, setting\n    import os\n\n    @setting\n    def Default_Name(name=None):\n        \"\"\"the name to use for greetings (if not set: login name)\"\"\"\n        if name is None or name == '':\n            name = os.getlogin()\n        if not isinstance(name, str):\n            raise ValueError(\"a string value is expected\")\n        env.add(default_name=name)\n\n    @task\n    def Hello_With_Configuration(name=None):\n        if name is None:\n            name = env.default_name\n        print \"Hello, %s!\" % name.capitalize()\n\nNow you could specify the name as a configuration parameter\n``default-name``.  One way to do it is to use global option\n``--default-name``::\n\n    $ cogs --default-name=world hello-with-configuration\n\nYou could also pass a configuration parameter using an environment\nvariable::\n\n    $ COGS_DEFAULT_NAME=world cogs hello-with-configuration\n\nAlternatively, you can put parameters to a configuration file.  In the\ncurrent directory, create a file ``cogs.conf`` with the following\ncontent::\n\n    default-name: world\n\nNow run::\n\n    $ cogs hello-with-configuration\n\nCogs reads configuration from the following locations:\n\n* ``/etc/cogs.conf``\n* ``$PREFIX/etc/cogs.conf``\n* ``$HOME/.cogs/cogs.conf``\n* ``./cogs.conf``\n* program environment\n* command-line parameters\n\nIf you'd like to specify the usage of a configuration file that is in a\ndifferent location than the standard locations listed above, you can use\nthe global option ``--config`` as follows::\n\n    $ cogs --config=alternate-cogs.conf hello-with-configuration\n\nTo create a new configuration parameter, wrap a function named after the\nparameter with the ``@setting`` decorator.  The function must accept\nzero or one argument: the function is called without arguments if the\nparameter is not specified explicitly, and is called with the value of\nthe parameter is it was set using one of the methods described above.\n\nCogs does not impose any rules on what to do with the parameter value,\nbut we recommend to store the value in the global ``env`` variable.  The\ncall of ``env.add(default_name=name)`` adds a new parameter\n``default_name`` which could then be accessed as ``env.default_name``.\n\n\nAPI Reference\n=============\n\n``cogs.core``\n-------------\n\nClasses and functions defined in ``cogs.core`` are also importable from\nthe ``cogs`` package.\n\n``@task``\n    The ``@task`` decorator converts the wrapped function or class into\n    a task.  Task properties are inferred from the wrapped object as\n    follows:\n\n    *name*\n        Generated from the function or the class name.  The name is\n        converted to lower case and all underscores are replaced with\n        dashes.\n\n    *documentation*\n        Generated from the docstring.  The first line of the docstring\n        produces a one-line *hint* string, the rest of the docstring\n        produces a multi-line *help* string.\n\n    *arguments*\n        When the task is inferred from a function, the arguments are\n        generated from the function signature.  Each function parameter\n        becomes a task argument, those which have default values are\n        optional.\n\n        If the task is inferred from a class, the arguments must be\n        specified using the ``argument()`` descriptor.\n\n    *options*\n        A task inferred from a function has no options.  A task inferred\n        from a class may have options specified using the ``option()``\n        descriptor.\n\n    When a task is executed, the wrapped object is invoked according\n    to the following rules:\n\n    * If the task is inferred from a function, parsed command-line\n      parameters are passed as the function arguments.\n    * If the task is inferred from a class, command-line parameters\n      are passed to the class constructor, then the ``__call__``\n      method is called on the instance.\n\n``@setting``\n    The ``@setting`` decorator converts the wrapped function to a\n    configuration parameter, which properties are inferred from the\n    function attributes.\n\n    The setting name is generated from the function name.  The name is\n    converted to lower case and has all underscores replaced with\n    dashes.\n\n    The setting documentation is generated from the function docstring.\n\n    The function must be able to accept zero and one parameter.  The\n    function is called at startup with no parameters if the setting is\n    not explicitly set by the user; otherwise it is called with the\n    value of the setting.  The function is responsible for storing the\n    value in the ``env`` object.\n\n``argument(check, default, plural=False)``\n    Describes a task argument.\n\n    ``check``\n        A function which is called to check and/or transform the\n        argument value.  The function must return the transformed value\n        or raise ``ValueError`` exception on error.\n\n    ``default``\n        The default value to be used if the argument is optional and not\n        specified.  If this parameter is not set, the argument is\n        mandatory.\n\n    ``plural``\n        If set, the argument consumes all the remaining command-line\n        parameters.  Must be the last argument specified.\n\n``option(key, check, default, plural=False, value_name=None, hint=None)``\n    Describes a task option.\n\n    ``key``\n        A one-character shorthand.\n\n    ``check``\n        A function called to check and transform the value of the\n        option.  The function must return the transformed value or raise\n        ``ValueError`` exception on error.\n\n    ``default``\n        The default value used when the option is not specified.  If\n        this parameter is not set, the option does not accept a value.\n        Such an option is treated is a toggle and takes a value ``True``\n        if set and ``False`` if not set.\n\n    ``plural``\n        If set, indicates that the option could be specified more than\n        once.\n\n    ``value_name``\n        The preferred name for the option value; used for the task\n        description.\n\n    ``hint``\n        A one-line description of the option; used for the task\n        description.\n\n``env``\n    A global object that keeps values of configuration parameters and\n    other properties.\n\n    ``env.add(**keywords)``\n        Add new parameters.\n\n    ``env.set(**keywords)``\n        Set values for existing parameters.\n\n    ``env.push(**keywords)``\n        Save the current state and set new values for existing\n        parameters.\n\n    ``env.pop()``\n        Restore a previously saved state of parameters and values.\n\n    ``env(**keywords)``\n        A context manager for ``with`` statement.  On entering, saves\n        the current state and sets new parameter values.  On exiting,\n        restores the saved state.\n\n``cogs.log``\n------------\n\nPrinting utilities.\n\n``log(msg=\"\", *args, **kwds)``\n    Print the message to the standard output.\n\n    If extra positional or keyword arguments are given, they are\n    formatted with ``format()`` function using ``msg`` as the template.\n\n    ``log()`` supports output coloring: a substring of the form::\n\n        `...`\n\n    or::\n\n        :fmt:`...`\n\n    is colorized when displayed on a color terminal.  The supported\n    formats are: *default* (white), ``debug`` (dark grey),\n    ``warning`` (red), ``success`` (green).\n\n``debug(msg, *args, **kwds)``\n    Print the message when the ``env.debug`` parameter is set.  We\n    recommend to accompany any permanent change to the filesystem or\n    other system state with a respective ``debug()`` call.\n\n    Add command-line parameter ``--debug`` or set environment variable\n    ``COGS_DEBUG=1`` to see debug output.\n\n``warn(msg, *args, **kwds)``\n    Display a warning.  ``warn()`` should be used for reporting error\n    conditions which do not prevent the script from continuing the job.\n\n``fail(msg, *args, **kwds)``\n    Display an error message and return an exception object.  It should\n    be used in the following manner::\n\n        raise fail(\"no more beer in the refrigerator\")\n\n``cogs.fs``\n-----------\n\nFile and system utilities.\n\n``cp(src, dst)``\n    Copy a file or a directory tree.\n\n``mv(src, dst)``\n    Move a file or a directory tree.\n\n``rm(path)``\n    Remove a file.\n\n``mktree(path)``\n    Create all directories in the path.\n\n``rmtree(path)``\n    Remove a directory tree.\n\n``exe(cmd, cd=None, environ=None)``\n    Replace the current process with the given shell command.\n\n    If ``cd`` is given, changes the directory to the specified\n    path before executing the command.\n\n    If ``environ`` is given, adds the given parameters to the\n    environment before executing the command.\n\n``sh(cmd, data=None, cd=None, environ=None)``\n    Execute a shell command with the given input and working directory.\n\n``pipe(cmd, data=None, cd=None, environ=None)``\n    Execute a shell command with the given input and working directory;\n    return the command output.\n\n\n.. vim: set spell spelllang=en textwidth=72:\n",
    "docs_url": null,
    "download_url": "http://pypi.python.org/pypi/Cogs",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://bitbucket.org/prometheus/cogs",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "Cogs",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/Cogs/",
    "release_url": "https://pypi.org/project/Cogs/0.4.1/",
    "requires_python": null,
    "summary": "Toolkit for developing command-line utilities in Python",
    "version": "0.4.1"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dd7ab3a78e8225237375f528369c090d",
          "sha256": "1bf32a522efd897ff14c1a20dade980981399a1f5cb780762c93881bd4975c20"
        },
        "downloads": 3418,
        "filename": "Cogs-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dd7ab3a78e8225237375f528369c090d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6412,
        "upload_time": "2012-10-02T19:54:51",
        "url": "https://files.pythonhosted.org/packages/38/6d/7d0b96cbb38463ceaabe88d1e042a182c675dbf6a00f8be85de5f9f8389e/Cogs-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dc580e9f50eee86a56ff6658203b745e",
          "sha256": "d0cc30861dad6f96947e1b9fef4a73e334a59190f2c56e531381e94c4b33f174"
        },
        "downloads": 3402,
        "filename": "Cogs-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dc580e9f50eee86a56ff6658203b745e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14324,
        "upload_time": "2012-10-05T17:40:23",
        "url": "https://files.pythonhosted.org/packages/05/da/53b935fc583ff0efa59bf00a557947c0b486c38dac549725865cb43a7dca/Cogs-0.1.2.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dfd2961e7ca6d6dd31537c914c3a152a",
          "sha256": "4a193e84ee9b4b8421376d9ea131425fa10774aae990b647f545dfcbdb8bbb51"
        },
        "downloads": 2895,
        "filename": "Cogs-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dfd2961e7ca6d6dd31537c914c3a152a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16446,
        "upload_time": "2013-02-28T21:21:14",
        "url": "https://files.pythonhosted.org/packages/4a/d2/cdbd32b622ce8a7163d8ec62910fd45dd7dc8978dbdd1aae895c97825b4e/Cogs-0.2.1.tar.gz"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "01b038c9b1f32b375120434ef164d866",
          "sha256": "70d1af3c0fb10cf6dc8673b0fb7833e94381ecc575960cfde65d75172e467d80"
        },
        "downloads": 7007,
        "filename": "Cogs-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "01b038c9b1f32b375120434ef164d866",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16933,
        "upload_time": "2013-06-28T23:20:48",
        "url": "https://files.pythonhosted.org/packages/8d/3c/243819ed6fe6f9bb12309a46c89c459e8c9154fa98c63d119a50e6f942ab/Cogs-0.2.3.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "61dcebe8ba065f1bbb61974f49f3675f",
          "sha256": "bb3901a5643874c324f54dd7335912e60c0a1ebeadb41c9bd3caa64be0486c48"
        },
        "downloads": 16853,
        "filename": "Cogs-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "61dcebe8ba065f1bbb61974f49f3675f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17675,
        "upload_time": "2013-12-20T17:46:31",
        "url": "https://files.pythonhosted.org/packages/bf/9a/749f49f63abf3ab48571a7a1d3c45785107d5630b525fcfd6942491f56f0/Cogs-0.3.0.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3b307d14c56825f52623d70a60f39eeb",
          "sha256": "ffb1cea75577f19f8d2a415a7331f4156b12c06df409ac913c4d9de1133a4adb"
        },
        "downloads": 4331,
        "filename": "Cogs-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3b307d14c56825f52623d70a60f39eeb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17805,
        "upload_time": "2015-01-18T01:50:05",
        "url": "https://files.pythonhosted.org/packages/1d/2a/89cdba098ec9d29329378fa08af4b06b546c3d16a60d28a262d583429bb2/Cogs-0.4.0.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9479c0e35dff26f7325fe500f970783e",
          "sha256": "7f3b3163748966c64a4cd00aa41b63eb8add3d5cfe968ff42a8e56007bebf599"
        },
        "downloads": 256,
        "filename": "Cogs-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9479c0e35dff26f7325fe500f970783e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17805,
        "upload_time": "2016-08-02T16:00:37",
        "url": "https://files.pythonhosted.org/packages/93/f8/4e6fbd09989cb0a13aea137314bac8113c3b29bb89e5d6575f094415e052/Cogs-0.4.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9479c0e35dff26f7325fe500f970783e",
        "sha256": "7f3b3163748966c64a4cd00aa41b63eb8add3d5cfe968ff42a8e56007bebf599"
      },
      "downloads": 256,
      "filename": "Cogs-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9479c0e35dff26f7325fe500f970783e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 17805,
      "upload_time": "2016-08-02T16:00:37",
      "url": "https://files.pythonhosted.org/packages/93/f8/4e6fbd09989cb0a13aea137314bac8113c3b29bb89e5d6575f094415e052/Cogs-0.4.1.tar.gz"
    }
  ]
}