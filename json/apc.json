{
  "info": {
    "author": "Jonas Harnau",
    "author_email": "jonas.harnau@oxon.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha"
    ],
    "description": "apc\n===\n\nThis package is for age-period-cohort analysis. It is very much inspired\nby the R package of the same name. The package covers binomial,\nlog-normal, normal, over-dispersed Poisson and Poisson models. The\ncommon factor is a linear age-period-cohort predictor. The package uses\nthe identification method by Kuang et al. (2008) implemented as\ndescribed by Nielsen (2015) who also discusses the use of the R package\nof the same name.\n\nLatest changes\n--------------\n\nVersion 0.2.0 is a complete rething of the package. It introduces the\n``Model`` Class as the primary object of interest. This has now been\nexpanded to match the functionality of the last version 0.1.0. As such,\n0.2.0 is unfortunately **not** downward compatible!\n\nUsage\n-----\n\n1. Specify a model: ``model = Model()``\n2. Attach the data: ``model.data_from_df(pandas.DataFrame)``\n3. Plot data sums: ``model.plot_data_sums()``\n4. Plot data heatmaps: ``model.plot_data_heatmaps()``\n5. Plot data groups of one time-scale across another:\n   ``model.plot_data_within()``\n6. Fit the model: ``model.fit(family, predictor)``\n7. Fit a deviance table to check for valid reductions:\n   ``model.fit_table()``\n\nExample\n-------\n\nAs an example, following the scheme described above we can do the\nfollowing.\n\nFirst we load some data and set-up the Model object.\n\n::\n\n    import pandas as pd\n    data = pd.read_excel('./apc/data/Belgian_lung_cancer.xlsx', \n                         sheetname = ['response', 'rates'], index_col = 0)\n    from apc.Model import Model\n    model = Model()\n\nWe have a look at the data. This is in age-period space.\n\n::\n\n    print(data['response'])\n\n           1955-1959  1960-1964  1965-1969  1970-1974\n\n    25-29          3          2          7          3\n    30-34         11         16         11         10\n    35-39         11         22         24         25\n    40-44         36         44         42         53\n    45-49         77         74         68         99\n    50-54        106        131         99        142\n    55-59        157        184        189        180\n    60-64        193        232        262        249\n    65-69        219        267        323        325\n    70-74        223        250        308        412\n    75-79        198        214        253        338\n\nWe can now attach the data to the model.\n\n::\n\n    model.data_from_df(data['response'], rate=data['rates'], data_format='AP')\n\nThis computes some checks and reformats it into a long format with a\nmulti-index that can more easily be used later on. The missing third\nindex, cohort in this case, is computed automatically. We can have a\nlook at the output.\n\n::\n\n    print(model.data_vector.head())\n\n                               response       dose  rate\n    Period    Age   Cohort                              \n    1955-1959 25-29 1926-1934         3  15.789474  0.19\n              30-34 1921-1929        11  16.666667  0.66\n              35-39 1916-1924        11  14.102564  0.78\n              40-44 1911-1919        36  13.483146  2.67\n              45-49 1906-1914        77  15.909091  4.84\n\nNote that the model is capable of generating cohort labels that reflect\nthe correct range. For instance, an individual who is 25-29 in 1955-1959\nwas born between 1926 and 1934.\n\nWe can move on to plot the data sums\n\n::\n\n    model.plot_data_sums()\n\n    model.plotted_data_sums\n\n.. figure:: https://user-images.githubusercontent.com/25103918/31182586-458c3aa6-a8f2-11e7-8953-8b8f036a99a3.png\n   :alt: data\\_sum\\_plot\n\n   data\\_sum\\_plot\n\nThis function includes functionality to transform index ranges into\ninteger indices to allow for prettier axis labels. We can choose to\ntransform to start, mean, or end of the range, or to keep the range\nlabels.\n\nAnother plot we can make is a heatmap.\n\n::\n\n    model.plot_data_heatmaps(simplify_ranges=False)\n\n    model.plotted_data_heatmaps\n\n.. figure:: https://user-images.githubusercontent.com/25103918/31187946-63e16800-a901-11e7-8541-26831a80a2ad.png\n   :alt: data\\_heatmap\\_plot\n\n   data\\_heatmap\\_plot\n\nWe can also easily change the plotting space. For instance, if we prefer\nto plot in age-cohort rather than age-period space we can do this like\nthis.\n\n::\n\n    model.plot_data_heatmaps(space='AC')\n\n    model.plotted_data_heatmaps\n\n.. figure:: https://user-images.githubusercontent.com/25103918/31188021-9d56d9da-a901-11e7-9f1a-7d417a33ca12.png\n   :alt: data\\_heatmap\\_plot\\_AC\\_space\n\n   data\\_heatmap\\_plot\\_AC\\_space\n\nAnother way to look at the data is to plot groups of one time-scale\nacross another.\n\n::\n\n    model.plot_data_within(figsize=(10,6))\n\n    model.plotted_data_within['response']\n\n.. figure:: https://user-images.githubusercontent.com/25103918/31203174-e7cd68b2-a933-11e7-8ac0-4615404d1581.png\n   :alt: data\\_within\\_plot\n\n   data\\_within\\_plot\n\nNext, we can fit a model to the data. For example, a log-normal model\nfor the rates with an age-period-cohort predictor is fit like this\n\n::\n\n    model.fit('log_normal_rates', 'APC')\n\nWe can then, for example, look at the estimated coefficients.\n\n::\n\n    print(model.para_table)\n\n                          coef   std err          z         P>|z|\n    level             1.930087  0.171428  11.258910  2.093311e-29\n    slope_age         0.536182  0.195753   2.739070  6.161319e-03\n    slope_coh         0.187146  0.195788   0.955857  3.391443e-01\n    dd_age_35-39     -0.574042  0.291498  -1.969284  4.892050e-02\n    dd_age_40-44      0.202367  0.286888   0.705389  4.805682e-01\n    dd_age_45-49     -0.171580  0.285231  -0.601548  5.474753e-01\n    dd_age_50-54     -0.200673  0.284958  -0.704219  4.812966e-01\n    dd_age_55-59     -0.059358  0.284947  -0.208314  8.349839e-01\n    dd_age_60-64     -0.076937  0.284958  -0.269994  7.871649e-01\n    dd_age_65-69      0.027525  0.285231   0.096499  9.231242e-01\n    dd_age_70-74     -0.067239  0.286888  -0.234375  8.146940e-01\n    dd_age_75-79     -0.081487  0.291498  -0.279546  7.798256e-01\n    dd_per_1965-1969 -0.088476  0.171182  -0.516855  6.052575e-01\n    dd_per_1970-1974 -0.014666  0.171182  -0.085677  9.317229e-01\n    dd_coh_1886-1894  0.101196  0.430449   0.235094  8.141360e-01\n    dd_coh_1891-1899  0.044626  0.335289   0.133098  8.941163e-01\n    dd_coh_1896-1904 -0.030893  0.291071  -0.106137  9.154736e-01\n    dd_coh_1901-1909 -0.064800  0.285233  -0.227184  8.202810e-01\n    dd_coh_1906-1914  0.087591  0.285009   0.307328  7.585934e-01\n    dd_coh_1911-1919 -0.020926  0.284956  -0.073438  9.414579e-01\n    dd_coh_1916-1924 -0.078598  0.284956  -0.275826  7.826816e-01\n    dd_coh_1921-1929  0.126880  0.285009   0.445181  6.561890e-01\n    dd_coh_1926-1934  0.085676  0.285233   0.300371  7.638939e-01\n    dd_coh_1931-1939 -0.400922  0.291071  -1.377401  1.683882e-01\n    dd_coh_1936-1944  0.732671  0.335289   2.185191  2.887488e-02\n    dd_coh_1941-1949 -1.053534  0.430449  -2.447520  1.438430e-02\n\nWe can check if there are valid reductions from the APC predictor by\nevaluating a deviance table.\n\n::\n\n    model.fit_table()\n\nWe inspect the results\n\n::\n\n    print(model.deviance_table)\n\n             -2logL  df_resid   LR_vs_APC  df_vs_APC      P>chi_sq         aic\n    APC  -44.854193        18         NaN        NaN           NaN    7.145807\n    AP   -28.997804        30   15.856389       12.0  1.979026e-01   -0.997804\n    AC   -43.453528        20    1.400664        2.0  4.964203e-01    4.546472\n    PC    12.631392        27   57.485584        9.0  4.079167e-09   46.631392\n    Ad   -28.042198        32   16.811994       14.0  2.663353e-01   -4.042198\n    Pd    47.605631        39   92.459824       21.0  6.054524e-11   57.605631\n    Cd    12.710530        29   57.564723       11.0  2.618204e-08   42.710530\n    A    -14.916745        33   29.937447       15.0  1.214906e-02    7.083255\n    P    165.610725        40  210.464918       22.0  0.000000e+00  173.610725\n    C     88.261366        30  133.115559       12.0  0.000000e+00  116.261366\n    t     47.774702        41   92.628894       23.0  2.562911e-10   53.774702\n    tA    50.423353        42   95.277546       24.0  1.896069e-10   54.423353\n    tP   165.622315        42  210.476508       24.0  0.000000e+00  169.622315\n    tC    98.099334        42  142.953526       24.0  0.000000e+00  102.099334\n    1    165.809402        43  210.663595       25.0  0.000000e+00  167.809402\n\nWe can see that for example an age-cohort model (``AC``) seems to be a\nvalid reduction. A likelihood ratio test yields a p-value of close to\n0.5. We can check for further reductions from the age-cohort model.\n\n::\n\n    dev_table_AC = model.fit_table(reference_predictor='AC', attach_to_self=False)\n\n    print(dev_table_AC)\n\n            -2logL  df_resid    LR_vs_AC  df_vs_AC      P>chi_sq         aic\n    AC  -43.453528        20         NaN       NaN           NaN    4.546472\n    Ad  -28.042198        32   15.411330      12.0  2.197089e-01   -4.042198\n    Cd   12.710530        29   56.164058       9.0  7.302826e-09   42.710530\n    A   -14.916745        33   28.536783      13.0  7.610743e-03    7.083255\n    C    88.261366        30  131.714894      10.0  0.000000e+00  116.261366\n    t    47.774702        41   91.228230      21.0  9.899548e-11   53.774702\n    tA   50.423353        42   93.876881      22.0  7.438616e-11   54.423353\n    tC   98.099334        42  141.552862      22.0  0.000000e+00  102.099334\n    1   165.809402        43  209.262930      23.0  0.000000e+00  167.809402\n\nWe could now consider a further reduction to an age-drift model (``Ad``)\nwith a p-value of 0.22.\n\nIncluded Data\n-------------\n\nThe following data examples are included in the package at this time.\n\nBelgian Lung Cancer\n~~~~~~~~~~~~~~~~~~~\n\nThis data-set is currently provided in an excel spreadsheet. It includes\ncounts of deaths from lung cancer in the Belgium. This dataset includes\na measure for exposure. It can be analysed using a Poisson model with an\n\u201cAPC\u201d, \u201cAC\u201d, \u201cAP\u201d or \u201cAd\u201d predictor.\n\n*Source: Clayton and Schifflers (1987)*.\n\nLoss TA\n~~~~~~~\n\nData for an insurance run-off triangle. This data is pre-formatted. May\nbe modeled with an over-dispersed Poisson model, for instance with\n``AC`` predictor.\n\n*Source: Taylor and Ashe (1983)*\n\nLoss VNJ\n~~~~~~~~\n\nData for insurance run-off triangle of paid amounts (units not\nreported). Data from Codan, Danish subsiduary of Royal & Sun Alliance.\nIt is a portfolio of third party liability from motor policies. The time\nunits are in years. Apart from the paid amounts, counts for the number\nof reported claims are available.\n\n*Source: Verrall et al. (2010).*\n\nKnown Issues\n------------\n\n-  Index-ranges, such as *1955-1959* in ``data_vector`` as output by\n   ``Model().data_as_df()`` are strings. Thus, sorting may yield\n   unintuitive results for breaks in length of the range components. For\n   example, sorting 1-3, 4-9, 10-11 yields the ordering 1-3, 10-11, 4-9.\n   This results in mis-labeling of the coefficient names later on since\n   those are taken from sorted indices. A possible, if ugly, fix could\n   be to pad the ranges with zeros as needed.\n-  When calling ``import apc`` there may be a deprecation warning raised\n   by ``pandas``. This is the result of importing ``statsmodels`` and\n   will hopefully be resolved with its next release.\n\nReferences\n----------\n\n-  Clayton, D. and Schifflers, E. (1987) Models for temperoral variation\n   in cancer rates. I: age-period and age-cohort models. Statistics in\n   Medicine 6, 449-467.\n-  Kuang, D., Nielsen, B. and Nielsen, J.P. (2008) Identification of the\n   age-period-cohort model and the extended chain ladder model.\n   Biometrika 95, 979-986.\n-  Nielsen, B. (2015) apc: An R package for age-period-cohort analysis.\n   R Journal 7, 52-64. *Download:* `Open\n   Access <https://journal.r-project.org/archive/2015-2/nielsen.pdf>`__.\n-  Taylor, G.C., Ashe, F.R. (1983) Second moments of estimates of\n   outstanding claims Journal of Econometrics 23, 37-61\n-  Verrall R, Nielsen JP, Jessen AH (2010) Prediction of RBNS and IBNR\n   claims using claim amounts and claim counts ASTIN Bulletin 40,\n   871-887\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/JonasHarnau/apc",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "apc",
    "platform": "",
    "project_url": "https://pypi.org/project/apc/",
    "release_url": "https://pypi.org/project/apc/0.2.0/",
    "requires_dist": [
      "statsmodels",
      "seaborn",
      "scipy",
      "pandas",
      "numpy",
      "matplotlib"
    ],
    "requires_python": ">=3.6",
    "summary": "Age-Period-Cohort Analysis",
    "version": "0.2.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3c5afbf9a397afac3712419ff5388ef9",
          "sha256": "17457db4100fa3607a755dd89b7b63115350de5c142ce13784fcaee275d07805"
        },
        "downloads": 0,
        "filename": "apc-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c5afbf9a397afac3712419ff5388ef9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 52150,
        "upload_time": "2017-04-08T12:18:21",
        "url": "https://files.pythonhosted.org/packages/6d/21/397619ec4b38818c282507033d45f6d7aac14ac12a71d65a784880ef654d/apc-0.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0852d03c4a3bdf6a087d56b502c5aaf0",
          "sha256": "11c7a22ea82675f01cd1bc03e3b233142162df898cc7f289261d91a4753e82a5"
        },
        "downloads": 0,
        "filename": "apc-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0852d03c4a3bdf6a087d56b502c5aaf0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 54010,
        "upload_time": "2017-04-08T12:18:30",
        "url": "https://files.pythonhosted.org/packages/1a/41/2b2107d2dd88f94bc9743b5888084e30be5e90ac5a1c3308021091b28b9d/apc-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "93903d39d23c5cc654c5aaa74d71942a",
          "sha256": "8fb661f1cd90868155d4b775373e83cf802b90a6b07661b1d0699b7b4043fc92"
        },
        "downloads": 0,
        "filename": "apc-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93903d39d23c5cc654c5aaa74d71942a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 41208,
        "upload_time": "2017-10-05T14:15:23",
        "url": "https://files.pythonhosted.org/packages/95/de/fb17c98446fcdcad65d5d3308f9f463392d6eff7b6738555bdada02dc40f/apc-0.2.0-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "93903d39d23c5cc654c5aaa74d71942a",
        "sha256": "8fb661f1cd90868155d4b775373e83cf802b90a6b07661b1d0699b7b4043fc92"
      },
      "downloads": 0,
      "filename": "apc-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "93903d39d23c5cc654c5aaa74d71942a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 41208,
      "upload_time": "2017-10-05T14:15:23",
      "url": "https://files.pythonhosted.org/packages/95/de/fb17c98446fcdcad65d5d3308f9f463392d6eff7b6738555bdada02dc40f/apc-0.2.0-py3-none-any.whl"
    }
  ]
}