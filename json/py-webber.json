{
  "info": {
    "author": "Chidi Matthew Orji",
    "author_email": "orjichidi95@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP :: Browsers"
    ],
    "description": "Python Web Development Tools\n===============================\nA collection of tools to automate common web scraping tasks.\n\nInstallation \n+++++++++++++++\nFrom PyPI (not available yet) ::\n    \nStraight from github ::\n\n    pip install https://github.com/Parousiaic/py_webber/archive/master.zip\n\nUsage\n++++++\n\nLoremPysum - Generate random texts\n*************************************\nCredits to `Luca De Vitis <http://loremipsum.readthedocs.io/en/latest/>`_ for the inspiration and starter code\n\nImport the class ::\n\n    from py_webber import LoremPysum\n\nCreate a single LoremPysum instance with default Lorem Ipsum text ::\n\n    p = LoremPysum(*args, domains=None, lorem=True)\n\nYou can also decide to include your words with the standard lorem ipsum text. But if that is not the case simply pass `lorem=False` like this ::\n    \n    p = LoremPysum(*args, domains=None, lorem=False)\n\n`*args` is an optional list of files from which to take the words to be used. Just pass any number of text files::\n\n    p = LoremPysum(\"file.txt1\", \"file2.txt\", domains=None, lorem=True)\n\nThe following methods are defined. ::\n\n    p.email() # return a single email address. You could pass in a file for list of domains. Defaults are `[\".com\", \".info\", \".net\", \".org\"]`\n    p.name() # return a name in the form \"firstname I. lastname\".\n    p.sentence() # generate a single sentence.\n    p.paragraphs() # return a single paragraph of standard Lorem Ipsum text.\n    p.paragraphs(count=3) # return 3 paragraphs where the first paragraph is the standard text.\n    p.paragraphs(common=False) # return a single paragraph where the first paragraph is random.\n    p.title() # generate a string (title case) with 2 to n words. Defaults is 5. Good for article titles.\n\nIn case you want to look into the words used, the following instance attributes are defined. ::\n\n    p.common # A list of the first few words in the lorem ipsum text\n    p.words # A list of all the words in the lorem ipsum text.\n    p.standard # Standard lorem ipsum text. Usually the first 1/3rd portion of a sample file.\n    p.domains # list of domain name endings\n\nPageRipper - harvest words and links on a web page.\n****************************************************\n\nImport the class ::\n\n    from py_webber import PageRipper\n\nCreate page_ripper objects like so ::\n\n    PageRipper(url) # The dafault url is 'http://python.org'\n\nAccess words and links like so ::\n\n    PageRipper('http://python.org').soup\n    PageRipper('http://python.org').raw_links # all raw <a> tags on page as bs4 objects\n    PageRipper('http://python.org').links() # generator of all links in the form `http://www.domain.location`\n    PageRipper('http://python.org').words() # a generator of words between <p> tags\n\nIf you wish to write the BeautifulSoup output to file, use codecs ::\n\n    import codecs\n    with codecs.open(f_name, 'w+', encoding='utf-8') as whand:\n        whand.write(soup.prettify())\n\nCode\n++++++++\n\nLoremPysum\n**************\n.. automodule :: py_webber.lorem_pysum\n.. autoclass :: LoremPysum\n   :members:\n\nPageRipper\n**************\n.. automodule :: py_webber.page_ripper\n.. autoclass :: PageRipper\n   :members:\n\nIndexing\n**********\n.. automodule :: py_webber.indexing\n   :members:",
    "docs_url": null,
    "download_url": "https://github.com/Parousiaic/py_webber/archive/3.0.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Parousiaic/py_webber",
    "keywords": "web crawler,lorem ipsum text generator,page indexer",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-webber",
    "platform": "",
    "project_url": "https://pypi.org/project/py-webber/",
    "release_url": "https://pypi.org/project/py-webber/3.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Common tools employed in web development",
    "version": "3.0"
  },
  "releases": {
    "3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e83ead2a139a04f39faf481f0c4ebd8c",
          "sha256": "10f5a47a5abc4ae2bed865ec1ee6e844334c5e303ae8234ed00bde804ca3fd68"
        },
        "downloads": -1,
        "filename": "py_webber-3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e83ead2a139a04f39faf481f0c4ebd8c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7543,
        "upload_time": "2017-11-20T18:32:56",
        "url": "https://files.pythonhosted.org/packages/ee/74/7e2c8ed87aa0d7f86c8f7d7de74ea53aca8026fa6a038e3f46b35ab02658/py_webber-3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e83ead2a139a04f39faf481f0c4ebd8c",
        "sha256": "10f5a47a5abc4ae2bed865ec1ee6e844334c5e303ae8234ed00bde804ca3fd68"
      },
      "downloads": -1,
      "filename": "py_webber-3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e83ead2a139a04f39faf481f0c4ebd8c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7543,
      "upload_time": "2017-11-20T18:32:56",
      "url": "https://files.pythonhosted.org/packages/ee/74/7e2c8ed87aa0d7f86c8f7d7de74ea53aca8026fa6a038e3f46b35ab02658/py_webber-3.0.tar.gz"
    }
  ]
}