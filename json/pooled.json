{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "pooled\n======\n\n.. image:: https://travis-ci.org/penguinolog/pooled.svg?branch=master\n    :target: https://travis-ci.org/penguinolog/pooled\n.. image:: https://img.shields.io/github/license/penguinolog/pooled.svg\n    :target: https://raw.githubusercontent.com/penguinolog/pooled/master/LICENSE\n\npooled is a set of decorators, which wrap functions in concurrent.futures.ThreadPool and asyncio.Task in Python 3.\nWhy? Because copy-paste of `loop.create_task` and `thread_pool.submit()` is boring,\nespecially if target functions is used by this way only.\n\nPros:\n* Free software: Apache license\n* Open Source: https://github.com/penguinolog/pooled\n* Support multiple Python versions:\n\n::\n\n    Python 2.7\n    Python 3.4\n    Python 3.5\n    Python 3.6\n    PyPy\n    PyPy3 3.5+\n    Jyton 2.7\n\nDecorators:\n\n* `ThreadPooled` - native concurrent.futures.ThreadPool usage on Python 3 and backport on Python 2.7.\n\n* `AsyncIOTask` - wrap in asyncio.Task. Uses the same API, as Python 3 `ThreadPooled`.\n\nUsage\n=====\n\nThreadPooled\n------------\nTarget decorator. API quite differs between Python 3 and Python 2.7.\n\nPython 2.7 usage from signature:\n\n.. code-block:: python\n\n    pooled.ThreadPooled.configure(max_workers=None)  # Not mandatory.\n    # max_workers=None means (CPU_COUNT or 1) * 5, it's default value.\n    @pooled.ThreadPooled  # Arguments not accepted, so `()` is useless\n    def func():\n        pass\n\n    concurrent.futures.wait([func()])\n\nPython 3.3+ usage from signature:\n\n.. code-block:: python\n\n    pooled.ThreadPooled.configure(max_workers=None)\n    @pooled.ThreadPooled(loop_getter=None, loop_getter_need_context=False)  # strictly keyword arguments. See details below.\n    # For standard concurrent.futures, arguments is useless and should be omitted (use like Python 2 version)\n    def func():\n        pass\n\n    concurrent.futures.wait([func()])\n\nPython 3.3+ usage with asyncio:\n\n.. code-block:: python3\n\n    loop = asyncio.get_event_loop()\n    pooled.ThreadPooled.configure(max_workers=None)\n    @pooled.ThreadPooled(loop_getter=loop, loop_getter_need_context=False)  # provide loop directly -> loop_getter_need_context will be ignored\n    def func():\n        pass\n\n    loop.run_until_complete(asyncio.wait_for(func(), timeout))  # func() will return asyncio.Task bound with decorator argument.\n\nPython 3.3+ usage with asyncio and loop extraction from call arguments:\n\n.. code-block:: python3\n\n    loop_getter = lambda tgt_loop: tgt_loop\n    pooled.ThreadPooled.configure(max_workers=None)\n    @pooled.ThreadPooled(loop_getter=loop_getter, loop_getter_need_context=True)  # loop_getter_need_context is required\n    def func(*args, **kwargs):\n        pass\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(asyncio.wait_for(func(loop), timeout))  # func() will return asyncio.Task bound with loop from argument.\n\nAsyncIOTask\n-----------\nWrap in asyncio.Task.\n\nusage with asyncio:\n\n.. code-block:: python3\n\n    loop = asyncio.get_event_loop()\n    pooled.ThreadPooled.configure(max_workers=None)\n    @pooled.ThreadPooled(loop_getter=loop, loop_getter_need_context=False)  # provide loop directly -> loop_getter_need_context will be ignored\n    # By default asyncio.get_event_loop is used, so technically, with single asyncio loop, we can use without arguments.\n    def func():\n        pass\n\n    loop.run_until_complete(asyncio.wait_for(func(), timeout))  # func() will return asyncio.Task bound with decorator argument.\n\nUsage with asyncio and loop extraction from call arguments:\n\n.. code-block:: python3\n\n    loop_getter = lambda tgt_loop: tgt_loop\n    pooled.ThreadPooled.configure(max_workers=None)\n    @pooled.ThreadPooled(loop_getter=loop_getter, loop_getter_need_context=True)  # loop_getter_need_context is required\n    def func(*args, **kwargs):\n        pass\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(asyncio.wait_for(func(loop), timeout))  # func() will return asyncio.Task bound with loop from argument.\n\nTesting\n=======\nThe main test mechanism for the package `logwrap` is using `tox`.\nTest environments available:\n\n::\n\n    pep8\n    py27\n    py34\n    py35\n    py36\n    pypy\n    pypy3\n    pylint\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/penguinolog/pooled",
    "keywords": "pooling",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pooled",
    "platform": "",
    "project_url": "https://pypi.org/project/pooled/",
    "release_url": "https://pypi.org/project/pooled/0.1.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "0.1.3"
  },
  "releases": {
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "90f70df4dc5f9f9cc693e8b81b92a3de",
          "sha256": "637ed370a4652b0e0713eba0a1ddf67d60f12da137f0e86d21961899cb017506"
        },
        "downloads": 0,
        "filename": "pooled-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "90f70df4dc5f9f9cc693e8b81b92a3de",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23456,
        "upload_time": "2017-08-25T14:36:45",
        "url": "https://files.pythonhosted.org/packages/5e/f4/db7e1c22aee11a8827f6d00f35ddf4fe7d89654dad8df3d77673cfe5c788/pooled-0.1.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "90f70df4dc5f9f9cc693e8b81b92a3de",
        "sha256": "637ed370a4652b0e0713eba0a1ddf67d60f12da137f0e86d21961899cb017506"
      },
      "downloads": 0,
      "filename": "pooled-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "90f70df4dc5f9f9cc693e8b81b92a3de",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 23456,
      "upload_time": "2017-08-25T14:36:45",
      "url": "https://files.pythonhosted.org/packages/5e/f4/db7e1c22aee11a8827f6d00f35ddf4fe7d89654dad8df3d77673cfe5c788/pooled-0.1.3.tar.gz"
    }
  ]
}