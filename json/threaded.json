{
  "info": {
    "author": "Alexey Stepanov",
    "author_email": "penguinolog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "threaded\n========\n\n.. image:: https://travis-ci.org/penguinolog/threaded.svg?branch=master\n    :target: https://travis-ci.org/penguinolog/threaded\n.. image:: https://coveralls.io/repos/github/penguinolog/threaded/badge.svg?branch=master\n    :target: https://coveralls.io/github/penguinolog/threaded?branch=master\n.. image:: https://readthedocs.org/projects/threaded/badge/?version=latest\n    :target: http://threaded.readthedocs.io/\n    :alt: Documentation Status\n.. image:: https://img.shields.io/pypi/v/threaded.svg\n    :target: https://pypi.python.org/pypi/threaded\n.. image:: https://img.shields.io/pypi/pyversions/threaded.svg\n    :target: https://pypi.python.org/pypi/threaded\n.. image:: https://img.shields.io/pypi/status/threaded.svg\n    :target: https://pypi.python.org/pypi/threaded\n.. image:: https://img.shields.io/github/license/penguinolog/threaded.svg\n    :target: https://raw.githubusercontent.com/penguinolog/threaded/master/LICENSE\n\nthreaded is a set of decorators, which wrap functions in:\n\n  * `concurrent.futures.ThreadPool`\n  * `threading.Thread`\n  * `asyncio.Task` in Python 3.\n\nWhy? Because copy-paste of `loop.create_task`, `threading.Thread` and `thread_pool.submit` is boring,\nespecially if target functions is used by this way only.\n\nPros:\n\n* Free software: Apache license\n* Open Source: https://github.com/penguinolog/threaded\n* PyPI packaged: https://pypi.python.org/pypi/threaded\n* Tested: see bages on top\n* Support multiple Python versions:\n\n::\n\n    Python 2.7\n    Python 3.4\n    Python 3.5\n    Python 3.6\n    PyPy\n    PyPy3 3.5+\n    Jyton 2.7\n\nDecorators:\n\n* `ThreadPooled` - native concurrent.futures.ThreadPool usage on Python 3 and it's backport on Python 2.7.\n* `threadpooled` is alias for `ThreadPooled`.\n\n* `Threaded` - wrap in threading.Thread.\n* `threaded` is alias for `Threaded`.\n\n* `AsyncIOTask` - wrap in asyncio.Task. Uses the same API, as Python 3 `ThreadPooled`.\n* `asynciotask` is alias for `AsyncIOTask`.\n\nUsage\n=====\n\nThreadPooled\n------------\nMostly it is required decorator: submit function to ThreadPoolExecutor on call.\n\n.. note:: API quite differs between Python 3 and Python 2.7. See API section below.\n\n.. code-block:: python\n\n    threaded.ThreadPooled.configure(max_workers=3)\n\n.. note:: By if executor is not configured - it configures with default parameters: ``max_workers=(CPU_COUNT or 1) * 5``\n\nPython 2.7 usage:\n\n.. code-block:: python\n\n    @threaded.ThreadPooled\n    def func():\n        pass\n\n    concurrent.futures.wait([func()])\n\nPython 3.3+ usage:\n\n.. code-block:: python\n\n    @threaded.ThreadPooled\n    def func():\n        pass\n\n    concurrent.futures.wait([func()])\n\nPython 3.3+ usage with asyncio:\n\n.. note:: if `loop_getter` is not callable, `loop_getter_need_context` is ignored.\n\n.. code-block:: python\n\n    loop = asyncio.get_event_loop()\n    @threaded.ThreadPooled(loop_getter=loop, loop_getter_need_context=False)\n    def func():\n        pass\n\n    loop.run_until_complete(asyncio.wait_for(func(), timeout))\n\nPython 3.3+ usage with asyncio and loop extraction from call arguments:\n\n.. code-block:: python\n\n    loop_getter = lambda tgt_loop: tgt_loop\n    @threaded.ThreadPooled(loop_getter=loop_getter, loop_getter_need_context=True)  # loop_getter_need_context is required\n    def func(*args, **kwargs):\n        pass\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(asyncio.wait_for(func(loop), timeout))\n\nDuring application shutdown, pool can be stopped (while it will be recreated automatically, if some component will request).\n\n.. code-block:: python\n\n    threaded.ThreadPooled.shutdown()\n\nThreaded\n--------\nClassic threading.Thread. Useful for running until close and self-closing threads without return.\n\nUsage example:\n\n.. code-block:: python\n\n    @threaded.Threaded\n    def func(*args, **kwargs):\n        pass\n\n    thread = func()\n    thread.start()\n    thread.join()\n\nWithout arguments, thread name will use pattern: 'Threaded: ' + func.__name__\n\n.. note:: If func.__name__ is not accessible, str(hash(func)) will be used instead.\n\nOverride name can be don via corresponding argument:\n\n.. code-block:: python\n\n    @threaded.Threaded(name='Function in thread')\n    def func(*args, **kwargs):\n        pass\n\nThread can be daemonized automatically:\n\n.. code-block:: python\n\n    @threaded.Threaded(daemon=True)\n    def func(*args, **kwargs):\n        pass\n\nAlso, if no any addition manipulations expected before thread start,\nit can be started automatically before return:\n\n.. code-block:: python\n\n    @threaded.Threaded(started=True)\n    def func(*args, **kwargs):\n        pass\n\nAsyncIOTask\n-----------\nWrap in asyncio.Task.\n\n.. note:: Python 3 only.\n\nusage with asyncio:\n\n.. code-block:: python\n\n    @threaded.AsyncIOTask\n    def func():\n        pass\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(asyncio.wait_for(func(), timeout))\n\nProvide event loop directly:\n\n.. note:: if `loop_getter` is not callable, `loop_getter_need_context` is ignored.\n\n.. code-block:: python\n\n    loop = asyncio.get_event_loop()\n    @threaded.AsyncIOTask(loop_getter=loop)\n    def func():\n        pass\n\n    loop.run_until_complete(asyncio.wait_for(func(), timeout))\n\nUsage with loop extraction from call arguments:\n\n.. code-block:: python\n\n    loop_getter = lambda tgt_loop: tgt_loop\n    @threaded.AsyncIOTask(loop_getter=loop_getter, loop_getter_need_context=True)\n    def func(*args, **kwargs):\n        pass\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(asyncio.wait_for(func(loop), timeout))\n\nTesting\n=======\nThe main test mechanism for the package `threaded` is using `tox`.\nTest environments available:\n\n::\n\n    pep8\n    py27\n    py34\n    py35\n    py36\n    pypy\n    pypy3\n    pylint\n\nCI systems\n==========\nFor code checking several CI systems is used in parallel:\n\n1. `Travis CI: <https://travis-ci.org/penguinolog/threaded>`_ is used for checking: PEP8, pylint, bandit, installation possibility and unit tests. Also it's publishes coverage on coveralls.\n\n2. `coveralls: <https://coveralls.io/github/penguinolog/threaded>`_ is used for coverage display.\n\nCD system\n=========\n`Travis CI: <https://travis-ci.org/penguinolog/threaded>`_ is used for package delivery on PyPI.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/penguinolog/threaded",
    "keywords": "pooling,multithreading,threading,asyncio,development",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "threaded",
    "platform": "",
    "project_url": "https://pypi.org/project/threaded/",
    "release_url": "https://pypi.org/project/threaded/0.5.0/",
    "requires_dist": [
      "asyncio (>=3.4); python_version == \"3.3\"",
      "futures (>=3.1); python_version == \"2.7\"",
      "typing (>=3.6)",
      "six"
    ],
    "requires_python": ">=2.6,!=3.0.*,!=3.1.*,!=3.2.*",
    "summary": "Decorator for logging function arguments and return value by human-readable way",
    "version": "0.5.0"
  },
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cdd786a6b5f4d0004ff3db7f75dad16b",
          "sha256": "b6e954ffd26f4beb0daf9e3c6b35419311c1e634f9633f7de1a7f9398daa88fe"
        },
        "downloads": 0,
        "filename": "threaded-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cdd786a6b5f4d0004ff3db7f75dad16b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8214,
        "upload_time": "2017-08-30T17:47:17",
        "url": "https://files.pythonhosted.org/packages/9c/84/261cd04bceb28c59d7fae1b2d5d27493ab07893a3be4520b59060d5f10ca/threaded-0.3.1.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8cd47e751e9f2db0cbc1fb9b56b23dc0",
          "sha256": "e661e5b22146a0ccc3ae94e4c2dbdfdf0631d82c47f756b612575741cbf45401"
        },
        "downloads": 0,
        "filename": "threaded-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8cd47e751e9f2db0cbc1fb9b56b23dc0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9329,
        "upload_time": "2017-09-01T11:55:55",
        "url": "https://files.pythonhosted.org/packages/51/fc/46b03b1f0de273ba7d1e2e6ff9348847ae86c2f275467678e6c081faa3d8/threaded-0.4.0.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e5a5dd3652bf9429dfb912a1362aaa46",
          "sha256": "c78f6c67beb579279a177f5b13960e63d1c1c8e73152f31f1f7ffa9d27a3b0cd"
        },
        "downloads": 0,
        "filename": "threaded-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e5a5dd3652bf9429dfb912a1362aaa46",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9913,
        "upload_time": "2017-09-01T18:45:27",
        "url": "https://files.pythonhosted.org/packages/06/a6/99652c0953ea9d74a2d17f942069d575663777d678eb3c494f3f6453f015/threaded-0.4.1.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f5101a27d6950a3a47e3dd9624e8edd1",
          "sha256": "8919b4ed120664c5af4e5af935bcb5fff45de11594d8f846119a3f7df3d92268"
        },
        "downloads": 0,
        "filename": "threaded-0.5.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f5101a27d6950a3a47e3dd9624e8edd1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 14217,
        "upload_time": "2017-09-02T06:41:44",
        "url": "https://files.pythonhosted.org/packages/5f/0a/a70f2f0354da355b5e1d682cff660e962f609ebe8a449f512a0c4b53b28f/threaded-0.5.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c5b8b50a6bb3d2a717ac92574fb68f0e",
          "sha256": "49edec2c4f1547c26d66b640251027f350243ffae801689281e3391e79a2ebf5"
        },
        "downloads": 0,
        "filename": "threaded-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c5b8b50a6bb3d2a717ac92574fb68f0e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10190,
        "upload_time": "2017-09-02T06:41:45",
        "url": "https://files.pythonhosted.org/packages/7b/ea/511af48132ee19f1830f39142bb2271cfee730eea45af33f6e1e7c915a2d/threaded-0.5.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f5101a27d6950a3a47e3dd9624e8edd1",
        "sha256": "8919b4ed120664c5af4e5af935bcb5fff45de11594d8f846119a3f7df3d92268"
      },
      "downloads": 0,
      "filename": "threaded-0.5.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f5101a27d6950a3a47e3dd9624e8edd1",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 14217,
      "upload_time": "2017-09-02T06:41:44",
      "url": "https://files.pythonhosted.org/packages/5f/0a/a70f2f0354da355b5e1d682cff660e962f609ebe8a449f512a0c4b53b28f/threaded-0.5.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "c5b8b50a6bb3d2a717ac92574fb68f0e",
        "sha256": "49edec2c4f1547c26d66b640251027f350243ffae801689281e3391e79a2ebf5"
      },
      "downloads": 0,
      "filename": "threaded-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c5b8b50a6bb3d2a717ac92574fb68f0e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10190,
      "upload_time": "2017-09-02T06:41:45",
      "url": "https://files.pythonhosted.org/packages/7b/ea/511af48132ee19f1830f39142bb2271cfee730eea45af33f6e1e7c915a2d/threaded-0.5.0.tar.gz"
    }
  ]
}