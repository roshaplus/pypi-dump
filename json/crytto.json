{
  "info": {
    "author": "M. Massenzio",
    "author_email": "marco@alertavert.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3"
    ],
    "description": "filecrypt - OpenSSL file encryption\n===================================\n\n+-----------+--------------------------------------------------------+\n| Author    | `M. Massenzio <https://github.com/massenz>`__          |\n+===========+========================================================+\n| Version   | 0.3.0                                                  |\n+-----------+--------------------------------------------------------+\n| Updated   | 2016-09-19                                             |\n+-----------+--------------------------------------------------------+\n| Code      | `filecrypt <https://github.com/massenz/filecrypt>`__   |\n+-----------+--------------------------------------------------------+\n\noverview\n========\n\nUses OpenSSL library to encrypt a file using a private/public key pair\nand a one-time secret.\n\nA full description of the process can be found\n`here <https://github.com/massenz/HOW-TOs/blob/master/HOW-TO%20Encrypt%20archive.rst>`__.\n\nSee also this `blog\nentry <https://codetrips.com/2016/07/13/filecrypt-openssl-file-encryption/>`__\nfor more details.\n\ninstallation\n============\n\nInstall directly from PyPi:\n\n::\n\n    pip install crypto\n\nPlease note the package name (``filecrypt`` was conflicting with the\nexisting ``FileCrypt`` package name).\n\nThis requires OpenSSL to be installed on your machine:\n\n::\n\n    sudo apt-get install openssl\n\nAlternatively, clone the project from github and follow the instructions\nbelow:\n\n::\n\n    git clone git@github.com:massenz/filecrypt.git\n\nconfiguration\n=============\n\nThis uses a YAML file to describe the configuration; by default it\nassumes it is in ``/etc/filecrypt/conf.yml`` but its location can be\nspecified using the ``-f`` flag.\n\nThe structure of the ``conf.yml`` file is as follows:\n\n.. code:: yaml\n\n    keys:\n         private: sample.pem\n         public: sample.pub\n         secrets: .\n\n    store: keys.csv\n\n    # Where to store the encrypted file; the folder MUST already exist and the user\n    # have write permissions.\n    #out: /data/store/file\n\n    # Whether to securely delete the original plaintext file.\n    shred: true\n\n    logging:\n       format: \"%(asctime)s [%(levelname)-5s] %(message)s\"\n       level: DEBUG\n\nThe ``private``/``public`` keys are a key-pair generated using the\n``openssl genrsa`` command; the encryption key used to actually encrypt\nthe file will be created in the ``secrets`` folder, and afterward\nencrypted using the ``public`` key and stored in the location provided.\n\nThe name will be ``pass-key-nnnn.enc``, where ``nnnn`` will be a random\nvalue between ``1000`` and ``9999``, that has not been already used for\na file in that folder.\n\nThe name of the secret passphrase can also be defined by the user, using\nthe ``--secret`` option (it will be left unmodified):\n\n-  if it does not exist a random secure one will be created, used for\n   encryption, then encrypted and saved with the given path, while the\n   plain-text temporary version securely destroyed; OR\n\n-  if it is the name of an already existing file, it will be decrypted,\n   used to encrypt the file, then left **unchanged** on disk.\n\n**NOTE** we recommend NOT to re-use encryption passphrases, but always\ngenerate a new secret.\n\n**NOTE** it is currently not possible to specify a plain-text\npassphrase: we always assume that the given file has been encrypted\nusing the ``private`` key.\n\nThe ``store`` file is a CSV list of:\n\n::\n\n    \"Original archive\",\"Encryption key\",\"Encrypted archive\"\n    201511_data.tar.gz,/opt/store/pass-key-001.enc,201511_data.tar.gz.enc\n\na new line will be appended at the end; any comments will be left\nunchanged.\n\nusage\n-----\n\nkeypair generation\n~~~~~~~~~~~~~~~~~~\n\nWe do not provide the means to generate them (this will be done at a\nlater stage), but for now they can be generated using:\n\n::\n\n    openssl genrsa -out ./key.pem 2048\n    openssl rsa -in key.pem -out key.pub -outform PEM -pubout\n\ntheir path can then be specified in the ``conf.yaml`` file.\n\nencryption\n~~~~~~~~~~\n\nAlways use the ``--help`` option to see the most up-to-date options\navailable; anyway, the basic usage is (see the example configuration in\n``examples/example_conf.yaml``):\n\n::\n\n    python3 main.py -f example_conf.yaml -s secret-key.enc plaintext.txt\n\nwill create an encrypted copy of the file to be stored as\n``/data/store/201511_data.tar.gz.enc``, the original file **will not**\nbe securely destroyed (using ``shred``) and the new encryption key to be\nstored, encrypted in ``/opt/store/pass-key-778.enc``.\n\nA new line will be appended to ``keys.csv``:\n\n::\n\n    /.../filecrypt/examples/plaintext.txt,secret-key.enc,/.../filecrypt/examples/plaintext.txt.enc\n\nthe full path to both files will **always** be used, regardless of\nwhether a relative or absolute path was specified on the command line.\n\n**IMPORTANT** >We recommend testing your configuration and command-line\noptions on test files: ``shred`` erases files in a *terminal* way that\nis **not** recoverable: if you mess up, **you will lose data**. > >You\nhave been warned.\n\ndecryption\n~~~~~~~~~~\n\nTo decrypt a file that has been encrypted using this utility, just run\nvirtually the same command, but add the ``-d`` flag: we will\nautomatically append the ``.enc`` extension to the file name given, and\ndecrypt it using the passed in secret key (``-s`` flag):\n\n::\n\n    python3 main.py -f example_conf.yaml -s secret-key.enc -d plaintext.txt\n\n**NOTE** > Use the name of the plaintext file, even if it does not\ncurrently exists: the encrypted file (which should obviously exist) will\nbe assumed to be the same with a ``.enc`` trailing extension (in the\ncase of the example above, it will look for ``plaintext.txt.enc`` in the\ncurrent directory).\n\nIf the encryption key (``--secret`` or ``-s``) is not specified, then\nthe application will try and locate the plaintext file in the keystore\nspecified in the ``conf.yaml`` using the ``store`` key:\n\n.. code:: yaml\n\n    store: keys.csv\n    ...\n\nand derive the location of the encryption key from the entry, if one is\nfound.\n\nPlease note that **the full absolute path must match** even if only a\nrelative path was given at the command line, as files are always stored\nwith their full path when saved to the key store.\n\nreferences\n----------\n\n-  a `detailed HOW-TO <how-to>`__ with the steps to encrypt a file\n   manually;\n-  the original `Ask\n   Ubuntu <http://askubuntu.com/questions/95920/encrypt-tar-gz-file-on-create>`__\n   post;\n-  `OpenSSL <https://openssl.org>`__;\n-  `Ubuntu guide to\n   OpenSSL <https://help.ubuntu.com/community/OpenSSL>`__.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/massenz/filecrypt",
    "keywords": "",
    "license": "Apache2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "crytto",
    "platform": "",
    "project_url": "https://pypi.org/project/crytto/",
    "release_url": "https://pypi.org/project/crytto/0.3.1/",
    "requires_python": "",
    "summary": "An OpenSSL-based file encryption and decryption utility",
    "version": "0.3.1"
  },
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3b8a5eb748757a2706229177d3d89ac4",
          "sha256": "71864e40915cda7d666362ad488764c8b69923aedad7fd0a843e48946303ad32"
        },
        "downloads": 89,
        "filename": "crytto-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b8a5eb748757a2706229177d3d89ac4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 26647,
        "upload_time": "2016-09-19T01:41:40",
        "url": "https://files.pythonhosted.org/packages/87/9f/d51c281e4e97c367b1868f1180c00bdd37655dc675329eb25d0eeec3bfdc/crytto-0.2.0-py3-none-any.whl"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e0095cb4826db8089b7fde21888d4673",
          "sha256": "8e0313f9eb2d09f9b436840905ea9778c7ac8b4c53a9a3af8daceefdb587480b"
        },
        "downloads": 106,
        "filename": "crytto-0.2.1.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "e0095cb4826db8089b7fde21888d4673",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11217,
        "upload_time": "2016-09-19T15:07:51",
        "url": "https://files.pythonhosted.org/packages/73/dc/d50fae2842d43f841fd575114dabb9e2c5bf41d79ed29acbbb74139079f3/crytto-0.2.1.linux-x86_64.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "53764efff43fb7ea9e065b9e384a9f13",
          "sha256": "6e46e21bef1ecfe3d61d6a61e08e0ce186f79d70a74f713dc06c3e12c9081fbe"
        },
        "downloads": 198,
        "filename": "crytto-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "53764efff43fb7ea9e065b9e384a9f13",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 26903,
        "upload_time": "2016-09-19T15:07:49",
        "url": "https://files.pythonhosted.org/packages/a8/99/6a404c388985002cd8b81fdea06622f0a8314fbd7de79bfd57ed1f97bf63/crytto-0.2.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3e227de6d5cdfdd796abf36f08aaddd2",
          "sha256": "bbf1c8ffbb93b2a05cbe6db71f06a6211f019fe442572317a3855e3896593ecf"
        },
        "downloads": 105,
        "filename": "crytto-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3e227de6d5cdfdd796abf36f08aaddd2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10923,
        "upload_time": "2016-09-19T15:07:53",
        "url": "https://files.pythonhosted.org/packages/62/d9/6a54fc631c85da59133d95b774e4c7026580e2996ea8149b7055390371af/crytto-0.2.1.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "78ef6b37a2fe9ee3fadc1afc184d0309",
          "sha256": "377fc18de2dc2f7cc160f3f95f00957548218146072d0695a751d735c70ab3b0"
        },
        "downloads": 0,
        "filename": "crytto-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "78ef6b37a2fe9ee3fadc1afc184d0309",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 27101,
        "upload_time": "2017-06-01T04:24:29",
        "url": "https://files.pythonhosted.org/packages/59/d7/3b42c0d83789387f0c3e1a7959a040cc8d6976697ec0c1ea69edf61b3a9d/crytto-0.3.1-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "78ef6b37a2fe9ee3fadc1afc184d0309",
        "sha256": "377fc18de2dc2f7cc160f3f95f00957548218146072d0695a751d735c70ab3b0"
      },
      "downloads": 0,
      "filename": "crytto-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "78ef6b37a2fe9ee3fadc1afc184d0309",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 27101,
      "upload_time": "2017-06-01T04:24:29",
      "url": "https://files.pythonhosted.org/packages/59/d7/3b42c0d83789387f0c3e1a7959a040cc8d6976697ec0c1ea69edf61b3a9d/crytto-0.3.1-py3-none-any.whl"
    }
  ]
}