{
  "info": {
    "author": "Rocky Bernstein",
    "author_email": "rocky@gnu.org",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Debuggers",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "|buildstatus| |appveyor| |license| |Supported Python Versions|\n\n.. contents:: :local:\n\nAbstract\n========\n\nThis is a gdb-like debugger for Python. It is a rewrite of *pdb* from the ground up.\n\nA command-line interface (CLI) is provided as well as an remote access\ninterface over TCP/IP.\n\nSee the Tutorial_ for how to use. See ipython-trepan_ for using this\nin *ipython* or an *ipython notebook*.\n\nThis package is for Python 2.6 and 2.7. See trepan3k_ for the same code modified to work with Python 3.\nFor Python before 2.6, use pydbgr_ .\n\nFeatures\n========\n\nSince this debugger is similar to other_ trepanning_ debuggers_ and *gdb*\nin general, knowledge gained by learning this is transferable to those\ndebuggers and vice versa.\n\nThere's a lot of cool stuff here that's not in the stock\nPython debugger *pdb*.\n\n\nExact location information\n--------------------------\n\nPython reports line information on the granularity of a line. To get\nmore precise information, we can (de)parse into Python the byte code\naround a bytecode offset such as the place you are stopped at.\n\nSo far as I know, there is no other debugger that can do this.\n\n\nSource-code Syntax Colorization\n-------------------------------\n\nStarting with release 0.2.0, terminal source code is colorized via\npygments_ . And with that you can set the pygments color style,\ne.g. colorful, paraiso-dark. See set_style_ . Furthermore, we make use\nof terminal bold and emphasized text in debugger output and help\ntext. Of course, you can also turn this off. Starting with release\n0.6.0, you can use your own pygments_style_, provided you have a\nterminal that supports 256 colors. If your terminal supports the basic\nANSI color sequences only, we support that too in both dark and light\nthemes.\n\n\nCommand Completion\n------------------\n\nStarting with release 2.8, readline command completion has been added. Command completion is not just a simple static list, but varies depending on the context. For example, for frame-changing commands which take optional numbers, on the list of *valid numbers* is considered.\n\nTerminal Handling\n-----------------\n\nWe can adjust debugger output depending on the line width of your terminal. If it changes, or you want to adjust it, see set_width_ .\n\nSmart Eval\n----------\n\nStarting with release 0.2.0, if you want to evaluate the current source line before it is run in the code, use ``eval``. To evaluate text of a common fragment of line, such as the expression part of an *if* statement, you can do that with ``eval?``. See eval_ for more information.\n\nMore Stepping Control\n---------------------\n\nSometimes you want small steps, and sometimes large stepping.\n\nThis fundamental issue is handled in a couple ways:\n\nStep Granularity\n................\n\nThere are now ``step`` *event* and ``next``  *event* commands with aliases to ``s+``, ``s>`` and so on. The plus-suffixed commands force a different line on a subsequent stop, the dash-suffixed commands don't.\nSuffixes ``>``, ``<``, and ``!`` specify ``call``, ``return`` and ``exception`` events respectively. And without a suffix you get the default; this is set by the `set different` command.\n\nEvent Filtering and Tracing\n...........................\n\nBy default the debugger stops at every event: ``call``, ``return``, ``line``, ``exception``, ``c-call``, ``c-exception``. If you just want to stop at ``line`` events (which is largely what you happens in *pdb*) you can. If however you just want to stop at calls and returns, that's possible too. Or pick some combination.\n\nIn conjunction with handling *all* events by default, the event status is shown when stopped. The reason for stopping is also available via `info program`.\n\nEvent Tracing of Calls and Returns\n----------------------------------\n\nI'm not sure why this was not done before. Probably because of the lack of the ability to set and move by different granularities, tracing calls and returns lead to too many uninteresting stops (such as at the same place you just were at). Also, stopping on function definitions probably also added to this tedium.\n\nBecause we're really handling return events, we can show you the return value. (*pdb* has an \"undocumented\" *retval* command that doesn't seem to work.)\n\nDebugger Macros via Python Lambda expressions\n---------------------------------------------\n\nStarting with release 0.2.3, there are debugger macros.  In *gdb*,\nthere is a *macro* debugger command to extend debugger commands.\n\nHowever Python has its own rich programming language so it seems silly to recreate the macro language that is in *gdb*. Simpler and more powerful is just to use Python here. A debugger macro here is just a lambda expression which returns a string or a list of strings. Each string returned should be a debugger command.\n\nWe also have *aliases* for the extremely simple situation where you want to give an alias to an existing debugger command. But beware: some commands, like step_ inspect command suffixes and change their behavior accordingly.\n\nWe also envision a number of other ways to allow extension of this debugger either through additional modules, or user-supplied debugger command directories.\n\nIf what you were looking for in macros was more front-end control over the debugger, then consider using the experimental (and not finished) Bullwinkle protocol.\n\nByte-code Instruction Introspection\n------------------------------------\n\nWe do more in the way of looking at the byte codes to give better information. Through this we can provide:\n\n* a *skip* command. It is like the *jump* command, but you don't have to deal with line numbers.\n* disassembly of code fragments. You can now disassemble relative to the stack frames you are currently stopped at.\n* Better interpretation of where you are when inside *execfile* or *exec*. (But really though this is probably a Python compiler misfeature.)\n* Check that breakpoints are set only where they make sense.\n* A more accurate determination of if you are at a function-defining *def* statement (because the caller instruction contains ``MAKE_FUNCTION``.)\n\nEven without \"deparsing\" mentioned above, the abilty to disassemble by line number range or byte-offset range lets you tell exactly where you are and code is getting run.\n\nDebugger Command Arguments can be Variables and Expressions\n-----------------------------------------------------------\n\nCommands that take integer arguments like *up*, *list* or\n*disassemble* allow you to use a Python expression which may include\nlocal or global variables that evaluates to an integer. This\neliminates the need in *gdb* for special \"dollar\" debugger\nvariables. (Note however because of *shlex* parsing ,expressions can't\nhave embedded blanks.)\n\nOut-of-Process Debugging\n------------------------\n\nYou can now debug your program in a different process or even a different computer on a different network!\n\nEgg, Wheel, and Tarballs\n------------------------\n\nCan be installed via the usual *pip* or *easy_install*. There is a source tarball. `How To Install <https://python2-trepan.readthedocs.io/en/latest/install.html>`_ has full instructions and installing from git and by other means.\n\nModularity\n----------\n\nThe Debugger plays nice with other trace hooks. You can have several debugger objects.\n\nMany of the things listed below doesn't directly effect end-users, but it does eventually by way of more robust and featureful code. And keeping developers happy is a good thing.(TM)\n\n* Commands and subcommands are individual classes now, not methods in a class. This means they now have properties like the context in which they can be run, minimum abbreviation name or alias names. To add a new command you basically add a file in a directory.\n* I/O is it's own layer. This simplifies interactive readline behavior from reading commands over a TCP socket.\n* An interface is it's own layer. Local debugging, remote debugging, running debugger commands from a file (`source`) are different interfaces. This means, for example, that we are able to give better error reporting if a debugger command file has an error.\n* There is an experimental Python-friendly interface for front-ends\n* more testable. Much more unit and functional tests. More of *pydb*'s integration test will eventually be added.\n\nDocumentation\n-------------\n\nDocumentation: http://python2-trepan.readthedocs.org\n\n.. _pygments:  http://pygments.org\n.. _pygments_style:  http://pygments.org/docs/styles/\n.. _pydb:  http://bashdb.sf.net/pydb\n.. _trepan3k: https://pypi.python.org/pypi/trepan3k\n.. _pydbgr: https://pypi.python.org/pypi/pydbgr\n.. _other: https://www.npmjs.com/package/trepanjs\n.. _trepanning: https://rubygems.org/gems/trepanning\n.. _debuggers: https://metacpan.org/pod/Devel::Trepan\n.. _this: http://bashdb.sourceforge.net/pydb/features.html\n.. _Tutorial: https://github.com/rocky/python2-trepan/wiki/Tutorial\n.. |downloads| image:: https://img.shields.io/pypi/dd/trepan.svg\n    :target: https://pypi.python.org/pypi/trepan\n    :alt: Daily PyPI downloads\n.. |buildstatus| image:: https://travis-ci.org/rocky/python2-trepan.svg\n    :target: https://travis-ci.org/rocky/python2-trepan\n    :alt: CircleCI Build status\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/github/python2-trepan\n    :target: https://ci.appveyor.com/project/rocky/python2-trepan\n    :alt: Appveyor Build status\n.. |Latest Version| image:: https://pypip.in/version/trepan/badge.svg?text=version\n   :target: https://pypi.python.org/pypi/trepan/\n.. _ipython-trepan: https://github.com/rocky/ipython-trepan\n.. |license| image:: https://img.shields.io/pypi/l/trepan.svg\n   :target: https://pypi.python.org/pypi/trepan\n   :alt: License\n.. _set_style:  https://python2-trepan.readthedocs.org/en/latest/commands/set/style.html\n.. _set_width:  https://python2-trepan.readthedocs.org/en/latest/commands/set/width.html\n.. _eval: https://python2-trepan.readthedocs.org/en/latest/commands/data/eval.html\n.. _step: https://python2-trepan.readthedocs.org/en/latest/commands/running/step.html\n.. _install: http://python2-trepan.readthedocs.org/en/latest/install.html\n.. |Supported Python Versions| image:: https://img.shields.io/pypi/pyversions/trepan.svg\n   :target: https://pypi.python.org/pypi/trepan/\n   :alt: Supported Python versions",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/rocky/python2-trepan/",
    "keywords": null,
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "trepan2",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/trepan2/",
    "release_url": "https://pypi.org/project/trepan2/0.7.4/",
    "requires_python": null,
    "summary": "GDB-like Python Debugger in the Trepan family",
    "version": "0.7.4"
  },
  "releases": {
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "41405d35a19d3641f4eb0f0ed1791665",
          "sha256": "86be365fc1e192d27a2f31ddbb03974bc547a0b362da3264badeb9ddc97f99bb"
        },
        "downloads": 0,
        "filename": "trepan2-0.7.4-py2.6.egg",
        "has_sig": false,
        "md5_digest": "41405d35a19d3641f4eb0f0ed1791665",
        "packagetype": "bdist_egg",
        "python_version": "2.6",
        "size": 601709,
        "upload_time": "2017-06-03T16:23:33",
        "url": "https://files.pythonhosted.org/packages/dc/c2/b20b3a11e51a1e5d068e8f75befdadbaddb354a81989da271dd3ad4da40f/trepan2-0.7.4-py2.6.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e275164ad9b4f0c668f7c15e9d6c5545",
          "sha256": "a8ca5382edceb024436fe19cfbedaa16deda7d981abffdb6712d021811894075"
        },
        "downloads": 0,
        "filename": "trepan2-0.7.4-py2.7.egg",
        "has_sig": false,
        "md5_digest": "e275164ad9b4f0c668f7c15e9d6c5545",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 599905,
        "upload_time": "2017-06-03T16:23:38",
        "url": "https://files.pythonhosted.org/packages/d7/53/e514698f3770e09a4b97f963742ac2a1ee7500de626e810b447999bc7bc0/trepan2-0.7.4-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4d8956d41f0ee7079b673770de819f6c",
          "sha256": "23399f47e0b55dc8676c71ba4b84897a06a9ada19334d2562ba937fb15c6df3d"
        },
        "downloads": 0,
        "filename": "trepan2-0.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4d8956d41f0ee7079b673770de819f6c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 237276,
        "upload_time": "2017-06-03T16:23:48",
        "url": "https://files.pythonhosted.org/packages/d1/82/4ac96ab0eed23d148dfe229098a0800cc2bbd751a0a5317462fdf64878a1/trepan2-0.7.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "41405d35a19d3641f4eb0f0ed1791665",
        "sha256": "86be365fc1e192d27a2f31ddbb03974bc547a0b362da3264badeb9ddc97f99bb"
      },
      "downloads": 0,
      "filename": "trepan2-0.7.4-py2.6.egg",
      "has_sig": false,
      "md5_digest": "41405d35a19d3641f4eb0f0ed1791665",
      "packagetype": "bdist_egg",
      "python_version": "2.6",
      "size": 601709,
      "upload_time": "2017-06-03T16:23:33",
      "url": "https://files.pythonhosted.org/packages/dc/c2/b20b3a11e51a1e5d068e8f75befdadbaddb354a81989da271dd3ad4da40f/trepan2-0.7.4-py2.6.egg"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "e275164ad9b4f0c668f7c15e9d6c5545",
        "sha256": "a8ca5382edceb024436fe19cfbedaa16deda7d981abffdb6712d021811894075"
      },
      "downloads": 0,
      "filename": "trepan2-0.7.4-py2.7.egg",
      "has_sig": false,
      "md5_digest": "e275164ad9b4f0c668f7c15e9d6c5545",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "size": 599905,
      "upload_time": "2017-06-03T16:23:38",
      "url": "https://files.pythonhosted.org/packages/d7/53/e514698f3770e09a4b97f963742ac2a1ee7500de626e810b447999bc7bc0/trepan2-0.7.4-py2.7.egg"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "4d8956d41f0ee7079b673770de819f6c",
        "sha256": "23399f47e0b55dc8676c71ba4b84897a06a9ada19334d2562ba937fb15c6df3d"
      },
      "downloads": 0,
      "filename": "trepan2-0.7.4.tar.gz",
      "has_sig": false,
      "md5_digest": "4d8956d41f0ee7079b673770de819f6c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 237276,
      "upload_time": "2017-06-03T16:23:48",
      "url": "https://files.pythonhosted.org/packages/d1/82/4ac96ab0eed23d148dfe229098a0800cc2bbd751a0a5317462fdf64878a1/trepan2-0.7.4.tar.gz"
    }
  ]
}