{
  "info": {
    "author": "Likid Geimfari",
    "author_email": "likid.geimfari@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing"
    ],
    "description": ".. image:: https://raw.githubusercontent.com/lk-geimfari/mimesis/master/media/logo.png\n    :target: https://github.com/lk-geimfari/mimesis\n\n=========================\n\n.. image:: https://travis-ci.org/lk-geimfari/mimesis.svg?branch=master\n    :target: https://travis-ci.org/lk-geimfari/mimesis\n\n.. image:: https://readthedocs.org/projects/mimesis/badge/?version=latest\n\t:target: http://mimesis.readthedocs.io/en/latest/?badge=latest\n\t:alt: Documentation Status\n\n.. image:: https://badge.fury.io/py/mimesis.svg\n    :target: https://badge.fury.io/py/mimesis\n\n.. image:: https://img.shields.io/badge/python-v3.3%2C%20v3.4%2C%20v3.5%2C%20v3.6-brightgreen.svg\n    :target: https://github.com/lk-geimfari/mimesis/\n\n\n`Mimesis <https://github.com/lk-geimfari/mimesis>`_ is a fast and easy to use Python library for generating dummy data for a variety of purposes. This data can be particularly useful during software development and testing. For example, it could be used to populate a testing database for a web application with user information such as email addresses, usernames, first names, last names, etc.\n\nMimesis uses a JSON-based datastore and does not require any modules that are not in the Python standard library. There are over nineteen different data providers available, which can produce data related to food, people, computer hardware, transportation, addresses, and more.\n\n\nDocumentation\n-------------\n\nComplete documentation for Mimesis is available here: http://mimesis.readthedocs.io/\n\n\nInstallation\n------------\n\nTo install Mimesis, simply:\n\n.. code-block:: bash\n\n    \u279c  ~ pip install mimesis\n\nBasic Usage:\n\n.. code-block:: python\n\n    >>> from mimesis import Personal, Address\n    >>> person = Personal('en')\n    >>> address = Address('en')\n\n    >>> person.full_name(gender='female')\n    'Antonetta Garrison'\n\n    >>> person.email(gender='male')\n    'oren5936@live.com'\n\n    >>> person.occupation()\n    'Programmer'\n\n    >>> address.address()\n    '713 Rock Stravenue'\n\n    >>> address.city()\n    'Dumont'\n\n    >>> address.country()\n    'Switzerland'\n\n    >>> address.country_iso(fmt='iso2')\n    'WF'\n\n    >>> address.country_iso(fmt='iso3')\n    'BFA'\n\n    >>> address.country_iso(fmt='numeric')\n    '744'\n\n    >>> address.continent()\n    'South America'\n\n\nLocales\n-------\n\nYou can specify a locale when creating providers and they will return data that is appropriate for the language or country associated with that locale. Mimesis currently includes support for `32 <https://github.com/lk-geimfari/mimesis#locales>`_ different locales.\n\nUsing locales:\n\n.. code-block:: python\n\n    >>> from mimesis import Personal\n\n    >>> en = Personal('en')\n    >>> de = Personal('de')\n    >>> ic = Personal('is')\n\n    >>> en.full_name()\n    'Carolin Brady'\n\n    >>> de.full_name()\n    'Sabrina Gutermuth'\n\n    >>> ic.full_name()\n    'R\u00f3sa \u00de\u00f3rlindsd\u00f3ttir'\n\n\nWhen you only need to generate data for a single locale, use the `Generic` provider, and you can access all `Mimesis`\nproviders from one object.\n\n.. code:: python\n\n    >>> from mimesis import Generic\n    >>> g = Generic('es')\n\n    >>> g.datetime.month()\n    'Agosto'\n\n    >>> g.code.imei()\n    '353918052107063'\n\n    >>> g.food.fruit()\n    'Lim\u00f3n'\n\n\n\n\n    >>> from mimesis import Generic\n    >>> g = Generic('es')\n\n    >>> g.datetime.month()\n    'Agosto'\n\n    >>> g.code.imei()\n    '353918052107063'\n\n    >>> g.food.fruit()\n    'Lim\u00f3n'\n\n\n\n\n    >>> from mimesis import Generic\n    >>> g = Generic('es')\n\n    >>> g.datetime.month()\n    'Agosto'\n\n    >>> g.code.imei()\n    '353918052107063'\n\n    >>> g.food.fruit()\n    'Lim\u00f3n'\n\n\nAdvantages\n----------\n\nMimesis offers a number of advantages over other similar\nlibraries, such as Faker:\n\n-  Performance. Mimesis is significantly `faster`_ than other\n   similar libraries.\n-  Completeness. Mimesis strives to provide many detailed\n   providers that offer a variety of data generators.\n-  Simplicity. Mimesis does not require any modules other than the\n   Python standard library.\n\nSee `here`_ for an example of how we compare performance with other\nlibraries.\n\n.. _faster: http://i.imgur.com/ZqkE1k2.png\n.. _here: https://gist.github.com/lk-geimfari/461ce92fd32379d7b73c9e12164a9154\n\n\nIntegration with Web Application Frameworks\n-------------------------------------------\n\nYou can use Mimesis during development and testing of applications\nbuilt on a variety of frameworks. Here is an example of integration with\na Flask application:\n\n.. code:: python\n\n    class Patient(db.Model):\n        id = db.Column(db.Integer, primary_key=True)\n        full_name = db.Column(db.String(100))\n        weight = db.Column(db.String(64))\n        height = db.Column(db.String(64))\n        blood_type = db.Column(db.String(64))\n        age = db.Column(db.Integer)\n\n        def __init__(self, **kwargs):\n            super(Patient, self).__init__(**kwargs)\n\n        @staticmethod\n        def _bootstrap(count=500, locale='en', gender):\n            from mimesis import Personal\n\n            person = Personal(locale)\n\n            for _ in range(count):\n                patient = Patient(\n                    full_name=person.full_name(gender=gender),\n                    age=person.age(minimum=18, maximum=45),\n                    weight=person.weight(),\n                    height=person.height(),\n                    blood_type=person.blood_type(),\n                )\n\n                db.session.add(patient)\n                try:\n                    db.session.commit()\n                except IntegrityError:\n                    db.session.rollback()\n\nJust run shell mode\n\n::\n\n    (env) \u279c python3 manage.py shell\n\nand do following:\n\n.. code:: python\n\n    >>> db\n    <SQLAlchemy engine='sqlite:///db_dev.sqlite'>\n\n    >>> Patient\n    <class 'app.models.Patient'>\n\n    >>> Patient()._bootstrap(count=1000, locale='en', gender='female')\n\n\nCustom Providers\n----------------\n\nYou also can add custom provider to ``Generic``.\n\n.. code:: python\n\n    >>> class SomeProvider():\n    ...\n    ...     class Meta:\n    ...         name = \"some_provider\"\n    ...\n    ...     @staticmethod\n    ...     def one():\n    ...         return 1\n\n    >>> class Another():\n    ...\n    ...     @staticmethod\n    ...     def bye():\n    ...         return \"Bye!\"\n\n    >>> generic.add_provider(SomeProvider)\n    >>> generic.add_provider(Another)\n\n    >>> generic.some_provider.one()\n    1\n\n    >>> generic.another.bye()\n    'Bye!'\n\n\nBuiltins specific data providers\n--------------------------------\n\nSome countries have data types specific to that country. For example\nsocial security numbers in the United States (``en`` locale), and\ncadastro de pessoas f\u00edsicas (CPF) in Brazil (``pt-br`` locale).\n\nIf you would like to use these country-specific providers, then you must\nimport them explicitly:\n\n.. code:: python\n\n    >>> from mimesis import Generic\n    >>> from mimesis.builtins.pt_br import BrazilSpecProvider\n\n    >>> generic = Generic('pt-br')\n\n    >>> class BrazilProvider(BrazilSpecProvider):\n    ...\n    ...     class Meta:\n    ...         name = \"brazil_provider\"\n    ...\n    >>> generic.add_provider(BrazilProvider)\n    >>> generic.brazil_provider.cpf()\n    '696.441.186-00'\n\n\n\n\n    >>> from mimesis import Generic\n    >>> from mimesis.builtins.pt_br import BrazilSpecProvider\n\n    >>> generic = Generic('pt-br')\n\n    >>> class BrazilProvider(BrazilSpecProvider):\n    ...\n    ...     class Meta:\n    ...         name = \"brazil_provider\"\n    ...\n    >>> generic.add_provider(BrazilProvider)\n    >>> generic.brazil_provider.cpf()\n    '696.441.186-00'\n\n\n\n\n    >>> from mimesis import Generic\n    >>> from mimesis.builtins.pt_br import BrazilSpecProvider\n\n    >>> generic = Generic('pt-br')\n\n    >>> class BrazilProvider(BrazilSpecProvider):\n    ...\n    ...     class Meta:\n    ...         name = \"brazil_provider\"\n    ...\n    >>> generic.add_provider(BrazilProvider)\n    >>> generic.brazil_provider.cpf()\n    '696.441.186-00'\n\n\n\n\n    >>> from mimesis import Generic\n    >>> from mimesis.builtins.pt_br import BrazilSpecProvider\n\n    >>> generic = Generic('pt-br')\n\n    >>> class BrazilProvider(BrazilSpecProvider):\n    ...\n    ...     class Meta:\n    ...         name = \"brazil_provider\"\n    ...\n    >>> generic.add_provider(BrazilProvider)\n    >>> generic.brazil_provider.cpf()\n    '696.441.186-00'\n\n\n\n\n    >>> from mimesis import Generic\n    >>> from mimesis.builtins.pt_br import BrazilSpecProvider\n\n    >>> generic = Generic('pt-br')\n\n    >>> class BrazilProvider(BrazilSpecProvider):\n    ...\n    ...     class Meta:\n    ...         name = \"brazil_provider\"\n    ...\n    >>> generic.add_provider(BrazilProvider)\n    >>> generic.brazil_provider.cpf()\n    '696.441.186-00'\n\n\nDecorators\n----------\n\nIf your locale is cyrillic, but you need latinized locale-specific data,\nthen you can use special decorator. At this moment it\u2019s work only for\nRussian:\n\n.. code:: python\n\n    >>> from mimesis import Personal\n    >>> from mimesis.decorators import romanized\n\n    >>> pr = Personal('ru')\n\n    >>> @romanized('ru')\n    ... def get_name_ro():\n    ...     return pr.full_name()\n    ...\n\n    >>> def get_name_ru():\n    ...     return pr.full_name()\n    ...\n\n    >>> get_name_ru()\n    '\u0412\u0438\u0434\u0430 \u041f\u0430\u043d\u043e\u0432\u0430'\n\n    >>> get_name_ro()\n    'Veronika Denisova'\n\n\n\n\n    >>> from mimesis import Personal\n    >>> from mimesis.decorators import romanized\n\n    >>> pr = Personal('ru')\n\n    >>> @romanized('ru')\n    ... def get_name_ro():\n    ...     return pr.full_name()\n    ...\n\n    >>> def get_name_ru():\n    ...     return pr.full_name()\n    ...\n\n    >>> get_name_ru()\n    '\u0412\u0438\u0434\u0430 \u041f\u0430\u043d\u043e\u0432\u0430'\n\n    >>> get_name_ro()\n    'Veronika Denisova'\n\n\n\n\n    >>> from mimesis import Personal\n    >>> from mimesis.decorators import romanized\n\n    >>> pr = Personal('ru')\n\n    >>> @romanized('ru')\n    ... def get_name_ro():\n    ...     return pr.full_name()\n    ...\n\n    >>> def get_name_ru():\n    ...     return pr.full_name()\n    ...\n\n    >>> get_name_ru()\n    '\u0412\u0438\u0434\u0430 \u041f\u0430\u043d\u043e\u0432\u0430'\n\n    >>> get_name_ro()\n    'Veronika Denisova'\n\n\n\n\n    >>> from mimesis import Personal\n    >>> from mimesis.decorators import romanized\n\n    >>> pr = Personal('ru')\n\n    >>> @romanized('ru')\n    ... def get_name_ro():\n    ...     return pr.full_name()\n    ...\n\n    >>> def get_name_ru():\n    ...     return pr.full_name()\n    ...\n\n    >>> get_name_ru()\n    '\u0412\u0438\u0434\u0430 \u041f\u0430\u043d\u043e\u0432\u0430'\n\n    >>> get_name_ro()\n    'Veronika Denisova'\n\n\n\n\n    >>> from mimesis import Personal\n    >>> from mimesis.decorators import romanized\n\n    >>> pr = Personal('ru')\n\n    >>> @romanized('ru')\n    ... def get_name_ro():\n    ...     return pr.full_name()\n    ...\n\n    >>> def get_name_ru():\n    ...     return pr.full_name()\n    ...\n\n    >>> get_name_ru()\n    '\u0412\u0438\u0434\u0430 \u041f\u0430\u043d\u043e\u0432\u0430'\n\n    >>> get_name_ro()\n    'Veronika Denisova'\n\n\nDisclaimer\n----------\n\nThe authors assume no responsibility for how you use this library data\ngenerated by it. This library is designed only for developers with good\nintentions. Do not use the data generated with ``Mimesis`` for illegal\npurposes.\n\n.. _contribution: https://github.com/lk-geimfari/mimesis/blob/master/CONTRIBUTING.md\n.. _LICENSE: https://github.com/lk-geimfari/mimesis/blob/master/LICENSE\n\n\nAuthor\n------\n\n`Likid Geimfari <https://github.com/lk-geimfari>`_ (likid.geimfari@gmail.com)",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/lk-geimfari/mimesis",
    "keywords": "fake,mock,data,populate,database,testing,generate,mimesis,dummy",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mimesis",
    "platform": "",
    "project_url": "https://pypi.org/project/mimesis/",
    "release_url": "https://pypi.org/project/mimesis/0.0.4/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Mimesis: dummy data for developers.",
    "version": "0.0.4"
  },
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a7e3958f45f3dd9ef56e48a325923e5c",
          "sha256": "c067d451c8ef252f00686edebb8f4e8fb69901e25adbb2151edc393a4c153c28"
        },
        "downloads": 0,
        "filename": "mimesis-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a7e3958f45f3dd9ef56e48a325923e5c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1831771,
        "upload_time": "2017-07-15T18:46:35",
        "url": "https://files.pythonhosted.org/packages/29/9f/ebf48e04eab72f93d6a31725da3a7bc1de22024ac688666c8824996de3f9/mimesis-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3fad94885a68bdb20163332821583b9a",
          "sha256": "6245b280485f46c62c5bc58d6f27e1afcd27672547d14c090da3424a1096b13d"
        },
        "downloads": 0,
        "filename": "mimesis-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3fad94885a68bdb20163332821583b9a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1831765,
        "upload_time": "2017-07-15T18:48:01",
        "url": "https://files.pythonhosted.org/packages/48/b5/5ced1e502098ce2dc994c60bd924fe808df6d4de0c46ad512b0a718c5955/mimesis-0.0.3.tar.gz"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5e07f9fd2174dd4b5685a48429410e6d",
          "sha256": "1b753dc7b9a62063bc2dc7485e05401816c586e0a198a225ced6b187bcf9d8e2"
        },
        "downloads": 0,
        "filename": "mimesis-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5e07f9fd2174dd4b5685a48429410e6d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1836402,
        "upload_time": "2017-08-09T17:08:35",
        "url": "https://files.pythonhosted.org/packages/df/de/7d9fdc0a8d3a7900d819d9a1f45f4087b256cc3ceeb56e2c67ec6c6a8707/mimesis-0.0.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5e07f9fd2174dd4b5685a48429410e6d",
        "sha256": "1b753dc7b9a62063bc2dc7485e05401816c586e0a198a225ced6b187bcf9d8e2"
      },
      "downloads": 0,
      "filename": "mimesis-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "5e07f9fd2174dd4b5685a48429410e6d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 1836402,
      "upload_time": "2017-08-09T17:08:35",
      "url": "https://files.pythonhosted.org/packages/df/de/7d9fdc0a8d3a7900d819d9a1f45f4087b256cc3ceeb56e2c67ec6c6a8707/mimesis-0.0.4.tar.gz"
    }
  ]
}