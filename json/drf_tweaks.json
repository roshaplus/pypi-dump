{
  "info": {
    "author": "Pawel Krzyzaniak",
    "author_email": "pawelk@arabel.la",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "DRF Tweaks\n========================\n|travis|_ |pypi|_ |requiresio|_ |codecov|_\n\n--------------\n\nSet of tweaks for `Django Rest Framework <http://www.django-rest-framework.org/>`_\n\n\nThis project is intended to contain a set of improvements/addons for DRF that we've developed during using DRF.\n\nCurrent tweaks\n--------------\n* `Extended Serializers`_\n* `Auto filtering and ordering`_\n* `Pagination without counts`_\n* `Versioning extensions`_\n* `Autodocumentation`_ - extension for `Django Rest Swagger <https://github.com/marcgibbons/django-rest-swagger>`_\n* `Counting SQL queries in tests`_\n\n\n--------------\n\nExtended Serializers\n--------------------\n\nThere are a few improvements that the standard DRF Serializer could benefit from. Each improvement, how to use it\n& rationale for it is described in the sections below.\n\nOne-step validation\n~~~~~~~~~~~~~~~~~~~\n\nStandard serializer is validating the data in three steps:\n* field-level validation (required, blank, validators)\n* custom field-level validation (method validate_fieldname(...))\n* custom general validation (method validate(...))\n\nSo for example if you have a serializer with 4 required fields: first_name, email, password & confirm_password and you\npass data without first_name and with wrong confirm_password, you'll get first the error for first_name, and then, after\nyou correct it you'll get error for confirm_password, instead of getting both errors at once. This results in bad user\nexperience, and that's why we've changed all validation to be run in one step.\n\nValidation of our Serializer runs all three phases, and merges errors from all of them. However if a given field\ngenerated an error on two different stages, it returns the error only from the former one.\n\nWhen using our Serializer/ModelSerializer, when writing \"validate\" method, you need to remember that given field may\nnot be in a dictionary, so the validation must be more sophisticated:\n\n.. code:: python\n\n    def validate(self, data):\n        errors = {}\n        # wrong - password & confirm_password may raise KeyError\n        if data[\"password\"] != data[\"confirm_password\"]:\n            errors[\"confirm_password\"] = [_(\"This field must match\")]\n\n        # correct\n        if data.get(\"password\") != data.get(\"confirm_password\"):\n            errors[\"confirm_password\"] = [_(\"Passwords\")]\n\n        if errors:\n            raise serializer.ValidationError(errors)\n\n        return data\n\n\nMaking fields required\n~~~~~~~~~~~~~~~~~~~~~~\n\nStandard ModelSerializer is taking the \"required\" state from the corresponding Model field. To make not-required model\nfield required in serializer, you have to declare it explicitly on serializer, so if the field first_name is not\nrequired in the model, you need to do:\n\n.. code:: python\n\n    class MySerializer(serializers.ModelSerializer):\n        first_name = serializers.CharField(..., required=True)\n\n\nThis is quite annoying when you have to do it often, that's why our ModelSerializer allows you to override this by simple\nspecifying the list of fields you want to make required:\n\n.. code:: python\n\n    from drf_tweaks.serializers import ModelSerializer\n\n    class MySerializer(ModelSerializer):\n        required_fields = [\"first_name\"]\n\n\nCustom errors\n~~~~~~~~~~~~~\n\nOur serializers provide a simple way to override blank & required error messages, by either specifying default error for\nall fields or specifying error for specific field. To each error message \"fieldname\" is passed as format parameter.\nExample:\n\n.. code:: python\n\n    from drf_tweaks.serializers import ModelSerializer\n\n    class MySerializer(ModelSerializer):\n        required_error = blank_error = \"{fieldname} is required\"\n        custom_required_errors = custom_blank_errors = {\n            \"credit_card_number\": \"You make me a saaaad Panda.\"\n        }\n\n\nPassing context to subserializers\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRationale: In DRF context is not passed to sub-serializers. So for example, in the standard serializer, you will have \"request\" in the context for the main object (say, Message), but the context for a sub-serializer (say, sender's Account) context will be empty. To workaround this you could for example re-initialize sub-serializers on the serializer's init, or instead of using a sub-serializer use a SerializerMethodField and initialize a sub-serializer inside it, etc. The problem is described here: https://github.com/encode/django-rest-framework/issues/2471\n\nOur serializers includes a mechanism to pass context to sub-serializers, workarounding the problem stated above.\n\nIf for any reason you are using SerializerMethodField with a Serializer inside, and you want to pass context, use pass_context method to filter the fields & include fields properly.\n\n.. code:: python\n\n    from drf_tweaks.serializers import pass_context\n\n    class SomeSerializer(Serializer):\n        some_field = serializers.SerializerMethodField()\n\n        def get_some_field(self, obj):\n            return OtherSerializer(obj, context=pass_context(\"some_field\", self.context)).data\n\n\n**WARNING: passing context may cause some unexpected behaviours, since sub-serializer will start receive the main context (and earlier they were not getting it).**\n\n\nControl over serialized fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nOur serializers provide control over serialized fields. It may be useful in following cases:\n* You have quite heavy serializer (many fields, foreign keys, db calls, etc.), that you need in one place, but in the\nother place you just need some basic data from it - say just name & id. You could provide separate serializer for such\ncase, or even separate endpoint, but it would be easier if the client can have control over which fields get serialized.\n* You have some fields that should be serialized only for some state of the serialized object, and not for other.\n\nBoth things can be achieved with our serializer. By default they check if the \"fields\" were passed in the context or if\n\"fields\" were passed as a GET parameter (in such case \"request\" must be present in the context), but you can define\ncustom behaviour by overriding the followin method in the Serializer:\n\n.. code:: python\n\n    def get_fields_for_serialization(self, fields):  # fields must be in (\"fields\", \"include_fields\")\n        return {\"name\", \"id\"}\n\nThis works also with sub-serializers (using context-passing). Here is an example usage:\n\n.. code::\n\n    https://your.url?fields=some_field,other_field,nested_serializer__some_field,nested_serializer__other_field\n\n\nMaking fields available only on demand\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRationale: it is a good practice to minimize the number of APIs, by making them as generic as possible. This however creates a performance problem when the amount of data being serialized grows by including sub-serializers (which can include sub-serializers themselves). Using control over serialized fields, as described above should be sufficient. However, in practice this mechanism will not be used as frequent as it should. That's why we've introduced another mechanism: on demand fields. Those are fields, specified in the serializer, that will be returned only if requested either by passing their name in \"fields\" (see the previous chapter) or in \"include_fields\" parameter.\n\n\n.. code:: python\n\n    class MySerializer(serializers.ModelSerializer):\n        some_subserializer = OtherSerializer()\n\n        class Meta:\n            model = MyModel\n            fields = [\"some_property\", \"some_subserializer\"]\n            on_demand_fields = [\"some_subserializer\"]\n\n.. code::\n\n    https://your.url?include_fields=some_subserializer\n\n\nAuto filtering and ordering\n---------------------------\n\nRationale\n~~~~~~~~~\n\nThere are nice OrderingFilter and DjangoFilterBackend backends in place, however sorting and filtering fields have to be declared explicitly, which is sometimes time consuming. That's why we've created a decorator that allows to sort & filter (with some extra lookup methods by default) by all the indexed fields present in model and in serializer class (as non write-only). Non-indexed fields may also be added to sorting & filtering, but it must be done explicitly - the idea is, that ordering or filtering by non-indexed field is not optimal from the DB perspective, so if the field is not included in sorting/filtering you should rather create index on it than declare it explicitly.\n\nDecorator works with explicitly defined FilterBackends, as well as with explicitly defined ordering_fields, filter_fields or filter_class. In order to work, it requires ModelSerializer (obtainable either serializer_class or get_serializer_class), from which fields & model class are extracted.\n\nUsage\n~~~~~\n\n.. code:: python\n\n    @autofilter()\n    class SomeAPI(...):\n        serializer_class = SomeModelSerializer\n\n    # it works well with autodoc:\n    @autodoc()  # autodoc should be before autofilter, so it operates on the result from autofilter\n    @autofilter()\n    class SomeAPI(...):\n        serializer_class = SomeModelSerializer\n\n    # you can add some extra fields to sort or filter\n    @autofilter(extra_filter=(\"non_indexed_field\", ), extra_ordering=(\"non_indexed_field\", ))\n    class SomeAPI(...):\n        serializer_class = SomeModelSerializer\n        ordering_fields = (\"other_non_indexed_field\", )\n        filter_fields = (\"other_non_indexed_field\", )\n\n    # it works also when you have a custom filter_class set\n    class SomeFilter(filters.FilterSet):\n        class Meta:\n            model = SomeModel\n            fields = (\"non_indexed_field\", )\n\n    @autofilter()\n    class SomeAPI(...):\n        serializer_class = SomeModelSerializer\n        filter_class = SomeFilter\n\n\nPagination without counts\n-------------------------\n\nRationale\n~~~~~~~~~\n\nCalling \"count\" each time a queryset gets paginated is inefficient - especialy for large datasets. Moreover, in most\ncases it is unnecessary to have counts (for example for endless scrolls). The fastest pagination in such case is\nCursorPaginator, however it is not as easy to use as LimitOffsetPaginator/PageNumberPaginator and does not allow\nsorting.\n\nUsage\n~~~~~\n\n.. code:: python\n\n    from drf_tweaks.pagination import NoCountsLimitOffsetPagination\n    from drf_tweaks.pagination import NoCountsPageNumberPagination\n\n\nUse it as standard pagination - the only difference is that it does not return \"count\" in the dictionary. Page indicated\nby \"next\" may be empty. Next page url is present if the current page size is as requested - if it contains less items\nthen requested, it means we're on the last page.\n\nNoCountsLimitOffsetPagination\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA limit/offset based pagination, without performing counts. For example:\n* http://api.example.org/accounts/?limit=100 - will return first 100 items\n* http://api.example.org/accounts/?offset=400&limit=100 - will returns 100 items starting from 401th\n* http://api.example.org/accounts/?offset=-50&limit=100 - will return first 50 items\n\nHTML is not handled (no get_html_context).\n\nPros:\n* no counts\n* easier to use than cursor pagination (especially if you need sorting)\n* works with angular ui-scroll (which requires negative offsets)\n\nCons:\n* skip is a relatively slow operation, so this paginator is not as fast as cursor paginator when you use large offsets\n\nNoCountsPageNumberPagination\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA standard page number pagination, without performing counts.\n\nHTML is not handled (no get_html_context).\n\nPros:\n* no counts\n* easier to use than cursor pagination (especially if you need sorting)\n\nCons:\n* skip is a relatively slow operation, so this paginator is not as fast as cursor paginator when you use large page\nnumbers\n\nVersioning extensions\n---------------------\n\nRationale\n~~~~~~~~~\n\nDRF provides a nice `versioning mechanism <http://www.django-rest-framework.org/api-guide/versioning/>`_, however there are two things that could be more automated,\nand this is the point of this extension:\n\n* Handling deprecation & obsoletion: when you don't have control over upgrading client app, it is best to set the deprecation/obsoletion mechanism at the very beginning of your project - something that will start reminding a user that he is using old app and he should update it, or in case of obsolition - information, that this app is outdated and it must be upgraded in order to use it. This extension adds warning to header if the API version client is using is deprecated and responds with 410: Gone error when the API version is obsolete.\n* Choosing serializer. In DRF you have to overwrite get_serializer_class to provide different serializers for different versions. This extension allows you to define just dictionary with it: versioning_serializer_classess. You may still override get_serializer_class however if you choose to.\n\nConfiguration\n~~~~~~~~~~~~~\n\nIn order to make deprecation warning work, you need to add DeprecationMiddleware to MIDDLEWARE or MIDDLEWARE_CLASSESS\n(depends on django version you're using):\n\n.. code:: python\n\n    # django >= 1.10\n    MIDDLEWARE (\n        ...\n        \"drf_tweaks.versioning.DeprecationMiddleware\"\n    )\n\n    # django < 1.10\n    MIDDLEWARE_CLASSES (\n        ...\n        \"drf_tweaks.versioning.DeprecationMiddleware\"\n    )\n\n\nIt is highly recommended to add DEFAULT_VERSION along with DEFAUlt_VERSIONINg_CLASS to DRF settings:\n\n.. code:: python\n\n    REST_FRAMEWORK = {\n        ...\n        \"DEFAULT_VERSIONING_CLASS\": \"rest_framework.versioning.AcceptHeaderVersioning\",\n        \"DEFAULT_VERSION\": \"1\",\n    }\n\n\nBy default the DEFAULT_VERSION is None, which will in effect work as \"latest\" - it is safer to make passing newer\nversion explicitly.\n\nApiVersionMixin\n~~~~~~~~~~~~~~~\nUse this as first in inheritance chain when creating own API classes, so for example:\n\n.. code:: python\n\n    class MyApi(ApiVersionMixin, GenericApiView):\n        ...\n\n\nReturns serializer depending on versioning_serializer_classess and version:\n\n.. code:: python\n\n    versioning_serializer_classess = {\n        1: \"x\",\n        2: \"x\",\n    }\n\n\nYou can set custom deprecated/obsolete versions on the class-level\n\n.. code:: python\n\n    CUSTOM_DEPRECATED_VERSION = X\n    CUSTOM_OBSOLETE_VERSION = Y\n\n\nIt can be also configured on the settings level as a fixed version\n\n.. code:: python\n\n    API_DEPRECATED_VERSION = X\n    API_OBSOLETE_VERSION = Y\n\n\nor as an offset - for example:\n\n.. code:: python\n\n    API_VERSION_DEPRECATION_OFFSET = 6\n    API_VERSION_OBSOLETE_OFFSET = 10\n\n\nOffset is calculated using the highest version number, only if versioning_serializer_classess is defined:\n\n.. code:: python\n\n    deprecated = max(self.versioning_serializer_classess.keys() - API_VERSION_DEPRECATION_OFFSET)\n    obsolete = max(self.versioning_serializer_classess.keys() - API_VERSION_OBSOLETE_OFFSET)\n\n\nIf neither is set, deprecation/obsolete will not work. Only the first applicable setting is taken into account\n(in the order as presented above).\n\nAutodocumentation\n-----------------\n\nRationale\n~~~~~~~~~\n\n[Django Rest Swagger][drs] is a awsome tool that generates swagger documentation out of your DRF API. There is however\none deficiency - it does not offer any hooks that would allow you to automaticaly generate some additional documentation.\nFor example, if you want pagination parameters to be visible in the docs, you'd have to set it explicitly:\n\n.. code:: python\n\n    class SomeAPi(ListAPIView):\n        def get(...):\n            \"\"\" page_number -- optional, page number \"\"\"\n\n\nYou may also want to generate some part of description based on some fields in API and make it change automatically\neach time you update them. Django Rest Swagger does not offer any hooks for that, and that is why this extension was\ncreated.\n\nSince there are no hooks available to add custom documentation, this extension is made in a form of class decorator,\nthat creates facade for each API method (get/post/patch/put - defined on the Autodoc class level) and creates a\ndocstring for them based on original docstring (if present) & applicable Autodoc classess.\n\nUsage & Configuration\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    @autodoc(\"List or create an account\")\n    class SomeApi(ApiVersionMixin, ListCreateAPIView):\n        ...\n\n    # you can skip certain classes:\n    @autodoc(\"Base docstring\", skip_classess=[PaginationAutodoc])\n\n    # or add certain classess:\n    @autodoc(\"Base docstring\", add_classess=[CustomAutodoc])\n\n    # you can also override autodoc classess - this one cannot be used with skip_classess or add_classess:\n    @autodoc(\"Base docstring\", classess=[PaginationAutodoc])\n\n\nAvailable Classess\n~~~~~~~~~~~~~~~~~~\n\nClassess are applied in the same order they are defined.\n\nBaseInfo\n********\n\nThis one is adding basic info (the one passed to the decorator itself), as well as custom text or yaml if defined,\nas in following examples:\n\n.. code:: python\n\n    @autodoc(\"some caption\")\n    class SomeApi(RetrieveUpdateAPIView):\n\n        @classmethod\n        def get_custom_get_doc(cls):\n            return \"custom get doc\"\n\n        @classmethod\n        def get_custom_patch_doc_yaml(cls):\n            return \"some yaml\"\n\n\nPagination\n**********\n\nThis one is adding parameters to \"get\" method in swagger in following format:\n\n.. code:: python\n\n    page_number -- optional, page number\n    page_size -- optional, page size\n\n\nIt adds all \"\\*_query_param\" from pagination class, as long as they have name defined, so for standard\nPageNumberPagination, that has page_size_query_param defined as None it will not be enclodes.\n\nIf default pagination class is defined, and you don't want it to be added, you can simply:\n\n.. code:: python\n\n    class SomeClassWithoutPagination(RetrieveAPIView):\n        pagination_class = None\n\n\nOrderingAndFiltering\n********************\n\nThis one is adding ordering & filtering information, based on OrderingFilter and DjangoFilterBackend for \"get\" method in swagger in following format:\n.. code::\n\n    Sorting:\n        usage: ?ordering=FIELD_NAME,-OTHER_FIELD_NAME\n        available fields: id, first_name, last_name, date_of_birth\n\n    Filtering:\n        id: exact, __gt, __gte, __lt, __lte, __in, __isnull\n        date_of_birth: exact, __gt, __gte, __lt, __lte, __in\n        first_name: exact, __gt, __gte, __lt, __lte, __in, __icontains, __istartswith\n        last_name: exact, __gt, __gte, __lt, __lte, __in, __icontains, __istartswith\n\n\nVersioning\n**********\n\nAutodoc for versioning - applied only when ApiVersionMixin is present and the decorated class is using\nrest_framework.versioning.AcceptHeaderVersioning and has versioning_serializer_classess defined. It adds all available\nversions to a swagger, so you can make a call from it using different API versions.\n\nPermissions\n***********\n\nAutodoc for permissions - adds permission class name & it's docstring to the method description.\n\n\nAdding custom classess\n~~~~~~~~~~~~~~~~~~~~~~\n\nCustom class should inherit from AutodocBase:\n\n.. code::\n\n    class CustomAutodoc(AutodocBase):\n        applies_to = (\"get\", \"post\", \"put\", \"patch\", \"delete\")\n\n        @classmethod\n        def _generate_yaml(cls, documented_cls, method_name):\n            return \"\"  # your implementation goes here\n\n        @classmethod\n        def _generate_text(cls, documented_cls, base_doc, method_name):\n            return \"\"  # your implementation goes`here\n\n\nCounting SQL queries in tests\n-----------------------------\n\nRationale\n~~~~~~~~~\nIt is important to make sure your web application is efficient and can work well under high load. The ``drf_tweaks.test_utils.QueryCountingApiTestCase`` allows to have an eye on the SQL queries number. For each view it counts how many calls were executed, and if the number is high (configurable in settings), it shows suitable information (warning or exception).\n\nUsage & Configuration\n~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from django.urls import reverse_lazy\n    from drf_tweaks.test_utils import QueryCountingApiTestCase\n\n    class TestFoo(QueryCountingApiTestCase):\n        def test_bar():\n            # In case there will be more SQL queries than configured in settings, an Exception or warning will be raised\n            self.client.post(reverse_lazy(\"some-post-url\"))\n            # ...\n\nTo configure, set in your settings, for example:\n\n``TEST_QUERY_NUMBER_SHOW_WARNING = 1  # default: 10``\n``TEST_QUERY_NUMBER_RAISE_ERROR = 3  # default: 15``\n\nTo override those settings in tests, use the ``django.test.override_settings`` decorator\n(check the `docs <https://docs.djangoproject.com/en/1.11/topics/testing/tools/#django.test.override_settings>`_).\n\n\n.. |travis| image:: https://secure.travis-ci.org/ArabellaTech/drf_tweaks.svg?branch=master\n.. _travis: http://travis-ci.org/ArabellaTech/drf_tweaks?branch=master\n\n.. |pypi| image:: https://img.shields.io/pypi/v/drf_tweaks.svg\n.. _pypi: https://pypi.python.org/pypi/drf_tweaks\n\n.. |codecov| image:: https://img.shields.io/codecov/c/github/ArabellaTech/drf_tweaks/master.svg\n.. _codecov: http://codecov.io/github/ArabellaTech/drf_tweaks?branch=master\n\n.. |requiresio| image:: https://requires.io/github/ArabellaTech/drf_tweaks/requirements.svg?branch=master\n.. _requiresio: https://github.com/ArabellaTech/drf_tweaks",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ArabellaTech/drf_tweaks",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "drf_tweaks",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/drf_tweaks/",
    "release_url": "https://pypi.org/project/drf_tweaks/0.4.1/",
    "requires_python": null,
    "summary": "Set of tweaks for Django Rest Framework",
    "version": "0.4.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7df9a2282b6cc6bad8ce24ada78c4904",
          "sha256": "a559dcc2d1492c9612a9b1503d3f0c36f334516de4bc6b5ea548245069f5aa45"
        },
        "downloads": 55,
        "filename": "drf_tweaks-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7df9a2282b6cc6bad8ce24ada78c4904",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12458,
        "upload_time": "2016-11-11T03:53:30",
        "url": "https://files.pythonhosted.org/packages/8c/cf/1a4d4bc896ea6f60c17cc5ad0f7baa0beed52e7221867c421c0a3a344476/drf_tweaks-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2189397b4bb3c2d825cd74c63a439b1f",
          "sha256": "0b2c32fd7c7575da48ec46c790df7cf89820eca9eb4c9bf69f43759bf5e03e9e"
        },
        "downloads": 58,
        "filename": "drf_tweaks-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2189397b4bb3c2d825cd74c63a439b1f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14251,
        "upload_time": "2016-11-15T04:48:25",
        "url": "https://files.pythonhosted.org/packages/07/7c/2c52d3c6994c1c64d5898c497c2aff6d3af5a1b3b58285bf98e4594cdbed/drf_tweaks-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ede563654b1953b348bf6651f63fe67f",
          "sha256": "6af0a620a96adcf54bff38edc3d16fa58e5308003ce5f8c11577e0b986328ff6"
        },
        "downloads": 302,
        "filename": "drf_tweaks-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ede563654b1953b348bf6651f63fe67f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14264,
        "upload_time": "2016-11-25T15:27:23",
        "url": "https://files.pythonhosted.org/packages/12/3a/b94d5db010257337d1c8ae42504dfb55aefaca0f90f90b1fe13bf3308d8e/drf_tweaks-0.2.1.tar.gz"
      }
    ],
    "0.2.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "515afa5b2ad9901b0340b67d9835198c",
          "sha256": "9ec2d25e384ba0226060ef34ad5abf595e2d31f38cc8e31dbaab642b9b32429e"
        },
        "downloads": 0,
        "filename": "drf_tweaks-0.2.10-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "515afa5b2ad9901b0340b67d9835198c",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 34992,
        "upload_time": "2017-05-16T10:06:14",
        "url": "https://files.pythonhosted.org/packages/98/f7/32f725ed79704108cc1797afce68f2b53b9745b42050cee7313832c64310/drf_tweaks-0.2.10-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c3f4cd64e17180897a06cfa9252061db",
          "sha256": "15c560f156a2e8712fb76ef95cbb7ed31aa868571b181633f984c468b9bfff39"
        },
        "downloads": 0,
        "filename": "drf_tweaks-0.2.10.tar.gz",
        "has_sig": false,
        "md5_digest": "c3f4cd64e17180897a06cfa9252061db",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15084,
        "upload_time": "2017-05-16T10:06:11",
        "url": "https://files.pythonhosted.org/packages/ff/cd/dabff1244cb8bca15de68d9cfe3d53de95ecb1dd8a99d079c086bd18eec5/drf_tweaks-0.2.10.tar.gz"
      }
    ],
    "0.2.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b780f2024570814cab2a97c7558d43dd",
          "sha256": "ce0b348f9027504d075f9e74db7e72e1738081cfc50233d2d8a604eedfc69dc5"
        },
        "downloads": 0,
        "filename": "drf_tweaks-0.2.11-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b780f2024570814cab2a97c7558d43dd",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 22000,
        "upload_time": "2017-05-24T09:40:25",
        "url": "https://files.pythonhosted.org/packages/a9/59/39a6a1446d385f9c4f31b6355ebb16ea2f3ddee559b883194ab1b122bbd0/drf_tweaks-0.2.11-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "471b12b0da9e552ba82dd07115d430e5",
          "sha256": "298dff2efbb0a98e21ee6385bd8f773f9a41fb6c17b3b84b6a9ba456e6857e9f"
        },
        "downloads": 0,
        "filename": "drf_tweaks-0.2.11.tar.gz",
        "has_sig": false,
        "md5_digest": "471b12b0da9e552ba82dd07115d430e5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15127,
        "upload_time": "2017-05-24T09:40:23",
        "url": "https://files.pythonhosted.org/packages/94/70/b282c02c7f2d0962997a09c9b19798ec85e001f49560104300a0144e8822/drf_tweaks-0.2.11.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4db8333fadd852054c5eb25b17d1c785",
          "sha256": "9d20dd4d0583b20a5f8ed4b67eebc36e025a126dfd58ccba0c9f17e6bb3a50a5"
        },
        "downloads": 328,
        "filename": "drf_tweaks-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4db8333fadd852054c5eb25b17d1c785",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14287,
        "upload_time": "2016-11-25T16:04:14",
        "url": "https://files.pythonhosted.org/packages/47/10/c439fce1cd685e72c38c0d04d2e49a32d810673c736d8824e78de02f66c2/drf_tweaks-0.2.2.tar.gz"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0444215dfdb752eff25326def7b33a7e",
          "sha256": "63ddfa1a5fa614937649d7a01aa24a530b246ce1f05c10b0748e8aef8980ea69"
        },
        "downloads": 9,
        "filename": "drf_tweaks-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0444215dfdb752eff25326def7b33a7e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14322,
        "upload_time": "2017-01-16T12:28:00",
        "url": "https://files.pythonhosted.org/packages/1e/c4/2040595c939f6623c319226ad3d552a72e1c2e6f36029e61b1ba985d8094/drf_tweaks-0.2.3.tar.gz"
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bd092148e98e634e886254b53006461b",
          "sha256": "0ca0b7dc6caebd70228e037da7ea0562b77ed391bd4872d01944e091eac387e1"
        },
        "downloads": 9,
        "filename": "drf_tweaks-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "bd092148e98e634e886254b53006461b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14329,
        "upload_time": "2017-01-28T09:52:19",
        "url": "https://files.pythonhosted.org/packages/38/ed/6ff3dfa6a0d4586611d8531294e5cb758146d8db05a29bf8a4c5d755adbd/drf_tweaks-0.2.4.tar.gz"
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "04171f9afdbcb003dd00ae65e1a061cf",
          "sha256": "347632613ff4d7c950303eddaa582f1fd785b39d3ea49be7efc0f1d7c9667879"
        },
        "downloads": 10,
        "filename": "drf_tweaks-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "04171f9afdbcb003dd00ae65e1a061cf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14538,
        "upload_time": "2017-01-28T10:54:28",
        "url": "https://files.pythonhosted.org/packages/69/e8/b9fe0e5bb8d2363738dc639a272595cdc179a5f1e7d2ffcc24bbdc037991/drf_tweaks-0.2.5.tar.gz"
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "60c61149cca1339f9b08ebdc9e224dcc",
          "sha256": "99049f2db60e7bc01adabffde313e03f2b15e556da3a62384b83f5ad0806074d"
        },
        "downloads": 19,
        "filename": "drf_tweaks-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "60c61149cca1339f9b08ebdc9e224dcc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14588,
        "upload_time": "2017-02-20T16:19:08",
        "url": "https://files.pythonhosted.org/packages/88/e1/3721317ef27a0b3eb9a748c1a3f18114cdb823f8571e771e17aa4cf6db82/drf_tweaks-0.2.6.tar.gz"
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0ae24c30482f35308ff0e3459e2952bc",
          "sha256": "3af976f15cea87e6a86ed4a1b8da2e569b3e920d64bf8a1f39751ee00ba69a56"
        },
        "downloads": 44,
        "filename": "drf_tweaks-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "0ae24c30482f35308ff0e3459e2952bc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15028,
        "upload_time": "2017-03-14T12:55:42",
        "url": "https://files.pythonhosted.org/packages/24/24/de6bbf97b0cafb26597301083e553bba4645f7f87f346e193e82e4c85bc8/drf_tweaks-0.2.7.tar.gz"
      }
    ],
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d2403b2d534f453d0b53cbbd3845ebf5",
          "sha256": "851a33636e2f298397c7219c61e6c6371a76efcf8f63e6ec00dbbb8a8940ef31"
        },
        "downloads": 0,
        "filename": "drf_tweaks-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "d2403b2d534f453d0b53cbbd3845ebf5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15051,
        "upload_time": "2017-04-11T11:03:30",
        "url": "https://files.pythonhosted.org/packages/52/58/57582cc847c7b9d166a1fae8e109e753f8340bfa3b0a9b3bc57c6f01c723/drf_tweaks-0.2.8.tar.gz"
      }
    ],
    "0.2.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0cfe9571af6428bff5e0dc31d567d9a2",
          "sha256": "5dd9e546c28f6d611858f545e5f5c693c0cce2fcf9e99ac54f918d39f64f1423"
        },
        "downloads": 0,
        "filename": "drf_tweaks-0.2.9.tar.gz",
        "has_sig": false,
        "md5_digest": "0cfe9571af6428bff5e0dc31d567d9a2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15029,
        "upload_time": "2017-05-11T13:10:29",
        "url": "https://files.pythonhosted.org/packages/9f/58/6f88802c135e0f73de50fc586a18ecc1a04812836217956c5f847b8baa19/drf_tweaks-0.2.9.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "272722d2bf7475cab3a3027b53a7caa6",
          "sha256": "d6b359d340c3b4fc79c7f9b03acebf30b3ce2fb44ba0f5653eedf81b61d57bbf"
        },
        "downloads": 0,
        "filename": "drf_tweaks-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "272722d2bf7475cab3a3027b53a7caa6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16764,
        "upload_time": "2017-06-05T12:42:31",
        "url": "https://files.pythonhosted.org/packages/ce/eb/88fc1ee64d65346e0bfc51f5ec72276c26d8b326e5be0dee5c0c264848a6/drf_tweaks-0.3.1.tar.gz"
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d2da1caf5621bdd7a33bad4e826f4067",
          "sha256": "974764efecbc8315b7570b49b691639abc0f66c081baf9e0865e6b598ef46aeb"
        },
        "downloads": 0,
        "filename": "drf_tweaks-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d2da1caf5621bdd7a33bad4e826f4067",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16799,
        "upload_time": "2017-06-05T13:50:58",
        "url": "https://files.pythonhosted.org/packages/18/d9/6b8767b492c34b5ca5cf325d4f4f92c147dfea9cbe0f736cec8fb4c95fbc/drf_tweaks-0.3.2.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dd7535fdda1396f3a8207fb8635d8136",
          "sha256": "bdeb5b005c7f0c3f1b6891abe0e8223222574398b6f57628e420683a33a5c6e1"
        },
        "downloads": 0,
        "filename": "drf_tweaks-0.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "dd7535fdda1396f3a8207fb8635d8136",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 27310,
        "upload_time": "2017-06-09T09:45:13",
        "url": "https://files.pythonhosted.org/packages/13/30/58eb3eba25ade91ea8ad93b81222bbb4e7a861245e2b9cab5d3f167696ff/drf_tweaks-0.4.0-py2.py3-none-any.whl"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "482221a2f2e548fbafc8bf66eecda15f",
          "sha256": "a189f7310c785ca0b9306fb45c1294bd59d2a75240e67a7a5330800c8eb770ee"
        },
        "downloads": 0,
        "filename": "drf_tweaks-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "482221a2f2e548fbafc8bf66eecda15f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18176,
        "upload_time": "2017-06-12T15:39:32",
        "url": "https://files.pythonhosted.org/packages/62/c1/ad95315665e74645780e730dd608b50b3e44cc9e8bbaae7ad3ec50803a95/drf_tweaks-0.4.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "482221a2f2e548fbafc8bf66eecda15f",
        "sha256": "a189f7310c785ca0b9306fb45c1294bd59d2a75240e67a7a5330800c8eb770ee"
      },
      "downloads": 0,
      "filename": "drf_tweaks-0.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "482221a2f2e548fbafc8bf66eecda15f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 18176,
      "upload_time": "2017-06-12T15:39:32",
      "url": "https://files.pythonhosted.org/packages/62/c1/ad95315665e74645780e730dd608b50b3e44cc9e8bbaae7ad3ec50803a95/drf_tweaks-0.4.1.tar.gz"
    }
  ]
}