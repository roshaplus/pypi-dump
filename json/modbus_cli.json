{
  "info": {
    "author": "Gabriele Favalessa",
    "author_email": "favalex@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "=========\nmodbus\n=========\n\n---------------------------------------------\nAccess Modbus devices from the command line\n---------------------------------------------\n\n:Author: favalex@gmail.com\n:Date: 2017-06-04\n:Copyright: MPL 2.0\n:Version: 0.1\n:Manual section: 1\n\nSYNOPSIS\n========\n\n  modbus [-h] [-r REGISTERS] [-s SLAVE_ID] [-b BAUD] [-p STOP_BITS] [-v] device access [access ...]\n\nDESCRIPTION\n===========\n\nmodbus allows reading and writing registers of Modbus devices from the command line.\n\nIt can talk to both TCP and RTU (i.e. serial) devices and can encode and decode\ntypes larger than 16 bits (e.g. floats) into Modbus 16 bits registers.\n\nRegister definitions (consisting of a register address and its type) can be\nprovided directly on the command line or loaded from a file and referred by\nsymbolic name, for convenience.\n\nmodbus is implemented in python on top of the protocol implementation provided\nby the umodbus python library.\n\nOPTIONS\n=======\n\ndevice\n  ``/dev/ttyXXX`` for serial devices, or ``hostname[:port]`` for TCP devices\n\naccess\n  One or more read or write operations. See ACCESS SYNTAX below.\n\n-r FILE, --registers=FILE    Read registers definitions from FILE.\n-v, --verbose                Print on screen the bytes as transfered on the wire.\n-b BAUD, --baud=BAUD         Set the baud rate for serial connections.\n-p BITS, --stop-bits=BITS    Set the number of stop bits for serial connections.\n-h, --help                   Show this help message and exit.\n\nACCESS SYNTAX\n=============\n\n[MODBUS_TYPE@]ADDRESS[/BINARY_TYPE][=VALUE]\n\nMODBUS_TYPE = h|i|c|d\n  The modbus type, one of\n\n  ==== ================ ======= =========\n  code name             size    writable\n  ==== ================ ======= =========\n  h    holding register 16 bits yes\n  i    input register   16 bits no\n  c    coil             1 bit   yes\n  d    discrete input   1 bit   no\n  ==== ================ ======= =========\n\nADDRESS = <number>\n  0-based register address\n\nBINARY_TYPE = <pack format>\n  Any format description accepted by the python standard ``pack`` module. Some common formats are:\n\n  ==== ====\n  code type\n  ==== ====\n  h    16 bits signed integer\n  H    16 bits unsigned integer\n  i    32 bits signed integer\n  I    32 bits unsigned integer\n  f    32 bits IEEE 754 float\n  ==== ====\n\n  The default byte order is big-endian, use a ``<`` prefix in the format to specify little-endian.\n\nVALUE = <number>\n  The value to be written to the register. If not present, the register will be read instead.\n\nEXAMPLES\n========\n\n=============== ====\n``h@39/I``      read the 32-bits unsigned integer stored in holding registers at addresses 39 and 40\n``39/I``        same as above (h is the default modbus type)\n``39/I=42``     write the integer 42 to that register\n``39/I=0xcafe`` the value can be specified in hexadecimal\n``c@5``         read coil at address 5\n``h@24/f=6.78`` write a floating point value to holding registers at addresses 24 and 25\n=============== ====\n\nREGISTERS FILE SYNTAX\n=====================\n\nA ``#`` starts a comment.\n\nEach line contains a symbolic name followed by the register definition, separated by spaces.\n\nSEE ALSO\n========\n\n* `modbus <https://en.wikipedia.org/wiki/Modbus>`__\n* `umodbus <https://pypi.python.org/pypi/uModbus>`__\n* `pack format <https://docs.python.org/3/library/struct.html#format-characters>`__\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/favalex/modbus-cli",
    "keywords": "",
    "license": "MPL 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "modbus_cli",
    "platform": "",
    "project_url": "https://pypi.org/project/modbus_cli/",
    "release_url": "https://pypi.org/project/modbus_cli/0.1.0/",
    "requires_python": "",
    "summary": "Command line tool to access Modbus devices",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bc4b7a5c4714a5a405c925cbf08fb0f2",
          "sha256": "cb6fd55ff1ba0a1942cca3c94b6eaf4c5c6921afd2492d80d76a09ed75910316"
        },
        "downloads": 0,
        "filename": "modbus_cli-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bc4b7a5c4714a5a405c925cbf08fb0f2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5702,
        "upload_time": "2017-06-04T17:00:45",
        "url": "https://files.pythonhosted.org/packages/46/e5/8c22d0284577c4fa9f01897008616096360da8108d7a462b39d17bc244a9/modbus_cli-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "bc4b7a5c4714a5a405c925cbf08fb0f2",
        "sha256": "cb6fd55ff1ba0a1942cca3c94b6eaf4c5c6921afd2492d80d76a09ed75910316"
      },
      "downloads": 0,
      "filename": "modbus_cli-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bc4b7a5c4714a5a405c925cbf08fb0f2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5702,
      "upload_time": "2017-06-04T17:00:45",
      "url": "https://files.pythonhosted.org/packages/46/e5/8c22d0284577c4fa9f01897008616096360da8108d7a462b39d17bc244a9/modbus_cli-0.1.0.tar.gz"
    }
  ]
}