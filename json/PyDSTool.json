{
  "info": {
    "author": "Rob Clewley",
    "author_email": "rob.clewley@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: BSD :: FreeBSD",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Scientific/Engineering"
    ],
    "description": "PyDSTool\n========\n\n|buildstatus|_ |coverage|_\n\n*This is a beta release version.*\n\nPyDSTool is a sophisticated & integrated simulation and analysis environment\nfor dynamical systems models of physical systems (ODEs, DAEs, maps, and hybrid\nsystems).\n\nPyDSTool is platform independent, written primarily in Python with some\nunderlying C and Fortran legacy code for fast solving. It makes extensive use\nof the numpy and scipy libraries. PyDSTool supports symbolic math,\noptimization, phase plane analysis, continuation and bifurcation analysis, data\nanalysis, and other tools for modeling -- particularly for biological\napplications.\n\nThe project is fully open source with a BSD license, and welcomes contributions\nfrom the community.\n\nSee more at `pydstool.sourceforge.net <http://pydstool.sourceforge.net>`__.\n\n--------------\n\nRequirements\n~~~~~~~~~~~~\n\n*  `Python <http://www.python.org>`__ 2.7 or 3.3+;\n*  `numpy <http://www.numpy.org>`__;\n*  `scipy <http://www.scipy.org>`__.\n\nDopri/Radau and AUTO interface requirements\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n*  `swig <http://www.swig.org>`__ > 2.0;\n*  C compiler (e.g, gcc or clang);\n*  GNU Fortran compiler (Radau only).\n\nOptional requirements\n^^^^^^^^^^^^^^^^^^^^^\n\n*  `matplotlib <http://www.matplotlib.org>`__\n   Matplotlib is needed for plotting functionality and running many of the examples.\n\nRecommended\n^^^^^^^^^^^\n\n*  `ipython <http://www.ipython.org>`__\n\nInstallation\n~~~~~~~~~~~~\n\nDebian/Ubuntu\n^^^^^^^^^^^^^\n\n*  install necessary packages:\n\n   ::\n\n           sudo apt-get update\n           sudo apt-get install -qq gfortran swig\n           sudo apt-get install -qq python-numpy python-scipy python-matplotlib\n\n*  install ``PyDSTool``:\n\n   ::\n\n           sudo python setup.py install\n\n   or\n\n   ::\n\n           sudo python setup.py develop\n\n   Run without ``sudo`` and add flag ``--user`` to install for local\n   user only.\n\nGetting started and documentation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSee the `online documentation <http://pydstool.sourceforge.net>`__,\nparticularly the GettingStarted and Tutorials pages! Please report bugs\nand suggestions using the user forum linked to there.\n\nTests and examples\n~~~~~~~~~~~~~~~~~~\n\nRunning examples\n^^^^^^^^^^^^^^^^\n\nExamples can be found in the ``examples`` directory. Some examples can\nonly be run once, others have produced their output, for instance\nHH\\_loaded.py, HH\\_loaded\\_dopri.py. Several of the examples require an\nexternal compiler. An easy way to run all the examples in an appropriate\norder is to run the script 'run\\_all\\_tests.py':\n\n::\n\n        cd examples\n        python run_all_tests.py\n\nThere is a simple option in that file that you may need to edit in order\nto select whether the external compiler tests should be run (in case you\ndo not have ``gcc`` and ``gfortran`` working on your system).\n\nNote that on some platforms you will see an error report when the script\ntries to automatically close matplotlib graph windows, to the effect of:\n\n::\n\n    \"Fatal Python error: PyEval_RestoreThread: NULL tstate\"\n\nThis error can be ignored. You may also have to close the plot windows\nyourself before the script can continue. This will depend on your\nplatform and settings.\n\nRunning test suite\n^^^^^^^^^^^^^^^^^^\n\nTo run test suite, install `py.test <http://www.pytest.org>`__ and\n`mock <http://www.voidspace.org.uk/python/mock/>`__, using ``pip``:\n\n::\n\n        sudo pip install py.test mock\n\nor package manager:\n\n::\n\n        sudo apt-get install python-pytest python-mock\n\nThen run:\n\n::\n\n        python setup.py test\n\n\nGetting coverage report\n^^^^^^^^^^^^^^^^^^^^^^^\n\n*  install ``pytest-cov``\n\n   ::\n\n           sudo pip install pytest-cov\n\n*  run ``py.test``\n\n   ::\n\n           py.test --cov PyDSTool --cov-report html --cov-config .coveragerc\n\n*  open file ``htmlcov/index.html`` in your browser\n\nCredits\n~~~~~~~\n\nCoding and design by Robert Clewley, Erik Sherwood, Drew LaMar, Vladimir\nZakharov, and John Guckenheimer, except where otherwise stated in the\ncode or documentation. (Several other open source codes have been\nredistributed here under the compatible licenses.)\n\n--------------\n\n\n\n.. |buildstatus| image:: https://travis-ci.org/robclewley/pydstool.svg?branch=master\n.. _buildstatus: https://travis-ci.org/robclewley/pydstool\n\n.. |coverage| image:: https://coveralls.io/repos/robclewley/pydstool/badge.png?branch=master\n.. _coverage: https://coveralls.io/r/robclewley/pydstool?branch=master\n\n\nRelease notes: Highlights of new features\n=========================================\nFor latest changes see http://github.com/robclewley/pydstool\n\n\nVersion 0.90.2 06 Jul 2015\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n* Fixed stdout redirection bug, when running inside ipython shell (#98)\n* Fixed bug with powers handling in C code generation (#90)\n* Minor fixes and improvements to prepJacobian, e.g. can now provide Fun-based definitions\n* Update to properly support symbolic names in DS args\n* Many phaseplane toolbox improvements:\n     - Added phaseplane utility functions: get_bearing, distance_to_line, find_pt_2D, find_pt_nophase_2D, dist, dist_vectorized\n     - find_fixedpoints has improved behavior when point is only slowly converging but already within tolerance\n     - Added coordarray attribute and ability to index by variable name to Point2D class for better compatibility with regular Point\n     - find_saddle_manifolds behavior improved\n \nThanks to Fabrice Silva and 'tensionhead' for contributing patches\n\nVersion 0.90.1 10 Dec 2014\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n* Removed API docs from the repository (#78)\n\nVersion 0.90.0 02 Dec 2014\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n* Added support for Python 3.3+\n* Added support for Python setuptools\n* Fixed Dopri/Radau bug on 64-bit platforms\n* Added support for Clang compiler in Dopri/Radau C interface\n* Ported Dopri/Radau C interface from NumArray to NumPy to support numpy-1.9+\n* Dropped Python<2.7 support\n\nversion 0.88 02 Dec 2012\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThis is primarily a bug fix release in the run-up to version 0.90.\n\n* Improved 64-bit support for C integrators\n* Fixes to macro 'for' expressions\n* Added support for negative indices in indexing PointInfo tags\n* Minor improvements and fixes for phaseplane toolbox\n* More code commenting and docstrings\n* Minor bug fixes and internal code efficiency improvements\n\nversion 0.88 04 May 2012\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n * Added initial demos for NineML and PySCeS interfacing\n * Added minor functions to support user-defined Jacobian\n * Cleaned up default imports - provided plt alias for pyplot\n * More code commenting and docstrings\n * Minor bug fixes and internal code efficiency improvements\n\nversion 0.88 21 Dec 2011\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n * Minor efficiency improvements to hybrid model initialization\n * Improvements to phaseplane diagnostic tools (still work in progress)\n * Pointset merge function added\n * Added support for use of auxvar definitions in event functions\n * Parsing support for new macro 'SUM' in dynamics specifications: see\n   basic_gen_tests.py\n\n * Improved modular model building demonstrations in ModelSpec_test for\n   biophysical neural models, including examples for noise signals\n\n * Test code cleanup\n * Better code commenting\n * Minor bug fixes\n\nversion 0.88 26 Aug 2011\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n  * Made compatible with newest numpy/scipy versions\n  * Improved efficiency of PyCont\n  * Added some improvements to phase plane analysis Toolbox.\n  * Fixed various bugs\n  * Improved API of various functions and classes\n  * Added some additional documentation\n  * Created an Euler_ODEsystem for testing and simple (e.g. demo) integrations + with support for user-defined calls before and after a step\n  * Other recent changes at http://pydstool.bzr.sourceforge.net/bzr/pydstool/changes\n\nversion 0.88 18 Feb 2011\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n  * New numeric_to_traj and pointset_to_traj utility functions\n  * Major improvements to intelligent expr2func (symbolic -> python function conversion)\n  * Cleanup of global imports, especially: entire numpy.random and linalg namespaces no longer imported by default\n  * Added support for 'min' and 'max' keywords in functional specifications (for ODE right-hand sides, for instance)\n\n  * Optimization tools from third-party genericOpt included - improved parameter estimation examples\n  * Numerical phase-response calculations now possible in PRC toolbox\n  * Fully-fledged DSSRT toolbox (see wiki page)\n  * New tests/demonstrations in PyDSTool/tests\n  * Improved compatibility with cross-platform use and with recent python versions and associated libraries\n  * Other bug fixes and improvements\n\nversion 0.88 22 Nov 2010\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n    * Neural computation toolbox now supports gap junctions, Calcium stores, among others\n    * Trajectory Events are now recorded in sampled pointset using labels\n    * Fixed rare loss-of-precision problems with events and sampling for time steps close to machine precision\n    * Minor change in logic for Model \"internal\" variables\n    * Added some minor features\n    * Fixed some minor bugs\n\nversion 0.88 04 Oct 2010\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n    * New numeric_to_traj and pointset_to_traj utility functions\n    * Major improvements to intelligent expr2func (symbolic -> python function conversion)\n    * Cleanup of global imports, especially: entire numpy.random and linalg namespaces no longer imported by default\n    * Added support for 'min' and 'max' keywords in functional specifications (for ODE right-hand sides, for instance)\n    * Optimization tools from third-party genericOpt (included with permission) - improved parameter estimation examples\n    * Numerical phase-response calculations now possible in PRC toolbox (see ToolboxDocumentation)\n    * Fully-fledged DSSRT toolbox for neural modeling (see ToolboxDocumentation)\n    * New tests/demonstrations in PyDSTool/tests\n    * Improved compatibility with cross-platform use and with recent python versions and associated libraries\n    * Added many minor features\n    * Fixed many minor bugs\n\n\nversion 0.87 10 Nov 2008\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nMajor new features:\n * ModelInterface class and new-style Models - major restructure of\n   how Models are organized and can be hierarchically embedded in\n   each other\n\n * Feature & condition classes with ModelInterface ease specification\n   of hybrid models and complex parameter estimation & model\n   inference problems\n\n * Support for 2nd order interpolated polynomial representation of\n   Trajectory objects (using Anne Archibald's poly_int classes):\n   These are off by default as they require a large amount of time\n   to compute. See tests/poly_interp_test.py (Auxiliary variables\n   cannot be included in this, and remain linearly interpolated,\n   as their derivatives are not generally available.)\n\n * Descriptors, Transform classes for automated model building and\n   manipulation of specifications\n\n * MProject sub-package for managing model estimation/inference\n   projects\n\n * All generators now return trajectories that only continue until\n   any user-defined state bounds are reached. The state bounds are\n   not found with the same accuracy as terminal events defined to\n   trap these bounds errors, which is the recommended way to\n   implement this (e.g., through ModelConstructor options).\n\n * Default interval checking is now off (use 'checklevel' option 1\n   or 2 to return to consistency checking with warnings) to improve\n   speed of ODE solving\n\nFeature and API improvements and fixes by module:\n\nModel.py:\n * Improved interaction between domain boundaries and event detection\n   for hybrid model switching at those boundaries (esp. for VODE)\n * Hybrid model classes and functionality cleaned up and re-organized.\n   Hybrid models are now a sub-class of Model so that they can be\n   organized hierarchically, with Generator-only based models as the\n   leaves. All methods and attributes involving name \"Generator\" now\n   replaced with \"submodel\" or \"DS\" (for dynamical system).\n * HybridTrajectory sub-class behaves like a proper Trajectory\n * Fixed bug in recording of events for hybrid models\n * Now all sub-models of a hybrid system must \"export\" the same\n * Can promote a Generator's auxiliary variables to be treated as\n   observable or internal vars at Model level, provided all\n   sub-models export them. forceObsVars and forceIntVars used to\n   promote the aux vars or to change internal <-> observable variables\n   (now has no effect if variables already of desired type)\n * Method delTraj -> _delTraj deprecated because del model[trajname]\n   now works\n * Removed method numPartitions (instead, use\n   len(getTrajTimePartitions(trajname)))\n * Added renameTraj method\n * fulldimension -> dimension (= # of obs + int vars)\n   genInfo tuple -> modelInfo dict (see technical documentation for details)\n   generators list attribute -> registry dict attribute\n\nTrajectory.py:\n * Regular continuouss trajectories can now be called as a map (0 or\n   1 only) to yield endpoints\n\n * Can now delete variables from a Trajectory\n\n * Now support FScompatibleNames map (primarily for internal use by\n   Model objects)\n\n * Fixed bug in trajectory calling as map (appending of time to vals\n   works in place and so previously, result was None)\n\n * Attribute .varnames -> .coordnames\n\nPyCont:\n * New PyCont example for finding level sets of functions\n * Fixed minor bug in PyCont/AUTO for continuing limit cycles\n\nGenerators:\n * Generators now support queries in hierarchical name format\n * Fixed bug in event detection for VODE integrator\n * Fixed access to external inputs for C-based ODE integrators before\n   first integration performed\n\nPoints.py:\n * Can now rename variables in pointsets and points\n * Fixed bug in pointset's label reversal\n\nInterval.py:\n * Fixed small bug concerning singleton interval comparison\n * Added isfinite method\n\nFuncSpec.py:\n * Fixed obscure error in cross-referenced aux fns\n * Fixed abs -> fabs mapping error in vector field functions\n * Allowed scripts using C-based Generators to be re-run provided\n   definition of Generator has not changed (used to always raise an\n   error)\n\n\nversion 0.86  01 Jun 2008\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n * Now compatible with Python 2.5 and Numpy 1.0.4 / Scipy 0.6.0\n * Interval class now supports discrete valued intervals\n * Improved diagnostic reporting structure in Generator and Model classes\n * Inclusion of intuitive arithmetic operations for Point and Pointset classes\n * Improved overhead for simulating hybrid models\n * Fixed some slice bugs with Point and Pointset classes\n * Improved 'info' pretty printer utility\n * Added support for numerical rounding error tolerance in resolving independent\n   variable values in Variable and Model/ModelConsturctor classes\n * Added Jacobian and standard event arguments (for zero crossing detection)\n   options to ModelConstructor to auto-generate Jacobian and Jacobian w.r.t.\n   parameters\n * Improved efficiency of VODE Generator in computing trajectories\n\nMinor\n\n * Created a new HybridTrajectrory and HybridVariable class so that APIs are\n   more in line with non-hybrid versions\n * Moved underlyingMesh for Trajectory to the Variable class\n * Fixed ModelSpec indentation\n * Fixed bug so that ImplicitFnGen Trajectories are now parameterized\n * Syntax for Symbolic and ModelSpec classes: moved target language and\n   compatible types specifications to the ModelSpec class\n * Added external input support to calls to RHS, Jacobian functions, etc. in\n   Generator classes\n * Moved eventtol to ModelConstructor, from GeneratorConstructor, and made abseps\n   default better\n * Removed backwards compatible method names such as computeTraj, sampleTraj, and\n   setModelPars from Model, in favor of compute, sample, and set\n * Auxiliary variables retained in Model trajectory computations\n * Fixed platform-dependent problems with time module that confuses the timestamp\n   function in common.py (used to make auto-generated function names unique)\n * ModelSpec classes now use 'compatibleSubcomponents' and 'compatibleContainers'\n   tuple attributes instead of 'componentTypes' and 'compatibleNodes',\n   respectively\n * The above tuple attributes also now consist of actual classes, not their names\n   -- thus they must be initialized after all the classes involved have been\n   declared\n * ModelSpec now only re-validates self when flattenSpec called (speeds up model\n   building)\n\n\nversion 0.85  10 July 2007\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n * PyCont can now perform continuation according to the zeros of user-defined\n   functions or bounds (see example tests/PyCont_vanDerPol.py and\n   PyCont_Hopfield.py)\n * Support for scipy.special functions in Generator definitions (Python targets\n   only. C targets with a more limited range of functions will be supported soon)\n * A few phase plane analysis tools have been added to Toolbox/phaseplane.py\n   -- in particular, the finding of fixed points, nullclines,\n   and some simple code to compute saddle manifolds in planar systems\n * Phase response curves can now be calculated for limit cycles using the adjoint\n   method (see tests/ML_adjointPRC.py and HH_adjointPRC.py for examples)\n * Generators now include auxiliary variable data in recorded event data\n * Pointset comparisons using arithmetic operators now consistent with the\n   norm-based comparisons used by Points\n * Time mesh points for external inputs to integrators now forced to be integration\n   mesh points for greater numerical accuracy and stability\n * VODE now supports 'use_special' for forcing values of output trajectory mesh\n * Improved support for numpy float and int types alongside standard python types\n * Improved numerical first derivative computed by central finite differences and\n   Ridders' method\n * Added a multilinear regression auxiliary function builder\n   (common.py/makeMultilinearRegrFn)\n * Support for parameter estimation using least squares using qualitative features\n   such as positions of extrema (see wiki page ParamEst)\n * Moved ParamEst.py into PyDSTool/Toolbox, a more logical home, and removed its\n   default import in PyDSTool\n * Added Toolbox/ModelHelper.py for additional model building utilities (esp.\n   for neural modelling)\n * Minor bug fixes and improvements (see Trac wiki site for full change log)\n\n\nversion 0.84 - patch 1  13 Mar 2007\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n * Fixed PyDSTool __init__.py to ensure new numpy names are exposed,\n   not the numpy.oldnumeric compatibility names from pylab\n * Fixed Radau generator for Windows platforms\n * Added functions to Model.py for changing event settings, flags, etc.\n * Fixed bugs where terminal events not associated with hybrid system\n   switching raised exceptions. Now all events are by default mapped\n   to 'terminate'\n * Other minor bug fixes\n\n\nversion 0.84  20 Feb 2007\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis is primarily a release to bring PyDSTool up to date with \"new Scipy\"\nand Python versions later than 2.4. Major code improvements are still in\ndevelopment and will be released in a 0.90 version as soon as we can.\n\n * Compatible with Scipy 0.5.1 and Python 2.4 onwards.\n * 64-bit CPU compatible.\n * New ModelSpec building functionality, in particular \"standard events\"\n   for threshold crossings and turning points in every variable are\n   automatically generated (but detection turned off by default).\n * Improved symbolic evaluation behavior (but in this pre-0.90 version\n   we have switched off some of the advanced simplification code as\n   there is a bug in it which we haven't yet traced).\n * PyCont functionality improved and interface cleaned up.\n * ExtrapolateTable Generator class added\n * Various other minor fixes and improvements.\n\n\nversion 0.83.3 20 Sep 2006\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n * Point and Pointset behaviour modified to make access to values or arrays\n   of values (respectively) easier. Now, a Point pt['x'] is not the same\n   as pt[['x']]. The former now returns the numeric value, the latter a\n   new Point containing only the coordinate 'x'. Behaviour with a Pointset\n   pts is altered similarly, except pts['x'] would be an array of numeric\n   values.\n * Pointsets can now be initialized with independent variable arrays in\n   reverse order (e.g., from a backwards integration). The initializer\n   method now automatically detects the reverse order and reverses both\n   the independent and dependent variable arrays before creating the\n   Pointset.\n * Updated FuncSpec and Generators to allow specs to be provided by lists\n   of symbolic quantities,\n * Provided better support for bounds events in C and Python specifications.\n   See tests/HH_model_testbounds.py and HH_model_Cintegrator_testbounds.py\n * Provided helper functions to automatically create turning-point and zero\n   crossing events for oDE right-hand sides and other auxiliary functions\n   from ModelSpec definitions,\n * Fixed symbolic.py to properly process string literals.\n * Fixed bugs in defining Jacobian with respect to parameters.\n * Other bug fixes for ModelConstructor, ModelSpec, Symbolic.\n * Fixed bugs in Model/Trajectory sample methods to properly use tlo and thi\n   limits with precise=False option and eventdata option turned off.\n * Added data analysis toolbox for use in data-driven dynamical systems\n   modelling. Moved some functions over from fracdim.py toolbox.\n * Fixed bug in using global time with hybrid systems that have external\n   inputs.\n * Event definitions now support external inputs.\n * Suppressed messages to stdout from compilers and calls to minpack\n   optimizers.\n\nPyCont 0.3.1:\n * Two plotting methods were added to plot_cycles:  'stack' and 'highlight'.\n * Added continuation argument 'StopAtPoints', allowing computation to stop\n   at specified special points.\n * Added domain checking through introduction of a new special point labeled\n   B' for 'Boundary'. Note that if 'B' is active (through specification in\n   LocBifPoints), domain information is saved along the curve with the\n   labels 'inside' and 'outside'.\n * Added continuation argument 'description' allowing the user to give details\n   on the specific curve computation.  When the info() method is called from\n   the curve class, the description will be displayed.\n * Added argument SPOut to the LimitCycle class, allowing the user to stop at\n   specified values of variables or parameters.\n * Jacobians with respect to variables is now implemented in AUTO interface.\n   Jacobians with respect to parameters is currently not working, but will\n   be added very soon in a minor release.\n * Added get() method to plot class.\n * Bug fixes (see PyCont/README for details).\n\n\nversion 0.83.2, 16 Jun 2006 (w/ patch #1)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n * Provided support for 1D Jacobians for generators (only D>1\n   was previously supported).\n * Fixed bug with symbolic differentiation and simplification of expressions\n   involving parsing of division of compound expressions, where braces are\n   not explicitly given.\n * Points, pointsets, and parameter estimation objects are initialized\n   with keywords now, not dictionaries (although points and pointsets\n   retain dictionary backwards compatibility ... for now).\n * Parameterized pointsets now have the option to be referenced by values\n   that are within a small tolerance of the defined independent variable\n   values.\n * Improved syntax for common object methods: 'computeTraj' is now 'compute',\n   'sampleTraj' is now 'sample', 'setPars' for generators is now 'set',\n   'setParsModel' for models is now 'set'. Previous method names are still\n   valid for now.\n * Allowed C-target FuncSpec objects to use multi-references in definitions\n * Model trajectories can now be referenced and deleted using the\n   m[traj_name] notation, where m is a Model object.\n * Fixed EventMappings bug for multiple assignments specified by dictionary.\n * Update of Toolbox utilities.\n * Other minor bug fixes.\n * PyCont:\n\n    - Overhaul of plotting so that bifurcation diagrams can be adjusted\n      through a curve's 'plot' attribute.\n    - AUTO is interfaced for limit cycle continuation. Requires external\n      C compiler access in the same way as the Dopri and Radau integrators.\n    - Improvements to the PyCont API.\n    - Support for bifurcations of discrete maps\n\n\n05 Apr 2006\n~~~~~~~~~~~\n\n * Fixed bug in matplotlib_import for len(args)==0 to plot()\n * Fixed bug (again!) in Radau_ODEsystem when continuing orbits\n\n\nVersion 0.83.1, 30 Mar 2006\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n * Trajectory objects that can be sampled with default options\n   (by calling the sampleTraj method with no arguments) are now\n   acceptable plot call arguments, without first needing to be\n   converted to Pointsets or arrays.\n * Updated some internal use of imports to improve compatibility with\n   numarray 1.4.1 and 1.5.1.\n * Improved consistency in output of Model class for \"hierarchical\n   names\", especially in getTrajEvents, getTrajEventTimes, forceIntVars,\n   forceObsVars.\n * Minor bug fixes and improvements.\n\nPyCont:\n\n * An initial direction can now be specified for a new curve.\n   This is useful for following multiple branches.\n   See PyCont_Logistic.py\n * Added SaveJacobian and SaveEigen parameters\n * Added computeEigen method to curves.  Once the eigen information is\n   computed, you can plot the stability of the fixed points by activating\n   the plot_stability flag in the call to display()\n * Added an exportGeomview() method to export the curves to a Geomview\n   data file (default is geom.dat)\n * Discrete maps are now implemented (curve class FP-C) with the fold,\n   flip and torus bifurcations detected.\n * Added pseudo-arclength continuation (Keller method).  This is unstable\n   right now (trouble detecting bifurcation points). Use only when\n   MoorePenrose gives strange output.\n\n\n\nVersion 0.83, 12 Mar 2006\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPyCont continuation:\n  * More bifurcations can be detected\n  * Improved user interface / graphing capabilities\n  * Exporting data to Pointsets now possible\n  * Added example PyCont_LotkaVolterra.py (gonna use this as test example\n    for variable and par bounds)\n  * Added example PyCont_PredPrey.py (example with Zero-Hopf point)\n\nPointsets and Points:\n  * Arithmetic and comparison operations now supported\n  * Both classes now have an associated norm (defaults\n    to the 2-norm) in order to implement point-wise\n    comparison\n  * Labelling of points better implemented\n  * Calling Pointsets now only applies if they are\n    parameterized, when argument must be an independent\n    variable value. Other functionality previously\n    associated with calling has been moved to\n    [] referencing. Calling is now more efficient for\n    its original intended purpose\n  * Setitem for Pointsets now allows setting of entire\n    coordinate or independent variable array\n  * Full support for Points to be used as dictionaries\n  * Better support for Pointsets to be used like arrays\n\nSymbolic\n  * Fixed handling of functions under differentiation to\n    make more sense\n  * Can now declare symbolic functions without defining them,\n    and can differentiate them symbolically\n  * Introduction of symbolic vectors and vector functions\n  * Symbolic eval() more efficient, more intelligent\n  * Fixed minor bugs and added many minor features\n\nGenerators\n  * Definition can now be done using Quantity objects as well\n    as strings\n  * Initialization keyword syntax simplified, partly to reflect\n    the fact that instances of class args() can be provided\n    instead of dictionaries\n\n        - 'specstrdict' -> 'varspecs'\n        - 'auxfndict'   -> 'fnspecs'\n        - 'xdatadict'   -> 'ics'\n        - 'parameters'  -> 'pars'\n\n  * External input signals (as arrays) can now be passed to\n    the vector field in Dopri and Radau integrators\n  * New ADMC++ target for Matlab (to facilitate automatic differentiation\n    and parameter sensitivity calculations)\n  * Fixed some Radau compilation issues on non-Windows platforms\n  * Added 'method' key to InterpTable to allow piecewise-constant\n    interpolation of data (key value = 'constant' or 'linear')\n\nTests\n  * Added a couple of new test and example scripts, e.g. for\n    a SloppyCell model, and for symbolic differentiation and\n    manipulation.\n\nMemory management\n  * Used cPickle on non-Windows platforms to improve\n    efficiency of object __copy__ methods\n\nModels\n  * No longer need to provide initial condition to\n    computeTraj call for single vector field model",
    "docs_url": null,
    "download_url": "https://github.com/robclewley/pydstool/tarball/v0.90.2",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://pydstool.sourceforge.net/",
    "keywords": "dynamical systems,bioinformatics,modeling,bifurcation analysis",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "PyDSTool",
    "platform": "any",
    "project_url": "https://pypi.org/project/PyDSTool/",
    "release_url": "https://pypi.org/project/PyDSTool/0.90.2/",
    "requires_python": null,
    "summary": "Python dynamical systems simulation and modeling",
    "version": "0.90.2"
  },
  "releases": {
    "0.90.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4bf2ca48e4963231c88b69253c21d6b1",
          "sha256": "8d1bad971e8832579af419f93c0c7f1fa7945bab2a83231e99b2323ba1347c30"
        },
        "downloads": 2471,
        "filename": "PyDSTool-0.90.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4bf2ca48e4963231c88b69253c21d6b1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4897106,
        "upload_time": "2014-12-02T09:18:51",
        "url": "https://files.pythonhosted.org/packages/04/7f/10590c37b673ca90d24bd1b9937afb4b7c0a120edbbf255595ee5a1eb255/PyDSTool-0.90.0.tar.gz"
      }
    ],
    "0.90.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8c793f2f54ecdc9420e77000fca30b84",
          "sha256": "6e0cbceab8088ee8cbd0839202cdbaeebbe4ab2e6d1a0d0053c7de30268587c1"
        },
        "downloads": 3575,
        "filename": "PyDSTool-0.90.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8c793f2f54ecdc9420e77000fca30b84",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 957424,
        "upload_time": "2015-07-06T17:10:56",
        "url": "https://files.pythonhosted.org/packages/c8/5d/9618268c502d6b38d7cfe9be7e9ee967e77c0416c1660c8dbb0368c8ce29/PyDSTool-0.90.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8c793f2f54ecdc9420e77000fca30b84",
        "sha256": "6e0cbceab8088ee8cbd0839202cdbaeebbe4ab2e6d1a0d0053c7de30268587c1"
      },
      "downloads": 3575,
      "filename": "PyDSTool-0.90.2.tar.gz",
      "has_sig": false,
      "md5_digest": "8c793f2f54ecdc9420e77000fca30b84",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 957424,
      "upload_time": "2015-07-06T17:10:56",
      "url": "https://files.pythonhosted.org/packages/c8/5d/9618268c502d6b38d7cfe9be7e9ee967e77c0416c1660c8dbb0368c8ce29/PyDSTool-0.90.2.tar.gz"
    }
  ]
}