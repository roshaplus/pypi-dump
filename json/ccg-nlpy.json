{
  "info": {
    "author": "Cognitive Computation Group",
    "author_email": "mssammon@illinois.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering"
    ],
    "description": "CogComp-NLPy\n====================\n.. image:: http://morgoth.cs.illinois.edu:5800/app/rest/builds/buildType:(id:CogcompNlpy_Build)/statusIcon\n    :target: http://morgoth.cs.illinois.edu:5800\n.. image:: https://semaphoreci.com/api/v1/projects/dc68ab4d-d1b7-4405-adca-b0c6af2e1aa0/1223617/badge.svg\n    :target: https://semaphoreci.com/danyaljj/sioux-2\n.. image:: https://img.shields.io/badge/%3E%3E%3E-Api%20Docs-brightgreen.svg\n    :target: http://cogcomp.cs.illinois.edu/software/doc/ccg_nlpy/\n\nRun NLP tools such as Part-of-Speech tagging, Chunking, Named Entity Recognition, etc on your documents in Python with ease and breeze!\n\nInstallation\n------------\n\n1. Make sure `you have \"pip\" on your system <https://pip.pypa.io/en/stable/installing/>`_. \n2. Make sure you have installed Cython:\n\n    pip install cython\n\n3. Install:\n\n    pip install ccg_nlpy\n\n4. Enjoy!\n\n**Note:** The package should be compatible with Python 2.6+ and Python 3.3+\n\n**Upgrading:** If you want to update your package: \n\n   pip install --upgrade ccg_nlpy\n\nIf you want to upgrade upgrade it on a specific version replace :code:`pip` in the command above with :code:`pip2` or :code:`pip3`.\n\n**Note:** Here is the project page at `PyPI website <https://pypi.python.org/pypi/ccg-nlpy>`_.\n\nGetting Started \n---------------\nHere is a sample usage showing how easily you run our system:\n\n.. code-block:: python\n\n   from ccg_nlpy import remote_pipeline\n\n   pipeline = remote_pipeline.RemotePipeline()\n   doc = pipeline.doc(\"Hello, how are you. I am doing fine\")\n   print(doc.get_lemma) # will produce (hello Hello) (, ,) (how how) (be are) (you you) (. .) (i I) (be am) (do doing) (fine fine)\n   print(doc.get_pos) # will produce (UH Hello) (, ,) (WRB how) (VBP are) (PRP you) (. .) (PRP I) (VBP am) (VBG doing) (JJ fine)\n\nThe default/easy usage has some restrictions as will deliniate in the next section. See the next section to \n\n**Api Docs:** Here is the `API docs <http://cogcomp.cs.illinois.edu/software/doc/ccg_nlpy/pipeliner.m.html>`_ of our `Pipeliner` module.\n\nStructure\n-----------------------------\nThis tool enables you accesss `CogComp pipeline <https://github.com/CogComp/cogcomp-nlp/tree/master/pipeline>`_ in different forms. The figure below summarizes these approaches:\n\n.. figure:: https://user-images.githubusercontent.com/2441454/27004781-963ae9e0-4ddd-11e7-9864-b96a52df062b.png\n   :scale: 50 %\n\nThe figure above gives a summary of possible usages, as well as their pros and cons. Next we will go through each item and elaborate: \n\nRemote Pipeline \n~~~~~~~~~~~~~~~~~~~~~~\nIn this setting, you can send annotation requests to a remote machine. Hence there is not much memory burden on your local machine. Instead all the heavy-lifting is on the remote server.\n\n**Default remote server:**  This is the default setting. The requests are sent to our remote server, hence requires a network connection. This option is here to demonstrate how things work, but it is not a viable solution for your big experiments since we limit the number of queries to our server (current limit is *100 queries a day*). If you are a busy nlp user, you should use any of the other options.\n\n**Starting your own (remote) server:** If you have a big (remote) machine, this is probably a good option for you. \nYou'll have to read the instructions on how to install the pipeline server in the `pipeline project documentation <https://github.com/CogComp/cogcomp-nlp/tree/master/pipeline#using-pipeline-webserver>`_. In summary: \n\n1. Clone our  `CogComp-NLP <https://github.com/CogComp/cogcomp-nlp/>`_ java project.\n2. Run :code:`pipeline/scripts/runWebserver.sh` to start the server. \n3. When you see :code:`Server:xxx - Started @xxxxxms`, the server is up and running: \n\nAfter making sure that the server is running, we can make python call to it: \n\n.. code-block:: python\n\n   from ccg_nlpy import remote_pipeline\n   pipeline = remote_pipeline.RemotePipeline(server_api='http://www.fancyUrlName.com:8080') \n   # constructor declaration: RemotePipeline(server_api = None, file_name = None)\n   # \"server_api\" is the address of the server as string. An example: http://www.fancyUrlName.com:8080\n   # \"file_name\" is the config file used to set up pipeline (optional), please refer the latter section for more details\n\n**Note:** This tool is based on CogComp's `pipeline project <https://github.com/CogComp/cogcomp-nlp/tree/master/pipeline>`_. Essentially annotator included in the pipeline should be accessible here. \n\nLocal Pipeline \n~~~~~~~~~~~~~~~~~~~~~~\nIn this setting, the system will download the trained models and files required to run the pipeline locally. Since everything is run on your machine, it will probably require a lot of memory (the amount depends on which annotations you use). If you have a single big machine (i.e. memory > 15GB) for your expeirments, this is probably a good option for you.\n\nTo download the models, run the following command:\n\n  python -m ccg_nlpy download\n\nThis will download model files into your home directly under :code:`~/.ccg_nlpy/`.\n\n**Note:** Note that downloading the models require you to have Maven installed on your machine. If you don't, `here are some guidelines on how to install it <https://maven.apache.org/install.html>`_. \n\n**Note:** To use the pipelne locally (A) you have to make sure you have set :code:`JAVA_HOME` variable. In MacOS, you can verify it with :code:`echo \"$JAVA_HOME\"`. If it is not set, you can :code:`export JAVA_HOME=$(/usr/libexec/java_home)`. \n\nIn the local pipeline the views are disabled by default. If you want to change specific behaviors, such as activating or deactivating specific components, you can specify the parameters while initializing local/remote pipeline module.\n\n.. code-block:: python\n\n   from ccg_nlpy import local_pipeline\n   pipeline = local_pipeline.LocalPipeline() \n   # constructor declaration: LocalPipeline()\n\n\nSetting from Configuration file \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nYou can set settings on how to run CogComp-NLPy via a local option too, rather than setting it programmatically.\nHere is how to: \n\n.. code-block:: python\n\n   from ccg_nlpy import remote_pipeline\n   pipeline = remote_pipeline.RemotePipeline(file_name = 'path_to_custom_config_file')\n\n\nThe default keys and values are specified below. If you want to use custom config file, please provide a file in similar format.\n\n\n.. code-block:: bash\n\n    [remote_pipeline_setting]\n    api = ADDRESS_OF_THE_SERVER # example: http://fancyUrlName.com:8080\n\n\nSystem failures\n~~~~~~~~~~~~~~~\nSystem failures are part of any software system. Upon some certain outputs (e.g. receiving error 500 from remote pipeline),\nwe return :code:`None` in the output of call. When processing big documents it might make sense to check take care of\nthis explicitly:\n\n.. code-block:: python\n\n    d = ... # docuemnt\n    p = ... # pipeline\n    doc = p.doc(d)\n    if doc is not None:\n        # do sth with it\n        ner_view = doc.get_ner_conll\n\n\nQuestions/Suggestions/Comments \n------------------------------\nUse comments or pull requests. \n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/IllinoisCogComp/ccg_nlpy",
    "keywords": "NLP,natural language processing",
    "license": "Research and Academic Use License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ccg-nlpy",
    "platform": "",
    "project_url": "https://pypi.org/project/ccg-nlpy/",
    "release_url": "https://pypi.org/project/ccg-nlpy/0.11.0/",
    "requires_dist": [
      "six",
      "requests",
      "protobuf",
      "pyjnius",
      "Cython",
      "configparser"
    ],
    "requires_python": "",
    "summary": "Light-weight NLP annotators",
    "version": "0.11.0"
  },
  "releases": {
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c52e9f4f5bc42a2cf1f8bda63965ed9e",
          "sha256": "616570d4d75e858d65bfa6904b45ee47cc871d3898d7c9af876dc2ce67d7bc80"
        },
        "downloads": 0,
        "filename": "ccg_nlpy-0.11.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c52e9f4f5bc42a2cf1f8bda63965ed9e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 25680,
        "upload_time": "2017-09-19T20:28:40",
        "url": "https://files.pythonhosted.org/packages/84/f0/975b0b5ad02f57ea70ce2aa75ef8bde0892d74d1f72dd951dddc4314712c/ccg_nlpy-0.11.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e78b538818a8f0f2ccc02624b1654d47",
          "sha256": "b260b97fb63e6e36c9306b2ebfe70bb6f0635a552792ac75308f8419f2c4f9be"
        },
        "downloads": 0,
        "filename": "ccg_nlpy-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e78b538818a8f0f2ccc02624b1654d47",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17741,
        "upload_time": "2017-09-19T20:28:44",
        "url": "https://files.pythonhosted.org/packages/0f/d4/328324a09c8423118a49f9f0bcdcc3314b6251abb6cf12fcfa5d2d7982c5/ccg_nlpy-0.11.0.tar.gz"
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "df113cd4b6aa2eb2c6cb1e11112cf65a",
          "sha256": "d9224ac6b23fe76e6847338c8de5c75eb4ed4ed7762e27a9eda092fa4caf92cc"
        },
        "downloads": 0,
        "filename": "ccg_nlpy-0.9.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df113cd4b6aa2eb2c6cb1e11112cf65a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 40785,
        "upload_time": "2017-06-10T18:25:59",
        "url": "https://files.pythonhosted.org/packages/6f/34/1849893400047197bf234c4fff78d99b55e50f7109959d80e5c82a2ac20b/ccg_nlpy-0.9.0-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c52e9f4f5bc42a2cf1f8bda63965ed9e",
        "sha256": "616570d4d75e858d65bfa6904b45ee47cc871d3898d7c9af876dc2ce67d7bc80"
      },
      "downloads": 0,
      "filename": "ccg_nlpy-0.11.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c52e9f4f5bc42a2cf1f8bda63965ed9e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 25680,
      "upload_time": "2017-09-19T20:28:40",
      "url": "https://files.pythonhosted.org/packages/84/f0/975b0b5ad02f57ea70ce2aa75ef8bde0892d74d1f72dd951dddc4314712c/ccg_nlpy-0.11.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "e78b538818a8f0f2ccc02624b1654d47",
        "sha256": "b260b97fb63e6e36c9306b2ebfe70bb6f0635a552792ac75308f8419f2c4f9be"
      },
      "downloads": 0,
      "filename": "ccg_nlpy-0.11.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e78b538818a8f0f2ccc02624b1654d47",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 17741,
      "upload_time": "2017-09-19T20:28:44",
      "url": "https://files.pythonhosted.org/packages/0f/d4/328324a09c8423118a49f9f0bcdcc3314b6251abb6cf12fcfa5d2d7982c5/ccg_nlpy-0.11.0.tar.gz"
    }
  ]
}