{
  "info": {
    "author": "Paul Sokolovsky",
    "author_email": "pfalcon@users.sourceforge.net",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "picoweb\n=======\n\npicoweb is a \"micro\" web micro-framework (thus, \"pico-framework\") for\nradically unbloated web applications using radically unbloated Python\nimplementation, MicroPython, https://github.com/micropython/micropython.\n\nFeatures:\n\n* Asynchronous from the start, using unbloated asyncio-like library\n  for MicroPython (`uasyncio <https://github.com/micropython/micropython-lib/tree/master/uasyncio>`_).\n* Small memory usage. Initial version required about 64K of heap for\n  a trivial web app, and since then, it was optimized to allow run\n  more or less realistic web app in ~36K of heap. More optimizations\n  on all the levels (MicroPython and up) are planned (but may lead to\n  API changes).\n* Has API affinity with some well-known Python web micro-framework(s),\n  thus it should be an easy start if you have experience with them, and\n  existing applications can be potentially ported, instead of requiring\n  complete rewrite.\n\n\nRequirements and optional modules\n---------------------------------\n\n``picoweb`` depends on ``uasyncio`` for asynchronous networking\n(https://github.com/micropython/micropython-lib/tree/master/uasyncio).\n\nIt is also indended to be used with ``utemplate``\n(https://github.com/pfalcon/utemplate) for templating, but this is\na \"soft\" dependency - picoweb offers convenience functions to use\n``utemplate`` templates, but if you don't use them or will handle\ntemplating in your app (e.g. with a different library), it won't be\nimported.\n\nFor database access, there are following options (``picoweb`` does\nnot depend on any of them, up to your application to choose):\n\n* `btree <http://docs.micropython.org/en/latest/unix/library/btree.html>`_\n  builtin MicroPython module. This is a recommended way to do a database\n  storage for `picoweb`, as it allows portability across all MicroPython\n  targets, starting with very memory- and storage-limited baremetal systems.\n* ``btreedb`` wrapper on top of ``btree`` builtin module. This may add some\n  overhead, but may allow to make an application portable between different\n  database backends (`filedb` and `uorm` below).\n  https://github.com/pfalcon/micropython-btreedb\n* ``filedb``, for a simple database using files in a filesystem\n  https://github.com/pfalcon/filedb\n* ``uorm``, for Sqlite3 database access (works only with MicroPython\n  Unix port) https://github.com/pfalcon/uorm\n\n\nDetails\n-------\n\npicoweb API is roughly based on APIs of other well-known Python web\nframeworks. The strongest affinity is Flask, http://flask.pocoo.org, as\narguably the most popular micro-framework. Some features are also based on\nBottle and Django. Note that this does not mean particular \"compatibility\"\nwith Flask, Bottle, or Django: most existing web frameworks are synchronous\n(and threaded), while picoweb is async framework, so its architecture is\nquite different. However, there is an aim to save porting efforts from\nrepeatitive search & replace trials: for example, when methods do similar\nthings, they are likely named the same (but they may take slightly different\nparameters, return different values, and behave slightly differently).\n\nThe biggest difference is async, non-threaded nature of picoweb. That means\nthat the same code may handle multiple requests at the same time, but unlike\nthreaded environment, there's no external context (like thread and thread\nlocal storage) to associate with each request. Thus, there're no \"global\"\n(or thread-local \"global\") request and response objects, like Flask,\nBottle, Django have. Instead, all picoweb functions explicitly pass the\ncurrent request and response objects around.\n\nAlso, picoweb, being unbloated framework, tries to avoid avoidable\nabstractions. For example, HTTP at the lowest level has just read and write\nendpoints of a socket. To dispatch request, picoweb needs to pre-parse\nsome request data from input stream, and it saves that partially (sic!)\nparsed data as a \"request\" object, and that's what passed to application\nhandlers. However, there's no unavoidable need to have a \"response\"\nabstraction - the most efficient/lightweight application may want to\njust write raw HTTP status line, headers, and body to the socket. Thus,\nraw write stream is passed to application handlers as the \"response\" object.\n(But high-level convenience functions to construct an HTTP response are\nprovided).\n\nLast point is questionable conveniences. For example, both Flask and Bottle\nprovide special objects to handle form/get parameters, with features\nlike \"if request variable has only one value, the value is returned directly;\notherwise, list of values is returned\". However, Python standard library\nprovides function parse_qs(), which always returns array of values (based\non the fact that any request variable may have more than one value). Given\n2 choices, picoweb follows the interface of the standard library, instead of\nproviding extra wrapper class on top of it.\n\n\nAPI reference\n-------------\n\nThe best API reference currently are examples (see below) and the ``picoweb``\nsource code itself. It's under 10K, so enjoy:\nhttps://github.com/pfalcon/picoweb/blob/master/picoweb/__init__.py\n\nNote that API is experimental and may undergo changes.\n\n\nExamples\n--------\n\n* `example_webapp.py <https://github.com/pfalcon/picoweb/blob/master/example_webapp.py>`_ -\n  A simple webapp showing you how to generate a complete HTTP response\n  yourself, use ``picoweb`` convenience functions for HTTP headers generation,\n  and use of templates. Mapping from URLs to webapp view functions (\"web\n  routes\" or just \"routes\") is done Django-style, using a centralized route\n  list.\n* `example_webapp2.py <https://github.com/pfalcon/picoweb/blob/master/example_webapp2.py>`_ -\n  Like above, but uses ``app.route()`` decorator for route specification,\n  Flask-style.\n* `examples/ <https://github.com/pfalcon/picoweb/tree/master/examples>`_ -\n  Additional examples for various features of picoweb. See comments in each\n  file for additional info. To run examples in this directory, you normally\n  would need to have picoweb installed (i.e. available in your ``MICROPYPATH``,\n  which defaults to ``~/.micropython/lib/``).\n* `notes-pico <https://github.com/pfalcon/notes-pico>`_ - A more realistic\n  example webapp, ported from the Flask original.\n\n\nRunning under CPython (regressed)\n---------------------------------\n\nInitial versions of picoweb could run under CPython, but later it was\nfurther optimized for MicroPython, and ability to run under CPython\nregressed. It's still on TODO to fix it, instructions below tell how\nit used to work.\n\nAt least CPython 3.4.2 is required (for asyncio loop.create_task() support).\nTo run under CPython, uasyncio compatibility module for CPython is required\n(micropython-cpython-uasyncio). This and other dependencies can be installed\nusing requirements-cpython.txt::\n\n    pip install -r requirements-cpython.txt\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pfalcon/picoweb",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "picoweb",
    "platform": "",
    "project_url": "https://pypi.org/project/picoweb/",
    "release_url": "https://pypi.org/project/picoweb/1.3.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A very lightweight, memory-efficient async web framework for MicroPython.org and its uasyncio module.",
    "version": "1.3.1"
  },
  "releases": {
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "01c32ccc2574a98a944e16735d1af3ff",
          "sha256": "19fb4321c5fcea6836580d9be4cac20226767a964dec49c041930a4af112e0f6"
        },
        "downloads": -1,
        "filename": "picoweb-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "01c32ccc2574a98a944e16735d1af3ff",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3329,
        "upload_time": "2017-05-11T19:51:30",
        "url": "https://files.pythonhosted.org/packages/16/c2/dca42abff994820120aa853ca91c87738744747f767fe8d0eb2ff1272c67/picoweb-1.1.tar.gz"
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "be0e09ff11b8ce4e8e6ff944b1a762e4",
          "sha256": "2e8a1556ea62c3f84e5c2135c23f84ecd7e977a87365f9bb340c3557dd849993"
        },
        "downloads": -1,
        "filename": "picoweb-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "be0e09ff11b8ce4e8e6ff944b1a762e4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3342,
        "upload_time": "2017-06-09T21:36:17",
        "url": "https://files.pythonhosted.org/packages/fc/f4/e3f6c4c3875f640d4a4f54da2ed4e8830208bac000179c0211a90f01fc9e/picoweb-1.1.2.tar.gz"
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4411de03c67b0087afe0c4be96c65ff9",
          "sha256": "e12ee1eda4ed680ff26fb64b105c387634b5fcb1237c45a9561f620d7f192e1f"
        },
        "downloads": -1,
        "filename": "picoweb-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4411de03c67b0087afe0c4be96c65ff9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3379,
        "upload_time": "2017-06-10T14:18:10",
        "url": "https://files.pythonhosted.org/packages/07/a1/ac79de53d38d6ae531c857f3d9291afaa27d90c58eca9a1d295d99f7546a/picoweb-1.2.tar.gz"
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "794e40d9640895521778a1bbd641f316",
          "sha256": "fc017d72743bcef8126625cec806e5ff7c0d6a7715edd927b69b9e660cf87999"
        },
        "downloads": -1,
        "filename": "picoweb-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "794e40d9640895521778a1bbd641f316",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3472,
        "upload_time": "2017-07-01T15:56:52",
        "url": "https://files.pythonhosted.org/packages/22/be/7e7cabe1ac2607d849557314f8e48f6d9e0c13c64c47029ae250e9020942/picoweb-1.2.2.tar.gz"
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "84bcd7a73ace7a00e80fa2d741a55db8",
          "sha256": "0ec92aa12a7ea1b78ad3173a82d9daa6a87b2156789a5804e6ed60f21cebe63a"
        },
        "downloads": -1,
        "filename": "picoweb-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "84bcd7a73ace7a00e80fa2d741a55db8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3536,
        "upload_time": "2017-11-11T23:05:56",
        "url": "https://files.pythonhosted.org/packages/e2/33/2b8d674c155bc9c28c8513d77634020f3b514608a47080188212dedadc36/picoweb-1.2.3.tar.gz"
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7d81c5df16fe14f893c4f543ae3a058f",
          "sha256": "e7d2f2477caad5c2adc3a06070038ad8dddd8058635f12fa1fa2d8122ec5c327"
        },
        "downloads": -1,
        "filename": "picoweb-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7d81c5df16fe14f893c4f543ae3a058f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3735,
        "upload_time": "2017-12-16T10:20:27",
        "url": "https://files.pythonhosted.org/packages/5a/31/4295daafdec269c6535388d41be3025a27dba3d80518299626324461f974/picoweb-1.3.tar.gz"
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "18a375f92342348bb7a899b2c1fde8ed",
          "sha256": "d2d05bf638ce58a1ec6d342ee0c056954039e9e6c117cbf92f890df6cd37316f"
        },
        "downloads": -1,
        "filename": "picoweb-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "18a375f92342348bb7a899b2c1fde8ed",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6807,
        "upload_time": "2018-01-14T10:54:41",
        "url": "https://files.pythonhosted.org/packages/ca/13/6ab367d3e950d89499cd62b9ec8881223c6c339bf7754dbf76fbc27b3dfd/picoweb-1.3.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "18a375f92342348bb7a899b2c1fde8ed",
        "sha256": "d2d05bf638ce58a1ec6d342ee0c056954039e9e6c117cbf92f890df6cd37316f"
      },
      "downloads": -1,
      "filename": "picoweb-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "18a375f92342348bb7a899b2c1fde8ed",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6807,
      "upload_time": "2018-01-14T10:54:41",
      "url": "https://files.pythonhosted.org/packages/ca/13/6ab367d3e950d89499cd62b9ec8881223c6c339bf7754dbf76fbc27b3dfd/picoweb-1.3.1.tar.gz"
    }
  ]
}