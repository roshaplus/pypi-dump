{
  "info": {
    "author": "Benjamin Moran",
    "author_email": "benmoran56@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Games/Entertainment",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. image:: https://travis-ci.org/benmoran56/esper.svg?branch=master\n    :target: https://travis-ci.org/benmoran56/esper\n\nEsper\n=====\n**Esper is a lightweight Entity System for Python, with a focus on performance.**\n\nEsper is an MIT licensed Entity System, or, Entity Component System (ECS).\nThe design is based on the Entity System concepts outlined by Adam Martin in his blog at\nT-Machines.org, and others. Efforts were made to keep it as lightweight and performant as possible.\n\nThere is a fairly accurate writeup of what Entity Systems are in this Wikipedia article:\nhttps://en.wikipedia.org/wiki/Entity_component_system\n\nInspired by Sean Fisk's **ecs** https://github.com/seanfisk/ecs,\nand Marcus von Appen's **ebs** https://bitbucket.org/marcusva/python-utils.\n\n\nWhat's New\n----------\n**0.9.7** - By default, entities are now lazily deleted. When calling *World.delete_entity(entity_id)*,\n            Entities are now placed into a queue to be deleted at the beginning of the next call\n            to World.process(). This means it is now safe to delete entities even while iterating\n            over components in your processors. This should allow for cleaner Processor classes, by\n            removing the need to manually track and delete \"dead\" Entities after iteration. If you\n            do wish to delete an Entity immediately, simply pass the new optional *immediate=True*\n            argument. Ie: *self.world.delete_entity(entity, immediate=True)*.\n\n**0.9.6** - A new method has been added: *World.get_processor* which returns a *Processor*\n            instance by type. This could be useful if you wish to call a specific method\n            from another *Processor* from within a *Processor*. For example:\n            *self.world.get_processor(OtherProcessorType).some_method()*\n\n**0.9.5** - A new method was added: *World.components_for_entity* which returns a tuple of all\n            *Components* that are assigned to an *Entity*. This is probably not useful within\n            standard *Processor* logic, but could be useful for serializing a specific *Entity's*\n            state. For example: saving player status to disk, or passing to another scene in your\n            game that might have a separate *World*. You can recreate the *Entity* using these\n            exported *Component* instances.\n            In addition to the new method, the behavior of the *World.component_for_entity* method\n            has changed slightly. It will not raise a *KeyError* if the *Entity* ID doesn't exist,\n            instead of passing silently.\n\n**0.9.4** - A new method was added: *World.has_component* which returns a Boolean (True/False).\n            This is mostly a simple convenience method to make writing some types of logic in\n            *Processors*.  This release also has a bit better test coverage, including coverage\n            for the undocumented *esper.CachedWorld*. As the name implies, this is a alternate\n            *World* that uses the *functools.lru_cache* module from the Python standard library.\n            Feel free to try this out in your program, or run the benchmark in the examples folder.\n            The API is the same, and it should be faster than the standard *World* in most cases. \n            After more testing/feedback, it should be documented in a future release.\n            Thanks to Christopher Arndt for his work on this. \n\n\n1) Compatibility\n----------------\nEsper is developed for Python 3. It will also work on Pypy3. Being written in pure\nPython, it should work on any compliant interpreter. Current automated testing is done\nfor both CPython and PyPy. Python 2 is not supported in the main branch,\nbut Christopher Arndt is currently maintaining a branch here:\nhttps://github.com/SpotlightKid/esper/tree/python2\n\n\n2) Installation\n---------------\nNo installation is necessary. Esper is a tiny library with no dependencies. Simply copy\nthe *esper* directory into the top level of your project folder, and *import esper*.\n\nIf you prefer, Esper is also available on PyPI for easy installation via pip.\n\n\n3) Project Structure\n--------------------\n* World\n\nA World is the main point of interaction in Esper. After creating a World object, you will use\nthat object to create Entities and assigning Components to them. A World is also assigned all of\nyour Processor instances, and handles smoothly running everything with a single call per frame.\nOf course, Entities, Components and Processors can be created and assigned, or deleted while\nyour application is running.\n\n\n* Entities \n\nEntities are simple integer IDs (1, 2, 3, 4, etc.).\nEntities are \"created\", but they are generally not used directly. Instead, they are\nsimply used as IDs in the internal Component database, to track collections of Components.\nCreating an Entity is done with the World.create_entity() method.\n\n\n* Components\n\nComponents are defined as simple Python classes. In keeping with a pure Entity System\ndesign philosophy, they should not contain any logic. They might have initialization\ncode, but no processing logic whatsoever. A simple Component might look like::\n\n    class Position:\n        def __init__(self, x=0.0, y=0.0):\n            self.x = x\n            self.y = y\n\n\n* Processors\n\nProcessors, also commonly known as \"Systems\", are where all processing logic is defined and executed.\nAll Processors must inherit from the *esper.Processor* class, and have a method called\n*process*. Other than that, there are no restrictions. All Processors will have access\nto the World instance, to allow easy querying of Components. A simple Processor might look like::\n\n    class MovementProcessor(esper.Processor):\n        def __init__(self):\n            super().__init__()\n\n        def process(self):\n            for ent, (vel, pos) in self.world.get_components(Velocity, Position):\n                pos.x += vel.x\n                pos.y += vel.y\n\nIn the above code, you can see the standard usage of the *World.get_components()* method. This method\nallows efficient iteration over all Entities that contain the specified Component types. You also\nget a reference to the Entity ID for the current pair of Velocity/Position Components, in case you\nshould need it. For example, you may have a Processor that will delete certain Entites. You could\nadd these Entity IDs to a list, and call the *self.world.delete_entity()* method on them after\nyou're done iterating over the Components.\n\n\n4) Usage\n--------\nThe first step after importing Esper is to create a World instance. You can have a single World\ninstance for your entire game, or you can have a separate instance for each of your game scenes.\nWhatever makes sense for your design. Create a World instance like this::\n\n    world = esper.World()\n\n\nCreate some Processor instances, and assign them to the World. You can specify an\noptional processing priority (higher numbers are processed first). All Processors are\npriority \"0\" by default::\n\n    movement_processor = MovementProcessor()\n    collision_processor = CollisionProcessor()\n    rendering_processor = RenderingProcessor()\n    world.add_processor(movement_processor, priority=2)\n    world.add_processor(collision_processor, priority=3)\n    world.add_processor(rendering_processor)\n\n\nCreate an Entity, and assign some Component instances to it::\n\n    player = world.create_entity()\n    world.add_component(player, Velocity(x=0.9, y=1.2))\n    world.add_component(player, Position(x=5, y=5))\n\nOptionally, Component instances can be assigned directly to the Entity on creation::\n\n    player = world.create_entity(\n        Velocity(x=0.9, y=1.2),\n        Position(x=5, y=5)\n    )\n\n\nRunning all Processors is done with a single call to world.process(). This will call the\nprocess method on all assigned Processors, in order of their priority::\n\n    world.process()\n\n\nNote: You can pass any args you need to *world.process()*, but you must also make sure to recieve\nthem properly in the *process()* methods of your Processors. For example, if you pass a delta time\nargument as *world.process(dt)*, your Processor's *process()* methods should all receive it as:\n*def process(self, dt):*\n\n* Additional Methods\n\nHave a look through *esper/world.py* for an idea of what additional functionality is available. All\nmethods have docstrings with details on usage, which will be put into a real API document at some point.\nHere is a quick list of the methods, whose names should be semi-explanitory::\n\n\n    World.create_entity()\n    World.delete_entity(entity)\n    World.add_processor(processor_instance)\n    World.remove_processor(ProcessorType)\n    World.add_component(entity, component_instance)\n    World.remove_component(entity, ComponentType)\n    World.get_component(ComponentType)\n    World.get_components(ComponentTypeA, ComponentTypeB, Etc)\n    World.component_for_entity(entity, ComponentType)\n    World.components_for_entity(entity)\n    World.has_component(entity, ComponentType)\n    World.process()\n\n5) Examples\n-----------\n\nSee the **/examples** folder to get an idea of how the basic structure of a game looks.",
    "docs_url": null,
    "download_url": "https://github.com/benmoran56/esper/releases",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/benmoran56/esper",
    "keywords": "ecs",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "esper",
    "platform": "POSIX",
    "project_url": "https://pypi.org/project/esper/",
    "release_url": "https://pypi.org/project/esper/0.9.8/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Esper is a lightweight Entity System for Python, with a focus on performance.",
    "version": "0.9.8"
  },
  "releases": {
    "0.9.8": [
      {
        "comment_text": "built for Linux-4.9.11-1-ARCH-x86_64-with-glibc2.3.4",
        "digests": {
          "md5": "590d31b913dc78e52ef5c89ac1fd7c39",
          "sha256": "7308f6500f8b24d571d4d8530c90b77f315b3978aa7867f3cb4311982fd21b66"
        },
        "downloads": -1,
        "filename": "esper-0.9.8.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "590d31b913dc78e52ef5c89ac1fd7c39",
        "packagetype": "bdist_dumb",
        "python_version": "any",
        "size": 16226,
        "upload_time": "2017-03-01T07:47:16",
        "url": "https://files.pythonhosted.org/packages/7a/08/91ed1064759fc0d2543270425472c7efb880da2d3747cb5654d32030ec84/esper-0.9.8.linux-x86_64.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ed002f8b9229f6d4a26cab90671178cb",
          "sha256": "32632a3b6546cf77d3158dea07bf5db22423ae08a45d39dbdad88412162ff25a"
        },
        "downloads": -1,
        "filename": "esper-0.9.8.tar.gz",
        "has_sig": false,
        "md5_digest": "ed002f8b9229f6d4a26cab90671178cb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21448,
        "upload_time": "2017-03-01T07:47:02",
        "url": "https://files.pythonhosted.org/packages/0d/73/f32e1debe8816915b3fb63e117d9ce6f71fca70987f86d1eedbbc24fabfe/esper-0.9.8.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "built for Linux-4.9.11-1-ARCH-x86_64-with-glibc2.3.4",
      "digests": {
        "md5": "590d31b913dc78e52ef5c89ac1fd7c39",
        "sha256": "7308f6500f8b24d571d4d8530c90b77f315b3978aa7867f3cb4311982fd21b66"
      },
      "downloads": -1,
      "filename": "esper-0.9.8.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "590d31b913dc78e52ef5c89ac1fd7c39",
      "packagetype": "bdist_dumb",
      "python_version": "any",
      "size": 16226,
      "upload_time": "2017-03-01T07:47:16",
      "url": "https://files.pythonhosted.org/packages/7a/08/91ed1064759fc0d2543270425472c7efb880da2d3747cb5654d32030ec84/esper-0.9.8.linux-x86_64.tar.gz"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "ed002f8b9229f6d4a26cab90671178cb",
        "sha256": "32632a3b6546cf77d3158dea07bf5db22423ae08a45d39dbdad88412162ff25a"
      },
      "downloads": -1,
      "filename": "esper-0.9.8.tar.gz",
      "has_sig": false,
      "md5_digest": "ed002f8b9229f6d4a26cab90671178cb",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 21448,
      "upload_time": "2017-03-01T07:47:02",
      "url": "https://files.pythonhosted.org/packages/0d/73/f32e1debe8816915b3fb63e117d9ce6f71fca70987f86d1eedbbc24fabfe/esper-0.9.8.tar.gz"
    }
  ]
}