{
  "info": {
    "author": "Bartek Kryza",
    "author_email": "bkryza@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "decorest - decorator based REST client for Python\n#################################################\n\n.. image::\thttps://img.shields.io/travis/bkryza/decorest.svg\n    :target: https://pypi.python.org/pypi/decorest\n\n.. image:: https://img.shields.io/pypi/v/decorest.svg\n    :target: https://pypi.python.org/pypi/decorest\n\n.. image:: https://img.shields.io/pypi/l/decorest.svg\n    :target: https://pypi.python.org/pypi/decorest\n\n.. image:: https://img.shields.io/pypi/pyversions/decorest.svg\n    :target: https://pypi.python.org/pypi/decorest\n\nDeclarative, decorator-based REST client for Python.\n\n.. contents::\n\nOverview\n========\n\n`decorest` library provides an easy to use declarative REST API client interface,\nwhere definition of the API methods using decorators automatically gives\na working REST client with no additional code. In practice the library provides\nonly an interface to interact with REST services - the actual work is done\nunderneath by the requests_ library.\n\nFor example:\n\n.. code-block:: python\n\n    from decorest import RestClient, GET\n\n    class DogClient(RestClient):\n        def __init__(self, endpoint):\n            super(DogClient, self).__init__(endpoint)\n\n        @GET('api/breed/{breed_name}/list')\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\n    client = DogClient('https://dog.ceo/dog-api')\n\n    print(str(client.list_subbreeds('hound'))\n\n\nInstallation\n============\n\nUsing pip:\n\n.. code-block:: bash\n\n    pip install decorest\n\nUsage\n=====\n\nBasics\n------\n\nFor most typical cases the usage should be straightforward. Simply create a\nsublcass of `decorest.RestClient` and define methods, which will perform calls\nto the actual REST service. You can declare how each function should actually\nmake the request to the service solely using decorators attached to the\nmethod definition. The method itself is not expected to have any implementation\nexcept maybe for a docstring.\n\nAfter the your client class definition is ready, simply create an instance\nof it with the base endpoint and exec\n\nFor more information checkout the examples in tests.\n\nDecorators\n----------\n\n@GET, @PUT, @POST, @PATCH, @UPDATE, @DELETE, @HEAD, @OPTIONS\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMarks the request with a specific HTTP method and the path relative to\nendpoint provided as argument. The path can contain variables enclosed\nin curly brackets, e.g.:\n\n.. code-block:: python\n\n        @GET('api/breed/{breed_name}/list')\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\nThis decorator applies only to methods.\n\n@query\n~~~~~~\n\nAdds a query key-value pair to the request. URL encoding will be applied to\nthe value using `urlencode`, e.g.:\n\n.. code-block:: python\n\n        @GET('api/breed/{breed_name}/list')\n        @query('limit', 100)\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\nThis decorator can be added to methods as well as the client class, however\nin the latter case it will be added to every method request in that class.\n\n@header\n~~~~~~~\n\nAdds a header key-value pair to the request, e.g.:\n\n.. code-block:: python\n\n        @GET('api/breed/{breed_name}/list')\n        @query('limit', 100)\n        @header('accept', 'application/json')\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\nThis decorator can be added to both methods and client class. The class level\ndecorators will be added to every method and can be overriden using method\nlevel decorators.\n\n@body\n~~~~~\n\nBody decorator enables to specify which of the method params should provide\nthe body content to the request, e.g.:\n\n.. code-block:: python\n\n    @POST('pet')\n    @header('content-type', 'application/json')\n    @header('accept', 'application/json')\n    @body('pet')\n    def add_pet(self, pet):\n        \"\"\"Add a new pet to the store\"\"\"\n\n\n@auth\n~~~~~\n\nAllows to specify the authentication method to be used for the requests.\nIt accepts any valid subclass of `requests.auth.AuthBase`.\n\n.. code-block:: python\n\n        @GET('api/breed/{breed_name}/list')\n        @query('limit', 100)\n        @header('accept', 'application/json')\n        @auth(HTTPBasicAuth('user', 'password'))\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\nWhen added to the client class it will be used for every method call,\nunless specific auth decorator is specified for that method.\n\n\n@on\n~~~\n\nBy default the request method will not return requests_ response object\nbut the response will depend on the content type of the reponse.\n\nIn case the HTTP request succeeds the following results are expected:\n\n- `response.json()` if the content type of response is JSON\n- `response.content` if the content type is binary\n- `response.text` otherwise\n\nIn case the request fails, response.raise_for_status() is called and\nshould be handled in the code.\n\nIn case another behavior is required, custom handlers can be provided\nfor each method using lambdas or functions. The provided handler is\nexpected to take only a single argument, which is the requests_ response\nobject, e.g.:\n\n.. code-block:: python\n\n        @GET('api/breed/{breed_name}/list')\n        @query('limit', 100)\n        @header('accept', 'application/json')\n        @auth(HTTPBasicAuth('user', 'password'))\n        @on(200, lambda r: r.json())\n        def list_subbreeds(self, breed_name):\n            \"\"\"List all sub-breeds\"\"\"\n\nThis decorator can be applied to both methods and classes, however when\napplied to a class the handler will be called for method which receives\nthe provided status code.\n\nSessions [TODO]\n---------------\n\nBased on the functionality provided by requests_ library in the form of\nsession objects, sessions can be used instead of making a separate request\non each method call thus significantly improving the performance of the\nclient in case multiple reponses are peformed.\n\nTo start and stop the session, simply call `start_session` on the client\ninstance. Only the first method after this call will create the session,\nconsecutive calls will reuse it until `stop_session` method is called on\nthe client instance.\n\n.. code-block:: python\n\n        client.start_session()\n        client.list_subbreeds('hound')\n        client.list_subbreeds('husky')\n        client.stop_session()\n\nLicense\n=======\n\nCopyright 2018 Bartosz Kryza <bkryza@gmail.com>\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n\n.. _tests: https://github.com/bkryza/decorest/tests\n.. _requests: https://github.com/requests/requests\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/bkryza/decorest",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "decorest",
    "platform": "",
    "project_url": "https://pypi.org/project/decorest/",
    "release_url": "https://pypi.org/project/decorest/0.0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "`decorest` library provides an easy to use declarative REST API client interface, where definition of the API methods using decorators automatically gives a working REST client with no additional code. In practice the library provides only an interface to interact with REST services - the actual work is done underneath by the requests_ library.",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0bebd956e9de2eb687fd6b375ad7f19c",
          "sha256": "dd0a3c65da986fc3284c62d99f34c1889be1a437eee8787f5a184311183da711"
        },
        "downloads": -1,
        "filename": "decorest-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0bebd956e9de2eb687fd6b375ad7f19c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8115,
        "upload_time": "2018-02-08T01:39:33",
        "url": "https://files.pythonhosted.org/packages/40/61/09cbdc6d009e9feb6ca8c1beca95d16a5f2a63cb868240940a5a99f4320c/decorest-0.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0bebd956e9de2eb687fd6b375ad7f19c",
        "sha256": "dd0a3c65da986fc3284c62d99f34c1889be1a437eee8787f5a184311183da711"
      },
      "downloads": -1,
      "filename": "decorest-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0bebd956e9de2eb687fd6b375ad7f19c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8115,
      "upload_time": "2018-02-08T01:39:33",
      "url": "https://files.pythonhosted.org/packages/40/61/09cbdc6d009e9feb6ca8c1beca95d16a5f2a63cb868240940a5a99f4320c/decorest-0.0.1.tar.gz"
    }
  ]
}