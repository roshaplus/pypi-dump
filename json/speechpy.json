{
  "info": {
    "author": "Amirsina Torfi",
    "author_email": "amirsina.torfi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "======================\nspeech_feature_extraction \n======================\n\nThis library provides most frquent used speech features including MFCCs and filterbank energies alogside with the logenergy of filterbanks.\nIf you are interested to see what are MFCCs and how they are generated please refer to this \n`wiki <https://github.com/astorfi/speech_feature_extraction/wiki/>`_ page.\n\nInstallation\n============\n\nTo install From this repository at first the repository must be cloned::\n\n\tgit clone https://github.com/astorfi/speech_feature_extraction.git\n\t\nAfter cloning the reposity, root to the repository directory then execute::\t\n\t\n\tpython setup.py develop\n\n\nSupported Features\n=====\n- Mel Frequency Cepstral Coefficients(MFCCs)\n- Filterbank Energies\n- Log Filterbank Energies\n\nMFCC Features\n=============\n\nThe supported attributes for generating MFCC features can be seen by investigating the related function:\n\n.. code-block:: python\n      \n      def mfcc(signal, sampling_frequency, frame_length=0.020, frame_stride=0.01,num_cepstral =13,\n             num_filters=40, fft_length=512, low_frequency=0, high_frequency=None, dc_elimination=True):\n\t    \"\"\"Compute MFCC features from an audio signal.\n\t    :param signal: the audio signal from which to compute features. Should be an N x 1 array\n\t    :param sampling_frequency: the sampling frequency of the signal we are working with.\n\t    :param frame_length: the length of each frame in seconds. Default is 0.020s\n\t    :param frame_stride: the step between successive frames in seconds. Default is 0.02s (means no overlap)\n\t    :param num_filters: the number of filters in the filterbank, default 40.\n\t    :param fft_length: number of FFT points. Default is 512.\n\t    :param low_frequency: lowest band edge of mel filters. In Hz, default is 0.\n\t    :param high_frequency: highest band edge of mel filters. In Hz, default is samplerate/2\n\t    :param num_cepstral: Number of cepstral coefficients.\n\t    :param dc_elimination: hIf the first dc component should be eliminated or not.\n\t    :returns: A numpy array of size (num_frames x num_cepstral) containing mfcc features.\n\t    \"\"\"\n\n\nFilterbank Energy Features\n==========================\n\n\n.. code-block:: python\n\n\tdef mfe(signal, sampling_frequency, frame_length=0.020, frame_stride=0.01,\n\t\t  num_filters=40, fft_length=512, low_frequency=0, high_frequency=None):\n\t    \"\"\"Compute Mel-filterbank energy features from an audio signal.\n\t    :param signal: the audio signal from which to compute features. Should be an N x 1 array\n\t    :param sampling_frequency: the sampling frequency of the signal we are working with.\n\t    :param frame_length: the length of each frame in seconds. Default is 0.020s\n\t    :param frame_stride: the step between successive frames in seconds. Default is 0.02s (means no overlap)\n\t    :param num_filters: the number of filters in the filterbank, default 40.\n\t    :param fft_length: number of FFT points. Default is 512.\n\t    :param low_frequency: lowest band edge of mel filters. In Hz, default is 0.\n\t    :param high_frequency: highest band edge of mel filters. In Hz, default is samplerate/2\n\t    :returns:\n\t\t      features: the energy of fiterbank: num_frames x num_filters\n\t\t      frame_energies: the energy of each frame: num_frames x 1\n\t    \"\"\"\n\t   \nlog - Filterbank Energy Features\n================================\n\nThe attributes for ``log_filterbank energies`` are the same for ``filterbank energies`` too.\n\n.. code-block:: python\n\n\tdef lmfe(signal, sampling_frequency, frame_length=0.020, frame_stride=0.01,\n             num_filters=40, fft_length=512, low_frequency=0, high_frequency=None):\n\t    \"\"\"Compute log Mel-filterbank energy features from an audio signal.\n\t    :param signal: the audio signal from which to compute features. Should be an N x 1 array\n\t    :param sampling_frequency: the sampling frequency of the signal we are working with.\n\t    :param frame_length: the length of each frame in seconds. Default is 0.020s\n\t    :param frame_stride: the step between successive frames in seconds. Default is 0.02s (means no overlap)\n\t    :param num_filters: the number of filters in the filterbank, default 40.\n\t    :param fft_length: number of FFT points. Default is 512.\n\t    :param low_frequency: lowest band edge of mel filters. In Hz, default is 0.\n\t    :param high_frequency: highest band edge of mel filters. In Hz, default is samplerate/2\n\t    :returns:\n\t\t      features: the energy of fiterbank: num_frames x num_filters\n\t\t      frame_log_energies: the log energy of each frame: num_frames x 1\n\t    \"\"\"\n\t    \nStack Frames\n================================\n\nIn ``Stack_Frames`` function, the stack of frames will be generated from the signal.\n\n.. code-block:: python\n\n\tdef stack_frames(sig, sampling_frequency, frame_length=0.020, frame_stride=0.020, Filter=lambda x: numpy.ones((x,)),\n                 zero_padding=True):\n\t    \"\"\"Frame a signal into overlapping frames.\n\t    :param sig: The audio signal to frame of size (N,).\n\t    :param sampling_frequency: The sampling frequency of the signal.\n\t    :param frame_length: The length of the frame in second.\n\t    :param frame_stride: The stride between frames.\n\t    :param Filter: The time-domain filter for applying to each frame. By default it is one so nothing will be changed.\n\t    :param zero_padding: If the samples is not a multiple of frame_length(number of frames sample), zero padding will \n\t\t\t\t be done for generating last frame.\n\t    :returns: Array of frames. size: number_of_frames x frame_len.\n\t    \"\"\"\n\n\n\nTest Example\n==========================\n\nThe test example can be seen in ``test/test.py`` as below:\n\n.. code-block:: python\n\n\timport scipy.io.wavfile as wav\n\timport numpy as np\n\timport speechpy\n\n\tfile_name = 'Alesis-Sanctuary-QCard-AcoustcBas-C2.wav'\n\tfs, signal = wav.read(file_name)\n\tsignal = signal[:,0]\n\n\t############# Extract MFCC features #############\n\tmfcc = speechpy.mfcc(signal, sampling_frequency=fs, frame_length=0.020, frame_stride=0.01,\n\t\t     num_filters=40, fft_length=512, low_frequency=0, high_frequency=None)\n\tmfcc_feature_cube = speechpy.extract_derivative_feature(mfcc)\n\tprint('mfcc feature cube shape=', mfcc_feature_cube.shape)\n\n\t############# Extract logenergy features #############\n\tlogenergy = speechpy.lmfe(signal, sampling_frequency=fs, frame_length=0.020, frame_stride=0.01,\n\t\t     num_filters=40, fft_length=512, low_frequency=0, high_frequency=None)\n\tlogenergy_feature_cube = speechpy.extract_derivative_feature(logenergy)\n\tprint('logenergy features=', logenergy.shape)\n\n\n\n\n\t\nFor ectracting the feature at first, the signal samples will be stacked into frames. The features are computed for each frame in the stacked frames collection.\n\nDependencies\n==========================\n\nTwo packages of ``Scipy`` and ``NumPy`` are the required dependencies which will be installed automatically by running the ``setup.py`` file.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/astorfi/speech_feature_extraction",
    "keywords": null,
    "license": "MIT License\n\nCopyright (c) 2017 Amirsina Torfi\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
    "maintainer": null,
    "maintainer_email": null,
    "name": "speechpy",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/speechpy/",
    "release_url": "https://pypi.org/project/speechpy/0.1/",
    "requires_python": null,
    "summary": "The python package for extracting speech features.",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "68f126a22c01f83a98b332d177f8978b",
          "sha256": "edf19dbfa93e60f862757b8d13da397e721174a8ce8b55472f02bed0782ee413"
        },
        "downloads": 0,
        "filename": "speechpy-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "68f126a22c01f83a98b332d177f8978b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8543,
        "upload_time": "2017-05-09T02:52:10",
        "url": "https://files.pythonhosted.org/packages/34/50/a9214ca0a12d1c3c0dd1206ae52ee1c47a33c833ead63acd13edf9e959fa/speechpy-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "68f126a22c01f83a98b332d177f8978b",
        "sha256": "edf19dbfa93e60f862757b8d13da397e721174a8ce8b55472f02bed0782ee413"
      },
      "downloads": 0,
      "filename": "speechpy-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "68f126a22c01f83a98b332d177f8978b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8543,
      "upload_time": "2017-05-09T02:52:10",
      "url": "https://files.pythonhosted.org/packages/34/50/a9214ca0a12d1c3c0dd1206ae52ee1c47a33c833ead63acd13edf9e959fa/speechpy-0.1.tar.gz"
    }
  ]
}