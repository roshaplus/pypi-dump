{
  "info": {
    "author": "shakee93, jesusperiago, jakesherman",
    "author_email": "jake@jakesherman.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "fonoapi - Python wrapper around Fono Api\n========================================\n\nhttps://fonoapi.freshpixl.com/\n\nThe Fono Api is an API which can provide **mobile device descriptions**\nsuch as model, brand, cpu, gpu, dimensions, release date, and more. This\npackage package provides a convenient wrapper around the Fono Api via\nthe ``requests`` package.\n\nThe `API <https://github.com/shakee93/fonoapi>`__ was developed\n`shakee93 <https://github.com/shakee93>`__. This package started off as\na fork of a `package <https://github.com/jesusperiago/fonoapi>`__\nwritten by `jesusperiago <https://github.com/jesusperiago>`__ - I added\nthe ``getlatest`` method to take advantage of the `getlatest API\nmethod <https://fonoapi.freshpixl.com/v1/getlatest>`__, and made a lot\nof under-the-hood organizational changes in order to submit this package\nto ``PyPI`` to make it more easily available.\n\nInstallation\n~~~~~~~~~~~~\n\n.. code:: bash\n\n    pip install fonoapi\n\nTutorial\n--------\n\nBefore starting, make sure to `generate an API\ntoken <https://fonoapi.freshpixl.com/token/generate#>`__. We are going\nto start by creating a ``FonoAPI`` object, which we initialize with our\nAPI token in order to start interacting with the Fono Api:\n\n.. code:: python\n\n    from __future__ import print_function  # -- for Python 2.7\n\n    from fonoapi import FonoAPI\n    fon = FonoAPI('TOKEN')\n\nGetting devices matching a specific device name\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nImagine we have a specific device in mind, say the **iPhone 7**, that we\nwish to learn more about. We can use the ``getdevice`` method to return\ninformation from the API about this specific device:\n\n.. code:: python\n\n    device = 'iPhone 7'\n    iPhone_7 = fon.getdevice(device)\n    print(iPhone_7)\n\n::\n\n    | Devices Object: mobile device data|\n    ------------------------------------\n    Number of devices : 4\n    Input parameters : {'device': 'iPhone 7', 'position': None, 'brand': None}\n\nThe ``getdevice`` method returns a ``Devices`` object, an object that\nmakes it easy to retrieve data from the Fono Api. Printing out the\nobject gives us information on how many devices we retrieved information\nfor, and what parameters were passed to ``getdevice``.\n\nWe can output the data in the ``Devices`` object in three ways by\ncalling the following methods on the ``Devices`` object: - ``dataframe``\n: As a Pandas DataFrame, where each row corresponds to a phone -\n``list_of_dicts`` : As a list of dictionaries, with one dict per phone -\n``list_of_lists :``\\ As a list of lists, where each sublist corresponds\nto a phone\n\nNot all mobile devices in the Fono Api have every possible attribute\nassociated with them. In the case of ``list_of_dicts``, only the\nattributes associated with each phone is included in each phone's\ndictionary. In the cases of ``dataframe`` or ``list_of_lists``, you may\nchoose specific columns to include for every phone (if you don't specify\ncolumns to include, all possible columns are included). In this case,\ndevices with no value for a particular column will have values of\n``numpy.nan`` or ``None``, respectively.\n\nIn our case, let's look at the attributes ``Brand, DeviceName, body_c``\nfor the devices returned by our API call:\n\n.. code:: python\n\n    print(iPhone_7.dataframe(['Brand', 'DeviceName', 'body_c']))\n\n+-------------+---------------------------------+-----------------------------------------------------------------+\n| Brand       | DeviceName                      | body\\_c                                                         |\n+=============+=================================+=================================================================+\n| Prestigio   | Prestigio MultiPhone 7500       | None                                                            |\n+-------------+---------------------------------+-----------------------------------------------------------------+\n| Prestigio   | Prestigio MultiPhone 7600 Duo   | None                                                            |\n+-------------+---------------------------------+-----------------------------------------------------------------+\n| Apple       | Apple iPhone 7 Plus             | - IP67 certified - dust and water resistant:raw-latex:`\\r`...   |\n+-------------+---------------------------------+-----------------------------------------------------------------+\n| Apple       | Apple iPhone 7                  | - IP67 certified - dust and water resistant:raw-latex:`\\r`...   |\n+-------------+---------------------------------+-----------------------------------------------------------------+\n\n-  There are two non-Apple devices by Prestigio in the list! The model\n   names of the two devices begin with Prestigio Mult\\ **iPhone\n   7**\\ 500, so it's understandable that they would show up when we\n   searched for the string 'iPhone 7'\n-  The two Prestigio devices don't have a value for the ``body_c``\n   attribute, so they have ``NaN`` values for that column\n\nIn order to get rid of the Prestigio devices in our results, all we have\nto do is specify the ``brand`` argument to the ``getdevice`` method:\n\n.. code:: python\n\n    device, brand = 'iPhone 7', 'Apple'\n    iPhone_7 = (\n        fon\n        .getdevice(device, brand)\n        .dataframe(['Brand', 'DeviceName', 'body_c'])\n    )\n    print(iPhone_7)\n\n+---------+-----------------------+-----------------------------------------------------------------+\n| Brand   | DeviceName            | body\\_c                                                         |\n+=========+=======================+=================================================================+\n| Apple   | Apple iPhone 7 Plus   | - IP67 certified - dust and water resistant:raw-latex:`\\r`...   |\n+---------+-----------------------+-----------------------------------------------------------------+\n| Apple   | Apple iPhone 7        | - IP67 certified - dust and water resistant:raw-latex:`\\r`...   |\n+---------+-----------------------+-----------------------------------------------------------------+\n\nGetting the latest devices for a specific brand\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``getlatest`` will return information about the most recent devices for\na given brand. For example, let's imagine that we wish to get data on\nthe lastest mobile devices from Apple:\n\n.. code:: python\n\n    brand = 'Apple'\n    latest_apples = (\n        fon\n        .getlatest(brand, limit=5)\n        .dataframe(['DeviceName', 'announced', '_3_5mm_jack_', 'talk_time'])\n    )\n    print(latest_apples)\n\n+-----------------------------------+---------------------+------------------+---------------------------+\n| DeviceName                        | announced           | *3\\_5mm\\_jack*   | talk\\_time                |\n+===================================+=====================+==================+===========================+\n| Apple iPad Pro 12.9               | 2017, June          | Yes              | Up to 10 h (multimedia)   |\n+-----------------------------------+---------------------+------------------+---------------------------+\n| Apple iPad Pro 10.5               | 2017, June          | Yes              | Up to 10 h (multimedia)   |\n+-----------------------------------+---------------------+------------------+---------------------------+\n| Apple iPad 9.7                    | 2017, March         | Yes              | Up to 10 h (multimedia)   |\n+-----------------------------------+---------------------+------------------+---------------------------+\n| Apple iPhone 8                    | Not announced yet   | No               | None                      |\n+-----------------------------------+---------------------+------------------+---------------------------+\n| Apple Watch Series 1 Sport 42mm   | 2016, September     | No               | Up to 3 h 40 min          |\n+-----------------------------------+---------------------+------------------+---------------------------+\n\nFinally, perhaps we want to retrieve data on the most recent mobile\ndevices for a whole host of brands ... but we're not sure if we spelled\nthe brand names correctly. By default, when ``getlatest`` (or\n``getdevice``) don't retrieve any results from the API, they return an\nempty ``Devices`` object. That empty ``Devices`` object has a value of\n``True`` for its ``null`` class attribute (and a value of ``False`` for\nits ``not_null`` class attribute). For example:\n\n.. code:: python\n\n    brands = ['Apple', 'Samsung', 'LG', 'Huawei', 'SonyEricsson']\n    brand_devices = []\n    for brand in brands:\n        devices = fon.getlatest(brand, limit=3)\n        brand_devices.append(devices)\n\n::\n\n    Could not retrieve brand information for brand SonyEricsson from the Fono API.\n\n.. code:: python\n\n    # Print out the Devices object for SonyEricsson\n    print(brand_devices[-1])\n\n::\n\n    | Devices Object: mobile device data|\n    ------------------------------------\n    Number of devices : 0\n    Input parameters : {'brand': 'SonyEricsson', 'limit': 3}\n\nThe problem here is that there is no brand SonyEricsson in the API, the\ncorrect name would have been just Ericsson. Let's say that we want to\ntake all of the device information that we stored in ``brand_devices``,\na list of ``Devices`` object, and create a single Pandas DataFrame:\n\n.. code:: python\n\n    import pandas as pd\n    columns = ['Brand', 'DeviceName', 'announced', 'talk_time']\n    brand_devices = [devices.dataframe(columns) for devices\n                     in brand_devices if devices.not_null]\n    all_brands = pd.concat(brand_devices)\n    print(all_brands)\n\n+-----------+-----------------------------------+---------------------+---------------------------+\n| Brand     | DeviceName                        | announced           | talk\\_time                |\n+===========+===================================+=====================+===========================+\n| Apple     | Apple iPad Pro 12.9               | 2017, June          | Up to 10 h (multimedia)   |\n+-----------+-----------------------------------+---------------------+---------------------------+\n| Apple     | Apple iPad Pro 10.5               | 2017, June          | Up to 10 h (multimedia)   |\n+-----------+-----------------------------------+---------------------+---------------------------+\n| Apple     | Apple iPad 9.7                    | 2017, March         | Up to 10 h (multimedia)   |\n+-----------+-----------------------------------+---------------------+---------------------------+\n| Samsung   | Samsung Galaxy Tab A 8.0 (2017)   | Not announced yet   | NaN                       |\n+-----------+-----------------------------------+---------------------+---------------------------+\n| Samsung   | Samsung Galaxy C10                | Not announced yet   | NaN                       |\n+-----------+-----------------------------------+---------------------+---------------------------+\n| Samsung   | Samsung Galaxy J5 (2017)          | 2017, June          | Up to 21 h (3G)           |\n+-----------+-----------------------------------+---------------------+---------------------------+\n| LG        | LG V30                            | Not announced yet   | NaN                       |\n+-----------+-----------------------------------+---------------------+---------------------------+\n| LG        | LG X venture                      | 2017, May           | Up to 24 h (3G)           |\n+-----------+-----------------------------------+---------------------+---------------------------+\n| LG        | LG Stylo 3 Plus                   | 2017, May           | Up to 14 h (3G)           |\n+-----------+-----------------------------------+---------------------+---------------------------+\n| Huawei    | Huawei MediaPad M3 Lite 8         | 2017, June          | NaN                       |\n+-----------+-----------------------------------+---------------------+---------------------------+\n| Huawei    | Huawei Honor 9                    | 2017, June          | NaN                       |\n+-----------+-----------------------------------+---------------------+---------------------------+\n| Huawei    | Huawei nova 2 plus                | 2017, May           | NaN                       |\n+-----------+-----------------------------------+---------------------+---------------------------+\n\nTests\n-----\n\nPass a valid API token to ``py.test`` to run the package's unit tests.\n\n.. code:: bash\n\n    py.test --apitoken <TOKEN>\n",
    "docs_url": null,
    "download_url": "https://github.com/jakesherman/fonoapi/archive/v0.1.2.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jakesherman/fonoapi",
    "keywords": "api",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fonoapi",
    "platform": "",
    "project_url": "https://pypi.org/project/fonoapi/",
    "release_url": "https://pypi.org/project/fonoapi/0.1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Access Freshpixl's Fono Api to gain insight into mobile phones",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "77e9d6de13c02279ca0005985b071edb",
          "sha256": "c6ebc7d37d2f4185a119dd25557b653bd9110d598da9805cd114cd22693fc78b"
        },
        "downloads": 0,
        "filename": "fonoapi-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "77e9d6de13c02279ca0005985b071edb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10097,
        "upload_time": "2017-07-25T15:21:16",
        "url": "https://files.pythonhosted.org/packages/32/81/b5c55459c979bc36c0a87e5f7b14f79b5aa4dff16aeedfda50eaabf1b94b/fonoapi-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4de434c7f81b3bbbe4069ea44be2443b",
          "sha256": "3c5a7d0ab1ee6660fd9806e01c5496a1f63b50f934ad7d823c916a1e860450aa"
        },
        "downloads": 0,
        "filename": "fonoapi-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4de434c7f81b3bbbe4069ea44be2443b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10088,
        "upload_time": "2017-07-25T16:09:24",
        "url": "https://files.pythonhosted.org/packages/82/ac/5ad9b8c9eb6feea8988a3cafd81182253b2360bea583b76059bfd2c2303e/fonoapi-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9b730e7ea7df192f0f3445c56fc6afe1",
          "sha256": "676d59fc1f9700869ac54c769b7fd53c9b64ec635c1286b574b26bd3ebe68dea"
        },
        "downloads": 0,
        "filename": "fonoapi-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9b730e7ea7df192f0f3445c56fc6afe1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10230,
        "upload_time": "2017-07-25T18:28:31",
        "url": "https://files.pythonhosted.org/packages/be/01/adc463bc55f045cea5e9825f154c8fb6944fe0da66b9e9781d3acf6a4a48/fonoapi-0.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9b730e7ea7df192f0f3445c56fc6afe1",
        "sha256": "676d59fc1f9700869ac54c769b7fd53c9b64ec635c1286b574b26bd3ebe68dea"
      },
      "downloads": 0,
      "filename": "fonoapi-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9b730e7ea7df192f0f3445c56fc6afe1",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10230,
      "upload_time": "2017-07-25T18:28:31",
      "url": "https://files.pythonhosted.org/packages/be/01/adc463bc55f045cea5e9825f154c8fb6944fe0da66b9e9781d3acf6a4a48/fonoapi-0.1.2.tar.gz"
    }
  ]
}