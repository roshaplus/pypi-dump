{
  "info": {
    "author": "Shon T. Urbas, Geoff Johnson",
    "author_email": "shon.urbas@gmail.com, geoff.johnson@handshake.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Utilities"
    ],
    "description": "==========\npg2kinesis\n==========\n\n.. image:: https://travis-ci.org/handshake/pg2kinesis.svg?branch=master\n    :target: https://travis-ci.org/handshake/pg2kinesis/\n\npg2kinesis uses `logical decoding\n<https://www.postgresql.org/docs/9.4/static/logicaldecoding.html>`_\nin Postgres 9.4 or later to capture a consistent, continuous stream of events from the database\nand publishes them to an `AWS Kinesis <https://aws.amazon.com/kinesis/>`_ stream in a format of your choosing.\n\nIt does this without requiring any changes to your schema like triggers or \"shadow\" columns or tables,\nand has a negligible impact on database performance.\nThis is done while being extremely fault tolerant. No data loss will be incurred on any type of underlying system\nfailure including process crashes, network outages, or ec2 instance failures. However, in these situations there will likely\nbe records that are sent more than once, so your consumer should be designed with this in mind.\n\nThe fault tolerance comes from guarantees provided by the underlying technologies and from the \"2-phase commit\" style of\npublishing inherent to the design of the program. Changes are first peeked from the replication slot and published to Kinesis.\nOnce Kinesis successfully recieves a batch of records, we advance the `xmin <https://www.postgresql.org/docs/9.4/static/catalog-pg-replication-slots.html>`_ of\nthe slot, thereby telling postgres it is safe to reclaim the space taken by the\nwal logs. As is always the case with logical replication slots, unacknowledged data on the slot will consume disk on the database until it is read.\n\nThere are other utilities that do similar things, often by injecting a C library into Postgres to do data transformations in place. Unfortunately these approaches are not suitable for managed databases like AWS' RDS where support for various plugins is limited and ultimately determined by the hosting provider.\nWe specifically created pg2kinesis to make use of logical decoding on `Amazon's RDS for PostgreSQL <https://aws.amazon.com/rds/postgresql/>`_.\nAmazon only supports logical decoding if you use the built in `test_decoding <https://www.postgresql.org/docs/9.4/static/test-decoding.html>`_\noutput plugin. What is special about our utility is it takes the output of the test_decoding plugin, transforms it based\non a formatter you can define, guarantees publishing to a Kinesis stream\nin *transaction commit time order* and with a guarantees that *no data will be lost*.\n\nInstallation\n------------\n\nPrerequisites:\n\n #. Python 2.7.*\n #. AWS-CLI installed and configured\n #. A PostgreSQL 9.4+ server with logical replication enabled\n #. A Kinesis stream\n\nInstall:\n\n ``pip install pg2kinesis``\n\nTests\n-----\n\nTo run tests you will need a clone of the repo and have to install some additional requirements:\n\n #. ``git clone git@github.com:handshake/pg2kinesis.git``\n #. ``cd pg2kinesis``\n #. ``pip install -r requirements.txt``\n #. ``pytest``\n\n\nUsage\n-----\n\nRun ``pg2kinesis --help`` to get a list of the latest command line options.\n\nBy default pg2kinesis attempts to connect to a local postgres instance and publish to a stream named ``pg2kinesis`` using the AWS credentials in the environment the utility was invoked in.\n\nOn successful start it will query your database for the primary key definitions of every table in ``--pg-dbname``. This is used to identify the correct column in the test_decoding output to publish. If a table does not have a primary key its changes will **NOT** be published.\n\nYou have the choice for 2 different textual formats that will be sent to the kinesis stream:\n\n* ``CSVFormatter``: outputs stings to Kinesis that look like::\n\n    0,CDC,<transaction_id (xid)>,<table name>,<dml operation:DELETE|INSERT|UPDATE>,<primary key of row>\n\n* ``CSVPayloadFormatter``: outputs similar to the above except the 3rd column is now a json object representing the change.::\n\n    0,CDC,{\n            \"xid\": <transaction_id>\n            \"table\": <...>\n            \"operation: <...>\n            \"pkey\": <...>\n          }\n\nShout Outs\n----------\n\npg2kinesis is based on the ideas of others including:\n\n* Logical Decoding: a new world of data exchange applications for Postgres SQL [(`slides <https://www.slideshare.net/8kdata/postgresql-logical-decoding/>`_)]\n* psycopg2 [(`main <http://initd.org/psycopg/>`_]) [(`repo\n  <https://github.com/psycopg/psycopg2/>`__)]\n* bottledwater-pg [(`blog <https://www.confluent.io/blog/bottled-water-real-time-integration-of-postgresql-and-kafka>`_)] [(`repo <https://github.com/confluentinc/bottledwater-pg/>`__)]\n* wal2json [(`repo <https://github.com/eulerto/wal2json/>`__)]\n\n\nFuture Road Map\n---------------\n\n* Allow payload format to be specified on Command Line.\n* Allow HUPing to notify utility to regenerate primary key cache\n* Support above on a schedule specified via commandline with sensible default of once an hour.\n* Full Row information publishing (currently we only emit the DML, primary key and table on any type of change)\n* Python 3 Support",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/handshake/pg2kinesis",
    "keywords": "logical replication,kinesis,database",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pg2kinesis",
    "platform": "",
    "project_url": "https://pypi.org/project/pg2kinesis/",
    "release_url": "https://pypi.org/project/pg2kinesis/0.5.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A utility that enables PostgreSQL 9.4+ to logically replicate to Amazon",
    "version": "0.5.0"
  },
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b73e02c5e06de342c0a3b2d4d14786a9",
          "sha256": "db5fd39ef301ca2d29a5db88042bba54f6d8ffb01f53d2592b1b8452c3e45647"
        },
        "downloads": -1,
        "filename": "pg2kinesis-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b73e02c5e06de342c0a3b2d4d14786a9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16466,
        "upload_time": "2018-02-04T22:48:26",
        "url": "https://files.pythonhosted.org/packages/e0/83/b6740dc1243b2250ae57dffd4c410f61ece44a1f8c1810608acf5e8f2125/pg2kinesis-0.5.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b73e02c5e06de342c0a3b2d4d14786a9",
        "sha256": "db5fd39ef301ca2d29a5db88042bba54f6d8ffb01f53d2592b1b8452c3e45647"
      },
      "downloads": -1,
      "filename": "pg2kinesis-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b73e02c5e06de342c0a3b2d4d14786a9",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 16466,
      "upload_time": "2018-02-04T22:48:26",
      "url": "https://files.pythonhosted.org/packages/e0/83/b6740dc1243b2250ae57dffd4c410f61ece44a1f8c1810608acf5e8f2125/pg2kinesis-0.5.0.tar.gz"
    }
  ]
}