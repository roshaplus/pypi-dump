{
  "info": {
    "author": "Priyal Jain",
    "author_email": "jnpr-community-netdev@juniper.net",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Networking",
      "Topic :: Text Processing :: Markup :: XML"
    ],
    "description": "# jsnap-py\nPython version of Junos Snapshot Administrator\n\nInspired by https://github.com/Juniper/junos-snapshot-administrator\n\nAbstract\n========\n\n  Junos Snapshot Administrator enables you to capture and audit runtime environment snapshots of your networked devices running   the Junos operating system (Junos OS).\n  \n  You can write your test cases in yaml file and run those tests cases against pre and post snapshots.\n  \nInstallation\n=============\nInstallation requires Python 2.7 and associated pip tool\n      \n    1. Download or clone the source code from this git repository\n          git clone https://github.com/Juniper/jsnap-py\n    2. or Untar it(if downloaded zip folder)\n          tar -xvzf jsnap-py-master\n    3. Go to jsnap-py-master folder and install by:\n          sudo python setup.py sdist\n          sudo pip install dist/jsnap--.tar.gz\n          \nCommands:\n=========\n1. --init\n     Create Jsnap Directory structure\n     jsnap --init\n      a]config.yml:  Main file containing path of device file and tests file\t\n      b]configs: Folder containing all test files\n      c]logging.yml: logging file, can change logging level (info, debug, error, critical)\t\n      d]logs: log folder, containing all log files\n      e]snapshots: folder containing all snap files   \n\n2. --snap : this command lets you to take snapshot\n     jsnap --snap <file_name> -f <config_file>\n   \n3. --check: this command compares two snapshots\n     jsnap --check <pre_snap> <post_snap> -f <config_file>\n     if test cases are not specified in test files, then it will compare pre and post snap files, node by node\n\n4. --snapcheck: compares the current configuration against some pre defined criteria\n     jsnap --snapcheck <snap_fila_name> -f <config_file>\n\n5. --diff : compares two snapshots (either in xml or text format) word by word\n     jsnap --diff <pre_snap> <post_snap> -f <config_file>\n\nOutput format:\n    We have used jinja templating for output\n    So if user wants to print any value from xml output, the he/she first has to specify pre or post and then node name:\n    For example:\n    {{pre['admin-status']}}  : This will print admin status from pre snapshot\n    {{post['admin-status']}} : This will print admin status from post snapshot\n    can also specify id using:\n    {{id_0}} : for id 0\n    {{id_1}} : for id 1\n\n============================================================================================================\nDifference between --diff and --check when no test case is specified:\n\n    [jpriyal-mba13:latest/jsnapy/test2] jpriyal% jsnap --check pre post -f config_diff.yml\n    ****************************************\n    Performing test on Device: 10.209.16.204\n    ****************************************\n\n    Tests Included: test_bgp_neighbor\n    ****************************************\n    Command is show bgp neighbor\n    ****************************************\n    Difference in pre and post snap file\n    0] <output> value different:\n        Pre node text: 'not running'    Post node text: 'BGP is not running'\n    ------------------------------- Final Result!! -------------------------------\n    Total No of tests passed: 0\n    Total No of tests failed: 1\n    Overall Tests failed!!!\n\n    [jpriyal-mba13:latest/jsnapy/test2] jpriyal% jsnap --diff pre post -f config_diff.yml\n    ****************************************\n    Performing test on Device: 10.209.16.204\n    ****************************************\n    Tests Included: test_bgp_neighbor\n    ****************************************\n    Command is show bgp neighbor\n    ****************************************\n    /Users/jpriyal/Desktop/git_jsnap_py/latest/jsnapy/test2/snapshots/10.209.16.204_pre_show_bgp_neighbor.xml /Users/jpriyal/Desktop/git_jsnap_py/latest/jsnapy/test2/snapshots/10.209.16.204_post_show_bgp_neighbor.xml\n     1 <output>not running</output>                                             1 <output>BGP is not running</output>\n\n\n================================================================================================================\n\nWriting Test File:\n===================\n1. command/rpc : can give either command or rpc to perform testing\n   - format: can specify output format\n        [text,xml]\n         for comapring text output, only --diff option is supported\n2. args: (used only with rpc)\n      - filter_xml: (can provide filtered output)\n      - other arguments\n\n   example:\n      1.   - rpc: get-config\n           - args:\n               filter_xml: configuration/system/login\n\n      2.   - rpc: get-interface-information\n             format: text\n           - args:\n                interface-name: em0\n                media: True\n                detail: True\n\n3. item/iterate: (can have multiple iterate/item under one command/rpc)\n       item: if you want to use only first node in xpath\n       iterate: if want to keep iterating for all nodes in xpath\n4. xpath: path from where u want to test output\n5. tests: (this section specify test-cases, can have multiple test cases inside one iterate/item)\n          test-operator <condition>\n          info <mssg>\n          err  <mssg>\n        Eg:\n           tests:\n              - is-equal: //minimum-time, 60\n                info: \"Test Succeeded!!, minimum-time now is equal to <{{post['//minimum-time']}}>\"\n                err: \"Test Failed!!!, minimum-time is not equal to 60, it is <{{post['//minimum-time']}}>\"\n\n======================================================================================\nComplete example:\n\ntest_interface:\n  - rpc: get-interface-information\n    format: text\n  - args:\n      interface-name: em0\n      media: True\n      detail: True\n  - item:\n      xpath: //physical-interface\n      tests:\n        - is-gt: snmp-index, 2\n          info: \"Test Succeeded!!, snmp-index is greater than 2, it is <{{post['snmp-index']}}>\"\n          err: \"Test Failed!!!, snmp-index is not greater than 2, it is <{{post['snmp-index']}}>\"\n\n=========================================================================================\n\nSupported Test Operator:\n\nFor comparing current snapshot with pre-defined criteria:\n    1. all-same\n    2. is-equal\n    3. not-equal\n    4. is-gt\n    5. is-lt\n    6. in-range\n    7. not-range\n    8. contains\n    9. is-in\n    10. not-in\n    11. exists\n    12. not-exists\n    13. contains\n\nFor comparing two snapshots:\n    1. no-diff\n    2. list-not-less\n    3. list-not-more\n    4. delta\n==============================================================================================================================\n\nMail:\n-------\nYou can send mail by specifying following parameters:\nto: abc@pqr.com \nfrom: pqr@abc.com\nsub: \"Sample Jsnap Results, please verify\"\ndate: \"Sept 11, 2015\"\nrecipient_name: Priyal\npasswd: 123\nserver(optional): smtp.gmail.com optional (by default gmail server is configured in jsnap, if u want to send from \n\t\t\t\tsome other email account apart from gmail, then please specify that server)\nport(optional) : specify port, by default it is SMTP port 587\nsender_name: \"Juniper Networks\"\n\nSquite\n---------\nCan sitore and compare snapshots from database also\nsqlite:\n - store_in_sqlite: True  ## if want to store in sqlite\n   database_name: jbb.db    ## database name   \n   check_from_sqlite: True  ## if want to chk from database\n   compare: 1,0     ## file no to be compared, can be any two no between 0-50\n\n\n=====================================================================================================\nNote on two special test operators (functionality might change based on requirement)\n\n1. Exists: will search for all the node (irrespective of no of times they occur) and then print info/err mssg accordingly\n           Eg: \n      xpath: //software-information\n      tests:\n        - exists: //package-information/name\n          info: \"Test Succeeded!!\"\n          err: \"Test Failed!!!\"\n      Here it will print all the nodes present in given xpath:\n           \t-----------------------Performing exists Test Operation-----------------------\n\t\tTest Succeeded!! node //package_information/name exists with name <junos> and hostname: <bng-ui-vm-92 > \n\t\tTest Succeeded!! node //package_information/name exists with name <jbase> and hostname: <bng-ui-vm-92 > \n\t\tTest Succeeded!! node //package_information/name exists with name <jplatform> and hostname: <bng-ui-vm-92 > \n\t\tTest Succeeded!! node //package_information/name exists with name <jdocs> and hostname: <bng-ui-vm-92 > \n\t\tTest Succeeded!! node //package_information/name exists with name <jservices-aacl> and hostname: <bng-ui-vm-92 > \n\t\tTest Succeeded!! node //package_information/name exists with name <jservices-alg> and hostname: <bng-ui-vm-92 > \n \t\t................\n\n2. Contains: It will go and check in all paths, if want to check only at one particular node then specify that node:\n            if you want to check only one particular node then specify that node:\n                                        contains: //package-information[1]/name[1], junos ### here it will check only first node and then its first name\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://www.github.com/Juniper/jsnapy",
    "keywords": "Junos snapshot automation",
    "license": "Apache 2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "jsnapy",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/jsnapy/",
    "release_url": "https://pypi.org/project/jsnapy/1.1.0/",
    "requires_python": null,
    "summary": "Python version of Junos Snapshot Administrator",
    "version": "1.1.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "afa46b1a95786826bc172e7bc1a4e493",
          "sha256": "c849683f0fc2301d7f86bcac2651d75d93a99211a340c63f39289af440e724ca"
        },
        "downloads": 714,
        "filename": "jsnapy-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "afa46b1a95786826bc172e7bc1a4e493",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39605,
        "upload_time": "2016-08-26T11:01:39",
        "url": "https://files.pythonhosted.org/packages/13/7d/ebbe7def54d4f084f0b81af6fa804ca72172b11ff5350494f74e9a2b4170/jsnapy-1.0.0.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "304750310e92ed40e58a9617c06c36b5",
          "sha256": "92dc31edd298749e3b0a9db1be9b21017e7bd715ac5656cecf61d1b816eb73dc"
        },
        "downloads": 180,
        "filename": "jsnapy-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "304750310e92ed40e58a9617c06c36b5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 44790,
        "upload_time": "2017-01-03T11:20:06",
        "url": "https://files.pythonhosted.org/packages/c3/8d/d33ea2c683a761048c10a9ef5f31965e7e745e8fe178cd294029a063c329/jsnapy-1.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "304750310e92ed40e58a9617c06c36b5",
        "sha256": "92dc31edd298749e3b0a9db1be9b21017e7bd715ac5656cecf61d1b816eb73dc"
      },
      "downloads": 180,
      "filename": "jsnapy-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "304750310e92ed40e58a9617c06c36b5",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 44790,
      "upload_time": "2017-01-03T11:20:06",
      "url": "https://files.pythonhosted.org/packages/c3/8d/d33ea2c683a761048c10a9ef5f31965e7e745e8fe178cd294029a063c329/jsnapy-1.1.0.tar.gz"
    }
  ]
}