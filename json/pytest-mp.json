{
  "info": {
    "author": "Ryan Fitzpatrick",
    "author_email": "rmfitzpatrick@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Testing"
    ],
    "description": "pytest-mp: Multiprocess and Segregate Tests\n===========================================\n\n|Build Status|\n\n**pytest-mp** is a minimalist approach to distributing and segregating\npytest tests across processes using python's\n`multiprocessing <https://docs.python.org/2/library/multiprocessing.html>`__\nlibrary and is heavily inspired by\n`pytest-concurrent <https://github.com/reverbc/pytest-concurrent>`__ and\n`pytest-xdist <https://github.com/pytest-dev/pytest-xdist>`__. As a very\nearly beta, it doesn't pledge or intend to support the majority of\nplatforms or use cases. Design is based on supporting slow, io-bound\ntesting with often tedious system under test configuration that can\nbenefit from running several tests at one time.\n\nInstallation and Basic Usage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    git clone https://github.com/ansible/pytest-mp\n    pip install pytest-mp/\n    cd my_test_dir\n    # Most basic invocation that will spin up to as many test runner processes as multiprocessing.cpu_count() indicates.\n    pytest --mp\n    # Create up to 4 concurrent child processes.\n    pytest --mp --np 4\n    pytest --multiprocessing --num-processes 4  # Same as above but with more informative option names.\n\nTest Running and Segregation Strategies\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\npytest-mp provides four test segregation strategies that come in handy\nfor common test and fixture patterns. Each strategy has its own\nperformance (dis)advantages and caveats in terms of fixture scoping and\ninvocations.\n\n.. code:: python\n\n    import pytest\n\n    @pytest.mark.mp_group('SomeGroupName', 'free')  # free, serial, isolated_free, or isolated_serial\n    class TestSomething(object):\n\n        def test_one(self, fixture_one):\n            assert True\n\n        def test_two(self, fixture_two):\n            assert True\n\n\n    @pytest.mark.mp_group('SomeAdditionalGroupName')  # uses free strategy by default\n    def test_three():\n        assert True\n\n\n    @pytest.mark.mp_group(group='SomeOtherGroupName', strategy='isolated_serial')\n    def test_four(fixture_three):\n        assert True\n\n\n    @pytest.mark.mp_group('SomeOtherGroupName')  # still uses previously-defined strategy isolated_serial\n    def test_five(fixture_three):\n        assert True\n\n1. The **``free``** strategy distributes each test in a group to a fresh\n   pytest session in a child process that invokes all sourced fixtures\n   (regardless of scope), runs that single test, and calls all\n   registered finalizers before joining. This is the default test\n   strategy for grouped and ungrouped tests.\n2. The **``serial``** strategy distributes each group of tests to a\n   fresh pytest session in a child process that invokes all sourced\n   fixtures (regardless of scope) and runs each test serially in the\n   same process before tearing down. This group is best suited for tests\n   that require shared, highly-scoped fixtures that won't affect the\n   state of the system under test for other tests.\n3. The **``isolated_free``** strategy is the same as ``free``, but all\n   tests in this group will be run separately in time from any other\n   test group. Best suited for tests with noisy or destructive fixtures\n   that would affect the requirements of other tests, but that don't\n   require a shared process.\n4. The **``isolated_serial``** strategy is the same as ``serial``, but\n   all tests in this group will be run separate in time from any other\n   test group, essentially like a regular pytest invocation. Best suited\n   for tests with shared, noisy, or destructive fixtures. Absolute\n   pytest execution will be limited to a single process while these\n   tests are running.\n\nFor example, of the tests defined above, ``TestSomething.test_one``,\n``TestSomething.test_two``, and ``test_three`` could potentially be run\nat the same time among 3 processes, but ``test_four`` and ``test_five``\nare guaranteed to run in the same process and with no other tests\nrunning in the background.\n\nSynchronization\n~~~~~~~~~~~~~~~\n\nGiven that tests generally run in child processes that emulate a fresh\npytest session and that by nature pytest fixtures of class or greater\nscope are designed to be shared and invoked once by the test runner,\nsome synchronization between test processes is needed to provide\nidempotency. pytest-mp provides two session-scoped synchronization\nfixtures: ``mp_message_board`` and ``mp_lock``, a\n``multiprocesssing.Manager.dict()`` and\n``multiprocessing.Manager.Lock()`` instance, respectively.\n\n.. code:: python\n\n    import pytest\n\n    @pytest.fixture(scope='session')\n    def must_be_idempotent_without_teardown(mp_lock, mp_message_board, some_resource):\n        with mp_lock:\n            if mp_message_board.get('some_flag_your_fixture_creates'):\n                return\n            mp_message_board['some_flag_your_fixture_creates'] = True\n            some_resource.destructive_call()\n        return\n\n    @pytest.fixture(scope='session')\n    def must_be_idempotent_with_teardown(mp_lock, mp_message_board, some_resource):\n        with mp_lock:\n            if mp_message_board.get('must_be_idempotent_setup'):\n                yielded = mp_message_board['must_be_idempotent_val']\n            else:\n                mp_message_board['must_be_idempotent_setup'] = True\n                yielded = some_resource.destructive_call()\n                mp_message_board['must_be_idempotent_val'] = yielded  # pickle!!!\n        yield yielded\n        with mp_lock:\n            if mp_message_board.get('must_be_idempotent_teardown'):\n                return\n            mp_message_board['must_be_idempotent_teardown'] = True\n            # Notice there is no synchronization w/ this teardown and active fixture consumers!\n            some_resource.cleanup()\n\nA helper fixture ``mp_trail()`` that internally uses ``mp_lock`` and\n``mp_message_board`` is provided to assist in the assurance that a\nsingle setup and teardown invocation of shared fixtures and test logic\noccurs with multiple test runners. A **trail** is any named, shared path\nwith single 'start' and 'finish' events made available as context\nmanager values.\n\n.. code:: python\n\n    @pytest.fixture(scope='session')\n    def must_be_idempotent_with_teardown(mp_trail, some_resource):\n        with mp_trail('TrailName', 'start') as start:  #  mp_trail('TrailName') defaults to 'start'\n            if start:  # First invocation of `must_be_idempotent_with_teardown` detected.\n                yielded = some_resource.destructive_call()\n            else:  # setup has already occured by another test runner\n                yielded = some_resource.get_current_state()\n        yield yielded\n        with mp_trail('TrailName', 'finish') as finish:\n            if finish:  # Last finalizer/teardown detected.\n                # There are no other tests using this fixture at the moment\n                some_resource.cleanup()\n\n.. |Build Status| image:: https://travis-ci.org/ansible/pytest-mp.svg?branch=master\n   :target: https://travis-ci.org/ansible/pytest-mp\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ansible/pytest-mp",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-mp",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-mp/",
    "release_url": "https://pypi.org/project/pytest-mp/0.0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A test batcher for multiprocessed Pytest runs",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "25248d511338a17ca6d6b70eaaa8bc3c",
          "sha256": "16ae063e772dfe7f1b776e21dfa1d58de266c33def196540c25d86f78fcfcdb4"
        },
        "downloads": -1,
        "filename": "pytest-mp-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "25248d511338a17ca6d6b70eaaa8bc3c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13047,
        "upload_time": "2018-01-19T00:58:02",
        "url": "https://files.pythonhosted.org/packages/80/46/2f5ac0f11795b5ba2ef2549feb2f94945ac3f05d1146d9e7c1e444ea3077/pytest-mp-0.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "25248d511338a17ca6d6b70eaaa8bc3c",
        "sha256": "16ae063e772dfe7f1b776e21dfa1d58de266c33def196540c25d86f78fcfcdb4"
      },
      "downloads": -1,
      "filename": "pytest-mp-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "25248d511338a17ca6d6b70eaaa8bc3c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 13047,
      "upload_time": "2018-01-19T00:58:02",
      "url": "https://files.pythonhosted.org/packages/80/46/2f5ac0f11795b5ba2ef2549feb2f94945ac3f05d1146d9e7c1e444ea3077/pytest-mp-0.0.1.tar.gz"
    }
  ]
}