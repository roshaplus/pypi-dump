{
  "info": {
    "author": "SF Graves",
    "author_email": "s.graves@eaobservatory.org",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Topic :: Scientific/Engineering :: Astronomy"
    ],
    "description": ".. inclusion-marker-do-not-remove\nProvides a wrapper around the Starlink software suite commands.\n\n**This package requires a separate working Starlink installation to be\navailable.** It allow easy 'pythonic' calling of Starlink commands\nfrom python, by settuping the environmental variables inside Python\nand then using `subprocess.Popen` to run the Starlink binaries.\n\nThe wrapped Starlink packages are each provided in their own python\nmodule, available as `starlink.<modulename>`, and the within the\npackage as starlink.<modulename>.<commandname>.\n\n\nUsing this package\n==================\n\nSetting up the package\n----------------------\n\nFirst of all, you will have to let this module know where your\nStarlink software suite is installed. You can either directly set the\nlocation inside python as:\n\n>>> from starlink import wrapper\n>>> wrapper.change_starpath('/path/to/my/starlink/installation')\n\nAlternatively, before you start Python you could set the STARLINK_DIR\nenvironmental variable to the location of your starlink\ninstallation. For example, in a BASH shell you could run `export\nSTARLINK_DIR=~/star-2017A`.\n\n\nTo see which Starlink is currently being used examine the variable\n`wrapper.starpath`.\n\nor if you are using a module you can do e.g.:\n\n>>> print(kappa.wrapper.starpath)\n\n\nRunning the commands.\n---------------------\n\nYou will need to import each Starlink package that you want to use. For\nexample, to run the `stats` command from KAPPA on a file `myndf.sdf`\nyou would do:\n\n>>> from starlink import kappa\n>>> statsvals = kappa.stats('myndf.sdf')\n\nEach command will return a namedtuple object with all of the output found\nin `$ADAM_USER/commandname.sdf`.\n\nTo see a field in a namedtuple result, you can do:\n\n>>> print(statsvals.mean)\n\nor to see what fields are available, you can do:\n\n>>> print(statsvals._fields)\n\n(Or inside an ipython terminal session or jupyter notebook you can tab\ncomplete to see the list of available fields.)\n\nGetting help.\n-------------\n\nThis package includes docstrings for each command, summarising the\ncommand and its arguments and keywords. This can be seen in the normal\npython way, e.g.\n\n>>> help(kappa.ndftrace)\n\nAt the bottom of the command it should also give you the URL to see\nthe full documentation in the Starlink User Notes.\n\nTo see the available commands in a package, there is a utiliity\n'starhelp' that will show you the name and the short one-line\ndescription for each command. You can use it on a Starlink module like so:\n\n>>> from starlink.utilities import starhelp\n>>> starhelp(kappa)\n\n\n`starhelp` can also be called with a command name as the argument: it\nwill then show you the full documentation for that command within your\npython session.\n\n>>> starhelp(kappa.stats)\n\n\nDirectly running a command without using the specific package.\n--------------------------------------------------------------\n\n\nYou can also directly run a starlink command using\n:meth:`starlink.wrapper.starcomm` method. This method is used by the starlink\nmodules to run the commands.\n\n>>> from starlink import wrapper\n>>> results = wrapper.starcomm('$KAPPA_DIR/ndftrace', 'ndftrace', 'myndf.sdf')\n\nThis can be helpful if there is something wrong with the\nautomatically-generated argument and keyword options in the specific\ncommands, or if you are trying to run a command that is not included\nin the regular packages.\n\nLogging and seeing the full output.\n-----------------------------------\n\nThese modules use the standard python logging module. To see the normal\nstdout of a starlink command, as well as the details of the commanline , you will need to set the logging module\nto DEBUG, i.e.:\n\n>>> import logging\n>>> logger = logging.getLogger()\n>>> logger.setLevel(logging.DEBUG)\n\nYou can also return all the information that is normally written to screen by\nsetting the extra keyword argument `returnstdout=True`. This will cause your command\nto return a two part tuple of `(<normal-output>, <string-of-output-from-screen>)`.\n\n\nORAC-DR and PICARD\n------------------\n\nORAC-DR and Picard work slighly differently from the other Starlink packages.\n\n\nDetails of package\n==================\n\nThe commands in this package are (mostly) automatically generated from\na Starlink build using a helper script. This script is present in the\ngit repo for this project\n(https://github.com/Starlink/starlink-pywrapper , see the\n'helperfunctions' directory), but is not distributed when you install\nthe software. Currently the FLUXES package is the only manually\ncreated command.\n\n\nThis package uses subprocess.Popen to wrap the Starlink command calls,\nand sets up the necessary environmental variables itself. It uses the\nStarlink module to access the output data written into\n$ADAM_USER/commandname.sdf and return it to the user. It is not\nnecessary to setup Starlink before using this script (e.g. by running\n`source $STARLINK_DIR/etc/profile` or similar), but you do have to\ntell the package where $STARLINK_DIR is, either by setting the\nenvironmental variable before starting Python, or by calling the\n`starlink.wrapper.change_starpath` command with the appropriate\nlocation.\n\nThis package uses a local, temporary $ADAM_USER created in the current working\ndirectory and deleted on exit, so it is safe to have multiple scripts\nrunning concurrently on the same machine.\n\nThis package should be regenerated for each Starlink release; normally\nmost commands will stay unchanged on a new release, but there are\nnormally a few additional commands (or deletion of obsolete commands),\nand the call signature for some commands may also change.\n\n\n\nKnown Issues\n============\n\n1. When calling Starlink commands that are really python scripts, such\nas :meth:`starlink.smurf.jsasplit`, the module will not raise a proper error\n. Please ensure you can see the DEBUG info to identify problems.\n(This can be fixed if the scripts raise an exit code on error).\n\n2. If running a command (such as :meth:`starlink.kappa.display` that launches a\nGWM xwindow, the command will hang until you close the window. (DSB's\nstarutil.py module in SMURF has a solution to this already).\n\n3. Also with GWM windows: these are missing the row of buttons along\nthe bottom, unless the python call reuses an existing xw launched\ndirectly from Starlink. It is not known why.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/Starlink/starlink-pywrapper",
    "keywords": "",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "starlink-pywrapper",
    "platform": "",
    "project_url": "https://pypi.org/project/starlink-pywrapper/",
    "release_url": "https://pypi.org/project/starlink-pywrapper/0.2/",
    "requires_dist": [
      "starlink-pyhds"
    ],
    "requires_python": "",
    "summary": "Provides a wrapper around the Starlink software suite commands.",
    "version": "0.2"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3835b26e9b5d2f2b0b0187d776b4b596",
          "sha256": "3e377b68b66bf639f2ce5181bf7de8f9b92bea4b869d05785c98004a42b40ba2"
        },
        "downloads": -1,
        "filename": "starlink_pywrapper-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3835b26e9b5d2f2b0b0187d776b4b596",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 1411666,
        "upload_time": "2018-01-20T00:31:26",
        "url": "https://files.pythonhosted.org/packages/00/27/dc3442492a8201b884fdbee00257f19b15136181f202a755d975b97130be/starlink_pywrapper-0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "88c5a228ebc00141b19cf3381f9ab11c",
          "sha256": "baa26a28391751432deb740077a0897762759f9046675cfca03e857fab8db069"
        },
        "downloads": -1,
        "filename": "starlink-pywrapper-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "88c5a228ebc00141b19cf3381f9ab11c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 873896,
        "upload_time": "2018-01-20T00:31:31",
        "url": "https://files.pythonhosted.org/packages/c0/08/48c5be209cb3202a569c1a7fd983df635d65237258e2900d8d83f2a44c01/starlink-pywrapper-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "565909d5d341f78d7aa1e2ae98fd7003",
          "sha256": "4d9cad296c2469605d8ae3d09c2a5f4b0b9f8fdb63dd5cf404c229febb5f90e4"
        },
        "downloads": -1,
        "filename": "starlink_pywrapper-0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "565909d5d341f78d7aa1e2ae98fd7003",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 1416841,
        "upload_time": "2018-01-24T03:40:16",
        "url": "https://files.pythonhosted.org/packages/75/92/bfb01ba19c30aa141c411d46efe241f974f7b6440d22565d83a383528a28/starlink_pywrapper-0.2-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "565909d5d341f78d7aa1e2ae98fd7003",
        "sha256": "4d9cad296c2469605d8ae3d09c2a5f4b0b9f8fdb63dd5cf404c229febb5f90e4"
      },
      "downloads": -1,
      "filename": "starlink_pywrapper-0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "565909d5d341f78d7aa1e2ae98fd7003",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 1416841,
      "upload_time": "2018-01-24T03:40:16",
      "url": "https://files.pythonhosted.org/packages/75/92/bfb01ba19c30aa141c411d46efe241f974f7b6440d22565d83a383528a28/starlink_pywrapper-0.2-py2.py3-none-any.whl"
    }
  ]
}