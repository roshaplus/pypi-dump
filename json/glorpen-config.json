{
  "info": {
    "author": "Arkadiusz Dzi\u0119giel",
    "author_email": "arkadiusz.dziegiel@glorpen.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==============\nglorpen.config\n==============\n\n.. image:: https://travis-ci.org/glorpen/glorpen-config.svg?branch=master\n\nYaml config for Your projects - with validation, interpolation and value normalization!\n\nOfficial repositories\n=====================\n\nFor forking and other funnies.\n\nBitBucket: https://bitbucket.org/glorpen/glorpen-config\n\nGitHub: https://github.com/glorpen/glorpen-config\n\nFeatures\n========\n\nYou can:\n\n- create custom fields for custom data\n- define configuration schema inside Python app\n- convert configuration values to Python objects\n- validate configuration\n- use interpolation to fill config values\n- set default values\n\nLoading data\n------------\n\n`glorpen.config.Config` class allows loading data from three sources:\n\n- path, `filepath` constructor argument\n- file-like object, `fileobj` constructor argument\n- dict object passed to `glorpen.config.Config.load_data` or `glorpen.config.Config.finalize`.\n\nInterpolation\n-------------\n\nYou can reuse values from config with `{{ path.to.value }}` notation, eg:\n\n.. code-block:: yaml\n\n   project:\n      path: \"/tmp\"\n      cache_path: \"{{ project.path }}/cache\"\n\nIf normalized value object `MyClass('/tmp','{{project.path}}')` is `denormalized` to `/tmp:{{project.path}}`,\nafter resolving configuration it will read `MyClass('/tmp','/tmp')`.\n\nNormalization and validation\n----------------------------\n\nEach field type has own normalization rules, eg. for `fields.LogLevel`:\n\n.. code-block:: yaml\n\n   logging: DEBUG\n\n`config.get(\"logging\")` would yield value `10` as is `logging.DEBUG`. \n\nAdditionally it will raise `exceptions.ValidationError` if invalid level name is given.\n\nDefault values\n--------------\n\nEach field can have default value. If no value is given in config but default one is set, it will be used instead.\n\nDefault values adhere to same interpolation and normalization rules - each default value is denormalized and then passed to normalizers.\nThat way complex object can still profit from config interpolation. There should not be any real impact on performance as it is done only once.\n\nExample usage\n=============\n\nYour first step should be defining configuration schema:\n\n.. code-block:: python\n\n   from glorpen.config import Config\n   from glorpen.config.fields import Dict, String, Path, LogLevel\n   \n   project_path = \"/tmp/project\"\n   \n   spec = Dict(\n      project_path = Path(default=project_path),\n      project_cache_path = Path(default=\"{{ project_path }}/cache\"),\n      logging = Dict(\n          level = LogLevel(default=logging.INFO)\n      ),\n      database = String(),\n      sources = Dict(\n          some_param = String(),\n          some_path = Path(),\n      )\n   )\n\nExample yaml config:\n\n.. code-block:: yaml\n\n   logging: \"DEBUG\"\n   database: \"mysql://....\"\n   sources:\n      some_param: \"some param\"\n      some_path: \"/tmp\"\n\nThen you can create `Config` instance:\n\n.. code-block:: python\n\n   cfg = Config(filepath=config_path, spec=spec).finalize()\n\n   cfg.get(\"sources.some_param\") #=> \"some param\"\n   cfg.get(\"project_path\") #=> \"/tmp/project\"\n   cfg.get(\"project_cache_path\") #=> \"/tmp/project/cache\"\n   cfg.get(\"logging\") #=> 10\n\nCreating custom fields\n======================\n\nCustom field class should extend `glorpen.config.fields.Field`.\n\n`Field.make_resolvable` method should register normalizer functions which later will be called in registration order.\nEach value returned by normalizer is passed to next one. After chain end value is returned as config value.\n\n`denormalize` method should convert field's normalized object back to string.\n\nIf value passed to normalizator is invalid it should raise `exceptions.ValidationError`.\n\n.. code-block:: python\n\n   class MyValue(object):\n      def __init__(self, value):\n         super(MyValue, self).__init__()\n         self.value = value\n   \n   class MyField(Field):\n       \n       def to_my_value(self, value, config):\n           return MyValue(value)\n       \n       def denormalize(self, value):\n           return value.value\n       \n       def make_resolvable(self, r):\n           r.on_resolve(self.to_my_value)\n\nThe last thing is to use prepared custom field in configuration spec.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/glorpen/glorpen-config",
    "keywords": null,
    "license": "GPLv3+",
    "maintainer": null,
    "maintainer_email": null,
    "name": "glorpen-config",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/glorpen-config/",
    "release_url": "https://pypi.org/project/glorpen-config/1.0.1/",
    "requires_python": null,
    "summary": "Loads, validates, normalizes configuration in yaml.",
    "version": "1.0.1"
  },
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "486b4b057f04379e53c8d6f07c7aa73e",
          "sha256": "163735a77d848119a0181c426d55b6c7c5eb4b6f86bbf935603fc770773c9c22"
        },
        "downloads": 804,
        "filename": "glorpen_config-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "486b4b057f04379e53c8d6f07c7aa73e",
        "packagetype": "bdist_wheel",
        "python_version": "3.4",
        "size": 10365,
        "upload_time": "2015-12-15T23:43:01",
        "url": "https://files.pythonhosted.org/packages/31/c5/52f98282461de74bc539beeb6f520448c2dddfe6720323a528e101131ad4/glorpen_config-1.0.1-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "486b4b057f04379e53c8d6f07c7aa73e",
        "sha256": "163735a77d848119a0181c426d55b6c7c5eb4b6f86bbf935603fc770773c9c22"
      },
      "downloads": 804,
      "filename": "glorpen_config-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "486b4b057f04379e53c8d6f07c7aa73e",
      "packagetype": "bdist_wheel",
      "python_version": "3.4",
      "size": 10365,
      "upload_time": "2015-12-15T23:43:01",
      "url": "https://files.pythonhosted.org/packages/31/c5/52f98282461de74bc539beeb6f520448c2dddfe6720323a528e101131ad4/glorpen_config-1.0.1-py2.py3-none-any.whl"
    }
  ]
}