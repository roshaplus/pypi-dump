{
  "info": {
    "author": "Jacob Rief",
    "author_email": "jacob.rief@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "====================================================== Manage bower\ncomponents and node packages using Django\n======================================================\n\nMany Django applications require some JavaScript packages, which usually\nare not available on `PyPI <https://pypi.python.org/pypi>`__ and thus\ncan't be installed through **pip**. A common solution to this problem\nis, to copy these JavaScript packages into the Django application. This\nhowever is a bad solution, since then these packages have to be\nrevisioned twice. By adding the file(s) ``bower.json`` and/or\n``package.json`` to each Django application, this problem can be solved\nin a portable and elegant manner.\n\nWith **django-nodebow** manage your JavaScript dependencies from *all*\nof your Django projects centrally for the required bower components\nand/or node packages, simply through:\n\n::\n\n    ./manage.py bower install\n    # and/or\n    ./manage.py npm install\n\nThe nice feature of **django-nodebow** is, that each Django application\ncan specify which external packages it requires itself, without adding\nthese to its own Git repository.\n\nInstallation\n============\n\nInstall `NodeJS <http://nodejs.org/download/>`__.\n\nInto your global NodeJS packages folder, install\n`bower <http://bower.io/>`__:\n\n::\n\n    sudo npm install -g bower\n\nInto your Python virtualenv:\n\n::\n\n    pip install django-nodebow\n    pip install PyExecJS\n\nAdd ``bower_components/`` and ``node_packages/`` to the file\n``.gitignore`` found in the root of your Django project.\n\nConfiguration\n=============\n\nIn ``settings.py``:\n\n::\n\n    INSTALLED_APPS = (\n        ...\n        'nodebow',\n        ...\n    )\n\n    STATICFILES_FINDERS = (\n        ...\n        'nodebow.finders.BowerComponentsFinder'\n        ...\n    )\n\nOptional settings\n-----------------\n\nBy default, the folders ``bower_components`` and/or ``node_packages``\nare placed into the root of your Django project. By changing\n``PROJECT_PATH``, these folder are placed below that location.\n\n**NPM** searches for its global node modules in a folder, which can be\nset using the environment variable ``NODE_PATH``. This can be overridden\nby a settings variable with the same name. If both are unset, this\nlocation is determined by executing ``npm root -g`` in the shell.\n\nUsage\n=====\n\nTo install all the bower components which are required for your Django\nproject, simply invoke:\n\n::\n\n    ./manage.py bower install\n\nThis will iterate over all applications defined in your\n``INSTALLED_APPS`` settings, and look for a file named ``bower.json``.\nIf such a file was found, the list of ``dependencies`` is resolved and\nthe corresponding packages are installed into the folder\n``bower_components`` of the local Django project.\n\nSay, one of the processed ``bower.json`` files contains an entry\n\n::\n\n      ...\n      \"dependencies\": {\n        ...\n        \"jquery\": \"~2.0.3\",\n        ...\n      }\n\nthen, when accessing the main file, use\n\n::\n\n        {% load static %}\n        ...\n        <script src=\"{% static 'jquery/jquery.js' %}\" type=\"text/javascript\"></script>\n        ...\n\nin any of your Django templates.\n\nAs of version 0.0.1 ``./manage npm install``, currently does not work.\n\nDifference between Bower and NPM\n================================\n\n**npm** is most commonly used for managing Node.js modules, which run\nexclusively on the server-side.\n\n**Bower** is created solely for the front-end and is optimized with that\nin mind. The biggest difference is that npm does nested dependency tree\n(size heavy) while Bower requires a flat dependency tree. This puts the\nburden of dependency resolution on the user.\n\nA nested dependency tree means that your dependencies can have its own\ndependencies which can have their own, and so on. This is really great\non the server where you don't have to care much about space and latency.\nIt lets you not have to care about dependency conflicts as all your\ndependencies use e.g. their own version of Underscore. This obviously\ndoesn't work that well on the front-end. Imagine a site having to\ndownload three copies of jQuery.\n\nThe reason many projects use both is that they use Bower for front-end\npackages and npm for developer tools like SASS, LESS, Grunt, Gulp,\nJSHint, CoffeeScript, etc.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jrief/django-nodebow",
    "keywords": null,
    "license": "LICENSE-MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-nodebow",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/django-nodebow/",
    "release_url": "https://pypi.org/project/django-nodebow/0.0.1/",
    "requires_python": null,
    "summary": "Manage dependencies of bower components and node packages for all installed Django apps.",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c4086f3454fb17778d1d2e371d946c89",
          "sha256": "ecd3dcbd1f9bd8f9d7ade07c19af3a09fc9285f22d0386df4eca7525d161d892"
        },
        "downloads": 1908,
        "filename": "django-nodebow-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c4086f3454fb17778d1d2e371d946c89",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6453,
        "upload_time": "2015-01-28T16:49:17",
        "url": "https://files.pythonhosted.org/packages/1b/e5/7526674a8c10c44c77dddd52e37167f619a40935ab8c2928d3ee26ce2652/django-nodebow-0.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c4086f3454fb17778d1d2e371d946c89",
        "sha256": "ecd3dcbd1f9bd8f9d7ade07c19af3a09fc9285f22d0386df4eca7525d161d892"
      },
      "downloads": 1908,
      "filename": "django-nodebow-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c4086f3454fb17778d1d2e371d946c89",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6453,
      "upload_time": "2015-01-28T16:49:17",
      "url": "https://files.pythonhosted.org/packages/1b/e5/7526674a8c10c44c77dddd52e37167f619a40935ab8c2928d3ee26ce2652/django-nodebow-0.0.1.tar.gz"
    }
  ]
}