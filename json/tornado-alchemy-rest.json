{
  "info": {
    "author": "EzyInsights team",
    "author_email": "andrii.kostenko@kampiki.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "Tornado + Alchemy REST Client\n=============================\n\nThis simple module creates CRUD endpoints for SQLAlchemy table. Its\npurpose to allow quickly create RESTful APIs, for example for admin\npanel. List endpoints support pagination and filtering. Was written for\nAngular\u2019s ng-admin, so this module supports ng-admin querying out of the\nbox\n\nInstallation\n------------\n\n::\n\n        pip install tornado-alchemy-rest\n\nUsage example\n-------------\n\n.. code:: python\n\n        import tornado.web\n        from tornado.web import URLSpec\n        from .models import ItemTable\n        from tornado_alchemy_rest import SingleRESTAPIHandler, ListRESTAPIHandler\n      \n        class SingleItemHandler(SingleRESTAPIHandler):\n            table = ItemTable\n        \n            def delete(self, *args, **kwargs):\n                raise HTTPError(405)\n        \n        \n        class ItemHandler(ListRESTAPIHandler):\n            table = ItemTable\n\n        app = tornado.web.Application([\n            URLSpec(prefix(r'items'), ItemHandler, dict(psql=psql_pool), 'items'),\n            URLSpec(prefix(r'items/(\\d+)'), SingleItemHandler, dict(psql=psql_pool), 'single_item'),\n        ])\n\nMore complex example, where you can override object creation methods:\n\n.. code:: python\n\n    class SingleItemHandler(SingleRESTAPIHandler):\n        table = TableItem\n\n        @gen.coroutine\n        def get_object_dict(self, *args):\n            obj = yield super().get_object_dict(*args)\n            \n            cursor = yield self._execute_query(User.select().where(User.c.id == obj['user_id']))\n            obj['user'] = cursor.fetchone()\n            return obj\n\n        @gen.coroutine\n        def put_object_dict(self, id, params):\n            assert params['value'] > 5\n            yield super().put_object_dict(id, params)\n\n    class ItemHandler(ListRESTAPIHandler):\n        table = TableItem\n\n        @gen.coroutine\n        def get_object_list(self, query):\n            objects = yield super().get_object_list(query)\n            for obj in objects:\n                cursor = yield self._execute_query(User.select().where(User.c.id == obj['user_id']))\n                obj['user'] = cursor.fetchone()\n            raise gen.Return(objects)\n\n        @gen.coroutine\n        def post_object_dict(self, params):\n            assert params['value'] > 5\n            yield super().post_object_dict(params)\n\nQuerying\n--------\n\nTo get second page with ordering by id DESC you need to do that query:\n\n::\n\n    GET /item?_page=2&_perPage=30&_sortField=id&_sortDir=DESC\n\nTo get all items, where ``name`` contains \u201ctest\u201d and ``type`` is 5 and\n``value`` is 7 or 6, you will need that query:\n\n::\n\n    GET /item?_filters={\"name__contains\":\"test\", \"type\":5, \"value__any\":[7,6]}\n\nQuery params\n~~~~~~~~~~~~\n\n-  \\_page \u2013 page name\n-  \\_perPage \u2013 rows per page\n-  \\_sortField \u2013 field to order by\n-  \\_sortDir \u2013 direction to sort by\n-  \\_filters \u2013 filter items with given params. Currently supported\n   filters are: \u201c\u201d (equality), startswith, contains, icontains, any, ne\n\nJoin support\n~~~~~~~~~~~~\n\nThat will return data from both tables at some time:\n\n.. code:: python\n\n    class SingleItemHandler(SingleRESTAPIHandler):\n        table = TableItem\n\n        def get_from(self):\n            return self.table.join(TableUser, isouter=True)\n\nRequirements\n------------\n\ntornado, sqlalchemy\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/EzyInsights/tornado-alchemy-rest",
    "keywords": "tornado sqlalchemy alchemy rest api postgresql",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tornado-alchemy-rest",
    "platform": "",
    "project_url": "https://pypi.org/project/tornado-alchemy-rest/",
    "release_url": "https://pypi.org/project/tornado-alchemy-rest/0.1.5/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Tornado REST API",
    "version": "0.1.5"
  },
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a6fee55bdb3a0c7169c96d77e47f2cef",
          "sha256": "2f9b110cd8f83d509c8916668e85850e3d9a6efdabcee1f12ef6f875e055af67"
        },
        "downloads": -1,
        "filename": "tornado-alchemy-rest-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a6fee55bdb3a0c7169c96d77e47f2cef",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4310,
        "upload_time": "2016-09-06T09:00:54",
        "url": "https://files.pythonhosted.org/packages/bc/15/2f9eaeff2897d9148236a5e2e1e92ec522fd5b57afcbbe88b5f069fac61c/tornado-alchemy-rest-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "62cb1d440fe0f954160af03022676d40",
          "sha256": "35ad0ac4338069170ffd56b1bc5da0213d563e75ccd7d62d839ae686cd608b15"
        },
        "downloads": -1,
        "filename": "tornado-alchemy-rest-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "62cb1d440fe0f954160af03022676d40",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5488,
        "upload_time": "2016-09-06T09:35:14",
        "url": "https://files.pythonhosted.org/packages/9c/a0/59c647faf99b05c18a0a4028ebb786365400585349cf1dc9d7269b3dcb9b/tornado-alchemy-rest-0.1.3.tar.gz"
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cde272e7612d9351f36eba0edb102fa7",
          "sha256": "c14fdd080fa783741472c31d9ce16b989dfc5c5940dc5570db07abaf6eb8c4be"
        },
        "downloads": -1,
        "filename": "tornado-alchemy-rest-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "cde272e7612d9351f36eba0edb102fa7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5572,
        "upload_time": "2017-10-06T08:02:40",
        "url": "https://files.pythonhosted.org/packages/09/92/40222cdc32631ce9bf48cf276690f9ef000336d538a41c98a16a05eb57f6/tornado-alchemy-rest-0.1.4.tar.gz"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "db6e287ce8ac59072e8239b9e1d2ed65",
          "sha256": "5cf2cdb06bdef94e08a8b4c165283641cfe93e054620cbece188b9e41d39e321"
        },
        "downloads": -1,
        "filename": "tornado-alchemy-rest-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "db6e287ce8ac59072e8239b9e1d2ed65",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5571,
        "upload_time": "2017-10-10T09:20:17",
        "url": "https://files.pythonhosted.org/packages/79/45/9a90fcfeec5e7c82bfa17fe8407350524e52e87d9b89abd6487f26463390/tornado-alchemy-rest-0.1.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "db6e287ce8ac59072e8239b9e1d2ed65",
        "sha256": "5cf2cdb06bdef94e08a8b4c165283641cfe93e054620cbece188b9e41d39e321"
      },
      "downloads": -1,
      "filename": "tornado-alchemy-rest-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "db6e287ce8ac59072e8239b9e1d2ed65",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5571,
      "upload_time": "2017-10-10T09:20:17",
      "url": "https://files.pythonhosted.org/packages/79/45/9a90fcfeec5e7c82bfa17fe8407350524e52e87d9b89abd6487f26463390/tornado-alchemy-rest-0.1.5.tar.gz"
    }
  ]
}