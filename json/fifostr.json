{
  "info": {
    "author": "manu chatterjee",
    "author_email": "deftio at deftio dot com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development"
    ],
    "description": "|PyPI version|\n|Build Status|\n|Coverage Status|\n\nfifostr.py\n==========\n\nA small python lib for treating strings as fifos with callback-based\npattern matching\n\n(c) 2011 manu chatterjee deftio (at) deftio.com\n\nfifostr (First In First Out String) is a small python library originally\nused for combining deque with pattern-trigger operations for an embedded\nterminal program. It allows pieces of a string to be treated in a\nmutable way with operations that you would expect from a bi-directional\nlist such as insertion at either end and adding/removing N chars from\neither end.\n\nfifostr has built-in pattern matching and triggering. Simply add /\nremove patterns which can call a user supplied function (E.g. if the\npattern is \"seen\" then trigger the function). Patterns can be strings,\nregexes or user-supplied-functions. A pattern consists of:\n\n-  pattern: string *or* compiled regex *or*\n   user-supplied-parser-function\n-  label: user supplied 'name' for this pattern\n-  start index : position in fifostr to begin pattern match. default is\n   0 (also accepts the character '^' as start anchor for those familiar\n   with regexes)\n-  stop index : position in fifostr to end pattern match. default is end\n   of fifostr. the letter '$' has special meaning as end of string no\n   matter the length (again regex)\n-  callback\\_fn : called if pattern is found, fifostr(start:end) and the\n   label are passed to the callback function\n   (callback('thematchingstring','label'))\n-  active : default is True, sets whether this pattern should be\n   actively looked for\n\nOriginally a lighter version of this was used in a python serial\nterminal program dioterm (which allowed the serial terminal to parse\ncommands sent/received by both sides).\n\nAnd finally .. I just wanted to get some practice on python module\npackaging ...\n\ncheers-\nmc\n\nInstallation\n~~~~~~~~~~~~\n\n``pip install fifostr # or just pull fifostr.py from the source repository and put in your source path``\n\nOriginal Usage\n~~~~~~~~~~~~~~\n\nOriginally part of a terminal program called 'dioterm' (albeit in much\nmore compact form), this library was used used to 'listen' to traffic in\neither direction on a serial port. When certain patterns were found such\nas a command sent from the host or a special piece of data from the\nembedded microntroller client, fifostr would trigger a callback to do\nsomething. This was very useful when sequences of commands had to be set\nup between the host and client. Many of these sequences where\nconditional based on what either the host or client sent resulting in\nmany variations of sequence-test cases, especially if this results in\nthe host then having to make some other call to an unrelated process or\nhardware to reply correctly.\n\nFunctionality\n~~~~~~~~~~~~~\n\nFIFOStr is a string which is (derived from deque) with these properties:\n\n-  add/remove chars or strings at either end\n-  mutable (can set a char to any value like an array with [])\n-  use slices, lists, or tuples to retrieve members (just like a real\n   str object)\n-  get head/tail (returns as a str)\n-  match head/tail --> match a supplied string to either the head or\n   tail\n-  use patterns to trigger callbacks --> pattern can be string \\| regex\n   \\| user\\ *supplied*\\ parser any of which triggers user supplied\n   callback\\_fn\n\n   -  all patterns can look at either the whole fifostr or any subset\n      e.g. addPattern(\"foo\",myCallback,2,5,\"bar\")\n      ::\n\n          --> only looks for \"foo\" between positions 2 and 5 in the fifostr and will call myCallback with (\"foo\",\"bar\")  if found\n\n   -  all patterns have optional label which can be used for logging\n      purposes (eg. when pattern found, in addition to callback, emit\n      label)\n   -  user supplied callback\\_fn is called with both the string-match\n      section and the label\n   -  patterns can be added/deleted from the list of patterns \"watching\"\n      the fifostr content\n   -  all (active) patterns are always matched. fifostr matches multiple\n      different patterns over the same string.\n\n-  clear all patterns --> removes patterns from processing\n-  get/setPattern Active/Inactive --> allows a stored pattern to set on\n   or off\n-  Python 2.7+, Python 3+ support with no mods\n\nUsage example\n~~~~~~~~~~~~~\n\nSee example.py to run in tests dir -- same examples as here but more\ncomments, more use cases\n\n\\`\\`\\`\nfrom fifostr import FIFOStr\ndef main():\n::\n\n    myFifoStr=FIFOStr(5) #make a fifostr of length 5 (for unlimited length omit number)\n    myFifoStr+='1234567' #adds 1234567 to fifostr ... but len of fifostr is 5\n                         # so only 34567 is retained\n\n    print \"myFifoStr.head(3)= \",myFifoStr.head(3) #shows 345\n    print \"myFifoStr.tail(4)= \",myFifoStr.tail(4) #shows 4567\n\n    # the eqhead and eqtail functions allow string compares against\n    # the head or the tail\n\n    myFifoStr.eqhead(\"3456\")    #True\n    myFifoStr.eqhead(\"567\")     #False\n    myFifoStr.eqtail(\"4567\")    #True\n    myFifoStr.eqtail(\"abc\")     #False\n\n    #fifostr.testPattern() allows you to test if the pattern is present in the fifostr object\n    #test a  string pattern directly\n    myFifoStr.testPattern('67890') #False\n\n    #test a regex pattern directly.  to do this pass any valid regex in compiled form\n    r1=re.compile(\"[0-9]+\")\n    myFifoStr.testPattern(r1)   #True\n\n    r2=re.compile(\"[a-z]+\")\n    myFifoStr.testPattern(r2)   #False\n\n    #more generally we can add (and remove) patterns which will scan and trigger a call back everytime the fifostr \n    #internal content changes (whether adding or deleting chars from either end or even rotating/reversing the fifstr object)\n\n    #adding patterns\n    p1 = myFifoStr.addPattern(\"234\",logf,label=\"234 was here\") #integer index returned managing pattern \n    p2 = myFifoStr.addPattern(\"67890\",logf,label=\"67890 detected\")\n    p3 = myFifoStr.addPattern(r1,logf,label=\"r1 detected\")\n    myFifoStr.addPattern(r2,logf,label=\"r2 hit\")\n    myFifoStr.addPattern(f1,logf,label=\"f1 hit\")   \n    myFifoStr.addPattern(f2,logf,label=\"f2 hit\")    \n\n    #patterns can be set active/inactive via pattern management fns \n    myFifoStr.setPatternActiveState(p1,False) #based on index returned from addPattern\n\n    #now show searching for stored pattern matchers in the pattern dict\n    #this is not searching the fifo-string itself, just the stored patterns that we have entered\n    print(\"find pattern by label 'foo':\",myFifoStr.findPatternByLabel(\"foo\")) #no matches returns empty list\n    print(\"find pattern by label '234 hit':\",myFifoStr.findPatternByLabel(\"234 hit\")) #shows match\n    print(\"find pattern by label using regex '[rf][0-9]':\")\n    pp.pprint(myFifoStr.findPatternByLabel(re.compile(\"[rf][0-9]\")))\n\n    #and finally demonstrate that patterns auto-trigger when items inserted in fifostr .. which afterall\n    #is the point of the whole thing.. ;)\n    print(\"\\n fifo operations ============\")\n    for c in '01234567890abcdefghijklmnop':  #show using inc which accomplishes same thing\n        myFifoStr += c\n\n    myFifoStr+= 'abcdefghi'\n    print (myFifoStr.all())\n\n\\`\\`\\`\n\nNotes\n~~~~~\n\nAbsolutley *no* warranties on performance. This is not replacement for a\ncompiler/parser front end! It just iterates over stored patterns every\ntime something is added to the\nfifostr object. If you do have a parser you wish to be called then just\nadd it as a function so that every time the fifostr is updated with a\nchar it will call your parser to do the work. Your parser must return a\nboolean result if you wish to use the callback based triggering.\n\n\\`\\`\\`\n\nlet your own parser do the work\n===============================\n\n::\n\n    myFifo = fifostr(20)  # make a 20 char fifostr\n    myFifo.addPattern(myParser,myCallbk) #myParser passed entire fifostr (as str) when char(s) added\n    myFifo.addPattern(myParser,myCallbk2,3,5) #myParser passed fifostr btw (3,5).  My Parser must return True if match found for callback to be invoked\n\n\\`\\`\\`\n\nSource code home\n~~~~~~~~~~~~~~~~\n\nall source is at github:\nhttp://github.com/deftio/fifostr\n\ndocs and other projects at\nhttp://deftio.com/open-source\n\nTests & Coverage\n~~~~~~~~~~~~~~~~\n\nfor quick usage see\nsee **main** in example.py file\n\nfor test coverage look in the /tests directory\nto run tests pytest needs to be installed.\n\non Ubuntu\n^^^^^^^^^\n\n``pip install -U pytest pytest-cov  pip install coveralls``\nnote: more info at pytest.org for installation on other OSes\n\n\\`\\`\\`\n\nrunning basic tests\n===================\n\ncd tests\npytest #or py.test\n\ncoverage stats below\n====================\n\ncoverage run --source fifostr -m pytest\ncoverage report -m\n\\`\\`\\`\n\nRelease History\n~~~~~~~~~~~~~~~\n\n-  1.1.9 rebuild for README.md to README.rst conversion using pandoc (no\n   code changes) for PyPi\n-  1.1.8 rebuild to make sure proper pkg loaded to PyPi (no code\n   changes)\n-  1.1.7 updated MANIFEST.in to use README.rst\n-  1.1.6 added PyPi version badge in README.md\n-  1.1.5 coverage to 100%, added badging, added README.rst\n-  1.1.x changed class name from fifostr to FIFOStr to make PEP8\n   compliant. fixed bug in setup.py (package\\_dir)\n-  1.0.x documentation clean up\n-  1.0.0 Initial release\n\nDocs\n~~~~\n\ndocumentation is in /docs directory (generated by pydoc)\nto (re)generate the docs. cd to the docs directory. then type:\n``pydoc -w ../fifostr.py``\nnote that as of this writing pydoc generates its output in the current\ndirectory and doesn't seem to be pipeable to another.\n\nREADME.md vs README.rst\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe README.rst is generated from the README.md using pandoc but the\ncontent is identical. This has to do with uneven support of markdown vs\nReStructured Text on github vs PyPi.\n\nLicense\n~~~~~~~\n\nSee LICENSE.txt file in this directory. The license is the OSI approved\n\"FreeBSD\" 2 clause license.\n\n.. |PyPI version| image:: https://badge.fury.io/py/fifostr.svg\n   :target: https://badge.fury.io/py/fifostr\n.. |Build Status| image:: https://travis-ci.org/deftio/fifostr.svg?branch=master\n   :target: https://travis-ci.org/deftio/fifostr\n.. |Coverage Status| image:: https://coveralls.io/repos/github/deftio/fifostr/badge.svg?branch=master\n   :target: https://coveralls.io/github/deftio/fifostr?branch=master",
    "docs_url": null,
    "download_url": "https://pypi.python.org/pypi/fifostr",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/deftio/fifostr",
    "keywords": "string stream parsing,parser utilities",
    "license": "BSD License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "fifostr",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/fifostr/",
    "release_url": "https://pypi.org/project/fifostr/1.1.9/",
    "requires_python": null,
    "summary": "fifostr - A FIFO (first in first out) buffer for strings derived from deque with pattern match callbacks",
    "version": "1.1.9"
  },
  "releases": {
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a97aa504e973d7dccc7aa001f538bb15",
          "sha256": "7bda5a923e71cdacb29ca51ae5f7affffeed30c86b48d0bf2111a607e625bd61"
        },
        "downloads": 284,
        "filename": "fifostr-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a97aa504e973d7dccc7aa001f538bb15",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12342,
        "upload_time": "2016-07-17T07:35:09",
        "url": "https://files.pythonhosted.org/packages/73/10/8bc4211fba97591848a322a8cb00dda87d81da8f8ea10a4e738b9799e37d/fifostr-1.0.8.tar.gz"
      }
    ],
    "1.0.81": [
      {
        "comment_text": "",
        "digests": {
          "md5": "03ae30ff655ef203b23979c422c741f3",
          "sha256": "316fa0d60ceae01c93c5948635597e90484b5683429973f7fa587e5e66d95928"
        },
        "downloads": 236,
        "filename": "fifostr-1.0.81.tar.gz",
        "has_sig": false,
        "md5_digest": "03ae30ff655ef203b23979c422c741f3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12414,
        "upload_time": "2016-07-17T15:41:53",
        "url": "https://files.pythonhosted.org/packages/b2/33/45a315b1353567e4c2dd4df3a2de37ce840452c33af563a785ee1e646e09/fifostr-1.0.81.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9d7675ba4c0e0ccb567fcfd28442f442",
          "sha256": "cb0abf062ec49689e7abb48f32f9b2a3a894fb064a8e17d6cd2927675ebcd907"
        },
        "downloads": 320,
        "filename": "FIFOStr-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9d7675ba4c0e0ccb567fcfd28442f442",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12835,
        "upload_time": "2016-07-22T07:39:31",
        "url": "https://files.pythonhosted.org/packages/00/13/0be2efd7e74ea8787db16fd4293dfb42b06d72921134439ea908b45109bf/FIFOStr-1.1.0.tar.gz"
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2f3359235157d1d41a1adbea1a6336d1",
          "sha256": "983e58cf73cdfed1a6d25c08755497ad96d08873f0a1614cdf58f9e7ca2e5717"
        },
        "downloads": 11,
        "filename": "FIFOStr-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2f3359235157d1d41a1adbea1a6336d1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12884,
        "upload_time": "2017-03-22T23:51:53",
        "url": "https://files.pythonhosted.org/packages/2e/c4/72dbd3c77b649b95a71dbba065dd4abfdeece9e27ad6c8bab5e80967b376/FIFOStr-1.1.3.tar.gz"
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dcfe48744baab47e505dbc2ce0babeb8",
          "sha256": "2926d4401b8a85fc62f45f993d70e6e64aaacc8949ce482457d18b24c01e3e30"
        },
        "downloads": 13,
        "filename": "FIFOStr-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "dcfe48744baab47e505dbc2ce0babeb8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14808,
        "upload_time": "2017-03-26T18:53:15",
        "url": "https://files.pythonhosted.org/packages/0c/bb/f49a621032258eef307547e9ba44677ad5acb8342b9d5f4c1a76a7bbf4f6/FIFOStr-1.1.4.tar.gz"
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0d6fa9d8c406270c16c54473581731a5",
          "sha256": "87c27b96c0af39844d395a615aa1fe7111c2515df66a1b5d1336c8a7b2a4674d"
        },
        "downloads": 14,
        "filename": "FIFOStr-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "0d6fa9d8c406270c16c54473581731a5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15352,
        "upload_time": "2017-03-26T19:08:00",
        "url": "https://files.pythonhosted.org/packages/bd/96/d8308d15ee7fd4398378ec54105a561b15033a82f40a3e9f9f866f9598ab/FIFOStr-1.1.5.tar.gz"
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "05eba2ff1dc9680f83a0da1c69843bb9",
          "sha256": "c67dc80363038b65a61d69d2df220f0fd3a674420bab3812f13a0476ef637eac"
        },
        "downloads": 12,
        "filename": "FIFOStr-1.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "05eba2ff1dc9680f83a0da1c69843bb9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15482,
        "upload_time": "2017-03-29T01:05:13",
        "url": "https://files.pythonhosted.org/packages/19/37/c5639ac5683d01ef90913f81a3dcd9a32213389b1d4a471229498466c023/FIFOStr-1.1.7.tar.gz"
      }
    ],
    "1.1.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0de6182e25d8248f7808fead545a4722",
          "sha256": "731b74d2eee34e990d0143b09dafb986338b73e7d192f8795e69524f8256d200"
        },
        "downloads": 12,
        "filename": "FIFOStr-1.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "0de6182e25d8248f7808fead545a4722",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15533,
        "upload_time": "2017-03-29T06:19:32",
        "url": "https://files.pythonhosted.org/packages/91/a7/e71283b166a88dac494d403b552c93ea63f330e5eefd6d75ebfc472786b3/FIFOStr-1.1.8.tar.gz"
      }
    ],
    "1.1.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7508770c1b9b2264d332e8aa745ebf6e",
          "sha256": "d95f7097f9f455885b915cf90dee4465b8c56bee92abe59beb34a03926f46eb5"
        },
        "downloads": 13,
        "filename": "FIFOStr-1.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "7508770c1b9b2264d332e8aa745ebf6e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15632,
        "upload_time": "2017-03-30T21:36:34",
        "url": "https://files.pythonhosted.org/packages/df/7b/e259eb789f5de2137b4e9443cd9651c8057fa71676f2793c5b735421f554/FIFOStr-1.1.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7508770c1b9b2264d332e8aa745ebf6e",
        "sha256": "d95f7097f9f455885b915cf90dee4465b8c56bee92abe59beb34a03926f46eb5"
      },
      "downloads": 13,
      "filename": "FIFOStr-1.1.9.tar.gz",
      "has_sig": false,
      "md5_digest": "7508770c1b9b2264d332e8aa745ebf6e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 15632,
      "upload_time": "2017-03-30T21:36:34",
      "url": "https://files.pythonhosted.org/packages/df/7b/e259eb789f5de2137b4e9443cd9651c8057fa71676f2793c5b735421f554/FIFOStr-1.1.9.tar.gz"
    }
  ]
}