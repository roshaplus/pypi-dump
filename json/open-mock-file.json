{
  "info": {
    "author": "Pawel",
    "author_email": "inne.poczta@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "# Open File Mock\n\n## Description\nThis library contains object, which can be used during mocking files in tests. Features:\n\n* You can register different actions (provide different objects for different paths) for different paths\n* You can add content, which will be\n* You can select behavior for paths, which is not registered. Supported behaviors:\n    * Raise FileNotFoundError exception (default behavior)\n    * Return original file from filesystem\n    * Return mock object\n\n## Install\nIt can be installed with following command:\n\n`pip install open-mock-file`\n\n\n## Usage:\n\n### Examples\n\nMock open first file with custom object, second one with string data and raise FileNotFoundError for not registered path:\n\n```python\nfrom unittest.mock import patch\nfrom open_file_mock.mock_open import MockOpen\n\n\nclass FileObject:\n    def __init__(self, data):\n        self.data = data\n\n    def read(self, *args, **kwargs):\n        return self.data\n\n    def write(self, data, *args, **kwargs):\n        self.data = data\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        pass\n\n\nwith patch('builtins.open', new_callable=MockOpen) as open_mock:\n    open_mock.register_object_for_path(path='/tmp/f1', obj=FileObject('Some data'))\n    open_mock.set_read_data_for(path='/tmp/f2', data='file2 data')\n    with open('/tmp/f1') as f1:\n        print(f1.read())\n        f1.write('Other data')\n        print(f1.read())\n        print('----------------------')\n\n    with open('/tmp/f2') as f2:\n        print(f2.read())\n        print('----------------------')\n\n    open('/etc/hostname')\n```\n\n**output:**\n```\nSome data\nOther data\n----------------------\nfile2 data\n----------------------\nTraceback (most recent call last):\n...\nFileNotFoundError: File /etc/hostname not found in mock function\n```\n\nSet default behavior (for not registered paths) to return original file:\n\n```python\nfrom unittest.mock import patch, MagicMock\nfrom open_file_mock.mock_open import MockOpen, DEFAULTS_ORIGINAL\n\nwith patch('builtins.open', new_callable=MockOpen) as open_mock:\n    open_mock.default_behavior = DEFAULTS_ORIGINAL\n    open_mock.register_object_for_path(path='/tmp/f1', obj=MagicMock())\n    with open('/tmp/f1') as f1:\n        print(f1.read())\n        print('----------------------')\n\n    with open('/etc/hostname') as f2:\n        print(f2.read())\n        print('----------------------')\n\n```\n\n**output:**\n```\n<MagicMock name='mock.__enter__().read()' id='...'>\n----------------------\nmyhostname\n\n----------------------\n\n```\n\nSet default behavior to return new mock:\n\n```python\nfrom unittest.mock import patch\nfrom open_file_mock.mock_open import MockOpen, DEFAULTS_MOCK\n\nwith patch('builtins.open', new_callable=MockOpen) as open_mock:\n    open_mock.default_behavior = DEFAULTS_MOCK\n    open_mock.set_read_data_for('/tmp/f1', 'QWERTY')\n    with open('/tmp/f1') as f1:\n        print(f1.read())\n        print('----------------------')\n\n    with open('/etc/hostname') as f2:\n        print(f2.read())\n        print('----------------------')\n\n```\n\n**output:**\n```\nQWERTY\n----------------------\n<MagicMock name='mock.__enter__().read()' id='...'>\n```\n\nYoy can get registered object with *get_object_for_path* method:\n\n```python\nfrom unittest.mock import patch\nfrom open_file_mock.mock_open import MockOpen\n\n\nclass FileObject:\n    def __init__(self, data):\n        self.data = data\n\n    def read(self, *args, **kwargs):\n        return self.data\n\n    def write(self, data, *args, **kwargs):\n        self.data = data\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        pass\n\n\nwith patch('builtins.open', new_callable=MockOpen) as open_mock:\n    open_mock.register_object_for_path(path='/tmp/f1', obj=FileObject('Some data'))\n    open_mock.set_read_data_for(path='/tmp/f2', data='file2 data')\n    with open('/tmp/f1') as f1:\n        print(f1.read())\n        print('----------------------')\n\n    print(open_mock.get_object_for_path('/tmp/f1'))\n\n```\n**output:**\n```\nSome data\n----------------------\n<__main__.FileObject object at ...>\n```\n\n### Object methods:\n* **register_object_for_path(path, obj)** - allow to register new object for provided path. Can be used once for particular path\n* **update_object_for_path(path, obj)** - update registered path or create new mapping if not exists\n* **unregister_path(path)** - remove path mapping\n* **set_read_data_for(path, data)** - set data which will be returned of file read\n* **get_object_for_path(path)** - returns object registered for path. If mapping not exists, raises KeyError\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/PawelJ-PL/open-file-mock",
    "keywords": "Python mock open file",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "open-mock-file",
    "platform": "",
    "project_url": "https://pypi.org/project/open-mock-file/",
    "release_url": "https://pypi.org/project/open-mock-file/1.0.1/",
    "requires_dist": [
      "coverage; extra == 'test'"
    ],
    "requires_python": ">=3",
    "summary": "Smart object for mocking open file calls, depends on file path",
    "version": "1.0.1"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "19bc9d15435a34258a368507c484fc52",
          "sha256": "a2efc19f94929e402239bae9225de9143b88638a6676a2ff353be2d8816e73eb"
        },
        "downloads": 0,
        "filename": "open_mock_file-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19bc9d15435a34258a368507c484fc52",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 7452,
        "upload_time": "2017-09-25T18:20:55",
        "url": "https://files.pythonhosted.org/packages/b0/00/285a18ba7619c7b6047d84fb26b169bfa1a43f3a432d3173133eac4ce8b6/open_mock_file-1.0.0-py3-none-any.whl"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "60dafbdbaea90b2d9b695213e8a5680b",
          "sha256": "3e83fb294587085ae61b56c6cce97e2a964c7639eff066768bf6612e741095fe"
        },
        "downloads": 0,
        "filename": "open_mock_file-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "60dafbdbaea90b2d9b695213e8a5680b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 7454,
        "upload_time": "2017-09-25T18:24:32",
        "url": "https://files.pythonhosted.org/packages/69/f8/301f3a94cb7b5bd97ea14a9fd602ee452ab230a0220b5dd7466382618710/open_mock_file-1.0.1-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "60dafbdbaea90b2d9b695213e8a5680b",
        "sha256": "3e83fb294587085ae61b56c6cce97e2a964c7639eff066768bf6612e741095fe"
      },
      "downloads": 0,
      "filename": "open_mock_file-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "60dafbdbaea90b2d9b695213e8a5680b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 7454,
      "upload_time": "2017-09-25T18:24:32",
      "url": "https://files.pythonhosted.org/packages/69/f8/301f3a94cb7b5bd97ea14a9fd602ee452ab230a0220b5dd7466382618710/open_mock_file-1.0.1-py3-none-any.whl"
    }
  ]
}