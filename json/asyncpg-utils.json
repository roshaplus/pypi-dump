{
  "info": {
    "author": "Allisson Azevedo",
    "author_email": "allisson@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "=============\nasyncpg-utils\n=============\n\n|TravisCI Build Status| |Coverage Status| |Requirements Status| |Version|\n\n----\n\nUtilities for Asyncpg.\n\n\nHow to install\n==============\n\n.. code:: shell\n\n    pip install asyncpg-utils\n\n\nHow to Use\n==========\n\nDatabase\n--------\n\n.. code:: python\n\n    # database.py\n    import asyncio\n    from datetime import date\n\n    from asyncpg_utils.databases import Database\n\n    loop = asyncio.get_event_loop()\n    database = Database('postgresql://postgres:postgres@localhost/asyncpg-utils')\n\n\n    async def create_table():\n        conn = await database.get_connection()\n        await conn.execute(\n            \"\"\"\n            CREATE TABLE IF NOT EXISTS users(\n                id serial PRIMARY KEY,\n                name text,\n                dob date\n            )\n            \"\"\"\n        )\n        await conn.close()\n        return True\n\n\n    async def insert_row(data):\n        return await database.insert('users', data)\n\n\n    async def query_all():\n        return await database.query(\n            \"\"\"\n            SELECT * FROM users\n            \"\"\"\n        )\n\n\n    async def query_one():\n        return await database.query_one(\n            \"\"\"\n            SELECT * FROM users\n            WHERE name = $1\n            \"\"\",\n            'Jane Doe'\n        )\n\n\n    async def main():\n        print('create_table users, {!r}'.format(await create_table()))\n        print('insert row, {!r}'.format(await insert_row({'name': 'John Doe', 'dob': date(2000, 1, 1)})))\n        print('insert row, {!r}'.format(await insert_row({'name': 'Jane Doe', 'dob': date(2000, 1, 1)})))\n        print('query all results, {!r}'.format(await query_all()))\n        print('query one result, {!r}'.format(await query_one()))\n\n    loop.run_until_complete(main())\n\n.. code:: shell\n\n    # python database.py\n    create_table users, True\n    insert row, <Record id=1 name='John Doe' dob=datetime.date(2000, 1, 1)>\n    insert row, <Record id=2 name='Jane Doe' dob=datetime.date(2000, 1, 1)>\n    query all results, [<Record id=1 name='John Doe' dob=datetime.date(2000, 1, 1)>, <Record id=2 name='Jane Doe' dob=datetime.date(2000, 1, 1)>]\n    query one result, <Record id=2 name='Jane Doe' dob=datetime.date(2000, 1, 1)>\n\nPoolDatabase\n------------\n\n.. code:: python\n\n    # database_pool.py\n    import asyncio\n    from datetime import date\n\n    from asyncpg_utils.databases import PoolDatabase\n\n    loop = asyncio.get_event_loop()\n    database = PoolDatabase('postgresql://postgres:postgres@localhost/asyncpg-utils')\n\n\n    async def create_table():\n        conn = await database.get_connection()\n        await conn.execute(\n            \"\"\"\n            CREATE TABLE IF NOT EXISTS users(\n                id serial PRIMARY KEY,\n                name text,\n                dob date\n            )\n            \"\"\"\n        )\n        await conn.close()\n        return True\n\n\n    async def insert_row(data):\n        return await database.insert('users', data)\n\n\n    async def query_all():\n        return await database.query(\n            \"\"\"\n            SELECT * FROM users\n            \"\"\"\n        )\n\n\n    async def query_one():\n        return await database.query_one(\n            \"\"\"\n            SELECT * FROM users\n            WHERE name = $1\n            \"\"\",\n            'Jane Doe'\n        )\n\n\n    async def main():\n        print('create_table users, {!r}'.format(await create_table()))\n        print('insert row, {!r}'.format(await insert_row({'name': 'John Doe', 'dob': date(2000, 1, 1)})))\n        print('insert row, {!r}'.format(await insert_row({'name': 'Jane Doe', 'dob': date(2000, 1, 1)})))\n        print('query all results, {!r}'.format(await query_all()))\n        print('query one result, {!r}'.format(await query_one()))\n\n    loop.run_until_complete(main())\n\n.. code:: shell\n\n    # python database_pool.py\n    create_table users, True\n    insert row, <Record id=1 name='John Doe' dob=datetime.date(2000, 1, 1)>\n    insert row, <Record id=2 name='Jane Doe' dob=datetime.date(2000, 1, 1)>\n    query all results, [<Record id=1 name='John Doe' dob=datetime.date(2000, 1, 1)>, <Record id=2 name='Jane Doe' dob=datetime.date(2000, 1, 1)>]\n    query one result, <Record id=2 name='Jane Doe' dob=datetime.date(2000, 1, 1)>\n\nTableManager\n------------\n\n.. code:: python\n\n    # table_manager.py\n    import asyncio\n    from datetime import date\n\n    from asyncpg_utils.databases import Database\n    from asyncpg_utils.managers import TableManager\n\n    loop = asyncio.get_event_loop()\n    database = Database('postgresql://postgres:postgres@localhost/asyncpg-utils')\n    table_manager = TableManager(database, 'users', pk_field='id', hooks=None)\n    user_data = {\n        'name': 'Allisson',\n        'dob': date(1983, 2, 9)\n    }\n\n\n    async def create_table():\n        conn = await database.get_connection()\n        await conn.execute(\n            \"\"\"\n            CREATE TABLE IF NOT EXISTS users(\n                id serial PRIMARY KEY,\n                name text,\n                dob date\n            )\n            \"\"\"\n        )\n        await conn.close()\n        return True\n\n\n    async def table_manager_create():\n        print('table_manager.create, row={!r}'.format(await table_manager.create(user_data)))\n\n\n    async def table_manager_list():\n        print('table_manager.list, rows={!r}'.format(await table_manager.list()))\n        print('table_manager.list, only_name_field, rows={!r}'.format(await table_manager.list(fields=['name'])))\n        print('table_manager.list, filter_by_id, rows={!r}'.format(await table_manager.list(filters={'id': 999999})))\n        print('table_manager.list, order_by=name, order_by_sort=ASC, rows={!r}'.format(await table_manager.list(order_by='name', order_by_sort='ASC')))\n        print('table_manager.list, count=True, rows={!r}'.format(await table_manager.list(count=True)))\n        print('table_manager.list, limit=1, offset=0, rows={!r}'.format(await table_manager.list(limit=1, offset=0)))\n\n\n    async def table_manager_detail():\n        print('table_manager.detail, row={!r}'.format(await table_manager.detail(1)))\n        print('table_manager.detail, only_name_field, row={!r}'.format(await table_manager.detail(1, fields=['name'])))\n\n\n    async def table_manager_update():\n        user_data['name'] = 'John Doe'\n        print('table_manager.update, row={!r}'.format(await table_manager.update(1, user_data)))\n\n\n    async def table_manager_delete():\n        print('table_manager.delete, result={!r}'.format(await table_manager.delete(1)))\n\n\n    async def main():\n        print('create_table users, {!r}'.format(await create_table()))\n        await table_manager_create()\n        await table_manager_list()\n        await table_manager_detail()\n        await table_manager_update()\n        await table_manager_delete()\n\n    loop.run_until_complete(main())\n\n.. code:: shell\n\n    # python table_manager.py\n    create_table users, True\n    table_manager.create, row=<Record id=1 name='Allisson' dob=datetime.date(1983, 2, 9)>\n    table_manager.list, rows=[<Record id=1 name='Allisson' dob=datetime.date(1983, 2, 9)>]\n    table_manager.list, only_name_field, rows=[<Record name='Allisson'>]\n    table_manager.list, filter_by_id, rows=[]\n    table_manager.list, order_by=name, order_by_sort=ASC, rows=[<Record id=1 name='Allisson' dob=datetime.date(1983, 2, 9)>]\n    table_manager.list, count=True, rows=[<Record count=1>]\n    table_manager.list, limit=1, offset=0, rows=[<Record id=1 name='Allisson' dob=datetime.date(1983, 2, 9)>]\n    table_manager.detail, row=<Record id=1 name='Allisson' dob=datetime.date(1983, 2, 9)>\n    table_manager.detail, only_name_field, row=<Record name='Allisson'>\n    table_manager.update, row=<Record id=1 name='John Doe' dob=datetime.date(1983, 2, 9)>\n    table_manager.delete, result=True\n\nTable Manager Hook\n------------------\n\n.. code:: python\n\n    # table_manager_hook.py\n    import asyncio\n    from datetime import date\n\n    from asyncpg_utils.databases import Database\n    from asyncpg_utils.managers import AbstractHook, TableManager\n\n    loop = asyncio.get_event_loop()\n    database = Database('postgresql://postgres:postgres@localhost/asyncpg-utils')\n    user_data = {\n        'name': 'Allisson',\n        'dob': date(1983, 2, 9)\n    }\n\n\n    class TestHook(AbstractHook):\n        async def pre_create(self, data):\n            print('pre_create, data={!r}'.format(data))\n\n        async def post_create(self, row):\n            print('post_create, row={!r}'.format(row))\n\n        async def pre_list(self, fields, filters, order_by, order_by_sort, count, limit, offset):\n            print('pre_list, fields={!r}, filters={!r}, order_by={!r}, order_by_sort={!r}, count={!r}, limit={!r}, offset={!r}'.format(fields, filters, order_by, order_by_sort, count, limit, offset))\n\n        async def post_list(self, rows):\n            print('post_list, rows={!r}'.format(rows))\n\n        async def pre_detail(self, pk, pk_field, fields):\n            print('pre_detail, pk={!r}, pk_field={!r}, fields={!r}'.format(pk, pk_field, fields))\n\n        async def post_detail(self, row):\n            print('post_detail, row={!r}'.format(row))\n\n        async def pre_update(self, pk, data):\n            print('pre_update, pk={!r}, data={!r}'.format(pk, data))\n\n        async def post_update(self, row):\n            print('post_update, row={!r}'.format(row))\n\n        async def pre_delete(self, pk):\n            print('pre_delete, pk={!r}'.format(pk))\n\n        async def post_delete(self, pk):\n            print('post_delete, pk={!r}'.format(pk))\n\n\n    table_manager = TableManager(database, 'users', pk_field='id', hooks=(TestHook,))\n\n\n    async def create_table():\n        conn = await database.get_connection()\n        await conn.execute(\n            \"\"\"\n            CREATE TABLE IF NOT EXISTS users(\n                id serial PRIMARY KEY,\n                name text,\n                dob date\n            )\n            \"\"\"\n        )\n        await conn.close()\n        return True\n\n\n    async def main():\n        print('create_table users, {!r}'.format(await create_table()))\n        await table_manager.create(user_data)\n        await table_manager.list()\n        await table_manager.detail(1)\n        user_data['name'] = 'John Doe'\n        await table_manager.update(1, user_data)\n        await table_manager.delete(1)\n\n\n    loop.run_until_complete(main())\n\n.. code:: shell\n\n    # python table_manager_hook.py\n    create_table users, True\n    pre_create, data={'name': 'Allisson', 'dob': datetime.date(1983, 2, 9)}\n    post_create, row=<Record id=1 name='Allisson' dob=datetime.date(1983, 2, 9)>\n    pre_list, fields=None, filters={}, order_by=None, order_by_sort='ASC', count=False, limit=None, offset=None\n    post_list, rows=[<Record id=1 name='Allisson' dob=datetime.date(1983, 2, 9)>]\n    pre_detail, pk=1, pk_field='id', fields=None\n    post_detail, row=<Record id=1 name='Allisson' dob=datetime.date(1983, 2, 9)>\n    pre_update, pk=1, data={'name': 'John Doe', 'dob': datetime.date(1983, 2, 9)}\n    post_update, row=<Record id=1 name='John Doe' dob=datetime.date(1983, 2, 9)>\n    pre_delete, pk=1\n    post_delete, pk=1\n\nCheck `https://github.com/allisson/asyncpg-utils/tree/master/examples <https://github.com/allisson/asyncpg-utils/tree/master/examples>`_ for more code examples.\n\n.. |TravisCI Build Status| image:: https://travis-ci.org/allisson/asyncpg-utils.svg?branch=master\n   :target: https://travis-ci.org/allisson/asyncpg-utils\n.. |Coverage Status| image:: https://codecov.io/gh/allisson/asyncpg-utils/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/allisson/asyncpg-utils\n.. |Requirements Status| image:: https://requires.io/github/allisson/asyncpg-utils/requirements.svg?branch=master\n   :target: https://requires.io/github/allisson/asyncpg-utils/requirements/?branch=master\n.. |Version| image:: https://badge.fury.io/py/asyncpg-utils.svg\n    :target: https://badge.fury.io/py/asyncpg-utils\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/allisson/asyncpg-utils",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asyncpg-utils",
    "platform": "",
    "project_url": "https://pypi.org/project/asyncpg-utils/",
    "release_url": "https://pypi.org/project/asyncpg-utils/0.5.0/",
    "requires_dist": [
      "Jinja2 (>=2.10)",
      "asyncpg (>=0.14.0)"
    ],
    "requires_python": "",
    "summary": "Utilities for Asyncpg",
    "version": "0.5.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bc39a2a44874b3427d2e7b5c318215a8",
          "sha256": "7932e5209aebcba6245f69e3dbde31e7ccacf31b841476b332216ac822b5939c"
        },
        "downloads": -1,
        "filename": "asyncpg_utils-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bc39a2a44874b3427d2e7b5c318215a8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 4848,
        "upload_time": "2018-01-02T13:44:20",
        "url": "https://files.pythonhosted.org/packages/ba/f1/b7c08d8e3604e473db19e5e9efb29732f512d1d0c5bbc87d032c28adc1d3/asyncpg_utils-0.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b92069eee46e21f30f4e1ec9ebd48ea6",
          "sha256": "7e69665afa63bd847c8cd5e4dc2a85fed80606884bd4e0029cd9ea55502f6f9b"
        },
        "downloads": -1,
        "filename": "asyncpg-utils-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b92069eee46e21f30f4e1ec9ebd48ea6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4012,
        "upload_time": "2018-01-02T13:44:23",
        "url": "https://files.pythonhosted.org/packages/30/45/8f51841e323f7caef7226a171e284a61cc3b5922d51a8107f3edd0bc9f44/asyncpg-utils-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "350557d8068a4c2edf4ab50817006a08",
          "sha256": "e37495d4dd1a9554f34d6e87e3e4b4d2349113be3559a7e1966397ecb0010297"
        },
        "downloads": -1,
        "filename": "asyncpg_utils-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "350557d8068a4c2edf4ab50817006a08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 7315,
        "upload_time": "2018-01-11T00:37:24",
        "url": "https://files.pythonhosted.org/packages/58/90/95085dd013e6e6f41b54405a80b127b9af00e903ecd10fc9e30709653563/asyncpg_utils-0.2.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e91fe36be72dbbdb83f2c96d75145d1c",
          "sha256": "b73d37ca9a229b1a5c76d662e54d821dab13570d0933044d34620b98f3f06f5a"
        },
        "downloads": -1,
        "filename": "asyncpg-utils-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e91fe36be72dbbdb83f2c96d75145d1c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6036,
        "upload_time": "2018-01-11T00:37:27",
        "url": "https://files.pythonhosted.org/packages/3a/aa/ba332da24549a309da2b5cb52e4b073fe938a3eb458f32de146af71c75f9/asyncpg-utils-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7e2f1303d935a9b518800a7761e8a1c7",
          "sha256": "564236d3127678e3ec27fed6ff93017a09d205b6caedba20c6afb2e76d2756e9"
        },
        "downloads": -1,
        "filename": "asyncpg_utils-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e2f1303d935a9b518800a7761e8a1c7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 7392,
        "upload_time": "2018-01-11T16:33:18",
        "url": "https://files.pythonhosted.org/packages/4d/7a/e2819588c1494e48bdd7f226f6f5735c5d67fae9d7906fac41824b249a07/asyncpg_utils-0.2.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d5b36b7e413972955f0a6d8b4f18489c",
          "sha256": "bd4bec4af8dcb0254edc33a54830b268d561bbc0e27936ad1fbde58af5cbbde7"
        },
        "downloads": -1,
        "filename": "asyncpg-utils-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d5b36b7e413972955f0a6d8b4f18489c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6125,
        "upload_time": "2018-01-11T16:33:19",
        "url": "https://files.pythonhosted.org/packages/ca/95/4a897b19a209a3e51f235e830927fe9b4876b9e0c37b356ab5d23a243b31/asyncpg-utils-0.2.1.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5bd834fa3760e0aeabf9679d108b8cec",
          "sha256": "047caa3a8d66ddb1b401eb1ee12ea0c69a7f472d0e2d6c60d5a267b2615b0a29"
        },
        "downloads": -1,
        "filename": "asyncpg_utils-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5bd834fa3760e0aeabf9679d108b8cec",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 7866,
        "upload_time": "2018-01-11T20:44:40",
        "url": "https://files.pythonhosted.org/packages/2c/a3/c57a69e76b4e970e2ccac7e58706018b96d8d5a348ee6703fbfff373def3/asyncpg_utils-0.3.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b3230b7b7a81a18427b2687d4107de76",
          "sha256": "e7864255b43d7ba782dff54495af085959ae855b8671f539a4044612b8617a47"
        },
        "downloads": -1,
        "filename": "asyncpg-utils-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b3230b7b7a81a18427b2687d4107de76",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6393,
        "upload_time": "2018-01-11T20:44:48",
        "url": "https://files.pythonhosted.org/packages/a4/f2/fb2a80a0d375acbea7e591e670d17599cfcc19990207d87bb4d8e7d780c4/asyncpg-utils-0.3.0.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a72e1491aba37feec53f8c3070ccd79c",
          "sha256": "fb9278af82ff557344c5429a0ddf6069a1da535fc2dfa7aa9137a15cd684617f"
        },
        "downloads": -1,
        "filename": "asyncpg_utils-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a72e1491aba37feec53f8c3070ccd79c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 7982,
        "upload_time": "2018-01-11T21:19:20",
        "url": "https://files.pythonhosted.org/packages/a0/43/642724e0c1ea4d6b4023f91985db49c9b658f27a3980b6c3729b1612ebf3/asyncpg_utils-0.4.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9490ad85c411ebd41bdfc8b1c4d80374",
          "sha256": "f227463ee44919427783d1796b0207c377833a5163a358acc1907fe01a83443c"
        },
        "downloads": -1,
        "filename": "asyncpg-utils-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9490ad85c411ebd41bdfc8b1c4d80374",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6480,
        "upload_time": "2018-01-11T21:19:23",
        "url": "https://files.pythonhosted.org/packages/96/d3/51d054de859ea22d7e1f5096ddf32d59773926dfc8ae3d0081ab4401922d/asyncpg-utils-0.4.0.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b46c555cdd756ab1d89526a9cb278c8e",
          "sha256": "998c34b40dc0911852f577b4acafa07b961012af46c03444e89ff3403b338cf9"
        },
        "downloads": -1,
        "filename": "asyncpg_utils-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b46c555cdd756ab1d89526a9cb278c8e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 8034,
        "upload_time": "2018-01-12T15:08:42",
        "url": "https://files.pythonhosted.org/packages/50/e4/e7d022e3d13075821e6c8c2da90636b5087bb07fa25237fa72d41a4b5290/asyncpg_utils-0.4.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c60287bcb74cdfe3ef6caf738009a6a2",
          "sha256": "04b793e173a78ca048ae5d21d74769df51157ca67143ef831c8ef8bb033388c2"
        },
        "downloads": -1,
        "filename": "asyncpg-utils-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c60287bcb74cdfe3ef6caf738009a6a2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6526,
        "upload_time": "2018-01-12T15:08:43",
        "url": "https://files.pythonhosted.org/packages/73/40/be1234db4fde44b3e2343e46b9d2b522f9d3330f24fe360770818ce671a7/asyncpg-utils-0.4.1.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1b8c86682385118b08477d60f3be6d08",
          "sha256": "7c79d4c083b67fa62367332ba489e393bb08dbfea4bb32dffedb8ee44401af07"
        },
        "downloads": -1,
        "filename": "asyncpg_utils-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b8c86682385118b08477d60f3be6d08",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 8372,
        "upload_time": "2018-01-15T11:40:31",
        "url": "https://files.pythonhosted.org/packages/eb/63/6bb3f2bc51bdc55384ae0cebe95c4f1709d0f2309833b3b8d472b81ca90d/asyncpg_utils-0.5.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "efb4e39e76a4882d4282f6ab16c0ca45",
          "sha256": "5140b0506b167c603977d316cc647291ef421d53cb165e855a79e169b5c8ab23"
        },
        "downloads": -1,
        "filename": "asyncpg-utils-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "efb4e39e76a4882d4282f6ab16c0ca45",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6770,
        "upload_time": "2018-01-15T11:40:32",
        "url": "https://files.pythonhosted.org/packages/27/7f/91fcff0518932a472d72b3d91f529cc79c61d96de210e85465add9de0f0b/asyncpg-utils-0.5.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1b8c86682385118b08477d60f3be6d08",
        "sha256": "7c79d4c083b67fa62367332ba489e393bb08dbfea4bb32dffedb8ee44401af07"
      },
      "downloads": -1,
      "filename": "asyncpg_utils-0.5.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1b8c86682385118b08477d60f3be6d08",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 8372,
      "upload_time": "2018-01-15T11:40:31",
      "url": "https://files.pythonhosted.org/packages/eb/63/6bb3f2bc51bdc55384ae0cebe95c4f1709d0f2309833b3b8d472b81ca90d/asyncpg_utils-0.5.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "efb4e39e76a4882d4282f6ab16c0ca45",
        "sha256": "5140b0506b167c603977d316cc647291ef421d53cb165e855a79e169b5c8ab23"
      },
      "downloads": -1,
      "filename": "asyncpg-utils-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "efb4e39e76a4882d4282f6ab16c0ca45",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6770,
      "upload_time": "2018-01-15T11:40:32",
      "url": "https://files.pythonhosted.org/packages/27/7f/91fcff0518932a472d72b3d91f529cc79c61d96de210e85465add9de0f0b/asyncpg-utils-0.5.0.tar.gz"
    }
  ]
}