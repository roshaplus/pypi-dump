{
  "info": {
    "author": "Prasanth Nair",
    "author_email": "prasanthhn@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Astronomy",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "Line identification plots using Matplotlib\n==========================================\n\n.. _lineid_plot: http://idlastro.gsfc.nasa.gov/ftp/pro/plot/lineid_plot.pro\n.. _IDL Astronomy User's Library: http://idlastro.gsfc.nasa.gov/\n.. _pip: http://pypi.python.org/pypi/pip \n\nManually labeling features in a crowed plot can be very time consuming.\nFunctions in this module can be used to automatically place labels without the\nlabels overlapping each other. This is useful, for example, in creating plots of\na spectrum with spectral lines identified with labels.\n\n\nInstallation\n============\n\nUse `pip`_::\n\n  $ pip install lineid_plot\n  \nExamples\n========\n\nDetailed examples are provided at http://phn.github.io/lineid_plot .\n\nA basic plot can be created by calling the function\n``plot_line_ids()``, and passing labels and x-axis locations of\nfeatures.\n\n.. image:: simple_plot.png?raw=true\n   :scale: 75%\n\n.. code-block:: python\n\n   >>> import numpy as np\n   >>> from matplotlib import pyplot as plt\n   >>> import lineid_plot\n\n   >>> wave = 1240 + np.arange(300) * 0.1\n   >>> flux = np.random.normal(size=300)\n\n   >>> line_wave = [1242.80, 1260.42, 1264.74, 1265.00, 1265.2, 1265.3, 1265.35]\n   >>> line_label1 = ['N V', 'Si II', 'Si II', 'Si II', 'Si II', 'Si II', 'Si II']\n\n   >>> lineid_plot.plot_line_ids(wave, flux, line_wave, line_label1)\n   >>> plt.show()\n\n\nThe ``plot_line_ids()`` function also accepts Axes and/or Figure\ninstances where labels are to be draw. \n\n.. image:: multi_axes.png?raw=true\n   :scale: 75%\n\n.. code-block:: python\n\n  >>> import numpy as np\n  >>> from matplotlib import pyplot as plt\n  >>> import lineid_plot\n   \n  >>> wave = 1240 + np.arange(300) * 0.1\n  >>> flux = np.random.normal(size=300)\n  >>> line_wave = [1242.80, 1260.42, 1264.74, 1265.00, 1265.2, 1265.3, 1265.35]\n  >>> line_flux = np.interp(line_wave, wave, flux)\n  >>> line_label1 = ['N V', 'Si II', 'Si II', 'Si II', 'Si II', 'Si II', 'Si II']\n  >>> label1_sizes = np.array([12, 12, 12, 12, 12, 12, 12])\n   \n  >>> fig = plt.figure(1)\n  \n  >>> ax = fig.add_axes([0.1,0.06, 0.85, 0.35])\n  >>> ax.plot(wave, flux)\n  >>> lineid_plot.plot_line_ids(wave, flux, line_wave, line_label1, ax=ax)\n\n  >>> ax1 = fig.add_axes([0.1, 0.55, 0.85, 0.35])\n  >>> ax1.plot(wave, flux)\n  >>> lineid_plot.plot_line_ids(wave, flux, line_wave, line_label1, ax=ax1)\n\n\nThe label text and the short line extending down from the text are created using\nthe ``annotate`` method of a matplotlib Axes object. The longer line extending\ndown to a point in the spectrum is created using the ``plot`` method on a\nmatplotlib Axes instance. The ``plot_line_ids`` function accepts keywords to\npass directly to these methods, ``annotate_kwargs`` and ``plot_kwargs``,\nrespectively. But the best method for customizing boxes and lines is by\nobtaining a reference to it as shown in another example below.\n\n.. image:: annotate_and_plot_kwargs.png?raw=true\n   :scale: 75%\n\n.. code-block:: python\n\n   >>> import numpy as np\n   >>> from matplotlib import pyplot as plt\n   >>> import lineid_plot\n\n   >>> wave = 1240 + np.arange(300) * 0.1\n   >>> flux = np.random.normal(size=300)\n\n   >>> line_wave = [1242.80, 1260.42, 1264.74, 1265.00, 1265.2, 1265.3, 1265.35]\n   >>> line_label1 = ['N V', 'Si II', 'Si II', 'Si II', 'Si II', 'Si II', 'Si II']\n\n   >>> ak = lineid_plot.initial_annotate_kwargs()\n   >>> ak \n   {'arrowprops': {'arrowstyle': '->', 'relpos': (0.5, 0.0)},\n    'horizontalalignment': 'center',\n    'rotation': 90,\n    'textcoords': 'data',\n    'verticalalignment': 'center',\n    'xycoords': 'data'}\n   >>> ak['arrowprops']['arrowstyle'] = \"->\"\n   \n   >>> pk = lineid_plot.initial_plot_kwargs()\n   >>> pk\n   {'color': 'k', 'linestyle': '--'}\n   >>> pk['color'] = \"red\"\n   \n   >>> lineid_plot.plot_line_ids(wave, flux, line_wave, line_label1, annotate_kwargs=ak, plot_kwargs=pk)\n   >>> plt.show()\n\n\nThe boxes and the lines extending to the flux level both have their label set to\na unique value. If the input contains identical labels then the function will\nconstruct unique lables by appending text. These can be used to quickly identify\nthem.\n\n.. code-block:: python\n\n  >>> for i in ax.texts:\n     ....:     print i.get_label()\n     ....:     \n  N V\n  Si II_num_1\n  Si II_num_2\n  Si II_num_3\n  Si II_num_4\n  Si II_num_5\n  Si II_num_6\n  >>> for i in ax.lines:\n     ....:     print i.get_label()\n     ....:     \n  _line0\n  N V_line\n  Si II_num_1_line\n  Si II_num_2_line\n  Si II_num_3_line\n  Si II_num_4_line\n  Si II_num_5_line\n  Si II_num_6_line\n\n\nThe label ``_line0`` corresponds to the data plot and was assigned by\nMatplotlib.\n\nWe can get a reference to an annotation box or a line using the ``Axes.findobj``\nmethod. Once we get a reference we can change its properties. This is the best\nmethod for customizing boxes and lines.\n\n\n.. image:: customize_box_and_lines.png?raw=true\n   :scale: 75%\n\n.. code-block:: python\n\n   >>> import numpy as np\n   >>> from matplotlib import pyplot as plt\n   >>> import lineid_plot\n\n   >>> wave = 1240 + np.arange(300) * 0.1\n   >>> flux = np.random.normal(size=300)\n\n   >>> line_wave = [1242.80, 1260.42, 1264.74, 1265.00, 1265.2, 1265.3, 1265.35]\n   >>> line_label1 = ['N V', 'Si II', 'Si II', 'Si II', 'Si II', 'Si II', 'Si II']\n\n   >>> fig, ax = lineid_plot.plot_line_ids(wave, flux, line_wave, line_label1)\n\n   >>> b = ax.findobj(match=lambda x: x.get_label() == 'Si II_num_1')[0]\n   >>> b.set_rotation(0)\n   >>> b.set_text(\"Si II$\\lambda$1260.42\")\n   \n   >>> line = ax.findobj(match=lambda x: x.get_label() == 'Si II_num_1_line')[0]\n   >>> line.set_color(\"red\")\n   >>> line.set_linestyle(\"-\")\n\n   >>> plt.show()\n\nAdding a label to lines can cause problems when using ``plt.legend()``: the\nlegend will include the lines drawn from text box to spectrum location. There\nare two ways of overcoming this. First is to provide explicit artists and texts\nto ``plt.legend()``. Second is to tell ``lineid_plot`` not to add these  labels\nby passing in ``add_label_to_artists=False``. Of-course, if we use the second\noption then we can't use the above method for finding text and lines.\n\n.. code-block:: python\n\n    fig, ax = lineid_plot.plot_line_ids(\n        wave, flux, line_wave, line_label1, max_iter=300, add_label_to_artists=False\n    )\n\nDetails\n=======\n\nThe placements are calculated using a simple, iterative algorithm adapted from\nthe procedure `lineid_plot`_ in the NASA `IDL Astronomy User's Library`_.\nMatplotlib makes most of the other computations, such as extracting width of\nlabel boxes, re-positioning them etc., very easy.\n\nThe main function in the module is ``plot_line_ids()``. Labeled plots can be\ncreated by passing the x and y coordinates, for example wavelength and flux,\nalong with the x coordinates of the features and their labels. The x coordinates\nare adjusted until the labels, of given size, do not overlap, or when the\niteration limit is reached.\n\nUsers can provide the Axes instance or the Figure instance on which plots are to\nbe made. If an Axes instance is provided, then the data is not plotted; only the\nlabels are marked. This allows the user to separate plotting from labeling. For\nexample, the user can create multiple Axes on a figure and then pass the Axes on\nwhich labels are to be marked. No changes are made to the existing layout.\n\nThe labels and a short line for each label are create using matplotlib's\n``Axes.annotate`` method. The longer lines extending down into the plot are\ncreated using matplotlib's ``Axes.plot`` method.\n\nThe y axis locations of labels and annotation points i.e., arrow tips, can also\nbe passed to the ``plot_line_ids()`` function. Minor changes can be passed using\nthe ``box_axes_space`` keyword, where as major changes can be passed using the\n``arrow_tip`` and ``box_loc`` keywords. The former is in figure fraction units\nand the latter two are in data coordinates. The latter two can be specified\nseparately for each label. This is very useful in crowded regions. These\nfeatures along with the ability to pass an Axes instance gives the program a lot\nof flexibility.\n\nAn extension line from the annotation point to the y data value at the location\nof the identification i.e., flux level at the line, is drawn by default. The\nflux at the line is calculated using linear interpolation. This can be turned\noff using the ``extend`` keyword. This keyword can be set separately for each\nfeature.\n\nThe boxes containing text label and the line extending down can be customized by\npaasing ``annotate_kwargs`` and ``plot_kwargs`` respectively. Use\n``initial_annotate_kwargs()`` and ``initial_plot_kwargs()`` to obtain the\ndefault dictionaries used. We can customize these dictionaries and pass them to\n``plot_line_ids``. Further customizations can be performed by obtaining a\nreference to the annotation or line and using the matplotlib API.\n\nThe ``plot_line_ids()`` function returns the Figure and Axes instances used.\nAdditional customizations, such as manual adjustments to positions, can be\ncarried out using these references. To easily identify the ojects, each label\nbox and extension line have its ``label`` property set to a string that depends\non the label text provided. Identifying the Matplotlib objects corresponding to\nthese and customizing them are made easy by the many features provided by\nMatplotlib.\n\nThe maximum number of iterations to use while calculating label positions can be\nsupplied using the ``max_iter`` keyword. The amount of adjustment to be made in\neach iteration and when to change the adjustment factor can also be supplied.\nThe defaults for these should be enough for most cases.\n\nLicense\n=======\n\nReleased under BSD; see http://www.opensource.org/licenses/bsd-license.php.\n\nCredits\n=======\n\nCode here is adapted from `lineid_plot`_ procedure in the \n`IDL Astronomy User's Library`_ (IDLASTRO) IDL code distributed by NASA. \n\nFor comments and suggestions, email to user prasanthhn in the gmail.com domain. \n\n\n..  LocalWords:  lineid IDL idlastro gsfc nasa\n\n\n",
    "docs_url": "https://pythonhosted.org/lineid_plot/",
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/phn/lineid_plot",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lineid_plot",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/lineid_plot/",
    "release_url": "https://pypi.org/project/lineid_plot/0.5/",
    "requires_python": "",
    "summary": "Automatic placement of labels in a plot.",
    "version": "0.5"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "87b59173a74a9c37ccb3a7cb772d0619",
          "sha256": "f1e41c4a809ae6eb2f95ca51bc9aaed105e1f3208951f3cef9a0107954bb24fa"
        },
        "downloads": 2749,
        "filename": "lineid_plot-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "87b59173a74a9c37ccb3a7cb772d0619",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6115,
        "upload_time": "2011-09-19T09:45:41",
        "url": "https://files.pythonhosted.org/packages/95/45/d74ffa6fce08ec47d88daa214c7a3286adf0e3657a6882e4470c5bb3eda6/lineid_plot-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "415cafefc5a22b140f4a5f2eeeefb58e",
          "sha256": "d8cbe1f26f44df5286a04c7c93eeae7ed2f737e1aeb04b3563c19de51b3ab94e"
        },
        "downloads": 3243,
        "filename": "lineid_plot-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "415cafefc5a22b140f4a5f2eeeefb58e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6135,
        "upload_time": "2011-10-14T12:37:30",
        "url": "https://files.pythonhosted.org/packages/9e/2d/79a6522945d1710964b9f49318899c2b9e833a35112811fc500275529dca/lineid_plot-0.2.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3e5b8c479d801369a443896d84e41273",
          "sha256": "54695a46e54fe2d6031e6ceca6dafd28a602ec8da4f139b66d7ca20e17d6a366"
        },
        "downloads": 1131,
        "filename": "lineid_plot-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3e5b8c479d801369a443896d84e41273",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6184,
        "upload_time": "2015-11-26T13:49:23",
        "url": "https://files.pythonhosted.org/packages/08/22/0467fc4ff251389a8a3b12d28107e428305131de70b0dafdb61bc7f1a1f7/lineid_plot-0.2.1.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "32e7121935c04c112115ef159be05885",
          "sha256": "cbcc68b5fd2f6b0127f895ab3403a49cdcc569dfef89aef7c6c519eba0461ed3"
        },
        "downloads": 390,
        "filename": "lineid_plot-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "32e7121935c04c112115ef159be05885",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10427,
        "upload_time": "2016-02-19T06:45:46",
        "url": "https://files.pythonhosted.org/packages/7f/0b/ef701281f8e4e6353a07733c158b39693a3f6bb61b3098b4553088a800e1/lineid_plot-0.3.tar.gz"
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "480595e8e2323dfea94426e6c5178897",
          "sha256": "2f46b77a630b638d10d0d4c7d463b9d10e124c64e6f1869e72fabd0208030176"
        },
        "downloads": 180,
        "filename": "lineid_plot-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "480595e8e2323dfea94426e6c5178897",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10940,
        "upload_time": "2016-12-02T15:03:53",
        "url": "https://files.pythonhosted.org/packages/9a/1a/11b6675694052da00893236f1d098345045edcec28d7a0b238fefb151945/lineid_plot-0.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "480595e8e2323dfea94426e6c5178897",
        "sha256": "2f46b77a630b638d10d0d4c7d463b9d10e124c64e6f1869e72fabd0208030176"
      },
      "downloads": 180,
      "filename": "lineid_plot-0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "480595e8e2323dfea94426e6c5178897",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10940,
      "upload_time": "2016-12-02T15:03:53",
      "url": "https://files.pythonhosted.org/packages/9a/1a/11b6675694052da00893236f1d098345045edcec28d7a0b238fefb151945/lineid_plot-0.5.tar.gz"
    }
  ]
}