{
  "info": {
    "author": "Jim Pivarski (DIANA-HEP)",
    "author_email": "pivarski@fnal.gov",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: MacOS",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Software Development",
      "Topic :: Utilities"
    ],
    "description": "Data analysts are often faced with a choice between speed and flexibility. Tabular data, such as an SQL table or CSV file, can be accessed quickly, which improves the question-and-answer nature of exploratory data analysis. Hierarchically nested data, such as JSON, expresses better the relationship between nested quantities. These relationships *can* be represented with separate, linked tables (i.e. `database normalization <https://en.wikipedia.org/wiki/Database_normalization>`_), but at the cost of complexity for the data analyst and the introduction of expensive joins (see `this question <https://stackoverflow.com/q/38831961/1623645>`_, which got me started on this project). Ideally, we want to perform calculations on JSON-like structures at the speed of SQL.\n\nTools that analyze tabular data get their performance primarily by laying out data in an intelligent way: computers can access contiguous data more quickly than separated data, whether loading from a disk to memory or from memory to the processor. Datasets with many attributes, of which only a few will be \n\n\n\n\n\nOAMap, short for Object-Array Mapping and intended\n\n\n\n\n      \nLarge datasets can be more compact and faster to access when they are laid out in columns (see `Apache Arrow <https://arrow.apache.org/>`_). Even hierarchically nested data can be presented this way, though converting the data between the columnar form and the object form can degrade performance. Non-hierarchical data (rectangular tables, such as an SQL table) can be accessed faster by not materializing rows (see `Apache Drill <https://drill.apache.org/docs/performance/>`_), but this is more complex for data containing variable-length objects, such as arbitrary-length lists.\n\nOAMap is a suite of tools for performing calculations in this way. The name stands for Object-Array-Map, in analogy with Object-Relational-Mapping (ORM) in relational databases. Pure Python calculations are considerably faster and more memory efficient when datasets are expressed in OAMaps, but the real power comes from *compiling* columized code. This toolset includes `extensions to Numba <http://numba.pydata.org/numba-doc/dev/extending/index.html>`_ that will compile your object-oriented code into native array manipulations. Generally, you'd use uncompiled Python for low latency exploration of the data and Numba-compiled functions for high throughput.\n\nOAMap only strictly depends on Numpy, but `Numba <http://numba.pydata.org/>`_ will accelerate it and `pyarrow <https://arrow.apache.org/docs/python/index.html>`_, `h5py <http://www.h5py.org/>`_, etc. provide hooks for converting data among various formats.",
    "docs_url": null,
    "download_url": "https://github.com/diana-hep/oamap/releases",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/diana-hep/oamap",
    "keywords": "",
    "license": "BSD 3-clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "oamap",
    "platform": "Any",
    "project_url": "https://pypi.org/project/oamap/",
    "release_url": "https://pypi.org/project/oamap/0.1.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Toolset for computing directly on hierarchically nested, columnar data, such as Apache Arrow.",
    "version": "0.1.3"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "66c561c5a405a26554cca28bd8d62c90",
          "sha256": "b9da8e4daa6fc2b558402bb2b9c71ec5edb7b00cc86c12c56626527836246cd8"
        },
        "downloads": -1,
        "filename": "oamap-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "66c561c5a405a26554cca28bd8d62c90",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31285,
        "upload_time": "2017-12-31T15:21:23",
        "url": "https://files.pythonhosted.org/packages/0b/f3/757cc9fb315fe60bfa99fe09f72ddaa1b3992599191cf66fadb930dcd5a4/oamap-0.1.0.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0193416e28cb42f32c2f88a933ab8c6d",
          "sha256": "c83ec7e903df0c8407e9df28519724418748f9b757eeeb424ce38eb1a91d76d1"
        },
        "downloads": -1,
        "filename": "oamap-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0193416e28cb42f32c2f88a933ab8c6d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31019,
        "upload_time": "2017-12-31T16:27:39",
        "url": "https://files.pythonhosted.org/packages/57/e5/1de71ae4b22a77220e8decda1bf12636b3a76f1b159900d8b6c1dc196d69/oamap-0.1.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0193416e28cb42f32c2f88a933ab8c6d",
        "sha256": "c83ec7e903df0c8407e9df28519724418748f9b757eeeb424ce38eb1a91d76d1"
      },
      "downloads": -1,
      "filename": "oamap-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0193416e28cb42f32c2f88a933ab8c6d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 31019,
      "upload_time": "2017-12-31T16:27:39",
      "url": "https://files.pythonhosted.org/packages/57/e5/1de71ae4b22a77220e8decda1bf12636b3a76f1b159900d8b6c1dc196d69/oamap-0.1.3.tar.gz"
    }
  ]
}