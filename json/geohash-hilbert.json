{
  "info": {
    "author": "Tammo Ippen",
    "author_email": "tammo.ippen@posteo.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "geohash-hilbert\n===============\n\n|Build Status| |Coverage Status| |Tested CPython Versions| |Tested PyPy\nVersions| |PyPi downloads/month| |PyPi version| |PyPi license|\n\nGeohash a lng/lat coordinate using hilbert space filling curves.\n\n.. code:: python\n\n    In [1]: import geohash_hilbert as ghh\n\n    In [2]: ghh.encode(6.957036, 50.941291)\n    Out[2]: 'Z7fe2GaIVO'\n\n    In [3]: ghh.decode('Z7fe2GaIVO')\n    Out[3]: (6.957036126405001, 50.941291032359004)\n\n    In [4]: ghh.decode_exactly('Z7fe2GaIVO')\n    Out[4]:\n    (6.957036126405001, 50.941291032359004,          # position\n     1.6763806343078613e-07, 8.381903171539307e-08)  # errors\n\n    In [5]: ghh.encode?\n    Signature: ghh.encode(lng, lat, precision=10, bits_per_char=6)\n    Docstring:\n    Encode a lng/lat position as a geohash using a hilbert curve\n\n    This function encodes a lng/lat coordinate to a geohash of length `precision`\n    on a corresponding a hilbert curve. Each character encodes `bits_per_char` bits\n    per character (allowed are 2, 4 and 6 bits [default 6]). Hence, the geohash encodes\n    the lng/lat coordinate using `precision` * `bits_per_char` bits. The number of\n    bits devided by 2 give the level of the used hilbert curve, e.g. precision=10, bits_per_char=6\n    (default values) use 60 bit and a level 30 hilbert curve to map the globe.\n\n    Parameters:\n        lng: float          Longitude; between -180.0 and 180.0; WGS 84\n        lat: float          Latitude; between -90.0 and 90.0; WGS 84\n        precision: int      The number of characters in a geohash\n        bits_per_char: int  The number of bits per coding character\n\n    Returns:\n        str: geohash for lng/lat of length `precision`\n    File:      .../geohash_hilbert/_hilbert.py\n    Type:      function\n\n\n    In [7]: ghh.decode?\n    Signature: ghh.decode(code, bits_per_char=6)\n    Docstring:\n    Decode a geohash on a hilbert curve as a lng/lat position\n\n    Decodes the geohash `code` as a lng/lat position. It assumes, that\n    the length of `code` corresponds to the precision! And that each character\n    in `code` encodes `bits_per_char` bits. Do not mix geohashes with different\n    `bits_per_char`!\n\n    Parameters:\n        code: str           The geohash to decode.\n        bits_per_char: int  The number of bits per coding character\n\n    Returns:\n        Tuple[float, float]:  (lng, lat) coordinate for the geohash.\n    File:      .../geohash_hilbert/_hilbert.py\n    Type:      function\n\n\n    In [8]: ghh.decode_exactly?\n    Signature: ghh.decode_exactly(code, bits_per_char=6)\n    Docstring:\n    Decode a geohash on a hilbert curve as a lng/lat position with error-margins\n\n    Decodes the geohash `code` as a lng/lat position with error-margins. It assumes,\n    that the length of `code` corresponds to the precision! And that each character\n    in `code` encodes `bits_per_char` bits. Do not mix geohashes with different\n    `bits_per_char`!\n\n    Parameters:\n        code: str           The geohash to decode.\n        bits_per_char: int  The number of bits per coding character\n\n    Returns:\n        Tuple[float, float, float, float]:  (lng, lat, lng-error, lat-error) coordinate for the geohash.\n    File:      .../geohash_hilbert/_hilbert.py\n    Type:      function\n\nCompare to original ```geohash`` <https://github.com/vinsci/geohash/>`__\n------------------------------------------------------------------------\n\nThis package is similar to the\n`geohash <https://github.com/vinsci/geohash/>`__ or the\n`geohash2 <https://github.com/dbarthe/geohash/>`__ package, as it also\nprovides a mechanism to encode (and decode) a longitude/latitude\nposition (WGS 84) to a one dimensional\n`geohash <https://en.wikipedia.org/wiki/Geohash>`__. But, where the\nformer use `z-order <https://en.wikipedia.org/wiki/Z-order_curve>`__\nspace filling curves, this package uses\n`hilbert <https://en.wikipedia.org/wiki/Hilbert_curve>`__ curves. (The\nkernel for this package was adapted from\n`wiki <https://en.wikipedia.org/wiki/Hilbert_curve>`__).\n\n**Note**: The parameter (and returns) order changed from lat/lng in\n``geohash`` to lng/lat. Apart from that this package is a drop-in\nreplacement for the original ``geohash``.\n\nFurther, the string representation is changed (and modifieable) to\ncompensate for the special requirements of the implementation:\n``geohash`` uses a modified base32 representation, i.e. every character\nin the geohash encodes 5 bits. Even bits encode longitude and odd bits\nencode latitude. Every two full bits encode for one level of the z-order\ncurve, e.g. the default precision of 12 use ``12*5 = 60bit`` to encode\none latitude / longitude position using a level 30 z-order curve. The\nimplementation also allows for 'half'-levels, e.g. precision 11 use\n``11*5 = 55bit`` corresponds to a level 27.5 z-order curve.\n\nGeohash representation details\n------------------------------\n\nThis implementation of the hilbert curve allows only full levels, hence\nwe have support for base4 (2bit), base16 (4bit) and a custom base64\n(6bit, the default) geohash representations. All keep the same ordering\nas their integer value by lexicographical order:\n\n-  base4: each character is in ``'0123'``\n-  base16: each character is in ``'0123456789abcdef'``\n-  base64: each character is in\n   ``'0123456789@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz'``\n\n**Note**: Do not mix geohashes from the original ``geohash`` and this,\nand do not mix base4, base16 and base64 geohash representations. Decide\nfor one representation and then stick to it.\n\nThe different encodings also give a more fine grain control of the\nactual encoding precision and the geohash size (maximum lng/lat error\naround equator):\n\n::\n\n    lvl | bits |   error       |    base4   |  base16  |  base64\n    -------------------------------------------------------------\n      0 |   0  |  20015.087 km |   prec  0  |  prec 0  |  prec 0\n      1 |   2  |  10007.543 km |   prec  1  |          |\n      2 |   4  |   5003.772 km |   prec  2  |  prec 1  |\n      3 |   6  |   2501.886 km |   prec  3  |          |  prec 1\n      4 |   8  |   1250.943 km |   prec  4  |  prec 2  |\n      5 |  10  |    625.471 km |   prec  5  |          |\n      6 |  12  |    312.736 km |   prec  6  |  prec 3  |  prec 2\n      7 |  14  |    156.368 km |   prec  7  |          |\n      8 |  16  |     78.184 km |   prec  8  |  prec 4  |\n      9 |  18  |     39.092 km |   prec  9  |          |  prec 3\n     10 |  20  |     19.546 km |   prec 10  |  prec 5  |\n     11 |  22  |   9772.992  m |   prec 11  |          |\n     12 |  24  |   4886.496  m |   prec 12  |  prec  6 |  prec 4\n     13 |  26  |   2443.248  m |   prec 13  |          |\n     14 |  28  |   1221.624  m |   prec 14  |  prec  7 |\n     15 |  30  |    610.812  m |   prec 15  |          |  prec 5\n     16 |  32  |    305.406  m |   prec 16  |  prec  8 |\n     17 |  34  |    152.703  m |   prec 17  |          |\n     18 |  36  |     76.351  m |   prec 18  |  prec  9 |  prec 6\n     19 |  38  |     38.176  m |   prec 19  |          |\n     20 |  40  |     19.088  m |   prec 20  |  prec 10 |\n     21 |  42  |    954.394 cm |   prec 21  |          |  prec 7\n     22 |  44  |    477.197 cm |   prec 22  |  prec 11 |\n     23 |  46  |    238.598 cm |   prec 23  |          |\n     24 |  48  |    119.299 cm |   prec 24  |  prec 12 |  prec 8\n     25 |  50  |     59.650 cm |   prec 25  |          |\n     26 |  52  |     29.825 cm |   prec 26  |  prec 13 |\n     27 |  54  |     14.912 cm |   prec 27  |          |  prec 9\n     28 |  56  |      7.456 cm |   prec 28  |  prec 14 |\n     29 |  58  |      3.728 cm |   prec 29  |          |\n     30 |  60  |      1.864 cm |   prec 30  |  prec 15 |  prec 10\n     31 |  62  |      0.932 cm |   prec 31  |          |\n     32 |  64  |      0.466 cm |   prec 32  |  prec 16 |\n     -------------------------------------------------------------\n\nFurther features\n----------------\n\nIf cython is available during install, the cython kernel extension will\nbe installed and used for geohash computations with 64bit or less\n(timings for MBP 2016, 2.6 GHz Intel Core i7, Python 3.6.2, Cython\n0.26.1):\n\n.. code:: python\n\n    In [1]: import geohash_hilbert as ghh\n    # Without cython ...\n    In [2]: ghh._hilbert.CYTHON_AVAILABLE\n    Out[2]: False\n\n    In [3]: %timeit ghh.encode(6.957036, 50.941291, precision=10)\n    39.4 \u00b5s \u00b1 614 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n\n    In [4]: %timeit ghh.encode(6.957036, 50.941291, precision=11)\n    43.4 \u00b5s \u00b1 421 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n\n.. code:: python\n\n    In [1]: import geohash_hilbert as ghh\n    # With cython ...\n    In [2]: ghh._hilbert.CYTHON_AVAILABLE\n    Out[2]: True\n    # almost 6x faster\n    In [3]: %timeit ghh.encode(6.957036, 50.941291, precision=10)\n    6.72 \u00b5s \u00b1 57.4 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n    # more than 64bit will be computed with pure python function.\n    In [4]: %timeit ghh.encode(6.957036, 50.941291, precision=11)\n    43.4 \u00b5s \u00b1 375 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000 loops each)\n\nGet the actual rectangle that is encoded by a geohash, i.e. position +-\nerrors:\n\n.. code:: python\n\n    # returns a geojson Feature encoding the rectangle as a Polygon\n    In [9]: ghh.rectangle('Z7fe2G')\n    Out[9]:\n    {'bbox': (6.955718994140625,\n      50.94085693359375,\n      6.95709228515625,\n      50.94154357910156),\n     'geometry': {'coordinates': [[(6.955718994140625, 50.94085693359375),\n        (6.955718994140625, 50.94154357910156),\n        (6.95709228515625, 50.94154357910156),\n        (6.95709228515625, 50.94085693359375),\n        (6.955718994140625, 50.94085693359375)]],\n      'type': 'Polygon'},\n     'properties': {'bits_per_char': 6,\n      'code': 'Z7fe2G',\n      'lat': 50.941200256347656,\n      'lat_err': 0.00034332275390625,\n      'lng': 6.9564056396484375,\n      'lng_err': 0.0006866455078125},\n     'type': 'Feature'}\n\n|rectangle|\n\nGet the neighbouring geohashes:\n\n.. code:: python\n\n    In [10]: ghh.neighbours('Z7fe2G')\n    Out[10]:\n    {'east': 'Z7fe2T',\n     'north': 'Z7fe2H',\n     'north-east': 'Z7fe2S',\n     'north-west': 'Z7fe2I',\n     'south': 'Z7fe2B',\n     'south-east': 'Z7fe2A',\n     'south-west': 'Z7fe2E',\n     'west': 'Z7fe2F'}\n\n|neighbors|\n\nPlot the Hilbert curve:\n\n.. code:: python\n\n    # returns a geojson Feature encoding the Hilbert curve as a LineString\n    In [11]: ghh.hilbert_curve(1)  # this is a level 3 Hilbert curve:\n                                   # 1 char * 6 bits/char = 6 bits => level 3\n    Out[11]:\n    {'geometry': {'coordinates': [(-157.5, -78.75),\n       (-157.5, -56.25), (-112.5, -56.25), (-112.5, -78.75), (-67.5, -78.75), (-22.5, -78.75),\n       (-22.5, -56.25), (-67.5, -56.25), (-67.5, -33.75), (-22.5, -33.75), (-22.5, -11.25),\n       (-67.5, -11.25), (-112.5, -11.25), (-112.5, -33.75), (-157.5, -33.75), (-157.5, -11.25),\n       (-157.5, 11.25), (-112.5, 11.25), (-112.5, 33.75), (-157.5, 33.75), (-157.5, 56.25),\n       (-157.5, 78.75), (-112.5, 78.75), (-112.5, 56.25), (-67.5, 56.25), (-67.5, 78.75),\n       (-22.5, 78.75), (-22.5, 56.25), (-22.5, 33.75), (-67.5, 33.75), (-67.5, 11.25),\n       (-22.5, 11.25), (22.5, 11.25), (67.5, 11.25), (67.5, 33.75), (22.5, 33.75), (22.5, 56.25),\n       (22.5, 78.75), (67.5, 78.75), (67.5, 56.25), (112.5, 56.25), (112.5, 78.75), (157.5, 78.75),\n       (157.5, 56.25), (157.5, 33.75), (112.5, 33.75), (112.5, 11.25), (157.5, 11.25), (157.5, -11.25),\n       (157.5, -33.75), (112.5, -33.75), (112.5, -11.25), (67.5, -11.25), (22.5, -11.25),\n       (22.5, -33.75), (67.5, -33.75), (67.5, -56.25), (22.5, -56.25), (22.5, -78.75),\n       (67.5, -78.75), (112.5, -78.75), (112.5, -56.25), (157.5, -56.25), (157.5, -78.75)],\n      'type': 'LineString'},\n     'properties': {},\n     'type': 'Feature'}\n\n|hilbert curve|\n\n.. |Build Status| image:: https://travis-ci.org/tammoippen/geohash-hilbert.svg?branch=master\n   :target: https://travis-ci.org/tammoippen/geohash-hilbert\n.. |Coverage Status| image:: https://coveralls.io/repos/github/tammoippen/geohash-hilbert/badge.svg?branch=master\n   :target: https://coveralls.io/github/tammoippen/geohash-hilbert?branch=master\n.. |Tested CPython Versions| image:: https://img.shields.io/badge/cpython-2.7%2C%203.5%2C%203.6%2C%20nightly-brightgreen.svg\n   :target: https://img.shields.io/badge/cpython-2.7%2C%203.5%2C%203.6%2C%20nightly-brightgreen.svg\n.. |Tested PyPy Versions| image:: https://img.shields.io/badge/pypy-2.7--5.8.0%2C%203.5--5.8.0-brightgreen.svg\n   :target: https://img.shields.io/badge/pypy-2.7--5.8.0%2C%203.5--5.8.0-brightgreen.svg\n.. |PyPi downloads/month| image:: https://img.shields.io/pypi/dm/geohash-hilbert.svg\n   :target: https://img.shields.io/pypi/dm/geohash-hilbert.svg\n.. |PyPi version| image:: https://img.shields.io/pypi/v/geohash-hilbert.svg\n   :target: https://img.shields.io/pypi/v/geohash-hilbert.svg\n.. |PyPi license| image:: https://img.shields.io/pypi/l/geohash-hilbert.svg\n   :target: https://img.shields.io/pypi/l/geohash-hilbert.svg\n.. |rectangle| image:: /../master/img/rectangle.png?raw=true\n   :target: http://geojson.io/#data=data:application/json,%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22code%22%3A%22Z7fe2G%22%2C%22lng%22%3A6.9564056396484375%2C%22lat%22%3A50.941200256347656%2C%22lng_err%22%3A0.0006866455078125%2C%22lat_err%22%3A0.00034332275390625%2C%22bits_per_char%22%3A6%7D%2C%22bbox%22%3A%5B6.955718994140625%2C50.94085693359375%2C6.95709228515625%2C50.94154357910156%5D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B6.955718994140625%2C50.94085693359375%5D%2C%5B6.955718994140625%2C50.94154357910156%5D%2C%5B6.95709228515625%2C50.94154357910156%5D%2C%5B6.95709228515625%2C50.94085693359375%5D%2C%5B6.955718994140625%2C50.94085693359375%5D%5D%5D%7D%7D\n.. |neighbors| image:: /../master/img/neighbors.png?raw=true\n   :target: http://geojson.io/#data=data:application/json,%5B%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22code%22%3A%22Z7fe2H%22%2C%22lng%22%3A6.9564056396484375%2C%22lat%22%3A50.94188690185547%2C%22lng_err%22%3A0.0006866455078125%2C%22lat_err%22%3A0.00034332275390625%2C%22bits_per_char%22%3A6%7D%2C%22bbox%22%3A%5B6.955718994140625%2C50.94154357910156%2C6.95709228515625%2C50.942230224609375%5D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B6.955718994140625%2C50.94154357910156%5D%2C%5B6.955718994140625%2C50.942230224609375%5D%2C%5B6.95709228515625%2C50.942230224609375%5D%2C%5B6.95709228515625%2C50.94154357910156%5D%2C%5B6.955718994140625%2C50.94154357910156%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22code%22%3A%22Z7fe2S%22%2C%22lng%22%3A6.9577789306640625%2C%22lat%22%3A50.94188690185547%2C%22lng_err%22%3A0.0006866455078125%2C%22lat_err%22%3A0.00034332275390625%2C%22bits_per_char%22%3A6%7D%2C%22bbox%22%3A%5B6.95709228515625%2C50.94154357910156%2C6.958465576171875%2C50.942230224609375%5D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B6.95709228515625%2C50.94154357910156%5D%2C%5B6.95709228515625%2C50.942230224609375%5D%2C%5B6.958465576171875%2C50.942230224609375%5D%2C%5B6.958465576171875%2C50.94154357910156%5D%2C%5B6.95709228515625%2C50.94154357910156%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22code%22%3A%22Z7fe2I%22%2C%22lng%22%3A6.9550323486328125%2C%22lat%22%3A50.94188690185547%2C%22lng_err%22%3A0.0006866455078125%2C%22lat_err%22%3A0.00034332275390625%2C%22bits_per_char%22%3A6%7D%2C%22bbox%22%3A%5B6.954345703125%2C50.94154357910156%2C6.955718994140625%2C50.942230224609375%5D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B6.954345703125%2C50.94154357910156%5D%2C%5B6.954345703125%2C50.942230224609375%5D%2C%5B6.955718994140625%2C50.942230224609375%5D%2C%5B6.955718994140625%2C50.94154357910156%5D%2C%5B6.954345703125%2C50.94154357910156%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22code%22%3A%22Z7fe2T%22%2C%22lng%22%3A6.9577789306640625%2C%22lat%22%3A50.941200256347656%2C%22lng_err%22%3A0.0006866455078125%2C%22lat_err%22%3A0.00034332275390625%2C%22bits_per_char%22%3A6%7D%2C%22bbox%22%3A%5B6.95709228515625%2C50.94085693359375%2C6.958465576171875%2C50.94154357910156%5D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B6.95709228515625%2C50.94085693359375%5D%2C%5B6.95709228515625%2C50.94154357910156%5D%2C%5B6.958465576171875%2C50.94154357910156%5D%2C%5B6.958465576171875%2C50.94085693359375%5D%2C%5B6.95709228515625%2C50.94085693359375%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22code%22%3A%22Z7fe2F%22%2C%22lng%22%3A6.9550323486328125%2C%22lat%22%3A50.941200256347656%2C%22lng_err%22%3A0.0006866455078125%2C%22lat_err%22%3A0.00034332275390625%2C%22bits_per_char%22%3A6%7D%2C%22bbox%22%3A%5B6.954345703125%2C50.94085693359375%2C6.955718994140625%2C50.94154357910156%5D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B6.954345703125%2C50.94085693359375%5D%2C%5B6.954345703125%2C50.94154357910156%5D%2C%5B6.955718994140625%2C50.94154357910156%5D%2C%5B6.955718994140625%2C50.94085693359375%5D%2C%5B6.954345703125%2C50.94085693359375%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22code%22%3A%22Z7fe2B%22%2C%22lng%22%3A6.9564056396484375%2C%22lat%22%3A50.940513610839844%2C%22lng_err%22%3A0.0006866455078125%2C%22lat_err%22%3A0.00034332275390625%2C%22bits_per_char%22%3A6%7D%2C%22bbox%22%3A%5B6.955718994140625%2C50.94017028808594%2C6.95709228515625%2C50.94085693359375%5D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B6.955718994140625%2C50.94017028808594%5D%2C%5B6.955718994140625%2C50.94085693359375%5D%2C%5B6.95709228515625%2C50.94085693359375%5D%2C%5B6.95709228515625%2C50.94017028808594%5D%2C%5B6.955718994140625%2C50.94017028808594%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22code%22%3A%22Z7fe2A%22%2C%22lng%22%3A6.9577789306640625%2C%22lat%22%3A50.940513610839844%2C%22lng_err%22%3A0.0006866455078125%2C%22lat_err%22%3A0.00034332275390625%2C%22bits_per_char%22%3A6%7D%2C%22bbox%22%3A%5B6.95709228515625%2C50.94017028808594%2C6.958465576171875%2C50.94085693359375%5D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B6.95709228515625%2C50.94017028808594%5D%2C%5B6.95709228515625%2C50.94085693359375%5D%2C%5B6.958465576171875%2C50.94085693359375%5D%2C%5B6.958465576171875%2C50.94017028808594%5D%2C%5B6.95709228515625%2C50.94017028808594%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22code%22%3A%22Z7fe2E%22%2C%22lng%22%3A6.9550323486328125%2C%22lat%22%3A50.940513610839844%2C%22lng_err%22%3A0.0006866455078125%2C%22lat_err%22%3A0.00034332275390625%2C%22bits_per_char%22%3A6%7D%2C%22bbox%22%3A%5B6.954345703125%2C50.94017028808594%2C6.955718994140625%2C50.94085693359375%5D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B6.954345703125%2C50.94017028808594%5D%2C%5B6.954345703125%2C50.94085693359375%5D%2C%5B6.955718994140625%2C50.94085693359375%5D%2C%5B6.955718994140625%2C50.94017028808594%5D%2C%5B6.954345703125%2C50.94017028808594%5D%5D%5D%7D%7D%2C%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%22code%22%3A%22Z7fe2G%22%2C%22lng%22%3A6.9564056396484375%2C%22lat%22%3A50.941200256347656%2C%22lng_err%22%3A0.0006866455078125%2C%22lat_err%22%3A0.00034332275390625%2C%22bits_per_char%22%3A6%7D%2C%22bbox%22%3A%5B6.955718994140625%2C50.94085693359375%2C6.95709228515625%2C50.94154357910156%5D%2C%22geometry%22%3A%7B%22type%22%3A%22Polygon%22%2C%22coordinates%22%3A%5B%5B%5B6.955718994140625%2C50.94085693359375%5D%2C%5B6.955718994140625%2C50.94154357910156%5D%2C%5B6.95709228515625%2C50.94154357910156%5D%2C%5B6.95709228515625%2C50.94085693359375%5D%2C%5B6.955718994140625%2C50.94085693359375%5D%5D%5D%7D%7D%5D\n.. |hilbert curve| image:: /../master/img/hilbert.png?raw=true\n   :target: http://geojson.io/#data=data:application/json,%7B%22type%22%3A%22Feature%22%2C%22properties%22%3A%7B%7D%2C%22geometry%22%3A%7B%22type%22%3A%22LineString%22%2C%22coordinates%22%3A%5B%5B-157.5%2C-78.75%5D%2C%5B-157.5%2C-56.25%5D%2C%5B-112.5%2C-56.25%5D%2C%5B-112.5%2C-78.75%5D%2C%5B-67.5%2C-78.75%5D%2C%5B-22.5%2C-78.75%5D%2C%5B-22.5%2C-56.25%5D%2C%5B-67.5%2C-56.25%5D%2C%5B-67.5%2C-33.75%5D%2C%5B-22.5%2C-33.75%5D%2C%5B-22.5%2C-11.25%5D%2C%5B-67.5%2C-11.25%5D%2C%5B-112.5%2C-11.25%5D%2C%5B-112.5%2C-33.75%5D%2C%5B-157.5%2C-33.75%5D%2C%5B-157.5%2C-11.25%5D%2C%5B-157.5%2C11.25%5D%2C%5B-112.5%2C11.25%5D%2C%5B-112.5%2C33.75%5D%2C%5B-157.5%2C33.75%5D%2C%5B-157.5%2C56.25%5D%2C%5B-157.5%2C78.75%5D%2C%5B-112.5%2C78.75%5D%2C%5B-112.5%2C56.25%5D%2C%5B-67.5%2C56.25%5D%2C%5B-67.5%2C78.75%5D%2C%5B-22.5%2C78.75%5D%2C%5B-22.5%2C56.25%5D%2C%5B-22.5%2C33.75%5D%2C%5B-67.5%2C33.75%5D%2C%5B-67.5%2C11.25%5D%2C%5B-22.5%2C11.25%5D%2C%5B22.5%2C11.25%5D%2C%5B67.5%2C11.25%5D%2C%5B67.5%2C33.75%5D%2C%5B22.5%2C33.75%5D%2C%5B22.5%2C56.25%5D%2C%5B22.5%2C78.75%5D%2C%5B67.5%2C78.75%5D%2C%5B67.5%2C56.25%5D%2C%5B112.5%2C56.25%5D%2C%5B112.5%2C78.75%5D%2C%5B157.5%2C78.75%5D%2C%5B157.5%2C56.25%5D%2C%5B157.5%2C33.75%5D%2C%5B112.5%2C33.75%5D%2C%5B112.5%2C11.25%5D%2C%5B157.5%2C11.25%5D%2C%5B157.5%2C-11.25%5D%2C%5B157.5%2C-33.75%5D%2C%5B112.5%2C-33.75%5D%2C%5B112.5%2C-11.25%5D%2C%5B67.5%2C-11.25%5D%2C%5B22.5%2C-11.25%5D%2C%5B22.5%2C-33.75%5D%2C%5B67.5%2C-33.75%5D%2C%5B67.5%2C-56.25%5D%2C%5B22.5%2C-56.25%5D%2C%5B22.5%2C-78.75%5D%2C%5B67.5%2C-78.75%5D%2C%5B112.5%2C-78.75%5D%2C%5B112.5%2C-56.25%5D%2C%5B157.5%2C-56.25%5D%2C%5B157.5%2C-78.75%5D%5D%7D%7D",
    "docs_url": null,
    "download_url": "https://github.com/tammoippen/geohash-hilbert/archive/v1.0.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/tammoippen/geohash-hilbert",
    "keywords": "geohash,hilbert,space filling curve,geometry",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "geohash-hilbert",
    "platform": "",
    "project_url": "https://pypi.org/project/geohash-hilbert/",
    "release_url": "https://pypi.org/project/geohash-hilbert/1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Geohash a lng/lat coordinate using the hilbert curve.",
    "version": "1.0"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7b5accd7d34c5c34ce71c3ae29438ebc",
          "sha256": "9ee4329dd132278684746e22fe120ded0d23c69b377ee3815e0645f102f15d9f"
        },
        "downloads": 0,
        "filename": "geohash-hilbert-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7b5accd7d34c5c34ce71c3ae29438ebc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27618,
        "upload_time": "2017-09-04T11:34:53",
        "url": "https://files.pythonhosted.org/packages/65/bb/af4c88d313c435235ebdbd873531267c62dcc3200d171451020d6ddbfdef/geohash-hilbert-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8148d9c8c78295045381cb91a9722218",
          "sha256": "9aaa30be53178cc42498e920cfda92ac9ecd5e2ad413c3d476eed3ea75903850"
        },
        "downloads": 0,
        "filename": "geohash-hilbert-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8148d9c8c78295045381cb91a9722218",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11768,
        "upload_time": "2017-09-04T12:38:41",
        "url": "https://files.pythonhosted.org/packages/d7/17/3c1d5e645d22e87800ba78127be0a3701990b28e1654acb6aeb91e4161e6/geohash-hilbert-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f4c7508f367c6f4ec0675867f0cad94c",
          "sha256": "cd2d4f634beabd5cd8ca250b3c6f51a1c8ec5aa0d912760aabe1d8ebbbc02ca9"
        },
        "downloads": 0,
        "filename": "geohash-hilbert-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f4c7508f367c6f4ec0675867f0cad94c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12284,
        "upload_time": "2017-09-04T17:30:50",
        "url": "https://files.pythonhosted.org/packages/17/b8/d4c81017a57a1ed6329ed56f61112b7fdb1bdd3fd0c8ce89b604d847bd4b/geohash-hilbert-0.3.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fdcc58a08aa741be5c542c9add9f8e28",
          "sha256": "26ceb815de35d2eeaf10d3644b653d5d24106e953db0482a9ff147ca49cb34c4"
        },
        "downloads": 0,
        "filename": "geohash-hilbert-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fdcc58a08aa741be5c542c9add9f8e28",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12311,
        "upload_time": "2017-09-19T17:48:58",
        "url": "https://files.pythonhosted.org/packages/89/36/3b23ed008eaad455442615801d595d0c0111ed168a246e07db0238a120a0/geohash-hilbert-0.4.tar.gz"
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "17b6d45b804dde8c19f42f8451731dba",
          "sha256": "c6cc5882cd5e39fb11800a9ff306a2f89e5c9cee3dfbb12d310f4331c1cde6ad"
        },
        "downloads": 0,
        "filename": "geohash-hilbert-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "17b6d45b804dde8c19f42f8451731dba",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19731,
        "upload_time": "2017-09-20T08:10:51",
        "url": "https://files.pythonhosted.org/packages/1b/30/e4e822ffdbe8e6ed53f4b194803b6aa2edd89f003fda9fe2ce85b8cd08f6/geohash-hilbert-1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "17b6d45b804dde8c19f42f8451731dba",
        "sha256": "c6cc5882cd5e39fb11800a9ff306a2f89e5c9cee3dfbb12d310f4331c1cde6ad"
      },
      "downloads": 0,
      "filename": "geohash-hilbert-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "17b6d45b804dde8c19f42f8451731dba",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 19731,
      "upload_time": "2017-09-20T08:10:51",
      "url": "https://files.pythonhosted.org/packages/1b/30/e4e822ffdbe8e6ed53f4b194803b6aa2edd89f003fda9fe2ce85b8cd08f6/geohash-hilbert-1.0.tar.gz"
    }
  ]
}