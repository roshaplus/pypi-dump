{
  "info": {
    "author": "UNKNOWN",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "Paradocx\n========\n\n.. contents::\n\nStatus and License\n------------------\n\n``paradocx`` builds on the Open Office XML Spec provided by openpack to\nprovide interfaces for working with Microsoft Word documents in the\nOffice 2007 'docx' format.\n\n``paradocx`` is Copyright (c) 2010 by YouGov Plc. and licensed under\n`this license\n<http://bitbucket.org/yougov/paradocx/raw/tip/LICENSE>`_.\n\nIntroduction\n------------\n\nConstructing simple documents using Paradocx is fairly straightforward::\n\n    >>> import paradocx\n    >>> doc = paradocx.Document()\n    >>> doc.paragraph('Things to do', style='Heading 1')\n    <Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p at 0x22a1240>\n    >>> doc.paragraph('First, spend some time learning paradocx usage.')\n    <Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p at 0x22a12d0>\n    >>> doc.paragraph('Then, put together some examples')\n    <Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p at 0x22a1240>\n    >>> doc.paragraph('Finally, put those examples in the paradocx documentation')\n    <Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}p at 0x22a12d0>\n    >>> doc.save('mydoc.docx')\n\nUsing `part-edit` from `Openpack <http://bitbucket.org/yougov/openpack>`_,\none can see the document that was constructed::\n\n    > EDITOR=cat part-edit mydoc.docx/word/document.xml\n    <w:document xmlns:dcterms=\"http://purl.org/dc/terms/\" xmlns:ve=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" xmlns:dcmitype=\"http://purl.org/dc/dcmitype/\" xmlns:v=\"urn:schemas-microsoft-com:vml\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\" xmlns:wp=\"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\" xmlns:cp=\"http://schemas.openxmlformats.org/package/2006/metadata/core-properties\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n      <w:body>\n        <w:p>\n          <w:pPr>\n            <w:pStyle w:val=\"Heading 1\"/>\n          </w:pPr>\n          <w:r>\n            <w:t>Things to do</w:t>\n          </w:r>\n        </w:p>\n        <w:p>\n          <w:r>\n            <w:t>First, spend some time learning paradocx usage.</w:t>\n          </w:r>\n        </w:p>\n        <w:p>\n          <w:r>\n            <w:t>Then, put together some examples</w:t>\n          </w:r>\n        </w:p>\n        <w:p>\n          <w:r>\n            <w:t>Finally, put those examples in the paradocx documentation</w:t>\n          </w:r>\n        </w:p>\n      </w:body>\n    </w:document>\n\n\nOne may also append tables to a document::\n\n    >>> import paradocx\n    >>> doc = paradocx.Document()\n    >>> doc.table([['a', 'b', 'c'], ['1', '2', '3']])\n    <Element {http://schemas.openxmlformats.org/wordprocessingml/2006/main}tbl at 0x2231240>\n    >>> doc.save('data.docx')\n\n\nObject Model and Advanced Usage\n-------------------------------\n\nThe core object for a Word document is the `paradocx.package.WordPackage`. All\noperations involving constructing a Word document use some form of this class\n(the `paradocx.Document` subclasses `WordPackage`).\n\nSee `the source\n<https://bitbucket.org/yougov/paradocx/src/66c96e2251e6/paradocx/package.py?at=default>`_\nfor a trivial example of usage.\n\nEach `WordPackage` is a container of a number of related parts. The parts\nrepresent the various aspects of a document. The following example, adapted\nfrom real-world usage, shows how\none might construct a more complex structure from a series of XML templates\non the file system::\n\n    import string\n\n    def load_template(name, **params):\n        with open(name) as f:\n            template = string.Template(f.read())\n        return template.substitute(params)\n\n    doc = WordPackage()\n    doc.start_part.data = load_template('document.xml', text=\"Hello world\")\n\n    # styles\n    styles = StylesPart(doc)\n    doc.add(styles)\n    styles.data = load_template('styles.xml')\n    doc.start_part.relate(styles)\n\n    title = \"My initial document\"\n\n    # Header for cover page\n    cover_header = HeaderPart(doc, '/word/cover-header.xml')\n    doc.add(cover_header)\n    cover_header.data = load_template('cover-header.xml', title=title)\n    doc.start_part.relate(cover_header, 'PmxHdr0')\n\n    # body header\n    header = HeaderPart(doc)\n    doc.add(header)\n    header.data = load_template('header.xml', title=title)\n    doc.start_part.relate(header, 'PmxHdr1')\n\n    # body footer\n    footer = FooterPart(doc)\n    doc.add(footer)\n    footer.data = load_template('footer.xml',\n        date=unicode(datetime.datetime.now()))\n    doc.start_part.relate(footer, 'PmxFtr1')\n\n    # image1\n    image1 = ImagePart(doc, '/word/media/logo.png')\n    doc.add(image1, override=False)\n    with open('my_logo.png', 'rb') as logo_data:\n        image1.data = logo_data.read()\n    doc.start_part.relate(image1, 'Logo1')\n    header.relate(image1, 'Logo1')\n    # cover page uses the logo, so relate it\n    cover_header.relate(image1, 'Logo1')\n\n    # settings\n    settings = SettingsPart(doc)\n    doc.add(settings)\n    settings.data = load_template('settings.xml')\n    doc.start_part.relate(settings)\n\n    doc.save(...)\n\nFor more details on constructing the XML data for the underlying parts,\nconsider using a reference document and the OpenPack tools for inspecting\nthe document for the necessary elements, or consider reading some of the\nresources at the `Microsoft Dev Center\n<http://msdn.microsoft.com/en-us/library/office/aa338205%28v=office.12%29.aspx>`_\nor read up on the `standards developed around Office Open XML\n<http://en.wikipedia.org/wiki/Office_Open_XML>`_.\n\nTesting\n-------\n\nParadocx uses `pytest-runner <http://bitbucket.org/jaraco/pytest-runner>`_ for\nrunning the tests. To test, simply invoke::\n\n    python setup.py ptr\n\nChanges\n-------\n\nFor the list of changes, see `CHANGES in the repository\n<http://bitbucket.org/yougov/paradocx/src/tip/CHANGES>`_.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "UNKNOWN",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "paradocx",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/paradocx/",
    "release_url": "https://pypi.org/project/paradocx/1.1/",
    "requires_python": null,
    "summary": "UNKNOWN",
    "version": "1.1"
  },
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d2fb835a0c0a3cb1530b4e1f243fce77",
          "sha256": "34e7bff19893d9a4f2988289458aff4e74e81ca8b801f59fff467e42cfe50bb7"
        },
        "downloads": 3110,
        "filename": "paradocx-0.3.1.zip",
        "has_sig": false,
        "md5_digest": "d2fb835a0c0a3cb1530b4e1f243fce77",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22340,
        "upload_time": "2010-08-02T16:15:11",
        "url": "https://files.pythonhosted.org/packages/e6/2a/ff4a9f83fe53f65333dee0091a697d7241cf9c4b5d756300df8f1293630c/paradocx-0.3.1.zip"
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ae4d82d68f4ad88cd935615037568aec",
          "sha256": "9d953bb8524f55ea8ac5f901a2ce2272a9307e17ded6b0e602c722c20e91ae66"
        },
        "downloads": 2869,
        "filename": "paradocx-1.0.zip",
        "has_sig": false,
        "md5_digest": "ae4d82d68f4ad88cd935615037568aec",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24432,
        "upload_time": "2011-09-23T22:30:20",
        "url": "https://files.pythonhosted.org/packages/cc/6e/01ab148c72d41ac3d1d045da94218ddbe3d382868aa75f8a1a3cb396f24e/paradocx-1.0.zip"
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "074d649721c341e487fa7ab2bbe2a7e0",
          "sha256": "4e5f179489624affae20d4dbbde2e0a35f72c8eed8e727c751e20039fb48d48c"
        },
        "downloads": 2460,
        "filename": "paradocx-1.1.zip",
        "has_sig": false,
        "md5_digest": "074d649721c341e487fa7ab2bbe2a7e0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30680,
        "upload_time": "2014-02-11T23:30:09",
        "url": "https://files.pythonhosted.org/packages/ee/2f/6fac4bef7bbeefabb641f556b587d8a23879114568d95df0a0c79ca8f0b7/paradocx-1.1.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "074d649721c341e487fa7ab2bbe2a7e0",
        "sha256": "4e5f179489624affae20d4dbbde2e0a35f72c8eed8e727c751e20039fb48d48c"
      },
      "downloads": 2460,
      "filename": "paradocx-1.1.zip",
      "has_sig": false,
      "md5_digest": "074d649721c341e487fa7ab2bbe2a7e0",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 30680,
      "upload_time": "2014-02-11T23:30:09",
      "url": "https://files.pythonhosted.org/packages/ee/2f/6fac4bef7bbeefabb641f556b587d8a23879114568d95df0a0c79ca8f0b7/paradocx-1.1.zip"
    }
  ]
}