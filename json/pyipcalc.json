{
  "info": {
    "author": "Christiaan Frans Rademan",
    "author_email": "christiaan.rademan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: BSD :: FreeBSD",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "PyIPCalc\n========\n\npyipcalc is module developed for doing simple ip calculations needed by some python applications. Python 3 has built-in 'ipaddress' module providing many of the desired functionality. However I needed a common interface and support within both Python 2.7 and 3.x. At the time there were many modules some which were complex and others that were broken at the time. pyipcalc is simple and contributions are welcome!\n\nProject Status: Production / Active\n\nQuick Links\n-----------\n\n* `Website <http://www.tachyonic.co.za/pyipcalc>`__.\n* `GITHUB Code <https://github.com/TachyonProject/pyipcalc>`__.\n* `Issues <https://github.com/TachyonProject/pyipcalc/issues>`__.\n\nInstallation\n------------\n\nPyIPCalc currently fully supports `CPython <https://www.python.org/downloads/>`__ 2.7 and 3.x\n\nA package is availible on PyPI.\nInstalling it is as simple as:\n\n.. code:: bash\n\n    $ pip install pyipcalc\n\nSource Code\n-----------\n\nCode is hosted on `GitHub <https://github.com/TachyonProject/pyipcalc>`_. Making the code easy to browse, download, fork, etc. Pull requests are always welcome!\n\nClone the project like this:\n\n.. code:: bash\n\n    $ git clone https://github.com/TachyonProject/pyipcalc.git\n\nOnce you have cloned the repo or downloaded a tarball from GitHub, you\ncan install pyipcalc like this:\n\n.. code:: bash\n\n    $ cd pyipcalc\n    $ pip install .\n\nOr, if you want to edit the code, first fork the main repo, clone the fork\nto your desktop, and then run the following to install it using symbolic\nlinking, so that when you change your code, the changes will be automagically\navailable to your app without having to reinstall the package:\n\n.. code:: bash\n\n    $ cd pyipcalc\n    $ pip install -e .\n\nYou can manually test changes to pyipcalc by switching to the\ndirectory of the cloned repo:\n\n.. code:: bash\n\n    $ cd pyipcalc/tests\n    $ python test.py\n\nUsing PyIPCalc\n--------------\n\n.. code:: bash\n\n\t$ pyipcalc 192.168.0.0/24\n\tPyIPCalc 2.0.0\n\n\t\tNetwork Prefix: 192.168.0.0/24\n\t\tNetwork Address: 192.168.0.0\n\t\tFirst IP Address: 192.168.0.1\n\t\tLast IP Address: 192.168.0.254\n\t\tBroadcast Address: 192.168.0.255\n\t\tNetmask: 255.255.255.0\n\nIPV6\n----\nIPV6 is supported, you can simply just provide an IPV6 prefix.\n\nDevelopment Module\n------------------\n.. code:: python\n\n\t$ python\n\t>>> import pyipcalc\n\t>>> net = pyipcalc.IPNetwork('192.168.0.0/24')\n\t>>> print net.prefix()\n\t>>> 192.168.0.0/24\n\t>>> print net.network()\n\t>>> 192.168.0.0\n\t>>> print net.first()\n\t>>> 192.168.0.1\n\t>>> print net.last()\n\t>>> 192.168.0.254\n\t>>> print net.broadcast()\n\t>>> 192.168.0.255\n\t>>> print net.mask()\n\t>>> 255.255.255.0\n\n\t>>> for ip in net:\n\t...     print ip\n\t... \n\t192.168.0.0/32\n\t192.168.0.2/32\n\t........\n\t........\n\t192.168.0.254/32\n\t192.168.0.255/32\n\t>>>  \n\n\t>>> test = pyipcalc.IPIter('10.10.10.0/24',26)\n\t>>> for net in test:\n\t...     print net\n\t... \n\t10.10.10.0/26\n\t10.10.10.64/26\n\t10.10.10.128/26\n\t10.10.10.192/26\n\t>>> \n\n\t>>> test = pyipcalc.IPIter('10.10.10.0/24',26)\n\t>>> for net in test:\n\t...     print net.first()\n\t...     print net.last()\n\t... \n\t10.10.10.1\n\t10.10.10.62\n\t10.10.10.65\n\t10.10.10.126\n\t10.10.10.129\n\t10.10.10.190\n\t10.10.10.193\n\t10.10.10.254\n\t>>> \n\nConverting IPv4 to 32bit Decimal to store in database.\n\n.. code:: python\n\n\t>>> print pyipcalc.ip2dec('192.168.0.0',4)\n\t>>> 3232235520\n\t>>> print pyipcalc.dec2ip(3232235520,4)\n\t>>> 192.168.0.0\n\t>>> \n\nConverting IPv6 to 128bit Decimal to store in database.\n\n.. code:: python\n\n\t>>> print pyipcalc.ip_to_int('ffff:0000:0000:0000:0000:0000:0000:0000')\n\t>>> 340277174624079928635746076935438991360\n\t>>> print pyipcalc.int_to_ip(340277174624079928635746076935438991360,6)\n\t>>> ffff:0000:0000:0000:0000:0000:0000:0000\n\nTypically you will need two 64bit columns in a database to store 128bit IPv6 address.\n\n.. code:: python\n\n\t>>> print pyipcalc.int_128_to_64(340277174624079928635746076935438991360)\n\t>>> [18446462598732840960L, 0L]\n\t>>> print pyipcalc.int_64_to_128(18446462598732840960L,0L)\n\t>>> 340277174624079928635746076935438991360\n\nChecking wether one subnet contains another:\n\n.. code:: python\n\n\t>>> net = pyipcalc.IPNetwork('192.168.0.0/24')\n\t>>> net1 = pyipcalc.IPNetwork('192.168.0.1/32')\n\t>>> net2 = pyipcalc.IPNetwork('192.168.1.0/24')\n\t>>> net.contains(net1)\n\t>>> True\n\t>>> net.contains(net2)\n\t>>> False\n\n\t>>> if net1 in net: print (True)\n\t>>> \n\t... True\n\t>>> if net not in net2: print (False)\n\t>>> \n\t... False\n\nNote that if net == net1, contains() will return True\n\nFinding the smallest common supernet that contains two subnets:\n\n.. code:: python\n\n\t>>> pyipcalc.supernet(net1,net2)\n\t>>> 192.168.0.0/23\n\n\t>>> net1 = pyipcalc.IPNetwork('192.168.0.0/24')\n\t>>> net2 = pyipcalc.IPNetwork('192.168.1.0/24')\n\t>>> net3 = pyipcalc.IPNetwork('192.168.2.0/24')\n\t>>> net1 + net2 + net3\n\t>>> 192.168.0.0/22\n\nThe supernet() function also takes a third optional argument, which specifies the minimum prefix length to be searched. Consider for example the case where one searches for the common supernet of 128.0.0.1/32 and 10.0.0.1/32. Because the former has a 1 in the left most bit, while the latter has a 0, the only common supernet would be 0.0.0.0/0, which might not be the desirable outcome. For that reason, one could limit the search. If a common supernet is found within the search limits, it is returned, otherwise 'None' is returned. If this limit is not specified, the default for IPv4 is 8, and for IPv6 is 16.\n\n.. code:: python\n\n\t>>> net3 = pyipcalc.IPNetwork('10.0.0.1/32')\n\t>>> pyipcalc.supernet(net1,net3)\n\t>>> pyipcalc.supernet(net1,net3,0)\n\t>>> 0.0.0.0/0\n\t>>> net4 = pyipcalc.IPNetwork('127.0.0.1/32')\n\t>>> pyipcalc.supernet(net3,net4)\n\t>>> pyipcalc.supernet(net3,net4,1)\n\t>>> 0.0.0.0/1\n\t>>> net5 = pyipcalc.IPNetwork('172.16.0.0/8')\n\t>>> pyipcalc.supernet(net2,net5)\n\t>>> pyipcalc.supernet(net2,net5,0)\n\t>>> 128.0.0.0/1\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://www.tachyonic.co.za/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyipcalc",
    "platform": "",
    "project_url": "https://pypi.org/project/pyipcalc/",
    "release_url": "https://pypi.org/project/pyipcalc/2.0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python IP Calculator Module",
    "version": "2.0.1"
  },
  "releases": {
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7f652568267d0888432320591fee089f",
          "sha256": "3ff40a94e4e77bb7f72b07a725ce86049be323112f52dc22c4ee1658962771d3"
        },
        "downloads": 0,
        "filename": "pyipcalc-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7f652568267d0888432320591fee089f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18734,
        "upload_time": "2017-09-06T11:25:13",
        "url": "https://files.pythonhosted.org/packages/b5/52/71696f6e4ba393dacae919772cb49eb9d2c20d104414c1748b41b5cdfdd1/pyipcalc-2.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7f652568267d0888432320591fee089f",
        "sha256": "3ff40a94e4e77bb7f72b07a725ce86049be323112f52dc22c4ee1658962771d3"
      },
      "downloads": 0,
      "filename": "pyipcalc-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7f652568267d0888432320591fee089f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 18734,
      "upload_time": "2017-09-06T11:25:13",
      "url": "https://files.pythonhosted.org/packages/b5/52/71696f6e4ba393dacae919772cb49eb9d2c20d104414c1748b41b5cdfdd1/pyipcalc-2.0.1.tar.gz"
    }
  ]
}