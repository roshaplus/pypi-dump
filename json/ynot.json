{
  "info": {
    "author": "Jakob Stemberger",
    "author_email": "yaccob@gmx.net",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 2.7"
    ],
    "description": "y!\n==\n\nLanguage for processing structured data from sources that can provide\ndata in ``yaml`` or ``json`` format.\n\nWhy not?\n========\n\nThat's the way ***y!*** is pronounced.\n\nAnd that's the question I asked myself when I had the the idea to\nimplement a programming language completely different from the ones I\nknow so far:\n\n**y**.aml-based **no**-XML **t**.ransformation\n\n***y!*** is the answer to the question ***\"why not?\"***\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSo what does ***y!*** focus on?\n\n-  ***y!*** is an incredibly simple programming language for processing\n   structured data (``json``, ``yaml``, ...).\n\n   -  Therfore it is also perfectly suited for processing output from\n      various NOSQL databases! And with little effort even from\n      relational databases.\n\n-  | ***y!*** focuses on quickly and easily producing output.\n   | This output can be:\n\n   -  Text\n   -  Structured data\n\n-  ***y!*** represents the power of ``yaml``\n\n-  ***y!*** represents the power of ``jsonpath``\n\n-  ***y!*** adopts the power of xslt (and more) without adopting its\n   complexity\n\n-  ***y!*** supports self-verification of programs by simply providing\n   samples for input and output.\n\n   -  No need for using test-frameworks, writing unit-tests or any other\n      hassle.\n\n-  ***y!*** supports producing well-formatted documentation without any\n   tools-magic.\n\n   -  It doesn't require any more than a command-line flag.\n\n***y!*** Installation\n=====================\n\nYou need python 2.7. Probably any python >= 2.7 will be supported but\nright now it wasn't tested at all for any version but 2.7\n\n| To install ***y!*** simply enter\n| ``pip install --upgrade ynot``\n| on your command line and you should be able to use it.\n\nYou can check if the installation succeeded:\n\n::\n\n    $ ynot --version\n    ynot 0.2.2\n\nThe output may look different dependent on where your installer\ninstalled it.\n\nNow try\n\n::\n\n    $ ynot -h\n    Usage: ynot [OPTION] -t trafoFile document...\n\n    Apply transformation to yaml documents\n\n    Options:\n      --version             show program's version number and exit\n      -h, --help            show this help message and exit\n      -t TRAFOFILENAME, --trafo=TRAFOFILENAME\n                            File transformation is read from\n      -l LOGLEVEL, --log-level=LOGLEVEL\n                            Log level. Choices: [u'DEBUG', u'INFO', u'WARN',\n                            u'ERROR']; Defaults to INFO\n      --verify              Verify transformator file TRANSFORMATOR\n      --dry-run             Only validate and verify. No document processing\n      --encoding=ENCODING   endoding of input files. Default: [utf-8]\n\nAgain the output may look slightly different on your system.\n\nQuick Start\n===========\n\nUnfortunately tradition forces me to start with a *hello world*\napplication:\n\nHello World\n-----------\n\n``$ cat hello_world.ynot``\n\n.. code:: yaml\n\n    actions:\n    - print: Hello World\n\n::\n\n    $ ynot -t hello_world.ynot\n    Hello World\n\n| Not very interesting, right?\n| Not useful at all, right?\n\nBut quite simple, right?\n\nProcess input data\n------------------\n\nNow let's do something a bit more useful. Let's process data - that's\nwhat ***y!*** is made for:\n\nLet's say we have an input that represents multiple text documents with\nsections and chapters:\n\n``$ cat sample_simple.yaml``\n\n.. code:: yaml\n\n    - title: Some document title\n      sections:\n      - title: Some section title\n        chapters:\n        - title: Some chapter title\n          text: |\n            Some long text\n            with lots of paragraphs\n        - title: Some other chapter title\n          text: |\n            Some long text\n            with lots of paragraphs\n      - title: Some other section title\n        chapters:\n          - title: Some chapter title for some other section\n          text: |\n            Some long text\n            with lots of paragraphs\n    - title: Some other document title\n\n| ... just regular ``yaml`` - nothing magic.\n| Now we want to print all the titles and nothing else.\n\nFor the given input file we expect the following output:\n\n::\n\n    Some document title\n    Some section title\n    Some chapter title\n    Some other chapter title\n    Some other section title\n    Some chapter title for some other section\n    Some other document title\n\nThe program for achieving that looks as simple as this:\n\n``$ cat sample_simple.ynot``\n\n.. code:: yaml\n\n    actions:\n    - for:\n        path: '..title'\n        actions:\n        - print: '@y!{.@}'\n\nYou already may have noticed that ***y!*** programs are ``yaml`` files.\nFollowing a particular schema that we'll see later on.\n\nThe ``for`` action introduces an iterator. It iterates over all nodes\naddressed by ``path`` (``jsonpath`` expression) and performs the defined\n``actions`` on them.\n\nOne of the possible actions is ``print`` as we already saw in the hello\nworld program.\n\nHere we see that we are not limited to printing static text, but we can\nrefer to any node of the document by using the special template syntax\n``@y!{whatever}``, where ``whatever`` again is nothing else but a\n``jsonpath`` expression.\n\n``jsonpath`` expressions are evaluated relative to the path of the node\naddressed by parent actions like ``for``, unless they start with ``$`` -\nthen they are absolute ``jsonpath`` expressions, starting at the\ndocument's root.\n\nNow let's try it:\n\n::\n\n    $ ynot -t sample_simple.ynot sample01.yaml\n    Some document title\n    Some section title\n    Some chapter title\n    Some other chapter title\n    Some other section title\n    Some chapter title for some other section\n    Some other document title\n\nLooks good so far.\n\nBut while developing and testing the program we don't always want to\nmanually check if the output is correct, do we?\n\nWith verification\n~~~~~~~~~~~~~~~~~\n\n| ***y!*** has a very simple and straightforward solution.\n| You can add samples to the program:\n\n``$ cat sample_verficication_succeeding.ynot``\n\n.. code:: yaml\n\n    actions:\n    - for:\n        path: '..title'\n        actions:\n        - print: '@y!{.@}'\n\n    samples:\n      sample1:\n\n        input:\n        - title: Some document title\n          sections:\n          - title: Some section title\n            chapters:\n            - title: Some chapter title\n              text: |\n                Some long text\n                with lots of paragraphs\n            - title: Some other chapter title\n              text: |\n                Some long text\n                with lots of paragraphs\n          - title: Some other section title\n            chapters:\n            - title: Some chapter title for some other section\n              text: |\n                Some long text\n                with lots of paragraphs\n        - title: Some other document title\n\n        output: |\n          Some document title\n          Some section title\n          Some chapter title\n          Some other chapter title\n          Some other section title\n          Some chapter title for some other section\n          Some other document title\n\n... and simply verify the program against expected output for given\ninput by just invoking it without input files or with the ``--dry-run``\noption:\n\n``$ ynot -t sample_verification_succeeding.ynot --dry-run``\n\n*Oh! No output!*\n\n| That's intended. When everything is right it doesn't output anything.\n| Let's prove that in case of problems they are reported.\n\nWith failing verification\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSo we change the program slightly by prepending *``title:``* to the\nactual title:\n\n``$ cat sample_verification_failing.ynot``\n\n.. code:: yaml\n\n    actions:\n    - for:\n        path: '..title'\n        actions:\n        - print: 'title: @y!{.@}'\n\n    samples:\n      sample1:\n\n        input:\n        - title: Some document title\n          sections:\n          - title: Some section title\n            chapters:\n            - title: Some chapter title\n              text: |\n                Some long text\n                with lots of paragraphs\n            - title: Some other chapter title\n              text: |\n                Some long text\n                with lots of paragraphs\n          - title: Some other section title\n            chapters:\n            - title: Some chapter title for some other section\n              text: |\n                Some long text\n                with lots of paragraphs\n        - title: Some other document title\n\n        output: |\n          Some document title\n          Some section title\n          Some chapter title\n          Some other chapter title\n          Some other section title\n          Some chapter title for some other section\n          Some other document title\n\nNow we can see that the actual output doesn't match the expected one:\n\n::\n\n    ynot -t samples/trafos/sample_verification_failing.yaml --dry-run\n    ERROR:ynot.globals:Verifying sample sample1 failed\n\n    Expected:\n    Some document title\n    Some section title\n    Some chapter title\n    Some other chapter title\n    Some other section title\n    Some chapter title for some other section\n    Some other document title\n\n    Got:\n    title: Some document title\n    title: Some section title\n    title: Some chapter title\n    title: Some other chapter title\n    title: Some other section title\n    title: Some chapter title for some other section\n    title: Some other document title\n\n\n    ERROR:ynot.globals:Verifying sample sample1 failed for trafo <undefined>\n\nNice, isn't it?\n\nYou can add as many samples as you want - all of them will be processed\nand verified.\n\nActions\n=======\n\n``print``\n^^^^^^^^^\n\nWe already saw this action in action.\n\n``write``\n^^^^^^^^^\n\nSame as ``print`` but without trailing newline.\n\n``log``\n^^^^^^^\n\nAllows writing logging information (currently on INFO level - probably\nthis will be made configurable).\n\nWhat can be logged is intentionally limited to some attributes of the\ncurrent node:\n\n-  path\n-  pathstack\n-  node\n-  document\n\nYou can refer to these context attributes using python's string\nformatting capabilities (see `Python 2.7.14\ndocumentation <https://docs.python.org/2/library/stdtypes.html#str.format>`__):\n\n.. code:: yaml\n\n    actions:\n    - log: 'current path: {path}, current node value: {node}'\n\nSince log messages are written to stderr the output verification is not\naffected by adding log actions.\n\n``call``\n^^^^^^^^\n\nThere is a simple concept or ``routines`` that can be defined on top\nlevel of the transformator file.\n\nAll routines defined there can be called from ``actions`` as well as\nfrom ``routines``.\n\nDetails are explained in the routines section below.\n\nRoutines\n========\n\n-  Routines are defined on top level of the ``ynot`` yaml-file.\n-  Any ``routines`` key can be used as a parameter for the ``call``\n   action.\n-  A ``routines`` key maps a list of actions.\n-  ***y!*** will also support parameters for routines, but that's not\n   yet implemented.\n-  These actions can call routines recursively. The following sample\n   demonstrates this.\n\n``$ cat sample_routines.ynot``\n\n.. code:: yaml\n\n    actions:\n    - for:\n        path: '$'\n        actions:\n        - log: 'path: \"%(path)s\"'\n        - print: Depth First\n        - print: ===========\n        - call: print_list\n\n    routines:\n\n      print_list:\n      - log: \"print_list(path='%(path)s')\"\n      - for:\n          path: '[*]'\n          actions:\n          - call: print_map\n          - call: print_title\n\n      print_map:\n      - log: \"print_map(path='%(path)s')\"\n      - for:\n          path: '.*'\n          actions:\n          - call: print_list\n\n      print_title:\n      - log: \"print_title(path='%(path)s')\"\n      - for:\n          path: '.title'\n          actions:\n          - print: '@y!{.@}'\n\n\n    samples:\n\n      sample1:\n\n        input:\n        - title: Some document title\n          sections:\n          - title: Some section title\n            chapters:\n            - title: Some chapter title\n              text: |\n                Some long text\n                with lots of paragraphs\n            - title: Some other chapter title\n              text: |\n                Some long text\n                with lots of paragraphs\n          - title: Some other section title\n            chapters:\n            - title: Some chapter title for some other section\n              text: |\n                Some long text\n                with lots of paragraphs\n        - title: Some other document title\n\n        output: |\n          Depth First\n          ===========\n          Some chapter title\n          Some other chapter title\n          Some section title\n          Some chapter title for some other section\n          Some other section title\n          Some document title\n          Some other document title\n\nCurrently under implementation\n==============================\n\nVariables support\n-----------------\n\nVariables can be set during execution. They are saved in the current\nnode's context.\n\nWhen accessing a variable, variables from all parent nodes' contexts are\nvisible as well.\n\nVariables can be accessed programmatically or as part of\nvalue-templates.\n\n-  Value template to be substituted by a variable value: ``${...}``\n-  Path-match template to be substituted by a single match result:\n   ``@y!{...}``\n-  Path-multimatch template to be substituted by the\n   string-representation of multiple matches: ``@y!*{...}``\n\n.. code:: yaml\n\n    actions:\n    - set:\n        key: myMagicNumber\n        value: 42\n    - print: '${myMagicNumber}'\n\nCall parameter support\n----------------------\n\n.. code:: yaml\n\n    actions:\n    - call:\n        routine: some_routine\n        parameters:\n          paramX: some value\n          paramY: some value\n\nNot yet implemented\n===================\n\n... nor verified ...\n\nDocumenting\n-----------\n\nGenerating gfm markdown from ``.ynot`` transformators will be supported\nsoon:\n\n.. code:: yaml\n\n    id: trafo-01\n    title: Transformator for processing structured documentation\n    desccription: |\n      `trafo-01` does *this* and *that*...\n\n      ... and furthermore ...\n      - this\n      - and this\n    actions:\n    - ...\n    samples:\n      sample1:\n        title: Title for this sample\n        description: |\n          Some description for this sample\n          ... which can again contain markdown, like\n          - Does this\n          - and does that\n        input:\n          document1:\n            title: doc1\n            chapters:\n              capter1:\n                title: Some title\n                text: |\n                  Some \n                  very long\n                  text\n              capter2:\n                title: Some title\n                text: |\n                  Some \n                  very long\n                  text\n          document2:\n            title: doc2\n            chapters:\n              capter1:\n                title: Some title\n                text: |\n                  Some \n                  very long\n                  text\n              capter2:\n                title: Some title\n                text: |\n                  Some \n                  very long\n                  text\n        output: |\n          This is the expected output\n\n          It may be a table of contents as well as a representation of the whole document.\n          ...\n\nWill generate something like this:\n\n--------------\n\ntrafo-01\n========\n\nTransformator for processing structured documentation\n-----------------------------------------------------\n\n``trafo-01`` does *this* and *that*...\n\n... and furthermore ...\n\n-  this\n-  and this\n\n.. actions-1:\n\nactions\n-------\n\n.. code:: yaml\n\n    actions:\n    - ...\n\nsamples\n-------\n\nsample1\n~~~~~~~\n\nTitle for this sample\n^^^^^^^^^^^^^^^^^^^^^\n\nSome description for this sample ... which can again contain markdown,\nlike\n\n-  Does this\n-  and does that\n\ninput\n^^^^^\n\n.. code:: yaml\n\n    document1:\n      title: doc1\n      chapters:\n        capter1:\n          title: Some title\n          text: |\n            Some \n            very long\n            text\n        capter2:\n          title: Some title\n          text: |\n            Some \n            very long\n            text\n    document2:\n      title: doc2\n      chapters:\n        capter1:\n          title: Some title\n          text: |\n            Some \n            very long\n            text\n        capter2:\n          title: Some title\n          text: |\n            Some \n            very long\n            text\n\noutput\n^^^^^^\n\n::\n\n    This is the expected output\n\n    It may be a table of contents as well as a representation of the whole document.\n    ...\n\n--------------\n\nSorting\n-------\n\nMaybe sufficiently supported out of the box by jsonpath_ng extensions.\nTo be verified ...\n\nAlternatively something like this might be implemented\n\n.. code:: yaml\n\n    actions:\n    - for:\n        path: '$.some.path'\n        sorting:\n          order: descending\n          criteria:\n          - '.some_field'\n          - '.some_other_field'\n        actions:\n        - print: whatever\n\nGrouping\n--------\n\n.. code:: yaml\n\n    actions:\n    - for:\n        path: '$.some.path'\n        grouping:\n          criteria:\n          - '.some_field'\n          - '.some_other_field'\n          having:\n          - 'whatever'\n          - 'whatever'\n        actions:\n        - print: whatever\n\nConditional processing\n----------------------\n\n.. code:: yaml\n\n    actions:\n    - if:\n      - and:\n        - value1: some value\n          comparator: equals\n          value2: some other value\n        - value1: some value\n          comparator: equals\n          value2: some other value\n        - or:\n          - value1: some value\n            comparator: equals\n            value2: some other value\n      then:\n      - print: matched if branch\n      else:\n      - print: matched else branch\n\nTransormator/Document processing order\n--------------------------------------\n\n... for multi-document transformator yamls\n\nAllow command line switch like ``--processing-order=templates-first`` or\n``--processing-order=documents-first``\n\n.. command-line-option-for-defining-template-patterns:\n\nCommand line option for defining template patterns.\n---------------------------------------------------\n\nSomething like ...\n\n``template-pattern='{separator: \"@\", idpattern: \"[{}+]\"}'``\n\nConnecting to data sources\n--------------------------\n\nlike *Elasticsearch*, *Redis*, *Cassandra*, *MySQL*, *Kafka*, ... ...\n...\n\n\n",
    "docs_url": null,
    "download_url": "https://github.com/yaccob/ynot/archive/0.2.4.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ynot/ynot",
    "keywords": "yaml,json,transform,xslt,jsonpath,json-path,dump,convert,validate,schema",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ynot",
    "platform": "",
    "project_url": "https://pypi.org/project/ynot/",
    "release_url": "https://pypi.org/project/ynot/0.2.4/",
    "requires_dist": [
      "jsonschema",
      "jsonpath-ng",
      "PyYaml"
    ],
    "requires_python": "",
    "summary": "Yaml-based No-xml Transformation",
    "version": "0.2.4"
  },
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "470a15327a6f1110ffdd92de2bb6ff2b",
          "sha256": "35c979540d130c5fd1f6733cd0ce7321d05a31211e4a81a7c7146bcd2db4e886"
        },
        "downloads": -1,
        "filename": "ynot-0.2.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "470a15327a6f1110ffdd92de2bb6ff2b",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 8074,
        "upload_time": "2018-02-03T04:05:30",
        "url": "https://files.pythonhosted.org/packages/9a/46/82e00547e095cec2f637c6549bbc2cd3b82a55eee7c8df0ead2d896bc4c7/ynot-0.2.0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a00806c71c62b4e93da4d7e359810c38",
          "sha256": "d3f899c285b1e6c00b0f3a3cb0d44072f92183504ee4ca9a536086781184e8f1"
        },
        "downloads": -1,
        "filename": "ynot-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a00806c71c62b4e93da4d7e359810c38",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9501,
        "upload_time": "2018-02-03T04:05:31",
        "url": "https://files.pythonhosted.org/packages/ac/00/06b5ef22811b13beeeb245c8a561652ef5d2e45c6c99324f7cf70011a1d7/ynot-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f020d4483b34a8c6fe1e21cbc669c484",
          "sha256": "621a9971219fe2e569ee30a056cf44a930d00f724cc3c552046436c5a873c2d9"
        },
        "downloads": -1,
        "filename": "ynot-0.2.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "f020d4483b34a8c6fe1e21cbc669c484",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 10933,
        "upload_time": "2018-02-03T12:10:38",
        "url": "https://files.pythonhosted.org/packages/04/dd/23275ce91dab6beec1c9ac7df9b4882269f65d19d1800bed56d510370a33/ynot-0.2.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b50669ea8351d893906fbcbb05c6242b",
          "sha256": "d1647107754d7688f9ab58843b788c9e3042c26f7329b4f01a9cfaf069cb9789"
        },
        "downloads": -1,
        "filename": "ynot-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b50669ea8351d893906fbcbb05c6242b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12512,
        "upload_time": "2018-02-03T12:10:42",
        "url": "https://files.pythonhosted.org/packages/20/a1/05c727f0091a986b3076f507d861fdc4165aee8a62852a80ff2bf4b372e7/ynot-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ba6ccb93daae42ae7ebd81fa19d5b3e4",
          "sha256": "aed9673b1f7285c4c919a922d5eaae285cf6e7fed93cdc056951c1e673222f55"
        },
        "downloads": -1,
        "filename": "ynot-0.2.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba6ccb93daae42ae7ebd81fa19d5b3e4",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 13577,
        "upload_time": "2018-02-03T14:11:49",
        "url": "https://files.pythonhosted.org/packages/8b/8f/562302aebf81b366a177bd7d9ac91d4920593428ab4aceb606c69f7a0945/ynot-0.2.2-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "db6f607d20b0a01831e5bfd0b16bd257",
          "sha256": "525be4bf83afe9aa557f902a04554d53b991d6c3b452ff040bfa7a66362327d9"
        },
        "downloads": -1,
        "filename": "ynot-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "db6f607d20b0a01831e5bfd0b16bd257",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16131,
        "upload_time": "2018-02-03T14:11:51",
        "url": "https://files.pythonhosted.org/packages/1f/16/eb44e72dc36aca59399c043c53ca82076af91413587fec609d7a2e379241/ynot-0.2.2.tar.gz"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b56940f4608a4ed31f67f71da7bc3e58",
          "sha256": "5badef76dc5340b17a58fa4b51ee7f6f033c266fad1b31ec9f4f5852269b177f"
        },
        "downloads": -1,
        "filename": "ynot-0.2.3-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "b56940f4608a4ed31f67f71da7bc3e58",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 16972,
        "upload_time": "2018-02-04T02:24:17",
        "url": "https://files.pythonhosted.org/packages/78/32/9782617431b6d3c801c3d8d5f896aa26b58c2b2e435bd0e265efcfd6dd63/ynot-0.2.3-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6a48050744223f033c3bc722d7b33ff0",
          "sha256": "1c3a772ca7a460302c86dc25da2d6b77e15ff67ae77a9336af15f1ce7bccbf43"
        },
        "downloads": -1,
        "filename": "ynot-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6a48050744223f033c3bc722d7b33ff0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20297,
        "upload_time": "2018-02-04T02:24:19",
        "url": "https://files.pythonhosted.org/packages/10/6b/93e16d3c681f1abec0a798dd5739dc03a214e6571396a10eb9dbe76e2dee/ynot-0.2.3.tar.gz"
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "53870513a8c63e2428409718eca3eeda",
          "sha256": "e59df256ebc9f9583999f10b1d3f8dcc9fab149f588e905af2f2922a1cb49f69"
        },
        "downloads": -1,
        "filename": "ynot-0.2.4-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "53870513a8c63e2428409718eca3eeda",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 17318,
        "upload_time": "2018-02-04T06:05:43",
        "url": "https://files.pythonhosted.org/packages/4e/3e/9cac746608cbe3cf191d5c8cf73076173407077a5d0f13c21477ef1d0997/ynot-0.2.4-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a89c0d6f022d78a907d90873fb490bd6",
          "sha256": "0226f0d8a4b2bbd9a6b6b8564d5be63c54a25499f6a6691421fc7ac2dfc911ad"
        },
        "downloads": -1,
        "filename": "ynot-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a89c0d6f022d78a907d90873fb490bd6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20435,
        "upload_time": "2018-02-04T06:05:45",
        "url": "https://files.pythonhosted.org/packages/5a/17/d25257986a3eeda830d3589f74d98a2944c1054c11936661790f86a6b458/ynot-0.2.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "53870513a8c63e2428409718eca3eeda",
        "sha256": "e59df256ebc9f9583999f10b1d3f8dcc9fab149f588e905af2f2922a1cb49f69"
      },
      "downloads": -1,
      "filename": "ynot-0.2.4-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "53870513a8c63e2428409718eca3eeda",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 17318,
      "upload_time": "2018-02-04T06:05:43",
      "url": "https://files.pythonhosted.org/packages/4e/3e/9cac746608cbe3cf191d5c8cf73076173407077a5d0f13c21477ef1d0997/ynot-0.2.4-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "a89c0d6f022d78a907d90873fb490bd6",
        "sha256": "0226f0d8a4b2bbd9a6b6b8564d5be63c54a25499f6a6691421fc7ac2dfc911ad"
      },
      "downloads": -1,
      "filename": "ynot-0.2.4.tar.gz",
      "has_sig": false,
      "md5_digest": "a89c0d6f022d78a907d90873fb490bd6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 20435,
      "upload_time": "2018-02-04T06:05:45",
      "url": "https://files.pythonhosted.org/packages/5a/17/d25257986a3eeda830d3589f74d98a2944c1054c11936661790f86a6b458/ynot-0.2.4.tar.gz"
    }
  ]
}