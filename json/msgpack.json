{
  "info": {
    "author": "INADA Naoki",
    "author_email": "songofacandy@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "======================\nMessagePack for Python\n======================\n\n.. image:: https://travis-ci.org/msgpack/msgpack-python.svg?branch=master\n   :target: https://travis-ci.org/msgpack/msgpack-python\n   :alt: Build Status\n\n.. image:: https://readthedocs.org/projects/msgpack-python/badge/?version=latest\n   :target: https://msgpack-python.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\nWhat's this\n-----------\n\n`MessagePack <https://msgpack.org/>`_ is an efficient binary serialization format.\nIt lets you exchange data among multiple languages like JSON.\nBut it's faster and smaller.\nThis package provides CPython bindings for reading and writing MessagePack data.\n\nInstall\n-------\n\n::\n\n   $ pip install msgpack\n\nPyPy\n^^^^\n\nmsgpack provides a pure Python implementation.  PyPy can use this.\n\nWindows\n^^^^^^^\n\nWhen you can't use a binary distribution, you need to install Visual Studio\nor Windows SDK on Windows.\nWithout extension, using pure Python implementation on CPython runs slowly.\n\nFor Python 2.7, `Microsoft Visual C++ Compiler for Python 2.7 <https://www.microsoft.com/en-us/download/details.aspx?id=44266>`_\nis recommended solution.\n\nFor Python 3.5, `Microsoft Visual Studio 2015 <https://www.visualstudio.com/en-us/products/vs-2015-product-editions.aspx>`_\nCommunity Edition or Express Edition can be used to build extension module.\n\n\nHow to use\n----------\n\nOne-shot pack & unpack\n^^^^^^^^^^^^^^^^^^^^^^\n\nUse ``packb`` for packing and ``unpackb`` for unpacking.\nmsgpack provides ``dumps`` and ``loads`` as an alias for compatibility with\n``json`` and ``pickle``.\n\n``pack`` and ``dump`` packs to a file-like object.\n``unpack`` and ``load`` unpacks from a file-like object.\n\n.. code-block:: pycon\n\n   >>> import msgpack\n   >>> msgpack.packb([1, 2, 3], use_bin_type=True)\n   '\\x93\\x01\\x02\\x03'\n   >>> msgpack.unpackb(_)\n   [1, 2, 3]\n\n``unpack`` unpacks msgpack's array to Python's list, but can also unpack to tuple:\n\n.. code-block:: pycon\n\n   >>> msgpack.unpackb(b'\\x93\\x01\\x02\\x03', use_list=False)\n   (1, 2, 3)\n\nYou should always specify the ``use_list`` keyword argument for backward compatibility.\nSee performance issues relating to `use_list option`_ below.\n\nRead the docstring for other options.\n\n\nStreaming unpacking\n^^^^^^^^^^^^^^^^^^^\n\n``Unpacker`` is a \"streaming unpacker\". It unpacks multiple objects from one\nstream (or from bytes provided through its ``feed`` method).\n\n.. code-block:: python\n\n   import msgpack\n   from io import BytesIO\n\n   buf = BytesIO()\n   for i in range(100):\n      buf.write(msgpack.packb(range(i), use_bin_type=True))\n\n   buf.seek(0)\n\n   unpacker = msgpack.Unpacker(buf)\n   for unpacked in unpacker:\n       print(unpacked)\n\n\nPacking/unpacking of custom data type\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIt is also possible to pack/unpack custom data types. Here is an example for\n``datetime.datetime``.\n\n.. code-block:: python\n\n    import datetime\n    import msgpack\n\n    useful_dict = {\n        \"id\": 1,\n        \"created\": datetime.datetime.now(),\n    }\n\n    def decode_datetime(obj):\n        if b'__datetime__' in obj:\n            obj = datetime.datetime.strptime(obj[\"as_str\"], \"%Y%m%dT%H:%M:%S.%f\")\n        return obj\n\n    def encode_datetime(obj):\n        if isinstance(obj, datetime.datetime):\n            return {'__datetime__': True, 'as_str': obj.strftime(\"%Y%m%dT%H:%M:%S.%f\")}\n        return obj\n\n\n    packed_dict = msgpack.packb(useful_dict, default=encode_datetime, use_bin_type=True)\n    this_dict_again = msgpack.unpackb(packed_dict, object_hook=decode_datetime)\n\n``Unpacker``'s ``object_hook`` callback receives a dict; the\n``object_pairs_hook`` callback may instead be used to receive a list of\nkey-value pairs.\n\nExtended types\n^^^^^^^^^^^^^^\n\nIt is also possible to pack/unpack custom data types using the **ext** type.\n\n.. code-block:: pycon\n\n    >>> import msgpack\n    >>> import array\n    >>> def default(obj):\n    ...     if isinstance(obj, array.array) and obj.typecode == 'd':\n    ...         return msgpack.ExtType(42, obj.tostring())\n    ...     raise TypeError(\"Unknown type: %r\" % (obj,))\n    ...\n    >>> def ext_hook(code, data):\n    ...     if code == 42:\n    ...         a = array.array('d')\n    ...         a.fromstring(data)\n    ...         return a\n    ...     return ExtType(code, data)\n    ...\n    >>> data = array.array('d', [1.2, 3.4])\n    >>> packed = msgpack.packb(data, default=default)\n    >>> unpacked = msgpack.unpackb(packed, ext_hook=ext_hook)\n    >>> data == unpacked\n    True\n\n\nAdvanced unpacking control\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAs an alternative to iteration, ``Unpacker`` objects provide ``unpack``,\n``skip``, ``read_array_header`` and ``read_map_header`` methods. The former two\nread an entire message from the stream, respectively de-serialising and returning\nthe result, or ignoring it. The latter two methods return the number of elements\nin the upcoming container, so that each element in an array, or key-value pair\nin a map, can be unpacked or skipped individually.\n\nEach of these methods may optionally write the packed data it reads to a\ncallback function:\n\n.. code-block:: python\n\n    from io import BytesIO\n\n    def distribute(unpacker, get_worker):\n        nelems = unpacker.read_map_header()\n        for i in range(nelems):\n            # Select a worker for the given key\n            key = unpacker.unpack()\n            worker = get_worker(key)\n\n            # Send the value as a packed message to worker\n            bytestream = BytesIO()\n            unpacker.skip(bytestream.write)\n            worker.send(bytestream.getvalue())\n\n\nNotes\n-----\n\nstring and binary type\n^^^^^^^^^^^^^^^^^^^^^^\n\nEarly versions of msgpack didn't distinguish string and binary types (like Python 1).\nThe type for representing both string and binary types was named **raw**.\n\nFor backward compatibility reasons, msgpack-python will still default all\nstrings to byte strings, unless you specify the `use_bin_type=True` option in\nthe packer. If you do so, it will use a non-standard type called **bin** to\nserialize byte arrays, and **raw** becomes to mean **str**. If you want to\ndistinguish **bin** and **raw** in the unpacker, specify `encoding='utf-8'`.\n\n**In future version, default value of ``use_bin_type`` will be changed to ``False``.\nTo avoid this change will break your code, you must specify it explicitly\neven when you want to use old format.**\n\nNote that Python 2 defaults to byte-arrays over Unicode strings:\n\n.. code-block:: pycon\n\n    >>> import msgpack\n    >>> msgpack.unpackb(msgpack.packb([b'spam', u'eggs']))\n    ['spam', 'eggs']\n    >>> msgpack.unpackb(msgpack.packb([b'spam', u'eggs'], use_bin_type=True),\n                        encoding='utf-8')\n    ['spam', u'eggs']\n\nThis is the same code in Python 3 (same behaviour, but Python 3 has a\ndifferent default):\n\n.. code-block:: pycon\n\n    >>> import msgpack\n    >>> msgpack.unpackb(msgpack.packb([b'spam', u'eggs']))\n    [b'spam', b'eggs']\n    >>> msgpack.unpackb(msgpack.packb([b'spam', u'eggs'], use_bin_type=True),\n                        encoding='utf-8')\n    [b'spam', 'eggs']\n\n\next type\n^^^^^^^^\n\nTo use the **ext** type, pass ``msgpack.ExtType`` object to packer.\n\n.. code-block:: pycon\n\n    >>> import msgpack\n    >>> packed = msgpack.packb(msgpack.ExtType(42, b'xyzzy'))\n    >>> msgpack.unpackb(packed)\n    ExtType(code=42, data='xyzzy')\n\nYou can use it with ``default`` and ``ext_hook``. See below.\n\n\nNote about performance\n----------------------\n\nGC\n^^\n\nCPython's GC starts when growing allocated object.\nThis means unpacking may cause useless GC.\nYou can use ``gc.disable()`` when unpacking large message.\n\nuse_list option\n^^^^^^^^^^^^^^^\nList is the default sequence type of Python.\nBut tuple is lighter than list.\nYou can use ``use_list=False`` while unpacking when performance is important.\n\nPython's dict can't use list as key and MessagePack allows array for key of mapping.\n``use_list=False`` allows unpacking such message.\nAnother way to unpacking such object is using ``object_pairs_hook``.\n\n\nDevelopment\n-----------\n\nTest\n^^^^\n\nMessagePack uses `pytest` for testing.\nRun test with following command:\n\n    $ py.test\n\n\n..\n    vim: filetype=rst",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://msgpack.org/",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "msgpack",
    "platform": "",
    "project_url": "https://pypi.org/project/msgpack/",
    "release_url": "https://pypi.org/project/msgpack/0.5.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "MessagePack (de)serializer.",
    "version": "0.5.0"
  },
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f178fba9febc5cc3ba152c46de075e2f",
          "sha256": "c7aa35c66ed276bf4a4220531abcee84992b9a312d76afb920d4cbae73d142c4"
        },
        "downloads": -1,
        "filename": "msgpack-0.5.0-cp36-cp36m-win32.whl",
        "has_sig": false,
        "md5_digest": "f178fba9febc5cc3ba152c46de075e2f",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "size": 75979,
        "upload_time": "2018-01-06T18:11:05",
        "url": "https://files.pythonhosted.org/packages/f2/e4/674e4b480d9bbcce1ddc283b3980e0a7a048cef9a8b61a390b833a33c4b8/msgpack-0.5.0-cp36-cp36m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "602656892c583eec666c517478dbbe01",
          "sha256": "c165c44abc98ac8ccf921a5f0506b60180a20896815c6ff8c275d7646eb20702"
        },
        "downloads": -1,
        "filename": "msgpack-0.5.0-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "602656892c583eec666c517478dbbe01",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "size": 84853,
        "upload_time": "2018-01-06T18:10:41",
        "url": "https://files.pythonhosted.org/packages/a4/bc/03ebff601d7a9967cbed0dd4ab703d46eab5dcd5252810032cecfdb007a5/msgpack-0.5.0-cp36-cp36m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6d1df33fe19dcde7bde62f808f9c4488",
          "sha256": "9ed78ef17937222b0467566487bab1ca1bb28158f66c6528ff3d5aced93ff49d"
        },
        "downloads": -1,
        "filename": "msgpack-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6d1df33fe19dcde7bde62f808f9c4488",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 142054,
        "upload_time": "2018-01-06T18:07:36",
        "url": "https://files.pythonhosted.org/packages/c8/2c/7ed8a002ebf55e6b814b4b643d664f0a16aa7c0fa94987f9848b0b0d28f4/msgpack-0.5.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f178fba9febc5cc3ba152c46de075e2f",
        "sha256": "c7aa35c66ed276bf4a4220531abcee84992b9a312d76afb920d4cbae73d142c4"
      },
      "downloads": -1,
      "filename": "msgpack-0.5.0-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "f178fba9febc5cc3ba152c46de075e2f",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "size": 75979,
      "upload_time": "2018-01-06T18:11:05",
      "url": "https://files.pythonhosted.org/packages/f2/e4/674e4b480d9bbcce1ddc283b3980e0a7a048cef9a8b61a390b833a33c4b8/msgpack-0.5.0-cp36-cp36m-win32.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "602656892c583eec666c517478dbbe01",
        "sha256": "c165c44abc98ac8ccf921a5f0506b60180a20896815c6ff8c275d7646eb20702"
      },
      "downloads": -1,
      "filename": "msgpack-0.5.0-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "602656892c583eec666c517478dbbe01",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "size": 84853,
      "upload_time": "2018-01-06T18:10:41",
      "url": "https://files.pythonhosted.org/packages/a4/bc/03ebff601d7a9967cbed0dd4ab703d46eab5dcd5252810032cecfdb007a5/msgpack-0.5.0-cp36-cp36m-win_amd64.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "6d1df33fe19dcde7bde62f808f9c4488",
        "sha256": "9ed78ef17937222b0467566487bab1ca1bb28158f66c6528ff3d5aced93ff49d"
      },
      "downloads": -1,
      "filename": "msgpack-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6d1df33fe19dcde7bde62f808f9c4488",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 142054,
      "upload_time": "2018-01-06T18:07:36",
      "url": "https://files.pythonhosted.org/packages/c8/2c/7ed8a002ebf55e6b814b4b643d664f0a16aa7c0fa94987f9848b0b0d28f4/msgpack-0.5.0.tar.gz"
    }
  ]
}