{
  "info": {
    "author": "Mario Orlandi",
    "author_email": "morlandi@brainstorm.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "=============================\nDjango Task\n=============================\n\n.. image:: https://badge.fury.io/py/django-task.svg\n    :target: https://badge.fury.io/py/django-task\n\n.. image:: https://travis-ci.org/morlandi/django-task.svg?branch=master\n    :target: https://travis-ci.org/morlandi/django-task\n\n.. image:: https://codecov.io/gh/morlandi/django-task/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/morlandi/django-task\n\nA Django app to run new background tasks from either admin or cron, and inspect task history from admin\n\nQuickstart\n----------\n\nInstall Django Task::\n\n    pip install django-task\n\nAdd it to your `INSTALLED_APPS`:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'django_rq',\n        'django_task',\n        ...\n    )\n\nAdd Django Task's URL patterns:\n\n.. code-block:: python\n\n    urlpatterns = [\n        ...\n        url(r'^django_task/', include('django_task.urls', namespace='django_task')),\n        ...\n    ]\n\nFeatures\n--------\n\n**Purposes**\n\n    - create async tasks programmatically\n    - create and monitor async tasks from admin\n    - log all tasks in the database for later inspection\n\n**Details**\n\n1. each specific job is described my a Model derived from models.Task, which\n   is responsible for:\n\n    - selecting the name for the consumer queue among available queues\n    - collecting and saving all parameters required by the associated job\n    - running the specific job asyncronously\n\n2. a new job can be run either:\n\n    - creating a Task from the Django admin\n    - creating a Task from code, then calling Task.run()\n\n3. job execution workflow:\n\n    - job execution is triggered by task.run(async)\n    - job will receive the task.id, and retrieve paramerts from it (task.retrieve_params_as_dict())\n    - on start, job will update task status to 'STARTED' and save job.id for reference\n    - during execution, the job can update the progress indicator\n    - on completion, task status is finally updated to either 'SUCCESS' or 'FAILURE'\n    - See example.jobs.count_beans for an example\n\n**Execute**\n\nRun consumer:\n\n.. code:: bash\n\n    python manage.py runserver\n\n\nRun worker(s):\n\n.. code:: bash\n\n    python manage.py rqworker low high default\n    python manage.py rqworker low high default\n    ...\n\n**Sample Task**\n\n.. code:: python\n\n    from django.db import models\n    from django.conf import settings\n    from django_task.models import Task\n\n\n    class SendEmailTask(Task):\n\n        sender = models.CharField(max_length=256, null=False, blank=False)\n        recipients = models.TextField(null=False, blank=False,\n            help_text='put addresses in separate rows')\n        subject = models.CharField(max_length=256, null=False, blank=False)\n        message = models.TextField(null=False, blank=True)\n\n        TASK_QUEUE = settings.QUEUE_LOW\n        DEFAULT_VERBOSITY = 2\n\n        @staticmethod\n        def get_jobfunc():\n            from .jobs import send_email\n            return send_email\n\n**Sample Job**\n\n.. code:: python\n\n    from __future__ import print_function\n    import redis\n    import logging\n    from django.conf import settings\n    from .models import SendEmailTask\n    from rq import get_current_job\n    from django_rq import job\n\n    @job(SendEmailTask.TASK_QUEUE)\n    def send_email(task_id):\n\n        task = None\n        result = 'SUCCESS'\n        failure_reason = ''\n\n        try:\n\n            # this raises a \"Could not resolve a Redis connection\" exception in sync mode\n            #job = get_current_job()\n            job = get_current_job(connection=redis.Redis.from_url(settings.REDIS_URL))\n\n            #task = SendEmailTask.objects.get(id=task_id)\n            task = SendEmailTask.get_task_from_id(task_id)\n            task.set_status(status='STARTED', job_id=job.get_id())\n\n            params = task.retrieve_params_as_dict()\n\n            recipient_list = params['recipients'].split()\n            sender = params['sender'].strip()\n            subject = params['subject'].strip()\n            message = params['message']\n\n            from django.core.mail import send_mail\n            send_mail(subject, message, sender, recipient_list)\n\n        except Exception as e:\n            if task:\n                task.log(logging.ERROR, str(e))\n            result = 'FAILURE'\n            failure_reason = str(e)\n\n        finally:\n            if task:\n                task.set_status(status=result, failure_reason=failure_reason)\n\n**Sample management command**\n\n.. code:: python\n\n    from django_task.task_command import TaskCommand\n\n    class Command(TaskCommand):\n\n        def add_arguments(self, parser):\n            super(Command, self).add_arguments(parser)\n            parser.add_argument('sender')\n            parser.add_argument('subject')\n            parser.add_argument('message')\n            parser.add_argument('-r', '--recipients', nargs='*')\n\n        def handle(self, *args, **options):\n            from tasks.models import SendEmailTask\n\n            # transform the list of recipents into text\n            # (one line for each recipient)\n            options['recipients'] = '\\n'.join(options['recipients']) if options['recipients'] is not None else ''\n\n            # format multiline message\n            options['message'] = options['message'].replace('\\\\n', '\\n')\n\n            self.run_task(SendEmailTask, **options)\n\n**Deferred Task retrieval to avoid job vs. Task race condition**\n\nAn helper Task.get_task_from_id() classmethod is supplied to retrieve Task object\nfrom task_id safely.\n\n*Task queues create a new type of race condition. Why ?\nBecause message queues are fast !\nHow fast ?\nFaster than databases.*\n\nSee:\n\nhttps://speakerdeck.com/siloraptor/django-tasty-salad-dos-and-donts-using-celery\n\n\n**Howto separate jobs for different instances on the same machine**\n\nTo sepatare jobs for different instances on the same machine (or more precisely\nfor the same redis connection), override queues names for each instance;\n\nfor example:\n\n.. code:: python\n\n    # file \"settings.py\"\n\n    REDIS_URL = 'redis://localhost:6379/0'\n    ...\n\n    #\n    # RQ config\n    #\n\n    RQ_PREFIX = \"myproject_\"\n    QUEUE_DEFAULT = RQ_PREFIX + 'default'\n    QUEUE_HIGH = RQ_PREFIX + 'high'\n    QUEUE_LOW = RQ_PREFIX + 'low'\n\n    RQ_QUEUES = {\n        QUEUE_DEFAULT: {\n            'URL': REDIS_URL,\n            #'PASSWORD': 'some-password',\n            'DEFAULT_TIMEOUT': 360,\n        },\n        QUEUE_HIGH: {\n            'URL': REDIS_URL,\n            'DEFAULT_TIMEOUT': 500,\n        },\n        QUEUE_LOW: {\n            'URL': REDIS_URL,\n            #'ASYNC': False,\n        },\n    }\n\n    RQ_SHOW_ADMIN_LINK = False\n    DJANGOTASK_LOG_ROOT = os.path.abspath(os.path.join(BASE_DIR, '..', 'protected', 'tasklog'))\n    DJANGOTASK_ALWAYS_EAGER = False\n\nthen run worker as follows:\n\n.. code:: python\n\n    python manage.py rqworker myproject_default\n\n**Howto schedule jobs with cron**\n\nCall management command 'count_beans', which in turn executes the required job.\n\nFor example::\n\n    SHELL=/bin/bash\n    PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n\n    0 * * * *  {{username}}    timeout 55m {{django.pythonpath}}/python {{django.website_home}}/manage.py count_beans 1000 >> {{django.logto}}/cron.log 2>&1\n\nA base class TaskCommand has been provided to simplify the creation of any specific\ntask-related management commad;\n\na derived management command is only responsible for:\n\n- defining suitable command-line parameters\n- selecting the specific Task class and job function\n\nfor example:\n\n.. code:: python\n\n    from django_task.task_command import TaskCommand\n\n\n    class Command(TaskCommand):\n\n        def add_arguments(self, parser):\n            super(Command, self).add_arguments(parser)\n            parser.add_argument('num_beans', type=int)\n\n        def handle(self, *args, **options):\n            from tasks.models import CountBeansTask\n            self.run_task(CountBeansTask, **options)\n\nScreenshots\n-----------\n\n.. image:: example/etc/screenshot_001.png\n\n.. image:: example/etc/screenshot_002.png\n\n\nApp settings\n------------\n\nDJANGOTASK_LOG_ROOT\n    Path for log files.\n\n    Default: None\n\n    Example: os.path.abspath(os.path.join(BASE_DIR, '..', 'protected', 'tasklog'))\n\nDJANGOTASK_ALWAYS_EAGER\n\n    When True, all task are execute syncronously (useful for debugging and unit testing).\n\n    Default: False\n\n\nRunning Tests\n-------------\n\n* TODO\n\nDoes the code actually work?\n\n::\n\n    source <YOURVIRTUALENV>/bin/activate\n    (myenv) $ pip install tox\n    (myenv) $ tox\n\nCredits\n-------\n\nReferences:\n\n- `A simple app that provides django integration for RQ (Redis Queue) <https://github.com/ui/django-rq>`_\n- `Asynchronous tasks in django with django-rq <https://spapas.github.io/2015/01/27/async-tasks-with-django-rq/>`_\n- `django-rq redux: advanced techniques and tools <https://spapas.github.io/2015/09/01/django-rq-redux/>`_\n- `Benchmark: Shared vs. Dedicated Redis Instances <https://redislabs.com/blog/benchmark-shared-vs-dedicated-redis-instances/>`_\n- `Django tasty salad - DOs and DON'Ts using Celery by Roberto Rosario <https://speakerdeck.com/siloraptor/django-tasty-salad-dos-and-donts-using-celery>`_\n\nTools used in rendering this package:\n\n*  Cookiecutter_\n*  `cookiecutter-djangopackage`_\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage\n\n\n\n\nHistory\n=======\n\n0.1.12\n------\n* Deferred Task retrieval to avoid job vs. Task race condition\n* Improved Readme\n\n0.1.11\n------\n* superuser can view all tasks, while other users have access to their own tasks only\n* js fix\n\n0.1.10\n------\n* prevent task.failure_reason overflow\n\n0.1.9\n-----\n* app settings\n\n0.1.8\n-----\n* always start job from task.run() to prevent any possible race condition\n* task.run(async) can now accept async=False\n\n0.1.7\n-----\n* javascript: use POST to retrieve tasks state for UI update to prevent URL length limit exceed\n\n0.1.6\n-----\n* Improved ui for TaskAdmin\n* Fix unicode literals for Python3\n\n0.1.5\n-----\n* fixes for Django 1.10\n* send_email management command example added\n\n0.1.4\n-----\n* Fix OneToOneRel import for Django < 1.9\n\n0.1.3\n-----\n* Polymorphic behaviour or Task.get_child() restored\n\n0.1.2\n-----\n* TaskCommand.run_task() renamed as TaskCommand.run_job()\n* New TaskCommand.run_task() creates a Task, then runs it;\n  this guarantees that something is traced even when background job will fail\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/morlandi/django-task",
    "keywords": "django-task",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-task",
    "platform": "",
    "project_url": "https://pypi.org/project/django-task/",
    "release_url": "https://pypi.org/project/django-task/0.2.0/",
    "requires_dist": [
      "django-rq (>=0.9.5)",
      "django (>=1.8.0)"
    ],
    "requires_python": "",
    "summary": "A Django app to run new background tasks from either admin or cron, and inspect task history from admin",
    "version": "0.2.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6e6c4c7a2bc08c56303e81d1d6d1bc24",
          "sha256": "a0f11cfaa363631f0dfb995cb7c292bda2f345438936ecc8c91fddafc736678c"
        },
        "downloads": -1,
        "filename": "django_task-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6e6c4c7a2bc08c56303e81d1d6d1bc24",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 25618,
        "upload_time": "2017-08-25T17:49:57",
        "url": "https://files.pythonhosted.org/packages/61/c2/903f8401a4a9acad1e8f48b77e39c9e1a88b85aacd51f1cff413ed21dafc/django_task-0.1.0-py2.py3-none-any.whl"
      }
    ],
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "206c43b27adfb480dbfa1fe62e9038b6",
          "sha256": "34ad84ccac67999b588bf5ea95fa33b5c460f8f93c5c3a47840d69739162d7fa"
        },
        "downloads": -1,
        "filename": "django_task-0.1.10-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "206c43b27adfb480dbfa1fe62e9038b6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 28060,
        "upload_time": "2017-11-27T23:00:49",
        "url": "https://files.pythonhosted.org/packages/eb/49/349796f0181556f21404ae0ce80e831c504f9f8a110fa656de20fd16e012/django_task-0.1.10-py2.py3-none-any.whl"
      }
    ],
    "0.1.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1893f7e0ce40fa2030ec229cd9fc3db7",
          "sha256": "edd4c407fe2c44fa9d05cfda78407ae9014752b09c8d3c3eb4c57a1579ec2754"
        },
        "downloads": -1,
        "filename": "django_task-0.1.11-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1893f7e0ce40fa2030ec229cd9fc3db7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 28301,
        "upload_time": "2017-12-08T22:35:27",
        "url": "https://files.pythonhosted.org/packages/01/81/995874694a295675d9b346e5bcf500655c91f6ae92ad1a6b1a0cec0c8b1c/django_task-0.1.11-py2.py3-none-any.whl"
      }
    ],
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "75de18f33f38e14f5422769b12a6168b",
          "sha256": "6f1506b9b5630f9b007dfd6a9cd15c5ec36077998afc7fc75520640005f38677"
        },
        "downloads": -1,
        "filename": "django_task-0.1.12-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "75de18f33f38e14f5422769b12a6168b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 30544,
        "upload_time": "2017-12-23T11:58:29",
        "url": "https://files.pythonhosted.org/packages/8b/d7/639d38b0dbf319fd5efd8c2c884adc73f6d9b2a10971ddefff018bd03e1b/django_task-0.1.12-py2.py3-none-any.whl"
      }
    ],
    "0.1.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "25858066e099e2c0171bdb9359fcc79f",
          "sha256": "f27188fb4766b7a45925e026e7680e406e686cdfa7d9422511dde74378193b76"
        },
        "downloads": -1,
        "filename": "django_task-0.1.13-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25858066e099e2c0171bdb9359fcc79f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 30445,
        "upload_time": "2017-12-27T07:46:04",
        "url": "https://files.pythonhosted.org/packages/df/9a/d71d577c8f416492735a5d954c6bf0436bf0b20271feddd4c2113f8344d9/django_task-0.1.13-py2.py3-none-any.whl"
      }
    ],
    "0.1.14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4d3aa19f589973f95614409971d85423",
          "sha256": "446645db15f5369c105449b4bc3a7a6b6fc8b976134ed4a3fbeac3924edaec52"
        },
        "downloads": -1,
        "filename": "django_task-0.1.14-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4d3aa19f589973f95614409971d85423",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 30548,
        "upload_time": "2018-01-03T07:42:06",
        "url": "https://files.pythonhosted.org/packages/3e/46/a1553bf590af02705dc9c70c86fc72f4befd5e2e47b87fe93ce5ba48a9c2/django_task-0.1.14-py2.py3-none-any.whl"
      }
    ],
    "0.1.15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fe300553ee45786860ebb1f2520538fd",
          "sha256": "1b59d05697fe6787806e347a6354a98093247c151e441765d15d7e13953c0149"
        },
        "downloads": -1,
        "filename": "django_task-0.1.15-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe300553ee45786860ebb1f2520538fd",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 30705,
        "upload_time": "2018-01-03T11:41:03",
        "url": "https://files.pythonhosted.org/packages/af/47/f9155570ba09fd0bf48bf0294b34a7d8c14afcd84368f10a15ba53e029e8/django_task-0.1.15-py2.py3-none-any.whl"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b15d381a13e4cd3a1d92c8e4327db537",
          "sha256": "b990aee06108444ac0e38d75767aaed12c1344ff8638e42c643eafe991f5cfc9"
        },
        "downloads": -1,
        "filename": "django_task-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b15d381a13e4cd3a1d92c8e4327db537",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 25604,
        "upload_time": "2017-08-27T09:20:58",
        "url": "https://files.pythonhosted.org/packages/d6/8a/dad35712d8777a8d1861d15abee4520bcffe14b3b41f46656b4a86667481/django_task-0.1.2-py2.py3-none-any.whl"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5135ba4ce34b393790fc6cf4bc2a941c",
          "sha256": "04d6a82db2bbddcd376a9b1f850a81f464bd1cef845d7d3243d64365cf118d66"
        },
        "downloads": -1,
        "filename": "django_task-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5135ba4ce34b393790fc6cf4bc2a941c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 25829,
        "upload_time": "2017-08-28T09:50:59",
        "url": "https://files.pythonhosted.org/packages/b4/ca/f25f011b3c0e9baf1ba29075938590076be50394e842d026228b33b9b4c5/django_task-0.1.3-py2.py3-none-any.whl"
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b42db707a8dc7ab7ad375fbb5991e18d",
          "sha256": "1956820d6269549e0d15f69678288c115e49c004497e9889bf61e606cb630a4e"
        },
        "downloads": -1,
        "filename": "django_task-0.1.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b42db707a8dc7ab7ad375fbb5991e18d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 25828,
        "upload_time": "2017-08-28T22:05:49",
        "url": "https://files.pythonhosted.org/packages/5c/62/771bce63297153e71e1f6797d91f7ef46f5ffa072713e347ad20486b6843/django_task-0.1.4-py2.py3-none-any.whl"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8643c51289afb8567947a7e7d3ae15cf",
          "sha256": "6bc98814e5ffabcace71e3ed5fb4dd4e1175cbfa14632f3d21612eabbf94c6fc"
        },
        "downloads": -1,
        "filename": "django_task-0.1.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8643c51289afb8567947a7e7d3ae15cf",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 26324,
        "upload_time": "2017-10-12T21:01:01",
        "url": "https://files.pythonhosted.org/packages/2f/35/6679657bbfe659202d2e435e67ada49796d7aea049fb50dbf2178fb711d9/django_task-0.1.5-py2.py3-none-any.whl"
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "309375c83f2b64497c6ceb1ec93ad21d",
          "sha256": "609a4f8e0d57621884d6fc5dac17307d98635634f455a1451d391f2f5ef5f864"
        },
        "downloads": -1,
        "filename": "django_task-0.1.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "309375c83f2b64497c6ceb1ec93ad21d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 26814,
        "upload_time": "2017-10-22T06:49:02",
        "url": "https://files.pythonhosted.org/packages/6b/08/d233a743120bbb14a28441741adfd97d02d3accf453f96bc9bf3b01c80fa/django_task-0.1.6-py2.py3-none-any.whl"
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fa3bd9b146129659e30cdc86eb10a350",
          "sha256": "eafe9fddd076d8806d8f01ce604fae9d19f9a77630f1a0ae1454573574002fe3"
        },
        "downloads": -1,
        "filename": "django_task-0.1.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa3bd9b146129659e30cdc86eb10a350",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 27096,
        "upload_time": "2017-11-11T17:38:44",
        "url": "https://files.pythonhosted.org/packages/f5/7e/7c73f3b774728b1b16e0c4dc5b7b451b41d58f21f1d9c327f1683f45dddf/django_task-0.1.7-py2.py3-none-any.whl"
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a19cebde886fd07685af5cbcb4a3151c",
          "sha256": "16c4544b69a84903e91b95966d75db586fe67004616f7f13a77024acdaddc45b"
        },
        "downloads": -1,
        "filename": "django_task-0.1.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a19cebde886fd07685af5cbcb4a3151c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 27105,
        "upload_time": "2017-11-15T23:50:54",
        "url": "https://files.pythonhosted.org/packages/b3/77/deb50eaba3dc44d0fd2b1816315a64ca7a1d3545f272c482d972a16a60ca/django_task-0.1.8-py2.py3-none-any.whl"
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4ec1e9ca5753fd34e6bd7c4f685a9d37",
          "sha256": "f5001e5f97ee6fe6b7f17e82b081634ba06c84d9758f2fe6c5bcb936dfb1693e"
        },
        "downloads": -1,
        "filename": "django_task-0.1.9-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ec1e9ca5753fd34e6bd7c4f685a9d37",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 27818,
        "upload_time": "2017-11-17T10:26:08",
        "url": "https://files.pythonhosted.org/packages/f3/91/86875d56c276f158dff8dae1f652d0d5945e4993dff53b748cb51a23da99/django_task-0.1.9-py2.py3-none-any.whl"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b0ced9ab1ee2f253f9e30fd44deec555",
          "sha256": "071fee1191bd0b7ef364f74f7ace3253d685f4de90d6e0a1141bc1b89b0d4f59"
        },
        "downloads": -1,
        "filename": "django_task-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0ced9ab1ee2f253f9e30fd44deec555",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 31253,
        "upload_time": "2018-01-10T09:09:49",
        "url": "https://files.pythonhosted.org/packages/2a/4a/ca141458610e3d10b688b3599cb4bb63b787a3ac56da46b0f0fe5541c6e4/django_task-0.2.0-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b0ced9ab1ee2f253f9e30fd44deec555",
        "sha256": "071fee1191bd0b7ef364f74f7ace3253d685f4de90d6e0a1141bc1b89b0d4f59"
      },
      "downloads": -1,
      "filename": "django_task-0.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b0ced9ab1ee2f253f9e30fd44deec555",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 31253,
      "upload_time": "2018-01-10T09:09:49",
      "url": "https://files.pythonhosted.org/packages/2a/4a/ca141458610e3d10b688b3599cb4bb63b787a3ac56da46b0f0fe5541c6e4/django_task-0.2.0-py2.py3-none-any.whl"
    }
  ]
}