{
  "info": {
    "author": "Daniel E. Lefever",
    "author_email": "lefeverde@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "Natural Language :: English",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 2.7",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "Mr. Demuxy:\r\n===========\r\n\r\n\r\nAuthor: Daniel E. Lefever\r\n\r\nAuthor-email lefeverde@gmail.com\r\n\r\nLicense: MIT\r\n\r\nIntroduction:\r\n-------------\r\n\r\nMr. Demuxy is a fairly simple, self-contained Python program that makes\r\ndemultiplexing variable length, combinatorially barcoded NGS reads as\r\npainless as possible. See below for more details. This program was\r\nwritten with the combinatorial barcoding strategy developed by Travis\r\nGlenn in mind [Adapterama Ref], however, it would work on any type of\r\ndata multiplexed with combinatorial barcodes. In short, this approach\r\nuses two pairs of barcodes denoted as the internal and external barcodes\r\n(also referred to as tags and indexes). The idea is to pool many\r\ndifferent projects onto one MiSeq/HiSeq run cheaply by having external\r\nIllumina barcodes to differentiate the pooled projects and internal\r\n\u2018homebrewed\u2019 variable length barcodes to distinguish samples within each\r\nproject. The internal barcoding strategy is based on the layout of a\r\n96-well plate: the forward tag corresponds to row letter (A-H) and the\r\nreverse tag corresponds to column number (1-12). This program uses both\r\ntags to come up with the sample ID.\r\n\r\nDependencies:\r\n-------------\r\n\r\n-  Python 2.7\r\n\r\nInstallation:\r\n-------------\r\n\r\n1. First Download `Mr.\r\n   Demuxy <https://pypi.python.org/pypi/Mr_Demuxy/>`__ and unarchive the\r\n   folder. To unarchive the folder, try clicking on it. If that doesn't\r\n   work, open terminal and change directory to wherever it downloaded\r\n   (probably /Downloads) and try this:\r\n\r\n   ::\r\n\r\n       $ tar -xvzf Mr_Demuxy-x.y.z-dist.tar.gz\r\n\r\n-  **NOTE**: The 'x.y.z' above denotes version number. Change that to\r\n   whatever version is downloaded. Also, `relevant\r\n   xkcd <http://xkcd.com/1168/>`__\r\n\r\n2. Then open up terminal and change directory to wherever the unarchived\r\n   folder lives. Then, install it to your local site-packages directory\r\n   like so:\r\n\r\n   ::\r\n\r\n       $ python setup.py install --user\r\n\r\n3. Restart terminal. You should now be able to run the program from\r\n   anywhere in your directory.\r\n\r\nCan I use pip install?\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nYes, but for whatever reason, pip install does not execute some extra\r\nstuff I included in the setup script. The extra stuff basically adds a\r\nline to your .bash\\_profile which puts the local script directory in the\r\npath. This is so you can call the scripts from anywhere. Also, it will\r\nremove some stuff leftover from previous Mr. Demuxy versions. In order\r\nto do this manually, you'll need to add this to your .bash\\_profile:\r\n\r\n::\r\n\r\n    export PATH=/full_path_to_scripts/:$PATH\r\n\r\nUsage:\r\n------\r\n\r\nMr. Demuxy contains two main scripts; merged\\_demuxer.py and\r\npe\\_demuxer.py for merged or paired-end reads, respectively. Basic usage\r\nfor each script are outlined below.\r\n\r\n**Demultiplex Merged Reads (merged\\_demuxer.py)**\\ \r\n\r\n::\r\n\r\n    usage: \r\n    $ merged_demuxer.py -f forward_bcs.txt -r reverse_bcs.txt -i example_merged.fastq  -o demultiplexed_seqs.fasta\r\n\r\n    This program demultiplexes merged combinatorially barcoded reads and can\r\n    output the demultiplexed reads a number of different ways.\r\n\r\n    required arguments:\r\n      -f                    forward bcs file\r\n      -r                    reverse bcs file\r\n      -i                    input merged fastq file\r\n\r\n    optional arguments:\r\n      -o                    name of output file or folder (default:\r\n                            merged_demuxer_out)\r\n      --forward_primer_len \r\n                            base number of forward primer/adapter (default: 0)\r\n      --reverse_primer_len \r\n                            base number of reverse primer/adapter (default: 0)\r\n      --no_rev_comp_reverse_bcs\r\n                            prevents rev bcs from reverse complementing\r\n      -h, --help            show this help message and exit\r\n      --keep_original_headers\r\n                            pass this arg to keep original headers in\r\n                            demultiplexed fasta/fastq file\r\n      --write_qual          write a qual file containing quality scores\r\n      --individual_fastq    demultiplex by writing a fastq file for each sample ID\r\n      --min_seq_length      minimum length of seq to be retained (default: 20)\r\n      --file_extension      format of the output file (default: fasta)\r\n\r\n**Demultiplex Paired-End Reads (pe\\_demuxer.py)**\\ \r\n\r\n::\r\n\r\n    usage: \r\n    $ pe_demuxer.py -r1 r1_seqs.fastq -r2 r2_seqs.fastq -r1_bc r1_bc_file.txt -r2_bc -r2_bc_file.txt\r\n\r\n    This program splits combinatorially multiplexed paired-end seqs and outputs a\r\n    folder for the R1 reads and another for the R2 reads. The two folders contain\r\n    one fastq file per sample id.\r\n\r\n    required arguments:\r\n      -r1_bc                BC file for R1 reads\r\n      -r2_bc                BC file for R2 reads\r\n      -r1                   R1 fastq file\r\n      -r2                   R2 fastq file\r\n\r\n    optional arguments:\r\n      -h, --help            show this help message and exit\r\n      -o                    name of output file or dir\r\n      --batch_length        amount of seqs to be put in a batch only used when\r\n                            check_headers is passed (Default: 1500000)\r\n      --forward_primer_len \r\n                            base number of primer/adapter on R1 seq (default: 0)\r\n      --reverse_primer_len \r\n                            base number of primer/adapter on R2 seq (default: 0)\r\n      --keep_original_headers\r\n                            pass this arg to keep original headers in\r\n                            demultiplexed fasta/fastq file\r\n      --min_seq_length      minimum length of seq to be retained (default: 20)\r\n      --check_headers       ensures the R1 and R2 read match before demultiplexing\r\n                            WARNING: this is super slow\r\n                            \r\n\r\nUsage Examples: merged\\_demuxer.py\r\n----------------------------------\r\n\r\n**Demultiplex merged fastq reads with output being in fasta format:**\r\n\r\n::\r\n\r\n    $ merged_demuxer.py -i example_merged.fastq -f forward_bcs.txt -r reverse_bcs.txt -o example_demult.fasta\r\n\r\n**Do the same as above and get a seperate qual file:**\r\n\r\n::\r\n\r\n    $ merged_demuxer.py -i example_merged.fastq -f forward_bcs.txt -r reverse_bcs.txt -o example_demult.fasta --write_qual  \r\n\r\n**Demultiplex and keep the original fastq headers:**\r\n\r\n::\r\n\r\n    $ merged_demuxer.py -i example_merged.fastq -f forward_bcs.txt -r reverse_bcs.txt -o example_demult.fasta --keep_original_headers \r\n\r\n**Demultiplex merged reads and remove the 17 bp forward primer and 22 bp\r\nreverse primer:**\r\n\r\n::\r\n\r\n    $ merged_demuxer.py -i example_merged.fastq -f forward_bcs.txt -r reverse_bcs.txt -o example_demult.fasta --forward_primer_len 17 --reverse_primer_len 22\r\n\r\n**Do the same as above except have the output be in fastq format:**\r\n\r\n::\r\n\r\n    $ merged_demuxer.py -i example_merged.fastq -f forward_bcs.txt -r reverse_bcs.txt -o example_demult.fastq --forward_primer_len 17 --reverse_primer_len 22 --file_extension fastq\r\n\r\n**Demultiplex reads and split into one fastq file per sample ID:**\r\n\r\n::\r\n\r\n    $ merged_demuxer.py -i example_merged.fastq -f forward_bcs.txt -r reverse_bcs.txt -o example_demult_ind_fastq --individual_fastq\r\n\r\n**Get individual fastq files, chop off the 17 bp forward primer and 22\r\nbp reverse primer, and keep reads that are only longer than 100 bp:**\r\n\r\n::\r\n\r\n    $ merged_demuxer.py -i example_merged.fastq -f forward_bcs.txt -r reverse_bcs.txt -o example_demult_ind_fastq --individual_fastq --forward_primer_len 17 --reverse_primer_len 22 --individual_fastq --min_seq_length 100\r\n\r\nUsage Examples: pe\\_demuxer.py\r\n------------------------------\r\n\r\n**Demultiplex paired-end fastq files and write individual fastqs for\r\neach sample in their respective directories:**\r\n\r\n::\r\n\r\n    $ pe_demuxer.py -r1 r1_seqs.fastq -r2 r2_seqs.fastq -r1_bc r1_bc_file.txt -r2_bc -r2_bc_file.txt\r\n\r\n**Do the same as above and remove a 10 bp primer on R1 reads and a 16 bp\r\nprimer on R2 reads:**\r\n\r\n::\r\n\r\n    $ pe_demuxer.py -r1 r1_seqs.fastq -r2 r2_seqs.fastq -r1_bc r1_bc_file.txt -r2_bc -r2_bc_file.txt --forward_primer_len 10 --reverse_primer_len 16\r\n\r\n**Demultiplex paired-end reads in which the read order may be different\r\nand/or the files contain un-paired reads:** **WARNING:** using this\r\noption is extremely slow and not recommended. Illumina sequencers should\r\nproduce files with reads in the same order and discard un-paired reads.\r\nI didn't realize that until after added this feature so I decided to\r\ninclude it anyways.\r\n\r\n::\r\n\r\n    $ pe_demuxer.py -r1 r1_seqs.fastq -r2 r2_seqs.fastq -r1_bc r1_bc_file.txt -r2_bc -r2_bc_file.txt --check_headers\r\n\r\nInput Files Information:\r\n------------------------\r\n\r\nThis section explains more about the input files.\r\n\r\n**Forward or R1 barcode file**\\  The forward barcode file, as you might\r\nexpect, is the file containing the forward barcodes and letter (or\r\nwhatever the barcode corresponds to). You will probably need to make\r\nyour own forward barcode file, and the formatting is important. The\r\neasiest way to make one, is to open a new sheet in excel and copy/paste\r\nthe barcode and letter pairs with the first column being the letter and\r\nthe second containing the barcode. It should look like this:\r\n\r\n::\r\n\r\n    A   GGTAC\r\n    B   CAACAC\r\n    C   ATCGGTT\r\n    D   TCGGTCAA\r\n\r\n-  **Note:** Both barcode files do not have any header information. I\u2019m\r\n   not sure if it will screw things up, but it\u2019s safest to not include\r\n   it. Once you\u2019re done inputing the forward barcodes, save the excel\r\n   sheet as a \u2018tab delineated text\u2019 file. Be sure to name it something\r\n   so you know what it is.\r\n\r\n**Reverse or R2 barcode file**\\  The reverse barcode file is just like\r\nthe forward barcode file, except for the reverse barcodes. It should\r\nlook like this:\r\n\r\n::\r\n\r\n    1   AGGAA\r\n    2   GAGTGG\r\n    3   CCACGTC\r\n    4   TTCTCAGC\r\n\r\n-  **Note:** This program reverse complements (RC) the reverse barcodes\r\n   when demultiplexing merged reads instead of RCing the whole sequence.\r\n   This makes it go faster, but if your reverse barcodes do not need to\r\n   be RC'd, pass this:\r\n\r\n   ::\r\n\r\n       --no_rev_comp_reverse_bcs \r\n\r\nOutput File Information:\r\n------------------------\r\n\r\nThe output file/files contain reads that have been demultiplexed, and\r\noptionally trimmed of primers. This program automatically removes the\r\nbarcode from each read and will remove the primers if length is\r\nspecified by the --forward\\_primer\\_len and --reverse\\_primer\\_len\r\narguments. The primers are not actually matched and are instead removed\r\nby trimming a set number of bases after the barcode. This is much\r\nquicker than actual matching.\r\n\r\nFor example, if the forward primer was 17 bp long, and the reverse 15,\r\npass:\r\n\r\n::\r\n\r\n    --forward_primer_len 17 --reverse_primer_len 15\r\n\r\nIf these options are not passed, it defaults to 0.\r\n\r\nThe merged\\_demuxer.py script can also create individual fastq files\r\nsplit by each sample. To do this, simply pass the --individual\\_fastq\r\nargument. The -o argument will become the name of the output directory\r\nwith one fastq per sample. The dir structure is as follows:\r\n\r\n::\r\n\r\n    output_dir\r\n      |---<sample_id_1>.fastq\r\n      |---<sample_id_2>.fastq\r\n      .\r\n      .\r\n      |---<sample_id_n>.fastq\r\n\r\npe\\_demuxer.py will only output individual fastq files. The R1 and R2\r\nfiles are separated into two folders each containing individual fastq\r\nfiles split by sample. This is the structure:\r\n\r\n::\r\n\r\n    output_dir\r\n      |---R1\r\n      |     |---<sample_id_1>_R1.fastq\r\n      |     |---<sample_id_2>_R1.fastq\r\n      |     .\r\n      |     .\r\n      |     |---<sample_id_n>_R1.fastq\r\n      |\r\n      |\r\n      |---R2\r\n            |---<sample_id_1>_R1.fastq\r\n            |---<sample_id_2>_R1.fastq\r\n            .\r\n            .\r\n            |---<sample_id_n>_R1.fastq\r\n     \r\n\r\nThe merged\\_demuxer.py script offers some control over how the headers\r\nare formatted. If there's some specific way that would be helpful,\r\nplease let me know and I'll include it in future releases. Anyways, here\r\nare the current options for the header format:\r\n\r\n::\r\n\r\n    HEADER OPTIONS:\r\n\r\n    -Demultiplexed ID only-\r\n    --FASTA Format--\r\n\r\n    >A6_1\r\n    AATATT....CACGCAGA\r\n\r\n    --FASTQ Format--\r\n    @A6_1\r\n    AATATT....CACGCAGA\r\n    + \r\n    GGGGGG...@GGFGGFC<\r\n\r\n    -Original header with demultiplexed ID-\r\n\r\n    --FASTA Format--\r\n    >M02849:...:1886 A6_1\r\n    AATATT....CACGCAGA\r\n\r\n    --FASTQ Format--\r\n    @M02849:...:1886 A6_1\r\n    AATATT....CACGCAGA\r\n    + \r\n    GGGGGG...@GGFGGFC<\r\n\r\nMisc\r\n----\r\n\r\nThis program was written and predominantly tested using a macbook pro\r\n2011 with 8 GB memory and a 2.4 GHz Intel Core i7 processor running OS X\r\nEl Capitan using python 2.7.10. With this setup, both merged (written to\r\nsingle or individual files) and paired-end demultiplexing of ~7,000,000\r\nreads took around 3-4 minutes.\r\n\r\nReferences:\r\n-----------\r\n\r\n*the fastq parser was taken from biopython*\r\n\r\nCock, P. J., Antao, T., Chang, J. T., Chapman, B. A., Cox, C. J., Dalke,\r\nA., . . . de Hoon, M. J. (2009). Bio$ python: freely available $ python\r\ntools for computational molecular biology and bioinformatics.\r\nBioinformatics, 25(11), 1422-1423. doi:10.1093/bioinformatics/btp163\r\n\r\n*Adapterama ref*",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://pypi.python.org/pypi/Mr_Demuxy/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Mr_Demuxy",
    "platform": "any",
    "project_url": "https://pypi.org/project/Mr_Demuxy/",
    "release_url": "https://pypi.org/project/Mr_Demuxy/1.2.0/",
    "requires_python": null,
    "summary": "A Demultixper for Combinatorially Multiplexed Next Generation Reads",
    "version": "1.2.0"
  },
  "releases": {
    "1.0.5.beta": [],
    "1.0.6.beta": [
      {
        "comment_text": "",
        "digests": {
          "md5": "aa26923e5803579b9efdca70a9f00f00",
          "sha256": "6e65ed8adbb99df02dcabd4e94833be2d9c8e59af13abeb5e7ab30b05bfc9f9f"
        },
        "downloads": 175,
        "filename": "Mr_Demuxy-1.0.6.beta.tar.gz",
        "has_sig": false,
        "md5_digest": "aa26923e5803579b9efdca70a9f00f00",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 49250,
        "upload_time": "2016-06-16T16:55:11",
        "url": "https://files.pythonhosted.org/packages/b9/2c/b77a11f1cd0bdf2acf2009a8bff5d4ca5f22134b09e6c6662d30b030987d/Mr_Demuxy-1.0.6.beta.tar.gz"
      }
    ],
    "1.0.7.beta": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c23fba83145b9af6a8b9b7881264c012",
          "sha256": "1fc38bab379b6d9448fac68c0484489e83c0563c4c4655bd42077b3e2cfd5ea1"
        },
        "downloads": 349,
        "filename": "Mr_Demuxy-1.0.7.beta.tar.gz",
        "has_sig": false,
        "md5_digest": "c23fba83145b9af6a8b9b7881264c012",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48512,
        "upload_time": "2016-06-20T17:24:53",
        "url": "https://files.pythonhosted.org/packages/30/df/0c6f460d072bf51191d2af96bdb1bce65128e81e4928495d6840b5ea1914/Mr_Demuxy-1.0.7.beta.tar.gz"
      }
    ],
    "1.0.8.beta": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8ac93647966b3fd1d6ac42d7e202691c",
          "sha256": "ddec24371c7bc182a534c01575be35a1ffe4f60ef692cbfd8b2cf542a38c8761"
        },
        "downloads": 361,
        "filename": "Mr_Demuxy-1.0.8.beta.tar.gz",
        "has_sig": false,
        "md5_digest": "8ac93647966b3fd1d6ac42d7e202691c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48546,
        "upload_time": "2016-06-20T18:02:03",
        "url": "https://files.pythonhosted.org/packages/bf/d2/3af4dfab76486b7d390dd2ef5834e436e443012f485d5903da95c3835ade/Mr_Demuxy-1.0.8.beta.tar.gz"
      }
    ],
    "1.0.9.beta": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e38290b87df45119e06d9b8f09290de0",
          "sha256": "06b07a4390ce5b6da9eb4e4e665b4c0648ae74f4338fc0b016ad66d7f4e20e94"
        },
        "downloads": 345,
        "filename": "Mr_Demuxy-1.0.9.beta.tar.gz",
        "has_sig": false,
        "md5_digest": "e38290b87df45119e06d9b8f09290de0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45051,
        "upload_time": "2016-06-20T19:06:18",
        "url": "https://files.pythonhosted.org/packages/3b/12/29e859377d27c86e4579da3eff1ae955308b09123cc3ec9dc18c4229ac22/Mr_Demuxy-1.0.9.beta.tar.gz"
      }
    ],
    "1.1.0.beta": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8bae73cf52bf43c96445fa27bd567386",
          "sha256": "974781989288990c285479f61bfc105e82a998f984aeee68963a477e637269e8"
        },
        "downloads": 629,
        "filename": "Mr_Demuxy-1.1.0.beta.tar.gz",
        "has_sig": false,
        "md5_digest": "8bae73cf52bf43c96445fa27bd567386",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45052,
        "upload_time": "2016-06-20T19:16:40",
        "url": "https://files.pythonhosted.org/packages/5a/81/e1dc22e1c96e988958922a52e00b5e28a02cf333004d21b0a9bf7a722563/Mr_Demuxy-1.1.0.beta.tar.gz"
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "006dfc744378857130614696d41bba46",
          "sha256": "579e61a6836496d7dec01397279400d03302eec40585efcbeded4993de246ea7"
        },
        "downloads": 296,
        "filename": "Mr_Demuxy-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "006dfc744378857130614696d41bba46",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 44233,
        "upload_time": "2016-06-21T20:32:58",
        "url": "https://files.pythonhosted.org/packages/00/1d/a8307605fa6bf4e86dff1029272b7e1913b5d574a0cb3e9e0c046b3d4c4f/Mr_Demuxy-1.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "006dfc744378857130614696d41bba46",
        "sha256": "579e61a6836496d7dec01397279400d03302eec40585efcbeded4993de246ea7"
      },
      "downloads": 296,
      "filename": "Mr_Demuxy-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "006dfc744378857130614696d41bba46",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 44233,
      "upload_time": "2016-06-21T20:32:58",
      "url": "https://files.pythonhosted.org/packages/00/1d/a8307605fa6bf4e86dff1029272b7e1913b5d574a0cb3e9e0c046b3d4c4f/Mr_Demuxy-1.2.0.tar.gz"
    }
  ]
}