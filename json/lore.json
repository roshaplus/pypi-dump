{
  "info": {
    "author": "Montana Low",
    "author_email": "montana@instacart.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "======\n Lore\n======\n\nLore is a python data science framework to design, fit, and exploit data science\nmodels from development to production. It codifies best practices to\nsimplify collaborating and deploying models developed on a laptop with jupyter\nnotebook, into high availability distributed production data centers.\n\n\nExample\n=======\n\n::\n\n$ pip install lore\n\n$ lore new my_project  #  create file structure & virtualenv\n$ lore workon my_project  #  change working directory & virtualenv\n$ lore install my_project  #  get dependencies (including raw data snapshots)\n\n$ lore generate my_model  #  create a model\n\n$ lore task fit my_model  #  train the model\n\n$ lore serve all &  # start a default api process\n\n$ curl -X POST -d '{\"feature_1\": \"true\"}' http://0.0.0.0:3000/my_model\n  {class: \"positive\"}\n\n\nFeatures\n========\n\n* **Repeatable:** Lore allows developers to work on multiple projects with\n  different versions of dependencies without conflict, while preserving\n  similarity with production. It removes manual handling of anaconda, brew,\n  apt-get, pyenv, virtualenv, docker et al.\n\n* **Sharp::** Lore is as simple as you want it to be. Getting started takes a\n  handful of commands, but you've just unlocked the full depth of cutting edge\n  machine learning.\n\n* **Scalable:** Lore projects are horizontally scalable, but start with\n  vertical scalability in a single thread to ease into the learning curve.\n\n* **Transparent:** Lore doesn't wrap or hide or abstract the libraries you've\n  already learned how to use. It's goal is to remove boiler plate and\n  inconsistency from a typical workflow, without reinventing the wheel.\n\n* **Efficient:** Lore adds minimal overhead while gluing all of the underlying\n  libraries together. We test for <1% performance impact during critical phases,\n  such as fitting models on production size datasets.\n\n* **Mature:** Lore has all the bells and whistles you expect to work out of\n  the box in every environment. IO (csv, sql, pickle...), logging, tracking,\n  reporting, timing, testing, deploying are all available safe and secure w/\n  minimal configuration.\n\n\nLore stands on the shoulders giants\n===================================\n\nLore is designed to be as fast and powerful as the underlying libraries.\nIt seamlessly supports workflows that utilize:\n\n* airflow\n* tensorflow\n* keras\n* scikit-learn\n* pandas\n* numpy\n* sqlalchemy\n* psychopg\n* protobuf\n* gunicorn\n* hub\n* mani\n* virtualenv, pyenv, python (2.7, 3.3+)\n\n\nCommands\n========\n\n$ lore new\n$ lore install\n$ lore update\n$ lore workon\n$ lore generate [**all**, api, model, notebook, task] NAME\n$ lore task\n$ lore console\n$ lore serve\n$ lore start\n$ lore stop\n\n\nProject Structure\n=================\n\n::\n\n\u251c\u2500\u2500 .env.template            <- Template for environment variables for developers (mirrors production)\n\u251c\u2500\u2500 .python-version          <- keeps dev and production in sync (pyenv)\n\u251c\u2500\u2500 README.md                <- The top-level README for developers using this project.\n\u251c\u2500\u2500 requirements.txt         <- keeps dev and production in sync (pip)\n\u2502\n\u251c\u2500\u2500 docs/                    <- generated from src\n\u2502\n\u251c\u2500\u2500 notebooks/               <- explorations of data and models\n\u2502       \u2514\u2500\u2500 my_exploration/\n\u2502            \u2514\u2500\u2500 exploration_1.ipynb\n\u2502\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 __init__.py          <- loads the various components (makes this a module)\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 api/                 <- external entry points to runtime models\n\u2502   \u2502   \u2514\u2500\u2500 __init__.py      <- loads the various components (makes this a module)\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 config/              <- environment, logging, exceptions, metrics initializers\n\u2502   \u2502   \u2514\u2500\u2500 __init__.py      <- loads the various components (makes this a module)\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 tasks/               <- run manually, cron or aiflow\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py      <- loads the various components (makes this a module)\n\u2502   \u2502   \u2514\u2500\u2500 my_model/\n\u2502   \u2502       \u251c\u2500\u2500 etl.py\n\u2502   \u2502       \u2514\u2500\u2500 train.py\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 data/                <- Scripts to move data between sources\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py      <- loads the various components (makes this a module)\n\u2502   \u2502   \u2514\u2500\u2500 etl/             <- etl sql between DBs (local/production too)\n\u2502   \u2502       \u2514\u2500\u2500 table_name.sql\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 features/            <- abstractions for dealing with processed data\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py      <- loads the various components (makes this a module)\n\u2502   \u2502   \u2514\u2500\u2500 my_features.py\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 models/              <- Code that make predictions\n\u2502       \u251c\u2500\u2500 __init__.py      <- loads the various components (makes this a module)\n\u2502       \u2514\u2500\u2500 my_objective/\n\u2502           \u251c\u2500\u2500 deep_model.py\n\u2502           \u2514\u2500\u2500 linear_model.py\n\u2502\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 api/\n    \u251c\u2500\u2500 tasks/\n    \u2514\u2500\u2500 models/\n\n\n\nDesign Philosophies & Inspiration\n=================================\n\n* Personal Pain\n* Minimal Abstraction\n* No code is better than no code (https://blog.codinghorror.com/the-best-code-is-no-code-at-all/)\n* Convention over configuration (https://xkcd.com/927/)\n* Sharp Tools (https://www.schneems.com/2016/08/16/sharp-tools.html)\n* Rails (https://en.wikipedia.org/wiki/Ruby_on_Rails)\n* Cookie Cutter Data Science (https://drivendata.github.io/cookiecutter-data-science/)\n* Gene Roddenberry (https://www.youtube.com/watch?v=0JLgywxeaLM)\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/instacart/lore",
    "keywords": "machine learning framework tensorflow airflow",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lore",
    "platform": "",
    "project_url": "https://pypi.org/project/lore/",
    "release_url": "https://pypi.org/project/lore/0.1.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "a framework for building and using data science",
    "version": "0.1.1"
  },
  "releases": {
    "0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "73ae5e408adce1c8ecb0501234833bdf",
          "sha256": "efc81a4afbc7cba36e9ee4d55ab1b582536b799be4301d671c4f8f55e0b5a886"
        },
        "downloads": 0,
        "filename": "lore-0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "73ae5e408adce1c8ecb0501234833bdf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2169,
        "upload_time": "2017-07-25T23:55:51",
        "url": "https://files.pythonhosted.org/packages/54/f8/de9767b255a4cd50c95b69c4eb6db40d2f5dcafdd158816a1f37bdadb571/lore-0.0.tar.gz"
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eab7a442e9f816b573ac8ac2e2a067ac",
          "sha256": "88ca46cabf483dd640c3c0a9b989241d25fa82d33dba206cff43d6f958176fd5"
        },
        "downloads": 0,
        "filename": "lore-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "eab7a442e9f816b573ac8ac2e2a067ac",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17757,
        "upload_time": "2017-08-01T18:02:17",
        "url": "https://files.pythonhosted.org/packages/7b/29/db07d84200ae93e5e8fbcd0f68ee037956a808e6e4110f4fc5a426287d3f/lore-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9187306ae2fc29a1073ecf45b556bf99",
          "sha256": "28d5b819c426f3e8410559a8d548862ac64a442bd023dd5719be3787a14f4854"
        },
        "downloads": 0,
        "filename": "lore-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9187306ae2fc29a1073ecf45b556bf99",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17792,
        "upload_time": "2017-08-01T21:27:42",
        "url": "https://files.pythonhosted.org/packages/ce/a1/918ccf881bc95931243a64228ad507f7103127fd48446b98795ed5b36088/lore-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9187306ae2fc29a1073ecf45b556bf99",
        "sha256": "28d5b819c426f3e8410559a8d548862ac64a442bd023dd5719be3787a14f4854"
      },
      "downloads": 0,
      "filename": "lore-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9187306ae2fc29a1073ecf45b556bf99",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 17792,
      "upload_time": "2017-08-01T21:27:42",
      "url": "https://files.pythonhosted.org/packages/ce/a1/918ccf881bc95931243a64228ad507f7103127fd48446b98795ed5b36088/lore-0.1.1.tar.gz"
    }
  ]
}