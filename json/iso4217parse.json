{
  "info": {
    "author": "Tammo Ippen",
    "author_email": "tammo.ippen@posteo.de",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "|Build Status| |Coverage Status| |Tested CPython Versions| |Tested PyPy\nVersions| |PyPi version| |PyPi license|\n\nISO4217 Currency Parser\n=======================\n\nParse currencies (symbols and codes) from and to\n`ISO4217 <https://en.wikipedia.org/wiki/ISO_4217>`__.\n\nSimilar to `iso4217 <https://github.com/spoqa/iso4217>`__ package, but\n\n-  data is aquired by scraping wikipedia (see\n   `below <#data-aquisition>`__) - this is repeatable and you stay on\n   the most current data\n-  currency symbols are currated by hand - this allows some fuzzy\n   currency matching\n-  no download and parsing during install\n-  no external dependancies (``enum34``)\n\nWhen you want to *reuse* the\n`*data.json* <https://github.com/tammoippen/iso4217parse/blob/master/iso4217parse/data.json>`__\nfile for your projects, please leave a attribution note. I licence the\nfile under (CC BY 4.0).\n\nInstall:\n\n::\n\n    pip install iso4217parse\n\nDocumentation\n-------------\n\nEach currency is modeled as a ``collections.namedtuple``:\n\n.. code:: python\n\n    Currency = namedtuple('Currency', [\n        'alpha3',     # unicode:       the ISO4217 alpha3 code\n        'code_num',   # int:           the ISO4217 numeric code\n        'name',       # unicode:       the currency name\n        'symbols',    # List[unicode]: list of possible symbols;\n                      #                first is opinionated choice for representation\n        'minor',      # int:           number of decimal digits to round\n        'countries',  # List[unicode]: list of countries that use this currency.\n    ])\n\n**parse:** Try to parse the input in a best effort approach by using\n``by_alpha3()``, ``by_code_num()``, ... functions:\n\n.. code:: python\n\n    In [1]: import iso4217parse\n\n    In [2]: iso4217parse.parse('CHF')\n    Out[2]: [Currency(alpha3='CHF', code_num=756, name='Swiss franc', \n                      symbols=['SFr.', 'fr', 'Fr.', 'F', 'franc', 'francs', 'Franc', 'Francs'],\n                      minor=2, countries=['CH', 'LI'])]\n\n    In [3]: iso4217parse.parse(192)\n    Out[3]:\n    [Currency(alpha3='CUP', code_num=192, name='Cuban peso', \n              symbols=['\u20b1', '\uff04', '\ufe69', '$', 'dollar', 'dollars', 'Dollar', 'Dollars', '\uff04MN', '\ufe69MN', '$MN'], \n              minor=2, countries=['CU'])]\n\n    In [4]: iso4217parse.parse('Price is 5 \u20ac')\n    Out[4]: [Currency(alpha3='EUR', code_num=978, name='Euro', \n             symbols=['\u20ac', 'euro', 'euros'], minor=2, \n             countries=['AD', 'AT', 'AX', 'BE', 'BL', 'CY', 'DE', 'EE', 'ES', 'FI',\n                       'FR', 'GF', 'GP', 'GR', 'IE', 'IT', 'LT', 'LU', 'LV', 'MC',\n                       'ME', 'MF', 'MQ', 'MT', 'NL', 'PM', 'PT', 'RE', 'SI', 'SK',\n                       'SM', 'TF', 'VA', 'XK', 'YT'])]\n\n    In [5]: iso4217parse.parse('CA\ufe6915.76')\n    Out[5]: [Currency(alpha3='CAD', code_num=124, name='Canadian dollar', \n             symbols=['CA$', 'CA\uff04', '\uff04', '$', 'dollar', 'dollars', 'Dollar', 'Dollars', 'CA\ufe69', '\ufe69'], \n             minor=2, countries=['CA'])]\n\n    In [6]: iso4217parse.parse?\n    Signature: iso4217parse.parse(v, country_code=None)\n    Docstring:\n    Try parse `v` to currencies; filter by country_code\n\n    If `v` is a number, try `by_code_num()`; otherwise try:\n        1) if `v` is 3 character uppercase: `by_alpha3()`\n        2) Exact symbol match: `by_symbol()`\n        3) Exact country code match: `by_country()`\n        4) Fuzzy by symbol match heuristic: `by_symbol_match()`\n\n    Parameters:\n        v: Union[unicode, int]           Either a iso4217 numeric code or some string\n        country_code: Optional[unicode]  Iso3166 alpha2 country code.\n\n    Returns:\n        List[Currency]: found Currency objects.\n\n**by\\_alpha3:** Get the currency by its iso4217 alpha3 code:\n\n.. code:: python\n\n    In [1]: import iso4217parse\n\n    In [2]: iso4217parse.by_alpha3('CHF')\n    Out[2]: Currency(alpha3='CHF', code_num=756, name='Swiss franc', \n                     symbols=['SFr.', 'fr', 'Fr.', 'F', 'franc', 'francs', 'Franc', 'Francs'],\n                     minor=2, countries=['CH', 'LI'])\n\n    In [3]: iso4217parse.by_alpha3?\n    Signature: iso4217parse.by_alpha3(code)\n    Docstring:\n    Get Currency for ISO4217 alpha3 code\n\n    Parameters:\n        code: unicode  An alpha3 iso4217 code.\n\n    Returns:\n        Currency: Currency object for `code`, if available.\n\n**by\\_code\\_num:** Get the currency by its iso4217 numeric code:\n\n.. code:: python\n\n    In [1]: import iso4217parse\n\n    In [2]: iso4217parse.by_code_num(51)\n    Out[2]: Currency(alpha3='AMD', code_num=51, name='Armenian dram', \n                     symbols=['\u058f', '\u0564\u0580', 'dram'], minor=2, countries=['AM'])\n\n    In [3]: iso4217parse.by_code_num?\n    Signature: iso4217parse.by_code_num(code_num)\n    Docstring:\n    Get Currency for ISO4217 numeric code\n\n    Parameters:\n        code_num: int  An iso4217 numeric code.\n\n    Returns:\n        Currency: Currency object for `code_num`, if available.\n\n**by\\_country:** Get currencies used in a country:\n\n.. code:: python\n\n    In [1]: import iso4217parse\n\n    In [2]: iso4217parse.country('HK')\n    Out[2]: \n    [ \n      Currency(alpha3='HKD', code_num=344, name='Hong Kong dollar', \n               symbols=['HK$', 'HK\uff04', '\uff04', '$', 'dollar', 'dollars', 'Dollar', 'Dollars', 'HK\ufe69', '\ufe69', '\u5143'], \n               minor=2, countries=['HK']),\n      Currency(alpha3='CNH', code_num=None, name='Chinese yuan (when traded offshore)', \n               symbols=['CN\u00a5', '\uffe5', 'CN\uffe5', '\u00a5', 'RMB', '\u5143'], \n               minor=2, countries=['HK'])\n    ]\n\n    In [3]: iso4217parse.country?\n    Signature: iso4217parse.by_country(country_code)\n    Docstring:\n    Get all currencies used in country\n\n    Parameters:\n        country_code: unicode  iso3166 alpha2 country code\n\n    Returns:\n        List[Currency]: Currency objects used in country.\n\n**by\\_symbol:** Get currencies that use the given symbol:\n\n.. code:: python\n\n    In [1]: import iso4217parse\n\n    In [2]: iso4217parse.by_symbol('\uff04MN')\n    Out[2]: \n    [\n      Currency(alpha3='CUP', code_num=192, name='Cuban peso', \n               symbols=['\u20b1', '\uff04', '\ufe69', '$', 'dollar', 'dollars', 'Dollar', 'Dollars', '\uff04MN', '\ufe69MN', '$MN'], \n               minor=2, countries=['CU'])\n    ]\n\n    In [3]: iso4217parse.by_symbol('\uff04')\n    Out[3]: [...] # 35 different currencies\n\n    In [4]: [c.alpha3 for c in iso4217parse.by_symbol('\uff04')]\n    Out[4]:\n    ['ARS', 'AUD', 'BBD', 'BMD', 'BZD', 'SBD', 'BND', 'CAD', 'CVE', 'KYD', 'CLP', \n     'COP', 'CUP', 'DOP', 'FJD', 'GYD', 'HKD', 'JMD', 'LRD', 'MXN', 'NAD', 'NZD', \n     'SGD', 'TTD', 'USD', 'UYU', 'TWD', 'CUC', 'ZWL', 'XCD', 'SRD', 'BRL', 'KID', \n     'NTD', 'TVD']\n\n    In [5]: iso4217parse.by_symbol('\uff04', country_code='US')\n    Out[5]: \n    [\n      Currency(alpha3='USD', code_num=840, name='United States dollar', \n               symbols=['US$', '$', '\uff04', '\ufe69', 'dollar', 'dollars', 'Dollar', 'Dollars', 'US\uff04', 'US\ufe69'], \n               minor=2, \n               countries=['AS', 'EC', 'GU', 'HT', 'MH', 'MP', 'PR', 'PW', 'SV', 'TC', 'TL', 'UM', 'US'])\n    ]\n\n    In [6]: iso4217parse.by_symbol?\n    Signature: iso4217parse.by_symbol(symbol, country_code=None)\n    Docstring:\n    Get list of possible currencies for symbol; filter by country_code\n\n    Look for all currencies that use the `symbol`. If there are currencies used\n    in the country of `country_code`, return only those; otherwise return all\n    found currencies.\n\n    Parameters:\n        symbol: unicode                  Currency symbol.\n        country_code: Optional[unicode]  Iso3166 alpha2 country code.\n\n    Returns:\n        List[Currency]: Currency objects for `symbol`; filter by country_code.\n\n**by\\_symbol\\_match:** Look for currency symbol occurence in input\nstring:\n\n.. code:: python\n\n    In [1]: import iso4217parse\n\n    In [2]: iso4217parse.by_symbol_match('RD$35.8')\n    Out[2]: \n    [\n      Currency(alpha3='DOP', code_num=214, name='Dominican peso', \n               symbols=['RD$', '\uff04', '\ufe69', '$', 'dollar', 'dollars', 'Dollar', 'Dollars', 'RD\uff04', 'RD\ufe69'], \n               minor=2, countries=['DO'])\n    ]\n\n    In [3]: iso4217parse.by_symbol_match('The price is \u20a8 35.8 !')\n    Out[3]: \n    [\n      Currency(alpha3='LKR', code_num=144, name='Sri Lankan rupee', \n               symbols=['\u0dbb\u0dd4', '\u20a8', 'Rs', '\u0bb0\u0bc2', 'SLRs', 'rupees', 'rupee'], \n               minor=2, countries=['LK']),\n      Currency(alpha3='MUR', code_num=480, name='Mauritian rupee', \n               symbols=['\u20a8', 'rupees', 'rupee'], minor=2, countries=['MU']),\n      Currency(alpha3='NPR', code_num=524, name='Nepalese rupee', \n               symbols=['\u0930\u0941', '\u20a8', 'Rs', 'Re', 'rupees', 'rupee'], minor=2, countries=['NP']),\n      Currency(alpha3='PKR', code_num=586, name='Pakistani rupee', \n               symbols=['\u20a8', 'Rs', 'rupees', 'rupee'], \n               minor=2, countries=['PK'])\n    ]\n\n    In [4]: iso4217parse.by_symbol_match('The price is \u20a8 35.8 !', country_code='NP')\n    Out[4]: \n    [\n      Currency(alpha3='NPR', code_num=524, name='Nepalese rupee', \n               symbols=['\u0930\u0941', '\u20a8', 'Rs', 'Re', 'rupees', 'rupee'], \n               minor=2, countries=['NP'])\n    ]\n\n    In [5]: iso4217parse.by_symbol_match?\n    Signature: iso4217parse.by_symbol_match(value, country_code=None)\n    Docstring:\n    Get list of possible currencies where the symbol is in value; filter by country_code (iso3166 alpha2 code)\n\n    Look for first matching currency symbol in `value`. Filter similar to `by_symbol`.\n    Symbols are sorted by length and relevance of first character (see `_symbols()`).\n\n    Note: This is a [heuristic](https://en.wikipedia.org/wiki/Heuristic) !\n\n    Parameters:\n        value: unicode                   Some input string.\n        country_code: Optional[unicode]  Iso3166 alpha2 country code.\n\n    Returns:\n        List[Currency]: Currency objects found in `value`; filter by country_code.\n\nData aquisition\n---------------\n\nBasic ISO4217 currency information is gathered from wikipedia:\nhttps://en.wikipedia.org/wiki/ISO\\_4217 . The tables are parsed with\n``gen_data.py`` and stored in ``iso4217parse/data.json``. This gives\ninformation for ``alpha3``, ``code_num``, ``name``, ``minor`` and\n``countries``. The currency symbol information is hand gathered from:\n\n-  individuel wikipedia pages, i.e.\n   `EUR <https://en.wikipedia.org/wiki/Euro>`__ has a ``Denominations``\n   -> ``Symbol`` section.\n-  http://www.iotafinance.com/en/ISO-4217-Currency-Codes.html\n-  http://www.xe.com/currency/ , i.e.\n   `GBP <http://www.xe.com/currency/gbp-british-pound>`__ has a\n   ``Currency Facts`` -> ``Symbol`` section\n\nand stored in ``iso4217parse/symbols.json``. Each currency can have\nmultiple currency symbols - the first symbol in the list is the\n(opinionated) choice for the currency.\n\n**Contribution Note**: Possible ways to contribute here:\n\n-  hand check symbols for currency code.\n-  automatic generation of the ``iso4217parse/symbols.json`` file.\n\n.. |Build Status| image:: https://travis-ci.org/tammoippen/iso4217parse.svg?branch=master\n   :target: https://travis-ci.org/tammoippen/iso4217parse\n.. |Coverage Status| image:: https://coveralls.io/repos/github/tammoippen/iso4217parse/badge.svg?branch=master\n   :target: https://coveralls.io/github/tammoippen/iso4217parse?branch=master\n.. |Tested CPython Versions| image:: https://img.shields.io/badge/cpython-2.7%2C%203.5%2C%203.6%2C%20nightly-brightgreen.svg\n   :target: https://img.shields.io/badge/cpython-2.7%2C%203.5%2C%203.6%2C%20nightly-brightgreen.svg\n.. |Tested PyPy Versions| image:: https://img.shields.io/badge/pypy-2.7--5.8.0%2C%203.5--5.8.0-brightgreen.svg\n   :target: https://img.shields.io/badge/pypy-2.7--5.8.0%2C%203.5--5.8.0-brightgreen.svg\n.. |PyPi version| image:: https://img.shields.io/pypi/v/iso4217parse.svg\n   :target: https://pypi.python.org/pypi/iso4217parse\n.. |PyPi license| image:: https://img.shields.io/pypi/l/iso4217parse.svg\n   :target: https://pypi.python.org/pypi/iso4217parse",
    "docs_url": null,
    "download_url": "https://github.com/tammoippen/iso4217parse/archive/v0.3.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/tammoippen/iso4217parse",
    "keywords": "iso4217,currency,parse,symbol",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "iso4217parse",
    "platform": "",
    "project_url": "https://pypi.org/project/iso4217parse/",
    "release_url": "https://pypi.org/project/iso4217parse/0.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Parse currencies (symbols and codes) from and to ISO4217.",
    "version": "0.3"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fc6c0ca7c33ab9553313985afd330a95",
          "sha256": "64d469938d20f345042650dea94611419a5afd55cb6561d9e52d936774d15924"
        },
        "downloads": -1,
        "filename": "iso4217parse-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fc6c0ca7c33ab9553313985afd330a95",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19683,
        "upload_time": "2017-10-10T14:24:15",
        "url": "https://files.pythonhosted.org/packages/c2/c8/8c5139b7b844834313a9edcf9f1798adffc8e538a27778a817eb55d64566/iso4217parse-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1231e43e49ed8718b872d63afb73503a",
          "sha256": "19c7017773adfc3d50f72245b0b4a4ec4cc35ffcda697168b2e40e4ce7a3f4d0"
        },
        "downloads": -1,
        "filename": "iso4217parse-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1231e43e49ed8718b872d63afb73503a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20176,
        "upload_time": "2017-10-10T14:54:41",
        "url": "https://files.pythonhosted.org/packages/3e/01/9126d6e8bea34f2286a67ecb4e9a41d0644e15ffd0bd631a44fe1ce51118/iso4217parse-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9b077063573f17edef9b82c08c89ffd2",
          "sha256": "1e9d136f28170d5d88ff5db6b62e9693e24e2fb85515b2108150630ab6505003"
        },
        "downloads": -1,
        "filename": "iso4217parse-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9b077063573f17edef9b82c08c89ffd2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20305,
        "upload_time": "2017-10-11T16:24:13",
        "url": "https://files.pythonhosted.org/packages/19/d4/44d78a9d595d7c3a0865a4a30f2357060994dd7952dae827025393a6703d/iso4217parse-0.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9b077063573f17edef9b82c08c89ffd2",
        "sha256": "1e9d136f28170d5d88ff5db6b62e9693e24e2fb85515b2108150630ab6505003"
      },
      "downloads": -1,
      "filename": "iso4217parse-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "9b077063573f17edef9b82c08c89ffd2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 20305,
      "upload_time": "2017-10-11T16:24:13",
      "url": "https://files.pythonhosted.org/packages/19/d4/44d78a9d595d7c3a0865a4a30f2357060994dd7952dae827025393a6703d/iso4217parse-0.3.tar.gz"
    }
  ]
}