{
  "info": {
    "author": "Fritz Obermeyer",
    "author_email": "fritz.obermeyer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": ".. figure:: doc/cartoon.png\n   :alt: A Bayesian latent tree model\n\n   A Bayesian latent tree model\n\nTreeCat\n=======\n\n|Build Status| |Latest Version| |DOI|\n\nIntended Use\n------------\n\nTreeCat is an inference engine intended to power higher-level machine\nlearning tools. TreeCat is appropriate for analyzing medium-sized\ntabular data with categorical and ordinal values, possibly with missing\nobservations.\n\n+--------------------------+--------------------------+\n|                          | TreeCat supports         |\n+==========================+==========================+\n| Feature Types            | categorical, ordinal     |\n+--------------------------+--------------------------+\n| # Rows (n)               | 1000-100K                |\n+--------------------------+--------------------------+\n| # Features (p)           | 10-1000                  |\n+--------------------------+--------------------------+\n| # Cells (n \u00d7 p)          | 10K-10M                  |\n+--------------------------+--------------------------+\n| # Categories             | 2-10ish                  |\n+--------------------------+--------------------------+\n| Max Ordinal              | 10ish                    |\n+--------------------------+--------------------------+\n| Missing obervations?     | yes                      |\n+--------------------------+--------------------------+\n| Repeated observations?   | yes                      |\n+--------------------------+--------------------------+\n| Sparse data?             | no, use something else   |\n+--------------------------+--------------------------+\n| Unsupervised             | yes                      |\n+--------------------------+--------------------------+\n| Semisupervised           | yes                      |\n+--------------------------+--------------------------+\n| Supervised               | no, use something else   |\n+--------------------------+--------------------------+\n\nInstalling\n----------\n\nFirst install ``numba`` (conda makes this easy). Then\n\n.. code:: sh\n\n    $ pip install pytreecat\n\nQuick Start\n-----------\n\n1. Format your data as a ``data.csv`` file with a header row. It's fine\n   to include extra columns that won't be used.\n\n   +-------------+------------+----------+----------+\n   | title       | genre      | decade   | rating   |\n   +=============+============+==========+==========+\n   | vertigo     | thriller   | 1950s    | 5        |\n   +-------------+------------+----------+----------+\n   | up          | family     | 2000s    | 3        |\n   +-------------+------------+----------+----------+\n   | desk set    | comedy     | 1950s    | 4        |\n   +-------------+------------+----------+----------+\n   | santapaws   | family     | 2010s    | 1        |\n   +-------------+------------+----------+----------+\n   | chinatown   | mystery    | 1970s    | 4        |\n   +-------------+------------+----------+----------+\n\n2. Create a ``schema.csv`` using TreeCat's ``guess-schema`` command\n\n   .. code:: sh\n\n       $ treecat guess-schema data.csv schema.csv    # Creates schema.csv\n\n   and then fix any incorrectly guessed feature types. The schema has\n   columns ``name,type,count,uniqu,values``, where the first column is\n   the feature name (genre, decade, rating), the second column is the\n   feature type (categorical or ordinal).\n\n   +----------+---------------+-------+\n   | name     | type          | ...   |\n   +==========+===============+=======+\n   | genre    | categorical   | ...   |\n   +----------+---------------+-------+\n   | decade   | categorical   | ...   |\n   +----------+---------------+-------+\n   | rating   | ordinal       | ...   |\n   +----------+---------------+-------+\n\n3. Import your csv files into treecat's internal format. We'll call our\n   dataset ``dataset.pkz`` (a gzipped pickle file).\n\n   .. code:: sh\n\n       $ treecat import-data data.csv schema.csv dataset.pkz\n\n4. Train an ensemble model on your dataset. This typically takes\n   ~15minutes for a 1M cell dataset.\n\n   .. code:: sh\n\n       $ treecat train dataset.pkz ensemble.pkz\n\n5. Load your trained model into a server\n\n   .. code:: python\n\n       from treecat.serving import EnsembleServer\n\n       server = EnsembleServer('ensemble.pkz')\n\n6. Run queries against the server. For example we can compute marginals\n\n   .. code:: python\n\n       server.sample(100, np.ones(V)).mean(axis=0)\n\n   or compute a latent correlation matrix\n\n   .. code:: python\n\n       print(server.correlation())\n\nThe Server Interface\n--------------------\n\nTreeCat's\n`server <https://github.com/fritzo/treecat/blob/master/treecat/serving.py>`__\ninterface currently supports the two basic Bayesian operations:\n\n-  ``server.sample(N, counts, data=None)`` draws N samples from the\n   joint posterior distribution, optionally conditioned on ``data``.\n\n-  ``server.logprob(data)`` computes posterior log probability of data.\n\nTreeCat's internal data representation is multinomial, and thus supports\nmissing and repeated measurements, and even data adding. For example to\ncompute conditional probability of data ``A`` given data ``B``, we can\nsimply compute\n\n.. code:: py\n\n    cond = server.logprob(A + B) - server.logprob(B)\n\nThe Model\n---------\n\nLet ``V`` be a set of vertices (one vertex per feature). Let ``C[v]`` be\nthe dimension of the ``v``\\ th feature. Let ``N`` be the number of\ndatapoints. Let ``K[n,v]`` be the number of observations of feature\n``v`` in row ``n`` (e.g. 1 for a categorical variable, 0 for missing\ndata, or ``k`` for an ordinal value with minimum 0 and maximum ``k``).\n\nTreeCat is the following generative model:\n\n.. code:: python\n\n    E ~ UniformSpanningTree(V)    # An undirected tree.\n    for v in V:\n        Pv[v] ~ Dirichlet(size = [M], alpha = 1/2)\n    for (u,v) in E:\n        Pe[u,v] ~ Dirichlet(size = [M,M], alpha = 1/(2*M))\n        assume(Pv[u] == sum(Pe[u,v], axis = 1))\n        assume(Pv[v] == sum(Pe[u,v], axis = 0))\n    for v in V:\n        for i in 1:M:\n            Q[v,i] ~ Dirichlet(size = [C[v]])\n    for n in 1:N:\n        for v in V:\n            X[n,v] ~ Categorical(Pv[v])\n        for (u,v) in E:\n            (X[n,u],X[n,v]) ~ Categorical(Pe[u,v])\n        for v in V:\n            Z[n,v] ~ Multinomial(Q[v,X[n,v]], count = K[n,v])\n\nwhere we've avoided adding an arbitrary root to the tree, and instead\npresented the model as a manifold with overlapping variables and\nconstraints.\n\nThe Inference Algorithm\n-----------------------\n\nThis package implements fully Bayesian MCMC inference using\nsubsample-annealed Gibbs sampling. There are two pieces of latent state\nthat are sampled:\n\n-  Latent classes for each row for each vertex. These are sampled by\n   single-site Gibbs sampling with a linear subsample-annealing\n   schedule.\n\n-  The latent tree structure is sampled by randomly removing an edge and\n   replacing it. Since removing an edge splits the graph into two\n   connected components, the only replacement locations that are\n   feasible are those that re-connect the graph.\n\nThe single-site Gibbs sampler uses dynamic programming to simultaneously\nsample the complete latent assignment vector for each row. A dynamic\nprogramming program is created each time the tree structure changes.\nThis program is interpreted by various virtual machines for different\npurposes (training the model, sampling from the posterior, computing log\nprobability of the posterior). The virtual machine for training is\njit-compiled using numba.\n\nLicense\n-------\n\nCopyright (c) 2017 Fritz Obermeyer. TreeCat is licensed under the\n`Apache 2.0 License </LICENSE>`__.\n\n.. |Build Status| image:: https://travis-ci.org/posterior/treecat.svg?branch=master\n   :target: https://travis-ci.org/posterior/treecat\n.. |Latest Version| image:: https://badge.fury.io/py/pytreecat.svg\n   :target: https://pypi.python.org/pypi/pytreecat\n.. |DOI| image:: https://zenodo.org/badge/93913649.svg\n   :target: https://zenodo.org/badge/latestdoi/93913649\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/posterior/treecat",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytreecat",
    "platform": "",
    "project_url": "https://pypi.org/project/pytreecat/",
    "release_url": "https://pypi.org/project/pytreecat/0.1.4/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A Bayesian latent tree model of multivariate multinomial data",
    "version": "0.1.4"
  },
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ceec0ed5d5a26176cd7b6f376c5a3322",
          "sha256": "cc439d0cb58e65150291e250896b64dfaaf46b779a993a19e33eaaee0b090d0d"
        },
        "downloads": 0,
        "filename": "pytreecat-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ceec0ed5d5a26176cd7b6f376c5a3322",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23259,
        "upload_time": "2017-07-07T01:41:33",
        "url": "https://files.pythonhosted.org/packages/dc/66/e37c23d89671eccf7d0ec087352c0f13c1d873f5efe7ccabce313563546c/pytreecat-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "85099773606451a063ae0073935146a9",
          "sha256": "d9bbb82c1206186c46b8cb96c89acb01cb7f86350099c3f8d45d81a382c473e5"
        },
        "downloads": 0,
        "filename": "pytreecat-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "85099773606451a063ae0073935146a9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24179,
        "upload_time": "2017-07-07T04:40:45",
        "url": "https://files.pythonhosted.org/packages/52/c9/2895cbf07ea97838e396e2daf504b6de667073cacc73da8dd7b83e1f677f/pytreecat-0.1.3.tar.gz"
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d07385a4b8a49ca62a9206b5a38db48e",
          "sha256": "c7ec6797b717c6721a2035e90eab3dd249bc0bba65150d0deafdbf1a85f8f79c"
        },
        "downloads": 0,
        "filename": "pytreecat-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d07385a4b8a49ca62a9206b5a38db48e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27554,
        "upload_time": "2017-07-08T05:22:06",
        "url": "https://files.pythonhosted.org/packages/d8/ff/36989220ef154a1d1a6972223985f9a7d03b828046f8a96963fb577b32c0/pytreecat-0.1.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d07385a4b8a49ca62a9206b5a38db48e",
        "sha256": "c7ec6797b717c6721a2035e90eab3dd249bc0bba65150d0deafdbf1a85f8f79c"
      },
      "downloads": 0,
      "filename": "pytreecat-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "d07385a4b8a49ca62a9206b5a38db48e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 27554,
      "upload_time": "2017-07-08T05:22:06",
      "url": "https://files.pythonhosted.org/packages/d8/ff/36989220ef154a1d1a6972223985f9a7d03b828046f8a96963fb577b32c0/pytreecat-0.1.4.tar.gz"
    }
  ]
}