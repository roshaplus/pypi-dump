{
  "info": {
    "author": "Matt Baldwin (stackpointcloud.com)",
    "author_email": "baldwin@stackpointcloud.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Python SDK\r\n\r\nVersion: profitbricks-sdk-python **3.1.2**\r\n\r\n## Table of Contents\r\n\r\n* [Description](#description)\r\n* [Getting Started](#getting-started)\r\n  * [Installation](#installation)\r\n  * [Authenticating](#authenticating)\r\n  * [Error Handling](#error-handling)\r\n* [Reference](#reference)\r\n  * [Data Centers](#data-centers)\r\n    * [List Data Centers](#list-data-centers)\r\n    * [Retrieve a Data Center](#retrieve-a-data-center)\r\n    * [Create a Data Center](#create-a-data-center)\r\n    * [Update a Data Center](#update-a-data-center)\r\n    * [Delete a Data Center](#delete-a-data-center)\r\n  * [Locations](#locations)\r\n    * [List Locations](#list-locations)\r\n    * [Get a Location](#get-a-location)\r\n  * [Servers](#servers)\r\n    * [List Servers](#list-servers)\r\n    * [Retrieve a Server](#retrieve-a-server)\r\n    * [Create a Server](#create-a-server)\r\n    * [Update a Server](#update-a-server)\r\n    * [Delete a Server](#delete-a-server)\r\n    * [List Attached Volumes](#list-attached-volumes)\r\n    * [Attach a Volume](#attach-a-volume)\r\n    * [Retrieve an Attached Volume](#retrieve-an-attached-volume)\r\n    * [Detach a Volume](#detach-a-volume)\r\n    * [List Attached CD-ROMs](#list-attached-cd-roms)\r\n    * [Attach a CD-ROM](#attach-a-cd-rom)\r\n    * [Retrieve an Attached CD-ROM](#retrieve-an-attached-cd-rom)\r\n    * [Detach a CD-ROM](#detach-a-cd-rom)\r\n    * [Reboot a Server](#reboot-a-server)\r\n    * [Start a Server](#start-a-server)\r\n    * [Stop a Server](#stop-a-server)\r\n  * [Images](#images)\r\n    * [List Images](#list-images)\r\n    * [Get an Image](#get-an-image)\r\n    * [Update an Image](#update-an-image)\r\n    * [Delete an Image](#delete-an-image)\r\n  * [Volumes](#volumes)\r\n    * [List Volumes](#list-volumes)\r\n    * [Get a Volume](#get-a-volume)\r\n    * [Create a Volume](#create-a-volume)\r\n    * [Update a Volume](#update-a-volume)\r\n    * [Delete a Volume](#delete-a-volume)\r\n    * [Create a Volume Snapshot](#create-a-volume-snapshot)\r\n    * [Restore a Volume Snapshot](#restore-a-volume-snapshot)\r\n  * [Snapshots](#snapshots)\r\n    * [List Snapshots](#list-snapshots)\r\n    * [Get a Snapshot](#get-a-snapshot)\r\n    * [Update a Snapshot](#update-a-snapshot)\r\n    * [Delete a Snapshot](#delete-a-snapshot)\r\n  * [IP Blocks](#ip-blocks)\r\n    * [List IP Blocks](#list-ip-blocks)\r\n    * [Get an IP Block](#get-an-ip-block)\r\n    * [Create an IP Block](#create-an-ip-block)\r\n    * [Delete an IP Block](#delete-an-ip-block)\r\n  * [LANs](#lans)\r\n    * [List LANs](#list-lans)\r\n    * [Create a LAN](#create-a-lan)\r\n    * [Get a LAN](#get-a-lan)\r\n    * [Get LAN Members](#get-lan-members)\r\n    * [Update a LAN](#update-a-lan)\r\n    * [Delete a LAN](#delete-a-lan)\r\n  * [Network Interfaces (NICs)](#network-interfaces-nics)\r\n    * [List NICs](#list-nics)\r\n    * [Get a NIC](#get-a-nic)\r\n    * [Create a NIC](#create-a-nic)\r\n    * [Update a NIC](#update-a-nic)\r\n    * [Delete a NIC](#delete-a-nic)\r\n  * [Firewall Rules](#firewall-rules)\r\n    * [List Firewall Rules](#list-firewall-rules)\r\n    * [Get a Firewall Rule](#get-a-firewall-rule)\r\n    * [Create a Firewall Rule](#create-a-firewall-rule)\r\n    * [Update a Firewall Rule](#update-a-firewall-rule)\r\n    * [Delete a Firewall Rule](#delete-a-firewall-rule)\r\n  * [Load Balancers](#load-balancers)\r\n    * [List Load Balancers](#list-load-balancers)\r\n    * [Get a Load Balancer](#get-a-load-balancer)\r\n    * [Create a Load Balancer](#create-a-load-balancer)\r\n    * [Update a Load Balancer](#update-a-load-balancer)\r\n    * [List Load Balanced NICs](#list-load-balanced-nics)\r\n    * [Get a Load Balanced NIC](#get-a-load-balanced-nic)\r\n    * [Associate NIC to a Load Balancer](#associate-nic-to-a-load-balancer)\r\n    * [Remove a NIC Association](#remove-a-nic-association)\r\n  * [Requests](#requests)\r\n    * [List Requests](#list-requests)\r\n    * [Get a Request](#get-a-request)\r\n    * [Get a Request Status](#get-a-request-status)\r\n* [Examples](#examples)\r\n    * [List All Data Centers](#list-all-data-centers)\r\n    * [Search for Images](#search-for-images)\r\n    * [Reserve an IP Block](#reserve-an-ip-block)\r\n    * [Wait for Resources](#wait-for-resources)\r\n    * [Component Build](#component-build)\r\n    * [Composite Build](#composite-build)\r\n* [Support](#support)\r\n* [Testing](#testing)\r\n* [Contributing](#contributing)\r\n\r\n## Description\r\n\r\nThe ProfitBricks SDK for Python provides you with access to the ProfitBricks Cloud API. The client library supports both simple and complex requests. It is designed for developers who are building applications in Python.\r\n\r\nThis guide will walk you through getting setup with the library and performing various actions against the API.\r\n\r\nThe SDK for Python wraps the ProfitBricks Cloud API. All API operations are performed over SSL and authenticated using your ProfitBricks portal credentials. The API can be accessed within an instance running in ProfitBricks or directly over the Internet from any application that can send an HTTPS request and receive an HTTPS response.\r\n\r\n## Getting Started\r\n\r\nBefore you begin you will need to have [signed-up](https://www.profitbricks.com/signup) for a ProfitBricks account. The credentials you setup during sign-up will be used to authenticate against the Cloud API.\r\n\r\n### Installation\r\n\r\nThe ProfitBricks SDK for Python is available on [PyPi](https://pypi.python.org/pypi/profitbricks). You can install the latest stable version using `pip`:\r\n\r\n    pip install profitbricks\r\n\r\nDone!\r\n\r\n### Authenticating\r\n\r\nConnecting to ProfitBricks is handled by first setting up your authentication credentials.\r\n\r\n    from profitbricks.client import ProfitBricksService\r\n\r\n    client = ProfitBricksService(\r\n        username='YOUR_USERNAME', password='YOUR_PASSWORD')\r\n\r\nReplace the values for *YOUR_USERNAME* and *YOUR_PASSWORD* with the ProfitBricks credentials you established during sign-up.\r\n\r\nYou can now use `client` for any future request.\r\n\r\n### Error Handling\r\n\r\nThe SDK will raise custom exceptions when the Cloud API returns an error. There are five exception types:\r\n\r\n| Exception | HTTP Code | Description |\r\n|---|:-:|---|\r\n| PBNotAuthorizedError | 401 | The supplied user credentials are invalid. |\r\n| PBNotFoundError | 404 | The requested resource cannot be found. |\r\n| PBValidationError | 422 | The request body includes invalid JSON. |\r\n| PBRateLimitExceededError | 429 | The Cloud API rate limit has been exceeded. |\r\n| PBError | Other | A generic exception for all other status codes. |\r\n\r\n## Reference\r\n\r\nThis section provides details on all the available operations and the parameters they accept. Brief code snippets demonstrating usage are also included.\r\n\r\n`client` is the `ProfitBricksService` class imported `from profitbricks.client import ProfitBricksService`\r\n\r\nMany of the *get_* or *list_* operations will accept an optional *depth* parameter. Setting this to a value between 0 and 5 affects the amount of data that is returned. The detail returned varies somewhat depending on the resource being queried, however it generally follows this pattern.\r\n\r\n| Depth | Description |\r\n|:-:|---|\r\n| 0 | Only direct properties are included. Children are not included. |\r\n| 1 | Direct properties and children's references are returned. |\r\n| 2 | Direct properties and children's properties are returned. |\r\n| 3 | Direct properties, children's properties, and descendant's references are returned. |\r\n| 4 | Direct properties, children's properties, and descendant's properties are returned. |\r\n| 5 | Returns all available properties. |\r\n\r\nThis SDK sets the *depth=1* by default as that works well in the majority of cases. You may find that setting *depth* to a lower or higher value could simplify a later operation by reducing or increasing the data available in the response object.\r\n\r\n### Data Centers\r\n\r\nVirtual Data Centers (VDCs) are the foundation of the ProfitBricks platform. VDCs act as logical containers for all other objects you will be creating, e.g., servers. You can provision as many VDCs as you want. VDCs have their own private network and are logically segmented from each other to create isolation.\r\n\r\n#### List Data Centers\r\n\r\nThis operation will list all currently provisioned VDCs that your account credentials provide access to.\r\n\r\nThere are no request arguments that need to be supplied. You may supply the optional *depth* parameter.\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n\r\n    response = client.list_datacenters()\r\n\r\n---\r\n\r\n#### Retrieve a Data Center\r\n\r\nUse this to retrieve details about a specific VDC.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.get_datacenter(datacenter_id='UUID')\r\n\r\n---\r\n\r\n#### Create a Data Center\r\n\r\nUse this operation to create a new VDC. You can create a \"simple\" VDC by supplying just the required *name* and *location* parameters. This operation also has the capability of provisioning a \"complex\" VDC by supplying additional parameters for servers, volumes, LANs, and/or load balancers.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| name | **yes** | string | The name of the VDC. |\r\n| location | **yes** | string | The physical ProfitBricks location where the VDC will be created. |\r\n| description | no | string | A description for the VDC, e.g. staging, production. |\r\n| servers | no | list | Details about creating one or more servers. See [create a server](#create-a-server). |\r\n| volumes | no | list | Details about creating one or more volumes. See [create a volume](#create-a-volume). |\r\n| lans | no | list | Details about creating one or more LANs. See [create a lan](#create-a-lan). |\r\n| loadbalancers | no | list | Details about creating one or more load balancers. See [create a load balancer](#create-a-load-balancer). |\r\n\r\nThe following table outlines the locations currently supported:\r\n\r\n| Value| Country | City |\r\n|---|---|---|\r\n| us/las | United States | Las Vegas |\r\n| de/fra | Germany | Frankfurt |\r\n| de/fkb | Germany | Karlsruhe |\r\n\r\n    datacenter = Datacenter(\r\n        name='Data Center Name',\r\n        description='My new data center',\r\n        location='de/fkb')\r\n\r\n    response = client.create_datacenter(datacenter=datacenter)\r\n\r\n**NOTES**:\r\n* The value for `name` cannot contain the following characters: (@, /, , |, \u2018\u2019, \u2018).\r\n* You cannot change the VDC `location` once it has been provisioned.\r\n\r\n---\r\n\r\n#### Update a Data Center\r\n\r\nAfter retrieving a VDC, either by ID or as a create response object, you can change its properties by calling the `update_datacenter` method. Some parameters may not be changed using `update_datacenter`.\r\n\r\nThe following table describes the available request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| name | no | string | The new name of the VDC. |\r\n| description | no | string | The new description of the VDC. |\r\n\r\n    response = client.update_datacenter(\r\n        datacenter_id='UUID',\r\n        name='New Name'\r\n        description='New description')\r\n\r\n---\r\n\r\n#### Delete a Data Center\r\n\r\nThis will remove all objects within the VDC and remove the VDC object itself.\r\n\r\n**NOTE**: This is a highly destructive operation which should be used with extreme caution!\r\n\r\nThe following table describes the available request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC that you want to delete. |\r\n\r\n    response = client.delete_datacenter(datacenter_id='UUID')\r\n\r\n---\r\n\r\n### Locations\r\n\r\nLocations are the physical ProfitBricks data centers where you can provision your VDCs.\r\n\r\n#### List Locations\r\n\r\nThe `list_locations` operation will return the list of currently available locations.\r\n\r\nThere are no request parameters to supply.\r\n\r\n    response = client.list_locations()\r\n\r\n---\r\n\r\n#### Get a Location\r\n\r\nRetrieves the attributes of a specific location.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| location_id | **yes** | string | The ID consisting of country/city. |\r\n\r\n    client.get_location('us/las')\r\n\r\n---\r\n\r\n### Servers\r\n\r\n#### List Servers\r\n\r\nYou can retrieve a list of all the servers provisioned inside a specific VDC.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes**  | string | The ID of the VDC. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.list_servers(datacenter_id='UUID')\r\n\r\n---\r\n\r\n#### Retrieve a Server\r\n\r\nReturns information about a specific server such as its configuration, provisioning status, etc.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.get_server(\r\n        datacenter_id='UUID',\r\n        server_id='UUID')\r\n\r\n---\r\n\r\n#### Create a Server\r\n\r\nCreates a server within an existing VDC. You can configure additional properties such as specifying a boot volume and connecting the server to a LAN.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| name | **yes** | string | The name of the server. |\r\n| cores | **yes** | int | The total number of cores for the server. |\r\n| ram | **yes** | int | The amount of memory for the server in MB, e.g. 2048. Size must be specified in multiples of 256 MB with a minimum of 256 MB; however, if you set `ram_hot_plug` to *True* then you must use a minimum of 1024 MB. |\r\n| availability_zone | no | string | The availability zone in which the server should exist. |\r\n| cpu_family | no | string | Sets the CPU type. \"AMD_OPTERON\" or \"INTEL_XEON\". Defaults to \"AMD_OPTERON\". |\r\n| boot_volume_id | no | string | Reference to a volume used for booting. If not *null* then `boot_cdrom` has to be *null*. |\r\n| boot_cdrom | no | string | Reference to a CD-ROM used for booting. If not *null* then `boot_volume_id` has to be *null*. |\r\n| attach_volumes | no | list | A list of volumes that you want to connect to the server. |\r\n| create_volumes | no | list | A list of volumes that you want to create and attach to the server.|\r\n| nics | no | list | A list of NICs you wish to create at the time the server is provisioned. |\r\n\r\nThe following table outlines the server availability zones currently supported:\r\n\r\n| Availability Zone | Comment |\r\n|---|---|\r\n| AUTO | Automatically Selected Zone |\r\n| ZONE_1 | Fire Zone 1 |\r\n| ZONE_2 | Fire Zone 2 |\r\n\r\n    server = Server(\r\n        name='Server Name',\r\n        cores=1,\r\n        ram=2048,\r\n        description='My new server',\r\n        location='de/fkb')\r\n\r\n    response = client.create_server(\r\n        datacenter_id='UUID',\r\n        server=server)\r\n\r\n---\r\n\r\n#### Update a Server\r\n\r\nPerform updates to the attributes of a server.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| name | no | string | The name of the server. |\r\n| cores | no | int | The number of cores for the server. |\r\n| ram | no | int | The amount of memory in the server. |\r\n| availability_zone | no | string | The new availability zone for the server. |\r\n| cpu_family | no | string | Sets the CPU type. \"AMD_OPTERON\" or \"INTEL_XEON\". Defaults to \"AMD_OPTERON\". |\r\n| boot_volume_id | no | string | Reference to a volume used for booting. If not *null* then `boot_cdrom` has to be *null*. |\r\n| boot_cdrom | no | string | Reference to a CD-ROM used for booting. If not *null* then `boot_volume_id` has to be *null*. |\r\n\r\nAfter retrieving a server, either by ID or as a create response object, you can change its properties and call the `update_server` method:\r\n\r\n    response = client.update_server(\r\n        datacenter_id='UUID',\r\n        server_id='UUID',\r\n        name='New Name')\r\n\r\n---\r\n\r\n#### Delete a Server\r\n\r\nThis will remove a server from a data center. **NOTE**: This will not automatically remove the storage volume(s) attached to a server. A separate operation is required to delete a storage volume.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n\r\nAfter retrieving a server, either by ID or as a create response object, you can call the `delete_server` method directly on the object:\r\n\r\n    response = client.delete_server(\r\n        datacenter_id='UUID',\r\n        server_id='UUID')\r\n\r\n---\r\n\r\n#### List Attached Volumes\r\n\r\nRetrieves a list of volumes attached to the server.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\nAfter retrieving a server, either by ID or as a create response object, you can call the `get_attached_volumes` method directly on the object:\r\n\r\n    response = client.get_attached_volumes(\r\n        datacenter_id='UUID',\r\n        server_id='UUID')\r\n\r\n---\r\n\r\n#### Attach a Volume\r\n\r\nThis will attach a pre-existing storage volume to the server.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| volume_id | **yes** | string | The ID of a storage volume. |\r\n\r\nAfter retrieving a server, either by ID or as a create response object, you can call the `attach_volume` method directly on the object:\r\n\r\n    response = client.attach_volume(\r\n        datacenter_id='UUID',\r\n        server_id='UUID',\r\n        volume_id='UUID')\r\n\r\n---\r\n\r\n#### Retrieve an Attached Volume\r\n\r\nThis will retrieve the properties of an attached volume.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| volume_id | **yes** | string | The ID of the attached volume. |\r\n\r\nAfter retrieving a server, either by ID or as a create response object, you can call the `get_attached_volume` method directly on the object:\r\n\r\n    response = client.get_attached_volume(\r\n        datacenter_id='UUID',\r\n        server_id='UUID',\r\n        volume_id='UUID')\r\n\r\n---\r\n\r\n#### Detach a Volume\r\n\r\nThis will detach the volume from the server. Depending on the volume `hot_unplug` settings, this may result in the server being rebooted.\r\n\r\nThis will NOT delete the volume from your VDC. You will need to make a separate request to delete a volume.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| volume_id | **yes** | string | The ID of the attached volume. |\r\n\r\nAfter retrieving a server, either by ID or as a create response object, you can call the `detach_volume` method directly on the object:\r\n\r\n    response = client.detach_volume(\r\n        datacenter_id='UUID',\r\n        server_id='UUID',\r\n        volume_id='UUID')\r\n\r\n---\r\n\r\n#### List Attached CD-ROMs\r\n\r\nRetrieves a list of CD-ROMs attached to a server.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\nAfter retrieving a server, either by ID or as a create response object, you can call the `get_attached_cdroms` method directly on the object:\r\n\r\n    response = client.get_attached_cdroms(\r\n        datacenter_id='UUID',\r\n        server_id='UUID')\r\n\r\n---\r\n\r\n#### Attach a CD-ROM\r\n\r\nYou can attach a CD-ROM to an existing server.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| cdrom_id | **yes** | string | The ID of a CD-ROM. |\r\n\r\nAfter retrieving a server, either by ID or as a create response object, you can call the `attach_cdrom` method directly on the object:\r\n\r\n    response = client.attach_cdrom(\r\n        datacenter_id='UUID',\r\n        server_id='UUID',\r\n        cdrom_id='UUID')\r\n\r\n---\r\n\r\n#### Retrieve an Attached CD-ROM\r\n\r\nYou can retrieve a specific CD-ROM attached to the server.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| cdrom_id | **yes** | string | The ID of the attached CD-ROM. |\r\n\r\nAfter retrieving a server, either by ID or as a create response object, you can call the `get_attached_cdrom` method directly on the object:\r\n\r\n    response = client.get_attached_cdrom(\r\n        datacenter_id='UUID',\r\n        server_id='UUID',\r\n        cdrom_id='UUID')\r\n\r\n---\r\n\r\n#### Detach a CD-ROM\r\n\r\nThis will detach a CD-ROM from the server.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| cdrom_id | **yes** | string | The ID of the attached CD-ROM. |\r\n\r\nAfter retrieving a server, either by ID or as a create response object, you can call the `detach_cdrom` method directly on the object:\r\n\r\n    response = client.detach_cdrom(\r\n        datacenter_id='UUID',\r\n        server_id='UUID',\r\n        cdrom_id='UUID')\r\n\r\n---\r\n\r\n#### Reboot a Server\r\n\r\nThis will force a hard reboot of the server. Do not use this method if you want to gracefully reboot the machine. This is the equivalent of powering off the machine and turning it back on.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n\r\nAfter retrieving a server, either by ID or as a create response object, you can call the `reboot_server` method directly on the object:\r\n\r\n    response = client.reboot_server(\r\n        datacenter_id='UUID',\r\n        server_id='UUID')\r\n\r\n---\r\n\r\n#### Start a Server\r\n\r\nThis will start a server. If the server's public IP was deallocated then a new IP will be assigned.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n\r\nAfter retrieving a server, either by ID or as a create response object, you can call the `start_server` method directly on the object:\r\n\r\n    response = client.start_server(\r\n        datacenter_id='UUID',\r\n        server_id='UUID')\r\n\r\n---\r\n\r\n#### Stop a Server\r\n\r\nThis will stop a server. The machine will be forcefully powered off, billing will cease, and the public IP, if one is allocated, will be deallocated.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n\r\nAfter retrieving a server, either by ID or as a create response object, you can call the `stop_server` method directly on the object:\r\n\r\n    response = client.stop_server(\r\n        datacenter_id='UUID',\r\n        server_id='UUID')\r\n\r\n---\r\n\r\n### Images\r\n\r\n#### List Images\r\n\r\nRetrieve a list of images.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.list_images()\r\n\r\n---\r\n\r\n#### Get an Image\r\n\r\nRetrieves the attributes of a specific image.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| image_id | **yes** | string | The ID of the image. |\r\n\r\n    response = client.get_image('UUID')\r\n\r\n---\r\n\r\n#### Update an Image\r\n\r\nUpdates the attributes of a specific user created image. You cannot update the properties of a public image supplied by ProfitBricks.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| image_id | **yes** | string | The ID of the image. |\r\n| name | no | string | The name of the image. |\r\n| description | no | string | The description of the image. |\r\n| licence_type | no | string | The snapshot's licence type: LINUX, WINDOWS, WINDOWS2016, or OTHER. |\r\n| cpu_hot_plug | no | bool | This volume is capable of CPU hot plug (no reboot required) |\r\n| cpu_hot_unplug | no | bool | This volume is capable of CPU hot unplug (no reboot required) |\r\n| ram_hot_plug | no | bool |  This volume is capable of memory hot plug (no reboot required) |\r\n| ram_hot_unplug | no | bool | This volume is capable of memory hot unplug (no reboot required) |\r\n| nic_hot_plug | no | bool | This volume is capable of NIC hot plug (no reboot required) |\r\n| nic_hot_unplug | no | bool | This volume is capable of NIC hot unplug (no reboot required) |\r\n| disc_virtio_hot_plug | no | bool | This volume is capable of VirtIO drive hot plug (no reboot required) |\r\n| disc_virtio_hot_unplug | no | bool | This volume is capable of VirtIO drive hot unplug (no reboot required) |\r\n| disc_scsi_hot_plug | no | bool | This volume is capable of SCSI drive hot plug (no reboot required) |\r\n| disc_scsi_hot_unplug | no | bool | This volume is capable of SCSI drive hot unplug (no reboot required) |\r\n\r\nYou can change an image's properties by calling the `update_image` method:\r\n\r\n    response = client.update_image(\r\n        image_id='UUID',\r\n        name='New Name',\r\n        description='New description',\r\n        licence_type='LINUX')\r\n\r\n---\r\n\r\n#### Delete an Image\r\n\r\nDeletes a specific user created image. You cannot delete public images supplied by ProfitBricks.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| image_id | **yes** | string | The ID of the image. |\r\n\r\n    response = client.delete_image('UUID')\r\n\r\n---\r\n\r\n### Volumes\r\n\r\n#### List Volumes\r\n\r\nRetrieve a list of volumes within the VDC. If you want to retrieve a list of volumes attached to a server please see the [List Attached Volumes](#list-attached-volumes) entry in the Server section for details.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.list_volumes(datacenter_id='UUID')\r\n\r\n---\r\n\r\n#### Get a Volume\r\n\r\nRetrieves the attributes of a given volume.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| volume_id | **yes** | string | The ID of the volume. |\r\n\r\n    response = client.get_volume(\r\n        datacenter_id='UUID',\r\n        volume_id='UUID')\r\n\r\n---\r\n\r\n#### Create a Volume\r\n\r\nCreates a volume within the VDC. This will NOT attach the volume to a server. Please see the [Attach a Volume](#attach-a-volume) entry in the Server section for details on how to attach storage volumes.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| name | no | string | The name of the volume. |\r\n| size | **yes** | int | The size of the volume in GB. |\r\n| bus | no | string | The bus type of the volume (VIRTIO or IDE). Default: VIRTIO. |\r\n| image | **yes** | string | The image or snapshot ID. |\r\n| type | **yes** | string | The volume type, HDD or SSD. |\r\n| licence_type | **yes** | string | The licence type of the volume. Options: LINUX, WINDOWS, WINDOWS2016, UNKNOWN, OTHER |\r\n| image_password | **yes** | string | One-time password is set on the Image for the appropriate root or administrative account. This field may only be set in creation requests. When reading, it always returns *null*. The password has to contain 8-50 characters. Only these characters are allowed: [abcdefghjkmnpqrstuvxABCDEFGHJKLMNPQRSTUVX23456789] |\r\n| ssh_keys | **yes** | string | SSH keys to allow access to the volume via SSH. |\r\n| availability_zone | no | string | The storage availability zone assigned to the volume. Valid values: AUTO, ZONE_1, ZONE_2, or ZONE_3. This only applies to HDD volumes. Leave blank or set to AUTO when provisioning SSD volumes. |\r\n\r\nThe following table outlines the various licence types you can define:\r\n\r\n| Licence Type | Comment |\r\n|---|---|\r\n| WINDOWS2016 | Use this for the Microsoft Windows Server 2016 operating system. |\r\n| WINDOWS | Use this for the Microsoft Windows Server 2008 and 2012 operating systems. |\r\n| LINUX |Use this for Linux distributions such as CentOS, Ubuntu, Debian, etc. |\r\n| OTHER | Use this for any volumes that do not match one of the other licence types. |\r\n| UNKNOWN | This value may be inherited when you've uploaded an image and haven't set the license type. Use one of the options above instead. |\r\n\r\nThe following table outlines the storage availability zones currently supported:\r\n\r\n| Availability Zone | Comment |\r\n|---|---|\r\n| AUTO | Automatically Selected Zone |\r\n| ZONE_1 | Fire Zone 1 |\r\n| ZONE_2 | Fire Zone 2 |\r\n| ZONE_3 | Fire Zone 3 |\r\n\r\n**Note:** You will need to provide either the `image` or the `licence_type` parameters when creating a volume. A `licence_type` is required, but if `image` is supplied, it is already set and cannot be changed. Either the `image_password` or `ssh_keys` parameters need to be supplied when creating a volume using one of the official ProfitBricks images. Only official ProfitBricks provided images support the `ssh_keys` and `image_password` parameters.\r\n\r\n    volume = Volume(\r\n        name='name',\r\n        size=20,\r\n        bus='VIRTIO',\r\n        type='HDD',\r\n        licence_type='LINUX',\r\n        availability_zone='ZONE_3')\r\n\r\n    response = client.create_volume(\r\n        datacenter_id='UUID',\r\n        volume=volume)\r\n\r\n---\r\n\r\n#### Update a Volume\r\n\r\nYou can update -- in full or partially -- various attributes on the volume; however, some restrictions are in place:\r\n\r\nYou can increase the size of an existing storage volume. You cannot reduce the size of an existing storage volume. The volume size will be increased without requiring a reboot if the relevant hot plug settings have been set to *true*. The additional capacity is not added automatically added to any partition, therefore you will need to handle that inside the OS afterwards. Once you have increased the volume size you cannot decrease the volume size.\r\n\r\nSince an existing volume is being modified, none of the request parameters are specifically required as long as the changes being made satisfy the requirements for creating a volume.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| volume_id | **yes** | string | The ID of the volume. |\r\n| name | no | string | The name of the volume. |\r\n| size | no | int | The size of the volume in GB. Only increase when updating. |\r\n| bus | no | string | The bus type of the volume (VIRTIO or IDE). Default: VIRTIO. |\r\n| image | no | string | The image or snapshot ID. |\r\n| type | no | string | The volume type, HDD or SSD. |\r\n| licence_type | no | string | The licence type of the volume. Options: LINUX, WINDOWS, WINDOWS2016, UNKNOWN, OTHER |\r\n| availability_zone | no | string | The storage availability zone assigned to the volume. Valid values: AUTO, ZONE_1, ZONE_2, or ZONE_3. This only applies to HDD volumes. Leave blank or set to AUTO when provisioning SSD volumes. |\r\n\r\nAfter retrieving a volume, either by ID or as a create response object, you can change its properties and call the `update_volume` method:\r\n\r\n    response = client.update_volume(\r\n        datacenter_id='UUID',\r\n        volume_id='UUID',\r\n        size=6,\r\n        name='New Name')\r\n\r\n---\r\n\r\n#### Delete a Volume\r\n\r\nDeletes the specified volume. This will result in the volume being removed from your data center. Use this with caution.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| volume_id | **yes** | string | The ID of the volume. |\r\n\r\nAfter retrieving a volume, either by ID or as a create response object, you can call the `delete_volume` method directly on the object:\r\n\r\n    response = client.delete_volume(\r\n        datacenter_id='UUID',\r\n        volume_id='UUID')\r\n\r\n---\r\n\r\n#### Create a Volume Snapshot\r\n\r\nCreates a snapshot of a volume within the VDC. You can use a snapshot to create a new storage volume or to restore a storage volume.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| volume_id | **yes** | string | The ID of the volume. |\r\n| name | no | string | The name of the snapshot. |\r\n| description | no | string | The description of the snapshot. |\r\n\r\nAfter retrieving a volume, either by ID or as a create response object, you can call the `create_snapshot` method directly on the object:\r\n\r\n    response = client.create_snapshot(\r\n        datacenter_id='UUID',\r\n        volume_id='UUID',\r\n        name='Snapshot Name',\r\n        description='Snapshot description')\r\n\r\n---\r\n\r\n#### Restore a Volume Snapshot\r\n\r\nThis will restore a snapshot onto a volume. A snapshot is created as just another image that can be used to create new volumes or to restore an existing volume.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| volume_id | **yes** | string | The ID of the volume. |\r\n| snapshot_id | **yes** | string |  The ID of the snapshot. |\r\n\r\nAfter retrieving a volume, either by ID or as a create response object, you can call the `restore_snapshot` method directly on the object:\r\n\r\n    response = client.restore_snapshot(\r\n        datacenter_id='UUID',\r\n        volume_id='UUID',\r\n        snapshot_id='UUID')\r\n\r\n---\r\n\r\n### Snapshots\r\n\r\n#### List Snapshots\r\n\r\nYou can retrieve a list of all available snapshots.\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.list_snapshots()\r\n\r\n---\r\n\r\n#### Get a Snapshot\r\n\r\nRetrieves the attributes of a specific snapshot.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| snapshot_id | **yes** | string | The ID of the snapshot. |\r\n\r\n    response = client.get_snapshot(snapshot_id='UUID')\r\n\r\n---\r\n\r\n#### Update a Snapshot\r\n\r\nPerform updates to attributes of a snapshot.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| snapshot_id | **yes** | string | The ID of the snapshot. |\r\n| name | no | string | The name of the snapshot. |\r\n| description | no | string | The description of the snapshot. |\r\n| licence_type | no | string | The snapshot's licence type: LINUX, WINDOWS, WINDOWS2016, or OTHER. |\r\n| cpu_hot_plug | no | bool | This volume is capable of CPU hot plug (no reboot required) |\r\n| cpu_hot_unplug | no | bool | This volume is capable of CPU hot unplug (no reboot required) |\r\n| ram_hot_plug | no | bool |  This volume is capable of memory hot plug (no reboot required) |\r\n| ram_hot_unplug | no | bool | This volume is capable of memory hot unplug (no reboot required) |\r\n| nic_hot_plug | no | bool | This volume is capable of NIC hot plug (no reboot required) |\r\n| nic_hot_unplug | no | bool | This volume is capable of NIC hot unplug (no reboot required) |\r\n| disc_virtio_hot_plug | no | bool | This volume is capable of VirtIO drive hot plug (no reboot required) |\r\n| disc_virtio_hot_unplug | no | bool | This volume is capable of VirtIO drive hot unplug (no reboot required) |\r\n| disc_scsi_hot_plug | no | bool | This volume is capable of SCSI drive hot plug (no reboot required) |\r\n| disc_scsi_hot_unplug | no | bool | This volume is capable of SCSI drive hot unplug (no reboot required) |\r\n\r\nAfter retrieving a snapshot, either by ID or as a create response object, you can change its properties and call the `update_snapshot` method:\r\n\r\n    response = client.update_snapshot(\r\n        snapshot_id='UUID',\r\n        name='New Name',\r\n        description='New description')\r\n\r\n---\r\n\r\n#### Delete a Snapshot\r\n\r\nDeletes the specified snapshot.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| snapshot_id | **yes** | string | The ID of the snapshot. |\r\n\r\nAfter retrieving a snapshot, either by ID or as a create response object, you can call the `delete_snapshot` method directly on the object:\r\n\r\n    response = client.delete_snapshot(snapshot_id='deleting_snapshot_id')\r\n\r\n---\r\n\r\n### IP Blocks\r\n\r\nThe IP block operations assist with managing reserved /static public IP addresses.\r\n\r\n#### List IP Blocks\r\n\r\nRetrieve a list of available IP blocks.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.list_ipblocks()\r\n\r\n---\r\n\r\n#### Get an IP Block\r\n\r\nRetrieves the attributes of a specific IP block.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| ipblock_id | **yes** | string | The ID of the IP block. |\r\n\r\n    response = client.get_ipblock('UUID')\r\n\r\n---\r\n\r\n#### Create an IP Block\r\n\r\nCreates an IP block. IP blocks are attached to a location, so you must specify a valid `location` along with a `size` parameter indicating the number of IP addresses you want to reserve in the IP block. Servers or other resources using an IP address from an IP block must be in the same `location`.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| location | **yes** | string | This must be one of the locations: us/las, de/fra, de/fkb. |\r\n| size | **yes** | int | The size of the IP block you want. |\r\n| name | no | string | A descriptive name for the IP block |\r\n\r\nThe following table outlines the locations currently supported:\r\n\r\n| Value| Country | City |\r\n|---|---|---|\r\n| us/las | United States | Las Vegas |\r\n| de/fra | Germany | Frankfurt |\r\n| de/fkb | Germany | Karlsruhe |\r\n\r\nTo create an IP block, establish the parameters and then call `reserve_ipblock`.\r\n\r\n    ipblock = IPBlock(\r\n        name='IP Block Name',\r\n        size=4,\r\n        location='de/fkb')\r\n\r\n    response = client.reserve_ipblock(ipblock)\r\n\r\n---\r\n\r\n#### Delete an IP Block\r\n\r\nDeletes the specified IP Block.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| ipblock_id | **yes** | string | The ID of the IP block. |\r\n\r\nAfter retrieving an IP block, either by ID or as a create response object, you can call the `delete_ipblock` method directly on the object:\r\n\r\n    response = client.delete_ipblock('UUID')\r\n\r\n---\r\n\r\n### LANs\r\n\r\n#### List LANs\r\n\r\nRetrieve a list of LANs within the VDC.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.list_lans(datacenter_id='UUID')\r\n\r\n---\r\n\r\n#### Create a LAN\r\n\r\nCreates a LAN within a VDC.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| name | no | string | The name of your LAN. |\r\n| public | **Yes** | bool | Boolean indicating if the LAN faces the public Internet or not. |\r\n| nics | no | list | A list of NICs associated with the LAN. |\r\n\r\n    response = client.create_lan(\r\n        datacenter_id='UUID',\r\n        name='LAN Name',\r\n        public=False)\r\n\r\n---\r\n\r\n#### Get a LAN\r\n\r\nRetrieves the attributes of a given LAN.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| lan_id | **yes** | int | The ID of the LAN. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.get_lan(\r\n        datacenter_id='UUID',\r\n        lan_id=ID)\r\n\r\n---\r\n\r\n#### Get LAN Members\r\n\r\nRetrieves the list of NICs that are part of the LAN.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| lan_id | **yes** | int | The ID of the LAN. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.get_lan_members(\r\n        datacenter_id='UUID',\r\n        lan_id=ID)\r\n\r\n---\r\n\r\n#### Update a LAN\r\n\r\nPerform updates to attributes of a LAN.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| lan_id | **yes** | int | The ID of the LAN. |\r\n| name | no | string | A descriptive name for the LAN. |\r\n| public | no | bool | Boolean indicating if the LAN faces the public Internet or not. |\r\n\r\nAfter retrieving a LAN, either by ID or as a create response object, you can change its properties and call the `update_lan` method:\r\n\r\n    response = client.update_lan(\r\n        datacenter_id='UUID',\r\n        lan_id=ID,\r\n        name='New LAN Name',\r\n        public=False)\r\n\r\n---\r\n\r\n#### Delete a LAN\r\n\r\nDeletes the specified LAN.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| lan_id | **yes** | string | The ID of the LAN. |\r\n\r\nAfter retrieving a LAN, either by ID or as a create response object, you can call the `delete_lan` method directly on the object:\r\n\r\n    response = client.delete_lan(\r\n        datacenter_id='datacenter_id',\r\n        lan_id=ID)\r\n\r\n---\r\n\r\n### Network Interfaces (NICs)\r\n\r\n#### List NICs\r\n\r\nRetrieve a list of LANs within the VDC.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.list_nics(\r\n        datacenter_id='UUID',\r\n        server_id='UUID')\r\n\r\n---\r\n\r\n#### Get a NIC\r\n\r\nRetrieves the attributes of a given NIC.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| nic_id | **yes** | string | The ID of the NIC. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.get_nic(\r\n        datacenter_id='UUID',\r\n        server_id='UUID',\r\n        nic_id='UUID')\r\n\r\n---\r\n\r\n#### Create a NIC\r\n\r\nAdds a NIC to the target server.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string| The ID of the server. |\r\n| name | no | string | The name of the NIC. |\r\n| ips | no | list | IP addresses assigned to the NIC. |\r\n| dhcp | no | bool | Set to *false* if you wish to disable DHCP on the NIC. Default: *true*. |\r\n| lan | **yes** | int | The LAN ID the NIC will sit on. If the LAN ID does not exist it will be created. |\r\n| nat | no | bool | Indicates the private IP address has outbound access to the public internet. |\r\n| firewall_active | no | bool | Set this to *true* to enable the ProfitBricks firewall, *false* to disable. |\r\n| firewall_rules | no | list | A list of firewall rules associated with the NIC. |\r\n\r\n    nic = NIC(\r\n        name='NIC Name',\r\n        dhcp=True,\r\n        lan=1,\r\n        nat=False)\r\n\r\n    response = client.create_nic(\r\n        datacenter_id='UUID',\r\n        server_id='UUID',\r\n        nic=nic)\r\n\r\n---\r\n\r\n#### Update a NIC\r\n\r\nYou can update -- in full or partially -- various attributes on the NIC; however, some restrictions are in place:\r\n\r\nThe primary address of a NIC connected to a load balancer can only be changed by changing the IP of the load balancer. You can also add additional reserved, public IPs to the NIC.\r\n\r\nThe user can specify and assign private IPs manually. Valid IP addresses for private networks are 10.0.0.0/8, 172.16.0.0/12 or 192.168.0.0/16.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string| The ID of the server. |\r\n| nic_id | **yes** | string| The ID of the NIC. |\r\n| name | no | string | The name of the NIC. |\r\n| ips | no | list | IPs assigned to the NIC represented as a list of strings. |\r\n| dhcp | no | bool | Boolean value that indicates if the NIC is using DHCP or not. |\r\n| lan | no | int | The LAN ID the NIC sits on. |\r\n| nat | no | bool | Indicates the private IP address has outbound access to the public internet. |\r\n| firewall_active | no | bool | Set this to *true* to enable the ProfitBricks firewall, *false* to disable. |\r\n\r\nAfter retrieving a NIC, either by ID or as a create response object, you can call the `update_nic` method directly on the object:\r\n\r\n    response = client.update_nic(\r\n        datacenter_id='UUID',\r\n        server_id='UUID',\r\n        nic_id='UUID',\r\n        name='New Name')\r\n\r\n---\r\n\r\n#### Delete a NIC\r\n\r\nDeletes the specified NIC.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string| The ID of the server. |\r\n| nic_id | **yes** | string| The ID of the NIC. |\r\n\r\nAfter retrieving a NIC, either by ID or as a create response object, you can call the `delete_nic` method directly on the object:\r\n\r\n    response = client.delete_nic(\r\n        datacenter_id='UUID',\r\n        server_id='UUID',\r\n        nic_id='UUID')\r\n\r\n---\r\n\r\n### Firewall Rules\r\n\r\n#### List Firewall Rules\r\n\r\nRetrieves a list of firewall rules associated with a particular NIC.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| nic_id | **yes** | string | The ID of the NIC. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.get_firewall_rules(\r\n        datacenter_id='UUID',\r\n        server_id='UUID',\r\n        nic_id='UUID')\r\n\r\n---\r\n\r\n#### Get a Firewall Rule\r\n\r\nRetrieves the attributes of a given firewall rule.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| nic_id | **yes** | string | The ID of the NIC. |\r\n| firewall_rule_id | **yes** | string | The ID of the firewall rule. |\r\n\r\n    response = client.get_firewall_rule(\r\n        datacenter_id='UUID',\r\n        loadbalancer_id='UUID',\r\n        nic_id='UUID',\r\n        firewall_rule_id='UUID')\r\n\r\n---\r\n\r\n#### Create a Firewall Rule\r\n\r\nThis will add a firewall rule to the NIC.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| nic_id | **yes** | string | The ID of the NIC. |\r\n| name | no | string | The name of the firewall rule. |\r\n| protocol | **yes** | string | The protocol for the rule: TCP, UDP, ICMP, ANY. |\r\n| source_mac | no | string | Only traffic originating from the respective MAC address is allowed. Valid format: aa:bb:cc:dd:ee:ff. A *null* value allows all source MAC address. |\r\n| source_ip | no | string | Only traffic originating from the respective IPv4 address is allowed. A *null* value allows all source IPs. |\r\n| target_ip | no | string | In case the target NIC has multiple IP addresses, only traffic directed to the respective IP address of the NIC is allowed. A *null* value allows all target IPs. |\r\n| port_range_start | no | string | Defines the start range of the allowed port (from 1 to 65534) if protocol TCP or UDP is chosen. Leave `port_range_start` and `port_range_end` value as *null* to allow all ports. |\r\n| port_range_end | no | string | Defines the end range of the allowed port (from 1 to 65534) if the protocol TCP or UDP is chosen. Leave `port_range_start` and `port_range_end` value as *null* to allow all ports. |\r\n| icmp_type | no | string | Defines the allowed type (from 0 to 254) if the protocol ICMP is chosen. A *null* value allows all types. |\r\n| icmp_code | no | string | Defines the allowed code (from 0 to 254) if protocol ICMP is chosen. A *null* value allows all codes. |\r\n\r\n    fwrule = FirewallRule(\r\n        name='Allow SSH',\r\n        protocol='TCP',\r\n        source_mac='01:23:45:67:89:00',\r\n        port_range_start=22,\r\n        port_range_end=22)\r\n\r\n    response = client.create_firewall_rule(\r\n        datacenter_id='UUID',\r\n        loadbalancer_id='UUID',\r\n        nic_id='UUID',\r\n        firewall_rule=fwrule)\r\n\r\n---\r\n\r\n#### Update a Firewall Rule\r\n\r\nPerform updates to attributes of a firewall rule.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| nic_id | **yes** | string | The ID of the NIC. |\r\n| firewall_rule_id | **yes** | string | The ID of the firewall rule. |\r\n| name | no | string | The name of the firewall rule. |\r\n| source_mac | no | string | Only traffic originating from the respective MAC address is allowed. Valid format: aa:bb:cc:dd:ee:ff. A *null* value allows all source MAC address. |\r\n| source_ip | no | string | Only traffic originating from the respective IPv4 address is allowed. A *null* value allows all source IPs. |\r\n| target_ip | no | string | In case the target NIC has multiple IP addresses, only traffic directed to the respective IP address of the NIC is allowed. A *null* value allows all target IPs. |\r\n| port_range_start | no | string | Defines the start range of the allowed port (from 1 to 65534) if protocol TCP or UDP is chosen. Leave `port_range_start` and `port_range_end` value as *null* to allow all ports. |\r\n| port_range_end | no | string | Defines the end range of the allowed port (from 1 to 65534) if the protocol TCP or UDP is chosen. Leave `port_range_start` and `port_range_end` value as *null* to allow all ports. |\r\n| icmp_type | no | string | Defines the allowed type (from 0 to 254) if the protocol ICMP is chosen. A *null* value allows all types. |\r\n| icmp_code | no | string | Defines the allowed code (from 0 to 254) if protocol ICMP is chosen. A *null* value allows all codes. |\r\n\r\nAfter retrieving a firewall rule, either by ID or as a create response object, you can change its properties and call the `update_firewall_rule` method:\r\n\r\n    response = client.update_firewall_rule(\r\n        datacenter_id='UUID',\r\n        loadbalancer_id='UUID',\r\n        nic_id='UUID',\r\n        firewall_rule_id='UUID',\r\n        name=\"Updated Name\")\r\n\r\n---\r\n\r\n#### Delete a Firewall Rule\r\n\r\nRemoves the specific firewall rule.\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| server_id | **yes** | string | The ID of the server. |\r\n| nic_id | **yes** | string | The ID of the NIC. |\r\n| firewall_rule_id | **yes** | string | The ID of the firewall rule. |\r\n\r\nAfter retrieving a firewall rule, either by ID or as a create response object, you can call the `delete_firewall_rule` method directly on the object:\r\n\r\n    response = client.delete_firewall_rule(\r\n        datacenter_id='UUID',\r\n        server_id='UUID',\r\n        nic_id='UUID',\r\n        firewall_rule_id='UUID')\r\n\r\n---\r\n\r\n### Load Balancers\r\n\r\n#### List Load Balancers\r\n\r\nRetrieve a list of load balancers within the data center.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.list_loadbalancers(datacenter_id='UUID')\r\n\r\n---\r\n\r\n#### Get a Load Balancer\r\n\r\nRetrieves the attributes of a given load balancer.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| loadbalancer_id | **yes** | string | The ID of the load balancer. |\r\n\r\n    response = client.get_loadbalancer(\r\n        datacenter_id='UUID',\r\n        loadbalancer_id='UUID')\r\n\r\n---\r\n\r\n#### Create a Load Balancer\r\n\r\nCreates a load balancer within the VDC. Load balancers can be used for public or private IP traffic.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| name | **yes** | string | The name of the load balancer. |\r\n| ip | no | string | IPv4 address of the load balancer. All attached NICs will inherit this IP. |\r\n| dhcp | no | bool | Indicates if the load balancer will reserve an IP using DHCP. |\r\n| balancednics | no | list | List of NICs taking part in load-balancing. All balanced NICs inherit the IP of the load balancer. |\r\n\r\n    loadbalancer = LoadBalancer(\r\n        name='Load Balancer Name',\r\n        dhcp=True)\r\n\r\n    response = client.create_loadbalancer(\r\n        datacenter_id='UUID',\r\n        loadbalancer=loadbalancer)\r\n\r\n---\r\n\r\n#### Update a Load Balancer\r\n\r\nPerform updates to attributes of a load balancer.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| name | no | string | The name of the load balancer. |\r\n| ip | no | string | The IP of the load balancer. |\r\n| dhcp | no | bool | Indicates if the load balancer will reserve an IP using DHCP. |\r\n\r\nAfter retrieving a load balancer, either by ID or as a create response object, you can change it's properties and call the `update_loadbalancer` method:\r\n\r\n    response = client.update_loadbalancer(\r\n        datacenter_id='UUID',\r\n        loadbalancer_id='UUID',\r\n        name=\"New Name\")\r\n\r\n---\r\n\r\n#### Delete a Load Balancer\r\n\r\nDeletes the specified load balancer.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| load_balancer_id | **yes** | string | The ID of the load balancer. |\r\n\r\nAfter retrieving a load balancer, either by ID or as a create response object, you can call the `delete_loadbalancer` method directly on the object:\r\n\r\n    response = client.delete_loadbalancer(\r\n        datacenter_id='UUID',\r\n        loadbalancer_id='UUID')\r\n\r\n---\r\n\r\n#### List Load Balanced NICs\r\n\r\nThis will retrieve a list of NICs associated with the load balancer.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| loadbalancer_id | **yes** | string | The ID of the load balancer. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\nAfter retrieving a load balancer, either by ID or as a create response object, you can call the `get_loadbalancer_members` method directly on the object:\r\n\r\n    response = client.get_loadbalancer_members(\r\n        datacenter_id='UUID',\r\n        loadbalancer_id='UUID')\r\n\r\n---\r\n\r\n#### Get a Load Balanced NIC\r\n\r\nRetrieves the attributes of a given load balanced NIC.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| loadbalancer_id | **yes** | string | The ID of the load balancer. |\r\n| nic_id | **yes** | string | The ID of the NIC. |\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\nAfter retrieving a load balancer, either by ID or as a create response object, you can call the `get_loadbalanced_nic` method directly on the object:\r\n\r\n    response = client.get_loadbalanced_nic(\r\n        datacenter_id='UUID',\r\n        loadbalancer_id='UUID',\r\n        nic_id='UUID')\r\n\r\n---\r\n\r\n#### Associate NIC to a Load Balancer\r\n\r\nThis will associate a NIC to a load balancer, enabling the NIC to participate in load-balancing.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| loadbalancer_id | **yes** | string | The ID of the load balancer. |\r\n| nic_id | **yes** | string | The ID of the NIC. |\r\n\r\nAfter retrieving a load balancer, either by ID or as a create response object, you can call the `add_loadbalanced_nics` method directly on the object:\r\n\r\n    response = client.add_loadbalanced_nics(\r\n        datacenter_id='UUID',\r\n        loadbalancer_id='UUID',\r\n        nic_id='UUID')\r\n\r\n---\r\n\r\n#### Remove a NIC Association\r\n\r\nRemoves the association of a NIC with a load balancer.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| datacenter_id | **yes** | string | The ID of the VDC. |\r\n| loadbalancer_id | **yes** | string | The ID of the load balancer. |\r\n| nic_id | **yes** | string | The ID of the load balancer. |\r\n\r\nAfter retrieving a load balancer, either by ID or as a create response object, you can call the `remove_loadbalanced_nic` method directly on the object:\r\n\r\n    response = client.remove_loadbalanced_nic(\r\n        datacenter_id='UUID',\r\n        loadbalancer_id='UUID',\r\n        nic_id='UUID')\r\n\r\n---\r\n\r\n### Requests\r\n\r\nEach call to the ProfitBricks Cloud API is assigned a request ID. These operations can be used to get information about the requests that have been submitted and their current status.\r\n\r\n#### List Requests\r\n\r\nRetrieve a list of requests.\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| depth | no | int | An integer value of 0 - 5 that affects the amount of detail returned. |\r\n\r\n    response = client.list_requests()\r\n\r\n---\r\n\r\n#### Get a Request\r\n\r\nRetrieves the attributes of a specific request. This operation shares the same `get_request` method used for getting request status, however the response it determined by the boolean value you pass for *status*. To get details about the request itself, you want to pass a *status* of *False*.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| request_id | **yes** | string | The ID of the request. |\r\n| status | **yes** | bool | Set to *False* to have the request details returned. |\r\n\r\n    response = client.get_request(\r\n        request_id='UUID',\r\n        status=False)\r\n\r\n---\r\n\r\n#### Get a Request Status\r\n\r\nRetrieves the status of a request. This operation shares the same `get_request` method used for getting the details of a request, however the response it determined by the boolean value you pass for *status*. To get the request status, you want to pass a *status* of *True*.\r\n\r\nThe following table describes the request arguments:\r\n\r\n| Name | Required | Type | Description |\r\n|---|:-:|---|---|\r\n| request_id | **yes** | string | The ID of the request. |\r\n| status | **yes** | boolean | Set to *True* to have the status of the request returned. |\r\n\r\n    response = client.get_request(\r\n        request_id='UUID',\r\n        status=True)\r\n\r\n---\r\n\r\n## Examples\r\n\r\nBelow are some examples using the SDK for Python. These examples will assume credentials are being set with environment variables:\r\n\r\n    export PROFITBRICKS_USERNAME=username\r\n    export PROFITBRICKS_PASSWORD=password\r\n\r\n### List All Data Centers\r\n\r\nThis simple example will list all data centers under an account.\r\n\r\n    #!/usr/bin/python\r\n\r\n    import json\r\n    import os\r\n\r\n    from profitbricks.client import ProfitBricksService\r\n\r\n    # Instatiate ProfitBricks connection\r\n    client = ProfitBricksService(\r\n        username=os.getenv('PROFITBRICKS_USERNAME'),\r\n        password=os.getenv('PROFITBRICKS_PASSWORD'))\r\n\r\n    # List data centers\r\n    datacenters = client.list_datacenters()\r\n    print json.dumps(datacenters, indent=4)\r\n\r\n### Search for Images\r\n\r\nThe following example will provide a method for retrieving a list of images based on a partial case-insensitive name and location match.\r\n\r\n    #!/usr/bin/python\r\n\r\n    import os\r\n\r\n    from profitbricks.client import ProfitBricksService\r\n\r\n\r\n    def find_image(conn, name, location):\r\n        '''\r\n        Find image by partial name and location\r\n        '''\r\n        images = []\r\n        for item in conn.list_images()['items']:\r\n            if (item['properties']['location'] == location and\r\n               item['properties']['imageType'] == 'HDD' and\r\n               name.lower() in item['properties']['name'].lower()):\r\n                images.append(item)\r\n        return images\r\n\r\n    # Instantiate ProfitBricks connection\r\n    client = ProfitBricksService(\r\n        username=os.getenv('PROFITBRICKS_USERNAME'),\r\n        password=os.getenv('PROFITBRICKS_PASSWORD'))\r\n\r\n    # Search criteria based on partial case-insensitive name and location\r\n    name = 'Ubuntu'\r\n    location = 'de/fkb'\r\n\r\n    # Find images based on above search criteria\r\n    for image in find_image(client, name, location):\r\n        print \"{0}\\t{1}\\t{2}\".format(\r\n            image['id'],\r\n            image['properties']['name'],\r\n            image['properties']['location'])\r\n\r\n### Reserve an IP Block\r\n\r\nHere we will reserve a public IP block.\r\n\r\n    #!/usr/bin/python\r\n\r\n    import json\r\n    import os\r\n\r\n    from profitbricks.client import ProfitBricksService, IPBlock\r\n\r\n\r\n    # Instatiate ProfitBricks connection\r\n    client = ProfitBricksService(\r\n        username=os.getenv('PROFITBRICKS_USERNAME'),\r\n        password=os.getenv('PROFITBRICKS_PASSWORD'))\r\n\r\n    ipblock = IPBlock(location='us/las', size=5)\r\n\r\n    response = client.reserve_ipblock(ipblock)\r\n\r\n    print json.dumps(response, indent=4)\r\n\r\n### Wait for Resources\r\n\r\nThe remaining examples will require dependent resources. A volume cannot be attached to a server before the server and volume are finished provisioning. Therefore, we require a `wait_for_completion` method that will stop and wait for the server and volume to finish provisioning before attaching the volume to the server.\r\n\r\nThe below `wait_for_completion` method example will utilize the `Request` operation to poll the status until a request is finished. This method will be called in additional examples.\r\n\r\n    #!/usr/bin/python\r\n\r\n    import time\r\n\r\n\r\n    def wait_for_completion(conn, response, timeout):\r\n        '''\r\n        Poll resource request status until resource is provisioned.\r\n        '''\r\n        if not response:\r\n            return\r\n        timeout = time.time() + timeout\r\n        while timeout > time.time():\r\n            time.sleep(5)\r\n            request = conn.get_request(\r\n                request_id=response['requestId'],\r\n                status=True)\r\n\r\n            if request['metadata']['status'] == 'DONE':\r\n                return\r\n            elif request['metadata']['status'] == 'FAILED':\r\n                raise Exception('Request {0} failed to complete: {1}'.format(\r\n                    response['requestId'], request['metadata']['message']))\r\n\r\n        raise Exception('Timed out waiting for request {0}.'.format(\r\n            response['requestId']))\r\n\r\n### Component Build\r\n\r\nProfitBricks allows servers to be built by their individual components. That is, by connecting customized components such as servers, volumes, and NICs together. For example, a server can be provisioned in one request followed by one or more NICs and volumes in following requests. The volumes can then be attached separately to the server.\r\n\r\nIt is important to note that you will need to wait for each individual component to finish provisioning before it can be used in subsequent operations. This behavior is demonstrated below.\r\n\r\n    #!/usr/bin/python\r\n\r\n    import json\r\n    import os\r\n\r\n    from common import wait_for_completion\r\n    from profitbricks.client import ProfitBricksService\r\n    from profitbricks.client import (\r\n        Datacenter, LAN, Server, NIC, Volume, FirewallRule)\r\n\r\n    client = ProfitBricksService(\r\n        username=os.getenv('PROFITBRICKS_USERNAME'),\r\n        password=os.getenv('PROFITBRICKS_PASSWORD'))\r\n\r\n    timeout = 1800\r\n\r\n    # Create data center\r\n    datacenter = Datacenter(\r\n        name='Python SDK Data Center',\r\n        description='Python SDK data center',\r\n        location='us/las')\r\n\r\n    response = client.create_datacenter(datacenter=datacenter)\r\n    wait_for_completion(client, response, timeout)\r\n    datacenter_id = response['id']\r\n\r\n    # Create public LAN\r\n    lan = LAN(name=\"Public LAN\", public=True)\r\n\r\n    response = client.create_lan(datacenter_id, lan=lan)\r\n    wait_for_completion(client, response, timeout)\r\n    lan_id = response['id']\r\n\r\n    # Create server\r\n    server = Server(\r\n        name='Python SDK Server',\r\n        ram=4096,\r\n        cores=4,\r\n        cpu_family='INTEL_XEON')\r\n\r\n    response = client.create_server(datacenter_id=datacenter_id, server=server)\r\n    wait_for_completion(client, response, timeout)\r\n    server_id = response['id']\r\n\r\n    # Create public NIC\r\n    nic = NIC(\r\n        name='Public NIC',\r\n        dhcp=True,\r\n        lan=lan_id,\r\n        firewall_active=True,\r\n        nat=False)\r\n\r\n    response = client.create_nic(\r\n        datacenter_id=datacenter_id,\r\n        server_id=server_id,\r\n        nic=nic)\r\n    wait_for_completion(client, response, timeout)\r\n    nic_id = response['id']\r\n\r\n    # Create firwall rule\r\n    fwrule = FirewallRule(\r\n        name='Allow SSH',\r\n        protocol='TCP',\r\n        source_ip='0.0.0.0',\r\n        port_range_start=22,\r\n        port_range_end=22,\r\n        icmp_type=None)\r\n\r\n    response = client.create_firewall_rule(\r\n        datacenter_id=datacenter_id,\r\n        server_id=server_id,\r\n        nic_id=nic_id,\r\n        firewall_rule=fwrule)\r\n    wait_for_completion(client, response, timeout)\r\n\r\n    # Create system volume\r\n    volume1 = Volume(\r\n        name='System Volume',\r\n        size=20,\r\n        image='0d4f97f0-1689-11e7-97ce-525400f64d8d',\r\n        bus='VIRTIO',\r\n        type='HDD',\r\n        ssh_keys=['ssh-rsa AAAAB3NzaC1yc2EAAAADAQ...'],\r\n        image_password='s3cr3tpass0rd',\r\n        availability_zone='ZONE_3')\r\n\r\n    response = client.create_volume(\r\n        datacenter_id=datacenter_id,\r\n        volume=volume1)\r\n    wait_for_completion(client, response, timeout)\r\n    volume1_id = response['id']\r\n\r\n    # Attach system volume\r\n    response = client.attach_volume(\r\n        datacenter_id=datacenter_id,\r\n        server_id=server_id,\r\n        volume_id=volume1_id)\r\n    wait_for_completion(client, response, timeout)\r\n\r\n    # Create data volume\r\n    volume2 = Volume(\r\n        name='Data Volume',\r\n        size=100,\r\n        type='SSD',\r\n        bus='VIRTIO',\r\n        license_type='OTHER')\r\n\r\n    response = client.create_volume(\r\n        datacenter_id=datacenter_id,\r\n        volume=volume2)\r\n    wait_for_completion(client, response, timeout)\r\n    volume2_id = response['id']\r\n\r\n    # Attach data volume\r\n    response = client.attach_volume(\r\n        datacenter_id=datacenter_id,\r\n        server_id=server_id,\r\n        volume_id=volume2_id)\r\n    wait_for_completion(client, response, timeout)\r\n\r\n    live_datacenter = client.get_datacenter(datacenter_id=datacenter_id, depth=5)\r\n    print json.dumps(live_datacenter, indent=4)\r\n\r\n### Composite Build\r\n\r\nThe ProfitBricks platform also allows fully operational servers to be provisioned with a single request. This is accomplished by nesting related resources.\r\n\r\nMultiple servers, volumes, LANs, and load balancers can be nested under a data center, multiple NICs and volumes can be nested under servers, and firewall rules under NICs.\r\n\r\nThis example will demonstrate composite resources.\r\n\r\n    #!/usr/bin/python\r\n\r\n    import json\r\n    import os\r\n\r\n    from common import wait_for_completion\r\n    from profitbricks.client import ProfitBricksService\r\n    from profitbricks.client import Datacenter, Server, NIC, Volume, FirewallRule\r\n\r\n    # Instatiate ProfitBricks connection\r\n    client = ProfitBricksService(\r\n        username=os.getenv('PROFITBRICKS_USERNAME'),\r\n        password=os.getenv('PROFITBRICKS_PASSWORD'))\r\n\r\n    # Define a firewall rule\r\n    fwrule1 = FirewallRule(\r\n        name='Allow SSH',\r\n        protocol='TCP',\r\n        source_ip='0.0.0.0',\r\n        port_range_start=22,\r\n        port_range_end=22,\r\n        icmp_type=None)\r\n\r\n    # Define a public NIC\r\n    nic1 = NIC(\r\n        name='Public NIC',\r\n        dhcp=True,\r\n        lan=1,\r\n        firewall_active=True,\r\n        firewall_rules=[fwrule1],\r\n        nat=False)\r\n\r\n    # Define a private NIC\r\n    nic2 = NIC(\r\n        name='Private NIC',\r\n        dhcp=True,\r\n        lan=2)\r\n\r\n    # Define a system volume\r\n    volume1 = Volume(\r\n        name='System Volume',\r\n        size=20,\r\n        image='0d4f97f0-1689-11e7-97ce-525400f64d8d',\r\n        bus='VIRTIO',\r\n        type='HDD',\r\n        ssh_keys=['ssh-rsa AAAAB3NzaC1yc2EAAAADAQ...'],\r\n        image_password='s3cr3tpass0rd',\r\n        availability_zone='ZONE_3')\r\n\r\n    # Define a data volume\r\n    volume2 = Volume(\r\n        name='Data Volume',\r\n        size=100,\r\n        type='SSD',\r\n        bus='VIRTIO',\r\n        licence_type='OTHER')\r\n\r\n    # Define a server with associated NICs and volumes\r\n    server = Server(\r\n        name='Python SDK Server',\r\n        ram=4096,\r\n        cores=4,\r\n        cpu_family='INTEL_XEON',\r\n        nics=[nic1, nic2],\r\n        create_volumes=[volume1, volume2])\r\n\r\n    # Define a data center with the server\r\n    datacenter = Datacenter(\r\n        name='Python SDK Data Center',\r\n        description='Python SDK data center',\r\n        location='us/las',\r\n        servers=[server])\r\n\r\n    # Initiate the data center and nested resource provisioning\r\n    response = client.create_datacenter(datacenter)\r\n\r\n    # Wait for the data center and nested resources to finish provisioning\r\n    wait_for_completion(client, response, 1800)\r\n\r\n    datacenter_id = response['id']\r\n\r\n    # Set the first LAN to public\r\n    response = client.update_lan(\r\n        datacenter_id=datacenter_id,\r\n        lan_id=1,\r\n        name='Public LAN',\r\n        public=True)\r\n\r\n    wait_for_completion(client, response, 1800)\r\n\r\n    # Print the data center properties and nested resources\r\n    response = client.get_datacenter(datacenter_id=datacenter_id, depth=5)\r\n    print json.dumps(response, indent=4)\r\n\r\n## Support\r\n\r\nYou can find additional examples in the repository `examples` directory. If you find any issues, please let us know via the [DevOps Central community](https://devops.profitbricks.com) or [GitHub's issue system](https://github.com/profitbricks/profitbricks-sdk-python/issues) and we'll check it out.\r\n\r\n## Testing\r\n\r\nYou can find a full list of tests inside the `tests` folder. To run all available tests:\r\n\r\n    export PROFITBRICKS_USERNAME=username\r\n    export PROFITBRICKS_PASSWORD=password\r\n\r\n    pip install -r requirements.txt\r\n    python -m unittest discover tests\r\n\r\nTo run a single test:\r\n\r\n    python -m unittest discover tests test_datacenter.py\r\n\r\n## Contributing\r\n\r\n1. Fork it ( https://github.com/profitbricks/profitbricks-sdk-python/fork )\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create a new Pull Request",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/profitbricks/profitbricks-sdk-python",
    "keywords": "profitbricks api client cloud",
    "license": "Apache 2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "profitbricks",
    "platform": "any",
    "project_url": "https://pypi.org/project/profitbricks/",
    "release_url": "https://pypi.org/project/profitbricks/3.1.2/",
    "requires_python": null,
    "summary": "ProfitBricks API Client Library for Python",
    "version": "3.1.2"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8407f4de54476d487d0c877f1dfc7a1b",
          "sha256": "4ab4559eba51552bc8942efe64df711832840f377c6d8731cec02c4fd8fafca7"
        },
        "downloads": 1347,
        "filename": "profitbricks-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8407f4de54476d487d0c877f1dfc7a1b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16036,
        "upload_time": "2015-04-15T12:35:56",
        "url": "https://files.pythonhosted.org/packages/15/d5/3165353e6fd7b183e697dd06d418e1f3a6347c3a9cd0639ab20b2d02b0a0/profitbricks-1.0.0.tar.gz"
      }
    ],
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cca81044eb039ad38423db3c8b34b12e",
          "sha256": "cd242477ba9fd51b6a9e7c469ddb7e51434f52dfa29ab75d05d31cf88ca8de25"
        },
        "downloads": 1081,
        "filename": "profitbricks-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cca81044eb039ad38423db3c8b34b12e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16034,
        "upload_time": "2015-04-24T14:36:19",
        "url": "https://files.pythonhosted.org/packages/9f/00/5a1c33c09a8445a9e3ef38fc764b182d882eead67e3c1492ca9f80faba8d/profitbricks-2.0.tar.gz"
      }
    ],
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bb8f7b0b06139f6515de8af6e5602620",
          "sha256": "967934abec516b7f5d75eecf0aea1534fc18391ae33c57618de8eb60fc2b944c"
        },
        "downloads": 2068,
        "filename": "profitbricks-2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bb8f7b0b06139f6515de8af6e5602620",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16046,
        "upload_time": "2015-05-06T19:31:33",
        "url": "https://files.pythonhosted.org/packages/ac/51/361bc7450d89a46a9748d5fbdbe1fda9ae7868f7714d640ea9c29915188e/profitbricks-2.1.tar.gz"
      }
    ],
    "2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "49a936c00814ba009312fb5d06c1ce36",
          "sha256": "c65b55df80bd402644abc794a1a0c6549c12704fae21d901039235f3d19de602"
        },
        "downloads": 980,
        "filename": "profitbricks-2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "49a936c00814ba009312fb5d06c1ce36",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29171,
        "upload_time": "2015-09-10T23:55:38",
        "url": "https://files.pythonhosted.org/packages/05/5c/bda53e4e5dc98b6880d27e44b0e8a414ba0c2d7f43d1b120a06c5bfc6d1a/profitbricks-2.2.tar.gz"
      }
    ],
    "2.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8d60984bbb6e688fbf8103b3d930255d",
          "sha256": "4e56196d6336a23a7b9bec9163228db4a3826f7ea229e45d31f3f85c536ce9b1"
        },
        "downloads": 345,
        "filename": "profitbricks-2.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8d60984bbb6e688fbf8103b3d930255d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27241,
        "upload_time": "2016-01-20T00:42:26",
        "url": "https://files.pythonhosted.org/packages/ad/19/06b9ddc7bd499f8b0aafff7157d915d073365b48cf07497437d5aec2187a/profitbricks-2.3.0.tar.gz"
      }
    ],
    "2.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1296f5597b6ea381afa4bbe280dbc47f",
          "sha256": "754c026eb31eb8a7e672e3e0182cb9e3e8ce59f47003d6981027d365f3b7dcf8"
        },
        "downloads": 233,
        "filename": "profitbricks-2.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1296f5597b6ea381afa4bbe280dbc47f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27241,
        "upload_time": "2016-02-01T22:52:13",
        "url": "https://files.pythonhosted.org/packages/3f/ad/09d0b4b1247b54f716b7e397793172849f3541ae54d43b2acfa38838cc4f/profitbricks-2.3.1.tar.gz"
      }
    ],
    "2.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "db27ad1135b6de991470c5ac12f8cc5b",
          "sha256": "ce2b22c07bd27ad7b8050f4293326a00ff339f97526b1026605f758c9c62d200"
        },
        "downloads": 160,
        "filename": "profitbricks-2.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "db27ad1135b6de991470c5ac12f8cc5b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 33586,
        "upload_time": "2016-02-19T12:55:02",
        "url": "https://files.pythonhosted.org/packages/86/ab/d2badaffe68c71c6e2c2d7d7cf587e8bc519761c9d7aebd5a1f9cdd9aaaf/profitbricks-2.3.2.tar.gz"
      }
    ],
    "2.3.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ed0824d63d442099b364a16bf939095f",
          "sha256": "02bc1dea3a66f04f24bc88e0a7db4734ae8154e92876af0e248cf35c3ff2d017"
        },
        "downloads": 211,
        "filename": "profitbricks-2.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ed0824d63d442099b364a16bf939095f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 40752,
        "upload_time": "2016-06-09T01:11:14",
        "url": "https://files.pythonhosted.org/packages/f7/c6/5012c66457c87d1f78706aa3f12e27e93ae64612027bdeb6c0f210405d11/profitbricks-2.3.3.tar.gz"
      }
    ],
    "2.3.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "576e117ae38db7a035b14d66ce61d05e",
          "sha256": "b5743c7c97b7d6d3d2ef06b084a92f40d007314afb876b450e53122cda22e120"
        },
        "downloads": 283,
        "filename": "profitbricks-2.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "576e117ae38db7a035b14d66ce61d05e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41361,
        "upload_time": "2016-07-12T04:35:38",
        "url": "https://files.pythonhosted.org/packages/3a/b3/afdba398ab78d67f5bac5409b1850ae7cdb78182478c4a7c9563d42bb464/profitbricks-2.3.4.tar.gz"
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a015cb2538fa2ab148b4b77e673c8243",
          "sha256": "cf9f2a9f2b5c2c80077aa27de47c231e3a9d87dce75ad7673fd5f1005e2a40db"
        },
        "downloads": 123,
        "filename": "profitbricks-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a015cb2538fa2ab148b4b77e673c8243",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 51972,
        "upload_time": "2016-10-17T16:44:51",
        "url": "https://files.pythonhosted.org/packages/f3/ae/b9c7c320263806cb83625427a4b5e246cd37d14e7cc9aac2023af0dac3b4/profitbricks-3.0.0.tar.gz"
      }
    ],
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7eccdc02c6238007fc5823807a94e53f",
          "sha256": "e1393e86aa1f0e80f5514dcd66c6ce7bb646d268dffce6c8d20187a7cfbdf348"
        },
        "downloads": 14,
        "filename": "profitbricks-3.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7eccdc02c6238007fc5823807a94e53f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 52576,
        "upload_time": "2017-01-27T00:49:48",
        "url": "https://files.pythonhosted.org/packages/f9/80/8842c0ccd1c5f04ab3ff233018b058b816f08e7db7096eddd5e35391c0de/profitbricks-3.1.0.tar.gz"
      }
    ],
    "3.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4be96a91c8ed95a68a30970d672120d7",
          "sha256": "8ae60e21ce2353844d78cf510ccd2ac21558d249900c2dd9e10ee2a8c176bdfd"
        },
        "downloads": 14,
        "filename": "profitbricks-3.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4be96a91c8ed95a68a30970d672120d7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 52572,
        "upload_time": "2017-01-27T07:30:01",
        "url": "https://files.pythonhosted.org/packages/0b/a1/30eb1f5cabf0ede7302458e191f59171f1a17d9d53ed445a7537e3f7754f/profitbricks-3.1.1.tar.gz"
      }
    ],
    "3.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c73ea1e89f1c5206a7f95db42ec3a9b2",
          "sha256": "ae6ed2fb1bb6b7e7cda2894c9e3bbf25d197473a5e211a12756b28b460293481"
        },
        "downloads": 168,
        "filename": "profitbricks-3.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c73ea1e89f1c5206a7f95db42ec3a9b2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 85105,
        "upload_time": "2017-04-07T17:14:18",
        "url": "https://files.pythonhosted.org/packages/03/77/a5392132e6f4895a0c411a47e49aed51a700542ad7fcadeff3f5948f4ce1/profitbricks-3.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c73ea1e89f1c5206a7f95db42ec3a9b2",
        "sha256": "ae6ed2fb1bb6b7e7cda2894c9e3bbf25d197473a5e211a12756b28b460293481"
      },
      "downloads": 168,
      "filename": "profitbricks-3.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c73ea1e89f1c5206a7f95db42ec3a9b2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 85105,
      "upload_time": "2017-04-07T17:14:18",
      "url": "https://files.pythonhosted.org/packages/03/77/a5392132e6f4895a0c411a47e49aed51a700542ad7fcadeff3f5948f4ce1/profitbricks-3.1.2.tar.gz"
    }
  ]
}