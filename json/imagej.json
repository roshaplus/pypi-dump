{
  "info": {
    "author": "Leon Yang",
    "author_email": "leon.gh.yang@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Python client for imagej-server\r\n\r\n[`imagej.py`](imagej.py) provides a high-level entry point `imagej.IJ` for invoking `imagej-server` APIs, which have been wrapped into simple Python functions.\r\n\r\n## Requirements:\r\n\r\n    - requests\r\n    - Pillow\r\n\r\nUse `pip install -r requirements.txt` to install requirements.\r\n\r\n`Pillow` is required for the `IJ.show()` function. In addition, `display` or `xv` needs to exist in your system to view the image.\r\n\r\n## Usage:\r\n\r\nTry running [usage.py](usage.py) in the directory of this README file and see the results.\r\n \r\n```Python\r\n# This script shows the basic functionalities of the Python imagej client.\r\n# It uploads an image to imagej-server, inverts the image, and display both the\r\n# original and the inverted ones.\r\n\r\nimport imagej\r\nimport json\r\n\r\nij = imagej.IJ()\r\n\r\n# Find modules that contain a specific string in its ID.\r\ncreate = ij.find(\"CreateImgFromImg\")[0]\r\ninvert = ij.find(\"InvertII\")[0]\r\n\r\n# Check details of a module. Names of \"inputs\" and \"outputs\" are usually important.\r\nprint('Details for CreateImgFromImg:')\r\nprint(json.dumps(ij.detail(create), indent=4))\r\nprint('Details for InvertII:')\r\nprint(json.dumps(ij.detail(invert), indent=4))\r\n\r\n# Upload an image.\r\nimg_in = ij.upload('../../src/test/resources/imgs/about4.tif')\r\n\r\n# Execute modules.\r\nresult = ij.run(create, {'in': img_in})\r\nimg_out = result['out']\r\nresult = ij.run(invert, {'in': img_in, 'out': img_out})\r\nimg_out = result['out']\r\n\r\n# retrieve/show images.\r\nij.retrieve(img_out, format='png', dest='/tmp')\r\nij.show(img_in, format='jpg')\r\nij.show(img_out)\r\n\r\n```\r\n\r\n## Documentation\r\n\r\nThe entry point of imagej.py is an *__IJ__* object, which has the following functions:\r\n\r\n```\r\nclass imagej.IJ(host='http://localhost:8080')\r\n    Creates a client that bounds to host.\r\n       \r\n    :param host: address of imagej-server\r\n   \r\nIJ.detail(id)\r\n    Gets the detail of a module or an object specified by the ID.\r\n\r\n    :param id: the ID of a module or an object\r\n    :return: details of a module or an object\r\n    :rtype: dict\r\n   \r\nIJ.find(regex)\r\n    Finds all module IDs that match the regular expression.\r\n       \r\n    :param regex: the regular express to match the module IDs\r\n    :return: all matching IDs\r\n    :rtype: list[string]\r\n   \r\nIJ.modules(refresh=False)\r\n    Gets the module IDs of imagej-server if no cache is available or\r\n    refresh is set to True, or returns the cache for the IDs otherwise.\r\n       \r\n    :param refresh: force fetching modules from imagej-server if True\r\n    :return: imagej-server module IDs\r\n    :rtype: list[string]\r\n   \r\nIJ.objects()\r\n    Gets a list of objects being served on imagej-server, sorted by ID.\r\n       \r\n    :return: a list of object IDs\r\n    :rtype: list[string]\r\n    \r\nIJ.remove(id)\r\n    Removes one object from imagej-server.\r\n        \r\n    :param id: object ID to remove\r\n   \r\nIJ.retrieve(id, format, config=None, dest=None)\r\n    Retrieves an object in specific format from imagej-server.\r\n       \r\n    If dest is None, the raw content would be returned.\r\n       \r\n    :param id: object ID\r\n    :param format: file format the object to be saved into\r\n    :param config: configuration for storing the object (not tested)\r\n    :param dest: download destination\r\n    :return: content of the object if dest is None, otherwise None\r\n    :rtype: string or None\r\n   \r\nIJ.run(id, inputs=None, process=True)\r\n    Runs a module specified by the ID with inputs.\r\n       \r\n    :param id: the ID of the module\r\n    :param inputs: a dict-like object containing inputs for the execution\r\n    :param process: if the execution should be pre/post processed\r\n    :return: outputs of the execution\r\n    :rtype: dict\r\n   \r\nIJ.show(id, format, config=None)\r\n    Retrieves and shows an object in specific format from imagej-server.\r\n       \r\n    :param id: object ID if format is set, or a file being served\r\n    :param format: file format the object to be saved into\r\n    :param config: configuration for storing the object (not tested)\r\n   \r\nIJ.upload(filename)\r\n    Uploads a file to imagej-server\r\n       \r\n    :param filename: filename of the file to be uploaded\r\n    :param type: optional hint for file type\r\n    :return: object ID of the uploaded file\r\n    :rtype: string\r\n```",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/imagej/imagej-server/",
    "keywords": null,
    "license": "Apache 2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "imagej",
    "platform": "any",
    "project_url": "https://pypi.org/project/imagej/",
    "release_url": "https://pypi.org/project/imagej/0.1.1/",
    "requires_python": null,
    "summary": "Python client for imagej-server",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d1314ba4a5ea80a41027121b5ad3f5dd",
          "sha256": "8bf0bad02a64d49574a77fa0ac33a0289c963ddea52ee7e2de0f215f2e256b62"
        },
        "downloads": 123,
        "filename": "imagej-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d1314ba4a5ea80a41027121b5ad3f5dd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4933,
        "upload_time": "2017-03-17T16:07:40",
        "url": "https://files.pythonhosted.org/packages/f0/0f/3fce60f119905723ed8617bf7056d8c47897526cd43eb2af13132fc1a61c/imagej-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f87463228ef85549f9dc54dc4b5c590a",
          "sha256": "c7ae47304ee467f7190f8a98e305485da1ba2cb2c0063234e9a23d2b06e9e748"
        },
        "downloads": 13,
        "filename": "imagej-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f87463228ef85549f9dc54dc4b5c590a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5037,
        "upload_time": "2017-03-29T15:32:17",
        "url": "https://files.pythonhosted.org/packages/38/08/4a94e99a2ed123f57a0796c8a72e9a553b7b0a4657d8858de18c790ae04f/imagej-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f87463228ef85549f9dc54dc4b5c590a",
        "sha256": "c7ae47304ee467f7190f8a98e305485da1ba2cb2c0063234e9a23d2b06e9e748"
      },
      "downloads": 13,
      "filename": "imagej-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f87463228ef85549f9dc54dc4b5c590a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5037,
      "upload_time": "2017-03-29T15:32:17",
      "url": "https://files.pythonhosted.org/packages/38/08/4a94e99a2ed123f57a0796c8a72e9a553b7b0a4657d8858de18c790ae04f/imagej-0.1.1.tar.gz"
    }
  ]
}