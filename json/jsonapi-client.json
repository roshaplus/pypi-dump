{
  "info": {
    "author": "Tuomas Airaksinen",
    "author_email": "tuomas.airaksinen@qvantel.com",
    "bugtrack_url": "",
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries"
    ],
    "description": ".. image:: https://travis-ci.org/qvantel/jsonapi-client.svg?branch=master\r\n   :target: https://travis-ci.org/qvantel/jsonapi-client\r\n\r\n.. image:: https://coveralls.io/repos/github/qvantel/jsonapi-client/badge.svg\r\n   :target: https://coveralls.io/github/qvantel/jsonapi-client\r\n\r\n.. image:: https://img.shields.io/pypi/v/jsonapi-client.svg\r\n   :target: https://pypi.python.org/pypi/jsonapi-client\r\n\r\n.. image:: https://img.shields.io/pypi/pyversions/jsonapi-client.svg\r\n   :target: https://pypi.python.org/pypi/jsonapi-client\r\n\r\n.. image:: https://img.shields.io/badge/licence-BSD%203--clause-blue.svg\r\n   :target: https://github.com/qvantel/jsonapi-client/blob/master/LICENSE.txt\r\n\r\n==========================\r\nJSON API client for Python\r\n==========================\r\n\r\nIntroduction\r\n============\r\n\r\nPackage repository: https://github.com/qvantel/jsonapi-client\r\n\r\nThis Python (3.6+) library provides easy-to-use, pythonic, ORM-like access to\r\nJSON API ( http://jsonapi.org )\r\n\r\n - Optional asyncio implementation\r\n - Optional model schema definition and validation (=> easy reads even without schema)\r\n - Resource caching within session\r\n\r\n\r\nInstallation\r\n============\r\n\r\nFrom Pypi::\r\n\r\n    pip install jsonapi-client\r\n\r\nOr from sources::\r\n\r\n    ./setup.py install\r\n\r\n\r\nUsage\r\n=====\r\n\r\nClient session\r\n--------------\r\n\r\n.. code-block:: python\r\n\r\n   from jsonapi_client import Session, Filter, ResourceTuple\r\n\r\n   s = Session('http://localhost:8080/')\r\n   # To start session in async mode\r\n   s = Session('http://localhost:8080/', enable_async=True)\r\n\r\n   # You can also pass extra arguments that are passed directly to requests or aiohttp methods,\r\n   # such as authentication object\r\n   s = Session('http://localhost:8080/',\r\n               request_kwargs=dict(auth=HttpBasicAuth('user', 'password'))\r\n\r\n\r\n   # You can also use Session as a context manager. Changes are committed in the end\r\n   # and session is closed.\r\n   with Session(...) as s:\r\n       your code\r\n\r\n   # Or with enable_async=True\r\n   async with Session(..., enable_async=True):\r\n       your code\r\n\r\n   # If you are not using context manager, you need to close session manually\r\n   s.close()\r\n\r\n   # Fetching documents\r\n   documents = s.get('resource_type')\r\n   # Or if you want only 1, then\r\n   documents = s.get('resource_type', 'id_of_document')\r\n\r\n   # AsyncIO the same but remember to await:\r\n   documents = await s.get('resource_type')\r\n\r\nFiltering\r\n---------\r\n\r\n.. code-block:: python\r\n\r\n   # You need first to specify your filter instance.\r\n   # - filtering with two criteria (and)\r\n   filter = Filter(attribute='something', attribute2='something_else')\r\n   # - filtering some-dict.some-attr == 'something'\r\n   filter = Filter(some_dict__some_attr='something'))\r\n   # - filtering manually with your server syntax.\r\n   filter = Filter('filter[post]=1&filter[author]=2')\r\n\r\n   # If you have different URL schema for filtering, you can implement your own Filter\r\n   # class (derive it from Filter and reimplement format_filter_query).\r\n\r\n   # Then fetch your filtered document\r\n   filtered = s.get('resource_type', filter) # AsyncIO with await\r\n\r\n   # To access resources included in document:\r\n   r1 = document.resources[0]  # first ResourceObject of document.\r\n   r2 = document.resource      # if there is only 1 resource we can use this\r\n\r\nPagination\r\n----------\r\n\r\n.. code-block:: python\r\n\r\n   # Pagination links can be accessed via Document object.\r\n   next_doc = document.links.next.fetch()\r\n   # AsyncIO\r\n   next_doc = await document.links.next.fetch()\r\n\r\n   # Iteration through results (uses pagination):\r\n   for r in s.iterate('resource_type'):\r\n       print(r)\r\n\r\n   # AsyncIO:\r\n   async for r in s.iterate('resource_type'):\r\n       print(r)\r\n\r\nResource attribute and relationship access\r\n------------------------------------------\r\n\r\n.. code-block:: python\r\n\r\n   # - attribute access\r\n   attr1 = r1.some_attr\r\n   nested_attr = r1.some_dict.some_attr\r\n   #   Attributes can always also be accessed via __getitem__:\r\n   nested_attr = r1['some-dict']['some-attr']\r\n\r\n   # If there is namespace collision, you can also access attributes via .fields proxy\r\n   # (both attributes and relationships)\r\n   attr2 = r1.fields.some_attr\r\n\r\n   # - relationship access.\r\n   #   * Sync, this gives directly ResourceObject\r\n   rel = r1.some_relation\r\n   attr3 = r1.some_relation.some_attr  # Relationship attribute can be accessed directly\r\n\r\n   #   * AsyncIO, this gives Relationship object instead because we anyway need to\r\n   #     call asynchronous fetch function.\r\n   rel = r1.some_relation\r\n   #     To access ResourceObject you need to first fetch content\r\n   await r1.some_relation.fetch()\r\n   #     and then you can access associated resourceobject\r\n   res = r1.some_relation.resource\r\n   attr3 = res.some_attr  # Attribute access through ResourceObject\r\n\r\n   # If you need to access relatinoship object itself (with sync API), you can do it via\r\n   # .relationships proxy. For example, if you are interested in links or metadata\r\n   # provided within relationship, or intend to manipulate relationship.\r\n   rel_obj = r1.relationships.relation_name\r\n\r\nResource updating\r\n-----------------\r\n\r\n.. code-block:: python\r\n\r\n   # Updating / patching existing resources\r\n   r1.some_attr = 'something else'\r\n   # Patching element in nested json\r\n   r1.some_dict.some_dict.some_attr = 'something else'\r\n\r\n   # change relationships, to-many. Accepts also iterable of ResourceObjects/\r\n   # ResourceIdentifiers/ResourceTuples\r\n   r1.comments = ['1', '2']\r\n   # or if resource type is not known or can have multiple types of resources\r\n   r1.comments_or_people = [ResourceTuple('1', 'comments'), ResourceTuple('2', 'people')]\r\n   # or if you want to add some resources you can\r\n   r1.comments_or_people += [ResourceTuple('1', 'people')]\r\n   r1.commit()\r\n\r\n   # change to-one relationships\r\n   r1.author = '3'  # accepts also ResourceObjects/ResourceIdentifiers/ResourceTuple\r\n   # or resource type is not known (via schema etc.)\r\n   r1.author = ResourceTuple('3', 'people')\r\n\r\n   # Committing changes (PATCH request)\r\n   r1.commit(meta={'some_meta': 'data'})  # Resource committing supports optional meta data\r\n   # AsyncIO\r\n   await r1.commit(meta={'some_meta': 'data'})\r\n\r\n\r\nCreating new resources\r\n----------------------\r\n\r\n\r\n.. code-block:: python\r\n\r\n   # Creating new resources. Schema must be given. Accepts dictionary of schema models\r\n   # (key is model name and value is schema as json-schema.org).\r\n\r\n   models_as_jsonschema = {\r\n       'articles': {'properties': {\r\n           'title': {'type': 'string'},\r\n           'author': {'relation': 'to-one', 'resource': ['people']},\r\n           'comments': {'relation': 'to-many', 'resource': ['comments']},\r\n       }},\r\n       'people': {'properties': {\r\n           'first-name': {'type': 'string'},\r\n           'last-name': {'type': 'string'},\r\n           'twitter': {'type': ['null', 'string']},\r\n       }},\r\n       'comments': {'properties': {\r\n           'body': {'type': 'string'},\r\n        'author': {'relation': 'to-one', 'resource': ['people']}\r\n    }}\r\n   }\r\n   # If you type schema by hand, it could be more convenient to type it as yml in a file\r\n   # instead\r\n\r\n   s = Session('http://localhost:8080/', schema=models_as_jsonschema)\r\n   a = s.create('articles') # Creates empty ResourceObject of 'articles' type\r\n   a.title = 'Test title'\r\n\r\n   # Validates and performs POST request, and finally updates resource based on server response\r\n   a.commit(meta={'some_meta': 'data'})\r\n   # Or with AsyncIO, remember to await\r\n   await a.commit(meta={'some_meta': 'data'})\r\n\r\n   # Commit metadata could be also saved in advance:\r\n   a.commit_metadata = {'some_meta': 'data'}\r\n   # You can also commit all changed resources in session by\r\n   s.commit()\r\n   # or with AsyncIO\r\n   await s.commit()\r\n\r\n   # Another example of resource creation, setting attributes and relationships & committing:\r\n   # If you have underscores in your field names, you can pass them in fields keyword argument as\r\n   # a dictionary:\r\n   cust1 = s.create_and_commit('articles',\r\n                               attribute='1',\r\n                               dict_object__attribute='2',\r\n                               to_one_relationship='3',\r\n                               to_many_relationship=['1', '2'],\r\n                               fields={'some_field_with_underscore': '1'}\r\n                               )\r\n\r\n   # Async:\r\n   cust1 = await s.create_and_commit('articles',\r\n                                     attribute='1',\r\n                                     dict_object__attribute='2',\r\n                                     to_one_relationship='3',\r\n                                     to_many_relationship=['1', '2'],\r\n                                     fields={'some_field_with_underscore': '1'}\r\n                                     )\r\n\r\nDeleting resources\r\n------------------\r\n\r\n.. code-block:: python\r\n\r\n    # Delete resource\r\n    cust1.delete() # Mark to be deleted\r\n    cust1.commit() # Actually delete\r\n\r\n\r\nCredits\r\n=======\r\n\r\n- Work was supported by Qvantel (http://qvantel.com).\r\n- Author and package maintainer: Tuomas Airaksinen (https://github.com/tuomas2/).\r\n\r\n\r\nLicense\r\n=======\r\n\r\nCopyright (c) 2017, Qvantel\r\n\r\nAll rights reserved.\r\n\r\nRedistribution and use in source and binary forms, with or without\r\nmodification, are permitted provided that the following conditions are met:\r\n\r\n - Redistributions of source code must retain the above copyright\r\n   notice, this list of conditions and the following disclaimer.\r\n - Redistributions in binary form must reproduce the above copyright\r\n   notice, this list of conditions and the following disclaimer in the\r\n   documentation and/or other materials provided with the distribution.\r\n - Neither the name of the Qvantel nor the\r\n   names of its contributors may be used to endorse or promote products\r\n   derived from this software without specific prior written permission.\r\n\r\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\r\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\nDISCLAIMED. IN NO EVENT SHALL QVANTEL BE LIABLE FOR ANY\r\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\nCHANGELOG\r\n=========\r\n\r\n\r\n0.9.6 (2017-06-26)\r\n------------------\r\n\r\n - When creating new resources, use default value specified in\r\n   jsonschema, when available.\r\n\r\n\r\n0.9.5 (2017-06-16)\r\n------------------\r\n\r\n - Change Session.create_and_commit signature similarly as Session.create\r\n\r\n0.9.4 (2017-06-16)\r\n------------------\r\n\r\n - Remove ? from filenames (illegal in Windows)\r\n - Pass event loop aiohttp's ClientSession\r\n - Return resource from .commit if return status is 202\r\n - Support underscores in field names in Session.create() through fields keyword argument.\r\n - Add support for extra arguments such as authentication object\r\n - AsyncIO support for context manager usage of Session\r\n\r\n\r\n0.9.3 (2017-04-03)\r\n------------------\r\n\r\n - Added aiohttp to install requirements\r\n\r\n\r\n0.9.2 (2017-04-03)\r\n------------------\r\n\r\n - Github release.\r\n\r\n\r\n0.9.1 (2017-03-23)\r\n------------------\r\n\r\n - Fix async content_type checking\r\n - Use Python 3's new typing.NamedTuple instead of collections.NamedTuple\r\n - Make included resources available from Document\r\n - ResourceObject.json property",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/qvantel/jsonapi-client",
    "keywords": "JSONAPI JSON API client",
    "license": "BSD-3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jsonapi-client",
    "platform": "",
    "project_url": "https://pypi.org/project/jsonapi-client/",
    "release_url": "https://pypi.org/project/jsonapi-client/0.9.6/",
    "requires_dist": [
      "requests",
      "jsonschema",
      "aiohttp"
    ],
    "requires_python": "",
    "summary": "Comprehensive, yet easy-to-use, pythonic, ORM-like access to JSON API services",
    "version": "0.9.6"
  },
  "releases": {
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "759d5501191fbee0a9f995e3b1ac4429",
          "sha256": "179042890d0e0337d87d3df7dbd9ad23ffd95530ccc3e07f0632f20e2b3bc550"
        },
        "downloads": 20,
        "filename": "jsonapi_client-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "759d5501191fbee0a9f995e3b1ac4429",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32553,
        "upload_time": "2017-04-03T11:34:38",
        "url": "https://files.pythonhosted.org/packages/15/82/4111867d5a23b673b04714ef579d0064c76e214e6ec0239235bba4513340/jsonapi_client-0.9.2.tar.gz"
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "697274a45f6489421246855acf28f720",
          "sha256": "8add02356e032798c29bf9ab29da252164d23bd1c6b20c42b567f5f1d2ebeed9"
        },
        "downloads": 25,
        "filename": "jsonapi_client-0.9.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "697274a45f6489421246855acf28f720",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 35648,
        "upload_time": "2017-04-04T09:18:54",
        "url": "https://files.pythonhosted.org/packages/92/04/a85a25636e2c9a9f762c67b4c705f9ba726a6e913cd4b0ac80d6f9043151/jsonapi_client-0.9.3-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2fceee02284d7e158eb3bff30a868add",
          "sha256": "9441d1c135593e5a3657eff0bd5548d0707a7fc2c584c900e0b45b3b301f2f67"
        },
        "downloads": 23,
        "filename": "jsonapi_client-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2fceee02284d7e158eb3bff30a868add",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32848,
        "upload_time": "2017-04-04T09:00:44",
        "url": "https://files.pythonhosted.org/packages/cd/67/158edecbf314dbbffb15e3b1f9f4131e2680d2c82d96cc5e781a65a6d348/jsonapi_client-0.9.3.tar.gz"
      }
    ],
    "0.9.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fd55a6e13adf2304f6773ecb49a1f3ba",
          "sha256": "2fe10034d6ecc1296d44798036c73a1f6537e2c854d77c6553a1493ff4246a36"
        },
        "downloads": 0,
        "filename": "jsonapi_client-0.9.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fd55a6e13adf2304f6773ecb49a1f3ba",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 33894,
        "upload_time": "2017-06-16T07:55:34",
        "url": "https://files.pythonhosted.org/packages/dd/d8/38563c66845aecf43ea8bb2c1462eaa84facfc5f25485275387c2e847c89/jsonapi_client-0.9.4.tar.gz"
      }
    ],
    "0.9.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "527ab2b3d280a01d2b09a85eca0e0edf",
          "sha256": "7374e24681ddb48870f0abf838136a6b87e53bc0b953cb32962e5d50cb469750"
        },
        "downloads": 0,
        "filename": "jsonapi_client-0.9.5.tar.gz",
        "has_sig": false,
        "md5_digest": "527ab2b3d280a01d2b09a85eca0e0edf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 33929,
        "upload_time": "2017-06-16T09:35:00",
        "url": "https://files.pythonhosted.org/packages/fd/07/39c0d54ea9952434a71c99f97c8d2ecbb6c7853cdc65ca7abad12ed9979b/jsonapi_client-0.9.5.tar.gz"
      }
    ],
    "0.9.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "388f9d817a496a5fd6a3feb3e99a7428",
          "sha256": "c680e6ba43f0c48ff8dd824eef35af49602a358532311daef943222aecf09dbe"
        },
        "downloads": 0,
        "filename": "jsonapi_client-0.9.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "388f9d817a496a5fd6a3feb3e99a7428",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 36563,
        "upload_time": "2017-06-26T14:26:14",
        "url": "https://files.pythonhosted.org/packages/5c/64/2ae754d0afe358a75d16999aeb7741a6134192fffa0c8b60b4855acd2e80/jsonapi_client-0.9.6-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d6c2d4ae128b5f6ab3c2439b0745b06e",
          "sha256": "b0039367b09238cccdff38e02250c81de19a8cd8d112da56543b9effc4770758"
        },
        "downloads": 0,
        "filename": "jsonapi_client-0.9.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d6c2d4ae128b5f6ab3c2439b0745b06e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 34135,
        "upload_time": "2017-06-26T14:26:16",
        "url": "https://files.pythonhosted.org/packages/86/89/54c0eddd8b430c1ca6476a6e560093eb2d3fb2058dac36ccb7d964305878/jsonapi_client-0.9.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "388f9d817a496a5fd6a3feb3e99a7428",
        "sha256": "c680e6ba43f0c48ff8dd824eef35af49602a358532311daef943222aecf09dbe"
      },
      "downloads": 0,
      "filename": "jsonapi_client-0.9.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "388f9d817a496a5fd6a3feb3e99a7428",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 36563,
      "upload_time": "2017-06-26T14:26:14",
      "url": "https://files.pythonhosted.org/packages/5c/64/2ae754d0afe358a75d16999aeb7741a6134192fffa0c8b60b4855acd2e80/jsonapi_client-0.9.6-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "d6c2d4ae128b5f6ab3c2439b0745b06e",
        "sha256": "b0039367b09238cccdff38e02250c81de19a8cd8d112da56543b9effc4770758"
      },
      "downloads": 0,
      "filename": "jsonapi_client-0.9.6.tar.gz",
      "has_sig": false,
      "md5_digest": "d6c2d4ae128b5f6ab3c2439b0745b06e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 34135,
      "upload_time": "2017-06-26T14:26:16",
      "url": "https://files.pythonhosted.org/packages/86/89/54c0eddd8b430c1ca6476a6e560093eb2d3fb2058dac36ccb7d964305878/jsonapi_client-0.9.6.tar.gz"
    }
  ]
}