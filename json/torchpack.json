{
  "info": {
    "author": "Kai Chen",
    "author_email": "chenkaidev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Utilities"
    ],
    "description": "# torchpack\n\nTorchpack is a set of interfaces to simplify the usage of PyTorch.\n\nDocumentation is ongoing.\n\n\n## Example\n\n```python\n######################## file1: config.py #######################\nwork_dir = './demo'  # dir to save log file and checkpoints\noptimizer = dict(\n    algorithm='SGD', args=dict(lr=0.001, momentum=0.9, weight_decay=5e-4))\nworkflow = [('train', 2), ('val', 1)]  # train 2 epochs and then validate 1 epochs, iteratively\nmax_epoch = 16\nlr_policy = dict(policy='step', step=12)  # decrese learning rate by 10 every 12 epochs\ncheckpoint_cfg = dict(interval=1)  # save checkpoint at every epoch\nlog_cfg = dict(interval=50)  # log at every 50 iterations\n\n######################### file2: main.py ########################\nimport torch\nfrom torchpack import Config, Runner\nfrom collections import OrderedDict\n\n# define how to process a batch and return a dict\ndef batch_processor(model, data, train_mode):\n    img, label = data\n    volatile = False if train_mode else True\n    img_var = torch.autograd.Variable(img, volatile=volatile)\n    label_var = torch.autograd.Variable(label, requires_grad=False)\n    pred = model(img)\n    loss = F.cross_entropy(pred, label_var)\n    accuracy = get_accuracy(pred, label_var)\n    log_vars = OrderedDict()\n    log_vars['loss'] = loss.data[0]\n    log_vars['accuracy'] = accuracy.data[0]\n    outputs = dict(\n        loss=loss, log_vars=log_vars, num_samples=img.size(0))\n    return outputs\n\ncfg = Config.from_file('config.py')  # or config.yaml/config.json\nmodel = resnet18()\nrunner = Runner(model, cfg.optimizer, batch_processor, cfg.work_dir)\nrunner.register_default_hooks(cfg.lr_policy, cfg.checkpoint_cfg, cfg.log_cfg)\n\nrunner.run([train_loader, val_loader], cfg.workflow, cfg.max_epoch)\n```\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/hellock/torchpack",
    "keywords": "computer vision",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchpack",
    "platform": "",
    "project_url": "https://pypi.org/project/torchpack/",
    "release_url": "https://pypi.org/project/torchpack/0.0.2/",
    "requires_dist": [
      "six",
      "cvbase"
    ],
    "requires_python": "",
    "summary": "A set of interfaces to simplify the usage of PyTorch",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ffdc47c4967a1e7a058eb2be7a6aefb8",
          "sha256": "88327960c03da34eb865ecc931b1218728c37656343dcd7e62245cfa2d58c213"
        },
        "downloads": -1,
        "filename": "torchpack-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ffdc47c4967a1e7a058eb2be7a6aefb8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 14610,
        "upload_time": "2018-01-02T16:10:28",
        "url": "https://files.pythonhosted.org/packages/ce/5c/ae848fdbc17cf0ca10621ddb88b070ef8dafeb14d20c40aa702762d57390/torchpack-0.0.2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "55b5b3d07424651ad2ffc46e9ed18393",
          "sha256": "5d8654623ff516b14e130cca7cf2f3e3707ce7266af4e628a5e93464c8f5cc16"
        },
        "downloads": -1,
        "filename": "torchpack-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "55b5b3d07424651ad2ffc46e9ed18393",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9391,
        "upload_time": "2018-01-02T16:10:30",
        "url": "https://files.pythonhosted.org/packages/06/ce/f1a5d17ec583bb3e88b7151b9681ed819ca4a49d566fd97f1f45bf0784aa/torchpack-0.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ffdc47c4967a1e7a058eb2be7a6aefb8",
        "sha256": "88327960c03da34eb865ecc931b1218728c37656343dcd7e62245cfa2d58c213"
      },
      "downloads": -1,
      "filename": "torchpack-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ffdc47c4967a1e7a058eb2be7a6aefb8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 14610,
      "upload_time": "2018-01-02T16:10:28",
      "url": "https://files.pythonhosted.org/packages/ce/5c/ae848fdbc17cf0ca10621ddb88b070ef8dafeb14d20c40aa702762d57390/torchpack-0.0.2-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "55b5b3d07424651ad2ffc46e9ed18393",
        "sha256": "5d8654623ff516b14e130cca7cf2f3e3707ce7266af4e628a5e93464c8f5cc16"
      },
      "downloads": -1,
      "filename": "torchpack-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "55b5b3d07424651ad2ffc46e9ed18393",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9391,
      "upload_time": "2018-01-02T16:10:30",
      "url": "https://files.pythonhosted.org/packages/06/ce/f1a5d17ec583bb3e88b7151b9681ed819ca4a49d566fd97f1f45bf0784aa/torchpack-0.0.2.tar.gz"
    }
  ]
}