{
  "info": {
    "author": "Zulko",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "BandWagon\n==========\n.. image:: https://travis-ci.org/Edinburgh-Genome-Foundry/BandWagon.svg?branch=master\n   :target: https://travis-ci.org/Edinburgh-Genome-Foundry/BandWagon\n   :alt: Travis CI build status\n\nBandwagon (full documentation `here\n<http://edinburgh-genome-foundry.github.io/BandWagon/>`_) is a Python library to predict and plot migration patterns\nfrom DNA digestions. It supports hundreds of different enzymes (thanks to BioPython),\nsingle- and multiple-enzymes digestions, and custom ladders.\n\nIt uses Matplotlib to produce plots like this one:\n\n.. figure:: https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/BandWagon/master/examples/mixed_digestions.png\n    :align: center\n\nLicense = MIT\n--------------\n\nBandwagon is an open-source software originally written at the `Edinburgh Genome Foundry\n<http://edinburgh-genome-foundry.github.io/home.html>`_ by `Zulko <https://github.com/Zulko>`_\nand `released on Github <https://github.com/Edinburgh-Genome-Foundry/Bandwagon>`_ under the MIT licence (\u00a2 Edinburg Genome Foundry).\n\nEveryone is welcome to contribute !\n\nInstallation\n--------------\n\nIf you have pip installed, just type:\n\n.. code:: python\n\n    (sudo) pip install bandwagon\n\nBandwagon can be installed by unzipping the source code in one directory and using this command:\n\n.. code:: python\n\n    (sudo) python setup.py install\n\nTo create interactive bokeh plots you will need to additionally install Bokeh with\n\n.. code:: python\n\n    (sudo) pip install bokeh\n\n\n\nExamples of use\n----------------\n\n\nComputing digestion bands sizes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis first example shows how to compute digestion bands in the case of\na linear fragment, a circular fragment, and a multi-enzymes digestion:\n\n..  code:: python\n\n    from bandwagon import compute_digestion_bands\n\n    # Read the sequence (a string of the form 'ATGTGTGGTA...' etc.)\n    with open(\"example_sequence.txt\", \"r\") as f:\n        sequence = f.read()\n\n    # Compute digestion bands for a linear construct\n    print(compute_digestion_bands(sequence, [\"EcoRI\"], linear=True))\n    # Result >>> [400, 1017, 3583]\n\n    # Compute digestion bands for a circular construct\n    print(compute_digestion_bands(sequence, [\"EcoRI\"], linear=False))\n    # Result >>> [1017, 3983]\n\n    # Compute digestion bands for an enzymatic mix\n    print(compute_digestion_bands(sequence, [\"EcoRI\", \"BamHI\"]))\n    # Result >>> [400, 417, 600, 3583]\n\nPlotting bands\n~~~~~~~~~~~~~~~\n\n..  code:: python\n\n    from bandwagon import BandsPattern, BandsPatternsSet, LADDER_100_to_4k\n\n    ladder = LADDER_100_to_4k.modified(label=\"Ladder\", background_color=\"#ffffaf\")\n\n    patterns = [\n        BandsPattern([100, 500, 3500], ladder, label=\"C1\"),\n        BandsPattern([300, 400, 1500], ladder, label=\"C2\"),\n        BandsPattern([100, 1200, 1400, 3000], ladder, label=\"C3\"),\n        BandsPattern([100, 700], ladder, label=\"C4\"),\n    ]\n    patterns_set = BandsPatternsSet(patterns=[ladder] + patterns, ladder=ladder,\n                                    label=\"Test pattern\", ladder_ticks=3)\n    ax = patterns_set.plot()\n    ax.figure.savefig(\"simple_band_patterns.png\", bbox_inches=\"tight\", dpi=200)\n\n.. figure:: https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/BandWagon/master/examples/simple_band_patterns.png\n    :align: center\n\nPlotting a gel simulation\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLet us plot digestion patterns produced by different restriction enzymes on a same DNA sequence:\n\n\n..  code:: python\n\n    from bandwagon import (BandsPattern, BandsPatternsSet, LADDER_100_to_4k,\n                           compute_digestion_bands)\n\n    with open(\"example_sequence.txt\", \"r\") as f:\n        sequence = f.read()\n\n    patterns = [\n        BandsPattern(compute_digestion_bands(sequence, [enzyme], linear=True),\n                     ladder=LADDER_100_to_4k, label=enzyme)\n        for enzyme in [\"BamHI\", \"EcoRI\", \"EcoRV\", \"PstI\", \"SpeI\", \"XbaI\"]\n    ]\n    patterns_set = BandsPatternsSet(patterns=[LADDER_100_to_4k] + patterns,\n                                    ladder=LADDER_100_to_4k,\n                                    label=\"Digestion results\", ladder_ticks=3)\n\n    ax = patterns_set.plot()\n    ax.figure.savefig(\"digestion_results.png\", bbox_inches=\"tight\", dpi=200)\n\n.. figure:: https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/BandWagon/master/examples/simple_digestions.png\n    :align: center\n\nUsing a custom ladder\n~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can define a custom ladder by providing a dictionnary of the form\n\n..  code:: python\n\n    { actual_size_of_the_fragment: observed_migration_distance }\n\nFor instance here is how the  100b-4kb ladder (provided with BandWagon) is defined:\n\n..  code:: python\n\n    from bandwagon import custom_ladder\n\n    LADDER_100_to_4k = custom_ladder(\"100-4k\", {\n        100: 205,\n        200: 186,\n        300: 171,\n        400: 158,\n        500: 149,\n        650: 139,\n        850: 128,\n        1000: 121,\n        1650: 100,\n        2000: 90,\n        3000: 73,\n        4000: 65\n    })\n\nThe unit of the \"migration distance\" from the starting point is not very important,\nit could be millimeters on a gel, pixels in an image, etc.\n\nIf you are lucky enough to have an AATI automated fragment analyzer like us at the\nFoundry, it will output a ``.csv`` calibration file after each run, from which you\ncan generate a ladder with:\n\n..  code:: python\n\n    from bandwagon import ladder_from_aati_fa_calibration_table\n\n    ladder = ladder_from_aati_fa_calibration_table(\"Calibration.csv\",\n                                                   label=\"todays_ladder\")\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "Gel Agarose Simulation Matplotlib",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bandwagon",
    "platform": "",
    "project_url": "https://pypi.org/project/bandwagon/",
    "release_url": "https://pypi.org/project/bandwagon/0.1.1/",
    "requires_python": "",
    "summary": "Simulate DNA band patterns for gel migration experiments",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e6aabbf408fb63f49afe084b8557c65a",
          "sha256": "7fc4dd270c3f2893a9454ea465c2ffed0be150eed2ffc76b581ee9e6c144712c"
        },
        "downloads": 17,
        "filename": "bandwagon-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e6aabbf408fb63f49afe084b8557c65a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16819,
        "upload_time": "2017-02-06T20:07:28",
        "url": "https://files.pythonhosted.org/packages/a2/67/9c5a387c44b42493ea691fec8797664e86bf454c996d3f1ff3ecb6b7426f/bandwagon-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e6aabbf408fb63f49afe084b8557c65a",
        "sha256": "7fc4dd270c3f2893a9454ea465c2ffed0be150eed2ffc76b581ee9e6c144712c"
      },
      "downloads": 17,
      "filename": "bandwagon-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e6aabbf408fb63f49afe084b8557c65a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 16819,
      "upload_time": "2017-02-06T20:07:28",
      "url": "https://files.pythonhosted.org/packages/a2/67/9c5a387c44b42493ea691fec8797664e86bf454c996d3f1ff3ecb6b7426f/bandwagon-0.1.1.tar.gz"
    }
  ]
}