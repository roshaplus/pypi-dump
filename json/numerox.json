{
  "info": {
    "author": "Keith Goodman",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "Numerox is a Numerai tournament toolbox written in Python.\n\nAll you have to do is create a model. Take a look at `model.py`_ for examples.\n\nOnce you have a model numerox will do the rest. First download the Numerai\ndataset and then load it (there is no need to unzip it)::\n\n    >>> import numerox as nx\n    >>> nx.download_dataset('numerai_dataset.zip')\n    >>> data = nx.load_zip('numerai_dataset.zip')\n    >>> data\n    region    live, test, train, validation\n    rows      884544\n    era       98, [era1, eraX]\n    x         50, min 0.0000, mean 0.4993, max 1.0000\n    y         mean 0.499961, fraction missing 0.3109\n\nLet's use the logistic regression model in numerox to run 5-fold cross\nvalidation on the training data::\n\n    >>> model = nx.model.logistic()\n    >>> prediction1 = nx.backtest(model, data, verbosity=1)\n    logistic(inverse_l2=1e-05)\n          logloss   auc     acc     ystd\n    mean  0.692974  0.5226  0.5159  0.0023  |  region   train\n    std   0.000224  0.0272  0.0205  0.0002  |  eras     85\n    min   0.692360  0.4550  0.4660  0.0020  |  consis   0.7647\n    max   0.693589  0.5875  0.5606  0.0027  |  75th     0.6931\n\nOK, results are good enough for a demo so let's make a submission file for the\ntournament::\n\n    >>> prediction2 = nx.production(model, data)\n    logistic(inverse_l2=1e-05)\n          logloss   auc     acc     ystd\n    mean  0.692993  0.5157  0.5115  0.0028  |  region   validation\n    std   0.000225  0.0224  0.0172  0.0000  |  eras     12\n    min   0.692440  0.4853  0.4886  0.0028  |  consis   0.7500\n    max   0.693330  0.5734  0.5555  0.0028  |  75th     0.6931\n    >>> prediction2.to_csv('logistic.csv')  # 6 decimal places by default\n\nThere is no overlap in ids between prediction1 (train) and prediction2\n(tournament) so you can add (concatenate) them if you're into that and let's\ngo ahead and save the result::\n\n    >>> prediction = prediction1 + prediction2\n    >>> prediction.save('logloss_1e-05.pred')  # HDF5\n\nOnce you have run and saved several predictions, you can make a report::\n\n    >>> report = nx.report.load_report('/round79', extension='pred')\n    >>> report.performance(data['train'], sort_by='logloss')\n    logloss   auc     acc     ystd    consis (train; 85 eras)\n    0.692455  0.5215  0.5149  0.0219  0.6824        logistic_1e-03\n    0.692487  0.5224  0.5159  0.0121  0.7294        logistic_1e-04\n    0.692565  0.5236  0.5162  0.0086  0.7294  extratrees_nfeature7\n    0.692581  0.5206  0.5143  0.0253  0.6000        logistic_1e-02\n    0.692629  0.5240  0.5164  0.0074  0.7294  extratrees_nfeature5\n    0.692704  0.5200  0.5140  0.0273  0.5412        logistic_1e-01\n    0.692747  0.5232  0.5162  0.0055  0.7647  extratrees_nfeature3\n    0.692831  0.5238  0.5163  0.0042  0.7647  extratrees_nfeature2\n    0.692974  0.5226  0.5159  0.0023  0.7647        logistic_1e-05\n\nThe lowest logloss on the train data was by ``logistic_1e-03``. Let's look at\nits per era performance on the validation data::\n\n    >>> report.performance_per_era(data['validation'], 'logistic_1e-03')\n    logistic_1e-03\n           logloss   auc     acc     ystd  \n    era86  0.691499  0.5322  0.5296  0.0220\n    era87  0.689715  0.5552  0.5371  0.0219\n    era88  0.692501  0.5189  0.5167  0.0220\n    era89  0.694544  0.4954  0.4916  0.0218\n    era90  0.691133  0.5349  0.5230  0.0221\n    era91  0.692794  0.5140  0.5061  0.0218\n    era92  0.694579  0.4933  0.4906  0.0217\n    era93  0.694098  0.4983  0.4954  0.0218\n    era94  0.688417  0.5752  0.5591  0.0218\n    era95  0.691734  0.5265  0.5224  0.0216\n    era96  0.693184  0.5119  0.5092  0.0215\n    era97  0.693276  0.5077  0.5089  0.0215\n\nBoth the ``production`` and ``backtest`` functions are just very thin wrappers\naround the ``run`` function::\n\n    >>> prediction = nx.run(model, splitter, verbosity=2)\n\nwhere ``splitter`` iterates through fit, predict splits of the data. Numerox\ncomes with five splitters:\n\n- ``tournament_splitter`` fit: train; predict: tournament (production)\n- ``validation_splitter`` fit: train; predict validation\n- ``cheat_splitter`` fit: train+validation; predict tournament\n- ``cv_splitter`` k-fold cross validation across train eras (backtest)\n- ``split_splitter`` single split of train data across eras\n\nFor example, here's how you would reproduce the ``backtest`` function::\n\n    >>> splitter = nx.cv_splitter(data, kfold=5, seed=0)\n    >>> prediction = nx.run(model, splitter)\n\nand the ``production`` function::\n\n    >>> splitter = nx.tournament_splitter(data)\n    >>> prediction = nx.run(model, splitter)\n\nData class\n==========\n\nYou can create a data object from the zip archive provided by Numerai::\n\n    >>> import numerox as nx\n    >>> data = nx.load_zip('numerai_dataset.zip')\n    >>> data\n    region    live, test, train, validation\n    rows      884544\n    era       98, [era1, eraX]\n    x         50, min 0.0000, mean 0.4993, max 1.0000\n    y         mean 0.499961, fraction missing 0.3109\n\nBut that is slow (~9 seconds) which is painful for dedicated overfitters.\nLet's create an HDF5 archive::\n\n    >>> data.save('numerai_dataset.hdf')\n    >>> data2 = nx.load_data('numerai_dataset.hdf')\n\nThat loads quickly (~0.1 seconds, but takes more disk space than the\nunexpanded zip archive).\n\nData indexing is done by rows, not columns::\n\n    >>> data[data.y == 0]\n    region    train, validation\n    rows      304813\n    era       97, [era1, era97]\n    x         50, min 0.0000, mean 0.4993, max 1.0000\n    y         mean 0.000000, fraction missing 0.0000\n\nYou can also index with special strings. Here are two examples::\n\n    >>> data['era92']\n    region    validation\n    rows      6048\n    era       1, [era92, era92]\n    x         50, min 0.0308, mean 0.4993, max 1.0000\n    y         mean 0.500000, fraction missing 0.0000\n\n    >>> data['tournament']\n    region    live, test, validation\n    rows      348831\n    era       13, [era86, eraX]\n    x         50, min 0.0000, mean 0.4992, max 1.0000\n    y         mean 0.499966, fraction missing 0.7882\n\nIf you wish to extract more than one era (I hate these eras)::\n\n    >>> data.era_isin(['era92', 'era93'])\n    region    validation\n    rows      12086\n    era       2, [era92, era93]\n    x         50, min 0.0177, mean 0.4993, max 1.0000\n    y         mean 0.500000, fraction missing 0.0000\n\nYou can do the same with regions::\n\n    >>> data.region_isin(['test', 'live'])\n    region    live, test\n    rows      274966\n    era       1, [eraX, eraX]\n    x         50, min 0.0000, mean 0.4992, max 1.0000\n    y         mean nan, fraction missing 1.0000\n\nOr you can remove regions (or eras)::\n\n    >>> data.region_isnotin(['test', 'live'])\n    region    train, validation\n    rows      609578\n    era       97, [era1, era97]\n    x         50, min 0.0000, mean 0.4993, max 1.0000\n    y         mean 0.499961, fraction missing 0.0000\n\nYou can concatenate data objects (as long as the ids don't overlap) by\nadding them together. Let's add validation era92 to the training data::\n\n    >>> data['train'] + data['era92']\n    region    train, validation\n    rows      541761\n    era       86, [era1, era92]\n    x         50, min 0.0000, mean 0.4993, max 1.0000\n    y         mean 0.499960, fraction missing 0.0000\n\nOr, let's go crazy::\n\n    >>> nx.concat_data([data['live'], data['era1'], data['era92']])\n    region    live, train, validation\n    rows      19194\n    era       3, [era1, eraX]\n    x         50, min 0.0000, mean 0.4992, max 1.0000\n    y         mean 0.499960, fraction missing 0.3544\n\nTo get views (not copies) of the data as numpy arrays use ``data.ids``,\n``data.x``, ``data.y``. To get copies (not views) of era and region as numpy\nstring arrays use ``data.era``, ``data.region``. Internally era and region are\nstored as floats. To get views: ``data.era_float``, ``data.region_region``.\n\nNumerox comes with a small dataset to play with::\n\n    >>> nx.play_data()\n    region    live, test, train, validation\n    rows      8795\n    era       98, [era1, eraX]\n    x         50, min 0.0259, mean 0.4995, max 0.9913\n    y         mean 0.502646, fraction missing 0.3126\n\nIt is about 1% of a regular Numerai dataset, so contains around 60 rows per\nera.\n\nInstall\n=======\n\nThis is what you need to run numerox:\n\n- python\n- setuptools\n- numpy\n- pandas\n- pytables\n- sklearn\n- requests\n- nose\n\nInstall with pipi::\n\n    $ sudo pip install numerox\n\nAfter you have installed numerox, run the unit tests (please report any\nfailures)::\n\n    >>> import numerox as nx\n    >>> nx.test()\n\nResources\n=========\n\n- Ask usage questions `on rocket.chat`_\n- Report bugs `on github`_\n- Check out the `release notes`_ to see what is new\n\nSponsor\n=======\n\nThank you Numerai for providing funding towards the development of Numerox.\n\nLicense\n=======\n\nNumerox is distributed under the the GPL v3+. See LICENSE file for details.\n\n\n.. _model.py: https://github.com/kwgoodman/numerox/blob/master/numerox/model.py \n.. _at github: https://github.com/kwgoodman/numerox/issues\n.. _on rocket.chat: https://community.numer.ai/channel/numerox\n.. _on github: https://github.com/kwgoodman/numerox\n.. _release notes: https://github.com/kwgoodman/numerox/blob/master/release.rst\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/kwgoodman/numerox",
    "keywords": "",
    "license": "Simplified BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "numerox",
    "platform": "OS Independent",
    "project_url": "https://pypi.org/project/numerox/",
    "release_url": "https://pypi.org/project/numerox/0.0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Numerox is a Numerai tournament toolbox written in Python",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0dc815a210a0f52d8f9fee4e2c5ee4b4",
          "sha256": "e557d1aed03088a4166a61dbaea46cc5be9d55c9d1df2d3170eae091e639744b"
        },
        "downloads": -1,
        "filename": "numerox-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0dc815a210a0f52d8f9fee4e2c5ee4b4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1789512,
        "upload_time": "2017-11-14T22:33:07",
        "url": "https://files.pythonhosted.org/packages/bc/cc/77b1e2bcf357833d6a44c899cd866fe399aa4f28d12d5a583042f4e55566/numerox-0.0.1.tar.gz"
      }
    ],
    "0.0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3605f82e65e4f01759e89050a44582eb",
          "sha256": "437d84b3f48d62bb953d76c23e4873163f2bf337445ff29c41be8c7334fba2df"
        },
        "downloads": -1,
        "filename": "numerox-0.0.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "3605f82e65e4f01759e89050a44582eb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15876,
        "upload_time": "2017-11-03T15:23:54",
        "url": "https://files.pythonhosted.org/packages/98/61/7bacd504ff5d382efd864df79029c0d0997dd4dfb32b988242dc75ba18e4/numerox-0.0.1.dev0.tar.gz"
      }
    ],
    "0.0.1.dev1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0534c85566b317dc7bcd9b86dd55060e",
          "sha256": "2710e47682109dd584bf45eb4a1f8707f6c5edae7ca0a88462aff39c9baf7f19"
        },
        "downloads": -1,
        "filename": "numerox-0.0.1.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "0534c85566b317dc7bcd9b86dd55060e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1777885,
        "upload_time": "2017-11-03T23:15:42",
        "url": "https://files.pythonhosted.org/packages/be/99/0b374cf9aaf23caf1bf03cfeba5e0a42726e18bde436d6d0069914b8c5c8/numerox-0.0.1.dev1.tar.gz"
      }
    ],
    "0.0.1.dev2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "007f577b6037c703b1cf72cca2bb5f1b",
          "sha256": "34eeaba5e338342b26c87aee375446c0947e88b4e08d07e4e104d79b3bcfc7e8"
        },
        "downloads": -1,
        "filename": "numerox-0.0.1.dev2.tar.gz",
        "has_sig": false,
        "md5_digest": "007f577b6037c703b1cf72cca2bb5f1b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1778900,
        "upload_time": "2017-11-05T15:02:00",
        "url": "https://files.pythonhosted.org/packages/35/c6/c1a7be6b016b3410835da4841b344f1079afb052841b7f6e10b3e6130c46/numerox-0.0.1.dev2.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e900077671854e77d044ebfbc5b81e3c",
          "sha256": "64b0a402caa024a470e005eeab6037e79c3a1e1addd2e1fc26d4bf30371ced33"
        },
        "downloads": -1,
        "filename": "numerox-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e900077671854e77d044ebfbc5b81e3c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3483544,
        "upload_time": "2017-11-16T16:49:10",
        "url": "https://files.pythonhosted.org/packages/f1/91/f885835e600a0a3fd72e19c71e7c1b44104a225be3f82f7a9824e4070707/numerox-0.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e900077671854e77d044ebfbc5b81e3c",
        "sha256": "64b0a402caa024a470e005eeab6037e79c3a1e1addd2e1fc26d4bf30371ced33"
      },
      "downloads": -1,
      "filename": "numerox-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e900077671854e77d044ebfbc5b81e3c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3483544,
      "upload_time": "2017-11-16T16:49:10",
      "url": "https://files.pythonhosted.org/packages/f1/91/f885835e600a0a3fd72e19c71e7c1b44104a225be3f82f7a9824e4070707/numerox-0.0.2.tar.gz"
    }
  ]
}