{
  "info": {
    "author": "Adam Mills",
    "author_email": "adam@armills.info",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "===============================\naioautomatic\n===============================\n\n\n.. image:: https://img.shields.io/pypi/v/aioautomatic.svg\n        :target: https://pypi.python.org/pypi/aioautomatic\n\n.. image:: https://img.shields.io/travis/armills/aioautomatic.svg\n        :target: https://travis-ci.org/armills/aioautomatic\n\n.. image:: https://img.shields.io/coveralls/armills/aioautomatic.svg\n        :target: https://coveralls.io/r/armills/aioautomatic?branch=master\n\nAsyncio library for the Automatic API\n\n\n* Free software: Apache Software License 2.0\n\nAll methods are python wrappers of the API definitions defined by `Automatic <https://developer.automatic.com/api-reference/>`_.\n\n\nUsage\n-----\n\nIt is recommended to manage the aiohttp ClientSession object externally and pass it to the Client constructor. `(See the aiohttp documentation.) <https://aiohttp.readthedocs.io/en/stable/client_reference.html#aiohttp.ClientSession>`_ If not passed to Server, a ClientSession object will be created automatically.\n\nQuery for information from the users account.\n\n.. code-block:: python\n\n    import asyncio\n    import aioautomatic\n    import aiohttp\n    from datetime import datetime\n    from datetime import timedelta\n\n    SCOPE = ['location', 'vehicle:profile', 'user:profile', 'trip']\n\n    CLIENT_ID = '<client_id>'\n    SECRET_ID = '<secret>'\n    USER_EMAIL = '<user_email>'\n    USER_PASSWORD = '<user_password>'\n\n\n    @asyncio.coroutine\n    def loop():\n        aiohttp_session = aiohttp.ClientSession()\n        try:\n            client = aioautomatic.Client(\n                CLIENT_ID,\n                SECRET_ID,\n                aiohttp_session)\n            session = yield from client.create_session_from_password(\n                    SCOPE, USER_EMAIL, USER_PASSWORD)\n\n            # Fetch information about the authorized user\n            user = yield from session.get_user()\n            user_profile = yield from user.get_profile()\n            user_metadata = yield from user.get_metadata()\n            print(\"***USER***\")\n            print(user)\n            print(user.email)\n            print(user.first_name)\n            print(user.last_name)\n            print(user_profile.date_joined)\n            print(user_metadata.firmware_version)\n            print(user_metadata.device_type)\n            print(user_metadata.phone_platform)\n\n            # Fetch all devices associated with the user account\n            devices = yield from session.get_devices()\n            print(\"***DEVICES***\")\n            print(devices)\n\n            # Fetch a list of vehicles associated with the user account\n            vehicles = yield from session.get_vehicles()\n            print(\"***VEHICLES***\")\n            print(vehicles)\n            print(vehicles[0].make)\n            print(vehicles[0].model)\n            print(vehicles[0].fuel_level_percent)\n\n            # Fetch a list of all trips in the last 10 days\n            min_end_time = datetime.utcnow() - timedelta(days=10)\n            trips = yield from session.get_trips(ended_at__gte=min_end_time, limit=10)\n            print(\"***TRIPS***\")\n            print(trips)\n            print(trips[0].start_location.lat)\n            print(trips[0].start_location.lon)\n            print(trips[0].start_address.name)\n            print(trips[0].distance_m)\n            print(trips[0].duration_s)\n\n            # If more than 10 trips exist, get the next page of results\n            if trips.next is not None:\n                trips = yield from trips.get_next()\n                print(trips)\n\n        finally:\n            yield from aiohttp_session.close()\n\n    asyncio.get_event_loop().run_until_complete(loop())\n\nCreate a session using an oauth handshake authorization code.\n\n.. code-block:: python\n\n    import asyncio\n    import aioautomatic\n    import aiohttp\n\n    CLIENT_ID = '<client_id>'\n    SECRET_ID = '<secret>'\n    # The user is redirected to Automatic's website, and after they authorize\n    # the app, they are redirected back to the Redirect URL, with the required\n    # code in the query parameters.\n    # See: https://developer.automatic.com/api-reference/#oauth-workflow\n    AUTH_CODE = '<code>'\n\n\n    @asyncio.coroutine\n    def loop():\n        aiohttp_session = aiohttp.ClientSession()\n        try:\n            client = aioautomatic.Client(\n                CLIENT_ID,\n                SECRET_ID,\n                aiohttp_session)\n            session = yield from client.create_session_from_oauth_code(\n                AUTH_CODE)\n\n            # Fetch information about the authorized user\n            user = yield from session.get_user()\n            user_profile = yield from user.get_profile()\n            user_metadata = yield from user.get_metadata()\n            print(\"***USER***\")\n            print(user)\n            print(user.email)\n            print(user.first_name)\n            print(user.last_name)\n\n            # Save the refresh token from the session for use next time\n            # a session needs to be created.\n            refresh_token = session.refresh_token\n\n            # Create a new session with the refresh token.\n            session = yield from client.create_session_from_refresh_token(\n                refresh_token)\n\n        finally:\n            yield from aiohttp_session.close()\n\n    asyncio.get_event_loop().run_until_complete(loop())\n\nOpen a websocket connection for realtime updates\n\n.. code-block:: python\n\n    import asyncio\n    import aioautomatic\n    import aiohttp\n\n    SCOPE = ['current_location', 'location', 'vehicle:profile', 'user:profile', 'trip']\n\n    CLIENT_ID = '<client_id>'\n    SECRET_ID = '<secret>'\n\n\n    def error_callback(name, message):\n        print(message)\n\n\n    def event_callback(name, data):\n        print(name)\n        if data.location:\n            print(data.location.lat)\n            print(data.location.lon)\n\n\n    def speeding_callback(name, data):\n        print(\"Speeding! Velocity: {:1.2f} KPH\".format(data.velocity_kph))\n\n\n    @asyncio.coroutine\n    def loop():\n        aiohttp_session = aiohttp.ClientSession()\n        try:\n            client = aioautomatic.Client(\n                CLIENT_ID,\n                SECRET_ID,\n                aiohttp_session)\n\n            client.on('closed', closed_callback)\n            client.on('notification:speeding', speeding_callback)\n            client.on_app_event(callback)\n            future = yield from client.ws_connect()\n\n            # Run until websocket is closed\n            yield from future\n\n        finally:\n            yield from aiohttp_session.close()\n\n    asyncio.get_event_loop().run_until_complete(loop())\n\nCredits\n---------\n\nThis package is built on aiohttp_, which provides the foundation for async HTTP and websocket calls.\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _aiohttp: http://aiohttp.readthedocs.io/en/stable/\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/armills/aioautomatic",
    "keywords": "aioautomatic",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aioautomatic",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/aioautomatic/",
    "release_url": "https://pypi.org/project/aioautomatic/0.4.0/",
    "requires_python": "",
    "summary": "Asyncio library for the Automatic API",
    "version": "0.4.0"
  },
  "releases": {
    "0.1.0": [],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c326c5fab1746720df88c082b4d3cda8",
          "sha256": "500778c9ca159008016b36240d9f987bfa137f080abaa91849181b258a05a57d"
        },
        "downloads": 0,
        "filename": "aioautomatic-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c326c5fab1746720df88c082b4d3cda8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13950,
        "upload_time": "2017-04-15T21:44:46",
        "url": "https://files.pythonhosted.org/packages/36/38/b40c023fb49ae3a934765ebd6944745c138bb1de2e1f0251ca4139211d11/aioautomatic-0.1.1.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "12e9d99927066c4a28976cc0328007b9",
          "sha256": "693148070b29a940074e51648175b63564b5e1abc3f49c2799721a45284b1c89"
        },
        "downloads": 0,
        "filename": "aioautomatic-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "12e9d99927066c4a28976cc0328007b9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15221,
        "upload_time": "2017-04-20T00:23:31",
        "url": "https://files.pythonhosted.org/packages/26/0a/6a626b5e451459435544695ef7ba4923d3693ca373801a1dfeefc40f28bd/aioautomatic-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dc4b6b22e83f1fc32839f90bc716a5c0",
          "sha256": "8f050054ef83466b729ea91c35593c2a7a146d47c647cd2f1dd8c0754d9ef606"
        },
        "downloads": 0,
        "filename": "aioautomatic-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dc4b6b22e83f1fc32839f90bc716a5c0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15262,
        "upload_time": "2017-04-27T11:38:27",
        "url": "https://files.pythonhosted.org/packages/0a/ee/6b57d28611e9aa28a18f883403cc9ff4b77e289e7cb2b56c184b80f275d1/aioautomatic-0.2.1.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "88b9a6bec87dcbbef91dacb7e1cfa72f",
          "sha256": "21f6ab84d13b8d40935c3134403c59f3565c8a37ffda75e41fbdb7c42bb58db1"
        },
        "downloads": 0,
        "filename": "aioautomatic-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "88b9a6bec87dcbbef91dacb7e1cfa72f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23575,
        "upload_time": "2017-05-02T17:25:34",
        "url": "https://files.pythonhosted.org/packages/a0/f4/c3fc093d7073ef09753c43dfaa0428ddc69de61f1f117d7c0ded167b875f/aioautomatic-0.3.0.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ac90058aaccbb51cfdc50092e7717dcd",
          "sha256": "53a3025eff7ac961ee08ae05404d90fd5d559f7ab42dd4e01294d8f4f2126168"
        },
        "downloads": 0,
        "filename": "aioautomatic-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ac90058aaccbb51cfdc50092e7717dcd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23606,
        "upload_time": "2017-05-02T20:13:40",
        "url": "https://files.pythonhosted.org/packages/20/aa/1c4b0f724b55cf84a396b04a7fcc041fb38f2d3686131b9004bf90f40a1b/aioautomatic-0.3.1.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "475d3a9d6f0d9a636ff2b2976a3a1f9d",
          "sha256": "2b356ad4d5eda86fcbe3d6618c22cd62ada9de139e7a3f617839ab8ad91ac120"
        },
        "downloads": 0,
        "filename": "aioautomatic-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "475d3a9d6f0d9a636ff2b2976a3a1f9d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24555,
        "upload_time": "2017-05-11T19:38:57",
        "url": "https://files.pythonhosted.org/packages/31/67/5b8135f700b27a7c87b30f8ccf7be2c65e96cbfe40905ee706dc033965f4/aioautomatic-0.4.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "475d3a9d6f0d9a636ff2b2976a3a1f9d",
        "sha256": "2b356ad4d5eda86fcbe3d6618c22cd62ada9de139e7a3f617839ab8ad91ac120"
      },
      "downloads": 0,
      "filename": "aioautomatic-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "475d3a9d6f0d9a636ff2b2976a3a1f9d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 24555,
      "upload_time": "2017-05-11T19:38:57",
      "url": "https://files.pythonhosted.org/packages/31/67/5b8135f700b27a7c87b30f8ccf7be2c65e96cbfe40905ee706dc033965f4/aioautomatic-0.4.0.tar.gz"
    }
  ]
}