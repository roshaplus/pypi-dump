{
  "info": {
    "author": "Oliver Cope",
    "author_email": "oliver@redgecko.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python"
    ],
    "description": "Simple WSGI A/B testing.\n\n(c) 2010-2012 Oliver Cope, released under a BSD style license, please see LICENSE.txt for details.\n\n\nIntroduction and sample usage\n=============================\n\nSwab helps you run A/B tests on your web applications.\n\nWhen you run an A/B test experiment with Swab, visitors to your web application\nare randomly assigned to one of the variants you have defined. For example, you\nmight run an experiment in which you test two color variants of a button.\n\nYou also need to define the goal that you want your visitors to perform. For\nexample, make a purchase or sign up with your service.\n\nSwab contains WSGI middleware that tracks visitor sessions and randomly assigns\nevery visitor to see one of the variants you have defined. Every time a variant\nis displayed to a visitor, a trial is recorded. Every time a goal conversion is\nmade, that's recorded too. Using this data, Swab calculates the conversion rate\nfor each variant along with some basic statistics to help you decide whether\nthere is a significant difference between the variants.\n\n\nSetting up a Swab instance\n--------------------------\n\nSwab needs a directory where it can save the data files it uses for tracking\ntrial and conversion data::\n\n    from swab import Swab\n    s = Swab('/tmp/.swab-test-data')\n\nThen you need to tell swab about the experiments you want to run, the variants\navailable and the name of the conversion goal::\n\n    s.addexperiment('button-color', ['red', 'blue'], 'signup')\n\nFinally you need to wrap your WSGI app in swab's middleware::\n\n    application = s.middleware(application)\n\nIntegrating swab in your app\n----------------------------\n\nSwab makes a number of functions available to you that you can put in your application code:\n\n    show_variant(experiment, environ)\n        \n        Return the variant name to show for the current request. In the above\n        example, a call to ``show_variant('button-color', environ)`` would\n        return either ``'red'`` or ``'blue'``\n        \n    record_trial_tag(experiment, environ)\n        \n        Return the HTML tag for a javascript beacon that should be placed in\n        the page you are testing. The tag looks like ``<script\n        src=\"http://example.com/swab/r.js?...\"></script>`` and causes the\n        user's browser to load the referenced javascript file. Loading this\n        triggers swab to record a trial for the given experiment.\n\n    record_trial(experiment, environ)\n\n        If you don't want to use the javascript beacon to track trials, you can\n        call ``record_trial`` directly. The javascript beacon method is\n        preferred as it is unlikely to be triggered by bots.\n\n    record_goal(experiment, environ)\n\n        Record a goal conversion for the named experiment\n\nViewing results\n---------------\n\nTest results are available at the URL ``/swab/results``.\n\nCaching\n-------\n\nSwab automatically adds a ``Cache-Control: no-cache`` response header if\n``show_variant`` or ``record_trial`` was called during the request. This\nhelps avoid proxies caching your test variants. It will also remove any other\ncache related headers (eg 'ETag' or 'Last-Modified'). If you don't want this\nbehaviour, you need to pass ``cache_control=False`` when creating the Swab\ninstance.\n\nViewing the variants\n--------------------\n\nTo test your competing pages append '?swab.<experiment-name>=<variant-name>' to\nURLs to force any given variant to be shown.\n\nBasic design\n============\n\nEach visitor is assigned an identity which is persisted by means of a cookie.\nThe identity is a base64 encoded randomly generated byte sequence. This\nidentity is used as a seed for a RNG, which is used to switch visitors into\ntest groups.\n\nEvery time a test is shown, a line\nis entered into a file at ``<datadir>/<experiment>/<variant>/__all__``. This is\ntriggered by calling ``record_trial``\n\nEvery time a goal is recorded (triggered by calling ``record_goal``), a\nline is entered into a file at ``<datadir>/<experiment>/<variant>/<goal>``\n\nEach log line has the format ``<timestamp>:<identity>\\n``.\n\nNo file locking is used: it is assumed that this will be run on a system where\neach line is smaller than the fs blocksize, allowing us to avoid this overhead.\nThe lines may become interleaved, but there should be no risk of corruption\neven with multiple simultaneous writes. See\nhttp://www.perlmonks.org/?node_id=486488 for a discussion of the issue.\n\n\n\nVersion 0.1.3\n\n  * Added a javascript beacon to record tests (helps exclude bots)\n  * Better exclusion of bots on server side too\n  * Record trial app won't raise an error if the experiment name doesn't exist\n  * Removed debug flag, the ability to force a variant is now always present\n  * Strip HTTP caching headers if an experiment has been invoked during the request\n  * Improved accuracy of conversion tracking\n  * Cookie path can be specified in middleware configuration\n\nVersion 0.1.2\n\n  * Minor bugfixes\n\nVersion 0.1.1\n\n  * Bugfix for ZeroDivisionErrors when no data has been collected\n\nVersion 0.1\n\n  * Initial release",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "UNKNOWN",
    "keywords": "",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "swab",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/swab/",
    "release_url": "https://pypi.org/project/swab/0.1.3-/",
    "requires_python": null,
    "summary": "Swab: Simple WSGI A/B testing",
    "version": "0.1.3-"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dbc5e272b5fb86b85930292a7fb3fbaf",
          "sha256": "fe5846d50eda093efb6ba904b839e6bd71c69496d742c032f0336db8765e4562"
        },
        "downloads": 2818,
        "filename": "swab-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dbc5e272b5fb86b85930292a7fb3fbaf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12804,
        "upload_time": "2010-09-08T13:25:33",
        "url": "https://files.pythonhosted.org/packages/3d/2c/6ed8c71b26f627af85d3789f198d1b5c324f61c4cfcc7e51c3109755dbb3/swab-0.1.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "17c88d8b3cc27d00a1d45ef2de9324a3",
          "sha256": "f451b0d889f7227cce711df4e999add65366478a5e33a00e08d2f1f699571a86"
        },
        "downloads": 2407,
        "filename": "swab-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "17c88d8b3cc27d00a1d45ef2de9324a3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13025,
        "upload_time": "2010-09-08T22:50:22",
        "url": "https://files.pythonhosted.org/packages/30/13/44030cd0e7f2ccdd700c65c03d027b1385025e7410328838df560ca0a158/swab-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fc6edcd4e3729152f27032ed201decdd",
          "sha256": "e073e46098fa81d8e252b7cb2f82efdad510bb6b18fa56f193c241910689f010"
        },
        "downloads": 2467,
        "filename": "swab-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fc6edcd4e3729152f27032ed201decdd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13123,
        "upload_time": "2010-09-10T10:34:49",
        "url": "https://files.pythonhosted.org/packages/a1/3f/34ef088f5ce4aa02817a628078b531f76614105f488c45b396048d3b9a07/swab-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [],
    "0.1.3-": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dc7e18810a32cfc83831e08e15af4abc",
          "sha256": "63c7ee45179b761bcb5937fe2e6d3d8be4a0526f650b6f20911ba418771fc4a6"
        },
        "downloads": 2226,
        "filename": "swab-0.1.3-.tar.gz",
        "has_sig": false,
        "md5_digest": "dc7e18810a32cfc83831e08e15af4abc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16609,
        "upload_time": "2012-07-20T15:23:40",
        "url": "https://files.pythonhosted.org/packages/b3/a0/6a7c33523f434cb605e40915166ff693196c8efd117dbd6d0b14c55365fa/swab-0.1.3-.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "dc7e18810a32cfc83831e08e15af4abc",
        "sha256": "63c7ee45179b761bcb5937fe2e6d3d8be4a0526f650b6f20911ba418771fc4a6"
      },
      "downloads": 2226,
      "filename": "swab-0.1.3-.tar.gz",
      "has_sig": false,
      "md5_digest": "dc7e18810a32cfc83831e08e15af4abc",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 16609,
      "upload_time": "2012-07-20T15:23:40",
      "url": "https://files.pythonhosted.org/packages/b3/a0/6a7c33523f434cb605e40915166ff693196c8efd117dbd6d0b14c55365fa/swab-0.1.3-.tar.gz"
    }
  ]
}