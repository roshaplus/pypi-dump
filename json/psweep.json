{
  "info": {
    "author": "Steve Schmerler",
    "author_email": "git@elcorto.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "psweep -- loop like a pro, make parameter studies fun\n=====================================================\n\nAbout\n-----\n\nThis is a package with simple helpers to set up parameter studies.\n\nGetting started\n---------------\n\nThe most simple example one can think of: loop over a single variable::\n\n    #!/usr/bin/env python3\n\n    import random\n    from psweep import psweep as ps\n    import pandas as pd\n\n\n    def func(pset):\n        return {'timing': random.random() * pset['a']}\n                \n                    \n    if __name__ == '__main__':\n        params = ps.seq2dicts('a', [1,2,3,4])\n        df = pd.DataFrame()\n        df = ps.run(df, func, params)\n        print(df.to_json(orient='split'))\n\n\nprints::\n\n       _run  a    timing\n    0     0  1  0.034164\n       _run  a    timing\n    1     0  2  1.685145\n       _run  a    timing\n    2     0  3  1.612341\n       _run  a    timing\n    3     0  4  2.887937\n    {\"columns\":[\"_run\",\"a\",\"timing\"],\"index\":[0,1,2,3],\"data\":[[0,1,0.0341638266],[0,2,1.6851449492],[0,3,1.6123406636],[0,4,2.8879373119]]}\n\nTests\n-----\n::\n    \n    # apt-get install python3-nose\n    $ nosetests3\n\nConcepts\n--------\n\nThe basic data structure for a param study is a list ``params`` of dicts\n(called \"parameter sets\" or short psets).\n\n::\n\n    params = [{'foo': 1, 'bar': 'lala'},  # pset 1\n              {'foo': 2, 'bar': 'zzz'},   # pset 2\n              ...                         # ...\n             ]\n\nEach pset contains values of parameters ('foo' and 'bar') which are varied\nduring the parameter study.\n\nThese psets are the basis of a pandas ``DataFrame`` (much like an SQL table, 2D\narray w/ named columns and in case of ``DataFrame`` also variable data types)\nwith columns 'foo' and 'bar'. \n\nThen we define a callback function ``func``, which takes only one pset\nsuch as::\n\n    {'foo': 1, 'bar': 'lala'},\n\nand runs the workload for that pset. ``func`` must return a dict, for example::\n\n    {'timing': 1.234}, \n\nwhich is the result of the run.\n\n``func`` is called in a loop on all psets in ``params`` in the ``run`` helper\nfunction. The result dict (e.g. ``{'timing': 1.234}`` from each call gets merged\nwith the current pset such that we have::\n\n    {'foo': 1, 'bar': 'lala', 'timing': 1.234}\n\nThat gets appended to a ``DataFrame``, thus creating a new column called\n'timing'. The ``run`` function adds a ``_run`` column as well, which counts how\noften the study has been performed.\n\nThis package offers some very simple helper functions which assist in creating\n``params``. Basically, we define the to-be-varied parameters ('foo' and 'bar')\nas \"named sequences\" (i.e. list of dicts) which are, in fact, the columns of\n``params``. Then we use something like ``itertools.product`` to loop over them.\n\n::\n\n    >>> from itertools import product\n    >>> x=seq2dicts('a', [1,2,3])\n    >>> x\n    [{'x': 1}, {'x': 2}, {'x': 3}]\n    >>> y=seq2dicts('y', ['xx','yy','zz'])\n    >>> y\n    [{'y': 'xx'}, {'y': 'yy'}, {'y': 'zz'}]\n    >>> list(product(x,y))\n    [({'x': 1}, {'y': 'xx'}),\n     ({'x': 1}, {'y': 'yy'}),\n     ({'x': 1}, {'y': 'zz'}),\n     ({'x': 2}, {'y': 'xx'}),\n     ({'x': 2}, {'y': 'yy'}),\n     ({'x': 2}, {'y': 'zz'}),\n     ({'x': 3}, {'y': 'xx'}),\n     ({'x': 3}, {'y': 'yy'}),\n     ({'x': 3}, {'y': 'zz'})]\n\n    >>> loops2params(product(x,y))\n    [{'x': 1, 'y': 'xx'},\n     {'x': 1, 'y': 'yy'},\n     {'x': 1, 'y': 'zz'},\n     {'x': 2, 'y': 'xx'},\n     {'x': 2, 'y': 'yy'},\n     {'x': 2, 'y': 'zz'},\n     {'x': 3, 'y': 'xx'},\n     {'x': 3, 'y': 'yy'},\n     {'x': 3, 'y': 'zz'}]\n\nThe logic of the param study is entirely contained in the creation of ``params``.\nE.g., if parameters shall be varied together (say x and y), then instead of\n\n::\n\n    >>> product(x,y,z)\n\nuse\n\n::\n\n    >>> product(zip(x,y), z)\n\nThe nestings from ``zip()`` are flattened in ``loops2params()``.\n\n::\n\n    >>> z=seq2dicts('z', [None, 1.2, 'X'])\n    >>> z\n    [{'z': None}, {'z': 1.2}, {'z': 'X'}]\n    >>> list(product(zip(x,y),z))\n    [(({'x': 1}, {'y': 'xx'}), {'z': None}),\n     (({'x': 1}, {'y': 'xx'}), {'z': 1.2}),\n     (({'x': 1}, {'y': 'xx'}), {'z': 'X'}),\n     (({'x': 2}, {'y': 'yy'}), {'z': None}),\n     (({'x': 2}, {'y': 'yy'}), {'z': 1.2}),\n     (({'x': 2}, {'y': 'yy'}), {'z': 'X'}),\n     (({'x': 3}, {'y': 'zz'}), {'z': None}),\n     (({'x': 3}, {'y': 'zz'}), {'z': 1.2}),\n     (({'x': 3}, {'y': 'zz'}), {'z': 'X'})]\n\n    >>> loops2params(product(zip(x,y),z))\n    [{'x': 1, 'y': 'xx', 'z': None},\n     {'x': 1, 'y': 'xx', 'z': 1.2},\n     {'x': 1, 'y': 'xx', 'z': 'X'},\n     {'x': 2, 'y': 'yy', 'z': None},\n     {'x': 2, 'y': 'yy', 'z': 1.2},\n     {'x': 2, 'y': 'yy', 'z': 'X'},\n     {'x': 3, 'y': 'zz', 'z': None},\n     {'x': 3, 'y': 'zz', 'z': 1.2},\n     {'x': 3, 'y': 'zz', 'z': 'X'}]\n\nIf you want a parameter which is constant, use a length one list and put it in\nthe loops:\n\n::\n\n    >>> c=seq2dicts('c', ['const'])\n    >>> c\n    [{'c': 'const'}]\n    >>> loops2params(product(zip(x,y),z,c))\n    [{'a': 1, 'c': 'const', 'y': 'xx', 'z': None},\n     {'a': 1, 'c': 'const', 'y': 'xx', 'z': 1.2},\n     {'a': 1, 'c': 'const', 'y': 'xx', 'z': 'X'},\n     {'a': 2, 'c': 'const', 'y': 'yy', 'z': None},\n     {'a': 2, 'c': 'const', 'y': 'yy', 'z': 1.2},\n     {'a': 2, 'c': 'const', 'y': 'yy', 'z': 'X'},\n     {'a': 3, 'c': 'const', 'y': 'zz', 'z': None},\n     {'a': 3, 'c': 'const', 'y': 'zz', 'z': 1.2},\n     {'a': 3, 'c': 'const', 'y': 'zz', 'z': 'X'}]\n\nSo, as you can see, the general idea is that we do all the loops *before*\nrunning any workload, i.e. we assemble the parameter grid to be sampled before\nthe actual calculations. This has proven to be very practical as it helps\ndetecting errors early.\n\nYou may have noticed that the data structures and functions used here are so\nsimple that is almost not worth a package at all, but it is helpful to have the\nideas and the workflow packaged up in a central place.\n\nInstall\n-------\n\nvia pip\n```````\n\n::\n\n    $ pip3 install psweep\n\ndev install\n```````````\n\n::\n    \n    $ cd ~/soft/git\n    $ git clone https://github.com/elcorto/psweep\n\nand then::\n\n    $ export PYTHONPATH=~/soft/git/psweep:$PYTHONPATH\n\nor::\n\n    $ cd ~/soft/git/psweep\n\nfollowed by::\n    \n    $ export PYTHONPATH=$HOME/soft/lib/python3.5/site-packages:$PYTHONPATH\n    $ PYTHONUSERBASE=$HOME/soft pip3 install --user -e .\n\nor the same, but more verbose::\n    \n    $ export PYTHONPATH=$HOME/soft/lib/python3.5/site-packages:$PYTHONPATH\n    $ python3 setup.py install --prefix=~/soft",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/elcorto/psweep",
    "keywords": "parameter study sweep loop",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "psweep",
    "platform": "",
    "project_url": "https://pypi.org/project/psweep/",
    "release_url": "https://pypi.org/project/psweep/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "loop like a pro, make parameter studies fun",
    "version": "0.1.0"
  },
  "releases": {
    "0.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "66ffd0d3fc452c39fe5ec8f63ee5d622",
          "sha256": "9cd5cb280e486c02ac3f4728fef0e4c6f634746bab00386c23cf900f59b7ed79"
        },
        "downloads": 0,
        "filename": "psweep-0.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "66ffd0d3fc452c39fe5ec8f63ee5d622",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4542,
        "upload_time": "2017-06-09T13:14:54",
        "url": "https://files.pythonhosted.org/packages/ef/b3/cafef2a9ed0b5aad9543150a34451419863fd17f181241c8571b2bcfa9a8/psweep-0.0.0.tar.gz"
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "227748e90f74645df75da2ab19628ff8",
          "sha256": "d16ff4579e87ffeb9f51e55a4f9166704349e76bc849caf24fc711eded4cbfbf"
        },
        "downloads": 0,
        "filename": "psweep-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "227748e90f74645df75da2ab19628ff8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5217,
        "upload_time": "2017-09-20T13:16:18",
        "url": "https://files.pythonhosted.org/packages/46/d2/04316f21aa7c4d92d370a9e7efca5f9d714e68beb732bc336d1690feb95b/psweep-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "227748e90f74645df75da2ab19628ff8",
        "sha256": "d16ff4579e87ffeb9f51e55a4f9166704349e76bc849caf24fc711eded4cbfbf"
      },
      "downloads": 0,
      "filename": "psweep-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "227748e90f74645df75da2ab19628ff8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5217,
      "upload_time": "2017-09-20T13:16:18",
      "url": "https://files.pythonhosted.org/packages/46/d2/04316f21aa7c4d92d370a9e7efca5f9d714e68beb732bc336d1690feb95b/psweep-0.1.0.tar.gz"
    }
  ]
}