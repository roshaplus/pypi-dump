{
  "info": {
    "author": "Gabriela Surita",
    "author_email": "gsurita@loggi.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Redis Schematics\n================\n\n*Provides Redis persistence to Schematics models with cutomizable abstraction levels.*\n\n\nInstalling\n----------\n\nUsing pip::\n\n    pip install redis_schamatics\n\n\nQuickstart\n----------\n\n*Currently we only support a SimpleRedisMixin.*\n\n\n**Creating models with persistence**\n\nNote: you should include a pk, but don't bother setting it's value manually.\nWe can infer it from an ``id`` field or by setting a tuple of field names using\n``__unique_together__``.\n\n\n.. code-block:: python\n\n    from datetime import datetime, timedelta\n\n    from redis import StrictRedis\n    from redis_schematics import SimpleRedisMixin\n    from schematics import models, types\n\n\n    class IceCreamModel(models.Model, SimpleRedisMixin):\n        pk = types.StringType()  # Just include a pk\n        id = types.StringType()\n        flavour = types.StringType()\n        amount_kg = types.IntType()\n        best_before = types.DateTimeType()\n\n\n**Setting on Redis**\n\nSaving is simple as ``set()``.\n\n.. code-block:: python\n\n    vanilla = IceCreamModel(dict(\n        id='vanilla',\n        flavour='Sweet Vanilla',\n        amount_kg=42,\n        best_before=datetime.now() + timedelta(days=2),\n    ))\n\n   chocolate = IceCreamModel(dict(\n        id='chocolate',\n        flavour='Delicious Chocolate',\n        amount_kg=12,\n        best_before=datetime.now() + timedelta(days=3),\n    ))\n\n    vanilla.set()\n    chocolate.set()\n\n**Getting from Redis**\n\nThere are two basic ways to get an element from Redis: by pk or by value.\nYou can use the classmethods ``match_for_pk(pk)`` or ``match_for_values(**Kwargs)``\nor just simply ``match(**kwargs)`` to let us choose which one. Notice that the\nperformance from both methods is a lot different, so you may avoid matching\nfor values on high performance environments.\n\n.. code-block:: python\n\n    IceCreamModel.match_for_pk('vanilla')\n    IceCreamModel.match_for_values(amount__gte=30)\n\n    IceCreamModel.match(id='vanilla')  # match on pk\n    IceCreamModel.match(best_before__gte=datetime.now())  # match on values\n\n\n**Fetching all and filtering**\n\nYou can also use ``all()`` to deserialize all and filters. Notice that\nthis invlolves deserializing all stored objects.\n\n.. code-block:: python\n\n    IceCreamModel.all()\n    IceCreamModel.filter(amount__gte=30)\n\n\nRoadmap\n-------\n\n- [ ] Support a distributed Mixin with one key per field.\n- [ ] Consistent set of unit tests.\n- [ ] Support redis relationships between models.\n- [ ] Support transaction aware methods.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/loggi/proto-schematics",
    "keywords": "loggi,schematics,redis",
    "license": "Apache License (2.0)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "redis-schematics",
    "platform": "",
    "project_url": "https://pypi.org/project/redis-schematics/",
    "release_url": "https://pypi.org/project/redis-schematics/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Redis storage backend for schematics.",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cf0f6aa586d9c8cd4bb45bcd580e3ffd",
          "sha256": "0e67b08b49026025f085cab7bfc5dbc1d9dc767ea48b060a5eda24d6d0e20c29"
        },
        "downloads": 0,
        "filename": "redis_schematics-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cf0f6aa586d9c8cd4bb45bcd580e3ffd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6489,
        "upload_time": "2017-09-13T02:20:24",
        "url": "https://files.pythonhosted.org/packages/0c/78/85bfbf2689e1c6914d8ff8b05e7dd11234c3a87b420e0f3a64baf22ae0eb/redis_schematics-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "cf0f6aa586d9c8cd4bb45bcd580e3ffd",
        "sha256": "0e67b08b49026025f085cab7bfc5dbc1d9dc767ea48b060a5eda24d6d0e20c29"
      },
      "downloads": 0,
      "filename": "redis_schematics-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cf0f6aa586d9c8cd4bb45bcd580e3ffd",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6489,
      "upload_time": "2017-09-13T02:20:24",
      "url": "https://files.pythonhosted.org/packages/0c/78/85bfbf2689e1c6914d8ff8b05e7dd11234c3a87b420e0f3a64baf22ae0eb/redis_schematics-0.1.0.tar.gz"
    }
  ]
}