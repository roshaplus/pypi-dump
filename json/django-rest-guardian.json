{
  "info": {
    "author": "Ankur Jain",
    "author_email": "ankurj630@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Guardian\n[![Open Source Love](https://badges.frapsoft.com/os/mit/mit.svg?v=102)](https://github.com/ellerbrock/open-source-badge/)\n[![PyPI version](https://badge.fury.io/py/django-rest-guardian.svg)](https://badge.fury.io/py/django-rest-guardian)\n> The django-rest middleware on steroids.\n\n# Overview\nThe guardian is highly flexible middleware for the django-rest class based views. \n\nThe current issue with the django-rest permission is that they are applied at class level and hence making it difficult to have seprarate permissions for individual methods. The guardian solves this issue by providing method based authentication.\n\nSome reasons you might want to use Guardian:\n* It can be used to *authenticate the user*\n* It can be used to *authorize the payload*\n* Provides *method based authentications* as well as class based authentication.\n\n# Requirements\n* Python (2.x, 3.x)\n* Django (1.8+)\n* Django REST (3.x)\n\n# Installation\n\nInstall using `pip`...\n\n    pip install django-rest-guardian\n    \n# Example\n\nLet's take a look at a quick example of using **guardian** to build a simple middleware for authenticating user and authorizing payload.\n\n**1. User Authentication**\n\nCreate a Permssion class in your desired file eg: `app/permission.py` by inherinting the **permission** class from guardian module and overriding the **guard** method\n\n```python\nfrom django_rest_guardian.permission import AuthPermission\n\n# The method gets request as params and need to return True or False depicting whether the user is verified or not.\nclass UserAuthenticator(AuthPermission):\n    def guard(self, request):\n        if request.user_type == 'user':\n            return True\n        else:\n            return False\n        \n ```\n\nLet's use this permission in our view layer - `app/views.py`\n\n```python\nfrom rest_framework import status\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom app.permission import UserAuthenticator\nfrom django_rest_guardian import guardian\n\nclass UserView(APIView):\n    \n    @guardian(UserAuthenticator) # returns 401 if the UserAuthenticator returns False\n    def get(self, request):\n        print 'The user is authenticated if you are seeing this message'\n        \n        return Response({'result': True}, status=status.HTTP_200_OK)\n```\n\nWe can also have multiple authenticator classes. So now let's create one more class and pass it to the guardian\n\n`app/permission.py`\n\n```python\nfrom django_rest_guardian.permission import AuthPermission\n\nclass UserAuthenticator(AuthPermission):\n    def guard(self, request):\n        if request.user_type == 'user':\n            return True\n        else:\n            return False\n        \n class AdminAuthenticator(AuthPermission):\n    def guard(self, request):\n        if request.user_type == 'admin':\n            return True\n        else:\n            return False\n        \n ```\n \n The guardian uses a logical **short circut OR** on the both the authenticator class.\n \n `app/views.py`\n \n ```python\n class UserView(APIView):\n    \n    @guardian(UserAuthenticator, AdminAuthenticator) # returns 401 if the UserAuthenticator returns False\n    def get(self, request):\n        print 'The user is authenticated if you are seeing this message'\n        \n        return Response({'result': True}, status=status.HTTP_200_OK)\n```\n\n**2. Payload Authorization**\n \n The guardian can also be used to to authorize the payload sent by the frontend.\n Let's assume this is the payload sent by the frontend\n \n ```javascript\n {\n    \"id\": 5,\n    \"name\": \"John\",\n    \"hobbies\": [\"Footbal\", \"Fencing\"]\n }\n \n ```\n \n Let's verify the payload\n \n `app/views.py`\n \n ```python\n class UserView(APIView):\n    \n    # returns 400 if the payload is invalid\n    @guardian(id=int, name=unicode, hobbies=list) # we use unicode because python treats the string as unicode for data.\n    def post(self, request):\n        print 'The payload is correct if you are seeing this message'\n        \n        return Response({'result': True}, status=status.HTTP_200_OK)\n```\n\n# More Stuff\n\n**1. Both user authentication and payload verification**\n\nWe can use user auth and payload verification both at the same time\n`app/views.py`\n\n \n ```python\n class UserView(APIView):\n   \n    @guardian(UserAuthenticator, AdminAuthenticator, id=int, name=unicode, hobbies=list)\n    def post(self, request):\n        print 'The user is authenticated and the payload is correct if you are seeing this message'\n        \n        return Response({'result': True}, status=status.HTTP_200_OK)\n```\n \n \n**2. Pass additional parameter with request**\n\nWe can pass additional parameter with request to views layer\n\n`app/permission.py`\n\n```python\nfrom django_rest_guardian.permission import AuthPermission\n\nclass UserAuthenticator(AuthPermission):\n    def guard(self, request):\n        if request.user_type == 'user':\n            request.user = 'simon' # adding <user> param to request and returning it.\n            return True, request\n        else:\n            return False\n```\n\nNow we can access this parameter in view layer `app/views.py` \n\n ```python\n class UserView(APIView):\n   \n    @guardian(UserAuthenticator)\n    def post(self, request):\n        print request.user # prints 'simon'\n        \n        return Response({'result': True}, status=status.HTTP_200_OK)\n```\n\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/droidlife/guardian",
    "keywords": "",
    "license": "LICENSE",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-guardian",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rest-guardian/",
    "release_url": "https://pypi.org/project/django-rest-guardian/1.0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A django rest middleware which can be used on individual methods of APIViews. The middleware includes user authentication and payload verification",
    "version": "1.0.2"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "44db7eb0b0902ebfe1c954afeec3a438",
          "sha256": "3d4c442d78e11f72846ccf43d8c261d0e82a525cbf4d0a6579c94a476b5f845f"
        },
        "downloads": 0,
        "filename": "django_rest_guardian-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "44db7eb0b0902ebfe1c954afeec3a438",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2803,
        "upload_time": "2017-09-27T20:22:06",
        "url": "https://files.pythonhosted.org/packages/83/4e/17ab8f11a6c8706858589bbf89d872ba1060e344eb3a9b09d5017cc58e35/django_rest_guardian-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "88776755dba51598963539f84b16c663",
          "sha256": "62a76bf8fe4688c84ccf916be739364afb6c1de208a6421fab08e8676835b46a"
        },
        "downloads": 0,
        "filename": "django_rest_guardian-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "88776755dba51598963539f84b16c663",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2873,
        "upload_time": "2017-09-28T06:00:16",
        "url": "https://files.pythonhosted.org/packages/85/99/86bcf46d547f4374597a4c4ae90bc8f08bf2cecf2dc919cf0f519623afb5/django_rest_guardian-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "05327643ce5c9bef5fc2fb67fa6ebe73",
          "sha256": "66d38219b0d21038419fc424375e9987b0d75e37993b4c57aa7c9425f1b92c7f"
        },
        "downloads": 0,
        "filename": "django_rest_guardian-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "05327643ce5c9bef5fc2fb67fa6ebe73",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4052,
        "upload_time": "2017-09-28T11:48:19",
        "url": "https://files.pythonhosted.org/packages/79/b9/b4af649ca80c88808a60d18abf8cbf5a02781123020dffca9cc06c1b04cf/django_rest_guardian-1.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "05327643ce5c9bef5fc2fb67fa6ebe73",
        "sha256": "66d38219b0d21038419fc424375e9987b0d75e37993b4c57aa7c9425f1b92c7f"
      },
      "downloads": 0,
      "filename": "django_rest_guardian-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "05327643ce5c9bef5fc2fb67fa6ebe73",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4052,
      "upload_time": "2017-09-28T11:48:19",
      "url": "https://files.pythonhosted.org/packages/79/b9/b4af649ca80c88808a60d18abf8cbf5a02781123020dffca9cc06c1b04cf/django_rest_guardian-1.0.2.tar.gz"
    }
  ]
}