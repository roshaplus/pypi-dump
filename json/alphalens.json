{
  "info": {
    "author": "Quantopian Inc.",
    "author_email": "opensource@quantopian.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Office/Business :: Financial",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Utilities"
    ],
    "description": ".. image:: https://media.quantopian.com/logos/open_source/alphalens-logo-03.png\n    :align: center\n\nAlphalens\n=========\n.. image:: https://travis-ci.org/quantopian/alphalens.svg?branch=master\n    :target: https://travis-ci.org/quantopian/alphalens\n   \n    \nAlphalens is a Python Library for performance analysis of predictive\n(alpha) stock factors. Alphalens works great with the\n`Zipline <http://zipline.io/>`__ open source backtesting library, and\n`Pyfolio <https://github.com/quantopian/pyfolio>`__ which provides\nperformance and risk analysis of financial portfolios.\n\nThe main function of Alphalens is to surface the most relevant statistics\nand plots about an alpha factor, including:\n\n-  Returns Analysis\n-  Information Coefficient Analysis\n-  Turnover Analysis\n-  Grouped Analysis\n\nGetting started\n---------------\n\nWith a signal and pricing data creating a factor \"tear sheet\" is a two step process:\n\n.. code:: python\n\n    import alphalens\n    \n    # Ingest and format data\n    factor_data = alphalens.utils.get_clean_factor_and_forward_returns(my_factor, \n                                                                       pricing, \n                                                                       quantiles=5,\n                                                                       groupby=ticker_sector,\n                                                                       groupby_labels=sector_names)\n\n    # Run analysis\n    alphalens.tears.create_full_tear_sheet(factor_data)\n\n\nLearn more\n----------\n\nCheck out the `example notebooks <https://github.com/quantopian/alphalens/tree/master/alphalens/examples>`__ for more on how to read and use\nthe factor tear sheet.\n\nInstallation\n------------\n\nStable release\n\n::\n\n    pip install alphalens\n\nDevelopment code\n\n::\n\n    pip install git+https://github.com/quantopian/alphalens\n\nAlphalens depends on:\n\n-  `matplotlib <https://github.com/matplotlib/matplotlib>`__\n-  `numpy <https://github.com/numpy/numpy>`__\n-  `pandas <https://github.com/pydata/pandas>`__\n-  `scipy <https://github.com/scipy/scipy>`__\n-  `seaborn <https://github.com/mwaskom/seaborn>`__\n-  `statsmodels <https://github.com/statsmodels/statsmodels>`__\n\nUsage\n-----\n\nA good way to get started is to run the examples in a `Jupyter\nnotebook <http://jupyter.org/>`__.\n\nTo get set up with an example, you can:\n\nRun a Jupyter notebook server via:\n\n.. code:: bash\n\n    jupyter notebook\n\nFrom the notebook list page(usually found at\n``http://localhost:8888/``), navigate over to the examples directory,\nand open any file with a .ipynb extension.\n\nExecute the code in a notebook cell by clicking on it and hitting\nShift+Enter.\n\nQuestions?\n----------\n\nIf you find a bug, feel free to open an issue on our `github\ntracker <https://github.com/quantopian/alphalens/issues>`__.\n\nContribute\n----------\n\nIf you want to contribute, a great place to start would be the\n`help-wanted\nissues <https://github.com/quantopian/alphalens/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22>`__.\n\nCredits\n-------\n\n-  `Andrew Campbell <https://github.com/a-campbell>`__\n-  `James Christopher <https://github.com/jameschristopher>`__\n-  `Thomas Wiecki <https://github.com/twiecki>`__\n-  `Jonathan Larkin <https://github.com/marketneutral>`__\n-  Jessica Stauth (jstauth@quantopian.com)\n-  `Taso Petridis <https://github.com/tasopetridis>`_\n\nFor a full list of contributors see the `contributors page. <https://github.com/quantopian/alphalens/graphs/contributors>`_\n\nExample Tear Sheet\n------------------\n\nExample factor courtesy of `ExtractAlpha <http://extractalpha.com/>`_\n\n.. image:: https://github.com/quantopian/alphalens/raw/master/alphalens/examples/table_tear.png\n.. image:: https://github.com/quantopian/alphalens/raw/master/alphalens/examples/returns_tear.png\n.. image:: https://github.com/quantopian/alphalens/raw/master/alphalens/examples/ic_tear.png\n.. image:: https://github.com/quantopian/alphalens/raw/master/alphalens/examples/sector_tear.png\n    :alt:\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/quantopian/alphalens",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "alphalens",
    "platform": "",
    "project_url": "https://pypi.org/project/alphalens/",
    "release_url": "https://pypi.org/project/alphalens/0.2.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Performance analysis of predictive (alpha) stock factors",
    "version": "0.2.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "587d14abf665b532444f41620a63bc66",
          "sha256": "7151fde45b5e2a00f3d65fffe389ea841199859cc998ce3819e9bcbf97ddc756"
        },
        "downloads": -1,
        "filename": "alphalens-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "587d14abf665b532444f41620a63bc66",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12296457,
        "upload_time": "2017-03-13T22:26:29",
        "url": "https://files.pythonhosted.org/packages/43/72/570157195c53a4c7aed524cf902cc51f1a3d129ba6604f1daecbbbc32904/alphalens-0.1.0.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b7d77d9f009068f77ab8372e02b52165",
          "sha256": "450a970b03ec17a1885b4a31620e7f29fdf74e941407116b5e5e79a4470a90fb"
        },
        "downloads": -1,
        "filename": "alphalens-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b7d77d9f009068f77ab8372e02b52165",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12662351,
        "upload_time": "2017-10-06T11:05:22",
        "url": "https://files.pythonhosted.org/packages/ef/1b/a032de8d97ba6cd0bfe661e8a488650a2f8c38525dcc841f8c5cb00fb13a/alphalens-0.1.2.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c21e4f03a07a987d97e974c9f4a37554",
          "sha256": "71e8136d3f5142609905a905d25b349c9b8d50f1df327fe6921398d84fc96a0b"
        },
        "downloads": -1,
        "filename": "alphalens-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c21e4f03a07a987d97e974c9f4a37554",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9381840,
        "upload_time": "2017-11-23T12:42:07",
        "url": "https://files.pythonhosted.org/packages/21/bd/9d59b14cc9cb680349266d6578ccd3e5de768afe0cd650eafebc66c0c9a7/alphalens-0.2.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c21e4f03a07a987d97e974c9f4a37554",
        "sha256": "71e8136d3f5142609905a905d25b349c9b8d50f1df327fe6921398d84fc96a0b"
      },
      "downloads": -1,
      "filename": "alphalens-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c21e4f03a07a987d97e974c9f4a37554",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9381840,
      "upload_time": "2017-11-23T12:42:07",
      "url": "https://files.pythonhosted.org/packages/21/bd/9d59b14cc9cb680349266d6578ccd3e5de768afe0cd650eafebc66c0c9a7/alphalens-0.2.1.tar.gz"
    }
  ]
}