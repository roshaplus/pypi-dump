{
  "info": {
    "author": "Boudhayan Banerjee, Evan 'Pete' Walsh",
    "author_email": "ronnie@structurely.com, epwalsh@structurely.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Coupled simulated annealing\n===========================\n\n|Build Status|\n|PyPI|\n\nThe original paper describing Coupled Simulated Annealing (CSA) can be\nfound here:\n\nftp://ftp.esat.kuleuven.be/sista/sdesouza/papers/CSA2009accepted.pdf\n\nEssentially, CSA is like multiple simulated annealing (i.e. ``m``\nindependent SA processes run in parallel), except that the acceptance\nprobability at each step is calculated as a function of the current\nstate across *all* ``m`` processes. For a more complete description of\nthe general CSA algorithm, see `Description of\nCSA <#description-of-csa>`__ below.\n\nInstallation\n------------\n\nUsing ``pip``:\n\n::\n\n    pip install pycsa\n\nDirectly from ``GitHub``:\n\n::\n\n    pip install -e git+https://github.com/structurely/csa.git\n\nUsage\n-----\n\nSee\n`examples/travelling\\_salesman.ipynb <https://github.com/structurely/csa/blob/master/examples/travelling_salesman.ipynb>`__\nfor an example of CSA applied to the `travelling salesman problem\n(TSP) <https://en.wikipedia.org/wiki/Travelling_salesman_problem>`__.\n\nContributing\n------------\n\nFeel free to submit pull requests and issues.\n\nLicense\n-------\n\nSee\n`LICENSE.txt <https://github.com/structurely/csa/blob/master/LICENSE.txt>`__.\n\nRelated\n-------\n\n-  `perrygeo/simanneal <https://github.com/perrygeo/simanneal>`__: a\n   Python implementation of (single) simulated annealing.\n-  `docs.scipy.org <https://docs.scipy.org/doc/scipy-0.15.1/reference/generated/scipy.optimize.anneal.html>`__:\n   the SciPy implementation of simulated annealing.\n\nDescription of CSA\n------------------\n\nSuppose we are trying optimize (meaning minimize, in this case) some\nfunction ``my_function()`` which takes ``x`` as input and outputs a\nfloat.\n\nWe are going to run ``m`` processes in parallel. Therefore ``x_i`` will\ndenote the current solution for the ``m``\\ th process.\n\nDefinitions\n~~~~~~~~~~~\n\nBefore describing the algorithm, we will need to define the following\nfunctions and parameters:\n\n-  ``energy_func(tac, ...)`` is a function which takes ``tac`` (the\n   acceptance \"temperature\") and the quantities\n   ``my_function(x_1), ..., my_function(x_m)`` as input and outputs a\n   float. That is, ``energy_func`` represents the \"energy\" of the\n   current solution set ``x_1, ..., x_m``.\n-  ``generation_schedule(tgen, iteration)`` is a function which takes\n   ``tgen`` (the generation \"temperature\") and the number of the current\n   iteration as input. The ``generation_schedule`` function determines\n   how much ``tgen`` is decreased at each iteration. A typical choice\n   for ``generation_schedule`` is just to multiply the current value of\n   ``tgen`` by 0.9999.\n-  ``default_tgen`` is the initial value given to ``tgen``.\n-  ``acceptance_schedule(tac, iteration)`` is a function which takes\n   ``tac`` (the acceptance \"temperature\") and the number of the current\n   iteration as input. This function determines how much ``tac`` will be\n   decreased at each iteration. A typical choice for\n   ``acceptance_schedule`` is just to multiply ``tac`` by 0.99.\n-  ``default_tac`` is the initial value given to ``tac``.\n-  ``random_probe(i, tgen)`` is a function which produces a random value\n   for each ``x_i`` according to some distribution which depends on\n   ``tgen``.\n-  ``acceptance_prob(tac, current_state, x_i, y_i)`` is a function that\n   outputs a number between 0 and 1.\n-  ``n`` the number of inner iterations (how many times we repeat steps\n   2 and 3 over each overall iteration).\n-  ``N`` the number of outer iterations.\n\n    NOTE: The choices for ``energy_func()``, ``generation_schedule()``,\n    ``acceptance_schedule()``, and ``random_probe()`` are what\n    distinguish the particular classes of CSA algorithms.\n\nThe algorithm\n~~~~~~~~~~~~~\n\n1. **Initialization**\n\n-  Assign random initial solutions to ``x_1``, ..., ``x_m``.\n-  Let ``gamma = energy_func(my_function(x_1), ..., my_function(x_m))``.\n-  Set ``tgen = default_tgen``.\n-  Set ``tac = default_tac``.\n-  Set the inner iteration index ``j = 0``.\n-  Set the outer iteration index ``k = 0``.\n\n2. **Generation**\n\n-  For each ``i in (1, ..., m)``:\n\n   -  Generate a \"probing\" solution ``y_i = x_i + e``, where ``e`` is\n      randomly generated from the function ``random_probe(i, tgen)``.\n\n3. **Acceptance**\n\n-  For each ``i in (1, ..., m)``:\n\n   -  If ``my_function(y_i) < my_function(x_i)``, set ``x_i = y_i``.\n   -  Else, set ``p = acceptance_prob(gamma, x_i, y_i)``. Then sample\n      ``r`` from a uniform(0, 1) distribution and set ``x_i = y_i`` if\n      ``r < p``, otherwise keep ``x_i = x_i``.\n\n-  Now update\n   ``gamma = energy_func(my_function(x_1), ..., my_function(x_m))``.\n-  Increment ``j += 1``.\n-  If ``j < n``, go back to step 2, otherwise set ``j = 0`` and continue\n   to step 4.\n\n4. **Cooling**\n\n-  Decrease the \"temperatures\" ``tgen`` and ``tac`` according to their\n   respective schedules, i.e. we set\n   ``tgen = generation_schedule(tgen, k)`` and\n   ``tac = acceptance_schedule(tac, k)``.\n-  Increment ``k += 1``.\n\n5. **Stop**\n\n-  Stop if the stopping criteria is met or if ``k >= N``. Otherwise\n   return to step 2.\n\n.. |Build Status| image:: https://travis-ci.org/structurely/csa.svg?branch=dev\n   :target: https://travis-ci.org/structurely/csa\n\n.. |PyPI| image:: https://badge.fury.io/py/pycsa.svg\n    :target: https://badge.fury.io/py/pycsa",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/structurely/csa",
    "keywords": "csa,sa,simulated annealing,annealing,coupled simulated annealing",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycsa",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pycsa/",
    "release_url": "https://pypi.org/project/pycsa/0.1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python implementation of coupled simulated annealing (CSA)",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "490e3392ef5ec0843be96aae3a506e5a",
          "sha256": "b039478262e7c5a823a3603ec6c96460dc191dc50d4109ffdd9a077bac657862"
        },
        "downloads": 0,
        "filename": "pycsa-0.1.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "490e3392ef5ec0843be96aae3a506e5a",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 8315,
        "upload_time": "2017-06-28T19:23:23",
        "url": "https://files.pythonhosted.org/packages/b3/b2/6a3b45e7dd412e5ec88b5eaf516a1df69ed6fa44e5380ae22b557050de37/pycsa-0.1.1-py2-none-any.whl"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ba486c76cdff626908982d2f19040a76",
          "sha256": "9c3d87369d0c824e7531a46d1d6383adbea95f536900ff623a408c9c8574f647"
        },
        "downloads": 0,
        "filename": "pycsa-0.1.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba486c76cdff626908982d2f19040a76",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 8488,
        "upload_time": "2017-06-28T20:32:31",
        "url": "https://files.pythonhosted.org/packages/0c/22/6991c90d338ec8cf6a8ab41914c1ffcd489675de2d3da5615c17864671b5/pycsa-0.1.2-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ec3aedcf0b09d4c1eb4732135bbc33ad",
          "sha256": "341392c776595f163816739da6ed67390787ec7623a5c93ade3f921ec78e6395"
        },
        "downloads": 0,
        "filename": "pycsa-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ec3aedcf0b09d4c1eb4732135bbc33ad",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5582,
        "upload_time": "2017-06-29T16:56:30",
        "url": "https://files.pythonhosted.org/packages/85/8c/3786cf4cda8fff5388308afd9bdb39195f4966f6331ba43612e7760152a7/pycsa-0.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ba486c76cdff626908982d2f19040a76",
        "sha256": "9c3d87369d0c824e7531a46d1d6383adbea95f536900ff623a408c9c8574f647"
      },
      "downloads": 0,
      "filename": "pycsa-0.1.2-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "ba486c76cdff626908982d2f19040a76",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 8488,
      "upload_time": "2017-06-28T20:32:31",
      "url": "https://files.pythonhosted.org/packages/0c/22/6991c90d338ec8cf6a8ab41914c1ffcd489675de2d3da5615c17864671b5/pycsa-0.1.2-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "ec3aedcf0b09d4c1eb4732135bbc33ad",
        "sha256": "341392c776595f163816739da6ed67390787ec7623a5c93ade3f921ec78e6395"
      },
      "downloads": 0,
      "filename": "pycsa-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ec3aedcf0b09d4c1eb4732135bbc33ad",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5582,
      "upload_time": "2017-06-29T16:56:30",
      "url": "https://files.pythonhosted.org/packages/85/8c/3786cf4cda8fff5388308afd9bdb39195f4966f6331ba43612e7760152a7/pycsa-0.1.2.tar.gz"
    }
  ]
}