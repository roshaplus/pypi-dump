{
  "info": {
    "author": "Fabio Manganiello",
    "author_email": "info@fabiomanganiello.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Topic :: Utilities"
    ],
    "description": "Platypush\n=========\n\nExecute any command or custom complex logic on your devices, wherever they are, using your PushBullet account.\n\nInstallation\n------------\n\n```shell\npip install platypush\n```\n\n### Manual Installation\n\n```shell\ngit clone https://github.com/BlackLight/platypush\ncd platypush\npython setup.py install\n```\n\nConfiguration\n-------------\n\nCopy /etc/platypush/config.example.yaml to /etc/platypush/config.yaml (system-wise settings) or ~/.config/platypush/config.yaml (user-wise settings).\n\nEdit the file to include:\n\n### For the PushBullet backend\n\n* Your PushBullet access token (create one [here](https://www.pushbullet.com/#settings/account));\n* The name of the (virtual) PushBullet device used to listen for events (create one [here](https://www.pushbullet.com/#devices)).\n\n### For the Apache Kafka backend\n\n* The host and port of the Kafka installation\n* The topic that will be used to deliver and process messages\n\n### For the local socket backend\n\n* The name of the local FIFO that will be used to deliver and process messages\n\n### device_id\n\nEach target device is identified by a unique device_id in the messages sent over your account. The device_id is the hostname by default, unless changed in config.yaml.\n\nShell interface\n---------------\n\n`platypush` installs `pusher`, a command-line tool to send PushBullet messages to the connected devices in the format used by platypush.\n\nSome examples:\n\n```shell\npusher --target laptop --action shell.exec --cmd \"scp /home/user/photos/*.jpg backup_host:/mnt/hd/photos\"\npusher --target raspberrypi --action music.mpd.play\n```\n\nThe logic to execute is specified by the `--action` option, whose format is `package_name.method_name` (with method_name part of the package main class).\n\nAvailable plugins\n-----------------\n\n* `platypush.plugins.shell`: The simplest and yet most versatile plugin. Executes a remote command on the host identified by the `--target` device_id. Example:\n\n```shell\npusher --target laptop --action shell.exec --cmd \"scp /home/user/photos/*.jpg backup_host:/mnt/hd/photos\"\n```\n\n* `platypush.plugins.music.mpd`: Controls the playback on a mpd/mopidy music server. Requires the package `mpd2` on the target machine. Example:\n\n```shell\npusher --target raspberry --action music.mpd.play\n```\n\nConfigure the plugin through an entry like this in your `config.yaml`:\n\n```yaml\nmusic.mpd:\n    host: your_mpd_host\n    port: 6600\n```\n\n* `platypush.plugins.switch.wemo`: Controls a WeMo Switch smart switch device. Requires the package `ouimeaux` on the target machine. Example:\n\n```shell\npusher --target raspberry --action switch.wemo.on\n```\n\n* `platypush.plugins.light.hue`: Controls a Philips Hue smart lights system. Requires the package `phue` on the target machine. Example:\n\n```shell\npusher --target raspberry --action light.hue.scene --name \"Sunset\" --group \"Living Room\"\n```\n\nWriting your plugins\n--------------------\n\nWriting your own `platypush` plugin, that would execute your own custom logic whenever a bullet with your plugin name is received, is a very simple task.\n\n1. Create your plugin directory under `platypush/plugins` (e.g. `light/batsignal`).\n\n2. In the case above, `platypush.plugins.light.batsignal` will be your package name.\n\n3. Create an `__init__.py` under `platypush/plugins/light/batsignal`.\n\n4. If your module is `light/batsignal`, then its main class should be named `LightBatsignalPlugin`.\n\n5. The configuration for your module will be read from a section named `light.batsignal` from your `config.yaml`, the attributes are accessible in your class in `self.config`.\n\nThe `__init__.py` will look like this:\n\n```python\nimport batman\n\nfrom .. import LightPlugin\n\nclass LightBatsignalPlugin(LightPlugin):\n    def _init(self):\n        self.batsignal = batman.Batsignal(self.config['intensity'])\n\n    def on(self, urgent=False):\n        if urgent:\n            self.batsignal.notify_robin()\n\n        self.batsignal.on()\n\n    def off(self):\n        self.batsignal.off()\n\n    def toggle(self):\n        self.batsignal.toggle()\n\n    def status(self):\n        return [self.batsignal.status().stdout, self.batsignal.status().stderr]\n```\n\n6. It's a good practice to define a `status` method in your plugin, which returns a 2-items list like `[output, error]`.\n\n7. Rebuild and reinstall `platypush` if required and relaunch it.\n\n8. Test your new plugin by sending some bullets to it:\n\n```shell\npusher --target your_pc --action light.batsignal.on --urgent 1\n```\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/BlackLight/platypush",
    "keywords": "pushbullet notifications automation",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "platypush",
    "platform": "",
    "project_url": "https://pypi.org/project/platypush/",
    "release_url": "https://pypi.org/project/platypush/0.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Platypush service",
    "version": "0.3"
  },
  "releases": {
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a197b24bfcd1db7ff12e59ddff83876f",
          "sha256": "25c949742e801688274739ace8065e2a5392dd390b8f7f478f92e5072b84a545"
        },
        "downloads": -1,
        "filename": "platypush-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a197b24bfcd1db7ff12e59ddff83876f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10200,
        "upload_time": "2017-12-11T21:05:19",
        "url": "https://files.pythonhosted.org/packages/bc/d6/034145ccd0fc870e9a3774f0cdb1a37d4cf833d7c7d693013983da1001df/platypush-0.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a197b24bfcd1db7ff12e59ddff83876f",
        "sha256": "25c949742e801688274739ace8065e2a5392dd390b8f7f478f92e5072b84a545"
      },
      "downloads": -1,
      "filename": "platypush-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a197b24bfcd1db7ff12e59ddff83876f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10200,
      "upload_time": "2017-12-11T21:05:19",
      "url": "https://files.pythonhosted.org/packages/bc/d6/034145ccd0fc870e9a3774f0cdb1a37d4cf833d7c7d693013983da1001df/platypush-0.3.tar.gz"
    }
  ]
}