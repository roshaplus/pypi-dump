{
  "info": {
    "author": "Eric Busboom",
    "author_email": "eric@civicknowledge.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Debuggers",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Row Generators\n==============\n\nNote: This library is a hasily seperated part of a larger system, and isn't really packaged and documented\nfor external use.\n\nPython classes for generating rows from a variety of file formats. The `RowGenerator` class creates internal\niterators for these file types:\n\n* CSV\n* TSV\n* Fixed width text files\n* XLS\n* XLSX\n* Google spreadsheets\n* Socrata datasets\n* Shapefiles\n\nThere are also internal iterators for other types that are not acessible from `RowGenerator`:\n\n* Pandas dataframes\n* ASPW cursors\n* Ambry partitions\n\n\nThe `RowGenerator` constructor can take these configuration parameters: \n\n* `name` An optional name for the source\n* `url` A Url reference to the file, or a local file system path\n* `file` A reference to an internal file in a Zip archive. May a string, or a regular expression.\n* `sheet` A reference to a worksheet in a spreadsheet. May be a string or a number\n* `urltype` One of http, https, gs, socrata. Forces how the URL is interpreted. Only 'socrata' is really \n        needed\n* `filetype` Forces the file type, which is usually taked from the file extension. May be any \n        typical `extension` string. \n* `urlfiletype` Like filetype, but for when the URL refers to a zip archive. \n* `encoding` The file encoding.\n* `columns` A list or tuple of ColumnSpec objects, for FixedSource\n\nThe `url` can have a fragment to indicate which file to access in a zip file, which worksheet to use in a\nspreadsheet, or both.\n\n* `http://.../foo.zip#<file>`. `<file>` is a regular expression that matches a file in the archive. The first match is used\n* `http://.../foo.xls#<worksheet>` `<worksheet>` is the name or number of a worksheet in a spreadsheet\n* `http://.../foo.zip#<file>;<worksheet>` `<file>` is a regular expression for a spreadsheet in the zip file, and\n`<worksheet`> is the name or number of the worksheet.\n\nThe `<file> fragement parameter sets the `file` parameter of `RowGenerator`, and `<worksheet>` sets the `segment`\nparameter. Both can be set as parameters instead of in the URL.\n\n\nThe only value that is really necessary for the `urlfiletype` parameter is 'socrata' which indicates that the\nURL should be interpreted as a Socrata site\n\n\nSimple access with a URL\n\n.. code-block:: python\n\n    rg = RowGenerator(url='http://public.source.civicknowledge.com/example.com/basics/integers.csv')\n\n    for row in rg:\n        print row\n\n\nUse URL fragments to access a file in a ZIP archive.\n\n.. code-block:: python\n\n    rg = RowGenerator(url='http://.../test_data.zip#simple-example.csv')\n\n\nSet the encoding for the file:\n\n.. code-block:: python\n\n    rg = RowGenerator(encoding='utf-8',\n               url='http://.../test_data.zip#simple-example.csv')\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Metatab/rowgenerator.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rowgenerators",
    "platform": "",
    "project_url": "https://pypi.org/project/rowgenerators/",
    "release_url": "https://pypi.org/project/rowgenerators/0.7.8/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Generate row data from a variety of file formats",
    "version": "0.7.8"
  },
  "releases": {
    "0.7.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "942c6aa80ba9f517c0e5ea0407649170",
          "sha256": "a108c9fc50e8971166c3757e5558b65c39ecedb6f25c9362daf5bd344e76b2d9"
        },
        "downloads": -1,
        "filename": "rowgenerators-0.7.7.tar.gz",
        "has_sig": false,
        "md5_digest": "942c6aa80ba9f517c0e5ea0407649170",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20513,
        "upload_time": "2017-11-18T01:58:01",
        "url": "https://files.pythonhosted.org/packages/e9/42/a0948077b52fb5b522fab70cfc657251db956ac4a071ff9c249f6eda4c73/rowgenerators-0.7.7.tar.gz"
      }
    ],
    "0.7.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bfbec699bc3b93edc687661dc72bc0d1",
          "sha256": "dcf50783296a7ae641814c402b0611313c2ca35ef7384d5b9b2067c8f7a5fe55"
        },
        "downloads": -1,
        "filename": "rowgenerators-0.7.8.tar.gz",
        "has_sig": false,
        "md5_digest": "bfbec699bc3b93edc687661dc72bc0d1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20191,
        "upload_time": "2017-11-18T04:43:57",
        "url": "https://files.pythonhosted.org/packages/7d/2f/ac4a402d49805c2c9fac9fd06d1402b98376104fe58e97139efadde2650d/rowgenerators-0.7.8.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "bfbec699bc3b93edc687661dc72bc0d1",
        "sha256": "dcf50783296a7ae641814c402b0611313c2ca35ef7384d5b9b2067c8f7a5fe55"
      },
      "downloads": -1,
      "filename": "rowgenerators-0.7.8.tar.gz",
      "has_sig": false,
      "md5_digest": "bfbec699bc3b93edc687661dc72bc0d1",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 20191,
      "upload_time": "2017-11-18T04:43:57",
      "url": "https://files.pythonhosted.org/packages/7d/2f/ac4a402d49805c2c9fac9fd06d1402b98376104fe58e97139efadde2650d/rowgenerators-0.7.8.tar.gz"
    }
  ]
}