{
  "info": {
    "author": "Eric Busboom",
    "author_email": "eric@civicknowledge.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Debuggers",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Row Generators\n==============\n\nNote: This library is a hasily seperated part of a larger system, and isn't really packaged and documented\nfor external use.\n\nPython classes for generating rows from a variety of file formats. The `RowGenerator` class creates internal\niterators for these file types:\n\n* CSV\n* TSV\n* Fixed width text files\n* XLS\n* XLSX\n* Google spreadsheets\n* Socrata datasets\n* Shapefiles\n\nThere are also internal iterators for other types that are not acessible from `RowGenerator`:\n\n* Pandas dataframes\n* ASPW cursors\n* Ambry partitions\n\n\nThe `RowGenerator` constructor can take these configuration parameters: \n\n* `name` An optional name for the source\n* `url` A Url reference to the file, or a local file system path\n* `file` A reference to an internal file in a Zip archive. May a string, or a regular expression.\n* `sheet` A reference to a worksheet in a spreadsheet. May be a string or a number\n* `urltype` One of http, https, gs, socrata. Forces how the URL is interpreted. Only 'socrata' is really \n        needed\n* `filetype` Forces the file type, which is usually taked from the file extension. May be any \n        typical `extension` string. \n* `urlfiletype` Like filetype, but for when the URL refers to a zip archive. \n* `encoding` The file encoding.\n* `columns` A list or tuple of ColumnSpec objects, for FixedSource\n\nThe `url` can have a fragment to indicate which file to access in a zip file, which worksheet to use in a\nspreadsheet, or both.\n\n* `http://.../foo.zip#<file>`. `<file>` is a regular expression that matches a file in the archive. The first match is used\n* `http://.../foo.xls#<worksheet>` `<worksheet>` is the name or number of a worksheet in a spreadsheet\n* `http://.../foo.zip#<file>;<worksheet>` `<file>` is a regular expression for a spreadsheet in the zip file, and\n`<worksheet`> is the name or number of the worksheet.\n\nThe `<file> fragement parameter sets the `file` parameter of `RowGenerator`, and `<worksheet>` sets the `segment`\nparameter. Both can be set as parameters instead of in the URL.\n\n\nThe only value that is really necessary for the `urlfiletype` parameter is 'socrata' which indicates that the\nURL should be interpreted as a Socrata site\n\n\nSimple access with a URL\n\n.. code-block:: python\n\n    rg = RowGenerator(url='http://public.source.civicknowledge.com/example.com/basics/integers.csv')\n\n    for row in rg:\n        print row\n\n\nUse URL fragments to access a file in a ZIP archive.\n\n.. code-block:: python\n\n    rg = RowGenerator(url='http://.../test_data.zip#simple-example.csv')\n\n\nSet the encoding for the file:\n\n.. code-block:: python\n\n    rg = RowGenerator(encoding='utf-8',\n               url='http://.../test_data.zip#simple-example.csv')\n\nApplication Urls\n================\n\n\n.. image:: https://travis-ci.org/Metatab/appurl.svg?branch=master\n    :target: https://travis-ci.org/Metatab/appurl\n\nApplication Urls provide structure and operations on URLS where the file the\nURL refers to can't, in general, simply be downloaded. For instance, you may\nwant to refer to a CSV file inside a ZIP archive, or a worksheet in an Excel\nfile. In conjunction with `Row Generators\n<https://github.com/CivicKnowledge/rowgenerators>`_, Application Urls are often\nused to refer to tabular data stored on data repositories. For instance:\n\n-  Stored on the web: ``http://examples.com/file.csv``\n-  Inside a zip file on the web: ``http://example.com/archive.zip#file.csv``\n-  A worksheet in an Excel file: ``http://example.com/excel.xls#worksheet``\n-  A worksheet in an Excel file in a ZIP Archive:\n   ``http://example.com/archive.zip#excel.xls;worksheet``\n-  An API: ``socrata+http://chhs.data.ca.gov/api/views/tthg-z4mf``\n\n\nInstall\n*******\n\n\n.. code-block:: bash\n\n    $ pip install appurl\n\nDocumentation\n*************\n\nSee the documentation at http://appurl.readthedocs.io/\n\nDevelopment Notes\n*****************\n\nRunning tests\n+++++++++++++\n\nRun ``python setup.py tests`` to run normal development tests. You can also run ``tox``, which will\ntry to run the tests with python 3.4, 3.5 and 3.6, ignoring non-existent interpreters.\n\n\nDevelopment Testing with Docker\n+++++++++++++++++++++++++++++++\n\nTesting during development for other versions of Python is a bit of a pain, since you have\nto install the alternate version, and Tox will run all of the tests, not just the one you want.\n\nOne way to deal with this is to install Docker locally, then run the docker test container\non the source directory. This is done automatically from the Makefile in appurl/tests\n\n\n.. code-block:: bash\n\n    $ cd ./docker\n    $ make build # to create the container image\n    $ make shell # to run bash the container\n\nYou now have a docker container where the /code directory is the appurl source dir.\n\nNow, run tox to build the tox virtual environments, then enter the specific version you want to\nrun tests for and activate the virtual environment.\n\n.. code-block:: bash\n\n    # tox\n    # cd .tox/py34\n    # source bin/activate # Activate the python 3.4 virtual env\n    # cd ../../\n    # python setup.py test # Cause test deps to get installed\n    #\n    # python -munittest appurl.test.test_basic.BasicTests.test_url_classes  # Run one test\n\n\n\n\n\nRow Data Pipeline\n=================\n\nThe Rowpipe library manages row-oriented data transformers. Clients can create a RowProcessor() that has schema, composed of tables and columns, where each column cna have a \"transform\" that describes how to alter the data in the column.\n\n.. code-block:: python\n\n    from rowpipe.table import Table\n    from rowpipe.processor import RowProcessor\n\n    def doubleit(v):\n        return int(v) * 2\n\n    env = {\n        'doubleit': doubleit\n    }\n\n    t = Table('foobar')\n    t.add_column('id', datatype='int')\n    t.add_column('other_id', datatype='int', transform='^row.a')\n    t.add_column('i1', datatype='int', transform='^row.a;doubleit')\n    t.add_column('f1', datatype='float', transform='^row.b;doubleit')\n    t.add_column('i2', datatype='int', transform='^row.a')\n    t.add_column('f2', datatype='float', transform='^row.b')\n\n\nIn this table definition, ``other_id`` and ``i2`` columns are  initialized to the valu of the ``a`` column in the input row,\nThe  ``i1`` column is initialized to the input row ``a`` column, then the ``doubleit`` function is called on the value. In the last step, all of the values are cast to the types specified in the ``datatype`` column.\n\nThe RowProcessor is then run using this table definition, and an input generator:\n\n.. code-block:: python\n\n    class Source(object):\n\n        headers = 'a b'.split()\n\n        def __iter__(self):\n            for i in range(N):\n                yield i, 2*i\n\n    rp = RowProcessor(Source(), t, env=env)\n\n\n\nThen, ``rp`` is a generator that returns ``RowProxy`` objects, which can be indexed as integers or by clolumn number:\n\n\n.. code-block:: python\n\n    for row in rp:\n        v1 = row['f1']\n        v2 = row[3]\n\nThe RowProcessor creates Python code files and executes them.\n\nTransforms can have several steps, seperated by ';'. The first, prefixes with a '^', initializes the value for the rest of the transforms. A transform that is prefixes with a '!' is executed on exceptions.  Transform functions can have a variable signature; the tranform processor matches argument names. Valid argument names are:\n\n- row. A rowProxy object for the input row. Allows access to any input row value\n- row_n. Row number.\n- scratch. A dict for temporary storage\n- errors. A defaultdict(set) for storing error reports for columns. Keys are column names\n- accumulator. A dict for accumulating value, such as sums.\n- pipe. Unused\n- bundle. Unused\n- source. Reference to the input generator that is generating rows\n- v . The input row value\n- header_s. The header for the column in the input row.\n- i_s. The index of the column in the input row\n- header_d. The header for the column in the output row.\n- i_d.  The index of the column in the output row\n\n... and there is a whole lot more. This documentation is woefully incomplete ...\n\nNotes\n-----\n\nThis repo still contains old code for Row Pipelines, which are in the ``pipeline.py`` file. These components can be combined to performd defined operations on rows, such as skipping rows based on a predicate, altering the number of rows, returning on ly the head or tail, etc. The code is not currently used ot tested.\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Metatab/rowgenerator.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rowgenerators",
    "platform": "",
    "project_url": "https://pypi.org/project/rowgenerators/",
    "release_url": "https://pypi.org/project/rowgenerators/0.7.14/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Generate row data from a variety of file formats",
    "version": "0.7.14"
  },
  "releases": {
    "0.7.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7da1fb973c8bf24dc0e7e5aa3af3f9ad",
          "sha256": "fd0898405f3198626a3e408779c5a311ee4f3efedbd641a532d045687ee7aeae"
        },
        "downloads": -1,
        "filename": "rowgenerators-0.7.10.tar.gz",
        "has_sig": false,
        "md5_digest": "7da1fb973c8bf24dc0e7e5aa3af3f9ad",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20276,
        "upload_time": "2017-11-21T06:39:46",
        "url": "https://files.pythonhosted.org/packages/93/d2/88a3746a8577f4094d27044ef7693e1f79f0514b6441185b473b24450708/rowgenerators-0.7.10.tar.gz"
      }
    ],
    "0.7.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "45bde9665c5ef19069c9d08add9f0791",
          "sha256": "dbafcf54db7f2c9b2dd7708a904e9f0e010fd9fd8af0e4cc0384047aa8bc9b12"
        },
        "downloads": -1,
        "filename": "rowgenerators-0.7.11.tar.gz",
        "has_sig": false,
        "md5_digest": "45bde9665c5ef19069c9d08add9f0791",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20285,
        "upload_time": "2017-11-21T23:13:51",
        "url": "https://files.pythonhosted.org/packages/ff/6a/e6d2ee6f3452e93496316b976d4bf2ed3bbbfb03f51b03a388727b28e24c/rowgenerators-0.7.11.tar.gz"
      }
    ],
    "0.7.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4bd6c4989716f85e45ae2794e350b9cb",
          "sha256": "587d85ff922255979d0cb84e683d990b9977a7da267dff33e1f36864916d88f4"
        },
        "downloads": -1,
        "filename": "rowgenerators-0.7.13.tar.gz",
        "has_sig": false,
        "md5_digest": "4bd6c4989716f85e45ae2794e350b9cb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 91211,
        "upload_time": "2017-12-13T06:16:03",
        "url": "https://files.pythonhosted.org/packages/ae/48/c41f3d77bd9a8ac6dcc02cf74c3d55d9a4aff3c2e946f482ed816f30817e/rowgenerators-0.7.13.tar.gz"
      }
    ],
    "0.7.14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "91ac93f6ebfd936c3726ae9322fa85f5",
          "sha256": "22d7a9c95d97f596e86248f4df2d8aceebec081df7400d71eac544736ae995e7"
        },
        "downloads": -1,
        "filename": "rowgenerators-0.7.14.tar.gz",
        "has_sig": false,
        "md5_digest": "91ac93f6ebfd936c3726ae9322fa85f5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 91493,
        "upload_time": "2017-12-14T06:19:04",
        "url": "https://files.pythonhosted.org/packages/4c/0d/5996fc60c736c8f9ed4bca14bfdc150bc21aee3439e16ddea58d4cb85543/rowgenerators-0.7.14.tar.gz"
      }
    ],
    "0.7.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "942c6aa80ba9f517c0e5ea0407649170",
          "sha256": "a108c9fc50e8971166c3757e5558b65c39ecedb6f25c9362daf5bd344e76b2d9"
        },
        "downloads": -1,
        "filename": "rowgenerators-0.7.7.tar.gz",
        "has_sig": false,
        "md5_digest": "942c6aa80ba9f517c0e5ea0407649170",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20513,
        "upload_time": "2017-11-18T01:58:01",
        "url": "https://files.pythonhosted.org/packages/e9/42/a0948077b52fb5b522fab70cfc657251db956ac4a071ff9c249f6eda4c73/rowgenerators-0.7.7.tar.gz"
      }
    ],
    "0.7.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bfbec699bc3b93edc687661dc72bc0d1",
          "sha256": "dcf50783296a7ae641814c402b0611313c2ca35ef7384d5b9b2067c8f7a5fe55"
        },
        "downloads": -1,
        "filename": "rowgenerators-0.7.8.tar.gz",
        "has_sig": false,
        "md5_digest": "bfbec699bc3b93edc687661dc72bc0d1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20191,
        "upload_time": "2017-11-18T04:43:57",
        "url": "https://files.pythonhosted.org/packages/7d/2f/ac4a402d49805c2c9fac9fd06d1402b98376104fe58e97139efadde2650d/rowgenerators-0.7.8.tar.gz"
      }
    ],
    "0.7.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1809545eb0291da3b6a11318033bb40c",
          "sha256": "53c1871adb7ccc0517c83fa142bf55b9f41c6fe0a63723d4c56f8a88c18a7907"
        },
        "downloads": -1,
        "filename": "rowgenerators-0.7.9.tar.gz",
        "has_sig": false,
        "md5_digest": "1809545eb0291da3b6a11318033bb40c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20286,
        "upload_time": "2017-11-21T06:29:36",
        "url": "https://files.pythonhosted.org/packages/1b/ee/4939fe2eb0809277cd4b312074d9f04c7dc4a879ac20c8e6da1faf41f06c/rowgenerators-0.7.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "91ac93f6ebfd936c3726ae9322fa85f5",
        "sha256": "22d7a9c95d97f596e86248f4df2d8aceebec081df7400d71eac544736ae995e7"
      },
      "downloads": -1,
      "filename": "rowgenerators-0.7.14.tar.gz",
      "has_sig": false,
      "md5_digest": "91ac93f6ebfd936c3726ae9322fa85f5",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 91493,
      "upload_time": "2017-12-14T06:19:04",
      "url": "https://files.pythonhosted.org/packages/4c/0d/5996fc60c736c8f9ed4bca14bfdc150bc21aee3439e16ddea58d4cb85543/rowgenerators-0.7.14.tar.gz"
    }
  ]
}