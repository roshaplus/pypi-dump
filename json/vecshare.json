{
  "info": {
    "author": "JaredFern",
    "author_email": "jared.fern@u.northwestern.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# VecShare: Framework for Sharing Word Embeddings\n\n## About VecShare\nThe vecshare python library for word embedding query, selection and download. The vecshare python library uses indexers to regularly poll the data.world datastore for uploaded embeddings, record associated metadata, and generate lightweight signatures representing each uploaded embedding. Users can select embeddings for use by specifying the name of the desired embedding or using provided methods to compare their corpus against indexed signatures and extracting the embedding most similar to the target corpus.\n\nRead more about VecShare: <https://bit.ly/VecShare>.\n\n## Embedding Leaderboard\nEach indexed is evaluated and assigned a score on 10 word pair similarity tasks. The **score** is calculated by measuring the average Spearman correlation of the word vector cosine similarities and human-rated similarity for each word pair.\n\n**Highest Scoring Word Embeddings:**\n\n[comment]: <> (Leaderboard Start)\n\n| embedding_name                                                                  | contributor   | embedding_type   |   dimension |    score |\n|:--------------------------------------------------------------------------------|:--------------|:-----------------|------------:|---------:|\n| [`glove_Gigaword100d`](https://data.world/jaredfern/gigaword-glove-embedding)   | jaredfern     | glove            |         100 | 0.456143 |\n| [`text8_emb`](https://data.world/jaredfern/text-8-w-2-v)                        | jaredfern     | word2vec         |          50 | 0.37306  |\n| [`books_40`](https://data.world/jaredfern/new-york-times-word-embeddings)       | jaredfern     | word2vec         |         100 | 0.303337 |\n| [`OANC_Written`](https://data.world/jaredfern/oanc-word-embeddings)             | jaredfern     | word2vec         |         100 | 0.293891 |\n| [`econ_40`](https://data.world/jaredfern/new-york-times-word-embeddings)        | jaredfern     | word2vec         |         100 | 0.290213 |\n| [`agriculture_40`](https://data.world/jaredfern/new-york-times-word-embeddings) | jaredfern     | word2vec         |         100 | 0.289704 |\n| [`govt_40`](https://data.world/jaredfern/new-york-times-word-embeddings)        | jaredfern     | word2vec         |         100 | 0.288382 |\n| [`weather_40`](https://data.world/jaredfern/new-york-times-word-embeddings)     | jaredfern     | word2vec         |         100 | 0.277633 |\n| [`arts_40`](https://data.world/jaredfern/new-york-times-word-embeddings)        | jaredfern     | word2vec         |         100 | 0.266848 |\n| [`movies_40`](https://data.world/jaredfern/new-york-times-word-embeddings)      | jaredfern     | word2vec         |         100 | 0.263914 |\n\n[comment]: <> (Leaderboard End)\n\n**Word Pair Similarity Tasks:**\n* WS-353: Finkelstein et. al, 2002\n* MC-30: Miller and Charles, 1991\n* MEN: Bruni et. al, 2012\n* MTurk-287: Radinsky et. al, 2011\n* MTurk-771: Halawi and Dror, 2012\n* Rare-Word: Luong et. al, 2013\n* SimLex-999: Hill et. al, 2014\n* SimVerb-3500: Gerz et. al, 2016\n* Verb-144: Baker et. al, 2014\n\n## Installation:\nInstall the VecShare Python library:\n```\npip install vecshare\n```\nBefore using the `vecshare` library, configure the datadotworld library with your API token.\nYour token is obtainable on data.world under [Settings > Advanced](https://data.world/settings/advanced)\n\nSet your data.world token using:\n```\ndw configure\n```\nor\n```\nexport DW_AUTH_TOKEN=<DATA.WORLD_API_TOKEN>\n```\nTo avoid resetting the token for each terminal instance, add your token as an environment variable to your bash profile or permanent environment variables.\n\nSee [**Advanced Setup**](#advanced-setup) for details on creating new indexers or signature methods.\n\n## Supported Functions\nThe VecShare Python library currently supports:\n  * [`check`](#check-available-embeddings): See available embeddings\n  * [`format`](#embedding-upload-or-update): Autoformat an embedding for upload to the data store\n  * [`upload`](#embedding-upload-or-update): Upload a new embedding to the datastore\n  * [`update`](#embedding-upload-or-update): Update an existing embedding or its metadata\n  * [`query`](#embedding-query): Look up word vectors from a specific embedding\n  * [`extract`:](#embedding-extraction) Download word vectors for only the vocabulary of a specific corpus\n  * [`download`](#full-embedding-download): Download an entire shared embedding\n\n### Check Available Embeddings\n**`check()`:**  Returns embeddings available with the current indexer as a queryable `pandas.DataFrame`.\n\nThe default indexer aggregates a set of embeddings by polling `data.world` weekly for datasets with the tag `vecshare`. Currently indexed embeddings are viewable at: <https://data.world/jaredfern/vecshare-indexer>.\n\nSee [**Advanced Setup**](#advanced-setup), if you would like to use a custom indexer.\n\n**For Example:**\n```python\n>>> from vecshare import vecshare as vs\n>>> vs.check()\n        embedding_name                              dataset_name contributor  \\\n0            reutersr8         jaredfern/reuters-word-embeddings   jaredfern   \n1         reuters21578         jaredfern/reuters-word-embeddings   jaredfern   \n2                brown                    jaredfern/brown-corpus   jaredfern   \n3   glove_gigaword100d        jaredfern/gigaword-glove-embedding   jaredfern   \n4         oanc_written            jaredfern/oanc-word-embeddings   jaredfern   \n\n\n   case_sensitive  dimension embedding_type file_format vocab_size\n0           False        100       word2vec         csv       7821\n1           False        100       word2vec         csv      20203     \n2           False        100       word2vec         csv      15062     \n3           False        100          glove         csv     399922\n4           False        100       word2vec         csv      73127        \n```\n\n### Embedding Upload or Update\nEmbeddings must be uploaded as a .csv file with a header in the format: ['text', 'd0', 'd1', ... 'd_n'], such that they can be properly indexed and accessed.\n\n**`format(emb_path)`:** Reformats existing embeddings in the .csv format with a header in the correct format for tabular access.\n  * **emb_path (str):** Path to the embedding being formatted\n\n**`compress(emb_path)`:** Compress an embedding by reducing vocab_size, dimensionality, and precision. The vocab_size most frequent words will be preserved with pca_dim dimensions obtained using sklearn-PCA to transform the reduced matrix. Embedding values\twill be limited to the precision digits.\n\t*\t**`emb_path(str)`:** Path to embedding\n\t*\t**`vocab_size(int,opt)`:** Number of words being retained\n\t*\t**`pca_dim(int,opt)`:** Number of dimensions being retained\n\t*\t**`precision(int,opt)`:** Precision of word vector elements\n\n**`upload(set_name, emb_path, metadata = {}, summary = None)`:** Create a new shared embedding on data.world\n  * **set_name (str):** Name of the new dataset on data.world in the form (data.world_username/dataset_name)\n  * **emb_path (str):** Path to embedding being uploaded\n  * **metadata (dict, opt):** Dictionary containing metadata fields and values '{metadata_field: value}'\n  * **summary (str, opt):** Optional embedding description\n\n**`update(set_name, emb_path = \"\", metadata = {}, summary = \"\")`:** Update an existing shared embedding or its associated metadata\n  * **set_name (str):** Name of the new dataset on data.world in the form (data.world_username/dataset_name)\n  * **emb_path (str):** Path to embedding being uploaded\n  * **metadata (dict, opt):** Dictionary containing metadata fields and values '{metadata_field: value}'\n  * **summary (str, opt):** Optional embedding description\n\nAlternatively, new embeddings can be added to the framework by uploading the embedding as a .csv file to data.world, and tagging the dataset with the <vecshare> tag. The default indexer will add new embedding sets weekly.\n\nMetadata associated with the embedding can be added in the datasets description in the following format, `Field: Value`\n\n**For example:**\n```\nEmbedding Type: word2vec\nToken Count: 6000000\nCase Sensitive: False\n```\n### Embedding Selection\n**`signatures.avgrank(inp_dir)`:** Returns the shared embedding most similar to the user's target corpus, using the AvgRank method described in the VecShare paper. *Note: Computation is performed locally. Users' corpora will not be shared with other users*\n* **inp_dir (str):** Path to the directory containing the target corpus.\n\n```python\n>>> from vecshare import signatures as sigs\n>>> sigs.avgrank('Test_Input')\nu'reutersR8\n```\n**`signatures.simscore():`** Returns the embedding currently scoring highest on the word pair similarity task suite.\n\nAdditional custom  similarity and selection methods can be added. See ['Advanced Setup'](#advanced-setup).\n### Embedding Query\n**`query(words, emb_name, set_name = None, case_sensitive = False)`:**  Returns a  pandas DataFrame, such that each row specifies a word vector from the query.\n  * **words (list):** List of word vectors being requested\n  * **emb_name (str):** Title of the embedding containing the requested word vectors\n  * **set_name (str, opt):** Specify if multiple embeddings exist with the same emb_name\n  * **case_sensitive (bool):** Set to True if word vectors must exactly case match those in words\n\n**For Example:**\n```python\n>>> from vecshare import vecshare as vs\n>>> vs.query(['The', 'farm'], 'agriculture_40')\n   text       d99       d98       d97       d96       d95   ...           d1      d0  \n0   the -1.414755  0.414973  1.115698  0.034085  0.542921   ...   0.037287 -1.004704  \n1  farm  0.349535 -0.379208 -0.189476  2.776809 -0.099886   ...   0.067443 -1.391604  \n[2 rows x 101 columns]\n```\n### Embedding Extraction\n**`def extract(emb_name, file_dir, set_name = None, download = False):`** Return a pandas DataFrame containing all available word vectors for the target corpora's vocabulary.\n\nParameters:\n  * **emb_name (str):** Title of the shared embedding\n  * **file_dir (str):** Directory containing the user's target corpora\n  * **set_name (str,opt):** Specify only if multiple embeddings exist with the same emb_name\n  * **download (bool,opt):** If True, the extracted embedding will be saved as a .csv\n  * **case_sensitive (bool):** Set to True if word vectors must exactly case match those in words\n\n**For example:**\n```python\n>>> from vecshare import vecshare as vs\n>>> vs.extract('agriculture_40', 'Test_Input/reutersR8_all')\nEmbedding extraction begins.\n100% (23584 of 23584) |################################| Elapsed Time: 0:01:04\nEmbedding successfully extracted.\n\n              text       d99       d98       d97       d96       d95    ... \\\n0        designing -0.194328 -0.229856  0.455848  0.234053 -0.272354    ...\n1       affiliated -0.446879 -0.519360  0.130626  0.034608  0.134680    ...\n2    appropriately  0.106778  0.057186 -0.222296  0.101948  0.395122    ...\n3       cincinnati -0.563716 -0.274534  0.120897  0.273457  0.383307    ...\n4           choice  0.689276  1.586349  1.301351 -1.193058 -0.243053    ...\n5              han -0.287583  0.237989 -0.141203  0.328414  0.401448    ...\n6            begin  1.952841 -1.497073 -0.656650  2.443687  0.315941    ...\n7        wednesday -1.591453 -1.419733 -0.758305  2.638620  0.323779    ...\n8            wales -0.591623 -0.761353 -0.042557 -0.106776  0.004614    ...\n9             much  1.971340 -2.316020  0.147194 -0.641963 -0.280868    ...\n\n            d14       d13       d12       d11       d10        d1         d0\n0      0.432226 -0.023887 -0.246207  0.429862  0.268280  0.283950   0.218664   \n1      0.702217 -0.516346  0.273179  0.662874  0.106199 -0.011592   0.057832   \n2     -0.174151 -0.069734 -0.255887  0.070181 -0.163013  0.093490   0.028913\n3     -0.189739 -0.089899 -0.048192  0.569139  0.595834  0.421905  -0.241777\n4     -1.085993 -0.054178  1.156616 -1.449286  0.267787  0.677337   2.148856  \n5     -0.004664 -0.414933 -0.346377 -0.214976  0.201621  0.063539  -0.331673\n6      1.587940 -0.258819  1.396479  0.637493 -1.476619 -0.487518   0.864765    \n7      0.190376  0.881103  0.966915  1.543105  1.974099 -0.807656   0.800163  \n8     -0.181255  0.005893 -0.718905  0.373082  0.784821  0.393715  -0.000517  \n9      1.348299  0.180225  1.686486  0.535154 -2.005099 -1.424234  -2.677770    \n[9320 rows x 101 columns]\n```\n### Full Embedding Download\n**`download(emb_name, set_name=None):`** Returns the full embedding, containing all uploaded word vectors in the shared embedding and saves the embedding as a .csv file in the current directory\n  * **emb_name (str):** Title of the shared embedding\n  * **set_name (str, opt):** Specify if multiple embeddings exist with the same emb_name\n\n**For example:**\n```python\n>>> from vecshare import vecshare as vs\n>>> vs.download('agriculture_40')\n              text        d0        d1        d2        d3        d4  \\\n0              the  1.477964  0.016078 -0.193995  1.113142  0.765398   \n1               of -0.048878 -0.597735  0.196982  0.220966  1.463818   \n2               to  1.932197  1.587676 -0.321938 -0.592603  0.137684   \n3               in  0.294486  1.061131 -0.119670  0.611166  0.436337   \n4             said -0.609932 -0.481854  0.028189  0.755433 -0.493351   \n5                a  0.750953  0.342545 -0.758257  0.381944  0.824879   \n6              and  0.991821 -0.252496  0.011951  0.384948  0.505785   \n7              mln  0.215208  3.330005  0.458480  0.484309  1.128098   \n8               vs  0.512198  3.565070 -1.698517  0.813855 -0.002396   \n9             dlrs -0.026384  1.905773  1.313683  0.825797  1.981671\n```\n\n## Advanced Setup\n### Custom Signature Methods:\nAdditional signature methods can be included in the library by downloading the library and adding to the `signatures.py` file. To incorporate new signatures into future releases of the official VecShare library, fork and merge your changes with the github repository.\n\n### Custom Indexers:\nCustom indexers can be added by updating the `indexer.py` file.\n```python\nINDEXER      = <NEW INDEXER DATASET ID>\nINDEX_FILE   = <NAME OF THE INDEX FILE>\nEMB_TAG      = <EMB TAG>\n```",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/JaredFern/VecShare",
    "keywords": "word embeddings,word vectors,vecshare,natural language processing,NLP",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vecshare",
    "platform": "",
    "project_url": "https://pypi.org/project/vecshare/",
    "release_url": "https://pypi.org/project/vecshare/1.1.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python library for sharing word embeddings",
    "version": "1.1.3"
  },
  "releases": {
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "55ead48037c40ba006fb02da770109d6",
          "sha256": "3adb3befe1185cb1e6187e702561f50f1e8b79964f6d94a6d196657ee6bd7f37"
        },
        "downloads": 0,
        "filename": "vecshare-1.0.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "55ead48037c40ba006fb02da770109d6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15229,
        "upload_time": "2017-08-01T10:07:37",
        "url": "https://files.pythonhosted.org/packages/3e/e8/bad31f6daffed46cab7811f96ab2d959a43bc06db66dc1510da4efec0ef7/vecshare-1.0.0b1.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0c36e8eb7afb85023b61d00268dbbd76",
          "sha256": "c8902488c3802602d62fdf10e9f914fd69bcfc83a8bb20080cc6ab64f3a7b022"
        },
        "downloads": 0,
        "filename": "vecshare-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0c36e8eb7afb85023b61d00268dbbd76",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15267,
        "upload_time": "2017-08-01T10:26:32",
        "url": "https://files.pythonhosted.org/packages/7e/0f/fadeddfc0a153080c1a49c8b2e9bc0520a0669722a408fc4bc0f5aa85fe8/vecshare-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7a187c6b7a3398eb9d3a99e31ba8b6e4",
          "sha256": "ceb76658476d002fb019cf8a0fd7f116e5558b67e678adb8a3f4e354ac624417"
        },
        "downloads": 0,
        "filename": "vecshare-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7a187c6b7a3398eb9d3a99e31ba8b6e4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15330,
        "upload_time": "2017-08-01T10:29:59",
        "url": "https://files.pythonhosted.org/packages/8c/5a/628245f83076403311c7c155cb007134ae0d73732b320da84c78a9bace13/vecshare-1.0.2.tar.gz"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8a0fd4403aadb05a07cc7816578ad539",
          "sha256": "a6533122e26f8e0a7bdac23a922038061b88fda660c48657e8ad8f2cae6c36d6"
        },
        "downloads": 0,
        "filename": "vecshare-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8a0fd4403aadb05a07cc7816578ad539",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15268,
        "upload_time": "2017-08-01T10:34:42",
        "url": "https://files.pythonhosted.org/packages/4f/4d/d68ae7d437a1a5fdde8d7463b7da9b131ba1aa586891b11af2beb738de91/vecshare-1.0.3.tar.gz"
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9a0aa047b4eeb3f61bf0d319c570959e",
          "sha256": "286a5760d0bdf4b3f927a6a42c17f530051e88b505594e3326d8e3ad5e1ea01e"
        },
        "downloads": 0,
        "filename": "vecshare-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9a0aa047b4eeb3f61bf0d319c570959e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15254,
        "upload_time": "2017-08-01T10:35:17",
        "url": "https://files.pythonhosted.org/packages/1d/2d/fd7c4ca3ddf373f7da496c6000f8fbcedc89bce5c9b88893b887e8ca2253/vecshare-1.0.4.tar.gz"
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f9f4e6a41625ef28db9fd8080d9a7383",
          "sha256": "25dd53a04372c327e3ceba078efccc3705d45b80ea3f164022c0899f2b11a8ef"
        },
        "downloads": 0,
        "filename": "vecshare-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "f9f4e6a41625ef28db9fd8080d9a7383",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15588,
        "upload_time": "2017-08-01T17:00:52",
        "url": "https://files.pythonhosted.org/packages/8a/8c/9b0876c7ce045eaee86d6d3c9f96c9ce45040150bc9db6211ae468e2d353/vecshare-1.0.5.tar.gz"
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eafa0d337ecb15ec18791e2834a63680",
          "sha256": "8337bd09676ae8801abe7d88b979cc051b7b3ddba9ae546777c9071d9801a078"
        },
        "downloads": 0,
        "filename": "vecshare-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "eafa0d337ecb15ec18791e2834a63680",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15607,
        "upload_time": "2017-08-01T17:04:29",
        "url": "https://files.pythonhosted.org/packages/1c/16/f6adac3219b6bff70ef38d7e38bd52e8d4aae5b18ccfe37f2a0c94283aa5/vecshare-1.0.6.tar.gz"
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "731bf6db67c68bc3aebba1cfb11f319f",
          "sha256": "bbd9910957bca42b4c6157ac49bc3a4c9bee9df664b4d3f9c7ac1953fcb74081"
        },
        "downloads": 0,
        "filename": "vecshare-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "731bf6db67c68bc3aebba1cfb11f319f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15613,
        "upload_time": "2017-08-01T17:10:27",
        "url": "https://files.pythonhosted.org/packages/7b/1f/965886f42f051d77711b98376dc48af896653ba0d15d704aee9c0ad6e2f7/vecshare-1.0.7.tar.gz"
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eb7c7bdc6cbe4b4531f5a63053edd685",
          "sha256": "d945ef8c8fd549176a522e037787b2ca7c4490986bc4c764cbe706b9bbff1138"
        },
        "downloads": 0,
        "filename": "vecshare-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "eb7c7bdc6cbe4b4531f5a63053edd685",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15611,
        "upload_time": "2017-08-01T17:13:10",
        "url": "https://files.pythonhosted.org/packages/7c/27/04b202de2af6815bb78c46e5328bc2967136caedf1981fbea1b10348013d/vecshare-1.0.8.tar.gz"
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ebc20e16800794d5e31c9d506b06381c",
          "sha256": "66549ffd6b647eaed17933f54d205ab131797ff910859ea4584deb29646ea88c"
        },
        "downloads": 0,
        "filename": "vecshare-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ebc20e16800794d5e31c9d506b06381c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20072,
        "upload_time": "2017-08-11T23:03:02",
        "url": "https://files.pythonhosted.org/packages/14/c8/8b4b6dedd5c0ee70a18b0a562ee655e5cdf07b825aefd6670c931722544f/vecshare-1.1.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ebc20e16800794d5e31c9d506b06381c",
        "sha256": "66549ffd6b647eaed17933f54d205ab131797ff910859ea4584deb29646ea88c"
      },
      "downloads": 0,
      "filename": "vecshare-1.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "ebc20e16800794d5e31c9d506b06381c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 20072,
      "upload_time": "2017-08-11T23:03:02",
      "url": "https://files.pythonhosted.org/packages/14/c8/8b4b6dedd5c0ee70a18b0a562ee655e5cdf07b825aefd6670c931722544f/vecshare-1.1.3.tar.gz"
    }
  ]
}