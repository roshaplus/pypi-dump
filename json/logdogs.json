{
  "info": {
    "author": "Xurui Yan",
    "author_email": "yxr1993@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 2.7",
      "Topic :: Utilities"
    ],
    "description": "# logdogs\n\nA daemon to monitor keywords in any log files specified by glob pattern.\n\nIn the background log files are checked periodically by dogs and user defined handlers are called when error lines are detected according the keyword regex.\n\n\n## features\n* glob path\n* regex keywords\n* compatible with logrotate\n* custmize handler function or callable object\n* log files don't have to exist before watch\n* a dog can watch multiple logs and a log can be watched by multiple dogs\n\n\n## usage\ninstall\n```\npip install logdogs\n```\nstart\n```\nlogdogs -c conf.py\n```\nstop\n```\nkill <pid>\n```\npid file will be removed automatically.\n\nconf.py is your config file which contains upper case module variables as configuration. Here is an example:\n\n```python\nimport os\nimport logging\n\nLOG_FILE = 'logdogs.log'\nLOG_LEVEL = 'INFO'\n# you can even call basicConfig to customize the log instead\n\nINTEVAL = 10 # seconds\n\nDAEMONIZE = True\nDIR = os.path.abspath('.')\nPID_FILE = 'logdogs.pid'\nSTDOUT = 'logdogs.out'\nSTDERR = 'logdogs.err'\n# the above 4 configurations only work when DAEMONIZE is True\n\nlogger = logging.getLogger(__name__)\n\nclass MyHandler(object):\n    def __init__(self):\n        self.count = 0\n\n    def __call__(self, file, lines):\n        self.count += 1\n        logger.info('...')\n        # Do whatever you want here...\n\nDOGS = {\n    \"test\": {\n        \"paths\": [\"a.log\", \"b.log\"],\n        \"handler\": MyHandler(),\n        \"includes\": [r\"wrong\"],\n        \"excludes\": [r\"long\"]\n    },\n    \"glob\": {\n        \"paths\": [\"**/*.log\"],\n        \"handler\": MyHandler(),\n        \"includes\": [r\"(?!)wrong\"],\n    }\n}\n\n```\nIn this case, logdogs will run as a daemon process in current directory and check log files every 10 seconds. a.log and b.log will be watched both by dog test and glob. When a line containing `wrong` but not `long` is written to a.log, both dogs' handler will be called.\n\nThe effective variables in config file are described as below.\n\n\n## config\n\n### DOGS\nA Dog consists of:\n\n1. a group of log files specified by glob pattern\n2. a filter defined by includes and excludes\n3. a handler function or a callable object\n\nDOG is a dict in the form of `{name: attribute}` where `name` is not important and `attribute` is a dict containing the following keys:\n\n#### handler\na handler is a function which has the following signature\n```\ndef handler(file, lines):\n\t\"\"\"\n\t`file` is the absolute path of the log file.\n\t`lines` is a list of the lines includes newline characters(\\n)\n\t\"\"\"\n\tpass\n```\n\nthe default handler is a callable object of:\n```\nclass Handler(object):\n    \"\"\"\n    default handler for log event\n    \"\"\"\n    def __call__(self, file, lines):\n        print(lines)\n\n```\nIt's up to you to deal with the log line in this handler such as mailing, send to wechat and etc.\n\n#### includes & excludes\nThey are regular expressions and both are optional.\nThe handler is called if any regex in includes is found in the line and any regex in excludes is not found in the line.\nThat is to say, `or` logic is applied in the includes and `and` logic is applied in the excludes.\n\n\n#### path\npath is a list, it supports the following forms:\n\n1. single file: ['/var/logs/a.log']\n2. multiple files: ['/var/logs/a.log', '/var/logs/b.log']\n3. glob pattern: ['/var/logs/*.log']\n4. recursive glob (similar as globstar on bash): ['/var/logs/**/*.log']\n\n* In the last 2 cases, a log file is not required to exist when monitor starts\n* The same log file can overlap in multiple dog block\n\n\n### INTEVAL\nseconds for sleep between checks\n\n### log\n* LOG_FILE: specify log file. logs are printed to stdout if not specified\n* LOG_LEVEL(WARNING): which log level to use\n\n\n### daemonize\n* DAEMONIZE(False): whether to start a daemon process running in the backgroup, **the following configs only take effect when DAEMONIZE is True**\n* DIR: set the working directory, **default is `/`**\n* PID_FILE: pid file path\n* STDOUT: where to redirect stdout(print exception traceback for example)\n* STDERR: where to redirect sterr\n\n\n## Development\n\n```\npython setup.py develop\n```\n\n### test\n```\npython -m unittest -v test_function.TestFunction\n```\n\n### todo\n\n* more handlers\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/yanxurui/logdog",
    "keywords": "log monitor",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "logdogs",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/logdogs/",
    "release_url": "https://pypi.org/project/logdogs/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A daemon to monitor keywords in any log files specified by glob pattern",
    "version": "0.1.0"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "aa9bc0b92f78cacf0f37c8f9db26b9ae",
          "sha256": "5f6a65fa1be5025f6941d413092cfbe43a5237461143f0ceb87ef1c79f4d22cf"
        },
        "downloads": -1,
        "filename": "logdogs-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "aa9bc0b92f78cacf0f37c8f9db26b9ae",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5224,
        "upload_time": "2017-11-03T13:03:22",
        "url": "https://files.pythonhosted.org/packages/06/f7/7d8f98bdbc165c234c63451a7c6e2998fb42476ae898d7d43326eac167bf/logdogs-0.0.1.tar.gz"
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "adf4204ca8490f5e39c7c205a7d5f776",
          "sha256": "2bdf98ba1866d4990bf2e937bf81156a20e1d50cfa4713b0c21349d9727de76a"
        },
        "downloads": -1,
        "filename": "logdogs-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "adf4204ca8490f5e39c7c205a7d5f776",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6591,
        "upload_time": "2017-11-03T16:32:59",
        "url": "https://files.pythonhosted.org/packages/1a/99/db33daea8835759ba5a54fd98212aa9127a96e482ac9b0876e1a20b04290/logdogs-0.1.0.tar.gz"
      }
    ],
    "0.1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3fbd461a9a623a7c90756111c60f97eb",
          "sha256": "4050cf5e54abe4f3f8d2f7097613b529963c6d515d99f2745491f97879ab4a4f"
        },
        "downloads": -1,
        "filename": "logdogs-0.1.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "3fbd461a9a623a7c90756111c60f97eb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6770,
        "upload_time": "2017-11-03T16:41:44",
        "url": "https://files.pythonhosted.org/packages/34/bc/9edba5be02dd7812bf31e0d129cb1ef2628e123e7992acdffe9458dfbda1/logdogs-0.1.0b1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "adf4204ca8490f5e39c7c205a7d5f776",
        "sha256": "2bdf98ba1866d4990bf2e937bf81156a20e1d50cfa4713b0c21349d9727de76a"
      },
      "downloads": -1,
      "filename": "logdogs-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "adf4204ca8490f5e39c7c205a7d5f776",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6591,
      "upload_time": "2017-11-03T16:32:59",
      "url": "https://files.pythonhosted.org/packages/1a/99/db33daea8835759ba5a54fd98212aa9127a96e482ac9b0876e1a20b04290/logdogs-0.1.0.tar.gz"
    }
  ]
}