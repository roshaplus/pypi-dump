{
  "info": {
    "author": "Meziane AITE",
    "author_email": "meziane.aite@inria.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved",
      "Natural Language :: French",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "---\ntitle:  padmet package - Documentation\nauthor: Meziane AITE\ndate: 2017-06-19\nversion: 2.5\n---\n\\newpage\n\n################################################################################\n\n## Description\n@padmet Version: 2.5\nauthor: meziane aite (meziane.aite@inria.fr)\nPython 2.7\n\nDescription:\nThe PADMet package allows conciliating genomics and metabolic network information used to produce a genome-scale constraint-based metabolic model within a database that traces all the reconstruction process steps. It allows representing the metabolic model in the form of a Wiki containing all the used/traced information. Other standard outputs are made available with the package. \nThe main concept underlying PADMet-Package is to provide solutions that ensure the consistency, the internal standardization and the reconciliation of the information used within any workflow that combines several tools involving metabolic networks reconstruction or analysis. The PADMet package is at the core of the AuReMe workflow, dedicated to the primary reconstruction of genome-scale metabolic networks from raw data. It allows the study of organisms for which few experimental data are available. Its main feature is to undergo the reconstruction of the metabolic network by combining several\nheterogeneous knowledge and data sources, including the information reported by several scaffold metabolic networks for cousin species.\n\n\n## Installation\n\nFrom pip:\n\tpip install padmet\n\nFrom git:\n\tgit clone https://gitlab.inria.fr/maite/padmet.git\n\tmake install (from git/padmet)\n\n\n## Architecture\n\n\n    .\n    \u251c\u2500\u2500 LICENSE\n    \u251c\u2500\u2500 Makefile\n    \u251c\u2500\u2500 MANIFEST.in\n    \u251c\u2500\u2500 README.md\n    \u251c\u2500\u2500 setup.cfg\n    \u251c\u2500\u2500 setup.py\n    \u2514\u2500\u2500  padmet\n        \u251c\u2500\u2500 __init__.py\n        \u251c\u2500\u2500 aspGenerator.py\n        \u251c\u2500\u2500 node.py\n        \u251c\u2500\u2500 padmetRef.py\n        \u251c\u2500\u2500 padmetSpec.py\n        \u251c\u2500\u2500 policy.py\n        \u251c\u2500\u2500 README.md\n        \u251c\u2500\u2500 relation.py\n        \u251c\u2500\u2500 sbmlGenerator.py\n        \u251c\u2500\u2500 sbmlPlugin.py\n        \u2514\u2500\u2500 wikiGenerator.py\n\n## Documentation\nnode.py:\n\tDescription:\n\tDefine the class Node used in padmet.\n\n\tclass Node:\n\t    \"\"\"\n\t    A Node represent an element in a metabolic network (eg: compound, reaction)\n\t    A Node contains 3 attributs:\n\t\t_type: The type of the node (eg: 'reaction' or 'pathway')\n\t\t_id: the identifier of the node (eg: 'rxn-45)\n\t\t_misc: A dictionnary of miscellaneous data, k = tag of the data, v = list of values\n\t\t(eg: {'DIRECTION':[REVERSIBLE]})\n\t    \"\"\"\n\t    __init__(self, _type, _id, misc = None):\n\t\t\"\"\"\n\t\t@param _type: The type of the node ('reaction','pathway')\n\t\t@param _id: the identifier of the node ('rxn-45)\n\t\t@param _misc: A dictionnary of miscellaneous data ({'DIRECTION':[REVERSIBLE]})\n\t\t@type _type, _id: str\n\t\t@type misc: dict\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\t    \n\t    toString(self):\n\t\t\"\"\"\n\t\tThis function is used to stock the information relative to the node\n\t\tin a padmet file.\n\t\t@return: string with all data sep by tab' ex: reaction\\tRXN0..\n\t\t@rtype: str\n\t\t\"\"\"\nrelation.py\nDescription:\nDefine the class Relation used in padmet.\n\n\tclass Relation:\n\t    \"\"\"\n\t    A Relation represent an link between two elements (node) in a metabolic network\n\t    eg: RXN-1 consumes CPD-1\n\t    A Relation contains 4 attributs:\n\t\t_type: The type of the relation (eg: 'consumes' or 'produces')\n\t\tid_in: the identifier of the node corresponding to the subject of the relation (eg: 'RXN-1)\n\t\tid_out: the identifier of the node corresponding to the object of the relation (eg: 'CPD-1)\n\t\t_misc: A dictionnary of miscellaneous data, k = tag of the data, v = list of values\n\t\t(eg: {'STOICHIOMETRY':[1.0]})\n\t    \"\"\"\n\t    __init__(self, id_in, _type, id_out, misc = None):\n\t\t\"\"\"\n\t\t@param _type: The type of the relation (eg: 'consumes' or 'produces')\n\t\t@param id_in: the identifier of the node corresponding to the subject of the relation ('RXN-1)\n\t\t@param id_out: the identifier of the node corresponding to the object of the relation ('CPD-1)\n\t\t@param _misc: A dictionnary of miscellaneous data (eg: {'STOICHIOMETRY':[1.0]})\n\t\t@type _type, _id: str\n\t\t@type misc: dict\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    toString(self):\n\t\t\"\"\"\n\t\tThis function is used to stock the information relative to the node\n\t\tin a padmet file.\n\t\t@return: string with all data sep by tab' ex: reaction\\tRXN0..\n\t\t@rtype: str\n\t\t\"\"\"\n\n\t    compare(self,relation):\n\t\t\"\"\"\n\t\tcompare 2 relations. return True or False\n\t\t@param relation: the relation to compare\n\t\t@type relation: Relation\n\t\t@return: True,False\n\t\t@rtype: bool\n\t\t\"\"\"\n\npolicy.py\nDescription:\nDefine a policy in padmet object.\n\n\tclass Policy:\n\t    \"\"\"\n\t    A Policy define the types of relations, nodes in a network.\n\t    A policy contains 3 attributs:\n\t\tpolicy_in_array: Is a list of list of arcs (eg: [['reaction','consumes','compounds'],['reaction','produces','compounds']])\n\t\tclass_of_node: Is a set of all the type of nodes represented in the network (eg: set(reaction, compound))\n\t\ttype_of_arc: Is a dictionnary of all the types of arcs represented in the network (eg: {reaction:[consumes,compounds]})\n\t    \"\"\"\n\n\t    __init__(self,policy_in_array = None):\n\t\t\"\"\"\n\t\t@param policy_in_array: Is a list of list of arcs (eg: [['reaction','consumes','compounds'],['reaction','produces','compounds']])\n\t\t@type policy_in_array: list\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\t\t    \n\t    setPolicyInArray(self,policy_in_array):\n\t\t\"\"\"\n\t\tFrom policy_in_array, set class_of_node and type_of_arc\n\t\t@param policy_in_array: Is a list of list of arcs (eg: [['reaction','consumes','compounds'],['reaction','produces','compounds']])\n\t\t@type policy_in_array: list\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    getPolicyInArray(self):\n\t\t\"\"\"\n\t\treturn policy_in_array\n\t\t@return: self.policy_in_array\n\t\t@rtype: list\n\t\t\"\"\"\n\t\t    \n\t    _setClassOfNode(self):\n\t\t\"\"\"\n\t\tFrom self.policy_in_array set class_of_node\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    getClassOfNode(self):\n\t\t\"\"\"\n\t\treturn class_of_node\n\t\t@return: self.class_of_node\n\t\t@rtype: set\n\t\t\"\"\"\n\n\t    _setTypeOfArc(self):\n\t\t\"\"\"\n\t\tFrom self.policy_in_array and self.class_of_node set type_of_arc\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    getTypeOfArc(self):\n\t\t\"\"\"\n\t\treturn class_of_node\n\t\t@return: self.class_of_node\n\t\t@rtype: set\n\t\t\"\"\"\n\npadmetRef.py\nDescription:\nPadmetRef is an object representing a DATABASE of metabolic network.\n\n\tclass PadmetRef:\n\t    \"\"\"\n\t    PadmetRef is an object representing a DATABASE of metabolic network.\n\t    Contains <Policy>, <Node> and <Relation>\n\t    The policy defines the way Node and Relation are associated\n\t    A node is an Object that contains information about an element of the network \n\t    (can be a pathway, reaction...).\n\t    A realtion defines how two nodes are connected. In a relation there is \n\t    a node \"in\" and a node \"out\". (reactionX'in' consumes metaboliteX'out')\n\t    PadmetRef contains 3 attributs: \n\t\tdicOfNode: a dictionary of node: key=Node's unique id / value = <Node>\n\t\tdicOfRelationIn: a dictionnary of relation with: key= nodeIN id / value = list of <relation>\n\t\tdicOfRelationOut: a dictionnary of relation with: key= nodeOut id / value = list of <relation>\n\t\tpolicy: a <policy>\n\t\tinfo: a dictionnary of informations about the network, the database used...\n\t\tThis dictionnary is always represented in the header of a padmet file\n\t    \"\"\"\n\t#==============================================================================\n\t# Constructor / getter            \n\t#==============================================================================\n\t\t\n\t    setInfo(self,source):\n\t\t\"\"\"\n\t\tAll the information printed in the header of a padmet stocked in a dict.\n\t\t{\"metacyc\":{version:XX,...},\"ecocyc\":{...}...}\n\t\tset Info from a dictionnary or copying from an other padmet\n\t\t@param source: may be a dict or an other padmet from where will be copied the info\n\t\t@tyme source: dict or Padmet\n\t\t\"\"\"\n\n\t    setPolicy(self,source):\n\t\t\"\"\"\n\t\tSet policy from a list or copying from an other padmet\n\t\t@param source: may be a list or an other padmet from where will be copied the policy\n\t\t@type source: list or Padmet\n\t\t\"\"\"\n\n\t    setDicOfNode(self,source):\n\t\t\"\"\"\n\t\tSet dicOfNode from a dict or copying from an other padmet\n\t\t@param source: may be a dict or an other padmet from where will be copied the dicOfNode\n\t\t@type source: dict or Padmet\n\t\t\"\"\"\n\n\t    setdicOfRelationIn(self,source):\n\t\t\"\"\"\n\t\tSet dicOfRelationIn from a dict or copying from an other padmet\n\t\t@param source: may be a dict or an other padmet from where will be copied the dicOfRelationIn\n\t\t@type source: dict or Padmet\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    setdicOfRelationOut(self,source):\n\t\t\"\"\"\n\t\tSet dicOfRelationOut from a dict or copying from an other padmet\n\t\t@param source: may be a dict or an other padmet from where will be copied the dicOfRelationIn\n\t\t@type source: dict or Padmet\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    getAllRelation(self):\n\t\t\"\"\"\n\t\treturn a set of all relations\n\t\t@rtype: set\n\t\t\"\"\"\n\n\t    loadGraph(self, padmet_file):\n\t\t\"\"\"\n\t\tAllow to recover all the informations of the padmet file.\n\t\tThe section Data Base informations corresponds to the self.info\n\t\tThe section Nodes corresponds to the data of each nodes in self.dicOfNode, sep =\"\\t\"\n\t\tThe section Relations corresponds to the data of each relations in self.dicOfRelationIn/Out, sep =\"\\t\"\n\t\t@param padmet_file: the pathname of the padmet file to load.\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    initFromSbml(self, sbml_file, verbose = False):\n\t\t\"\"\"\n\t\tInitialize a padmetRef from sbml. Copy all species, convert id with sbmlPlugin\n\t\tstock name in COMMON NAME, stock original info in suppData. Copy all reactions,\n\t\tconvert id with sbmlPlugin, stock name in common name, stock compart and stoichio data relative\n\t\tto reactants and products in the misc of consumes/produces relations\n\t\t@param sbml_file: pathname of the sbml file\n\t\t@param verbose: <bool> if True print supp info\n\t\t@type sbml_file: str\n\t\t\"\"\"\n\n\t    generateFile(self, output):\n\t\t\"\"\"\n\t\tAllow to create a padmet file to stock all the data.\n\t\t@param output: pathname of the padmet file to create\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    extract_data(self,output_directory, verbose = False):\n\t\t\"\"\"\n\t\textracting data on rections and compounds in flate files.(used for samifier)\n\t\t\"\"\"\n\n\t#==============================================================================\n\t# For Nodes \n\t#==============================================================================\n\n\t    _addNode(self,node):\n\t\t\"\"\"\n\t\tAllows to add a node, only if the id is not already used.\n\t\t@param node: the node to add\n\t\t@type node: Node\n\t\t@return: True if added, False if no.        \n\t\t@rtype: Bool\n\t\t\"\"\"\n\n\t#==============================================================================\n\t# For Relations:     \n\t#==============================================================================\n\n\t    _addRelation(self,relation):\n\t\t\"\"\"\n\t\tAddRelation() allows to add a relation if not already in allRelations.\n\t\t@param relation: the relation to add\n\t\t@type relation: Relation\n\t\t@return: true if relation was successfully added\n\t\t@rtype: bool\n\t\t\"\"\"\n\n\t#==============================================================================\n\t# manipulating de novo node:     \n\t#==============================================================================\n\t    \n\t    _basicNode(self, _type):\n\t\t\"\"\"\n\t\tFor padmetRef, when creating a new node, a new id is creating. This id\n\t\tstart with 'META_' for padmetRef (SPE_ for padmetSpe).\n\t\tThis function generate a new id and an empty node with this id.\n\t\t@param _type: the type of the node to create\n\t\t@return: (newId,newNode)\n\t\t@rtype: tuple(str, Node)\n\t\t\"\"\"\n\n\t    getMaxLocalID(self):\n\t\t\"\"\"\n\t\tFor padmetRef, when creating a new node, a new id is creating. This id\n\t\tstart with 'META_' for padmetRef (SPE_ for padmetSpec) + an incremented int.\n\t\tThis function extracts the max int (or max local id)\n\t\t@return: the max local id\n\t\t@rtype: int\n\t\t\"\"\"\n\n\t    createNode(self, _type, dicOfMisc, listOfRelation = None):\n\t\t\"\"\"\n\t\tCreation of new node to add in the network.\n\t\tuse ._basicNode first then completes the node with more informations\n\t\t@param _type: type of node (gene, reaction...)\n\t\t@param dicOfMisc: dictionnary of miscellaneous data\n\t\t@param listOfRelation: list of list of data needed to create a relation. (id_in,type,id_out,misc)\n\t\t@type _type: str\n\t\t@type dicOfMisc: dict\n\t\t@type listOfRelation: = None, List.\n\t\t@return: (new_id,new_node)\n\t\t@rtype: tuple(str, Node)\n\t\t\"\"\"\n\npadmetSpec.py\nDescription:\nPadmetSpec is an object representing the metabolic network of a species(organism)\nbased on a reference database PadmetRef.\n\n\tclass PadmetSpec:\n\t    \"\"\"\n\t    PadmetSpec is an object representing the metabolic network of a species(organism)\n\t    based on a reference database PadmetRef.\n\t    contains <Policy>, <Node> and <Relation>\n\t    The policy defines the way Node and Relation are associated\n\t    A node is an Object that contains information about an element of the network \n\t    (can be a pathway, reaction...).\n\t    A realtion defines how two nodes are connected. In a relation there is \n\t    a node \"in\" and a node \"out\". (reactionX'in' consumes metaboliteX'out')\n\t    PadmetSpec contains 3 attributs: \n\t\tdicOfNode: a dictionary of node: key=Node's unique id / value = <Node>\n\t\tdicOfRelationIn: a dictionnary of relation with: key= nodeIN id / value = list of <relation>\n\t\tdicOfRelationOut: a dictionnary of relation with: key= nodeOut id / value = list of <relation>\n\t\tpolicy: a <policy>\n\t\tinfo: a dictionnary of informations about the network, the database used...\n\t\tThis dictionnary is always represented in the header of a padmet file\n\t    \"\"\"\n\t    __init__(self, padmetSpec_file = None):\n\t\t\"\"\"\n\t\tif None, initializes an empty <PadmetSpec>\n\t\t@param padmetSpec_file: pathname of the padmet file\n\t\t@type padmetSpec_file: str\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t#==============================================================================\n\t# Constructor / getter            \n\t#==============================================================================\n\n\t    setInfo(self,source):\n\t\t\"\"\"\n\t\tAll the information printed in the header of a padmet stocked in a dict.\n\t\t{\"metacyc\":{version:XX,...},\"ecocyc\":{...}...}\n\t\tset Info from a dictionnary or copying from an other padmet\n\t\t@param source: may be a dict or an other padmet from where will be copied the info\n\t\t@tyme source: dict or Padmet\n\t\t\"\"\"\n\n\t    setPolicy(self,source):\n\t\t\"\"\"\n\t\tSet policy from a list or copying from an other padmet\n\t\t@param source: may be a list or an other padmet from where will be copied the policy\n\t\t@type source: list or Padmet\n\t\t\"\"\"\n\n\t    setDicOfNode(self,source):\n\t\t\"\"\"\n\t\tSet dicOfNode from a dict or copying from an other padmet\n\t\t@param source: may be a dict or an other padmet from where will be copied the dicOfNode\n\t\t@type source: dict or Padmet\n\t\t\"\"\"\n\n\t    setdicOfRelationIn(self,source):\n\t\t\"\"\"\n\t\tSet dicOfRelationIn from a dict or copying from an other padmet\n\t\t@param source: may be a dict or an other padmet from where will be copied the dicOfRelationIn\n\t\t@type source: dict or Padmet\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    setdicOfRelationOut(self,source):\n\t\t\"\"\"\n\t\tSet dicOfRelationOut from a dict or copying from an other padmet\n\t\t@param source: may be a dict or an other padmet from where will be copied the dicOfRelationIn\n\t\t@type source: dict or Padmet\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    getAllRelation(self):\n\t\t\"\"\"\n\t\treturn a set of all relations\n\t\t@rtype: set\n\t\t\"\"\"\n\n\t    loadGraph(self, padmet_file):\n\t\t\"\"\"\n\t\tAllow to recover all the informations of the padmet file.\n\t\tThe section Data Base informations corresponds to the self.info\n\t\tThe section Nodes corresponds to the data of each nodes in self.dicOfNode, sep =\"\\t\"\n\t\tThe section Relations corresponds to the data of each relations in self.dicOfRelationIn/Out, sep =\"\\t\"\n\t\t@param padmet_file: the pathname of the padmet file to load.\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    generateFile(self, output):\n\t\t\"\"\"\n\t\tAllow to create a padmet file to stock all the data.\n\t\t@param output: pathname of the padmet file to create\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    extract_pathway(self, node_id, padmetRef_file, output, sbml = None): \n\t\t\"\"\"\n\t\tAllow to extract a pathway in a csv file. Need a padmetRef to check the total number\n\t\tof reactions in the pathway.\n\t\tHeader = \"Reactions (metacyc_id)\", \"Reactions (common_name)\", \"EC-Number\",\n\t\t              \"Formula (metacyc_id)\", \"Formula (common_name)\", \"Found in the network\"\n\t\t@param node_id: id of the pathway\n\t\t@param padmetRef_ile: pathname of the padmet ref file\n\t\t@param output: pathname of the output to create\n\t\t@param sbml: if true, create a sbml file of this pathway\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    network_report(self, padmetRef_file, output_dir, verbose = False):\n\t\t\"\"\"\n\t\tSummurizes the network in a folder (output_dir) of 4 files.\n\t\tall_pathways.csv: report on the pathways of the network. PadmetRef is used to recover the total reactions of a pathways. (sep = \"\\t\")\n\t\tline = dbRef_id, Common name, Number of reactions found, \n\t\t    Total number of reaction, Ratio (Reaction found / Total)\n\t\tall_reactions.csv: report on the reactions of the network.  (sep = \"\\t\")\n\t\tline = dbRef_id, Common name, formula (with id), \n\t\t    formula (with common name), in pathways, associated genes, sources\n\t\tall_metabolites.csv: report on the metabolites of the network. (sep = \"\\t\")\n\t\tline = dbRef_id, Common name, Produced (p), Consumed (c), Both (cp)\n\t\tall_genes.csv: report on the genes of the network. (sep= \"\\t\")\n\t\tline = \"id\", \"Common name\", \"linked reactions\"\n\t\t@param padmetRef_file: pathname of the padmet of reference\n\t\t@param output_dir: pathname of the folder where to create the reports\n\t\t@param verbose: if true print info.\n\t\t@type padmetRef_file, output_dir: str\n\t\t@type verbose: bool\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t#==============================================================================\n\t# For Nodes \n\t#==============================================================================\n\t\t    \n\t    _addNode(self,node):\n\t\t\"\"\"\n\t\tAllows to add a node, only if the id is not already used.\n\t\t@param node: the node to add\n\t\t@type node: Node\n\t\t@return: True if added, False if no.        \n\t\t@rtype: Bool\n\t\t\"\"\"\n\n\t    _copyNodeExtend(self, padmet, node_id):\n\t\t\"\"\"\n\t\tAllows to copy a node from an other padmet with the first childrens only.\n\t\tRecursive function, call itself for the relations where the node is \"in\"\n\t\tNB: particular case: we dont want to recovere the relations \"prot catalyses reaction\"\n\t\tdo nothing for the relations where the node is \"out\"\n\t\t@param padmet: Padmet from where to copy the node.\n\t\t@param node_id: the id of the node to copy.\n\t\t@type padmetRef: PadmetSpec/Ref\n\t\t@type node_id: str\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    copyNode(self, padmet, node_id):\n\t\t\"\"\"\n\t\tcopyNode() allows to copy a node from an other padmetSpec or padmetRef. It copies all \n\t\tthe relations 'in' and 'out' and it calls the function \n\t\t_copyNodeExtend() to recover the associated node.\n\t\t@param Padmet: PadmetSpec/Ref from where to copy the node\n\t\t@param node_id: the id of the node to copy\n\t\t@type padmetRef: PadmetSpec/Ref\n\t\t@type node_id: str\n\t\t@return: _\n\t\t@rtype: None\n\t\t\"\"\"\n\n\t    delNode(self, node_id):\n\t\t\"\"\"\n\t\tAllows to delete a node, the relations associated to the node, and for \n\t\tsome relations, delete the associated node. \n\t\tFor relations where the node to del is 'in': \n\t\t    if rlt type in ['has_xref','has_name','has_suppData']: delNode out\n\t\tFor relations where the node to del is 'out':\n\t\t    if rlt type in ['consumes','produces']\n\t\t@param node_id: id of node to delete\n\t\t@type node_id: str\n\t\t@return: True if node successfully deleted, False if node not in dicOfNode\n\t\t@rtype: Bool\n\t\t\"\"\"\n\n\t    updateNode(self, node_id, data, action, verbose = False):\n\t\t\"\"\"\n\t\tAllows to update miscellaneous data of a Node.\n\t\t@param node_id: the id of node to update\n\t\t@param data: tuple with data[0] refere to the miscellaneous data key \n\t\t(ex: common_name, direction ...), data[1] is a list of value to add / update.\n\t\tdata[1] can be None if the action is to pop the key\n\t\t@param action: if == \"add\": the list data[1] wil be added (ex: adding a common_name)\n\t\tif == \"remove\": if data[1] is not None, the list data[1] will be removed (ex: remove just one specifique common_name)\n\t\tif == \"update\":data[1] is the new value of the key data[0]\n\t\tex: updateNode('RXN-5',('direction',['LEFT-TO-RIGHT']),update). The \n\t\treaction' direction will be change to left2right\n\t\t@param node_id: the id of the node to update\n\t\t@param data: tuple of data to update, data[0] is the key, data[1] is a value, list or None\n\t\t@param action: action in ['add','pop','remove','update']. Check description for more information\n\t\t@param verbose: print more info\n\t\t@type node_id, action: str\n\t\t@type data: list or None\n\t\t@type verbose: Bool\n\t\t@return: True if successfully updated, False if no\n\t\t@rtype: Bool\n\t\t\"\"\"\n\n\t#==============================================================================\n\t# For Relations:     \n\t#==============================================================================\n\n\t    _delRelation(self, relation):\n\t\t\"\"\"\n\t\tDelete a relation from dicOfRelationIn and out\n\t\t@param relation: the relation to delete\n\t\t@type relation: Relation\n\t\t@return: True if succesfully deleted\n\t\t@rtype: Bool\n\t\t\"\"\"\n\n\t    _addRelation(self,relation):\n\t\t\"\"\"\n\t\tAddRelation() allows to add a relation if not already in allRelations.\n\t\t@param relation: the relation to add\n\t\t@type relation: Relation\n\t\t@return: true if relation was successfully added\n\t\t@rtype: bool\n\t\t\"\"\"\n\n\t#==============================================================================\n\t# manipulating de novo node:     \n\t#==============================================================================\n\t    \n\t    _basicNode(self, _type):\n\t\t\"\"\"\n\t\tFor padmetSpec, when creating a new node, a new id is creating. This id\n\t\tstart with 'SPE_' for padmetSpec (META_ for padmetRef).\n\t\tThis function generate a new id and an empty node with this id.\n\t\t@param _type: the type of the node to create\n\t\t@return: (newId,newNode)\n\t\t@rtype: tuple(str, Node)\n\t\t\"\"\"\n\n\t    getMaxLocalID(self):\n\t\t\"\"\"\n\t\tFor padmetSpec, when creating a new node, a new id is creating. This id\n\t\tstart with 'SPE_' for padmetSpec (META_ for padmetRef) + an incremented int.\n\t\tThis function extracts the max int (or max local id)\n\t\t@return: the max local id\n\t\t@rtype: int\n\t\t\"\"\"\n\n\t    createNode(self, _type, dicOfMisc, listOfRelation = None):\n\t\t\"\"\"\n\t\tCreation of new node to add in the network.\n\t\tuse ._basicNode first then completes the node with more informations\n\t\t@param _type: type of node (gene, reaction...)\n\t\t@param dicOfMisc: dictionnary of miscellaneous data\n\t\t@param listOfRelation: list of list of data needed to create a relation. (id_in,type,id_out,misc)\n\t\t@type _type: str\n\t\t@type dicOfMisc: dict\n\t\t@type listOfRelation: = None, List.\n\t\t@return: (new_id,new_node)\n\t\t@rtype: tuple(str, Node)\n\t\t\"\"\"\n\naspGenerator.py\nDescription:\nThis module contains functions to convert a padmet file to predicats for ASP\n\n\tasp_synt(pred, list_args):\n\t    \"\"\"\n\t    create a predicat for asp\n\n\t    @example: asp_synt(\"direction\",[\"R1\",\"REVERSIBLE\"]) => \"direction('R1','reversible').\"\n\t    @param pred: the predicat\n\t    @param list_args: list of atoms to put in the predicat\n\t    @type pred: str\n\t    @type list_args: list\n\t    @return: the predicat 'pred(''list_args[0]'',''list_args[1]'',...,''list_args[n]'').'\n\t    @rtype: str\n\t    \"\"\"\n\n\tpadmet_to_asp(padmet_file, output, verbose = False):\n\t    \"\"\"\n\t    Convert PADMet to ASP following these predicats:\n\t    common_name({reaction_id or enzyme_id or pathway_id or compound_id} , common_name)\n\t    direction(reaction_id, reaction_direction). reaction_direction in[LEFT-TO-RIGHT,REVERSIBLE]\n\t    ec_number(reaction_id, ec(x,x,x)).\n\t    catalysed_by(reaction_id, enzyme_id).\n\t    uniprotID(enzyme_id, uniprot_id). #if has has_xref and db = \"UNIPROT\"\n\t    in_pathway(reaction_id, pathway_id).\n\t    reactant(reaction_id, compound_id, stoechio_value).\n\t    product(reaction_id, compound_id, stoechio_value).\n\t    is_a(compound_id, class_id).\n\t    is_a(pathway_id, pathway_id).\n\n\t    @param padmet_file: the path to padmet file to convert\n\t    @param output: the path to the output to create\n\t    @param verbose: print informations\n\t    @type padmet_file: str\n\t    @type output: str\n\t    @type verbose: bool\n\t    @return: _\n\t    @rtype: None\n\t    \"\"\"\n\n\tpadmetSpec_to_asp_for_deadend(padmetSpec_file, output, seeds_file, targets_file, verbose = False):\n\t    \"\"\"\n\t    create .lp to run deadend_encoding.lp\n\t    predicats rules:\n\t    reaction('reaction_id').\n\t    reversible('reaction_id').\n\t    reactant('reactant_id', 'reaction_id').\n\t    product('product_id', 'reaction_id').\n\t    seed('seed_id').\n\t    target('target_id').\n\t    \n\t    @param padmetSpec_file: the path to padmet file to convert\n\t    @param output: the path to the output to create\n\t    @param seeds_file: the path to the file containing the seeds identifiers, 1/line\n\t    @param targets_file: the path to the file containing the targets identifiers, 1/line\n\t    @param output: the path to the output to create\n\t    @param verbose: print informations\n\t    @type padmetSpec_file, output, seeds_file, targets_file: str\n\t    @type verbose: bool\n\t    @return: _\n\t    @rtype: None\n\t    \"\"\"    \n\nsbmlGenerator.py\nDescription:\nThe module sbmlGenerator contains functions to generate sbml files from padmet and txt\nusign the libsbml package\n\n\tcheck(value, message):\n\t    \"\"\"If 'value' is None, prints an error message constructed using\n\t    'message' and then exits with status code 1.  If 'value' is an integer,\n\t    it assumes it is a libSBML return status code.  If the code value is\n\t    LIBSBML_OPERATION_SUCCESS, returns without further action; if it is not,\n\t    prints an error message constructed using 'message' along with text from\n\t    libSBML explaining the meaning of the code, and exits with status code 1.\n\t    \"\"\"\n\n\tpadmet_to_sbml(padmet_file, output, obj_fct = None, sbml_lvl = 2, sbml_version = 1, verbose = False):\n\t    \"\"\"\n\t    Convert padmet file to sbml file.\n\t    Specificity: \n\t    - ids are encoded for sbml using functions sbmlPlugin.convert_to_coded_id\n\t    @param padmet_file: the pathname to the padmet file to convert\n\t    @param output: the pathname to the sbml file to create\n\t    @param obj_fct: the identifier of the objection function, the reaction to test in FBA\n\t    @param sbml_lvl: the sbml level\n\t    @param sbml_version: the sbml version\n\t    @param verbose: print informations\n\t    @type padmet_file, output, verbose: str\n\t    @type sbml_lvl, sbml_version: int\n\t    @return: check return of writeSBMLToFile\n\t    @rtype: int\n\t    \"\"\"\n\n\t#################################\n\n\treactions_to_SBML(reactions_file, output, padmetRef_file, verbose = False):\n\t    \"\"\"\n\t    convert a list of reactions to sbml format based on a given padmet of reference.\n\t    - ids are encoded for sbml using functions sbmlPlugin.convert_to_coded_id\n\t    @param reactions_file:the pathname to the file containing the reactions ids, 1/line\n\t    @param padmetRef_file: the pathname to the file padmet of reference\n\t    @param output: the pathname to the sbml file to create\n\t    @param sbml_lvl: the sbml level\n\t    @param sbml_version: the sbml version\n\t    @param verbose: print informations\n\t    @type reactions_file, output, padmetRef_file, verbose: str\n\t    @type sbml_lvl, sbml_version: int\n\t    @return: check return of writeSBMLToFile\n\t    @rtype: int\n\t    \"\"\"\n\n\tcompounds_to_sbml(compounds_file, output, padmetRef_file = None, padmetSpec_file = None, compart_name = None, sbml_lvl = 2, sbml_version = 1, verbose = False):\n\t    \"\"\"\n\t    convert a list of compounds to sbml format\n\t    if compart_name is not None, then the compounds id will by: M_originalID_compart_name\n\t    if verbose and specified padmetRef and/or padmetSpec: will check if compounds are in one of the padmet files\n\t    Ids are encoded for sbml using functions sbmlPlugin.convert_to_coded_id\n\t    @param compounds_file:the pathname to the file containing the compounds ids, 1/line\n\t    @param output: the pathname to the sbml file to create\n\t    @param padmetRef_file: the pathname to the file padmet of reference\n\t    @param padmetRef_file: the pathname to the file padmet of a species\n\t    @param compart_name: the default compart to concatenate\n\t    @param sbml_version: the sbml version\n\t    @param verbose: print informations\n\t    @type compounds_file, output, padmetRef_file, padmetSpec_file, verbose: str\n\t    @type sbml_lvl, sbml_version: int\n\t    @return: check return of writeSBMLToFile\n\t    @rtype: int\n\t    \"\"\"\n\nsbmlPlugin.py\nDescription:\nThis module contains some functions used for sbml file in addition to libsbml\n\"\"\"\n\n\tparseNotes(element):\n\t    \"\"\"\n\t    From an SBML element (ex: species or reaction) will return all the section\n\t    note in a dictionnary.\n\t    ex:\n\t    <notes>\n\t\t<html:body>\n\t\t    <html:p>BIOCYC: |Alkylphosphonates|</html:p>\n\t\t    <html:p>CHEBI: 60983</html:p>\n\t\t</html:body>\n\t     </notes>\n\t    output: {'BIOCYC': ['Alkylphosphonates'],'CHEBI':['60983']}\n\t    value is a list in case diff lines for the same type of info\n\n\t    @param element: an element from libsbml\n\t    @type element: libsbml.element\n\t    @return: the dictionnary of note\n\t    @rtype: dict\n\t    \"\"\"\n\n\textractFormula(elementR):\n\t    \"\"\"\n\t    From an SBML reaction_element will return the formula in a string\n\t    ex: '1.0 FRUCTOSELYSINE_p => 1.0 FRUCTOSELYSINE_c'\n\t    @param elementR: a reaction from libsbml.element\n\t    @type eleemntR: lisbsml.element\n\t    @return: the formule\n\t    @rtype: str\n\t    \"\"\"\n\n\tparseGeneAssoc(GeneAssocStr):\n\t    \"\"\"\n\t    Given a grammar of 'and', 'or' and '(' ')'. Extracts genes ids to a list.\n\t    (geneX and geneY) or geneW' => [geneX,geneY,geneW]\n\t    @param GeneAssocStr: the string containing genes ids\n\t    @type GeneAssocStr: str\n\t    @return: the list of unique ids\n\t    @rtype: list\n\t    \"\"\"\n\n\tconvert_to_coded_id(uncoded, _type = None, compart = None):\n\t    \"\"\"\n\t    convert an id to sbml valid format. First add type of id \"R\" for reaction\n\t    \"M\" for compound at the start and the compart at the end.\n\t    _type+\"_\"+uncoded+\"_\"+compart\n\t    then remplace not allowed char by interger ordinal\n\t    @param uncoded: the original id to code\n\t    @param _type: the type of the id (ex: 'R' or 'M')\n\t    @param _compart: the compartiment of the id (ex: 'c' or 'e')\n\t    @type uncoded, _type, _compart: str\n\t    @return: the coded id\n\t    @rtype: str\n\t    \"\"\"\n\n\tascii_replace(match):\n\t    \"\"\"\n\t    recover banned char from the integer ordinal in the reg.match\n\t    \"\"\"\n\n\tconvert_from_coded_id(coded):\n\t    \"\"\"\n\t    convert an id from sbml format to the original id. try to extract the type of\n\t    the id and the compart using strong regular expression\n\t    @param coded: the encoded id\n\t    @type coded: str\n\t    @return: (the uncoded id, type=None, compart=None)\n\t    @rtype: tuple\n\t    \"\"\"\n\n\tdecode_bigg(identifier):\n\t    \"\"\"Clean BiGG dirty identifiers from SBML\n\t    #TODO obsolete, to delete ?\n\t    ``identifier.lstrip('M_').rstrip('_e').rstrip('_b').rstrip('_c').replace('DASH', '')``\n\t\t- Remove '__DASH__' pattern\n\t\t- Remove 'M_' or 'R_' prefix\n\t\t- Remove '_x' suffix of compartment info\n\n\n\t    .. warning:: We assume that any compartment is composed of:\n\t\t- 1 character ONLY\n\t\t- the unique character IS NOT a digit\n\n\t    :param arg1: encoded id\n\t    :type arg1: <str>\n\t    :return: Return (decoded id,compart) None in case of failure (bad prefix)\n\t    :rtype: <str> or None\n\t    \"\"\"\n\nwikiGenerator.py\nDescription:\nContains all necessary function to generate wikiPages from a padmet file and update \na wiki online. Require WikiManager module (with wikiMate,Vendor)\n\"\"\"\n\tcreate_all_wikiPages(padmetRef_file, padmetSpec_file, output_dir, verbose = False):\n\t    \"\"\"\n\t    Main function to generete wikiPages for a padmet. The padmetRef is used to add extra\n\t    information from the full database (ex: the numbers of total reactions in a pathway)\n\t    Steps:\n\t    0/ In output_dir, create 4 folder: metabolites, reactions, genes, pathways, navigation.\n\t    1/ Get all reactions, metabolites in reactions, pathways and genes\n\t    2/ for each element, create a file from the specific template in wikiCode\n\n\t    @param padmetRef_file: the pathname to the file padmet of reference\n\t    @param padmetSpec_file: the pathname to the file padmet to convert to wiki\n\t    @param output_dir: the pathname to folder where to store\n\t    @param verbose: print informations\n\t    @type padmetRef_file, padmetSpec_file, output_dir, verbose: str\n\t    @return: _\n\t    @rtype: None\n\t    \"\"\"\n\n\tcreateDirectory(dirPath, verbose = False):\n\t    \"\"\"\n\t    create the folders genes, reactions, metabolites, pathways in the folder dirPath/\n\t    if already exist, it will replace old folders (and delete old files)\n\t    \"\"\"\n\n\tmp_createWikiPageGene(gene_id):\n\t    \"\"\"\n\t    multiProcessing version of the function.\n\t    @param gene_id: the id of the gene to create a wiki page\n\t    @type gene_id: str\n\t    @return: _\n\t    @rtype: None\n\t    \"\"\"\n\n\tcreateWikiPageGene(padmetSpec, gene_template, gene_id):\n\t    \"\"\"\n\t    create a file with all the wikicode to create the page of the given Gene\n\t    @param padmetSpec: the Padmet instance of the network\n\t    @param gene_template: the template gene page\n\t    @param gene_id: gene id\n\t    @type padmetSpec: PadmetSpec\n\t    @type gene_template: list\n\t    @type gene_id: str\n\t    @return: pageInArray corresponding to the wikiPage\n\t    @rtype: list\n\t    \"\"\"\n\n\tmp_createWikiPageReaction(reaction_id):\n\t    \"\"\"\n\t    multiProcessing version of the function.\n\t    @param reactop,_id: the id of the reaction to create a wiki page\n\t    @type reaction_id: str\n\t    @return: _\n\t    @rtype: None\n\t    \"\"\"\n\n\tcreateWikiPageReaction(padmetRef, padmetSpec, reaction_template, reaction_id):\n\t    \"\"\"\n\t    create a file with all the wikicode to create the page of the given Reaction\n\t    @param padmetSpec: the Padmet instance of the network\n\t    @param reaction_template: the template reaction page\n\t    @param reactop,_id: reaction id\n\t    @type padmetSpec: PadmetSpec\n\t    @type reaction_template: list\n\t    @type reaction_id: str\n\t    @return: pageInArray corresponding to the wikiPage\n\t    @rtype: list\n\t    \"\"\"\n\n\tmp_createWikiPagePathway(pathway_id):\n\t    \"\"\"\n\t    multiProcessing version of the function.\n\t    @param pathway_id: the id of the pathway to create a wiki page\n\t    @type pathway_id: str\n\t    @return: _\n\t    @rtype: None\n\t    \"\"\"\n\n\tcreateWikiPagePathway(padmetRef, padmetSpec, pathway_template, pathway_id):\n\t    \"\"\"\n\t    create a file with all the wikicode to create the page of the given Reaction\n\t    @param padmetSpec: the Padmet instance of the network\n\t    @param pathway_template: the template pathway page\n\t    @param pathway_id: pathway id\n\t    @type padmetSpec: PadmetSpec\n\t    @type pathway_template: list\n\t    @type pathway_id: str\n\t    @return: pageInArray corresponding to the wikiPage\n\t    @rtype: list\n\t    \"\"\"\n\n\tmp_createWikiPageMetabolite(metabolite_id):\n\t    \"\"\"\n\t    multiProcessing version of the function.\n\t    @param metabolite_id: the id of the metabolite to create a wiki page\n\t    @type metabolite_id: str\n\t    @return: _\n\t    @rtype: None\n\t    \"\"\"\n\n\tcreateWikiPageMetabolite(padmetSpec, metabolite_template, metabolite_id):\n\t    \"\"\"\n\t    create a file with all the wikicode to create the page of the given metabolite\n\t    @param padmetSpec: the Padmet instance of the network\n\t    @param metabolite_template: the template metabolite page\n\t    @param metabolite_id: metabolite id\n\t    @type padmetSpec: PadmetSpec\n\t    @type metabolite_template: list\n\t    @type metabolite_id: str\n\t    @return: pageInArray corresponding to the wikiPage\n\t    @rtype: list\n\t    \"\"\"\n\n\tassoc_correspondance(type_of_assoc):\n\t    \"\"\"\n\t    The association gene-reaction can be convert to something more meaningful than a\n\t    simple tag. the dictionnary dictOfAssoc make the link for some of the associations.\n\t    @param type_of_assoc: the evidence allowing to link a gene to a reaction\n\t    @type type_of_assoc: str\n\t    @return: the meaningful correspondence\n\t    @rtype: str\n\t    \"\"\"\n\n\txrefLink(xrefNode):\n\n\tcreateDefaultPage():\n\t    \"\"\"\n\t    Default pages are the pages used in a wiki to navigate: the category, the sidebar, the mainpage.\n\t    Sidebar: in the sidebar allows to navigate between categories of nodes and origins of reactions.\n\t    The origin of a reaction is recovered from node.misc['source']. if no source from the suppData\n\t    associated to this reaction suppdata_node.misc['origin_file]\n\t    \"\"\"\n\n\tcreateWikiFile(pageInArray,fileName):\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://gitlab.inria.fr/DYLISS/padmet",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "padmet",
    "platform": "",
    "project_url": "https://pypi.org/project/padmet/",
    "release_url": "https://pypi.org/project/padmet/2.5.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Padmet package for metabolic network",
    "version": "2.5.2"
  },
  "releases": {
    "2.4.22": [],
    "2.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "12858a133b8da9aba47dcc74a34d5c40",
          "sha256": "03c42ba4c2675de916ac4f1fe98583ccdd41ea8c91a2ba6b571458752e3f8a02"
        },
        "downloads": 0,
        "filename": "padmet-2.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "12858a133b8da9aba47dcc74a34d5c40",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 57138,
        "upload_time": "2017-06-19T08:57:14",
        "url": "https://files.pythonhosted.org/packages/c2/3e/2d33ff67af16b7dcad55781ccace5f454eb66b4cf4e3b28bbb7263e3f524/padmet-2.5.0.tar.gz"
      }
    ],
    "2.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fb7e910bafb5605045f6e8a87b974cde",
          "sha256": "57bed4e90158b7b4f59a7b5e16993fe3122c34034cb20dcf87da0d72fbe788d7"
        },
        "downloads": 0,
        "filename": "padmet-2.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fb7e910bafb5605045f6e8a87b974cde",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 57129,
        "upload_time": "2017-08-22T13:47:26",
        "url": "https://files.pythonhosted.org/packages/f1/59/afbc8da0662777cd53f12162ae8c7318e5909cf2b0ee4ddc2309c1b9b9d0/padmet-2.5.1.tar.gz"
      }
    ],
    "2.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d56e565209db232bdac058788115c9ae",
          "sha256": "4379e928fae3db66f7e6ca04efd6b3cd9168c89831225b5e251afa65e73e20bc"
        },
        "downloads": 0,
        "filename": "padmet-2.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d56e565209db232bdac058788115c9ae",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 57159,
        "upload_time": "2017-08-23T08:21:31",
        "url": "https://files.pythonhosted.org/packages/a1/ff/cdd7d1a9f7ba1ec2209289a90cfab5be00dd979762e4fe973101ef431526/padmet-2.5.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d56e565209db232bdac058788115c9ae",
        "sha256": "4379e928fae3db66f7e6ca04efd6b3cd9168c89831225b5e251afa65e73e20bc"
      },
      "downloads": 0,
      "filename": "padmet-2.5.2.tar.gz",
      "has_sig": false,
      "md5_digest": "d56e565209db232bdac058788115c9ae",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 57159,
      "upload_time": "2017-08-23T08:21:31",
      "url": "https://files.pythonhosted.org/packages/a1/ff/cdd7d1a9f7ba1ec2209289a90cfab5be00dd979762e4fe973101ef431526/padmet-2.5.2.tar.gz"
    }
  ]
}