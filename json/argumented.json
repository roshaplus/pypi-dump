{
  "info": {
    "author": "Sam Clements",
    "author_email": "sam@borntyping.co.uk",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Topic :: Software Development",
      "Topic :: Software Development :: Testing"
    ],
    "description": "==========\r\nargumented\r\n==========\r\n\r\n.. image:: https://pypip.in/v/argumented/badge.png\r\n    :target: https://pypi.python.org/pypi/argumented/\r\n    :alt: Latest PyPI version\r\n\r\n.. image:: https://travis-ci.org/borntyping/python-argumented.png\r\n    :target: https://travis-ci.org/borntyping/python-argumented\r\n    :alt: Travis build status\r\n\r\n**argumented** provides a way of 'multiplying' functions - usually test cases - allowing them to be called with multiple argument sets and still appear as separate functions.\r\n\r\nIt provides several decorators that can be used to add argument sets, and then unpack them.\r\n\r\nDecorators\r\n==========\r\n\r\nThe argument decorators can be used multiple times, or used together - each of them takes the arguments they are given and passes it to ``pack_arguments(func, *args, **kwargs)``, which adds a wrapped function to ``func.__argumented__``.\r\n\r\n``@argument(*args, **kwargs)``\r\n------------------------------\r\n\r\nAdds the given argument set\r\n\r\n``@argument_list(*args)``\r\n-------------------------\r\n\r\nAdds each item in args as an argument set\r\n\r\n``@argument_tuples(*args)``\r\n---------------------------\r\n\r\nEach item in `*args` must be a tuple containing an interable and a mapping, which will then be used as an argument set (i.e. `([], {})`)\r\n\r\n``@unpack_arguments``\r\n---------------------\r\n\r\nUnpacks all of the argument sets in a class, replacing each function with a list of argument sets with wrapped functions that call each argument set. The wrapped functions are named ``{original name}_{argument set index}``.\r\n\r\nExample\r\n=======\r\n\r\nIn the following example, each test cases would be replaced with two test cases, which would each call the test case with the given arguments.\r\n\r\n::\r\n\r\n\tfrom unittest import TestCase\r\n\tfrom argumented import *\r\n\r\n\t@unpack_arguments\r\n\tclass TestArgumentedCases (TestCase):\r\n\t\t\t\r\n\t\t@argument(\"hello\", thing=\"world\")\r\n\t\t@argument(\"goodbye\", thing=\"world\")\r\n\t\tdef test_greeting (self, greeting, thing):\r\n\t\t\tself.assertIn(greeting, [\"hello\", \"goodbye\"])\r\n\t\t\tself.assertEquals(thing, \"world\")\r\n\t\t\r\n\t\t@argument_list(1, 2)\r\n\t\tdef test_with_arguments (self, n):\r\n\t\t\tself.assertIsInstance(n, int)\r\n\t\t\r\n\t\t@argument_tuples( ([1, 2], {'a': 'A'}), ([1, 2], {'a': 'B'}) )\r\n\t\tdef test_with_arguments (self, *args, **kwargs):\r\n\t\t\tself.assertEquals(args, (1, 2))\r\n\t\t\tself.assertIn(kwargs['a'], ['A', 'B'])\r\n\r\nThis example can also be found in ``test_argumented.py``.\r\n\r\nLicense\r\n=======\r\n\r\n**argumented** is licensed under the MIT License and was originally inspired by `ddt <http://github.com/santtu/ddt>`_.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/borntyping/python-argumented",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "argumented",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/argumented/",
    "release_url": "https://pypi.org/project/argumented/1.1/",
    "requires_python": null,
    "summary": "Multiply test cases or functions into several functions with argument sets",
    "version": "1.1"
  },
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2863c97a236a01828d9945892eedfb96",
          "sha256": "9c8845f8efd079cf5318c01a5dbeca22b2ecaed31d362d032191e4f9aef963c8"
        },
        "downloads": 2631,
        "filename": "argumented-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2863c97a236a01828d9945892eedfb96",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2413,
        "upload_time": "2012-11-25T18:15:46",
        "url": "https://files.pythonhosted.org/packages/d6/4f/bb03f666fc12cb50a30df23a5221997ebe30bee8cdd6a5e56a3f5c68ae46/argumented-1.0.1.tar.gz"
      }
    ],
    "1.1": [],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d4f31d59dcb89e03df011593b2c0c7da",
          "sha256": "17e2b36cdd7bd54dfaae226f9a5790c361d08473637b0b8aaaa72ae141691d02"
        },
        "downloads": 3017,
        "filename": "argumented-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d4f31d59dcb89e03df011593b2c0c7da",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2882,
        "upload_time": "2013-07-27T12:56:38",
        "url": "https://files.pythonhosted.org/packages/01/06/7d09f7e6867a5b967621d7eb5934ad0730232617013fc525abda804bc56e/argumented-1.1.0.tar.gz"
      }
    ]
  },
  "urls": []
}