{
  "info": {
    "author": "Yang Fang",
    "author_email": "yangfangscu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "PhySpeTree: automatically reconstructing phylogenetic species tree\n==============================================================================\n\n|PyPI version| |Docs| |License|\n\n**PhySpeTree is implemented in Python 2.7, designed for Linux system.**\n\n**Documents**: `PhySpeTree documentation <https://yangfangs.github.io/physpetools>`_.\n\n.. contents:: :local:\n\n\nIntroduction\n------------------------------------------------------------------------------\nUnderstanding phylogenetic relationships between different species is crucial for evolutionary studies. Reconstructing the\nphylogenetic species tree, a branching diagram, is particularly useful in inferring evolutionary relationships. For example,\nthe tree-of-life provides a remarkable view of organizing principles of the biological world. So, the exact species tree to\nbe reconstructed is necessary, but the process of reconstructing the species or gene tree is very tedious.\n\nHere, we developed an easy-to-use package named PhySpeTree that is convenient to reconstruct species trees by one command line.\nTwo independent pipelines were included by using the most adopted small subunit ribosomal RNA (SSU rRNA) and concatenated highly\nconserved proteins (HCP), respectively. A distinct advantage is that users only need to input species names and PhySpeTree\nautomatically downloads and analyzes sequences of SSU rRNA or HCP from about 4,000 organisms.\n\nPhySpeTree workflow\n------------------------------------------------------------------------------\n\n.. image:: https://raw.githubusercontent.com/yangfangs/physpetools/master/docs/docs/img/PhySpeTree_work_follow.png\n\n\nPhySpeTree workflow includes the following steps:\n\n1. Prepare `abbreviated species names <https://raw.githubusercontent.com/yangfangs/physpetools/master/examples/organism_example_list.txt>`_.\n\n2. Choose the method to reconstruct species trees (SSU rRNA (--srna) or HCP (--hcp)).\n\n3. Query, parse, and retrieve sequences in the FASTA format.\n\n4. Multiple sequence alignment and concatenate HCP.\n\n5. Select conserved blocks.\n\n6. Reconstruct species trees.\n\n7. Output trees.\n\n\n\nFeatures\n--------------------------------------------------------------------------------\n- Inputs only include species names.\n\n- One command line to build trees.\n\n- HCP and SSU rRNA methods.\n\n- Combine trees.\n\n- View trees with iTOL.\n\n- Versatile software with adjustable parameters.\n\n\nInstall\n-------------------------------------------------------------------------------\n\n1. PyPI\n\n.. code-block:: console\n\n\t$ pip install PhySpeTree\n\n\nor `download PhySpeTree <https://pypi.python.org/pypi/PhySpeTree/>`_ and install:\n\n.. code-block:: console\n\n    $ pip install PhySpeTree-*.tar.gz\n\n\nTo upgrade to latest version:\n\n.. code-block:: console\n\n    $ pip install --upgrade PhySpeTree\n\n2. GitHub\n\n.. code-block:: console\n\n    $ git clone git@github.com:yangfangs/physpetools.git\n    $ cd physpetools\n    $ python setup.py install\n\nor `download <https://github.com/yangfangs/physpetools/releases>`_ and install:\n\n.. code-block:: console\n\n    $ pip install physpetools-*.tar.gz\n\n\n\nUsage\n-------------------------------------------------------------------------------\n\nautobuild\n^^^^^^^^^^^^^^^^^^^^\n\nThe input of `autobuild` module is a TXT file containing abbreviated species names, for example `organism example list <https://raw.githubusercontent.com/yangfangs/physpetools/master/examples/organism_example_list.txt>`_.\n\nUse **autobuild** in command line like this:\n\n.. code-block:: console\n\n    $ PhySpeTree -i organism_example_list.txt [options]*\n\n\nautobuild options\n#####################\n\n-h\n    Print help message and exits.\n\n-i\n    Input a TXT file containing abbreviated species names.\n\n-o\n    A directory to store outputs. The default is \"Outdata\".\n\n-t\n    Number of processing threads (CPUs). The default is 1.\n\n-e\n    FASTA format files to extend the tree with the --ehcp or --esrna option.\n\n--hcp\n\n    HCP (highly conserved protein) method (default).\n\n--ehcp\n\n    HCP method with extended HCP sequences.\n\n--srna\n\n    SSU method.\n\n--esrna\n\n    SSU rRNA method with extended SSU rRNA sequences.\n\n\nAdvance options\n#####################\n\nAdvanced options of internal software called in PhySpeTree can be set. These options are ``enclosed in single quotes and start with a space``.\n\nHere is an example of setting RAxML advanced options by `--raxml_p`:\n\n.. code-block:: console\n\n    $ PhySpeTree autobuild -i organism_example_list.txt -o test --srna --raxml --raxml_p ' -f a -m GTRGAMMA  -p 12345 -x 12345 -# 100 -n T1'\n\n--muscle\n    Multiple sequence alignment by MUSCLE (default).\n\n\n--muscle_p\n    Set Muscle advance parameters. The default is ``-maxiter 100``, please see\n    `MUSCLE Manual <http://www.drive5.com/muscle/manual/options.html>`_.\n\n    -maxiter\n        maximum number of iterations to run is set 100.\n\n--clustalw\n    Multiple sequence alignment by clustalw2.\n\n--clustalw_p\n    Set clustalw2 advance parameters. Here use clustalw default parameters,\n    please see `Clustalw Help <http://www.clustal.org/download/clustalw_help.txt>`_.\n\n--mafft\n    Multiple sequence alignment by mafft.\n\n--mafft_p\n    Set mafft advance parameters. Here use mafft default parameters,\n    please see `mafft algorithms <http://mafft.cbrc.jp/alignment/software/algorithms/algorithms.html>`_.\n\n--gblocks\n    Trim by Gblocks.(default)\n\n--gblocks_p\n    Set Gblocks advance parameters,\n    please see `Gblocks documentation <http://molevol.cmima.csic.es/castresana/Gblocks/Gblocks_documentation.html>`_.\n\n    -t\n        Choice type of sequence(default).\n\n    -e\n        Generic File Extension. PhySpeTree set default is \"-gbl1\".\n\n--trimal\n    Trim by trimal.\n\n--trimal_p\n    Set trimal advance parameters, please see `trimal command line <http://trimal.cgenomics.org/use_of_the_command_line_trimal_v1.2>`_.\n\n--raxml\n    Reconstruct phylogenetic tree by RAxML (default).\n\n--raxml_p\n    Set RAxML advanced parameters. The default is ``-f a -m PROTGAMMAJTTX  -p 12345 -x 12345 -# 100 -n T1``,\n    please see `RAxML Manual <http://sco.h-its.org/exelixis/resource/download/NewManual.pdf>`_.\n\n    -f\n        select algorithm. The PhySpeTree default set is ``a``, rapid Bootstrap analysis and search for best\u00adscoring ML tree in one program run.\n\n    -m\n        Model of Binary (Morphological), Nucleotide, Multi\u00adState, or Amino Acid Substitution. The PhySpeTree default set is PROTGAMMAJTTX.\n\n    -p\n        Specify a random number seed for the parsimony inferences. The physep default set is 12345.\n\n    -x\n        Specify an integer number (random seed) and turn on rapid bootstrapping. The PhySpeTree default set is 12345.\n\n    -N\n        The same with -# specify the number of alternative runs on distinct starting trees. The PhySpeTree default set is 100.\n\n\n--fasttree\n    Reconstruct phylogenetic tree by FastTree.\n\n--fasttree_p\n    Set FastTree advance parameters,\n    please see `FastTree <http://www.microbesonline.org/fasttree/>`_.\n\nbuild\n^^^^^^^^^^^^^^^^^^^^\n\nThe `build` module is used to reconstruct species trees with manually prepared sequences. Advanced options are the same as `autobuild` module.\n\nUse **build** in command line to reconstruct phylogenetic tree:\n\n* build phylogenetic tree by HCP method:\n\n\n.. code-block:: console\n\n    $ PhySpeTree build -i example_hcp -o output --hcp\n\n\n* build phylogenetic tree by SSU rRNA method:\n\n\n.. code-block:: console\n\n    $ PhySpeTree build -i example_16s_ssurna.fasta -o output --sran\n\nbuild options\n#####################\n\n-h\n    Print help message and exits.\n\n-i\n    Input a TXT file containing abbreviated species names.\n\n-o\n    A directory to store outputs. The default is \"Outdata\".\n\n-t\n    Number of processing threads (CPUs). The default is 1.\n\n--hcp\n\n    HCP method (default).\n\n--srna\n\n    SSU rRNA method.\n\ncombine\n^^^^^^^^^^^^^^^^^^^^\n\nThe **combine** module is used to combine trees generated from different methods. It contains two steps, at first merge different tree files into the same file. You can use `cat` bash command in the Linux system, for example:\n\n.. code-block:: console\n\n    $ cat tree1.tree tree2.tree > combineTree.tree\n\n\nThen, use **combine**\n\n.. code-block:: console\n\n    $ PhySpeTree PhySpeTree combine -i combineTree.tree [options]*\n\n\ncombine options\n#####################\n\n-h\n    Print help message and exits.\n\n-i\n    Input PHYLIP format file containing multiple trees.\n\n-o\n    Output directory. The default is \"combineTree\".\n\n--mr\n    Majority rule trees..\n\n--mre\n    Extended majority rule trees.\n\n--strict\n    Strict consensus trees.\n\n\niview\n^^^^^^^^^^^^^^^^^^^^\n\nPhySpeTree provides the `iview` module to annotate taxonomic information (kingdom, phylum, class, or order) of output trees and to generate configure files linked to `iTol <http://itol.embl.de/)>`_.\n\n\nUse **iview** in command line like this:\n\n.. code-block:: console\n\n    $ PhySpeTree iview -i organism_example_list.txt --range\n\n\niview options\n#####################\n\n\n-h\n    Print help message and exits.\n\n-i\n    Input a TXT file containing abbreviated species names.\n\n-o\n    A directory to store outputs. The default is \"iview\".\n\n-r\n    Annotating labels with ranges by kingdom, phylum, class or order. The default is phylum.\n\n-c\n    Annotating labels without ranges by kingdom, phylum, class or order. The default is phylum.\n\n-a\n    Colored ranges by users assign, users can choice from [kingdom, phylum, class and order].\n\n-l\n    Change species labels from abbreviated names to full names.\n\ncheck\n^^^^^^^^^^^^^^^^^^^^\n\nThe `check` module is used to check whether input organisms are in pre-built databases.\n\n\n.. code-block:: console\n\n    $ PhySpeTree check -i organism_example_list.txt -out check --ehcp\n\n\n\ncheck options\n#####################\n\n\n\n-h\n    Print help message and exits.\n\n-i\n    Input a TXT file containing abbreviated species names.\n\n-o\n    A directory to store outputs. The default is \"check\".\n\n--hcp\n   Check whether organisms are supported in the KEGG database.\n\n--ehcp\n    Check input organisms prepare for extend autobuild tree module.\n\n--srna\n    Check whether organisms are supported in the SILVA database.\n\n\nFrequently Asked Questions (FAQ)\n--------------------------------------------------------------------------------\n\n**1.What is the input of PhySpeTree?**\n\nUsers only need to prepare a TXT file containing `KEGG <http://www.genome.jp/kegg/catalog/org_list.html>`_ abbreviated species names. For example, `organism example list <https://raw.githubusercontent.com/yangfangs/physpetools/master/examples/organism_example_list.txt>`_.\n\n**2.How to explain PhySpeTree outputs?**\n\nPhySpeTree returns two folders, `Outdata` contains the output species tree and `temp` includes temporary data. Files in `temp` can be used to check the quality of outputs in each step. If HCP method (`--hcp`) is selected, the `temp` folder includes:\n\n  * `conserved_protein`: highly conserved proteins retrieved from the KEGG database.\n  * `alignment`: aligned sequences.\n  * `concatenate`: concatenated sequences and conserved blocks.\n\nIf SSU rRNA method (`--srna`) is selected, the `temp` folder includes:\n\n  * `rna_sequence`: SSU rRNA sequences retrieved from the SILVA database.\n  * `rna_alignment`: aligned sequences and conserved blocks.\n\n\n**What classes of HCP are selected?**\n\nPhySpeTree uses 31 HCP without horizontal transferred genes according to Ciccarelli *et al.*.\n\n**cite:**\n\n Ciccarelli F D, Doerks T, Von Mering C, et al. Toward automatic reconstruction of a highly resolved tree of life[J]. science, 2006, 311(5765): 1283-1287.\n\nThe 31 HCP and corresponding KEGG KO number are shown in the following table:\n\n\n====================================================   ==============      ===============\nProtein Names                                          Eukaryotes KO       Prokaryotes KO\n====================================================   ==============      ===============\nDNA-directed RNA polymerase subunit alpha              K03040              K03040\nRibosomal protein L1                                   K02865              K02863\nLeucyl-tRNA synthetase                                 K01869              K01869\nMetal-dependent proteases with chaperone activity      K01409              K01409\nPhenylalanine-tRNA synthethase alpha subunit           K01889              K01889\nPredicted GTPase probable translation factor           K06942              K06942\nPreprotein translocase subunit SecY                    K10956              K10956\nRibosomal protein L11                                  K02868              K02867\nRibosomal protein L13                                  K02873              K02871\nRibosomal protein L14                                  K02875              K02874\nRibosomal protein L15                                  K02877              K17437\nRibosomal protein L16/L10E                             K02866              K02872\nRibosomal protein L18                                  K02883              K02882\nRibosomal protein L22                                  K02891              K02890\nRibosomal protein L3                                   K02925              K02906\nRibosomal protein L5                                   K02932              K02931\nRibosomal protein L6P/L9E                              K02940              K02939\nRibosomal protein S11                                  K02949              K02948\nRibosomal protein S15P/S13E                            K02958              K02956\nRibosomal protein S17                                  K02962              K02961\nRibosomal protein S2                                   K02981              K02967\nRibosomal protein S3                                   K02985              K02982\nRibosomal protein S4                                   K02987              K02986\nRibosomal protein S5                                   K02989              K02988\nRibosomal protein S7                                   K02993              K02992\nRibosomal protein S8                                   K02995              K02994\nRibosomal protein S9                                   K02997              K02996\nSeryl-tRNA synthetase                                  K01875              K01875\nArginyl-tRNA synthetase                                K01887              K01887\nDNA-directed RNA polymerase beta subunit               K03043              K03043\nRibosomal protein S13                                  K02953              K02952\n====================================================   ==============      ===============\n\n\n\n**2.4.How are SSU rRAN created?**\n\nThe SSU rRAN sequences are created from the `SILVA <https://www.arb-silva.de/>`_ database (123.1 release). Sequences haven been truncated, which means unaligned nucleotides are removed.\n\n\n\n.. |PyPI version| image:: https://img.shields.io/pypi/v/PhySpeTree.svg?style=flat-square\n   :target: https://pypi.python.org/pypi/PhySpeTree\n.. |Docs| image:: https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat-square\n   :target: https://yangfangs.github.io/physpetools/\n.. |License| image:: https://img.shields.io/aur/license/yaourt.svg?maxAge=2592000\n   :target: https://github.com/yangfangs/physpetools/blob/master/LICENSE.txt",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/yangfangs/physpetools",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PhySpeTree",
    "platform": "",
    "project_url": "https://pypi.org/project/PhySpeTree/",
    "release_url": "https://pypi.org/project/PhySpeTree/0.2.9/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "One command line auto reconstruct phylogenetic tree.",
    "version": "0.2.9"
  },
  "releases": {
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "11ddd42c60bf7ccae7a01e38a8d19a40",
          "sha256": "9b24d8026d02c033e22fc95ab43b91819ca59c3a4dc933ccd26131e071c8f13f"
        },
        "downloads": 159,
        "filename": "PhySpeTree-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "11ddd42c60bf7ccae7a01e38a8d19a40",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4748520,
        "upload_time": "2016-09-27T08:47:10",
        "url": "https://files.pythonhosted.org/packages/7e/24/4e67a22206888ae76bb528b4e3037124b708b4a63c4d6a0e6afb9ff456b9/PhySpeTree-0.2.4.tar.gz"
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4624cddc6ef642c39f014a0c24e75eb7",
          "sha256": "12c7c1df742273d255f261f8f747591401e831f06e72324f340d1ccb55b51806"
        },
        "downloads": 178,
        "filename": "PhySpeTree-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4624cddc6ef642c39f014a0c24e75eb7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4750253,
        "upload_time": "2016-10-28T11:51:39",
        "url": "https://files.pythonhosted.org/packages/f4/18/c5f0fdfc7b0833601f5081a9197cec0b01514fc0f01296ef3e63e0452ed1/PhySpeTree-0.2.5.tar.gz"
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3d4e469751c4f2cef7c4119a4fb4583c",
          "sha256": "61d283ff597fea400dd6591f67309cab4bd6c33aca3e3fa497b2681bc4d79ac4"
        },
        "downloads": 74,
        "filename": "PhySpeTree-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "3d4e469751c4f2cef7c4119a4fb4583c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4750742,
        "upload_time": "2016-11-09T06:22:34",
        "url": "https://files.pythonhosted.org/packages/34/7a/3edc71ed036f349834c693acc3812ce89430fbdc61f3d349e0442a6f0fcf/PhySpeTree-0.2.6.tar.gz"
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9113a510383d1be0cec878d6cfb22103",
          "sha256": "d24d441e06abc928b29759de7016548386d16a0a233b7df85b1b0e5542d73143"
        },
        "downloads": 0,
        "filename": "PhySpeTree-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "9113a510383d1be0cec878d6cfb22103",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4749246,
        "upload_time": "2017-04-11T08:43:35",
        "url": "https://files.pythonhosted.org/packages/60/26/bdda6f46093cd74b190a6e05e983e30cb60ad65d40aa2b447923751a86cc/PhySpeTree-0.2.7.tar.gz"
      }
    ],
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "45b64bb7d1ea6485066d880b2a0ae328",
          "sha256": "0bce2590611d0e576074b70a0ea8b94f4842ebfd2579dc9100d12d3a02674e0b"
        },
        "downloads": 0,
        "filename": "PhySpeTree-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "45b64bb7d1ea6485066d880b2a0ae328",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4821431,
        "upload_time": "2017-08-15T11:07:42",
        "url": "https://files.pythonhosted.org/packages/8e/d3/9c6ddadd4f8930f95e7e321ae18944b3f1281c400cce9a5b24183bf777f6/PhySpeTree-0.2.8.tar.gz"
      }
    ],
    "0.2.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b39d3912118ec39b4e6f0f097fbd6b0d",
          "sha256": "2563fef1cb2b74a78c97564ff7af2e25f5024145ff31efa71a113508386d2591"
        },
        "downloads": 0,
        "filename": "PhySpeTree-0.2.9.tar.gz",
        "has_sig": false,
        "md5_digest": "b39d3912118ec39b4e6f0f097fbd6b0d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4821702,
        "upload_time": "2017-08-16T11:57:40",
        "url": "https://files.pythonhosted.org/packages/ba/64/467fc9c42f62ca6123851c2d36cf6d7e9e09f16ce568822df0d593e63dc1/PhySpeTree-0.2.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b39d3912118ec39b4e6f0f097fbd6b0d",
        "sha256": "2563fef1cb2b74a78c97564ff7af2e25f5024145ff31efa71a113508386d2591"
      },
      "downloads": 0,
      "filename": "PhySpeTree-0.2.9.tar.gz",
      "has_sig": false,
      "md5_digest": "b39d3912118ec39b4e6f0f097fbd6b0d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4821702,
      "upload_time": "2017-08-16T11:57:40",
      "url": "https://files.pythonhosted.org/packages/ba/64/467fc9c42f62ca6123851c2d36cf6d7e9e09f16ce568822df0d593e63dc1/PhySpeTree-0.2.9.tar.gz"
    }
  ]
}