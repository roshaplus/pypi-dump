{
  "info": {
    "author": "Adam Karpierz",
    "author_email": "python@python.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: Polish",
      "Operating System :: OS Independent",
      "Programming Language :: Java",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: IronPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Programming Language :: Python :: Implementation :: Stackless",
      "Topic :: Software Development :: Libraries :: Java Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "jtypes.py4j\n===========\n\nEnables Python to dynamically access arbitrary Java objects.\n\nOverview\n========\n\n  jtypes.py4j enables Python programs to dynamically access arbitrary Java objects via\n  Java's Native Invocation Interface (JNI).\n\n  | jtypes.py4j is a lightweight Python Java package, based on the ctypes FFI library.\n  | It is an almost fully compliant implementation of Barthelemy Dagenais's good known\n    Py4J package by reimplementing whole it's functionality in a clean Python via JNI\n    instead of Python and Java via custom API service.\n\nAbout Py4J:\n-----------\n\nNote from the `original website <https://www.py4j.org>`__:\n\n  **Welcome to Py4J**\n\n  Py4J enables Python programs running in a Python interpreter to dynamically\n  access Java objects in a Java Virtual Machine. Methods are called as if the\n  Java objects resided in the Python interpreter and Java collections can be\n  accessed through standard Python collection methods. Py4J also enables Java\n  programs to call back Python objects.\n\n  | Here is a brief example of what you can do with Py4J.\n  | The following Python program creates a java.util.Random instance from a JVM\n    and calls some of its methods.\n\n  .. code:: python\n\n     >>> from py4j.java_gateway import JavaGateway\n     >>> gateway = JavaGateway()                  # connect to the JVM\n     >>> random = gateway.jvm.java.util.Random()  # create a java.util.Random instance\n     >>> number1 = random.nextInt(10)             # call the Random.nextInt method\n     >>> number2 = random.nextInt(10)\n     >>> print(number1,number2)\n     (2, 7)\n\nRequirements\n============\n\n- Java Runtime (JRE) or Java Development Kit (JDK), and NumPy.\n\nInstallation\n============\n\n::\n\n    pip install --upgrade jtypes.py4j\n\nTo ensure everything is running correctly you can run the tests using\n\n::\n\n    python -m jt.py4j.tests\n\nPrerequisites:\n\n+ Python 2.7 or higher or 3.3 or higher\n\n  * http://www.python.org/\n  * Versions lower than 2.7 or lower than 3.3 WON'T WORK.\n  * 2.7 and 3.4 are primary test environments.\n\n+ pip or setuptools\n\n  * http://pypi.python.org/pypi/pip\n  * http://pypi.python.org/pypi/setuptools\n\nLicense\n=======\n\n  | Copyright (c) 2014-2016, Adam Karpierz\n  |\n  | Licensed under the BSD license\n  | Please refer to the LICENSE file.\n\nAuthors\n=======\n\n* Adam Karpierz <python@python.pl>\n\nChangelog\n=========\n\n0.0.1 (2014-08-05)\n------------------\n- Initial version.",
    "docs_url": null,
    "download_url": "http://pypi.python.org/pypi/jtypes.py4j/",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://pypi.python.org/pypi/jtypes.py4j/",
    "keywords": "jtypes,jt,py4j,jpype,jep,pyjnius,jpy,javabridge,pyjava,jython,java,pythonjava",
    "license": "BSD license",
    "maintainer": null,
    "maintainer_email": null,
    "name": "jtypes.py4j",
    "platform": "any",
    "project_url": "https://pypi.org/project/jtypes.py4j/",
    "release_url": "https://pypi.org/project/jtypes.py4j/0.10.4/",
    "requires_python": null,
    "summary": "Enables Python to dynamically access arbitrary Java objects (ctypes/cffi-based Barthelemy Dagenais's Py4J)",
    "version": "0.10.4"
  },
  "releases": {
    "0.10.4": []
  },
  "urls": []
}