{
  "info": {
    "author": "Sabricot",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "========================\nDjango Elasticsearch DSL\n========================\n\n.. image:: https://travis-ci.org/sabricot/django-elasticsearch-dsl.png?branch=master\n    :target: https://travis-ci.org/sabricot/django-elasticsearch-dsl\n.. image:: https://codecov.io/gh/sabricot/django-elasticsearch-dsl/coverage.svg?branch=master\n    :target: https://codecov.io/gh/sabricot/django-elasticsearch-dsl\n.. image:: https://badge.fury.io/py/django-elasticsearch-dsl.svg\n    :target: https://pypi.python.org/pypi/django-elasticsearch-dsl\n\nThis is a package that allows indexing of django models in elasticsearch. It is\nbuilt as a thin wrapper around elasticsearch-dsl-py_ so you can use all the features developed\nby the elasticsearch-dsl-py team.\n\n.. _elasticsearch-dsl-py: https://github.com/elastic/elasticsearch-dsl-py\n\nFeatures\n--------\n\n- Based on elasticsearch-dsl-py_ so you can make queries with the Search_ class.\n- Django signal receivers on save and delete for keeping Elasticsearch in sync.\n- Management commands for creating, deleting, rebuilding and populating indices.\n- Elasticsearch auto mapping from django models fields.\n- Complex field type support (ObjectField, NestedField).\n- Requirements\n   - Django >= 1.8\n   - Python 2.7, 3.4, 3.5, 3.6\n   - Elasticsearch >= 2.0 < 6.0\n\n.. _Search: http://elasticsearch-dsl.readthedocs.io/en/stable/search_dsl.html\n\nQuickstart\n----------\n\nInstall Django Elasticsearch DSL::\n\n    pip install django-elasticsearch-dsl\n\n    # Elasticsearch 5.x\n    pip install 'elasticsearch-dsl>=5.0,<6.0'\n\n    # Elasticsearch 2.x\n    pip install 'elasticsearch-dsl>=2.0,<3.0'\n\nThen add ``django_elasticsearch_dsl`` to the INSTALLED_APPS\n\nYou must define ``ELASTICSEARCH_DSL`` in your django settings.\n\nFor example:\n\n.. code-block:: python\n\n    ELASTICSEARCH_DSL={\n        'default': {\n            'hosts': 'localhost:9200'\n        },\n    }\n\n``ELASTICSEARCH_DSL`` is then passed to ``elasticsearch-dsl-py.connections.configure`` (see here_).\n\n.. _here: http://elasticsearch-dsl.readthedocs.io/en/stable/configuration.html#multiple-clusters\n\nThen for a model:\n\n.. code-block:: python\n\n    # models.py\n\n    class Car(models.Model):\n        name = models.CharField()\n        color = models.CharField()\n        description = models.TextField()\n        type = models.IntegerField(choices=[\n            (1, \"Sedan\"),\n            (2, \"Truck\"),\n            (4, \"SUV\"),\n        ])\n\nTo make this model work with Elasticsearch, create a subclass of ``django_elasticsearch_dsl.DocType``\nand create a ``django_elasticsearch_dsl.Index`` to define your Elasticsearch indices, names, and settings. This classes must be\ndefined in a ``documents.py`` file.\n\n.. code-block:: python\n\n    # documents.py\n\n    from django_elasticsearch_dsl import DocType, Index\n    from .models import Car\n\n    # Name of the Elasticsearch index\n    car = Index('cars')\n    # See Elasticsearch Indices API reference for available settings\n    car.settings(\n        number_of_shards=1,\n        number_of_replicas=0\n    )\n\n\n    @car.doc_type\n    class CarDocument(DocType):\n        class Meta:\n            model = Car # The model associated with this DocType\n\n            # The fields of the model you want to be indexed in Elasticsearch\n            fields = [\n                'name',\n                'color',\n                'description',\n                'type',\n            ]\n\n            # Ignore auto updating of Elasticsearch when a model is saved\n            # or deleted:\n            # ignore_signals = True\n            # Don't perform an index refresh after every update (overrides global setting):\n            # auto_refresh = False\n            # Paginate the django queryset used to populate the index with the specified size\n            # (by default there is no pagination)\n            # queryset_pagination = 5000\n\n\nTo create and populate the Elasticsearch index and mapping use the search_index command::\n\n    $ ./manage.py search_index --rebuild\n\nNow, when you do something like:\n\n.. code-block:: python\n\n    car = Car(\n        name=\"Car one\",\n        color=\"red\",\n        type=1,\n        description=\"A beautiful car\"\n    )\n    car.save()\n\nThe object will be saved in Elasticsearch too (using a signal handler). To get an\nelasticsearch-dsl-py Search_ instance, use:\n\n.. code-block:: python\n\n    s = CarDocument.search().filter(\"term\", color=\"red\")\n\n    # or\n\n    s = CarDocument.search().query(\"match\", description=\"beautiful\")\n\n    for hit in s:\n        print(\n            \"Car name : {}, description {}\".format(hit.name, hit.description)\n        )\n\nThe previous example returns a result specific to elasticsearch_dsl_, but it is also\npossible to convert the elastisearch result into a real django queryset, just be aware\nthat this costs a sql request to retrieve the model instances with the ids returned by\nthe elastisearch query.\n\n.. _elasticsearch_dsl: http://elasticsearch-dsl.readthedocs.io/en/latest/search_dsl.html#response\n\n.. code-block:: python\n\n    s = CarDocument.search().filter(\"term\", color=\"blue\")[:30]\n    qs = s.to_queryset()\n    # qs is just a django queryset and it is called with order_by to keep\n    # the same order as the elasticsearch result.\n    for car in qs:\n        print(car.name)\n\nFields\n------\n\nOnce again the ``django_elasticsearch_dsl.fields`` are subclasses of elasticsearch-dsl-py\nfields_. They just add support for retrieving data from django models.\n\n\n.. _fields: http://elasticsearch-dsl.readthedocs.io/en/stable/persistence.html#mappings\n\nUsing Different Attributes for Model Fields\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLet's say you don't want to store the type of the car as an integer, but as the\ncorresponding string instead. You need some way to convert the type field on\nthe model to a string, so we'll just add a method for it:\n\n.. code-block:: python\n\n    # models.py\n\n    class Car(models.Model):\n        # ... #\n        def type_to_string(self):\n            \"\"\"Convert the type field to its string representation\n            (the boneheaded way).\n            \"\"\"\n            if self.type == 1:\n                return \"Sedan\"\n            elif self.type == 2:\n                return \"Truck\"\n            else:\n                return \"SUV\"\n\nNow we need to tell our ``DocType`` subclass to use that method instead of just\naccessing the ``type`` field on the model directly. Change the CarDocument to look\nlike this:\n\n.. code-block:: python\n\n    # documents.py\n\n    from django_elasticsearch_dsl import DocType, fields\n\n    # ... #\n\n    @car.doc_type\n    class CarDocument(DocType):\n        # add a string field to the Elasticsearch mapping called type, the\n        # value of which is derived from the model's type_to_string attribute\n        type = fields.StringField(attr=\"type_to_string\")\n\n        class Meta:\n            model = Car\n            # we removed the type field from here\n            fields = [\n                'name',\n                'color',\n                'description',\n            ]\n\nAfter a change like this we need to rebuild the index with::\n\n    $ ./manage.py search_index --rebuild\n\nUsing prepare_field\n~~~~~~~~~~~~~~~~~~~\n\nSometimes, you need to do some extra prepping before a field should be saved to\nElasticsearch. You can add a ``prepare_foo(self, instance)`` method to a DocType\n(where foo is the name of the field), and that will be called when the field\nneeds to be saved.\n\n.. code-block:: python\n\n    # documents.py\n\n    # ... #\n\n    class CarDocument(DocType):\n        # ... #\n\n        foo = StringField()\n\n        def prepare_foo(self, instance):\n            return \" \".join(instance.foos)\n\nHandle relationship with NestedField/ObjectField\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor example for a model with ForeignKey relationships.\n\n.. code-block:: python\n\n    # models.py\n\n    class Car(models.Model):\n        name = models.CharField()\n        color = models.CharField()\n        manufacturer = models.ForeignKey('Manufacturer')\n\n    class Manufacturer(models.Model):\n        name = models.CharField()\n        country_code = models.CharField(max_length=2)\n        created = models.DateField()\n\n    class Ad(models.Model):\n        title = models.CharField()\n        description = models.TextField()\n        created = models.DateField(auto_now_add=True)\n        modified = models.DateField(auto_now=True)\n        url = models.URLField()\n        car = models.ForeignKey('Car', related_name='ads')\n\n\nYou can use an ObjectField or a NestedField.\n\n.. code-block:: python\n\n    # documents.py\n\n    from django_elasticsearch_dsl import DocType, Index\n    from .models import Car\n\n    car = Index('cars')\n    car.settings(\n        number_of_shards=1,\n        number_of_replicas=0\n    )\n\n\n    @car.doc_type\n    class CarDocument(DocType):\n        manufacturer = fields.ObjectField(properties={\n            'name': fields.StringField(),\n            'country_code': fields.StringField(),\n        })\n        ads = fields.NestedField(properties={\n            'description': fields.StringField(analyzer=html_strip),\n            'title': fields.StringField(),\n            'pk': fields.IntegerField(),\n        })\n\n        class Meta:\n            model = Car\n            fields = [\n                'name',\n                'color',\n            ]\n            related_models = [Manufacturer, Ad]  # Optional: to ensure the Car will be re-saved when Manufacturer or Ad is updated\n\n        def get_queryset(self):\n            \"\"\"Not mandatory but to improve performance we can select related in one sql request\"\"\"\n            return super(CarDocument, self).get_queryset().select_related(\n                'manufacturer'\n            )\n\n        def get_instances_from_related(self, related_instance):\n            \"\"\"If related_models is set, define how to retrieve the Car instance(s) from the related model.\"\"\"\n            if isinstance(related_instance, Manufacturer):\n                return related_instance.car_set.all()\n            elif isinstance(related_instance, Ad):\n                return related_instance.car\n\n\nField Classes\n~~~~~~~~~~~~~\nMost Elasticsearch field types_ are supported. The ``attr`` argument is a dotted\n\"attribute path\" which will be looked up on the model using Django template\nsemantics (dict lookup, attribute lookup, list index lookup). By default the attr\nargument is set to the field name.\n\nFor the rest, the field properties are the same as elasticsearch-dsl\nfields_.\n\nSo for example you can use a custom analyzer_:\n\n.. _analyzer: http://elasticsearch-dsl.readthedocs.io/en/stable/persistence.html#analysis\n.. _types: https://www.elastic.co/guide/en/elasticsearch/reference/5.4/mapping-types.html\n\n.. code-block:: python\n\n    # documents.py\n\n    # ... #\n\n    html_strip = analyzer(\n        'html_strip',\n        tokenizer=\"standard\",\n        filter=[\"standard\", \"lowercase\", \"stop\", \"snowball\"],\n        char_filter=[\"html_strip\"]\n    )\n\n    @car.doc_type\n    class CarDocument(DocType):\n        description = fields.StringField(\n            analyzer=html_strip,\n            fields={'raw': fields.StringField(index='not_analyzed')}\n        )\n\n        class Meta:\n            model = Car\n            fields = [\n                'name',\n                'color',\n            ]\n\n\nAvailable Fields\n~~~~~~~~~~~~~~~~\n\n- Simple Fields\n\n    - BooleanField(attr=None, \\*\\*elasticsearch_properties)\n    - ByteField(attr=None, \\*\\*elasticsearch_properties)\n    - CompletionField(attr=None, \\*\\*elasticsearch_properties)\n    - DateField(attr=None, \\*\\*elasticsearch_properties)\n    - DoubleField(attr=None, \\*\\*elasticsearch_properties)\n    - FileField(attr=None, \\*\\*elasticsearch_properties)\n    - FloatField(attr=None, \\*\\*elasticsearch_properties)\n    - IntegerField(attr=None, \\*\\*elasticsearch_properties)\n    - IpField(attr=None, \\*\\*elasticsearch_properties)\n    - GeoPointField(attr=None, \\*\\*elasticsearch_properties)\n    - GeoShapField(attr=None, \\*\\*elasticsearch_properties)\n    - ShortField(attr=None, \\*\\*elasticsearch_properties)\n    - StringField(attr=None, \\*\\*elasticsearch_properties)\n\n- Complex Fields\n\n    - ObjectField(properties, attr=None, \\*\\*elasticsearch_properties)\n    - NestedField(properties, attr=None, \\*\\*elasticsearch_properties)\n\n- Elasticsearch 5 Fields\n\n    - TextField(attr=None, \\*\\*elasticsearch_properties)\n    - KeywordField(attr=None, \\*\\*elasticsearch_properties)\n\n``properties`` is a dict where the key is a field name, and the value is a field\ninstance.\n\n\nIndex\n-----\n\nTo define an Elasticsearch index you must instantiate a ``django_elasticsearch_dsl.Index`` class and set the name\nand settings of the index. This class inherits from elasticsearch-dsl-py Index_.\nAfter you instantiate your class, you need to associate it with the DocType you\nwant to put in this Elasticsearch index.\n\n\n.. _Index: http://elasticsearch-dsl.readthedocs.io/en/stable/persistence.html#index\n\n.. code-block:: python\n\n    # documents.py\n\n    from django_elasticsearch_dsl import DocType, Index\n    from .models import Car, Manufacturer\n\n    # The name of your index\n    car = Index('cars')\n    # See Elasticsearch Indices API reference for available settings\n    car.settings(\n        number_of_shards=1,\n        number_of_replicas=0\n    )\n\n\n    @car.doc_type\n    class CarDocument(DocType):\n        class Meta:\n            model = Car\n            fields = [\n                'name',\n                'color',\n            ]\n\n    @car.doc_type\n    class ManufacturerDocument(DocType):\n        class Meta:\n            model = Car\n            fields = [\n                'name', # If a field as the same name in multiple DocType of\n                        # the same Index, the field type must be identical\n                        # (here fields.StringField)\n                'country_code',\n            ]\n\nWhen you execute the command::\n\n    $ ./manage.py search_index --rebuild\n\nThis will create an index named ``cars`` in Elasticsearch with two mappings:\n``manufacturer_document`` and ``car_document``.\n\n\nManagement Commands\n-------------------\n\nDelete all indices in Elasticsearch or only the indices associate with a model (--models):\n\n::\n\n    $ search_index --delete [-f] [--models [app[.model] app[.model] ...]]\n\n\nCreate the indices and their mapping in Elasticsearch:\n\n::\n\n    $ search_index --create [--models [app[.model] app[.model] ...]]\n\nPopulate the Elasticsearch mappings with the django models data (index need to be existing):\n\n::\n\n    $ search_index --populate [--models [app[.model] app[.model] ...]]\n\nRecreate and repopulate the indices:\n\n::\n\n    $ search_index --rebuild [-f] [--models [app[.model] app[.model] ...]]\n\n\nSettings\n--------\n\nELASTICSEARCH_DSL_AUTOSYNC\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDefault: ``True``\n\nSet to ``False`` to globally disable auto-syncing.\n\nELASTICSEARCH_DSL_INDEX_SETTINGS\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDefault: ``{}``\n\nAdditional options passed to the elasticsearch-dsl Index settings (like ``number_of_replicas`` or ``number_of_shards``).\n\nELASTICSEARCH_DSL_AUTO_REFRESH\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDefault: ``True``\n\nSet to ``False`` not force an [index refresh](https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-refresh.html) with every save.\n\nELASTICSEARCH_DSL_SIGNAL_PROCESSOR\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis (optional) setting controls what SignalProcessor class is used to handle\nDjango's signals and keep the search index up-to-date.\n\nAn example:\n\n.. code-block:: python\n\n    ELASTICSEARCH_DSL_SIGNAL_PROCESSOR = 'django_elasticsearch_dsl.signals.RealTimeSignalProcessor'\n\nDefaults to ``django_elasticsearch_dsl.signals.RealTimeSignalProcessor``.\n\nYou could, for instance, make a ``CelerySignalProcessor`` which would add\nupdate jobs to the queue to for delayed processing.\n\nTesting\n-------\n\nYou can run the tests by creating a Python virtual environment, installing\nthe requirements from ``requirements_test.txt`` (``pip install -r requirements_test``)::\n\n    $ python runtests.py\n\nOr::\n\n    $ make test\n\n    $ make test-all # for tox testing\n\nFor integration testing with a running Elasticsearch server::\n\n    $ python runtests.py --elasticsearch [localhost:9200]\n\n\nTODO\n----\n\n- Add support for --using (use another Elasticsearch cluster) in management commands.\n- Add management commands for mapping level operations (like update_mapping....).\n- Dedicated documentation.\n- Generate ObjectField/NestField properties from a DocType class.\n- More examples.\n- Better ``ESTestCase`` and documentation for testing\n\n\n\n\nHistory\n-------\n\n0.4.2 (2017-11-27)\n~~~~~~~~~~~~~~~~~~\n* Convert lazy string to string before serialization\n* Readme update (arielpontes)\n\n0.4.1 (2017-10-17)\n~~~~~~~~~~~~~~~~~~\n* Update example app with get_instances_from_related\n* Typo/grammar fixes\n\n0.4.0 (2017-10-07)\n~~~~~~~~~~~~~~~~~~\n* Add a method on the Search class to return a django queryset from an es result\n* Add a queryset_pagination option to DocType.Meta for allow the pagination of\n  big django querysets during the index populating\n* Remove the call to iterator method for the django queryset\n* Fix DocType inheritance. The DocType is store in the registry as a class and not anymore as an instance\n\n\n0.3.0 (2017-10-01)\n~~~~~~~~~~~~~~~~~~\n* Add support for resynching ES documents if related models are updated (HansAdema)\n* Better management for django FileField and ImageField\n* Fix some errors in the doc (barseghyanartur, diwu1989)\n\n0.2.0 (2017-07-02)\n~~~~~~~~~~~~~~~~~~\n* Replace simple model signals with easier to customise signal processors (barseghyanartur)\n* Add options to disable automatic index refreshes (HansAdema)\n* Support defining DocType indexes through Meta class (HansAdema)\n* Add option to set default Index settings through Django config (HansAdema)\n\n0.1.0 (2017-05-26)\n~~~~~~~~~~~~~~~~~~\n* First release on PyPI.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/sabricot/django-elasticsearch-dsl",
    "keywords": "django elasticsearch elasticsearch-dsl",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-elasticsearch-dsl",
    "platform": "",
    "project_url": "https://pypi.org/project/django-elasticsearch-dsl/",
    "release_url": "https://pypi.org/project/django-elasticsearch-dsl/0.4.2/",
    "requires_dist": [
      "elasticsearch-dsl (>=2.0.0,<6.0.0)"
    ],
    "requires_python": "",
    "summary": "Wrapper around elasticsearch-dsl-py for django models",
    "version": "0.4.2"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1dc7216d5a0b4b3069dc25f4f0d5bdae",
          "sha256": "526ac1107f3cc60a7decde49a97b23fe5887e79b047f48e530ad563dde645a69"
        },
        "downloads": -1,
        "filename": "django_elasticsearch_dsl-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1dc7216d5a0b4b3069dc25f4f0d5bdae",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 19100,
        "upload_time": "2017-05-26T22:11:48",
        "url": "https://files.pythonhosted.org/packages/15/d9/f9f48f13a2f34dd398bd1fe5581bed9fc29a9ea8f8f5df1bc57eb4c24470/django_elasticsearch_dsl-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ca4b508cb91b245cff7dffc040af3f85",
          "sha256": "0777a542cf872f0467d034ff3ed158092c6c8bd66926c5a8d4c0d78a1d4d70e6"
        },
        "downloads": -1,
        "filename": "django-elasticsearch-dsl-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ca4b508cb91b245cff7dffc040af3f85",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15344,
        "upload_time": "2017-05-26T22:11:50",
        "url": "https://files.pythonhosted.org/packages/31/84/1a7bc10df33116b9eb424a9cc79ffbf70aaa4dffe653c17a270533bc5741/django-elasticsearch-dsl-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1d8d6d2b1b68be394b538eb903c57af7",
          "sha256": "8a3c451f4ba2973cec7f6c5cc705764bfaafa164befe02c93a38eac1611f6b33"
        },
        "downloads": -1,
        "filename": "django_elasticsearch_dsl-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d8d6d2b1b68be394b538eb903c57af7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 21514,
        "upload_time": "2017-07-02T18:03:35",
        "url": "https://files.pythonhosted.org/packages/28/0a/caa5abd00b3e38f65a87cdb825ae3336a6d830906a2ae5cc3a8cecb4f4a2/django_elasticsearch_dsl-0.2.0-py2.py3-none-any.whl"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "644a2b91528f277fc83b12848653abea",
          "sha256": "14a504dc0876e7b325755dfc0852a7e07e70d754b98c7fbb3b13d3d4604375f0"
        },
        "downloads": -1,
        "filename": "django_elasticsearch_dsl-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "644a2b91528f277fc83b12848653abea",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 22148,
        "upload_time": "2017-10-01T19:42:57",
        "url": "https://files.pythonhosted.org/packages/e5/7f/3fab5aa4c9659123cf2314bba81c3fbf3ce8505587b9e158e9cc847b1cca/django_elasticsearch_dsl-0.3.0-py2.py3-none-any.whl"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a98102e10ae1534e55d772e767ec66d0",
          "sha256": "3c39bee1b5ea9b716519f7376da978cbe4eac4e983bdc34a2d712963c6759d82"
        },
        "downloads": -1,
        "filename": "django_elasticsearch_dsl-0.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a98102e10ae1534e55d772e767ec66d0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 23833,
        "upload_time": "2017-10-07T18:14:48",
        "url": "https://files.pythonhosted.org/packages/33/fd/64012ccfa7d38d22d0f6cf7f664ea147d0181bebb542d10136f1179c7bfa/django_elasticsearch_dsl-0.4.0-py2.py3-none-any.whl"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2d932b4f2ce2d41e0d37dbe61ae28a77",
          "sha256": "7505e10bc2e9ab36f533ba3304fb6ae0a9250c055488134504a45c8d3f9403ed"
        },
        "downloads": -1,
        "filename": "django_elasticsearch_dsl-0.4.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d932b4f2ce2d41e0d37dbe61ae28a77",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 23916,
        "upload_time": "2017-10-17T08:04:10",
        "url": "https://files.pythonhosted.org/packages/91/1d/32a9eb48345fb7348027abf3f566a0cd1df391167f7adf211fa990555ea6/django_elasticsearch_dsl-0.4.1-py2.py3-none-any.whl"
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5faea47f501e030579ad4dd4992832f5",
          "sha256": "d676990d81caf5eba5443cb1c44248bafa54347013e7ee3a08e9f115ec65a3e5"
        },
        "downloads": -1,
        "filename": "django_elasticsearch_dsl-0.4.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5faea47f501e030579ad4dd4992832f5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 24160,
        "upload_time": "2017-11-27T21:26:56",
        "url": "https://files.pythonhosted.org/packages/c7/d3/5cc2e283592d791384458d2f623531f8b8424772e06cb51796c8d044afa3/django_elasticsearch_dsl-0.4.2-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5faea47f501e030579ad4dd4992832f5",
        "sha256": "d676990d81caf5eba5443cb1c44248bafa54347013e7ee3a08e9f115ec65a3e5"
      },
      "downloads": -1,
      "filename": "django_elasticsearch_dsl-0.4.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5faea47f501e030579ad4dd4992832f5",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 24160,
      "upload_time": "2017-11-27T21:26:56",
      "url": "https://files.pythonhosted.org/packages/c7/d3/5cc2e283592d791384458d2f623531f8b8424772e06cb51796c8d044afa3/django_elasticsearch_dsl-0.4.2-py2.py3-none-any.whl"
    }
  ]
}