{
  "info": {
    "author": "orsinium",
    "author_email": "master_fess@mail.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Plugins",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Human Machine Interfaces"
    ],
    "description": "# Algorithms\n\n* **h -- hamming: substitution**. Compute the Hamming distance between the two or more sequences. The Hamming distance is the number of differing items in ordered sequences.\n* **l -- levenstein: deletion, insertion, substitution**. Compute the absolute Levenshtein distance between the two sequences. The Levenshtein distance is the minimum number of edit operations necessary for transforming one sequence into the other.\n* **dl -- damerau-levenshtein: deletion, insertion, substitution, transposition**. Compute the absolute Damerau-Levenshtein distance between the two sequences. The Levenshtein distance is the minimum number of edit operations necessary for transforming one sequence into the other.\n* **s -- sorensen**. Compute the Sorensen distance between the two sequences. They should contain hashable items. The return value is a float between 0 and 1, where 0 means equal, and 1 totally different.\n* **j -- jaccard**. Compute the Jaccard distance between the two sequences. They should contain hashable items. The return value is a float between 0 and 1, where 0 means equal, and 1 totally different.\n\n# Installation\n\n```bash\nsudo pip3 install textdistance\n```\n\n# Usage\n\n## Importing\n\n```python\n>>> from textdistance import distance\n\n```\n\n## Hamming\n\n```python\n>>> distance('h', 'lorem', 'lorum')\n1\n>>> distance('h', 'lorem', 'loremus')\n2\n>>> distance('h', 'lorem', 'lorimus')\n3\n>>> distance('h', 'lorimus', 'larem')\n4\n>>> distance.h(lorimus', 'larem')\n4\n```\n\n## Sorensen\n\n```python\n>>> distance('s', 'lorem', 'lorem')\n0.0\n>>> distance('s', 'lorem', 'lorum')\n0.19999999999999996\n>>> distance('s', 'lorem', 'lorme')\n0.0\n>>> distance('s', 'lorem', 'melor')\n0.0\n>>> distance('s', 'lorem', 'loremus')\n0.16666666666666663\n>>> distance.s('lorem', 'loremus')\n0.16666666666666663\n```\n\n## Jaccard\n\n```python\n>>> distance('j', 'lorem', 'lorem')\n0.0\n>>> distance('j', 'lorem', 'lorum')\n0.33333333333333337\n>>> distance('j', 'lorem', 'lorme')\n0.0\n>>> distance('j', 'lorem', 'melor')\n0.0\n>>> distance('j', 'lorem', 'loremus')\n0.2857142857142857\n>>> distance.j('lorem', 'loremus')\n0.2857142857142857\n```\n\n## Levenstein\n\n```python\n>>> distance('l', 'lorem', 'lorim')\n1\n>>> #substitution\n... distance('l', 'lorem', 'lorim')\n1\n>>> #insertion\n... distance('l', 'lorem', 'loriem')\n1\n>>> #deletion\n... distance('l', 'lorem', 'lrem')\n1\n>>> distance.l('lorem', 'lrem')\n1\n```\n\n## Damerau-Levenshtein\n\n```python\n>>> distance('dl', 'lorem', 'lorim')\n1\n>>> #substitution\n... distance('dl', 'lorem', 'lorim')\n1\n>>> #insertion\n... distance('dl', 'lorem', 'loriem')\n1\n>>> #deletion\n... distance('dl', 'lorem', 'lrem')\n1\n>>> #transposition\n... distance('dl', 'lorem', 'lorme')\n1\n>>> distance.dl('lorem', 'lorme')\n1\n```\n\n## Test with words permutations\n\n```python\n>>> distance('dlw', 'lorem ipsum', 'ipsum lorum')\n1\n>>> distance('dlw', 'lorem ipsum dolor', 'ipsum lorum')\n7\n>>> distance('dlwe', 'lorem ipsum dolor', 'ipsum lorum')\n1\n```\n\n## Find minimal text by distance\n\n```python\n>>> distance.find_minimal('h', 'lorem', ['larum', 'lorum'])\n(1, 'lorum')\n```",
    "docs_url": null,
    "download_url": "https://github.com/orsinium/textdistance/tarball/master",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/orsinium/textdistance",
    "keywords": "distance between text strings sequences iterators",
    "license": "GNU Lesser General Public License v3.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "textdistance",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/textdistance/",
    "release_url": "https://pypi.org/project/textdistance/1.0.0/",
    "requires_python": null,
    "summary": "Compute distance between the two texts.",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0ea04583fd99afb346378c60144fd089",
          "sha256": "09723fbaf99fc51f6096663dbdd5bf1e3922b9b5c964755647cc5b8f90feb793"
        },
        "downloads": 0,
        "filename": "textdistance-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0ea04583fd99afb346378c60144fd089",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6355,
        "upload_time": "2017-05-05T08:59:35",
        "url": "https://files.pythonhosted.org/packages/0c/75/2a49803f09a770317ab111ab87b6df12604244019ccac0e2d5b3335596b2/textdistance-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0ea04583fd99afb346378c60144fd089",
        "sha256": "09723fbaf99fc51f6096663dbdd5bf1e3922b9b5c964755647cc5b8f90feb793"
      },
      "downloads": 0,
      "filename": "textdistance-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0ea04583fd99afb346378c60144fd089",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6355,
      "upload_time": "2017-05-05T08:59:35",
      "url": "https://files.pythonhosted.org/packages/0c/75/2a49803f09a770317ab111ab87b6df12604244019ccac0e2d5b3335596b2/textdistance-1.0.0.tar.gz"
    }
  ]
}