{
  "info": {
    "author": "Samuel Colvin",
    "author_email": "s@muelcolvin.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Environment :: MacOS X",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "watchgod\n========\n\n|BuildStatus| |Coverage| |pypi|\n\nSimple, modern file watching and code reload in python.\n\nUsage\n-----\n\nTo watch for changes in a directory:\n\n.. code:: python\n\n   from watchgod import watch\n\n   for changes in watch('./path/to/dir'):\n       print(changes)\n\n\nTo run a function and restart it when code changes:\n\n.. code:: python\n\n   from watchgod import run_process\n\n   def foobar(a, b, c):\n       ...\n\n   run_process('./path/to/dir', foobar, process_args=(1, 2, 3))\n\n``run_process`` uses ``PythonWatcher`` so only changes to python files will prompt a\nreload, see *custom watchers* below.\n\nIf you need notifications about change events as well as to restart a process you can\nuse the ``callback`` argument to pass a function will will be called on every file change\nwith one argument: the set of file changes.\n\nAsynchronous Methods\n....................\n\n*watchgod* comes with an asynchronous equivalents of ``watch``: ``awatch`` which uses\na ``ThreadPoolExecutor`` to iterate over files.\n\n.. code:: python\n\n   import asyncio\n   from watchgod import awatch\n\n   async def main():\n       async for changes in awatch('/path/to/dir'):\n           print(changes)\n\n   loop = asyncio.get_event_loop()\n   loop.run_until_complete(main())\n\n\nThere's also an asynchronous equivalents of ``run_process``: ``arun_process`` which in turn\nuses ``awatch``:\n\n.. code:: python\n\n   import asyncio\n   from watchgod import arun_process\n\n   def foobar(a, b, c):\n       ...\n\n   async def main():\n       await arun_process('./path/to/dir', foobar, process_args=(1, 2, 3))\n\n   loop = asyncio.get_event_loop()\n   loop.run_until_complete(main())\n\n``arun_process`` uses ``PythonWatcher`` so only changes to python files will prompt a\nreload, see *custom watchers* below.\n\nThe signature of ``arun_process`` is almost identical to ``run_process`` except that\nthe ``callback`` argument if provide must be a coroutine, not a function.\n\nCustom Watchers\n...............\n\n*watchgod* comes with the following watcher classes which can be used via the ``watcher_cls``\nkeyword argument to any of the methods above.\n\nFor more details, checkout\n`watcher.py <https://github.com/samuelcolvin/watchgod/blob/master/watchgod/watcher.py>`_,\nit's pretty simple.\n\n**AllWatcher**\n    The base watcher, all files are checked for changes.\n\n**DefaultWatcher**\n    The watcher used by default by ``watch`` and ``awatch``, commonly ignored files\n    like ``*.swp``, ``*.pyc`` and ``*~`` are ignored along with directories like\n    ``.git``.\n\n**PythonWatcher**\n    Specific to python files, only ``*.py``, ``*.pyx`` and ``*.pyd`` files are watched.\n\n**DefaultDirWatcher**\n    Is the base for ``DefaultWatcher`` and ``DefaultDirWatcher`` and takes care of ignoring\n    some regular directories.\n\n\nIf these classes aren't sufficient you can define your own watcher, in particular\nyou will want to override ``should_watch_dir`` and ``should_watch_file``. Unless you're\ndoing something very odd you'll want to inherit from ``DefaultDirWatcher``.\n\n\nWhy no inotify / kqueue / fsevent / winapi support\n--------------------------------------------------\n\n*watchgod* (for now) uses file polling rather than the OS's built in file change notifications.\n\nThis is not an oversight, it's a decision with the following rationale:\n\n1. Polling is \"fast enough\", particularly since PEP 471 introduced fast ``scandir``.\n\n   With a reasonably large project like the TutorCruncher code base with 850 files and 300k lines\n   of code *watchdog* can scan the entire tree in ~24ms. With a scan interval of 400ms that's roughly\n   5% of one CPU - perfectly acceptable load during development.\n\n2. The clue is in the title, there are at least 4 different file notification systems to integrate\n   with, most of them not trivial. And that's before we get to changes between different OS versions.\n\n3. Polling works well when you want to group or \"debounce\" changes.\n\n   Let's say you're running a dev server and you change branch in git, 100 files change.\n   Do you want to reload the dev server 100 times or once? Right.\n\n   Polling periodically will likely group these changes into one event. If you're receiving a\n   stream of events you need to delay execution of the reload when you receive the first event\n   to see if it's part of a whole bunch of file changes, this is not completely trivial.\n\n\nAll that said, I might still implement ``inotify`` support. I don't use anything other\nthan Linux so I definitely won't be working on dedicated support for any other OS.\n\n\n.. |BuildStatus| image:: https://travis-ci.org/samuelcolvin/watchgod.svg?branch=master\n   :target: https://travis-ci.org/samuelcolvin/watchgod\n.. |Coverage| image:: https://codecov.io/gh/samuelcolvin/watchgod/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/samuelcolvin/watchgod\n.. |pypi| image:: https://img.shields.io/pypi/v/watchgod.svg\n   :target: https://pypi.python.org/pypi/watchgod\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/samuelcolvin/watchgod",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "watchgod",
    "platform": "",
    "project_url": "https://pypi.org/project/watchgod/",
    "release_url": "https://pypi.org/project/watchgod/0.0.1/",
    "requires_dist": [],
    "requires_python": ">=3.5",
    "summary": "Simple, modern file watching and code reload in python.",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e6b6f856e181d9cabb4ed66a2598e578",
          "sha256": "d1bed30f8a3564cc70a535e52fc3f66420dfb07433d3bc2572bd6ba8d709c7c0"
        },
        "downloads": -1,
        "filename": "watchgod-0.0.1-py35,py36-none-any.whl",
        "has_sig": false,
        "md5_digest": "e6b6f856e181d9cabb4ed66a2598e578",
        "packagetype": "bdist_wheel",
        "python_version": "py35,py36",
        "size": 9435,
        "upload_time": "2017-10-17T17:44:55",
        "url": "https://files.pythonhosted.org/packages/42/a2/177d9b564f4df3ccfa764f1e2235af518e0b21f7f028f4346aea60bade50/watchgod-0.0.1-py35,py36-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "66dd288c649aa5c33ba44dc29195003b",
          "sha256": "a49d846c094a734fc1a4bca46172885ca0b5c1278c0d0f45c54e81ae749cb93d"
        },
        "downloads": -1,
        "filename": "watchgod-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "66dd288c649aa5c33ba44dc29195003b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6168,
        "upload_time": "2017-10-17T17:44:56",
        "url": "https://files.pythonhosted.org/packages/12/0d/69e08a213c0d096c74b57b419511b9e3443b6246caceadc05d8a78364360/watchgod-0.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e6b6f856e181d9cabb4ed66a2598e578",
        "sha256": "d1bed30f8a3564cc70a535e52fc3f66420dfb07433d3bc2572bd6ba8d709c7c0"
      },
      "downloads": -1,
      "filename": "watchgod-0.0.1-py35,py36-none-any.whl",
      "has_sig": false,
      "md5_digest": "e6b6f856e181d9cabb4ed66a2598e578",
      "packagetype": "bdist_wheel",
      "python_version": "py35,py36",
      "size": 9435,
      "upload_time": "2017-10-17T17:44:55",
      "url": "https://files.pythonhosted.org/packages/42/a2/177d9b564f4df3ccfa764f1e2235af518e0b21f7f028f4346aea60bade50/watchgod-0.0.1-py35,py36-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "66dd288c649aa5c33ba44dc29195003b",
        "sha256": "a49d846c094a734fc1a4bca46172885ca0b5c1278c0d0f45c54e81ae749cb93d"
      },
      "downloads": -1,
      "filename": "watchgod-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "66dd288c649aa5c33ba44dc29195003b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6168,
      "upload_time": "2017-10-17T17:44:56",
      "url": "https://files.pythonhosted.org/packages/12/0d/69e08a213c0d096c74b57b419511b9e3443b6246caceadc05d8a78364360/watchgod-0.0.1.tar.gz"
    }
  ]
}