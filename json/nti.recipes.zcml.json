{
  "info": {
    "author": "Jason Madden",
    "author_email": "open-source@nextthought.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Buildout",
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3"
    ],
    "description": "Supported options\n=================\n\nThe recipe supports installing multiple different sets\nof ZCML slugs in multiple different output directories.\nThese sets are specified in grouped options, where ``X``\nis the common prefix shared by all options in the group.\n\nX_zcml\n\tA list of zcml entires. Required.\n\n\tformat::\n\n\t\tzcml := package \":\" filename\n\t\tpackage := dottedname | dottedname \"-\" ( include_name )\n\n\tThe ``filename`` is the fully specified file, such as\n\t``browser.zcml``, whereas the ``include_name`` is a relative\n\tportion mising the ``.zcml`` extension, defaulting to\n\t``configure`` (it was originally validated against a strict list\n\tof possibilities, but that is no longer the case). If the filename\n\tis not given, the ``include_name`` is used.\n\nX_location\n\tA directory name relative to the etc-directory\n\tto put the generated slugs in. Required.\n\nX_file\n\tA convenient shortuct if all or most of the zcml entries would\n\thave the same ``include_name``. Set this option to make it the\n\tdefault instead of configure. Optional.\n\nX_features\n\tIf this optional directive is provided, it is a space and newline\n\tseparated list of ZCML features that should be provided when the\n\toutput directory is processed. These are provided in the first\n\tfile.\n\nThere are two global options:\n\ndeployment\n\tThe name of a ``zc.recipe.deployment`` part containing the\n\tdirectory definitions. We will use the ``etc-directory`` defined\n\tin this part as the base for locations.\n\netc-directory\n\tIf you do not specify a ``deployment``, then this value will\n\tbe used as the etc-directory.\n\n\nExample usage\n=============\n\nWe'll start by creating a buildout that uses the recipe::\n\n\t>>> write('buildout.cfg',\n\t... \"\"\"\n\t... [buildout]\n\t... parts = test1\n\t...\n\t... [test1]\n\t... recipe = nti.recipes.zcml\n\t... etc-directory = ${buildout:directory}/zope/etc\n\t... package_location = package-includes\n\t... package_features = foo bar\n\t...                    baz\n\t... package_zcml =\n\t...\t\tmy.package\n\t...\t\tsomefile:my.otherpackage\n\t...\t\tmy.thirdpackage-meta\n\t... \"\"\")\n\nRunning the buildout gives us::\n\n\t>>> print 'start', system(buildout) # doctest:+ELLIPSIS\n\tstart Installing test1.\n\tWhile:\n\t  Installing test1.\n\tError: The parents of '/.../sample-buildout/zope/etc/package-includes' do not exist\n\nWe need to have a valid etc directory. Let's create one::\n\n\t>>> mkdir(\"zope\")\n\t>>> mkdir(\"zope\", \"etc\")\n\t>>> print 'start', system(buildout) # doctest:+ELLIPSIS\n\tstart Installing test1.\n\nWe now have a package include directory::\n\n\t>>> ls(\"zope\", \"etc\")\n\td  package-includes\n\nIt does contain ZCML slugs::\n\n\t>>> ls(\"zope\", \"etc\", \"package-includes\")\n\t-  000-features.zcml\n\t-  001-my.package-configure.zcml\n\t-  002-somefile-configure.zcml\n\t-  003-my.thirdpackage-meta.zcml\n\nThese  files contain the usual stuff::\n\n\t>>> cat(\"zope\", \"etc\", \"package-includes\", \"000-features.zcml\")\n\t<configure xmlns=\"http://namespaces.zope.org/zope\" xmlns:meta=\"http://namespaces.zope.org/meta\">\n\t\t<meta:provides feature=\"foo\" />\n\t\t<meta:provides feature=\"bar\" />\n\t\t<meta:provides feature=\"baz\" />\n\t</configure>\n\t>>> cat(\"zope\", \"etc\", \"package-includes\", \"001-my.package-configure.zcml\")\n\t<include package=\"my.package\" file=\"configure.zcml\" />\n\t>>> cat(\"zope\", \"etc\", \"package-includes\", \"002-somefile-configure.zcml\")\n\t<include package=\"somefile\" file=\"my.otherpackage\" />\n\t>>> cat(\"zope\", \"etc\", \"package-includes\", \"003-my.thirdpackage-meta.zcml\")\n\t<include package=\"my.thirdpackage\" file=\"meta.zcml\" />\n\nThat's all.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "buildout zcml",
    "license": "APACHE 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nti.recipes.zcml",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/nti.recipes.zcml/",
    "release_url": "https://pypi.org/project/nti.recipes.zcml/0.0.0.dev0/",
    "requires_python": "",
    "summary": "zc.buildout recipes for writing ZCML",
    "version": "0.0.0.dev0"
  },
  "releases": {
    "0.0.0.dev0": []
  },
  "urls": []
}