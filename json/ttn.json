{
  "info": {
    "author": "Emmanuelle Lejeail",
    "author_email": "emmanuelle@thethingsindustries.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Table of Contents\n-----------------\n\n-  `Description <#description>`__\n-  `MQTTClient <#mqttclient>`__\n-  `connect <#connect>`__\n-  `close <#close>`__\n-  `set\\_uplink\\_callback <#set_uplink_callback>`__\n-  `uplink\\_callback <#uplink_callback>`__\n-  `set\\_connect\\_callback <#set_connect_callback>`__\n-  `connect\\_callback <#connect_callback>`__\n-  `set\\_downlink\\_callback <#set_downlink_callback>`__\n-  `downlink\\_callback <#downlink_callback>`__\n-  `set\\_close\\_callback <#set_close_callback>`__\n-  `close\\_callback <#close_callback>`__\n-  `send <#send>`__\n-  `Errors <#errors>`__\n-  `UplinkMessage <#uplinkmessage>`__\n\nDescription\n-----------\n\nThis package provides you an easy way to connect to The Things Network\nvia MQTT.\n\nMQTTClient\n~~~~~~~~~~\n\nThe class constructor can be called following this scheme:\n\n.. code:: python\n\n    MQTTClient(app_id, app_access_key, [mqtt_address], [discovery_address])\n\n-  ``app_id``: **string** this the name given to the application when it\n   was created. |Screenshot of the console with app section|\n-  ``app_access_key``: **string** this can be found at the bottom of the\n   application page under **ACCESS KEYS**. |Screenshot of the console\n   with accesskey section|\n-  ``mqtt_address``: **string** this is the address of the handler to\n   which the application was registered. It needs to be provided as an\n   ``mqtt_address=value`` argument when calling the constructor.\n-  ``discovery_address``: **string** this is the address of the\n   discovery server to use in order to find back the address of the MQTT\n   handler. It needs to be provided as an ``discovery_address=value``\n   argument when calling the constructor. The constructor returns an\n   **MQTTClient object** set up with the application informations, ready\n   to be connected to The Things Network.\n\nconnect\n~~~~~~~\n\nConnects and starts the client in the background. This function also\nre-establishes the client's connection in case it was closed.\n\n.. code:: python\n\n    client.connect()\n\nclose\n~~~~~\n\nDisconnects and stops the client from which the method is called.\n\n.. code:: python\n\n    client.close()\n\nUsing Callbacks\n~~~~~~~~~~~~~~~\n\nThe callback functions are functions which are executed when a trigger\nevent happens.\n\nset\\_uplink\\_callback\n^^^^^^^^^^^^^^^^^^^^^\n\nAdd a callback function, to be called when an uplink message is\nreceived.\n\n.. code:: python\n\n    client.set_uplink_callback(uplink_callback)\n\nuplink\\_callback\n''''''''''''''''\n\nThe callback function must be declared in the script following this\nstructure: \\* ``uplink_callback(msg, client)`` \\* ``msg``:\n**UplinkMessage object** the message received by the client. \\*\n``client``: **MQTTClient object** the client from which the callback is\nexecuted.\n\nset\\_connect\\_callback\n^^^^^^^^^^^^^^^^^^^^^^\n\nAdd a connection callback function to be executed when the client\nconnects to the broker.\n\n.. code:: python\n\n    client.set_connect_callback(connect_callback)\n\nconnect\\_callback\n'''''''''''''''''\n\n-  ``connect_callback(res, client)``: the function which will be\n   executed on connection to the broker.\n-  ``res``: **boolean** the result of the connection. If it's true, the\n   connection succeeded. If not, it means the connection failed.\n-  ``client``: **MQTTClient object** the TTN client from which the\n   callback is called.\n\nset\\_downlink\\_callback\n^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd a downlink callback function, with actions to execute when a\ndownlink message is sent.\n\n.. code:: python\n\n    client.set_downlink_callback(downlinkCallback)\n\ndownlink\\_callback\n''''''''''''''''''\n\n-  ``downlink_callback(mid, client)``: the function which will be a new\n   publish behavior for our MQTT client.\n-  ``mid``: **int** this is the message ID for the downlink request. It\n   can be used to track the request.\n-  ``client``: **MQTTClient object** the TTN client from which the\n   callback is called.\n\nset\\_close\\_callback\n^^^^^^^^^^^^^^^^^^^^\n\nAdd a callback to be executed when the connection to the TTN broker is\nclosed.\n\n.. code:: python\n\n    client.set_close_callback(close_callback)\n\nclose\\_callback\n'''''''''''''''\n\n-  ``close_callback(res, client)``: the function which will be executed\n   when the connection is closed.\n-  ``res``: **boolean** the result of the disconnection. If it's true,\n   it went all as expected. If not, it means the disconnection was\n   unexpected.\n-  ``client``: **MQTTClient object** the TTN client from which we call\n   the callback.\n\nsend\n~~~~\n\nSends a downlink to the device.\n\n.. code:: python\n\n    client.send(dev_id, payload, [port], [confirmation], [schedule])\n\n-  ``dev_id``: **string** the ID of the device which will receive the\n   message.\n-  ``payload``: the payload of the message to be published to the\n   broker. It can be an hexadecimal **string**, a base64 **string** like\n   ``AQ==`` (this will send the raw payload ``01`` to your device) or a\n   **dictionary** of JSON nature. Here is an example of a **dictionary**\n   argument that could be passed to the method:\n\n   .. code:: json\n\n       {\"led_state\": \"on\", \"counter\": 1}\n\n   In case it's a **dictionary** with fields, please make sure the\n   **encoder** function (Payload Formats section) of the application is\n   set to make sense of the informations transmitted in each field.\n   |Screenshot of an encoder function in the console|\n-  ``port``: **int** the port of the device to which the message will be\n   sent. Default value to 1.\n-  ``confirmation``: **boolean** this boolean indicates if you wish to\n   receive a confirmation after sending the downlink message. Default\n   value to False.\n-  ``schedule``: **string** this string provides the type of schedule on\n   which the message should be sent. It can take values such as\n   ``first`` or ``last``. Default value to ``replace``.\n\nErrors\n~~~~~~\n\nErrors can happen on connection for different reasons: \\* Wrong\n``app_id``, ``access_key`` or ``mqtt_address`` were provided to the\nconstructor. \\* The machine may not have access to the network/The MQTT\nserver could be down/Firewall restrictions could prevent connection \\*\nThe client process doesn't have system capabilities to open a socket \\*\nThe MQTT server uses MQTTS, but the client won't accept the TLS\ncertificate Errors could also happen when closing connection, in case\nthe disconnection is unexpected. It's possible to catch those exceptions\nusing ``except RuntimeError as`` and print the error.\n\nUplinkMessage\n~~~~~~~~~~~~~\n\nThis type of object is constructed dynamically from the message received\nby the client, so this means some attributes can change from one message\nto another. However here are some constant attributes usually found in\nUplinkMessage objects: \\* app\\_id: the application ID to which the\ndevice is registered \\* dev\\_id: the ID of the device \\* port: the port\nnumber on which the message was sent \\* payload\\_raw: a buffer which\ncontains the payload in hexadecimal \\* metadata: this field is another\nobject which contains all the metadata of the message. Such as: the\ndate, the frequency, the data rate and the list of gateways.\n\n.. |Screenshot of the console with app section| image:: ./images/app-console.png?raw=true\n.. |Screenshot of the console with accesskey section| image:: ./images/accesskey-console.png?raw=true\n.. |Screenshot of an encoder function in the console| image:: ./images/encoder-function.png?raw=true\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/TheThingsNetwork/python-app-sdk",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ttn",
    "platform": "",
    "project_url": "https://pypi.org/project/ttn/",
    "release_url": "https://pypi.org/project/ttn/2.0.0/",
    "requires_dist": [
      "google-cloud",
      "google-api-python-client",
      "protobuf",
      "grpcio",
      "events",
      "paho-mqtt"
    ],
    "requires_python": "",
    "summary": "The Things Network Client",
    "version": "2.0.0"
  },
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "769eb93c72ea0b33e2d5a536b0b4ce19",
          "sha256": "1e57b9b83dd4c5b3a2134a66832dece575056bc65b772b0d60d93f6a34cb6e94"
        },
        "downloads": -1,
        "filename": "ttn-2.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "769eb93c72ea0b33e2d5a536b0b4ce19",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 11039,
        "upload_time": "2017-11-29T13:16:40",
        "url": "https://files.pythonhosted.org/packages/ad/63/8aaad50bd787d48bb73cf01b45e82fa1cfd13411184eb13f96162b97cf41/ttn-2.0.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d619ed73fe50ad49f14d7fc80bea9360",
          "sha256": "ee25d270e8e271ee20f6d3fdafb98279ac47c6a5e412d2e61d70aaef2490f357"
        },
        "downloads": -1,
        "filename": "ttn-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d619ed73fe50ad49f14d7fc80bea9360",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6049,
        "upload_time": "2017-11-29T13:16:41",
        "url": "https://files.pythonhosted.org/packages/42/06/0d2ada70191830252d00802f71de39c6e136d6fb9d2d3becd005d40a6717/ttn-2.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "769eb93c72ea0b33e2d5a536b0b4ce19",
        "sha256": "1e57b9b83dd4c5b3a2134a66832dece575056bc65b772b0d60d93f6a34cb6e94"
      },
      "downloads": -1,
      "filename": "ttn-2.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "769eb93c72ea0b33e2d5a536b0b4ce19",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 11039,
      "upload_time": "2017-11-29T13:16:40",
      "url": "https://files.pythonhosted.org/packages/ad/63/8aaad50bd787d48bb73cf01b45e82fa1cfd13411184eb13f96162b97cf41/ttn-2.0.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "d619ed73fe50ad49f14d7fc80bea9360",
        "sha256": "ee25d270e8e271ee20f6d3fdafb98279ac47c6a5e412d2e61d70aaef2490f357"
      },
      "downloads": -1,
      "filename": "ttn-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d619ed73fe50ad49f14d7fc80bea9360",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6049,
      "upload_time": "2017-11-29T13:16:41",
      "url": "https://files.pythonhosted.org/packages/42/06/0d2ada70191830252d00802f71de39c6e136d6fb9d2d3becd005d40a6717/ttn-2.0.0.tar.gz"
    }
  ]
}