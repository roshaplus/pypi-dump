{
  "info": {
    "author": "Volodymyr Burenin",
    "author_email": "vburenin@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "XJPATH simplifies access to the python data structures using relatively\nsimple path syntax. It doesn't not only lookup value, it also can\nvalidate found data type as well as create value if a target structure is a\ndictionary.\n\nThe typical scenarios are:\n\n - you need to lookup an element from nested dicts.\n - you need to lookup and element from array that is a value of nested dictionary\n - you need to get a list of X values from multiple nested dictionaries.\n - you just want to operate with a complex data structure in the way you\n   operate with the dictionary.\n - you want to make sure that found data has an expected type.\n\nThe expression syntax is trivial it looks like:\n\n'key1.key2.key3'\n\nEach key name is a nested data index/key. Key may refer to a dictionary,\nan array index or iterator.\n\nTo refer a dictionary key, just use its name as in the example above.\n\nAn array index is prepended with '@' symbol:\n\n    @2 - Means seconds element.\n    @-2 - Means second element from the end.\n    @last - Means last element.\n    @first - Means first element of the array.\n\nIn case if dictionary key contains any reserved symbols, just escape them.\n\n'2.\\@2' - will lookup key 2 and then key '@2'.\n\nYou also can specify a type of expected value as a postfix for expected value:\n\n  'keyname[]', '@last[], '@first{}', 'data$', 'data#'\n\n  [] - Expected value is a list.\n  () - Expected value is a tuple.\n  {} - Expected value is a dictionary.\n  # - Expected value is an integer.\n  % - Expected value is a float.\n  $ - Expected value is a string.\n\n\nHere is a bunch of examples:\n\n>>> d = {'data': {\n  'a_array': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n  'b_dict': {'a': 'xxx', 'b': 'yyy', 'c': 'zzz'},\n  'c_array': [{'v': 'vdata1'}, {'v': 'vdata2'}]}}\n>>> xj = xjpath.XJPath(d)\n\nTo get 'a_array' array:\n\n>>> xj['data.a_array']\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n>>> xj['data.a_array{}']\nIndexError: ('Path error: data.a_array{}', 'Key a_array expects type \"dict\", but found value type is \"list\"')\n\nTo get a last element of 'a_array' array:\n\n>>> xj['data.a_array.@last']\n10\n\nTo get the first element of 'a_array' array:\n\n>>> xj['data.a_array.@first']\n0\n\nTo get 9th element from 'a_array':\n\n>>> xj['data.a_array.@9']\n9\n\nTo get third element from the back from 'a_array':\n\n>>> xj['data.a_array.@-3']\n8\n\nTo get all values that are stored in dictionaries with key 'v1' of array c_array:\n\n>>> xj['data.c_array.*.v']\n('vdata1', 'vdata2')\n\nTo return a frozen copy of a_array:\n\n>>> xj['data.a_array.*']\n(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n\nTo get all values of b_dict dictionary:\n\n>>> xj['data.b_dict.*']\n('zzz', 'yyy', 'xxx')\n\n\nIf you don't like a dictionary like interface. Feel free to use path_lookup\nfunction instead that returns a found value as well as a boolean value telling\nyou if result is found or not.\n\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/vburenin/xjpath",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "xjpath",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/xjpath/",
    "release_url": "https://pypi.org/project/xjpath/0.1.5/",
    "requires_python": null,
    "summary": "JSON like structure data lookup library. A fast alternative to XPath and JsonPath. Python3 only.",
    "version": "0.1.5"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "495ed6ffc0b1155e660f0c62e35a0be3",
          "sha256": "7303970ed37c184cf66799d497aeb1c6ab74c2dd7da7dbd3d0b2bc6c0232fbcf"
        },
        "downloads": 2071,
        "filename": "xjpath-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "495ed6ffc0b1155e660f0c62e35a0be3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5834,
        "upload_time": "2015-03-30T16:34:49",
        "url": "https://files.pythonhosted.org/packages/19/ad/5813430129c1dbd6557b4f92c4350fd85c1108f2e81dfee74e70e21ebfaa/xjpath-0.1.tar.gz"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "898b5855413ab7659b7f5ac52208b1e0",
          "sha256": "2a78862d94b7b313f1ab1d0933837d264cb9901a64ff1cabf3d55edd95aeb904"
        },
        "downloads": 1114,
        "filename": "xjpath-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "898b5855413ab7659b7f5ac52208b1e0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6445,
        "upload_time": "2015-03-31T19:54:31",
        "url": "https://files.pythonhosted.org/packages/7a/d7/9c7b9f1b2974f9c89924f93e1ef0bab00f2129f96a1631fafb705c17dbcb/xjpath-0.1.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "898b5855413ab7659b7f5ac52208b1e0",
        "sha256": "2a78862d94b7b313f1ab1d0933837d264cb9901a64ff1cabf3d55edd95aeb904"
      },
      "downloads": 1114,
      "filename": "xjpath-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "898b5855413ab7659b7f5ac52208b1e0",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6445,
      "upload_time": "2015-03-31T19:54:31",
      "url": "https://files.pythonhosted.org/packages/7a/d7/9c7b9f1b2974f9c89924f93e1ef0bab00f2129f96a1631fafb705c17dbcb/xjpath-0.1.5.tar.gz"
    }
  ]
}