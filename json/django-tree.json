{
  "info": {
    "author": "Bertrand Bordage",
    "author_email": "bordage.bertrand@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "Django-tree\n===========\n\nFast and easy tree structures.\n\n**In alpha, it can\u2019t be used yet in production.**\n\nThis tool works in a very similar way to **django-mptt**\nand **django-treebeard**, however it\u2019s so different in conception\nthat it was better and faster to start from scratch\nthan to rewrite the existing solutions.\n\nCompared to these solutions, django-tree aims to have these advantages\n(some of them are already there):\n\n- less intrusive (no more inheriting issues\n  due to Model, Manager & Queryset subclasses)\n- easier to install\n- easier to use\n- more complete\n- minimalist (less code, less database fields)\n- bug-free\n- safe (thanks to database constraints)\n- faster for all operations\n\nHowever, there is nothing groundbreaking here: this is only the result of\na proper use of the latest Django improvements, combined with a good knowledge\nof SQL.\n\n\nInstallation\n------------\n\nDjango-tree requires Django 1.8 or 1.9 and Python 3.\nFor the moment, django-tree is only for PostgreSQL because it uses a specific\ndata type not available in other databases. It will be adapted to also use\na standard text field in the future for other databases, but it will be slower.\n\nAfter installing the module, you need to add `'tree',` to your\n`INSTALLED_APPS`, then add a `PathField` to a model with a\n`ForeignKey('self')`, typically named `parent` (use the `parent_field`\nargument of `PathField` if the field has another name).\nThis should give you something like this:\n\n.. code:: python\n\n    from django.db.models import Model, CharField, ForeignKey, BooleanField\n    from tree.fields import PathField\n\n    class YourModel(Model):\n        name = CharField(max_length=30)\n        parent = ForeignKey('self', null=True, blank=True)\n        path = PathField(null=True, blank=True)\n        public = BooleanField(default=False)\n\nHowever, the model above is not ordered. The children of a same parent will be\nordered by primary key. You can specify how children are ordered using the\n`order_by` argument of `PathField`. If needed, you can add a field for users\nto explicitly order these objects. Example:\n\n.. code:: python\n\n    from django.db.models import (\n        Model, CharField, ForeignKey, IntegerField, BooleanField)\n    from tree.fields import PathField\n\n    class YourModel(Model):\n        name = CharField(max_length=30)\n        parent = ForeignKey('self', null=True, blank=True)\n        position = IntegerField(default=1)\n        path = PathField(order_by=('position', 'name'), null=True, blank=True)\n        public = BooleanField(default=False)\n\nHere, the children of a same parent will be ordered by position, and then\nby name if the position is the same.\n\n\nUsage\n-----\n\nA `PathField` is an automatic field, you don\u2019t need to set, modify, or even see\nits value once it is installed. But you can use the `Path` object it returns to\nget tree information about the current instance, or make complex queries\non the whole tree structure. Example to show you most of the possibilities:\n\n.. code:: python\n\n    obj = YourModel.objects.first()\n    obj.path.rebuild_tree()  # Rebuilds the whole tree,\n                             # typically useful after a major migration.\n    obj.path.level\n    obj.path.is_root\n    obj.path.is_leaf\n    obj.path.get_children()\n    obj.path.get_children().filter(public=True)\n    obj.path.get_ancestors()\n    obj.path.get_ancestors(include_self=True)\n    obj.path.get_descendants(include_self=True)\n    obj.path.get_siblings()\n    obj.path.get_prev_sibling()  # Fetches the previous sibling.\n    obj.path.get_next_sibling()\n    # Same as `get_prev_sibling`, except that we get the first public one.\n    obj.path.get_prev_siblings().filter(public=True).first()\n\nThere is also a bunch of less useful lookups, transforms and functions\navailable. They will be documented with examples in the future.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/BertrandBordage/django-tree",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-tree",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-tree/",
    "release_url": "https://pypi.org/project/django-tree/0.1.0/",
    "requires_python": null,
    "summary": "Fast and easy tree structures.",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": []
  },
  "urls": []
}