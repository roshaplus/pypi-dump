{
  "info": {
    "author": "Charlie Guo",
    "author_email": "FIXME",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Topic :: Communications :: Email"
    ],
    "description": "# GMail for Python\n\nA Pythonic interface to Google's GMail, with all the tools you'll need. Search, \nread and send multipart emails, archive, mark as read/unread, delete emails, \nand manage labels.\n\n__This library is still under development, so please forgive some of the rough edges__\n\nHeavily inspired by [Kriss \"nu7hatch\" Kowalik's GMail for Ruby library](https://github.com/nu7hatch/gmail)\n\n## Author\n\n* [Charlie Guo](https://github.com/charlierguo)\n\n## Installation\n\nFor now, installation is manual (`pip` support not yet implemented) and the only requirement is to use Python 2 (2.7+ to be precise):\n\n    git clone git://github.com/charlierguo/gmail.git\n\n## Features\n\n* Search emails\n* Read emails \n* Emails: label, archive, delete, mark as read/unread/spam, star\n* Manage labels\n\n## Basic usage\n\nTo start, import the `gmail` library.\n\n    import gmail\n    \n### Authenticating gmail sessions\n\nTo easily get up and running:\n\n    import gmail \n\n    g = gmail.login(username, password)\n\nWhich will automatically log you into a GMail account. \nThis is actually a shortcut for creating a new Gmail object:\n    \n    from gmail import Gmail\n\n    g = Gmail()\n    g.login(username, password)\n    # play with your gmail...\n    g.logout()\n\nYou can also check if you are logged in at any time:\n\n    g = gmail.login(username, password)\n    g.logged_in # Should be True, AuthenticationError if login fails\n\n### OAuth authentication \n\nIf you have already received an [OAuth2 access token from Google](https://developers.google.com/accounts/docs/OAuth2) for a given user, you can easily log the user in. (Because OAuth 1.0 usage was deprecated in April 2012, this library does not currently support its usage)\n\n    gmail = gmail.authenticate(username, access_token)\n\n### Filtering emails\n    \nGet all messages in your inbox:\n\n    g.inbox().mail()\n\nGet messages that fit some criteria:\n\n    g.inbox().mail(after=datetime.date(2013, 6, 18), before=datetime.date(2013, 8, 3))\n    g.inbox().mail(on=datetime.date(2009, 1, 1)\n    g.inbox().mail(sender=\"myfriend@gmail.com\") # \"from\" is reserved, use \"fr\" or \"sender\"\n    g.inbox().mail(to=\"directlytome@gmail.com\")\n\nCombine flags and options:\n\n    g.inbox().mail(unread=True, sender=\"myboss@gmail.com\")\n    \nBrowsing labeled emails is similar to working with your inbox.\n\n    g.mailbox('Urgent').mail()\n    \nEvery message in a conversation/thread will come as a separate message.\n\n    g.inbox().mail(unread=True, before=datetime.date(2013, 8, 3) sender=\"myboss@gmail.com\")\n    \n### Working with emails\n\n__Important: calls to `mail()` will return a list of empty email messages (with unique IDs). To work with labels, headers, subjects, and bodies, call `fetch()` on an individual message. You can call mail with `prefetch=True`, which will fetch the bodies automatically.__\n\n    unread = g.inbox().mail(unread=True)\n    print unread[0].body\n    # None\n\n    unread[0].fetch()\n    print unread[0].body\n    # Dear ...,\n\nMark news past a certain date as read and archive it:\n\n    emails = g.inbox().mail(before=datetime.date(2013, 4, 18), sender=\"news@nbcnews.com\")\n    for email in emails:\n        email.read() # can also unread(), delete(), spam(), or star()\n        email.archive()\n\nDelete all emails from a certain person:\n\n    emails = g.inbox().mail(sender=\"junkmail@gmail.com\")\n    for email in emails:\n        email.delete()\n     \nYou can use also `label` method instead of `mailbox`: \n\n    g.label(\"Faxes\").mail()\n\nAdd a label to a message:\n\n    email.add_label(\"Faxes\")\n\nDownload message attachments:\n\n    for attachment in email.attachments:\n        print 'Saving attachment: ' + attachment.name\n        print 'Size: ' + str(attachment.size) + ' KB'\n        attachment.save('attachments/' + attachment.name)\n    \nThere is also few shortcuts to mark messages quickly:\n\n    email.read()\n    email.unread()\n    email.spam()\n    email.star()\n    email.unstar()\n\n### Roadmap\n* Write tests\n* Better label support\n* Moving between labels/mailboxes\n* Intuitive thread fetching & manipulation\n* Sending mail via Google's SMTP servers (for now, check out https://github.com/paulchakravarti/gmail-sender)\n\n## Copyright\n\n* Copyright (c) 2013 Charlie Guo\n\nSee LICENSE for details.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/charlierguo/gmail",
    "keywords": "google gmail",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "gmail_pythonic",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/gmail_pythonic/",
    "release_url": "https://pypi.org/project/gmail_pythonic/0.0.5/",
    "requires_python": null,
    "summary": "A Pythonic interface for Google Mail.",
    "version": "0.0.5"
  },
  "releases": {
    "0.0.5": []
  },
  "urls": []
}