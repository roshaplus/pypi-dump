{
  "info": {
    "author": "Feite Brekeveld",
    "author_email": "f.brekeveld@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Topic :: Office/Business :: Financial :: Investment"
    ],
    "description": "OANDA Trading Environment\r\n=========================\r\n\r\n`|PyPI version| <http://badge.fury.io/py/oanda-trading-environment>`_\r\n\r\nThe OANDA Trading Environment is built using the OANDA REST-API by making use of the `https://github.com/oanda/oandapy <https://github.com/oanda/oandapy>`_ API-wrapper.\r\n\r\nStreaming Candles\r\n-----------------\r\n\r\nMain part is the **OANDAd** daemon that parses the streaming quotes in configurable timeframes, by 1 minute, 5 minutes, 15 minutes etc. This makes it produce streaming candles.\r\n\r\nCandle data:\r\n\r\n::\r\n\r\n      {\"data\": {\"instrument\": \"EUR_JPY\",\r\n                \"granularity\" : \"M1\",\r\n                \"start\": \"2015-09-02 15:36:00\"\r\n                \"end\": \"2015-09-02 15:37:00\",\r\n                \"data\": {\"high\": 134.967, \r\n                         \"open\": 134.962,\r\n                         \"last\": 134.9565,\r\n                          \"low\": 134.9475,\r\n                       \"volume\": 19\r\n                 },\r\n               }\r\n       }\r\n\r\nThe larger timeframes can be requested using the API.\r\n\r\nActions\r\n-------\r\n\r\nWhen a timeframe is completed it can be handled by one or more plugins. Plugins have a configfile based on the name of the plugin-file, but in lowercase. The plugins can be found under *etc/OANDA/plugins* and the plugin configs under *etc/OANDA/config/plugins*.\r\n\r\nPlugins need to be enabled in the config file, see the 'plugins:' section in *etc/OANDA/config/OANDAd.cfg*.\r\n\r\nThe environment comes with a few plugins:\r\n\r\nPublish/Subscribe - plugin\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThis plugin can be configured to 'publish' the candle using a publisher/subscriber mechanism. This is achieved by using the `0MQ <http://zeromq.org>`_ library and the python binding for it: pyzmq\r\n\r\nOther trading applications can easily subscribe to receive the candle data. See `here <#zmq_example>`_ for a ZMQ subscription example.\r\n\r\nThis plugin is enabled by default.\r\n\r\nPlainfile - plugin\r\n~~~~~~~~~~~~~~~~~~\r\n\r\nThis plugin can be configured to write candle records to a flatfile in a directory structure.\r\n\r\nExample:\r\n\r\n::\r\n\r\n     /tmp/oandadb\r\n     |-- BCO_USD\r\n     |   |-- M1\r\n     |   |   `-- cache\r\n     |   |-- M15\r\n     |   |   `-- cache\r\n     |   `-- M5\r\n     |       `-- cache\r\n     |-- DE30_EUR\r\n     |   |-- M1\r\n     |   |   `-- cache\r\n     |   |-- M15\r\n     |   |   `-- cache\r\n     |   `-- M5\r\n     |       `-- cache\r\n     |-- EUR_CHF\r\n     |   |-- M1\r\n     |   |   `-- cache\r\n     |   |-- M15\r\n     |   |   `-- cache\r\n     |   `-- M5\r\n     |       `-- cache\r\n     |-- EUR_GBP\r\n     |   |-- M1\r\n     |   |   `-- cache\r\n     |   |-- M15\r\n     |   |   `-- cache\r\n     |   `-- M5\r\n     |       `-- cache\r\n     |-- EUR_JPY\r\n     |   |-- M1\r\n     |   |   `-- cache\r\n     |   |-- M15\r\n     |   |   `-- cache\r\n     |   `-- M5\r\n     |       `-- cache\r\n     |-- EUR_USD\r\n         |-- M1\r\n         |   `-- cache\r\n         |-- M15\r\n         |   `-- cache\r\n         `-- M5\r\n             `-- cache\r\n\r\nMySQL - plugin\r\n~~~~~~~~~~~~~~\r\n\r\nThe MySQL plugin can be configured to insert records into a database. This plugin is provided as an example, since it needs details that depend on your databasemodel.\r\n\r\nSpecs and Prerequisites\r\n-----------------------\r\n\r\nTo access the OANDA services you will need a token, see `https://developer.oanda.com <https://developer.oanda.com>`_ for details.\r\n\r\nInstall\r\n-------\r\n\r\nGit\r\n~~~\r\n\r\nInstall by using a virtual environment and git:\r\n\r\n::\r\n\r\n      $ cd <somewhere>\r\n      $ mkdir OANDA\r\n      $ cd OANDA\r\n      $ virtualenv venv\r\n\r\nOptionally use *--system-site-packages* to use the standard available packages for the python modules available on your system: *pyyaml*, *pyzmq*. Check for the packages on the distribution you use.\r\n\r\n::\r\n\r\n      $ . ./venv/bin/activate\r\n      $ git clone https://github.com/hootnot/oanda-trading-environment.git\r\n      $ cd oanda-trading-environment\r\n      $ python setup.py install\r\n\r\nOANDA has not made the oandapy module pip installable. A hack to get oandapy installed as a standalone module:\r\n\r\n::\r\n\r\n      $ pip install git+https://github.com/hootnot/oandapy\r\n\r\nThis will install the latest oandapy using the setup.py from the oandapy fork.\r\n\r\n::\r\n\r\n      $ pip list | grep oanda\r\n      oanda-trading-environment (0.0.1)\r\n      oandapy (0.1)\r\n\r\npip\r\n~~~\r\n\r\nInstall from pypi:\r\n\r\nusing a virtual environment:\r\n\r\n::\r\n\r\n      $ cd <somewhere>\r\n      $ mkdir OANDA\r\n      $ cd OANDA\r\n      $ virtualenv [--system-site-packages] venv\r\n      $ . ./venv/bin/activate\r\n      $ pip install oanda-trading-environment\r\n      $ pip install git+https://github.com/hootnot/oandapy\r\n\r\nusing a system install:\r\n\r\n::\r\n\r\n      $ sudo pip install oanda-trading-environment\r\n      $ sudo pip install git+https://github.com/hootnot/oandapy\r\n\r\nConfigure the OANDAd.cfg config file and start the daemon.\r\n\r\nQuick start\r\n~~~~~~~~~~~\r\n\r\nAfter installing you **need** to configure the environment by editing the config file *etc/OANDA/config/OANDAd.cfg*. This is a YAML based configfile.\r\n\r\nConfigure the **environment** and the **token**. Alter the list of instruments you want to follow.\r\n\r\nThe pubsub plugin publishes by default at localhost, port 5550. These can be altered in the 'pubsub' config: *etc/OANDA/config/plugins/pubsub.cfg*.\r\n\r\nControlling OANDAd\r\n^^^^^^^^^^^^^^^^^^\r\n\r\nOANDAd is built using `daemoncle <https://github.com/jnrbsn/daemonocle>`_. The 'start', 'status' and 'stop' commands are implemented. The daemon forks itself and the child will process the stream. When there are issues, TIME-OUT for instance, the child will exit and a new child will be spawned.\r\n\r\n::\r\n\r\n      $ OANDAd start \r\n      Starting OANDAd ... OK\r\n\r\n      $ OANDAd status\r\n      OANDAd -- pid: 51931, status: sleeping, uptime: 0m, %cpu: 0.0, %mem: 1.8\r\n\r\n      $ OANDAd stop\r\n      Stopping OANDAd ... OK\r\n\r\nThe daemon will process streaming quotes now and process the timeframes as configured. Timeframes are currently based on the midprice of bid/ask.\r\n\r\nLogging\r\n~~~~~~~\r\n\r\nThe ticks received from the stream are written to a logfile:\r\n\r\n::\r\n\r\n     streamdata.<date>\r\n\r\nThe daemon itself logs to OANDAd.log\r\n\r\nLoglevel and the streamdata logfile extension is configurable. Check the *OANDAd.cfg* file for details.\r\n\r\nZMQ - client\r\n~~~~~~~~~~~~\r\n\r\nThis simple piece of code acts as a subscriber to the daemon. All completed timeframes are written to stdout. Using ZMQ make it easy to program different strategies completely independent from each other. By using 'topics' it is possible to subscribe for a certain time granularity like M1, M5 etc. Check the ZMQ for details.\r\n\r\n::\r\n\r\n     import zmq\r\n\r\n     context = zmq.Context()\r\n     socket = context.socket( zmq.SUB)\r\n     socket.connect(\"tcp://127.0.0.1:5550\")\r\n     socket.setsockopt(zmq.SUBSCRIBE, \"\")\r\n\r\n     socket.setsockopt( zmq.RCVBUF, 1000)\r\n     while True:\r\n       msg = socket.recv()\r\n       print \"GOT: \", msg\r\n\r\nThis will show candle data like below, every time a timeframe is completed.\r\n\r\n::\r\n\r\n     GOT:  {\"data\": {\r\n                     \"instrument\": \"EUR_GBP\",\r\n                     \"granularity\": \"M1\",\r\n                     \"start\": \"2015-09-04 17:45:00\",\r\n                     \"end\": \"2015-09-04 17:46:00\",\r\n                     \"data\": {\r\n                              \"high\": 0.734445,\r\n                              \"open\": 0.734399,\r\n                              \"last\": 0.73437,\r\n                              \"low\": 0.734345,\r\n                              \"volume\": 16\r\n                             }\r\n                    }\r\n           }\r\n\r\n     GOT:  {\"data\": {\r\n                     \"instrument\": \"EUR_JPY\",\r\n                     \"granularity\": \"M1\",\r\n                     \"start\": \"2015-09-04 17:45:00\",\r\n                     \"end\": \"2015-09-04 17:46:00\",\r\n                     \"data\": {\r\n                              \"high\": 132.629,\r\n                              \"open\": 132.619,\r\n                              \"last\": 132.6185,\r\n                              \"low\": 132.608,\r\n                              \"volume\": 15\r\n                             }\r\n                    }\r\n            }\r\n\r\n     GOT:  {\"data\": {\r\n                     \"instrument\": \"SPX500_USD\",\r\n                     \"granularity\": \"M1\",\r\n                     \"start\": \"2015-09-04 17:45:00\",\r\n                     \"end\": \"2015-09-04 17:46:00\",\r\n                     \"data\": {\r\n                              \"high\": 1915.35,\r\n                              \"open\": 1914.75,\r\n                              \"last\": 1915.25,\r\n                              \"low\": 1914.75,\r\n                              \"volume\": 33\r\n                             }\r\n                    }\r\n            }\r\n\r\n.. |PyPI version| image:: https://badge.fury.io/py/oanda-trading-environment.svg",
    "docs_url": null,
    "download_url": "https://github.com/hootnot/oanda-trading-environment/archive/master.zip",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://hootnot.github.io/oanda-trading-environment/",
    "keywords": "Python OANDA oandapy REST API trading modules",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "oanda-trading-environment",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/oanda-trading-environment/",
    "release_url": "https://pypi.org/project/oanda-trading-environment/0.2.0/",
    "requires_python": null,
    "summary": "OANDA REST-API based environment serving as a base for futher development of trading tools. Main part is the OANDAd daemon processing the streaming quotes",
    "version": "0.2.0"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1f6d143adff1579d753939c39597a7b7",
          "sha256": "c84c63b270b97204379fff916162104e14d36cf62a9c0ced016c5de7807fc376"
        },
        "downloads": 1109,
        "filename": "oanda-trading-environment-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1f6d143adff1579d753939c39597a7b7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11642,
        "upload_time": "2015-09-05T21:12:46",
        "url": "https://files.pythonhosted.org/packages/bc/de/637a872de5926be3454a75176a500a4fcbea082b456857cef6ccded487b2/oanda-trading-environment-0.0.1.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0947f09d12b3801ccfbc48c0d6f7a413",
          "sha256": "017e853a6bb951f5b5564f8eaa2bfd91f52a6d8e5cd2996b44e29e834ca44c38"
        },
        "downloads": 686,
        "filename": "oanda-trading-environment-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0947f09d12b3801ccfbc48c0d6f7a413",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13487,
        "upload_time": "2015-10-04T12:29:18",
        "url": "https://files.pythonhosted.org/packages/d8/f7/742ae6ef0c9b19c9f5774e057d9629998fb228cb1aa6bf353c9443d4df67/oanda-trading-environment-0.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0947f09d12b3801ccfbc48c0d6f7a413",
        "sha256": "017e853a6bb951f5b5564f8eaa2bfd91f52a6d8e5cd2996b44e29e834ca44c38"
      },
      "downloads": 686,
      "filename": "oanda-trading-environment-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0947f09d12b3801ccfbc48c0d6f7a413",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 13487,
      "upload_time": "2015-10-04T12:29:18",
      "url": "https://files.pythonhosted.org/packages/d8/f7/742ae6ef0c9b19c9f5774e057d9629998fb228cb1aa6bf353c9443d4df67/oanda-trading-environment-0.2.0.tar.gz"
    }
  ]
}