{
  "info": {
    "author": "Klimov Konstantin",
    "author_email": "moelius1983@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "====================\nAsync task processor\n====================\n\nUsed to distribute tasks between configurable workers.\n\nFeatures\n--------\n\n- simple definition of a task as a normal function.\n- simple task processor is used for periodic tasks.\n- tarantool processor is  used for listen tarantool queue and trigger task when data comes.\n- ability to retry on error (max_retries and retry_countdown options).\n- ability to bind task as self option to worker function.\n\nTODO's\n------\n- [ ] Tests\n- [ ] Console utils\n\nInstallation\n------------\n\nAs usually use pip:\n\n.. code-block:: bash\n\n    pip install async-task-processor\n\nUsage examples\n--------------\n\n**Periodic task processor example:**\n\n.. code-block:: python\n\n    import time\n\n    from async_task_processor import ATP, TaskProcessor\n    from examples import logger\n\n\n    # first test function\n    def test_func_one(sleep_time, word):\n        \"\"\"\n\n        :type sleep_time: int\n        :type word: str\n        :return:\n        \"\"\"\n        logger.info('start working')\n        time.sleep(sleep_time)\n        logger.info('Job is done. Word is: %s' % word)\n\n\n    # second test function\n    def test_func_second(sleep_time, word):\n        \"\"\"\n\n        :type sleep_time: int\n        :type word: str\n        :return:\n        \"\"\"\n        logger.info('start working')\n        time.sleep(sleep_time)\n        logger.info('Job is done. Word is: %s' % word)\n\n\n    # third function with exception\n    def test_func_bad(self, sleep_time, word):\n        \"\"\"\n\n        :type self: async_task_processor.Task\n        :type sleep_time: int\n        :type word: str\n        :return:\n        \"\"\"\n        logger.info('start working')\n        try:\n            a = 1 / 0\n        except ZeroDivisionError:\n            # optionally you can overload max_retries and retry_countdown here\n            self.retry()\n        time.sleep(sleep_time)\n        logger.info('Job is done. Word is: %s' % word)\n\n\n    atp = ATP(asyncio_debug=True)\n    task_processor = TaskProcessor(atp=atp)\n\n    # Add function to task processor\n    task_processor.add_task(test_func_one, args=[5, 'first hello world'], max_workers=5, timeout=1,\n                            max_retries=5, retry_countdown=1)\n\n    # Add one more function to task processor\n    task_processor.add_task(test_func_second, args=[3, 'second hello world'], max_workers=5, timeout=1,\n                            max_retries=5, retry_countdown=1)\n\n    # Add one more bad function with exception. This function will raise exception and will retry it,\n    # then when retries exceeded, workers of this func will stop one by one with exception MaxRetriesExceeded\n    # bind option make Task as self argument\n    task_processor.add_task(test_func_bad, args=[3, 'second hello world'], bind=True, max_workers=2, timeout=1,\n                            max_retries=3, retry_countdown=3)\n    # Start async-task-processor\n    atp.start()\n\n**Tarantool task processor example:**\n\n.. code-block:: python\n\n    import asyncio\n    import time\n\n    import aiotarantool_queue\n\n    from async_task_processor import ATP, TntTaskProcessor\n    from examples import logger\n\n    TARANTOOL_QUEUE = 'test_queue'\n    TARANTOOL_HOST = 'localhost'\n    TARANTOOL_PORT = 3301\n    TARANTOOL_USER = None\n    TARANTOOL_PASS = None\n\n\n    def put_messages_to_tarantool(messages_count=1, queue_name='test_queue', host='localhost', port=3301, user=None,\n                                  password=None):\n        \"\"\"Put some test messages to tarantool queue\n\n        :param messages_count: messages number to put in queue\n        :param queue_name: tarantool queue name\n        :type queue_name: str\n        :param host: tarantool host\n        :param port: tarantool port\n        :param user: tarantool user\n        :param password: tarantool password\n        :return:\n        \"\"\"\n\n        async def put_job(queue, i):\n            tube = queue.tube(queue_name)\n            await tube.put(dict(num=i, first_name='Jon', last_name='Smith'))\n\n        loop = asyncio.get_event_loop()\n        queue = aiotarantool_queue.Queue(host=host, port=port, user=user, password=password)\n        put_tasks = [asyncio.async(put_job(queue, i)) for i in range(messages_count)]\n        loop.run_until_complete(asyncio.wait(put_tasks))\n        loop.run_until_complete(queue.close())\n        loop.close()\n\n\n    # Let's put messages to tarantool\n    put_messages_to_tarantool(100, TARANTOOL_QUEUE, host=TARANTOOL_HOST, port=TARANTOOL_PORT,\n                              user=TARANTOOL_USER, password=TARANTOOL_PASS)\n\n\n    # Test function\n    def test_func(self, sleep_time, word):\n        \"\"\"\n\n        :type self: async_task_processor.TntTask\n        :type sleep_time: int\n        :type word: str\n        :return:\n        \"\"\"\n        logger.info('start working')\n        time.sleep(sleep_time)\n        logger.info('Job is done. Word is %s. Data is %s. ' % (word, self.data))\n\n\n    atp = ATP(asyncio_debug=True)\n    task_processor = TntTaskProcessor(atp=atp, host=TARANTOOL_HOST, port=TARANTOOL_PORT, user=TARANTOOL_USER,\n                                      password=TARANTOOL_PASS)\n\n    # Add function to task processor. Tarantool data from queue will be in `self` argument in function. 20 parallel workers\n    # will be started.\n    task_processor.add_task(foo=test_func, queue=TARANTOOL_QUEUE, args=[1, 'hello world'], bind=True, max_workers=20,\n                            max_retries=5, retry_countdown=1)\n    # Start async-task-processor\n    atp.start()\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/moelius/async-task-processor",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "async-task-processor",
    "platform": "",
    "project_url": "https://pypi.org/project/async-task-processor/",
    "release_url": "https://pypi.org/project/async-task-processor/0.1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Simple package to run async tasks",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "188d30c47d6ccec798f7cab881910726",
          "sha256": "b9b381792915ac302d1e8f7fe10398695cbe81a9355780de45fdc13fbb175d6b"
        },
        "downloads": 0,
        "filename": "async-task-processor-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "188d30c47d6ccec798f7cab881910726",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4180,
        "upload_time": "2017-09-05T08:56:43",
        "url": "https://files.pythonhosted.org/packages/93/1b/7a44dcdec5486a1d96e7bba3dcd4386c711359069a36e6c8b9f39bb5d148/async-task-processor-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5592dcf556b2ff3f2216d02396f83133",
          "sha256": "9798cafb44d258848219861a139a65562f1ce73f7c00a74d8cb7d60e1d8265d6"
        },
        "downloads": 0,
        "filename": "async-task-processor-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5592dcf556b2ff3f2216d02396f83133",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6578,
        "upload_time": "2017-09-08T16:57:14",
        "url": "https://files.pythonhosted.org/packages/8c/1d/37bacafb95efff965dc252ac1fc56a58a8c0f365382717f9f531aa1e9cc6/async-task-processor-0.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5592dcf556b2ff3f2216d02396f83133",
        "sha256": "9798cafb44d258848219861a139a65562f1ce73f7c00a74d8cb7d60e1d8265d6"
      },
      "downloads": 0,
      "filename": "async-task-processor-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5592dcf556b2ff3f2216d02396f83133",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6578,
      "upload_time": "2017-09-08T16:57:14",
      "url": "https://files.pythonhosted.org/packages/8c/1d/37bacafb95efff965dc252ac1fc56a58a8c0f365382717f9f531aa1e9cc6/async-task-processor-0.1.2.tar.gz"
    }
  ]
}