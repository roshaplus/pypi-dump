{
  "info": {
    "author": "Andrew R. Casey",
    "author_email": "arc@ast.cam.ac.uk",
    "bugtrack_url": "",
    "classifiers": [],
    "description": "*Gaia* on TAP\n=============\n\nPython utilities and examples for accessing ESA Gaia data using Table Access Protocol (TAP).\n\n\nAuthors\n=======\n\n - Andrew R. Casey (Cambridge)\n\n\nInstallation\n============\n\nInstall using `pip`:\n\n````\npip install gaia-on-tap\n````\n\nGetting Started\n===============\n\nThe `gaia.tap` package includes two main functions for accessing Gaia data: `query` and `cone_search`.\nBy default, both will return all retrieved sources as an `astropy.table.Table` object, so you can then\nwrite the results to disk or do something useful with them.\n\n\nSelect stars around M67\n-----------------------\n\n````python\n# Get all sources within 1 degree of M67\n\nimport astropy.coordinates as coord\nfrom gaia.tap import cone_search\n\n\ncluster = coord.SkyCoord.from_name(\"M67\")\n\ncluster_candidates = cone_search(cluster.ra.deg, cluster.dec.deg, 1.0)\n````\n\n\nSelect hypervelocity star candidates in TGAS\n--------------------------------------------\n\nThis doesn't treat the errors correctly, but it's a useful example to show what you can do:\n\n````python\nimport gaia.tap\n\n# Identify stars with tangential velocities exceeding 500 km/s, and reasonable parallaxes\nhvs_candidates = gaia.tap.query(\n    \"\"\" SELECT  * \n        FROM    gaiadr1.tgas_source\n        WHERE   parallax_error/parallax < 0.2\n          AND   (4.74 * SQRT(POWER(pmra, 2) + POWER(pmdec, 2)))/parallax > 500 \"\"\")\n````\n\n\nAuthenticate using your ESA/Gaia Archive credentials\n----------------------------------------------------\n\nIf you have an account with the ESA/Gaia archive, you can include your credentials so that\nyou can upload or query private tables. This is done by having a file (e.g., `credentials.yaml`)\nlike:\n\n````\nusername: acasey\npassword: my-super-awesome-password\n````\n\nAnd then in the code:\n````python\n\nimport gaia\n\n# Read in our credentials. You only have to do this once per Python session!\ngaia.config.read(\"credentials.yaml\")\n\n# For any further queries use the authenticate flag, and the code will log you in automagically\nsources = gaia.tap.query(\" ... \", authenticate=True)\n````\n\n\nUpload a table to your local space on the ESA/Gaia archive\n----------------------------------------------------------\n\nIf you want to upload a VOtable and use it for cross-matches through the ESA/Gaia archive:\n\n````python\nimport gaia\n\n# Read in our credentials. \ngaia.config.read(\"credentials.yaml\")\n\n# Upload our table, which we will ask ESA/Gaia to call 'my_table'\ngaia.tap.upload(\"my_table\", \"/local/path/to/your/table.votable\")\n\n# Now use it!\n# (Ensure that you use the authenticate=True flag so that you can access your private tables)\nxmatched_sources = tap.query(\n    \"\"\" SELECT  *\n        FROM    gaiadr1.gaia_source as gaia,\n                <YOUR_USERNAME>.my_table as my_table\n        WHERE   1=CONTAINS(\n                    POINT('ICRS', my_table.ra, my_table.dec),\n                    CIRCLE('ICRS', gaia.ra, gaia.dec, 1.5/3600)\n                )\n    \"\"\", authenticate=True)\n````\n\n\nResources\n=========\n\n- [ESA Gaia TAP documentation](https://gea.esac.esa.int/archive/) -> Help -> Command-line access\n\n- [Gaia ADQL cookbook](https://gaia.ac.uk/science/gaia-data-release-1/adql-cookbook)\n\n- [GAVO ADQL cheat sheet](http://docs.g-vo.org/adqlref/adqlref.pdf)\n\n- [Jo Bovy's `gaia_tools`](https://github.com/jobovy/gaia_tools)\n\n- [TAP ADQL help on Vizier](http://tapvizier.u-strasbg.fr/adql/help.html)\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://www.github.com/andycasey/gaia-on-tap/",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "gaia-on-tap",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/gaia-on-tap/",
    "release_url": "https://pypi.org/project/gaia-on-tap/0.1.7/",
    "requires_python": null,
    "summary": "Utilities and tutorials for accessing Gaia data using TAP",
    "version": "0.1.7"
  },
  "releases": {
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b45855f7a3a347b386c2a811e82d5778",
          "sha256": "7ad9191e2d3f761c6bc429ee1262426c77ef3277c6ed3d341dd58291ffce98d7"
        },
        "downloads": 161,
        "filename": "gaia-on-tap-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "b45855f7a3a347b386c2a811e82d5778",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5027,
        "upload_time": "2016-09-27T13:49:45",
        "url": "https://files.pythonhosted.org/packages/a8/b0/4a68ffadee5134c8605b0c74ce962ec6fa1d11233d26df55b7c6656926d4/gaia-on-tap-0.1.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b45855f7a3a347b386c2a811e82d5778",
        "sha256": "7ad9191e2d3f761c6bc429ee1262426c77ef3277c6ed3d341dd58291ffce98d7"
      },
      "downloads": 161,
      "filename": "gaia-on-tap-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "b45855f7a3a347b386c2a811e82d5778",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5027,
      "upload_time": "2016-09-27T13:49:45",
      "url": "https://files.pythonhosted.org/packages/a8/b0/4a68ffadee5134c8605b0c74ce962ec6fa1d11233d26df55b7c6656926d4/gaia-on-tap-0.1.7.tar.gz"
    }
  ]
}