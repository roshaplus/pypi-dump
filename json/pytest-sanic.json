{
  "info": {
    "author": "Yun Xu",
    "author_email": "yunxu1992@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: System :: Software Distribution"
    ],
    "description": "pytest-sanic\n============\n\n.. image:: https://travis-ci.org/yunstanford/pytest-sanic.svg?branch=master\n    :alt: build status\n    :target: https://travis-ci.org/yunstanford/pytest-sanic\n\n.. image:: https://coveralls.io/repos/github/yunstanford/pytest-sanic/badge.svg?branch=master\n    :alt: coverage status\n    :target: https://coveralls.io/github/yunstanford/pytest-sanic?branch=master\n\n\nA pytest plugin for `Sanic <http://sanic.readthedocs.io/en/latest/>`_. It helps you to test your code asynchronously.\n\nThis plugin provides:\n\n* very easy testing with async coroutines\n* common and useful fixtures\n* test_client for Sanic application\n* test_server for Sanic application\n\n\n-------\nInstall\n-------\n\n.. code::\n\n    pip install pytest-sanic\n\n\n-----------\nQuick Start\n-----------\n\nYou don't have to load ``pytest-sanic`` explicitly. ``pytest`` will do it for you. Just write tests like,\n\n.. code-block:: python\n\n    async def test_sanic_db_find_by_id(app):\n        \"\"\"\n        Let's assume that, in db we have,\n            {\n                \"id\": \"123\",\n                \"name\": \"Kobe Bryant\",\n                \"team\": \"Lakers\",\n            }\n        \"\"\"\n        doc = await app.db[\"players\"].find_by_id(\"123\")\n        assert doc.name == \"Kobe Bryant\"\n        assert doc.team == \"Lakers\"\n\n\n--------\nFixtures\n--------\n\nSome fixtures for easy testing.\n\n``loop``\n~~~~~~~~\n\n``pytest-sanic`` creates an event loop and injects it as a fixture. ``pytest`` will use this event loop to run your ``async tests``.\nBy default, fixture ``loop`` is an instance of `asyncio.new_event_loop`. But `uvloop` is also an option for you, by simpy passing\n``--loop uvloop``. Keep mind to just use one single event loop.\n\n\n``unused_port``\n~~~~~~~~~~~~~~\n\nan unused TCP port on the localhost.\n\n\n``tmpdir``\n~~~~~~~~~~~~~~\n\na temporary directory for easy testing if needed.\n\n\n``test_server``\n~~~~~~~~~~~~~~\n\nCreates a TestServer instance by giving a ``Sanic`` application. It's very easy to utilize ``test_server`` to create your `Sanic`\napplication server for testing.\n\n.. code-block:: python\n\n    @pytest.yield_fixture\n    def app():\n        app = Sanic(\"test_sanic_app\")\n\n        @app.route(\"/test_get\", methods=['GET'])\n        async def test_get(request):\n            return response.json({\"GET\": True})\n\n        yield app\n\n    @pytest.fixture\n    def sanic_server(loop, app, test_server):\n        return loop.run_until_complete(test_server(app))\n\nYou can also very easily override this ``loop`` fixture by creating your own, simply like,\n\n.. code-block:: python\n\n    @pytest.yield_fixture\n    def loop():\n        loop = MyEventLoop()\n        yield loop\n        loop.close()\n\n\n``test_client``\n~~~~~~~~~~~~~~\n\nCreates a TestClient instance by giving a ``Sanic`` application. You can simply have a client by using ``test_client``, like\n\n.. code-block:: python\n\n    @pytest.yield_fixture\n    def app():\n        app = Sanic(\"test_sanic_app\")\n\n        @app.route(\"/test_get\", methods=['GET'])\n        async def test_get(request):\n            return response.json({\"GET\": True})\n\n        @app.route(\"/test_post\", methods=['POST'])\n        async def test_post(request):\n            return response.json({\"POST\": True})\n\n        @app.route(\"/test_put\", methods=['PUT'])\n        async def test_put(request):\n            return response.json({\"PUT\": True})\n\n        @app.route(\"/test_delete\", methods=['DELETE'])\n        async def test_delete(request):\n            return response.json({\"DELETE\": True})\n\n        @app.route(\"/test_patch\", methods=['PATCH'])\n        async def test_patch(request):\n            return response.json({\"PATCH\": True})\n\n        @app.route(\"/test_options\", methods=['OPTIONS'])\n        async def test_options(request):\n            return response.json({\"OPTIONS\": True})\n\n        @app.route(\"/test_head\", methods=['HEAD'])\n        async def test_head(request):\n            return response.json({\"HEAD\": True})\n\n        @app.websocket(\"/test_ws\")\n        async def test_ws(request, ws):\n            data = await ws.recv()\n            await ws.send(data)\n\n        yield app\n\n    @pytest.fixture\n    def test_cli(loop, app, test_client):\n        return loop.run_until_complete(test_client(app, protocol=WebSocketProtocol))\n\n    #########\n    # Tests #\n    #########\n\n    async def test_fixture_test_client_get(test_cli):\n        \"\"\"\n        GET request\n        \"\"\"\n        resp = await test_cli.get('/test_get')\n        assert resp.status == 200\n        resp_json = await resp.json()\n        assert resp_json == {\"GET\": True}\n\n    async def test_fixture_test_client_post(test_cli):\n        \"\"\"\n        POST request\n        \"\"\"\n        resp = await test_cli.post('/test_post')\n        assert resp.status == 200\n        resp_json = await resp.json()\n        assert resp_json == {\"POST\": True}\n\n    async def test_fixture_test_client_put(test_cli):\n        \"\"\"\n        PUT request\n        \"\"\"\n        resp = await test_cli.put('/test_put')\n        assert resp.status == 200\n        resp_json = await resp.json()\n        assert resp_json == {\"PUT\": True}\n\n    async def test_fixture_test_client_delete(test_cli):\n        \"\"\"\n        DELETE request\n        \"\"\"\n        resp = await test_cli.delete('/test_delete')\n        assert resp.status == 200\n        resp_json = await resp.json()\n        assert resp_json == {\"DELETE\": True}\n\n    async def test_fixture_test_client_patch(test_cli):\n        \"\"\"\n        PATCH request\n        \"\"\"\n        resp = await test_cli.patch('/test_patch')\n        assert resp.status == 200\n        resp_json = await resp.json()\n        assert resp_json == {\"PATCH\": True}\n\n    async def test_fixture_test_client_options(test_cli):\n        \"\"\"\n        OPTIONS request\n        \"\"\"\n        resp = await test_cli.options('/test_options')\n        assert resp.status == 200\n        resp_json = await resp.json()\n        assert resp_json == {\"OPTIONS\": True}\n\n    async def test_fixture_test_client_head(test_cli):\n        \"\"\"\n        HEAD request\n        \"\"\"\n        resp = await test_cli.head('/test_head')\n        assert resp.status == 200\n        resp_json = await resp.json()\n        # HEAD should not have body\n        assert resp_json is None\n\n    async def test_fixture_test_client_ws(test_cli):\n        \"\"\"\n        Websockets\n        \"\"\"\n        ws_conn = await test_cli.ws_connect('/test_ws')\n        data = 'hello world!'\n        await ws_conn.send_str(data)\n        msg = await ws_conn.receive()\n        assert msg.data == data\n        await ws_conn.close()\n\nA small note: ``test_cli.ws_connect`` does not work in ``sanic.__version__ <= '0.5.4'``, because of a Sanic bug, but it\nhas been fixed in master branch.\n\n\n-----------\nDevelopment\n-----------\n\n``pytest-sanic`` accepts contributions on GitHub, in the form of issues or pull requests.\n\n\nRun unit tests.\n\n.. code::\n\n    ./uranium test\n\n\n---------\nReference\n---------\n\nSome useful pytest plugins:\n\n* `pytest-tornado <https://github.com/eugeniy/pytest-tornado>`_\n* `pytest-asyncio <https://github.com/pytest-dev/pytest-asyncio>`_\n* `pytest-aiohttp <https://github.com/aio-libs/pytest-aiohttp>`_\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-sanic",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-sanic/",
    "release_url": "https://pypi.org/project/pytest-sanic/0.1.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "",
    "version": "0.1.3"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cf9bbd3290d4771d232cbb7e7f689f2d",
          "sha256": "3fcecb05c58a86767096be9a9d23a94902e30647d7fdb694b62e2016ed30a157"
        },
        "downloads": 0,
        "filename": "pytest_sanic-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf9bbd3290d4771d232cbb7e7f689f2d",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 12283,
        "upload_time": "2017-06-29T05:08:34",
        "url": "https://files.pythonhosted.org/packages/91/16/c3ae421d38d31033504ba68404a286f389f590acab164ab26f5e91c79c51/pytest_sanic-0.1.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f17339f5dfd5a2e2fde0842653a54d92",
          "sha256": "05419c3cbd46ae6ea12ddc120552809ae2ff321ff0a3ffd4a9365a2390f01c3d"
        },
        "downloads": 0,
        "filename": "pytest-sanic-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f17339f5dfd5a2e2fde0842653a54d92",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7514,
        "upload_time": "2017-06-29T05:08:31",
        "url": "https://files.pythonhosted.org/packages/ca/25/53909ad56bf2ee842589fce653e47e4a1879aa2ab3e47d1f5de83c99dd1f/pytest-sanic-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f610f6c9a0c88c6ecc66ea23d00761a3",
          "sha256": "b9d3fcb90685a1cf28ade33b7d146ff4268ac77b8ad4dd707d1689277d4fe7c4"
        },
        "downloads": 0,
        "filename": "pytest_sanic-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f610f6c9a0c88c6ecc66ea23d00761a3",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 12513,
        "upload_time": "2017-07-08T04:21:32",
        "url": "https://files.pythonhosted.org/packages/55/6d/d9e3c3b2cb4694b2963a16a0ee168bb3cc488abac89b62dda0d85f226359/pytest_sanic-0.1.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "cf269811b3e20573659b26ec1bd69c6b",
          "sha256": "833ed5e0e3f494923d55dd5d089a32ca272cdedec03dba7507357b37cecbce4d"
        },
        "downloads": 0,
        "filename": "pytest-sanic-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cf269811b3e20573659b26ec1bd69c6b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7646,
        "upload_time": "2017-07-08T04:21:30",
        "url": "https://files.pythonhosted.org/packages/8f/44/a36f6d666ec43d03ece200a399b0bc1c070c95451ddf44b77111371b49b1/pytest-sanic-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "008c68947cf6e5544780c8838a3f34a6",
          "sha256": "a0e9c33fb7b024ac23b8c9c6b4ea8534803e6fee3b7610cea446b46dcae98a4a"
        },
        "downloads": 0,
        "filename": "pytest_sanic-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "008c68947cf6e5544780c8838a3f34a6",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 12966,
        "upload_time": "2017-07-24T22:54:37",
        "url": "https://files.pythonhosted.org/packages/b9/07/2d9f96d420c973c26bbde2a82558f7f5a0db2de9c2a401985a1b174b469a/pytest_sanic-0.1.3-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0cc50dade86068046f272235e01dd1ad",
          "sha256": "332f6d487f85f20e01e636191a9d5e761cae9a872dede5bf8f3f1e1d0b4c989d"
        },
        "downloads": 0,
        "filename": "pytest-sanic-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0cc50dade86068046f272235e01dd1ad",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7970,
        "upload_time": "2017-07-24T22:54:35",
        "url": "https://files.pythonhosted.org/packages/71/5c/0f01acc48f952eb894ec2c0271789b9ff07df263fbf9592b27960e4084b5/pytest-sanic-0.1.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "008c68947cf6e5544780c8838a3f34a6",
        "sha256": "a0e9c33fb7b024ac23b8c9c6b4ea8534803e6fee3b7610cea446b46dcae98a4a"
      },
      "downloads": 0,
      "filename": "pytest_sanic-0.1.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "008c68947cf6e5544780c8838a3f34a6",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 12966,
      "upload_time": "2017-07-24T22:54:37",
      "url": "https://files.pythonhosted.org/packages/b9/07/2d9f96d420c973c26bbde2a82558f7f5a0db2de9c2a401985a1b174b469a/pytest_sanic-0.1.3-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "0cc50dade86068046f272235e01dd1ad",
        "sha256": "332f6d487f85f20e01e636191a9d5e761cae9a872dede5bf8f3f1e1d0b4c989d"
      },
      "downloads": 0,
      "filename": "pytest-sanic-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0cc50dade86068046f272235e01dd1ad",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7970,
      "upload_time": "2017-07-24T22:54:35",
      "url": "https://files.pythonhosted.org/packages/71/5c/0f01acc48f952eb894ec2c0271789b9ff07df263fbf9592b27960e4084b5/pytest-sanic-0.1.3.tar.gz"
    }
  ]
}