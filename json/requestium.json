{
  "info": {
    "author": "Joaquin Alori",
    "author_email": "joaquin.alori@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2"
    ],
    "description": "# Requestium\n\nRequestium is a library that merges the power of Requests, Selenium and Parsel into a single integrated tool for automatizing web actions.\n\nThe objective of the project is to help in the development of bots that automatize actions in websites, and which need to dynamically switch between plain http Requests and a js-enabled browser during a single session. We do this by adding a [Selenium](https://github.com/SeleniumHQ/selenium) webdriver to a [Requests](https://github.com/requests/requests)' Session object.\n\nThis new Session object is a drop in replacement of the standard Requests Session object, and every new feature is lazily evaluated, so there is no overhead in using this library over just plain Requests.\n\nThe library also adds several convenience features. The biggest one is integrating [Parsel](https://github.com/scrapy/parsel)'s parser into the library. You can seamlessly run xpaths, css or regex anywhere in the library without having to manually parse anything, resulting in much cleaner code. Additionally, it improves the managing of cookies and proxies in Selenium, and has several workarounds for parts of Selenium which are buggy or not super stable.\n\n## Installation\n```bash\npip install requestium\n```\nYou should then download your preferred Selenium webdriver if you plan to use the Selenium part of Requestium: [Chromedriver](https://sites.google.com/a/chromium.org/chromedriver/) or [Phantomjs](http://phantomjs.org)\n\nNote: Requestium currently only supports python2\n\n## Usage\nFirst start a session as you would do on Requests, and optionally add settings for the web-driver if you plan to use one. Requestium currently supports Phantomjs, Chrome and Chrome headless as the webdriver.\n```python\nfrom requestium import Session, Keys\n\ns = Session(webdriver_path='./chromedriver', default_timeout=15, browser='chrome')\n```\n\nYou don't need to parse the response, it is done automatically when calling xpath, css or re.\n```python\ntitle = s.get('http://samplesite.com').xpath('//title/text()').extract_first(default='Default Title')\n```\n\nRegex require much less boilerplate.\n```python\nresponse = s.get('http://samplesite.com/sample_path')\nlist_of_two_digit_numbers = response.re(r'\\d\\d')  # Extracts all matches as a list\nprint \"Site ID: {}\".format(response.re_first(r'ID_\\d\\w\\d'), default='1A1')  # Extracts the first match\n```\n\nYou can use all the regular Requests' Session methods.\n```python\ns.post('http://www.samplesite.com/sample', data={'field1': 'data1'})\n```\n\nAnd you can switch to using the Selenium webdriver to run any js code.\n```python\ns.transfer_session_cookies_to_driver()  # You can mantain the session if needed\ns.driver.get('http://www.samplesite.com/sample/process')\n```\n\nThe driver object is a Selenium webdriver object, so you can use any of the normal selenium\nmethods plus new methods added by Requestium.\n```python\ns.driver.find_element_by_xpath(\"//input[@class='user_name']\").send_keys('James Bond', Keys.ENTER)\n\n# New method which waits for element to load instead of failing, useful for single page web apps\ns.driver.ensure_element_by_xpath(\"//div[@attribute='button']\").click()\n```\n\nRequestium also adds xpath, css, and re methods to the Selenium driver object.\n```python\nif s.driver.re(r'ID_\\d\\w\\d some_pattern'):\n    print 'Found it!'\n```\n\nAnd finally you can switch back to using Requests.\n```python\ns.transfer_driver_cookies_to_session()\ns.post('http://www.samplesite.com/sample2', data={'key1': 'value1'})\n```\n\n## Considerations\nNew features are lazily evaluated, meaning:\n- The Selenium webdriver process is only started if you call the driver object. So if you don't need to use the webdriver, you could use the library with no overhead. Very useful if you just want to use the library for its integration with Parsel.\n- Parsing of the responses is only done if you call the `xpath`, `css`, or `re` methods of the response. So again there is no overhead if you don't need to use this feature.\n\nA byproduct of this is that the Selenium webdriver could be used just as a tool to ease in the development of regular Requests code: You can start writing your script using just the Requests' session, and at the last step of the script (the one you are currently working on) transfer the session to the Chrome webdriver. This way, a Chrome process starts in your machine, and acts as a real time \"visor\" for the last step of your code. You can see in what state your session is currently in, inspect it with Chrome's excellent inspect tools, and decide what's the next step your session object should take. Very useful to try code in an ipython interpreter and see how the site reacts in real time.\n\nNote: The Selenium Chrome webdriver doesn't support automatic transfer of proxies from the Session to the Webdriver at the moment. The Phantomjs driver does though.\n\n## Selenium workarounds\nRequestium adds several 'ensure' methods to the driver object, as Selenium is known to be very finicky about selecting elements and cookie handling.\n\n### Wait for element\nThe `ensure_element_by_` methods waits for the element to be loaded in the browser and returns it as soon as it loads. It's named after Selenium's `find_element_by_` methods (which immediately raise an exception if they can't find the element).\n\nBy default Requestium waits for the element to be present, but it can also wait for it to be clickable or visible. Very useful for single page web apps. We usually end up completely replacing our `find_element_by_` calls with `ensure_element_by_` calls as they are more flexible.\n\nElements you get using this method have the new `ensure_click` method which makes the click less prone to failure. This helps in getting through a lot of the problems with Selenium clicking.\n\n\n```python\ns.driver.ensure_element_by_xpath(\"//li[@class='b1']\", criterium='clickable', timeout=5).ensure_click()\n\n# === We also added these methods named in accordance to Selenium's api design ===\n# ensure_element_by_css\n# ensure_element_by_id\n# ensure_element_by_class\n# ensure_element_by_link_text\n# ensure_element_by_partial_link_text\n# ensure_element_by_name\n# ensure_element_by_tag_name\n```\n\n### Wait for element to disappear\nThe `wait_element_disappears_by_` methods waits for the element to be loaded in the browser and then waits until it disappears. It does this by, using two timeouts: one for waiting for the element to appear, and other one for waiting until it disappears (often the former will be shorter than the latter). Very useful when you have to wait for a 'loading...' gif to disappear.\n\nA `TimeoutException` will rise if the element is located and it does not disappear after waiting for `disappear_timeout`\n\n```python\ns.driver.wait_element_disappears_by_xpath(\"//img[@class='loading']\",\n                                          criterium='visibility',\n                                          appear_timeout=2,\n                                          disappear_timeout=10)\n\n# === We also added these methods named in accordance to Selenium's api design ===\n# wait_element_disappears_by_css\n# wait_element_disappears_by_id\n# wait_element_disappears_by_class\n# wait_element_disappears_by_link_text\n# wait_element_disappears_by_partial_link_text\n# wait_element_disappears_by_name\n# wait_element_disappears_by_tag_name\n```\n\n### Add cookie\nThe `ensure_add_cookie` method makes adding cookies much more robust. Selenium needs the browser to be at the cookie's domain before being able to add the cookie, this method offers several workarounds for this. If the browser is not in the cookies domain, it GETs the domain before adding the cookie. It also allows you to override the domain before adding it, and avoid making this GET. The domain can be overridden to `''`, this sets the cookie's domain to whatever domain the driver is currently in.\n\nIf it can't add the cookie it tries to add it with a less restrictive domain (Eg.: home.site.com -> site.com) before failing.\n\n```python\ncookie = {\"domain\": \"www.site.com\",\n          \"secure\": false,\n          \"value\": \"sd2451dgd13\",\n          \"expiry\": 1516824855.759154,\n          \"path\": \"/\",\n          \"httpOnly\": true,\n          \"name\": \"sessionid\"}\ns.driver.ensure_add_cookie(cookie, override_domain='')\n```\n\n## Comparison with Requests + Selenium + lxml\nA silly working example of a script that runs on Reddit. We'll then show how it compares to using Requests + Selenium + lxml instead of Requestium.\n\n### Using Requestium\n```python\nfrom requestium import Session, Keys\n\n# If you want requestium to type your username in the browser for you, write it in here:\nreddit_user_name = ''\n\ns = Session('./chromedriver', browser='chrome', default_timeout=15)\ns.driver.get('http://reddit.com')\ns.driver.find_element_by_xpath(\"//a[@href='https://www.reddit.com/login']\").click()\n\nprint 'Waiting for elements to load...'\ns.driver.ensure_element_by_class(\"desktop-onboarding-sign-up__form-toggler\").click()\n\nif reddit_user_name:\n    s.driver.ensure_element_by_id('user_login').send_keys(reddit_user_name)\n    s.driver.ensure_element_by_id('passwd_login').send_keys(Keys.BACKSPACE)\nprint 'Please log-in in the chrome browser'\n\ns.driver.wait_element_disappears_by_class(\n    \"desktop-onboarding__title\", appear_timeout=3, disappear_timeout=60)\nprint 'Thanks!'\n\nif not reddit_user_name:\n    reddit_user_name = s.driver.xpath(\"//span[@class='user']//text()\").extract_first()\n\nif reddit_user_name:\n    s.transfer_driver_cookies_to_session()\n    response = s.get(\"https://www.reddit.com/user/{}/\".format(reddit_user_name))\n    cmnt_karma = response.xpath(\"//span[@class='karma comment-karma']//text()\").extract_first()\n    reddit_golds_given = response.re_first(r\"(\\d+) gildings given out\")\n    print \"Comment karma: {}\".format(cmnt_karma)\n    print \"Reddit golds given: {}\".format(reddit_golds_given)\nelse:\n    print \"Couldn't get user name\"\n```\n\n### Using Requests + Selenium + lxml\n```python\nimport re\nfrom lxml import etree\nfrom requests import Session\nfrom selenium import webdriver\nfrom selenium.common.exceptions import TimeoutException\nfrom selenium.webdriver.common.keys import Keys\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\n\n# If you want requestium to type your username in the browser for you, write it in here:\nreddit_user_name = ''\n\ndriver = webdriver.Chrome('./chromedriver')\ndriver.get('http://reddit.com')\ndriver.find_element_by_xpath(\"//a[@href='https://www.reddit.com/login']\").click()\n\nprint 'Waiting for elements to load...'\nWebDriverWait(driver, 15).until(\n    EC.presence_of_element_located((By.CLASS_NAME, \"desktop-onboarding-sign-up__form-toggler\"))\n).click()\n\nif reddit_user_name:\n    WebDriverWait(driver, 15).until(\n        EC.presence_of_element_located((By.ID, 'user_login'))\n    ).send_keys(reddit_user_name)\n    driver.find_element_by_id('passwd_login').send_keys(Keys.BACKSPACE)\nprint 'Please log-in in the chrome browser'\n\ntry:\n    WebDriverWait(driver, 3).until(\n        EC.presence_of_element_located((By.CLASS_NAME, \"desktop-onboarding__title\"))\n    )\nexcept TimeoutException:\n    pass\nWebDriverWait(driver, 60).until(\n    EC.invisibility_of_element_located((By.CLASS_NAME, \"desktop-onboarding__title\"))\n)\nprint 'Thanks!'\n\nif not reddit_user_name:\n    tree = etree.HTML(driver.page_source)\n    try:\n        reddit_user_name = tree.xpath(\"//span[@class='user']//text()\")[0]\n    except IndexError:\n        reddit_user_name = None\n\nif reddit_user_name:\n    s = Session()\n    # Reddit will think we are a bot if we have the wrong user agent\n    selenium_user_agent = driver.execute_script(\"return navigator.userAgent;\")\n    s.headers.update({\"user-agent\": selenium_user_agent})\n    for cookie in driver.get_cookies():\n        s.cookies.set(cookie['name'], cookie['value'], domain=cookie['domain'])\n    response = s.get(\"https://www.reddit.com/user/{}/\".format(reddit_user_name))\n    try:\n        cmnt_karma = etree.HTML(response.content).xpath(\n            \"//span[@class='karma comment-karma']//text()\")[0]\n    except IndexError:\n        cmnt_karma = None\n    match = re.search(r\"(\\d+) gildings given out\", response.content)\n    try:\n        reddit_golds_given = match.group(1)\n    except AttributeError:\n        reddit_golds_given = None\n    print \"Comment karma: {}\".format(cmnt_karma)\n    print \"Reddit golds given: {}\".format(reddit_golds_given)\nelse:\n    print \"Couldn't get user name\"\n```\n\n## Selenium-Requests\nThis project intends to be a drop in replacement of requests' Session object, with added functionality. If your use case is a drop in replacement for a Selenium webdriver, but that also has some of requests' functionality, [Selenium-Requests](https://github.com/cryzed/Selenium-Requests) does just that.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/tryolabs/requestium",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "requestium",
    "platform": "",
    "project_url": "https://pypi.org/project/requestium/",
    "release_url": "https://pypi.org/project/requestium/0.1.6/",
    "requires_dist": [
      "tldextract (>=2.1.0)",
      "parsel (>=1.2.0)",
      "selenium (>=3.4.3)",
      "requests (>=2.18.1)"
    ],
    "requires_python": "",
    "summary": "Adds a Selenium webdriver and parsel's parser to a request's Session object, and makes switching between them seamless. Handles cookie, proxy and header transfer.",
    "version": "0.1.6"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "71d15b1e232f19d45f0313b6590b1bb2",
          "sha256": "ac63a63fcda963aa1949a4df28aef9e4288cab00041f48240994f994455524a5"
        },
        "downloads": -1,
        "filename": "requestium-0.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "71d15b1e232f19d45f0313b6590b1bb2",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 10227,
        "upload_time": "2017-07-28T20:35:42",
        "url": "https://files.pythonhosted.org/packages/48/d2/07132f59108038777b72a2e1dcbf82d5cd98a9c7376845fa1f22916cc72f/requestium-0.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0dccb484bc127f269e217eda41217bfa",
          "sha256": "2650ccec5ecb148aac44976c34c36d18e15dc9a7c2705e824f29303b50cc9219"
        },
        "downloads": -1,
        "filename": "requestium-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0dccb484bc127f269e217eda41217bfa",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7535,
        "upload_time": "2017-07-28T20:35:45",
        "url": "https://files.pythonhosted.org/packages/41/e0/358ff5edd0881a9310a8b4c5a9b70dbb0e63aca0fd75632b534f4a3071be/requestium-0.1.tar.gz"
      }
    ],
    "0.1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a0a41c8df73ce11f0ec856f73bfb2389",
          "sha256": "a3acfb17320449e3a31e6a5760984dd19d75803b83056865f0ba80c10f56b140"
        },
        "downloads": -1,
        "filename": "requestium-0.1.1.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0a41c8df73ce11f0ec856f73bfb2389",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 12132,
        "upload_time": "2017-08-17T20:54:56",
        "url": "https://files.pythonhosted.org/packages/57/f3/c3fed020a846837639837c59fa4eab3cc2879adc26eef34cc481d7b8ef6f/requestium-0.1.1.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4cafdf8033de19789aacaccf55164b92",
          "sha256": "84f798bb13f3029663806e86f4777916b9fbff102ffff38ae3855c6e5f570b88"
        },
        "downloads": -1,
        "filename": "requestium-0.1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4cafdf8033de19789aacaccf55164b92",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8406,
        "upload_time": "2017-08-17T20:54:57",
        "url": "https://files.pythonhosted.org/packages/23/50/86894b4a2db4b2003675dcfdcd2af7c60b6a183f496d098e652a995bd250/requestium-0.1.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9ca0c8a1ac402de2ece13d38a64d8b80",
          "sha256": "a2084f9ddfdd37c72ef1d076187ffa56fb10d9a77e7687351e37714637f9e8ad"
        },
        "downloads": -1,
        "filename": "requestium-0.1.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ca0c8a1ac402de2ece13d38a64d8b80",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 12257,
        "upload_time": "2017-08-18T18:37:18",
        "url": "https://files.pythonhosted.org/packages/b1/fb/4dd026be4b9862df087e9373c59c22b6b8cf2e1cfc69ca586ac5da306f10/requestium-0.1.2-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2b38fde0b9a0a68347c873f2306840ad",
          "sha256": "3982efbb5171575e0353c2967dc32ea5a7501de178be0c88e9a8163df3ec1106"
        },
        "downloads": -1,
        "filename": "requestium-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2b38fde0b9a0a68347c873f2306840ad",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8459,
        "upload_time": "2017-08-18T18:37:19",
        "url": "https://files.pythonhosted.org/packages/81/74/85583230ebe0a754db902e17cc3da316e48aab927fad6e869d20b2bb35f1/requestium-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ff59e9891ab2816704ff100fed51bd5a",
          "sha256": "25903494a0a39fd5f3bb18eca7e69b7d9c6641616020034a2ec1e6e14b730ca3"
        },
        "downloads": -1,
        "filename": "requestium-0.1.3-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff59e9891ab2816704ff100fed51bd5a",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 14187,
        "upload_time": "2017-09-15T19:27:17",
        "url": "https://files.pythonhosted.org/packages/2b/dd/1870a8445bd15003afa8f1a713427e6519aa16b50a2d473acbb204f6f321/requestium-0.1.3-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d07ea67ec0c0adaf7023ec2670e451c6",
          "sha256": "a23ba8a3d45c1ba727c99118b506938303138e33e6929bd80e68ed40cf8bca36"
        },
        "downloads": -1,
        "filename": "requestium-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d07ea67ec0c0adaf7023ec2670e451c6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12096,
        "upload_time": "2017-09-15T19:27:19",
        "url": "https://files.pythonhosted.org/packages/ef/1f/77a20f22ac980a992c1c9cbd674f84ab6ec5293eeb4d5a9e160ed094fb84/requestium-0.1.3.tar.gz"
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e2b9c36254134256be8a5e7757f949c1",
          "sha256": "ed45fd0d958aa9b100e18edbdc4845bbe60135ec77b8ab2a6e2fc51b7c020e5c"
        },
        "downloads": -1,
        "filename": "requestium-0.1.4-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "e2b9c36254134256be8a5e7757f949c1",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 13635,
        "upload_time": "2017-10-19T19:11:31",
        "url": "https://files.pythonhosted.org/packages/53/c0/b335851ee951645688daae2b1b553837cc209895e00d388d6a0081915724/requestium-0.1.4-py2-none-any.whl"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ba6ebbb83624e8b9ab9de8ef1e895a8e",
          "sha256": "5a08cf6f02a7810bc3e65859dbd28ea5c1f32185c577532b8321681c3fb1dcf2"
        },
        "downloads": -1,
        "filename": "requestium-0.1.5-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "ba6ebbb83624e8b9ab9de8ef1e895a8e",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 13757,
        "upload_time": "2017-10-30T18:25:52",
        "url": "https://files.pythonhosted.org/packages/87/f6/e1d5840478bd297406fa9c7593b8e5d2cbf07be22f187f1c9d7ffb40d7f6/requestium-0.1.5-py2-none-any.whl"
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0fe2e62f11aa0c88de16873dad6d2a59",
          "sha256": "9e83c94df6f43aeeb13cafea798f9b8d99a2c4919fedf891a44b08f0c0a6807a"
        },
        "downloads": -1,
        "filename": "requestium-0.1.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0fe2e62f11aa0c88de16873dad6d2a59",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 17289,
        "upload_time": "2017-11-13T17:42:24",
        "url": "https://files.pythonhosted.org/packages/d7/8e/9c89223e900264c197f1a34dc1733affe15bb553952c05e07645431971f8/requestium-0.1.6-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1913ae758aaaaf3219043ed345d55d33",
          "sha256": "65c07fc19ea58fcb082815590fb49b58120268958e48fae975a15d18bff3fc3f"
        },
        "downloads": -1,
        "filename": "requestium-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "1913ae758aaaaf3219043ed345d55d33",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15541,
        "upload_time": "2017-11-13T17:42:26",
        "url": "https://files.pythonhosted.org/packages/1b/ce/7837b36869e22dda7ae29da50090129ff8e4d3712b828782213999f4fb94/requestium-0.1.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0fe2e62f11aa0c88de16873dad6d2a59",
        "sha256": "9e83c94df6f43aeeb13cafea798f9b8d99a2c4919fedf891a44b08f0c0a6807a"
      },
      "downloads": -1,
      "filename": "requestium-0.1.6-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0fe2e62f11aa0c88de16873dad6d2a59",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 17289,
      "upload_time": "2017-11-13T17:42:24",
      "url": "https://files.pythonhosted.org/packages/d7/8e/9c89223e900264c197f1a34dc1733affe15bb553952c05e07645431971f8/requestium-0.1.6-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "1913ae758aaaaf3219043ed345d55d33",
        "sha256": "65c07fc19ea58fcb082815590fb49b58120268958e48fae975a15d18bff3fc3f"
      },
      "downloads": -1,
      "filename": "requestium-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "1913ae758aaaaf3219043ed345d55d33",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 15541,
      "upload_time": "2017-11-13T17:42:26",
      "url": "https://files.pythonhosted.org/packages/1b/ce/7837b36869e22dda7ae29da50090129ff8e4d3712b828782213999f4fb94/requestium-0.1.6.tar.gz"
    }
  ]
}