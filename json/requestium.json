{
  "info": {
    "author": "Joaquin Alori",
    "author_email": "joaquin.alori@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2"
    ],
    "description": "Requestium\n==========\n\nThe objective of this project is to help in the development of bots that\nautomatize actions in websites, and who need to dynamically switch\nbetween plain http requests and a js-enabled browser in a single\nsession. We do this by adding a `Selenium\nwebdriver <https://github.com/SeleniumHQ/selenium>`__ webdriver to a\n`request <https://github.com/requests/requests>`__'s Session object.\nThis new Session object is a drop in replacement of the standard\nrequests Session object.\n\nWe also integrate `parsel <https://github.com/scrapy/parsel>`__'s parser\ninto the library as its very useful and concise.\n\nUsage\n-----\n\n.. code:: python\n\n    # from requests import Session  # The new Session object is backwards compatible with the old one.\n    from requestium import Session, Keys\n\n    # Currently supports phantomjs and chrome as the webdriver\n    s = Session(webdriver_path='./chromedriver', default_timeout=15, browser='chrome')\n\n    # We don't need to parse the response, it is done automatically when calling xpath, css or re\n    title = s.get('http://samplesite.com').xpath('//title/text()').extract_first(default='Sample Title')\n\n    # Regex require much less boilerplate\n    response = s.get('http://samplesite.com/sample_path')\n    list_of_two_digit_numbers = response.re(r'\\d\\d')  # Extracts all matches as a list\n    print \"Site ID: {}\".format(response.re_first(r'ID_\\d\\w\\d'), default='1A1')  # Extracts the first match\n\n    # We can use all the regular requests' Session methods\n    s.post('http://www.samplesite.com/sample', data={'field1': 'data1'})\n\n    # And we can switch to using the Selenium webdriver to run any js code\n    s.transfer_session_cookies_to_driver()  # We can mantain the session if needed\n    s.driver.get('http://www.samplesite.com/sample/process')\n    s.driver.find_element_by_xpath(\"//input[@class='user_name']\").send_keys('James Bond', Keys.ENTER)\n    s.driver.find_element_by_xpath(\"//div[@uniqueattribute='important_button']\").click()\n\n    # We also add parsel's xpath, css, and re to the driver object\n    if s.driver.re(r'ID_\\d\\w\\d some_pattern'):\n        print 'Found it!'\n\n    # And finally we can switch back to using requests\n    s.transfer_driver_cookies_to_session()\n    s.post('http://www.samplesite.com/sample2', data={'key1': 'value1'})\n\nConsiderations\n--------------\n\nMost things are lazily evaluated, meaning: - The webdriver process is\nonly started if we call the driver object. So if we don't need to use\nthe webdriver, we could use the library with no overhead. - Parsing of\nthe responses is only done if we call the ``xpath``, ``css``, or ``re``\nmethods of the response. So again there is no overhead if we dont need\nto use this feature.\n\nThe selenium webdriver could be used just to ease in development: You\ncan start writing your script using just the regular requests' session,\nand on the last step of the script (the one you are currently working\non) transfer the session to a chrome webdriver. This way, the chrome\nwebdriver acts as a 'visor' for the last step of your code. You can see\nin what state your session is currently in, inspect it with Chrome's\nexcellent inspect tools, and decide what's the next step your session\nobject should make.\n\nThe chrome driver doesn't support automatic transfer of headers and\nproxies from the Session to the Webdriver at the moment. The phantomjs\ndriver does though.\n\nSelenium workarounds\n--------------------\n\nWe add several 'ensure' methods to the driver object, as Selenium is\nknown to be very finicky about cookie handling and selecting elements.\n\nWait for element\n~~~~~~~~~~~~~~~~\n\nThe ``ensure_element_by_`` methods waits for the element to be loaded in\nthe browser and returns it as soon as it is. Named after Selenium's\n``find_element_by_`` methods. By default we can wait for the element to\nbe present, but we can also wait for it to be clickable or visible. Very\nuseful for single page web apps.\n\nElements we get using this method have the ``ensure_click`` method which\nmakes the click less prone to failure. This helps us get through a lot\nof the problems with Selenium clicking.\n\n``timeout`` defaults to the ``default_timeout`` set when creating the\nSession object.\n\n.. code:: python\n\n    s.driver.ensure_element_by_xpath(\"//li[@class='b1']\", criterium='clickable', timeout=5).ensure_click()\n\n    # === Also supported ===\n    # ensure_element_by_css\n    # ensure_element_by_id\n    # ensure_element_by_class\n    # ensure_element_by_link_text\n    # ensure_element_by_partial_link_text\n    # ensure_element_by_name\n    # ensure_element_by_tag_name\n\n    # === You can also call ensure_element directly ===\n    s.driver.ensure_element(\"xpath\", \"//li[@class='b1']\", criterium='clickable', timeout=5)\n\nWait for element to disappear\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``wait_element_disappears_by_`` methods waits for the element to be\nloaded in the browser and then waits until it disappears. It looks for\nan element in first place, using two timeouts: one for locating the\nelement, and other one to wait until it disappears (often the former\nwill be shorter than the latter). Very useful each time you have to wait\nfor a loading gif to go away.\n\nMany times the element will disappear before being able to look for it,\nso that case is handled here. The criterium to check if item disappeared\nwill be ``visibility``. A ``TimeoutException`` will rise if the element\nis located and it does not disappear after waiting for\n``disappear_timeout``\n\n``appear_timeout`` and ``disappear_timeout`` default to the\n``default_timeout`` set when creating the Session object.\n\n.. code:: python\n\n    s.driver.wait_element_disappears_by_xpath(\"//img[@class='loading']\", criterium='visibility', appear_timeout=2, disappear_timeout=10)\n\n    # === Also supported ===\n    # wait_element_disappears_by_css\n    # wait_element_disappears_by_id\n    # wait_element_disappears_by_class\n    # wait_element_disappears_by_link_text\n    # wait_element_disappears_by_partial_link_text\n    # wait_element_disappears_by_name\n    # wait_element_disappears_by_tag_name\n\n    # === You can also call wait_element_disappears directly ===\n    s.driver.wait_element_disappears(\"xpath\", \"//img[@class='loading']\", criterium='visibility', appear_timeout=2, disappear_timeout=10)\n\nAdd cookie\n~~~~~~~~~~\n\nThe ``ensure_add_cookie`` method makes adding cookies much more robust.\nSelenium needs the browser to be at the cookie's domain before being\nable to add the cookie, this method offers several workarounds for this.\nIf the browser is not in the cookies domain, it GETs the domain before\nadding the cookie. It also allows you to override the domain before\nadding it, and avoid making this GET. The domain can be overridden to\n``''`` to give the cookie whatever domain the driver is currently in.\n\nIf it can't add the cookie it tries to add it with a less restrictive\ndomain (Eg.: home.site.com -> site.com) before failing.\n\n.. code:: python\n\n    cookie = {\"domain\": \"www.site.com\",\n              \"secure\": false,\n              \"value\": \"sd2451dgd13\",\n              \"expiry\": 1516824855.759154,\n              \"path\": \"/\",\n              \"httpOnly\": true,\n              \"name\": \"sessionid\"}\n    s.driver.ensure_add_cookie(cookie, override_domain='')\n\nSelenium-Requests\n-----------------\n\nThis project intends to be a drop in replacement of requests' Session\nobject, with added functionality. If your use case is a drop in\nreplacement for a Selenium webdriver, but that also has some of\nrequests' functionality,\n`Selenium-Requests <https://github.com/cryzed/Selenium-Requests>`__ does\njust that.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/tryolabs/requestium",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "requestium",
    "platform": "",
    "project_url": "https://pypi.org/project/requestium/",
    "release_url": "https://pypi.org/project/requestium/0.1.3/",
    "requires_dist": [
      "tldextract (>=2.1.0)",
      "selenium (>=3.4.3)",
      "requests (>=2.18.1)",
      "parsel (>=1.2.0)"
    ],
    "requires_python": ">=2.7, <3",
    "summary": "Adds a Selenium webdriver and parsel's parser to a request's Session object, and makes switching between them seamless. Handles cookie, proxy and header transfer.",
    "version": "0.1.3"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "71d15b1e232f19d45f0313b6590b1bb2",
          "sha256": "ac63a63fcda963aa1949a4df28aef9e4288cab00041f48240994f994455524a5"
        },
        "downloads": 0,
        "filename": "requestium-0.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "71d15b1e232f19d45f0313b6590b1bb2",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 10227,
        "upload_time": "2017-07-28T20:35:42",
        "url": "https://files.pythonhosted.org/packages/48/d2/07132f59108038777b72a2e1dcbf82d5cd98a9c7376845fa1f22916cc72f/requestium-0.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0dccb484bc127f269e217eda41217bfa",
          "sha256": "2650ccec5ecb148aac44976c34c36d18e15dc9a7c2705e824f29303b50cc9219"
        },
        "downloads": 0,
        "filename": "requestium-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0dccb484bc127f269e217eda41217bfa",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7535,
        "upload_time": "2017-07-28T20:35:45",
        "url": "https://files.pythonhosted.org/packages/41/e0/358ff5edd0881a9310a8b4c5a9b70dbb0e63aca0fd75632b534f4a3071be/requestium-0.1.tar.gz"
      }
    ],
    "0.1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a0a41c8df73ce11f0ec856f73bfb2389",
          "sha256": "a3acfb17320449e3a31e6a5760984dd19d75803b83056865f0ba80c10f56b140"
        },
        "downloads": 0,
        "filename": "requestium-0.1.1.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0a41c8df73ce11f0ec856f73bfb2389",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 12132,
        "upload_time": "2017-08-17T20:54:56",
        "url": "https://files.pythonhosted.org/packages/57/f3/c3fed020a846837639837c59fa4eab3cc2879adc26eef34cc481d7b8ef6f/requestium-0.1.1.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4cafdf8033de19789aacaccf55164b92",
          "sha256": "84f798bb13f3029663806e86f4777916b9fbff102ffff38ae3855c6e5f570b88"
        },
        "downloads": 0,
        "filename": "requestium-0.1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4cafdf8033de19789aacaccf55164b92",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8406,
        "upload_time": "2017-08-17T20:54:57",
        "url": "https://files.pythonhosted.org/packages/23/50/86894b4a2db4b2003675dcfdcd2af7c60b6a183f496d098e652a995bd250/requestium-0.1.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9ca0c8a1ac402de2ece13d38a64d8b80",
          "sha256": "a2084f9ddfdd37c72ef1d076187ffa56fb10d9a77e7687351e37714637f9e8ad"
        },
        "downloads": 0,
        "filename": "requestium-0.1.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ca0c8a1ac402de2ece13d38a64d8b80",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 12257,
        "upload_time": "2017-08-18T18:37:18",
        "url": "https://files.pythonhosted.org/packages/b1/fb/4dd026be4b9862df087e9373c59c22b6b8cf2e1cfc69ca586ac5da306f10/requestium-0.1.2-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2b38fde0b9a0a68347c873f2306840ad",
          "sha256": "3982efbb5171575e0353c2967dc32ea5a7501de178be0c88e9a8163df3ec1106"
        },
        "downloads": 0,
        "filename": "requestium-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2b38fde0b9a0a68347c873f2306840ad",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8459,
        "upload_time": "2017-08-18T18:37:19",
        "url": "https://files.pythonhosted.org/packages/81/74/85583230ebe0a754db902e17cc3da316e48aab927fad6e869d20b2bb35f1/requestium-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ff59e9891ab2816704ff100fed51bd5a",
          "sha256": "25903494a0a39fd5f3bb18eca7e69b7d9c6641616020034a2ec1e6e14b730ca3"
        },
        "downloads": 0,
        "filename": "requestium-0.1.3-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff59e9891ab2816704ff100fed51bd5a",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 14187,
        "upload_time": "2017-09-15T19:27:17",
        "url": "https://files.pythonhosted.org/packages/2b/dd/1870a8445bd15003afa8f1a713427e6519aa16b50a2d473acbb204f6f321/requestium-0.1.3-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d07ea67ec0c0adaf7023ec2670e451c6",
          "sha256": "a23ba8a3d45c1ba727c99118b506938303138e33e6929bd80e68ed40cf8bca36"
        },
        "downloads": 0,
        "filename": "requestium-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d07ea67ec0c0adaf7023ec2670e451c6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12096,
        "upload_time": "2017-09-15T19:27:19",
        "url": "https://files.pythonhosted.org/packages/ef/1f/77a20f22ac980a992c1c9cbd674f84ab6ec5293eeb4d5a9e160ed094fb84/requestium-0.1.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ff59e9891ab2816704ff100fed51bd5a",
        "sha256": "25903494a0a39fd5f3bb18eca7e69b7d9c6641616020034a2ec1e6e14b730ca3"
      },
      "downloads": 0,
      "filename": "requestium-0.1.3-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "ff59e9891ab2816704ff100fed51bd5a",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 14187,
      "upload_time": "2017-09-15T19:27:17",
      "url": "https://files.pythonhosted.org/packages/2b/dd/1870a8445bd15003afa8f1a713427e6519aa16b50a2d473acbb204f6f321/requestium-0.1.3-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "d07ea67ec0c0adaf7023ec2670e451c6",
        "sha256": "a23ba8a3d45c1ba727c99118b506938303138e33e6929bd80e68ed40cf8bca36"
      },
      "downloads": 0,
      "filename": "requestium-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d07ea67ec0c0adaf7023ec2670e451c6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 12096,
      "upload_time": "2017-09-15T19:27:19",
      "url": "https://files.pythonhosted.org/packages/ef/1f/77a20f22ac980a992c1c9cbd674f84ab6ec5293eeb4d5a9e160ed094fb84/requestium-0.1.3.tar.gz"
    }
  ]
}