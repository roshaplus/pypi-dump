{
  "info": {
    "author": "Thierry S. Nouidui",
    "author_email": "TSNouidui@lbl.gov",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering",
      "Topic :: Utilities"
    ],
    "description": "SimulatorToFMU\n--------------\n\nOverview\n^^^^^^^^\n\nSimulatorToFMU is a software package written in Python which allows \nusers to export a memoryless Python-driven simulation program or script \nas a Functional Mock-up Unit (FMU) for  \nmodel exchange or co-simulation using the Functional Mock-up Interface (FMI) \nstandard version 1.0 or 2.0 (https://www.fmi-standard.org).\nThis FMU can then be imported into a variety of simulation programs \nthat support the import of Functional Mock-up Units.\n\nA memoryless Python-driven simulation program/script \nis a simulation program which meets following requirements:\n   \n  - The simulation program/script can be invoked through a Python script.\n  - The invocation of the simulation program/script is memoryless. That is, \n    the output of the simulation program at any invocation time ``t`` \n    depends only on the inputs at the time ``t``. \n  - The inputs and the outputs of the simulation program/script must be ``real`` numbers.\n\n.. note::\n\n   The Python-driven script could invoke \n   scripts written in languages such as \n   MATLAB using the ``subprocess`` or ``os.system()``\n   module of Python or specifically for MATLAB \n   using the MATLAB engine API for Python. \n\nThe license is at `simulatortofmu/LICENSE.txt <https://github.com/tsnouidui/SimulatorToFMU/blob/master/simulatortofmu/LICENSE.txt>`_\n\n\nDownload\n^^^^^^^^\n\nFiles can be downloaded individually, or as a whole repository.\n\nSee the _Clone_ button on the top right for instructions and for programs that use a graphical user interfaces.\n\nTo download, edit and add files from a command line, install first a `git` program.\n\nTo download all files, run\n\n    git clone https://github.com/LBNL-ETA/SimulatorToFMU.git\n\nThe edit a file, such as `README.md`, first edit the file, then enter\n\n    git commit -m \"Revised README file\" README.md\n    git push\n\nTo add new files, enter something like\n\n    git add filename.xyz\n    git commit -m \"Added the file xxxx\" filename.xyz\n    git push\n    \nTo use the git command on `Windows`\n\n1. download and install a `git` client such as [github desktop](https://desktop.github.com/)[^install] \n\n2. open the Git Shell\n\n3. From the Git Shell command prompt, \n\n    create a folder which should contain the files on the CyDER repository by typing\n\n        mkdir simulatortofmu\n\n4. change to the created folder by typing\n\n        cd simulatortofmu\n\nFrom the Github Shell command prompt, you can execute any `git` command.\n\nTo download, edit, and add new files see the commands listed in the section above.\n\n[^install]: In the installation process, you might be asked to log into your repository, just skip this section.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/LBNL-ETA/SimulatorToFMU/",
    "keywords": null,
    "license": "3-clause BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "SimulatorToFMU",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/SimulatorToFMU/",
    "release_url": "https://pypi.org/project/SimulatorToFMU/0.1.0/",
    "requires_dist": [],
    "requires_python": null,
    "summary": "Package for exporting a Simulator as a Functional Mock-up Unit",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": []
  },
  "urls": []
}