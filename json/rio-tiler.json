{
  "info": {
    "author": "Vincent Sarago",
    "author_email": "vincent.sarago@mapbox.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "=========\nRio-tiler\n=========\n\nRasterio pluggin to serve tiles from AWS S3 hosted files.\n\n.. image:: https://circleci.com/gh/mapbox/rio-tiler.svg?style=svg&circle-token=b78bc1a238c21046a855a9c80b441a8f2f9a4478\n   :target: https://circleci.com/gh/mapbox/rio-tiler\n\n.. image:: https://codecov.io/gh/mapbox/rio-tiler/branch/master/graph/badge.svg?token=zuHupC20cG\n   :target: https://codecov.io/gh/mapbox/rio-tiler\n\nGet mercator tile from Landsat, sentinel or other AWS hosted rasters.\n\nRio-tiler supports Python 2.7 and 3.3-3.6.\n\n\nInstall\n=======\n\n.. code-block:: console\n\n    $ pip install -U pip\n    $ pip install rio-tiler\n\nOr install from source:\n\n.. code-block:: console\n\n    $ git clone https://github.com/mapbox/rio-tiler.git\n    $ cd rio-tiler\n    $ pip install -U pip\n    $ pip install -e .\n\n\nOr if you want to create an AWS Lambda package using rasterio wheels:\n\n.. code-block:: console\n\n    # On a centos machine\n    pip install rio-tiler --no-binary numpy -t /tmp/vendored -U\n    zip -r9q package.zip vendored/*\n\nAPI Overview\n============\n\nrio_tiler.landsat8\n------------------\n\nThe ``landsat8`` module process Landsat 8 data hosted on AWS Public Dataset https://aws.amazon.com/fr/public-datasets/landsat/\n\n- **landsat8.bounds**\n\n    Get WGS84 bounds for a Landsat scene.\n\n    ``Input``:\n      - sceneid: Landsat product id (or scene id for scene < 1st May 2017)\n\n    ``Output``:\n      - dictionary:\n          - bounds: (minX, minY, maxX, maxY) (list)\n          - sceneid: scene id (string)\n\n      .. code-block:: python\n\n          >>> from rio_tiler import landsat8\n          >>> landsat8.bounds('LC08_L1TP_016037_20170813_20170814_01_RT')\n          {'bounds': [-81.30836, 32.10539, -78.82045, 34.22818],\n          'sceneid': 'LC08_L1TP_016037_20170813_20170814_01_RT'}\n\n- **landsat8.metadata**\n\n    Get WGS84 bounds and cumulative histogram cuts for each bands for a Landsat scene.\n\n    ``Input``:\n      - sceneid: Landsat product id (or scene id for scene < 1st May 2017)\n      - pmin: Histogram cut minimum value in percent (default: 2)\n      - pmax: Histogram cut maximum value in percent (default: 98)\n\n    ``Output``:\n      - dictionary:\n          - bounds: (minX, minY, maxX, maxY) (list)\n          - sceneid: scene id (string)\n          - rgbMinMax: Min/Max DN values for the linear rescaling (dictionary)\n\n        .. code-block:: python\n\n          >>> from rio_tiler import landsat8\n          >>> landsat8.metadata('LC08_L1TP_016037_20170813_20170814_01_RT', pmin=5, pmax=95)\n          {'bounds': [-81.30836, 32.10539, -78.82045, 34.22818],\n           'rgbMinMax': {'1': [1245, 5396],\n            '2': [983, 5384],\n            '3': [718, 5162],\n            '4': [470, 5273],\n            '5': [403, 6440],\n            '6': [258, 4257],\n            '7': [151, 2984]},\n           'sceneid': 'LC08_L1TP_016037_20170813_20170814_01_RT'}\n\n- **landsat8.tile**\n\n    Return base64 encoded image corresponding to a mercator tile\n\n    ``Input``:\n      - sceneid : Landsat product id (or scene id for scene < 1st May 2017)\n      - x: Mercator tile X index\n      - y: Mercator tile Y index\n      - z: Mercator tile ZOOM level\n      - rgb: Bands index for the RGB combination (default: (4, 3, 2))\n      - r_bds: First band (red) DN min and max values (default: (0, 16000))\n      - g_bds: Second band (green) DN min and max values (default: (0, 16000))\n      - b_bds: Third band (blue) DN min and max values (default: (0, 16000))\n      - tilesize: Output image size (default: 256)\n      - pan: If True, apply pan-sharpening(default: False)\n\n    ``Output``:\n      - numpy ndarray of the image data\n\n      .. code-block:: python\n\n        >>> from rio_tiler import landsat8\n        >>> tile = landsat8.tile('LC08_L1TP_016037_20170813_20170814_01_RT', 71, 102, 8)\n        >>> tile.shape\n        (3, 256, 256)\n\n\nrio_tiler.sentinel2\n-------------------\n\nThe `sentinel2` module process Sentinel 2 data hosted on AWS Public Dataset http://sentinel-pds.s3-website.eu-central-1.amazonaws.com\n\n- **sentinel2.bounds**\n\n    Get WGS84 bounds for a Landsat scene.\n\n    ``Input``:\n      - sceneid: Sentinel scene id (`S2{A|B}_tile_{YYYYMMDD}_{utm_zone}{latitude_band}{grid_square}_{img_number}`)\n\n    ``Output``:\n      - dictionary:\n          - bounds: (minX, minY, maxX, maxY) (list)\n          - sceneid: scene id (string)\n\n    .. code-block:: python\n\n      >>> from rio_tiler import sentinel2\n      >>> sentinel2.bounds('S2A_tile_20170729_19UDP_0')\n      {'bounds': [-70.36082319774495, 47.75776333620836, -68.8677615795376, 48.75301295078041],\n       'sceneid': 'S2A_tile_20170729_19UDP_0'}\n\n- **sentinel2.metadata**\n\n    Get WGS84 bounds and cumulative histogram cuts for each bands for a Sentinel scene.\n\n    ``Input``:\n      - sceneid: Sentinel scene id (`S2{A|B}_tile_{YYYYMMDD}_{utm_zone}{latitude_band}{grid_square}_{img_number}`)\n      - pmin: Histogram cut minimum value in percent (default: 2)\n      - pmax: Histogram cut maximum value in percent (default: 98)\n\n    ``Output``:\n      - dictionary:\n          - bounds: (minX, minY, maxX, maxY) (list)\n          - sceneid: scene id (string)\n          - rgbMinMax: Min/Max DN values for the linear rescaling (dictionary)\n\n    .. code-block:: python\n\n      >>> from rio_tiler import sentinel2\n      >>> sentinel2.metadata('S2A_tile_20170729_19UDP_0', pmin=5, pmax=95)\n      {'sceneid': 'S2A_tile_20170729_19UDP_0',\n      'bounds': [-70.36082319774495, 47.75776333620836, -68.8677615795376, 48.75301295078041],\n      'rgbMinMax': {\n          '01': [1088, 8237],\n          '02': [740, 8288],\n          '03': [488, 7977],\n          '04': [255, 8626],\n          '05': [210, 8877],\n          '06': [172, 9079],\n          '07': [150, 9263],\n          '08': [122, 9163],\n          '8A': [107, 9360],\n          '09': [53, 5926],\n          '10': [6, 546],\n          '11': [15, 5658],\n          '12': [8, 4009]}}\n\n- **sentinel2.tile**\n\n    Return base64 encoded image corresponding to a mercator tile\n\n    ``Input``:\n      - sceneid : Sentinel scene id (`S2{A|B}_tile_{YYYYMMDD}_{utm_zone}{latitude_band}{grid_square}_{img_number}`)\n      - x: Mercator tile X index\n      - y: Mercator tile Y index\n      - z: Mercator tile ZOOM level\n      - rgb: Bands index for the RGB combination (default: (04, 03, 02))\n      - r_bds: First band (red) DN min and max values (default: (0, 16000))\n      - g_bds: Second band (green) DN min and max values (default: (0, 16000))\n      - b_bds: Third band (blue) DN min and max values (default: (0, 16000))\n      - tilesize: Output image size (default: 256)\n\n    ``Output``:\n      - numpy ndarray of the image data\n\n    .. code-block:: python\n\n        >>> from rio_tiler import sentinel2\n        >>> sentinel2.tile('S2A_tile_20170729_19UDP_0', 77, 89, 8, 'png')\n        >>> tile.shape\n        (3, 256, 256)\n\n\nrio_tiler.aws\n-------------\n\nThe `aws` module can process any raster hosted on AWS S3.\n\n- **aws.bounds**\n\n    Get WGS84 bounds for a scene.\n\n    ``Input``:\n      - bucket: AWS S3 bucket name where the raster is stored\n      - key: AWS S3 key\n\n    ``Output``:\n      - dictionary:\n          - bounds: (minX, minY, maxX, maxY) (list)\n          - bucket: bucket name\n          - key: AWS key\n\n    .. code-block:: python\n\n      >>> from rio_tiler import aws\n      >>> aws.bounds('my-bucket', 'data/my-raster.tif')\n      {'bounds': [-104.77532797841498, 38.95344940972065, -104.77466477631017, 38.95376633047638],\n       'bucket': 'my-bucket'\n       'key': 'data/my-raster.tif'}\n\n- **aws.tile**\n\n    Return base64 encoded image corresponding to a mercator tile\n\n    ``Input``:\n      - bucket: bucket name\n      - key: AWS key\n      - x: Mercator tile X index\n      - y: Mercator tile Y index\n      - z: Mercator tile ZOOM level\n      - rgb: Band index to read (default: (1, 2, 3))\n      - tilesize: Output image size (default: 256)\n\n    ``Output``:\n      - numpy ndarray of the image data\n\n    .. code-block:: python\n\n        >>> from rio_tiler import aws\n        >>> aws.tile('my-bucket', 'data/my-raster.tif', 77, 89, 8)\n        >>> tile.shape\n        (3, 256, 256)\n\n\nConvert ``tile`` output to image\n=================================\n\nrio_tiler.utils.array_to_img\n----------------------------\n\n  ``Input``:\n    - numpy **nuint8** ndarray\n    - tileformat: Image format to return (\"jpg\" or \"png\")\n\n  ``Output``:\n    - base64 encoded image PNG or JPEG (string)\n\n\n  .. code-block:: python\n\n    >>> from rio_tiler import landsat8\n    >>> from rio_tiler.utils import array_to_img\n    >>> tile = landsat8.tile('LC08_L1TP_016037_20170813_20170814_01_RT', 71, 102, 8)\n    >>> array_to_img(tile, 'png')\n    'iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAEAAElEQVR4AQAggN9/AAAAAAA....\n\n\nLicense\n-------\n\nSee `LICENSE.txt <LICENSE.txt>`__.\n\nAuthors\n-------\n\nSee `AUTHORS.txt <AUTHORS.txt>`__.\n\nChanges\n-------\n\nSee `CHANGES.txt <CHANGES.txt>`__.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/mapbox/rio-tiler",
    "keywords": "raster aws tiler gdal rasterio",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rio-tiler",
    "platform": "",
    "project_url": "https://pypi.org/project/rio-tiler/",
    "release_url": "https://pypi.org/project/rio-tiler/0.0.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Get mercator tile from landsat, sentinel or other AWS hosted raster",
    "version": "0.0.3"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a0f7e8f8016f50a56696b8402d430937",
          "sha256": "4593a2f1877157bf4ad563b60f1469bc0b32fc372605334200afbb66b19be913"
        },
        "downloads": -1,
        "filename": "rio_tiler-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a0f7e8f8016f50a56696b8402d430937",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11997,
        "upload_time": "2017-10-12T15:39:33",
        "url": "https://files.pythonhosted.org/packages/a3/45/8f8a9ce36bff0931572f783f445ad00e48d06d94e17f6c20fac48415045d/rio_tiler-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "716e055053a9673b30b0b55d26aa2cbf",
          "sha256": "be93b958ecd9c10054ceeccaeb20d0c10d1880f69173d64d42031f7e73f4e4b7"
        },
        "downloads": -1,
        "filename": "rio_tiler-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "716e055053a9673b30b0b55d26aa2cbf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11995,
        "upload_time": "2017-10-17T16:53:57",
        "url": "https://files.pythonhosted.org/packages/b5/62/115423a6f9b17fa9bbd31456074be88cd7579a672f4c71cfe56e41714d08/rio_tiler-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8b6ec776936cd3676f1b696242f539e1",
          "sha256": "b0409fe793cde80a261fd93cd304c225796470b049f4e8cd1e8c845315d01c18"
        },
        "downloads": -1,
        "filename": "rio_tiler-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8b6ec776936cd3676f1b696242f539e1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12024,
        "upload_time": "2017-11-15T03:13:20",
        "url": "https://files.pythonhosted.org/packages/3d/ac/3cbcfca07af1699811c83770fee5ca4554e07644637b5343adf369495240/rio_tiler-0.0.3.tar.gz"
      }
    ],
    "1.0a0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2f6cdba47013f918b3818371733e27a2",
          "sha256": "d50be44cfb14a78ad8620994e4ca9e08c2cfdd48ff6679ff8630ad11a7fa846f"
        },
        "downloads": -1,
        "filename": "rio_tiler-1.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "2f6cdba47013f918b3818371733e27a2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13961,
        "upload_time": "2018-01-03T18:32:19",
        "url": "https://files.pythonhosted.org/packages/16/12/f3aa26553d79c91b1cf9fc46e36a3c6cd31f78a191abfc9e8f56e15f1618/rio_tiler-1.0a0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8b6ec776936cd3676f1b696242f539e1",
        "sha256": "b0409fe793cde80a261fd93cd304c225796470b049f4e8cd1e8c845315d01c18"
      },
      "downloads": -1,
      "filename": "rio_tiler-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "8b6ec776936cd3676f1b696242f539e1",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 12024,
      "upload_time": "2017-11-15T03:13:20",
      "url": "https://files.pythonhosted.org/packages/3d/ac/3cbcfca07af1699811c83770fee5ca4554e07644637b5343adf369495240/rio_tiler-0.0.3.tar.gz"
    }
  ]
}