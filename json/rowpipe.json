{
  "info": {
    "author": "Eric Busboom",
    "author_email": "eric@civicknowledge.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Debuggers",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Row Data Pipeline\n=================\n\nThe Rowpipe library manages row-oriented data transformers. Clients can create a RowProcessor() that has schema, composed of tables and columns, where each column cna have a \"transform\" that describes how to alter the data in the column.\n\n.. code-block:: python\n\n    from rowpipe.table import Table\n    from rowpipe.processor import RowProcessor\n\n    def doubleit(v):\n        return int(v) * 2\n\n    env = {\n        'doubleit': doubleit\n    }\n\n    t = Table('foobar')\n    t.add_column('id', datatype='int')\n    t.add_column('other_id', datatype='int', transform='^row.a')\n    t.add_column('i1', datatype='int', transform='^row.a;doubleit')\n    t.add_column('f1', datatype='float', transform='^row.b;doubleit')\n    t.add_column('i2', datatype='int', transform='^row.a')\n    t.add_column('f2', datatype='float', transform='^row.b')\n\n\nIn this table definition, ``other_id`` and ``i2`` columns are  initialized to the valu of the ``a`` column in the input row,\nThe  ``i1`` column is initialized to the input row ``a`` column, then the ``doubleit`` function is called on the value. In the last step, all of the values are cast to the types specified in the ``datatype`` column.\n\nThe RowProcessor is then run using this table definition, and an input generator:\n\n.. code-block:: python\n\n    class Source(object):\n\n        headers = 'a b'.split()\n\n        def __iter__(self):\n            for i in range(N):\n                yield i, 2*i\n\n    rp = RowProcessor(Source(), t, env=env)\n\n\n\nThen, ``rp`` is a generator that returns ``RowProxy`` objects, which can be indexed as integers or by clolumn number:\n\n\n.. code-block:: python\n\n    for row in rp:\n        v1 = row['f1']\n        v2 = row[3]\n\nThe RowProcessor creates Python code files and executes them.\n\nTransforms can have several steps, seperated by ';'. The first, prefixes with a '^', initializes the value for the rest of the transforms. A transform that is prefixes with a '!' is executed on exceptions.  Transform functions can have a variable signature; the tranform processor matches argument names. Valid argument names are:\n\n- row. A rowProxy object for the input row. Allows access to any input row value\n- row_n. Row number.\n- scratch. A dict for temporary storage\n- errors. A defaultdict(set) for storing error reports for columns. Keys are column names\n- accumulator. A dict for accumulating value, such as sums.\n- pipe. Unused\n- bundle. Unused\n- source. Reference to the input generator that is generating rows\n- v . The input row value\n- header_s. The header for the column in the input row.\n- i_s. The index of the column in the input row\n- header_d. The header for the column in the output row.\n- i_d.  The index of the column in the output row\n\n... and there is a whole lot more. This documentation is woefully incomplete ...\n\nNotes\n-----\n\nThis repo still contains old code for Row Pipelines, which are in the ``pipeline.py`` file. These components can be combined to performd defined operations on rows, such as skipping rows based on a predicate, altering the number of rows, returning on ly the head or tail, etc. The code is not currently used ot tested.\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/CivicKnowledge/rowgenerator.git",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rowpipe",
    "platform": "",
    "project_url": "https://pypi.org/project/rowpipe/",
    "release_url": "https://pypi.org/project/rowpipe/0.1.7/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Generate row data from a variety of file formats",
    "version": "0.1.7"
  },
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fb580b1438d5e0608b25dbe425ca3b87",
          "sha256": "ba9a11a056fc20cf6d4085bdd34605901a6ebd1511aade1a50c0b5cf24328495"
        },
        "downloads": 20,
        "filename": "rowpipe-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fb580b1438d5e0608b25dbe425ca3b87",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41265,
        "upload_time": "2017-04-02T20:43:09",
        "url": "https://files.pythonhosted.org/packages/87/37/23a2624bca66cabe80a99780106f0097b0f93c69d03f73606c0969f743c3/rowpipe-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5cba7a0c14a55d77b6a3323ff7836872",
          "sha256": "b7082a1fba111ef8a51ea0e29bd96d6d3ee025793488c47081347bfcfabb2e51"
        },
        "downloads": 0,
        "filename": "rowpipe-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5cba7a0c14a55d77b6a3323ff7836872",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41424,
        "upload_time": "2017-08-21T14:23:43",
        "url": "https://files.pythonhosted.org/packages/9d/a0/525b5bc14995eb9cf88861e10ab8f949120d3eebe03868294e3ca7aaca3a/rowpipe-0.1.3.tar.gz"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4564a5a37954da597f7799267c46fbbd",
          "sha256": "536fd3d099767a34c39dad662074abe5cd1a35d844231226daf66b8dd60464ef"
        },
        "downloads": 0,
        "filename": "rowpipe-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4564a5a37954da597f7799267c46fbbd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43770,
        "upload_time": "2017-09-18T18:32:07",
        "url": "https://files.pythonhosted.org/packages/7f/da/2886c51d57b45454cfd339c436e323506241af61c257f3a938be26afd726/rowpipe-0.1.5.tar.gz"
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "39bcf6779eb983bbde89816b22f50fab",
          "sha256": "aa0a6e530dc91fe60e08767d4b92ec38b8c46fa535379b8fbcad486a93b72383"
        },
        "downloads": 0,
        "filename": "rowpipe-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "39bcf6779eb983bbde89816b22f50fab",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43339,
        "upload_time": "2017-09-21T16:29:23",
        "url": "https://files.pythonhosted.org/packages/82/8d/b17d0fa1fd69cac55536fd0298c8f94bd52369dde28e4f741a2baa96ac2f/rowpipe-0.1.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "39bcf6779eb983bbde89816b22f50fab",
        "sha256": "aa0a6e530dc91fe60e08767d4b92ec38b8c46fa535379b8fbcad486a93b72383"
      },
      "downloads": 0,
      "filename": "rowpipe-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "39bcf6779eb983bbde89816b22f50fab",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 43339,
      "upload_time": "2017-09-21T16:29:23",
      "url": "https://files.pythonhosted.org/packages/82/8d/b17d0fa1fd69cac55536fd0298c8f94bd52369dde28e4f741a2baa96ac2f/rowpipe-0.1.7.tar.gz"
    }
  ]
}