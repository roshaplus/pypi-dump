{
  "info": {
    "author": "Hiroaki Yamamoto",
    "author_email": "hiroaki@hysoftware.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "More human readable JSON serializer/de-serializer for MongoEngine\n=================================================================\n\n`|Build\nStatus| <https://travis-ci.org/hiroaki-yamamoto/mongoengine-goodjson>`_\n`|Coverage\nStatus| <https://coveralls.io/github/hiroaki-yamamoto/mongoengine-goodjson?branch=master>`_\n`|Code\nHealth| <https://landscape.io/github/hiroaki-yamamoto/mongoengine-goodjson/master>`_\n`|PyPI version| <https://badge.fury.io/py/mongoengine_goodjson>`_\n\nWhat This?\n----------\n\nThis script has MongoEngine Document json serialization more-natural.\n\nWhy this invented?\n------------------\n\nUsing MongoEngine to create something (e.g. RESTful API), sometimes you\nmight want to serialize the data from the db into JSON, but some fields\nare weird and not suitable for frontend/api:\n\n::\n\n    {\n      \"_id\": {\n        \"$oid\": \"5700c32a1cbd5856815051ce\"\n      },\n      \"name\": \"Hiroaki Yamamoto\",\n      \"registered_date\": {\n          \"$date\": 1459667811724\n      }\n    }\n\nThe points are 2 points:\n\n-  ``_id`` might not be wanted because jslint disagrees ``_`` character\n   unless declaring ``jslint nomen:true``\n-  There are sub-fields such ``$oid`` and ``$date``. These fields are\n   known as `MongoDB Extended\n   JSON <https://docs.mongodb.org/manual/reference/mongodb-extended-json/>`_.\n   However, considering MongoEngine is ODM and therefore it has\n   schema-definition methods, the fields shouldn't have the special\n   fields. In particular problems, you might get\n   ``No such property $oid of undefined`` error when you handle above\n   generated data on frontend.\n\nTo solve the problems, the generated data should be like this:\n\n::\n\n    {\n      \"id\": \"5700c32a1cbd5856815051ce\",\n      \"name\": \"Hiroaki Yamamoto\",\n      \"registered_date\": 1459667811724\n    }\n\nMaking above structure can be possible by doing re-mapping, but if we do\nit on `API's controller\nobject <https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/MVC.html>`_,\nthe code might get super-dirty:\n\n::\n\n    \"\"\"Dirty code.\"\"\"\n    import mongoengine as db\n\n\n    class User(db.Document):\n      \"\"\"User class.\"\"\"\n      name = db.StringField(required=True, unique=True)\n      registered_date = db.DateTimeField()\n\n\n    def get_user(self):\n      \"\"\"Get user.\"\"\"\n      models = [\n        {\n          (\"id\" if key == \"_id\" else key): (\n            value.pop(\"$oid\") if \"$oid\" in value and isinstance(value, dict)\n            else value.pop(\"$date\") if \"$date\" in value and isinstance(value, dict)\n            else value  #What if there are the special fields in child dict?\n          )\n          for (key, value) in doc.items()\n        } for doc in User.objects(pk=ObjectId(\"5700c32a1cbd5856815051ce\"))\n      ]\n      return json.dumps(models, indent=2)\n\nTo give the solution of this problem, I developed this scirpt. By using\nthis script, you will not need to make the transform like above. i.e.\n\n::\n\n\n    \"\"\"A little-bit clean code.\"\"\"\n\n    import mongoengine as db\n    import mongoengine_goodjson as gj\n\n\n    class User(gj.Document):\n      \"\"\"User class.\"\"\"\n      name = db.StringField(required=True, unique=True)\n      registered_date = db.DateTimeField()\n\n\n    def get_user(self):\n      \"\"\"Get user.\"\"\"\n      return model_cls.objects(\n        pk=ObjectId(\"5700c32a1cbd5856815051ce\")\n      ).to_json(indent=2)\n\nHow to use it\n-------------\n\nGenerally you can define the document as usual, but you might want to\ninherits ``mongoengnie_goodjson.Document`` or\n``mongoengnie_goodjson.EmbeddedDocument``.\n\nHere is the example:\n\n::\n\n    \"\"\"Example schema.\"\"\"\n\n    import mongoengine_goodjson as gj\n    import mongoengine as db\n\n\n    class Address(gj.EmbeddedDocument):\n        \"\"\"Address schema.\"\"\"\n\n        street = db.StringField()\n        city = db.StringField()\n        state = db.StringField()\n\n\n    class User(gj.Document):\n        \"\"\"User data schema.\"\"\"\n\n        name = db.StringField()\n        email = db.EmailField()\n        address = db.EmbeddedDocumentListField(Address)\n\nFeature: Follow Reference\n-------------------------\n\nAdding documents with ``ReferenceField``, the fields are serialized as\nObjectId by default:\n\n``model.py`` \\`\\`\\`Python import mongoengine as db import\nmongoengine\\_goodjson as gj\n\nclass Book(gj.Document): \"\"\"Book information model.\"\"\"\n\nname = db.StringField(required=True) isbn =\ndb.StringField(required=True) author = db.StringField(required=True)\npublisher = db.StringField(required=True) publish\\_date =\ndb.DateTimeField(required=True)\n\nclass User(gj.Document): firstname = db.StringField(required=True)\nlastname = db.StringField(required=True) books\\_bought =\ndb.ListField(db.ReferenceField(Book)) favorite\\_one =\ndb.ReferenceField(Book) \\`\\`\\`\n\n``The example of generated output``\n``JSON {   \"id\": \"570ee9d1fec55e755db82129\",   \"firstname\": \"James\",   \"lastname\": \"Smith\",   \"books_bought\": [     \"570eea0afec55e755db8212a\",     \"570eea0bfec55e755db8212b\",     \"570eea0bfec55e755db8212c\"   ],   \"favorite_one\": \"570eea0bfec55e755db8212b\" }``\n\nThis seems to be good deal for ``Reference Field``, but sometimes you\nmight want to generate the Document with Referenced Document like\nEmbedded Document:\n\n::\n\n    {\n      \"id\": \"570ee9d1fec55e755db82129\",\n      \"firstname\": \"James\",\n      \"lastname\": \"Smith\",\n      \"books_bought\": [\n        {\n          \"id\": \"570eea0afec55e755db8212a\",\n          \"name\": \"\u30c9\u30b0\u30e9\u30fb\u30de\u30b0\u30e9 (\u4e0a)\",\n          \"author\": \"\u5922\u91ce \u4e45\u4f5c\",\n          \"publisher\": \"\u89d2\u5ddd\u6587\u5eab\",\n          \"publish_date\": \"1976-10-01\",\n          \"isbn\": \"978-4041366035\"\n        },\n        {\n          \"id\": \"570eea0bfec55e755db8212b\",\n          \"name\": \"\u30c9\u30b0\u30e9\u30fb\u30de\u30b0\u30e9 (\u4e0b)\",\n          \"author\": \"\u5922\u91ce \u4e45\u4f5c\",\n          \"publisher\": \"\u89d2\u5ddd\u6587\u5eab\",\n          \"publish_date\": \"1976-10-01\",\n          \"isbn\": \"978-4041366042\"\n        },\n        {\n          \"id\": \"570eea0bfec55e755db8212c\",\n          \"name\": \"The Voynich Manuscript: Full Color Photographic Edition\",\n          \"author\": \"Unknown\",\n          \"publisher\": \"FQ Publishing\",\n          \"publish_date\": \"2015-01-17\",\n          \"isbn\": \"978-1599865553\"\n        }\n      ],\n      \"favorite_one\": {\n        \"id\": \"570eea0bfec55e755db8212b\",\n        \"name\": \"\u30c9\u30b0\u30e9\u30fb\u30de\u30b0\u30e9 (\u4e0b)\",\n        \"author\": \"\u5922\u91ce \u4e45\u4f5c\",\n        \"publisher\": \"\u89d2\u5ddd\u6587\u5eab\",\n        \"publish_date\": \"1976-10-01\",\n        \"isbn\": \"978-4041366042\"\n      }\n    }\n\nMaking this format can be done by making Document.objects query for each\nreference. However, doing it, the code would be also dirty:\n\n::\n\n    def output_references():\n      user = User.objects(pk=ObjectId(\"570ee9d1fec55e755db82129\")).get()\n      user_dct = json.loads(user.to_json())\n      user_dct[\"books\"] = [\n        json.loads(book.to_json()) for book in user.books_bought\n      ]\n      user_dct[\"favorite_one\"] = json.loads(user.favorite_one.to_json())\n      return jsonify(user_dct)\n      # ...And what if there are references in the referenced document??\n\nTo avoid this annoying problem, this script has new function called\n``Follow Reference`` since 0.9. To use it, you can just set\n``follow_reference=True`` on serialization:\n\n::\n\n    def output_references():\n      user = User.objects(pk=ObjectId(\"570ee9d1fec55e755db82129\")).get()\n      return jsonify(json.loads(user.to_json(follow_reference=True)))\n\nNote that setting ``follow_reference=True``, ``Document.to_json`` checks\nthe reference recursively until the depth is reached 3rd depth. To\nchange the maximum recursion depth, you can set the value you want to\n``max_depth``:\n\n::\n\n    def output_references():\n      user = User.objects(pk=ObjectId(\"570ee9d1fec55e755db82129\")).get()\n      return jsonify(json.loads(user.to_json(follow_reference=True, max_depth=5)))\n\nFeature: FollowReferenceField\n-----------------------------\n\nThis script also provides a field that supports serialization of the\nreference with ``follow_reference=True``. Unlike ``ReferenceField``,\nthis field supports deserialization and automatic-save.\n\nTo use this field, you can just simply declare the field as usual. For\nexample, like this:\n\n::\n\n    import mongoengine as db\n    import mongoengine_goodjson as gj\n\n\n    class User(gj.Document):\n      \"\"\"User info.\"\"\"\n      name = db.StringField()\n      email = db.EmailField()\n\n    class DetailedProfile(gj.Document):\n      \"\"\"Detail profile of the user.\"\"\"\n      # FollowReferenceField without auto-save\n      user = gj.FollowReferenceField(User)\n      yob = db.DateTimeField()\n      # FollowReferenceField with auto-save\n      partner = gj.FollowReferenceField(User, autosave=True)\n\nFeature 2: Exclude fields from JSON serialization/deserialization\n-----------------------------------------------------------------\n\nSometimes you might want to exclude fields from JSON serialization, but\nto do so, you might need to decode JSON-serialized string, pop the key,\nthen, serialize the dict object again. Since 0.11, metadata\n``exclude_to_json``, ``exclude_from_json``, and ``exclude_json`` are\navailable and they behave like the following:\n\n-  Setting Truthy value to ``exclude_to_json``, the corresponding field\n   is omitted from JSON encoding. Note that this excludes fields JSON\n   encoding only.\n-  Setting Truthy value to ``exclude_from_json``, the corresponding\n   field is omitted from JSON decoding. Note that this excludes fields\n   JSON decoding only.\n-  Setting Truhy value to ``exclude_json``, the corresponding field is\n   omitted from JSON encoding and decoding.\n\nExample\n~~~~~~~\n\nTo use the exclusion, you can just put exclude metadata like this:\n\n::\n\n    import mongoengine_goodjson as gj\n    import mongoengine as db\n\n\n    class ExclusionModel(gj.Document):\n        \"\"\"Example Model.\"\"\"\n        to_json_exclude = db.StringField(exclude_to_json=True)\n        from_json_exclude = db.IntField(exclude_from_json=True)\n        json_exclude = db.StringField(exclude_json=True)\n        required = db.StringField(required=True)\n\n\n    def get_json_obj(*q, **query):\n        model = Exclude.objects(*q, **query).get()\n        # Just simply call to_json :)\n        return model.to_json()\n\n\n    def get_json_list(*q, **query):\n        # You can also get JSON serialized text from QuerySet.\n        return Exclude.objects(*q, **query).to_json()\n\n\n    # Decoding is also simple.\n    def get_obj_from_json(json_text):\n      return Exclude.from_json(json_text)\n\n\n    def get_list_from_json(json_text):\n      return Exclude.objects.from_json(json_text)\n\nFeature 3: Reference Limit\n--------------------------\n\nSince version 1.0.0, the method to limit recursive depth is implemented.\nCurrently, this supports only \"depth-level\" limit, however, limit\ncircuit references by condition will be implemented in the future.\n\nBy default, ``to_json`` serializes the document until the cursor reaches\n3rd level. To change the maximum depth level, change ``max_depth``\nkwargs.\n\nAs of 1.1.0, callable function can be set to ``max_depth``, and to\\_json\ncalls ``max_depth`` with the document that the field holds, and current\ndepth level. If the function that is associated with ``max_depth``\nreturns truthy values, the serialization will be stop.\n\nNote that when you use callable ``max_depth`` of\n``FollowReferenceField``, the border of the document i.e. the document\nthat ``max_depth`` returned truthy value, will **NOT** be serialized\nwhile ``to_json()`` **does**. It just be \"id\" of the model.\n\nCode Example\n~~~~~~~~~~~~\n\nHere is the code example of Limit Recursion:\n\n::\n\n    #!/usr/bin/env python\n    # coding=utf-8\n\n    import mongoengine as db\n    import mongoengine_goodjson as gj\n\n\n    class User(gj.Document):\n      \"\"\"User info.\"\"\"\n      name = db.StringField()\n      email = db.EmailField()\n      # i.e. You can access everyone in the world by Six Degrees of Separation\n      friends = db.ListField(gj.FollowReferenceField(\"self\", max_depth=6))\n\n      # If the name of the user is Alice, Mary, or Bob, it will refer more depth.\n      not_friend = gj.FollowReferenceField(\n        \"self\", max_depth=lambda doc, cur_depth: doc.name not in [\n          \"Alice\", \"Mary\", \"Bob\"\n        ]\n      )\n\n    class DetailedProfile(gj.Document):\n      \"\"\"Detail profile of the user.\"\"\"\n      user = gj.FollowReferenceField(User)\n      yob = db.DateTimeField()\n\nTo disable the limit, put negative number to ``max_depth``, however\ndon't forget to make sure that the model has neither circuit nor\nself-reference.\n\nNot implemented list\n--------------------\n\nThe following types are partially implemented because there aren't any\ncorresponding fields on MongoEngine:\n\nType\\|Encoder\\|Decoder ----\\|--------\\|-------\nRegex\\|:white\\_check\\_mark:\\|:x: MinKey\\|:white\\_check\\_mark:\\|:x:\nMaxKey\\|:white\\_check\\_mark:\\|:x: TimeStamp\\|:white\\_check\\_mark:\\|:x:\nCode\\|:white\\_check\\_mark:\\|:x:\n\nThe following document types are not implemented yet:\n\n-  ``DynamicDocument``\n-  ``DynamicEmbeddedDocument``\n-  ``MapReduceDocument``\n\nBtw I don't think above documents implementations are needed because\nthey can be handled by using multiple-inheritance. If you couldn't do\nit, post issue or PR.\n\nFollowReference Decoder\n~~~~~~~~~~~~~~~~~~~~~~~\n\n[STRIKEOUT:Since 0.9, this script supports Follow Reference, but it\ndoesn't support decoder. Passing \"followed reference\" dict to\nReferenceField, it recognized ``id`` field only. This behavior will be\nfixed at 0.10.] Use ``FollowReferenceField``.\n\nContribute\n----------\n\nThis scirpt is coded on TDD. i.e. Writing a test that fails, and then\nwrite the actual code to pass the test. Therefore, ``virtualenv``,\n``nose`` and ``tox`` will be needed to code this script. In addtion, you\nwill need to have `MongoDB <https://www.mongodb.org/>`_ installed and it\nmust be running on the computer to run the tests.\n\nIn addition, you can use `gulp <http://gulpjs.com/>`_ to watch the file\nchanges.\n\nLicense (MIT License)\n---------------------\n\nSee `LICENSE.md <LICENSE.md>`_\n\n.. |Build\nStatus| image:: https://travis-ci.org/hiroaki-yamamoto/mongoengine-goodjson.svg?branch=master\n.. |Coverage\nStatus| image:: https://coveralls.io/repos/github/hiroaki-yamamoto/mongoengine-goodjson/badge.svg?branch=master\n.. |Code\nHealth| image:: https://landscape.io/github/hiroaki-yamamoto/mongoengine-goodjson/master/landscape.svg?style=flat\n.. |PyPI\nversion| image:: https://badge.fury.io/py/mongoengine_goodjson.svg",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/hiroaki-yamamoto/mongoengine-goodjson",
    "keywords": "json mongoengine mongodb",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mongoengine_goodjson",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mongoengine_goodjson/",
    "release_url": "https://pypi.org/project/mongoengine_goodjson/1.1/",
    "requires_python": "",
    "summary": "More human readable JSON serializer/de-serializer for MongoEngine",
    "version": "1.1"
  },
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0397e10fe08810dcd329708875b08900",
          "sha256": "0b4fa0484a84712e4456c785ef7584e3b761e6732d3ba02cb1d614b3235c9c18"
        },
        "downloads": 110,
        "filename": "mongoengine_goodjson-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0397e10fe08810dcd329708875b08900",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19136,
        "upload_time": "2016-04-30T08:45:44",
        "url": "https://files.pythonhosted.org/packages/be/ab/040e10cc016c5f5c34b66335e4c27eca302b80a59b1f196ca1175c09ea7e/mongoengine_goodjson-0.10.0.tar.gz"
      }
    ],
    "0.10.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "54953deb0553e9073f11bf924c4ad836",
          "sha256": "36b970a67e76b580a8327d67ef9daf55cdb636164604b97c8eabf3c42bbfb38d"
        },
        "downloads": 489,
        "filename": "mongoengine_goodjson-0.10.1.tar.gz",
        "has_sig": false,
        "md5_digest": "54953deb0553e9073f11bf924c4ad836",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19281,
        "upload_time": "2016-05-03T07:03:12",
        "url": "https://files.pythonhosted.org/packages/e1/73/7d9e19a54c6fda278c175447ba3b021b0ddb0f61ed8a2a6575a03a934ec7/mongoengine_goodjson-0.10.1.tar.gz"
      }
    ],
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "91a1c6f988cd5c27a4c406c2860b725c",
          "sha256": "403220b71752a2cd6fe3381140554e5d70a292dd2dd3e50fdba7d97065545614"
        },
        "downloads": 73,
        "filename": "mongoengine_goodjson-0.11.0.tar.gz",
        "has_sig": true,
        "md5_digest": "91a1c6f988cd5c27a4c406c2860b725c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20056,
        "upload_time": "2016-09-26T09:19:29",
        "url": "https://files.pythonhosted.org/packages/17/7f/eb3d5ec9257e495388f15005f14ad5c28ed657d9be834d9fe343d7bd448d/mongoengine_goodjson-0.11.0.tar.gz"
      }
    ],
    "0.11.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c488e563a877427845e8f881247d2c27",
          "sha256": "2a991da676992eb1f99381e5e86fc3ef9a0906ede79b74c7c5ad8c737e3e96b6"
        },
        "downloads": 72,
        "filename": "mongoengine_goodjson-0.11.1.tar.gz",
        "has_sig": true,
        "md5_digest": "c488e563a877427845e8f881247d2c27",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21198,
        "upload_time": "2016-09-26T09:55:00",
        "url": "https://files.pythonhosted.org/packages/92/53/d95160f2b3319f8f0706593d7d087c718c5debf0b5857e186f17c44b8b6f/mongoengine_goodjson-0.11.1.tar.gz"
      }
    ],
    "0.11.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "83455b04e87402d400cfacbc2774a840",
          "sha256": "6f5bd0000598e6ea4dbe6e2582780c53f2f9b8a9b32ac5e876c1e36fffc08593"
        },
        "downloads": 79,
        "filename": "mongoengine_goodjson-0.11.2.tar.gz",
        "has_sig": true,
        "md5_digest": "83455b04e87402d400cfacbc2774a840",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21210,
        "upload_time": "2016-09-26T09:59:13",
        "url": "https://files.pythonhosted.org/packages/75/95/5c844abdf44402be957f78fc4c340b218af00a34fd11ef9294c6ead117e1/mongoengine_goodjson-0.11.2.tar.gz"
      }
    ],
    "0.11.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "13ba0e9858037cf40368a9f264567b9a",
          "sha256": "31c1f7a84567add809333ea2d29ee61ff75f2452f95d987d303607c75fc013b5"
        },
        "downloads": 100,
        "filename": "mongoengine_goodjson-0.11.3.tar.gz",
        "has_sig": false,
        "md5_digest": "13ba0e9858037cf40368a9f264567b9a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23578,
        "upload_time": "2016-10-09T05:53:58",
        "url": "https://files.pythonhosted.org/packages/a8/a1/408482b6c756ffff84d4c44735af37c460a222f3fcc31894052cb14404f2/mongoengine_goodjson-0.11.3.tar.gz"
      }
    ],
    "0.8.18": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bda520cd711894595bc68f8101d5fc21",
          "sha256": "ea23343c671fc6df8847292483f69d5b97b12ae7917360b094803471e44d83a2"
        },
        "downloads": 118,
        "filename": "mongoengine_goodjson-0.8.18.tar.gz",
        "has_sig": false,
        "md5_digest": "bda520cd711894595bc68f8101d5fc21",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10090,
        "upload_time": "2016-04-03T12:53:46",
        "url": "https://files.pythonhosted.org/packages/de/37/be31a8114d37a9669b59686f2764a0b9fb144061a93b744bd2aa75fc7b64/mongoengine_goodjson-0.8.18.tar.gz"
      }
    ],
    "0.8.19": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0dfc7993afa6e0bb6cf3baa6609b96f1",
          "sha256": "ed5c2cd1c2dba4e5d22ae2fae8ad57b842eaff192d5ad93aa1295ca0d409e087"
        },
        "downloads": 108,
        "filename": "mongoengine_goodjson-0.8.19.tar.gz",
        "has_sig": false,
        "md5_digest": "0dfc7993afa6e0bb6cf3baa6609b96f1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10048,
        "upload_time": "2016-04-04T07:10:06",
        "url": "https://files.pythonhosted.org/packages/10/2a/384e30b28731fecddc606907b400ee99af92fde28b8154471b9869fbf1ca/mongoengine_goodjson-0.8.19.tar.gz"
      }
    ],
    "0.8.5": [],
    "0.8.6": [],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "488e18326294ba9be3419793204056cb",
          "sha256": "552a0af264c7393a0086d3fc167c128a7bd580dfad2ed19935a3ac94c1671229"
        },
        "downloads": 111,
        "filename": "mongoengine_goodjson-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "488e18326294ba9be3419793204056cb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14218,
        "upload_time": "2016-04-14T01:28:18",
        "url": "https://files.pythonhosted.org/packages/9f/f9/1433ca83c6c029227ad8f3fe2fd2a3f1b3f46b42a4e7deb3ffa7c65185c1/mongoengine_goodjson-0.9.0.tar.gz"
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "411f9d2088980751a287faa19d5a254d",
          "sha256": "3d9630064e5543a6893a43e0e20b09adc72533ba858c845c4e48c132125d9695"
        },
        "downloads": 126,
        "filename": "mongoengine_goodjson-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "411f9d2088980751a287faa19d5a254d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15152,
        "upload_time": "2016-04-14T08:31:00",
        "url": "https://files.pythonhosted.org/packages/73/51/5b99f16ee04c6595290de1e34814e284846d2ae3b8c0c788bd4d28f7b347/mongoengine_goodjson-0.9.1.tar.gz"
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cfcbd0e2328770fda9748c66024f3b2c",
          "sha256": "b4e70ac4c9ebbc68c267e7f47a4f44f26c86db9cf7b910105f22417c1ea2b137"
        },
        "downloads": 109,
        "filename": "mongoengine_goodjson-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cfcbd0e2328770fda9748c66024f3b2c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15154,
        "upload_time": "2016-04-14T08:47:18",
        "url": "https://files.pythonhosted.org/packages/69/d0/4ddf645b5cbc307c8c2ddb021e806378a41f5a16918e36cde7ab18e6683e/mongoengine_goodjson-0.9.2.tar.gz"
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7a30a14a28691ec2aec3458b0c4ac518",
          "sha256": "7519f169ba8a5df3556ca7eba443042e9f3fddde661bfa4ba4690fd06a984199"
        },
        "downloads": 113,
        "filename": "mongoengine_goodjson-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "7a30a14a28691ec2aec3458b0c4ac518",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15163,
        "upload_time": "2016-04-14T08:55:55",
        "url": "https://files.pythonhosted.org/packages/3f/02/8b134d443121921c6e4c6ef1e3928d3b33b736d238a3dd2c38fe9b94bb9b/mongoengine_goodjson-0.9.3.tar.gz"
      }
    ],
    "0.99.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "17a0b4ba211839de6dab6cdd1178d952",
          "sha256": "d2368bcb478739da6dc4032841b78f23f94ef15fec3fcc5f5fd0812d64015ec8"
        },
        "downloads": 14,
        "filename": "mongoengine_goodjson-0.99.10.tar.gz",
        "has_sig": false,
        "md5_digest": "17a0b4ba211839de6dab6cdd1178d952",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25694,
        "upload_time": "2017-01-29T10:17:43",
        "url": "https://files.pythonhosted.org/packages/ff/2a/e31892b08d59562415e5d1808670fa2eaea25f2622f98c2bc3485b946778/mongoengine_goodjson-0.99.10.tar.gz"
      }
    ],
    "0.99.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4a6ed255fe29d3e4299eb6da14c34f42",
          "sha256": "6ad2c1255e50fcff714934a7d5d210fec35bb886e6498c482cbbfaa4151b633a"
        },
        "downloads": 11,
        "filename": "mongoengine_goodjson-0.99.13.tar.gz",
        "has_sig": false,
        "md5_digest": "4a6ed255fe29d3e4299eb6da14c34f42",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25688,
        "upload_time": "2017-01-29T10:35:03",
        "url": "https://files.pythonhosted.org/packages/4c/c9/178580cb3c057503581fc31bdf3bfabe44859e5ced8f1e70852d3a33408a/mongoengine_goodjson-0.99.13.tar.gz"
      }
    ],
    "0.99.15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "30c779d2fc6605d2dd70441dbc5d6912",
          "sha256": "4bec1a4bb29dd07f2c0c3d99192a2f4c59b87dec1d816164029ca2f2d4d049ee"
        },
        "downloads": 12,
        "filename": "mongoengine_goodjson-0.99.15.tar.gz",
        "has_sig": false,
        "md5_digest": "30c779d2fc6605d2dd70441dbc5d6912",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25686,
        "upload_time": "2017-01-29T10:42:15",
        "url": "https://files.pythonhosted.org/packages/07/ec/e00c60e3b46a2e42679c24110fc0da5a8ca79427c6ee77e63d3fc099ca7e/mongoengine_goodjson-0.99.15.tar.gz"
      }
    ],
    "0.99.17": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2b4ffbd460e49b9d7550c95183068004",
          "sha256": "bad99fce92bf9dda2c3a1b5f4ba6576b8905aa827ef3dee9676f43f33858035c"
        },
        "downloads": 12,
        "filename": "mongoengine_goodjson-0.99.17.tar.gz",
        "has_sig": false,
        "md5_digest": "2b4ffbd460e49b9d7550c95183068004",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25686,
        "upload_time": "2017-01-29T11:00:11",
        "url": "https://files.pythonhosted.org/packages/29/03/6e4c6cd9a97fbf59ab7bcf470319f80835f69947507811e4289e01372546/mongoengine_goodjson-0.99.17.tar.gz"
      }
    ],
    "0.99.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ecd1fe903518d357fe83a2bcd2122512",
          "sha256": "a8f67b05e7a4df804642821799637254bb09b892c76036b761a4975ceb1ddeaa"
        },
        "downloads": 12,
        "filename": "mongoengine_goodjson-0.99.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ecd1fe903518d357fe83a2bcd2122512",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25693,
        "upload_time": "2017-01-29T09:45:06",
        "url": "https://files.pythonhosted.org/packages/ea/82/ac547a78c4f15eb3ab462d505ca3e2fe86ff64b582cf53e9bd58f5cb8683/mongoengine_goodjson-0.99.2.tar.gz"
      }
    ],
    "0.99.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a74b45f14179baa9a242d967c4962288",
          "sha256": "0d52dd28da788aac97f449ffe11f757cf0acbb48c10011ed56dfc07758fd2bfc"
        },
        "downloads": 12,
        "filename": "mongoengine_goodjson-0.99.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a74b45f14179baa9a242d967c4962288",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25689,
        "upload_time": "2017-01-29T09:51:05",
        "url": "https://files.pythonhosted.org/packages/0e/df/087b92425cc472000687c64f1d25082ba4cde8c7d1ec1243c725d31ece5f/mongoengine_goodjson-0.99.3.tar.gz"
      }
    ],
    "0.99.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "59dc1ccecc0e07610ca35f109683876d",
          "sha256": "63fa2862ee4f6dcc8673bfc7ed58783ccce1db6bfb7e1103c19a5efb3c7f074a"
        },
        "downloads": 13,
        "filename": "mongoengine_goodjson-0.99.7.tar.gz",
        "has_sig": false,
        "md5_digest": "59dc1ccecc0e07610ca35f109683876d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25689,
        "upload_time": "2017-01-29T10:08:59",
        "url": "https://files.pythonhosted.org/packages/e0/85/70d7f5a40f6e4d1af217ed316a58d23221a0c820051b6200003d504ffaf9/mongoengine_goodjson-0.99.7.tar.gz"
      }
    ],
    "0.99.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3dcd5955aef9b0ec1b729369222a9288",
          "sha256": "81a49b71a75da62ec8914960d117122e90cd57372623a5ac45173a8323013e54"
        },
        "downloads": 12,
        "filename": "mongoengine_goodjson-0.99.9.tar.gz",
        "has_sig": false,
        "md5_digest": "3dcd5955aef9b0ec1b729369222a9288",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25693,
        "upload_time": "2017-01-29T10:12:37",
        "url": "https://files.pythonhosted.org/packages/38/c7/893e3249f140cd5f69fc70c1980496044884b0dc66f07ff1baacc61314c0/mongoengine_goodjson-0.99.9.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "feb5613b29dc4a20be9e36fc50124899",
          "sha256": "4c21dc8b01df5e1a7a76ff8012a3c3a9d589d09c681535e511833f8526f81805"
        },
        "downloads": 14,
        "filename": "mongoengine_goodjson-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "feb5613b29dc4a20be9e36fc50124899",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25683,
        "upload_time": "2017-01-29T11:05:12",
        "url": "https://files.pythonhosted.org/packages/8a/93/399592b2574693f7b81383d5c3334819b24ebc2841bb09a1a66e1c00c7f6/mongoengine_goodjson-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3de4ea89ab33c981d2540703a2f19b5c",
          "sha256": "ede210ced65e78c41ffce27e3963dcba3b9a2777372cd1ab1e95ab5a46590fba"
        },
        "downloads": 46,
        "filename": "mongoengine_goodjson-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3de4ea89ab33c981d2540703a2f19b5c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28122,
        "upload_time": "2017-03-14T08:48:27",
        "url": "https://files.pythonhosted.org/packages/e2/1a/b108b09cf984a51a9ff85f815ad3d9931fcddcf056b4540e0da5a32faac7/mongoengine_goodjson-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "50d0b88e62f344d2cb7f33e6c8395848",
          "sha256": "247650690f595bc4940efcfaca57c0c22383cd554a42ebfa89dcd2d4d2abff65"
        },
        "downloads": 0,
        "filename": "mongoengine_goodjson-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "50d0b88e62f344d2cb7f33e6c8395848",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27305,
        "upload_time": "2017-04-18T11:43:29",
        "url": "https://files.pythonhosted.org/packages/01/66/04eedf6152fcecfd2a129b2a341d30e7363b3d8de6e269b7d9bda120566a/mongoengine_goodjson-1.0.2.tar.gz"
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4208707f0540ddffb05b2e54af277b50",
          "sha256": "1409250415e62caf3e1c4d793b328e3d6a2021d782bee28b2888289a1aab9347"
        },
        "downloads": 0,
        "filename": "mongoengine_goodjson-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4208707f0540ddffb05b2e54af277b50",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28941,
        "upload_time": "2017-06-05T07:29:05",
        "url": "https://files.pythonhosted.org/packages/03/ef/ac179ffbfee33cfa9384c77e7802e170fbbc9d9aa9b6fbf5d610f48f00ac/mongoengine_goodjson-1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4208707f0540ddffb05b2e54af277b50",
        "sha256": "1409250415e62caf3e1c4d793b328e3d6a2021d782bee28b2888289a1aab9347"
      },
      "downloads": 0,
      "filename": "mongoengine_goodjson-1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4208707f0540ddffb05b2e54af277b50",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 28941,
      "upload_time": "2017-06-05T07:29:05",
      "url": "https://files.pythonhosted.org/packages/03/ef/ac179ffbfee33cfa9384c77e7802e170fbbc9d9aa9b6fbf5d610f48f00ac/mongoengine_goodjson-1.1.tar.gz"
    }
  ]
}