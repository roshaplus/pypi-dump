{
  "info": {
    "author": "M.J.D. Rushton",
    "author_email": "m.j.d.rushton@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Common Public License",
      "Programming Language :: C++",
      "Programming Language :: Cython",
      "Programming Language :: Python :: 2.7",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "cexprtk: Mathematical Expression Parsing and Evaluation in Python\n=================================================================\n\n``cexprtk`` is a cython wrapper around the \"`C++ Mathematical Expression\nToolkit Library\n(ExprTk) <http://www.partow.net/programming/exprtk/index.html>`__\\ \" by\nArash Partow. Using ``cexprtk`` a powerful mathematical expression\nengine can be incorporated into your python project.\n\nTable of Contents\n-----------------\n\n[TOC]\n\nInstallation\n------------\n\nThe latest version of ``cexprtk`` can be installed using\n`pip <http://www.pip-installer.org/en/latest/index.html>`__ :\n\n.. code:: bash\n\n        $ pip install cexprtk\n\n**Note:** Installation requires a compatible C++ compiler to be\ninstalled.\n\nUsage\n-----\n\nThe following examples show the major features of ``cexprtk``.\n\nExample: Evaluate a simple equation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following shows how the arithmetic expression ``(5+5) * 23`` can be\nevaluated:\n\n.. code:: python\n\n        >>> import cexprtk\n        >>> cexprtk.evaluate_expression(\"(5+5) * 23\", {})\n        230.0\n\nExample: Using Variables\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nVariables can be used within expressions by passing a dictionary to the\n``evaluate_expression`` function. This maps variable names to their\nvalues. The expression from the previous example can be re-calculated\nusing variable values:\n\n.. code:: python\n\n        >>> import cexprtk\n        >>> cexprtk.evaluate_expression(\"(A+B) * C\", {\"A\" : 5, \"B\" : 5, \"C\" : 23})\n        230.0\n\nExample: Re-using expressions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen using the ``evaluate_expression()`` function, the mathematical\nexpression is parsed, evaluated and then immediately thrown away. This\nexample shows how to re-use an ``Expression`` for multiple evaluations.\n\n-  An expression will be defined to calculate the circumference of\n   circle, this will then be re-used to calculate the value for several\n   different radii.\n-  First a ``Symbol_Table`` is created containing a variable ``r`` (for\n   radius), it is also populated with some useful constants such as \u03c0.\n\n   .. code:: python\n\n           >>> import cexprtk\n           >>> st = cexprtk.Symbol_Table({'r' : 1.0}, add_constants= True)\n\n-  Now an instance of ``Expression`` is created, defining our function:\n\n   .. code:: python\n\n           >>> circumference = cexprtk.Expression('2*pi*r', st)\n\n-  The ``Symbol_Table`` was initialised with ``r=1``, the expression can\n   be evaluated for this radius simply by calling it:\n\n   .. code:: python\n\n           >>> circumference()\n           6.283185307179586\n\n-  Now update the radius to a value of 3.0 using the dictionary like\n   object returned by the ``Symbol_Table``'s ``.variables`` property:\n\n   .. code:: python\n\n           >>> st.variables['r'] = 3.0\n           >>> circumference()\n           18.84955592153876\n\nExample: Defining an unknown symbol resolver\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA callback can be passed to the ``Expression`` constructor through the\n``unknown_symbol_resolver_callback`` parameter. This callback is invoked\nduring expression parsing when a variable or constant is encountered\nthat isn't in the ``Symbol_Table`` associated with the ``Expression``.\n\nThe callback can be used to provide some logic that leads to a new\nsymbol being registered or for an error condition to be flagged.\n\n**The Problem:** The following example shows a potential use for the\nsymbol resolver:\n\n-  An expression contains variables of the form ``m_VARIABLENAME`` and\n   ``f_VARIABLENAME``.\n-  ``m_`` or ``f_`` prefix the actual variable name (perhaps indicating\n   gender).\n-  ``VARIABLENAME`` should be used to look up the desired value in a\n   dictionary.\n-  The dictionary value of ``VARIABLENAME`` should then be weighted\n   according to its prefix:\n\n   -  ``m_`` variables should be multiplied by 0.8.\n   -  ``f_`` variables should be multiplied by 1.1.\n\n**The Solution:**\n\n-  First the ``VARIABLENAME`` dictionary is defined:\n\n   .. code:: python\n\n       variable_values = { 'county_a' : 82, 'county_b' : 76}\n\n-  Now the callback is defined. This takes a single argument, *symbol*,\n   which gives the name of the missing variable found in the expression:\n\n   .. code:: python\n\n\n       def callback(symbol):\n           # Tokenize the symbol name into prefix and VARIABLENAME components.\n           prefix,variablename = symbol.split(\"_\", 1)\n           # Get the value for this VARIABLENAME from the variable_values dict\n           value = variable_values[variablename]\n           # Find the correct weight for the prefix\n           if prefix == 'm':\n               weight = 0.8\n           elif prefix == 'f':\n               weight = 1.1\n           else:\n               # Flag an error condition if prefix not found.\n               errormsg = \"Unknown prefix \"+ str(prefix)\n               return (False, cexprtk.USRSymbolType.VARIABLE, 0.0, errormsg)\n           # Apply the weight to the \n           value *= weight\n           # Indicate success and return value to cexprtk\n           return (True, cexprtk.USRSymbolType.VARIABLE, value, \"\")\n\n-  All that remains is to register the callback with an instance of\n   ``Expression`` and to evaluate an expression. The expression to be\n   evaluated is:\n\n   -  ``(m_county_a - f_county_b)``\n   -  This should give a value of ``(0.8*82) - (1.1*76) = -18``\n\n   .. code:: python\n\n           >>> st = cexprtk.Symbol_Table({})\n           >>> e = cexprtk.Expression(\"(m_county_a - f_county_b)\", st, callback)\n           >>> e.value()\n           -18.0\n\n--------------\n\nAPI Reference\n-------------\n\nFor information about expressions supported by ``cexprtk`` please refer\nto the original C++\n`ExprTK <http://www.partow.net/programming/exprtk/index.html>`__\ndocumentation:\n\nClass Reference\n~~~~~~~~~~~~~~~\n\nclass Expression:\n^^^^^^^^^^^^^^^^^\n\nClass representing mathematical expression.\n\n-  Following instantiation, the expression is evaluated calling the\n   expression or invoking its ``value()`` method.\n-  The variable values used by the Expression can be modified through\n   the ``variables`` property of the ``Symbol_Table`` instance\n   associated with the expression. The ``Symbol_Table`` can be accessed\n   using the ``Expression.symbol_table`` property.\n\nDefining unknown symbol-resolver:\n                                 \n\nThe ``unknown_symbol_resolver_callback`` argument to the ``Expression``\nconstructor accepts a callable which is invoked whenever a symbol (i.e.\na variable or a constant), is not found in the ``Symbol_Table`` given by\nthe ``symbol_table`` argument. The ``unknown_symbol_resolver_callback``\ncan be used to provide a value for the missing value or to set an error\ncondition.\n\nThe callable should have following signature:\n\n.. code:: python\n\n        def callback(symbol_name):\n            ...\n\nWhere ``symbol_name`` is a string identifying the missing symbol.\n\nThe callable should return a tuple of the form:\n\n.. code:: python\n\n        (HANDLED_FLAG, USR_SYMBOL_TYPE, SYMBOL_VALUE, ERROR_STRING)\n\nWhere:\n\n-  ``HANDLED_FLAG`` is a boolean:\n\n   -  ``True`` indicates that callback was able handle the error\n      condition and that ``SYMBOL_VALUE`` should be used for the missing\n      symbol.\n   -  ``False``, flags and error condition, the reason why the unknown\n      symbol could not be resolved by the callback is described by\n      ``ERROR_STRING``.\n\n-  ``USR_SYMBOL_TYPE`` gives type of symbol (constant or variable) that\n   should be added to the ``symbol_table`` when unkown symbol is\n   resolved. Value should be one of those given in\n   ``cexprtk.USRSymbolType``. e.g.\n\n   -  ``cexprtk.USRSymbolType.VARIABLE``\n   -  ``cexprtk.USRSymbolType.CONSTANT``\n\n-  ``SYMBOL_VALUE``, floating point value that should be used when\n   resolving missing symbol.\n-  ``ERROR_STRING`` when ``HANDLED_FLAG`` is ``False`` this can be used\n   to describe error condition.\n\ndef **init**\\ (self, *expression*, *symbol\\_table*, *unknown\\_symbol\\_resolver\\_callback* = None):\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\nInstantiate ``Expression`` from a text string giving formula and\n``Symbol_Table`` instance encapsulating variables and constants used by\nthe expression.\n\n**Parameters:**\n\n-  **expression** (*str*) String giving expression to be calculated.\n-  **symbol\\_table** (*Symbol\\_Table*) Object defining variables and\n   constants.\n-  **unknown\\_symbol\\_resolver\\_callback** (*callable*) See description\n   above.\n\ndef value(self):\n''''''''''''''''\n\nEvaluate expression using variable values currently set within\nassociated ``Symbol_Table``\n\n**Returns:**\n\n-  (*float*) Value resulting from evaluation of expression.\n\ndef **call**\\ (self):\n'''''''''''''''''''''\n\nEquivalent to calling ``value()`` method.\n\n**Returns:**\n\n-  (*float*) Value resulting from evaluation of expression.\n\nsymbol\\_table\n'''''''''''''\n\nRead only property that returns ``Symbol_Table`` instance associated\nwith this expression.\n\n**Returns:**\n\n-  (*Symbol\\_Table*) ``Symbol_Table`` associated with this\n   ``Expression``.\n\n--------------\n\nclass Symbol\\_Table:\n^^^^^^^^^^^^^^^^^^^^\n\nClass for providing variable and constant values to ``Expression``\ninstances.\n\ndef **init**\\ (self, *variables*, *constants* = {}, *add\\_constants* = False):\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\nInstantiate ``Symbol_Table`` defining variables and constants for use\nwith ``Expression`` class.\n\n**Example:**\n\n-  To instantiate a ``Symbol_Table`` with:\n\n   -  ``x = 1``\n   -  ``y = 5``\n   -  define a constant ``k = 1.3806488e-23``\n\n-  The following code would be used:\n\n   .. code:: python\n\n           st = cexprtk.Symbol_Table({'x' : 1, 'y' : 5}, {'k'= 1.3806488e-23})\n\n**Parameters:**\n\n-  **variables** (*dict*) Mapping between variable name and initial\n   variable value.\n-  **constants** (*dict*) Dictionary containing values that should be\n   added to ``Symbol_Table`` as constants. These can be used a variables\n   within expressions but their values cannot be updated following\n   ``Symbol_Table`` instantiation.\n-  **add\\_constants** (*bool*) If ``True``, add the standard constants\n   ``pi``, ``inf``, ``epsilon`` to the 'constants' dictionary before\n   populating the ``Symbol_Table``\n\nvariables\n'''''''''\n\nReturns dictionary like object containing variable values.\n``Symbol_Table`` values can be updated through this object.\n\n**Example:**\n\n.. code:: python\n\n        >>> import cexprtk\n        >>> st = cexprtk.Symbol_Table({'x' : 5, 'y' : 5})\n        >>> expression = cexprtk.Expression('x+y', st)\n        >>> expression()\n        10.0\n\nUpdate the value of ``x`` in the symbol table and re-evaluate the\nexpression:\n\n.. code:: python\n\n        >>> expression.symbol_table.variables['x'] = 11.0\n        >>> expression()\n        16.0\n\n**Returns:**\n\n-  Dictionary like giving variables stored in this ``Symbol_Table``.\n   Keys are variables names and these map to variable values.\n\nconstants\n'''''''''\n\nProperty giving constants stored in this ``Symbol_Table``.\n\n**Returns:**\n\n-  Read-only dictionary like object mapping constant names stored in\n   ``Symbol_Table`` to their values.\n\n--------------\n\nclass USRSymbolType:\n^^^^^^^^^^^^^^^^^^^^\n\nDefines constant values used to determine symbol type returned by\n``unknown_symbol_resolver_callback`` (see ``Expression`` constructor\ndocumentation for more).\n\nVARIABLE\n''''''''\n\nValue that should be returned by an ``unknown_symbol_resolver_callback``\nto define a variable.\n\nCONSTANT\n''''''''\n\nValue that should be returned by an ``unknown_symbol_resolver_callback``\nto define a constant.\n\n--------------\n\nUtility Functions\n~~~~~~~~~~~~~~~~~\n\ndef check\\_expression (*expression*)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCheck that expression can be parsed. If successful do nothing, if\nunsuccessful raise ``ParseException``.\n\n**Parameters:**\n\n-  *expression* (*str*) Formula to be evaluated\n\n**Raises:**\n\n-  ``ParseException``: If expression is invalid.\n\ndef evaluate\\_expression (*expression*, *variables*)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nEvaluate a mathematical formula using the exprtk library and return\nresult.\n\nFor more information about supported functions and syntax see the\n`exprtk C++ library\nwebsite <http://www.partow.net/programming/exprtk/index.html>`__.\n\n**Parameters:**\n\n-  **expression** (*str*) Expression to be evaluated.\n-  **variables** (*dict*) Dictionary containing variable name, variable\n   value pairs to be used in expression.\n\n**Returns:**\n\n-  (*float*): Evaluated expression\n\n**Raises:**\n\n-  ``ParseException``: if *expression* is invalid.\n\n--------------\n\nAuthors\n-------\n\nCython wrapper by Michael Rushton (m.j.d.rushton@gmail.com), although\nmost credit should go to Arash Partow for creating the underlying\n`ExprTK <http://www.partow.net/programming/exprtk/index.html>`__\nlibrary.\n\nLicense\n-------\n\n``cexprtk`` is released under the same terms as the\n`ExprTK <http://www.partow.net/programming/exprtk/index.html>`__ library\nthe `Common Public License Version\n1.0 <http://opensource.org/licenses/cpl1.0.php>`__ (CPL).",
    "docs_url": null,
    "download_url": "https://bitbucket.org/mjdr/cexprtk/get/0.2.0.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/mjdr/cexprtk",
    "keywords": "math,formula,parser,arithmetic,evaluate",
    "license": "CPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "cexprtk",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/cexprtk/",
    "release_url": "https://pypi.org/project/cexprtk/0.2.0/",
    "requires_python": null,
    "summary": "Mathematical expression parser: cython wrapper around the 'C++ Mathematical Expression Toolkit Library'",
    "version": "0.2.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6cc45154f17b717fc35ac8f12c2ecce8",
          "sha256": "de24ce29ad21c2f25f6620aa422266acda3d8a35522650c53d6b7d0fc99d6527"
        },
        "downloads": 2404,
        "filename": "cexprtk-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6cc45154f17b717fc35ac8f12c2ecce8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 95467,
        "upload_time": "2013-12-30T19:25:11",
        "url": "https://files.pythonhosted.org/packages/04/b8/964bcbd8b8121ca1517d51b70acff29c7be927252572bd0300546f92a67c/cexprtk-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2af48b6d23d6f7aa7235d54a1dfe34d5",
          "sha256": "ecde9e479d14e995d0031bc937e9b577f567c079e8f356b097dde1a9e33c8c9c"
        },
        "downloads": 2191,
        "filename": "cexprtk-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2af48b6d23d6f7aa7235d54a1dfe34d5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 95901,
        "upload_time": "2013-12-30T21:37:26",
        "url": "https://files.pythonhosted.org/packages/de/5e/652235c338873364edc70001696465fa636b02d678b1c073daf354caf1c7/cexprtk-0.1.1.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ac892dacdcfcc340eec80d3d78a98733",
          "sha256": "5dc547fa7bb891722ebae5c81649902ee239e0b574c77e796fa36069868a663d"
        },
        "downloads": 1362,
        "filename": "cexprtk-0.2.0-cp27-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "ac892dacdcfcc340eec80d3d78a98733",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 442221,
        "upload_time": "2014-12-30T10:11:02",
        "url": "https://files.pythonhosted.org/packages/8f/57/cedc7673a0bf45fd132bad697568839f280f8add3ba3ae712f2bf5e97f33/cexprtk-0.2.0-cp27-none-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "fadaba47c88f6b1d19d9601cda56fc39",
          "sha256": "f7bef3817688dfcf64f6f3304151362a14a562c9ac6d9c521139cb14973ea588"
        },
        "downloads": 1281,
        "filename": "cexprtk-0.2.0-cp34-none-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "fadaba47c88f6b1d19d9601cda56fc39",
        "packagetype": "bdist_wheel",
        "python_version": "3.4",
        "size": 448345,
        "upload_time": "2014-12-30T10:11:27",
        "url": "https://files.pythonhosted.org/packages/aa/62/4f3d7f88fbd743ff87bc46b73607058f655032ff32fa4b47d7c070f62428/cexprtk-0.2.0-cp34-none-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "672c97ff9f468adf309d8bf2cdec9e1a",
          "sha256": "fb3d810575cc34627ecdb6c226996502eabf396f0e5da61071767ebce5f5d34b"
        },
        "downloads": 1986,
        "filename": "cexprtk-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "672c97ff9f468adf309d8bf2cdec9e1a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 155893,
        "upload_time": "2014-06-23T23:48:56",
        "url": "https://files.pythonhosted.org/packages/17/c6/6f1592050f93bee361cb538ce6d24e76c3cdabaeceb1311bdb9008949601/cexprtk-0.2.0.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6257c40cd68eca50c6f5d918001f864d",
          "sha256": "c60dc94b48b132f31d8d2fc218b1befdfaf0e0e283ba0c692951b9916684233e"
        },
        "downloads": 1295,
        "filename": "cexprtk-0.2.0.win-amd64-py2.7.exe",
        "has_sig": false,
        "md5_digest": "6257c40cd68eca50c6f5d918001f864d",
        "packagetype": "bdist_wininst",
        "python_version": "2.7",
        "size": 675269,
        "upload_time": "2014-12-30T10:12:48",
        "url": "https://files.pythonhosted.org/packages/67/59/6272969304d21ac1989182826a09f178294b6e1b42bb4964533ddec37666/cexprtk-0.2.0.win-amd64-py2.7.exe"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e028ab360f5f3b9eb45a7d653951c62d",
          "sha256": "be5314ba36b9d2eceaf15e914bd5f4cf03deb2d1439c097df584664ab7172d39"
        },
        "downloads": 1289,
        "filename": "cexprtk-0.2.0.win-amd64-py2.7.msi",
        "has_sig": false,
        "md5_digest": "e028ab360f5f3b9eb45a7d653951c62d",
        "packagetype": "bdist_msi",
        "python_version": "2.7",
        "size": 589824,
        "upload_time": "2014-12-30T10:13:48",
        "url": "https://files.pythonhosted.org/packages/ff/6e/a4e8c1c0bd8c9a172676029f9939c069e713d4fa15a8c8c43eb641e86f51/cexprtk-0.2.0.win-amd64-py2.7.msi"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e94c1d98fe89b8ad7e9be33073983818",
          "sha256": "25a0b811a92cb176a114c69cbc32538ce953103b487482a49316676e42b67ea8"
        },
        "downloads": 1268,
        "filename": "cexprtk-0.2.0.win-amd64-py3.4.exe",
        "has_sig": false,
        "md5_digest": "e94c1d98fe89b8ad7e9be33073983818",
        "packagetype": "bdist_wininst",
        "python_version": "3.4",
        "size": 679916,
        "upload_time": "2014-12-30T10:15:08",
        "url": "https://files.pythonhosted.org/packages/71/e8/4ef050d989b24a87c1a56d4f70ba2a71b797929f1c72e6452e21da4def9e/cexprtk-0.2.0.win-amd64-py3.4.exe"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "dd1746b38201114ef4ea5e18c6d1afa5",
          "sha256": "e155b13f364ca38daec8fe74c1643bf8635a00c752267ebcb86fdf30a3a99443"
        },
        "downloads": 1291,
        "filename": "cexprtk-0.2.0.win-amd64-py3.4.msi",
        "has_sig": false,
        "md5_digest": "dd1746b38201114ef4ea5e18c6d1afa5",
        "packagetype": "bdist_msi",
        "python_version": "3.4",
        "size": 532480,
        "upload_time": "2014-12-30T10:15:49",
        "url": "https://files.pythonhosted.org/packages/60/5c/09bcaaeec701c5fbc1d4fae6c220edc019054a1d324e1c8b0729b6272141/cexprtk-0.2.0.win-amd64-py3.4.msi"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ac892dacdcfcc340eec80d3d78a98733",
        "sha256": "5dc547fa7bb891722ebae5c81649902ee239e0b574c77e796fa36069868a663d"
      },
      "downloads": 1362,
      "filename": "cexprtk-0.2.0-cp27-none-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "ac892dacdcfcc340eec80d3d78a98733",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "size": 442221,
      "upload_time": "2014-12-30T10:11:02",
      "url": "https://files.pythonhosted.org/packages/8f/57/cedc7673a0bf45fd132bad697568839f280f8add3ba3ae712f2bf5e97f33/cexprtk-0.2.0-cp27-none-win_amd64.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "fadaba47c88f6b1d19d9601cda56fc39",
        "sha256": "f7bef3817688dfcf64f6f3304151362a14a562c9ac6d9c521139cb14973ea588"
      },
      "downloads": 1281,
      "filename": "cexprtk-0.2.0-cp34-none-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "fadaba47c88f6b1d19d9601cda56fc39",
      "packagetype": "bdist_wheel",
      "python_version": "3.4",
      "size": 448345,
      "upload_time": "2014-12-30T10:11:27",
      "url": "https://files.pythonhosted.org/packages/aa/62/4f3d7f88fbd743ff87bc46b73607058f655032ff32fa4b47d7c070f62428/cexprtk-0.2.0-cp34-none-win_amd64.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "672c97ff9f468adf309d8bf2cdec9e1a",
        "sha256": "fb3d810575cc34627ecdb6c226996502eabf396f0e5da61071767ebce5f5d34b"
      },
      "downloads": 1986,
      "filename": "cexprtk-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "672c97ff9f468adf309d8bf2cdec9e1a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 155893,
      "upload_time": "2014-06-23T23:48:56",
      "url": "https://files.pythonhosted.org/packages/17/c6/6f1592050f93bee361cb538ce6d24e76c3cdabaeceb1311bdb9008949601/cexprtk-0.2.0.tar.gz"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "6257c40cd68eca50c6f5d918001f864d",
        "sha256": "c60dc94b48b132f31d8d2fc218b1befdfaf0e0e283ba0c692951b9916684233e"
      },
      "downloads": 1295,
      "filename": "cexprtk-0.2.0.win-amd64-py2.7.exe",
      "has_sig": false,
      "md5_digest": "6257c40cd68eca50c6f5d918001f864d",
      "packagetype": "bdist_wininst",
      "python_version": "2.7",
      "size": 675269,
      "upload_time": "2014-12-30T10:12:48",
      "url": "https://files.pythonhosted.org/packages/67/59/6272969304d21ac1989182826a09f178294b6e1b42bb4964533ddec37666/cexprtk-0.2.0.win-amd64-py2.7.exe"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "e028ab360f5f3b9eb45a7d653951c62d",
        "sha256": "be5314ba36b9d2eceaf15e914bd5f4cf03deb2d1439c097df584664ab7172d39"
      },
      "downloads": 1289,
      "filename": "cexprtk-0.2.0.win-amd64-py2.7.msi",
      "has_sig": false,
      "md5_digest": "e028ab360f5f3b9eb45a7d653951c62d",
      "packagetype": "bdist_msi",
      "python_version": "2.7",
      "size": 589824,
      "upload_time": "2014-12-30T10:13:48",
      "url": "https://files.pythonhosted.org/packages/ff/6e/a4e8c1c0bd8c9a172676029f9939c069e713d4fa15a8c8c43eb641e86f51/cexprtk-0.2.0.win-amd64-py2.7.msi"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "e94c1d98fe89b8ad7e9be33073983818",
        "sha256": "25a0b811a92cb176a114c69cbc32538ce953103b487482a49316676e42b67ea8"
      },
      "downloads": 1268,
      "filename": "cexprtk-0.2.0.win-amd64-py3.4.exe",
      "has_sig": false,
      "md5_digest": "e94c1d98fe89b8ad7e9be33073983818",
      "packagetype": "bdist_wininst",
      "python_version": "3.4",
      "size": 679916,
      "upload_time": "2014-12-30T10:15:08",
      "url": "https://files.pythonhosted.org/packages/71/e8/4ef050d989b24a87c1a56d4f70ba2a71b797929f1c72e6452e21da4def9e/cexprtk-0.2.0.win-amd64-py3.4.exe"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "dd1746b38201114ef4ea5e18c6d1afa5",
        "sha256": "e155b13f364ca38daec8fe74c1643bf8635a00c752267ebcb86fdf30a3a99443"
      },
      "downloads": 1291,
      "filename": "cexprtk-0.2.0.win-amd64-py3.4.msi",
      "has_sig": false,
      "md5_digest": "dd1746b38201114ef4ea5e18c6d1afa5",
      "packagetype": "bdist_msi",
      "python_version": "3.4",
      "size": 532480,
      "upload_time": "2014-12-30T10:15:49",
      "url": "https://files.pythonhosted.org/packages/60/5c/09bcaaeec701c5fbc1d4fae6c220edc019054a1d324e1c8b0729b6272141/cexprtk-0.2.0.win-amd64-py3.4.msi"
    }
  ]
}