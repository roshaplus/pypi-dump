{
  "info": {
    "author": "Jakob Stemberger",
    "author_email": "yaccob@gmx.net",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 2.7"
    ],
    "description": "ytools\n======\n\nCommand-line tool for selectively dumping nodes from ``yaml`` (or\n``json``) documents in ``yaml`` or ``json`` format.\n\nFeatures\n\n\n-  Output ``yaml`` as ``json`` or ``python``\n-  Output ``json`` as ``yaml`` or ``python`` (provided that there are no\n   duplicate mapping entry in the ``json`` source)\n-  Extract particular nodes from ``yaml`` and ``json`` files.\n\n   -  If ``yaml`` is used as output format (default) the output is a\n      valid ``yaml`` document.\n\n-  Validate ``yaml`` and ``json`` documents.\n\n   -  The ``json-schema`` can be provided in ``yaml`` format as well,\n      which improves readability and writability.\n\n-  Preserve order of mapping-keys in ``yaml`` and ``json`` output.\n-  Multi-document support\n\n   -  Multiple input files\n   -  ... as well as multiple ``yaml`` documents within a file\n   -  ... and a combination of both\n\nInstallation\n\n\n``pip install ytools``\n\nDescription\n\n\n| For selecting nodes, ``ytools`` uses ``jsonpath_ng.ext``.\n| The syntax is documented at\n  https://pypi.python.org/pypi/jsonpath-ng/1.4.2.\n\n| By default (if no path is provided), complete input documents are\n  dumped in ``yaml`` format (path defaults to ``'$'``).\n| This can be used to get ``yaml`` output for ``json`` documents or vice\n  versa:\n\n-  ``python ytools.py input.json``\n   ... for converting json to yaml, or ...\n-  ``python ytools.py input.yaml -f json``\n   ... for the opposite direction.\n\n| Additionally, ``yaml`` and ``json`` documents can be validated against\n  a ``json-schema`` which may be provided in ``yaml`` or ``json``\n  format.\n| ``schema.yaml`` is a sample for ``json-schema`` in ``yaml`` format.\n\n``ytools -h``\n\n::\n\n    $ ytools -h\n    Usage: /usr/local/bin/ytools [OPTION] -p JSONPATH_EXPRESSION FILE...\n\n    Dumps data from json (or yaml) documents in yaml format. Command line wrapper\n    for jsonpath-ng.\n\n    Options:\n      -h, --help            show this help message and exit\n      -p PATH, --json-path=PATH\n                            Syntax for jsonpath expression:\n                            https://pypi.python.org/pypi/jsonpath-ng/1.4.2\n      -f OUTPUTFORMAT, --output-format=OUTPUTFORMAT\n                            Output format. Can be \"yaml\", \"json\" or \"python\".\n                            [default: yaml]\n      -y YAML_OPTIONS, --yaml-options=YAML_OPTIONS\n                            kwargs for yaml.dump (pyYaml) as yaml.mapping (for\n                            experts). [default: '{explicit_start: True,\n                            explicit_end: True, allow_unicode: True}']\n      -j JSON_OPTIONS, --json-options=JSON_OPTIONS\n                            kwargs for json.dumps as yaml.mapping (for experts).\n                            [default: '{indent: 2, encoding: utf-8}']\n      -v SCHEMA, --validate=SCHEMA\n                            Validate documents against json-schema\n      --encoding=ENCODING   Set encoding of input documents (if different from\n                            utf-8)\n\nSamples\n-------\n\nThe samples are based on the following data.\n\nSample Data\n~~~~~~~~~~~\n\nInput data\n^^^^^^^^^^\n\n``input.yaml``:\n\n.. code:: yaml\n\n    documents:\n      - title: Some document title\n        sections:\n        - title: Some section title\n          description: Some section description\n          text: Some text for some section\n          chapters:\n          - title: Some chapter title\n            description: Some chapter description\n            text: The text of some chapter\n          - title: Some other chapter title\n            description:\n            - descriptionparagraph1: Some description for other chapter\n            - descriptionparagraph2: Some description for other chapter\n            text: The text of some other chapter\n        - title: Some other section title\n          description: Some other section description\n          text: Some text for some other section\n          chapters:\n            - title: About encoding\n              description: \"Some German: \u00e4\u00f6\u00fc,\u00c4\u00d6Y,\u00df\"\n\nSchema for validating ``input.yaml``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``schema.yaml``\n\n.. code:: yaml\n\n    $schema: \"http://json-schema.org/schema#\"\n\n    definitions:\n      chapter:\n        type: object\n        properties:\n          title: {type: string}\n          description:\n            oneOf: [{type: string}, {type: array}]\n          text: {type: string}\n        additionalProperties: false\n        required: [title, description]\n      chapters:\n        type: array\n        items: {$ref: \"#/definitions/chapter\"}\n        additionalItems: false\n      section:\n        type: object\n        properties:\n          title: {type: string}\n          description: {type: string}\n          text: {type: string}\n          chapters: {$ref: \"#/definitions/chapters\"}\n        additionalProperties: false\n        required: [title, description]\n      sections:\n        type: array\n        items: {$ref: \"#/definitions/section\"}\n        additionalItems: false\n      document:\n        type: object\n        properties:\n          title: {type: string}\n          description: {type: string}\n          sections: {$ref: \"#/definitions/sections\"}\n        additionalProperties: false\n        required: [title, description]\n      documents:\n        type: array\n        items: {$ref: \"#/definitions/document\"}\n        additionalItems: false\n    type: object\n    properties:\n      documents: {$ref: \"#/definitions/documents\"}\n    additionalProperties: false\n\nOutputs\n~~~~~~~\n\nWhen not providing a jsonpath expression\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf you don't provide a jsonpath expression using the ``-p`` option\nytools uses ``'$'`` as default and therefore dumps the complete input:\n\n::\n\n    \ud83c\udfbc  ytools input.yaml\n    ---\n    documents:\n    - title: Some document title\n      description: The document's description\n      sections:\n      - title: Some section title\n        description: Some section description\n        text: Some text for some section\n        chapters:\n        - {title: Some chapter title, description: Some chapter description, text: The\n            text of some chapter}\n        - title: Some other chapter title\n          description:\n          - {descriptionparagraph1: Some description for other chapter}\n          - {descriptionparagraph2: Some description for other chapter}\n          text: The text of some other chapter\n      - title: Some other section title\n        description: Some other section description\n        text: Some text for some other section\n        chapters:\n        - {title: About encoding, description: 'Some German: \u00e4\u00f6\u00fc,\u00c4\u00d6Y,\u00df'}\n    ...\n\nOutput format ``yaml`` (default)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nWith the ``yaml`` output format by default, each match is output as a\nseparate ``yaml`` document. This way we achieve that the output is valid\n``yaml``.:\n\n::\n\n    \ud83c\udfbc  ytools -p '$..chapters[*].description' input.yaml\n    --- Some chapter description\n    ...\n\n    ---\n    - {descriptionparagraph1: Some description for other chapter}\n    - {descriptionparagraph2: Some description for other chapter}\n    ...\n\n    --- 'Some German: \u00e4\u00f6\u00fc,\u00c4\u00d6Y,\u00df'\n    ...\n\nIf you want different behavior you can set ``explicit_start`` and/or\n``explicit_end`` to ``False``. In this case the output will no longer be\nguaranteed to be valid ``yaml``:\n\n::\n\n    \ud83c\udfbc  ytools -p '$..chapters[*].description' input.yaml --yaml-options='{explicit_start: False, explicit_end: False}'\n    Some chapter description\n    ...\n\n    - {descriptionparagraph1: Some description for other chapter}\n    - {descriptionparagraph2: Some description for other chapter}\n\n    'Some German: \u00e4\u00f6\u00fc,\u00c4\u00d6Y,\u00df'\n\nOther output formats\n^^^^^^^^^^^^^^^^^^^^\n\nUnfortunately, when using the ``json`` or ``python`` output format the\nsame selection can't produce valid ``json`` or ``python`` output. That's\nbecause neither json nor python support the concept of (multiple)\ndocuments:\n\n::\n\n    \ud83c\udfbc  ytools -p '$..chapters[*].description' input.yaml -f json --json-options='{indent: 4}'\n    \"Some chapter description\"\n    [\n        {\n            \"descriptionparagraph1\": \"Some description for other chapter\"\n        },\n        {\n            \"descriptionparagraph2\": \"Some description for other chapter\"\n        }\n    ]\n    \"Some German: \\u00e4\\u00f6\\u00fc,\\u00c4\\u00d6Y,\\u00df\"\n\nThat's definitely not valid json.\n\nNeither is the following valid python:\n\n::\n\n    \ud83c\udfbc  ytools -p '$..chapters[*].description' input.yaml -f python\n    Some chapter description\n    [{'descriptionparagraph1': 'Some description for other chapter'}, {'descriptionparagraph2': 'Some description for other chapter'}]\n    Some German: \u00e4\u00f6\u00fc,\u00c4\u00d6Y,\u00df\n\nSo **if you ever want to process the output automatically please stick\nto ``yaml``**.\n\n\n",
    "docs_url": null,
    "download_url": "https://github.com/yaccob/ytools/archive/0.9.1.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ytools/ynot",
    "keywords": "yaml,json,transform,xslt,jsonpath,json-path,dump,convert,validate,schema",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ytools",
    "platform": "",
    "project_url": "https://pypi.org/project/ytools/",
    "release_url": "https://pypi.org/project/ytools/0.9.1/",
    "requires_dist": [
      "jsonschema",
      "jsonpath-ng",
      "PyYaml"
    ],
    "requires_python": "",
    "summary": "Command-line tool for selectively dumping nodes from `yaml` (or `json`) documents in `yaml` or `json` format.",
    "version": "0.9.1"
  },
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d17f447aaef14b4c63508fb044ce047d",
          "sha256": "c72c6eda0ff10c58b90e3795ef5298b5afb2410cc9c917564b51d0f08689b882"
        },
        "downloads": -1,
        "filename": "ytools-0.9.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "d17f447aaef14b4c63508fb044ce047d",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 9172,
        "upload_time": "2018-02-02T22:19:12",
        "url": "https://files.pythonhosted.org/packages/a7/df/0576a2e3d669cda8edcb43ebd3a6d905c53ff51108e3a2750de2accfd2da/ytools-0.9.0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0bab9ccd3a4675a35c453bf805564e6a",
          "sha256": "5bbd040c1938d4b674b5733b65b15ef20f8884a0609b7b135ea09eadb06eba25"
        },
        "downloads": -1,
        "filename": "ytools-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0bab9ccd3a4675a35c453bf805564e6a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10814,
        "upload_time": "2018-02-02T22:19:13",
        "url": "https://files.pythonhosted.org/packages/20/8a/37232a7e4b9ccd70878f890460b88ad3da0cb94e83ecccba5091c928de19/ytools-0.9.0.tar.gz"
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "559faacbc25daf0c458a4ba8ea1769cb",
          "sha256": "7b7c341937721cf8546caf6b2991ff1e449da45b67835edd46c255d0e17c3f92"
        },
        "downloads": -1,
        "filename": "ytools-0.9.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "559faacbc25daf0c458a4ba8ea1769cb",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 9182,
        "upload_time": "2018-02-07T22:55:54",
        "url": "https://files.pythonhosted.org/packages/78/4b/eb2ed4946bb1eee56daa0e23ee71c07b07bfc4ee96d0fb166824b1a7fe2b/ytools-0.9.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9eb8ceaf9440bad4e49b3c4ebe032a86",
          "sha256": "80d4d812e111996c99fa579a77231a41c39796d80ace679332b89633bbafa513"
        },
        "downloads": -1,
        "filename": "ytools-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9eb8ceaf9440bad4e49b3c4ebe032a86",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10795,
        "upload_time": "2018-02-07T22:55:56",
        "url": "https://files.pythonhosted.org/packages/87/75/0109a04fcab08c0ba7f0dee232d19a834e68c03e696f3bafb29de282d651/ytools-0.9.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "559faacbc25daf0c458a4ba8ea1769cb",
        "sha256": "7b7c341937721cf8546caf6b2991ff1e449da45b67835edd46c255d0e17c3f92"
      },
      "downloads": -1,
      "filename": "ytools-0.9.1-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "559faacbc25daf0c458a4ba8ea1769cb",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 9182,
      "upload_time": "2018-02-07T22:55:54",
      "url": "https://files.pythonhosted.org/packages/78/4b/eb2ed4946bb1eee56daa0e23ee71c07b07bfc4ee96d0fb166824b1a7fe2b/ytools-0.9.1-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "9eb8ceaf9440bad4e49b3c4ebe032a86",
        "sha256": "80d4d812e111996c99fa579a77231a41c39796d80ace679332b89633bbafa513"
      },
      "downloads": -1,
      "filename": "ytools-0.9.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9eb8ceaf9440bad4e49b3c4ebe032a86",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10795,
      "upload_time": "2018-02-07T22:55:56",
      "url": "https://files.pythonhosted.org/packages/87/75/0109a04fcab08c0ba7f0dee232d19a834e68c03e696f3bafb29de282d651/ytools-0.9.1.tar.gz"
    }
  ]
}