{
  "info": {
    "author": "NVRAM",
    "author_email": "nvram@users.sourceforge.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Archiving :: Packaging",
      "Topic :: Utilities"
    ],
    "description": "tarwalker\n=========\n\nSummary\n-------\n \nThis library provides two (2) classes for scanning directories and tar\narchives to easily access matching files within them.\n\n- *TarWalker* handles walking through tar archives, including\n  optionally recursively walking through tar archives contained within\n  them.\n\n- *TarDirWalker* this expands on *TarWalker* by also scanning directory\n  paths, and handling the files and tar archives found within them.\n\nThe primary difference is that *TarWalker* will throw an exception if\ngiven a directory.\n\n\nInstallation\n------------\nInstall the package using **pip**, eg:\n\n     sudo pip install tarwalker\n\nOr for a specific version:\n\n     sudo python3 -m pip install tarwalker\n\nExamples\n--------\n\nThe following is simple tool to look for a given string within files.\nFiles can be given as arguments or within tarballs, and must end with\neither '.log' (w/an optional numeric suffix) or with '.txt':\n\n.. code:: python\n\n    import re\n    import sys\n\n    from tarwalker import TarWalker\n\n    PATTERN = re.compile(r'.*\\.(txt|log(\\.\\d+)?)$')\n\n\n    def handler(fileobj, filename, arch, info, match):\n        try:\n            for line in fileobj:\n                if text in line:\n                    path = (arch + ':') if arch else ''\n                    print(\"Found in: \" + path + filename)\n                    return\n        except IOError as exc:\n            pass\n\n\n    text = sys.argv[1]\n    walker = TarWalker(file_handler=handler, name_matcher=PATTERN.match, recurse=False)\n\n    for arg in sys.argv[2:]:\n        walker.handle_path(arg)\n  \n\n\nConstructors and Callbacks\n--------------------------\n\nConstructing an instance of *TarWalker* or *TarDirWalker* take the\nsame parameters.  Note that at most one of *file_matcher* or\n*name_matcher* is allowed.\n\n* *file_handler* (required) a callable taking five (5) positional parameters:\n\n   * FILEOBJ - a readable *file* object for the file contents.\n   * FILEPATH - a *str* with the filename, either as one of:\n\n      * the file path given to *handle_path()*, or\n      * the path of a file found beneath a directory given to *handle_path()*.\n      * the file path of a file within an expanded tar archive.\n\n   * ARCHNAME - a *str* path of the tar archive name, when handling a\n     file found within a tar archive.  It will be a colon (':')\n     separated list if reading a recursive tar archive.\n\n   * FILEINFO - may be *None* or an object with the following\n     attributes.  See \"os.stat()\" for more details:\n\n      * name - the *str* name of the file,\n      * size - the size of the file in bytes,\n      * mtime - modification time, in POSIX (epoch) time,\n      * mode - the file permission bits,\n      * uid - the file owner's User ID, and\n      * gid - the file owner's Group ID\n\n   * MATCH - the value returned from the *name_matcher* or *file_matcher* call.\n\n   **NOTE:** files with a compression suffix will have the suffix\n   removed, and the file object will return decompressed contents.\n   *For example*, for \"foo.txt.gz\" FILEPATH would be \"foo.txt\" and FILEOBJ\n   would be the equivalent contents of \"foo.txt\".\n\n* *file_matcher* (optional) a callable that takes two (2) positional\n  parameters and returns true if the file should be opened and\n  passed to the *file_handler* callback:\n\n   * FILEPATH - See *FILEPATH* above.\n   * FILEINFO - See *FILEINFO* above.\n\n* *name_matcher (optional) a callable that takes one (1) positional\n  parameter  and returns true if the file be opened and passed to\n  *file_handler*:\n\n   * FILEPATH - See *file_handler*, above.\n\n* *recurse* (optional) If true, the algorithm will recurse into\n  tarballs found within other tarballs. Furthermore, if *recurse* is a\n  callable it will be called before and after opening an interior\n  tarball, with four (4) positional parameters:\n\n    * START - a bool that indicates recursion into the given tarball\n      is starting; it is False on the second call.\n    * TARNAME - name of the contained (interior) tarball, see *FILEPATH* above.\n    * ARCHIVE - the name of the containing (exterior) tarball, see *ARCHNAME* above.\n    * FILEINFO - See *FILEINFO* above.\n\n\nKnown Issues\n------------\n\n- The ARCHNAME passed to the *file_handler* callback uses ':' as a\n  separator, which is a legal filename component, so does not\n  necessarily indicate a nested archive.",
    "docs_url": null,
    "download_url": "https://github.com/n2vram/tarwalker/archive/1.0",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/n2vram/tarwalker",
    "keywords": "tarfile,gzip,streaming",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "tarwalker",
    "platform": "any",
    "project_url": "https://pypi.org/project/tarwalker/",
    "release_url": "https://pypi.org/project/tarwalker/1.0/",
    "requires_python": null,
    "summary": "A library to walk through tar archives, simplifying use by handling listing and decompression.",
    "version": "1.0"
  },
  "releases": {
    "0.1": [],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "aa3e62b670f68284cbff3eceeed95f88",
          "sha256": "b96832839689f6f9e9531b564fd1a562312aea773dc39df8b3c1d1fa873cbdf1"
        },
        "downloads": 0,
        "filename": "tarwalker-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "aa3e62b670f68284cbff3eceeed95f88",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6940,
        "upload_time": "2017-04-29T22:21:30",
        "url": "https://files.pythonhosted.org/packages/fa/d0/185b054e263889672ea0abdb18aac066d66e5c64e957e681dc788e5bce1d/tarwalker-1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "aa3e62b670f68284cbff3eceeed95f88",
        "sha256": "b96832839689f6f9e9531b564fd1a562312aea773dc39df8b3c1d1fa873cbdf1"
      },
      "downloads": 0,
      "filename": "tarwalker-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "aa3e62b670f68284cbff3eceeed95f88",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6940,
      "upload_time": "2017-04-29T22:21:30",
      "url": "https://files.pythonhosted.org/packages/fa/d0/185b054e263889672ea0abdb18aac066d66e5c64e957e681dc788e5bce1d/tarwalker-1.0.tar.gz"
    }
  ]
}