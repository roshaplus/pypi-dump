{
  "info": {
    "author": "Douglas Farinelli",
    "author_email": "douglas.farinelli@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "python-cachelock: A simple look that uses the cache as acquirer\n===============================================================\n\nThe motivation: None! It's just for fun \\ \u00f5 /\n\nHow to install:\n===============\n\n    pip install cachelock\n\nHow to use\n==========\n\n    You can use of two forms:\n\n    - Use the `Lock` class to your blocks;\n    - Or, use the decorator `once` to block your functions or tasks;\n\nWith cachelock.Lock\n===============\n\nArguments:\n\n    @cachelock.Lock(\n        key=...\n        cache=...,\n    )\n    ...\n\nYou should use the Lock class as with context:\n\n    with cachelock.Lock(key='foo'):\n        ...your code ...\n\nIf it is already locked, the LockError will be raised.\n\nWith cachelock.once\n===================\n\nArguments:\n\n    @cachelock.once(\n        key=...\n        cache=...,\n        raises_if_lock=False\n    )\n    ...\n\nWith the decorator, you can guarantee the unique execution of some function. It also allows you to configure your key according to the arguments of the function.\n\n    @celery.task\n    @cachelock.once(key='foo-{arg_a}-{arg_b}')\n    def func(arg_a, arg_b):\n        pass\n\nThat way, if it is locked, the function quits silently. You can also ask `once` to raise `LockError`:\n\n    @celery.task\n    @cachelock.once(\n        key='foo-{arg_a}-{arg_b}',\n        raise_if_lock=True\n    )\n    def func(arg_a, arg_b):\n        pass\n\nIntegrate with Django\n=====================\n\nThe cachelock checks whether django is installed, and if so, it uses django's own cache as aquirer. And if you wish, you can modify the default cache with `DEFAULT_CACHELOCK_ALIAS` configuration through django settings. The value must be an alias of some existing cache, by default it uses `default`\n\n\n*Remembering that by `default`, `cachelock` uses its own internal cache in memory if there is no integration with `django`.*\n\nCustomizing your own cache\n==========================\n\nTo work it is necessary that the implementation of the cache has the `get`, `delete` and `set` methods. Ex.:\n\n    class DummyCache:\n\n        def set(self, key, value):\n            pass\n\n        def get(self, key, default=None):\n            pass\n\n        def delete(self, key):\n            pass\n\n    cache = DummyCache()\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/douglasfarinelli/python-cachelock",
    "keywords": "lock cache once celery tasks single-execution",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cachelock",
    "platform": "any",
    "project_url": "https://pypi.org/project/cachelock/",
    "release_url": "https://pypi.org/project/cachelock/0.0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A simple look that uses the cache as acquirer",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "efcea2050e19f70b69c1b30afed9d511",
          "sha256": "7e84f15ee794453e2cf574a0871cd38e8b2d1d5b6fb55036770901c9e3d372dd"
        },
        "downloads": -1,
        "filename": "cachelock-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "efcea2050e19f70b69c1b30afed9d511",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4036,
        "upload_time": "2018-01-27T01:35:24",
        "url": "https://files.pythonhosted.org/packages/62/b5/0283c66abc4c8e75dbe5514b15daf371f70c69f4c625cd4132d5559fcb97/cachelock-0.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "efcea2050e19f70b69c1b30afed9d511",
        "sha256": "7e84f15ee794453e2cf574a0871cd38e8b2d1d5b6fb55036770901c9e3d372dd"
      },
      "downloads": -1,
      "filename": "cachelock-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "efcea2050e19f70b69c1b30afed9d511",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4036,
      "upload_time": "2018-01-27T01:35:24",
      "url": "https://files.pythonhosted.org/packages/62/b5/0283c66abc4c8e75dbe5514b15daf371f70c69f4c625cd4132d5559fcb97/cachelock-0.0.1.tar.gz"
    }
  ]
}