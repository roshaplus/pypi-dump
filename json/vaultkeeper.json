{
  "info": {
    "author": "mracter",
    "author_email": "mary@praekelt.org",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "vaultkeeper\n============\n\n.. image:: https://img.shields.io/travis/praekeltfoundation/vaultkeeper/develop.svg?style=flat-square\n    :target: https://travis-ci.org/praekeltfoundation/vaultkeeper\n\n.. image:: https://img.shields.io/codecov/c/github/praekeltfoundation/vaultkeeper/develop.svg?style=flat-square\n    :target: https://codecov.io/github/praekeltfoundation/vaultkeeper?branch=develop\n\n| \n| A Secure Introduction agent for applications consuming secrets from HashiCorp's Vault, designed to work with `vault-gatekeeper-mesos <https://github.com/ChannelMeter/vault-gatekeeper-mesos>`_. See Jeff Mitchell's `Secure Introduction at Scale <https://www.youtube.com/watch?v=R-jJXm3QGLQ>`_ for more background information on this project's architecture.\n|\n| ``vaultkeeper`` couples the lifetime of your dynamically-generated secrets to that of your consumer applications, minimising the secrets' temporal attack surface. When used with Dockered applications, ``vaultkeeper``'s design ensures that your consumer app is only launched once its secrets are fetched and ready.\n|\n| ``vaultkeeper`` supports the ``SET_ROLE`` operation `necessary to revoke dynamically-generated PostgreSQL credentials <https://github.com/jdelic/django-postgresql-setrole>`_.\n\nStatus\n-------------\n\n``vaultkeeper`` is in PoC stage, and supports the following Vault secret backends:\n\n- `PostgreSQL Databases Plugin <https://www.vaultproject.io/api/secret/databases/postgresql.html>`_\n- `RabbitMQ <https://www.vaultproject.io/api/secret/rabbitmq/index.html>`_\n- `AWS <https://www.vaultproject.io/api/secret/aws/index.html>`_\n\nPrerequisites\n-------------\n\n| To use ``vaultkeeper`` successfully, you must have:\n\n- A Vault instance configured and running.\n- A ``vault-gatekeeper-mesos`` instance configured and running with your Vault instance and Mesos instance.\n- An application that uses Vault credentials and is configured to consume ``vaultkeeper`` output, such as a Django app using `django-vaultkeeper-adaptor <https://github.com/praekeltfoundation/django-vaultkeeper-adaptor>`_.\n\nInstalling the Package\n----------------------\n\n| Clone this project and install the package from source with the following commands in the root directory of the repository:\n\n| ``$ pip install -r requirements.txt``\n|\n\n| Install the package for development with the following commands:\n\n| ``$ pip install -r requirements.txt``\n| ``$ pip install -e .[test]``\n\nConfiguration\n-------------\n\nEnvironment Variables\n~~~~~~~~~~~~~~~~~~~~~\n\n| ``VAULTKEEPER_CONFIG`` - The path to the agent configuration file for this app instance.\n| ``SECRETS_CONFIG`` - The path to the configuration file containing specifications on the secrets to fetch from Vault.\n| ``MESOS_TASK_ID`` - The Mesos task ID assigned to this task, which should be automatically populated by Mesos.\n| ``MARATHON_APP_ID`` - The Marathon app ID assigned to this task, which should be automatically populated by Marathon.\n\nvaultkeeper Configuration\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``vaultkeeper`` consumes its arguments from a JSON file:\n\n.. code-block:: JSON\n\n    {\n        \"entry_cmd\": \"sh /scripts/django-entrypoint.sh\",\n        \"credential_path\": \"\",\n        \"refresh_interval\": 30,\n        \"lease_increment\": 40,\n        \"renewal_grace\": 15\n    }\n\n| ``entry_cmd`` - The entrypoint for the application to be managed by ``vaultkeeper``. This can be an arbitrary shell command.\n| ``credential_path`` - ``vaultkeeper``'s output location for fetched credentials.\n| ``refresh_interval`` - Interval (in seconds) after which to renew all leases.\n| ``lease_increment`` - Increment (in seconds) by which to extend a lease if it is due for renewal.\n| ``renewal_grace`` - Time (in seconds) before a lease's expiry under which to renew the lease.\n\nsecrets Configuration\n~~~~~~~~~~~~~~~~~~~~~\n\n| ``vaultkeeper`` reads in a specification for the secrets it should fetch from Vault in JSON.\n|\n| An example secret file containing PostgreSQL and RabbitMQ credentials is shown below:\n|\n\n.. code-block:: JSON\n\n    [{\n            \"id\": \"default\",\n            \"backend\": \"postgresql\",\n            \"endpoint\": \"0.0.0.0:5432/mydb\",\n            \"vault_path\": \"database/creds/psql-rw\",\n            \"schema\": \"public\",\n            \"policy\": \"psql-rw\",\n            \"set_role\": \"app_owner\",\n        },\n        {\n            \"id\": \"broker1\",\n            \"backend\": \"rabbitmq\",\n            \"endpoint\": \"0.0.0.0:5672/myvhost\",\n            \"vault_path\": \"/rabbitmq/creds/ampq-worker\",\n            \"vhost\": \"myvhost\",\n            \"policy\": \"ampq-worker\"\n    }]\n\nCommon base parameters in the secrets configuration file:\n\n| ``id`` - The logical identifier for this secret. Identifiers must be unique within each consumer instance.\n| ``backend`` - The Vault secret backend of this secret.\n| ``endpoint`` - The endpoint for the resource. This should be a socket address with the applicable namespace (ie. vhost, database name) appended.\n| ``vault_path`` - The Vault path from which the secret should be read.\n| ``policy`` - The resource policy, as designated on Vault, attached to this secret.\n\nDeployment\n----------\n\n| ``vaultkeeper`` outputs secrets as JSON. Your application needs to be able to parse and consume this output. For Django applications, ``django-vaultkeeper-adaptor`` is recommended.\n|\n| Supply the ``vaultkeeper`` configuration file with the entrypoint for the application you wish to manage. Ensure that your consumer application knows where ``vaultkeeper``'s secret output will be stored.\n|\n| Thereafter, instead of running your application's conventional entrypoint script, run ``vaultkeeper`` instead:\n\n| ``$ vaultkeeper``\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/praekeltfoundation/vaultkeeper",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vaultkeeper",
    "platform": "",
    "project_url": "https://pypi.org/project/vaultkeeper/",
    "release_url": "https://pypi.org/project/vaultkeeper/0.0.2/",
    "requires_dist": [
      "responses; extra == 'test'",
      "pytest-cov; extra == 'test'",
      "pytest (>=3.0.0); extra == 'test'",
      "subprocess32",
      "requests",
      "hvac (>=0.2.17)"
    ],
    "requires_python": "",
    "summary": "An agent that works with vault-gatekeeper-mesos to fetch and renew Vault credentials.",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1f601988ed58a039904750a8e4b13d63",
          "sha256": "2101ff3fdec5aaf085a004b60dbbcb14614b61fd3a1835059ebea7340f94cb01"
        },
        "downloads": 0,
        "filename": "vaultkeeper-0.0.1-py2.7.egg",
        "has_sig": false,
        "md5_digest": "1f601988ed58a039904750a8e4b13d63",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 26582,
        "upload_time": "2017-09-19T08:46:24",
        "url": "https://files.pythonhosted.org/packages/11/3c/3fc392b80277ca29b41185ed768ebf8295a3d95981469e8dabe3e1bde76d/vaultkeeper-0.0.1-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0892a4003d0dbd7a5dec78bb83cb2121",
          "sha256": "f727ae53fd47e4b76d1afc2caff30ec0b6f9ad0ea09af32705cdea0993c32c56"
        },
        "downloads": 0,
        "filename": "vaultkeeper-0.0.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "0892a4003d0dbd7a5dec78bb83cb2121",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 17524,
        "upload_time": "2017-09-19T08:46:23",
        "url": "https://files.pythonhosted.org/packages/a1/da/3640e3a087077ff49719a6c5766299a8554bfbd61da7656aa7b349e164ea/vaultkeeper-0.0.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e2006cb47dc4b8c9cf99ed025bc8736f",
          "sha256": "6d10cb6304d4f79155d8ab65e2967dd50d244810d1d052ea14d0b6be9b226b70"
        },
        "downloads": 0,
        "filename": "vaultkeeper-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e2006cb47dc4b8c9cf99ed025bc8736f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12017,
        "upload_time": "2017-09-19T08:46:29",
        "url": "https://files.pythonhosted.org/packages/71/f4/8b0226404e56c2df71c13c709ee1441e0e9e2fbdc4e2d75a7e96011f3eb2/vaultkeeper-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5ba5d38cd13405633c9a94520dab43bd",
          "sha256": "40a5f99775206046555762098f320052312f00b3ae3925df1927f50a867b7621"
        },
        "downloads": 0,
        "filename": "vaultkeeper-0.0.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ba5d38cd13405633c9a94520dab43bd",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 17084,
        "upload_time": "2017-09-19T13:24:06",
        "url": "https://files.pythonhosted.org/packages/31/ec/abe25292955f06a51678dd18c6196974b2745215706790fb0a503996b352/vaultkeeper-0.0.2-py2-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5ba5d38cd13405633c9a94520dab43bd",
        "sha256": "40a5f99775206046555762098f320052312f00b3ae3925df1927f50a867b7621"
      },
      "downloads": 0,
      "filename": "vaultkeeper-0.0.2-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "5ba5d38cd13405633c9a94520dab43bd",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 17084,
      "upload_time": "2017-09-19T13:24:06",
      "url": "https://files.pythonhosted.org/packages/31/ec/abe25292955f06a51678dd18c6196974b2745215706790fb0a503996b352/vaultkeeper-0.0.2-py2-none-any.whl"
    }
  ]
}