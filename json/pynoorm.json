{
  "info": {
    "author": "JL Peyret",
    "author_email": "jpeyret@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Database :: Front-Ends"
    ],
    "description": "Use Python with or without an ORM.\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPyNoORM consists of several very loosely-coupled classes that facilitate the use of Python in a web or SQL\ncontext without having to rely on an ORM.  Working with an ORM is entirely possible, in fact, it's used with\nthe Django ORM and SQLAlchemy in an application that interfaces with Oracle, Microsoft SQL Server and PostgreSQL all at the same time.\n\nFocus is on:\n\n - simplicity for the user\n - support for databases that are not under \"controlled\" by the Python application or may be read-only for it.\n - performance\n\n+------------------------+-----------------------------------------------------------------------+\n| Class                  | Role                                                                  |\n+========================+=======================================================================+\n| Binder                 | abstract SQL query binding                                            |\n+------------------------+-----------------------------------------------------------------------+\n| Linker                 | join objects together                                                 |\n+------------------------+-----------------------------------------------------------------------+\n| TemplateGenerator      | generate Django Templates dynamically from query results, loosely     |\n| *(to be added)*        | inspired by Django Tables 2                                           |\n+------------------------+-----------------------------------------------------------------------+\n\n\nThe Binder class\n================\n\nA Binder support easier raw SQL by abstracting differences in the underlying database's bind variable syntax and also substituting bind variables from a list of arguments, using dict, then attribute lookup.\n\nUsing native database binds also helps to protect you against SQL injection attacks.\n\nsupported:  PostgreSQL, sqlite3, Oracle, MySQL, SQL Server\n\nBasic Use\n---------\n\nSimple **sqlite3** example::\n\n    from pynoorm.binder import Binder\n    binder = Binder.factory(\"qmark\")\n\n    query, parameters = binder(\"select * from orders where custid = %(custid)s\", dict(custid=\"ACME\"), binder)\n\n``query`` and ``parameters`` are now in the sqlite3/qmark format::\n\n\t>>> print(query)\n\tselect * from orders where custid = ?\n\t>>> print(parameters)\n\t('ACME',)\n\nOracle, with mutiple parameters ::\n\n    import cx_Oracle\n    binder_ora = Binder.factory(cx_Oracle.paramstyle)\n\n    #just for test... assign a custid for attribute lookup\n    binder_ora.custid = \"AMAZON\"\n\n    tqry = \"select * from orders where custid = %(custid)s and has_shipped = %(shipped)s\"\n    query, parameters = binder_ora(tqry, binder_ora, dict(custid=\"ACME\", shipped=1))\n\n    >>> print(query)\n    select * from orders where custid = :custid and has_shipped = :shipped\n    >>> print(parameters)\n    {'shipped': 1, 'custid': 'AMAZON'}\n\n\n\nFeatures\n--------\n\n* adjust query to support database parameter style\n* find and prepare bind parameters from `*args`.\n\n\n\nThe Linker class\n============\n\nA Linker allows you to join objects or dictionaries without the need for an ORM.  You can think of it as performing `parent-child` linking, but it uses `left-right` instead as a more neutral terminology instead.\n\nBasic use \n---------\n\nSample data, in dictionaries: ::\n\n    customers = [\n        dict(id=1, xref=1),\n        dict(id=2, xref=2),\n    ]\n\n    orders = [\n        dict(custid=1, xref=1, orderid=11),\n        dict(custid=1, xref=1, orderid=12),\n        dict(custid=2, xref=2, orderid=21),\n        dict(custid=2, xref=2, orderid=22),\n    ]\n\nCreate a linker, then a lookup dictionary for the left side.  Finally, link the left and right side. ::\n\n    linker = Linker(key_left=\"id\")\n    lookup = linker.dict_from_list(customers)\n    linker.link(lookup, orders, attrname_on_left=\"orders\", key_right=\"custid\")\n\n\nThe customers now have an `orders` list:  ::\n\n    [ { 'id': 1,\n        'orders': [ { 'custid': 1, 'orderid': 11, 'xref': 1},\n                    { 'custid': 1, 'orderid': 12, 'xref': 1}],\n        'xref': 1},\n      { 'id': 2,\n        'orders': [ { 'custid': 2, 'orderid': 21, 'xref': 2},\n                    { 'custid': 2, 'orderid': 22, 'xref': 2}],\n        'xref': 2}]\n\nFeatures\n--------\n    \n    * supports objects or dictionaries\n    * takes basic Python objects so can join across different databases, allowing for example tagging of objects in a read-only database\n    * allows compound field keys and aliasing\n    * orphans, on the left or the right, can be initialized with empty attribute values.\n\n\nCredits\n---------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.1.0 (2016-02-17)\n------------------\n\n* First release on github.\n\n0.1.1 (2016-02-22)\n------------------\n\n* Registered on PyPI\n\n0.2.0 (2016-04-12)\n------------------\n\n* Added support for Python 3.3+ and MySQL\n\n0.3.0 (2017-09-06)\n------------------\n\n* Added SQL Server support\n* Added Linker class to support object cross-referencing",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jpeyret/pynoorm",
    "keywords": "sql database multiplatform",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pynoorm",
    "platform": "",
    "project_url": "https://pypi.org/project/pynoorm/",
    "release_url": "https://pypi.org/project/pynoorm/0.3.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Use Python with or without an ORM.",
    "version": "0.3.0"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b869e99cdc2307a4f8529eafea917e34",
          "sha256": "f02e7fb458de4a51303f1ed976b4a7a8f4f5226eb08bbf83e5b5d42043f50e5b"
        },
        "downloads": 441,
        "filename": "pynoorm-0.1.1.macosx-10.9-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "b869e99cdc2307a4f8529eafea917e34",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5968,
        "upload_time": "2016-02-23T04:35:21",
        "url": "https://files.pythonhosted.org/packages/81/01/8f8b31d62158c3b3f4cff8c181631d4e236097358b62792930981ba1b6e8/pynoorm-0.1.1.macosx-10.9-x86_64.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "cfdfb3287e53b0460e8b1c65fbcfc320",
          "sha256": "918b1cd1605a9d162e85f6df4a8ca3e765eb6f8bffe53133f5f89b137bf52574"
        },
        "downloads": 117,
        "filename": "pynoorm-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "cfdfb3287e53b0460e8b1c65fbcfc320",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18617,
        "upload_time": "2016-02-23T04:35:27",
        "url": "https://files.pythonhosted.org/packages/a7/d9/847cdeb6bfe2bdab983c41858450efd8ce1038d39e9bc37e479ab52be09c/pynoorm-0.1.1.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4f1b701bd2bbb91d40be420e043e9248",
          "sha256": "771d15e0c0ecfd82bfbb0e8865a0b84f3defd15f967a571304432c4359193e55"
        },
        "downloads": 135,
        "filename": "pynoorm-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4f1b701bd2bbb91d40be420e043e9248",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19146,
        "upload_time": "2016-04-13T00:47:27",
        "url": "https://files.pythonhosted.org/packages/9b/87/f24a8c37f35b41c2a8b3bfd96422c36f9d75a7ea10b1bead60cbbdafe798/pynoorm-0.2.0.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fd0df032e496a00d8dea3f4b6902639c",
          "sha256": "cb8216b2da88609ec754ea512fc7cb58cf21a9e57ca44162ba220f65e629824f"
        },
        "downloads": 0,
        "filename": "pynoorm-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fd0df032e496a00d8dea3f4b6902639c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38211,
        "upload_time": "2017-09-07T06:04:05",
        "url": "https://files.pythonhosted.org/packages/fc/ad/a4840f0664eb3ab32eb4e7cf3911ce617758d547f614cdc8d380aba0031c/pynoorm-0.3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "fd0df032e496a00d8dea3f4b6902639c",
        "sha256": "cb8216b2da88609ec754ea512fc7cb58cf21a9e57ca44162ba220f65e629824f"
      },
      "downloads": 0,
      "filename": "pynoorm-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "fd0df032e496a00d8dea3f4b6902639c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 38211,
      "upload_time": "2017-09-07T06:04:05",
      "url": "https://files.pythonhosted.org/packages/fc/ad/a4840f0664eb3ab32eb4e7cf3911ce617758d547f614cdc8d380aba0031c/pynoorm-0.3.0.tar.gz"
    }
  ]
}