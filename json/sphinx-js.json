{
  "info": {
    "author": "Erik Rose",
    "author_email": "erikrose@grinchcentral.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Documentation :: Sphinx",
      "Topic :: Software Development :: Documentation"
    ],
    "description": "=========\nsphinx-js\n=========\n\nWhy\n===\n\nWhen you write a JavaScript library, how do you explain it to people? If it's a small project in a domain your users are familiar with, JSDoc's alphabetical list of routines might suffice. But what about larger projects? How can you intersperse prose with your API docs without having to copy and paste things?\n\nsphinx-js lets you use the industry-leading `Sphinx <http://sphinx-doc.org/>`_ documentation tool with JS projects. It provides a handful of directives, patterned after the Python-centric `autodoc <www.sphinx-doc.org/en/latest/ext/autodoc.html>`_ ones, for pulling JSDoc-formatted documentation into reStructuredText pages. And, because you can keep using JSDoc in your code, you remain compatible with the rest of your JS tooling, like Google's Closure Compiler.\n\nSetup\n=====\n\n1. Install JSDoc using npm. ``jsdoc`` must be on your ``$PATH``, so you might want to ``npm install -g jsdoc``. We're known to work with jsdoc 3.4.3.\n2. `Install Sphinx <http://www.sphinx-doc.org/en/stable/tutorial.html#autodoc>`_.\n3. Make a documentation folder in your project by running ``sphinx-quickstart``.\n4. In the generated Sphinx conf.py file, add ``sphinx_js`` to ``extensions``.\n5. Also in conf.py, add ``js_source_path = '../somewhere/else'`` on a line by itself. This means the root of your JS source tree is at that path, relative to the conf.py file. The default is ``../``, which works well when there is a ``docs`` folder at the root of your project and your source code lives directly inside the root.\n6. If you have special jsdoc configuration, add ``jsdoc_config_path = '../conf.json'`` (for example) to conf.py as well.\n\nUse\n===\n\nIn short, use the directives below, then build your Sphinx docs as usual by running ``make html`` in your docs directory.\n\nautofunction\n------------\n\nDocument your JS code using standard JSDoc formatting::\n\n    /**\n     * Return the ratio of the inline text length of the links in an element to\n     * the inline text length of the entire element.\n     *\n     * @param {Node} node - Types or not: either works.\n     * @throws {PartyError|Hearty} Multiple types work fine.\n     * @returns {Number} Types and descriptions are both supported.\n     */\n    function linkDensity(node) {\n        const length = node.flavors.get('paragraphish').inlineLength;\n        const lengthWithoutLinks = inlineTextLength(node.element,\n                                                    element => element.tagName !== 'A');\n        return (length - lengthWithoutLinks) / length;\n    }\n\nOur directives work much like Sphinx's standard autodoc ones. You can specify\njust a function::\n\n    .. js:autofunction:: someFunction\n\nOr you can throw in your own explicit parameter list, if you want to note\noptional parameters::\n\n    .. js:autofunction:: someFunction(foo, bar[, baz])\n\nYou can even add additional content. If you do, it will appear just below any\nextracted documentation::\n\n    .. js:autofunction:: someFunction\n\n        Here are some things that will appear...\n\n        * Below\n        * The\n        * Extracted\n        * Docs\n\n        Enjoy!\n\n``js:autofunction`` has one option, ``:short-name:``, which comes in handy for chained APIs whose implementation details you want to keep out of sight. When you use it on a class method, the containing class won't be mentioned in the docs, the function will appear under its short name in indices, and cross references must use the short name as well (``:func:`someFunction```)::\n\n    .. js:autofunction:: someClass#someFunction\n       :short-name:\n\nautoclass\n---------\n\nWe provide a ``js:autoclass`` directive which documents a class with the concatenation of its class comment and its constructor comment. It shares all the features of ``js:autofunction`` and even takes the same ``:short-name:`` flag, which can come in handy for inner classes. The easiest way to use it is to invoke the ``:members:`` option, which automatically documents all your class's public methods and attributes::\n\n    .. js:autoclass:: SomeEs6Class(constructor, args, if, you[, wish])\n       :members:\n\nYou can add private members by saying... ::\n\n    .. js:autoclass:: SomeEs6Class\n       :members:\n       :private-members:\n\nPrivacy is determined by JSDoc ``@private`` tags.\n\nExclude certain members by name with ``:exclude-members:``::\n\n    .. js:autoclass:: SomeEs6Class\n       :members:\n       :exclude-members: Foo, bar, baz\n\nOr explicitly list the members you want. We will respect your ordering. ::\n\n    .. js:autoclass:: SomeEs6Class\n       :members: Qux, qum\n\nFinally, if you want full control, pull your class members in one at a time by embedding ``js:autofunction`` or ``js:autoattribute``::\n\n    .. js:autoclass:: SomeEs6Class\n\n       .. js:autofunction:: SomeEs6Class#someMethod\n\n       Additional content can go here and appears below the in-code comments,\n       allowing you to intersperse long prose passages and examples that you\n       don't want in your code.\n\nautoattribute\n-------------\n\nThis is useful for documenting public properties::\n\n    class Fnode {\n        constructor(element) {\n            /**\n             * The raw DOM element this wrapper describes\n             */\n            this.element = element;\n        }\n    }\n\nAnd then, in the docs... ::\n\n    .. autoclass:: Fnode\n\n       .. autoattribute:: Fnode#element\n\nThis is also the way to document ES6-style getters and setters, as it omits the trailing ``()`` of a function. The assumed practice is the usual JSDoc one: document only one of your getter/setter pair::\n\n    class Bing {\n        /** The bong of the bing */\n        get bong() {\n            return this._bong;\n        }\n\n        set bong(newBong) {\n            this._bong = newBong * 2;\n        }\n    }\n\nAnd then, in the docs... ::\n\n   .. autoattribute:: Bing#bong\n\nDodging Ambiguity With Pathnames\n--------------------------------\n\nIf you have same-named objects in different files, use pathnames to disambiguate them. Here's a particularly long example::\n\n    .. js:autofunction:: ./some/dir/some/file.SomeClass#someInstanceMethod.staticMethod~innerMember\n\nYou may recognize the separators ``#.~`` from `JSDoc namepaths <http://usejsdoc.org/about-namepaths.html>`_; they work the same here.\n\nFor conciseness, you can use any unique suffix, as long as it consists of complete path segments. These would all be equivalent to the above, assuming they are unique within your source tree::\n\n    innerMember\n    staticMethod~innerMember\n    SomeClass#someInstanceMethod.staticMethod~innerMember\n    some/file.SomeClass#someInstanceMethod.staticMethod~innerMember\n\nThings to note:\n\n* We use simple file paths rather than JSDoc's ``module:`` prefix.\n* We use simple backslash escaping exclusively rather than switching escaping schemes halfway through the path; JSDoc itself `is headed that way as well <https://github.com/jsdoc3/jsdoc/issues/876>`_. The characters that need to be escaped are ``#.~(/``, though you do not need to escape the dots in a leading ``./`` or ``../``. A really horrible path might be... ::\n\n    some/path\\ with\\ spaces/file.topLevelObject#instanceMember.staticMember\\(with\\(parens\n* Relative paths are relative to the ``js_source_path`` specified in the config. Absolute paths are not allowed.\n\nBehind the scenes, sphinx-js will change all separators to dots so that...\n\n* Sphinx's \"shortening\" syntax works: ``:func:`~InwardRhs.atMost``` prints as merely ``atMost()``. (For now, you should always use dots rather than other namepath separators: ``#~``.)\n* Sphinx indexes more informatively, saying methods belong to their classes.\n\nSaving Keystrokes By Setting The Primary Domain\n-----------------------------------------------\n\nTo save some keystrokes, you can set ``primary_domain = 'js'`` in conf.py and then say (for example) ``autofunction`` rather than ``js:autofunction``.\n\nExample\n=======\n\nA good example using most of sphinx-js's functionality is the Fathom documentation. A particularly juicy page is https://mozilla.github.io/fathom/ruleset.html. Click the \"View page source\" link to see the raw directives.\n\nFathom also carries a Travis CI configuration and a deployment script for building docs with sphinx-js and publishing them to GitHub Pages. Feel free to borrow them. (ReadTheDocs, which is otherwise the canonical hosting platform for Sphinx docs, doesn't work because it won't run JSDoc for us, nor will it accept uploads of docs built externally.)\n\nCaveats\n=======\n\n* We don't understand the inline JSDoc constructs like ``{@link foo}``; you have to use Sphinx-style equivalents for now, like ``:js:func:`foo``` (or simply ``:func:`foo``` if you have set ``primary_domain = 'js'`` in conf.py.\n* So far, we understand and convert only the JSDoc block tags ``@param``, ``@returns``, ``@throws``, and their synonyms. Other ones will go *poof* into the ether.\n\nTests\n=====\n\nRun ``python setup.py test``. Run ``tox`` to test across Python versions.\n\nVersion History\n===============\n\n2.0\n  * Deal with ambiguous object paths. Symbols with identical JSDoc longnames (such as two top-level things called \"foo\" in different files) will no longer have one shadow the other. Introduce an unambiguous path convention for referring to objects. Add a real parser to parse them rather than the dirty tricks we were using before. Backward compatibility breaks a little, because ambiguous references are now a fatal error, rather than quietly referring to the last definition JSDoc happened to encounter.\n  * Index everything into a suffix tree so you can use any unique path suffix to refer to an object.\n  * Other fallout of having a real parser:\n\n    * Stop supporting \"-\" as a namepath separator.\n    * No longer spuriously translate escaped separators in namepaths into dots.\n    * Otherwise treat paths and escapes properly. For example, we can now handle symbols that contain \"(\".\n  * Fix KeyError when trying to gather the constructor params of a plain old\n    object labeled as a ``@class``.\n\n1.5.2\n  * Fix crasher while warning that a specified longname isn't found.\n\n1.5.1\n  * Sort ``:members:`` alphabetically when an order is not explicitly specified.\n\n1.5\n  * Add ``:members:`` option to ``autoclass``.\n  * Add ``:private-members:`` and ``:exclude-members:`` options to go with it.\n  * Significantly refactor to allow directive classes to talk to each other.\n\n1.4\n  * Add ``jsdoc_config_path`` option.\n\n1.3.1\n  * Tolerate @args and other info field lines that are wrapped in the source code.\n  * Cite the file and line of the source comment in Sphinx-emitted warnings and errors.\n\n1.3\n  * Add ``autoattribute`` directive.\n\n1.2\n  * Always do full rebuilds; don't leave pages stale when JS code has changed but the RSTs have not.\n  * Make Python-3-compatible.\n  * Add basic ``autoclass`` directive.\n\n1.1\n  * Add ``:short-name:`` option.\n\n1.0\n  * Initial release, with just ``js:autofunction``",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/erikrose/sphinx-js",
    "keywords": "sphinx,documentation,docs,javascript,js,jsdoc,restructured",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "sphinx-js",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/sphinx-js/",
    "release_url": "https://pypi.org/project/sphinx-js/2.0/",
    "requires_python": null,
    "summary": "Support for using Sphinx on JSDoc-documented JS code",
    "version": "2.0"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "26e8f4f7dcc8441fe24f13b55baf7cbc",
          "sha256": "b0d1c77bef355be71ff1cf97913a543230fe1d7b1b5927ead9f3679fcb98b8f7"
        },
        "downloads": 13,
        "filename": "sphinx-js-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "26e8f4f7dcc8441fe24f13b55baf7cbc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5823,
        "upload_time": "2017-02-07T20:52:03",
        "url": "https://files.pythonhosted.org/packages/c0/dd/e4666ea2aceab2d9135008c6b81a2f74cf4aa83cc195db6a5fc75d0351fe/sphinx-js-1.0.tar.gz"
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "017c1542701ffc770a2fb05670aae1d6",
          "sha256": "3b41e8114554579428bfb2f83e58513e7dc9e76a8cf3fc1f9d4bd7240b7728b8"
        },
        "downloads": 13,
        "filename": "sphinx-js-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "017c1542701ffc770a2fb05670aae1d6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6566,
        "upload_time": "2017-02-13T20:24:29",
        "url": "https://files.pythonhosted.org/packages/0c/d4/6bca80bab1919a41e3cb2420f1d0de55e38e88ae7fbdd2cdfc7c06e121f0/sphinx-js-1.1.tar.gz"
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "455026ea9b80de5a2e0379707c2fdbe6",
          "sha256": "2910090c9f4f4c35f268ab934e78f155db52675ad9e7beb8dea537699a5f64b4"
        },
        "downloads": 14,
        "filename": "sphinx-js-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "455026ea9b80de5a2e0379707c2fdbe6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7869,
        "upload_time": "2017-02-14T22:10:48",
        "url": "https://files.pythonhosted.org/packages/69/22/77d6025b1f7eb75e6d51532e35d206958bd5310073a27c45d0a06a1830fa/sphinx-js-1.2.tar.gz"
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "44e12d2718cedaa83d75632feb6febac",
          "sha256": "d0d21ee4e601a53bbd533f01ec366601d23f915a5f7c8fff229572c1ce16e56f"
        },
        "downloads": 10,
        "filename": "sphinx-js-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "44e12d2718cedaa83d75632feb6febac",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8459,
        "upload_time": "2017-02-21T21:08:19",
        "url": "https://files.pythonhosted.org/packages/57/6c/bad7b88829cb68798c089afcc005dff72164cacff3aca1a9b7d7c25c34b1/sphinx-js-1.3.tar.gz"
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f6c730af8865eb7587fced9931fb8557",
          "sha256": "d9b10842256b954571b1f77ec3a0f99bc23f1e8c7e4e3f8c10757c4cc2a62f1a"
        },
        "downloads": 16,
        "filename": "sphinx-js-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f6c730af8865eb7587fced9931fb8557",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8699,
        "upload_time": "2017-03-06T17:31:18",
        "url": "https://files.pythonhosted.org/packages/51/73/6c4410f829bdfe4c820da9a7a56be1161e1a90ac69aa619af63bc2c21cd5/sphinx-js-1.3.1.tar.gz"
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c065fa422738444c9d40c5393cf380f2",
          "sha256": "57ae9149ae8897436749037b159c2e3c181e0ef714b0552c71429fb4f7387e9e"
        },
        "downloads": 18,
        "filename": "sphinx-js-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c065fa422738444c9d40c5393cf380f2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8817,
        "upload_time": "2017-03-10T21:51:38",
        "url": "https://files.pythonhosted.org/packages/9c/9a/854431940596cd688cdbc2ba778f6918c3fd03c3de1e5a34b2d673b00eef/sphinx-js-1.4.tar.gz"
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9affcaad0c42ae45e223eb0220a98a74",
          "sha256": "701ba5b02b4878d075754ea9c31d6c496f6ba3f60ef098d552b234d2d5234358"
        },
        "downloads": 138,
        "filename": "sphinx-js-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9affcaad0c42ae45e223eb0220a98a74",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14285,
        "upload_time": "2017-03-17T20:07:13",
        "url": "https://files.pythonhosted.org/packages/89/d0/38cc8c3cb45d121483c33e7654480a16805e44bb326e4bc6fe79c6e5d905/sphinx-js-1.5.tar.gz"
      }
    ],
    "1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4c3bdf8f8c5e30199883aae94720f7de",
          "sha256": "e94865def38f84e20ba5c354043a096499c8dd579b7c89ee32c62cc4f4e86f77"
        },
        "downloads": 12,
        "filename": "sphinx-js-1.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4c3bdf8f8c5e30199883aae94720f7de",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14408,
        "upload_time": "2017-03-20T13:49:45",
        "url": "https://files.pythonhosted.org/packages/9f/17/3e1fe8ead23c2d496d15eb90d0f9229ee0d7b12ef2e0fef7d943a200aae6/sphinx-js-1.5.1.tar.gz"
      }
    ],
    "1.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "44c536a54d4272bad8ba23140dca863b",
          "sha256": "847c5ac414891fa307e9dc9b2531302ce49342fbdd3586f5976cba3ad01446c8"
        },
        "downloads": 17,
        "filename": "sphinx-js-1.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "44c536a54d4272bad8ba23140dca863b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14477,
        "upload_time": "2017-03-22T18:21:14",
        "url": "https://files.pythonhosted.org/packages/83/ea/2579db6b846665dd04917fe2b974cf3b5e6588cdf55301078e19012e2a46/sphinx-js-1.5.2.tar.gz"
      }
    ],
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "523411ddb442b9373b5b6fbd08640bbf",
          "sha256": "36e3c10fae982ec10bae62ae3b5794b74c5fc35eac0f35a85ac747f3fd13bb49"
        },
        "downloads": 0,
        "filename": "sphinx-js-2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "523411ddb442b9373b5b6fbd08640bbf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19200,
        "upload_time": "2017-05-04T14:53:20",
        "url": "https://files.pythonhosted.org/packages/0e/77/044aacdc77b6e74a7518c9a331672331a9d9650a6d03e1a5f84b369f0791/sphinx-js-2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "523411ddb442b9373b5b6fbd08640bbf",
        "sha256": "36e3c10fae982ec10bae62ae3b5794b74c5fc35eac0f35a85ac747f3fd13bb49"
      },
      "downloads": 0,
      "filename": "sphinx-js-2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "523411ddb442b9373b5b6fbd08640bbf",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 19200,
      "upload_time": "2017-05-04T14:53:20",
      "url": "https://files.pythonhosted.org/packages/0e/77/044aacdc77b6e74a7518c9a331672331a9d9650a6d03e1a5f84b369f0791/sphinx-js-2.0.tar.gz"
    }
  ]
}