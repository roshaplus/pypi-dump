{
  "info": {
    "author": "chris48s",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Framework :: Django :: 2.0",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "django-apiblueprint-view\n========================\n\n|Build Status| |Coverage Status|\n\nRender `API Blueprints <https://apiblueprint.org/>`__ on-the-fly using\nDjango templates\n\nInstallation\n------------\n\n1. ``django-apiblueprint-view`` uses the\n   `Drafter <https://github.com/apiaryio/drafter>`__ C library for API\n   Blueprint parsing. Install it using:\n\n::\n\n    wget https://github.com/apiaryio/drafter/releases/download/v3.2.7/drafter-v3.2.7.tar.gz\n    tar xvzf drafter-v3.2.7.tar.gz\n    cd drafter-v3.2.7\n    ./configure --shared\n    make libdrafter\n    sudo cp build/out/Release/lib.target/libdrafter.so /usr/lib/libdrafter.so\n    sudo cp src/drafter.h /usr/include/drafter/drafter.h\n\n2. ``pip install django-apiblueprint-view``\n\n3. Add to ``INSTALLED_APPS`` in django settings:\n\n.. code:: python\n\n    INSTALLED_APPS = [\n        ...\n        'apiblueprint_view',\n    ]\n\nPlatform Support\n----------------\n\n``django-apiblueprint-view`` is tested under: \\* Python 3.4, 3.5 and 3.6\n\\* Django 1.8, 1.9, 1.10, 1.11 and 2.0\n\nUsage\n-----\n\n.. code:: python\n\n    from apiblueprint_view.views import ApiBlueprintView\n\n    urlpatterns = [\n        url(r'^docs/$', ApiBlueprintView.as_view(blueprint='/path/to/blueprint.apibp')),\n    ]\n\nStyling\n-------\n\nCustom HTML Template\n~~~~~~~~~~~~~~~~~~~~\n\nDefine a custom base template. It must include the tag\n\n::\n\n    {% include 'api_docs/docs_parent.html' %}\n\nPass it into ``ApiBlueprintView.as_view()`` as a parameter.\n\n.. code:: python\n\n    from apiblueprint_view.views import ApiBlueprintView\n\n    urlpatterns = [\n        url(r'^docs/$', ApiBlueprintView.as_view(\n            blueprint='/path/to/blueprint.apibp',\n            template_name='my_base_template.html'\n        )),\n    ]\n\nCustom CSS\n~~~~~~~~~~\n\n``ApiBlueprintView.as_view()`` may accept a ``styles`` dictionary\ndescribing custom CSS classes which should be attached to rendered HTML\ntags. For example:\n\n.. code:: python\n\n    from apiblueprint_view.views import ApiBlueprintView\n\n    urlpatterns = [\n        url(r'^docs/$', ApiBlueprintView.as_view(\n            blueprint='/path/to/blueprint.apibp',\n            template_name='my_base_template.html',\n            styles={\n                'action': {'class': 'foo bar'},\n                'method': {'class': 'baz'}\n            }\n        )),\n    ]\n\nThe following keys are valid. All keys are optional:\n\n-  ``'action'``: Container ``<div>`` for an API action\n-  ``'action_transaction'``: Container ``<div>`` for a HTTP transaction\n   (request and response)\n-  ``'action_request'``: Container ``<div>`` for a HTTP request\n-  ``'action_response'``: Container ``<div>`` for a HTTP response\n-  ``'action_schema'``: Container ``<div>`` for a HTTP request or\n   response schema\n-  ``'action_headers'``: Container ``<div>`` for HTTP request or\n   response headers\n-  ``'action_body'``: Container ``<div>`` for a HTTP request or response\n   body\n-  ``'action_example'``: Container ``<div>`` for an API action example\n   URL\n-  ``'description'``: Container ``<div>`` for some text describing an\n   action, resource, request, response, etc\n-  ``'parameters'``: Container ``<div>`` for a list of parameters\n-  ``'method'``: Generic ``<span>`` containing an HTTP method\n-  ``'method_CONNECT'``: ``<span>`` containing the text ``CONNECT``\n-  ``'method_DELETE'``: ``<span>`` containing the text ``DELETE``\n-  ``'method_GET'``: ``<span>`` containing the text ``GET``\n-  ``'method_HEAD'``: ``<span>`` containing the text ``HEAD``\n-  ``'method_OPTIONS'``: ``<span>`` containing the text ``OPTIONS``\n-  ``'method_PATCH'``: ``<span>`` containing the text ``PATCH``\n-  ``'method_POST'``: ``<span>`` containing the text ``POST``\n-  ``'method_PUT'``: ``<span>`` containing the text ``PUT``\n-  ``'method_TRACE'``: ``<span>`` containing the text ``TRACE``\n-  ``'resource'``: Container ``<div>`` for an API resource\n-  ``'resource_group'``: Container ``<div>`` for an API resource group\n\n`Highlight.js <https://highlightjs.org/>`__ can be used to add syntax\nhighlighting\n\nIncluding Files\n~~~~~~~~~~~~~~~\n\nYou can include other files in your blueprint by using an include\ndirective with a path to the included file relative to the current\nfile's directory. Included files can include other files, so be careful\nof circular references.\n\n::\n\n    <!-- include(filename.md) -->\n\nThis syntax is not a part of the API Blueprint spec, but is also\nsupported in some other tools e.g:\n`aglio <https://github.com/danielgtaylor/aglio#including-files>`__.\n\nThe include directive has the potential to introduce remote file\ninclusion or directory traversal vulnerabilities if your application\nrenders user-supplied content. There are a couple of settings to help\nmitigate this. Set ``APIBP_PROCESS_INCLUDES = False`` in your django\nsettings to completely ignore include directives (the default is\n``True``). There is also a whitelist of allowed file types to include.\nThe default whitelist is ``['.md', '.apibp', '.json']`` but this can be\noverridden by setting ``APIBP_INCLUDE_WHITELIST`` to a list of allowed\nextensions in your django settings.\n\nLicensing\n---------\n\n``django-apiblueprint-view`` is made available under the MIT License\n\nDevelopment\n-----------\n\nBuild and install locally:\n\n::\n\n    python setup.py sdist\n    pip install --upgrade dist/django-apiblueprint-view-x.y.z.tar.gz\n\nRun the tests locally:\n\n::\n\n    pip install -r testing_requirements.txt\n    ./run_tests.py\n\n.. |Build Status| image:: https://travis-ci.org/chris48s/django-apiblueprint-view.svg?branch=master\n   :target: https://travis-ci.org/chris48s/django-apiblueprint-view\n.. |Coverage Status| image:: https://coveralls.io/repos/github/chris48s/django-apiblueprint-view/badge.svg?branch=master\n   :target: https://coveralls.io/github/chris48s/django-apiblueprint-view?branch=master",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/chris48s/django-apiblueprint-view",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-apiblueprint-view",
    "platform": "",
    "project_url": "https://pypi.org/project/django-apiblueprint-view/",
    "release_url": "https://pypi.org/project/django-apiblueprint-view/1.1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Render API Blueprints on-the-fly using Django templates",
    "version": "1.1.2"
  },
  "releases": {
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1b7ccac5bf7cbf2fd5f69a7a4496982a",
          "sha256": "334a3f0c56aa74516bacf9838cd3e9853428c7da7c296c2773af00d0f3490b34"
        },
        "downloads": -1,
        "filename": "django-apiblueprint-view-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1b7ccac5bf7cbf2fd5f69a7a4496982a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12138,
        "upload_time": "2017-10-26T19:20:12",
        "url": "https://files.pythonhosted.org/packages/78/4b/fe3ac6dd04b1d9093f1b61430dbe5f4669b5ea691252488e3bfdd17d4233/django-apiblueprint-view-1.1.1.tar.gz"
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ec1073943039c27a6ea40100bbcab513",
          "sha256": "7c65b596d7d61811edcf69035da99197cad062a14034649835064cebf2b56ee8"
        },
        "downloads": -1,
        "filename": "django-apiblueprint-view-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ec1073943039c27a6ea40100bbcab513",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12651,
        "upload_time": "2017-12-03T14:42:03",
        "url": "https://files.pythonhosted.org/packages/21/75/e5c206e3cfee258f481f43d909d11c26afd16eadb65f58221ad88b8cb21d/django-apiblueprint-view-1.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ec1073943039c27a6ea40100bbcab513",
        "sha256": "7c65b596d7d61811edcf69035da99197cad062a14034649835064cebf2b56ee8"
      },
      "downloads": -1,
      "filename": "django-apiblueprint-view-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ec1073943039c27a6ea40100bbcab513",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 12651,
      "upload_time": "2017-12-03T14:42:03",
      "url": "https://files.pythonhosted.org/packages/21/75/e5c206e3cfee258f481f43d909d11c26afd16eadb65f58221ad88b8cb21d/django-apiblueprint-view-1.1.2.tar.gz"
    }
  ]
}