{
  "info": {
    "author": "Pahaz Blinov",
    "author_email": "pahaz.blinov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Utilities"
    ],
    "description": "**Author**: `Pahaz Blinov`_\n\n**Repo**: https://github.com/pahaz/py3line/\n\nPyline is a UNIX command-line tool for line-based processing\nin Python with regex and output transform features\nsimilar to grep, sed, and awk.\n\nThis project inspired by: `piep`_, `pysed`_, `pyline`_, `pyp`_ and\n`Jacob+Mark recipe <https://code.activestate.com/recipes/437932-pyline-a-grep-like-sed-like-command-line-tool/>`_\n\n**requirements**: Python3\n\n**WHY I MAKE IT?**\n\nI sometimes have to use `sed` / `awk`.\nNot often, and so I always forget the necessary options and `sed` / `awk` DSL.\nBut I now python, I like it, and I want use it for data processing.\nDefault `python -c` is hard to write the kind of one-liner that works well.\n\nWhy not a `pyline`?\n * Don`t support python3\n * Have many options (I want as much simple as possible solution)\n * Bad performance\n * Don`t support command chaining\n\nWhy not a `pysed`?\n *\n\nInstallation\n============\n\n`py3line`_ is on PyPI, so simply run:\n\n::\n\n    pip install py3line\n\nor ::\n\n    easy_install py3line\n\nto have it installed in your environment.\n\nFor installing from source, clone the\n`repo <https://github.com/pahaz/py3line>`_ and run::\n\n    python setup.py install\n\nTutorial\n========\n\nLets start with two simple examples:\n\n.. code-block:: bash\n\n    $ echo -e \"Here are\\nsome\\nwords for you.\" | ./py3line.py \"x.split()\" -a \"len(x)\"\n    2\n    1\n    3\n\n    $ echo -e \"Here are\\nsome\\nwords for you.\" | ./py3line.py \"x.split()\" -a \"len(x)\" -a \"sum(xx)\"\n    6\n\nHow it works?\n-------------\n\nPy3line produces a transform over the input data stream.\nPy3line transform is constructed from a sequence of python actions.\nEach action can be an action **over an element of stream** or\nan action **over the stream**.\n\nFirst example overview ::\n\n    echo -e \"Here are\\nsome\\nwords for you.\" | ./py3line.py \"x.split()\" -a \"len(x)\"\n\n * **echo -e \"Here are\\nsome\\nwords for you.\"** -- create an input stream data consists of three lines\n * **|** -- pipeline input stream to py3line\n * **\"x.split()\" -a \"len(x)\"** -- define two actions: \"x.split()\" and \"len(x)\". Each of them is element based action\n\nPy3line expects to get at least one transformation action as positional argument.\nYou also can define additional action by using **-a** arguments,\nas shown in the example above.\n\nThe example above can be represented as the following python pseudo-code::\n\n    import sys\n\n    for x in sys.stdin.readlines():\n\n        # 1) action \"x.split()\"\n        x = x.split()\n\n        # 2) action \"len(x)\"\n        x = len(x)\n\n        print(x)\n\nSecond example overview ::\n\n    echo -e \"Here are\\nsome\\nwords for you.\" | ./py3line.py \"x.split()\" -a \"len(x)\" -a \"sum(xx)\"\n\nHere we have stream based action **\"sum(xx)\"**.\n\nIt can be represented as python pseudo-code::\n\n    import sys\n\n    xx = [x for x in sys.stdin.readlines()]\n\n    for x in xx:\n\n        # 1) action \"x.split()\"\n        x = x.split()\n\n        # 2) action \"len(x)\"\n        x = len(x)\n\n    # 3) action \"sum(xx)\"\n    print(sum(xx))\n\nWhat is order actions?\n----------------------\n\nThis commands are equal::\n\n    ./py3line.py \"x.split()\" -a \"len(x)\" -a \"sum(xx)\"\n    ./py3line.py -a \"x.split()\" \"len(x)\" -a \"sum(xx)\"\n    ./py3line.py -a \"x.split()\" -a \"len(x)\" \"sum(xx)\"\n\nBut we recommend use::\n\n    ./py3line.py \"x.split()\" -a \"len(x)\" -a \"sum(xx)\"\n\nas the right actions ordering.\n\nWhy it so? Because you must pass one action as positional argument.\n\nActions chaining\n----------------\n\nLet us define some terminology. **py3line action1 -a action2 -a action3**\n\nWe have actions: action1, action2 and action3.\nEach of them may be element based or stream based.\n\n**Element based** action can be represented as python pseudo-code::\n\n    xx = ...\n    new_xx = []\n\n    for x in xx:\n        # DO ELEMENT BASED ACTION ON `x`\n        result = eval(compile(action_x, ..., 'eval'), {'x': x})\n        new_xx.append(result)\n\n    xx = new_xx\n\n**Stream based** action can be represented as python pseudo-code::\n\n    xx = ...\n\n    # DO STREAM BASED ACTION ON `xx`\n    xx = eval(compile(action_xx, ..., 'eval'), {'xx': xx})\n\nPre-actions\n-----------\n\nSometimes you want prepare some variables or import some modules.\n\nYou can use **-m** options for import module::\n\n    ./py3line.py -m shlex \"shlex.split(x)[13]\"\n\nYou also can use **-p** options for run exec some actions before processing::\n\n    ./py3line.py -p \"rgx = re.compile(r' is ([A-Z]\\w*)')\" \"rgx.search(x).group(1)\"\n\nPseudo code example **./py3line.py -m module1 -m module2 -p pre-action1  -p pre-action2 ...** ::\n\n    import module1\n    import module2\n\n    pre-action1\n    pre-action2\n\n    ...\n\n**Options ordering**\n\nRegardless of the sequence definition. First be made all imports (**-m** option),\nthen be made all pre-action (**-p** option), and\nthen actions (**-a** option + 1st positional argument).\n\n.. code-block:: bash\n\n    # Print every line (null transform)\n    $ cat ./testsuit/test.txt | ./py3line.py x\n    This is my cat,\n     whose name is Betty.\n    This is my dog,\n     whose name is Frank.\n    This is my fish,\n     whose name is George.\n    This is my goat,\n     whose name is Adam.\n\n    # Number every line\n    $ cat ./testsuit/test.txt | ./py3line.py \"i, x\"\n    0 This is my cat,\n    1  whose name is Betty.\n    2 This is my dog,\n    3  whose name is Frank.\n    4 This is my fish,\n    5  whose name is George.\n    6 This is my goat,\n    7  whose name is Adam.\n\n    # Print every first and last word\n    $ cat ./testsuit/test.txt | ./py3line.py \"x.split()[0], x.split()[-1]\"\n    This cat,\n    whose Betty.\n    This dog,\n    whose Frank.\n    This fish,\n    whose George.\n    This goat,\n    whose Adam.\n\n    # Split into words and print (strip al non word char like comma, dot, etc)\n    $ cat ./testsuit/test.txt | ./py3line.py \"re.findall(r'\\w+', x)\"\n    This is my cat\n    whose name is Betty\n    This is my dog\n    whose name is Frank\n    This is my fish\n    whose name is George\n    This is my goat\n    whose name is Adam\n\n    # Regex matching with groups\n    $ cat ./testsuit/test.txt | ./py3line.py \"re.findall(r' is ([A-Z]\\w*)', x) or False\"\n    Betty\n    Frank\n    George\n    Adam\n\n    # cat ./testsuit/test.txt | ./py3line.py \"re.search(r' is ([A-Z]\\w*)', x).group(1)\"\n    $ cat ./testsuit/test.txt | ./py3line.py -p \"rgx = re.compile(r' is ([A-Z]\\w*)')\" \"rgx.search(x).group(1)\"\n    Betty\n    Frank\n    George\n    Adam\n\n    ## Original Examples\n    # Print out the first 20 characters of every line\n    # cat ./testsuit/test.txt | ./py3line.py \"i < 2\"\n    $ cat ./testsuit/test.txt | ./py3line.py \"list(xx)[:2]\"\n    This is my cat,\n     whose name is Betty.\n\n    # Print just the URLs in the access log\n    $ cat ./testsuit/nginx.log | ./py3line.py -m shlex \"shlex.split(x)[13]\"\n    HEAD / HTTP/1.0\n    HEAD / HTTP/1.0\n    HEAD / HTTP/1.0\n    HEAD / HTTP/1.0\n    HEAD / HTTP/1.0\n    GET /admin/moktoring/session/add/ HTTP/1.1\n    GET /admin/jsi18n/ HTTP/1.1\n    GET /static/admin/img/icon-calendar.svg HTTP/1.1\n    GET /static/admin/img/icon-clock.svg HTTP/1.1\n    HEAD / HTTP/1.0\n    HEAD / HTTP/1.0\n    HEAD / HTTP/1.0\n    HEAD / HTTP/1.0\n    HEAD / HTTP/1.0\n    GET /logout/?reason=startApplication HTTP/1.1\n    GET / HTTP/1.1\n    GET /login/?next=/ HTTP/1.1\n    POST /admin/customauth/user/?q=%D0%9F%D0%B0%D1%81%D0%B5%D1%87%D0%BD%D0%B8%D0%BA HTTP/1.1\n\n    # Print most common accessed urls and filter accessed more then 5 times\n    $ cat ./testsuit/nginx.log | ./py3line.py -m shlex -m collections  -a \"shlex.split(x)[13]\" -a \"collections.Counter(xx).most_common()\" \"x[1] > 5 and x[0]\"\n    HEAD / HTTP/1.0\n\n\nHELP\n----\n\n::\n\n    usage: py3line.py [-h] [-a action] [-p pre_action] [-o OUTPUT] [-i]\n                      [--in-place-suffix IS_INPLACE_SUFFIX] [-m MODULES] [-v] [-q]\n                      [--version]\n                      action [file [file ...]]\n\n    Py3line is a UNIX command-line tool for line-based processing in Python with\n    regex and output transform features similar to grep, sed, and awk.\n\n    positional arguments:\n      action                <python_expression>\n      file                  Input file #default: stdin\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -a action, --action action\n                            <python_expression>\n      -p pre_action, --pre-action pre_action\n                            <python_expression>\n      -o OUTPUT, --out OUTPUT, --output-file OUTPUT\n                            Output file #default: '-' for stdout\n      -i, --in-place        Output to editable file\n      --in-place-suffix IS_INPLACE_SUFFIX\n                            Output to editable file and provide a backup suffix\n                            for keeping a copy of the original file\n      -m MODULES, --modules MODULES\n                            for m in modules: import m #default: []\n      -v, --verbose\n      -q, --quiet\n      --version             Print the version string\n\n\n.. _Pahaz Blinov: https://github.com/pahaz/\n.. _py3line: https://pypi.python.org/pypi/py3line/\n.. _pyp: https://pypi.python.org/pypi/pyp/\n.. _piep: https://github.com/timbertson/piep/tree/master/piep/\n.. _pysed: https://github.com/dslackw/pysed/blob/master/pysed/main.py\n.. _pyline: https://github.com/westurner/pyline/blob/master/pyline/pyline.py\n",
    "docs_url": null,
    "download_url": "https://pypi.python.org/packages/source/s/py3line/py3line-0.0.4.zip",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pahaz/py3line",
    "keywords": "google spreadsheet api util helper",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py3line",
    "platform": "unix",
    "project_url": "https://pypi.org/project/py3line/",
    "release_url": "https://pypi.org/project/py3line/0.0.4/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "UNIX command-line tool for python line-based stream processing",
    "version": "0.0.4"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c7e8b091aee0b6917919a6234ab49426",
          "sha256": "c598d951c8daf070032454ad4944f9fbcadba414bd5105a1f4f722676ecafd73"
        },
        "downloads": -1,
        "filename": "py3line-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c7e8b091aee0b6917919a6234ab49426",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6060,
        "upload_time": "2016-07-22T18:52:36",
        "url": "https://files.pythonhosted.org/packages/28/cd/5fe6a799ead4aa1430a0f42ea6e6c3ac116b73902140950ad85e8d91cafc/py3line-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e301258576e9bc994c565e4dabe514ed",
          "sha256": "cb4942d231f65d0316f17f70aeb81c5b7d737066fa66ac039ae6ef97b3e56ba7"
        },
        "downloads": -1,
        "filename": "py3line-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e301258576e9bc994c565e4dabe514ed",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9211,
        "upload_time": "2016-07-26T07:20:35",
        "url": "https://files.pythonhosted.org/packages/3a/82/a36c224e7f4251840e86d9f85d6ea40f7d9250e126817a9dbcd302c13e50/py3line-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9477f140c118bbca75cf0eea5cde9c1a",
          "sha256": "a66f78a211adf6b9d5c562e1b450e805d14172bb0dc0989303ec8238a077ad90"
        },
        "downloads": -1,
        "filename": "py3line-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9477f140c118bbca75cf0eea5cde9c1a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9420,
        "upload_time": "2016-09-25T10:25:38",
        "url": "https://files.pythonhosted.org/packages/dd/90/c863a1559cc073d7aabe9974c641caa469c42115754de1c07373c3c0821d/py3line-0.0.3.tar.gz"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0cf7c813d05f71406fd3f8b182326e8e",
          "sha256": "cbbea7a8dbb9a072f97084081d96baa4a133ad242b80256f39bed68b8d52d22b"
        },
        "downloads": -1,
        "filename": "py3line-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0cf7c813d05f71406fd3f8b182326e8e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9434,
        "upload_time": "2018-02-03T04:21:54",
        "url": "https://files.pythonhosted.org/packages/44/3a/6f3a5693cd315a0bf9156d1108ba65b2c4f6b45f6923ac2b2e3cd7a5c8ee/py3line-0.0.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0cf7c813d05f71406fd3f8b182326e8e",
        "sha256": "cbbea7a8dbb9a072f97084081d96baa4a133ad242b80256f39bed68b8d52d22b"
      },
      "downloads": -1,
      "filename": "py3line-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "0cf7c813d05f71406fd3f8b182326e8e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9434,
      "upload_time": "2018-02-03T04:21:54",
      "url": "https://files.pythonhosted.org/packages/44/3a/6f3a5693cd315a0bf9156d1108ba65b2c4f6b45f6923ac2b2e3cd7a5c8ee/py3line-0.0.4.tar.gz"
    }
  ]
}