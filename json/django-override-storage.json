{
  "info": {
    "author": "Daniel Hillier",
    "author_email": "daniel.hillier@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Django Override Storage\n=======================\n\nStop filling up your disk with test files or your code with file system mocks!\n\nThis project provides tools to help you reduce the side effects of using\nFileFields during tests.\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    pip install django-override-storage\n\n\nSimple Usage\n------------\nCalling ``override_storage()`` without any arguments will patch all\n``FileField`` fields to store the contents of the file in an in-memory cache\nand returns the fields to their previous storages when leaving its context. The\nstorage cache is deleted at the end of each test or when exiting the context\nmanager depending on how it is called.\n\nIt can be used similarly to ``django.test.utils.override_settings``: as a class\ndecorator, a method decorator or a context manager.\n\n.. code-block:: python\n\n    from django.core.files.base import ContentFile\n    from django.test import TestCase\n\n    from override_storage import override_storage\n    from override_storage.storage import LocMemStorage\n\n    from .models import SimpleModel\n\n    class OverrideStorageTestCase(TestCase):\n\n        def test_context_manager(self):\n            with override_storage():\n                # By default, all files saved to in memory cache.\n                obj = SimpleModel()\n                obj.upload_file.save('test.txt', ContentFile('content'))\n\n                # Get your file back!\n                content = obj.upload_file.read()\n\n        @override_storage(LocMemStorage())\n        def test_method_decorator(self):\n            # You can also specify to replace all storage backends with a\n            # storage instance of your choosing. Depending on the storage type,\n            # this could mean all writes will persist for the life of the\n            # instance. This does not really matter if you wanted to pass in a\n            # FileSystemStorage instance as those writes will be persisted\n            # regardless.\n            ...\n\n        @override_storage(LocMemStorage)\n        def test_method_decorator(self):\n            # Passing in a class will create a new instance for every test.\n\n        @override_storage()\n        def test_method_decorator(self):\n            # Used as a method decorator.\n            ...\n\n\n    @override_storage()\n    class OverrideStorageClassTestCase(TestCase):\n        # You can also wrap classes.\n        ...\n\n\nIt can also be used globally through a custom test runner. This can be achieved\nby setting the ``TEST_RUNNER`` setting in your settings file or however else\nyou may choose to define the Django test runner.\n\n**Warning**\n\n``TEST_RUNNER`` only sets up the replacement storage once at the start of the\ntests as there are no hooks into the ``setUp`` / ``tearDown`` methods of the\ntest class. Using ``override_storage.LocMemStorageDiscoverRunner`` will share a\nsingle in memory cache across all tests. While this shouldn't affect your\ntests, if you write a lot of big files, you may run out of memory.\n\n.. code-block:: python\n\n    TEST_RUNNER = 'override_storage.LocMemStorageDiscoverRunner'\n\n\nStorage information\n-------------------\n\nLike ``override_storage``, ``locmem_stats_override_storage`` patches all\n``FileField`` fields to store the contents of the file in an in-memory cache\nand returns the fields to their previous storages when leaving its context.\n\nIn addition to the normal functionality, it returns an object with information\nabout the calls to the ``_open`` and ``_save`` methods of the test storage. In\ngeneral it records which fields have had files read from or written to them and\nthe names of the files are recorded.\n\n.. code-block:: python\n\n    from django.core.files.base import ContentFile\n    from django.test import TestCase\n\n    from override_storage import locmem_stats_override_storage\n\n    from .models import SimpleModel\n\n    class OverrideStorageTestCase(TestCase):\n\n        def test_context_manager(self):\n            with locmem_stats_override_storage() as storage_stats:\n                # All files saved to in memory cache.\n                obj = SimpleModel()\n                obj.upload_file.save('test.txt', ContentFile('content'))\n\n                # Check how many files have been saved\n                self.storage_stats.save_cnt\n\n                # Check which fields were read or saved\n                self.storage_stats.fields_saved\n                self.storage_stats.fields_read\n\n                # Get a list of names, by field, which have been saved or read.\n                self.storage_stats.reads_by_field\n                self.storage_stats.saves_by_field\n\n                # Get your file back!\n                content = obj.upload_file.read()\n\n        @locmem_stats_override_storage('storage_stats')\n        def test_method_decorator(self, storage_stats):\n            # access to storage stats by specifying kwarg\n            ...\n\n\n    @locmem_stats_override_storage('storage_stats')\n    class OverrideStorageClassTestCase(TestCase):\n        storage_stats = None\n\n        # access to storage stats by specifying attr_name\n        ...\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/danifus/django-override-storage",
    "keywords": "",
    "license": "Copyright (c) 2017 Daniel Hillier",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-override-storage",
    "platform": null,
    "project_url": "https://pypi.org/project/django-override-storage/",
    "release_url": "https://pypi.org/project/django-override-storage/0.1.1/",
    "requires_python": "",
    "summary": "Django test helpers to manage file storage side effects.",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8a1d7065337940ce7e72484e08e7d115",
          "sha256": "a52b0c1ac90e0fa28d224ead1d8dee7aa19f4c5a152eb86897650681e33a818e"
        },
        "downloads": 0,
        "filename": "django-override-storage-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8a1d7065337940ce7e72484e08e7d115",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9402,
        "upload_time": "2017-06-02T15:17:24",
        "url": "https://files.pythonhosted.org/packages/b1/90/a85eb015dea666b8db1d94d02b5eec3be1ba2b338e7fb123674906d8ce48/django-override-storage-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ce68cabc50cb2f4305c22e1f23fc0959",
          "sha256": "54c069941895a1af942c3af27395a2729b6b37a3bdae144a11ad65e0a87ca27e"
        },
        "downloads": 0,
        "filename": "django-override-storage-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce68cabc50cb2f4305c22e1f23fc0959",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9216,
        "upload_time": "2017-06-04T00:12:34",
        "url": "https://files.pythonhosted.org/packages/66/cb/d659462a1908955207e4b253ff4585cc590f0099f4380d17921e117f6d43/django-override-storage-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ce68cabc50cb2f4305c22e1f23fc0959",
        "sha256": "54c069941895a1af942c3af27395a2729b6b37a3bdae144a11ad65e0a87ca27e"
      },
      "downloads": 0,
      "filename": "django-override-storage-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "ce68cabc50cb2f4305c22e1f23fc0959",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9216,
      "upload_time": "2017-06-04T00:12:34",
      "url": "https://files.pythonhosted.org/packages/66/cb/d659462a1908955207e4b253ff4585cc590f0099f4380d17921e117f6d43/django-override-storage-0.1.1.tar.gz"
    }
  ]
}