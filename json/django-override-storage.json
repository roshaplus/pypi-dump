{
  "info": {
    "author": "Daniel Hillier",
    "author_email": "daniel.hillier@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nDescription: Django Override Storage\n        =======================\n        \n        Stop filling up your disk with test files or your code with file system mocks!\n        \n        This project provides tools to help you reduce the side effects of using\n        FileFields during tests.\n        \n        \n        Installation\n        ------------\n        \n        .. code-block:: bash\n        \n            pip install django-override-storage\n        \n        \n        Simple Usage\n        ------------\n        Calling ``override_storage()`` without any arguments will patch all\n        ``FileField`` fields to store the contents of the file in an in-memory cache\n        and returns the fields to their previous storages when leaving its context. The\n        storage cache is deleted at the end of each test or when exiting the context\n        manager depending on how it is called.\n        \n        It can be used similarly to ``django.test.utils.override_settings``: as a class\n        decorator, a method decorator or a context manager.\n        \n        .. code-block:: python\n        \n            from django.core.files.base import ContentFile\n            from django.test import TestCase\n        \n            from override_storage import override_storage\n            from override_storage.storage import LocMemStorage\n        \n            from .models import SimpleModel\n        \n            class OverrideStorageTestCase(TestCase):\n        \n                def test_context_manager(self):\n                    with override_storage():\n                        # By default, all files saved to in memory cache.\n                        obj = SimpleModel()\n                        obj.upload_file.save('test.txt', ContentFile('content'))\n        \n                        # Get your file back!\n                        content = obj.upload_file.read()\n        \n                @override_storage(storage=LocMemStorage())\n                def test_method_decorator(self):\n                    # You can also specify to replace all storage backends with a\n                    # storage instance of your choosing. Depending on the storage type,\n                    # this could mean all writes will persist for the life of the\n                    # instance. This does not really matter if you wanted to pass in a\n                    # FileSystemStorage instance as those writes will be persisted\n                    # regardless.\n                    ...\n        \n                @override_storage(storage=LocMemStorage)\n                def test_method_decorator(self):\n                    # Passing in a class will create a new instance for every test.\n        \n                @override_storage()\n                def test_method_decorator(self):\n                    # Used as a method decorator.\n                    ...\n        \n        \n            @override_storage()\n            class OverrideStorageClassTestCase(TestCase):\n                # You can also wrap classes.\n                ...\n        \n        \n        It can also be used globally through a custom test runner. This can be achieved\n        by setting the ``TEST_RUNNER`` setting in your settings file or however else\n        you may choose to define the Django test runner.\n        \n        **Warning**\n        \n        ``TEST_RUNNER`` only sets up the replacement storage once at the start of the\n        tests as there are no hooks into the ``setUp`` / ``tearDown`` methods of the\n        test class. Using ``override_storage.LocMemStorageDiscoverRunner`` will share a\n        single in memory cache across all tests. While this shouldn't affect your\n        tests, if you write a lot of big files, you may run out of memory.\n        \n        .. code-block:: python\n        \n            TEST_RUNNER = 'override_storage.LocMemStorageDiscoverRunner'\n        \n        \n        Storage information\n        -------------------\n        \n        Like ``override_storage``, ``locmem_stats_override_storage`` patches all\n        ``FileField`` fields to store the contents of the file in an in-memory cache\n        and returns the fields to their previous storages when leaving its context.\n        \n        In addition to the normal functionality, it returns an object with information\n        about the calls to the ``_open`` and ``_save`` methods of the test storage. In\n        general it records which fields have had files read from or written to them and\n        the names of the files are recorded.\n        \n        .. code-block:: python\n        \n            from django.core.files.base import ContentFile\n            from django.test import TestCase\n        \n            from override_storage import locmem_stats_override_storage\n        \n            from .models import SimpleModel\n        \n            class OverrideStorageTestCase(TestCase):\n        \n                def test_context_manager(self):\n                    with locmem_stats_override_storage() as storage_stats:\n                        # All files saved to in memory cache.\n                        obj = SimpleModel()\n                        obj.upload_file.save('test.txt', ContentFile('content'))\n        \n                        # Check how many files have been saved\n                        self.storage_stats.save_cnt\n        \n                        # Check which fields were read or saved\n                        self.storage_stats.fields_saved\n                        self.storage_stats.fields_read\n        \n                        # Get a list of names, by field, which have been saved or read.\n                        self.storage_stats.reads_by_field\n                        self.storage_stats.saves_by_field\n        \n                        # Get your file back!\n                        content = obj.upload_file.read()\n        \n                @locmem_stats_override_storage(name='storage_stats')\n                def test_method_decorator(self, storage_stats):\n                    # access to storage stats by specifying `name` which is the name of\n                    # the kwarg to be used in the function signature.\n                    ...\n        \n        \n            @locmem_stats_override_storage(name='storage_stats')\n            class OverrideStorageClassTestCase(TestCase):\n                storage_stats = None\n        \n                # access to storage stats by specifying attr_name\n                ...\n        \nPlatform: UNKNOWN\nClassifier: Development Status :: 3 - Alpha\nClassifier: Environment :: Web Environment\nClassifier: Framework :: Django\nClassifier: Framework :: Django :: 1.8\nClassifier: Framework :: Django :: 1.9\nClassifier: Framework :: Django :: 1.10\nClassifier: Framework :: Django :: 1.11\nClassifier: Framework :: Django :: 2.0\nClassifier: Intended Audience :: Developers\nClassifier: License :: OSI Approved :: MIT License\nClassifier: Operating System :: OS Independent\nClassifier: Programming Language :: Python\nClassifier: Programming Language :: Python :: 2\nClassifier: Programming Language :: Python :: 2.7\nClassifier: Programming Language :: Python :: 3\nClassifier: Programming Language :: Python :: 3.3\nClassifier: Programming Language :: Python :: 3.4\nClassifier: Programming Language :: Python :: 3.5\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/danifus/django-override-storage",
    "keywords": "",
    "license": "Copyright (c) 2017 Daniel Hillier",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-override-storage",
    "platform": "",
    "project_url": "https://pypi.org/project/django-override-storage/",
    "release_url": "https://pypi.org/project/django-override-storage/0.1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Django test helpers to manage file storage side effects.",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8a1d7065337940ce7e72484e08e7d115",
          "sha256": "a52b0c1ac90e0fa28d224ead1d8dee7aa19f4c5a152eb86897650681e33a818e"
        },
        "downloads": -1,
        "filename": "django-override-storage-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8a1d7065337940ce7e72484e08e7d115",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9402,
        "upload_time": "2017-06-02T15:17:24",
        "url": "https://files.pythonhosted.org/packages/b1/90/a85eb015dea666b8db1d94d02b5eec3be1ba2b338e7fb123674906d8ce48/django-override-storage-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ce68cabc50cb2f4305c22e1f23fc0959",
          "sha256": "54c069941895a1af942c3af27395a2729b6b37a3bdae144a11ad65e0a87ca27e"
        },
        "downloads": -1,
        "filename": "django-override-storage-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce68cabc50cb2f4305c22e1f23fc0959",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9216,
        "upload_time": "2017-06-04T00:12:34",
        "url": "https://files.pythonhosted.org/packages/66/cb/d659462a1908955207e4b253ff4585cc590f0099f4380d17921e117f6d43/django-override-storage-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2ca7cb9296981ce7592717284ee76358",
          "sha256": "6631a5e7c64e24b4eebcc9c52ea3990811ccb8b7aad5886fc6071c78cce6509f"
        },
        "downloads": -1,
        "filename": "django_override_storage-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ca7cb9296981ce7592717284ee76358",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 13092,
        "upload_time": "2017-12-07T14:32:17",
        "url": "https://files.pythonhosted.org/packages/39/f4/ffbc47398c6c78c048feecc4a59c99c99cbbb0ed31dc444e805071230d7c/django_override_storage-0.1.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "20ae0761dccf066926d8349b9083bd2b",
          "sha256": "5253ca8e0408cb758e44550561b51b81209a56f18f870449e0e2d1390a154e4a"
        },
        "downloads": -1,
        "filename": "django-override-storage-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "20ae0761dccf066926d8349b9083bd2b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10336,
        "upload_time": "2017-12-07T14:32:18",
        "url": "https://files.pythonhosted.org/packages/c3/ee/afe1a93eec90233c728ad15549679b040f87edb2956ad480e043f5f62966/django-override-storage-0.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2ca7cb9296981ce7592717284ee76358",
        "sha256": "6631a5e7c64e24b4eebcc9c52ea3990811ccb8b7aad5886fc6071c78cce6509f"
      },
      "downloads": -1,
      "filename": "django_override_storage-0.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2ca7cb9296981ce7592717284ee76358",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 13092,
      "upload_time": "2017-12-07T14:32:17",
      "url": "https://files.pythonhosted.org/packages/39/f4/ffbc47398c6c78c048feecc4a59c99c99cbbb0ed31dc444e805071230d7c/django_override_storage-0.1.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "20ae0761dccf066926d8349b9083bd2b",
        "sha256": "5253ca8e0408cb758e44550561b51b81209a56f18f870449e0e2d1390a154e4a"
      },
      "downloads": -1,
      "filename": "django-override-storage-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "20ae0761dccf066926d8349b9083bd2b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10336,
      "upload_time": "2017-12-07T14:32:18",
      "url": "https://files.pythonhosted.org/packages/c3/ee/afe1a93eec90233c728ad15549679b040f87edb2956ad480e043f5f62966/django-override-storage-0.1.2.tar.gz"
    }
  ]
}