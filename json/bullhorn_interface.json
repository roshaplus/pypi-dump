{
  "info": {
    "author": "John-Paul Jorissen",
    "author_email": "jjorissen52@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.6",
      "Topic :: Office/Business"
    ],
    "description": "\nSetup\n=====\n\nEnvironment\n===========\n\nI prefer to use Anaconda for all of my python needs as it does a good\njob of handling packages and virtual environments for you. You can use\nwhatever you like, of course.\n\nLinux\n-----\n\nCreate environment and activate it:\n\n.. code:: ipython3\n\n    conda create -n bullhorn3.6\n    source activate bullhorn3.6\n    pip install -r /path/to/project_root/requirements.txt\n\nWindows\n=======\n\nSame as above, but you will need to perform\n\n.. code:: ipython3\n\n    conda install psycopg2\n    conda install sqlalchemy\n\nafterwards, as there are some dependencies that Anaconda has to work out\nto make these packages work on Windows.\n\nConfiguration and Secrets\n=========================\n\nConfiguration and secrets files by the names of ``conf.py`` and\n``bullhorn_secrets.py`` already exist in\n``/bullhorn_interface/settings/``, and they are capable of passing\n``bullhorn_interface.tests.valid_conf_test()``. However, to use any\nfunctionality of the API, you must change the default configuration.\n\nThe first time you ever import the package, you will be asked to provide\nconfiguration.\n\n.. code:: ipython3\n\n    import bullhorn_interface\n\n\n.. parsed-literal::\n\n    Would you like to use an SQLite or PostgreSQL database for token storage? \n    \t1: PostgreSQL Database\n    \t2: SQLite Database (Default)\n    \n    Note: PostgreSQL is really only necessary for high concurrency; SQLite will suffice in most use cases.\n    1\n    1 selected.\n    Would you like to: \n    \t1: Create a new file named secrets.json and store it in a specified path?\n    \t2: Specify the full path of an existing secrets file?\n    2\n    2 selected. Please specify the name of your secrets file (/path/to/secrets.json): /home/jjorissen/bullhorn_secrets.json\n\n\nYou can modify these configurations at any time.\n\n.. code:: ipython3\n\n    from bullhorn_interface.settings import settings\n    settings.InterfaceSettings.set_conf()\n\n\n.. parsed-literal::\n\n    Would you like to use an SQLite or PostgreSQL database for token storage? \n    \t1: PostgreSQL Database\n    \t2: SQLite Database (Default)\n    \n    Note: PostgreSQL is really only necessary for high concurrency; SQLite will suffice in most use cases.\n    1\n    1 selected.\n\n\n.. code:: ipython3\n\n    settings.InterfaceSettings.set_secrets()\n\n\n.. parsed-literal::\n\n    Would you like to: \n    \t1: Create a new file named secrets.json and store it in a specified path?\n    \t2: Specify the full path of an existing secrets file?\n    2\n    2 selected. Please specify the name of your secrets file (/path/to/secrets.json): /home/jjorissen/bullhorn_secrets.json\n\n\nLet's quickly check those configurations.\n\n.. code:: ipython3\n\n    from bullhorn_interface.settings import settings\n    settings.InterfaceSettings.load_conf()\n\n\n\n\n.. parsed-literal::\n\n    {'SECRETS_LOCATION': '/home/jjorissen/bullhorn_secrets.json',\n     'USE_FLAT_FILES': True}\n\n\n\n.. code:: ipython3\n\n    settings.InterfaceSettings.load_secrets()\n\n\n\n\n.. parsed-literal::\n\n    {'CLIENT_ID': 'IAMYOURBULLHORNID',\n     'CLIENT_SECRET': 'sasdjfhalksjdflaksjd',\n     'DB_PASSWORD': 'asdflkjahsdflkjhalsjdk',\n     'DB_USER': 'your_postgres_user',\n     'EMAIL_ADDRESS': 'youremail@gmail.com',\n     'EMAIL_PASSWORD': 'alsdjhfalskjhlakjshfd'}\n\n\n\nStart a new python console or reload all of the modules so that the\nchanged configurations will propogate.\n\n.. code:: ipython3\n\n    import importlib\n    from bullhorn_interface.settings import settings\n    from bullhorn_interface import api, tests\n    importlib.reload(settings)\n    importlib.reload(api)\n    importlib.reload(tests)\n\n\n\n\n.. parsed-literal::\n\n    <module 'bullhorn_interface.tests' from '/home/jjorissen/anaconda3/envs/bullhorn3.6/lib/python3.6/site-packages/bullhorn_interface/tests.py'>\n\n\n\nWe can check to see if this worked by looking at the database connection\nstring in ``bullhorn_db``.\n\n.. code:: ipython3\n\n    from bullhorn_interface.api import tokenbox\n    tokenbox.connection_strings[\"pg_conn_uri_new\"]\n\n\n\n\n.. parsed-literal::\n\n    'postgresql://jjorissen:the-str0ng35t-0v-p455w0rd5@localhost:5432/bullhorn'\n\n\n\nDatabase Setup\n==============\n\nIf you are configured for SQLite you can skip this bit.\n\nYour ``DB_USER`` must have access to the 'postgres' database on your\npostgreSQL server, and must have sufficient permissions to create and\nedit databases. To create a database to house your tokens:\n\n.. code:: ipython3\n\n    from bullhorn_interface.api import tokenbox\n    tokenbox.create_database() # creates a new database named bullhorn_box\n\n\n.. parsed-literal::\n\n    bullhorn_box created successfully.\n\n\nIf you wish to drop that database for some reason:\n\n.. code:: ipython3\n\n    tokenbox.destroy_database()\n\n\n.. parsed-literal::\n\n    Database named bullhorn_box will be destroyed in 5...4...3...2...1...0\n    bullhorn_box dropped successfully.\n\n\nIt's that easy. The necessary tables will be created automatically when\nthe tokens are generated for the first time, so don't sweat anything!\nFor more information on using ``tokenbox``, visit the `repo\npage <https://github.com/jjorissen52/tokenbox>`__.\n\nGenerate Login Token\n====================\n\nSimply call ``login()`` with a valid username/password combination.\n\n.. code:: ipython3\n\n    from bullhorn_interface import api\n    api.login(username=\"valid_username\", password=\"valid_password\")\n\n.. code:: ipython3\n\n    'New Access Token: {NEW ACCESS TOKEN}'\n\nIf you don't want to store your credentials in a script or text file,\nuse ``login()`` and follow the resulting instructions (you will have to\nuse your own client id and code, don't try to just copy/paste the output\nbelow).\n\n.. code:: ipython3\n\n    api.login()\n\n\n.. parsed-literal::\n\n    Paste this URL into browser https://auth.bullhornstaffing.com/oauth/authorize?client_id=IAMYOURBULLHORNID&response_type=code. \n    Redirect URL will look like this: http://www.bullhorn.com/?code={YOUR CODE WILL BE RIGHT HERE}&client_id=IAMYOURBULLHORNID.\n    \n\n\n.. code:: ipython3\n\n    api.login(code=\"{YOUR CODE WILL BE RIGHT HERE}\")\n\n.. code:: ipython3\n\n    'New Access Token: {NEW ACCESS TOKEN}'\n\nGenerate API Token\n==================\n\nOnce you've been granted a login token from the previous steps, you can\nget a token and url for the rest API.\n\n.. code:: ipython3\n\n    api.get_api_token()\n\n.. code:: ipython3\n\n    \"bh_rest_token\": \"{YOUR BULLHORN REST TOKEN}\",\n    \n    \"rest_url\": \"https://rest32.bullhornstaffing.com/rest-services/{CORP ID}/\"\n\nNote: you may only generate an API Token with a given Login Token once. If your API Token expires, you must login again before attempting to generate another API Token\n=======================================================================================================================================================================\n\nTest Your Configuration (Drumroll...)\n=====================================\n\n.. code:: ipython3\n\n    from bullhorn_interface import api\n    api.api_call()\n\n\n.. parsed-literal::\n\n    Refreshing Access Tokens\n\n\n\n\n.. parsed-literal::\n\n    {'count': 0, 'data': [], 'start': 0, 'total': 0}\n\n\n\nIf you got something that looks like the above or some actual data then\nyou are all configured! Now you can use the API for whatever you need.\n\nUsage\n=====\n\nNow with all of your tokens in order, you can make API calls. This will\nall be done with ``api.api_call``. You'll need to look over the Bullhorn\nAPI Reference Material to know what the heck everything below is about.\n\n-  `API Reference <http://bullhorn.github.io/rest-api-docs/>`__\n-  `Entity\n   Guide <http://bullhorn.github.io/rest-api-docs/entityref.html>`__\n\n``api_call`` key-word arguments:\n\n-  ``command`` (``str``) designates which Bullhorn API command type is\n   being used. Valid options are\n\n   -  ``command=\"search\"``\n\n      -  Will return default fields unless ``select_fields`` is set\n\n   -  ``command=\"query\"``\n\n      -  Will return default fields unless ``select_fields`` is set\n      -  Must designate a where clause using\n         ``kwargs={'where': WHERE_CLAUSE}``\n      -  Can designate other API parameters using ``kwargs`` such as\n         ``kwargs={. . ., 'orderBy': 'id'}``\n\n   -  ``command=\"entity\"``\n\n      -  Must be used in conjunction with approprate ``method``,\n         ``entity``, and ``query`` or ``entity_id``.\n\n-  ``query`` (``str``) allows you to designate an SQL style ``WHERE``\n   clause when using ``command=\"search\"``.\n-  ``entity`` (``str``) designates which `type of\n   entity <http://bullhorn.github.io/rest-api-docs/entityref.html>`__\n   will be selected, created, or updated.\n\n   -  Must use ``method=\"CREATE\"`` or ``method=\"UPDATE\"`` or\n      ``method=\"GET\"``.\n\n-  ``method`` (``str``) designates which HTTP method will be used to\n   carry out the request. ``\"UPDATE\"`` corresponds to ``POST``,\n   ``\"CREATE\"`` corresponds to ``PUT``, and ``\"GET\"`` corresponds to\n   ``GET``. It is unnecessary to specify ``method`` for\n   ``command=\"seach\"`` or ``command=\"query\"``, but it is necessary to\n   specify ``method`` for ``command=\"entity\"``.\n-  ``entity_id`` (``str``) designates the id of the desired entity if\n   ``query`` is not set.\n-  ``select_fields`` (``str`` or ``list``) designates which bullhorn\n   fields will be present in the API response.\n\n   -  ``select_fields=[\"id\", \"firstName\", \"middleName\", \"lastName\", \"comments\", \"notes(*)\"]``\n   -  ``select_fields=\"id, firstName, middleName, lastName, comments, notes(*)\"``\n\n-  ``body`` allows you to pass a request body. This is necessary when\n   updating or creating an entity, for example.\n-  ``auto_refresh`` (``bool``) defaults to ``True``. This argument\n   designates whether or you wish to extend the lifetime of your tokens\n   before carrying out the API call. If you set this to ``False``\n   (because refreshing tokens is time consuming), you will need to\n   implement your own logic to ensure that your tokens are being\n   refreshed at least every ten minutes.\n\nAny other keyword arguemnts will be passed as API parameters when making\nan API call.\n\nExample Usage\n=============\n\nBy default, ``api_call()`` will do a search on the candidate\ncorresponding to ``id:1`` and return the API response object. It will\nrefresh your tokens automatically.\n\nFor testing purposes, ``api_call()`` is equivalent to\n\n.. code:: ipython3\n\n    api_call(command=\"search\", entity=\"Candidate\", query=\"id:1\",\n             select_fields=\"id, firstName, middleName, lastName, comments, notes(*)\",\n             auto_refresh=True)\n\n``api_call()`` is a good way to test whether your setup was successful.\n\n.. code:: ipython3\n\n    api.api_call()\n\n.. code:: ipython3\n\n    Refreshing Access Tokens\n    \n    {'total': 1, 'start': 0, 'count': 1, 'data': [{'id': 424804, 'firstName': 'John-Paul', 'middleName': 'None', 'lastName': 'Jorissen', 'comments': 'I am a comment to be appended.', 'notes': {'total': 0, 'data': []}, '_score': 1.0}]}\n\nGet Candidate IDs (and comments) by first and last name\n=======================================================\n\n.. code:: ipython3\n\n    first_name, last_name = \"John-Paul\", \"Jorissen\"\n    \n    def get_candidate_id(first_name, last_name, auto_refresh=True):\n           return api_call(command=\"search\", entity=\"Candidate\", select_fields=[\"id\", \"comments\"],\n                           query=f\"firstName:{first_name} AND lastName:{last_name}\", auto_refresh=auto_refresh)\n    \n    candidate = get_candidate_id(first_name, last_name, auto_refresh=True)['data']\n    print(candidate)\n\n.. code:: ipython3\n\n    [{'id': 424804, 'comments': 'I am a comment to be appended.', '_score': 1.0}, {'id': 425025, 'comments': '', '_score': 1.0}]\n\nUpdate a Candidate's comments\n=============================\n\n.. code:: ipython3\n\n    candidate_id = candidate[0]['id']\n    comments = 'I am the new comment'\n    body = {\"comments\": comments}\n    api_call(command=\"entity\", entity=\"Candidate\", entity_id=candidate_id, body=body, method=\"UPDATE\")\n\n.. code:: ipython3\n\n    Refreshing Access Tokens\n    {'changedEntityType': 'Candidate', 'changedEntityId': 424804, 'changeType': 'UPDATE', 'data': {'comments': 'I am the new comment'}}\n\n.. code:: ipython3\n\n    print(get_candidate_id(first_name, last_name, auto_refresh=True)['data'])\n\n.. code:: ipython3\n\n    Refreshing Access Tokens\n    \n    [{'id': 425025, 'comments': '', '_score': 1.0}, {'id': 424804, 'comments': 'I am the new comment', '_score': 1.0}]\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jjorissen52/bullhorn_interface",
    "keywords": "Bullhorn Python API RESTAPI",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bullhorn_interface",
    "platform": "",
    "project_url": "https://pypi.org/project/bullhorn_interface/",
    "release_url": "https://pypi.org/project/bullhorn_interface/1.0.11.dev0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A simple Python package to facilitate interactions with the Bullhorn REST API",
    "version": "1.0.11.dev0"
  },
  "releases": {
    "1.0.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cfa2e92bf00f56b01b65da549332d78a",
          "sha256": "54f02c61e0b44a4d8b4de4f80ba6ee87efd4695d08b0cda23327cb82ec182748"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "cfa2e92bf00f56b01b65da549332d78a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12187,
        "upload_time": "2017-08-02T19:34:51",
        "url": "https://files.pythonhosted.org/packages/bc/96/69c224f3bd42adb910435925f9e825f6d7c98cb2841214a206854fa62e05/bullhorn_interface-1.0.0.dev0.tar.gz"
      }
    ],
    "1.0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4f59604f819adb8cf2d7330226f3606c",
          "sha256": "6b4b391d35985d67f7eb506cb068e77a4bcc1986ae98527680b312ace4d4ef60"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "4f59604f819adb8cf2d7330226f3606c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12252,
        "upload_time": "2017-08-02T20:54:13",
        "url": "https://files.pythonhosted.org/packages/2f/3a/6f978e5516c2bb213270f6d76e2fda230553dd9c5d2a5a044cdaca71ddb0/bullhorn_interface-1.0.1.dev0.tar.gz"
      }
    ],
    "1.0.10.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1d324ff4a907022b9f1522680eeb6c4c",
          "sha256": "2ecc51019cf5f460e195a6b56c455094d945f5cc387200dbbb34ba3395560c71"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.10.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "1d324ff4a907022b9f1522680eeb6c4c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13137,
        "upload_time": "2017-08-24T17:06:02",
        "url": "https://files.pythonhosted.org/packages/ee/2e/7d9e2d87e00cb81be1e0205bdfb689ea986827de4388627c79901df1c90a/bullhorn_interface-1.0.10.dev0.tar.gz"
      }
    ],
    "1.0.11.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f85d4365e340212eed227657154607eb",
          "sha256": "de0b2cd6b48a093414ff3a6043b284061b221484b10196e6cbfc4d4c658cce4d"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.11.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "f85d4365e340212eed227657154607eb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9457,
        "upload_time": "2017-08-25T18:06:02",
        "url": "https://files.pythonhosted.org/packages/32/16/e680733853bd1f2be12a5cd47bc14c003a9a2a1dceb277c829cbbd8e254b/bullhorn_interface-1.0.11.dev0.tar.gz"
      }
    ],
    "1.0.2.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2ddf030e652f51a973a190de07e35632",
          "sha256": "f8bf0125131d100287754ba9ac719aecfc2d5455fe7e927cfcec00f4eba49122"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.2.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "2ddf030e652f51a973a190de07e35632",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12169,
        "upload_time": "2017-08-02T21:59:18",
        "url": "https://files.pythonhosted.org/packages/f3/86/69f580fcf7bc67cc98abd6ae67b3f2eba704b7e85f1be29433b2d5b1ec5f/bullhorn_interface-1.0.2.dev0.tar.gz"
      }
    ],
    "1.0.3.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8619b9e9720f89495d24c3c5f0bfaa74",
          "sha256": "893af5241831ba0e8920a9390c2b2efdb781cccc571d20c41112a4de99c916e5"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.3.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "8619b9e9720f89495d24c3c5f0bfaa74",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12186,
        "upload_time": "2017-08-03T13:22:08",
        "url": "https://files.pythonhosted.org/packages/f3/80/42b125abec08eb37ed5a251f69192d6edd76543764095421a27093d6c9ec/bullhorn_interface-1.0.3.dev0.tar.gz"
      }
    ],
    "1.0.4.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6291551addb47e4183c8d430b3a65a73",
          "sha256": "6148bc1b4867bd3f2f6498a41a19734862dda1d5397c89640f6385d4baec2441"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.4.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "6291551addb47e4183c8d430b3a65a73",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11986,
        "upload_time": "2017-08-22T14:38:15",
        "url": "https://files.pythonhosted.org/packages/76/38/9033c08ae5d7ab5f7602bdde6f182296f6899564547a77ee53c73d5c5763/bullhorn_interface-1.0.4.dev0.tar.gz"
      }
    ],
    "1.0.5.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e454d5e98b24ae19d7429bc8d9b5edb0",
          "sha256": "51980f34cb46020d315431ad9f9ee06cd1b38d81a9cc7a7441d2782973c46cbf"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.5.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "e454d5e98b24ae19d7429bc8d9b5edb0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12375,
        "upload_time": "2017-08-22T16:44:07",
        "url": "https://files.pythonhosted.org/packages/0b/ee/5bf976110b5dc23c54d3cce005b2d2201fc6a382a881424b5090b98a9787/bullhorn_interface-1.0.5.dev0.tar.gz"
      }
    ],
    "1.0.6.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4d08eb09b0c90aa90dcfd3c55f14684d",
          "sha256": "d677d94d2f421958c1c3c254c5f4d696d4d6593dde0185950b4e29714fb3697b"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.6.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "4d08eb09b0c90aa90dcfd3c55f14684d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12374,
        "upload_time": "2017-08-22T16:49:51",
        "url": "https://files.pythonhosted.org/packages/87/9f/fac18d5e60cd6be8e6f07be63f0246a272ebd89ce0d573423e0b17407a2a/bullhorn_interface-1.0.6.dev0.tar.gz"
      }
    ],
    "1.0.7.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1f497fb4869e30f2d03a3cf60d02a610",
          "sha256": "b8d37d61a28001a4ca0386504f0ce7d26b781ee6de90e565e9e7d05019989cc9"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.7.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "1f497fb4869e30f2d03a3cf60d02a610",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12993,
        "upload_time": "2017-08-24T16:32:22",
        "url": "https://files.pythonhosted.org/packages/c8/d9/2a359ae21f74416415392b1f97044892e9715720150c743c2849eab9a17d/bullhorn_interface-1.0.7.dev0.tar.gz"
      }
    ],
    "1.0.8.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6c1d1e784a4d7790a9db6010beb44596",
          "sha256": "ed423426f91e457468a033100a9f3b357bbe9678f0803601b375ac9ecfef9b2f"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.8.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "6c1d1e784a4d7790a9db6010beb44596",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13133,
        "upload_time": "2017-08-24T16:56:52",
        "url": "https://files.pythonhosted.org/packages/1b/dd/b1ce302f283c96ad4ae2c5c4edd1c788038d84f55d1065e9f05cc0bef0db/bullhorn_interface-1.0.8.dev0.tar.gz"
      }
    ],
    "1.0.9.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d871156386f4cc2c992e7785f30abf98",
          "sha256": "37e1a0fe7448dabd6a07eb89c352edf76659a1b45c4164d984cf57b7c281b7c5"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.9.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "d871156386f4cc2c992e7785f30abf98",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13133,
        "upload_time": "2017-08-24T17:02:09",
        "url": "https://files.pythonhosted.org/packages/72/37/cb4ea3abc8458e07836ea5d324bba8992726590e743dc91d5adc7ce2b667/bullhorn_interface-1.0.9.dev0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f85d4365e340212eed227657154607eb",
        "sha256": "de0b2cd6b48a093414ff3a6043b284061b221484b10196e6cbfc4d4c658cce4d"
      },
      "downloads": 0,
      "filename": "bullhorn_interface-1.0.11.dev0.tar.gz",
      "has_sig": false,
      "md5_digest": "f85d4365e340212eed227657154607eb",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9457,
      "upload_time": "2017-08-25T18:06:02",
      "url": "https://files.pythonhosted.org/packages/32/16/e680733853bd1f2be12a5cd47bc14c003a9a2a1dceb277c829cbbd8e254b/bullhorn_interface-1.0.11.dev0.tar.gz"
    }
  ]
}