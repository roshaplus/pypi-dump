{
  "info": {
    "author": "John-Paul Jorissen",
    "author_email": "jjorissen52@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.6",
      "Topic :: Office/Business"
    ],
    "description": "\nSetup\n=====\n\nEnvironment\n===========\n\nLinux\n-----\n\nCreate environment and activate it:\n\n.. code:: ipython3\n\n    conda create -n bullhorn3.6\n    source activate bullhorn3.6\n    pip install -r /path/to/project_root/requirements.txt\n\nWindows\n=======\n\nSame as above, but you will need to perform\n\n.. code:: ipython3\n\n    conda install psycopg2\n    conda install sqlalchemy\n\nafterwards.\n\nConfiguration and Secrets\n=========================\n\nConfiguration and secrets files by the names of ``conf.py`` and\n``bullhorn_secrets.py`` already exist in\n``/bullhorn_interface/settings/``, and they are capable of passing\n``bullhorn_interface.tests.valid_conf_test()``. However, to use any\nfunctionality of the API, you must change the default configuration.\n\nBefore editing the configuration let's make sure the installation\nworked.\n\n.. code:: ipython3\n\n    import os\n    from bullhorn_interface import tests\n\n.. code:: ipython3\n\n    tests.valid_conf_test()\n\n\n.. parsed-literal::\n\n    Test Passed.\n\n\nNow lets modify our configuration and secrets files. If we want the\nability the make multiple concurrent API calls, we need to tell the conf\nto use a database and will need to set up a PostgreSQL database to store\nour Login and Access Tokens.\n\n.. code:: ipython3\n\n    from bullhorn_interface import helpers, settings\n    helpers.set_conf()\n\n\n.. parsed-literal::\n\n    Would you like to store your access tokens and login tokens in flat files \n    or in a postgreSQL database? \n    \t1: PostgreSQL Database\n    \t2: Flat Files (Default)\n    \n    Note: Flat files may experience concurrency problems when making simultaneous API calls.\n    1\n    1 selected.\n\n\nWe will also have to modify our secrets file.\n\n.. code:: ipython3\n\n    os.getcwd()\n\n\n\n\n.. parsed-literal::\n\n    '/home/jjorissen'\n\n\n\n.. code:: ipython3\n\n    helpers.set_secrets()\n\n\n.. parsed-literal::\n\n    Would you like to: \n    \t1: Create a new file named bullhorn_secrets.py and store it in a specified path?\n    \t2: Specify the full path of an existing secrets file?\n    1\n    1 selected. Please specify the full path containing your secrets file: (/path/containing/secrets/)/home/jjorissen\n    Please input your Bullhorn Client ID for API development: IAMYOURBULLHORNID\n    Bullhorn Client Secret: \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n    Default gmail address for Bullhorn API Interface used in helpers.send_mail(): youremail@gmail.com\n    Default gmail passwrd for Bullhorn API Interface used in helpers.send_mail(): \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n    PostgreSQL database login role username. (Database used to store access and API tokens): your_postgres_user\n    PostgreSQL database login role password. (Database used to store access and API tokens): \u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\u00b7\n\n\nLet's quickly check those configurations.\n\n.. code:: ipython3\n\n    settings.settings.load_conf()\n\n\n\n\n.. parsed-literal::\n\n    {'SECRETS_LOCATION': '/home/jjorissen/bullhorn_secrets.json',\n     'USE_FLAT_FILES': False}\n\n\n\n.. code:: ipython3\n\n    settings.settings.load_secrets()\n\n\n\n\n.. parsed-literal::\n\n    {'CLIENT_ID': 'IAMYOURBULLHORNID',\n     'CLIENT_SECRET': 'sasdjfhalksjdflaksjd',\n     'DB_PASSWORD': 'asdflkjahsdflkjhalsjdk',\n     'DB_USER': 'your_postgres_user',\n     'EMAIL_ADDRESS': 'youremail@gmail.com',\n     'EMAIL_PASSWORD': 'alsdjhfalskjhlakjshfd'}\n\n\n\nNow we will need to reload all of the modules so that the changed\nconfigurations will propogate.\n\n.. code:: ipython3\n\n    import importlib\n    from bullhorn_interface.settings import settings\n    from bullhorn_interface import api, helpers, tests\n    from bullhorn_interface.alchemy import bullhorn_db\n    importlib.reload(settings)\n    importlib.reload(api)\n    importlib.reload(helpers)\n    importlib.reload(tests)\n    importlib.reload(bullhorn_db)\n\n\n\n\n.. parsed-literal::\n\n    <module 'bullhorn_interface.alchemy.bullhorn_db' from '/home/jjorissen/anaconda3/envs/bullhorn3.6/lib/python3.6/site-packages/bullhorn_interface/alchemy/bullhorn_db.py'>\n\n\n\nWe can check to see if this worked by looking at the database connection\nstring in ``bullhorn_db``.\n\n.. code:: ipython3\n\n    bullhorn_db.DB_CONN_URI_NEW\n\n\n\n\n.. parsed-literal::\n\n    'postgresql://your_postgres_user:asdflkjahsdflkjhalsjdk@localhost:5432/bullhorn'\n\n\n\nDatabase Setup\n==============\n\nIf you have ``USE_FLAT_FILES = True`` you can skip this part.\n\nYour ``DB_USER`` must have access to the 'postgres' database on your\npostgreSQL server, and must have sufficient permissions to create and\nedit databases.\n\nTo create a database to house your tokens:\n\n.. code:: ipython3\n\n    import importlib\n    from bullhorn_interface.settings import settings\n    from bullhorn_interface import api, helpers, tests\n    from bullhorn_interface.alchemy import bullhorn_db\n    bullhorn_db.setup_module() # creates a new database named bullhorn\n    bullhorn_db.create_table() # creates the 'access_token' and 'login_token' table\n\nIf you wish to drop that database:\n\n.. code:: ipython3\n\n    bullhorn_db.teardown_module()\n\nGenerate Login Token\n====================\n\nSimply call ``login()`` with a valid username/password combination.\n\n.. code:: ipython3\n\n    login(username=\"valid_username\", password=\"valid_password\")\n\n.. code:: ipython3\n\n    'New Access Token: {NEW ACCESS TOKEN}'\n\nIf you don't want to store your credentials in a script or text file,\nuse ``login()`` and follow the resulting instructions (you will have to\nuse your own client id and code, don't try to just copy/paste the output\nbelow).\n\n.. code:: ipython3\n\n    api.login()\n\n\n.. parsed-literal::\n\n    Paste this URL into browser https://auth.bullhornstaffing.com/oauth/authorize?client_id=IAMYOURBULLHORNID&response_type=code. \n    Redirect URL will look like this: http://www.bullhorn.com/?code={YOUR CODE WILL BE RIGHT HERE}&client_id=IAMYOURBULLHORNID.\n    \n\n\n.. code:: ipython3\n\n    api.login(code=\"{YOUR CODE WILL BE RIGHT HERE}\")\n\n.. code:: ipython3\n\n    'New Access Token: {NEW ACCESS TOKEN}'\n\nGenerate API Token\n==================\n\nOnce you've been granted a login token from the previous steps, you can\nget a token and url for the rest API.\n\n.. code:: ipython3\n\n    api.get_api_token()\n\n.. code:: ipython3\n\n    \"bh_rest_token\": \"{YOUR BULLHORN REST TOKEN}\",\n    \n    \"rest_url\": \"https://rest32.bullhornstaffing.com/rest-services/{CORP ID}/\"\n\nNote: you may only generate an API Token with a given Login Token once. If your API Token expires, refresh your login token before attempting to generate another API Token.\n============================================================================================================================================================================\n\nUsage\n=====\n\nNow with all of your tokens in order, you can make API calls. This will\nall be done with ``api_call``. ``api_call`` uses the url formulation\noutlined in the following documentation and handles the\nrequests/responses for you. Bullhorn API Reference Material.\n\n-  `API Reference <http://bullhorn.github.io/rest-api-docs/>`__\n-  `Entity\n   Guide <http://bullhorn.github.io/rest-api-docs/entityref.html>`__\n\n``api_call`` key-word arguments:\n\n-  ``command`` (``str``) designates which Bullhorn API command type is\n   being used. Valid options are\n\n   -  ``command=\"search\"``\n\n      -  Will return default fields unless ``select_fields`` is set\n\n   -  ``command=\"query\"``\n\n      -  Will return default fields unless ``select_fields`` is set\n      -  Must designate a where clause using\n         ``kwargs={'where': WHERE_CLAUSE}``\n      -  Can designate other API parameters using ``kwargs`` such as\n         ``kwargs={. . ., 'orderBy': 'id'}``\n\n   -  ``command=\"entity\"``\n\n      -  Must be used in conjunction with approprate ``method``,\n         ``entity``, and ``query`` or ``entity_id``.\n\n-  ``query`` (``str``) allows you to designate an SQL style ``WHERE``\n   clause when using ``command=\"search\"``.\n-  ``entity`` (``str``) designates which `type of\n   entity <http://bullhorn.github.io/rest-api-docs/entityref.html>`__\n   will be selected, created, or updated.\n\n   -  Must use ``method=\"CREATE\"`` or ``method=\"UPDATE\"`` or\n      ``method=\"GET\"``.\n\n-  ``method`` (``str``) designates which HTTP method will be used to\n   carry out the request. ``\"UPDATE\"`` corresponds to ``POST``,\n   ``\"CREATE\"`` corresponds to ``PUT``, and ``\"GET\"`` corresponds to\n   ``GET``. It is unnecessary to specify ``method`` for\n   ``command=\"seach\"`` or ``command=\"query\"``, but it is necessary to\n   specify ``method`` for ``command=\"entity\"``.\n-  ``entity_id`` (``str``) designates the id of the desired entity if\n   ``query`` is not set.\n-  ``select_fields`` (``str`` or ``list``) designates which bullhorn\n   fields will be present in the API response.\n-  ``body`` allows you to pass a request body. This is necessary when\n   updating or creating an entity, for example.\n-  ``auto_refresh`` (``bool``) defaults to ``True``. This argument\n   designates whether or you wish to update your Login Token and API\n   Token before carrying out the API call. If you set this to ``False``\n   (because refreshing tokens is time consuming), you will need to\n   implement your own logic to ensure that your tokens are being\n   refreshed at least every ten minutes.\n-  ``kwargs`` (``dict``) allows you to pass any additional necessary API\n   parameters when making an API call.\n\nExample Usage\n=============\n\nBy default, ``api_call()`` will do a search on the candidate\ncorresponding to ``id:1`` and return the API response object. It will\nrefresh your tokens automatically.\n\nFor testing purposes, ``api_call()`` is equivalent to\n\n.. code:: ipython3\n\n    api_call(command=\"search\", entity=\"Candidate\", query=\"id:1\",\n             select_fields=[\"id\", \"firstName\", \"middleName\", \"lastName\", \"comments\", \"notes(*)\"],\n             auto_refresh=True)\n\n``api_call()`` is a good way to test whether your setup was successful.\n\n.. code:: ipython3\n\n    api.api_call()\n\n.. code:: ipython3\n\n    Refreshing Access Tokens\n    \n    {'total': 1, 'start': 0, 'count': 1, 'data': [{'id': 424804, 'firstName': 'John-Paul', 'middleName': 'None', 'lastName': 'Jorissen', 'comments': 'I am a comment to be appended.', 'notes': {'total': 0, 'data': []}, '_score': 1.0}]}\n\nGet Candidate IDs (and comments) by first and last name\n=======================================================\n\n.. code:: ipython3\n\n    first_name, last_name = \"John-Paul\", \"Jorissen\"\n    \n    def get_candidate_id(first_name, last_name, auto_refresh=True):\n           return api_call(command=\"search\", entity=\"Candidate\", select_fields=[\"id\", \"comments\"],\n                           query=f\"firstName:{first_name} AND lastName:{last_name}\", auto_refresh=auto_refresh)\n    \n    candidate = get_candidate_id(first_name, last_name, auto_refresh=True)['data']\n    print(candidate)\n\n.. code:: ipython3\n\n    [{'id': 424804, 'comments': 'I am a comment to be appended.', '_score': 1.0}, {'id': 425025, 'comments': '', '_score': 1.0}]\n\nUpdate a Candidate's comments\n=============================\n\n.. code:: ipython3\n\n    candidate_id = candidate[0]['id']\n    comments = 'I am the new comment'\n    body = {\"comments\": comments}\n    api_call(command=\"entity\", entity=\"Candidate\", entity_id=candidate_id, body=body, method=\"UPDATE\")\n\n.. code:: ipython3\n\n    Refreshing Access Tokens\n    {'changedEntityType': 'Candidate', 'changedEntityId': 424804, 'changeType': 'UPDATE', 'data': {'comments': 'I am the new comment'}}\n\n.. code:: ipython3\n\n    print(get_candidate_id(first_name, last_name, auto_refresh=True)['data'])\n\n.. code:: ipython3\n\n    Refreshing Access Tokens\n    \n    [{'id': 425025, 'comments': '', '_score': 1.0}, {'id': 424804, 'comments': 'I am the new comment', '_score': 1.0}]\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jjorissen52/bullhorn_interface",
    "keywords": "Bullhorn Python API RESTAPI",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bullhorn_interface",
    "platform": "",
    "project_url": "https://pypi.org/project/bullhorn_interface/",
    "release_url": "https://pypi.org/project/bullhorn_interface/1.0.6.dev0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A simple Python package to facilitate interactions with the Bullhorn REST API",
    "version": "1.0.6.dev0"
  },
  "releases": {
    "1.0.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cfa2e92bf00f56b01b65da549332d78a",
          "sha256": "54f02c61e0b44a4d8b4de4f80ba6ee87efd4695d08b0cda23327cb82ec182748"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "cfa2e92bf00f56b01b65da549332d78a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12187,
        "upload_time": "2017-08-02T19:34:51",
        "url": "https://files.pythonhosted.org/packages/bc/96/69c224f3bd42adb910435925f9e825f6d7c98cb2841214a206854fa62e05/bullhorn_interface-1.0.0.dev0.tar.gz"
      }
    ],
    "1.0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4f59604f819adb8cf2d7330226f3606c",
          "sha256": "6b4b391d35985d67f7eb506cb068e77a4bcc1986ae98527680b312ace4d4ef60"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "4f59604f819adb8cf2d7330226f3606c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12252,
        "upload_time": "2017-08-02T20:54:13",
        "url": "https://files.pythonhosted.org/packages/2f/3a/6f978e5516c2bb213270f6d76e2fda230553dd9c5d2a5a044cdaca71ddb0/bullhorn_interface-1.0.1.dev0.tar.gz"
      }
    ],
    "1.0.2.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2ddf030e652f51a973a190de07e35632",
          "sha256": "f8bf0125131d100287754ba9ac719aecfc2d5455fe7e927cfcec00f4eba49122"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.2.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "2ddf030e652f51a973a190de07e35632",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12169,
        "upload_time": "2017-08-02T21:59:18",
        "url": "https://files.pythonhosted.org/packages/f3/86/69f580fcf7bc67cc98abd6ae67b3f2eba704b7e85f1be29433b2d5b1ec5f/bullhorn_interface-1.0.2.dev0.tar.gz"
      }
    ],
    "1.0.3.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8619b9e9720f89495d24c3c5f0bfaa74",
          "sha256": "893af5241831ba0e8920a9390c2b2efdb781cccc571d20c41112a4de99c916e5"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.3.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "8619b9e9720f89495d24c3c5f0bfaa74",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12186,
        "upload_time": "2017-08-03T13:22:08",
        "url": "https://files.pythonhosted.org/packages/f3/80/42b125abec08eb37ed5a251f69192d6edd76543764095421a27093d6c9ec/bullhorn_interface-1.0.3.dev0.tar.gz"
      }
    ],
    "1.0.4.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6291551addb47e4183c8d430b3a65a73",
          "sha256": "6148bc1b4867bd3f2f6498a41a19734862dda1d5397c89640f6385d4baec2441"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.4.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "6291551addb47e4183c8d430b3a65a73",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11986,
        "upload_time": "2017-08-22T14:38:15",
        "url": "https://files.pythonhosted.org/packages/76/38/9033c08ae5d7ab5f7602bdde6f182296f6899564547a77ee53c73d5c5763/bullhorn_interface-1.0.4.dev0.tar.gz"
      }
    ],
    "1.0.5.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e454d5e98b24ae19d7429bc8d9b5edb0",
          "sha256": "51980f34cb46020d315431ad9f9ee06cd1b38d81a9cc7a7441d2782973c46cbf"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.5.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "e454d5e98b24ae19d7429bc8d9b5edb0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12375,
        "upload_time": "2017-08-22T16:44:07",
        "url": "https://files.pythonhosted.org/packages/0b/ee/5bf976110b5dc23c54d3cce005b2d2201fc6a382a881424b5090b98a9787/bullhorn_interface-1.0.5.dev0.tar.gz"
      }
    ],
    "1.0.6.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4d08eb09b0c90aa90dcfd3c55f14684d",
          "sha256": "d677d94d2f421958c1c3c254c5f4d696d4d6593dde0185950b4e29714fb3697b"
        },
        "downloads": 0,
        "filename": "bullhorn_interface-1.0.6.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "4d08eb09b0c90aa90dcfd3c55f14684d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12374,
        "upload_time": "2017-08-22T16:49:51",
        "url": "https://files.pythonhosted.org/packages/87/9f/fac18d5e60cd6be8e6f07be63f0246a272ebd89ce0d573423e0b17407a2a/bullhorn_interface-1.0.6.dev0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4d08eb09b0c90aa90dcfd3c55f14684d",
        "sha256": "d677d94d2f421958c1c3c254c5f4d696d4d6593dde0185950b4e29714fb3697b"
      },
      "downloads": 0,
      "filename": "bullhorn_interface-1.0.6.dev0.tar.gz",
      "has_sig": false,
      "md5_digest": "4d08eb09b0c90aa90dcfd3c55f14684d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 12374,
      "upload_time": "2017-08-22T16:49:51",
      "url": "https://files.pythonhosted.org/packages/87/9f/fac18d5e60cd6be8e6f07be63f0246a272ebd89ce0d573423e0b17407a2a/bullhorn_interface-1.0.6.dev0.tar.gz"
    }
  ]
}