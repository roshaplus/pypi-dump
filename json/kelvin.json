{
  "info": {
    "author": "Michael Kleehammer",
    "author_email": "michael@kleehammer.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Microsoft :: Windows",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "\r\nFreezes Python 3.6+ code into a Windows executable.\r\n\r\nThere are other projects that do this, but none were an exact fit for something simple.\r\n\r\n* Has a simple API that can be used outside of distutils / setuptools.\r\n* Python 3.6 support\r\n* Unlike some maintainers, I actually have Windows\r\n\r\nInstalling\r\n==========\r\n\r\nKelvin contains two executables which are built from C++ source, so use a binary wheel when\r\npossible::\r\n\r\n    pip install kelvin\r\n\r\nIf you want to build it yourself, install Visual Studio Build Tools 2017.\r\n\r\n*Note:* Be sure to choose the Windows 8 SDK in the installer, not the Windows 10 SDK.  The\r\nWindows 10 SDK does not include rc.exe (or it is not in the path), so the linking will fail\r\nwith::\r\n\r\n    LINK : fatal error LNK1158: cannot run 'rc.exe'\r\n\r\n\r\nUsing\r\n=====\r\n\r\nImport the kelvin Builder class and pass the appropriate options to its constructor.  Then call build()::\r\n\r\n    from kelvin.builder import Builder\r\n\r\n    b = Builder(script='src\\\\prog.py', dist='dist')\r\n    b.build()\r\n\r\nThis example creates the executable ``dist\\prog.exe`` by analyzing the source for prog.py.\r\n\r\nOptions\r\n-------\r\n\r\nBelow are the Builder constructor parameters.  Only ``script``, ``dist``, and ``version`` are\r\nrequired.\r\n\r\nscript\r\n  The initial script to start analyzing.  Kelvin will start from this to find dependencies.\r\n\r\ndist\r\n  The distribution directory where the executable will be constructed.  If the directory\r\n  exists, all content will be deleted without confirmation!  Make sure this is correct.  If it\r\n  doesn't exist, it will be created.\r\n\r\nversion\r\n  A string that determines the file version like \"1.2.3.4\".  Since this is put into the\r\n  executable's version resource, it can only contain numbers and periods.  It cannot contain\r\n  things like \"-rc1\".  This is a Windows limitation.\r\n\r\n  Windows versions always have 4 parts.  If you specify fewer, \".0\" will be appended for each\r\n  missing part.\r\n\r\nversion_strings\r\n\r\n  Strings that are also included in the version resource and show up on the \"Details\" tab of\r\n  the executable's property sheet.  These are provided a dictionary mapping a language id, such\r\n  as 0x0409 for U.S. English, to another dictionary mapping from key to value::\r\n\r\n      version_strings = {\r\n          0x0409: {\r\n              'ProductName': 'product',\r\n              'ProductVersion' : '1.2',\r\n              'FileVersion': '1.2.3',\r\n              'FileDescription': 'Descriptiion'\r\n          }\r\n      }\r\n\r\n  Note: The FileVersion entry is a string, but it must only contain 1-4 numbers.  If you\r\n  put other things there, it causes the version information to be silently ignored.\r\n\r\nfilename\r\n  Normally the executable filename is the same as the ``script`` parameter, but a different\r\n  filename can be supplied here.  This should not contain a path - the resulting executable\r\n  will be put into the ``dist`` directory.\r\n\r\nsubsystem\r\n  Can be 'console' (the default) or 'windows'.  This determines whether the final executable\r\n  is a console application (also used for Windows services) or a GUI application.\r\n\r\npath\r\n  Directories that dependencies can be found in, such as library directories.  Kelvin will\r\n  automatically search directories already in ``sys.path``, so I recommend using virtual\r\n  environments to ensure you don't include global items.\r\n\r\ninclude\r\n  A sequence of module names to include, used when modules cannot be identified automatically.\r\n  They can be Python modules or extension modules.\r\n\r\nexclude\r\n  Modules to exclude, used when modules are referenced in code but are known to not be needed.\r\n  Kelvin has a large list of exclusions (in analyze.py) for items that are not needed on\r\n  Windows, such as posixpath.  (At this time there is no way to disable the default excludes.)\r\n\r\npackage_paths\r\n  If you have namespace packages that are split across multiple directories, you'll need to\r\n  pass them here.  Kelvin does not actually run your code, so utilities like\r\n  pkgutils.extend_path won't take effect.\r\n\r\n  Provide a dictionary mapping from package name to a sequence of directories::\r\n\r\n      package_paths={'mylib': ('lib\\\\mylib1', 'lib\\\\mylib2')}\r\n\r\nextra\r\n  A sequence of non-code files to be put into the executable.  Each entry can be a relative\r\n  filename, which will be copied into the executable with the same relative name, or a tuple\r\n  pair containing the source path and the path to use in the archive::\r\n\r\n      extra = [\r\n          'data\\\\schema.json',\r\n          ('..\\\\docs\\\\README.rst', 'data\\\\README.rst)\r\n      ]\r\n\r\n  This would include the put both files in the executable in a data directory.\r\n\r\n  To retrieve these files at runtime, open the executable (``sys.executable``) as a zip file\r\n  using the zipfile package.\r\n\r\nlogger\r\n  A logging.Logger instance for Kelvin to output to.  If not provided, a logger named \"kelvin\"\r\n  is used.\r\n\r\n  Kelvin outputs very little at the INFO level.  It outputs more at the DEBUG level which may\r\n  be useful for troubleshooting. It also very detailed information at level 1, though this is\r\n  most likely of interest for Kelvin development.  (There is no constant like \"TRACE\" for this,\r\n  so use ``logger.setLevel(1)``.)\r\n\r\n\r\nreport\r\n  Set to True to have ModuleFinder's report printed to the console.  This can be useful for\r\n  debugging.\r\n\r\n\r\n\r\nHow It Works\r\n============\r\n\r\nPython's built-in ModuleFinder class is used to analyze your source to find all modules it\r\nuses.\r\n\r\nA precompiled executable is copied into the distribution directory.  All needed Python modules\r\nare compiled into a zip file which is appended to the executable.  On startup, the executable\r\nputs itself into ``sys.path`` and Python will load modules from it normally like any other zip\r\nfile.  (Interestingly, zip files are processed starting from the end, so we have a zip file\r\nwith \"garbage\" (the executable) at the beginning which is ignored.)\r\n\r\nExtension modules are actually DLLs, so they are copied, along with any dependencies, into the\r\ndistribution directory, which is also added to ``sys.path``.\r\n\r\nThis project used to support Python 2.7+, but I am now only supporting Python 3.6+ since it no\r\nlonger requires messing with Windows manifest files.  (It is possible that change was made in\r\nPython in 3.5.)  If you need a manifest file, you can either add it after the executable is\r\ncomplete or you can put it in the same directory as the executable.\r\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://www.gitlab.com/mkleehammer/kelvin",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kelvin",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/kelvin/",
    "release_url": "https://pypi.org/project/kelvin/2.0.2/",
    "requires_python": "",
    "summary": "Freezes Python scripts into Windows apps",
    "version": "2.0.2"
  },
  "releases": {
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8e52e2c4a41ce9920d0055594f86b85f",
          "sha256": "39ca8c2212d0edccd6220bf5431928c2e0808b099cc606e1fe4878fe8c80af32"
        },
        "downloads": 0,
        "filename": "kelvin-2.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e52e2c4a41ce9920d0055594f86b85f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 33234,
        "upload_time": "2017-06-16T16:13:46",
        "url": "https://files.pythonhosted.org/packages/f0/db/9825372f43face0b43471e79bce82d7caff19a43d1430c1801f3d7e21b0c/kelvin-2.0.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "315b4025f3fef924af233547e7e0fcae",
          "sha256": "ab6607d09d58c0d9fd293491c30c872c4285a4616e70716002ca40b4c9c9b100"
        },
        "downloads": 0,
        "filename": "kelvin-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "315b4025f3fef924af233547e7e0fcae",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16271,
        "upload_time": "2017-06-16T16:13:48",
        "url": "https://files.pythonhosted.org/packages/d3/ac/bc9c99da67f9a85aa65410000c8ec0c2d93fd48e82bf715a4ab97cbdf6f9/kelvin-2.0.1.tar.gz"
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "281f901bb2b9da19a2cebe9493cae380",
          "sha256": "a206bda72f1a95e7da0406b4b5a5fd7470db881a4d2b6783903a56f99125346f"
        },
        "downloads": 0,
        "filename": "kelvin-2.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "281f901bb2b9da19a2cebe9493cae380",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 33236,
        "upload_time": "2017-06-16T22:23:32",
        "url": "https://files.pythonhosted.org/packages/a9/a9/8a6491c11054f26f80937d426635123a5bc63ef1ded79bfcd2c552eb84ab/kelvin-2.0.2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ed8310cf1cfdd6d222859cecb1df07c8",
          "sha256": "447731f5ebde4ffd9bbe493c39774006e1f6a15adcf229470fbc4a67815e41b1"
        },
        "downloads": 0,
        "filename": "kelvin-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ed8310cf1cfdd6d222859cecb1df07c8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16283,
        "upload_time": "2017-06-16T22:23:34",
        "url": "https://files.pythonhosted.org/packages/29/9c/3a4d0a6b8eba5ad677077884022cffa67b5e61cb9bc0513cc31ee8e676f8/kelvin-2.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "281f901bb2b9da19a2cebe9493cae380",
        "sha256": "a206bda72f1a95e7da0406b4b5a5fd7470db881a4d2b6783903a56f99125346f"
      },
      "downloads": 0,
      "filename": "kelvin-2.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "281f901bb2b9da19a2cebe9493cae380",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 33236,
      "upload_time": "2017-06-16T22:23:32",
      "url": "https://files.pythonhosted.org/packages/a9/a9/8a6491c11054f26f80937d426635123a5bc63ef1ded79bfcd2c552eb84ab/kelvin-2.0.2-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "ed8310cf1cfdd6d222859cecb1df07c8",
        "sha256": "447731f5ebde4ffd9bbe493c39774006e1f6a15adcf229470fbc4a67815e41b1"
      },
      "downloads": 0,
      "filename": "kelvin-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ed8310cf1cfdd6d222859cecb1df07c8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 16283,
      "upload_time": "2017-06-16T22:23:34",
      "url": "https://files.pythonhosted.org/packages/29/9c/3a4d0a6b8eba5ad677077884022cffa67b5e61cb9bc0513cc31ee8e676f8/kelvin-2.0.2.tar.gz"
    }
  ]
}