{
  "info": {
    "author": "Michael Axiak, Alec Berryman, Israel Tsadok, Alex Willmer",
    "author_email": "alin.p32@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Cython",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 3.3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=====\npyre2\n=====\n\n.. contents::\n\nSummary\n=======\n\npyre2 is a Python extension that wraps\n`Google's RE2 regular expression library <https://github.com/google/re2>`_.\nThe RE2 engine compiles (strictly) regular expressions to\ndeterministic finite automata, which guarantees linear-time behavior.\n\nIntended as a drop-in replacement for ``re``. Unicode is supported by encoding\nto UTF-8, and bytes strings are treated as UTF-8 when the UNICODE flag is given.\nFor best performance, work with UTF-8 encoded bytes strings.\n\nBackwards Compatibility\n=======================\n\nThe stated goal of this module is to be a drop-in replacement for ``re``, i.e.::\n\n    try:\n        import re2 as re\n    except ImportError:\n        import re\n\nThat being said, there are features of the ``re`` module that this module may\nnever have; these will be handled through fallback to the original ``re`` module``:\n\n    - lookahead assertions ``(?!...)``\n    - backreferences (``\\\\n`` in search pattern)\n    - \\W and \\S not supported inside character classes\n\nOn the other hand, unicode character classes are supported (e.g., ``\\p{Greek}``).\nSyntax reference: https://github.com/google/re2/wiki/Syntax\n\nHowever, there are times when you may want to be notified of a failover. The\nfunction ``set_fallback_notification`` determines the behavior in these cases::\n\n    try:\n        import re2 as re\n    except ImportError:\n        import re\n    else:\n        re.set_fallback_notification(re.FALLBACK_WARNING)\n\n``set_fallback_notification`` takes three values:\n``re.FALLBACK_QUIETLY`` (default), ``re.FALLBACK_WARNING`` (raise a warning),\nand ``re.FALLBACK_EXCEPTION`` (raise an exception).\n\nInstallation\n============\n\nPrerequisites:\n\n* The `re2 library from Google <https://github.com/google/re2>`_\n* The Python development headers (e.g. ``sudo apt-get install python-dev``)\n* A build environment with ``gcc`` or ``clang`` (e.g. ``sudo apt-get install build-essential``)\n* Cython 0.20+ (``pip install cython``)\n\nAfter the prerequisites are installed, install as follows (``pip3`` for python3)::\n\n    $ pip install https://github.com/andreasvc/pyre2/archive/master.zip\n\nFor development, get the source::\n\n    $ git clone git://github.com/andreasvc/pyre2.git\n    $ cd pyre2\n    $ make install\n\n(or ``make install3`` for Python 3)\n\nDocumentation\n=============\n\nConsult the docstring in the source code or interactively\nthrough ipython or ``pydoc re2`` etc.\n\nUnicode Support\n===============\n\nPython ``bytes`` and ``unicode`` strings are fully supported, but note that\n``RE2`` works with UTF-8 encoded strings under the hood, which means that\n``unicode`` strings need to be encoded and decoded back and forth.\nThere are two important factors:\n\n* whether a ``unicode`` pattern and search string is used (will be encoded to UTF-8 internally)\n* the ``UNICODE`` flag: whether operators such as ``\\w`` recognize Unicode characters.\n\nTo avoid the overhead of encoding and decoding to UTF-8, it is possible to pass\nUTF-8 encoded bytes strings directly but still treat them as ``unicode``::\n\n    In [18]: re2.findall(u'\\w'.encode('utf8'), u'M\u00f6tley Cr\u00fce'.encode('utf8'), flags=re2.UNICODE)\n    Out[18]: ['M', '\\xc3\\xb6', 't', 'l', 'e', 'y', 'C', 'r', '\\xc3\\xbc', 'e']\n    In [19]: re2.findall(u'\\w'.encode('utf8'), u'M\u00f6tley Cr\u00fce'.encode('utf8'))\n    Out[19]: ['M', 't', 'l', 'e', 'y', 'C', 'r', 'e']\n\nHowever, note that the indices in ``Match`` objects will refer to the bytes string.\nThe indices of the match in the ``unicode`` string could be computed by\ndecoding/encoding, but this is done automatically and more efficiently if you\npass the ``unicode`` string::\n\n    >>> re2.search(u'\u00fc'.encode('utf8'), u'M\u00f6tley Cr\u00fce'.encode('utf8'), flags=re2.UNICODE)\n    <re2.Match object; span=(10, 12), match='\\xc3\\xbc'>\n    >>> re2.search(u'\u00fc', u'M\u00f6tley Cr\u00fce', flags=re2.UNICODE)\n    <re2.Match object; span=(9, 10), match=u'\\xfc'>\n\nFinally, if you want to match bytes without regard for Unicode characters,\npass bytes strings and leave out the ``UNICODE`` flag (this will cause Latin 1\nencoding to be used with ``RE2`` under the hood)::\n\n    >>> re2.findall(br'.', b'\\x80\\x81\\x82')\n    ['\\x80', '\\x81', '\\x82']\n\nPerformance\n===========\n\nPerformance is of course the point of this module, so it better perform well.\nRegular expressions vary widely in complexity, and the salient feature of ``RE2`` is\nthat it behaves well asymptotically. This being said, for very simple substitutions,\nI've found that occasionally python's regular ``re`` module is actually slightly faster.\nHowever, when the ``re`` module gets slow, it gets *really* slow, while this module\nbuzzes along.\n\nIn the below example, I'm running the data against 8MB of text from the colossal Wikipedia\nXML file. I'm running them multiple times, being careful to use the ``timeit`` module.\nTo see more details, please see the `performance script <http://github.com/axiak/pyre2/tree/master/tests/performance.py>`_.\n\n+-----------------+---------------------------------------------------------------------------+------------+--------------+---------------+-------------+-----------------+----------------+\n|Test             |Description                                                                |# total runs|``re`` time(s)|``re2`` time(s)|% ``re`` time|``regex`` time(s)|% ``regex`` time|\n+=================+===========================================================================+============+==============+===============+=============+=================+================+\n|Findall URI|Email|Find list of '([a-zA-Z][a-zA-Z0-9]*)://([^ /]+)(/[^ ]*)?|([^ @]+)@([^ @]+)'|2           |6.262         |0.131          |2.08%        |5.119            |2.55%           |\n+-----------------+---------------------------------------------------------------------------+------------+--------------+---------------+-------------+-----------------+----------------+\n|Replace WikiLinks|This test replaces links of the form [[Obama|Barack_Obama]] to Obama.      |100         |4.374         |0.815          |18.63%       |1.176            |69.33%          |\n+-----------------+---------------------------------------------------------------------------+------------+--------------+---------------+-------------+-----------------+----------------+\n|Remove WikiLinks |This test splits the data by the <page> tag.                               |100         |4.153         |0.225          |5.43%        |0.537            |42.01%          |\n+-----------------+---------------------------------------------------------------------------+------------+--------------+---------------+-------------+-----------------+----------------+\n\nFeel free to add more speed tests to the bottom of the script and send a pull request my way!\n\nCurrent Status\n==============\n\nThe tests show the following differences with Python's ``re`` module:\n\n* The ``$`` operator in Python's ``re`` matches twice if the string ends\n  with ``\\n``. This can be simulated using ``\\n?$``, except when doing\n  substitutions.\n* ``pyre2`` and Python's ``re`` behave differently with nested and empty groups;\n  ``pyre2`` will return an empty string in cases where Python would return None\n  for a group that did not participate in a match.\n\nPlease report any further issues with ``pyre2``.\n\nTests\n=====\n\nIf you would like to help, one thing that would be very useful\nis writing comprehensive tests for this. It's actually really easy:\n\n* Come up with regular expression problems using the regular python 're' module.\n* Write a session in python traceback format `Example <http://github.com/axiak/pyre2/blob/master/tests/search.txt>`_.\n* Replace your ``import re`` with ``import re2 as re``.\n* Save it as a .txt file in the tests directory. You can comment on it however you like and indent the code with 4 spaces.\n\n\nCredits\n=======\nThis code builds on the following projects (in chronological order):\n\n- Google's RE2 regular expression library: https://github.com/google/re2\n- Facebook's pyre2 github repository: http://github.com/facebook/pyre2/\n- Mike Axiak's Cython version of this: http://github.com/axiak/pyre2/ (seems not actively maintained)\n- This fork adds Python 3 support and other improvements.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/alin23/pyre2/",
    "keywords": "",
    "license": "New BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "re3",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/re3/",
    "release_url": "https://pypi.org/project/re3/0.2.23/",
    "requires_python": "",
    "summary": "Python wrapper for Google's RE2 using Cython",
    "version": "0.2.23"
  },
  "releases": {
    "0.2.23": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1e2c50dbb41a58e3bc96da2812fe4a9d",
          "sha256": "e7d52c88a02fc7105ce44f2d208ab87a2f325d567537ba50e0aa15de7a90a8a6"
        },
        "downloads": 0,
        "filename": "re3-0.2.23-cp27-cp27m-macosx_10_12_x86_64.whl",
        "has_sig": false,
        "md5_digest": "1e2c50dbb41a58e3bc96da2812fe4a9d",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 135210,
        "upload_time": "2017-05-15T09:27:19",
        "url": "https://files.pythonhosted.org/packages/17/12/297087636fced604801a083f147768e2a9b720f942fe0e1793ec1d7a8958/re3-0.2.23-cp27-cp27m-macosx_10_12_x86_64.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1e2c50dbb41a58e3bc96da2812fe4a9d",
        "sha256": "e7d52c88a02fc7105ce44f2d208ab87a2f325d567537ba50e0aa15de7a90a8a6"
      },
      "downloads": 0,
      "filename": "re3-0.2.23-cp27-cp27m-macosx_10_12_x86_64.whl",
      "has_sig": false,
      "md5_digest": "1e2c50dbb41a58e3bc96da2812fe4a9d",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "size": 135210,
      "upload_time": "2017-05-15T09:27:19",
      "url": "https://files.pythonhosted.org/packages/17/12/297087636fced604801a083f147768e2a9b720f942fe0e1793ec1d7a8958/re3-0.2.23-cp27-cp27m-macosx_10_12_x86_64.whl"
    }
  ]
}