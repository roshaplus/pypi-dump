{
  "info": {
    "author": "R. Leonhardt, R. Bailey, M. Miklavec",
    "author_email": "roman.leonhardt@zamg.ac.at",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "===========\nMagPy\n===========\n\nVersion Info: (please note: this package is still in development state with frequent modifcations)\ncurrent: v0.3.91\n\nPlease check Release version info on\nhttps://github.com/geomagpy/magpy/releases\nfor details on changes\n\nMagPy (GeomagPy) provides tools for geomagnetic analysis with special\nfocus on typical data processing in observatories. MagPy provides\nmethods for format conversion, plotting routines and mathematical\nprocedures with special geomagnetic analysis routines like basevalue and\nbaseline calculation, database features and routines. Among the\nsupported data formats are: ImagCDF, IAGA-02, WDC, IMF, IAF, BLV, and\nmany more. Full installation further provides a graphical user interface\n- xmagpy.\n\n\nTypical usage often looks like this:\n\n::\n\n        #!/usr/bin/env python\n\n        from magpy.stream import read\n        import magpy.mpplot as mp\n        stream = read(path_or_url='filename')\n        mp.plot(stream,['x'])\n\nBelow you will find a quick guide for the MagPy package. The quickest\napproach can be accomplished when skipping everything except the\ntutorials.\n\n1. INSTALL\n----------\n\n1.1 Windows installation - WinPython Package\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1.1.1 install NASA `CDF <https://cdf.gsfc.nasa.gov/>`__ support\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  enabling CDF support for formats like ImagCDF: go to\n   http://cdf.gsfc.nasa.gov/\n-  get and install a recent version of CDF e.g. cdf36\\_2\\_1-setup-32.exe\n\n1.1.2 install MagPy for Windows\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  get the MagPy Windows installer here:\n   http://www.conrad-observatory.at\n-  download and execute magpy-0.x.x.exe\n\n1.1.3 postinstallation information\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  check your programs overview for MagPy: here you will find three\n   sub-menus\n\n   ::\n\n       * python -> open a python shell ready for MagPy\n       * xmagpy -> open the graphical user interface of MagPy\n\nIMPORTANT: NASA CDF and SpacePy only support 32 bit\n\n1.2 Linux/MacOs installations - Anaconda\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1.2.1 install `Anaconda <https://www.continuum.io/downloads>`__ for your operating system\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  https://docs.continuum.io/anaconda/install (currently tested on\n   anaconda with python2.7)\n\n1.2.2 install NASA CDF support\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  http://cdf.gsfc.nasa.gov/ dowload and install the latest cdf version\n   for your operating system (installation instructions are provided on\n   this webpage)\n\n1.2.3 install MagPy and SpacePy (required for CDF support)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  open the anaconda prompt or change to the anaconda2/bin directory (if\n   not set as default)\n-  run './pip install spacepy' known issues: installation of spacepy\n   eventually requires a fortran compiler\n-  run './pip install geomagpy' possible issues: MySQL-python problem ->\n   install libmysqlclient-dev on linux (e.g. debian/ubuntu: sudo apt-get\n   install libmysqlclient-dev)\n\n1.2.4 postinstallation information\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  please note that anaconda provides a full python environment with\n   many packages not used by MagPy\n-  for a \"slim\" installation follow the \"from scratch\" instructions\n   below (for experienced users)\n-  for upgrades: run './pip install geomagpy --upgrade' Installation\n   provides both shell based magpy and the graphical user interface\n   xmagpy\n\n   ::\n\n       * type \"python\" -> opens a python shell ready for MagPy\n       * type \"xmagpy\" in a shell -> open the graphical user interface of MagPy\n\n-  adding a shortcut for xmagpy: coming soon\n\n1.3 MacOs installations - MacPorts\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1.3.1 install `MacPorts <https://www.macports.org/>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n1.3.2 coming soon\n^^^^^^^^^^^^^^^^^\n\n1.4 Platform independent installations - Docker\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n1.4.1 Install `Docker <https://www.docker.com/>`__ (toolbox) for your operating system\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n     - https://docs.docker.com/engine/installation/\n\n1.4.2 Get the MagPy Image\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n     - open a docker shell\n\n            >>> docker pull geomagpy/magpy:latest\n            >>> docker run -d --name magpy -p 8000:8000 geomagpy/magpy:latest\n\n1.4.3 Open a browser\n^^^^^^^^^^^^^^^^^^^^\n\n::\n\n     - open address http://localhost:8000 (or http://\"IP of your VM\":8000)\n     - NEW: first time access might require a token or passwd\n\n            >>> docker logs magpy\n\n          will show the token \n     - run python shell (not conda) \n     - in python shell\n\n            >>> %matplotlib inline\n            >>> from magpy.stream import read\n            >>> ...\n\n1.5 Install from source - Experts only\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRequirements: - Python 2.7,3.x (xmagpy will only work with python 2.7)\n\nRecommended: - Python packages: \\* NasaCDF \\* SpacePy () \\* pexpect (for\nSSH support)\n\n-  Other useful Software:\n\n   -  MySQL (database features)\n   -  NetCDF4 (support is currently in preparation)\n   -  Webserver (e.g. Apache2, PHP)\n\n1.5.1 Linux\n^^^^^^^^^^^\n\nA) Get python packages and other extensions (for other distros than\n   debian/ubuntu install similar packages): sudo apt-get install\n   python-numpy python-scipy python-matplotlib python-nose\n   python-wxgtk2.8 python-wxtools python-dev build-essential\n   python-networkx python-h5py python-f2py gfortran ncurses-dev\n   libhdf5-serial-dev hdf5-tools libnetcdf-dev python-netcdf\n   python-serial python-twisted owfs python-ow python-setuptools\n   git-core mysql-server python-mysqldb libmysqlclient-dev sudo pip\n   install ffnet sudo pip install pexpect sudo pip install pyproj\n\nB) Get CDF and Omni database support:\n\n   a) CDF (Nasa): http://cdf.gsfc.nasa.gov/html/sw\\_and\\_docs.html\n      (tested with 3.6.1.0, please check validity of belows make command\n      for any future versions)\n\n      tar -zxvf cdf36\\_1-dist-all.tar.gz cd cdf36\\* make OS=linux\n      ENV=gnu CURSES=yes FORTRAN=no UCOPTIONS=-O2 SHARED=yes all sudo\n      make INSTALLDIR=/usr/local/cdf install\n\n   b) SpacePy (Los Alamos):\n      https://sourceforge.net/projects/spacepy/files/spacepy/ (tested\n      with 0.1.6)\n\n      sudo pip install spacepy\n\nC) Install MagPy\n\n   a) Using pip\n\n      sudo pip install GeomagPy\n\n      -  specific version: sudo pip install GeomagPy==v0.3.9\n\n   b) Using github (latest development versions)\n\n      git clone git://github.com/GeomagPy/MagPy.git cd MagPy\\* sudo\n      python setup.py install\n\n1.5.2 Windows\n^^^^^^^^^^^^^\n\n| Tested on XP, Win7, Win10 a) Get a current version of Python(x,y) and\n  install it optionally select packages ffnet and netcdf during install\n  - for cdf support b) Download nasaCDF packages and install (see links\n  above) c) get python-spacepy package d) download and unpack\n  GeomagPy-x.x.x.tar.gz e) open a command window f) go to the unpacked\n  directory e.g. cd\n  c::raw-latex:`\\user`:raw-latex:`\\Downloads`:raw-latex:`\\GeomagPy`\n| g) execute \"setup.py install\"\n\n2. A Quick guide to MagPy\n-------------------------\n\nwritten by R. Leonhardt, R. Bailey (April 2017)\n\n2.1 Getting started\n~~~~~~~~~~~~~~~~~~~\n\nStart python.... then import the basic read method form the stream\nobject\n\n::\n\n    from magpy.stream import read\n\nYou should get an output like:\n\n::\n\n    MagPy version x.x.xxx\n    Loaded Matplotlib - Version [1, 1, 1]\n    Loading Numpy and SciPy...\n    Loading SpacePy package cdf support ...\n    trying CDF lib in /usr/local/cdf\n    SpacePy: Space Science Tools for Python\n    SpacePy is released under license.\n    See __licence__ for details, __citation__ for citation information,\n    and help() for HTML help.\n    ... success\n    Loading python's SQL support\n    ... success\n\n2.2 Reading and writing data\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMagPy supports the following data formats and thus conversions between\nthem: WDC: World Data Centre format JSON: JavaScript Object Notation\nIMF: Intermagnet Format IAF: Intermagnet Archive Format NEIC: WGET data\nfrom USGS - NEIC IAGA: IAGA 2002 text format IMAGCDF: Intermagnet CDF\nFormat GFZKP: GeoForschungsZentrum KP-Index format GSM19/GSM90: Output\nformats from GSM magnetometers POS1: POS-1 binary output BLV: Baseline\nformat Intermagnet IYFV: Yearly mean format Intermagnet and many\nothers... To get a full list:\n\n::\n\n        from magpy.stream import *\n        print (PYMAG_SUPPORTED_FORMATS)\n\nYou will find several example files provided together with mapy. The\n``cdf`` file is stored along with meta information in the NASA's common\ndata format (cdf). Reading this file requires a working installation of\nSpacepy cdf and a ``'success'`` information when Loading SpacePy as\nshown in (a).\n\nIf you do not have any geomagnetic data file you can access example data\nby using the following commands:\n\n::\n\n        data = read(example1)\n\n2.2.1 Reading:\n^^^^^^^^^^^^^^\n\n::\n\n        data = read(r'myfile.min') \n\nor\n\n::\n\n        data = read(r'/path/to/file/myfile.min') \n\nor\n\n::\n\n        data = read(r'c:\\path\\to\\file\\myfile.min')\n\nPathnames are related to your operating system. In the following we will\nassume a Linux system. Any file is uploaded to the memory and each data\ncolumn (or header information) is assigned to an internal variable\n(key). To get a quick overview about the assigned keys you can use the\nfollowing method:\n\n::\n\n        print data._get_key_headers() \n\nAfter loading some data file we would like to save it as IAGA02 and\nIMAGCDF output\n\n2.2.2 Writing:\n^^^^^^^^^^^^^^\n\nCreating an IAGA-02 format:\n\n::\n\n        data.write(r'/path/to/diretory/',format_type='IAGA')\n\nCreating a `INTERMAGNET <http://www.intermagnet.org>`__ CDF (ImagCDF)\nformat:\n\n::\n\n        data.write(r'/path/to/diretory/',format_type='IMAGCDF')\n\nBy default, daily files are created and the date is added to the\nfilename inbetween the optional parameters ``filenamebegins`` and\n``filenameends``. If ``filenameends`` is missing, ``.txt`` is used as\ndefault.\n\n2.2.3 Other possibilities to read files:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAll local files ending with .min within a directory:\n\n::\n\n        data = read(r'/path/to/file/*.min')\n\nGetting magnetic data directly from the WDC:\n\n::\n\n        data = read(r'ftp://thewellknownaddress/single_year/2011/fur2011.wdc')\n\nGetting kp data from the GFZ Potsdam:\n\n::\n\n        data = read(r'http://www-app3.gfz-potsdam.de/kp_index/qlyymm.tab')\n\n(please note: data access and usage is subjected to terms and policy of\nthe indvidual data provider. Please make sure to read them before\naccessing any of these products.)\n\nNo format specifications are required for reading. If MagPy can handle\nthe format, it will be automatically recognized.\n\nGetting data of a specific time window: Local files:\n\n::\n\n        data = read(r'/path/to/files/*.min',starttime=\"2014-01-01\", endtime=\"2014-05-01\")\n\nRemote files:\n\n::\n\n        data = read(r'ftp://address/fur2013.wdc',starttime=\"2013-01-01\", endtime=\"2013-02-01\")\n\nINTERMAGNET Webservice (starting soon):\n\n::\n\n        data = read('http://www.intermagnet.org/test/ws/?id=WIC')\n\n2.2.4 Selecting timerange\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can trim the data stream anytime later to a specified time interval\nby applying the trim method:\n\n::\n\n        data = data.trim(starttime=\"2013-01-01\", endtime=\"2013-02-01\")\n\n2.2.5 Tutorial\n^^^^^^^^^^^^^^\n\nFor the ongoing quick example please use the following steps. This will\ncreate daily IAGA02 files within the directory. Please make sure that\nthe directory is empty before writing data to it.\n\nA) Load example data\n\nAlong with magpy, we provide several example data sets: example1:\n`INTERMAGNET <http://www.intermagnet.org>`__ CDF (ImagCDF) file with 1\nsecond data example2: `INTERMAGNET <http://www.intermagnet.org>`__\nArchive format (IAF) file with 1 min, 1 hour, K and mean data example3:\nMagPy readable DI data file with data from 1 single DI measurement\nexample4: MagPy Basevalue file (PYSTR) with analysis results of several\nDI data\n\n::\n\n        # Replace example1 with a full path, if you have your own data \n        data = read(example1)\n\nB) Store it locally in your favorite directory\n\n   ::\n\n       data.write('/tmp/',filenamebegins='MyExample_', format_type='IAGA')\n\nPlease note that storing data in a different formt might require\nadditional meta information. Checkout section (i) on how to deal with\nthese aspects.\n\n2.3 Getting help on options and usage\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n2.3.1 Pythons help function\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInformation on individual methods and their options can be obtained as\nfollows:\n\nFor basic functions:\n\n::\n\n        help(read)\n\nFor specific methods related to e.g. a stream object \"data\":\n\n::\n\n        help(data.fit)\n\n(this reqires the existance of a \"data\" object, which is obtained e.g.\nby data = read(...) or data = DataStream() )\n\n2.3.2 Tutorial\n^^^^^^^^^^^^^^\n\n::\n\n        help(data.fit)\n\n2.4 Plotting\n~~~~~~~~~~~~\n\nYou will find some example plots at the `Conrad\nObservatory <http://www.conrad-observatory.at>`__.\n\n2.4.1 Quick (and not dirty)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n        from magpy import mpplot as mp\n        mp.plot(data)\n\n2.4.2 Some options\n^^^^^^^^^^^^^^^^^^\n\nSelect specific keys:\n\n::\n\n        mp.plot(data,variables=['x','y','z'])\n\n2.4.3 Multiple streams\n^^^^^^^^^^^^^^^^^^^^^^\n\nProvide a list of stream and an array of keys:\n\n::\n\n        mp.plotStreams([data1,data2],[['x','y','z'],['f']])\n\n2.4.4 Tutorial\n^^^^^^^^^^^^^^\n\nRead a second stream\n\n::\n\n        otherdata = read(WDC)\n\nPlot xyz data from both streams\n\n::\n\n        mp.plotStreams([data,otherdata]) \n\n2.5 Flagging data\n~~~~~~~~~~~~~~~~~\n\n| The flagging procedure allows the observer to mark specific data (like\n  spikes, storm onsets, pulsations, disturbances, lightning strikes,\n  etc). Each flag is asociated with a comment and a type number.\n  Flagtype number ranges between 0 and 4. 0: normal data with comment\n  (e.g. Hello World) 1: automatic process added mark (e.g. spike) 2:\n  observer marked data as valid geomagnetic signature (e.g. storm onset,\n  pulsation) - such data cannot be marked invalid by automatic\n  procedures 3: observer marked data as invalid (e.g. lightning,\n  magnetic disturbance) 4: merging mark (e.g. data inserted from another\n  source/instrument as defined in the comment)\n| Flags can be stored along with the data set (requires CDF output) or\n  separatly in a binary archive. These flags can then be applied anytime\n  to the raw data again, acertaining perfect reproducability.\n\n2.5.1 Mark spikes\n^^^^^^^^^^^^^^^^^\n\nGetting a spiked record:\n\n::\n\n        datawithspikes = read(example1)\n\nMark all spikes using defaults options\n\n::\n\n        flaggeddata = datawithspikes.flag_outlier(timerange=timedelta(minutes=1),threshold=3)\n\nShow flagged data data\n\n::\n\n        mp.plot(flaggeddata,['f'],annotate=True)\n\n2.5.2 Flag range\n^^^^^^^^^^^^^^^^\n\nFlag a certain time range\n\n::\n\n        flaglist = flaggeddata.flag_range(keys=['f'], starttime='2012-08-02T04:33:40', endtime='2012-08-02T04:44:10', flagnum=3, text=\"iron metal near sensor\")\n\nApply flags to data\n\n::\n\n        flaggeddata = flaggeddata.flag(flaglist)\n\nShow flagged data data\n\n::\n\n        mp.plot(flaggeddata,['f'],annotate=True)\n\n2.5.3 Save flagged data\n^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n        flaggeddata.write('/tmp/',filenamebegins='MyFlaggedExample_', format_type='PYCDF')\n\n    Check it:\n        newdata = read(\"/tmp/MyFlaggedExample_*\")\n        mp.plot(newdata,annotate=True, plottitle='Reloaded flagged CDF data')\n\n2.5.4 Save flags separately\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n        fullflaglist = flaggeddata.extractflags()\n        saveflags(fullflaglist,\"/tmp/MyFlagList.pkl\"))\n\n    Check it:\n        data = read(example1)\n        flaglist = loadflags(\"/tmp/MyFlagList.pkl\")\n        data = data.flag(flaglist)\n        mp.plot(data,annotate=True, plottitle='Raw data with flags from file')\n\n2.5.5 Drop flagged data\n^^^^^^^^^^^^^^^^^^^^^^^\n\nFor some further analyses it is necessary to drop data marked invalid.\nBy default the following method removes all data marked with flagtype\nnumbers 1 and 3.\n\n::\n\n        cleandata = flaggeddata.remove_flagged()\n        mp.plot(cleandata, ['f'], plottitle='Flagged data dropped')\n\n2.6 Basic methods\n~~~~~~~~~~~~~~~~~\n\n2.6.1 Filtering\n^^^^^^^^^^^^^^^\n\nFiltering uses by default\n`IAGA <http://www.iaga-aiga.org/>`__/`INTERMAGNET <http://www.intermagnet.org>`__\nrecommended settings. Ckeck help(data.filter) for options and possible\ndefinitions of filter types and pass bands.\n\nGet sampling rate before filtering in seconds:\n\n::\n\n        print (\"Sampling rate before [sec]:\", cleandata.samplingrate())\n\nFilter the data set with default parameters (automatically chooses the\ncorrect settings depending on provided sanmpling rate):\n\n::\n\n        filtereddata = cleandata.filter()\n\nGet sampling rate and filter data after filtering (please note that all\nfilterinformation is added to the data's meta information dictionary\n(data.header):\n\n::\n\n        print (\"Sampling rate after [sec]:\", filtereddata.samplingrate())\n        print (\"Filter and pass band:\", filtereddata.header.get('DataSamplingFilter',''))\n\n2.6.2 Coordinate transform\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAssuming vector data in columns x,y,z you can freely convert between\nxyz, hdz, idf:\n\n::\n\n        cleandata = cleandata.xyz2hdz()\n\n2.6.3 Calculate delta F\n^^^^^^^^^^^^^^^^^^^^^^^\n\nIf the data file contains x,y,z (hdz, idf) data and an independently\nmeasured f value you can calculate delta F:\n\n::\n\n        cleandata = cleandata.delta_f()\n        mp.plot(cleandata,plottitle='Data with delta F')\n\n2.6.4 Calculate Means\n^^^^^^^^^^^^^^^^^^^^^\n\nMean values for certain data columns can be obtained using the mean\nmethod. Missing data is considered using the percentage option (default\n95). If more data is missing as denoted by this value, then no mean is\ncalulated (result NaN).\n\n::\n\n        print (cleandata.mean('df', percentage=80))\n\n2.6.5 Applying offsets\n^^^^^^^^^^^^^^^^^^^^^^\n\nConstant offsets can be added to individual columns using the offset\nmethod.\n\n::\n\n        offsetdata = cleandata.offset({'time':timedelta(seconds=0.19),'f':1.24})\n\n2.6.6 Scaling data\n^^^^^^^^^^^^^^^^^^\n\nIndividual columns can also be mulitplied by provided values.\n\n::\n\n        multdata = cleandata.multiply({'x':1.1})\n\n2.6.7 Fit functions\n^^^^^^^^^^^^^^^^^^^\n\nMagPy offers the possibility to fit data using either polynomial\nfunctions or cubic splines (default).\n\n::\n\n        func = cleandata.fit(keys=['x','y','z'],knotstep=0.1)\n        mp.plot(cleandata,variables=['x','y','z'],function=func)\n\n2.6.8 Derivatives\n^^^^^^^^^^^^^^^^^\n\nDerivaties, which are useful to identify outliers and sharp changes, are\ncalculated as follows:\n\n::\n\n        diffdata = cleandata.differentiate(keys=['x','y','z'],put2keys = ['dx','dy','dz'])\n        mp.plot(diffdata,variables=['dx','dy','dz'])\n\n2.6.9 All methods at a glance\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA summary of all supported methods is provided in section x.\n\n2.7 Geomagnetic analysis\n~~~~~~~~~~~~~~~~~~~~~~~~\n\n2.7.1 Determination of K indicies\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nMagPy supports the FMI method for determination of K indicies. Please\nread the MagPy publication for details on this method and its\napplication. A month of one minute data is provided in example2, which\ncorresponds to an `INTERMAGNET <http://www.intermagnet.org>`__ IAF\narchive file. Reading such a file will load one minute data by default.\nAccessing hourly data and other information is described below.\n\n::\n\n        data2 = read(example2)\n        kvals = data2.k_fmi()\n\nDetemination of K values will nees a while as the filtering window is\ndyanmically adjusted within this method. In order to plot original data\n(H component) and K values together we now use the multiple stream\nplotting method plotStreams. Here you need to provide at least a list of\nstreams and an array containing variables for each stream. The\nadditional options determine the look (limits, bar chart, symbols).\n\n::\n\n        mp.plotStreams([data2,kvals],[['x'],['var1']],specialdict = [{},{'var1':[0,9]}],symbollist=['-','z'],bartrange=0.06)\n\n2.7.2 Geomagnetic storm detection\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGeomagnetic storm detection is supported by MagPy using two procedures\nbased on wavelets and the Akaike-information criterion as outlined in\ndetail by Bailey and Leonhardt (2016).\n\n2.7.3 Sq analysis\n^^^^^^^^^^^^^^^^^\n\nMethods are currently in preparation.\n\n2.7.4 Validity check of data\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA common application of such software can be a general validity check of\ngeomagnetic data too be submitted to\n`IAGA <http://www.iaga-aiga.org/>`__, WDC, or\n`INTERMAGNET <http://www.intermagnet.org>`__. Please note: this is\ncurrently under development and will be extended in the near future. A\n'one-click' test method will be included into xmagpy, checking:\n\nA) Validity of data formats (e.g.):\n\n   ::\n\n       data = read(myiaffile.bin, debug=True) \n\nB) Completness of meta information\n\nC) Conformity of applied techniques with respective rules\n\nD) Internal consistency of data\n\nE) Optional: Regional consistency\n\n2.7.5 Spectral Analysis and Noise\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFor analysis of spectral data, magpy provides two basic plotting\nmethods. plotPS will caluclate and display a powerspectrum of the\nselected component. plotSpectrogram will show a spectrogram of the\ntimeseries. As usual, there are many options on windows and processing\nparameters which can be accessed by the help method.\n\n::\n\n        data = read(example1)\n        mp.plotPS(data,key='f')\n        help(mp.plotSpectrogram)\n        mp.plotSpectrogram(data,['f'])\n\n2.8 Multiple streams\n~~~~~~~~~~~~~~~~~~~~\n\n2.8.1 Merging streams\n^^^^^^^^^^^^^^^^^^^^^\n\nMerging data comprises combinations of two stream into one new stream.\nThis includes adding a new column from another stream, filling gaps with\ndata from another stream or replacing data from one column with data\nfrom another stream. The following example scetches the typical usage:\n\n::\n\n        print (\"     Used columns in data2:\", data2._get_key_headers())\n        newstream = mergeStreams(data2,kvals,keys=['var1'])\n        print (\"     Columns now:\", data2._get_key_headers())\n\nIf column \"var1\" s not existing in data2, then this column is added. If\ncolumn var1 would exist, then missing data would be inserted from stream\nkvals. In order to replace any existing data use option\n\"mode='replace'\".\n\n2.8.2 Differences\n^^^^^^^^^^^^^^^^^\n\nSometimes it is necessary to examine differences between two data\nstreams e.g. differences between the F values of two instruments running\nin parallel at the observatory. For this analyses teh method\n\"subtractStreams\" is provided.\n\n::\n\n        diff = subtractStreams(data1,data2,keys=['f'])\n\n2.9 The art of meta information\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEach data set is accompanied by a dictionary containing meta information\nfor this data. This dictionary is completely dynamic and can be filled\nfreely. Yet there are a number of predefined fields, which should help\nthe user to provide essential meta information as requested by\n`IAGA <http://www.iaga-aiga.org/>`__,\n`INTERMAGNET <http://www.intermagnet.org>`__ and other data providers.\nAll provided meta information is saved only to MagPy own archive\nformat's 'PYCDF' and 'PYSTR'. All other export formats save only\nspecific information as required the projected format.\n\nThe current content of this dictionary can be accessed by:\n\n::\n\n        data = read(example1)\n        print (data.header)\n\nInformation is added/changed by:\n\n::\n\n        data.header['SensorName'] = 'FGE'\n\nIndividual information is obtained from the dictionary by:\n\n::\n\n        print (data.header.get('SensorName'))\n\nIf you want to have a more readable list of the header information do:\n\n::\n\n        for key in data.header:\n            print (\"Key: {} \\t Content: {}\".format(key,data.header.get(key)))\n\n2.9.1 Conversions to ImagCDF - adding meta\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf you convert data from `IAGA <http://www.iaga-aiga.org/>`__ or IAF\nformats to the new `INTERMAGNET <http://www.intermagnet.org>`__ CDF\nformat, you usually need to add additional meta information which is\nrequired for the new data formats. MagPy assists you here, firstly by\nextracting and correctly adding already existing meta information\ntowrads newly defined fields and secondly by informing you which\ninformation needs to be added for producing correct output formats.\n\nExample: IAGA02 to ImagCDF\n\n::\n\n        mydata = read(some IAGA-02 file)\n        mydata.write('/tmp',format_type='IMAGCDF')\n\nThe console output of the write command (see below) will tell you which\ninformation needs to be added (and how) in order to obtain correct\nImagCDF files. Please note, MagPy will store the data in any case and\nwill be able to read it again even if information is missing. Before\nsubmitting to a GIN, you need to make sure that the appropriate\ninformation is contained. Attributes that relate to publication of the\ndata are not checked so far, and might be included into .\n\n::\n\n        >>>Writing IMAGCDF Format /tmp/wic_20150828_0000_PT1M_4.cdf\n        >>>writeIMAGCDF: StandardLevel not defined - please specify by yourdata.header['DataStandardLevel'] = ['None','Partial','Full']\n        >>>writeIMAGCDF: Found F column\n        >>>writeIMAGCDF: given components are XYZF. Checking F column...\n        >>>writeIMAGCDF: analyzed F column - values are apparently independend from vector components - using column name 'S'\n\nNow add the missing information. Selecting 'Partial' will require\nadditional information. You will get a 'reminder' if you forget this.\nPlease check IMAGCDF instructions for codes.:\n\n::\n\n        mydata.header['DataStandardLevel'] = 'Partial'\n        mydata.header['DataPartialStandDesc'] = 'IMOS-01,IMOS-02,IMOS-03,IMOS-04,IMOS-05,IMOS-06,IMOS-11,IMOS-12,IMOS-13,IMOS-14,IMOS-15,IMOS-21,IMOS-22,IMOS-31,IMOS-41'\n\nSimilar informations are obtained for other conversions like:\n\n::\n\n        mydata.write('/tmp',format_type='IAGA')\n        mydata.write('/tmp',format_type='IMF')\n        mydata.write('/tmp',format_type='IAF',coverage='month')\n        mydata.write('/tmp',format_type='WDC')\n\n2.9.2 Providing location data\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nProviding location data usually requires information on the reference\nsystem (ellepsoid,...). By default MagPy assums that these values are\nprovided in WGS84/WGS84 reference system. In order to facilitate most\neasy referencing and conversions, MagPy supports\n`epsg <https://www.epsg-registry.org/>`__ codes for coordinates. If you\nprovide the geodetic references as follows, and provided that the\n`proj4 <https://github.com/OSGeo/proj.4>`__ python package is available\nthen MagPy will automatically convert location data to the requested\noutput format (currently WGS84).\n\n::\n\n        mydata.header['DataAcquisitionLongitude'] = -34949.9\n        mydata.header['DataAcquisitionLatitude'] = 310087.0\n        mydata.header['DataLocationReference'] = 'GK M34, EPSG: 31253'\n\n        >>>...\n        >>>writeIMAGCDF: converting coordinates to epsg 4326\n        >>>...\n\n2.9.3 Special meta information fields\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe meta information fields can hold much more information as requested\nby most output formats. This includes basevalue, baseline parameters,\nflagging details, detailed sensor information, serial numbers and many\nmore. MagPy makes use of these possibilities. In order to save these\ninformation along with your data set you can use MagPy internal\narchiving format (PYCDF) of which any of the above mentioned\noutputformats can be obtained. You can even reconstruct a full data base\n(see section l). Any upcoming meta information or output request can be\neasily added/modified without disrupting already existing data sets, and\nthe possibilities to read/analyse old data. This data format is also\nbased on Nasa CDF. Ascii outputs are also supported by MagPy of which\nthe PYSTR format also contains all meta information and PYASCII is least\nspace consuming. Please consider that such ascii format require a lot of\nmemory especially for one second and higher resolution data.\n\n::\n\n        mydata.write('/tmp',format_type='PYCDF',coverage='year')\n\n2.10 Data transfer\n~~~~~~~~~~~~~~~~~~\n\nMagPy contains a number of methods to simplify data transfer for\nobservatory applications. Beside you can always use the basic python\nfunctionality. Using the implemented methods requires:\n\n::\n\n        from magpy import transfer as mt\n\n2.10.1 Downloads\n^^^^^^^^^^^^^^^^\n\nJust use the read method as outlined in section a. No additional imports\nare required.\n\n2.10.2 Ftp upload\n^^^^^^^^^^^^^^^^^\n\nThe upload methods using ftp, scp and gin support logging. If the data\nfile failed to upload correctly, the path is added to a log file and,\nwhen called again, upload is retried. This option is useful for remote\nlocations with unstable network connections.\n\n::\n\n        mt.ftpdatatransfer(localfile='/path/to/data.cdf',ftppath='/remote/directory/',myproxy='ftpaddress or address of proxy',port=21,login='user',passwd='passwd',logfile='/path/mylog.log')\n\n2.10.3 Secure communication\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n        mt.scptransfer('user@address:/remote/directory/','/path/to/data.cdf',passwd,timeout=60)\n\n2.10.4 Upload data to GIN\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n        mt.ginupload('/path/to/data.cdf', ginuser, ginpasswd, ginaddress, faillog=True, stdout=True)\n\n2.10.5 Avoiding real-text passwords in scripts\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIn order to avoid using real-text password in scripts, MagPy comes along\nwith a simple encryption routine.\n\n::\n\n        from magpy.opt import cred as mpcred\n\nAdding encrypted passwd information for data transfer to a maschine\ncalled 'MyRemoteFTP' with an IP of 192.168.0.99:\n\n::\n\n        mpcred.cc('transfer', 'MyRemoteFTP', user='user', passwd='secure', address='192.168.0.99', port=21)\n\nExtracting passwd information within your data transfer scripts:\n\n::\n\n        password=mpcred.lc('MyRemoteFTP','passwd')\n\n2.11 DI measurements, basevalues and baselines\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThese procedures require an additional object\n\n::\n\n        from magpy import absolutes as di\n\n2.11.1 Data structure of DI measurements\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nPlease check example3 which is an example DI file. You can create these\nDI files by using the input sheet from xmagpy or the online input sheet\nprovided by the Conrad Observatory. If you want to use this service,\nplease contact the Observatory staff. Also supported are di-files from\nAUTODIF.\n\n2.11.2 Reading DI data\n^^^^^^^^^^^^^^^^^^^^^^\n\nReading and analyzing DI data requires valid DI file(s). For correct\nanalysis, variometer data and scalar informations needs to be provided\nas well. Checkout help(di.absoluteAnalysis) for all options. The\nanalytical procedures are outlined in detail in the MagPy article\n(citation). A typical analysis looks like:\n\n::\n\n        diresult = di.absoluteAnalysis('/path/to/DI/','path/to/vario/','path/to/scalar/')\n\nPath to DI can either point to a single file, a directory or even use\nwildcards to select data fro a specific observatory/pillar. Using the\nexamples provided along with MagPy the analysis line looks like\n\n::\n\n        diresult = di.absoluteAnalysis(example3,example2,example2)\n\nCalling this method will provide an output the terminal as follows and a\nstream object 'diresult' which can be used further.\n\n::\n\n        >>>...\n        >>>Analyzing manual measurement from 2015-03-25\n        >>>Vector at: 2015-03-25 08:18:00+00:00\n        >>>Declination: 3:53:46, Inclination: 64:17:17, H: 21027.2, Z: 43667.9, F: 48466.7\n        >>>Collimation and Offset:\n        >>>Declination:    S0: -3.081, delta H: -6.492, epsilon Z: -61.730\n        >>>Inclination:    S0: -1.531, epsilon Z: -60.307\n        >>>Scalevalue: 1.009 deg/unit\n        >>>Fext with delta F of 0.0 nT\n        >>>Delta D: 0.0, delta I: 0.0\n\nFext indicates that F values have been used from a separate file and not\nprovided along with DI data. Delta values for F, D, and I have not been\nprovided either. ``diresult`` is a stream object containing average D, I\nand F values, the collimation angles, scale factors and the base values\nfor the selected variometer, beside some additional meta information\nprovided in the data input form.\n\n2.11.3 Reading BLV files\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nBasevalues:\n\n::\n\n        blvdata = read('/path/myfile.blv')\n        mp.plot(blvdata, symbollist=['o','o','o'])\n\nAdopted baseline:\n\n::\n\n        bldata = read('/path/myfile.blv',mode='adopted')\n        mp.plot(bldata)\n\n2.11.4 Basevalues and baselines\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nBasevalues as obtained in (2.11.2) or (2.11.3) are stored in a normal\ndata stream object and therefore all methods outlined before can be\napplied to this data. The ``diresult`` object contains D, I, and F\nvalues for each measurement in columns x,y,z. Basevalues for H, D and Z\nrelated to the selected variometer are stored in columns dx,dy,dz. In\n``example4`` you will find some more di analysis results. To plot these\nbasevalues we can use the following plot command, where we specify the\ncolumns, filled circles as plotsymbols and also define a minimum spread\nof each y-axis of +/- 5 nT for H and Z, +/- 0.05 deg for D.\n\n::\n\n        basevalues = read(example4)\n        mp.plot(basevalues, variables=['dx','dy','dz'], symbollist=['o','o','o'], padding=[5,0.05,5])\n\nFitting a baseline can be easily accomplished with the fit method.\nFirstly we test a linear fit to the data, by fitting a polynom with\ndegree 1.\n\n::\n\n        func = basevalues.fit(['dx','dy','dz'],fitfunc='poly', fitdegree=1)\n        mp.plot(basevalues, variables=['dx','dy','dz'], symbollist=['o','o','o'], padding=[5,0.05,5], function=func)\n\nThe we fit a spline function using 3 knowsteps over the timerange (the\nknotstep option always relatively refers to the given timerange 1).\n\n::\n\n        func = basevalues.fit(['dx','dy','dz'],fitfunc='spline', knotstep=0.33)\n        mp.plot(basevalues, variables=['dx','dy','dz'], symbollist=['o','o','o'], padding=[5,0.05,5], function=func)\n\nHint: a good estimate on the necessary fit complexity can be obtained by\nlooking at delta F values. If delta F is rather constant, then also the\nbaseline should not be complex either.\n\n2.11.5 Applying baselines\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe baseline method provides a number of options to assist the observer\nin determining baseline corrections and realted issues. The basic\nbuilding block of the baseline method is the fit function as discussed\nabove. Lets first load vectorial geomagnetic raw data for which\nbasevalues are contained in above example:\n\n::\n\n        rawdata = read(example5)\n\nNow we can apply the basevalue information and the spline function as\ntested above:\n\n::\n\n        func = rawdata.baseline(basevalues, extradays=0, fitfunc='spline', knotstep=0.33,startabs='2015-09-01',endabs='2016-01-22')\n\nThe ``baseline`` method will determine and return a fit function between\nthe two given timeranges, based on the provided basevalue data\n``blvdata``. The option extradays allows for adding days before and\nafter start/endtime for which the baselinefunction will be extrapolated.\nThis option is useful for providing quasidefinitive data. When applying\nthis method, a number of new meta infomartion attributes will be added,\ncontaining basevalues and all functional parameter to describe the\nbaseline. Thus, stream object still contains uncorrected raw data, but\nall baseline correction information is now contained within its meta\ndata. To apply baseline correction you can issue the ``bc`` method.\n\n::\n\n        corrdata = rawdata.bc()\n\nIf baseline jumps/breaks are necessary, you call the baseline function\nfor each independend segment and then join the corrected streams:\n\n::\n\n        stream_a = read(mydata,starttime='2016-01-01',endtime='2016-02-01')\n        func = stream_a.baseline(blvdata, extradays=0, fitfunc='spline', knotstep=0.3,startabs='2016-01-01',endabs='2016-02-01')\n        corr = stream_a.bc()\n\n        stream_b = read(mydata,starttime='2016-02-01',endtime='2016-03-01')\n        func_b = stream.baseline(blvdata, extradays=0, fitfunc='poly', degree=1,startabs='2016-02-01',endabs='2016-03-01')\n        corr_b = stream_b.bc()\n\n        func.extend(func_b)\n        corr.extend(corr_b)\n\n        mp.plot(basevalues, variables=['dx','dy','dz'], symbollist=['o','o','o'], padding=[5,0.05,5], function=func)\n\nThe combined baseline can be plotted accordingly. Extend the function\nparameters with each additional segment.\n\n2.11.6 Saving basevalue and baseline information\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n        diresult.write('/my/path',coverage='all',format_type='BLV',diff=meanstream,year='2016')\n\nwill create a BLV file. Important is the ``meanstream`` data stream\nwhich is containing daily averages of delta F values between variometer\nand F measurement and the baseline adoption data within the meta\ninformation. You can, however, provide all this information manually as\nwell. A typical way to obtain such a ``meanstream`` is scetched below:\n\n::\n\n        finaldata = mergeStreams(vectordata_corr, scalardata, ['f'])\n        finaldata = finaldata.delta_f()\n        meanstream = finaldata.filter(filter_width=timedelta(days=1),filter_type='flat',resampleoffset=timedelta(hours=12), resample_period=43200, missingdata='mean')\n\n2.12 Database support\n~~~~~~~~~~~~~~~~~~~~~\n\nMagPy supports data base access and many methods for optimizing data\ntreatment in connection with data bases. Among many other benefits,\nusing a database simplifies many typical procedures related to meta\ninformation. Currently MagPy supports `MySQL <https://www.mysql.com/>`__\ndatabases. To use these features you need to install MySQL on your\nsystem. In following we provide a brief outline on how to set up and use\nthis optional addition. Please note that a proper usage of the database\nrequires sensor specific information. Unlike the often used way in\ngeomagnetism to combine data from different sensors into one file\nstructure, such data needs to remain separate for database usage and is\nonly combined when producing\n`IAGA <http://www.iaga-aiga.org/>`__/`INTERMAGNET <http://www.intermagnet.org>`__\noutputs. Furthermore, unique sensor information is requires like its\ntype and serial number.\n\n::\n\n        import magpy import database as mdb\n\n2.12.1 Setting up a MagPy database (using MySQL)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nOpen mysql (e.g. linux: mysql -u root -p mysql) and create a new\ndatabase. Replace ``#DB-NAME`` with your database name (e.g. MyDB).\nAfter creation you also need to grant priviledges to this database to a\nuser of your choice. Please refer to official MySQL documentations for\ndetails and further commands.\n\n::\n\n         mysql> CREATE DATABASE #DB-NAME; \n         mysql> GRANT ALL PRIVILEGES ON #DB-NAME.* TO '#USERNAME'@'%' IDENTIFIED BY '#PASSWORD';\n\n2.12.2 Intializing a MagPy database\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n        db = mdb.mysql.connect(host=\"localhost\",user=\"#USERNAME\",passwd=\"#PASSWORD\",db=\"#DB-NAME\")\n        mdb.dbinit(db)\n\n2.12.3 Adding data to the database\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n        iagacode = 'WIC'\n        data = read(example1)\n        gsm = data.selectkeys(['f'])\n        fge = data.selectkeys(['x','y','z'])\n        gsm.header['SensorID'] = 'GSM90_12345_0002'\n        gsm.header['StationID'] = iagacode\n        fge.header['SensorID'] = 'FGE_22222_0001'\n        fge.header['StationID'] = iagacode\n        mdb.writeDB(db,gsm)\n        mdb.writeDB(db,fge)\n\nAll available meta information will be added automatically to the\nrelated database tables. The SensorID scheme consists of three parts,\ninstrument (GSM90), serial number (12345), and a revision number (0002)\nwhich might change in dependency of maintanance/calibration etc. As you\nsee in the example above we separete data from different instruments,\nwhich we recommend particularly for high resolution data, as frequency\nand noise characteristics of sensor types will differ.\n\n2.12.4 Reading data\n^^^^^^^^^^^^^^^^^^^\n\n::\n\n        data = mdb.readDB(db,'GSM90_12345_0002') \n\nOptions e.g. starttime='' and endtime='' are similar as for normal\n``read``.\n\n2.12.5 Meta data\n^^^^^^^^^^^^^^^^\n\nAn often used application of database cnnectivity will be to apply meta\ninformation stored in the database to data files before submission. The\nfollowing command wills demostrate how to extract all missing meta\ninformation from the database for the selected sensor and add it to the\nheader dictionary of the data object.\n\n::\n\n        rawdata = read('/path/to/rawdata.bin')\n        rawdata.header = mdb.dbfields2dict(db,'FGE_22222_0001')\n        rawdata.write(..., format_type='IMAGCDF')\n\n2.13 Monitoring scheduled scripts\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAutomated analysis can e easily accomplished ba added a series of MagPy\ncommands into a script. A typical script could be:\n\n::\n\n        # read some data and get means\n        data = read(example1)\n        mean_f = data.mean('f')\n\n        # import monitor method\n        from magpy.opt import Analysismonitor\n        analysisdict = Analysismonitor(logfile='/var/log/anamon.log')\n        analysisdict = analysisdict.load()\n        # check some arbitray threshold\n        analysisdict.check({'data_threshold_f_GSM90': [mean_f,'>',20000]})\n\nIf given criteria are not valid, then the logfile is changed\naccordingly. This method can assist you particularly in for checking\ndata actuality, data contents, data validity, upload success, etc. In\ncombination with an independend monitoring tool like\n`Nagios <https://www.nagios.org/>`__ you can easily create mail/sms\nnotfications of such changes, in addition to monitoring processes, live\ntimes, disks etc. `MARCOS <https://github.com/geomagpy/MARCOS>`__ comes\nalong with some instructions on how to use Nagios/MagPy for data\nacquisition monitoring.\n\n2.14 Acquisition support\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nMagPy contains a couple of packages which could be used for data\nacquisition, collection and organization. These methods are basically\nused by two applications `MARTAS <https://github.com/geomagpy/MARTAS>`__\nand `MARCOS <https://github.com/geomagpy/MARCOS>`__. MARTAS (Magpy\nAutomated Realtime Acquisition System) supports communication with many\ncommon instruments (e.g. GSM, LEMI, POS1, FGE, and many non-magnetic\ninstruments) and transfers serial port signals to\n`WAMP <http://wamp-proto.org/>`__ (Web Application Messaging Protocol)\nwhich allows for real-time data access using e.g. WebSocket\ncommunication through the internet. MARCOS (Magpy's Automated Realtime\nCollection and Organistaion System) can access such realtime streams and\nalso data from many other sources and supports the Obsever by storing,\nanalyzing, archiving data, as well as monitoring all processes. Details\non these two applications can be found elsewhere.\n\n2.15 Graphical user interface\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nMany of the above mentioned methods are also available within the\ngraphical user interface of MagPy. To use this check the installation\ninstructions for your operating system. You will find Video Tutorials\nonline (too be added) describing its usage for specific analyses.\n\n2.16 Current developments\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n2.16.1 Exchange data objects with `ObsPy <https://github.com/obspy/obspy>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nMagPy supports the exchange of data with ObsPy, the seismological\ntoolbox. Data objects of both python packages are very similar. Note:\nObsPy assumes regular spaced time intervals. Please be careful if this\nis not the case with your data. The example below shows a simple import\nroutine, on how to read a seed file and plot a spectrogram (which you\ncan identically obtain from ObsPy as well). Conversions to MagPy allow\nfor vectorial analyses, and geomagnetic applications. Conversions to\nObsPy are useful for effective high frequency analysis, requiring evenly\nspaced time intervals, and for exporting to seismological data formats.\n\n::\n\n        from obspy import read as obsread\n        seeddata = obsread('/path/to/seedfile')\n        magpydata = obspy2magpy(seeddata,keydict={'ObsPyColName': 'x'})\n        mp.plotSpectrogram(magpydata,['x'])\n\n2.16.2 Flagging in ImagCDF\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n        datawithspikes = read(example1)\n        flaggeddata = datawithspikes.flag_outlier(keys=['f'],timerange=timedelta(minutes=1),threshold=3)\n        mp.plot(flaggeddata,['f'],annotate=True)\n        flaggeddata.write(tmpdir,format_type='IMAGCDF',addflags=True)\n\nThe ``addflags`` option denotes that flagging information will be added\nto the ImagCDF format. Please note that this is still under development\nand thus content and format specifications may change. So please use it\nonly for test purposes and not for archiving. To read flagged ImagCDF\ndata just use the normal read command, and activate annotation for\nplotting.\n\n::\n\n        new = read('/tmp/cnb_20120802_000000_PT1S_1.cdf')\n        mp.plot(new,['f'],annotate=True)\n\n2.17 List of all MagPy methods\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPlease use the help method (section 2.3) for descriptions and return\nvalues.\n\n+--------+---------+------------+\n| group  | method  | parameter  |\n+========+=========+============+\n| -      | **findp | name, path |\n|        | ath**   |            |\n+--------+---------+------------+\n| -      | \\*\\*\\_p | method     |\n|        | ickle\\_ |            |\n|        | method\\ |            |\n|        | *\\*     |            |\n+--------+---------+------------+\n| -      | \\*\\*\\_u | func\\_name |\n|        | npickle | ,          |\n|        | \\_metho | obj, cls   |\n|        | d\\*\\*   |            |\n+--------+---------+------------+\n| stream | ****ini | self,      |\n|        | t****   | container= |\n|        |         | None,      |\n|        |         | header={}, |\n|        |         | ndarray=No |\n|        |         | ne         |\n+--------+---------+------------+\n| stream | **ext** | self,      |\n|        |         | columnstru |\n|        |         | cture      |\n+--------+---------+------------+\n| stream | **add** | self,      |\n|        |         | datlst     |\n+--------+---------+------------+\n| stream | **lengt | self       |\n|        | h**     |            |\n+--------+---------+------------+\n| stream | **repla | self,      |\n|        | ce**    | datlst     |\n+--------+---------+------------+\n| stream | **copy* | self       |\n|        | *       |            |\n+--------+---------+------------+\n| stream | ****str | self       |\n|        | ****    |            |\n+--------+---------+------------+\n| stream | ****rep | self       |\n|        | r****   |            |\n+--------+---------+------------+\n| stream | ****get | self,      |\n|        | item*** | index      |\n|        | *       |            |\n+--------+---------+------------+\n| stream | ****len | self       |\n|        | ****    |            |\n+--------+---------+------------+\n| stream | **clear | self       |\n|        | \\_heade |            |\n|        | r**     |            |\n+--------+---------+------------+\n| stream | **exten | self,datls |\n|        | d**     | t,header,n |\n|        |         | darray     |\n+--------+---------+------------+\n| stream | **union | self,colum |\n|        | **      | n          |\n+--------+---------+------------+\n| stream | **remov | self       |\n|        | eduplic |            |\n|        | ates**  |            |\n+--------+---------+------------+\n| stream | **start | self,      |\n|        | **      | dateformt= |\n|        |         | None       |\n+--------+---------+------------+\n| stream | **end** | self,      |\n|        |         | dateformt= |\n|        |         | None       |\n+--------+---------+------------+\n| stream | **findt | self,time, |\n|        | ime**   | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | \\*\\*\\_f | self       |\n|        | ind\\_t\\ |            |\n|        | _limits |            |\n|        | \\*\\*    |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_p | self       |\n|        | rint\\_k |            |\n|        | ey\\_hea |            |\n|        | ders\\*\\ |            |\n|        | *       |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_g | self,\\*\\*k |\n|        | et\\_key | wargs      |\n|        | \\_heade |            |\n|        | rs\\*\\*  |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_g | self       |\n|        | et\\_key |            |\n|        | \\_names |            |\n|        | \\*\\*    |            |\n+--------+---------+------------+\n| stream | **drope | self       |\n|        | mpty**  |            |\n+--------+---------+------------+\n| stream | **fille | self,      |\n|        | mpty**  | ndarray,   |\n|        |         | keylist    |\n+--------+---------+------------+\n| stream | **sorti | self       |\n|        | ng**    |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_g | self, key, |\n|        | et\\_lin | value      |\n|        | e\\*\\*   |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_t | self, keys |\n|        | ake\\_co |            |\n|        | lumns\\* |            |\n|        | \\*      |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_r | self, key, |\n|        | emove\\_ | value      |\n|        | lines\\* |            |\n|        | \\*      |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_g | self, key  |\n|        | et\\_col |            |\n|        | umn\\*\\* |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_p | self,      |\n|        | ut\\_col | column,    |\n|        | umn\\*\\* | key,       |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | \\*\\*\\_m | self, key, |\n|        | ove\\_co | put2key    |\n|        | lumn\\*\\ |            |\n|        | *       |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_d | self,key   |\n|        | rop\\_co |            |\n|        | lumn\\*\\ |            |\n|        | *       |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_c | self, key  |\n|        | lear\\_c |            |\n|        | olumn\\* |            |\n|        | \\*      |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_r | self,      |\n|        | educe\\_ | pointlimit |\n|        | stream\\ | =100000    |\n|        | *\\*     |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_r | self       |\n|        | emove\\_ |            |\n|        | nancolu |            |\n|        | mns\\*\\* |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_a | self,      |\n|        | ic\\*\\*  | signal, k, |\n|        |         | debugmode= |\n|        |         | None       |\n+--------+---------+------------+\n| stream | **harmf | self,nt,   |\n|        | it**    | val,       |\n|        |         | fitdegree  |\n+--------+---------+------------+\n| stream | \\*\\*\\_g | self, key, |\n|        | et\\_max | returntime |\n|        | \\*\\*    | =False     |\n+--------+---------+------------+\n| stream | \\*\\*\\_g | self, key, |\n|        | et\\_min | returntime |\n|        | \\*\\*    | =False     |\n+--------+---------+------------+\n| stream | **ampli | self,key   |\n|        | tude**  |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_g | self, t,   |\n|        | f\\*\\*   | tau        |\n+--------+---------+------------+\n| stream | \\*\\*\\_h | self, p, x |\n|        | f\\*\\*   |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_r | self,      |\n|        | esidual | func, y    |\n|        | \\_func\\ |            |\n|        | *\\*     |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_t | self,      |\n|        | au\\*\\*  | period,    |\n|        |         | fac=0.8325 |\n|        |         | 5461       |\n+--------+---------+------------+\n| stream | \\*\\*\\_c | self,      |\n|        | onverts | coordinate |\n|        | tream\\* | ,          |\n|        | \\*      | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | \\*\\*\\_d | self,index |\n|        | elete\\* |            |\n|        | \\*      |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_a | self,strea |\n|        | ppend\\* | m          |\n|        | \\*      |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_d | self,      |\n|        | et\\_tra | period     |\n|        | nge\\*\\* |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_i | self, s    |\n|        | s\\_numb |            |\n|        | er\\*\\*  |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_n | self,      |\n|        | ormaliz | column     |\n|        | e\\*\\*   |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_t | self, time |\n|        | esttime |            |\n|        | \\*\\*    |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_d | self, key  |\n|        | rop\\_na |            |\n|        | ns\\*\\*  |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_s | self, keys |\n|        | elect\\_ |            |\n|        | keys\\*\\ |            |\n|        | *       |            |\n+--------+---------+------------+\n| stream | \\*\\*\\_s | self,      |\n|        | elect\\_ | starttime= |\n|        | timeran | None,      |\n|        | ge\\*\\*  | endtime=No |\n|        |         | ne,        |\n|        |         | maxidx=-1  |\n+--------+---------+------------+\n| stream | **aic\\_ | self, key, |\n|        | calc**  | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **basel | self,      |\n|        | ine**   | absoluteda |\n|        |         | ta,        |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **strea | self,      |\n|        | m2dict* | keys=['dx' |\n|        | *       | ,'dy','dz' |\n|        |         | ],         |\n|        |         | dictkey='D |\n|        |         | ataBaseVal |\n|        |         | ues'       |\n+--------+---------+------------+\n| stream | **dict2 | self,dictk |\n|        | stream* | ey='DataBa |\n|        | *       | seValues'  |\n+--------+---------+------------+\n| stream | **basel | self,      |\n|        | ineAdva | absdata,   |\n|        | nced**  | baselist,  |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **bc**  | self,      |\n|        |         | function=N |\n|        |         | one,       |\n|        |         | ctype=None |\n|        |         | ,          |\n|        |         | alpha=0.0, |\n|        |         | level='pre |\n|        |         | liminary'  |\n+--------+---------+------------+\n| stream | **binde | self,key,f |\n|        | tector* | lagnum=1,k |\n|        | *       | eystoflag= |\n|        |         | ['x'],sens |\n|        |         | orid=None, |\n|        |         | text=None, |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **calc\\ | self,      |\n|        | _f**    | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **daily | self,      |\n|        | means** | keys=['x', |\n|        |         | 'y','z','f |\n|        |         | '],        |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **date\\ | self,      |\n|        | _offset | offset     |\n|        | **      |            |\n+--------+---------+------------+\n| stream | **delta | self,      |\n|        | \\_f**   | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **f\\_fr | self,      |\n|        | om\\_df* | \\*\\*kwargs |\n|        | *       |            |\n+--------+---------+------------+\n| stream | **diffe | self,      |\n|        | rentiat | \\*\\*kwargs |\n|        | e**     |            |\n+--------+---------+------------+\n| stream | **DWT\\_ | self,key=' |\n|        | calc**  | x',wavelet |\n|        |         | ='db4',lev |\n|        |         | el=3,plot= |\n|        |         | False,outf |\n|        |         | ile=None,  |\n+--------+---------+------------+\n| stream | **event | self, key, |\n|        | logger* | values,    |\n|        | *       | compare=No |\n|        |         | ne,        |\n|        |         | stringvalu |\n|        |         | es=None,   |\n|        |         | addcomment |\n|        |         | =None,     |\n|        |         | debugmode= |\n|        |         | None       |\n+--------+---------+------------+\n| stream | **extra | self, key, |\n|        | ct**    | value,     |\n|        |         | compare=No |\n|        |         | ne,        |\n|        |         | debugmode= |\n|        |         | None       |\n+--------+---------+------------+\n| stream | **extra | self,      |\n|        | ct2**   | keys,      |\n|        |         | get='>',   |\n|        |         | func=None, |\n|        |         | debugmode= |\n|        |         | None       |\n+--------+---------+------------+\n| stream | **extra | self,      |\n|        | polate* | start, end |\n|        | *       |            |\n+--------+---------+------------+\n| stream | **filte | self,\\*\\*k |\n|        | r**     | wargs      |\n+--------+---------+------------+\n| stream | **fit** | self,      |\n|        |         | keys,      |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **extra | self       |\n|        | ctflags |            |\n|        | **      |            |\n+--------+---------+------------+\n| stream | **flagf | self,index |\n|        | ast**   | array,flag |\n|        |         | ,          |\n|        |         | comment,ke |\n|        |         | ys=None    |\n+--------+---------+------------+\n| stream | **flag\\ | self,      |\n|        | _range* | \\*\\*kwargs |\n|        | *       |            |\n+--------+---------+------------+\n| stream | **flag\\ | self,      |\n|        | _outlie | \\*\\*kwargs |\n|        | r**     |            |\n+--------+---------+------------+\n| stream | **flag* | self,      |\n|        | *       | flaglist,  |\n|        |         | removedupl |\n|        |         | icates=Fal |\n|        |         | se,        |\n|        |         | debug=Fals |\n|        |         | e          |\n+--------+---------+------------+\n| stream | **flagl | self,flagl |\n|        | iststat | ist        |\n|        | s**     |            |\n+--------+---------+------------+\n| stream | **flagl | self,flagl |\n|        | istclea | ist        |\n|        | n**     |            |\n+--------+---------+------------+\n| stream | **strea | self,      |\n|        | m2flagl | userange=T |\n|        | ist**   | rue,       |\n|        |         | flagnumber |\n|        |         | =None,     |\n|        |         | keystoflag |\n|        |         | =None,     |\n|        |         | sensorid=N |\n|        |         | one,       |\n|        |         | comment=No |\n|        |         | ne         |\n+--------+---------+------------+\n| stream | **flagl | self,      |\n|        | istmod* | mode='sele |\n|        | *       | ct',       |\n|        |         | flaglist=[ |\n|        |         | ],         |\n|        |         | parameter= |\n|        |         | 'key',     |\n|        |         | value=None |\n|        |         | ,          |\n|        |         | newvalue=N |\n|        |         | one        |\n+--------+---------+------------+\n| stream | **flagl | self,      |\n|        | istadd* | flaglist,  |\n|        | *       | sensorid,  |\n|        |         | keys,      |\n|        |         | flagnumber |\n|        |         | ,          |\n|        |         | comment,   |\n|        |         | startdate, |\n|        |         | enddate=No |\n|        |         | ne         |\n+--------+---------+------------+\n| stream | **flag\\ | self, key, |\n|        | _stream | flag,      |\n|        | **      | comment,   |\n|        |         | startdate, |\n|        |         | enddate=No |\n|        |         | ne,        |\n|        |         | samplingra |\n|        |         | te=0.,     |\n|        |         | debug=Fals |\n|        |         | e          |\n+--------+---------+------------+\n| stream | **simpl | self,basev |\n|        | ebaseva | alue,\\*\\*k |\n|        | lue2str | wargs      |\n|        | eam**   |            |\n+--------+---------+------------+\n| stream | **func2 | self,funct |\n|        | stream* | ion,\\*\\*kw |\n|        | *       | args       |\n+--------+---------+------------+\n| stream | **func\\ | self,funct |\n|        | _add**  | ion,\\*\\*kw |\n|        |         | args       |\n+--------+---------+------------+\n| stream | **func\\ | self,funct |\n|        | _subtra | ion,\\*\\*kw |\n|        | ct**    | args       |\n+--------+---------+------------+\n| stream | **get\\_ | self,      |\n|        | gaps**  | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **get\\_ | self,      |\n|        | rotatio | xcompensat |\n|        | nangle* | ion=0,keys |\n|        | *       | =['x','y', |\n|        |         | 'z'],\\*\\*k |\n|        |         | wargs      |\n+--------+---------+------------+\n| stream | **get\\_ | self       |\n|        | samplin |            |\n|        | g\\_peri |            |\n|        | od**    |            |\n+--------+---------+------------+\n| stream | **sampl | self,      |\n|        | ingrate | \\*\\*kwargs |\n|        | **      |            |\n+--------+---------+------------+\n| stream | **integ | self,      |\n|        | rate**  | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **inter | self,      |\n|        | pol**   | keys,      |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **k\\_ex | self,      |\n|        | tend**  | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **k\\_fm | self,      |\n|        | i**     | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **lines | self       |\n|        | truct2n |            |\n|        | darray* |            |\n|        | *       |            |\n+--------+---------+------------+\n| stream | **mean* | self, key, |\n|        | *       | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **missi | self,v,win |\n|        | ngvalue | dow\\_len,t |\n|        | **      | hreshold=0 |\n|        |         | .9,fill='m |\n|        |         | ean'       |\n+--------+---------+------------+\n| stream | **MODWT | self,key=' |\n|        | \\_calc* | x',wavelet |\n|        | *       | ='haar',le |\n|        |         | vel=1,plot |\n|        |         | =False,out |\n|        |         | file=None  |\n+--------+---------+------------+\n| stream | **multi | self,      |\n|        | ply**   | factors,   |\n|        |         | square=Fal |\n|        |         | se         |\n+--------+---------+------------+\n| stream | **offse | self,      |\n|        | t**     | offsets,   |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **plot* | self,      |\n|        | *       | keys=None, |\n|        |         | debugmode= |\n|        |         | None,      |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **power | self, key, |\n|        | spectru | debugmode= |\n|        | m**     | None,      |\n|        |         | outfile=No |\n|        |         | ne,        |\n|        |         | fmt=None,  |\n|        |         | axes=None, |\n|        |         | title=None |\n|        |         | ,\\*\\*kwarg |\n|        |         | s          |\n+--------+---------+------------+\n| stream | **rando | self,perce |\n|        | mdrop** | ntage=None |\n|        |         | ,fixed\\_in |\n|        |         | dicies=Non |\n|        |         | e          |\n+--------+---------+------------+\n| stream | **remov | self,      |\n|        | e**     | starttime= |\n|        |         | None,      |\n|        |         | endtime=No |\n|        |         | ne         |\n+--------+---------+------------+\n| stream | **remov | self,      |\n|        | e\\_flag | \\*\\*kwargs |\n|        | ged**   |            |\n+--------+---------+------------+\n| stream | **remov | self,      |\n|        | e\\_outl | \\*\\*kwargs |\n|        | ier**   |            |\n+--------+---------+------------+\n| stream | **resam | self,      |\n|        | ple**   | keys,      |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **rotat | self,\\*\\*k |\n|        | ion**   | wargs      |\n+--------+---------+------------+\n| stream | **scale | self,      |\n|        | \\_corre | keys,      |\n|        | ction** | scales,    |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **selec | self,      |\n|        | tkeys** | keys,      |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **smoot | self,      |\n|        | h**     | keys=None, |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **spect | self,      |\n|        | rogram* | keys,      |\n|        | *       | per\\_lap=0 |\n|        |         | .9,        |\n|        |         | wlen=None, |\n|        |         | log=False, |\n+--------+---------+------------+\n| stream | **stead | self, key, |\n|        | yrise** | timewindow |\n|        |         | ,          |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **stere | self,      |\n|        | oplot** | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **trim* | self,      |\n|        | *       | starttime= |\n|        |         | None,      |\n|        |         | endtime=No |\n|        |         | ne,        |\n|        |         | newway=Fal |\n|        |         | se         |\n+--------+---------+------------+\n| stream | **vario | self,      |\n|        | meterco | variopath, |\n|        | rrectio | thedate,   |\n|        | n**     | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | \\*\\*\\_w | self,      |\n|        | rite\\_f | format\\_ty |\n|        | ormat\\* | pe,        |\n|        | \\*      | filenamebe |\n|        |         | gins,      |\n|        |         | filenameen |\n|        |         | ds,        |\n|        |         | coverage,  |\n|        |         | dateformat |\n|        |         | ,year      |\n+--------+---------+------------+\n| stream | **write | self,      |\n|        | **      | filepath,  |\n|        |         | compressio |\n|        |         | n=5,       |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| stream | **idf2x | self,\\*\\*k |\n|        | yz**    | wargs      |\n+--------+---------+------------+\n| stream | **xyz2i | self,\\*\\*k |\n|        | df**    | wargs      |\n+--------+---------+------------+\n| stream | **xyz2h | self,\\*\\*k |\n|        | dz**    | wargs      |\n+--------+---------+------------+\n| stream | **hdz2x | self,\\*\\*k |\n|        | yz**    | wargs      |\n+--------+---------+------------+\n| -      | **coord | u,v,w,kind |\n|        | inatetr |            |\n|        | ansform |            |\n|        | **      |            |\n+--------+---------+------------+\n| -      | **isNum | s          |\n|        | ber**   |            |\n+--------+---------+------------+\n| -      | **find\\ | array,valu |\n|        | _neares | e          |\n|        | t**     |            |\n+--------+---------+------------+\n| -      | **ceil\\ | dt,seconds |\n|        | _dt**   |            |\n+--------+---------+------------+\n| -      | **read* | path\\_or\\_ |\n|        | *       | url=None,  |\n|        |         | dataformat |\n|        |         | =None,     |\n|        |         | headonly=F |\n|        |         | alse,      |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| -      | \\*\\*\\_r | filename,  |\n|        | ead\\*\\* | dataformat |\n|        |         | =None,     |\n|        |         | headonly=F |\n|        |         | alse,      |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| -      | **savef | mylist=Non |\n|        | lags**  | e,path=Non |\n|        |         | e          |\n+--------+---------+------------+\n| -      | **loadf | path=None, |\n|        | lags**  | sensorid=N |\n|        |         | one,begin= |\n|        |         | None,      |\n|        |         | end=None   |\n+--------+---------+------------+\n| -      | **joinS | stream\\_a, |\n|        | treams* | stream\\_b, |\n|        | *       | \\*\\*kwargs |\n+--------+---------+------------+\n| -      | **appen | streamlist |\n|        | dStream |            |\n|        | s**     |            |\n+--------+---------+------------+\n| -      | **merge | stream\\_a, |\n|        | Streams | stream\\_b, |\n|        | **      | \\*\\*kwargs |\n+--------+---------+------------+\n| -      | **dms2d | dms        |\n|        | **      |            |\n+--------+---------+------------+\n| -      | **find\\ | stream1,   |\n|        | _offset | stream2,   |\n|        | **      | guess\\_low |\n|        |         | =-60.,     |\n|        |         | guess\\_hig |\n|        |         | h=60.      |\n+--------+---------+------------+\n| -      | **diffS | stream\\_a, |\n|        | treams* | stream\\_b, |\n|        | *       | \\*\\*kwargs |\n+--------+---------+------------+\n| -      | **subtr | stream\\_a, |\n|        | actStre | stream\\_b, |\n|        | ams**   | \\*\\*kwargs |\n+--------+---------+------------+\n| -      | **stack | streamlist |\n|        | Streams | ,          |\n|        | **      | \\*\\*kwargs |\n+--------+---------+------------+\n| -      | **compa | stream\\_a, |\n|        | reStrea | stream\\_b  |\n|        | ms**    |            |\n+--------+---------+------------+\n| -      | **array | listofarra |\n|        | 2stream | ys,        |\n|        | **      | keystring, |\n|        |         | starttime= |\n|        |         | None,sr=No |\n|        |         | ne         |\n+--------+---------+------------+\n| -      | **obspy | opstream,  |\n|        | 2magpy* | keydict={} |\n|        | *       |            |\n+--------+---------+------------+\n| -      | **extra | datestring |\n|        | ctDateF |            |\n|        | romStri |            |\n|        | ng**    |            |\n+--------+---------+------------+\n| -      | **testT | time       |\n|        | imeStri |            |\n|        | ng**    |            |\n+--------+---------+------------+\n| -      | **denor | column,    |\n|        | malize* | startvalue |\n|        | *       | ,          |\n|        |         | endvalue   |\n+--------+---------+------------+\n| -      | **find\\ | array,     |\n|        | _neares | value      |\n|        | t**     |            |\n+--------+---------+------------+\n| -      | **maskN | column     |\n|        | AN**    |            |\n+--------+---------+------------+\n| -      | **nan\\_ | y          |\n|        | helper* |            |\n|        | *       |            |\n+--------+---------+------------+\n| -      | **neare | x          |\n|        | stPow2* |            |\n|        | *       |            |\n+--------+---------+------------+\n| -      | **test\\ | time       |\n|        | _time** |            |\n+--------+---------+------------+\n| -      | **conve | lon,lat,pr |\n|        | rtGeoCo | o1,pro2    |\n|        | ordinat |            |\n|        | e**     |            |\n+--------+---------+------------+\n| mpplot | **plote | stream     |\n|        | asy**   |            |\n+--------+---------+------------+\n| mpplot | **plot\\ | stream,var |\n|        | _new**  | iables=[], |\n|        |         | specialdic |\n|        |         | t={},error |\n|        |         | bars=False |\n|        |         | ,padding=0 |\n|        |         | ,noshow=Fa |\n|        |         | lse        |\n+--------+---------+------------+\n| mpplot | **plot* | stream,var |\n|        | *       | iables=[], |\n|        |         | specialdic |\n|        |         | t={},error |\n|        |         | bars=False |\n|        |         | ,padding=0 |\n|        |         | ,noshow=Fa |\n|        |         | lse        |\n+--------+---------+------------+\n| mpplot | **plotS | streamlist |\n|        | treams* | ,variables |\n|        | *       | ,padding=N |\n|        |         | one,specia |\n|        |         | ldict={},e |\n|        |         | rrorbars=N |\n|        |         | one        |\n+--------+---------+------------+\n| mpplot | **toggl | event      |\n|        | e\\_sele |            |\n|        | ctor**  |            |\n+--------+---------+------------+\n| mpplot | **addFl | data,      |\n|        | ag**    | flagger,   |\n|        |         | indeciesto |\n|        |         | beflagged, |\n|        |         | variables  |\n+--------+---------+------------+\n| mpplot | **plotF | data,varia |\n|        | lag**   | bles=None, |\n|        |         | figure=Fal |\n|        |         | se         |\n+--------+---------+------------+\n| mpplot | **plotE | stream,key |\n|        | MD**    | ,verbose=F |\n|        |         | alse,plott |\n|        |         | itle=None  |\n+--------+---------+------------+\n| mpplot | **plotN | streamlist |\n|        | ormStre | ,          |\n|        | ams**   | key,       |\n|        |         | normalize= |\n|        |         | True,      |\n|        |         | normalizet |\n|        |         | =False     |\n+--------+---------+------------+\n| mpplot | **plotP | stream,key |\n|        | S**     | ,debugmode |\n|        |         | =False,out |\n|        |         | file=None, |\n|        |         | noshow=Fal |\n|        |         | se         |\n+--------+---------+------------+\n| mpplot | **plotS | mag\\_strea |\n|        | atMag** | m,sat\\_str |\n|        |         | eam,keys,o |\n|        |         | utfile=Non |\n|        |         | e,plottype |\n|        |         | ='disconti |\n|        |         | nuous'     |\n+--------+---------+------------+\n| mpplot | **plotS | stream,    |\n|        | pectrog | keys,      |\n|        | ram**   | NFFT=1024, |\n|        |         | detrend=ml |\n|        |         | ab.detrend |\n|        |         | \\_none     |\n+--------+---------+------------+\n| mpplot | **magpy | x,         |\n|        | Specgra | NFFT=256,  |\n|        | m**     | Fs=2,      |\n|        |         | Fc=0,      |\n|        |         | detrend=ml |\n|        |         | ab.detrend |\n|        |         | \\_none     |\n+--------+---------+------------+\n| mpplot | **plotS | stream,foc |\n|        | tereopl | us='all',c |\n|        | ot**    | olorlist   |\n|        |         | =          |\n|        |         | ['b','r',' |\n|        |         | g','c','m' |\n|        |         | ,'y','k']  |\n+--------+---------+------------+\n| mpplot | \\*\\*\\_p | data,saved |\n|        | lot\\*\\* | pi=80,grid |\n|        |         | =True,grid |\n|        |         | color=grid |\n|        |         | color,nosh |\n|        |         | ow=False   |\n+--------+---------+------------+\n| mpplot | \\*\\*\\_c | ax, tmax,  |\n|        | onfinex | tmin,      |\n|        | \\*\\*    | timeunit   |\n+--------+---------+------------+\n| mpplot | \\*\\*\\_e | stream,    |\n|        | xtract\\ | key        |\n|        | _data\\_ |            |\n|        | for\\_PS |            |\n|        | D\\*\\*   |            |\n+--------+---------+------------+\n| databa | **dbget | db,pierid, |\n| se     | Pier**  | rp, value, |\n|        |         | maxdate=No |\n|        |         | ne,        |\n|        |         | l=False,   |\n|        |         | dic='Delta |\n|        |         | Dictionary |\n|        |         | '          |\n+--------+---------+------------+\n| databa | **dbget | db,        |\n| se     | lines** | tablename, |\n|        |         | lines      |\n+--------+---------+------------+\n| databa | **dbupd | db,tablena |\n| se     | ate**   | me,        |\n|        |         | keys,      |\n|        |         | values,    |\n|        |         | condition= |\n|        |         | None       |\n+--------+---------+------------+\n| databa | **dbget | db,tablena |\n| se     | float** | me,sensori |\n|        |         | d,columnid |\n|        |         | ,revision= |\n|        |         | None       |\n+--------+---------+------------+\n| databa | **dbget | db,tablena |\n| se     | string* | me,sensori |\n|        | *       | d,columnid |\n|        |         | ,revision= |\n|        |         | None       |\n+--------+---------+------------+\n| databa | **dbupl | db,        |\n| se     | oad**   | path,stati |\n|        |         | onid,\\*\\*k |\n|        |         | wargs      |\n+--------+---------+------------+\n| databa | **dbini | db         |\n| se     | t**     |            |\n+--------+---------+------------+\n| databa | **dbdel | db,datainf |\n| se     | ete**   | oid,\\*\\*kw |\n|        |         | args       |\n+--------+---------+------------+\n| databa | **dbdic | db,header\\ |\n| se     | t2field | _dict,\\*\\* |\n|        | s**     | kwargs     |\n+--------+---------+------------+\n| databa | **dbfie | db,datainf |\n| se     | lds2dic | oid        |\n|        | t**     |            |\n+--------+---------+------------+\n| databa | **dbalt | db         |\n| se     | er**    |            |\n+--------+---------+------------+\n| databa | **dbsel | db,        |\n| se     | ect**   | element,   |\n|        |         | table,     |\n|        |         | condition= |\n|        |         | None,      |\n|        |         | expert=Non |\n|        |         | e,         |\n|        |         | debug=Fals |\n|        |         | e          |\n+--------+---------+------------+\n| databa | **dbcoo | db, pier,  |\n| se     | rdinate | epsgcode=' |\n|        | s**     | epsg:4326' |\n+--------+---------+------------+\n| databa | **dbsen | db,sensori |\n| se     | sorinfo | d,sensorke |\n|        | **      | ydict=None |\n|        |         | ,sensorrev |\n|        |         | ision      |\n|        |         | = '0001'   |\n+--------+---------+------------+\n| databa | **dbdat | db,sensori |\n| se     | ainfo** | d,datakeyd |\n|        |         | ict=None,t |\n|        |         | ablenum=No |\n|        |         | ne,default |\n|        |         | station='W |\n|        |         | IC',update |\n|        |         | db=True    |\n+--------+---------+------------+\n| databa | **write | db,        |\n| se     | DB**    | datastream |\n|        |         | ,          |\n|        |         | tablename= |\n|        |         | None,      |\n|        |         | StationID= |\n|        |         | None,      |\n|        |         | mode='repl |\n|        |         | ace',      |\n|        |         | revision=N |\n|        |         | one,       |\n|        |         | debug=Fals |\n|        |         | e,         |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| databa | **dbset | db,        |\n| se     | Timesin | tablename, |\n|        | DataInf | colstr,uni |\n|        | o**     | tstr       |\n+--------+---------+------------+\n| databa | **dbupd | db,        |\n| se     | ateData | tablename, |\n|        | Info**  | header     |\n+--------+---------+------------+\n| databa | **strea | db,        |\n| se     | m2db**  | datastream |\n|        |         | ,          |\n|        |         | noheader=N |\n|        |         | one,       |\n|        |         | mode=None, |\n|        |         | tablename= |\n|        |         | None,      |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| databa | **readD | db, table, |\n| se     | B**     | starttime= |\n|        |         | None,      |\n|        |         | endtime=No |\n|        |         | ne,        |\n|        |         | sql=None   |\n+--------+---------+------------+\n| databa | **db2st | db,        |\n| se     | ream**  | sensorid=N |\n|        |         | one,       |\n|        |         | begin=None |\n|        |         | ,          |\n|        |         | end=None,  |\n|        |         | tableext=N |\n|        |         | one,       |\n|        |         | sql=None   |\n+--------+---------+------------+\n| databa | **dilin | db,        |\n| se     | e2db**  | dilinestru |\n|        |         | ct,        |\n|        |         | mode=None, |\n|        |         | \\*\\*kwargs |\n+--------+---------+------------+\n| databa | **db2di | db,\\*\\*kwa |\n| se     | line**  | rgs        |\n+--------+---------+------------+\n| databa | **apply | db, stream |\n| se     | Deltas* |            |\n|        | *       |            |\n+--------+---------+------------+\n| databa | **getBa | db,sensori |\n| se     | seline* | d,         |\n|        | *       | date=None  |\n+--------+---------+------------+\n| databa | **flagl | db,flaglis |\n| se     | ist2db* | t,mode=Non |\n|        | *       | e,sensorid |\n|        |         | =None,modi |\n|        |         | ficationda |\n|        |         | te=None    |\n+--------+---------+------------+\n| databa | **db2fl | db,sensori |\n| se     | aglist* | d,         |\n|        | *       | begin=None |\n|        |         | ,          |\n|        |         | end=None,  |\n|        |         | comment=No |\n|        |         | ne,        |\n|        |         | flagnumber |\n|        |         | =-1,       |\n|        |         | key=None,  |\n|        |         | removedupl |\n|        |         | icates=Fal |\n|        |         | se         |\n+--------+---------+------------+\n| databa | **strin | string     |\n| se     | g2dict* |            |\n|        | *       |            |\n+--------+---------+------------+\n| tranfe | \\*\\*\\_c | logfile    |\n| r      | hecklog |            |\n|        | file\\*\\ |            |\n|        | *       |            |\n+--------+---------+------------+\n| tranfe | **ftpda | \\*\\*kwargs |\n| r      | tatrans |            |\n|        | fer**   |            |\n+--------+---------+------------+\n| tranfe | \\*\\*\\_m | myproxy,   |\n| r      | issingv | port,      |\n|        | als\\*\\* | login,     |\n|        |         | passwd,    |\n|        |         | logfile    |\n+--------+---------+------------+\n| tranfe | **scptr | src,dest,p |\n| r      | ansfer* | asswd,\\*\\* |\n|        | *       | kwargs     |\n+--------+---------+------------+\n| tranfe | **ssh\\_ | remotepath |\n| r      | remotef | ,          |\n|        | ilelist | filepat,   |\n|        | **      | user,      |\n|        |         | host,      |\n|        |         | passwd     |\n+--------+---------+------------+\n| tranfe | **ginup | filename=N |\n| r      | load**  | one,       |\n|        |         | user=None, |\n|        |         | password=N |\n|        |         | one,       |\n|        |         | url=None,\\ |\n|        |         | *\\*kwargs  |\n+--------+---------+------------+\n| tranfe | **ftpdi | \\*\\*kwargs |\n| r      | rlist** |            |\n+--------+---------+------------+\n| tranfe | **ftpre | \\*\\*kwargs |\n| r      | move**  |            |\n+--------+---------+------------+\n| tranfe | **ftpge | ftpaddress |\n| r      | t**     | ,ftpname,f |\n|        |         | tppasswd,r |\n|        |         | emotepath, |\n|        |         | localpath, |\n|        |         | identifier |\n|        |         | ,port=None |\n|        |         | ,\\*\\*kwarg |\n|        |         | s          |\n+--------+---------+------------+",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://pypi.python.org/pypi/GeomagPy/",
    "keywords": null,
    "license": "LICENSE.txt",
    "maintainer": null,
    "maintainer_email": null,
    "name": "GeomagPy",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/GeomagPy/",
    "release_url": "https://pypi.org/project/GeomagPy/v0.3.93/",
    "requires_dist": [],
    "requires_python": null,
    "summary": "Geomagnetic analysis tools.",
    "version": "v0.3.93"
  },
  "releases": {
    "v0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "373b4dca79a3a822fc8cf861196caa7f",
          "sha256": "f2fe75a7d1453ed4564a4e2210dce458d3b2928294da4b2a684091e1164c2fa7"
        },
        "downloads": 322,
        "filename": "GeomagPy-v0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "373b4dca79a3a822fc8cf861196caa7f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1535562,
        "upload_time": "2016-09-02T14:57:12",
        "url": "https://files.pythonhosted.org/packages/df/ef/7b7fd9457aa87c5ace3d145c3a8aa33c6ebe4d33cc1a8c0ea21d3d3bc6c9/GeomagPy-v0.3.1.tar.gz"
      }
    ],
    "v0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "92b74a42c24dcfed458831cdd455cb22",
          "sha256": "0de12010964a615c74b39f79fd1f9a2b4fc484f52a26097e5d0b9a62fe153a24"
        },
        "downloads": 117,
        "filename": "GeomagPy-v0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "92b74a42c24dcfed458831cdd455cb22",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1535641,
        "upload_time": "2016-09-03T17:01:50",
        "url": "https://files.pythonhosted.org/packages/8e/8e/0d89daa4925b6e676642f05c4c662e006b0849d2542a8b63d63af6dc3df4/GeomagPy-v0.3.2.tar.gz"
      }
    ],
    "v0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0534cd06f7235c52cda3187ce36329eb",
          "sha256": "0f6d9345787f398cf539b7c0fc72568c17cf90c521dbe420a149c96221219197"
        },
        "downloads": 105,
        "filename": "GeomagPy-v0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0534cd06f7235c52cda3187ce36329eb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1531510,
        "upload_time": "2016-09-17T09:20:49",
        "url": "https://files.pythonhosted.org/packages/64/ae/ba10669933546519e870c771e00e16d185c466d5d2c330b46ccecc5ef7ea/GeomagPy-v0.3.3.tar.gz"
      }
    ],
    "v0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d94bf09ea0bb25434914c6d11585ed48",
          "sha256": "fdd9ba897f7b62a7519a0d432240000973e475cebbd0deec394c7721668f0a29"
        },
        "downloads": 137,
        "filename": "GeomagPy-v0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d94bf09ea0bb25434914c6d11585ed48",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1532426,
        "upload_time": "2016-09-17T15:31:30",
        "url": "https://files.pythonhosted.org/packages/e9/76/3f429e0c6fb35976f0e19d8dd54152409c23b4afbb7bb72bb7807a1a53e2/GeomagPy-v0.3.4.tar.gz"
      }
    ],
    "v0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b2908ce8422e20f563830cf91b7fe92c",
          "sha256": "2137d42edef6b7354757f0c1f255b56a27a03b1094fa70d46c584b134335864c"
        },
        "downloads": 307,
        "filename": "GeomagPy-v0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b2908ce8422e20f563830cf91b7fe92c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1530208,
        "upload_time": "2016-12-16T14:56:19",
        "url": "https://files.pythonhosted.org/packages/12/01/4a2f2e0635570ab00c865425d532fefeb18b1583fc8a066d802f8e99632c/GeomagPy-v0.3.6.tar.gz"
      }
    ],
    "v0.3.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "81281669c30621fc8c2c845cf2d4ef2b",
          "sha256": "b6f71389d14036f0dc961486f7650a1742e87a99c8e65ababe40f0cbc3dc7b86"
        },
        "downloads": 13,
        "filename": "GeomagPy-v0.3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "81281669c30621fc8c2c845cf2d4ef2b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1536503,
        "upload_time": "2017-01-18T11:06:13",
        "url": "https://files.pythonhosted.org/packages/0c/61/b0dffed8456ca1ecc497be889f09c7d4faddfabf5e6a250fd2557973bcba/GeomagPy-v0.3.7.tar.gz"
      }
    ],
    "v0.3.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3e97c3fbe574e90ea86f970db3fcbcb1",
          "sha256": "7626c63092ebd434f4a47ba0ed0b1cce516d6655993c63e8d97f40e2d41b3876"
        },
        "downloads": 17,
        "filename": "GeomagPy-v0.3.8.tar.gz",
        "has_sig": false,
        "md5_digest": "3e97c3fbe574e90ea86f970db3fcbcb1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1537001,
        "upload_time": "2017-02-16T22:09:40",
        "url": "https://files.pythonhosted.org/packages/a9/f2/f35a17edee464da0ee9c273e93ee33f23f7c97349f4c2afedd1dc649aea4/GeomagPy-v0.3.8.tar.gz"
      }
    ],
    "v0.3.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6ad4bd7587868cae21b479209d9ce492",
          "sha256": "16ffd7026df5b98f92380ca4b9a6b600b179af01a5e654fc4dfa508e159351c9"
        },
        "downloads": 13,
        "filename": "GeomagPy-v0.3.9.tar.gz",
        "has_sig": false,
        "md5_digest": "6ad4bd7587868cae21b479209d9ce492",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1538479,
        "upload_time": "2017-03-21T17:51:01",
        "url": "https://files.pythonhosted.org/packages/ab/5d/01f52139ff57980d930f0613136cc97b40efe3c6e44a95da5d476b9ad618/GeomagPy-v0.3.9.tar.gz"
      }
    ],
    "v0.3.91": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0fd922d692af07a836a0fc585d251d17",
          "sha256": "497ce4a440ee535602e1ab4992ab7ccc2e3910ec56d9da6638f77ca4bbdc265b"
        },
        "downloads": 118,
        "filename": "GeomagPy-v0.3.91.tar.gz",
        "has_sig": false,
        "md5_digest": "0fd922d692af07a836a0fc585d251d17",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2691976,
        "upload_time": "2017-04-05T22:25:49",
        "url": "https://files.pythonhosted.org/packages/02/5d/5b3d05b5faaecb490a4e548069a4c9928f873f02b4b73e6794e17e1a2b4e/GeomagPy-v0.3.91.tar.gz"
      }
    ],
    "v0.3.92": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4a670894706eb216df2a75d52db3afaf",
          "sha256": "89c22de934dab5117b903a345ab35306ab15a2957e6ca24ba65de5f9a44e05f8"
        },
        "downloads": 168,
        "filename": "GeomagPy-v0.3.92.tar.gz",
        "has_sig": false,
        "md5_digest": "4a670894706eb216df2a75d52db3afaf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2751370,
        "upload_time": "2017-04-07T17:32:51",
        "url": "https://files.pythonhosted.org/packages/77/d0/d8eb1aee93304a36703de212a15ad0fe7aa3b58d798e2f4a670d09daf331/GeomagPy-v0.3.92.tar.gz"
      }
    ],
    "v0.3.93": [
      {
        "comment_text": "",
        "digests": {
          "md5": "07dbef6eff0f06451b688fb217ee9e50",
          "sha256": "16a7f142b7a37f23c98be5e0f081caf1b8e42bfba17a53e6f5b1f797fdea2910"
        },
        "downloads": 0,
        "filename": "GeomagPy-v0.3.93.tar.gz",
        "has_sig": false,
        "md5_digest": "07dbef6eff0f06451b688fb217ee9e50",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2779834,
        "upload_time": "2017-06-22T12:12:56",
        "url": "https://files.pythonhosted.org/packages/f6/5c/a671546f60311c207c752e82f60875d2fa5f0f5c0fd684f3a9bd3b015398/GeomagPy-v0.3.93.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "07dbef6eff0f06451b688fb217ee9e50",
        "sha256": "16a7f142b7a37f23c98be5e0f081caf1b8e42bfba17a53e6f5b1f797fdea2910"
      },
      "downloads": 0,
      "filename": "GeomagPy-v0.3.93.tar.gz",
      "has_sig": false,
      "md5_digest": "07dbef6eff0f06451b688fb217ee9e50",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 2779834,
      "upload_time": "2017-06-22T12:12:56",
      "url": "https://files.pythonhosted.org/packages/f6/5c/a671546f60311c207c752e82f60875d2fa5f0f5c0fd684f3a9bd3b015398/GeomagPy-v0.3.93.tar.gz"
    }
  ]
}