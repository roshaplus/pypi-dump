{
  "info": {
    "author": "Bret Curtis",
    "author_email": "bret.curtis@amplidata.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.4",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: Jython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Database"
    ],
    "description": "=========\nAmplidata\n=========\n\nThis is a fork of the PyMongo driver for MongoDB that specifically\nadds the option to set hostname validation on or off when supplying\nyour own CA certificates via ``ssl_ca_certs``. This is the same\nas setting ``sslAllowInvalidHostnames`` in MongDB itself.\n\nFor more information, please see:\n`Jira bug PYTHON-834 <https://jira.mongodb.org/browse/PYTHON-834>`_\n`Github pull request 251 <https://github.com/mongodb/mongo-python-driver/pull/251>`_\n\nWe feel that this is an important enough feature to warrant a fork,\neven if temporary, to clients that need proper end-to-end encryption\nwith ``ssl_cert_reqs`` set to ``ssl.CERT_REQUIRED`` without validating\nthe hostname. This is typically required when the network is possibly\nhostile but you control the MongoDB system with your own CA cert and\nyou've issued one yourself. However you cannot guarantee the hostname,\nsuch as on an Amazon service or deployment on a client site with\ntheir own network topology and servers.\n\n=======\nPyMongo\n=======\n:Info: See `the mongo site <http://www.mongodb.org>`_ for more information. See `github <http://github.com/mongodb/mongo-python-driver/tree>`_ for the latest source.\n:Author: Mike Dirolf\n:Maintainer: Bernie Hackett <bernie@mongodb.com>\n\nAbout\n=====\n\nThe PyMongo distribution contains tools for interacting with MongoDB\ndatabase from Python.  The ``bson`` package is an implementation of\nthe `BSON format <http://bsonspec.org>`_ for Python. The ``pymongo``\npackage is a native Python driver for MongoDB. The ``gridfs`` package\nis a `gridfs\n<http://www.mongodb.org/display/DOCS/GridFS+Specification>`_\nimplementation on top of ``pymongo``.\n\nSupport / Feedback\n==================\n\nFor issues with, questions about, or feedback for PyMongo, please look into\nour `support channels <http://www.mongodb.org/about/support>`_. Please\ndo not email any of the PyMongo developers directly with issues or\nquestions - you're more likely to get an answer on the `mongodb-user\n<http://groups.google.com/group/mongodb-user>`_ list on Google Groups.\n\nBugs / Feature Requests\n=======================\n\nThink you\u2019ve found a bug? Want to see a new feature in PyMongo? Please open a\ncase in our issue management tool, JIRA:\n\n- `Create an account and login <https://jira.mongodb.org>`_.\n- Navigate to `the PYTHON project <https://jira.mongodb.org/browse/PYTHON>`_.\n- Click **Create Issue** - Please provide as much information as possible about the issue type and how to reproduce it.\n\nBug reports in JIRA for all driver projects (i.e. PYTHON, CSHARP, JAVA) and the\nCore Server (i.e. SERVER) project are **public**.\n\nHow To Ask For Help\n-------------------\n\nPlease include all of the following information when opening an issue:\n\n- Detailed steps to reproduce the problem, including full traceback, if possible.\n- The exact python version used, with patch level::\n\n  $ python -c \"import sys; print(sys.version)\"\n\n- The exact version of PyMongo used, with patch level::\n\n  $ python -c \"import pymongo; print(pymongo.version); print(pymongo.has_c())\"\n\n- The operating system and version (e.g. Windows 7, OSX 10.8, ...)\n- Web framework or asynchronous network library used, if any, with version (e.g.\n  Django 1.7, mod_wsgi 4.3.0, gevent 1.0.1, Tornado 4.0.2, ...)\n\nSecurity Vulnerabilities\n------------------------\n\nIf you\u2019ve identified a security vulnerability in a driver or any other\nMongoDB project, please report it according to the `instructions here\n<http://docs.mongodb.org/manual/tutorial/create-a-vulnerability-report>`_.\n\nInstallation\n============\n\nIf you have `setuptools\n<http://pythonhosted.org/setuptools/>`_ installed you\nshould be able to do **easy_install pymongo** to install\nPyMongo. Otherwise you can download the project source and do **python\nsetup.py install** to install.\n\nDo **not** install the \"bson\" package. PyMongo comes with its own bson package;\ndoing \"easy_install bson\" installs a third-party package that is incompatible\nwith PyMongo.\n\nDependencies\n============\n\nThe PyMongo distribution is supported and tested on Python 2.x (where\nx >= 4) and Python 3.x (where x >= 1). PyMongo versions <= 1.3 also\nsupported Python 2.3, but that is no longer supported.\n\nAdditional dependencies are:\n\n- (to generate documentation) sphinx_\n- (to auto-discover tests) `nose <http://somethingaboutorange.com/mrl/projects/nose/>`_\n\nExamples\n========\nHere's a basic example (for more see the *examples* section of the docs):\n\n.. code-block:: pycon\n\n  >>> import pymongo\n  >>> client = pymongo.MongoClient(\"localhost\", 27017)\n  >>> db = client.test\n  >>> db.name\n  u'test'\n  >>> db.my_collection\n  Collection(Database(MongoClient('localhost', 27017), u'test'), u'my_collection')\n  >>> db.my_collection.save({\"x\": 10})\n  ObjectId('4aba15ebe23f6b53b0000000')\n  >>> db.my_collection.save({\"x\": 8})\n  ObjectId('4aba160ee23f6b543e000000')\n  >>> db.my_collection.save({\"x\": 11})\n  ObjectId('4aba160ee23f6b543e000002')\n  >>> db.my_collection.find_one()\n  {u'x': 10, u'_id': ObjectId('4aba15ebe23f6b53b0000000')}\n  >>> for item in db.my_collection.find():\n  ...     print item[\"x\"]\n  ...\n  10\n  8\n  11\n  >>> db.my_collection.create_index(\"x\")\n  u'x_1'\n  >>> for item in db.my_collection.find().sort(\"x\", pymongo.ASCENDING):\n  ...     print item[\"x\"]\n  ...\n  8\n  10\n  11\n  >>> [item[\"x\"] for item in db.my_collection.find().limit(2).skip(1)]\n  [8, 11]\n\nDocumentation\n=============\n\nYou will need sphinx_ installed to generate the\ndocumentation. Documentation can be generated by running **python\nsetup.py doc**. Generated documentation can be found in the\n*doc/build/html/* directory.\n\nTesting\n=======\n\nThe easiest way to run the tests is to install `nose\n<http://somethingaboutorange.com/mrl/projects/nose/>`_ (**easy_install\nnose**) and run **nosetests** or **python setup.py test** in the root\nof the distribution. Tests are located in the *test/* directory.\n\n.. _sphinx: http://sphinx.pocoo.org/",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/amplidata/mongo-python-driver",
    "keywords": "mongo,mongodb,pymongo,gridfs,bson,amplidata,ssl",
    "license": "Apache License, Version 2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pymongo-amplidata",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pymongo-amplidata/",
    "release_url": "https://pypi.org/project/pymongo-amplidata/2.8-2/",
    "requires_python": null,
    "summary": "Amplidata's fork of the python driver for MongoDB <http://www.mongodb.org>",
    "version": "2.8-2"
  },
  "releases": {
    "2.8-1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e82cb2abeb2c994ebbfe79f1cd6e2e8b",
          "sha256": "b30b1cb685178427021e97893df7fd7478145b34fbfd67c841c55efeacb483fa"
        },
        "downloads": 909,
        "filename": "pymongo-amplidata-2.8-1.tar.gz",
        "has_sig": false,
        "md5_digest": "e82cb2abeb2c994ebbfe79f1cd6e2e8b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 395306,
        "upload_time": "2015-02-11T12:11:02",
        "url": "https://files.pythonhosted.org/packages/86/41/a4f0fb8efde3aa6663a8d7f8f609085994ffaa7f69f8b68bec6cadae94d7/pymongo-amplidata-2.8-1.tar.gz"
      }
    ],
    "2.8-2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bd6da40ae22ea0df37b6afef8f0420ed",
          "sha256": "bffd604628535b2a5ed4263dfb690f704170cdb5c1873a9a90e79590584c079a"
        },
        "downloads": 1659,
        "filename": "pymongo-amplidata-2.8-2.tar.gz",
        "has_sig": false,
        "md5_digest": "bd6da40ae22ea0df37b6afef8f0420ed",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 395513,
        "upload_time": "2015-02-13T11:36:04",
        "url": "https://files.pythonhosted.org/packages/76/32/a1c0ba0732c1c4ad6cc30bee8e79cba05bdc7b44616ba9418464c6088783/pymongo-amplidata-2.8-2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "bd6da40ae22ea0df37b6afef8f0420ed",
        "sha256": "bffd604628535b2a5ed4263dfb690f704170cdb5c1873a9a90e79590584c079a"
      },
      "downloads": 1659,
      "filename": "pymongo-amplidata-2.8-2.tar.gz",
      "has_sig": false,
      "md5_digest": "bd6da40ae22ea0df37b6afef8f0420ed",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 395513,
      "upload_time": "2015-02-13T11:36:04",
      "url": "https://files.pythonhosted.org/packages/76/32/a1c0ba0732c1c4ad6cc30bee8e79cba05bdc7b44616ba9418464c6088783/pymongo-amplidata-2.8-2.tar.gz"
    }
  ]
}