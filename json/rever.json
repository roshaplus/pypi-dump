{
  "info": {
    "author": "Liam Cryan",
    "author_email": "cryan.liam@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "---------------------------\r\nRever, A retrying decorator\r\n---------------------------\r\n\r\n\r\nWhy use it?\r\n-----------\r\n\r\nA retry decorator can be useful in many situations.  One example is when scraping web pages.\r\nSuppose you have a function that retrieves the status code response of a GET request.  If the status\r\ncode returns 200, then you are happy.  But if not, then there here is what you might do:\r\n\r\n1)  You could write your retrying logic directly into your functions\r\n\r\n    >>> def get_response(webpage):\r\n    >>>     response = function_to_get_webpage(webpage)\r\n    >>>     status_code = function_to_get_status_code(response)\r\n    >>>     if status_code == 200:\r\n    >>>         return status_code\r\n    >>>     else:\r\n    >>>         time.sleep(3)\r\n    >>>         num_tries -= 1\r\n    >>>         if num_tries > 0:\r\n    >>>             return get_response(webpage)\r\n    >>>\r\n    >>> if __name__ == \"__main__\":\r\n    >>>     num_tries = 2\r\n    >>>     get_response(\"http://www.google.com\")\r\n\r\n2)  You could use a retrying decorator like rever\r\n\r\n    >>> @rever(times=2, pause=3, exception=MyException, raises=False)\r\n    >>> def get_response(webpage):\r\n    >>>     response = function_to_get_webpage(webpage)\r\n    >>>     status_code = function_to_get_status_code(response)\r\n    >>>     if status_code == 200:\r\n    >>>         return status_code\r\n    >>>     else:\r\n    >>>         raise MyException\r\n    >>>\r\n    >>> if __name__ == \"__main__\":\r\n    >>>     get_response(\"http://www.google.com\")\r\n\r\n\r\nIn the first example, you need to write out the retrying logic yourself.  The second\r\nexample it is taken care of in the decorator; a nice way of keeping things separate.\r\n\r\n\r\nKeyword Arguments\r\n-----------------\r\n\r\nThe rever decorator takes only keyword arguments.  By default, if no kwargs are supplied, then\r\nthe decorator will retry the function 1 time, with a 0 second pause, catch any exception that occurs,\r\nraise a MaxRetriesPerformed error if all of the retrys fail, and will not call any function prior to retrying.\r\n\r\n\r\ntimes\r\n    Retry a certain number of times\r\n\r\n    >>> @rever(times=10)\r\n\r\n    *Explanation: retry 10 times, pause for 0 seconds between each retry,\r\n    catch any exception, raise MaxRetriesPerformed if all attempts fail,\r\n    do not call any function prior to retrying*\r\n\r\npause\r\n    Pause for some number of seconds between each retry\r\n\r\n    >>> @rever(pause=5)\r\n\r\n    *Explanation: retry 1 time, pause for 5 seconds between each retry,\r\n    catch any exception, raise MaxRetriesPerformed if all attempts fail,\r\n    do not call ny function prior to retrying*\r\n\r\n\r\nexception\r\n    Catch one specific exception\r\n\r\n    >>> @rever(exception=TypeError)\r\n    >>> @rever(exception=(TypeError, ))\r\n\r\n    *Explanation: retry 1 time, pause for 0 seconds between each retry,\r\n    catch TypeError, raise MaxRetriesPerformed if all attempts fail,\r\n    do not call any function prior to retrying*\r\n\r\n    Catch one of multiple specific exceptions\r\n\r\n    >>> @rever(exception=(TypeError, ConnectionError))\r\n\r\n    *Explanation: retry 1 time, pause for 0 seconds between each retry,\r\n    catch TypeError or ConnectionError, raise MaxRetriesPerformed if all attempts fail,\r\n    do not call any function prior to retrying*\r\n\r\nraises\r\n    Raise an exception or do not\r\n\r\n    >>> @rever(raises=False)\r\n\r\n    *Explanation: retry 1 time, pauses for 0 seconds between each retry,\r\n    catch any exception, do not raise MaxRetriesPerformed if all attempts fail,\r\n    do not call any function prior to retrying*\r\n\r\nprior\r\n    Call a function prior to retrying\r\n\r\n    >>> @rever(prior=some_function_to_call_prior_to_retyring)\r\n\r\n    *Explanation: retry 1 time, pause for 0 seconds between each retry,\r\n    catch any exception, do not raise MaxRetriesPerformed if all attempts fail,\r\n    call a function prior to retrying*\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nIf you want to install it via pip, you can install from PyPI:\r\n\r\n    $ pip install rever\r\n\r\n\r\nTesting\r\n-------\r\n\r\nTo run tests, clone the github repository:\r\n\r\n    $ git clone https://github.com/limecrayon/rever\r\n\r\nIf you want to use tox, in the terminal type:\r\n\r\n    $ pip install tox\r\n\r\n    $ tox\r\n\r\nOr you could skip tox and use pytest:\r\n\r\n    $ pip install pytest\r\n\r\n    $ python -m pytest\r\n\r\n\r\nNext Steps\r\n----------\r\n\r\nThis has only been tested on Python 3.5.  It will probably work on other Python 3.x version as well.\r\nNext step is to test on other Python versions, possibly using Travis CI.\n\n-------\r\nHistory\r\n-------\r\n\r\nversion 0.2.0 (6/26/2017)\r\n-------------------------\r\n\r\n- specify a function to call prior to retrying\r\n- realized that the retry count was off by 1, now it should be correct\r\n\r\nversion 0.1.0 (6/24/2017)\r\n-------------------------\r\n\r\n- specify whether to raise exception after all retry attempts\r\n- included some testing\r\n- default pause is now zero seconds\r\n\r\nversion 0.0.1 (6/23/2017)\r\n-------------------------\r\n\r\n- retry decorator\r\n- specify number of times to retry\r\n- specify number of seconds to wait\r\n- specify which exceptions to catch",
    "docs_url": null,
    "download_url": "https://github.com/limecrayon/rever/archive/0.2.0.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/limecrayon/rever",
    "keywords": "retry decorator rever",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rever",
    "platform": "",
    "project_url": "https://pypi.org/project/rever/",
    "release_url": "https://pypi.org/project/rever/0.2.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Rever, a retrying decorator",
    "version": "0.2.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3fc0b4b82745820c3830e9e101e064a6",
          "sha256": "fccae061261fb83ba15c1b549fc0c9f117851ac778939ea5db565edf8d38dff3"
        },
        "downloads": 0,
        "filename": "rever-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3fc0b4b82745820c3830e9e101e064a6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4245,
        "upload_time": "2017-06-26T03:11:11",
        "url": "https://files.pythonhosted.org/packages/62/cb/efff54afba0cf9ab8fa0c3d0252e19d86a5de0b085e91446955c61469919/rever-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c4e38f9815eb4a3451dd98a459fe5909",
          "sha256": "f01759d75140955d6656ac3c73ab432620eed2cfa64d5da9c06456581a63d492"
        },
        "downloads": 0,
        "filename": "rever-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c4e38f9815eb4a3451dd98a459fe5909",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4523,
        "upload_time": "2017-06-27T04:30:14",
        "url": "https://files.pythonhosted.org/packages/b6/82/8a70d1d3158f2c0a44aa9c571dfdfffbd395f506f02eaa3fe619298e2a3d/rever-0.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c4e38f9815eb4a3451dd98a459fe5909",
        "sha256": "f01759d75140955d6656ac3c73ab432620eed2cfa64d5da9c06456581a63d492"
      },
      "downloads": 0,
      "filename": "rever-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c4e38f9815eb4a3451dd98a459fe5909",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4523,
      "upload_time": "2017-06-27T04:30:14",
      "url": "https://files.pythonhosted.org/packages/b6/82/8a70d1d3158f2c0a44aa9c571dfdfffbd395f506f02eaa3fe619298e2a3d/rever-0.2.0.tar.gz"
    }
  ]
}