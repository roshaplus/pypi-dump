{
  "info": {
    "author": "Pavan Ramkumar",
    "author_email": "pavan.ramkumar@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development"
    ],
    "description": "pyglmnet\n========\n\nA python implementation of elastic-net regularized generalized linear models\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n|License| |Travis| |Codecov| |Gitter|\n\n`Generalized linear\nmodels <https://en.wikipedia.org/wiki/Generalized_linear_model>`__ are\nwell-established tools for regression and classification and are widely\napplied across the sciences, economics, business, and finance. They are\nuniquely identifiable due to their convex loss and easy to interpret due\nto their point-wise non-linearities and well-defined noise models.\n\nIn the era of exploratory data analyses with a large number of predictor\nvariables, it is important to regularize. Regularization prevents\noverfitting by penalizing the negative log likelihood and can be used to\narticulate prior knowledge about the parameters in a structured form.\n\nDespite the attractiveness of regularized GLMs, the available tools in\nthe Python data science eco-system are highly fragmented. More\nspecifically,\n\n-  `statsmodels <http://statsmodels.sourceforge.net/devel/glm.html>`__\n   provides a wide range of link functions but no regularization.\n-  `scikit-learn <http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.ElasticNet.html>`__\n   provides elastic net regularization but only for linear models.\n-  `lightning <https://github.com/scikit-learn-contrib/lightning>`__\n   provides elastic net and group lasso regularization, but only for\n   linear and logistic regression.\n\n**Pyglmnet** is a response to this fragmentation. Here are some\nhighlights.\n\n-  Pyglmnet provides a wide range of noise models (and paired canonical\n   link functions): ``'gaussian'``, ``'binomial'``, ``'multinomial'``,\n   '``poisson``', and ``'softplus'``.\n\n-  It supports a wide range of regularizers: ridge, lasso, elastic net,\n   `group\n   lasso <https://en.wikipedia.org/wiki/Proximal_gradient_methods_for_learning#Group_lasso>`__,\n   and `Tikhonov\n   regularization <https://en.wikipedia.org/wiki/Tikhonov_regularization>`__.\n\n-  Pyglmnet's API is designed to be compatible with scikit-learn, so you\n   can deploy ``Pipeline`` tools such as ``GridSearchCV()`` and\n   ``cross_val_score()``.\n\n-  We follow the same approach and notations as in `Friedman, J.,\n   Hastie, T., & Tibshirani, R.\n   (2010) <https://core.ac.uk/download/files/153/6287975.pdf>`__ and the\n   accompanying widely popular `R\n   package <https://web.stanford.edu/~hastie/glmnet/glmnet_alpha.html>`__.\n\n-  We have implemented a cyclical coordinate descent optimizer with\n   Newton update, active sets, update caching, and warm restarts. This\n   optimization approach is identical to the one used in R package.\n\n-  A number of Python wrappers exist for the R glmnet package (e.g.\n   `here <https://github.com/civisanalytics/python-glmnet>`__ and\n   `here <https://github.com/dwf/glmnet-python>`__) but in contrast to\n   these, Pyglmnet is a pure python implementation. Therefore, it is\n   easy to modify and introduce additional noise models and regularizers\n   in the future.\n\nBenchmarks\n~~~~~~~~~~\n\nHere is table comparing ``pyglmnet`` against ``scikit-learn``'s\n``linear_model``, ``statsmodels``, and ``R``.\n\nThe numbers below are run time (in milliseconds) to fit a :math:`1000`\nsamples x :math:`100` predictors sparse matrix (density :math:`0.05`).\nThis was done on a c. 2011 Macbook Pro, so your numbers may vary.\n\n+------------+------------+----------------+---------------+---------+\n| distr      | pyglmnet   | scikit-learn   | statsmodels   | R       |\n+============+============+================+===============+=========+\n| gaussian   | 6.8        | 1.2            | 29.8          | 10.3    |\n+------------+------------+----------------+---------------+---------+\n| binomial   | 16.3       | 4.5            | 89.3          | --      |\n+------------+------------+----------------+---------------+---------+\n| poisson    | 5.8        | --             | 117.2         | 156.1   |\n+------------+------------+----------------+---------------+---------+\n\nWe provide a function called ``BenchMarkGLM()`` in ``pyglmnet.datasets``\nif you would like to run these benchmarks yourself, but you need to take\ncare of the dependencies: ``scikit-learn``, ``Rpy2``, and\n``statsmodels`` yourself.\n\nInstallation\n~~~~~~~~~~~~\n\nNow ``pip`` installable!\n\n.. code:: bash\n\n    $ pip install pyglmnet\n\nManual installation instructions below:\n\nClone the repository.\n\n.. code:: bash\n\n    $ git clone http://github.com/glm-tools/pyglmnet\n\nInstall ``pyglmnet`` using ``setup.py`` as follows\n\n.. code:: bash\n\n    $ python setup.py develop install\n\nGetting Started\n~~~~~~~~~~~~~~~\n\nHere is an example on how to use the ``GLM`` estimator.\n\n.. code:: python\n\n    import numpy as np\n    import scipy.sparse as sps\n    from sklearn.preprocessing import StandardScaler\n    from pyglmnet import GLM\n\n    # create an instance of the GLM class\n    glm = GLM(distr='poisson')\n\n    n_samples, n_features = 10000, 100\n\n    # sample random coefficients\n    beta0 = np.random.normal(0.0, 1.0, 1)\n    beta = sps.rand(n_features, 1, 0.1)\n    beta = np.array(beta.todense())\n\n    # simulate training data\n    X_train = np.random.normal(0.0, 1.0, [n_samples, n_features])\n    y_train = glm.simulate(beta0, beta, X_train)\n\n    # simulate testing data\n    X_test = np.random.normal(0.0, 1.0, [n_samples, n_features])\n    y_test = glm.simulate(beta0, beta, X_test)\n\n    # fit the model on the training data\n    scaler = StandardScaler().fit(X_train)\n    glm.fit(scaler.transform(X_train), y_train)\n\n    # predict using fitted model on the test data\n    yhat_test = glm.predict(scaler.transform(X_test))\n\n    # score the model\n    deviance = glm.score(X_test, y_test)\n\n`More pyglmnet examples and use\ncases <http://glm-tools.github.io/pyglmnet/auto_examples/index.html>`__.\n\nTutorial\n~~~~~~~~\n\nHere is an `extensive\ntutorial <http://glm-tools.github.io/pyglmnet/tutorial.html>`__ on GLMs,\noptimization and pseudo-code.\n\nHere are\n`slides <https://pavanramkumar.github.io/pydata-chicago-2016>`__ from a\nrecent talk at `PyData Chicago\n2016 <http://pydata.org/chicago2016/schedule/presentation/15/>`__,\ncorresponding `tutorial\nnotebooks <http://github.com/pavanramkumar/pydata-chicago-2016>`__ and a\n`video <https://www.youtube.com/watch?v=zXec96KD1uA>`__.\n\nHow to contribute?\n~~~~~~~~~~~~~~~~~~\n\nWe welcome pull requests. Please see our `developer documentation\npage <http://glm-tools.github.io/pyglmnet/developers.html>`__ for more\ndetails.\n\nAuthor\n~~~~~~\n\n-  `Pavan Ramkumar <http:/github.com/pavanramkumar>`__\n\nContributors\n~~~~~~~~~~~~\n\n-  `Mainak Jas <http:/github.com/jasmainak>`__\n-  `Titipat Achakulvisut <http:/github.com/titipata>`__\n-  `Aid Idrizovi\u0107 <http:/github.com/the872>`__\n-  `Vinicius Marques <http:/github.com/marquesVF>`__\n-  `Daniel Acuna <http:/github.com/daniel-acuna>`__\n-  `Hugo Fernandes <http:/github.com/hugoguh>`__\n-  `Eva Dyer <http:/github.com/evadyer>`__\n-  `Matt Antalek <https://github.com/themantalope>`__\n\nAcknowledgments\n~~~~~~~~~~~~~~~\n\n-  `Konrad Kording <http://kordinglab.com>`__ for funding and support\n-  `Sara\n   Solla <http://www.physics.northwestern.edu/people/joint-faculty/sara-solla.html>`__\n   for masterful GLM lectures\n\nLicense\n~~~~~~~\n\nMIT License Copyright (c) 2016 Pavan Ramkumar\n\n.. |License| image:: https://img.shields.io/badge/license-MIT-blue.svg?style=flat\n   :target: https://github.com/glm-tools/pyglmnet/blob/master/LICENSE\n.. |Travis| image:: https://api.travis-ci.org/glm-tools/pyglmnet.svg?branch=master\n   :target: https://travis-ci.org/glm-tools/pyglmnet\n.. |Codecov| image:: https://codecov.io/github/glm-tools/pyglmnet/coverage.svg?precision=0\n   :target: https://codecov.io/gh/glm-tools/pyglmnet\n.. |Gitter| image:: https://badges.gitter.im/glm-tools/pyglmnet.svg\n   :target: https://gitter.im/pavanramkumar/pyglmnet?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge",
    "docs_url": null,
    "download_url": "https://github.com/glm-tools/pyglmnet.git",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyglmnet",
    "platform": "any",
    "project_url": "https://pypi.org/project/pyglmnet/",
    "release_url": "https://pypi.org/project/pyglmnet/1.0.0/",
    "requires_python": "",
    "summary": "Elastic-net regularized generalized linear models.",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "52997300cd8de15d15920200c13b09a4",
          "sha256": "54ca3b4e53cc800475f93f16703910c7fad4636654ddb4811188236af264a0a9"
        },
        "downloads": 67,
        "filename": "pyglmnet-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "52997300cd8de15d15920200c13b09a4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21539,
        "upload_time": "2016-11-19T00:25:03",
        "url": "https://files.pythonhosted.org/packages/6d/d8/3e40e2f88680470443aa61cafc6514b5a8630fcd376d460f8866d3a263ae/pyglmnet-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "52997300cd8de15d15920200c13b09a4",
        "sha256": "54ca3b4e53cc800475f93f16703910c7fad4636654ddb4811188236af264a0a9"
      },
      "downloads": 67,
      "filename": "pyglmnet-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "52997300cd8de15d15920200c13b09a4",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 21539,
      "upload_time": "2016-11-19T00:25:03",
      "url": "https://files.pythonhosted.org/packages/6d/d8/3e40e2f88680470443aa61cafc6514b5a8630fcd376d460f8866d3a263ae/pyglmnet-1.0.0.tar.gz"
    }
  ]
}