{
  "info": {
    "author": "Fiona Pigott, Jeff Kolb, Josh Montague, Aaron Gonzales",
    "author_email": "agonzales@twitter.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Python Twitter Search API\n=========================\n\nThis library serves as a Python interface to the `Twitter premium and\nenterprise search\nAPIs <https://developer.twitter.com/en/docs/tweets/search/overview/>`__.\nIt provides a command-line utility and a library usable from within a\nPython program. It comes with tools for assisting in dynamic generation\nof search rules and for parsing tweets.\n\nPretty docs can be seen\n`here <https://twitterdev.github.io/search-tweets-python/>`__.\n\nFeatures\n========\n\n-  Command-line utility is pipeable to other tools (e.g., ``jq``).\n-  Automatically handles pagination of results with specifiable limits\n-  Delivers a stream of data to the user for low in-memory requirements\n-  Handles Enterprise and Premium authentication methods\n-  Flexible usage within a python program\n-  Compatible with our group's Tweet Parser for rapid extraction of\n   relevant data fields from each tweet payload\n-  Supports the Search Counts endpoint, which can reduce API call usage\n   and provide rapid insights if you only need volumes and not tweet\n   payloads\n\nInstallation\n============\n\nThe ``searchtweets`` library is on Pypi:\n\n.. code:: bash\n\n    pip install searchtweets\n\nOr you can install the development version locally via\n\n.. code:: bash\n\n    git clone https://github.com/twitterdev/search-tweets-python\n    cd search-tweets-python\n    pip install -e .\n\n--------------\n\nCredential Handling\n===================\n\nThe premium and enterprise Search APIs use different authentication\nmethods and we attempt to provide a seamless way to handle\nauthentication for all customers. We support both YAML-file based\nmethods and environment variables for access.\n\nA YAML credential file should look like this:\n\n.. code:: .yaml\n\n    <key>:\n      account_type: <OPTIONAL PREMIUM_OR_ENTERPRISE>\n      endpoint: <FULL_URL_OF_ENDPOINT>\n      username: <USERNAME>\n      password: <PW>\n      bearer_token: <TOKEN>\n\nPremium clients will require the ``bearer_token`` and ``endpoint``\nfields; Enterprise clients require ``username``, ``password``, and\n``endpoint``. If you do not specify the ``account_type``, we attempt to\ndiscern the account type and declare a warning about this behavior. The\n``load_credentials`` function also allows ``account_type`` to be set.\n\nOur credential reader will look for this file at\n``\"~/.twitter_keys.yaml\"``, but you can pass the relevant location as\nneeded. You can also specify a different key in the yaml file, which can\nbe useful if you have different endpoints, e.g., ``dev``, ``test``,\n``prod``, etc. The file might look like this:\n\n.. code:: .yaml\n\n    search_tweets_dev:\n      account_type: premium\n      endpoint: <FULL_URL_OF_ENDPOINT>\n      bearer_token: <TOKEN>\n\n    search_tweets_prod:\n      account_type: premium\n      endpoint: <FULL_URL_OF_ENDPOINT>\n      bearer_token: <TOKEN>\n\nIf you want or need to pass credentials via environment variables, you\ncan set the appropriate variables of the following:\n\n::\n\n    export SEARCHTWEETS_ENDPOINT=\n    export SEARCHTWEETS_USERNAME=\n    export SEARCHTWEETS_PASSWORD=\n    export SEARCHTWEETS_BEARER_TOKEN=\n    export SEARCHTWEETS_ACCOUNT_TYPE=\n\nThe ``load_credentials`` function will attempt to find these variables\nif it cannot load fields from the yaml file, and it will **overwrite any\nfound credentials from the YAML file** if they have been parsed. This\nbehavior can be changed by setting the ``load_credentials`` parameter\n``env_overwrite`` to ``False``.\n\nThe following cells demonstrates credential handling, both in the\ncommand line app and Python library.\n\n.. code:: python\n\n    from searchtweets import load_credentials\n\n.. code:: python\n\n    load_credentials(filename=\"./search_tweets_creds_example.yaml\",\n                     yaml_key=\"search_tweets_ent_example\",\n                     env_overwrite=False)\n\n::\n\n    {'endpoint': '<MY_ENDPOINT>',\n     'password': '<MY_PASSWORD>',\n     'username': '<MY_USERNAME>'}\n\n.. code:: python\n\n    load_credentials(filename=\"./search_tweets_creds_example.yaml\",\n                     yaml_key=\"search_tweets_premium_example\",\n                     env_overwrite=False)\n\n::\n\n    {'bearer_token': '<A_VERY_LONG_MAGIC_STRING>',\n     'endpoint': 'https://api.twitter.com/1.1/tweets/search/30day/dev.json'}\n\nEnvironment Variable Overrides\n------------------------------\n\nIf we set our environment variables, the program will look for them\nregardless of a YAML file\u2019s validity or existence.\n\n.. code:: python\n\n    import os\n    os.environ[\"SEARCHTWEETS_USERNAME\"] = \"ENV_USERNAME\"\n    os.environ[\"SEARCHTWEETS_PASSWORD\"] = \"ENV_PW\"\n    os.environ[\"SEARCHTWEETS_ENDPOINT\"] = \"https://endpoint\"\n\n    load_credentials(filename=\"nothing\", yaml_key=\"no_key_here\")\n\n::\n\n    cannot read file nothing\n    Error parsing YAML file; searching for valid environment variables\n\n::\n\n    {'endpoint': 'https://endpoint',\n     'password': 'ENV_PW',\n     'username': 'ENV_USERNAME'}\n\n--------------\n\nUsing the Comand Line Application\n=================================\n\nThe library includes an application, ``search_tweets.py``, in the\n``tools`` directory that provides rapid access to Tweets.\n\nNote that the ``--results-per-call`` flag specifies an argument to the\nAPI call ( ``maxResults``, results returned per CALL), not as a hard max\nto number of results returned from this program. The argument\n``--max-results`` defines the maximum number of results to return from a\ngiven call. All examples assume that your credentials are set up\ncorrectly in a default location - ``.twitter_keys.yaml`` or in\nenvironment variables.\n\n**Stream json results to stdout without saving**\n\n.. code:: bash\n\n    python search_tweets.py \\\n      --max-results 1000 \\\n      --results-per-call 100 \\\n      --filter-rule \"beyonce has:hashtags\" \\\n      --print-stream\n\n**Stream json results to stdout and save to a file**\n\n.. code:: bash\n\n    python search_tweets.py \\\n      --max-results 1000 \\\n      --results-per-call 100 \\\n      --filter-rule \"beyonce has:hashtags\" \\\n      --filename-prefix beyonce_geo \\\n      --print-stream\n\n**Save to file without output**\n\n.. code:: bash\n\n    python search_tweets.py \\\n      --max-results 100 \\\n      --results-per-call 100 \\\n      --filter-rule \"beyonce has:hashtags\" \\\n      --filename-prefix beyonce_geo \\\n      --no-print-stream\n\nOptions can be passed via a configuration file (either ini or YAML). An\nexample file can be found in the ``tools/api_config_example.config`` or\n``./tools/api_yaml_example.yaml`` files, which might look like this:\n\n.. code:: bash\n\n    [search_rules]\n    from_date = 2017-06-01\n    to_date = 2017-09-01\n    pt_rule = beyonce has:geo\n\n    [search_params]\n    results_per_call = 500\n    max_results = 500\n\n    [output_params]\n    save_file = True\n    filename_prefix = beyonce\n    results_per_file = 10000000\n\nOr this:\n\n.. code:: yaml\n\n    search_rules:\n        from-date: 2017-06-01\n        to-date: 2017-09-01 01:01\n        pt-rule: kanye\n\n    search_params:\n        results-per-call: 500\n        max-results: 500\n\n    output_params:\n        save_file: True\n        filename_prefix: kanye\n        results_per_file: 10000000\n\nWhen using a config file in conjunction with the command-line utility,\nyou need to specify your config file via the ``--config-file``\nparameter. Additional command-line arguments will either be *added* to\nthe config file args or **overwrite** the config file args if both are\nspecified and present.\n\nExample:\n\n::\n\n    python search_tweets.py \\\n      --config-file myapiconfig.config \\\n      --no-print-stream\n\n--------------\n\nFull options are listed below:\n\n::\n\n    $ search_tweets.py -h\n    usage: search_tweets.py [-h] [--credential-file CREDENTIAL_FILE]\n                            [--credential-file-key CREDENTIAL_YAML_KEY]\n                            [--env-overwrite ENV_OVERWRITE]\n                            [--config-file CONFIG_FILENAME]\n                            [--account-type {premium,enterprise}]\n                            [--count-bucket COUNT_BUCKET]\n                            [--start-datetime FROM_DATE] [--end-datetime TO_DATE]\n                            [--filter-rule PT_RULE]\n                            [--results-per-call RESULTS_PER_CALL]\n                            [--max-results MAX_RESULTS] [--max-pages MAX_PAGES]\n                            [--results-per-file RESULTS_PER_FILE]\n                            [--filename-prefix FILENAME_PREFIX]\n                            [--no-print-stream] [--print-stream] [--debug]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --credential-file CREDENTIAL_FILE\n                            Location of the yaml file used to hold your\n                            credentials.\n      --credential-file-key CREDENTIAL_YAML_KEY\n                            the key in the credential file used for this session's\n                            credentials. Defaults to search_tweets_api\n      --env-overwrite ENV_OVERWRITE\n                            Overwrite YAML-parsed credentials with any set\n                            environment variables. See API docs or readme for\n                            details.\n      --config-file CONFIG_FILENAME\n                            configuration file with all parameters. Far, easier to\n                            use than the command-line args version., If a valid\n                            file is found, all args will be populated, from there.\n                            Remaining command-line args, will overrule args found\n                            in the config, file.\n      --account-type {premium,enterprise}\n                            The account type you are using\n      --count-bucket COUNT_BUCKET\n                            Bucket size for counts API. Options:, day, hour,\n                            minute (default is 'day').\n      --start-datetime FROM_DATE\n                            Start of datetime window, format 'YYYY-mm-DDTHH:MM'\n                            (default: -30 days)\n      --end-datetime TO_DATE\n                            End of datetime window, format 'YYYY-mm-DDTHH:MM'\n                            (default: most recent date)\n      --filter-rule PT_RULE\n                            PowerTrack filter rule (See: http://support.gnip.com/c\n                            ustomer/portal/articles/901152-powertrack-operators)\n      --results-per-call RESULTS_PER_CALL\n                            Number of results to return per call (default 100; max\n                            500) - corresponds to 'maxResults' in the API\n      --max-results MAX_RESULTS\n                            Maximum results to return for this session (defaults\n                            to 500; see -a option\n      --max-pages MAX_PAGES\n                            Maximum number of pages/api calls to use for this\n                            session.\n      --results-per-file RESULTS_PER_FILE\n                            Maximum tweets to save per file.\n      --filename-prefix FILENAME_PREFIX\n                            prefix for the filename where tweet json data will be\n                            stored.\n      --no-print-stream     disable print streaming\n      --print-stream        Print tweet stream to stdout\n      --debug               print all info and warning messages\n\n--------------\n\nUsing the Twitter Search APIs' Python Wrapper\n============================================\n\nWorking with the API within a Python program is straightforward both for\nPremium and Enterprise clients.\n\nWe\u2019ll assume that credentials are in the default location,\n``~/.twitter_keys.yaml``.\n\n.. code:: python\n\n    from searchtweets import ResultStream, gen_rule_payload, load_credentials\n\nEnterprise setup\n----------------\n\n.. code:: python\n\n    enterprise_search_args = load_credentials(\"~/.twitter_keys.yaml\",\n                                              yaml_key=\"search_tweets_enterprise\",\n                                              env_overwrite=False)\n\nPremium Setup\n-------------\n\n.. code:: python\n\n    premium_search_args = load_credentials(\"~/.twitter_keys.yaml\",\n                                           yaml_key=\"search_tweets_premium\",\n                                           env_overwrite=False)\n\nThere is a function that formats search API rules into valid json\nqueries called ``gen_rule_payload``. It has sensible defaults, such as\npulling more Tweets per call than the default 100 (but note that a\nsandbox environment can only have a max of 100 here, so if you get\nerrors, please check this) not including dates, and defaulting to hourly\ncounts when using the counts api. Discussing the finer points of\ngenerating search rules is out of scope for these examples; I encourage\nyou to see the docs to learn the nuances within, but for now let\u2019s see\nwhat a rule looks like.\n\n.. code:: python\n\n    rule = gen_rule_payload(\"beyonce\", results_per_call=100) # testing with a sandbox account\n    print(rule)\n\n::\n\n    {\"query\":\"beyonce\",\"maxResults\":100}\n\nThis rule will match tweets that have the text ``beyonce`` in them.\n\n>From this point, there are two ways to interact with the API. There is a\nquick method to collect smaller amounts of Tweets to memory that\nrequires less thought and knowledge, and interaction with the\n``ResultStream`` object which will be introduced later.\n\nFast Way\n--------\n\nWe\u2019ll use the ``search_args`` variable to power the configuration point\nfor the API. The object also takes a valid PowerTrack rule and has\noptions to cutoff search when hitting limits on both number of Tweets\nand API calls.\n\nWe\u2019ll be using the ``collect_results`` function, which has three\nparameters.\n\n-  rule: a valid PowerTrack rule, referenced earlier\n-  max_results: as the API handles pagination, it will stop collecting\n   when we get to this number\n-  result_stream_args: configuration args that we\u2019ve already specified.\n\nFor the remaining examples, please change the args to either premium or\nenterprise depending on your usage.\n\nLet\u2019s see how it goes:\n\n.. code:: python\n\n    from searchtweets import collect_results\n\n.. code:: python\n\n    tweets = collect_results(rule,\n                             max_results=100,\n                             result_stream_args=enterprise_search_args) # change this if you need to\n\nBy default, Tweet payloads are lazily parsed into a ``Tweet``\n`object <https://twitterdev.github.io/tweet_parser/>`__. An overwhelming\nnumber of Tweet attributes are made available directly, as such:\n\n.. code:: python\n\n    [print(tweet.all_text, end='\\n\\n') for tweet in tweets[0:10]];\n\n::\n\n    Jay-Z &amp; Beyonc\u00e9 sat across from us at dinner tonight and, at one point, I made eye contact with Beyonc\u00e9. My limbs turned to jello and I can no longer form a coherent sentence. I have seen the eyes of the lord.\n\n    Beyonc\u00e9 and it isn't close. https://t.co/UdOU9oUtuW\n\n    As you could guess.. Signs by Beyonc\u00e9 will always be my shit.\n\n    When Beyonc\u00e9 adopts a dog \ud83d\ude4c\ud83c\udffe https://t.co/U571HyLG4F\n\n    Hold up, you can't just do that to Beyonc\u00e9\n    https://t.co/3p14DocGqA\n\n    Why y'all keep using Rihanna and Beyonc\u00e9 gifs to promote the show when y'all let Bey lose the same award she deserved 3 times and let Rihanna leave with nothing but the clothes on her back? https://t.co/w38QpH0wma\n\n    30) anybody tell you that you look like Beyonc\u00e9 https://t.co/Vo4Z7bfSCi\n\n    Mi Beyonc\u00e9 favorita https://t.co/f9Jp600l2B\n    Beyonc\u00e9 necesita ver esto. Que diosa @TiniStoessel \ud83d\udd25\ud83d\udd25\ud83d\udd25 https://t.co/gadVJbehQZ\n\n    Joanne Pearce Is now playing IF I WAS A BOY - BEYONCE.mp3 by !\n\n    I'm trynna see beyonc\u00e9's finsta before I die\n\n.. code:: python\n\n    [print(tweet.created_at_datetime) for tweet in tweets[0:10]];\n\n::\n\n    2018-01-17 00:08:50\n    2018-01-17 00:08:49\n    2018-01-17 00:08:44\n    2018-01-17 00:08:42\n    2018-01-17 00:08:42\n    2018-01-17 00:08:42\n    2018-01-17 00:08:40\n    2018-01-17 00:08:38\n    2018-01-17 00:08:37\n    2018-01-17 00:08:37\n\n.. code:: python\n\n    [print(tweet.generator.get(\"name\")) for tweet in tweets[0:10]];\n\n::\n\n    Twitter for iPhone\n    Twitter for iPhone\n    Twitter for iPhone\n    Twitter for iPhone\n    Twitter for iPhone\n    Twitter for iPhone\n    Twitter for Android\n    Twitter for iPhone\n    Airtime Pro\n    Twitter for iPhone\n\nVoila, we have some Tweets. For interactive environments and other cases\nwhere you don\u2019t care about collecting your data in a single load or\ndon\u2019t need to operate on the stream of Tweets or counts directly, I\nrecommend using this convenience function.\n\nWorking with the ResultStream\n-----------------------------\n\nThe ResultStream object will be powered by the ``search_args``, and\ntakes the rules and other configuration parameters, including a hard\nstop on number of pages to limit your API call usage.\n\n.. code:: python\n\n    rs = ResultStream(rule_payload=rule,\n                      max_results=500,\n                      max_pages=1,\n                      **premium_search_args)\n\n    print(rs)\n\n::\n\n    ResultStream: \n    \t{\n        \"username\":null,\n        \"endpoint\":\"https:\\/\\/api.twitter.com\\/1.1\\/tweets\\/search\\/30day\\/dev.json\",\n        \"rule_payload\":{\n            \"query\":\"beyonce\",\n            \"maxResults\":100\n        },\n        \"tweetify\":true,\n        \"max_results\":500\n    }\n\nThere is a function, ``.stream``, that seamlessly handles requests and\npagination for a given query. It returns a generator, and to grab our\n500 Tweets that mention ``beyonce`` we can do this:\n\n.. code:: python\n\n    tweets = list(rs.stream())\n\nTweets are lazily parsed using our `Tweet\nParser <https://twitterdev.github.io/tweet_parser/>`__, so tweet data is\nvery easily extractable.\n\n.. code:: python\n\n    # using unidecode to prevent emoji/accents printing \n    [print(tweet.all_text) for tweet in tweets[0:10]];\n\n::\n\n    gente socorro kkkkkkkkkk BEYONCE https://t.co/kJ9zubvKuf\n    Jay-Z &amp; Beyonc\u00e9 sat across from us at dinner tonight and, at one point, I made eye contact with Beyonc\u00e9. My limbs turned to jello and I can no longer form a coherent sentence. I have seen the eyes of the lord.\n    Beyonc\u00e9 and it isn't close. https://t.co/UdOU9oUtuW\n    As you could guess.. Signs by Beyonc\u00e9 will always be my shit.\n    When Beyonc\u00e9 adopts a dog \ud83d\ude4c\ud83c\udffe https://t.co/U571HyLG4F\n    Hold up, you can't just do that to Beyonc\u00e9\n    https://t.co/3p14DocGqA\n    Why y'all keep using Rihanna and Beyonc\u00e9 gifs to promote the show when y'all let Bey lose the same award she deserved 3 times and let Rihanna leave with nothing but the clothes on her back? https://t.co/w38QpH0wma\n    30) anybody tell you that you look like Beyonc\u00e9 https://t.co/Vo4Z7bfSCi\n    Mi Beyonc\u00e9 favorita https://t.co/f9Jp600l2B\n    Beyonc\u00e9 necesita ver esto. Que diosa @TiniStoessel \ud83d\udd25\ud83d\udd25\ud83d\udd25 https://t.co/gadVJbehQZ\n    Joanne Pearce Is now playing IF I WAS A BOY - BEYONCE.mp3 by !\n\nCounts Endpoint\n---------------\n\nWe can also use the Search API Counts endpoint to get counts of Tweets\nthat match our rule. Each request will return up to *30* results, and\neach count request can be done on a minutely, hourly, or daily basis.\nThe underlying ``ResultStream`` object will handle converting your\nendpoint to the count endpoint, and you have to specify the\n``count_bucket`` argument when making a rule to use it.\n\nThe process is very similar to grabbing Tweets, but has some minor\ndifferences.\n\n*Caveat - premium sandbox environments do NOT have access to the Search\nAPI counts endpoint.*\n\n.. code:: python\n\n    count_rule = gen_rule_payload(\"beyonce\", count_bucket=\"day\")\n\n    counts = collect_results(count_rule, result_stream_args=enterprise_search_args)\n\nOur results are pretty straightforward and can be rapidly used.\n\n.. code:: python\n\n    counts\n\n::\n\n    [{'count': 366, 'timePeriod': '201801170000'},\n     {'count': 44580, 'timePeriod': '201801160000'},\n     {'count': 61932, 'timePeriod': '201801150000'},\n     {'count': 59678, 'timePeriod': '201801140000'},\n     {'count': 44014, 'timePeriod': '201801130000'},\n     {'count': 46607, 'timePeriod': '201801120000'},\n     {'count': 41523, 'timePeriod': '201801110000'},\n     {'count': 47056, 'timePeriod': '201801100000'},\n     {'count': 65506, 'timePeriod': '201801090000'},\n     {'count': 95251, 'timePeriod': '201801080000'},\n     {'count': 162883, 'timePeriod': '201801070000'},\n     {'count': 106344, 'timePeriod': '201801060000'},\n     {'count': 93542, 'timePeriod': '201801050000'},\n     {'count': 110415, 'timePeriod': '201801040000'},\n     {'count': 127523, 'timePeriod': '201801030000'},\n     {'count': 131952, 'timePeriod': '201801020000'},\n     {'count': 176157, 'timePeriod': '201801010000'},\n     {'count': 57229, 'timePeriod': '201712310000'},\n     {'count': 72277, 'timePeriod': '201712300000'},\n     {'count': 72051, 'timePeriod': '201712290000'},\n     {'count': 76371, 'timePeriod': '201712280000'},\n     {'count': 61578, 'timePeriod': '201712270000'},\n     {'count': 55118, 'timePeriod': '201712260000'},\n     {'count': 59115, 'timePeriod': '201712250000'},\n     {'count': 106219, 'timePeriod': '201712240000'},\n     {'count': 114732, 'timePeriod': '201712230000'},\n     {'count': 73327, 'timePeriod': '201712220000'},\n     {'count': 89171, 'timePeriod': '201712210000'},\n     {'count': 192381, 'timePeriod': '201712200000'},\n     {'count': 85554, 'timePeriod': '201712190000'},\n     {'count': 57829, 'timePeriod': '201712180000'}]\n\nDated searches / Full Archive Search\n------------------------------------\n\nLet\u2019s make a new rule and pass it dates this time.\n\n``gen_rule_payload`` takes dates of the forms ``YYYY-mm-DD`` and\n``YYYYmmDD``.\n\n**Note that this will only work with the full archive search option**,\nwhich is available to my account only via the enterprise options. Full\narchive search will likely require a different endpoint or access\nmethod; please see your developer console for details.\n\n.. code:: python\n\n    rule = gen_rule_payload(\"from:jack\",\n                            from_date=\"2017-09-01\",\n                            to_date=\"2017-10-30\",\n                            results_per_call=500)\n    print(rule)\n\n::\n\n    {\"query\":\"from:jack\",\"maxResults\":500,\"toDate\":\"201710300000\",\"fromDate\":\"201709010000\"}\n\n.. code:: python\n\n    tweets = collect_results(rule, max_results=500, result_stream_args=enterprise_search_args)\n\n.. code:: python\n\n    [print(tweet.all_text) for tweet in tweets[0:10]];\n\n::\n\n    More clarity on our private information policy and enforcement. Working to build as much direct context into the product too https://t.co/IrwBexPrBA\n    To provide more clarity on our private information policy, we\u2019ve added specific examples of what is/is not a violation and insight into what we need to remove this type of content from the service. https://t.co/NGx5hh2tTQ\n    Launching violent groups and hateful images/symbols policy on November 22nd https://t.co/NaWuBPxyO5\n    We will now launch our policies on violent groups and hateful imagery and hate symbols on Nov 22. During the development process, we received valuable feedback that we\u2019re implementing before these are published and enforced. See more on our policy development process here \ud83d\udc47 https://t.co/wx3EeH39BI\n    @WillStick @lizkelley Happy birthday Liz!\n    Off-boarding advertising from all accounts owned by Russia Today (RT) and Sputnik.\n\n    We\u2019re donating all projected earnings ($1.9mm) to support external research into the use of Twitter in elections, including use of malicious automation and misinformation. https://t.co/zIxfqqXCZr\n    @TMFJMo @anthonynoto Thank you\n    @gasca @stratechery @Lefsetz letter\n    @gasca @stratechery Bridgewater\u2019s Daily Observations\n    Yup!!!! \u2764\ufe0f\u2764\ufe0f\u2764\ufe0f\u2764\ufe0f #davechappelle https://t.co/ybSGNrQpYF\n    @ndimichino Sometimes\n    Setting up at @CampFlogGnaw https://t.co/nVq8QjkKsf\n\n.. code:: python\n\n    rule = gen_rule_payload(\"from:jack\",\n                            from_date=\"2017-09-20\",\n                            to_date=\"2017-10-30\",\n                            count_bucket=\"day\",\n                            results_per_call=500)\n    print(rule)\n\n::\n\n    {\"query\":\"from:jack\",\"toDate\":\"201710300000\",\"fromDate\":\"201709200000\",\"bucket\":\"day\"}\n\n.. code:: python\n\n    counts = collect_results(rule, max_results=500, result_stream_args=enterprise_search_args)\n\n.. code:: python\n\n    [print(c) for c in counts];\n\n::\n\n    {'timePeriod': '201710290000', 'count': 0}\n    {'timePeriod': '201710280000', 'count': 0}\n    {'timePeriod': '201710270000', 'count': 3}\n    {'timePeriod': '201710260000', 'count': 6}\n    {'timePeriod': '201710250000', 'count': 4}\n    {'timePeriod': '201710240000', 'count': 4}\n    {'timePeriod': '201710230000', 'count': 0}\n    {'timePeriod': '201710220000', 'count': 0}\n    {'timePeriod': '201710210000', 'count': 3}\n    {'timePeriod': '201710200000', 'count': 2}\n    {'timePeriod': '201710190000', 'count': 1}\n    {'timePeriod': '201710180000', 'count': 6}\n    {'timePeriod': '201710170000', 'count': 2}\n    {'timePeriod': '201710160000', 'count': 2}\n    {'timePeriod': '201710150000', 'count': 1}\n    {'timePeriod': '201710140000', 'count': 64}\n    {'timePeriod': '201710130000', 'count': 3}\n    {'timePeriod': '201710120000', 'count': 4}\n    {'timePeriod': '201710110000', 'count': 8}\n    {'timePeriod': '201710100000', 'count': 4}\n    {'timePeriod': '201710090000', 'count': 1}\n    {'timePeriod': '201710080000', 'count': 0}\n    {'timePeriod': '201710070000', 'count': 0}\n    {'timePeriod': '201710060000', 'count': 1}\n    {'timePeriod': '201710050000', 'count': 3}\n    {'timePeriod': '201710040000', 'count': 5}\n    {'timePeriod': '201710030000', 'count': 8}\n    {'timePeriod': '201710020000', 'count': 5}\n    {'timePeriod': '201710010000', 'count': 0}\n    {'timePeriod': '201709300000', 'count': 0}\n    {'timePeriod': '201709290000', 'count': 0}\n    {'timePeriod': '201709280000', 'count': 9}\n    {'timePeriod': '201709270000', 'count': 41}\n    {'timePeriod': '201709260000', 'count': 13}\n    {'timePeriod': '201709250000', 'count': 6}\n    {'timePeriod': '201709240000', 'count': 7}\n    {'timePeriod': '201709230000', 'count': 3}\n    {'timePeriod': '201709220000', 'count': 0}\n    {'timePeriod': '201709210000', 'count': 1}\n    {'timePeriod': '201709200000', 'count': 7}\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/twitterdev/search-tweets-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "searchtweets",
    "platform": "",
    "project_url": "https://pypi.org/project/searchtweets/",
    "release_url": "https://pypi.org/project/searchtweets/1.2.1/",
    "requires_dist": [
      "tweet-parser",
      "requests",
      "pyyaml"
    ],
    "requires_python": "",
    "summary": "Wrapper for Twitter's Premium and Enterprise search APIs",
    "version": "1.2.1"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "606e8552934393a3d7e990b3f78371e5",
          "sha256": "9fe9c5c44846d216002db5912038d37ed314c17817c6be3d05f6e459afe9bdfe"
        },
        "downloads": -1,
        "filename": "searchtweets-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "606e8552934393a3d7e990b3f78371e5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25464,
        "upload_time": "2018-01-08T21:36:36",
        "url": "https://files.pythonhosted.org/packages/1a/54/06c559fbcbb35d01da2e877a0a61174f7003c18e8b138a88cf1e97cc026b/searchtweets-1.0.tar.gz"
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1b0954970746398ee22633eb872d6dcb",
          "sha256": "46297ad8f59dbd912ab7ae7cf93b73c23dfd0e807d0c3688ac55aea54d6ac9d5"
        },
        "downloads": -1,
        "filename": "searchtweets-1.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b0954970746398ee22633eb872d6dcb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 32018,
        "upload_time": "2018-01-19T22:48:16",
        "url": "https://files.pythonhosted.org/packages/8c/ce/47a2b68363a0b03577d76cea84df8ba0392d39cbaa5f6e3a92d1e0d8df03/searchtweets-1.2.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "5261c71f328949f472b84daa5631b98a",
          "sha256": "f64360efb9cf14053286b21a18f029a26f5145ceeaf6870fc7941c0456a7003a"
        },
        "downloads": -1,
        "filename": "searchtweets-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5261c71f328949f472b84daa5631b98a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29474,
        "upload_time": "2018-01-19T22:48:18",
        "url": "https://files.pythonhosted.org/packages/34/7f/0442d34a8929f2b37b598d70906c6df8fcabb426e1061d93a75ee6cc39ce/searchtweets-1.2.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1b0954970746398ee22633eb872d6dcb",
        "sha256": "46297ad8f59dbd912ab7ae7cf93b73c23dfd0e807d0c3688ac55aea54d6ac9d5"
      },
      "downloads": -1,
      "filename": "searchtweets-1.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1b0954970746398ee22633eb872d6dcb",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 32018,
      "upload_time": "2018-01-19T22:48:16",
      "url": "https://files.pythonhosted.org/packages/8c/ce/47a2b68363a0b03577d76cea84df8ba0392d39cbaa5f6e3a92d1e0d8df03/searchtweets-1.2.1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "5261c71f328949f472b84daa5631b98a",
        "sha256": "f64360efb9cf14053286b21a18f029a26f5145ceeaf6870fc7941c0456a7003a"
      },
      "downloads": -1,
      "filename": "searchtweets-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5261c71f328949f472b84daa5631b98a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 29474,
      "upload_time": "2018-01-19T22:48:18",
      "url": "https://files.pythonhosted.org/packages/34/7f/0442d34a8929f2b37b598d70906c6df8fcabb426e1061d93a75ee6cc39ce/searchtweets-1.2.1.tar.gz"
    }
  ]
}