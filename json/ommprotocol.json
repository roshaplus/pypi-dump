{
  "info": {
    "author": "Jaime Rodr\u00edguez-Guerra",
    "author_email": "jaime.rogue@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Chemistry"
    ],
    "description": "ommprotocol\n===========\n\nEasy to deploy MD protocols for OpenMM!\n\n*By Jaime Rodr\u00edguez-Guerra ([@jaimergp](https://github.com/jaimergp)). Contributors: Lur Alonso*\n\n### Some cool features\n\n- No coding required - just a YAML input file!\n- Smart support for different input file formats:\n    * __Topology__: PDB, Amber's PRMTOP, Charmm's PSF\n    * __Positions__: PDB, COOR, INPCRD\n    * __Velocities__: PDB, VEL\n    * __Box vectors__: PDB, XSC, CSV\n- Choose your preferred **trajectory** format (PDB, DCD, HDF5, NETCDF, MDCRD) and **checkpoints** (Amber restart, OpenMM XML states, restart).\n- Live report of simulation progress, with estimated ETA and speed.\n- Checkpoint every n steps. Also, emergency rescue files are created if an error occurs. \n- Autochunk the trajectories for easy handling.\n\nInstallation\n------------\n\n1. Download and install [Miniconda](http://conda.pydata.org/miniconda.html), a tiny Python distribution with a cool package manager and installer. Check [its webpage](http://conda.pydata.org/docs/) for more info.\n\n        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh\n        bash Miniconda3*.sh\n\n2. Restart terminal and add `omnia` and `insilichem` to the channels list.\n\n        conda config --add channels omnia\n        conda config --add channels insilichem\n\n3. Install `ommprotocol`:\n    \n        conda install ommprotocol\n\n    Optionally, you can use a separate environment called `openmm`, and then activate it when required.\n\n        conda create -n openmm ommprotocol\n        source activate openmm\n\n4. If everything is OK, this sould run correctly.\n\n        ommprotocol -h\n\n\nUsage\n-----\nQuick launch:\n\n    ommprotocol <inputfile.yaml>\n\nAll input configuration is done through YAML files. A couple of sample inputs are included in `examples` folder; parameters should be self-explaining.\n\nThere's two main parts in these files: \n\n* Top-level parameters: listed in next section, they are common for all stages\n* `stages`: Contains a list with all the stages to be simulated in the requested order. Each stage can override one or more global parameter(s), if needed.\n\n\nAvailable parameters\n--------------------\nThe following keys are available for the input file. They are listed in different categories, but you can mix them up as you want. If an optional key is not provided, it will be set to the default value.\n\n### Input options\n- `topology`: Main input file. Should contain, at least, the topology, but it can also contain positions, velocities, PBC vectors, forcefields... Supported file types: PDB, PRMTOP, PSF.\n- `positions`: File with the initial coordinates of the system. Overrides those in topology, if needed. Supported file types: PDB, INPCRD, COOR.\n- `velocities`: File containing the initial velocities of this stage. If not set, they will be set to the requested temperature. Supported file types: PDB, VEL.\n- `box_vectors`: File with replacement periodic box vectors, instead of those in the topology or positions file. Supported file types: XSC.\n- `forcefield`: Which forcefields should be used, if not provided in topology. Needed for PDB topologies.\n- `charmm_parameters`: Parameters for PSF files. Like: *something.par, something.str.*\n- `checkpoint`: Restart simulation from this file. It can provide one or more of the options above. Supported file types: xmlstate, rs.\n\n### Output options\n- `project_name`: Name for this simulation.\n- `outputpath`: Path to output folder. If relative, it'll be relative to input file. \n- `report`: True for live report of progress.\n- `report_every`: Update interval of live progress reports.\n- `trajectory`: Output format of trajectory file, if desired.\n- `trajectory_every`: Write trajectory every n steps.\n- `trajectory_new_every`: Create a new file for trajectory every n steps.\n- `restart`: Output format for restart formats, if desired\n- `restart_every`: Write restart format every n steps.\n- `save_state_at_end`: Whether to save the state of the simulation at the end of every stage.\n\n### General conditions of simulation\n- `minimization`: If *True*, minimize before MD.\n- `steps`: Number of MD steps to simulate. If 0, no MD will take place.\n- `timestep`: Integration timestep, in fs. Defaults to 1.0.\n- `temperature`: In Kelvin.\n- `barostat`: *True* for NPT, *False* for NVT.\n- `pressure`: In bar. Only used if barostat is *True*.\n- `barostat_interval`: Update interval of barostat, in steps.\n- `restrained_atoms`, `constrained_atoms`: Parts of the system that should remain restrained (a force is applied to minimize movement) or constrained (no movement at all) during the simulation. Available values: *all*, *protein*, *protein_no_H*, *backbone*, *calpha*. If *null*, no atoms will be fixed.\n- `restraint_strength`: If restraints are in use, the strength of the applied force in kJ/mol. Defaults to 5.0.\n- `integrator`: Which integrator should be used. Langevin by default.\n- `friction`: Friction coefficient for integrator, if needed. In 1/ps. Defaults to 1.0.\n- `minimization_tolerance` : Threshold value minimization should converge to.\n- `minimization_max_iterations` : Limit minimization iterations up to this value. If zero, don't limit.\n\n### OpenMM simulation parameters\n- `nonbondedMethod`: Choose between *NoCutoff*, *CutoffNonPeriodic*, *CutoffPeriodic*, *Ewald*, *PME*.\n- `nonbondedCutoff`: In nm. Defaults to 1.0.   \n- `constraints`: Choose between *null*, *HBonds*, *AllBonds*, *HAngles*.\n- `rigidWater`: *True* or *False*.\n- `removeCMMotion`: Whether to remove center of mass motion during simulation. Defaults to *True*.  \n- `hydrogenMass`: The mass to use for hydrogen atoms bound to heavy atoms. Any mass added to a hydrogen is subtracted from the heavy atom to keep their total mass the same.\n\n### Hardware options\n- `platform`: Which platform to use: *CPU*, *CUDA*, *OpenCL*. If not set, OpenMM will choose the fastest available.\n- `precision`: Precision model to use: *single*, *double* or *mixed*.\n\n### Stage-only parameters\n- `name`: A name for this stage. \n\n## Get help\n\nIf you have problems running `ommprotocol`, feel free to [create an issue](https://github.com/insilichem/ommprotocol/issues)! Also, make sure to visit our main webpage at [www.insilichem.com](www.insilichem.com).\n",
    "docs_url": null,
    "download_url": "https://github.com/insilichem/ommprotocol/tarball/v0.1.3",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/insilichem/ommprotocol",
    "keywords": "",
    "license": "LGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ommprotocol",
    "platform": "any",
    "project_url": "https://pypi.org/project/ommprotocol/",
    "release_url": "https://pypi.org/project/ommprotocol/0.1.3/",
    "requires_python": "",
    "summary": "Easy to deploy MD protocols for OpenMM",
    "version": "0.1.3"
  },
  "releases": {
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5dc4458bb433a6f9afa80a3ddee00e62",
          "sha256": "9e4bea2e3b3592ecf0d8fb10d92df628e1a3bf3716748bcd2d2319b70f12c6b5"
        },
        "downloads": 157,
        "filename": "ommprotocol-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5dc4458bb433a6f9afa80a3ddee00e62",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17326,
        "upload_time": "2016-03-10T16:14:48",
        "url": "https://files.pythonhosted.org/packages/22/2a/4e92267e85b5d92bc7ac71a3a9b7f5de5f058c29a5911aeb253048532f6e/ommprotocol-0.0.4.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f9da3461fe3133010370263d022c1637",
          "sha256": "ac87032ecea0bb9fc64e49fa614c896ab255774bd914453c2c4ebce257cb6919"
        },
        "downloads": 426,
        "filename": "ommprotocol-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f9da3461fe3133010370263d022c1637",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22494,
        "upload_time": "2016-07-12T16:20:46",
        "url": "https://files.pythonhosted.org/packages/46/73/60ccc8503cb47d9e2d3a1ba7284530f2cf6f968f54c9d88f7c9c121ad6df/ommprotocol-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f3f0abf31e2ee2447baa5a8163ac03d3",
          "sha256": "55d2238bc0a4538b195893606984b6e26c9a5db41a083e0e465c3dfc00362aa7"
        },
        "downloads": 137,
        "filename": "ommprotocol-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f3f0abf31e2ee2447baa5a8163ac03d3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22563,
        "upload_time": "2016-07-12T16:41:32",
        "url": "https://files.pythonhosted.org/packages/b7/f9/b3ab3a08b0d4c451c91fd338412428b85a095c577181683865d6bfff7121/ommprotocol-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b4cd2ea892379fd55a76c59a27ab1f2b",
          "sha256": "0f2bf156328585b7d4102090da85b0b357ebc7fe0cef9deea15d836f06bd61a4"
        },
        "downloads": 59,
        "filename": "ommprotocol-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b4cd2ea892379fd55a76c59a27ab1f2b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39065,
        "upload_time": "2016-11-08T16:24:44",
        "url": "https://files.pythonhosted.org/packages/1f/a1/748cfc2c761e5ae2c98dcafc4d80425bd000bc64eb41401a220381c4462c/ommprotocol-0.1.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b4cd2ea892379fd55a76c59a27ab1f2b",
        "sha256": "0f2bf156328585b7d4102090da85b0b357ebc7fe0cef9deea15d836f06bd61a4"
      },
      "downloads": 59,
      "filename": "ommprotocol-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b4cd2ea892379fd55a76c59a27ab1f2b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 39065,
      "upload_time": "2016-11-08T16:24:44",
      "url": "https://files.pythonhosted.org/packages/1f/a1/748cfc2c761e5ae2c98dcafc4d80425bd000bc64eb41401a220381c4462c/ommprotocol-0.1.3.tar.gz"
    }
  ]
}