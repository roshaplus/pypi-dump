{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Email Trail\n===========\n\nA smart Web API framework, designed for Python 3.\n\n|Build Status| |codecov| |Package version| |Python versions|\n\n**Community:** https://discuss.apistar.org/ \ud83e\udd14 \ud83d\udcad \ud83e\udd13 \ud83d\udcac \ud83d\ude0e\n\n.. figure:: docs/img/apistar.gif\n   :alt: screenshot\n\n   screenshot\n\n--------------\n\nFeatures\n========\n\nWhy should you consider using API Star for your next Web API project?\n\n-  **API documentation** - Interactive API documentation, that's\n   guaranteed to always be in sync with your codebase.\n-  **Client libraries** - JavaScript and Python client libraries, driven\n   by the typesystems that API Star generates.\n-  **Schema generation** - Support for generating Swagger or RAML API\n   typesystems.\n-  **Expressive** - Type annotated views, that make for expressive,\n   testable code.\n-  **Performance** - Dynamic behaviour for determining how to run each\n   view makes API Star incredibly efficient.\n-  **Throughput** - Support for asyncio to allow for building\n   high-throughput non-blocking applications.\n\n--------------\n\nTable of Contents\n=================\n\n-  `Quickstart <#quickstart>`__\n\n   -  `Choosing a framework <#choosing-a-framework>`__\n\n-  `HTTP <#http>`__\n\n   -  `Requests <#requests>`__\n   -  `Responses <#responses>`__\n   -  `URL Routing <#url-routing>`__\n   -  `Command Routing <#command-routing>`__\n\n-  `Type System <#type-system>`__\n\n   -  `Data Validation <#data-validation>`__\n   -  `Serialization <#serialization>`__\n   -  `Generating API Schemas <#generating-api-schemas>`__\n\n-  `Building Websites <#building-websites>`__\n\n   -  `Templates <#templates>`__\n   -  `Static Files <#static-files>`__\n   -  `HTTP Sessions <#http-sessions>`__\n\n-  `Renderers & Parsers <#renderers--parsers>`__\n\n   -  `Renderers <#renderers>`__\n   -  `Parsers <#parsers>`__\n\n-  `Authentication & Permissions <#authentication--permissions>`__\n\n   -  `Authentication <#authentication>`__\n   -  `Permissions <#permissions>`__\n\n-  `Settings & Environment <#settings--environment>`__\n\n   -  `Application settings <#application-settings>`__\n   -  `Environment <#environment>`__\n\n-  `Testing <#testing>`__\n-  `Backends <#backends>`__\n-  `SQLAlchemy <#sqlalchemy>`__\n-  `Django ORM <#django-orm>`__\n-  `Components <#components>`__\n-  `Performance <#performance>`__\n-  `Deployment <#deployment>`__\n\n   -  `The Development Server <#the-development-server>`__\n   -  `Running in Production <#running-in-production>`__\n   -  `\"Serverless\" Deployments <#serverless-deployments>`__\n\n-  `Changelog <#changelog>`__\n\n   -  `0.3 Release <#03-release>`__\n   -  `0.2 Release <#02-release>`__\n\n-  `Development <#development>`__\n\n--------------\n\nQuickstart\n==========\n\nInstall API Star:\n\n.. code:: bash\n\n    $ pip3 install apistar\n\nCreate a new project:\n\n.. code:: bash\n\n    $ apistar new .\n    app.py\n    tests.py\n    $ cat app.py\n\n.. code:: python\n\n    from apistar import Include, Route\n    from apistar.frameworks.wsgi import WSGIApp as App\n    from apistar.handlers import docs_urls, static_urls\n\n\n    def welcome(name=None):\n        if name is None:\n            return {'message': 'Welcome to API Star!'}\n        return {'message': 'Welcome to API Star, %s!' % name}\n\n\n    routes = [\n        Route('/', 'GET', welcome),\n        Include('/docs', docs_urls),\n        Include('/static', static_urls)\n    ]\n\n    app = App(routes=routes)\n\n\n    if __name__ == '__main__':\n        app.main()\n\nRun the application:\n\n.. code:: bash\n\n    $ apistar run\n    Running at http://localhost:8080/\n\nRun the tests:\n\n.. code:: bash\n\n    $ apistar test\n    tests.py ..\n    ===== 2 passed in 0.05 seconds =====\n\nView the interactive API documentation:\n\n.. code:: bash\n\n    $ open http://localhost:8080/docs/\n\n.. figure:: docs/img/apistar.png\n   :alt: screenshot\n\n   screenshot\n\nChoosing a framework\n--------------------\n\nAPI Star allows you to either use a standard threaded WSGI application,\nor an asyncio application.\n\nWSGI\n~~~~\n\nThe benefit of choosing a standard WSGI application is that you'll get\nbetter ecosystem support. The SQLAlchemy and Django ORM backends are\navailable, and you can use a large range of existing Python libraries.\n\nTo start a new ``wsgi`` project use:\n\n.. code:: bash\n\n    $ pip install apistar\n    $ apistar new .\n\nThe application import line in the code will look like this:\n\n.. code:: python\n\n    from apistar.frameworks.wsgi import WSGIApp as App\n\nASyncIO\n~~~~~~~\n\nThe benefit of an asyncio application is the potential for higher\nthroughput, as you can avoid making thread-blocking calls in favour of\nco-operative concurrency using async/await. However you'll need to make\nsure that you only use async components for any blocking operations,\nsuch as calls to the database, reading from disk, or making a network\nrequest.\n\nTo start a new ``asyncio`` project use:\n\n.. code:: bash\n\n    $ pip install apistar[asyncio]\n    $ apistar new . --framework asyncio\n\nThe application import line in the code will look like this:\n\n.. code:: python\n\n    from apistar.frameworks.asyncio import ASyncIOApp as App\n\nYou may now include either regular or async handler functions...\n\n.. code:: python\n\n    def welcome(name=None):\n        # A regular handler function that contains no asynchronous operations.\n        ...\n\n    async def welcome(name=None):\n        # An async handler, that may use `async/await` syntax for performing asynchronous operations.\n        ...\n\n--------------\n\nHTTP\n====\n\nRequests\n--------\n\nAPI Star allows you to dynamically inject various information about the\nincoming request into your views using type annotation.\n\n.. code:: python\n\n    from apistar import http\n\n    def show_request(request: http.Request):\n        return {\n            'method': request.method,\n            'url': request.url,\n            'headers': dict(request.headers)\n        }\n\n    def show_query_params(query_params: http.QueryParams):\n        return {\n            'params': dict(query_params)\n        }\n\n    def show_user_agent(user_agent: http.Header):\n        return {\n            'user-agent': user_agent\n        }\n\nSome of the components you might use most often:\n\n+---------------------+--------------+\n| Component           | Description  |\n+=====================+==============+\n| ``http.Request``    | The HTTP     |\n|                     | request.     |\n|                     | Includes     |\n|                     | ``.method``, |\n|                     | ``.url``,    |\n|                     | and          |\n|                     | ``.headers`` |\n|                     | attributes.  |\n+---------------------+--------------+\n| ``http.Headers``    | The request  |\n|                     | headers,     |\n|                     | returned as  |\n|                     | a            |\n|                     | dictionary-l |\n|                     | ike          |\n|                     | object.      |\n+---------------------+--------------+\n| ``http.Header``     | Lookup a     |\n|                     | single       |\n|                     | request      |\n|                     | header,      |\n|                     | correspondin |\n|                     | g            |\n|                     | to the       |\n|                     | argument     |\n|                     | name.Returns |\n|                     | a string or  |\n|                     | ``None``.    |\n+---------------------+--------------+\n| ``http.QueryParams` | The request  |\n| `                   | query        |\n|                     | parameters,  |\n|                     | returned as  |\n|                     | a            |\n|                     | dictionary-l |\n|                     | ike          |\n|                     | object.      |\n+---------------------+--------------+\n| ``http.QueryParam`` | Lookup a     |\n|                     | single query |\n|                     | parameter,   |\n|                     | correspondin |\n|                     | g            |\n|                     | to the       |\n|                     | argument     |\n|                     | name.Returns |\n|                     | a string or  |\n|                     | ``None``.    |\n+---------------------+--------------+\n| ``http.Body``       | The request  |\n|                     | body.        |\n|                     | Returns a    |\n|                     | bytestring.  |\n+---------------------+--------------+\n| ``http.RequestData` | The parsed   |\n| `                   | request      |\n|                     | data. Data   |\n|                     | type will    |\n|                     | depend on    |\n|                     | the          |\n|                     | Content-Type |\n|                     | of the       |\n|                     | request.     |\n+---------------------+--------------+\n\nResponses\n---------\n\nBy default API star expects view to return plain data, and will return\n``200 OK`` responses.\n\n.. code:: python\n\n    def create_project():\n        return {'name': 'new project', 'id': 123}\n\nYou can instead set the status code or headers by returning a\n``Response``.\n\n.. code:: python\n\n    def create_project():\n        data = {'name': 'new project', 'id': 123}\n        headers = {'Location': 'http://example.com/project/123/'}\n        return Response(data, status=201, headers=headers)\n\nURL Routing\n-----------\n\nUse ``{curly_braces}`` in your URL conf to include a URL path parameter.\n\n.. code:: python\n\n    def echo_username(username):\n        return {'message': f'Welcome, {username}!'}\n\n    app = App(routes=[\n        Route('/{username}/', 'GET', echo_username)\n    ])\n\nUse ``Include`` to include a list of routes.\n\n.. code:: python\n\n    user_routes = [\n        Route('/', 'GET', list_users),\n        Route('/', 'POST', create_user),\n        Route('/{user_id}', 'PUT', edit_user),\n        Route('/{user_id}', 'DELETE', delete_user)\n    ]\n\n    routes = [\n        Include('/users', user_routes),\n        ...\n    ]\n\n    app = App(routes=routes)\n\nUse type annotation on the view method to include typed URL path\nparameters.\n\n.. code:: python\n\n    users = {0: 'penny', 1: 'benny', 2: 'jenny'}\n\n    def echo_username(user_id: int):\n        username = users[user_id]\n        return {'message': f'Welcome, {username}!'}\n\n    app = App(routes=[\n        Route('/{user_id}/', 'GET', echo_username)\n    ])\n\nParameters which do not correspond to a URL path parameter will be\ntreated as query parameters for scalar types such as ``int`` or ``str``,\nor part of the request body for composite types of ``dict`` and\n``list``.\n\n.. code:: python\n\n    def echo_username(username):\n        if username is None:\n            return {'message': 'Welcome!'}\n        return {'message': f'Welcome, {username}!'}\n\n    app = App(routes=[\n        Route('/hello/', 'GET', echo_username)\n    ])\n\nReversing URLS\n~~~~~~~~~~~~~~\n\nRather than build URLs by hand, it is possible to generate URLs based on\nthe endpoint, using ``reverse_url()``.\n\n.. code:: python\n\n    from apistar import reverse_url\n\n    def get_player_details(player_name):\n        score = get_score(player_name)\n        return {'name': player_name, 'score': score}\n\n    def get_all_players():\n        players = get_players()\n        player_list = [\n            {\n                'name': player.name,\n                'url': reverse_url('get_player_details', player_name=player.name)\n            }\n            for player in players\n        ]\n        return {'players': player_list}\n\n    app = App(routes=[\n        Route('/players/', 'GET', get_all_players),\n        Route('/players/{player_name}/', 'GET', get_player_details),\n    ])\n\nCommand Routing\n---------------\n\nIn addition to routing URLs, you can also route commands, to make\nadditional functionality available directly to the command line client.\n\nFor example...\n\n.. code:: python\n\n    from apistar import Command\n    from apistar.frameworks.wsgi import WSGIApp as App\n\n    ...\n\n    routes = [\n        ...\n    ]\n\n    commands = [\n        Command('create_user', create_user),\n        Command('delete_user', delete_user)\n    ]\n\n    app = App(routes=routes, commands=commands)\n\n--------------\n\nType System\n===========\n\nAPI Star comes with a type system that allows you to express constraints\non the expected inputs and outputs of your interface.\n\nHere\u2019s a quick example of what the type system in API Star looks like:\n\n.. code:: python\n\n    from apistar import typesystem\n\n    class Rating(typesystem.Integer):\n        minimum = 1\n        maximum = 5\n\n\n    class ProductSize(typesystem.Enum):\n        enum = ['small', 'medium', 'large']\n\n\n    class Product(typesystem.Object):\n        properties = {\n            'name': typesystem.string(max_length=100),  # Use lowercase functions for inline declarations.\n            'rating': Rating,\n            'in_stock': typesystem.Boolean,\n            'size': ProductSize,\n        }\n\nData Validation\n---------------\n\nThe main benefit of expressing our data constraints in a type system is\nthat we can then use those types as annotations on our handler\nfunctions.\n\n.. code:: python\n\n    def create_product(product: Product):\n        ...\n\n    routes = [\n        Route('/create_product/', 'POST', create_product)\n    ]\n\nSerialization\n-------------\n\nIn addition to using the typesystem types for input validation, you can\nalso use them to serialize the return values of your handler functions.\n\n.. code:: python\n\n    import typing\n\n\n    def list_products() -> typing.List[Product]:\n        queryset = ...  # Query returning products from a data store.\n        return [Product(record) for record in queryset]\n\nAPI Reference\n-------------\n\nThe following typesystem types are currently supported:\n\nString\n~~~~~~\n\nValidates string data. A subclass of ``str``.\n\n-  ``default`` - A default to be used if a field using this typesystem\n   is missing from a parent ``Object``.\n-  ``max_length`` - A maximum valid length for the data.\n-  ``min_length`` - A minimum valid length for the data.\n-  ``pattern`` - A string or compiled regex that the data must match.\n-  ``format`` - An identifier indicating a complex datatype with a\n   string representation. For example ``\"date\"``, to represent an ISO\n   8601 formatted date string.\n-  ``trim_whitespace`` - ``True`` if leading and trailing whitespace\n   should be stripped from the data. Defaults to ``True``.\n-  ``description`` - A description for online documentation\n\nNumber\n~~~~~~\n\nValidates numeric data. A subclass of ``float``.\n\n-  ``default`` - A default to be used if a field using this typesystem\n   is missing from a parent ``Object``.\n-  ``maximum`` - A float representing the maximum valid value for the\n   data.\n-  ``minimum`` - A float representing the minimum valid value for the\n   data.\n-  ``exclusive_maximum`` - ``True`` for an exclusive maximum limit.\n   Defaults to ``False``.\n-  ``exclusive_minimum`` - ``True`` for an exclusive minimum limit.\n   Defaults to ``False``.\n-  ``multiple_of`` - A float that the data must be strictly divisible\n   by, in order to be valid.\n-  ``description`` - A description for online documentation\n\nInteger\n~~~~~~~\n\nValidates integer data. A subclass of ``int``.\n\n-  ``default`` - A default to be used if a field using this typesystem\n   is missing from a parent ``Object``.\n-  ``maximum`` - An int representing the maximum valid value for the\n   data.\n-  ``minimum`` - An int representing the minimum valid value for the\n   data.\n-  ``exclusive_maximum`` - ``True`` for an exclusive maximum limit.\n   Defaults to ``False``.\n-  ``exclusive_minimum`` - ``True`` for an exclusive minimum limit.\n   Defaults to ``False``.\n-  ``multiple_of`` - An integer that the data must be strictly divisible\n   by, in order to be valid.\n-  ``description`` - A description for online documentation\n\nBoolean\n~~~~~~~\n\nValidates boolean input. Returns either ``True`` or ``False``.\n\n-  ``default`` - A default to be used if a field using this typesystem\n   is missing from a parent ``Object``.\n-  ``description`` - A description for online documentation\n\nEnum\n~~~~\n\nValidates string input, against a list of valid choices. A subclass of\n``str``.\n\n-  ``default`` - A default to be used if a field using this typesystem\n   is missing from a parent ``Object``.\n-  ``enum`` - A list of valid string values for the data.\n-  ``description`` - A description for online documentation\n\nObject\n~~~~~~\n\nValidates dictionary or object input. A subclass of ``dict``.\n\n-  ``default`` - A default to be used if a field using this typesystem\n   is missing from a parent ``Object``.\n-  ``properties`` - A dictionary mapping string key names to typesystem\n   or type values.\n-  ``description`` - A description for online documentation\n\nNote that child properties are considered to be required if they do not\nhave a ``default`` value.\n\nArray\n~~~~~\n\nValidates list or tuple input. A subclass of ``list``.\n\n-  ``items`` - A typesystem or type or a list of typesystems or types.\n-  ``additional_items`` - Whether additional items past the end of the\n   listed typesystem types are permitted.\n-  ``min_items`` - The minimum number of items the array must contain.\n-  ``max_items`` - The maximum number of items the array must contain.\n-  ``unique_items`` - Whether repeated items are permitted in the array.\n-  ``description`` - A description for online documentation\n\nGenerating API Schemas\n----------------------\n\nAPI Star is designed to be able to map well onto API description\nformats, known as \"API Schemas\".\n\nThere is currently *provisional* support for writing Swagger, RAML, or\nCoreJSON typesystems. See\n`#69 <https://github.com/tomchristie/apistar/issues/69>`__ for more\ndetails on work still to be done here.\n\nThe default output format is the built-in CoreJSON support:\n\n.. code:: bash\n\n    $ apistar schema\n    {\"_type\":\"document\", ...}\n\nThe OpenAPI (Swagger) and RAML codecs are optional, and require\ninstallation of additional packages:\n\nSwagger\n^^^^^^^\n\n.. code:: bash\n\n    $ pip install openapi-codec\n    $ apistar schema --format openapi\n    {\"swagger\": \"2.0\", \"info\": ...}\n\nRAML\n^^^^\n\n.. code:: bash\n\n    $ pip install raml-codec\n    $ apistar schema --format raml\n    #%RAML 0.8\n    ...\n\n--------------\n\nBuilding Websites\n=================\n\nAlthough API Star is designed primarily with Web APIs in mind, it is a\ngeneral purpose framework, and does also give you the tools you need to\nbuild regular websites.\n\nTemplates\n---------\n\nAPI Star includes a templating component, that allows you to return\ntemplated responses, using `Jinja2 <http://jinja.pocoo.org/>`__.\n\n**templates/index.html:**\n\n.. code:: html\n\n    <html>\n        <body>\n            <h1>Hello, {{ username }}</h1>\n        </body>\n    </html>\n\n**app.py:**\n\n.. code:: python\n\n    from apistar import Route, annotate, render_template\n    from apistar.frameworks.wsgi import WSGIApp as App\n    from apistar.renderers import HTMLRenderer\n\n    @annotate(renderers=[HTMLRenderer()])\n    def hello(username: str):\n        return render_template('index.html', username=username)\n\n    routes = [\n        Route('/', 'GET', hello)\n    ]\n\n    settings = {\n        'TEMPLATES': {\n            'ROOT_DIR': 'templates',     # Include the 'templates/' directory.\n            'PACKAGE_DIRS': ['apistar']  # Include the built-in apistar templates.\n        }\n    }\n\n    app = App(routes=routes, settings=settings)\n\nReturning a string response from a view will default to using the\n``text/json`` content type. This means you will need to override this so\nthat your HTML views use the ``text/html`` content type in their\nresponses. There are a couple of ways you can do this, including:\n\n1. by annotating your handler function so that it uses the\n   ``HTMLRenderer`` (as shown above)\n2. by returning a ``Response``, including an explicit ``Content-Type``\n   header (see `Renderers <#renderers>`__ section for an example)\n\nStatic Files\n------------\n\nFor serving static files, API Star uses\n`whitenoise <http://whitenoise.evans.io/en/stable/>`__.\n\nFirst make sure to install the ``whitenoise`` package.\n\n.. code:: bash\n\n    $ pip install whitenoise\n\nNext, you'll then need to include the ``serve_static`` handler in your\nroutes. This function expects to take a single URL argument, named\n``path``.\n\n.. code:: python\n\n    from apistar import Route\n    from apistar.handlers import serve_static\n\n    routes = [\n        # ...\n        Route('/static/{path}', 'GET', serve_static)\n    ]\n\nFinally, include the directory that you'd like to serve static files\nfrom in your settings, like so:\n\n.. code:: python\n\n    settings = {\n        'STATICS': {\n            'ROOT_DIR': 'statics',       # Include the 'statics/' directory.\n            'PACKAGE_DIRS': ['apistar']  # Include the built-in apistar static files.\n        }\n    }\n\n    app = App(routes=routes, settings=settings)\n\nHTTP Sessions\n-------------\n\nAPI Star supports persistent HTTP sessions. You can access the session\nas a dictionary-like object. The session is made available by including\nthe ``http.Session`` class as an annotation on a handler. For example:\n\n.. code:: python\n\n    from apistar import Response, http\n\n    def login(username: str, password: str, session: http.Session):\n        if authenticate(username, password):\n            session['username'] = username\n            return Response(status=302, headers={'location': '/'})\n        else:\n            ...\n\n    def logout(session: http.Session):\n        if 'username' in session:\n            del session['username']\n        return Response(status=302, headers={'location': '/'})\n\n    def homepage(session: http.Session):\n        username = session.get('username')\n        ...\n\nThe default implementation stores the session information in local\nmemory, which isn't suitable for anything other than development and\ntesting. For production you'll need to implement a session store that\nintegrates with some kind of persistent storage.\n\n.. code:: python\n\n    from apistar import Component\n    from apistar.interfaces import SessionStore\n    from myproject import RedisSessionStore  # A SessionStore implementation.\n\n    routes = [\n        ...\n    ]\n\n    components = [\n        Component(SessionStore, init=RedisSessionStore)\n    ]\n\n    app = App(routes=routes, components=components)\n\n--------------\n\nRenderers & Parsers\n===================\n\nRenderers and parsers are responsible for handling the translation of\nincoming or outgoing bytestreams.\n\nFor example, when returning a response we'll often simply return a\nnative Python datastructure such as a ``dict`` or ``list``. A renderer\nclass is then responsible for generating the bytes that should be used\nfor the response body.\n\nRenderers\n---------\n\nAPI Star defaults to returning JSON responses. You can alter this\nbehaviour by configuring the renderers that should be supported.\n\nConfiguring the installed renderers\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe can install one or more renderers by adding them to our settings. The\n``RENDERERS`` setting should be a list. For example if most of our\nhandlers return HTML responses, we might use the following:\n\n.. code:: python\n\n    settings = {\n        'RENDERERS': [HTMLRenderer()]\n    }\n\nAlternatively we can specify the renderers to use on a specific handler\nfunction.\n\n.. code:: python\n\n    from apistar import annotate\n    from apistar.renderers import JSONRenderer\n    from myproject.renderers import CSVRenderer\n\n    @annotate(renderers=[JSONRenderer(), CSVRenderer()])\n    def download_current_dataset():\n        # Return some data, formatted either as JSON or CSV,\n        # depending on the request Accept header.\n        ...\n\nHow a renderer is determined\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAPI Star uses HTTP content negotiation to determine which renderer\nshould be returned. The ``Accept`` header is inspected, and one of the\navailable installed renderers is selected. If the Accept header doesn't\nmatch any of the installed renderers then a ``406 Not Acceptable``\nresponse will be returned.\n\nYou can disable the content negotiation by including an explicit\n``content_type`` argument when returning a ``Response``. For example...\n\n::\n\n    content = template.render(...)\n    return http.Response(content, content_type='text/html')\n\nParsers\n-------\n\nParsers are responsible for taking the incoming request body, and\nreturning the data structure it represents, given the ``Content-Type``\nof the request.\n\nBy default API Star supports parsing JSON or form encoded requests.\n\nConfiguring the installed parsers\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe can install one or more parsers by adding them to our settings. The\n``PARSERS`` setting should be a list. For example if we want to disable\nform parsing, and only support JSON requests, we can do the following:\n\n.. code:: python\n\n    settings = {\n        'PARSERS': [JSONParser()]\n    }\n\nAlternatively we can specify the parsers to use on a specific handler\nfunction.\n\n.. code:: python\n\n    from apistar import annotate\n    from apistar.parsers import MultiPartParser\n\n    @annotate(parsers=[MultiPartParser()])\n    def file_upload():\n        # Handles a file upload, using a multipart encoded request.\n        ...\n\n--------------\n\nAuthentication & Permissions\n============================\n\nAuthentication is the mechanism of associating an incoming request with\na set of identifying credentials, such as the user the request came\nfrom, or the token that it was signed with. Permissions are the\nprocesses of using those credentials to determine if the request should\nbe permitted.\n\nAuthentication\n--------------\n\nThe ``Auth`` component provides information about the currently\nauthenticated user.\n\n.. code:: python\n\n    from apistar.interfaces import Auth\n\n    def display_user(auth: Auth):\n        return {\n            'is_authenticated': auth.is_authenticated(),\n            'user': auth.get_display_name()\n        }\n\nIt provides the following interface:\n\n-  ``.get_display_name()`` - Returns a string that should be used when\n   displaying a username, or ``None`` for unauthenticated requests.\n-  ``.get_user_id()`` - Returns a string that can be used to uniquely\n   identify the user, or ``None`` for unauthenticated requests.\n-  ``.is_authenticated()`` - Returns ``True`` for an authenticated\n   request, ``False`` otherwise.\n-  ``.user`` - A reference to any persistent user information.\n-  ``.token`` - A reference to any other authentication information\n   associated with the incoming request.\n\nIn our example above we haven't yet configured any authentication\npolicy, so our ``auth`` argument will always be set to an instance of\n``Unauthenticated``.\n\nRequests to our endpoint will currently return a response like this:\n\n.. code:: json\n\n    {\n        \"is_authenticated\": false,\n        \"user\": null\n    }\n\nCreating an authentication class\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn order to authenticate our incoming requests we need to create an\nauthentication class.\n\nAn authentication class must implement the ``authenticate`` method, and\nshould return a subclass of ``Auth``, or ``None`` if the request was not\nauthenticated.\n\nThe ``authenticate`` method can accept any installed components in its\nsignature.\n\n.. code:: python\n\n    import base64\n    from apistar import http\n    from apistar.authentication import Authenticated\n\n    class BasicAuthentication():\n        def authenticate(self, authorization: http.Header):\n            \"\"\"\n            Determine the user associated with a request, using HTTP Basic Authentication.\n            \"\"\"\n            if authorization is None:\n                return None\n\n            scheme, token = authorization.split()\n            if scheme.lower() != 'basic':\n                return None\n\n            username, password = base64.b64decode(token).decode('utf-8').split(':')\n            return Authenticated(username)\n\nNote that the ``Authenticated`` class provides a shortcut which you can\nuse instead of implementing a subclass of ``Auth``.\n\nConfiguring the authentication policy\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe can install one or more authentication policies by adding them to our\nsettings. The ``AUTHENTICATION`` setting should be a list. Each\nauthentication policy will be attempted in turn.\n\n.. code:: python\n\n    settings = {\n        'AUTHENTICATION': [BasicAuthentication()]\n    }\n\nAlternatively we can specify authentication policies on a specific\nhandler function.\n\n.. code:: python\n\n    from apistar import annotate\n    from apistar.interfaces import Auth\n    from myproject.authentication import BasicAuthentication\n\n    @annotate(authentication=[BasicAuthentication()])\n    def display_user(auth: Auth):\n        # There are no required permissions set on this handler, so all requests\n        # will be allowed.\n        # Requests that have successfully authenticated using basic authentication\n        # will include user credentials in `auth`.\n        ...\n\nPermissions\n-----------\n\nTypically you'll want to either permit or deny an incoming request,\nbased on the authentication credentials provided.\n\nAPI Star provides a single built-in ``IsAuthenticated`` permission\nclass, or you can implement your own for more complex cases.\n\nCreating a permissions class\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA permissions class should implement a ``has_permission()`` method, and\nreturn either ``True`` or ``False`` depending on if the request should\nbe permitted or not.\n\nFor example, if our user model includes an ``is_admin`` field, we might\nwant to allow certain operations only for those users.\n\n.. code:: python\n\n    class IsAdminUser():\n        def has_permission(self, auth: Auth):\n            if not auth.is_authenticated():\n                return False\n            return auth.user.is_admin\n\nConfiguring the permissions policy\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConfiguring permissions is very similar to configuring authentication,\nyou can do so globally, using the settings...\n\n.. code:: python\n\n    settings = {\n        'AUTHENTICATION': [BasicAuthentication()],\n        'PERMISSIONS': [IsAuthenticted()]\n    }\n\nOr configure permissions on a specific handler...\n\n.. code:: python\n\n    @annotate(\n        authentication=[BasicAuthentication()],\n        permissions=[IsAuthenticated()]\n    )\n    def display_user(auth: Auth):\n        # Only authenticated requests will be allowed to access this handler.\n        ...\n\n--------------\n\nSettings & Environment\n======================\n\nApplication settings\n--------------------\n\nApplication settings are configured at the point of instantiating the\napp.\n\n.. code:: python\n\n    routes = [\n        # ...\n    ]\n\n    settings = {\n        'TEMPLATES': {\n            'ROOT_DIR': 'templates',\n            'PACKAGE_DIRS': ['apistar']\n        }\n    }\n\n    app = App(routes=routes, settings=settings)\n\nYou can include the application settings in a view, by using the\n``Settings`` type annotation:\n\n.. code:: python\n\n    from apistar import Settings\n\n\n    def debug_settings(settings: Settings):\n        \"\"\"\n        Return a JSON response containing the application settings dictionary.\n        \"\"\"\n        return settings\n\nMore typically you'll want to include settings into the ``build`` method\nof custom components, so that you can control their initialization,\nbased on the application settings.\n\nEnvironment\n-----------\n\nTypically you'll want to follow the \"twelve-factor app\" pattern and\n`store configuration variables in the\nenvironment <https://12factor.net/config>`__, rather than keeping them\nunder source control.\n\nAPI Star provides an ``Environment`` class that allows you to load the\nenvironment, and ensure that it is correctly configured.\n\n.. code:: python\n\n    from apistar import environment, typesystem\n\n\n    class Env(environment.Environment):\n        properties = {\n            'DEBUG': typesystem.boolean(default=False),\n            'DATABASE_URL': typesystem.string(default='sqlite://')\n        }\n\n    env = Env()\n\nOnce you have an ``Environment`` instance, you can use it when creating\nthe application settings.\n\n.. code:: python\n\n    settings = {\n        'DATABASE': {\n            'URL': env['DATABASE_URL']\n        }\n    }\n\n--------------\n\nTesting\n=======\n\nAPI Star includes the ``py.test`` testing framework. You can run all\ntests in a ``tests.py`` module or a ``tests/`` directory, by using the\nfollowing command:\n\n.. code:: bash\n\n    $ apistar test\n\nThe simplest way to test a view is to call it directly.\n\n.. code:: python\n\n    from app import hello_world\n\n    def test_hello_world():\n        assert hello_world() == {\"hello\": \"world\"}\n\nThere is also a test client, that allows you to make HTTP requests\ndirectly to your application, using the ``requests`` library.\n\n.. code:: python\n\n    from app import app\n    from apistar import TestClient\n\n    def test_hello_world():\n        client = TestClient(app)\n        response = client.get('/hello_world/')\n        assert response.status_code == 200\n        assert response.json() == {\"hello\": \"world\"}\n\nRequests made using the test client may use either relative URLs, or\nabsolute URLs. In either case, all requests will be directed at your\napplication, rather than making external requests.\n\n.. code:: python\n\n    response = client.get('http://www.example.com/hello_world/')\n\n--------------\n\nBackends\n========\n\nSQLAlchemy\n----------\n\nAPI Star has optional support for\n`SQLAlchemy <https://www.sqlalchemy.org/>`__. To use this you first need\nto install ``sqlalchemy`` and your chosen `database\ndriver <http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls>`__.\n\n.. code:: bash\n\n    $ pip install sqlalchemy\n    $ pip install psycopg2\n\n**Settings**\n\nYou then need to add the database config to your settings, and install\nthe additional components and commands for SQLAlchemy:\n\n-  ``URL`` - The `Database\n   URL <http://docs.sqlalchemy.org/en/latest/core/engines.html#database-urls>`__.\n-  ``METADATA`` - The SQLAlchemy\n   ```Metadata`` <http://docs.sqlalchemy.org/en/latest/core/metadata.html>`__\n   instance, typically from the ``declarative_base``.\n\n.. code:: python\n\n    from sqlalchemy.ext.declarative import declarative_base\n    from sqlalchemy import Column, Integer, String\n    from apistar.frameworks.wsgi import WSGIApp as App\n    from apistar.backends import sqlalchemy_backend\n\n    Base = declarative_base()\n\n    class Customer(Base):\n        __tablename__ = \"Customer\"\n        id = Column(Integer, primary_key=True)\n        name = Column(String)\n\n    routes = [\n        # ...\n    ]\n\n    # Configure database settings.\n    settings = {\n        \"DATABASE\": {\n            \"URL\": \"postgresql://:@localhost/apistar\",\n            \"METADATA\": Base.metadata\n        }\n    }\n\n    app = App(\n        routes=routes,\n        settings=settings,\n        commands=sqlalchemy_backend.commands,  # Install custom commands.\n        components=sqlalchemy_backend.components  # Install custom components.\n    )\n\nA few common driver configurations are listed below.\n\n+--------------+---------------------------------+---------------------------------------------------------------+\n| Database     | Driver                          | URL format                                                    |\n+==============+=================================+===============================================================+\n| PostgreSQL   | ``psycopg2``                    | ``postgresql://<username>:<password>@localhost/example``      |\n+--------------+---------------------------------+---------------------------------------------------------------+\n| MySQL        | ``pymysql``                     | ``mysql+pymysql://<username>:<password>@localhost/example``   |\n+--------------+---------------------------------+---------------------------------------------------------------+\n| SQLite       | ``sqlite3`` (Python built-in)   | ``sqlite:///example.db``                                      |\n+--------------+---------------------------------+---------------------------------------------------------------+\n\n**Creating the database tables**\n\nBefore starting you app you will likely need to create the database\ntables declared in your MetaData which you can do with the following\ncommand:\n\n.. code:: bash\n\n    $ apistar create_tables\n\n**Migrations** If you wish to use alembic migrations with sql alchemy\nyou can use the following package\n\nhttps://github.com/colanconnon/apistar\\_alembic\\_migrations\n\n**Interacting with the database**\n\nTo interact with the database, use the ``Session`` component. This will\nautomatically handle commit/rollback behavior, depending on if the view\nreturns normally, or raises an exception:\n\n.. code:: python\n\n    from apistar.backends.sqlalchemy_backend import Session\n\n    def create_customer(session: Session, name: str):\n        customer = Customer(name=name)\n        session.add(customer)\n        session.flush()  # Flush the changes to the database. This will populate the customer id.\n        return {'id': customer.id, 'name': customer.name}\n\n    def list_customers(session: Session):\n        queryset = session.query(Customer).all()\n        return [\n            {'id': customer.id, 'name': customer.name}\n            for customer in queryset\n        ]\n\nTo instead access the basic database configuration information in a\nhandler, use the ``SQLAlchemy`` component.\n\nThis has the following attributes:\n\n-  ``engine`` - The global\n   ```Engine`` <http://docs.sqlalchemy.org/en/latest/core/connections.html#sqlalchemy.engine.Engine>`__\n   instance.\n-  ``metadata`` - The\n   ```MetaData`` <http://docs.sqlalchemy.org/en/latest/core/metadata.html#sqlalchemy.typesystem.MetaData>`__\n   object passed into the settings.\n-  ``Session`` - A bound\n   ```sessionmaker`` <http://docs.sqlalchemy.org/en/latest/orm/session_api.html#session-and-sessionmaker>`__\n   factory.\n\nDjango ORM\n----------\n\nAPI Star has optional support for `Django\nORM <https://docs.djangoproject.com/en/1.11/topics/db/>`__. To use this\nyou first need to install ``django`` and your chosen `database\ndriver <https://docs.djangoproject.com/en/1.11/ref/databases/>`__.\n\n.. code:: bash\n\n    $ pip install django\n    $ pip install psycopg2\n\n**Settings**\n\nYou then need to add the database config to your settings and the django\nmigration commands:\n\n.. code:: python\n\n    from apistar.frameworks.wsgi import WSGIApp as App\n    from apistar.backends import django_orm\n\n\n    routes = [\n       # ...\n    ]\n\n    # Configure database settings.\n    settings = {\n        'DATABASES': {\n            'default': {\n                'ENGINE': 'django.db.backends.postgresql',\n                'NAME': '...',\n                'HOST': 'localhost',\n                'USER': '...',\n                'PASSWORD': ''\n            }\n        },\n        'INSTALLED_APPS': ['project',]\n    }\n\n\n    app = App(\n        routes=routes,\n        settings=settings,\n        commands=django_orm.commands,  # Install custom commands.\n        components=django_orm.components  # Install custom components.\n    )\n\n**Migrations**\n\nYou also need to manually create the ``migrations`` directory inside the\n``project`` directory.\n\nBefore starting you app you will likely need to make migrations and then\nmigrate which you can do with the following commands:\n\n.. code:: bash\n\n    $ apistar makemigrations\n    $ apistar migrate\n\n**Create a new model**\n\nTo create a new Django model you will want to create a new ``models.py``\nfile and declare it.\n\n.. code:: python\n\n    from django.db import models\n\n    class Customer(models.Model):\n        name = models.CharField(max_length=255)\n\n**Accessing the database**\n\nTo interact with the database, use the ``Session`` component. This will\nautomatically handle commit/rollback behavior, depending on if the view\nreturns normally, or raises an exception:\n\n.. code:: python\n\n    from apistar.backends.django_orm import Session\n\n    def create_customer(session: Session, name: str):\n        customer = session.Customer(name=name)\n        customer.save()\n        return {'id': customer.id, 'name': customer.name}\n\n    def list_customers(session: Session):\n        queryset = session.Customer.objects.all()\n        return [\n            {'id': customer.id, 'name': customer.name}\n            for customer in queryset\n        ]\n\n--------------\n\nComponents\n==========\n\nYou can create new components to inject into your views. For example:\n\n.. code:: python\n\n    import base64\n\n    class User(object):\n        \"\"\"\n        A component representing the user that the incoming request is associated with.\n        \"\"\"\n        def __init__(self, username):\n            self.username = username\n\n\n    def authenticate_user(authorization: http.Header):\n        \"\"\"\n        Determine the user associated with a request, using HTTP Basic Authentication.\n        \"\"\"\n        if authorization is None:\n            return None\n        scheme, token = authorization.split()\n        if scheme.lower() != 'basic':\n            return None\n        username, password = base64.b64decode(token).decode('utf-8').split(':')\n        return User(username)\n\nNext, register your component with the application:\n\n.. code:: python\n\n    from apistar import Component\n\n    components = [\n        Component(User, init=authenticate_user)\n    ]\n\n    app = App(\n        routes=routes,\n        components=components\n    )\n\nYou can then use your component in a view:\n\n.. code:: python\n\n    def say_hello(user: User):\n        return {'hello': user.username}\n\nComponent Reference\n-------------------\n\nA complete listing of the available built-in components:\n\n+----------------------------------+----------------+\n| Component                        | Description    |\n+==================================+================+\n| ``http.Method``                  | The HTTP       |\n|                                  | method of the  |\n|                                  | request, such  |\n|                                  | as ``GET``.    |\n+----------------------------------+----------------+\n| ``http.Host``                    | The host       |\n|                                  | component of   |\n|                                  | the request    |\n|                                  | URL, such as   |\n|                                  | ``'example.com |\n|                                  | '``.           |\n+----------------------------------+----------------+\n| ``http.Port``                    | The port       |\n|                                  | number that    |\n|                                  | the request is |\n|                                  | made to, such  |\n|                                  | as 443.        |\n+----------------------------------+----------------+\n| ``http.Scheme``                  | The scheme     |\n|                                  | component of   |\n|                                  | the request    |\n|                                  | URL, such as   |\n|                                  | 'https'.       |\n+----------------------------------+----------------+\n| ``http.Path``                    | The path       |\n|                                  | component of   |\n|                                  | the request    |\n|                                  | URL, such as   |\n|                                  | ``/api/v1/my_v |\n|                                  | iew/``.        |\n+----------------------------------+----------------+\n| ``http.QueryString``             | The query      |\n|                                  | component of   |\n|                                  | the request    |\n|                                  | URL, such as   |\n|                                  | ``page=2``.    |\n+----------------------------------+----------------+\n| ``http.URL``                     | The full URL   |\n|                                  | of the         |\n|                                  | request, such  |\n|                                  | as             |\n|                                  | ``https://exam |\n|                                  | ple.com/api/v1 |\n|                                  | /my_view/?page |\n|                                  | =2``.          |\n+----------------------------------+----------------+\n| ``http.Body``                    | The body of    |\n|                                  | the request,   |\n|                                  | as a           |\n|                                  | bytestring.    |\n+----------------------------------+----------------+\n| ``http.QueryParams``             | A multi-dict   |\n|                                  | containing the |\n|                                  | request query  |\n|                                  | parameters.    |\n+----------------------------------+----------------+\n| ``http.QueryParam``              | A single       |\n|                                  | request query  |\n|                                  | parameter,     |\n|                                  | corresponding  |\n|                                  | to the keyword |\n|                                  | argument name. |\n|                                  | Automatically  |\n|                                  | used for data  |\n|                                  | arguments.     |\n+----------------------------------+----------------+\n| ``http.Headers``                 | A multi-dict   |\n|                                  | containing the |\n|                                  | request        |\n|                                  | headers        |\n|                                  | parameters.    |\n+----------------------------------+----------------+\n| ``http.Header``                  | A single       |\n|                                  | request query  |\n|                                  | parameter,     |\n|                                  | corresponding  |\n|                                  | to the keyword |\n|                                  | argument name. |\n+----------------------------------+----------------+\n| ``http.Request``                 | The full       |\n|                                  | request        |\n|                                  | instance.      |\n+----------------------------------+----------------+\n| ``interfaces.App``               | The current    |\n|                                  | application.   |\n+----------------------------------+----------------+\n| ``interfaces.Console``           | The console    |\n|                                  | interface.     |\n|                                  | Supports the   |\n|                                  | ``.echo(messag |\n|                                  | e)``           |\n|                                  | interface.     |\n+----------------------------------+----------------+\n| ``interfaces.CommandLineClient`` | The command    |\n|                                  | line parsing   |\n|                                  | component.     |\n|                                  | Supports the   |\n|                                  | ``.parse(args) |\n|                                  | ``             |\n|                                  | interface.     |\n+----------------------------------+----------------+\n| ``interfaces.Injector``          | Makes the      |\n|                                  | dependency     |\n|                                  | injection      |\n|                                  | available to   |\n|                                  | handler.       |\n|                                  | Supports the   |\n|                                  | ``.run(func)`` |\n|                                  | interface.     |\n+----------------------------------+----------------+\n| ``interfaces.Router``            | The router for |\n|                                  | the            |\n|                                  | application    |\n|                                  | instance.      |\n|                                  | Supports the   |\n|                                  | ``reverse_url( |\n|                                  | name, **values |\n|                                  | )``            |\n|                                  | interface.     |\n+----------------------------------+----------------+\n| ``interfaces.Schema``            | The CoreAPI    |\n|                                  | schema used to |\n|                                  | represent the  |\n|                                  | API.           |\n+----------------------------------+----------------+\n| ``interfaces.StaticFiles``       | The static     |\n|                                  | files          |\n|                                  | component.     |\n|                                  | Supports the   |\n|                                  | ``get_url(path |\n|                                  | )``            |\n|                                  | interface.     |\n+----------------------------------+----------------+\n| ``interfaces.Templates``         | The template   |\n|                                  | environment.   |\n|                                  | Supports the   |\n|                                  | ``get_template |\n|                                  | (path)``       |\n|                                  | interface.     |\n+----------------------------------+----------------+\n| ``types.KeywordArgs``            | A dictionary   |\n|                                  | containing all |\n|                                  | the matched    |\n|                                  | URL path       |\n|                                  | arguments, or  |\n|                                  | parsed command |\n|                                  | line           |\n|                                  | parameters.    |\n+----------------------------------+----------------+\n| ``types.ParamName``              | A string       |\n|                                  | representing   |\n|                                  | the keyword    |\n|                                  | argument with  |\n|                                  | which a        |\n|                                  | component is   |\n|                                  | being injected |\n|                                  | into the view. |\n|                                  | May be for     |\n|                                  | components     |\n|                                  | that vary      |\n|                                  | depending on   |\n|                                  | the parameter  |\n|                                  | name used.     |\n+----------------------------------+----------------+\n| ``types.PathWildcard``           | A string. May  |\n|                                  | be used for    |\n|                                  | URL path       |\n|                                  | components     |\n|                                  | that should    |\n|                                  | support full   |\n|                                  | wildcard       |\n|                                  | matches,       |\n|                                  | allowing '/'   |\n|                                  | characters.    |\n+----------------------------------+----------------+\n| ``types.Settings``               | A dictionary   |\n|                                  | containing the |\n|                                  | application    |\n|                                  | settings.      |\n+----------------------------------+----------------+\n| ``types.WSGIEnviron``            | A dictionary   |\n|                                  | containing the |\n|                                  | raw WSGI       |\n|                                  | environ of the |\n|                                  | incoming       |\n|                                  | request.       |\n+----------------------------------+----------------+\n\n--------------\n\nPerformance\n===========\n\nAPI Star dynamically determines exactly what does and does not need to\nrun for any given view, based on the annotations it includes. This means\nthat it can be incredibly efficient.\n\nFor a simple JSON serialization test case, the `TechEmpower\nbenchmarks <https://www.techempower.com/benchmarks/#section=data-r14&hw=ph&test=json>`__\nrank API Star as achieving the highest throughput of any Python,\nJavaScript, Ruby, or Go framework.\n\n.. figure:: docs/img/benchmarks.png\n   :alt: Benchmarks\n\n   Benchmarks\n\nWe'll be working towards adding further test case types to the\nTechEmpower benchmarks in the coming weeks, and including results from\nboth WSGIApp and ASyncIOApp deployment modes.\n\nIts also important to recognize that raw latency or throughput numbers\nare typically not the most important factor to take into consideration\nwhen choosing a framework. Having said that, one aim for API Star is to\nhit the sweet spot for both performance and for productivity.\n\n--------------\n\nDeployment\n==========\n\nThe Development Server\n----------------------\n\nA development server is available, using the ``run`` command:\n\n.. code:: bash\n\n    $ apistar run\n    # Specify the port or interface via --port and --host\n    # Serve on port 9001 and use IPv6 only\n    $ apistar run --port 9001 --host ::1\n    # If you don't like the Werkzeug web debugger, turn it off\n    $ apistar run --no-debugger\n\nRunning in Production\n---------------------\n\nRunning a WSGIApp project\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor WSGI applications, the recommended production deployment is\nGunicorn, using the Meinheld worker.\n\n.. code:: bash\n\n    $ pip install gunicorn\n    $ pip install meinheld\n    $ gunicorn app:app --workers=4 --bind=0.0.0.0:5000 --pid=pid --worker-class=meinheld.gmeinheld.MeinheldWorker\n\nTypically you'll want to run as many workers as you have CPU cores on\nthe server.\n\nRunning an ASyncIOApp project\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor asyncio applications, use ``uvicorn``.\n\n.. code:: bash\n\n    $ uvicorn app:app --workers=4 --bind=0.0.0.0:5000 --pid=pid\n\nAgain, you'll typically want to run as many workers as you have CPU\ncores on the server.\n\n\"Serverless\" deployments\n------------------------\n\nAPI Star can also be deployed on so called \"serverless\" platforms. A\ngood option for using API Star with this style of deployment is\n`Zappa <https://github.com/Miserlou/Zappa>`__, which allows you to\ndeploy any Python WSGI server onto AWS Lambda.\n\nNote that *only* WSGIApp is supported using Zappa. You cannot run an\nASyncIOApp under this deployment, as a standard WSGI interface is\nexpected.\n\nFor Zappa to execute it needs to be provided with the path to your\n``app`` instance in its ``app_function`` key. Given that your ``app`` is\ncontained within ``app.py``, e.g.\n\n.. code:: python\n\n    # app.py\n    app = App(routes=routes, settings=settings)\n\nYour ``zappa_settings.json`` configuration file should then look\nsomething like this:\n\n.. code:: json\n\n    {\n        \"dev\": {\n            \"app_function\": \"app.app\",\n            \"aws_region\": \"us-east-1\",\n            \"profile_name\": \"default\",\n            \"s3_bucket\": \"<a-unique-s3-bucket-name>\",\n            \"keep_warm\": false\n        },\n        \"prod\": {\n            \"app_function\": \"app.app\",\n            \"aws_region\": \"us-east-1\",\n            \"profile_name\": \"default\",\n            \"s3_bucket\": \"<a-unique-s3-bucket-name>\",\n            \"debug\": false,\n            \"log_level\": \"WARNING\",\n            \"apigateway_description\": \"Description of your app on AWS API Gateway\",\n            \"lambda_description\": \"Description of your app on AWS Lambda\",\n        }\n    }\n\nSee `Zappa's installation\ninstructions <https://github.com/Miserlou/Zappa#installation-and-configuration>`__\nfor full configuration details.\n\nNotes\n~~~~~\n\n-  ``keep_warm`` is a four minute callback to AWS to ensure your\n   function stays loaded in AWS, decreasing the initial response time.\n   When doing development work you don't really need the function to\n   stay 'warm' 24/7 so by setting it to ``false`` in ``dev`` it will\n   save you some AWS invocation requests. The free tier at AWS gives you\n   `1,000,000 free\n   requests <https://aws.amazon.com/s/dm/optimization/server-side-test/free-tier/free_np/>`__\n   so it shouldn't matter too much.\n-  ``profile_name`` specifies which alias to use in your `AWS\n   Credentials <https://aws.amazon.com/blogs/security/a-new-and-standardized-way-to-manage-credentials-in-the-aws-sdks/>`__\n   file. This is usually located at ``~/.aws/credentials``.\n\n.. code:: ini\n\n    [default]\n    aws_access_key_id = 'xxx'\n    aws_secret_access_key = 'xxx'\n\nTo successfully run ``zappa deploy`` you will need an IAM user on your\nAWS account with the a sufficiently permissive policy attached. See the\n`discussions on Zappa's minimum policy\nrequirements <https://github.com/Miserlou/Zappa/issues/244>`__ for more\ndetails.\n\n--------------\n\nChangelog\n=========\n\n0.3 Release\n-----------\n\n-  Added Authentication & Permissions support.\n-  Added Parsers & Renderers support, with content negotiation.\n-  Added HTTP Session support.\n-  Added ``BEFORE_REQUEST`` / ``AFTER_REQUEST`` settings.\n-  Added ``SCHEMA`` settings.\n-  Added support for using ``Injector`` component inside a handler.\n\nNote: Because we now support configurable renderers, there's a\ndifference in the behaviour of returning plain data, or a Response\nwithout a ``content_type`` set. Previously we would return HTML for\nstrings/bytes, and JSON for anything else. Now, JSON is the default for\neverything, unless alternative renderers are specified. See the\n\"Renderers & Parsers\" and \"Requests & Responses\" section for more\ndetail.\n\n0.2 Release\n-----------\n\n-  Added ``asyncio`` support.\n-  Added ``app.main()``.\n-  Added ``Session`` support for both SQLAlchemy and DjangoORM backends.\n-  Added proper support for registering commands, and using components\n   in command handler functions.\n-  Added proper support for registering new components, and separating\n   component interfaces from component implementations.\n-  Introduced ``from apistar.frameworks.wsgi import WSGIApp as App``\n   instead of ``from apistar import App``.\n-  Introduced\n   ``from apistar.frameworks.asyncio import ASyncIOApp as App`` instead\n   of ``from apistar import App``.\n-  Changed ``apistar new --layout [minimal|standard]`` to\n   ``apistar new --framework [wsgi|asyncio]``.\n-  The TestClient() class now explicitly requires the app instance to be\n   passed as an argument.\n-  Dropped overloaded typesystem classes. Use eg. ``typesystem.String``\n   for declarations and ``typesystem.string()`` for inlines.\n-  Dropped single-lookup component ``Template``. Just use ``Templates``\n   instead.\n-  Dropped single-lookup component ``Setting``. Just use ``Settings``\n   instead.\n-  Dropped unneccessary ``ResponseData`` annotation.\n-  Dropped ``WSGIResponse``. Either return data or a ``Response``.\n-  Dropped ``build()`` method on components. See the docs for\n   information on creating and registering components.\n-  Rationalized the 'TEMPLATES' and 'STATICS' settings.\n\n--------------\n\nDevelopment\n===========\n\nTo work on the API Star codebase, you'll want to clone the repository,\nand create a Python virtualenv with the project requirements installed:\n\n.. code:: bash\n\n    $ git clone git@github.com:tomchristie/apistar.git\n    $ cd apistar\n    $ ./scripts/setup\n\nTo run the continuous integration tests and code linting:\n\n.. code:: bash\n\n    $ ./scripts/test\n    $ ./scripts/lint\n\n--------------\n\n.. raw:: html\n\n   <p align=\"center\">\n\nAPI Star is BSD licensed code.Designed & built in Brighton, England.\u2014 \u2b50\ufe0f\n\u2014\n\n.. raw:: html\n\n   </p>\n\n.. |Build Status| image:: https://travis-ci.org/encode/apistar.svg?branch=master\n   :target: https://travis-ci.org/encode/apistar\n.. |codecov| image:: https://codecov.io/gh/encode/apistar/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/encode/apistar\n.. |Package version| image:: https://badge.fury.io/py/apistar.svg\n   :target: https://pypi.python.org/pypi/apistar\n.. |Python versions| image:: https://img.shields.io/pypi/pyversions/apistar.svg\n   :target: https://www.python.org/doc/versions/\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "emailtrail",
    "platform": "",
    "project_url": "https://pypi.org/project/emailtrail/",
    "release_url": "https://pypi.org/project/emailtrail/0.1.dev0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "",
    "version": "0.1.dev0"
  },
  "releases": {
    "0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e854787270dd678c25224084dbe70ad2",
          "sha256": "6f49d2037bb04f4885c65c312ea887ca6e2d0e185dc87925778c61392c70c4bb"
        },
        "downloads": -1,
        "filename": "emailtrail-0.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "e854787270dd678c25224084dbe70ad2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48285,
        "upload_time": "2017-10-18T18:56:16",
        "url": "https://files.pythonhosted.org/packages/79/76/42af75ea826bdd61339cecdfbfc9c9fd328aa0807d62419562304926ee16/emailtrail-0.1.dev0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e854787270dd678c25224084dbe70ad2",
        "sha256": "6f49d2037bb04f4885c65c312ea887ca6e2d0e185dc87925778c61392c70c4bb"
      },
      "downloads": -1,
      "filename": "emailtrail-0.1.dev0.tar.gz",
      "has_sig": false,
      "md5_digest": "e854787270dd678c25224084dbe70ad2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 48285,
      "upload_time": "2017-10-18T18:56:16",
      "url": "https://files.pythonhosted.org/packages/79/76/42af75ea826bdd61339cecdfbfc9c9fd328aa0807d62419562304926ee16/emailtrail-0.1.dev0.tar.gz"
    }
  ]
}