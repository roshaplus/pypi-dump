{
  "info": {
    "author": "Peter & Ilja",
    "author_email": "ilja@wise.fish",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Database"
    ],
    "description": ".. image:: https://travis-ci.org/VRGhost/sqlalchemy-fsm.svg?branch=master\n   :target: https://travis-ci.org/VRGhost/sqlalchemy-fsm\n   :alt: Build Status\n\n\n.. image:: https://coveralls.io/repos/github/VRGhost/sqlalchemy-fsm/badge.svg?branch=master\n   :target: https://coveralls.io/github/VRGhost/sqlalchemy-fsm?branch=master\n   :alt: Coverage Status\n\n\nFinite state machine field for sqlalchemy (based on django-fsm)\n===============================================================\n\nsqlalchemy-fsm adds declarative states management for sqlalchemy models.\nInstead of adding some state field to a model, and manage its\nvalues by hand, you could use FSMState field and mark model methods\nwith the ``transition`` decorator. Your method will contain the side-effects\nof the state change.\n\nThe decorator also takes a list of conditions, all of which must be met\nbefore a transition is allowed.\n\nUsage\n-----\n\nAdd FSMState field to you model\n    from sqlalchemy_fsm import FSMField, transition\n\n.. code-block::\n\n   class BlogPost(db.Model):\n       state = db.Column(FSMField, nullable = False)\n\n\n\nUse the ``transition`` decorator to annotate model methods\n\n.. code-block::\n\n   @transition(source='new', target='published')\n   def publish(self):\n       \"\"\"\n       This function may contain side-effects, \n       like updating caches, notifying users, etc.\n       The return value will be discarded.\n       \"\"\"\n\n\n``source`` parameter accepts a list of states, or an individual state.\nYou can use ``*`` for source, to allow switching to ``target`` from any state.\n\nYou can also use ``None`` as source state for (e.g. in case when the state column in nullable).\nHowever, it is *not possible* to create transition with ``None`` as target state due to religious reasons.\n\nTransition can be also used on a class object to create a group of handlers\nfor same target state.\n\n.. code-block::\n\n   @transition(target='published')\n   class PublishHandler(object):\n\n       @transition(source='new')\n       def do_one(self, instance, value):\n           instance.side_effect = \"published from new\"\n\n       @transition(source='draft')\n       def do_two(self, instance, value):\n           instance.side_effect = \"published from draft\"\n\n\n   class BlogPost(db.Model):\n       ...\n       publish = PublishHandler\n\n\nThe transition is still to be invoked by calling the model's publish() method.\n\nAn alternative inline class syntax is supported too:\n\n.. code-block::\n\n   @transition(target='published')\n   class publish(object):\n\n       @transition(source='new')\n       def do_one(self, instance, value):\n           instance.side_effect = \"published from new\"\n\n       @transition(source='draft')\n       def do_two(self, instance, value):\n           instance.side_effect = \"published from draft\"\n\n\nIf calling publish() succeeds without raising an exception, the state field\nwill be changed, but not written to the database.\n\n.. code-block::\n\n   from sqlalchemy_fsm import can_proceed\n\n   def publish_view(request, post_id):\n       post = get_object__or_404(BlogPost, pk=post_id)\n       if not can_proceed(post.publish):\n            raise Http404;\n\n       post.publish()\n       post.save()\n       return redirect('/')\n\n\n\nIf your given function requires arguments to validate, you need to include them\nwhen calling can_proceed as well as including them when you call the function\nnormally. Say publish() required a date for some reason:\n\n.. code-block::\n\n   if not can_proceed(post.publish, the_date):\n       raise Http404\n   else:\n       post.publish(the_date)\n\n\nIf your code needs to know the state model is currently in, you can call\nthe is_current() function.\n\n.. code-block::\n\n   if is_current(post.delete):\n       raise Http404\n\n\nIf you require some conditions to be met before changing state, use the\n``conditions`` argument to ``transition``. ``conditions`` must be a list of functions\nthat take one argument, the model instance.  The function must return either\n``True`` or ``False`` or a value that evaluates to ``True`` or ``False``. If all\nfunctions return ``True``\\ , all conditions are considered to be met and transition\nis allowed to happen. If one of the functions return ``False``\\ , the transition\nwill not happen. These functions should not have any side effects.\n\nYou can use ordinary functions\n\n.. code-block::\n\n   def can_publish(instance):\n       # No publishing after 17 hours\n       if datetime.datetime.now().hour > 17:\n          return False\n       return True\n\n\nOr model methods\n\n.. code-block::\n\n   def can_destroy(self):\n       return not self.is_under_investigation()\n\n\nUse the conditions like this:\n\n.. code-block::\n\n   @transition(source='new', target='published', conditions=[can_publish])\n   def publish(self):\n       \"\"\"\n       Side effects galore\n       \"\"\"\n\n   @transition(source='*', target='destroyed', conditions=[can_destroy])\n   def destroy(self):\n       \"\"\"\n       Side effects galore\n       \"\"\"\n\n\nYou can also use FSM handlers to query the database. E.g.\n\n.. code-block::\n\n   session.query(BlogCls).filter(BlogCls.publish())\n\n\nwill return all \"Blog\" objects whose current state matches \"publish\"'es target state.\n\nEvents\n------\n\nSqlalchemy-fsm integrates with sqlalchemy's event system.\nThe library exposes two events ``before_state_change`` and ``after_state_change`` that are fired up\nat the expected points of state's lifecycle.\n\nYou can subscribe event listeners via standard SQLAlchemy interface of\n``listens_for`` or ``listen``.\n\n.. code-block::\n\n   from sqlalchemy.event import listens_for\n\n   @listens_for(Blog, 'before_state_change')\n   def on_state_change(instance, source, target):\n       ...\n\n\nOr\n\n.. code-block::\n\n   from sqlalchemy import event\n\n   def on_state_change(instance, source, target):\n       ...\n\n   event.listen(Blog, 'after_state_change', on_state_change)\n\n\n\nIt is possible to de-register an event listener call with ``sqlalchemy.event.remove()`` method.\n\nHow does sqlalchemy-fsm diverge from django-fsm?\n------------------------------------------------\n\n\n* \n  Can't commit data from within transition-decorated functions\n\n* \n  Does support arguments to conditions functions",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/VRGhost/sqlalchemy-fsm",
    "keywords": "sqlalchemy finite state machine fsm",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlalchemy-fsm",
    "platform": "",
    "project_url": "https://pypi.org/project/sqlalchemy-fsm/",
    "release_url": "https://pypi.org/project/sqlalchemy-fsm/1.1.7/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Finite state machine field for sqlalchemy",
    "version": "1.1.7"
  },
  "releases": {
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1677c9ec12b25b1352f84dfbf95d2ce0",
          "sha256": "31f1e3f066e0cb126fa915ad433a020def406353fd2ce553c1451481cdd31e64"
        },
        "downloads": -1,
        "filename": "sqlalchemy_fsm-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1677c9ec12b25b1352f84dfbf95d2ce0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7836,
        "upload_time": "2018-01-20T22:29:44",
        "url": "https://files.pythonhosted.org/packages/ec/b8/f6eadf2b22b924c1fb9ffb989d9ebca919af0627264a91850688399a77ec/sqlalchemy_fsm-1.1.4.tar.gz"
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "db5f996e8f3acf368319eaeca10e1b7e",
          "sha256": "c5e94528873c5a551144a9937a990f48fb20f5314d2edeffb03057befc04c251"
        },
        "downloads": -1,
        "filename": "sqlalchemy_fsm-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "db5f996e8f3acf368319eaeca10e1b7e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7846,
        "upload_time": "2018-01-20T22:36:49",
        "url": "https://files.pythonhosted.org/packages/b4/47/a89abaf8d8df53c617342860a7e139412295253c604bcdd02041799d299d/sqlalchemy_fsm-1.1.5.tar.gz"
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d4cd1d41ba29001cd085705740d9978f",
          "sha256": "3a661dbdb5969d939ca5f82c6c8727b122df76f19a3169b92b043c3042cdd95e"
        },
        "downloads": -1,
        "filename": "sqlalchemy_fsm-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "d4cd1d41ba29001cd085705740d9978f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8054,
        "upload_time": "2018-01-21T10:29:48",
        "url": "https://files.pythonhosted.org/packages/47/99/d19ec710d9f80085c7ce1f6c353467e4fde9bd9f20ab58fe0c9e4f67e1ba/sqlalchemy_fsm-1.1.6.tar.gz"
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9df383d9b6a52bf4a30d9f6df0c13611",
          "sha256": "824ab3b115bed938ed7bfdc9b1e0ab1a72e22a1048b5a5815d05a8fa5317ef5f"
        },
        "downloads": -1,
        "filename": "sqlalchemy_fsm-1.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "9df383d9b6a52bf4a30d9f6df0c13611",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8060,
        "upload_time": "2018-01-22T09:30:17",
        "url": "https://files.pythonhosted.org/packages/fc/8a/dbbf7c992b7b2d0af9d28b0840883c8cf22ef88445b205412d7cdc797319/sqlalchemy_fsm-1.1.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9df383d9b6a52bf4a30d9f6df0c13611",
        "sha256": "824ab3b115bed938ed7bfdc9b1e0ab1a72e22a1048b5a5815d05a8fa5317ef5f"
      },
      "downloads": -1,
      "filename": "sqlalchemy_fsm-1.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "9df383d9b6a52bf4a30d9f6df0c13611",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8060,
      "upload_time": "2018-01-22T09:30:17",
      "url": "https://files.pythonhosted.org/packages/fc/8a/dbbf7c992b7b2d0af9d28b0840883c8cf22ef88445b205412d7cdc797319/sqlalchemy_fsm-1.1.7.tar.gz"
    }
  ]
}