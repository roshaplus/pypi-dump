{
  "info": {
    "author": "Hiroaki Yamamoto",
    "author_email": "hiroaki@hysoftware.net",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "Additional code for Django\n==========================\n\n|Travis CI Image| |Coveralls Image| |Code Climate Maintainability Check\nImage|\n\nWhat this?\n----------\n\nThis repository contains additional code for Django.\n\nWhy I create this?\n------------------\n\nBecause I love Django, and usually using it. However, I found some\nessential code was lacked for modern web development. For example, you\nmight want to send Ajax Payload like this:\n\n.. code:: JSON\n\n    {\n      \"name\": \"John Doe\",\n      \"age\": 49,\n      \"email\": \"john@example.com\",\n      \"email_aliases\": [\n        \"john.due@example.com\",\n        \"due_49@example.com\",\n        \"john.1968@example.com\"\n      ]\n    }\n\nIn this case, you can validate name, age, and email field by using\n``Form`` layer on Django. However, email\\_aliases cannot be validated\nbecause it's a list and it should validate each value whether it is\nemail-formatted or not.\n\nTo support this case (and some other cases that Django can't handle), I\nwrote some code to support List validation.\n\nHow To Use It\n-------------\n\nForms\n~~~~~\n\nAngular form\n^^^^^^^^^^^^\n\nAs you can see above sections, you'll need to implement redundant code:\n\n.. code:: Python\n\n    from django import forms\n    from .models import UserInfo\n\n    class UserInfoForm(forms.ModelForm):\n      class Meta(object):\n        model = UserInfo\n        exclude = (\"2fa_secret\", )\n        # They are already implemented because UserInfoForm inherit ModelForm\n        # and the target model has the fields.\n        widgets = {\n          \"age\": forms.NumberInput(attrs={\"data-ng-model\": \"model.age\"}),\n          \"phone\": forms.TextInput(attrs={\"data-ng-model\": \"model.phone\"}),\n          \"street\": forms.TextInput(attrs={\"data-ng-model\": \"model.street\"}),\n          \"city\": forms.TextInput(attrs={\"data-ng-model\": \"model.city\"}),\n          \"state\": forms.TextInput(attrs={\"data-ng-model\": \"model.state\"})\n        }\n\nHowever, you can implement simpler code by using ``AngularForm``:\n\n.. code:: Python\n\n    from django import forms\n    from djextra.forms.angular1 import AngularForm\n\n    class UserInfoForm(AngularForm, forms.ModelForm):\n      ng_model_prefix = \"model\" # Change this if you want to use other than \"model\"\n      class Meta(object):\n        model = UserInfo\n        exclude = (\"2fa_secret\", )\n        # Automatically generates AngularJS forms.\n\nData binding between AngularJS and Django\n'''''''''''''''''''''''''''''''''''''''''\n\nIf you want put the value to scope model on initialization, you might\nhave 2 ways:\n\n1. Serialize your model into json by using ``json.dumps`` and\n   ``django.forms.model_to_dict``\n2. Set ``handle_ng_init`` meta attribute\n\nThe first one is very clear, convert your model into dict with\n``django.forms.model_to_dict``, and serialize the dict into JSON, and\nfinally put the text as ``data-ng-init`` to the form like this:\n\n.. code:: HTML\n\n    <form data-ng-init=\"model = {{ view.model_dict | tojson }}\">\n      <!-- bla bla bla bla... -->\n    </form>\n\nThe second one is simple; just set ``handle_ng_init`` Meta attribute of\nthe form to ``True`` like this:\n\n.. code:: Python\n\n    from django import forms\n    from djextra.forms.angular1 import AngularForm\n\n    class UserInfoForm(AngularForm, forms.ModelForm):\n      ng_model_prefix = \"model\" # Change this if you want to use other than \"model\"\n      handle_ng_init = True\n      class Meta(object):\n        model = UserInfo\n        exclude = (\"2fa_secret\", )\n        # Automatically generates AngularJS forms.\n\nIf you want to specify what value to be set, you can use\n``ng_init_format_func`` meta attribute like this:\n\n.. code:: Python\n\n    from django import forms\n    from djextra.forms.angular1 import AngularForm\n\n    class UserInfoForm(AngularForm, forms.ModelForm):\n      ng_model_prefix = \"model\" # Change this if you want to use other than \"model\"\n      handle_ng_init = True\n      ng_init_format_func = {\n        \"age\": lambda value: (\"{} years old\").format(value)\n      }\n      class Meta(object):\n        model = UserInfo\n        exclude = (\"2fa_secret\", )\n        # Automatically generates AngularJS forms.\n\nHowever, as you know, server-side is quite different from client side,\nso **to keep that ``age`` is formatted, you might also need to write\nclient-side code.**\n\nAll required forms\n^^^^^^^^^^^^^^^^^^\n\nIf you'd like to make all fields required on ModelForm, you will\nre-implement entire fields like this:\n\n.. code:: Python\n\n    from django import forms\n    from .models import UserInfo\n\n    class UserInfoForm(forms.ModelForm):\n      class Meta(object):\n        model = UserInfo\n        exclude = (\"2fa_secret\", )\n\n      # Assume that all fields are optional.\n      age = forms.IntegerField(\n        required=True,\n        widget=forms.NumberInput(attrs={\"data-ng-model\": \"model.age\"})\n      )\n      phone = forms.CharField(\n        required=True,\n        widget=forms.TextInput(attrs={\"data-ng-model\": \"model.phone\"})\n      )\n      street = forms.CharField(\n        required=True,\n        widget=forms.TextInput(attrs={\"data-ng-model\": \"model.street\"})\n      )\n      city = forms.CharField(\n        required=True,\n        widget=forms.TextInput(attrs={\"data-ng-model\": \"model.city\"})\n      )\n      state = forms.CharField(\n        required=True,\n        widget=forms.TextInput(attrs={\"data-ng-model\": \"model.state\"})\n      )\n\nMoreover, you will not be able to check if the field is proper unless\nyou refer Django's code. To reduce this time consumption, I implemented\n``AllReqiuredForm``:\n\n.. code:: Python\n\n    from django import forms\n    from djextra.forms.angular1 import AllRequiredForm\n    from .models import UserInfo\n\n    class UserInfoForm(AllRequiredForm, forms.ModelForm):\n      class Meta(object):\n        model = UserInfo\n        exclude = (\"2fa_secret\", )\n        # Assume that all fields are optional.\n\nBy using ``AllRequiredForm``, you can reduce your LOC like above. Of\ncourse, you can put optional field as exceptions like this:\n\n.. code:: Python\n\n    from django import forms\n    from djextra.forms.angular1 import AllRequiredForm\n    from .models import UserInfo\n\n    class UserInfoForm(AllRequiredForm, forms.ModelForm):\n      class Meta(object):\n        model = UserInfo\n        exclude = (\"2fa_secret\", )\n        # Assume that all fields are optional.\n        # By specifying optional, the specified fields won't\n        # become a required field.\n        optional = (\"phone\", )\n\nFieldAttributeForm\n^^^^^^^^^^^^^^^^^^\n\nWhen you set attribute, especially with ``ModelForm``, you might need to\nre-set widget with ``widget`` Meta attribute like this:\n\n.. code:: Python\n\n    from django.db import models as db\n    from django import forms\n\n\n    class NamePrice(db.Model):\n      name = db.CharField()\n      price = db.IntegerField()\n\n\n    class NameDescForm(forms.ModelForm):\n      class Meta(object):\n        model = NamePrice\n        exclude = (\"id\", )\n        widgets = {\n          \"price\": forms.NumberInput(attrs={\"max\": \"100\"})\n        }\n\nThis is okay when you know what widget is used and attribute ``max`` is\nthe fixed value. However, if you don't know what widget is used, or\n``max`` is the dynamic value by the server, Django might not have\nsuitable solution. To solve this problem, djextra has a form named\n``FieldAttributeForm`` and you can use it like this:\n\n.. code:: Python\n\n    from django.db import models as db\n    from django import forms\n\n    from django.conf import settings\n\n\n    class NamePrice(db.Model):\n      name = db.CharField()\n      price = db.IntegerField()\n\n\n    class NameDescForm(FieldAttributeForm, forms.ModelForm):\n      class Meta(object):\n        model = NamePrice\n        exclude = (\"id\", )\n        fld_attrs = {\n            \"price\": {\n                # The point is the attribute can be callable.\n                \"max\": lambda form, fld, name, value: 100 if value else \"\",\n                \"min\": \"0\"\n            },\n        }\n\nIn addition to this, ``FieldAttributeForm`` can set attributes that can\nbe applied to all the fields by using ``common_attrs`` meta attribute:\n\n.. code:: Python\n\n    from django.db import models as db\n    from django import forms\n\n    from django.conf import settings\n\n\n    class NamePrice(db.Model):\n      name = db.CharField()\n      price = db.IntegerField()\n\n\n    class NameDescForm(FieldAttributeForm, forms.ModelForm):\n      class Meta(object):\n        model = NamePrice\n        exclude = (\"id\", )\n        common_attrs = {\n          # Also it can be callable.\n          \"data-on-delay\": lambda form, fld, name, value: (\n            \"delay('{}',{})\"\n          ).format(\n            name, value\n          ),\n          \"data-on-load\": \"test()\",\n        }\n        fld_attrs = {\n            \"price\": {\n                \"max\": lambda form, fld, name, value: 100 if value else \"\",\n                \"min\": 0\n            },\n        }\n\nForm Fields\n~~~~~~~~~~~\n\nListField\n^^^^^^^^^\n\nListField is used to handle a list of values like above example. To use\nListField, you can write a form like this:\n\n``forms.py``\n\n.. code:: python\n\n    from django import forms\n    from djextra import forms as exforms\n\n\n    class ExampleForm(forms.Form):\n      name = forms.CharField()\n      age = forms.IntegerField()\n      email = forms.EmailField()\n      email_aliases = exforms.ListField(field=forms.EmailField())\n\nThen, Inputting the data as usual, the validation will start. If you\ndon't specify ``field`` keyword argument, ``django.forms.CharField``\nobject is specified.\n\nWidgets\n~~~~~~~\n\nWidgets for Angular Materials\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIf you like `Material Design <https://material.google.com/>`__, you'd\nalso like to use `Angular Material <https://material.angularjs.org>`__,\nbut as you can see the doc. the components are using special tags. For\nexample, ``select`` and ``option`` input controllers should be replaced\nwith ``mdSelect`` and ``mdOption`` and they are not provided by built-in\nwidgets.\n\nThis widget provides the widgets:\n\n.. code:: Python\n\n    from django import forms\n    from djextra.forms.angular1 import (\n      AngularForm, MDSelect, MDMultiSelect, MDDatePicker, MDDateSelect, MDCheckBox\n    )\n\n    from .models import ExampleModel\n\n    class ExampleForm(AngularForm, forms.ModelForm):\n      class Meta(object):\n        model = ExampleModel\n        exclude = (\"secret_field\", )\n        widgets = {\n          \"start_since\": MDDateSelect(),\n          \"available_date\": MDDatePicker(),\n          \"shape\": MDSelect(choices=(\n            (\"F\", \"Fat\"), (\"N\": \"Normal\"), (\"T\", \"Thin\")\n          )),\n          \"needs_fill\": MDCheckBox(\"Fill with border color?\")\n        }\n\nContribution\n------------\n\nContribution of code is welcome, and the code is tested with tox. Before\nsending your pull request, please check you tested your code very well.\n\nLicense\n-------\n\nThis repository is licensed under the terms of MIT License. Please check\n`LICENSE.md <LICENSE.md>`__ for the detail.\n\n.. |Travis CI Image| image:: https://travis-ci.org/hiroaki-yamamoto/djextra.svg?branch=master\n   :target: https://travis-ci.org/hiroaki-yamamoto/djextra\n.. |Coveralls Image| image:: https://coveralls.io/repos/github/hiroaki-yamamoto/djextra/badge.svg?branch=master\n   :target: https://coveralls.io/github/hiroaki-yamamoto/djextra?branch=master\n.. |Code Climate Maintainability Check Image| image:: https://api.codeclimate.com/v1/badges/1ed2f1c354e6357d711c/maintainability\n   :target: https://codeclimate.com/github/hiroaki-yamamoto/djextra/maintainability",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/hiroaki-yamamoto/djextra",
    "keywords": "Django",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djextra",
    "platform": "",
    "project_url": "https://pypi.org/project/djextra/",
    "release_url": "https://pypi.org/project/djextra/1.1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Additional Functions for Django",
    "version": "1.1.2"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2e2d0dbfc2a9bbffb4c202d0ded7f122",
          "sha256": "a897df2923db3e60ddca7e58dbfb1c32c0f715efca2ebc8c2af5d887c16def9a"
        },
        "downloads": -1,
        "filename": "djextra-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2e2d0dbfc2a9bbffb4c202d0ded7f122",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3727,
        "upload_time": "2017-12-24T03:24:21",
        "url": "https://files.pythonhosted.org/packages/4c/2f/0526b23cb5d5036cd5a82897fd755a67af5fd4ce4f15e9d5274d507db07d/djextra-0.1.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8eb7f6038155d94ff75e6f75af7c2700",
          "sha256": "9582001b6bf06b2643c6b0248aa714f89fa0ba17652f90ff723fe0c4c0dab4c5"
        },
        "downloads": -1,
        "filename": "djextra-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8eb7f6038155d94ff75e6f75af7c2700",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3742,
        "upload_time": "2017-12-24T03:28:50",
        "url": "https://files.pythonhosted.org/packages/50/d9/3912527e3dfdc8eaf0bdbb13d5bd2e3fdd352041360d85a09c89261a6a06/djextra-1.0.0.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0b59ffddac477f8cb7888c9e9d3ced86",
          "sha256": "2fb84c3d03fb0dfc7581801ac817b30acc88ba2815a11e59dcda9e279b4ac366"
        },
        "downloads": -1,
        "filename": "djextra-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0b59ffddac477f8cb7888c9e9d3ced86",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14195,
        "upload_time": "2018-01-15T07:25:54",
        "url": "https://files.pythonhosted.org/packages/b5/34/4bc040e4582edf95ab4f69bdf0ab5fb2f996b5639819cf875100f5e55323/djextra-1.1.0.tar.gz"
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ca0c0b7fb0df11da2fe822d3666934e5",
          "sha256": "30e55b4202f6723390be79005a8222ae99efa6a5bcf17b7153d3ab77a8736b7a"
        },
        "downloads": -1,
        "filename": "djextra-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ca0c0b7fb0df11da2fe822d3666934e5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11231,
        "upload_time": "2018-01-15T07:36:09",
        "url": "https://files.pythonhosted.org/packages/22/f9/bc456e3e6d075438a08a848eb6743080b0b4a2f9e2639c47a00d492c00b7/djextra-1.1.1.tar.gz"
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7088ea44b64d9ffc6095da1a73a4c33f",
          "sha256": "889f7d76852a3fdf99a3439395743b6ee26aa4491faadb48c0147ef621f3e215"
        },
        "downloads": -1,
        "filename": "djextra-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7088ea44b64d9ffc6095da1a73a4c33f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11251,
        "upload_time": "2018-01-19T06:46:52",
        "url": "https://files.pythonhosted.org/packages/29/f1/6effcfae950f52e7f0243d7c9a382ed838c43729ee1a61a4704575523db2/djextra-1.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7088ea44b64d9ffc6095da1a73a4c33f",
        "sha256": "889f7d76852a3fdf99a3439395743b6ee26aa4491faadb48c0147ef621f3e215"
      },
      "downloads": -1,
      "filename": "djextra-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7088ea44b64d9ffc6095da1a73a4c33f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 11251,
      "upload_time": "2018-01-19T06:46:52",
      "url": "https://files.pythonhosted.org/packages/29/f1/6effcfae950f52e7f0243d7c9a382ed838c43729ee1a61a4704575523db2/djextra-1.1.2.tar.gz"
    }
  ]
}