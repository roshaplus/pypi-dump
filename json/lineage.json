{
  "info": {
    "author": "Andrew Riha",
    "author_email": "apriha@apriha.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Healthcare Industry",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Visualization",
      "Topic :: Utilities"
    ],
    "description": "lineage\n=======\n``lineage`` provides a framework for analyzing genotype (raw data) files from direct-to-consumer\nDNA testing companies (e.g., `23andMe <https://www.23andme.com>`_,\n`Family Tree DNA <https://www.familytreedna.com>`_, and `Ancestry <http://www.ancestry.com>`_),\nprimarily for the purposes of genetic genealogy.\n\nCapabilities\n------------\n- Merge raw data files from different DNA testing companies, identifying discrepant SNPs in the process\n- Compute centiMorgans (cMs) of shared DNA between individuals using HapMap tables\n- Plot shared DNA between individuals\n- Determine genes shared between individuals (i.e., genes transcribed from shared DNA segments)\n- Find discordant SNPs between child and parent(s)\n- Remap SNPs between assemblies / builds (e.g., convert SNPs from build 36 to build 37, etc.)\n\nDependencies\n------------\n``lineage`` requires `Python <https://www.python.org>`_ 3.5+ and the following Python packages:\n\n- `numpy <http://www.numpy.org>`_\n- `pandas <http://pandas.pydata.org>`_ 0.21.0+\n- `matplotlib <http://matplotlib.org>`_\n\nOn Linux systems, the following system-level installs may also be required::\n\n    $ sudo apt-get install python3-tk\n    $ sudo apt-get install gfortran\n    $ sudo apt-get install python-dev\n    $ sudo apt-get install python-devel\n    $ sudo apt-get install python3.X-dev # (where X == Python minor version)\n\nInstallation\n------------\n``lineage`` is `available <https://pypi.python.org/pypi/lineage/>`_ on the\n`Python Package Index <https://pypi.python.org/pypi>`_. Install ``lineage`` (and its required\nPython dependencies) via ``pip``::\n\n    $ pip install lineage\n\nExamples\n--------\nInitialize the lineage Framework\n````````````````````````````````\nImport ``Lineage`` and instantiate a ``Lineage`` object:\n\n>>> from lineage import Lineage\n>>> l = Lineage()\n\nDownload Example Data\n`````````````````````\nLet's download some example data from `openSNP <https://opensnp.org>`_:\n\n>>> l.download_example_datasets()\nDownloading resources/662.23andme.304.csv.gz\nDownloading resources/662.23andme.340.csv.gz\nDownloading resources/662.ftdna-illumina.341.csv.gz\nDownloading resources/663.23andme.305.csv.gz\nDownloading resources/4583.ftdna-illumina.3482.csv.gz\nDownloading resources/4584.ftdna-illumina.3483.csv.gz\n\nWe'll call these datasets ``User662``, ``User663``, ``User4583``, and ``User4584``.\n\nLoad Raw Data\n`````````````\nCreate an ``Individual`` in the context of the ``lineage`` framework to interact with the\n``User662`` dataset:\n\n>>> user662 = l.create_individual('User662', 'resources/662.ftdna-illumina.341.csv.gz')\nLoading resources/662.ftdna-illumina.341.csv.gz\n\nHere we created ``user662`` with the name ``User662`` and loaded a raw data file.\n\nRemap SNPs\n``````````\nOops! The data we just loaded is Build 36, but we want Build 37 since the other files in the\ndatasets are Build 37... Let's remap the SNPs:\n\n>>> user662.assembly\n36\n>>> user662.remap_snps(37)\nRemapping chromosome 1...\nRemapping chromosome 2...\nRemapping chromosome 3...\nRemapping chromosome 4...\nRemapping chromosome 5...\nRemapping chromosome 6...\nRemapping chromosome 7...\nRemapping chromosome 8...\nRemapping chromosome 9...\nRemapping chromosome 10...\nRemapping chromosome 11...\nRemapping chromosome 12...\nRemapping chromosome 13...\nRemapping chromosome 14...\nRemapping chromosome 15...\nRemapping chromosome 16...\nRemapping chromosome 17...\nRemapping chromosome 18...\nRemapping chromosome 19...\nRemapping chromosome 20...\nRemapping chromosome 21...\nRemapping chromosome 22...\n\nSNPs can be re-mapped between Build 36 (``NCBI36``), Build 37 (``GRCh37``), and Build 38\n(``GRCh38``).\n\nMerge Raw Data Files\n````````````````````\nThe dataset for ``User662`` consists of three raw data files from two different DNA testing\ncompanies. Let's load the remaining two files.\n\nAs the data gets added, it's compared to the existing data and discrepancies are saved to CSV\nfiles. (The discrepancy thresholds can be tuned via parameters.)\n\n>>> user662.load_snps(['resources/662.23andme.304.csv.gz', 'resources/662.23andme.340.csv.gz'],\n...                   discrepant_genotypes_threshold=160)\nLoading resources/662.23andme.304.csv.gz\n3 SNP positions being added differ; keeping original positions\nSaving output/User662_discrepant_positions_1.csv\n8 genotypes were discrepant; marking those as null\nSaving output/User662_discrepant_genotypes_1.csv\nLoading resources/662.23andme.340.csv.gz\n27 SNP positions being added differ; keeping original positions\nSaving output/User662_discrepant_positions_2.csv\n156 genotypes were discrepant; marking those as null\nSaving output/User662_discrepant_genotypes_2.csv\n\nAll `output files <https://apriha.github.io/lineage/output_files.html>`_ are saved to the output\ndirectory.\n\nSave SNPs\n`````````\nOk, so far we've remapped the SNPs to the same build and merged the SNPs from three files,\nidentifying discrepancies along the way. Let's save the merged dataset consisting of over 1M+\nSNPs to a CSV file:\n\n>>> user662.save_snps()\nSaving output/User662.csv\n\nCompare Individuals\n```````````````````\nLet's create another ``Individual`` for the ``User663`` dataset:\n\n>>> user663 = l.create_individual('User663', 'resources/663.23andme.305.csv.gz')\nLoading resources/663.23andme.305.csv.gz\n\nNow we can perform some analysis between the ``User662`` and ``User663`` datasets.\n\nFind Discordant SNPs\n''''''''''''''''''''\nFirst, let's find discordant SNPs (i.e., SNP data that is not consistent with Mendelian\ninheritance):\n\n>>> discordant_snps = l.find_discordant_snps(user662, user663, save_output=True)\nSaving output/discordant_snps_User662_User663.csv\n\nThis method also returns a ``pandas`` ``DataFrame``, and it can be inspected interactively at\nthe prompt, although the same output is available in the CSV file.\n\n>>> len(discordant_snps.loc[discordant_snps['chrom'] != 'MT'])\n37\n\nNot counting mtDNA SNPs, there are 37 discordant SNPs between these two datasets.\n\nFind Shared DNA\n'''''''''''''''\n``lineage`` uses the probabilistic recombination rates throughout the human genome from the\n`International HapMap Project <https://www.genome.gov/10001688/international-hapmap-project/>`_ to\ncompute the shared DNA (in centiMorgans) between two individuals. Additionally, ``lineage``\ndenotes when the shared DNA is shared on either one or both chromosomes in a pair. For example,\nwhen siblings share a segment of DNA on both chromosomes, they inherited the same DNA from their\nmother and father for that segment.\n\nWith that background, let's find the shared DNA between the ``User662`` and ``User663`` datasets,\ncalculating the centiMorgans of shared DNA and plotting the results:\n\n>>> l.find_shared_dna(user662, user663, cM_threshold=0.75, snp_threshold=1100)\nDownloading resources/hapmap_h37.tar.gz\nDownloading resources/cytoband_h37.txt.gz\nSaving output/shared_dna_User662_User663.png\nSaving output/shared_dna_one_chrom_User662_User663.csv\n\nNotice that the centiMorgan and SNP thresholds for each DNA segment can be tuned. Additionally,\nnotice that two files were downloaded to facilitate the analysis and plotting - future analyses\nwill used the downloaded files instead of downloading the files again.\n\nHere, the `output <https://apriha.github.io/lineage/output_files.html>`_ consists of a CSV file\nthat details the shared segments of DNA on one chromosome. Additionally, a plot is also generated\nthat illustrates the shared DNA:\n\n.. image:: https://raw.githubusercontent.com/apriha/lineage/master/docs/images/shared_dna_User662_User663.png\n\nFind Shared Genes\n'''''''''''''''''\nThe `Central Dogma of Molecular Biology <https://www.nature.com/nature/focus/crick/pdf/crick227.pdf>`_\nstates that genetic information flows from DNA to mRNA to proteins: DNA is transcribed into\nmRNA, and mRNA is translated into a protein. It's more complicated than this (it's biology\nafter all), but generally, one mRNA produces one protein, and the mRNA / protein is considered a\ngene.\n\nTherefore, it would be interesting to understand not just what DNA is shared between individuals,\nbut what *genes* are shared between individuals *with the same variations*. (In other words,\nwhat genes are producing the *same* proteins?) Since ``lineage`` can determine the shared DNA\nbetween individuals, it can use that information to determine what genes are also shared on\neither one or both chromosomes.\n\nFor this example, let's create two more ``Individuals`` for the ``User4583`` and ``User4584``\ndatasets:\n\n>>> user4583 = l.create_individual('User4583', 'resources/4583.ftdna-illumina.3482.csv.gz')\nLoading resources/4583.ftdna-illumina.3482.csv.gz\n\n>>> user4584 = l.create_individual('User4584', 'resources/4584.ftdna-illumina.3483.csv.gz')\nLoading resources/4584.ftdna-illumina.3483.csv.gz\n\nNow let's find the shared genes:\n\n>>> l.find_shared_dna(user4583, user4584, shared_genes=True)\nSaving output/shared_dna_User4583_User4584.png\nSaving output/shared_dna_one_chrom_User4583_User4584.csv\nDownloading resources/knownGene_h37.txt.gz\nDownloading resources/kgXref_h37.txt.gz\nSaving output/shared_genes_one_chrom_User4583_User4584.csv\nSaving output/shared_dna_two_chroms_User4583_User4584.csv\nSaving output/shared_genes_two_chroms_User4583_User4584.csv\n\nThe plot that illustrates the shared DNA is shown below. Note that in addition to outputting the\nshared DNA segments on either one or both chromosomes, the shared genes on either one or both\nchromosomes are also output. These `output files <https://apriha.github.io/lineage/output_files.html>`_\nare detailed in the documentation.\n\n.. image:: https://raw.githubusercontent.com/apriha/lineage/master/docs/images/shared_dna_User4583_User4584.png\n\nDocumentation\n-------------\nDocumentation is available `here <https://apriha.github.io/lineage/>`_.\n\nAcknowledgements\n----------------\nThanks to Whit Athey, Ryan Dale, Mike Agostino, Padma Reddy, Binh Bui, Gopal Vashishtha,\n`CS50 <https://cs50.harvard.edu>`_, and `openSNP <https://opensnp.org>`_.\n\nLicense\n-------\nCopyright (C) 2016 Andrew Riha\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/apriha/lineage",
    "keywords": "genetic genealogy bioinformatics dna chromosomes genetics inheritance ancestry",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lineage",
    "platform": "",
    "project_url": "https://pypi.org/project/lineage/",
    "release_url": "https://pypi.org/project/lineage/1.0b2/",
    "requires_dist": [
      "matplotlib",
      "pandas (>=0.21.0)",
      "numpy"
    ],
    "requires_python": "",
    "summary": "tools for genetic genealogy and the analysis of consumer DNA test results",
    "version": "1.0b2"
  },
  "releases": {
    "1.0a6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d5938d690083e0d0e3d257db5894d934",
          "sha256": "36f31244b8fdb06634d1f579148adee2e8cc10b82c4ca2de5cfff34e39d7552b"
        },
        "downloads": -1,
        "filename": "lineage-1.0a6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d5938d690083e0d0e3d257db5894d934",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 6898,
        "upload_time": "2016-12-16T09:08:41",
        "url": "https://files.pythonhosted.org/packages/39/12/c78477d6cdb8897bc7651072b119ae0bc0ecb35d6f3c1d83ea57f5962e82/lineage-1.0a6-py3-none-any.whl"
      }
    ],
    "1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4e2975b8a28dac762db03f3e705885c3",
          "sha256": "8f0bfb3214bc7fe3c885b36d77f756d0eab4a6d45b44b9c593e8d0143817a0be"
        },
        "downloads": -1,
        "filename": "lineage-1.0b1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4e2975b8a28dac762db03f3e705885c3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 29936,
        "upload_time": "2017-09-27T07:39:24",
        "url": "https://files.pythonhosted.org/packages/1e/f8/87c8d54ecaff6a5ab65ad195cc780f25c570034250baa323b96ba46cab20/lineage-1.0b1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9c3c3ad0b546d81a25448a86e0d7d901",
          "sha256": "9979473e5ae797ecf7c8d9fdb2e15e0c291a17d64a03e7fb93044bf64db7fba9"
        },
        "downloads": -1,
        "filename": "lineage-1.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "9c3c3ad0b546d81a25448a86e0d7d901",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41647,
        "upload_time": "2017-09-27T07:39:25",
        "url": "https://files.pythonhosted.org/packages/fe/c0/a0bdc3c3e7e1203e30436a296bb565cff1d7737f712ddb2f1337ab5b4951/lineage-1.0b1.tar.gz"
      }
    ],
    "1.0b2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "411d90ded28312dd8fd132e3fa150644",
          "sha256": "c56550966150a882e4449ee46c859fe4d8bc8ebdd932cf9450864f4b6b5cecc9"
        },
        "downloads": -1,
        "filename": "lineage-1.0b2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "411d90ded28312dd8fd132e3fa150644",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 36210,
        "upload_time": "2018-01-29T06:56:32",
        "url": "https://files.pythonhosted.org/packages/5c/67/4cefd91f26c76ade92efe29bfa2ccf7c5451f0404efc5fd1ae916698e257/lineage-1.0b2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e12063956a1a35a5c54514d60b9861d6",
          "sha256": "691ded144b7bfe18eebe04eb914ef264028352a621b21f059e0613e7d5c7224a"
        },
        "downloads": -1,
        "filename": "lineage-1.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "e12063956a1a35a5c54514d60b9861d6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66129,
        "upload_time": "2018-01-29T06:56:33",
        "url": "https://files.pythonhosted.org/packages/2e/3c/9f6bbd67c0bc410e5c1dd096e8c31e2c01b45117e233ce87ceae8f47b7f7/lineage-1.0b2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "411d90ded28312dd8fd132e3fa150644",
        "sha256": "c56550966150a882e4449ee46c859fe4d8bc8ebdd932cf9450864f4b6b5cecc9"
      },
      "downloads": -1,
      "filename": "lineage-1.0b2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "411d90ded28312dd8fd132e3fa150644",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 36210,
      "upload_time": "2018-01-29T06:56:32",
      "url": "https://files.pythonhosted.org/packages/5c/67/4cefd91f26c76ade92efe29bfa2ccf7c5451f0404efc5fd1ae916698e257/lineage-1.0b2-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "e12063956a1a35a5c54514d60b9861d6",
        "sha256": "691ded144b7bfe18eebe04eb914ef264028352a621b21f059e0613e7d5c7224a"
      },
      "downloads": -1,
      "filename": "lineage-1.0b2.tar.gz",
      "has_sig": false,
      "md5_digest": "e12063956a1a35a5c54514d60b9861d6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 66129,
      "upload_time": "2018-01-29T06:56:33",
      "url": "https://files.pythonhosted.org/packages/2e/3c/9f6bbd67c0bc410e5c1dd096e8c31e2c01b45117e233ce87ceae8f47b7f7/lineage-1.0b2.tar.gz"
    }
  ]
}