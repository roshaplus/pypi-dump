{
  "info": {
    "author": "Marek Podsiad\u0142y",
    "author_email": "marek@podsiadly.info",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "PyMoq\n=====\n.. image:: https://travis-ci.org/snifter/pymoq.svg?branch=master\n    :target: https://travis-ci.org/snifter/pymoq\n\n.. image:: https://codecov.io/gh/snifter/pymoq/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/snifter/pymoq\n\n.. image:: https://img.shields.io/github/issues/snifter/pymoq.svg?style=flat\n    :target: https://github.com/snifter/pymoq/issues\n\nPyMoq is a tool for mocking HTTP services.\n\n\nInstallation\n------------\n\n::\n\n  pip install PyMoq\n\n\nUsage\n-----\n\nBy default PyMoq runs on 8080 TCP port, it can be changed:\n\n::\n\n  mock = pymoq.Mock(port=8090)\n\nStub can be created by setting path and http method (GET is the default).\n\n::\n\n  mock.create_stub('/books', method='post')\n\nIt is possible to set path as regex.\n\n::\n\n  mock.create_stub('/books/[0-9]+', method='put')\n\nFor each stub a response can be configured with headers and http status code.\nHeaders has to be dictionary with header name as its key.\n\n::\n\n  mock.create_stub('/books', method='post').response('...',\n                                                     headers={'name': 'value'},\n                                                     http_status=201)\n\n\nExample test\n^^^^^^^^^^^^\n::\n\n  import unittest\n  import requests\n  from pymoq import pymoq\n\n  class ExampleUsageTestCase(unittest.TestCase):\n      def test_direct_usage(self):\n        content = '{\"author\": \"John Doe\", \"title\": \"Lorem ipsum dolor sit amet\", \"id\": 1}'\n        headers = {\n          'content-type': 'application/json; charset=utf-8',\n          'location': 'http://localhost:8090/books/1'\n        }\n\n        mock = pymoq.Mock(port=8090)\n        mock.create_stub('/books', method='post').response(content,\n                                                          headers=headers,\n                                                          http_status=201)\n\n        with mock.run():\n            response = requests.post('http://localhost:8090/books',\n                              data={\"author\": \"John Doe\", \"title\": \"Lorem ipsum dolor sit amet\"})\n            self.assertEqual(response.status_code, 201)\n            self.assertEqual(response.headers['content-type'], 'application/json; charset=utf-8')\n            self.assertEqual(response.headers['location'], 'http://localhost:8090/books/1')\n            self.assertEqual(response.text, content)\n\nConfigure with JSON file\n------------------------\n\nA mock can be configured with json file. A file should looks like:\n\n::\n\n  [{\n      \"request\": {\n          \"url\": \"/books\",\n          \"method\": \"post\"\n      },\n      \"response\": {\n          \"content\": {\"author\": \"John Doe\", \"title\": \"Lorem ipsum dolor sit amet\", \"id\": 1},\n          \"headers\": {\n              \"content-type\": \"application/json; charset=utf-8\",\n              \"location\": \"http://localhost:8080/books/1\"\n          },\n          \"httpStatus\": 201\n      }\n  }]\n\nExample test\n^^^^^^^^^^^^\n::\n\n  import unittest\n  import requests\n  from pymoq import pymoq\n\n\n  class JsonConfigTestCase(unittest.TestCase):\n      def test_load_config_from_file(self):\n          mock = pymoq.Mock()\n          mock.load('config.json')\n\n          with mock.run():\n              response = requests.post('http://localhost:8080/books',\n                          data={\"author\": \"John Doe\", \"title\": \"Lorem ipsum dolor sit amet\"})\n              self.assertEqual(response.status_code, 201)\n              self.assertEqual(response.headers['content-type'], 'application/json; charset=utf-8')\n              self.assertEqual(response.headers['location'], 'http://localhost:8080/books/1')\n\n              content = response.json()\n              self.assertEqual(content['author'], 'John Doe')\n              self.assertEqual(content['title'], 'Lorem ipsum dolor sit amet')\n              self.assertEqual(content['id'], 1)\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/snifter/pymoq",
    "keywords": "api testing mocking",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyMoq",
    "platform": "",
    "project_url": "https://pypi.org/project/PyMoq/",
    "release_url": "https://pypi.org/project/PyMoq/0.2.0/",
    "requires_dist": [
      "requests; extra == 'test'"
    ],
    "requires_python": "",
    "summary": "An API mocking tool",
    "version": "0.2.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c138d5ad75b3e1fe58c9078cfff65bc5",
          "sha256": "65fea8295e30bc8dd98cbb94ef9fc2055bcfc753a7cb0f6ad14ef36b1d74c9a8"
        },
        "downloads": -1,
        "filename": "PyMoq-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c138d5ad75b3e1fe58c9078cfff65bc5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 4761,
        "upload_time": "2017-12-19T19:41:29",
        "url": "https://files.pythonhosted.org/packages/b1/86/e590245518c14233c56ce3d5dfa0f06b33f70a7f5257ab59e18a25628539/PyMoq-0.1.0-py3-none-any.whl"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9ba198feae63f915636c0c67fbecc238",
          "sha256": "6c317d75209782dfca5cee1764c9093c82bf22e94ab7c0d1da8fdab6873fc131"
        },
        "downloads": -1,
        "filename": "PyMoq-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9ba198feae63f915636c0c67fbecc238",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 7220,
        "upload_time": "2017-12-28T19:00:17",
        "url": "https://files.pythonhosted.org/packages/2b/f4/6fb20c79f0b873bfb2bcdfe1b16f3093c8880fb57ba0dbf3cc5afea37036/PyMoq-0.2.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "04a08b2aab6f7137a164873268fa393a",
          "sha256": "4d3c7a94de3b5858a2a31004f2eebe06a69d61a609a86fe4a6af50ecd2f6e209"
        },
        "downloads": -1,
        "filename": "PyMoq-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "04a08b2aab6f7137a164873268fa393a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4140,
        "upload_time": "2017-12-28T19:00:19",
        "url": "https://files.pythonhosted.org/packages/c8/13/646fcdd345f6c5eade4e759d306d15a9cde889a8f6cfc30f2ed7b8d3b303/PyMoq-0.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9ba198feae63f915636c0c67fbecc238",
        "sha256": "6c317d75209782dfca5cee1764c9093c82bf22e94ab7c0d1da8fdab6873fc131"
      },
      "downloads": -1,
      "filename": "PyMoq-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9ba198feae63f915636c0c67fbecc238",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 7220,
      "upload_time": "2017-12-28T19:00:17",
      "url": "https://files.pythonhosted.org/packages/2b/f4/6fb20c79f0b873bfb2bcdfe1b16f3093c8880fb57ba0dbf3cc5afea37036/PyMoq-0.2.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "04a08b2aab6f7137a164873268fa393a",
        "sha256": "4d3c7a94de3b5858a2a31004f2eebe06a69d61a609a86fe4a6af50ecd2f6e209"
      },
      "downloads": -1,
      "filename": "PyMoq-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "04a08b2aab6f7137a164873268fa393a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4140,
      "upload_time": "2017-12-28T19:00:19",
      "url": "https://files.pythonhosted.org/packages/c8/13/646fcdd345f6c5eade4e759d306d15a9cde889a8f6cfc30f2ed7b8d3b303/PyMoq-0.2.0.tar.gz"
    }
  ]
}