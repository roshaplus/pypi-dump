{
  "info": {
    "author": "Nando Florestan",
    "author_email": "nandoflorestan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Pyramid",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Database",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: WSGI",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks"
    ],
    "description": "=====\nKerno\n=====\n\nKerno is trying to be:\n\n- a framework for building applications in Python\n- which approximates Robert C. Martin's\n  `Clean Architecture <http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html>`_\n- by empowering a service layer (here called **Action layer**)\n- and moving both persistence and UI (including web frameworks) to\n  the edges of the system, while still providing ways to make\n  development and automated testing easier.\n\nThe documentation is at http://docs.nando.audio/kerno/latest/\n\n\nDefense of the architecture\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis is the first such project in the entire Python community, which\nseems so addicted to the insufficient MVC or MVT offered by common\nweb frameworks. Kerno does not replace these frameworks, but facilitates\ncreation of the top layers of an architecture that contains,\nfrom center to border:\n\n- **Configuration layer:** Such that all other layers have access to settings.\n  Why should configuration settings be available only to the web framework???\n- **Model layer:** in which you define entities (e. g. SQLAlchemy models),\n  but no I/O (no session, no queries). The entities can be seen\n  by all the layers below.\n- **Action layer:** in which you define business rules (decisions,\n  the core of your app), meaning it can import and use the models above,\n  and use other utilities that are dependency-injected.\n- **Repository layer:** Performs database access (e. g. queries) and is\n  dependency-injected into the Action layer, making unit tests easier to write.\n- **Controller layer:** Thin glue layer, the only one that imports and uses\n  a web framework or GUI framework.\n- **Template layer:** If using a web framework.\n\nIn order to better understand why this architecture is good for medium to\nlarge applications, I encourage you to watch a couple of Uncle Bob Martin's\ntalks on this subject -- easily found on the Internet.\n\nAnyway, good architecture is about decoupling. Now I am going to tell you\nwhy you should decouple 1) your web framework and 2) your data persistence.\n\n\nAction (or Service) layer\n=========================\n\nDo not conflate the core of your app -- the business rules -- with usage\nof a web framework. You may want to switch web frameworks in the future,\nor build an entirely different UI. Therefore, business rules must not\nreside in controllers -- move your application's decisions to a higher layer!\nConversely, the layer that contains business rules (the Action layer)\nmay NOT import anything from the web framework.\n\nhttp://programmers.stackexchange.com/questions/162399/how-essential-is-it-to-make-a-service-layer\n\nYour controllers should be thin -- just get the data and call an Action.\n\nAlso do not conflate business rules with data persistence. If you keep\nI/O concerns out of your Service layer, here called Action layer,\nthen this layer becomes truly unit-testable, which in itself is reason\nenough to do this. Integrated test (meaning a test that hits a database,\neven SQLite in memory) suites easily take 5+ minutes to run for large apps,\nmaking TDD (test first) impossible. The solution is to separate decisions\nin pure functions (which do no I/O) so they can be unit-tested. This way the\nunit tests run instantaneously and you are able to do TDD.\n\nMVC or MVT is missing a Service layer between the Model and the Controller.\nThis layer, here called Action, should contain the business rules in a pure\nway, leaving UI related preoccupations to a thin controller, and storage\nconcerns to Models and the...\n\n\nRepository layer\n================\n\nMVT, as implemented by most Python web frameworks, puts a\ndata persistence layer in the center of the architecture,\nbut Uncle Bob's Clean Architecture teaches us this is wrong.\n\nIn our solution, the model entities may remain in the center and circulate\n(as data holders) through all layers -- this has always been so convenient --,\nbut the engine that stores and retrieves entities -- here called Repository\n(in SQLAlchemy it's the session and its queries) -- must be a\ndependency-injected layer.\n\nFowler and Robert C. Martin would have us put the SQLAlchemy models away too,\nso in the future you could more easily swap SQLAlchemy with something else,\nor even develop multiple storages simultaneously: SQLAlchemy, ZODB etc.,\nbut this piece of advice I am not following yet.\n\n(Even so, you might be able to pull this off right now, if you remember that\nyou don't have to use the declarative flavor of the SQLAlchemy ORM --\nyou can instead declare tables, and then classes, and then mappers that\nmap tables to the classes.  These classes need no specific base class,\nso you are free to use them as your entities.)\n\nFor now, most importantly, you are able to develop a FakeRepository\nfor fast unit testing of the Action layer -- or even a MemoryRepository\nthat stores all entities in RAM.\n\n\nSQLAlchemy strategy\n-------------------\n\nSQLAlchemy creates testability challenges since it is very hard to mock out,\nso the following rules must be followed:\n\n- The session must be present in the Repository layer, which is\n  dependency-injected into the Action layer.  This allows you to write\n  fast unit tests for the Action layer -- by injecting a\n  FakeRepository object which never touches a RDBMS.\n- The session must NOT be present in the model layer (which defines entities).\n  For now, I think relationships (e.g. ``User.addresses``) and\n  ``object_session(self)`` can continue to exist in models normally,\n  as long as you think you can implement equivalent relationships in\n  the other repository strategies with the same API.\n- The session must NOT be imported in the Action layer (which contains\n  business rules). Really, only your Repository object can use the session.\n\n\nUsing Kerno\n~~~~~~~~~~~\n\nIf you wish to adopt the Clean Architecture, then Kerno can help you.\nHere is how.\n\n\nStartup time and request time\n=============================\n\nKerno computes some things at startup and keeps the result in a \"global\" object\nwhich is an instance of the Kerno class. This instance is initialized with\nthe app's settings and utilities (strategies) are registered on it.\nThen it is used on each request to obtain globals.\nEach request consists of a call to an Action.\n\n\nComponent registration\n======================\n\nIn order to swap components between environments, Kerno could have used the\nfamous and awesome\n`Zope Component Architecture <http://zopecomponent.readthedocs.io/>`_,\nbut we are using `Reg <http://reg.readthedocs.io/>`_ instead.\nReg is very powerful and you don't need to create an interface for\neach component you want to register.\n\n\nComposable actions\n==================\n\nKerno provides a base class for actions (the service layer). If you follow\nthe pattern, then you can create actions composed of other actions, which\nmight be useful to you.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/nandoflorestan/kerno",
    "keywords": "pyramid",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kerno",
    "platform": "",
    "project_url": "https://pypi.org/project/kerno/",
    "release_url": "https://pypi.org/project/kerno/0.2.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Framework for the application service layer, approximating Uncle Bob Martin's Clean Architecture.",
    "version": "0.2.0"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "be27ee31c55d5ee7ca49a172fc1d12c6",
          "sha256": "2f8cbeb606aa2222f1e07d15d3bd6a40368503e4db99b33893511cd1d27ef642"
        },
        "downloads": -1,
        "filename": "kerno-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "be27ee31c55d5ee7ca49a172fc1d12c6",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 14946,
        "upload_time": "2017-02-08T23:37:30",
        "url": "https://files.pythonhosted.org/packages/c7/27/f26204744c0e111cd9ddf711fef59bf7858f2ba026eae8f142e8566881be/kerno-0.1.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0612b148e0a8d1f8bbc1dcee410a5a23",
          "sha256": "1fc1035c74edeb51235a06f2c0b30904412d3a1dc0deafd707e3ae5c165b5429"
        },
        "downloads": -1,
        "filename": "kerno-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0612b148e0a8d1f8bbc1dcee410a5a23",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9683,
        "upload_time": "2017-02-08T23:37:28",
        "url": "https://files.pythonhosted.org/packages/7f/94/24077049d32513a87a7e60be61cdd19189a5e85e76e0ac9cdb1b589671c5/kerno-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "32767e98bb18ca658a008ef4b0103106",
          "sha256": "de439ba41c9eccb32bbde1dfeeeb157ae128058451a6edf953114bb65a10eba1"
        },
        "downloads": -1,
        "filename": "kerno-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "32767e98bb18ca658a008ef4b0103106",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 15029,
        "upload_time": "2017-02-10T03:36:53",
        "url": "https://files.pythonhosted.org/packages/13/d7/9d3a7752e9f96eeec21c65d2eadecf3b9098347f92a6b92612ddb5d2d1f9/kerno-0.1.2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "dc02259ef7108c2d650eae426edc0859",
          "sha256": "48b5ae27458e19b0350bd40309a0f23ced6db0716a2f13b47d26e8953ec1a833"
        },
        "downloads": -1,
        "filename": "kerno-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dc02259ef7108c2d650eae426edc0859",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9735,
        "upload_time": "2017-02-10T03:36:50",
        "url": "https://files.pythonhosted.org/packages/cb/93/8fa94e63240dc8509645f7431db3f5cad7a4e073842648aae86708bf633f/kerno-0.1.2.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "74bf148bf04cb0cb5e96147a391aadb8",
          "sha256": "a7dad50d5cfd00d9e8632bdd0709db02fc92dc189b793e683c6e8e0d53911b4d"
        },
        "downloads": -1,
        "filename": "kerno-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "74bf148bf04cb0cb5e96147a391aadb8",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 16249,
        "upload_time": "2017-10-19T18:51:43",
        "url": "https://files.pythonhosted.org/packages/64/07/62f3eb102d8b519f0e6eafd42080cb1cb21685105bddf9be65259ddb4b6a/kerno-0.2.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "851a6d0a7d7e10db3ac17e5eb14aa522",
          "sha256": "8d54dc2abb4f53e757710b626fc8dab61d674769902fbfe613f61abe64acaacb"
        },
        "downloads": -1,
        "filename": "kerno-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "851a6d0a7d7e10db3ac17e5eb14aa522",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10707,
        "upload_time": "2017-10-19T18:51:41",
        "url": "https://files.pythonhosted.org/packages/74/90/142ff7f32d10152ed5aea402d8b5f04bf04e9ec1bb35e7f669c29b182104/kerno-0.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "74bf148bf04cb0cb5e96147a391aadb8",
        "sha256": "a7dad50d5cfd00d9e8632bdd0709db02fc92dc189b793e683c6e8e0d53911b4d"
      },
      "downloads": -1,
      "filename": "kerno-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "74bf148bf04cb0cb5e96147a391aadb8",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 16249,
      "upload_time": "2017-10-19T18:51:43",
      "url": "https://files.pythonhosted.org/packages/64/07/62f3eb102d8b519f0e6eafd42080cb1cb21685105bddf9be65259ddb4b6a/kerno-0.2.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "851a6d0a7d7e10db3ac17e5eb14aa522",
        "sha256": "8d54dc2abb4f53e757710b626fc8dab61d674769902fbfe613f61abe64acaacb"
      },
      "downloads": -1,
      "filename": "kerno-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "851a6d0a7d7e10db3ac17e5eb14aa522",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10707,
      "upload_time": "2017-10-19T18:51:41",
      "url": "https://files.pythonhosted.org/packages/74/90/142ff7f32d10152ed5aea402d8b5f04bf04e9ec1bb35e7f669c29b182104/kerno-0.2.0.tar.gz"
    }
  ]
}