{
  "info": {
    "author": "Andrii Sydorchuk, Voxel8 / Fabien Ancelin",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Other Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: C++",
      "Programming Language :: Cython",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Scientific/Engineering :: GIS",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "==========\r\n pyvoronoi\r\n==========\r\n\r\nA wrapper for Boost's Voronoi diagram library\r\n\r\nInstall\r\n=======\r\n\r\nDependencies\r\n------------\r\n\r\nCython dependency is optional. Cpp sources generated with Cython are available in releases.\r\n\r\nNote on using the setup.py:\r\n\r\nsetup.py operates in 2 modes that are based on the presence of the dev file in the root of the project.\r\n\r\n* When dev is **present**, Cython will be used to compile the .pyx sources. This is the development mode (as you get it in the git repository).\r\n\r\n* When dev is **absent**, C/C++ compiler will be used to compile the .cpp sources (that were prepared in in the development mode). This is the distribution mode (as you get it on PyPI).\r\n\r\nThis way the package can be used without or with an incompatible version of Cython.\r\n\r\nThe idea comes from Matt Shannon's bandmat library.\r\n\r\nFrom PyPI\r\n---------\r\n\r\nCython not required.\r\n\r\n``pip install pyvoronoi``\r\n\r\nFrom source\r\n-----------\r\n\r\nCython required.\r\n\r\nClone the repository:\r\n\r\n``git clone git@github.com:Voxel8/pyvoronoi.git``\r\n\r\nInstall:\r\n\r\n``python setup.py install``\r\n\r\nAfter every modification of .pyx files compile with Cython:\r\n\r\n``python setup.py build_ext --inplace``\r\n\r\nUsing\r\n=====\r\n\r\nCreate a new instance, passing the scaling factor into the constructor:\r\n```\r\nimport pyvoronoi\r\npv = pyvoronoi.Pyvoronoi(10)\r\n```\r\n\r\nSince the voronoi library uses integer representation for points, the scaling factor chosen must be high enough\r\nto avoid roundoff error when converting from point coordinates to integers.\r\n\r\nAdd points and segments:\r\n\r\n.. code:: python\r\n\r\n\tpv.AddPoint([0, 0])\r\n\tpv.AddSegment([[1,5],[2,2]])\r\n\r\nCall ``Construct()`` and get the edges and vertices:\r\n\r\n.. code:: python\r\n\r\n    pv.Construct()\r\n    edges = pv.GetEdges()\r\n    vertices = pv.GetVertices()\r\n    cells = pv.GetCells()\r\n\r\nNote that vertices, edges, and cells, can be accessed individually. The methods above are just convenience wrappers around\r\nthe following functions:\r\n\r\n* GetVertex\r\n\r\n* GetEdge\r\n\r\n* Get Cell\r\n\r\n.. code:: python\r\n\r\n    def GetVertices(self):\r\n        count = self.CountVertices()\r\n        output = []\r\n        for index in  range(count):\r\n            output.append(self.GetVertex(index))\r\n        return output\r\n\r\n.. code:: python\r\n\r\n    def GetEdges(self):\r\n        count = self.CountEdges()\r\n        output = []\r\n        for index in range(count):\r\n            output.append(self.GetEdge(index))\r\n        return output\r\n\r\n.. code:: python\r\n\r\n    def GetCells(self):\r\n        count = self.CountCells()\r\n        output = []\r\n        for index in range(count):\r\n            output.append(self.GetCell(index))\r\n        return output\r\n\r\nIf you are running python 2.x, you might want to write your own wrappers using xrange. This will be more efficient.\r\n\r\nEdges have the following properties:\r\n\r\n* ``start, end`` contain the indices of the start and end vertices or ``-1`` if the edge is infinite at that end.\r\n* ``is_primary`` is true if the edge is not coincident with any of the source inputs.\r\n* ``is_linear`` is true if the edge is linear (not curved).\r\n* ``cell`` is the identifier of the cell this segment is part of.\r\n* ``twin`` is the identifier of the twin segment as defined in the boost voronoi API.\r\n\r\nCells have the following properties:\r\n\r\n* ``cell_identifier`` is the index of the cell.\r\n* ``site`` is the index of the site which generated this cell (same as site1, site2 on the edges).\r\n* ``contains_point`` is true if the site was generated by a point.\r\n* ``contains_segment`` is true if the site was generated by a segment.\r\n* ``is_open`` is true if any of the cell's edges is infinite.\r\n* ``is_degenerate`` is true if the cell doesn't have an incident edge. Can happen if a few input segments share a common endpoint.\r\n* ``vertices`` contains indices into the vertex array.\r\n* ``edges`` contains indices into the edge array.\r\n\r\n.. code:: python\r\n\r\n    pv = pyvoronoi.Pyvoronoi(100)\r\n    pv.AddSegment([[0.1,0.8],[0.3,0.6]])\r\n    pv.AddSegment([[0.3,0.6],[0.4,0.6]])\r\n    pv.AddSegment([[0.4,0.6],[0.4,0.5]])\r\n    pv.AddSegment([[0.4,0.6],[0.4,0.7]])\r\n    pv.AddSegment([[0.4,0.7],[0.5,0.8]])\r\n    pv.AddSegment([[0.4,0.7],[0.5,0.6]])\r\n    pv.AddSegment([[0.5,0.6],[0.7,0.7]])\r\n\r\n    pv.Construct()\r\n    edges = pv.GetEdges()\r\n    vertices = pv.GetVertices()\r\n    cells = pv.GetCells()\r\n    print(\"Cell Count: {0}\".format(len(cells)))\r\n    for c in cells:\r\n        print(\"Cell contains point: {0}. Contains segment: {1}. Is open: {2}, Site Index: {3}\".format(c.contains_point, c.contains_segment, c.is_open, c.site))\r\n        print(\",\".join(map(str,c.vertices)))\r\n        for sIndex in c.edges:\r\n            print(\"Start Index: {0}, End Index = {1}\".format(edges[sIndex].start, edges[sIndex].end))\r\n\r\n\r\nSome output edges returned by the boost voronoi API are suposed to be curved. In the C++ API, it is up to you to code it. Luckily, you can do it in python using the following the function DiscretizeCurvedEdge.\r\nThe sample below shows you how to do that:\r\n\r\n.. code-block:: python\r\n\r\n\tfor cIndex in range(len(cells)):\r\n\t\tcell = cells[cIndex]\r\n\t\tif cell.is_open == False:\r\n\t\t\tfor i in range(len(cell.edges)):\r\n\t\t\t\te = edges[cell.edges[i]]\r\n\t\t\t\tstartVertex = vertices[e.start]\r\n\t\t\t\tendVertex = vertices[e.end]\r\n\r\n\t\t\t\tmax_distance  = distance([startVertex.X, startVertex.Y], [endVertex.X, endVertex.Y]) / 10\r\n\t\t\t\tif startVertex != -1 and endVertex != -1:\r\n\t\t\t\t\tif(e.is_linear == True):\r\n\t\t\t\t\t\tarray = [[startVertex.X, startVertex.Y],[endVertex.X, endVertex.Y]]\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tpoints = pv.DiscretizeCurvedEdge(cell.edges[i], max_distance)\r\n\t\t\t\t\t\tfor p in points:\r\n\t\t\t\t\t\t\tprint \"{0},{1}\".format(p[0], p[1])\r\n\r\nThe curve interpolation code can return 2 exceptions.\r\n*FocusOnDirectixException: this happens when the input point is on the segment side. In that cases, it makes no sense to interpolate a parabola between those two geometries since a parabola equation is supposed to find an equidistant point between the two geometries.\r\n*UnsolvableParabolaEquation: there are cases where the point returned by boost does not fit with the parabola equation (for a same position on the x-axis, we get 2 different points, both equidistant). Understanding this issue is still under investigation. It is possible to mitigate this issue by setting an optional 3rd parameter of the function DiscretizeCurvedEdge). A higher value means more tolerance to this exception. The recommended value would be 1 / Scaling Factor.\r\n\r\nLicense\r\n=======\r\n\r\n-  Pyvoronoi is available under `MIT\r\n   license <http://opensource.org/licenses/MIT>`__.\r\n-  The core Voronoi library is available under `Boost Software\r\n   License <http://www.boost.org/LICENSE_1_0.txt>`__. Freeware for both\r\n   open source and commercial applications.\r\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Voxel8/pyvoronoi",
    "keywords": "voronoi,Boost,polygon",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pyvoronoi",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pyvoronoi/",
    "release_url": "https://pypi.org/project/pyvoronoi/1.0.4/",
    "requires_python": null,
    "summary": "Cython wrapper for the Boost Voronoi library (version 1.59.0)",
    "version": "1.0.4"
  },
  "releases": {
    "0.0.1": [],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "892e80a63667ae78a67954644c3cfb9c",
          "sha256": "f93d61dcd6a66578d37d1378641ce13c36461cd06d88c1207f56283cf004e84a"
        },
        "downloads": 567,
        "filename": "pyvoronoi-0.0.2.zip",
        "has_sig": false,
        "md5_digest": "892e80a63667ae78a67954644c3cfb9c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 96114,
        "upload_time": "2015-10-06T19:04:22",
        "url": "https://files.pythonhosted.org/packages/43/9f/95b5ae18a254546fd07b22deffe9241a8b022fa5be2e2760159542c2ff65/pyvoronoi-0.0.2.zip"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e81cf22af96aa89f3327d11146d9a6bc",
          "sha256": "dde80d3df036604c09231683a08c61d28b6caf63ecbf5cf5b6e0e7a653d4fad4"
        },
        "downloads": 560,
        "filename": "pyvoronoi-0.0.3.zip",
        "has_sig": false,
        "md5_digest": "e81cf22af96aa89f3327d11146d9a6bc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 110171,
        "upload_time": "2015-10-06T20:19:54",
        "url": "https://files.pythonhosted.org/packages/11/c4/3986d4c03ed7c8606bd5dc4adc1536a0721d052946667de85bbbf7185149/pyvoronoi-0.0.3.zip"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9ed4b3f5446b0f73b4b5f1a29a29bbb0",
          "sha256": "76c159765217d12b43118065b4d9e2fac026d80749e96a6c5d2e0609caac7231"
        },
        "downloads": 565,
        "filename": "pyvoronoi-0.0.4.zip",
        "has_sig": false,
        "md5_digest": "9ed4b3f5446b0f73b4b5f1a29a29bbb0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 111560,
        "upload_time": "2015-10-06T20:21:02",
        "url": "https://files.pythonhosted.org/packages/1d/9b/5d03ed3a5d439fc9253b8253ac1266a9b728b6d8607025e8d81dfcfc6050/pyvoronoi-0.0.4.zip"
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4e5931b12792115daacdcb0878ebe0f9",
          "sha256": "c54dd00ddeffbc93c3a789f24fb86a37b0b3fa819c617f34c99078e7b7cd15a2"
        },
        "downloads": 1006,
        "filename": "pyvoronoi-0.0.5.zip",
        "has_sig": false,
        "md5_digest": "4e5931b12792115daacdcb0878ebe0f9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 111595,
        "upload_time": "2015-10-06T20:43:16",
        "url": "https://files.pythonhosted.org/packages/d9/98/05309f6bfdc95b5acb26689bcf89921b7b0cfdc847eb4a5baa69dd0f5301/pyvoronoi-0.0.5.zip"
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bfd092abc4178fe4aab6fcac0adc9de9",
          "sha256": "fbcb8f55cb0ffb5143e5f317e26ab448a0ce2e579c7681339bef841cf1f8e290"
        },
        "downloads": 751,
        "filename": "pyvoronoi-0.0.6.zip",
        "has_sig": false,
        "md5_digest": "bfd092abc4178fe4aab6fcac0adc9de9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 111730,
        "upload_time": "2015-10-07T21:54:58",
        "url": "https://files.pythonhosted.org/packages/72/e2/ef3b83aa767093ee39ead8f7e76af953a0f31795e17d040071c14b984e8b/pyvoronoi-0.0.6.zip"
      }
    ],
    "0.0.7": [],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "48b70c7f196579423fed1ec252f3fd39",
          "sha256": "5b5350c1ca797ace25b9e64dae5963ef8fe9f803d02d1fc62ec62db8c2506979"
        },
        "downloads": 126,
        "filename": "pyvoronoi-0.0.8.zip",
        "has_sig": false,
        "md5_digest": "48b70c7f196579423fed1ec252f3fd39",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 120095,
        "upload_time": "2016-02-15T20:47:03",
        "url": "https://files.pythonhosted.org/packages/7e/6d/e1ed299fd745d7794c1b3e8ef9e11d94ccfa9e9b400ca52a0aa417271483/pyvoronoi-0.0.8.zip"
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1f8b9ab0df755a71b0c8eca13b80fde9",
          "sha256": "339eae0a067bdf4ad7ce93eabcf46a576e94667710e94fd1a234603bd9ad8251"
        },
        "downloads": 150,
        "filename": "pyvoronoi-0.0.9.zip",
        "has_sig": false,
        "md5_digest": "1f8b9ab0df755a71b0c8eca13b80fde9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 135346,
        "upload_time": "2016-04-14T14:53:17",
        "url": "https://files.pythonhosted.org/packages/f2/ce/967e0afc87d15d2e86a83d89096bbdd85a753d45d920ffc62b9d281399cc/pyvoronoi-0.0.9.zip"
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7587c83a809a727672422a5c4cfcca10",
          "sha256": "e647ea37e8c7de95a9111e8a559ba17f7e74a85df4a88c3645ae01fb6c19ad94"
        },
        "downloads": 0,
        "filename": "pyvoronoi-0.1.0-cp27-none-win32.whl",
        "has_sig": false,
        "md5_digest": "7587c83a809a727672422a5c4cfcca10",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 86880,
        "upload_time": "2017-04-30T00:58:46",
        "url": "https://files.pythonhosted.org/packages/10/af/7b41345210c0fdda6f207f6fc366a371ffccf39b8f8facf56e6e5755fce6/pyvoronoi-0.1.0-cp27-none-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f528e4dfe310867b530dd135e6ad84b1",
          "sha256": "818cc702f33c19bdf28346d3c3f98fca9a6e84cbb9fa9765ef1fbd431209a2ab"
        },
        "downloads": 0,
        "filename": "pyvoronoi-0.1.0.zip",
        "has_sig": false,
        "md5_digest": "f528e4dfe310867b530dd135e6ad84b1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154571,
        "upload_time": "2017-04-30T00:58:41",
        "url": "https://files.pythonhosted.org/packages/70/cf/52df3bbf519c0c0e1d387a65b5f86ef7421b096f49f1ffe3fa5ce7004f4f/pyvoronoi-0.1.0.zip"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1b825689b603b2e8de05b4866d8004e3",
          "sha256": "d25f69bd020002dacfc404350cd6acf33b152aacb7dca65f66fbd455393295ee"
        },
        "downloads": 0,
        "filename": "pyvoronoi-0.1.1-cp27-none-win32.whl",
        "has_sig": false,
        "md5_digest": "1b825689b603b2e8de05b4866d8004e3",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 86907,
        "upload_time": "2017-04-30T17:02:48",
        "url": "https://files.pythonhosted.org/packages/03/3b/4b28e9e3459a74156bff3734beafa26c50bb63f488464d378c64c36ddc97/pyvoronoi-0.1.1-cp27-none-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "142bebeef10392f29ae2ac219510c1fc",
          "sha256": "bc2c02c87ac3bcd2acd881a0c5685467fd04fd322fefcad91cce09bb2acf4bfd"
        },
        "downloads": 0,
        "filename": "pyvoronoi-0.1.1.zip",
        "has_sig": false,
        "md5_digest": "142bebeef10392f29ae2ac219510c1fc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154598,
        "upload_time": "2017-04-30T17:02:43",
        "url": "https://files.pythonhosted.org/packages/aa/cb/f68e7f7bc8325eb1625631f1921663f42157a4a2d7af1446815eaddfc996/pyvoronoi-0.1.1.zip"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "aade5d315ab99f8356d17f7d615cbaa1",
          "sha256": "225f48b4093651bdf645f00a4acb5b2d04a5111091c345a00899210ff84f109e"
        },
        "downloads": 0,
        "filename": "pyvoronoi-1.0.0-cp27-none-win32.whl",
        "has_sig": false,
        "md5_digest": "aade5d315ab99f8356d17f7d615cbaa1",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 86670,
        "upload_time": "2017-05-02T02:45:45",
        "url": "https://files.pythonhosted.org/packages/1d/f5/870a1160221a82f7b1a324d44ba42faa51ae760f96c5c4ab65817c67c87c/pyvoronoi-1.0.0-cp27-none-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d636cd058f49bdc9b27fb7d438df272e",
          "sha256": "6cddb14f29d89355a6829fbc542f3017cd954d7f1825aaebfa0a6e506951cba8"
        },
        "downloads": 0,
        "filename": "pyvoronoi-1.0.0.zip",
        "has_sig": false,
        "md5_digest": "d636cd058f49bdc9b27fb7d438df272e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154396,
        "upload_time": "2017-05-02T02:45:26",
        "url": "https://files.pythonhosted.org/packages/2c/81/b7a6fe5e5ff5955d71de3615da099a8c658b67693f95b59efb5b886d3599/pyvoronoi-1.0.0.zip"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b51b952c6cd6d8b6ba53bdce0dacf04e",
          "sha256": "8a52db08264263472e602dda7a5f33fa60c248644206fd54d4e324cb381e3027"
        },
        "downloads": 0,
        "filename": "pyvoronoi-1.0.3.zip",
        "has_sig": false,
        "md5_digest": "b51b952c6cd6d8b6ba53bdce0dacf04e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 152772,
        "upload_time": "2017-05-10T01:08:58",
        "url": "https://files.pythonhosted.org/packages/d3/2a/a376d4f65a8e1957c9518d5a45f1ec6b7068e983f45436c2c94aad702864/pyvoronoi-1.0.3.zip"
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f3837b07ba9ae17bf10461c3654f5dec",
          "sha256": "3e5e92d67c2624893fdabadfedd384881d2ce79edc8bc66273fca879a275de03"
        },
        "downloads": 0,
        "filename": "pyvoronoi-1.0.4.zip",
        "has_sig": false,
        "md5_digest": "f3837b07ba9ae17bf10461c3654f5dec",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 152719,
        "upload_time": "2017-05-10T23:42:28",
        "url": "https://files.pythonhosted.org/packages/3a/6c/bd670acce1f6e906ef6f62787815e6de6098ebdf0c6d46d4cb0b8cea024e/pyvoronoi-1.0.4.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f3837b07ba9ae17bf10461c3654f5dec",
        "sha256": "3e5e92d67c2624893fdabadfedd384881d2ce79edc8bc66273fca879a275de03"
      },
      "downloads": 0,
      "filename": "pyvoronoi-1.0.4.zip",
      "has_sig": false,
      "md5_digest": "f3837b07ba9ae17bf10461c3654f5dec",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 152719,
      "upload_time": "2017-05-10T23:42:28",
      "url": "https://files.pythonhosted.org/packages/3a/6c/bd670acce1f6e906ef6f62787815e6de6098ebdf0c6d46d4cb0b8cea024e/pyvoronoi-1.0.4.zip"
    }
  ]
}