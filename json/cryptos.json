{
  "info": {
    "author": "Paul Martin",
    "author_email": "paulmartinforwork@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Security :: Cryptography"
    ],
    "description": "# Pycryptotools, Python library for Crypto coins signatures and transactions\n\nThis is a fork of Vitalik Buterin's original [pybitcointools](https://github.com/vbuterin/pybitcointools) library.\n\nInstallation:\n\n```bash\npip install cryptos\n```\n\nLibrary now supports making and pushing raw transactions for:\n\n* Bitcoin mainnet\n* Bitcoin testnet \n* Bitcoin Cash mainnet** (with replay protection)\n* Bitcoin Cash testnet (with replay protection)\n* Litecoin mainnet**\n* Litecoin testnet\n* Dash mainnet**\n* Dash testnet\n* Dogecoin mainnet**\n\nSegregrated Witness transactions also supported for:\n* Bitcoin mainnet **\n* Bitcoin testnet\n* Litecoin mainnet **\n* Litecoin testnet **\n\n** Transaction broadcast not tested\n\nAim is to provide a simple, class-based API makes switching between different coins and mainnet and testnet, and adding new coins, all very easy.\n\nLonger-term roadmap:\n* Read the docs page\n* E-commerce tools (exchange rates, short-time invoices)\n* Easily gather unspents and broadcast transactions based on a mnemonic\n* Desktop GUI for easy creation, signing and broadcasting of raw transactions\n* Seed-based multi-crypto wallet\n\nContributions:\n* Needs to be tested: Live network transactions for Bitcoin Cash, Litecoin, Dash and Dogecoin, Segwit transactions for Litecoin.\n* Anyone know a working Dogecoin testnet explorer?\n\n### Advantages:\n\n* Methods have a simple interface, inputting and outputting in standard formats\n* Classes for different coins with a common interface\n* Many functions can be taken out and used individually\n* Supports binary, hex and base58\n* Transaction deserialization format almost compatible with BitcoinJS\n* Electrum and BIP0032 support\n* Make and publish a transaction all in a single command line instruction with full control\n* Includes non-bitcoin-specific conversion and JSON utilities\n\n### Disadvantages:\n\n* Not a full node, has no idea what blocks are\n* Relies on centralized explorers for blockchain operations\n\n### Example usage (best way to learn :) ):\n\n    > from cryptos import *\n    > c = Bitcoin(testnet=True)\n    > priv = sha256('a big long brainwallet password')\n    > priv\n    '89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678'\n    > pub = c.privtopub(priv)\n    > pub\n    '041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f'\n    > addr = c.pubtoaddr(pub)\n    > addr\n    'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\n    > inputs = c.unspent(addr)\n    > inputs\n    [{'output': '3be10a0aaff108766371fd4f4efeabc5b848c61d4aac60db6001464879f07508:0', 'value': 180000000, 'time': 'Sat Jan  6 22:43:15 2018'}, {'output': '51ce9804e1a4fd3067416eb5052b9930fed7fdd9857067b47d935d69f41faa38:0', 'value': 90000000, 'time': 'Sat Jan  6 22:43:15 2018'}]\n    > outs = [{'value': 269845600, 'address': '2N8hwP1WmJrFF5QWABn38y63uYLhnJYJYTF'}, {'value': 100000, 'address': 'mrvHv6ggk5gFMatuJtBKAzktTU1N3MYdu2'}]\n    > tx = c.mktx(inputs,outs)\n    > tx\n    {'locktime': 0, 'version': 1, 'ins': [{'outpoint': {'hash': '3be10a0aaff108766371fd4f4efeabc5b848c61d4aac60db6001464879f07508', 'index': 0}, 'amount': 180000000, 'script': '483045022100fccd16f619c5f8b8198f5a00f557f6542afaae10b2992733963c5b9c4042544c022041521e7ab2f4b58856e8554c651664af92f6abd58328c41bc652aea460a9a6a30141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}, {'outpoint': {'hash': '51ce9804e1a4fd3067416eb5052b9930fed7fdd9857067b47d935d69f41faa38', 'index': 0}, 'amount': 90000000, 'script': '483045022100a9f056be75da4167c2cae9f037e04f6efd20caf97e05052406c127d72e7f236c02206638c10ad6975b44c26633e7c40547405dd4e6184fa3afd0ec98260369fadb0d0141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}], 'outs': [{'script': 'a914a9974100aeee974a20cda9a2f545704a0ab54fdc87', 'value': 269845600}, {'script': '76a9147d13547544ecc1f28eda0c0766ef4eb214de104588ac', 'value': 100000}]}\n    > tx2 = c.sign(tx,0,priv)\n    > tx2\n    {'locktime': 0, 'version': 1, 'ins': [{'outpoint': {'hash': '3be10a0aaff108766371fd4f4efeabc5b848c61d4aac60db6001464879f07508', 'index': 0}, 'amount': 180000000, 'script': '483045022100fccd16f619c5f8b8198f5a00f557f6542afaae10b2992733963c5b9c4042544c022041521e7ab2f4b58856e8554c651664af92f6abd58328c41bc652aea460a9a6a30141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}, {'outpoint': {'hash': '51ce9804e1a4fd3067416eb5052b9930fed7fdd9857067b47d935d69f41faa38', 'index': 0}, 'amount': 90000000, 'script': '483045022100a9f056be75da4167c2cae9f037e04f6efd20caf97e05052406c127d72e7f236c02206638c10ad6975b44c26633e7c40547405dd4e6184fa3afd0ec98260369fadb0d0141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}], 'outs': [{'script': 'a914a9974100aeee974a20cda9a2f545704a0ab54fdc87', 'value': 269845600}, {'script': '76a9147d13547544ecc1f28eda0c0766ef4eb214de104588ac', 'value': 100000}]}\n    > tx3 = c.sign(tx2,1,priv)\n    > tx3\n    {'locktime': 0, 'version': 1, 'ins': [{'outpoint': {'hash': '3be10a0aaff108766371fd4f4efeabc5b848c61d4aac60db6001464879f07508', 'index': 0}, 'amount': 180000000, 'script': '483045022100fccd16f619c5f8b8198f5a00f557f6542afaae10b2992733963c5b9c4042544c022041521e7ab2f4b58856e8554c651664af92f6abd58328c41bc652aea460a9a6a30141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}, {'outpoint': {'hash': '51ce9804e1a4fd3067416eb5052b9930fed7fdd9857067b47d935d69f41faa38', 'index': 0}, 'amount': 90000000, 'script': '483045022100a9f056be75da4167c2cae9f037e04f6efd20caf97e05052406c127d72e7f236c02206638c10ad6975b44c26633e7c40547405dd4e6184fa3afd0ec98260369fadb0d0141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764f', 'sequence': 4294967295}], 'outs': [{'script': 'a914a9974100aeee974a20cda9a2f545704a0ab54fdc87', 'value': 269845600}, {'script': '76a9147d13547544ecc1f28eda0c0766ef4eb214de104588ac', 'value': 100000}]}\n    > tx4 = serialize(tx)\n    > tx4\n    '01000000020875f07948460160db60ac4a1dc648b8c5abfe4e4ffd71637608f1af0a0ae13b000000008b483045022100fccd16f619c5f8b8198f5a00f557f6542afaae10b2992733963c5b9c4042544c022041521e7ab2f4b58856e8554c651664af92f6abd58328c41bc652aea460a9a6a30141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764fffffffff38aa1ff4695d937db4677085d9fdd7fe30992b05b56e416730fda4e10498ce51000000008b483045022100a9f056be75da4167c2cae9f037e04f6efd20caf97e05052406c127d72e7f236c02206638c10ad6975b44c26633e7c40547405dd4e6184fa3afd0ec98260369fadb0d0141041f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc724ab2737afd66e4aacdc0e4f48550cd783c1a73edb3dbd0750e1bd0cb03764fffffffff02608415100000000017a914a9974100aeee974a20cda9a2f545704a0ab54fdc87a0860100000000001976a9147d13547544ecc1f28eda0c0766ef4eb214de104588ac00000000'\n    > c.pushtx(tx4)\n    {'status': 'success', 'data': {'network': 'BTCTEST', 'txid': '00af7b794355aa4ea5851a792713934b524b820cf7f20e2a0e01ab61910b5299'}}\n\n### Other coins\n\n    > from cryptos import *\n    > priv = sha256('a big long brainwallet password')\n    > b = Bitcoin()\n    > b.privtoaddr(priv)\n    '1GnX7YYimkWPzkPoHYqbJ4waxG6MN2cdSg'\n    > b = Bitcoin(testnet=True)\n    > b.privtoaddr(priv)\n    'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\n    > l = Litecoin()\n    > l.privtoaddr(priv)\n    'Lb1UNkrYrQkTFZ5xTgpta61MAUTdUq7iJ1'\n    > l = Litecoin(testnet=True)\n    > l.privtoaddr(priv)\n    'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\n    > c = BitcoinCash()\n    > c.privtoaddr(priv)\n    '1GnX7YYimkWPzkPoHYqbJ4waxG6MN2cdSg'\n    > c = BitcoinCash(testnet=True)\n    > c.privtoaddr(priv)\n    'mwJUQbdhamwemrsR17oy7z9upFh4JtNxm1'\n    > d = Dash()\n    > d.privtoaddr(priv)\n    'XrUMwoCcjTiz9gzP9S9p9bdNnbg3MvAB1F'\n    > d = Dash(testnet=True)\n    > d.privtoaddr(priv)\n    'yc6xxkH4B1P4VRuviHUDBd3j4tAQpy4fzn'\n    d = Doge()\n    d.privtoaddr(priv)\n    'DLvceoVN5AQgXkaQ28q9qq7BqPpefFRp4E'\n    \n### Segwit\nTo create a segwit transaction, generate a pay to script hash address and mark all the Segwit UTXOs with segwit=True:\n\n    > from cryptos import *\n    > c = Bitcoin(testnet=True)\n    > priv = sha256('a big long brainwallet password')\n    > priv\n    '89d8d898b95addf569b458fbbd25620e9c9b19c9f730d5d60102abbabcb72678'\n    > addr = c.privtop2sh(priv)\n    > addr\n    '2Mtj1R5qSfGowwJkJf7CYufFVNk5BRyAYZh'\n    > inputs = c.unspent(addr)\n    > inputs\n    [{'output': '7013f4ea3b798f157e8cc7249bdf82fa1b1d264b1446894bd827b259e9b8c29a:0', 'value': 180000000, 'time': 'Mon Jan  8 00:03:40 2018'}]\n    > inputs[0]['segwit']=True\n    > outs = [{'value': 179845600, 'address': '2N8hwP1WmJrFF5QWABn38y63uYLhnJYJYTF'}, {'value': 100000, 'address': '2Mtj1R5qSfGowwJkJf7CYufFVNk5BRyAYZh'}]\n    > tx = c.mktx(inputs,outs)\n    > tx\n    {'locktime': 0, 'version': 1, 'ins': [{'script': '', 'sequence': 4294967295, 'outpoint': {'hash': '7013f4ea3b798f157e8cc7249bdf82fa1b1d264b1446894bd827b259e9b8c29a', 'index': 0}, 'amount': 180000000, 'segwit': True}], 'outs': [{'script': 'a914a9974100aeee974a20cda9a2f545704a0ab54fdc87', 'value': 179845600}, {'script': 'a9141039471d8d44f3693cd34d1b9d69fd957799cf3087', 'value': 100000}], 'marker': 0, 'flag': 1, 'witness': []}\n    > tx2 = c.sign(tx,0,priv)\n    > tx2\n    {'locktime': 0, 'version': 1, 'ins': [{'script': '160014804aff26594cc36c0ac89e95895ab9bdd0c540ef', 'sequence': 4294967295, 'outpoint': {'hash': '7013f4ea3b798f157e8cc7249bdf82fa1b1d264b1446894bd827b259e9b8c29a', 'index': 0}, 'amount': 180000000, 'segwit': True}], 'outs': [{'script': 'a914a9974100aeee974a20cda9a2f545704a0ab54fdc87', 'value': 179845600}, {'script': 'a9141039471d8d44f3693cd34d1b9d69fd957799cf3087', 'value': 100000}], 'marker': 0, 'flag': 1, 'witness': [{'number': 2, 'scriptCode': '473044022023613b33cb905557d3ed9c98152986646d51cc74cb84c7ea9b92c38a823b2e7002207209d3902126dd0ce6a66c9ea565441d152a522b4ea4d2de3e234027aff295030121031f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc'}]}\n    > tx3 = serialize(tx)\n    > tx3\n    '010000000001019ac2b8e959b227d84b8946144b261d1bfa82df9b24c78c7e158f793beaf413700000000017160014804aff26594cc36c0ac89e95895ab9bdd0c540efffffffff02e039b80a0000000017a914a9974100aeee974a20cda9a2f545704a0ab54fdc87a08601000000000017a9141039471d8d44f3693cd34d1b9d69fd957799cf308702473044022023613b33cb905557d3ed9c98152986646d51cc74cb84c7ea9b92c38a823b2e7002207209d3902126dd0ce6a66c9ea565441d152a522b4ea4d2de3e234027aff295030121031f763d81010db8ba3026fef4ac3dc1ad7ccc2543148041c61a29e883ee4499dc00000000'\n    > c.pushtx(tx3)\n    {'status': 'success', 'data': {'network': 'BTCTEST', 'txid': '787b0e861fe689ee9ff34665144ddcf4716ccb46c1f615c2259d50a9fe8222ce'}}\n\nIt's also possible to mix segwit inputs with non-segwit inputs. Only one input needs to be marked as segwit to create a segwit transaction.\n\n### The cryptotool command line interface:\n\n    cryptotool random_electrum_seed\n    484ccb566edb66c65dd0fd2e4d90ef65\n\n    cryptotool electrum_privkey 484ccb566edb66c65dd0fd2e4d90ef65 0 0\n    593240c2205e7b7b5d7c13393b7c9553497854b75c7470b76aeca50cd4a894d7\n\n    cryptotool electrum_mpk 484ccb566edb66c65dd0fd2e4d90ef65\n    484e42865b8e9a6ea8262fd1cde666b557393258ed598d842e563ad9e5e6c70a97e387eefdef123c1b8b4eb21fe210c6216ad7cc1e4186fbbba70f0e2c062c25\n\n    cryptotool bip32_master_key 21456t243rhgtucyadh3wgyrcubw3grydfbng\n    xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT\n\n    cryptotool bip32_ckd xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT 0\n    xprv9vfzYrpwo7QHFdtrcvsSCTrBESFPUf1g7NRvayy1QkEfUekpDKLfqvHjgypF5w3nAvnwPjtQUNkyywWNkLbiUS95khfHCzJXFkLEdwRepbw \n\n    cryptotool bip32_privtopub xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT\n    xpub661MyMwAqRbcFGfHrgLHpC5R4odnyasAZdefbDkHBcWarJcXh6SzTzbUkWuhnP142ZFdKdAJSuTSaiGDYjvm7bCLmA8DZqksYjJbYmcgrYF\n\nThe -s option lets you read arguments from the command line\n\n    cryptotool sha256 'some big long brainwallet password' | pybtctool -s privtoaddr | pybtctool -s history\n    [{'output': u'97f7c7d8ac85e40c255f8a763b6cd9a68f3a94d2e93e8bfa08f977b92e55465e:0', 'value': 50000, 'address': u'1CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6'}, {'output': u'4cc806bb04f730c445c60b3e0f4f44b54769a1c196ca37d8d4002135e4abd171:1', 'value': 50000, 'address': u'1CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6'}]\n    cryptotool random_electrum_seed | pybtctool -s electrum_privkey 0 0\n    593240c2205e7b7b5d7c13393b7c9553497854b75c7470b76aeca50cd4a894d7\n\nThe -b option lets you read binary data as an argument\n\n    cryptotool sha256 123 | pybtctool -s changebase 16 256 | pybtctool -b changebase 256 16\n    a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae30a\n\nThe -j option lets you read json from the command line (-J to split a json list into multiple arguments)\n\n    cryptotool unspent 1FxkfJQLJTXpW6QmxGT6oF43ZH959ns8Cq | pybtctool -j select 200000001 | pybtctool -j mksend 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P:20000 1FxkfJQLJTXpW6QmxGT6oF43ZH959ns8Cq 1000 | pybtctool -s signall 805cd74ca322633372b9bfb857f3be41db0b8de43a3c44353b238c0acff9d523\n    0100000003d5001aae8358ae98cb02c1b6f9859dc1ac3dbc1e9cc88632afeb7b7e3c510a49000000008b4830450221009e03bb6122437767e2ca785535824f4ed13d2ebbb9fa4f9becc6d6f4e1e217dc022064577353c08d8d974250143d920d3b963b463e43bbb90f3371060645c49266b90141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff1529d655dff6a0f6c9815ee835312fb3ca4df622fde21b6b9097666e9284087d010000008a473044022035dd67d18b575ebd339d05ca6ffa1d27d7549bd993aeaf430985795459fc139402201aaa162cc50181cee493870c9479b1148243a33923cb77be44a73ca554a4e5d60141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff23d5f9cf0a8c233b35443c3ae48d0bdb41bef357b8bfb972336322a34cd75c80010000008b483045022014daa5c5bbe9b3e5f2539a5cd8e22ce55bc84788f946c5b3643ecac85b4591a9022100a4062074a1df3fa0aea5ef67368d0b1f0eaac520bee6e417c682d83cd04330450141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff02204e0000000000001976a914946cb2e08075bcbaf157e47bcb67eb2b2339d24288ac5b3c4411000000001976a914a41d15ae657ad3bfd0846771a34d7584c37d54a288ac00000000\n\nFun stuff with json:\n\n    cryptotool unspent 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P | pybtctool -j multiaccess value | pybtctool -j sum\n    625216206372\n\n    cryptotool unspent 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P | pybtctool -j count\n    6198\n\nTo use the testnet you can add --testnet:\n\n    cryptotool unspent 2N8hwP1WmJrFF5QWABn38y63uYLhnJYJYTF --testnet\n    [{\"output\": \"209e5caf8997a3caed4dce0399804ad7fa50c70f866bb7118a42c79de1b76efc:1\", \"value\": 120000000, \"time\": \"Thu Dec 21 08:33:05 2017\"}, {\"output\": \"79f38b3e730eea0e44b5a2e645f0979\n    2d9f8732a823079ba4778110657cbe7b2:0\", \"value\": 100000000, \"time\": \"Thu Dec 21 09:31:55 2017\"}, {\"output\": \"99d88509d5f0e298bdb6883161c64c7f54444519ce28a0ef3d5942ff4ff7a924:0\", \"value\n    \": 82211600, \"time\": \"Thu Dec 21 09:52:00 2017\"}, {\"output\": \"80acca12cf4b3b562b583f1dc7e43fff936e432a7ed4b16ac3cd10024820d027:0\", \"value\": 192470000, \"time\": \"Thu Dec 21 09:52:00 20\n    17\"}, {\"output\": \"3e5a3fa342c767d524b653aec51f3efe2122644c57340fbf5f79c75d1911ad35:0\", \"value\": 10000000, \"time\": \"Thu Dec 21 10:18:48 2017\"}]\n\nOr the --coin option to use a coin other than bitcoin (bch, btc, dash, doge or ltc)\n\n    cryptotool unspent LV3VLesnCi3p3zf26Y86kH2FZxfQq2RjrA --coin ltc\n    [{\"output\": \"42bfe7376410696e260b2198f484f5df4aa6c744465940f9922ac9f8589670a4:0\", \"value\": 14282660, \"time\": \"Thu Dec 21 10:36:08 2017\"}]\n\n    cryptotool unspent myLktRdRh3dkK3gnShNj5tZsig6J1oaaJW --coin ltc --testnet\n    [{\"output\": \"f27a53b9433eeb9d011a8c77439edb7a582a01166756e00ea1076699bfa58371:0\", \"value\": 1993472, \"time\": \"Wed Dec 20 14:38:07 2017\"}, {\"output\": \"2a288547460ebe410e98fe63a1900b645\n    2d95ec318efb0d58a5584ac67f27d93:1\", \"value\": 177961076, \"time\": \"Wed Dec 20 17:01:32 2017\"}, {\"output\": \"da0e900e4ed8e3661bef6f6fa5beed78fec3f7b9e4cc87c7120108eba66f270f:0\", \"value\":\n     1971905, \"time\": \"Wed Dec 20 17:01:32 2017\"}]\n\nMake and broadcast a transaction on the Dash testnet:\n\n    cryptotool send cMrziExc6iMV8vvAML8QX9hGDP8zNhcsKbdS9BqrRa1b4mhKvK6f ye9FSaGnHH5A2cjJ9s2y9XTgyJZefB5huz 44907516684 --fee 20000 --coin dash --testnet\n    {\"status\": \"success\", \"data\": {\"txid\": \"725ff2599700462905aafe658a082c0545c2749f779a7c9114421b4ca65183d0\", \"network\": \"DASHTEST\"}}\n\nThe arguments are the private key of the sender, the receiver's address and the fee (default 10000). Change will be returned to the sender. \n\n### Listing of main coin-specific commands:\n\n* privkey_to_pubkey    : (privkey) -> pubkey\n* privtopub            : (privkey) -> pubkey\n* pubkey_to_address    : (pubkey) -> address\n* pubtoaddr            : (pubkey) -> address\n* privkey_to_address   : (privkey) -> address\n* privtoaddr           : (privkey) -> address\n* sign                 : (txobj, i, privkey) -> create digital signature of tx with privkey and add to input i\n* signall              : (txobj, privkey) -> create digital signature of tx with privkey for all inputs\n* history              : (address) -> tx history of an address\n* unspent              : (address, etc) -> unspent outputs for an addresses\n* pushtx               : (hex or bin tx) -> push a transaction to the blockchain\n* fetchtx              : (txhash) -> fetch a tx from the blockchain\n* txinputs             : (txhash) -> fetch inputs from a previous transaction in a format to be re-used as unspents             \n* send                 : (privkey, to, value, fee) -> create and a push a simple transaction to send coins to an address and return change to the sender\n* mktx                 : (inputs, outputs) -> txobj\n* mksend               : (inputs, outputs, change_addr, fee) -> txobj\n\n### Listing of main non-coin specific commands:\n\n* add                  : (key1, key2) -> key1 + key2 (works on privkeys or pubkeys)\n* multiply             : (pubkey, privkey) -> returns pubkey * privkey\n\n* ecdsa_sign           : (message, privkey) -> sig\n* ecdsa_verify         : (message, sig, pubkey) -> True/False\n* ecdsa_recover        : (message, sig) -> pubkey\n\n* random_key           : () -> privkey\n* random_electrum_seed : () -> electrum seed\n\n* electrum_stretch     : (seed) -> secret exponent\n* electrum_privkey     : (seed or secret exponent, i, type) -> privkey\n* electrum_mpk         : (seed or secret exponent) -> master public key\n* electrum_pubkey      : (seed or secexp or mpk) -> pubkey\n\n* bip32_master_key     : (seed) -> bip32 master key\n* bip32_ckd            : (private or public bip32 key, i) -> child key\n* bip32_privtopub      : (private bip32 key) -> public bip32 key\n* bip32_extract_key    : (private or public bip32_key) -> privkey or pubkey\n\n* deserialize          : (hex or bin transaction) -> JSON tx\n* serialize            : (JSON tx) -> hex or bin tx\n* multisign            : (txobj, i, script, privkey) -> signature\n* apply_multisignatures: (txobj, i, script, sigs) -> tx with index i signed with sigs\n* scriptaddr           : (script) -> P2SH address\n* mk_multisig_script   : (pubkeys, k, n) -> k-of-n multisig script from pubkeys\n* verify_tx_input      : (tx, i, script, sig, pub) -> True/False\n* tx_hash              : (hex or bin tx) -> hash\n\n* access               : (json list/object, prop) -> desired property of that json object\n* multiaccess          : (json list, prop) -> like access, but mapped across each list element\n* slice                : (json list, start, end) -> given slice of the list\n* count                : (json list) -> number of elements\n* sum                  : (json list) -> sum of all values\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/primal100/pybitcointools",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cryptos",
    "platform": "",
    "project_url": "https://pypi.org/project/cryptos/",
    "release_url": "https://pypi.org/project/cryptos/1.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python Crypto Coin Tools",
    "version": "1.3"
  },
  "releases": {
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9f09dc84c3dfba7030a0005d4d4ed5e5",
          "sha256": "c4de2a979ee0891919186a978b0dfce59426ae982a8996a361e3bb5685d170a1"
        },
        "downloads": -1,
        "filename": "cryptos-0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9f09dc84c3dfba7030a0005d4d4ed5e5",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 59889,
        "upload_time": "2018-01-07T00:52:10",
        "url": "https://files.pythonhosted.org/packages/7d/46/dc269e3269a9eed9107e1678d8305829d39f801ceb958196c748dcf8b62a/cryptos-0.7-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9314fcffa51b1cd86637cd74fa9fed56",
          "sha256": "265986425b602dfa8e8c1eceb0c5967c8a361a94d111ca58c4a8c5f0291c20bf"
        },
        "downloads": -1,
        "filename": "cryptos-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "9314fcffa51b1cd86637cd74fa9fed56",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32676,
        "upload_time": "2018-01-07T00:52:08",
        "url": "https://files.pythonhosted.org/packages/03/b3/81d76361cf3ad5a1c31aed4c8cf57be5ab1a783785f42d4c60c439dec2ca/cryptos-0.7.tar.gz"
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fa217a715afda54e0f5852b1d4abfa02",
          "sha256": "3d3166a3f02790eb835111ebe8ceb9235b9cf04f493c163cee49eb660d9512d8"
        },
        "downloads": -1,
        "filename": "cryptos-0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa217a715afda54e0f5852b1d4abfa02",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 52927,
        "upload_time": "2018-01-07T01:05:52",
        "url": "https://files.pythonhosted.org/packages/70/52/2edc20fb2fb79837a05d11f9fbe6bf34f3172da3f16fe02311b005097bae/cryptos-0.8-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8ac4cbb484fbe5eb7a9a29f552edc08b",
          "sha256": "34490ce1b6b8fd7db980d683dd53f1498503acfe57178c1db14a2cd6cced6830"
        },
        "downloads": -1,
        "filename": "cryptos-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "8ac4cbb484fbe5eb7a9a29f552edc08b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 40875,
        "upload_time": "2018-01-07T01:05:50",
        "url": "https://files.pythonhosted.org/packages/8e/e2/7f0990c25cd6a79d7b0ab06f9482e07c6ab99e34456a0dd80426c5b9e590/cryptos-0.8.tar.gz"
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "05e0c649616ac20f31a9ee6cde0f32e0",
          "sha256": "e01d40b0a03306ed013aa00ea0845d954725570918140827d71038f817806b67"
        },
        "downloads": -1,
        "filename": "cryptos-1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05e0c649616ac20f31a9ee6cde0f32e0",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 52927,
        "upload_time": "2018-01-07T01:07:11",
        "url": "https://files.pythonhosted.org/packages/9e/34/a5d279136d202ab2ef094613f2c1cc572a4921ceec1454b7d39d82acff35/cryptos-1.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "94a5b94587b77d4d08b47bcea8a3d3ab",
          "sha256": "96760fc28b3f2fcc50370da43cebf084bad4b3bafac01dfba0e58082153c9e1d"
        },
        "downloads": -1,
        "filename": "cryptos-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "94a5b94587b77d4d08b47bcea8a3d3ab",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 40869,
        "upload_time": "2018-01-07T01:07:09",
        "url": "https://files.pythonhosted.org/packages/63/a2/bbfa5b2d8e00e0e117fe44656b97e29be2a45ae7522286d1d9d7328577ae/cryptos-1.1.tar.gz"
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e7a063e8f3470ad789c59c4103c321c5",
          "sha256": "5324fbb8ec99da5a14b7f3b3f89b264b63cd1b7cee682d1649fe03438cd5c36a"
        },
        "downloads": -1,
        "filename": "cryptos-1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7a063e8f3470ad789c59c4103c321c5",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 56407,
        "upload_time": "2018-01-08T01:08:21",
        "url": "https://files.pythonhosted.org/packages/cb/a5/6f6dc410f63ce2bcb446497ec42ca4e9cc63f7b7952d204e261cab6ca8aa/cryptos-1.2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0cd13f29e356006145917c1250a2db91",
          "sha256": "1c199d896185a176bb254908bd0bd63c8f325cce5df2f6691390bd0954324bbe"
        },
        "downloads": -1,
        "filename": "cryptos-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0cd13f29e356006145917c1250a2db91",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43080,
        "upload_time": "2018-01-08T01:08:19",
        "url": "https://files.pythonhosted.org/packages/07/5b/45d8f466ee91a453f7d273cc5b8cd428d4f65009b85af9e59692bb921342/cryptos-1.2.tar.gz"
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bd43c918b10332501bbb214c02490bf7",
          "sha256": "df24f762783932fadacdb275f366d69f063afaec9ac62e31cfc65ba091c78867"
        },
        "downloads": -1,
        "filename": "cryptos-1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bd43c918b10332501bbb214c02490bf7",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 56217,
        "upload_time": "2018-01-08T14:36:40",
        "url": "https://files.pythonhosted.org/packages/1d/65/6559e806b7a243d37adfb8e19508d3956305621bbc01f78872ffcbd76601/cryptos-1.3-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d1665ce2763ed89c602317cc48fb1a4b",
          "sha256": "1da357173e72dcacf28550c20bd46717e187c13b69c88aa9230cab2b7431dfed"
        },
        "downloads": -1,
        "filename": "cryptos-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d1665ce2763ed89c602317cc48fb1a4b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43204,
        "upload_time": "2018-01-08T14:36:37",
        "url": "https://files.pythonhosted.org/packages/8a/31/bd58482c44e0f564a1454dd45ae7c252cc7004a019b4172f857425d2f9b2/cryptos-1.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "bd43c918b10332501bbb214c02490bf7",
        "sha256": "df24f762783932fadacdb275f366d69f063afaec9ac62e31cfc65ba091c78867"
      },
      "downloads": -1,
      "filename": "cryptos-1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bd43c918b10332501bbb214c02490bf7",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "size": 56217,
      "upload_time": "2018-01-08T14:36:40",
      "url": "https://files.pythonhosted.org/packages/1d/65/6559e806b7a243d37adfb8e19508d3956305621bbc01f78872ffcbd76601/cryptos-1.3-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "d1665ce2763ed89c602317cc48fb1a4b",
        "sha256": "1da357173e72dcacf28550c20bd46717e187c13b69c88aa9230cab2b7431dfed"
      },
      "downloads": -1,
      "filename": "cryptos-1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d1665ce2763ed89c602317cc48fb1a4b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 43204,
      "upload_time": "2018-01-08T14:36:37",
      "url": "https://files.pythonhosted.org/packages/8a/31/bd58482c44e0f564a1454dd45ae7c252cc7004a019b4172f857425d2f9b2/cryptos-1.3.tar.gz"
    }
  ]
}