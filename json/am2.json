{
  "info": {
    "author": "Renato Pedigoni",
    "author_email": "renatopedigoni@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "am2\n===\n\nStuff made on the machine learning course at my university\n\n\nSimple neuron\n-------------\n\nInstantiating a neuron with a sigmoid transfer function: ::\n\n    from am2 import Neuron, SigmoidTransferFunction\n\n    neuron = Neuron(SigmoidTransferFunction, weights=[0, 1, 1])\n    print neuron.run([3, 2, 1])\n\n\nOr with a staircase transfer function: ::\n\n    from am2 import Neuron, StaircaseTransferFunction\n\n    neuron = Neuron(StaircaseTransferFunction, function=lambda y: y > 2, weights=[0, 1, 1])\n    print neuron.run([1, 1, 1])\n\n\n``function`` is optional (default is ``lambda y: y >= 1``)\n\n\nPerceptron\n----------\n\nA simple Perceptron_ is implemented: ::\n\n    from am2 import Perceptron\n\n    train_dataset = [\n        ((1, 0, 0), 1),\n        ((1, 0, 1), 1),\n        ((1, 1, 0), 1),\n        ((1, 1, 1), 0),\n    ]\n\n    perceptron = Perceptron(function=lambda y: y >= 1)\n    perceptron.train(train_dataset)  # executa o algoritmo de treinamento\n\n    print perceptron.run((1, 0, 0))\n\n\n.. _Perceptron: http://en.wikipedia.org/wiki/Perceptron",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/rpedigoni/am2",
    "keywords": "perceptron,neural networks",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "am2",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/am2/",
    "release_url": "https://pypi.org/project/am2/0.1/",
    "requires_python": null,
    "summary": "Stuff made on the machine learning course at my university",
    "version": "0.1"
  },
  "releases": {
    "0.1": []
  },
  "urls": []
}