{
  "info": {
    "author": "Theodor Lindquist",
    "author_email": "theodor.lindquist@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Home Automation"
    ],
    "description": "pymysensors |Build Status|\n==========================\n\nPython API for talking to a MySensors gateway\n(http://www.mysensors.org/). Currently supports serial protocol v1.4,\nv1.5 and v2.0. Not all features of v2.0 are implemented yet.\n\n-  Supports smartsleep with serial API v2.0.\n-  Supports the MQTT client gateway with serial API v2.0.\n-  Supports OTA updates, for both\n   `DualOptiboot <https://github.com/mysensors/DualOptiboot>`__ and\n   `MYSBootloader <https://github.com/mysensors/MySensorsBootloaderRF24>`__\n   bootloaders.\n\nUsage\n=====\n\nCurrently the API is best used by implementing a callback handler\n\n.. code:: python\n\n    import mysensors.mysensors as mysensors\n\n    def event(message):\n        \"\"\"Callback for mysensors updates.\"\"\"\n        print(\"sensor_update \" + str(message.node_id))\n\n    GATEWAY = mysensors.SerialGateway('/dev/ttyACM0', event)\n    GATEWAY.start()\n\nIn the above example PyMysensors will call \"event\" whenever a node in\nthe Mysensors network has been updated. The message passed to the\ncallback handler has the following data:\n\n::\n\n    Message\n        gateway - the gateway instance\n        node_id - the sensor node identifier\n        child_id - the child sensor id\n        type - the message type (int)\n        ack - True is message was an ACK, false otherwise\n        sub_type - the message sub_type (int)\n        payload - the payload of the message (string)\n\nSymbolic names for the Message types and sub\\_types are defined in the\nprotocol version-specific const\\_X.py files.\n\nThe data structure of a gateway and it's network is described below.\n\n::\n\n    SerialGateway/TCPGateway/MQTTGateway\n        sensors - a dict containing all nodes for the gateway; node is of type Sensor\n\n    Sensor - a sensor node\n        children - a dict containing all child sensors for the node\n        sensor_id - node id on the MySensors network\n        type - 17 for node or 18 for repeater\n        sketch_name\n        sketch_version\n        battery_level\n        protocol_version - the mysensors protocol version used by the node\n\n    ChildSensor - a child sensor\n        id - Child id on the parent node\n        type - Data type, S_HUM, S_TEMP etc.\n        values - a dictionary of values (V_HUM, V_TEMP, etc.)\n\nGetting the type and values of node 23, child sensor 4 would be\nperformed as follows:\n\n.. code:: python\n\n    s_type = GATEWAY.sensors[23].children[4].type\n    values = GATEWAY.sensors[23].children[4].values\n\nTo update a node child sensor value and send it to the node, use the\nset\\_child\\_value method in the Gateway class:\n\n.. code:: python\n\n    # To set sensor 1, child 1, sub-type V_LIGHT (= 2), with value 1.\n    GATEWAY.set_child_value(1, 1, 2, 1)\n\nPyMysensors also supports three other settings. Persistence mode, which\nsaves the sensor network between runs, persistence file path, which sets\nthe type and path of the persistence file and protocol version which\nsets the MySensors serial API version.\n\nWith persistence mode on, you can restart the gateway without having to\nrestart each individual node in your sensor network. To enable\npersistance mode, the third argument in the constructor should be True.\nA path to the config file can be specified as a fourth argument. The\nfile type (.pickle or .json) will set which persistence protocol to use,\npickle or json. JSON files can be read using a normal text editor.\n\nThe serial gateway also supports setting the baudrate, read timeout and\nreconnect timeout.\n\n.. code:: python\n\n    import mysensors.mysensors as mysensors\n\n    def event(message):\n        \"\"\"Callback for mysensors updates.\"\"\"\n        print(\"sensor_update \" + str(message.node_id))\n\n    GATEWAY = mysensors.SerialGateway(\n      '/dev/ttyACM0', event_callback=event, persistence=True,\n      persistence_file='somefolder/mysensors.pickle', protocol_version='1.4', baud=115200,\n      timeout=1.0, reconnect_timeout=10.0)\n    GATEWAY.start()\n\nThere are two other gateway types supported besides the serial gateway:\nthe tcp-ethernet gateway and the MQTT gateway.\n\nThe ethernet gateway is initialized similar to the serial gateway. The\nethernet gateway supports setting the tcp host port, receive timeout and\nreconnect timeout, besides the common settings and the host ip address.\n\n.. code:: python\n\n    GATEWAY = mysensors.TCPGateway(\n      '127.0.0.1', event_callback=event, persistence=True,\n      persistence_file='somefolder/mysensors.pickle', protocol_version='1.4',\n      port=5003, timeout=1.0, reconnect_timeout=10.0)\n\nThe MQTT gateway requires MySensors serial API v2.0 and the MQTT client\ngateway example sketch loaded in the gateway Arduino. The gateway also\nrequires an MQTT broker and a python MQTT client interface to the\nbroker. See\n`mqtt.py <https://github.com/theolind/pymysensors/blob/master/mqtt.py>`__\nfor an example of how to implement this and initialize the MQTT gateway.\n\nOver the air (OTA) firmware updates\n-----------------------------------\n\nCall ``Gateway`` method ``update_fw`` to set one or more nodes for OTA\nfirmware update. The method takes three positional arguments and one\nkeyword arguement. The first argument should be the node id of the node\nto update. This can also be a list of many node ids. The next two\narguments should be integers representing the firwmare type and version.\nThe keyword argument is optional and should be a path to a hex file with\nthe new firmware.\n\n.. code:: python\n\n    GATEWAY.update_fw([1, 2], 1, 2, fw_path='/path/to/firmware.hex')\n\nAfter the ``update_fw`` method has been called the node(s) will be\nrequested to restart when pymysensors Gateway receives the next set\nmessage. After restart and during the MySensors ``begin`` method, the\nnode will send a firmware config request. The pymysensors library will\nrespond to the config request. If the node receives a proper firmware\nconfig response it will send a firmware request for a block of firmware.\nThe pymysensors library will handle this and send a firmware response\nmessage. The latter request-response conversation will continue until\nall blocks of firmware are sent. If the CRC of the transmitted firmware\nmatch the CRC of the firmware config response, the node will restart and\nload the new firmware.\n\n.. |Build Status| image:: https://travis-ci.org/theolind/pymysensors.svg?branch=master\n   :target: https://travis-ci.org/theolind/pymysensors\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/theolind/pymysensors",
    "keywords": "sensor,actuator,IoT,DYI",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymysensors",
    "platform": "",
    "project_url": "https://pypi.org/project/pymysensors/",
    "release_url": "https://pypi.org/project/pymysensors/0.11.0/",
    "requires_dist": [
      "voluptuous (>=0.10.5)",
      "pyserial (>=3.1.1)",
      "crcmod (>=1.7)",
      "IntelHex (>=2.1)"
    ],
    "requires_python": "",
    "summary": "Python API for talking to a MySensors gateway",
    "version": "0.11.0"
  },
  "releases": {
    "0.10.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7f102d30464fbf9bf26e779700e8b425",
          "sha256": "ced7366b8e8761dfec8e0c9776134d238dba7f5e1e8bd6c40300144114386bec"
        },
        "downloads": 0,
        "filename": "pymysensors-0.10.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f102d30464fbf9bf26e779700e8b425",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 31582,
        "upload_time": "2017-05-06T23:35:42",
        "url": "https://files.pythonhosted.org/packages/75/88/46e5342e9d56c72dc6343796f252840870075f5f72879a6db5ee3d53ae42/pymysensors-0.10.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "70ea84403a57d7a5e1cd17400c0039e0",
          "sha256": "e5c0f70ab993e48f6ab767b06234832d91004eaba87dcb46153219895c6174f8"
        },
        "downloads": 0,
        "filename": "pymysensors-0.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "70ea84403a57d7a5e1cd17400c0039e0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27432,
        "upload_time": "2017-05-06T23:35:45",
        "url": "https://files.pythonhosted.org/packages/45/66/b34374e471b50df8e5a08c14dc8082aacff78a42ce85d5a1781dcad4227c/pymysensors-0.10.0.tar.gz"
      }
    ],
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "79eff131c0a7c9b7f9ec7a6e527eccdd",
          "sha256": "85999bedb24d3d08c64cba0272d77bc10a88a5a7eddb48805e8dd1bb0d3b2a96"
        },
        "downloads": 0,
        "filename": "pymysensors-0.11.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79eff131c0a7c9b7f9ec7a6e527eccdd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 36422,
        "upload_time": "2017-08-21T09:32:07",
        "url": "https://files.pythonhosted.org/packages/03/44/97ae3a69bdbadb456e91f4118784c44ace266c53c569cd279e2d418a97f6/pymysensors-0.11.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b7a9233eb60d8483a30ae306584719b6",
          "sha256": "13822fffde2be5c1a71dbfa21ae235e60c6a356cc1da92d53bc82266d6b4a453"
        },
        "downloads": 0,
        "filename": "pymysensors-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b7a9233eb60d8483a30ae306584719b6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31256,
        "upload_time": "2017-08-21T09:32:08",
        "url": "https://files.pythonhosted.org/packages/5c/01/e2a9986ab4bcb8e48e518a356e054a5f9ffea77e48f4abaea4c1c2a15a36/pymysensors-0.11.0.tar.gz"
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "715c26ac0fc11965f1d04f9e8c6ad3d5",
          "sha256": "141e60240301ad180afea8a1fbd1e5a73431e823ccf157838dbd37b0879298ab"
        },
        "downloads": 0,
        "filename": "pymysensors-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "715c26ac0fc11965f1d04f9e8c6ad3d5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17327,
        "upload_time": "2017-05-04T18:08:16",
        "url": "https://files.pythonhosted.org/packages/b2/b6/d3626f269c9e70297ade689a14c7679ae02f93ff86e020e85c595590e54c/pymysensors-0.9.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "79eff131c0a7c9b7f9ec7a6e527eccdd",
        "sha256": "85999bedb24d3d08c64cba0272d77bc10a88a5a7eddb48805e8dd1bb0d3b2a96"
      },
      "downloads": 0,
      "filename": "pymysensors-0.11.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "79eff131c0a7c9b7f9ec7a6e527eccdd",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 36422,
      "upload_time": "2017-08-21T09:32:07",
      "url": "https://files.pythonhosted.org/packages/03/44/97ae3a69bdbadb456e91f4118784c44ace266c53c569cd279e2d418a97f6/pymysensors-0.11.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "b7a9233eb60d8483a30ae306584719b6",
        "sha256": "13822fffde2be5c1a71dbfa21ae235e60c6a356cc1da92d53bc82266d6b4a453"
      },
      "downloads": 0,
      "filename": "pymysensors-0.11.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b7a9233eb60d8483a30ae306584719b6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 31256,
      "upload_time": "2017-08-21T09:32:08",
      "url": "https://files.pythonhosted.org/packages/5c/01/e2a9986ab4bcb8e48e518a356e054a5f9ffea77e48f4abaea4c1c2a15a36/pymysensors-0.11.0.tar.gz"
    }
  ]
}