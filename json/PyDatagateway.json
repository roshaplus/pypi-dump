{
  "info": {
    "author": "Yanyu Qu",
    "author_email": "yanyuqu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Topic :: Database :: Front-Ends"
    ],
    "description": "======\nPyHive\n======\n\nPyHive is a collection of Python `DB-API <http://www.python.org/dev/peps/pep-0249/>`_ and\n`SQLAlchemy <http://www.sqlalchemy.org/>`_ interfaces for `Presto <http://prestodb.io/>`_ and\n`Hive <http://hive.apache.org/>`_.\n\nUsage\n=====\n\nDB-API\n------\n.. code-block:: python\n\n    from pyhive import presto\n    cursor = presto.connect('localhost').cursor()\n    cursor.execute('SELECT * FROM my_awesome_data LIMIT 10')\n    print cursor.fetchone()\n    print cursor.fetchall()\n\nDB-API (asynchronous)\n---------------------\n.. code-block:: python\n\n    from pyhive import hive\n    from TCLIService.ttypes import TOperationState\n    cursor = hive.connect('localhost').cursor()\n    cursor.execute('SELECT * FROM my_awesome_data LIMIT 10', async=True)\n\n    status = cursor.poll().operationState\n    while status in (TOperationState.INITIALIZED_STATE, TOperationState.RUNNING_STATE):\n        logs = cursor.fetch_logs()\n        for message in logs:\n            print message\n\n        # If needed, an asynchronous query can be cancelled at any time with:\n        # cursor.cancel()\n\n        status = cursor.poll().operationState\n\n    print cursor.fetchall()\n\nSQLAlchemy\n----------\nFirst install this package to register it with SQLAlchemy (see ``setup.py``).\n\n.. code-block:: python\n\n    from sqlalchemy import *\n    from sqlalchemy.engine import create_engine\n    from sqlalchemy.schema import *\n    engine = create_engine('presto://localhost:8080/hive/default')\n    logs = Table('my_awesome_data', MetaData(bind=engine), autoload=True)\n    print select([func.count('*')], from_obj=logs).scalar()\n\nNote: query generation functionality is not exhaustive or fully tested, but there should be no\nproblem with raw SQL.\n\nPassing session configuration\n-----------------------------\n\n.. code-block:: python\n\n    # DB-API\n    hive.connect('localhost', configuration={'hive.exec.reducers.max': '123'})\n    presto.connect('localhost', session_props={'query_max_run_time': '1234m'})\n    # SQLAlchemy\n    create_engine(\n        'hive://user@host:10000/database',\n        connect_args={'configuration': {'hive.exec.reducers.max': '123'}},\n    )\n\nRequirements\n============\n\nInstall using\n\n- ``pip install pyhive[hive]`` for the Hive interface and\n- ``pip install pyhive[presto]`` for the Presto interface.\n\n`PyHive` works with\n\n- Python 2.7 / Python 3\n- For Presto: Presto install\n- For Hive: `HiveServer2 <https://cwiki.apache.org/confluence/display/Hive/Setting+up+HiveServer2>`_ daemon\n\nThere's also a `third party Conda package <https://binstar.org/blaze/pyhive>`_.\n\nChangelog\n=========\nSee https://github.com/dropbox/PyHive/releases.\n\nContributing\n============\n- Please fill out the Dropbox Contributor License Agreement at https://opensource.dropbox.com/cla/ and note this in your pull request.\n- Changes must come with tests, with the exception of trivial things like fixing comments. See .travis.yml for the test environment setup.\n\nTesting\n=======\n.. image:: https://travis-ci.org/dropbox/PyHive.svg\n    :target: https://travis-ci.org/dropbox/PyHive\n.. image:: http://codecov.io/github/dropbox/PyHive/coverage.svg?branch=master\n    :target: http://codecov.io/github/dropbox/PyHive?branch=master\n\nRun the following in an environment with Hive/Presto::\n\n    ./scripts/make_test_tables.sh\n    virtualenv --no-site-packages env\n    source env/bin/activate\n    pip install -e .\n    pip install -r dev_requirements.txt\n    py.test\n\nWARNING: This drops/creates tables named ``one_row``, ``one_row_complex``, and ``many_rows``, plus a\ndatabase called ``pyhive_test_database``.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyDatagateway",
    "platform": "",
    "project_url": "https://pypi.org/project/PyDatagateway/",
    "release_url": "https://pypi.org/project/PyDatagateway/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python interface to Hive",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "51e4229587e32577bcc18314f2c2c605",
          "sha256": "6c4f4bc95c1538d984f62e7ff95d3dac5b4c664a89f850da5b636ef240b5c818"
        },
        "downloads": 0,
        "filename": "PyDatagateway-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "51e4229587e32577bcc18314f2c2c605",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 42271,
        "upload_time": "2017-06-29T10:22:25",
        "url": "https://files.pythonhosted.org/packages/9d/5b/49fbf00034c5b7d00b56dd3dd66fb8fec410a893344ca50a14278ffd441b/PyDatagateway-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "51e4229587e32577bcc18314f2c2c605",
        "sha256": "6c4f4bc95c1538d984f62e7ff95d3dac5b4c664a89f850da5b636ef240b5c818"
      },
      "downloads": 0,
      "filename": "PyDatagateway-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "51e4229587e32577bcc18314f2c2c605",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 42271,
      "upload_time": "2017-06-29T10:22:25",
      "url": "https://files.pythonhosted.org/packages/9d/5b/49fbf00034c5b7d00b56dd3dd66fb8fec410a893344ca50a14278ffd441b/PyDatagateway-0.1.0.tar.gz"
    }
  ]
}