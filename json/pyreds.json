{
  "info": {
    "author": "Tan Shuai",
    "author_email": "7anshuai@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "pyreds\n======\n\n`reds <https://github.com/tj/reds>`_ is a light-weight Redis Search for Node.js.\n\npyreds is a Python port of reds.\n\nInstallation\n------------\n\npyreds requires a running Redis server. See `Redis's quickstart\n<http://redis.io/topics/quickstart>`_ for installation instructions.\n\nTo install pyreds, simply:\n\n.. code-block:: bash\n\n    $ pip install pyreds\n\nGetting Started\n---------------\n\nThe first thing you'll want to do is create a `Search` instance, which allow you to pass a `key`, used for namespacing within Redis so that you may have several searches in the same db.\n \n.. code-block:: pycon\n\n    >>> import pyreds\n    >>> search = pyreds.create_search('pets')\n\npyreds acts against arbitrary numeric or string based ids, so you could utilize this library with essentially anything you wish, even combining data stores. The following example just uses an array for our \"database\", containing some strings, which we add to pyreds by calling `Search#index()` padding the body of text and an id of some kind, in this case the index.\n\n.. code-block:: pycon\n\n    >>> strs = []\n    >>> strs.append('Tobi wants four dollars')\n    >>> strs.append('Tobi only wants $4')\n    >>> strs.append('Loki is really fat')\n    >>> strs.append('Loki, Jane, and Tobi are ferrets')\n    >>> strs.append('Manny is a cat')\n    >>> strs.append('Luna is a cat')\n    >>> strs.append('Mustachio is a cat')\n    >>> for i, v in enumerate(strs):\n    ...     search.index(v, i)\n\nTo perform a query against pyreds simply invoke `Search#query()` with a string, which return a `Query` instance. Then invoke `Query#end()`, which return a list of ids when present, or an empty list otherwise.\n\n.. code-block:: pycon\n\n    >>> ids = search.query('Tobi dollars').end()\n    >>> print('Search results for \"Tobi dollars\"'))\n    >>> for id in ids:\n    ...     print('  - {}'.format(strs[id]))\n\nBy default pyreds performs an intersection of the search words. The previous example would yield the following output since only one string contains both \"Tobi\" and \"dollars\":\n\n.. code-block:: pycon\n\n    Search results for \"Tobi dollars\":\n        - Tobi wants four dollars\n\nWe can tweak pyreds to perform a union by passing either \"union\" or \"or\" to `Search#type()` between `Search#query()` and `Query#end()`, indicating that any of the constants computed may be present for the id to match.\n\n.. code-block:: pycon\n\n    >>> ids = search.query('tobi dollars').type('or').end()\n    >>> print('Search results for \"Tobi dollars\"'))\n    >>> for id in ids:\n    ...     print('  - {}'.format(strs[id]))\n\nThe union search would yield the following since three strings contain either \"Tobi\" or \"dollars\":\n\n.. code-block:: pycon\n\n    Search results for \"tobi dollars\":\n        - Tobi wants four dollars\n        - Tobi only wants $4\n        - Loki, Jane, and Tobi are ferrets\n\nAPI\n---\n\n.. code-block:: pycon\n\n    >>> pyreds.create_search(key)\n    >>> Search#index(text, id)\n    >>> Search#remove(id)\n    >>> Search#query(text[, type])\n\nLICENSE\n-------\n\nThe MIT License",
    "docs_url": null,
    "download_url": "https://github.com/7anshuai/pyreds/archive/0.1.0.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/7anshuai/pyreds",
    "keywords": "redis,full text search",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyreds",
    "platform": "",
    "project_url": "https://pypi.org/project/pyreds/",
    "release_url": "https://pypi.org/project/pyreds/0.1.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Simple full text search module for Python, backed by Redis",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "698e25808cda28ac48049cafcb7d0105",
          "sha256": "a1abe51489d7754a1a83f4297c1f67a599cceb5c31d706a807e534acc3ba9e4a"
        },
        "downloads": -1,
        "filename": "pyreds-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "698e25808cda28ac48049cafcb7d0105",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8299,
        "upload_time": "2017-12-20T05:43:27",
        "url": "https://files.pythonhosted.org/packages/a0/2c/d8e9ac0999c3335c3602b3112dd168eb85cfd39d496b7bc9a2be93857922/pyreds-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "698e25808cda28ac48049cafcb7d0105",
        "sha256": "a1abe51489d7754a1a83f4297c1f67a599cceb5c31d706a807e534acc3ba9e4a"
      },
      "downloads": -1,
      "filename": "pyreds-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "698e25808cda28ac48049cafcb7d0105",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8299,
      "upload_time": "2017-12-20T05:43:27",
      "url": "https://files.pythonhosted.org/packages/a0/2c/d8e9ac0999c3335c3602b3112dd168eb85cfd39d496b7bc9a2be93857922/pyreds-0.1.1.tar.gz"
    }
  ]
}