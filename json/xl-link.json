{
  "info": {
    "author": "Hugh Ramsden",
    "author_email": "rammers2@hotmail.co.uk",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# XLLink for Pandas\n\n**API docs: https://0hughman0.github.io/xl_link/api.html**\n\n**Installation: `pip install xl_link`**\n\nLove the functionality of Pandas, but find yourself disappointed that as soon as your DataFrame is written to excel, you loose it all?\n\nFear not! XLLink solves this by returning the powerfull XLMap object upon use of to_excel!\n\nThis xlmap supports all your favourite indexing methods, i.e. loc, iloc, at and iat, but instead of returning a DataFrame, Series, or scalar, XLMap will instead return the XLRange, or XLCell corresponding to the location of the result within your spreadsheet.\n\nPerhaps more usefully, xlmaps offer a wrapper around excel engines (currently supporting xlsxwriter and openpyxl) to make creating charts in excel far more intuitive.\n\n## Chart capabilities\n\nHere's a teaser of what xl_link can do when combined with xlsx writer (for example):\n\n    >>> writer = pd.ExcelWriter(\"Example.xlsx\", engine='xlsxwriter')\n    >>> f1 = XLDataFrame(columns=('X', 'Y1', 'Y2'),\n                         data={'X': range(10),\n                               'Y1': list(random.randrange(0, 10) for _ in range(10)),\n                               'Y2': list(random.randrange(0, 10) for _ in range(10))})\n    >>> f1.set_index('X', inplace=True)\n    >>>\n    >>> xlmap1 = f1.to_excel(writer, sheet_name='scatter')\n    >>> scatter_chart = xlmap1.create_chart('scatter', x_axis_name='x', y_axis_name='y', title='Scatter Example')\n    >>> xlmap1.sheet.insert_chart(xlmap1.columns[-1].translate(0, 1).cell, scatter_chart) # Puts at top of first empty col\n    >>> writer.save()\n\nWhich produces this chart:\n\n![scatter chart](https://raw.githubusercontent.com/0Hughman0/xl_link/master/examples/ScatterExample.PNG)\n\nCreating a complex chart like this:\n\n![multi bar chart](https://raw.githubusercontent.com/0Hughman0/xl_link/master/examples/BarExample.png)\n\nis as easy as:\n\n    Setup\n\n    >>> writer = pd.ExcelWriter(\"Comparison.xlsx\", engine='xlsxwriter')\n    >>> calories_per_meal = XLDataFrame(columns=(\"Mon\", \"Tues\", \"Weds\", \"Thur\"),\n                                       index=('Breakfast', 'Lunch', 'Dinner', 'Midnight Snack'),\n                                       data={'Mon': (15, 20, 12, 3),\n                                             'Tues': (5, 16, 3, 0),\n                                             'Weds': (3, 22, 2, 8),\n                                             'Thur': (6, 7, 1, 9)})\n\n    Create chart with xl_link\n\n    >>> xlmap = calories_per_meal.to_excel(writer, sheet_name=\"XLLinked\")\n    >>> xl_linked_chart = xlmap.create_chart('column', title=\"With xl_link\", x_axis_name=\"Meal\", y_axis_name=\"Calories\")\n    >>> xlmap.sheet.insert_chart('A1', xl_linked_chart)\n    >>> xlmap.writer.save()\n\nCreating the same chart without xl_link looks something like:\n\n    >>> calories_per_meal.to_excel(writer, sheet_name=\"Without\")\n    >>> without_sheet = writer.sheets[\"Without\"]\n    >>> without_chart = writer.book.add_chart({\"type\": \"column\"})\n    >>> for col_num in range(1, len(calories_per_meal.index) + 1):\n    >>>     without_chart.add_series({'name': [\"Without\", col_num, 0],\n    >>>                               'categories': [\"Without\", 0, 1, 0, 4],\n    >>>                               'values': [\"Without\", col_num, 1, col_num, 4]})\n    >>> without_chart.set_x_axis({'name': 'Meal'})\n    >>> without_chart.set_y_axis({'name': 'Calories'})\n    >>> without_chart.title = \"Without xl_link\"\n    >>> without_sheet.insert_chart('A1', without_chart)\n    >>> writer.save()\n\nWith xl_link's sensible defaults, it's easy to create complex charts.\n\nxl_link passes the chart type, and subtype straight to the excel engine, so if it's in the engine's docs, it should work!\n\n### Indexing capabilities\n\nAn XLMap object represents a DataFrame, frozen as it was written to excel, but crucially, it knows the location of every cell and index of f within the spreadsheet.\n\nLet's look at XLMap with a more detailed example:\n\n    >>> f = XLDataFrame(columns=(\"Mon\", \"Tues\", \"Weds\", \"Thur\"),\n                         index=('Breakfast', 'Lunch', 'Dinner', 'Midnight Snack'),\n                         data={'Mon': (15, 20, 12, 3),\n                               'Tues': (5, 16, 3, 0),\n                               'Weds': (3, 22, 2, 8),\n                               'Thur': (6, 7, 1, 9)})\n    >>> f\n                            Mon                  Tues      Weds       Thur\n        Breakfast         Toast                 Bagel    Cereal  Croissant\n        Lunch              Soup  Something Different!      Rice     Hotpot\n        Dinner            Curry                  Stew     Pasta    Gnocchi\n        Midnight Snack  Shmores               Cookies  Biscuits  Chocolate\n\n    >>> xlmap = f.to_excel(\"t.xlsx\")\n    >>> xlmap\n        <XLMap: index: <XLRange: 'Sheet1'!A2:A5>, columns: <XLRange: 'Sheet1'!B1:F1>, data: <XLRange: 'Sheet1'!B2:F5>>\n    >>> xlmap.index\n        <XLRange: 'Sheet1'!A2:A5>\n    >>> xlmap.columns\n        <XLRange: 'Sheet1'!B1:E1>\n\nIf you were to open t.xlsx you would find that the ranges described by xlmap line up perfectly with where f was written. And, write_frame is smart, you can use all of the parameters you normally use with DataFrame.to_excel, just pass them as a dict to write_frame:\n\n    >>> xlmap = xl_link.write_frame(f, \"t.xlsx\", {'sheet_name': 'Demo Sheet', 'startrow': 7})\n    >>> xlmap\n        <XLMap: index: <XLRange: 'Demo Sheet'!A9:A12>, columns: <XLRange: 'Demo Sheet'!B8:E8>, data: <XLRange: 'Demo Sheet'!B9:E12>>\n\nHere are some more indexing examples:\n\n    >>> # loc\n    >>> xlmap.loc['Lunch', 'Thur']\n        <XLCell: 'Demo Sheet'!E10>\n    >>> xlmap.loc['Dinner', :]\n        <XLRange: 'Demo Sheet'!B11:E11>\n    >>> # iloc\n    >>> xlmap.iloc[3, 2]\n        <XLCell: 'Demo Sheet'!D12>\n    >>> xlmap.iloc[:, 1]\n        <XLRange: 'Demo Sheet'!C9:C12>\n    >>> # at\n    >>> xlmap.at['Midnight Snack', 'Tues']\n        <XLCell: 'Demo Sheet'!C12>\n    >>> # iat\n    >>> xlmap.iat[0, 2]\n        <XLCell: 'Demo Sheet'!D9>\n    >>> # __getitem__\n    >>> xlmap['Mon']\n        <XLCell: 'Demo Sheet'!B8>\n    >>> xlmap[['Mon', 'Tues', 'Weds']]\n        <XLRange: 'Demo Sheet'!B2:D5>\n\nFor convenience, you can access a copy of the frame f, in it's state as it was written to excel:\n\n    >>> f.loc['Lunch'] = \"Nom Nom Nom\"\n    >>> f\n                                Mon         Tues         Weds         Thur\n        Breakfast             Toast        Bagel       Cereal    Croissant\n        Lunch           Nom Nom Nom  Nom Nom Nom  Nom Nom Nom  Nom Nom Nom\n        Dinner                Curry         Stew        Pasta      Gnocchi\n        Midnight Snack      Shmores      Cookies     Biscuits    Chocolate\n\n    >>> xlmap.f # Preserved :)\n                            Mon                  Tues      Weds       Thur\n        Breakfast         Toast                 Bagel    Cereal  Croissant\n        Lunch              Soup  Something Different!      Rice     Hotpot\n        Dinner            Curry                  Stew     Pasta    Gnocchi\n        Midnight Snack  Shmores               Cookies  Biscuits  Chocolate\n\n\n## XLRange and XLCell\n\nThese are the objects used within xl_link to represent ranges and cells within excel.\n\nThese objects have a ton of methods, making them powerful in themselves, if needs be, you can create them yourself:\n\n    >>> from xl_link.xl_types import XLRange, XLCell\n    >>> start = XLCell(1, 1) # using row, col\n    >>> stop = XLCell(1, 8)\n    >>> between = start - stop\n        <XLRange: 'Sheet1'!B2:I2>\n\nand you can get their location in excel notation via XLCell.cell and XLRange.range respectively:\n\n    >>> start\n        <XLCell: 'Sheet1'!B2>\n    >>> start.cell\n        'B2'\n    >>> stop\n        <XLCell: 'Sheet1'!I2>\n    >>> between\n        <XLRange: 'Sheet1'!B2:I2>\n    >>> between.range\n        'B2:I2'\n\nFor convenience add the f prefix for a formula compatible version:\n\n    >>> start.fcell\n        \"'Sheet1'!B2\"\n    >>> between.frange\n        \"'Sheet1'!B2:I2\"\n\nAnd if you prefer to use this notation to initalise you XLRanges and XLCells, that's find too, using from_cell, from_fcell, from_range and from_frange:\n\n    >>> XLCell.from_cell(\"A6\")\n        <XLCell: 'Sheet1'!A6>\n    >>> XLRange.from_frange(\"'Another Sheet'!D2:R2\")\n        <XLRange: ''Another Sheet''!D2:R2>\n\n\nTranslate them, get items using a range of indexers, and even iterate over 1D XLRanges:\n\n    >>> new_start = start.translate(0, 2)\n    >>> new_stop = stop.translate(0, 2)\n    >>> new_between = new_start - new_stop\n    >>> new_between\n        <XLRange: 'Sheet1'!D2:K2>\n    >>> new_between[3:]\n        <XLRange: 'Sheet1'!G2:K2>\n    >>> for cell in new_between:\n            print(cell.cell)\n        D2\n        E2\n        F2\n        G2\n        H2\n        I2\n        J2\n        K2\n\nThis package uses the utility functions from XlsxWriter under the BSD license found here: https://github.com/jmcnamara/XlsxWriter\n\nCopyright (c) 2016 0Hughman0\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "docs_url": null,
    "download_url": "https://github.com/0Hughman0/xl_link/archive/0.13.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/0Hughman0/xl_link",
    "keywords": "pandas,excel,io,data",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xl-link",
    "platform": "",
    "project_url": "https://pypi.org/project/xl-link/",
    "release_url": "https://pypi.org/project/xl-link/0.13/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Pandas Magic for Excel spreadsheets",
    "version": "0.13"
  },
  "releases": {
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "46975d9463daaa3480614fe44d2c797b",
          "sha256": "3e3dfd7d39ff2c5eba5bee644c78a3c7d05ff76f5353f73dcd29d13ffdc56ab8"
        },
        "downloads": -1,
        "filename": "xl_link-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "46975d9463daaa3480614fe44d2c797b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22169,
        "upload_time": "2017-11-09T09:40:33",
        "url": "https://files.pythonhosted.org/packages/9f/dc/9a8dbe1b63749f9da9a23bdd5ed2ba060163a695c6b20ec4514b43291e85/xl_link-0.12.tar.gz"
      }
    ],
    "0.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2eb606b94cd7817702c978154533435d",
          "sha256": "e0bf47a914dd09ea86bf7597456397b235394359b91f748c502b2bf983b7634b"
        },
        "downloads": -1,
        "filename": "xl_link-0.13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2eb606b94cd7817702c978154533435d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 24866,
        "upload_time": "2017-11-09T12:16:27",
        "url": "https://files.pythonhosted.org/packages/c2/19/b42fd18847f47ace9b64a53e97b6eb3d3ca5a22f1887f903b6dadff372d8/xl_link-0.13-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "84f2b8aa4b74668f19eaa394774cd88d",
          "sha256": "69fc21d3f7697766f7ba50ac042e47a21f7fc8114390bb6298f28644a460186f"
        },
        "downloads": -1,
        "filename": "xl_link-0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "84f2b8aa4b74668f19eaa394774cd88d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22354,
        "upload_time": "2017-11-09T11:07:42",
        "url": "https://files.pythonhosted.org/packages/4d/f7/a0c3ec248ce306b4718fbef9733cbc999b679c9891fe0a5c60a07d809e6d/xl_link-0.13.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2eb606b94cd7817702c978154533435d",
        "sha256": "e0bf47a914dd09ea86bf7597456397b235394359b91f748c502b2bf983b7634b"
      },
      "downloads": -1,
      "filename": "xl_link-0.13-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2eb606b94cd7817702c978154533435d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 24866,
      "upload_time": "2017-11-09T12:16:27",
      "url": "https://files.pythonhosted.org/packages/c2/19/b42fd18847f47ace9b64a53e97b6eb3d3ca5a22f1887f903b6dadff372d8/xl_link-0.13-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "84f2b8aa4b74668f19eaa394774cd88d",
        "sha256": "69fc21d3f7697766f7ba50ac042e47a21f7fc8114390bb6298f28644a460186f"
      },
      "downloads": -1,
      "filename": "xl_link-0.13.tar.gz",
      "has_sig": false,
      "md5_digest": "84f2b8aa4b74668f19eaa394774cd88d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 22354,
      "upload_time": "2017-11-09T11:07:42",
      "url": "https://files.pythonhosted.org/packages/4d/f7/a0c3ec248ce306b4718fbef9733cbc999b679c9891fe0a5c60a07d809e6d/xl_link-0.13.tar.gz"
    }
  ]
}