{
  "info": {
    "author": "Florent Pigout",
    "author_email": "florent.pigout@novapost.fr",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "=============\r\nMock services\r\n=============\r\n\r\n.. image:: https://circleci.com/gh/novafloss/mock-services.svg?style=shield\r\n   :target: https://circleci.com/gh/novafloss/mock-services\r\n   :alt: We are under CI!!\r\n\r\nAims to provide an easy way to mock an entire service API based on\r\n`requests-mock` and a simple dict definition of a service. The idea is to mock\r\neverything at start according given rules. Then `mock-services` allows to\r\n*start/stop* http mock locally.\r\n\r\nDuring our session we can:\r\n\r\n- add rules\r\n- permit external calls\r\n- stop mocking\r\n- reset rules\r\n- restart mocking\r\n- etc.\r\n\r\n\r\nMock endpoints explicitly\r\n=========================\r\n\r\n\r\n*Note:* rules urls must be regex. They always will be compiled before updating\r\nthe main `requests-mock` urls registry.\r\n\r\nLet's mock our favorite search engine::\r\n\r\n    >>> def fake_duckduckgo_cb(request):\r\n    ...     return 200, {}, 'Coincoin!'\r\n\r\n    >>> rules = [\r\n    ...     {\r\n    ...         'text': fake_duckduckgo_cb,\r\n    ...         'headers': {'Content-Type': 'text/html'},\r\n    ...         'method': 'GET',\r\n    ...         'url': r'^https://duckduckgo.com/\\?q='\r\n    ...     },\r\n    ... ]\r\n\r\n    >>> from mock_services import update_http_rules\r\n    >>> update_http_rules(rules)\r\n\r\n    >>> import requests\r\n    >>> requests.get('https://duckduckgo.com/?q=mock-services').content[:15]\r\n    '<!DOCTYPE html>'\r\n\r\n    >>> from mock_services import start_http_mock\r\n    >>> start_http_mock()\r\n\r\n    >>> requests.get('https://duckduckgo.com/?q=mock-services').content\r\n    'Coincoin!'\r\n\r\n\r\nWhen the http_mock is started if you try to call an external url, it should\r\nfail::\r\n\r\n    >>> requests.get('https://www.google.com/#q=mock-services')\r\n    ...\r\n    ConnectionError: Connection refused: GET https://www.google.com/#q=mock-services\r\n\r\n\r\nThen you can allow external calls if needed::\r\n\r\n    >>> from mock_services import http_mock\r\n    >>> http_mock.set_allow_external(True)\r\n\r\n    >>> requests.get('https://www.google.com/#q=mock-services').content[:15]\r\n    '<!doctype html>'\r\n\r\n\r\nAt anytime you can stop the mocking as follow::\r\n\r\n    >>> from mock_services import stop_http_mock\r\n    >>> stop_http_mock()\r\n\r\n    >>> requests.get('https://duckduckgo.com/?q=mock-services').content[:15]\r\n    '<!DOCTYPE html>'\r\n\r\n\r\nOr stop mocking during a function call::\r\n\r\n    >>> start_http_mock()\r\n\r\n    >>> @no_http_mock\r\n    ... def please_do_not_mock_me():\r\n    ...     return requests.get('https://duckduckgo.com/?q=mock-services').content[:15] == '<!DOCTYPE html>', 'mocked!'\r\n\r\n    >>> please_do_not_mock_me\r\n\r\n\r\nOr start mocking for another function call::\r\n\r\n    >>> stop_http_mock()\r\n\r\n    >>> @with_http_mock\r\n    ... def please_mock_me():\r\n    ...     assert requests.get('https://duckduckgo.com/?q=mock-services').content == 'Coincoin', 'no mock!'\r\n\r\n    >>> please_mock_me\r\n\r\n\r\nMock service easy\r\n=================\r\n\r\n\r\nYou can add REST rules with an explicit method. It will add rules as above and\r\nautomatically bind callbacks to fake a REST service.\r\n\r\n*Note:* *resource* and *id* regex options are mandatory in the rules urls.\r\n\r\nAdditionally, `mock_services` include `attrs` library. It can be use for\r\nfield validation as follow.\r\n\r\nThis service mock will create, get, update and delete resources for you::\r\n\r\n    >>> import attr\r\n\r\n    >>> rest_rules = [\r\n    ...     {\r\n    ...         'method': 'LIST',\r\n    ...         'url': r'^http://my_fake_service/(?P<resource>api)$'\r\n    ...     },\r\n    ...     {\r\n    ...         'method': 'GET',\r\n    ...         'url': r'^http://my_fake_service/(?P<resource>api)/(?P<id>\\d+)$',\r\n    ...     },\r\n    ...     {\r\n    ...         'method': 'GET',\r\n    ...         'url': r'^http://my_fake_service/(?P<resource>api)/(?P<id>\\d+)/(?P<action>download)$',\r\n    ...     },\r\n    ...     {\r\n    ...         'method': 'POST',\r\n    ...         'url': r'^http://my_fake_service/(?P<resource>api)$',\r\n    ...         'id_name': 'id',\r\n    ...         'id_factory': int,\r\n    ...         'attrs': {\r\n    ...             'bar': attr.ib(),\r\n    ...             'foo':attr.ib(default=True)\r\n    ...         }\r\n    ...     },\r\n    ...     {\r\n    ...         'method': 'PATCH',\r\n    ...         'url': r'^http://my_fake_service/(?P<resource>api)/(?P<id>\\d+)$',\r\n    ...     },\r\n    ...     {\r\n    ...         'method': 'DELETE',\r\n    ...         'url': r'^http://my_fake_service/(?P<resource>api)/(?P<id>\\d+)$'\r\n    ...     },\r\n    ... ]\r\n\r\n    >>> from mock_services import update_rest_rules\r\n    >>> update_rest_rules(rest_rules)\r\n\r\n    >>> from mock_services import start_http_mock\r\n    >>> start_http_mock()\r\n\r\n    >>> response = requests.get('http://my_fake_service/api')\r\n    >>> response.status_code\r\n    200\r\n    >>> response.json()\r\n    []\r\n\r\n    >>> response = requests.get('http://my_fake_service/api/1')\r\n    >>> response.status_code\r\n    404\r\n\r\n    >>> import json\r\n\r\n    >>> response = requests.post('http://my_fake_service/api',\r\n    ...                          data=json.dumps({}),\r\n    ...                          headers={'content-type': 'application/json'})\r\n    >>> response.status_code\r\n    400\r\n\r\n    >>> response = requests.post('http://my_fake_service/api',\r\n    ...                          data=json.dumps({'bar': 'Python will save the world'}),\r\n    ...                          headers={'content-type': 'application/json'})\r\n    >>> response.status_code\r\n    201\r\n    >>> response.json()\r\n    {\r\n      'id': 1,\r\n      'foo'; True,\r\n      'bar'; 'Python will save the world.'\r\n    }\r\n\r\n    >>> response = requests.patch('http://my_fake_service/api/1',\r\n    ...                           data=json.dumps({'bar': \"Python will save the world. I don't know how. But it will.\"}),\r\n    ...                           headers={'content-type': 'application/json'})\r\n    >>> response.status_code\r\n    200\r\n\r\n    >>> response = requests.get('http://my_fake_service/api/1')\r\n    >>> response.status_code\r\n    200\r\n    >>> response.json()\r\n    {\r\n      'id': 1,\r\n      'foo'; True,\r\n      'bar'; \"Python will save the world. I don't know how. But it will.\"\r\n    }\r\n\r\n    >>> response = requests.delete('http://my_fake_service/api/1')\r\n    >>> response.status_code\r\n    204\r\n\r\n\r\nMore validation\r\n===============\r\n\r\n\r\nIs some cases you need to validate a resource against another. Then you can add\r\nglobal validators per endpoint as follow::\r\n\r\n    >>> from mock_services import storage\r\n    >>> from mock_services.service import ResourceContext\r\n    >>> from mock_services.exceptions import Http409\r\n\r\n    >>> def duplicate_foo(request):\r\n    ...     data = json.loads(request.body)\r\n    ...     ctx = ResourceContext(hostname='my_fake_service', resource='api')\r\n    ...     if data['foo'] in [o['foo'] for o in storage.list(ctx)]:\r\n    ...         raise Http409\r\n\r\n    >>> rest_rules_with_validators = [\r\n    ...     {\r\n    ...         'method': 'POST',\r\n    ...         'url': r'^http://my_fake_service/(?P<resource>api)$',\r\n    ...         'validators': [\r\n    ...             duplicate_foo,\r\n    ...         ],\r\n    ...     },\r\n    ... ]\r\n\r\n    >>> response = requests.post('http://my_fake_service/api',\r\n    ...                          data=json.dumps({'foo': 'bar'}),\r\n    ...                          headers={'content-type': 'application/json'})\r\n    >>> response.status_code\r\n    201\r\n\r\n    >>> response = requests.post('http://my_fake_service/api',\r\n    ...                          data=json.dumps({'foo': 'bar'}),\r\n    ...                          headers={'content-type': 'application/json'})\r\n    >>> response.status_code\r\n    409\r\n\r\n\r\nHave fun in testing external APIs ;)",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/novafloss/mock-services",
    "keywords": "http,mock,requests,rest",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mock-services",
    "platform": "",
    "project_url": "https://pypi.org/project/mock-services/",
    "release_url": "https://pypi.org/project/mock-services/0.3/",
    "requires_python": "",
    "summary": "Mock services.",
    "version": "0.3"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d6b80860b39e5e797b9f216e5d5d593d",
          "sha256": "e21741d28282ad69da09f47c3da5e6b8babc09bef8ed7deb0c633a90270013f0"
        },
        "downloads": 316,
        "filename": "mock_services-0.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "d6b80860b39e5e797b9f216e5d5d593d",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 10400,
        "upload_time": "2015-12-10T16:41:20",
        "url": "https://files.pythonhosted.org/packages/db/c8/168602ef56adb7f6208f9c82e6caa04ac9f64edcce4d84e980d1f9c88e10/mock_services-0.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "59a98378b01e0d97a2d5e820409c486e",
          "sha256": "a0a35699529e7c256fdc9ad61900253f35b0052ae0488be377d75124156f9262"
        },
        "downloads": 688,
        "filename": "mock-services-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "59a98378b01e0d97a2d5e820409c486e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7462,
        "upload_time": "2015-12-10T16:39:18",
        "url": "https://files.pythonhosted.org/packages/4d/56/550b281dc1672b09765ef81b3ff5ef964a807120ef567e49d75def7a3f02/mock-services-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "52130efc95c123e361347d91e7615102",
          "sha256": "469501f6c6ba3b363c7a901162308b05f87abafd8b6b43bb51da2b9ae8161099"
        },
        "downloads": 531,
        "filename": "mock-services-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "52130efc95c123e361347d91e7615102",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8415,
        "upload_time": "2016-01-07T11:25:06",
        "url": "https://files.pythonhosted.org/packages/59/63/759f875507aa092ed9db76e1803bbdb6707f1777d91552a93fc2d1c1a609/mock-services-0.2.tar.gz"
      }
    ],
    "0.2.dev0": [],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d775a8c9eae374db0fc2ff33c93d414d",
          "sha256": "bd53a3c9d7e6b3a81d94808d01412b009852343ee7c89abcbfb7ccafa393263b"
        },
        "downloads": 209,
        "filename": "mock-services-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d775a8c9eae374db0fc2ff33c93d414d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8584,
        "upload_time": "2016-10-13T13:00:34",
        "url": "https://files.pythonhosted.org/packages/52/73/160e9df2e3948d6118426282673b1661b941229771e988f2883e9df998b4/mock-services-0.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d775a8c9eae374db0fc2ff33c93d414d",
        "sha256": "bd53a3c9d7e6b3a81d94808d01412b009852343ee7c89abcbfb7ccafa393263b"
      },
      "downloads": 209,
      "filename": "mock-services-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d775a8c9eae374db0fc2ff33c93d414d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8584,
      "upload_time": "2016-10-13T13:00:34",
      "url": "https://files.pythonhosted.org/packages/52/73/160e9df2e3948d6118426282673b1661b941229771e988f2883e9df998b4/mock-services-0.3.tar.gz"
    }
  ]
}