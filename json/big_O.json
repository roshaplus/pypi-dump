{
  "info": {
    "author": "Pietro Berkes",
    "author_email": "pietro.berkes@googlemail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "=====\nbig_O\n=====\n\nbig_O is a Python module to estimate the time complexity of Python code from\nits execution time. You can use it to analyze how your functions scale\nwith inputs of increasing size.\n\nbig_O executes a Python function for input of increasing size `N`, and measures\nits execution time. From the measurements, big_O fits a set of time complexity\nclasses and returns the best fitting class. This is an empirical way to\ncompute the asymptotic class of a function in `\"Big-O\"\n<http://en.wikipedia.org/wiki/Big_oh>`_.  notation. (Strictly\nspeaking, we're empirically computing the Big Theta class.)\n\nUsage\n-----\n\nFor concreteness, let's say we would like to compute the asymptotic behavior\nof a simple function that finds the maximum element in a list of positive\nintegers:\n\n\t>>> def find_max(x):\n\t...     \"\"\"Find the maximum element in a list of positive integers.\"\"\"\n\t...     max_ = 0\n\t...     for el in x:\n\t...         if el > max_:\n\t...             max_ = el\n\t...     return max_\n\t...\n\nTo do this, we call `big_o.big_o` passing as argument the function and a\ndata generator that provides lists of random integers of length N:\n\n\t>>> import big_o\n\t>>> positive_int_generator = lambda n: big_o.datagen.integers(n, 0, 10000)\n\t>>> best, others = big_o.big_o(find_max, positive_int_generator, n_repeats=100)\n\t>>> print best\n\tLinear: time = -0.0028 + 6.1E-06*n\n\n`big_o` inferred that the asymptotic behavior of the `find_max` fuction is\nlinear, and returns an object containing the fitted coefficients for the\ncomplexity class. The second return argument, `others`, contains a dictionary\nof all fitted classes with the residuals from the fit as keys:\n\n\t>>> for class_, residuals in others.items():\n\t...     print class_, '   (res: %.2G)' % residuals\n\t...\n\tLinear: time = 0.0015 + 5.8E-06*n    (res: 8.9E-05)\n\tPolynomial: time = -12 * x^0.95    (res: 0.0093)\n\tLogarithmic: time = -0.44 + 0.073*log(n)    (res: 0.14)\n\tLinearithmic: time = 0.016 + 5E-07*n*log(n)    (res: 0.00064)\n\tExponential: time = -4.1 * 4.5E-05^n    (res: 14)\n\tConstant: time = 0.29    (res: 0.35)\n\tCubic: time = 0.15 + 5.1E-16*n^3    (res: 0.062)\n\tQuadratic: time = 0.1 + 5.4E-11*n^2    (res: 0.026)\n\nSubmodules\n----------\n\n- `big_o.datagen`: this sub-module contains common data generators, including an identity generator that simply returns N (`datagen.n_`), and a data generator that returns a list of random integers of length N (`datagen.integers`).\n- `big_o.complexities`: this sub-module defines the complexity classes to be fit to the execution times. Unless you want to define new classes, you don't need to worry about it.\n\n\nStandard library examples\n-------------------------\n\nSorting a list in Python is O(n*log(n)) (a.k.a. 'linearithmic'):\n\n\t>>> big_o.big_o(sorted, lambda n: big_o.datagen.integers(n, -100, 100))\n\t(<big_o.complexities.Linearithmic object at 0x031DA9D0>, ...)\n\n`numpy` examples\n----------------\n\nCreating an array:\n\n- `numpy.zeros` is O(n), since it needs to initialize every element to 0:\n\n\t>>> import numpy as np\n\t>>> big_o.big_o(np.zeros, big_o.datagen.n_, max_n=1000000, n_repeats=5) # doctest: +ELLIPSIS\n\t(<class 'big_o.big_o.Linear'>, ...)\n\n- `numpy.empty` instead just allocates the memory, and is thus O(1):\n\n\t>>> big_o.big_o(np.empty, big_o.datagen.n_, max_n=1000000, n_repeats=5) # doctest: +ELLIPSIS\n\t(<class 'big_o.big_o.Constant'> ...)\n\n\nLicense\n-------\n\nbig_O is released under the GPL v3. See LICENSE.txt .\n\nCopyright (c) 2011, Pietro Berkes. All rights reserved.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pberkes/big_O",
    "keywords": null,
    "license": "LICENSE.txt",
    "maintainer": null,
    "maintainer_email": null,
    "name": "big_O",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/big_O/",
    "release_url": "https://pypi.org/project/big_O/0.7/",
    "requires_python": null,
    "summary": "Empirical estimation of time complexity from execution time",
    "version": "0.7"
  },
  "releases": {
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a5da4e1d7ded6acb1f00a429b59bcc8f",
          "sha256": "40834b0f24590cc76e5b98a731babc15a2ba46142f175e65f622531ad1ca505f"
        },
        "downloads": 3765,
        "filename": "big_O-0.7.zip",
        "has_sig": false,
        "md5_digest": "a5da4e1d7ded6acb1f00a429b59bcc8f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21023,
        "upload_time": "2011-02-06T14:00:04",
        "url": "https://files.pythonhosted.org/packages/8c/6e/0efb50013e6b739b4747d3c9ddeec54b985d2c2d646b0b9a0a2cc347c2a2/big_O-0.7.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a5da4e1d7ded6acb1f00a429b59bcc8f",
        "sha256": "40834b0f24590cc76e5b98a731babc15a2ba46142f175e65f622531ad1ca505f"
      },
      "downloads": 3765,
      "filename": "big_O-0.7.zip",
      "has_sig": false,
      "md5_digest": "a5da4e1d7ded6acb1f00a429b59bcc8f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 21023,
      "upload_time": "2011-02-06T14:00:04",
      "url": "https://files.pythonhosted.org/packages/8c/6e/0efb50013e6b739b4747d3c9ddeec54b985d2c2d646b0b9a0a2cc347c2a2/big_O-0.7.zip"
    }
  ]
}