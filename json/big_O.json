{
  "info": {
    "author": "Pietro Berkes",
    "author_email": "pietro.berkes@googlemail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "=====\nbig_O\n=====\n\nbig_O is a Python module to estimate the time complexity of Python code from\nits execution time.  It can be used to analyze how functions scale with inputs\nof increasing size.\n\n\nbig_O executes a Python function for input of increasing size `N`, and measures\nits execution time. From the measurements, big_O fits a set of time complexity\nclasses and returns the best fitting class. This is an empirical way to\ncompute the asymptotic class of a function in `\"Big-O\"\n<http://en.wikipedia.org/wiki/Big_oh>`_.  notation. (Strictly\nspeaking, we're empirically computing the Big Theta class.)\n\nUsage\n-----\n\nFor concreteness, let's say we would like to compute the asymptotic behavior\nof a simple function that finds the maximum element in a list of positive\nintegers:\n\n    >>> def find_max(x):\n    ...     \"\"\"Find the maximum element in a list of positive integers.\"\"\"\n    ...     max_ = 0\n    ...     for el in x:\n    ...         if el > max_:\n    ...             max_ = el\n    ...     return max_\n    ...\n\nTo do this, we call `big_o.big_o` passing as argument the function and a\ndata generator that provides lists of random integers of length N:\n\n    >>> import big_o\n    >>> positive_int_generator = lambda n: big_o.datagen.integers(n, 0, 10000)\n    >>> best, others = big_o.big_o(find_max, positive_int_generator, n_repeats=100)\n    >>> print(best)\n    Linear: time = -0.0021 + 4E-06*n\n\n`big_o` inferred that the asymptotic behavior of the `find_max` fuction is\nlinear, and returns an object containing the fitted coefficients for the\ncomplexity class. The second return argument, `others`, contains a dictionary\nof all fitted classes with the residuals from the fit as keys:\n\n    >>> for class_, residuals in others.items():\n    ...     print('{:<60s}    (res: {:.2G})'.format(class_, residuals))\n    ...\n    Logarithmic: time = -0.3 + 0.05*log(n)                      (res: 0.072)\n    Cubic: time = 0.1 + 3.6E-16*n^3                             (res: 0.028)\n    Quadratic: time = 0.068 + 3.8E-11*n^2                       (res: 0.011)\n    Constant: time = 0.2                                        (res: 0.17)\n    Exponential: time = -4.2 * 4.1E-05^n                        (res: 9.6)\n    Linearithmic: time = 0.0077 + 3.5E-07*n*log(n)              (res: 0.00055)\n    Polynomial: time = -11 * x^0.84                             (res: 0.12)\n    Linear: time = -0.0021 + 4E-06*n                            (res: 0.00054)\n\nSubmodules\n----------\n\n- `big_o.datagen`: this sub-module contains common data generators, including an identity generator that simply returns N (`datagen.n_`), and a data generator that returns a list of random integers of length N (`datagen.integers`).\n- `big_o.complexities`: this sub-module defines the complexity classes to be fit to the execution times. Unless you want to define new classes, you don't need to worry about it.\n\n\nStandard library examples\n-------------------------\n\nSorting a list in Python is O(n*log(n)) (a.k.a. 'linearithmic'):\n\n    >>> big_o.big_o(sorted, lambda n: big_o.datagen.integers(n, -100, 100))\n    (<big_o.complexities.Linearithmic object at 0x031DA9D0>, ...)\n\nInserting elements at the beginning of a list is O(n):\n\n    >>> def insert_0(lst):\n    ...     lst.insert(0, 0)\n    ...\n    >>> print big_o.big_o(insert_0, big_o.datagen.range_n, n_repeats=100)[0]\n    Linear: time = 0.00035 + 7.5E-08*n\n\nInserting elements at the beginning of a queue is O(1):\n\n    >>> from collections import deque\n    >>> def insert_0_queue(queue):\n    ...     lst.insert(0, 0)\n    ...\n    >>> def queue_generator(n):\n    ...      return deque(xrange(n))\n    ...\n    >>> print big_o.big_o(insert_0_queue, queue_generator, n_repeats=100)[0]\n    Constant: time = 0.00012\n\n`numpy` examples\n----------------\n\nCreating an array:\n\n- `numpy.zeros` is O(n), since it needs to initialize every element to 0:\n\n    >>> import numpy as np\n    >>> big_o.big_o(np.zeros, big_o.datagen.n_, max_n=100000, n_repeats=100)\n    (<class 'big_o.big_o.Linear'>, ...)\n\n- `numpy.empty` instead just allocates the memory, and is thus O(1):\n\n    >>> big_o.big_o(np.empty, big_o.datagen.n_, max_n=100000, n_repeats=100)\n    (<class 'big_o.big_o.Constant'> ...)\n\n\nLicense\n-------\n\nbig_O is released under the GPL v3. See LICENSE.txt .\n\nCopyright (c) 2011, Pietro Berkes. All rights reserved.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pberkes/big_O",
    "keywords": "",
    "license": "LICENSE.txt",
    "maintainer": "",
    "maintainer_email": "",
    "name": "big_O",
    "platform": "",
    "project_url": "https://pypi.org/project/big_O/",
    "release_url": "https://pypi.org/project/big_O/0.8/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Empirical estimation of time complexity from execution time",
    "version": "0.8"
  },
  "releases": {
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a5da4e1d7ded6acb1f00a429b59bcc8f",
          "sha256": "40834b0f24590cc76e5b98a731babc15a2ba46142f175e65f622531ad1ca505f"
        },
        "downloads": -1,
        "filename": "big_O-0.7.zip",
        "has_sig": false,
        "md5_digest": "a5da4e1d7ded6acb1f00a429b59bcc8f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21023,
        "upload_time": "2011-02-06T14:00:04",
        "url": "https://files.pythonhosted.org/packages/8c/6e/0efb50013e6b739b4747d3c9ddeec54b985d2c2d646b0b9a0a2cc347c2a2/big_O-0.7.zip"
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5a047abb1a0b5eefb7abef0e9e75dd95",
          "sha256": "a7394f813b6d23e7ece60bd132b5115a252164223b2f5468f502ec55028cde11"
        },
        "downloads": -1,
        "filename": "big_O-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "5a047abb1a0b5eefb7abef0e9e75dd95",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5847,
        "upload_time": "2018-01-23T16:36:02",
        "url": "https://files.pythonhosted.org/packages/3d/0a/88b115326ee7866b6ce6e6c6bb8c74747c48ad2b6c84ffe2c0997cd19bda/big_O-0.8.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5a047abb1a0b5eefb7abef0e9e75dd95",
        "sha256": "a7394f813b6d23e7ece60bd132b5115a252164223b2f5468f502ec55028cde11"
      },
      "downloads": -1,
      "filename": "big_O-0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "5a047abb1a0b5eefb7abef0e9e75dd95",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5847,
      "upload_time": "2018-01-23T16:36:02",
      "url": "https://files.pythonhosted.org/packages/3d/0a/88b115326ee7866b6ce6e6c6bb8c74747c48ad2b6c84ffe2c0997cd19bda/big_O-0.8.tar.gz"
    }
  ]
}