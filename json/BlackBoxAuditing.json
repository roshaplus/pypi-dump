{
  "info": {
    "author": "Philip Adler, Casey Falk, Sorelle A. Friedler, Gabriel Rybeck, Carlos Scheidegger, Brandon Smith, Suresh Venkatasubramanian, Michael Feldman, John Moeller, Derek Roth, Charlie Marx",
    "author_email": "fairness@haverford.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.0",
      "Topic :: Software Development"
    ],
    "description": "# Black Box Auditing and Certifying and Removing Disparate Impact\n\nThis repository contains a sample implementation of Gradient Feature Auditing (GFA) meant to be generalizable to most datasets.  For more information on the repair process, see our paper on [Certifying and Removing Disparate Impact](http://arxiv.org/abs/1412.3756).  For information on the full auditing process, see our paper on [Auditing Black-box Models for Indirect Influence](http://arxiv.org/abs/1602.07043).\n\n# License\n\nThis code is licensed under an [Apache 2.0](https://www.apache.org/licenses/LICENSE-2.0.html) license.\n\n# Setup and Installation\n\n1. Install the Python dependencies listed in the requirements.txt file.\n2. Install python-matplotlib if you do not already have it (https://matplotlib.org/users/installing.html).\n3. Install BlackBoxAuditing (`pip install BlackBoxAuditing`)\n\nMany of the ModelVisitors rely on [Weka](http://www.cs.waikato.ac.nz/ml/weka/). Similarly, we use [TensorFlow](https://www.tensorflow.org/) for network-based machine learning. Any Python libraries that need to be installed are included in the `requirements.txt` file. Weka and Tensorflow should be downloaded during installation, but here's the download links just in case. \n\n- Weka 3.6.13 [download](http://www.cs.waikato.ac.nz/ml/weka/downloading.html)\n- TensorFlow [download](https://www.tensorflow.org/versions/master/get_started/os_setup.html) (original experiments run with version 0.6.0)\n\n\n# Certifying and Removing Disparate Impact\n\nAfter installing BlackBoxAuditing, you can run the data repair described in [Certifying and Removing Disparate Impact](http://arxiv.org/abs/1412.3756) using the command `BlackBoxAuditing-repair` on a terminal which will tell you the arguments the script takes.\n\n# Black Box Auditing\n\nTo run GFA on a dataset (as in [Auditing Black-box Models for Indirect Influence](http://arxiv.org/abs/1602.07043)),\n\n\n## Running as a Python Script\n\nAfter installing BlackBoxAuditing, GFA can be run on a dataset (as in [Auditing Black-box Models for Indirect Influence](http://arxiv.org/abs/1602.07043)) using a simple python script. For reference, the following includes sample code:\n\n```python\n%python\n# import BlackBoxAuditing\nimport BlackBoxAuditing as BBA\n# import machine learning technique\nfrom BlackBoxAuditing.model_factories import Weka_SVM, Weka_DecisionTree\n\n\"\"\"\nUsing a preloaded dataset\n\"\"\"\n# load in preloaded dataset\ndata = BBA.load_data(\"german\")\n\n# initialize the auditor and set parameters\nauditor = BBA.Auditor()\nauditor.model = Weka_SVM\n\n# call the auditor with the data\nauditor(data)\n\n\n\"\"\"\nUsing your own dataset\n\"\"\"\n# load your own data\ndatafile = 'path/to/datafile'\ndata = BBA.load_from_file(datafile)\n\n# initialize the auditor and set parameters\nauditor = BBA.Auditor()\nauditor.model = Weka_DecisionTree\n\n# call the auditor\nauditor(data)\n\n```\n\n### More Advanced Script Options\n\n#### Using a preloaded dataset\n\nThe BlackBoxAuditing package has a few datasets preloaded and ready to use for auditing. In a script, they are available via the function `load_data` which takes as input the name of the dataset and returns formatted data ready for auditing. The following is the list of preloaded datasets available for auditing:\n\n* adult\n* diabetes\n* ricci\n* german\n* glass\n* sample\n* DRP\n\nRefer to the Sources section down below for more information about the datasets\n\n#### Using you own dataset\n\nTo use your own data for auditing, the function `load_from_file`, most simply, takes as input the path to your dataset and returns formatted data ready for auditing. `load_from_file` also includes other paramters which should be set to ensure that your data is processed correctly. Refer to the full function and its defaults:\n\n```\nload_from_file(datafile, testdata=None, correct_types=None, train_percentage=2.0/3.0,\n                   response_header=None, features_to_ignore=None, missing_data_symbol=\"\"\n```\n\n* *datafile*: path to your dataset\n* *testdata*: path to the dataset used for testing a model. Assumes that *datafile* is the training dtata\n* *correct_types*: list of the types (str, int, or float) of the features in the data. If not given, the types will be automatically generated by inspecting the values of each feature\n* *train_percentage*: train/test split of the data given as floats\n* *response_header*: name of the response column in the data. if not given, assumes that the last column in the data is the response\n* *features_to_ignore*: list of the names of any feature than you wish to be ignored by the model\n* *missing_data_symbol*: symbol that marks missing or unknown value in the data\n\n#### Auditor options\n\nAfter initializing the auditor `auditor = BlackBoxAuditor.Auditor()`, there are a few options that can be set to tune the auditor listed as follows:\n\n`auditor.measurers`: (*default = [accuracy, BCR]*) list of measurers to use for GFA\n\n`auditor.model_options`: (*default = {}*) options for machine learning model\n\n`auditor.verbose`: (*default = True*) Set to \"True\" to allow for more detailed status updates\n\n`auditor.REPAIR_STEPS`: (*default = 10*) Number of repair steps take \n\n`auditor.RETRAIN_MODEL_PER_REPAIR`: (*default = False*) \n\n`auditor.WRITE_ORIGINAL_PREDICTIONS`: (*default = True*)\n\n`auditor.ModelFactory`: (*default = Weka_SVM*) Available machine learning options: Weka_SVM, Weka_DecisionTree, TensorFlow\n\n`auditor.kdd`: (*default = False*) \n\n\n## Testing Code Changes\n\nAfter BlackBoxAuditing has been installed, you can run the test suite using the command on a terminal `BlackBoxAuditing-test`.\n\nEvery python file should include test functions at the bottom that will be run when the file is run. This can be done by including the line `if __name__==\"__main__\": test()` as long as there is a function defined as `test`.\n\nThese tests should use print statements with `True` or `False` readouts indicating success or failure (where `True` should always be success). It is fine/good to have multiple of these per file.\n\nNote: if a test requires reading data from the `test_data` directory, it should import the appropriate `load_data` file from the `experiments` directory.\n\n## Implementing a New Machine-Learning Method\n\nThe best way to create a model would be to use a ModelFactory and ModelVisitors. A ModelVisitor should be thought of as a wrapper that knows how to load a machine-learning model of a given type and communicate with that model file in order to output predicted values of some test dataset. A ModelFactory simply knows how to \"build\" a ModelVisitor based on some provided training data. Check out the \"Abstract\" files in the `sample_experiment` directory for outlines of what these two classes should do; similarly, check out the \"SVM_ModelFactory\" files in the `sample_experiment` subdirectory for examples that use WEKA to create model files and produce predictions.\n\n# Sources\n\nDataset Sources:\n - adult.csv [link](https://archive.ics.uci.edu/ml/datasets/Adult)\n - german_categorical.csv (Modified from [link](https://archive.ics.uci.edu/ml/datasets/Statlog+(German+Credit+Data))\n - RicciDataMod.csv (Modified from [link](http://www.amstat.org/publications/jse/v18n3/RicciData.csv))\n - DRP Datasets (Source and data-files coming soon.)\n - Arrests/Recidivism Datasets [link](http://www.icpsr.umich.edu/icpsrweb/RCMD/studies/3355)\n - Linear Datasets (\"sample_2\" Experiment) [link](https://github.com/jasonbaldridge/try-tf)\n\nMore information on DRP can be found at the [Dark Reactions Project](http://darkreactions.haverford.edu/) official site.\n\n# Bug Reports and Feature-Requests\n\nAll bug reports and feature-requests should be submitted through the [Issue Tracker](https://github.com/cfalk/BlackBoxAuditing/issues).",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/algofairness/BlackBoxAuditing",
    "keywords": "algorithmic fairness",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "BlackBoxAuditing",
    "platform": "",
    "project_url": "https://pypi.org/project/BlackBoxAuditing/",
    "release_url": "https://pypi.org/project/BlackBoxAuditing/0.0.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Sample Implementation of Gradient Feature Auditing (GFA)",
    "version": "0.0.3"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b5f12a4514052d37e38fd15377c964b2",
          "sha256": "88c2c3e2d8e2d089af498fc24995e265947d2d60aedee679000648cee0b61638"
        },
        "downloads": 0,
        "filename": "BlackBoxAuditing-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b5f12a4514052d37e38fd15377c964b2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1837777,
        "upload_time": "2017-06-30T14:20:40",
        "url": "https://files.pythonhosted.org/packages/0a/4a/3584c464f53ec781185e3f9f1b4150260ac7facb6f6aecda28e88029d740/BlackBoxAuditing-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d1446c3a04121c221bc0fda8122f3348",
          "sha256": "5f8660259829d4c0b8ece9743081d7d5c7b2fa182b06aaa098c00134bf7a6104"
        },
        "downloads": 0,
        "filename": "BlackBoxAuditing-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d1446c3a04121c221bc0fda8122f3348",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3082468,
        "upload_time": "2017-06-30T15:47:00",
        "url": "https://files.pythonhosted.org/packages/90/30/e4397d985a37271ffdc474e3bc96cf0b3612cbe26c95d9c1b977bbb05a6a/BlackBoxAuditing-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4d7c8d882e2dab970efd12e0d10ff67d",
          "sha256": "811964264d3ac0b5104e2062f11a73a8a030ffeaa12c23e790e8559f106502e5"
        },
        "downloads": 0,
        "filename": "BlackBoxAuditing-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "4d7c8d882e2dab970efd12e0d10ff67d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2564955,
        "upload_time": "2017-08-13T13:19:45",
        "url": "https://files.pythonhosted.org/packages/17/69/a2f81505f33b711c41858e9316b102ab51c8a5ab9832d3019b522202a879/BlackBoxAuditing-0.0.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4d7c8d882e2dab970efd12e0d10ff67d",
        "sha256": "811964264d3ac0b5104e2062f11a73a8a030ffeaa12c23e790e8559f106502e5"
      },
      "downloads": 0,
      "filename": "BlackBoxAuditing-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "4d7c8d882e2dab970efd12e0d10ff67d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 2564955,
      "upload_time": "2017-08-13T13:19:45",
      "url": "https://files.pythonhosted.org/packages/17/69/a2f81505f33b711c41858e9316b102ab51c8a5ab9832d3019b522202a879/BlackBoxAuditing-0.0.3.tar.gz"
    }
  ]
}