{
  "info": {
    "author": "Daniele Coslovich",
    "author_email": "daniele.coslovich@umontpellier.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 2",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "Atooms\n======\n\n``atooms`` is a python framework for classical simulations of\ninteracting particles. It makes it easy to develop simulation and\nanalysis tools using an expressive language, without sacrificing\nefficiency. This is achieved by offloading the critical parts of the\ncalculation to backends written in C, CUDA or Fortran.\n\nQuick start\n-----------\n\nThe goal of ``atooms`` is to provide a coherent interface to the basic\nobjects of `molecular\ndynamics <https://en.wikipedia.org/wiki/Molecular_dynamics>`__ or `Monte\nCarlo <https://en.wikipedia.org/wiki/Monte_Carlo_method_in_statistical_physics>`__\nsimulations. The simulation data are stored in trajectory files, whose\nformat usually depends on the code that produced the simulation.\n\nIn this simple example, we read a trajectory file in `xyz\nformat <https://en.wikipedia.org/wiki/XYZ_format>`__. Accessing the\ncoordinates of the particles in a trajectory file goes like this:\n\n.. code:: python\n\n    from atooms.trajectory import Trajectory\n\n    with Trajectory('input.xyz') as trajectory:\n        for system in trajectory:\n            print 'The position of particle 0 is', system.particle[0].position\n\nNote that trajectories support iteration and slicing, just like lists.\n\nHere we pick the last frame of the trajectory, change the density of the\nsystem to ``rho`` and write this new configuration using a different\ntrajectory format. We use a format suitable for the\n`RUMD <http://rumd.org>`__ simulation package:\n\n.. code:: python\n\n    with Trajectory('input.xyz') as trajectory:\n        system = trajectory[-1]\n        factor = (system.density / rho)**(1./3)\n        for particle in system.particle:\n            particle.position *= factor\n        system.cell.side *= factor\n\n    from atooms.trajectory import TrajectoryRUMD\n    with TrajectoryRUMD('trajectory.xyz.gz', 'w') as trajectory:\n        trajectory.write(system, step=0)\n\nDocumentation\n-------------\n\nSee the `public API\ndocumentation <https://www.coulomb.univ-montp2.fr/perso/daniele.coslovich/docs/atooms/>`__\nfor full details.\n\nInstallation\n------------\n\nFrom the python package index\n\n::\n\n    pip install atooms\n\nFrom the code repository\n\n::\n\n    git clone https://gitlab.info-ufr.univ-montp2.fr/atooms/atooms.git\n    cd atooms\n    make install\n\nTrajectory conversion\n---------------------\n\nAtooms provides a command line tool to convert between various\ntrajectory formats. The following command will convert a trajectory file\nproduced by `RUMD <http://rumd.org>`__ into a simpler xyz format\n\n.. code:: bash\n\n    $ trj.py convert -i rumd -o xyz trajectory.xyz.gz output.xyz\n\nIf you don't specify the output path, the trajectory is written to\nstandard output. This is useful for quick inspection of complex\ntrajectory formats or for piping into sed / awk.\n\n``trj.py`` provides means to fine tune the format of the output file.\nType ``trj.py --help`` to get a list of options and supported trajectory\nformats.\n\nCustom trajectory formats\n-------------------------\n\nIt is easy to add new trajectory formats by subclassing existing\ntrajectory classes. Just create a package called ``atooms_plugins`` and\nadd your trajectory modules there. They will be automatically available\nto all client codes that use atooms.\n\nSuppose you wrote a custom trajectory class ``TrajectoryABC`` in\n``atooms_plugins/test.py`` (the last path is relative to the current\ndirectory). You can now convert an existing xyz trajectory to your\ncustom format:\n\n.. code:: bash\n\n    $ trj.py convert output.xyz output.abc\n\nRemember to add an empty ``__init__.py`` file at the root of\n``atooms_plugins``. Actually, the ``atooms_plugins`` package can be put\nanywhere in your ``PYTHONPATH``.\n\nSimulation backends\n-------------------\n\nAtooms has a generic simulation interface that abstracts out most of the\ncommon parts of particle-based simulations. The actual simulation code\nis wrapped by a simulation backend that exposes a minimal but consistent\ninterface. This enables one to develop more complex simulation\nframeworks (e.g., `parallel\ntempering <https://gitlab.info-ufr.univ-montp2.fr/atooms/parallel_tempering>`__)\nthat are essentially decoupled from the underlying simulation code.\n\nThis is a quick example how to run 10000 molecular dynamics steps using\nthe `RUMD <http://rumd.org>`__ backend:\n\n.. code:: python\n\n    from atooms.backends.rumd import RUMD\n    from atooms.simulation import Simulation\n\n    backend = RUMD('rescaled.xyz.gz', forcefield_file='lj_rumd.ff', \n                   output_path='/tmp/outdir', integrator='nve')\n    sim = Simulation(backend)\n    sim.run(10000)\n    print 'Final temperature and density', sim.system.temperature, sim.system.density\n\nThe forcefield file ``lj_rumd.ff`` (available in ``data/``) defines the\ninteraction potential.\n\nAdditional packages\n-------------------\n\nAtooms is composable: it is easy to add new functionalities, and just\nthose you actually need. Additional packages are available from the\n`atooms main\nrepository <https://gitlab.info-ufr.univ-montp2.fr/atooms>`__. These\npackages will be installed in the atooms namespace to prevent name\nclashing.\n\nIf you want to add your own package to the atooms namespace, structure\nit this way\n\n.. code:: bash\n\n    atooms/your_package\n    atooms/your_package/__init__.py\n\nwhere ``__init__.py`` contains\n\n.. code:: python\n\n    from pkgutil import extend_path\n    __path__ = extend_path(__path__, __name__)\n\nAdd the package root folder to $PYTHONPATH. You can now import your\npackage as\n\n.. code:: python\n\n    import atooms.your_package\n\nAuthors\n-------\n\nDaniele Coslovich:\nhttp://www.coulomb.univ-montp2.fr/perso/daniele.coslovich/\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://gitlab.info-ufr.univ-montp2.fr/atooms/atooms",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "atooms",
    "platform": "",
    "project_url": "https://pypi.org/project/atooms/",
    "release_url": "https://pypi.org/project/atooms/1.0.4/",
    "requires_dist": [
      "numpy"
    ],
    "requires_python": "",
    "summary": "A framework for simulations of interacting particles",
    "version": "1.0.4"
  },
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "172f0886c9af787680c336399d4366c9",
          "sha256": "7a77e3194485b762ea87e3e6cc4902c16e4c9b55f615edd9f8d1477bc73ad754"
        },
        "downloads": -1,
        "filename": "atooms-1.0.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "172f0886c9af787680c336399d4366c9",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 64367,
        "upload_time": "2017-10-07T14:01:41",
        "url": "https://files.pythonhosted.org/packages/c2/b2/39a43171c55f24b84f115b06e683cdbf32a8341fff29b7f002d169916939/atooms-1.0.2-py2-none-any.whl"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c0ca4ae883c081ff4f3e5eaa5ba909c3",
          "sha256": "9c2c38849904f59a04ea00119d0f663327fbc2cb3bafaa50d14d196ab7747f74"
        },
        "downloads": -1,
        "filename": "atooms-1.0.3-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "c0ca4ae883c081ff4f3e5eaa5ba909c3",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 64383,
        "upload_time": "2017-10-15T10:10:25",
        "url": "https://files.pythonhosted.org/packages/8c/b3/9c299db830bc36f417925e8db913d46853865adde7e41c7935a254077aa9/atooms-1.0.3-py2-none-any.whl"
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2a9ac97fa86292619857c67e229b84f2",
          "sha256": "6ac257a358430949190f1ee5f32a15881c426ed365c287912ef6c1db2a4a1aea"
        },
        "downloads": -1,
        "filename": "atooms-1.0.4-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a9ac97fa86292619857c67e229b84f2",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 64802,
        "upload_time": "2017-10-19T16:27:25",
        "url": "https://files.pythonhosted.org/packages/e2/30/b3be17b552719bf6a9a7d8b1b0a5269af113ff34816a1f1367ca9849d5e3/atooms-1.0.4-py2-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2a9ac97fa86292619857c67e229b84f2",
        "sha256": "6ac257a358430949190f1ee5f32a15881c426ed365c287912ef6c1db2a4a1aea"
      },
      "downloads": -1,
      "filename": "atooms-1.0.4-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "2a9ac97fa86292619857c67e229b84f2",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 64802,
      "upload_time": "2017-10-19T16:27:25",
      "url": "https://files.pythonhosted.org/packages/e2/30/b3be17b552719bf6a9a7d8b1b0a5269af113ff34816a1f1367ca9849d5e3/atooms-1.0.4-py2-none-any.whl"
    }
  ]
}