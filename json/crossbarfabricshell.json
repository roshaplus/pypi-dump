{
  "info": {
    "author": "Crossbar.io Technologies GmbH",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# Fabric CLI\n\n## Examples\n\nPair a node:\n\n```console\npair node oberstet d19f6b9bd35858e31a386cdfe4c33e616e46b28c2d3a96add4591642d425cdd6 node7\n```\n\n## Global Resource Tree\n\n    REALM (Crossbar.io Fabric User Realm)\n      |\n      +-- USER (most info below is private)\n            |\n            +-- KEY\n            |\n            +-- REALM (Crossbar.io Management Realm)\n                  |\n                  +-- ROLE (Owner, Admin, Operator, Developer, ..)\n\n## Resource Tree\n\nIn normal use, you will connect to one of your **management realms** on Crossbar.io Fabric using your default user profile.\n\nWhen the Crossbar.io Fabric Shell has connected, you will have access to a unified resource tree making your whole network of Crossbar.io instances connected to that same management realm available:\n\n    REALM (Crossbar.io Fabric Management Realm of User)\n      |\n      +-- NODE (Crossbar.io Fabric node paired to management realm)\n            |\n            +-- CONTROLLER (this singleton process always runs)\n            |\n            +-- WORKER [SUBTYPE ROUTER]\n                   |\n                   +-- REALM (Crossbar.io Realm)\n                         |\n                         +-- ROLE\n                               |\n                               +-- PERMISSION\n                   |\n                   +-- TRANSPORT\n                         |\n                         +-- RESOURCE (only for Web Transports)\n                   |\n                   +-- COMPONENT (same Python only; danger zone)\n            |\n            +-- WORKER [SUBTYPE PROXY] (Crossbar.io Fabric only; scale up/out)\n                   |\n                   +-- TRANSPORT\n            |\n            +-- WORKER [SUBTYPE CONTAINER]\n                   |\n                   +-- COMPONENT (same Python only)\n            |\n            +-- WORKER [SUBTYPE GUEST] (arbitrary executable)\n            |\n            +-- WORKER [SUBTYPE DOCKER] (Crossbar.io Fabric only)\n      |\n      +-- HOST\n      |\n      +-- DEVICE\n\nUsing the Crossbar.io Fabric Shell, you can then navigate the resource tree and perform actions like:\n\n* start and stop workers on specific nodes\n* start new realms on router workers\n* monitor usage and load statistics on nodes\n* ...\n\nThe permissions you have on specific resources within the resource tree of a management realm depends on your assigned role on the management realm.\n\n\n## Other CLIs\n\n* [Juniper JunOS CLI](https://www.juniper.net/documentation/en_US/junos/information-products/pathway-pages/junos-cli/junos-cli.html)\n* [Microsoft PowerShell](https://en.wikipedia.org/wiki/PowerShell)\n* [Azure CLI 2.0](https://github.com/Azure/azure-cli)\n\n## Requirements\n\nPython 3.5 required\nuses stdlib asyncio (no Twisted needed)\n\n## Libraries uses\n\nHere is a [nice comparison](https://realpython.com/blog/python/comparing-python-command-line-parsing-libraries-argparse-docopt-click/) of three popular libraries (`argparse`, `docopt` and `click`) for command line parsing in Python.\n\n* [click](https://github.com/pallets/click)\n* [prompt-toolkit](https://github.com/jonathanslenders/python-prompt-toolkit)\n* [tabulate](https://bitbucket.org/astanin/python-tabulate)\n* [colorama](https://github.com/tartley/colorama)\n\nWe _may_ use these libraries if needed:\n\n* [jmespath](https://github.com/jmespath/jmespath.py)\n* [argcomplete](https://github.com/kislyuk/argcomplete)\n\n\nhttps://github.com/davidhalter/jedi\n\n\n\n## Basic Syntax\n\nOur CLI syntax\n\n    >> COMMAND [RESOURCE-TYPE RESOURCE-PATH]* [OPTIONS]\n\nFor example:\n\n```console\n>> show worker node1 worker1\n{'type': 'router'}\n\nFinished in 1.0 ms.\n```\n\nThe new Azure CLI 2.0 syntax:\n\n    $ az [ group ] [ subgroup ] [ command ] {parameters}\n\n\n## SORTME\n\npip install crossbarfabriccli\n\ncbf login\n\ncbf list nodes\ncbf check node\ncbf pair node\n\ncbf start worker ..\ncbf start realm ..\n\n\n## cbf init\n\nInvoking\n\n```\ncbf init\n```\n\ninitializes cbf:\n\n- if directory `$HOME/.cbf` does not exist, create it\n- if `$HOME/.cbf/config` does not exist, create a default one\n- if `$HOME/.cbf/userkey.priv|pub` exist, if not, generate them, asking for email in the course\n\nThen try login using email as `authid` and pubkey from `$HOME/.cbf/userkey.pub` as `authextra`.\n\nThe userkey pair to use can be overidden using command line options.\n\nIf no realm is specified on the command line, cbf will connect to the global realm.\n\nA user can specify a management realm to connect to, which will be necessary for all non top level actions like eg\n\n\ncbf --realm global info\n\ncbf --realm oberstet list nodes\n\nexport CBF_REALM=oberstet\n\ncbf list nodes\ncbf list workers --node node7\ncbf list components --node node7 --container container6\ncbf list realms --node node7 --router router4\n\ncbf register node --node7 <PATH TO NODE PUBLIC KEYFILE>\n\ncbf check node --node node7\ncbf check worker --node node7 --worker router4\n\ncbf start worker --node node7 myworker.json\ncbf start component --node node2 --worker container6 mycomponent.json\ncbf start realm --node node3 --worker router4 myrealm.json\ncbf start role --node node4 --worker router4 myrole.json\ncbf start permission --node node3 --worker router4 --realm realm1 mypermission.json\n\n\ncbf start component \"node=node2 container=container6 component=component4\" mycomponent.json\n\ncbf start component --path \"/node/node2/worker/container6/component/component4\" mycomponent.json\n\n\n\n# CDC CLI\n\n* Overview\n   * Introduction\n   * Installation\n   * Setup\n   * General usage\n* Configuration & Management\n   * Nodes\n      * creation\n      * modification\n      * deletion\n   * Workers\n      * General\n      * Router Workers\n         * Permissions\n      * Container Workers\n      * Transports\n      * Guest Workers\n* Monitoring\n   * Getting statistics\n   * Live monitoring\n\n\n## Overview\n\n### Introduction\n\n`cdc` is a command line interface (CLI) for Crossbar.io DevOps Center (CDC).\n\n`cdc` can be used to manage and monitor a fleet of Crossbar.io nodes remotely. `cdc` connects to CDC issuing commmands, like listing all currently running Crossbar.io nodes or start a new worker on a Crossbar.io node.\n\n'cdc' does not connect directly to Crossbar.io nodes, but works through a connection to a CDC instance:\n\n```\ncdc <COMMAND> -----> Crossbar.io DevOps Center (CDC)\n                         |\n                         v\n                         |\n                         +---> <COMMAND> --> Crossbar.io node 1\n                         +---> <COMMAND> --> Crossbar.io node 2\n                         +---> <COMMAND> --> Crossbar.io node 2\n```\n\n\n### Installation\n\n`cdc` is written in Python, using [AutobahnPython](http://autobahn.ws/python). It runs on Python 2 and Python 3, is published on the [Python Package Index](https://pypi.python.org/pypi) and is licensed under the MIT license.\n\nTo install:\n\n```console\npip install cdc\n```\n\n### Setup\n\n#### Credentials\n\nFor `cdc` to connect to the CDC Service, it needs connection and credentials information. By default, `cdc` will look for a file\n\n* `$HOME/.cdc/credentials` (Linux/Mac)\n* `%USERPROFILE%\\.cdc\\credentials` (Windows)\n\nHere is a typical credentials file with a single section for the `default` user profile:\n\n```\n[default]\ncdc_router = \"wss://cdc.crossbar.io\"\ncdc_realm = \"freetier-s04\"\ncdc_user = \"oberstet\"\ncdc_key = \"rP6G5RbKV1k1U7ZZSiXMBUOnZ4MPkeqXJ5czSLyefWM=\"\n```\n\n> Secret keys can be generated using `openssl rand -base64 32`\n\nA credential file can also contain multiple profiles:\n\n```\n[default]\ncdc_router = ws://cdc.crossbar.io:9000\ncdc_realm = cdc-oberstet-1\ncdc_user = oberstet\ncdc_key = rP6G5RbKV1k1U7ZZSiXMBUOnZ4MPkeqXJ5czSLyefWM=\n\n[local]\ncdc_router = ws://127.0.0.1:9000\ncdc_realm = cdc-oberstet-1\ncdc_user = oberstet\ncdc_key = rP6G5RbKV1k1U7ZZSiXMBUOnZ4MPkeqXJ5czSLyefWM=\n```\n\nThe profile to use can be selected via a command line option:\n\n```console\ncdc --profile=local get time\n```\n\nor by setting the environment variable `CDC_PROFILE`.\n\n**For security reasons, you should restrict access to the credentials file using file permissions so that only the owner is allowed to read (and write) the file.** In Linux, use chmod 600 to set owner-only permissions. In Windows, use the [Properties window](http://technet.microsoft.com/en-us/library/cc772196.aspx) or use the [icacls](http://technet.microsoft.com/en-us/library/cc753525%28WS.10%29.aspx) command.\n\n> cdc follows [this](http://blogs.aws.amazon.com/security/post/Tx3D6U6WSFGOK2H/A-New-and-Standardized-Way-to-Manage-Credentials-in-the-AWS-SDKs) approach to managing credentials.\n\n\n### General Usage\n\n### Help\n\nTo get global help\n\n```console\ncdc --help\n```\n\nTo get help on a command do e.g.\n\n```console\ncdc list --help\n```\n\nTo get help on a subcommand do e.g.\n\n```console\ncdc list nodes --help\n```\n\n### Tool Version\n\nTo get the version of `cdc`\n\n```console\ncdc version\n```\n\n### Testing\n\nTo test that everything is working, including connection to CDC service and your credentials, here is how to retrieve the current time (UTC) on the CDC service\n\n```console\ncdc get time\n```\n\n### Choosing your profile\n\nTo select the user profile to use for a particular command\n\n```console\ncdc --profile=bob get time\n```\n\n### Input Values\n\nMany options that need to be provided are simple string or numeric values. However, some operations require JSON data structures as input parameters.\n\nThese data structures can be given as a JSON-formatted commandline string, e.g.\n\n```console\ncdc create transport \\\n     --config='{\"type\": \"websocket\", \"endpoint\": {\"type\": \"tcp\", \"port\": 7002}}' \\\n     \"mynode.router1.transport2\"\n```\nvia standard input, e.g.\n\n```console\necho '{\"type\": \"websocket\", \"endpoint\": {\"type\": \"tcp\", \"port\": 7002}}' | \\\n     cdc create transport \"mynode.router1.transport2\" -\n```\n\nor from a file.\n\n\n## Configuration & Management\n\n'cdc' enables the creation as well as the configuration of nodes, e.g. starting routers, modifying workers and setting permissions.\n\nConfigurations are stored in the CDC database. Entries are created, modified and deleted via the respective commands (`create`, `modify`, `delete`).\n\n`create` accepts a full set of configuration data, while `modify` takes a change set. Data in the change set for existing entries results in a change of those entries, while new data results in the entry being added. It is possible to delete an entry by setting its value to `null` in a change set.\n\nThe configuration does not contain any configuration data for sub-entities, e.g. the configuration passed when creating a router worker does not contain information about realms. (The `cdc` is mainly intended to affect small changes on a running node.)\n\nAn entity in the CDC database can be run (by doing `start`), and the current configuration will apply (entities can only be run if their containing entity is running, e.g. a realm can only be started if the router worker it is on is already running). A cyle of `stop` and `start` restarts with the current settings (there's also `restart` which does this with a single command).\n\nStarting an entity as a default also starts all its sub-entities recursively, e.g. when starting a worker, realms and transports configured within this worker are also started, as are the roles within the realms. To start an entity without the contained sub-entities, e.g. when debugging to see what sub-entity causes problems, set the option `recursive='false'`.\n\n`delete`, when applied to a running entity, defaults to stopping the entity and then deleting it from the database. This default can be overriden with --dontstop, in which case trying to delete a running instance returns an exception.\n\nThere are instances where modifications can be applied without a restart of the entity. The `apply` command checks whether this is possible. As a default, if the change set as a whole does not require a restart, it is applied, else an exception is returned. If the `--restart` option is set, then a restart is done if necessary.\n\nAll configuration commands give immediate feedback about the outcome of the operation. In addition, the 'cdc' allows the monitoring of activities, which is described further on here.\n\n\n### Nodes\n\nNodes as the term is used here are all Crossbar.io instances which exist on a management realm. The existence of a node does not require it to be currently running - its configuration can  simply be stored in the CDC database.\n\nIn the following, we'll go throught the lifecycle of a node.\n\n#### Creating\n\nA node is created by doing:\n\n```console\ncdc create node <node_id> <node_config>\n```\n\n<node_id> is a string which is later used to identify and address the node. This needs to be unique within the management realm.\n\nIf no <node_id> is given, then the CDC automatically assigns a unique name (e.g. \"mynode23\").\n\n<node_config> is a JSON data structure which contains the necessary data to connect to the CDC.\n\nIf no configuration data is given, then the CDC automatically creates a default working set of data for the current user and realm.\n\nA sample configuration is:\n\n```javascript\n{\n   \"key\": \"rffeuCOKDeeKDzIDFo+v2PG8/n9rtSSa8PLQOMiL1ZM=\",\n   \"realm\": \"cdc-oberstet-1\",\n   \"transport\": {\n       \"type\": \"websocket\",\n       \"url\": \"ws://localhost:9000\",\n       \"endpoint\": {\n           \"type\": \"tcp\",\n           \"host\": \"127.0.0.1\",\n           \"port\": 9000\n       }\n   }\n}\n```\n\n#### Starting\n\nNodes cannot be started by the CDC - since without a node there's no entity to receive a `start`command.\n\nWhen you start a node (manually, via script etc.), it can only connect to the CDC if its connection data establishes a transport to the CDC and it has the required authentication key.\n\n#### Stopping\n\nTo stop a running node do\n\n```console\ncdc stop node <node_id>\n```\n\n<node_id> is the id of the node unique in the realm.\n\nStopping a node does not delete it - the node configuration in the database persists. Be aware though that this configuration may have been modified while the node was running, and that in these cases starting the node again will not restore the node as it was at the time it was stopped.\n\n#### Modifying\n\nTo modify a node do\n\n```console\ncdc modify node <node_id> <change_set>\n```\n\nwhere <node_id> is the id of the node unique in the realm.\n\nThe <change_set> is a JSON data structure, which can contain any subset of the configuration data for the node connection, e.g.\n\n```javascript\n{\n   \"transport\": {\n       \"endpoint\": {\n           \"port\": 8080\n       }\n   }\n}\n```\n\nwhich would change the transport port from `9000` (as seen in the example configuration for `create`) to `8080`.\n\n\n#### Deleting\n\nTo delete a node, do\n\n```console\ncdc delete node <node_id>\n```\n\nDeleting a node erases the node configuration from the CDC database, and drops the connection to the node.\n\nThe `--stopnode` option stops the node before dropping the connection. Otherwise you're free to manage this on your own (if you want).\n\n\n#### Attaching an existing node\n\nYou can create and then configure a node from the command line (or via the WebUI), but there may be cases where you've started with a local configuration and now want to connect this existing node to the CDC.\n\nThis can, on the mere connection level, be done simply by shutting down the node, creating a node on the CDC, adding the connection data to the node configuration and starting it again.\n\nThis does not, however, copy the node configuration into the CDC database, so that there's no easy way to modify your existing configuration from then on, since modifications always involve the CDC database.\n\nIf you're in a terminal on the machine running the Crossbar.io node, in the directory containing the Crossbar.io configuration, you can do\n\n```console\ncdc attach node <node_id>\n```\n\nThis creates a node in the CDC database, copies the connection data into the local configuration, and copies the local configuration into the database.\n\n<node_id> is optional - if omitted, the CDC just assigns an ID.\n\n`--restart` - if you set this option, the 'cdc' additionally stops the Crossbar.io node and restarts it (this is possible here since the command is executed in the node directory).\n\n\n### Workers\n\nThere are three types of workers: routers, containers and guest workers. They all run within an Crossbar.io node, and a node can run multiple workers, in any mix of types.\n\nWe'll first go over the purpose of these and some of the basic differences and then take a look at the lifecycle of each of the three types in turn.\n\nCrossbar.io's main purpose is as a WAMP router. The Crossbar.io process at startup, however, is basically just a shell which is used to run workers (though the mechanics of this shell use WAMP under the hood, and indeed include an internal WAMP router). The WAMP application routing is done by a worker - the router worker (and you can have more than one of these in a Crossbar.io node).\n\nIn addition to the WAMP application routing, Crossbar.io can be used to host application components. This means that you can use Crossbar.io to e.g. spin up the entire backend of a WAMP application as part of the startup of the router, using a single configuration.\n\nFor hosting application components there are three options:\n\n - side-by-side components as part of a router worker;\n - container workers;\n - and guest workers.\n\nUsually these components will be part of a WAMP application and connect to a WAMP router (which may run within the same Crossbar.io node, but doesn't need to), but . You can also run a Crossbar.io node without a router worker, just containing container workers and/or guest workers.\n\n##### Side-by-Side and Container Workers\n\nThe side-by-side and container worker options both require the application component to be written using the same technical basis as Crossbar.io: Python and the Twisted framework. (Since currently Twisted is not yet fully supported on Python 3, this means Python 2.7.x or PyPy. Support for Python 3 is underway though).\n\nSide-by-side components run *within* a router worker process (so see there for details), while container workers run in a process of their own. In both cases the common technological basis allows tighter integration and more control than with guest workers.\n\n##### Guest Workers\n\nGuest workers can host application components using any runtime available on the system (including Python). A pure Python 3 application, for example, or a C++ component using AutobahnCpp. You can also run components that are not connected to your application via WAMP (an example for this would be an image processor which just watches a directory and converts images as they come in so that they can be used by the application).\n\nControl and integration here is limited to what can be achieved using standard system mechanisms.\n\n#### Router Worker\n\nA router worker mainly routes WAMP application traffic, but can also host Python/Twisted application components.\n\n##### Creating\n\nYou create a router worker on a specific node by doing\n\n```console\ncdc create router <full_router_id> <router_config>\n```\n\nThe <full_router_id> is the fully qualified path which is required to address the router worker, i.e. a combination of the <node_id> and a <router_id>, e.g.\n\n```console\ncdc create router mynode1.router66\n```\n\nwhere the <router_id> needs to be unique within the node.\n\nIf just the <node_id> is given, the then CDC backend assigns a unique ID.\n\nThe <router_config> is a JSON data structure which contains the configuration options for the router, e.g.\n\n--- add router config example ---\n\nIf no <router_config> is given, then the router starts up as a shell without the possibility for clients to connect. The necessary configuration can then be done in parts (see Realms and Transports below).\n\nCreating a router worker creates an entry in the CDC database. It does not start up the router.\n\n##### Starting\n\nTo start a router based on an entry in the CDC database, do\n\n```console\ncdc start router <full_router_id>\n```\n\nwhere the <full_router_id> consists of a <node_id> and a <router_id>, e.g.\n\n```console\ncdc start router mynode1.router66\n```\n\n##### Stopping\n\nTo stop a running router do\n\n```console\ncdc stop router <full_router_id>\n```\n\nwhere the <full_router_id> consists of a <node_id> and a <router_id>, e.g.\n\n```console\ncdc stop router mynode1.router66\n```\n\n##### Modifying\n\nTo modify the configuration of an existing router worker, do\n\n```console\ncdc modify router <full_router_id> <change_set>\n```\n\nwhere the <full_router_id> consists of a <node_id> and a <router_id>.\n\nThe <change_set> is required and can be a full replacement for the current router configuration, or contain one or more of options, realms, transports and components. Each of these subsets replaces the current set in the configuration in its entirety. For more fine-grained modifications of realms or transports, see the respective sections below.\n\nModifying a router worker modifies the entry for that worker in the CDC database. These changes do not directly affect a running worker. They will be applied on a restart or a relaunch.\n\n##### Reloading\n\nChanges to a router modification are naturally applied on a restart, and a restart is indeed required for some modifications to take effect. Other modifications may, however, be applied without this. To use this possibility, do\n\n```console\ncdc reload router <full_router_id> restart='true'\n```\n\nThis checks whether the current modifications to the router configuration can be applied without a restart of the router. If this is the case, then the changes are applied.\n\nIf the changes require a restart, then the outcome is determined by the `restart`argument. If this is set to `true`, the router is restarted, if `false` then the changes in their entirety are not applied.\n\n##### Deleting\n\nTo delete a router, do\n\n```console\ncdc delete router <full_router_id>\n```\n\nThis deletes the router's entry from the CDC database. If the router is currently running, it stops the router before the deletion of the database entry.\n\n##### Realms\n\nWAMP routing occurs within realms, i.e. messages are only routed between client sessions connected to the same realm. In order for a router worker to do application routing, at least one realm needs to be configured.\n\n   * Creating\n\n   To create a realm, do\n\n   ```console\n   cdc create realm <full_realm_path> <realm_config>\n   ```\n\n   where full realm path comprises <node_id>, <router_id> and <realm_id>. The <realm_id> must be unique within the scope of the router. If no <realm_id> is given, then the CDC backend creates one.\n\n   As an example\n\n   ```console\n   cdc create realm mynode1.router66.realm1\n   ```\n\n   The <realm_config> is a JSON data structure containing the roles and their permissions defined on the realm. If no <realm_config> is given, then the realm is created as a shell, and no connections to the realm are possible until at least one role has been defined for the realm (see below).\n\n   --- add sample realm config ---\n\n   The creation of a realm creates an entry in the CDC database. It does not start the realm.\n\n   * Starting\n\n   To start a realm do\n\n   ```console\n   cdc start realm <full_realm_path>\n   ```\n\n   * Stopping\n\n   To stop a realm do\n\n   ```console\n   cdc stop realm <full_realm_path>\n   ```\n\n   * Modifying\n\n   To modify a realm do\n\n   ```console\n   cdc modify realm <full_realm_path> <change_set>\n   ```\n\n   where the <change_set> is either a full realm configuration, a change in the name of the realm, or a set of roles which replaces the current set. If you want to add, remove or modify permissions or roles, use the more specific mechanisms described further below.\n\n   * Reloading\n\n? is there a reloading? The realm is not something which runs, but which exists on the router. It is always possible to change this without a restart of the router. adding roles is always possible without affecting anything currently running, while removing roles would kill connections. The question here is not 'restart' but 'apply if this affects current connections' ???\n\n\n   * Deleting\n\n   To delete a realm do\n\n   ```console\n   cdc delete realm <full_realm_path>\n   ```\n\n   This deletes the realm from the CDC database. If the realm is currently running, it stops the realm before the deletion.\n\n\n? does the CLI allow the control of roles and permissions, or do we end this at the realm level ?\n\n##### Transports\n\nRealms are what WAMP clients connect to logically, transports are how they connect technically. To fulfill its function, a router worker requires at least one transport. For the different types of transports and the available options see the Crossbar.io documentation.\n\n   * Creating a Transport\n\n   To create a transport, do\n\n   ```console\n   cdc create transport <full_transport_path> <transport_config>\n   ```\n\n   where the <full_transport_path> is consists of <node_id>, <router_id>, <realm_id> and <transport_id>, e.g.\n\n   ```console\n   cdc create transport mynode1.router66.realm1.transport2\n   ```\n\n   The <transport_id> must be unique within the realm. If no <transport_id> is given, the CDC backend creates one.\n\n   The <transport_config> is required and is a JSON data structure, e.g.\n\n   --- add transport config example ---\n\n   Creating a transport creates an entry in the CDC database. It does not start the transport.\n\n   * Starting a Transport\n\n   To start a transport do\n\n   ```console\n   cdc start transport <full_transport_path>\n\n   * Stopping a Transport\n\n   To stop a transport do\n\n   ```console\n   cdc stop transport <full_transport_path>\n\n   * Modifying a Transport\n\n   To modify a transport do\n\n   ```console\n   cdc modify transport <full_transport_path> <change_set>\n   ```\n\n   where the <change_set> is either a full transport configuration, a change in the name of the transport, or a set of the remaining configuration options which replaces the current set.\n\n   Modifying a transport modifies the entry in the CDC database, but these changes are not applied to a running transport.\n\n   * Reloading a Transport\n\n   To reload a transport do\n\n   ```console\n   cdc reload transport <full_transport_path> --restart='true'\n   ```\n\n   This checks whether the current modifications to the transport configuration can be applied without a restart of the transport. If this is the case, then the changes are applied.\n\n   If the changes require a restart, then the outcome is determined by the `restart`argument. If this is set to `true`, the transport is restarted, if `false` then the changes in their entirety are not applied.\n\n   * Deleting a Transport\n\n   To delete a transport do\n\n   ```console\n   cdc delete transport <full_transport_path>\n   ```\n\n   This deletes the transport from the CDC database. If the transport is currently running, it stops the transport before the deletion.\n\n##### Components\n\nIn addition to the router functionality, a router worker can host Python/Twisted application components. These run in the same process as the router worker.\n\n   * Creating a Component\n   * Starting a Component\n   * Stopping a Component\n   * Modifying a Component\n   * Reloading a Component\n   * Deleting a Component\n\n\n#### Container Worker\n\nContainer workers can host Python/Twisted application components. All components hosted within a container run within the same system process. Since multiple containers can run on separate cores, containers allow scale-up on a machine running a node. Since there is no need for containers to run within the same node as a router they connect to, WAMP applications running in containers can also scale out.\n\n##### Creating a Container Worker\n\n\n\n##### Starting a Container Worker\n\n\n\n##### Stopping a Container Worker\n\n\n\n##### Modifying a Container Worker\n\n\n\n##### Relaunching a Container Worker\n\n\n\n##### Deleting a Container Worker\n\n\n\n#### Transports\n\n\n\n\n#### Guest Worker\n\nGuest workers offer the possibility to host application components for any available runtime in Crossbar.io.\n\n\n##### Creating a Guest Worker\n\n\n\n##### Starting a Guest Worker\n\n\n\n##### Stopping a Guest Worker\n\n\n\n##### Modifying a Guest Worker\n\n\n\n##### Relaunching a Guest Worker\n\n\n\n##### Deleting a Guest Worker\n\n\n\n\n\n\n\n## Monitoring\n\n'cdc' enables the monitoring of nodes or components running in a node, e.g. the CPU usage or network traffic, the addition of workers and changes to permissions.\n\nmain use cases:\n\n- admin wants to check on the health: components running, CPU usage, network usage etc.\n- admin wants to check on a problem: get the log of a node or worker\n- developer wants to debug an application: get the log of a node, but more likely worker, transport, traffic for a role, URI\n\nOutput would be simple, e.g. a new line with CPU usage added once a second, log lines getting printed as the logging occurs in the CDC.\n\nWe do not offer the dynamic monitoring, e.g. for realms being added, that the Web UI does.\n\n\n### Listing nodes\n\nTo list all nodes configured in the management realm connected to (whether the node is \u00e7urrently running or not):\n\n```console\ncdc list nodes\n```\n\nTo list only running nodes:\n\n```console\ncdc list nodes --filter_running\n```\n\nTo list nodes using JSON as output format:\n\n```console\ncdc list nodes --output=json\n```\n\n### Listing workers\n\nTo list all workers configured on the given node (whether the worker is currently running or not)\n\n```console\ncdc list workers mynode\n```\n\nTo list only workers which are currently running\n\n```console\ncdc list workers mynode --filter_running\n```\n\nTo list workers using JSON as output format:\n\n```console\ncdc list workers mynode --output=json\n```\n\n### Getting logs\n\n`cdc` allows to remotely tap into the live log stream produced by Crossbar.io nodes and node workers.\n\nE.g. when running a guest or container worker that hosts WAMP application components, you might want to get access to log messages produced by such components.\n\nFeatures:\n\n- Tail the node log\n- Tail a specific worker log\n- Get the (complete) current node log\n- Get an archived node log\n- Filter by loglevel (only return stuff >= given loglevel)\n\nOpen questions:\n\n- Tail (obviously) only works for nodes and workers currently running\n- Get log _might_ also work when the node/worker is offline if we perstist the logs in the service database - OPEN\n\nPossible command syntax (DRAFT):\n\n```console\ncdc tail log  log mynode.myworker\n```\n\n\n```console\ncdc get log mynode.myworker\n```\n\n```console\ncdc log worker mynode.myworker\n```\n\n```console\ncdc log worker mynode.myworker --tail=100\n```\n\n```console\ncdc log worker mynode.myworker --\n```\n\n------------------------------------\n\n# CLI Overview\n\nThe following notes are presently meant to provide a feel for how the current approach to CLI command structure feels - and works across the range of necessary actions for fully configuring Crossbar.io.\n\nIt should serve as the basis for future documentation.\n\n\n## Management Realms\n\nWhen initially started, the CLI works in the global management context.\n\nFor any actions on Crossbar.io nodes, it is first necessary to either specify the management realm in which commands should be perfomed, or to create such a realm.\n\n```\njoin management-realm oberstet\n```\n\nThe above joins the existing realm `oberstet`. After joining, all commands apply within this mangement realm, until the realm is left.\n\n```\ncreate management-realm goeddea\n```\n\nThis creates a new management realm 'goeddea'. The management realm needs to be joined afterwards.\n\n```\nleave management-realm\n```\n\nThis leaves a currently joined management realm. (No extra argument is needed here since the context is clear from within the management realm. There are no cross-realm commands).\n\nTo destroy an existing management realm, do\n\n```\ndestroy management-realm goeddea\n```\n\nand then affirm the confirmation request.\n\n\n## Node pairing\n\nA management realm allows operations on any Crossbar.io nodes connected to it.\n\nOnce you have joined a realm, you can list the nodes currently paired to the realm by doing\n\n```\npair node --pubkey XXX node1\n```\n\nThe node is identified by its public key (\"XXX\"), which is created at startup, and \"node1\" could be replaced by any node ID which is unqiue within the present management realm. (Node IDs need to be a string with permitted characters YYYY).\n\nTo unpair a node, do\n\n```\nunpair node node1\n```\n\n## CLI Command Basics\n\nCLI commands which operate on node resources (i.e. everything you do in the CLI except for the above commands) have the structure\n\n```\n<action> <resource-type> [options] <resource-path>\n```\n\nAn action is selected, a resource type to perform this action on or with and the options for this are given, and the final argument is the path to the resource which is either created or, for existing resources, to which the action is applied.\n\nExamples:\n\n```\nstart worker --type router node1 router1\n```\n\n> Question: Since \"stop\" is listed as a command verb, would the above start the worker \"router1\" is this was existent and stopped, and create the worker if it did not exist? Or does \"start\" really mean \"create & run\", and stop \"stop & destroy\"?\n\n```\nlist worker node1\n```\n\nlists all workers on `node1`.\n\n> Question: Do we keep the singular \"worker\", \"permission\" etc. here, so that each resource type is always referred to by the same identifier, or do we use the grammatically correct \"workers\", \"permissions\" etc.? \"list permission\" feels wrong.\n\n\n## Node commands\n\nNodes can be created, started, stopped and destroyed, e.g.\n\n```\ncreate node node1\nstart node node1\n```\n\n```\nstop node node34\ndestroy node node34\n```\n\nAfter a node has been created, resources on the node can be created (see below).\n\nTo get a list of nodes which are paired with the current management realm, do\n\n```\nlist nodes\n```\n> Question: Again the issue of singular vs. plural comes up.\n\nTo get information about a particular node, do\n\n```\nshow node node1\n```\n\n\n## Resource structure within node\n\nThe resource structure is that which is also the basis for the Crossbar.io configuration file, i.e.\n\n    +-- CONTROLLER (this singleton process always runs)\n    |\n    +-- WORKER [SUBTYPE ROUTER]\n         |\n         +-- REALM (Crossbar.io Realm)\n               |\n               +-- ROLE\n                     |\n                     +-- PERMISSION\n         |\n         +-- TRANSPORT\n               |\n               +-- RESOURCE (only for Web Transports)\n         |\n         +-- COMPONENT (same Python only; danger zone)\n    |\n    +-- WORKER [SUBTYPE PROXY] (Crossbar.io Fabric only; scale up/out)\n         |\n         +-- TRANSPORT\n    |\n    +-- WORKER [SUBTYPE CONTAINER]\n         |\n         +-- COMPONENT (same Python only)\n    |\n    +-- WORKER [SUBTYPE GUEST] (arbitrary executable)\n    |\n    +-- WORKER [SUBTYPE DOCKER] (Crossbar.io Fabric only)\n\nIn the following, we will go over each of the resources and its subresources in turn.\n\n### Controller\n\nThe contoller is started automatically as a necessary part of the node. It keeps the connection with Crossbar.io Fabric and executes instructions from there.\n\nNo configuration or other actions are required regarding the controller.\n\n### Router Worker\n\nWhen started up via the CLI, a Crossbar.io node only contains the controller. In order to do any WAMP routing for applications, you need to start up at least one worker of type `router`. Application components connect to a router worker\n\n    start worker --type router node1 router1\n\nHere we see the resource path for the first time, in this case `node1 router1`. The router worker is started on `node1`.\n\n#### Realms\n\n\n\n##### Roles\n\n###### Permissions\n\n\n#### Transports\n\n##### WebSocket Transport\n\n##### Web Transport\n\n#####\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://crossbario.com",
    "keywords": "crossbar.io crossbar wamp router cli administration management",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "crossbarfabricshell",
    "platform": "Any",
    "project_url": "https://pypi.org/project/crossbarfabricshell/",
    "release_url": "https://pypi.org/project/crossbarfabricshell/17.8.1.dev1/",
    "requires_dist": [
      "tabulate (>=0.7.7)",
      "pyyaml (>=3.12)",
      "pygments (>=2.2.0)",
      "prompt-toolkit (>=1.0.13)",
      "humanize (>=0.5.1)",
      "colorama (>=0.3.7)",
      "click (>=6.7)",
      "autobahn[encryption,serialization,asyncio] (>=17.7.1)"
    ],
    "requires_python": "",
    "summary": "Crossbar.io Fabric command line interface (CLI).",
    "version": "17.8.1.dev1"
  },
  "releases": {
    "17.8.1.dev1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8e60025a6a8b2994beed5c5c07333d39",
          "sha256": "5a600161b4e6d94899f10c1c47cce8c0ec4c4bce6ad02514e069ffbe31d69a20"
        },
        "downloads": 0,
        "filename": "crossbarfabricshell-17.8.1.dev1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e60025a6a8b2994beed5c5c07333d39",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 63138,
        "upload_time": "2017-08-07T14:14:16",
        "url": "https://files.pythonhosted.org/packages/96/0d/6339ce53b52e584fe1502728c12bf2138f3a6d72ee365e4d737641b05cd4/crossbarfabricshell-17.8.1.dev1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c53702f6526af010075fda4408a899e6",
          "sha256": "20ec1f38d22f1d7c16e04fc25aaa7cef4dd7372acfbab184791f70e7bafb06a7"
        },
        "downloads": 0,
        "filename": "crossbarfabricshell-17.8.1.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "c53702f6526af010075fda4408a899e6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 51106,
        "upload_time": "2017-08-07T14:14:18",
        "url": "https://files.pythonhosted.org/packages/d3/a2/503e784cd84f7087ea3921b122e552bf5fe59c41efaeaca1d95ad92b4667/crossbarfabricshell-17.8.1.dev1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8e60025a6a8b2994beed5c5c07333d39",
        "sha256": "5a600161b4e6d94899f10c1c47cce8c0ec4c4bce6ad02514e069ffbe31d69a20"
      },
      "downloads": 0,
      "filename": "crossbarfabricshell-17.8.1.dev1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8e60025a6a8b2994beed5c5c07333d39",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 63138,
      "upload_time": "2017-08-07T14:14:16",
      "url": "https://files.pythonhosted.org/packages/96/0d/6339ce53b52e584fe1502728c12bf2138f3a6d72ee365e4d737641b05cd4/crossbarfabricshell-17.8.1.dev1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "c53702f6526af010075fda4408a899e6",
        "sha256": "20ec1f38d22f1d7c16e04fc25aaa7cef4dd7372acfbab184791f70e7bafb06a7"
      },
      "downloads": 0,
      "filename": "crossbarfabricshell-17.8.1.dev1.tar.gz",
      "has_sig": false,
      "md5_digest": "c53702f6526af010075fda4408a899e6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 51106,
      "upload_time": "2017-08-07T14:14:18",
      "url": "https://files.pythonhosted.org/packages/d3/a2/503e784cd84f7087ea3921b122e552bf5fe59c41efaeaca1d95ad92b4667/crossbarfabricshell-17.8.1.dev1.tar.gz"
    }
  ]
}