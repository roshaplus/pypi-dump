{
  "info": {
    "author": "Michael Dacre",
    "author_email": "mike.dacre@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Clustering",
      "Topic :: System :: Monitoring"
    ],
    "description": "####\nFyrd\n####\n\nOne liner script and function to torque, slurm, or a local machine with\ndependency tracking using python. Uses the same syntax irrespective of cluster\nenvironment!\n\n.. image:: http://i.imgur.com/NNbprZH.png\n   :alt: fyrd cluster logo \u2014 a Saxon shield remeniscent of those used in fyrds\n   :target: https://fyrd.readthedocs.org\n   :height: 200\n   :width: 200\n\n+---------+----------------------------------------------------+\n| Author  | Michael D Dacre <mike.dacre@gmail.com>             |\n+---------+----------------------------------------------------+\n| License | MIT License, property of Stanford, use as you wish |\n+---------+----------------------------------------------------+\n| Version | 0.6.1-beta.8                                       |\n+---------+----------------------------------------------------+\n\n\n.. image:: https://badge.buildkite.com/b6659b460caf5205919916c4e9d212c4e04d4301fa55a51180.svg?branch=master\n   :target: https://buildkite.com/mikedacre/fyrd-cluster-tests\n.. image:: https://travis-ci.org/MikeDacre/fyrd.svg?branch=master\n   :target: https://travis-ci.org/MikeDacre/fyrd\n.. image:: https://api.codacy.com/project/badge/Grade/c163cff81a1941a18b2c5455901695a3\n   :target: https://www.codacy.com/app/mike-dacre/fyrd?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=MikeDacre/fyrd&amp;utm_campaign=Badge_Grade\n\n.. image:: https://readthedocs.org/projects/fyrd/badge/?version=latest\n   :target: https://fyrd.readthedocs.io/\n\n.. image:: https://img.shields.io/badge/python%20versions-2.7%203.4%203.5%203.6%203.7-brightgreen.svg\n   :target: https://fyrd.science\n.. image:: https://requires.io/github/MikeDacre/fyrd/requirements.svg?branch=master\n   :target: https://requires.io/github/MikeDacre/fyrd/requirements/?branch=master\n   :alt: Requirements Status\n\n\nAllows simple job submission with *dependency tracking and queue waiting* on\neither torque, slurm, or locally with the multiprocessing module. It uses simple\ntechniques to avoid overwhelming the queue and to catch bugs on the fly.\n\nIt is routinely tested on Mac OS and Linux with slurm and torque clusters, or\nin the absence of a cluster, on Python versions `2.7.10`, `2.7.11`, `2.7.12`,\n`3.3.0`, `3.4.0`, `3.5.2`, `3.6.2`, and `3.7-dev`. The full test suite is\navailable in the `tests` folder.\n\nFyrd is pronounced 'feared' (sort of), it is an Anglo-Saxon term for an army,\nparticularly an army of freemen (in this case an army of compute nodes). The\nlogo is based on a Saxon shield commonly used by these groups. This software\nwas formerly known as 'Python Cluster'.\n\nFor usage instructions and complete documentation see `the documentation site\n<https://fyrd.readthedocs.io>`_ and the `fyrd_manual.pdf\n<https://github.com/MikeDacre/fyrd/blob/master/docs/fyrd_manual.pdf>`_ document\nin this repository.\n\n.. contents:: **Contents**\n\nOverview\n========\n\nThis library was created to make working with torque or slurm clusters as easy\nas working with the multiprocessing library. It aims to provide:\n\n- Easy submission of either python functions or shell scripts to torque or slurm\n  from within python.\n- Simple dependency tracking for jobs.\n- The ability to submit jobs with any of the torque or slurm keyword arguments.\n- Easy customization.\n- Very simple usage that scales to complex applications.\n- A simple queue monitoring API that functions identically with torque and slurm\n  queues.\n- A fallback local mode that allows code to run locally using the multiprocessing\n  module without needing any changes to syntax.\n\nTo do this, all major torque and slurm keyword arguments are encoded in dictionaries\nin the `fyrd/options.py` file using synonyms so that all arguments are standardized\non the fly. Job management is handled by the `Job` class in `fyrd/job.py`, which\naccepts any of the keyword arguments in the options file. To make submission as simple\nas possible, the code makes used of profiles defined in the `~/.fyrd/profiles.txt`\nconfig file. These allow simple grouping of keyword arguments into named profiles to\nmake submission even easier. Dependency tracking is handled by the `depends=`\nargument to `Job`, which accepts job numbers or `Job` objects, either singularly or\nas lists.\n\nTo allow simple queue management and job waiting, a `Queue` class is\nimplemented in `fyrd/queue.py`. It uses iterators, also defined in that file,\nto parse torque or slurm queues transparently and allow access to their\nattributes through the `Queue` class and the `Queue.jobs` dictionary. The `Job`\nclass uses this system to block until the job completes when either the\n`wait()` or `get()` methods are called.\n\nTo allow similar functionality on a system not connected to a torque or slurm\nqueue, a local queue that behaves similarly, including allowing dependency\ntracking, is implemented in the `fyrd/jobqueue.py` file. It is based on\nmultiprocessing but behaves like torque.  It is not a good idea to use this\nmodule in place of multiprocessing due to the dependency tracking overhead, it\nis primarily intended as a fallback, but it does work well enough to use\nindependently.\n\nAs all clusters are different, common alterable parameters are defined in a\nconfig file located at `~/.fyrd/config.txt`. This includes an option for max\nqueue size, which makes job submission block until the queue has opened up,\npreventing job submission failure on systems with queue limits (most clusters).\n\nTo make life easier, a bunch of simple wrapper functions are defined in\n`fyrd/basic.py` that allow submission without having to worry about using the\nclass system, or to submit existing job files. Several helper function are also\ncreated in `fyrd/helpers.py` that allow the automation of more complex tasks,\nlike running `apply` on a pandas dataframe in parallel on the cluster\n(`fyrd.helpers.parapply()`).\n\nThe end result is that submitting 10 thousand very small jobs to a small cluster\ncan be done like this:\n\n.. code:: python\n\n   jobs = []\n   for i in huge_list:\n       jobs.append(fyrd.Job(my_function, (i,), profile='small').submit())\n   results = []\n   for i in jobs:\n       results.append(i.get())\n\nThe results list in this example will contain the function outputs, even if those\noutputs are integers, objects, or other Python types. Similarly, shell scripts can\nbe run like this:\n\n.. code:: python\n\n   script = r\"\"\"zcat {} | grep \"#config\" | awk '{split($1,a,\".\"); print a[2]\"\\t\"$2}'\"\"\"\n   jobs   = []\n   for i in [i for i in os.listdir('.') if i.endswith('.gz')]:\n       jobs.append(fyrd.Job(script.format(i), profile='long').submit())\n   results = []\n   for i in jobs:\n       i.wait()\n       results.append(i.stdout)\n\nResults will contain the contents of STDOUT for the submitted script\n\nHere is the same code with dependency tracking:\n\n.. code:: python\n\n   script = r\"\"\"zcat {} | grep \"#config\" | awk '{split($1,a,\".\"); print a[2]\"\\t\"$2}'\"\"\"\n   jobs   = []\n   jobs2  = []\n   for i in [i for i in os.listdir('.') if i.endswith('.gz')]:\n       j = fyrd.Job(script.format(i), profile='long').submit()\n       jobs.append(j)\n       jobs2.append(fyrd.Job(my_function, depends=j).submit())\n   results = []\n   for i in jobs2:\n       i.wait()\n       results.append(i.out)\n\nAs you can see, the `profile` keyword is not required, if not supplied the\ndefault profile is used. It is also important to note that `.out` will contain\nthe same contents as `.stdout` for all script submissions, but for function\nsubmissions, `.out` contains the function output, not STDOUT.\n\nInstallation\n-------------\n\nThis module will work with Python 2.7+ on Linux and Mac OS systems.\n\nThe betas are on PyPI, and can be installed directly from there:\n\n.. code:: shell\n\n   pip install fyrd\n   fyrd conf init\n\nTo install a specific tag from github, do the following:\n\n.. code:: shell\n\n   pip install https://github.com/MikeDacre/fyrd/archive/v0.6.1-beta.7.tar.gz\n   fyrd conf init\n\nTo get the latest version:\n\n.. code:: shell\n\n   pip install https://github.com/MikeDacre/fyrd/tarball/master\n   fyrd conf init\n\nThe `fyrd conf init` command initializes your environment interactively by\nasking questions about the local cluster system.\n\nI recommend installing using pyenv in a pyenv anaconda environment, this will\nmake your life much simpler, but is not required.\n\nIn general you want either `pyenv <https://github.com/yyuu/pyenv>`_ or user\nlevel install (`pip install --user`) even if you have sudo access, as most\ncluster environments share /home/<user> across the cluster, making this module\navailable everywhere.\n\nImporting is simple:\n\n.. code:: python\n\n  import fyrd\n\nPrerequisites\n.............\n\nThis software requires two external modules:\n- `dill <https://pypi.python.org/pypi/dill>`_ \u2014  which makes function submission more stable\n- `tabulate <https://pypi.python.org/pypi/tabulate>`_ \u2014  allows readable printing of help\n\nCluster Dependencies\n....................\n\nIn order to submit functions to the cluster, this module must import them on the\ncompute node. This means that all of your python modules must be available on\nevery compute node.\n\nBy default, the same python executable used for submission is used on the\ncluster to run functions, however, this can be overridden by the\n'generic_python' option on the cluster. If using this option, you must install\nall of your local modules on the cluster also.\n\nTo avoid pain and debugging, you can do this manually by running this on your\nlogin node:\n\n.. code:: shell\n\n  freeze --local | grep -v '^\\-e' | cut -d = -f 1 > module_list.txt\n\nAnd then on the compute nodes:\n\n.. code:: shell\n\n  cat module_list.txt | xargs pip install --user\n\nAlternately, if your pyenv is available on the cluster nodes, then all of\nyour modules are already available, so you don't need to worry about this!\n\n\nTesting\n=======\n\nTo fully test this software, I use `py.test` tests written in the tests folder.\nUnfortunately, local queue tests do not work with `py.test`, so I have separated\nthem out into the `local_queue.py` script. To run all tests, run `python\ntests/run_tests.py`.\n\nTo ensure sensible testing always, I use `buildkite <https://buildkite.com>`_,\nwhich is an amazing piece of software. It integrates into this repository and\nruns tests on all python versions I support on my two clusters (a slurm cluster\nand a torque cluster) every day and on every push or pull request. I also use\n`travis ci <travis-ci.org>`_ to run local queue tests, and\n`codacy <https://www.codacy.com/>`_ and\n`scrutinizer <https://scrutinizer-ci.com/>`_ to monitor code style.\n\nAll code in the master branch must pass the travis-ci and buildkite tests, code\nin dev also *usually* passes those test, but it is not guaranteed. All other\nbranches are unstable and will often fail the tests.\n\nReleases\n========\n\nI use the following work-flow to release versions of fyrd:\n\n1. Develop new features and fix new bugs in a feature branch\n2. Write tests for the new feature\n3. When all tests are passing, merge into dev\n4. Do more extensive manual testing in dev, possibly add additional\n   commits.\n5. Repeat the above for other related features and bugs\n6. When a related set of fixes and features are done and well tested,\n   merge into master with a pull request through github, all travis and \n   buildkite tests must pass for the merge to work.\n7. At some point after the new features are in master, add a new tagged\n   beta release.\n8. After the beta is determined to be stable and all issues attached to\n   that version milestone are resolved, create a non-beta tag\n\nNew releases are added when enough features and fixes have accumulated to\njustify it, new minor version are added only when there are very large changes\nin the code and are always tracked by milestones.\n\nWhile this project is still in its infancy, the API cannot be considered stable\nand the major version will remain 0. once version 1.0 is reached, any API\nchanges will result in a major version change.\n\nAs such, and non-beta release can be considered stable, beta releases and the\nmaster branch are very likely to be stable, dev is usually but not always\nstable, all other branches are very unstable.\n\nIssues and Contributing\n=======================\n\nIf you have any trouble with this software add an issue in\nhttps://github.com/MikeDacre/fyrd/issues\n\nFor peculiar technical questions or help getting the code installed, email\nme at `mike.dacre@gmail.com <mailto:mike.dacre@gmail.com>`_.\n\nI am always looking for help with this software, and I will gladly accept\npull requests. In particular, I am looking for help with:\n\n- Testing the code in different cluster environments\n- Expanding the list of keyword options\n- Adding new clusters other than torque and slurm\n- Implementing new features in the issues section\n\nIf you are interested in helping out with any of those things, or if you would\nbe willing to give me access to your cluster to allow me to run tests and port\nfyrd to your environment, please contact me.\n\nIf you are planning on contributing and submitting a pull request, please\nfollow these rules:\n\n- Follow the code style as closely as possible, I am a little obsessive about\n  that\n- If you add new functions or features:\n  - Add some tests to the test suite that fully test your new feature\n  - Add notes to the documentation on what your feature does and how it works\n- Make sure your code passes the full test suite, which means you need to run\n  `python tests/run_tests.py` from the root of the repository at a bare\n  minimum. Ideally, you will install pyenv and run `bash tests/pyenv_tests.py`\n- Squash all of your commits into a single commit with a well written and\n  informative commit message.\n- Send me a pull request to either the `dev` or `master` branches.\n\nIt may take a few days for me to fully review your pull request, as I will test\nit extensively. If it is a big new feature implementation I may request that\nyou send the pull request to the `dev` branch instead of to `master`.\n\nWhy the Name?\n=============\n\nI gave this project the name 'Fyrd' in honour of my grandmother, H\u00e9l\u00e8ne\nSandolphen, who was a scholar of old English. It is the old Anglo-Saxon word\nfor 'army', and this code gives you an army of workers on any machine so it\nseemed appropriate.\n\nThe project used to be called \"Python Cluster\", which is more descriptive but\nfrankly boring. Also, about half a dozen other projects have almost the same\nname, so it made no sense to keep that name and put the project onto PyPI.\n\n\nDocumentation\n=============\n\nThis software is much more powerful that this document gives it credit for,\nto get the most out of it, read the docs at https://fyrd.readthedocs.org\nor get the PDF version from the file in `docs/fyrd.pdf`.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://fyrd.science",
    "keywords": "slurm torque multiprocessing cluster job_management",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fyrd",
    "platform": "",
    "project_url": "https://pypi.org/project/fyrd/",
    "release_url": "https://pypi.org/project/fyrd/0.6.1b8/",
    "requires_dist": [
      "tblib",
      "tabulate",
      "six",
      "dill"
    ],
    "requires_python": "",
    "summary": "Submit functions and shell scripts to torque, slurm, or local machines",
    "version": "0.6.1b8"
  },
  "releases": {
    "0.6.1b8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4dee3b268f41d5ee365e310048793547",
          "sha256": "ecc10edc7c25b8ecdbd5b0febee6e761af7e1c6015759c2800dc776f8ec8e2c4"
        },
        "downloads": 0,
        "filename": "fyrd-0.6.1b8-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "4dee3b268f41d5ee365e310048793547",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 90440,
        "upload_time": "2017-08-03T06:46:43",
        "url": "https://files.pythonhosted.org/packages/14/d2/8fb7cb1139b92e690d3e6c29756eb900d111682213d9c9992634ec9b7fe3/fyrd-0.6.1b8-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "06544890c1bf63b7aa10247786fc3840",
          "sha256": "13215ad1be1542ee6ae5caa5c3bb6c907d4b053b61f9b54651a69b6a03a7eadb"
        },
        "downloads": 0,
        "filename": "fyrd-0.6.1b8.tar.gz",
        "has_sig": true,
        "md5_digest": "06544890c1bf63b7aa10247786fc3840",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 76757,
        "upload_time": "2017-08-03T15:32:20",
        "url": "https://files.pythonhosted.org/packages/05/e7/a5161147aa06a8bf4cb012bc2a915e3dcf822fd3fe8a9d267b8105fe5702/fyrd-0.6.1b8.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4dee3b268f41d5ee365e310048793547",
        "sha256": "ecc10edc7c25b8ecdbd5b0febee6e761af7e1c6015759c2800dc776f8ec8e2c4"
      },
      "downloads": 0,
      "filename": "fyrd-0.6.1b8-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "4dee3b268f41d5ee365e310048793547",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 90440,
      "upload_time": "2017-08-03T06:46:43",
      "url": "https://files.pythonhosted.org/packages/14/d2/8fb7cb1139b92e690d3e6c29756eb900d111682213d9c9992634ec9b7fe3/fyrd-0.6.1b8-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "06544890c1bf63b7aa10247786fc3840",
        "sha256": "13215ad1be1542ee6ae5caa5c3bb6c907d4b053b61f9b54651a69b6a03a7eadb"
      },
      "downloads": 0,
      "filename": "fyrd-0.6.1b8.tar.gz",
      "has_sig": true,
      "md5_digest": "06544890c1bf63b7aa10247786fc3840",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 76757,
      "upload_time": "2017-08-03T15:32:20",
      "url": "https://files.pythonhosted.org/packages/05/e7/a5161147aa06a8bf4cb012bc2a915e3dcf822fd3fe8a9d267b8105fe5702/fyrd-0.6.1b8.tar.gz"
    }
  ]
}