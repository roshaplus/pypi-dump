{
  "info": {
    "author": "Roy Willams",
    "author_email": "rwilliams@lyft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "syx\n===\n\nPython 2 and 3 compatibility library from Lyft.  Pronounced \"Six with a Y\".\n\n``syx`` builds off of the ubiquitous\n`six <https://github.com/benjaminp/six>`__ library, backporting some behavior\nfrom Python 3 to Python 2 and includes some helper methods for handling\n``bytes`` and ``str`` differences between Python 2 and Python 3.\n\nBytes vs. strings\n-----------------\n\nPython 3 splits up strings and bytes into separate data types. To go\nfrom bytes to a string, you must decode. To go from a string to bytes,\nyou must encode. These changes propagated through the standard library.\nFor example, in `Python 2\nb64encode <https://docs.python.org/2/library/base64.html>`__ accepted a\nstring and returned a string, whereas `Python 3's\nb64encode <https://docs.python.org/3.6/library/base64.html>`__ requires\na bytes-like object and returns bytes. Dealing with these small changes\ncan be arduous as mentioned during a `PyCon 2017\nKeynote <https://youtu.be/66XoCk79kjM?t=1828>`__, so ``syx`` includes\ntwo helper methods, ``ensure_bytes`` (aliased as ``b``) and\n``ensure_str`` (aliased as ``s``). ``ensure_bytes`` converts it's input\nto ``bytes`` if needed, ``ensure_str`` converts it's input to a string\nif needed.\n\nFor example, say we have a function ``encode_value_as_b64_str`` that\naccepts a value that could be a string or bytes and returns a base64\nencoded string. Using ``syx``, this function can be written as:\n\n.. code:: python\n\n    from base64 import b64encode\n    from syx import b, s\n\n    def encode_value_as_b64_str(value):\n      return s(b64encode(b(value)))\n\nRounding\n--------\n\nPython 3 changed the default rounding implementation from \"Round away\nfrom 0\" to \"Banker's Rounding\". As the name implies, banker's rounding\nis the internationally accepted way of rounding numbers for financial\ntransactions. The main difference is instead of always rounding up\nduring a tie (which introduces a slight skew upwards in your data)\nbanker's rounding rounds towards the nearest even. So, for example,\nrounding both ``1.5`` and ``2.5`` will result in ``2``. While this is\nnot what's taught in grade school, it is more accurate.\n\nAs a concrete example:\n\n.. code:: python\n\n    import numpy as np\n    from syx import round\n\n    def bad_round(num):\n        return int(num + .5)\n\n    count = int(1e6)\n    values = np.random.randint(101, size=count) / 10\n    real_mean = sum(values) / count\n    py3_rounded_mean = sum(round(x) for x in values) / count\n    py2_rounded_mean = sum(bad_round(x) for x in values) / count\n\n    print('actual %f' % real_mean)\n    print('py3 round: %f, error: %f' % (py3_rounded_mean, abs(real_mean - py3_rounded_mean)))\n    print('py2 round: %f, error: %f' % (py2_rounded_mean, abs(real_mean - py2_rounded_mean)))\n\n::\n\n    actual 4.998499\n    py3 round: 4.998387, error: 0.000112\n    py2 round: 5.048665, error: 0.050166\n\nThe old rounding method predictably introduces a 1% error upwards.\n``syx`` ships an implementation of banker's rounding in Cython so it's\nas fast or faster than the built in rounding method.\n\nhasattr\n-------\n\nAs has been observed by others, ``hasattr`` in Python 2 can dangerously\nhide bugs. Some would even say that `hasattr is Considered\nHarmful <https://hynek.me/articles/hasattr/>`__. ``syx`` ships a\nbackport of Python 3's ``hasattr`` behavior.\n\n.. code:: python\n\n    from syx import hasattr\n\n    class GoesBoom(object):\n          @property\n          def boom(self):\n              raise Exception('Oh Noes!')\n\n    hasattr(GoesBoom(), 'boom')  # Now properly raises an Exception\n\n\nFixers\n======\n\n``syx`` ships with some ``lib2to3`` fixers to automatically start using\nthe Python 3 backports of ``round`` and ``hasattr``. You can run these\nfixers with\n`python-modernize <https://github.com/python-modernize/python-modernize>`__,\nfor example:\n\n::\n\n    python-modernize -w -f syx.fixers.fix_hasattr -f syx.fixers.fix_round ...",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://www.github.com/lyft/syx/",
    "keywords": "",
    "license": "apache2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "syx",
    "platform": "",
    "project_url": "https://pypi.org/project/syx/",
    "release_url": "https://pypi.org/project/syx/0.4.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python 2 and 3 compatability library",
    "version": "0.4.0"
  },
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bbadfbeb40d75196e8a346c046133028",
          "sha256": "0b658db4bd2206978a629ba707431a16de5a6261602ba900c1c0c480758956e9"
        },
        "downloads": -1,
        "filename": "syx-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bbadfbeb40d75196e8a346c046133028",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4786,
        "upload_time": "2018-01-11T01:00:26",
        "url": "https://files.pythonhosted.org/packages/a0/e0/d66786e2d5dec4e2c0f962f0ac3468f65dce44a2074ededfb8036f3aebd6/syx-0.4.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "bbadfbeb40d75196e8a346c046133028",
        "sha256": "0b658db4bd2206978a629ba707431a16de5a6261602ba900c1c0c480758956e9"
      },
      "downloads": -1,
      "filename": "syx-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "bbadfbeb40d75196e8a346c046133028",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4786,
      "upload_time": "2018-01-11T01:00:26",
      "url": "https://files.pythonhosted.org/packages/a0/e0/d66786e2d5dec4e2c0f962f0ac3468f65dce44a2074ededfb8036f3aebd6/syx-0.4.0.tar.gz"
    }
  ]
}