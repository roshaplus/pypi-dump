{
  "info": {
    "author": "gregoil",
    "author_email": "gregoil@walla.co.il",
    "bugtrack_url": "",
    "classifiers": [],
    "description": "rotest\n------\n.. image:: https://travis-ci.org/gregoil/rotest.svg?branch=travis_ci\n    :target: https://travis-ci.org/gregoil/rotest\n\n.. image:: https://ci.appveyor.com/api/projects/status/uy9grwc52wkpaaq9?svg=true\n    :target: https://ci.appveyor.com/project/gregoil/rotest\n\nRotest is a resource oriented testing framework, for writing system or\nintegration tests.\n\nRotest is based on Python's `unittest` module and on the Django framework.\nIt enables defining simple abstracted components in the system, called\nresources. The resources may be DUT (devices under test) or they may help\nthe test process. The tests look very much like tests written using the\nbuiltin module `unittest`.\n\nWhy use rotest?\n===============\n- Enabling a great team use resources without interfering each other.\n- Easily abstracting automated components in the system.\n- Lots of useful features: multiprocess, filtering tests, variety of result\n  handlers (and the ability to define custom ones), and much more.\n\nExamples\n========\nFor a complete step-by-step explanation about the framework, you can read\nour documentation in the tutorial. If you just want to see how it looks,\nread further.\n\nFor our example, let's look at an example for a `Calculator` resource:\n\n.. code-block:: python\n\n    import os\n    import rpyc\n    from django.db import models\n    from rotest.management import base_resource\n    from rotest.management.models import resource_data\n\n    class CalculatorData(resource_data.ResourceData):\n        class Meta:\n            app_label = \"resources\"\n\n        ip_address = models.IPAddressField()\n\n    class Calculator(base_resource.BaseResource):\n        DATA_CLASS = CalculatorData\n\n        PORT = 1357\n        EXECUTABLE_PATH = os.path.join(os.path.expanduser(\"~\"),\n                                       \"calc.py\")\n\n        def connect(self):\n            self._rpyc = rpyc.classic.connect(self.data.ip_address,\n                                              self.PORT)\n\n        def calculate(self, expression):\n            result = self._rpyc.modules.subprocess.check_output(\n                [\"python\", self.EXECUTABLE_PATH, expression])\n            return int(result.strip())\n\n        def finalize(self):\n            if self._rpyc is not None:\n                self._rpyc.close()\n                self._rpyc = None\n\nThe `CalculatorData` class is a standard Django model that exposes IP\naddress of the calculator machine through the data attribute.\nAlso, we're using `rpyc` for automating the access to those machines. Except\nfrom that, it's easy to notice how the `connect` method is making the\nconnection to the machine, and how the `finalize` method is cleaning\nafterwards.\n\nNow, an example for a test:\n\n.. code-block:: python\n\n    from rotest.core.runner import main\n    from rotest.core.case import TestCase, request\n\n    class SimpleCalculationTest(TestCase):\n        resources = [request(\"calculator\", Calculator)]\n\n        def test_simple_calculation(self):\n            self.assertEqual(self.calculator.calculate(\"1+2\"), 3)\n\n    if __name__ == \"__main__\":\n        main(SimpleCalculationTest)\n\nThe test can include the `setUp` and `tearDown` methods of `unittest` as\nwell, and it differs only in the request for resources. The request includes\nthe target member name, the requested class and might include more\nparameters for finding the suitable resource.\n\nFollowing, those are the options exposed when running the test:\n\n.. code-block:: bash\n\n    $ python test.py --help\n    Usage: test.py [options]\n\n    Options:\n      -h, --help            show this help message and exit\n      -c CONFIG_PATH, --config-path=CONFIG_PATH\n                            Tests' configuration file path\n      -s, --save-state      Enable save state\n      -d DELTA_ITERATIONS, --delta-iterations=DELTA_ITERATIONS\n                            Enable run of failed tests only, enter the number of\n                            times the failed tests should run\n      -p PROCESSES, --processes=PROCESSES\n                            Use multiprocess test runner\n      -o OUTPUTS, --outputs=OUTPUTS\n                            Output handlers separated by comma, options \"['dots',\n                            'xml', 'full', 'remote', 'db', 'excel', 'tree',\n                            'artifact', 'signature', 'loginfo', 'logdebug']\"\n      -f FILTER, --filter=FILTER\n                            Run only tests that match the filter expression, e.g\n                            \"Tag1* and not Tag13\"\n      -n RUN_NAME, --name=RUN_NAME\n                            Assign run name\n      -l, --list            Print the tests hierarchy and quit\n      -F, --failfast        Stop the run on first failure\n      -D, --debug           Enter ipdb debug mode upon any test exception\n      -S, --skip-init       Skip initialization and validation of resources\n      -r RESOURCES, --resources=RESOURCES\n                            Specific resources to request by name",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/gregoil/rotest",
    "keywords": "testing system django unittest",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rotest",
    "platform": "",
    "project_url": "https://pypi.org/project/rotest/",
    "release_url": "https://pypi.org/project/rotest/2.4.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Resource oriented testing framework",
    "version": "2.4.1"
  },
  "releases": {
    "0.0.2": [],
    "2.2.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c2e7e84c09373fab05fecde4b1cbf7ab",
          "sha256": "a38c5918daa8488bf2740995cf64fc49d9e24a5b7f29538467d98586af0302d3"
        },
        "downloads": -1,
        "filename": "rotest-2.2.8.zip",
        "has_sig": false,
        "md5_digest": "c2e7e84c09373fab05fecde4b1cbf7ab",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 217911,
        "upload_time": "2017-06-13T11:12:30",
        "url": "https://files.pythonhosted.org/packages/0c/0c/9e7be0cb303377e1bfc5c604d71ee4dbd8efd1c45ad468451150b817f743/rotest-2.2.8.zip"
      }
    ],
    "2.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d6219a38c2821cbcb1cc5c00c8ad4f23",
          "sha256": "94ad567eeabb45892d6d842e86ffdc6df56d17fccab45446e981c763961520f5"
        },
        "downloads": -1,
        "filename": "rotest-2.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d6219a38c2821cbcb1cc5c00c8ad4f23",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 136485,
        "upload_time": "2017-08-23T12:48:06",
        "url": "https://files.pythonhosted.org/packages/0f/c5/b6121fbe4710aab4040d70d85a94940807f7a08008a5cb80591d48ac6ddf/rotest-2.3.1.tar.gz"
      }
    ],
    "2.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e2b1583a3b6d30024f7529f71b653af0",
          "sha256": "0971368d4095a40eaf19a74ac1e9582fd0c5ef692fa38afd0f3c739610777b6c"
        },
        "downloads": -1,
        "filename": "rotest-2.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e2b1583a3b6d30024f7529f71b653af0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 94879,
        "upload_time": "2017-09-02T10:54:22",
        "url": "https://files.pythonhosted.org/packages/a1/0d/8048102e74d42888e49b3e8520fd5680be698f7c4f36ae8c710f71e98e09/rotest-2.3.2.tar.gz"
      }
    ],
    "2.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "abe950cf6599aa25b4cd75bd25736086",
          "sha256": "e4542eacc3a3c775bbc6f570d5cfeb0c6e38b5c3a1541da760001059d73a10ab"
        },
        "downloads": -1,
        "filename": "rotest-2.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "abe950cf6599aa25b4cd75bd25736086",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 95032,
        "upload_time": "2017-09-13T19:30:22",
        "url": "https://files.pythonhosted.org/packages/75/2c/c5cabe65006b9fa8d3a1a934ab47e5e1e491bfb56cd9836348ecfc29e317/rotest-2.4.0.tar.gz"
      }
    ],
    "2.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c2d9a850f4153261dec12f2ef4847783",
          "sha256": "5fe3094d4a219e0a9586cde1e164b6fa99e2ccfc1be7aeb8b6ed533c71fc94c8"
        },
        "downloads": -1,
        "filename": "rotest-2.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c2d9a850f4153261dec12f2ef4847783",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 96651,
        "upload_time": "2017-11-25T15:16:02",
        "url": "https://files.pythonhosted.org/packages/bc/64/102b97dc3274298d5299901bf9ed90bd4323206a777895072d6ddceb7fbe/rotest-2.4.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c2d9a850f4153261dec12f2ef4847783",
        "sha256": "5fe3094d4a219e0a9586cde1e164b6fa99e2ccfc1be7aeb8b6ed533c71fc94c8"
      },
      "downloads": -1,
      "filename": "rotest-2.4.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c2d9a850f4153261dec12f2ef4847783",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 96651,
      "upload_time": "2017-11-25T15:16:02",
      "url": "https://files.pythonhosted.org/packages/bc/64/102b97dc3274298d5299901bf9ed90bd4323206a777895072d6ddceb7fbe/rotest-2.4.1.tar.gz"
    }
  ]
}