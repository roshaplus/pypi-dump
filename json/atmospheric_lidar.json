{
  "info": {
    "author": "Ioannis Binietoglou",
    "author_email": "ioannis@inoe.ro",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Topic :: Scientific/Engineering :: Atmospheric Science"
    ],
    "description": "Overview\n========\n\nThis package provides utilities to handle raw (atmospheric) lidar input data.\nThe main format supported are Licel binary files (including the Raymetrics modified format).\n\nThe package provides a single command line tool, called licel2scc that can convert Licel binary files to the\nEARLINET's Single Calculus Chain NetCDF format.\n\nInstallation\n============\n\nThe easiest way to install this module is from the python package index using ``pip``::\n\n   pip install atmospheric-lidar\n\nUsing it as a Licel to SCC converter\n====================================\n\nParameter file\n--------------\nBefore converting Licel binary to SCC format, you need to create a file linking Licel channels to SCC channels.\n\nAs an example, you can start by changing the file \u201ccf_netcdf_parameters.py\u201d that describe such\nparameters for the Clermont Ferrand  lidar.\n\nCommand line interface\n----------------------\nThe usage of the  ``licel2scc`` program is described below::\n\n    A program to convert Licel binary files to the SCC NetCDF format.\n\n    positional arguments:\n      parameter_file        The path to a parameter file linking licel and SCC\n                            channels.\n      files                 Location of licel files. Use relative path and\n                            filename wildcards. (default './*.*')\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -i, --id_as_name      Use transient digitizer ids as channel names, instead\n                            of descriptive names\n      -m MEASUREMENT_ID, --measurement_id MEASUREMENT_ID\n                            The new measurement id\n      -n MEASUREMENT_NUMBER, --measurement_number MEASUREMENT_NUMBER\n                            The measurement number for the date from 00 to 99.\n                            Used if no id is provided\n      -t TEMPERATURE, --temperature TEMPERATURE\n                            The temperature (in C) at lidar level, required if\n                            using US Standard atmosphere\n      -p PRESSURE, --pressure PRESSURE\n                            The pressure (in hPa) at lidar level, required if\n                            using US Standard atmosphere\n      -D DARK_FILES, --dark_files DARK_FILES\n                            Location of files containing dark measurements.\n                            Use relative path and filename wildcars, see 'files'\n                            parameter for example.\n      -d, --debug           Print dubuging information.\n      -s, --silent          Show only warning and error messages.\n      --version             Show current version.\n\nSimilarly, the ``licel2scc-depol`` program can be used to convert\nLicel files from Delta45 depolarization calibration measurements::\n\n    A program to convert Licel binary files from depolarization calibration\n    measurements to the SCC NetCDF format.\n\n    positional arguments:\n      parameter_file        The path to a parameter file linking licel and SCC\n                            channels.\n      plus45_string         Search string for plus 45 degree files (default '*.*')\n      minus45_string        Search string for minus 45 degree files (default\n                            '*.*')\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -i, --id_as_name      Use transient digitizer ids as channel names, instead\n                            of descriptive names\n      -m MEASUREMENT_ID, --measurement_id MEASUREMENT_ID\n                            The new measurement id\n      -n MEASUREMENT_NUMBER, --measurement_number MEASUREMENT_NUMBER\n                            The measurement number for the date from 00 to 99.\n                            Used if no id is provided\n      -t TEMPERATURE, --temperature TEMPERATURE\n                            The temperature (in C) at lidar level, required if\n                            using US Standard atmosphere\n      -p PRESSURE, --pressure PRESSURE\n                            The pressure (in hPa) at lidar level, required if\n                            using US Standard atmosphere\n      -d, --debug           Print dubuging information.\n      -s, --silent          Show only warning and error messages.\n      --version             Show current version.\n\nUsage in python code\n--------------------\nSystem class\n~~~~~~~~~~~~\nTo read data from a system, you need create a class that describes you system.\nThis is very simple if your lidar data are in the Licel format, as you only need to specify\nthe external file with the extra SCC parameters. You can use as an example the file ``cf_netcdf_parameters.py``:\n\n.. code-block:: python\n\n   from licel import LicelLidarMeasurement\n   import cf_netcdf_parameters\n\n   class CfLidarMeasurement(LicelLidarMeasurement):\n       extra_netcdf_parameters = cf_netcdf_parameters\n\nThis code assumes that the ``cf_netcdf_parameters.py`` is in your python path.\n\nUsing the class\n~~~~~~~~~~~~~~~\n\nOnce you have made the above setup you can start using it. The best way to understand how\nit works is through an interactive shell (I suggest [ipython](http://ipython.org/)).\nIn the following example I use the cf_raymetrics setup:\n\n.. code-block:: python\n\n   import glob  # This is needed to read a list of filenames\n   import cf_lidar\n\n   # Go to the folder where you files are stored\n   cd /path/to/lidar/files\n\n   # Read the filenames\n   files  = glob.glob(\"*\") # The * reads all the files in the folder.\n\n   # Read the files\n   my_measurement = cf_lidar.CfLidarMeasurement(files)\n\n   # Now the data have been read, and you have a measurement object to work with:\n   # See what channels are present\n   print(my_measurement.channels)\n\n   # Quicklooks of all the channels\n   my_measurements.plot()\n\nConverting to SCC format\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are some extra info you need to put in before converting to SCC format, \"Measurement_ID\", \"Temperature\", \"Pressure\":\n\n.. code-block:: python\n\n   my_measurement.info[\"Measurement_ID\"] = \"20101229op00\"\n   my_measurement.info[\"Temperature\"] = \"14\"\n   my_measurement.info[\"Pressure\"] = \"1010\"\n\nYou can use standard values of temperature and pressure by just calling:\n\n.. code-block:: python\n\n    my_measurement.get_PT()\n\nYou can specify the standard values by overriding your system's ``get_PT`` method:\n\n.. code-block:: python\n\n   from licel import LicelLidarMeasurement\n   import cf_netcdf_parameters\n\n   class CfLidarMeasurement(LicelLidarMeasurement):\n       extra_netcdf_parameters = cf_netcdf_parameters\n\n       def get_PT():\n           self.info['Temperature'] = 25.0\n           self.info['Pressure'] = 1020.0\n\nIf you have an external source of temperature and pressure information (a meteorological station) you can automate\nthis by reading the appropriate code in the ``get_PT`` method .\n\n\nAfter you have used this extra input, you save the file using this command:\n\n.. code-block:: python\n\n   my_measurement.save_as_SCC_netcdf(\"filename\")\n\nwhere you change the output filename to the filename you want to use.\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/iannis_b/atmospheric-lidar/",
    "keywords": "lidar aerosol licel SCC",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "atmospheric_lidar",
    "platform": "",
    "project_url": "https://pypi.org/project/atmospheric_lidar/",
    "release_url": "https://pypi.org/project/atmospheric_lidar/0.2.13/",
    "requires_dist": [
      "pytz",
      "sphinx",
      "matplotlib",
      "numpy",
      "netCDF4"
    ],
    "requires_python": "",
    "summary": "Package for reading raw atmospheric lidar data.",
    "version": "0.2.13"
  },
  "releases": {
    "0.2.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4a4595d68fd8a99da0c742602d14ff33",
          "sha256": "ae983e92fd1379b62bf24eb1b3d32afe18d0381a70fe19259d17bb0803783ce2"
        },
        "downloads": -1,
        "filename": "atmospheric_lidar-0.2.10-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "4a4595d68fd8a99da0c742602d14ff33",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 36118,
        "upload_time": "2017-03-02T13:12:12",
        "url": "https://files.pythonhosted.org/packages/e9/c6/7ad2ba69642232fc49895df34435350284141fe1e2b5743283db3ea65c34/atmospheric_lidar-0.2.10-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "48a50a8332adc8bc6c3563622d0590a3",
          "sha256": "6d30a6f53f96f557b08eaef8ce0ab000ea6bf0ab6e15e611ba3cce4ed6e2fcd9"
        },
        "downloads": -1,
        "filename": "atmospheric_lidar-0.2.10.tar.gz",
        "has_sig": false,
        "md5_digest": "48a50a8332adc8bc6c3563622d0590a3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22355,
        "upload_time": "2017-03-02T13:12:14",
        "url": "https://files.pythonhosted.org/packages/22/09/b255fec0a7dcc2791360cd7bcec99daddcec38999752783a647d31f4de3c/atmospheric_lidar-0.2.10.tar.gz"
      }
    ],
    "0.2.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e3f04a18dccda06a07033d1cf21292a0",
          "sha256": "bdf6bb43d1dcf0b071bf3503271d95c46cae99f886564dabae6bd2619bbe7fcf"
        },
        "downloads": -1,
        "filename": "atmospheric_lidar-0.2.12-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e3f04a18dccda06a07033d1cf21292a0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 28056,
        "upload_time": "2017-12-12T11:18:30",
        "url": "https://files.pythonhosted.org/packages/f6/fe/8fbfbf377f215d87517b3a28c038dc95d1e6ec1d05525497a103c4f16f89/atmospheric_lidar-0.2.12-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9660a8a2eace93b8391d2da9deeba032",
          "sha256": "590dad3af2b91594401341384429e5628fc61cf9bb1f14d963de6e0c61a4e1db"
        },
        "downloads": -1,
        "filename": "atmospheric_lidar-0.2.12.tar.gz",
        "has_sig": false,
        "md5_digest": "9660a8a2eace93b8391d2da9deeba032",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20091,
        "upload_time": "2017-12-12T11:18:36",
        "url": "https://files.pythonhosted.org/packages/68/e7/0326a522923c7ce7fc80ab395f95f1c307829783c0d4679c60185593eb3b/atmospheric_lidar-0.2.12.tar.gz"
      }
    ],
    "0.2.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "11b3b0692ca219c829f2784167bbc331",
          "sha256": "f6ebc8f0b88a3311af7ec674a08c9667ee07c4ba4a56f7c9b01639e500db588e"
        },
        "downloads": -1,
        "filename": "atmospheric_lidar-0.2.13-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "11b3b0692ca219c829f2784167bbc331",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 27973,
        "upload_time": "2017-12-12T11:28:49",
        "url": "https://files.pythonhosted.org/packages/af/e1/185709d9c80d95d8baa1ff658e1fb9b21faf2a35d05b83d42e96c439a6b2/atmospheric_lidar-0.2.13-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "27f5c31f837961e083612df27e76b0b9",
          "sha256": "06efe849cc5d580b03b0ca9d2595ed768816aab4ca105e2a4869d12f281667d8"
        },
        "downloads": -1,
        "filename": "atmospheric_lidar-0.2.13.tar.gz",
        "has_sig": false,
        "md5_digest": "27f5c31f837961e083612df27e76b0b9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20025,
        "upload_time": "2017-12-12T11:28:51",
        "url": "https://files.pythonhosted.org/packages/f7/25/fd9ae511ad9ce605ff0d93496025beaec7227a45dc50a8bc232e5b350346/atmospheric_lidar-0.2.13.tar.gz"
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b063d5bcabb53aa9d4a16fdcbc8b35fb",
          "sha256": "bbde7509ab01b68d2b675e690ae841a948b613783d5e393104736342855737b6"
        },
        "downloads": -1,
        "filename": "atmospheric_lidar-0.2.6-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "b063d5bcabb53aa9d4a16fdcbc8b35fb",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 33745,
        "upload_time": "2017-02-17T10:25:19",
        "url": "https://files.pythonhosted.org/packages/d8/4c/385f8c302766ed3acca3dc5e6fa90c9e4973257323f5ef1f2cd955d1a50b/atmospheric_lidar-0.2.6-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "13eb9bd26e21e7557f51f0208ac9746d",
          "sha256": "0d5b7e90071b9846a12d4b943359abbd76440c971ed215f94f0e68c1b3ce4c08"
        },
        "downloads": -1,
        "filename": "atmospheric_lidar-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "13eb9bd26e21e7557f51f0208ac9746d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21090,
        "upload_time": "2017-02-17T10:25:21",
        "url": "https://files.pythonhosted.org/packages/1a/2b/fc1bfeee4bf24230b64a54d6317aeb823b3231e2b7a8d823d008ebc684a4/atmospheric_lidar-0.2.6.tar.gz"
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e4d028fa2e94e2f53923db3aa2a699eb",
          "sha256": "49d5f32e3258b35ebc1b20e48d024fe4a55ba97c399da6882a5bcbe6733807e2"
        },
        "downloads": -1,
        "filename": "atmospheric_lidar-0.2.7-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4d028fa2e94e2f53923db3aa2a699eb",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 33737,
        "upload_time": "2017-02-17T10:37:11",
        "url": "https://files.pythonhosted.org/packages/54/87/895aebae4cc8e1083621ef2ada25dee84a4250fb825c13ef1e347349a979/atmospheric_lidar-0.2.7-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "24940a1b586352b1b5aa1ecfcd94d154",
          "sha256": "6af13c67c32be73659e04b44eb87da61d6734913a6f58f4b3706fb50d6b1ad45"
        },
        "downloads": -1,
        "filename": "atmospheric_lidar-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "24940a1b586352b1b5aa1ecfcd94d154",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21081,
        "upload_time": "2017-02-17T10:37:13",
        "url": "https://files.pythonhosted.org/packages/3e/b1/5120e5a4e6d7888f586b826abd800436c34b91d811270bb9e9a8ede972f2/atmospheric_lidar-0.2.7.tar.gz"
      }
    ],
    "0.2.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d4a1e80d1f1f91327f8ac9fff09b8529",
          "sha256": "1562c65661d4c20673e5a2d0897f42bc94bf456c1b5bb5d3243b9fb698f2f915"
        },
        "downloads": -1,
        "filename": "atmospheric_lidar-0.2.8-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4a1e80d1f1f91327f8ac9fff09b8529",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 33737,
        "upload_time": "2017-02-22T13:53:29",
        "url": "https://files.pythonhosted.org/packages/ff/9a/d12f73941b8b51cd8ca85c1d4fc27a9842d8127349b5f8ef36330187d241/atmospheric_lidar-0.2.8-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6ecb1e6f06dd800916a0e38261954c42",
          "sha256": "962cfa973df8f18ee571a7676831ca138b82765f8ea8a48b71ab154934bc677c"
        },
        "downloads": -1,
        "filename": "atmospheric_lidar-0.2.8.tar.gz",
        "has_sig": false,
        "md5_digest": "6ecb1e6f06dd800916a0e38261954c42",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21094,
        "upload_time": "2017-02-22T13:53:31",
        "url": "https://files.pythonhosted.org/packages/32/48/cafc781d6ad2511e3bbce11d9afd44193cb94b0a88259ca92af458309cc4/atmospheric_lidar-0.2.8.tar.gz"
      }
    ],
    "0.2.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "92abc0c004890e05182b7e0a1f7b3b41",
          "sha256": "7afe58199cd3950a213bd06f6208b737ea39cdcd93d2ff69f4bb757b8a9662d5"
        },
        "downloads": -1,
        "filename": "atmospheric_lidar-0.2.9-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "92abc0c004890e05182b7e0a1f7b3b41",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 36106,
        "upload_time": "2017-03-02T10:45:05",
        "url": "https://files.pythonhosted.org/packages/68/2c/176202cb6154915d3af09c0bfe8286a736509c87b13d015edeffaf5162f2/atmospheric_lidar-0.2.9-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f77580641522c1907558b5e53e284c29",
          "sha256": "b25ff129fa2574d3264e6efa89e2318dd129b9e0541e8442dda36870e43df3dd"
        },
        "downloads": -1,
        "filename": "atmospheric_lidar-0.2.9.tar.gz",
        "has_sig": false,
        "md5_digest": "f77580641522c1907558b5e53e284c29",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22364,
        "upload_time": "2017-03-02T10:45:07",
        "url": "https://files.pythonhosted.org/packages/c5/6e/c794d35c841b6f1892acb11ab641450beb78aabdc34abfa71777ce52912d/atmospheric_lidar-0.2.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "11b3b0692ca219c829f2784167bbc331",
        "sha256": "f6ebc8f0b88a3311af7ec674a08c9667ee07c4ba4a56f7c9b01639e500db588e"
      },
      "downloads": -1,
      "filename": "atmospheric_lidar-0.2.13-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "11b3b0692ca219c829f2784167bbc331",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 27973,
      "upload_time": "2017-12-12T11:28:49",
      "url": "https://files.pythonhosted.org/packages/af/e1/185709d9c80d95d8baa1ff658e1fb9b21faf2a35d05b83d42e96c439a6b2/atmospheric_lidar-0.2.13-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "27f5c31f837961e083612df27e76b0b9",
        "sha256": "06efe849cc5d580b03b0ca9d2595ed768816aab4ca105e2a4869d12f281667d8"
      },
      "downloads": -1,
      "filename": "atmospheric_lidar-0.2.13.tar.gz",
      "has_sig": false,
      "md5_digest": "27f5c31f837961e083612df27e76b0b9",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 20025,
      "upload_time": "2017-12-12T11:28:51",
      "url": "https://files.pythonhosted.org/packages/f7/25/fd9ae511ad9ce605ff0d93496025beaec7227a45dc50a8bc232e5b350346/atmospheric_lidar-0.2.13.tar.gz"
    }
  ]
}