{
  "info": {
    "author": "Lars Albertsson",
    "author_email": "lalle@mapflat.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Stuffer - simplified, container-friendly provisioning\n=====================================================\n\nStuffer is a provisioning tool designed to be simple, and to be used in\nsimple scenarios.\n\nDocumentation is hosted on `<http://stuffer.readthedocs.io>`_.\n\n\nProject status\n--------------\n\nAlpha. Raw but usable. The documentation is sparse. In some cases, it describes intentions, some of\nwhich are not implemented.\n\n\nUse cases\n---------\n\nStuffer is primarily intended to be used for provisioing container images, Docker in particular. As\na secondary use case, it can be used to provision non-production machines, e.g. developer machines.\n\nMore complex provisioning tools, such as Puppet, Chef, and Ansible, are intended for bringing a\nmachine in an arbitrary state to a desired state. This turns out not to be possible in practice, and\nproduction machines manages with such tools tend to suffer from outdated dependency packages, etc.\n\nStuffer is primarily intended for building a machine from scratch to the desired state. Since the\ninitial state is known, much of the complexity of existing provisioning tools is unnecessary. For\nexample, during an image build, running services need not be considered or restarted.\n\nOverview\n--------\n\nStuffer uses a Python embedded DSL for specifying provisioning directives. It is typically invoked\nwith one or more command arguments on the command line, e.g.:\n::\n\n    stuffer 'apt.Install(\"mercurial\")'\n\n\nMultiple arguments are concatenated into a multiple line Python recipe:\n::\n\n    stuffer \\\n      'for pkg in \"mercurial\", \"gradle\", \"python-nose\":' \\\n      '  print(\"Installing\", pkg)' \\\n      '  apt.Install(pkg)'\n\n\nReused recipes can be factored out into Python modules for easier reuse:\n::\n\n    stuffer 'development.Tools()'\n\nIn development.py:\n::\n\n    from stuffer.core import Group\n\n    class Tools(Group):\n      def children(self):\n        return [apt.Install(p) for p in \"mercurial\", \"gradle\", \"python-nose\"]\n\nStuffer comes with builtin knowledge of Docker best practices, which it\ncan enforce for you:\n\n::\n\n    Dockerfile:\n      FROM phusion/baseimage:0.9.18\n\n      RUN stuffer 'docker.Prologue()'  # Verifies e.g. that base image is sound.\n\n      RUN stuffer ... # Install stuff\n\n      RUN stuffer 'docker.Epilogue()'  # Cleans temporary files, warns about known anti-patterns in the statements above.\n\n\nDesign goals\n------------\n\nStuffer design gives priority to:\n\n-  Simplicity of use. No knowledge about the tool should be required in order to use it for simple scenarios by copying\n   examples. Some simplicity in the implementation is sacrificed in order to make the usage interface simple. Actions\n   are named similarly to the corresponding shell commands.\n\n-  Transparency. Whenever reasonable, actions are translated to shell commands. All actions are logged.\n\n-  Ease of reuse. It should be simple to extract commands from snippets and convert them to reusable modules without a\n   rewrite.\n\n-  Docker cache friendliness. Images built with similar commands should be able to share a prefix of commands in order\n   to benefit from Docker image caching.\n\n-  No dislike factors. Provisioning tools tend to be loved and/or hated by users, for various\n   reasons. There might be no reason to be passionately enamoured with stuffer, but there should be\n   no reason to have a strong dislike for it, given that you approve of Python and Docker.\n\n-  Ease of debugging. Debugging stuffer recipes should be as easy as debugging standard Python programs.\n\n-  Avoid reinventing wheels. Use existing Python modules or external tools for tasks that have already been solved. Give\n   priority to reusing existing code over minimising dependencies. In particular, use Python 3 and click to save\n   boilerplate.\n\n\nMoreover, the project model is design to facilitate sharing and reuse of code between users, see below.\n\n\nDSL\n---\n\nThe DSL is designed to be comprehensible by readers that are not familiar with stuffer. For example,\nthe command apt.Install(\"mypack\") runs \"apt-get install mypack\". There is a balance between\nconvenience and comprehensibility, and stuffer in most cases shuns magic that would create\nconvenience in preference for more understandable code.\n\nThe DSL is also designed to make it easy to do things that are correct and work well with\ncontainers, and difficult to do things that do not harmonise with containers.\n\nThe DSL is designed to be tool friendly (with IntelliJ/PyCharm and pylint in particular), both for\nwriting stuff files and for working on stuffer itself. For example, all imports are explicitly\ndeclared in order to make structure visible to tools.\n\nPython conventions are used for naming, i.e. CamelCase classes and snake_case functions.\n\n\nCollaboration model\n-------------------\n\nUsers are allowed to put recipes under sites/ for others to get inspired. This model may not scale,\nbut as long as the number of users is small, there is value in sharing and showing each other code\nsnippets, in order to extract pieces of common value.\n\nSnippets worth reuse can be put under stuffer/contrib/. Files under stuffer/contrib are expected to\nbe maintained by the contributor.\n\nRoutines for installing third-party software should also go under stuffer/contrib.\n\n\nContributing\n------------\n\nNew code should be covered with integration tests. Avoid unit tests - since the purpose of stuffer is integration,\nthere is little value testing scenarios that are not authentic. Strive to figure out a way to test functionality with\nDocker containers.\n\nIn order to run the test suite, run ``tox`` in the project root directory. The continuous\nintegration build also bulds the documentation (``tox -e docs``) and performs a distribution build\n(``tox -e dist``). See shippable.yml for the exact commands.\n\nWhen tests pass, fork `<https://bitbucket.org/mapflat/stuffer>`_, push your code to the fork and create a pull request.\n\n\nBuild and release\n-----------------\n\nContinuous integration builds are run with `Shippable\n<https://app.shippable.com/bitbucket/mapflat/stuffer>`_. Shippable builds a release package for\nevery merge or push to master branch and uploads it to `<https://pypi.python.org>`_. In order to\nmake a new release, you must update the version number in setup.py before merging to master.\n\n\nDeployment\n----------\n\nIn order to create an installable distribution package, run ``./setup.py sdist`` from the project root directory.\nInstall with ``pip3 install dist/stuffer-*.tar.gz``.\n\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://bitbucket.org/mapflat/stuffer",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "stuffer",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/stuffer/",
    "release_url": "https://pypi.org/project/stuffer/0.0.2/",
    "requires_python": null,
    "summary": "UNKNOWN",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9d04bd49c7813c2ce51a2246035ec27a",
          "sha256": "cf461d9944c09834507c4e65ebea1655db035ff3ebbdff1acd90b40fa8ef1dad"
        },
        "downloads": 0,
        "filename": "stuffer-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9d04bd49c7813c2ce51a2246035ec27a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 71856,
        "upload_time": "2017-06-11T09:38:56",
        "url": "https://files.pythonhosted.org/packages/f8/8f/34c7c01ec5d3ea642fc4d6c65233abffd2e0ce51b6fed4e5cc0f22302541/stuffer-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b4603d75af9d741bec81319d48041bb5",
          "sha256": "a869dc28fa4cfe73baf589bdcb0ecdf5a4b6ad1324f91efc7787012caca57e6d"
        },
        "downloads": 0,
        "filename": "stuffer-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b4603d75af9d741bec81319d48041bb5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 72049,
        "upload_time": "2017-06-11T11:43:47",
        "url": "https://files.pythonhosted.org/packages/36/23/bd87e0297f1b4004b86c0440234edcf482691251fea0517a1e3b1c54b445/stuffer-0.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b4603d75af9d741bec81319d48041bb5",
        "sha256": "a869dc28fa4cfe73baf589bdcb0ecdf5a4b6ad1324f91efc7787012caca57e6d"
      },
      "downloads": 0,
      "filename": "stuffer-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b4603d75af9d741bec81319d48041bb5",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 72049,
      "upload_time": "2017-06-11T11:43:47",
      "url": "https://files.pythonhosted.org/packages/36/23/bd87e0297f1b4004b86c0440234edcf482691251fea0517a1e3b1c54b445/stuffer-0.0.2.tar.gz"
    }
  ]
}