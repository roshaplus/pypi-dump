{
  "info": {
    "author": "QuickEmailVerification",
    "author_email": "support@quickemailverification.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. image:: https://quickemailverification.com/extra/images/logo_github.png\n    :target: https://quickemailverification.com\n    :width: 600\n    :align: center\n    :alt: Quick Email Verification Logo\n\nOfficial Email Validation API library client for PYTHON\n=======================================================\n\nQuickEmailVerification provides the quickest way to avoid fake / invalid\nemails.\n\n-  Get actual users by scanning email address.\n-  Remove invalid, dead and fake emails from your email list.\n-  Save time and money by sending mail to actual users.\n\nLet's Get Started\n-----------------\n\nTo begin, signUp at\n`quickemailverification.com <https://quickemailverification.com>`__ and\ncreate a FREE account. After signup logged in, click on `API\nSettings <https://quickemailverification.com/apisettings>`__ and then\nclick **Add API Key**. To use API you need 2 parameters.\n\nemail - (string) This is a email address you need to verify. It should\nbe url encoded.\n\napikey - (string) This is the key you generated from\n\"api settings\" page.\n\nNOTE: Keep API key with you. You'll need it to setup the client as explained below.\n\nInstallation\n------------\n\nMake sure you have `pip <https://pypi.python.org/pypi/pip>`__ installed.\n\n.. code:: bash\n\n    $ pip install quickemailverification\n\nVersions\n~~~~~~~~\n\nWorks with [ 2.6 / 2.7 / 3.2 / 3.3 ]\n\nUsage\n-----\n\n.. code:: python\n\n    import quickemailverification\n\n    client   = quickemailverification.Client('Your_API_Key_Here')\n    quickemailverification  = client.quickemailverification()\n    response = quickemailverification.verify('test@example.com')\n    print(response.body) # The response is in the body attribute\n\nResponse information\n~~~~~~~~~~~~~~~~~~~~\n\nA successful API call responds with the following values:\n\n-  **result** ``string`` - The verified results will be: ``valid``,\n   ``invalid``, ``unknown``\n-  **reason** ``string`` - Reason definitions are as below:\n-  ``invalid_email`` - Specified email has invalid email address syntax\n-  ``invalid_domain`` - Domain name does not exist\n-  ``rejected_email`` - SMTP server rejected email. Email does not exist\n-  ``accepted_email`` - SMTP server accepted email address\n-  ``no_connect`` - SMTP server connection failure\n-  ``timeout`` - Session time out occurred at SMTP server\n-  ``unavailable_smtp`` - SMTP server is not available to process\n   request\n-  ``unexpected_error`` - An unexpected error has occurred\n-  ``no_mx_record`` - Could not get MX records for domain\n-  ``temporarily_blocked`` - Email is temporarily greylisted\n-  ``exceeded_storage`` - SMTP server rejected email. Exceeded storage\n   allocation\n\n-  **disposable** ``true | false`` - *true* if the email address uses a\n   *disposable* domain\n-  **accept\\_all** ``true | false`` - *true* if the domain appears to\n   *accept all* emails delivered to that domain\n-  **role** ``true | false`` - *true* if the email address is a *role*\n   address (``manager@example.com``, ``ceo@example.com``, etc)\n-  **free** ``true | false`` - *true* if the email address is from free\n   email provider like Gmail, Yahoo!, Hotmail etc.\n-  **email** ``string`` - Returns a normalized version.\n   (``Niki@example.com`` -> ``niki@example.com``)\n-  **user** ``string`` - The local part of an email address.\n   (``niki@example.com`` -> ``niki``)\n-  **domain** ``string`` - The domain of the provided email address.\n   (``niki@example.com`` -> ``example.com``)\n-  **safe\\_to\\_send** ``true | false`` - *true* if the email address is\n   safe for deliverability\n-  **did\\_you\\_mean** ``string`` - Returns email suggestions if specific\n   typo errors found in email\n-  **success** ``true | false`` - *true* if the API request was\n   successful\n-  **message** ``string`` - Describes API call failure reason\n\nHTTP Response headers\n~~~~~~~~~~~~~~~~~~~~~\n\nTotal remaining credits can be found by http response header. It\ncontains overall remaining credits, including Persistent & Per day\ncredits.\n\n-  **X-QEV-Remaining-Credits** - Your remaining email verification\n   credits (i.e. Per Day Credits + Persistent Credits).\n\nHTTP status codes for QuickEmailVerification API calls\n------------------------------------------------------\n\nQuickEmailVerification API also returns following HTTP status codes to\nindicate success or failure of request.\n\n-  ``200`` - Request is completed successfully.\n-  ``400`` - Server can not understand the request sent to it. This is\n   kind of response can occur if parameters are passed wrongly.\n-  ``401`` - Server can not verify your authentication to use api.\n   Please check whether API key is proper or not.\n-  ``402`` - You are running out of your credit limit.\n-  ``404`` - Requested API can not be found on server.\n-  ``429`` - Too many requests. Rate limit exceeded.\n\nLicense\n-------\n\nMIT\n\nBug Reports\n-----------\n\nReport\n`here <https://github.com/quickemailverification/quickemailverification-python/issues>`__.\n\nNeed Help? Feel free to contact us\n----------------------------------\n\nhttps://quickemailverification.com/contact-us",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/quickemailverification/quickemailverification-python",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "quickemailverification",
    "platform": "",
    "project_url": "https://pypi.org/project/quickemailverification/",
    "release_url": "https://pypi.org/project/quickemailverification/1.0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Official QuickEmailVerification API library client for python",
    "version": "1.0.1"
  },
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "240a00875529e2fba7f547eb7dc9efa7",
          "sha256": "7862a2d4eedcc69e35d807c4720089244d6d811521cc165e1e0e434e7b8c8b43"
        },
        "downloads": -1,
        "filename": "quickemailverification-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "240a00875529e2fba7f547eb7dc9efa7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6894,
        "upload_time": "2017-12-26T13:17:32",
        "url": "https://files.pythonhosted.org/packages/bc/75/1067101b8f12dff1df13cf731d3e51ac7e02133dc88e3154aa8d43f58fc6/quickemailverification-1.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "240a00875529e2fba7f547eb7dc9efa7",
        "sha256": "7862a2d4eedcc69e35d807c4720089244d6d811521cc165e1e0e434e7b8c8b43"
      },
      "downloads": -1,
      "filename": "quickemailverification-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "240a00875529e2fba7f547eb7dc9efa7",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6894,
      "upload_time": "2017-12-26T13:17:32",
      "url": "https://files.pythonhosted.org/packages/bc/75/1067101b8f12dff1df13cf731d3e51ac7e02133dc88e3154aa8d43f58fc6/quickemailverification-1.0.1.tar.gz"
    }
  ]
}