{
  "info": {
    "author": "Engine Bai",
    "author_email": "enginebai@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "PyMessager\n==========\n\n|License: MIT|\n\nPyMessager is a `Facebook\nMessager <https://developers.facebook.com/docs/messenger-platform>`__\nPython SDK and sample project to demostrate how to develop a bot on\nFacebook Messager.\n\n.. figure:: https://raw.githubusercontent.com/enginebai/PyMessager/master/art/graphic.png\n   :alt: \n\nA full tutorials are on `Develop Facebook bot using\npython <https://medium.com/@enginebai/\u7528python\u958b\u767cfacebook-bot-26594f13f9f7#.7iwm148ag>`__\nand `Chatbot: from 0 to 1 <>`__ where you can find more detail\ninformation to setup and develop.\n\nBefore Starting\n---------------\n\n1. Prepare a facebook pages. (to create if you don't have one)\n2. Start a developer application at `facebook to\n   developer <https://developers.facebook.com>`__.\n3. Create a python project, and install the required packages and\n   modules: `Flask <http://flask.pocoo.org>`__,\n   `Requests <http://docs.python-requests.org/en/master/>`__.\n4. Use `Let's Encrypt <https://letsencrypt.org/getting-started/>`__ to\n   apply SSL cerificiation for your domain name.\n\nInstall\n-------\n\nTo install PyMessager, simply run:\n\n.. code:: shell\n\n    $ pip install pymessager\n\nor install from repository:\n\n.. code:: shell\n\n    $ git clone git@github.com:enginebai/PyMessager.git\n    $ cd PyMessager\n    $ pip install -r requirements.txt\n\nGet Started\n-----------\n\nImport\n~~~~~~\n\n.. code:: python\n\n    from message import Messager, ... # something else you need\n\nInitialization\n~~~~~~~~~~~~~~\n\nYou can initialize the messager client via providing the facebook access\ntoken from developer console:\n\n.. code:: python\n\n    from message import Messager\n    client = Messager(config.facebook_access_token)\n\nReceiver APIs\n-------------\n\nThe following code is used to build the message receiver, there are\nthree main steps to prepare for you bot:\n\n1.Setup the Webhook.\n\n.. code:: python\n\n    @app.route(API_ROOT + FB_WEBHOOK, methods=[\"GET\"])\n    def fb_webhook():\n        verification_code = 'I_AM_VERIFICIATION_CODE'\n        verify_token = request.args.get('hub.verify_token')\n        if verification_code == verify_token:\n            return request.args.get('hub.challenge')\n\n2.Receive the message.\n\n.. code:: python\n\n    @app.route(API_ROOT + FB_WEBHOOK, methods=['POST'])\n    def fb_receive_message():\n        message_entries = json.loads(request.data.decode('utf8'))['entry']\n        for entry in message_entries:\n            messagings = entry['messaging']\n            for message in messagings:\n                sender = message['sender']['id']\n                if message.get('message'):\n                    text = message['message']['text']\n                    print(\"{} says {}\".format(sender, text))\n        return \"Hi\"\n\n3.Start the server with https.\n\n.. code:: python\n\n    if __name__ == '__main__':\n        context = ('ssl/fullchain.pem', 'ssl/privkey.pem')\n        app.run(host='0.0.0.0', debug=True, ssl_context=context)\n\nSender APIs\n-----------\n\n.. figure:: https://raw.githubusercontent.com/enginebai/PyMessager/master/art/usage.png\n   :alt: \n\nThere are serveral types of message: ``text``, ``image``,\n``quick replies``, ``button template`` or ``generic template``. API\nprovides different classes to generate the message template.\n\nSending a text and image\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nSend a simple text or a image to recipient, just make sure that image\nURL is a valid link.\n\n.. code:: python\n\n    client.send_text(recipient_id, \"Hello, I'm enginebai.\"\n    client.send_image(recipient_id, \"http://image-url.jpg\")\n\nQuick Replies\n~~~~~~~~~~~~~\n\nThe ``QuickReply(title, payload, image_url, content_type)`` class\ndefines a present buttons to the user in response to a message.\n\n+--------------------+----------------------------+------------+\n| Parameter          | Description                | Required   |\n+====================+============================+============+\n| ``title``          | The button title           | Y          |\n+--------------------+----------------------------+------------+\n| ``payload``        | The click payload string   | Y          |\n+--------------------+----------------------------+------------+\n| ``image_url``      | The icon image URL         | N          |\n+--------------------+----------------------------+------------+\n| ``content_type``   | ``TEXT`` or ``LOCATION``   | Y          |\n+--------------------+----------------------------+------------+\n\n.. code:: python\n\n    client.send_quick_replies(recipient_id, \"Help\", [\n             QuickReply(\"Projects\", Intent.PROJECT),\n             QuickReply(\"Blog\", Intent.BLOG),\n             QuickReply(\"Contact Me\", Intent.CONTACT_ME)\n         ])\n\nButton Template\n~~~~~~~~~~~~~~~\n\nThe ``ActionButton(button_type, title, url, payload)`` class defines\nbutton template which contains a text and buttons attachment to request\ninput from the user.\n\n+-------------------+-------------------------------+-------------------------------------------+\n| Parameter         | Description                   | Required                                  |\n+===================+===============================+===========================================+\n| ``button_type``   | ``WEB_URL`` or ``POSTBACK``   | Y                                         |\n+-------------------+-------------------------------+-------------------------------------------+\n| ``title``         | The button title              | Y                                         |\n+-------------------+-------------------------------+-------------------------------------------+\n| ``url``           | The link                      | Only if ``button_type`` is ``url``        |\n+-------------------+-------------------------------+-------------------------------------------+\n| ``payload``       | The click payload string      | Only if ``button_type`` is ``POSTBACK``   |\n+-------------------+-------------------------------+-------------------------------------------+\n\n.. code:: python\n\n    client.send_buttons(recipient_id, \"\u4f60\u53ef\u4ee5\u900f\u904e\u4e0b\u5217\u65b9\u5f0f\u627e\u5230\u6211\", [\n        ActionButton(ButtonType.WEB_URL, \"Blog\", \"http://blog.enginebai.com\"),\n        ActionButton(ButtonType.POSTBACK, \"Email\", Intent.EMAIL)\n    ])\n\nGeneric Template\n~~~~~~~~~~~~~~~~\n\nThe ``GenericElement(title, subtitle, image_url, buttons)`` class\ndefines a horizontal scrollable carousel of items, each composed of an\nimage attachment, short description and buttons to request input from\nthe user.\n\n+---------------------+-------------------------------------------------------------+------------+\n| Parameter           | Description                                                 | Required   |\n+=====================+=============================================================+============+\n| ``title_text``      | The message main title                                      | Y          |\n+---------------------+-------------------------------------------------------------+------------+\n| ``subtitle_text``   | The message subtitle, leave it empty if you don't need it   | N          |\n+---------------------+-------------------------------------------------------------+------------+\n| ``button_list``     | The list of ``ActionButton``                                | Y          |\n+---------------------+-------------------------------------------------------------+------------+\n\n.. code:: python\n\n    project_list = []\n    for project_id in projects.keys():\n        project = projects[project_id]\n        project_list.append(GenericElement(\n            project[\"title\"],\n            project[\"description\"],\n            config.api_root + project[\"image_url\"], [\n                ActionButton(ButtonType.POSTBACK,\n                             self._get_string(\"button_more\"),\n                             # Payload\u7528Intent\u672c\u8eab\u4f5c\u70ba\u958b\u982d\n                             payload=Intent.PROJECTS.name + project_id)\n            ]))\n    self._messager.send_generic(recipient_id, project_list)\n\nUtility APIs\n------------\n\nSubscribe the pages\n~~~~~~~~~~~~~~~~~~~\n\nBefore your chatbot starts to receive the message, you have to subscribe\nthe application to your chatbot page. To subscribe a page, just call it:\n\n.. code:: python\n\n    client.subscribe_to_page()\n\nSet the welcome message and get-started button\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. figure:: https://raw.githubusercontent.com/enginebai/PyMessager/master/art/onboarding.png\n   :alt: \n\nThe greeting text will show at the first time you open this chatbot on\nmobile only. The payload is the trigger when the users click \"Get\nStarted\" button.\n\n.. code:: python\n\n    client.set_greeting_text(\"Hi, this is Engine Bai. Nice to meet you!\")\n    client.set_get_started_button_payload(\"HELP\")  # Specify a payload string.\n\nIssues\n------\n\nFeel free to submit bug reports or feature requests and make sure you\nread the contribution guideline before opening any issue.\n\nContributing\n------------\n\n1. Check the open/close issues or open a fresh issue for feature request\n   or bug report with different labels (``feature``/``bug``).\n2. Fork this `repository <https://github.com/enginebai/PyMessager>`__ on\n   GitHub to start customizing on master or new branch.\n3. Write a test which shows that the feature works as expected or the\n   bug was fixeed.\n4. Send a pull request and wait for code review.\n\n`Read more on contributing <./CONTRIBUTING.md>`__.\n\nLicense\n-------\n\n::\n\n    The MIT License (MIT)\n\n    Copyright \u00a9 2016 Engine Bai.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n\n.. |License: MIT| image:: https://img.shields.io/badge/License-MIT-yellow.svg\n   :target: https://opensource.org/licenses/MIT",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/enginebai/PyMessager",
    "keywords": null,
    "license": "The MIT License (MIT) Copyright \u00a9 2017 Engine Bai.",
    "maintainer": null,
    "maintainer_email": null,
    "name": "PyMessager",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/PyMessager/",
    "release_url": "https://pypi.org/project/PyMessager/1.0.0/",
    "requires_dist": [],
    "requires_python": null,
    "summary": "A Python SDK and Flask API to develop chatbot on Facebook Message Platform",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1f15b31e1b3297d3a50d1b11a147de6d",
          "sha256": "e518e6efa3e4d6b9ec65f3144dadb2bf1da8c6927adc11e1bfa047685888431f"
        },
        "downloads": 0,
        "filename": "PyMessager-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1f15b31e1b3297d3a50d1b11a147de6d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7477,
        "upload_time": "2017-06-26T15:18:31",
        "url": "https://files.pythonhosted.org/packages/42/9d/ef7c0089df8edef8903ed76f3aa0c84c8ef6f25da9a47db0b983af377a5f/PyMessager-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1f15b31e1b3297d3a50d1b11a147de6d",
        "sha256": "e518e6efa3e4d6b9ec65f3144dadb2bf1da8c6927adc11e1bfa047685888431f"
      },
      "downloads": 0,
      "filename": "PyMessager-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1f15b31e1b3297d3a50d1b11a147de6d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7477,
      "upload_time": "2017-06-26T15:18:31",
      "url": "https://files.pythonhosted.org/packages/42/9d/ef7c0089df8edef8903ed76f3aa0c84c8ef6f25da9a47db0b983af377a5f/PyMessager-1.0.0.tar.gz"
    }
  ]
}