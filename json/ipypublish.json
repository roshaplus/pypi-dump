{
  "info": {
    "author": "Chris Sewell",
    "author_email": "chrisj_sewell@hotmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Environment :: Web Environment",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Financial and Insurance Industry",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Scientific/Engineering :: Chemistry",
      "Topic :: Scientific/Engineering :: Physics",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "ipypublish\n==========\n\nA workflow for creating and editing publication ready scientific\nreports, from one or more Jupyter Notebooks, without leaving the\nbrowser!\n\n.. figure:: /example_workflow.gif\n   :alt: WorkFlow Example\n\n   WorkFlow Example\n\nSee |notebooks/Example.ipynb| and |converted/Example.pdf| for an example\nof the potential input/output.\n\n-  `Design Philosophy <#design-philosophy>`__\n-  `Workflow <#worklow>`__\n-  `Setting up the environment <#setting-up-the-environment>`__\n-  `Setting up a Notebook <#setting-up-a-notebook>`__\n-  `Converting Notebooks <#converting-notebooks>`__\n\n   -  `Creating a bespoke converter <#creating-a-bespoke-converter>`__\n\n-  `Latex Metadata Tags <#latex-metadata-tags>`__\n\n   -  `Captions in a Markdown cell <#captions-in-a-markdown-cell>`__\n\n-  `Citations and Bibliography <#citations-and-bibliography>`__\n-  `Live Slideshows <#live-slideshows>`__\n-  `Dealing with external data <#dealing-with-external-data>`__\n-  `Miscellaneous <#miscellaneous>`__\n-  `Acknowledgements <#acknowledgements>`__\n\nDesign Philosophy\n-----------------\n\nIn essence, the dream is to have the ultimate hybrid of Jupyter\nNotebook, WYSIWYG editor (e.g. MS Word) and document preparation system\n(e.g. `TexMaker <http://www.xm1math.net/texmaker/>`__), being able to:\n\n-  Dynamically (and reproducibly) explore data, run code and output the\n   results\n-  Dynamically edit and visualise the basic components of the document\n   (text, math, figures, tables, references, citations, etc).\n-  Have precise control over what elements are output to the final\n   document and how they are layed out and typeset.\n\n   -  Also be able to output the same source document to different\n      layouts and formats (pdf, html, presentation slides, etc).\n\nWorkflow\n--------\n\n1. Create a notebook with some content!\n2. optionally create a .bib file and logo image\n3. Adjust the notebook and cell metadata.\n4. Clone the ipypublish `GitHub\n   repository <https://github.com/chrisjsewell/ipypublish>`__ and run\n   the nbpublish.py script for either the specific notebook, or a folder\n   containing multiple notebooks.\n5. A converted folder will be created, into which final .tex .pdf and\n   \\_viewpdf.html files will be output, named by the notebook or folder\n   input\n\nThe default latex template outputs all markdown cells (unless tagged\nlatex\\_ignore), and then only code and output cells with `latex metadata\ntags <#latex-metadata-tags>`__. See\n`Example.ipynb <https://github.com/chrisjsewell/ipypublish/blob/master/example/notebooks/Example.ipynb>`__\nand\n`Example.pdf <https://github.com/chrisjsewell/ipypublish/blob/master/converted/Example.pdf>`__\nfor an example of the potential input and output.\n\nSetting up the environment\n--------------------------\n\nUsing `Conda <https://conda.io/docs/>`__ is recommended for package\nmanagement, in order to create self contained environments with specific\nversions of packages. The main packages required are the Jupyter\nnotebook, Jupyter\n`nbconvert <https://nbconvert.readthedocs.io/en/latest/index.html>`__\nand `Pandoc <http://pandoc.org>`__ (for conversion to latex):\n\n::\n\n    conda create --name ipyreport -c conda-forge jupyter pandoc\n\nFor converting to PDF, the TeX document preparation ecosystem is\nrequired (an in particular\n`latexmk <http://mg.readthedocs.io/latexmk.html>`__), which can be\ninstalled from:\n\n-  Linux: `TeX Live <http://tug.org/texlive/>`__\n-  macOS (OS X): `MacTeX <http://tug.org/mactex/>`__\n-  Windows: `MikTex <http://www.miktex.org/>`__\n\nFor helpful extensions to the notebooks core capabilities (like a toc\nsidebar):\n\n::\n\n    conda install --name ipyreport jupyter_contrib_nbextensions\n\nA more extensive setup of useful packages (used to create the example)\nare listed in |conda\\_packages.txt| and an environment can be created\ndirectly from this using conda:\n\n::\n\n    conda create --name ipyreport -c conda-forge -c matsci --file conda_packages.txt\n\nSetting up a Notebook\n---------------------\n\nFor improved latex/pdf output,\n`ipynb\\_latex\\_setup.py <https://github.com/chrisjsewell/ipypublish/blob/master/conda_packages.txt>`__\ncontains import and setup code for the notebook and a number of common\npackages and functions, including:\n\n-  numpy, matplotlib, pandas, sympy, ...\n-  ``images_hconcat``, ``images_vconcat`` and ``images_gridconcat``\n   functions, which use the PIL/Pillow package to create a single image\n   from multiple images (with specified arrangement)\n\nTo use this script, in the first cell of a notebook, insert:\n\n.. code:: python\n\n    from ipypublish.ipynb_latex_setup import *\n\nIt is recommended that you also set this cell as an initialisation cell\n(i.e. have ``\"init_cell\": true`` in the metadata)\n\nConverting Notebooks\n--------------------\n\nThe nbpublish.py script handles parsing the notebooks to nbconvert, with\nthe appropriate converter. To see all options for this script:\n\n::\n\n    python nbpublish.py -h\n\nFor example, to convert the Example.ipynb notebook:\n\n::\n\n    python nbpublish.py example/notebooks/Example.ipynb\n\nIf a folder is input, then the .ipynb files it contains are processed\nand combined in 'natural' sorted order, i.e. 2\\_name.ipynb before\n10\\_name.ipynb. By default, notebooks beginning '\\_' are ignored.\n\nCurrently, three output converters are availiable out-the-box (in the\nscripts folder):\n\n-  latex\\_ipypublish\\_main.py is the default and converts cells to latex\n   according to metadata tags on an 'opt in' basis.\n-  latex\\_standard\\_article.py replicates the standard latex article\n   template, which comes with nbconvert.\n-  html\\_toc\\_toggle\\_input.py converts the entire notebook(s) to html\n   and adds a table of contents sidebar and a button to toggle input\n   code on/off.\n\nThe current ``nbconvert --to pdf`` does not correctly resolve references\nand citations (since it copies the files to a temporary directory).\nTherefore nbconvert is only used for the initial\n``nbconvert --to latex`` phase, followed by using ``latexmk`` to create\nthe pdf and correctly resolve everything.\n\nCreating a bespoke converter\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nnbconvert uses `Jinja\ntemplates <https://jinja2.readthedocs.io/en/latest/intro.html>`__ to\nspecify the rules for how each element of the notebook should be\nconverted, and also what each section of the latex file should contain.\nTo create a `custom\ntemplate <https://nbconvert.readthedocs.io/en/latest/customizing.html#Custom-Templates>`__\nthey employ an inheritance method to build up this template. However, in\nmy experience this makes it;\n\n1. non-trivial to understand the full conversion process (having to go\n   through the inheritance tree to find where particular methods have\n   been implemented/overriden)\n2. difficult to swap in/out multiple rules\n\nTo improve this, ipypublish implements a pluginesque system to\nsystematically append to blank template placeholders. For example, to\ncreate a document (with standard formatting) with a natbib bibliography\nwhere only input markdown is output, we could create the following\ndictionary:\n\n.. code:: python\n\n\n    my_tplx_dict = { \n    'meta_docstring':'with a natbib bibliography',\n\n    'notebook_input_markdown':r\"\"\"\n        ((( cell.source | citation2latex | strip_files_prefix | convert_pandoc('markdown', 'json',extra_args=[]) | resolve_references | convert_pandoc('json','latex') )))\n    \"\"\",\n\n    'document_packages':r\"\"\"\n        \\usepackage[numbers, square, super, sort&compress]{natbib}\n        \\usepackage{doi} % hyperlink doi's  \n    \"\"\",\n\n    'document_bibliography':r\"\"\"\n    \\bibliographystyle{unsrtnat} % sort citations by order of first appearance\n    \\bibliography{bibliography}\n    \"\"\"\n\n    }\n\nThe converter would then look like this:\n\n.. code:: python\n\n\n    from ipypublish.latex.create_tplx import create_tplx\n    from ipypublish.latex.standard import standard_article as doc\n    from ipypublish.latex.standard import standard_definitions as defs\n    from ipypublish.latex.standard import standard_packages as package\n\n    oformat = 'Latex'\n    template = create_tplx([package.tplx_dict,defs.tplx_dict,\n                 doc.tplx_dict,my_tplx_dict])\n\n    config = {'TemplateExporter.filters':{},\n              'Exporter.filters':{}}\n\nLatex Metadata Tags\n-------------------\n\nAll information additional information, used to specify how a particular\nnotebook/cell in latex is represented, is stored in the metadata under:\n\n.. code:: json\n\n    {\n            \"latex_doc\": {}\n    }\n\nDocument Tags\n~~~~~~~~~~~~~\n\nTo specify where the **bibliography** is:\n\n.. code:: json\n\n    {\n    \"latex_doc\": {\n        \"bibliography\" : \"path/to/bibliograph.bib\"\n        }\n    }\n\nThe path can be absolute or relative.\n\nFor **titlepage**, enter in notebook metadata:\n\n.. code:: json\n\n    {\n    \"latex_doc\": {\n      \"titlepage\": {\n        \"author\": \"Authors Name\",\n        \"email\": \"authors@email.com\",\n        \"supervisors\": [\n          \"First Supervisor\",\n          \"Second Supervisor\"\n        ],\n        \"title\": \"Main-Title\",\n        \"subtitle\": \"Sub-Title\",\n        \"tagline\": \"A tagline for the report.\",\n        \"institution\": [\n          \"Institution1\",\n          \"Institution2\"\n        ],\n        \"logo\": \"path/to/logo_example.png\"\n      }\n    }\n\n-  all keys are optional\n-  if there is no title, then the notebook filename will be used\n-  if nbpublish.py is called on a folder, then the meta data from the\n   first notebook will be used\n-  logo should be the path (absolute or relative) to a logo image file\n\nTo control the output of **contents tables**:\n\n.. code:: json\n\n    {\n    \"latex_doc\": {\n      \"toc\": true,\n      \"listfigures\": true,\n      \"listtables\": true,\n      \"listcode\": true,\n      }\n    }\n\nTo override the default **placement of figures and tables**:\n\n.. code:: json\n\n    {\n    \"latex_doc\": {\n        \"figure\": {\n          \"placement\": \"!bp\"\n          }\n        \"table\": {\n          \"placement\": \"!bp\"\n          }\n      }\n    }\n\nSee\n`Positioning\\_images\\_and\\_tables <https://www.sharelatex.com/learn/Positioning_images_and_tables>`__\nfor placement options.\n\nCell Tags\n~~~~~~~~~\n\nTo **ignore any cell**:\n\n.. code:: json\n\n    {\n    \"latex_doc\": {\n        \"ignore\" : true\n        }\n    }\n\nTo **output a code block**:\n\n.. code:: json\n\n    {\n    \"latex_doc\": {\n      \"code\": {\n        \"asfloat\": true,\n        \"caption\": \"\",\n        \"label\": \"code:example_sym\",\n        \"widefigure\": false,\n        \"placement\": \"H\"\n        }\n      }\n    }\n\nall extra tags are optional:\n\n-  ``asfloat`` contitutes whether the code is wrapped in a codecell\n   (float) environment or is inline.\n-  all other tags work the same as figure (below).\n\nFor **figures**, enter in cell metadata:\n\n.. code:: json\n\n    {\n    \"latex_doc\": {\n      \"figure\": {\n        \"caption\": \"Figure caption.\",\n        \"label\": \"fig:flabel\",\n        \"placement\": \"H\",\n        \"widefigure\": false\n        }\n      }\n    }\n\n-  ``placement`` is optional and constitutes using a placement arguments\n   for the figure (e.g. \\\\begin{figure}[H]). See\n   `Positioning\\_images\\_and\\_tables <https://www.sharelatex.com/learn/Positioning_images_and_tables>`__.\n-  ``widefigure`` is optional and constitutes expanding the figure to\n   the page width (i.e. \\\\begin{figure\\*}) (placement arguments will\n   then be ignored)\n\nFor **tables**, enter in cell metadata:\n\n.. code:: json\n\n    {\n    \"latex_doc\": {\n         \"table\": {\n            \"caption\": \"Table caption.\",\n            \"label\": \"tbl:tlabel\",\n            \"placement\": \"H\",\n                \"alternate\": \"gray!20\"\n          }\n       }\n    }\n\n-  ``placement`` is optional and constitutes using a placement arguments\n   for the table (e.g. \\\\begin{table}[H]). See\n   `Positioning\\_images\\_and\\_tables <https://www.sharelatex.com/learn/Positioning_images_and_tables>`__.\n-  ``alternate`` is optional and constitutes using alternating colors\n   for the table rows (e.g. :raw-latex:`\\rowcolors{2}{gray!25}{white}`).\n   See\n   (https://tex.stackexchange.com/a/5365/107738)[https://tex.stackexchange.com/a/5365/107738].\n\nFor **equations**, enter in cell metadata:\n\n.. code:: json\n\n    {\n      \"latex_doc\": {\n          \"equation\": {\n            \"label\": \"eqn:elabel\"\n          }\n      }\n    }\n\nlabel is optional\n\nCaptions in a Markdown cell\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEspecially for long captions, it would be prefered that they can be\nviewed and edited in a notebook Markdown cell, rather than hidden in the\nmetadata. This can be achieved using the default latex template:\n\nIf a **markdown input** or **latex output** cell has the metadata tag:\n\n.. code:: json\n\n    {\n     \"latex_doc\": {\n        \"caption\": \"fig:example_mpl\"\n        }\n    }\n\nThen, instead of it being input directly into the .tex file, it will be\nstored as a variable;\n\n-  the variable's name is created from the latex\\_caption value\n-  the variable's value is the first paragraph of the markdown text\n   (i.e. nothing after a :raw-latex:`\\n`)\n\nIf a subsequent **figure, table or code** cell has a label matching any\nstored variable name, for example:\n\n.. code:: json\n\n    {\n    \"latex_doc\": {\n        \"figure\": {\n        \"caption\": \"\",\n        \"label\": \"fig:example_mpl\"\n        }\n      }\n    }\n\nThen its caption will be overriden with that variable.\n\nThe manner in which this works can be found in\n`Example.tex <https://github.com/chrisjsewell/ipypublish/blob/master/converted/>`__:\n\n.. code:: latex\n\n    \\newcommand{\\kyfigcexampleumpl}{A matplotlib figure, with the caption set in the markdowncell above the figure.}\n\n    \\begin{figure}\n        \\begin{center}\\adjustimage{max size={0.9\\linewidth}{0.4\\paperheight}}{Example_files/Example_14_0.pdf}\\end{center}\n        \\ifdefined\\kyfigcexampleumpl\n        \\caption{\\kyfigcexampleumpl}\n        \\else\n        \\caption{}\n        \\fi\n        \\label{fig:example_mpl}\n    \\end{figure}\n\nNote, this approach has the implicit contraint that caption cells must\nbe above the corresponding figure/table to be output in the latex/pdf.\n\nCitations and Bibliography\n--------------------------\n\nUsing Zotero's Firefox plugin and `Zotero Better\nBibtex <https://github.com/retorquere/zotero-better-bibtex/releases/tag/1.6.100>`__\nfor;\n\n-  automated .bib file updating\n-  drag and drop cite keys\n   :raw-latex:`\\cite{kirkeminde_thermodynamic_2012}`\n-  ``latexmk -bibtex -pdf`` (in nbpublish.py) handles creation of the\n   bibliography\n-  :raw-latex:`\\usepackage{doi}` turns the DOI numbers into url links\n\n   -  in Zotero-Better-Bibtex I have the option set to only export DOI,\n      if both DOI and URL are present.\n\nPlease note, at the time of writing, Better BibTeX does not support\nZotero 5.0\n(`issue#555 <https://github.com/retorquere/zotero-better-bibtex/issues/555>`__).\nFor now I have turned off auto-updates of Zotero, though this is\nprobably not wise for long (`Zotero 5\nDiscussion <https://forums.zotero.org/discussion/comment/277434/#Comment_277434>`__).\n\nCan use:\n\n.. code:: html\n\n    <cite data-cite=\"kirkeminde_thermodynamic_2012\">(Kirkeminde, 2012)</cite> \n\nto make it look better in html, but not specifically available for drag\nand drop in Zotero\n\nLive Slideshows\n---------------\n\nThe `Reveal.js - Jupyter/IPython Slideshow Extension\n(RISE) <https://github.com/damianavila/RISE>`__ notebook extension\noffers rendering as a Reveal.js-based slideshow, where you can execute\ncode or show to the audience whatever you can show/do inside the\nnotebook itself! Click on the image to see a demo:\n\n|RISE Demo|\n\nDealing with external data\n--------------------------\n\nA goal for scientific publishing is automated reproducibility of\nanalyses, which the Jupyter notebook excels at. But, more than that, it\nshould be possible to efficiently reproduce the analysis with different\ndata sets. This entails having **one point of access** to a data set\nwithin the notebook, rather than having copy-pasted data into variables,\ni.e. this:\n\n.. code:: python\n\n    data = read_in_data('data_key')\n    variable1 = data.key1\n    variable2 = data.key2\n    ...\n\nrather than this:\n\n.. code:: python\n\n    variable1 = 12345\n    variable2 = 'something'\n    ...\n\nThe best-practice for accessing heirarchical data (in my opinion) is to\nuse the JSON format (as long as the data isn't\n`relational <http://www.sarahmei.com/blog/2013/11/11/why-you-should-never-use-mongodb/>`__),\nbecause it is:\n\n-  applicable for any data structure\n-  lightweight and easy to read and edit\n-  has a simple read/write mapping to python objects (using\n   `json <https://docs.python.org/3.6/library/json.html>`__)\n-  widely used (especially in web technologies)\n\nA good way to store multiple bits of JSON data is in a\n`mongoDB <https://docs.mongodb.com/manual/administration/install-community/>`__\nand accessing it via\n`pymongo <https://api.mongodb.com/python/current/>`__. This will also\nmake it easy to move all the data to a cloud server at a later time, if\nrequired.\n\n::\n\n    conda install pymongo\n\nBut, if the data is coming from files output from different simulation\nor experimental code, where the user has no control of the output\nformat. Then writing JSON parsers may be the way to go, and this is\nwhere `jsonextended <https://github.com/chrisjsewell/jsonextended>`__\ncomes in, which implements:\n\n-  a lightweight plugin system to define bespoke classes for parsing\n   different file extensions and data types.\n-  a 'lazy loader' for treating an entire directory structure as a\n   nested dictionary.\n\nFor example:\n\n.. code:: python\n\n    from jsonextended import plugins, edict\n    plugins.load_plugins_dir('path/to/folder_of_parsers','parsers')\n    data = edict.LazyLoad('path/to/data')\n    variable1 = data.folder1.file1_json.key1\n    variable2 = data[['folder1','file1.json','key2']]\n    variable3 = data[['folder1','file2.csv','key1']]\n    variable4 = data[['folder2','subfolder1','file3.other','key1']]\n    ...    \n\nIf you are dealing with numerical data arrays which are to large to be\nloaded directly in to memory, then the\n`h5py <http://docs.h5py.org/en/latest/index.html>`__ interface to the\n`HDF5 <http://hdfgroup.org/>`__ binary data format, allows for the\nmanipultion of even multi-terabyte datasets stored on disk, as if they\nwere real NumPy arrays. These files are also supported by\n`jsonextended <https://github.com/chrisjsewell/jsonextended>`__ lazy\nloading.\n\nMiscellaneous\n-------------\n\nI also use the Firefox Split Pannel extension to view the\n{name}\\_viewpdf.html page and monitor changes to the pdf.\n\n`bookbook <https://github.com/takluyver/bookbook>`__ is another package\nwith some conversion capabilities.\n\nAcknowledgements\n----------------\n\nI took strong influence from:\n\n-  `Julius\n   Schulz <http://blog.juliusschulz.de/blog/ultimate-ipython-notebook>`__\n-  `Dan\n   Mackinlay <https://livingthing.danmackinlay.name/jupyter.html>`__\n-  Notebook concatination was adapted from `nbconvert\n   issue#253 <https://github.com/jupyter/nbconvert/issues/253>`__\n\n.. |notebooks/Example.ipynb| image:: example/notebooks/Example.pdf\n.. |converted/Example.pdf| image:: converted/Example.pdf\n.. |conda\\_packages.txt| image:: conda_packages.txt\n.. |RISE Demo| image:: https://img.youtube.com/vi/sXyFa_r1nxA/0.jpg\n   :target: https://www.youtube.com/watch?v=sXyFa_r1nxA\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/chrisjsewell/ipypublish",
    "keywords": "python,jupyter-notebook,nbconvert,pandoc,latex,pdf",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ipypublish",
    "platform": "",
    "project_url": "https://pypi.org/project/ipypublish/",
    "release_url": "https://pypi.org/project/ipypublish/0.0.1/",
    "requires_dist": [
      "traitlets",
      "pathlib",
      "numpy",
      "nbformat",
      "nbconvert",
      "jinja2",
      "funcargparse"
    ],
    "requires_python": "",
    "summary": "A workflow for creating and editing publication ready scientific reports, from one or more Jupyter Notebooks",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8eab4038c54d8a90551f0b515ce1a910",
          "sha256": "085e60e651f41f5f6ae6c7d4e6898738aa130b9fb393af620e5d7e91e816b985"
        },
        "downloads": 0,
        "filename": "ipypublish-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8eab4038c54d8a90551f0b515ce1a910",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 48836,
        "upload_time": "2017-07-15T17:54:46",
        "url": "https://files.pythonhosted.org/packages/13/b5/61da5691d7cd239e80f7a9c7cbca9b19de1a38a8574684ea934fa503251a/ipypublish-0.0.1-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8eab4038c54d8a90551f0b515ce1a910",
        "sha256": "085e60e651f41f5f6ae6c7d4e6898738aa130b9fb393af620e5d7e91e816b985"
      },
      "downloads": 0,
      "filename": "ipypublish-0.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8eab4038c54d8a90551f0b515ce1a910",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 48836,
      "upload_time": "2017-07-15T17:54:46",
      "url": "https://files.pythonhosted.org/packages/13/b5/61da5691d7cd239e80f7a9c7cbca9b19de1a38a8574684ea934fa503251a/ipypublish-0.0.1-py2.py3-none-any.whl"
    }
  ]
}