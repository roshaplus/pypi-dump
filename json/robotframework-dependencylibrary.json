{
  "info": {
    "author": "Alexander Kozhevnikov",
    "author_email": "mentalisttraceur@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Robot Framework :: Library",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Testing"
    ],
    "description": "Robot Framework Dependency Library\n==================================\n\nDeclare dependencies between tests. Make tests automatically fail based\non the results of other test cases or test suites.\n\nAlthough I strongly recommend that people write tests to be independent,\nsometimes, dependencies between tests are the simplest and easiest model\nto implement, and having tests fail-fast if one or more previous test\ncases didn't get the expected result can be beneficial.\n\n\nVersioning\n----------\n\nThis library's version numbers follow the `SemVer 2.0.0 specification\n<https://semver.org/spec/v2.0.0.html>`_.\n\n\nUsage\n-----\n\nFirst, include the library in your tests (if you copied/cloned the\nDependencyLibrary.py from the repository, make sure the directory\ncontaining it is passed to ``robot`` with the ``--pythonpath`` option):\n\n.. code:: robotframework\n\n    *** Settings ***\n    Library  DependencyLibrary\n\nLet's say you have a passing and failing test:\n\n.. code:: robotframework\n\n    *** Test cases ***\n    Passing Test\n        No operation\n\n    Failing Test\n        Fail  This test is intentionally hardcoded to fail\n\nA basic test that depends on the passing test looks like this:\n\n.. code:: robotframework\n\n    *** Test cases ***\n    This Test Depends on \"Passing Test\" Passing\n        Depends on test  Passing Test\n        Log  The rest of the keywords in this test will run as normal.\n\nOf course, you can depend on a test failure instead:\n\n.. code:: robotframework\n\n    *** Test cases ***\n    This Test Depends on \"Failing Test\" Failing\n        Depends on test failure  Failing Test\n        Log  The rest of the keywords in this test will run as normal.\n\nYou can also depend on the status of a test suite:\n\n.. code:: robotframework\n\n    *** Test cases ***\n    Depends on test suite\n        Depends on suite  My Test Suite Name\n        Log  The rest of the keywords in this test will run as normal.\n\n\nFailures\n--------\n\nSince the ``Depends on ...`` keywords fail when the dependency is not\nmet, it supports all the usual logic you'd expect from Robot Framework:\n\nThe test case automatically aborts with a failure when the ``Depends on\n...`` keyword fails as you'd expect, unless you capture the status and\nerror message using something like ``Run keyword and expect error``.\n\n\nError Messages\n--------------\n\nThe error messages are documented (and are considered part of the\ninterface, so you can rely on `SemVer` semantics: the major version\nnumber will be bumped if the logic for error messages ever changes):\n\nIf a test failed when you expected it to pass, you'll get a helpful error:\n\n.. code:: robotframework\n\n    *** Test cases ***\n    This Test Depends on \"Failing Test\" Passing\n        Depends on test  Failing Test\n        Log  The rest of the keywords (including this log) will NOT run!\n\nThe error message will be::\n\n    Dependency not met: test case 'Failing Test' state is 'FAIL', wanted 'PASS'\n\nSame with expecting a passing test to fail:\n\n.. code:: robotframework\n\n    *** Test cases ***\n    This Test Depends on \"Passing Test\" Failing\n        Depends on test failure  Passing Test\n        Log  The rest of the keywords (including this log) will NOT run!\n\nThe error message will be::\n\n    Dependency not met: test case 'Passing Test' state is 'PASS', wanted 'FAIL'\n\nIf you typo a test, or try to depend on the status of the test before\nit's been run, for example:\n\n.. code:: robotframework\n\n    *** Test cases ***\n    Depends on Non-Existant Test Case\n        Depends on test  Misnamed Test\n\nThe error message will be::\n\n    Dependency not met: test case 'Misnamed Test' not found, wanted 'PASS'\n\nIf you accidentally make a test depend on itself, it will give a similar\nerror message that more precisely identifies the error:\n\n.. code:: robotframework\n\n    *** Test cases ***\n    Depends on self\n        Depends on test  Depends on self\n\nThe error message will be::\n\n    Dependency not met: test case 'Depends on self' mid-execution, wanted 'PASS'\n\nAll test suite error messages are the same, except that they use the\nwords \"test suite\" instead of \"test case\".\n\n.. note::\n\n    If you need to programmatically parse the error messages, keep in\n    mind that test case and suite names and statuses are quoted using\n    logic equivalent to the Python built-in function ``repr``.\n\n\nExtras\n------\n\nFor symmetry with ``Depends on test failure``, the keyword ``Depends on\ntest success`` is available as a synonym for ``Depends on test``:\n\n.. code:: robotframework\n\n    *** Test cases ***\n    This Test Depends on \"Passing Test\" Passing (using alternate keyword)\n        Depends on test success  Passing Test\n        Log  The rest of the keywords in this test will run as normal.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/mentalisttraceur/robotframework-dependencylibrary",
    "keywords": "",
    "license": "0BSD (BSD Zero Clause License)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "robotframework-dependencylibrary",
    "platform": "",
    "project_url": "https://pypi.org/project/robotframework-dependencylibrary/",
    "release_url": "https://pypi.org/project/robotframework-dependencylibrary/1.0.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Declare dependencies between Robot Framework tests",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4bb3da63bcdbce7c52b7516aec3b0368",
          "sha256": "8ff09649cab5945ef97ae553cc701a150b0fb1d313181c1a3314d99744384068"
        },
        "downloads": -1,
        "filename": "robotframework-dependencylibrary-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4bb3da63bcdbce7c52b7516aec3b0368",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4446,
        "upload_time": "2017-12-22T06:16:02",
        "url": "https://files.pythonhosted.org/packages/a1/e7/49027e1b0b6467aa42faf21a920bbc5e938be8fd76d9984240e41f8c3ebb/robotframework-dependencylibrary-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4bb3da63bcdbce7c52b7516aec3b0368",
        "sha256": "8ff09649cab5945ef97ae553cc701a150b0fb1d313181c1a3314d99744384068"
      },
      "downloads": -1,
      "filename": "robotframework-dependencylibrary-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4bb3da63bcdbce7c52b7516aec3b0368",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4446,
      "upload_time": "2017-12-22T06:16:02",
      "url": "https://files.pythonhosted.org/packages/a1/e7/49027e1b0b6467aa42faf21a920bbc5e938be8fd76d9984240e41f8c3ebb/robotframework-dependencylibrary-1.0.0.tar.gz"
    }
  ]
}