{
  "info": {
    "author": "Florian Lagg",
    "author_email": "github@florian.lagg.at",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 2.7",
      "Topic :: Database",
      "Topic :: Office/Business :: Financial",
      "Topic :: Utilities"
    ],
    "description": "DimensionTabler\n===============\n\nBuilds dimension tables with configurable/variable grainularity. Keeps\nthose tables up-to-date. This makes reporting queries performant and\ndoable. I use it with `grafana <https://grafana.com/>`__.\n\nBtw: this is a bad \u201cdenglish\u201d name, suggest a better one.\n\nI\u2019m interested, some details please\n-----------------------------------\n\nLet\u2019s do an example. We do gather tickers for a bunch of\ncryptocurrencies. We do that every minute for the top 10 currencies.\nThis makes 864k lines per day.\n\nNow we want to show them on a graph using grafana - great this works.\nlater we join more and more information into this graph (e.g.\u00a0balance we\nhold on each coin), the query gets slower and slower, and finally times\nout.\n\nHere DimensionTabler jumps in. We want to be able to see long term\nticker graphs, and we want to be able to see short term graphs in more\ndetail. Let\u2019s put this in a table:\n\n+-------------+-------------+-------------+-------------+-------------+\n| Ticker date | granularity | original    | dim.table   | reduced to  |\n|             |             | count       | count       | %           |\n+=============+=============+=============+=============+=============+\n| last 24     | every       | every       | 1,440       | 0%          |\n| hours       | ticker      | minute =    |             |             |\n|             | value       | 1,440       |             |             |\n+-------------+-------------+-------------+-------------+-------------+\n| last 7 days | 15 minutes  | (6 days) =  | /15\u2019 = +576 | 20%         |\n|             |             | +8,640      |             |             |\n+-------------+-------------+-------------+-------------+-------------+\n| last 30     | 1 hour      | +33,120     | +552        | 5.9%        |\n| days        |             |             |             |             |\n+-------------+-------------+-------------+-------------+-------------+\n| last 90     | 4 hours     | +86,400     | +360        | 2.3%        |\n| days        |             |             |             |             |\n+-------------+-------------+-------------+-------------+-------------+\n| before 90   |             |             |             |             |\n| days:       |             |             |             |             |\n+-------------+-------------+-------------+-------------+-------------+\n| \u2026 stat for  | 1 day       | +396,000    | +275        | 0.6%        |\n| 1 year      |             |             |             |             |\n+-------------+-------------+-------------+-------------+-------------+\n| \u2026 for       | 1 day       | +4,730,400  | +3,285      | 0.1%        |\n| another 9   |             |             |             |             |\n| years       |             |             |             |             |\n+-------------+-------------+-------------+-------------+-------------+\n\nSo for 10 years our graph sql result counts 6,488 lines, the unfiltered\nresult has 5,256,000 lines. Just by ignoring really unneded detail.\nDimensionTabler keeps this up-to-date and applies given rules.\n\nUsage\n-----\n\nSee\n`Example.py <https://github.com/LaggAt/DimensionTabler/blob/master/Example.py>`__\n\nDonate\n------\n\nSupport me with bitcoins:\n\n.. figure:: https://i.imgur.com/ltpF0A4m.png\n   :alt: Imgur\n\n   Imgur\n\n1MiToswzMsrhQEfmZbLQT8PHC68E5JhJzh\n\nThanks.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/LaggAt/DimensionTabler",
    "keywords": "dimension tables database grafana bi business intelligence",
    "license": "GPL v3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DimensionTabler",
    "platform": "",
    "project_url": "https://pypi.org/project/DimensionTabler/",
    "release_url": "https://pypi.org/project/DimensionTabler/0.1.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Builds dimension tables with configurable/variable grainularity.Keeps those tables up-to-date. This makes reporting queries performant and doable. I use it with grafana.",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "56a8f9a3f1f6ea4098ca65a6712233d1",
          "sha256": "a6ce3ac68808c0dd5adac95f5f930e16bd0922d97ab7bec7eaeed6748b914c0d"
        },
        "downloads": -1,
        "filename": "DimensionTabler-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "56a8f9a3f1f6ea4098ca65a6712233d1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4611,
        "upload_time": "2018-02-11T09:53:49",
        "url": "https://files.pythonhosted.org/packages/6b/81/6e983ddd8c218c57c07d44895751d16d1633e53572ce5484122e96eb9f5e/DimensionTabler-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "56a8f9a3f1f6ea4098ca65a6712233d1",
        "sha256": "a6ce3ac68808c0dd5adac95f5f930e16bd0922d97ab7bec7eaeed6748b914c0d"
      },
      "downloads": -1,
      "filename": "DimensionTabler-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "56a8f9a3f1f6ea4098ca65a6712233d1",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4611,
      "upload_time": "2018-02-11T09:53:49",
      "url": "https://files.pythonhosted.org/packages/6b/81/6e983ddd8c218c57c07d44895751d16d1633e53572ce5484122e96eb9f5e/DimensionTabler-0.1.1.tar.gz"
    }
  ]
}