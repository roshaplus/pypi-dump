{
  "info": {
    "author": "Krzysztof Warunek",
    "author_email": "krzysztof@warunek.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "aiounittest\n===========\n\n|image0|_ |image1|_\n\n.. |image0| image:: https://api.travis-ci.org/kwarunek/aiounittest.png?branch=master\n.. _image0: https://travis-ci.org/kwarunek/aiounittest\n\n.. |image1| image:: https://badge.fury.io/py/aiounittest.svg\n.. _image1: https://badge.fury.io/py/aiounittest\n\nInfo\n====\n\nThis is a helper library to ease of your pain (and boilerplate), when writing a test of the asynchronous code (:code:`asyncio`). You can test:\n\n* synchronous code (same as the :code:`unittest.TestCase`)\n* asynchronous code, it supports syntax with :code:`async`/:code:`await` (Python 3.5+) and :code:`asyncio.coroutine`/:code:`yield from` (Python 3.4)\n\n\nInstallation\n============\n\nUse pip:\n\n::\n\n    pip install aiounitest\n\nor manually\n\n::\n\n    git clone https://github.com/kwarunek/aiounittest.git\n    cd aiounittest\n    python setup.py install\n\nUsage\n=====\n\nThis library exposes following objects:\n\n1. AsyncTestCase_\n2. futurized_\n3. async_test_\n\nEach of them can be used independently.\n\n\nAsyncTestCase\n-------------\n\n.. code-block:: python\n\n    import asyncio\n    import aiounittest\n\n\n    async def add(x, y):\n        await asyncio.sleep(0.1)\n        return x + y\n\n    class MyTest(aiounittest.AsyncTestCase):\n\n        async def test_async_add(self):\n            ret = await add(5, 6)\n            self.assertEqual(ret, 11)\n\n        # or 3.4 way\n        @asyncio.coroutine\n        def test_sleep(self):\n            ret = yield from add(5, 6)\n            self.assertEqual(ret, 11)\n\n        # some regular test code\n        def test_something(self):\n            self.assertTrue(true)\n\n\nBy default :code:`AsyncTestCase` use the main event loop and cleans it ups on every test. If you want to change that behaiour  override the :code:`AsyncTestCase.get_event_loop` method.\n\n____________\n\nfuturized\n----------\n\nThis helper wraps object in the asyncio's :code:`Future`. It can be used to mock coroutines. Decorate any kind of object with it and pass to :code:`unittest.mock.Mock`'s (:code:`MagicMock` as well) :code:`return_value` or :code:`side_effect`. If the given object is an :code:`Exception` (or its sublcass), :code:`futurized` will treat it accordingly and exception will be raised upon await.\n\nSome dummy module:\n\n.. code-block:: python\n\n    # dummy_math.py\n\n    from asyncio import sleep\n\n    async def add(x, y):\n        await sleep(666)\n        return x + y\n\n\nAnd the test with mocked :code:`asyncio.sleep`:\n\n.. code-block:: python\n\n    from aiounittest import futurized, AsyncTestCase\n    from unittest.mock import Mock, patch\n\n    import dummy_math\n\n    class MyTest(AsyncTestCase):\n\n        def tearDown(self):\n            super().tearDown()\n            patch.stopall()\n\n        async def test_add(self):\n            mock_sleep = Mock(return_value=futurized('whatever'))\n            patch('dummy_math.sleep', mock_sleep).start()\n            ret = await dummy_math.add(5, 6)\n            self.assertEqual(ret, 11)\n\n        async def test_fail(self):\n            mock_sleep = Mock(return_value=futurized(Exception('whatever')))\n            patch('dummy_math.sleep', mock_sleep).start()\n            with self.assertRaises(Exception) as e:\n                await dummy_math.add(5, 6)\n\n____________\n\nasync_test\n----------\n\nIt's a decorator that let you to use the standard `unittest.TestCase` and run asynchronous tests, just decorate them.\n\n.. code-block:: python\n\n    import asyncio\n    import unittest\n    from aiounittest import async_test\n\n\n    async def add(x, y):\n        await asyncio.sleep(0.1)\n        return x + y\n\n    class MyTest(unittest.TestCase):\n\n        @async_test\n        async def test_async_add(self):\n            ret = await add(5, 6)\n            self.assertEqual(ret, 11)\n\n\nYou can also pass the custom event loop with :code:`loop` argument. Note if the loop is provided, decorator won't close it.\n\n.. code-block:: python\n\n    import asyncio\n    from aiounittest import async_test\n\n\n    my_loop = asycio.get_event_loop()\n\n    @async_test(loop=my_loop)\n    async def my_func():\n        await asyncio.sleep(1)\n        return 'OK'\n\n    # now call the function in the sync manner\n    my_func()\n    assert loop.is_closed() == False\n\nAbove examples also shows a handy way to call async code in sync way. If the name is a problem, the same functionality provide :code:`aiounittest.helpers.run_sync`. For example:\n\n.. code-block:: python\n\n    import asyncio\n    from aiounittest.helpers import run_sync\n\n    # using decorator syntax\n\n    @run_sync\n    async def my_func1():\n        await asyncio.sleep(1)\n        return 'OK1'\n\n    ret = my_func1()\n    print(ret)\n\n    # using as a wrapper\n\n    async def my_func2():\n        await asyncio.sleep(1)\n        return 'OK2'\n\n    sync_my_func2 = run_sync(my_func2)\n    ret = sync_my_func2()\n    print(ret)\n\nLicense\n=======\n\nMIT\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/kwarunek/aiounittest",
    "keywords": "asyncio,async,unittest,coroutine",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiounittest",
    "platform": "",
    "project_url": "https://pypi.org/project/aiounittest/",
    "release_url": "https://pypi.org/project/aiounittest/1.0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Test asyncio code more easily.",
    "version": "1.0.1"
  },
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6092bfbcdeb99aa45a336b16ba936007",
          "sha256": "16cd5340cd0d2c71485d1bc8342edb3ccaa079a62b3bc219c51e1bda3d2255fc"
        },
        "downloads": 0,
        "filename": "aiounittest-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6092bfbcdeb99aa45a336b16ba936007",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 6759,
        "upload_time": "2017-08-17T23:48:35",
        "url": "https://files.pythonhosted.org/packages/f4/c6/f64e7d2ac6da20c04a905c5965a9ca0f1f59912d17ad5bf05ee7b16be82a/aiounittest-1.0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2b60a354e570852740dc4eca9a82d334",
          "sha256": "94187839bac0986bf4ab6d23361d354edc9551d42d9108c7587bae0abaa28623"
        },
        "downloads": 0,
        "filename": "aiounittest-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2b60a354e570852740dc4eca9a82d334",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4771,
        "upload_time": "2017-08-17T23:48:36",
        "url": "https://files.pythonhosted.org/packages/9b/cc/2890c8fa4815b42b3762fa39199f1361eeb5e15cac92c400ddd2691312dd/aiounittest-1.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6092bfbcdeb99aa45a336b16ba936007",
        "sha256": "16cd5340cd0d2c71485d1bc8342edb3ccaa079a62b3bc219c51e1bda3d2255fc"
      },
      "downloads": 0,
      "filename": "aiounittest-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6092bfbcdeb99aa45a336b16ba936007",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 6759,
      "upload_time": "2017-08-17T23:48:35",
      "url": "https://files.pythonhosted.org/packages/f4/c6/f64e7d2ac6da20c04a905c5965a9ca0f1f59912d17ad5bf05ee7b16be82a/aiounittest-1.0.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "2b60a354e570852740dc4eca9a82d334",
        "sha256": "94187839bac0986bf4ab6d23361d354edc9551d42d9108c7587bae0abaa28623"
      },
      "downloads": 0,
      "filename": "aiounittest-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2b60a354e570852740dc4eca9a82d334",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4771,
      "upload_time": "2017-08-17T23:48:36",
      "url": "https://files.pythonhosted.org/packages/9b/cc/2890c8fa4815b42b3762fa39199f1361eeb5e15cac92c400ddd2691312dd/aiounittest-1.0.1.tar.gz"
    }
  ]
}