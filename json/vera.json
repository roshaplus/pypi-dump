{
  "info": {
    "author": "S. Andrew Sheppard",
    "author_email": "andrew@wq.io",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: JavaScript",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Database :: Database Engines/Servers",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "|vera|\n\n`vera <https://wq.io/vera>`__ is the reference implementation of the\nEntity-Record-Attribute-Value (`ERAV <https://wq.io/docs/erav>`__) data\nmodel. ERAV is an extension to Entity-Attribute-Value (EAV) that adds\nsupport for maintaining multi-faceted provenance metadata for an\nentity [1]_.\n\n|Latest PyPI Release| |Release Notes| |License| |GitHub Stars| |GitHub\nForks| |GitHub Issues|\n\n|Travis Build Status| |Python Support| |Django Support|\n\nThe implementation of ERAV provided by vera is optimized for storing and\ntracking changes to *time series data* as it is exchanged between\ndisparate technical platforms (e.g. mobile devices, Excel spreadsheets,\nand third-party databases). In this context, ERAV can be interpreted to\nmean Event-Report-Attribute-Value, as it represents a series of *events*\nbeing described by the *reports* submitted about them by various\ncontributors in e.g. an environmental monitoring or citizen science\nproject.\n\nGetting Started\n===============\n\n.. code:: bash\n\n    pip3 install vera\n\nvera is an extension to `wq.db <https://wq.io/wq.db>`__, the database\ncomponent of the `wq framework <https://wq.io/>`__. See\nhttps://github.com/wq/vera to report any issues.\n\nModels\n======\n\nThe core of vera is a collection of `Django\nmodels <https://docs.djangoproject.com/en/1.7/topics/db/models/>`__ that\ndescribe the various components of the ERAV data model. There are four\nprimary models (ERAV) and three auxilary models, for a total of seven\nmodels. The mapping from vera models to their ERAV conceptual\nequivalents is below:\n\n+---------------------+-------------------+\n| vera model          | ERAV equivalent   |\n+=====================+===================+\n| **``Event``**       | *Entity*          |\n+---------------------+-------------------+\n| ``Site``            | -                 |\n+---------------------+-------------------+\n| **``Report``**      | *Record*          |\n+---------------------+-------------------+\n| ``ReportStatus``    | -                 |\n+---------------------+-------------------+\n| **``Parameter``**   | *Attribute*       |\n+---------------------+-------------------+\n| **``Result``**      | *Value*           |\n+---------------------+-------------------+\n| ``EventResult``     | -                 |\n+---------------------+-------------------+\n\nThe vera models are all\n`swappable <https://github.com/wq/django-swappable-models>`__, which\nmeans they can be subclassed and extended without breaking the foreign\nkey relationships needed by the ERAV model. For example, to customize\nthe ``Event`` model, subclass ``BaseEvent`` and update your\n``settings.py``:\n\n.. code:: python\n\n    # myapp/models.py\n    from django.db import models\n    from vera.models import BaseEvent\n\n    class Event(BaseEvent):\n        date = models.DateTimeField()\n        type = models.CharField()\n\n.. code:: python\n\n    # settings.py\n    WQ_EVENT_MODEL = \"myapp.Event\"\n\nEach of the seven models are described in detail below.\n\n``Event``\n---------\n\nThe ``Event`` model corresponds to the *Entity* in the ERAV data model.\n``Event`` represents a time series of monitoring events. For example,\neach visit a volunteer makes to an observation site could be called an\n``Event``. The ``Event`` model does not contain any metadata about the\ndigital record describing the event. This information is in the\n``Report`` model, discussed below.\n\nAt a minimum, an Event instance has a ``site`` reference (see below) and\nan event ``date``, which might be either a date or a full date and time,\ndepending on project needs. The default implementation assumes a date\nwithout time. A custom ``date`` field and additional attributes can be\nconfigured by extending ``BaseEvent`` and swapping out ``Event`` via the\n``WQ_EVENT_MODEL`` setting. Note that if ``Event`` is swapped out,\n``EventResult`` should be as well.\n\n``Site``\n--------\n\nThe ``Site`` model represents the location where an event occured. It is\nnot strictly a part of the original ERAV definition but is a natural\nextension. In the default implementation, ``Site`` simply contains\n``latitude`` and ``longitude`` fields. In practice, ``Site`` is often\nswapped out for a version with\n`identify <https://wq.io/docs/identify>`__ support, to facilitate\nmanagement of site identifiers assigned by the project or by third\nparties.\n\n.. code:: python\n\n    # myapp/models.py\n    from django.db import models\n    from vera.models import BaseSite\n\n    class Site(models.IdentifiedModel, models.LocatedModel, BaseSite):\n        pass\n\n.. code:: python\n\n    # settings.py\n    WQ_SITE_MODEL = \"myapp.Site\"\n\nAll site instances have a ``valid_events`` property that returns all of\nthe event instances that contain at least one valid report.\n\n``Report``\n----------\n\nThe ``Report`` model corresponds to the *Record* in the ERAV data model.\n``Report`` tracks the provenance metadata about the ``Event``, e.g. who\nentered it, when it was entered, etc. Depending on when and how data is\nentered, there can be multiple ``Reports`` describing the same event.\nThe status of each of these reports is tracked separately.\n\nAt a minimum, ``Report`` instances have an ``event`` attribute, a\n``status`` attribute (see below), a ``user`` attribute, and an\n``entered`` timestamp. ``user`` and ``entered`` are set automatically\nwhen a report is created via the `REST\nAPI <https://wq.io/docs/about-rest>`__. Additional attributes can be\nadded by extending ``BaseReport`` and swapping out ``Report`` via the\n``WQ_REPORT_MODEL`` setting. Note that the ``Report`` model contains\nonly provenance metadata and no information about the event itself - the\n``Event`` model should contain that information.\n\nIn addition to the default manager (``objects``), ``Report`` also has a\ncustom manager, ``vaild_objects`` that includes only reports with valid\nstatuses. ``Report`` instances have a ``vals`` property that can be used\nto retrieve (and set) a ``dict`` mapping of parameter names to result\nvalues (see below).\n\nIn cases where there are more than one valid report for an event, there\nmay be an ambiguity if reports contain contradicting data. In this case\nthe ``WQ_VALID_REPORT_ORDER`` setting can be used control which reports\nare given priority. The default setting is ``(\"-entered\", )``, which\ngives priority to the most recently entered reports. (See the `CSCW\npaper <https://wq.io/research/provenance>`__ for an in depth discussion\nof conflicting reports).\n\n``ReportStatus``\n----------------\n\nTo support custom workflows, the list of report statuses is maintained\nas a separate model, ``ReportStatus``. ``ReportStatus`` instances have a\nshort code (``slug``), a ``name``, and an ``is_valid`` boolean\nindicating whether reports with that status should be considered valid.\nAdditional attributes can be added by extending ``BaseReportStatus`` and\nswapping out ``ReportStatus`` via the ``WQ_REPORTSTATUS_MODEL`` setting.\n\nIn a typical project, the ``ReportStatus`` model might contain the\nfollowing instances:\n\n+--------------+--------------+-------------+\n| slug         | name         | is\\_valid   |\n+==============+==============+=============+\n| unverified   | Unverified   | ``False``   |\n+--------------+--------------+-------------+\n| verified     | Verified     | ``True``    |\n+--------------+--------------+-------------+\n| deleted      | Deleted      | ``False``   |\n+--------------+--------------+-------------+\n\n``Parameter``\n-------------\n\nThe ``Parameter`` model corresponds to the *Attribute* in the ERAV data\nmodel. ``Parameter`` manages the definitions of the data \"attributes\"\n(or \"characteristics\", or \"fields\") being tracked by the project. By\nkeeping these definitions in a separate table, the project can adapt to\nnew task definitions without needing a developer add columns to the\ndatabase.\n\nAt a minimum, ``Parameter`` instances have a ``name``, an ``is_numeric``\nboolean, and a ``units`` definition (that usually only applies to\nnumeric parameters). Additional attributes can be added by extending\n``BaseParameter`` and swapping out ``Parameter`` via the\n``WQ_PARAMETER_MODEL`` setting. For streamlined integration with other\nwq modules (in particular `dbio <https://wq.io/dbio>`__), the\n``BaseParameter`` class leverages the\n`identify <https://wq.io/docs/identify>`__ and\n`relate <https://wq.io/docs/relate>`__ patterns.\n\n``Result``\n----------\n\nThe ``Result`` model corresponds to the *Value* in the ERAV data model.\n``Result`` manages the definitions of the data attributes (or\ncharacteristics, or fields) being tracked by the project. ``Result`` is\neffectively a many-to-many relationship linking ``Report`` and\n``Parameter`` with a value: e.g. \"Report #123 has a Temperature value of\n15\". Note that ``Result`` does not link to ``Event`` directly - this is\na core distinction of the `ERAV <https://wq.io/docs/erav>`__ model.\n\nAt a minimum, ``Result`` instances have a ``type`` (which references\n``Parameter``), a ``report``, and ``value_text`` and ``value_numeric``\nfields - usually only one of which is set for a given ``Result``,\ndepending on the ``is_numeric`` property of the ``Parameter``.\n``Result`` instances also contain an ``empty`` property to facilitate\nfast filtering during analysis (see below). Additional attributes and\ncustom behavior can be added by extending ``BaseResult`` and swapping\nout ``Result`` via the ``WQ_RESULT_MODEL`` setting. Note that if\n``Result`` is swapped out, ``EventResult`` should be as well.\n\n``Result`` instances have a settable ``value`` attribute which is\ninternally mapped to the ``value_text`` or ``value_numeric`` properties\ndepending on the ``Parameter``. ``Result`` instances also have an\n``is_empty(val)`` method which is used to set the ``empty`` property.\nThe default implementation counts ``None``, empty strings, and strings\ncontaining only whitespace as empty.\n\n``EventResult``\n---------------\n\nThe ``EventResult`` model is a\n`denormalized <http://en.wikipedia.org/wiki/Denormalization>`__ table\ncontaining data from the \"active\" results for all valid events. A valid\nevent is simply an event with at least one report with an ``is_valid``\n``ReportStatus``. To determine which results are active:\n\n1. First, all of the results are collected from all of the valid reports\n   for each event. Only non-empty results are included.\n2. Next, results are grouped by parameter. There can only be one active\n   result per parameter.\n3. Within each parameter group, the results are sorted by ``Report``,\n   using the ``WQ_VALID_REPORT_ORDER`` setting. The first result in each\n   group is the \"active\" result for that group.\n\n(This is not exactly how the algorithm is implemented, but gives an idea\nof how it works)\n\nIn the simple case, where there is only one valid ``Report`` for an\nevent, all of the ``Result`` instances from that ``Report`` will be\ncounted as active. In more complex situations, some ``Result`` instances\nmight be occluded.\n\nSince this algorithm can be computationally expensive, the results are\nstored in the ``EventResult`` model for fast retrieval. The\n``EventResult`` model should never be modified directly, as it is\nupdated automatically whenever an ``Event``, ``Report``, or ``Result``\nis updated.\n\nThe ``EventResult`` model contains an ``event`` attribute, a ``result``\nattribute, and all of the fields from both ``Event`` and ``Result``\n(prefixed with the source model name). The full set of fields for the\ndefault ``EventResult`` model is ``event``, ``result``, ``event_site``,\n``event_date``, ``result_type``, ``result_report``,\n``result_value_numeric``, ``result_value_text``, and ``result_empty``.\n\nWhenever ``Event`` or ``Result`` are swapped out, ``EventResult`` should\nbe swapped as well. The ``create_eventresult_model()`` function can be\nused to generate an ``EventResult`` class without needing to manually\nduplicate all of the field definitions.\n\n.. code:: python\n\n    # myapp/models.py\n    from django.db import models\n    from vera.models import BaseEvent, Result\n\n    class Event(BaseEvent):\n        date = models.DateTimeField()\n        type = models.CharField()\n        \n    EventResult = create_eventresult_model(Event, Result)\n\n.. code:: python\n\n    # settings.py\n    WQ_EVENT_MODEL = \"myapp.Event\"\n    WQ_EVENTRESULT_MODEL = \"myapp.EventResult\"\n\nvera ships with an\n`EventResultSerializer <https://github.com/wq/vera/blob/master/vera/serializers.py>`__\nand views that leverage `Django REST\nPandas <https://github.com/wq/django-rest-pandas>`__' charting\nserializers. This makes it possible to quickly generate d3.js charts\nfrom the ``EventResult`` table via\n`wq/chart.js <https://wq.io/docs/chart-js>`__ and\n`wq/pandas.js <https://wq.io/docs/pandas-js>`__.\n\n.. [1]\n   Sheppard, S. A., Wiggins, A., and Terveen, L. `Capturing Quality:\n   Retaining Provenance for Curated Volunteer Monitoring\n   Data <https://wq.io/research/provenance>`__. To appear in Proceedings\n   of the 17th ACM Conference on Computer Supported Cooperative Work and\n   Social Computing (CSCW 2014). ACM. February 2014.\n\n.. |vera| image:: https://raw.github.com/wq/wq/master/images/256/vera.png\n   :target: https://wq.io/vera\n.. |Latest PyPI Release| image:: https://img.shields.io/pypi/v/vera.svg\n   :target: https://pypi.python.org/pypi/vera\n.. |Release Notes| image:: https://img.shields.io/github/release/wq/vera.svg\n   :target: https://github.com/wq/vera/releases\n.. |License| image:: https://img.shields.io/pypi/l/vera.svg\n   :target: https://wq.io/license\n.. |GitHub Stars| image:: https://img.shields.io/github/stars/wq/vera.svg\n   :target: https://github.com/wq/vera/stargazers\n.. |GitHub Forks| image:: https://img.shields.io/github/forks/wq/vera.svg\n   :target: https://github.com/wq/vera/network\n.. |GitHub Issues| image:: https://img.shields.io/github/issues/wq/vera.svg\n   :target: https://github.com/wq/vera/issues\n.. |Travis Build Status| image:: https://img.shields.io/travis/wq/vera.svg\n   :target: https://travis-ci.org/wq/vera\n.. |Python Support| image:: https://img.shields.io/pypi/pyversions/vera.svg\n   :target: https://pypi.python.org/pypi/vera\n.. |Django Support| image:: https://img.shields.io/badge/Django-1.7%2C%201.8-blue.svg\n   :target: https://pypi.python.org/pypi/vera",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://wq.io/vera",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "vera",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/vera/",
    "release_url": "https://pypi.org/project/vera/0.8.0/",
    "requires_python": null,
    "summary": "Reference implementation of the ERAV data model for citizen science.  ERAV is an extension to EAV with support for maintaining multi-faceted provenance metadata for an entity.",
    "version": "0.8.0"
  },
  "releases": {
    "0.3.0": [],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8edba6e3b66a573127a4a739cf2ed1ec",
          "sha256": "3d8403a7662e118cef1e1d7e39e00f6d242fffbf2570ec73238830136f9158e6"
        },
        "downloads": 2418,
        "filename": "vera-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8edba6e3b66a573127a4a739cf2ed1ec",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1966,
        "upload_time": "2013-10-29T02:19:40",
        "url": "https://files.pythonhosted.org/packages/e3/a2/b18fe8e80136f5b87200ea2f62ddaa10d74c5bdaba7dafacda909955a14d/vera-0.3.1.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "209981fce3f7f325b3e375895e04f7b8",
          "sha256": "20e51526f102799afefc81177741e0ba67240ea98cbe9ce5ddc7886e48443273"
        },
        "downloads": 1906,
        "filename": "vera-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "209981fce3f7f325b3e375895e04f7b8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1948,
        "upload_time": "2013-12-11T07:18:58",
        "url": "https://files.pythonhosted.org/packages/4e/a1/dfdfb2565428e1294cf5e985599f3f70ed875a51a3ffd613266548286762/vera-0.4.0.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8ea1692b43470cf28b2b2708196bc128",
          "sha256": "90b371f71b3dadd84840735135a99a8be38a2529b2d2634619e3308bea02ae83"
        },
        "downloads": 1816,
        "filename": "vera-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8ea1692b43470cf28b2b2708196bc128",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2413,
        "upload_time": "2014-02-14T17:23:09",
        "url": "https://files.pythonhosted.org/packages/8d/d5/2da1bc821e477b1758f87306d531209f47f4998c03a37d227b332935207e/vera-0.5.0.tar.gz"
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "34814a6aba97fad3cbaac4b4d33bf354",
          "sha256": "fd72afc1c99a183d99a1fb0bee4d6c2e9782788de869ccd3da435aa394cc0dfb"
        },
        "downloads": 1500,
        "filename": "vera-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34814a6aba97fad3cbaac4b4d33bf354",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2409,
        "upload_time": "2014-06-16T19:23:31",
        "url": "https://files.pythonhosted.org/packages/c9/48/0d8ea81a8d3f8b430ea486b041f0802bddc7c8ba04a4ae93967d42c1db97/vera-0.6.0.tar.gz"
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ba82bb2db8a1b83541c258d98ef6d99d",
          "sha256": "a9aac52fa423d4cc5c7ed45767f26e83d0e47f74f572577b146e2c2e59a634b2"
        },
        "downloads": 1467,
        "filename": "vera-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ba82bb2db8a1b83541c258d98ef6d99d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2411,
        "upload_time": "2014-07-08T22:06:49",
        "url": "https://files.pythonhosted.org/packages/7d/1f/25bce31c1a640f83925e7936d1ca3a23bad073615200b929fccdbe089377/vera-0.6.1.tar.gz"
      }
    ],
    "0.6.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d91a425c425fcf6a71a2010bad7723d1",
          "sha256": "40c040310bbc5a0223db87374a06b512e2c4507a92b5015ad6f4670c78ea21e5"
        },
        "downloads": 1561,
        "filename": "vera-0.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d91a425c425fcf6a71a2010bad7723d1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2410,
        "upload_time": "2014-09-07T22:50:16",
        "url": "https://files.pythonhosted.org/packages/60/9b/c31fa4e0aac1823e60dc1f42b1c8fd5cf10bae54f7d2b113882e68e7e3dc/vera-0.6.2.tar.gz"
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0d4c1992d349711114d934bcba7b9ce9",
          "sha256": "df9668ffbc8ffa0711cfdcae2e6e091c1d0002c187b5e7034c4806984a290762"
        },
        "downloads": 2052,
        "filename": "vera-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0d4c1992d349711114d934bcba7b9ce9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18407,
        "upload_time": "2015-02-02T23:55:00",
        "url": "https://files.pythonhosted.org/packages/f5/8d/ae6dccdee0afa1f1bac5d6888150b79f76baab11c2264ab36e8663fb4e5f/vera-0.7.0.tar.gz"
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "079f1ccd64eca1a77a89937bb26ae2c3",
          "sha256": "aa4999ab41a5de87bb230bb41b16af626df0735e88acb5740f243f323e876ede"
        },
        "downloads": 409,
        "filename": "vera-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "079f1ccd64eca1a77a89937bb26ae2c3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18604,
        "upload_time": "2016-01-08T22:47:29",
        "url": "https://files.pythonhosted.org/packages/1e/67/ad0547975cfdb614065f59d3f7fc3bc49d56a17cc420665f068be43e11c8/vera-0.8.0.tar.gz"
      }
    ],
    "1.0.0b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "da1a2f341bbadc28ff0a46a64a5b655b",
          "sha256": "fbac3bf0f7a81fe3ce1fb8d973677d370d36f4f9961f91921b5125707e2fb0fe"
        },
        "downloads": 186,
        "filename": "vera-1.0.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "da1a2f341bbadc28ff0a46a64a5b655b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18488,
        "upload_time": "2016-09-08T03:21:01",
        "url": "https://files.pythonhosted.org/packages/51/4b/f699548923cd0430820184363af70629cffa17a9958ef93cd72dfa358670/vera-1.0.0b1.tar.gz"
      }
    ],
    "1.0.0b2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c8c951b414d6ecc2aa1bcdfa84f166c9",
          "sha256": "c74cf577edcee87b0e4e4408e2dc31f0ee3f515fd51163aba79cff4c030ba3a8"
        },
        "downloads": 62,
        "filename": "vera-1.0.0b2.tar.gz",
        "has_sig": false,
        "md5_digest": "c8c951b414d6ecc2aa1bcdfa84f166c9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18458,
        "upload_time": "2016-11-08T22:13:05",
        "url": "https://files.pythonhosted.org/packages/76/17/b04f40eaaeee1b3c2d2333f315f42c3c3e9a1d5d85754a583b806a12da80/vera-1.0.0b2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "079f1ccd64eca1a77a89937bb26ae2c3",
        "sha256": "aa4999ab41a5de87bb230bb41b16af626df0735e88acb5740f243f323e876ede"
      },
      "downloads": 409,
      "filename": "vera-0.8.0.tar.gz",
      "has_sig": false,
      "md5_digest": "079f1ccd64eca1a77a89937bb26ae2c3",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 18604,
      "upload_time": "2016-01-08T22:47:29",
      "url": "https://files.pythonhosted.org/packages/1e/67/ad0547975cfdb614065f59d3f7fc3bc49d56a17cc420665f068be43e11c8/vera-0.8.0.tar.gz"
    }
  ]
}