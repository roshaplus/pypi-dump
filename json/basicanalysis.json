{
  "info": {
    "author": "Barcelona Superomputing Center",
    "author_email": "crosas@bsc.es",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: Free For Educational Use",
      "Operating System :: Unix",
      "Programming Language :: Python :: 2.7",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "Basic Analysis and Projection of Fundamental Factors\n=========================================================================================\n\nPre-requisites:\n=========================================================================================\n  - Point local variable AUTOMATIC_ANALYSIS to this folder (more information in setup.sh)\n  - Dimemas installation (scripts has been evaluated with version 5.2.5)\n  - Python 2.7.3 (other versions had not been evaluated yet)\n  - The following python modules:\n      - numpy 1.6.4\n      - scipy 0.11.1 (or greater)\n      - lmfit 0.7.2 (or greater) -- http://cars9.uchicago.edu/software/python/lmfit/\n      numpy and scipy can be installed from the package manager.\n      To install lmfit, decompress the file included here, and as a root user type: \n      \n\t  #\tpython setup.py install\n\t  \n  - Traces to be analyzed (some example traces are included in nekbone_bgq)\n\nNOTE: To verify the versions of the modules installed, you can run\n\n> python basicanalysis/share/install/run_this_first.py\n\n=========================================================================================\n1. Extracting model factors (Load Balance, Serialization, Transfer, Parallel Efficiency):\n=========================================================================================\n\nTo obtain a summary with information for performance factors:\n    \n     $ model_factors.py -i indat.cfg -sim {time|cycles} -lat {latency} -bw {bandwitdh} \n                        -sc {strong|weak} -phase <name_defined_by_user> \n                        -t <list_of_traces>.prv\n     \n     Parameters can also be fed by only passing the indat.cfg (there's an example in the\n     example folder inside this directory named indat_modelfactors.cfg).\n     \n     For example:\n     \n     $ model_factors.py -i indat.cfg -sim time -sc weak -phase nekbone_example \n\t\t\t-t nekbone_bgq/*.prv\n     \n     Extracts the performance factors from all the traces included in nekbone_bgq.\n     Traces were obtained using a weak scaling approach. That is the main reason of \n     choosing 'weak or strong' when running the script. Results are shown in a \n     model_factors_<name_defined_by_user>.csv file and a gnuplot file.\n     \n     To see the resulting graph:\n     \n     $ gnuplot model_factors_timeBased_nekbone_example.gnuplot\n\n     1.1 Current available graphs:\n        - Fundamental Factors: Serialization, Transfer, Load Balance and Parallel\n                              Efficiency.\n        - Speedup: Specific of weak or strong scaling executions.\n        - Point-to-Point Communications: some metrics about P2P communications in the\n                                        traces. Zero if there are any.\n        - Collective Communications: some metrics about bytes sends and calls performed\n                                    at collective level (Allreduce, Bcast, etc)\n        - Load Balances: Instruction, IPC, and Time Load Imbalances.\n        - Instruction rate vs. IPC: observed instruction rate and IPC, it also depends \n                                   on the type of scaling (strong or weak).\n        - Cycles per microsecons: Observed cycles per usec per evaluated point, useful to\n                                 identify changes among the processes.\n        - Elapsed time: execution time of each trace.\n        - Other Efficiency Factors: A summary of cycles per usec, load imbalance at instruction\n                                   or IPC level. Helpful for sanity check. \n     \n=========================================================================================\n2. Projection of performance factors based on the knowledge of the application:\n=========================================================================================\n\nTo extrapolate the collected performance factors (from a very small number of core counts \nto larger core counts), user must indicate the appropiate fitting model to each one of \nthe factors.\n\nFrom the measured values, Serialization and Transfer can be extrapolated based on an \nAmdahl's Law-based model or on a Pipeline-based fitting model, under this form:\n\n      Amdalh_fit = elem_0 / (f_elem - (1-f_elem) * P)\n      \n      Pipeline_fit = (elem_0 * P) / ((1-f_elem) + f_elem*(2*P-1))\n  \n     *** elem_0 and f_elem are estimated using the least squares method over the collected \n     measurements, and P the is number of processes used.\n\nIn this version, it has been included the option to fit Serialization and Transfer using a\nlogaritmical function, under the form:\n      Logaritmical fit =  f_elem * log(procs) + elem_0 (logarithm base 10)\n     \nWhile Load Balance supports Amdahl's-based fitting, it also supports the use of constants: \nthe minimum (min) --or worst value from collected measurements--, the average (avg) value, \nand the same logarithmical function described above (log).\n\nIn addition, the efficiency loss may not be directly influenced by the number of processes.\nTherefore, it has been considered to implement several scenarios for the evolution of \nefficiency. As a default value, applications are expected to reduce their efficiency while \nincreasing the number of processes, thus indicating a linear relation between efficiency \nand processes.\n\nIn some parallel applications, it can be observed that processes may not interact with \nall their partners. They may exchange data with, lets say a number of processes close \nto the cubic root of the total number of processes, or following a logaritmical function\nof base 2.\n\nIs for this reason, there are 3 parameters (linear, cubic, and log) that may alter \nthe interpretation of the number of processes for each one of the fundamental factors.\n\nTherefore, the framework is called as following:\n\n    $ projection_efficiency.py -P_ser {linear|cubic|log} \n            -ser_fit <Serialization>{amdahl|pipeline|log} \n            -P_trf {linear|cubic|log} -trf_fit <Transfer>{amdahl|pipeline|log}\n            -P_lb {linear|cubic|log} -lb_fit <LoadBalance> {min|avg|amdahl|log} \n            -f <name_of_csv_file>.csv\n    \n    From previous example:\n    \n    $ projection_efficiency.py -f model_factors_timeBased_nekbone_example.csv \n    \n    or \n    \n    $ projection_efficiency.py -P_ser  linear -ser_fit pipeline -lb_fit min \n                               -f model_factors_timeBased_nekbone_example.csv \n    \n    Generates the extrapolation of performance factors, with the comparison between \n    measurements and projected variables using amdahl's model to fit only Transfer \n    (Serialization is fitted with the pipeline model, and Load Balance using the minimum \n    value measured as a constant. All is summarized in three gnuplot files and one.csv, \n    the last is generated to facilitate porting data to a spreadsheet.\n    \n    For this example the number of processes has been considered linear. The cubic \n    option was implemented for applications where the total data is distributed among \n    the processes under a cubic shape (e.g. HACC from Coral Benchmark has this \n    characteristic); where processes mainly interact with only a reduced group \n    of the total number of processes.\n\n    Projection_Efficiency.py has by default the values of linear for the number of \n    processes, and Amdahl's model to fit all performance factors. To change these \n    values the framework can be called using pipeline or min instead of amdahl as \n    parameter (if the performance factors has this option for fitting). For example:\n\n    $ projection_efficiency.py -i indat.cfg -P_ser linear -ser_fit pipeline \n                               -ser_trf pipeline -lb_trf min \n                               -f model_factors_timeBased_nekbone_example.csv\n    \n    Parameters can also be fed by only passing the indat_projection.cfg (there's a \n    copy in the example folder inside this directory).      \n    New fitting modules and additional enhancements are still under development.\n\n=========================================================================================\nAny further questions or doubts, please contact: crosas@bsc.es      \n=========================================================================================\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "UNKNOWN",
    "keywords": null,
    "license": "Free",
    "maintainer": null,
    "maintainer_email": null,
    "name": "basicanalysis",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/basicanalysis/",
    "release_url": "https://pypi.org/project/basicanalysis/0.2b1/",
    "requires_python": null,
    "summary": "Extract and project fundamental factors in MPI applications.",
    "version": "0.2b1"
  },
  "releases": {
    "0.1rc1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d100c7c710269383e8cd7f4d3d62abcf",
          "sha256": "7f4b14075074681a5f833736b02b8fcc32440120ac5c6d201017cac9c668bf6e"
        },
        "downloads": 1943,
        "filename": "basicanalysis-0.1rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "d100c7c710269383e8cd7f4d3d62abcf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9599117,
        "upload_time": "2015-03-10T11:40:36",
        "url": "https://files.pythonhosted.org/packages/81/69/1f5cf33671c94ccd0f05a12cca7a99939b6e7657dec63ff7bd128593e93e/basicanalysis-0.1rc1.tar.gz"
      }
    ],
    "0.2b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "30d033425b626af0633bceb8821453e6",
          "sha256": "e228d8589489648b4dd4d990802dedb3209fbcd4de1255e20b1d71d1b197b141"
        },
        "downloads": 1681,
        "filename": "basicanalysis-0.2b1.tar.gz",
        "has_sig": false,
        "md5_digest": "30d033425b626af0633bceb8821453e6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9598508,
        "upload_time": "2015-04-09T10:36:21",
        "url": "https://files.pythonhosted.org/packages/6b/cf/f2da48d28fcec334421fe7cfc12dcece7e509353c18512b0a6edf0f7c10b/basicanalysis-0.2b1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "30d033425b626af0633bceb8821453e6",
        "sha256": "e228d8589489648b4dd4d990802dedb3209fbcd4de1255e20b1d71d1b197b141"
      },
      "downloads": 1681,
      "filename": "basicanalysis-0.2b1.tar.gz",
      "has_sig": false,
      "md5_digest": "30d033425b626af0633bceb8821453e6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9598508,
      "upload_time": "2015-04-09T10:36:21",
      "url": "https://files.pythonhosted.org/packages/6b/cf/f2da48d28fcec334421fe7cfc12dcece7e509353c18512b0a6edf0f7c10b/basicanalysis-0.2b1.tar.gz"
    }
  ]
}