{
  "info": {
    "author": "Piper Merriam",
    "author_email": "pipermerriam@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# Ethereum Utils\n\n[![Join the chat at https://gitter.im/pipermerriam/ethereum-utils](https://badges.gitter.im/pipermerriam/ethereum-utils.svg)](https://gitter.im/pipermerriam/ethereum-utils?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n[![Build Status](https://travis-ci.org/pipermerriam/ethereum-utils.png)](https://travis-ci.org/pipermerriam/ethereum-utils)\n\n\nCommon utility functions for codebases which interact with ethereum.\n\n\n## Installation\n\n```sh\npip install ethereum-utils\n```\n\n\n## Documentation\n\nAll functions can be imported directly from the `eth_utils` module\n\n\n### ABI Utils\n\n#### `event_abi_to_log_topic(event_abi)` -> bytes\n\nReturns the 32 byte log topic for the given event abi.\n\n```python\n>>> event_abi_to_log_topic({'type': 'event', 'anonymous': False, 'name': 'MyEvent', 'inputs': []})\nb'M\\xbf\\xb6\\x8bC\\xdd\\xdf\\xa1+Q\\xeb\\xe9\\x9a\\xb8\\xfd\\xedb\\x0f\\x9a\\n\\xc21B\\x87\\x9aO\\x19*\\x1byR\\xd2'\n```\n\n#### `event_signature_to_log_topic(event_signature)` -> bytes\n\nReturns the 32 byte log topic for the given event signature.\n\n```python\n>>> event_signature_to_log_topic('MyEvent()')\nb'M\\xbf\\xb6\\x8bC\\xdd\\xdf\\xa1+Q\\xeb\\xe9\\x9a\\xb8\\xfd\\xedb\\x0f\\x9a\\n\\xc21B\\x87\\x9aO\\x19*\\x1byR\\xd2'\n```\n\n#### `function_abi_to_4byte_selector(function_abi)` -> bytes\n\nReturns the 4 byte function selector for the given function abi.\n\n```python\n>>> function_abi_to_4byte_selector({'type': 'function', 'name': 'myFunction', 'inputs': [], 'outputs': []})\nb'\\xc3x\\n:'\n```\n\n#### `function_signature_to_4byte_selector(function_signature)` -> bytes\n\nReturns the 4 byte function selector for the given function signature.\n\n```python\n>>> function_signature_to_4byte_selector('myFunction()')\nb'\\xc3x\\n:'\n```\n\n\n### Address Utils\n\n#### `is_address(value)` -> bool\n\nReturns `True` if the `value` is one of the following accepted address formats.\n\n- 20 byte hexidecimal, upper/lower/mixed case, with or without `0x` prefix:\n    - `'d3cda913deb6f67967b99d67acdfa1712c293601'`\n    - `'0xd3cda913deb6f67967b99d67acdfa1712c293601'`\n    - `'0xD3CDA913DEB6F67967B99D67ACDFA1712C293601'`\n    - `'0xd3CdA913deB6f67967B99D67aCDFa1712C293601'`\n- 20 byte hexidecimal padded to 32 bytes with null bytes, upper/lower/mixed case, with or without `0x` prefix:\n    - `'000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601'`\n    - `'000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601'`\n    - `'0x000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601'`\n    - `'0x000000000000000000000000D3CDA913DEB6F67967B99D67ACDFA1712C293601'`\n    - `'0x000000000000000000000000d3CdA913deB6f67967B99D67aCDFa1712C293601'`\n- 20 text or bytes string:\n    - `'\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01'`\n- 20 text or bytes string padded to 32 bytes with null bytes.\n    - `'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01'`\n\nThis function has one special case, which is that it will return false for a 32\nbyte value that is all null bytes.\n\n\n```python\n>>> is_address('d3cda913deb6f67967b99d67acdfa1712c293601')\nTrue\n>>> is_address('0xd3cda913deb6f67967b99d67acdfa1712c293601')\nTrue\n>>> is_address('0xD3CDA913DEB6F67967B99D67ACDFA1712C293601')\nTrue\n>>> is_address('0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\nTrue\n>>> is_address('000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601')\nTrue\n>>> is_address('000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601')\nTrue\n>>> is_address('0x000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601')\nTrue\n>>> is_address('0x000000000000000000000000D3CDA913DEB6F67967B99D67ACDFA1712C293601')\nTrue\n>>> is_address('0x000000000000000000000000d3CdA913deB6f67967B99D67aCDFa1712C293601')\nTrue\n>>> is_address('\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01')\nTrue\n>>> is_address('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01')\nTrue\n>>> is_address('0x0000000000000000000000000000000000000000000000000000000000000000')\nFalse\n>>> is_address('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\nFalse\n```\n\n#### `is_hex_address(value)` => bool\n\nReturn `True` if the value is a 20 byte hexidecimal encoded string in any of\nupper/lower/mixed casing, with or without the `0x` prefix.  Otherwise return\n`False`\n\n- `'d3cda913deb6f67967b99d67acdfa1712c293601'`\n- `'0xd3cda913deb6f67967b99d67acdfa1712c293601'`\n- `'0xD3CDA913DEB6F67967B99D67ACDFA1712C293601'`\n- `'0xd3CdA913deB6f67967B99D67aCDFa1712C293601'`\n\n```python\n>>> is_hex_address('d3cda913deb6f67967b99d67acdfa1712c293601')\nTrue\n>>> is_hex_address('0xd3cda913deb6f67967b99d67acdfa1712c293601')\nTrue\n>>> is_hex_address('0xD3CDA913DEB6F67967B99D67ACDFA1712C293601')\nTrue\n>>> is_hex_address('0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\nTrue\n>>> is_hex_address('000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601')\nFalse\n>>> is_hex_address('000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601')\nFalse\n>>> is_hex_address('0x000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601')\nFalse\n>>> is_hex_address('0x000000000000000000000000D3CDA913DEB6F67967B99D67ACDFA1712C293601')\nFalse\n>>> is_hex_address('0x000000000000000000000000d3CdA913deB6f67967B99D67aCDFa1712C293601')\nFalse\n>>> is_hex_address('\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01')\nFalse\n>>> is_hex_address('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01')\nFalse\n>>> is_hex_address('0x0000000000000000000000000000000000000000000000000000000000000000')\nFalse\n>>> is_hex_address('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\nFalse\n```\n\n\n#### `is_binary_address(value)` -> bool\n\nReturn `True` if the value is a 20 byte string.\n\n```python\n>>> is_binary_address('d3cda913deb6f67967b99d67acdfa1712c293601')\nFalse\n>>> is_binary_address('0xd3cda913deb6f67967b99d67acdfa1712c293601')\nFalse\n>>> is_binary_address('0xD3CDA913DEB6F67967B99D67ACDFA1712C293601')\nFalse\n>>> is_binary_address('0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\nFalse\n>>> is_binary_address('000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601')\nFalse\n>>> is_binary_address('000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601')\nFalse\n>>> is_binary_address('0x000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601')\nFalse\n>>> is_binary_address('0x000000000000000000000000D3CDA913DEB6F67967B99D67ACDFA1712C293601')\nFalse\n>>> is_binary_address('0x000000000000000000000000d3CdA913deB6f67967B99D67aCDFa1712C293601')\nFalse\n>>> is_binary_address('\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01')\nTrue\n>>> is_binary_address('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01')\nFalse\n>>> is_binary_address('0x0000000000000000000000000000000000000000000000000000000000000000')\nFalse\n>>> is_binary_address('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\nFalse\n```\n\n#### `is_32byte_address(value)` -> bool\n\nReturn `True` if the value is a 20 byte address that has been padded to 32\nbytes.  This function allows both bytes or hexidecimal encoded strings.\nHexidecimal strings may optionally be `0x` prefixed.  The padding bytes\n**must** be zeros.\n\n> Note: this method returns false for the zero address.\n\n```python\n>>> is_32byte_address('d3cda913deb6f67967b99d67acdfa1712c293601')\nFalse\n>>> is_32byte_address('0xd3cda913deb6f67967b99d67acdfa1712c293601')\nFalse\n>>> is_32byte_address('0xD3CDA913DEB6F67967B99D67ACDFA1712C293601')\nFalse\n>>> is_32byte_address('0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\nFalse\n>>> is_32byte_address('000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601')\nTrue\n>>> is_32byte_address('000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601')\nTrue\n>>> is_32byte_address('0x000000000000000000000000d3cda913deb6f67967b99d67acdfa1712c293601')\nTrue\n>>> is_32byte_address('0x000000000000000000000000D3CDA913DEB6F67967B99D67ACDFA1712C293601')\nTrue\n>>> is_32byte_address('0x000000000000000000000000d3CdA913deB6f67967B99D67aCDFa1712C293601')\nTrue\n>>> is_32byte_address('\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01')\nFalse\n>>> is_32byte_address('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01')\nTrue\n>>> is_32byte_address('0x0000000000000000000000000000000000000000000000000000000000000000')\nFalse\n>>> is_32byte_address('\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\nFalse\n```\n\n\n#### `is_canonical_address(value)` -> bool\n\nReturns `True` if the `value` is an address in it's canonical form.\n\nThe canonical representation of an address according to `ethereum-utils` is a\n20 byte long string of bytes, eg:\n`b'\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01'`\n\n```python\n>>> is_canonical_address('0xd3cda913deb6f67967b99d67acdfa1712c293601')\nFalse\n>>> is_canonical_address(b'\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01xd')\nTrue\n>>> is_canonical_address('\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01xd')\nFalse\n```\n\n#### `is_checksum_address(value)` -> bool\n\nReturns `True` if the `value` is a checksummed address as specified by\n[ERC55](https://github.com/ethereum/EIPs/issues/55)\n\n```python\n>>> is_checksum_address('0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\nTrue\n>>> is_checksum_address('0xd3cda913deb6f67967b99d67acdfa1712c293601')\nFalse\n>>> is_checksum_address('0xD3CDA913DEB6F67967B99D67ACDFA1712C293601')\nFalse\n>>> is_checksum_address('0x52908400098527886E0F7030069857D2E4169EE7')\nTrue\n>>> is_checksum_address('0xde709f2102306220921060314715629080e2fb77')\nTrue\n```\n\n#### `is_checksum_formatted_address(value)` -> bool\n\nReturns `True` if the `value` is formatted as an\n[ERC55](https://github.com/ethereum/EIPs/issues/55) checksum address.\n\n```python\n>>> is_checksum_formatted_address('0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\nTrue\n>>> is_checksum_formatted_address('0xd3cda913deb6f67967b99d67acdfa1712c293601')\nFalse\n>>> is_checksum_formatted_address('0xD3CDA913DEB6F67967B99D67ACDFA1712C293601')\nFalse\n>>> is_checksum_formatted_address('0x52908400098527886E0F7030069857D2E4169EE7')\nFalse\n>>> is_checksum_formatted_address('0xde709f2102306220921060314715629080e2fb77')\nFalse\n```\n\n#### `is_normalized_address(value)` -> bool\n\nReturns `True` if the `value` is an address in its normalized form.\n\nThe normalized representation of an address is the lowercased 20 byte\nhexidecimal format.\n\n```python\n>>> is_normalized_address('0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\nFalse\n>>> is_normalized_address('0xd3cda913deb6f67967b99d67acdfa1712c293601')\nTrue\n>>> is_normalized_address('0xD3CDA913DEB6F67967B99D67ACDFA1712C293601')\nFalse\n>>> is_normalized_address('0x52908400098527886E0F7030069857D2E4169EE7')\nFalse\n>>> is_normalized_address('0xde709f2102306220921060314715629080e2fb77')\nTrue\n```\n\n#### `is_same_address(a, b)` -> bool\n\nReturns `True` if both `a` and `b` are valid addresses according to the\n`is_address` function and that they are both representations of the same\naddress.\n\n```python\n>>> is_same_address('0xd3cda913deb6f67967b99d67acdfa1712c293601', '0xD3CDA913DEB6F67967B99D67ACDFA1712C293601')\nTrue\n>>> is_same_address('0xd3cda913deb6f67967b99d67acdfa1712c293601', '0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\nTrue\n>>> is_same_address('0xd3cda913deb6f67967b99d67acdfa1712c293601', '\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01xd')\nTrue\n```\n\n#### `to_canonical_address(value)` -> bytes\n\nGiven any valid representation of an address return it's canonical form.\n\n```python\n>>> to_canonical_address('0xd3cda913deb6f67967b99d67acdfa1712c293601')\nb'\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01xd'\n>>> to_canonical_address('0xD3CDA913DEB6F67967B99D67ACDFA1712C293601')\nb'\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01xd'\n>>> to_canonical_address('0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\nb'\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01xd'\n>>> to_canonical_address('\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01xd')\nb'\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01xd'\n```\n\n#### `to_checksum_address(value)` -> text\n\nGiven any valid representation of an address return the checksummed representation.\n\n```python\n>>> to_checksum_address('0xd3cda913deb6f67967b99d67acdfa1712c293601')\n'0xd3CdA913deB6f67967B99D67aCDFa1712C293601'\n>>> to_checksum_address('0xD3CDA913DEB6F67967B99D67ACDFA1712C293601')\n'0xd3CdA913deB6f67967B99D67aCDFa1712C293601'\n>>> to_checksum_address('0xd3CdA913deB6f67967B99D67aCDFa1712C293601')\n'0xd3CdA913deB6f67967B99D67aCDFa1712C293601'\n>>> to_checksum_address('\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01xd')\n'0xd3CdA913deB6f67967B99D67aCDFa1712C293601'\n```\n\n#### `to_normalized_address(value)` -> text\n\nGiven any valid representation of an address return the normalized representation.\n\n```python\n>>> to_normalized_address('\\xd3\\xcd\\xa9\\x13\\xde\\xb6\\xf6yg\\xb9\\x9dg\\xac\\xdf\\xa1q,)6\\x01')  # raw bytes\n'0xd3cda913deb6f67967b99d67acdfa1712c293601'\n>>> to_normalized_address(b'0xc6d9d2cd449a754c494264e1809c50e34d64562b')  # hex encoded (as byte string)\n'0xc6d9d2cd449a754c494264e1809c50e34d64562b'\n>>> to_normalized_address('0xc6d9d2cd449a754c494264e1809c50e34d64562b')  # hex encoded\n'0xc6d9d2cd449a754c494264e1809c50e34d64562b'\n>>> to_normalized_address('0XC6D9D2CD449A754C494264E1809C50E34D64562B')  # cap-cased\n'0xc6d9d2cd449a754c494264e1809c50e34d64562b'\n>>> to_normalized_address('0x000000000000000000000000c305c901078781c232a2a521c2af7980f8385ee9')  # padded to 32 bytes\n'0xc305c901078781c232a2a521c2af7980f8385ee9',\n```\n\n### Crypto Utils\n\n\n#### `keccak(value)` -> bytes\n\nGiven any string returns the `sha3/keccak` hash.  If `value` is not a byte\nstring it will be converted using the `force_bytes` function.\n\n```python\n>>> keccak('')\nb\"\\xc5\\xd2F\\x01\\x86\\xf7#<\\x92~}\\xb2\\xdc\\xc7\\x03\\xc0\\xe5\\x00\\xb6S\\xca\\x82';{\\xfa\\xd8\\x04]\\x85\\xa4p\"\n```\n\n### Currency Utils\n\n\n#### `denoms`\n\nObject with property access to all of the various denominations for ether.\nAvailable denominations are:\n\n+--------------+---------------------------------+\n| denomination | amount in wei                   |\n+--------------+---------------------------------+\n| wei          | 1                               |\n| kwei         | 1000                            |\n| babbage      | 1000                            |\n| femtoether   | 1000                            |\n| mwei         | 1000000                         |\n| lovelace     | 1000000                         |\n| picoether    | 1000000                         |\n| gwei         | 1000000000                      |\n| shannon      | 1000000000                      |\n| nanoether    | 1000000000                      |\n| nano         | 1000000000                      |\n| szabo        | 1000000000000                   |\n| microether   | 1000000000000                   |\n| micro        | 1000000000000                   |\n| finney       | 1000000000000000                |\n| milliether   | 1000000000000000                |\n| milli        | 1000000000000000                |\n| ether        | 1000000000000000000             |\n| kether       | 1000000000000000000000          |\n| grand        | 1000000000000000000000          |\n| mether       | 1000000000000000000000000       |\n| gether       | 1000000000000000000000000000    |\n| tether       | 1000000000000000000000000000000 |\n+--------------+---------------------------------+\n\n```python\n>>> denoms.wei\n1\n>>> denoms.finney\n1000000000000000\n>>> denoms.ether\n1000000000000000000\n```\n\n\n### Encoding Utils\n\n#### `big_endian_to_int(value)` -> integer\n\nReturns `value` converted to an integer (from a big endian representation).\n\n\n```python\n>>> big_endian_to_int(b'\\x00')\n0\n>>> big_endian_to_int(b'\\x01')\n1\n>>> big_endian_to_int(b'\\x01\\x00')\n256\n```\n\n#### `int_to_big_endian(value)` -> bytes\n\nReturns `value` converted to the big endian representation.\n\n\n```python\n>>> int_to_big_endian(0)\nb'\\x00'\n>>> int_to_big_endian(1)\nb'\\x01'\n>>> int_to_big_endian(256)\nb'\\x01\\x00'\n```\n\n\n### Formatting Utils\n\n#### `pad_left(value, to_size, pad_with)` -> string\n\nReturns `value` padded to the length specified by `to_size` with the string `pad_with`.  \n\n\n```python\n>>> pad_left('test', 6, '0')\n'00test'\n>>> pad_left('testing', 6, '0')\n'testing'\n>>> pad_left('test', 8, '123')\n'12312test'\n```\n\n#### `pad_right(value, to_size, pad_with)` -> string\n\nReturns `value` padded to the length specified by `to_size` with the string `pad_with`.  \n\n\n```python\n>>> pad_right('test', 6, '0')\n'test00'\n>>> pad_right('testing', 6, '0')\n'testing'\n>>> pad_right('test', 8, '123')\n'test12312'\n```\n\n\n### Functional Utils\n\n\n#### `compose(*callables)` -> callable\n\n> **DEPRECATED** in 0.3.0.\n\nReturns a single function which is the composition of the given callables.\n\n```\n>>> def f(v):\n...     return v * 3\n...\n>>> def g(v):\n...     return v + 2\n...\n>>> def h(v):\n...     return v % 5\n...\n>>> compose(f, g, h)(1)\n0\n>>> h(g(f(1)))\n0\n>>> compose(f, g, h)(2)\n3\n>>> h(g(f(1)))\n3\n>>> compose(f, g, h)(3)\n1\n>>> h(g(f(1)))\n1\n>>> compose(f, g, h)(4)\n4\n>>> h(g(f(1)))\n4\n```\n\n#### `flatten_return(callable)` -> callable() -> tuple\n\nDecorator which performs a non-recursive flattening of the return value from\nthe given `callable`.\n\n```python\n>>> flatten_return(lambda: [[1, 2, 3], [4, 5], [6]])\n(1, 2, 3, 4, 5, 6)\n```\n\n#### `sort_return(callable)` => callable() -> tuple\n\nDecorator which sorts the return value from the given `callable`.\n\n```python\n>>> flatten_return(lambda: [[1, 2, 3], [4, 5], [6]])\n(1, 2, 3, 4, 5, 6)\n```\n\n#### `reversed_return(callable)` => callable() -> tuple\n\nDecorator which reverses the return value from the given `callable`.\n\n```python\n>>> reversed_return(lambda: [1, 5, 2, 4, 3])\n(3, 4, 2, 5, 1)\n```\n\n#### `to_dict(callable)` => callable() -> dict\n\nDecorator which casts the return value from the given `callable` to a dictionary.\n\n```python\n>>> @to_dict\n... def build_thing():\n...     yield 'a', 1\n...     yield 'b', 2\n...     yield 'c', 3\n...\n>>> build_thing()\n{'a': 1, 'b': 2, 'c': 3}\n```\n\n#### `to_list(callable)` => callable() -> list\n\nDecorator which casts the return value from the given `callable` to a list.\n\n```python\n>>> @to_list\n... def build_thing():\n...     yield 'a'\n...     yield 'b'\n...     yield 'c'\n...\n>>> build_thing()\n['a', 'b', 'c']\n```\n\n#### `to_ordered_dict(callable)` => callable() -> collections.OrderedDict\n\nDecorator which casts the return value from the given `callable` to an ordered dictionary of type `collections.OrderedDict`.\n\n```python\n>>> @to_ordered_dict\n... def build_thing():\n...     yield 'd', 4\n...     yield 'a', 1\n...     yield 'b', 2\n...     yield 'c', 3\n...\n>>> build_thing()\nOrderedDict([('d', 4), ('a', 1), ('b', 2), ('c', 3)])\n```\n\n#### `to_tuple(callable)` => callable() -> tuple\n\nDecorator which casts the return value from the given `callable` to a tuple.\n\n```python\n>>> @to_tuple\n... def build_thing():\n...     yield 'a'\n...     yield 'b'\n...     yield 'c'\n...\n>>> build_thing()\n('a', 'b', 'c')\n```\n\n#### `to_set(callable)` => callable() -> set\n\nDecorator which casts the return value from the given `callable` to a set.\n\n```python\n>>> @to_set\n... def build_thing():\n...     yield 'a'\n...     yield 'b'\n...     yield 'a'  # duplicate\n...     yield 'c'\n...\n>>> build_thing()\n{'a', 'b', 'c'}\n```\n\n### `apply_to_return_value(callable)` => decorator_fn\n\nThis function takes a single callable and returns a decorator.  The returned\ndecorator, when applied to a function, will incercept the function's return\nvalue, pass it to the callable, and return the value returned by the callable.\n\n```python\n>>> double = apply_to_return_value(lambda v: v * 2)\n>>> @double\n... def f(v):\n...     return v\n...\n>>> f(2)\n4\n>>> f(3)\n6\n```\n\n\n### Hexidecimal Utils\n\n\n#### `add_0x_prefix(value)` -> string\n\nReturns `value` with a `0x` prefix.  If the value is already prefixed it is returned as-is.\n\n```python\n>>> add_0x_prefix('12345')\n'0x12345'\n>>> add_0x_prefix('0x12345')\n'0x12345'\n```\n\n#### `decode_hex(value)` -> bytes\n\nReturns `value` decoded into a byte string.  Accepts any string with or without the `0x` prefix.\n\n```python\n>>> decode_hex('0x123456')\nb'\\x124V'\n>>> decode_hex('123456')\nb'\\x124V'\n```\n\n#### `encode_hex(value)` -> string\n\nReturns `value` encoded into a hexidecimal representation with a `0x` prefix\n\n```python\n>>> encode_hex('\\x01\\x02\\x03')\n'0x010203'\n```\n\n#### `is_0x_prefixed(value)` -> bool\n\nReturns `True` if `value` has a `0x` prefix.\n\n```python\n>>> is_0x_prefixed('12345')\nFalse\n>>> is_0x_prefixed('0x12345')\nTrue\n>>> is_0x_prefixed(b'0x12345')\nTrue\n```\n\n#### `remove_0x_prefix(value)` -> string\n\nReturns `value` with the `0x` prefix stripped.  If the value does not have a\n`0x` prefix it is returned as-is.\n\n```python\n>>> remove_0x_prefix('12345')\n'12345'\n>>> remove_0x_prefix('0x12345')\n'12345'\n>>> remove_0x_prefix(b'0x12345')\nb'12345'\n```\n\n\n### String Utils\n\n#### `coerce_args_to_bytes(callable)` -> callable\n\nDecorator which will convert any string arguments both positional or keyword\ninto byte strings using the `force_bytes` function.  This is a recursive\noperation which will reach down into mappings and list-like objects as well.\n\n```python\n>>> @coerce_args_to_bytes\n... def do_thing(*args):\n...     return args\n...\n>>> do_thing('a', 1, b'a-byte-string', ['a', b'b', 1], {'a': 'a', 'b': ['x', b'y']})\n(b'a', 1, b'a-byte-string', [b'a', b'b', 1], {'a': b'a', 'b': [b'x', b'y']})\n```\n\n#### `coerce_args_to_text(callable)` -> callable\n\nDecorator which will convert any string arguments both positional or keyword\ninto text strings using the `force_text` function.  This is a recursive\noperation which will reach down into mappings and list-like objects as well.\n\n```python\n>>> @coerce_args_to_text\n... def do_thing(*args):\n...     return args\n...\n>>> do_thing('a', 1, b'a-byte-string', ['a', b'b', 1], {'a': 'a', 'b': ['x', b'y']})\n('a', 1, 'a-byte-string', ['a', 'b', 1], {'a': 'a', 'b': ['x', 'y']})\n```\n\n#### `coerce_return_to_bytes(callable)` -> callable\n\nDecorator which will convert any string return values into byte strings using\nthe `force_text` function.  This is a recursive operation which will reach down\ninto mappings and list-like objects as well.\n\n```python\n>>> @coerce_return_to_bytes\n... def do_thing(*args):\n...     return args\n...\n>>> do_thing('a', 1, b'a-byte-string', ['a', b'b', 1], {'a': 'a', 'b': ['x', b'y']})\n(b'a', 1, b'a-byte-string', [b'a', b'b', 1], {'a': b'a', 'b': [b'x', b'y']})\n```\n\n#### `coerce_return_to_text(callable)` -> callable\n\nDecorator which will convert any string return values into text strings using\nthe `force_text` function.  This is a recursive operation which will reach down\ninto mappings and list-like objects as well.\n\n```python\n>>> @coerce_return_to_bytes\n... def do_thing(*args):\n...     return args\n...\n>>> do_thing('a', 1, b'a-byte-string', ['a', b'b', 1], {'a': 'a', 'b': ['x', b'y']})\n('a', 1, 'a-byte-string', ['a', 'b', 1], {'a': 'a', 'b': ['x', 'y']})\n```\n\n#### `force_bytes(value, encoding='iso-8859-1')` -> text\n\nReturns `value` encoded into a byte string using the provided encoding.  By\ndefault this uses `iso-8859-1` as it can handle all byte values between `0-255`\n(unlike `utf8`)\n\n```python\n>>> force_bytes('abcd')\nb'abcd'\n>>> force_bytes(b'abcd')\nb'abcd'\n```\n\n#### `force_obj_to_bytes(value)` -> value\n\nReturns `value` with all string elements converted to byte strings by\nrecursivly traversing mappings and list-like elements.\n\n```python\n>>> force_obj_to_bytes(('a', 1, b'a-byte-string', ['a', b'b', 1], {'a': 'a', 'b': ['x', b'y']}))\n(b'a', 1, b'a-byte-string', [b'a', b'b', 1], {'a': b'a', 'b': [b'x', b'y']})\n```\n\n#### `force_obj_to_text(value)` -> value\n\nReturns `value` with all string elements converted to text strings by\nrecursivly traversing mappings and list-like elements.\n\n```python\n>>> force_obj_to_text(('a', 1, b'a-byte-string', ['a', b'b', 1], {'a': 'a', 'b': ['x', b'y']}))\n('a', 1, 'a-byte-string', ['a', 'b', 1], {'a': 'a', 'b': ['x', 'y']})\n```\n\n#### `force_text(value, encoding='iso-8859-1')` -> text\n\nReturns `value` decoded into a text string using the provided encoding.  By\ndefault this uses `iso-8859-1` as it can handle all byte values between `0-255`\n(unlike `utf8`)\n\n```python\n>>> force_text(b'abcd')\n'abcd'\n>>> force_text('abcd')\n'abcd'\n```\n\n\n### Type Utils\n\n#### `is_boolean(value)` -> bool\n\nReturns `True` if `value` is of type `bool`\n\n```python\n>>> is_boolean(True)\nTrue\n>>> is_boolean(False)\nFalse\n>>> is_boolean(1)\nFalse\n```\n\n#### `is_bytes(value)` -> bool\n\nReturns `True` if `value` is a byte string or a byte array.\n\n```python\n>>> is_bytes('abcd')\nFalse\n>>> is_bytes(b'abcd')\nTrue\n>>> is_bytes(bytearray((1, 2, 3)))\nTrue\n```\n\n#### `is_dict(value)` -> bool\n\nReturns `True` if `value` is a mapping type.\n\n```python\n>>> is_dict({'a': 1})\nTrue\n>>> is_dict([1, 2, 3])\nFalse\n```\n\n#### `is_integer(value)` -> bool\n\nReturns `True` if `value` is an integer\n\n```python\n>>> is_integer(0)\nTrue\n>>> is_integer(1)\nTrue\n>>> is_integer('1')\nFalse\n>>> is_integer(1.1)\nFalse\n```\n\n#### `is_list_like(value)` -> bool\n\nReturns `True` if `value` is a non-string sequence such as a sequence (such as a list or tuple).\n\n```python\n>>> is_list_like('abcd')\nFalse\n>>> is_list_like([])\nTrue\n>>> is_list_like(tuple())\nTrue\n```\n\n#### `is_list(value)` -> bool\n\nReturns `True` if `value` is a non-string sequence such as a list.\n\n```python\n>>> is_list('abcd')\nFalse\n>>> is_list([])\nTrue\n>>> is_list(tuple())\nFalse\n```\n\n#### `is_tuple(value)` -> bool\n\nReturns `True` if `value` is a non-string sequence such as a tuple.\n\n```python\n>>> is_tuple('abcd')\nFalse\n>>> is_tuple([])\nFalse\n>>> is_tuple(tuple())\nTrue\n```\n\n#### `is_null(value)` -> bool\n\nReturns `True` if `value` is `None`\n\n```python\n>>> is_null(None)\nTrue\n>>> is_null(False)\nFalse\n```\n\n#### `is_number(value)` -> bool\n\nReturns `True` if `value` is numeric\n\n```python\n>>> is_number(1)\nTrue\n>>> is_number(1.1)\nTrue\n>>> is_number('1')\nFalse\n>>> is_number(decimal.Decimal('1'))\nTrue\n```\n\n#### `is_string(value)` -> bool\n\nReturns `True` if `value` is of any string type.\n\n```python\n>>> is_string('abcd')\nTrue\n>>> is_string(b'abcd')\nTrue\n>>> is_string(bytearray((1, 2, 3)))\nTrue\n```\n\n#### `is_text(value)` -> bool\n\nReturns `True` if `value` is a text string.\n\n```python\n>>> is_text(u'abcd')\nTrue\n>>> is_text(b'abcd')\nFalse\n>>> is_text(bytearray((1, 2, 3)))\nFalse\n```\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pipermerriam/ethereum-utils",
    "keywords": "ethereum",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ethereum-utils",
    "platform": "",
    "project_url": "https://pypi.org/project/ethereum-utils/",
    "release_url": "https://pypi.org/project/ethereum-utils/0.3.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Common utility functions for ethereum codebases.",
    "version": "0.3.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c08ad76e10e8bd53ec4c6a5b75b62c43",
          "sha256": "047356ac65bbf66c7b5fc99649a7dd9f4bb920c8cf17d7c49f530aa52a17f56f"
        },
        "downloads": 11,
        "filename": "ethereum_utils-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c08ad76e10e8bd53ec4c6a5b75b62c43",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 8676,
        "upload_time": "2017-02-07T17:29:20",
        "url": "https://files.pythonhosted.org/packages/50/8f/19a01b8faaa4da2fb258d1fbbd53474aef4535e9b5807e0ab96f6de98d54/ethereum_utils-0.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3bd4accf53b18816e23b8b4571b58dc6",
          "sha256": "90fcd85a391571b1ebbf39a9a0f8c7475b32bec0b49f26c98492752e9e5980ba"
        },
        "downloads": 9,
        "filename": "ethereum-utils-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3bd4accf53b18816e23b8b4571b58dc6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6077,
        "upload_time": "2017-02-07T17:29:18",
        "url": "https://files.pythonhosted.org/packages/62/4d/9f0b9ba55d12b3e326489f9400d13ff4c092146d92a8e79f269cd6dc5a01/ethereum-utils-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f561501de9681f2965d050b0de9914d8",
          "sha256": "db3988f6310cd66f58c9faf7357ddc557af5dab7dc342c254e7f08fcc53e36ec"
        },
        "downloads": 38,
        "filename": "ethereum_utils-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f561501de9681f2965d050b0de9914d8",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 15769,
        "upload_time": "2017-02-08T18:33:43",
        "url": "https://files.pythonhosted.org/packages/f8/69/1e6f01c2921e65de7c099825fe72d33510d54a8f5c47eb24e785b16504d5/ethereum_utils-0.2.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2f0eb604f08017f518aef32f70ad85b8",
          "sha256": "67ddc834ab672b9a75474e6d75b4fc4d78245d49db2c62c5077a6e98133e3326"
        },
        "downloads": 58,
        "filename": "ethereum-utils-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2f0eb604f08017f518aef32f70ad85b8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14197,
        "upload_time": "2017-02-08T18:33:38",
        "url": "https://files.pythonhosted.org/packages/bc/ff/6237d36971b62745472f282558974e647dd0df73582e85649590838056a2/ethereum-utils-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "29651a157f6813f6d9636f7b5e7279f1",
          "sha256": "dd0448a50d17083d75eeccc26179e4a73bdb95d15a31e58eb7ce867c5513962d"
        },
        "downloads": 0,
        "filename": "ethereum_utils-0.2.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "29651a157f6813f6d9636f7b5e7279f1",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 16076,
        "upload_time": "2017-06-28T20:34:31",
        "url": "https://files.pythonhosted.org/packages/3d/cd/91405d1761a38337d571ae0fa811be235e2a1f67aa80b95067ce4d877388/ethereum_utils-0.2.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "60627d4cea777775df9b5696ee628602",
          "sha256": "6f3320fd44aa4fe8bafb47ccadb4c3980d5ff98d82047b2c9b39511b57cc6198"
        },
        "downloads": 0,
        "filename": "ethereum-utils-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "60627d4cea777775df9b5696ee628602",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14535,
        "upload_time": "2017-06-28T20:34:23",
        "url": "https://files.pythonhosted.org/packages/4d/86/07cd1f6029e1e3f27015795a1adb3c7af783389305818995d4ffdc6af5e7/ethereum-utils-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "03aa24647f6f6a9636d6989cc3571655",
          "sha256": "0410db916b1449caffe09941b2c268fc3a7e566cec9928e1402d5b9950afeb82"
        },
        "downloads": 0,
        "filename": "ethereum_utils-0.2.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "03aa24647f6f6a9636d6989cc3571655",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 16080,
        "upload_time": "2017-06-30T17:23:00",
        "url": "https://files.pythonhosted.org/packages/8b/b9/77e8c8b1238be35b3dd7e39564ae7b5ab9339593d088024f856c9eb71fbe/ethereum_utils-0.2.2-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "5b237988313cb010d87750ec77db636a",
          "sha256": "0f77f10ea067c6624d5da01709f33b8ba241f49a273ca077811c0b6651e2c316"
        },
        "downloads": 0,
        "filename": "ethereum-utils-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5b237988313cb010d87750ec77db636a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14527,
        "upload_time": "2017-06-30T17:22:58",
        "url": "https://files.pythonhosted.org/packages/e8/4c/a5b8632f2c66d774c7a6915097007246bb2b3b06764025034486116ddb7c/ethereum-utils-0.2.2.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "37bd0b9973eaa0f89352a73a7772373f",
          "sha256": "feb7a1fd2c88c7bfdb111a6c0751c531d0fb7e3b9b7d47b9f2f07f591beba2c6"
        },
        "downloads": 0,
        "filename": "ethereum_utils-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37bd0b9973eaa0f89352a73a7772373f",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 17822,
        "upload_time": "2017-07-18T16:44:40",
        "url": "https://files.pythonhosted.org/packages/65/21/25dec7a9d578d0c4686064e7a9c0243c7a10401139c0d94559511d7b91d1/ethereum_utils-0.3.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3ab900df655d7f3f266e5f9699bae889",
          "sha256": "4eb65309c8f45f346f4aff5ce9f910e1ed919703d0207912df70b43e91319542"
        },
        "downloads": 0,
        "filename": "ethereum-utils-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3ab900df655d7f3f266e5f9699bae889",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18360,
        "upload_time": "2017-07-18T16:44:31",
        "url": "https://files.pythonhosted.org/packages/ed/73/058b0eaa51abab393853a7cb0641eedb5815f51b01fdad62153c1d0a11b0/ethereum-utils-0.3.0.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c97c35f8f520b2b85919db9514f4ba68",
          "sha256": "66d78da090eaabf627d4cf9df94a1fb5dd1fce650dbf66f49e7e44e923b88186"
        },
        "downloads": 0,
        "filename": "ethereum_utils-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c97c35f8f520b2b85919db9514f4ba68",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 19157,
        "upload_time": "2017-07-20T04:16:09",
        "url": "https://files.pythonhosted.org/packages/3f/00/69271b170fa8ace0c9ed03f400d2b9b27500c51c0b6251dfd135a5e7e246/ethereum_utils-0.3.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "35c8729222a059b975371dd6f66d6a56",
          "sha256": "508836a3ceab14795cfa43b541bb2c00bbd0daba4bcce834c8f9cb031e9581c2"
        },
        "downloads": 0,
        "filename": "ethereum-utils-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "35c8729222a059b975371dd6f66d6a56",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19368,
        "upload_time": "2017-07-20T04:16:02",
        "url": "https://files.pythonhosted.org/packages/ac/98/48ede26ea9691d867d9e34f83d86d52825bc4b80179b8f10b36cfb2530f5/ethereum-utils-0.3.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c97c35f8f520b2b85919db9514f4ba68",
        "sha256": "66d78da090eaabf627d4cf9df94a1fb5dd1fce650dbf66f49e7e44e923b88186"
      },
      "downloads": 0,
      "filename": "ethereum_utils-0.3.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c97c35f8f520b2b85919db9514f4ba68",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 19157,
      "upload_time": "2017-07-20T04:16:09",
      "url": "https://files.pythonhosted.org/packages/3f/00/69271b170fa8ace0c9ed03f400d2b9b27500c51c0b6251dfd135a5e7e246/ethereum_utils-0.3.1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "35c8729222a059b975371dd6f66d6a56",
        "sha256": "508836a3ceab14795cfa43b541bb2c00bbd0daba4bcce834c8f9cb031e9581c2"
      },
      "downloads": 0,
      "filename": "ethereum-utils-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "35c8729222a059b975371dd6f66d6a56",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 19368,
      "upload_time": "2017-07-20T04:16:02",
      "url": "https://files.pythonhosted.org/packages/ac/98/48ede26ea9691d867d9e34f83d86d52825bc4b80179b8f10b36cfb2530f5/ethereum-utils-0.3.1.tar.gz"
    }
  ]
}