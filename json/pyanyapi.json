{
  "info": {
    "author": "Dmitry Dygalo",
    "author_email": "dadygalo@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: Jython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Text Processing :: General",
      "Topic :: Utilities"
    ],
    "description": "PyAnyAPI\n========\n\nTools for convenient interface creation over various types of data in\na declarative way.\n\n|Build Status| |codecov.io|\n\nInstallation\n------------\n\nThe current stable release:\n\n::\n\n    pip install pyanyapi\n\nor:\n\n::\n\n    easy_install pyanyapi\n\nor from source:\n\n::\n\n    $ sudo python setup.py install\n\nUsage\n-----\n\nThe library provides an ability to create API over various content.\nCurrently there are bundled tools to work with HTML, XML, CSV, JSON and YAML.\nInitially it was created to work with ``requests`` library.\n\nBasic setup\n~~~~~~~~~~~\n\nBasic parsers can be declared in the following way:\n\n.. code:: python\n\n    from pyanyapi import HTMLParser\n\n\n    class SimpleParser(HTMLParser):\n        settings = {'header': 'string(.//h1/text())'}\n\n\n    >>> api = SimpleParser().parse('<html><body><h1>Value</h1></body></html>')\n    >>> api.header\n    Value\n\nOr it can be configured in runtime:\n\n.. code:: python\n\n    from pyanyapi import HTMLParser\n\n\n    >>> api = HTMLParser({'header': 'string(.//h1/text())'}).parse('<html><body><h1>Value</h1></body></html>')\n    >>> api.header\n    Value\n\nTo get all parsing results as a dict there is ``parse_all`` method.\nAll properties (include defined with ``@interface_property`` decorator) will be returned.\n\n.. code:: python\n\n    from pyanyapi import JSONParser\n\n    >>> JSONParser({\n        'first': 'container > 0',\n        'second': 'container > 1',\n        'third': 'container > 2',\n    }).parse('{\"container\":[\"first\", \"second\", \"third\"]}').parse_all()\n    {\n        'first': 'first',\n        'second': 'second',\n        'third': 'third',\n    }\n\nComplex setup\n~~~~~~~~~~~~~\n\nIn some cases you may want to apply extra transformations to result\nlist. Here comes \"base-children\" setup style.\n\n.. code:: python\n\n    from pyanyapi import HTMLParser\n\n\n    class SimpleParser(HTMLParser):\n        settings = {\n            'test': {\n                'base': '//test', \n                'children': 'text()|*//text()'\n            }\n        }\n\n\n    >>> api = SimpleParser().parse('<xml><test>123 </test><test><inside> 234</inside></test></xml>')\n    >>> api.test\n    ['123 ', ' 234']\n\nThere is another option to interact with sub-elements. Sub parsers!\n\n.. code:: python\n\n    from pyanyapi import HTMLParser\n\n\n    class SubParser(HTMLParser):\n        settings = {\n            'href': 'string(//@href)',\n            'text': 'string(//text())'\n        }\n\n\n    class Parser(HTMLParser):\n        settings = {\n            'elem': {\n                'base': './/a',\n                'parser': SubParser\n            }\n        }\n\n    >>> api = Parser().parse(\"<html><body><a href='#test'>test</a></body></html>\")\n    >>> api.elem[0].href\n    #test\n    >>> api.elem[0].text\n    test\n    >>> api.parse_all()\n    {'elem': [{'href': '#test', 'text': 'test'}]}\n\nAlso you can pass sub parsers as classes or like instances.\n\nSettings inheritance\n~~~~~~~~~~~~~~~~~~~~\n\nSettings attribute is merged from all ancestors of current parser.\n\n.. code:: python\n\n    from pyanyapi import HTMLParser\n\n\n    class ParentParser(HTMLParser):\n        settings = {'parent': '//p'}\n\n\n    class FirstChildParser(ParentParser):\n        settings = {'parent': '//override'}\n\n\n    class SecondChildParser(ParentParser):\n        settings = {'child': '//h1'}\n\n\n    >>> FirstChildParser().settings['parent']\n    //override\n\n    >>> SecondChildParser().settings['parent']\n    //p\n\n    >>> SecondChildParser().settings['child']\n    //h1\n\n    >>> SecondChildParser({'child': '//more'}).settings['child']\n    //more\n\nResults stripping\n~~~~~~~~~~~~~~~~~\n\nParsers can automagically strip trailing whitespaces with ``strip=True`` option.\n\n.. code:: python\n\n    from pyanyapi import XMLParser\n\n\n    >>> settings = {'p': 'string(//p)'}\n    >>> XMLParser(settings).parse('<p> Pcontent </p>').p\n     Pcontent\n    >>> XMLParser(settings, strip=True).parse('<p> Pcontent </p>').p\n    Pcontent\n\nHTML & XML\n~~~~~~~~~~\n\nFor HTML and XML based interfaces XPath 1.0 syntax is used for settings\ndeclaration. Unfortunately XPath 2.0 is not supported by lxml. XML is\nabout the same as HTMLParser, but uses a different lxml parser internally.\nHere is an example of usage with ``requests``:\n\n.. code:: python\n\n    >>> import requests\n    >>> import pyanyapi\n    >>> parser = pyanyapi.HTMLParser({'header': 'string(.//h1/text())'})\n    >>> response = requests.get('http://example.com')\n    >>> api = parser.parse(response.text)\n    >>> api.header\n    Example Domain\n\nIf you need, you can execute more XPath queries at any time you want:\n\n.. code:: python\n\n    from pyanyapi import HTMLParser\n\n\n    >>> parser = HTMLParser({'header': 'string(.//h1/text())'})\n    >>> api = parser.parse('<html><body><h1>This is</h1><p>test</p></body></html>')\n    >>> api.header\n    This is\n    >>> api.parse('string(//p)')\n    test\n\nXML Objectify\n~~~~~~~~~~~~~\n\nLxml provides interesting feature - objectified interface for XML. It\nconverts whole XML to Python object. This parser doesn't require any\nsettings. E.g:\n\n.. code:: python\n\n    from pyanyapi import XMLObjectifyParser\n\n\n    >>> XMLObjectifyParser().parse('<xml><test>123</test></xml>').test\n    123\n\nJSON\n~~~~\n\nSettings syntax in based on PostgreSQL statements syntax.\n\n.. code:: python\n\n    from pyanyapi import JSONParser\n     \n     \n    >>> JSONParser({'id': 'container > id'}).parse('{\"container\":{\"id\":\"123\"}}').id\n    123\n\nOr you can get access to values in lists by index:\n\n.. code:: python\n\n    from pyanyapi import JSONParser\n     \n     \n    >>> JSONParser({'second': 'container > 1'}).parse('{\"container\":[\"first\", \"second\", \"third\"]}').second\n    second\n\nAnd executes more queries after initial parsing:\n\n.. code:: python\n\n    from pyanyapi import JSONParser\n     \n     \n    >>> api = JSONParser({'second': 'container > 1'}).parse('{\"container\":[],\"second_container\":[123]}')\n    >>> api.parse('second_container > 0')\n    123\n\nYAML\n~~~~\nEqual to JSON parser, but works with YAML data.\n\n.. code:: python\n\n    from pyanyapi import YAMLParser\n\n\n    >>> YAMLParser({'test': 'container > test'}).parse('container:\\n    test: \"123\"').test\n    123\n\nRegular Expressions Interface\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn case, when data has wrong format or is just very complicated to be parsed\nwith bundled tools, you can use a parser based on regular expressions.\nSettings are based on Python's regular expressions. It is the most powerful\nparser, because of its simplicity.\n\n.. code:: python\n\n    from pyanyapi import RegExpParser\n\n\n    >>> RegExpParser({'error_code': 'Error (\\d+)'}).parse('Oh no!!! It is Error 100!!!').error_code\n    100\n\nAnd executes more queries after initial parsing:\n\n.. code:: python\n\n    from pyanyapi import RegExpParser\n\n\n    >>> api = RegExpParser({'digits': '\\d+'}).parse('123abc')\n    >>> api.parse('[a-z]+')\n    abc\n\nAlso, you can pass flags for regular expressions on parser initialization:\n\n.. code:: python\n\n    from pyanyapi import RegExpParser\n\n\n    >>> RegExpParser({'test': '\\d+.\\d+'}).parse('123\\n234').test\n    123\n    >>> RegExpParser({'test': '\\d+.\\d+'}, flags=re.DOTALL).parse('123\\n234').test\n    123\n    234\n\n\nCSV Interface\n~~~~~~~~~~~~~\n\nOperates with CSV data with simple queries in format 'row_id:column_id'.\n\n.. code:: python\n\n    from pyanyapi import CSVParser\n\n\n    >>> CSVParser({'value': '1:2'}).parse('1,2,3\\r\\n4,5,6\\r\\n').value\n    6\n\nAlso, you can pass custom kwargs for `csv.reader` on parser initialization:\n\n.. code:: python\n\n    from pyanyapi import CSVParser\n\n\n    >>> CSVParser({'value': '1:2'}, delimiter=';').parse('1;2;3\\r\\n4;5;6\\r\\n').value\n    6\n\nAJAX Interface\n~~~~~~~~~~~~~~\n\nAJAX is a very popular technology and often use JSON data with HTML values. Here is an example:\n\n.. code:: python\n\n    from pyanyapi import AJAXParser\n\n\n    >>> api = AJAXParser({'p': 'content > string(//p)'}).parse('{\"content\": \"<p>Pcontent</p>\"}')\n    >>> api.p\n    Pcontent\n\nIt uses combination of XPath queries and PostgreSQL-based JSON lookups.\nCustom queries execution is also available:\n\n.. code:: python\n\n    from pyanyapi import AJAXParser\n\n\n    >>> api = AJAXParser().parse('{\"content\": \"<p>Pcontent</p><span>123</span>\"}')\n    >>> api.parse('content > string(//span)')\n    123\n\n\nCustom Interface\n~~~~~~~~~~~~~~~~\n\nYou can easily declare your own interface. For that you should define\n``execute_method`` method. And optionally ``perform_parsing``. Here is\nan example of naive CSVInterface, which provides an ability to get the column\nvalue by index. Also you should create a separate parser for that.\n\n.. code:: python\n\n    from pyanyapi import BaseInterface, BaseParser\n\n\n    class CSVInterface(BaseInterface):\n\n        def perform_parsing(self):\n            return self.content.split(',')\n\n        def execute_method(self, settings):\n            return self.parsed_content[settings]\n\n\n    class CSVParser(BaseParser):\n        interface_class = CSVInterface\n\n\n    >>> CSVParser({'second': 1}).parse('1,2,3').second\n    2\n\nExtending interfaces\n--------------------\n\nAlso content can be parsed with regular Python code. It can be done with\nspecial decorators ``interface_method`` and ``interface_property``.\n\nCustom method example:\n\n.. code:: python\n\n    from pyanyapi import HTMLParser, interface_method\n\n\n    class ParserWithMethod(HTMLParser):\n        settings = {'occupation': 'string(.//p/text())'}\n\n        @interface_method\n        def hello(self, name):\n            return name + ' is ' + self.occupation\n\n\n    >>> api = ParserWithMethod().parse('<html><body><p>programmer</p></body></html>')\n    >>> api.occupation\n    programmer\n\n    >>> api.hello('John')\n    John is programmer\n\nCustom property example:\n\n.. code:: python\n\n    from pyanyapi import HTMLParser, interface_property\n\n\n    class ParserWithProperty(HTMLParser):\n        settings = {'p': 'string(.//p/text())', 'h1': 'string(.//h1/text())'}\n\n        @interface_property\n        def test(self):\n            return self.h1 + ' ' + self.p\n\n\n    >>> api = ParserWithProperty().parse('<html><body><h1>This is</h1><p>test</p></body></html>')\n    >>> api.h1\n    This is\n\n    >>> api.p\n    test\n\n    >>> api.test\n    This is test\n\nCertainly the previous example can be done with more complex XPath\nexpression, but in general case XPath is not enough.\n\nComplex content parsing\n-----------------------\n\nCombined parsers\n~~~~~~~~~~~~~~~~\n\nIn situations, when particular content type is unknown before parsing,\nyou can create combined parser, which allows you to use multiply\ndifferent parsers transparently. E.g. some server usually returns JSON,\nbut in cases of server errors it returns HTML pages with some text.\nThen:\n\n.. code:: python\n\n    from pyanyapi import CombinedParser, HTMLParser, JSONParser\n\n\n    class Parser(CombinedParser):\n        parsers = [\n            JSONParser({'test': 'test'}),\n            HTMLParser({'error': 'string(//span)'})\n        ]\n\n    >>> parser = Parser()\n    >>> parser.parse('{\"test\": \"Text\"}').test\n    Text\n    >>> parser.parse('<body><span>123</span></body>').error\n    123\n\nAnother example\n~~~~~~~~~~~~~~~\n\nSometimes different content types can be combined inside single string.\nOften with AJAX requests.\n\n.. code:: javascript\n\n    {\"content\": \"<span>Text</span>\"}\n\nYou can work with such data in the following way:\n\n.. code:: python\n\n    from pyanyapi import HTMLParser, JSONParser, interface_property\n\n\n    inner_parser = HTMLParser({'text': 'string(.//span/text())'})\n\n\n    class AJAXParser(JSONParser):\n        settings = {'content': 'content'}\n\n        @interface_property\n        def text(self):\n            return inner_parser.parse(self.content).text\n\n\n    >>> api = AJAXParser().parse('{\"content\": \"<span>Text</span>\"}')\n    >>> api.text\n    Text\n\nNow AJAXParser is bundled in pyanyapi, but it works differently.\nBut anyway, this example can be helpful for building custom parsers.\n\nPython support\n--------------\n\nPyAnyAPI supports Python 2.6, 2.7, 3.2, 3.3, 3.4, 3.5, PyPy and partially PyPy3 and Jython.\nUnfortunately ``lxml`` doesn't support PyPy3 and Jython, so HTML & XML parsing is not supported on PyPy3 and Jython.\n\n.. |Build Status| image:: https://travis-ci.org/Stranger6667/pyanyapi.svg?branch=master\n   :target: https://travis-ci.org/Stranger6667/pyanyapi\n.. |codecov.io| image:: http://codecov.io/github/Stranger6667/pyanyapi/coverage.svg?branch=master\n   :target: http://codecov.io/github/Stranger6667/pyanyapi?branch=master\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Stranger6667/pyanyapi",
    "keywords": "parsing,interface,xml,json,csv,yaml,API,XPath,regexp",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pyanyapi",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pyanyapi/",
    "release_url": "https://pypi.org/project/pyanyapi/0.6.0/",
    "requires_python": null,
    "summary": "Tools for convenient interface creation over various types of data in a declarative way.",
    "version": "0.6.0"
  },
  "releases": {
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ca482804c7d45410c67967b2b32d9f54",
          "sha256": "1155e81db681b825e5dbbed82ff343842dd6a77fed39245e27e705c2315a4622"
        },
        "downloads": 686,
        "filename": "pyanyapi-0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ca482804c7d45410c67967b2b32d9f54",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 8179,
        "upload_time": "2015-09-29T09:03:44",
        "url": "https://files.pythonhosted.org/packages/8d/ed/1b1119e8ee709a40a42b438a7e77551b922722e4c8b694829bbb33da5163/pyanyapi-0.4-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "635ccc2a07c702c499808ab42b097e1c",
          "sha256": "9213c584218917830f6bf4e3896ee0b47cf84106a214f320d6981672d9300048"
        },
        "downloads": 684,
        "filename": "pyanyapi-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "635ccc2a07c702c499808ab42b097e1c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20931,
        "upload_time": "2015-09-29T09:03:38",
        "url": "https://files.pythonhosted.org/packages/1a/a8/64ab0c8d94d49b7c4cd4f8225479a52d5473f7f891f429ff82d55409ac75/pyanyapi-0.4.tar.gz"
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "86be1ae8967dfc825d6cbe10efe09828",
          "sha256": "7afaf3d97d1e849362db316b330718531edb5af85c88bd32bef89e5036b0d6f0"
        },
        "downloads": 864,
        "filename": "pyanyapi-0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "86be1ae8967dfc825d6cbe10efe09828",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 8833,
        "upload_time": "2015-10-04T22:37:05",
        "url": "https://files.pythonhosted.org/packages/d5/13/d91d9d642b2ee6b7eb3909d09a518adc80c46e45490d5d1ead5318938809/pyanyapi-0.5-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "838cd51025ac5a3a3a4668ec1275c71d",
          "sha256": "f91b86f41bf7ec6f8d0d499e36c42b389ab555d34d8007e0512f7281a61c49f8"
        },
        "downloads": 694,
        "filename": "pyanyapi-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "838cd51025ac5a3a3a4668ec1275c71d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27095,
        "upload_time": "2015-10-04T22:36:59",
        "url": "https://files.pythonhosted.org/packages/5e/04/aedcdee50fe6dead86ef38e35480d368718ab3695f81af32c0f8c0d8de20/pyanyapi-0.5.tar.gz"
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e44c208a50179c07d6b73b1a8c38d020",
          "sha256": "6fd46ff030fcbd240f7d62e050a92748476f91c2369c35d3f670032f996d8ef2"
        },
        "downloads": 614,
        "filename": "pyanyapi-0.5.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e44c208a50179c07d6b73b1a8c38d020",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 8885,
        "upload_time": "2015-10-19T23:36:19",
        "url": "https://files.pythonhosted.org/packages/36/f7/c07a9738e22b7325707cbbe65c3a4423a9d4182bc6aa4bfbbd3976b9c5ee/pyanyapi-0.5.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "5d836416e686011be7b756b0a7a3c185",
          "sha256": "091922398d99f9da0e5d54ac8bbabf62affea987f49caf3d61f46b78fde6fe48"
        },
        "downloads": 650,
        "filename": "pyanyapi-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5d836416e686011be7b756b0a7a3c185",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27358,
        "upload_time": "2015-10-19T23:36:13",
        "url": "https://files.pythonhosted.org/packages/0e/5b/b542527b5d6282be9dc61ea2cd048a587838662294db6c0f24b7ec8f3128/pyanyapi-0.5.1.tar.gz"
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "93e718024e280fdb8ab0ca457bf1bdfb",
          "sha256": "4f6789d643a4003102cb99afc2fb534b908de22d8caea5118b22524a74ccf00b"
        },
        "downloads": 618,
        "filename": "pyanyapi-0.5.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "93e718024e280fdb8ab0ca457bf1bdfb",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 8995,
        "upload_time": "2015-10-20T09:41:45",
        "url": "https://files.pythonhosted.org/packages/35/08/1b764a74fd48f99de61bab591e7e96b9c81ed65b6250be15fa87523d18de/pyanyapi-0.5.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "359a9c2bd744e7bd7c732f50c1db1ff4",
          "sha256": "6044635260bd842c5e2a64c288a39e223027af01980ac015ac7c6b1c05f31898"
        },
        "downloads": 640,
        "filename": "pyanyapi-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "359a9c2bd744e7bd7c732f50c1db1ff4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27657,
        "upload_time": "2015-10-20T09:41:36",
        "url": "https://files.pythonhosted.org/packages/ec/76/9a9d9f83a98b4697e7f1f150892926957c7d0e3129408b9f6cf1e05ce951/pyanyapi-0.5.2.tar.gz"
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ceba26733ddab02c43bb34e7a53e2f81",
          "sha256": "fd004a8691ef210681194c94e3caf9acdc8787c814065a09d2e76d299d84e859"
        },
        "downloads": 623,
        "filename": "pyanyapi-0.5.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ceba26733ddab02c43bb34e7a53e2f81",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 9038,
        "upload_time": "2015-10-30T17:30:26",
        "url": "https://files.pythonhosted.org/packages/06/fd/af3dbfebcc43ea6c6df7d1c0b762ee20dd0407a931f64f633de0a9c51459/pyanyapi-0.5.3-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "78bd09b4c29e2bc22c913cb368e37a11",
          "sha256": "bd0be4827961b4fb6568b70d186a10ee36879fb650408344894ae35ce934409f"
        },
        "downloads": 621,
        "filename": "pyanyapi-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "78bd09b4c29e2bc22c913cb368e37a11",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27734,
        "upload_time": "2015-10-30T17:30:04",
        "url": "https://files.pythonhosted.org/packages/dc/ab/2fd4067d0b21c3a6b4ca61ab475438f4c5c7c6c452173db224cc131cb42a/pyanyapi-0.5.3.tar.gz"
      }
    ],
    "0.5.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b30148b14e5560ccab5b3fd2885488ea",
          "sha256": "1bcaad77f4c83c1cf4ffbb52a7d0cb8e7babe262e0545a05badc8bea6e8afa72"
        },
        "downloads": 575,
        "filename": "pyanyapi-0.5.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b30148b14e5560ccab5b3fd2885488ea",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 9098,
        "upload_time": "2015-11-15T15:12:20",
        "url": "https://files.pythonhosted.org/packages/36/50/0ba751aa4184d9e23d1d1382ab24d8ff49791d297a29cda109e8e609aafe/pyanyapi-0.5.4-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "955988bdd26bf0eb3ab9d1fa4cfedb1e",
          "sha256": "4559d24b46ebac0421f5a7321244d97a4b5c96e009d9dd1a4ec2657980070ddd"
        },
        "downloads": 572,
        "filename": "pyanyapi-0.5.4.tar.gz",
        "has_sig": false,
        "md5_digest": "955988bdd26bf0eb3ab9d1fa4cfedb1e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29849,
        "upload_time": "2015-11-15T15:12:03",
        "url": "https://files.pythonhosted.org/packages/e4/5f/2b7fd9121f22ed765df5045c2a77a21a71f169170074847685f563856319/pyanyapi-0.5.4.tar.gz"
      }
    ],
    "0.5.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bb24e4dc6690d876a8cc728c77e47eae",
          "sha256": "ecf7eda9216ba2e775ff134f3bf4d12e0b6bdc67ac4353d2c4bb23d84788e23d"
        },
        "downloads": 544,
        "filename": "pyanyapi-0.5.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb24e4dc6690d876a8cc728c77e47eae",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 9148,
        "upload_time": "2015-11-23T16:08:00",
        "url": "https://files.pythonhosted.org/packages/d5/2b/a28bdb445cc207c299e84b576554476f1ef7f68782834f99d4bbd0391fd1/pyanyapi-0.5.5-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8549dec30c71f2a0fcd33b0da207e2a7",
          "sha256": "74931002212f0a69f497b30e76c0e7f0bc0c00ba37e89b72230337f89ed53feb"
        },
        "downloads": 552,
        "filename": "pyanyapi-0.5.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8549dec30c71f2a0fcd33b0da207e2a7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29923,
        "upload_time": "2015-11-23T16:07:50",
        "url": "https://files.pythonhosted.org/packages/56/8f/d2725accd33ab066010395f32ef339577db4f3a62dcfdd71831510eebbe7/pyanyapi-0.5.5.tar.gz"
      }
    ],
    "0.5.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ae77254d8bbe6533c48038f218b258f3",
          "sha256": "9224d06127da817b8fa7b86bcedf4bd8682e108468225881ce253212d5161769"
        },
        "downloads": 543,
        "filename": "pyanyapi-0.5.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ae77254d8bbe6533c48038f218b258f3",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 9163,
        "upload_time": "2015-11-24T11:54:38",
        "url": "https://files.pythonhosted.org/packages/31/dc/184b838ac74bd206df85a419e0e333112f81536aea3790f8c3810beea8fc/pyanyapi-0.5.6-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "54ac500ff64ed564a0a741d95d8312c5",
          "sha256": "4d68448f45fad37f41965e6d9b1d876c635afa1fe5e843bb1db8af83fe314cb9"
        },
        "downloads": 583,
        "filename": "pyanyapi-0.5.6.tar.gz",
        "has_sig": false,
        "md5_digest": "54ac500ff64ed564a0a741d95d8312c5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29949,
        "upload_time": "2015-11-24T11:54:33",
        "url": "https://files.pythonhosted.org/packages/12/8c/75b9494ec82868d2d62bfbbde173667e9ec3c6c5a237abda22db8306b97e/pyanyapi-0.5.6.tar.gz"
      }
    ],
    "0.5.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "70396eb7f6e5c5f8a760ee28617e9cf4",
          "sha256": "ae387b260e4bfd1321c6b0da24ceb09d6a143ee3f9b3a3f5a7e7bdb9a2add4c7"
        },
        "downloads": 335,
        "filename": "pyanyapi-0.5.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70396eb7f6e5c5f8a760ee28617e9cf4",
        "packagetype": "bdist_wheel",
        "python_version": "3.4",
        "size": 9204,
        "upload_time": "2016-01-28T08:20:33",
        "url": "https://files.pythonhosted.org/packages/0c/55/653c9876804f9503825604964c287520c54ddfa05269ed379555d84ec6a0/pyanyapi-0.5.7-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e8540775cb3848d79698684127ec178a",
          "sha256": "de7a4b9aab5d8c11ade442f02a9da15a56eebc9998f49d43711d233dd2fa4b81"
        },
        "downloads": 353,
        "filename": "pyanyapi-0.5.7.tar.gz",
        "has_sig": false,
        "md5_digest": "e8540775cb3848d79698684127ec178a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30150,
        "upload_time": "2016-01-28T08:20:25",
        "url": "https://files.pythonhosted.org/packages/20/e9/f528609b9ea85566d6039dddf7190053c1007f7dc75036bcc207f1ea5e85/pyanyapi-0.5.7.tar.gz"
      }
    ],
    "0.5.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b632bc29e64ed5de3d2cd2f074c5244a",
          "sha256": "b7f144f5788304d7f196bdaffe90346dfb414f569b8799ee882f97aace88965d"
        },
        "downloads": 306,
        "filename": "pyanyapi-0.5.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b632bc29e64ed5de3d2cd2f074c5244a",
        "packagetype": "bdist_wheel",
        "python_version": "3.4",
        "size": 9257,
        "upload_time": "2016-07-14T11:47:16",
        "url": "https://files.pythonhosted.org/packages/13/d1/9fc3e0946648c4afbc292c08313cacee8334413e97cfac3ee3f1f963c45c/pyanyapi-0.5.8-py2.py3-none-any.whl"
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f3cf0a664112d0ddf64a7b9f6a491253",
          "sha256": "570ccfc035a7fd606ca6b14e3d3943e7305888762abf69a7f5d3bb78e96d25ab"
        },
        "downloads": 331,
        "filename": "pyanyapi-0.6.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f3cf0a664112d0ddf64a7b9f6a491253",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 9494,
        "upload_time": "2016-08-09T08:08:04",
        "url": "https://files.pythonhosted.org/packages/31/83/21f26ebcdcf95189d1d71d616906991cc51b6f98e34880ef1fd46330a444/pyanyapi-0.6.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ab63d6eda0e097395e35ced73d466149",
          "sha256": "c9f43190509e4154944b31bd0855a85d525f23b4dc3d5867a4490c2ff9aed064"
        },
        "downloads": 94,
        "filename": "pyanyapi-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ab63d6eda0e097395e35ced73d466149",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30810,
        "upload_time": "2016-08-09T08:08:01",
        "url": "https://files.pythonhosted.org/packages/bb/c7/10d95365bd0421715f2d57f9b002e41a7ccc6d87798e89258b0feb4cee70/pyanyapi-0.6.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f3cf0a664112d0ddf64a7b9f6a491253",
        "sha256": "570ccfc035a7fd606ca6b14e3d3943e7305888762abf69a7f5d3bb78e96d25ab"
      },
      "downloads": 331,
      "filename": "pyanyapi-0.6.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f3cf0a664112d0ddf64a7b9f6a491253",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 9494,
      "upload_time": "2016-08-09T08:08:04",
      "url": "https://files.pythonhosted.org/packages/31/83/21f26ebcdcf95189d1d71d616906991cc51b6f98e34880ef1fd46330a444/pyanyapi-0.6.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "ab63d6eda0e097395e35ced73d466149",
        "sha256": "c9f43190509e4154944b31bd0855a85d525f23b4dc3d5867a4490c2ff9aed064"
      },
      "downloads": 94,
      "filename": "pyanyapi-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ab63d6eda0e097395e35ced73d466149",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 30810,
      "upload_time": "2016-08-09T08:08:01",
      "url": "https://files.pythonhosted.org/packages/bb/c7/10d95365bd0421715f2d57f9b002e41a7ccc6d87798e89258b0feb4cee70/pyanyapi-0.6.0.tar.gz"
    }
  ]
}