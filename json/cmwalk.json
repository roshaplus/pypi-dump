{
  "info": {
    "author": "Max Peng",
    "author_email": "max.peng1768@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "cmWalk\r\n======\r\n\r\n1. Introduction\r\n---------------\r\n\r\n``cmWalk`` is a python script to walk the directory tree of a C/C++\r\nproject of embedded system to generate CMakeLists.txt files for building\r\nthe executable.\r\n\r\n2. Usage\r\n--------\r\n\r\nusage: cmwalk.py [-h] input_dir\r\n\r\nA python script to generate CMakeLists.txt of a C/C++ project - 0.0.1.\r\n\r\npositional arguments: input_dir The base directory of C/C++ project.\r\n\r\noptional arguments: -h, \u2013help show this help message and exit\r\n\r\n3. Configuration File\r\n---------------------\r\n\r\nYou can create a json file for each directory of project directory tree\r\nto configure how ``cmwalk`` to generate \u2018CMakeLists.txt\u2019. The\r\nconfiguration filename of ``cmwalk`` is ``cmwalk.json``.\r\n\r\n3.1 Supported properties of ``cmwalk.json``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n-  **cmakeToolchainFile**\r\n\r\n   Specifying the toolchain file of the used compiler for current\r\n   project. You can also set the used toolchain file by invoking\r\n   ``cmake`` with the command line parameter\r\n   ``-DCMAKE_TOOLCHAIN_FILE=path/to/file``.\r\n\r\n   Refer cmake documentation\r\n   `cmake-toolchains(7) <https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html>`__\r\n   for the details.\r\n\r\n   Example:\r\n\r\n   .. code:: json\r\n\r\n        {\r\n            \"cmakeToolchainFile\": \"gcc_arm_none_eabi_toolchain.cmake\"\r\n        }\r\n\r\n   An example of toolchain file:\r\n\r\n   .. code:: cmake\r\n\r\n       # refer https://cmake.org/Wiki/CMake_Cross_Compiling\r\n       #include(CMakeForceCompiler)    # cmake_force_c_compiler and cmake_force_cxx_compiler are deprecated.\r\n\r\n       set(CMAKE_SYSTEM_NAME Generic)\r\n       set(CMAKE_SYSTEM_VERSION 1)\r\n       set(CMAKE_SYSTEM_PROCESSOR \"armv7-m\")\r\n\r\n\r\n       # refer https://cmake.org/pipermail/cmake-developers/2016-February/027871.html\r\n       # about how to solve this problem: \"arm-none-eabi-gcc.exe\" is not able to compile a simple test program.\r\n       set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)\r\n\r\n       # find the cross compiler and associated tools that we need:\r\n       find_program(ARM_NONE_EABI_GCC arm-none-eabi-gcc)\r\n       find_program(ARM_NONE_EABI_GPP arm-none-eabi-g++)\r\n       find_program(ARM_NONE_EABI_OBJCOPY arm-none-eabi-objcopy)\r\n\r\n\r\n       macro(gcc_program_notfound progname)\r\n           message(\"**************************************************************************\\n\")\r\n           message(\" ERROR: the arm gcc program ${progname} could not be found\\n\")\r\n           if(CMAKE_HOST_SYSTEM_NAME STREQUAL \"Windows\" OR CMAKE_HOST_SYSTEM_NAME STREQUAL \"Linux\")\r\n               message(\" you can install the ARM GCC embedded compiler tools from:\")\r\n               message(\" https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads\")\r\n           elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL \"Darwin\")\r\n               message(\" it is included in the arm-none-eabi-gcc package that you can install\")\r\n               message(\" with homebrew:\\n\")\r\n               message(\"   brew tap ARMmbed/homebrew-formulae\")\r\n               message(\"   brew install arm-none-eabi-gcc\")\r\n           endif()\r\n           message(\"\\n**************************************************************************\")\r\n           message(FATAL_ERROR \"missing program prevents build\")\r\n           return()\r\n       endmacro(gcc_program_notfound)\r\n\r\n       if(NOT ARM_NONE_EABI_GCC)\r\n           gcc_program_notfound(\"arm-none-eabi-gcc\")\r\n       endif()\r\n\r\n       if(NOT ARM_NONE_EABI_GPP)\r\n           gcc_program_notfound(\"arm-none-eabi-g++\")\r\n       endif()\r\n\r\n       if(NOT ARM_NONE_EABI_OBJCOPY)\r\n           gcc_program_notfound(\"arm-none-eabi-objcopy\")\r\n       endif()\r\n\r\n\r\n       set(CMAKE_C_COMPILER arm-none-eabi-gcc)\r\n       set(CMAKE_CXX_COMPILER arm-none-eabi-g++)\r\n\r\n       set(C_FAMILY_FLAGS_INIT \"-ffunction-sections -fdata-sections -g -fno-common -fmessage-length=0 --specs=nosys.specs --specs=nano.specs\")\r\n       set(CMAKE_C_FLAGS_INIT \"${C_FAMILY_FLAGS_INIT} -std=c99\")\r\n       set(CMAKE_CXX_FLAGS_INIT \"${C_FAMILY_FLAGS_INI} -std=c++11\")\r\n       set(CMAKE_ASM_FLAGS_INIT \"-fno-exceptions -fno-unwind-tables -x assembler-with-cpp\")\r\n       set(CMAKE_EXE_LINKER_FLAGS_INIT \"-Wl,-gc-sections,-print-memory-usage\")\r\n\r\n-  **cmakeCompilerOptionsFile**\r\n\r\n   Specifying a file that contains the additional compiler settings\r\n   which be inclued in the top-level CMakeLists.txt file.\r\n\r\n   Example:\r\n\r\n   .. code:: json\r\n\r\n       {\r\n           \"cmakeCompilerOptionsFile\": \"gcc_arm_none_eabi_opts.cmake\"\r\n       }\r\n\r\n   An example of compiler option files for `GNU Arm Embedded\r\n   Toolchain <https://developer.arm.com/open-source/gnu-toolchain/gnu-rm>`__:\r\n\r\n   .. code:: cmake\r\n\r\n       set(EXTRA_COMMON_FLAGS \"-mcpu=cortex-m4 -mthumb-interwork -mfloat-abi=hard -mfpu=fpv4-sp-d16 -DUSE_HAL_DRIVER -DSTM32F429xx\")\r\n       set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${EXTRA_COMMON_FLAGS}\")\r\n       set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${EXTRA_COMMON_FLAGS}\")\r\n\r\n       set(CMAKE_ASM_FLAGS \"${CMAKE_ASM_FLAGS} -mcpu=cortex-m4 -mthumb-interwork -mfloat-abi=hard -mfpu=fpv4-sp-d16\")\r\n\r\n       set(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/app/STM32F429ZITx_FLASH.ld)\r\n       set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-Map=${CMAKE_BINARY_DIR}/${PROJECT_NAME}.map -T${LINKER_SCRIPT}\")\r\n\r\n-  **sourceDirectories**\r\n\r\n   A list of source directories.\r\n\r\n   If ``sourceDirectories`` is specified in ``cmwalk.json``, then only\r\n   the specified directories will be included for parsing, other\r\n   directories will be excluded. If ``sourceDirectories`` does not exist\r\n   but ``ignoredDirectories`` exist, then all the directories except\r\n   those specified by ``ignoredDirectories`` will be excluded.\r\n\r\n   An example of specifying the source subdirectories for searching the\r\n   source files:\r\n\r\n   .. code:: json\r\n\r\n       {\r\n            \"sourceDirectories\": [\"app\", \"libs\"]\r\n       }\r\n\r\n-  **ignoredDirectories** - A list of ignored directories.\r\n\r\n   ``sourceDirs`` property has higher priority than ``ignoredDirs``\r\n   property. If both of ``sourceDirs`` and ``ignoredDirs`` properties\r\n   are specified in ``cmwalk.json``, ``ignoredDirs`` property has no\r\n   effect.\r\n\r\n   An example of excluding subdirectories for searching the source\r\n   files:\r\n\r\n   .. code:: json\r\n\r\n       {\r\n            \"ignoredDirs\": [\"docs\"]\r\n       }\r\n\r\n-  **ignoredFiles** - A list of ignored files.\r\n\r\n   An example of excluding a file from ``cmake`` build system:\r\n\r\n   .. code:: json\r\n\r\n       {\r\n            \"ignoredFiles\": [\"cfg.h.template\"]\r\n       }\r\n\r\n\r\n4. Example of generated CMakeLists.txt\r\n--------------------------------------\r\n\r\nThis is an example of generated top-level ``CMakeLists.txt``:\r\n\r\n.. code:: cmake\r\n\r\n    cmake_minimum_required(VERSION 3.9)\r\n\r\n    # set the toolchain file.\r\n    # toolchain file should be set before \"project\" command.\r\n    # the toolchain file can also be set via \"cmake -DCMAKE_TOOLCHAIN_FILE=path/to/file\".\r\n    set(CMAKE_TOOLCHAIN_FILE gcc_arm_none_eabi_toolchain.cmake)\r\n\r\n    project(nucleo_f429zi_freertos_lwip)\r\n    enable_language(C CXX ASM)\r\n\r\n    # load and run the CMake code from the given file to specify project specific options.\r\n    include(gcc_arm_none_eabi_opts.cmake)\r\n\r\n\r\n    # export the executable target through a variable to CMakeLists.txt files in subdirectories.\r\n    # update the dependent sources.\r\n    add_executable(nucleo_f429zi_freertos_lwip.elf\r\n        \"\"\r\n    )\r\n\r\n    # export the name of executable target via a variable to CMakeLists.txt files in subdirectories.\r\n    set(CURRENT_EXE_NAME ${PROJECT_NAME}.elf)\r\n    # load and run the CMake code from subdirectories for current target.\r\n    include(app/CMakeLists.txt)\r\n    include(libs/CMakeLists.txt)\r\n\r\n\r\n    # generate the hex file from the built target.\r\n    set(HEX_FILE ${PROJECT_NAME}.hex)\r\n    add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD\r\n        COMMAND ${CMAKE_OBJCOPY} -O ihex $<TARGET_FILE:${PROJECT_NAME}.elf> ${HEX_FILE}\r\n        COMMENT \"Building ${HEX_FILE}...\")\r\n\r\n    # generate the bin file from the built target.\r\n    set(BIN_FILE ${PROJECT_NAME}.bin)\r\n    add_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD\r\n        COMMAND ${CMAKE_OBJCOPY} -O binary $<TARGET_FILE:${PROJECT_NAME}.elf> ${BIN_FILE}\r\n        COMMENT \"Building ${BIN_FILE}...\")\r\n\r\n5. References\r\n-------------\r\n\r\n1. `Enhanced source file handling with target_sources() \u2013\r\n   Crascit <https://crascit.com/2016/01/31/enhanced-source-file-handling-with-target_sources/>`__\r\n2. `CLion for embedded development \\| CLion\r\n   Blog <https://blog.jetbrains.com/clion/2016/06/clion-for-embedded-development/>`__\r\n\r\n\r\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/maxpeng/cmWalk",
    "keywords": "cmake",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cmwalk",
    "platform": "",
    "project_url": "https://pypi.org/project/cmwalk/",
    "release_url": "https://pypi.org/project/cmwalk/0.0.6/",
    "requires_dist": [
      "walkdir",
      "jinja2"
    ],
    "requires_python": "",
    "summary": "A python script to walk subdirectories of a C/C++ project of embedded system to generate CMakeLists.txt files for building the executable.",
    "version": "0.0.6"
  },
  "releases": {
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "20a757b9da6a57978a6857cac4f31346",
          "sha256": "8de8731e01d73fef1446647de56989ba96b2cd4ec4e2b2735fc80e49258a2299"
        },
        "downloads": -1,
        "filename": "cmwalk-0.0.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "20a757b9da6a57978a6857cac4f31346",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 17618,
        "upload_time": "2017-12-22T00:51:40",
        "url": "https://files.pythonhosted.org/packages/8f/5b/ad2d9a0c1888faebc5073ab8f12b8a01d50bfd7178eec004accc24f8aec7/cmwalk-0.0.6-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "20a757b9da6a57978a6857cac4f31346",
        "sha256": "8de8731e01d73fef1446647de56989ba96b2cd4ec4e2b2735fc80e49258a2299"
      },
      "downloads": -1,
      "filename": "cmwalk-0.0.6-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "20a757b9da6a57978a6857cac4f31346",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 17618,
      "upload_time": "2017-12-22T00:51:40",
      "url": "https://files.pythonhosted.org/packages/8f/5b/ad2d9a0c1888faebc5073ab8f12b8a01d50bfd7178eec004accc24f8aec7/cmwalk-0.0.6-py2.py3-none-any.whl"
    }
  ]
}