{
  "info": {
    "author": "Max Peng",
    "author_email": "max.peng1768@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# cmWalk\r\n\r\n## 1. Introduction\r\n\r\n`cmWalk` is a python script to walk the directory tree of a C/C++ project of embedded system to generate CMakeLists.txt files for building the executable.\r\n\r\n## 2. Usage\r\n\r\nusage: cmwalk.py [-h] input_dir\r\n\r\nA python script to generate CMakeLists.txt of a C/C++ project - 0.0.1.\r\n\r\npositional arguments:\r\n  input_dir   The base directory of C/C++ project.\r\n\r\noptional arguments:\r\n  -h, --help  show this help message and exit\r\n\r\n\r\n## 3. Configuration File\r\n\r\nYou can create a json file for each directory of project directory tree to configure how `cmwalk` to generate\r\n'CMakeLists.txt'. The configuration filename of `cmwalk` is `cmwalk.json`. \r\n\r\n### 3.1 Supported properties of `cmwalk.json`\r\n\r\n- **cmakeToolchainFile**\r\n\r\n  Specifying the toolchain file of the used compiler for current project. You can also set the used toolchain file\r\n  by invoking `cmake` with the command line parameter `-DCMAKE_TOOLCHAIN_FILE=path/to/file`.\r\n\r\n  Refer cmake documentation [cmake-toolchains(7)](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html) for the details.\r\n\r\n  Example:\r\n\r\n  ```json\r\n  {\r\n      \"cmakeToolchainFile\": \"gcc_arm_none_eabi_toolchain.cmake\"\r\n  }\r\n  ```\r\n\r\n  An example of toolchain file:\r\n\r\n  ```cmake\r\n  # refer https://cmake.org/Wiki/CMake_Cross_Compiling\r\n  #include(CMakeForceCompiler)    # cmake_force_c_compiler and cmake_force_cxx_compiler are deprecated.\r\n\r\n  set(CMAKE_SYSTEM_NAME Generic)\r\n  set(CMAKE_SYSTEM_VERSION 1)\r\n  set(CMAKE_SYSTEM_PROCESSOR \"armv7-m\")\r\n\r\n\r\n  # refer https://cmake.org/pipermail/cmake-developers/2016-February/027871.html\r\n  # about how to solve this problem: \"arm-none-eabi-gcc.exe\" is not able to compile a simple test program.\r\n  set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)\r\n\r\n  # find the cross compiler and associated tools that we need:\r\n  find_program(ARM_NONE_EABI_GCC arm-none-eabi-gcc)\r\n  find_program(ARM_NONE_EABI_GPP arm-none-eabi-g++)\r\n  find_program(ARM_NONE_EABI_OBJCOPY arm-none-eabi-objcopy)\r\n\r\n\r\n  macro(gcc_program_notfound progname)\r\n      message(\"**************************************************************************\\n\")\r\n      message(\" ERROR: the arm gcc program ${progname} could not be found\\n\")\r\n      if(CMAKE_HOST_SYSTEM_NAME STREQUAL \"Windows\" OR CMAKE_HOST_SYSTEM_NAME STREQUAL \"Linux\")\r\n          message(\" you can install the ARM GCC embedded compiler tools from:\")\r\n          message(\" https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads\")\r\n      elseif(CMAKE_HOST_SYSTEM_NAME STREQUAL \"Darwin\")\r\n          message(\" it is included in the arm-none-eabi-gcc package that you can install\")\r\n          message(\" with homebrew:\\n\")\r\n          message(\"   brew tap ARMmbed/homebrew-formulae\")\r\n          message(\"   brew install arm-none-eabi-gcc\")\r\n      endif()\r\n      message(\"\\n**************************************************************************\")\r\n      message(FATAL_ERROR \"missing program prevents build\")\r\n      return()\r\n  endmacro(gcc_program_notfound)\r\n\r\n  if(NOT ARM_NONE_EABI_GCC)\r\n      gcc_program_notfound(\"arm-none-eabi-gcc\")\r\n  endif()\r\n\r\n  if(NOT ARM_NONE_EABI_GPP)\r\n      gcc_program_notfound(\"arm-none-eabi-g++\")\r\n  endif()\r\n\r\n  if(NOT ARM_NONE_EABI_OBJCOPY)\r\n      gcc_program_notfound(\"arm-none-eabi-objcopy\")\r\n  endif()\r\n\r\n\r\n  set(CMAKE_C_COMPILER arm-none-eabi-gcc)\r\n  set(CMAKE_CXX_COMPILER arm-none-eabi-g++)\r\n\r\n  set(C_FAMILY_FLAGS_INIT \"-ffunction-sections -fdata-sections -g -fno-common -fmessage-length=0 --specs=nosys.specs --specs=nano.specs\")\r\n  set(CMAKE_C_FLAGS_INIT \"${C_FAMILY_FLAGS_INIT} -std=c99\")\r\n  set(CMAKE_CXX_FLAGS_INIT \"${C_FAMILY_FLAGS_INI} -std=c++11\")\r\n  set(CMAKE_ASM_FLAGS_INIT \"-fno-exceptions -fno-unwind-tables -x assembler-with-cpp\")\r\n  set(CMAKE_EXE_LINKER_FLAGS_INIT \"-Wl,-gc-sections,-print-memory-usage\")\r\n  ```\r\n\r\n- **cmakeCompilerOptionsFile**\r\n\r\n  Specifying a file that contains the additional compiler settings which be inclued in the top-level CMakeLists.txt file.\r\n\r\n  Example:\r\n\r\n  ```json\r\n  {\r\n      \"cmakeCompilerOptionsFile\": \"gcc_arm_none_eabi_opts.cmake\"\r\n  }\r\n  ```\r\n\r\n  An example of compiler option files for [GNU Arm Embedded Toolchain](https://developer.arm.com/open-source/gnu-toolchain/gnu-rm):\r\n\r\n  ```cmake\r\n  set(EXTRA_COMMON_FLAGS \"-mcpu=cortex-m4 -mthumb-interwork -mfloat-abi=hard -mfpu=fpv4-sp-d16 -DUSE_HAL_DRIVER -DSTM32F429xx\")\r\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${EXTRA_COMMON_FLAGS}\")\r\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${EXTRA_COMMON_FLAGS}\")\r\n\r\n  set(CMAKE_ASM_FLAGS \"${CMAKE_ASM_FLAGS} -mcpu=cortex-m4 -mthumb-interwork -mfloat-abi=hard -mfpu=fpv4-sp-d16\")\r\n\r\n  set(LINKER_SCRIPT ${CMAKE_SOURCE_DIR}/app/STM32F429ZITx_FLASH.ld)\r\n  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -Wl,-Map=${CMAKE_BINARY_DIR}/${PROJECT_NAME}.map -T${LINKER_SCRIPT}\")\r\n  ```\r\n\r\n- **sourceDirectories**\r\n\r\n   A list of source directories.\r\n\r\n   If `sourceDirectories` is specified in `cmwalk.json`, then only the specified directories will be included for parsing, other directories will be excluded.\r\n   If `sourceDirectories` does not exist but `ignoredDirectories` exist, then all the directories except those specified by `ignoredDirectories` will be excluded.\r\n\r\n   An example of specifying the source subdirectories for searching the source files:\r\n\r\n   ```json\r\n   {\r\n      \"sourceDirectories\": [\"app\", \"libs\"]\r\n   }\r\n   ```\r\n\r\n- **ignoredDirectories** - A list of ignored directories.\r\n\r\n   `sourceDirs` property has higher priority than `ignoredDirs` property. If both of `sourceDirs`\r\n   and `ignoredDirs` properties are specified in `cmwalk.json`, `ignoredDirs` property has no effect.\r\n\r\n   An example of excluding subdirectories for searching the source files:\r\n\r\n   ```json\r\n   {\r\n       \"ignoredDirs\": [\"docs\"]\r\n   }\r\n   ```\r\n\r\n- **ignoredFiles** - A list of ignored files.\r\n\r\n   An example of excluding a file from `cmake` build system:\r\n\r\n   ```json\r\n   {\r\n       \"ignoredFiles\": [\"cfg.h.template\"]\r\n   }\r\n   ```\r\n\r\n\r\n## 4. Example of generated CMakeLists.txt\r\n\r\nThis is an example of generated top-level `CMakeLists.txt`:\r\n\r\n```cmake\r\ncmake_minimum_required(VERSION 3.9)\r\n\r\n# set the toolchain file.\r\n# toolchain file should be set before \"project\" command.\r\n# the toolchain file can also be set via \"cmake -DCMAKE_TOOLCHAIN_FILE=path/to/file\".\r\nset(CMAKE_TOOLCHAIN_FILE gcc_arm_none_eabi_toolchain.cmake)\r\n\r\nproject(nucleo_f429zi_freertos_lwip)\r\nenable_language(C CXX ASM)\r\n\r\n# load and run the CMake code from the given file to specify project specific options.\r\ninclude(gcc_arm_none_eabi_opts.cmake)\r\n\r\n\r\n# export the executable target through a variable to CMakeLists.txt files in subdirectories.\r\n# update the dependent sources.\r\nadd_executable(nucleo_f429zi_freertos_lwip.elf\r\n    \"\"\r\n)\r\n\r\n# export the name of executable target via a variable to CMakeLists.txt files in subdirectories.\r\nset(CURRENT_EXE_NAME ${PROJECT_NAME}.elf)\r\n# load and run the CMake code from subdirectories for current target.\r\ninclude(app/CMakeLists.txt)\r\ninclude(libs/CMakeLists.txt)\r\n\r\n\r\n# generate the hex file from the built target.\r\nset(HEX_FILE ${PROJECT_NAME}.hex)\r\nadd_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD\r\n    COMMAND ${CMAKE_OBJCOPY} -O ihex $<TARGET_FILE:${PROJECT_NAME}.elf> ${HEX_FILE}\r\n    COMMENT \"Building ${HEX_FILE}...\")\r\n\r\n# generate the bin file from the built target.\r\nset(BIN_FILE ${PROJECT_NAME}.bin)\r\nadd_custom_command(TARGET ${PROJECT_NAME}.elf POST_BUILD\r\n    COMMAND ${CMAKE_OBJCOPY} -O binary $<TARGET_FILE:${PROJECT_NAME}.elf> ${BIN_FILE}\r\n    COMMENT \"Building ${BIN_FILE}...\")\r\n```\r\n\r\n\r\n## 5. References\r\n\r\n1. [Enhanced source file handling with target_sources() \u2013 Crascit](https://crascit.com/2016/01/31/enhanced-source-file-handling-with-target_sources/)\r\n2. [CLion for embedded development | CLion Blog](https://blog.jetbrains.com/clion/2016/06/clion-for-embedded-development/)\r\n\r\n\r\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/maxpeng/cmWalk",
    "keywords": "cmake",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cmwalk",
    "platform": "",
    "project_url": "https://pypi.org/project/cmwalk/",
    "release_url": "https://pypi.org/project/cmwalk/0.0.5a9/",
    "requires_dist": [
      "walkdir",
      "jinja2"
    ],
    "requires_python": "",
    "summary": "A python script to walk subdirectories of a C/C++ project of embedded system to generate CMakeLists.txt files for building the executable.",
    "version": "0.0.5a9"
  },
  "releases": {
    "0.0.5a7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "25d6c8d8c2626df5a88650a55739819a",
          "sha256": "881282ad914c4cb2cb06458908fc353be545663424244230825645214ffd5cb4"
        },
        "downloads": -1,
        "filename": "cmwalk-0.0.5a7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25d6c8d8c2626df5a88650a55739819a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 12173,
        "upload_time": "2017-12-21T16:32:53",
        "url": "https://files.pythonhosted.org/packages/11/7b/2a1d3ff67343f5cae9032863f5111551bde012f798343152061b131c85b7/cmwalk-0.0.5a7-py2.py3-none-any.whl"
      }
    ],
    "0.0.5a8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1b45d2489dac415060bd4fcaeda46ccd",
          "sha256": "3097b2598520fd4053ac7625147e508e43e31d2b95ad1cb4baf8168d4129361f"
        },
        "downloads": -1,
        "filename": "cmwalk-0.0.5a8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1b45d2489dac415060bd4fcaeda46ccd",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 17641,
        "upload_time": "2017-12-21T17:14:55",
        "url": "https://files.pythonhosted.org/packages/d3/22/b9376a54ec7910cea2bd3b71d3f5905c5e6298688a01f7d10e8473e993aa/cmwalk-0.0.5a8-py2.py3-none-any.whl"
      }
    ],
    "0.0.5a9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5145f6a7320e6fe7f091cd5e47a6d54a",
          "sha256": "d377d1cd49c95e2f77c314949d20f545468acd38f7e39e984de70ae708e2e79e"
        },
        "downloads": -1,
        "filename": "cmwalk-0.0.5a9-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5145f6a7320e6fe7f091cd5e47a6d54a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 17361,
        "upload_time": "2017-12-21T17:18:18",
        "url": "https://files.pythonhosted.org/packages/6f/92/095311bbe0cffe57cad61f2aa1b4c017ec598315673eedc3afc611813c37/cmwalk-0.0.5a9-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5145f6a7320e6fe7f091cd5e47a6d54a",
        "sha256": "d377d1cd49c95e2f77c314949d20f545468acd38f7e39e984de70ae708e2e79e"
      },
      "downloads": -1,
      "filename": "cmwalk-0.0.5a9-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5145f6a7320e6fe7f091cd5e47a6d54a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 17361,
      "upload_time": "2017-12-21T17:18:18",
      "url": "https://files.pythonhosted.org/packages/6f/92/095311bbe0cffe57cad61f2aa1b4c017ec598315673eedc3afc611813c37/cmwalk-0.0.5a9-py2.py3-none-any.whl"
    }
  ]
}