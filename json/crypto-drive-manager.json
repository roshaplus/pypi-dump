{
  "info": {
    "author": "Peter Odding",
    "author_email": "peter@peterodding.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Information Technology",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Topic :: Security :: Cryptography",
      "Topic :: System :: Filesystems",
      "Topic :: System :: Systems Administration",
      "Topic :: Utilities"
    ],
    "description": "crypto-drive-manager: Unlock all your encrypted drives with one pass phrase\n---------------------------------------------------------------------------\n\nThe ``crypto-drive-manager`` program allows you to safely, quickly and\nconveniently unlock an unlimited number of `LUKS encrypted devices`_ using a\nsingle pass phrase. You can think of it as a `key pass`_ for LUKS encrypted\ndevices. It works by creating a small (10 MB) encrypted file system inside a\nregular file (using a `loop device`_) and storing key files for the encrypted\ndevices of your choosing inside this encrypted file system. Each time you run\nthe program it temporarily unlocks the 10 MB encrypted file system and uses the\nkey files to unlock and mount encrypted devices that are present and not\nalready unlocked.\n\n.. contents::\n   :local:\n\nInstallation\n------------\n\nThe ``crypto-drive-manager`` program is written in Python and is available on\nPyPI_ which means installation should be as simple as::\n\n  $ pip install crypto-drive-manager\n\nThere's actually a multitude of ways to install Python packages (e.g. the `per\nuser site-packages directory`_, `virtual environments`_ or just installing\nsystem wide) and I have no intention of getting into that discussion here, so\nif this intimidates you then read up on your options before returning to these\ninstructions ;-).\n\nGetting started\n---------------\n\nThe ``crypto-drive-manager`` program doesn't have a configuration file because\nit looks at your system configuration to infer what it should do. You need to\ncreate or change ``/etc/crypttab`` in order to enable ``crypto-drive-manager``.\nAs an example here's my ``/etc/crypttab`` file::\n\n  # <target name>  <source device>                            <key file>                 <options>\n  internal-hdd     UUID=626f4560-cf80-4ed9-b211-ac263b41ca67  none                       luks\n  media-files      UUID=6d413429-f8d1-4d8e-8a3a-075603b8efdd  /mnt/keys/media-files.key  luks,noauto\n  mirror3          UUID=978d7a3a-c902-43e6-aa71-5654d406c247  /mnt/keys/mirror3.key      luks,noauto\n  mirror4          UUID=7a48e547-1dfa-4c6a-96e9-05842c87465d  /mnt/keys/mirror4.key      luks,noauto\n  mirror5          UUID=ac6aa22a-0c32-4bd9-829a-75316177affb  /mnt/keys/mirror5.key      luks,noauto\n  mirror6          UUID=00474636-6d6e-4ecc-a7d6-21b42d850ac6  /mnt/keys/mirror6.key      luks,noauto\n  mirror7          UUID=ec56dc10-1086-4f2b-808c-88995cb8b513  /mnt/keys/mirror7.key      luks,noauto\n\nYou can see why I don't want to manage all of these encrypted devices manually\nby entering pass phrases for each of them :-). Even though my root device\n(``internal-hdd``) is also encrypted, storing key files to unlock my encrypted\ndevices on my root device doesn't feel right because the key files will be\nexposed at all times.\n\nYou tell ``crypto-drive-manager`` to manage an encrypted device by setting the\nkey file (the third field in ``/etc/crypttab``) to a file located under the\nmount point used by ``crypto-drive-manager`` ( ``/mnt/keys`` by default). Every\ntime you run ``crypto-drive-manager`` it parses ``/etc/crypttab`` to find and\nunlock managed devices. The ``UUID=...`` definition in ``/etc/crypttab`` is\nused to check if the physical device exists in ``/dev/disk/by-uuid``. Because\nof this a source device definition with a ``UUID=...`` value is required.\n\nEach physical device that exists is initialized, unlocked and mounted. Device\ninitialization happens when the key file for the encrypted device doesn't exist\nyet: The key file is created with 4 KB of random bytes and installed as a key\non the encrypted device.\n\nThe end result is a program that requires a single pass phrase to unlock a\nvirtual keys device containing key files used to unlock a group of encrypted\ndevices. Once the encrypted devices have been unlocked the virtual keys device\nis unmounted and the keys are no longer available (except in memory, which\ncannot be avoided to the best of my knowledge).\n\nContact\n-------\n\nThe latest version of ``crypto-drive-manager`` is available on PyPI_ and\nGitHub_. For bug reports please create an issue on GitHub_. If you have\nquestions, suggestions, etc. feel free to send me an e-mail at\n`peter@peterodding.com`_.\n\nLicense\n-------\n\nThis software is licensed under the `MIT license`_.\n\n\u00a9 2015 Peter Odding.\n\n.. External references:\n.. _GitHub: https://github.com/xolox/python-crypto-drive-manager\n.. _key pass: http://en.wikipedia.org/wiki/Password_manager\n.. _loop device: http://en.wikipedia.org/wiki/Loop_device\n.. _LUKS encrypted devices: http://en.wikipedia.org/wiki/Linux_Unified_Key_Setup\n.. _MIT license: http://en.wikipedia.org/wiki/MIT_License\n.. _per user site-packages directory: https://www.python.org/dev/peps/pep-0370/\n.. _peter@peterodding.com: mailto:peter@peterodding.com\n.. _PyPI: https://pypi.python.org/pypi/crypto-drive-manager\n.. _virtual environments: http://docs.python-guide.org/en/latest/dev/virtualenvs/",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/xolox/python-crypto-drive-manager",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "crypto-drive-manager",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/crypto-drive-manager/",
    "release_url": "https://pypi.org/project/crypto-drive-manager/1.0/",
    "requires_python": null,
    "summary": "Unlock all your encrypted drives with one pass phrase.",
    "version": "1.0"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a49fca1e232c3c7e8f6b280157687b49",
          "sha256": "1f685c121a2fc827b60a19f5fde294d08f88d2eb452b11c0ff3eb7161c098583"
        },
        "downloads": 1777,
        "filename": "crypto-drive-manager-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a49fca1e232c3c7e8f6b280157687b49",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8426,
        "upload_time": "2015-02-21T01:51:48",
        "url": "https://files.pythonhosted.org/packages/1f/dc/62c63b6e4f613c098e51c1b633a20cd7968031ce8c3d2a486b0505a20dd6/crypto-drive-manager-1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a49fca1e232c3c7e8f6b280157687b49",
        "sha256": "1f685c121a2fc827b60a19f5fde294d08f88d2eb452b11c0ff3eb7161c098583"
      },
      "downloads": 1777,
      "filename": "crypto-drive-manager-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a49fca1e232c3c7e8f6b280157687b49",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8426,
      "upload_time": "2015-02-21T01:51:48",
      "url": "https://files.pythonhosted.org/packages/1f/dc/62c63b6e4f613c098e51c1b633a20cd7968031ce8c3d2a486b0505a20dd6/crypto-drive-manager-1.0.tar.gz"
    }
  ]
}