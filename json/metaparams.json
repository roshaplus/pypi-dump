{
  "info": {
    "author": "Daniel Rodriguez",
    "author_email": "danjrod@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development"
    ],
    "description": "metaparams\n==========\n\n.. image:: https://img.shields.io/pypi/v/metaparams.svg\n   :alt: PyPi Version\n   :scale: 100%\n   :target: https://pypi.python.org/pypi/metaparams/\n\n.. image:: https://img.shields.io/pypi/dm/metaparams.svg\n   :alt: PyPi Monthly Donwloads\n   :scale: 100%\n   :target: https://pypi.python.org/pypi/metaparams/\n\n.. image:: https://img.shields.io/pypi/l/metaparams.svg\n   :alt: License\n   :scale: 100%\n   :target: https://github.com/mementum/metaparams/blob/master/LICENSE\n\n.. image:: https://travis-ci.org/mementum/metaparams.png?branch=master\n   :alt: Travis-ci Build Status\n   :scale: 100%\n   :target: https://travis-ci.org/mementum/metaparams\n\n.. image:: https://readthedocs.org/projects/metaparams/badge/?version=latest\n   :alt: Documentation Status\n   :scale: 100%\n   :target: https://readthedocs.org/projects/metaparams/\n\n.. image:: https://img.shields.io/pypi/pyversions/metaparams.svg\n   :alt: Pytghon versions\n   :scale: 100%\n   :target: https://pypi.python.org/pypi/metaparams/\n\n``metaparams`` is a MetaClass/Class/Decorator infrastructure to define params\nwithout invoking objects and have them automatically parse/remove the ``kwargs``\npassed to the class in which they are intalled\n\nDocumentation\n=============\n\nRead the full documentation at readthedocs.org:\n\n  - `metaparams documentation <http://metaparams.readthedocs.org/en/latest/introduction.html>`_\n\nPython 2/3 Support\n==================\n\n  - Python 2.7\n  - Python 3.2/3.3/3.4/3.5\n\n  - It also works with pypy and pypy3\n\nInstallation\n============\n\nFrom pypi::\n\n  pip install metaparams\n\nFrom source:\n\n  - Place the *metaparams* directory found in the sources inside your project\n\nFeatures:\n=========\n\n  - ``metaparams`` decorator to params-enable any class\n\n  - ``ParamsBase`` a class from which to subclass to also be params-enabled\n\n  - ``MetaParams`` a MetaClass for more complex usage pattern\n\n\nQuick Usage\n===========\n\nThe example below is available in the source as a single file test. It's broken\ndown into parts to ease up reading::\n\n    from __future__ import (absolute_import, division, print_function,\n                            unicode_literals)\n\n\n    from metaparams import metaparams, MetaParams, ParamsBase\n\n    print('=' * 50)\n    print('Creating A with params with DECORATOR')\n\n\n    @metaparams\n    class A(object):\n\n        params = (\n            ('p1', True, 'doc'),\n            ('p2', 99),\n        )\n\n        def __init__(self):\n            pass\n\n    print('-- Instantiating A with no kwargs')\n    a = A()\n\n    # Defined params are reachable below the attribute params\n    print('a.params.p1:', a.params.p1)\n    print('a.params.p2:', a.params.p2)\n\n    # Modification of default values can be checked\n    print('Checking if p1 has default value:', a.params._isdefault('p1'))\n\n    print('=' * 50)\n    print('Creating B as subclass from A, changing p1, adding p3')\n\nThis first part produces the following output::\n\n    ==================================================\n    Creating A with params with DECORATOR\n    -- Instantiating A with no kwargs\n    a.params.p1: True\n    a.params.p2: 99\n    Checking if p1 has default value: True\n\nThe 2nd part::\n\n    # Inheriting with modification an extension\n    class B(A):\n\n        params = (\n            ('p1', False,),  # changed default value of p1\n            ('p3', None),  # new parameter\n        )\n\n        def __init__(self):\n            pass\n\n    print('-- Instantiating B with no kwargs')\n    b = B()\n\n    # Defined params are reachable below the attribute params\n    print('b.param.p1 (default changed):', b.params.p1)\n    print('b.params.p2 (same default):', b.params.p2)\n    print('b.params.p3 (new param):', b.params.p3)\n\n    # Modification of default values can be checked\n    print('Checking if p1 has default value:', b.params._isdefault('p1'))\n\n    # Over the class we can also check defaults\n    # B has different default value for p1 than A\n    print('Checking default in B for p1 is not the same as default in A:',\n          b.params.p1 != A.params._default('p1'))\n\nOutput::\n\n    ==================================================\n    Creating B as subclass from A, changing p1, adding p3\n    -- Instantiating B with no kwargs\n    b.param.p1 (default changed): False\n    b.params.p2 (same default): 99\n    b.params.p3 (new param): None\n    Checking if p1 has default value: True\n    Checking default in B for p1 is not the same as default in A: True\n\n\n3rd part::\n\n    print('=' * 50)\n    print('Recreating A with Decorator - name is \"kargs\" and short alias')\n\n\n    # The name of the attribute 'params' can be changed\n    # and a shorter alias (PEP-8 ...) added\n    @metaparams(_pname='kargs', _pshort=True)\n    class A(object):\n\n        kargs = (\n            ('p1', True, 'doc'),\n            ('p2', 99),\n        )\n\n        def __init__(self):\n            pass\n\n    print('-- Instantiating A with no kwargs')\n    a = A()\n\n    # Defined params are reachable below the attribute params\n    print('Checking if a params are reachable over \"kargs\"')\n    print('a.kargs.p1:', a.kargs.p1)\n    print('a.kargs.p2:', a.kargs.p2)\n\n    print('Checking if a params are reachable over shorter alias \"k\"')\n    print(a.k.p1)\n    print(a.k.p2)\n\n    # Modification of default values can be checked\n    print('Checking if p1 has default value:', a.kargs._isdefault('p1'))\n\nOutput::\n\n    ==================================================\n    Recreating A with Decorator - name is \"kargs\" and short alias\n    -- Instantiating A with no kwargs\n    Checking if a params are reachable over \"kargs\"\n    a.kargs.p1: True\n    a.kargs.p2: 99\n    Checking if a params are reachable over shorter alias \"k\"\n    True\n    99\n    Checking if p1 has default value: True\n\n\n4th part::\n\n    print('=' * 50)\n    print('Recreating A with new attr for params - \"kargs\" and short alias')\n    print('USING THE METACLASS')\n\n\n    # The metaclass works also so ... but it's a metaclass\n    class A(MetaParams.as_metaclass(_pname='kargs', _pshort=True)):\n\n        kargs = (\n            ('p1', True, 'doc'),\n            ('p2', 99),\n        )\n\n        def __init__(self):\n            pass\n\n    a = A()\n\n    # Defined params are reachable below the attribute params\n    print('Checking if a params are reachable over \"kargs\"')\n    print('a.kargs.p1:', a.kargs.p1)\n    print('a.kargs.p2:', a.kargs.p2)\n\n    print('Checking if a params are reachable over shorter alias \"k\"')\n    print(a.k.p1)\n    print(a.k.p2)\n\n    # Modification of default values can be checked\n    print('Checking if p1 has default value:', a.kargs._isdefault('p1'))\n\nOutput::\n\n    ==================================================\n    Recreating A with new attr for params - \"kargs\" and short alias\n    USING THE METACLASS\n    Checking if a params are reachable over \"kargs\"\n    a.kargs.p1: True\n    a.kargs.p2: 99\n    Checking if a params are reachable over shorter alias \"k\"\n    True\n    99\n    Checking if p1 has default value: True\n\n\nFinal part::\n\n    print('=' * 50)\n    print('Recreating A with ParamsBase ... nothing can be changed')\n\n    # And finally an already cooked base class with no customization\n    class A(ParamsBase):\n\n        params = (\n            ('p1', True, 'doc'),\n            ('p2', 99),\n        )\n\n        def __init__(self):\n            pass\n\n    a = A()\n\n    # Defined params are reachable below the attribute params\n    print('a.params.p1:', a.params.p1)\n    print('a.params.p2:', a.params.p2)\n\n    # Modification of default values can be checked\n    print('Checking if p1 has default value:', a.params._isdefault('p1'))\n\nOutput::\n\n    ==================================================\n    Recreating A with ParamsBase ... nothing can be changed\n    a.params.p1: True\n    a.params.p2: 99\n    Checking if p1 has default value: True",
    "docs_url": null,
    "download_url": "https://github.com/mementum/metaparams/tarball/1.0.4",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/mementum/metaparams",
    "keywords": "metaclass,development",
    "license": "GPLv3+",
    "maintainer": null,
    "maintainer_email": null,
    "name": "metaparams",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/metaparams/",
    "release_url": "https://pypi.org/project/metaparams/1.0.4/",
    "requires_python": null,
    "summary": "Declarative parameters definition for classes",
    "version": "1.0.4"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "76218290398aae139bd148d5dabb125e",
          "sha256": "bfb83447e43620e23aa54dd45115d6d12bb25a08bc6a8c1987bc462b46d78f12"
        },
        "downloads": 514,
        "filename": "metaparams-1.0.0.zip",
        "has_sig": false,
        "md5_digest": "76218290398aae139bd148d5dabb125e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14115,
        "upload_time": "2015-10-25T11:23:01",
        "url": "https://files.pythonhosted.org/packages/30/e8/1afb846b3e6aaf7c80c650ced1b3fcba99077cf39452f4a673e63ff62e5d/metaparams-1.0.0.zip"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cbd2d386e8adce54737b3be34393e2e3",
          "sha256": "928f2d674c5b4e64fa7bd5d6d938b0bcc4b65d394d4df2724d243301cacb30d9"
        },
        "downloads": 519,
        "filename": "metaparams-1.0.1.zip",
        "has_sig": false,
        "md5_digest": "cbd2d386e8adce54737b3be34393e2e3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14723,
        "upload_time": "2015-10-31T22:25:10",
        "url": "https://files.pythonhosted.org/packages/c8/0f/4c8b87223a7ec02eb85e9a52aa80cfe497b9fc75d06cb3f3d4508c83fac2/metaparams-1.0.1.zip"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "54588704f2883699de3fed5e522cf167",
          "sha256": "ced966921b121745f9e1ad094160b0f57f110bfb7183116bff500e2000efd39d"
        },
        "downloads": 546,
        "filename": "metaparams-1.0.2.zip",
        "has_sig": false,
        "md5_digest": "54588704f2883699de3fed5e522cf167",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14827,
        "upload_time": "2015-10-31T23:32:33",
        "url": "https://files.pythonhosted.org/packages/ab/de/191044087059d7a0caf4543894cbe15936be477c5bc2521665abc7631064/metaparams-1.0.2.zip"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e27b0779503678a87ed89f6fffa45074",
          "sha256": "d9e35d563a460ffc48959c661d80fdc093cca81bc2f003fbaaf2771340b28a78"
        },
        "downloads": 525,
        "filename": "metaparams-1.0.3.zip",
        "has_sig": false,
        "md5_digest": "e27b0779503678a87ed89f6fffa45074",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15413,
        "upload_time": "2015-11-01T06:50:47",
        "url": "https://files.pythonhosted.org/packages/33/b9/086eec2231063861b4d4a7307017b65f67e61dfab117c477c4c247fbfc57/metaparams-1.0.3.zip"
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "10247ccfefbf9d8d9a87ba6162e5e9b9",
          "sha256": "5a16e968dfff70e2f52b2eceb27dc3f99ee4332d49f9de6c8b984e6591d96f9c"
        },
        "downloads": 949,
        "filename": "metaparams-1.0.4.zip",
        "has_sig": false,
        "md5_digest": "10247ccfefbf9d8d9a87ba6162e5e9b9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15630,
        "upload_time": "2015-11-08T11:50:20",
        "url": "https://files.pythonhosted.org/packages/44/7f/dcc47466c59338a0637f7980ff8a5dc11acd68f215c8449ccd25f30b9e16/metaparams-1.0.4.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "10247ccfefbf9d8d9a87ba6162e5e9b9",
        "sha256": "5a16e968dfff70e2f52b2eceb27dc3f99ee4332d49f9de6c8b984e6591d96f9c"
      },
      "downloads": 949,
      "filename": "metaparams-1.0.4.zip",
      "has_sig": false,
      "md5_digest": "10247ccfefbf9d8d9a87ba6162e5e9b9",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 15630,
      "upload_time": "2015-11-08T11:50:20",
      "url": "https://files.pythonhosted.org/packages/44/7f/dcc47466c59338a0637f7980ff8a5dc11acd68f215c8449ccd25f30b9e16/metaparams-1.0.4.zip"
    }
  ]
}