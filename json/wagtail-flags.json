{
  "info": {
    "author": "CFPB",
    "author_email": "tech@cfpb.gov",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
      "License :: Public Domain",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# Wagtail-Flags\n\n[![Build Status](https://travis-ci.org/cfpb/wagtail-flags.svg?branch=master)](https://travis-ci.org/cfpb/wagtail-flags)\n[![Coverage Status](https://coveralls.io/repos/github/cfpb/wagtail-flags/badge.svg?branch=master)](https://coveralls.io/github/cfpb/wagtail-flags?branch=master)\n\nFeature flags allow you to toggle functionality in both Django settings and the Wagtail or Django admin based on configurable conditions.\n\n![Feature flags in the Wagtail admin](https://raw.githubusercontent.com/cfpb/wagtail-flags/master/screenshot_list.png)\n\n- [Dependencies](#dependencies)\n- [Installation](#installation)\n- [Concepts](#concepts)\n- [Usage](#usage)\n    - [Overview](#overview)\n    - [Adding Flags](#adding-flags)\n        - [Defining flags](#defining-flags)\n        - [Built-in conditions](#built-in-conditions)\n- [API](#api)\n    - [Flag state](#flag-state)\n    - [Flag decorators](#flag-decorators)\n    - [Flagged URLs](#flagged-urls)\n    - [Django templates](#django-templates)\n    - [Jinja2 templates](#jinja2-templates)\n    - [Conditions](#conditions)\n- [Getting help](#getting-help)\n- [Getting involved](#getting-involved)\n- [Licensing](#licensing)\n- [Credits and references](#credits-and-references)\n\n## Dependencies\n\n- Django 1.8+\n- Wagtail 1.8+\n- Python 2.7+, 3.6+\n\n## Installation\n\n1. Install wagtail-flags using pip:\n\n```shell\npip install wagtail-flags\n```\n\n2. Add `flags` as an installed app in your Django `settings.py`:\n\n ```python\n INSTALLED_APPS = (\n     ...\n     'flags',\n     ...\n )\n```\n\n## Concepts\n\nFeature flags in Wagtail-Flags are identified by simple strings that are enabled when the conditions they are associated with are met. These flags can be used to wrap code and template content that should only be used when a flag is enabled or disabled.\n\nConditions determine whether a flag is enabled or disabled by comparing a defined expected value of some kind with the value at the time the flag is checked. In many cases, the flag is checked during a request, and some piece of the request's metadata is what is compared. For example, a feature flag that is enabled for a specific Wagtail Site would be enabled if the request's site matches the condition's site.\n\n## Usage\n\n### Overview\n\nTo use Wagtail-Flags you first need to define the flag, use the flag in code, and define conditions for the flag to be enabled.\n\nFirst, define the flag in Django `settings.py`:\n\n```python\nFLAGS = {\n    'MY_FLAG': {}\n}\n```\n\nThen use the flag in a Django template (`mytemplate.html`):\n\n```django\n{% load feature_flags %}\n{% flag_enabled 'MY_FLAG' as my_flag %}\n\n{% if my_flag %}\n  <div class=\"flagged-banner\">\n    I\u2019m the result of a feature flag.   \n  </div>\n{% endif %}\n```\n\nConfigure a URL for that template (`urls.py`):\n\n```python\nfrom django.conf.urls import url\nfrom django.views.generic.base import TemplateView\n\nurlpatterns = [\n    url(r'^/mypage$', TemplateView.as_view(template_name='mytemplate.html'),\n]\n```\n\nThen in the Wagtail admin add conditions for the flag in \"Settings\", \"Flags\":\n\n![Creating conditions in the Wagtail admin](https://raw.githubusercontent.com/cfpb/wagtail-flags/master/screenshot_create.png)\n\n\nThen visiting the URL `/mypage?enable_my_flag=True` should show you the flagged `<div>` in the template.\n\n### Adding flags\n\n#### Defining flags\n\nFlags are defined in Django settings with the conditions in which they are enabled.\n\n```python\nFLAGS = {\n  'FLAG_WITH_EMPTY_CONDITIONS': {}\n  'MY_FLAG': {\n    'condition name': 'value flag is expected to match to be enabled',\n    'user': 'lady.liberty'\n  }\n}\n```\n\nThe set of conditions can be none (flag will never be enabled), one (only condition that has to be met for the flag to be enabled), or many (all have to be met for the flag to be enabled).\n\nAdditional conditions can be added in the Django or Wagtail admin for any defined flag (illustrated in [Usage](#usage)). Conditions added in the Django or Wagtail admin can be changed without restarting Django, conditions defined in `settings.py` cannot.\n\n#### Built-in conditions\n\nWagtail-Flags comes with the following conditions built-in:\n\n##### `boolean`\n\nA simple boolean true/false intended to enable or disable a flag explicitly. The state of the flag evaluates to the value of the boolean condition.\n\n```python\nFLAGS = {'MY_FLAG': {'boolean': True}}\n```\n\n##### `user`\n\nAllows a flag to be enabled for the username given as the condition's value.\n\n```python\nFLAGS = {'MY_FLAG': {'user': 'jane.doe'}}\n```\n\n##### `anonymous`\n\nAllows a flag to be either enabled or disabled depending on the condition's boolean value.\n\n```python\nFLAGS = {'MY_FLAG': {'anonymous: False}}\n```\n\n##### `parameter`\n\nAllows a flag to be enabled based on a GET parameter with the name given as the condition's value.\n\n```python\nFLAGS = {'MY_FLAG': {'parameter': 'my_flag_param'}}\n```\n\n##### `path`\n\nAllows a flag to be enabled if the request's path matches the condition value.\n\n```python\nFLAGS = {'MY_FLAG': {'path': '/flagged/path'}}\n```\n\n##### `site`\n\nAllows a flag to be enabled for a Wagtail site that matches the hostname and port in the condition value.\n\n```python\nFLAGS = {'MY_FLAG': {'site': 'staging.mysite.com'}}\n```\n\n##### `after date`\n\nAllows a flag to be enabled after a given date (and time) given in [ISO 8601 format](https://en.wikipedia.org/wiki/ISO_8601).\n\n```python\nFLAGS = {'MY_FLAG': {'after date': '2017-06-01T12:00'}}\n```\n\n## API\n\n### Flag state\n\n```python\nfrom flags.state import (\n    flag_state,\n    flag_enabled,\n    flag_disabled,\n)\n```\n\n#### `flag_state(flag_name, **kwargs)`\n\nReturn the value for the flag (`True` or `False`) by passing kwargs to its conditions.\n\n#### `flag_enabled(flag_name, **kwargs)`\n\nReturns `True` if a flag is enabled by passing kwargs to its conditions, otherwise returns `False`.\n\n```python\nif flag_enabled('MY_FLAG', request=a_request):\n\tprint(\"My feature flag is enabled\")\n```\n\n#### `flag_disabled(flag_name, **kwargs)`\n\nReturns `True` if a flag is disabled by passing kwargs to its conditions, otherwise returns `False`.\n\n```python\nif flag_disabled('MY_FLAG', request=a_request):\n\tprint(\u201cMy feature flag is disabled\u201d)\n```\n\n### Flag decorators\n\nDecorators are provided for use with Django views and conditions that take a `request` argument. The default behavior is to return a 404 if a callable fallback is not given.\n\n```python\nfrom flags.decorators import (\n    flag_check,\n    flag_required,\n)\n```\n\n#### `flag_check(flag_name, state, fallback=None, **kwargs)`\n\nCheck that a given flag has the given state. If the state does not match, perform the fallback.\n\n**Note**, because flags that do not exist are taken to be `False` by default, `@flag_check('MY_FLAG', False)` and `@flag_check('MY_FLAG', None)` will both succeed if `MY_FLAG` does not exist.\n\n```python\nfrom flags.decorators import flag_check\n\n@flag_check('MY_FLAG', True)\ndef view_requiring_flag(request):\n    return HttpResponse('flag was set')\n\n@flag_check('MY_OTHER_FLAG', False)\ndef view_when_flag_is_not_set(request):\n    return HttpResponse('flag was set')\n\ndef other_view(request):\n    return HttpResponse('flag was not set')\n\n@flag_check('MY_FLAG_WITH_FALLBACK', True, fallback=other_view)\ndef view_with_fallback(request):\n    return HttpResponse('flag was set')\n```\n\n#### `flag_required(flag_name, fallback_view=None, pass_if_set=True)`\n\nRequire the given flag to be enabled.\n\n```python\nfrom flags.decorators import flag_required\n\n@flag_required('MY_FLAG')\ndef view_requiring_flag(request):\n    return HttpResponse('flag was set')\n\ndef other_view(request):\n    return HttpResponse('flag was not set')\n\n@flag_required('MY_FLAG_WITH_FALLBACK', fallback_view=other_view)\ndef view_with_fallback(request):\n    return HttpResponse('flag was set')\n```\n\n### Flagged URLs\n\n```python\nfrom flags.urls import flagged_url, flagged_urls\n```\n\nFlagged URLs are an alternative to [flagging views with decorators](https://github.com/cfpb/wagtail-flags#flag_checkflag_name-state-fallbacknone-kwargs).\n\n#### `flagged_url(flag_name, regex, view, kwargs=None, name=None, state=True, fallback=None)`\n\nMake a URL depend on the state of a feature flag. `flagged_url()` can be used in place of Django's `url()`.\n\nThe `view` and the `fallback` can both be a set of `include()`ed patterns but any matching URL patterns in the includes must match *exactly* in terms of regular expression, keyword arguments, and name, otherwise a `404` may be unexpectedly raised. \n\nIf a `fallback` is not given the flagged url will raise a `404` if the flag state does not match the required `state`. \n\n```python\nurlpatterns = [\n    flagged_url('MY_FLAG', r'^an-url$', view_requiring_flag, state=True),\n    flagged_url('MY_FLAG_WITH_FALLBACK', r'^another-url$', view_with_fallback,\n                state=True, fallback=other_view)\n    flagged_url('MY_FLAGGED_INCLUDE', r'^myapp$', include('myapp.urls'),\n                state=True, fallback=other_view)\n    flagged_url('MY_NEW_APP_FLAG', r'^mynewapp$', include('mynewapp.urls'),\n                state=True, fallback=include('myoldapp.urls'))\n]\n```\n\n#### `flagged_urls(flag_name, state=True, fallback=None)`\n\nFlag multiple URLs in the same context. Returns function that can be used in place of Django's `url()` that wraps `flagged_url()`. Can take an optional fallback view that will apply to all urls.\n\n```python\nwith flagged_urls('MY_FLAG') as url:\n    flagged_url_patterns = [\n        url(r'^an-url$', view_requiring_flag),\n    ]\n\nurlpatterns = urlpatterns + flagged_url_patterns\n```\n\n### Django templates\n\nWagtail-Flags provides a template tag library that can be used to evaluate flags in Django templates.\n\n```django\n{% load feature_flags %}\n```\n\n#### `flag_enabled`\n\nReturns `True` if a flag is enabled by passing the current request to its conditions, otherwise returns `False`.\n\n```django\n{% flag_enabled 'MY_FLAG' as my_flag %}\n{% if my_flag %}\n  <div class=\"m-global-banner\">\n    I\u2019m the result of a feature flag.   \n  </div>\n{% endif %}\n```\n\n#### `flag_disabled`\n\nReturns `True` if a flag is disabled by passing the current request to its conditions, otherwise returns `False`.\n\n```django\n{% flag_disabled 'MY_FLAG' as my_flag %}\n{% if my_flag %}\n  <div class=\"m-global-banner\">\n    I\u2019m the result of a feature flag that is not enabled.\n  </div>\n{% endif %}\n```\n\n### Jinja2 templates\n\nWagtail-Flags provides template functions that can be added to a Jinja2 environment and subsequently used in templates.\n\n```python\nfrom flags.template_functions import (\n    flag_enabled,\n    flag_disabled\n)\n\n...\n\nenv.globals.update(\n    flag_enabled=flag_enabled,\n    flag_disabled=flag_disabled\n)\n```\n\n#### `flag_enabled`\n\nReturns `True` if a flag is enabled by for the given request, otherwise returns `False`.\n\n```jinja\n{% if flag_enabled('MY_FLAG', request) %}\n  <div class=\"m-global-banner\">\n    I\u2019m the result of a feature flag.   \n  </div>\n{% endif %}\n```\n\n#### `flag_disabled`\n\nReturns `True` if a flag is disabled by passing the current request to its conditions, otherwise returns `False`.\nReturns `True` if a flag is disabled by for the given request, otherwise returns `False`.\n\n```jinja\n{% if flag_disabled('MY_FLAG', request) %}\n  <div class=\"m-global-banner\">\n    I\u2019m the result of a feature flag that is not enabled.\n  </div>\n{% endif %}\n```\n\n\n### Conditions\n\nConditions are functions that take a configured value and possible keyword arguments and determines whether the given arguments are equivalent to the value. Conditions are registered with a unique name that is exposed to users in Django settings and the Django and Wagtail admin.\n\n```python\nfrom flags import conditions\n```\n\n#### `conditions.register(condition_name, fn=None)`\n\nRegister a new condition, either as a decorator:\n\n```python\nfrom flags import conditions\n\n@conditions.register('path')\ndef path_condition(path, request=None, **kwargs):\n    return request.path.startswith(path)\n```\n\nOr as a function call:\n\n```python\ndef path_condition(path, request=None, **kwargs):\n    return request.path.startswith(path)\n\nconditions.register('path', fn=path_condition)\n```\n\n#### `conditions.RequiredForCondition`\n\nException intended to be raised when a condition is not given a keyword argument it requires for evaluation.\n\n```python\n@conditions.register('path')\ndef path_condition(path, request=None, **kwargs):\n    if request is None:\n        raise conditions.RequiredForCondition(\n            \"request is required for condition 'path'\")\n\n    return request.path.startswith(path)\n```\n\n\n## Getting help\n\nPlease add issues to the [issue tracker](https://github.com/cfpb/wagtail-flags/issues).\n\n## Getting involved\n\nGeneral instructions on _how_ to contribute can be found in [CONTRIBUTING](CONTRIBUTING.md).\n\n## Licensing\n1. [TERMS](TERMS.md)\n2. [LICENSE](LICENSE)\n3. [CFPB Source Code Policy](https://github.com/cfpb/source-code-policy/)\n\n## Credits and references\n\n1. Forked from [cfgov-refresh](https://github.com/cfpb/cfgov-refresh/tree/master/cfgov/flags)\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/cfpb/wagtail-flags",
    "keywords": "",
    "license": "CC0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wagtail-flags",
    "platform": "",
    "project_url": "https://pypi.org/project/wagtail-flags/",
    "release_url": "https://pypi.org/project/wagtail-flags/2.0.7/",
    "requires_dist": [
      "flake8 (>=2.2.0); extra == 'testing'",
      "coverage (>=3.7.0); extra == 'testing'",
      "mock (>=2.0.0); extra == 'testing'",
      "wagtail (<1.11,>=1.8)",
      "Django (<1.12,>=1.8)"
    ],
    "requires_python": "",
    "summary": "Feature flags for Wagtail sites",
    "version": "2.0.7"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f11b75c5d70e3bad9d16aeec953e10c1",
          "sha256": "34f00a67b8a8b297e8e7e8dadaee586e173f2742a2decb9124672c237a35a572"
        },
        "downloads": -1,
        "filename": "wagtail-flags-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f11b75c5d70e3bad9d16aeec953e10c1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8162,
        "upload_time": "2017-02-28T20:22:00",
        "url": "https://files.pythonhosted.org/packages/cb/21/5be1c663ff12f675f306836d314dd3eb7935cb845808583d5d71acae8612/wagtail-flags-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b618f95686356a77454e21b7a58e14cd",
          "sha256": "367d3979311ee51978e3e5167df5d5265ccbc2be833f53022ca16e3d6b5cdf76"
        },
        "downloads": -1,
        "filename": "wagtail-flags-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b618f95686356a77454e21b7a58e14cd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14560,
        "upload_time": "2017-03-07T15:49:57",
        "url": "https://files.pythonhosted.org/packages/60/cf/320487d103091d452f94f2fc87f1c95d4f43e722405f501afafd8345c7c3/wagtail-flags-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1be56ad973555970a91418e3e6fdb7ac",
          "sha256": "5a38701c82e16c1578311adfe96de6c9814e79ec94f9649d1f464b18c6a33fc2"
        },
        "downloads": -1,
        "filename": "wagtail-flags-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1be56ad973555970a91418e3e6fdb7ac",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1396098,
        "upload_time": "2017-03-07T19:14:38",
        "url": "https://files.pythonhosted.org/packages/c5/c5/ed8c7d0da9a5a70dd83ee79c586e9f969ac3e34f30c32fca180098085577/wagtail-flags-1.0.2.tar.gz"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "25b650f4a6f508405c406a2baac81b95",
          "sha256": "4e8e66fdbc1c725f18b38e947ea4b727329d39691dc6923a862740c9f26027af"
        },
        "downloads": -1,
        "filename": "wagtail-flags-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "25b650f4a6f508405c406a2baac81b95",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14849,
        "upload_time": "2017-04-18T10:59:25",
        "url": "https://files.pythonhosted.org/packages/b5/f4/282f70546df55958e48bbdbef7002ad6465b8ede604d5cc78bba36832908/wagtail-flags-1.0.3.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "33ddb783a863fb0c34c55ebf513105d3",
          "sha256": "0dd3b1216acad9050d538012fda6dbfc5a4af8b84e6cbc6a8dad1b931e0f7bf7"
        },
        "downloads": -1,
        "filename": "wagtail-flags-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "33ddb783a863fb0c34c55ebf513105d3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2810789,
        "upload_time": "2017-05-05T13:37:57",
        "url": "https://files.pythonhosted.org/packages/a0/6f/9f9b58fe7d69cc7d3e69c0eba3d9bc086d6e831d02df933c4d94c6977ea9/wagtail-flags-2.0.0.tar.gz"
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1e5d75b87b7dd7ac4c200b497335fee6",
          "sha256": "06bc6752a0dd82043690c1e3b2b15536b868ea079152c6c7b24b925f30224e79"
        },
        "downloads": -1,
        "filename": "wagtail-flags-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1e5d75b87b7dd7ac4c200b497335fee6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23064,
        "upload_time": "2017-05-09T13:03:43",
        "url": "https://files.pythonhosted.org/packages/03/3f/90b2b10f61dca97cd8e1ee20440c9c36333ee9c5f5efabb07e459bd2e058/wagtail-flags-2.0.1.tar.gz"
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8a6927701c473ee2b4954441ec3e4662",
          "sha256": "d83f42f14c3ab806ab926f0c1d43d4110ac9cd9cd5b3a07b5371b874ebdeec90"
        },
        "downloads": -1,
        "filename": "wagtail-flags-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8a6927701c473ee2b4954441ec3e4662",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23632,
        "upload_time": "2017-05-15T20:40:10",
        "url": "https://files.pythonhosted.org/packages/b3/a3/0b18e0cd6ddd31ef10bc5e87c053b76c860b72e9315afc4bae33d556a5bc/wagtail-flags-2.0.2.tar.gz"
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d325efe1a2c673258d417a49991aef96",
          "sha256": "2078d10f37354f075abd74814e66fa2e4e15918425d8c03f7360c8917f6e9ddc"
        },
        "downloads": -1,
        "filename": "wagtail-flags-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d325efe1a2c673258d417a49991aef96",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23834,
        "upload_time": "2017-05-20T02:54:43",
        "url": "https://files.pythonhosted.org/packages/30/fb/40f92e116455d88e51720e22140b73936c8aa684c226ba43732d17757e3c/wagtail-flags-2.0.3.tar.gz"
      }
    ],
    "2.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "beca22460e138e9b2d2555e101004a04",
          "sha256": "9f682a715ab778b7be6113a741416e17730dc7c0d9f4114ca6b100687ab5a2bc"
        },
        "downloads": -1,
        "filename": "wagtail-flags-2.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "beca22460e138e9b2d2555e101004a04",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24289,
        "upload_time": "2017-06-12T13:40:01",
        "url": "https://files.pythonhosted.org/packages/a8/e2/17a074c22a0e35bef917fb5e4da71e26e08c3bed91f13bf0b8a1af19a079/wagtail-flags-2.0.4.tar.gz"
      }
    ],
    "2.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "35013b0e6997de1d814299db6441eebf",
          "sha256": "1cc5a33badc1b0d621d611c5a0aac511ecaf9f8996b226153cd8b0cad4a14ce4"
        },
        "downloads": -1,
        "filename": "wagtail-flags-2.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "35013b0e6997de1d814299db6441eebf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25205,
        "upload_time": "2017-07-17T13:59:23",
        "url": "https://files.pythonhosted.org/packages/2c/58/f11aa54bc03d7324a5d523cf1e4847657dce1a9d843d46611b917418fc69/wagtail-flags-2.0.5.tar.gz"
      }
    ],
    "2.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d131407126793d99cb62c51d3783ac22",
          "sha256": "50e6ff44b313e9353cf9da79cb05da5fc3fd3313867fd6721ebeb17d20a05840"
        },
        "downloads": -1,
        "filename": "wagtail_flags-2.0.6-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "d131407126793d99cb62c51d3783ac22",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 36025,
        "upload_time": "2017-10-26T17:01:59",
        "url": "https://files.pythonhosted.org/packages/95/8a/6ce7f55ed08bf8c671997b485ac074d483750dc5d7edbd68aa009f178a75/wagtail_flags-2.0.6-py2-none-any.whl"
      }
    ],
    "2.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "674b83a07777cab85a62eca45f1fa401",
          "sha256": "d63fd4ce31d35980644aea5662dcd1119cbf29781e08bc97ce2fc6f2d729533c"
        },
        "downloads": -1,
        "filename": "wagtail_flags-2.0.7-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "674b83a07777cab85a62eca45f1fa401",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 36624,
        "upload_time": "2017-12-07T14:43:04",
        "url": "https://files.pythonhosted.org/packages/04/6c/96753c0c36e5fb9ce12518136d72aa2ff5873650f8daf635bb7fc20e85db/wagtail_flags-2.0.7-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "21d52ed1a9fa66dc06d3d7cd884d38b9",
          "sha256": "07b153217f7c36b9f2c0abb5c5fa7491b233cf4be5487a263d203b6129f2f50e"
        },
        "downloads": -1,
        "filename": "wagtail_flags-2.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "21d52ed1a9fa66dc06d3d7cd884d38b9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 36585,
        "upload_time": "2017-12-07T14:43:06",
        "url": "https://files.pythonhosted.org/packages/6c/b3/8845dfa12c66c53bf0a579bddab1122e666641ca7bd884d8df8bd6de1e7c/wagtail_flags-2.0.7-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9fb61e66db33e16f9afa67750d4e22aa",
          "sha256": "16bfc22e800ea5270b5c2fd5a4470dec27b8e3513a5dae030ab017df7ddd5590"
        },
        "downloads": -1,
        "filename": "wagtail-flags-2.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "9fb61e66db33e16f9afa67750d4e22aa",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24074,
        "upload_time": "2017-12-07T14:43:08",
        "url": "https://files.pythonhosted.org/packages/6e/90/72f14fb5109123430e50d44b4e0c6e4e681e0211dae1532ea264d8dff282/wagtail-flags-2.0.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "674b83a07777cab85a62eca45f1fa401",
        "sha256": "d63fd4ce31d35980644aea5662dcd1119cbf29781e08bc97ce2fc6f2d729533c"
      },
      "downloads": -1,
      "filename": "wagtail_flags-2.0.7-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "674b83a07777cab85a62eca45f1fa401",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 36624,
      "upload_time": "2017-12-07T14:43:04",
      "url": "https://files.pythonhosted.org/packages/04/6c/96753c0c36e5fb9ce12518136d72aa2ff5873650f8daf635bb7fc20e85db/wagtail_flags-2.0.7-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "21d52ed1a9fa66dc06d3d7cd884d38b9",
        "sha256": "07b153217f7c36b9f2c0abb5c5fa7491b233cf4be5487a263d203b6129f2f50e"
      },
      "downloads": -1,
      "filename": "wagtail_flags-2.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "21d52ed1a9fa66dc06d3d7cd884d38b9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 36585,
      "upload_time": "2017-12-07T14:43:06",
      "url": "https://files.pythonhosted.org/packages/6c/b3/8845dfa12c66c53bf0a579bddab1122e666641ca7bd884d8df8bd6de1e7c/wagtail_flags-2.0.7-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "9fb61e66db33e16f9afa67750d4e22aa",
        "sha256": "16bfc22e800ea5270b5c2fd5a4470dec27b8e3513a5dae030ab017df7ddd5590"
      },
      "downloads": -1,
      "filename": "wagtail-flags-2.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "9fb61e66db33e16f9afa67750d4e22aa",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 24074,
      "upload_time": "2017-12-07T14:43:08",
      "url": "https://files.pythonhosted.org/packages/6e/90/72f14fb5109123430e50d44b4e0c6e4e681e0211dae1532ea264d8dff282/wagtail-flags-2.0.7.tar.gz"
    }
  ]
}