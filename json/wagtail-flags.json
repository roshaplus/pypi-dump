{
  "info": {
    "author": "CFPB",
    "author_email": "tech@cfpb.gov",
    "bugtrack_url": null,
    "classifiers": [
      "License :: CC0 1.0 Universal (CC0 1.0) Public Domain Dedication",
      "License :: Public Domain"
    ],
    "description": "Wagtail-Flags\n=============\n\n|Build Status| |Coverage Status|\n\nFeature flags allow you to toggle functionality in both Django settings\nand the Wagtail or Django admin based on configurable conditions.\n\n.. figure:: https://raw.githubusercontent.com/cfpb/wagtail-flags/master/screenshot_list.png\n   :alt: Feature flags in the Wagtail admin\n\n   Feature flags in the Wagtail admin\n\n-  `Dependencies <#dependencies>`__\n-  `Installation <#installation>`__\n-  `Concepts <#concepts>`__\n-  `Usage <#usage>`__\n\n   -  `Overview <#overview>`__\n   -  `Adding Flags <#adding-flags>`__\n\n      -  `Defining flags <#defining-flags>`__\n      -  `Built-in conditions <#built-in-conditions>`__\n\n-  `API <#api>`__\n\n   -  `Flag state <#flag-state>`__\n   -  `Flag decorators <#flag-decorators>`__\n   -  `Flagged URLs <#flagged-urls>`__\n   -  `Django templates <#django-templates>`__\n   -  `Jinja2 templates <#jinja2-templates>`__\n   -  `Conditions <#conditions>`__\n\n-  `Getting help <#getting-help>`__\n-  `Getting involved <#getting-involved>`__\n-  `Licensing <#licensing>`__\n-  `Credits and references <#credits-and-references>`__\n\nDependencies\n------------\n\n-  Django 1.8+\n-  Wagtail 1.7+\n-  Python 2.7+, 3.5+\n\nInstallation\n------------\n\n1. Install wagtail-flags using pip:\n\n.. code:: shell\n\n    pip install wagtail-flags\n\n2. Add ``flags`` as an installed app in your Django ``settings.py``:\n\n``python  INSTALLED_APPS = (      ...      'flags',      ...  )``\n\nConcepts\n--------\n\nFeature flags in Wagtail-Flags are identified by simple strings that are\nenabled when the conditions they are associated with are met. These\nflags can be used to wrap code and template content that should only be\nused when a flag is enabled or disabled.\n\nConditions determine whether a flag is enabled or disabled by comparing\na defined expected value of some kind with the value at the time the\nflag is checked. In many cases, the flag is checked during a request,\nand some piece of the request's metadata is what is compared. For\nexample, a feature flag that is enabled for a specific Wagtail Site\nwould be enabled if the request's site matches the condition's site.\n\nUsage\n-----\n\nOverview\n~~~~~~~~\n\nTo use Wagtail-Flags you first need to define the flag, use the flag in\ncode, and define conditions for the flag to be enabled.\n\nFirst, define the flag in Django ``settings.py``:\n\n.. code:: python\n\n    FLAGS = {\n        'MY_FLAG': {}\n    }\n\nThen use the flag in a Django template (``mytemplate.html``):\n\n.. code:: django\n\n    {% load feature_flags %}\n    {% flag_enabled 'MY_FLAG' as my_flag %}\n\n    {% if my_flag %}\n      <div class=\"flagged-banner\">\n        I\u2019m the result of a feature flag.   \n      </div>\n    {% endif %}\n\nConfigure a URL for that template (``urls.py``):\n\n.. code:: python\n\n    from django.conf.urls import url\n    from django.views.generic.base import TemplateView\n\n    urlpatterns = [\n        url(r'^/mypage$', TemplateView.as_view(template_name='mytemplate.html'),\n    ]\n\nThen in the Wagtail admin add conditions for the flag in \"Settings\",\n\"Flags\":\n\n.. figure:: https://raw.githubusercontent.com/cfpb/wagtail-flags/master/screenshot_create.png\n   :alt: Creating conditions in the Wagtail admin\n\n   Creating conditions in the Wagtail admin\n\nThen visiting the URL ``/mypage?enable_my_flag=True`` should show you\nthe flagged ``<div>`` in the template.\n\nAdding flags\n~~~~~~~~~~~~\n\nDefining flags\n^^^^^^^^^^^^^^\n\nFlags are defined in Django settings with the conditions in which they\nare enabled.\n\n.. code:: python\n\n    FLAGS = {\n      'FLAG_WITH_EMPTY_CONDITIONS': {}\n      'MY_FLAG': {\n        'condition name': 'value flag is expected to match to be enabled',\n        'user': 'lady.liberty'\n      }\n    }\n\nThe set of conditions can be none (flag will never be enabled), one\n(only condition that has to be met for the flag to be enabled), or many\n(all have to be met for the flag to be enabled).\n\nAdditional conditions can be added in the Django or Wagtail admin for\nany defined flag (illustrated in `Usage <#usage>`__). Conditions added\nin the Django or Wagtail admin can be changed without restarting Django,\nconditions defined in ``settings.py`` cannot.\n\nBuilt-in conditions\n^^^^^^^^^^^^^^^^^^^\n\nWagtail-Flags comes with the following conditions built-in:\n\n``boolean``\n'''''''''''\n\nA simple boolean true/false intended to enable or disable a flag\nexplicitly. The state of the flag evaluates to the value of the boolean\ncondition.\n\n.. code:: python\n\n    FLAGS = {'MY_FLAG': {'boolean': True}}\n\n``user``\n''''''''\n\nAllows a flag to be enabled for the username given as the condition's\nvalue.\n\n.. code:: python\n\n    FLAGS = {'MY_FLAG': {'user': 'jane.doe'}}\n\n``anonymous``\n'''''''''''''\n\nAllows a flag to be either enabled or disabled depending on the\ncondition's boolean value.\n\n.. code:: python\n\n    FLAGS = {'MY_FLAG': {'anonymous: False}}\n\n``parameter``\n'''''''''''''\n\nAllows a flag to be enabled based on a GET parameter with the name given\nas the condition's value.\n\n.. code:: python\n\n    FLAGS = {'MY_FLAG': {'parameter': 'my_flag_param'}}\n\n``path``\n''''''''\n\nAllows a flag to be enabled if the request's path matches the condition\nvalue.\n\n.. code:: python\n\n    FLAGS = {'MY_FLAG': {'path': '/flagged/path'}}\n\n``site``\n''''''''\n\nAllows a flag to be enabled for a Wagtail site that matches the hostname\nand port in the condition value.\n\n.. code:: python\n\n    FLAGS = {'MY_FLAG': {'site': 'staging.mysite.com'}}\n\nAPI\n---\n\nFlag state\n~~~~~~~~~~\n\n.. code:: python\n\n    from flags.state import (\n        flag_state,\n        flag_enabled,\n        flag_disabled,\n    )\n\n``flag_state(flag_name, **kwargs)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturn the value for the flag (``True`` or ``False``) by passing kwargs\nto its conditions.\n\n``flag_enabled(flag_name, **kwargs)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns ``True`` if a flag is enabled by passing kwargs to its\nconditions, otherwise returns ``False``.\n\n.. code:: python\n\n    if flag_enabled('MY_FLAG', request=a_request):\n        print(\"My feature flag is enabled\")\n\n``flag_disabled(flag_name, **kwargs)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns ``True`` if a flag is disabled by passing kwargs to its\nconditions, otherwise returns ``False``.\n\n.. code:: python\n\n    if flag_disabled('MY_FLAG', request=a_request):\n        print(\u201cMy feature flag is disabled\u201d)\n\nFlag decorators\n~~~~~~~~~~~~~~~\n\nDecorators are provided for use with Django views and conditions that\ntake a ``request`` argument. The default behavior is to return a 404 if\na callable fallback is not given.\n\n.. code:: python\n\n    from flags.decorators import (\n        flag_check,\n        flag_required,\n    )\n\n``flag_check(flag_name, state, fallback=None, **kwargs)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCheck that a given flag has the given state. If the state does not\nmatch, perform the fallback.\n\n**Note**, because flags that do not exist are taken to be ``False`` by\ndefault, ``@flag_check('MY_FLAG', False)`` and\n``@flag_check('MY_FLAG', None)`` will both succeed if ``MY_FLAG`` does\nnot exist.\n\n.. code:: python\n\n    from flags.decorators import flag_check\n\n    @flag_check('MY_FLAG', True)\n    def view_requiring_flag(request):\n        return HttpResponse('flag was set')\n\n    @flag_check('MY_OTHER_FLAG', False)\n    def view_when_flag_is_not_set(request):\n        return HttpResponse('flag was set')\n\n    def other_view(request):\n        return HttpResponse('flag was not set')\n\n    @flag_check('MY_FLAG_WITH_FALLBACK', True, fallback=other_view)\n    def view_with_fallback(request):\n        return HttpResponse('flag was set')\n\n``flag_required(flag_name, fallback_view=None, pass_if_set=True)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRequire the given flag to be enabled.\n\n.. code:: python\n\n    from flags.decorators import flag_required\n\n    @flag_required('MY_FLAG')\n    def view_requiring_flag(request):\n        return HttpResponse('flag was set')\n\n    def other_view(request):\n        return HttpResponse('flag was not set')\n\n    @flag_required('MY_FLAG_WITH_FALLBACK', fallback_view=other_view)\n    def view_with_fallback(request):\n        return HttpResponse('flag was set')\n\nFlagged URLs\n~~~~~~~~~~~~\n\n.. code:: python\n\n    from flags.urls import flagged_url, flagged_urls\n\n``flagged_url(flag_name, regex, view, kwargs=None, name=None, state=True, fallback=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nMake a URL depend on the state of a feature flag. ``flagged_url()`` can\nbe used in place of Django's ``url()``.\n\n``fallback`` support for ``include()`` URLs is limited to a single view\nrather than a fallback set of ``include()``\\ ed URLs.\n\n.. code:: python\n\n    urlpatterns = [\n        flagged_url('MY_FLAG', r'^an-url$', view_requiring_flag, state=True),\n        flagged_url('MY_FLAG_WITH_FALLBACK', r'^another-url$', view_with_fallback,\n                    state=True, fallback=other_view)\n        flagged_url('MY_FLAGGED_INCLUDE', r'^myapp$', include('myapp.urls'),\n                    state=True, fallback=other_view)\n    ]\n\n``flagged_urls(flag_name, state=True, fallback=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFlag multiple URLs in the same context. Returns function that can be\nused in place of Django's ``url()`` that wraps ``flagged_url()``. Can\ntake an optional fallback view that will apply to all urls.\n\n.. code:: python\n\n    with flagged_urls('MY_FLAG') as url:\n        flagged_url_patterns = [\n            url(r'^an-url$', view_requiring_flag),\n        ]\n\n    urlpatterns = urlpatterns + flagged_url_patterns\n\nDjango templates\n~~~~~~~~~~~~~~~~\n\nWagtail-Flags provides a template tag library that can be used to\nevaluate flags in Django templates.\n\n.. code:: django\n\n    {% load feature_flags %}\n\n``flag_enabled``\n^^^^^^^^^^^^^^^^\n\nReturns ``True`` if a flag is enabled by passing the current request to\nits conditions, otherwise returns ``False``.\n\n.. code:: django\n\n    {% flag_enabled 'MY_FLAG' as my_flag %}\n    {% if my_flag %}\n      <div class=\"m-global-banner\">\n        I\u2019m the result of a feature flag.   \n      </div>\n    {% endif %}\n\n``flag_disabled``\n^^^^^^^^^^^^^^^^^\n\nReturns ``True`` if a flag is disabled by passing the current request to\nits conditions, otherwise returns ``False``.\n\n.. code:: django\n\n    {% flag_disabled 'MY_FLAG' as my_flag %}\n    {% if my_flag %}\n      <div class=\"m-global-banner\">\n        I\u2019m the result of a feature flag that is not enabled.\n      </div>\n    {% endif %}\n\nJinja2 templates\n~~~~~~~~~~~~~~~~\n\nWagtail-Flags provides template functions that can be added to a Jinja2\nenvironment and subsequently used in templates.\n\n.. code:: python\n\n    from flags.template_functions import (\n        flag_enabled,\n        flag_disabled\n    )\n\n    ...\n\n    env.globals.update(\n        flag_enabled=flag_enabled,\n        flag_disabled=flag_disabled\n    )\n\n``flag_enabled``\n^^^^^^^^^^^^^^^^\n\nReturns ``True`` if a flag is enabled by for the given request,\notherwise returns ``False``.\n\n.. code:: jinja\n\n    {% if flag_enabled('MY_FLAG', request) %}\n      <div class=\"m-global-banner\">\n        I\u2019m the result of a feature flag.   \n      </div>\n    {% endif %}\n\n``flag_disabled``\n^^^^^^^^^^^^^^^^^\n\nReturns ``True`` if a flag is disabled by passing the current request to\nits conditions, otherwise returns ``False``. Returns ``True`` if a flag\nis disabled by for the given request, otherwise returns ``False``.\n\n.. code:: jinja\n\n    {% if flag_disabled('MY_FLAG', request) %}\n      <div class=\"m-global-banner\">\n        I\u2019m the result of a feature flag that is not enabled.\n      </div>\n    {% endif %}\n\nConditions\n~~~~~~~~~~\n\nConditions are functions that take a configured value and possible\nkeyword arguments and determines whether the given arguments are\nequivalent to the value. Conditions are registered with a unique name\nthat is exposed to users in Django settings and the Django and Wagtail\nadmin.\n\n.. code:: python\n\n    from flags import conditions\n\n``conditions.register(condition_name, fn=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRegister a new condition, either as a decorator:\n\n.. code:: python\n\n    from flags import conditions\n\n    @conditions.register('path')\n    def path_condition(path, request=None, **kwargs):\n        return request.path.startswith(path)\n\nOr as a function call:\n\n.. code:: python\n\n    def path_condition(path, request=None, **kwargs):\n        return request.path.startswith(path)\n\n    conditions.register('path', fn=path_condition)\n\n``conditions.RequiredForCondition``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nException intended to be raised when a condition is not given a keyword\nargument it requires for evaluation.\n\n.. code:: python\n\n    @conditions.register('path')\n    def path_condition(path, request=None, **kwargs):\n        if request is None:\n            raise conditions.RequiredForCondition(\n                \"request is required for condition 'path'\")\n\n        return request.path.startswith(path)\n\nGetting help\n------------\n\nPlease add issues to the `issue\ntracker <https://github.com/cfpb/wagtail-flags/issues>`__.\n\nGetting involved\n----------------\n\nGeneral instructions on *how* to contribute can be found in\n`CONTRIBUTING <CONTRIBUTING.md>`__.\n\nLicensing\n---------\n\n1. `TERMS <TERMS.md>`__\n2. `LICENSE <LICENSE>`__\n3. `CFPB Source Code\n   Policy <https://github.com/cfpb/source-code-policy/>`__\n\nCredits and references\n----------------------\n\n1. Forked from\n   `cfgov-refresh <https://github.com/cfpb/cfgov-refresh/tree/master/cfgov/flags>`__\n\n.. |Build Status| image:: https://travis-ci.org/cfpb/wagtail-flags.svg?branch=master\n   :target: https://travis-ci.org/cfpb/wagtail-flags\n.. |Coverage Status| image:: https://coveralls.io/repos/github/cfpb/wagtail-flags/badge.svg?branch=master\n   :target: https://coveralls.io/github/cfpb/wagtail-flags?branch=master",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/cfpb/wagtail-flags",
    "keywords": null,
    "license": "CC0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "wagtail-flags",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/wagtail-flags/",
    "release_url": "https://pypi.org/project/wagtail-flags/2.0.3/",
    "requires_python": null,
    "summary": "Feature flags for Wagtail sites",
    "version": "2.0.3"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f11b75c5d70e3bad9d16aeec953e10c1",
          "sha256": "34f00a67b8a8b297e8e7e8dadaee586e173f2742a2decb9124672c237a35a572"
        },
        "downloads": 12,
        "filename": "wagtail-flags-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f11b75c5d70e3bad9d16aeec953e10c1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8162,
        "upload_time": "2017-02-28T20:22:00",
        "url": "https://files.pythonhosted.org/packages/cb/21/5be1c663ff12f675f306836d314dd3eb7935cb845808583d5d71acae8612/wagtail-flags-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b618f95686356a77454e21b7a58e14cd",
          "sha256": "367d3979311ee51978e3e5167df5d5265ccbc2be833f53022ca16e3d6b5cdf76"
        },
        "downloads": 16,
        "filename": "wagtail-flags-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b618f95686356a77454e21b7a58e14cd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14560,
        "upload_time": "2017-03-07T15:49:57",
        "url": "https://files.pythonhosted.org/packages/60/cf/320487d103091d452f94f2fc87f1c95d4f43e722405f501afafd8345c7c3/wagtail-flags-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1be56ad973555970a91418e3e6fdb7ac",
          "sha256": "5a38701c82e16c1578311adfe96de6c9814e79ec94f9649d1f464b18c6a33fc2"
        },
        "downloads": 25,
        "filename": "wagtail-flags-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1be56ad973555970a91418e3e6fdb7ac",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1396098,
        "upload_time": "2017-03-07T19:14:38",
        "url": "https://files.pythonhosted.org/packages/c5/c5/ed8c7d0da9a5a70dd83ee79c586e9f969ac3e34f30c32fca180098085577/wagtail-flags-1.0.2.tar.gz"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "25b650f4a6f508405c406a2baac81b95",
          "sha256": "4e8e66fdbc1c725f18b38e947ea4b727329d39691dc6923a862740c9f26027af"
        },
        "downloads": 0,
        "filename": "wagtail-flags-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "25b650f4a6f508405c406a2baac81b95",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14849,
        "upload_time": "2017-04-18T10:59:25",
        "url": "https://files.pythonhosted.org/packages/b5/f4/282f70546df55958e48bbdbef7002ad6465b8ede604d5cc78bba36832908/wagtail-flags-1.0.3.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "33ddb783a863fb0c34c55ebf513105d3",
          "sha256": "0dd3b1216acad9050d538012fda6dbfc5a4af8b84e6cbc6a8dad1b931e0f7bf7"
        },
        "downloads": 0,
        "filename": "wagtail-flags-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "33ddb783a863fb0c34c55ebf513105d3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2810789,
        "upload_time": "2017-05-05T13:37:57",
        "url": "https://files.pythonhosted.org/packages/a0/6f/9f9b58fe7d69cc7d3e69c0eba3d9bc086d6e831d02df933c4d94c6977ea9/wagtail-flags-2.0.0.tar.gz"
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1e5d75b87b7dd7ac4c200b497335fee6",
          "sha256": "06bc6752a0dd82043690c1e3b2b15536b868ea079152c6c7b24b925f30224e79"
        },
        "downloads": 0,
        "filename": "wagtail-flags-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1e5d75b87b7dd7ac4c200b497335fee6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23064,
        "upload_time": "2017-05-09T13:03:43",
        "url": "https://files.pythonhosted.org/packages/03/3f/90b2b10f61dca97cd8e1ee20440c9c36333ee9c5f5efabb07e459bd2e058/wagtail-flags-2.0.1.tar.gz"
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8a6927701c473ee2b4954441ec3e4662",
          "sha256": "d83f42f14c3ab806ab926f0c1d43d4110ac9cd9cd5b3a07b5371b874ebdeec90"
        },
        "downloads": 0,
        "filename": "wagtail-flags-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8a6927701c473ee2b4954441ec3e4662",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23632,
        "upload_time": "2017-05-15T20:40:10",
        "url": "https://files.pythonhosted.org/packages/b3/a3/0b18e0cd6ddd31ef10bc5e87c053b76c860b72e9315afc4bae33d556a5bc/wagtail-flags-2.0.2.tar.gz"
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d325efe1a2c673258d417a49991aef96",
          "sha256": "2078d10f37354f075abd74814e66fa2e4e15918425d8c03f7360c8917f6e9ddc"
        },
        "downloads": 0,
        "filename": "wagtail-flags-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d325efe1a2c673258d417a49991aef96",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23834,
        "upload_time": "2017-05-20T02:54:43",
        "url": "https://files.pythonhosted.org/packages/30/fb/40f92e116455d88e51720e22140b73936c8aa684c226ba43732d17757e3c/wagtail-flags-2.0.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d325efe1a2c673258d417a49991aef96",
        "sha256": "2078d10f37354f075abd74814e66fa2e4e15918425d8c03f7360c8917f6e9ddc"
      },
      "downloads": 0,
      "filename": "wagtail-flags-2.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d325efe1a2c673258d417a49991aef96",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 23834,
      "upload_time": "2017-05-20T02:54:43",
      "url": "https://files.pythonhosted.org/packages/30/fb/40f92e116455d88e51720e22140b73936c8aa684c226ba43732d17757e3c/wagtail-flags-2.0.3.tar.gz"
    }
  ]
}