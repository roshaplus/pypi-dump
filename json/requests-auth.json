{
  "info": {
    "author": "Colin Bounouar",
    "author_email": "colin.bounouar+python@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "Easy Authentication for Requests\n================================\n\nThis module provides you authentication classes to be used with `requests module`_.\n\nTo use a specific authentication in combination with requests, use the `authentication parameter on requests module`_.\n\nOAuth 2\n=======\n\nSample:\n\n.. code:: python\n\n    import requests\n    from requests_auth.authentication import OAuth2\n\n    requests.get('http://www.example.com', auth=OAuth2('https://www.example.com'))\n\nParameters\n----------\n\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n|                                        | Description                                                                                                                              | Mandatory | Default value |\n+========================================+==========================================================================================================================================+===========+===============+\n| authorization_url                      | OAuth 2 authorization URL.                                                                                                               | Mandatory |               |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| redirect_uri_endpoint                  | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>.       | Optional  | ''            |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| redirect_uri_port                      | The port on which the server listening for the OAuth 2 token will be started.                                                            | Optional  | 5000          |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| redirect_uri_port_availability_timeout | The maximum amount of seconds to wait for the redirect_uri_port to become available.                                                     | Optional  | 2             |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| token_reception_timeout                | Maximum amount of seconds to wait for a token to be received once requested.                                                             | Optional  | 60            |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| token_reception_success_display_time   | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional  | 1             |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| token_reception_failure_display_time   | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.      | Optional  | 5000          |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| any other parameter                    | all additional authorization parameters that should be put as query parameter in the authorization URL.                                  | Optional  |               |\n|                                        | * client_id: Corresponding to your Application ID (in Microsoft Azure app portal)                                                        |           |               |\n|                                        | * response_type: id_token for Microsoft                                                                                                  |           |               |\n|                                        | * nonce: Refer to `OpenID ID Token specifications`_ for more details                                                                     |           |               |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n\nManaging token cache\n--------------------\n\nTo avoid asking for a new token every new request, a token cache is used.\n\nDefault cache is in memory but it is also possible to use a physical cache using the following method:\n\n.. code:: python\n\n    from requests_auth.authentication import OAuth2\n    from requests_auth.oauth2_tokens import JsonTokenFileCache\n\n    OAuth2.token_cache = JsonTokenFileCache('my_token_cache')\n\nCommon OAuth2 providers\n-----------------------\n\nMicrosoft\n---------\n\nSample:\n\n.. code:: python\n\n    import requests\n    from requests_auth.authentication import MicrosoftOAuth2\n\n\n    ms_auth = MicrosoftOAuth2(tenant_id='45239d18-c68c-4c47-8bdd-ce71ea1d50cd', client_id='54239d18-c68c-4c47-8bdd-ce71ea1d50cd', nonce='7362CAEA-9CA5-4B43-9BA3-34D7C303EBA7')\n    requests.get('http://www.example.com', auth=ms_auth)\n\nParameters\n----------\n\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n|                                        | Description                                                                                                                              | Mandatory | Default value |\n+========================================+==========================================================================================================================================+===========+===============+\n| tenant_id                              | Microsoft Tenant Identifier (formatted as 45239d18-c68c-4c47-8bdd-ce71ea1d50cd).                                                         | Mandatory |               |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| client_id                              | Microsoft Application Identifier (formatted as 45239d18-c68c-4c47-8bdd-ce71ea1d50cd).                                                    | Mandatory |               |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| nonce                                  | Refer to `OpenID ID Token specifications`_ for more details (formatted as 7362CAEA-9CA5-4B43-9BA3-34D7C303EBA7)                          | Mandatory |               |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| redirect_uri_endpoint                  | Custom endpoint that will be used as redirect_uri the following way: http://localhost:<redirect_uri_port>/<redirect_uri_endpoint>.       | Optional  | ''            |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| redirect_uri_port                      | The port on which the server listening for the OAuth 2 token will be started.                                                            | Optional  | 5000          |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| redirect_uri_port_availability_timeout | The maximum amount of seconds to wait for the redirect_uri_port to become available.                                                     | Optional  | 2             |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| token_reception_timeout                | Maximum amount of seconds to wait for a token to be received once requested.                                                             | Optional  | 60            |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| token_reception_success_display_time   | In case a token is successfully received, this is the maximum amount of milliseconds the success page will be displayed in your browser. | Optional  | 1             |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| token_reception_failure_display_time   | In case received token is not valid, this is the maximum amount of milliseconds the failure page will be displayed in your browser.      | Optional  | 5000          |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n| any other parameter                    | all additional authorization parameters that should be put as query parameter in the authorization URL.                                  | Optional  |               |\n+----------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------+---------------+\n\nAPI key in header\n=================\n\nSample:\n\n.. code:: python\n\n    import requests\n    from requests_auth.authentication import HeaderApiKey\n\n    requests.get('http://www.example.com', auth=HeaderApiKey('my_api_key'))\n\nParameters\n----------\n\n+-------------+--------------------------------+-----------+---------------+\n|             | Description                    | Mandatory | Default value |\n+=============+================================+===========+===============+\n| api_key     | The API key that will be sent. | Mandatory |               |\n+-------------+--------------------------------+-----------+---------------+\n| header_name | Name of the header field.      | Optional  | \"X-API-Key\"   |\n+-------------+--------------------------------+-----------+---------------+\n\nAPI key in query\n================\n\nSample:\n\n.. code:: python\n\n    import requests\n    from requests_auth.authentication import QueryApiKey\n\n    requests.get('http://www.example.com', auth=QueryApiKey('my_api_key'))\n\nParameters\n----------\n\n+----------------------+--------------------------------+-----------+---------------+\n|                      | Description                    | Mandatory | Default value |\n+======================+================================+===========+===============+\n| api_key              | The API key that will be sent. | Mandatory |               |\n+----------------------+--------------------------------+-----------+---------------+\n| query_parameter_name | Name of the query parameter.   | Optional  | \"api_key\"     |\n+----------------------+--------------------------------+-----------+---------------+\n\nBasic\n=====\n\nSample:\n\n.. code:: python\n\n    import requests\n    from requests_auth.authentication import Basic\n\n    requests.get('http://www.example.com', auth=Basic('username', 'password'))\n\nParameters\n----------\n\n+----------+----------------+-----------+\n|          | Description    | Mandatory |\n+==========+================+===========+\n| username | User name.     | Mandatory |\n+----------+----------------+-----------+\n| password | User password. | Mandatory |\n+----------+----------------+-----------+\n\nNTLM\n====\n\nRequires `requests-negotiate-sspi module`_ or `requests_ntlm module`_ depending on provided parameters.\n\nSample:\n\n.. code:: python\n\n    import requests\n    from requests_auth.authentication import NTLM\n\n    requests.get('http://www.example.com', auth=NTLM())\n\nParameters\n----------\n\n+----------+----------------+-----------------------------------------------------------------------------------------------------------------+\n|          | Description    | Mandatory                                                                                                       |\n+==========+================+=================================================================================================================+\n| username | User name.     | Mandatory if requests_negotiate_sspi module is not installed. In such a case requests_ntlm module is mandatory. |\n+----------+----------------+-----------------------------------------------------------------------------------------------------------------+\n| password | User password. | Mandatory if requests_negotiate_sspi module is not installed. In such a case requests_ntlm module is mandatory. |\n+----------+----------------+-----------------------------------------------------------------------------------------------------------------+\n\nMultiple authentication at once\n===============================\n\nYou can also use a combination of authentication as in the following sample:\n\n.. code:: python\n\n    import requests\n    from requests_auth.authentication import Auths, HeaderApiKey, OAuth2\n\n    api_key = HeaderApiKey('my_api_key')\n    oauth2 = OAuth2('https://www.example.com')\n    requests.get('http://www.example.com', auth=Auths([api_key, oauth2]))\n\n.. _requests module: https://pypi.python.org/pypi/requests\n.. _authentication parameter on requests module: http://docs.python-requests.org/en/master/user/authentication/\n.. _OpenID ID Token specifications: http://openid.net/specs/openid-connect-core-1_0.html#IDToken\n.. _requests-negotiate-sspi module: https://pypi.python.org/pypi/requests-negotiate-sspi\n.. _requests_ntlm module: https://pypi.python.org/pypi/requests_ntlm",
    "docs_url": null,
    "download_url": "http://www.engie.com",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Colin-b/requests_auth",
    "keywords": "authentication,ntlm,oauth2,apikey,multiple",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "requests-auth",
    "platform": "Windows",
    "project_url": "https://pypi.org/project/requests-auth/",
    "release_url": "https://pypi.org/project/requests-auth/1.0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Easy Authentication for Requests",
    "version": "1.0.2"
  },
  "releases": {
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ab4b850c7efbf57d47c9353ab78865de",
          "sha256": "692e49c4b094b565ab5aa8cacd6df11238d8453ac22f2d331a314bca612cf9de"
        },
        "downloads": -1,
        "filename": "requests_auth-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ab4b850c7efbf57d47c9353ab78865de",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11825,
        "upload_time": "2018-01-19T16:12:23",
        "url": "https://files.pythonhosted.org/packages/dd/e5/e638d78e8ace2f748448baffa2b7f50ddd0d98d9abafa0f3940d38c20c0d/requests_auth-1.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ab4b850c7efbf57d47c9353ab78865de",
        "sha256": "692e49c4b094b565ab5aa8cacd6df11238d8453ac22f2d331a314bca612cf9de"
      },
      "downloads": -1,
      "filename": "requests_auth-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "ab4b850c7efbf57d47c9353ab78865de",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 11825,
      "upload_time": "2018-01-19T16:12:23",
      "url": "https://files.pythonhosted.org/packages/dd/e5/e638d78e8ace2f748448baffa2b7f50ddd0d98d9abafa0f3940d38c20c0d/requests_auth-1.0.2.tar.gz"
    }
  ]
}