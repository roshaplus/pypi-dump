{
  "info": {
    "author": "Ivan Korobkov",
    "author_email": "ivan.korobkov@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "python-inject\r\n=============\r\nDependency injection the python way, the good way. Not a port of Guice or Spring.\r\n\r\nKey features\r\n------------\r\n- Fast.\r\n- Thread-safe.\r\n- Simple to use.\r\n- Does not steal class constructors.\r\n- Does not try to manage your application object graph.\r\n- Transparently integrates into tests.\r\n- Supports Python 2.7 and Python 3.3+.\r\n\r\n\r\nUsage\r\n-----\r\nInstallation::\r\n\r\n    pip install inject\r\n\r\nExample::\r\n\r\n    # Import the inject module.\r\n    import inject\r\n    \r\n    \r\n    # `inject.instance` requests dependencies from the injector.\r\n    def foo(bar):\r\n        cache = inject.instance(Cache)\r\n        cache.save('bar', bar)\r\n    \r\n    \r\n    # `inject.params` injects dependencies as keyword arguments or positional argument.\r\n    @inject.params(cache=Cache, user=CurrentUser)\r\n    def baz(foo, cache=None, user=None):\r\n        cache.save('foo', foo, user)\r\n \r\n    # this can be called in different ways:\r\n    # with injected arguments\r\n    baz('foo')\r\n    \r\n    # with positional arguments\r\n    baz('foo', my_cache)\r\n    \r\n    # with keyword arguments\r\n    baz('foo', my_cache, user=current_user)\r\n    \r\n    \r\n    # `inject.param` is deprecated, use `inject.params` instead.\r\n    @inject.param('cache', Cache)\r\n    def bar(foo, cache=None):\r\n        cache.save('foo', foo)\r\n    \r\n    \r\n    # `inject.attr` creates properties (descriptors) which request dependencies on access.\r\n    class User(object):\r\n        cache = inject.attr(Cache)\r\n                \r\n        def __init__(self, id):\r\n            self.id = id\r\n\r\n        def save(self):\r\n            self.cache.save('users', self)\r\n        \r\n        @classmethod\r\n        def load(cls, id):\r\n            return cls.cache.load('users', id)\r\n    \r\n    \r\n    # Create an optional configuration.\r\n    def my_config(binder):\r\n        binder.install(my_config2)  # Add bindings from another config.\r\n        binder.bind(Cache, RedisCache('localhost:1234'))\r\n    \r\n    # Configure a shared injector.\r\n    inject.configure(my_config)\r\n    \r\n    \r\n    # Instantiate User as a normal class. Its `cache` dependency is injected when accessed.\r\n    user = User(10)\r\n    user.save()\r\n    \r\n    # Call the functions, the dependencies are automatically injected.\r\n    foo('Hello')\r\n    bar('world')\r\n\r\n\r\nUsage with Django\r\n-----------------\r\nDjango can load some modules multiple times which can lead to \r\n`InjectorException: Injector is already configured`. You can use `configure_once` which\r\nis guaranteed to run only once when the injector is absent::\r\n\r\n    import inject\r\n    inject.configure_once(my_config)\r\n\r\n\r\nTesting\r\n-------\r\nIn tests use ``inject.clear_and_configure(callable)`` to create a new injector on setup,\r\nand optionally ``inject.clear()`` to clean up on tear down::\r\n    \r\n    class MyTest(unittest.TestCase):\r\n        def setUp(self):\r\n            inject.clear_and_configure(lambda binder: binder\r\n                .bind(Cache, Mock() \\\r\n                .bind(Validator, TestValidator())\r\n        \r\n        def tearDown(self):\r\n            inject.clear()\r\n\r\n\r\nThread-safety\r\n-------------\r\nAfter configuration the injector is thread-safe and can be safely reused by multiple threads.\r\n\r\nBinding types\r\n-------------\r\n- Instance bindings always return the same instance::\r\n    \r\n    redis = RedisCache(address='localhost:1234')\r\n    def config(binder):\r\n        binder.bind(Cache, redis)\r\n    \r\n- Constructor bindings create a singleton on injection::\r\n    \r\n    def config(binder):\r\n        # Creates a redis cache singleton on first injection.\r\n        binder.bind_to_constructor(Cache, lambda: RedisCache(address='localhost:1234'))\r\n\r\n- Provider bindings call the provider on injection::\r\n\r\n    def get_my_thread_local_cache():\r\n        pass\r\n\r\n    def config(binder):\r\n        # Executes the provider on each injection.\r\n        binder.bind_to_provider(Cache, get_my_thread_local_cache) \r\n\r\n- Runtime bindings automatically create singletons on injection, require no configuration.\r\n  For example, only the ``Config`` class binding is present, other bindings are runtime::\r\n\r\n    class Config(object):\r\n        pass\r\n    \r\n    class Cache(object):\r\n        config = inject.attr(Config)\r\n    \r\n    class Db(object):\r\n        config = inject.attr(Config)\r\n    \r\n    class User(object):\r\n        cache = inject.attr(Cache)\r\n        db = inject.attr(Db)\r\n        \r\n        @classmethod\r\n        def load(cls, user_id):\r\n            return cls.cache.load('users', user_id) or cls.db.load('users', user_id)\r\n     \r\n    inject.configure(lambda binder: binder.bind(Config, load_config_file()))\r\n    user = User.load(10)\r\n\r\nKeys\r\n----\r\nIt is possible to use any hashable object as a binding key.\r\nFor example::\r\n    \r\n    import inject\r\n    \r\n    inject.configure(lambda binder: \\\r\n        binder.bind('host', 'localhost') \\\r\n        binder.bind('port', 1234))\r\n\r\n\r\nWhy no scopes?\r\n--------------\r\nI've used Guice and Spring in Java for a lot of years, and I don't like their scopes.\r\n``python-inject`` by default creates objects as singletons. It does not need a prototype scope\r\nas in Spring or NO_SCOPE as in Guice because ``python-inject`` does not steal your class \r\nconstructors. Create instances the way you like and then inject dependencies into them.\r\n\r\nOther scopes such as a request scope or a session scope are fragile, introduce high coupling,\r\nand are difficult to test. In ``python-inject`` write custom providers which can be thread-local, \r\nrequest-local, etc.\r\n\r\nFor example, a thread-local current user provider::\r\n\r\n    import inject\r\n    import threading\r\n    \r\n    # Given a user class.\r\n    class User(object):\r\n        pass\r\n    \r\n    # Create a thread-local current user storage.\r\n    _LOCAL = threading.local()\r\n    \r\n    def get_current_user():\r\n        return getattr(_LOCAL, 'user', None)\r\n    \r\n    def set_current_user(user):\r\n        _LOCAL.user = user\r\n    \r\n    # Bind User to a custom provider.\r\n    inject.configure(lambda binder: binder.bind_to_provider(User, get_current_user))\r\n    \r\n    # Inject the current user.\r\n    @inject.params(user=User)\r\n    def foo(user):\r\n        pass\r\n\r\n\r\nLinks\r\n-----\r\n- Project: https://github.com/ivankorobkov/python-inject\r\n\r\nLicense\r\n-------\r\nApache License 2.0\r\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ivankorobkov/python-inject",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Inject",
    "platform": "",
    "project_url": "https://pypi.org/project/Inject/",
    "release_url": "https://pypi.org/project/Inject/3.3.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python dependency injection framework",
    "version": "3.3.2"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b027a495845a7ee94051a39fbbbfbd6c",
          "sha256": "1e56ea7b46f57933975be322ce547376bfc72357d2cc6401328da29322308cd1"
        },
        "downloads": 3882,
        "filename": "Inject-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b027a495845a7ee94051a39fbbbfbd6c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38539,
        "upload_time": "2010-02-12T09:52:16",
        "url": "https://files.pythonhosted.org/packages/47/fd/79b38e78e54681c9e7c831a34b79c5deba9c648187cce6557eefd0907b47/Inject-1.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c1d8cc4b0a8992e54cac20213d5f76a0",
          "sha256": "fcbecd3cfbcfa2ef9947400148b966deea85776562d0cbcbbe86b45579a46b72"
        },
        "downloads": 5286,
        "filename": "Inject-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c1d8cc4b0a8992e54cac20213d5f76a0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39902,
        "upload_time": "2010-06-18T08:33:21",
        "url": "https://files.pythonhosted.org/packages/f4/e4/81cc9c8f90d81158c1ec95bb431ab5b77e246939ca1135a00ca4291d762e/Inject-1.0.1.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f4968ddd8dd756c261e24d3422a585d4",
          "sha256": "7baf710aa38034eebf990c2011c551505e29e8f747d475e31b16431f3749754b"
        },
        "downloads": 2934,
        "filename": "Inject-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f4968ddd8dd756c261e24d3422a585d4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30550,
        "upload_time": "2014-02-10T10:57:44",
        "url": "https://files.pythonhosted.org/packages/e9/10/80b167fa39fb56da4e6465fec8515f108cc79ff33deca5d3f72a1ae40958/Inject-2.0.0.tar.gz"
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "aa98e7b28eaa84b4cf39a55a779418dd",
          "sha256": "2d325874c9bcbca6514dd663ceeafdd6c982e7e1234274941c3a67bc0d1a5595"
        },
        "downloads": 2273,
        "filename": "Inject-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "aa98e7b28eaa84b4cf39a55a779418dd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7902,
        "upload_time": "2014-02-10T11:07:50",
        "url": "https://files.pythonhosted.org/packages/db/31/da5fc602c622558bedc76e3546baec1e8a95f5c3ecd56c4c3d4e783168a8/Inject-3.0.0.tar.gz"
      }
    ],
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "092bed111137caebd202ae889337e55a",
          "sha256": "e326fa7934353c4e21fc85be4bf717266a24b7aa2ab3494755155fbebfd88e8b"
        },
        "downloads": 2202,
        "filename": "Inject-3.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "092bed111137caebd202ae889337e55a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8759,
        "upload_time": "2014-03-06T21:34:06",
        "url": "https://files.pythonhosted.org/packages/f9/1c/a6b292c21f9cfbe49006d16197ba09515f6bd193038be4d0a18d8601a05f/Inject-3.1.0.tar.gz"
      }
    ],
    "3.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6ad47a0d48449f03f951ad16541a8035",
          "sha256": "cd873982656892a539df0c6e60f3378ce35dbf603358e3fb9107a9b52933a230"
        },
        "downloads": 3480,
        "filename": "Inject-3.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6ad47a0d48449f03f951ad16541a8035",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8961,
        "upload_time": "2014-03-14T15:48:21",
        "url": "https://files.pythonhosted.org/packages/4c/13/c4ee31c9a954d464996b75fecc28d8fd6bee30f0467365c7f86b661b2f95/Inject-3.1.1.tar.gz"
      }
    ],
    "3.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8a66b17f6ee38e5838fe4e7a05da9928",
          "sha256": "032f49874c4e4f2db19612002e66eb6b137150e565df6f947fb02fe36eb5ca65"
        },
        "downloads": 2670,
        "filename": "Inject-3.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8a66b17f6ee38e5838fe4e7a05da9928",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9354,
        "upload_time": "2014-08-04T11:02:28",
        "url": "https://files.pythonhosted.org/packages/5a/9d/42d398e8daef197a4672a5dd9e3f8e8317272682219a6a48b996e09a9ae9/Inject-3.2.0.tar.gz"
      }
    ],
    "3.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "36f36c87d04f8a579558c975fbd487b9",
          "sha256": "aec5f6b7199b05183125a9e20fb7d082e649b93836c687e764d1f65e8395fe14"
        },
        "downloads": 8645,
        "filename": "Inject-3.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "36f36c87d04f8a579558c975fbd487b9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9973,
        "upload_time": "2014-08-22T07:44:51",
        "url": "https://files.pythonhosted.org/packages/22/89/e74144610522279aa394fd38e165d00fc4e90a16fceb3d1dd2fdbce209fc/Inject-3.3.0.tar.gz"
      }
    ],
    "3.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "050982b15735bb9045e309ad9fa1077e",
          "sha256": "274234dd18e9dd525998077f59c9c59d1e49ae5226f095f4364fc98009a1da6c"
        },
        "downloads": 17569,
        "filename": "Inject-3.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "050982b15735bb9045e309ad9fa1077e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10024,
        "upload_time": "2015-03-26T13:31:17",
        "url": "https://files.pythonhosted.org/packages/10/78/bdbd65cb1115652254c93adb3238a5c857de9bb07897939e468e734d5f67/Inject-3.3.1.tar.gz"
      }
    ],
    "3.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "280da064c9b22bda8cd7bb6639f133b8",
          "sha256": "1977d07ad617cee5c99e447f8a78cd90722c0cab7e129a9fa6b1d263fe81773f"
        },
        "downloads": 0,
        "filename": "Inject-3.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "280da064c9b22bda8cd7bb6639f133b8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10106,
        "upload_time": "2017-09-14T16:07:36",
        "url": "https://files.pythonhosted.org/packages/07/43/c51c1acfbdeda9f871e23ed53c5caedc50f00d0ae582a06d230d3bf8cdcf/Inject-3.3.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "280da064c9b22bda8cd7bb6639f133b8",
        "sha256": "1977d07ad617cee5c99e447f8a78cd90722c0cab7e129a9fa6b1d263fe81773f"
      },
      "downloads": 0,
      "filename": "Inject-3.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "280da064c9b22bda8cd7bb6639f133b8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10106,
      "upload_time": "2017-09-14T16:07:36",
      "url": "https://files.pythonhosted.org/packages/07/43/c51c1acfbdeda9f871e23ed53c5caedc50f00d0ae582a06d230d3bf8cdcf/Inject-3.3.2.tar.gz"
    }
  ]
}