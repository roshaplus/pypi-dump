{
  "info": {
    "author": "Vincent Barth",
    "author_email": "vdbarth@posteo.at",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "=======\nAnyPath\n=======\nAnyPath makes it trivial to fetch remote ressources and work with them locally.\n\nGetting Started\n===============\n\nInstallation\n------------\nTo install simply do::\n\n    pip install anypath\n\nDependencies\n^^^^^^^^^^^^\nBy default AnyPath does not install the dependencies for the different providers. You should install them as needed:\n\n    +-----------+---------------------------------+\n    | Provider  | Dependencies                    |\n    +===========+=================================+\n    | git       | local git installation          |\n    +-----------+---------------------------------+\n    | mercurial | local mercurial installation    |\n    +-----------+---------------------------------+\n    | http      | `pip install requests`          |\n    +-----------+---------------------------------+\n    | sftp      | `pip install paramiko`          |\n    +-----------+---------------------------------+\n\nBasic Usage\n-----------\nAnyPath uses `pathproviders` to handle different remote resources. The resources are then fetched to a new temporary directory where you can work with them.\nThe newly fetched ressources are wrapped in a `pathlib.Path`.\n\n.. code-block:: python\n\n   from anypath.anypath import AnyPath, path_provider\n   from anypath.pathprovider.http import HttpPath\n\n   path_provider.add(HttpPath)\n\n   with AnyPath('http://example.org') as path:\n       path.open().read()\n\nFirst you register all the providers that you want to use (note: remember to install the dependencies per provider).\nNow you can open any uri that has a scheme known to one of the registered providers.\n\n    +-----------+-----------------------------------------+\n    | Provider  | Schemes                                 |\n    +===========+=========================================+\n    | git       | - `git+http://`                         |\n    |           | - `git+https://`                        |\n    |           | - `git://`                              |\n    +-----------+-----------------------------------------+\n    | mercurial | - `hg+http://`                          |\n    |           | - `hg+https://`                         |\n    +-----------+-----------------------------------------+\n    | http      | - `http://`                             |\n    |           | - `https://`                            |\n    +-----------+-----------------------------------------+\n    | sftp      | - `sftp://`                             |\n    +-----------+-----------------------------------------+\n    | local     | - `file://`                             |\n    +-----------+-----------------------------------------+\n\nYou can use AnyPath either as a contextmanager (`with AnyPath ...`) or directly by calling `fetch()`.\nBeware that you will have to call `close()` manually when not using the contextmanager to cleanup the temporary files.\n\n.. code-block:: python\n\n   path_provider.add(HttpPath)\n   ap = AnyPath('http://example.org')\n   path = ap.fetch() # type: Path\n   path.open().read()\n   ap.close()\n\nPersistance\n^^^^^^^^^^^\nThe example so far was useful if you are only interested in the content of a fetched resource. They are created in a temporary folder, where you can work with them, and are deletetd afterwards.\nSometimes however you may want to persist the remote resource outside of a temporary location.\n\n.. code-block:: python\n\n   path_provider.add(HttpPath)\n\n   with AnyPath('sftp://user@localhost:/path/on/host', persist_dir='/your/local/path') as path:\n       path.open().read()\n\nInstead of copying the files manually you can specify a `persist_dir` when creating the AnyPath. The temporary resources will then be copied to that location.\nAs a result you will get the `persist_dir` wrapped as an `pathlib.Path` instead of the temporary location and you can directly work with it.\n\nProviders and options\n^^^^^^^^^^^^^^^^^^^^^\nWhile the defaults for fetching resources might be fine for many usecases there are many situations where you might want to pass some options to a provider.\nYou might for example want to do a POST with an HttpPath or pass credentials to a GitPath.\n\nOptions are always passed as keyword arguments. Following you will find all providers and their available options.\n\nHttp\n####\nThe options are passed to a requests.Request object, they behave the same and are named accordingly.\n\n.. code-block:: python\n\n   AnyPath('http://example.org', method='GET', data=None, headers=None, params=None)\n\n=========   ============================================================\nOption      Description\n=========   ============================================================\nmethod      Default: 'GET'\n\n            Specifies the HTTP method to be used as a string.\n\n            E.g. POST, DELETE, PUT\n\n\ndata        Default: None\n\n            The body to attach to the request.\n\n            If a dictionary is provided, form-encoding will take place.\n\n\nheaders     Default: None\n\n            A dictionary of headers to send in the request.\n\n\nparams      Default: None\n\n            A dictionary of URL parameters to append to the URL.\n=========   ============================================================\n\nSftp\n####\nThe path for Sftp is expected to be in the format `sftp://user@host:/path/on/host`, additional options can be set via arguments.\n\n.. code-block:: python\n\n   AnyPath('sftp://user@localhost:/path/on/host', password=None, private_key=None, port=22)\n\n============    ============================================================\nOption          Description\n============    ============================================================\npassword        Default: None\n\n                The password for the user.\n\n                Also used if private_key is given,\n                and the key requires a password\n\n\nprivate_key     Default: None\n\n                The path to the local private_key (as a string)\n                if it is used to login\n\n\nport            Default: 22\n\n                The ssh port to be used.\n============    ============================================================\n\nGit\n###\nNone\n\nMercurial\n#########\nNone\n\nLocal\n#####\nNone\n\nLimitations\n^^^^^^^^^^^\nAnyPath is useful if you want to fetch e.g. some config files or a small project directory.\n\nHowever you might not want to use AnyPath if you are working with a huge remote resource.\nEverything is fetched to your local machine, which might take some time and cost a lot of space if you try to work with a whole filesystemn of a remote host for example.\n\nContributing\n============\nYou can contribute in any of the following areas, no matter if it is your first OSS contribution or your thousandst.\nContributions are welcome for example:\n- If you find any issue or bug when using AnyPath\n- If you want to add to the documentation or fix incorrect or missing documentation.\n- If you want to add features or work on the codebase in general\n\nJust file an issue in the tracker first describing what you would like to do and then create a pull-request.\n\nEverything related to this project is governed by the Code of Conduct (CODE_OF_CONDUCT.rst).\n\nLicense\n-------\nAnyPath is licensed under \"Mozilla Public License Version 2.0\". See LICENSE.txt for the full license.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/vaubarth/anypath",
    "keywords": "",
    "license": "Mozilla Public License 2.0 (MPL 2.0)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "anypath",
    "platform": "",
    "project_url": "https://pypi.org/project/anypath/",
    "release_url": "https://pypi.org/project/anypath/0.5.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "AnyPath makes it trivial to fetch remote ressources and work with them locally.",
    "version": "0.5.1"
  },
  "releases": {
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a8fa5510f15f8cc1bf774cf8d5c6e921",
          "sha256": "fb3b76957f42c5ab739c57c1654a34f07f83971bb0b0a68e87d9ee8c071c0a2f"
        },
        "downloads": -1,
        "filename": "anypath-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8fa5510f15f8cc1bf774cf8d5c6e921",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 10770,
        "upload_time": "2018-01-30T07:08:35",
        "url": "https://files.pythonhosted.org/packages/ae/f5/568d702b97f837d1f3978f6707e4d632e2566f46071574dac7d071813a97/anypath-0.5.1-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a8fa5510f15f8cc1bf774cf8d5c6e921",
        "sha256": "fb3b76957f42c5ab739c57c1654a34f07f83971bb0b0a68e87d9ee8c071c0a2f"
      },
      "downloads": -1,
      "filename": "anypath-0.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a8fa5510f15f8cc1bf774cf8d5c6e921",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 10770,
      "upload_time": "2018-01-30T07:08:35",
      "url": "https://files.pythonhosted.org/packages/ae/f5/568d702b97f837d1f3978f6707e4d632e2566f46071574dac7d071813a97/anypath-0.5.1-py3-none-any.whl"
    }
  ]
}