{
  "info": {
    "author": "Emmanuel Blot",
    "author_email": "emmanuel.blot@free.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Other Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: System :: Hardware :: Hardware Drivers"
    ],
    "description": "========\n PyFtdi\n========\n\n\nOverview\n~~~~~~~~\n\n.. |I2C| replace:: I\\ :sup:`2`\\ C\n\nPyFtdi_ aims at providing a user-space driver for modern FTDI_ devices,\nimplemented in pure Python language.\n\nModern FTDI_ devices include:\n\n* UART-only bridges\n\n  * FT232R (single port, clock up to 6 MHz, 3Mbps)\n  * FT230X (single port, clock up to 48 Mhz, 3Mbps)\n\n* UART and multi-serial protocols (SPI, |I2C|, JTAG) bridges\n\n  * FT2232D (dual port, clock up to 6 MHz)\n  * FT232H (single port, clock up to 30 MHz)\n  * FT2232H (dual port, clock up to 30 MHz)\n  * FT4232H (quad port, clock up to 30 MHz)\n\nOther FTDI_ devices could also be supported (including FT232* devices),\nalthough these devices are not a primary goal for PyFtdi_, and therefore have\nnot been tested with PyFtdi_.\n\nPrimary goals\n~~~~~~~~~~~~~\n\nPyFtdi_ currently supports the following features:\n\n* UART/Serial USB converter, up to 12Mbps (depending on the FTDI device\n  capability)\n* Bitbang/GPIO support\n* SPI master\n* |I2C| master\n* JTAG master\n\nPyFtdi_ provides a pyserial_ compliant API, so it can be used as a drop-in\nmodule to access USB-serial converters based on FTDI_ devices.\n\n\nRequirements\n~~~~~~~~~~~~\n\nPython_ 3.5 or above is required. (see next section for Python 2.x support)\n\nPyFtdi_ relies on PyUSB_, which itself depends on one of the following native\nlibraries:\n\n* libusb_, tested with 1.0.21\n\nmay still work, but are fully untested there are nowaways obsolete.\n\nPyFtdi_ does not depend on any other native library, and only uses standard\nPython modules along with PyUSB_\n\nPyFtdi_ has been tested with PyUSB_ 1.0.0. PyUSB_ 1.0.0b1 or below is no longer\nsupported.\n\nNote about previous releases\n----------------------------\n\nIf you have no choice but using previous releases of software, such as\n\n* Python_ (2.6+, 3.3+),\n* other PyUSB_ backends such as the deprecated libusb-0.1, or openusb,\n* PyUSB_ 1.0.0b1 or below,\n* pyserial_ 2.6+ (previous versions of pyserial_ will NOT work)\n\nplease checkout the latest PyFtdi_ 0.1x series (0.13.3) which provides support\nfor these deprecated environmement, but is no longer actively maintained.\n\nStatus\n~~~~~~\n\nThis project is still in beta development stage.\n\nHowever, PyFtdi_ is being forked from a closed-source software implementation\nthat has been successfully used for over several years - including serial\n@ 3Mbps, spi and jtag protocols. PyFtdi_ is developed as an open-source\nsolution.\n\n\nSupported features\n------------------\n\n* All FTDI device ports (UART, MPSSE) can be used simultaneously.\n\n  * However, it is not yet possible to use both GPIO and MPSSE mode on the\n    same port at once\n\n* Several FTDI adapters can be accessed simultaneously from the same Python\n  runtime instance.\n\n* Serial port, up to 12 Mbps. PyFtdi_ includes a pyserial_ emulation layer that\n  offers transparent access to the FTDI serial ports through a pyserial_-\n  compliant API. The ``serialext`` directory contains a minimal serial terminal\n  demonstrating the use of this extension, and a dispatcher automatically\n  selecting the serial backend (pyserial_, PyFtdi_), based on the serial port\n  name.\n\n* SPI master.\n\n  Supported devices:\n\n  =====  ===== ====== ====================================================\n  Mode   CPol   CPha  Status\n  =====  ===== ====== ====================================================\n    0      0      0   Supported on all MPSEE devices\n    1      0      1   Supported on -H series (FT232H/FT2232H/FT4232H)\n    2      1      0   Not supported (FTDI HW limitation)\n    3      1      1   Supported on -H series (FT232H/FT2232H/FT4232H)\n  =====  ===== ====== ====================================================\n\n  PyFtdi_ can be used with pyspiflash_ module that demonstrates how to\n  use the FTDI SPI master with a pure-Python serial flash device driver for\n  several common devices.\n\n  Only half-duplex communication is supported for now.\n\n* |I2C| master. For now, only 7-bit address are supported.\n\n  Supported devices: FT232H, FT2232H, FT4232H\n\n* JTAG is under development and is not fully supported yet.\n\n\nInstallation\n~~~~~~~~~~~~\n\n* Install native dependency. The actual command to install depends on your OS\n  and/or your distribution. Examples:\n\n  * Debian/Ubuntu Linux\n\n      apt-get install libusb-1.0\n\n    You need to create a `udev` configuration file to allow user-space access\n    to the FTDI devices. There are many ways to configure `udev`, here is a\n    typical setup:\n\n    ::\n\n        # /etc/udev/rules.d/11-ftdi.rules\n        SUBSYSTEM==\"usb\", ATTR{idVendor}==\"0403\", ATTR{idProduct}==\"6001\", GROUP=\"plugdev\", MODE=\"0666\"\n        SUBSYSTEM==\"usb\", ATTR{idVendor}==\"0403\", ATTR{idProduct}==\"6011\", GROUP=\"plugdev\", MODE=\"0666\"\n        SUBSYSTEM==\"usb\", ATTR{idVendor}==\"0403\", ATTR{idProduct}==\"6010\", GROUP=\"plugdev\", MODE=\"0666\"\n        SUBSYSTEM==\"usb\", ATTR{idVendor}==\"0403\", ATTR{idProduct}==\"6014\", GROUP=\"plugdev\", MODE=\"0666\"\n        SUBSYSTEM==\"usb\", ATTR{idVendor}==\"0403\", ATTR{idProduct}==\"6015\", GROUP=\"plugdev\", MODE=\"0666\"\n\n    You need to unplug / plug back the FTDI device once this file has been\n    created so that `udev` loads the rules for the matching device.\n\n    With this setup, be sure to add users that want to run PyFtdi_ to the\n    `plugdev` group, *e.g.*\n\n      sudo adduser $USER plugdev\n\n    Remember that you need to log out / log in to get the above command\n    effective.\n\n  * Homebrew macOS\n\n      brew install libusb\n\n  * Windows\n\n      see `Libusb on Windows <libusb_windows>`_\n\n* Install Python dependencies\n\n    pip3 install pyusb\n    pip3 install pyserial\n    pip3 install pyftdi_\n\n\nFTDI device pinout\n~~~~~~~~~~~~~~~~~~\n\n============ ============= ====== ============== ======= ======\n IF/1         IF/2 [#if2]_  UART   |I2C|          SPI     JTAG\n============ ============= ====== ============== ======= ======\n ``ADBUS0``   ``BDBUS0``    TxD    SCK            SCLK    TCK\n ``ADBUS1``   ``BDBUS1``    RxD    SDA/O [#i2c]_  MOSI    TDI\n ``ADBUS2``   ``BDBUS2``    RTS    SDA/I [#i2c]_  MISO    TDO\n ``ADBUS3``   ``BDBUS3``    CTS                   CS0     TMS\n ``ADBUS4``   ``BDBUS4``                          CS1\n ``ADBUS5``   ``BDBUS5``                          CS2\n ``ADBUS6``   ``BDBUS6``                          CS3\n============ ============= ====== ============== ======= ======\n\n.. [#i2c] FTDI pins are either configured as input or output. As |I2C| SDA line\n          is bi-directional, two FTDI pins are required to provide the SDA\n          feature, and they should be connected together and to the SDA |I2C|\n          bus line. Pull-up resistors on SCK and SDA lines should be used.\n.. [#if2] FTDI232H does not support a secondary MPSSE port, only FT2232H and\n          FT4232H do. Note that FTDI4232H has 4 serial ports, but only the first\n          two interfaces are MPSSE-capable.\n\nAPI Overview\n~~~~~~~~~~~~\n\nUART\n----\n\n.. code-block:: python\n\n    # Enable pyserial extensions\n    import pyftdi.serialext\n\n    # Open a serial port on the second FTDI device interface (IF/2) @ 3Mbaud\n    port = pyftdi.serialext.serial_for_url('ftdi://ftdi:2232h/2', baudrate=3000000)\n\n    # Send bytes\n    port.write(b'Hello World')\n\n    # Receive bytes\n    data = port.read(1024)\n\nSPI\n---\n\nExample: communication with a SPI data flash\n\n.. code-block:: python\n\n    # Instanciate a SPI controller\n    spi = SpiController()\n\n    # Configure the first interface (IF/1) of the FTDI device as a SPI master\n    spi.configure('ftdi://ftdi:2232h/1')\n\n    # Get a port to a SPI slave w/ /CS on A*BUS3 and SPI mode 0 @ 12MHz\n    slave = spi.get_port(cs=0, freq=12E6, mode=0)\n\n    # Request the JEDEC ID from the SPI slave\n    jedec_id = slave.exchange([0x9f], 3).tobytes()\n\n\n|I2C|\n-----\n\nExample: communication with an |I2C| GPIO expander\n\n.. code-block:: python\n\n    # Instanciate an I2C controller\n    i2c = I2cController()\n\n    # Configure the first interface (IF/1) of the FTDI device as an I2C master\n    i2c.configure('ftdi://ftdi:2232h/1')\n\n    # Get a port to an I2C slave device\n    slave = i2c.get_port(0x21)\n\n    # Send one byte, then receive one byte\n    slave.exchange([0x04], 1)\n\n    # Write a register to the I2C slave\n    slave.write_to(0x06, b'\\x00')\n\n    # Read a register from the I2C slave\n    slave.read_from(0x00, 1)\n\n\nURL Scheme\n~~~~~~~~~~\n\nThere are generally two ways to open a connection to an Ftdi() object. The\nfirst method is to use the ``open()`` methods which accept VID, PID, and serial\nparameters (among others). These methods are:\n\n* ``open()``\n* ``open_mpsse()``\n* ``open_bitbang()``\n\n``open()``, ``open_mpsse()`` and ``open_bitbang`` arguments have changed in\nv0.22.0, be sure to update your code.\n\nThe second, better way to open a connection is to specify connection details using a\nURL. The URL scheme is defined as:\n\n``protocol://[vendor[:product[:index|:serial]]]/interface``\n\nWhere:\n\n* protocol: always ``ftdi``\n* vendor: the USB vendor ID of the manufacturer\n\n  * ex: ``ftdi`` or ``0x403``\n\n* product: the USB product ID of the device\n\n  * ex: ``232h`` or ``0x6014``\n  * Supported product IDs: ``0x6001``, ``0x6010``, ``0x6011``, ``0x6014``, ``0x6015``\n  * Supported product aliases:\n\n    * ``232``, ``232r``, ``232h``, ``2232d``, ``2232h``, ``4232h``, ``230x``\n    * ``ft`` prefix for all aliases is also accepted, as for example ``ft232h``\n\n* serial: the serial number as a string\n* index: an integer (not particularly useful, as it depends on the enumeration\n  order on the USB buses)\n* interface: the interface of FTDI device, starting from 1\n\n  * ex: ``1`` for 232\\*, ``1`` or ``2`` for 2232\\*, ``1``-``4`` for 4232\\* devices\n\nAll parameters but the interface are optional, PyFtdi tries to find the best\nmatch. Therefore, if you have a single FTDI device connected to your system,\n``ftdi:///1`` should be enough.\n\nYou can also ask PyFtdi to enumerate all the compatible devices with the\nspecial ``ftdi:///?`` syntax.\n\nURLs can be used with the same methods as above by appending ``_from_url`` to\nthe method name such as:\n\n* ``open_from_url()``\n* ``open_mpsse_from_url()``\n* ``open_bitbang_from_url()``\n\n\nTroubleshooting\n---------------\n\n*\"Error: No backend available\"*\n  libusb native library cannot be loaded. Try helping the dynamic loader:\n\n  * On Linux: ``export LD_LIBRARY_PATH=<path>``\n\n    where ``<path>`` is the directory containing the ``libusb-1.*.so``\n    library file\n\n  * On macOS: ``export DYLD_LIBRARY_PATH=.../lib``\n\n    where ``<path>`` is the directory containing the ``libusb-1.*.dylib``\n    library file\n\n*\"Error: Access denied (insufficient permissions)\"*\n  The system may already be using the device.\n\n  * On OS X 10.9+: starting with Mavericks, OS X ships with a native FTDI\n    driver that preempts access to the FTDI device.\n\n    The driver can be unloaded this way:\n\n      ``sudo kextunload [-v] -bundle com.apple.driver.AppleUSBFTDI``\n\n    You may want to use an alias or a tiny script such as\n    ``pyftdi/tools/uphy.sh``\n\n    Please note that the system automatically reloads the driver, so it may be\n    useful to move the kernel extension so that the system never loads it.\n\n  * This error message may also be triggered whenever the communication port is\n    already in use.\n\n*\"serial.serialutil.SerialException: Unable to open USB port\"*\n  May be caused by a conflict with the FTDI virtual COM port (VCOM). Try\n  uninstalling the driver. On macOS, refer to this FTDI macOs\n  `guide <http://www.ftdichip.com/Support/Documents/AppNotes/AN_134_FTDI_Drivers_Installation_Guide_for_MAC_OSX.pdf>`_.\n\n*Slow initialisation on OS X El Capitan*\n It may take several seconds to open or enumerate FTDI devices.\n\n If you run libusb <= v1.0.20, be sure to read the\n `issue <https://github.com/libusb/libusb/commit/5e45e0741daee4fa295c6cc977edfb986c872152>`_\n with OS X 10.11+.\n\n\nDevelopment\n~~~~~~~~~~~\n\nPyFtdi_ is developed on macOS platforms (64-bit kernel), and is validated on a\nregular basis on Linux hosts.\n\nAs it contains no native code, it should work on any PyUSB_ and libusb_\nsupported platforms. However, M$ Windows is a seamless source of issues and is\nnot officially supported, although users have reported successful installation\nwith Windows 7 for example. Your mileage may vary.\n\n\nExamples\n~~~~~~~~\n\nSee `PyFTDI unit tests <PyFtdi_tests>`_ directory for GPIO examples.\n\nSee pyspiflash_ module for SPI examples.\n\nSee pyi2cflash_ module for |I2C| examples.\n\n.. include:: serialext/README.rst\n\n.. _PyFtdi_tests: https://www.github.com/eblot/pyftdi/tree/master/pyftdi/tests\n.. _PyFtdi: https://www.github.com/eblot/pyftdi\n.. _FTDI: http://www.ftdichip.com/\n.. _PyUSB: https://walac.github.io/pyusb/\n.. _Python: https://www.python.org/\n.. _pyserial: https://pythonhosted.org/pyserial/\n.. _libftdi: https://www.intra2net.com/en/developer/libftdi/\n.. _pyspiflash: https://github.com/eblot/pyspiflash/\n.. _pyi2cflash: https://github.com/eblot/pyi2cflash\n.. _libusb: http://www.libusb.info/\n.. _macos_guide: http://www.ftdichip.com/Support/Documents/AppNotes/AN_134_FTDI_Drivers_Installation_Guide_for_MAC_OSX.pdf\n.. _libusb_windows: http://libusb.org/wiki/windows_backend",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/eblot/pyftdi",
    "keywords": "driver,ftdi,usb,serial,spi,i2c,twi,rs232,gpio,bit-bang",
    "license": "LGPL v2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyftdi",
    "platform": "",
    "project_url": "https://pypi.org/project/pyftdi/",
    "release_url": "https://pypi.org/project/pyftdi/0.25.0/",
    "requires_dist": [],
    "requires_python": ">=3.5",
    "summary": "FTDI device driver (pure Python)",
    "version": "0.25.0"
  },
  "releases": {
    "0.10.0": [],
    "0.11.0": [],
    "0.11.1": [],
    "0.11.3": [],
    "0.12.0": [],
    "0.13.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f95b16f42d6d9827e26c64a49fb07c3e",
          "sha256": "691f6fa9578a81a063f32d9aded5ebc1edead7ec25016a21959fe391eaf7a1d1"
        },
        "downloads": 463,
        "filename": "pyftdi-0.13.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f95b16f42d6d9827e26c64a49fb07c3e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 42128,
        "upload_time": "2016-04-27T09:58:25",
        "url": "https://files.pythonhosted.org/packages/8f/16/949ec603497d1fd85f4cb8a111e03ef992421ffb2c6ee6703511c289571f/pyftdi-0.13.2.tar.gz"
      }
    ],
    "0.13.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "04ca68455b222764e0fb7babf3a99125",
          "sha256": "8703304a6f6cd7d0a713ba3e2d38a73cc924340221d808df6fa05ebf025ee9a1"
        },
        "downloads": 0,
        "filename": "pyftdi-0.13.4.tar.gz",
        "has_sig": false,
        "md5_digest": "04ca68455b222764e0fb7babf3a99125",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 40978,
        "upload_time": "2017-05-05T13:06:26",
        "url": "https://files.pythonhosted.org/packages/0d/84/b6999143d31af4881b17818581ce5f8f213b68aad64726d1336c4e5a84f3/pyftdi-0.13.4.tar.gz"
      }
    ],
    "0.2.3": [],
    "0.2.4": [],
    "0.22.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1bec33ca27425612c5441ee47c82c209",
          "sha256": "d7bc730a7718b69b2a047db7bceec52120fd76372486459e68aa463ce1f0e38a"
        },
        "downloads": 0,
        "filename": "pyftdi-0.22.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1bec33ca27425612c5441ee47c82c209",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48234,
        "upload_time": "2017-05-05T13:32:54",
        "url": "https://files.pythonhosted.org/packages/c4/0f/f50caa40c99e80e417e4de81f8b625f18922b183cc7753753dd6bde058db/pyftdi-0.22.1.tar.gz"
      }
    ],
    "0.25.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5bbed4ccda6050214c1d87b8765ff5e4",
          "sha256": "8cf2732959448751c37c60937ecd04e4db1396aae36bb62073dc83428b707203"
        },
        "downloads": 0,
        "filename": "pyftdi-0.25.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5bbed4ccda6050214c1d87b8765ff5e4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 53471,
        "upload_time": "2017-07-24T17:07:19",
        "url": "https://files.pythonhosted.org/packages/89/bf/7feb7676d943d773e287d9ee8920603342546685181e46d71f1a8c60b10d/pyftdi-0.25.0.tar.gz"
      }
    ],
    "0.3.0": [],
    "0.3.3": [],
    "0.4.0": [],
    "0.4.1": [],
    "0.4.2": [],
    "0.4.3": [],
    "0.4.4": [],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5c1c3516c1b98c63d56f1aa5c5e21b54",
          "sha256": "a17d3ed5cb01464bd24a828786c0e07f01ba9ce55d1df263d58e1d9fb43821d9"
        },
        "downloads": 2626,
        "filename": "pyftdi-0.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5c1c3516c1b98c63d56f1aa5c5e21b54",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26738,
        "upload_time": "2011-10-25T12:58:27",
        "url": "https://files.pythonhosted.org/packages/c8/c2/f53746a04fa66b584e9a863d6a49c502f5eb1b9e58240e8d5076a5aefca1/pyftdi-0.4.5.tar.gz"
      }
    ],
    "0.5.0": [],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ae034969ea6f08cb3eab567acc532a26",
          "sha256": "d71a1d335f74a8fa3fbd1f5da2304982224dec343d63c5606342b480d7ac1f73"
        },
        "downloads": 2379,
        "filename": "pyftdi-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ae034969ea6f08cb3eab567acc532a26",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35278,
        "upload_time": "2012-03-16T14:26:59",
        "url": "https://files.pythonhosted.org/packages/7b/7c/61fd1ed2f73556b2ff81904a934f7ad25b79ace1fdc0960bccbb3c841f3e/pyftdi-0.5.1.tar.gz"
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e451689b790f04d194c63a8da1e45b0b",
          "sha256": "5628bf93bd7e963419e40239c51d9adc9885644ad26e279d73280ddae830863c"
        },
        "downloads": 2604,
        "filename": "pyftdi-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e451689b790f04d194c63a8da1e45b0b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35335,
        "upload_time": "2012-03-20T23:01:56",
        "url": "https://files.pythonhosted.org/packages/89/08/b659f4af9eb1f0363e7e88e9f91d6447e9325c420bfba29a85685ae6a428/pyftdi-0.5.2.tar.gz"
      }
    ],
    "0.6.0": [],
    "0.6.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8ae5892986a005fc24433888b7672d6f",
          "sha256": "853bec1cb73543de3441b7b32627ad1f331921fa994f44ae41e131f2e1e37e46"
        },
        "downloads": 29600,
        "filename": "pyftdi-0.6.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8ae5892986a005fc24433888b7672d6f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35097,
        "upload_time": "2012-10-07T15:10:32",
        "url": "https://files.pythonhosted.org/packages/76/00/13608fa04fa9f4b004f503e7e1be4063616a360c1f0c8edd9af7e5e708ce/pyftdi-0.6.3.tar.gz"
      }
    ],
    "0.9.2": [],
    "0.9.3": [],
    "0.9.4": [],
    "0.9.6": []
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5bbed4ccda6050214c1d87b8765ff5e4",
        "sha256": "8cf2732959448751c37c60937ecd04e4db1396aae36bb62073dc83428b707203"
      },
      "downloads": 0,
      "filename": "pyftdi-0.25.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5bbed4ccda6050214c1d87b8765ff5e4",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 53471,
      "upload_time": "2017-07-24T17:07:19",
      "url": "https://files.pythonhosted.org/packages/89/bf/7feb7676d943d773e287d9ee8920603342546685181e46d71f1a8c60b10d/pyftdi-0.25.0.tar.gz"
    }
  ]
}