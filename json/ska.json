{
  "info": {
    "author": "Artur Barseghyan",
    "author_email": "artur.barseghyan@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Security :: Cryptography"
    ],
    "description": "===\nska\n===\nLets you easily sign data, using symmetric-key algorithm encryption. Allows\nyou to validate signed data and identify possible validation errors. Uses\nsha-(1, 224, 256, 385 and 512)/hmac for signature encryption. Allows to use\ncustom hash algorithms. Comes with shortcut functions for signing (and\nvalidating) dictionaries and URLs.\n\nKey concepts\n============\nHosts, that communicate with each other, share the Secret Key, which is used\nto sign data (requests). Secret key is never sent around.\n\nOne of the cases is signing of HTTP requests. Each (HTTP) request is signed\non the sender side using the shared Secret Key and as an outcome produces the\ntriple (``signature``, ``auth_user``, ``valid_until``) which are used to sign\nthe requests.\n\n- ``signature`` (str): Signature generated.\n- ``auth_user`` (str): User making the request. Can be anything.\n- ``valid_until`` (float|str): Signature expiration time (Unix timestamp).\n\nOn the recipient side, (HTTP request) data is validated using the shared\nSecret Key. It's being checked whether signature is valid and not expired.\n\n.. code-block:: text\n\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           Data              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502   Host 1    \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>\u2502   Host 2    \u2502\n    \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502                             \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n    \u2502 secret key  \u2502                             \u2502 secret key  \u2502\n    \u2502 'my-secret' \u2502<\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524 'my-secret' \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           Data              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nFeatures\n========\nCore `ska` module\n-----------------\n- Sign dictionaries.\n- Validate signed dictionaries.\n- Sign URLs. Append and sign additional URL data.\n- Validate URLs.\n- Use one of the built-in algorythms (HMAC SHA-1, HMAC SHA-224, HMAC SHA-256,\n  HMAC SHA-384 or HMAC SHA-512) or define a custom one.\n\nDjango `ska` module (`ska.contrib.django.ska`)\n----------------------------------------------\n- Model decorators for signing absolute URLs. View (including class-based\n  views) decorators for protecting views to authorised parties only (no\n  authentication required).\n- Authentication backend for Django based on the signatures (tokens) generated\n  using `ska`, which allows you to get a password-less login to Django web\n  site. Multiple Secret Keys (per provider) supported. Comes with handy\n  callbacks (possible to customise per provider) for various states of\n  authentication.\n- Template tags for signing URLs from within templates.\n\nPrerequisites\n=============\nPresent\n-------\n- Core ``ska`` module requires Python 2.7, 3.4, 3.5 or 3.6.\n- Django ``ska`` module (``ska.contrib.django.ska``) requires the mentioned\n  above plus Django 1.8, 1.9, 1.10 and 1.11. Note that Django 1.11 is yet\n  experimental.\n\nPast\n----\n- Dropping support of Django 1.5, 1.6 and 1.7 has been announced in version\n  1.6. As of 1.6 everything is still backwards compatible with mentioned\n  versions, but in future backwards compatibility will be wiped out.\n- Dropping support of Python 2.6 and 3.3 has been announced in version 1.6.\n  As of 1.6 everything is still backwards compatible (as much as it's possible\n  within this package) with mentioned versions, but in future backwards\n  compatibility will be wiped out.\n\nInstallation\n============\nLatest stable version from PyPI.\n\n.. code-block:: sh\n\n    pip install ska\n\nLatest stable version from bitbucket.\n\n.. code-block:: sh\n\n    pip install -e hg+https://bitbucket.org/barseghyanartur/ska@stable#egg=ska\n\nLatest stable version from github.\n\n.. code-block:: sh\n\n    pip install https://github.com/barseghyanartur/ska/archive/stable.tar.gz\n\nUsage examples\n==============\nFor integration with Django, see the `Django integration`_ section.\n\nBasic usage\n-----------\nPure Python usage.\n\nSender side\n~~~~~~~~~~~\nSigning URLs is as simple as follows.\n\nRequired imports.\n\n.. code-block:: python\n\n    from ska import sign_url\n\nProducing a signed URL.\n\n.. code-block:: python\n\n    signed_url = sign_url(\n        auth_user='user',\n        secret_key='your-secret_key',\n        url='http://e.com/api/'\n    )\n\n.. code-block:: text\n\n    GET http://e.com/api/?valid_until=1378045287.0&auth_user=user&signature=YlZpLFsjUKBalL4x5trhkeEgqE8%3D\n\nDefault lifetime of a signature is 10 minutes (600 seconds). If you want it\nto be different, provide a ``lifetime`` argument to ``sign_url`` function.\n\nDefault name of the (GET) param holding the generated signature value\nis ``signature``. If you want it to be different, provide a ``signature_param``\nargument to ``sign_url`` function.\n\nDefault name of the (GET) param holding the ``auth_user`` value is\n``auth_user``. If you want it to be different, provide a ``auth_user_param``\nargument to ``sign_url`` function.\n\nDefault name of the (GET) param holding the ``valid_until`` value is\n`valid_until`. If you want it to be different, provide a ``valid_until_param``\nargument to ``sign_url`` function.\n\nNote, that by default a suffix '?' is added after the given ``url`` and\ngenerated signature params. If you want that suffix to be custom, provide a\n``suffix`` argument to the ``sign_url`` function. If you want it to be gone,\nset its' value to empty string.\n\nWith all customisations, it would look as follows:\n\n.. code-block:: python\n\n    from ska import HMACSHA512Signature  # Use HMAC SHA-512 algorithm\n\n    signed_url = sign_url(\n        auth_user='user',\n        secret_key='your-secret_key',\n        lifetime=120,\n        url='http://e.com/api/',\n        signature_param='signature',\n        auth_user_param='auth_user',\n        valid_until_param='valid_until',\n        signature_cls = HMACSHA512Signature\n    )\n\nIt's also possible to add additional data to the signature by providing a\n``extra`` argument (dict). Note, that additional data is signed as well.\nIf request is somehow tampered (values vary from originally provided ones),\nsignature becomes invalid.\n\n.. code-block:: python\n\n    sign_url(\n        auth_user='user',\n        secret_key='your-secret_key',\n        url='http://e.com/api/',\n        extra={\n            'email': 'doe@example.com',\n            'last_name': 'Doe',\n            'first_name': 'Joe'\n        }\n    )\n\nYou may now proceed with the signed URL request. If you use the famous\n``requests`` library, it would be as follows.\n\n.. code-block:: python\n\n    import requests\n    requests.get(signed_url)\n\nIf you want to use POST method instead, you would likely want to get a\ndictionary back, in order to append it to the POST data later.\n\nRequired imports.\n\n.. code-block:: python\n\n    from ska import signature_to_dict\n\nProducing a dictionary containing the signature data, ready to be put into\nthe request (for example POST) data. All customisations mentioned above for\nthe ``sign_url`` function, also apply to the ``signature_to_dict``:\n\n.. code-block:: python\n\n    signature_dict = signature_to_dict(\n        auth_user='user',\n        secret_key='your-secret_key'\n    )\n\n.. code-block:: text\n\n    {\n        'signature': 'YlZpLFsjUKBalL4x5trhkeEgqE8=',\n        'auth_user': 'user',\n        'valid_until': '1378045287.0'\n    }\n\nAdding of additional data to the signature works in the same way:\n\n.. code-block:: python\n\n    signature_dict = signature_to_dict(\n        auth_user='user',\n        secret_key='your-secret_key',\n        extra={\n            'email': 'john.doe@mail.example.com',\n            'first_name': 'John',\n            'last_name': 'Doe'\n        }\n    )\n\n.. code-block:: text\n\n    {\n        'auth_user': 'user',\n        'email': 'john.doe@mail.example.com',\n        'extra': 'email,first_name,last_name',\n        'first_name': 'John',\n        'last_name': 'Doe',\n        'signature': 'cnSoU/LnJ/ZhfLtDLzab3a3gkug=',\n        'valid_until': 1387616469.0\n    }\n\nIf you for some reason prefer a lower level implementation, read the same\nsection in the `Advanced usage (low-level)`_ chapter.\n\nRecipient side\n~~~~~~~~~~~~~~\nValidating the signed request data is as simple as follows.\n\nRequired imports.\n\n.. code-block:: python\n\n    from ska import validate_signed_request_data\n\nValidating the signed request data. Note, that ``data`` value is expected to\nbe a dictionary; ``request.GET`` is given as an example. It will most likely\nvary from what's used in your framework (unless you use Django).\n\n.. code-block:: python\n\n    validation_result = validate_signed_request_data(\n        data=request.GET,  # Note, that ``request.GET`` is given as example.\n        secret_key='your-secret_key'\n    )\n\nThe ``validate_signed_request_data`` produces a\n``ska.SignatureValidationResult`` object, which holds the following data.\n\n- ``result`` (bool): True if data is valid. False otherwise.\n- ``reason`` (list): List of strings, indicating validation errors. Empty list\n  in case if ``result`` is True.\n\nDefault name of the (GET) param holding the signature value is `signature`.\nIf you want it to be different, provide a ``signature_param`` argument to\n``validate_signed_request_data`` function.\n\nDefault name of the (GET) param holding the ``auth_user`` value is\n``auth_user``. If you want it to be different, provide a ``auth_user_param``\nargument to ``validate_signed_request_data`` function.\n\nDefault name of the (GET) param holding the ``valid_until`` value is\n``valid_until``. If you want it to be different, provide a\n``valid_until_param`` argument to ``validate_signed_request_data`` function.\n\nWith all customisations, it would look as follows. Note, that\n``request.GET`` is given as example.\n\n.. code-block:: python\n\n    from ska import HMACSHA256Signature  # Use HMAC SHA-256 algorithm\n\n    validation_result = validate_signed_request_data(\n        data=request.GET,\n        secret_key='your-secret_key',\n        signature_param='signature',\n        auth_user_param='auth_user',\n        valid_until_param='valid_until',\n        signature_cls=HMACSHA256Signature\n    )\n\nIf you for some reason prefer a lower level implementation, read the same\nsection in the `Advanced usage (low-level)`_ chapter.\n\nCommand line usage\n------------------\nIt's possible to generate a signed URL from command line using the\n``ska.generate_signed_url`` module.\n\n:Arguments:\n\n.. code-block:: text\n\n    -h, --help            show this help message and exit\n\n    -au AUTH_USER, --auth-user AUTH_USER\n                          `auth_user` value\n\n    -sk SECRET_KEY, --secret-key SECRET_KEY\n                          `secret_key` value\n\n    -vu VALID_UNTIL, --valid-until VALID_UNTIL\n                          `valid_until` value\n\n    -l LIFETIME, --lifetime LIFETIME\n                          `lifetime` value\n\n    -u URL, --url URL     URL to sign\n\n    -sp SIGNATURE_PARAM, --signature-param SIGNATURE_PARAM\n                          (GET) param holding the `signature` value\n\n    -aup AUTH_USER_PARAM, --auth-user-param AUTH_USER_PARAM\n                          (GET) param holding the `auth_user` value\n\n    -vup VALID_UNTIL_PARAM, --valid-until-param VALID_UNTIL_PARAM\n                          (GET) param holding the `auth_user` value\n\n:Example:\n\n.. code-block:: sh\n\n    ska-sign-url -au user -sk your-secret-key\n\nAdvanced usage (low-level)\n--------------------------\nSender side\n~~~~~~~~~~~\n\nRequired imports.\n\n.. code-block:: python\n\n    from ska import Signature, RequestHelper\n\nGenerate a signature.\n\n.. code-block:: python\n\n    signature = Signature.generate_signature(\n        auth_user='user',\n        secret_key='your-secret-key'\n    )\n\nDefault lifetime of a signature is 10 minutes (600 seconds). If you want it to\nbe different, provide a ``lifetime`` argument to ``generate_signature``\nmethod.\n\n.. code-block:: python\n\n    signature = Signature.generate_signature(\n        auth_user='user',\n        secret_key='your-secret-key',\n        lifetime=120  # Signatre lifetime set to 120 seconds.\n    )\n\nAdding of additional data to the signature works in the same way as in\n``sign_url``.\n\n.. code-block:: python\n\n    signature = Signature.generate_signature(\n        auth_user='user',\n        secret_key='your-secret-key',\n        extra={\n            'email': 'doe@example.com',\n            'last_name': 'Doe',\n            'first_name': 'Joe'\n        }\n    )\n\nFor HMAC SHA-384 algorithm it would look as follows.\n\n.. code-block:: python\n\n    from ska import HMACSHA384Signature\n\n    signature = HMACSHA384Signature.generate_signature(\n        auth_user='user',\n        secret_key='your-secret-key'\n    )\n\nYour endpoint operates with certain param names and you need to wrap generated\nsignature params into the URL. In order to have the job done in an easy way,\ncreate a request helper. Feed names of the (GET) params to the request helper\nand let it make a signed endpoint URL for you.\n\n.. code-block:: python\n\n    request_helper = RequestHelper(\n        signature_param='signature',\n        auth_user_param='auth_user',\n        valid_until_param='valid_until'\n    )\n\nAppend signature params to the endpoint URL.\n\n.. code-block:: python\n\n    signed_url = request_helper.signature_to_url(\n        signature=signature,\n        endpoint_url='http://e.com/api/'\n    )\n\n.. code-block:: text\n\n    GET http://e.com/api/?valid_until=1378045287.0&auth_user=user&signature=YlZpLFsjUKBalL4x5trhkeEgqE8%3D\n\nMake a request.\n\n.. code-block:: python\n\n    import requests\n    r = requests.get(signed_url)\n\n\nFor HMAC SHA-384 algorithm it would look as follows.\n\n.. code-block:: python\n\n    from ska import HMACSHA384Signature\n\n    request_helper = RequestHelper(\n        signature_param='signature',\n        auth_user_param='auth_user',\n        valid_until_param='valid_until',\n        signature_cls=HMACSHA384Signature\n    )\n\n    signed_url = request_helper.signature_to_url(\n        signature=signature,\n        endpoint_url='http://e.com/api/'\n    )\n\nRecipient side\n~~~~~~~~~~~~~~\nRequired imports.\n\n.. code-block:: python\n\n    from ska import RequestHelper\n\nCreate a request helper. Your endpoint operates with certain param names. In\norder to have the job done in an easy way, we feed those params to the\nrequest helper and let it extract data from signed request for us.\n\n.. code-block:: python\n\n    request_helper = RequestHelper(\n        signature_param='signature',\n        auth_user_param='auth_user',\n        valid_until_param='valid_until'\n    )\n\nValidate the request data. Note, that ``request.GET`` is given just as an\nexample.\n\n.. code-block:: python\n\n    validation_result = request_helper.validate_request_data(\n        data=request.GET,\n        secret_key='your-secret-key'\n    )\n\nYour implementation further depends on you, but may look as follows.\n\n.. code-block:: python\n\n    if validation_result.result:\n        # Validated, proceed further\n        # ...\n    else:\n        # Validation not passed.\n        raise Http404(validation_result.reason)\n\nYou can also just validate the signature by calling ``validate_signature``\nmethod of the ``ska.Signature``.\n\n.. code-block:: python\n\n    Signature.validate_signature(\n        signature='EBS6ipiqRLa6TY5vxIvZU30FpnM=',\n        auth_user='user',\n        secret_key='your-secret-key',\n        valid_until='1377997396.0'\n    )\n\nDjango integration\n------------------\n``ska`` comes with Django model- and view-decorators for producing signed URLs\nand and validating the endpoints, as well as with authentication backend,\nwhich allows password-less login into Django web site using `ska` generated\nsignature tokens. There's also a template tag for signing URLs.\n\nDemo\n~~~~\nIn order to be able to quickly evaluate the ``ska``, a demo app (with a quick\ninstaller) has been created (works on Ubuntu/Debian, may work on other Linux\nsystems as well, although not guaranteed). Follow the instructions below for\nhaving the demo running within a minute.\n\nGrab the latest ``ska_example_app_installer.sh`` and execute it:\n\n.. code-block:: sh\n\n    wget -O - https://raw.github.com/barseghyanartur/ska/stable/examples/ska_example_app_installer.sh | bash\n\nOpen your browser and test the app.\n\nFoo listing (ska protected views):\n\n- URL: http://127.0.0.1:8001/foo/\n\nAuthentication page (ska authentication backend):\n\n- URL: http://127.0.0.1:8001/foo/authenticate/\n\nDjango admin interface:\n\n- URL: http://127.0.0.1:8001/admin/\n- Admin username: test_admin\n- Admin password: test\n\nConfiguration\n~~~~~~~~~~~~~\nSecret key (str) must be defined in `settings` module of your project.\n\n.. code-block:: python\n\n    SKA_SECRET_KEY = 'my-secret-key'\n\nThe following variables can be overridden in ``settings`` module of your\nproject.\n\n- ``SKA_UNAUTHORISED_REQUEST_ERROR_MESSAGE`` (str): Plain text error message.\n  Defaults to \"Unauthorised request. {0}\".\n- ``SKA_UNAUTHORISED_REQUEST_ERROR_TEMPLATE`` (str): Path to 401 template that\n  should be rendered in case of 401\n  responses. Defaults to empty string (not provided).\n- ``SKA_AUTH_USER`` (str): The ``auth_user`` argument for ``ska.sign_url``\n  function. Defaults to \"ska-auth-user\".\n\nSee the working `example project\n<https://github.com/barseghyanartur/ska/tree/stable/example>`_.\n\nDjango model method decorator ``sign_url``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nThis is most likely be used in module ``models`` (models.py).\n\nImagine, you have a some objects listing and you want to protect the URLs to\nbe viewed by authorised parties only. You would then use\n``get_signed_absolute_url`` method when rendering the listing (HTML).\n\n.. code-block:: python\n\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n    from django.core.urlresolvers import reverse\n\n    from ska.contrib.django.ska.decorators import sign_url\n\n\n    class FooItem(models.Model):\n\n        title = models.CharField(_(\"Title\"), max_length=100)\n        slug = models.SlugField(unique=True, verbose_name=_(\"Slug\"))\n        body = models.TextField(_(\"Body\"))\n\n        # Unsigned absolute URL, which goes to the foo item detail page.\n        def get_absolute_url(self):\n            return reverse('foo.detail', kwargs={'slug': self.slug})\n\n        # Signed absolute URL, which goes to the foo item detail page.\n        @sign_url()\n        def get_signed_absolute_url(self):\n            return reverse('foo.detail', kwargs={'slug': self.slug})\n\nNote, that ``sign_url`` decorator accepts the following optional arguments.\n\n- ``auth_user`` (str): Username of the user making the request.\n- ``secret_key``: The shared secret key. If set, overrides\n  the ``SKA_SECRET_KEY`` variable set in the `settings` module of your\n  project.\n- ``valid_until`` (float or str ): Unix timestamp. If not given, generated\n  automatically (now + lifetime).\n- ``lifetime`` (int): Signature lifetime in seconds.\n- ``suffix`` (str): Suffix to add after the ``endpoint_url`` and before the\n  appended signature params.\n- ``signature_param`` (str): Name of the GET param name which would hold the\n  generated signature value.\n- `auth_user_param` (str): Name of the GET param name which would hold\n  the ``auth_user`` value.\n- ``valid_until_param`` (str): Name of the GET param name which would hold\n  the ``valid_until`` value.\n\nDjango view decorator ``validate_signed_request``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nTo be used to protect views (file views.py). Should be applied to\nviews (endpoints) that require signed requests. If checks are not successful,\na ``ska.contrib.django.ska.http.HttpResponseUnauthorized`` is returned, which\nis a subclass of Django's ``django.http.HttpResponse``. You can provide your\nown template for 401 error. Simply point the\n``SKA_UNAUTHORISED_REQUEST_ERROR_TEMPLATE`` in `settings` module to the right\ntemplate. See ``ska/contrib/django/ska/templates/ska/401.html`` as a template\nexample.\n\n.. code-block:: python\n\n    from ska.contrib.django.ska.decorators import validate_signed_request\n\n    # Your view that shall be protected\n    @validate_signed_request()\n    def detail(request, slug, template_name='foo/detail.html'):\n        # Your code\n\nNote, that ``validate_signed_request`` decorator accepts the following optional\narguments.\n\n- ``secret_key`` (str) : The shared secret key. If set, overrides\n  the ``SKA_SECRET_KEY`` variable  set in the ``settings`` module of your\n  project.\n- ``signature_param`` (str): Name of the (for example GET or POST) param name\n  which holds the ``signature`` value.\n- ``auth_user_param`` (str): Name of the (for example GET or POST) param name\n  which holds the ``auth_user`` value.\n- ``valid_until_param`` (str): Name of the (foe example GET or POST) param\n  name which holds the ``valid_until`` value.\n\nIf you're using class based views, use the ``m_validate_signed_request``\ndecorator instead of ``validate_signed_request``.\n\nTemplate tags\n~~~~~~~~~~~~~\nThe ``sign_url`` template tag accepts template context and the following\nparams:\n\n- url\n- auth_user: If not given, request.user.get_username() is used.\n- secret_key: If not given, the secret key from settings is used.\n- valid_until: If not given, calculated from ``lifetime``.\n- lifetime: Defaults to ``ska.defaults.SIGNATURE_LIFETIME``.\n- suffix: Defaults to ``ska.defaults.DEFAULT_URL_SUFFIX``.\n- signature_param: Defaults to ``ska.defaultsDEFAULT_SIGNATURE_PARAM``.\n- auth_user_param: Defaults to ``ska.defaults.DEFAULT_AUTH_USER_PARAM``.\n- valid_until_param: Defaults to ``ska.defaults.DEFAULT_VALID_UNTIL_PARAM``.\n- signature_cls: Defaults to ``ska.signatures.Signature``.\n\nUsage example:\n\n.. code-block:: html\n\n    {% load ska_tags %}\n\n    {% for item in items%}\n\n        {% sign_url item.get_absolute_url as item_signed_absolute_url %}\n        <a href=\"{{ item_signed_absolute_url }}\">{{ item }}</a>\n\n    {% endfor %}\n\nAuthentication backend\n~~~~~~~~~~~~~~~~~~~~~~\nAllows you to get a password-less login to Django web site.\n\nBy default, number of logins using the same token is not limited. If you wish\nthat single tokens become invalid after first use, set the following variables\nto True in your projects' Django settings module.\n\n.. code-block:: python\n\n    SKA_DB_STORE_SIGNATURES = True\n    SKA_DB_PERFORM_SIGNATURE_CHECK = True\n\nRecipient side\n++++++++++++++\nRecipient is the host (Django site), to which the sender tries to get\nauthenticated (log in). On the recipient side the following shall be present.\n\nsettings.py\n^^^^^^^^^^^\n.. code-block:: python\n\n    AUTHENTICATION_BACKENDS = (\n        'ska.contrib.django.ska.backends.SkaAuthenticationBackend',\n        'django.contrib.auth.backends.ModelBackend',\n    )\n\n    INSTALLED_APPS = (\n        # ...\n        'ska.contrib.django.ska',\n        # ...\n    )\n\n    SKA_SECRET_KEY = 'secret-key'\n    SKA_UNAUTHORISED_REQUEST_ERROR_TEMPLATE = 'ska/401.html'\n    SKA_REDIRECT_AFTER_LOGIN = '/foo/logged-in/'\n\nurls.py\n^^^^^^^\n.. code-block:: python\n\n    urlpatterns = [\n        url(r'^ska/', include('ska.contrib.django.ska.urls')),\n        url(r'^admin/', include(admin.site.urls)),\n    ]\n\nCallbacks\n^^^^^^^^^\nThere are several callbacks implemented in authentication backend.\n\n- ``USER_GET_CALLBACK`` (string): Fired if user was successfully fetched from\n  database (existing user).\n- ``USER_CREATE_CALLBACK`` (string): Fired right after user has been\n  created (user didn't exist).\n- ``USER_INFO_CALLBACK`` (string): Fired upon successful authentication.\n\nExample of a callback function (let's say, it resides in module\n``my_app.ska_callbacks``):\n\n.. code-block:: python\n\n    def my_callback(user, request, signed_request_data)\n        # Your code\n\n...where:\n\n- ``user`` is ``django.contrib.auth.models.User`` instance.\n- ``request`` is ``django.http.HttpRequest`` instance.\n- ``signed_request_data`` is dictionary with signed request data.\n\nFor example, if you need to assign user to some local Django group, you could\nspecify the group name on the client side (add it to the ``extra`` dictionary)\nand based on that, add the user to the group in the callback.\n\nThe callback is a path qualifier of the callback function. Considering the\nexample above, it would be ``my_app.ska_callbacks.my_callback``.\n\nPrefix names of each callback variable with `SKA_` in your projects' settings\nmodule.\n\nExample:\n\n.. code-block:: python\n\n    SKA_USER_GET_CALLBACK = 'my_app.ska_callbacks.my_get_callback'\n    SKA_USER_CREATE_CALLBACK = 'my_app.ska_callbacks.my_create_callback'\n\nPurging of old signature data\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nIf you have lots of visitors and the ``SKA_DB_STORE_SIGNATURES`` set to True,\nyour database grows. If you wish to get rid of old signature token data, you\nmay want to execute the following command using a cron job.\n\n.. code-block:: sh\n\n    ./manage.py ska_purge_stored_signature_data\n\nSender side\n+++++++++++\nSender is the host (another Django web site) from which users authenticate to\nthe Recipient using signed URLs.\n\nOn the sender side, the only thing necessary to be present is the ``ska``\nmodule for Django and of course the same ``SECRET_KEY`` as on the server side.\nFurther, the server ``ska`` login URL (in our case \"/ska/login/\") shall be\nsigned using ``ska`` (for example, using ``sign_url`` function). The\n``auth_user`` param would be used as a Django username. See the example below.\n\n.. code-block:: python\n\n    from ska import sign_url\n    from ska.contrib.django.ska.settings import SECRET_KEY\n\n    server_ska_login_url = 'https://server-url.com/ska/login/'\n\n    signed_url = sign_url(\n        auth_user='test_ska_user_0',\n        secret_key=SECRET_KEY,\n        url=server_ska_login_url\n        extra={\n            'email': 'john.doe@mail.example.com',\n            'first_name': 'John',\n            'last_name': 'Doe',\n        }\n    )\n\nNote, that you ``extra`` dictionary is optional! If ``email``, ``first_name``\nand ``last_name`` keys are present, upon successful validation, the data\nwould be saved into users' profile.\n\nPut this code, for instance, in your view and then make the generated URL\navailable in template context and render it as a URL so that user can click\non it for authenticating to the server.\n\n.. code-block:: python\n\n    def auth_to_server(request, template_name='auth_to_server.html'):\n        # Some code + obtaining the `signed_url` (code shown above)\n        context = {'signed_url': signed_url}\n\n        return render(request, template_name, context)\n\nSecurity notes\n++++++++++++++\nFrom point of security, you should be serving the following pages via HTTP\nsecure connection:\n\n- The server login page (/ska/login/).\n- The client page containing the authentication links.\n\nMultiple secret keys\n~~~~~~~~~~~~~~~~~~~~\nImagine, you have a site to which you want to offer a password-less login for\nvarious clients/senders and you don't want them all to have one shared secret\nkey, but rather have their own one. Moreover, you specifically want to execute\nvery custom callbacks not only for each separate client/sender, but also for\ndifferent sort of users authenticating.\n\n.. code-block:: text\n\n                              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                              \u2502 Site providing \u2502\n                              \u2502 authentication \u2502\n                              \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n                              \u2502 custom secret  \u2502\n                              \u2502    keys per    \u2502\n                              \u2502     client     \u2502\n                              \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n                              \u2502 Site 1: 'sk-1' \u2502\n                 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>\u2502 Site 2: 'sk-2' \u2502<\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                 \u2502            \u2502 Site 3: 'sk-3' \u2502            \u2502\n                 \u2502      \u250c\u2500\u2500\u2500\u2500>\u2502 Site 4: 'sk-4' \u2502<\u2500\u2500\u2500\u2500\u2510      \u2502\n                 \u2502      \u2502     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2502      \u2502\n                 \u2502      \u2502                            \u2502      \u2502\n                 \u2502      \u2502                            \u2502      \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510  \u250c\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2510  \u250c\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502    Site 1    \u2502  \u2502    Site 2    \u2502  \u2502    Site 3    \u2502  \u2502    Site 4    \u2502\n    \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502  \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502  \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502  \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 \u2502\n    \u2502  secret key  \u2502  \u2502  secret key  \u2502  \u2502  secret key  \u2502  \u2502  secret key  \u2502\n    \u2502    'sk-1'    \u2502  \u2502    'sk-2'    \u2502  \u2502    'sk-3'    \u2502  \u2502    'sk-4'    \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nIn order to make the stated above possible, the concept of providers is\nintroduced. You can define a secret key, callbacks or redirect URL. See an\nexample below. Note, that keys of the ``SKA_PROVIDERS`` (\"client_1\",\n\"client_2\", etc.) are the provider keys.\n\n.. code-block:: python\n\n    SKA_PROVIDERS = {\n        # ********************************************************\n        # ******************** Basic gradation *******************\n        # ********************************************************\n        # Site 1\n        'client_1': {\n            'SECRET_KEY': 'sk-1',\n        },\n\n        # Site 2\n        'client_2': {\n            'SECRET_KEY': 'sk-2',\n        },\n\n        # Site 3\n        'client_3': {\n            'SECRET_KEY': 'sk-3',\n        },\n\n        # Site 4\n        'client_4': {\n            'SECRET_KEY': 'sk-4',\n        },\n\n        # ********************************************************\n        # ******* You make gradation as complex as you wish ******\n        # ********************************************************\n        # Client 1, group users\n        'client_1.users': {\n            'SECRET_KEY': 'client-1-users-secret-key',\n        },\n\n        # Client 1, group power_users\n        'client_1.power_users': {\n            'SECRET_KEY': 'client-1-power-users-secret-key',\n            'USER_CREATE_CALLBACK': 'foo.ska_callbacks.client1_power_users_create',\n        },\n\n        # Client 1, group admins\n        'client_1.admins': {\n            'SECRET_KEY': 'client-1-admins-secret-key',\n            'USER_CREATE_CALLBACK': 'foo.ska_callbacks.client1_admins_create',\n            'REDIRECT_AFTER_LOGIN': '/admin/'\n        },\n    }\n\nSee the \"Callbacks\" section for the list of callbacks.\n\nObviously, server would have to have the full list of providers defined. On\nthe client side you would only have to store the general secret key and of\ncourse the provider UID(s).\n\nWhen making a signed URL on the sender side, you should be providing the\n``provider`` key in the ``extra`` argument. See the example below for how you\nwould do it for ``client_1.power_users``.\n\n.. code-block:: python\n\n    from ska import sign_url\n    from ska.defaults import DEFAULT_PROVIDER_PARAM\n\n    server_ska_login_url = 'https://server-url.com/ska/login/'\n\n    signed_remote_ska_login_url = sign_url(\n        auth_user='test_ska_user',\n        # Using provider-specific secret key. This value shall be equal to\n        # the value of SKA_PROVIDERS['client_1.power_users']['SECRET_KEY'],\n        # defined in your projects' Django settings module.\n        secret_key='client-1-power-users-secret-key',\n        url=server_ska_login_url,\n        extra={\n            'email': 'test_ska_user@mail.example.com',\n            'first_name': 'John',\n            'last_name': 'Doe',\n            # Using provider specific string. This value shall be equal to\n            # the key string \"client_1.power_users\" of SKA_PROVIDERS,\n            # defined in your projcts' Django settings module.\n            DEFAULT_PROVIDER_PARAM: 'client_1.power_users',\n        }\n    )\n\nTesting\n=======\nSimply type:\n\n.. code-block:: sh\n\n    ./runtests.py\n\nOr use tox:\n\n.. code-block:: sh\n\n    tox\n\nOr use tox to check specific env:\n\n.. code-block:: sh\n\n    tox -e py35\n\nOr run Django tests:\n\n.. code-block:: sh\n\n    python examples/simple/manage.py test ska --settings=settings.testing\n\nLicense\n=======\nGPL 2.0/LGPL 2.1\n\nSupport\n=======\nFor any issues contact me at the e-mail given in the `Author`_ section.\n\nAuthor\n======\nArtur Barseghyan <artur.barseghyan@gmail.com>",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/barseghyanartur/ska",
    "keywords": "sign data,sign (HTTP) request,symmetric-key algorithm encryption,sign URL,python,django,password-less login django,password-less authentication backend django",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "ska",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/ska/",
    "release_url": "https://pypi.org/project/ska/1.6.7/",
    "requires_dist": [],
    "requires_python": null,
    "summary": "Sign- and validate- data (dictionaries, strings) using symmetric-key algorithm.",
    "version": "1.6.7"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1b801ecc9a0ee1404b8c651a05300363",
          "sha256": "1686383629e6b39cf786e0045b5b7a628cf928a755a3bc2a1cad70b5edf9b834"
        },
        "downloads": -1,
        "filename": "ska-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1b801ecc9a0ee1404b8c651a05300363",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5703,
        "upload_time": "2013-09-01T14:23:50",
        "url": "https://files.pythonhosted.org/packages/16/fc/37d42744a03a49d15d2a2d98a79a16689898a27d99628b57f3f5f3fab247/ska-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b01e99bd4c6131853120e0f182ace12d",
          "sha256": "1ef23fdebb692ff4fc3dbb148b165366735894fc76076fb7b1d02dba934b374e"
        },
        "downloads": -1,
        "filename": "ska-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b01e99bd4c6131853120e0f182ace12d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7739,
        "upload_time": "2013-09-02T22:13:12",
        "url": "https://files.pythonhosted.org/packages/05/36/d10520149dd5b16fe8f2ff90fe8c8b02ca940cd5b7d593bf411e26e929a4/ska-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2ee37776ee427965ce58480d11836c24",
          "sha256": "fd0008bba41bf45dad9edcfb487ec66297edb48b700dd3ae13a9867a0f1fca8e"
        },
        "downloads": -1,
        "filename": "ska-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2ee37776ee427965ce58480d11836c24",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8807,
        "upload_time": "2013-09-03T21:56:54",
        "url": "https://files.pythonhosted.org/packages/f1/d1/87f12098e6360b84522dbf0900106b9acd9b2586a915192dc47db8c79bc9/ska-0.3.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b744cd8e5da23856e2c35c5986b4a64d",
          "sha256": "103a53edbf29c2458c1a69122140dfec45bd1618949ea56b88710684b41a96ec"
        },
        "downloads": -1,
        "filename": "ska-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b744cd8e5da23856e2c35c5986b4a64d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9440,
        "upload_time": "2013-09-04T07:38:51",
        "url": "https://files.pythonhosted.org/packages/35/25/a57b47e7c46106c0fb88f2784d1ec2a5523200de0136f62117fbe9ecac06/ska-0.4.tar.gz"
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ebb27311195c4f4132a29708828ff6e3",
          "sha256": "7432a91c563f9dfed75d94ef9034a14a2be46a1beb11fe3522f3abac97e7083a"
        },
        "downloads": -1,
        "filename": "ska-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ebb27311195c4f4132a29708828ff6e3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9742,
        "upload_time": "2013-09-04T20:49:31",
        "url": "https://files.pythonhosted.org/packages/9a/92/ce23f23a9678af5baa257b47d63545f092aead597d333acc8e1bb96d84d6/ska-0.5.tar.gz"
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "32ad73ed585f08279e65a4839d3bcd4e",
          "sha256": "561ab7cae9640ca1f2365c7b482fb878da3f6fbfbf82f1bd7cb430060f17167c"
        },
        "downloads": -1,
        "filename": "ska-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "32ad73ed585f08279e65a4839d3bcd4e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9960,
        "upload_time": "2013-09-06T10:46:16",
        "url": "https://files.pythonhosted.org/packages/09/f3/b1460e9cb3beb69b985365c8b7d167c8399588f05f5ad81ff9ee93af3144/ska-0.6.tar.gz"
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3615f0ab561617fc40315088af5d3d5d",
          "sha256": "d0b6f3159c078d5e69b985bc2cad188ede8043fb0981038256ca879b73dad494"
        },
        "downloads": -1,
        "filename": "ska-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "3615f0ab561617fc40315088af5d3d5d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10681,
        "upload_time": "2013-09-12T16:45:31",
        "url": "https://files.pythonhosted.org/packages/97/f7/efe1481cd5ded92d34aa5111f5a0777c3dc9b51c66816f000af932399601/ska-0.7.tar.gz"
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8c71ed000a169f45143badac4abf5f32",
          "sha256": "d307429ac6a554cbe0ebc16991fdb57739bff66916459a4a100c45398ec886a2"
        },
        "downloads": -1,
        "filename": "ska-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "8c71ed000a169f45143badac4abf5f32",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 37588,
        "upload_time": "2013-10-12T22:39:54",
        "url": "https://files.pythonhosted.org/packages/05/b9/07aa70c1e123c4ebfa18239b1ee3230f4fbe213be1c716d96160498ddc7c/ska-0.8.tar.gz"
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9ab281e1905e8339f9237261e49c7c2c",
          "sha256": "33c8a0d4058c6d73a9b04b6349850a87d4ea910ee235a3c4b9559305c1f276f3"
        },
        "downloads": -1,
        "filename": "ska-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "9ab281e1905e8339f9237261e49c7c2c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38957,
        "upload_time": "2013-10-16T08:18:04",
        "url": "https://files.pythonhosted.org/packages/bb/28/b18c06844de5314d9893dabbf04590951643260773d1a6373a029ca44c31/ska-0.9.tar.gz"
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1f84652d1c801fc34ddc6688bbdf5141",
          "sha256": "5367aebff69c6bf61b636b71f2c758e408804441f10d38c7d969254c346548aa"
        },
        "downloads": -1,
        "filename": "ska-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1f84652d1c801fc34ddc6688bbdf5141",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 34375,
        "upload_time": "2013-12-13T11:01:51",
        "url": "https://files.pythonhosted.org/packages/4d/18/a97cd8ead515efbf979e9c04c26f009a838ada592a03fee5df29ceb431f1/ska-1.0.tar.gz"
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3a9a326de1dcd28f0dfd4d321fba70cf",
          "sha256": "5abfc537b7faac209b95e9ab09cd31bfb1284e522e5b6009f30d56d7da2483a8"
        },
        "downloads": -1,
        "filename": "ska-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3a9a326de1dcd28f0dfd4d321fba70cf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 42086,
        "upload_time": "2013-12-14T00:37:10",
        "url": "https://files.pythonhosted.org/packages/72/09/3e8e4a88bce18a1a7ae6dca74da9ae496ded38139da8384cf68ca6db64db/ska-1.1.tar.gz"
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f95b7bc31855cda3a99666ffd9eca7f4",
          "sha256": "4822e0c71397a9363648c54a9603af854c82ff10878c725e039fd39b73bd41d8"
        },
        "downloads": -1,
        "filename": "ska-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f95b7bc31855cda3a99666ffd9eca7f4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 47563,
        "upload_time": "2013-12-17T22:14:26",
        "url": "https://files.pythonhosted.org/packages/79/61/eab781bd6c78809259a29b5c9117363a818ff08a8fbefcc9d573ab49261c/ska-1.2.tar.gz"
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fa14821a1eb9e3c720fb449967abcb64",
          "sha256": "e8f1e5429bc510d2f2f7c79395c798e78fe3421873c7068f98e7e28896b77f42"
        },
        "downloads": -1,
        "filename": "ska-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "fa14821a1eb9e3c720fb449967abcb64",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 50874,
        "upload_time": "2013-12-21T02:48:14",
        "url": "https://files.pythonhosted.org/packages/18/00/6aa26115d315490e7420e7b227501815fa0a0ca7c0750c0b6c4f5ea56106/ska-1.3.tar.gz"
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d99b91db73c502fddbeefae66e9a81c5",
          "sha256": "5fdc1d12132d41ab245f0b0006aa191f87b64dd539d0e441d14749fe54456c8c"
        },
        "downloads": -1,
        "filename": "ska-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d99b91db73c502fddbeefae66e9a81c5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 53403,
        "upload_time": "2013-12-21T14:05:05",
        "url": "https://files.pythonhosted.org/packages/3a/0a/dd103b20ac64b7dc16f2518fa40cca710c1dc30ff461edb65e5215a45d77/ska-1.4.tar.gz"
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0c54b6e30aed7981abc8644c4b41b7ed",
          "sha256": "a7d1804def91c1fd68a6ec5e4c53e3cffeb2f7d2b3339a07db61904ad8907460"
        },
        "downloads": -1,
        "filename": "ska-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0c54b6e30aed7981abc8644c4b41b7ed",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 62285,
        "upload_time": "2013-12-23T16:58:36",
        "url": "https://files.pythonhosted.org/packages/23/9b/7d26b550c67acff1f1846c9feb77537ca8c31710c85958a520e5ed193e26/ska-1.4.1.tar.gz"
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6fc9fa2834abbf4b009b5e061d38e3b9",
          "sha256": "2d0df4805f5eaa22e8a895a88e342c8ae4044ba61a0a58588350f7733bcbbe9f"
        },
        "downloads": -1,
        "filename": "ska-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6fc9fa2834abbf4b009b5e061d38e3b9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 61769,
        "upload_time": "2013-12-25T11:12:51",
        "url": "https://files.pythonhosted.org/packages/ff/44/9764f1c533d7c8a9f14d26298ee5aed40d4d3d8f1740c35699dc1c55cc21/ska-1.4.2.tar.gz"
      }
    ],
    "1.4.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "668997a061aefaa820185d683e8d9006",
          "sha256": "9a8c1ac91bd819d028301e9f42623f49b9912308068c23cb32aca0c2fd47f848"
        },
        "downloads": -1,
        "filename": "ska-1.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "668997a061aefaa820185d683e8d9006",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 57913,
        "upload_time": "2014-02-28T21:23:01",
        "url": "https://files.pythonhosted.org/packages/df/95/a6d18c41d70ec1269b73ed03c6df3dd192e5e4d27131c9e3f15c36165d49/ska-1.4.3.tar.gz"
      }
    ],
    "1.4.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eee57dc9aeea2e785c5fa2545cf8d2cf",
          "sha256": "1bebb5c0e1edcf26805ae6996603293e1b0e3cb611a5d28966d042d512f97d03"
        },
        "downloads": -1,
        "filename": "ska-1.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "eee57dc9aeea2e785c5fa2545cf8d2cf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 57368,
        "upload_time": "2014-05-06T14:43:10",
        "url": "https://files.pythonhosted.org/packages/dc/73/0690f8983d143796de80f73007eee93fb9db563db8d56afbf92020dc48f8/ska-1.4.4.tar.gz"
      }
    ],
    "1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "274bbce4bca854e096685da483f34526",
          "sha256": "5f381fb422ce27bf6d385d40920e8bf256e714881cea619f9d7dfaef62a29783"
        },
        "downloads": -1,
        "filename": "ska-1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "274bbce4bca854e096685da483f34526",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 60169,
        "upload_time": "2014-06-04T16:33:19",
        "url": "https://files.pythonhosted.org/packages/3c/74/35e527b487f18ec2036842e7aa436d56c2df178e16a508dcf93f6ab7d80a/ska-1.5.tar.gz"
      }
    ],
    "1.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cb4b715c21e593baec6fb85dfd9a86df",
          "sha256": "ce42c7f90f97754664f5452d3308ea2237349d16889caf44eddde6bb880bb3fc"
        },
        "downloads": -1,
        "filename": "ska-1.6-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb4b715c21e593baec6fb85dfd9a86df",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 64463,
        "upload_time": "2016-12-02T22:52:38",
        "url": "https://files.pythonhosted.org/packages/fa/0c/185960ad6ccf8a2fb0413460b7183397c399593042b0fafc8470fb081d64/ska-1.6-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4a05a000c8fc6bdbb969c3244a75a323",
          "sha256": "75b9eeaab47e82d2b36294d78c20a0e4c3d23d98ebcf7ab5fda71f8c45db15f5"
        },
        "downloads": -1,
        "filename": "ska-1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4a05a000c8fc6bdbb969c3244a75a323",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66023,
        "upload_time": "2016-12-02T22:52:35",
        "url": "https://files.pythonhosted.org/packages/93/c5/873b1b3166dc7aada246b411ae2d9f0f15b7419a4ad2dabb0ec483d4736b/ska-1.6.tar.gz"
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b4e704c15ba6a5691a9e2d2661554589",
          "sha256": "a09b7fae69fbb8cb8ff990aa1ad379e9f6179bd9956a0183a6925b41d67257a2"
        },
        "downloads": -1,
        "filename": "ska-1.6.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "b4e704c15ba6a5691a9e2d2661554589",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 64897,
        "upload_time": "2016-12-03T22:02:39",
        "url": "https://files.pythonhosted.org/packages/0e/1d/26abecab592711486d6e6190d3e9558d025948cb8fa8a2e81aea43ec81a1/ska-1.6.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b613227b7a483692288b670ebdd35734",
          "sha256": "f5d3150392c994a8abf552cbc1953f47111785fd7165cb06dab8441347708db3"
        },
        "downloads": -1,
        "filename": "ska-1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b613227b7a483692288b670ebdd35734",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66842,
        "upload_time": "2016-12-03T22:02:36",
        "url": "https://files.pythonhosted.org/packages/a0/df/e23169db84041798395152732b812cb5a2ba61bff30cfdf04be3f9cbc656/ska-1.6.1.tar.gz"
      }
    ],
    "1.6.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "efb0a6d14057b564003c1ba8878d59f0",
          "sha256": "b6ed3f425a02a7ae9e88100027dfce92e2bb467cdbc0cf2b6d0515d3e922789a"
        },
        "downloads": -1,
        "filename": "ska-1.6.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "efb0a6d14057b564003c1ba8878d59f0",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 65002,
        "upload_time": "2016-12-03T22:37:34",
        "url": "https://files.pythonhosted.org/packages/39/55/ea426e830dccf95635d720caeeb8ee29dce71db0140f77f9f79c9aa107da/ska-1.6.2-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "edccd41045b50acee4d14447c912596c",
          "sha256": "222590eaa473719566536c6e08394f671a355066f6e4cd40ec48e0210fd7cc26"
        },
        "downloads": -1,
        "filename": "ska-1.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "edccd41045b50acee4d14447c912596c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66933,
        "upload_time": "2016-12-03T22:37:32",
        "url": "https://files.pythonhosted.org/packages/58/d3/85f62f775b812b7d230a0218900a64519195bc290622ca9f6af172a24887/ska-1.6.2.tar.gz"
      }
    ],
    "1.6.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cb3579174d05660f28509ad52fd30412",
          "sha256": "5543989388d60cfa52525542ad3bf1c8bd3cda028f252f3e5607e9483b8da251"
        },
        "downloads": -1,
        "filename": "ska-1.6.3-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "cb3579174d05660f28509ad52fd30412",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 65027,
        "upload_time": "2016-12-04T21:37:10",
        "url": "https://files.pythonhosted.org/packages/b2/22/7d7d5fc21e2dc0360ac4b5dd754949cd68cdbbd4998c6c85ce55ac45478c/ska-1.6.3-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9212682ff035d3ee055f8c20b6d8bc32",
          "sha256": "fed1b99bae9a1020f86f171c840341fdfbc8d6acd44c850280bd64f2be60ba94"
        },
        "downloads": -1,
        "filename": "ska-1.6.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9212682ff035d3ee055f8c20b6d8bc32",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66976,
        "upload_time": "2016-12-04T21:37:06",
        "url": "https://files.pythonhosted.org/packages/ca/45/bf1ab8ceae86267b97214de57d5b500b286a5403cf364b5999d8effffc18/ska-1.6.3.tar.gz"
      }
    ],
    "1.6.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0e65c8f1d2f87d3ceedb1aa1fb8b1d7f",
          "sha256": "1c766cf24b450479baaf125db92115d3d2b5cccbd3e3b7ada3f0e80c534a955a"
        },
        "downloads": -1,
        "filename": "ska-1.6.4-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e65c8f1d2f87d3ceedb1aa1fb8b1d7f",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 66766,
        "upload_time": "2016-12-06T00:26:39",
        "url": "https://files.pythonhosted.org/packages/d5/5a/6ee06891a867803220b042fe1b0d608fcde2109e71f0c200ae85ec61a610/ska-1.6.4-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "610c1ae25e8feb4349ff9a3ae4c6e67a",
          "sha256": "747257885f83f5de0ca3d7649f5b4f2695e0620e664332689dbd76ae9966bbf7"
        },
        "downloads": -1,
        "filename": "ska-1.6.4.tar.gz",
        "has_sig": false,
        "md5_digest": "610c1ae25e8feb4349ff9a3ae4c6e67a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 68355,
        "upload_time": "2016-12-06T00:26:36",
        "url": "https://files.pythonhosted.org/packages/79/3e/347fe3e7a80bf208903b19d8d5473bb1f702ca0a5159e90cf327eb48a93c/ska-1.6.4.tar.gz"
      }
    ],
    "1.6.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c2bf1df66c9d94735b6ec27bc4778a04",
          "sha256": "82e856af8f2b05a79b6182c54d8afd13f89b24d3f9b669e7bb577f1ea1ae63b9"
        },
        "downloads": -1,
        "filename": "ska-1.6.5-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "c2bf1df66c9d94735b6ec27bc4778a04",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 66792,
        "upload_time": "2016-12-06T22:08:26",
        "url": "https://files.pythonhosted.org/packages/d2/68/47b26d9179e0a0473de02c19721de32b6381a7447eee7828293c3490a69a/ska-1.6.5-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "eb7e1afaa8a143b2e924fee35cdc33cf",
          "sha256": "e2be503c9a5917f8509805067107b027f2f40261755389a186d98059d3a220cc"
        },
        "downloads": -1,
        "filename": "ska-1.6.5.tar.gz",
        "has_sig": false,
        "md5_digest": "eb7e1afaa8a143b2e924fee35cdc33cf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 68361,
        "upload_time": "2016-12-06T22:08:23",
        "url": "https://files.pythonhosted.org/packages/6b/4f/5bd464a340e2b811e6affdffef48c84e84a345a5a468ba218c1c1fc83eee/ska-1.6.5.tar.gz"
      }
    ],
    "1.6.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b7660a9d503c56b3f12109d027e56cd4",
          "sha256": "7d7eb9647e4bccd53c24d9aa6f04fd55617335c6824601d31c8e9f66f9e76315"
        },
        "downloads": -1,
        "filename": "ska-1.6.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7660a9d503c56b3f12109d027e56cd4",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 66821,
        "upload_time": "2017-02-09T21:57:10",
        "url": "https://files.pythonhosted.org/packages/60/61/4714d35db5d1e07212c61c4c4f302b7a68bb94873dd69133b710b3bf1fb6/ska-1.6.6-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c9b8be234675205a81669ea3a7aa943f",
          "sha256": "28e6fc4680e7d5581c76346b140439fb99efaffa21a25bf5c88613a3334aa846"
        },
        "downloads": -1,
        "filename": "ska-1.6.6.tar.gz",
        "has_sig": false,
        "md5_digest": "c9b8be234675205a81669ea3a7aa943f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 68355,
        "upload_time": "2017-02-09T21:57:06",
        "url": "https://files.pythonhosted.org/packages/e7/b6/bbda0e92a14b48356abf70066bac5df7ebc192857685ea6c595ecc496ed7/ska-1.6.6.tar.gz"
      }
    ],
    "1.6.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "da674ab6de14cc353beb6494ce41e17f",
          "sha256": "9e1ec143598c4804684055ba8192173e0aa0f0003ddd80f0fac31f9f13e5edc7"
        },
        "downloads": -1,
        "filename": "ska-1.6.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "da674ab6de14cc353beb6494ce41e17f",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 67006,
        "upload_time": "2017-02-09T21:58:00",
        "url": "https://files.pythonhosted.org/packages/3c/9e/9b76d8baf038fd909868fe48bbddf35ba189f60ed8d08407cd87476d9f1f/ska-1.6.7-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "44ef77a381ae35b494ef6a02677b72e3",
          "sha256": "e4350383d9481d4647fb2ed3ec9e5647bc4133bec4348ecd6dca667566a410e5"
        },
        "downloads": -1,
        "filename": "ska-1.6.7.tar.gz",
        "has_sig": false,
        "md5_digest": "44ef77a381ae35b494ef6a02677b72e3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 68618,
        "upload_time": "2017-02-09T21:57:58",
        "url": "https://files.pythonhosted.org/packages/8d/36/254fb8745ab085690851594074c1fe7675778b0d40042bd851a47025f2ad/ska-1.6.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "da674ab6de14cc353beb6494ce41e17f",
        "sha256": "9e1ec143598c4804684055ba8192173e0aa0f0003ddd80f0fac31f9f13e5edc7"
      },
      "downloads": -1,
      "filename": "ska-1.6.7-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "da674ab6de14cc353beb6494ce41e17f",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "size": 67006,
      "upload_time": "2017-02-09T21:58:00",
      "url": "https://files.pythonhosted.org/packages/3c/9e/9b76d8baf038fd909868fe48bbddf35ba189f60ed8d08407cd87476d9f1f/ska-1.6.7-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "44ef77a381ae35b494ef6a02677b72e3",
        "sha256": "e4350383d9481d4647fb2ed3ec9e5647bc4133bec4348ecd6dca667566a410e5"
      },
      "downloads": -1,
      "filename": "ska-1.6.7.tar.gz",
      "has_sig": false,
      "md5_digest": "44ef77a381ae35b494ef6a02677b72e3",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 68618,
      "upload_time": "2017-02-09T21:57:58",
      "url": "https://files.pythonhosted.org/packages/8d/36/254fb8745ab085690851594074c1fe7675778b0d40042bd851a47025f2ad/ska-1.6.7.tar.gz"
    }
  ]
}