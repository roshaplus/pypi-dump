{
  "info": {
    "author": "Vojtech Stefka",
    "author_email": "vojtech.stefka@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.8",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "## Django Admin Page Lock\n\nPage Lock for Django Admin allows developers to implement customizable locking pages.\nWith Admin Page Locking, only the designated (typically first) user receives full rights.\nSubsequent users get only rights assigned by the administrator. You can store page log data in\nyour application\u2019s defined database.\n\n#### Use Case:\n1. User-1 lands on page. User1 has full rights (editing).\n2. Users-N can land and view page, but cannot use full rights (no editing).\n3. User-1 leaves.\n4. Whoever next enters, or refreshes, becomes User-1.\n\n### Features\n* two models are available that define storing/loading data from storage (`redis` or `database`);\n* developer can disable whole locking functionality;\n* page url being lock can be composed with or without url parameters;\n* very customizable.\n\n### Requirements\n* Django 1.8;\n* Python 2.7.\n\n### Instalation\n* run `pip install django-admin-page-lock`;\n* add `admin_page_lock` to `setings.py`;\n* run `./manage.py migrate` or `./manage.py syncdb`.\n\n### Configuration\n* update template by adding:\n    ```\n    <div id=\"page_lock_bar\">\n        <div id=\"page_lock_message_display\"></div>\n        <div id=\"page_lock_counter_display\"></div>\n        <button type=\"button\" id=\"page_lock_refresh_button\">{% trans \"REFRESH\" %}</button>\n        <button type=\"button\" id=\"page_lock_reload_button\">{% trans \"RELOAD\" %}</button>\n        <input type=\"hidden\" id=\"page_lock_template_data\" value=\"{{ page_lock_template_data }}\">\n        <input type=\"hidden\" id=\"page_lock_api_interval\" value=\"{{ page_lock_api_interval }}\">\n    </div>\n    ```\n  Note:\n  * to hide locking buttons for pages where locking logic is not needed, update template by adding js block:\n  ```\n  <script type=\"text/javascript\">\n    $(document).ready(function() {\n        var api_interval = parseInt($('#page_lock_api_interval').val());\n        if (!api_interval) {\n            $('.page_lock_bar').hide();\n        }\n    });\n  </script>\n  ```;\n* mark `html` items by `class=page_lock_block` to hide/show them;\n* update `css` file in order to enhance included `html` code;\n* views where you want to apply locking logic must be inherited from either `PageLockAdminMixin` or `PageLockViewMixin` for `django admin views` or `django views`, respectively;\n* re-define parameters in your settings if you don't want to use default ones:\n\n| Name                   | Type       | Description                                        |\n| ---------------------- | ---------- | -------------------------------------------------- |\n| API_INTERVAL           | integer    | interval between API calls from `js`               |\n| CAN_OPEN_MORE_TABS     | boolean    | whether use can open one page in more tabs         |\n| DISABLE_CRSF_TOKEN     | boolean    | whether app uses `CSRF` protection                 |\n| DISABLE                | boolean    | switching off/on locking logic                     |\n| HANDLER_CLASS          | string     | in case you want to define your handler            |\n| HOMEPAGE               | string     | page to redirect user if something goes wrong      |\n| MESSAGES               | dictionary | for customizing messages (not implemented yet)     |\n| TIMEOUT                | integer    | interval user stays on the page without refreshing |\n| MODEL                  | string     | where data are stored (`redis` or `database`)      |\n| REDIS_SETTINGS         | dictionary | settings of app `redis`                            |\n| URL_IGNORE_PARAMETERS  | boolean    | whether url parameters are taken into account      |\n\n### APIs\n\n#### 1. ClosePageConnection\nThere are several `APIs` listed bellow. There are implemented in the way that they can be used by both frontend (`js`)\nand backend (`python`). The logic is implemented in `handlers.py` and depends on chosen model as well.\n\nOn the first glance, you can think that `GetPageInfo` and `OpenPageConnection` are same `APIs` but\nthe functionality of first one doesn't change anything but second one.\n\n| Method    |Name                | Type      | Description                                       |\n|---------- |------------------- | --------- | ------------------------------------------------- |\n| POST      | url                | string    | url of the page                                   |\n| POST      | user_reference     | string    | reference of user (`id` or `current section` )    |\n| POST      | csrf_token         | string    | generated `csfr` protection token                 |\n| GET       | is_locked          | boolean   | whether the page is locked                        |\n\n#### 2. GetPageInfo\n\n| Method    |Name                | Type      | Description                                       |\n|---------- |------------------- | --------- | ------------------------------------------------- |\n| POST      | url                | string    | url of the page                                   |\n| POST      | user_reference     | string    | reference of user (`id` or `current section` )    |\n| POST      | csrf_token         | string    | generated `csfr` protection token                 |\n| GET       | is_locked          | boolean   | whether the page is locked                        |\n| GET       | locked_by          | string    | user_reference of user locking current page       |\n| GET       | page_lock_settings | dictionary| various parameters of settings                    |\n| GET       | reconnected        | boolean   | whether user is reconnected (not implemented yet) |\n\n#### 3. OpenPageConnection\n\n| Method    |Name                | Type      | Description                                       |\n|---------- |------------------- | --------- | ------------------------------------------------- |\n| POST      | url                | string    | url of the page                                   |\n| POST      | user_reference     | string    | reference of user (`id` or `current section` )    |\n| POST      | csrf_token         | string    | generated `csfr` protection token                 |\n| GET       | is_locked          | boolean   | whether the page is locked                        |\n| GET       | locked_by          | string    | user_reference of user locking current page       |\n| GET       | page_lock_settings | dictionary| various parameters of settings                    |\n| GET       | reconnected        | boolean   | whether user is reconnected (not implemented yet) |\n\n\n### TODO\nThere are still several functionalities missing. I would appreciate any contribution.\n* writing unit tests;\n* finish using `CAN_OPEN_MORE_TABS` settings parameter;\n* migrating logic related to reopening from `OpenPageConnection` to new API `ReopenPageConnection`;\n\n### To be implemented soon:\n1. User lands on page. Page is locked for only this user.\n2. Other user attempts to open page.\n3. Other users get redirected to landing page (homepage, create new, and so on).\n\n### Users\n* Showmax uses this package as part of Content Management System.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ShowMax/django-admin-page-lock",
    "keywords": "django",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-admin-page-lock",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-admin-page-lock/",
    "release_url": "https://pypi.org/project/django-admin-page-lock/1.2.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Page Lock application prevents users being able to edit same page defined by its unique URL at the same time. The application is tailored to django admin implementation.",
    "version": "1.2.0"
  },
  "releases": {
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "15ac2577c6d35abaa228c949f3e5c619",
          "sha256": "5923d342cc94dd7b1d248e140856b506fccfce33b77bd54a02148c8846be17ff"
        },
        "downloads": -1,
        "filename": "django-admin-page-lock-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "15ac2577c6d35abaa228c949f3e5c619",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26439,
        "upload_time": "2017-10-18T07:17:00",
        "url": "https://files.pythonhosted.org/packages/fd/dc/c7a934d015ff49244d7bb09c1faff39ddddb7939e79631a48657ea269610/django-admin-page-lock-1.1.1.tar.gz"
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "064042566d50455381a887aa34a47c0a",
          "sha256": "ea83dd2fddc3aa7abafb840fb47decff99373a976648f0ab2f51a0f8ee71ab26"
        },
        "downloads": -1,
        "filename": "django-admin-page-lock-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "064042566d50455381a887aa34a47c0a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26476,
        "upload_time": "2017-10-18T07:23:18",
        "url": "https://files.pythonhosted.org/packages/a7/79/60b241eb1d6a8c80fd73675019dc16772239b389fc77f208297dc15bbaf0/django-admin-page-lock-1.1.2.tar.gz"
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4df28773eba6bd670aff4d464900c740",
          "sha256": "01105bc076fa84da86491c9e33e988e04274bc3611c9e35d9e6197ca2e3bec63"
        },
        "downloads": -1,
        "filename": "django-admin-page-lock-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4df28773eba6bd670aff4d464900c740",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26466,
        "upload_time": "2017-10-30T15:39:34",
        "url": "https://files.pythonhosted.org/packages/54/f6/c813bcbd96a6740a73f255f7695fb2efe0ecba211d395938a7a8d8c1b8cc/django-admin-page-lock-1.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4df28773eba6bd670aff4d464900c740",
        "sha256": "01105bc076fa84da86491c9e33e988e04274bc3611c9e35d9e6197ca2e3bec63"
      },
      "downloads": -1,
      "filename": "django-admin-page-lock-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4df28773eba6bd670aff4d464900c740",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 26466,
      "upload_time": "2017-10-30T15:39:34",
      "url": "https://files.pythonhosted.org/packages/54/f6/c813bcbd96a6740a73f255f7695fb2efe0ecba211d395938a7a8d8c1b8cc/django-admin-page-lock-1.2.0.tar.gz"
    }
  ]
}