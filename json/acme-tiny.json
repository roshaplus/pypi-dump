{
  "info": {
    "author": "Daniel Roesler",
    "author_email": "diafygi@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# acme-tiny\n\n[![Build Status](https://travis-ci.org/diafygi/acme-tiny.svg)](https://travis-ci.org/diafygi/acme-tiny)\n[![Coverage Status](https://coveralls.io/repos/diafygi/acme-tiny/badge.svg?branch=master&service=github)](https://coveralls.io/github/diafygi/acme-tiny?branch=master)\n\nThis is a tiny, auditable script that you can throw on your server to issue\nand renew [Let's Encrypt](https://letsencrypt.org/) certificates. Since it has\nto be run on your server and have access to your private Let's Encrypt account\nkey, I tried to make it as tiny as possible (currently less than 200 lines).\nThe only prerequisites are python and openssl.\n\n**PLEASE READ THE SOURCE CODE! YOU MUST TRUST IT WITH YOUR PRIVATE KEYS!**\n\n##Donate\n\nIf this script is useful to you, please donate to the EFF. I don't work there,\nbut they do fantastic work.\n\n[https://eff.org/donate/](https://eff.org/donate/)\n\n## How to use this script\n\nIf you already have a Let's Encrypt issued certificate and just want to renew,\nyou should only have to do Steps 3 and 6.\n\n### Step 1: Create a Let's Encrypt account private key (if you haven't already)\n\nYou must have a public key registered with Let's Encrypt and sign your requests\nwith the corresponding private key. If you don't understand what I just said,\nthis script likely isn't for you! Please use the official Let's Encrypt\n[client](https://github.com/letsencrypt/letsencrypt).\nTo accomplish this you need to initially create a key, that can be used by\nacme-tiny, to register a account for you and sign all following requests.\n\n```\nopenssl genrsa 4096 > account.key\n```\n\n#### Use existing Let's Encrypt key\n\nAlternatively you can convert your key, previously generated by the original\nLet's Encrypt client.\n\nThe private account key from the Let's Encrypt client is saved in the\n[JWK](https://tools.ietf.org/html/rfc7517) format. `acme-tiny` is using the PEM\nkey format. To convert the key, you can use the tool\n[conversion script](https://gist.github.com/JonLundy/f25c99ee0770e19dc595) by JonLundy:\n\n```sh\n# Download the script\nwget -O - \"https://gist.githubusercontent.com/JonLundy/f25c99ee0770e19dc595/raw/6035c1c8938fae85810de6aad1ecf6e2db663e26/conv.py\" > conv.py\n\n# Copy your private key to your working directory\ncp /etc/letsencrypt/accounts/acme-v01.api.letsencrypt.org/directory/<id>/private_key.json private_key.json\n\n# Create a DER encoded private key\nopenssl asn1parse -noout -out private_key.der -genconf <(python conv.py private_key.json)\n\n# Convert to PEM\nopenssl rsa -in private_key.der -inform der > account.key\n```\n\n### Step 2: Create a certificate signing request (CSR) for your domains.\n\nThe ACME protocol (what Let's Encrypt uses) requires a CSR file to be submitted\nto it, even for renewals. You can use the same CSR for multiple renewals. NOTE:\nyou can't use your account private key as your domain private key!\n\n```\n#generate a domain private key (if you haven't already)\nopenssl genrsa 4096 > domain.key\n```\n\n```\n#for a single domain\nopenssl req -new -sha256 -key domain.key -subj \"/CN=yoursite.com\" > domain.csr\n\n#for multiple domains (use this one if you want both www.yoursite.com and yoursite.com)\nopenssl req -new -sha256 -key domain.key -subj \"/\" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf \"[SAN]\\nsubjectAltName=DNS:yoursite.com,DNS:www.yoursite.com\")) > domain.csr\n```\n\n### Step 3: Make your website host challenge files\n\nYou must prove you own the domains you want a certificate for, so Let's Encrypt\nrequires you host some files on them. This script will generate and write those\nfiles in the folder you specify, so all you need to do is make sure that this\nfolder is served under the \".well-known/acme-challenge/\" url path. NOTE: Let's\nEncrypt will perform a plain HTTP request to port 80 on your server, so you\nmust serve the challenge files via HTTP (a redirect to HTTPS is fine too).\n\n```\n#make some challenge folder (modify to suit your needs)\nmkdir -p /var/www/challenges/\n```\n\n```nginx\n#example for nginx\nserver {\n    listen 80;\n    server_name yoursite.com www.yoursite.com;\n\n    location /.well-known/acme-challenge/ {\n        alias /var/www/challenges/;\n        try_files $uri =404;\n    }\n\n    ...the rest of your config\n}\n```\n\n### Step 4: Get a signed certificate!\n\nNow that you have setup your server and generated all the needed files, run this\nscript on your server with the permissions needed to write to the above folder\nand read your private account key and CSR.\n\n```\n#run the script on your server\npython acme_tiny.py --account-key ./account.key --csr ./domain.csr --acme-dir /var/www/challenges/ > ./signed.crt\n```\n\n### Step 5: Install the certificate\n\nThe signed https certificate that is output by this script can be used along\nwith your private key to run an https server. You need to include them in the\nhttps settings in your web server's configuration. Here's an example on how to\nconfigure an nginx server:\n\n```\n#NOTE: For nginx, you need to append the Let's Encrypt intermediate cert to your cert\nwget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem\ncat signed.crt intermediate.pem > chained.pem\n```\n\n```nginx\nserver {\n    listen 443;\n    server_name yoursite.com, www.yoursite.com;\n\n    ssl on;\n    ssl_certificate /path/to/chained.pem;\n    ssl_certificate_key /path/to/domain.key;\n    ssl_session_timeout 5m;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA;\n    ssl_session_cache shared:SSL:50m;\n    ssl_dhparam /path/to/server.dhparam;\n    ssl_prefer_server_ciphers on;\n\n    ...the rest of your config\n}\n\nserver {\n    listen 80;\n    server_name yoursite.com, www.yoursite.com;\n\n    location /.well-known/acme-challenge/ {\n        alias /var/www/challenges/;\n        try_files $uri =404;\n    }\n\n    ...the rest of your config\n}\n```\n\n### Step 6: Setup an auto-renew cronjob\n\nCongrats! Your website is now using https! Unfortunately, Let's Encrypt\ncertificates only last for 90 days, so you need to renew them often. No worries!\nIt's automated! Just make a bash script and add it to your crontab (see below\nfor example script).\n\nExample of a `renew_cert.sh`:\n```sh\n#!/usr/bin/sh\npython /path/to/acme_tiny.py --account-key /path/to/account.key --csr /path/to/domain.csr --acme-dir /var/www/challenges/ > /tmp/signed.crt || exit\nwget -O - https://letsencrypt.org/certs/lets-encrypt-x3-cross-signed.pem > intermediate.pem\ncat /tmp/signed.crt intermediate.pem > /path/to/chained.pem\nservice nginx reload\n```\n\n```\n#example line in your crontab (runs once per month)\n0 0 1 * * /path/to/renew_cert.sh 2>> /var/log/acme_tiny.log\n```\n\n## Permissions\n\nThe biggest problem you'll likely come across while setting up and running this\nscript is permissions. You want to limit access to your account private key and\nchallenge web folder as much as possible. I'd recommend creating a user\nspecifically for handling this script, the account private key, and the\nchallenge folder. Then add the ability for that user to write to your installed\ncertificate file (e.g. `/path/to/chained.pem`) and reload your webserver. That\nway, the cron script will do its thing, overwrite your old certificate, and\nreload your webserver without having permission to do anything else.\n\n**BE SURE TO:**\n* Backup your account private key (e.g. `account.key`)\n* Don't allow this script to be able to read your domain private key!\n* Don't allow this script to be run as root!\n\n## Feedback/Contributing\n\nThis project has a very, very limited scope and codebase. I'm happy to receive\nbug reports and pull requests, but please don't add any new features. This\nscript must stay under 200 lines of code to ensure it can be easily audited by\nanyone who wants to run it.\n\nIf you want to add features for your own setup to make things easier for you,\nplease do! It's open source, so feel free to fork it and modify as necessary.\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/diafygi/acme-tiny",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "acme-tiny",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/acme-tiny/",
    "release_url": "https://pypi.org/project/acme-tiny/2.0.0/",
    "requires_python": null,
    "summary": "A tiny script to issue and renew TLS certs from Let's Encrypt",
    "version": "2.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ab47fabf7c13d8ed3a0ce3abd7202696",
          "sha256": "55a7fddf28b1866d7aa39743654c62195fef82ff7a955128d378adf9313b08bf"
        },
        "downloads": 1496,
        "filename": "acme-tiny-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ab47fabf7c13d8ed3a0ce3abd7202696",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11643,
        "upload_time": "2016-04-24T16:32:52",
        "url": "https://files.pythonhosted.org/packages/db/53/be201173f9fd416a8d391a361c413d15e5b51b1a88b917cefc9e10b587d0/acme-tiny-1.0.0.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dc36426b485249cee28d9c8376f7a8f7",
          "sha256": "a4941c3ae0694ddf8b0419aba6a1d7b13551df848521adc27f76bac891e535bf"
        },
        "downloads": 2979,
        "filename": "acme-tiny-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dc36426b485249cee28d9c8376f7a8f7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11648,
        "upload_time": "2016-09-08T13:45:49",
        "url": "https://files.pythonhosted.org/packages/c0/a6/92aad229c5805edbc40e0b1d667a98c31cdd240710230578ad5fd7134777/acme-tiny-2.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "dc36426b485249cee28d9c8376f7a8f7",
        "sha256": "a4941c3ae0694ddf8b0419aba6a1d7b13551df848521adc27f76bac891e535bf"
      },
      "downloads": 2979,
      "filename": "acme-tiny-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dc36426b485249cee28d9c8376f7a8f7",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 11648,
      "upload_time": "2016-09-08T13:45:49",
      "url": "https://files.pythonhosted.org/packages/c0/a6/92aad229c5805edbc40e0b1d667a98c31cdd240710230578ad5fd7134777/acme-tiny-2.0.0.tar.gz"
    }
  ]
}