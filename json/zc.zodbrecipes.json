{
  "info": {
    "author": "Jim Fulton",
    "author_email": "jim@zope.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Buildout",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Zope Public License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "************\nZODB Recipes\n************\n\nRecipes for working with ZODB.\n\n.. contents::\n\nChanges\n*******\n\n2.0.0 (2014-02-12)\n==================\n\nThis release isn't backward compatible\n  It uses ZODB, rather than ZODB3.\n\n- Added Python 3 support\n\n- Changed from ZODB3 to ZODB.\n\n0.6.2 (2012-10-31)\n==================\n\nBugs Fixed\n----------\n\n- Moved 'zope.testing' requirement from install to test requirement.\n\n0.6.1 (2010-05-25)\n==================\n\nBugs Fixed\n----------\n\n- Pack scripts were incorrectly generated for storages that weren't\n  named in their storage configurations.\n\n0.6.0 (2009-12-03)\n==================\n\nNew Features\n------------\n\n- Generation of a logrotate configuration can now be disabled by\n  providing a logrotate option with a value of \"false\".\n\n- Added documentation of the eggs option and why it generally\n  shouldn't be used.\n\n- Improved error handling.\n\nBugs Fixed\n----------\n\n- The eggs option, when used, wasn't handled properly.\n\n\n0.5.0 (2008-11-03)\n==================\n\nNew Features\n------------\n\nYou can now specify a name option in server parts to have installed\nfiles use a different name than the section name.\n\nBugs Fixed\n----------\n\nPack crontab files weren't removed when parts were removed or renamed.\n\n0.4 (2008-02-18)\n================\n\nNew Features\n------------\n\nThe server recipe now honors the deployment name option.\n\n0.3.1 (2008-01-03)\n==================\n\nBugs Fixed\n----------\n\nShell-scripts using su weren't generated correctly.\n\n0.3 (2008-01-03)\n================\n\nNew Features\n------------\n\n- You can now specify an email address in a packing crontab file to\n  control where errors are sent.\n\n- If you install a general ZEO script, using a zdaemon part::\n\n    [zdaemon]\n    recipe = zc.recipe.egg:script\n    eggs = zdaemon\n\n  you can request that shell scripts be generated that use the generic\n  zdaemon script. This can make updating software for deployed systems\n  easier since instance-specific scripts don't depend on paths, like\n  egg names, that are likely to change.\n\nBugs Fixed\n----------\n\n- ZODB3 and most of its requirements were spurious dependencies of the\n  recipes. This caused ZODB3 to be installed using the Python used to\n  run the buildout, which caused problems in some circumstances.\n\n0.2.1 (2007-04-23)\n==================\n\nBugs Fixed\n----------\n\n- crontab and logrotate configuration files were being generates incorrectly.\n\n0.2 (2007-04-17)\n================\n\nAdded handling of %import directives.\n\n0.1 (2007-04-13)\n================\n\nInitial release.\n\nDetailed Documentation\n**********************\n\nDefining ZEO Storage Servers\n============================\n\nThe zc.zodbrecipes:server recipe can be used to define ZEO storage\nservers. To define a storage server, you define a part for the server\nand specify configuration data.\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = server\n    ...\n    ... [server]\n    ... recipe = zc.zodbrecipes:server\n    ... zeo.conf =\n    ...    <zeo>\n    ...       address 8100\n    ...       monitor-address 8101\n    ...       transaction-timeout 300\n    ...    </zeo>\n    ...    %import foo\n    ...    <foo>\n    ...       path /databases/Data.fs\n    ...    </foo>\n    ... ''')\n\nHere we specified a minimal configuration using a \"foo\" storage.  We\ncan use any kind of storage we want.  Here we used an import statement\nto import the schema definition that defined the foo section.  Any\nimports are simply copied to the generated configuration file.  When\nwe run the buildout:\n\n    >>> from six import print_\n    >>> print_(system(buildout), end='') # doctest: +NORMALIZE_WHITESPACE\n    Installing server.\n    zc.zodbrecipes:\n    A runzeo script couldn't be found at:\n    <BLANKLINE>\n      '/sample-buildout/bin/runzeo'\n    <BLANKLINE>\n    You may need to generate a runzeo script using the\n    zc.recipe.eggs:script recipe and the ZEO egg, or you may need\n    to specify the location of a script using the runzeo option.\n    <BLANKLINE>\n    Generated script '/sample-buildout/bin/server'.\n\nWe got a warning because the recipe expects there to be a runzeo\nscript and we haven't created one.  This is done using the\nzc.recipe.egg:script recipe:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = zodb server\n    ...\n    ... [zodb]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = ZEO\n    ...\n    ... [server]\n    ... recipe = zc.zodbrecipes:server\n    ... zeo.conf =\n    ...    <zeo>\n    ...       address 8100\n    ...       monitor-address 8101\n    ...       transaction-timeout 300\n    ...    </zeo>\n    ...    %import foo\n    ...    <foo>\n    ...       path /databases/Data.fs\n    ...    </foo>\n    ... ''')\n\n    >>> print_(system(buildout), end='') # doctest: +ELLIPSIS\n    Installing zodb...\n    Generated script '/sample-buildout/bin/runzeo'.\n    ...\n    Updating server.\n\nWe get 2 things.  We get a directory in parts containing ZEO and\nzdaemon configuration files:\n\n    >>> ls('parts', 'server')\n    -  zdaemon.conf\n    -  zeo.conf\n\nLet's look at the configuration files:\n\n    >>> cat('parts', 'server', 'zeo.conf')\n    %import foo\n    <BLANKLINE>\n    <zeo>\n      address 8100\n      monitor-address 8101\n      transaction-timeout 300\n    </zeo>\n    <BLANKLINE>\n    <foo>\n      path /databases/Data.fs\n    </foo>\n    <BLANKLINE>\n    <eventlog>\n      <logfile>\n        path STDOUT\n      </logfile>\n    </eventlog>\n\nWe see the same data we input with the addition of an eventlog section\nthat directs logging to standard out.  In production, we'll use\nzdaemon's transacript log to capture this logging output in a file.\nIf we wish, we can specify a log file ourselves:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = zodb server\n    ...\n    ... [zodb]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = ZEO\n    ...\n    ... [server]\n    ... recipe = zc.zodbrecipes:server\n    ... zeo.conf =\n    ...    <zeo>\n    ...       address 8100\n    ...       monitor-address 8101\n    ...       transaction-timeout 300\n    ...    </zeo>\n    ...    %import foo\n    ...    <foo>\n    ...       path /databases/Data.fs\n    ...    </foo>\n    ...    <eventlog>\n    ...      <logfile>\n    ...        path /var/log/zeo.log\n    ...      </logfile>\n    ...    </eventlog>\n    ... ''')\n\n    >>> print_(system(buildout), end='')\n    Uninstalling server.\n    Updating zodb.\n    Installing server.\n    Generated script '/sample-buildout/bin/server'.\n\n    >>> cat('parts', 'server', 'zeo.conf')\n    %import foo\n    <BLANKLINE>\n    <zeo>\n      address 8100\n      monitor-address 8101\n      transaction-timeout 300\n    </zeo>\n    <BLANKLINE>\n    <foo>\n      path /databases/Data.fs\n    </foo>\n    <BLANKLINE>\n    <eventlog>\n      <logfile>\n        path /var/log/zeo.log\n      </logfile>\n    </eventlog>\n\nBut we'll stick with the default:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = zodb server\n    ...\n    ... [zodb]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = ZEO\n    ...\n    ... [server]\n    ... recipe = zc.zodbrecipes:server\n    ... zeo.conf =\n    ...    <zeo>\n    ...       address 8100\n    ...       monitor-address 8101\n    ...       transaction-timeout 300\n    ...    </zeo>\n    ...    %import foo\n    ...    <foo>\n    ...       path /databases/Data.fs\n    ...    </foo>\n    ... ''')\n\n    >>> print_(system(buildout), end='')\n    Uninstalling server.\n    Updating zodb.\n    Installing server.\n    Generated script '/sample-buildout/bin/server'.\n\nLet's look at the zdaemon log file:\n\n    >>> cat('parts', 'server', 'zdaemon.conf')\n    <runner>\n      daemon on\n      directory /sample-buildout/parts/server\n      program /sample-buildout/bin/runzeo -C /sample-buildout/parts/server/zeo.conf\n      socket-name /sample-buildout/parts/server/zdaemon.sock\n      transcript /sample-buildout/parts/server/zeo.log\n    </runner>\n    <BLANKLINE>\n    <eventlog>\n      <logfile>\n        path /sample-buildout/parts/server/zeo.log\n      </logfile>\n    </eventlog>\n\nWe run the runzeo script with the zeo.conf file.  Log and run-time\nfiles are places in the server part directory.  We use a transcript\nlog to provide the ZEO server log.  I like to use the transacriot log\nbecause it captures program output, such as start-up exceptions that\naren't captured in a program's logs.\n\nAnd we get a control script generated in our bin directory:\n\n    >>> cat('bin', 'server')  # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS\n    #!/usr/local/bin/python2.4\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [...]\n    <BLANKLINE>\n    <BLANKLINE>\n    import zdaemon.zdctl\n    <BLANKLINE>\n    if __name__ == '__main__':\n        sys.exit(zdaemon.zdctl.main([\n            '-C', '/sample-buildout/parts/server/zdaemon.conf',\n            ]+sys.argv[1:]\n            ))\n\nThis is a zdaemon script.  We can use this to control the ZEO server\nprocess.\n\nSpecifying additional eggs\n==========================\n\nYou can specify additional eggs to be installed for use by the\nzdaemon script:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = zodb server\n    ...\n    ... [zodb]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = ZEO\n    ...\n    ... [server]\n    ... recipe = zc.zodbrecipes:server\n    ... eggs = zope.event\n    ... zeo.conf =\n    ...    <zeo>\n    ...       address 8100\n    ...       monitor-address 8101\n    ...       transaction-timeout 300\n    ...    </zeo>\n    ...    %import foo\n    ...    <foo>\n    ...       path /databases/Data.fs\n    ...    </foo>\n    ... ''')\n\n    >>> print_(system(buildout), end='')\n    Uninstalling server.\n    Updating zodb.\n    Installing server.\n    Generated script '/sample-buildout/bin/server'.\n\nWe can see the zope.event egg present in the control script\ngenerated in our bin directory:\n\n    >>> cat('bin', 'server')  # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS\n    #!/usr/local/bin/python2.4\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [...]\n    <BLANKLINE>\n    import zdaemon.zdctl\n    <BLANKLINE>\n    if __name__ == '__main__':\n        sys.exit(zdaemon.zdctl.main([\n            '-C', '/sample-buildout/parts/server/zdaemon.conf',\n            ]+sys.argv[1:]\n            ))\n\nNB: This is a zdaemon script. If your ZEO server needs additional eggs, such as\n    to provide additional storage types or log handlers, they should appear in\n    [zodb] section in the above example, NOT the [server] section!\n\nUnix Deployment support\n=======================\n\nThe server recipe works with the zc.recipe.deployment.  In particular,\nif a deployment option is specified, it names a part or section that\ndefines the following uptions:\n\ncrontab-directory\n  A directory for crontab files.\n\netc-directory\n  A directory for configuration files.\n\nlog-directory\n  A directory for log files.\n\nlogrotate-directory\n  A directory for logrotate configuration files.\n\nrc-directory\n  A directory for run-control scripts.\n\nrun-directory\n  A directory for run-time files.\n\nuser\n  The user the server process should run as\n\nLet's create some directories and add a deployment section to our\nbuildout:\n\n    >>> for d in 'cron', 'etc', 'log', 'rotate', 'rc', 'run':\n    ...     mkdir(d)\n    ...     globals()[d] = join(sample_buildout, d)\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = zodb server\n    ...\n    ... [zodb]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = ZEO\n    ...\n    ... [server]\n    ... recipe = zc.zodbrecipes:server\n    ... zeo.conf =\n    ...    <zeo>\n    ...       address 8100\n    ...       monitor-address 8101\n    ...       transaction-timeout 300\n    ...    </zeo>\n    ...    %%import foo\n    ...    <foo>\n    ...       path /databases/Data.fs\n    ...    </foo>\n    ... deployment = demo\n    ...\n    ... [demo]\n    ... crontab-directory = %(cron)s\n    ... etc-directory = %(etc)s\n    ... log-directory = %(log)s\n    ... logrotate-directory = %(rotate)s\n    ... rc-directory = %(rc)s\n    ... run-directory = %(run)s\n    ... user = bob\n    ... ''' % globals())\n\n    >>> print_(system(buildout), end='')\n    Uninstalling server.\n    Updating zodb.\n    Installing server.\n    Generated script '/sample-buildout/rc/demo-server'.\n\nNow, the parts directory and the control script will be gone:\n\n    >>> import os\n    >>> os.path.exists(join('parts', 'server'))\n    False\n    >>> os.path.exists(join('bin', 'server'))\n    False\n\nInstead, the control script will be in the rc directory:\n\n    >>> cat('rc', 'demo-server')  # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS\n    #!/usr/local/bin/python2.4\n    <BLANKLINE>\n    import sys\n    sys.path[0:0] = [...]\n    <BLANKLINE>\n    import zdaemon.zdctl\n    <BLANKLINE>\n    if __name__ == '__main__':\n        sys.exit(zdaemon.zdctl.main([\n            '-C', '/sample-buildout/etc/server-zdaemon.conf',\n            ]+sys.argv[1:]\n            ))\n\nThe run-control script name now combines the deployment name and the\nscript name.\n\nand the configuration files will be in the etc directory:\n\n    >>> ls('etc')\n    -  server-zdaemon.conf\n    -  server-zeo.conf\n\nLog rotation\n============\n\nIf a deployment is used, we'll also get a logrotate configuration file:\n\n    >>> cat('rotate', 'demo-server')\n    /sample-buildout/log/server-zeo.log {\n      rotate 5\n      weekly\n      postrotate\n        /sample-buildout/rc/demo-server -C /sample-buildout/etc/server-zdaemon.conf reopen_transcript\n      endscript\n    }\n\nThis will rotate the zeo log file once a week.\n\nIf we look at the zdaemon configuration file, we can see that it reflects\nthe deployment locations:\n\n    >>> cat('etc', 'server-zdaemon.conf')\n    <runner>\n      daemon on\n      directory /sample-buildout/run\n      program /sample-buildout/bin/runzeo -C /sample-buildout/etc/server-zeo.conf\n      socket-name /sample-buildout/run/server-zdaemon.sock\n      transcript /sample-buildout/log/server-zeo.log\n      user bob\n    </runner>\n    <BLANKLINE>\n    <eventlog>\n      <logfile>\n        path /sample-buildout/log/server-zeo.log\n      </logfile>\n    </eventlog>\n\nNote that different file names are used.  Since a deployment may be\n(and usually is) shared by multiple parts, files are prefixed with\ntheir part names.  Also note that the deployment user is set in the\nzdaemon configuration.\n\nIf you want to manage your own log rotation, you can place \"logrotate = false\"\nin your deployment section to prevent the logrotate config being generated:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = zodb server\n    ...\n    ... [zodb]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = ZEO\n    ...\n    ... [server]\n    ... recipe = zc.zodbrecipes:server\n    ... zeo.conf =\n    ...    <zeo>\n    ...       address 8100\n    ...       monitor-address 8101\n    ...       transaction-timeout 300\n    ...    </zeo>\n    ...    %%import foo\n    ...    <foo>\n    ...       path /databases/Data.fs\n    ...    </foo>\n    ... deployment = demo\n    ...\n    ... [demo]\n    ... logrotate = false\n    ... crontab-directory = %(cron)s\n    ... etc-directory = %(etc)s\n    ... log-directory = %(log)s\n    ... logrotate-directory = %(rotate)s\n    ... rc-directory = %(rc)s\n    ... run-directory = %(run)s\n    ... user = bob\n    ... ''' % globals())\n\n    >>> print_(system(buildout), end='')\n    Uninstalling server.\n    Updating zodb.\n    Installing server.\n    Generated script '/sample-buildout/rc/demo-server'.\n\nThe logrotate config is not there, but the rc script still is:\n\n    >>> ls('rotate')\n    >>> ls('rc')\n    -  demo-server\n\nIf it's more convenient, this can be placed in the [server] section instead:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = zodb server\n    ...\n    ... [zodb]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = ZEO\n    ...\n    ... [server]\n    ... recipe = zc.zodbrecipes:server\n    ... zeo.conf =\n    ...    <zeo>\n    ...       address 8100\n    ...       monitor-address 8101\n    ...       transaction-timeout 300\n    ...    </zeo>\n    ...    %%import foo\n    ...    <foo>\n    ...       path /databases/Data.fs\n    ...    </foo>\n    ... deployment = demo\n    ... logrotate = false\n    ...\n    ... [demo]\n    ... crontab-directory = %(cron)s\n    ... etc-directory = %(etc)s\n    ... log-directory = %(log)s\n    ... logrotate-directory = %(rotate)s\n    ... rc-directory = %(rc)s\n    ... run-directory = %(run)s\n    ... user = bob\n    ... ''' % globals())\n\n    >>> print_(system(buildout), end='')\n    Updating zodb.\n    Updating server.\n\nThe logrotate config is not there, but the rc script still is:\n\n    >>> ls('rotate')\n    >>> ls('rc')\n    -  demo-server\n\nPacking cron job\n================\n\nWe can request definition of a cron job to pack the databases by\nspecifying a pack option.  This option takes 5 to 7 values.  The\nfirst 5 values are the time and date fields defined by Unix crontab\nfiles. The sixth field is the number of days in the past to pack to and\ndefaults to 1.\n\nLet's add a pack option:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = zodb server\n    ...\n    ... [zodb]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = ZEO\n    ...\n    ... [server]\n    ... recipe = zc.zodbrecipes:server\n    ... zeo.conf =\n    ...    <zeo>\n    ...       address 8100\n    ...       monitor-address 8101\n    ...       transaction-timeout 300\n    ...    </zeo>\n    ...    %%import foo\n    ...    <foo>\n    ...       path /databases/Data.fs\n    ...    </foo>\n    ... deployment = demo\n    ... pack = 1 1 * * 0 3\n    ...\n    ... [demo]\n    ... crontab-directory = %(cron)s\n    ... etc-directory = %(etc)s\n    ... log-directory = %(log)s\n    ... logrotate-directory = %(rotate)s\n    ... rc-directory = %(rc)s\n    ... run-directory = %(run)s\n    ... user = bob\n    ... ''' % globals())\n\n    >>> print_(system(buildout+' -D'), end='')\n    Uninstalling server.\n    Updating zodb.\n    Installing server.\n    Generated script '/sample-buildout/rc/demo-server'.\n\nNow, we'll get a crontab file:\n\n    >>> cat(cron, 'pack-demo-server')\n    1 1 * * 0 bob /sample-buildout/bin/zeopack -p 8100 -S 1 -d 3\n\n.. Make sure it works to supply a storage name:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = zodb server\n    ...\n    ... [zodb]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = ZEO\n    ...\n    ... [server]\n    ... recipe = zc.zodbrecipes:server\n    ... zeo.conf =\n    ...    <zeo>\n    ...       address 8100\n    ...       monitor-address 8101\n    ...       transaction-timeout 300\n    ...    </zeo>\n    ...    %%import foo\n    ...    <foo x>\n    ...       path /databases/Data.fs\n    ...    </foo>\n    ... deployment = demo\n    ... pack = 1 1 * * 0 3\n    ...\n    ... [demo]\n    ... crontab-directory = %(cron)s\n    ... etc-directory = %(etc)s\n    ... log-directory = %(log)s\n    ... logrotate-directory = %(rotate)s\n    ... rc-directory = %(rc)s\n    ... run-directory = %(run)s\n    ... user = bob\n    ... ''' % globals())\n\n    >>> _ = system(buildout+' -D'),\n\n    >>> cat(cron, 'pack-demo-server')\n    1 1 * * 0 bob /sample-buildout/bin/zeopack -p 8100 -S x -d 3\n\n\nIn this example, we'll pack the databases every Sunday at 1:01 to 3\ndays.\n\nWe can add an email address to the pack option.  If we do, then a\nMAILTO variable will be added to the cron file:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = zodb server\n    ...\n    ... [zodb]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = ZEO\n    ...\n    ... [server]\n    ... recipe = zc.zodbrecipes:server\n    ... zeo.conf =\n    ...    <zeo>\n    ...       address 8100\n    ...       monitor-address 8101\n    ...       transaction-timeout 300\n    ...    </zeo>\n    ...    %%import foo\n    ...    <foo>\n    ...       path /databases/Data.fs\n    ...    </foo>\n    ... deployment = demo\n    ... pack = 1 1 * * 0 3 jim@zope.com\n    ...\n    ... [demo]\n    ... crontab-directory = %(cron)s\n    ... etc-directory = %(etc)s\n    ... log-directory = %(log)s\n    ... logrotate-directory = %(rotate)s\n    ... rc-directory = %(rc)s\n    ... run-directory = %(run)s\n    ... user = bob\n    ... ''' % globals())\n\n    >>> print_(system(buildout+' -D'), end='')\n    Uninstalling server.\n    Updating zodb.\n    Installing server.\n    Generated script '/sample-buildout/rc/demo-server'.\n\n    >>> cat(cron, 'pack-demo-server')\n    MAILTO=jim@zope.com\n    1 1 * * 0 bob /sample-buildout/bin/zeopack -p 8100 -S 1 -d 3\n\nThis causes email to be sent to the given address, rather than to the\nuser specified in the crontab file.\n\nshell start scripts\n===================\n\nBy default, the startup scripts are generated Python scripts that use\nthe zdaemon module.  Sometimes, this is inconvenient. In particular,\nwhen deploying software, generated Python scripts may break after a\nsoftware update because they contain pasths to software eggs. We can\nrequest shell scripts that invoke a generic zdaemon script.  The shell\nscript only depends on the path to the zdaemon script, which generally\ndoesn't change when updating softawre.\n\nTo request a shell script, add a shell-script option with a true\nvalue. We also need to cause a zdaemon script to be generated:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = zodb zdaemon server\n    ...\n    ... [zodb]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = ZEO\n    ...\n    ... [zdaemon]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = zdaemon\n    ...\n    ... [server]\n    ... recipe = zc.zodbrecipes:server\n    ... zeo.conf =\n    ...    <zeo>\n    ...       address 8100\n    ...       monitor-address 8101\n    ...       transaction-timeout 300\n    ...    </zeo>\n    ...    %%import foo\n    ...    <foo>\n    ...       path /databases/Data.fs\n    ...    </foo>\n    ... deployment = demo\n    ... pack = 1 1 * * 0 3 jim@zope.com\n    ... shell-script = true\n    ...\n    ... [demo]\n    ... crontab-directory = %(cron)s\n    ... etc-directory = %(etc)s\n    ... log-directory = %(log)s\n    ... logrotate-directory = %(rotate)s\n    ... rc-directory = %(rc)s\n    ... run-directory = %(run)s\n    ... user = bob\n    ... ''' % globals())\n\n    >>> print_(system(buildout+' -D'), end='')\n    Uninstalling server.\n    Updating zodb.\n    Installing zdaemon.\n    Generated script '/sample-buildout/bin/zdaemon'.\n    Installing server.\n    zc.zodbrecipes: Generated shell script '/sample-buildout/rc/demo-server'.\n\n    >>> cat('rc', 'demo-server')\n    #!/bin/sh\n    su bob -c \\\n      \"/sample-buildout/bin/zdaemon -C '/sample-buildout/etc/server-zdaemon.conf' $*\"\n\nNames\n=====\n\nNames can be specified for deployments and for individual server\nparts. These names determine names of files generated.\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = zodb zdaemon server\n    ...\n    ... [zodb]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = ZEO\n    ...\n    ... [zdaemon]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = zdaemon\n    ...\n    ... [server]\n    ... name = Server\n    ... recipe = zc.zodbrecipes:server\n    ... zeo.conf =\n    ...    <zeo>\n    ...       address 8100\n    ...       monitor-address 8101\n    ...       transaction-timeout 300\n    ...    </zeo>\n    ...    %%import foo\n    ...    <foo>\n    ...       path /databases/Data.fs\n    ...    </foo>\n    ... deployment = demo\n    ... pack = 1 1 * * 0 3 jim@zope.com\n    ... shell-script = true\n    ...\n    ... [demo]\n    ... name = Demo\n    ... crontab-directory = %(cron)s\n    ... etc-directory = %(etc)s\n    ... log-directory = %(log)s\n    ... logrotate-directory = %(rotate)s\n    ... rc-directory = %(rc)s\n    ... run-directory = %(run)s\n    ... user = bob\n    ... ''' % globals())\n\n    >>> print_(system(buildout+' -D'), end='')\n    Uninstalling server.\n    Updating zodb.\n    Updating zdaemon.\n    Installing server.\n    zc.zodbrecipes: Generated shell script '/sample-buildout/rc/Demo-Server'.\n\n    >>> ls(cron)\n    -  pack-Demo-Server\n\n    >>> ls(etc)\n    -  Server-zdaemon.conf\n    -  Server-zeo.conf\n\n    >>> ls(rotate)\n    -  Demo-Server\n\n    >>> ls(rc)\n    -  Demo-Server\n\nFeedback when you make mistakes\n===============================\n\nIf you make a mistake in your zeo.conf, some errors will result in a\nsimple, informative message being returned:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = zodb server\n    ...\n    ... [zodb]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = ZEO\n    ...\n    ... [server]\n    ... recipe = zc.zodbrecipes:server\n    ... zeo.conf =\n    ...    nothing useful\n    ... ''')\n\n    >>> print_(system(buildout+' -q'), end='')\n    Couldn't clean up '/sample-buildout/bin/server'.\n    While:\n      Installing server.\n    Error: No zeo section was defined.\n\nIf your zeo.conf has a syntax error, you'll get shown the problematic\ntext and the message from the error:\n\n    >>> write('buildout.cfg',\n    ... '''\n    ... [buildout]\n    ... parts = zodb server\n    ...\n    ... [zodb]\n    ... recipe = zc.recipe.egg:script\n    ... eggs = ZEO\n    ...\n    ... [server]\n    ... recipe = zc.zodbrecipes:server\n    ... zeo.conf = <bad\n    ... ''')\n\n    >>> print_(system(buildout+' -q'), end='')\n    Couldn't clean up '/sample-buildout/bin/server'.\n    While:\n      Installing server.\n    Error: malformed section start (line 1) in:\n    <bad\n    <BLANKLINE>\n\nDownload\n**********************",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://svn.zope.org/zc.zodbrecipes",
    "keywords": "zodb buildout",
    "license": "ZPL 2.1",
    "maintainer": null,
    "maintainer_email": null,
    "name": "zc.zodbrecipes",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/zc.zodbrecipes/",
    "release_url": "https://pypi.org/project/zc.zodbrecipes/2.0.0/",
    "requires_python": null,
    "summary": "ZC Buildout recipes for ZODB",
    "version": "2.0.0"
  },
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e42efb5cc785826d24a7e3ed540ec975",
          "sha256": "1e7cfef411b6d689f15516323a5ac6d0a97a63792389bfa02cf1fe485c47bbc2"
        },
        "downloads": 2584,
        "filename": "zc.zodbrecipes-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e42efb5cc785826d24a7e3ed540ec975",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8560,
        "upload_time": "2007-04-18T20:36:21",
        "url": "https://files.pythonhosted.org/packages/6a/57/a64679a3a411f0cdf8c72c6d715c70e63c015cdf22ec6e5541cf83e66b04/zc.zodbrecipes-0.2.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c828835e0bf2c3109a36020f8bbb8087",
          "sha256": "9018f4acbe92d9fd2313943e9069a29f2c383420d188ecb388383e8831b5b19c"
        },
        "downloads": 6710,
        "filename": "zc.zodbrecipes-0.2.1-py2.4.egg",
        "has_sig": false,
        "md5_digest": "c828835e0bf2c3109a36020f8bbb8087",
        "packagetype": "bdist_egg",
        "python_version": "2.4",
        "size": 16969,
        "upload_time": "2007-07-13T20:13:50",
        "url": "https://files.pythonhosted.org/packages/36/70/40fe6b79bcc4d2a03466fae9fec507b21d949751b4dad892d5945a5b35dc/zc.zodbrecipes-0.2.1-py2.4.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d6edee4614e8d51f4291b272e6ba594e",
          "sha256": "222ecdee57791a1bf1b50aff74b1562dbe8a267e4c7397d9d66de47e50412041"
        },
        "downloads": 2872,
        "filename": "zc.zodbrecipes-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d6edee4614e8d51f4291b272e6ba594e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8729,
        "upload_time": "2007-04-23T19:03:04",
        "url": "https://files.pythonhosted.org/packages/df/d8/8dd9066bbd42706ec5555c0f292530a616e1d2f28ab8e3af84d296f79e5d/zc.zodbrecipes-0.2.1.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0fec5f931e498f6060810cfaaf4410ce",
          "sha256": "23159f00d929109114423529bed7cb6142c1e234c30c14cee8be7b710c060069"
        },
        "downloads": 2496,
        "filename": "zc.zodbrecipes-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0fec5f931e498f6060810cfaaf4410ce",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9716,
        "upload_time": "2008-01-03T19:15:57",
        "url": "https://files.pythonhosted.org/packages/2f/ed/8a785d6a34c741278d2c13e0269a54ff496a5d654aa5a6b002ad65ef4a1e/zc.zodbrecipes-0.3.0.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9a083cdaac2bb84cfd78be2a6977c8f7",
          "sha256": "1939ffe3fcc24ecad7d4771404d60f44f08e16c659d7a7e741932ab0717ac481"
        },
        "downloads": 4738,
        "filename": "zc.zodbrecipes-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9a083cdaac2bb84cfd78be2a6977c8f7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12063,
        "upload_time": "2008-01-03T21:06:27",
        "url": "https://files.pythonhosted.org/packages/74/6c/ef326ecf2c5eca04aae8f3e17237540ccffa3480d74a274f3a5e7728b194/zc.zodbrecipes-0.3.1.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3e145c625f920219cb5bc071fb0dd2f8",
          "sha256": "ba8259483b7c4c4bd3311113b77c284a0cc26a69521532d33cf695884d0273e5"
        },
        "downloads": 10256,
        "filename": "zc.zodbrecipes-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3e145c625f920219cb5bc071fb0dd2f8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12163,
        "upload_time": "2008-02-18T22:16:10",
        "url": "https://files.pythonhosted.org/packages/7a/5a/6cd19bd467ca4673d5dd61df3c3f2d3df95d8757ad06932d1b4518397370/zc.zodbrecipes-0.4.0.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0d71f371830f0ad41d5b00356b07b4cf",
          "sha256": "d0e90880ba339726025823199c6a1b6984665277a5c7b81bd8fd2e5dcc834daa"
        },
        "downloads": 3653,
        "filename": "zc.zodbrecipes-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0d71f371830f0ad41d5b00356b07b4cf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12966,
        "upload_time": "2008-11-03T19:30:47",
        "url": "https://files.pythonhosted.org/packages/87/9d/b38f4d5f58e1f52be31cea769cc904a0ffef4a86b1fc653882f26bcea896/zc.zodbrecipes-0.5.0.tar.gz"
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d2124d908b7166b8ed623d23a8f6f926",
          "sha256": "d0519177d03d78097d39fbef723f9b7cdce07da9eb81bed05def43676cdde481"
        },
        "downloads": 3024,
        "filename": "zc.zodbrecipes-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d2124d908b7166b8ed623d23a8f6f926",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15471,
        "upload_time": "2009-12-03T18:31:09",
        "url": "https://files.pythonhosted.org/packages/9d/2b/ed8a58ab6f04c51e5e2915c8be82a1c481f32fe0af4d52efd7a7df1cb11c/zc.zodbrecipes-0.6.0.tar.gz"
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "902329bcd32e60a9c5364939c18e37a6",
          "sha256": "866e11f30b4055dfdc2340640262f91469cd95b8da7abfaa13a05a2ffdfe001a"
        },
        "downloads": 4191,
        "filename": "zc.zodbrecipes-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "902329bcd32e60a9c5364939c18e37a6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18953,
        "upload_time": "2010-05-25T21:19:41",
        "url": "https://files.pythonhosted.org/packages/8b/bf/c9b114a6d15a10d1e5d08cb8710e73118c531ad3c406dd1650dd5f8d85e3/zc.zodbrecipes-0.6.1.tar.gz"
      }
    ],
    "0.6.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "99cea0edbef153e15f38b8246daf0edc",
          "sha256": "9f0a3bf59cb38e7ef1ee337c511131884d6bbf4e01017767d966159fae82bd34"
        },
        "downloads": 3175,
        "filename": "zc.zodbrecipes-0.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "99cea0edbef153e15f38b8246daf0edc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18596,
        "upload_time": "2012-10-31T21:42:48",
        "url": "https://files.pythonhosted.org/packages/e9/f8/91abce94beeee5bb614defcac41134d29caa20521d8711c7d93c3f2ee53f/zc.zodbrecipes-0.6.2.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "36250c045dfa8e0d2bc214d03c7b96a8",
          "sha256": "10cd49705578395255bc10c68a200c42a7c5877abb708ea57a27c44a647fc914"
        },
        "downloads": 3279,
        "filename": "zc.zodbrecipes-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "36250c045dfa8e0d2bc214d03c7b96a8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20864,
        "upload_time": "2014-02-12T19:48:48",
        "url": "https://files.pythonhosted.org/packages/0c/9d/6d7cd586450e477df273f549357f4cc57e3a95aeea9d315db2a2af57ae7d/zc.zodbrecipes-2.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "36250c045dfa8e0d2bc214d03c7b96a8",
        "sha256": "10cd49705578395255bc10c68a200c42a7c5877abb708ea57a27c44a647fc914"
      },
      "downloads": 3279,
      "filename": "zc.zodbrecipes-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "36250c045dfa8e0d2bc214d03c7b96a8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 20864,
      "upload_time": "2014-02-12T19:48:48",
      "url": "https://files.pythonhosted.org/packages/0c/9d/6d7cd586450e477df273f549357f4cc57e3a95aeea9d315db2a2af57ae7d/zc.zodbrecipes-2.0.0.tar.gz"
    }
  ]
}