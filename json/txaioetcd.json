{
  "info": {
    "author": "Crossbar.io Technologies GmbH",
    "author_email": "autobahnws@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Framework :: Twisted",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "txaioetcd - etcd for Twisted\n============================\n\n| |Version| |Docs|\n\n\n`etcd <https://coreos.com/etcd/docs/latest/>`_ is a powerful building block in networked and distributed applications. etcd describes itself as \"distributed reliable key-value store for the most critical data of a distributed system\".\n\n`Twisted <http://twistedmatrix.com/>`_ is an advanced network framework to implement networked and distributed applications.\n\nHence the desire for a fully asynchronous etcd v3 Twisted client with broad feature support: **txaioetcd**.\n\n**txaioetcd** currently supports these etcd v3 basic features\n\n- arbitrary byte strings for keys and values\n- set and get values by key\n- get values by range or prefix\n- delete value (by single key, range and prefix)\n\nand the following advanced features\n\n- watch key sets with asynchronous callback\n- submit transactions (\"multiact\")\n- create, refresh and revoke leases\n- associate key-values with leases\n\n**txaioetcd** also plans to provide abstractions on top of the etcd3 transaction primitive, like for example:\n\n- global locks and sequences\n- transactional, multi-consumer-producer queues\n\n\nExamples\n--------\n\n1. `Connecting <https://github.com/crossbario/txaio-etcd/tree/master/examples/connect.py>`_\n2. `Basic Operations (CRUD) <https://github.com/crossbario/txaio-etcd/tree/master/examples/crud.py>`_\n3. `Watching keys <https://github.com/crossbario/txaio-etcd/tree/master/examples/watch.py>`_\n4. `Transactions <https://github.com/crossbario/txaio-etcd/tree/master/examples/transaction.py>`_\n5. `Leases <https://github.com/crossbario/txaio-etcd/tree/master/examples/lease.py>`_\n\n\nRequirements\n-------------\n\n**etcd version 3.1 or higher** is required. etcd 2 will not work. etcd 3.0 also isn't enough - at least watching keys doesn't work over the gRPC HTTP gateway yet.\n\nThe implementation is pure Python code compatible with both **Python 2 and 3**, and runs perfect on **PyPy**.\n\nThe library currently requires **Twisted**, though the API was designed to allow adding asyncio support later (PRs are welcome!) with no breakage.\n\nBut other than the underlying network library, there are only small pure Python dependencies.\n\n\nInstallation\n------------\n\nTo install txaioetcd\n\n.. code-block:: sh\n\n    pip install txaioetcd\n\n\nQuick test\n----------\n\nIf you have Docker on your system, you can do a quick test. First, start a Docker container with etcd:\n\n.. code-block:: sh\n\n    make docker_etcd\n\nThen, in a second terminal:\n\n.. code-block:: sh\n\n    make docker_build\n    make docker_test\n\nYou should see all the example programs run against the etcd daemon in the first container.\n\n\netcd\n----\n\nInstallation\n............\n\nTo build and install etcd 3.1\n\n.. code-block:: sh\n\n    ETCD_VER=v3.1.0\n    DOWNLOAD_URL=https://github.com/coreos/etcd/releases/download\n    curl -L ${DOWNLOAD_URL}/${ETCD_VER}/etcd-${ETCD_VER}-linux-amd64.tar.gz \\\n        -o /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz\n    sudo mkdir -p /opt/etcd && sudo tar xzvf /tmp/etcd-${ETCD_VER}-linux-amd64.tar.gz \\\n        -C /opt/etcd --strip-components=1\n\nTo verify the installation, check the version\n\n.. code-block:: sh\n\n    /opt/etcd/etcd --version\n\nOpen a console and start etcd\n\n.. code-block:: sh\n\n    /opt/etcd/etcd\n\nTo scratch the etcd database\n\n.. code-block:: sh\n\n    rm -rf ~/default.etcd/\n\n\nTest using etcdctl\n..................\n\nGet cluster status\n\n.. code-block:: sh\n\n    ETCDCTL_API=3 /opt/etcd/etcdctl endpoint -w table status\n\nSet a key\n\n.. code-block:: sh\n\n    ETCDCTL_API=3 /opt/etcd/etcdctl put foo hello\n\nGet a key\n\n.. code-block:: sh\n\n    ETCDCTL_API=3 /opt/etcd/etcdctl get foo\n\nWatch a key\n\n.. code-block:: sh\n\n    ETCDCTL_API=3 /opt/etcd/etcdctl watch foo\n\n\nTest using curl\n...............\n\n\nGet cluster status\n\n.. code-block:: sh\n\n    curl -L http://localhost:2379/v3alpha/maintenance/status -X POST -d '{}'\n\nSet a key (value \"hello\" on key \"foo\" both base64 encoded):\n\n.. code-block:: sh\n\n    curl -L http://localhost:2379/v3alpha/kv/put -X POST -d '{\"key\": \"Zm9v\", \"value\": \"YmFy\"}'\n\nGet a key (\"foo\" base64 encoded)\n\n.. code-block:: sh\n\n    curl -L http://localhost:2379/v3alpha/kv/range -X POST -d '{\"key\": \"Zm9v\"}'\n\nWatch a key (\"foo\" base64 encoded)\n\n.. code-block:: sh\n\n    curl -L http://localhost:2379/v3alpha/watch -X POST -d '{\"create_request\": {\"key\": \"Zm9v\"}}'\n\n\n\nUsage\n-----\n\nExample Client\n..............\n\nHere is an example etcd3 client that retrieves the cluster status\n\n.. sourcecode:: python\n\n    from twisted.internet.task import react\n    from twisted.internet.defer import inlineCallbacks\n\n    import txaio\n    from txaioetcd import Client, KeySet\n\n    @inlineCallbacks\n    def main(reactor):\n        etcd = Client(reactor, u'http://localhost:2379')\n\n        status = yield etcd.status()\n        print(status)\n\n        # insert one of the snippets below HERE\n\n    if __name__ == '__main__':\n        txaio.start_logging(level='info')\n        react(main)\n\nThe following snippets demonstrate the etcd3 features supported by txaioetcd. To run the snippets, use the boilerplate above.\n\n\nSetting keys\n............\n\n**Set** a value for some keys\n\n.. sourcecode:: python\n\n    for i in range(10):\n        etcd.set('mykey{}'.format(i).encode(), b'foobar')\n\nNote that both keys and values in etcd3 are arbitrary byte strings.\n\nWhether you use UTF-8 encoded strings with leading slash or anything else does not matter to etcd3. Put differently, there is no semantics associated with slashes on sides of etcd3 whatsoever and slash semantics - if any - is fully up to an application.\n\n\nGetting keys\n............\n\n**Get a value by key** from etcd\n\n.. sourcecode:: python\n\n    result = yield etcd.get(b'mykey')\n    if result.kvs:\n        kv = result.kvs[0]\n        print(kv)\n    else:\n        print('key not found')\n\n**Iterate** over key **range**\n\n.. sourcecode:: python\n\n    result = yield etcd.get(KeySet(b'mykey1', b'mykey5'))\n    for kv in result.kvs:\n        print(kv)\n\n**Iterate** over keys with given **prefix**\n\n.. sourcecode:: python\n\n    result = yield etcd.get(KeySet(b'mykey', prefix=True))\n    for kv in result.kvs:\n        print(kv)\n\nDeleting keys\n.............\n\n**Delete** a (single) key\n\n.. sourcecode:: python\n\n    etcd.delete(b'mykey3')\n\n**Delete** set of keys in given range\n\n.. sourcecode:: python\n\n    etcd.delete(KeySet(b'mykey3', b'mykey7'))\n\n**Delete** set of keys with given prefix and **return** previous key-value pairs\n\n.. sourcecode:: python\n\n    deleted = yield etcd.delete(KeySet(b'mykey3'), return_previous=True)\n    print('deleted key-value pairs: {}'.format(deleted.previous))\n\n\nWatching keys\n.............\n\n**Watch** keys for changes\n\n.. sourcecode:: python\n\n    # callback invoked for every change\n    def on_change(kv):\n        print('on_change: {}'.format(kv))\n\n    # start watching on set of keys with given prefix\n    d = etcd.watch([KeySet(b'mykey', prefix=True)], on_change)\n    print('watching ..')\n\n    # stop after 60 seconds\n    yield txaio.sleep(60)\n    d.cancel()\n\n\nTransactions\n............\n\n.. sourcecode:: python\n\n    txn = Transaction(\n        compare=[\n            CompValue(b'mykey1', '==', b'val1')\n        ],\n        success=[\n            OpSet(b'mykey1', b'val2'),\n            OpSet(b'mykey2', b'success')\n        ],\n        failure=[\n            OpSet(b'mykey2', b'failure'),\n            OpGet(b'mykey1')\n        ]\n    )\n\n    try:\n        result = yield etcd.submit(txn)\n    except Failed as failed:\n        print('transaction FAILED:')\n        for response in failed.responses:\n            print(response)\n    else:\n        print('transaction SUCCESS:')\n        for response in result.responses:\n            print(response)\n\n\nLeases\n......\n\nWrite me. For now, please see the lease.py example in the examples folder.\n\n\nLocks\n.....\n\nNO YET IMPLEMENTED (JUST A POSSIBLE SKETCH).\n\nCreate or wait to acquire a named lock\n\n.. sourcecode:: python\n\n    lock = yield etcd.lock(b'mylock')\n\n    # now do something on the exclusively locked resource\n    # or whatever the lock stands for or is associated with\n\n    lock.release()\n\nCreate or wait to acquire, but with a timeout\n\n\n.. sourcecode:: python\n\n    try:\n        lock = yield etcd.lock(b'mylock', timeout=10)\n    except Timeout:\n        print('could not acquire lock: timeout')\n    else:\n\n        # operate on the locked resource\n\n        lock.release()\n\n\nImporter and Exporter\n---------------------\n\nThe `txaio-etcd` package contains two command line tools:\n\n* `etcd-exporter`\n* `etcd-importer`\n\nThese can be used to export and import data from and to etcd.\n\nThe tools support various options for key/value types and input/output format, eg the exporter:\n\n.. code-block:: console\n\n    (cpy362_1) oberstet@thinkpad-t430s:~$ etcd-export --help\n    usage: etcd-export [-h] [-a ADDRESS] [-k {utf8,binary}]\n                       [-v {json,binary,utf8}] [-f {json,csv}] [-o OUTPUT_FILE]\n\n    Utility to dump etcd database to a file.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -a ADDRESS, --address ADDRESS\n                            Address(with port number) of the etcd daemon (default:\n                            http://localhost:2379)\n      -k {utf8,binary}, --key-type {utf8,binary}\n                            The key type in the etcd database (default: utf8).\n      -v {json,binary,utf8}, --value-type {json,binary,utf8}\n                            The value type in the etcd database (default: json).\n      -f {json,csv}, --output-format {json,csv}\n                            The output format for the database dump (default:\n                            json).\n      -o OUTPUT_FILE, --output-file OUTPUT_FILE\n                            Path for the output file. When unset, output goes to\n                            stdout.\n\nand the importer:\n\n.. code-block:: console\n\n    (cpy362_1) oberstet@thinkpad-t430s:~$ etcd-import --help\n    usage: etcd-import [-h] [-a ADDRESS] [-k {utf8,binary}]\n                       [-v {json,binary,utf8}] [-f {json,csv}] [-d]\n                       [-o DRY_OUTPUT] [--verbosity {silent,compact,verbose}]\n                       input_file\n\n    Utility to import external file to etcd database.\n\n    positional arguments:\n      input_file            Path for the input file.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -a ADDRESS, --address ADDRESS\n                            Address(with port number) of the etcd daemon (default:\n                            http://localhost:2379)\n      -k {utf8,binary}, --key-type {utf8,binary}\n                            The key type in the etcd database (default: utf8).\n      -v {json,binary,utf8}, --value-type {json,binary,utf8}\n                            The value type in the etcd database (default: json).\n      -f {json,csv}, --input-format {json,csv}\n                            The input format for the database file (default:\n                            json).\n      -d, --dry-run         Print the potential changes to import.\n      -o DRY_OUTPUT, --dry-output DRY_OUTPUT\n                            The file to put the result of dry run (default:\n                            stdout).\n      --verbosity {silent,compact,verbose}\n                            Set the verbosity level.\n\n\nDesign Goals\n------------\n\nWe want etcd3 support because of the extended, useful functionality and semantics offered.\n\nSupporting etcd2 using a restricted parallel API or by hiding away the differences between etcd2 and etcd3 seems ugly and we didn't needed etcd2 support anyway. So etcd2 support is a non-goal.\n\nThe implementation must be fully non-blocking and asynchronous, and must run on Twisted in particular. Supporting asyncio, or even a Python 3.5+ syntax for Twisted etc etc seems possible to add later without affecting the API.\n\nThe implementation must run fast on PyPy, which rules out using native code wrapped using cpyext. We also want to avoid native code in general, as it introduces security and memory-leak worries, and PyPy's JIT produces very fast code anyway.\n\n\nImplementation\n--------------\n\nThe library uses the `gRPC HTTP gateway <https://coreos.com/etcd/docs/latest/dev-guide/api_grpc_gateway.html>`_ within etcd3 and talks regular HTTP/1.1 with efficient long-polling for watching keys.\n\n`Twisted Web agent <https://twistedmatrix.com/documents/current/web/howto/etcd.html>`_ and `treq <https://github.com/twisted/treq>`_ is used for HTTP, and both use a configurable Twisted Web HTTP connection pool.\n\n\nCurrent limitations\n-------------------\n\nMissing asyncio support\n.......................\n\nThe API of txaioetcd was designed not leaking anything from Twisted other than Deferreds. This is similar to and in line with the approach that txaio takes.\n\nThe approach will allow us to add an asyncio implementation under the hood without affecting existing application code, but make the library run over either Twisted or asyncio, similar to txaio.\n\nFurther, Twisted wants to support the new Python 3.5+ async/await syntax on Twisted Deferreds, and that in turn would make it possible to write applications on top of txaioetcd that work either using native Twisted or asyncio without changing the app code.\n\nNote that this is neither the same as running a Twisted reactor on top of an asyncio loop nor vice versa. The app is still running under Twisted *or* asyncio, but selecting the framework might even be a user settable command line option to the app.\n\n\nMissing native protocol support\n...............................\n\nThe implementation talks HTTP/1.1 to the gRPC HTTP gateway of etcd3, and the binary payload is transmitted JSON with string values that Base64 encode the binary values of the etcd3 API.\n\nLikely more effienct would be talk the native protocol of etcd3, which is HTTP/2 and gRPC/protobuf based. The former requires a HTTP/2 Twisted client. The latter requires a pure Python implementation of protobuf messages used and gRPC. So this is definitely some work, and probably premature optimization. The gateway is just way simpler to integrate with as it uses the least common or invasive thing, namely HTTP/REST and long polling. Certainly not the most efficient, that is also true.\n\nBut is seems recommended to run a local etcd proxy on each host, and this means we're talking the (ineffcient) HTTP protocol over loopback TCP, and hence it is primarily a question of burning some additional CPU cycles.\n\n\nMissing dynamic watches\n.......................\n\nThe HTTP/2 etcd3 native protocol allows to change a created watch on the fly. Maybe the gRPC HTTP gateway also allows that.\n\nBut I couldn't get a streaming *request* working with neither Twisted Web agent nor treq. A streaming *response* works of course, as in fact this is how the watch feature in txaioetcd is implemented.\n\nAnd further, the API of txaioetcd doesn't expose it either. A watch is created, started and a Twisted Deferred (or possibly asyncio Future) is returned. The watch can be stopped by canceling the Deferred (Future) previously returned - but that is it. A watch cannot be changed after the fact.\n\nRegarding the public API of txaioetcd, I think there will be a way that would allow adding dynamic watches that is upward compatible and hence wouldn't break any app code. So it also can be done later.\n\n\nAsynchronous Iterators\n......................\n\nWhen a larger set of keys and/or values is fetched, it might be beneficial to apply the asynchronous iterator pattern.\n\nThis might come in handy on newer Pythons with syntax for that.\n\nNote that a full blown consumer-producer (flow-controller) pattern is probably overkill, as etcd3 isn't for large blobs or media files.\n\n\nAsynchronous Context Managers\n.............................\n\nThis would be a nice and robust idiom to write app code in:\n\n.. sourcecode:: python\n\n    async with etcd.lock(b'mylock') as lock:\n        # whatever the way this block finishes,\n        # the lock will be unlocked\n\n\nNo etcd admin API support\n.........................\n\netcd has a large number of administrative procedures as part of the API like list, add, remove etc cluster members and other things.\n\nThese API parts of etcd are currently not exposed in txaioetcd - and I am not completely convinced it would necessary given there is `etcdctl` or even desirable from a security perspective, as it exposes sensitive API at the app level.\n\nBut yes, it is missing completely.\n\n\n.. |Version| image:: https://img.shields.io/pypi/v/txaioetcd.svg\n   :target: https://pypi.python.org/pypi/txaioetcd\n\n.. |Docs| image:: https://readthedocs.org/projects/txaio-etcd/badge/?version=latest\n   :target: https://txaio-etcd.readthedocs.io/en/latest/\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/crossbario/txaio-etcd",
    "keywords": "twisted etcd etcd3",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "txaioetcd",
    "platform": "Any",
    "project_url": "https://pypi.org/project/txaioetcd/",
    "release_url": "https://pypi.org/project/txaioetcd/0.4.0/",
    "requires_dist": [
      "twine; extra == 'dev'",
      "sphinx-rtd-theme; extra == 'dev'",
      "sphinx; extra == 'dev'",
      "aiohttp (>=2.2.5)",
      "txaio (>=2.6.1)",
      "treq (>=16.12.0)",
      "twisted (>=16.6.0)",
      "six (>=1.10.0)"
    ],
    "requires_python": "",
    "summary": "Asynchronous client library for etcd3",
    "version": "0.4.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "14ccbaed57d3203ebcadd132181699c9",
          "sha256": "01346f2844418008a50f803cd5178db062fac69d2f88fa3fb83464b19865999e"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14ccbaed57d3203ebcadd132181699c9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 30061,
        "upload_time": "2017-02-12T21:06:20",
        "url": "https://files.pythonhosted.org/packages/91/49/45c5b80c486c04879bf1171a3b1aa904eb26197159a40bcc44f889bcb19b/txaioetcd-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "601af2e71b07f09cecd4246530573808",
          "sha256": "bffdb75bfc0e3d7a562cd85980baa527ee09bcdda7711851952829ff56bcb95d"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "601af2e71b07f09cecd4246530573808",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26964,
        "upload_time": "2017-02-12T21:06:22",
        "url": "https://files.pythonhosted.org/packages/f2/e0/b90df183532945ee315d05b3f2bcf9279776adcae9eecd52427cf6cbdaa8/txaioetcd-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b36012dcf6afa55879c8f03ddf390859",
          "sha256": "3c9fe96ea4f41cb91b5c1ed80e6850630f60914bc66f6b99cd99f4b23258ac44"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b36012dcf6afa55879c8f03ddf390859",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 31114,
        "upload_time": "2017-03-10T14:18:56",
        "url": "https://files.pythonhosted.org/packages/03/71/25ce7b053bbdea00444dc6307b0fccddd559bd38bf1f50a58d79dea07730/txaioetcd-0.2.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "94c3a26682947b8f66974a3df8347010",
          "sha256": "7db55f2850e03f11f332acf216b1a5de2ef442555d8abafc4e5e6c2a61a00815"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "94c3a26682947b8f66974a3df8347010",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28017,
        "upload_time": "2017-03-10T14:18:58",
        "url": "https://files.pythonhosted.org/packages/c8/77/2981cf2a9a7f8be7223216ec892cffaf9dd0ef6f037d1ff809f041d64237/txaioetcd-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "630f5793598223e3f1ccb46e8c1aa9fd",
          "sha256": "0cfb20ae4a805cf254f95d9561db01cddfd62c1c788d6b59eff1f52394c76a8c"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "630f5793598223e3f1ccb46e8c1aa9fd",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 31195,
        "upload_time": "2017-03-17T07:35:51",
        "url": "https://files.pythonhosted.org/packages/40/fc/74b073b5bf5a9697f7ec43139fcf66f08eec60f5109124a632e6aca36d73/txaioetcd-0.2.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "15c071b83845df022ee3c7bbafca61c7",
          "sha256": "9d7ba3f25e9222fcc1094cfc2af0a84124ce694b8ca35eec6ca7fe6c84905231"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "15c071b83845df022ee3c7bbafca61c7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28132,
        "upload_time": "2017-03-17T07:35:53",
        "url": "https://files.pythonhosted.org/packages/cf/ef/5ad34b40cac9da5e8bae60324d3e76a62ae6d48e29b24d4e385687eea7ce/txaioetcd-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "73ab69c84bb58364676fce4b44bdd2f7",
          "sha256": "1531f78fbf83a3ec6a79a1b2f700ef204e51288710f2f68538ae27cb34abff09"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.2.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "73ab69c84bb58364676fce4b44bdd2f7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 31204,
        "upload_time": "2017-03-17T17:33:55",
        "url": "https://files.pythonhosted.org/packages/e2/2f/435912b68ba74865e8642041163a2816c09edaec2c82540b6a960e8d5771/txaioetcd-0.2.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e68b81671858ded0a7ec3c65218c062f",
          "sha256": "4866f4ebe8e26101b8eae40b0be6c6fe03b6e49028cf5afad1dcc521c13aa183"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e68b81671858ded0a7ec3c65218c062f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28223,
        "upload_time": "2017-03-17T17:33:58",
        "url": "https://files.pythonhosted.org/packages/cf/0b/40a8e1c407b9ce70b2c9d12d347c48e67d0ba4f34e72936b55ba551f8052/txaioetcd-0.2.2.tar.gz"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1ec2f129a3555565f7cca2d046c3e722",
          "sha256": "eec37fc080e93fd7322c80acbbd2dac7d0f30433f93702b7208b466e84b31c14"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.2.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ec2f129a3555565f7cca2d046c3e722",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 31963,
        "upload_time": "2017-03-29T07:59:29",
        "url": "https://files.pythonhosted.org/packages/d7/6f/76bc450f169af04a972eb50ad201c964b4c8260d530fa95a4d264c82bf40/txaioetcd-0.2.3-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "702a89b4c1f27aa0d973f9e5651592b9",
          "sha256": "d8d1ddbe75eb2bf66c2c8da4ed7077e961a549fc633d7fa423c70eb9d1b38af6"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "702a89b4c1f27aa0d973f9e5651592b9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28288,
        "upload_time": "2017-03-29T07:59:31",
        "url": "https://files.pythonhosted.org/packages/73/df/8c59dd1302f1b561ed77efd66f8833035ecd2da6a60982bc519d51ce6fb2/txaioetcd-0.2.3.tar.gz"
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "619170c272b95a89b652c3a52cb8a49b",
          "sha256": "27a8d871e0031984e96b4c01c267427a755f63862cc3804dae83158880d6fe33"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.2.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "619170c272b95a89b652c3a52cb8a49b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 31962,
        "upload_time": "2017-06-16T12:50:08",
        "url": "https://files.pythonhosted.org/packages/14/86/e99b5e618bd89d54a7a017be6fd4e07a4ae70ff09a45ee16969abc40c152/txaioetcd-0.2.4-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "675cd2c2a5af5cc7644b3850aeb7e5d3",
          "sha256": "dc935351a253ee22fb8beb86ea7fc4d762fcac9e85b06ca4401a7cde6935711f"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "675cd2c2a5af5cc7644b3850aeb7e5d3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28303,
        "upload_time": "2017-06-16T12:50:10",
        "url": "https://files.pythonhosted.org/packages/1f/87/dafd17b7cef831c28ab45650ada9bdfc3bf8a76b1800cb28b159e78eea87/txaioetcd-0.2.4.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b9f9a6fb6d5cad5ca49cb9c651a66866",
          "sha256": "a0b68cd44024c8ef8e191aaa2c0484edb8ffc916f06452f76f4adcfa1de880c1"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9f9a6fb6d5cad5ca49cb9c651a66866",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 39234,
        "upload_time": "2017-08-14T09:11:07",
        "url": "https://files.pythonhosted.org/packages/b7/1c/7157c88f7c51b424d129242e5625fda7e12b218a1a0d3883964418aee3da/txaioetcd-0.3.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6769b08225f7ab503debe647bfefb138",
          "sha256": "fcf65a0a10430670cae0062c0bfbdf93c5d6fe24e16ede3a4e70597dfd867c72"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6769b08225f7ab503debe647bfefb138",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 33296,
        "upload_time": "2017-08-14T09:11:09",
        "url": "https://files.pythonhosted.org/packages/12/6c/e7003946fdb5fc3f3edea1da02482e3ffcfb1dd40a322ca19c2021d8c02b/txaioetcd-0.3.0.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "05758203cb53e16cefd48b2316adacf6",
          "sha256": "9573165c1df5d8cfd37a1015633464421df858b5921b1576c6dcde08c04b32f7"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05758203cb53e16cefd48b2316adacf6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 42396,
        "upload_time": "2017-11-03T14:46:22",
        "url": "https://files.pythonhosted.org/packages/8c/64/269fa0f80cff2a4e8f56b849c13315474abd5f95546cc12ebeb43cc85803/txaioetcd-0.4.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3eadd922491ebf39cbae4bd35f935594",
          "sha256": "a0ee5822cabdbfb84edc3408506e3895706c7d02781bd90ba3fb9959b4d1d7c8"
        },
        "downloads": -1,
        "filename": "txaioetcd-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3eadd922491ebf39cbae4bd35f935594",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 34448,
        "upload_time": "2017-11-03T14:46:24",
        "url": "https://files.pythonhosted.org/packages/49/c4/edffc86a89ee5735d3601d195ca0ce53076f17c19a828760fdf0c43e3e5a/txaioetcd-0.4.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "05758203cb53e16cefd48b2316adacf6",
        "sha256": "9573165c1df5d8cfd37a1015633464421df858b5921b1576c6dcde08c04b32f7"
      },
      "downloads": -1,
      "filename": "txaioetcd-0.4.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "05758203cb53e16cefd48b2316adacf6",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 42396,
      "upload_time": "2017-11-03T14:46:22",
      "url": "https://files.pythonhosted.org/packages/8c/64/269fa0f80cff2a4e8f56b849c13315474abd5f95546cc12ebeb43cc85803/txaioetcd-0.4.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "3eadd922491ebf39cbae4bd35f935594",
        "sha256": "a0ee5822cabdbfb84edc3408506e3895706c7d02781bd90ba3fb9959b4d1d7c8"
      },
      "downloads": -1,
      "filename": "txaioetcd-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3eadd922491ebf39cbae4bd35f935594",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 34448,
      "upload_time": "2017-11-03T14:46:24",
      "url": "https://files.pythonhosted.org/packages/49/c4/edffc86a89ee5735d3601d195ca0ce53076f17c19a828760fdf0c43e3e5a/txaioetcd-0.4.0.tar.gz"
    }
  ]
}