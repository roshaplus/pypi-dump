{
  "info": {
    "author": "Pavel Savchenko",
    "author_email": "pavel@modlinltd.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "Django Advanced Filters\r\n=======================\r\n\r\n+-----------+------------------+---------------------+----------+------------+\r\n| Branch    | Build            | Coverage            | PyPI     | Gitter     |\r\n+===========+==================+=====================+==========+============+\r\n| Master    | |Build-Master|   | |Coverage-Master|   | |PyPI|   | |Gitter|   |\r\n+-----------+------------------+---------------------+----------+------------+\r\n| Develop   | |Build-Develop|  | |Coverage-Develop|  |          |            |\r\n+-----------+------------------+---------------------+----------+------------+\r\n\r\nA django ModelAdmin mixin which adds advanced filtering abilities to the\r\nadmin.\r\n\r\nMimics the advanced search feature in\r\n`VTiger <https://www.vtiger.com/>`__, `see here for more\r\ninfo <https://wiki.vtiger.com/index.php/Create_Custom_Filters>`__\r\n\r\n.. figure:: https://raw.githubusercontent.com/modlinltd/django-advanced-filters/develop/screenshot.png\r\n   :alt: Creating via a modal\r\n   :width: 768 px\r\n\r\n\r\nFor release notes, see `Changelog <https://raw.githubusercontent.com/modlinltd/django-advanced-filters/develop/CHANGELOG.rst>`__\r\n\r\nRequirements\r\n============\r\n\r\n-  Django >= 1.5 (Django 1.5 - 1.9 on Python 2/3/PyPy2)\r\n-  django-easy-select2 == 1.2.5\r\n-  django-braces == 1.4.0\r\n-  simplejson == 3.6.5\r\n\r\nInstallation & Set up\r\n=====================\r\n\r\n1. Install from pypi: ``pip install django-advanced-filters``\r\n2. Add both ``'advanced_filters'`` and ``'easy_select2'`` to\r\n   ``INSTALLED_APPS``.\r\n3. Add ``url(r'^advanced_filters/', include('advanced_filters.urls'))``\r\n   to your project's urlconf.\r\n4. Run ``python manage.py syncdb`` or ``python manage.py migrate`` (for django >= 1.7)\r\n\r\nIntegration Example\r\n===================\r\n\r\nExtending a ModelAdmin is pretty straightforward:\r\n\r\n.. code-block:: python\r\n\r\n    class ProfileAdmin(AdminAdvancedFiltersMixin, models.ModelAdmin):\r\n        list_filter = ('name', 'language', 'ts')   # simple list filters\r\n\r\n        # select from these fields in the advanced filter creation form\r\n        advanced_filter_fields = (\r\n            'name', 'language', 'ts'\r\n            # even use related fields as lookup fields\r\n            'country__name', 'posts__title', 'comments__content'\r\n        )\r\n\r\nAdding a new advanced filter (see below) will display a new list filter\r\nnamed \"Advanced filters\" which will list all the filter the currently\r\nlogged in user is allowed to use (by default only those he/she created).\r\n\r\nCustom naming of fields\r\n-----------------------\r\n\r\nInitially, each field in ``advanced_filter_fields`` is resolved into an\r\nactual model field. That field's verbose\\_name attribute is then used as\r\nthe text of the displayed option. While uncommon, it occasionally makes\r\nsense to use a custom name, especially when following a relationship, as\r\nthe context then changes.\r\n\r\nFor example, when a profile admin allows filtering by a user name as\r\nwell as a sales representative name, it'll get confusing:\r\n\r\n.. code-block:: python\r\n\r\n    class ProfileAdmin(AdminAdvancedFiltersMixin, models.ModelAdmin):\r\n        advanced_filter_fields = ('name', 'sales_rep__name')\r\n\r\nIn this case the field options will both be named \"name\" (by default).\r\n\r\nTo fix this, use custom naming:\r\n\r\n.. code-block:: python\r\n\r\n    class ProfileAdmin(AdminAdvancedFiltersMixin, models.ModelAdmin):\r\n        advanced_filter_fields = ('name', ('sales_rep__name', 'assigned rep'))\r\n\r\nNow, you will get two options, \"name\" and \"assigned rep\".\r\n\r\nAdding new advanced filters\r\n===========================\r\n\r\nBy default the mixin uses a template which extends django's built-in\r\n``change_list`` template. This template is based off of grapelli's fork\r\nof this template (hence the 'grp' classes and funny looking javascript).\r\n\r\nThe default template also uses the superb\r\n`magnificPopup <dimsemenov/Magnific-Popup>`__ which is currently bundled\r\nwith the application.\r\n\r\nRegardless of the above, you can easily write your own template which\r\nuses context variables ``{{ advanced_filters }}`` and\r\n``{{ advanced_filters.formset }}``, to render the advanced filter\r\ncreation form.\r\n\r\nStructure\r\n=========\r\n\r\nEach advanced filter has only a couple of required fields when\r\nconstructed with the form; namely the title and a formset (consisting of\r\na form for each sub-query or rule of the filter query).\r\n\r\nEach form in the formset requires the following fields: ``field``,\r\n``operator``, ``value``\r\n\r\nAnd allows the optional ``negate`` and ``remove`` fields.\r\n\r\nLet us go over each of the fields in a rule fieldset.\r\n\r\nField\r\n-----\r\n\r\nThe list of all available fields for this specific instance of the\r\nModelAdmin as specific by the ```advanced_filter_fields``\r\nproperty. <#integration-example>`__\r\n\r\nThe OR field\r\n~~~~~~~~~~~~\r\n\r\n``OR`` is an additional field that is added to every rule's available\r\nfields.\r\n\r\nIt allows constructing queries with `OR\r\nstatements <https://docs.djangoproject.com/en/dev/topics/db/queries/#complex-lookups-with-q-objects>`__.\r\nYou can use it by creating an \"empty\" rule with this field \"between\" a\r\nset of 1 or more rules.\r\n\r\nOperator\r\n--------\r\n\r\nQuery field suffixes which specify how the ``WHERE`` query will be\r\nconstructed.\r\n\r\nThe currently supported are as follows: ``iexact``, ``icontains``,\r\n``iregex``, ``range``, ``isnull``, ``istrue`` and ``isfalse``\r\n\r\nFor more detail on what they mean and how they function, see django's\r\n`documentation on field\r\nlookups <https://docs.djangoproject.com/en/dev/ref/models/querysets/#field-lookups>`__.\r\n\r\nValue\r\n-----\r\n\r\nThe value which the specific sub-query will be looking for, i.e the\r\nvalue of the field specified above, or in django query syntax:\r\n``.filter(field=value)``\r\n\r\nNegate\r\n------\r\n\r\nA boolean (check-box) field to specify whether this rule is to be\r\nnegated, effectively making it a \"exclude\" sub-query.\r\n\r\nRemove\r\n------\r\n\r\nSimilarly to other `django\r\nformsets <https://docs.djangoproject.com/en/dev/topics/forms/formsets/>`__,\r\nused to remove the formset on submit.\r\n\r\nEditing previously created advanced filters\r\n===========================================\r\n\r\nThe ``AdvancedFilterAdmin`` class (a subclass of ``ModelAdmin``) is\r\nprovided and registered with ``AdvancedFilter`` in admin.py module.\r\n\r\nThe model's change\\_form template is overridden from grapelli's/django's\r\nstandard template, to mirror the add form modal as closely as possible.\r\n\r\n*Note:* currently, adding new filters from the ModelAdmin change page is\r\nnot supported.\r\n\r\nQuery Serialization\r\n===================\r\n\r\n**TODO:** write a few words on how serialization of queries is done.\r\n\r\nModel correlation\r\n=================\r\n\r\nSince version 1.0, The underlying ``AdvancedFilter`` model instances are\r\ntightly coupled with a specific model (using the app\\_label.Name model\r\nname), for which admin changelist they are to used and created in.\r\n\r\nThis change has a few benefits:\r\n\r\n1. Admin mixin can be used with multiple ``ModelAdmin`` classes while\r\n   performing specific query serialization and field validation that are\r\n   at the base of the filter functionality.\r\n\r\n2. Allows users to edit previously created filters outside of the\r\n   context of a changelist, as we do in the\r\n   ```AdvancedFilterAdmin`` <#editing-previously-created-advanced-filters>`__.\r\n\r\n3. Limit the ``AdvancedListFilters`` to limit queryset (and thus, the\r\n   underlying options) to a specified model.\r\n\r\nNote: Since we are at the early stages of development I have skipped the\r\nSouth / 1.7 schema (new field) and data migrations (add specific model\r\nto all existing instances of AdvancedFilter model) migrations. Though\r\nthis shouldn't be too difficult to do, if the need arises I can add\r\nmigration examples.\r\n\r\nViews\r\n=====\r\n\r\nThe GetFieldChoices view is required to dynamically (using javascript)\r\nfetch a list of valid field choices when creating/changing an\r\n``AdvancedFilter``.\r\n\r\nTODO\r\n====\r\n\r\n-  Add permission user/group selection functionality to the filter form\r\n-  Allow toggling of predefined templates (grappelli / vanilla django\r\n   admin), and front-end features.\r\n-  Support more (newer) python/django versions\r\n\r\n.. |Build-Master| image:: https://travis-ci.org/modlinltd/django-advanced-filters.svg?branch=master\r\n   :target: https://travis-ci.org/modlinltd/django-advanced-filters\r\n.. |Coverage-Master| image:: https://coveralls.io/repos/modlinltd/django-advanced-filters/badge.svg?branch=master\r\n   :target: https://coveralls.io/github/modlinltd/django-advanced-filters?branch=master\r\n.. |PyPI| image:: https://img.shields.io/pypi/pyversions/django-advanced-filters.svg\r\n   :target: https://pypi.python.org/pypi/django-advanced-filters\r\n.. |Gitter| image:: https://badges.gitter.im/Join%20Chat.svg\r\n   :target: https://gitter.im/modlinltd/django-advanced-filters?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\r\n.. |Build-Develop| image:: https://travis-ci.org/modlinltd/django-advanced-filters.svg?branch=develop\r\n   :target: https://travis-ci.org/modlinltd/django-advanced-filters\r\n.. |Coverage-Develop| image:: https://coveralls.io/repos/modlinltd/django-advanced-filters/badge.svg?branch=develop\r\n   :target: https://coveralls.io/github/modlinltd/django-advanced-filters?branch=develop\r\n\r\nChangelog\r\n=========\r\n\r\n1.0.4 - Unbreak Python 3\r\n------------------------\r\n\r\nThis release contains a fix to allow distribution installation on Python 3 which was broken since 1.0.2\r\n\r\n1.0.3 - The Package Fix\r\n-----------------------\r\n\r\nThis is a quick fix for packaging (setup.py) errors and documentation.\r\n\r\nBugs\r\n~~~~\r\n\r\n-  add missing Django 1.7 migrations\r\n-  README updated to mention ``manage.py migrate`` command\r\n-  Use ReST for README and CHANGELOG: avoid conversion from markdown\r\n\r\n\r\n1.0.2 - A Better Future\r\n-----------------------\r\n\r\nThis release features better test coverage and support for Django 1.9.\r\n\r\nBugs\r\n~~~~\r\n\r\n-  stretch formset table to the modal container width\r\n-  toggle advanced ``vendor/jquery`` dir according to Django version\r\n-  retain support older Django versions\r\n-  clean up legacy tags in templates\r\n\r\nTests\r\n~~~~~\r\n\r\n-  add admin views tests\r\n-  add Django 1.9 to test matrix\r\n-  other minor improvements\r\n\r\nDocs\r\n~~~~\r\n\r\n-  Improve README with a newer screenshot and pretty tables for badges\r\n\r\nContributors:\r\n~~~~~~~~~~~~~\r\n\r\n-  Pavel Savchenko\r\n-  Leonardo J. Caballero G\r\n-  Schuyler Duveen\r\n\r\n1.0.1 - A Public Release\r\n------------------------\r\n\r\nBugs\r\n~~~~\r\n\r\n-  proper support for py26 and py3X and different Django releases\r\n-  avoid querying all instances for choices\r\n-  resolve settings inside view and refine error handling\r\n\r\nTests\r\n~~~~~\r\n\r\n-  add doctests to the ``form_helpers``\r\n-  add tests for ``forms``\r\n-  add test case ``views.TestGetFieldChoicesView``\r\n-  setup.py/travis: add ``test-reqs.txt`` as extras\\_require\r\n-  refactor testing to use ``py.test`` and run ``tox`` from ``setup.py``\r\n-  travis: use latest version of each Django release\r\n\r\nDocs:\r\n~~~~~\r\n\r\n-  ``README``: explain what we test against\r\n\r\n1.0 - First contact\r\n-------------------\r\n\r\nMajor changes\r\n~~~~~~~~~~~~~\r\n\r\n-  Add a new (required) field\r\n   ```AdvancedFilter.model`` <https://raw.githubusercontent.com/modlinltd/django-advanced-filters/develop/README.rst#model-correlation>`__\r\n-  Add parsing query dict into initialized formsets (allows for `editing\r\n   existing\r\n   instance <https://raw.githubusercontent.com/modlinltd/django-advanced-filters/develop/README.rst#editing-previously-created-advanced-filters>`__).\r\n-  Add\r\n   ```AdvancedFilterAdmin`` <#editing-previously-created-advanced-filters>`__\r\n   for actually accessing and `editing existing ``AdvancedFilter``\r\n   instances <https://raw.githubusercontent.com/modlinltd/django-advanced-filters/develop/README.rst#editing-previously-created-advanced-filters>`__.\r\n-  Use `Select2 <https://github.com/asyncee/django-easy-select2>`__ and\r\n   an AJAX view to dynamically populate ```field``\r\n   options <https://raw.githubusercontent.com/modlinltd/django-advanced-filters/develop/README.rst#fields>`__.\r\n-  Add proper support for nested serialization of queries.\r\n\r\nMinor changes\r\n~~~~~~~~~~~~~\r\n\r\n-  Implement more ```operators`` <https://raw.githubusercontent.com/modlinltd/django-advanced-filters/develop/README.rst#operators>`__ (``isnull``,\r\n   ``istrue`` and ``isfalse``)\r\n-  Allow `custom verbose naming of fields in\r\n   advanced\\_filter\\_fields <https://raw.githubusercontent.com/modlinltd/django-advanced-filters/develop/README.rst#custom-naming-of-fields>`__\r\n-  Add helper methods to the model to hide (and decouple) core\r\n   serialization functionality from users.\r\n-  Strip whitespace in field values validation\r\n-  Setup and packaging (``setup.py``/``MANIFEST.in``)\r\n-  Hide ``QSerializer`` calling logic in the model\r\n-  Allow modifying ``advanced_filter_form`` property (defaults to\r\n   ``AdvancedFilterForm``)\r\n-  Correct documentation regarding position of mixin in subclass (issue\r\n   #1)",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/modlinltd/django-advanced-filters",
    "keywords": "django-admin admin advanced filters custom query",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-advanced-filters",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-advanced-filters/",
    "release_url": "https://pypi.org/project/django-advanced-filters/1.0.5/",
    "requires_python": null,
    "summary": "A Django application for advanced admin filters",
    "version": "1.0.5"
  },
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2b92b8811103121ed3e933fd9849df7f",
          "sha256": "78f7068e5ee699900a42e327cc68893fb174188bb899d0e4bc527b713790f4ef"
        },
        "downloads": 508,
        "filename": "django-advanced-filters-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2b92b8811103121ed3e933fd9849df7f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 36052,
        "upload_time": "2016-01-03T10:27:29",
        "url": "https://files.pythonhosted.org/packages/be/b4/18a7eb58550afb3fd8fbf88405ba7f00506e621bbcaac522bae4ca709843/django-advanced-filters-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "549147fb12e85f62fb8a326336c72ada",
          "sha256": "56e0f875b0887a0a1ab7518f7ed5d29d740187b1cfee0dd1e0c432be716123c5"
        },
        "downloads": 233,
        "filename": "django-advanced-filters-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "549147fb12e85f62fb8a326336c72ada",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 36815,
        "upload_time": "2016-03-20T09:16:56",
        "url": "https://files.pythonhosted.org/packages/18/67/74d7001e243bf87a54b1e36ef06f9fd6af1d68664a993efc11a2527e6a3c/django-advanced-filters-1.0.2.tar.gz"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "98a43e882e5fd773405abc141039cab2",
          "sha256": "f011487cd3851ec83c08460e4db1f3413a325398d86cd255f8b47aee48c9ce1d"
        },
        "downloads": 216,
        "filename": "django-advanced-filters-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "98a43e882e5fd773405abc141039cab2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 36843,
        "upload_time": "2016-03-21T09:13:20",
        "url": "https://files.pythonhosted.org/packages/e6/da/5bd3cf1698832868e32d1974fa1e484a81ed4b2feafa50b76b34ef9c1ca0/django-advanced-filters-1.0.3.tar.gz"
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "21617c4eab185041b8d8fb386f0c7ba4",
          "sha256": "0f09a98a84ae2d5dfed17fef36e4bd4a1d5979c2938553e3be59d7f30564dab6"
        },
        "downloads": 1171,
        "filename": "django-advanced-filters-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "21617c4eab185041b8d8fb386f0c7ba4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 37037,
        "upload_time": "2016-03-21T10:48:02",
        "url": "https://files.pythonhosted.org/packages/e9/99/2d7201a6de4fee99b601c70ea1cc0dfc323bdd735f61db9859b72396c133/django-advanced-filters-1.0.4.tar.gz"
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bb327a75f5445f9b95991fe68e798ade",
          "sha256": "b13e5116ba4305032c46268b8ba77c2423f493365a22ef232700b5bb76ea4059"
        },
        "downloads": 275,
        "filename": "django_advanced_filters-1.0.5-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb327a75f5445f9b95991fe68e798ade",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 69926,
        "upload_time": "2017-01-03T19:04:35",
        "url": "https://files.pythonhosted.org/packages/2e/fb/2071cd3ab5b034bd14897730dcea142631ad47d042738f9cf1c8a4595abc/django_advanced_filters-1.0.5-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e05ec04f36474755d4bef9abad387fa6",
          "sha256": "30712b790ff4cb6344b0d690f759ffcccba42f64cf67aabdc3c04b189fb84067"
        },
        "downloads": 277,
        "filename": "django-advanced-filters-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "e05ec04f36474755d4bef9abad387fa6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58773,
        "upload_time": "2017-01-03T19:04:37",
        "url": "https://files.pythonhosted.org/packages/2e/08/6fb577c0a5d95bf1ee7d0ef50209e4f5ffb86cb5fb12f6e7e585e17239d9/django-advanced-filters-1.0.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "bb327a75f5445f9b95991fe68e798ade",
        "sha256": "b13e5116ba4305032c46268b8ba77c2423f493365a22ef232700b5bb76ea4059"
      },
      "downloads": 275,
      "filename": "django_advanced_filters-1.0.5-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "bb327a75f5445f9b95991fe68e798ade",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 69926,
      "upload_time": "2017-01-03T19:04:35",
      "url": "https://files.pythonhosted.org/packages/2e/fb/2071cd3ab5b034bd14897730dcea142631ad47d042738f9cf1c8a4595abc/django_advanced_filters-1.0.5-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "e05ec04f36474755d4bef9abad387fa6",
        "sha256": "30712b790ff4cb6344b0d690f759ffcccba42f64cf67aabdc3c04b189fb84067"
      },
      "downloads": 277,
      "filename": "django-advanced-filters-1.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "e05ec04f36474755d4bef9abad387fa6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 58773,
      "upload_time": "2017-01-03T19:04:37",
      "url": "https://files.pythonhosted.org/packages/2e/08/6fb577c0a5d95bf1ee7d0ef50209e4f5ffb86cb5fb12f6e7e585e17239d9/django-advanced-filters-1.0.5.tar.gz"
    }
  ]
}