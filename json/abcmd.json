{
  "info": {
    "author": "Konstantinos Tsakiltzidis",
    "author_email": "laerusk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "abcmd\n=====\n\n.. image:: https://img.shields.io/pypi/v/abcmd.svg\n    :target: https://pypi.python.org/pypi/abcmd\n    :alt: Latest PyPI version\n\n.. image:: https://travis-ci.org/modulus-sa/abcmd.svg?branch=master\n    :target: https://travis-ci.org/modulus-sa/abcmd\n\n.. image:: https://codecov.io/gh/modulus-sa/abcmd/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/modulus-sa/abcmd\n\nA library for wrapping shell commands with static configuration.\n\nUsage\n-----\n\nThe library provides the ``abcmd.Command`` ABC and two helper classes for\nconfiguration ``abcmd.config.Checker`` and ``abcmd.config.Loader`` that can be used\nto create shell command wrappers.\n\n\nExamples\n--------\n\nAutomating backup of dotfiles\n\nFirst we subclass ``Command`` and describe the procedure:\n\n.. code-block:: python\n\n    import datetime\n    import os\n\n    import abcmd\n\n    class Backup(abcmd.Command):\n        make = 'mkdir {directory}'\n        copy = 'cp {files} {directory}'\n        sync = 'rsync {directory} {user}@{server}:'\n\n        def run(self, *args, **kwargs):\n            os.chdir(os.environ['HOME'])\n            self.run_make()\n            self.run_copy()\n            self.run_sync()\n\n        def dont_run(self, *args, **kwargs):\n            # don't run between working hours\n            return dt.datetime.now().hour in range(8, 16)\n\n        def handle_error(self, cmd, error):\n            # if the backup directory exists ignore the error and continue\n            return cmd.startswith('mkdir') and error.endswith('File exists')\n\nthen we instantiate with a mapping that is used to render the templates,\nthis will return a callable object that when called will run the procedure:\n\n.. code-block:: python\n\n    config = {\n        'user': 'laerus',\n        'directory': 'dotfiles',\n        'files': ['.vimrc', '.bashrc', '.inputrc'],\n        'server': '192.168.1.10'\n    }\n\n    runner = Backup(config)\n    runner()\n\n\nThis would be equivalent with running the following commands:\n\n.. code-block:: shell\n\n    $ cd ~\n    $ mkdir dotfiles \n    $ cp .vimrc .bashrc .inputrc dotfiles\n    $ rsync dotfiles laerus@192.168.1.10:\n\n\nUsing the ``config.Loader`` makes it possible to retrieve\nthe static configuration from a file:\n\ncreating a file with the configuration:\n\n.. code-block:: yaml\n\n    # dotfiles-backup.yaml\n\n    user: laerus\n    directory: dotfiles\n    files:\n      - .vimrc\n      - .bashrc\n      - .inputrc\n    server: 192.168.1.10\n\nWe can then run:\n\n.. code-block:: python\n\n    config = Loader('dotfiles-backup')\n    runner = Backup(config)\n    runner()\n\nassuming the file is in the current working directory.  Notice how we didn't specify\nthe extension of the file, that is because the ``Loader`` class automatically searches\nfor known file extensions and uses the appropriate module to load the configuration,\nat the moment the supported formats are ``json``, ``yaml`` and ``toml``.\n\nThe ``config.Checker`` provides a convenient way of checking the configuration\nat instantiation, we first create a subclass that describes the required configuration\nentries and their type at the class level:\n\n.. code-block:: python\n\n    class Checker(abcmd.config.Checker):\n        user = str\n        directory = 'dotfiles'\n        files = list\n        server = str\n\n\nassining a configuration entry to an object than a type would make use of this value\nas the default value in case the entry is missing:\n\n.. code-block:: python\n    \n    config = {\n        'user': 'laerus',\n        'files': ['.vimrc', '.bashrc', '.inputrc'],\n        'server': '192.168.1.10'\n    }\n\n    config = Checker(config)\n\nthis will check each configuration entry against the types specified as\nthe ``BackupConfig`` class attributes and will also add the missing\n``directory`` entry with the value ``'dotfiles'``\n\nIf there is a type mismatch a ``TypeError`` is raised at the instantiation\nof ``Backup``, for example if the above configuration was:\n\n.. code-block:: python\n\n    config = {\n        'user': 10  # not a string\n        'files': ['.vimrc', '.bashrc', '.inputrc'],\n        'server': '192.168.1.10'\n    }\n\nrunning:\n\n.. code-block:: python\n\n    config = Checker(config)\n\nwill result in a ``TypeError: 'user' must be of type 'str' not 'int'`` being raised.\nIf a configuration entry is missing and there is not a provided default it will raise\na ``config.MissingConfigurationEntry`` instead.\n\n\nThe configuration helper classes ``Loader`` and ``Checker`` can also be used as mixins\nto each other, so we can check and load the configuration at one go:\n\n.. code-block:: python\n\n    class Config(abcmd.config.Loader, abcmd.config.Checker):\n        user = str\n        directory = 'dotfiles'\n        files = list\n        server = str\n\n    config = Config({'user': 'ok', 'files': ['.bashrc'], 'server': '192.168.1.10'})\n\n\nInstallation\n------------\n\n.. code-block:: shell\n\n    $ pip install abcmd\n\nCompatibility\n-------------\npython3.5+\n\nLicence\n-------\nMIT\n\nAuthors\n-------\n\n`abcmd` was written by `Konstantinos Tsakiltzidis <https://github.com/laerus>`_.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/laerus/abcmd",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "abcmd",
    "platform": "",
    "project_url": "https://pypi.org/project/abcmd/",
    "release_url": "https://pypi.org/project/abcmd/0.2.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "ABCs and Mixins for wrapping CLI commands with static configuration.",
    "version": "0.2.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7e3563d56eb5c94629b4d6bc059be499",
          "sha256": "b46996bab64d8f8d5fcf90dc44afc6ad356acc2a98784e5c6d81888cbd3f8451"
        },
        "downloads": 0,
        "filename": "abcmd-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7e3563d56eb5c94629b4d6bc059be499",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5053,
        "upload_time": "2017-06-22T12:51:41",
        "url": "https://files.pythonhosted.org/packages/a9/0d/2273a4bc58a9f7137f0e52b6d82ea434166f2772f3afb918b2ba8096ff64/abcmd-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3dd06571c949e2e56ce34f3489c92ac4",
          "sha256": "9afe9f905b32f8b802854477e4fe7c4dd2bdf955557326857d5bf79ffe7a387e"
        },
        "downloads": 0,
        "filename": "abcmd-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3dd06571c949e2e56ce34f3489c92ac4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5148,
        "upload_time": "2017-06-30T11:30:07",
        "url": "https://files.pythonhosted.org/packages/da/8e/478d3902d02149a68b439d5fe462914bb250748e6e5ffee06876a042135b/abcmd-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "02278fb4f98a2b6a0eb295c02be17b71",
          "sha256": "094160086a14687a6ee837aeafa604989768889007107285715e1cefc24da0fb"
        },
        "downloads": 0,
        "filename": "abcmd-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "02278fb4f98a2b6a0eb295c02be17b71",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5112,
        "upload_time": "2017-06-30T13:51:50",
        "url": "https://files.pythonhosted.org/packages/34/8a/b6a62839a953125a5fc69e8eed1a6de4db5236aa551511e4243e79cc9594/abcmd-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "115d83db18b211fca01fe22387f4a256",
          "sha256": "c0073b23a55a8a4c224a9bdf36e980230f054d6f112596d541343fba6e9ce942"
        },
        "downloads": 0,
        "filename": "abcmd-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "115d83db18b211fca01fe22387f4a256",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6811,
        "upload_time": "2017-07-05T14:23:06",
        "url": "https://files.pythonhosted.org/packages/05/7b/61287da41a1da62e996e17cc0642862e3ac0103fd37e4181abb8a7f9d6bc/abcmd-0.1.3.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "566e5d9b47a98a12c884bcd0b5606661",
          "sha256": "c6e4f956fb8f301425c4288eb7fad83ddf7bc18d42c5fe855196157d3c9b4c1d"
        },
        "downloads": 0,
        "filename": "abcmd-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "566e5d9b47a98a12c884bcd0b5606661",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6734,
        "upload_time": "2017-07-20T13:00:47",
        "url": "https://files.pythonhosted.org/packages/b2/6d/16c9415c157e6248f18b23f9b37601ee11615a311a594dcadf59a3442772/abcmd-0.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "566e5d9b47a98a12c884bcd0b5606661",
        "sha256": "c6e4f956fb8f301425c4288eb7fad83ddf7bc18d42c5fe855196157d3c9b4c1d"
      },
      "downloads": 0,
      "filename": "abcmd-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "566e5d9b47a98a12c884bcd0b5606661",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6734,
      "upload_time": "2017-07-20T13:00:47",
      "url": "https://files.pythonhosted.org/packages/b2/6d/16c9415c157e6248f18b23f9b37601ee11615a311a594dcadf59a3442772/abcmd-0.2.0.tar.gz"
    }
  ]
}