{
  "info": {
    "author": "Alex Rubinsteyn",
    "author_email": "alex.rubinsteyn@mssm.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "|Build Status|\n\npepnet\n======\n\nNeural networks for amino acid sequences\n\nPredictor API\n-------------\n\nSequence and model construction can both be handled for you by pepnet's\n``Predictor``:\n\n.. code:: python\n\n    from pepnet import Predictor, SequenceInput, NumericInput, Output\n    predictor = Predictor(\n        inputs=[\n            SequenceInput(length=4, name=\"x1\", variable_length=True),\n            NumericInput(dim=30, name=\"x2\")],\n        outputs=[Output(name=\"y\", dim=1, activation=\"sigmoid\")],\n        hidden_layer_sizes=[30],\n        hidden_activation=\"relu\")\n    sequences = [\"ACAD\", \"ACAA\", \"ACA\"]\n    vectors = np.random.normal(10, 100, (3, 30))\n    y = numpy.array([0, 1, 0])\n    predictor.fit({\"x1\": sequences, \"x2\": vectors}, y)\n    y_pred = predictor.predict({\"x1\": sequences, \"x2\": vectors})[\"y\"]\n\nManual index encoding of peptides\n---------------------------------\n\nRepresent every amino acid with a number between 1-21 (0 is reserved for\npadding)\n\n.. code:: python\n\n    from pepnet.encoder import Encoder\n    encoder = Encoder()\n    X_index = encoder.encode_index_array([\"SYF\", \"GLYCI\"], max_peptide_length=9)\n\nManual one-hot encoding of peptides\n-----------------------------------\n\nRepresent every amino acid with a binary vector where only one entry is\n1 and the rest are 0.\n\n.. code:: python\n\n    from pepnet.encoder import Encoder\n    encoder = Encoder()\n    X_binary = encoder.encode_onehot([\"SYF\", \"GLYCI\"], max_peptide_length=9)\n\nFOFE encoding of peptides\n-------------------------\n\nImplementation of FOFE encoding from `A Fixed-Size Encoding Method for\nVariable-Length Sequences with its Application to Neural Network\nLanguage Models <https://arxiv.org/abs/1505.01504>`__\n\n.. code:: python\n\n    from pepnet.encoder import Encoder\n    encoder = Encoder()\n    X_binary = encoder.encode_FOFE([\"SYF\", \"GLYCI\"], bidirectional=True)\n\nFixed-length peptide input represented by one-shot binary vectors\n-----------------------------------------------------------------\n\n.. code:: python\n\n    from pepnet.feed_forward import make_fixed_length_hotshot_network\n\n    # make a model whose input is a single amino acid\n    model = make_fixed_length_hotshot_network(peptide_length=1, n_symbols=20)\n    X = np.zeros((2, 20), dtype=bool)\n    X[0, 0] = True\n    X[1, 5] = True\n    Y = np.array([True, False])\n    model.fit(X, Y)\n\nFixed-length peptide input represented by learned amino acid embeddings\n-----------------------------------------------------------------------\n\n.. code:: python\n\n    from pepnet.feed_forward import make_fixed_length_embedding_network\n    model = make_fixed_length_embedding_network(\n        peptide_length=1, n_symbols=20, embedding_output_dim=40)\n    X = np.array([[9], [7]])\n    Y = np.array([True, False])\n    model.fit(X, Y)\n\nNetworks with variable-length peptides and fixed-length context\n---------------------------------------------------------------\n\n.. code:: python\n\n    from pepnet.sequence_context import make_variable_length_model_with_fixed_length_context\n    from pepnet.encoder import Encoder\n\n    model = make_variable_length_model_with_fixed_length_context(\n        n_upstream=1,\n        n_downstream=1,\n        max_peptide_length=3)\n    encoder = Encoder()\n    X_peptide = encoder.encode_index_array([\n        \"SYF\",\n        \"QQ\",\n        \"C\",\n        \"GLL\"], max_peptide_length=3)\n\n    input_dict = {\n        \"upstream\": encoder.encode_index_array([\"Q\", \"A\", \"L\", \"I\"]),\n        \"downstream\": encoder.encode_index_array([\"S\"] * 4),\n        \"peptide\": X_peptide\n    }\n    Y = np.array([True, False, True, False])\n    model.fit(input_dict, Y)\n\nSimple convolutional network with global max and mean pooling\n-------------------------------------------------------------\n\n.. code:: python\n\n    cnn_model_small = make_variable_length_embedding_convolutional_model(\n        max_peptide_length=30,\n        n_filters_per_size=32,\n        filter_sizes=[9],\n        n_conv_layers=1,\n        pool_size=3,\n        pool_stride=2,\n        dropout=0.25,\n        conv_dropout=0.1,\n        hidden_layer_sizes=[],\n        n_output=1)\n\nSchematic of the small convolutional model: |image1|\n\nMulti-layer convolutional network with max pooling\n--------------------------------------------------\n\n.. code:: python\n\n    cnn_model_large = make_variable_length_embedding_convolutional_model(\n        max_peptide_length=30,\n        n_filters_per_size=32,\n        filter_sizes=[3, 5, 9],\n        n_conv_layers=2,\n        pool_size=3,\n        pool_stride=2,\n        dropout=0.25,\n        conv_dropout=0.1,\n        hidden_layer_sizes=[100],\n        n_output=1)\n\nSchematic of the large convolutional model: |image2|\n\n.. |Build Status| image:: https://travis-ci.org/hammerlab/pepnet.svg?branch=master\n   :target: https://travis-ci.org/hammerlab/pepnet\n.. |image1| image:: conv_small.png\n.. |image2| image:: conv_large.png\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/hammerlab/pepnet",
    "keywords": "",
    "license": "http://www.apache.org/licenses/LICENSE-2.0.html",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pepnet",
    "platform": "",
    "project_url": "https://pypi.org/project/pepnet/",
    "release_url": "https://pypi.org/project/pepnet/0.1.0/",
    "requires_python": "",
    "summary": "Neural networks for amino acid sequences",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3f13f567f232939be23083d6810fd0cf",
          "sha256": "0e08e003e3e1e806993dc39661d71734fd4da32d9a9e99bbec035fc7612e42a9"
        },
        "downloads": 26,
        "filename": "pepnet-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3f13f567f232939be23083d6810fd0cf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4829,
        "upload_time": "2017-04-03T23:29:03",
        "url": "https://files.pythonhosted.org/packages/6e/02/a83ae2f2fc9720d9009fd3d4996156539f8d8d4aa7fa0ec575d3025b1eee/pepnet-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "3f13f567f232939be23083d6810fd0cf",
        "sha256": "0e08e003e3e1e806993dc39661d71734fd4da32d9a9e99bbec035fc7612e42a9"
      },
      "downloads": 26,
      "filename": "pepnet-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "3f13f567f232939be23083d6810fd0cf",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4829,
      "upload_time": "2017-04-03T23:29:03",
      "url": "https://files.pythonhosted.org/packages/6e/02/a83ae2f2fc9720d9009fd3d4996156539f8d8d4aa7fa0ec575d3025b1eee/pepnet-0.1.0.tar.gz"
    }
  ]
}