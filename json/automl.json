{
  "info": {
    "author": "Preston Parry",
    "author_email": "ClimbsBytes@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "auto\\_ml\n========\n\n    Automated machine learning for production and analytics\n\n|Build Status| |Documentation Status| |PyPI version| |Coverage Status|\n|license|\n\nInstallation\n------------\n\n-  ``pip install auto_ml``\n\nGetting started\n---------------\n\n.. code:: python\n\n    from auto_ml import Predictor\n    from auto_ml.utils import get_boston_dataset\n\n    df_train, df_test = get_boston_dataset()\n\n    column_descriptions = {\n        'MEDV': 'output'\n        , 'CHAS': 'categorical'\n    }\n\n    ml_predictor = Predictor(type_of_estimator='regressor', column_descriptions=column_descriptions)\n\n    ml_predictor.train(df_train)\n\n    ml_predictor.score(df_test, df_test.MEDV)\n\nShow off some more features!\n----------------------------\n\nauto\\_ml is designed for production. Here's an example that includes\nserializing and loading the trained model, then getting predictions on\nsingle dictionaries, roughly the process you'd likely follow to deploy\nthe trained model.\n\n.. code:: python\n\n    from auto_ml import Predictor\n    from auto_ml.utils import get_boston_dataset\n    from auto_ml.utils_models import load_ml_model\n\n    # Load data\n    df_train, df_test = get_boston_dataset()\n\n    # Tell auto_ml which column is 'output'\n    # Also note columns that aren't purely numerical\n    # Examples include ['nlp', 'date', 'categorical', 'ignore']\n    column_descriptions = {\n      'MEDV': 'output'\n      , 'CHAS': 'categorical'\n    }\n\n    ml_predictor = Predictor(type_of_estimator='regressor', column_descriptions=column_descriptions)\n\n    ml_predictor.train(df_train)\n\n    # Score the model on test data\n    test_score = ml_predictor.score(df_test, df_test.MEDV)\n\n    # auto_ml is specifically tuned for running in production\n    # It can get predictions on an individual row (passed in as a dictionary)\n    # A single prediction like this takes ~1 millisecond\n    # Here we will demonstrate saving the trained model, and loading it again\n    file_name = ml_predictor.save()\n\n    trained_model = load_ml_model(file_name)\n\n    # .predict and .predict_proba take in either:\n    # A pandas DataFrame\n    # A list of dictionaries\n    # A single dictionary (optimized for speed in production evironments)\n    predictions = trained_model.predict(df_test)\n    print(predictions)\n\nXGBoost, Deep Learning with TensorFlow & Keras, and LightGBM\n------------------------------------------------------------\n\nauto\\_ml has all three of these awesome libraries integrated! Generally,\njust pass one of them in for model\\_names.\n``ml_predictor.train(data, model_names=['DeepLearningClassifier'])``\n\nAvailable options are - ``DeepLearningClassifier`` and\n``DeepLearningRegressor`` - ``XGBClassifier`` and ``XGBRegressor`` -\n``LGBMClassifer`` and ``LGBMRegressor``\n\nAll of these projects are ready for production. These projects all have\nprediction time in the 1 millisecond range for a single prediction, and\nare able to be serialized to disk and loaded into a new environment\nafter training.\n\nDepending on your machine, they can occasionally be difficult to\ninstall, so they are not included in auto\\_ml's default installation.\nYou are responsible for installing them yourself. auto\\_ml will run fine\nwithout them installed (we check what's isntalled before choosing which\nalgorithm to use). If you want to try the easy install, just\n``pip install -r advanced_requirements.txt``, which will install\nTensorFlow, Keras, and XGBoost. LightGBM is not available as a pip\ninstall currently.\n\nFeature Responses\n-----------------\n\nGet linear-model-esque interpretations from non-linear models. See the\n[docs}(http://auto-ml.readthedocs.io/en/latest/feature\\_responses.html)\nfor more information and caveats.\n\nClassification\n--------------\n\nBinary and multiclass classification are both supported. Note that for\nnow, labels must be integers (0 and 1 for binary classification).\nauto\\_ml will automatically detect if it is a binary or multiclass\nclassification problem- you just have to pass in\n``ml_predictor = Predictor(type_of_estimator='classifier', column_descriptions=column_descriptions)``\n\nFeature Learning\n----------------\n\nAlso known as \"finally found a way to make this deep learning stuff\nuseful for my business\". Deep Learning is great at learning important\nfeatures from your data. But the way it turns these learned features\ninto a final prediction is relatively basic. Gradient boosting is great\nat turning features into accurate predictions, but it doesn't do any\nfeature learning.\n\nIn auto\\_ml, you can now automatically use both types of models for what\nthey're great at. If you pass\n``feature_learning=True, fl_data=some_dataframe`` to ``.train()``, we\nwill do exactly that: train a deep learning model on your ``fl_data``.\nWe won't ask it for predictions (standard stacking approach), instead,\nwe'll use it's penultimate layer to get it's 10 most useful features.\nThen we'll train a gradient boosted model (or any other model of your\nchoice) on those features plus all the original features.\n\nAcross some problems, we've witnessed this lead to a 5% gain in\naccuracy, while still making predictions in 1-4 milliseconds, depending\non model complexity.\n\n``ml_predictor.train(df_train, feature_learning=True, fl_data=df_fl_data)``\n\nThis feature only supports regression and binary classification\ncurrently. The rest of auto\\_ml supports multiclass classification.\n\nCategorical Ensembling\n----------------------\n\nEver wanted to train one market for every store/customer, but didn't\nwant to maintain hundreds of thousands of independent models? With\n``ml_predictor.train_categorical_ensemble()``, we will handle that for\nyou. You'll still have just one consistent API,\n``ml_predictor.predict(data)``, but behind this single API will be one\nmodel for each category you included in your training data.\n\nJust tell us which column holds the category you want to split on, and\nwe'll handle the rest. As always, saving the model, loading it in a\ndifferent environment, and getting speedy predictions live in production\nis baked right in.\n\n``ml_predictor.train_categorical_ensemble(df_train, categorical_column='store_name')``\n\nMore details available in the docs\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nhttp://auto-ml.readthedocs.io/en/latest/\n\nAdvice\n~~~~~~\n\nBefore you go any further, try running the code. Load up some data\n(either a DataFrame, or a list of dictionaries, where each dictionary is\na row of data). Make a ``column_descriptions`` dictionary that tells us\nwhich attribute name in each row represents the value we're trying to\npredict. Pass all that into ``auto_ml``, and see what happens!\n\nEverything else in these docs assumes you have done at least the above.\nStart there and everything else will build on top. But this part gets\nyou the output you're probably interested in, without unnecessary\ncomplexity.\n\nDocs\n----\n\nThe full docs are available at https://auto\\_ml.readthedocs.io Again\nthough, I'd strongly recommend running this on an actual dataset before\nreferencing the docs any futher.\n\nWhat this project does\n----------------------\n\nAutomates the whole machine learning process, making it super easy to\nuse for both analytics, and getting real-time predictions in production.\n\nA quick overview of buzzwords, this project automates:\n\n-  Analytics (pass in data, and auto\\_ml will tell you the relationship\n   of each variable to what it is you're trying to predict).\n-  Feature Engineering (particularly around dates, and NLP).\n-  Robust Scaling (turning all values into their scaled versions between\n   the range of 0 and 1, in a way that is robust to outliers, and works\n   with sparse data).\n-  Feature Selection (picking only the features that actually prove\n   useful).\n-  Data formatting (turning a DataFrame or a list of dictionaries into a\n   sparse matrix, one-hot encoding categorical variables, taking the\n   natural log of y for regression problems, etc).\n-  Model Selection (which model works best for your problem- we try\n   roughly a dozen apiece for classification and regression problems,\n   including favorites like XGBoost if it's installed on your machine).\n-  Hyperparameter Optimization (what hyperparameters work best for that\n   model).\n-  Big Data (feed it lots of data- it's fairly efficient with\n   resources).\n-  Unicorns (you could conceivably train it to predict what is a unicorn\n   and what is not).\n-  Ice Cream (mmm, tasty...).\n-  Hugs (this makes it much easier to do your job, hopefully leaving you\n   more time to hug those those you care about).\n\nRunning the tests\n~~~~~~~~~~~~~~~~~\n\nIf you've cloned the source code and are making any changes (highly\nencouraged!), or just want to make sure everything works in your\nenvironment, run ``nosetests -v tests``.\n\nCI is also set up, so if you're developing on this, you can just open a\nPR, and the tests will run automatically on Travis-CI.\n\nThe tests are relatively comprehensive, though as with everything with\nauto\\_ml, I happily welcome your contributions here!\n\n|Analytics|\n\n.. |Build Status| image:: https://travis-ci.org/ClimbsRocks/auto_ml.svg?branch=master\n   :target: https://travis-ci.org/ClimbsRocks/auto_ml\n.. |Documentation Status| image:: http://readthedocs.org/projects/auto-ml/badge/?version=latest\n   :target: http://auto-ml.readthedocs.io/en/latest/?badge=latest\n.. |PyPI version| image:: https://badge.fury.io/py/auto_ml.svg\n   :target: https://badge.fury.io/py/auto_ml\n.. |Coverage Status| image:: https://coveralls.io/repos/github/ClimbsRocks/auto_ml/badge.svg?branch=master&cacheBuster=1\n   :target: https://coveralls.io/github/ClimbsRocks/auto_ml?branch=master&cacheBuster=1\n.. |license| image:: https://img.shields.io/github/license/mashape/apistatus.svg\n   :target: (https://img.shields.io/github/license/mashape/apistatus.svg)\n.. |Analytics| image:: https://ga-beacon.appspot.com/UA-58170643-5/automl/pypi\n   :target: https://github.com/igrigorik/ga-beacon\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ClimbsRocks/auto_ml",
    "keywords": "machine learning,data science,automated machine learning,regressor,regressors,regression,classification,classifiers,classifier,estimators,predictors,XGBoost,Random Forest,sklearn,scikit-learn,analytics,analysts,coefficients,feature importancesanalytics,artificial intelligence,subpredictors,ensembling,stacking,blending,feature engineering,feature extraction,feature selection,production,pandas,dataframes,machinejs,deep learning,tensorflow,deeplearning,lightgbm,gradient boosting,gbm,keras,production ready,test coverage",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "automl",
    "platform": "",
    "project_url": "https://pypi.org/project/automl/",
    "release_url": "https://pypi.org/project/automl/2.3.1/",
    "requires_python": "",
    "summary": "Automated machine learning for production and analytics",
    "version": "2.3.1"
  },
  "releases": {
    "2.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "85d499b2330d2c930e7191c855d142c7",
          "sha256": "e8a9b7fd2d1d8e8236a13cbe35775929bae718ab4bc1a1c4743a9e5febce5c6b"
        },
        "downloads": 0,
        "filename": "automl-2.1.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "85d499b2330d2c930e7191c855d142c7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 52868,
        "upload_time": "2017-05-19T15:48:02",
        "url": "https://files.pythonhosted.org/packages/fe/8d/32c1e4178fa42d3b84c19cd9d32c5a5c85809dedc125d99f5ccd23c6dce3/automl-2.1.5-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4ce9ba8fbcef18eba0e3b012ac6675cd",
          "sha256": "2e2fc2d548bc4556cc857c854c66eafd62695f3bbd3902958a475cf098279fc1"
        },
        "downloads": 0,
        "filename": "automl-2.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "4ce9ba8fbcef18eba0e3b012ac6675cd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 49116,
        "upload_time": "2017-05-19T15:48:05",
        "url": "https://files.pythonhosted.org/packages/91/45/75ba0559f14da0226948b599b5067eff7ebd555068f127558c9fc753e627/automl-2.1.5.tar.gz"
      }
    ],
    "2.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fb4d5a049b79c5aed615feba6f775bdd",
          "sha256": "4744d02d7d5418b2a3c718bd9b266c21a32624787739239c2e2010418d63c36b"
        },
        "downloads": 0,
        "filename": "automl-2.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb4d5a049b79c5aed615feba6f775bdd",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 57784,
        "upload_time": "2017-06-13T04:07:33",
        "url": "https://files.pythonhosted.org/packages/2c/a0/0e1605116e9d19c4ff066eaa572a0486a8e236c9419ccf8ae2edb8465883/automl-2.2.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "936d032f26a7063a73be543f496aa631",
          "sha256": "e57b4d574aacaa53eae2774d8b5b81e8d7f5540d946545635141e80fae6b1253"
        },
        "downloads": 0,
        "filename": "automl-2.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "936d032f26a7063a73be543f496aa631",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 54369,
        "upload_time": "2017-06-13T04:07:36",
        "url": "https://files.pythonhosted.org/packages/f1/0f/75c6aaf11fcb3b2e60bc74b947752292ea276df8f4ae990117b37d67074b/automl-2.2.1.tar.gz"
      }
    ],
    "2.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "49078fbdaf39e39ac1a49f542dbb0761",
          "sha256": "639f8b78b29728564b6c7135098d4c9be55a948bb01a84fe78c119885114e350"
        },
        "downloads": 0,
        "filename": "automl-2.2.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49078fbdaf39e39ac1a49f542dbb0761",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 58162,
        "upload_time": "2017-06-13T04:40:34",
        "url": "https://files.pythonhosted.org/packages/db/4f/e978f10735283549f1fd8f7fb37e294bcfc3431101395d36de4b91d8c923/automl-2.2.3-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "960ac2ccc06df2f891820078f264846e",
          "sha256": "61dbf479880402227ec7cefc04e2272bc961405dc0595f6bc259e2799b00b3e1"
        },
        "downloads": 0,
        "filename": "automl-2.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "960ac2ccc06df2f891820078f264846e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58738,
        "upload_time": "2017-06-13T04:40:37",
        "url": "https://files.pythonhosted.org/packages/0d/ae/0e29751f528edd1f0570243c00a9381c816e8e30edc305eb16b40d94dfe2/automl-2.2.3.tar.gz"
      }
    ],
    "2.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1717f89238badd39c927e45102f7e4ba",
          "sha256": "e0583444cfd6bc8851b1bf64334ce55f2fc3a1102a76ac4a359e3ad09c2306f9"
        },
        "downloads": 0,
        "filename": "automl-2.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1717f89238badd39c927e45102f7e4ba",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 58434,
        "upload_time": "2017-06-14T17:01:28",
        "url": "https://files.pythonhosted.org/packages/42/80/d08843b2ffd20eec3af81acf422512481b481183b470f15507c00b0ec835/automl-2.3.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "62cec9996dde5aa825b31471079813e6",
          "sha256": "c42378ab490afcdb80b999d75fcc84de7e3de11f81d379b6e2bd0755e1e1b87c"
        },
        "downloads": 0,
        "filename": "automl-2.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "62cec9996dde5aa825b31471079813e6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 59016,
        "upload_time": "2017-06-14T17:01:32",
        "url": "https://files.pythonhosted.org/packages/8e/af/47712282fe150bea10cdf62f95c7423aea16eb7b081d28458363e1d9608c/automl-2.3.0.tar.gz"
      }
    ],
    "2.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "70ea3bd546fbfcb975e32fd232f1797a",
          "sha256": "fc70804b72529e11baf7615994f425a9a0f88703200650ae7d9b1895a217e2a4"
        },
        "downloads": 0,
        "filename": "automl-2.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70ea3bd546fbfcb975e32fd232f1797a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 58429,
        "upload_time": "2017-06-16T15:51:07",
        "url": "https://files.pythonhosted.org/packages/77/d6/cb85cfc7ab9dfd540cddec29694516b4349dc2feb6bd83ca2a8b42d9bcd1/automl-2.3.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e6bc8508c4b64e5bb9fb845282bbe03b",
          "sha256": "7efa974a74531683897bdcfa047c4af735d34c093d5fa8b12eda7636ffa127ad"
        },
        "downloads": 0,
        "filename": "automl-2.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e6bc8508c4b64e5bb9fb845282bbe03b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58988,
        "upload_time": "2017-06-16T15:51:09",
        "url": "https://files.pythonhosted.org/packages/68/d6/9a06ec8373d63ce35886e788205866ed86a4fb64cef9bef18429b31996a8/automl-2.3.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "70ea3bd546fbfcb975e32fd232f1797a",
        "sha256": "fc70804b72529e11baf7615994f425a9a0f88703200650ae7d9b1895a217e2a4"
      },
      "downloads": 0,
      "filename": "automl-2.3.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "70ea3bd546fbfcb975e32fd232f1797a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 58429,
      "upload_time": "2017-06-16T15:51:07",
      "url": "https://files.pythonhosted.org/packages/77/d6/cb85cfc7ab9dfd540cddec29694516b4349dc2feb6bd83ca2a8b42d9bcd1/automl-2.3.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "e6bc8508c4b64e5bb9fb845282bbe03b",
        "sha256": "7efa974a74531683897bdcfa047c4af735d34c093d5fa8b12eda7636ffa127ad"
      },
      "downloads": 0,
      "filename": "automl-2.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e6bc8508c4b64e5bb9fb845282bbe03b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 58988,
      "upload_time": "2017-06-16T15:51:09",
      "url": "https://files.pythonhosted.org/packages/68/d6/9a06ec8373d63ce35886e788205866ed86a4fb64cef9bef18429b31996a8/automl-2.3.1.tar.gz"
    }
  ]
}