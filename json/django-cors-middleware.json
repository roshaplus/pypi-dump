{
  "info": {
    "author": "Zeste de Savoir",
    "author_email": "dev@gustavi.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "|Build Status| |codecov.io|\r\n\r\n|PyPI|\r\n\r\ndjango-cors-middleware\r\n======================\r\n\r\nA Django App that adds CORS (Cross-Origin Resource Sharing) headers to\r\nresponses.\r\n\r\nAlthough JSON-P is useful, it is strictly limited to GET requests. CORS\r\nbuilds on top of XmlHttpRequest to allow developers to make cross-domain\r\nrequests, similar to same-domain requests. Read more about it here:\r\nhttp://www.html5rocks.com/en/tutorials/cors/\r\n\r\nThis is a fork of `https://github.com/ottoyiu/django-cors-headers/`_\r\nbecause of inactivity.\r\n\r\nSupported versions of Python and Django :\r\n\r\n+------------------+--------------+--------------+--------------+--------------+\r\n|                  | **Py 2.7**   | **Py 3.3**   | **Py 3.4**   | **Py 3.5**   |\r\n+==================+==============+==============+==============+==============+\r\n| **Django 1.8**   | YES          | YES          | YES          | YES          |\r\n+------------------+--------------+--------------+--------------+--------------+\r\n| **Django 1.9**   | YES          |              | YES          | YES          |\r\n+------------------+--------------+--------------+--------------+--------------+\r\n| **Django 1.10**  | YES          |              | YES          | YES          |\r\n+------------------+--------------+--------------+--------------+--------------+\r\n\r\nSetup\r\n-----\r\n\r\nInstall by downloading the source and running:\r\n\r\n    python setup.py install\r\n\r\nor\r\n\r\n    pip install django-cors-middleware\r\n\r\nand then add it to your installed apps:\r\n\r\n::\r\n\r\n    INSTALLED_APPS = (\r\n        ...\r\n        'corsheaders',\r\n        ...\r\n    )\r\n\r\nYou will also need to add a middleware class to listen in on responses:\r\n\r\n::\r\n\r\n    # Use `MIDDLEWARE_CLASSES` prior to Django 1.10\r\n    MIDDLEWARE = [\r\n        ...\r\n        'corsheaders.middleware.CorsMiddleware',\r\n        'django.middleware.common.CommonMiddleware',\r\n        ...\r\n    ]\r\n\r\nNote that ``CorsMiddleware`` needs to come before Django\u2019s\r\n``CommonMiddleware`` if you are using Django\u2019s ``USE_ETAGS = True``\r\nsetting, otherwise the CORS headers will be lost from the 304\r\nnot-modified responses, causing errors in some browsers.\r\n\r\nSignals\r\n-------\r\n\r\nIf you have a use-case that requires running Python code to check if a site exists,\r\nwe provide a Django signal that covers this.\r\nWe have a ``check_request_enabled`` signal that provides the request.\r\nHere is an example configuration::\r\n\r\n    from corsheaders import signals\r\n    from .models import Site\r\n\r\n    def handler(sender, request, **kwargs):\r\n        for site in Site.objects.all():\r\n            if request.host in site.domain:\r\n                return True\r\n        return False\r\n\r\n    signals.check_request_enabled.connect(handler)\r\n\r\nIf the signal returns ``True``,\r\nthen the request will have headers added to it.\r\n\r\nConfiguration\r\n-------------\r\n\r\nAdd hosts that are allowed to do cross-site requests to\r\n``CORS_ORIGIN_WHITELIST`` or set ``CORS_ORIGIN_ALLOW_ALL`` to ``True``\r\nto allow all hosts.\r\n\r\n``CORS_ORIGIN_ALLOW_ALL``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nIf True, the whitelist will not be used and all origins will be accepted\r\n\r\nDefault:\r\n\r\n::\r\n\r\n    CORS_ORIGIN_ALLOW_ALL = False\r\n\r\n``CORS_ORIGIN_WHITELIST``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nSpecify a list of origin hostnames that are authorized to make a\r\ncross-site HTTP request\r\n\r\nExample:\r\n\r\n::\r\n\r\n    CORS_ORIGIN_WHITELIST = (\r\n        'google.com',\r\n        'hostname.example.com'\r\n    )\r\n\r\nDefault:\r\n\r\n::\r\n\r\n    CORS_ORIGIN_WHITELIST = ()\r\n\r\n``CORS_ORIGIN_REGEX_WHITELIST``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nSpecify a regex list of origin hostnames that are authorized to make a\r\ncross-site HTTP request; Useful when you have a large amount of\r\nsubdomains for instance.\r\n\r\nExample:\r\n\r\n::\r\n\r\n    CORS_ORIGIN_REGEX_WHITELIST = ('^(https?://)?(\\w+\\.)?google\\.com$', )\r\n\r\nDefault:\r\n\r\n::\r\n\r\n    CORS_ORIGIN_REGEX_WHITELIST = ()\r\n\r\n--------------\r\n\r\nYou may optionally specify these options in settings.py to override the\r\ndefaults. Defaults are shown below:\r\n\r\n``CORS_URLS_REGEX``\r\n~~~~~~~~~~~~~~~~~~~\r\n\r\nSpecify a URL regex for which to enable the sending of CORS headers;\r\nUseful when you only want to enable CORS for specific URLs, e. g. for a\r\nREST API under ``/api/``.\r\n\r\nExample:\r\n\r\n::\r\n\r\n    CORS_URLS_REGEX = r'^/api/.*$'\r\n\r\nDefault:\r\n\r\n::\r\n\r\n    CORS_URLS_REGEX = '^.*$'\r\n\r\n``CORS_ALLOW_METHODS``\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nSpecify the allowed HTTP methods that can be used when making the actual\r\nrequest\r\n\r\nDefault:\r\n\r\n::\r\n\r\n    CORS_ALLOW_METHODS = (\r\n        'GET',\r\n        'POST',\r\n        'PUT',\r\n        'PATCH',\r\n        'DELETE',\r\n        'OPTIONS'\r\n    )\r\n\r\n``CORS_ALLOW_HEADERS``\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nSpecify which non-standard HTTP headers can be used when making the\r\nactual request\r\n\r\nDefault:\r\n\r\n::\r\n\r\n    CORS_ALLOW_HEADERS = (\r\n        'x-requested-with',\r\n        'content-type',\r\n        'accept',\r\n        'origin',\r\n        'authorization',\r\n        'x-csrftoken'\r\n    )\r\n\r\n``CORS_EXPOSE_HEADERS``\r\n~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nSpecify which HTTP headers are to be exposed to the browser\r\n\r\nDefault:\r\n\r\n::\r\n\r\n    CORS_EXPOSE_HEADERS = ()\r\n\r\n``CORS_PREFLIGHT_MAX_AGE``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nSpecify the number of seconds a client/browser can cache the preflight\r\nresponse\r\n\r\nNote: A preflight request is an extra request that is made when making a\r\n\u201cnot-so-simple\u201d request (eg. content-type is not\r\napplication/x-www-form-urlencoded) to determine what requests the server\r\nactually accepts. Read more about it here:\r\nhttp://www.html5rocks.com/en/tutorials/cors/\r\n\r\nDefault:\r\n\r\n::\r\n\r\n    CORS_PREFLIGHT_MAX_AGE = 86400\r\n\r\n``CORS_ALLOW_CREDENTIALS``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nSpecify whether or not cookies are allowed to be included in cross-site\r\nHTTP requests (CORS).\r\n\r\nDefault:\r\n\r\n::\r\n\r\n    CORS_ALLOW_CREDENTIALS = False\r\n\r\n``CORS_REPLACE_HTTPS_REFERER``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nSpecify whether to replace the HTTP\\_REFERER header if CORS checks pass\r\nso that CSRF django middleware checks will work with https\r\n\r\nNote: With this feature enabled, you also need to add the\r\ncorsheaders.middleware.CorsPostCsrfMiddleware after\r\ndjango.middleware.csrf.CsrfViewMiddleware to undo the header replacement\r\n\r\nDefault:\r\n\r\n::\r\n\r\n    CORS_REPLACE_HTTPS_REFERER = False\r\n\r\n``CORS_URLS_ALLOW_ALL_REGEX``\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nSpecify a list of URL regex for which to allow all origins\r\n\r\nExample:\r\n\r\n::\r\n\r\n    CORS_URLS_ALLOW_ALL_REGEX = (r'^/api/users$', )\r\n\r\nDefault:\r\n\r\n::\r\n\r\n    CORS_URLS_ALLOW_ALL_REGEX = ()\r\n\r\n.. _`https://github.com/ottoyiu/django-cors-headers/`: django-cors-headers%20by%20ottoyiu\r\n\r\n.. |Build Status| image:: https://travis-ci.org/zestedesavoir/django-cors-middleware.svg?branch=master\r\n   :target: https://travis-ci.org/zestedesavoir/django-cors-middleware\r\n.. |codecov.io| image:: http://codecov.io/github/zestedesavoir/django-cors-middleware/coverage.svg?branch=master\r\n   :target: http://codecov.io/github/ottoyiu/zestedesavoir/django-cors-middleware?branch=master\r\n.. |PyPI| image:: https://img.shields.io/pypi/v/django-cors-middleware.svg\r\n   :target: https://pypi.python.org/pypi/django-cors-middleware\r\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/zestedesavoir/django-cors-middleware",
    "keywords": "django cors middleware rest api",
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-cors-middleware",
    "platform": "any",
    "project_url": "https://pypi.org/project/django-cors-middleware/",
    "release_url": "https://pypi.org/project/django-cors-middleware/1.3.1/",
    "requires_python": null,
    "summary": "django-cors-middleware is a Django application for handling the server headers required for Cross-Origin Resource Sharing (CORS). Fork of django-cors-headers.",
    "version": "1.3.1"
  },
  "releases": {
    "1.0": [],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8d9b58c81c4d1908738f8447eb3de1f2",
          "sha256": "3f4fddaaba584c4e3362c54a21b70155df81487e82d5050fdeee0eb52fbbed49"
        },
        "downloads": 5260,
        "filename": "django-cors-middleware-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8d9b58c81c4d1908738f8447eb3de1f2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7121,
        "upload_time": "2016-01-11T08:49:30",
        "url": "https://files.pythonhosted.org/packages/f1/78/4a82a378b6c92d50e40e8f959c8ff692a8a1e7a26f3c6d90cd107c6facc0/django-cors-middleware-1.2.0.tar.gz"
      }
    ],
    "1.3.0": [],
    "1.3.1": [
      {
        "comment_text": "built for Linux-4.6.4-1-ARCH-x86_64-with-glibc2.3.4",
        "digests": {
          "md5": "907436c4169041c9ad5dad1ae9fbbc5d",
          "sha256": "d427700cdef157b3fe68a33dcce8759f534133a483f2a3b9c12494fe8c598e1c"
        },
        "downloads": 328,
        "filename": "django-cors-middleware-1.3.1.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "907436c4169041c9ad5dad1ae9fbbc5d",
        "packagetype": "bdist_dumb",
        "python_version": "any",
        "size": 12490,
        "upload_time": "2016-08-20T14:54:51",
        "url": "https://files.pythonhosted.org/packages/59/f2/9bd003fe0992a97fea9c03ad2a2a1b89b9f93783ae5766b1c6785a41f8b9/django-cors-middleware-1.3.1.linux-x86_64.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "355b326ee0617c0414572c0713822239",
          "sha256": "25d7e3132e9533be83f62767fca9dc92d66ac9aee414559144ccbce2c2913d70"
        },
        "downloads": 15262,
        "filename": "django-cors-middleware-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "355b326ee0617c0414572c0713822239",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9014,
        "upload_time": "2016-08-20T14:55:01",
        "url": "https://files.pythonhosted.org/packages/33/d8/23f4b1249021f0192a3d6f263c29b46637c1f03ab41608ed8477d992550d/django-cors-middleware-1.3.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "built for Linux-4.6.4-1-ARCH-x86_64-with-glibc2.3.4",
      "digests": {
        "md5": "907436c4169041c9ad5dad1ae9fbbc5d",
        "sha256": "d427700cdef157b3fe68a33dcce8759f534133a483f2a3b9c12494fe8c598e1c"
      },
      "downloads": 328,
      "filename": "django-cors-middleware-1.3.1.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "907436c4169041c9ad5dad1ae9fbbc5d",
      "packagetype": "bdist_dumb",
      "python_version": "any",
      "size": 12490,
      "upload_time": "2016-08-20T14:54:51",
      "url": "https://files.pythonhosted.org/packages/59/f2/9bd003fe0992a97fea9c03ad2a2a1b89b9f93783ae5766b1c6785a41f8b9/django-cors-middleware-1.3.1.linux-x86_64.tar.gz"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "355b326ee0617c0414572c0713822239",
        "sha256": "25d7e3132e9533be83f62767fca9dc92d66ac9aee414559144ccbce2c2913d70"
      },
      "downloads": 15262,
      "filename": "django-cors-middleware-1.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "355b326ee0617c0414572c0713822239",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9014,
      "upload_time": "2016-08-20T14:55:01",
      "url": "https://files.pythonhosted.org/packages/33/d8/23f4b1249021f0192a3d6f263c29b46637c1f03ab41608ed8477d992550d/django-cors-middleware-1.3.1.tar.gz"
    }
  ]
}