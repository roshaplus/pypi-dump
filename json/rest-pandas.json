{
  "info": {
    "author": "S. Andrew Sheppard",
    "author_email": "andrew@wq.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "Django REST Pandas\n==================\n\n`Django REST Framework <http://django-rest-framework.org>`__ + `pandas <http://pandas.pydata.org>`__ = A Model-driven Visualization API\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n**Django REST Pandas** (DRP) provides a simple way to generate and serve\n`pandas <http://pandas.pydata.org>`__ DataFrames via the `Django REST\nFramework <http://django-rest-framework.org>`__. The resulting API can\nserve up CSV (and a number of `other formats <#supported-formats>`__)\nfor consumption by a client-side visualization tool like\n`d3.js <http://d3js.org>`__.\n\nThe design philosophy of DRP enforces a strict separation between data\nand presentation. This keeps the implementation simple, but also has the\nnice side effect of making it trivial to provide the source data for\nyour visualizations. This capability can often be leveraged by sending\nusers to the same URL that your visualization code uses internally to\nload the data.\n\nDRP does not include any JavaScript code, leaving the implementation of\ninteractive visualizations as an exercise for the implementer. That\nsaid, DRP is commonly used in conjunction with the\n`wq.app <https://wq.io/wq.app>`__ library, which provides\n`wq/chart.js <https://wq.io/docs/chart-js>`__ and\n`wq/pandas.js <https://wq.io/docs/pandas-js>`__, a collection of chart\nfunctions and data loaders that work well with CSV served by DRP.\n\n|Latest PyPI Release| |Release Notes| |License| |GitHub Stars| |GitHub\nForks| |GitHub Issues|\n\n|Travis Build Status| |Python Support| |Django Support| |Django REST\nFramework Support|\n\nLive Demo\n---------\n\nThe `climata-viewer <http://climata.houstoneng.net>`__ project uses\nDjango REST Pandas and `wq/chart.js <https://wq.io/docs/chart-js>`__ to\nprovide interactive visualizations and spreadsheet downloads.\n\nRelated Work\n------------\n\nThe field of Python-powered data analysis and visualization is growing,\nand there are a number of similar solutions that may fit your needs\nbetter.\n\n-  `Django Pandas <https://github.com/chrisdev/django-pandas/>`__\n   provides a custom ORM model manager with pandas support. By contrast,\n   Django REST Pandas works at the *view* level, by integrating pandas\n   via custom Django REST Framework serializers and renderers.\n-  `DRF-CSV <https://github.com/mjumbewu/django-rest-framework-csv>`__\n   provides straightforward CSV renderers for use with Django REST\n   Framework. It may be useful if you just want a CSV API and don't have\n   a need for the pandas DataFrame functionality.\n-  `mpld3 <http://mpld3.github.io/>`__ provides a direct bridge from\n   `matplotlib <http://matplotlib.org/>`__ to\n   `d3.js <http://d3js.org>`__, complete with seamless\n   `IPython <http://ipython.org/>`__ integration. It is restricted to\n   the (large) matplotlib chart vocabularly but should be sufficient for\n   many use cases.\n-  `Bokeh <http://bokeh.pydata.org/>`__ is a complete client-server\n   visualization platform. It does not leverage d3 or Django, but is\n   notable as a comprehensive, forward-looking approach to addressing\n   similar use cases.\n\nThe goal of Django REST Pandas is to provide a generic REST API for\nserving up pandas dataframes. In this sense, it is similar to the Plot\nServer in Bokeh, but more generic in that it does not assume any\nparticular visualization format or technology. Further, DRP is optimized\nfor integration with public-facing Django-powered websites (unlike mpld3\nwhich is primarily intended for use within IPython).\n\nIn summary, DRP is designed for use cases where:\n\n-  You want to support live spreadsheet downloads as well as interactive\n   visualizations, and/or\n-  You want full control over the client visualization stack in order to\n   integrate it with the rest of your website and/or build process. This\n   usually means writing JavaScript code by hand.\n   `mpld3 <http://mpld3.github.io/>`__ may be a better choice for data\n   exploration if you are more comfortable with (I)Python and need\n   something that can generate interactive visualizations out of the\n   box.\n\nSupported Formats\n-----------------\n\nThe following output formats are provided by default. These are provided\nas `renderer\nclasses <http://www.django-rest-framework.org/api-guide/renderers>`__ in\norder to leverage the content type negotiation built into Django REST\nFramework. This means clients can specify a format via:\n\n-  an HTTP \"Accept\" header (``Accept: text/csv``),\n-  a format parameter (``/path?format=csv``), or\n-  a format extension (``/path.csv``)\n\nThe HTTP header and format parameter are enabled by default on every\npandas view. Using the extension requires a custom URL configuration\n(see below).\n\n+----------+-----------------+------------------------------+-----------------+\n| Format   | Content Type    | pandas DataFrame Function    | Notes           |\n+==========+=================+==============================+=================+\n| HTML     | ``text/html``   | ``to_html()``                | See notes on    |\n|          |                 |                              | `HTML           |\n|          |                 |                              | output <#html-o |\n|          |                 |                              | utput>`__       |\n+----------+-----------------+------------------------------+-----------------+\n| CSV      | ``text/csv``    | ``to_csv()``                 | \u00a0               |\n+----------+-----------------+------------------------------+-----------------+\n| TXT      | ``text/plain``  | ``to_csv()``                 | Useful for      |\n|          |                 |                              | testing, as     |\n|          |                 |                              | most browsers   |\n|          |                 |                              | will download a |\n|          |                 |                              | CSV file        |\n|          |                 |                              | instead of      |\n|          |                 |                              | displaying it   |\n+----------+-----------------+------------------------------+-----------------+\n| JSON     | ``application/j | ``to_json()``                | ```date_format` |\n|          | son``           |                              | `               |\n|          |                 |                              | and             |\n|          |                 |                              | ``orient`` <htt |\n|          |                 |                              | p://pandas.pyda |\n|          |                 |                              | ta.org/pandas-d |\n|          |                 |                              | ocs/stable/gene |\n|          |                 |                              | rated/pandas.Da |\n|          |                 |                              | taFrame.to_json |\n|          |                 |                              | .html>`__       |\n|          |                 |                              | can be provided |\n|          |                 |                              | in URL (e.g.    |\n|          |                 |                              | ``/path.json?or |\n|          |                 |                              | ient=columns``) |\n+----------+-----------------+------------------------------+-----------------+\n| XLSX     | ``application/v | ``to_excel()``               | \u00a0               |\n|          | nd.openxml...sh |                              |                 |\n|          | eet``           |                              |                 |\n+----------+-----------------+------------------------------+-----------------+\n| XLS      | ``application/v | ``to_excel()``               | \u00a0               |\n|          | nd.ms-excel``   |                              |                 |\n+----------+-----------------+------------------------------+-----------------+\n| PNG      | ``image/png``   | ``plot()``                   | Currently not   |\n|          |                 |                              | very            |\n|          |                 |                              | customizable,   |\n|          |                 |                              | but a simple    |\n|          |                 |                              | way to view the |\n|          |                 |                              | data as an      |\n|          |                 |                              | image.          |\n+----------+-----------------+------------------------------+-----------------+\n| SVG      | ``image/svg``   | ``plot()``                   | Eventually      |\n|          |                 |                              | these could     |\n|          |                 |                              | become a        |\n|          |                 |                              | fallback for    |\n|          |                 |                              | clients that    |\n|          |                 |                              | can't handle    |\n|          |                 |                              | d3.js           |\n+----------+-----------------+------------------------------+-----------------+\n\nThe underlying implementation is a set of\n`serializers <https://github.com/wq/django-rest-pandas/blob/master/rest_pandas/serializers.py>`__\nthat take the normal serializer result and put it into a dataframe.\nThen, the included\n`renderers <https://github.com/wq/django-rest-pandas/blob/master/rest_pandas/renderers.py>`__\ngenerate the output using the built in pandas functionality.\n\nUsage\n-----\n\nGetting Started\n~~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    # Recommended: create virtual environment\n    # python3 -m venv venv\n    # . venv/bin/activate\n    pip install rest-pandas\n\n**NOTE:** Django REST Pandas relies on pandas, which itself relies on\nNumPy and other scientific Python libraries written in C. This is\nusually fine, since pip can use Python Wheels to install precompiled\nversions. If you are having trouble installing DRP due to dependency\nissues, you may need to pre-install pandas using apt or conda.\n\nUsage Examples\n~~~~~~~~~~~~~~\n\nNo Model\n^^^^^^^^\n\nThe example below allows you to create a simple API for an existing\nPandas DataFrame, e.g. generated from an existing file.\n\n.. code:: python\n\n    # views.py\n    from rest_pandas import PandasSimpleView\n    import pandas as pd\n\n    class TimeSeriesView(PandasSimpleView):\n        def get_data(self, request, *args, **kwargs):\n            return pd.read_csv('data.csv')\n\nModel-Backed\n^^^^^^^^^^^^\n\nThe example below assumes you already have a Django project set up with\na single ``TimeSeries`` model.\n\n.. code:: python\n\n    # views.py\n    from rest_pandas import PandasView\n    from .models import TimeSeries\n    from .serializers import TimeSeriesSerializer\n\n    # Short version (leverages default DRP settings):\n    class TimeSeriesView(PandasView):\n        queryset = TimeSeries.objects.all()\n        serializer_class = TimeSeriesSerializer\n        # That's it!  The view will be able to export the model dataset to any of\n        # the included formats listed above.  No further customization is needed to\n        # leverage the defaults.\n\n    # Long Version and step-by-step explanation\n    class TimeSeriesView(PandasView):\n        # Assign a default model queryset to the view\n        queryset = TimeSeries.objects.all()\n\n        # Step 1. In response to get(), the underlying Django REST Framework view\n        # will load the queryset and then pass it to the following function.\n        def filter_queryset(self, qs): \n            # At this point, you can filter queryset based on self.request or other\n            # settings (useful for limiting memory usage).  This function can be\n            # omitted if you are using a filter backend or do not need filtering.\n            return qs\n            \n        # Step 2. A Django REST Framework serializer class should serialize each\n        # row in the queryset into a simple dict format.  A simple ModelSerializer\n        # should be sufficient for most cases.\n        serializer_class = TimeSeriesSerializer  # extends ModelSerializer\n\n        # Step 3.  The included PandasSerializer will load all of the row dicts\n        # into array and convert the array into a pandas DataFrame.  The DataFrame\n        # is essentially an intermediate format between Step 2 (dict) and Step 4\n        # (output format).  The default DataFrame simply maps each model field to a\n        # column heading, and will be sufficient in many cases.  If you do not need\n        # to transform the dataframe, you can skip to step 4.\n        \n        # If you would like to transform the dataframe (e.g. to pivot or add\n        # columns), you can do so in one of two ways:\n\n        # A. Create a subclass of PandasSerializer, define a function called\n        # transform_dataframe(self, dataframe) on the subclass, and assign it to\n        # pandas_serializer_class on the view.  You can also use one of the three\n        # provided pivoting serializers (see Advanced Usage below).\n        #\n        # class MyCustomPandasSerializer(PandasSerializer):\n        #     def transform_dataframe(self, dataframe):\n        #         dataframe.some_pivot_function(in_place=True)\n        #         return dataframe\n        #\n        pandas_serializer_class = MyCustomPandasSerializer\n\n        # B. Alternatively, you can create a custom transform_dataframe function\n        # directly on the view.  Again, if no custom transformations are needed,\n        # this function does not need to be defined.\n        def transform_dataframe(self, dataframe):\n            dataframe.some_pivot_function(in_place=True)\n            return dataframe\n        \n        # NOTE: As the name implies, the primary purpose of transform_dataframe()\n        # is to apply a transformation to an existing dataframe.  In PandasView,\n        # this dataframe is created by serializing data queried from a Django\n        # model.  If you would like to supply your own custom DataFrame from the\n        # start (without using a Django model), you can do so with PandasSimpleView\n        # as shown in the first example.\n\n        # Step 4. Finally, the provided renderer classes will convert the DataFrame\n        # to any of the supported output formats (see above).  By default, all of\n        # the formats above are enabled.  To restrict output to only the formats\n        # you are interested in, you can define renderer_classes on the view:\n        renderer_classes = [PandasCSVRenderer, PandasExcelRenderer]\n        # You can also set the default renderers for all of your pandas views by\n        # defining the PANDAS_RENDERERS in your settings.py.\n\nDjango Pandas Integration\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nYou can also let `Django\nPandas <https://github.com/chrisdev/django-pandas/>`__ handle querying\nand generating the dataframe, and only use Django REST Pandas for the\nrendering:\n\n.. code:: python\n\n    # models.py\n    from django_pandas.managers import DataFrameManager\n\n    class TimeSeries(models.Model):\n        # ...\n        objects = DataFrameManager()\n\n.. code:: python\n\n    # views.py\n    from rest_pandas import PandasSimpleView\n    from .models import TimeSeries\n\n    class TimeSeriesView(PandasSimpleView):\n        def get_data(self, request, *args, **kwargs):\n            return TimeSeries.objects.to_timeseries(\n                index='date',\n            )\n\nRegistering URLs\n^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    # urls.py\n    from django.conf.urls import patterns, include, url\n\n    from .views import TimeSeriesView\n    urlpatterns = patterns('',\n        url(r'^data', TimeSeriesView.as_view()),\n    )\n\n    # This is only required to support extension-style formats (e.g. /data.csv)\n    from rest_framework.urlpatterns import format_suffix_patterns\n    urlpatterns = format_suffix_patterns(urlpatterns)\n\nThe default ``PandasView`` will serve up all of the available data from\nthe provided model in a simple tabular form. You can also use a\n``PandasViewSet`` if you are using Django REST Framework's\n`ViewSets <http://www.django-rest-framework.org/api-guide/viewsets>`__\nand\n`Routers <http://www.django-rest-framework.org/api-guide/routers>`__.\n\nCustomizing Renderers\n^^^^^^^^^^^^^^^^^^^^^\n\nYou can override the default renderers by setting ``PANDAS_RENDERERS``\nin your ``settings.py``, or by overriding ``renderer_classes`` in your\nindividual view(s). ``PANDAS_RENDERERS`` is defined separately from\nDjango REST Framework's own ``DEFAULT_RENDERER_CLASSES`` setting, in\ncase you want to have DRP-enabled views intermingled with regular DRF\nviews.\n\nYou can also include DRP renderers in ``DEFAULT_RENDERER_CLASSES``. In\nthat case, be sure to have all of your views extend ``PandasMixin``,\notherwise you may get an error saying the serializer output is not a\n``DataFrame``. In short, there are three paths to getting DRP renderers\nworking with your views:\n\n1. Extend ``PandasView``, ``PandasSimpleView``, or ``PandasViewSet``,\n   and use the ``PANDAS_RENDERERS`` setting (which defaults to the list\n   above).\n2. Extend ``PandasMixin`` and customize\n   ``REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES']`` to add one or more\n   ``rest_pandas`` renderers.\n3. Extend any of the ``Pandas*`` classes and set ``renderer_classes``\n   explicitly on the view.\n\n.. code:: python\n\n    class TimeSeriesView(PandasView):\n        # renderer_classes default to PANDAS_RENDERERS\n        ...\n\n    class TimeSeriesView(PandasMixin, ListAPIView):\n        # renderer_classes default to REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES']\n        ...\n\nDate Formatting\n^^^^^^^^^^^^^^^\n\nBy default, Django REST Framework will serialize dates as strings before\nthey are processed by the renderer classes. In many cases, you may want\nto preserve the dates as ``datetime`` objects and let Pandas handle the\nrendering. To do this, define an explicit\n`DateTimeField <http://www.django-rest-framework.org/api-guide/fields/#datetimefield>`__\nor\n`DateField <http://www.django-rest-framework.org/api-guide/fields/#datefield>`__\non your DRF serializer and set ``format=None``:\n\n.. code:: python\n\n    # serializers.py\n    class TimeSeriesSerializer(serializers.ModelSerializer):\n        date = serializers.DateField(format=None)\n        class Meta:\n            model = TimeSeries\n            fields = '__all__'\n\nAlternately, you can disable date serialization globally by setting\n``DATETIME_FORMAT`` and/or ``DATE_FORMAT`` to ``None`` in your\n``settings.py``:\n\n.. code:: python\n\n    # settings.py\n    DATE_FORMAT = None\n\nHTML Output\n^^^^^^^^^^^\n\nThe HTML renderer provides the ability to create an interactive view\nthat shares the same URL as your data API. The dataframe is processed by\n``to_html()``, then passed to\n`TemplateHTMLRenderer <http://www.django-rest-framework.org/api-guide/renderers/#templatehtmlrenderer>`__\nwith the following context:\n\n+--------------------+---------------------+\n| context variable   | description         |\n+====================+=====================+\n| ``table``          | Output ``<table>``  |\n|                    | from ``to_html()``  |\n+--------------------+---------------------+\n| ``name``           | View name           |\n+--------------------+---------------------+\n| ``description``    | View description    |\n+--------------------+---------------------+\n| ``url``            | Current URL Path    |\n|                    | (without            |\n|                    | parameters)         |\n+--------------------+---------------------+\n| ``url_params``     | URL parameters      |\n+--------------------+---------------------+\n| ``available_format | Array of allowed    |\n| s``                | extensions (e.g.    |\n|                    | ``'csv'``,          |\n|                    | ``'json'``,         |\n|                    | ``'xlsx'``)         |\n+--------------------+---------------------+\n| ``wq_chart_type``  | Recommended chart   |\n|                    | type (for use with  |\n|                    | `wq/chartapp.js <ht |\n|                    | tps://wq.io/docs/ch |\n|                    | artapp-js>`__,      |\n|                    | see below)          |\n+--------------------+---------------------+\n\nAs with ``TemplateHTMLRenderer``, the template name is controlled by the\nview. If you are using DRP together with the `wq\nframework <https://wq.io/>`__, you can leverage the default\n`mustache/rest\\_pandas.html <https://github.com/wq/django-rest-pandas/blob/master/rest_pandas/mustache/rest_pandas.html>`__\ntemplate, which is designed for use with the\n`wq/chartapp.js <https://wq.io/docs/chartapp-js>`__ plugin. Otherwise,\nyou will probably want to provide a custom template and/or set\n``template_name`` on the view.\n\nIf you need to do a lot of customization, and/or you don't really need\nthe entire dataframe rendered in a ``<table>``, you can always create\nanother view for the interface and make the ``PandasView`` only handle\nthe API.\n\n    Note: For backwards compatibility, ``PandasHTMLRenderer`` is only\n    included in the default ``PANDAS_RENDERERS`` if ``rest_pandas`` is\n    listed in your installed apps.\n\nBuilding Interactive Charts\n---------------------------\n\nIn addition to use as a data export tool, DRP is well-suited for\ncreating data API backends for interactive charts. In particular, DRP\ncan be used with `d3.js <http://d3js.org>`__,\n`wq/pandas.js <https://wq.io/docs/pandas-js>`__, and\n`wq/chart.js <https://wq.io/docs/chart-js>`__, to create interactive\ntime series, scatter, and box plot charts - as well as any of the\ninfinite other charting possibilities d3.js provides.\n\nTo facilitate data API building, the CSV renderer is the default in\nDjango REST Pandas. While the pandas JSON serializer is improving, the\nprimary reason for making CSV the default is the compactness it provides\nover JSON when serializing time series data. The default CSV output from\nDRP will have single row of column headers, making it suitable as-is for\nuse with e.g. ``d3.csv()``. However, DRP is often used with the custom\nserializers below to produce a dataframe with nested multi-row column\nheaders. This is harder to parse with ``d3.csv()`` but can be easily\nprocessed by `wq/pandas.js <https://wq.io/docs/pandas-js>`__, an\nextension to d3.js.\n\n.. code:: javascript\n\n    // mychart.js\n    define(['d3', 'wq/pandas', 'wq/chart'], function(d3, pandas, chart) {\n\n    // Unpivoted data (single-row header)\n    d3.csv(\"/data.csv\", render);\n\n    // Pivoted data (multi-row header)\n    pandas.get('/data.csv', render);\n\n    function render(error, data) {\n        d3.select('svg')\n           .selectAll('rect')\n           .data(data)\n           // ...\n    }\n\n    });\n\nDRP includes three custom serializers with ``transform_dataframe()``\nfunctions that address common use cases. These serializer classes can be\nleveraged by assigning them to ``pandas_serializer_class`` on your view.\nIf you are using the `wq framework <https://wq.io/>`__, these\nserializers can automatically leverage DRP's default `HTML\ntemplate <#html-output>`__ together with\n`wq/chartapp.js <https://wq.io/docs/chartapp-js>`__ to provide\ninteractive charts. If you are not using the full wq framework, you can\nstill use `wq/pandas.js <https://wq.io/docs/pandas-js>`__ and\n`wq/chart.js <https://wq.io/docs/chart-js>`__ directly with the CSV\noutput of these serializers.\n\nFor documentation purposes, the examples below assume the following\ndataset:\n\n+------------+---------------+--------------+---------+\n| Location   | Measurement   | Date         | Value   |\n+============+===============+==============+=========+\n| site1      | temperature   | 2016-01-01   | 3       |\n+------------+---------------+--------------+---------+\n| site1      | humidity      | 2016-01-01   | 30      |\n+------------+---------------+--------------+---------+\n| site2      | temperature   | 2016-01-01   | 4       |\n+------------+---------------+--------------+---------+\n| site2      | temperature   | 2016-01-02   | 5       |\n+------------+---------------+--------------+---------+\n\nPandasUnstackedSerializer\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``PandasUnstackedSerializer``\n`unstacks <http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.unstack.html>`__\nthe dataframe so a few key attributes are listed in a multi-row column\nheader. This makes it easier to include metadata about e.g. a time\nseries without repeating the same values on every data row.\n\nTo specify which attributes to use in column headers, define the\nattribute ``pandas_unstacked_header`` on your ``ModelSerializer``\nsubclass. You will generally also want to define ``pandas_index``, which\nis a list of metadata fields unique to each row (e.g. the timestamp).\n\n.. code:: python\n\n    # serializers.py\n    from rest_framework import serializers\n    from .models import TimeSeries\n\n    class TimeSeriesSerializer(serializers.ModelSerializer):\n        class Meta:\n            model = MultiTimeSeries\n            fields = ['date', 'location', 'measurement', 'value']\n            pandas_index = ['date']\n            pandas_unstacked_header = ['location', 'measurement']\n\n    # views.py\n    from rest_pandas import PandasView, PandasUnstackedSerializer\n    from .models import TimeSeries\n    from .serializers import TimeSeriesSerializer\n\n    class TimeSeriesView(PandasView):\n        queryset = TimeSeries.objects.all()\n        serializer_class = TimeSeriesSerializer\n        pandas_serializer_class = PandasUnstackedSerializer\n\nWith the above example data, this configuration would output a CSV file\nwith the following layout:\n\n+-------------------+-----------------+--------------+-----------------+\n| \u00a0                 | Value           | Value        | Value           |\n+===================+=================+==============+=================+\n| **Location**      | *site1*         | *site1*      | *site2*         |\n+-------------------+-----------------+--------------+-----------------+\n| **Measurement**   | *temperature*   | *humidity*   | *temperature*   |\n+-------------------+-----------------+--------------+-----------------+\n| **Date**          |                 |              | \u00a0               |\n+-------------------+-----------------+--------------+-----------------+\n| 2016-01-01        | 3               | 30           | 4               |\n+-------------------+-----------------+--------------+-----------------+\n| 2016-01-02        |                 |              | 5               |\n+-------------------+-----------------+--------------+-----------------+\n\nThis could then be processed by\n`wq/pandas.js <https://wq.io/docs/pandas-js>`__ into the following\nstructure:\n\n.. code:: javascript\n\n    [\n        {\n            \"location\": \"site1\",\n            \"measurement\": \"temperature\",\n            \"data\": [\n                {\"date\": \"2016-01-01\", \"value\": 3}\n            ]\n        },\n        {\n            \"location\": \"site1\",\n            \"measurement\": \"humidity\",\n            \"data\": [\n                {\"date\": \"2016-01-01\", \"value\": 30}\n            ]\n        },\n        {\n            \"location\": \"site2\",\n            \"measurement\": \"temperature\",\n            \"data\": [\n                {\"date\": \"2016-01-01\", \"value\": 4},\n                {\"date\": \"2016-01-02\", \"value\": 5}\n            ]\n        }\n    ]\n\nThe output of ``PandasUnstackedSerializer`` can be used with the\n``timeSeries()`` chart provided by\n`wq/chart.js <https://wq.io/docs/chart-js>`__:\n\n.. code:: javascript\n\n    define(['d3', 'wq/pandas', 'wq/chart'], function(d3, pandas, chart) {\n\n    var svg = d3.select('svg');\n    var plot = chart.timeSeries();\n    pandas.get('/data/timeseries.csv', function(data) {\n        svg.datum(data).call(plot);\n    });\n\n    });\n\nPandasScatterSerializer\n~~~~~~~~~~~~~~~~~~~~~~~\n\n``PandasScatterSerializer`` unstacks the dataframe and also combines\nselected attributes to make it easier to plot two measurements against\neach other in an x-y scatterplot.\n\nTo specify which attributes to use for the coordinate names, define the\nattribute ``pandas_scatter_coord`` on your ``ModelSerializer`` subclass.\nYou can also specify additional metadata attributes to include in the\nheader with ``pandas_scatter_header``. You will generally also want to\ndefine ``pandas_index``, which is a list of metadata fields unique to\neach row (e.g. the timestamp).\n\n.. code:: python\n\n    # serializers.py\n    from rest_framework import serializers\n    from .models import TimeSeries\n\n    class TimeSeriesSerializer(serializers.ModelSerializer):\n        class Meta:\n            model = MultiTimeSeries\n            fields = ['date', 'location', 'measurement', 'value']\n            pandas_index = ['date']\n            pandas_scatter_coord = ['measurement']\n            pandas_scatter_header = ['location']\n\n    # views.py\n    from rest_pandas import PandasView, PandasScatterSerializer\n    from .models import TimeSeries\n    from .serializers import TimeSeriesSerializer\n\n    class TimeSeriesView(PandasView):\n        queryset = TimeSeries.objects.all()\n        serializer_class = TimeSeriesSerializer\n        pandas_serializer_class = PandasScatterSerializer\n\nWith the above example data, this configuration would output a CSV file\nwith the following layout:\n\n+----------------+---------------------+------------------+---------------------+\n| \u00a0              | temperature-value   | humidity-value   | temperature-value   |\n+================+=====================+==================+=====================+\n| **Location**   | *site1*             | *site1*          | *site2*             |\n+----------------+---------------------+------------------+---------------------+\n| **Date**       |                     |                  | \u00a0                   |\n+----------------+---------------------+------------------+---------------------+\n| 2014-01-01     | 3                   | 30               | 4                   |\n+----------------+---------------------+------------------+---------------------+\n| 2014-01-02     |                     |                  | 5                   |\n+----------------+---------------------+------------------+---------------------+\n\nThis could then be processed by\n`wq/pandas.js <https://wq.io/docs/pandas-js>`__ into the following\nstructure:\n\n.. code:: javascript\n\n    [\n        {\n            \"location\": \"site1\",\n            \"data\": [\n                {\n                    \"date\": \"2016-01-01\",\n                    \"temperature-value\": 3,\n                    \"humidity-value\": 30\n                }\n            ]\n        },\n        {\n            \"location\": \"site2\",\n            \"data\": [\n                {\n                    \"date\": \"2016-01-01\",\n                    \"temperature-value\": 4\n                },\n                {\n                    \"date\": \"2016-01-02\",\n                    \"temperature-value\": 5\n                }\n            ]\n        }\n    ]\n\nThe output of ``PandasScatterSerializer`` can be used with the\n``scatter()`` chart provided by\n`wq/chart.js <https://wq.io/docs/chart-js>`__:\n\n.. code:: javascript\n\n    define(['d3', 'wq/pandas', 'wq/chart'], function(d3, pandas, chart) {\n\n    var svg = d3.select('svg');\n    var plot = chart.scatter()\n        .xvalue(function(d) {\n            return d['temperature-value'];\n        })\n        .yvalue(function(d) {\n            return d['humidity-value'];\n        });\n\n    pandas.get('/data/scatter.csv', function(data) {\n        svg.datum(data).call(plot);\n    });\n\n    });\n\nPandasBoxplotSerializer\n~~~~~~~~~~~~~~~~~~~~~~~\n\n``PandasBoxplotSerializer`` computes boxplot statistics (via\nmatplotlib's\n`boxplot\\_stats <http://matplotlib.org/api/cbook_api.html#matplotlib.cbook.boxplot_stats>`__)\nand pushes the results out via an unstacked dataframe. The statistics\ncan be aggregated for a specified group column as well as by date.\n\nTo specify which attribute to use for the group column, define the\nattribute ``pandas_boxplot_group`` on your ``ModelSerializer`` subclass.\nTo specify an attribute to use for date-based grouping, define\n``pandas_boxplot_date``. You will generally also want to define\n``pandas_boxplot_header``, which will unstack any metadata columns and\nexclude them from statistics.\n\n.. code:: python\n\n    # serializers.py\n    from rest_framework import serializers\n    from .models import TimeSeries\n\n    class TimeSeriesSerializer(serializers.ModelSerializer):\n        class Meta:\n            model = MultiTimeSeries\n            fields = ['date', 'location', 'measurement', 'value']\n            pandas_boxplot_group = 'site'\n            pandas_boxplot_date = 'date'\n            pandas_boxplot_header = ['measurement']\n\n    # views.py\n    from rest_pandas import PandasView, PandasBoxplotSerializer\n    from .models import TimeSeries\n    from .serializers import TimeSeriesSerializer\n\n    class TimeSeriesView(PandasView):\n        queryset = TimeSeries.objects.all()\n        serializer_class = TimeSeriesSerializer\n        pandas_serializer_class = PandasBoxplotSerializer\n\nWith the above example data, this configuration will output a CSV file\nwith the same general structure as ``PandasUnstackedSerializer``, but\nwith the ``value`` spread across multiple boxplot statistics columns\n(``value-mean``,\n``value-q1``,value-whishi\\ ``, etc.).  An optional``\\ group\\` parameter\ncan be added to the query string to switch between various groupings:\n\n+---------------------------+----------------------------------------------+\n| name                      | purpose                                      |\n+===========================+==============================================+\n| ``?group=series``         | Group by series (``pandas_boxplot_group``)   |\n+---------------------------+----------------------------------------------+\n| ``?group=series-year``    | Group by series, then by year                |\n+---------------------------+----------------------------------------------+\n| ``?group=series-month``   | Group by series, then by month               |\n+---------------------------+----------------------------------------------+\n| ``?group=year``           | Summarize all data by year                   |\n+---------------------------+----------------------------------------------+\n| ``?group=month``          | Summarize all data by month                  |\n+---------------------------+----------------------------------------------+\n\nThe output of ``PandasBoxplotSerializer`` can be used with the\n``boxplot()`` chart provided by\n`wq/chart.js <https://wq.io/docs/chart-js>`__:\n\n.. code:: javascript\n\n    define(['d3', 'wq/pandas', 'wq/chart'], function(d3, pandas, chart) {\n\n    var svg = d3.select('svg');\n    var plot = chart.boxplot();\n    pandas.get('/data/boxplot.csv?group=year', function(data) {\n        svg.datum(data).call(plot);\n    });\n\n    });\n\n.. |Latest PyPI Release| image:: https://img.shields.io/pypi/v/rest-pandas.svg\n   :target: https://pypi.python.org/pypi/rest-pandas\n.. |Release Notes| image:: https://img.shields.io/github/release/wq/django-rest-pandas.svg\n   :target: https://github.com/wq/django-rest-pandas/releases\n.. |License| image:: https://img.shields.io/pypi/l/rest-pandas.svg\n   :target: https://github.com/wq/django-rest-pandas/blob/master/LICENSE\n.. |GitHub Stars| image:: https://img.shields.io/github/stars/wq/django-rest-pandas.svg\n   :target: https://github.com/wq/django-rest-pandas/stargazers\n.. |GitHub Forks| image:: https://img.shields.io/github/forks/wq/django-rest-pandas.svg\n   :target: https://github.com/wq/django-rest-pandas/network\n.. |GitHub Issues| image:: https://img.shields.io/github/issues/wq/django-rest-pandas.svg\n   :target: https://github.com/wq/django-rest-pandas/issues\n.. |Travis Build Status| image:: https://img.shields.io/travis/wq/django-rest-pandas.svg\n   :target: https://travis-ci.org/wq/django-rest-pandas\n.. |Python Support| image:: https://img.shields.io/pypi/pyversions/rest-pandas.svg\n   :target: https://pypi.python.org/pypi/rest-pandas\n.. |Django Support| image:: https://img.shields.io/badge/Django-1.8%2C%201.10%2C%201.11-blue.svg\n   :target: https://pypi.python.org/pypi/rest-pandas\n.. |Django REST Framework Support| image:: https://img.shields.io/badge/DRF-3.6-blue.svg\n   :target: https://pypi.python.org/pypi/rest-pandas\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/wq/django-rest-pandas",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rest-pandas",
    "platform": "",
    "project_url": "https://pypi.org/project/rest-pandas/",
    "release_url": "https://pypi.org/project/rest-pandas/1.0.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Serves up pandas dataframes via the Django REST Framework for client-side(i.e. d3.js) visualizations",
    "version": "1.0.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5414fdaf09ba852ceb975d1a1617c688",
          "sha256": "a9511c625ed0cb2d383cf77962e39f254967d354bd61e45f9df5c834beabec49"
        },
        "downloads": 2482,
        "filename": "rest-pandas-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5414fdaf09ba852ceb975d1a1617c688",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6898,
        "upload_time": "2014-02-04T19:47:17",
        "url": "https://files.pythonhosted.org/packages/a1/d4/85989083007d661938c9a129b9ed85d9827d225e4e11909327b881b7cb20/rest-pandas-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "27d4e56eb5bd9531313d1a3c8d70767b",
          "sha256": "aafd0987adb42b3d4dc1cab519b21ddfc976bf62e670fc7b0c6e2e8ead1d569f"
        },
        "downloads": 1839,
        "filename": "rest-pandas-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "27d4e56eb5bd9531313d1a3c8d70767b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7295,
        "upload_time": "2014-06-14T15:33:54",
        "url": "https://files.pythonhosted.org/packages/51/47/ea760891e5f74814b8506225f7360e75ab775cedda240a4d12dd98d23a35/rest-pandas-0.1.1.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1b007545340d61715951d8839461854c",
          "sha256": "055dcc7791bbbf043f7e7da04dbfa02e488d5edf09d8f491bc1c441bb8dc4e38"
        },
        "downloads": 2025,
        "filename": "rest-pandas-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1b007545340d61715951d8839461854c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8278,
        "upload_time": "2014-08-12T20:26:16",
        "url": "https://files.pythonhosted.org/packages/8c/2d/7eb1e25745ff072a20b281c06f6b9523f232cc3db4f46e637f80ec4b6ce3/rest-pandas-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5ffebd702082a0b129303a23066503f5",
          "sha256": "34138a9d431e48253fae0d754bd9b4287a9dddadf8957b600f04940b6e9f4e94"
        },
        "downloads": 4752,
        "filename": "rest-pandas-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5ffebd702082a0b129303a23066503f5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8922,
        "upload_time": "2014-11-17T18:06:53",
        "url": "https://files.pythonhosted.org/packages/ed/3e/a825c2eee7b3e204da521a79fbee15f77974d696c3dc3afe1ff54fdff22e/rest-pandas-0.2.1.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bfba5e55b42581d7e3e02baa40f79a8f",
          "sha256": "a9d1b7b6c32cd89cc68d8a259b12cce4c42baceaaccf9421e3a7938090c57803"
        },
        "downloads": 1057,
        "filename": "rest-pandas-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bfba5e55b42581d7e3e02baa40f79a8f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9384,
        "upload_time": "2015-03-12T01:33:14",
        "url": "https://files.pythonhosted.org/packages/b8/c1/39491f070e400022425676becbba0809946602253d83bf2018095a620228/rest-pandas-0.3.0.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1b766f484ee19ac74951859efb508b3c",
          "sha256": "f7314223df85c9171a8aa2ec116c2dc2fbec83a8a01466e9032507c94d1e3dcf"
        },
        "downloads": 2641,
        "filename": "rest-pandas-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1b766f484ee19ac74951859efb508b3c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9412,
        "upload_time": "2015-03-19T18:29:51",
        "url": "https://files.pythonhosted.org/packages/df/f4/38c1dbc7b9d2fc0cf7d15483abf386b5d34548a1f99857901b854caddef3/rest-pandas-0.3.1.tar.gz"
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eac336ffb460dd3c43d8a2b725410fdb",
          "sha256": "4ccdf2b653ef335e05ccdcac55a0e94b76edc4350daa116b14ba787cfcc9c74b"
        },
        "downloads": 3673,
        "filename": "rest-pandas-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "eac336ffb460dd3c43d8a2b725410fdb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9422,
        "upload_time": "2015-04-20T14:27:28",
        "url": "https://files.pythonhosted.org/packages/88/02/c2df5d1d30f4e480739caa4c649a7b6b2a337cb694b775fb727022854018/rest-pandas-0.3.2.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ec2ec572959f5687a0c82d5c5e70122f",
          "sha256": "22a4953c14119040e70ac2af85306aa120c6bea3676ef42adac206659b0028f3"
        },
        "downloads": 2036,
        "filename": "rest-pandas-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ec2ec572959f5687a0c82d5c5e70122f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28374,
        "upload_time": "2015-11-26T00:40:33",
        "url": "https://files.pythonhosted.org/packages/8d/7f/3c997bf9bef2cfa696a88aa938239d10262b569fc3dea783deb248f2b35f/rest-pandas-0.4.0.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8a2bfd0a2b85448294dcb456e8c928a0",
          "sha256": "06b7ee7c885088bce5e033da85974f26a351c72171e89ea4bf488aeeffd3522d"
        },
        "downloads": 1427,
        "filename": "rest-pandas-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8a2bfd0a2b85448294dcb456e8c928a0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28697,
        "upload_time": "2016-08-25T20:35:27",
        "url": "https://files.pythonhosted.org/packages/23/b9/6be263dd5be591f8059e0bc884d82582114b5ec95b04623525d7efbcd6a3/rest-pandas-0.4.1.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "955a9cce24d528131feba67f3a8adc95",
          "sha256": "9ae948bf266be5daec5b633df6b49e8924945eae6b16f1a8d6f5fef2fbdf1b29"
        },
        "downloads": 702,
        "filename": "rest-pandas-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "955a9cce24d528131feba67f3a8adc95",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30026,
        "upload_time": "2016-11-08T20:15:23",
        "url": "https://files.pythonhosted.org/packages/a7/3d/b34c05b86147f4ac2613db1d6c915ddc28d677b9f4afc2f24bb7ccf7be25/rest-pandas-0.5.0.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "427605988f45329b7539c26e20b6267b",
          "sha256": "cdfbc1baa5927f833e986b586f751b677a38d0360d827291937ee68a0ed7e105"
        },
        "downloads": 0,
        "filename": "rest-pandas-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "427605988f45329b7539c26e20b6267b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35142,
        "upload_time": "2017-09-13T17:51:26",
        "url": "https://files.pythonhosted.org/packages/37/1a/ec63b5b7f4299c5db9f460658de37cbd372a7b708addcf1ada3df0c91fc0/rest-pandas-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "427605988f45329b7539c26e20b6267b",
        "sha256": "cdfbc1baa5927f833e986b586f751b677a38d0360d827291937ee68a0ed7e105"
      },
      "downloads": 0,
      "filename": "rest-pandas-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "427605988f45329b7539c26e20b6267b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 35142,
      "upload_time": "2017-09-13T17:51:26",
      "url": "https://files.pythonhosted.org/packages/37/1a/ec63b5b7f4299c5db9f460658de37cbd372a7b708addcf1ada3df0c91fc0/rest-pandas-1.0.0.tar.gz"
    }
  ]
}