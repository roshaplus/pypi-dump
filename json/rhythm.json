{
  "info": {
    "author": "James William Pye",
    "author_email": "mailto:x@jwp.io",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: Freely Distributable",
      "License :: Freeware",
      "License :: Public Domain",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Debuggers",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Testing",
      "Topic :: System :: Shells",
      "Topic :: System :: Software Distribution",
      "Topic :: Utilities"
    ],
    "description": ".. role:: manpage(literal)\n.. role:: py:meth(literal)\n.. role:: py:class(literal)\n.. role:: py:mod(literal)\n.. role:: py:obj(literal)\n.. role:: py:func(literal)\n\n\nTime is an illusion?\n\n\u231b About\n--------\n\n.. warning:: rhythm is a work in progress.\n\nrhythm is a pure-Python datetime package based on the built-in Python `int`.\nBy default, timestamps have nanosecond precision granting common applications\nmore than enough detail about a point in time. For specialized purposes, the\nunits handled by rhythm can be arbitrarily extended--the `int` subclasses\nrepresent a designated unit and a common Time Context, group of unit classes,\nprovides the necessary linkage and transformations for conversion across\nclasses.\n\nCalendar Support:\n\n * Proleptic Gregorian\n\nrhythm's APIs are *not* compatible with the standard library's datetime module. *On purpose.*\n\nThe surface functionality is provided in :py:mod:`rhythm.lib`::\n\n\timport rhythm.lib\n\nCurrent date and time as a :py:class:`rhythm.lib.Timestamp`::\n\n\tnow = rhythm.lib.now() # UTC\n\nCalendar Representation\n-----------------------\n\nA Date can be used to represent the span of the entire day::\n\n\tdate = rhythm.lib.Date.of(year=1982, month=4, day=17)\n\tassert date.select('day', 'month') == 17\n\nHowever, the above actually represents::\n\n\tassert date.select('date') == (1982, 5, 18)\n\nUsually, using the `date` keyword is best way to to work with\nliteral dates::\n\n\tassert rhythm.lib.Date.of(date=(1982,5,18)) == date\n\nThe calendrical **representation** only takes effect through certain\ninterfaces::\n\n\tts = rhythm.lib.Timestamp.of(iso=\"2001-01-01T05:30:01\")\n\tprint(repr(ts))\n\trhythm.lib.Timestamp.of(iso='2001-01-01T05:30:01.000000')\n\nAnd from a datetime tuple::\n\n\tts2 = rhythm.lib.Timestamp.of(datetime = (2001, 1, 1, 5, 30, 1, 0))\n\tassert ts == ts2\n\nrhythm PiTs do not perform calendrical validation; rather, fields with excess\nvalues overflow onto larger units. This is similar to how MySQL handles\noverflow. For rhythm, this choice is deliberate and the user is expected to\nperform any desired validation::\n\n\tpit = rhythm.lib.Date.of(date=(1982,5,0))\n\nThe assigned `pit` now points to the last day of the month preceding the fifth\nmonth in the year 1982. This kind of wrapping allows rhythm users to *quickly*\nperform some of the most difficult datetime math.\n\nDatetime Math\n-------------\n\nrhythm can easily answer questions like, \"What was third weekend of the fifth\nmonth of last year?\"::\n\n\tpit = rhythm.lib.now()\n\tpit = pit.update('day', 0, 'month') # set to the first day to avoid overflow\n\tpit = pit.rollback(year=1) # subtract one gregorian year\n\tpit = pit.update('month', 5-1, 'year') # set to the fifth month\n\tpit = pit.update('day', 6, 'week') # set to the weekend of the week\n\tpit = pit.elapse(week = 2)\n\nThings can get a little more interesting when asking, \"What is the\nlast weekend of the month?\". It's not a problem::\n\n\t# move the beginning of month (to avoid possible day overflow)\n\tpit = rhythm.lib.now().update('day', 0, 'month')\n\t# to the next month and then to the end of the previous\n\tpit = pit.elapse(month = 1).update('day', -1, 'month') # move to the end of the month.\n\t# 0 is the beginning of the week, so -1 is the end of the prior week.\n\tpit = pit.update('day', -1, 'week')\n\nOn day overflow, the following illustrates the effect::\n\n\t# working with a leap year\n\tpit = rhythm.lib.Timestamp.of(iso='2012-01-31T18:55:33.946259')\n\tpit.elapse(month=1)\n\trhythm.lib.Timestamp.of(iso='2012-03-02T18:55:33.946259')\n\nMonth arithmetic does not lose days in order to align the edge of a month.\nIn order to keep overflow from causing invalid calculations, adjust to the\nbeginning of the month.\n\nThings can get even more interesting when asking,\n\"What is the second to last Thursday of the month\". Questions like this require\nalignment in order to be answered::\n\n\tpit = rhythm.lib.now()\n\tpit = pit.update('day', 0, 'month') # let's say this month\n\t# but we need the end of the month\n\tpit = pit.elapse(month=1)\n\tpit = pit.update('day', -1, 'month') # set to the first day\n\t# And now something that will appear almost magical if\n\t# you haven't used a datetime package with a similar feature.\n\tpit = pit.update('day', 0, 'week', align=-4) # last thursday of month\n\tpit = pit.rollback(week=1) # second to last\n\nEssentially, alignment allows Thursdays to be seen as the first day of the\nweek, warranting that the day field will stay the same or be subtracted when\nset to zero. This is why we set the day to the last day of the month, in case\nthe Thursday is the last day of the month, and with proper alignment the first\nday of the week.\n\nClocks\n------\n\n:py:func:`rhythm.lib.now` provides quick and easy access to \"demotic time\", UTC\nwall clock. However, rhythm provides clock based devices for processes with\nmonotonic requirements for things like rate limiting, polling timeouts, and\nsimple execution-time measures.\n\nMeasuring the execution time of a code block is easy with a rhythm stopwatch::\n\n\tdef work():\n\t\tpass\n\n\twith rhythm.lib.clock.stopwatch() as snapshot:\n\t\twork()\n\n\tprint(snapshot())\n\tprint(snapshot())\n\n\n.. note:: Considering the overhead involved with instantiating a\n          :py:class:`rhythm.lib.Timestamp` instance, measuring\n          execution with the high-level clock interfaces may\n          not be appropriate or may require some adjustments\n          accounting for the overhead.\n\n\nThe current runtime of a stopwatch can be accessed within the block as well.\nHowever, once the block exits, the stopwatch will stop tracking elapsed time.\n\nDeltas and meters provide a means to track the change in, monotonic, time::\n\n\tfor measure_since_last_iteration in rhythm.lib.clock.delta():\n\t\tpass\n\nMeters are like deltas, but provide the *total* measurement::\n\n\tfor measure_since_first_iteration in rhythm.lib.clock.meter():\n\t\tpass\n\nTime Zones\n----------\n\nTime zone adjustments are supported by selecting Offset objects from a given\npoint in time object::\n\n\tpit = rhythm.lib.now()\n\toffset = pit.select('tzoffset', 'America/Los_Angeles')\n\tlocal_pit = pit.elapse(offset)\n\tprint(local_pit.select('iso'))\n\nFin\n---\n\nSee the package documentation, for more details on using rhythm:\n\n\thttp://packages.python.org/rhythm/",
    "docs_url": "https://pythonhosted.org/rhythm/",
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/jwp/py-rhythm",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "rhythm",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/rhythm/",
    "release_url": "https://pypi.org/project/rhythm/0.6.0/",
    "requires_python": null,
    "summary": "A datetime package that moves to a different beat.",
    "version": "0.6.0"
  },
  "releases": {
    "0.1.0dev": [],
    "0.2.0dev": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6d638ee149410204ee529d08b88a74dc",
          "sha256": "beca7dee2a4950732f883d486ac939f749a3c52dafb2489b69a3ddc57fb66a0a"
        },
        "downloads": 2366,
        "filename": "rhythm-0.2.0dev.tar.gz",
        "has_sig": false,
        "md5_digest": "6d638ee149410204ee529d08b88a74dc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29166,
        "upload_time": "2012-05-14T03:35:26",
        "url": "https://files.pythonhosted.org/packages/02/cc/870a080ea3ec6162d060fd813cee3f56572daaba70e2cc52a118dfc073fe/rhythm-0.2.0dev.tar.gz"
      }
    ],
    "0.3.0dev": [
      {
        "comment_text": "",
        "digests": {
          "md5": "79c68422ca06d21d187f30238caeb095",
          "sha256": "613c43496f11630d969575c1df4cda33bba82e5fb3bb22ae7dfa300dde82de9e"
        },
        "downloads": 2697,
        "filename": "rhythm-0.3.0dev.tar.gz",
        "has_sig": false,
        "md5_digest": "79c68422ca06d21d187f30238caeb095",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31922,
        "upload_time": "2012-07-12T21:49:54",
        "url": "https://files.pythonhosted.org/packages/9d/05/327518c392e21b0eafcd650c1c62a0008cca672c04683de2249cf4a845bc/rhythm-0.3.0dev.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cacc96d6d099b7c5935229759db2c904",
          "sha256": "05a7a557f75f4cba87341cc9e1d776b528d0fcc3064dd15cb0f4b7b24dee8238"
        },
        "downloads": 2011,
        "filename": "rhythm-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cacc96d6d099b7c5935229759db2c904",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41546,
        "upload_time": "2012-08-17T00:42:01",
        "url": "https://files.pythonhosted.org/packages/04/5c/5924a7d2015eb34b1d69674cdd350e3e7f4ba164f205011206be5b8b8969/rhythm-0.4.0.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8919d4c71eda0c9c7e66750223d89671",
          "sha256": "67d2262c38443acb5a502fe4d0c9909144b2c6e19dc5bd840159d5a5c9265be6"
        },
        "downloads": 1849,
        "filename": "rhythm-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8919d4c71eda0c9c7e66750223d89671",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 44671,
        "upload_time": "2012-11-27T21:31:54",
        "url": "https://files.pythonhosted.org/packages/dc/ae/4ae976d5e0f62d25605b0dc38cbe297476c24c1eefa86398dc687a500fa5/rhythm-0.5.0.tar.gz"
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "34cb5c4a831837172939063fc11032f7",
          "sha256": "36c353e6481e8a63d5de642ffb42800e93b7f61d4f45bc1b9ec6293ad928a904"
        },
        "downloads": 1871,
        "filename": "rhythm-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34cb5c4a831837172939063fc11032f7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58789,
        "upload_time": "2013-01-18T23:17:28",
        "url": "https://files.pythonhosted.org/packages/0e/f4/4c7fec1f1e6950e6639f02510eea9e05aa289f60083193241277bd07f20f/rhythm-0.6.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "34cb5c4a831837172939063fc11032f7",
        "sha256": "36c353e6481e8a63d5de642ffb42800e93b7f61d4f45bc1b9ec6293ad928a904"
      },
      "downloads": 1871,
      "filename": "rhythm-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "34cb5c4a831837172939063fc11032f7",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 58789,
      "upload_time": "2013-01-18T23:17:28",
      "url": "https://files.pythonhosted.org/packages/0e/f4/4c7fec1f1e6950e6639f02510eea9e05aa289f60083193241277bd07f20f/rhythm-0.6.0.tar.gz"
    }
  ]
}