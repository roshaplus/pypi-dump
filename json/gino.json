{
  "info": {
    "author": "Fantix King",
    "author_email": "fantix.king@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "====\nGINO\n====\n\n\n.. image:: https://img.shields.io/pypi/v/gino.svg\n        :target: https://pypi.python.org/pypi/gino\n\n.. image:: https://img.shields.io/travis/fantix/gino.svg\n        :target: https://travis-ci.org/fantix/gino\n\n.. image:: https://readthedocs.org/projects/ginorm/badge/?version=latest\n        :target: https://ginorm.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n.. image:: https://pyup.io/repos/github/fantix/gino/shield.svg\n     :target: https://pyup.io/repos/github/fantix/gino/\n     :alt: Updates\n\n\nGINO - GINO Is Not ORM - is an extremely simple Python ORM, using SQLAlchemy_\ncore to define table models, and asyncpg_ to interact with database.\n\n\n* Free software: BSD license\n* Documentation: https://gino.readthedocs.io.\n\nThere's been a lot of words about ORM a.k.a. Object-relational mapping - good\nor bad - as well as a lot of ORM libraries in Python. It is crucial to pick a\nmost suitable one for your project, and for your team. GINO tries to stay in\nthe middle between ORM and non-ORM, offering an extremely simple option.\n\nGINO tries to define database tables with plain old Python objects - they *are*\nnormal Python objects, a rollback doesn't magically change their values. Any\ndatabase operations are explicit. There are no dirty models, no sessions, no\nmagic. You have concrete control to the database, through a convenient object\ninterface. That's it.\n\nGINO depends on asyncpg_, which means it works only for PostgreSQL_ and\nasyncio_, which means Python 3 is required - actually 3.6 required for now.\nBased on SQLAlchemy_, gate to its ecosystem is open - feel free to use e.g.\nAlembic_ to manage your schema changes. And we specially designed a few candies\nfor the Sanic_ server.\n\nUsage\n-----\n\nA piece of code is worth a thousand words:\n\n\n.. code-block:: python\n\n   from gino import Gino\n   from sqlalchemy import Column, BigInteger, Unicode\n\n   db = Gino()\n\n\n   class User(db.Model):\n       __tablename__ = 'users'\n\n       id = Column(BigInteger(), primary_key=True)\n       nickname = Column(Unicode(), default='noname')\n\n\nThis is quite similar to SQLAlchemy ORM, but it is actually SQLAlchemy core:\n\n* `db = Gino()` is actually a `sqlalchemy.MetaData` object\n* `class User` actually defines a `sqlalchemy.Table` at `User.__table__`\n\nOther than that, `User` is just a normal Python object:\n\n\n.. code-block:: python\n\n   u = User()\n   u.id = 7\n   u.id += 2\n   u.nickname = 'fantix'\n\n\nThink as if `User` is defined normally (keep in imagination, not an example):\n\n\n.. code-block:: python\n\n   class User:\n       def __init__(self):\n           self.id = None\n           self.nickname = None\n\n\nHowever on class level, you have access to SQLAlchemy columns, which allows you\nto do SQLAlchemy core programming:\n\n\n.. code-block:: python\n\n   from sqlalchemy import select\n   query = select([User.nickname]).where(User.id == 9)\n\n\nThe `Gino` object offers a SQLAlchemy dialect for asyncpg, allowing to execute\nthe query in asyncpg:\n\n\n.. code-block:: python\n\n   import asyncpg\n   conn = await asyncpg.connect('postgresql://localhost/gino')\n   query, params = db.compile(query)\n   rv = await conn.fetchval(query, *params)\n\n\nAnd GINO offers some sugars:\n\n.. code-block:: python\n\n   u1 = await User.get(9, bind=conn)\n   u2 = await User.create(bind=conn, nickname=u1.nickname))\n\n   async with conn.transaction():\n       query, params = db.compile(User.query.where(User.id > 2))\n       async for u in User.map(conn.cursor(query, *params)):\n           print(u.id, u.nickname)\n\n\nFeatures\n--------\n\n* Declare SQLAlchemy_ core tables with plain model objects, no ORM magic\n* Easily construct queries and execute them through asyncpg_\n\nThere're a few usage examples in the examples directory.\n\n\nContribute\n----------\n\nTo run tests:\n\n.. code-block:: shell\n\n   python setup.py test\n\n\nCredits\n---------\n\nCredit goes to all contributors listed in the AUTHORS file. This project is\ninspired by asyncpgsa_, peewee-async_ and asyncorm_. asyncpg_ and SQLAlchemy_\nas the dependencies did most of the heavy lifting. This package was created\nwith Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n.. _SQLAlchemy: https://www.sqlalchemy.org/\n.. _asyncpg: https://github.com/MagicStack/asyncpg\n.. _PostgreSQL: https://www.postgresql.org/\n.. _asyncio: https://docs.python.org/3/library/asyncio.html\n.. _Alembic: https://bitbucket.org/zzzeek/alembic\n.. _Sanic: https://github.com/channelcat/sanic\n.. _asyncpgsa: https://github.com/CanopyTax/asyncpgsa\n.. _peewee-async: https://github.com/05bit/peewee-async\n.. _asyncorm: https://github.com/monobot/asyncorm\n\n\n=======\nHistory\n=======\n\n0.1.1 (2017-07-25)\n------------------\n\n* Added `db.bind`\n* API changed: parameter `conn` renamed to optional `bind`\n* Delegated asyncpg Pool with `db.create_pool`\n* Internal enhancement and bug fixes\n\n0.1.0 (2017-07-21)\n------------------\n\n* First release on PyPI.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/fantix/gino",
    "keywords": "gino",
    "license": "BSD license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gino",
    "platform": "",
    "project_url": "https://pypi.org/project/gino/",
    "release_url": "https://pypi.org/project/gino/0.2.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "GINO Is Not ORM - a Python ORM on asyncpg and SQLAlchemy core.",
    "version": "0.2.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "68e0236a7cd8de56fb7e06e5b74a85ac",
          "sha256": "017f830b4111ef76effd46b7d31629dd04b98fd473b677550387843b5c47d880"
        },
        "downloads": 0,
        "filename": "gino-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "68e0236a7cd8de56fb7e06e5b74a85ac",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17048,
        "upload_time": "2017-07-22T02:59:19",
        "url": "https://files.pythonhosted.org/packages/78/e3/f8106fda62c5041806f358ae1dd582b4b1907e528879d7cba2c4e624284b/gino-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d842e5fc9b7aecc00feba3a809f00022",
          "sha256": "858027f23e47e074c82f83ceaedb6a97b953955a8c578e4be79f37ca49fdb844"
        },
        "downloads": 0,
        "filename": "gino-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d842e5fc9b7aecc00feba3a809f00022",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19004,
        "upload_time": "2017-07-25T09:13:34",
        "url": "https://files.pythonhosted.org/packages/ea/4c/e532ad9320a815b9ca10af30b638cbf8f8de7c2486f49f2c8e3aaf7836ee/gino-0.1.1.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "626afe5c4bef16bb30d6c98b38f22b34",
          "sha256": "b27662cdfd585f37673e964e8101fc8b7d5f043468594786587a58de99d5d81c"
        },
        "downloads": 0,
        "filename": "gino-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "626afe5c4bef16bb30d6c98b38f22b34",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19285,
        "upload_time": "2017-07-28T06:35:53",
        "url": "https://files.pythonhosted.org/packages/2f/2c/1b1bf5a93c82381d70ddea758f5dad7470ef4f128cbebfacd2c5332f6049/gino-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "045ce30e475fc9e545fa6858b6756f34",
          "sha256": "4e30001413edce5f5245e9b3bdd14b191234ae10799815d4d86268abc2ce2d83"
        },
        "downloads": 0,
        "filename": "gino-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "045ce30e475fc9e545fa6858b6756f34",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19474,
        "upload_time": "2017-07-28T07:07:43",
        "url": "https://files.pythonhosted.org/packages/1b/54/b9ce428ade3d1119f26780c6ac96e1531866b53ad6cb518439564e2d66e9/gino-0.2.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "045ce30e475fc9e545fa6858b6756f34",
        "sha256": "4e30001413edce5f5245e9b3bdd14b191234ae10799815d4d86268abc2ce2d83"
      },
      "downloads": 0,
      "filename": "gino-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "045ce30e475fc9e545fa6858b6756f34",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 19474,
      "upload_time": "2017-07-28T07:07:43",
      "url": "https://files.pythonhosted.org/packages/1b/54/b9ce428ade3d1119f26780c6ac96e1531866b53ad6cb518439564e2d66e9/gino-0.2.1.tar.gz"
    }
  ]
}