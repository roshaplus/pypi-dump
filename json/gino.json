{
  "info": {
    "author": "Fantix King",
    "author_email": "fantix.king@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "====\nGINO\n====\n\n\n.. image:: https://img.shields.io/pypi/v/gino.svg\n        :target: https://pypi.python.org/pypi/gino\n\n.. image:: https://img.shields.io/travis/fantix/gino.svg\n        :target: https://travis-ci.org/fantix/gino\n\n.. image:: https://readthedocs.org/projects/python-gino/badge/?version=latest\n        :target: https://python-gino.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n.. image:: https://pyup.io/repos/github/fantix/gino/shield.svg\n        :target: https://pyup.io/repos/github/fantix/gino/\n        :alt: Updates\n\n.. image:: https://img.shields.io/gitter/room/python-gino/Lobby.svg\n        :target: https://gitter.im/python-gino/Lobby\n        :alt: Gitter chat\n\n\nGINO - GINO Is Not ORM - is an extremely simple Python ORM, using SQLAlchemy_\ncore to define table models, and asyncpg_ to interact with database.\n\n\n* Free software: BSD license\n* Documentation: https://python-gino.readthedocs.io.\n\nThere's been a lot of words about ORM a.k.a. Object-relational mapping - good\nor bad - as well as a lot of ORM libraries in Python. It is crucial to pick a\nmost suitable one for your project, and for your team. GINO tries to stay in\nthe middle between ORM and non-ORM, offering an extremely simple option.\n\nGINO operates database rows with \"plain old Python objects\" - they *are* just\nnormal Python objects, a rollback doesn't magically change their values. Any\ndatabase operations are explicit - it is crystal clear what is done underneath\neach GINO API. There are no dirty models, no sessions, no magic. You have\nconcrete control to the database, through a convenient object interface. That's\nit.\n\nGINO depends on asyncpg_, which means it works only for PostgreSQL_ and\nasyncio_, which means Python 3 is required - actually 3.6 required for now.\nBased on SQLAlchemy_, gate to its ecosystem is open - feel free to use e.g.\nAlembic_ to manage your schema changes. And we specially designed a few candies\nfor the Sanic_ server.\n\n\nExample\n-------\n\nA piece of code is worth a thousand words:\n\n\n.. code-block:: python\n\n   import asyncio\n   from gino import Gino, enable_task_local\n\n   db = Gino()\n\n\n   class User(db.Model):\n       __tablename__ = 'users'\n\n       id = db.Column(db.Integer(), primary_key=True)\n       nickname = db.Column(db.Unicode(), default='noname')\n\n\n   async def main():\n       await db.create_pool('postgresql://localhost/gino')\n\n       # Create object, `id` is assigned by database\n       u1 = await User.create(nickname='fantix')\n       print(u1.id, u1.nickname)  # 1 fantix\n\n       # Retrieve the same row, as a different object\n       u2 = await User.get(u1.id)\n       print(u2.nickname)  # fantix\n\n       # Update affects only database row and the operating object\n       await u2.update(nickname='daisy').apply()\n       print(u2.nickname)  # daisy\n       print(u1.nickname)  # fantix\n\n       # Returns all user objects with \"d\" in their nicknames\n       users = await User.query.where(User.nickname.contains('d')).gino.all()\n\n       # Find one user object, None if not found\n       user = await User.query.where(User.nickname == 'daisy').gino.first()\n\n       # Execute complex statement and return command status\n       status = await User.update.values(\n           nickname='No.' + db.cast(User.id, db.Unicode),\n       ).where(\n           User.id > 10,\n       ).gino.status()\n\n       # Iterate over the results of a large query in a transaction as required\n       async with db.transaction():\n           async for u in User.query.order_by(User.id).gino.iterate():\n               print(u.id, u.nickname)\n\n\n   loop = asyncio.get_event_loop()\n   enable_task_local(loop)\n   loop.run_until_complete(main())\n\nThe code explains a lot, but not everything. Let's go through again briefly.\n\n\nDeclare Models\n--------------\n\nEach model maps to a database table. To define a model, you'll need a ``Gino``\nobject first, usually as a global variable named ``db``. It is actually an\nextended instance of ``sqlalchemy.MetaData``, which can be used in Alembic_ for\nexample. By inheriting from ``db.Model``, you can define database tables in a\ndeclarative way as shown above:\n\n.. code-block:: python\n\n   db = Gino()\n\n   class User(db.Model):\n       __tablename__ = 'users'\n\n       id = db.Column(db.Integer(), primary_key=True)\n       nickname = db.Column(db.Unicode(), default='noname')\n\nNote that ``__tablename__`` is required, GINO suggests singular for model\nnames, and plural for table names. After declaration, access to SQLAlchemy\ncolumns is available on class level, allowing vanilla SQLAlchemy programming\nlike this:\n\n.. code-block:: python\n\n   import sqlalchemy as sa\n\n   sa.select([User.nickname]).where(User.id > 10)\n\nBut on object level, model objects are just normal objects in memory. The only\nconnection to database happens when you explicitly calls a GINO API,\n``user.delete`` for example. Otherwise, any changes made to the object stay in\nmemory only. That said, different objects are isolated from each other, even if\nthey all map to the same database row - modifying one doesn't affect another.\n\nSpeaking of mapping, GINO automatically detects the primary keys and uses them\nto identify the correct row in database. This is no magic, it is only a\n``WHERE`` clause automatically added to the ``UPDATE`` statement when calling\nthe ``user.update().apply`` method, or during ``User.get`` retrieval.\n\n.. code-block:: python\n\n   u = await User.get(1)                      # SELECT * FROM users WHERE id = 1\n   await u.update(nickname='fantix').apply()  # UPDATE users SET ... WHERE id = 1\n   u.id = 2                                   # No SQL here!!\n   await u.update(nickname='fantix').apply()  # UPDATE users SET ... WHERE id = 2\n\nUnder the hood, model values are stored in a dict named ``__values__``. And the\ncolumns you defined are wrapped with special attribute objects, which deliver\nthe ``__values__`` to you on object level, or as column objects on class level.\n\n\nBind Database\n-------------\n\nThough optional, GINO can bind to an asyncpg database connection or pool to\nmake life easier. The most obvious way is to create a database pool with GINO.\n\n.. code-block:: python\n\n   pool = await db.create_pool('postgresql://localhost/gino')\n\nOnce created, the pool is automatically bound to the ``db`` object, therefore\nto all the models too. To unplug the database, just close the pool. This API is\nidentical to the one from asyncpg, so can it be used as a context manager too:\n\n.. code-block:: python\n\n   async with db.create_pool('postgresql://localhost/gino') as pool:\n       # play with pool\n\nOtherwise, you will need to manually do the binding:\n\n.. code-block:: python\n\n   import asyncpg\n\n   pool = await asyncpg.create_pool('postgresql://localhost/gino')\n   db = Gino(pool)\n\n   # or\n   db = Gino()\n   db.bind = pool\n\nIt is theoretically possible to bind to a connection object, but this scenario\nis not normally well tested. And as stated in the beginning, it is possible to\nuse GINO without binding to a database. In such case, you should manually pass\nasyncpg pool or connection object to GINO APIs as the ``bind`` keyword argument:\n\n.. code-block:: python\n\n   import asyncpg\n   conn = await asyncpg.connect('postgresql://localhost/gino')\n   user = await User.get(3, bind=conn)\n\n\nAt last, GINO can be used to only define models and translate SQLAlchemy\nqueries into SQL with its builtin asyncpg dialect:\n\n.. code-block:: python\n\n   query, params = db.compile(User.query.where(User.id == 3))\n   row = await conn.fetchval(query, *params)\n\n\nExecute Queries\n---------------\n\nThere are several levels of API available for use in GINO. On model objects:\n\n.. code-block:: python\n\n   await user.update(nickname='fantix').apply()\n   await user.delete()\n\nPlease note, ``update`` without ``apply`` only update the object in memory,\nwhile ``apply`` flush the changes to database.\n\nOn model class level, to operate objects:\n\n.. code-block:: python\n\n   user = await User.create(nickname='fantix')\n   user = await User.get(9)\n\nOn model class level, to generate queries:\n\n.. code-block:: python\n\n   query = User.query.where(User.id > 10)\n   query = User.select('id', 'nickname')\n   query = User.update.values(nickname='fantix').where(User.id = 6)\n   query = User.delete.where(User.id = 7)\n\nOn query level, GINO adds an extension ``gino`` to run query in place:\n\n.. code-block:: python\n\n   users = await query.gino.all()\n   user = await query.gino.first()\n   user_id = await query.gino.scalar()\n\nThese query APIs are simply delegates to the concrete ones on the ``Gino``\nobject:\n\n.. code-block:: python\n\n   users = await gino.all(query)\n   user = await gino.first(query)\n   user_id = await gino.scalar(query)\n\nIf the database pool is created by ``db.create_pool``, then such APIs are also\navailable on the pool object and connection objects:\n\n.. code-block:: python\n\n   async with db.create_pool('...') as pool:\n       users = await pool.all(query)\n       user = await pool.first(query)\n       user_id = await pool.scalar(query)\n\n       async with pool.acquire() as conn:\n           users = await conn.all(query)\n           user = await conn.first(query)\n           user_id = await conn.scalar(query)\n\n\nTransaction and Context\n-----------------------\n\nIn normal cases when ``db`` is bound to a pool, you can start a transaction\nthrough ``db`` directly:\n\n.. code-block:: python\n\n   async with db.transaction() as (conn, tx):\n       # play within a transaction\n\nAs you can see from the unpacked arguments, ``db.transaction()`` acquired a\nconnection and started a transaction in one go. It is identical to do it\nseparately:\n\n.. code-block:: python\n\n   async with db.acquire() as conn:\n       async with conn.transaction() as tx:\n           # play within a transaction\n\nThere is an alternative to do this without ``async with``, but this may be\nchanged in next version, as discussed in #59. Also, ``tx`` is always ``None``\nfor now.\n\nBecause GINO offers query APIs on not only connections but also model classes\nand objects and even query objects, it would be too much trouble passing\nconnection object around when dealing with transactions. Therefore GINO offers\nan optional feature to automatically manage connection objects, by enabling a\nbuiltin task local hack before any tasks are created:\n\n.. code-block:: python\n\n   from gino import enable_task_local\n   enable_task_local()\n\nThis switch creates a local storage for each coroutine, where ``db.acquire()``\nshall store the connection object. Hence executions within the acquire context\nwill be able to make use of the same connection right in the local storage.\nFurthermore, nested ``db.acquire()`` will simply return the same connection.\nThis allows ``db.transaction()`` to be nested in the same way that asyncpg\n``conn.transaction()`` does it - to use database save points.\n\n.. code-block:: python\n\n   async with db.transaction() as (conn1, tx1):      # BEGIN\n       async with db.transaction() as (conn2, tx2):  # SAVEPOINT ...\n           assert conn1 == conn2\n\nIf nested transactions or reused connections are not expected, you can\nexplicitly use ``db.acquire(reuse=False)`` or ``db.transaction(reuse=False)``\nto borrow new connections from the pool. Non-reused connections are stacked,\nthey will be returned to the pool in the reversed order as they were borrowed.\nLocal storage covers between different tasks that are awaited in a chain, it is\ntheoretically safe in most cases. However it is still some sort of a hack, but\nit would be like this before Python officially supports task local storage in\nPEP 550.\n\n\nSanic Support\n-------------\n\nTo integrate with Sanic_, a few configurations needs to be set in\n``app.config`` (with default value though):\n\n- DB_HOST: if not set, ``localhost``\n- DB_PORT: if not set, ``5432``\n- DB_USER: if not set, ``postgres``\n- DB_PASSWORD: if not set, empty string\n- DB_DATABASE: if not set, ``postgres``\n- DB_POOL_MIN_SIZE: if not set, 5\n- DB_POOL_MAX_SIZE: if not set, 10\n\nAn example:\n\n.. code-block:: python\n\n   from sanic import Sanic\n   from gino.ext.sanic import Gino\n\n   app = Sanic()\n   app.config.DB_HOST = 'localhost'\n   app.config.DB_USER = 'postgres'\n\n   db = Gino()\n   db.init_app(app)\n\n\nAfter ``db.init_app``, a connection pool with configured settings shall be\ncreated and bound to ``db`` when Sanic server is started, and closed on stop.\nFurthermore, a lazy connection context is created on each request, and released\non response. That is to say, within Sanic request handlers, you can directly\naccess db by e.g. ``User.get(1)``, everything else is settled: database pool is\ncreated on server start, connection is lazily borrowed from pool on the first\ndatabase access and shared within the rest of the same request handler, and\nautomatically returned to the pool on response.\n\nPlease be noted that, in the async world, ``await`` may block unpredictably for\na long time. When this world is crossing RDBMS pools and transactions, it is\na very dangerous bite for performance, even causing disasters sometimes.\nTherefore we recommend, during the time enjoying fast development, do pay\nspecial attention to the scope of transactions and borrowed connections, make\nsure that transactions are closed as soon as possible, and connections are not\ntaken for unnecessarily long time. As for the Sanic support, if you want to\nrelease the concrete connection in the request context before response is\nreached, just do it like this:\n\n.. code-block:: python\n\n   await request['connection'].release()\n\n\nOr if you prefer not to use the contextual lazy connection in certain handlers,\nprefer explicitly manage the connection lifetime, you can always borrow a new\nconnection by setting ``reuse=False``:\n\n.. code-block:: python\n\n   async with db.acquire(reuse=False):\n       # new connection context is created\n\n\nOr if you prefer not to use the builtin request-scoped lazy connection at all,\nyou can simply turn it off:\n\n.. code-block:: python\n\n   app.config.DB_USE_CONNECTION_FOR_REQUEST = False\n\n\nJSON Property\n-------------\n\nPostgreSQL started to support native JSON type since 9.2, and became more\nfeature complete in 9.4. JSON is ideal to store varying key-value data. GINO\noffers objective support for this scenario, requiring PostgreSQL 9.5 for now.\n\n.. code-block:: python\n\n   from gino import Gino\n\n   db = Gino()\n\n   class User(db.Model):\n       __tablename__ = 'users'\n\n       id = db.Column(db.Integer(), primary_key=True)\n       profile = db.Column(db.JSONB())\n       nickname = db.StringProperty(default='noname')\n       age = db.IntegerProperty()\n\n``nickname`` and ``age`` look just like normal columns, but they are actually\nkey-value pairs in the ``profile`` column. ``profile`` is the default column\nname for JSON properties, you can specify a different name by offering the\nargument ``column_name`` when defining a JSON property. Actually multiple JSON\ncolumns are allowed, storing different JSON properties as needed. Also, both\n``JSON`` and ``JSONB`` can be used, depending on your choice. For example:\n\n.. code-block:: python\n\n   from gino import Gino\n\n   db = Gino()\n\n   class Article(db.Model):\n       __tablename__ = 'articles'\n\n       id = db.Column(db.Integer(), primary_key=True)\n\n       profile = db.Column(db.JSONB())\n       author = db.StringProperty(default='noname')\n       pub_index = db.IntegerProperty()\n\n       values = db.Column(db.JSON())\n       read_count = db.IntegerProperty(default=0, column_name='values')\n       last_update = db.DateTimeProperty(column_name='values')\n\nJSON properties work like normal columns too:\n\n.. code-block:: python\n\n   # Create with JSON property values\n   u = await User.create(age=18)\n\n   # Default value is immediately available\n   u.nickname = 'Name: ' + u.nickname\n   # identical to: u.update(nickname='Name' + u.nickname)\n\n   # Updating only age, accept clause:\n   await u.update(age=User.age + 2).apply()\n\n\nContribute\n----------\n\nThere are a few tasks in GitHub issues marked as ``help wanted``. Please feel\nfree to take any of them and pull requests are greatly welcome.\n\nTo run tests:\n\n.. code-block:: shell\n\n   python setup.py test\n\n\nCredits\n-------\n\nCredit goes to all contributors listed or not listed in the AUTHORS file. This\nproject is inspired by asyncpgsa_, peewee-async_ and asyncorm_. asyncpg_ and\nSQLAlchemy_ as the dependencies did most of the heavy lifting. This package was\ncreated with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project\ntemplate.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n.. _SQLAlchemy: https://www.sqlalchemy.org/\n.. _asyncpg: https://github.com/MagicStack/asyncpg\n.. _PostgreSQL: https://www.postgresql.org/\n.. _asyncio: https://docs.python.org/3/library/asyncio.html\n.. _Alembic: https://bitbucket.org/zzzeek/alembic\n.. _Sanic: https://github.com/channelcat/sanic\n.. _asyncpgsa: https://github.com/CanopyTax/asyncpgsa\n.. _peewee-async: https://github.com/05bit/peewee-async\n.. _asyncorm: https://github.com/monobot/asyncorm\n\n\n=======\nHistory\n=======\n\n0.5.2 (2017-09-10)\n------------------\n\n* Added missing driver name on dialect (#67)\n* Fixed dialect to support native decimal type (#67)\n\n0.5.1 (2017-09-09)\n------------------\n\nThis is an emergency fix for 0.5.0.\n\n* Reverted the extension, back to pure Python (#60)\n* Used SQLAlchemy ``RowProxy``\n* Added ``first_or_404``\n* Fixed bug that ``GinoPool`` cannot be inherited\n\n0.5.0 (2017-09-03)\n------------------\n\nThis is also version 1.0 beta 1.\n\n* [Breaking] Internal refactor: extracted and isolated a few modules, partially rewritten\n\n  * Extracted CRUD operations\n  * Core operations are moved to ``dialect`` and execution context\n  * Removed ``guess_model``, switched to explicit execution options\n  * Turned ``timeout`` parameter to an execution option\n  * Extracted ``pool``, ``connection`` and ``api`` from ``asyncpg_delegate``\n* Added support for SQLAlchemy execution options, and a few custom options\n* [Breaking] Made `Model.select` return rows by default (#39)\n* Moved `get_or_404` to extensions (#38)\n* Added iterator on model classes (#43)\n* Added Tornado extension (Contributed by Vladimir Goncharov)\n* Added `Model.to_dict` (#47)\n* Added an extension module to update `asyncpg.Record` with processed results\n\n0.4.1 (2017-08-20)\n------------------\n\n* Support ``select`` on model instance\n\n0.4.0 (2017-08-15)\n------------------\n\n* Made ``get_or_404`` more friendly when Sanic is missing (Contributed by Neal Wang in #23 #31)\n* Delegated ``sqlalchemy.__all__`` (Contributed by Neal Wang in #10 #33)\n* [Breaking] Rewrote JSON/JSONB support (#29)\n* Added ``lazy`` parameter on ``db.acquire`` (Contributed by Binghan Li in #32)\n* Added Sanic integration (Contributed by Binghan Li, Tony Wang in #30 #32 #34)\n* Fixed ``iterate`` API to be compatible with asyncpg (#32)\n* Unified exceptions\n* [Breaking] Changed ``update`` API (#29)\n* Bug fixes\n\n0.3.0 (2017-08-07)\n------------------\n\n* Supported ``__table_args__`` (#12)\n* Introduced task local to manage connection in context (#19)\n* Added ``query.gino`` extension for in-place execution\n* Refreshed README (#3)\n* Adopted PEP 487 (Contributed by Tony Wang in #17 #27)\n* Used ``weakref`` on ``__model__`` of table and query (Contributed by Tony Wang)\n* Delegated asyncpg ``timeout`` parameter (Contributed by Neal Wang in #16 #22)\n\n0.2.3 (2017-08-04)\n------------------\n\n* Supported any primary key (Contributed by Tony Wang in #11)\n\n0.2.2 (2017-08-02)\n------------------\n\n* Supported SQLAlchemy result processor\n* Added rich support on JSON/JSONB\n* Bug fixes\n\n0.2.1 (2017-07-28)\n------------------\n\n* Added ``update`` and ``delete`` API\n\n0.2.0 (2017-07-28)\n------------------\n\n* Changed API, no longer reuses asyncpg API\n\n0.1.1 (2017-07-25)\n------------------\n\n* Added ``db.bind``\n* API changed: parameter ``conn`` renamed to optional ``bind``\n* Delegated asyncpg Pool with ``db.create_pool``\n* Internal enhancement and bug fixes\n\n0.1.0 (2017-07-21)\n------------------\n\n* First release on PyPI.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/fantix/gino",
    "keywords": "gino",
    "license": "BSD license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gino",
    "platform": "",
    "project_url": "https://pypi.org/project/gino/",
    "release_url": "https://pypi.org/project/gino/0.5.2/",
    "requires_dist": [
      "asyncpg (~=0.12)",
      "SQLAlchemy (==1.1.14)"
    ],
    "requires_python": "",
    "summary": "GINO Is Not ORM - a Python ORM on asyncpg and SQLAlchemy core.",
    "version": "0.5.2"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "68e0236a7cd8de56fb7e06e5b74a85ac",
          "sha256": "017f830b4111ef76effd46b7d31629dd04b98fd473b677550387843b5c47d880"
        },
        "downloads": 0,
        "filename": "gino-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "68e0236a7cd8de56fb7e06e5b74a85ac",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17048,
        "upload_time": "2017-07-22T02:59:19",
        "url": "https://files.pythonhosted.org/packages/78/e3/f8106fda62c5041806f358ae1dd582b4b1907e528879d7cba2c4e624284b/gino-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d842e5fc9b7aecc00feba3a809f00022",
          "sha256": "858027f23e47e074c82f83ceaedb6a97b953955a8c578e4be79f37ca49fdb844"
        },
        "downloads": 0,
        "filename": "gino-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d842e5fc9b7aecc00feba3a809f00022",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19004,
        "upload_time": "2017-07-25T09:13:34",
        "url": "https://files.pythonhosted.org/packages/ea/4c/e532ad9320a815b9ca10af30b638cbf8f8de7c2486f49f2c8e3aaf7836ee/gino-0.1.1.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "626afe5c4bef16bb30d6c98b38f22b34",
          "sha256": "b27662cdfd585f37673e964e8101fc8b7d5f043468594786587a58de99d5d81c"
        },
        "downloads": 0,
        "filename": "gino-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "626afe5c4bef16bb30d6c98b38f22b34",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19285,
        "upload_time": "2017-07-28T06:35:53",
        "url": "https://files.pythonhosted.org/packages/2f/2c/1b1bf5a93c82381d70ddea758f5dad7470ef4f128cbebfacd2c5332f6049/gino-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "045ce30e475fc9e545fa6858b6756f34",
          "sha256": "4e30001413edce5f5245e9b3bdd14b191234ae10799815d4d86268abc2ce2d83"
        },
        "downloads": 0,
        "filename": "gino-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "045ce30e475fc9e545fa6858b6756f34",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19474,
        "upload_time": "2017-07-28T07:07:43",
        "url": "https://files.pythonhosted.org/packages/1b/54/b9ce428ade3d1119f26780c6ac96e1531866b53ad6cb518439564e2d66e9/gino-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "55cd5a60f2e27bfff2f42e346946614f",
          "sha256": "340d8c0c87869c3396e5505a86d5d1bd249333ef5c02219d072541e6429906b5"
        },
        "downloads": 0,
        "filename": "gino-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "55cd5a60f2e27bfff2f42e346946614f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20580,
        "upload_time": "2017-08-02T02:02:36",
        "url": "https://files.pythonhosted.org/packages/ac/07/a71e5039a2f31b28064e8670b6a3a57fd3015d27d7cd8887836f2414b55c/gino-0.2.2.tar.gz"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b9ef2c953f4939fcdb3af7cc72640828",
          "sha256": "bf4ecc71d5017bd5c4c0e509701efc4a05f49d3c7b0348e2cd459b83f405595b"
        },
        "downloads": 0,
        "filename": "gino-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b9ef2c953f4939fcdb3af7cc72640828",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22413,
        "upload_time": "2017-08-04T03:23:36",
        "url": "https://files.pythonhosted.org/packages/07/ed/a20a7bb30080d858c2600c22c09f61d5057cdec12cc4217b5d5f7e56b182/gino-0.2.3.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0994fde3a8dce61cd89f848dacb710e1",
          "sha256": "211b5cdc6d6c612b969a57a551e5d267e2be147c97e54582e96e91c17c452ce2"
        },
        "downloads": 0,
        "filename": "gino-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0994fde3a8dce61cd89f848dacb710e1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27956,
        "upload_time": "2017-08-07T06:11:57",
        "url": "https://files.pythonhosted.org/packages/6f/ea/7038a98f49a6802a5a8c4f710c309fbc7f52ce4c8a0e3c697ede87bceba0/gino-0.3.0.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a8b2ca88bc3cbd8240d5f2c295f856a9",
          "sha256": "3d86bcee5a90ef8408b784f31df88a161b73cc032ddfb42ab59f27f31a1aa689"
        },
        "downloads": 0,
        "filename": "gino-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a8b2ca88bc3cbd8240d5f2c295f856a9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 34192,
        "upload_time": "2017-08-15T03:59:39",
        "url": "https://files.pythonhosted.org/packages/9a/4a/3c1312241beffb7d1babddbfc74cd491a8c05e28e6937fcb1d8d295ed045/gino-0.4.0.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6276f3b6a943045fb327353143812bb1",
          "sha256": "7aae91c8bcf443c2f547c61fd5afd354687bd74808fb1a06a75b61e28b4b7d1d"
        },
        "downloads": 0,
        "filename": "gino-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6276f3b6a943045fb327353143812bb1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 34300,
        "upload_time": "2017-08-20T11:16:08",
        "url": "https://files.pythonhosted.org/packages/84/c5/1b475ae57b214e4c3f17744824a72e8e2b0d79d6196edadc33f01756295d/gino-0.4.1.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9a5b43ea07df047edba038071bb2beec",
          "sha256": "b13a755b54a6ddaa82dfa50ec307322f9a2cae8fd88559b45823c878b9c55831"
        },
        "downloads": 0,
        "filename": "gino-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9a5b43ea07df047edba038071bb2beec",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 40461,
        "upload_time": "2017-09-03T06:58:10",
        "url": "https://files.pythonhosted.org/packages/c5/dc/0f834a79815cec09550f3d64ea0f932749cf5b4113a5b234e025cc077374/gino-0.5.0.tar.gz"
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ed486eac02bd334ab9c2918ea80ea067",
          "sha256": "69b10ef27bef663b3f9f6e14c2d44ff34ae0dc130bc40baec123478a2df432c4"
        },
        "downloads": 0,
        "filename": "gino-0.5.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ed486eac02bd334ab9c2918ea80ea067",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 36717,
        "upload_time": "2017-09-09T07:40:13",
        "url": "https://files.pythonhosted.org/packages/05/b1/ba5bab363c267d751f69b93992c5362128ca886315982bce12f8650f3405/gino-0.5.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3c149a5f70b6030f60006ea6e55fd22b",
          "sha256": "6e7adb1aed008f407b8d808ee4e34356d49d1d580bd9d384a2d1d750e75637b6"
        },
        "downloads": 0,
        "filename": "gino-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3c149a5f70b6030f60006ea6e55fd22b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41612,
        "upload_time": "2017-09-09T07:40:14",
        "url": "https://files.pythonhosted.org/packages/aa/56/a8077e0001e246064abe3ecb56d54ff8176ce85cd1847af7ffd32074a7b5/gino-0.5.1.tar.gz"
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "369659235d7e7b48e13e6f453bbe1f97",
          "sha256": "fe1f683be037098f62bb65b601abfe7bd5191e800f53e8532be38663c0dfb52a"
        },
        "downloads": 0,
        "filename": "gino-0.5.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "369659235d7e7b48e13e6f453bbe1f97",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 36831,
        "upload_time": "2017-09-10T10:49:17",
        "url": "https://files.pythonhosted.org/packages/c5/93/3a87d80abeca8b76ae3e18a838c3866cc4458a939c3382fbbd6edf7a0a54/gino-0.5.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9241262e28cc518ec1547c498c6c461c",
          "sha256": "5f98a3f183398e0d302e1ee669b1771eed6b612a296b74ee9bb4955f00534761"
        },
        "downloads": 0,
        "filename": "gino-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9241262e28cc518ec1547c498c6c461c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41744,
        "upload_time": "2017-09-10T10:49:19",
        "url": "https://files.pythonhosted.org/packages/28/01/ccac52a50d4f473a11d70595d5eb519c983ed619ddf790c5dc4d49a62d27/gino-0.5.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "369659235d7e7b48e13e6f453bbe1f97",
        "sha256": "fe1f683be037098f62bb65b601abfe7bd5191e800f53e8532be38663c0dfb52a"
      },
      "downloads": 0,
      "filename": "gino-0.5.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "369659235d7e7b48e13e6f453bbe1f97",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 36831,
      "upload_time": "2017-09-10T10:49:17",
      "url": "https://files.pythonhosted.org/packages/c5/93/3a87d80abeca8b76ae3e18a838c3866cc4458a939c3382fbbd6edf7a0a54/gino-0.5.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "9241262e28cc518ec1547c498c6c461c",
        "sha256": "5f98a3f183398e0d302e1ee669b1771eed6b612a296b74ee9bb4955f00534761"
      },
      "downloads": 0,
      "filename": "gino-0.5.2.tar.gz",
      "has_sig": false,
      "md5_digest": "9241262e28cc518ec1547c498c6c461c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 41744,
      "upload_time": "2017-09-10T10:49:19",
      "url": "https://files.pythonhosted.org/packages/28/01/ccac52a50d4f473a11d70595d5eb519c983ed619ddf790c5dc4d49a62d27/gino-0.5.2.tar.gz"
    }
  ]
}