{
  "info": {
    "author": "Andrey Churin",
    "author_email": "aachurin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Pylons",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
    ],
    "description": ".. _Pyramid: http://docs.pylonsproject.org/\n.. _Colander: http://docs.pylonsproject.org/projects/colander/dev/\n.. _Mail: mailto:aachurin@gmail.com\n\nInstallation Instructions\n-------------------------\n\n::\n\n  pip install smallform\n\nBasic Usage\n-----------\n\nThe steps a developer must take to cause a form to be ready to accept are:\n - Define a schema\n - Create a form object\n - Validate a form\n\nDefining A Schema\n-----------------\nThe first step to using Smallform is to create a schema which represents the data structure you wish to capture.\n\nSee `Colander`_ for more information about schema definition.\n\n::\n\n  from colander import SchemaNode, MappingSchema\n  from colander import String, Email, Length\n  \n  class MyScheme(MappingSchema):\n      name = SchemaNode(String(), validator = Length(min=4))\n      email = SchemaNode(String(), validator = Email())\n      password = SchemaNode(String(), validator = Length(min=5))\n      \n  myscheme = MyScheme()\n\nOr, we can create new form with the bound schema using *bind_schema* decorator:\n\n::\n\n  from colander import SchemaNode, MappingSchema\n  from colander import String, Email, Length\n\n  from smallform import bind_schema\n  \n  @bind_schema\n  class MyForm(MappingSchema):\n      name = SchemaNode(String(), validator = Length(min=4))\n      email = SchemaNode(String(), validator = Email())\n      password = SchemaNode(String(), validator = Length(min=5))\n\nCreate A From Object\n--------------------\nTo create a form object, we do this:\n\n::\n\n  from smallform import Form\n  \n  myform = Form(myschema)\n\nOr this, if we using bind_schema to create the form:\n\n::\n\n  myform = MyForm()\n\nAdditionly, we can set default form values:\n\n::\n\n  myform = MyForm(defaults=dict(name='default name'))\n\nValidate A Form\n---------------\nOnce we\u2019ve created a Form object, we can validate it:\n\n::\n\n  values = myform.validate(request.POST)\n  if not myform.errors:\n      # processing values\n      ...\n  else:\n      # processing errors\n\nFurthermore, it\u2019s possible to bind validated field values to an object instance, \nfor example a SQLAlchemy model instance:\n\n::\n\n  obj = myform.bind(MyModel())\n\nWe can also use the parameters *include* and *exclude* to filter any unwanted data:\n\n::\n  \n  obj = myform.bind(MyModel(), exclude=('password',))\n  \nOr\n\n::\n\n  obj = myform.bind(MyModel(), include=('name', 'email',))  \n\nWorking With Errors\n-------------------\nThere are 4 methods available:\n - has_errors\n - get_errors\n - get_first_error\n - add_errors\n\nSchema:\n\n::\n\n  from colander import SchemaNode, MappingSchema, TupleSchema\n  from colander import String, Length\n\n  from smallform import bind_schema\n  \n  class FooSchema(TupleSchema):\n      a = SchemaNode(String())\n      b = SchemaNode(String())\n\n  class BarSchema(MappingSchema):\n      a = SchemaNode(String())\n      b = SchemaNode(String())\n        \n  @bind_schema\n  class MyForm(MappingSchema):\n      foo = FooSchema()\n      bar = BarSchema()\n      baz = SchemaNode(String(), validator = Length(min=5))\n\n**Method has_errors(path)**\n\nThis method returns True if there are errors for the given path:\n\n::\n\n  if myform.has_errors('foo.0'): # string path form\n    ...\n  if myform.has_errors(('foo', 1)): # tuple/list path form\n    ...\n  if myform.has_errors('bar.a'): # string path form\n    ...\n  if myform.has_errors(['bar', 'a']): # tuple/list path form\n    ...\n  if myform.has_errors('baz'):\n    ...\n\n**Method get_errors(path)**\n\nThis method returns list of errors for the given path (None if there are no errors):\n\n::\n\n  errors = myform.get_errors('foo.0') # string path form\n    ...\n  errors = myform.get_errors(('foo', 1)) # tuple/list path form\n    ...\n  errors = myform.get_errors('bar.a') # string path form\n    ...\n  errors = myform.get_errors(['bar', 'a']) # tuple/list path form\n    ...\n  errors = myform.get_errors('baz')\n    ...\n\n**Method get_first_error(path)**\n\nThis method returns the first list item in the error list for the given path (None if there are no errors):\n\n::\n\n  error = myform.get_first_error('foo.0') # string path form\n    ...\n  error = myform.get_first_error(('foo', 1)) # tuple/list path form\n    ...\n  error = myform.get_first_error('bar.a') # string path form\n    ...\n  error = myform.get_first_error(['bar', 'a']) # tuple/list path form\n    ...\n  error = myform.get_first_error('baz')\n    ...\n\n\n**Method add_errors(path, errors or error)**\n\nSometimes it's necessary to make an additional validation:\n\n::\n\n  fields = myform.validate(request.POST)\n  if fields:\n    if fields['password'] != fields['confirm']:\n        myform.add_errors('confirm', _('password and confirm don't match'))\n\n  if myform.errors:\n    ...\n\nUsing A Mako Template\n---------------------\nIn your template:\n\n::\n\n  <form method=\"POST\">\n      <input name=\"name\" type=\"text\" value=\"${form.get('name')}\" />\n      % if form.has_errors('name'):\n        <p>${form.get_first_error('name')}</p>\n      % endif\n      <input name=\"email\" type=\"text\" value=\"${form.get('email')}\" />\n      % if form.has_errors('email'):\n        <p>${form.get_first_error('email')}</p>\n      % endif\n      <input name=\"password\" type=\"password\" value=\"\" />\n      % if form.has_errors('password'):\n        <p>${form.get_first_error('password')}</p>\n      % endif\n  </form>\n\nFeedback\n--------\nIf you found errors or have ideas send me `Mail`_\n\nChanges\n-------\n - Small code and documentation fixes.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "UNKNOWN",
    "keywords": "web pyramid pylons form colander",
    "license": "http://www.apache.org/licenses/LICENSE-2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "smallform",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/smallform/",
    "release_url": "https://pypi.org/project/smallform/0.2/",
    "requires_python": null,
    "summary": "Smallform is very small and simple form utility for Pyramid",
    "version": "0.2"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e856d98d217f76c641372db780609e64",
          "sha256": "75062b2ec5a0e80ebe9ad816c7cfb83abe83281d3e5071e7b1c289fee77c3761"
        },
        "downloads": 2685,
        "filename": "smallform-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e856d98d217f76c641372db780609e64",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4224,
        "upload_time": "2011-03-21T11:57:32",
        "url": "https://files.pythonhosted.org/packages/43/29/9f6fc9f518355172ce6ae627ff634f88d6a6d7c54fb67fbe51d1485e0fe9/smallform-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "54b56e6e80a0d3cc99eb02393a89208f",
          "sha256": "0f37a6284161f9b0a29928bd7b343c04cab4be5b8c53ff9561ebf4ed3be0f9c4"
        },
        "downloads": 2929,
        "filename": "smallform-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "54b56e6e80a0d3cc99eb02393a89208f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5114,
        "upload_time": "2011-03-22T11:57:14",
        "url": "https://files.pythonhosted.org/packages/8d/15/1888df7c0dbcdebf17e98c58406c54702511ca578327638222c3f42e8cd4/smallform-0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "54b56e6e80a0d3cc99eb02393a89208f",
        "sha256": "0f37a6284161f9b0a29928bd7b343c04cab4be5b8c53ff9561ebf4ed3be0f9c4"
      },
      "downloads": 2929,
      "filename": "smallform-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "54b56e6e80a0d3cc99eb02393a89208f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5114,
      "upload_time": "2011-03-22T11:57:14",
      "url": "https://files.pythonhosted.org/packages/8d/15/1888df7c0dbcdebf17e98c58406c54702511ca578327638222c3f42e8cd4/smallform-0.2.tar.gz"
    }
  ]
}