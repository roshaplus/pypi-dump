{
  "info": {
    "author": "Clemens Wolff",
    "author_email": "clemens.wolff+pypi@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Opwen cloudserver\n=================\n\n.. image:: https://travis-ci.org/ascoderu/opwen-cloudserver.svg?branch=master\n  :target: https://travis-ci.org/ascoderu/opwen-cloudserver\n\n.. image:: https://img.shields.io/pypi/v/opwen_email_server.svg\n  :target: https://pypi.python.org/pypi/opwen_email_server/\n\nWhat's this?\n------------\n\nThis repository contains the source code for the Opwen cloud server. Its purpose\nis to connect the `application <https://github.com/ascoderu/opwen-webapp>`_\nrunning on the Opwen Lokole devices to the rest of the world.\n\nThe server has two main responsibilities:\n\n1. Receive emails from the internet that are addressed to Lokole users and\n   forward them to the appropriate Lokole device.\n2. Send new emails created by Lokole users to the rest of the internet.\n\nSystem overview\n---------------\n\n.. image:: docs/system-overview.png\n  :width: 800\n  :align: center\n  :alt: Overview of the Lokole system\n  :target: https://raw.githubusercontent.com/ascoderu/opwen-cloudserver/master/docs/system-overview.png\n\nData exchange format\n--------------------\n\nIn order to communicate between the Opwen cloud server and the Opwen\nweb-application (aka Lokole), a protocol based on gzipped jsonl files uploaded\nto Azure Blob Storage is used. The files contains a JSON object per line.\nEach JSON object describes an email, using the following schema:\n\n.. sourcecode :: json\n\n  {\n    \"sent_at\": \"yyyy-mm-dd HH:MM\",\n    \"to\": [\"email\"],\n    \"cc\": [\"email\"],\n    \"bcc\": [\"email\"],\n    \"from\": \"email\",\n    \"subject\": \"string\",\n    \"body\": \"html\",\n    \"attachments\": [{\"filename\": \"string\", \"content\": \"base64\"}]\n  }\n\nDevelopment setup\n-----------------\n\nFirst, get the source code.\n\n.. sourcecode :: sh\n\n  git clone git@github.com:ascoderu/opwen-cloudserver.git\n  cd opwen-cloudserver\n\nSecond, install the system-level dependencies using your package manager.\n\n.. sourcecode :: sh\n\n  sudo apt-get install -y python3-dev python3-venv openssl-dev jq\n  curl -L https://aka.ms/InstallAzureCli | bash\n  python3 -m pip install sfctl\n\nNext, set up the required Azure resources and environment variables:\n\n.. sourcecode :: sh\n\n  # connect to Azure account\n  az login\n  az account set --subscription \"YOUR_SUBSCRIPTION_ID_HERE\"\n\n  # define client properties\n  client_name=\"$(whoami | tr -dC 'a-zA-Z0-9')\"\n  client_id=\"123456789\"\n\n  # create development Azure resources\n  location=\"westus\"\n  resource_group=\"opwentest${client_name}\"\n  storage_name=\"opwenteststorage${client_name}\"\n  az group create -n ${resource_group} -l ${location} > /dev/null\n  az storage account create -n ${storage_name} -g ${resource_group} -l ${location} --sku Standard_RAGRS > /dev/null\n\n  # setup environment variables\n  storage_key=\"$(az storage account keys list -n ${storage_name} -g ${resource_group} | jq -r '.[0].value')\"\n  cat > .env << EOF\n  LOKOLE_EMAIL_SERVER_AZURE_BLOBS_NAME='${storage_name}'\n  LOKOLE_EMAIL_SERVER_AZURE_QUEUES_NAME='${storage_name}'\n  LOKOLE_EMAIL_SERVER_AZURE_TABLES_NAME='${storage_name}'\n  LOKOLE_CLIENT_AZURE_STORAGE_NAME='${storage_name}'\n  LOKOLE_EMAIL_SERVER_AZURE_BLOBS_KEY='${storage_key}'\n  LOKOLE_EMAIL_SERVER_AZURE_QUEUES_KEY='${storage_key}'\n  LOKOLE_EMAIL_SERVER_AZURE_TABLES_KEY='${storage_key}'\n  LOKOLE_CLIENT_AZURE_STORAGE_KEY='${storage_key}'\n  LOKOLE_DEFAULT_CLIENTS='[{\"id\":\"${client_id}\",\"domain\":\"${client_name}.lokole.ca\"}]'\n  EOF\n\nThird, use the makefile to verify your installation by running the tests and\nstarting up the server. The makefile will automatically install all required\ndependencies into a virtual environment.\n\n.. sourcecode :: sh\n\n  make tests\n  make server\n\nAlternatively, you can also run the entire application stack via Docker:\n\n.. sourcecode :: sh\n\n  export APP_PORT=8080\n  export ENV_FILE=.env\n  export BUILD_TAG=development\n  docker-compose build\n  docker-compose up\n\nThere are OpenAPI specifications that document the functionality of the\napplication and provide references to the entry points into the code\n(look for \"some-api-name-spec.yaml\" files in the repository).\n\nProduction setup\n----------------\n\nFor setting up a new deployment, run the steps below to create a new\n`ServiceFabric cluster <https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-docker-compose>`_\nvia Docker-Compose and deploy the application across the cluster. This only\nneeds to be done once. After that, the cluster is wired-up with continuous\ndelivery via Travis so that whenever a\n`new release <https://github.com/ascoderu/opwen-cloudserver/releases/new>`_\ngets created on Github, the containers are automatically re-built and\ndeployed to the cluster.\n\n.. sourcecode :: sh\n\n  location='eastus'\n  name='opwenserver'\n  deploy_tag='latest'\n  cert_folder=\"$(mktemp -d)\"\n  cluster_size='5'\n  vm_size='Standard_B2S'\n\n  deploy_password=\"FILL ME IN\"\n  appinsights_key=\"SET ME\"\n\n  # create required resources\n  az configure --defaults group=\"${name}\" location=\"${location}\"\n  az group create --name=\"${name}\"\n  az storage account create --sku=standard_lrs --name=\"opwenserverqueues\"\n  az storage account create --sku=standard_lrs --name=\"opwenservertables\"\n  az storage account create --sku=standard_lrs --name=\"opwenserverblobs\"\n  az storage account create --sku=standard_lrs --name=\"opwenclientblobs\"\n\n  # fetch access keys\n  queues_key=$(az storage account keys list --account-name=\"opwenserverqueues\" | jq -r \".[0].value\")\n  tables_key=$(az storage account keys list --account-name=\"opwenservertables\" | jq -r \".[0].value\")\n  blobs_key=$(az storage account keys list --account-name=\"opwenserverblobs\" | jq -r \".[0].value\")\n  clients_key=$(az storage account keys list --account-name=\"opwenclientblobs\" | jq -r \".[0].value\")\n\n  # build the containers to be deployed\n  cat > .env << EOF\n    LOKOLE_EMAIL_SERVER_APPINSIGHTS_KEY=\"${appinsights_key}\"\n    LOKOLE_EMAIL_SERVER_AZURE_QUEUES_NAME=\"opwenserverqueues\"\n    LOKOLE_EMAIL_SERVER_AZURE_QUEUES_KEY=\"${queues_key}\"\n    LOKOLE_EMAIL_SERVER_AZURE_TABLES_NAME=\"opwenservertables\"\n    LOKOLE_EMAIL_SERVER_AZURE_TABLES_KEY=\"${tables_key}\"\n    LOKOLE_EMAIL_SERVER_AZURE_BLOBS_NAME=\"opwenserverblobs\"\n    LOKOLE_EMAIL_SERVER_AZURE_BLOBS_KEY=\"${blobs_key}\"\n    LOKOLE_CLIENT_AZURE_STORAGE_NAME=\"opwenclientblobs\"\n    LOKOLE_CLIENT_AZURE_STORAGE_KEY=\"${clients_key}\"\n  EOF\n  APP_PORT=80 ENV_FILE=.env BUILD_TAG=\"$deploy_tag\" docker-compose config > compose.yml\n  docker-compose -f compose.yml push\n\n  # create a new cluster\n  cluster_host=\"$name.$location.cloudapp.azure.com\"\n  az sf cluster create \\\n    --resource-group \"$name\" --location \"$location\" --certificate-output-folder \"$cert_folder\" \\\n    --certificate-password \"$deploy_password\" --certificate-subject-name \"$cluster_host\" \\\n    --cluster-name \"$name\" --cluster-size \"$cluster_size\" --os UbuntuServer1604 \\\n    --vault-name \"$name\" --vault-resource-group \"$name\" \\\n    --vm-password \"$deploy_password\" --vm-user-name \"$name\" --vm-sku \"$vm_size\"\n\n  # deploy the containers for the application to the cluster\n  cert_file=\"$(ls $cert_folder/*.pem | head -1)\"\n  REQUESTS_CA_BUNDLE=\"$cert_file\" sfctl cluster select --endpoint \"https://$cluster_host:19080\" --pem \"$cert_file\" --no-verify\n  sfctl compose create --deployment-name \"$name\" --file-path compose.yml\n\n  # log some information about the deployment\n  echo \"All done. Keep the following for your records:\"\n  echo \"- Cluster URL: http://$cluster_host\"\n  echo \"- Certificate: $cert_file\"\n\nIf you're setting up a new continuous delivery integration, make sure to\nupdate the secrets archive in Travis to include your cluster certificate\nand environment dotfile since the items included in this repository are\nspecific to the Ascoderu deployment of this repository. For more information,\ntake a look at how to\n`encrypt files with Travis <https://docs.travis-ci.com/user/encrypting-files/>`_.\n\nHow do I...\n-----------\n\nTest the receiving of an email from an external entity like Outlook?\n````````````````````````````````````````````````````````````````````\n\n.. sourcecode :: sh\n\n  # start the server and the worker that processes inbound emails\n  make server &\n  make inbound-store-worker &\n\n  # simulate the Sendgrid service forwarding an email received at the Lokole MX\n  # records to this service\n  # the server will receive the request from Sendgrid and enqueue a message to\n  # process and ingest the newly received raw MIME email\n  # the inbound-store-worker then wakes up, parses the MIME email into a domain\n  # object and stores it in the email datastore\n  curl localhost:8080/api/email/sendgrid/YOUR_CLIENT_ID_HERE -F \"email=YOUR_MIME_EMAIL_HERE\"\n\nTest the Lokole devices uploading emails written on them?\n`````````````````````````````````````````````````````````\n\n.. sourcecode :: sh\n\n  # start the server and the workers that process outbound emails\n  make server &\n  make outbound-store-worker &\n  make outbound-send-worker &\n\n  # create and upload a compressed emails package to Azure just like the Lokole\n  cat \"YOUR_EMAIL_DATA_HERE\" > emailsFromLokole.pack\n  az storage blob upload -f emailsFromLokole.pack -c compressedpackages -n test-resource-id --account-name \"YOUR_ACCOUNT_NAME_HERE\" --account-key \"YOUR_KEY_HERE\"\n\n  # simulate the Lokole device's upload phase of the sync cycle calling out to\n  # the service\n  # the server will receive the Lokole's upload request and enqueue a message to\n  # process and ingest the uploaded emails\n  # the outbound-store-worker then wakes up, retrieves the uploaded emails from\n  # Azure, stores them in the email datastore and enqueues another message to\n  # send the emails to their recipients\n  # the outbound-send-worker then wakes up, retrieves each email to be sent,\n  # formats it into a MIME email and shoots it off to Sendgrid for delivery\n  curl localhost:8080/api/email/lokole/YOUR_CLIENT_ID_HERE -X POST -d '{\"resource_container\":\"compressedpackages\",\"resource_id\":\"test-resource-id\",\"resource_type\":\"azure-blob\"}' -H \"Content-Type: application/json\"\n\nTest the Lokole devices downloading emails sent to them?\n````````````````````````````````````````````````````````\n\n.. sourcecode :: sh\n\n  # start the server\n  make server &\n\n  # simulate the Lokole device's download phase of the sync cycle calling out to\n  # the service\n  # the server will receive the Lokole's download request, fetch all the new\n  # messages sent to the Lokole device since the last request, package them and\n  # upload them to Azure\n  resource_id=$(curl localhost:8080/api/email/lokole/YOUR_CLIENT_ID_HERE -X GET | jq -r '.resource_id')\n\n  # download the compressed emails package that the Lokole device would ingest\n  az storage blob download -f emailsToLokole.pack -c compressedpackages -n ${resource_id} --account-name \"YOUR_ACCOUNT_NAME_HERE\" --account-key \"YOUR_KEY_HERE\"\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ascoderu/opwen-cloudserver",
    "keywords": "",
    "license": "License :: OSI Approved :: Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "opwen_email_server",
    "platform": "",
    "project_url": "https://pypi.org/project/opwen_email_server/",
    "release_url": "https://pypi.org/project/opwen_email_server/0.1.20/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Email server for the Opwen project",
    "version": "0.1.20"
  },
  "releases": {
    "0.1.16": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4da65f0d250e7690c844f023cc6be985",
          "sha256": "98ee4e57c2758ea314ca5c6833e3d851a6213363df33142ceab2d3ec4f4208ef"
        },
        "downloads": -1,
        "filename": "opwen_email_server-0.1.16.tar.gz",
        "has_sig": false,
        "md5_digest": "4da65f0d250e7690c844f023cc6be985",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21066,
        "upload_time": "2017-11-17T16:43:21",
        "url": "https://files.pythonhosted.org/packages/6d/ba/da64077c078c5658e072453185493debd1c6a2315d294c9dd2d6ffd57f6d/opwen_email_server-0.1.16.tar.gz"
      }
    ],
    "0.1.17": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7ff5d7fd890dcfab986254f203c53f2d",
          "sha256": "5385ba974ef6e5cb699ba36ddfd6349036e9b52fe75290c1be518b1886fca91c"
        },
        "downloads": -1,
        "filename": "opwen_email_server-0.1.17.tar.gz",
        "has_sig": false,
        "md5_digest": "7ff5d7fd890dcfab986254f203c53f2d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21180,
        "upload_time": "2017-11-26T04:53:59",
        "url": "https://files.pythonhosted.org/packages/45/9b/03af21e3bc068d9f721a2b9f11c93baaae84a41c6c52860cb2f552bdef80/opwen_email_server-0.1.17.tar.gz"
      }
    ],
    "0.1.18": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6de3063f1957c92764b0c22533ae1f51",
          "sha256": "73229a2e4cdd33b8490f9e00beb4f1338726f553c24c56f9c10729c50d271e66"
        },
        "downloads": -1,
        "filename": "opwen_email_server-0.1.18.tar.gz",
        "has_sig": false,
        "md5_digest": "6de3063f1957c92764b0c22533ae1f51",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21187,
        "upload_time": "2017-11-26T08:06:31",
        "url": "https://files.pythonhosted.org/packages/a4/73/03c2688a6ee5768f6591155576fe3825bfa8509569c4918345647757f7e7/opwen_email_server-0.1.18.tar.gz"
      }
    ],
    "0.1.19": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1ffee9bed68c85d4ef8abfea1c26907d",
          "sha256": "b260049b421771f2ba3d612d12700f46897aa0d70a3f639a4a832468f7fe1ee4"
        },
        "downloads": -1,
        "filename": "opwen_email_server-0.1.19.tar.gz",
        "has_sig": false,
        "md5_digest": "1ffee9bed68c85d4ef8abfea1c26907d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21445,
        "upload_time": "2017-11-27T04:16:35",
        "url": "https://files.pythonhosted.org/packages/78/12/1fa0896d7fe2e93e8853a41017c4b56144c848fce03416615edcd3026ecc/opwen_email_server-0.1.19.tar.gz"
      }
    ],
    "0.1.20": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b0400daf405f29ddce96de2ed4957f88",
          "sha256": "2e169f6200bbdcd25276792617fd63267c13c66948251f6d34c413db7d9cbfb5"
        },
        "downloads": -1,
        "filename": "opwen_email_server-0.1.20.tar.gz",
        "has_sig": false,
        "md5_digest": "b0400daf405f29ddce96de2ed4957f88",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21478,
        "upload_time": "2017-11-27T04:38:24",
        "url": "https://files.pythonhosted.org/packages/d3/7f/9ed3642a63d5bf66364cfb396f73332db4ca60e68260b3417eb6805537d1/opwen_email_server-0.1.20.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b0400daf405f29ddce96de2ed4957f88",
        "sha256": "2e169f6200bbdcd25276792617fd63267c13c66948251f6d34c413db7d9cbfb5"
      },
      "downloads": -1,
      "filename": "opwen_email_server-0.1.20.tar.gz",
      "has_sig": false,
      "md5_digest": "b0400daf405f29ddce96de2ed4957f88",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 21478,
      "upload_time": "2017-11-27T04:38:24",
      "url": "https://files.pythonhosted.org/packages/d3/7f/9ed3642a63d5bf66364cfb396f73332db4ca60e68260b3417eb6805537d1/opwen_email_server-0.1.20.tar.gz"
    }
  ]
}