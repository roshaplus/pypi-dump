{
  "info": {
    "author": "Alexey Isavnin",
    "author_email": "alexey.isavnin@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "AI.CDAS: python interface to `CDAS <http://cdaweb.gsfc.nasa.gov/>`__ data\n=========================================================================\n\nThis library provides access to CDAS database from python in a simple\nand fluid way through `CDAS REST\napi <http://cdaweb.gsfc.nasa.gov/WebServices/REST/>`__. It fetches the\ndata either in `CDF (Common Data Format) <http://cdf.gsfc.nasa.gov/>`__\nor ASCII format and returns it in the form of dictionaries and numpy\narrays.\n\nDependencies\n------------\n\n-  Python >= 2.7 (tested in 2.7 and 3.4)\n-  `numpy <http://www.numpy.org/>`__\n-  `requests <http://docs.python-requests.org/en/latest/>`__\n-  `wget <https://pypi.python.org/pypi/wget>`__\n\nExtra dependencies (at least one of the following)\n--------------------------------------------------\n\n-  `astropy <http://www.astropy.org/>`__\n-  `CDF <http://cdf.gsfc.nasa.gov/>`__ +\n   `spacepy <http://spacepy.lanl.gov/doc/index.html>`__\n\n`Bug tracker <http://bitbucket.org/isavnin/ai.cdas/issues>`__\n-------------------------------------------------------------\n\nChangelog\n---------\n\n1.1.1\n~~~~~\n\n-  Cache cross-compatibility between Python 2 & 3\n-  Namespace packaging\n\n1.1.0\n~~~~~\n\n-  Python 3 support\n-  Date and time inputs changed from strings to python datetime objects\n-  Possibility of caching downloaded data\n-  Possibility of switching off the download progress bar\n\nExamples\n--------\n\n**Example 1**: Retrieving observatory groups and associated instruments\nwhich measure plasma and solar wind:\n\n::\n\n    #!python\n\n    from ai import cdas\n    import json # for pretty output\n\n    obsGroupsAndInstruments = cdas.get_observatory_groups_and_instruments('istp_public', instrumentType='Plasma and Solar Wind')\n    print json.dumps(obsGroupsAndInstruments, indent=4)\n\n**Example 2**: Getting STEREO-A datasets using regular expressions for\ndataset id and label:\n\n::\n\n    #!python\n\n    from ai import cdas\n    import json # for pretty output\n\n    datasets = cdas.get_datasets('istp_public', idPattern='STA.*', labelPattern='.*STEREO.*')\n    print json.dumps(datasets, indent=4)\n\n**Example 3**: Fetching a list of variables in one of STEREO datasets:\n\n::\n\n    #!python\n\n    from ai import cdas\n    import json # for pretty output\n\n    variables = cdas.get_variables('istp_public', 'STA_L1_MAGB_RTN')\n    print json.dumps(variables, indent=4)\n\n**Example 4**: This snippet of code gets magnetic field data from\nSTEREO-A spacecraft for 01.01.2010 and plots it (requires pylab, which\nis part of scipy):\n\n::\n\n    #!python\n\n    from ai import cdas\n    from datetime import datetime\n    import pylab\n\n    data = cdas.get_data('sp_phys', 'STA_L1_MAG_RTN', datetime(2010,1,1), datetime(2010,1,1,23,59,59), ['BFIELD'])\n    pylab.plot(data['EPOCH'], data['BTOTAL'])\n    pylab.show()\n\n**Example 5**: This snippet of code gets magnetic field data from\nSTEREO-A spacecraft for 01.01.2010 and saves it to cache directory. The\nnext time the same data is requested it is taken from cache without\ndownloading:\n\n::\n\n    #!python\n\n    from ai import cdas\n    from datetime import datetime\n\n    cdas.set_cache(True, 'path_to_cache_dir')\n    # this data is downloaded from CDAS\n    data = cdas.get_data('sp_phys', 'STA_L1_MAG_RTN', datetime(2010,1,1), datetime(2010,1,1,23,59,59), ['BFIELD'])\n    # this data is taken from cache\n    data = cdas.get_data('sp_phys', 'STA_L1_MAG_RTN', datetime(2010,1,1), datetime(2010,1,1,23,59,59), ['BFIELD'])\n\nDocumentation\n-------------\n\nThe functions implemented in AI.CDAS library follow strictly the\ndescription of CDAS REST web-service documented\n`here <http://cdaweb.gsfc.nasa.gov/WebServices/REST/>`__.\n\nFirst, AI.CDAS library has to be imported:\n\n::\n\n    #!python\n\n    from ai import cdas\n\nDataviews\n~~~~~~~~~\n\nProvides descriptions of dataviews that are available from CDAS.\n\n::\n\n    #!python\n\n    dataviews = cdas.get_dataviews()\n\nObservatory groups\n~~~~~~~~~~~~~~~~~~\n\nProvides descriptions of observatory groups that are available from\nCDAS.\n\n::\n\n    #!python\n\n    observatoryGroups = cdas.get_observatory_groups(dataview, instrumentType=None)\n\n**instrumentType** is an instrument type value\n(/InstrumentTypes/InstrumentTypeDescription/Name) from those returned by\na *cdas.get\\_instrument\\_types* request. Omitting this parameter\nindicates that no **observatoryGroups** are eliminated based upon their\n**instrumentType** value.\n\nFor example, the following snippet of code gets the observatory groups\nwith instrument type 'Plasma and Solar Wind' from the dataview 'Public\ndata from current space physics missions' (*istp\\_public*):\n\n::\n\n    #!python\n\n    observatoryGroups = cdas.get_observatory_groups('istp_public', instrumentType='Plasma and Solar Wind')\n\nInstrument types\n~~~~~~~~~~~~~~~~\n\nProvides descriptions of the instrument types that are available from\nCDAS.\n\n::\n\n    #!python\n\n    instrumentTypes = cdas.get_instrument_types(dataview, observatory=None, observatoryGroup=None)\n\n**observatory** is an observatory group value\n(/Observatories/ObservatoryDescription/Name) from those returned by a\n*cdas.get\\_observatories* request. Omitting this parameter indicates\nthat no **instrumentTypes** are eliminated based upon their\n**observatory** value.\n\n**observatoryGroup** is an observatory group value\n(/ObservatoryGroups/ObservatoryGroupDescription/Name) from those\nreturned by a *cdas.get\\_observatory\\_groups* request. Omitting this\nparameter indicates that no **instrumentTypes** are eliminated based\nupon their **observatoryGroup** value.\n\nInstruments\n~~~~~~~~~~~\n\nProvides descriptions of the instrument that are available from CDAS.\n\n::\n\n    #!python\n\n    instruments = cdas.get_instruments(dataview, observatory=None)\n\n**observatory** is an observatory value\n(/Observatories/ObservatoryDescription/Name) from those returned by a\n*cdas.get\\_observatories* request. Omitting this parameter indicates\nthat no **instruments** are eliminated based upon their **observatory**\nvalue.\n\nObservatories\n~~~~~~~~~~~~~\n\nProvides descriptions of the observatories that are available from CDAS.\n\n::\n\n    #!python\n\n    observatories = cdas.get_observatories(dataview, instrument=None, instrumentType=None)\n\n**instrument** is an instrument value\n(/Instruments/InstrumentDescription/Name) from those returned by a\n*cdas.get\\_instruments* request. Omitting this parameter indicates that\nno **observatories** are eliminated based upon their **instrument**\nvalue.\n\n**instrumentType** is an instrument type value\n(/InstrumentTypes/InstrumentTypeDescription/Name) from those returned by\na *cdas.get\\_instrument\\_types* request. Omitting this parameter\nindicates that no **observatories** are eliminated based upon their\n**instrumentType** value.\n\nObservatory groups and instruments\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nProvides descriptions of the observatory groups (and associated\ninstruments) that are available from CDAS. This is a\nconvenience/performance alternative to making multiple calls to\n*cdas.get\\_observatory\\_groups*, *cdas.get\\_observatories*, and\n*cdas.get\\_instruments*.\n\n::\n\n    #!python\n\n    observatoryGroupsAndInstruments = cdas.get_observatory_groups_and_instruments(dataview, instrumentType=None)\n\n**instrumentType** is an instrument type value\n(/InstrumentTypes/InstrumentTypeDescription/Name) from those returned by\na *cdas.get\\_instrument\\_types* request. Omitting this parameter\nindicates that no **observatoryGroupsAndInstruments** are eliminated\nbased upon their **instrumentType** value.\n\nDatasets\n~~~~~~~~\n\nProvides descriptions of the datasets that are available from CDAS.\n\n::\n\n    #!python\n\n    datasets = cdas.get_datasets(dataview, observatoryGroup=None, instrumentType=None, observatory=None, instrument=None, startDate=None, stopDate=None, idPattern=None, labelPattern=None, notesPattern=None)\n\n**observatoryGroup** is an observatory group value\n(/ObservatoryGroups/ObservatoryGroupDescription/Name) from those\nreturned by a *cdas.get\\_observatory\\_groups* request. Omitting this\nparameter indicates that no **datasets** are eliminated based upon their\n**observatoryGroup** value.\n\n**instrumentType** is an instrument type value\n(/InstrumentTypes/InstrumentTypeDescription/Name) from those returned by\na *cdas.get\\_instrument\\_types* request. Omitting this parameter\nindicates that no **datasets** are eliminated based upon their\n**instrumentType** value.\n\n**observatory** is an observatory group value\n(/Observatories/ObservatoryDescription/Name) from those returned by a\n*cdas.get\\_observatories* request. Omitting this parameter indicates\nthat no **datasets** are eliminated based upon their **observatory**\nvalue.\n\n**instrument** is an instrument value\n(/Instruments/InstrumentDescription/Name) from those returned by a\n*cdas.get\\_instruments* request. Omitting this parameter indicates that\nno **datasets** are eliminated based upon their **instrument** value.\n\n**startDate** is a python datetime object specifying the start of a time\ninterval. If this parameter is ommited, the time interval will begin\ninfinitely in the past.\n\n**stopDate** is a python datetime object specifying the end of a time\ninterval. If this parameter is omitted, the time interval will end\ninfinitely in the future.\n\n**idPattern** is a java.util.regex compatible regular expression that\nmust match the dataset's identifier value. Omitting this parameter is\nequivalent to \".\\*\".\n\n**labelPattern** is a java.util.regex compatible regular expression that\nmust match the dataset's label text. Omitting this parameter is\nequivalent to \".\\*\". Embedded matching flag expressions (e.g., (?i) for\ncase insensitive match mode) are supported and likely to be useful in\nthis case.\n\n**notesPattern** is a java.util.regex compatible regular expression that\nmust match the dataset's notes text. Omitting this parameter is\nequivalent to \".\\*\". Embedded matching flag expressions (e.g., (?s) for\ndotall match mode) are supported and likely to be useful in this case.\n\nInventory\n~~~~~~~~~\n\nProvides descriptions of the data inventory that is available within a\ndataset.\n\n::\n\n    #!python\n\n    inventory = cdas.get_inventory(dataview, dataset)\n\nVariables\n~~~~~~~~~\n\nProvides descriptions of the variables that is available from a dataset.\n\n::\n\n    #!python\n\n    variables = cdas.get_variables(dataview, dataset)\n\nCache\n~~~~~\n\nSets the data cache.\n\n::\n\n    #!python\n\n    cdas.set_cache(cache=False, directory=None):\n\n**cache** is a flag for choosing whether a cache should be used or not.\n\n**directory** is path to cache directory. The user is responsible for\ncreating a valid directory.\n\nData\n~~~~\n\nProvides data from a dataset.\n\n::\n\n    #!python\n\n    data = cdas.get_data(dataview, dataset, startTime, stopTime, variables, cdf=True, bar=True)\n\n**startTime** is a python datetime object specifying the beginning time\nof an interval.\n\n**stopTime** is python datetime object specifying the ending time of an\ninterval\n\n**variables** is the comma separated list of variable names identifying\nthe data to get. The names should be from those returned by the\n*cdas.get\\_variables* operation. At least one variable name must be\nspecified.\n\n**cdf** is the flag for choosing either CDF of ASCII format for data\ndownload. If you have CDF library and SpacePy installed it is highly\nrecommended to use cdf=True always. CDF files are smaller and are faster\nto download. If you do not have CDF+SpacePy but you have AstroPy library\ninstalled you can download data in ASCII format using cdf=False.\n\n**bar** is the flag for choosing whether the download progress bar is\ndisplayed or not.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/isavnin/ai.cdas",
    "keywords": "coordinated data analysis web cdaweb cdas spdf research space physics data facility nasa science",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ai.cdas",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/ai.cdas/",
    "release_url": "https://pypi.org/project/ai.cdas/1.1.1/",
    "requires_python": "",
    "summary": "Python interface to CDAS data via REST API",
    "version": "1.1.1"
  },
  "releases": {
    "1.0.0": [],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fa0f47fe83dfe1bd153de6e30bc1bc47",
          "sha256": "4ebefaeb956bb5eab081f47ed9052e86554af98553dd554dcaaa025a34853f88"
        },
        "downloads": 776,
        "filename": "ai.cdas-1.0.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "fa0f47fe83dfe1bd153de6e30bc1bc47",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 9555,
        "upload_time": "2015-10-20T09:39:57",
        "url": "https://files.pythonhosted.org/packages/75/62/94fa33a62f2b0a5bdfd4a38ae5a5bc6c1f6f8ce8bec384ca2f929aa3baea/ai.cdas-1.0.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "76ba89fc49736ee081975dc378499217",
          "sha256": "740e819ddf80a9cf17908bc1bb5b37f082779cc010a96fa2b500065834298444"
        },
        "downloads": 697,
        "filename": "ai.cdas-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "76ba89fc49736ee081975dc378499217",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7184,
        "upload_time": "2015-10-20T09:40:11",
        "url": "https://files.pythonhosted.org/packages/c9/8d/fd00a6114a2c38318d899a2d524b64cf8568e1ad2e11689f6bb5c21f79d7/ai.cdas-1.0.1.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "31cef231b79b594039a546584241ede4",
          "sha256": "8e1eaf3b054d16bcfcc95568ecdd7acc988c82d5fe61038d61ec0bdbba934d39"
        },
        "downloads": 345,
        "filename": "ai.cdas-1.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31cef231b79b594039a546584241ede4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 10832,
        "upload_time": "2016-01-20T09:44:37",
        "url": "https://files.pythonhosted.org/packages/cc/c3/99b28ff99416a2e3cc07fb2d4a6a411bc23643f114c041a2c6d587907810/ai.cdas-1.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0a9ec0f992d4cbf55483572bd0eeba84",
          "sha256": "cd62cf792bbb76ea0919403a99ea61bffb7ca2ffea994701ceb79662bbb1311d"
        },
        "downloads": 350,
        "filename": "ai.cdas-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0a9ec0f992d4cbf55483572bd0eeba84",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9734,
        "upload_time": "2016-01-20T09:44:46",
        "url": "https://files.pythonhosted.org/packages/00/0a/daf624f7a1c27f355a738e3e9c5f11ba345d9b765445ccc79f8f9edd2449/ai.cdas-1.1.0.tar.gz"
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "89c22b14b68d7c63d0f32c8cc4e884ae",
          "sha256": "09a4db4d71438881083f6ee2fab31af8cb356f4f999fecc7ca7b352cd1a91d79"
        },
        "downloads": 497,
        "filename": "ai.cdas-1.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "89c22b14b68d7c63d0f32c8cc4e884ae",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 11201,
        "upload_time": "2016-02-05T13:37:35",
        "url": "https://files.pythonhosted.org/packages/f7/b8/ca7251f174fb30ad05eb62e419700591f74102b461d61737456a91292757/ai.cdas-1.1.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0bf953c92f619706e7d6c1aa3be8939d",
          "sha256": "4bee8c7e2033dfebfdf1671eea6f3bc4cbc08e3c407ef0df5c9ee4c6adc1ea04"
        },
        "downloads": 213,
        "filename": "ai.cdas-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0bf953c92f619706e7d6c1aa3be8939d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10181,
        "upload_time": "2016-02-05T13:37:41",
        "url": "https://files.pythonhosted.org/packages/32/63/3a91dae3051398f8e673acb2f1d6cafe31146a828e9965878f3bf0d1e04e/ai.cdas-1.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "89c22b14b68d7c63d0f32c8cc4e884ae",
        "sha256": "09a4db4d71438881083f6ee2fab31af8cb356f4f999fecc7ca7b352cd1a91d79"
      },
      "downloads": 497,
      "filename": "ai.cdas-1.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "89c22b14b68d7c63d0f32c8cc4e884ae",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 11201,
      "upload_time": "2016-02-05T13:37:35",
      "url": "https://files.pythonhosted.org/packages/f7/b8/ca7251f174fb30ad05eb62e419700591f74102b461d61737456a91292757/ai.cdas-1.1.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "0bf953c92f619706e7d6c1aa3be8939d",
        "sha256": "4bee8c7e2033dfebfdf1671eea6f3bc4cbc08e3c407ef0df5c9ee4c6adc1ea04"
      },
      "downloads": 213,
      "filename": "ai.cdas-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0bf953c92f619706e7d6c1aa3be8939d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10181,
      "upload_time": "2016-02-05T13:37:41",
      "url": "https://files.pythonhosted.org/packages/32/63/3a91dae3051398f8e673acb2f1d6cafe31146a828e9965878f3bf0d1e04e/ai.cdas-1.1.1.tar.gz"
    }
  ]
}