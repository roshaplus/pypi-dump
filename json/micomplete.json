{
  "info": {
    "author": "Eric Hugoson",
    "author_email": "eric@hugoson.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "==============\n**miComplete**\n==============\n\n- Eric Hugoson (eric@hugoson.org / hugoson@evolbio.mpg.de / @EricHugo)\n- Lionel Guy (guy.lionel@gmail.com / lionel.guy@imbim.uu.se / @LionelGuy)\n \n\nIntroduction\n----------------\nWith the increasing rate of the production of genomics data, particularly metagenomic data, there is need for more and faster quality control of resulting assembled genomes. An increasing usage of \nmetagenome assembled genomes (MAGs) means often working with incomplete genomes, which can be acceptable providing the researcher is cognizant of this. Therefore there is a clear use for software \nable to rapidly provide the stats that describe the quality and completeness of the genomes or genomic bins of interest.\n\nmiComplete allows a user to provide a list of genomes or genomic bins to retrieve some basic statistics regarding the given genomes (size, GC-content, N- and L50, N- and L90). Further a set of marker genes \nin HMM format can be provided to also retrieve completeness and redundance of those markers in each genome. Additionally, a set of weights for the marker genes can be provided to also retrieve the\nweighted versions of completeness and redundance which can inform the user a bit more of the actual state completeness (see description). Alternatively, the user can calculate new weights for any given set\nof marker genes provided.\n\nmiComplete is still in a relatively early state of development, there are a few missing features and bugs are very much expected. Feedback, bug reports, and feature requests are welcome through Bitbucket's \n`issue system <https://bitbucket.org/evolegiolab/micomplete/issues>`_).\n\nDescription\n---------------\nmiComplete is a compact software aimed at the rapid determining of the quality of assembled genomes, often metagenome assembled. miComplete also aims at providing a more reliable completeness and redundance \nmetric via a system of weighting the impact of different marker genes presence or absence differently.\n\nCompleteness\n^^^^^^^^^^^^^^^\nIn miComplete completeness is calculated based on the presence/absence a set of marker genes provided as a set of HMMs. The presence or absence of the marker genes is determined by HMMER3 (see dependencies) \nif the hit reported is below the cutoff e-value provided. Duplicated marker genes are also gathered, and found duplications are reported as redundance, but only if the e-value of the reported duplicated \nhit is at least equal to or less than the square root of the the best hit (though this can easily be altered as desired by the user).\n\nWeights\n^^^^^^^^^^^\nNot all marker genes are equal in determining the completeness of a genome. Some genes associate closely together within a genome (not in the least genes in operons), and thus viewing two genes that typically \nassociate together within an operon as providing the same completeness information as two unrelated genes would be misleading. miComplete is able to calculate a weighted version of completeness and redundance \nthat attempts to factor in how closely the provided marker genes typically associate with other provided marker genes.\n\nLinkage\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nWeights can be calculated for any given set of marker genes in miComplete. This is can be done by a user by providing a set of reference genomes (note that these need to be single contig chromosomes). \nThe reference genomes can be any set that the user wishes, but as general rule the larger and more diverse number of genomes the better weights. At the end of the run a boxplot of the distribution of \nweights for all markers is produced.\n\nDependencies\n--------------\nPython (>=2.7 / >=3.4)\n\n\nExternal software\n^^^^^^^^^^^^^^^^^^^\nExecutables should be available in the user's ``$PATH``.\n\nHMMER3\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nHMMER: biosequence analysis using profile hidden Markov models, by Sean Eddy and coworkers. Tested with v. 3.1b2. Available from <http://hmmer.org/>.\n\nprodigal\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nA gene prediction software by Doug Hyatt. Tested with v. 2.6.3. Download at: \n<https://github.com/hyattpd/Prodigal>\n\nPython libraries\n^^^^^^^^^^^^^^^^^^^\nIf built from the package these will be installed automatically, otherwise can easily be installed using ``pip`` (`Install pip <https://pip.pypa.io/en/stable/installing/>`_).\n\nRequired\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\n- Biopython (>= 1.70) (``$ pip install biopython``)\n- Numpy (>= 1.13.1) (``$ pip install numpy``)\n- Matplotlib (>= 2.0.2) (``$ pip install matplotlib``)\n- Termcolor (>= 1.1.0) (``$ pip install termcolor``)\n\n\nInstallation\n--------------\n\nPython package\n^^^^^^^^^^^^^^^^^^^\n\nmiComplete can easily be installed along with all python dependencies::\n\n   $ pip install micomplete\n\nAssuming that the python bin is in your ``$PATH``, can then be run as::\n\n   $ miComplete\n\nGit\n^^^^^^^^^^^^^^^^^^^\n1. Choose an appropriate location, e.g. your home::\n\n   $ cd $HOME\n   \n2. Clone the latest version of the repository::\n   \n   $ git clone http://bitbucket.org/evolegiolab/micomplete.git\n\n3. Create symlink to some directory in your ``$PATH`` (in this example ``$HOME/bin``)::\n\n   $ cd micomplete\n   $ ls micomplete\n   $ ln -s $(realpath micomplete/micomplete.py $HOME/bin/miComplete)\n   \n3. Optionally, add the folder ``micomplete`` in your ``PATH``. The scripts should be kept at their original location.\n\nUsage\n--------------\n\nPositional arguments\n^^^^^^^^^^^^^^^^^^^^^^^\n\n   A file of sequence(s) along with type (fna, faa, gbk) provided in a tabular format\n\nThe file has to contain per line both a path (relative or absolute) to a genomic file as well as the type (separated by a tab)::\n\n   /seq/genomic_sources/e_coli.fna   fna\n   /seq/genomic_sources/l_pneumophila.gbk   gbk\n   (...)\n\nOptional arguments\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n   -h, --help          show help message and exit\n   -c, --completeness  Do completeness check (also requires a set of HMMs to have been provided)\n   --hlist             Write list of Present, Absent and Duplicated markers for each organism to file\n   --hmms HMMS         Specifies a set of HMMs to be used for completeness check or linkage analysis\n   --weights WEIGHTS   Specify a set of weights for the HMMs specified, (optional)\n   --linkage           Specifies that the provided sequences should be used to calculate the weights of the provided HMMs\n   --evalue EVALUE     Specify e-value cutoff to be used for completeness check, default=1e-10\n   --cutoff CUTOFF     Specify cutoff percentage of markers required to be present in genome for it be included in linkage calculat. Default = 0.9\n   --threads THREADS   Specify number of threads to be used in parallel\n   --log LOG           Log name (default=miComplete.log)\n   -v, --verbose       Enable verbose logging\n   --debug             Debug mode\n   \nExamples\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nSequence tab file, test_set.tab::\n\n   test_set_common_fna/klebsiella_pneumoniae.fna   fna\n   test_set_common_fna/pseudonomonas_aeruginosa.fna        fna\n   test_set_common_fna/escherichia_coli.fna        fna\n   test_set_common_fna/salmonella_enterica.fna     fna\n   \nExample 1 - Basic stats\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nThis example merely produces basic information about the given sequences::\n\n   $ miComplete test_set.tab\n   Name\tLength\tGC-content\tN50\tL50\tN90\tL90\n   klebsiella_pneumoniae\t5682322\t57.12\t5333942\t1\t5333942\t1\n   pseudonomonas_aeruginosa\t6264404\t66.56\t6264404\t1\t6264404\t1\n   escherichia_coli\t4641652\t50.79\t4641652\t1\t4641652\t1\n   salmonella_enterica\t5133713\t51.87\t4809037\t1\t4809037\t1\n   \nmiComplete prints result to stdout in tabular format, this can favourably be redirected towards a file with a pipe and examined with spreadsheet reader. ::\n\n   $ miComplete test_set.tab > results.tab\n\nExample 2 - Completeness\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nThis example will produce the same basic statistics, but also completeness and redundance::\n\n   $ miComplete test_set.tab -c --hmms share/Bact139.hmm\n   Name\tLength\tGC-content\tPresent Markers\tCompleteness\tRedundance\tN50\tL50\tN90\tL90\n   escherichia_coli\t4641652\t50.79\t139\t1.000\t1.000\t4641652\t1\t4641652\t1\n   salmonella_enterica\t5133713\t51.87\t138\t0.993\t1.000\t4809037\t1\t4809037\t1\n   klebsiella_pneumoniae\t5682322\t57.12\t136\t0.978\t1.000\t5333942\t1\t5333942\t1\n   pseudonomonas_aeruginosa\t6264404\t66.56\t135\t0.971\t1.000\t6264404   1\t6264404\t1\n\nThat is great, but the run time is starting to increase significantly since we have to translate four genomes to proteomes. \nWe can speed up the process by running all four parallel with ``--threads``::\n\n   $ miComplete test_set.tab -c --hmms share/Bact139.hmm --threads 4 > results.tab\n   \nExample 3 - Weighted completeness\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nThis example will also produce the weighted completeness::\n\n   $ miComplete test_set.tab -c --hmms share/Bact139.hmm --weights share/Bact139.weights --threads 4\n   Name\tLength\tGC-content\tPresent Markers\tCompleteness\tRedundance\tCompletenessW\tRedundanceW\tN50\tL50\tN90\tL90\n   escherichia_coli\t4641652\t50.79\t139\t1.000\t1.000\t1.000\t1.000\t4641652\t1\t4641652\t1\n   salmonella_enterica\t5133713\t51.87\t138\t0.993\t1.000\t0.991\t1.000\t4809037\t1\t4809037\t1\n   klebsiella_pneumoniae\t5682322\t57.12\t136\t0.978\t1.000\t0.982\t1.000\t5333942\t1\t5333942\t1\n   pseudonomonas_aeruginosa\t6264404\t66.56\t135\t0.971\t1.000\t0.965\t1.000\t6264404\t1\t6264404\t1\n\nExample 4 - Creating weights\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nFinally we will create our own set of weights given a set of marker genes for which we do not already have weights::\n\n   $ miComplete test_set.tab -c --hmms share/Bact109.hmm --linkage --threads 4 > Bact109.weights\n\nAlso produces a box plot of the distribution of weights for each marker gene.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/evolegiolab/micomplete",
    "keywords": "bioinformatics completeness metagenomics",
    "license": "GNU General Public License v3 or later (G  PLv3+)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "micomplete",
    "platform": "",
    "project_url": "https://pypi.org/project/micomplete/",
    "release_url": "https://pypi.org/project/micomplete/0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Quality control of assembled genomes",
    "version": "0.2"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d6b80cc569e899819fd5a28d08861acf",
          "sha256": "937412558ebe705e79e281deed0f6a74603ab7b6c839d503e26c787190631a67"
        },
        "downloads": 0,
        "filename": "micomplete-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d6b80cc569e899819fd5a28d08861acf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14600158,
        "upload_time": "2017-07-29T23:05:28",
        "url": "https://files.pythonhosted.org/packages/75/5e/4511555002ee96c6c4a80da5c1eadff24431360f3678673e1febd3eff5bc/micomplete-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b5de70438d6c5ab50b912e2bf7a7f639",
          "sha256": "aa1b02f19728e42d3981adc587f6375214fdd8800ec6130b83b6620b00647546"
        },
        "downloads": 0,
        "filename": "micomplete-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b5de70438d6c5ab50b912e2bf7a7f639",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14604817,
        "upload_time": "2017-09-04T15:07:56",
        "url": "https://files.pythonhosted.org/packages/36/48/019a9263015967703bb05e8b9e7ad86cbc731a5e0787461d8533d132ed4e/micomplete-0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b5de70438d6c5ab50b912e2bf7a7f639",
        "sha256": "aa1b02f19728e42d3981adc587f6375214fdd8800ec6130b83b6620b00647546"
      },
      "downloads": 0,
      "filename": "micomplete-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b5de70438d6c5ab50b912e2bf7a7f639",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 14604817,
      "upload_time": "2017-09-04T15:07:56",
      "url": "https://files.pythonhosted.org/packages/36/48/019a9263015967703bb05e8b9e7ad86cbc731a5e0787461d8533d132ed4e/micomplete-0.2.tar.gz"
    }
  ]
}