{
  "info": {
    "author": "Tom Wiesing",
    "author_email": "tkw01536@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Utilities"
    ],
    "description": "GitManager\n==========\n\n|Build Status| |PyPI version|\n\nA script that can handle multiple Git repositories locally. Written in\nPython, supports version 3.5 and upwards.\n\nInstallation\n------------\n\nMake sure python is installed, then run\n\n.. code:: bash\n\n    python setup.py install\n\nor\n\n.. code:: bash\n\n    pip install git_manager\n\nto install the package. This will make it available by running\n:code:`git-manager` (or :code:`git manager`).\n\nUsage\n-----\n\nGit-Manager has different commands it provides:\n\n1.  :code:`git-manager setup [pattern]` \u2013 Sets up all repositories as\n    configured in the Configuration file.\n2.  :code:`git-manager clone` \u2013 Clones a repository to a location determined\n    by the repository url and the root directory. For example:\n    :code:`git manager clone --save https://github.com/tkw1536/GitManager`\n3.  :code:`git-manager fetch [pattern]` \u2013 Updates all local repositories by\n    fetching all data from the remotes.\n4.  :code:`git-manager pull [pattern]` \u2013 Updates all local repositories by\n    pulling all repositories.\n5.  :code:`git-manager push [pattern]` \u2013 Pushes all repositories to the\n    remote.\n6.  :code:`git-manager ls [pattern]` \u2013 Lists all locally available\n    repositories.\n7.  :code:`git-manager status [pattern]` \u2013 Shows all repositories that do\n    not have a clean working tree, i.e.\u00a0those where `git status` shows\n    a message.\n8.  :code:`git-manager state [pattern]` \u2013 Shows all repositories for which\n    the local branch is not equal to the remote branch.\n9.  :code:`git-manager reconfigure` \u2013 Updates configuration file with\n    repositories found in a specific folder\n10. :code:`git-manager gc [pattern]` \u2013 Runs houskeeping tasks on all local\n    repositories\n\nSome commands optionally accept the `pattern` argument. This can be\nused to filter repository by their name.\n\nRepository patterns are simple `glob-like` pattern matches on\nstandardized remote URLs. They can also be normal glob patterns on full\nURLs.\n\nFor example:\n\n+--------------------------+------------------------------------------+\n| Pattern                  | Examples                                 |\n+==========================+==========================================+\n| :code:`world`            | :code:`git@github.com:hello/world.git`,  |\n|                          | :code:`https://github.com/hello/world`   |\n+--------------------------+------------------------------------------+\n| :code:`hello/*`          | :code:`git@github.com:hello/earth.git`,  |\n|                          | :code:`git@github.com:hello/mars.git`    |\n+--------------------------+------------------------------------------+\n| :code:`hello/m*`         | :code:`git@github.com:hello/mars.git`,   |\n|                          | :code:`git@github.com:hello/mercury.git` |\n+--------------------------+------------------------------------------+\n| :code:`github.com/*/*`   | :code:`git@github.com:hello/world.git`,  |\n|                          | :code:`git@github.com:bye/world.git`     |\n+--------------------------+------------------------------------------+\n| :code:`github.com/hello` | :code:`git@github.com:hello/world.git`,  |\n|                          | :code:`git@github.com:hello/mars.git`    |\n+--------------------------+------------------------------------------+\n\nConfiguration\n-------------\n\nGit Manager can be configured through its configuration file. In order,\nit looks for the configuration file in the following locations:\n\n1. :code:`$GIT_MANAGER_CONFIG` (if set)\n2. :code:`~/.config/.gitmanager/config` (or\n   :code:`$XDG_CONFIG_HOME/.gitmanager/config` if set)\n3. :code:`~/.gitmanager`\n\nThe configuration file is parsed line-by-line and declares which\nrepositories are under GitManager control. It consists of three\ndifferent types of directives:\n\n1. **Root Line** Configure the root folder to clone repositories to\n   automatically. Starts with two hashes, then sets the folder relative\n   to the users home directory. For example: \n\n   .. code:: text\n\n       ## /opt/repositories\n\n2. **Comments** Anything starting with a \u201c#\u201d will be treated as a\n   comment. The same goes for empty (or whitespace-only) lines.\n3. **Repository instruction** To declare a repository write\n   :code:`REPOSITORY_URL  [FOLDER]`. This declares that the repository\n   from `REPOSITORY_URL` should be cloned into the folder `FOLDER`.\n   In case the folder is omitted, the \u2018humanish\u2019 part of the URI will be\n   taken automatically. All folder paths by default are relative to the\n   users home folder, but this can be changed with the instruction\n   below. Example: \n\n   .. code:: text\n\n      # makes the git/git repository available locally \n      # in the folder ~/Projects/git\n      https://github.com/git/git Projects/git\n\n      # makes the GitManager repository available\n      # in the folder ~/GitManager\n      https://github.com/tkw1536/GitManager\n\n4. **Group Instruction** In the case where multiple repositories should\n   be cloned into the same folder, it is inconvenient to always give the\n   full path to that folder in the configuration file. For this reason\n   GitManager supports the concept of a group. A group can be started by\n   prefixing a line with the \u201c>\u201d character. A group takes one argument.\n   A path to a folder all repositories should be cloned into. This is\n   best illustrated in the form of an example:\n\n   .. code:: text\n\n      # We can create a group to store all our atom-related projects.\n      # All repositories are automatically available in the ~/AtomProjects \n      # folder.\n      > AtomProjects\n        https://github.com/atom/atom\n        https://github.com/atom/markdown-preview\n\n      # makes the GitManager repository available\n      # in the folder ~/GitManager\n      https://github.com/tkw1536/GitManager\n  \n   Groups completely support nesting. A sub-groups path and\n   pattern for origin are relative to the parent group. To create a\n   sub-group, add another \u201c>\u201d character in front of the line.\n\nAn example configuration file can be found in the file\n`config_example <config_example>`__.\n\nDevelopment and Testing\n-----------------------\n\nThis project is unit tested with a high coverage rate. The tests can be\nrun with:\n\n.. code:: bash\n\n    nosetests --with-coverage --cover-package GitManager\n\nTests are automatically run on Travis CI after every commit.\n\nLicense\n-------\n\n::\n\n    The MIT License (MIT)\n\n    Copyright (c) 2016-17 Tom Wiesing\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n\n.. |Build Status| image:: https://travis-ci.org/tkw1536/GitManager.svg?branch=master\n   :target: https://travis-ci.org/tkw1536/GitManager\n.. |PyPI version| image:: https://badge.fury.io/py/git_manager.svg\n   :target: https://pypi.python.org/pypi/git_manager\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/tkw1536/GitManager",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "git_manager",
    "platform": "",
    "project_url": "https://pypi.org/project/git_manager/",
    "release_url": "https://pypi.org/project/git_manager/0.1.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Manages multiple git repositories",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9351319495e9f4d1f43b640fb502a71b",
          "sha256": "546fe391da3f87699a62847d13aad63a65aba02104710534e132176fcd0f6ba8"
        },
        "downloads": -1,
        "filename": "git_manager-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9351319495e9f4d1f43b640fb502a71b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19593,
        "upload_time": "2017-11-16T19:30:40",
        "url": "https://files.pythonhosted.org/packages/bb/9a/3c3bf030851d6f7a5bf4e75068a1334b653d379968beb85cad93b7789cfe/git_manager-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "420089f57a9cd2d1a7d2295c6a865f33",
          "sha256": "d283794eb6150d038d82cd9404dcd372939a6f022a91df18c4a6511b7b935897"
        },
        "downloads": -1,
        "filename": "git_manager-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "420089f57a9cd2d1a7d2295c6a865f33",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19938,
        "upload_time": "2017-11-17T09:12:30",
        "url": "https://files.pythonhosted.org/packages/4b/f3/1df9c1bd9699838a217599956c2272b735f8ed675a2211e708f1817767b6/git_manager-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "420089f57a9cd2d1a7d2295c6a865f33",
        "sha256": "d283794eb6150d038d82cd9404dcd372939a6f022a91df18c4a6511b7b935897"
      },
      "downloads": -1,
      "filename": "git_manager-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "420089f57a9cd2d1a7d2295c6a865f33",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 19938,
      "upload_time": "2017-11-17T09:12:30",
      "url": "https://files.pythonhosted.org/packages/4b/f3/1df9c1bd9699838a217599956c2272b735f8ed675a2211e708f1817767b6/git_manager-0.1.1.tar.gz"
    }
  ]
}