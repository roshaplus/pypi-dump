{
  "info": {
    "author": "Amazon Web Service",
    "author_email": "UNKNOWN",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "AWS IoT Device SDK for Python\n=============================\n\nThe AWS IoT Device SDK for Python allows developers to write Python\nscript to use their devices to access the AWS IoT platform through `MQTT or\nMQTT over the  WebSocket\nprotocol <http://docs.aws.amazon.com/iot/latest/developerguide/protocols.html>`__.\nBy connecting their devices to AWS IoT, users can securely work with\nthe message broker, rules, and the device shadow (sometimes referred to as a thing shadow) provided by AWS IoT and\nwith other AWS services like AWS Lambda, Amazon Kinesis, Amazon S3, and more.\n\n-  Overview_\n-  Installation_\n-  `Use the SDK`_\n-  `Key Features`_\n-  Examples_\n-  `API Documentation`_\n-  License_\n-  Support_\n\n--------------\n\n.. _Overview:\n\nOverview\n~~~~~~~~\n\nThis document provides instructions for installing and configuring\nthe AWS IoT Device SDK for Python. It includes examples demonstrating the\nuse of the SDK APIs.\n\nMQTT Connections\n________________\n\nThe SDK is built on top of a modified `Paho MQTT Python client\nlibrary <https://eclipse.org/paho/clients/python/>`__. Developers can choose from two\ntypes of connections to connect to AWS\nIoT:\n\n-  MQTT (over TLS 1.2) with X.509 certificate-based mutual\n   authentication.\n-  MQTT over the WebSocket protocol with AWS Signature Version 4 authentication.\n\nFor MQTT over TLS (port 8883), a valid certificate and a private key are\nrequired for authentication. For MQTT over the WebSocket protocol (port 443),\na valid AWS Identity and Access Management (IAM) access key ID and secret access key pair are required for\nauthentication.\n\nDevice Shadow\n_____________\n\nA device shadow, or thing shadow, is a JSON document that is used to\nstore and retrieve current state information for a thing (device, app,\nand so on). A shadow can be created and maintained for each thing or device so that its state can be get and set\nregardless of whether the thing or device is connected to the Internet. The\nSDK implements the protocol for applications to retrieve, update, and\ndelete shadow documents. The SDK allows operations on shadow documents\nof single or multiple shadow instances in one MQTT connection. The SDK\nalso allows the use of the same connection for shadow operations and non-shadow, simple MQTT operations.\n\n.. _Installation:\n\nInstallation\n~~~~~~~~~~~~\n\nMinimum Requirements\n____________________\n\n-  Python 2.7+ or Python 3.3+\n-  OpenSSL version 1.0.1+ (TLS version 1.2) compiled with the Python executable for\n   X.509 certificate-based mutual authentication\n\n   To check your version of OpenSSL, use the following command in a Python interpreter:\n\n   .. code-block:: python\n\n       >>> import ssl\n       >>> ssl.OPENSSL_VERSION\n\nInstall from pip\n________________\n\n\n.. code-block:: sh\n\n    pip install AWSIoTPythonSDK\n\nBuild from source\n_________________\n\n\n.. code-block:: sh\n\n    git clone https://github.com/aws/aws-iot-device-sdk-python.git\n    cd aws-iot-device-sdk-python\n    python setup.py install\n\nDownload the zip file\n_____________________\n\n\nThe SDK zip file is available `here <https://s3.amazonaws.com/aws-iot-device-sdk-python/aws-iot-device-sdk-python-latest.zip>`__. Unzip the package and install the SDK like this:\n\n.. code-block:: python\n\n    python setup.py install\n\n.. _Use_the_SDK:\n\nUse the SDK\n~~~~~~~~~~~\n\nCredentials\n___________\n\nThe SDK supports two types of credentials that correspond to the two connection \ntypes:\n\n-  X.509 certificate\n\n   For the certificate-based mutual authentication connection\n   type.\n   Download the `AWS IoT root\n   CA <https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem>`__.\n   Use the AWS IoT console to create and download the certificate and private key. You must specify the location of these files \n   when you initialize the client.\n\n-  IAM credentials\n\n   For the Websocket with Signature Version 4 authentication type. You will need IAM credentials: an access key ID, a secret access\n   key, and an optional session token. You must  also\n   download the `AWS IoT root\n   CA <https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem>`__.\n   You can specify the IAM credentails by:\n\n   -  Passing method parameters\n\n      The SDK will first call the following method to check if there is any input for a custom IAM\n      credentials configuration:\n\n      .. code-block:: python\n\n          # AWS IoT MQTT Client\n          AWSIoTPythonSDK.MQTTLib.AWSIoTMQTTClient.configureIAMCredentials(obtainedAccessKeyID, obtainedSecretAccessKey, obtainedSessionToken)        \n          # AWS IoT MQTT Shadow Client\n          AWSIoTPythonSDK.MQTTLib.AWSIoTMQTTShadowClient.configureIAMCredentials(obtainedAccessKeyID, obtainedSecretAccessKey, obtainedSessionToken)\n\n      Note: We do not recommend hard-coding credentials in a custom script. You can use `Amazon Cognito Identity\n      <https://aws.amazon.com/cognito/>`__ or another credential\n      provider.\n\n   -  Exporting environment variables\n\n      If there is no custom configuration through method calls, the SDK\n      will then check these environment variables for credentials:\n\n      ``AWS_ACCESS_KEY_ID``\n\n      The access key for your AWS account.\n\n      ``AWS_SECRET_ACCESS_KEY``\n\n      The secret key for your AWS account.\n\n      ``AWS_SESSION_TOKEN``\n      \n      The session key for your AWS account. This is required only when\n      you are using temporary credentials. For more information, see\n      `here <http://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html>`__.\n\n      You can set your IAM credentials as environment variables by\n      using the preconfigured names. For Unix systems, you can do the\n      following:\n\n      .. code-block:: sh\n\n          export AWS_ACCESS_KEY_ID=<your aws access key id string>\n          export AWS_SECRET_ACCESS_KEY=<your aws secret access key string>\n          export AWS_SESSION_TOKEN=<your aws session token string>\n\n      For Windows, open ``Control Panel`` and choose ``System``. In\n      ``Advanced system settings`` choose ``Environment Variables`` and\n      then configure the required environment variables.\n\n   -  Configuring shared credentials file\n\n      If there are no such environment variables specified, the SDK\n      will check the **default** section for a shared\n      credentials file (in Unix, ``~/.aws/credentials`` and in Windows, ``%UserProfile%\\.aws\\credentials``) as follows:\n\n      .. code-block:: sh\n\n          [default]\n          aws_access_key_id=foo\n          aws_secret_access_key=bar\n          aws_session_token=baz\n\n      You can use the AWS CLI to configure the shared credentials file <http://aws.amazon.com/cli/>`__:\n\n      .. code-block:: sh\n\n          aws configure\n\nAWSIoTMQTTClient\n________________\n\nThis is the client class used for plain MQTT communication with AWS IoT.\nYou can initialize and configure the client like this:\n\n.. code-block:: python\n\n    # Import SDK packages\n    from AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient\n\n    # For certificate based connection\n    myMQTTClient = AWSIoTMQTTClient(\"myClientID\")\n    # For Websocket connection\n    # myMQTTClient = AWSIoTMQTTClient(\"myClientID\", useWebsocket=True)\n    # Configurations\n    # For TLS mutual authentication\n    myMQTTClient.configureEndpoint(\"YOUR.ENDPOINT\", 8883)\n    # For Websocket\n    # myMQTTClient.configureEndpoint(\"YOUR.ENDPOINT\", 443)\n    myMQTTClient.configureCredentials(\"YOUR/ROOT/CA/PATH\", \"PRIVATE/KEY/PATH\", \"CERTIFICATE/PATH\")\n    # For Websocket, we only need to configure the root CA\n    # myMQTTClient.configureCredentials(\"YOUR/ROOT/CA/PATH\")\n    myMQTTClient.configureOfflinePublishQueueing(-1)  # Infinite offline Publish queueing\n    myMQTTClient.configureDrainingFrequency(2)  # Draining: 2 Hz\n    myMQTTClient.configureConnectDisconnectTimeout(10)  # 10 sec\n    myMQTTClient.configureMQTTOperationTimeout(5)  # 5 sec\n    ...\n\nFor basic MQTT operations, your script will look like this:\n\n.. code-block:: python\n\n    ...\n    myMQTTClient.connect()\n    myMQTTClient.publish(\"myTopic\", \"myPayload\", 0)\n    myMQTTClient.subscribe(\"myTopic\", 1, customCallback)\n    myMQTTClient.unsubscribe(\"myTopic\")\n    myMQTTClient.disconnect()\n    ...\n\nAWSIoTShadowClient\n__________________\n\nThis is the client class used for device shadow operations with AWS IoT.\nYou can initialize and configure the client like this:\n\n.. code-block:: python\n\n    from AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTShadowClient\n\n    # For certificate based connection\n    myShadowClient = AWSIoTMQTTShadowClient(\"myClientID\")\n    # For Websocket connection\n    # myMQTTClient = AWSIoTMQTTClient(\"myClientID\", useWebsocket=True)\n    # Configurations\n    # For TLS mutual authentication\n    myShadowClient.configureEndpoint(\"YOUR.ENDPOINT\", 8883)\n    # For Websocket\n    # myShadowClient.configureEndpoint(\"YOUR.ENDPOINT\", 443)\n    myShadowClient.configureCredentials(\"YOUR/ROOT/CA/PATH\", \"PRIVATE/KEY/PATH\", \"CERTIFICATE/PATH\")\n    # For Websocket, we only need to configure the root CA\n    # myShadowClient.configureCredentials(\"YOUR/ROOT/CA/PATH\")\n    myShadowClient.configureConnectDisconnectTimeout(10)  # 10 sec\n    myShadowClient.configureMQTTOperationTimeout(5)  # 5 sec\n    ...\n\nFor shadow operations, your script will look like this:\n\n.. code-block:: python\n\n    ...\n    myShadowClient.connect()\n    # Create a device shadow instance using persistent subscription\n    myDeviceShadow = myShadowClient.createShadowHandlerWithName(\"Bot\", True)\n    # Shadow operations\n    myDeviceShadow.shadowGet(customCallback, 5)\n    myDeviceShadow.shadowUpdate(myJSONPayload, customCallback, 5)\n    myDeviceShadow.shadowDelete(customCallback, 5)\n    myDeviceShadow.shadowRegisterDeltaCallback(customCallback)\n    myDeviceShadow.shadowUnregisterDeltaCallback()\n    ...\n\nYou can also retrieve the MQTTClient(MQTT connection) to perform plain\nMQTT operations along with shadow operations:\n\n.. code-block:: python\n\n    myMQTTClient = myShadowClient.getMQTTConnection()\n    myMQTTClient.publish(\"plainMQTTTopic\", \"Payload\", 1)\n\n.. _Key_Features:\n\nKey Features\n~~~~~~~~~~~~\n\nProgressive Reconnect Backoff\n_____________________________\n\nWhen a non-client-side disconnect occurs, the SDK will reconnect automatically. The following APIs are provided for configuration:\n\n.. code-block:: python\n\n    # AWS IoT MQTT Client\n    AWSIoTPythonSDK.MQTTLib.AWSIoTMQTTClient.configureAutoReconnectBackoffTime(baseReconnectQuietTimeSecond, maxReconnectQuietTimeSecond, stableConnectionTimeSecond)\n    # AWS IoT MQTT Shadow Client\n    AWSIoTPythonSDK.MQTTLib.AWSIoTMQTTShadowClient.configureAutoReconnectBackoffTime(baseReconnectQuietTimeSecond, maxReconnectQuietTimeSecond, stableConnectionTimeSecond)\n\nThe auto-reconnect occurs with a progressive backoff, which follows this\nmechanism for reconnect backoff time calculation:\n\n    t\\ :sup:`current` = min(2\\ :sup:`n` t\\ :sup:`base`, t\\ :sup:`max`)\n\nwhere t\\ :sup:`current` is the current reconnect backoff time, t\\ :sup:`base` is the base\nreconnect backoff time, t\\ :sup:`max` is the maximum reconnect backoff time.\n\nThe reconnect backoff time will be doubled on disconnect and reconnect\nattempt until it reaches the preconfigured maximum reconnect backoff\ntime. After the connection is stable for over the\n``stableConnectionTime``, the reconnect backoff time will be reset to\nthe ``baseReconnectQuietTime``.\n\nIf no ``configureAutoReconnectBackoffTime`` is called, the following\ndefault configuration for backoff timing will be performed on initialization:\n\n.. code-block:: python\n\n    baseReconnectQuietTimeSecond = 1\n    maxReconnectQuietTimeSecond = 32\n    stableConnectionTimeSecond = 20\n\nOffline Publish Requests Queueing with Draining\n_______________________________________________\n\nIf the client is temporarily offline and disconnected due to \nnetwork failure, publish requests will be added to an internal\nqueue until the number of queued-up requests reaches the size limit\nof the queue. This functionality is for plain MQTT operations. Shadow\nclient contains time-sensitive data and is therefore not supported.\n\nThe following API is provided for configuration:\n\n.. code-block:: python\n\n    AWSIoTPythonSDK.MQTTLib.AWSIoTMQTTClient.configureOfflinePublishQueueing(queueSize, dropBehavior)\n\nAfter the queue is full, offline publish requests will be discarded or\nreplaced according to the configuration of the drop behavior:\n\n.. code-block:: python\n\n    # Drop the oldest request in the queue\n    AWSIoTPythonSDK.MQTTLib.DROP_OLDEST = 0\n    # Drop the newest request in the queue\n    AWSIoTPythonSDK.MQTTLib.DROP_NEWEST = 1\n\nLet's say we configure the size of offlinePublishQueue to 5 and we\nhave 7 incoming offline publish requests.\n\nIn a ``DROP_OLDEST`` configuration:\n\n.. code-block:: python\n\n    myClient.configureOfflinePublishQueueing(5, AWSIoTPythonSDK.MQTTLib.DROP_OLDEST);\n\nThe internal queue should be like this when the queue is just full:\n\n.. code-block:: sh\n\n    HEAD ['pub_req1', 'pub_req2', 'pub_req3', 'pub_req4', 'pub_req5']\n\nWhen the 6th and the 7th publish requests are made offline, the internal\nqueue will be like this:\n\n.. code-block:: sh\n\n    HEAD ['pub_req3', 'pub_req4', 'pub_req5', 'pub_req6', 'pub_req7']\n\nBecause the queue is already full, the oldest requests ``pub_req1`` and\n``pub_req2`` are discarded.\n\nIn a ``DROP_NEWEST`` configuration:\n\n.. code-block:: python\n\n    myClient.configureOfflinePublishQueueing(5, AWSIoTPythonSDK.MQTTLib.DROP_NEWEST);\n\nThe internal queue should be like this when the queue is just full:\n\n.. code-block:: sh\n\n    HEAD ['pub_req1', 'pub_req2', 'pub_req3', 'pub_req4', 'pub_req5']\n\nWhen the 6th and the 7th publish requests are made offline, the internal\nqueue will be like this:\n\n.. code-block:: sh\n\n    HEAD ['pub_req1', 'pub_req2', 'pub_req3', 'pub_req4', 'pub_req5']\n\nBecause the queue is already full, the newest requests ``pub_req6`` and\n``pub_req7`` are discarded.\n\nWhen the client is back online, connected, and resubscribed to all topics\nit has previously subscribed to, the draining starts. All requests\nin the offline publish queue will be resent at the configured draining\nrate:\n\n.. code-block:: python\n\n    AWSIoTPythonSDK.MQTTLib.AWSIoTMQTTClient.configureDrainingFrequency(frequencyInHz)\n\nIf no ``configOfflinePublishQueue`` or ``configureDrainingFrequency`` is\ncalled, the following default configuration for offline publish queueing\nand draining will be performed on the initialization:\n\n.. code-block:: python\n\n    offlinePublishQueueSize = 20\n    dropBehavior = DROP_NEWEST\n    drainingFrequency = 2Hz\n\nBefore the draining process is complete, any new publish request\nwithin this time period will be added to the queue. Therefore, the draining rate\nshould be higher than the normal publish rate to avoid an endless\ndraining process after reconnect.\n\nThe disconnect event is detected based on PINGRESP MQTT\npacket loss. Offline publish queueing will not be triggered until the\ndisconnect event is detected. Configuring a shorter keep-alive\ninterval allows the client to detect disconnects more quickly. Any QoS0\npublish requests issued after the network failure and before the\ndetection of the PINGRESP loss will be lost.\n\nPersistent/Non-Persistent Subscription\n______________________________________\n\nDevice shadow operations are built on top of the publish/subscribe model\nfor the MQTT protocol, which provides an asynchronous request/response workflow. Shadow operations (Get, Update, Delete) are\nsent as requests to AWS IoT. The registered callback will \nbe executed after a response is returned. In order to receive\nresponses, the client must subscribe to the corresponding shadow\nresponse topics. After the responses are received, the client might want\nto unsubscribe from these response topics to avoid getting unrelated\nresponses for charges for other requests not issued by this client.\n\nThe SDK provides a persistent/non-persistent subscription selection on\nthe initialization of a device shadow. Developers can choose the type of subscription workflow they want to follow.\n\nFor a non-persistent subscription, you will need to create a device\nshadow like this:\n\n.. code-block:: python\n\n    nonPersistentSubShadow = myShadowClient.createShadowHandlerWithName(\"NonPersistentSubShadow\", False)\n\nIn this case, the request to subscribe to accepted/rejected topics will be\nsent on each shadow operation. After a response is returned,\naccepted/rejected topics will be unsubscribed to avoid getting unrelated\nresponses.\n\nFor a persistent subscription, you will need to create a device shadow\nlike this:\n\n.. code-block:: python\n\n    persistentSubShadow = myShadowClient.createShadowHandlerWithName(\"PersistentSubShadow\", True)\n\nIn this case, the request to subscribe to the corresponding\naccepted/rejected topics will be sent on the first shadow operation. For\nexample, on the first call of shadowGet API, the following topics will\nbe subscribed to on the first Get request:\n\n.. code-block:: sh\n\n    $aws/things/PersistentSubShadow/shadow/get/accepted\n    $aws/things/PersistentSubShadow/shadow/get/rejected\n\nBecause it is a persistent subscription, no unsubscribe requests will be\nsent when a response is returned. The SDK client is always listening on\naccepted/rejected topics.\n\nIn all SDK examples, PersistentSubscription is used in consideration of its better performance.\n\n.. _Examples:\n\nExamples\n~~~~~~~~\n\nBasicPubSub\n___________\n\nThis example demonstrates a simple MQTT publish/subscribe using AWS\nIoT. It first subscribes to a topic and registers a callback to print\nnew messages and then publishes to the same topic in a loop.\nNew messages are printed upon receipt, indicating\nthe callback function has been called.\n\nInstructions\n************\n\nRun the example like this:\n\n.. code-block:: python\n\n    # Certificate based mutual authentication\n    python basicPubSub.py -e <endpoint> -r <rootCAFilePath> -c <certFilePath> -k <privateKeyFilePath>\n    # MQTT over WebSocket\n    python basicPubSub.py -e <endpoint> -r <rootCAFilePath> -w\n    # Customize client id and topic\n    python basicPubSub.py -e <endpoint> -r <rootCAFilePath> -c <certFilePath> -k <privateKeyFilePath> -id <clientId> -t <topic>\n\nSource\n******\n\nThe example is available in ``samples/basicPubSub/``.\n\nBasicPubSub with Amazon Cognito Session Token\n_____________________________________________\n\nThis example demonstrates a simple MQTT publish/subscribe using an Amazon Cognito\nIdentity session token. It uses the AWS IoT Device SDK for\nPython and the AWS SDK for Python (boto3). It first makes a request to\nAmazon Cognito to retrieve the access ID, the access key, and the session token for temporary\nauthentication. It then uses these credentials to connect to AWS\nIoT and communicate data/messages using MQTT over Websocket, just like\nthe BasicPubSub example.\n\nInstructions\n************\n\nTo run the example, you will need your **Amazon Cognito identity pool ID** and allow **unauthenticated\nidentities** to connect. Make sure that the policy attached to the\nunauthenticated role has permissions to access the required AWS IoT\nAPIs. For more information about Amazon Cognito, see\n`here <https://console.aws.amazon.com/cognito/>`__.\n\nRun the example like this:\n\n.. code-block:: python\n\n    python basicPubSub_CognitoSTS.py -e <endpoint> -r <rootCAFilePath> -C <CognitoIdentityPoolID>\n    # Customize client id and topic\n    python basicPubsub_CognitoSTS.py -e <endpoint> -r <rootCAFilePath> -C <CognitoIdentityPoolID> -id <clientId> -t <topic>\n\nSource\n******\n\nThe example is available in ``samples/basicPubSub/``.\n\nBasicShadow\n___________\n\nThis example demonstrates the use of basic shadow operations\n(update/delta). It has two scripts, ``basicShadowUpdater.py`` and\n``basicShadowDeltaListener.py``. The example shows how an shadow update\nrequest triggers delta events.\n\n``basicShadowUpdater.py`` performs a shadow update in a loop to\ncontinuously modify the desired state of the shadow by changing the\nvalue of the integer attribute.\n\n``basicShadowDeltaListener.py`` subscribes to the delta topic\nof the same shadow and receives delta messages when there is a\ndifference between the desired and reported states.\n\nBecause only the desired state is being updated by basicShadowUpdater, a\nseries of delta messages that correspond to the shadow update requests should be received in basicShadowDeltaListener.\n\nInstructions\n************\n\nRun the example like this:\n\nFirst, start the basicShadowDeltaListener:\n\n.. code-block:: python\n\n    # Certificate-based mutual authentication\n    python basicShadowDeltaListener.py -e <endpoint> -r <rootCAFilePath> -c <certFilePath> -k <privateKeyFilePath>\n    # MQTT over WebSocket\n    python basicShadowDeltaListener.py -e <endpoint> -r <rootCAFilePath> -w\n\n\nThen, start the basicShadowUpdater:\n\n.. code-block:: python\n\n    # Certificate-based mutual authentication\n    python basicShadowUpdater.py -e <endpoint> -r <rootCAFilePath> -c <certFilePath> -k <privateKeyFilePath>\n    # MQTT over WebSocket\n    python basicShadowUpdater.py -e <endpoint> -r <rootCAFilePath> -w\n\n\nAfter the basicShadowUpdater starts sending shadow update requests, you\nshould be able to see corresponding delta messages in the\nbasicShadowDeltaListener output.\n\nSource\n******\n\nThe example is available in ``samples/basicShadow/``.\n\nThingShadowEcho\n_______________\n\nThis example demonstrates how a device communicates with AWS IoT,\nsyncing data into the device shadow in the cloud and receiving commands\nfrom another app. Whenever there is a new command from the app side to\nchange the desired state of the device, the device receives this\nrequest and applies the change by publishing it as the reported state. By\nregistering a delta callback function, users will be able to see this\nincoming message and notice the syncing of the state.\n\nInstructions\n************\n\nRun the example like this:\n\n.. code-block:: python\n\n    # Certificate based mutual authentication\n    python ThingShadowEcho.py -e <endpoint> -r <rootCAFilePath> -c <certFilePath> -k <privateKeyFilePath>\n    # MQTT over WebSocket\n    python ThingShadowEcho.py -e <endpoint> -r <rootCAFilePath> -w\n    # Customize client Id and thing name\n    python ThingShadowEcho.py -e <endpoint> -r <rootCAFilePath> -c <certFilePath> -k <privateKeyFilePath> -id <clientId> -n <thingName>\n\nNow use the `AWS IoT console <https://console.aws.amazon.com/iot/>`__ or other MQTT\nclient to update the shadow desired state only. You should be able to see the reported state is updated to match\nthe changes you just made in desired state.\n\nSource\n******\n\nThe example is available in ``samples/ThingShadowEcho/``.\n\n.. _API_Documentation:\n\nAPI Documentation\n~~~~~~~~~~~~~~~~~\n\nYou can find the API documentation for the SDK `here <https://s3.amazonaws.com/aws-iot-device-sdk-python-docs/index.html>`__.\n\n.. _License:\n\nLicense\n~~~~~~~\n\nThis SDK is distributed under the `Apache License, Version\n2.0 <http://www.apache.org/licenses/LICENSE-2.0>`__, see LICENSE.txt\nand NOTICE.txt for more information.\n\n.. _Support:\n\nSupport\n~~~~~~~\n\nIf you have technical questions about the AWS IoT Device SDK, use the `AWS\nIoT Forum <https://forums.aws.amazon.com/forum.jspa?forumID=210>`__.\nFor any other questions about AWS IoT, contact `AWS\nSupport <https://aws.amazon.com/contact-us>`__.\n",
    "docs_url": null,
    "download_url": "https://s3.amazonaws.com/aws-iot-device-sdk-python/aws-iot-device-sdk-python-latest.zip",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/aws/aws-iot-device-sdk-python.git",
    "keywords": "aws,iot,mqtt",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "AWSIoTPythonSDK",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/AWSIoTPythonSDK/",
    "release_url": "https://pypi.org/project/AWSIoTPythonSDK/1.1.2/",
    "requires_python": null,
    "summary": "SDK for connecting to AWS IoT using Python.",
    "version": "1.1.2"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4c848ec718315c8791925f03eea44bb9",
          "sha256": "67671ab75d437c809874db077ff40c88782f30acd9a5ef3bce12109b07251642"
        },
        "downloads": 804,
        "filename": "AWSIoTPythonSDK-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4c848ec718315c8791925f03eea44bb9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 55162,
        "upload_time": "2016-06-14T21:03:53",
        "url": "https://files.pythonhosted.org/packages/b8/41/ec9d0786b4ae9f6d205a68cf96ade89414337ebaabb88740f02477d840fa/AWSIoTPythonSDK-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6234e5a51831de645353cec06af1088f",
          "sha256": "cba418ca85c48546305c3c87661ccb1c066356d10f4d7f26a68b456e6658ef90"
        },
        "downloads": 592,
        "filename": "AWSIoTPythonSDK-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6234e5a51831de645353cec06af1088f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 55149,
        "upload_time": "2016-08-08T23:34:40",
        "url": "https://files.pythonhosted.org/packages/ad/2a/73e982b40e40f0b5f96caba71cd34f4b028be362d274708b027b560be8f4/AWSIoTPythonSDK-1.0.1.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ac97b26bccc32fac8228238c218f602d",
          "sha256": "3a7bf0dba2cb5ce9ca3749f93eecc99911040971463cb46c688d9f54dfcd00cc"
        },
        "downloads": 421,
        "filename": "AWSIoTPythonSDK-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ac97b26bccc32fac8228238c218f602d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 55674,
        "upload_time": "2016-10-12T22:37:31",
        "url": "https://files.pythonhosted.org/packages/6e/f8/6798a9d693a6d354470cb497d2d7335ace6125c38ed5434de92f3608f317/AWSIoTPythonSDK-1.1.0.tar.gz"
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "470a37dfe48fb9e448a1dce41b9abc97",
          "sha256": "7e8c41112fc60ebef2abf8e0ccf249bb3014ba872b1feb9591add208acf71e8c"
        },
        "downloads": 1063,
        "filename": "AWSIoTPythonSDK-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "470a37dfe48fb9e448a1dce41b9abc97",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 55647,
        "upload_time": "2016-11-14T23:28:46",
        "url": "https://files.pythonhosted.org/packages/eb/45/6cfe2580fa0e64ce17065cc3ba1c9965c20358f6028c485da3165ae79b9a/AWSIoTPythonSDK-1.1.1.tar.gz"
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6835982c7fb36b19aa474d346f29ec3d",
          "sha256": "ac98d39d7230e06fc9a30bdb3398c985a7c357b10898a769db022d315855102a"
        },
        "downloads": 0,
        "filename": "AWSIoTPythonSDK-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6835982c7fb36b19aa474d346f29ec3d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 55350,
        "upload_time": "2017-06-19T21:16:16",
        "url": "https://files.pythonhosted.org/packages/1e/86/41ffd0b04425c43bb24ca108080ec844cae87ee7c5285d482761cd4667ab/AWSIoTPythonSDK-1.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6835982c7fb36b19aa474d346f29ec3d",
        "sha256": "ac98d39d7230e06fc9a30bdb3398c985a7c357b10898a769db022d315855102a"
      },
      "downloads": 0,
      "filename": "AWSIoTPythonSDK-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "6835982c7fb36b19aa474d346f29ec3d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 55350,
      "upload_time": "2017-06-19T21:16:16",
      "url": "https://files.pythonhosted.org/packages/1e/86/41ffd0b04425c43bb24ca108080ec844cae87ee7c5285d482761cd4667ab/AWSIoTPythonSDK-1.1.2.tar.gz"
    }
  ]
}