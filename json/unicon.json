{
  "info": {
    "author": "Cisco Systems",
    "author_email": "pyats-support-ext@cisco.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Telecommunications Industry",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing"
    ],
    "description": "Unicon - Universal Connection Library\n=====================================\n\nUnicon is a framework for developing device control \nlibraries for routers, switches and servers and the likes. It is developed \npurely in Python, and aims to reduce the amount of boiler-plate coding required\nto handle device connections in Expect-like progamming. Unicon is designed to \nintegrate as the default device connection class in `Cisco pyATS`_, and as well\ncan be used stand-alone if required.\n\nUnicon is initially developed internally in Cisco, and is now available to the\ngeneral public starting late 2017 through `Cisco DevNet`_. \n\n\n.. _Cisco DevNet: https://developer.cisco.com/\n.. _Cisco pyATS: https://developer.cisco.com/site/pyats/\n\nAs a framework, Unicon provides a set of classes and settings which can be\nfurther sub-classed to create platform specific implementations.\n\nOne of the main design goals of unicon is `DRY` (Do Not Repeat Yourself).\nHence the base classes handle all the common stuff which are applicable to all\nthe platforms. This makes it very easy for a developer to implement connection\nlibrary (via plugins) for new platforms, as they only ends up writing the \ndifferential code.\n\n\nRequirements\n------------\n\nUnicon currently supports Python 3.4+ on Linux & Mac systems. Windows platforms\nare not yet supported.\n\nQuick Start\n-----------\n\n.. code-block:: console\n\n    $ pip install --upgrade unicon\n\n\nFor more information on setting up your Python development environment,\nsuch as creating virtual environment and installing ``pip`` on your system, \nplease refer to `Virtual Environment and Packages`_ in Python tutorials.\n\n.. _Virtual Environment and Packages: https://docs.python.org/3/tutorial/venv.html\n\nExamples\n--------\n\nSee example of a Unicon connection usag with Cisco IOS devices at:\n\n    https://github.com/CiscoDevNet/pyats-ios-sample\n\nIn addition, there is a sample plugin package you can follow to develop Unicon\nplugins for new platforms on top of Unicon:\n\n    https://github.com/CiscoDevNet/pyats-plugin-examples/tree/master/unicon_plugin_example\n\nSupport\n-------\n\nJoin us at our DevNet community for support:\n\n    https://communities.cisco.com/community/developer/pyats",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://developer.cisco.com/site/pyats/",
    "keywords": "unicon connection pyats cisco",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "unicon",
    "platform": "",
    "project_url": "https://pypi.org/project/unicon/",
    "release_url": "https://pypi.org/project/unicon/3.0.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Unicon Connection Library",
    "version": "3.0.0"
  },
  "releases": {
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "25b6e17d07eba6104c7f87c26a110a6c",
          "sha256": "2206b348c14e69342118a645fac3e80e94a5187e783a11aaca16feedd3fdbe15"
        },
        "downloads": -1,
        "filename": "unicon-3.0.0-cp34-cp34m-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "25b6e17d07eba6104c7f87c26a110a6c",
        "packagetype": "bdist_wheel",
        "python_version": "3.4",
        "size": 4559775,
        "upload_time": "2017-11-17T21:51:32",
        "url": "https://files.pythonhosted.org/packages/5c/a1/ef3684a3e64c630b3dbb55830c85be7dbb8ae42c7dba00499633af045dab/unicon-3.0.0-cp34-cp34m-manylinux1_x86_64.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "25b6e17d07eba6104c7f87c26a110a6c",
        "sha256": "2206b348c14e69342118a645fac3e80e94a5187e783a11aaca16feedd3fdbe15"
      },
      "downloads": -1,
      "filename": "unicon-3.0.0-cp34-cp34m-manylinux1_x86_64.whl",
      "has_sig": false,
      "md5_digest": "25b6e17d07eba6104c7f87c26a110a6c",
      "packagetype": "bdist_wheel",
      "python_version": "3.4",
      "size": 4559775,
      "upload_time": "2017-11-17T21:51:32",
      "url": "https://files.pythonhosted.org/packages/5c/a1/ef3684a3e64c630b3dbb55830c85be7dbb8ae42c7dba00499633af045dab/unicon-3.0.0-cp34-cp34m-manylinux1_x86_64.whl"
    }
  ]
}