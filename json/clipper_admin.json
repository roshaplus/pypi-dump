{
  "info": {
    "author": "Dan Crankshaw",
    "author_email": "crankshaw@cs.berkeley.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Clipper\n\n[![Build Status](https://amplab.cs.berkeley.edu/jenkins/buildStatus/icon?job=Clipper)](https://amplab.cs.berkeley.edu/jenkins/job/Clipper/)\n\n## Project Overview\n\n![Clipper System Overview](images/clipper_arch.png)\n\n## What is Clipper?\n\nClipper is a prediction serving system that sits between user-facing applications and a wide range of commonly used machine learning models and frameworks.\n\n## What does Clipper do?\n\n* Clipper **simplifies integration of machine learning techniques** into user facing applications by providing a simple standard REST interface for prediction and feedback across a wide range of commonly used machine learning frameworks.  *Clipper makes product teams happy.*\n\n\n* Clipper **simplifies model deployment** and **helps reduce common bugs** by using the same tools and libraries used in model development to render live predictions.  *Clipper makes data scientists happy.*\n\n\n\n* Clipper **improves throughput** and ensures **reliable millisecond latencies** by introducing adaptive batching, caching, and straggler mitigation techniques.  *Clipper makes the infra-team less unhappy.*\n\n* Clipper **improves prediction accuracy** by introducing state-of-the-art bandit and ensemble methods to intelligently select and combine predictions and achieve real-time personalization across machine learning frameworks.  *Clipper makes users happy.*\n\n\n## Why are we building Clipper?\n\nWe are group of researchers in the UC Berkeley [RISE Lab](https://rise.cs.berkeley.edu/) studying the fundamental challenges around taking machine learning to production.  In collaboration with leading industrial and research organizations ([sponsors](https://rise.cs.berkeley.edu/sponsors/)), we identified model deployment as one of the next big challenges in the wide-scale adoption of AI technologies.\n\nDeploying trained machine-learning models into production today is an ad-hoc, labor-intensive, and error-prone process. This creates an enormous impediment to building and maintaining user-facing applications that incorporate machine-learning.\n\nClipper is designed to simplify this process by decoupling applications that\nconsume predictions from trained models that produce predictions.\nClipper is a robust, high-performance serving system that can scale to thousands of requests per second and provide \nresponses that meet latency service level objectives on the order of milliseconds.\nAs a result, Clipper can be safely incorporated into a production serving stack without negatively\nimpacting application latencies.\n\nAt the same time, Clipper allows data scientists to easily deploy trained models to production.\nData science is an iterative process, and simplifying the model deployment process allows\ndata scientists to more easily experiment with new features and models to quickly improve\napplication accuracy. Data scientists deploy models to Clipper with the same code used for\ntraining, eliminating a common class of bugs in machine-learning that arise from code duplication.\nAnd Clipper supports deploying models trained in many machine learning frameworks and implemented\nin a variety of programming languages to support the rich ecosystem of data science tools available today.\n\n\n\n## Key Features\n\n+ Deploy models trained in your choice of framework to Clipper with a few lines of code by using an existing model container or writing your own\n+ Easily update or add models to running applications\n+ Use adversarial bandit algorithms to dynamically select best model for prediction at serving time\n+ Set latency service level objectives for reliable query latencies\n+ Run each model in a separate Docker container for simple cluster management and resource allocation\n+ Deploy models running on CPUs, GPUs, or both in the same application\n\n## Getting Started\n\nThe easiest way to get started running Clipper is with Docker.\n\nDownload the Clipper [`docker-compose.yml`](docker/docker-compose.yml) configuration and start Clipper:\n\n```sh\ncurl -O https://raw.githubusercontent.com/ucbrise/clipper/develop/docker/docker-compose.yml \\\n       && docker-compose up -d query_frontend\n```\n\nAlternatively, if you've already cloned the repository, you can run:\n\n```sh\ncd docker && docker-compose up -d query_frontend\n```\n\nFor an example of querying Clipper, see the Python [example client](examples/basic_query/example_client.py).\n\nThe best way to explore Clipper's features is through the [tutorial](examples/tutorial/tutorial.md).\n\nFor more information on running Clipper with Docker, check out the [Docker README](docker/README.md).\n\n## Next Steps\n\n### Developing Clipper\n\nDevelopment of Clipper is coordinated through GitHub.\n\nTo get started, clone the repository including submodules:\n\n```sh\ngit clone --recursive https://github.com/ucbrise/clipper.git\n```\n\n> If you've already cloned the repository at this point without the submodules,\n> you can include them by running `git submodule update --init --recursive` in\n> the Clipper repo.\n\n__Build Dependencies:__\n\n+ Boost >= 1.60\n+ cmake >= 3.2\n+ zeromq >= 4.1.6\n+ hiredis\n+ libev\n+ redis-server >= 3.2\n\n\n__Building Clipper:__\n\nFirst generate the CMake files with `./configure`. This generates an out-of-source build directory called `debug`.\nGo into this directory and then run `make` to actually\ncompile the code. You should only need to re-run the configuration script if you change one of the `CMakeLists.txt` files.\nTo build for release, run `./configure --release` which generates the `release` build directory instead of debug.\nIf you want to clean everything up, you can run `./configure --cleanup` (if you get tired of being prompted, you can run `./configure --cleanup-quiet` to force cleanup without prompting).\n\n__NOTE:__ Redis must be installed and on your path to run both the query REST frontend and the unit-tests.\nYou can test this with `redis-server --version`.\n\nFor example:\n\n```sh\ncd $CLIPPER_ROOT_DIR\n./configure\ncd debug\nmake\n\n# write some code and compile it\nmake\n\n# build and run unit tests with googletest\n../bin/run_unittests.sh\n\n# build and then start the query REST frontend\n../bin/start_clipper.sh\n\n```\n\n__Using Vagrant:__\n\nYou can use Vagrant to automatically create a development environment in a virtual machine.\nThis is one method for using Windows for Clipper development. Before you start, you must have [Vagrant](https://www.vagrantup.com/) and [VirtualBox](https://www.virtualbox.org/wiki/VirtualBox)\ninstalled.  Once you have them installed, perform the following command to initialize Vagrant.\n\n```sh\nvagrant up\n```\n\nAnd the environment will be created for you. You can now edit Clipper files\non your local machine and when you want to test your changes, you can just\nperform the following commands:\n\n```sh\n# Log in to the virtual machine\nvagrant ssh\n\n# Enter root Clipper directory\ncd /vagrant\n\n# Run tests\n./bin/run_unittests.sh\n```\n\nClipper has been tested on OSX 10.11, 10.12, and on Debian stretch/sid and Ubuntu 12.04 and 16.04. It does not support Windows.\n\n## Status and Roadmap\n\nClipper is currently under active development in preparation for an 0.1 alpha release\nin mid-April.\n\n### Features for 0.1 Release\n\nThe 0.1 release will be focused on providing a reliable, robust system for serving\npredictions for single model applications.\n\n+ First class support for application and model management via a management REST API and accompanying Python client-side management library\n+ Robust system implementation to minimize application downtime\n+ First class support for serving Scikit-Learn models, Spark ML and Spark MLLib models,\n  and arbitrary Python functions with pre-implemented model containers\n+ Extensible metrics library for measuring and reporting system performance metrics\n\n\n### Beyond 0.1\n\nThe priorities of Clipper in the near-term are to improve support for the entire\nmachine-learning application lifecycle, including the ongoing maintenance and evolution\nof deployed machine-learning applications and support for new types of models and specialized\nhardware support. Critical features include:\n\n+ Support for selection policies and multi-model applications including the use of adversarial bandit algorithms\n+ Model performance monitoring to detect and prevent application performance degradation over time\n+ New scheduler design to leverage the model and resource heterogeneity common to machine learning applications\n\n## Additional Resources\n\n+ [Design Doc (work-in-progress)](https://docs.google.com/document/d/1Ghc-CAKXzzRshSa6FlonFa5ttmtHRAqFwMg7vhuJakw/edit?usp=sharing)\n+ [Research Paper](https://arxiv.org/abs/1612.03079)\n+ [Talk at Spark Summit East 2017](https://spark-summit.org/east-2017/events/clipper-a-low-latency-online-prediction-serving-system/) [[Slides]](https://www.slideshare.net/SparkSummit/clipper-a-lowlatency-online-prediction-serving-system-spark-summit-east-talk-by-dan-crankshaw) [[Video]](https://youtu.be/4sdK2dp94Hw)\n\n\n## Contributing\n\nTo file a bug or request a feature, please file a GitHub issue. Pull requests are welcome.\n\nBefore filing a pull request, make sure that C++ code conforms to the project's Clang-Format style file and Python code conforms to the PEP 8 style. To automatically format your code before submitting a pull request, you can use\nthe provided formatting script:\n\n```sh\n./bin/format_code.sh\n```\n\n\nOur mailing list is <clipper-dev@googlegroups.com>. For more information about the project, please contact Dan Crankshaw (<crankshaw@cs.berkeley.edu>).\n\nDevelopment planning and progress is tracked with the [Clipper Jira](https://clipper.atlassian.net/projects/CLIPPER/issues).\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\n## Acknowledgements\n\nThis research is supported in part by DHS Award HSHQDC-16-3-00083, DOE Award SN10040 DE-SC0012463, NSF CISE Expeditions Award CCF-1139158, and gifts from Ant Financial, Amazon Web Services, CapitalOne, Ericsson, GE, Google, Huawei, Intel, IBM, Microsoft and VMware.\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://clipper.ai",
    "keywords": "clipper,prediction,model,management",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "clipper_admin",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/clipper_admin/",
    "release_url": "https://pypi.org/project/clipper_admin/0.1.2/",
    "requires_python": null,
    "summary": "Admin commands for the Clipper prediction-serving system",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "28cbfe28db1bd2d788a861adf223b339",
          "sha256": "ff276a3a5e86d1653ce445fdfeb95c2bafe858065a97610156c7fe97b30c2be8"
        },
        "downloads": 0,
        "filename": "clipper_admin-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "28cbfe28db1bd2d788a861adf223b339",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28642,
        "upload_time": "2017-05-22T23:40:17",
        "url": "https://files.pythonhosted.org/packages/2f/14/502a7a1282f69dbb7c3bc68c0e32cdd8da2dfaea7fdd4f6ef63f9ee81f4f/clipper_admin-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c79d0f53033dd242493a6af5669b5ca3",
          "sha256": "35614fe2409bf3d2e21a9d0f526646119ffbbc2e1945d49cf608d9d2e988e38c"
        },
        "downloads": 0,
        "filename": "clipper_admin-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c79d0f53033dd242493a6af5669b5ca3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28632,
        "upload_time": "2017-05-23T20:56:40",
        "url": "https://files.pythonhosted.org/packages/81/79/c8f4f265df28dee1b75405b5e6f0e0c8ac76ec58e6c2d3c4f0e9fae12885/clipper_admin-0.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c79d0f53033dd242493a6af5669b5ca3",
        "sha256": "35614fe2409bf3d2e21a9d0f526646119ffbbc2e1945d49cf608d9d2e988e38c"
      },
      "downloads": 0,
      "filename": "clipper_admin-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c79d0f53033dd242493a6af5669b5ca3",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 28632,
      "upload_time": "2017-05-23T20:56:40",
      "url": "https://files.pythonhosted.org/packages/81/79/c8f4f265df28dee1b75405b5e6f0e0c8ac76ec58e6c2d3c4f0e9fae12885/clipper_admin-0.1.2.tar.gz"
    }
  ]
}