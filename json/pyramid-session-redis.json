{
  "info": {
    "author": "Jonathan Vanasco",
    "author_email": "jonathan@findmeon.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Pyramid",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "IMPORTANT\n=========\n\n`pyramid_session_redis` is an actively maintained fork of `pyramid_redis_sessions` (ericrasmussen/pyramid_redis_sessions), with many improvements and API changes designed for high performance (particularly with servers under load) and a slightly different API for developer convenience.\n\nThis package is now following a multi-version release process.  \n\nThe 1.2.x branch is in maintenance mode as of 1.2.2, and will culminate in a final 1.3.0 release.  \n\nThe 1.4.x branch is under active development and subject to change.  It will culminate in a stable 1.5.0 API release.\n\n----\n\nThe 1.2.x branch and earlier are largely compatible with `pyramid_redis_sessions` as-is.  If you are using this, you should pin your\u00a0installs to `<=1.3.0` or `<1.3`.\n\nThe 1.4.x branch and later have several design changes and are not a drop-in replacement.  Some kwargs may have changed.  The structure of the package has changed as well, and advanced users who leverage the internals will need to upgrade.  The package remains a plug-and-play pyramid sessions interface.\n\n\nKey Differences:\n================\n\nDepending on your needs, this package is probably more desirable than the original project.  This package significantly cuts down on the communication between Redis and Pyramid vs the original implementation.  Some options are offered to minimize the size of payloads as well.\n\nThis package contains a lot of hooks and features to aid developers who are using this in high-traffic situations.  This package does not recommend a \"best deployment\", but offers different strategies for creating a best deployment under different circumstances.\n\n\nThrough 1.2.x\n---------------\n\n* The original package communicates with Redis on most attribute access and writes. The traffic can be too much on some implementations.  `pyramid_session_redis` will queue a single `persist` or `refresh` task using Pyramid's `add_finished_callback` hook.\n* The original version used `EXISTS` to check if a session existed or not, then proceeded to `GET` or `SET` a new session.  `pyramid_session_redis` will immediately attempt a `GET`, and will `SET` a new session on failure.  This eliminates a call.\n* Separate calls to `SET` and `EXPIRE` were replaced with a single `SETEX`\n* A flag can be set to enable a LRU Cache (least recently used) mode. No expiry data will be sent to Redis, allowing the Redis server to handle the LRU logic itself\n* The active `session` is decoupled from the request attribute (ie, this can handle a \"session\" set up on alternate attributes)\n* The original library does not detect changes in nested dictionaries. This package uses `hashlib.md5` to fingerprint the serialized value on read; if no changes were detected a failsafe will serialize+md5 the data to decide if a write should occur. This can be disabled by setting `detect_changes` to False.\n* The original raises a fatal error if a session can not be deserialized.  by passing in `deserialized_fails_new` to the constructor, you can create a new session on deserialization errors.\n* Support for disabling sessions on CDN generated content via `func_check_response_allow_cookies`\n* Thanks to @ github/hongyuan1306, token generation has been consolidated to use python3's stdlib (or reimplemented if not available).  tokens are also 32, not 20, chars.\n* redis is supported in a LRU mode (see http://redis.io/topics/lru-cache) by setting the option `set_redis_ttl` to `False` (by default, it is `True`).  This will eliminate calls to `EXPIRE` and will use `SET` instead of `SETEX`.\n* in the 1.2.x branch the created time can be set to an integer via `use_int_time=True`.  This will cast the `created` time via \"int(math.ceil(time.time()))\".  This can reduce a payload by several bits. \n\nOther Updates 1.4.x+\n====================\n* only int() time is supported.\n* sessions now have version control to support future upgrades via a \"version\" `v` key.\n* the format of the internal payload was rewritten, the encoded payload now uses 1-letter keys instead of words.  this should offset the addition of an expires timestamp and version id.\n* there was no logic for python timeout control (whoops!) this has been fixed.  an \"expires\" `x` key now tracks the expiration.\n* added a `timeout_trigger` option.  this will defer expiry data updates to lower usage on Redis.  This is explained below in more detail.\n* In high load situations, Redis can have performance and storage issues because in the original package sessionIDs are created on every request (such as a getting spidered by a botnet that does not respect sessions). in this package, a 'lazycreate' method is used.  a session_id/cookie will not be generated unless a session is needed in the callback routine.  in order to generate session_id/cookie beforehand, one can use the `RedisSession.ensure_id` function.  To safely check if a session_id exists, one can use the `RedisSession.session_id_safecheck` method as well.\n* added `func_invalid_logger` to constructor. this can be used to log invalid sessions. it is incredibly useful when integrated with a statsd system. (see below)\n\n\n\nNotes:\n======\n\nIf ``set_redis_ttl`` is False, it does not imply there is no timeout at all -- only that Redis will not be sent timeout data via `SETEX` or `EXPIRE`.  Timeout data will still be stored in Python.\n\nIf Redis is functioning as an LRU Cache, abandoned sessions will never be seen by Python, but will eventually be cleared out to make room for new sessions by the inherent Redis LRU logic.\n\nTimeout data stored in Python is relatively small when compared to the timeout data stored in Redis.\n\nIf you want to NEVER have sessions timeout, set the initial `timeout` to \"0\" or \"None\".\n\nSetting a timeout_trigger will require Python to track the expiry.\n\nExamples:\n---------\n\nTimeout in Python, with Redis TTL via `SETEX`/`EXPIRE`:\n\n\ttimeout = 60\n\nTimeout in Python, no Redis TTL (only `SET` used)\n\n\ttimeout = 60\n\tassume_redis_ttl = True\n\t\nNo Timeout in Python, no Redis TTL (only `SET` used)\n\n\ttimeout = 0  # or None\n\tassume_redis_ttl = True\n\n\nTimeout Triggers\n=================\n\nA timeout trigger can be used to limit the amount of updates/writes.  It may be more beneficial to your usage pattern.\n\nScenario 1 - Classic Redis\n--------------------------\n\nIn the typical \"classic\" Redis usage pattern, the session usage is refreshed via an `EXPIRE` call on every session view\n\nThis is useful, but means many session operations will trigger two Redis calls (`GET` + `EXPIRE`).  On a high performance system, this can be a lot.\n\nThis is a typical scenario with refreshing:\n\n```\ntimeout = 200\n\ntime \t\tRedis Calls\t\ttimeout\n0\t\t\tGET+SETEX\t\t200\n100\t\t\tGET+EXPIRE\t\t300\n200\t\t\tGET+EXPIRE\t\t400\n300\t\t\tGET+EXPIRE\t\t500\n400\t\t\tGET+EXPIRE\t\t600\n500\t\t\tGET+EXPIRE\t\t700\n```\n\nScenario 2 - Timeout Trigger\n--------------------------\n\nThe 1.4.x branch introduces a `timeout_trigger` to augment the session's `timeout`.\n\nWhereas a `timeout` states how long a session is good for, a `timeout_trigger` defers how long a session's refresh should be deferred for:\n\nGiven the following example, the package will use a 1200s timeout for requests, but only trigger an update of the expiry time when the current time is within 600s of the expiry\n\n```\ntimeout = 1200\ntimeout_trigger = 600\n```\n\nThe following timeline would occur\n\n```    \ntime    \tRedis Calls\t\ttimeout\t\tnext threshold\n0\t\t\tGET+SET*  \t\t1200\t\t600\n1\t\t\tGET\t\t\t\t1200\t\t600\n..\n599\t\t\tGET\t\t\t\t1200\t\t600\n600\t\t\tGET+SET* \t\t1800\t\t1200\n601\t\t\tGET    \t\t\t1800\t\t1200\n...\n1199\t\tGET    \t\t\t1800\t\t1200\n1200\t\tGET+SET*\t\t2400\t\t1800\n```\t\n\n* This method is compatible with setting a TTL in redis via `SETEX` or doing everything within Python if redis is in a LRU mode\n\nThe removes all calls to `EXPIRE` before the threshold is reached, which can be a considerable savings in read-heavy situations\n\nThe caveat to this method: an expiry timestamp must be stored within the payload AND updating the timeout requires a `SET` operation.\n\n\nInvalid Logging\n================\n\nThe default behavior of this library is to silently create new session when bad session data is encountered, such as a cookie with an invalid id or corrupted datastore.  A graceful \"new session\" is the ideal situation for end-users.\n\nThe problem with that strategy is that problems in code or your application stack can be hidden, and you might not know about a bad datastore.\n\nThe 1.4 release introduces `func_invalid_logger` to the factory constructor. \nThis can be used to track the invalid sessions that are safely caught and silently upgraded \n\nHow?  The package tracks why a session is invalid with variant classes of `pyramid_session_redis.exceptions.InvalidSession`\n\nSpecifically there are the following classes:\n\n* ``InvalidSession(Exception)`` Catchall base class\n* ``InvalidSession_NoSessionCookie(InvalidSession)`` The session is invalid because there is no cookie.  This is the same as \"new session\".\n* ``InvalidSession_NotInBackend(InvalidSession)`` The session id was not in the backend\n* ``InvalidSession_DeserializationError(InvalidSession)`` Error deserializing.  This is raised if ``deserialized_fails_new`` is True. Otherwise the exception is wrapped in a ``RawDeserializationError`` and raised without being caught.\n* ``InvalidSession_PayloadTimeout(InvalidSession)`` The inner python payload timed out\n* ``InvalidSession_PayloadLegacy(InvalidSession)`` The session is running on an earlier version\n\nThe factory accepts a `func_invalid_logger` callable argument.  The input is the raised exception BEFORE a new cookie is generated, and will be the request and an instance of `InvalidSession`.\n\n\tfrom pyramid_session_redis.exceptions import *\n\tfrom my_statsd import new_statsd_client()\n\t\n\tstatsd_client = new_statsd_client()\n\n    def my_logger(request, raised_exception):\n    \t\"\"\"\n    \traised_exception will be an instance of InvalidSession\n    \tlog the exception to statsd for metrics\n    \t\"\"\"\n    \tif isinstance(raised_exception, InvalidSession_NoSessionCookie):\n    \t\tstatsd_client.incr('invalid_session.NoSessionCookie')\n    \telif isinstance(raised_exception, InvalidSession_NotInBackend):\n    \t\tstatsd_client.incr('invalid_session.NotInBackend')\n    \telif isinstance(raised_exception, InvalidSession_DeserializationError):\n    \t\tstatsd_client.incr('invalid_session.DeserializationError')\n\n\tfactory = RedisSessionFactory(...\n\t\t\t\t\t\t\t\t  func_invalid_logger=my_logger,\n\t\t\t\t\t\t\t\t  ...\n\t\t\t\t\t\t\t\t  )\n\t\t\nThe `func_invalid_logger` argument may be provided as a dotted-notation string in a settings file.\n\nUncaught Errors\n================\n\nThe exception `pyramid_session_redis.exceptions.RawDeserializationError` will be raised if deserialization of a payload fails and `deserialized_fails_new` is not `True`.  The message attribute will be the caught exception. This allows for a standard error across multiple deserialization options.\n\n\nFAQ:\n================\n\ncoming soon\n\n\n\nTo Do:\n================\n\n[ ] The API is a bit messy on the 1.4.x release. \n[ ] Creating a new session still takes 2 SET/SETEX calls -- one for a placeholder, the next to update.  This should be consolidated into one.\n\n\nFurther Reading:\n================\n\n\nFor more information about Redis performance under python please see an associated project:\n\n* https://github.com/jvanasco/dogpile_backend_redis_advanced\n\nUntil Nov 2016 this was maintained as `jvanasco/pyramid_redis_sessions`\n\n* The master branch for `jvanasco/pyramid_redis_sessions` is \"custom_deployment\"\n* The branched named \"master\" is the upstream source from ericrasmussen\n\nAs of Nov 2016, this was forked into it's own project to allow for distribution.\n\nAll support is handled via GitHub : https://github.com/jvanasco/pyramid_session_redis\n\n\nToDo\n=====\n\npass\n\n\nOverview\n========\n\npyramid_redis_sessions is a server-side session library for the Pyramid Web\nApplication Development Framework, using Redis for storage. This library\nimplements the `Pyramid ISession interface <http://docs.pylonsproject.org/projects/pyramid/en/latest/api/interfaces.html#pyramid.interfaces.ISession>`_.\n\n\nWhy Use Redis for Your Sessions\n===============================\nRedis is fast, widely deployed, and stable. It works best when your data can\nfit in memory, but is configurable and still quite fast when you need to sync\nto disk. There are plenty of existing benchmarks, opinion pieces, and articles\nif you want to learn about its use cases. But for `pyramid_redis_sessions`, I'm\ninterested in it specifically for these reasons:\n\n* it really is bleeping fast (choose your own expletive)\n* it has a very handy built-in mechanism for setting expirations on keys\n* the watch mechanism is a nice, lightweight alternative to full transactions\n* session data tends to be important but not mission critical, but if it is...\n* it has configurable `persistence <http://redis.io/topics/persistence>`_\n\n\nDocumentation\n=============\n\nTo get up and running as fast as possible, check out the\n`Getting Started <http://pyramid-redis-sessions.readthedocs.org/en/latest/gettingstarted.html>`_\nguide.\n\nYou can also read the\n`full documentation <http://pyramid-redis-sessions.readthedocs.org/en/latest/index.html>`_\non Read the Docs.\n\n\nSupport\n=======\n\nYou can report bugs or open feature/support requests in the\n`GitHub issue tracker <https://github.com/ericrasmussen/pyramid_redis_sessions/issues>`_.\n\nYou can also get live help in #pyramid on irc.freenode.org. My nick is erasmas,\nbut if I'm not available you can still typically get support from the many other\nknowledgeable regulars.\n\n\nLicense\n=======\n\npyramid_redis_sessions is available under a FreeBSD-derived license. See\n`LICENSE.txt <https://github.com/ericrasmussen/pyramid_redis_sessions/blob/master/LICENSE.txt>`_\nfor details.\n\n\n=========\nChangelog\n=========\n\n- Unreleased\n\t* skipped 1.3 release.  not enough usage to warrant backwards compat right now\n    * a bunch of api changes to support lazy-created sessions.  the original structure would immediately create sessions, which can cause issues with bots and spidering.\n    \n-10/17/2017\n    * version 1.4.0\n    * updated deprecation warnings\n    * prepping for ability to not create sessions on every access.  getting spidered by bots who don't use sessions hurts Redis.\n    * renamed `util.get_unique_session_id` to `util.create_unique_session_id`\n    * added `util.empty_session_payload`\n    * migrated some RedisSessionFactory functions into a more global (not per-request) block\n    * added `func_invalid_logger` to session factory, also renamed internal exceptions. they were not a public api so there is no deprecation issue.\n    * this seems fine in our production usage, so pushing live.\n\n-1/24/2017:\n    * version 1.2.2\n    * merged most of pull request https://github.com/jvanasco/pyramid_session_redis/pull/3 from Chad Birch (@Deimos)\n    * clarified assume_redis_lru in docs, added tests\n    * added `force_redis_ttl` kwarg to `RedisSession.do_refresh`\n    * added `set_redis_ttl` deprecating it's inverse: `assume_redis_lru`.  the `assume_redis_lru` kwarg will be supported until the 1.4.0 release.\n    * added `use_int_time` as session factory arg. this will cast the `created` time to int(math.ceil(time)), saving some space\n    \n-1/17/2017:\n    * version 1.2.1\n    * fixed bug with session.invalidate that caused placeholder sessions to be created( https://github.com/jvanasco/pyramid_session_redis/issues/2 )\n    * added test to guard against above bug\n    * fixed some whitespace issues (trailing spaces, tabs-not-spaces)\n    * migrated pacakge version id from setup.py into __init__.py as \"__VERSION__\" variable.\n    * migrated tests and code to handle webob 1.7's deprecation of cookie values\n\n-12/23/2016:\n    * version 1.2.0\n    * merged PR1 from hongyuan1306 (https://github.com/jvanasco/pyramid_session_redis/pull/1)\n        * Make the package Python3 compatible\n        * Consolidate token/session generation\n        * Leverage token/session generation from python3.6 stdlib; fallback otherwise.\n    * updated the bits on token_urlsafe from 32 to 48; this encodes to a 64 character string\n\n-11/10/2016:\n    * version 1.1.2\n    release error fix.\n\n-11/10/2016:\n    * version 1.1.1\n    * integrated/rewrote pr from pyramid_redis_sessions for session leakage on cdns\n        https://github.com/ericrasmussen/pyramid_redis_sessions/pull/74/files\n    * response.vary will now ensure `Cookie`\n    * Session factory now accepts `func_check_response_allow_cookies(response)` a callable which can disable setting the cookie.\n    * streamlined some work in utils\n\n-11/09/2016: renamed to pyramid_session_redis\n\n-08/15/2016: Changes for jvanasco branch\n    * added `deserialized_fails_new` to handle deserialization errors\n\n-08/02/2016: Changes for jvanasco branch\n    * made the detection of nested changes configurable. by default this is set to True.\n\n-06/16/2016: Changes for jvanasco branch\n\n    * changed `persist` from being \"on demand\" into a single callback via pyramid's `add_finished_callback`\n    * changed `refresh` from being \"on demand\" into a single callback via pyramid's `add_finished_callback`\n    * decoupled active `session` from being a particular named attribute on the \"request\".\n    * removed an initial call to redis' `EXISTS`. Instead of \"If EXISTS then GET\", we simply GET the active session and create a new one if it does not exist.\n    * replaced separate calls to \"SET\" and \"EXPIRE\" with single \"SETEX\"\n    * added a feature to assume redis is operating as a LRU cache, therefore not sending expiry data\n    * ensure nested session values trigger a persist by calculating an md5 hash of the serialized session data on load; then again in the finished callback\n\n----------\n\n\n-Initial Release\n\n-09/24/2012: 0.9 beta release\n\n-11/12/2012: raise ConfigurationError if required redis.sessions.secret setting\n             is missing.\n\n-02/17/2013: New API method: adjust_timeout_for_session. This method allows you\n             to permanently alter the timeout setting for a given session for\n             the duration of the session.\n\n             Note: on a development branch this was known as\n             \"reset_timeout_for_session\" but was renamed to avoid confusion\n             with the internal act of resetting timeouts each time the session\n             is accessed.\n\n             Additional changes include:\n\n                 1) Removing the unused \"period\" setting\n                 2) Fixing an error with the cookie_on_exception setting\n                 3) Using asbool for boolean settings\n                 4) Adding documentation\n                 5) Adding new configuration options (see the docs for details)\n\n\n              Internal (non-API) changes include:\n\n                 * renamed the new session flag from \"_v_new\" to \"_rs_new\"\n                 * remove util module's dependency on cPickle\n                 * always cast the timeout setting as an int\n                 * removing unused imports\n                 * many updates and additions to docstrings/comments\n                 * moving the redis connection/client logic to a new module\n\n-06/30/2013: New configuration options:\n\n                * redis.sessions.client_callable (supply your own redis client)\n                * redis.sessions.serialize (use your own pickling function)\n                * redis.sessions.deserialize (use your own unpickling function)\n                * redis.sessions.id_generator (callable to generate session IDs)\n                * redis.sessions.prefix (add a prefix to session IDs in redis)\n\n             BREAKING CHANGE: cookie_httponly now defaults to True. If you are\n               currently relying on outside scripts being able to access the\n               session cookie (a bad idea to begin with), you will need to\n               explicitly set::\n\n                   redis.sessions.cookie_httponly = False\n\n               For most (likely all) users, you will not notice any difference.\n\n               Reference: https://www.owasp.org/index.php/HttpOnly\n\n\n             Session ID generation: session IDs are now generated with an\n               initial value from os.urandom, which (according to the offical\n               python docs) is \"suitable for cryptographic use\". The previous\n               implementation was concerned primarily with integrity. This\n               update improves on integrity but also adds a greater level of\n               security.\n\n-10/13/2013: Many documentation improvements, and some minor refactoring (better\n             comments, removing unused functions, etc).\n\n             This update has been in the works on the github master for months\n             with no releases to pypi. It marks another major version bump,\n             this time to 1.0a. Releases will follow a more typical versioning\n             model from now on (similar to Pyramid's).\n\n\n-06/15/2014: Changes for 1.0a2\n\n             * **BREAKING CHANGE**: The ``.created`` and ``.timeout`` attributes\n               of the session are now serialized and stored in Redis alongside\n               the session dict in another dict. This and the other changes to\n               ``.created`` and ``.timeout`` means pyramid_redis_sessions>=1.0a2\n               will not be able to deserialize sessions created with\n               pyramid_redis_sessions<1.0a2. No code changes are required, but\n               please be prepared to clear out existing session data prior to\n               upgrading.\n\n             * Bug fix: ``RedisSession.created`` was storing and returning the\n               time when the ``RedisSession`` instance was initialised, rather\n               than the time the actual session was first created. This has now\n               been fixed.\n\n             * Bug fix: The ``timeout`` value has been moved out of the session\n               dict, as it is not part of the session (previously it was stored\n               in the session dict under the key ``_rs_timeout``, and would be\n               lost for example when we cleared the session.)\n\n             * Bug fix: The session now supports starting a new session (with a\n               new session_id) within the same request after ``.invalidate()``.\n               (Previously this was not possible, as ``.invalidate()`` cleared\n               the session dict but did not change the session_id, and set a\n               header to delete the cookie that meant any changes to the\n               session after ``.invalidate()`` were lost.)\n\n               The way ``.invalidate()`` previously handled deleting the cookie\n               also meant that there would be more than one Set-Cookie headers\n               for the same cookie name, which should not happen according to\n               RFC 6265.  This has been fixed to set the one correct Set-Cookie\n               header, and only when it is necessary (for example, a new\n               session that is invalidated in the same request without further\n               access to the session would not need to set any cookie).\n\n               ``.invalidate()`` also now deletes the session from Redis rather\n               than just relying on it to expire.\n\n\n             * Bug fix: The ``cookie_path`` setting had no effect, as it was\n               not being used to set and delete cookie. This has been fixed, we\n               now set and delete cookie with the specified ``cookie_path`` as\n               expected.\n\n             * Bug fix: The ``cookie_domain`` setting value was not being used\n               when setting a header to delete cookie, meaning any cookie with\n               a domain different from the default was not being deleted (as a\n               cookie only gets deleted if the path and domain match the ones\n               used when the cookie was set). This is now fixed.\n\n             * Fixed the default value of the ``cookie_httponly`` setting in\n               the docstring, where the default had previously been changed\n               from False to True but the docstring had not been updated with\n               it.\n\n             * pyramid_redis_sessions has dropped support for Python 2.6 and\n               now requires Python >= 2.7.\n\n             Internal (non-API) changes:\n\n             * ``RedisSession``'s ``timeout`` parameter and\n               ``.default_timeout`` attribute have been removed, as they are no\n               longer needed now that the timeout is inserted into Redis by the\n               factory at the beginning of a new session.\n             * Added tests for cookie-related factory parameters.\n             * Organised imports to PEP 8.\n\n             Upstream package issue: redis-py introduced a breaking (and\n             undocumented) API change in redis==2.10 (see\n             https://github.com/andymccurdy/redis-py/issues/510 for\n             details). Pinning to redis<=2.9.1 until getting confirmation on\n             whether it's a bug that will be fixed, or if we'll need to\n             accommodate two different APIs to use newer versions going forward.\n\n-02/20/2015: Changes for 1.0.1\n\n             * Removed redis-py upper bound to support new versions of redis-py\n\n             * No longer pass unused settings to `StrictRedis.from_url` (no\n               behavior changes since if you were passing in those settings\n               before they were being ignored)\n\n             * Updated to official/stable release version after successful\n               alpha period and in order to support pip installs",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jvanasco/pyramid_session_redis",
    "keywords": "pyramid session redis",
    "license": "FreeBSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyramid-session-redis",
    "platform": "",
    "project_url": "https://pypi.org/project/pyramid-session-redis/",
    "release_url": "https://pypi.org/project/pyramid-session-redis/1.4.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Pyramid web framework session factory backed by Redis",
    "version": "1.4.0"
  },
  "releases": {
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "27bd35685862bbf3a2d24af332107612",
          "sha256": "bca296d98a42c719cee768799d17563acfa4d69cb2170a9e136a4067001c1702"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "27bd35685862bbf3a2d24af332107612",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23328,
        "upload_time": "2016-11-10T21:10:18",
        "url": "https://files.pythonhosted.org/packages/6d/56/276c655ef1fd80d7b8a4d3de0cc95345aaf5851a84240336514ce677651e/pyramid_session_redis-1.1.2.tar.gz"
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4c14439f3a110274c4e078bd4b90d877",
          "sha256": "3febcbe9b08be342d17510a2573f60ff7691acd67070b12c9522dd254d083d8d"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4c14439f3a110274c4e078bd4b90d877",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23896,
        "upload_time": "2016-12-23T18:19:08",
        "url": "https://files.pythonhosted.org/packages/c7/39/ada23afa3c308549b462d19c83dffe6f9589bbb8783c13059ccd8ba75d71/pyramid_session_redis-1.2.0.tar.gz"
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7a0da68c73d272d46e070a2629e3ad49",
          "sha256": "6f4e08f8d9ccef84c5b2e8fcb415aeae54be0783c1770217c174ad580f3a09b9"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7a0da68c73d272d46e070a2629e3ad49",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24743,
        "upload_time": "2017-01-17T17:28:39",
        "url": "https://files.pythonhosted.org/packages/2b/81/b46ac00089147890f9bbbf38a4f076217a9e4b3600fbd1ca4842292f79d6/pyramid_session_redis-1.2.1.tar.gz"
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c42d26520b6763089ff385f2702d01a5",
          "sha256": "44292dfa55fb74c893d2dbc76f35bfdd6e7c52a5c64626474cbb27f01ad77419"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c42d26520b6763089ff385f2702d01a5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27656,
        "upload_time": "2017-01-24T22:20:59",
        "url": "https://files.pythonhosted.org/packages/a3/cd/c01c779cedbca9c173ddfa2bb92776164ff28d296ec481273aec2693a3ee/pyramid_session_redis-1.2.2.tar.gz"
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c60bf9873deab88c4bddc4fc56c82094",
          "sha256": "1d8380410142c3172304a9a6c24832772baa1cd97d6579048786a6272b7650b4"
        },
        "downloads": -1,
        "filename": "pyramid_session_redis-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c60bf9873deab88c4bddc4fc56c82094",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 52237,
        "upload_time": "2017-10-17T15:53:54",
        "url": "https://files.pythonhosted.org/packages/1f/d9/84c6e8ca37cf0391157936caa8d2cef61e605e890a5100b91a8ad310ca08/pyramid_session_redis-1.4.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c60bf9873deab88c4bddc4fc56c82094",
        "sha256": "1d8380410142c3172304a9a6c24832772baa1cd97d6579048786a6272b7650b4"
      },
      "downloads": -1,
      "filename": "pyramid_session_redis-1.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c60bf9873deab88c4bddc4fc56c82094",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 52237,
      "upload_time": "2017-10-17T15:53:54",
      "url": "https://files.pythonhosted.org/packages/1f/d9/84c6e8ca37cf0391157936caa8d2cef61e605e890a5100b91a8ad310ca08/pyramid_session_redis-1.4.0.tar.gz"
    }
  ]
}