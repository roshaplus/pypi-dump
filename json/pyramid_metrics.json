{
  "info": {
    "author": "Pior Bastida",
    "author_email": "pbastida@ludia.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Pyramid",
      "Intended Audience :: Developers",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Topic :: Internet :: WWW/HTTP :: WSGI"
    ],
    "description": "===============\r\nPyramid_metrics\r\n===============\r\n\r\nPerformance metrics for Pyramid using StatsD. The project aims at providing\r\nways to instrument a Pyramid application in the least intrusive way.\r\n\r\n* PyPI: https://pypi.python.org/pypi/pyramid_metrics\r\n* Github: https://github.com/ludia/pyramid_metrics\r\n* |travis|\r\n\r\n.. |travis| image::\r\n   https://travis-ci.org/ludia/pyramid_metrics.svg?branch=master\r\n   :target: https://travis-ci.org/ludia/pyramid_metrics\r\n   :alt: Tests on TravisCI\r\n\r\n\r\nInstallation\r\n============\r\n\r\nInstall using setuptools, e.g. (within a virtualenv)::\r\n\r\n  $ pip install pyramid_metrics\r\n\r\n\r\nSetup\r\n=====\r\n\r\nOnce ``pyramid_metrics`` is installed, you must use the ``config.include``\r\nmechanism to include it into your Pyramid project's configuration.  In your\r\nPyramid project's ``__init__.py``:\r\n\r\n.. code-block:: python\r\n\r\n   config = Configurator(.....)\r\n   config.include('pyramid_metrics')\r\n\r\nAlternately you can use the ``pyramid.includes`` configuration value in your\r\n``.ini`` file:\r\n\r\n.. code-block:: ini\r\n\r\n   [app:myapp]\r\n   pyramid.includes = pyramid_metrics\r\n\r\n\r\nUsage\r\n=====\r\n\r\nPyramid_metrics configuration (values are defaults):\r\n\r\n.. code-block:: ini\r\n\r\n   [app:myapp]\r\n   metrics.host = localhost\r\n   metrics.port = 8125\r\n\r\n   metrics.prefix = application.stage\r\n\r\n   metrics.route_performance = true\r\n\r\n\r\nRoute performance\r\n=================\r\n\r\nIf enabled, the route performance feature will time the request processing.\r\nBy using the StatsD Timer type metric, pre-aggregation will provide information\r\non latency, rate and total number. The information is sent two times: per route\r\nand globally.\r\n\r\nThe key name is composed of the route name,\r\nthe HTTP method and the outcome (as HTTP status code or 'exc' for exception).\r\n\r\n- Global key ``request.<HTTP_METHOD>.<STATUS_CODE_OR_EXC>``\r\n- Per route key ``route.<ROUTE_NAME>.request.<HTTP_METHOD>.<STATUS_CODE_OR_EXC>``\r\n\r\n\r\nAPI\r\n===\r\n\r\nCounter\r\n-------\r\n\r\nStatsD type:\r\nhttps://github.com/etsy/statsd/blob/master/docs/metric_types.md#counting\r\n\r\n.. code-block:: python\r\n\r\n   # Increment a counter named cache.hit by 1\r\n   request.metrics.incr('cache.hit')\r\n\r\n   # Increment by N\r\n   request.metrics.incr(('cache.hit.read.total', count=len(cacheresult)))\r\n\r\n   # Stat names can be composed from list or tuple\r\n   request.metrics.incr(('cache', cache_action))\r\n\r\n\r\nGauge\r\n-----\r\n\r\nStatsD type:\r\nhttps://github.com/etsy/statsd/blob/master/docs/metric_types.md#gauges\r\n\r\n.. code-block:: python\r\n\r\n   # Set the number of SQL connections to 8\r\n   request.metrics.gauge('sql.connections', 8)\r\n\r\n   # Increase the value of the metrics by some amount\r\n   request.metrics.gauge('network.egress', 34118, delta=True)\r\n\r\n\r\nTimer\r\n-----\r\n\r\nStatsD type:\r\nhttps://github.com/etsy/statsd/blob/master/docs/metric_types.md#timing\r\n\r\n.. code-block:: python\r\n\r\n   # Simple timing\r\n   time_in_ms = requests.get('http://example.net').elapsed.microseconds/1000\r\n   request.metrics.timing('net.example.responsetime', time_in_ms)\r\n\r\n   # Using the time marker mechanism\r\n   request.metrics.marker_start('something_slow')\r\n   httpclient.get('http://example.net')\r\n   request.metrics.marker_stop('something_slow')\r\n\r\n   # Measure different outcome\r\n   request.metrics.marker_start('something_slow')\r\n   try:\r\n       httpclient.get('http://example.net').raise_for_status()\r\n   except:\r\n       # Send measure to key 'something_slow.error'\r\n       request.metrics.marker_stop('something_slow', suffix='error')\r\n   else:\r\n       # Send measure to key 'something_slow.ok'\r\n       request.metrics.marker_stop('something_slow', suffix='ok')\r\n\r\n   # Using the context manager\r\n   with request.metrics.timer(['longprocess', processname]):\r\n      run_longprocess(processname)\r\n      # Send measure to 'longprocess.foobar' or 'longprocess.foobar.exc'\r\n\r\n\r\nCurrently implemented\r\n=====================\r\n\r\n- Collection utility as a request method\r\n- Ability to send metrics per Pyramid route\r\n- Simple time marker mechanism\r\n- Simple counter\r\n- Context manager for Timing metric type\r\n\r\n\r\nTODO\r\n====\r\n\r\n- Full StatsD metric types\r\n- Extensions for automatic metrology (SQLAlchemy, MongoDB, Requests...)\r\n- Whitelist/blacklist of metrics\r\n- Time allocation per subsystem (using the time marker mechanism)\r\n\r\n\r\nConsiderations\r\n==============\r\n\r\n- The general error policy is: always failsafe. Pyramid_metrics should NEVER\r\n  break your application.\r\n- The DNS resolution is done during configuration to avoid recurring latencies.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ludia/pyramid_metrics",
    "keywords": "wsgi pylons pyramid statsd metric tween handler",
    "license": "BSD-derived (http://www.repoze.org/LICENSE.txt)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyramid_metrics",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pyramid_metrics/",
    "release_url": "https://pypi.org/project/pyramid_metrics/0.3.0/",
    "requires_python": null,
    "summary": "Performance metrics for Pyramid using StatsD",
    "version": "0.3.0"
  },
  "releases": {
    "0.0.1.dev1": [],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "695fab49abd3d57110e6e62994d0c5ed",
          "sha256": "b4cb55e6cf006f2336edd54e86ae14979ccc5b1b9977ce343112ab66ec73866f"
        },
        "downloads": 1569,
        "filename": "pyramid_metrics-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "695fab49abd3d57110e6e62994d0c5ed",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6173,
        "upload_time": "2014-05-06T19:58:05",
        "url": "https://files.pythonhosted.org/packages/92/17/617358e399529541bee7e54ec7c14eee913ab3895fe3d757a6f9ab6d1c98/pyramid_metrics-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b327c7c0ca865190357c282d505ef9dc",
          "sha256": "26221a96735d499ec03cbc4db65b96379a35b86d43cee7dc49ac2a822256d025"
        },
        "downloads": 1551,
        "filename": "pyramid_metrics-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b327c7c0ca865190357c282d505ef9dc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6186,
        "upload_time": "2014-05-06T20:24:40",
        "url": "https://files.pythonhosted.org/packages/c0/20/793ef6a41cc090f7b90244c819bacb3313ed2adabfb8c6e0076872118af2/pyramid_metrics-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "10f0964964d63168c5f96e3b5e48fbc9",
          "sha256": "f2cfdb4d99f0b75e06b954aa5d2399aa7f4136cb5c67fb121eb1284fec558a6a"
        },
        "downloads": 1545,
        "filename": "pyramid_metrics-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "10f0964964d63168c5f96e3b5e48fbc9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6321,
        "upload_time": "2014-05-07T16:33:59",
        "url": "https://files.pythonhosted.org/packages/96/b7/8a001f03b9af20fa02021a8d5d3a6b4ee9e7ca76093c0caafa7f83d7403e/pyramid_metrics-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2f96f8b5c76f8df9ae90a1e4223e7eb3",
          "sha256": "f90a066320328f766b6c9a0175248489641da3f6f0390c882ea50d7c02197209"
        },
        "downloads": 1594,
        "filename": "pyramid_metrics-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2f96f8b5c76f8df9ae90a1e4223e7eb3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8698,
        "upload_time": "2014-05-08T14:58:24",
        "url": "https://files.pythonhosted.org/packages/4c/39/a40643ab7c3892f8256fc8b5965086608c90f861230f0351da7eb8bcff53/pyramid_metrics-0.1.4.tar.gz"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "97e1470d6fdd452fed8376d784e232be",
          "sha256": "849314cecdea161e7e61df4c4cbd7b0a631b240b6b0becaf727d9104129302aa"
        },
        "downloads": 1626,
        "filename": "pyramid_metrics-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "97e1470d6fdd452fed8376d784e232be",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8896,
        "upload_time": "2014-05-30T16:38:49",
        "url": "https://files.pythonhosted.org/packages/5d/1c/302199adf3b10388c3bdc841bad4aa01a9733a3f519d641489eb4b92fb54/pyramid_metrics-0.1.5.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "13e105bf01ec88b132f0dc5e09d7bb26",
          "sha256": "9338cb4bf35c08b04e3f8855584ae0b71a32344f268d359a352283a38dd9beaf"
        },
        "downloads": 2188,
        "filename": "pyramid_metrics-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "13e105bf01ec88b132f0dc5e09d7bb26",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9774,
        "upload_time": "2014-08-19T18:27:33",
        "url": "https://files.pythonhosted.org/packages/dc/64/78d80f1deea976a50696dbcc501b5fd2533c2cf099404e6fdb83bed4e548/pyramid_metrics-0.2.0.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "12fc0b5bd6bf7502788bf359803c90fd",
          "sha256": "09464a5aa5773abb49f95a1ac4044ae7f0f418135a2ae4e6a35d6afe2206ea77"
        },
        "downloads": 2695,
        "filename": "pyramid_metrics-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "12fc0b5bd6bf7502788bf359803c90fd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9370,
        "upload_time": "2015-06-06T20:18:22",
        "url": "https://files.pythonhosted.org/packages/b1/62/77451de259e92500b5fed3866778ca6e8d869de853b0111087b4f631dd65/pyramid_metrics-0.3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "12fc0b5bd6bf7502788bf359803c90fd",
        "sha256": "09464a5aa5773abb49f95a1ac4044ae7f0f418135a2ae4e6a35d6afe2206ea77"
      },
      "downloads": 2695,
      "filename": "pyramid_metrics-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "12fc0b5bd6bf7502788bf359803c90fd",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9370,
      "upload_time": "2015-06-06T20:18:22",
      "url": "https://files.pythonhosted.org/packages/b1/62/77451de259e92500b5fed3866778ca6e8d869de853b0111087b4f631dd65/pyramid_metrics-0.3.0.tar.gz"
    }
  ]
}