{
  "info": {
    "author": "Konstantin Gr\u00fcndger aka Meisterschueler, Fabian P. Schmidt aka kerel",
    "author_email": "kerel-fs@gmx.de",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "ogn-python\r\n==========\r\n\r\n.. image:: https://img.shields.io/travis/glidernet/ogn-python.svg\r\n  :target: https://travis-ci.org/glidernet/ogn-python\r\n\r\n.. image:: https://img.shields.io/pypi/v/ogn-python.svg\r\n  :target: https://pypi.python.org/pypi/ogn-python\r\n\r\n\r\nA python module for the `Open Glider\r\nNetwork <http://wiki.glidernet.org/>`__. The submodule 'ogn.gateway' is\r\nan aprs client which could be invoked via a CLI or used by other python\r\nprojects. The CLI allows to save all received beacons into a database\r\nwith `SQLAlchemy <http://www.sqlalchemy.org/>`__. The\r\n`sqlite <https://www.sqlite.org/>`__-backend is sufficient for simple\r\ntesting, but some tasks (e.g. logbook generation) require a proper\r\nbackend like `postgresql <http://www.postgresql.org/>`__. An external\r\npython project would instantiate ogn.gateway and register a custom\r\ncallback, called each time a beacon is received.\r\n\r\n`Examples <https://github.com/glidernet/ogn-python/wiki/Examples>`__\r\n\r\nUsage - python module\r\n---------------------\r\n\r\nImplement your own gateway by using ogn.gateway with a custom callback\r\nfunction. Each time a beacon is received, this function gets called and\r\nlets you process the incoming data.\r\n\r\nExample:\r\n\r\n.. code:: python\r\n\r\n    #!/usr/bin/env python3\r\n\r\n    from ogn.model import AircraftBeacon, ReceiverBeacon\r\n    from ogn.gateway.client import ognGateway\r\n\r\n\r\n    def process_beacon(beacon):\r\n        if type(beacon) is AircraftBeacon:\r\n            print('Received aircraft beacon from {}'.format(beacon.name))\r\n        elif type(beacon) is ReceiverBeacon:\r\n            print('Received receiver beacon from {}'.format(beacon.name))\r\n\r\n\r\n    if __name__ == '__main__':\r\n        gateway = ognGateway(aprs_user='N0CALL')\r\n        gateway.connect()\r\n\r\n        try:\r\n            gateway.run(callback=process_beacon, autoreconnect=True)\r\n        except KeyboardInterrupt:\r\n            print('\\nStop ogn gateway')\r\n\r\n        gateway.disconnect()\r\n\r\nUsage - CLI\r\n-----------\r\n\r\nInstallation and Setup\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n1. Checkout the repository\r\n\r\n   ::\r\n\r\n       git clone https://github.com/glidernet/ogn-python.git\r\n\r\n2. Install python requirements\r\n\r\n   ::\r\n\r\n       pip install -r requirements.txt\r\n\r\n3. Install redis for asynchronous tasks (like takeoff/landing-detection)\r\n\r\n   ::\r\n\r\n       apt-get install redis-server\r\n\r\n4. Create database\r\n\r\n   ::\r\n\r\n       ./manage.py db.init\r\n\r\nRunning the aprs client and task server\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nTo schedule tasks like takeoff/landing-detection (``logbook.compute``),\r\n`Celery <http://www.celeryproject.org/>`__ with\r\n`Redis <http://www.redis.io/>`__ is used. The following scripts run in\r\nthe foreground and should be deamonized (eg. use\r\n`supervisord <http://supervisord.org/>`__).\r\n\r\n-  Start the aprs client\r\n\r\n   ::\r\n\r\n       ./manage.py gateway.run\r\n\r\n-  Start a task server (make sure redis is up and running)\r\n\r\n   ::\r\n\r\n       celery -A ogn.collect worker -l info\r\n\r\n-  Start the task scheduler (make sure a task server is up and running)\r\n\r\n   ::\r\n\r\n       celery -A ogn.collect beat -l info\r\n\r\nTo load a custom configuration, create a file ``myconfig.py`` (see\r\n`config/default.py <https://github.com/glidernet/ogn-python/blob/master/config/default.py>`__) and set the environment\r\nvariable ``OGN_CONFIG_MODULE`` accordingly.\r\n\r\n::\r\n\r\n    touch myconfig.py\r\n    export OGN_CONFIG_MODULE=\"myconfig\"\r\n    ./manage.py gateway.run\r\n\r\nmanage.py - CLI options\r\n~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n::\r\n\r\n    usage: manage.py [<namespace>.]<command> [<args>]\r\n\r\n    positional arguments:\r\n      command     the command to run\r\n\r\n    optional arguments:\r\n      -h, --help  show this help message and exit\r\n\r\n    available commands:\r\n\r\n      [db]\r\n        drop                   Drop all tables.\r\n        import_ddb             Import registered devices from the DDB.\r\n        import_file            Import registered devices from a local file.\r\n        init                   Initialize the database.\r\n        upgrade                Upgrade database to the latest version.\r\n\r\n      [gateway]\r\n        run                    Run the aprs client.\r\n\r\n      [logbook]\r\n        compute                Compute takeoffs and landings.\r\n        show                   Show a logbook for <airport_name> located at given position.\r\n\r\n      [show.devices]\r\n        stats                  Show some stats on registered devices.\r\n\r\n      [show.receiver]\r\n        hardware_stats         Show some statistics of receiver hardware.\r\n        list_all               Show a list of all receivers.\r\n        software_stats         Show some statistics of receiver software.\r\n\r\nOnly the command ``logbook.compute`` requires a running task server\r\n(celery) at the moment.\r\n\r\nAvailable tasks\r\n~~~~~~~~~~~~~~~\r\n\r\n-  ``ogn.collect.database.import_ddb`` - Import registered devices from\r\n   the ddb\r\n-  ``ogn.collect.database.import_file`` - Import registered devices from\r\n   a local file\r\n-  ``ogn.collect.heatmap.update_beacon_receiver_distance_all`` -\r\n   Calculate the distance between aircraft and receiver for the last\r\n   aircraft beacons\r\n-  ``ogn.collect.receiver.update_receivers`` - Populate/update receiver\r\n   table (requires postgresql-backend)\r\n-  ``ogn.collect.logbook.compute_takeoff_and_landing`` - Generate\r\n   TakeoffLanding table (requires postgresql-backend)\r\n\r\nIf the task server is up and running, tasks could be started manually.\r\n\r\n::\r\n\r\n    python3\r\n    >>>from ogn.collect.database import import_ddb\r\n    >>>import_ddb.delay()\r\n\r\nLicense\r\n-------\r\n\r\nLicensed under the AGPLv3.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/glidernet/ogn-python",
    "keywords": "gliding ogn",
    "license": "AGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ogn-python",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/ogn-python/",
    "release_url": "https://pypi.org/project/ogn-python/0.2.1/",
    "requires_python": "",
    "summary": "A python module for the Open Glider Network",
    "version": "0.2.1"
  },
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "05bf13d275aa78a64038ad835314d87d",
          "sha256": "253f3eb5377a7ff9f593cdee3f0da038f9f321e87b49cbf01d805e1131d4372d"
        },
        "downloads": 132,
        "filename": "ogn_python-0.2.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05bf13d275aa78a64038ad835314d87d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 27645,
        "upload_time": "2016-02-17T20:35:04",
        "url": "https://files.pythonhosted.org/packages/a5/5f/0468e116c5ad379787a0fab457ea26786f423634d1ae498105f29bfbb52b/ogn_python-0.2.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0a5f541ffebee6623792e1691f343446",
          "sha256": "2cd97d4801b6e9e8a18d8832cca913135b379b712946e307a4acc300d2887115"
        },
        "downloads": 446,
        "filename": "ogn-python-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0a5f541ffebee6623792e1691f343446",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35076,
        "upload_time": "2016-02-17T20:35:11",
        "url": "https://files.pythonhosted.org/packages/c3/d8/e30a92159988a020c6afdf824003655ee1ce8e49ebd03438a836c7e71c34/ogn-python-0.2.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "05bf13d275aa78a64038ad835314d87d",
        "sha256": "253f3eb5377a7ff9f593cdee3f0da038f9f321e87b49cbf01d805e1131d4372d"
      },
      "downloads": 132,
      "filename": "ogn_python-0.2.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "05bf13d275aa78a64038ad835314d87d",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 27645,
      "upload_time": "2016-02-17T20:35:04",
      "url": "https://files.pythonhosted.org/packages/a5/5f/0468e116c5ad379787a0fab457ea26786f423634d1ae498105f29bfbb52b/ogn_python-0.2.1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "0a5f541ffebee6623792e1691f343446",
        "sha256": "2cd97d4801b6e9e8a18d8832cca913135b379b712946e307a4acc300d2887115"
      },
      "downloads": 446,
      "filename": "ogn-python-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0a5f541ffebee6623792e1691f343446",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 35076,
      "upload_time": "2016-02-17T20:35:11",
      "url": "https://files.pythonhosted.org/packages/c3/d8/e30a92159988a020c6afdf824003655ee1ce8e49ebd03438a836c7e71c34/ogn-python-0.2.1.tar.gz"
    }
  ]
}