{
  "info": {
    "author": "Johan L\u00fcbcke",
    "author_email": "johan.lubcke@trioptima.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "tri.token\n=========\n\ntri.token provides enriched enum functionality. tri.token enum structures are declared using:\n\n- TokenAttribute: overridable attribute definitions with support for dynamic values.\n- Token: holds TokenAttributes objects.\n- TokenContainer: holds Token objects.\n\nIn other words: a Token is an enum which has TokenInstance members. Token instances are declared within TokenContainer(s).\n\n\nBasic usage\n-----------\n\n.. code:: python\n\n    from tri.token import Token, TokenAttribute, TokenContainer, PRESENT\n\n\n    class Taste(Token):\n        name = TokenAttribute()\n        display_name = TokenAttribute(value=lambda **kwargs: kwargs['name'].upper() + '!!')\n        opinion = TokenAttribute()\n\n\n    class Tastes(TokenContainer):\n        vanilla = Taste()\n        pecan_nut = Taste(display_name=\"pecan nutz\", opinion=\"Tasty\")\n\n\n    # A TokenContainer is a collection of Token objects.\n    assert Tastes.vanilla in Tastes\n\n    # The order of Token objects in a TokenContainer is by order of declaration.\n    assert list(Tastes) == [Tastes.vanilla, Tastes.pecan_nut]\n    assert list(Tastes) != [Tastes.pecan_nut, Tastes.vanilla]\n\n    # Magic for 'name' TokenAttribute. It is set automatically from the token declaration within it's container.\n    assert Tastes.vanilla.name == \"vanilla\"\n\n    # A TokenAttribute will have a None value if not set during Token instantiation.\n    assert Tastes.vanilla.opinion is None\n\n    # A TokenAttribute can have a dynamic value, derived from the invocation to the callable\n    # set as 'value' in the TokenAttribute definition\n    # (see declaration of 'display_name' TokenAttribute further up in the code).\n\n    # The real value of the token attribute will be the return value of an invocation to said callable.\n    # The invocation will receive the values of all other token attributes passed as keyword arguments.\n    assert Tastes.vanilla.display_name == \"VANILLA!!\"\n\n    # TokenAttribute dynamic value behavior is overridden/not used if value is set explicitly during Token instantiation.\n    assert Tastes.pecan_nut.display_name == \"pecan nutz\"\n\n    # A TokenContainer can be rendered as csv, excel, rst etc\n    assert \"\"\"\\\n    +--------------+---------+\n    | display_name | opinion |\n    +==============+=========+\n    |  VANILLA!!   |         |\n    +--------------+---------+\n    |  pecan nutz  |  Tasty  |\n    +--------------+---------+\\\n    \"\"\" == Tastes.to_rst(['display_name', 'opinion'])\n\n\nOptional token attributes\n-------------------------\n\n.. code:: python\n\n    # A TokenAttribute may be declared as having optional dynamic values.\n    # That is, we want these dynamic attributes to be evaluated sometimes, but not always.\n    # In the example below, we want some superheroes to have homes, but not others.\n\n    SUPERHERO_HOMES = {'superman': 'Fortress of Solitude',\n                       'batman': 'Batcave'}\n\n\n    class Superhero(Token):\n        name = TokenAttribute()\n        home = TokenAttribute(optional_value=lambda name, **_: SUPERHERO_HOMES[name])\n\n\n    # The PRESENT special value is used during Token instantiation to decide what\n    # optional token attributes should be evaluated.\n    class Superheroes(TokenContainer):\n        batman = Superhero(home=PRESENT)\n        hawkman = Superhero()\n        wonder_woman = Superhero(home='Themyscira')\n\n    # Batman has a home, but poor Hawkman does not.\n    assert Superheroes.batman.home == 'Batcave'\n    assert Superheroes.hawkman.home is None\n\n    # Just as with dynamic attributes, the logic for TokenAttribute optional dynamic values is overridden\n    if value is set explicitly during Token instantiation.\n    assert Superheroes.wonder_woman.home = 'Themyscira'\n\n    # As a shortcut, PRESENT for specific optional token attributes may be assigned to\n    # variables, and used in declarations, for enhanced readability.\n    # This is useful when one has tokens with many attributes declared using dynamic values,\n    # but we don't want all of them to be evaluated in all tokens.\n    home = PRESENT('home')\n\n    class Superheroes(TokenContainer):\n        batman = Superhero(home)\n        hawkman = Superhero()\n\n    # Again, Batman has a home, but poor Hawkman does not.\n    assert Superheroes.batman.home == 'Batcave'\n    assert Superheroes.hawkman.home is None\n\n\nTokenAttribute inheritance\n--------------------------\n\n.. code:: python\n\n    class FooToken(Token):\n        foo = TokenAttribute(value=lambda **kwargs: 'foo_value')\n\n    class BarToken(Token):\n        bar = TokenAttribute()\n\n    class FieToken(FooToken, BarToken):\n        fie = TokenAttribute()\n\n    class FooBarFieTokenContainer(TokenContainer):\n        t = FieToken(fie=3)\n\n    assert dict(FooBarFieTokenContainer.t) == {'foo': 'foo_value', 'bar': None, 'name': 't', 'fie': 3}\n\n\nTokenAttribute container inheritance\n------------------------------------\n\n.. code:: python\n\n    class MyToken(Token):\n\n        name = TokenAttribute()\n        stuff = TokenAttribute()\n\n\n    class MyTokens(TokenContainer):\n\n        foo = MyToken(stuff='Hello')\n        bar = MyToken(stuff='World')\n\n    assert MyTokens.foo in MyTokens\n\n    class MoreTokens(MyTokens):\n        boink = MyToken(stuff='Other Stuff')\n\n    assert MyTokens.foo in MoreTokens\n\n    assert list(MoreTokens) == [MyTokens.foo, MyTokens.bar, MoreTokens.boink]\n    assert MoreTokens.foo is MyTokens.foo\n\n\nFor more tri.token examples, please have a look at the contents of tests/test_tokens.py in the installation directory.\n\n.. _test_tokens: tests/test_tokens.py\n\n\nRunning tests\n-------------\n\nYou need tox installed then just `make test`.\n\n\nLicense\n-------\n\nBSD\n\n\nDocumentation\n-------------\n\nhttp://tritoken.readthedocs.org.\n\n\nChangelog\n=========\n\n1.0.1 (2017-04-05)\n~~~~~~~~~~~~~~~~~~\n\n* Changed metaclass handling to make PyCharm understand it\n\n\n1.0.0 (2016-09-27)\n~~~~~~~~~~~~~~~~~~\n\n* First released version on github\n\n* Added documentation\n\n* Cleanup of build machinery\n\n\n0.6.0 (2016-04-11)\n~~~~~~~~~~~~~~~~~~\n\n* Added documentation generation sort customisation\n\n* Added python 3 support\n\n\n0.5.0 (2016-02-01)\n~~~~~~~~~~~~~~~~~~\n\n* Move dependency tri.cache.memoize from requirements.txt to test_requirements.txt. It is only used\n  for regression testing.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "tri.token",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tri.token",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/tri.token/",
    "release_url": "https://pypi.org/project/tri.token/1.0.1/",
    "requires_python": "",
    "summary": "tri.token provides enriched enum functionality",
    "version": "1.0.1"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a81c97d52febe40797a2ca1dcd570e98",
          "sha256": "2c00012bb5c281b4b57a2ac075c19cd30a14a81e17baa545fc1d58b95034c0b2"
        },
        "downloads": 211,
        "filename": "tri.token-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a81c97d52febe40797a2ca1dcd570e98",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8348,
        "upload_time": "2016-09-27T12:28:47",
        "url": "https://files.pythonhosted.org/packages/7b/3c/704d09911532e7ab8db16bd929105dc96c8df313ab4e13989d156f312c51/tri.token-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "104e020ff3a3267844a4f743c8276b63",
          "sha256": "a6c79686745cb80a4eba035a0ed88b908bab4562a12c45af4a700e553a811ee8"
        },
        "downloads": 0,
        "filename": "tri.token-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "104e020ff3a3267844a4f743c8276b63",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9133,
        "upload_time": "2017-04-12T07:46:28",
        "url": "https://files.pythonhosted.org/packages/b8/dc/218192c7213241b9c2165e0c556750b56023e736fc6799e3f24be90ef52f/tri.token-1.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "104e020ff3a3267844a4f743c8276b63",
        "sha256": "a6c79686745cb80a4eba035a0ed88b908bab4562a12c45af4a700e553a811ee8"
      },
      "downloads": 0,
      "filename": "tri.token-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "104e020ff3a3267844a4f743c8276b63",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9133,
      "upload_time": "2017-04-12T07:46:28",
      "url": "https://files.pythonhosted.org/packages/b8/dc/218192c7213241b9c2165e0c556750b56023e736fc6799e3f24be90ef52f/tri.token-1.0.1.tar.gz"
    }
  ]
}