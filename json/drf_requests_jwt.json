{
  "info": {
    "author": "Sensidev",
    "author_email": "lucian.corduneanu@sensidev.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "======================================\nHTTP Requests with JWT support for DRF\n======================================\n\nThis is a simple helper used to communicate between Django instances.\n\nIt is suited to work well with Django Rest Framework API points and serializers.\n\nFeatures\n--------\n\n- Authenticate with JWT if not already\n- Cache JWT with different backends (for now Django Cache and File System)\n- Request all pages, before delivering the result\n- Deserialize the result with standard DRF serializer classes\n\nInstall it\n----------\n\n``pip install drf_requests_jwt``\n\nHow to use it\n-------------\n\nAssuming there is a `devices` paginated API point on another Django instance and you need all devices fetched.\n\nThen you'll inherit from `HttpRequestService` and implement the abstract methods something along these lines:\n\n::\n\n    from apps.devices.models import Device  # Your Device Django model.\n    from rest_framework import serializers\n\n    from drf_requests_jwt.services import HttpRequestService\n\n\n    class DeviceSerializer(serializers.Serializer):\n        eui = serializers.CharField()\n\n        def create(self, validated_data):\n            return Device(**validated_data)\n\n\n    class DeviceHttpRequestService(HttpRequestService):\n        obtain_jwt_allowed_fail_attempts = 3\n        cache_backend_class = 'drf_requests_jwt.backends.django_cache.DjangoCacheBackend'\n\n        def _get_base_url(self):\n            return 'https://example.com'\n\n        def _get_jwt_login_url_path(self):\n            return 'api/v1/auth/jwt/login/'\n\n        def _get_url_path(self):\n            return 'api/v1/devices/'\n\n        def _get_username(self):\n            return 'john'\n\n        def _get_password(self):\n            return 'snow'\n\n        def _get_params(self):\n            return {\n                'param1': 'val1',\n                'param2': 'val2',\n            }\n\n        def get_deserialized_data(self):\n            device_list = []\n\n            for device in self.get_results_from_all_pages():\n                serializer = DeviceSerializer(data=device)\n                if serializer.is_valid():\n                    device_list.append(serializer.save())\n\n            return device_list\n\n\nNow in your business logic where you need the list of devices you'll call it like this:\n\n\n``devices = DeviceHttpRequestService().get_deserialized_data()``\n\nMixins\n------\n\nThere is a mixin helping with deserialization.\n\n::\n\n    from drf_requests_jwt.deserializers import ObjectListDeserializerMixin\n    from apps.devices.serializers import DeviceSerializer  # Your device serializer.\n\n    class DeviceDeserializerMixin(ObjectListDeserializerMixin):\n        serializer_class = DeviceSerializer\n\n    class DeviceHttpRequestService(DeviceDeserializerMixin, HttpRequestService):\n        # ... Other abstract methods implemented\n\n        def get_deserialized_data(self):\n            return self.get_deserialized_object_list()\n\nConclusion\n----------\n\nThis is quite a specific helper that works well for our use case, but I think it can be easily adjusted to fit other needs.\n\nPlease feel free to bring your pull requests. Thanks.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/sensidev/drf-requests-jwt",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "drf_requests_jwt",
    "platform": "",
    "project_url": "https://pypi.org/project/drf_requests_jwt/",
    "release_url": "https://pypi.org/project/drf_requests_jwt/0.6/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Django Rest Framework Requests with JWT support",
    "version": "0.6"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a458ab9a0e1f7008c6be41f29147d6d6",
          "sha256": "be582497852ea487834a8edfc167f7381d98a3a76238e59dc9b781dfb992d8ab"
        },
        "downloads": 0,
        "filename": "drf_requests_jwt-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a458ab9a0e1f7008c6be41f29147d6d6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2710,
        "upload_time": "2017-08-30T12:12:51",
        "url": "https://files.pythonhosted.org/packages/15/2f/31aea5d41c03cbc7469274869f19d3c2bdcdda77adfcfb52315f1046e515/drf_requests_jwt-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4f47376dfca3cdf829be4a3b4d873ec2",
          "sha256": "b51ba65396fc042c0356e6dea981ffb4a2ed504e158f481c1317ab62e7e36917"
        },
        "downloads": 0,
        "filename": "drf_requests_jwt-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4f47376dfca3cdf829be4a3b4d873ec2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4878,
        "upload_time": "2017-08-30T12:25:46",
        "url": "https://files.pythonhosted.org/packages/03/e1/0cae8802975b72fff92680c271a6a1a7a9da2b7ff69367a7b0422e86d67b/drf_requests_jwt-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ce8ecf499f5ad75569c55a4e344e80f9",
          "sha256": "b337382fe44c26c860e3fa4c2625bf5555552fc6e0c135bd179e4d0fed2a574b"
        },
        "downloads": 0,
        "filename": "drf_requests_jwt-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ce8ecf499f5ad75569c55a4e344e80f9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6163,
        "upload_time": "2017-08-31T09:41:26",
        "url": "https://files.pythonhosted.org/packages/6a/2f/7e73c138b9323436dfa96dba8f3ec45cada9b98e79edee94bff91f0b2ed7/drf_requests_jwt-0.3.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b0688846a9bb514b5e932be28b12044e",
          "sha256": "3c2fb337fec17058eb8f0ea86444de0baa59758d73816786c63e528217403e50"
        },
        "downloads": 0,
        "filename": "drf_requests_jwt-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b0688846a9bb514b5e932be28b12044e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6402,
        "upload_time": "2017-08-31T09:45:03",
        "url": "https://files.pythonhosted.org/packages/14/54/84491d630591484e2fc670c55e428e7706ec1284353dab4e454b6d64820b/drf_requests_jwt-0.4.tar.gz"
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f90d59485346ee4f517dc25a4a736179",
          "sha256": "642f541f06eaa75f30c2f775d74ecbb4069e240fa905c5a7a2a2fca0edd4b918"
        },
        "downloads": 0,
        "filename": "drf_requests_jwt-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "f90d59485346ee4f517dc25a4a736179",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6438,
        "upload_time": "2017-08-31T09:54:03",
        "url": "https://files.pythonhosted.org/packages/a8/4b/a7e49ed6e4554af135e0e8c6ef2680d56fe809869e2b40a316fc3eb25e37/drf_requests_jwt-0.5.tar.gz"
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6572a18c8d3416d9dbb45f606fe6c17f",
          "sha256": "c6781d74cec4e13a6292c8a8e120a00fd796f2a15e12718820433b35a666383b"
        },
        "downloads": 0,
        "filename": "drf_requests_jwt-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "6572a18c8d3416d9dbb45f606fe6c17f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6515,
        "upload_time": "2017-09-01T08:48:36",
        "url": "https://files.pythonhosted.org/packages/7e/32/0fc7d4eb8dee3d4a5c31b4554404223579da25f12309efba1302f5b764ba/drf_requests_jwt-0.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6572a18c8d3416d9dbb45f606fe6c17f",
        "sha256": "c6781d74cec4e13a6292c8a8e120a00fd796f2a15e12718820433b35a666383b"
      },
      "downloads": 0,
      "filename": "drf_requests_jwt-0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "6572a18c8d3416d9dbb45f606fe6c17f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6515,
      "upload_time": "2017-09-01T08:48:36",
      "url": "https://files.pythonhosted.org/packages/7e/32/0fc7d4eb8dee3d4a5c31b4554404223579da25f12309efba1302f5b764ba/drf_requests_jwt-0.6.tar.gz"
    }
  ]
}