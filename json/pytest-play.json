{
  "info": {
    "author": "Davide Moro",
    "author_email": "davide.moro@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Testing"
    ],
    "description": "===========\npytest-play\n===========\n\n\n.. image:: https://travis-ci.org/tierratelematics/pytest-play.svg?branch=develop\n    :target: https://travis-ci.org/tierratelematics/pytest-play\n    :alt: See Build Status on Travis CI\n\n.. image:: https://readthedocs.org/projects/pytest-play/badge/?version=latest\n    :target: http://pytest-play.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://codecov.io/gh/tierratelematics/pytest-play/branch/develop/graph/badge.svg\n    :target: https://codecov.io/gh/tierratelematics/pytest-play\n\n``pytest-play`` is a pytest_ plugin that let you **play** a json file describing some actions and assertions.\nYou can extend ``pytest-play`` with your own commands thanks to its pluggable architecture and by default it supports\nbrowser interactions. For example it can be used for running previously recorded selenium splinter_ actions driving your\nbrowser for your UI test.\n\nSee at the bottom of the page the third party plugins that extends ``pytest-play``.\n\n``pytest-play`` is also your friend when page object approach (considered best practice) is not possible. For example:\n\n* limited time, and/or\n* lack of programming skills\n\nInstead if you are interested in a page object pattern have a look at pypom_form_ or pypom_.\n\n``pytest-play`` supports automatic waiting that should help to keep your tests more reliable with implicit waits before\nmoving on. By default it waits for node availability and visibility but it supports also some wait commands and\nwait until a given Javascript expression is ok. So it is at the same time user friendly and flexible.\n\n\nHow it works\n------------\nGiven a json file (eg: ``login.json``)::\n\n    {\n    \t\"steps\": [\n    \t\t{\n    \t\t\t\"type\": \"get\",\n    \t\t\t\"url\": \"$base_url\"\n    \t\t},\n    \t\t{\n    \t\t\t\"type\": \"setElementText\",\n    \t\t\t\"locator\": {\n    \t\t\t\t\"type\": \"css\",\n    \t\t\t\t\"value\": \"input[name=\\\"email\\\"]\"\n    \t\t\t},\n    \t\t\t\"text\": \"$root_name\"\n    \t\t},\n    \t\t{\n    \t\t\t\"type\": \"setElementText\",\n    \t\t\t\"locator\": {\n    \t\t\t\t\"type\": \"css\",\n    \t\t\t\t\"value\": \"input[name=\\\"password\\\"]\"\n    \t\t\t},\n    \t\t\t\"text\": \"$root_pwd\"\n    \t\t},\n    \t\t{\n    \t\t\t\"type\": \"clickElement\",\n    \t\t\t\"locator\": {\n    \t\t\t\t\"type\": \"css\",\n    \t\t\t\t\"value\": \".label-submit\"\n    \t\t\t}\n    \t\t},\n    \t\t{\n    \t\t\t\"type\": \"waitForElementPresent\",\n    \t\t\t\"locator\": {\n    \t\t\t\t\"type\": \"css\",\n    \t\t\t\t\"value\": \".logged\"\n    \t\t\t}\n    \t\t},\n    \t\t{\n    \t\t\t\"type\": \"assertElementPresent\",\n    \t\t\t\"locator\": {\n    \t\t\t\t\"type\": \"css\",\n    \t\t\t\t\"value\": \".user-info\"\n    \t\t\t}\n    \t\t}\n    \t]\n    }\n\nyou define a test ``test_login.py`` like this::\n\n    def test_login(play_json):\n        data = play_json.get_file_contents(\n            '/my/path/etc', 'login.json')\n        play_json.execute(data)\n\nyou get things moving on your browser!\n\nCommands syntax\n===============\n\nProject status is pre-alpha so commands could change and the\nfollowing list will be extended.\n\nSome useful commands is missing, for example:\n\n* url assertions\n\n* text in page\n\n* interaction with other input elements like radio buttons\n\nConditional commands\n--------------------\n::\n\n    {\n      \"type\": \"clickElement\",\n      \"locator\": {\n           \"type\": \"css\",\n           \"value\": \"body\"\n           },\n      \"condition\": \"'$foo' === 'bar'\"\n    }\n\n\nSupported locators\n------------------\n\nSupported selector types:\n\n* css\n* xpath\n* tag\n* name\n* text\n* id\n* value\n\nOpen a page\n-----------\n\nWith parametrization::\n\n    {\n      \"type\": \"get\",\n      \"url\": \"$base_url\"\n    }\n\nor with a regular url::\n\n    {\n      \"type\": \"get\",\n      \"url\": \"https://google.com\"\n    }\n\nPause\n-----\n\nThis command invokes a javascript expression that will\npause the execution flow of your commands::\n\n\n    {\n      \"type\": \"pause\",\n      \"waitTime\": 1500\n    }\n\nIf you need a pause/sleep for non UI tests you can use the\n``sleep`` command provided by the play_python_ plugin.\n\nClick an element\n----------------\n::\n\n    {\n      \"type\": \"clickElement\",\n      \"locator\": {\n           \"type\": \"css\",\n           \"value\": \"body\"\n           }\n    }\n\nFill in a text\n--------------\n::\n\n    {\n      \"type\": \"setElementText\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"input.title\"\n         },\n      \"text\": \"text value\"\n    }\n\nInteract with select input elements\n-----------------------------------\n\nSelect by label::\n\n    {\n      \"type\": \"select\",\n      \"locator\": {\n           \"type\": \"css\",\n           \"value\": \"select.city\"\n      },\n      \"text\": \"Turin\"\n    }\n\nor select by value::\n\n    {\n      \"type\": \"select\",\n      \"locator\": {\n           \"type\": \"css\",\n           \"value\": \"select.city\"\n      },\n      \"value\": \"1\"\n    }\n\nEval a Javascript expression\n----------------------------\n\n::\n\n    {\n      \"type\": \"eval\",\n      \"script\": \"alert(\"Hello world!\")\"\n    }\n\nCreate a variable starting from a Javascript expression\n-------------------------------------------------------\n\nThe value of the Javascript expression will be stored in\n``pytest_play.variables`` under the name ``count``::\n\n    {\n      \"type\": \"storeEval\",\n      \"variable\": \"count\",\n      \"script\": \"document.getElementById('count')[0].textContent\"\n    }\n\nAssert if a Javascript expression matches\n-----------------------------------------\n\nIf the result of the expression does not match an ``AssertionError``\nwill be raised and the test will fail::\n\n    {\n      \"type\": \"verifyEval\",\n      \"value\": \"3\",\n      \"script\": \"document.getElementById('count')[0].textContent\"\n    }\n\nVerify that the text of one element contains a string\n-----------------------------------------------------\n\nIf the element text does not contain the provided text an\n``AssertionError`` will be raised and the test will fail::\n\n    {\n      \"type\": \"verifyText\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \".my-item\"\n      },\n      \"text\": \"a text\"\n    }\n\nSend keys to an element\n-----------------------\n\nAll ``selenium.webdriver.common.keys.Keys`` are supported::\n\n    {\n      \"type\": \"sendKeysToElement\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \".confirm\"\n      },\n      \"text\": \"ENTER\"\n    }\n\n\nSupported keys::\n\n    KEYS = [\n        'ADD', 'ALT', 'ARROW_DOWN', 'ARROW_LEFT', 'ARROW_RIGHT',\n        'ARROW_UP', 'BACKSPACE', 'BACK_SPACE', 'CANCEL', 'CLEAR',\n        'COMMAND', 'CONTROL', 'DECIMAL', 'DELETE', 'DIVIDE',\n        'DOWN', 'END', 'ENTER', 'EQUALS', 'ESCAPE', 'F1', 'F10',\n        'F11', 'F12', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8',\n        'F9', 'HELP', 'HOME', 'INSERT', 'LEFT', 'LEFT_ALT',\n        'LEFT_CONTROL', 'LEFT_SHIFT', 'META', 'MULTIPLY',\n        'NULL', 'NUMPAD0', 'NUMPAD1', 'NUMPAD2', 'NUMPAD3',\n        'NUMPAD4', 'NUMPAD5', 'NUMPAD6', 'NUMPAD7', 'NUMPAD8',\n        'NUMPAD9', 'PAGE_DOWN', 'PAGE_UP', 'PAUSE', 'RETURN',\n        'RIGHT', 'SEMICOLON', 'SEPARATOR', 'SHIFT', 'SPACE',\n        'SUBTRACT', 'TAB', 'UP',\n    ]\n\nWait until a Javascript expression matches\n------------------------------------------\n\nWait until the given expression matches or raise a \n``selenium.common.exceptions.TimeoutException`` if takes too time.\n\nAt this time of writing there is a global timeout (20s) but in future releases\nyou will be able to override it on command basis::\n\n    {\n      \"type\": \"waitUntilCondition\",\n      \"script\": \"document.body.getAttribute(\"class\") === 'ready'\"\n    }\n\nWait for element present in DOM\n-------------------------------\n\nPresent::\n\n    {\n      \"type\": \"waitForElementPresent\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"body\"\n      }\n    }\n\nor not present::\n\n    {\n      \"type\": \"waitForElementPresent\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"body\"\n      },\n      \"negated\": true\n    }\n\nWait for element visible\n------------------------\n\nVisible::\n\n    {\n      \"type\": \"waitForElementVisible\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"body\"\n      }\n    }\n\nor not visible::\n\n    {\n      \"type\": \"waitForElementVisible\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"body\"\n      },\n      \"negated\": true\n    }\n\nAssert element is present in DOM\n--------------------------------\n\nAn ``AssertionError`` will be raised if assertion fails.\n\nPresent::\n\n    {\n      \"type\": \"assertElementPresent\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"div.elem\"\n         }\n    }\n\nor not present::\n\n    {\n      \"type\": \"assertElementPresent\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"div.elem\"\n         },\n      \"negated\": true\n    }\n\nAssert element is visible\n-------------------------\n\nAn ``AssertionError`` will be raised if assertion fails.\n\nPresent::\n\n    {\n      \"type\": \"assertElementVisible\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"div.elem\"\n         }\n    }\n\nor not present::\n\n    {\n      \"type\": \"assertElementVisible\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"div.elem\"\n         },\n      \"negated\": true\n    }\n\nHow to reuse steps\n------------------\n\nYou can split your commands and reuse them using the ``include`` command avoiding\nduplication::\n\n    {\n        \"steps\": [\n            {\"provider\": \"include\", \"type\": \"include\", \"path\": \"/some-path/included-scenario.json\"},\n            ... other commands ...\n        ]\n    }\n\nYou can create a variable for the base folder where your test scripts live.\n\nDefault commands\n----------------\n\nSome commands require many verbose options you don't want to repeat (eg: authentication headers for play_requests_).\n\nInstead of replicating all the headers information you can initialize a ``pytest-play`` with the provider name as\nkey and as a value the default command you want to omit::\n\n    {\n        \"steps\": [{\n            \"provider\": \"python\",\n            \"type\": \"store_variable\",\n            \"name\": \"bearer\",\n            \"expression\": \"'BEARER'\"\n        },\n        {\n            \"provider\": \"python\",\n            \"type\": \"exec\",\n            \"expression\": \"variables.update({'play_requests': {'parameters': {'headers': {'Authorization': '$bearer'}}}})\"\n        },\n        {\n             \"provider\": \"play_requests\",\n             \"type\": \"GET\",\n             \"comment\": \"this is an authenticated request!\",\n             \"url\": \"$base_url\"\n        }\n    }\n\nHow to install pytest-play\n==========================\n\nYou can see ``pytest-play`` in action creating a pytest project\nusing the cookiecutter-qa_ scaffolding tool:\n\n* play.json_\n* test_play.py_\n\n\nThis is the easiest way, otherwise you'll need to setup a pytest\nproject by your own and install ``pytest-play``.\n\npytest-play is pluggable and extensible\n=======================================\n\n``pytest-play`` has a pluggable architecture and you can extend it.\n\nFor example you might want to support your own commands, support non UI\ncommands like making raw POST/GET/etc calls, simulate IoT devices\nactivities, provide easy interaction with complex UI widgets like\ncalendar widgets and so on.\n\nHow to register a new command provider\n--------------------------------------\n\nLet's suppose you want to extend pytest-play with the following command::\n\n    command = {'type': 'print', 'provider': 'newprovider', 'message': 'Hello, World!'}\n\nYou just have to implement a command provider::\n\n    from pytest_play.providers import BaseProvider\n\n    class NewProvider(BaseProvider):\n\n        def this_is_not_a_command(self):\n            \"\"\" Commands should be command_ prefixed \"\"\"\n\n        def command_print(self, command):\n            print(command['message'])\n\n        def command_yetAnotherCommand(self, command):\n            print(command)\n\nand register your new provider in your ``setup.py`` adding an entrypoint::\n\n    entry_points={\n        'playcommands': [\n            'print = your_package.providers:NewProvider',\n        ],\n    },\n\nYou can define new providers also for non UI commands. For example publish MQTT\nmessages simulating IoT device activities for integration tests.\n\nIf you want you can generate a new command provider thanks to:\n\n* https://github.com/tierratelematics/cookiecutter-play-plugin\n\n\nThird party pytest-play plugins\n===============================\n\n* play_mqtt_, ``pytest-play`` plugin for MQTT support. Thanks to ``play_mqtt``\n  you can test the integration between a mocked IoT device that sends\n  commands on MQTT and a reactive web application with UI checks.\n\n  You can also build a simulator that generates messages for you.\n\n* play_python_, ``pytest-play`` plugin with restricted Python expressions and\n  assertions and it is based on the RestrictedPython_ package.\n\n* play_requests_, ``pytest-play`` plugin driving the famous Python ``requests``\n  library for making ``HTTP`` calls.\n\n* play_sql_, ``pytest-play`` support for SQL expressions and assertions\n\n* play_cassandra_, ``pytest-play`` support for Cassandra expressions and assertions\n\n* **play_selenium**, the ``pytest-play`` selenium commands for UI tests\n  will be implemented on a brand new package named play_selenium\n\nFeel free to add your own public plugins with a pull request!\n\n\nTwitter\n=======\n\n``pytest-play`` tweets happens here:\n\n* `@davidemoro`_\n \n\n.. _`Apache Software License 2.0`: http://www.apache.org/licenses/LICENSE-2.0\n.. _`file an issue`: https://github.com/tierratelematics/pytest-play/issues\n.. _`pytest`: https://github.com/pytest-dev/pytest\n.. _`pypom_form`: http://pypom-form.readthedocs.io/en/latest/\n.. _`splinter`: https://splinter.readthedocs.io/en/latest/\n.. _`pytest-splinter`: https://github.com/pytest-dev/pytest-splinter\n.. _`tox`: https://tox.readthedocs.io/en/latest/\n.. _`pip`: https://pypi.python.org/pypi/pip/\n.. _`pypom`: http://pypom.readthedocs.io/en/latest/\n.. _`PyPI`: https://pypi.python.org/pypi\n.. _`@davidemoro`: https://twitter.com/davidemoro\n.. _`cookiecutter-qa`: https://github.com/tierratelematics/cookiecutter-qa\n.. _`play.json`: https://github.com/tierratelematics/cookiecutter-qa/blob/master/%7B%7Bcookiecutter.project_slug%7D%7D/%7B%7Bcookiecutter.project_slug%7D%7D/tests/functional/data/play.json\n.. _`test_play.py`: https://github.com/tierratelematics/cookiecutter-qa/blob/master/%7B%7Bcookiecutter.project_slug%7D%7D/%7B%7Bcookiecutter.project_slug%7D%7D/tests/functional/test_play.py\n.. _`play_mqtt`: https://github.com/tierratelematics/play_mqtt\n.. _`play_python`: https://github.com/tierratelematics/play_python\n.. _`play_requests`: https://github.com/tierratelematics/play_requests\n.. _`play_sql`: https://github.com/tierratelematics/play_sql\n.. _`play_cassandra`: https://github.com/tierratelematics/play_cassandra\n.. _`RestrictedPython`: https://github.com/zopefoundation/RestrictedPython\n\nChangelog\n*********\n\n1.1.0 (2018-01-16)\n==================\n\n- Documentation updated (add new pytest play plugins)\n\n- Support default payloads for command providers. Useful\n  for HTTP authentication headers, common database settings\n\n\n1.0.0 (2018-01-10)\n==================\n\n- execute command accepts kwargs now\n\n- execute command returns the command value now\n\n- complete refactor of ``include`` provider (no\n  backwards compatibility)\n\n- add ``play_json.get_file_contents`` and removed\n  ``data_getter`` fixture (no backwards compatibility)\n\n\n0.3.1 (2018-01-04)\n==================\n\n- play engine now logs commands to be executed and errors\n\n\n0.3.0 (2018-01-04)\n==================\n\n- you are able to update variables when executing commands\n\n- you can extend ``pytest-play`` with new pluggable commands coming\n  from third party packages thanks to setuptools entrypoints\n\n\n0.2.0 (2018-01-02)\n==================\n\n- no more open browser by default\n  pytest-play is a generic test engine and it could be used for non UI tests too.\n\n  So there is no need to open the browser for non UI tests (eg: API tests)\n\n\n0.1.0 (2017-12-22)\n==================\n\n- implement reusable steps (include scenario)\n\n- minor documentation changes\n\n0.0.1 (2017-12-20)\n==================\n\n- First release",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/tierratelematics/pytest-play",
    "keywords": "",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-play",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-play/",
    "release_url": "https://pypi.org/project/pytest-play/1.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "pytest plugin that let you play a json file describing some actions and assertions. Supports by default Selenium/Splinter actions",
    "version": "1.1.0"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1c66df8bff3c3f7c0466c3ac5b218a9a",
          "sha256": "22ac2ec8444f05010b3c6c10c5b0b39ca87d1629837615270385fd82878f86c7"
        },
        "downloads": -1,
        "filename": "pytest-play-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1c66df8bff3c3f7c0466c3ac5b218a9a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16162,
        "upload_time": "2017-12-20T14:50:01",
        "url": "https://files.pythonhosted.org/packages/65/a9/0ca4fa619c3c7fca89d9ea24d30e3e0786c390450d74af0dbf8ca3bc9d79/pytest-play-0.0.1.tar.gz"
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8c5e3a3d5de35948565744e5e504e2a0",
          "sha256": "a415d8c45a76af6a4e5b5f1033f5f285777a9f8c6e7b8dc4912ecd236a2bea77"
        },
        "downloads": -1,
        "filename": "pytest-play-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8c5e3a3d5de35948565744e5e504e2a0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17254,
        "upload_time": "2017-12-22T11:58:15",
        "url": "https://files.pythonhosted.org/packages/e4/f4/8e0ee21a85b179f22802be877bb92fe0eca34cb0fff2e44b4ec1d4e1ef9e/pytest-play-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2f52aabf8177646a0da0412c02f7309a",
          "sha256": "bcfc0ad7d63f18ca535e689354a8cd0b2f7b20f6e4cd663f0d824e6fa469d6bc"
        },
        "downloads": -1,
        "filename": "pytest-play-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2f52aabf8177646a0da0412c02f7309a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17473,
        "upload_time": "2018-01-02T14:27:49",
        "url": "https://files.pythonhosted.org/packages/a1/5b/40d36380f68e16ffcd085a0163e87d4dfb58c0272bfb94befa4191fd4eb3/pytest-play-0.2.0.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1b131f6727487a49008ff019909cb04e",
          "sha256": "b322948a973a763d7555754bacb7d4d33fa1562db02b24015fbf47e7455a85d4"
        },
        "downloads": -1,
        "filename": "pytest-play-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1b131f6727487a49008ff019909cb04e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18333,
        "upload_time": "2018-01-04T09:40:07",
        "url": "https://files.pythonhosted.org/packages/2f/71/68517f6c352481dd740978057a895f5ead33360c625947e08040350b6fb8/pytest-play-0.3.0.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e2d6847da3dbd057c9836775bbcd2953",
          "sha256": "99ff6b1add1d48f1a3c80e60a8b49eeb0db3983df07eed194771462e74f21f53"
        },
        "downloads": -1,
        "filename": "pytest-play-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e2d6847da3dbd057c9836775bbcd2953",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18440,
        "upload_time": "2018-01-04T14:03:12",
        "url": "https://files.pythonhosted.org/packages/6d/e8/b429e0acdea75525e99973aaedc03baec1b262e9b926e77de4061833a886/pytest-play-0.3.1.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8edcdadba6a724af71f6181af427bb44",
          "sha256": "024f3d6ecc77ff757ad84df1a63ca11c5041dbd50e88a08c5f6ada81a8d3e349"
        },
        "downloads": -1,
        "filename": "pytest-play-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8edcdadba6a724af71f6181af427bb44",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18809,
        "upload_time": "2018-01-10T08:36:25",
        "url": "https://files.pythonhosted.org/packages/a4/de/f7c74d227a9a31018c20c7c727af4354683e9ff141fd32c6cd534988f8db/pytest-play-1.0.0.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "464e39d132fdc4ff55476ca0247d0afd",
          "sha256": "4c5ac93e38c2e334917b18a4c41127a277ce6e6503b073d50e79777fe109cf07"
        },
        "downloads": -1,
        "filename": "pytest-play-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "464e39d132fdc4ff55476ca0247d0afd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20153,
        "upload_time": "2018-01-16T14:03:29",
        "url": "https://files.pythonhosted.org/packages/d3/ef/239ec9e2307cae584fdd9a9c3a1a0e9e7269d9dd092fb03a302eadc43d0f/pytest-play-1.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "464e39d132fdc4ff55476ca0247d0afd",
        "sha256": "4c5ac93e38c2e334917b18a4c41127a277ce6e6503b073d50e79777fe109cf07"
      },
      "downloads": -1,
      "filename": "pytest-play-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "464e39d132fdc4ff55476ca0247d0afd",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 20153,
      "upload_time": "2018-01-16T14:03:29",
      "url": "https://files.pythonhosted.org/packages/d3/ef/239ec9e2307cae584fdd9a9c3a1a0e9e7269d9dd092fb03a302eadc43d0f/pytest-play-1.1.0.tar.gz"
    }
  ]
}