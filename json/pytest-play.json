{
  "info": {
    "author": "Davide Moro",
    "author_email": "davide.moro@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Testing"
    ],
    "description": "===========\npytest-play\n===========\n\n\n.. image:: https://travis-ci.org/tierratelematics/pytest-play.svg?branch=develop\n    :target: https://travis-ci.org/tierratelematics/pytest-play\n    :alt: See Build Status on Travis CI\n\n.. image:: https://readthedocs.org/projects/pytest-play/badge/?version=latest\n          :target: http://pytest-play.readthedocs.io/en/latest/?badge=latest\n          :alt: Documentation Status\n\n.. image:: https://codecov.io/gh/tierratelematics/pytest-play/branch/develop/graph/badge.svg\n          :target: https://codecov.io/gh/tierratelematics/pytest-play\n\n``pytest-play`` is a pytest_ plugin that let you **play** a json file describing some actions and assertions.\nYou can extend ``pytest-play`` with your own commands thanks to its pluggable architecture and by default it supports\nbrowser interactions. For example it can be used for running previously recorded selenium splinter_ actions driving your\nbrowser for your UI test.\n\n\n``pytest-play`` is also your friend when page object approach (considered best practice) is not possible. For example:\n\n* limited time, and/or\n* lack of programming skills\n\nInstead if you are interested in a page object pattern have a look at pypom_form_ or pypom_.\n\n``pytest-play`` supports automatic waiting that should help to keep your tests more reliable with implicit waits before\nmoving on. By default it waits for node availability and visibility but it supports also some wait commands and\nwait until a given Javascript expression is ok. So it is at the same time user friendly and flexible.\n\n\nHow it works\n------------\nGiven a json file (eg: ``login.json``)::\n\n    {\n    \t\"steps\": [\n    \t\t{\n    \t\t\t\"type\": \"get\",\n    \t\t\t\"url\": \"$base_url\"\n    \t\t},\n    \t\t{\n    \t\t\t\"type\": \"setElementText\",\n    \t\t\t\"locator\": {\n    \t\t\t\t\"type\": \"css\",\n    \t\t\t\t\"value\": \"input[name=\\\"email\\\"]\"\n    \t\t\t},\n    \t\t\t\"text\": \"$root_name\"\n    \t\t},\n    \t\t{\n    \t\t\t\"type\": \"setElementText\",\n    \t\t\t\"locator\": {\n    \t\t\t\t\"type\": \"css\",\n    \t\t\t\t\"value\": \"input[name=\\\"password\\\"]\"\n    \t\t\t},\n    \t\t\t\"text\": \"$root_pwd\"\n    \t\t},\n    \t\t{\n    \t\t\t\"type\": \"clickElement\",\n    \t\t\t\"locator\": {\n    \t\t\t\t\"type\": \"css\",\n    \t\t\t\t\"value\": \".label-submit\"\n    \t\t\t}\n    \t\t},\n    \t\t{\n    \t\t\t\"type\": \"waitForElementPresent\",\n    \t\t\t\"locator\": {\n    \t\t\t\t\"type\": \"css\",\n    \t\t\t\t\"value\": \".logged\"\n    \t\t\t}\n    \t\t},\n    \t\t{\n    \t\t\t\"type\": \"assertElementPresent\",\n    \t\t\t\"locator\": {\n    \t\t\t\t\"type\": \"css\",\n    \t\t\t\t\"value\": \".user-info\"\n    \t\t\t}\n    \t\t}\n    \t]\n    }\n\nyou define a test ``test_login.py`` like this::\n\n    def test_login(play_json, data_getter):\n        data = data_getter('/my/path/etc', 'login.json')\n        play_json.execute(data)\n\nyou get things moving on your browser!\n\nCommands syntax\n===============\n\nProject status is pre-alpha so commands could change and the\nfollowing list will be extended.\n\nSome useful commands is missing, for example:\n\n* url assertions\n\n* text in page\n\n* interaction with other input elements like radio buttons\n\nConditional commands\n--------------------\n::\n\n    {\n      \"type\": \"clickElement\",\n      \"locator\": {\n           \"type\": \"css\",\n           \"value\": \"body\"\n           },\n      \"condition\": \"'$foo' === 'bar'\"\n    }\n\n\nSupported locators\n------------------\n\nSupported selector types:\n\n* css\n* xpath\n* tag\n* name\n* text\n* id\n* value\n\nOpen a page\n-----------\n\nWith parametrization::\n\n    {\n      \"type\": \"get\",\n      \"url\": \"$base_url\"\n    }\n\nor with a regular url::\n\n    {\n      \"type\": \"get\",\n      \"url\": \"https://google.com\"\n    }\n\nPause\n-----\n::\n\n    {\n      \"type\": \"pause\",\n      \"waitTime\": 1500\n    }\n\nClick an element\n----------------\n::\n\n    {\n      \"type\": \"clickElement\",\n      \"locator\": {\n           \"type\": \"css\",\n           \"value\": \"body\"\n           }\n    }\n\nFill in a text\n--------------\n::\n\n    {\n      \"type\": \"setElementText\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"input.title\"\n         },\n      \"text\": \"text value\"\n    }\n\nInteract with select input elements\n-----------------------------------\n\nSelect by label::\n\n    {\n      \"type\": \"select\",\n      \"locator\": {\n           \"type\": \"css\",\n           \"value\": \"select.city\"\n      },\n      \"text\": \"Turin\"\n    }\n\nor select by value::\n\n    {\n      \"type\": \"select\",\n      \"locator\": {\n           \"type\": \"css\",\n           \"value\": \"select.city\"\n      },\n      \"value\": \"1\"\n    }\n\nEval a Javascript expression\n----------------------------\n\n::\n\n    {\n      \"type\": \"eval\",\n      \"script\": \"alert(\"Hello world!\")\"\n    }\n\nCreate a variable starting from a Javascript expression\n-------------------------------------------------------\n\nThe value of the Javascript expression will be stored in\n``pytest_play.variables`` under the name ``count``::\n\n    {\n      \"type\": \"storeEval\",\n      \"variable\": \"count\",\n      \"script\": \"document.getElementById('count')[0].textContent\"\n    }\n\nAssert if a Javascript expression matches\n-----------------------------------------\n\nIf the result of the expression does not match an ``AssertionError``\nwill be raised and the test will fail::\n\n    {\n      \"type\": \"verifyEval\",\n      \"value\": \"3\",\n      \"script\": \"document.getElementById('count')[0].textContent\"\n    }\n\nVerify that the text of one element contains a string\n-----------------------------------------------------\n\nIf the element text does not contain the provided text an\n``AssertionError`` will be raised and the test will fail::\n\n    {\n      \"type\": \"verifyText\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \".my-item\"\n      },\n      \"text\": \"a text\"\n    }\n\nSend keys to an element\n-----------------------\n\nAll ``selenium.webdriver.common.keys.Keys`` are supported::\n\n    {\n      \"type\": \"sendKeysToElement\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \".confirm\"\n      },\n      \"text\": \"ENTER\"\n    }\n\n\nSupported keys::\n\n    KEYS = [\n        'ADD', 'ALT', 'ARROW_DOWN', 'ARROW_LEFT', 'ARROW_RIGHT',\n        'ARROW_UP', 'BACKSPACE', 'BACK_SPACE', 'CANCEL', 'CLEAR',\n        'COMMAND', 'CONTROL', 'DECIMAL', 'DELETE', 'DIVIDE',\n        'DOWN', 'END', 'ENTER', 'EQUALS', 'ESCAPE', 'F1', 'F10',\n        'F11', 'F12', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8',\n        'F9', 'HELP', 'HOME', 'INSERT', 'LEFT', 'LEFT_ALT',\n        'LEFT_CONTROL', 'LEFT_SHIFT', 'META', 'MULTIPLY',\n        'NULL', 'NUMPAD0', 'NUMPAD1', 'NUMPAD2', 'NUMPAD3',\n        'NUMPAD4', 'NUMPAD5', 'NUMPAD6', 'NUMPAD7', 'NUMPAD8',\n        'NUMPAD9', 'PAGE_DOWN', 'PAGE_UP', 'PAUSE', 'RETURN',\n        'RIGHT', 'SEMICOLON', 'SEPARATOR', 'SHIFT', 'SPACE',\n        'SUBTRACT', 'TAB', 'UP',\n    ]\n\nWait until a Javascript expression matches\n------------------------------------------\n\nWait until the given expression matches or raise a \n``selenium.common.exceptions.TimeoutException`` if takes too time.\n\nAt this time of writing there is a global timeout (20s) but in future releases\nyou will be able to override it on command basis::\n\n    {\n      \"type\": \"waitUntilCondition\",\n      \"script\": \"document.body.getAttribute(\"class\") === 'ready'\"\n    }\n\nWait for element present in DOM\n-------------------------------\n\nPresent::\n\n    {\n      \"type\": \"waitForElementPresent\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"body\"\n      }\n    }\n\nor not present::\n\n    {\n      \"type\": \"waitForElementPresent\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"body\"\n      },\n      \"negated\": true\n    }\n\nWait for element visible\n------------------------\n\nVisible::\n\n    {\n      \"type\": \"waitForElementVisible\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"body\"\n      }\n    }\n\nor not visible::\n\n    {\n      \"type\": \"waitForElementVisible\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"body\"\n      },\n      \"negated\": true\n    }\n\nAssert element is present in DOM\n--------------------------------\n\nAn ``AssertionError`` will be raised if assertion fails.\n\nPresent::\n\n    {\n      \"type\": \"assertElementPresent\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"div.elem\"\n         }\n    }\n\nor not present::\n\n    {\n      \"type\": \"assertElementPresent\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"div.elem\"\n         },\n      \"negated\": true\n    }\n\nAssert element is visible\n-------------------------\n\nAn ``AssertionError`` will be raised if assertion fails.\n\nPresent::\n\n    {\n      \"type\": \"assertElementVisible\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"div.elem\"\n         }\n    }\n\nor not present::\n\n    {\n      \"type\": \"assertElementVisible\",\n      \"locator\": {\n         \"type\": \"css\",\n         \"value\": \"div.elem\"\n         },\n      \"negated\": true\n    }\n\nHow to reuse steps\n------------------\n\nYou can split your commands and reuse them using the ``include`` command avoiding\nduplication::\n\n    {\n        \"steps\": [\n            {\"provider\": \"included-scenario.json\", \"type\": \"include\"},\n            ... other commands ...\n        ]\n    }\n\nregistering ``included-scenario.json``'s contents as follows::\n\n    @pytest.fixture(autouse=True)\n    def included_scenario(play_json, data_getter, data_base_path):\n        data = data_getter(data_base_path, 'included-scenario.json')\n        play_json.register_steps(\n            data, 'included-scenario.json')\n\n\nThis way other json files will be able to include the ``included-scenario.json`` file.\n\n\nHow to install pytest-play\n==========================\n\nYou can see ``pytest-play`` in action creating a pytest project\nusing the cookiecutter-qa_ scaffolding tool:\n\n* play.json_\n* test_play.py_\n\n\nThis is the easiest way, otherwise you'll need to setup a pytest\nproject by your own and install ``pytest-play``.\n\npytest-play is pluggable and extensible\n=======================================\n\n``pytest-play`` has a pluggable architecture and you can extend it.\n\nFor example you might want to support your own commands, support non UI\ncommands like making raw POST/GET/etc calls, simulate IoT devices\nactivities, provide easy interaction with complex UI widgets like\ncalendar widgets and so on.\n\nHow to register a new command provider\n--------------------------------------\n\nLet's suppose you want to extend pytest-play with the following command::\n\n    command = {'type': 'print', 'provider': 'newprovider'}\n\nYou just have to implement a command provider::\n\n\n    class NewProvider(object):\n        def __init__(self, engine):\n            self.engine = engine\n\n        def this_is_not_a_command(self):\n            \"\"\" Commands should be command_ prefixed \"\"\"\n\n        def command_print(self, command):\n            print(command)\n\n        def command_yetAnotherCommand(self, command):\n            print(command)\n\nand register your new provider::\n\n    import pytest\n\n\n    @pytest.fixture(autouse=True)\n    def newprovider(play_json):\n        play_json.register_command_provider(NewProvider, 'newprovider')\n\nYou can define new providers also for non UI commands. For example publish MQTT\nmessages simulating IoT device activities for integration tests.\n\n\nTwitter\n=======\n\n``pytest-play`` tweets happens here:\n\n* `@davidemoro`_\n \n\n.. _`Apache Software License 2.0`: http://www.apache.org/licenses/LICENSE-2.0\n.. _`file an issue`: https://github.com/tierratelematics/pytest-play/issues\n.. _`pytest`: https://github.com/pytest-dev/pytest\n.. _`pypom_form`: http://pypom-form.readthedocs.io/en/latest/\n.. _`splinter`: https://splinter.readthedocs.io/en/latest/\n.. _`pytest-splinter`: https://github.com/pytest-dev/pytest-splinter\n.. _`tox`: https://tox.readthedocs.io/en/latest/\n.. _`pip`: https://pypi.python.org/pypi/pip/\n.. _`pypom`: http://pypom.readthedocs.io/en/latest/\n.. _`PyPI`: https://pypi.python.org/pypi\n.. _`@davidemoro`: https://twitter.com/davidemoro\n.. _`cookiecutter-qa`: https://github.com/tierratelematics/cookiecutter-qa\n.. _`play.json`: https://github.com/tierratelematics/cookiecutter-qa/blob/master/%7B%7Bcookiecutter.project_slug%7D%7D/%7B%7Bcookiecutter.project_slug%7D%7D/tests/functional/data/play.json\n.. _`test_play.py`: https://github.com/tierratelematics/cookiecutter-qa/blob/master/%7B%7Bcookiecutter.project_slug%7D%7D/%7B%7Bcookiecutter.project_slug%7D%7D/tests/functional/test_play.py\n\nChangelog\n*********\n\n0.1.0 (2017-12-22)\n==================\n\n- implement reusable steps (include scenario)\n\n- minor documentation changes\n\n0.0.1 (2017-12-20)\n==================\n\n- First release",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/tierratelematics/pytest-play",
    "keywords": "",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-play",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-play/",
    "release_url": "https://pypi.org/project/pytest-play/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "pytest plugin that let you play a json file describing some actions and assertions. Supports by default Selenium/Splinter actions",
    "version": "0.1.0"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1c66df8bff3c3f7c0466c3ac5b218a9a",
          "sha256": "22ac2ec8444f05010b3c6c10c5b0b39ca87d1629837615270385fd82878f86c7"
        },
        "downloads": -1,
        "filename": "pytest-play-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1c66df8bff3c3f7c0466c3ac5b218a9a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16162,
        "upload_time": "2017-12-20T14:50:01",
        "url": "https://files.pythonhosted.org/packages/65/a9/0ca4fa619c3c7fca89d9ea24d30e3e0786c390450d74af0dbf8ca3bc9d79/pytest-play-0.0.1.tar.gz"
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8c5e3a3d5de35948565744e5e504e2a0",
          "sha256": "a415d8c45a76af6a4e5b5f1033f5f285777a9f8c6e7b8dc4912ecd236a2bea77"
        },
        "downloads": -1,
        "filename": "pytest-play-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8c5e3a3d5de35948565744e5e504e2a0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17254,
        "upload_time": "2017-12-22T11:58:15",
        "url": "https://files.pythonhosted.org/packages/e4/f4/8e0ee21a85b179f22802be877bb92fe0eca34cb0fff2e44b4ec1d4e1ef9e/pytest-play-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8c5e3a3d5de35948565744e5e504e2a0",
        "sha256": "a415d8c45a76af6a4e5b5f1033f5f285777a9f8c6e7b8dc4912ecd236a2bea77"
      },
      "downloads": -1,
      "filename": "pytest-play-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8c5e3a3d5de35948565744e5e504e2a0",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 17254,
      "upload_time": "2017-12-22T11:58:15",
      "url": "https://files.pythonhosted.org/packages/e4/f4/8e0ee21a85b179f22802be877bb92fe0eca34cb0fff2e44b4ec1d4e1ef9e/pytest-play-0.1.0.tar.gz"
    }
  ]
}