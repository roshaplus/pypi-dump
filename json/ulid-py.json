{
  "info": {
    "author": "Andrew Hawker",
    "author_email": "andrew.r.hawker@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "ulid\n====\n\n|Build Status| |Test Coverage| |Code Climate| |Issue Count|\n\n|PyPI Version| |PyPI Versions|\n\n|Documentation Status|\n\n|Stories in Ready|\n\n`Universally Unique Lexicographically Sortable\nIdentifier <https://github.com/alizain/ulid>`__ in `Python\n3 <https://www.python.org/>`__.\n\nStatus\n~~~~~~\n\nThis project is actively maintained.\n\nInstallation\n~~~~~~~~~~~~\n\nTo install ulid from `pip <https://pypi.python.org/pypi/pip>`__:\n\n.. code:: bash\n\n        $ pip install ulid-py\n\nTo install ulid from source:\n\n.. code:: bash\n\n        $ git clone git@github.com:ahawker/ulid.git\n        $ cd ulid && python setup.py install\n\nUsage\n~~~~~\n\nCreate a brand new ULID.\n\nThe timestamp value (48-bits) is from\n`time.time() <https://docs.python.org/3/library/time.html?highlight=time.time#time.time>`__\nwith millisecond precision.\n\nThe randomness value (80-bits) is from\n`os.urandom() <https://docs.python.org/3/library/os.html?highlight=os.urandom#os.urandom>`__.\n\n.. code:: python\n\n    >>> import ulid\n    >>> ulid.new()\n    <ULID('01BJQE4QTHMFP0S5J153XCFSP9')>\n\nCreate a new ULID from an existing 128-bit value, such as a\n`UUID <https://docs.python.org/3/library/uuid.html>`__.\n\nSupports ULID values as ``int``, ``bytes``, ``str``, and ``UUID`` types.\n\n.. code:: python\n\n    >>> import ulid, uuid\n    >>> value = uuid.uuid4()\n    >>> value\n    UUID('0983d0a2-ff15-4d83-8f37-7dd945b5aa39')\n    >>> ulid.from_uuid(value)\n    <ULID('09GF8A5ZRN9P1RYDVXV52VBAHS')>\n\nCreate a new ULID from an existing timestamp value, such as a\n`datetime <https://docs.python.org/3/library/datetime.html#module-datetime>`__\nobject.\n\nSupports timestamp values as ``int``, ``float``, ``str``, ``bytes``,\n``bytearray``, ``memoryview``, ``datetime``, ``Timestamp``, and ``ULID``\ntypes.\n\n.. code:: python\n\n    >>> import datetime, ulid\n    >>> ulid.from_timestamp(datetime.datetime(1999, 1, 1))\n    <ULID('00TM9HX0008S220A3PWSFVNFEH')>\n\nCreate a new ULID from an existing randomness value.\n\nSupports randomness values as ``int``, ``float``, ``str``, ``bytes``,\n``bytearray``, ``memoryview``, ``Randomness``, and ``ULID`` types.\n\n.. code:: python\n\n    >>> import os, ulid\n    >>> randomness = os.urandom(10)\n    >>> ulid.from_randomness(randomness)\n    >>> <ULID('01BJQHX2XEDK0VN0GMYWT9JN8S')>\n\nOnce you have a ULID object, there are a number of ways to interact with\nit.\n\nThe ``timestamp`` method will give you a snapshot view of the first\n48-bits of the ULID while the ``randomness`` method will give you a\nsnapshot of the last 80-bits.\n\n.. code:: python\n\n    >>> import ulid\n    >>> u = ulid.new()\n    >>> u\n    <ULID('01BJQM7SC7D5VVTG3J68ABFQ3N')>\n    >>> u.timestamp()\n    <Timestamp('01BJQM7SC7')>\n    >>> u.randomness()\n    <Randomness('D5VVTG3J68ABFQ3N')>\n\nThe ``ULID``, ``Timestamp``, and ``Randomness`` classes all derive from\nthe same base class, a ``MemoryView``.\n\nA ``MemoryView`` provides the ``str``, ``int``, and ``bytes`` methods\nfor changing any values representation.\n\n.. code:: python\n\n    >>> import ulid\n    >>> u = ulid.new()\n    >>> u\n    <ULID('01BJQMF54D093DXEAWZ6JYRPAQ')>\n    >>> u.timestamp()\n    <Timestamp('01BJQMF54D')>\n    >>> u.timestamp().int\n    1497589322893\n    >>> u.timestamp().bytes\n    b'\\x01\\\\\\xafG\\x94\\x8d'\n    >>> u.timestamp().datetime\n    datetime.datetime(2017, 6, 16, 5, 2, 2, 893000)\n    >>> u.randomness().bytes\n    b'\\x02F\\xde\\xb9\\\\\\xf9\\xa5\\xecYW'\n    >>> u.bytes[6:] == u.randomness().bytes\n    True\n    >>> u.str\n    '01BJQMF54D093DXEAWZ6JYRPAQ'\n    >>> u.int\n    1810474399624548315999517391436142935\n\nA ``MemoryView`` also provides rich comparison functionality.\n\n.. code:: python\n\n    >>> import datetime, time, ulid\n    >>> u1 = ulid.new()\n    >>> time.sleep(5)\n    >>> u2 = ulid.new()\n    >>> u1 < u2\n    True\n    >>> u3 = ulid.from_timestamp(datetime.datetime(2039, 1, 1))\n    >>> u1 < u2 < u3\n    True\n    >>> [u.timestamp().datetime for u in sorted([u2, u3, u1])]\n    [datetime.datetime(2017, 6, 16, 5, 7, 14, 847000), datetime.datetime(2017, 6, 16, 5, 7, 26, 775000), datetime.datetime(2039, 1, 1, 8, 0)]\n\nFuture Items\n~~~~~~~~~~~~\n\n-  Collection of benchmarks to track performance.\n-  Backport to Python 2.7?\n-  See `Github Issues <https://github.com/ahawker/ulid/issues>`__ for\n   more!\n\nGoals\n~~~~~\n\nA fast implementation in pure python of the spec with binary format\nsupport.\n\nContributing\n~~~~~~~~~~~~\n\nIf you would like to contribute, simply fork the repository, push your\nchanges and send a pull request. Pull requests will be brought into the\n``master`` branch via a rebase and fast-forward merge with the goal of\nhaving a linear branch history with no merge commits.\n\nLicense\n~~~~~~~\n\n`Apache 2.0 <LICENSE>`__\n\nWhy not UUID?\n-------------\n\nUUID can be suboptimal for many uses-cases because:\n\n-  It isn't the most character efficient way of encoding 128 bits of\n   randomness\n-  UUID v1/v2 is impractical in many environments, as it requires access\n   to a unique, stable MAC address\n-  UUID v3/v5 requires a unique seed and produces randomly distributed\n   IDs, which can cause fragmentation in many data structures\n-  UUID v4 provides no other information than randomness which can cause\n   fragmentation in many data structures\n\nULID provides:\n\n-  128-bit compatibility with UUID\n-  1.21e+24 unique ULIDs per millisecond\n-  Lexicographically sortable!\n-  Canonically encoded as a 26 character string, as opposed to the 36\n   character UUID\n-  Uses Crockford's base32 for better efficiency and readability (5 bits\n   per character)\n-  Case insensitive\n-  No special characters (URL safe)\n\nSpecification\n-------------\n\nBelow is the current specification of ULID as implemented in this\nrepository.\n\nThe binary format is implemented.\n\n::\n\n     01AN4Z07BY      79KA1307SR9X4MV3\n\n    |----------|    |----------------|\n     Timestamp          Randomness\n      10chars            16chars\n       48bits             80bits\n\nComponents\n~~~~~~~~~~\n\n**Timestamp** \\* 48 bit integer \\* UNIX-time in milliseconds \\* Won't\nrun out of space till the year 10895 AD.\n\n**Randomness** \\* 80 bits \\* Cryptographically secure source of\nrandomness, if possible\n\nSorting\n~~~~~~~\n\nThe left-most character must be sorted first, and the right-most\ncharacter sorted last (lexical order). The default ASCII character set\nmust be used. Within the same millisecond, sort order is not guaranteed\n\nEncoding\n~~~~~~~~\n\nCrockford's Base32 is used as shown. This alphabet excludes the letters\nI, L, O, and U to avoid confusion and abuse.\n\n::\n\n    0123456789ABCDEFGHJKMNPQRSTVWXYZ\n\nBinary Layout and Byte Order\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe components are encoded as 16 octets. Each component is encoded with\nthe Most Significant Byte first (network byte order).\n\n::\n\n    0                   1                   2                   3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                      32_bit_uint_time_high                    |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |     16_bit_uint_time_low      |       16_bit_uint_random      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                       32_bit_uint_random                      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    |                       32_bit_uint_random                      |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nString Representation\n~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    ttttttttttrrrrrrrrrrrrrrrr\n\n    where\n    t is Timestamp\n    r is Randomness\n\nLinks\n~~~~~\n\n-  `Original Implementation\n   (Javascript) <https://github.com/alizain/ulid>`__\n-  `ulid (python) <https://github.com/mdipierro/ulid>`__\n\n.. |Build Status| image:: https://travis-ci.org/ahawker/ulid.svg?branch=master\n   :target: https://travis-ci.org/ahawker/ulid\n.. |Test Coverage| image:: https://codeclimate.com/github/ahawker/ulid/badges/coverage.svg\n   :target: https://codeclimate.com/github/ahawker/ulid/coverage\n.. |Code Climate| image:: https://codeclimate.com/github/ahawker/ulid/badges/gpa.svg\n   :target: https://codeclimate.com/github/ahawker/ulid\n.. |Issue Count| image:: https://codeclimate.com/github/ahawker/ulid/badges/issue_count.svg\n   :target: https://codeclimate.com/github/ahawker/ulid\n.. |PyPI Version| image:: https://badge.fury.io/py/ulid-py.svg\n   :target: https://badge.fury.io/py/ulid-py\n.. |PyPI Versions| image:: https://img.shields.io/pypi/pyversions/ulid-py.svg\n   :target: https://pypi.python.org/pypi/ulid-py\n.. |Documentation Status| image:: https://readthedocs.org/projects/ulid/badge/?version=latest\n   :target: http://ulid.readthedocs.io/en/latest/?badge=latest\n.. |Stories in Ready| image:: https://badge.waffle.io/ahawker/ulid.svg?label=ready&title=Ready\n   :target: http://waffle.io/ahawker/ulid\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ahawker/ulid",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ulid-py",
    "platform": "",
    "project_url": "https://pypi.org/project/ulid-py/",
    "release_url": "https://pypi.org/project/ulid-py/0.0.4/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Universally Unique Lexicographically Sortable Identifier",
    "version": "0.0.4"
  },
  "releases": {
    "0.0.1": [],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fb9ab3ae6fb34d892ee41b1d8273833c",
          "sha256": "4e598571d767a4b917a244c4fa0aa229b8b0bb886c1dc37198d4127bd68a54a9"
        },
        "downloads": 0,
        "filename": "ulid_py-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb9ab3ae6fb34d892ee41b1d8273833c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 13021,
        "upload_time": "2017-06-16T05:00:54",
        "url": "https://files.pythonhosted.org/packages/ef/5a/0190abba545bebff084a25009dfb2bc447d6b2cf75ffba9affcaca9ba8a4/ulid_py-0.0.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "fe4819f8e9dfe8adf89fcfe9e3c239cd",
          "sha256": "2e8382c06f63b623bf2fbe1ffcb0c2e6705e82a709b23cd235c691c91bcdb894"
        },
        "downloads": 0,
        "filename": "ulid-py-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fe4819f8e9dfe8adf89fcfe9e3c239cd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6503,
        "upload_time": "2017-06-16T05:00:56",
        "url": "https://files.pythonhosted.org/packages/27/b5/de27bf71ca9a976aff28ecc1cef00d4a974752ac8eec834f075b1d236919/ulid-py-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f96ddfeb084d32f5653965c7b80ee307",
          "sha256": "0b9c686536cb5c6e72ab6843e85193a6cd48722701d79174aca2a77ef3c2f628"
        },
        "downloads": 0,
        "filename": "ulid_py-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f96ddfeb084d32f5653965c7b80ee307",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 13148,
        "upload_time": "2017-06-25T19:36:29",
        "url": "https://files.pythonhosted.org/packages/25/fb/c3a34d68fb313ce0029bc283b5e9bf1b83177ede1f0f0ffa41e1d7625335/ulid_py-0.0.3-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "389d816f011407cfcec1a2bb46465e62",
          "sha256": "ec3bfbf80bc46b7cee34dfaa5549ea3f6a9854d78ccc64ef67b96398099ffedc"
        },
        "downloads": 0,
        "filename": "ulid-py-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "389d816f011407cfcec1a2bb46465e62",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6650,
        "upload_time": "2017-06-25T19:36:30",
        "url": "https://files.pythonhosted.org/packages/8a/49/8edb8f06b1cccc2607e84530175b1e2422190bc1963bfdddaecee5c41b9b/ulid-py-0.0.3.tar.gz"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "25bd5792e8813955d9515b2cde9c5309",
          "sha256": "389923435a1692fa6e979bdff5f12de7a03283776d136221a8382799f8217072"
        },
        "downloads": 0,
        "filename": "ulid_py-0.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "25bd5792e8813955d9515b2cde9c5309",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 19338,
        "upload_time": "2017-09-22T05:34:05",
        "url": "https://files.pythonhosted.org/packages/10/e0/4fe45aba24269f7fc15e0396f5466928ad38a03aa9394e6e4ef93b25c76b/ulid_py-0.0.4-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "56e647e5814b2342de413b7aa805b4b3",
          "sha256": "8baf5f234c2aa154ea92108c28add089618d7aab93e2c44a1cc6539a13f939ca"
        },
        "downloads": 0,
        "filename": "ulid-py-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "56e647e5814b2342de413b7aa805b4b3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10617,
        "upload_time": "2017-09-22T05:34:06",
        "url": "https://files.pythonhosted.org/packages/06/3a/0109550b724c7b0d3d08439318cb9597c0073ce23cfc264c70b399a57bfb/ulid-py-0.0.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "25bd5792e8813955d9515b2cde9c5309",
        "sha256": "389923435a1692fa6e979bdff5f12de7a03283776d136221a8382799f8217072"
      },
      "downloads": 0,
      "filename": "ulid_py-0.0.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "25bd5792e8813955d9515b2cde9c5309",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 19338,
      "upload_time": "2017-09-22T05:34:05",
      "url": "https://files.pythonhosted.org/packages/10/e0/4fe45aba24269f7fc15e0396f5466928ad38a03aa9394e6e4ef93b25c76b/ulid_py-0.0.4-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "56e647e5814b2342de413b7aa805b4b3",
        "sha256": "8baf5f234c2aa154ea92108c28add089618d7aab93e2c44a1cc6539a13f939ca"
      },
      "downloads": 0,
      "filename": "ulid-py-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "56e647e5814b2342de413b7aa805b4b3",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10617,
      "upload_time": "2017-09-22T05:34:06",
      "url": "https://files.pythonhosted.org/packages/06/3a/0109550b724c7b0d3d08439318cb9597c0073ce23cfc264c70b399a57bfb/ulid-py-0.0.4.tar.gz"
    }
  ]
}