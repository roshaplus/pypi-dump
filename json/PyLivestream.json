{
  "info": {
    "author": "Michael Hirsch, Ph.D.",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Multimedia :: Graphics :: Capture :: Screen Capture",
      "Topic :: Multimedia :: Sound/Audio :: Capture/Recording"
    ],
    "description": ".. image:: https://travis-ci.org/scivision/ffmpeg-youtube-live.svg?branch=master\n    :target: https://travis-ci.org/scivision/ffmpeg-youtube-live\n\n.. image:: https://coveralls.io/repos/github/scivision/ffmpeg-youtube-live/badge.svg?branch=master\n    :target: https://coveralls.io/github/scivision/ffmpeg-youtube-live?branch=master\n\n.. image:: https://img.shields.io/pypi/pyversions/youtubeliveffmpeg.svg\n  :target: https://pypi.python.org/pypi/youtubeliveffmpeg\n  :alt: Python versions (PyPI)\n\n.. image::  https://img.shields.io/pypi/format/youtubeliveffmpeg.svg\n  :target: https://pypi.python.org/pypi/youtubeliveffmpeg\n  :alt: Distribution format (PyPI)\n\n.. image:: https://api.codeclimate.com/v1/badges/b6557d474ec050e74629/maintainability\n   :target: https://codeclimate.com/github/scivision/ffmpeg-youtube-live/maintainability\n   :alt: Maintainability\n\n========================\nYouTube Live via FFmpeg\n========================\n\nFFmpeg can easily be used to stream to YouTube Live for streaming broadcasts.\nThese Python scripts compute the optimal parameters.\nShould work on any OS (Mac, Linux, Windows).\n\n:Linux: requires X11, not Wayland (choose at login)\n:FFmpeg: >= 3.0 required\n:Python: >= 3.6 required\n\n\n.. contents::\n\nInstall\n=======\n::\n\n    python -m pip install -e .\n\n\nUsage\n=====\n\nSpecify your video/audio device if desired at the top of the script.\nFind device names with commands like:\n\n* Windows: ``ffmpeg -list_devices true -f dshow -i dummy``\n* Mac: ``ffmpeg -f avfoundation -list_devices true -i \"\"``\n* Linux: ``v4l2-ctl --list-devices``\n\nI will describe usage for each of YouTube Live, Facebook Live, and Periscope.\n\nYouTube Live\n------------\n\n1. `configure  <https://www.youtube.com/live_dashboard>`_ YouTube Live.\n2. Run Python script and chosen input will stream on YouTube Live.\n\n\nWebcam\n~~~~~~\nAudio is included::\n\n    python Webcam2YouTubeLive.py\n\n\nScreen Share\n~~~~~~~~~~~~\nAudio is included::\n\n    python Screenshare2YouTubeLive.py\n\n-fps      set frames/second\n-res      set resolution XxY of your screen\n-o        set origin (upper left)\n\n\nseveral video files\n~~~~~~~~~~~~~~~~~~~\nGlob list of video files to stream::\n\n    python FileGlob2YouTubeLive.py path pattern\n\n-loop       optionally loop endlessly the globbed file list\n\n\nstream all videos in directory\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nExample: all AVI videos in directory ``~/Videos``::\n\n    python FileGlob2YouTubeLive.py ~/Videos \"*.avi\"\n\nstream endlessly looping videos\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nExample: all AVI videos in ``~/Videos`` are endlessly looped::\n\n    python FileGlob2YouTubeLive.py ~/Videos \"*.avi\" -loop\n\n\nstream all audio files in directory\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nGlob list of video files to stream. \nMust include a static image (could be your logo)::\n\n    python FileGlob2YouTubeLive.py path pattern -i image\n\npath      path to where video files are\npattern   e.g. \"*.avi\"  pattern matching video files\n-i        filename of image to use as stream background\n\nExample: stream all .mp3 audio under ``~/Library`` directory::\n\n    python FileGlob2YouTubeLive.py ~/Library \"*.mp3\" -i mylogo.jpg\n\n\nLoop single video endlessly\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n::\n\n    FileLoop2YouTubeLive.py videofile\n\n\nScreen capture to disk\n----------------------\nThis is NOT streaming.\nThis script saves your screen capture to a file on your disk::\n\n    python ScreenCapture2disk.py myvid.avi\n\n\nFacebook Live\n-------------\n\n1. configure your Facebook Live stream, get stream ID from `https://www.facebook.com/live/create <https://www.facebook.com/live/create>`_\n2. Run Python script for Facebook with chosen input\n\n::\n\n    python Screenshare2FacebookLive.py\n    \n    \nPeriscope\n---------\n\n1. create a new stream by EITHER:\n\n   * from phone Periscope app, go to Profile -> Settings -> Periscope Producer and see your Stream Key. The \"checking source\" button will go to \"preview stream\" once you do step #2.\n   * from computer web browser, go to `https://www.periscope.tv/account/producer <https://www.periscope.tv/account/producer>`_ and Create New Source.\n2. Run Python script for Periscope with chosen input\n\n::\n\n    python Screenshare2Periscope.py\n    \n    \nI prefer using the Phone method as then the phone is a \"second screen\" where I can see if the stream is lagging, and if I \"leave broadcast\" and come back in, I can comment from my phone etc.\n\nNotes\n=====\n\n* FFmpeg Ubuntu `PPA <https://launchpad.net/~mc3man/+archive/ubuntu/trusty-media>`_\n* `Reference webpage <https://www.scivision.co/youtube-live-ffmpeg-livestream/>`_\n* `Test videos for looping/globbing <http://www.divx.com/en/devices/profiles/video>`_\n\nFFmpeg References\n-----------------\n\n* `streaming <https://trac.ffmpeg.org/wiki/EncodingForStreamingSites>`_\n* `webcam <https://trac.ffmpeg.org/wiki/Capture/Webcam>`_\n\nWindows\n~~~~~~~\n* `DirectShow <https://trac.ffmpeg.org/wiki/DirectShow>`_ device selection\n* DirectShow `examples <https://ffmpeg.org/ffmpeg-devices.html#Examples-4>`_\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/scivision/PyLivestream",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyLivestream",
    "platform": "",
    "project_url": "https://pypi.org/project/PyLivestream/",
    "release_url": "https://pypi.org/project/PyLivestream/1.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Easy streaming using FFmpeg to YouTube Live, Periscope, Facebook Live.",
    "version": "1.1.0"
  },
  "releases": {
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2e01de565fbb6413715088a15c085674",
          "sha256": "7b724e3b10fa49f595d09ba7eb256dae58baedfc5f1416b5b0e82529014081c9"
        },
        "downloads": -1,
        "filename": "PyLivestream-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e01de565fbb6413715088a15c085674",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 11004,
        "upload_time": "2018-01-30T15:19:53",
        "url": "https://files.pythonhosted.org/packages/4a/ef/86ea66680af3dcca1c2f60958a3cfcf1948ebcde331035b2c2329796c9ec/PyLivestream-1.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e981b6a332d143c79a288a9089e994aa",
          "sha256": "e1e733fbd53bc1eebc37d7e8d73b0e120b3e712113522c7fe41d5a982f18fef6"
        },
        "downloads": -1,
        "filename": "PyLivestream-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e981b6a332d143c79a288a9089e994aa",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5942,
        "upload_time": "2018-01-30T15:19:52",
        "url": "https://files.pythonhosted.org/packages/04/d8/07ddeb61a679c37128270d8f3888284df9ebc509a88d69c58a87b4e4b715/PyLivestream-1.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2e01de565fbb6413715088a15c085674",
        "sha256": "7b724e3b10fa49f595d09ba7eb256dae58baedfc5f1416b5b0e82529014081c9"
      },
      "downloads": -1,
      "filename": "PyLivestream-1.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2e01de565fbb6413715088a15c085674",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "size": 11004,
      "upload_time": "2018-01-30T15:19:53",
      "url": "https://files.pythonhosted.org/packages/4a/ef/86ea66680af3dcca1c2f60958a3cfcf1948ebcde331035b2c2329796c9ec/PyLivestream-1.1.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "e981b6a332d143c79a288a9089e994aa",
        "sha256": "e1e733fbd53bc1eebc37d7e8d73b0e120b3e712113522c7fe41d5a982f18fef6"
      },
      "downloads": -1,
      "filename": "PyLivestream-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e981b6a332d143c79a288a9089e994aa",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5942,
      "upload_time": "2018-01-30T15:19:52",
      "url": "https://files.pythonhosted.org/packages/04/d8/07ddeb61a679c37128270d8f3888284df9ebc509a88d69c58a87b4e4b715/PyLivestream-1.1.0.tar.gz"
    }
  ]
}