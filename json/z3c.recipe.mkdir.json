{
  "info": {
    "author": "Uli Fouquet",
    "author_email": "grok-dev@zope.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Buildout",
      "License :: OSI Approved :: Zope Public License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "``z3c.recipe.mkdir`` README\n***************************\n\nThis package provides a ``zc.buildout`` recipe used to generate directories\nwithin a buildout.\n\nPlease see ``docs/index.rst`` for detailed documentation.\n\n\n:mod:`z3c.recipe.mkdir` Usage\n=============================\n\n\nRecipe Options\n--------------\n\n``z3c.recipe.mkdir`` provides the following options:\n\n* ``paths``\n    Contains the path(s) of directories created in normalized,\n    absolute form. I.e.::\n\n      mydir/../foo/bar\n\n    becomes::\n\n      /path/to/buildout-dir/foo/bar\n\n* ``remove-on-update``\n     Default: ``no``\n\n     By default, created directories are not removed\n     on updates of buildout configuration. This is a security measure\n     as created directories might contain valuable data.\n\n     You can, however, enforce automatic removing on updates by\n     setting this option to ``on``, ``yes`` or ``true``.\n\n* ``user``\n     Default: system-dependent\n\n     You can optionally set a username that should own created\n     directories. The username must be valid name (not an uid) and the\n     system must support setting a user ownership for files. Of\n     course, the running process must have the permission to set the\n     requested user.\n\n* ``group``\n     Default: system-dependent\n\n     You can optionally set a usergroup that should own created\n     directories.The group name must be a valid name (not a gid) and\n     the system must support setting a group ownership for files. Of\n     course, the running process must have the permission to set the\n     requested group.\n\n* ``mode``\n     Default: system-dependent\n\n     You can optionally set file permissions for created directories\n     as octal numbers as usually used on Unix systems. These file\n     permissions will be set for each created directory if the running\n     process is allowed to do so.\n\n     Normally, a value of ``0700`` will give rwx permissions to the\n     owner and no permissions to group members or others.\n\n     If you don't specify a mode, the system default will be used.\n\n* ``create-intermediate``\n     Default: ``yes``\n\n     If set to `no`, the parent directory of the path to create _must_\n     already exist when running the recipe (and an error occurs if not).\n\n     If set to `yes`, any missing intermediate directories will be\n     created. E.g. if creating a relative dir\n\n     ``a/b/c/``\n\n     with ``create-intermediate`` set to ``no``, the relative path\n     ``a/b/`` must exist already.\n\n\nSimple creation of directories via buildout\n-------------------------------------------\n\nLets create a minimal `buildout.cfg` file:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... ''')\n\nNow we can run buildout:\n\n  >>> printx(system(join('bin', 'buildout')))\n  Installing mydir.\n  mydir: created path: /sample-buildout/parts/mydir\n\nThe directory was indeed created in the ``parts`` directory:\n\n  >>> ls_parts()\n  d  mydir\n\n\nAs we did not specify a special path, the name of the created\ndirectory is like the section name ``mydir``.\n\n\nCreating a directory in a given path\n------------------------------------\n\nLets create a minimal `buildout.cfg` file. This time the directory\nhas a name different from section name and we have to tell explicitly,\nthat we want it to be created in the ``parts/`` directory. We set the\n``paths`` option to do so:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... paths = ${buildout:parts-directory}/myotherdir\n  ... ''')\n\nNow we can run buildout:\n\n  >>> printx(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  mydir: created path: /sample-buildout/parts/myotherdir\n\nThe directory was indeed created:\n\n  >>> ls_parts()\n  d  mydir\n  d  myotherdir\n\n\nCreating directories that are removed on updates\n------------------------------------------------\n\nWe can tell the recipe that a directory should be removed on updates by using\nthe ``remove-on-update`` option:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... remove-on-update = true\n  ... paths = newdir\n  ... ''')\n\n  >>> printx(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  mydir: created path: /sample-buildout/newdir\n\nThe ``newdir/`` directory was created:\n\n  >>> ls('.')\n  -  .installed.cfg\n  d  bin\n  -  buildout.cfg\n  d  develop-eggs\n  d  eggs\n  d  newdir\n  d  parts\n\nWe rewrite `buildout.cfg` and set a different path:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... remove-on-update = true\n  ... paths = newdir2\n  ... ''')\n\n  >>> printx(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  mydir: created path: /sample-buildout/newdir2\n\nNow ``newdir/`` has vanished and ``newdir2`` exists:\n\n  >>> ls('.')\n  -  .installed.cfg\n  d  bin\n  -  buildout.cfg\n  d  develop-eggs\n  d  eggs\n  d  newdir2\n  d  parts\n\nNote, that the created directory will be removed on next modification\nof `buildout.cfg`.\n\nSetting User, Group, and Permissions\n------------------------------------\n\nYou can optionally set ``user``, ``group``, or ``mode`` option for the\ndirs to be created.\n\nWhile ``user`` and ``group`` give the user/group that should own the\ncreated directory (and all not existing intermediate directories),\n``mode`` is expected to be an octal number to represent the directory\npermissions in Unix style.\n\nOf course, setting all these permissions and ownerships only works if\nthe system supports it and the running user has the permissions to do\nso.\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... paths = my/new/dir\n  ... mode = 700\n  ... user = %s\n  ... group = %s\n  ... ''' % (user, group))\n\n  >>> printx(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  mydir: created path: /sample-buildout/my\n  mydir:   mode 0700, user 'USER', group 'GROUP'\n  mydir: created path: /sample-buildout/my/new\n  mydir:   mode 0700, user 'USER', group 'GROUP'\n  mydir: created path: /sample-buildout/my/new/dir\n  mydir:   mode 0700, user 'USER', group 'GROUP'\n\n  >>> lls('my')\n  drwx------ USER GROUP my/new\n\n  >>> lls('my/new')\n  drwx------ USER GROUP my/new/dir\n\n\nThese options are optional, so you can leave any of them out and the system\ndefaults will be used instead.\n\n.. note:: Please note, that the permissions will only be set on newly\n          created directories. On updates only the permissions of the\n          leaf directory will be updated, not any intermediate\n          directories (except you set remove-on-update, which will\n          recreate also intermediate paths and set permissions\n          accordingly).\n\nOn updates only the leaf directories are changed\npermission-wise. E.g. if we change the mode from the original buildout\nfrom ``0700`` to ``0750``:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... paths = my/new/dir\n  ... remove-on-update = true\n  ... mode = 750\n  ... user = %s\n  ... group = %s\n  ... ''' % (user, group))\n\n  >>> printx(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  mydir: set permissions for /sample-buildout/my/new/dir\n  mydir:   mode 0750, user 'USER', group 'GROUP'\n\nthe permissions of the leaf directory were updated:\n\n  >>> lls('my/new')\n  drwxr-x--- USER GROUP my/new/dir\n\nwhile its parent's permissions are the same as before:\n\n  >>> lls('my')\n  drwx------ USER GROUP my/new\n\n\nClean up:\n\n  >>> import shutil\n  >>> shutil.rmtree('my')\n\nCreating relative paths\n-----------------------\n\nIf we specify a relative path, this path will be created relative to the\nbuildout directory:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... paths = myrootdir\n  ... ''')\n\n  >>> printx(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  mydir: created path: /sample-buildout/myrootdir\n\n\n  >>> ls('.')\n  -  .installed.cfg\n  d  bin\n  -  buildout.cfg\n  d  develop-eggs\n  d  eggs\n  d  myrootdir\n  d  parts\n\n  The old directories will **not** vanish:\n\n  >>> ls_parts()\n  d  mydir\n  d  myotherdir\n\n\nCreating intermediate paths\n---------------------------\n\nIf we specify several levels of directories, the intermediate parts\nwill be created for us as well by default:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... paths = myrootdir/other/dir/finaldir\n  ... ''')\n\n  >>> printx(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  mydir: created path: /sample-buildout/myrootdir/other\n  mydir: created path: /sample-buildout/myrootdir/other/dir\n  mydir: created path: /sample-buildout/myrootdir/other/dir/finaldir\n\n  >>> ls('myrootdir', 'other', 'dir')\n  d  finaldir\n\nIf we set the ``create-intermediate`` option to ``no`` (default is\n``yes``), the resulting dir will only be created if the parent\ndirectory exists already:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... paths = leaf/dir/without/existing/parent\n  ... create-intermediate = no\n  ... ''')\n\n  >>> printx(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  While:\n    Installing mydir.\n  Error: Cannot create: /sample-buildout/leaf/dir/without/existing/parent\n         Parent does not exist or not a directory.\n\nIf you want to be explicit about the paths to be created (and which\nnot), you can set ``create-intermediate`` to ``no`` and simply list\neach part of the path in ``paths`` option. This has the nice\nsideeffect of setting permissions correctly also for intermediate\npaths:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... paths = mydir\n  ...         mydir/with\n  ...         mydir/with/existing\n  ...         mydir/with/existing/parent\n  ... create-intermediate = no\n  ... mode = 750\n  ... ''')\n\n  >>> printx(system(join('bin', 'buildout')))\n  Installing mydir.\n  mydir: created path: /sample-buildout/mydir\n  mydir:   mode 0750\n  mydir: created path: /sample-buildout/mydir/with\n  mydir:   mode 0750\n  mydir: created path: /sample-buildout/mydir/with/existing\n  mydir:   mode 0750\n  mydir: created path: /sample-buildout/mydir/with/existing/parent\n  mydir:   mode 0750\n\nThis is more text to write down, but you can be sure that only\nexplicitly named dirs are created and permissions set accordingly.\n\nFor instance you can require a certain path to exist already and\ncreate only the trailing path parts. Say, we expect a local `etc/` to\nexist and want to create `etc/myapp/conf.d`. The following config\nwould do the trick:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... paths = etc/myapp\n  ...         etc/myapp/conf.d\n  ... create-intermediate = no\n  ... mode = 750\n  ... ''')\n\nIf the local `etc/` dir does not exist, we fail:\n\n  >>> printx(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  While:\n    Installing mydir.\n  Error: Cannot create: /sample-buildout/etc/myapp\n         Parent does not exist or not a directory.\n\nBut if this dir exists:\n\n  >>> mkdir('etc')\n  >>> printx(system(join('bin', 'buildout')))\n  Installing mydir.\n  mydir: created path: /sample-buildout/etc/myapp\n  mydir:   mode 0750\n  mydir: created path: /sample-buildout/etc/myapp/conf.d\n  mydir:   mode 0750\n\nthe subdirectories are created as expected.\n\nIt does, by the way, not matter, in which order you put the partial\nparts into ``paths`` as this list is sorted before being\nprocessed. So, any path `a/b/` will be processed before `a/b/c/`\nregardless of the order in which both parts appear in the\nconfiguration file.\n\n\nPaths are normalized\n--------------------\n\nIf we specify a non-normalized path (i.e. one that contains references\nto parent directories or similar), the path will be normalized before\ncreating it:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... paths = myroot/foo/../dir1/../bar/.\n  ... ''')\n\n  >>> printx(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  mydir: created path: /sample-buildout/myroot\n  mydir: created path: /sample-buildout/myroot/bar\n\nOnly ``bar/`` will be created:\n\n  >>> ls('myroot')\n  d  bar\n\n\nCreating multiple paths in a row\n--------------------------------\n\nWe can create multiple paths in one buildout section:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... paths = myroot/dir1\n  ...         myroot/dir2\n  ... ''')\n\n  >>> printx(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  mydir: created path: /sample-buildout/myroot/dir1\n  mydir: created path: /sample-buildout/myroot/dir2\n\n\n  >>> ls('myroot')\n  d  bar\n  d  dir1\n  d  dir2\n\nNote, that in this case you cannot easily reference the set path from\nother recipes or templates. If, for example in a template you\nreference::\n\n  root_dir = ${mydir:path}\n\nthe result will become::\n\n  root_dir = /path/to/buildout/dir1\n  path/to/buildout/dir2\n\nIf you specify only one path, however, the second line will not appear.\n\nUse several sections using `z3c.recipe.mkdir` if you want to reference\ndifferent created paths from templates or similar.\n\n\nTrailing slashes do not matter\n------------------------------\n\nIt doesn't matter, whether you specify the paths with trailing slash\nor without:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... paths = myroot/dir3/\n  ...         myroot/dir4\n  ... ''')\n\n  >>> printx(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  mydir: created path: /sample-buildout/myroot/dir3\n  mydir: created path: /sample-buildout/myroot/dir4\n\n  >>> ls('myroot')\n  d  bar\n  d  dir1\n  d  dir2\n  d  dir3\n  d  dir4\n\nThings to be aware of\n---------------------\n\nIf you change the setting of some path, the old directory and all its\ncontents will **not** be deleted (as you might expect from a buildout\nrecipe):\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... paths = path1\n  ... ''')\n\n  >>> printx(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  mydir: created path: /sample-buildout/path1\n\n  >>> write(join('path1', 'myfile'), 'blah\\n')\n  >>> ls('path1')\n  -  myfile\n\nNow we switch the setting of mydir to ``path2``:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... paths = path2\n  ... ''')\n\n  >>> printy(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  mydir: created path: /sample-buildout/path2\n  <BLANKLINE>\n\nThe file we created above is still alive:\n\n  >>> ls('path1')\n  -  myfile\n\n\nThings one should not do\n------------------------\n\nTrying to create directories that exist and are files\n#####################################################\n\nIf a part of a given path already exists and is a file, an error is\nraised:\n\n  >>> write('buildout.cfg',\n  ... '''\n  ... [buildout]\n  ... parts = mydir\n  ... offline = true\n  ...\n  ... [mydir]\n  ... recipe = z3c.recipe.mkdir\n  ... paths = rootdir2/somefile/foo\n  ... ''')\n\nNow we create the first part of the path beforehand:\n\n  >>> import os\n  >>> os.mkdir('rootdir2')\n\nAnd make the second part of the path a file:\n\n  >>> write(join('rootdir2', 'somefile'),\n  ... '''\n  ... blah\n  ... ''')\n\n  >>> printx(system(join('bin', 'buildout')))\n  Uninstalling mydir.\n  Installing mydir.\n  While:\n    Installing mydir.\n  Error: Cannot create directory: /.../rootdir2/somefile. It's a file.\n\n\nReferencing options\n-------------------\n\nFrom other buildout recipe components you can reference the options of\n`z3c.recipe.mkdir` like this::\n\n  ${<sectionname>:paths}\n\nwhere ``<sectionname>`` is the name of the `buildout.cfg` section\nwherein you set the paths.\n\nOptions `mode`, `user`, and `group` are only referencable if they are\nexplicitly set.\n\nReferencing without giving a path\n#################################\n\nYou can reference also, if no path was given explicitly in\n`buildout.cfg`:\n\n  >>> import z3c.recipe.mkdir\n  >>> buildout = dict(\n  ...   buildout = {\n  ...     'directory': '/buildout',\n  ...     'parts-directory' : '/buildout/parts',\n  ...   },\n  ...   somedir = {},\n  ... )\n\n  >>> recipe = z3c.recipe.mkdir.Recipe(\n  ...   buildout, 'somedir', buildout['somedir'])\n\n  >>> printy(buildout['somedir']['paths'])\n  /buildout/parts/somedir\n\nThis means that if you have a `buildout.cfg` like this::\n\n  [buildout]\n  parts = somedir ...\n\n  [somedir]\n  recipe = z3c.recipe.mkdir\n\n  ...\n\nthen for instance in a template you can write::\n\n  mydir = ${somedir:paths}\n\nwhich will turn into::\n\n  mydir = /buildout/parts/somedir\n\n\nReferencing with single path set\n################################\n\nIf you reference a single path, you will get this back in references:\n\n  >>> buildout = dict(\n  ...   buildout = {\n  ...     'directory': '/buildout',\n  ...     'parts-directory' : '/buildout/parts',\n  ...   },\n  ...   somedir = {\n  ...     'paths' : 'otherdir',\n  ...   },\n  ... )\n\n  >>> recipe = z3c.recipe.mkdir.Recipe(\n  ...   buildout, 'somedir', buildout['somedir'])\n\n  >>> printy(buildout['somedir']['paths'])\n  /sample-buildout/otherdir\n\nReferencing with multiple paths set\n###################################\n\nIf you set several paths in `buildout.cfg`, you will get several lines\nof output when referencing:\n\n  >>> buildout = dict(\n  ...   buildout = {\n  ...     'directory': '/buildout',\n  ...     'parts-directory' : '/buildout/parts',\n  ...   },\n  ...   somedir = {\n  ...     'paths' : 'dir1  \\n  dir2',\n  ...   },\n  ... )\n\n  >>> recipe = z3c.recipe.mkdir.Recipe(\n  ...   buildout, 'somedir', buildout['somedir'])\n\n  >>> printy(buildout['somedir']['paths'])\n  /sample-buildout/dir1\n  /sample-buildout/dir2\n\n\nChanges\n*******\n\n0.6 (2013-05-21)\n================\n\n- Dropped support for deprecated ``path`` option (use ``paths`` instead).\n\n- Added support for Python 3.2 / 3.3.\n\n- Added ``setup.py docs`` alias:  runs ``setup.py develop`` and then installs\n  documentation dependencies.\n\n- Added ``setup.py dev`` alias:  runs ``setup.py develop`` and then installs\n  testing dependencies.\n\n- Updated docs and tests.\n\n0.5 (2012-06-26)\n==================\n\n- Added support for ``create-intermediate`` option (``yes`` by default).\n\n- Fixed bug: empty directory names were not excluded from ``paths``.\n\n0.4 (2012-06-24)\n================\n\n- Added support for ``mode``, ``user``, and ``group`` options.\n\n- Fixed (unnoticed?) bug when using the deprecated ``path`` option. In\n  that case the default path (``parts/<sectionname>``) was created\n  instead of the given one.\n\n- Shortened main code.\n\n- Updated tests to run with ``zc.buildout`` 1.5, thus requiring at least this\n  version.\n\n- Using python's ``doctest`` module instead of depreacted\n  ``zope.testing.doctest``.\n\n\n0.3.1 (2009-08-21)\n==================\n\n- Update options ``path`` and ``paths`` to be referencable.\n\n- Output ``created`` message only if a directory was really created\n  but display this message also for intermediate directories.\n\n0.3 (2009-08-20)\n================\n\n- Renamed ``path`` option to ``paths`` (plural). Please do not use\n  ``path`` anymore!\n\n- Created directories are now displayed during buildout runs.\n\n- Changed default behaviour: directories created once will not be\n  removed on updates, except you require that explicitly.\n\n- Added new option ``remove-on-update``: if set to ``yes``, ``true``\n  or ``on`` the set directories will be removed on updates of\n  ``buildout`` configuration.\n\n\n0.2 (2009-08-19)\n================\n\n- Make paths absolute and normalize them before creation.\n\n- Support creation of several paths in a row.\n\n- Added check whether a file exists as part of path and emit error.\n\n\n0.1 (2009-08-17)\n================\n\n- Initial release.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://pypi.python.org/pypi/z3c.recipe.mkdir",
    "keywords": "buildout directory folder mkdir",
    "license": "ZPL 2.1",
    "maintainer": null,
    "maintainer_email": null,
    "name": "z3c.recipe.mkdir",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/z3c.recipe.mkdir/",
    "release_url": "https://pypi.org/project/z3c.recipe.mkdir/0.6/",
    "requires_python": null,
    "summary": "Buildout recipe to create directories.",
    "version": "0.6"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bea3a3044f1d450a2f69c33ae3e3b946",
          "sha256": "38097db0a9fd65b2edc4682d8d84a47616fc89bfedaaa8f934c6ae66e9401b9b"
        },
        "downloads": 2398,
        "filename": "z3c.recipe.mkdir-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bea3a3044f1d450a2f69c33ae3e3b946",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4911,
        "upload_time": "2009-08-17T18:20:44",
        "url": "https://files.pythonhosted.org/packages/6c/73/a168baa733eb7dca8879293c816d9358e519abeb9ea392bc9693f73b6178/z3c.recipe.mkdir-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e48c8a5b3736872a29de61f4ef37d3bf",
          "sha256": "ad42a46d72d5686ffb1ddd43214da5f270d27e9a10f9db29ded0a50aff4f83a6"
        },
        "downloads": 2854,
        "filename": "z3c.recipe.mkdir-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e48c8a5b3736872a29de61f4ef37d3bf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7431,
        "upload_time": "2009-08-19T14:02:17",
        "url": "https://files.pythonhosted.org/packages/bc/c5/ca3c6700bfae3a6e41fdee236c0d8a55eb7590d6e6f1836abf3be21b6dd3/z3c.recipe.mkdir-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "61ff55400d009eb4767195cc3aa4afcb",
          "sha256": "5ceb42f7a35c6990e85bd6a1aae25231a8c09cc0dd3fc856e33e0dbef9f9b721"
        },
        "downloads": 2490,
        "filename": "z3c.recipe.mkdir-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "61ff55400d009eb4767195cc3aa4afcb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10424,
        "upload_time": "2009-08-20T11:44:50",
        "url": "https://files.pythonhosted.org/packages/63/b2/dd4f551350365039d4a3ebb62ae22f816ca7e680b10e78f16a6c99875414/z3c.recipe.mkdir-0.3.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7409a7cd1d5fccd756dc464acfe646f7",
          "sha256": "60cbb63ef0d8db2389c18bb7b5d61a18f5bd1d2602c5872e40999ea087e1ef87"
        },
        "downloads": 38461,
        "filename": "z3c.recipe.mkdir-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7409a7cd1d5fccd756dc464acfe646f7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12012,
        "upload_time": "2009-08-21T15:59:01",
        "url": "https://files.pythonhosted.org/packages/01/f9/b3df6d2f6e82e3e9d8eeaac19bc51494dec744a873638aa6adf8ce990930/z3c.recipe.mkdir-0.3.1.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0c46f0498b57680fe902d6234acb175e",
          "sha256": "d5e5827defbd1e85a574e882f51c7b0ed10b56ceaaf21545838dd73dedb4425d"
        },
        "downloads": 2147,
        "filename": "z3c.recipe.mkdir-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0c46f0498b57680fe902d6234acb175e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18624,
        "upload_time": "2012-06-24T03:59:36",
        "url": "https://files.pythonhosted.org/packages/76/cb/d26955e16a804dc606e17244d234e5a543456f85aede67ed9ffa5d9a0882/z3c.recipe.mkdir-0.4.tar.gz"
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c327b17d97a1c9ececb7b2f8c4001885",
          "sha256": "d913580cdd483d6a877aae344356badf7ac6713edd685bb38dd38ce344ee5f31"
        },
        "downloads": 20830,
        "filename": "z3c.recipe.mkdir-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "c327b17d97a1c9ececb7b2f8c4001885",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20107,
        "upload_time": "2012-06-26T02:08:40",
        "url": "https://files.pythonhosted.org/packages/56/30/6756823a10f8cc24ab44efe0e7c5e6b52c923e71dc251a5059645a3f384f/z3c.recipe.mkdir-0.5.tar.gz"
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "807afdda6ba4db7ac3b47301986bd561",
          "sha256": "c0e0d0f6fbe5a84a6d4dbbe1cf8e81da799c2bb1088ad92b5ff6bca721ff224d"
        },
        "downloads": 50450,
        "filename": "z3c.recipe.mkdir-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "807afdda6ba4db7ac3b47301986bd561",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28510,
        "upload_time": "2013-05-22T15:09:59",
        "url": "https://files.pythonhosted.org/packages/b3/b5/02f3935f734b2b8966ac6c6e8d68da41b7e70fe94135e7e7824dc959ba9c/z3c.recipe.mkdir-0.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "807afdda6ba4db7ac3b47301986bd561",
        "sha256": "c0e0d0f6fbe5a84a6d4dbbe1cf8e81da799c2bb1088ad92b5ff6bca721ff224d"
      },
      "downloads": 50450,
      "filename": "z3c.recipe.mkdir-0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "807afdda6ba4db7ac3b47301986bd561",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 28510,
      "upload_time": "2013-05-22T15:09:59",
      "url": "https://files.pythonhosted.org/packages/b3/b5/02f3935f734b2b8966ac6c6e8d68da41b7e70fe94135e7e7824dc959ba9c/z3c.recipe.mkdir-0.6.tar.gz"
    }
  ]
}