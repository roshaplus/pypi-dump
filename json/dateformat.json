{
  "info": {
    "author": "Stephen Stagg",
    "author_email": "ste@sta.gg",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "# dateformat ![build status](https://travis-ci.org/stestagg/dateformat.svg?branch=master)\n\n`dateformat` does two things:  turn `datetime` objects into strings, and turn strings into `datetime` objects.\nIt's goal is to do these things simply and well, and to satisfy the following criteria:\n\n * Be fast enough (see below for benchmarks)\n * Handle a variety of date formats from multiple sources\n * Parse and format dates in many timezones and with many timezone offsets\n * Represent the expected format in a way that a non-technical person may understand\n * Be explicit about the expected format to prevent heuristic errors\n\n> \"But why another date library?\"\n\nThere isn't currently a python library I've been able to find that matches these \nrequirements well enough for my use-cases.  [`Arrow`](http://arrow.readthedocs.io/en/latest/)\n comes closest, but still isn't quite suitable performance-wise.\n\n# Usage\n\nAll functionality is based around DateFormat() objects:\n\n### `def __init__(self, spec, is_24hour=None)`\n\ncreate a dateformat object from the provided spec string.\n\n```\n>>> from dateformat import DateFormat\n\n>>> date_format = DateFormat(\"YYYY-MM-DD hh:mm:ss.SSSS+HH:MM\")\n```\n\nIf `is_24hour` is not provided, the format will be in 12-hour mode if an am/pm \npart is present in the spec, otherwise, dates will be in 24-hour mode.\n\nDateFormat instances have two methods:\n\n### `def parse(self, data)`\n\nParse a string(`data`) containing a date into a datetime object.\n\n```\n>>> date = date_format.parse(\"2017-06-03 15:32:00.2364-02:00\")\ndatetime.datetime(2017, 6, 3, 15, 32, 0, 236400, tzinfo=datetime.timezone(datetime.timedelta(-1, 79200)))\n```\n\n### `def format(self, date)`\n\nFormat the passed in `datetime.datetime` object (`date`) as a string:\n\n```\n>>> print(date_format.format(date))\n2017-06-03 15:32:00.2364-02:00\n```\n\n## Timezones\n\nIf any part of the format provides a timezone, or UTC offset, then parsing \nproduces dates with a timezone indicating the relevant UTC offset.\n\nLikewise, if a dateformat has a timezone part, then dates passed to `.format()`\nmust include a tzinfo value.\n\nIf pytz is available, then some level of named timezone support is provided.\n\n## Leading zeros\n\nAll numeric parts of the date format are zero-padded to the number of characters\nin the spec.  I.e.  'DD' means that the day of the month is zero-padded to 2-digits.\n\nDuring parsing, a missing leading zero is usually ignored, but if there is no separator\nbetween parts (for example:  YYYYMMDD), then a missing leading zero will cause an error or bad value.\n\nCurrently, all formatted dates are zero-padded, in the future, this may be controllable.\n\n## Date format specification\n| Part | Example | Description |\n|---------|---------|---------------|\n| `+HHMM` | -0515 | A UTC offset provided as a 2-digit hour, and 2-digit minute, with no separator |\n| `+HH:MM` | -05:15 | A UTC offset provided as a 2-digit hour, and 2-digit minute, with a ':' separator |\n| `+HH` | -05 | A UTC offset provided as a 2-digit hour only |\n| `Dddddd` | Monday | The full locale-specific day of the week (Note, this value is ignored during date parsing, but added during date format) |\n| `Ddd` | Mon | The locale-specific short name for the day of the week (Ignored during parsing) |\n| `DD` | 05 | The zero-padded day of the month. |\n| `MMMMM` | September | Month as locale\u2019s full name |\n| `MMM` | Sep | Month as locale\u2019s abbreviated name |\n| `YYYY` | 2017 | Year with century as a number |\n| `YY` | 17 | Year without century as a zero-padded number |\n| `hh` | 09 | Hour as a zero-padded number |\n| `mm` | 06 | Minute as a zero-padded number |\n| `ss` | 45 | Second as a zero-padded number |\n| `SSSSSS` | 123456 | Microsecond as a zero-padded decimal number |\n| `SSSS`   | 1234 | 100-microseconds as a zero-padded number |\n| `SSS` | 123 | milliseconds as a zero-padded number |\n| `SS` | 12 | 10-milliseconds as a zero-padded number |\n| `am` `Am` `AM` `pm` `Pm` `PM` | am | either AM or PM depending on the hour.  `.format()` matches the case of the spec.  If present, the dateformat will default to 12-hour mode |\n| `of` | | Ignored during parsing, added during formtting |\n| `st` | th | The appropriate suffix for the day of the month, for example '1_st_ July', '2_nd_ March' |\n| `\u2423` | T | (Unicode OPEN BOX - U+2423) Matches either the character 'T' or a space ' '.  During formatting, 'T' is always used (this is provided to improve flexibility when parsing iso8601 formats) |\n| space | | Matches one or more spaces during parsing.  During formatting, one space will be output |\n| any of `:/-.,TZ()` | | Ignored during parsing, output as-is during formatting |\n\n\n# Library comparison\n\n## dateformat \u21c4 datetime (builtin python module)\n\nDateformat is *not* trying to be a replacement for the builtin datetime module.  `datetime.datetime` objects are used as the input/output to the parsing and formatting methods.\n\nIt is designed as a replacement for the  `datetime.datetime.strftime` and `datetime.datetime.strptime` methods, providing:\n\n * better timezone handling\n * a simpler/more common syntax for specifying the date formats\n * slightly faster parsing\n\n## dateformat \u21c4 dateutil.parser.parse()\n\n`dateutil.parser.parse`'s intent is to turn a string in an unknown format into a date.  It does that by using a variety of heuristics to try to figure out the format the date has been expressed in.\n\nThis approach is highly useful, and very flexible, but suffers from a couple of drawbacks that dateformat doesn't have:\n\n * There is ambiguity about what date will be produced from a given string, there are situations where that risk cannot be accepted, and it's important for the system to only accept a certain date format\n * Because of all the work that dateutil is doing to work out the format used, it's fairly slow, at just under 10x slower than `strptime`, this is very noticable over 10s - 100s thousands of dates.\n\n## dateformat \u21c4 arrow\n\narrow is the closest to the way dateformat works, the syntax for describing dates is very similar. Unfortunately, arrow constructs its parser every time a date is parsed, creating a significant overhead when parsing each date.\n\n## dateformat \u21c4 iso8601 / ciso8601\n\nciso8601 is _really_ fast.  Unfortunately both these libraries only handle a single date format, so are not useful in this situation.\n\n# Benchmarks\n\nthe `benchmark/` dir contains some simple scripts to show how the relative libraries perform at parsing and formatting dates.\n\nRunning on a 2016 macbook pro, on Python 3.6.3 gave the following results (best of 3 runs):\n\n(Please note, the parse time chart y-axis has been clamped to 1s, but dateparser took 16s to complete)\n\n![chart showing relative date parse performance](https://github.com/stestagg/dateformat/raw/master/benchmark/parse_times.png)\n\n![chart showing relative date format performance](https://github.com/stestagg/dateformat/raw/master/benchmark/format_times.png)",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/stestagg/dateformat",
    "keywords": "date time parsing formatting datetime",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dateformat",
    "platform": "",
    "project_url": "https://pypi.org/project/dateformat/",
    "release_url": "https://pypi.org/project/dateformat/0.9.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Parse and format dates quickly",
    "version": "0.9.2"
  },
  "releases": {
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c9b071109941dc630a7d8a6250f3773f",
          "sha256": "e6b565db34f5dfb76d04560d72eafa6fafbbd05b2a364f650bc0a22e2c64fc8f"
        },
        "downloads": -1,
        "filename": "dateformat-0.9.0.macosx-10.13-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "c9b071109941dc630a7d8a6250f3773f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14624,
        "upload_time": "2017-12-08T17:34:01",
        "url": "https://files.pythonhosted.org/packages/d0/26/954cb8f5c615154cf0f09e9bf3ee900fd2b13e9f3dc166b0ca377376e809/dateformat-0.9.0.macosx-10.13-x86_64.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "05049ce60e9623a79b468f91ab214e38",
          "sha256": "05c63d112161c65710cdba110495255d1ebafb398bcc7c94c682a3206128efd8"
        },
        "downloads": -1,
        "filename": "dateformat-0.9.0-py3.6.egg",
        "has_sig": false,
        "md5_digest": "05049ce60e9623a79b468f91ab214e38",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "size": 14587,
        "upload_time": "2017-12-08T17:34:00",
        "url": "https://files.pythonhosted.org/packages/20/eb/33aa69a3161ff50d85b8742d75859acd90bfcdbd89e56879a890e3abf86d/dateformat-0.9.0-py3.6.egg"
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5bc007350e249903982c0229f2afe4eb",
          "sha256": "d13c49568a59986162c77b2f27cfd203b259fa4523ec076d3b683db7dfc06345"
        },
        "downloads": -1,
        "filename": "dateformat-0.9.1.macosx-10.13-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "5bc007350e249903982c0229f2afe4eb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14657,
        "upload_time": "2017-12-08T17:35:44",
        "url": "https://files.pythonhosted.org/packages/70/34/3522ebf6ff66e85470fb9057b90cdd225ea0216378140c785d05c1cf6dd1/dateformat-0.9.1.macosx-10.13-x86_64.tar.gz"
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "797bf5c7c300ee4a825a57870dc20c04",
          "sha256": "068ca93f00199fbe5d537fce633f182b3c983214f6eb50d63da42bca7fa959fd"
        },
        "downloads": -1,
        "filename": "dateformat-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "797bf5c7c300ee4a825a57870dc20c04",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10042,
        "upload_time": "2017-12-08T17:37:46",
        "url": "https://files.pythonhosted.org/packages/15/ff/5c03c440ededbab084056f093439aa411afcd979547c8cfb94214ecd82e2/dateformat-0.9.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "797bf5c7c300ee4a825a57870dc20c04",
        "sha256": "068ca93f00199fbe5d537fce633f182b3c983214f6eb50d63da42bca7fa959fd"
      },
      "downloads": -1,
      "filename": "dateformat-0.9.2.tar.gz",
      "has_sig": false,
      "md5_digest": "797bf5c7c300ee4a825a57870dc20c04",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10042,
      "upload_time": "2017-12-08T17:37:46",
      "url": "https://files.pythonhosted.org/packages/15/ff/5c03c440ededbab084056f093439aa411afcd979547c8cfb94214ecd82e2/dateformat-0.9.2.tar.gz"
    }
  ]
}