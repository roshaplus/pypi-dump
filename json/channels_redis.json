{
  "info": {
    "author": "Django Software Foundation",
    "author_email": "foundation@djangoproject.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "channels_redis\n==============\n\n.. image:: https://api.travis-ci.org/django/channels_redis.svg\n    :target: https://travis-ci.org/django/channels_redis\n\n.. image:: https://img.shields.io/pypi/v/channels_redis.svg\n    :target: https://pypi.python.org/pypi/channels_redis\n\nA Django Channels channel layer that uses Redis as its backing store, and supports\nboth a single-server and sharded configurations, as well as group support.\n\n**Note:** Prior versions of this package were called ``asgi_redis`` and are\nstill available under PyPI as that name if you need them for Channels 1.x projects.\nThis package is for Channels 2 projects only.\n\n\nUsage\n-----\n\nSet up the channel layer in your Django settings file like so::\n\n    CHANNEL_LAYERS = {\n        \"default\": {\n            \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n            \"CONFIG\": {\n                \"hosts\": [(\"localhost\", 6379)],\n            },\n        },\n    }\n\nPossible options for ``CONFIG`` are listed below.\n\n``hosts``\n~~~~~~~~~\n\nThe server(s) to connect to, as either URIs or ``(host, port)`` tuples.\nDefaults to ``['localhost', 6379]``. Pass multiple hosts to enable sharding,\nbut note that changing the host list will lose some sharded data.\n\n``prefix``\n~~~~~~~~~~\n\nPrefix to add to all Redis keys. Defaults to ``asgi:``. If you're running\ntwo or more entirely separate channel layers through the same Redis instance,\nmake sure they have different prefixes. All servers talking to the same layer\nshould have the same prefix, though.\n\n``expiry``\n~~~~~~~~~~\n\nMessage expiry in seconds. Defaults to ``60``. You generally shouldn't need\nto change this, but you may want to turn it down if you have peaky traffic you\nwish to drop, or up if you have peaky traffic you want to backlog until you\nget to it.\n\n``group_expiry``\n~~~~~~~~~~~~~~~~\n\nGroup expiry in seconds. Defaults to ``86400``. Interface servers will drop\nconnections after this amount of time; it's recommended you reduce it for a\nhealthier system that encourages disconnections.\n\n``capacity``\n~~~~~~~~~~~~\n\nDefault channel capacity. Defaults to ``100``. Once a channel is at capacity,\nit will refuse more messages. How this affects different parts of the system\nvaries; a HTTP server will refuse connections, for example, while Django\nsending a response will just wait until there's space.\n\n``channel_capacity``\n~~~~~~~~~~~~~~~~~~~~\n\nPer-channel capacity configuration. This lets you tweak the channel capacity\nbased on the channel name, and supports both globbing and regular expressions.\n\nIt should be a dict mapping channel name pattern to desired capacity; if the\ndict key is a string, it's intepreted as a glob, while if it's a compiled\n``re`` object, it's treated as a regular expression.\n\nThis example sets ``http.request`` to 200, all ``http.response!`` channels\nto 10, and all ``websocket.send!`` channels to 20:\n\n.. code-block:: python\n\n    CHANNEL_LAYERS = {\n        \"default\": {\n            \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n            \"CONFIG\": {\n                \"hosts\": [(\"localhost\", 6379)],\n                \"channel_capacity\": {\n                    \"http.request\": 200,\n                    \"http.response!*\": 10,\n                    re.compile(r\"^websocket.send\\!.+\"): 20,\n                },\n            },\n        },\n    }\n\nIf you want to enforce a matching order, use an ``OrderedDict`` as the\nargument; channels will then be matched in the order the dict provides them.\n\n``symmetric_encryption_keys``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPass this to enable the optional symmetric encryption mode of the backend. To\nuse it, make sure you have the ``cryptography`` package installed, or specify\nthe ``cryptography`` extra when you install ``channels_redis``::\n\n    pip install channels_redis[cryptography]\n\n``symmetric_encryption_keys`` should be a list of strings, with each string\nbeing an encryption key. The first key is always used for encryption; all are\nconsidered for decryption, so you can rotate keys without downtime - just add\na new key at the start and move the old one down, then remove the old one\nafter the message expiry time has passed.\n\nData is encrypted both on the wire and at rest in Redis, though we advise\nyou also route your Redis connections over TLS for higher security; the Redis\nprotocol is still unencrypted, and the channel and group key names could\npotentially contain metadata patterns of use to attackers.\n\nKeys **should have at least 32 bytes of entropy** - they are passed through\nthe SHA256 hash function before being used as an encryption key. Any string\nwill work, but the shorter the string, the easier the encryption is to break.\n\nIf you're using Django, you may also wish to set this to your site's\n``SECRET_KEY`` setting via the ``CHANNEL_LAYERS`` setting:\n\n.. code-block:: python\n\n    CHANNEL_LAYERS = {\n        \"default\": {\n            \"BACKEND\": \"channels_redis.core.RedisChannelLayer\",\n            \"CONFIG\": {\n                \"hosts\": [\"redis://:password@127.0.0.1:6379/0\"],\n                \"symmetric_encryption_keys\": [SECRET_KEY],\n            },\n        },\n    }\n\n\nDependencies\n------------\n\nRedis >= 2.6 is required for `channels_redis`. It supports Python 3.5 and up.\n\nContributing\n------------\n\nPlease refer to the\n`main Channels contributing docs <https://github.com/django/channels/blob/master/CONTRIBUTING.rst>`_.\nThat also contains advice on how to set up the development environment and run the tests.\n\nMaintenance and Security\n------------------------\n\nTo report security issues, please contact security@djangoproject.com. For GPG\nsignatures and more security process information, see\nhttps://docs.djangoproject.com/en/dev/internals/security/.\n\nTo report bugs or request new features, please open a new GitHub issue.\n\nThis repository is part of the Channels project. For the shepherd and maintenance team, please see the\n`main Channels readme <https://github.com/django/channels/blob/master/README.rst>`_.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/django/channels_redis/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "channels_redis",
    "platform": "",
    "project_url": "https://pypi.org/project/channels_redis/",
    "release_url": "https://pypi.org/project/channels_redis/2.0.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Redis-backed ASGI channel layer implementation",
    "version": "2.0.0"
  },
  "releases": {
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "074cfcd7f06ad96b7a6e80c2542c8d47",
          "sha256": "99f0638d4f71959dcf5984d02b70b02ad8e6d99dce028ae9c70190ff65180ff5"
        },
        "downloads": -1,
        "filename": "channels_redis-2.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "074cfcd7f06ad96b7a6e80c2542c8d47",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 11748,
        "upload_time": "2018-02-02T05:25:29",
        "url": "https://files.pythonhosted.org/packages/be/43/b96ddbedb1ffd46bcc1bb6e4aa7fc9ff77d52201c8896ddf181e2f9f1e1b/channels_redis-2.0.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "58b5eee1024ee42bc3e3f25e9e914c56",
          "sha256": "388b8a17aaad9b74ecfd3a3a8c5295eee39a2b989368fdb003d1453d0723c0c1"
        },
        "downloads": -1,
        "filename": "channels_redis-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "58b5eee1024ee42bc3e3f25e9e914c56",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8487,
        "upload_time": "2018-02-02T05:25:27",
        "url": "https://files.pythonhosted.org/packages/2a/0b/380ee7c05ef463cc20728925362bcb8d19a0e1268e6bec1e3a7f9cf69242/channels_redis-2.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "074cfcd7f06ad96b7a6e80c2542c8d47",
        "sha256": "99f0638d4f71959dcf5984d02b70b02ad8e6d99dce028ae9c70190ff65180ff5"
      },
      "downloads": -1,
      "filename": "channels_redis-2.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "074cfcd7f06ad96b7a6e80c2542c8d47",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 11748,
      "upload_time": "2018-02-02T05:25:29",
      "url": "https://files.pythonhosted.org/packages/be/43/b96ddbedb1ffd46bcc1bb6e4aa7fc9ff77d52201c8896ddf181e2f9f1e1b/channels_redis-2.0.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "58b5eee1024ee42bc3e3f25e9e914c56",
        "sha256": "388b8a17aaad9b74ecfd3a3a8c5295eee39a2b989368fdb003d1453d0723c0c1"
      },
      "downloads": -1,
      "filename": "channels_redis-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "58b5eee1024ee42bc3e3f25e9e914c56",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8487,
      "upload_time": "2018-02-02T05:25:27",
      "url": "https://files.pythonhosted.org/packages/2a/0b/380ee7c05ef463cc20728925362bcb8d19a0e1268e6bec1e3a7f9cf69242/channels_redis-2.0.0.tar.gz"
    }
  ]
}