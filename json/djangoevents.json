{
  "info": {
    "author": "Applause",
    "author_email": "eng@applause.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Welcome to djangoevents' documentation!\ndjangoevents offers building blocks for building Event Sourcing Django applications.\n\n[![Build Status](https://travis-ci.org/ApplauseOSS/djangoevents.svg?branch=master)](https://travis-ci.org/ApplauseOSS/djangoevents)\n[![Build Status](https://travis-ci.org/ApplauseOSS/djangoevents.svg?branch=devel)](https://travis-ci.org/ApplauseOSS/djangoevents)\n\n## Setup\nInstall with pip:\n\n```\npip install djangoevents\n```\n\nInclude in settings.py:\n```python\nINSTALLED_APPS = [\n    ...\n    'djangoevents',\n    ...\n]\n```\n\n## Event Sourcing Components\ndjangoevents takes advantage of [eventsourcing](https://github.com/johnbywater/eventsourcing) library for handling event sourcing and replaces its storage backend with Django Model for seamless integration with Django.\n\n### BaseAggregate\nIt is required to place all aggregate definitions in `aggregates.py` module of a Django application.\n\nBaseEntity is a wrapper over EventSourcedEntity from eventsourcing's EventSourcedEntity. It is used to define Aggregates, its domain events and how domain events apply changes to Aggregates in one place.\n\n```python\nfrom djangoevents import BaseAggregate\n\nclass Todo(BaseAggregate):\n\n    class Created(BaseAggregate.Created):\n        def mutate_event(self, event, cls):\n            return cls(\n                entity_id=event.entity_id,\n                entity_version=event.entity_version,\n                domain_event_id=event.domain_event_id,\n                label=event.label,\n                done=False,\n            )\n\n    class ChangedLabel(BaseAggregate.AttributeChanged):\n        def mutate_event(self, event, instance):\n            instance.label = event.label\n            return instance\n```\n\n\n### EventSourcingWithDjango\nFor seamless integration with Django, we created an implementation of eventsourcing's eventStore using Django ORM and built EventSourcingWithDjango on top of it. By using EventSourcingWithDjango, the Django ORM will be used to store events. Here is a short example of how to create and save an event:\n```python\nfrom djangoevents import EventSourcingWithDjango\nfrom djangoevents import store_event\n\nclass Todo(EventSourcedEntity):\n    ...\n\nclass TodoRepository(EventSourcedRepository):\n    domain_class = Todo\n\nes_app = EventSourcingWithDjango()\nrepo = es_app.get_repo_for_entity(Todo)\n\n# publish event (saves in the database)\ntodo_created_event = Todo.Created(\n    entity_id='6deaca4c-d866-4b28-9878-8814a55a4688',\n    label='my next thing to do',\n    metadata={'command_id': '...'}\n)\nstore_event(todo_created_event)\n\n# get todo aggregate from repo by aggregate id\nmy_todo = repo['6deaca4c-d866-4b28-9878-8814a55a4688']\n\n```\n\n\n### Event handlers\n\nIf extra event handling on event publish other than saving it to event journal is a requirement, add `handlers.py` file in your app and use _subscribe_to_ decorator with the DomainEvent class you intent to listen on. Example:\n\n\n```python\nfrom djangoevents import subscribe_to\nfrom myapp.entities import Miracle\n\n@subscribe_to(Miracle.Happened)\ndef miracle_handler(event):\n    print(\" => miracle happened! update your projections here!\")\n```\n\n\nNote: name of that file is important. There is auto-import mechanism that would import\n`handlers.py` file for all apps mentioned in `INSTALLED_APPS`. You can put handler\nfunctions anywhere you like but you'd need to make sure it's imported somehow.\n\n### Import shortcuts\nFor the ease of use, we have ported commonly used functionality from [eventsourcing](https://github.com/johnbywater/eventsourcing) to the top level of this library.\n\n```python\nfrom djangoevents import DomainEvent                    # from eventsourcing.domain.model.entity import DomainEvent\nfrom djangoevents import EventSourcedEntity             # from eventsourcing.domain.model.entity import EventSourcedEntity\nfrom djangoevents import entity_mutator                 # from eventsourcing.domain.model.entity import entity_mutator\nfrom djangoevents import singledispatch                 # from eventsourcing.domain.model.entity import singledispatch\n\nfrom djangoevents import store_event                    # from eventsourcing.domain.model.events import publish\nfrom djangoevents import subscribe                      # from eventsourcing.domain.model.events import subscribe\nfrom djangoevents import unsubscribe                    # from eventsourcing.domain.model.events import unsubscribe\n\nfrom djangoevents import subscribe_to                   # from eventsourcing.domain.model.decorators import subscribe_to\n\nfrom djangoevents import EventSourcedRepository         # from eventsourcing.infrastructure.event_sourced_repo import EventSourcedRepository\n```\n\n### Documenting event schema\n\nEvent schema validation is disabled by default. To enable it for the whole project please add `DJANGOEVENTS_CONFIG` to project's `settings.py`:\n\n```python\nDJANGOEVENTS_CONFIG = {\n    ...\n    'EVENT_SCHEMA_VALIDATION': {\n        'ENABLED': True,\n        'SCHEMA_DIR': 'avro',\n    },\n    ...\n}\n\n```\nOnce this is enabled avro schema definition will be required for all events in the system.\nThe only exception to this rule are events of abstract aggregates:\n\n```python\nfrom djangoevents import BaseAggregate, abstract\n\n@abstract\nclass Animal(BaseAggregate):\n    class Created(BaseAggregate.Created):\n        def mutate_event(self, event, cls):\n            return cls(\n                entity_id=event.entity_id,\n                entity_version=event.entity_version,\n                domain_event_id=event.domain_event_id,\n                label=event.label,\n                done=False,\n            )\n\nclass Dog(Animal):\n    pass\n\n```\n\nIn the example above `Animal` was defined as an `abstract` aggregate. Its goal is to keep all common implementation in a single place\nfor child classes. No event specification is required for `Animal.Created` abstract aggregates. It needs to be present for `Dog.Created` though.\n\n**It is expected that each service will fully document all events emitted through avro schema definitions**. Read more about [avro format specification](https://avro.apache.org/docs/1.7.7/spec.html).\n\nBy default djangoevents assumes event schemas will be placed in `avro` folder located at project's root directory as specifed below:\n\n```bash\n$ tree project\n|- src\n|--- manage.py\n|--- ..\n|-avro\n|--- aggragate_name/\n|----- v1_aggregate_name_test_event1.json\n|----- v1_aggregate_name_test_event2.json\n...\n```\n\n```bash\n$ cat avro/aggragate_name/v1_aggregate_name_test_event1.json\n\n{\n  \"name\": \"aggregate_name_test_event1\",\n  \"type\": \"record\",\n  \"doc\": \"Sample Event\",\n  \"fields\": [\n    {\n      \"name\": \"entity_id\",\n      \"type\": \"string\",\n      \"doc\": \"ID of a the asset.\"\n    },\n    {\n      \"name\": \"entity_version\",\n      \"type\": \"long\",\n      \"doc\": \"Aggregate revision\"\n    },\n    {\n      \"name\": \"domain_event_id\",\n      \"type\": \"string\",\n      \"doc\": \"ID of the last modifying event\"\n    },\n  ]\n}\n\n```\n\nOnce event schema validation is enabled for your services, following changes will apply:\n  * At startup (`djangoevents.AppConfig.ready()`) schemas of events of all non-abstract aggregates will be loaded, validated & cached. If any error occurs warning message will be printed in the console.\n  * `store_event()` will validate your event before storing it to the event journal.\n\nIn cases where enabling validation for the whole project is not possible you can enforce schema validation on-demand by adding `force_valdate=True` parameter to `store_event()` call.\n\n## Development\n#### Build\n    $ make install\n#### Run tests\n    $ source venv/bin/activate\n    $ pytest\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ApplauseOSS/djangoevents",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "djangoevents",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/djangoevents/",
    "release_url": "https://pypi.org/project/djangoevents/0.12.0/",
    "requires_python": null,
    "summary": "Building blocks for building Event Sourcing Django applications.",
    "version": "0.12.0"
  },
  "releases": {
    "0.11.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ecf499c55028d47c35f32ff41c723a13",
          "sha256": "31ce5fc8b06ea541a1558158193999f9b0025ce8e0eb25b992dd165ae68885e5"
        },
        "downloads": 14,
        "filename": "djangoevents-0.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ecf499c55028d47c35f32ff41c723a13",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15830,
        "upload_time": "2017-03-06T16:51:40",
        "url": "https://files.pythonhosted.org/packages/41/a9/4c6c727c075280e2a64fabcf1fad8c50736ec0138d9593cb2d558afab0df/djangoevents-0.11.0.tar.gz"
      }
    ],
    "0.12.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "99ff216fb327faa6bc36c6446d36f205",
          "sha256": "4862a8f6a14580ecc95441bbe0aaa020fa5c0cf0a4203b92a0740d6ae556f964"
        },
        "downloads": 0,
        "filename": "djangoevents-0.12.0.tar.gz",
        "has_sig": false,
        "md5_digest": "99ff216fb327faa6bc36c6446d36f205",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16640,
        "upload_time": "2017-05-29T12:24:38",
        "url": "https://files.pythonhosted.org/packages/6c/46/054d3a48a541e55a018124c45de04a7c560eb810cc03a40fb85d87642ba3/djangoevents-0.12.0.tar.gz"
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eb68b0acebd76cf4865857c5c2797d1b",
          "sha256": "351c9fc01ef5392ba1f53574ce01aafccb581be7b46da6d1056be4b116558adb"
        },
        "downloads": 8,
        "filename": "djangoevents-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "eb68b0acebd76cf4865857c5c2797d1b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9959,
        "upload_time": "2017-01-24T16:04:56",
        "url": "https://files.pythonhosted.org/packages/c3/36/1837ed80de093834223c8323a49c7dde8707476e88e4d857897c45184a64/djangoevents-0.9.2.tar.gz"
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "83087ff6be77e6436d73313421d96d85",
          "sha256": "289fecf1b293ffd4213da2b6d59d2fc5e409a1a2dff505984e11c349a08d6c1c"
        },
        "downloads": 12,
        "filename": "djangoevents-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "83087ff6be77e6436d73313421d96d85",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9941,
        "upload_time": "2017-01-31T09:56:46",
        "url": "https://files.pythonhosted.org/packages/2e/c3/4e4057092c47bf04025b335bd94c2a095340262952cfce662fbb23822e7f/djangoevents-0.9.3.tar.gz"
      }
    ],
    "0.9.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "797f5a8191b482ef0595e6568ab53bf5",
          "sha256": "9c3f33097308869ecd9518b0704807181d8168ee4395aa9c61499e2d3e39e4e0"
        },
        "downloads": 14,
        "filename": "djangoevents-0.9.4.tar.gz",
        "has_sig": false,
        "md5_digest": "797f5a8191b482ef0595e6568ab53bf5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10017,
        "upload_time": "2017-02-15T10:56:32",
        "url": "https://files.pythonhosted.org/packages/da/26/7ca5442892e821888fb4aae8c8f544b4e5f71c8e09cc870d82a40f7b7135/djangoevents-0.9.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "99ff216fb327faa6bc36c6446d36f205",
        "sha256": "4862a8f6a14580ecc95441bbe0aaa020fa5c0cf0a4203b92a0740d6ae556f964"
      },
      "downloads": 0,
      "filename": "djangoevents-0.12.0.tar.gz",
      "has_sig": false,
      "md5_digest": "99ff216fb327faa6bc36c6446d36f205",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 16640,
      "upload_time": "2017-05-29T12:24:38",
      "url": "https://files.pythonhosted.org/packages/6c/46/054d3a48a541e55a018124c45de04a7c560eb810cc03a40fb85d87642ba3/djangoevents-0.12.0.tar.gz"
    }
  ]
}