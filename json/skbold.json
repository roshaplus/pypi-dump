{
  "info": {
    "author": "Lukas Snoek",
    "author_email": "lukassnoek@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Science/Research",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "skbold - utilities and tools for machine learning on BOLD-fMRI data\n===================================================================\n\n.. image:: https://travis-ci.org/lukassnoek/skbold.svg?branch=develop\n    :target: https://travis-ci.org/lukassnoek/skbold\n\n.. image:: https://readthedocs.org/projects/skbold/badge/?version=develop\n    :target: http://skbold.readthedocs.io/en/develop/?badge=master\n    :alt: Documentation Status\n\n.. image:: https://coveralls.io/repos/github/lukassnoek/skbold/badge.svg\n    :target: https://coveralls.io/github/lukassnoek/skbold\n\n.. _scikit-learn: http://scikit-learn.org/\n.. _FSL: http://fsl.fmrib.ox.ac.uk/fsl\n.. _mlxtend: https://github.com/rasbt/mlxtend\n.. _Steven: https://github.com/StevenM1\n.. _Joost: https://github.com/y0ast\n.. _readthedocs.org: http://skbold.readthedocs.io/\n.. _NEO-FFI: https://en.wikipedia.org/wiki/Revised_NEO_Personality_Inventory\n.. _Github: https://github.com/lukassnoek\n\nThe Python package ``skbold`` offers a set of tools and utilities for\nmachine learning and RSA-type analyses of functional MRI (BOLD-fMRI) data.\nInstead of (largely) reinventing the wheel, this package builds upon an existing\nmachine learning framework in Python: scikit-learn_.\nSpecifically, it offers a module with scikit-learn-style 'transformers' (with\nthe corresponding scikit-learn API) and some (experimental) scikit-learn\ntype estimators.\n\nNext to these transformer- and estimator-functionalities, ``skbold`` offers\na new data-structure, the ``Mvp`` (Multivoxel pattern), that allows for an\nefficient way to store and access data and metadata necessary for multivoxel\nanalyses of fMRI data. A novel feature of this data-structure is that it is\nable to easily load data from FSL_-FEAT output\ndirectories. As the ``Mvp`` object is available in two 'options', they are\nexplained in more detail below.\n\nMvp-objects\n-----------\nAt the core, an ``Mvp``-object is simply a collection of data - a 2D array\nof samples by features - and fMRI-specific metadata necessary to perform\ncustomized preprocessing and feature engineering. However, machine learning\nanalyses, or more generally any type of multivoxel-type analysis (i.e. MVPA),\ncan be done in two basic ways.\n\nMvpWithin\n~~~~~~~~~\nOne way is to perform analyses *within subjects*. This means that a model is\nfit on each subjects' data separately. Data, in this context, often refers to\nsingle-trial data, in which each trial comprises a sample in our data-matrix and\nthe values per voxel constitute our features. This type of analysis is\nalternatively called *single-trial decoding*, and is often performed as an\nalternative to massively (whole-brain) univariate analysis.\n\n.. image:: img/MvpWithin.png\n   :align: center\n\nUltimately, this type of analysis aims to predict some kind of attribute of the\ntrials (for example condition/class membership in classification analyses or some\ncontinuous feature in regression analyses). Ultimately, group-analyses may\nbe done on subject-specific analysis metrics (such as classification accuracy\nor R2-score) and group-level feature-importance maps may be calculated to\ndraw conclusions about the model's predictive power and the spatial\ndistribution of informative features, respectively.\n\nMvpBetween\n~~~~~~~~~~\nWith the apparent increase in large-sample neuroimaging datasets, another\ntype of analysis starts to become feasible, which we'll call *between subject*\nanalyses. In this type of analysis, single subjects constitute the data's\nsamples and a corresponding single multivoxel pattern constitutes the data's\nfeatures. The type of multivoxel pattern, or 'feature-set', can be any set\nof voxel values. For example, features from a single first-level contrast\n(note: this should be a condition average contrast, as opposed to single-trial\ncontrasts in MvpWithin!) can be used. But voxel patterns from VBM, TBSS (DTI),\nand dual-regression maps can equally well be used. Crucially, this package\nallows for the possibility to stack feature-sets such that models can be fit\non features from multiple data-types simultaneously.\n\n.. image:: img/MvpBetween.png\n\nMvpResults: model evaluation and feature visualization\n------------------------------------------------------\nGiven that an appropriate ``Mvp``-object exists, it is really easy to\nimplement a machine learning analysis using standard *scikit-learn*\nmodules. However, as fMRI datasets are often relatively small, K-fold\ncross-validation is often performed to keep the training-set as large as\npossible. Additionally, it might be informative to visualize which features\nare used and are most important in your model. (But, note that feature mapping\nshould not be the main objective of decoding analyses!) Doing this - model\nevaluation and feature visualization across multiple folds - complicates the\nprocess of implementing machine learning pipelines on fMRI data.\n\nThe ``MvpResults`` object offers a solution to the above complications. Simply\npass your scikit-learn pipeline to MvpResults after every fold and it\nautomatically calculates a set of model evaluation metrics (accuracy,\nprecision, recall, etc.) and keeps track of which features are used and how\n'important' these features are (in terms of the value of their weights).\n\nTransformers: fMRI feature selection and extraction\n---------------------------------------------------\nThe ``transformers`` module in skbold contains a set of scikit-learn type\ntransformers that can perform various types of feature selection and\nextraction specific to multivoxel fMRI-data. For example, the RoiIndexer-\ntransformer takes a (partially masked) whole-brain pattern and indexes it with\na specific region-of-interest defined in a nifti-file. The transformer API\nconforms to scikit-learn transformers, and as such, (almost all of them) can be\nused in scikit-learn pipelines.\n\nTo get a better idea of the package's functionality - including the use of\nMvp-objects, transformers, and MvpResults - a typical analysis workflow using\n``skbold`` is described below.\n\nAn example workflow: MvpWithin\n------------------------------\nSuppose you have data from an fMRI-experiment for a set of subjects who were\npresented with images which were either emotional or neutral in terms of their\ncontent. You've modelled them using a single-trial GLM (i.e. each trial is\nmodelled as a separate event/regressor) and calculated their corresponding\ncontrasts against baseline. The resulting FEAT-directory then contains\na directory ('stats') with contrast-estimates (COPEs) for each trial. Now,\nusing MvpWithin, it is easy to extract a sample by features matrix and some\nmeta-data associated with it, as shown below.\n\n.. code:: python\n\n   from skbold.data2mvp import MvpWithin\n\n   feat_dir = '~/project/sub001.feat'\n   mask_file = '~/GrayMatterMask.nii.gz' # mask all non-gray matter!\n   read_labels = True # parse labels (targets) from design.con file!\n   remove_contrast = ['nuisance_regressor_x'] # do not load nuisance regressor!\n   ref_space = 'epi' # extract patterns in functional space (alternatively: 'mni')\n   beta2tstat = True # convert beta-estimates of COPEs to tstats\n   remove_zeros = True # remove voxels which are zero in each trial\n\n   mvp = MvpWithin(source=feat_dir, read_labels=read_labels,\n                   remove_contrast=remove_contrast, ref_space=ref_space,\n                   beta2tstat=beta2tstat, remove_zeros=remove_zeros,\n                   mask=mask_file)\n\n   mvp.create() # extracts and stores (meta)data from FEAT-directory!\n   mvp.write(path='~/', name='mvp_sub001') # saves to disk!\n\nNow, we have an Mvp-object on which machine learning pipeline can be applied:\n\n.. code:: python\n\n   import joblib\n   from sklearn.preprocessing import StandardScaler\n   from sklearn.svm import SVC\n   from sklearn.pipeline import Pipeline\n   from sklearn.cross_validation import StratifiedKFold\n   from sklearn.feature_selection import f_classif, SelectKBest\n   from skbold.transformers import RoiIndexer\n   from skbold.utils import MvpResultsClassification\n\n   mvp = joblib.load('~/mvp_sub001.jl')\n\n   pipe = Pipeline([\n       ('scaler', StandardScaler()),\n       ('roiindex', RoiIndexer(mvp=mvp, mask='~/amygdala_mask.nii.gz')),\n       ('anova', SelectKBest(f_classif, k=100)),\n       ('svm', SVC(kernel='linear'))\n   ])\n\n   cv = StratifiedKFold(y=mvp.y, n_folds=5)\n\n   # Initialization of MvpResults; 'coef' indicates keeping track of weights!\n   mvp_results = MvpResultsClassification(mvp=mvp, n_iter=len(cv),\n                                          out_path='~/', feature_scoring='coef')\n\n   for train_idx, test_idx in cv:\n\n       train, test = mvp.X[train_idx, :], mvp.X[test_idx, :]\n       train_y, test_y = mvp.y[train_idx], mvp.y[train_idx]\n\n       pipe.fit(train, train_y)\n       pred = pipe.predict(test)\n\n       mvp_results.update(test_idx, pred, pipe) # update after each fold!\n\n   mvp_results.compute_scores() # compute!\n   mvp_results.write() # write file with metrics and niftis with feature-scores!\n\nAn example workflow: MvpBetween\n-------------------------------\nSuppose you have MRI data from a large set of subjects (let's say >50),\nincluding (task-based) functional MRI, structural MRI (T1-weighted images,\nDTI), and behavioral data (e.g. questionnaires, behavioral tasks). Such a\ndataset would qualify for a *between subject* decoding analysis using the\nMvpBetween object. To use the MvpBetween functionality effectively, it is\nimportant that the data is organized sensibly. An example is given below.\n\n.. image:: img/MvpBetween_dirstructure.png\n\nIn this example, each subject has three different data-sources: two FEAT-\ndirectories (with functional contrasts) and one VBM-file. Let's say that we'd\nlike to use all of these sources of information together to predict some\nbehavioral variable, neuroticism for example (as measured with e.g. the\nNEO-FFI_). The most important argument passed to MvpBetween is ``source``.\nThis variable, a dictionary, should contain the data-types you want to extract\nand their corresponding paths (with wildcards at the place of subject-specific\nparts):\n\n.. code:: python\n\n   import os\n   from skbold import roidata_path\n   gm_mask = os.path.join(roidata_path, 'GrayMatter.nii.gz')\n\n   source = {}\n   source['Contrast_t1cope1'] = {'path': '~/Project_dir/sub*/Task1.feat/cope1.nii.gz'}\n   source['Contrast_t2cope2'] = {'path': '~/Project_dir/sub*/Task2.feat/cope2.nii.gz'}\n   source['VBM'] = {'path': '~/Project_dir/sub*/vbm.nii.gz', 'mask': gm_mask}\n\nNow, to initialize the MvpBetween object, we need some more info:\n\n.. code:: python\n\n   from skbold.data2mvp import MvpBetween\n\n   subject_idf='sub-0??' # this is needed to extract the subject names to\n                         # cross-reference across data-sources\n   subject_list=None     # can be a list of subject-names to include\n\n   mvp = MvpBetween(source=source, subject_idf=subject_idf, mask=None,\n                    subject_list=None)\n\n   # like with MvpWithin, you can simply call create() to start the extraction!\n   mvp.create()\n\n   # and write to disk using write()\n   mvp.write(path='~/', name='mvp_between') # saves to disk!\n\nThis is basically all you need to create a MvpBetween object! It is very\nsimilar to MvpWithin in terms of attributes (including ``X``, ``y``, and\nvarious meta-data attributes). In fact, MvpResults works exactly in the same\nway for MvpWithin and MvpBetween! The major difference is that MvpResults\nkeeps track of the feature-information for each feature-set separately and\nwrites out a summarizing nifti file for each feature-set. Transformers also\nwork the same for MvpBetween objects/data, with the exception of the\ncluster-threshold transformer.\n\nInstalling skbold\n-----------------\n\nAlthough the package is very much in development, it can be installed using *pip*::\n\n\t$ pip install skbold\n\nHowever, the pip-version is likely behind compared to the code on Github, so to get the\nmost up to date version, use git::\n\n\t$ pip install git+https://github.com/lukassnoek/skbold.git@master\n\nOr, alternatively, download the package as a zip-file from Github, unzip, and run::\n\n\t$ python setup.py install\n\nDocumentation\n-------------\nFor those reading this on Github, documentation can be found on readthedocs.org_!\n\nCredits\n-------\nWhen I started writingthis package, I knew next to nothing about Python\nprogramming in general and packaging in specific. The mlxtend_ package has been\na great 'template' and helped a great deal in structuring the current package.\nAlso, Steven_ has contributed some very nice features as part of his internship.\nLastly, Joost_ has beena major help in virtually every single phase of this\npackage!\n\nLicense and contact\n-------------------\nThe code is BSD (3-clause) licensed. You can find my contact details at my\nGithub_ profile page.\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://skbold.readthedocs.io/en/latest/",
    "keywords": "fMRI MVPA decoding machine learning",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "skbold",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/skbold/",
    "release_url": "https://pypi.org/project/skbold/0.3.0/",
    "requires_python": "",
    "summary": "Utilities and tools for machine learning and other multivoxel pattern analyses of fMRI data.",
    "version": "0.3.0"
  },
  "releases": {
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "81d849450fde1f4f5c8ff2fa1e07ae51",
          "sha256": "1e89cdce57ed03a60f5d92e3a437a51e08bd69d470249509ef697c7abab2ac45"
        },
        "downloads": 103,
        "filename": "skbold-0.1.7-py2.7.egg",
        "has_sig": false,
        "md5_digest": "81d849450fde1f4f5c8ff2fa1e07ae51",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 67656,
        "upload_time": "2016-03-02T09:38:25",
        "url": "https://files.pythonhosted.org/packages/bc/46/ec7868673f2a8a1ea62ec5343aa9492431134c254684ef0fd73a06575ff1/skbold-0.1.7-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "17ebd98c1b23da2092d56b8c23b2f98a",
          "sha256": "beb1edf2dc071e86b236dc4e72c7b950ef0ca718231278a757ee15f6adff5358"
        },
        "downloads": 104,
        "filename": "skbold-0.1.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17ebd98c1b23da2092d56b8c23b2f98a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 32051,
        "upload_time": "2016-03-02T09:38:20",
        "url": "https://files.pythonhosted.org/packages/68/b3/299a6f2be0f5cc620e9f63c50638132c31c25b9d64cb3c6872fccee11868/skbold-0.1.7-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6200ad5a7a54ed232bdd4ddd67b1080d",
          "sha256": "43e4d79c3478e2b04f60293886d7c76cc95ac77e74da2ef21e9455d4b07f7f9c"
        },
        "downloads": 122,
        "filename": "skbold-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "6200ad5a7a54ed232bdd4ddd67b1080d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25914,
        "upload_time": "2016-03-02T09:38:31",
        "url": "https://files.pythonhosted.org/packages/43/ee/12e4114e2cb80a0723265a92c394984339ab907bf5f09bb20ac71963b5cd/skbold-0.1.7.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "528c219863c45f36b497a9c6c7f99c5c",
          "sha256": "ef9dee1a88d92930a4721ace67cebdc72c4adcf6f8979e81177787827cdd5181"
        },
        "downloads": 118,
        "filename": "skbold-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "528c219863c45f36b497a9c6c7f99c5c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 2382766,
        "upload_time": "2016-03-22T09:41:43",
        "url": "https://files.pythonhosted.org/packages/24/c6/ba621ba99ef82ec94e4a1c26998714a3c0710ed9e3319073513d43a0ca28/skbold-0.2.0-py2.py3-none-any.whl"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c77c030ebb7bd98aabdb011ea62265ff",
          "sha256": "4044de50125a1675c462a2c4002d63eec1bde97fb06078e4eb4bb5d833be3bcb"
        },
        "downloads": 100,
        "filename": "skbold-0.2.1-py2.7.egg",
        "has_sig": false,
        "md5_digest": "c77c030ebb7bd98aabdb011ea62265ff",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 2426872,
        "upload_time": "2016-03-22T09:50:29",
        "url": "https://files.pythonhosted.org/packages/a6/22/d2e5296c727f406ca99a73129be99f61e114e6f9f7ec3c1ee9d1094a607f/skbold-0.2.1-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d53a829091d715e9be4c2cbde26d2642",
          "sha256": "717e3b1dbf54297c1cd91c6b30a9c4d44fdd204e58a2e002e6be03bc445b0e8b"
        },
        "downloads": 118,
        "filename": "skbold-0.2.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "d53a829091d715e9be4c2cbde26d2642",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 13178664,
        "upload_time": "2016-04-08T12:50:41",
        "url": "https://files.pythonhosted.org/packages/ae/01/e12137f21ef0ef04786e8c729139a90d6ca44c7960afebc51f92b698c30e/skbold-0.2.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4eae2cf29db6735d4c2751903ec87abe",
          "sha256": "a118a0b8f535f2bc2a0ec92176e8dd0ebce9883b7c72272e0a445f9c63ee6b21"
        },
        "downloads": 104,
        "filename": "skbold-0.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4eae2cf29db6735d4c2751903ec87abe",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 2382752,
        "upload_time": "2016-03-22T09:50:14",
        "url": "https://files.pythonhosted.org/packages/25/66/7df33a171f1870c7544be89add4363f7d6bb745027c9cc1362e7768e1a81/skbold-0.2.1-py2.py3-none-any.whl"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a8d39d79f6fbf40a15f71ff01bf04d1a",
          "sha256": "21293f9c57375c06fcfec496655a9a6350e315c34efdca397892e960e0684376"
        },
        "downloads": 102,
        "filename": "skbold-0.2.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8d39d79f6fbf40a15f71ff01bf04d1a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 13178663,
        "upload_time": "2016-04-08T12:52:35",
        "url": "https://files.pythonhosted.org/packages/c3/a1/2c3e834d1d61c1504eae26dda3bbd3a06e01b94f7a8eb70880f3367e9595/skbold-0.2.2-py2.py3-none-any.whl"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "db3c1d4db8ea6e0b8c5849e8f405e1d6",
          "sha256": "698d4a21ac50d22d880cd5eb2bb21fd8d25ff21e9bd766fe03b1bb100b4ade78"
        },
        "downloads": 122,
        "filename": "skbold-0.2.3-py2.7.egg",
        "has_sig": false,
        "md5_digest": "db3c1d4db8ea6e0b8c5849e8f405e1d6",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 13233534,
        "upload_time": "2016-04-12T14:39:12",
        "url": "https://files.pythonhosted.org/packages/2d/f5/68724310df65962763f029d15c4a6e952b1dafccf41523902e5836a5cc3c/skbold-0.2.3-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c701d74f74be368d404009ceca31524f",
          "sha256": "0cacd9bd541776ea1e2ba4801e70cb5454945e5720aaa028016e28ca33ef3046"
        },
        "downloads": 112,
        "filename": "skbold-0.2.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c701d74f74be368d404009ceca31524f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 13180931,
        "upload_time": "2016-04-12T14:39:00",
        "url": "https://files.pythonhosted.org/packages/fc/d2/bfb3ad0b813ec763fd44aa66adc88c47fbdb6de534c74307b5a48939b9c4/skbold-0.2.3-py2.py3-none-any.whl"
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "92cdf41fdb6760f668e56832a40ada8d",
          "sha256": "0dc883abafc9554bcd00d729fa5232580fbddf3dd68cc8c95cb80919ef575627"
        },
        "downloads": 212,
        "filename": "skbold-0.2.4-py2.7.egg",
        "has_sig": false,
        "md5_digest": "92cdf41fdb6760f668e56832a40ada8d",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 21103812,
        "upload_time": "2016-04-28T12:08:33",
        "url": "https://files.pythonhosted.org/packages/3f/5f/66e5e46154dea7019607a057a4a17b5b14a46b0e6124ad506941609f716a/skbold-0.2.4-py2.7.egg"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "153f1dab173a9a6b07e74726f0c9a910",
          "sha256": "d6166394933417aa850c81ad95c1658b7fb80c750baed7ef104a7edf9085605d"
        },
        "downloads": 346,
        "filename": "skbold-0.3.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "153f1dab173a9a6b07e74726f0c9a910",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 13879870,
        "upload_time": "2016-08-19T09:19:34",
        "url": "https://files.pythonhosted.org/packages/17/3e/6def4a932c785fbb21ca6c01239e594cc217e747bccd7aa1a54590e7ed27/skbold-0.3.0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1964628a9e0ba3cbf330cec94f2f619f",
          "sha256": "6ec987cca4296a0f2230abee8fcae4dd1cb834d4e0878e7260566f991946519a"
        },
        "downloads": 120,
        "filename": "skbold-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1964628a9e0ba3cbf330cec94f2f619f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13780296,
        "upload_time": "2016-08-19T09:19:42",
        "url": "https://files.pythonhosted.org/packages/84/be/58c3fc6e9f8fb8c53e2ab759c34d83f952b401eec61e34bd808ad8112f04/skbold-0.3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "153f1dab173a9a6b07e74726f0c9a910",
        "sha256": "d6166394933417aa850c81ad95c1658b7fb80c750baed7ef104a7edf9085605d"
      },
      "downloads": 346,
      "filename": "skbold-0.3.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "153f1dab173a9a6b07e74726f0c9a910",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 13879870,
      "upload_time": "2016-08-19T09:19:34",
      "url": "https://files.pythonhosted.org/packages/17/3e/6def4a932c785fbb21ca6c01239e594cc217e747bccd7aa1a54590e7ed27/skbold-0.3.0-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "1964628a9e0ba3cbf330cec94f2f619f",
        "sha256": "6ec987cca4296a0f2230abee8fcae4dd1cb834d4e0878e7260566f991946519a"
      },
      "downloads": 120,
      "filename": "skbold-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1964628a9e0ba3cbf330cec94f2f619f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 13780296,
      "upload_time": "2016-08-19T09:19:42",
      "url": "https://files.pythonhosted.org/packages/84/be/58c3fc6e9f8fb8c53e2ab759c34d83f952b401eec61e34bd808ad8112f04/skbold-0.3.0.tar.gz"
    }
  ]
}