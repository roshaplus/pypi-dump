{
  "info": {
    "author": "Ewald R. de Wit",
    "author_email": "ewald.de.wit@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Office/Business :: Financial :: Investment"
    ],
    "description": "|Build| |PyVersion| |Status| |PyPiVersion| |License|\n\nIntroduction\n============\n\nThe distex package provides a distributed process pool for Python that uses\n`asyncio <https://docs.python.org/3.6/library/asyncio.html>`_\nto efficiently manage the local and remote worker processes.\n\nFeatures:\n\n* Scales to 1000's of processors;\n* Can handle in the order of 50.000 small tasks per second;\n* Easy to use with ssh (secure shell);\n* Full asynchronous support;\n* Maps over unbounded iterables;\n* Choice of ``pickle``, ``dill`` or ``cloudpickle`` serialization for\n  functions and data;\n* Backward compatible with ``concurrent.futures.ProcessPool`` (PEP3148_).\n\n\nInstallation\n------------\n\n::\n\n    pip3 install -U distex\n\nDependencies:\n\n* Python_ version 3.6 or higher;\n* On Unix the ``uvloop`` package is recommended: ``pip3 install uvloop``\n* SSH client and server (optional). \n\nExamples\n--------\n\nA process pool can have local and remote workers in any combination.\nHere is a pool that uses 4 local workers:\n\n.. code-block:: python\n\n    from distex import Pool\n\n    def f(x):\n        return x*x\n\n    pool = Pool(4)\n    for y in pool.map(f, range(100)):\n        print(y)\n\nTo create a pool that also uses 8 workers on host ``maxi``, using ssh:\n\n.. code-block:: python\n\n    pool = Pool(4, ['ssh://maxi/8'])\n\nThere is full support for every asynchronous construct imaginable:\n\n.. code-block:: python\n\n    import asyncio\n    from distex import Pool\n\n    def init():\n        # pool initializer: set the start time for every worker\n        import time\n        __builtins__.t0 = time.time()\n\n    async def timer(i=0):\n        # async code running in the pool\n        import time\n        await asyncio.sleep(1)\n        return time.time() - t0\n\n    async def ait():\n        # async iterator running on the user side\n        for i in range(20):\n            await asyncio.sleep(0.1)\n            yield i\n\n    async def main():\n        async with Pool(4, initializer=init, qsize=1) as pool:\n            async for t in pool.map_async(timer, ait()):\n                print(t)\n            print(await pool.run_on_all_async(timer))\n\n\n    loop = asyncio.get_event_loop()\n    loop.run_until_complete(main())\n\nHigh level architecture\n-----------------------\n\nDistex does not use remote 'task servers'.\nInstead it is done the other way around: A local\nserver is started first; Then the local and remote workers are started\nand each of them will connect on its own back to the server. When all\nworkers have connected then the pool is ready for duty.\n\nEach worker consists of a single-threaded process that is running\nan asyncio event loop. This loop is used both for communication and for\nrunning asynchronous tasks. Synchronous tasks are run in a blocking fashion.\n\nWhen using ssh, a remote (or 'reverse') tunnel is created from a remote Unix socket\nto the local Unix socket that the local server is listening on.\nMultiple workers on a remote machine will use the same Unix socket and\nshare the same ssh tunnel.\n\nDocumentation\n-------------\n\n`Distex documentation <http://rawgit.com/erdewit/distex/master/docs/html/api.html>`_\n\n\nChangelog\n---------\n\nVersion 0.5.1\n^^^^^^^^^^^^^\n\n* Fixes for Windows\n\nVersion 0.5.0\n^^^^^^^^^^^^^\n\n* Initial release\n\n\n:author: Ewald de Wit <ewald.de.wit@gmail.com>\n\n.. _Python: http://www.python.org\n\n.. _ssh-keygen: https://linux.die.net/man/1/ssh-keygen\n\n.. _ssh-copy-id: https://linux.die.net/man/1/ssh-copy-id\n\n.. _PEP3148: https://www.python.org/dev/peps/pep-3148\n\n.. |PyPiVersion| image:: https://img.shields.io/pypi/v/distex.svg\n   :alt: PyPi\n   :target: https://pypi.python.org/pypi/distex\n\n.. |Build| image:: https://travis-ci.org/erdewit/distex.svg?branch=master\n   :alt: Build\n   :target: https://travis-ci.org/erdewit/distex\n\n.. |PyVersion| image:: https://img.shields.io/badge/python-3.6+-blue.svg\n   :alt:\n\n.. |Status| image:: https://img.shields.io/badge/status-beta-green.svg\n   :alt:\n\n.. |License| image:: https://img.shields.io/badge/license-BSD-blue.svg\n   :alt:\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/erdewit/distex",
    "keywords": "python parallel distributed computing pool asyncio",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "distex",
    "platform": "",
    "project_url": "https://pypi.org/project/distex/",
    "release_url": "https://pypi.org/project/distex/0.5.1/",
    "requires_dist": [
      "dill",
      "cloudpickle"
    ],
    "requires_python": "",
    "summary": "Async distributed process pool using asyncio",
    "version": "0.5.1"
  },
  "releases": {
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "29bee88baaa23e986bca851177a66473",
          "sha256": "2bc7fe3036335e60760fae5dbd39a417ae7aca312a1f0ff448e4f453b8fc8d60"
        },
        "downloads": -1,
        "filename": "distex-0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "29bee88baaa23e986bca851177a66473",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 18078,
        "upload_time": "2017-11-27T10:50:36",
        "url": "https://files.pythonhosted.org/packages/5a/0a/06d2a138db70e0aae2f7b4757edfa6c28b1a008719c719feeeb7233657f6/distex-0.5-py3-none-any.whl"
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9019eaf5f52a5386685270778e060833",
          "sha256": "5223efa397c1fd73609a94e8aa7045111a9f9f3f41060aca4c2632db022e3f3e"
        },
        "downloads": -1,
        "filename": "distex-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9019eaf5f52a5386685270778e060833",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 18312,
        "upload_time": "2017-11-29T11:09:38",
        "url": "https://files.pythonhosted.org/packages/83/f8/2eb5e4874b5c75252269e40ebd4034db4f7ec988f04b4ec29f4b91052e2c/distex-0.5.1-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9019eaf5f52a5386685270778e060833",
        "sha256": "5223efa397c1fd73609a94e8aa7045111a9f9f3f41060aca4c2632db022e3f3e"
      },
      "downloads": -1,
      "filename": "distex-0.5.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9019eaf5f52a5386685270778e060833",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 18312,
      "upload_time": "2017-11-29T11:09:38",
      "url": "https://files.pythonhosted.org/packages/83/f8/2eb5e4874b5c75252269e40ebd4034db4f7ec988f04b4ec29f4b91052e2c/distex-0.5.1-py3-none-any.whl"
    }
  ]
}