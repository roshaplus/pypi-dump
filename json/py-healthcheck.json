{
  "info": {
    "author": "Luis Fernando Gomes",
    "author_email": "luiscoms@ateliedocodigo.com.br",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Flask",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "Healthcheck\n-----------\n\n.. image:: py-healthcheck.jpg\n    :target: https://pypi.python.org/pypi/py-healthcheck\n\n.. image:: https://badge.fury.io/py/py-healthcheck.svg\n    :target: https://badge.fury.io/py/py-healthcheck\n\n.. image:: https://travis-ci.org/ateliedocodigo/py-healthcheck.svg?branch=develop\n    :target: https://travis-ci.org/ateliedocodigo/py-healthcheck\n\nHealthcheck is a library to write simple healthcheck functions that can\nbe used to monitor your application. It is possible to use in a ``Flask``\napp or ``Tornado`` app. It's useful for asserting that your dependencies\nare up and running and your application can respond to HTTP requests.\nThe Healthcheck functions can be exposed via a user defined ``Flask``\nroute so you can use an external monitoring application (``monit``,\n``nagios``, ``Runscope``, etc.) to check the status and uptime of your\napplication.\n\nNew in version 1.1: Healthcheck also gives you a simple Flask route to\nview information about your application's environment. By default, this\nincludes data about the operating system, the Python environment, the\ncurrent process, and the application config. You can customize which\nsections are included, or add your own sections to the output.\n\nInstalling\n----------\n\n::\n\n    pip install py-healthcheck\n\nUsage\n-----\n\nHere's an example of basic usage with ``Flask``:\n\n.. code:: python\n\n    from flask import Flask\n    from healthcheck import HealthCheck, EnvironmentDump\n\n    app = Flask(__name__)\n\n    health = HealthCheck()\n    envdump = EnvironmentDump()\n\n    # add your own check function to the healthcheck\n    def redis_available():\n        client = _redis_client()\n        info = client.info()\n        return True, \"redis ok\"\n\n    health.add_check(redis_available)\n\n    # add your own data to the environment dump\n    def application_data():\n        return {\"maintainer\": \"Luis Fernando Gomes\",\n                \"git_repo\": \"https://github.com/ateliedocodigo/py-healthcheck\"}\n\n    envdump.add_section(\"application\", application_data)\n\n    # Add a flask route to expose information\n    app.add_url_rule(\"/healthcheck\", view_func=lambda: health.run())\n    app.add_url_rule(\"/environment\", view_func=lambda: envdump.run())\n\nTo use with ``Tornado`` you can import the ``TornadoHandler``:\n\n.. code:: python\n\n    import tornado.web\n    from healthcheck import TornadoHandler, HealthCheck, EnvironmentDump\n\n    app = tornado.web.Application()\n\n    health = HealthCheck()\n    envdump = EnvironmentDump()\n\n    # add your own check function to the healthcheck\n    def redis_available():\n        client = _redis_client()\n        info = client.info()\n        return True, \"redis ok\"\n\n    health.add_check(redis_available)\n\n    # add your own data to the environment dump or healthcheck\n    def application_data():\n        return {\"maintainer\": \"Luis Fernando Gomes\",\n                \"git_repo\": \"https://github.com/ateliedocodigo/py-healthcheck\"}\n\n    # ou choose where you want to output this information\n    health.add_section(\"application\", application_data)\n    envdump.add_section(\"application\", application_data)\n\n    # Add a tornado handler to expose information\n    app.add_handlers(\n        r\".*\",\n        [\n            (\n                \"/healthcheck\",\n                TornadoHandler, dict(checker=health)\n            ),\n            (\n                \"/environment\",\n                TornadoHandler, dict(checker=envdump)\n            ),\n        ]\n    )\n\nAlternatively you can set all together:\n\n.. code:: python\n\n    import tornado.web\n    from healthcheck import TornadoHandler, HealthCheck, EnvironmentDump\n\n    # add your own check function to the healthcheck\n    def redis_available():\n        client = _redis_client()\n        info = client.info()\n        return True, \"redis ok\"\n\n    health = HealthCheck(checkers=[redis_available])\n\n    # add your own data to the environment dump\n    def application_data():\n        return {\"maintainer\": \"Luis Fernando Gomes\",\n                \"git_repo\": \"https://github.com/ateliedocodigo/py-healthcheck\"}\n\n    envdump = EnvironmentDump(application=application_data)\n\n    app = tornado.web.Application([\n        (\"/healthcheck\", TornadoHandler, dict(checker=health)),\n        (\"/environment\", TornadoHandler, dict(checker=envdump)),\n    ])\n\nTo run all of your check functions, make a request to the healthcheck\nURL you specified, like this:\n\n::\n\n    curl \"http://localhost:5000/healthcheck\"\n\nAnd to view the environment data, make a check to the URL you specified\nfor EnvironmentDump:\n\n::\n\n    curl \"http://localhost:5000/environment\"\n\nThe HealthCheck class\n---------------------\n\nCheck Functions\n~~~~~~~~~~~~~~~\n\nCheck functions take no arguments and should return a tuple of (bool,\nstr). The boolean is whether or not the check passed. The message is any\nstring or output that should be rendered for this check. Useful for\nerror messages/debugging.\n\n.. code:: python\n\n    # add check functions\n    def addition_works():\n        if 1 + 1 == 2:\n            return True, \"addition works\"\n        else:\n            return False, \"the universe is broken\"\n\nAny exceptions that get thrown by your code will be caught and handled\nas errors in the healthcheck:\n\n.. code:: python\n\n    # add check functions\n    def throws_exception():\n        bad_var = None\n        bad_var['explode']\n\nWill output:\n\n.. code:: json\n\n    {\n        \"status\": \"failure\",\n        \"results\": [\n            {\n                \"output\": \"'NoneType' object has no attribute '__getitem__'\",\n                \"checker\": \"throws_exception\",\n                \"passed\": false\n            }\n        ]\n    }\n\nNote, all checkers will get run and all failures will be reported. It's\nintended that they are all separate checks and if any one fails the\nhealthcheck overall is failed.\n\nCaching\n~~~~~~~\n\nIn Runscope's infrastructure, the /healthcheck endpoint is hit\nsurprisingly often. haproxy runs on every server, and each haproxy hits\nevery healthcheck twice a minute. (So if we have 30 servers in our\ninfrastructure, that's 60 healthchecks per minute to every Flask\nservice.) Plus, monit hits every healthcheck 6 times a minute.\n\nTo avoid putting too much strain on backend services, health check\nresults can be cached in process memory. By default, health checks that\nsucceed are cached for 27 seconds, and failures are cached for 9\nseconds. These can be overridden with the ``success_ttl`` and\n``failed_ttl`` parameters. If you don't want to use the cache at all,\ninitialize the Healthcheck object with\n``success_ttl=None, failed_ttl=None``.\n\nCustomizing\n~~~~~~~~~~~\n\nYou can customize the status codes, headers, and output format for\nsuccess and failure responses.\n\nThe EnvironmentDump class\n-------------------------\n\nBuilt-in data sections\n~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, EnvironmentDump data includes these 4 sections:\n\n-  ``os``: information about your operating system.\n-  ``python``: information about your Python executable, Python path,\n   and installed packages.\n-  ``process``: information about the currently running Python process,\n   including the PID, command line arguments, and all environment\n   variables.\n\nSome of the data is scrubbed to avoid accidentally exposing passwords or\naccess keys/tokens. Config keys and environment variable names are\nscanned for ``key``, ``token``, or ``pass``. If those strings are\npresent in the name of the variable, the value is not included.\n\nDisabling built-in data sections\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor security reasons, you may want to disable an entire section. You can\ndisable sections when you instantiate the ``EnvironmentDump`` object,\nlike this:\n\n.. code:: python\n\n    envdump = EnvironmentDump(include_python=False, \n                              include_os=False,\n                              include_process=False)\n\nAdding custom data sections\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can add a new section to the output by registering a function of\nyour own. Here's an example of how this would be used:\n\n.. code:: python\n\n    def application_data():\n        return {\"maintainer\": \"Luis Fernando Gomes\",\n                \"git_repo\": \"https://github.com/ateliedocodigo/py-healthcheck\"\n                \"config\": app.config}\n\n    envdump = EnvironmentDump()\n    envdump.add_section(\"application\", application_data)\n\n\nCredits\n-------\n\nThis project was forked from `Runscope/healthcheck \n<https://github.com/Runscope/healthcheck>`_. since ``1.3.1``\n\n",
    "docs_url": null,
    "download_url": "https://github.com/ateliedocodigo/py-healthcheck/tarball/1.6.1",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ateliedocodigo/py-healthcheck",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "py-healthcheck",
    "platform": "any",
    "project_url": "https://pypi.org/project/py-healthcheck/",
    "release_url": "https://pypi.org/project/py-healthcheck/1.6.1/",
    "requires_python": "",
    "summary": "Adds healthcheck endpoints to Flask or Tornado apps",
    "version": "1.6.1"
  },
  "releases": {
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f369e58f67d1bfaf7f9e914b98847167",
          "sha256": "c6503cbac7305590fa50419e3c98c33894b38e6dc544a471f99468dcf0138359"
        },
        "downloads": 9,
        "filename": "py-healthcheck-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f369e58f67d1bfaf7f9e914b98847167",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6473,
        "upload_time": "2017-01-24T19:16:50",
        "url": "https://files.pythonhosted.org/packages/1f/de/3eb4bc93e76ca4b787e3d8147e7aeafabb335e94496615a8d289531e3692/py-healthcheck-1.4.0.tar.gz"
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8221bcf9cac5481a2066f675551d0cb4",
          "sha256": "77d2591072290726a20150be4754761ad316cbdfafd35d4ae36739a4143ee1c7"
        },
        "downloads": 14,
        "filename": "py-healthcheck-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8221bcf9cac5481a2066f675551d0cb4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6784,
        "upload_time": "2017-02-17T16:07:40",
        "url": "https://files.pythonhosted.org/packages/45/4a/0a1f54d3fde9f9da85db730d538f04195a33720a3213a56caf4b06015eec/py-healthcheck-1.5.0.tar.gz"
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "90fef2c3eb0823190d3989517272208e",
          "sha256": "50c991d7b54eecf523822af48f31989b08808d8afb233dbb6405a9278cdeff3f"
        },
        "downloads": 16,
        "filename": "py-healthcheck-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "90fef2c3eb0823190d3989517272208e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7112,
        "upload_time": "2017-03-31T16:11:02",
        "url": "https://files.pythonhosted.org/packages/87/a7/d43c81b9c7888e3e7f27cce6dfe0467033adb6f116607230e8e4abade3a7/py-healthcheck-1.6.0.tar.gz"
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0f1bd0a77ba3bd3fd59efc4cb25d484b",
          "sha256": "4da8ede9a5f3cc3954b78931c1855b691271d472f92490955b15661d05041177"
        },
        "downloads": 34,
        "filename": "py-healthcheck-1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0f1bd0a77ba3bd3fd59efc4cb25d484b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7138,
        "upload_time": "2017-04-04T20:56:23",
        "url": "https://files.pythonhosted.org/packages/e1/aa/ae425328882ce2c6782b45c4c2c03bd5e509c3472db0cfaa4b366f1e72c5/py-healthcheck-1.6.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0f1bd0a77ba3bd3fd59efc4cb25d484b",
        "sha256": "4da8ede9a5f3cc3954b78931c1855b691271d472f92490955b15661d05041177"
      },
      "downloads": 34,
      "filename": "py-healthcheck-1.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "0f1bd0a77ba3bd3fd59efc4cb25d484b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7138,
      "upload_time": "2017-04-04T20:56:23",
      "url": "https://files.pythonhosted.org/packages/e1/aa/ae425328882ce2c6782b45c4c2c03bd5e509c3472db0cfaa4b366f1e72c5/py-healthcheck-1.6.1.tar.gz"
    }
  ]
}