{
  "info": {
    "author": "Pradeep Reddy Raamana",
    "author_email": "raamana@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "==========\nvisualqc\n==========\n\n\n.. image:: https://img.shields.io/pypi/v/visualqc.svg\n        :target: https://pypi.python.org/pypi/visualqc\n\n.. image:: https://img.shields.io/travis/raamana/visualqc.svg\n        :target: https://travis-ci.org/raamana/visualqc\n\n.. image:: https://readthedocs.org/projects/visualqc/badge/?version=latest\n        :target: https://visualqc.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n.. image:: https://pyup.io/repos/github/raamana/visualqc/shield.svg\n     :target: https://pyup.io/repos/github/raamana/visualqc/\n     :alt: Updates\n\nTool to automate the quality control of MRI segmentations (gray and white matter, cortical, subcortical and other arbitrary segmentations) produced by Freesurfer and other tools.\n\n.. image:: docs/vqc_logo_small.png\n\nAssessing and guranteeing the accuracy of any automatic segmentation (be it gray or white surfaces for cortical thickness, or a subortical segmentation) requires manual visual inspection. Not just one slice. Or one view. But many slices in all the views to ensure the 3d segmentation is accurate at the voxel-level. This process, in its most banal form, is quite cumbersome and time-consuming. Without any assistive tool, it requires opening both the MRI and segmentation for one subject in an editor that can overlay and color them properly, and manually reviewing one slice at a time, navigate through many many slices, and record your rating in a spreadsheet. And repeat this process for multiple subjects. In some even more demanding tasks (such as assessing the accuracy of cortical thickness e.g. generated by Freesurfer), you may need to review multiple types of visualizations, such as surface-redering with different labels colored appropriately, in addition to voxel-wise overlay on MRI. Without an automatic tool, this process allows too many human mistakes, over the span of 100s of subjects over many weeks jumping through multiple visualization software and spreadsheets. ``visualqc`` aims to reduce that to a single command to seamlessly record the ratings of accuracy and navigate through 100s of subjects with ease. All you need to do is sit back, focus your exper eye on the accuracy and ``visualqc`` takes care of the flow and bookkeeping.\n\nNeuroimagers familiar with `ENIGMA quality control (QC) protocols <http://enigma.ini.usc.edu/protocols/imaging-protocols/>`_ would especially find this tool much easier. In addition to integrating valuable experience and knowledge from those protocols, this tool makes it easy so you don't have to deal with multiple scripts (to generate images and combine visualizations), and no alternating between multiple spreadsheets to keep track of ratings. Additional advantages include zooming in and needing to use only a single tool to QC both cortical and subcortical segmentations.\n\n* Free software: MIT license\n* Documentation: https://visualqc.readthedocs.io.\n\n\nFeatures\n--------\n\n* Makes the review and rating workflow seamless and easy! It is simple as: visualize the auto-generated overlay, review, zoom-in wherever you need, rate the quality, and proceed to next!\n* Display multiple slices in multiple views, and easily navigate all subjects in a dataset\n* Allows you to zoom in to any view/slice to ensure you won't miss any detail\n* Allows you to control the transparency of overlay to your expert preference\n* Allows to focus on a single or a set of arbitrary segmentations (hippocampus, or PCG or DMN etc) if necessary\n* Automatically detect and flag outliers (coming soon)\n\nGallery (contour)\n-----------------\n\nSome examples of how the interface looks are shown below. The first screenshot showcases the use case wherein we can review the accuracy of Freesufer's cortical parcellation against the original MRI (note that only one view is shown and one panel is zoomed-in):\n\n.. image:: docs/vis/contour/visual_qc_cortical_contour__Pitt_0050034_v1_ns18_4x6.png\n\nIn the second screenshot, we show the use case for a single label (subcortical segmentation, tissue class or cortical ROI) - shown here are hippocampus and amygdala:\n\n.. image:: docs/vis/contour/visual_qc_labels_contour_53_Pitt_0050039_v012_ns18_9x6.png\n\nWe can also add nearby amygdala:\n\n.. image:: docs/vis/contour/visual_qc_labels_contour_53_54_Pitt_0050036_v02_ns21_6x7.png\n\nAnd you can add as many ROIs as you like:\n\n.. image:: docs/vis/contour/visual_qc_labels_contour_10_11_12_13_NYU_0051036.png\n\nROIs could be from anywhere in the MRI (including big cortical labels too!). For example, let's look at Insula (label 1035 in Freesurfer ColorLUT) in the left hemi-sphere :\n\n.. image:: docs/vis/contour/visual_qc_labels_contour_1035_Pitt_0050032_v02_ns21_6x7.png\n\nAnd, how about middle temporal?\n\n.. image:: docs/vis/contour/visual_qc_labels_contour_2015_Pitt_0050035_v02_ns21_6x7.png\n\nLet's just focus on axial view to get more detail:\n\n.. image:: docs/vis/contour/visual_qc_labels_contour_2015_Pitt_0050039_v2_ns27_3x9.png\n\n\n=======\nHistory\n=======\n\n0.1.0 (2017-10-05)\n------------------\n\n* First release on PyPI.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/raamana/visualqc",
    "keywords": "visualqc",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "visualqc",
    "platform": "",
    "project_url": "https://pypi.org/project/visualqc/",
    "release_url": "https://pypi.org/project/visualqc/0.1.1/",
    "requires_dist": [
      "numpy",
      "nibabel",
      "mrivis",
      "matplotlib"
    ],
    "requires_python": "",
    "summary": "Tool to automate the quality control of pial and white matter surfaces from Freesurfer Parcellation",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "028065599ff16ce225ff955091cb2efa",
          "sha256": "50669205a7b38d4b7a4392982e40b1b0fc329d8407ac48e6d0dbbd523db062a1"
        },
        "downloads": -1,
        "filename": "visualqc-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "028065599ff16ce225ff955091cb2efa",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 22007,
        "upload_time": "2018-02-09T02:32:50",
        "url": "https://files.pythonhosted.org/packages/ba/f5/249e4b3f01cf3ff1b5acd99d6d8811c82967b9af6f4dfe25bb8e5235f41b/visualqc-0.1.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f5c17a7edb08dc590c5df3ec5a91e96d",
          "sha256": "85ea8b35090f04f4ae892128b0d654db1a8e890a221fd12a44c89fb74ea4194a"
        },
        "downloads": -1,
        "filename": "visualqc-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f5c17a7edb08dc590c5df3ec5a91e96d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24710203,
        "upload_time": "2018-02-09T02:32:56",
        "url": "https://files.pythonhosted.org/packages/a8/0f/3d477b699fd03aab96b50538c45693604ffdd52fa2625ffcd09c5e348426/visualqc-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "028065599ff16ce225ff955091cb2efa",
        "sha256": "50669205a7b38d4b7a4392982e40b1b0fc329d8407ac48e6d0dbbd523db062a1"
      },
      "downloads": -1,
      "filename": "visualqc-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "028065599ff16ce225ff955091cb2efa",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 22007,
      "upload_time": "2018-02-09T02:32:50",
      "url": "https://files.pythonhosted.org/packages/ba/f5/249e4b3f01cf3ff1b5acd99d6d8811c82967b9af6f4dfe25bb8e5235f41b/visualqc-0.1.1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "f5c17a7edb08dc590c5df3ec5a91e96d",
        "sha256": "85ea8b35090f04f4ae892128b0d654db1a8e890a221fd12a44c89fb74ea4194a"
      },
      "downloads": -1,
      "filename": "visualqc-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f5c17a7edb08dc590c5df3ec5a91e96d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 24710203,
      "upload_time": "2018-02-09T02:32:56",
      "url": "https://files.pythonhosted.org/packages/a8/0f/3d477b699fd03aab96b50538c45693604ffdd52fa2625ffcd09c5e348426/visualqc-0.1.1.tar.gz"
    }
  ]
}