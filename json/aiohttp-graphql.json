{
  "info": {
    "author": "Devin Fee",
    "author_email": "devin@devinfee.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "aiohttp-graphql\n===============\n\nAdds [GraphQL] support to your [aiohttp] application.\n\nBased on [flask-graphql] by [Syrus Akbary].\n\nUsage\n-----\n\nJust use the `GraphQLView` view from `aiohttp_graphql`\n\n```python\nfrom aiohttp_graphql import GraphQLView\n\nGraphQLView.attach(app, schema=Schema, graphiql=True)\n\n# Optional, for adding batch query support (used in Apollo-Client)\nGraphQLView.attach(app, schema=Schema, batch=True)\n```\n\nThis will add a `/graphql` endpoint to your app (customizable by passing `route_path='/mypath'` to `GraphQLView.attach`)\n\n### Supported options\n-   `schema`: The `GraphQLSchema` object that you want the view to execute when it gets a valid request.\n-   `executor`: The `Executor` that you want to use to execute queries. If an `AsyncioExecutor` instance is provided, performs queries asynchronously within executor\u2019s loop.\n-   `root_value`: The `root_value` you want to provide to `executor.execute`.\n-   `context`: A value to pass as the `context` to the `graphql()` function. By default is set to `dict` with request object at key `request`.\n-   `pretty`: Whether or not you want the response to be pretty printed JSON.\n-   `graphiql`: If `True`, may present [GraphiQL] when loaded directly from a browser (a useful tool for debugging and exploration).\n-   `graphiql_version`: The version of the provided `graphiql` package.\n-   `graphiql_template`: Inject a Jinja template string to customize GraphiQL.\n-   `middleware`: Custom middleware for [graphql-python].\n-   `batch`: Set the GraphQL view as batch (for using in [Apollo-Client] or [ReactRelayNetworkLayer])\n-   `jinja_env`: Sets jinja environment to be used to process GraphiQL template. If Jinja\u2019s async mode is enabled (by `enable_async=True`), uses\n`Template.render_async` instead of `Template.render`. If environment is not set, fallbacks to simple regex-based renderer.\n-   `max_age`: sets the response header `Access-Control-Max-Age` for preflight requests\n-   `encoder`: the encoder to use for responses (sensibly defaults to `graphql_server.json_encode`)\n-   `error_formatter`: the error formatter to use for responses (sensibly defaults to `graphql_server.default_format_error`)\n-   `enable_async`: whether `async` mode will be enabled.\n\n\nLicense\n-------\n\nCopyright for portions of project [aiohttp-graphql] are held by [Syrus Akbary] as part of project [flask-graphql]. All other claims to this project [aiohttp-graphql] are held by [Devin Fee].\n\nThis project is licensed under MIT License.\n\n  [GraphQL]: http://graphql.org/\n  [aiohttp]: https://github.com/aio-libs/aiohttp/\n  [flask-graphql]: https://github.com/graphql-python/flask-graphql\n  [Syrus Akbary]: https://github.com/syrusakbary\n  [GraphiQL]: https://github.com/graphql/graphiql\n  [graphql-python]: https://github.com/graphql-python/graphql-core\n  [Apollo-Client]: http://dev.apollodata.com/core/network.html#query-batching\n  [Devin Fee]: https://github.com/dfee\n  [aiohttp-graphql]: https://github.com/dfee/aiohttp-graphql\n",
    "docs_url": null,
    "download_url": "https://github.com/dfee/aiohttp-graphql/releases",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/dfee/aiohttp-graphql",
    "keywords": "api graphql protocol aiohttp",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiohttp-graphql",
    "platform": "any",
    "project_url": "https://pypi.org/project/aiohttp-graphql/",
    "release_url": "https://pypi.org/project/aiohttp-graphql/1.0.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Adds GraphQL support to your aiohttp application",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6740b4dbee19686f2325a51bd795bed8",
          "sha256": "d565518fd94437ed1bbf54502acbbe4a6479b34a4ab2b3a236220d28bf6b4df3"
        },
        "downloads": 0,
        "filename": "aiohttp-graphql-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6740b4dbee19686f2325a51bd795bed8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6642,
        "upload_time": "2017-09-23T09:41:27",
        "url": "https://files.pythonhosted.org/packages/2a/56/d50043d131d5419e3e737044798f2ba907c09088340971f922f5d19d401e/aiohttp-graphql-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6740b4dbee19686f2325a51bd795bed8",
        "sha256": "d565518fd94437ed1bbf54502acbbe4a6479b34a4ab2b3a236220d28bf6b4df3"
      },
      "downloads": 0,
      "filename": "aiohttp-graphql-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "6740b4dbee19686f2325a51bd795bed8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6642,
      "upload_time": "2017-09-23T09:41:27",
      "url": "https://files.pythonhosted.org/packages/2a/56/d50043d131d5419e3e737044798f2ba907c09088340971f922f5d19d401e/aiohttp-graphql-1.0.0.tar.gz"
    }
  ]
}