{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "documentation and execute them as regression tests.\nHome-page: https://github.com/eldipa/byexample\nAuthor: Di Paola Martin\nAuthor-email: use-github-issues@example.com\nLicense: GNU GPLv3\nDescription-Content-Type: UNKNOWN\nDescription: ``byexample``\n        =============\n        \n        ``byexample`` is a literate programming engine where you mix\n        ordinary text and snippets of code in the same file and then you can\n        execute them as regression tests.\n        \n        It is intended primary for writing good and live tutorials and documentation\n        showing how a piece of software works or it can be used *by example*.\n        \n        Currently we support:\n        \n         - C++\n         - Python\n         - Ruby\n         - Shell (sh and bash)\n         - GDB (the GNU Debugger)\n        \n        The documentation of each one can be found in ``docs/languages/``.\n        \n        More languages will be supported in the future. Stay tuned.\n        \n        Contribute\n        ^^^^^^^^^^\n        \n        Go ahead, fork this project and start to hack it. Run ``make test`` to ensure that\n        everything is working as expected and then propose your Pull Request!\n        \n        There are some interesting areas where you can contribute like:\n        \n         - add support to new languages (Javascript, Julia, just listen to you heart)\n         - add more examples. How do you use ``byexample``? Give us your feedback!\n        \n        Usage\n        ^^^^^\n        \n        Install and run it against any source file(s), like this README.\n        All the snippets will be collected, executed and checked.\n        \n        .. code:: sh\n        \n            $ pip install --user byexample                # install it # byexample: +SKIP\n            $ byexample -l python,ruby,shell README.rst   # run it     # byexample: +SKIP\n            ................\n            File README.rst, 20/20 test ran in <...> seconds\n            [PASS] Pass: 17 Fail: 0 Skip: 3\n        \n        You can select which languages to run, over which files, how to display the\n        differences and much more.\n        \n        The ``doc/usage.rst`` document goes through almost all the flags that the\n        ``byexample`` program has.\n        \n        Snippets of code\n        ----------------\n        \n        Any snippet of code that it is detected by ``byexample`` will be executed\n        and its output compared with the text below.\n        \n        This is a quite useful way to test and document by example.\n        \n        Any code that is written inside of a fenced code block will be parsed and\n        executed depending of the language selected.\n        \n        Here is an example in Python\n        \n        .. code:: python\n        \n            ```python\n            1 + 2\n            \n            out:\n            3\n            ```\n        \n        The expression ``1 + 2`` is executed and the output compared with ``3`` to\n        see if the test passes or not.\n        \n        For some languages, we support the interpreter-session like syntax.\n        \n        For Python we use ``>>>`` and ``...`` as prompts to find this sessions\n        \n        .. code:: python\n        \n            >>> def add(a, b):\n            ...   return a + b\n        \n            >>> add(1, 2)\n            3\n        \n        There is not restriction in which snippets you can add. You can even mix\n        snippets of different languages in the same file!\n        \n        Here is an example in Ruby\n        \n        .. code:: ruby\n        \n            >> def add(a, b)\n            >>   a + b\n            >> end;\n        \n            >> add(2, 6)\n            => 8\n        \n        The documentation of each language can be found in ``docs/languages/``.\n        \n        The 'match anything' wildcard\n        -----------------------------\n        \n        By default, if the expected text has the ``<...>`` marker, that\n        will match for any string.\n        \n        Very useful to match long unwanted or uninteresting strings.\n        \n        .. code:: python\n        \n            >>> print(list(range(20)))\n            [0, 1, <...>, 18, 19]\n        \n        Capture\n        -------\n        \n        The ``<name>`` marker can be used to capture any string (like ``<...>``)\n        but also it assigns a name to the capture.\n        \n        If a name is used in an example more than once, all the string captured under\n        that name must be the same string, otherwise the test will fail.\n        \n        Given the value:\n        \n        .. code:: python\n        \n            >>> X = 42\n        \n        The following example will pass, as both ``random-number``s are the same (42).\n        \n        .. code:: python\n        \n            >>> [1, X, 2, X]\n            [1, <random-number>, 2, <random-number>]\n        \n        But in the following, both numbers are different and the example will fail\n        \n        .. code:: python\n        \n            >>> [1, X, 2, 4]                                    # byexample: +PASS\n            [1, <random-number>, 2, <random-number>]\n        \n        \n        Option flags\n        ------------\n        \n        ``byexample`` supports a set of flags or options that can change some\n        parameters of the execution of the example.\n        \n        Some flags are generic, others are interpreter-specific.\n        \n        Normalize whitespace\n        ....................\n        \n        Replace any sequence of whitespace by a single one. This makes the test\n        more robust against small differences (trailing spaces, space/tab mismatch)\n        \n        .. code:: python\n        \n            >>> print(list(range(20)))     # byexample: +WS\n            [0,   1,  2,  3,  4,  5,  6,  7,  8,  9,\n            10,  11, 12, 13, 14, 15, 16, 17, 18, 19]\n        \n        Skip and Pass\n        .............\n        \n        ``SKIP`` will skip the example completely while ``PASS`` will execute it\n        normally but it will not check the output.\n        \n        .. code:: python\n        \n            >>> a = 1\n            >>> a = 2       # this assignment will not be executed # byexample: +SKIP\n            >>> a\n            1\n        \n            >>> def f():\n            ...   print(\"Choosing a random number...\")\n            ...   return 42\n        \n            >>> a = f()     # execute the code but ignore the output # byexample: +PASS\n            >>> a\n            42\n        \n        Timeout\n        .......\n        \n        The execution of each example has a timeout which can be changed by\n        a flag\n        \n        .. code:: python\n        \n            >>> import time\n            >>> time.sleep(2.5) # simulates a slow operation # byexample: +TIMEOUT=3\n        \n        Extend ``byexample``\n        ^^^^^^^^^^^^^^^^^^^^\n        \n        It is possible to extend ``byexample`` adding new ways to find examples in a\n        document and/or to parse and interpret a new language.\n        \n        The ``doc/how_to_extend.rst`` is a quick tutorial that shows exactly that.\n        \nKeywords: doctest documentation test testing\nPlatform: UNKNOWN\nClassifier: Development Status :: 4 - Beta\nClassifier: Intended Audience :: Developers\nClassifier: Topic :: Documentation\nClassifier: Topic :: Software Development :: Documentation\nClassifier: Topic :: Software Development :: Testing\nClassifier: License :: OSI Approved :: GNU General Public License v3 (GPLv3)\nClassifier: Programming Language :: Python :: 2\nClassifier: Programming Language :: Python :: 3\nClassifier: Programming Language :: Ruby\nClassifier: Programming Language :: C++\nClassifier: Programming Language :: Unix Shell\nRequires-Python: >=2.6\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "byexample",
    "platform": "",
    "project_url": "https://pypi.org/project/byexample/",
    "release_url": "https://pypi.org/project/byexample/3.0.0/",
    "requires_dist": [
      "tqdm (<5,>=4)",
      "pygments (<3,>=2)",
      "pexpect (<5,>=4)"
    ],
    "requires_python": "",
    "summary": "Write snippets of code in C++, Python, Ruby, and others as",
    "version": "3.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e196cd03ef75e573b8062d470c36f403",
          "sha256": "586396a2ff7f19a31ef960d7764d12e446fd9959a67057b545f9954c9cb52e54"
        },
        "downloads": -1,
        "filename": "byexample-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e196cd03ef75e573b8062d470c36f403",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 19197,
        "upload_time": "2017-11-15T14:10:12",
        "url": "https://files.pythonhosted.org/packages/c1/25/b39f1a9f2595421704438a61e32e212324fdb7bd7ce21b6918132528ee4c/byexample-1.0.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "34be6302d6e9a63580ff47563a9392e6",
          "sha256": "79a5af1061396bd2ab64c8fa88eb94aabbe2983cc062c00a64bea685ec4aa437"
        },
        "downloads": -1,
        "filename": "byexample-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34be6302d6e9a63580ff47563a9392e6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14359,
        "upload_time": "2017-11-15T14:10:13",
        "url": "https://files.pythonhosted.org/packages/6d/4b/054df3ab85bc2a10b9b12623c4b96fac6294880cfc97e9980898a96c60b1/byexample-1.0.0.tar.gz"
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b0151e9614cbba8a09b6597da639bf7f",
          "sha256": "342d004746e1f4d24b69a66a0486be800110abc8413f3ac620952cc0c2f1d058"
        },
        "downloads": -1,
        "filename": "byexample-2.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0151e9614cbba8a09b6597da639bf7f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 24248,
        "upload_time": "2017-11-28T17:24:46",
        "url": "https://files.pythonhosted.org/packages/39/f0/8e9c528eaf44cf7311cf3d35a206d18fac83df8dcd2b519d23265c6c06f9/byexample-2.1.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "737727216c0a3388eecdba3e919b7351",
          "sha256": "cb087113c72c92e83b4cf1647cab5f7c0b138a45bab9a9a759ebd2abe5d1ff2a"
        },
        "downloads": -1,
        "filename": "byexample-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "737727216c0a3388eecdba3e919b7351",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18692,
        "upload_time": "2017-11-28T17:24:48",
        "url": "https://files.pythonhosted.org/packages/da/72/c10ed67c4fe707c0760a59ebaa8ed041bfaf78927852611494161c656c28/byexample-2.1.1.tar.gz"
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4b98179565d9f8d45ada6f48dc14603e",
          "sha256": "eb2ed90bcc134eb62226a8d49e33b63b7634d18b84ed9c4c8ffc959fec4abd16"
        },
        "downloads": -1,
        "filename": "byexample-3.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b98179565d9f8d45ada6f48dc14603e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 36721,
        "upload_time": "2018-01-09T11:22:43",
        "url": "https://files.pythonhosted.org/packages/f5/13/b020f5860e316411570539325a31c36d16b338a805ed07de388af6a58740/byexample-3.0.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c231cf94991339d70cada48cde5e3a94",
          "sha256": "f78b47def222e437f003bed308542134c5e5d082522a8972ea638ad271344e8e"
        },
        "downloads": -1,
        "filename": "byexample-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c231cf94991339d70cada48cde5e3a94",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27395,
        "upload_time": "2018-01-09T11:22:44",
        "url": "https://files.pythonhosted.org/packages/da/d9/fa08e348af5094b616565fe7cce3d4ed9f879864751a40266ad0afb56747/byexample-3.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4b98179565d9f8d45ada6f48dc14603e",
        "sha256": "eb2ed90bcc134eb62226a8d49e33b63b7634d18b84ed9c4c8ffc959fec4abd16"
      },
      "downloads": -1,
      "filename": "byexample-3.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4b98179565d9f8d45ada6f48dc14603e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 36721,
      "upload_time": "2018-01-09T11:22:43",
      "url": "https://files.pythonhosted.org/packages/f5/13/b020f5860e316411570539325a31c36d16b338a805ed07de388af6a58740/byexample-3.0.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "c231cf94991339d70cada48cde5e3a94",
        "sha256": "f78b47def222e437f003bed308542134c5e5d082522a8972ea638ad271344e8e"
      },
      "downloads": -1,
      "filename": "byexample-3.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c231cf94991339d70cada48cde5e3a94",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 27395,
      "upload_time": "2018-01-09T11:22:44",
      "url": "https://files.pythonhosted.org/packages/da/d9/fa08e348af5094b616565fe7cce3d4ed9f879864751a40266ad0afb56747/byexample-3.0.0.tar.gz"
    }
  ]
}