{
  "info": {
    "author": "Manu Bretelle",
    "author_email": "chantra@fb.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: Name Service (DNS)",
      "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
      "Topic :: Security :: Cryptography",
      "Topic :: Utilities"
    ],
    "description": "# DNS Over HTTPS Proxy\n\nA set of python 3 scripts that supports proxying DNS over HTTPS as specified\nin the [IETF Draft draft-ietf-doh-dns-over-https](https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-02).\n\nDOH provides a way to run encrypted DNS over HTTPS, a protocol which can freely\ntraverse firewalls when other encrypted mechanism may be blocked.\n\nThe project comes with a set of 4 tools:\n\n* [doh-proxy](#doh-proxy): A service that receives DOH queries over HTTP2 and forwards them\nto a recursive resolver.\n* [doh-httpproxy](#doh-httpproxy): Like `doh-proxy` but uses HTTP instead of HTTP2.\nThe main intent is to run this behind a reverse proxy.\n* [doh-stub](#doh-stub): A service that listens for DNS queries and forwards them to a DOH server.\n* [doh-client](#doh-client): A tool to perform a test DNS query against DOH server.\n\nSee the `CONTRIBUTING` file for how to help out.\n\nDOH Proxy was created during [IETF Hackathon 100](https://www.ietf.org/how/runningcode/hackathons/100-hackathon/) as a proof-of-concept and is not used at Facebook.\n\nYou are welcome to use it, but be aware that support is limited and best-effort.\n\n## Installing\n\nTo install an already packaged version directly from PyPi:\n\n```shell\n$ pip3 install doh-proxy\n```\n\n## Usage\n\n### doh-proxy\n\n`doh-proxy` is a stand alone server answering DOH request. The proxy does not do\nDNS recursion itself and rather forward the query to a full-featured DNS\nrecursive server or DNS caching server.\n\nBy running `doh-proxy`, you can get and end-to-end DOH solution with minimal\nsetup.\n\n```shell\n$ sudo doh-proxy \\\n    --upstream-resolver=::1 \\\n    --certfile=./fullchain.pem \\\n    --keyfile=./privkey.pem\n```\n\n### doh-httpproxy\n\n`doh-httpproxy` is designed to be running behind a reverse proxy. In this setup\na reverse proxy such as [NGINX](https://nginx.org/) would be handling the\nHTTPS/HTTP2 requests from the DOH clients and will forward them to\n`doh-httpproxy` backends.\n\nWhile this setup requires more upfront setup, it allows running DOH proxy\nunprivileged and on multiple cores.\n\n\n```shell\n$ sudo doh-httpproxy \\\n    --upstream-resolver=::1 \\\n    --port 8080 \\\n    --listen-address ::1\n```\n\n\n### doh-stub\n\n`doh-stub` is the piece of software that you would run on the clients. By\nproviding a local DNS server, `doh-stub` will forward the DNS requests it\nreceives to a DOH server using an encrypted link.\n\nYou can start a stub resolver with:\n\n```shell\n$ doh-stub \\\n    --listen-port 5553 \\\n    --listen-address ::1 \\\n    --domain foo.bar \\\n    --remote-address ::1\n```\n\nand query it.\n\n```shell\n$ dig @::1 -p 5553 example.com\n```\n\n### doh-client\n\n`doh-client` is just a test cli that can be used to quickly send a request to\na DOH server and dump the returned answer.\n\n```shell\n$ doh-client  \\\n    --domain dns.dnsoverhttps.net \\\n    --qname sigfail.verteiltesysteme.net \\\n    --dnssec\nid 37762\nopcode QUERY\nrcode SERVFAIL\nflags QR RD RA\nedns 0\neflags DO\npayload 4096\n;QUESTION\nsigfail.verteiltesysteme.net. IN AAAA\n;ANSWER\n;AUTHORITY\n;ADDITIONAL\n\n$ doh-client  \\\n    --domain dns.dnsoverhttps.net \\\n    --qname sigok.verteiltesysteme.net \\\n    --dnssec\nid 49772\nopcode QUERY\nrcode NOERROR\nflags QR RD RA AD\nedns 0\neflags DO\npayload 4096\n;QUESTION\nsigok.verteiltesysteme.net. IN AAAA\n;ANSWER\nsigok.verteiltesysteme.net. 60 IN AAAA 2001:638:501:8efc::139\nsigok.verteiltesysteme.net. 60 IN RRSIG AAAA 5 3 60 20180130030002 20171031030002 30665 verteiltesysteme.net. O7QgNZFBu3fULvBXwM39apv5nMehh51f mLOVEsC8qZUyxIbxo4eDLQt0JvPoPpFH 5TbWdlm/jxq5x2/Kjw7yUdpohhiNmdoD Op7Y+RyHbf676FoC5Zko9uOAB7Pp8ERz qiT0QPt1ec12bM0XKQigfp+2Hy9wUuSN QmAzXS2s75k=\n;AUTHORITY\n;ADDITIONAL\n```\n\n## Development\n\n\n### Requirements\n\n* python >= 3.5\n* aiohttp\n* aioh2\n* dnspython\n\n### Building\n\nDOH Proxy uses Python'setuptools to manage dependencies and build.\n\nTo install its dependencies:\n\n```shell\n$ python3 setup.py develop\n```\n\nTo build:\n```shell\n$ python3 setup.py build\n```\n\nTo run unittests:\n```shell\n$ python3 setup.py test\n```\n\nTo run the linter:\n```shell\n$ python3 setup.py flake8\n```\n\nFrom within the root of the repository, you can test the proxy, stub and client respectively\nby using the following commands:\n\n```shell\n$ sudo PYTHONPATH=. ./dohproxy/proxy.py ...\n```\n\n```shell\n$ PYTHONPATH=. ./dohproxy/httpproxy.py ...\n```\n\n\n```shell\n$ PYTHONPATH=. ./dohproxy/stub.py ...\n```\n\n```shell\n$ PYTHONPATH=. ./dohproxy/client.py ...\n```\n\n## Example setups\n\nIn those examples, we will assume that we have the following setup:\n\n* A digital certificate for `dns.example.com`\n* cert file at `/etc/certs/dns.example.com/fullchain.pem`\n* key file at `/etc/certs/dns.example.com/privkey.pem`\n* a DNS resolver that listen on ::1 port 53.\n* A `server` that will be running the `doh-proxy`, this is a host to which the traffic\nwill be sent encrypted and will perform the DNS request on our behalf.\nIn this example, the server is running at `fdbe:7d77:b04f:a2ca::1/64`\n* A `client` that will run the `doh-stub`. We will configure our DNS queries to\nbe sent to the stub, which in turn will be proxied encrypted to our DOH server.\n\nThis document will focus on the `doh-proxy` tools arguments and where they\nshould be run. The specifics of configuring a DNS recursive resolver, reverse\nproxy are outside the scope of this document and are already intensively\ncovered o the Internet.\n\n### Simple setup\n\nOn the `server`, we run the `doh-proxy` as root:\n\n```shell\n$ sudo doh-proxy \\\n    --certfile /etc/certs/dns.example.com/fullchain.pem \\\n    --keyfile /etc/certs/dns.example.com/privkey.pem \\\n    --upstream-resolver ::1\n```\n\nOn the `client`\n```shell\n$ sudo doh-stub \\\n    --domain dns.example.com \\\n    --remote-address fdbe:7d77:b04f:a2ca::1 \\\n     --listen-address ::1\n```\n\nYou can test it by running a `dig` on the `client`:\n```shell\n$ dig @::1 example.com\n```\n\nTo start using it, update `/etc/resolv.conf` and change `nameserver` do be:\n```\nnameserver ::1\n```\n### Behind a reverse proxy\n\nIn this setup, we will run a reverse proxy server that will take care of\nhandling https request and forward them to a `dns-httpproxy` that runs on the\nsame host.\n\n\nAssuming we use [nginx](https://nginx.org/) as our reverse proxy and 2 instances\nof `doh-httpproxy`, one listening on port 8080 and the other one on port 8081.\n\n\nTo run the `doh-httpproxy` processes:\n\n```shell\n$ doh-httpproxy --upstream-resolver ::1 --port 8080 --listen-address=::1\n$ doh-httpproxy --upstream-resolver ::1 --port 8081 --listen-address=::1\n```\n\nAnd then the relevant Nginx config would look like:\n\n```\nupstream backend {\n        server [::1]:8080;\n        server [::1]:8081;\n}\n\nserver {\n        listen 443 ssl http2 default_server;\n        listen [::]:443 ssl http2 default_server;\n\n        server_name dns.example.com;\n\n        location / {\n              proxy_set_header Host $http_host;\n              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n              proxy_redirect off;\n              proxy_buffering off;\n              proxy_pass http://backend;\n        }\n\n        ssl_prefer_server_ciphers on;\n        ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;\n\n        ssl_certificate /etc/certs/dns.example.com/fullchain.pem;\n        ssl_certificate_key /etc/certs/dns.example.com/privkey.pem;\n        ssl_dhparam /etc/nginx/ssl/dhparam.pem;\n}\n```\n\nThe client side is identical to the [simple setup](#simple-setup)\n\n## License\nDOH Proxy is BSD-licensed.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/facebookexperimental/doh-proxy",
    "keywords": "doh proxy dns https",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "doh-proxy",
    "platform": "",
    "project_url": "https://pypi.org/project/doh-proxy/",
    "release_url": "https://pypi.org/project/doh-proxy/0.0.2/",
    "requires_dist": [
      "dnspython",
      "aiohttp",
      "aioh2 (>=0.2.1)"
    ],
    "requires_python": "",
    "summary": "A client and proxy implementation of https://tools.ietf.org/html/draft-ietf-doh-dns-over-https-02",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5020d684b6449b70bd39da769977de44",
          "sha256": "cbe2bf1ad4eed9ba74b9dfc1ae27ab971c1e2701b4cc0b5a74a6e58097c6128f"
        },
        "downloads": -1,
        "filename": "doh_proxy-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5020d684b6449b70bd39da769977de44",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 16707,
        "upload_time": "2018-01-11T19:50:14",
        "url": "https://files.pythonhosted.org/packages/11/c1/25790cb25edbdeb71b425a89f493869d914a33e9e89374fa2a129d52f532/doh_proxy-0.0.1-py3-none-any.whl"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a0f14560c5c3e2cbc1f9af27e97d83d6",
          "sha256": "3d1ce00a1193aac7ddc088351739d1603d52eba298936361f1e3f481e3ce656c"
        },
        "downloads": -1,
        "filename": "doh_proxy-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0f14560c5c3e2cbc1f9af27e97d83d6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 22455,
        "upload_time": "2018-01-17T07:33:51",
        "url": "https://files.pythonhosted.org/packages/67/e2/a267457f54157c13dda9b43019ba82a70cb8a184dafa41392fabceaf7acc/doh_proxy-0.0.2-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a0f14560c5c3e2cbc1f9af27e97d83d6",
        "sha256": "3d1ce00a1193aac7ddc088351739d1603d52eba298936361f1e3f481e3ce656c"
      },
      "downloads": -1,
      "filename": "doh_proxy-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a0f14560c5c3e2cbc1f9af27e97d83d6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 22455,
      "upload_time": "2018-01-17T07:33:51",
      "url": "https://files.pythonhosted.org/packages/67/e2/a267457f54157c13dda9b43019ba82a70cb8a184dafa41392fabceaf7acc/doh_proxy-0.0.2-py3-none-any.whl"
    }
  ]
}