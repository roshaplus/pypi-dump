{
  "info": {
    "author": "dead-beef",
    "author_email": "contact@dead-beef.tk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Multimedia :: Graphics",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing",
      "Topic :: Utilities"
    ],
    "description": "markovchain\n===========\n\nOverview\n--------\n\nMarkov chain generator\n\nRequirements\n------------\n\n-  `Python 3 <https://www.python.org/>`__\n\nInstallation\n------------\n\n::\n\n    pip install markovchain\n\n::\n\n    pip install markovchain[image]\n\n::\n\n    git clone https://github.com/dead-beef/markovchain\n    cd markovchain\n    pip install -e .[dev]\n\nBuilding\n--------\n\n::\n\n    ./build.sh\n\nTesting\n-------\n\n::\n\n    ./test\n    coverage report\n\nModule usage\n------------\n\n-  `Module documentation <https://dead-beef.github.io/markovchain/>`__\n\nExamples\n~~~~~~~~\n\nText\n^^^^\n\n.. code:: python\n\n    from markovchain import MarkovBase, MarkovSqliteMixin\n\n    class Markov(MarkovSqliteMixin, MarkovBase):\n        pass\n\n    markov = Markov(db='markov.db')\n\n    with open('data.txt') as fp:\n        markov.data(fp.read())\n\n    with open('data2.txt') as fp:\n        for line in fp:\n            markov.data(line, True)\n    markov.data('', False)\n\n    words = markov.generate(16) # generator\n    print(*words)\n\n    words = markov.generate(16, start=['sentence', 'start'])\n    print(*words)\n\n    markov.save()\n\n    markov = Markov.load('markov.db')\n\nImage\n^^^^^\n\n.. code:: python\n\n    from PIL import Image\n\n    from markovchain import MarkovBase, MarkovJsonMixin\n    from markovchain.image import MarkovImageMixin\n\n    class Markov(MarkovImageMixin, MarkovJsonMixin, MarkovBase):\n        pass\n\n    markov = Markov()\n\n    markov.data(Image.open('data.png'))\n\n    width = 32\n    height = 16\n    img = markov.image(width, height) # PIL image\n    with open('generated.png', 'wb') as fp:\n        img.save(fp)\n\n    with open('markov.json', 'w') as fp:\n        markov.save(fp)\n\n    markov = Markov.load('markov.json')\n\nCLI usage\n---------\n\n::\n\n    > markovchain -h\n    usage: markovchain [-h] {text,image} ...\n\n    positional arguments:\n      {text,image}\n\n    optional arguments:\n      -h, --help    show this help message and exit\n\nData types\n~~~~~~~~~~\n\n+---------------+-------------------------+---------------------+\n| State file    | File type               | Data mixin used     |\n+===============+=========================+=====================+\n| stdout        | JSON                    | MarkovJsonMixin     |\n+---------------+-------------------------+---------------------+\n| \\*.json       | JSON                    | MarkovJsonMixin     |\n+---------------+-------------------------+---------------------+\n| \\*.json.bz2   | bzip2 compressed JSON   | MarkovJsonMixin     |\n+---------------+-------------------------+---------------------+\n| Other         | SQLite 3 database       | MarkovSqliteMixin   |\n+---------------+-------------------------+---------------------+\n\nExamples\n~~~~~~~~\n\nText\n^^^^\n\n.. code:: bash\n\n    markovchain text create --output text.db input1.txt input2.txt\n    markovchain text update text.db input3.txt input4.txt\n    markovchain text generate text.db\n    markovchain text generate --sentences 16 --start 'sentence start' text.db\n\nImage\n^^^^^\n\n.. code:: bash\n\n    markovchain image create --progress --output img.db img1.png img2.png\n    markovchain image update --progress img.db img3.png img4.png\n    markovchain image generate --progress --size 64 64 --count 4 img.db img%02d.png\n    markovchain image filter --progress img.png output.png\n\nSettings\n^^^^^^^^\n\n-  `Text <https://github.com/dead-beef/markovchain/tree/master/settings/text>`__\n-  `Image <https://github.com/dead-beef/markovchain/tree/master/settings/image>`__\n\nText\n~~~~\n\n::\n\n    > markovchain text -h\n    usage: markovchain text [-h] {create,update,settings,generate} ...\n\n    positional arguments:\n      {create,update,settings,generate}\n\n    optional arguments:\n      -h, --help            show this help message and exit\n\ncreate\n^^^^^^\n\n::\n\n    > markovchain text create -h\n    usage: markovchain text create [-h] [-P] [-s SETTINGS] [-o OUTPUT]\n                                   [input [input ...]]\n\n    positional arguments:\n      input                 input file (default: stdin)\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -P, --progress        show progress bar\n      -s SETTINGS, --settings SETTINGS\n                            settings json file\n      -o OUTPUT, --output OUTPUT\n                            output file (default: stdout)\n\nupdate\n^^^^^^\n\n::\n\n    > markovchain text update -h\n    usage: markovchain text update [-h] [-P] [-s SETTINGS] [-o OUTPUT]\n                                   state [input [input ...]]\n\n    positional arguments:\n      state                 state file\n      input                 input file (default: stdin)\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -P, --progress        show progress bar\n      -s SETTINGS, --settings SETTINGS\n                            settings json file\n      -o OUTPUT, --output OUTPUT\n                            output file (default: rewrite state file)\n\ngenerate\n^^^^^^^^\n\n::\n\n    > markovchain text generate -h\n    usage: markovchain text generate [-h] [-P] [-s SETTINGS] [-ss STATE_SIZE]\n                                     [-st START] [-w WORDS] [-ws WORD_SEPARATOR]\n                                     [-S SENTENCES] [-o OUTPUT]\n                                     state\n\n    positional arguments:\n      state                 state file\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -P, --progress        show progress bar\n      -s SETTINGS, --settings SETTINGS\n                            settings json file\n      -ss STATE_SIZE, --state-size STATE_SIZE\n                            generator state size\n      -st START, --start START\n                            sentence start\n      -w WORDS, --words WORDS\n                            max sentence size (default: 256)\n      -ws WORD_SEPARATOR, --word-separator WORD_SEPARATOR\n                            output word separator (default: ' ')\n      -S SENTENCES, --sentences SENTENCES\n                            number of generated sentences (default: 1)\n      -o OUTPUT, --output OUTPUT\n                            output file (default: stdout)\n\nsettings\n^^^^^^^^\n\n::\n\n    > markovchain text settings -h\n    usage: markovchain text settings [-h] state\n\n    positional arguments:\n      state       state file\n\n    optional arguments:\n      -h, --help  show this help message and exit\n\nImage\n~~~~~\n\n::\n\n    > markovchain image -h\n    usage: markovchain image [-h]\n                             {convert,create,update,settings,generate,filter} ...\n\n    positional arguments:\n      {convert,create,update,settings,generate,filter}\n\n    optional arguments:\n      -h, --help            show this help message and exit\n\nconvert\n^^^^^^^\n\n::\n\n    > markovchain image convert -h\n    usage: markovchain image convert [-h] [-p HUES SATURATIONS VALUES] [-c {0,1}]\n                                     [-d] [-r WIDTH HEIGHT]\n                                     input [input ...]\n\n    positional arguments:\n      input                 input file\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -p HUES SATURATIONS VALUES, --palette HUES SATURATIONS VALUES\n                            palette color division (default: [8, 4, 8])\n      -c {0,1}, --convert-type {0,1}\n                            conversion type (default: 1)\n      -d, --dither          enable dithering\n      -r WIDTH HEIGHT, --resize WIDTH HEIGHT\n                            resize images (default: None)\n\ncreate\n^^^^^^\n\n::\n\n    > markovchain image create -h\n    usage: markovchain image create [-h] [-P] [-s SETTINGS] [-o OUTPUT]\n                                    [input [input ...]]\n\n    positional arguments:\n      input                 input file\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -P, --progress        show progress bar\n      -s SETTINGS, --settings SETTINGS\n                            settings json file\n      -o OUTPUT, --output OUTPUT\n                            output file (default: stdout)\n\nupdate\n^^^^^^\n\n::\n\n    > markovchain image update -h\n    usage: markovchain image update [-h] [-P] [-s SETTINGS] [-o OUTPUT]\n                                    state [input [input ...]]\n\n    positional arguments:\n      state                 state file\n      input                 input file\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -P, --progress        show progress bar\n      -s SETTINGS, --settings SETTINGS\n                            settings json file\n      -o OUTPUT, --output OUTPUT\n                            output file (default: rewrite state file)\n\ngenerate\n^^^^^^^^\n\n::\n\n    > markovchain image generate -h\n    usage: markovchain image generate [-h] [-P] [-s SETTINGS]\n                                      [-ss STATE_SIZE [STATE_SIZE ...]]\n                                      [-S WIDTH HEIGHT] [-l LEVEL] [-c COUNT]\n                                      state output\n\n    positional arguments:\n      state                 state file\n      output                output file name format string\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -P, --progress        show progress bar\n      -s SETTINGS, --settings SETTINGS\n                            settings json file\n      -ss STATE_SIZE [STATE_SIZE ...], --state-size STATE_SIZE [STATE_SIZE ...]\n                            generator state sizes\n      -S WIDTH HEIGHT, --size WIDTH HEIGHT\n                            image size (default: <scanner.resize>)\n      -l LEVEL, --level LEVEL\n                            image levels (default: <scanner.levels>)\n      -c COUNT, --count COUNT\n                            generated image count (default: 1)\n\nfilter\n^^^^^^\n\n::\n\n    > markovchain image filter -h\n    usage: markovchain image filter [-h] [-P] [-t {json,sqlite}] [-s SETTINGS]\n                                    [-S STATE] [-ss STATE_SIZE [STATE_SIZE ...]]\n                                    [-l LEVEL] [-c COUNT]\n                                    input output\n\n    positional arguments:\n      input                 input image\n      output                output file name format string\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -P, --progress        show progress bar\n      -t {json,sqlite}, --type {json,sqlite}\n                            generator type (default: json)\n      -s SETTINGS, --settings SETTINGS\n                            settings json file\n      -S STATE, --state STATE\n                            state file\n      -ss STATE_SIZE [STATE_SIZE ...], --state-size STATE_SIZE [STATE_SIZE ...]\n                            generator state sizes\n      -l LEVEL, --level LEVEL\n                            filter start level (default: 1)\n      -c COUNT, --count COUNT\n                            generated image count (default: 1)\n\nsettings\n^^^^^^^^\n\n::\n\n    > markovchain image settings -h\n    usage: markovchain image settings [-h] state\n\n    positional arguments:\n      state       state file\n\n    optional arguments:\n      -h, --help  show this help message and exit\n\nLicenses\n--------\n\n-  `markovchain <https://github.com/dead-beef/markovchain/blob/master/LICENSE>`__\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/dead-beef/markovchain",
    "keywords": "markov chain generator",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "markovchain",
    "platform": "",
    "project_url": "https://pypi.org/project/markovchain/",
    "release_url": "https://pypi.org/project/markovchain/0.1.0/",
    "requires_dist": [
      "pillow; extra == 'image'",
      "sphinx-rtd-theme; extra == 'dev'",
      "sphinx; extra == 'dev'",
      "coverage; extra == 'dev'",
      "pillow; extra == 'dev'",
      "ijson",
      "tqdm"
    ],
    "requires_python": "",
    "summary": "Markov chain generator",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "392469fb48503797531677d01a166b73",
          "sha256": "1e1aaa86f618cffa9d55c417b61e41fcd0bbd23d34c62ea5caac1dece2881097"
        },
        "downloads": -1,
        "filename": "markovchain-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "392469fb48503797531677d01a166b73",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 36581,
        "upload_time": "2017-10-19T00:33:29",
        "url": "https://files.pythonhosted.org/packages/4c/d5/7813f68015aa7dfa77fb84df10b99e7605e86542bb1470e42cc5c78133a5/markovchain-0.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "04548286d785f297abffd805df8847c6",
          "sha256": "97bba6aa5dde81f7b7f8bc8687f877bc9ea2400616627887cd1441e4d1efea8e"
        },
        "downloads": -1,
        "filename": "markovchain-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "04548286d785f297abffd805df8847c6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43935,
        "upload_time": "2017-10-19T00:33:31",
        "url": "https://files.pythonhosted.org/packages/a2/a4/9c4c709e008a729d5762cda7c1c59ba54c26b3179b3f2ff5ee1b46a278ff/markovchain-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "392469fb48503797531677d01a166b73",
        "sha256": "1e1aaa86f618cffa9d55c417b61e41fcd0bbd23d34c62ea5caac1dece2881097"
      },
      "downloads": -1,
      "filename": "markovchain-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "392469fb48503797531677d01a166b73",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 36581,
      "upload_time": "2017-10-19T00:33:29",
      "url": "https://files.pythonhosted.org/packages/4c/d5/7813f68015aa7dfa77fb84df10b99e7605e86542bb1470e42cc5c78133a5/markovchain-0.1.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "04548286d785f297abffd805df8847c6",
        "sha256": "97bba6aa5dde81f7b7f8bc8687f877bc9ea2400616627887cd1441e4d1efea8e"
      },
      "downloads": -1,
      "filename": "markovchain-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "04548286d785f297abffd805df8847c6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 43935,
      "upload_time": "2017-10-19T00:33:31",
      "url": "https://files.pythonhosted.org/packages/a2/a4/9c4c709e008a729d5762cda7c1c59ba54c26b3179b3f2ff5ee1b46a278ff/markovchain-0.1.0.tar.gz"
    }
  ]
}