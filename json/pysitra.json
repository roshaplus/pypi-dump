{
  "info": {
    "author": "Marjan Moderc",
    "author_email": "marjan.moderc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "PySitra\n=======\n\nA Python package for a two-way 2D transformation between old and new\nslovenian coordinates system.\n\nAbout\n-----\n\nPySitra is a python written library two-way 2D transformation between\nold and new slovenian coordinates system. The project and it's name\n(**Py**\\ thon **S**\\ loven\\ **i**\\ an **tra**\\ nsformation) is inspired\nby the popular Slovenian web portal for online point transformation\nbetween old (Gauss-Kr\u00fcger) and new (Transverse Mercator) coordinate\nsystems, called `SitraNet.si <www.sitranet.si>`__, and it's C-written\ncommand-line-friendly successor `Geo Coordinate\nConverter <http://geocoordinateconverter.tk/indeks.html>`__. Library\ncomes with a handy command-line utility tool that enables an easy batch\nconversion of shapefiles and coma-separated ascii files.\n\nProgram supports two most commonly used transformating methods for 2D\npoint transformations: - ***triangle:*** affine 6-parametric 2D triangle\ntransformation, based on 899 `Slovenian reference\npoints <http://www.e-prostor.gov.si/zbirke-prostorskih-podatkov/drzavni-koordinatni-sistem/horizontalni-drzavni-koordinatni-sistem-d96tm/d96tm/transformacijski-parametri/>`__\n(best accuracy) - ***24regions:*** a simplified 4-parametric 2D\ntransformation (where parameteres are precalculated for 24 Slovenian\nregions (`more\ninfo <http://www.e-prostor.gov.si/zbirke-prostorskih-podatkov/drzavni-koordinatni-sistem/horizontalni-drzavni-koordinatni-sistem-d96tm/d96tm/transformacijski-parametri/>`__)\n\nProgram contains spatailly precalculated regional transformation\nparameters, but also allows a manual specification of transformation\nparameters for both available methods.\n\n**IMPORTANT NOTICE:** Library is primarily intended and therefore mostly\nsuitable for slovenian coordinate systems d48GK (espg: 3912) and d96TM\n(epsg: 3794)!\n\nFor more theoretical background, see the official GURS\n`webpage <http://www.e-prostor.gov.si/zbirke-prostorskih-podatkov/drzavni-koordinatni-sistem/transformacija-v-novi-koordinatni-sistem/>`__.\n\nInstallation:\n-------------\n\nLibrary is available on PyPi repository, so it can easily be installed\nwith pip:\n\n::\n\n    pip install pysitra\n\nUsage:\n------\n\n1. Python API\n~~~~~~~~~~~~~\n\n**1.1. Transforming python lists of points:**\n\n.. code:: python\n\n    from pysitra import SloTransformation\n\n    # List of point that you want converted into d96 via several methods\n    D48_POINTS = [(500000,100000),(0,0),(650000,200000)]\n\n\n    # Initialize a Triangle Transformation object\n    ts_triangle = SloTransformation(from_crs=\"d48\",method=\"triangle\")\n\n    # Initialize a 24regions transformation object\n    ts_24region = SloTransformation(from_crs=\"d48\",method=\"24regions\")\n\n    # Initialize a affine transformation object with your own parameters\n    ts_triangle_manual = SloTransformation(from_crs=\"d48\",method=\"triangle\",params=\"1.00001;0.000040647;-374.668;-0.00002241;1.000006;494.8428\".split(\";\"))\n\n    # Note, that seemingly redundant recreation of different transformations as a separate object comes very handy, when you want to\n    # transform many files/lists at once, so you don't have to perform the expensive transformation object initialization\n    # for every file/list separately.\n\n\n    # Once you have transformation object initialized, you can use it's .transform() method to transform old points into\n    # new points quite cheaply:\n    print(\"Triangle transformation (affine 6parametric):\")\n    print(ts_triangle.transform(D48_POINTS))\n    print(\"24regions transformation (4parametric):\")\n    print( ts_24region.transform(D48_POINTS))\n    print(\"Triangle transformation with custom parameters:\")\n    print(ts_triangle_manual.transform(D48_POINTS))\n\n**1.2. Transforming files with python**\n\n.. code:: python\n\n    from pysitra import shp_transformation,csv_transformation\n    from pysitra.utils import recognize_csv_separator,check_for_csv_header\n    import geopandas as gpd\n    import pandas as pd\n\n\n    # SHAPEFILES:\n\n    #read shapefile into GeoDataFrame and transform it and save it as into new shapefile\n    df_in = gpd.read_file(\"shapefile_in_d48.shp\")\n    df_out = shp_transformation(df_in,from_crs=\"d48\",method=\"24regions\")\n    df_out.to_file(\"shapefile_in_d96.shp\")\n\n\n    # ASCII CSVS:\n    csv_file = \"terrain_measurements_in_d48.csv\"\n\n    sep = recognize_csv_separator(csv_file) #guess the separator type\n    header = check_for_csv_header(csv_file) #check if file has header\n\n    #read csv file into DataFrame, transform them by triangle method with custom parameters and save it to csv.\n    csv_in = pd.read_csv(csv_file, sep=sep, header=header)\n    csv_out = csv_transformation(df_in=csv_in, from_crs=\"d48\", method=\"triangle\", params=\"1.00001;0.000040647;-374.668;-0.00002241;1.000006;494.8428\".split(\";\"))\n    csv_out.to_file(\"terrain_measurements_in_d96.csv\")\n\n**1.3. Using low level functions to transform point-by-point**\n\n.. code:: python\n\n    from pysitra import trans_2R_4params,trans_2R_6params\n\n    D48_POINTS = [(500000,100000), (0,0), (650000,200000)]\n\n    for point in D48_POINTS:\n        # 4parametric transformation with params: scale,rotation,trans_x,trans_y\n        x, y = trans_2R_4params(point[0], point[1], params=[0.9999873226,0.0009846750,378.755,-493.382])\n        print(x, y)\n        # 6parametric transformation with params a,b,c,d,e,f\n        x, y = trans_2R_6params(point[0], point[1], params=[1.00001,0.000040647,-374.668,-0.00002241,1.000006,494.8428])\n        print(x, y)\n\n2. Command Line Utility\n~~~~~~~~~~~~~~~~~~~~~~~\n\nTransformations on a file (directory) level are best carried out by\nusing the command line utility, that automatically ships and installs\nwith the library. Utility can be invoked with the command ``sitra`` in\nyour shell. Calling ``sitra --help`` brings up commands overview with\navailable options:\n\n::\n\n    $ sitra --help\n    Usage: sitra [OPTIONS] FILE_IN [FILE_OUT]\n\n    Options:\n      --to_crs [d48|d96]             Coordinate system to transform your data into\n                                     [required]\n      --method [triangle|24regions]  Transformation method to be used\n      --params TEXT                  Optional argument: semicolon separated manual\n                                     parameters, required for each transformation\n                                     method (24regions:4params,\n                                     triangle:6params,...\n      --help                         Show this message and exit.\n\n**2.1. RULES AND DEFAULT CMD BEHAVIOUR**\n\n-  ``FILE_IN`` is a mandatory input. Valid input file type are ESRI\n   Shapefiles (\\*.shp) or plain ASCII csv files (\\*.csv, \\*.txt)\n-  If no outfile name is given as input ``FILE_OUT``, the same filename\n   with extension \\_{crs} will be used automaticaly! (e.g.:\n   shapefile.shp --> shapefile\\_d96.shp)\n-  If input file is ASCII type, program will try to autodetect field for\n   easting and northing by checking the column values range and column\n   names\n-  If input file is type \\*.shp, program check its EPSG code and will\n   complain if input's crs is not reverse of the desired crs! No such\n   test can be performed with ascii input types\n-  parameter ``--to_crs`` is mandatory and can only be\n   ``d96``\\ (=EPSG:3794) or ``d48`` (=EPSG:3912).\n-  default value for ``--method`` is ``triangle`` (best accuracy)\n-  default value for ``--params`` is ``None`` (they get calculated\n   automatically - best accuracy)\n-  in case you want to perform transformation with your own\n   transformation parameters, you have to specify them manually with an\n   option ``--params`` in a following style:\n\n   -  for affine triangle transformation (=2R-6parameters\n      transformation):\n      ``... -method=triangular --params=\"scale_x;rotation_y;translation_x;rotation_x;scale_y;translation_y\" ...``\n\n   -  for simplified 2R-4parameters transformation (which is used in\n      24regions transformation)\n\n      ::\n\n          ... --method=24regions --params=\"scale;CCW_rotation[dec \u00b0];translation_x[m];translation_y[m]\" ...\n\n   -  note the apostrophe ``\"`` or ``'`` around the semicolon-separated\n      values in both cases! See the actual examples below!\n\n**2.2. CMD EXAMPLES**: 1. A minimal example usage for transforming\nshapefile with default settings (--method=triangle) will save result\ninto 'old\\_shapefile\\_d96.shp'\n\n::\n\n    sitra --to_crs=d96 old_shapefile.shp\n\n2. Another example, this time with --method=24regions and specified\n   output:\n\n::\n\n    sitra --to_crs=d96 --method=24regions old_shapefile.shp new_shapefile.shp\n\n3. Example with csv file (note that no csv format specification is\n   needed --> separator and x,y,z columns are automatically guessed!):\n\n::\n\n    sitra --to_crs=d48 --method=24regions Cool_points.csv Back_to_MariaTheresa_times.csv\n\n4. In all the above examples the transformation parameters were\n   automatically calculated based on a chosen method and point location.\n   But you can also specify your own parameters, but you have to make\n   sure you pass correct number of parameters in right order for the\n   corresponding transformation method. Here is an example for custom\n   affine 6-parametric 2R transformation (~triangle) d48-->d96\n   tranformation. (*Parameters are given in order a,b,c,d,e,f, based on\n   this `standard naming\n   convention <http://geocoordinateconverter.tk/>`__*):\n\n::\n\n    sitra --to_crs=d96 --method=triangle --params='1.00001;0.000040647;-374.668;-0.00002241;1.000006;494.8428' old_points.csv new_points.csv\n\n5. For a 4-parameteric 2R transformation (~24regions) from d96 to back\n   to d48 using your own transformation parameters, do the following:\n   (*example parameters based on a region No.1 of the `d96-->d48\n   24region\n   transformation <http://www.e-prostor.gov.si/fileadmin/ogs/drz_parametri/24_regij_PARAMETRI_D96-D48.pdf>`__)*\n   :\n\n   ::\n\n       sitra --to_crs=d96 --method=24regions --params=\"0.9999873226;0.0009846750;378.755;-493.382\" old_points.csv new_points.csv\n\nTODO:\n~~~~~\n\n-  Implementation for 3D points (7-parametric transformation) -->\n   1region,3regions,7regions transformation\n\nAuthors\n-------\n\n-  **Marjan Moderc**, ARSO, Slovenia - *the coding wizardy* -\n   `GitHub <https://github.com/marjanmo>`__\n-  **Regina Kolenc**, ARSO, Slovenia - *mathematical-geodetic\n   background*\n\nLicense\n-------\n\nThis project is licensed under the MIT License - see the\n`LICENSE.txt <https://github.com/marjanmo/pysitra/blob/master/LICENSE.txt>`__\nfile for details\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/marjanmo/pysitra",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pysitra",
    "platform": "",
    "project_url": "https://pypi.org/project/pysitra/",
    "release_url": "https://pypi.org/project/pysitra/0.3/",
    "requires_python": "",
    "summary": "Python implementation of some popular slovenian transformation methods (SiTra!)",
    "version": "0.3"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6659696ff297d242f2d5e72ea2399bc5",
          "sha256": "a7332aaf16ba9ee9f5fa47e76c1f0b90e98de787a95feb50e7fa5b850f7a3c16"
        },
        "downloads": 0,
        "filename": "pysitra-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6659696ff297d242f2d5e72ea2399bc5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14124,
        "upload_time": "2017-06-05T15:56:57",
        "url": "https://files.pythonhosted.org/packages/20/f4/b5891f41c3af0a1aa841d78f867348e6f68472b14dc07cd5a375da3900fc/pysitra-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d18daf4bdde343a58871df1ccc9695e8",
          "sha256": "9726fba741285ebce0906bdddc972d921c1f1beb01dac394dbbd505cc195e61a"
        },
        "downloads": 0,
        "filename": "pysitra-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d18daf4bdde343a58871df1ccc9695e8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12395,
        "upload_time": "2017-06-05T16:05:11",
        "url": "https://files.pythonhosted.org/packages/5a/a3/6861bb36cc2c5fbcaf85175485bf2fadab1ed43e4ad288299badc9e3263e/pysitra-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f7b380c29dca2f1abb613784ca033ee8",
          "sha256": "e9f2c1f8c86538729b3e41409c57a69cde39e009b09ffa097ad165fa8ce214b8"
        },
        "downloads": 0,
        "filename": "pysitra-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f7b380c29dca2f1abb613784ca033ee8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12165,
        "upload_time": "2017-06-05T16:06:18",
        "url": "https://files.pythonhosted.org/packages/c6/aa/71af010b84e3afcbad4f10d993ba63d2d75d58b9fefebf949e018212b5eb/pysitra-0.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f7b380c29dca2f1abb613784ca033ee8",
        "sha256": "e9f2c1f8c86538729b3e41409c57a69cde39e009b09ffa097ad165fa8ce214b8"
      },
      "downloads": 0,
      "filename": "pysitra-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "f7b380c29dca2f1abb613784ca033ee8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 12165,
      "upload_time": "2017-06-05T16:06:18",
      "url": "https://files.pythonhosted.org/packages/c6/aa/71af010b84e3afcbad4f10d993ba63d2d75d58b9fefebf949e018212b5eb/pysitra-0.3.tar.gz"
    }
  ]
}