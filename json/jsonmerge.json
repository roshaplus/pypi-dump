{
  "info": {
    "author": "Tomaz Solc",
    "author_email": "tomaz.solc@tablix.org",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": "Merge a series of JSON documents\n================================\n\nThis Python module allows you to merge a series of JSON documents into a\nsingle one.\n\nThis problem often occurs for example when different authors fill in\ndifferent parts of a common document and you need to construct a document\nthat includes contributions from all the authors. It also helps when\ndealing with consecutive versions of a document where different fields get\nupdated over time.\n\nConsider a trivial example with two documents::\n\n    >>> base = {\n    ...         \"foo\": 1,\n    ...         \"bar\": [ \"one\" ],\n    ...      }\n\n    >>> head = {\n    ...         \"bar\": [ \"two\" ],\n    ...         \"baz\": \"Hello, world!\"\n    ...     }\n\nWe call the document we are merging changes into *base* and the changed\ndocument *head*. To merge these two documents using *jsonmerge*::\n\n    >>> from pprint import pprint\n\n    >>> from jsonmerge import merge\n    >>> result = merge(base, head)\n\n    >>> pprint(result, width=40)\n    {'bar': ['two'],\n     'baz': 'Hello, world!',\n     'foo': 1}\n\nAs you can see, when encountering an JSON object, *jsonmerge* by default\nreturns fields that appear in either *base* or *head* document. For other\nJSON types, it simply replaces the older value. These principles are also\napplied in case of multiple nested JSON objects.\n\nIn a more realistic use case however, you might want to apply different\n*merge strategies* to different parts of the document. You can tell\n*jsonmerge* how to do that using a syntax based on `JSON schema`_.\n\nIf you already have schemas for your document, you can simply expand them\nwith additional keywords recognized by *jsonmerge*.\n\nYou use the *mergeStrategy* schema keyword to specify the strategy. The\ndefault two strategies mentioned above are called *objectMerge* for objects\nand *overwrite* for all other types.\n\nLet's say you want to specify that the merged *bar* field in the example\ndocument above should contain elements from all documents, not just the\nlatest one. You can do this with a schema like this::\n\n    >>> schema = {\n    ...             \"properties\": {\n    ...                 \"bar\": {\n    ...                     \"mergeStrategy\": \"append\"\n    ...                 }\n    ...             }\n    ...         }\n\n    >>> from jsonmerge import Merger\n    >>> merger = Merger(schema)\n    >>> result = merger.merge(base, head)\n\n    >>> pprint(result, width=40)\n    {'bar': ['one', 'two'],\n     'baz': 'Hello, world!',\n     'foo': 1}\n\nAnother common example is when you need to keep a versioned list of values\nthat appeared in the series of documents::\n\n    >>> schema = {\n    ...             \"properties\": {\n    ...                 \"foo\": {\n    ...                     \"type\": \"object\",\n    ...                     \"mergeStrategy\": \"version\",\n    ...                     \"mergeOptions\": { \"limit\": 5 }\n    ...                 }\n    ...             }\n    ...         }\n    >>> from jsonmerge import Merger\n    >>> merger = Merger(schema)\n\n    >>> v1 = {\n    ...     'foo': {\n    ...         'greeting': 'Hello, World!'\n    ...     }\n    ... }\n\n    >>> v2 = {\n    ...     'foo': {\n    ...         'greeting': 'Howdy, World!'\n    ...     }\n    ... }\n\n    >>> base = None\n    >>> base = merger.merge(base, v1, meta={'version': 1})\n    >>> base = merger.merge(base, v2, meta={'version': 2})\n\n    >>> pprint(base, width=55)\n    {'foo': [{'value': {'greeting': 'Hello, World!'},\n              'version': 1},\n             {'value': {'greeting': 'Howdy, World!'},\n              'version': 2}]}\n\nNote that we use the *mergeOptions* keyword to supply additional options to\nthe merge strategy. In this case, we tell the *version* strategy to retain\nonly 5 most recent versions of this field. We also used the *meta* argument\nto supply some document meta-data that is included for each version of the\nfield. *meta* can contain an arbitrary JSON object.\n\nExample above also demonstrates how *jsonmerge* is typically used when\nmerging more than two documents. Typically you start with an empty *base*\nand then consecutively merge different *heads* into it.\n\nIf you care about well-formedness of your documents, you might also want to\nobtain a schema for the documents that the *merge* method creates.\n*jsonmerge* provides a way to automatically generate it from a schema for\nthe input document::\n\n    >>> result_schema = merger.get_schema()\n\n    >>> pprint(result_schema, width=80)\n    {'properties': {'foo': {'items': {'properties': {'value': {'type': 'object'}}},\n                            'maxItems': 5,\n                            'type': 'array'}}}\n\nNote that because of the *version* strategy, the type of the *foo* field\nchanged from *object* to *array*.\n\n\nMerge strategies\n----------------\n\nThese are the currently implemented merge strategies.\n\noverwrite\n  Overwrite with the value in *base* with value in *head*. Works with any\n  type.\n\nappend\n  Append arrays. Works only with arrays.\n\narrayMergeById\n  Merge arrays, identifying items to be merged by an ID field. Resulting\n  arrays have items from both *base* and *head* arrays.  Any items that\n  have identical an ID are merged based on the strategy specified further\n  down in the hierarchy.\n\n  By default, array items are expected to be objects and ID of the item is\n  obtained from the *id* property of the object.\n\n  You can specify an arbitrary *JSON pointer* to point to the ID of the\n  item using the *idRef* merge option. When resolving the pointer, document\n  root is placed at the root of the array item (e.g. by default, *idRef* is\n  '/id'). You can also set *idRef* to '/' to treat an array of integers or\n  strings as a set of unique values.\n\n  Array items in *head* for which the ID cannot be identified (e.g. *idRef*\n  pointer is invalid) are ignored.\n\n  You can specify an additional item ID to be ignored using the *ignoreId*\n  merge option.\n\nobjectMerge\n  Merge objects. Resulting objects have properties from both *base* and\n  *head*. Any properties that are present both in *base* and *head* are\n  merged based on the strategy specified further down in the hierarchy\n  (e.g. in *properties*, *patternProperties* or *additionalProperties*\n  schema keywords).\n\n  The *objClass* option allows one to request a different dictionary class\n  to be used to hold the JSON object. The possible values are names that\n  correspond to specific Python classes. Built-in names include\n  *OrderedDict*, to use the collections.OrderedDict class, or *dict*,\n  which uses the Python's dict built-in. If not specified, *dict* is\n  used by default. (*OrderedDict* is not available in Python 2.6.)\n\n  Note that additional classes or a different default can be configured via\n  the Merger() constructor (see below).\n\nversion\n  Changes the type of the value to an array. New values are appended to the\n  array in the form of an object with a *value* property. This way all\n  values seen during the merge are preserved.\n\n  You can limit the length of the list using the *limit* option in the\n  *mergeOptions* keyword.\n\n  By default, if a *head* document contains the same value as the *base*,\n  document, no new version will be appended. You can change this by setting\n  *ignoreDups* option to *false*.\n\nIf a merge strategy is not specified in the schema, *objectMerge* is used\nfor objects and *overwrite* for all other values.\n\nYou can implement your own strategies by making subclasses of\njsonmerge.strategies.Strategy and passing them to Merger() constructor\n(see below).\n\n\nThe Merger Class\n----------------\n\nThe Merger class allows you to further customize the merging of JSON\ndata by allowing you to:\n\n- set the schema containing the merge stategy configuration\n- provide additional strategy implementations\n- set a default class to use for holding JSON object data; *OrderedDict*\n  is provided as built-in option in Python 2.7 or later.\n- configure additional JSON object classes selectable via the *objClass*\n  merge option.\n\nThe Merger constructor takes the following arguments:\n\nschema\n   The JSON Schema that contains the merge strategy directives\n   provided as a JSON object.  An empty dictionary should be provided\n   if no strategy configuration is needed.\n\nstrategies\n   A dictionary mapping strategy names to instances of Strategy\n   classes.  These will be combined with the built-in strategies\n   (overriding them with the instances having the same name).\n\nobjclass_def\n   The name of a supported dictionary-like class to hold JSON data by\n   default in the merged result. The name must match a built-in name or one\n   provided in the *objclass_menu* parameter.\n\nobjclass_menu\n   A dictionary providing additional classes to use as JSON object\n   containers.  The keys are names that can be used as values for the\n   *objectMerge* strategy's *objClass* option or the *objclass_def*\n   argument. Each value is a function or class that produces an instance of\n   the JSON object container. It must support an optional dictionary-like\n   object as a parameter which initializes its contents.\n\n\nLimitations\n-----------\n\nMerging of documents with schemas that do not have a well-defined type\n(e.g. schemas using *allOf*, *anyOf* and *oneOf*) will likely fail. Such\ndocuments could require merging of two values of different types. For\nexample, *jsonmerge* does not know how to merge a string to an object.\n\nYou can work around this limitation by defining for your own strategy that\ndefines what to do in such cases. See docstring documentation for the\n*Strategy* class on how to do that. get_schema() however currently provides\nno support for ambiguous schemas like that.\n\n\nRequirements\n------------\n\n*jsonmerge* supports Python 2 (2.6, 2.7) and Python 3 (3.2 and newer).\nPython 2.6 support will be removed in the next release.\n\nYou need *jsonschema* (https://pypi.python.org/pypi/jsonschema) module\ninstalled.\n\n*jsonschema* 2.4.0 is recommended. With versions newer than 2.4.0,\n*get_schema()* method might not work correctly\n(https://github.com/avian2/jsonmerge/issues/20)\n\n\nInstallation\n------------\n\nTo install the latest *jsonmerge* release from the Python package index::\n\n    pip install jsonmerge\n\n\nSource\n------\n\nThe latest development version is available on GitHub:\nhttps://github.com/avian2/jsonmerge\n\nTo install from source and run the test suite::\n\n    python setup.py install\n    python setup.py test\n\n\nLicense\n-------\n\nCopyright 2017, Tomaz Solc <tomaz.solc@tablix.org>\n\nThe MIT License (MIT)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n.. _JSON schema: http://json-schema.org\n\n..\n    vim: tw=75 ts=4 sw=4 expandtab softtabstop=4",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "UNKNOWN",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "jsonmerge",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/jsonmerge/",
    "release_url": "https://pypi.org/project/jsonmerge/1.3.0/",
    "requires_python": null,
    "summary": "Merge a series of JSON documents.",
    "version": "1.3.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "69cc288cb0ac387b0db87db8cfa7e2fc",
          "sha256": "9d608a53def816705e63108d3545c2531ebec218a6eac9464f08fb2dfaf71c4b"
        },
        "downloads": 1445,
        "filename": "jsonmerge-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "69cc288cb0ac387b0db87db8cfa7e2fc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9298,
        "upload_time": "2014-08-19T18:14:15",
        "url": "https://files.pythonhosted.org/packages/11/14/7709d0e0e669c40f3ba299584295aadb49db8f160d02b6f98cc578998a54/jsonmerge-1.0.0.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1690b26f6da5e303004767a75830b9dd",
          "sha256": "2ae73a058474e75f27d4ac2595d9da28084ae42be506f04d077ccea3a853b921"
        },
        "downloads": 12359,
        "filename": "jsonmerge-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1690b26f6da5e303004767a75830b9dd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12556,
        "upload_time": "2014-09-20T10:50:47",
        "url": "https://files.pythonhosted.org/packages/a8/a3/08f0e2fb0588c3d7f89ea3f7d6dfb77d0eb766de45e1c2dca08728b21fd6/jsonmerge-1.1.0.tar.gz"
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d2b281d31eb37e85491e0b420dbe136b",
          "sha256": "88455c0aa3ca859029c4879c591fc4b7b152738a30a93c4fb50a091e71a8c728"
        },
        "downloads": 554,
        "filename": "jsonmerge-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d2b281d31eb37e85491e0b420dbe136b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14031,
        "upload_time": "2016-05-13T08:57:01",
        "url": "https://files.pythonhosted.org/packages/56/bb/b858011bd63c025415710d85ebd8e4b8a64efc7fbda621786c3935a8e6c7/jsonmerge-1.2.0.tar.gz"
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fc7a8eed177c09d703a9b841be311fc7",
          "sha256": "ac6121696e88e9f61263767d7912d6ef16535a0901566eb1181a9fc39ca37dca"
        },
        "downloads": 11108,
        "filename": "jsonmerge-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fc7a8eed177c09d703a9b841be311fc7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14340,
        "upload_time": "2016-07-18T10:11:57",
        "url": "https://files.pythonhosted.org/packages/24/61/6113b90f9753a068d9ca5557a0fb8bd038e7b4613c5dcb690aea1230754f/jsonmerge-1.2.1.tar.gz"
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e35ee2c636efaf4e3525ad0fd368b046",
          "sha256": "422d3373905270d4ad53530e1bc184c8b8ab1934853b9108b14ec71c69c2e484"
        },
        "downloads": 185,
        "filename": "jsonmerge-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e35ee2c636efaf4e3525ad0fd368b046",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16569,
        "upload_time": "2017-04-02T12:58:48",
        "url": "https://files.pythonhosted.org/packages/af/ff/b33dc94feb742007c09bf9c3897011e09d7742e40f2ad6e94542fa80e4ba/jsonmerge-1.3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e35ee2c636efaf4e3525ad0fd368b046",
        "sha256": "422d3373905270d4ad53530e1bc184c8b8ab1934853b9108b14ec71c69c2e484"
      },
      "downloads": 185,
      "filename": "jsonmerge-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e35ee2c636efaf4e3525ad0fd368b046",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 16569,
      "upload_time": "2017-04-02T12:58:48",
      "url": "https://files.pythonhosted.org/packages/af/ff/b33dc94feb742007c09bf9c3897011e09d7742e40f2ad6e94542fa80e4ba/jsonmerge-1.3.0.tar.gz"
    }
  ]
}