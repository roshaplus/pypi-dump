{
  "info": {
    "author": "Jason Madden",
    "author_email": "jason@nextthought.com",
    "bugtrack_url": "",
    "classifiers": [
      "Framework :: Zope3",
      "Intended Audience :: Developers",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Testing"
    ],
    "description": "=============\r\n nti.testing\r\n=============\r\n\r\nSupport for writing tests, particularly in a Zope3/ZTK environment,\r\nusing either nose2 or zope.testing.\r\n\r\nInstallation\r\n============\r\n\r\nnti.testing can be installed using pip, either from the git repository\r\nor from PyPI::\r\n\r\n  pip install nti.testing\r\n\r\n\r\nPyHamcrest\r\n==========\r\n\r\nnti.testing provides a group of `PyHamcrest`_ matchers. There are both\r\ngeneral-purpose matchers and matchers that are of use to users of\r\n`zope.interface`_ and `zope.schema`_.\r\n\r\n\r\n.. _PyHamcrest: https://pyhamcrest.readthedocs.io/en/latest/\r\n.. _zope.interface: https://pypi.python.org/pypi/zope.interface\r\n.. _zope.schema: https://pypi.python.org/pypi/zope.schema\r\n\r\n\r\nMatchers can be imported from the ``nti.testing.matchers`` module.\r\n\r\nBasic Matchers\r\n--------------\r\n\r\n``is_true`` and ``is_false`` check the ``bool`` value of a supplied\r\nobject (we're using literals for explanation purposes, but it\r\nobviously makes more sense, and reads better, when the matched object\r\nis a variable, often of a more complex type)::\r\n\r\n   >>> from hamcrest import assert_that, is_\r\n   >>> from nti.testing.matchers import is_true, is_false\r\n   >>> assert_that(\"Hi\", is_true())\r\n   >>> assert_that(0, is_false())\r\n\r\nInterface Matchers\r\n------------------\r\n\r\nNext we come to matchers that support basic use of ``zope.interface``.\r\n\r\nWe can check that an object provides an interface and that a factory\r\nimplements it::\r\n\r\n   >>> from zope.interface import Interface, Attribute, implementer\r\n   >>> class IThing1(Interface):\r\n   ...     pass\r\n   >>> class IThing2(Interface):\r\n   ...     pass\r\n   >>> class IThings(IThing1, IThing2):\r\n   ...     got_that_thing_i_sent_you = Attribute(\"Did you get that thing?\")\r\n   >>> @implementer(IThings)\r\n   ... class Thing(object):\r\n   ...     pass\r\n\r\n   >>> from nti.testing.matchers import provides, implements\r\n   >>> assert_that(Thing(), provides(IThings))\r\n   >>> assert_that(Thing, implements(IThings))\r\n\r\nThe attentive reader will have noticed that ``IThings`` defines an\r\nattribute that our implementation doesn't *actually* provide. This is\r\nwhere the next stricter check comes in. ``verifiably_provides`` uses\r\nthe interface machinery to determine that all attributes and methods\r\nspecified by the interface are present as described::\r\n\r\n\r\n  >>> from nti.testing.matchers import verifiably_provides\r\n  >>> assert_that(Thing(), verifiably_provides(IThing2, IThing1))\r\n  >>> assert_that(Thing(), verifiably_provides(IThings))\r\n  Traceback (most recent call last):\r\n  ...\r\n  AssertionError:...\r\n  Expected: object verifiably providing IThings\r\n       but: <class 'Thing'> failed to provide attribute \"got_that_thing_i_sent_you\" from IThings\r\n  <BLANKLINE>\r\n\r\n``zope.interface`` can only check whether or not an attribute or\r\nmethod is present. To place (arbitrary) tighter constraints on the\r\nvalues of the attributes, we can step up to ``zope.schema`` and the\r\n``validly_provides`` matcher::\r\n\r\n  >>> from zope.schema import Bool\r\n  >>> class IBoolThings(IThing1, IThing2):\r\n  ...     got_that_thing_i_sent_you = Bool()\r\n  >>> @implementer(IBoolThings)\r\n  ... class BoolThing(object):\r\n  ...     pass\r\n\r\n``validly_provides`` is a superset of ``verifiably_provides``::\r\n\r\n  >>> from nti.testing.matchers import validly_provides\r\n  >>> assert_that(BoolThing(), validly_provides(IThing1, IThing2))\r\n  >>> assert_that(BoolThing(), validly_provides(IBoolThings))\r\n  Traceback (most recent call last):\r\n  ...\r\n  AssertionError:...\r\n  Expected: (object verifiably providing IBoolThings and object validly providing <InterfaceClass ....IBoolThings>)\r\n       but: object verifiably providing IBoolThings <class 'BoolThing'> failed to provide attribute \"got_that_thing_i_sent_you\" from IBoolThings\r\n  <BLANKLINE>\r\n\r\nFor finer grained control, we can compare data against schema fields::\r\n\r\n  >>> from nti.testing.matchers import validated_by, not_validated_by\r\n  >>> field = IBoolThings.get('got_that_thing_i_sent_you')\r\n  >>> assert_that(True, is_(validated_by(field)))\r\n  >>> assert_that(None, is_(not_validated_by(field)))\r\n\r\nParent/Child Relationships\r\n--------------------------\r\n\r\nThe ``aq_inContextOf`` matcher uses the concepts from Acquisition to\r\ncheck parent/child relationships::\r\n\r\n  >>> from nti.testing.matchers import aq_inContextOf\r\n  >>> class Parent(object):\r\n  ...     pass\r\n  >>> class Child(object):\r\n  ...     __parent__ = None\r\n  >>> parent = Parent()\r\n  >>> child = Child()\r\n  >>> child.__parent__ = parent\r\n\r\n  >>> assert_that(child, aq_inContextOf(parent))\r\n\r\nTest Fixtures\r\n=============\r\n\r\nSupport for test fixtures can be found in ``nti.testing.base`` and\r\n``nti.testing.layers``. The ``base`` package includes fully-fleshed\r\nout base classes for direct use, while the ``layers`` package includes\r\nmixins that can be used to construct your own test layers.\r\n\r\nThe ``base`` package makes a distinction between \"normal\" and \"shared\"\r\nfixtures. Normal fixtures are those that are used for a single test\r\ncase. They are established via ``setUp`` and torn down via\r\n``tearDown``.\r\n\r\nIn contrast, shared fixtures are expected to endure for the duration\r\nof all the tests in the class or all the tests in the layer. These are\r\nbest used when the fixture is expensive to create. Anything that\r\nextends from ``base.AbstractSharedTestBase`` creates a shared fixture.\r\nThrough the magic of metaclasses, such a subclass can also be assigned\r\nas the ``layer`` property of another class to be used as a test layer\r\nthat can be shared across more than one class.\r\n\r\nThe most important bases are ``base.ConfiguringTestBase`` and\r\n``base.SharedConfiguringTestBase``. These are both fixtures for\r\nconfiguring ZCML, either from existing packages or complete file\r\npaths. To use these, subclass them and define class attributes\r\n``set_up_packages`` and (if necessary) ``features``::\r\n\r\n  >>> from nti.testing.base import ConfiguringTestBase\r\n  >>> import zope.security\r\n  >>> class MyConfiguringTest(ConfiguringTestBase):\r\n  ...     set_up_packages = (\r\n  ...         'zope.component', # the default configuration by name\r\n  ...          # a named file in a named package\r\n  ...          ('ftesting.zcml', 'zope.traversing.tests'),\r\n  ...          # an imported module\r\n  ...          zope.security,\r\n  ...          # Our own package; in a test, this will mean the parent\r\n  ...          # package\r\n  ...          \".\")\r\n\r\nWe would then proceed to write our test methods. The packages that we\r\nspecified will be set up and torn down around every test method. In\r\naddition, the ``zope.testing`` cleanup functions will also run around\r\nevery test method.\r\n\r\nTime\r\n====\r\n\r\nHaving a clock that's guaranteed to move in a positive increasing way\r\nin every call to ``time.time`` is useful. ``nti.testing.time``\r\nprovides a decorator to accomplish this that ensures values always are\r\nat least the current time and always are increasing. (It is not thread\r\nsafe.) It can be applied to functions or methods, and optionally takes\r\na ``granularity`` argument::\r\n\r\n  >>> from nti.testing.time import time_monotonically_increases\r\n  >>> from nti.testing.time import reset_monotonic_time\r\n  >>> @time_monotonically_increases(0.1) # increment by 0.1\r\n  ... def test():\r\n  ...     import time\r\n  ...     t1 = time.time()\r\n  ...     t2 = time.time()\r\n  ...     assert t2 == t1 + 0.1, (t2, t1)\r\n\r\n  >>> test()\r\n\r\nChanges\r\n=======\r\n\r\n\r\n2.0.0 (2017-04-12)\r\n------------------\r\n\r\n- Add support for Python 3.6.\r\n- Remove ``unicode_literals``.\r\n- Substantially rework ``time_monotonically_increases`` for greater\r\n  safety. Fixes `issue 5 <https://github.com/NextThought/nti.testing/issues/5>`_.\r\n\r\n1.0.0 (2016-07-28)\r\n------------------\r\n\r\n- Add Python 3 support.\r\n- Initial PyPI release.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/NextThought/nti.testing",
    "keywords": "nose2 testing zope3 ZTK hamcrest",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nti.testing",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/nti.testing/",
    "release_url": "https://pypi.org/project/nti.testing/2.0.0/",
    "requires_python": "",
    "summary": "Support for testing code",
    "version": "2.0.0"
  },
  "releases": {
    "0.0.0.dev0": [],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f64fb0a55c76d3e7ad9d11dbd27444e9",
          "sha256": "84f2f063a2e632bebee39f6b46c62de4f4f7b0f68e69eea831d2c4067a99bf99"
        },
        "downloads": 340,
        "filename": "nti.testing-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f64fb0a55c76d3e7ad9d11dbd27444e9",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 26672,
        "upload_time": "2016-07-28T13:05:14",
        "url": "https://files.pythonhosted.org/packages/0f/61/add242e6fb7e7614fe342983e9bfe221c1dec781176e69c306d12143e561/nti.testing-1.0.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ffd561b1238cc6a391d6165e80de023a",
          "sha256": "50ad1d8b603b29177909e54ea85ba41d46e4f71016625e099bcda520823e712a"
        },
        "downloads": 122,
        "filename": "nti.testing-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ffd561b1238cc6a391d6165e80de023a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20711,
        "upload_time": "2016-07-28T13:05:16",
        "url": "https://files.pythonhosted.org/packages/62/c4/a03afc8f74723bdc1fec105140f220c9f89207e455fabfb8a837a1b6a832/nti.testing-1.0.0.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8cec52a9621052d42a8f6f7ea01f4275",
          "sha256": "ceac4cb11dca2941ebfba165db8db3362a974ec69a83915cfcf3ec1a80dc3c06"
        },
        "downloads": 0,
        "filename": "nti.testing-2.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8cec52a9621052d42a8f6f7ea01f4275",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 28886,
        "upload_time": "2017-04-12T16:02:43",
        "url": "https://files.pythonhosted.org/packages/9c/a9/fa03ac6a6a79203af54d3cdab215400f910bb30dff0b54c2ade0591e0915/nti.testing-2.0.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a82db833ab31cfe801e25b2ea8f4a4ac",
          "sha256": "ba04d720d4ffd61294df907b4a41409d4c9dc5f8c9307fd806c7e99c764a38ef"
        },
        "downloads": 0,
        "filename": "nti.testing-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a82db833ab31cfe801e25b2ea8f4a4ac",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22794,
        "upload_time": "2017-04-12T16:02:45",
        "url": "https://files.pythonhosted.org/packages/c9/07/70ae4bc3b5b96b5cb7a3152e0566abb1d5012cb465a89a0b339168c70b98/nti.testing-2.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8cec52a9621052d42a8f6f7ea01f4275",
        "sha256": "ceac4cb11dca2941ebfba165db8db3362a974ec69a83915cfcf3ec1a80dc3c06"
      },
      "downloads": 0,
      "filename": "nti.testing-2.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8cec52a9621052d42a8f6f7ea01f4275",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 28886,
      "upload_time": "2017-04-12T16:02:43",
      "url": "https://files.pythonhosted.org/packages/9c/a9/fa03ac6a6a79203af54d3cdab215400f910bb30dff0b54c2ade0591e0915/nti.testing-2.0.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "a82db833ab31cfe801e25b2ea8f4a4ac",
        "sha256": "ba04d720d4ffd61294df907b4a41409d4c9dc5f8c9307fd806c7e99c764a38ef"
      },
      "downloads": 0,
      "filename": "nti.testing-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a82db833ab31cfe801e25b2ea8f4a4ac",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 22794,
      "upload_time": "2017-04-12T16:02:45",
      "url": "https://files.pythonhosted.org/packages/c9/07/70ae4bc3b5b96b5cb7a3152e0566abb1d5012cb465a89a0b339168c70b98/nti.testing-2.0.0.tar.gz"
    }
  ]
}