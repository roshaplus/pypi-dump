{
  "info": {
    "author": "Read Roberts and many other font engineers",
    "author_email": "rroberts@adobe.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "\nAdobe Font Development Kit for OpenType (AFDKO)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe AFDKO is a set of tools for building OpenType font files from PostScript and TrueType font data.\n\nThis directory tree contains the data files, Python scripts, Perl scripts, and\nsources for the command line programs that comprise the AFDKO. The project uses the `Apache 2.0 OpenSource license <https://rawgit.com/adobe-type-tools/afdko/master/LICENSE.txt>`__.\n\nPlease refer to the file `AFDKO-Overview.html <https://rawgit.com/adobe-type-tools/afdko/master/afdko/AFDKO-Overview.html>`__ for a more detailed description of what is in the AFDKO.\n\nMajor Changes\n~~~~~~~~~~~~~\n\nThe afdko has been restructured so that it can be installed as a Python package. It now depends on the user's Python interpreter, and no longer contains its own Python interpreter.\n\nIn order to do this, the two Adobe-owned, non-OpenSource programs were dropped: IS and checkOutlines. If these turn out to be sorely missed, an installer for them will be added to the old Adobe afdko web-site.  The current intent is to migrate the many tests in checkOutlines to the newer checkOutlinesUFO (which does work with OpenType and Type 1 fonts, but currently does only overlap detection and removal, and a few basic path checks).\n\nInstallation\n~~~~~~~~~~~~\n\nThe AFDKO requires `Python <http://www.python.org/download/>`__ 2.7.x. It does not yet support Python 3.x.\n\nThe package is listed in the Python Package Index (PyPI), so you can\ninstall it with `pip <https://pip.pypa.io>`__:\n\n.. code:: sh\n\n    pip install afdko\n\nThe current PyPi package is a beta release for Mac OS X.\n\nYou can remove the afdko package with the command:\n\n.. code:: sh\n\n    pip uninstall afdko\n\nIf you have both the FDK from the Adobe AFDKO web page installed, and and the new afdko package installed, the commands in the new afdko will take precedence over commands in the older Adobe FDK, as the Python package directory is added at the beginning of the PATH directory list, and the old installer added the Adobe FDK directory to the end of the list.\n\nNote that the PyPi installer will add the new adko package paths to the start of your system PATH environment variable, and this is not undone by the uninstaller. If you want to completely clean up, you will need to change the PATH environment variable to remove the new afdko executable directories. On the Mac, this means editing the line in your login file that sets the PATH variable. On Windows, this means editing the PATH environment variable in the System control panel.\n\nYou can also download and install older versions of the AFDKO from the `Adobe afdko home page <http://www.adobe.com/devnet/opentype/afdko.html>`__.\n\n\nBuild From Source\n~~~~~~~~~~~~~~~~~~\nIn order to build and install the afdko from the `afdko github repository <https://github.com/adobe-type-tools/afdko>`__, get a copy from  the repository, cd to the top-level directory of the afdko, and use the setup.py script:\n\n.. code:: sh\n\n    python setup.py install\n\nAnd to be able to run this install command, you must first have installed the development tools for your platform.\n\nOn the Mac, install these with:\n\n.. code:: sh\n\n    xcode-select --install\n\n\n\nOn Linux, install these with:\n\n.. code:: sh\n\n    apt-get -y install python2.7\n    apt-get -y install python-pip\n    apt-get -y install python-dev\n\n\nOn Windows, you need to download and install Visual C++ 6, and add all the service packs.\n\n\n\nChange log for the Adobe Font Development Kit for OpenType (AFDKO)\n==================================================================\n\n2.6.25 (released 2018-01-26)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis release fixes the following issues:\n\n* `#237 <https://github.com/adobe-type-tools/afdko/issues/237>`_ 'cvParameters' block is allowed only Character Variant (cvXX) features\n* `#241 <https://github.com/adobe-type-tools/afdko/issues/241>`_ pip uninstall afdko fails\n\n\n2.6.24 (released 2018-1-3)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe afdko has been restructured so that it can be installed as a Python package. It now depends on the user's Python interpreter, and no longer contains its own Python interpreter.\n\nIn order to do this, the two Adobe-owned, non-OpenSource programs were dropped: IS and checkOutlines. If these turn out to be sorely missed, an installer for them will be added to the old Adobe afdko web-site.  The current intent is to migrate the many tests in checkOutlines to the newer checkOutlinesUFO (which does work with OpenType and Type 1 fonts, but currently does only overlap detection and removal, and a few basic path checks).\n\nOlder Releases can be downloaded and installed from the `Adobe afdko home page <http://www.adobe.com/devnet/opentype/afdko.html>`__.\n\nWork in progress: auto update of the change log, more installation checks.\n\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFDK. v2.5 Dec 1 2017 change number 66097.\n\tThis lists only the major bug fixes since the last release. For a complete list see:\n\thttps://github.com/adobe-type-tools/afdko/commits/master\n\n\tbuildCFF2VF.\n\tAdd version check for fontTools module: only starting with version 3.19.0 does fontTools.cffLib build correct PrivateDict BlueValues when there are master source fonts not at the ends of the axes.\n\n\tmakeotfexe.\n\tSupport mapping a glyph to several Unicode values. This can now be done by providing the the UV values as a comma-separated list in the third field of the GlyphOrderAndAliasDB file, in the 'uniXXXXX' format.\n\n\tFixed a crashing bug that can happen when the features file contains duplicate class kern pairs. Reported by Andreas Seidel in email.\n\n\tAdd fatal messages if a feature file 'cvParameters' block is used in anything other than a Character Variant (cvXX) feature, or if a 'featureNames' block is used in anything other than a Stylistic Set (ssXX) feature.\n\n\tRelaxed restrictions on name table name IDs. Only 2 and 6 are now reserved for the implementation.\n\n\tFixed bug where use of the 'size' feature in conjunction with named stylistic alternates would cause the last stylistic alternate name to be replaced by the size feature menu name. Incidentally removed old patent notices.\n\n\trestored old check for the fatal error of two different glyphs being mapped to the same character encoding.\n\n\tIf the last line of a GOADB file did not end in a new-line, makeotf quit, saying the line was too long.\n\n\n\totf2otc.\n\tCan now take a single font as input, and can take an OTC font as input.\n\n\tsfntdiff.\n\tFixed old bug: it used to crash if no file path or only one file path was\n\tprovided. \n\tChanged behavior: it now returns non-zero only if a real error occurs: it\n\tused to return non-zero when there was a difference between the fonts.\n\n\tspot\n\tFixed old bug: a PrivateDict must exist, but it is legal for it to have a\n\tlength of 0.\n\n\ttx and family.\n\tAdd support for reading and writing blended hints from/to CFF2. \n\nFDK. v2.5 April 27 2017 change number 65781.\n\tmakeInstancesUFO.\n\tPreserve public.postscriptNames lib key.\n\tDo not use postscriptFontName attribute.\n\n\tmakeotf.\n\tNew option -V to print MakeOTF.py script version\n\n\ttx.\n\tAdded new option '-maxs', to set the maximum number of subroutines allowed. The default is now 32K, as some legacy systems cannot support more than this.\n\tAdd improved CFF2 support: tx can now use the option -cff2 to write from a CFF2 font (in a complete OpenType font) to a file containing the output CFF2 table, with full charstring optimization and subroutinization. This last option is still work in progress: it has not been extensively tested, and does yet support blended hints.\t\n\tSeveral bug fixes for overlap removal.\n\tFixed bug in subroutinization that could leave a small number of unused subroutines in the font. This clean-up is optional, as it requires 3x the processing speed with the option than without, and typically reduces the font size by less than 0.5 percent.\n\n\tttxn.\n\tOption '-nv' will now print name ID's 3, and 5, but with the actual version number replaced by the string \"VERSION SUPPRESSED\".\n\nFDK. v2.5 April 3 2017 change number 65781.\n\tVariable fonts.\n\tbuildMasterOTFs. new command to build OTF font files from UFO sources, when building variable fonts.\n\tbuildCFF2VF. New command  to build a CFF2 Variable font from the master OTF fonts.\n\n\tautohint.\n\tFix bug introduced by typo on Dec 1 2015. Caused BlueFuzz to always be set to 1. Rarely causes problems, but found it with font that sets BlueFuzz to zero: with BlueFuzz set to 1, some of the alignment zones were filtered out as being closer than BlueFuzz*3.\n\tFixed long-standing bug with UFO fonts where if a glyph was edited after being hinted, running autohint would process and output only the old version of the glyph from the processed layer.\n\n\tCheckOutlinesUFO.\n\tAdded \"quiet mode\" option.\n\tFixed a bug where logic could try and set an off-curve point as a start point.\n\tChanged the logic for assigning contour order and start point. The overlap removal changes both, and  checkOutlinesUFO makes some attempt to restore the original state when possible.\tThese changes will result in different contour order and start points than before the change, but fixes a bug, and will usually produce the same contour order and start point in fonts that are generated as instances from a set of master designs. There will always be cases where there will be some differences. \n\n\tMakeOTF.py\n\tReplace old logic for deriving relative paths with python function for the same.\n\tWhen converting Type1 to CID in makeotf, the logic in mergeFonts and ConvertFontToCID.py was requiring the FDArray FontDicts to have keys, like FullName, that are not in fact required, and and are often not present in the source fonts. Fixed both mergeFonts and ConvertFontToCID.py.\n\tBy default, makeotf will add a minimal stub DSIG table in release mode. The new options \"-addDSIG\" and \"-omitDSIG\" will force makeotf to either add or omit the stub DSIG table. This function was added because the Adobe Type group is discontinuing signing font files.\n\n\tmakeotfexe.\n\tfix bug in processing UVS input file for makeotf for non-CID fonts.\n\tFixed bug where makeotf would reject a name ID 25 record when specified in a feature file. This name id value used to be reserved, but is now used for for overriding the postscript family named used with arbitrary instances in variable fonts.\n\n\tmergeFonts.\n\tRemoved requirement for mergeFonts that each FontDict have a FullName, Weight, and Family Name. This fixes a bug in using mergeFonts with UFO sources and converting to CID-keyed output font. Developers shouldn't have to put these fields in the source fonts, since they are not required.\n\n\tspot.\n\tFixed bug in name table dump: Microsoft platform language tags for Big5 and PRC were swapped.\n\n\tstemHist.\n\tRemoved debug print line, that caused a lot of annoying output, and was left in the last update by accident.\n\n\ttx.\n\tWhen getting Unicode values for output, the presence of UVS cmap meant that no UV values were read from any other cmap subtable. I fixed this bug, but 'tx' still does not support reading and showing UVS values. Doing so will be a significant amount of work, so I am deferring that to the my round of FDK work.\n\tAdded support for CFF2 variable fonts as source fonts: when using -t1 or -cff, these will be snapshotted to an instance. If no user design vector (UDV) argument is supplied, then the output will be the default  data. If a UDV argument is supplied with the option -U, then the instance is built at the specified point in design space.\n\tAdded new option +V/-V to remove overlaps in output Type 1 fonts ( mode -t1) and CFF fonts (mode -cff). This is still experimental: please report any bugs.\n\tUpdated subroutinizer to much faster with larger fonts. (by Ariza Michiharu)\n\tAdded new option (+V/-V) to remove overlaps. (by Ariza Michiharu)\n\n\tttx.\n\tUpdated to version 3.9.1 of the fontTools module from master branch on github.\n\nFDK. v2.5 May 27 2016 change number 65322.\n\tAdobe CMAP files for CJK fonts.\n\tUpdated UniCNS-UTF32-H to v1.14\n\n\tBuild issues.\n\tMade changes to allow compiling under Xcode 7.x and OSX 10.11\n\n\tDocumentation:\n\tFixed a bunch of errors in the Feature File spec. My thanks to Sascha Brawer, \n\twho has been reviewing this carefully. See the issues raised by him in Jan\n\tand Feb 2016 on https://github.com/adobe-type-tools/afdko.\n\n\tautohint.\n\tFixed support for history file, which can be used with non-UFO fonts only.\n\tThis has been broken since UFO support was added.\n\n\tautohintexe.\n\tFixed really old bug:  ascenders and descenders get dropped from the\n\talignment zone report if they are a) not in an alignment zone and b) there\n\tis an overlapping smaller stem hint. This happened with a lot of descenders.\n\n\tcheckOutlines.\n\tFixed bug in ufoTools.py that kept checkOutlines (NOT checkOutlinesUFO) from\n\tworking with a UFO font. Fixed bug which mis-identified orientation of path\n\twhich is very thin and in part convex. I am a bit concerned about the\n\tsolution, as what I did was to delete some logic that was used to\n\tdouble-check the default rules for determining orientation. However, the\n\tdefault logic is the standard way to determine orientation and should always\n\tbe correct. The back-up logic was definitely not always correct as it was\n\tapplied only to a single point, and was correct only if the curve associated\n\twith the point is concave. It is in fact applied at several different points\n\ton a path, with the majority vote winning. Since the backup logic is used\n\tonly when a path is very thin, I suspect that it was a sloppy solution to\n\tfix a specific case.  The change was tested with several large fonts, and\n\tfound no false positives.\n\n\tmakeInstances.\n\tFixed bug which produced distorted shapes for those glyphs which were written with the\n\tType 1 'seac' operator, aka Type 1 composite glyphs.\n\n\tmakeotf.\n\tFixed bug where using both kern format A and B in a single lookup caused\n\trandom values to be assigned.\n\tFixed bug where a format A kern value (a single value) would be applied\n\tto X positioning rather than Y positioning for the features 'vkrn'. Applied same\n\tlogic to vpal, valt, and vhal.\n\tFinally integrated Georg Seifert's code for supporting hyphen in development\n\tglyph names. This version differs from Georg's branch in that it does not\n\tallow any of the special characters in final names, the left side names in\n\tthe GlyphAliasAndOrderDB. However, allowing this is a smaller tweak than it\n\tused to be: just use the same arguments in cb.c:gnameFinalScan() as in\n\tgnameDevScan(). This update also includes Geeorg Seifert's changes for allow\n\tsource fonts to have CID names in the form 'cidNNNN'.\n\tFixed bugs in ConvertToCID.py module, that kept the -cn option from working\n\twith a simple source font.\n\t- fixed bug that the script expected in several places that the fontinfo file\n\twould contain at least one user defined FontDict.\n\t- fixed bug that the script expected that the src font would have Weight and\n\tAdobeCopyright fields in the font dict.\n\t- fixed a bug that kept the \u2018-nS\u2019 option for having any effect when the \u2018-cn\u2019 option is used.\n\tRemove use of 'strsep()': function is not defined in the Windows C library\n\tFixed bug in removing duplicate and conflicting entries.\n\tChanged logic to leave the first pair defined out of a set of duplicate or conflicting entries.\n\tFixed bug in processing GDEF glyph class statements: if multiple GlyphClass statements were used.\n\tthe additional glyphs were added to a new set of 4 glyph classes, rather than merged with the \n\tallowed 4 glyph classes.\n\tFixed issue in GDEF definition processing. Made it an error to specify both LigCaretByPosition\n\tand LigCaretByIndex for a glyph.\n\tCorrected error message: language and system statements are allowed in named lookups within\n\ta feature definition, but are not allowed in stand-alone lookups.\n\tCorrected typo in MakeOTF.py help text about what the default source font path.\n\tFixed an old bug in makeotf. If a mark-to-base or mark-to-mark lookup has\n\tstatements that do not all reference the same mark classes, makeotf used to\n\twrite a 'default' anchor attachment point of (0.0) for any mark class that\n\twas not referenced by a given statement. Fixed this bug by reporting a fatal\n\terror: the feature file must be re-written so that all the statements in a\n\tlookup must all reference the same set of mark classes.\n\tSuppressed warning about not using GOADB file when building a CID font. Some\n\tof the changes I made a few weeks ago to allow building fonts with CID's\n\tspecified as glyphs names with the form 'cidNNNNN' allowed this warning to\n\tbe be shown, but it is not appropriate for CID-keyed fonts.\n\tFixed old bug where using option -'cn' to convert a nonCID source font to\n\tCID would cause a mis-match between the maxp table\tnumber of glyphs and the\n\tnumver of glyph actually in the output font, because the conversion used the\n\tsource font data rather than the first pass name-keyed OTF which had been\n\tsubject to glyph subsetting with the GOADB file.\n\tFixed bug in reading UVS files for non_CID fonts.\n\n\tmisc.\n\tFix copyright statements that are incompatible with the OpenSource license.\n\tThanks to Dmitry Smirnov for pointing these out. These were in some make\n\tfiles, an example Adobe CMAP file, and some of the technical documentation.\n\tFixed typos in help text in PrrofPDF.py. Thank you Arno Enslin.\n\n\tttxn\n\tFix bug in ttxn.py that broke it when dumping some tables, when used with\n\tlatest font tools library on github.\n\n\ttx.\n\tFixed bug in rounding fractional values when flattening library elements,\n\tused in design of CJK fonts.\n\tFixed bug in handling FontDict FontMatrix array values: not enough precision\n\twas used, so that 1/2048 was written as 1/2049 in some cases.\n\tFixed bug in reading UFO fonts, so that glyphs with no <outline> element and\n\twith a <lib> element would be skipped.\n\tMinor code changes to allow 'tx' to compile as a 64 bit program.\n\tFixed bug in dumping afm format data, introduced when tx was updated to be 64 bit.\n\tFixed bug in processing seac, introduced in work on rounding fractional values.\n\tFixed bug in writing AFM files: -1 value would be written as 4294967295 instead of -1.\n\tAdd option -noOpt, rename blend operator from 'reserved' to 'blend'. This was done in\n\torder to support experiments with  multiple master fonts.\n\tWhen reading a UFO font: if it has no Postscript version entry, set the version to\n\t1.0.\n\tWhen writing a UFO font: If StemSnap[H,V] are missing, but Std[H,V]W are\n\tpresent, then use the Std[H,V]W values to supply the UFO postscript\n\tStemSnap[H,V] values.\n\tFixed old bug in 'tx' with rounding decimal values for BlueScale is one of\n\tthe few Postscript values with several places of decimal precision. It is\n\tstored as an ascii text decimal point number in T1, T2, and UFO files, but\n\tis stored internally as a C 'float' value in some programs. Real values in C\n\tcannot exactly represent all decimal values. For example, the closest that a\n\tC 'float' value can come to \"0.375\" is \"0.03750000149\".\tWhen writing output\n\tfonts, tx was writing out the latter value in ascii text, rather than\n\trounding back to 0.0375. Fixed by rounding to 8 decimal places on writing\n\tthe value out. This bug had no practical consequences, as 0.0375 and\n\t0.03750000149 both convert to exactly the same float value, but was\n\tannoying, and could cause rounding differences in any programs that use\n\thigher precision fields to hold the BlueScale value.\n\nFDK. v2.5 Dec 1 2015 change number 65012.\n\tmakeotf.\n\tFixed bug in MakeOTF.py that kept makeotf from building fonts with spaces in the path.\n\tFixed bug in ConvertFontToCID module that kept makeotf from converting UFO fonts to CID.\n\tChanged support for Unicode Variation Sequence file ( option -ci) so that\n\twhen used with name-keyed fonts, the Region-Order field is omitted, and the\n\tglyph name may be either a final name or developer glyph name. Added warning\n\twhen glyph in the UVS entry is not found in font. See MakeOTF User's Guide.\n\tFixed bug in makeotfexe: it now always makes a cmap table subtable MS\n\tplatform, Unicode, format 4 for CID fonts. This is required by Windows. If\n\tthere are no BMP unicode values, then it makes a stub subtable, mapping GID 0\n\tto UVS 0.\n\n\ttx and related programs.\n\tWhen reading a UFO source font, do not complain if the fontinfo.plistentry\n\t\"styleName\" is present but has is an empty string. This is valid, and is\n\tcommon when the style is \"Regular\".\n\nFDK. v2.5 Nov 22 2015 change number 64958.\n\tautohint and tx.\n\tSwitched to using new text format that is plist-compatible for T1 hint data in UFO fonts.\n\tSee header of FDK/Tools/SharedData/FDKScripts/ufoTools.py for format.\n\n\tautohint\n\tFinally fixed excessive generation of flex hints. This has been an issue for\n\tdecades, but never got fixed because it didn't show up anywhere as a\n\tproblem. The last version of makeotf turned on parsing warnings, and so now\n\twe notice.\n\n\tcheckOutlinesUFO\n\tFixed bug where abutting paths didn't get merged if there were no changes in the set of points.\n\tFixed bug where a .glif file without an <outline> element was treated as\n\tfatal error. It is valid for the <outline> element to be missing.\n\n\tcheckOutlines\n\tChanged -I option so that it also turns off checking for tiny paths. Added\n\tnew option -5 to turn this check back on again.\n\tIncreased max number of paths in a glyph from 64 to 128, per request from a developer.\n\n\tCompareFamily.py\n\tFix old bug in applying ligature width tests for CID fonts, and fixed issue\n\twith fonts that do not have Mac name table names. The logic now reports\n\tmissing Mac name table names only if there actually are some: if there are\n\tnone, these messages are suppressed.\n\n\n\tfontplot/waterfallplot/hintplot/fontsetplot\n\tFix bugs that prevented these from being used with CID-keyed fonts and ufo\n\tfonts. Since the third party library that generates the PDF files is very\n\tlimited, I did this by simply converting the source files to a name-keyed\n\tType 1 temporary font file, and then applying the tools the temporary file.\n\n\tmakeInstancesUFO:\n\tAdded a call to the ufonormalizer tool for each instance. Also added a call\n\tto the defcon library to remove all private lib keys from lib.py and each\n\tglyph in the default layer, excepting only \"public.glyphOrder\".\n\n\tMakeOTF User Guide.\n\tFix typos reported by Gustavo Ferreira\n\n\tMakeOTF.py.\n\tIncreased max number of directories to look upwards when searching for\n\tGOADB/FontMenuNameDB from 2 to 3.\n\tAdded three new options.\n\t-omitMacNames/useMacNames\tWrite only Windows platform menu names in name table,\n\tapart from the names specified in the feature file.\n\t-useMacNames writes Mac as well as Windows names.\n\n\t-overrideMenuNames\n\tAllow feature file name table entries to override\n\tdefault values and the values from the font menu name DB\n\tfor name IDs. Name ID's 2 and 6 cannot be overridden.\n\tUse this with caution, and make sure you have provided\n\tfeature file name table entries for all platforms.\n\n\t-skco/nskco\t\t\t\tdo/do not suppress kern class optimization by using left\n\tside class 0 for non-zero kern values. Optimizing saves a few\n\thundred to thousand bytes, but confuses some programs.\n\tOptimizing is the default behavior, and previously was the only option.\n\tAllow building an OTF from a UFO font only. The internal features.fea file\n\twill be used if there is no \"features\" file in the font's parent directory.\n\tIf the GlyphAliasAndOrderDB file is missing, only a warning will be issued.\n\tIf the FontMenuNameDB is missing, makeotf will attempt to build the font\n\tmenu names from the UFO fontinfo file, using the first of the following keys\n\tfound: \"openTypeNamePreferredFamilyName\", \"familyName\", the family name part\n\tof the PostScriptName,\tand finally the value \"NoFamilyName\". For style, the\n\tkeys are: \"openTypeNamePreferredSubfamilyName\", \"styleName\", the style name\n\tpart of the PostScriptName, and finally the value \"Regular\".\n\tFixed bug where MakeOTF allowed the input file path and the output file path\n\tto be the same.\n\n\tmakeotfexe.\n\tExtended the set of characters allowed in glyph names to include + * : ~ ^ !\n\tAllow developer glyph names to start with numbers: final names must still\n\tfollow the PS spec.\n\tFixed crashing bug with more than 32K glyphs in a name-keyed font, reported\n\tby Gustavo Ferreira. Merged changes from Kahled Hosny, to remove requirement\n\tthat 'size' feature menu names have Mac platform names.\n\tAdded three new options: see above.\n\tCode maintenance in generation of the feature file parser. Rebuilt the\n\t'antler' parser generator to get rid of a compile-time warning for\n\tzzerraction, and changed featgram,g so that it would generate the current\n\tfeatgram.c, rather than having to edit the latter directly. Deleted the\n\tobject files for the 'antler' parser generator, and updated the read-me for\n\tthe parser generator.\n\tFixed really old bug: relative include file references in feature files\n\thaven't worked right since the FDK moved from Mac OS 9 to OSX. They are now\n\trelative to the parent directory of the including feature file. If that is\n\tnot found, then makeotf tries to apply the reference as relative to the main\n\tfeature file.\n\tChanged glyph name parsing rules so that \u2018friendly\u2019 glyph names can start\n\twith a sequence of numbers. Final glyph names still cannot start with a\n\tnumber.\n\n\tspot.\n\tFixed bug in dumping stylistic feature names.\n\tFixed bug proofing vertical features: needed to use vkern values. Fix contributed by Hiroki Kanou.\n\n\ttx family\n\tFix crash when using '-gx' option with source UFO fonts for 'tx' family of tools.\n\tFix crash when a UFO glyph point has a name attribute with an empty string.\n\tFix crash when a UFO font has no public.glyphOrder dict in the lib.plist file.\n\tFix really old bug in reading TTF fonts, reported by Belleve Invis. TrueType\n\tglyphs with nested component references and x/y offsets or translation get\n\tshifted.\n\tAdded new option '-fdx' to select glyphs by excluding all glyphs with the\n\tspecified FDArray indicies. This and the '-fd' option now take lists and\n\tranges of indices, as well as a single index value.\n\n\tufonormalizer\n\tAdded a command to call the ufonormalizer tool.\n\n\tMisc\n\tUpdated to latest modules for booleanOperatons, defcon (ufo3 branch),\n\tfontMath (ufo3 branch), fontTools, mutatorMath, and robofab (ufo3 branch).\n\tThe FDK no longer contains any private branches of third party modules.\n\tRebuilt the Mac OSX, Linux and Windows Python interpreters in the AFDKO,\n\tbringing the Python version up to 2.7.10. The python interpreters are now\n\tbuilt for 64 bite systems, and will not run on 32 bit systems.\n\n\nFDK. v2.5 Aug 4 2015 change number 64700.\n\tautohint.\n\tFixed bug in ufoTools.py that was harmless but annoying. Everytime that\n\t'autohint -all' was run, it added a new program name entry to the history\n\tlist in the hash map for each processed glyph. You saw this only if you\n\topened the hashmap file with a text editor, and perhaps eventually in\n\tslightly slower performance.\n\n\tcheckOutlinesUFO. \n\tFixed bug where presence of outlines with only one or two points caused a stack dump.\n\n\tmakeotf.\n\tFixed bug reported by Paul van der Laan: failed to build ttf file when\n\tthe output file name contains spaces.\n\n\tspot.\n\tFixed new bug that caused spot to crash when dumping GPOS 'size' feature in \n\tfeature file format.\n\nFDK. v2.5 July 17 2015 change number 64655.\n\tautohint.\n\tFixed bug in ufoFontTools.py which placed a new hint block after a flex\n\toperator, when it should be before.\n\tFixed new bug in hinting non-UFO fonts, introduced by switch to absolute\n\tcoordinates in the bez file interchange format.\n\tFixed bugs in using hashmap to detect previously hinted glyphs.\n\tFixed bugs in handling the issue that checkOutlinesUFO.py, which uses the\n\tdefcon library to write UFO glif files, will in some cases write glif files\n\twith different file names than they had in the default glyph layer.\n\n\tmakeotf. Fixed bug with Unicode values in the absolute path to to the font\n\thome directory.\n\tAdd support for Character Variant (cvXX) feature params.\n\tFixed bug where setting Italic style forced OS/2 version to be 4.\n\n\tspot. Added support for cvXX feature params. \n\tFixed in crash in dumping long contextual substitution strings, such as in\n\t'GentiumPlus-R.ttf'.\n\n\ttx, IS, mergeFonts rotateFont:\n\tfixed bug in handling CID glyph ID greater than 32K.\n\tChanged to write widths and FontBBox as integer values\n\tChanged to write SVG, UFO, and dump coordinates with 2 places of precision\n\twhen there is a fractional part.\n\tFixed bugs in handling the '-gx' option to exclude glyphs. Fixed problem\n\twith CID > 32K. Fixed problem when font has 65536 glyphs: all glyphs after\n\tfirst last would be excluded.\n\tFixed rounding errors in writing out decimal values to cff and t1 fonts\n\tIncreased interpreter stack depth to allow for CUBE operators (Library\n\telements) with up to 9 blend axes.\n\n\tmisc\n\tFixed windows builds: had to provide a roundf() function, and more includes for\n\tthe _tmpFile function. Fixed a few compile errors.\n\tFix bug in documentation for makeInstancesUFO\n\tFix bug in BezTools.py on Windows, when having to use a temp file\n\n\nFDK. v2.5 May 26 2015 change number 64261.\n\tautohintexe. Worked through a lot of problems with fractional coordinates.\n\tIn the previous release, autohintexe was changed to read and write\n\tfractional values. However, internal value storage used a Fixed format with\n\tonly 7 bits of precision for the value. This meant that underflow errors\n\toccurred with 2 decimal places, leading to incorrect coordinates. I was able\n\tto fix this by changing the code to use 8 bits of precision, which supports\n\t2 decimal places (but not more!) without rounding errors, but this required\n\tmany changes. The current autohint output will match the output of the\n\tprevious version for integer input values, with two exceptions. Fractional\n\tstem values will (rarely) differ in the second decimal place. The new\n\tversion will also choose different hints in glyphs which have coordinate\n\tvalues outside of the range -16256 to +16256; the previous version had a bug\n\tin calculating weights for stems.\n\n\tautohint. Changed logic for writing bez files to write absolute coordinate\n\tvalues instead of relative coordinate values. Fixed bug where truncation of\n\tdecimal values lead to cumulative errors in positions adding up to more than\n\t1 design unit over the length of a path.\n\n\ttx. Fixed bugs in handling fractional values. tx had a bug with writing\n\tfractional values that are very near an integer value for the modes -dump.\n\t-svg, and -ufo. 'tx' also always applied the logic for applying a user\n\ttransform matrix, even though the default transform is the identity\n\ttransform. This has the side-effect of rounding to integer values.\n\nFDK. v2.5 April 8 2015 change number 64043.\n\tcheckOutlinesUFO.\n\tAdded  new logic to delete any glyphs from the processed layer which are\n\tnot in the \u2018glyphs\u2019 layer.\n\n\tmakeotf.\n\tWhen building CID font, some error messages were printed twice. \n\tAdd new option -stubCmap4. This causes makeotf to build only a stub cmap 4\n\tsubtable, with just two segments. Needed only for special cases like\n\tAdobeBlank, where every byte is an issue. Windows requires a cmap format 4\n\tsubtable, but not that it be useful.\n\n\tmakeCIDFont.\n\tOutput FontDict was sized incorrectly. A function at the end adds some FontInfo keys, but did not increment the size of the dict. Legacy logic is to make the FontInfo dict be 3 larger than the current number of keys.\n\n\tmakeInstanceUFO:\n\tChanged FDK branch of mutatorMath so that kern values, glyph widths, and the\n\tBlueValues family of global hint values are all rounded to integer even when\n\tthe \u2013decimal option is used.\n\tmakeInstanceUFO now deletes the default \u2018glyphs\u2019  layer of the target\n\tinstance font before generating the instance. This solves the problem that\n\twhen glyphs are removed from the master instances, the instance font still\n\thas them.\n\tAdded a new logic to delete any glyphs from the processed layer which are\n\tnot in the \u2018glyphs\u2019 layer.\n\tRemoved the \u2018-all\u2019 option: even though mutatorMath rewrites all the glyphs,\n\tthe hash values are still valid for glyphs which have not been edited. This\n\tmeans that if the developer edits only a few glyphs in the master designs,\n\tonly those glyphs in the instances will get processed by checkOutlinesUFO\n\tand autohint .\n\n\tSupport decimal coordinate values in fonts in UFO workflow.\n\n\tcheckOutlinesUFUO (but not checkOutlines), autohint, and makeInstancesUFO\n\twill now all pass through decinal coordinates without rounding, if you use\n\tthe new option \"-decimal\". 'tx' will dump decinal values with 3 decimal places.\n\n\t'tx' already reported fractional values, but needed to be modified to report\n\tonly 3 decimal places when writing UFO glif files, and in PDF output mode -\n\tAcrobat won't read PDF files with 9 decimal places in position values.\n\n\tThis allows a developer to use a much higher precision of point positioning\n\twithout using a large em-square. The Adobe Type group found that using an\n\tem-square of other than 1000 design units still causes problems in layout\n\tand text selection line height in many apps, despite it being legal by the\n\tType 1 and CFF specifications. \n\n\tNote that code design issues in 'autohint'currently limit the decimal\n\tprecision and accuracy to 2 decimal places. 1.01 is works, 1.001 will be\n\trounded to 0.\n\n\n\nFDK. v2.5 March 3 2015 change number 63782.\n\ttx.\n\tFix bug in reading ttf's. Font version was taken from the name table, which\n\tcan include a good deal more than just the font version. Changed to read\n\tfontRevision from the head table.\n\n\tdetype1.\n\tChanged to wrap line only after an operator name, so that the coordinates\n\tfor a command and the command name would stay on one line.\n\n\tMisc.\n\totf2otc.py. Pad table data with 0's so as to align tables on a 4 boundary. Submitted by Cosimo Lupo.\n\nFDK v2.5 Feb 21 2015 change number 63718.\n\tautohint\n\tFixed a bug with processing flex hints in ufoTools.py, that caused outline distortion.\n\n\tcompareFamily.\n\tFixed bug in processing hints: it would miss fractional hints, and so\n\tfalsely report a glyph as having no hints.\n\tFixed so that it would survive a CFF font with a missing Full Name key.\n\n\n\tcheckOutlinesUFO\n\tCoordinates are written as integers, as well as being rounded.\n\tChanged save function so that only the processed glyph layer is saved, and\n\tthe default layer is not touched.\n\tChanged so that XML type is written as 'UTF-8' rather than 'utf-8'. This was\n\tactually a change in the FontTools xmlWriter.py module.\n\tFixed typos in usage and help text.\n\tFixed hash dictionary handling so that it will work with autohint, when\n\tskipping already processed glyphs.\n\tFixed false report of overlap removal when only change was removing flat curve\n\tFixed stack dump when new glyph is seen which is not in hash map of\n\tpreviously processed glyphs.\n\tAdded logic to make a reasonable effort to sort the new glyph contours in\n\tthe same order as the source glyph contours, so the final contour order will\n\tnot depend on (x,y) position. This was needed because the pyClipper library\n\t(which is used to remove overlaps) otherwise sorts the contours in (x,y)\n\tposition order, which can result in different contour order in different\n\tinstance fonts from the same set of master fonts.\n\n\tmakeInstancesUFO.\n\tChanged so that the option -i (selection of\twhich instances to build) actually works.\n\tRemoved dependence on existence of instance.txt file.\n\tChanged to call checkOutlinesUFO rather than checkOutlines\n\tRemoved hack of converting all file paths to absolute file paths: this was a\n\twork-around for a bug in robofab-ufo3k that is now fixed.\n\tRemoved all references to old instances.txt meta data file.\n\tFixed so that current dir does not have to be the parent dir of the design space file.\n\n\tMisc\n\tMerged fixes from the Github AFDKO OpenSource depot.\n\tUpdated to latest modules for defcon, fontMath, robofab, and mutatorMath.\n\tFix for Yosemite (Mac OSX 10.10) in FDK/Tools/setFDKPaths. When an FDK script \n\tis run from another Python interpreter, such as the one in Robofont, the parent\n\tPython interpreter may set the Unix environment variables PYTHONHOME and\n\tPYTHONPATH. This can cause the AFDKO Python interpreter to load some modules\n\tfrom its own library, and others from the parent interpreters library. If these\n\tare incompatible, a crash ensues.  The fix is to unset the variables PYTHONHOME\n\tand PYTHONPATH before the AFDKO interpreter is called. \n\tNote: AS a separate issue, under Mac OSX 10.10, Python calls to FDK commands\n\twill  only\twork  if  the calling app is run from the command-line (e.g:\n\t\u201copen /Applications/RoboFont.app\u201c), and the argument \"shell=\"True\" is added\n\tto the subprocess module call to open a system command. I favor also adding\n\tthe argument \"stderr=subprocess.STDOUT\", else you will not see error\n\tmessages from the Unix shell. Example:\n\t\"log = subprocess.check_output(\"makeotf -u\" , stderr=subprocess.STDOUT , shell=True)\".\n\nFDK v2.5 Dec 02 2014 change number 63408.\n\tspot.\n\tFixed error message in GSUB chain contextual 3 proof file output. spot was\n\tadding it as a shell comment to the proof output, cuasing conversion to PDF\n\tto fail.\n\n\tmakeotf.\n\tIncrease limit for glyph name length from 31 to 63 characters. This is not\n\tencouraged in shipping fonts, as there may be text engines that will not\n\taccept glyphs with more than 31 characters. This was done to allow building\n\ttest fonts to look for such cases.\n\nFDK v2.5 Sep 18 2014 change number 63209.\n\tmakeInstancesUFO.\n\tAdded new script to build instance fonts from UFO master design fonts. This\n\tuses the design space XML file exported by Superpolator 3 in order\tto\n\tdefine the design space, and the location of the masters and instance fonts\n\tin the design space. The definition of the format of this file, and the\n\tlibrary to use the design space file data, is in the OpenSource mutatorMath\n\tlibrary on GitHub, and maintained by Erik van Blokland. There are several\n\tadvantages of the Superpolator design space over the previous makeInstances\n\tscript, which uses the Type1 Multiple Master font format to hold the master\n\tdesigns. The new version:\n\t- allows different master designs and locations for each glyph\n\t- allows master designs to be arbitrarily placed in the design space, and\n\thence allows intermediate masters.\n\tIn order to use the mutatorMath library, the FDK-supplied Python now\n\tcontains the robofab, fontMath, and defcon libraries, as well as\n\tmutatorMath.\n\n\tttx. Updated to the latest branch of the fontTools library as maintained by\n\tBehdad Esfahbod on GitHub. Added a patch to cffLib.py to fix a minor problem\n\twith choosing charset format with large glyph sets.\n\n\tMisc.\n\tUpdated four Adobe-CNS1-* ordering files.\n\nFDK v2.5 Sep 8 2014 change number 63164.\n\tmakeotf.\n\tFixed MakeOTF.py to detect \"IsOS/2WidthWeightSlopeOnly\" as well as the\n\tmisspelled \"IsOS/2WidthWeigthSlopeOnly\", when processing the fontinfo file.\n\n\tChanged behavior when 'subtable' keyword is used in a lookup other than\n\tclass kerning. This condition now triggers only a warning, not a fatal\n\terror. Requested by FontForge developers.\n\n\tFixed bug which preventing making TTF fonts under Windows. This was a\n\tproblem in quoting paths used with the 'ttx' program.\n\n\tInstallation.\n\tFixed installation issues. Removed old Windows install files from the\n\tWindows AFDKOPython directory. This was causing installation of a new FDK\n\tversion under Windows to fail when the user's PATH environment variable\n\tcontained the path to the AFDKOPython directory. Also fixed command file for\n\tinvoking ttx.py.\n\n\tMisc.\n\tUpdated files used for building ideographic fonts with Unicode IVS\n\tsequences: FDK/Tools/SharedData/Adobe\n\tCmaps/Adobe-CNS1/Adobe-CNS1_sequences.txt and Adobe-Korea1_sequences.txt\n\nFDK v2.5 May 14 2014 change number 62754.\n\tIS, addGlobalColor. When using the -'bc' option, fixed bug with overlow for CID value\n\tin dumping glyph header. Fixed bug in IS to avoid crash when logic for glyphs > 72 points is used.\n\n\tmakeotfexe.\n\tFixed bug that\tapplied '-gs' option as default behavior, subsetting the source font to the \n\tlist of glyphs in the GOADB.\n\nFDK v2.5 April 30 2014 change number 62690.\n\tmakeotf\n\tWhen building output TTF font from an input TTF font, will now suppress\n\twarnings that hints are missing. Added a new option \"-shw\" to suppress\n\tthese warnings for other fonts that with unhinted glyphs. These warnings\n\tare shown only when the font is built in release mode.\n\tIf the cmap format 4 UTF16 subtable is too large to write, then makeotfexe \n\twrites a stub subtable with just the first two segments.\n\tThe last two versions allowed using '-' in glyph names. Removed this, as it\n\tbreaks using glyph tag ranges in feature files.\n\n\tmisc.\n\tUpdated copyright, and removed\n\tpatent references. Made extensive changes to the source code tree\n\tand build process, to make it easier to build the OpenSource FDK.\n\tUnfortunately, the source code for the IS and checkOutlines programs\n\tcannot be OpenSourced.\n\n\ttx, mergeFonts, rotateFonts\n\tRemoved \"-bc\" option support, as this includes patents that cannot be shared\n\tin OpenSource.\n\tAll tx-related tools now report when a font exceeds the max allowed\n\tsubroutine recursion depth.\n\n\tmergeFonts, rotateFont, tx\n\tAdded common options to all when possible: all now support ufo and svg fonts,\n\tthe '-gx' option to exclude fonts, the '-std' option for cff output, \n\tand the '-b' option for cff output.\n\nFDK v2.5 April 5 2014 change number 61944.\n\tmakeotf.\n\tAdded new option '-gs'. If the '-ga' or '-r' option is used, then '-gs'\n\twill omit from the font any glyphs which are not named in the GOADB file.\n\n\tLinux.\n\tReplaced the previous build (which worked only on 64-bit systems)\n\twith a 32 bit version, and rebuilt checkOutlines with debug messages turned off.\n\n\tttx.\n\tFixed FDK/Tools/win/ttx.cmd file so that the 'ttx' command works again.\n\nFDK v2.5 Mar 25 2014 change number 61911.\n\tmakeotf.\n\tAdd support for two new 'features' file keywords, for the OS/2 table.\n\tSpecifying 'LowerOpSize' and 'UpperOpSize' now sets the values\n\t'usLowerOpticalPointSize' and 'usUpperOpticalPointSize' in the OS/2\n\ttable, and set the table version to 5.\n\tFixed the \"-newNameID4\" option so that if the style name is\n\t\"Regular\", it is omitted for the Windows platform name ID 4, as well\n\tas in the Mac platform version. See change in build 61250.\n\n\ttx.\n\tWhen the user does not specify an output destination file path ( in\n\twhich case tx tries to write to stdout), tx now reports a fatal\n\terror if the output is a UFO font, rather than crashing.\n\ttx no longer crashes when encountering an empty \"<dict/>\" XML\n\telement.\n\n\tspot.\n\tAdded logic to dump the new fields in OS/2 table version 5,\n\tusLowerOpticalPointSize and usUpperOpticalPointSize. An example of\n\tthese values can be seen in the Windows 8 system font Sitka.ttc.\n\n\tUFO workflow.\n\tFixed autohint and checkOutlines so that the '-o\" option works, by\n\tcopying the source ufo font to the destination ufo font name, and\n\tthen running the program on the destination ufo font.\n\tFixed tools that the PostScript font name is not required.\n\n\tAdded Linux build.\n\nFDK v2.5 Feb 17 2014 change number 61250.\n\ttx.\n\tFixed rare crashing bug in reading a font file, where a charstring\n\tends exactly on a refill buffer boundary.\n\tFixed rare crashing bug in subroutinzation.\n\tFixed bug in 'tx' where it reported values for wrong glyph with more\n\tthan 32K glyphs in the font.\n\tFixed bug where 'tx' wouldn't dump a TrueType Collection font file\n\tthat contained OpenType/CFF fonts.\n\tFixed issue where it failed to read a UFO font if the UFO font lacked\n\ta fontinfo.plist file, or a psFontName entry.\n\n\tIS.\n\tFixed IS so that it no longer scales the fontDict FontMatrix, when a\n\tscale factor is supplied, unless you provide an argument to request\n\tthis.\n\n\tmakeotf.\n\tThe option '-newNameID4' now builds both Mac and Win name ID 4 using\n\tname ID 1 and 2, as specified in the OpenType spec. The style name\n\tis omitted from name ID 4 it is \"Regular\".\n\tChanged logic for specifying ValueFormat for PosPair value\n\trecords. Previous logic always used the minimum ValueFormat.\n\tSince changing ValueFormat between one PosPair record and the\n\tnext requires starting a new subtable, feature files that used\n\tmore than one position adjustment in a PosPair value record\n\toften got more subtable breaks then necessary, especially when\n\tspecifying a PairPos statement with an all zero Value Record\n\tvalue after a Pair Pos statement with a non-zero Value Record.\n\tWith the new logic, if the minimum ValueFormat for the new\n\tValueRecord is different than the ValueFormat used with the\n\tValueRecord for the previous PairPos statement, and the previous\n\tValueFormat permits expressing all the values in the current\n\tValueRecord, then the previous ValueFormat is used for the new\n\tValueRecord.\n\n\totc2otf'and 'otf2otc.\n\tAdded commands 'otc2otf'and 'otf2otc' to build OpenType collection\n\tfiles from a OpenType font files, and vice-versa.\n\n\tttx.\n\tUpdated the FontTools library to the latest build on the GitHub branch\n\tmaintained by Behdad Esfahbod, as of Jan 14 2014.\n\n\tUFO workflow.\n\tFixed bugs in ufoTools.py. The glyph list was being returned in\n\talphabetic order, even when the public.glyphOrder key was present in\n\tlib.py. Failed when the glyphOrder key was missing.\n\n\nFDK v2.5 Oct 21 2013 change number 60908.\n\tAdded some support for UFO workflow.\n\n\ttx. \n\ttx can now take UFO font as a source font file for all outputs excpet rasterization.\n\tIt prefers GLIF file from the layer\n\t'glyphs.com.adobe.type.processedGlyphs'. You can select another\n\tpreferred layer with the option '-altLayer <layer name>'. Use 'None'\n\tfor the layer name in order to have tx ignore the preferred layer\n\tand read GLIF files only from the default layer.\n\n\ttx can now write to a UFO with the option \"-ufo\". Note that it is\n\tNOT a full UFO writer. It writes only the information from the\n\tPostscript font data. If the source is an OTF or TTF font, it will\n\tnot copy any of the meta data from outside the font program table.\n\tAlso, if the destination is an already existing UFO font, tx will\n\toverwrite it with the new data: it will not merge the new font data\n\twith the old.\n\n\tFixed bugs with CID values > 32K: use to write these as negative numbers\n\twhen dumping to text formats such as AFM.\n\n\tautohint\n\tcheckOutlines.\n\n\tThese programs can now be used with UFO fonts. When the source is a\n\tUFO font, the option '-o\" to write to another font is not permitted.\n\tThe changed GLIF files are written to the layer\n\t'glyphs.com.adobe.type.processedGlyphs'. Each script maintains a hash\n\tof the width and marking path operators in order to be able to tell\n\tif the glyph data in the default layer has changed since the script\n\twas last run. This allows the scripts to process only those glyphs\n\twhich have changed since the last run. The first run of autohint can\n\ttake two minutes for a 2000 glyph font; the second run takes less then a\n\tsecond, as it does not need to process the unchanged glyphs.\n\n\tstemHist\n\tmakeotf\n\tCan now take ufo fonts as source fonts.\n\n\nFDK v2.5 Feb 26 2013 change number 60418.\n\tautohint\n\tFixed bug: autohint did not skip commented-out lines in fontinfo file.\n\n\tmakeOTF\n\tAdd support for source font files in the 'detype1' plain text format.\n\tAdded logic for \"Language\" keyword in fontinfo file. If present, \n\twill attempt to set the CID font makeotf option -\"cs\" to set he Mac script value.\n\n\tcompareFamily.\n\n\tAdded check in Family Test 10 that font really is monospaced or not when either\n\tthe FontDict isFixedPitch value or the Panose value says that it is monospaced.\n\n\tspot.\n\n\tFixed bug that kept 'palt'/'vpal' features from being applied when proofing kerning.\n\nFDK v2.5 Sept 4 2012 change number 58732.\n\tcheckOutlines.\n\n\tFixed bug where checkOutline would falsely identify the arms of an X as coincident paths,\n\twhen the arms are formed by only two paths with identical bounding boxes.\n\n\nFDK v2.5 Oct 31 2012 change number 59149.\n\tmakeotf.\n\n\tWhen building OpenType/TTF files, changed logic to copy the OS/2 table usWinAscent/Descent\n\tvalues over the head table yMax/yMin values, if different. Ths was because:\n\t- both pairs are supposed to represent the real font bounding box top and bottom,and should be equal.\n\t- the TTF fonts we use as sources for maketof are built by FontLab\n\t- FontLab defines the font bounding for TrueType fonts\n\tbox by using off-curve points as well as on-curve points.\n\tIf a path does not have on-curve points at the top and bottom extremes,\n\tthe font bounding box will end up too large. The  OS/2 table usWinAscent/Descent values,\n\thowever, are set by makeotf useing the converted T1 paths, and are more accurate. Note that\n\tI do not try to fix the head table xMin and xMax. These are much less important, as the\n\thead table yMin and yMax values are used for line layout by many apps on the\n\tMac, and I know of no applicaton for the xMin and yMin values.\n\t-changed default Unicode H CMAP file for Adobe-Japan1 CID fonts to use the UniJIS2004-UTF32-H file.\n\n\tmisc.\n\n\tAdded the CID font vertical layout files used with KozMinPr6N and KozGoPr6N:\n\tAJ16-J16.VertLayout.KozGo and AJ16-J16.VertLayout.KozMin\n\tUpdated several Unicode CMAP files, used only with CID fonts.\n\n\tAdded new Perl script, glyph-list.pl, used in building CID fonts. This replaces the \n\tthree scripts extract-cids.pl, extract-gids.pl, and extract-names.pl, which\n\thave been removed from the FDK.\n\n\nFDK v2.5 Sept 13 2012 change number 58807.\n\tmakeotf.\n\n\tDiscovered that when building TTF fonts, the GDEF table wasn't being copied\n\tto the final TTF font file. Fixed.\n\nFDK v2.5 Sept 4 2012 change number 58732.\n\tautohint.\n\n\tAdded new feature to support sets of glyphs with different\n\tbaselines. You can now specify several different sets of global\n\talignment zones and stem widths, and apply them to particular sets\n\tof glyphs within a font when hinting. See option \"-hfd\" for\n\tdocumentation.\n\n\tFix bug: allow AC to handle fonts with no BlueValues, aka alignment zones.\n\n\tFix bug: respect BlueFuzz value in font.\n\n\tFix bug: the options to suppress hint substitution and to allow changes now work.\n\n\tWhen hinting a font with no alignment zones or invalid alignment zones (and\n\twith the '-nb' option), set the arbitrary alignment zone outside the FontBBox,\n\trather than the em-square.\n\n\tcheckOutlines.\n\n\tFixed bug where very thin elements would get identified as a tiny\n\tsub path, and get deleted.\n\n\tFixed bug in determining path orientation. Logic was just following\n\tthe on-path points, and could get confused by narrow concave inner\n\tpaths, like parentheses with an inner contour following the outer\n\tcontour, as in the Cheltenham Std HandTooled faces.\n\n\tFixed bugs in determining path orientation. Previous logic did not\n\thandle multiple inner paths, or multiple contained outer paths.\n\tLogic was also dependent on correctly sorting paths by max Y of path\n\tbounding box. Replaced approximations with real bezier math\n\tto determine path bounding box accurately.\n\n\tChanged test for suspiciously large bounding box for an outline.\n\tPrevious test checked for glyph bounding box outside of fixed limits\n\tthat were based on a 1000 em square. The new test looks only for\n\tpaths that are entirely outside a rectangle based on the font's em\n\tsquare, and only reports them: it does not ever delete them. Added\n\tnew option '-b' to set the size of the design square used for the\n\ttest.\n\n\tFixed bug where it would leave a temp file on disk when processing a\n\tType1 font.\n\n\tRemoved test for coincident control points. This has not been an\n\tissue for decades. It is frequently found in fonts because designers\n\tmay choose to not use one of the two control points on a curve. The\n\tunused control point then has the same coordinates as its nearest\n\tend-point, and would to cause checkOutlines to complain.\n\n\tcompareFamily.\n\n\tSingle Test 6. Report error if there is a patent number in the copyright.\n\tAdobe discovered that a company can be sued for lots of money if it ships\n\tany product with an expired patent number.\n\n\tSingle Test 22 (check RSB and LSB of ligature vs the left and right\n\tligature components) did not parse contextual ligature substitution\n\trules correctly. Now fixed.\n\n\tFamily Test 18. Survive OTF fonts with no blue values.\n\n\tFamily Test 2 ( Check that the Compatible Family group has same name ID's in all languages.)\n\tAdded the WPF name ID's 21 and 22 to the exception list, which may not exist in all faces of a family.\n\n\tfontsetplot.\n\tFixed so it works with CID fonts. Also fixed so that widow line\n\tcontrol works right. Added new low level option for controlling\n\tpoint size of group header.\n\n\tFixed syntax of assert statements. Produced error messages on first use of\n\tthe \\*plot commands.\n\n\tkernCheck.\n\n\tFix so that it survives fonts with contextual kerning. It does not, however,\n\tprocess the kern pairs in contextual kerning.\n\n\tmakeotf.\n\n\tFixed bug in mark to ligature. You can now use an <anchor NULL> element\n\twithout having to follow it by a dummy mark class reference.\n\n\tFixed bug which limited source CID fonts to a maximum of 254 FDArray elements,\n\trather than the limit of 255 FDArray elements that is imposed by the CFF spec.\n\n\tFixed bugs in automatic GDEF generation. When now GDEF is defined,\n\tall conflicting class assignments in the GlyphClass are filtered\n\tout. If a glyph is assigned to a make class, that assignment\n\toverrides any other class assignment. Otherwise, the first\n\tassignment encountered will override a later assignment. For\n\texample, since the BASE class is assigned first, assignment to the\n\tBASE class will override later assignments to LIGATURE or COMPONENT\n\tclasses.\n\n\tFix bug in validating GDEF mark attachment rules. This now validates\n\tthe rules, rather than random memory. Had now effect on the output font,\n\tbut did sometimes produce spurious error messages.\n\n\tFix crashing bug when trying to report that a glyph being added to a mark\n\tclass is already in the mark class.\n\n\tIf the OS/2 code page bit 29 ( Macintosh encoding) is set, then also\n\tset bit 0 (Latin (1252). Under Windows XP and Windows 7, if only the\n\tMac bit is set, then the font is treated as having no encoding, and\n\tyou can't apply the font to even basic latin text.\n\n\tBy default, set Windows name ID 4 (Full Name) same as Mac named ID\n\t4, instead of setting it to the PostScript name. This is in order to\n\tmatch the current definition of the name ID 4 in the latest OpenType\n\tspec. A new option to makeotf (\"-useOldNameID4\" ), and a new key in\n\tthe fontinfo file (\"UseOldNameID4\"), will cause makeotf to still\n\twrite the PS name to Windows name ID 4.\n\n\tAdd support for WPF names, name ID 21 and 22.\n\n\tFixed attachment order of marks to bug in generating Mark to\n\tLigature ( GPOS lookup type 4). The component glyphs could be\n\treversed.\n\n\tFixed bug in auto-generating GDEF table when Mark to Mark ( GPOS\n\tlookup Type 4) feature statements are used. The target mark glyphs\n\twere registered as both GDEF GlyphClass Base and Mark glyphs, and\n\tthe former took precedence. makeotfexe now emits a warning when a\n\tglyph gets assigned to more than one class when auto-generating a\n\tGDEF table GlyphClass, and glyphs named in mark to mark lookups are\n\tassigned only to the Mark GDEF glyph class,\n\n\tFixed bugs in generating ttf fonts from ttf input. It now merges\n\tdata from the head and hhea tables, and does a better job of dealing\n\twith the post table. The previous logic made incorrect glyph names\n\twhen the glyphs with names from the Mac Std Encoding weren't all\n\tcontiguous and at the start of the font.\n\n\tAdded new option \"-cn\" for non-CID source fonts, to allow reading\n\tmultiple global font alignment zones and stem widths from the\n\tfontinfo file, and using this to build a CID-keyed CFF table with an\n\tidentity CMAP. This is experimental only; such fonts may not work in\n\tmany apps.\n\n\tFixed bug where the coverage table for an element in the match\n\tstring for a chaining contextual statement could have duplicate\n\tglyphs. This happens when a glyph is specified more than once in the\n\tclass definition for the element. The result is that the format 2\n\tcoverage table has successive ranges that overlap: the end of one\n\trange is the same glyph ID as the start of the next range. Harmless,\n\tbut triggers complaints in font validators.\n\n\tUpdated to latest Adobe CMAP files for ideographic fonts. Changed name\n\tof CMAP directories in the FDK, and logic for finding the files.\n\n\tWhen providing a GDEF feature file definition, class assignments now may be empty:\n\n.. code:: sh\n\n        table GDEF {\n            GlyphClassDef ,,,;\n        } GDEF;\n\n.\n\tis a valid statement. You just need to provide all three commas and the final\n\tcolon to define the four classes.\n\tThe following statement builds a GDEF GlyphClass with an empty Components class.\n\n.. code:: sh\n\n        table GDEF {\n            GlyphClassDef [B], [L], [M], ;\n        } GDEF;\n\n.\n\tThe glyph alias file now defines order in which glyphs are added to the\n\tend of the target font, as well as defining the subset and renaming.\n\n\tThe \"-cid <cidfontinfo>\" option for converting a font to CID can now\n\tbe used without a glyph alias file, if the source font glyphs have\n\tnames in the form \"cidXXXX\", as is output when mergeFonts is used to\n\tconvert from CID to name-keyed. If the \"-cid <cidfontinfo>\" option\n\tis used, and there is no  glyph alias file, then any glyphs in the\n\tfont without a name in the form \"cidXXXX\" will be ignored.\n\n\tspot. \n\n\tAdded error message for duplicate glyph ID's in coverage tables with format 2,\n\ta problem caused by a bug in makeotf with some Adobe fonts that use chaining\n\tcontextual substitution. Note: error message is written only if level 7 GSUB/GPOS\n\tdump is requested.\n\n\tMinor formatting changes to the GSUB/GPOS level 7 dump, to make it easier to \n\tedit this into a real feature file. \n\n\tWhen writing out feature file syntax for GPOS 'ignore pos' rules, the rule name\n\tis now written as 'ignore pos', not just 'ignore'.\n\n\tcan now output glyph names up to 128 chars (note: these are not legal\n\tPostScript glyph names, and should be encountered only in development fonts.)\n\n\tHas new option \"-ngid\" which suppresses output of the trailing glyph ID \"@<gid>\"\n\tfor TTF fonts.\n\n\tNo longer dumps the DefaultLangSys entry when there is none.\n\n\tChanged dump logic for contextual and chain contextual lookups so\n\tthat spot will not\tdump the lookups referenced by the substitution\n\tor position rules in the contextual lookups. The previous logic led\n\tto some lookups getting dumped many times, and also to infinite\n\tloops in  cases where a contextual lookup referenced other\n\tcontextual lookups.\n\n\tAdded support for Apple kern subtable format 3. Fixed old bug\n\tcausing crash when dumping font with Apple kern table from Windows\n\tOS.\n\n\tFixed error when dumping Apple kern table subtable format 0, when\n\tkern table is at end of font file.\n\n\tFixed crashing bug seen in DejaVuSansMono.ttf: spot didn't expect an anchor offset\n\tto be zero in a Base Array base Record.\n\n\tRemoved comma from lookupflag dump, to match feature file spec.\n\n\tAdded logic to support name table format 1, but it probably doesn't\n\twork, since I have been unable to find a font to test with this\n\tformat.\n\n\tFixed spelling error for \"Canadian\" in OS/2 code page fields.\n\n\tChanged dump of cmap subtable 14: hex values are uppercased, and base + UVS\n\tvalues are written in the order [ base, uvs].\n\n\tstemHist.\n\n\tAlways set the alignment zones outside the font BBox, so as to avoid having the source\n\tfont alignment zones affect collection of stem widths.\n\n\tFix bug where the glyph names reported in the stem and alignment reports were off by \n\t1 GID if the list of glyphs included the '.notdef' glyph.\n\n\ttx.\n\n\tAdded support for option \"-n\" to remove hints for writing Type1 and CFF output fonts.\n\n\tAdded new option \"+b\" to the cff output mode, to force glyph order in the output font\n\tto be the same as in the input font.\n\n\tFixed bug in flattening 'seac' operator. If the glyph components were not in the first 256 glyphs, \n\tthen the wrong glyph would be selected.\n\n\tAdded new library to read in svg fonts as a source. tx can now read\n\tall the svg formats that it can write. Handles only the path\n\toperators:\n\tM, m, L, L, C, c, Z, z,\n\tand the font and glyph attributes:\n\t'font-family', 'unicode', 'horiz-adv-x', 'glyph-name', 'missing-glyph'.\n\n\tFixed bug in converting TTF to OpenType/CFF. It flipped the sign of\n\tthe ItalicAngle in the 'post' table, which in turn flipped the sign\n\tof the OS/2 table fields ySubscriptXOffset and ySuperscriptXOffset.\n\tThis bug showed up in TTF fonts built by makeotf, as makeotf uses\n\t'tx' to build a temporary Type 1 font from the source TTF.\n\n\tFixed bug where '-usefd' option wasn't respected, when converting from CID to name-keyed fonts.\n\n\n\tMiscellaneous.\n\n\tUpdated the internal Python interpreter to version 2.7.\n\t\tAdobe Cmaps/Adobe-Japan1:\n\t\tUpdated files\n\t\tAdobe-Japan1_sequences.txt\n\t\tUniJIS-UTF32-H\n\t\tUniJIS2004-UTF32-H\n\t\tUniJISX0213-UTF32-H\n\t\tUniJISX02132004-UTF32-H\n\n\t\tFDKScripts:\n\t\tAdded several scripts relarted to CID font production.\n\t\tcmap-tool.pl\n\t\textract-cids.pl\n\t\textract-gids.pl\n\t\textract-names.pl\n\t\tfdarray-check.pl\n\t\tfix-fontbbox.pl\n\t\thintcidfont.pl\n\t\tsubr-check.pl\n\nFDK v2.5 March 4 2010 change number 25466.\n\tcharplot.\n\tThis was non-functional in the build 21898. Now fixed.\n\n\tcheckOutlines.\n\tChanged so that the test for nearly vertical or horizontal lines is invoked only if\n\tthe user specifies the options \"-i\" or \"-4\", instead of always. It turns out that this\n\ttest, when fixed automatically, causes more problems than it cures in CJK fonts.\n\n\tcompareFamily.\n\tChanged so that the default is to check stem widths and positions for bogus hints.\n\tUsed 'tx' rather than Python code for parsing charstring in order to speed up hint check.\n\tUpdated script tags and language tags according to OpenType specification version 1.6.\n\n\n\tDocumentation. In feature file syntax reference, fixed some errors and bumped the document version to 1.10.\n\tFixed  typo in example in section 4.d: lookFlag values are separated by spaces, not commas.\n\tFixed  typo in example in section 8.c on stylistic names; examples: quotes around name string need to be matching double quotes.\n\tReported by Karsten Luecke.\n\tChanged agfln.txt copyright notice to BSD license.\n\n\tmakeInstances.\n\tFixed bug where a space character in any of the path arguments caused it to fail.\n\tFixed bug that can make the FontBBox come out wrong when using Extra glyphs.\n\tFixed rounding bug that could (rarely) cause makeInstances to think that a\n\tcomposite glyph is being scaled ( which is not supported by this script) when it isn't.\n\n\tmakeotf.\n\tFixed bug in generating ttf fonts from ttf input. Previous version simply didn't work.\n\n\tspot.\n\tAdded support for \"Small\" fonts, an Adobe internal Postscript variant used for\n\tCJK fonts.\n\tAdded support for large kern tables, such as in\tthe Vista font\n\tCambria,  where the size of the kern subtable exceeds the value that\n\tcan be held in the subtable \"length\" field. In this case, the\n\t\"length\" filed must be ignored.\n\tFixed proof option to show GPOS records in GID order by default, and in\n\tlookup order only with the -f\" option. It had always been proofing the\n\tGPOS rules in lookup order since 2003.\n\tFixed double memory deallocation when dumping ttc files; this could cause a crash.\n\tWhen deccompiling GSUB table to feature file format (-t GSUB=7) and reporting skipped lookups.\n\tidentify lookups which are referenced by a chaining contextual rule.\n\n\tsfntedit.\n\tChanged final \"done\" message to be sent to stdout instead of stderr. Reported by Adam Twardoch.\n\n\tstemHist.\n\tFixed typo in help text, reported by Lee Digidea\n\t\"-all\" option wasn't working - now fixed.\n\n\ttx.\n\tAdded new option '-std' to force StdEncoding in output CFF fonts.\n\nFDK v2.5 May 1 2009 change number 21898.\n\tautohint\n\t- Fixed rare case when an rrcurveto is preceded by such a long list of\n\trlineto's that the stack limit is passed.\n\t- Fixed to restore font.pfa output file to StandardEncoding Encoding\n\tvector. Since requirements of CFF StandardEncoding differs from\n\tType1 StandardEncoding, a StandardEncoding\tEncoding vector in a\n\tType 1 font was sometimes getting converted to a custom Encoding\n\tvector when being round-tripped through the CFF format which\n\tautohint does internally.\n\n\tcheckOutlines.\n\t- Fixed random crash on Windows due to buffer overrun.\n\t- Fixed rare case when an rrcurveto is preceded by such a long list of\n\trlineto's that the stack limit is passed.\n\t- changed default logging mode to not report glyph names when there is no\n\terror report for the glyph.\n\t- Fixed to restore font.pfa output file to StandardEncoding Encoding\n\tvector.\tSince requirements of CFF StandardEncoding differs from\n\tType1 StandardEncoding, a StandardEncoding\tEncoding vector in a\n\tType 1 font was sometimes getting converted to a custom Encoding\n\tvector when being round-tripped through the CFF format which\n\tautohint does internally.\n\n\tCompareFamily. \n\t- added \"ring\" to the list of accent names used to find (accented glyph,\n\tbase glyph) pairs for \"Single Face Test 23: Warn if any accented glyphs have\n\ta width different than the base glyph.\" Reported by David Agg.\n\n\tshowfont/fontplot2\n\t- Renamed showfont to fontplot2 to avoid conflict with the Mac OSX showfont tool.\n\t- Fixed problem with showing vertical origin and advance: was not using VORG\n\tand vmtx table correctly.\n\n\tInstance Generator/FontLab scripts. Generating instance fonts from MM fonts.\n\t- Added logic to support eliminating \"working\" glyphs from instances, to\n\tsubstitute alternate glyph designs for specific instances, and to update\n\tmore Font Dict fields in the instance fonts. Added help.\n\t- add command line equivalent, \"makeInstances' which does the same thing, but\n\twhich uses the IS tool for making the snapshot. See the 'IS' entry.\n\n\tIS.\n\t- Added new tool for \"intelligent scaling\". This uses the hinting in an MM\n\tfont to keep glyph paths aligned when snapshotting from MM fonts. The\n\timprovement is most visible in glyphs with several elements that need to\n\tmaintain alignment, such as percent and perthousand. It is also useful for\n\tthe same reason when scaling fonts from a large em-square size to a smaller\n\tsize. To be effective, the source MM font must be hinted and must have global\n\talignment zones defined. The new font must be re-hinted. For instances from\n\tMM fonts especially, it is a good idea to re-do the alignment zones, as the\n\tblending of the MM base designs usually does not produce the best alignment\n\tzones or stem widths for the instance fonts. makeInstances and \"Instance\n\tGenerator\" scripts allow you to preserve these modifications when re-doing\n\tthe MM instance snapshot.\n\n\tmakeotf\n\t- Fixed generation of version 1.2 GDEF table to match the final OpenType\n\tspec version 1.6. This version is generated only when the new lookup flag\n\t'UseMarkFilteringSet\" is used.\n\t- Fixed generation of names for stylistic alternates features. There\n\twas a bug such that in some circumstances, the feature table entry\n\tfor the stylistic alternate feature would point to the wrong lookup\n\ttable.\n\t- Fixed generation of the reverse substitution lookup type. This was\n\tunintentionally disabled just before the previous release.\n\t- Fixed bugs in memory management of glyph objects. If the font built,\n\tit was correct, but this bug could cause the font to fail to build.\n\n\tspot.\n\t- Fixed to dump GDEF table version 1.2 according to the final OpenType spec\n\tversion 1.6.\n\t- Fixed feature-format dump of the lookupflags MarkAttachmentType\n\tand UseMarkFilteringSet to give a class name as an argument, rather\n\tthan a class index.\n\t- Extended the GDEF table dump to provide a more readable form.\n\t- added dump formats for htmx and vtmx to show the advance and side\n\tbearing metrics for all glyphs.\n\nFDK v2.5 Jan 22 2009 change number 21340.\n\tAGLFN. Adobe Glyph List for New Fonts. Created new version 1.7.\n\t- Reverted to the AGLFN v1.4 name and Unicode\n\tassignments for Delta, Omega, and mu. The v1.6 versions were better from a\n\tdesigner's point of view, but we can't use name-to-Unicode value mappings\n\tthat conflict with the historic usage in the Adobe Glyph List 2.0. Also\n\tremoved afii and commaaccent names. See\n\thttp://www.adobe.com/devnet/opentype/archives/glyph.html.\n\t-Dropped all the AFII names from the list: \"uni\" names are actually more\n\tdescriptive, and map to the right Unicode values under Mac OSX.\n\t-Dropped all the commaccent names from the list: \"uni\" names map to the\n\tright Unicode values under Mac OSX before 10.4.x.\n\n\tautohint.\n\t-converted AC.py script to call a command-line program rather than\n\ta Python extension module, same way makeotf works, to avoid \n\tcontinuing Python version problems.\n\t- fixed so autohint will actually emit vstem3 and hstem3 hint operators\n\t(counter control hints, which work to keep the space between three stems\n\topen and equal, as in an 'm') - this has been broken since the first FDK. It\n\twill now also look in the same directory as the source font for a file named\n\t\"fontinfo\", and will attempt to add stem3 hints to the glyph which are\n\tlisted by name in the name list for the keys \"HCounterChars\" or\n\t\"VCounterChars\".\n\t- fixed old bug where autohint would only pay attention to the bottom four\n\tof the top zone specified in the Font Dict BlueValues list. This results in\n\tmore edge hints in tall glyphs.\n\t- fixed special case when adding flex operator which could result in an endless loop \n\t-added 'logOnly' option, to allow collecting report without\n\tchanging the font.\n\t- added option to specify which glyphs to exclude from autohinting\n\t- suppressed generation and use of <font-name>.plist file, unless it is \n\tspecifically requested.\n\t- Fixed bug where an extremely complex glyph would overflow a buffer of the list of hints.\n\n\tcheckOutlines\n\t- improve overlap detection and path orientation. checkOutlines will\n\tnow work with outlines formed by overlapping many stroke elements,\n\tas is sometimes done in developing CJK fonts.\n\t- added new test for nearly vertical or horizontal lines. Fixed bug\n\tin this new code, reported by Erik van Blokland.\n\n\tCompareFamily.\n\t- For the warning that the Full Family name in the CFF table differs from\n\tthat in the name table, changed it to a \"Warning\" rather than \"Error\", and\n\texplained that there is no functional consequence.\n\t- Removed check that Mac names ID 16 and 17 do not exist, as makeotf now\n\tdoes make them. See notes in MakeOTF User Guide about this.\n\t- Fixed so it works with ttf fonts again.\n\n\tmakeotf.\n\t- removed code that added a default Adobe copyright to the name table if\n\tn copyright is specified, and removed code to add a default trademark.\n\t- added support for the lookupflag UseMarkFilteringSet. This is\n\tdefined in the proposed changes for OpenType spec 1.6, and is\n\tsubject to change in definition.\n\t- Dropped restriction that vmtx/VORG/vhea tables will only be written\n\tfor CID-keyed fonts. The presence in the feature file of either a 'vrt2' feature\n\tof of vmtx table overrides will now cause these tables to be written for both \n\tCID-keyed and name-keyed fonts.\n\t- Added warning when a feature is referenced in the aalt feature definition,\n\tbut either does not exist or does not contribute any rules to the aalt\n\tfeature. The aalt feature can take only single and alternate substitution\n\trules.\n\t- Added support for the following lookup types:\n\tGSUB type 2 Multiple Substitution\n\tGSUB type 8 Reverse Chaining Single Substitution\n\tGPOS type 3 Cursive Adjustment\n\tGPOS type 4 Mark-to-Base Attachment\n\tGPOS type 5 Mark-to-Ligature Attachment\n\tGPOS type 6 Mark-to-Mark Attachment\n\t- Added support for explicit definition of the GDEF table, and\n\tautomatic creation of the GDEF when any of the lookup flag settings\n\tfor ignoring a glyph class is used, or any mark classes are defined.\n\t- Support using TTF fonts as input, to build an OpenType/TTF font,\n\twith the limitation that glyph order and glyph names cannot be\n\tchanged. This is rather ugly under the hood, but it works. The\n\tMakeOTF.py Python script uses the tx tool to convert the TTF font to\n\tCFF data without changing glyph order or names. It then builds an\n\tOpenType/CFF font. It then uses the sfntedit tool to copy the TTF\n\tglyph data to the OpenType font, and to delete the CFF table.\n\t- Added support for building in Unicode Variation Selectors for CID-keyed fonts,\n\tusing the new cmap subtable type 14.\n\t- fixed bug with inheritance of default rules by scripts and languages\n\tin feature file feature definitions. Explicitly defined languages were\n\tonly getting default rules defined after the last script  statement, and\n\twhen a script is named, languages of the script which are not named got no\n\trules at all.\n\t- fixed bug where you couldn't run makeotf when the current directory is not\n\tthe same is the source font's home directory.\n\t- set OS/2.lastChar field to U+FFFF when using mappings beyond the BMP.\n\t- Create the Mac platform name table font menu names by the same rules\n\tas used for the Windows menu names. Add new keywords to the FontMenuNameDB file\n\tsyntax. If you use the old keywords, you get the old format; if you use the new syntax, you get \n\tname ID's 1,2 and 16 and 17 just like for the Windows platform.\n\t- Fixed bug in name table font menu names; if you entered a non-English\n\tPreferred name (\"f=\") and not a compatible family name (\"c=\"), you would end\n\tup with a name ID 16 but no name ID 17.\n\t- fixed bogus \" deprecated \"except\" syntax\" message under Windows\n\t- fixed makeotf bug where contextual pos statements without backtrack or\n\tlookahead context is writing as a non-contextual rule. Karsten Luecke\n\t10/15/2007\n\t- add new option to make stub GSUB table when no GSUB rules are preset.\n\t- added warning if the aalt feature definition references any feature tags\n\tthat either do not exist in the font, or do not contribute any rules that\n\tthe aalt feature can use.\n\n\n\tsfntdiff.\n\t- fixed so that only error messages are written to stderr; all others now written\n\tto stdout\n\t- fixed bug in dump of name tale; when processing directories rather than individual files,\n\tthe name name table text was never updated after the first file for the second directory.\n\n\tspot.\n\t- fixed option \"F to show the contextual rule sub-lookup indices, and to flag those which have already been used by another lookup.\n\t- if a left side class 0 is empty, dont report it.\n\t- For GSUB/GPOS=7 feature-file-format dump, give each class a unique name in the entire font by appending the lookup ID to the class names.\n\tIt was just LEFTCLASS_<class index>_<subtable index>, but these names are repeated in every lookup.\n\tIt is now:\nLEFTCLASS_c<class index>_s<subtable index>_l<lookup index>,\n\t- When a positioning value record has more than one value, print the full 4 item value record.\tPreviously, it would just print non-zero values. This was confusing when dumping Adobe Arabic, as you would see tow identical values at the end of some pos rules. In fact, each of these pos rule does have two adjustment values, one for x and one for y advance adjustment, that happen to be the same numeric value.\n\t- fixed to write backtrack context glyphs in the right order.\n\n\ttx.\n\t- Added option to NOT clamp design coordinates to within the design space when snapshotting\n\tMM fonts.\n\t- Add option to subroutinize the font when writing to CFF. This option is\n\tderived from the same code used by makeotfexe, but takes only about 10% the\n\tmemory and runs much faster. This should allow subroutinizing large CJK\n\tfonts that makeotfexe couldn't handle. This is new code, so please test results\n\tcarefully, i.e. if you use it, always check that the flattened glyphs\n\toutlines from the output font are identical to the flattened glyph outlines\n\tfrom the input font.\n\n\tttxn\n\t- Added options to suppress hinting in the font program, and version and build numbers.\n\n\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/adobe-type-tools/afdko",
    "keywords": "font development tools",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "afdko",
    "platform": "macosx-10.12-x86_64",
    "project_url": "https://pypi.org/project/afdko/",
    "release_url": "https://pypi.org/project/afdko/2.6.25b2/",
    "requires_dist": [
      "ufonormalizer (>=0.3.2)",
      "ufolib (>=2.1.1)",
      "mutatorMath (>=2.1.0)",
      "defcon (>=0.3.5)",
      "robofab (>=1.2.1)",
      "fontMath (>=0.4.4)",
      "booleanOperations (>=0.7.1)",
      "fonttools (>=3.19.0)"
    ],
    "requires_python": ">=2.7,",
    "summary": "Adobe Font Development Kit for OpenType",
    "version": "2.6.25b2"
  },
  "releases": {
    "2.6.25b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "00e768a450b7521037a38889b8609fad",
          "sha256": "fc45aef73999e9446af8fcfa9fb1134610ad2b797f875e688d4bc8a5dd7c55db"
        },
        "downloads": -1,
        "filename": "afdko-2.6.25b1-cp27-cp27m-macosx_10_12_x86_64.whl",
        "has_sig": false,
        "md5_digest": "00e768a450b7521037a38889b8609fad",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 6130987,
        "upload_time": "2018-01-26T22:26:47",
        "url": "https://files.pythonhosted.org/packages/46/5d/737ad0ebb4c12c3af94977dc5096a3e69631ec3a8f2d8db9ac19cd401d83/afdko-2.6.25b1-cp27-cp27m-macosx_10_12_x86_64.whl"
      }
    ],
    "2.6.25b2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3ffb68dcd1ec904e150dd0082d9aaab1",
          "sha256": "664e5d49677fe0d35f659a74d77291b7381fe8e23ac832a39b9d8a2397fc3a33"
        },
        "downloads": -1,
        "filename": "afdko-2.6.25b2-cp27-cp27m-macosx_10_12_x86_64.whl",
        "has_sig": false,
        "md5_digest": "3ffb68dcd1ec904e150dd0082d9aaab1",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 6130707,
        "upload_time": "2018-01-26T23:38:30",
        "url": "https://files.pythonhosted.org/packages/f1/5b/6f5b058ce23fca0e3d2b6df2c0e6982c8bbf13f8997c87d0bf46e145e2fd/afdko-2.6.25b2-cp27-cp27m-macosx_10_12_x86_64.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "3ffb68dcd1ec904e150dd0082d9aaab1",
        "sha256": "664e5d49677fe0d35f659a74d77291b7381fe8e23ac832a39b9d8a2397fc3a33"
      },
      "downloads": -1,
      "filename": "afdko-2.6.25b2-cp27-cp27m-macosx_10_12_x86_64.whl",
      "has_sig": false,
      "md5_digest": "3ffb68dcd1ec904e150dd0082d9aaab1",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "size": 6130707,
      "upload_time": "2018-01-26T23:38:30",
      "url": "https://files.pythonhosted.org/packages/f1/5b/6f5b058ce23fca0e3d2b6df2c0e6982c8bbf13f8997c87d0bf46e145e2fd/afdko-2.6.25b2-cp27-cp27m-macosx_10_12_x86_64.whl"
    }
  ]
}