{
  "info": {
    "author": "ryanss",
    "author_email": "ryanssdev@icloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Office/Business :: Scheduling",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Localization"
    ],
    "description": "===============\npython-holidays\n===============\n\nA fast, efficient Python library for generating country, province and state\nspecific sets of holidays on the fly. It aims to make determining whether a\nspecific date is a holiday as fast and flexible as possible.\n\n.. image:: http://img.shields.io/travis/ryanss/python-holidays.svg\n    :target: https://travis-ci.org/ryanss/python-holidays\n\n.. image:: http://img.shields.io/coveralls/ryanss/python-holidays.svg\n    :target: https://coveralls.io/r/ryanss/python-holidays\n\n.. image:: http://img.shields.io/pypi/v/holidays.svg\n    :target: https://pypi.python.org/pypi/holidays\n\n.. image:: http://img.shields.io/pypi/l/holidays.svg\n    :target: https://github.com/ryanss/python-holidays/blob/master/LICENSE\n\n\nExample Usage\n-------------\n\n.. code-block:: python\n\n    from datetime import date\n\n    import holidays\n\n    us_holidays = holidays.UnitedStates()  # or holidays.US()\n\n    date(2015, 1, 1) in us_holidays  # True\n    date(2015, 1, 2) in us_holidays  # False\n\n    # The Holiday class will also recognize strings of any format\n    # and int/float representing a Unix timestamp\n    '2014-01-01' in us_holidays  # True\n    '1/1/2014' in us_holidays    # True\n    1388597445 in us_holidays    # True\n\n    us_holidays.get('2014-01-01')  # \"New Year's Day\"\n\n    # Easily create custom Holiday objects with your own dates instead\n    # of using the pre-defined countries/states/provinces available\n    custom_holidays = holidays.HolidayBase()\n    # Append custom holiday dates by passing:\n    # 1) a dict with date/name key/value pairs,\n    custom_holidays.append({\"2015-01-01\": \"New Year's Day\"})\n    # 2) a list of dates (in any format: date, datetime, string, integer),\n    custom_holidays.append(['2015-07-01', '07/04/2015'])\n    # 3) a single date item\n    custom_holidays.append(date(2015, 12, 25))\n\n    date(2015, 1, 1) in custom_holidays  # True\n    date(2015, 1, 2) in custom_holidays  # False\n    '12/25/2015' in custom_holidays      # True\n\n    # For more complex logic like 4th Monday of January, you can inherit the\n    # HolidayBase class and define your own _populate(year) method. See below\n    # documentation for examples.\n\n\nInstall\n-------\n\nThe latest stable version can always be installed or updated via pip:\n\n.. code-block:: bash\n\n    $ pip install holidays\n\nIf the above fails, please use easy_install instead:\n\n.. code-block:: bash\n\n    $ easy_install holidays\n\n\nAvailable Countries\n-------------------\n\n=================== ======== =============================================================\nCountry             Abbr     Provinces/States Available\n=================== ======== =============================================================\nAustralia           AU       prov = **ACT** (default), NSW, NT, QLD, SA, TAS, VIC, WA\nAustria             AT       prov = B, K, N, O, S, ST, T, V, **W** (default)\nCanada              CA       prov = AB, BC, MB, NB, NL, NS, NT, NU, **ON** (default),\n                             PE, QC, SK, YU\nColombia            CO       None\nCzech               CZ       None\nDenmark             DK       None\nEngland                      None\nEuropeanCentralBank ECB,TAR  Trans-European Automated Real-time Gross Settlement (TARGET2)\nGermany             DE       BW, BY, BE, BB, HB, HH, HE, MV, NI, NW, RP, SL, SN, ST,\n                             SH, TH\nIreland                      None\nIsle of Man                  None\nMexico              MX       None\nNetherlands         NL       None\nNewZealand          NZ       prov = NTL, AUK, TKI, HKB, WGN, MBH, NSN, CAN, STC, WTL,\n                             OTA, STL, CIT\nNorthern Ireland             None\nNorway              NO       None\nPortugal            PT       None\nPortugalExt         PTE      *Portugal plus extended days most people have off*\nScotland                     None\nSpain               ES       prov = AND, ARG, AST, CAN, CAM, CAL, CAT, CVA, EXT, GAL,\n                             IBA, ICA, MAD, MUR, NAV, PVA, RIO\nUnitedKingdom       UK       None\nUnitedStates        US       state = AL, AK, AS, AZ, AR, CA, CO, CT, DE, DC, FL, GA,\n                             GU, HI, ID, IL, IN, IA, KS, KY, LA, ME, MD, MH, MA, MI,\n                             FM, MN, MS, MO, MT, NE, NV, NH, NJ, NM, NY, NC, ND, MP,\n                             OH, OK, OR, PW, PA, PR, RI, SC, SD, TN, TX, UT, VT, VA,\n                             VI, WA, WV, WI, WY\nWales                        None\n=================== ======== =============================================================\n\n\nAPI\n---\n\nclass holidays.HolidayBase(years=[], expand=True, observed=True, prov=None, state=None)\n    The base class used to create holiday country classes.\n\nParameters:\n\nyears\n    An iterable list of integers specifying the years that the Holiday object\n    should pre-generate. This would generally only be used if setting *expand*\n    to False. (Default: [])\n\nexpand\n    A boolean value which specifies whether or not to append holidays in new\n    years to the holidays object. (Default: True)\n\nobserved\n    A boolean value which when set to True will include the observed day of a\n    holiday that falls on a weekend, when appropriate. (Default: True)\n\nprov\n    A string specifying a province that has unique statutory holidays.\n    (Default: Australia='ACT', Canada='ON', NewZealand=None)\n\nstate\n    A string specifying a state that has unique statutory holidays.\n    (Default: UnitedStates=None)\n\nMethods:\n\nget(key, default=None)\n    Returns a string containing the name of the holiday(s) in date `key`, which\n    can be of date, datetime, string, unicode, bytes, integer or float type. If\n    multiple holidays fall on the same date the names will be seperated by\n    commas\n\nget_list(key)\n    Same as `get` except returns a `list` of holiday names instead of a comma\n    seperated string\n\npop(key, default=None)\n    Same as `get` except the key is removed from the holiday object\n\nupdate/append\n    Accepts dictionary of {date: name} pairs, a list of dates, or even singular\n    date/string/timestamp objects and adds them to the list of holidays\n\n\nMore Examples\n-------------\n\n.. code-block:: python\n\n    # Simplest example possible\n\n    >>> from datetime import date\n    >>> import holidays\n    >>> date(2014, 1, 1) in holidays.US()\n    True\n    >> date(2014, 1, 2) in holidays.US()\n    False\n\n    # But this is not efficient because it is initializing a new Holiday object\n    # and generating a list of all the holidays in 2014 during each comparison\n\n    # It is more efficient to create the object only once\n\n    >>> us_holidays = holidays.US()\n    >>> date(2014, 1, 1) in us_holidays\n    True\n    >> date(2014, 1, 2) in us_holidays\n    False\n\n    # Each country has two class names that can be called--a full name\n    # and an abbreviation. Use whichever you prefer.\n\n    >>> holidays.UnitedStates() == holidays.US()\n    True\n    >>> holidays.Canada() == holidays.CA()\n    True\n    >>> holidays.US() == holidays.CA()\n    False\n\n    # Let's print out the holidays in 2014 specific to California, USA\n\n    >>> for date, name in sorted(holidays.US(state='CA', years=2014).items()):\n    >>>     print date, name\n    2014-01-01 New Year's Day\n    2014-01-20 Martin Luther King, Jr. Day\n    2014-02-15 Susan B. Anthony Day\n    2014-02-17 Washington's Birthday\n    2014-03-31 C\u00e9sar Ch\u00e1vez Day\n    2014-05-26 Memorial Day\n    2014-07-04 Independence Day\n    2014-09-01 Labor Day\n    2014-10-13 Columbus Day\n    2014-11-11 Veterans Day\n    2014-11-27 Thanksgiving\n    2014-12-25 Christmas Day\n\n    # So far we've only checked holidays in 2014 so that's the only year the\n    # Holidays object has generated\n\n    >>> us_holidays.years\n    set([2014])\n    >>> len(us_holidays)\n    10\n\n    # Because by default the `expand` param is True the Holiday object will add\n    # holidays from other years as they are required.\n\n    >>> date(2013, 1, 1) in us_holidays\n    True\n    >>> us_holidays.years\n    set([2013, 2014])\n    >>> len(us_holidays)\n    20\n\n    # If we change the `expand` param to False the Holiday object will no longer\n    # add holidays from new years\n\n    >>> us_holidays.expand = False\n    >>> date(2012, 1, 1) in us_holidays\n    False\n    >>> us.holidays.expand = True\n    >>> date(2012, 1, 1) in us_holidays\n    True\n\n    # January 1st, 2012 fell on a Sunday so the statutory holiday was observed\n    # on the 2nd. By default the `observed` param is True so the holiday list\n    # will include January 2nd, 2012 as a holiday.\n\n    >>> date(2012, 1, 1) in us_holidays\n    True\n    >>> us_holidays[date(2012, 1, 1)]\n    \"New Year's Eve\"\n    >>> date(2012, 1, 2) in us_holidays\n    True\n    >>> us_holidays.get(date(2012 ,1, 2))\n    \"New Year's Eve (Observed)\"\n\n    # The `observed` and `expand` values can both be changed on the fly and the\n    # holiday list will be adjusted accordingly\n\n    >>> us_holidays.observed = False\n    >>> date(2012, 1, 2) in us_holidays\n    False\n    us_holidays.observed = True\n    >> date(2012, 1, 2) in us_holidays\n    True\n\n    # Holiday objects can be added together and the resulting object will\n    # generate the holidays from all of the initial objects\n\n    >>> north_america = holidays.CA() + holidays.US() + holidays.MX()\n    >>> north_america.get('2014-07-01')\n    \"Canada Day\"\n    >>> north_america.get('2014-07-04')\n    \"Independence Day\"\n\n    # The other form of addition is also available\n\n    >>> north_america = holidays.Canada()\n    >>> north_america += holidays.UnitedStates()\n    >>> north_america += holidays.Mexico()\n    >>> north_america.country\n    ['CA', 'US', 'MX']\n\n    # We can even get a set of holidays that include all the province- or\n    # state-specific holidays using the built-in sum() function\n    >>> a = sum([holidays.CA(prov=x) for x in holidays.CA.PROVINCES])\n    >>> a.prov\n    PROVINCES = ['AB', 'BC', 'MB', 'NB', 'NL', 'NS', 'NT', 'NU', 'ON', 'PE',\n                 'QC', 'SK', 'YU']\n\n    # Sometimes we may not be able to use the official federal statutory\n    # holiday list in our code. Let's pretend we work for a company that\n    # does not include Columbus Day as a statutory holiday but does include\n    # \"Ninja Turtle Day\" on July 13th. We can create a new class that inherits\n    # the UnitedStates class and the only method we need to override is _populate()\n\n    >>> from dateutil.relativedelta import relativedelta\n    >>> class CorporateHolidays(holidays.UnitedStates):\n    >>>     def _populate(self, year):\n    >>>         # Populate the holiday list with the default US holidays\n    >>>         holidays.UnitedStates._populate(self, year)\n    >>>         # Remove Columbus Day\n    >>>         self.pop(date(year, 10, 1) + relativedelta(weekday=MO(+2)), None)\n    >>>         # Add Ninja Turtle Day\n    >>>         self[date(year, 7, 13)] = \"Ninja Turtle Day\"\n    >>> date(2014, 10, 14) in Holidays(country=\"US\")\n    True\n    >>> date(2014, 10, 14) in CorporateHolidays(country=\"US\")\n    False\n    >>> date(2014, 7, 13) in Holidays(country=\"US\")\n    False\n    >>> date(2014 ,7, 13) in CorporateHolidays(country=\"US\")\n    True\n\n    # We can also inherit from the HolidayBase class which has an empty\n    # _populate method so we start with no holidays and must define them\n    # all ourself. This is how we would create a holidays class for a country\n    # that is not supported yet.\n\n    >>> class NewCountryHolidays(holidays.HolidayBase):\n    >>>     def _populate(self, year):\n    >>>         self[date(year, 1, 2)] = \"Some Federal Holiday\"\n    >>>         self[date(year, 2, 3)] = \"Another Federal Holiday\"\n    >>> hdays = NewCountryHolidays()\n\n    # We can also include prov/state specific holidays in our new class.\n\n    >>> class NewCountryHolidays(holidays.HolidayBase):\n    >>>     def _populate(self, year):\n    >>>         # Set default prov if not provided\n    >>>         if self.prov == None:\n    >>>             self.prov = 'XX'\n    >>>         self[date(year, 1, 2)] = \"Some Federal Holiday\"\n    >>>         if self.prov == 'XX':\n    >>>             self[date(year, 2, 3)] = \"Special XX province-only holiday\"\n    >>>         if self.prov == 'YY':\n    >>>             self[date(year, 3, 4)] = \"Special YY province-only holiday\"\n    >>> hdays = NewCountryHolidays()\n    >>> hdays = NewCountryHolidays(prov='XX')\n\n    # If you write the code necessary to create a holiday class for a country\n    # not currently supported please contribute your code to the project!\n\n    # Perhaps you just have a list of dates that are holidays and want to turn\n    # them into a Holiday class to access all the useful functionality. You can\n    # use the append() method which accepts a dictionary of {date: name} pairs,\n    # a list of dates, or even singular date/string/timestamp objects.\n\n    >>> custom_holidays = holidays.HolidaysBase()\n    >>> custom_holidays.append(['2015-01-01', '07/04/2015'])\n    >>> custom_holidays.append(date(2015, 12, 25))\n\n\nDevelopment Version\n-------------------\n\nThe latest development version can be installed directly from GitHub:\n\n.. code-block:: bash\n\n    $ pip install --upgrade https://github.com/ryanss/python-holidays/tarball/master\n\n\nRunning Tests\n-------------\n\n.. code-block:: bash\n\n    $ pip install flake8\n    $ flake8 holidays.py tests.py\n    $ python tests.py\n\n\nCoverage\n--------\n\n.. code-block:: bash\n\n    $ pip install coverage\n    $ coverage run --omit=*site-packages* tests.py\n    $ coverage report -m\n\n\nContributions\n-------------\n\n.. _issues: https://github.com/ryanss/python-holidays/issues\n.. __: https://github.com/ryanss/python-holidays/pulls\n\nIssues_ and `Pull Requests`__ are always welcome.\n\n\nLicense\n-------\n\n.. __: https://github.com/ryanss/python-holidays/raw/master/LICENSE\n\nCode and documentation are available according to the MIT License\n(see LICENSE__).",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ryanss/python-holidays",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "holidays",
    "platform": "any",
    "project_url": "https://pypi.org/project/holidays/",
    "release_url": "https://pypi.org/project/holidays/0.8.1/",
    "requires_dist": [],
    "requires_python": null,
    "summary": "Generate and work with holidays in Python",
    "version": "0.8.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "02ac351cf015b9ff5ae1af62a531b9a9",
          "sha256": "2ceb8f235c0b2ce4a6b28893de67ff4c7d43e973b40af850df6a640d313f6bcd"
        },
        "downloads": -1,
        "filename": "holidays-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "02ac351cf015b9ff5ae1af62a531b9a9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10048,
        "upload_time": "2014-08-28T12:08:29",
        "url": "https://files.pythonhosted.org/packages/f2/5d/dd15c513b2f755322046361924d193b39509d0b8ef6364f574d8e1b98674/holidays-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4a0557e99aab8fa4f2c412d9f5fa101b",
          "sha256": "b874f7383a410a4d90c939397f1d424498da730592ac22c6cd78d08e998ac47d"
        },
        "downloads": -1,
        "filename": "holidays-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4a0557e99aab8fa4f2c412d9f5fa101b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13117,
        "upload_time": "2014-08-28T11:59:28",
        "url": "https://files.pythonhosted.org/packages/d8/63/e3b0b94cb5d22d8dd24f74b6ee3e50472763e3cf69add5bdfb49eda95120/holidays-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "66d73de700bdcfe4758c967745a1e15b",
          "sha256": "1ee460312e6e4c50e615c6cd5b658c9341df83720326158f5d29a8c499becf20"
        },
        "downloads": -1,
        "filename": "holidays-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "66d73de700bdcfe4758c967745a1e15b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15282,
        "upload_time": "2014-09-04T15:04:31",
        "url": "https://files.pythonhosted.org/packages/ec/23/c58965750eee3fe61ef3824bd22975c4b21eea8ad81f949f7689938551b0/holidays-0.3.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ef45e817a15fcc503730c78ef99025fd",
          "sha256": "93e1d2db5e6006717d6639018a3fcae2739e1d858202eb2455b2d2713d34a52b"
        },
        "downloads": -1,
        "filename": "holidays-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ef45e817a15fcc503730c78ef99025fd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15195,
        "upload_time": "2014-10-09T14:56:46",
        "url": "https://files.pythonhosted.org/packages/f2/b6/2114d979965551acb498e6549ca222f37b04b90d068d4125d27b290b118e/holidays-0.3.1.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "334d334ae3e9727ab69c4267174a4822",
          "sha256": "398b9c4d918c4058102366b124f073493c82db27bd1302334091736c9f11b1e8"
        },
        "downloads": -1,
        "filename": "holidays-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "334d334ae3e9727ab69c4267174a4822",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31645,
        "upload_time": "2015-10-04T22:37:52",
        "url": "https://files.pythonhosted.org/packages/2e/6a/eef072535ffa294298b491579d86854e9a3351fc10c382be25aab4d30c79/holidays-0.4.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1b3e3678e705480c40688701d3c69760",
          "sha256": "c5c7e86d86cbcf9cb1f7625c8e794f9975e58f323a30a527a9ef76eabc215781"
        },
        "downloads": -1,
        "filename": "holidays-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1b3e3678e705480c40688701d3c69760",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 34623,
        "upload_time": "2016-01-05T15:10:19",
        "url": "https://files.pythonhosted.org/packages/b7/11/38976c635e73ae4510fff98a7c4d0025ab4c9b8b8f2ca3edb138cf02881a/holidays-0.4.1.tar.gz"
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5cd5c3f46ea76e0dfcf7ac9bdd8b33c5",
          "sha256": "3bb68416fd91a027282919c0e5e0f695c2df56c35775c7788b6253863330295a"
        },
        "downloads": -1,
        "filename": "holidays-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5cd5c3f46ea76e0dfcf7ac9bdd8b33c5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38315,
        "upload_time": "2016-09-05T12:47:56",
        "url": "https://files.pythonhosted.org/packages/5e/2b/de89202df56d7199005870818dcfebe88e16619c990df552e488e36c5eef/holidays-0.5.tar.gz"
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ae8209588161b71f1e31a7315a813e91",
          "sha256": "1fec5342e06e8303111a4b73c7ab56a58202d48d7727011141d3b2d15a3897bb"
        },
        "downloads": -1,
        "filename": "holidays-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "ae8209588161b71f1e31a7315a813e91",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 40117,
        "upload_time": "2016-11-18T16:11:01",
        "url": "https://files.pythonhosted.org/packages/42/fe/ff65c6b9b9f5132a78a278d2e25ff67d94c45b1b11095124f8f807b66e50/holidays-0.6.tar.gz"
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bab5f85222a15b635a91f289831517cf",
          "sha256": "076d39d83b7a5c8d41499b0df00e645742bc3061c231f22faa63399d60fb5bf2"
        },
        "downloads": -1,
        "filename": "holidays-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "bab5f85222a15b635a91f289831517cf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41884,
        "upload_time": "2017-01-12T14:02:45",
        "url": "https://files.pythonhosted.org/packages/72/c4/7cf4f6b01273c0e28b3e4a36e4ccf620082997b463db9dbd166d0d1584d6/holidays-0.7.tar.gz"
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2eb1497554ade986088826add42f3a1e",
          "sha256": "1b9786ffd4d7e1517cd5660bb1ce212f56de9fae1a9af65f2c895510d1bff38f"
        },
        "downloads": -1,
        "filename": "holidays-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "2eb1497554ade986088826add42f3a1e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 42326,
        "upload_time": "2017-02-03T12:50:24",
        "url": "https://files.pythonhosted.org/packages/6d/84/1a0c54c1b5b62925c40c6f32b3db2ad1163c18f4e98efcb4a95a9e17351e/holidays-0.8.tar.gz"
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3823223396be183c985f99c001a7cb57",
          "sha256": "b94bff84fe85dc351af2cdec5f2c57aad80b47ff95bb16f1a14e81f4f0994810"
        },
        "downloads": -1,
        "filename": "holidays-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3823223396be183c985f99c001a7cb57",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43807,
        "upload_time": "2017-02-12T20:45:43",
        "url": "https://files.pythonhosted.org/packages/ad/72/10fd630ee8a7b7024c588f28bd6d7a9f609a7df25aed16fc01725edb8b13/holidays-0.8.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "3823223396be183c985f99c001a7cb57",
        "sha256": "b94bff84fe85dc351af2cdec5f2c57aad80b47ff95bb16f1a14e81f4f0994810"
      },
      "downloads": -1,
      "filename": "holidays-0.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3823223396be183c985f99c001a7cb57",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 43807,
      "upload_time": "2017-02-12T20:45:43",
      "url": "https://files.pythonhosted.org/packages/ad/72/10fd630ee8a7b7024c588f28bd6d7a9f609a7df25aed16fc01725edb8b13/holidays-0.8.1.tar.gz"
    }
  ]
}