{
  "info": {
    "author": "Michael Williamson",
    "author_email": "mike@zwobble.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Precisely: better assertions for Python tests\n=============================================\n\nPrecisely allows you to write precise assertions so you only test the behaviour you're really interested in.\nThis makes it clearer to the reader what the expected behaviour is,\nand makes tests less brittle.\nThis also allows better error messages to be generated when assertions fail.\nInspired by Hamcrest_.\n\n.. _Hamcrest: http://hamcrest.org\n\nFor instance, suppose we want to make sure that a ``unique`` function removes duplicates from a list.\nWe might write a test like so:\n\n.. code:: python\n\n    from precisely import assert_that, contains_exactly\n    \n    def test_unique_removes_duplicates():\n        result = unique([\"a\", \"a\", \"b\", \"a\", \"b\"])\n        assert_that(result, contains_exactly(\"a\", \"b\"))\n\nThe assertion will pass so long as ``result`` contains ``\"a\"`` and ``\"b\"`` in any order,\nbut no other items.\nUnlike, say, ``assert result == [\"a\", \"b\"]``, our assertion ignores the ordering of elements.\nThis is useful when:\n\n* the ordering of the result is non-determistic, such as when using ``set``.\n\n* the ordering isn't specified in the contract of ``unique``.\n  If we assert a particular ordering, then we'd be testing the implementation rather than the contract.\n\n* the ordering is specified in the contract of ``unique``,\n  but the ordering is tested in a separate test case.\n\nWhen the assertion fails,\nrather than just stating the two values weren't equal,\nthe error message will describe the failure in more detail.\nFor instance, if unique has the value ``[\"a\", \"a\", \"b\"]``,\nwe'd get the failure message::\n\n    Expected: iterable containing in any order:\n      * 'a'\n      * 'b'\n    but: had extra elements:\n      * 'a'\n\nInstallation\n------------\n\n::\n\n    pip install precisely\n\nAPI\n---\n\nUse ``assert_that(value, matcher)`` to assert that a value satisfies a matcher.\n\nMany matchers are composed of other matchers.\nIf they are given a value instead of a matcher,\nthen that value is wrapped in ``equal_to()``.\nFor instance, ``has_attrs(name=\"bob\")`` is equivalent to ``has_attrs(name=equal_to(\"bob\"))``.\n\n* ``equal_to(value)``: matches a value if it is equal to ``value`` using ``==``.\n\n* ``has_attrs(**kwargs)``: matches a value if it has the specified attributes.\n  For instance:\n  \n  .. code:: python\n  \n      assert_that(result, has_attrs(id=is_a(int), name=\"bob\"))\n\n* ``contains_exactly(*args)``: matches an iterable if it has the same elements in any order.\n  For instance:\n  \n  .. code:: python\n  \n      assert_that(result, contains_exactly(\"a\", \"b\"))\n      # Matches [\"a\", \"b\"] and [\"b\", \"a\"],\n      # but not [\"a\", \"a\", \"b\"] nor [\"a\"] nor [\"a\", \"b\", \"c\"]\n\n* ``is_sequence(*args)``: matches an iterable if it has the same elements in the same order.\n  For instance:\n  \n  .. code:: python\n  \n      assert_that(result, is_sequence(\"a\", \"b\"))\n      # Matches [\"a\", \"b\"] but not [\"b\", \"a\"]\n\n* ``anything``: matches all values.\n\n* ``instance_of(type)``: matches any value where ``isinstance(value, type))``.\n\n* ``all_of(*matchers)``: matchers a value if all sub-matchers match.\n  For instance:\n  \n  .. code:: python\n  \n      assert_that(result, all_of(\n          is_instance(User),\n          has_attrs(name=\"bob\"),\n      ))\n\n* ``all_of(*matchers)``: matchers a value if any sub-matcher matches.\n  For instance:\n  \n  .. code:: python\n  \n      assert_that(result, any_of(\n          equal_to(\"x=1, y=2\"),\n          equal_to(\"y=2, x=1\"),\n      ))\n\n* ``has_feature(name, extract, matcher)``: matches ``value`` if ``extract(value)`` matches ``matcher``.\n  For instance:\n  \n  .. code:: python\n  \n      assert_that(result, has_feature(\"len\", len, equal_to(2)))\n  \n  For clarity, it often helps to extract the use of ``has_feature`` into its own function:\n  \n  .. code:: python\n  \n      def has_len(matcher):\n          return has_feature(\"len\", len, matcher)\n      \n      assert_that(result, has_len(equal_to(2)))\n\nAlternatives\n------------\n\nPyHamcrest is another Python implemention of matchers. I prefer the error\nmessages that this project produces, but feel free to judge for yourself:\n\n.. code:: python\n\n    # Precisely\n    from precisely import assert_that, is_sequence, has_attrs\n\n    assert_that(\n        [\n            User(\"bob\", \"jim@example.com\"),\n            User(\"jim\", \"bob@example.com\"),\n        ],\n        is_sequence(\n            has_attrs(username=\"bob\", email_address=\"bob@example.com\"),\n            has_attrs(username=\"jim\", email_address=\"jim@example.com\"),\n        )\n    )\n\n    # Expected: iterable containing in order:\n    #   0: attributes:\n    #     * username: 'bob'\n    #     * email_address: 'bob@example.com'\n    #   1: attributes:\n    #     * username: 'jim'\n    #     * email_address: 'jim@example.com'\n    # but: element at index 0 mismatched:\n    #   * attribute email_address: was 'jim@example.com'\n\n    # Hamcrest\n    from hamcrest import assert_that, contains, has_properties\n\n    assert_that(\n        [\n            User(\"bob\", \"jim@example.com\"),\n            User(\"jim\", \"bob@example.com\"),\n        ],\n        contains(\n            has_properties(username=\"bob\", email_address=\"bob@example.com\"),\n            has_properties(username=\"jim\", email_address=\"jim@example.com\"),\n        )\n    )\n\n    # Hamcrest error:\n    # Expected: a sequence containing [(an object with a property 'username' matching 'bob' and an object with a property 'email_address' matching 'bob@example.com'), (an object with a property 'username' matching 'jim' and an object with a property 'email_address' matching 'jim@example.com')]\n    #      but: item 0: an object with a property 'email_address' matching 'bob@example.com' property 'email_address' was 'jim@example.com'",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/mwilliamson/python-precisely",
    "keywords": "matcher matchers",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "precisely",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/precisely/",
    "release_url": "https://pypi.org/project/precisely/0.1.3/",
    "requires_python": null,
    "summary": "Rich matchers, useful for assertions in tests. Inspired by Hamcrest.",
    "version": "0.1.3"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bf99eb399c6b4e310a14b93dfaa67676",
          "sha256": "c3b16befc9db547a89b8d5b3b0186ae7ed95d0ef3a7830faa78c563732e741cd"
        },
        "downloads": 287,
        "filename": "precisely-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bf99eb399c6b4e310a14b93dfaa67676",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5333,
        "upload_time": "2016-12-27T11:30:30",
        "url": "https://files.pythonhosted.org/packages/b1/9b/945680710cb9dc3c59623d13d7bb7fe6e54ef99d64435d9ce6f8c9a185e5/precisely-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a6e2c6096e7480799340d99e0efd72db",
          "sha256": "edff20d2efbf8cdcb4424cbddaa00a78b9a611d821aefbd7ecdde75668f3e628"
        },
        "downloads": 283,
        "filename": "precisely-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a6e2c6096e7480799340d99e0efd72db",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5537,
        "upload_time": "2016-12-27T14:03:23",
        "url": "https://files.pythonhosted.org/packages/ac/01/167b88a15fc0b7cbeabc438b8b774fda876ed1d29abe25ce89f0df7a2fd3/precisely-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4a22b2d728d74d28adc1e6fca09f1dd2",
          "sha256": "d5d7899a816250a3390174e6449a3c20b9184a6af2fd5480ff904418cb4ee7d5"
        },
        "downloads": 279,
        "filename": "precisely-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4a22b2d728d74d28adc1e6fca09f1dd2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5680,
        "upload_time": "2016-12-27T19:44:56",
        "url": "https://files.pythonhosted.org/packages/e1/2c/c1500cd3f3e5c75b892686fc1812e43667cf99cc07df5738ee8507247e99/precisely-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1160fc528720247988292eb645de5e90",
          "sha256": "e2eded73dca527a8ac00a299c5b87f5961c257985e911d0dfd03cc9f17215d26"
        },
        "downloads": 12,
        "filename": "precisely-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1160fc528720247988292eb645de5e90",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5734,
        "upload_time": "2017-02-19T21:25:58",
        "url": "https://files.pythonhosted.org/packages/aa/c8/c551b6d1b23970d855636960a474a0199b9ff94c1cca2391ef31fba54f9b/precisely-0.1.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1160fc528720247988292eb645de5e90",
        "sha256": "e2eded73dca527a8ac00a299c5b87f5961c257985e911d0dfd03cc9f17215d26"
      },
      "downloads": 12,
      "filename": "precisely-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "1160fc528720247988292eb645de5e90",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5734,
      "upload_time": "2017-02-19T21:25:58",
      "url": "https://files.pythonhosted.org/packages/aa/c8/c551b6d1b23970d855636960a474a0199b9ff94c1cca2391ef31fba54f9b/precisely-0.1.3.tar.gz"
    }
  ]
}