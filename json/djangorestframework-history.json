{
  "info": {
    "author": "Nabil Jamaleddine",
    "author_email": "me@njamaleddine.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "The MIT License (MIT)\n\nCopyright (c) 2017 Nabil Jamaleddine\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nDescription-Content-Type: UNKNOWN\nDescription: # Django REST Framework History\n        \n        [![build-status-image]][travis]\n        [![pypi-version]][pypi]\n        \n        Add Django admin style history to your Django REST Framework API\n        \n        \n        ## Overview\n        \n        **Django REST Framework History** provides basic [Django admin style history][django-admin-log-entry] outside of the Django admin. \n        \n        ### Features\n        * Simple `ModelSerializer` and `ModelViewSet` integration\n        * Overrides `create` and `update` to add `LogEntry` objects for the corresponding models\n        * Adds a `/history` `detail_route` to a resource. **Ex:** `/entries/:id/history`\n        \n        ## Disclaimer\n        \n        Though the ideas below are very interesting, this project makes no claims to attempt them at all. But that's not to say this project won't attempt to implement them in the future.\n        \n        * [**Event Sourcing**][event-sourcing]\n        * [Provide rich model history like **Django Reversion**][django-reversion]\n        \n        ## Requirements\n        \n        * Python (2.7, 3.4, 3.5, 3.6)\n        * Django (1.10, 1.11, 2.0 alpha*)\n        * Django REST Framework (3.4, 3.5, 3.6, 3.7)\n        \n        > **Note**\n        >\n        > Legacy Python (2.7) is being dropped by Django 2.0, so only 1.10/1.11 will support it\n        > \n        > Django 2.0 only supports Python 3.4+ and DRF 3.7+\n        \n        \n        ## Installation\n        \n            pip install djangorestframework-history\n        \n        ## Usage\n        \n        Say you have a model, let's call it BaseModel:\n        ```python\n        from django.db import models \n        \n        class BaseModel(models.Model):\n            text = models.CharField(max_length=20)\n        ```\n        \n        You'll want to create a `BaseModelSerializer` for `BaseModel` that inherits from `LoggedModelSerializer` so that every time a `BaseModel` is created or updated using the API, a [`LogEntry`][django-admin-log-entry] object is also created. [`LogEntry`][django-admin-log-entry] objects will track additions/changes/deletions for a model.\n        \n        ```python\n        # serializers.py\n        from rest_framework_history.serializers import LoggedModelSerializer\n        \n        class BaseModelSerializer(LoggedModelSerializer):\n            class Meta:\n                model = BaseModel\n                fields = ('text',)\n        ```\n        \n        Then define a `ViewSet` where you can see a paginated list of all `LogEntry` objects for a `BaseModel`:\n        \n        ```python\n        # viewsets.py\n        from rest_framework_history.viewsets import LoggedModelViewSet\n        from .models import BaseModel\n        from .serializers import BaseModelSerializer \n        \n        class BaseModelViewSet(LoggedModelViewSet):\n            queryset = BaseModel.objects.all()\n            serializer_class = BaseModelSerializer\n        ```\n        \n        You can also use the `LogEntrySerializer` to nest `LogEntry` objects on another serialized object, but you'll have to make use of [`Django generic relations`][django-generic-relations] and add a `logs` field to `prefetch_related` to avoid incurring `n+1` queries if you decide to include this nested serializer in a [ListAPIView/ListModelMixin][drf-list-api-view] **ex:** `/basemodels`.\n        \n        ```python\n        # models.py\n        from django.db import models\n        from django.contrib.contenttypes.fields import GenericRelation\n        from django.contrib.admin.models import LogEntry\n        \n        class BaseModel(models.Model):\n            text = models.CharField(max_length=20)    \n            logs = GenericRelation(LogEntry)\n        \n        # serializers.py\n        from rest_framework_history.serializers import LogEntrySerializer, LoggedModelSerializer\n        from .models import BaseModel\n        \n        class BaseModelSerializer(LoggedModelSerializer):\n            logs = LogEntrySerializer()\n        \n            class Meta:\n                model = BaseModel\n                fields = ('text', 'logs')\n        \n        # viewsets.py\n        from rest_framework_history.viewsets import LoggedModelViewSet\n        from .models import BaseModel\n        from .serializers import BaseModelSerializer\n        \n        class BaseModelViewSet(LoggedModelViewSet):\n            queryset = BaseModel.objects.all().prefetch_related('logs')\n            serializer_class = BaseModelSerializer\n        ```\n        \n        \n        [build-status-image]: https://secure.travis-ci.org/njamaleddine/django-rest-framework-history.svg?branch=master\n        [travis]: http://travis-ci.org/njamaleddine/django-rest-framework-history?branch=master\n        [pypi-version]: https://img.shields.io/pypi/v/djangorestframework-history.svg\n        [pypi]: https://pypi.python.org/pypi/djangorestframework-history\n        \n        [django-admin-log-entry]: https://docs.djangoproject.com/en/dev/ref/contrib/admin/#logentry-objects\n        [drf-list-api-view]: http://www.django-rest-framework.org/api-guide/generic-views/#listapiview\n        [event-sourcing]: https://martinfowler.com/eaaDev/EventSourcing.html\n        [django-reversion]: https://github.com/etianen/django-reversion\n        [django-generic-relations]: https://docs.djangoproject.com/en/dev/ref/contrib/contenttypes/#django.contrib.contenttypes.fields.GenericRelation\n        \nKeywords: django rest api djangorestframework history\nPlatform: UNKNOWN\nClassifier: Development Status :: 3 - Alpha\nClassifier: Environment :: Web Environment\nClassifier: Intended Audience :: Developers\nClassifier: Framework :: Django\nClassifier: Framework :: Django :: 1.8\nClassifier: Framework :: Django :: 1.9\nClassifier: Framework :: Django :: 1.10\nClassifier: Framework :: Django :: 1.11\nClassifier: License :: OSI Approved :: MIT License\nClassifier: Operating System :: OS Independent\nClassifier: Programming Language :: Python\nClassifier: Programming Language :: Python :: 2\nClassifier: Programming Language :: Python :: 2.7\nClassifier: Programming Language :: Python :: 3\nClassifier: Programming Language :: Python :: 3.3\nClassifier: Programming Language :: Python :: 3.4\nClassifier: Programming Language :: Python :: 3.5\nClassifier: Programming Language :: Python :: 3.6\nClassifier: Topic :: Internet :: WWW/HTTP\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/njamaleddine/django-rest-framework-history",
    "keywords": "",
    "license": "# License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djangorestframework-history",
    "platform": "",
    "project_url": "https://pypi.org/project/djangorestframework-history/",
    "release_url": "https://pypi.org/project/djangorestframework-history/0.0.4/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Add simple Django admin style history to your REST API",
    "version": "0.0.4"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "04efbc004610562d90ac398e24385f42",
          "sha256": "cc44c5d8af94112facdfed0d47ca74f36e5396d15f0ee454915ef4123ca000aa"
        },
        "downloads": -1,
        "filename": "djangorestframework_history-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04efbc004610562d90ac398e24385f42",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 8253,
        "upload_time": "2017-11-01T01:56:29",
        "url": "https://files.pythonhosted.org/packages/b2/b8/f3fcbdcb3003d2f17ada1b6cb4296c6432df07045236b307c5822bc6ae36/djangorestframework_history-0.0.1-py2.py3-none-any.whl"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8417700b832e26843eea2ff4d1855452",
          "sha256": "20114f86a8dd53ccede8b85f756ac5253e2e6f1e25f52d6e5bb2b2674544e099"
        },
        "downloads": -1,
        "filename": "djangorestframework_history-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8417700b832e26843eea2ff4d1855452",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 10504,
        "upload_time": "2017-11-04T22:51:39",
        "url": "https://files.pythonhosted.org/packages/62/32/1bf08e1eb181ca12bac12f19239381c049de261aefe13114ce2870b5127c/djangorestframework_history-0.0.2-py2.py3-none-any.whl"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5aba76f4cb157acc504533e48862d3f2",
          "sha256": "6b1e915013a3dd1bbcd6c709172fb0c4b3d57b5d19d015b7c5fe4ee711144ec7"
        },
        "downloads": -1,
        "filename": "djangorestframework_history-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5aba76f4cb157acc504533e48862d3f2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 10807,
        "upload_time": "2017-11-05T14:33:36",
        "url": "https://files.pythonhosted.org/packages/54/86/7b5a853304584e0bdc36f444546e1d6dda1b47dbb974b654c31e30a888da/djangorestframework_history-0.0.3-py2.py3-none-any.whl"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bf477a34cbdcd90216a7ec7a0afa8479",
          "sha256": "ed24784517af58c91b8841c9206638150d1bf7c92b05d4dac79725530121fc91"
        },
        "downloads": -1,
        "filename": "djangorestframework_history-0.0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bf477a34cbdcd90216a7ec7a0afa8479",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 10808,
        "upload_time": "2017-11-07T03:42:19",
        "url": "https://files.pythonhosted.org/packages/0b/d7/24c251a57a70bb3d99f8292c7403bf5a1a87039891f905473430ba089b79/djangorestframework_history-0.0.4-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "bf477a34cbdcd90216a7ec7a0afa8479",
        "sha256": "ed24784517af58c91b8841c9206638150d1bf7c92b05d4dac79725530121fc91"
      },
      "downloads": -1,
      "filename": "djangorestframework_history-0.0.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "bf477a34cbdcd90216a7ec7a0afa8479",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 10808,
      "upload_time": "2017-11-07T03:42:19",
      "url": "https://files.pythonhosted.org/packages/0b/d7/24c251a57a70bb3d99f8292c7403bf5a1a87039891f905473430ba089b79/djangorestframework_history-0.0.4-py2.py3-none-any.whl"
    }
  ]
}