{
  "info": {
    "author": "Antony Lee",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: IPython",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: System :: Shells"
    ],
    "description": "|Python35| |MATLAB2016b|\n\n.. |Python35| image:: https://img.shields.io/badge/python-3.5%2B-blue.svg\n.. |MATLAB2016b| image:: https://img.shields.io/badge/MATLAB-2016b%2B-blue.svg\n\nA Jupyter kernel for MATLAB\n===========================\n\nThis kernel requires `Jupyter\n<http://jupyter.readthedocs.org/en/latest/install.html>`_\nwith Python 3.5+, and the `MATLAB engine for Python\n<https://www.mathworks.com/help/matlab/matlab-engine-for-python.html>`_ R2016b+\n(this release provides a much better completion API), which needs to be\ninstalled first.\n\nInstall with ``python -mpip install imatlab`` (from PyPI) or ``python -mpip\ninstall git+https://github.com/imatlab/imatlab`` (from Github); then run\n``python -mimatlab install`` to register the kernel spec.  In the absence of\nadministrator rights, the ``--user`` flag should be added to any of these\ncommands.\n\nTo use it, run one of::\n\n    $ jupyter notebook\n    # In the notebook interface, select Matlab from the 'New' menu\n    $ jupyter qtconsole --kernel imatlab\n    $ jupyter console --kernel imatlab\n\n\nInline Graphics\n---------------\n\nTo use Plotly inline graphics in the notebook, the `Plotly MATLAB API\n<https://plot.ly/matlab>`_ must be installed.\n\n1. Clone `plotly/MATLAB-Online <https://github.com/plotly/MATLAB-Online>`_ or\n   download the `zip <https://github.com/plotly/MATLAB-api/archive/master.zip>`_.\n2. Recursively add the resulting extracted folders to the MATLAB path:\n   ``addpath(genpath(<Plotly MATLAB API path>))``.\n3. In MATLAB, run: ``getplotlyoffline('https://cdn.plot.ly/plotly-latest.min.js')``\n   to copy the JavaScript files.\n4. Call ``imatlab_export_fig('fig2plotly')`` at the beginning of the notebook.\n\nOther valid values for the exporter (which do not rely on Plotly) are\n``'print-png'`` and ``'print-jpeg'``, which create static images in the\nrespective formats.\n\nThe default size of exported figures, as well as whether to display figures\nbefore exporting them, should be set using standard figure properties (``set(0,\n'defaultpaperposition', [left, bottom, width, height])``, etc.).\n\nFor further customization, you may override the ``imatlab_export_fig`` function\n(the default version is provided by ``imatlab`` and added to the MATLAB path).\nThis function is called with no arguments after each notebook cell is executed,\nwhile the current directory is temporarily switched to a temporary folder; this\nfunction should return a cell array of filenames with ``.html``, ``.png``, or\n``.jpg``/``.jpeg`` extension.  The corresponding files, which should have been\ncreated by the function, will be loaded into the notebook.\n\n\nEnvironment variables\n---------------------\n\n``IMATLAB_CONNECT``\n   If this environment variable is set to a valid MATLAB identifier, the kernel\n   will attempt to connect to the shared engine with that name.  If it is set\n   to another non-empty value, it will connect to any existing shared engine.\n\n``IMATLAB_CD``\n   If this environment variable is set, the engine's working directory will be\n   changed to match the kernel's working directory.\n\n``IMATLAB_CONNECT`` needs to be set outside of MATLAB (as it is checked before\nthe connection to the engine is made).  Other environment variables can be set\neither outside of MATLAB (before starting the kernel) or from within MATLAB\n(using ``setenv``).\n\nAsynchronous output\n-------------------\n\nA construct such as ``1, pause(1), 2`` will output ``1`` and ``2`` with a one\nsecond interval on Linux and OSX, but together after a one second wait on\nWindows.  PRs improving Windows support are welcome.\n\nAsynchronous output using ``timer`` objects seem to be completely unsupported\nby the MATLAB engine for Python.\n\nMATLAB debugger\n---------------\n\nThe MATLAB debugger is cleared (``dbclear all``) before each execution, as\ninteractive input is not supported by the engine API.\n\nDifferences with the Calysto MATLAB Kernel\n------------------------------------------\n\n- The completion system is much more robust, by relying on the new API\n  available in MATLAB 2016b.\n- History is read from and written to MATLAB's own ``History.xml``, and thus\n  shared with standard MATLAB sessions.  Note that if the file does not exist\n  (e.g. if the **don't save history file** option is set, or in a console-only\n  setup), history not be reloaded into later sessions.  (A PR for loading\n  ``history.m`` instead would be welcome; it would need to properly parse\n  multiline inputs in that file.)\n- Synchronous output is supported on Linux and OSX (see above).\n- There is no magics systems, as MATLAB already provides many functions for\n  this purpose (``cd``, ``edit``, etc.).\n- Inline graphics can be based on ``plotly``, and thus interactive.\n\nTests\n-----\n\nRun tests with `python -munittest` after installing the kernel.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/imatlab/imatlab",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "imatlab",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/imatlab/",
    "release_url": "https://pypi.org/project/imatlab/0.2/",
    "requires_python": ">=3.5",
    "summary": "",
    "version": "0.2"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3e08ca8ef35ba6f7e8c20f235d2364fc",
          "sha256": "6a683df7f67335869e667bf30268c74b4a12799c3ed2b3ba5a7052ffc48abf61"
        },
        "downloads": 11,
        "filename": "imatlab-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3e08ca8ef35ba6f7e8c20f235d2364fc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 8370,
        "upload_time": "2017-01-12T08:31:09",
        "url": "https://files.pythonhosted.org/packages/ae/90/c476da536c3c3e30180fde7d84ecac93594da5a73af595b1172cc598803a/imatlab-0.1-py3-none-any.whl"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1e5ffe09a8232e83977954aa18d0e191",
          "sha256": "dbbec74af812f0d878d77bd497547320151462f96927785ec538747d7a74095c"
        },
        "downloads": 35,
        "filename": "imatlab-0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1e5ffe09a8232e83977954aa18d0e191",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 14490,
        "upload_time": "2017-04-04T20:23:42",
        "url": "https://files.pythonhosted.org/packages/e3/b9/91919f4a37cafb88127bbf8675013a56bb01a52dbc7fa918ea456c0bb235/imatlab-0.2-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1e5ffe09a8232e83977954aa18d0e191",
        "sha256": "dbbec74af812f0d878d77bd497547320151462f96927785ec538747d7a74095c"
      },
      "downloads": 35,
      "filename": "imatlab-0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1e5ffe09a8232e83977954aa18d0e191",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 14490,
      "upload_time": "2017-04-04T20:23:42",
      "url": "https://files.pythonhosted.org/packages/e3/b9/91919f4a37cafb88127bbf8675013a56bb01a52dbc7fa918ea456c0bb235/imatlab-0.2-py3-none-any.whl"
    }
  ]
}