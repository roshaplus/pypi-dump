{
  "info": {
    "author": "Piper Merriam",
    "author_email": "pipermerriam@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "Ethereum Bloom Filter\n=====================\n\nA python implementation of the bloom filter used by Ethereum.\n\nInstallation\n------------\n\n.. code:: shell\n\n    $ pip install eth-bloom\n\nDevelopment\n-----------\n\n.. code:: sh\n\n    pip install -e . -r requirements-dev.txt\n\nRunning the tests\n~~~~~~~~~~~~~~~~~\n\nYou can run the tests with:\n\n.. code:: sh\n\n    py.test tests\n\nOr you can install ``tox`` to run the full test suite.\n\nReleasing\n~~~~~~~~~\n\nPandoc is required for transforming the markdown README to the proper\nformat to render correctly on pypi.\n\nFor Debian-like systems:\n\n::\n\n    apt install pandoc\n\nOr on OSX:\n\n.. code:: sh\n\n    brew install pandoc\n\nTo release a new version:\n\n.. code:: sh\n\n    bumpversion $$VERSION_PART_TO_BUMP$$\n    git push && git push --tags\n    make release\n\nHow to bumpversion\n^^^^^^^^^^^^^^^^^^\n\nThe version format for this repo is ``{major}.{minor}.{patch}`` for\nstable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable\n(``stage`` can be alpha or beta).\n\nTo issue the next version in line, use bumpversion and specify which\npart to bump, like ``bumpversion minor`` or ``bumpversion devnum``.\n\nIf you are in a beta version, ``bumpversion stage`` will switch to a\nstable.\n\nTo issue an unstable version when the current version is stable, specify\nthe new version explicitly, like\n``bumpversion --new-version 4.0.0-alpha.1 devnum``\n\nUsage\n-----\n\nThe ``BloomFilter`` object\n\n.. code:: python\n\n    >>> from eth_bloom import BloomFilter\n    >>> b = BloomFilter()\n    >>> b'a value' in b  # check whether a value is present\n    False\n    >>> b.add(b'a value')  # add a single value\n    >>> b'a value' in b\n    True\n    >>> int(b)  # cast to an integer\n    3458628712844765018311492773359360516229024449585949240367644166080576879632652362184119765613545163153674691520749911733485693171622325900647078772681584616740134230153806267998022370194756399579977294154062696916779055028045657302214591620589415314367270329881298073237757853875497241510733954508399863880080986777555986663988492288946856978031023631618215522505971170427986911575695114157059398791122395379400594948096\n    >>> bin(b)  # cast to a binary string\n    '0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'\n\nYou can also add an iterable of items to a bloom filter.\n\n.. code:: python\n\n    >>> b = BloomFilter()\n    >>> b'value-a' in b\n    False\n    >>> b'value-b' in b\n    False\n    >>> b.extend([b'value-a', b'value-b'])\n    >>> b'value-a' in b\n    True\n    >>> b'value-b' in b\n    True\n\nYou can initialize a bloom filter from an iterable of byte strings.\n\n.. code:: python\n\n    >>> b = BloomFilter.from_iterable([b'value-a', b'value-b'])  # initialize from an iterable of values.\n    >>> b'value-a' in b\n    True\n    >>> b'value-b' in b\n    True\n\nYou can initialize a bloom filter from the integer representation of the\nbloom bits.\n\n.. code:: python\n\n    >>> b = BloomFilter(3458628712844765018311492773359360516229024449585949240367644166080576879632652362184119765613545163153674691520749911733485693171622325900647078772681584616740134230153806267998022370194756399579977294154062696916779055028045657302214591620589415314367270329881298073237757853875497241510733954508399863880080986777555986663988492288946856978031023631618215522505971170427986911575695114157059398791122395379400594948096)\n    >>> b'a value' in b\n    True\n\nYou can also merge bloom filters\n\n.. code:: python\n\n    >>> from eth_bloom import BloomFilter\n    >>> b1 = BloomFilter()\n    >>> b2 = BloomFilter()\n    >>> b1.add(b'a')\n    >>> b1.add(b'common')\n    >>> b2.add(b'b')\n    >>> b2.add(b'common')\n    >>> b'a' in b1\n    True\n    >>> b'b' in b1\n    False\n    >>> b'common' in b1\n    True\n    >>> b'a' in b2\n    False\n    >>> b'b' in b2\n    True\n    >>> b'common' in b2\n    True\n    >>> b3 = b1 + b2  # using addition\n    >>> b'a' in b3\n    True\n    >>> b'b' in b3\n    True\n    >>> b'common' in b3\n    True\n    >>> b4 = b1 | b2  # or using bitwise or\n    >>> b'a' in b4\n    True\n    >>> b'b' in b4\n    True\n    >>> b'common' in b4\n    True\n    >>> b1 |= b2  # or using in-place operations (works with += too)\n    >>> b'a' in b1\n    True\n    >>> b'b' in b1\n    True\n    >>> b'common' in b1\n    True\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ethereum/eth-bloom",
    "keywords": "ethereum blockchain evm trie merkle",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eth-bloom",
    "platform": "",
    "project_url": "https://pypi.org/project/eth-bloom/",
    "release_url": "https://pypi.org/project/eth-bloom/0.5.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python implementation of the Ethereum Trie structure",
    "version": "0.5.2"
  },
  "releases": {
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "91f3e5a3fae4128f10e3258c02f774c7",
          "sha256": "37effed450d62e54a6b7a504d3e935fb2464a3b71e0da6a39333c5b98addcc5f"
        },
        "downloads": -1,
        "filename": "eth_bloom-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "91f3e5a3fae4128f10e3258c02f774c7",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 6383,
        "upload_time": "2017-11-28T03:48:42",
        "url": "https://files.pythonhosted.org/packages/55/d5/53b36b4a9972b4d000d8cf3761e44cca3e3d6aedc9f563e4cdd1fb2095ef/eth_bloom-0.5.2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "5930c0e3a4e156d1cdc63008d51886de",
          "sha256": "c9fce7edfa614a095db2932bc4b25e27890d8abb1b9da06b46b25b1cb2d7a37c"
        },
        "downloads": -1,
        "filename": "eth-bloom-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5930c0e3a4e156d1cdc63008d51886de",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4976,
        "upload_time": "2017-11-28T03:48:33",
        "url": "https://files.pythonhosted.org/packages/c5/4c/4ff885719dd0a5e11c964dcaa27536dcd1803c229e486387c143f3dbdfca/eth-bloom-0.5.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "91f3e5a3fae4128f10e3258c02f774c7",
        "sha256": "37effed450d62e54a6b7a504d3e935fb2464a3b71e0da6a39333c5b98addcc5f"
      },
      "downloads": -1,
      "filename": "eth_bloom-0.5.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "91f3e5a3fae4128f10e3258c02f774c7",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 6383,
      "upload_time": "2017-11-28T03:48:42",
      "url": "https://files.pythonhosted.org/packages/55/d5/53b36b4a9972b4d000d8cf3761e44cca3e3d6aedc9f563e4cdd1fb2095ef/eth_bloom-0.5.2-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "5930c0e3a4e156d1cdc63008d51886de",
        "sha256": "c9fce7edfa614a095db2932bc4b25e27890d8abb1b9da06b46b25b1cb2d7a37c"
      },
      "downloads": -1,
      "filename": "eth-bloom-0.5.2.tar.gz",
      "has_sig": false,
      "md5_digest": "5930c0e3a4e156d1cdc63008d51886de",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4976,
      "upload_time": "2017-11-28T03:48:33",
      "url": "https://files.pythonhosted.org/packages/c5/4c/4ff885719dd0a5e11c964dcaa27536dcd1803c229e486387c143f3dbdfca/eth-bloom-0.5.2.tar.gz"
    }
  ]
}