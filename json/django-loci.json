{
  "info": {
    "author": "Federico Capoano",
    "author_email": "nemesis@ninux.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Scientific/Engineering :: GIS"
    ],
    "description": "django-loci\n===========\n\n.. image:: https://travis-ci.org/openwisp/django-loci.svg\n   :target: https://travis-ci.org/openwisp/django-loci\n\n.. image:: https://coveralls.io/repos/openwisp/django-loci/badge.svg\n  :target: https://coveralls.io/r/openwisp/django-loci\n\n.. image:: https://requires.io/github/openwisp/django-loci/requirements.svg?branch=master\n   :target: https://requires.io/github/openwisp/django-loci/requirements/?branch=master\n   :alt: Requirements Status\n\n.. image:: https://badge.fury.io/py/django-loci.svg\n   :target: http://badge.fury.io/py/django-loci\n\n------------\n\nReusable django-app for storing GIS and indoor coordinates of objects.\n\n------------\n\n.. contents:: **Table of Contents**:\n   :backlinks: none\n   :depth: 3\n\n------------\n\nDependencies\n------------\n\n* Python 2.7 or Python >= 3.4\n* [same as GeoDjango](https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/#requirements)\n* one of the databases supported by GeoDjango\n\nInstall stable version from pypi\n--------------------------------\n\nInstall from pypi:\n\n.. code-block:: shell\n\n    pip install django-loci\n\nInstall development version\n---------------------------\n\nInstall tarball:\n\n.. code-block:: shell\n\n    pip install https://github.com/openwisp/django-loci/tarball/master\n\nAlternatively you can install via pip using git:\n\n.. code-block:: shell\n\n    pip install -e git+git://github.com/openwisp/django-loci#egg=django_loci\n\nIf you want to contribute, install your cloned fork:\n\n.. code-block:: shell\n\n    git clone git@github.com:<your_fork>/django-loci.git\n    cd django_loci\n    python setup.py develop\n\nSetup (integrate in an existing django project)\n-----------------------------------------------\n\nAdd ``django_loci`` and its dependencies to `INSTALLED_APPS`` in the following order:\n\n.. code-block:: python\n\n    INSTALLED_APPS = [\n        # ...\n        'django.contrib.gis',\n        'django_loci',\n        'django.contrib.admin',\n        'leaflet',\n        'channels'\n        # ...\n    ]\n\nNow run migrations:\n\n.. code-block:: shell\n\n    ./manage.py migrate\n\nSettings\n--------\n\n``LOCI_FLOORPLAN_STORAGE``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+--------------+-------------------------------------------+\n| **type**:    | ``str``                                   |\n+--------------+-------------------------------------------+\n| **default**: | ``django_loci.storage.OverwriteStorage``  |\n+--------------+-------------------------------------------+\n\nThe django file storage class used for uploading floorplan images.\n\nThe filestorage can be changed to a different one as long as it has an\n``upload_to`` class method which will be passed to ``FloorPlan.image.upload_to``.\n\nTo understand the details of this statement, take a look at the code of\n`django_loci.storage.OverwriteStorage\n<https://github.com/openwisp/django-loci/blob/master/django_loci/storage.py>`_.\n\nExtending django-loci\n---------------------\n\n*django-loci* provides a set of models and admin classes which can be imported,\nextended and reused by third party apps.\n\nTo extend *django-loci*, **you MUST NOT** add it to ``settings.INSTALLED_APPS``,\nbut you must create your own app (which goes into ``settings.INSTALLED_APPS``),\nimport the base classes of django-loci and add your customizations.\n\nExtending models\n~~~~~~~~~~~~~~~~\n\nThis example provides an example of how to extend the base models of\n*django-loci* by adding a relation to another django model named `Organization`.\n\n.. code-block:: python\n\n    # models.py of your app\n    from django.db import models\n    from django_loci.base.models import (AbstractFloorPlan,\n                                         AbstractLocation,\n                                         AbstractObjectLocation)\n\n    # the model ``organizations.Organization`` is omitted for brevity\n    # if you are curious to see a real implementation, check out django-organizations\n\n\n    class OrganizationMixin(models.Model):\n        organization = models.ForeignKey('organizations.Organization')\n\n        class Meta:\n            abstract = True\n\n\n    class Location(OrganizationMixin, AbstractLocation):\n        class Meta(AbstractLocation.Meta):\n            abstract = False\n\n        def clean(self):\n            # your own validation logic here...\n            pass\n\n\n    class FloorPlan(OrganizationMixin, AbstractFloorPlan):\n        location = models.ForeignKey(Location)\n\n        class Meta(AbstractFloorPlan.Meta):\n            abstract = False\n\n        def clean(self):\n            # your own validation logic here...\n            pass\n\n\n    class ObjectLocation(OrganizationMixin, AbstractObjectLocation):\n        location = models.ForeignKey(Location, models.PROTECT,\n                                     blank=True, null=True)\n        floorplan = models.ForeignKey(FloorPlan, models.PROTECT,\n                                      blank=True, null=True)\n\n        class Meta(AbstractObjectLocation.Meta):\n            abstract = False\n\n        def clean(self):\n            # your own validation logic here...\n            pass\n\nExtending the admin\n~~~~~~~~~~~~~~~~~~~\n\nFollowing the previous `Organization` example, you can avoid duplicating the admin\ncode by importing the base admin classes and registering your models with them.\n\n.. code-block:: python\n\n    # admin.py of your app\n    from django.contrib import admin\n\n    from django_loci.base.admin import (AbstractFloorPlanAdmin, AbstractFloorPlanForm,\n                                        AbstractFloorPlanInline, AbstractLocationAdmin,\n                                        AbstractLocationForm, AbstractObjectLocationForm,\n                                        AbstractObjectLocationInline)\n    from django_loci.models import FloorPlan, Location, ObjectLocation\n\n\n    class FloorPlanForm(AbstractFloorPlanForm):\n        class Meta(AbstractFloorPlanForm.Meta):\n            model = FloorPlan\n\n\n    class FloorPlanAdmin(AbstractFloorPlanAdmin):\n        form = FloorPlanForm\n\n\n    class LocationForm(AbstractLocationForm):\n        class Meta(AbstractLocationForm.Meta):\n            model = Location\n\n\n    class FloorPlanInline(AbstractFloorPlanInline):\n        form = FloorPlanForm\n        model = FloorPlan\n\n\n    class LocationAdmin(AbstractLocationAdmin):\n        form = LocationForm\n        inlines = [FloorPlanInline]\n\n\n    class ObjectLocationForm(AbstractObjectLocationForm):\n        class Meta(AbstractObjectLocationForm.Meta):\n            model = ObjectLocation\n\n\n    class ObjectLocationInline(AbstractObjectLocationInline):\n        model = ObjectLocation\n        form = ObjectLocationForm\n\n\n    admin.site.register(FloorPlan, FloorPlanAdmin)\n    admin.site.register(Location, LocationAdmin)\n\nExtending Channel Consumer\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nExtend the channel consumer of django-loci in this way:\n\n.. code-block:: python\n\n    from django_loci.channels.base import BaseLocationBroadcast\n    from ..models import Location  # your own location model\n\n\n    class LocationBroadcast(BaseLocationBroadcast):\n        model = Location\n\nExtending AppConfig\n~~~~~~~~~~~~~~~~~~~\n\nYou may want to reuse the ``AppConfig`` class of *django-loci* too:\n\n.. code-block:: python\n\n    from django_loci.apps import LociConfig\n\n\n    class MyAppConfig(LociConfig):\n        name = 'myapp'\n\n        def load_receivers(self):\n            # load receivers that listen for signals from your models\n            from .channels import receivers\n\nInstalling for development\n--------------------------\n\nInstall sqlite:\n\n.. code-block:: shell\n\n    sudo apt-get install sqlite3 libsqlite3-dev libsqlite3-mod-spatialite\n\nInstall your forked repo:\n\n.. code-block:: shell\n\n    git clone git://github.com/<your_fork>/django-loci\n    cd django-loci/\n    python setup.py develop\n\nInstall test requirements:\n\n.. code-block:: shell\n\n    pip install -r requirements-test.txt\n\nCreate database:\n\n.. code-block:: shell\n\n    cd tests/\n    ./manage.py migrate\n    ./manage.py createsuperuser\n\nLaunch development server and SMTP debugging server:\n\n.. code-block:: shell\n\n    ./manage.py runserver\n\nYou can access the admin interface at http://127.0.0.1:8000/admin/.\n\nRun tests with:\n\n.. code-block:: shell\n\n    ./runtests.py\n\nContributing\n------------\n\n1. Announce your intentions in the `OpenWISP Mailing List <https://groups.google.com/d/forum/openwisp>`_\n2. Fork this repo and install it\n3. Follow `PEP8, Style Guide for Python Code`_\n4. Write code\n5. Write tests for your code\n6. Ensure all tests pass\n7. Ensure test coverage does not decrease\n8. Document your changes\n9. Send pull request\n\n.. _PEP8, Style Guide for Python Code: http://www.python.org/dev/peps/pep-0008/\n\nChangelog\n---------\n\nSee `CHANGES <https://github.com/openwisp/django-loci/blob/master/CHANGES.rst>`_.\n\nLicense\n-------\n\nSee `LICENSE <https://github.com/openwisp/django-loci/blob/master/LICENSE>`_.",
    "docs_url": null,
    "download_url": "https://github.com/openwisp/django-loci/releases",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://openwisp.org",
    "keywords": "django,gis",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-loci",
    "platform": "Platform Indipendent",
    "project_url": "https://pypi.org/project/django-loci/",
    "release_url": "https://pypi.org/project/django-loci/0.1a0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Reusable django-app for outdoor and indoor mapping",
    "version": "0.1a0"
  },
  "releases": {
    "0.1a0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "08a9e69f99d30e019f1aad397d740e03",
          "sha256": "f6cf04536647ab5486634cb1eb6abbfb75af2e97ff98c856e45d061ba83ac327"
        },
        "downloads": -1,
        "filename": "django_loci-0.1a0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "08a9e69f99d30e019f1aad397d740e03",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 37830,
        "upload_time": "2017-11-26T18:13:17",
        "url": "https://files.pythonhosted.org/packages/2d/c9/ea295303278c1358fb3644eb04f54d43ef6d4daa774fc68d104ea066f77c/django_loci-0.1a0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a443f63407bb3a062026ece847e4c1f9",
          "sha256": "5b53e2bf8433f74309671ed7bc595947e2ed525710ab023111134269786c6e91"
        },
        "downloads": -1,
        "filename": "django-loci-0.1a0.tar.gz",
        "has_sig": true,
        "md5_digest": "a443f63407bb3a062026ece847e4c1f9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26892,
        "upload_time": "2017-11-26T18:13:14",
        "url": "https://files.pythonhosted.org/packages/0e/70/6870de9567762e6083b5e8712214a16fa708704446b15cacac26218f9238/django-loci-0.1a0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "08a9e69f99d30e019f1aad397d740e03",
        "sha256": "f6cf04536647ab5486634cb1eb6abbfb75af2e97ff98c856e45d061ba83ac327"
      },
      "downloads": -1,
      "filename": "django_loci-0.1a0-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "08a9e69f99d30e019f1aad397d740e03",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 37830,
      "upload_time": "2017-11-26T18:13:17",
      "url": "https://files.pythonhosted.org/packages/2d/c9/ea295303278c1358fb3644eb04f54d43ef6d4daa774fc68d104ea066f77c/django_loci-0.1a0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "a443f63407bb3a062026ece847e4c1f9",
        "sha256": "5b53e2bf8433f74309671ed7bc595947e2ed525710ab023111134269786c6e91"
      },
      "downloads": -1,
      "filename": "django-loci-0.1a0.tar.gz",
      "has_sig": true,
      "md5_digest": "a443f63407bb3a062026ece847e4c1f9",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 26892,
      "upload_time": "2017-11-26T18:13:14",
      "url": "https://files.pythonhosted.org/packages/0e/70/6870de9567762e6083b5e8712214a16fa708704446b15cacac26218f9238/django-loci-0.1a0.tar.gz"
    }
  ]
}