{
  "info": {
    "author": "Peter Volf",
    "author_email": "do.volfp@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Topic :: Database",
      "Topic :: Internet",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "GraphScraper\n=================\n\nGraphScraper is a Python 3 library that contains a base graph implementation designed\nto be turned into a web scraper for graph data. It has two major features:\n\n1) The graph automatically manages a database (using either SQLAlchemy or\nFlask-SQLAlchemy) where it stores all the nodes and edges the graph has seen.\n\n2) The base graph implementation provides hook methods that, if implemented,\nturn the graph into a web scraper.\n\nYet another graph implementation - why\n-------------------------------------------\n\nThere are many excellent graph libraries available for different purposes. I started\nimplementing this one because i haven't found a graph library that is dynamic (i don't\nneed the whole graph in memory - or on disk - before i start working with it), that\ncan be used as a web scraper (to seamlessly load nodes and edges from some remote\ndata source when that piece of data is needed) and that keeps all data (the graph)\nautomatically up-to-date on the disk. GraphScraper aims to satisfy these requirements.\n\nExamples\n----------------------\n\nBesides the base graph implementation, the following working examples are also included\nin the library, that show you how you can implement and use an actual graph scraper:\n\n- `igraphwrapper`: Instead of web-scraping, this example is using an igraph_ graph\n  instance as the \"remote\" source to scrape data from.\n- `spotifyartist`: This example is using the Spotify_ web API to load artists and\n  edges are defined by Artist similarity.\n\nDependencies\n-----------------\n\nThe project requires SQLAlchemy_ or Flask-SQLAlchemy_ to be installed.\n\nIf you wish to use one of the included graph implementations, then please read the\ncorresponding module's description for additional requirements.\n\nContribution\n-----------------\n\nAny form of constructive contribution (feedback, features, bug fixes, tests, additional\ndocumentation, etc.) is welcome.\n\n.. _Flask-SQLAlchemy: http://flask-sqlalchemy.pocoo.org/\n.. _igraph: http://igraph.org\n.. _Spotify: https://developer.spotify.com/web-api/\n.. _SQLAlchemy: https://www.sqlalchemy.org/\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/volfpeter/graphscraper",
    "keywords": "graph network webscraping sqlalchemy database db caching",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "graphscraper",
    "platform": "",
    "project_url": "https://pypi.org/project/graphscraper/",
    "release_url": "https://pypi.org/project/graphscraper/0.2.0/",
    "requires_dist": [],
    "requires_python": ">=3",
    "summary": "Graph implementation that loads graph data (nodes and edges) from external sources and caches the loaded data in a database using sqlalchemy or flask-sqlalchemy.",
    "version": "0.2.0"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "08f97c97b1bc5e18c236d66c3fa0b75d",
          "sha256": "7c3f911f6d586a014745faf9072e3cf40c8c2488399b515e9a686ce0f3a16719"
        },
        "downloads": -1,
        "filename": "graphscraper-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "08f97c97b1bc5e18c236d66c3fa0b75d",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 18431,
        "upload_time": "2017-09-30T20:59:43",
        "url": "https://files.pythonhosted.org/packages/bc/02/08d4afedccdb2b46d0945d8dc490b72eefacf7a856c1b76dc19cfc5fca4c/graphscraper-0.1.1-py3-none-any.whl"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b9b5709dbfa02f6f27895852b11ca648",
          "sha256": "9d9db1c1622b3a17bd095a6a464039eabd1c6d0f67f56682d5f6070af78b68ec"
        },
        "downloads": -1,
        "filename": "graphscraper-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b9b5709dbfa02f6f27895852b11ca648",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 22915,
        "upload_time": "2017-11-09T19:04:58",
        "url": "https://files.pythonhosted.org/packages/1e/f6/f0872379e26de2a3d5e87cf6c1c99c4d46795268c9ad94b4840e2fbffbb9/graphscraper-0.2.0-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b9b5709dbfa02f6f27895852b11ca648",
        "sha256": "9d9db1c1622b3a17bd095a6a464039eabd1c6d0f67f56682d5f6070af78b68ec"
      },
      "downloads": -1,
      "filename": "graphscraper-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b9b5709dbfa02f6f27895852b11ca648",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 22915,
      "upload_time": "2017-11-09T19:04:58",
      "url": "https://files.pythonhosted.org/packages/1e/f6/f0872379e26de2a3d5e87cf6c1c99c4d46795268c9ad94b4840e2fbffbb9/graphscraper-0.2.0-py3-none-any.whl"
    }
  ]
}