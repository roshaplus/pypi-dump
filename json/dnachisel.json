{
  "info": {
    "author": "Zulko",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": ".. image:: https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/DnaChisel/master/docs/_static/images/title.png\n   :alt: [logo]\n   :align: center\n   :width: 600px\n\nDnaChisel\n=========\n\n.. image:: https://travis-ci.org/Edinburgh-Genome-Foundry/DnaChisel.svg?branch=master\n   :target: https://travis-ci.org/Edinburgh-Genome-Foundry/DnaChisel\n   :alt: Travis CI build status\n\n\n(Documentation in progress, come back later !)\n\nDnaChisel (complete documentation `here <https://edinburgh-genome-foundry.github.io/DnaChisel/>`_)\nis a Python library to optimize the nucleotides of DNA sequences with respect\nto a set of constraints and optimization objectives.\n\n\nIt can be used for codon-optimizing the genes of a sequence for a particular micro-organism,\nmodifying a sequence to meet the constraints of a DNA provider while preserving genes,\nand other sensible patterns.\n\nDnaChisel also provides much freedom to define optimization problems and model\nnew kinds of specifications, making it suitable for either automated sequence\ndesign, or for complex custom design projects.\n\nExample of use\n---------------\n\nIn this basic example we generate a random sequence and optimize it so that\n\n- It will be rid of BsaI sites.\n- GC content will be between 30% and 70% on every 50bp window.\n- The reading frame at position 500-1300 will be codon-optimized for *E. coli*.\n\nHere is the code to achieve that:\n\n.. code:: python\n\n    from dnachisel import *\n\n    # DEFINE THE OPTIMIZATION PROBLEM\n\n    problem = DnaOptimizationProblem(\n        sequence=random_dna_sequence(10000),\n        constraints=[AvoidPattern(enzyme_=\"BsaI\"),\n                     EnforceGCContent(mini=0.3, maxi=0.7, window=50)],\n        objectives=[CodonOptimize(species='e_coli', location=(500, 1300))]\n    )\n\n    # SOLVE THE CONSTRAINTS, OPTIMIZE WITH RESPECT TO THE OBJECTIVE\n\n    problem.resolve_constraints()\n    problem.optimize()\n\n    # PRINT SUMMARIES TO CHECK THAT CONSTRAINTS PASS\n\n    print(problem.constraints_text_summary())\n    print(problem.objectives_text_summary())\n\nDnaChisel implements advanced constraints such as the preservation of coding\nsequences,  or the inclusion or exclusion of advanced patterns, as well as\nsome common biological objectives (such as codon optimization, GC content), but it\nis also very easy to implement new constraints and objectives.\n\n\nInstallation\n-------------\n\nYou can install DnaChisel through PIP\n\n.. code::\n\n    sudo pip install dnachisel\n\nAlternatively, you can unzip the sources in a folder and type\n\n.. code::\n\n    sudo python setup.py install\n\nTo be able to generate plots and reports, run\n\n.. code::\n\n    sudo pip install dna_features_viewer weasyprint\n\nLicense = MIT\n--------------\n\nDnaChisel is an open-source software originally written at the `Edinburgh Genome Foundry\n<http://edinburgh-genome-foundry.github.io/home.html>`_ by `Zulko <https://github.com/Zulko>`_\nand `released on Github <https://github.com/Edinburgh-Genome-Foundry/DnaChisel>`_ under the MIT licence (\u00a2 Edinburg Genome Foundry).\n\nEveryone is welcome to contribute !\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "DNA optimization constraints synthetic biology",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dnachisel",
    "platform": "",
    "project_url": "https://pypi.org/project/dnachisel/",
    "release_url": "https://pypi.org/project/dnachisel/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Optimize DNA sequences under constraints.",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e1d632492717ccba2b89789542d18dda",
          "sha256": "3e29be2c321e7ae621b34793426ab8b71280d00de23e94187f838b48aab77f71"
        },
        "downloads": 0,
        "filename": "dnachisel-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e1d632492717ccba2b89789542d18dda",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 163549,
        "upload_time": "2017-10-05T12:12:23",
        "url": "https://files.pythonhosted.org/packages/05/47/a96748f3a5b7244f0831e226d5e41739a4d5e9ce407bbc8a2780a75aaff9/dnachisel-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e1d632492717ccba2b89789542d18dda",
        "sha256": "3e29be2c321e7ae621b34793426ab8b71280d00de23e94187f838b48aab77f71"
      },
      "downloads": 0,
      "filename": "dnachisel-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e1d632492717ccba2b89789542d18dda",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 163549,
      "upload_time": "2017-10-05T12:12:23",
      "url": "https://files.pythonhosted.org/packages/05/47/a96748f3a5b7244f0831e226d5e41739a4d5e9ce407bbc8a2780a75aaff9/dnachisel-0.1.0.tar.gz"
    }
  ]
}