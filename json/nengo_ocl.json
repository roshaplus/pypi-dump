{
  "info": {
    "author": "Applied Brain Research",
    "author_email": "info@appliedbrainresearch.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: Free for non-commercial use",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "****************************\nOpenCL-based Nengo Simulator\n****************************\n\nThis project is an OpenCL-based simulator for\nbrain models built using `Nengo <https://github.com/nengo/nengo>`_.\nIt can be orders of magnitude faster than the reference simulator\nin ``nengo`` for large models.\n\nUsage\n=====\n\nTo use the ``nengo_ocl`` project's OpenCL simulator,\nbuild a Nengo model as usual,\nbut use ``nengo_ocl.Simulator`` when creating a simulator for your model::\n\n    import numpy as np\n    import matplotlib.pyplot as plt\n    import nengo\n    import nengo_ocl\n\n    # define the model\n    with nengo.Network() as model:\n        stim = nengo.Node(np.sin)\n        a = nengo.Ensemble(100, 1)\n        b = nengo.Ensemble(100, 1)\n        nengo.Connection(stim, a)\n        nengo.Connection(a, b, function=lambda x: x**2)\n\n        probe_a = nengo.Probe(a, synapse=0.01)\n        probe_b = nengo.Probe(b, synapse=0.01)\n\n    # build and run the model\n    with nengo_ocl.Simulator(model) as sim:\n        sim.run(10)\n\n    # plot the results\n    plt.plot(sim.trange(), sim.data[probe_a])\n    plt.plot(sim.trange(), sim.data[probe_b])\n    plt.show()\n\nDependencies and Installation\n=============================\n\nThe requirements are the same as Nengo, with the additional Python packages\n``mako`` and ``pyopencl`` (where the latter requires installing OpenCL).\n\nGeneral:\n\n* Python 2.7+ or Python 3.3+ (same as Nengo)\n* One or more OpenCL implementations (test with e.g. PyOpenCl)\n\nA working installation of OpenCL is the most difficult\npart of installing Nengo OCL. See below for more details\non how to install OpenCL.\n\nPython packages:\n\n* NumPy\n* nengo\n* mako\n* PyOpenCL\n\nIn the ideal case, all of the Python dependencies\nwill be automatically installed when installing ``nengo_ocl`` with\n\n.. code-block:: bash\n\n   pip install nengo_ocl\n\nIf that doesn't work, then do a developer install\nto figure out what's going wrong.\n\nDeveloper Installation\n----------------------\n\nFirst, ``pip install nengo``.\nFor best performance, first make sure a fast version of Numpy is installed\nby following the instructions in the\n`Nengo README <http://github.com/nengo/nengo/blob/master/README.rst>`_.\n\nThis repository can then be installed with:\n\n.. code-block:: bash\n\n   git clone https://github.com/nengo/nengo_ocl.git\n   cd nengo_ocl\n   python setup.py develop --user\n\nIf you\u2019re using a ``virtualenv`` (recommended!)\nthen you can omit the ``--user`` flag.\nCheck the output to make sure everything installed correctly.\nSome dependencies (e.g. ``pyopencl``) may require manual installation.\n\nInstalling OpenCL\n=================\n\nHow you install OpenCL is dependent on your hardware and operating system.\nA good resource for various cases is found in the PyOpenCL documentation:\n\n* `Installing PyOpenCL on Windows <http://wiki.tiker.net/PyOpenCL/Installation/Windows>`_\n* `Installing PyOpenCL on Mac OS X <http://wiki.tiker.net/PyOpenCL/Installation/Mac>`_\n* `Installing PyOpenCL on Linux <http://wiki.tiker.net/PyOpenCL/Installation/Linux>`_,\n  and a `more detailed guide <http://wiki.tiker.net/OpenCLHowTo>`_\n\nBelow are instructions that have worked for the\nNengo OCL developers at one point in time.\n\nAMD OCL on Debian Unstable\n--------------------------\n\nOn Debian unstable (sid) there are packages in non-free and contrib\nto install AMD's OCL implementation easily.\nActually, the easiest thing would be to apt-get install\n`python-pyopencl <http://packages.debian.org/sid/python-pyopencl>`_.\nBut if you're using a virtual environment, you can\n``sudo apt-get install opencl-headers libboost-python-dev amd-opencl-icd amd-libopencl1``\nand then ``pip install pyopencl``.\n\nNvidia OCL on Debian/Ubuntu Linux\n---------------------------------\n\nOn Debian unstable (sid) there are packages\nfor installing the Nvidia OpenCL implementation as well.\n\n.. code-block:: bash\n\n   sudo apt-get install nvidia-opencl-common nvidia-libopencl1\n\nEnsure that the Nvidia driver version matches the OpenCL library version.\nYou can check the Nvidia driver version by running ``nvidia-smi`` in the\ncommand line. You can find the OpenCL library version by looking at the\nlibnvidia-opencl.so.XXX.XX file in the ``/usr/lib/x86_64-linux-gnu/`` folder.\n\nIntel OCL on Debian/Ubuntu Linux\n--------------------------------\n\nThe Intel SDK for OpenCL is no longer available. Intel OpenCL drivers\ncan be found `on Intel's website <https://software.intel.com/en-us/articles/opencl-drivers>`_.\nSee `the PyOpenCL wiki <http://wiki.tiker.net/OpenCLHowTo#Installing_the_Intel_CPU_ICD>`_\nfor instructions.\n\nRunning Tests\n=============\n\nFrom the ``nengo_ocl`` source directory, run:\n\n.. code-block:: bash\n\n    py.test nengo_ocl/tests --pyargs nengo -v\n\nThis will run the tests using the default context. If you wish to use another\ncontext, configure it with the ``PYOPENCL_CTX`` environment variable\n(run the Python command ``pyopencl.create_some_context()`` for more info).\n\n***************\nRelease History\n***************\n\n.. Changelog entries should follow this format:\n\n   version (release date)\n   ======================\n\n   **section**\n\n   - One-line description of change (link to Github issue/PR)\n\n.. Changes should be organized in one of several sections:\n\n   - Features\n   - Improvements\n   - Bugfixes\n   - Documentation\n\n1.2.0 (February 23, 2017)\n=========================\n\n**Improvements**\n\n- Supports all Nengo versions from 2.1.2 to 2.3.1.\n- ``nengo_ocl.Simulator`` is no longer a subclass of ``nengo.Simulator``,\n  reducing the chances that Nengo OCL will be affected by changes in Nengo.\n\n1.1.0 (November 30, 2016)\n=========================\n\n**Features**\n\n- Added support for ``RectifiedLinear`` and ``Sigmoid`` neuron types.\n- Added support for arbitrary ``Process`` subclasses. Unlike the processes\n  that are explicitly supported like ``WhiteSignal``, these processes\n  may not fully utilize the OpenCL device.\n- Added support for applying synaptic filters to matrices,\n  which is commonly done when probing connection weights.\n\n**Improvements**\n\n- Supports all Nengo versions from 2.1.2 to 2.3.0.\n- The ``LIF`` model is now more accurate, and matches the implementation\n  in Nengo (see `Nengo#975 <https://github.com/nengo/nengo/pull/975>`_).\n- Several operators have been optimized and should now run faster.\n\n**Bugfixes**\n\n- Fixed compatibility issues with Python 3,\n  and certain versions of NumPy and Nengo.\n\n1.0.0 (June 6, 2016)\n====================\n\nRelease in support of Nengo 2.1.0. Since Nengo no longer supports Python 2.6,\nwe now support Python 2.7+ and 3.3+.\n\n**Features**\n\n- Added support for ``Process`` class and subclasses, new in Nengo in 2.1.0.\n  We specifically support the ``WhiteNoise``, ``WhiteSignal``, and\n  ``PresentInput`` processes. We also support the ``Conv2d`` and ``Pool2d``\n  processes in ``nengo_extras``.\n- ``LinearFilter`` is now fully supported, allowing for general synapses.\n\n**Improvements**\n\n- The Numpy simulator in this project (``sim_npy``) has been phased out and\n  combined with the OCL simulator (``sim_ocl``). It is now called ``Simulator``\n  and resides in ``simulator.py``.\n- Operator scheduling (i.e. the planner) is much faster. We still have only\n  one planner (``greedy_planner``), which now resides in ``planners.py``.\n- Many small speed improvements, including a number of cases where data was\n  needlessly copied off the device to check sizes, dtypes, etc.\n\n**Documentation**\n\n- Updated examples to use up-to-date Nengo syntax.\n\n0.1.0 (June 8, 2015)\n====================\n\nInitial release of Nengo OpenCL!\nSupports Nengo 2.0.x on Python 2.6+ and 3.3+.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/nengo/nengo_ocl",
    "keywords": "",
    "license": "Free for non-commercial use",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nengo_ocl",
    "platform": "",
    "project_url": "https://pypi.org/project/nengo_ocl/",
    "release_url": "https://pypi.org/project/nengo_ocl/1.2.0/",
    "requires_python": "",
    "summary": "OpenCL-backed neural simulations using the Neural Engineering Framework",
    "version": "1.2.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9e46fdc2a7ee582b71ae1aaabeccff9f",
          "sha256": "4495b610d30f5b53f8d6e73a1310db336a0b8b0bea9628a6fb7eda2187d672fb"
        },
        "downloads": 2757,
        "filename": "nengo_ocl-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9e46fdc2a7ee582b71ae1aaabeccff9f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 62464,
        "upload_time": "2015-06-08T15:25:29",
        "url": "https://files.pythonhosted.org/packages/73/81/91b70807546ef190f4f0d9f107f65b6110e9cacd11fd77c12207327d97d7/nengo_ocl-0.1.0.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "047ca5621f541f2c49cb98f38d2319eb",
          "sha256": "ffa5753593435abdb0e6f629175771feaf87e76fb842c9fdcd5a18d0940869d1"
        },
        "downloads": 136,
        "filename": "nengo_ocl-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "047ca5621f541f2c49cb98f38d2319eb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 71070,
        "upload_time": "2016-06-06T19:27:24",
        "url": "https://files.pythonhosted.org/packages/54/e7/16af2983c5dfab0db34c970765057c2b7a47059bec89a413ef63807b8d35/nengo_ocl-1.0.0.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d3d257815672d525f7690dfc0d34fd59",
          "sha256": "9f3ead8a2143a6ffea5f422416ac3a62e0b1f03ab2b05bfc3740aab270535325"
        },
        "downloads": 52,
        "filename": "nengo_ocl-1.1.0.zip",
        "has_sig": false,
        "md5_digest": "d3d257815672d525f7690dfc0d34fd59",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 87711,
        "upload_time": "2016-11-30T17:35:44",
        "url": "https://files.pythonhosted.org/packages/34/72/ceb81fd8ebba6c6e058d2b12f95bb19c78e267fa2fd22bc92a01b9023951/nengo_ocl-1.1.0.zip"
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "161fe65608e3803803da02b083b3fc6c",
          "sha256": "a2d735847cea91488d9ffe9175791a8e3f8d60e9344f4875114e9b4993c1b53f"
        },
        "downloads": 14,
        "filename": "nengo_ocl-1.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "161fe65608e3803803da02b083b3fc6c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 72154,
        "upload_time": "2017-02-23T21:18:35",
        "url": "https://files.pythonhosted.org/packages/b1/72/6fcdaac1f77012659fbabb591fc5296e0946fcde71b712f07431a199340f/nengo_ocl-1.2.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9410f7230985f2bd85a4c64d59982714",
          "sha256": "f8fcf381d871974855cc6a37358b1c9e1d06770f9a080486480604f209fcb4f5"
        },
        "downloads": 13,
        "filename": "nengo_ocl-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9410f7230985f2bd85a4c64d59982714",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 69682,
        "upload_time": "2017-02-23T21:17:26",
        "url": "https://files.pythonhosted.org/packages/56/6f/6c18bf679c3862cc319930188acba4b71c1486e0145cd13ae7be76db9036/nengo_ocl-1.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "161fe65608e3803803da02b083b3fc6c",
        "sha256": "a2d735847cea91488d9ffe9175791a8e3f8d60e9344f4875114e9b4993c1b53f"
      },
      "downloads": 14,
      "filename": "nengo_ocl-1.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "161fe65608e3803803da02b083b3fc6c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 72154,
      "upload_time": "2017-02-23T21:18:35",
      "url": "https://files.pythonhosted.org/packages/b1/72/6fcdaac1f77012659fbabb591fc5296e0946fcde71b712f07431a199340f/nengo_ocl-1.2.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "9410f7230985f2bd85a4c64d59982714",
        "sha256": "f8fcf381d871974855cc6a37358b1c9e1d06770f9a080486480604f209fcb4f5"
      },
      "downloads": 13,
      "filename": "nengo_ocl-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9410f7230985f2bd85a4c64d59982714",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 69682,
      "upload_time": "2017-02-23T21:17:26",
      "url": "https://files.pythonhosted.org/packages/56/6f/6c18bf679c3862cc319930188acba4b71c1486e0145cd13ae7be76db9036/nengo_ocl-1.2.0.tar.gz"
    }
  ]
}