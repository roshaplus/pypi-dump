{
  "info": {
    "author": "Ben Woodcroft",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "Welcome to SingleM.\n\nSingleM is a tool to find the abundances of discrete operational taxonomic units (OTUs) directly from shotgun metagenome data, without heavy reliance on reference sequence databases. It is able to differentiate closely related species even if those species are from lineages new to science.\n\nWhere [GraftM](https://github.com/geronimp/graftM) can give a taxonomic overview of your community e.g. proportion of a community from a particular taxonomic family, SingleM finds sequence-based OTUs from raw, untrimmed metagenomic reads.\n\nThis gives you the ability to answer questions such as:\n\n* How many different kinds of TM6 do I have?\n* What is the Chao 1 diversity of my sample?\n* Are the Acidobacteria in sample 1 very closely related to the Acidobacteria in sample 2?\n* Do I have population genomes for the main community members?\n* How diverse are the Pelagibacteria relative to the Flavobacteria?\n* Has my genome been observed in any samples submitted to the [SRA](http://www.ncbi.nlm.nih.gov/sra)?\n* Which community members are more likely to assemble?\n\n## Generating an OTU table\n\nAn overview of your community can be obtained like so:\n```\nsinglem pipe --sequences my_sequences.fastq.gz --otu_table otu_table.csv --threads 24\n```\nPlease use **raw** metagenome reads, not quality trimmed reads. Quality trimming with e.g. [Trimmomatic](https://doi.org/10.1093/bioinformatics/btu170) reads often makes them too short for SingleM to use. On the other hand, adapter trimming is unlikely to be detrimental.\n\nThe output table consists of columns:\n```\ngene    sample  sequence        num_hits        coverage        taxonomy\n4.21.ribosomal_protein_S19_rpsS my_sequences  TGGTCGCGCCGTTCGACGGTCACTCCGGACTTCATCGGCCTACAGTTCGCCGTGCACATC    1       1.64    Root; d__Bacteria; p__Proteobacteria; c__Deltaproteobacteria; o__Desulfuromonadales\n4.21.ribosomal_protein_S19_rpsS my_sequences  TGGTCGCGGCGCTCAACCATTCTGCCCGAGTTCGTCGGCCACACCGTGGCCGTTCACAAC    1       1.64    Root; d__Bacteria; p__Acidobacteria; c__Solibacteres; o__Solibacterales; f__Solibacteraceae; g__Candidatus_Solibacter; s__Candidatus_Solibacter_usitatus\n```\n1. marker name\n2. sample name\n3. sequence of the OTU\n4. number of reads detected from that OTU\n5. estimated coverage of a genome from this OTU\n6. \"median\" taxonomic classification of each of the reads in the OTU according to [pplacer](http://matsen.fhcrc.org/pplacer/)\n\nCurrently SingleM concentrates on 15 single copy marker genes to provide fine-grained differentiation of species that is independent of the copy-number variation issues that hamper 16S analyses. SingleM is reasonably fast and is quite scalable, although there is much room for improvement. On average, each of the 15 genes better differentiates closely related lineages than a typical 16S amplicon-based study.\n\n## Further processing of OTU tables\n### Summarising OTU tables\nOnce an OTU table has been generated with the `pipe` command, it can be further processed in various ways using `summarise`:\n\nCreate a [Krona](https://sourceforge.net/p/krona/) plot of the community. The following command generates `my_krona*.html` files which can be viewed in a web browser:\n```\nsinglem summarise --input_otu_table otu_table.csv --krona my_krona\n```\n\nCluster sequences, collapsing them into OTUs with less resolution, but with more robustness against sequencing error:\n```\nsinglem summarise --input_otu_table otu_table.csv --cluster --clustered_output_otu_table clustered.otu_table.csv\n```\n\nRarefy a set of OTU tables so that each sample contains the same number of OTU sequences:\n```\nsinglem summarise --input_otu_tables otu_table.csv other_samples.otu_table.csv --rarefied_output_otu_table rarefied.otu_table.csv --number_to_choose 100\n```\n\nConversion to [BIOM format](http://biom-format.org) for use with QIIME:\n```\nsinglem summarise --input_otu_tables otu_table.csv other_samples.otu_table.csv --biom_prefix myprefix\n```\nThis generates a BIOM table for each marker gene e.g. `myprefix.4.12.ribosomal_protein_L11_rplK.biom`.\n\n### Calculating beta diversity between samples\nAs SingleM generates OTUs that are independent of taxonomy, they can be used as input to beta diversity methods known to be appropriate for the analysis of 16S amplicon studies, of which there are many. We recommend [express beta diversity](https://github.com/dparks1134/ExpressBetaDiversity) (EBD) as it implements many different metrics with a unified interface. For instance to calculate Bray-Curtis beta diversity, first convert your OTU table to unifrac format using `singlem summarise`:\n```\nsinglem summarise --input_otu_table otu_table.csv --unifrac otu_table.unifrac\n```\nThe above commands generates 15 different unifrac format files, one for each marker gene used in SingleM. At this point, you need to choose one table to proceed with. Hopefully, the choice matters little, but it might pay to use multiple tables and ensure that the results are consistent.\n\nTo calculate beta diversity, use the EBD script `convertToEBD.py` to convert the unifrac format into ebd format, and calculate the diversity metric:\n```\nconvertToEBD.py otu_table.unifrac.4.12.ribosomal_protein_L11_rplK.unifrac otu_table.ebd\nExpressBetaDiversity -s otu_table.ebd -c Bray-Curtis\n```\nPhylogenetic tree-based methods of calculating beta diversity can also be calculated, but `pipe` must be used to generate a new OTU table using the `diamond_example` taxonomy assignment method so that each OTU is assigned to a single leaf in the tree:\n```\nsinglem pipe --sequences my_sequences.fastq.gz --otu_table otu_table.diamond_example.csv --threads 24 --assignment_method diamond_example\nsinglem summarise --otu_tables otu_table.diamond_example.csv --unifrac otu_table.diamond_example.csv\nconvertToEBD.py otu_table.diamond_example.unifrac otu_table.diamond_example.ebd\nExpressBetaDiversity -s otu_table.diamond_example.ebd -c Bray-Curtis -t `singlem get_tree --marker_name 4.21.ribosomal_protein_S19_rpsS`\n```\n\n\n### Creating and querying SingleM databases\nIt can be useful in some situations to search for sequences in OTU tables. For instance, you may ask \"is the most abundant OTU or anything similar in samples B, C or D?\" To answer this question make a SingleM database from sample B, C & D's OTU tables:\n```\nsinglem makedb --otu_tables sample_B.csv sample_C.csv sample_D.csv --db_path sample_BCD.sdb\n```\n`.sdb` is the conventional file extension for SingleM databases. Then to query this database\n```\nsinglem query --query_sequence TGGTCGCGGCGCTCAACCATTCTGCCCGAGTTCGTCGGCCACACCGTGGCCGTTCACAAC --db sample_BCD.sdb\n```\n\n\n### Appraising genome recovery efforts\nTo assess how well a set of genomes (or population genomes) represent those present in a metagenome, first run `pipe` on both the genomes and the raw reads, and then use `appraise`:\n```\nsinglem appraise --metagenome_otu_tables metagenome.otu_table.csv --genome_otu_tables genomes.otu_table.csv\n```\nOne may also accommodate some sequence differences, with `--imperfect`, or output OTU tables of OTUs in the genomes or not in the genomes with `--accounted_for_otu_table` and `--unaccounted_for_otu_table`.\n\n\n\n### Installation\n\n#### Installation via GNU Guix\nThe most straightforward way of installing SingleM is to use the GNU Guix package which is part of the ACE Guix package collection. This method installs not just the Python libraries required but the compiled bioinformatics tools needed as well. Once you have installed Guix, clone the ACE collection and install:\n```\ngit clone https://github.com/Ecogenomics/ace-guix\nGUIX_PACKAGE_PATH=ace-guix guix package --install singlem\n```\nBeyond installing GNU Guix, super-user privileges are not required for installation.\n\n#### Installation via DockerHub\nA docker image generated from the Guix package is available on DockerHub. After installing Docker:\n```\ndocker pull wwood/singlem\n```\nIf the sequence data to be analyzed is in the current working directory, SingleM can be used like so:\n```\ndocker run -v `pwd`:`pwd` wwood/singlem singlem pipe --sequences `pwd`/my.fastq.gz --otu_table `pwd`/my.otu_table.csv --threads 15\n```\n\n#### Installation via PyPI\nTo install the Python libraries required:\n```\npip install graftm\npip install singlem\n```\nYou may need super-user privileges.\n\nSingleM also has the following non-Python dependencies:\n* [BLAST+](http://blast.ncbi.nlm.nih.gov/Blast.cgi)\n* [VSEARCH](https://github.com/torognes/vsearch)\n\nSome dependencies of [GraftM](https://github.com/geronimp/graftM):\n* [OrfM](https://github.com/wwood/OrfM) >= 0.2.0 \n* [HMMER](http://hmmer.janelia.org/) >= 3.1b1 \n* [fxtract](https://github.com/ctSkennerton/fxtract)\n* [pplacer](http://matsen.fhcrc.org/pplacer/) >= 1.1.alpha17\n* [KronaTools](http://sourceforge.net/p/krona/home/krona/) >= 2.4\n* [diamond](https://github.com/bbuchfink/diamond) >= 0.9\n\n## Help\nIf you have any questions or comments, send a message to the [SupportM mailing list](https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!forum/supportm) or raise a [GitHib issue](https://github.com/wwood/singlem/issues).\n\n## License\nSingleM is written by [Ben Woodcroft](http://ecogenomic.org/personnel/dr-ben-woodcroft) (@wwood) at the [Australian Centre for Ecogenomics (UQ)](http://ecogenomic.org/) and is licensed under [GPL3 or later](https://gnu.org/licenses/gpl.html).\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/wwood/SingleM",
    "keywords": "metagenomics bioinformatics",
    "license": "GPL3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "singlem",
    "platform": "",
    "project_url": "https://pypi.org/project/singlem/",
    "release_url": "https://pypi.org/project/singlem/0.8.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Find de-novo operational taxonomic units (OTUs) from metagenome data",
    "version": "0.8.2"
  },
  "releases": {
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8806f295350304210d7300807d42d16d",
          "sha256": "6e129ad769d0ab411221ecd7be4ab7cb11b15c999d8ab11a59f4f93d0a9efb32"
        },
        "downloads": -1,
        "filename": "singlem-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8806f295350304210d7300807d42d16d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39415229,
        "upload_time": "2017-02-11T06:32:05",
        "url": "https://files.pythonhosted.org/packages/35/55/72780c79146b2ccd465016b28eccbe6c326493f5a8db3c489eda3382fbb1/singlem-0.7.1.tar.gz"
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "58033fd17729ecfd6b28e309236f6894",
          "sha256": "6c0213990fd1ebb2a3c18b5bfa919143c0bdb53bbe9d53d4740e3206b9a151d2"
        },
        "downloads": -1,
        "filename": "singlem-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "58033fd17729ecfd6b28e309236f6894",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38893725,
        "upload_time": "2017-07-14T04:17:01",
        "url": "https://files.pythonhosted.org/packages/17/8b/f553c11bbb3e950516589aa26299b85098d0ac78405a4ebacefa023de306/singlem-0.8.0.tar.gz"
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f14a8e93398ba7cf0abb1c93981db00c",
          "sha256": "d8a7025f7526cd3a589369085a1cc39227aaca13c9d9ef222c1d9d972c3a6c9e"
        },
        "downloads": -1,
        "filename": "singlem-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f14a8e93398ba7cf0abb1c93981db00c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38892788,
        "upload_time": "2017-08-14T00:10:49",
        "url": "https://files.pythonhosted.org/packages/b6/f9/9538a096be3c2cc820642d87a626e45ce03f55716175025605b2d33f5e39/singlem-0.8.1.tar.gz"
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b4f46be616d05530237eb208d819f151",
          "sha256": "2b5704510674e44c81d29b73f937853b84715884f802d737ce4a6e68379665a5"
        },
        "downloads": -1,
        "filename": "singlem-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b4f46be616d05530237eb208d819f151",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 44891666,
        "upload_time": "2018-01-14T05:41:49",
        "url": "https://files.pythonhosted.org/packages/ca/c5/95b117cf1ebc381cf922280dd0aaaf9967777c903c8a079330728a278709/singlem-0.8.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b4f46be616d05530237eb208d819f151",
        "sha256": "2b5704510674e44c81d29b73f937853b84715884f802d737ce4a6e68379665a5"
      },
      "downloads": -1,
      "filename": "singlem-0.8.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b4f46be616d05530237eb208d819f151",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 44891666,
      "upload_time": "2018-01-14T05:41:49",
      "url": "https://files.pythonhosted.org/packages/ca/c5/95b117cf1ebc381cf922280dd0aaaf9967777c903c8a079330728a278709/singlem-0.8.2.tar.gz"
    }
  ]
}