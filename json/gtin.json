{
  "info": {
    "author": "David Belais",
    "author_email": "davebelais@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "To install::\r\n\r\n$ pip install gtin\r\n\r\ngtin.GTIN\r\n---------\r\n\r\nThis class represents a Global Trade Item Number, and can be used to:\r\n\r\n- Identify a trade item's GCP (GS1 Company Prefix), Item Reference, and Indicator Digit.\r\n- Validate a GTIN's check-digit.\r\n- Calculate a check-digit from a raw GTIN.\r\n\r\n**Parameters**:\r\n\r\n:gtin:\r\n\r\n    A string or number representing a GTIN, including the check-digit.\r\n    \r\n    - When the *gtin* parameter is provided, the last (rightmost) digit is used to validate the GTIN if\r\n      no value is provided for the parameter *check_digit*.\r\n            \r\n:length:\r\n\r\n    The length of the GTIN.\r\n    \r\n    - If no value is passed for *length*, and *gtin* is a *str*\u2014*length* is inferred based on the character\r\n      length of *gtin*.\r\n    - If no value is passed for *length*, *gtin* is *None*, and *raw* is a *str*\u2014*length* is inferred based\r\n      on the length of *raw* (adding 1, to account for the absent check-digit).\r\n    - If no length is passed, and none can be inferred from *gtin* or *raw*, *length* defaults to 14.\r\n        \r\n:raw:\r\n\r\n    A string or number representing the GTIN, excluding the check-digit.\r\n    \r\n    - If a value is provided for the parameter *gtin*, this parameter is not used, but is instead derived\r\n      from *gtin*.\r\n\r\nIn lieu of passing a complete GTIN, with or without the check-digit, using the above parameters\u2014it is possible to\r\npass the components of the GTIN separately: the indicator digit, GCP (GS1 Company Prefix), item reference, and\r\n(optionally) the check-digit.\r\n\r\n:indicator_digit:\r\n\r\n    This is the first (leftmost) digit of a GTIN-14.\r\n    \r\n    - \"0\" indicates a base unit.\r\n    - \"1\" through \"8\" are used to define the packaging hierarchy of a product with the same item reference.\r\n    - \"9\" indicates a variable-measure trade item.\r\n     \r\n:gcp:\r\n\r\n    The GS1 Company Prefix is a globally unique identifier assigned to a company by GS1 Member Organizations to\r\n    create the identification numbers of the GS1 System. Company Prefixes, which vary in length, are comprised\r\n    of a GS1 Prefix and a Company Number.\r\n    \r\n:item_reference:\r\n\r\n    The item reference is the part of the GTIN that is allocated by the user to identify a trade item for a\r\n    given Company Prefix. The Item Reference varies in length as a function of the Company Prefix length.\r\n    \r\n:check_digit:\r\n\r\n    A mod-10 algorithm digit used to check for input errors. To understand how this digit is calculated, refer\r\n    to: http://www.gs1.org/how-calculate-check-digit-manually. If this parameter is provided, it is matched\r\n    against the calculated check-digit, and an error is raised if it does not match the calculated check-digit.\r\n\r\nExamples\r\n~~~~~~~~\r\n\r\n>>> from gtin import GTIN\r\n\r\nA *GTIN* initialized without any arguments:\r\n\r\n>>> print(repr(GTIN()))\r\nGTIN('00000000000000')\r\n\r\nTypical usage will require converting your *GTIN* to a *str* prior to use in your application.\r\n\r\n>>> print(str(GTIN()))\r\n00000000000000\r\n\r\nGiven a raw GTIN, the check-digit is calculated and appended.\r\n\r\n>>> print(str(GTIN(raw='0978289450809')))\r\n09782894508091\r\n\r\nGiven a valid GTIN *str* for *gtin*, the return value of *str(GTIN(gtin))* is equal to *gtin*.\r\n\r\n>>> print(str(GTIN('04000101613600')))\r\n04000101613600\r\n\r\nNon-numeric characters are ignored/discarded.\r\n\r\n>>> print(str(GTIN('0-4000101-6136-00')))\r\n04000101613600\r\n\r\nGiven a an *int* for the parameter *raw*, the length defaults to 14.\r\n\r\n>>> print(str(GTIN(raw=7447010150)))\r\n00074470101505\r\n\r\n>>> print(str(GTIN(74470101505)))\r\n00074470101505\r\n\r\nGiven a GTIN, and a length:\r\n\r\n>>> print(str(GTIN(raw=7447010150,length=12)))\r\n074470101505\r\n\r\n>>> print(str(GTIN(74470101505,length=12)))\r\n074470101505\r\n\r\n>>> print(str(GTIN('74470101505',length=14)))\r\n00074470101505\r\n\r\nGet the GCP of a GTIN:\r\n\r\n>>> print(GTIN('00041333704647').gcp)\r\n0041333\r\n\r\n>>> print(GTIN('00811068011972').gcp)\r\n081106801\r\n\r\n>>> print(GTIN('00188781000171').gcp)\r\n0188781000\r\n\r\nGet the component parts of a *GTIN* instance as a tuple containing\r\n*GTIN.indicator_digit*, *GTIN.gcp*, *GTIN.item_reference*, and *GTIN.check_digit*:\r\n\r\n>>> print(tuple(GTIN(raw='0400010161360')))\r\n('0', '4000101', '61360', '0')",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/davebelais/gtin",
    "keywords": "upc ean jan isbn gs1",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "gtin",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/gtin/",
    "release_url": "https://pypi.org/project/gtin/0.1.4/",
    "requires_python": null,
    "summary": "A module for parsing GTINs (\"Global Trade Item Numbers\"\u2014also known as UPC/EAN/JAN/ISBN).",
    "version": "0.1.4"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a6750608305df05d385dbc27596046a4",
          "sha256": "41d6ca25e10f1b6cac49a7145b1b2209d2c777a8e2e920b8b03a2eff38d4e47d"
        },
        "downloads": 398,
        "filename": "gtin-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6750608305df05d385dbc27596046a4",
        "packagetype": "bdist_wheel",
        "python_version": "any",
        "size": 11956,
        "upload_time": "2016-03-10T04:43:09",
        "url": "https://files.pythonhosted.org/packages/dc/a7/2fa0613d65dbfb45469871ca1a7d645900d21262e2623ce6f6d46f6f8789/gtin-0.1.2-py2.py3-none-any.whl"
      }
    ],
    "0.1.2": [],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5c5839db254bb1bab0a0d6b547971226",
          "sha256": "2027ea2e9f6c8e63b9e4b643f66a15a4f8c43fecfb91d3c2283bcf7f4772c75a"
        },
        "downloads": 205,
        "filename": "gtin-0.1.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c5839db254bb1bab0a0d6b547971226",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 11956,
        "upload_time": "2016-03-11T02:17:50",
        "url": "https://files.pythonhosted.org/packages/6b/3d/22a951ecaa9b430a37097be50501dad01a8f2be22d29afa8462c241c723c/gtin-0.1.3-py2.py3-none-any.whl"
      }
    ],
    "0.1.4": []
  },
  "urls": []
}