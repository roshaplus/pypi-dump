{
  "info": {
    "author": "Leonardo Uieda",
    "author_email": "leouieda@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "GMT Python\n==========\n\n**A Python interface for the Generic Mapping Tools C API.**\n\n.. image:: http://img.shields.io/pypi/v/gmt-python.svg?style=flat-square\n    :alt: Latest version on PyPI\n    :target: https://pypi.python.org/pypi/gmt-python\n.. image:: http://img.shields.io/travis/GenericMappingTools/gmt-python/master.svg?style=flat-square\n    :alt: Travis CI build status\n    :target: https://travis-ci.org/GenericMappingTools/gmt-python\n.. image:: http://img.shields.io/coveralls/GenericMappingTools/gmt-python/master.svg?style=flat-square\n    :alt: Test coverage status\n    :target: https://coveralls.io/r/GenericMappingTools/gmt-python?branch=master\n\n\nWarning\n-------\n\n**This package in early stages of design and implementation.**\n\nWe welcome any feedback and ideas!\nLet us know by submitting\n`issues on Github <https://github.com/GenericMappingTools/gmt-python/issues>`__.\n\n\nGoals\n-----\n\n* Provide access to GMT modules from Python using the GMT C API (no system\n  calls).\n* Input and output using Python native containers: numpy ``ndarray`` or pandas\n  ``DataFrame`` for data tables and `xarray <http://xarray.pydata.org>`__\n  ``Dataset`` for netCDF grids.\n* Integration with the `Jupyter notebook <http://jupyter.org/>`__ to display\n  plots and maps inline.\n* API design familiar for veteran GMT users (arguments ``R``,\n  ``J``, etc) with more newbie-friendly alternatives/aliases\n  (``region=[10, 20, -30, -10]``,  ``projection='M'``, etc).\n\n\nPrevious work\n-------------\n\nTo my knowledge, there have been 3 attempts at a GMT Python interface:\n\n* `gmtpy <https://github.com/emolch/gmtpy>`__ by\n  `Sebastian Heimann <https://github.com/emolch>`__\n* `pygmt <https://github.com/ian-r-rose/pygmt>`__ by\n  `Ian Rose <https://github.com/ian-r-rose>`__\n* `PyGMT <https://github.com/glimmer-cism/PyGMT>`__  by\n  `Magnus Hagdorn <https://github.com/mhagdorn>`__\n\nOnly ``gmtpy`` has received commits since 2014 and is the more mature\nalternative.\nHowever, the project `doesn't seem to be very activate\n<https://github.com/emolch/gmtpy/graphs/contributors>`__.\nBoth ``gmtpy`` and ``PyGMT`` use system class (through ``subprocess.Popen``)\nand pass input and output through ``subprocess.PIPE``.\n``pygmt`` seems to call the GMT C API directly through a hand-coded Python C\nextension.\nThis might compromise the portability of the package across operating systems\nand makes distribution very painful.\n\n\nDesign\n------\n\n``gmt-python`` is made for the future. We will support **only Python 3.5 or\nlater** and require the `new \"modern\" mode of GMT <http://gmt.soest.hawaii.edu/boards/2/topics/4930>`__\n(currently only in the ``trunk`` of the SVN repository).\nThe ``modern`` mode removes the need for ``-O -K`` and explicitly redirecting\nto a ``.ps`` file.\nThis all happens in the background.\nA final call to ``gmt psconvert`` brings the plot out of hiding and finalizes\nthe Postscript.\nThis mode is perfect for the Python interface, which would have to handle\ngeneration of the Postscript file in the background anyway.\n\nWe will wrap the GMT C API using the `ctypes\n<https://docs.python.org/3/library/ctypes.html>`__ module of the Python\nstandard library.\n``ctypes`` grants access to C data types and foreign functions in DDLs and\nshared libraries, making it possible to wrap these libraries with pure Python\ncode.\nNot having compiled modules makes packaging and distribution of Python software\na lot easier.\n\nWrappers for GMT data types and C functions will be implemented in a lower\nlevel wrapper library.\nThese will be direct ``ctypes`` wrappers of the GMT module functions and any\nother function that is needed on the Python side.\nThe low-level functions will not handle any data type conversion or setting up\nof argument list.\n\nWe'll also provide higher level functions that mirror all GMT modules.\nThese functions will be built on top of the low-level library and will handle\nall data conversions and parsing of arguments.\nThis is the part of the library with which the user will interact (the GMT\nPython API).\n\n\nThe GMT Python API\n++++++++++++++++++\n\nEach GMT module has a function in the ``gmt`` package.\nCommand-line arguments are passes as function keyword arguments.\nData can be passed as file names or in-memory data.\n\nThe simplest usage would be with data in a file and generating a PDF output\nfigure, just as a normal GMT script::\n\n    import gmt\n\n    cpt = gmt.makecpt(C='cubhelix', T=[-4500, 4500])\n    gmt.grdimage(input='grid.nc', J='M6i', B='af', P=True, C=cpt)\n    gmt.psscale(C=cpt, D='jTC+w6i/0.2i+h+e+o0/1i', B='af')\n    gmt.psconvert(T='f', F='my-figure')\n\nArguments can also be passed as in the GMT command-line by using a single\nstring::\n\n    import gmt\n\n    gmt.makecpt('-Ccubhelix -T-4500/4500', output='my.cpt')\n    gmt.grdimage('grid.nc -JM6i -Baf -P -Cmy.cpt')\n    gmt.psscale('-Cmy.cpt -DjTC+w6i/0.2i+h+e+o0/1i -Baf')\n    gmt.psconvert('-Tf -Fmy-figure')\n\nNotice that output that would be redirected to a file is specified using the\n``output`` keyword argument.\n\nYou can also pass in data from Python.\nGrids in netCDF format are passed as xarray ``Datasets`` that can come from a\nnetCDF file or generated in memory::\n\n    import gmt\n    import xarray as xr\n\n    data = xr.open_dataset('grid.nc')\n\n    cpt = gmt.makecpt(C='cubhelix', T='-4500/4500')\n    gmt.grdimage(input=data, J='M6i', B='af', P=True, C=cpt)\n    gmt.psconvert(T='f', F='my-figure')\n\nTabular data can be passed as numpy arrays::\n\n    import numpy as np\n    import gmt\n\n    data = np.loadtxt('data_file.csv')\n\n    cpt = gmt.makecpt(C=\"red,green,blue\", T=\"0,70,300,10000\")\n    gmt.pscoast(R='g', J='N180/10i', G='bisque', S='azure1', B='af', X='c')\n    gmt.psxy(input=data, S='ci', C=cpt, h='i1', i='2,1,3,4+s0.02')\n    gmt.psconvert(T='f', F='my-figure')\n\n\nIn the Jupyter notebook, we can preview the plot by calling ``gmt.show()``,\nwhich embeds the image in the notebook::\n\n    import numpy as np\n    import gmt\n\n    data = np.loadtxt('data_file.csv')\n\n    cpt = gmt.makecpt(C=\"red,green,blue\", T=\"0,70,300,10000\")\n    gmt.pscoast(R='g', J='N180/10i', G='bisque', S='azure1', B='af', X='c')\n    gmt.psxy(input=data, S='ci', C=cpt, h='i1', i='2,1,3,4+s0.02')\n    gmt.show()\n\n``gmt.show`` will call ``psconvert`` in the background to get a PNG image back\nand use ``IPython.display.Image`` to insert it into the notebook.\n\n**TODO**: We're still thinking of the best way to call ``gmt.psconvert`` first\nto generate a high-quality PDF and right after call ``gmt.show()`` for an\ninline preview.\nThe issue is that ``psconvert`` deletes the temporary Postscript file that was\nbeing constructed on the background, this calling it a second time through\n``gmt.show()`` would not work.\nAny suggestions are welcome!\n\n\nPackage organization\n++++++++++++++++++++\n\nThe general layout of the Python package will probably look something like\nthis::\n\n\n    gmt/\n        c_api/     # Package with low-level wrappers for the C API\n            ...\n        modules/  # Defines the functions corresponding to GMT modules\n            ...\n\n\nThe module functions\n++++++++++++++++++++\n\nThe functions corresponding to GMT modules (``pscoast``, ``psconvert``, etc)\nare how the user interacts with the Python API.\nThey will be organized in different files in the ``gmt.modules`` package but\nwill all be accessible from the ``gmt`` package namespace.\nFor example, ``pscoast`` can live in ``gmt/modules/ps_generating.py`` but can\nbe called as ``gmt.pscoast``.\n\nHere is what a module function will look like::\n\n    def module_function(**kwargs):\n        \"\"\"\n        Docstring explaining what each option is and all the aliases.\n\n        Likely derived from the GMT documentation.\n        \"\"\"\n        # Convert any inputs into things the C API can digest\n        ...\n        # Parse the keyword arguments and make an \"args\" list\n        ...\n        # Call the module function from the C API with the inputs\n        ...\n        # Process any outputs from the C API into Python data types\n        ...\n        return output\n\n\nWe will automate this process as much as possible:\n\n* Common options in the docstrings can be reused from an ``OPTIONS``\n  dictionary.\n* Parsing of common arguments (R, J, etc) can be done by a function.\n* Creating the GMT session and calling the module can be automated.\n* Conversion of inputs and outputs will most likely be: tables to numpy arrays,\n  grids to xarray ``Datasets``, text to Python text.\n\nMost of the work in this part will be wrapping all of the many GMT modules,\nparsing non-standard options, and making sure the docstrings are accurate.\nIt might even be possible to automatically generate the docstrings or parts of\nthem from the command-line help messages by passing a Python callback as the\n``print_func`` when creating a GMT session.\n\n\nThe low-level wrappers\n++++++++++++++++++++++\n\nThe low-level wrapper functions will be bare-bones ``ctypes`` foreign functions\nfrom the ``libgmt.so`` shared library.\nThe functions can be accessed from Python like so::\n\n    import ctypes as ct\n\n    libgmt = ct.cdll.LoadLibrary(\"libgmt.so\")\n\n    # Functions are accessed as members of the 'libgmt' object\n    GMT_Call_Module = libgmt.GMT_Call_Module\n\n    # Call them like normal Python functions\n    GMT_Call_Module(... inputs ...)\n\n\nThe tricky part is making sure the functions get the input types they need.\n``ctypes`` provides access to C data types and a way to specify the data type\nconversions that the function requires::\n\n    GMT_Call_Module.argstypes = [ct.c_void_p, ct.c_char_p, ct.c_int, ct.c_void_p]\n\nThis is fine for standard data types like ``int``, ``char``, etc, but will need\nextra work for custom GMT ``struct``.\nThese data types will need to be wrapped by Python classes that inherit from\n``ctypes.Structure``.\n\nThe ``gmt.c_api`` module will expose these foreign functions (with output and\ninput types specified) and GMT data types for the modules to use.\n\nThe main entry point into GMT will be through the ``GMT_Call_Module`` function.\nThis is what the ``gmt`` command-line application uses to run a given\nmodule, like ``GMT_pscoast`` for example.\nWe will use it to run the modules from the Python side as well.\nIt has the following signature::\n\n    int GMT_Call_Module (void *V_API, const char *module, int mode, void *args)\n\nThe arguments ``module``, ``mode``, and ``args`` (the command-line argument\nlist) are plain C types and can be generated easily using ``ctypes``.\nThe Python module code will need to generate the ``args`` array from the\ngiven function arguments.\nThe ``V_API`` argument is a \"GMT Session\" and is created through the\n``GMT_Create_Session`` function, which will have to be wrapped as well.\n\nThe input and output of Python data will be handled through the GMT virtual\nfile machinery.\nThis allows us to write data to a memory location instead of a file without GMT\nknowing the difference.\nFor input, we can use ``GMT_Open_VirtualFile`` and point it to the location in\nmemory of the Python data, for example using `numpy.ndarray.ctypes\n<https://docs.scipy.org/doc/numpy/reference/generated/numpy.ndarray.ctypes.html>`__.\nWe can also translate the Python data into ``ctypes`` compatible types.\nThe virtual file pointer can also be passed as the output option for the\nmodule, for example as ``-G`` or through redirection (``->``).\nWe can read the contents of the virtual file using ``GMT_Read_VirtualFile``.\n\n\nLicense\n-------\n\ngmt-python is free software: you can redistribute it and/or modify it under the\nterms of the **BSD 3-clause License**. A copy of this license is provided in\n``LICENSE.txt``.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/GenericMappingTools/gmt-python",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gmt-python",
    "platform": "Any",
    "project_url": "https://pypi.org/project/gmt-python/",
    "release_url": "https://pypi.org/project/gmt-python/0.1a1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A Python interface for the Generic Mapping Tools",
    "version": "0.1a1"
  },
  "releases": {
    "0.1a0": [],
    "0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "30cb495ac4288eccdcde69c430ad744a",
          "sha256": "c7f04ef2da4f990c25a3be18bbe68ee8362027116684641233d2ae31c68a1829"
        },
        "downloads": 0,
        "filename": "gmt_python-0.1a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "30cb495ac4288eccdcde69c430ad744a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 13027,
        "upload_time": "2017-07-01T00:37:39",
        "url": "https://files.pythonhosted.org/packages/7f/75/6d5d43d82014f74f42527cd043a8f920533fd4b3da4656f381dcc816e608/gmt_python-0.1a1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c7aafe8079ab8f541da03c9cf70bf273",
          "sha256": "4dded4c899e7e38be4ad05d596ac4ffcbf810e6625b7249e059f778314877136"
        },
        "downloads": 0,
        "filename": "gmt-python-0.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "c7aafe8079ab8f541da03c9cf70bf273",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28825,
        "upload_time": "2017-07-01T00:37:40",
        "url": "https://files.pythonhosted.org/packages/cf/e6/ecd3065db3b0829339ef07497bb48411c4a48e2a49a23e4ab2fe9ff5ed44/gmt-python-0.1a1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "30cb495ac4288eccdcde69c430ad744a",
        "sha256": "c7f04ef2da4f990c25a3be18bbe68ee8362027116684641233d2ae31c68a1829"
      },
      "downloads": 0,
      "filename": "gmt_python-0.1a1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "30cb495ac4288eccdcde69c430ad744a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 13027,
      "upload_time": "2017-07-01T00:37:39",
      "url": "https://files.pythonhosted.org/packages/7f/75/6d5d43d82014f74f42527cd043a8f920533fd4b3da4656f381dcc816e608/gmt_python-0.1a1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "c7aafe8079ab8f541da03c9cf70bf273",
        "sha256": "4dded4c899e7e38be4ad05d596ac4ffcbf810e6625b7249e059f778314877136"
      },
      "downloads": 0,
      "filename": "gmt-python-0.1a1.tar.gz",
      "has_sig": false,
      "md5_digest": "c7aafe8079ab8f541da03c9cf70bf273",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 28825,
      "upload_time": "2017-07-01T00:37:40",
      "url": "https://files.pythonhosted.org/packages/cf/e6/ecd3065db3b0829339ef07497bb48411c4a48e2a49a23e4ab2fe9ff5ed44/gmt-python-0.1a1.tar.gz"
    }
  ]
}