{
  "info": {
    "author": "Scott Torborg",
    "author_email": "storborg@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License"
    ],
    "description": "Checklist\n=========\n\n`Scott Torborg <http://www.scotttorborg.com>`_\n\n\nbasically:\n- a command line app called \"checklist\" or similar\n- you call \"checklist register foo.txt\" to register a new checklist. the checklist is basically just markdown or text, auto-identified and parsed by the tool\n12:01\nTuesday, September 15, 2015\n\n12:01\nScott Torborg\n- in a project dir, you call \"checklist\". it checks for locally stored state in e.g. checklist.json. if not found, it prompts you to select a checklist from the list of registered ones. (or you could pass it on the command line)\n- then, it uses the stored state (or lack thereof) to run you through the checklist you previously registered. so for example, you could have a checklist for releasing a python package, or an eagle pcb layout, etc.\n- you can update checklists just by re-registering them. this will cause successive \"checklist\" invocations on projects that already have checklist state to prompt you for newly added things.\nthoughts?\n\n12:04\nMike Spindel\nyeah, i like it a lot\nthere are a million things where process should be recorded, but it's not quite worth fully automating\nhow do you reset the checklist?\n\n12:05\nScott Torborg\nyeah, I was thinking about that.\nmaybe \"checklist reset\" or \"checklist install_hook\"\nthe latter would install a git post-commit hook which resets the checklist\nor something like that...\n\n12:05\nMike Spindel\nhrm, yeah\n\n12:06\nScott Torborg\nor....\nit could be version control or file mod time aware\n\n12:06\nMike Spindel\npost-commit hook is maybe a bad idea without a pre-commit hook\n\n12:06\nScott Torborg\nand be like \"have you changed files in this tree since the last checklist run-through\"\n\n12:06\nMike Spindel\ni think those things aren't robust enough\n\n12:06\nScott Torborg\nyeah, it's hard\u2026\nyou'd get a lot of false positives.\n\n12:06\nMike Spindel\ni'd rather keep the basic system super simple\nand have hooks that can be called, if you want to spend the time integrating for a specific project\nso, have a \"checklist verify-complete\"\nthat just sets the return value\nand then you could use that in a precommit hook or whatever\n\n12:08\nScott Torborg\nyeah, that'd be good\nor in a tox run or something\n\n12:08\nMike Spindel\noh yeah\nlike a \"checklist mark-complete <task-name>\"\n\n12:08\nScott Torborg\nbut that still leaves the challenge of resets\ndo you reset on any file change?\n\n12:09\nMike Spindel\nhrm\ni feel like that's needlessly tyrannic\nalthough, maybe it's more convenient most of the time\ni think that 1% of cases where you don't want to reset everything would kill it\n\n12:11\nScott Torborg\nwell, you don't necessarily have to complete it all the time\nlike, for a python package, I might set it up so that bumpr runs verify-complete or something\nor my eagle CAM makefile\n(once I get that working again_\n)\n\n12:12\nMike Spindel\nhm, sure\n\n12:13\nScott Torborg\nactually, gahd, that would be perfect.\n\n\nInstallation\n============\n\nInstall with pip::\n\n    $ pip install checklist\n\nLicense\n=======\n\nChecklist is licensed under an MIT license. Please see the LICENSE file for more\ninformation.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/storborg/checklist",
    "keywords": "checklist cad code review",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "checklist",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/checklist/",
    "release_url": "https://pypi.org/project/checklist/0.0.1.dev0/",
    "requires_python": null,
    "summary": "Follow the checklist, dummy.",
    "version": "0.0.1.dev0"
  },
  "releases": {
    "0.0.1.dev0": []
  },
  "urls": []
}