{
  "info": {
    "author": "Tommy",
    "author_email": "BrianNiccol@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Terminals"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/colourama.svg\n    :target: https://pypi.python.org/pypi/colourama/\n    :alt: Latest Version\n\n.. image:: https://travis-ci.org/tartley/colourama.svg?branch=master\n    :target: https://travis-ci.org/tartley/colourama\n    :alt: Build Status\n\nDownload and docs:\n    http://pypi.python.org/pypi/colourama\nSource code & Development:\n    https://github.com/tartley/colourama\n\nDescription\n===========\n\nMakes ANSI escape character sequences (for producing colored terminal text and\ncursor positioning) work under MS Windows.\n\nANSI escape character sequences have long been used to produce colored terminal\ntext and cursor positioning on Unix and Macs. colourama makes this work on\nWindows, too, by wrapping ``stdout``, stripping ANSI sequences it finds (which\nwould appear as gobbledygook in the output), and converting them into the\nappropriate win32 calls to modify the state of the terminal. On other platforms,\ncolourama does nothing.\n\ncolourama also provides some shortcuts to help generate ANSI sequences\nbut works fine in conjunction with any other ANSI sequence generation library,\nsuch as the venerable Termcolor (http://pypi.python.org/pypi/termcolor)\nor the fabulous Blessings (https://pypi.python.org/pypi/blessings).\n\nThis has the upshot of providing a simple cross-platform API for printing\ncolored terminal text from Python, and has the happy side-effect that existing\napplications or libraries which use ANSI sequences to produce colored output on\nLinux or Macs can now also work on Windows, simply by calling\n``colourama.init()``.\n\nAn alternative approach is to install ``ansi.sys`` on Windows machines, which\nprovides the same behaviour for all applications running in terminals. colourama\nis intended for situations where that isn't easy (e.g., maybe your app doesn't\nhave an installer.)\n\nDemo scripts in the source code repository print some colored text using\nANSI sequences. Compare their output under Gnome-terminal's built in ANSI\nhandling, versus on Windows Command-Prompt using colourama:\n\n.. image:: https://github.com/tartley/colourama/raw/master/screenshots/ubuntu-demo.png\n    :width: 661\n    :height: 357\n    :alt: ANSI sequences on Ubuntu under gnome-terminal.\n\n.. image:: https://github.com/tartley/colourama/raw/master/screenshots/windows-demo.png\n    :width: 668\n    :height: 325\n    :alt: Same ANSI sequences on Windows, using colourama.\n\nThese screengrabs show that, on Windows, colourama does not support ANSI 'dim\ntext'; it looks the same as 'normal text'.\n\n\nLicense\n=======\n\nCopyright Jonathan Hartley 2013. BSD 3-Clause license; see LICENSE file.\n\n\nDependencies\n============\n\nNone, other than Python. Tested on Python 2.5.5, 2.6.5, 2.7, 3.1.2, 3.2, 3.3,\n3.4, 3.5 and 3.6.\n\nUsage\n=====\n\nInitialisation\n--------------\n\nApplications should initialise colourama using:\n\n.. code-block:: python\n\n    from colourama import init\n    init()\n\nOn Windows, calling ``init()`` will filter ANSI escape sequences out of any\ntext sent to ``stdout`` or ``stderr``, and replace them with equivalent Win32\ncalls.\n\nOn other platforms, calling ``init()`` has no effect (unless you request other\noptional functionality; see \"Init Keyword Args\", below). By design, this permits\napplications to call ``init()`` unconditionally on all platforms, after which\nANSI output should just work.\n\nTo stop using colourama before your program exits, simply call ``deinit()``.\nThis will restore ``stdout`` and ``stderr`` to their original values, so that\ncolourama is disabled. To resume using colourama again, call ``reinit()``; it is\ncheaper to calling ``init()`` again (but does the same thing).\n\n\nColored Output\n--------------\n\nCross-platform printing of colored text can then be done using colourama's\nconstant shorthand for ANSI escape sequences:\n\n.. code-block:: python\n\n    from colourama import Fore, Back, Style\n    print(Fore.RED + 'some red text')\n    print(Back.GREEN + 'and with a green background')\n    print(Style.DIM + 'and in dim text')\n    print(Style.RESET_ALL)\n    print('back to normal now')\n\n...or simply by manually printing ANSI sequences from your own code:\n\n.. code-block:: python\n\n    print('\\033[31m' + 'some red text')\n    print('\\033[30m') # and reset to default colour\n\n...or, colourama can be used happily in conjunction with existing ANSI libraries\nsuch as Termcolor:\n\n.. code-block:: python\n\n    from colourama import init\n    from termcolor import colored\n\n    # use colourama to make Termcolor work on Windows too\n    init()\n\n    # then use Termcolor for all colored text output\n    print(colored('Hello, World!', 'green', 'on_red'))\n\nAvailable formatting constants are::\n\n    Fore: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.\n    Back: BLACK, RED, GREEN, YELLOW, BLUE, MAGENTA, CYAN, WHITE, RESET.\n    Style: DIM, NORMAL, BRIGHT, RESET_ALL\n\n``Style.RESET_ALL`` resets foreground, background, and brightness. colourama will\nperform this reset automatically on program exit.\n\n\nCursor Positioning\n------------------\n\nANSI codes to reposition the cursor are supported. See ``demos/demo06.py`` for\nan example of how to generate them.\n\n\nInit Keyword Args\n-----------------\n\n``init()`` accepts some ``**kwargs`` to override default behaviour.\n\ninit(autoreset=False):\n    If you find yourself repeatedly sending reset sequences to turn off colour\n    changes at the end of every print, then ``init(autoreset=True)`` will\n    automate that:\n\n    .. code-block:: python\n\n        from colourama import init\n        init(autoreset=True)\n        print(Fore.RED + 'some red text')\n        print('automatically back to default colour again')\n\ninit(strip=None):\n    Pass ``True`` or ``False`` to override whether ansi codes should be\n    stripped from the output. The default behaviour is to strip if on Windows\n    or if output is redirected (not a tty).\n\ninit(convert=None):\n    Pass ``True`` or ``False`` to override whether to convert ANSI codes in the\n    output into win32 calls. The default behaviour is to convert if on Windows\n    and output is to a tty (terminal).\n\ninit(wrap=True):\n    On Windows, colourama works by replacing ``sys.stdout`` and ``sys.stderr``\n    with proxy objects, which override the ``.write()`` method to do their work.\n    If this wrapping causes you problems, then this can be disabled by passing\n    ``init(wrap=False)``. The default behaviour is to wrap if ``autoreset`` or\n    ``strip`` or ``convert`` are True.\n\n    When wrapping is disabled, colored printing on non-Windows platforms will\n    continue to work as normal. To do cross-platform colored output, you can\n    use colourama's ``AnsiToWin32`` proxy directly:\n\n    .. code-block:: python\n\n        import sys\n        from colourama import init, AnsiToWin32\n        init(wrap=False)\n        stream = AnsiToWin32(sys.stderr).stream\n\n        # Python 2\n        print >>stream, Fore.BLUE + 'blue text on stderr'\n\n        # Python 3\n        print(Fore.BLUE + 'blue text on stderr', file=stream)\n\n\nStatus & Known Problems\n=======================\n\nI've personally only tested it on Windows XP (CMD, Console2), Ubuntu\n(gnome-terminal, xterm), and OS X.\n\nSome presumably valid ANSI sequences aren't recognised (see details below),\nbut to my knowledge nobody has yet complained about this. Puzzling.\n\nSee outstanding issues and wishlist:\nhttps://github.com/tartley/colourama/issues\n\nIf anything doesn't work for you, or doesn't do what you expected or hoped for,\nI'd love to hear about it on that issues list, would be delighted by patches,\nand would be happy to grant commit access to anyone who submits a working patch\nor two.\n\n\nRecognised ANSI Sequences\n=========================\n\nANSI sequences generally take the form:\n\n    ESC [ <param> ; <param> ... <command>\n\nWhere ``<param>`` is an integer, and ``<command>`` is a single letter. Zero or\nmore params are passed to a ``<command>``. If no params are passed, it is\ngenerally synonymous with passing a single zero. No spaces exist in the\nsequence; they have been inserted here simply to read more easily.\n\nThe only ANSI sequences that colourama converts into win32 calls are::\n\n    ESC [ 0 m       # reset all (colors and brightness)\n    ESC [ 1 m       # bright\n    ESC [ 2 m       # dim (looks same as normal brightness)\n    ESC [ 22 m      # normal brightness\n\n    # FOREGROUND:\n    ESC [ 30 m      # black\n    ESC [ 31 m      # red\n    ESC [ 32 m      # green\n    ESC [ 33 m      # yellow\n    ESC [ 34 m      # blue\n    ESC [ 35 m      # magenta\n    ESC [ 36 m      # cyan\n    ESC [ 37 m      # white\n    ESC [ 39 m      # reset\n\n    # BACKGROUND\n    ESC [ 40 m      # black\n    ESC [ 41 m      # red\n    ESC [ 42 m      # green\n    ESC [ 43 m      # yellow\n    ESC [ 44 m      # blue\n    ESC [ 45 m      # magenta\n    ESC [ 46 m      # cyan\n    ESC [ 47 m      # white\n    ESC [ 49 m      # reset\n\n    # cursor positioning\n    ESC [ y;x H     # position cursor at x across, y down\n    ESC [ y;x f     # position cursor at x across, y down\n    ESC [ n A       # move cursor n lines up\n    ESC [ n B       # move cursor n lines down\n    ESC [ n C       # move cursor n characters forward\n    ESC [ n D       # move cursor n characters backward\n\n    # clear the screen\n    ESC [ mode J    # clear the screen\n\n    # clear the line\n    ESC [ mode K    # clear the line\n\nMultiple numeric params to the ``'m'`` command can be combined into a single\nsequence::\n\n    ESC [ 36 ; 45 ; 1 m     # bright cyan text on magenta background\n\nAll other ANSI sequences of the form ``ESC [ <param> ; <param> ... <command>``\nare silently stripped from the output on Windows.\n\nAny other form of ANSI sequence, such as single-character codes or alternative\ninitial characters, are not recognised or stripped. It would be cool to add\nthem though. Let me know if it would be useful for you, via the Issues on\nGitHub.\n\n\nDevelopment\n===========\n\nHelp and fixes welcome!\n\nRunning tests requires:\n\n- Michael Foord's ``mock`` module to be installed.\n- Tests are written using 2010-era updates to ``unittest``, and require\n  Python 2.7 or greater, OR to have Michael Foord's ``unittest2`` module\n  installed.\n\nTo run tests::\n\n   python -m unittest discover -p *_test.py\n\nThis, like a few other handy commands, is captured in a ``Makefile``.\n\nIf you use nose to run the tests, you must pass the ``-s`` flag; otherwise,\n``nosetests`` applies its own proxy to ``stdout``, which confuses the unit\ntests.\n\n\nThanks\n======\n* Marc Schlaich (schlamar) for a ``setup.py`` fix for Python2.5.\n* Marc Abramowitz, reported & fixed a crash on exit with closed ``stdout``,\n  providing a solution to issue #7's setuptools/distutils debate,\n  and other fixes.\n* User 'eryksun', for guidance on correctly instantiating ``ctypes.windll``.\n* Matthew McCormick for politely pointing out a longstanding crash on non-Win.\n* Ben Hoyt, for a magnificent fix under 64-bit Windows.\n* Jesse at Empty Square for submitting a fix for examples in the README.\n* User 'jamessp', an observant documentation fix for cursor positioning.\n* User 'vaal1239', Dave Mckee & Lackner Kristof for a tiny but much-needed Win7\n  fix.\n* Julien Stuyck, for wisely suggesting Python3 compatible updates to README.\n* Daniel Griffith for multiple fabulous patches.\n* Oscar Lesta for a valuable fix to stop ANSI chars being sent to non-tty\n  output.\n* Roger Binns, for many suggestions, valuable feedback, & bug reports.\n* Tim Golden for thought and much appreciated feedback on the initial idea.\n* User 'Zearin' for updates to the README file.\n* John Szakmeister for adding support for light colors\n* Charles Merriam for adding documentation to demos\n* Jurko for a fix on 64-bit Windows CPython2.5 w/o ctypes\n* Florian Bruhin for a fix when stdout or stderr are None\n* Thomas Weininger for fixing ValueError on Windows\n* Remi Rampin for better Github integration and fixes to the README file\n* Simeon Visser for closing a file handle using 'with' and updating classifiers\n  to include Python 3.3 and 3.4\n* Andy Neff for fixing RESET of LIGHT_EX colors.\n* Jonathan Hartley for the initial idea and implementation.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "colour colour terminal text ansi windows crossplatform xplatform",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "colourama",
    "platform": "",
    "project_url": "https://pypi.org/project/colourama/",
    "release_url": "https://pypi.org/project/colourama/0.1.6/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Cross-platform coloured terminal text.",
    "version": "0.1.6"
  },
  "releases": {
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2b0993cfcfa1a4bb2b422920bb9fbc66",
          "sha256": "e4cf69581bad32164548b176f94a45d3288d0c70baec2604400ba778a1b321e9"
        },
        "downloads": -1,
        "filename": "colourama-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2b0993cfcfa1a4bb2b422920bb9fbc66",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26376,
        "upload_time": "2017-12-05T02:37:40",
        "url": "https://files.pythonhosted.org/packages/6b/c0/7078dd08480cd77df1f824284c0c67ecf86bb55a6fb47bc1076aac2bfe79/colourama-0.1.5.tar.gz"
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f2a663a7f7c43e589e08b28b0c12af3b",
          "sha256": "8af0579a8e4b22872a6fdaf6c664409fca955122caeec31d037e9140d37bd2fa"
        },
        "downloads": -1,
        "filename": "colourama-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "f2a663a7f7c43e589e08b28b0c12af3b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26568,
        "upload_time": "2017-12-05T18:04:43",
        "url": "https://files.pythonhosted.org/packages/9d/35/4046f5c4b293aaeca322a1a41139db7d14b760f3968b3dd0815865567035/colourama-0.1.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f2a663a7f7c43e589e08b28b0c12af3b",
        "sha256": "8af0579a8e4b22872a6fdaf6c664409fca955122caeec31d037e9140d37bd2fa"
      },
      "downloads": -1,
      "filename": "colourama-0.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "f2a663a7f7c43e589e08b28b0c12af3b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 26568,
      "upload_time": "2017-12-05T18:04:43",
      "url": "https://files.pythonhosted.org/packages/9d/35/4046f5c4b293aaeca322a1a41139db7d14b760f3968b3dd0815865567035/colourama-0.1.6.tar.gz"
    }
  ]
}