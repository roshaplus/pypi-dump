{
  "info": {
    "author": "Jason Simeone",
    "author_email": "jay@classless.net",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Console",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing"
    ],
    "description": "******\nTidyPy\n******\n\n.. image:: https://travis-ci.org/jayclassless/tidypy.svg?branch=master\n   :target: https://travis-ci.org/jayclassless/tidypy\n.. image:: https://img.shields.io/pypi/v/tidypy.svg\n   :target: https://pypi.python.org/pypi/tidypy\n.. image:: https://img.shields.io/pypi/l/tidypy.svg\n   :target: https://pypi.python.org/pypi/tidypy\n\n.. contents:: Contents\n\n\nOverview\n--------\nTidyPy is a tool that encapsulates a number of other static analysis tools and\nmakes it easy to configure, execute, and review their results.\n\n\nFeatures\n--------\nTODO\n\n\nUsage\n-----\nWhen TidyPy is installed, the ``tidypy`` command should become available in\nyour environment::\n\n    $ tidypy\n    Usage: tidypy [OPTIONS] COMMAND [ARGS]...\n\n      A tool that executes several static analysis tools upon a Python project\n      and aggregates the results.\n\n    Options:\n      --version  Show the version and exit.\n      --help     Show this message and exit.\n\n    Commands:\n      check           Executes the tools upon the project files.\n      default-config  Outputs a default configuration that can be used to\n                      bootstrap your own configuration file.\n      list-codes      Outputs a listing of all known issue codes that tools may\n                      report.\n\nTo have TidyPy analyze your project, use the ``check`` subcommand::\n\n    $ tidypy check --help\n    Usage: tidypy check [OPTIONS] [PATH]\n\n      Executes the tools upon the project files.\n\n      Accepts one argument, which is the path to the base of the Python project.\n      If not specified, defaults to the current working directory.\n\n    Options:\n      -x, --exclude REGEX             Specifies a regular expression matched\n                                      against paths that you want to exclude from\n                                      the examination. Can be specified multiple\n                                      times. Overrides the expressions specified\n                                      in the configuration file.\n      -t, --tool [bandit|eradicate|jsonlint|polint|pycodestyle|pydocstyle|pyflakes|pylint|pyroma|radon|rstlint|vulture|yamllint]\n                                      Specifies the name of a tool to use during\n                                      the examination. Can be specified multiple\n                                      times. Overrides the configuration file.\n      -r, --report [console|csv|json|null|pycodestyle|pylint|toml|yaml]\n                                      Specifies the name of a report to execute\n                                      after the examination. Can be specified\n                                      multiple times. Overrides the configuration\n                                      file.\n      --no-merge                      Disable the merging of issues from various\n                                      tools when TidyPy considers them equivalent.\n                                      Overrides the configuration file.\n      --silence-tool-crashes          If the execution of a tool results in an\n                                      unexpected Exception, be quiet about it.\n                                      Default behavior is to print an error and\n                                      traceback to stderr.\n      --threads NUM_THREADS           The number of threads to use to concurrently\n                                      execute the tools. Overrides the\n                                      configuration file.  [default: 3]\n      --no-progress                   Disable the display of the progress bar.\n      --help                          Show this message and exit.\n\nIf you need to generate a skeleton configuration file with the default options,\nuse the ``default-config`` subcommand::\n\n    $ tidypy default-config --help\n    Usage: tidypy default-config [OPTIONS]\n\n      Outputs a default configuration that can be used to bootstrap your own\n      configuration file.\n\n    Options:\n      --pyproject  Output the config so that it can be used in a pyproject.toml\n                   file.\n      --help       Show this message and exit.\n\nIf you'd like to see a list of the possible issue codes that could be returned,\nuse the ``list-codes`` subcommand::\n\n    $ tidypy list-codes --help\n    Usage: tidypy list-codes [OPTIONS]\n\n      Outputs a listing of all known issue codes that tools may report.\n\n    Options:\n      -t, --tool [bandit|eradicate|jsonlint|polint|pycodestyle|pydocstyle|pyflakes|pylint|pyroma|radon|rstlint|vulture|yamllint]\n                                      Specifies the name of a tool whose codes\n                                      should be output. If not specified, defaults\n                                      to all tools.\n      -f, --format [toml|json|yaml|csv]\n                                      Specifies the format in which the tools\n                                      should be output. If not specified, defaults\n                                      to TOML.\n      --help                          Show this message and exit.\n\nIf you'd like to enable bash completion for TidyPy, run the following in your\nshell (or put it in your bash startup scripts)::\n\n    $ eval \"$(_TIDYPY_COMPLETE=source tidypy)\"\n\n\n\nConfiguration\n-------------\nTODO\n\n\nIncluded Tools\n--------------\nOut of the box, TidyPy includes support for a number of tools:\n\npylint\n    `Pylint`_ is a Python source code analyzer which looks for programming\n    errors, helps enforcing a coding standard and sniffs for some code smells.\n\n    .. _Pylint: https://github.com/PyCQA/pylint\n\npycodestyle\n    `pycodestyle`_ is a tool to check your Python code against some of the\n    style conventions in `PEP 8`_.\n\n    .. _pycodestyle: https://github.com/PyCQA/pycodestyle\n    .. _PEP 8: https://www.python.org/dev/peps/pep-0008/\n\npydocstyle\n    `pydocstyle`_ is a static analysis tool for checking compliance with Python\n    docstring conventions (e.g., `PEP 257`_).\n\n    .. _pydocstyle: https://github.com/PyCQA/pydocstyle\n    .. _PEP 257: https://www.python.org/dev/peps/pep-0257/\n\npyroma\n    `Pyroma`_ tests your project's packaging friendliness.\n\n    .. _Pyroma: https://github.com/regebro/pyroma\n\nvulture\n    `Vulture`_ finds unused code in Python programs.\n\n    .. _Vulture: https://github.com/jendrikseipp/vulture\n\nbandit\n    `Bandit`_ is a security linter for Python source code.\n\n    .. _Bandit: https://wiki.openstack.org/wiki/Security/Projects/Bandit\n\neradicate\n    `Eradicate`_ finds commented-out code in Python files.\n\n    .. _Eradicate: https://github.com/myint/eradicate\n\npyflakes\n    `Pyflakes`_ is a simple program which checks Python source files for\n    errors.\n\n    .. _Pyflakes: https://github.com/PyCQA/pyflakes\n\nradon\n    `Radon`_ is a Python tool that computes various metrics from the source code.\n\n    .. _Radon: https://github.com/rubik/radon\n\njsonlint\n    A part of the `demjson`_ package, this tool validates your JSON documents\n    for strict conformance to the JSON specification, and to detect potential\n    data portability issues.\n\n    .. _demjson: https://github.com/dmeranda/demjson\n\nyamllint\n    The `yamllint`_ tool, as its name implies, is a linter for YAML files.\n\n    .. _yamllint: https://github.com/adrienverge/yamllint\n\nrstlint\n    The `restructuredtext-lint`_ tool, as its name implies, is a linter for\n    reStructuredText files.\n\n    .. _restructuredtext-lint: https://github.com/twolfson/restructuredtext-lint\n\npolint\n    A part of the `dennis`_, package this tool lints PO and POT files for\n    problems.\n\n    .. _dennis: https://github.com/willkg/dennis\n\n\nIncluded Reporters\n------------------\nTidyPy includes a number of different methods to present and/or export the\nresults of the analysis of a project. Out of the box, it provides the\nfollowing:\n\nconsole\n    The default reporter. Prints a colored report to the console that groups\n    issues by the file they were found in.\n\npylint\n    Prints a report to the console that is in the same format as `Pylint`_'s\n    default output.\n\npycodestyle\n    Prints a report to the console that is in the same format as\n    `pycodestyle`_'s default output.\n\njson\n    Generates a JSON-serialized object that contains the results of the\n    analysis.\n\nyaml\n    Generates a YAML-serialized object that contains the results of the\n    analysis.\n\ntoml\n    Generates a TOML-serialized object that contains the results of the\n    analysis.\n\ncsv\n    Generates a set of CSV records that contains the results of the analysis.\n\n\nIncluded Integrations\n---------------------\nTidyPy includes a handful of plugins/integrations that hook it into other\ntools.\n\npytest\n    TidyPy can be run during execution of your `pytest`_ test suite. To enable\n    it, you need to specify ``--tidypy`` on the command line when you run\n    pytest, or include it as part of the ``addopts`` property in your pytest\n    config.\n\n    .. _pytest: https://docs.pytest.org\n\nnose\n    TidyPy can be run during execution of your `nose`_ test suite. To enable\n    it, you can either specify ``--with-tidypy`` on the command line when you\n    run nose, or set the ``with-tidypy`` property to ``1`` in your\n    ``setup.cfg``.\n\n    .. _nose: https://nose.readthedocs.io\n\npbbt\n    TidyPy can be included in your `PBBT`_ scripts using the ``tidypy`` test.\n    To enable it, you can either specify ``--extend=tidypy.plugin.pbbt`` on the\n    command line when you run PBBT, or set the ``extend`` property in your\n    ``setup.cfg`` or ``pbbt.yaml`` to ``tidypy.plugin.pbbt``.\n\n    .. _PBBT: https://bitbucket.org/prometheus/pbbt\n\nsetuptools\n    TidyPy can be invoked via the ``setup.py`` of your project. Just execute\n    ``python setup.py tidypy``.\n\n\nExtending TidyPy\n----------------\nA simple interface exists for extending TidyPy to include more and different\ntools and reporters. When the API settles down, I'll document it here.\n\n\nFAQs\n----\nAren't there already tools like this?\n    Yup. There's `prospector`_, `pylama`_, `flake8`_, and `ciocheck`_ just to\n    name a few. But, as is customary in the world of software development, if\n    the wheel isn't as round as you'd like it to be, you must spend countless\n    hours to reinvent it. I've tried a number of these tools (and even\n    contributed to some), but in the end, I always found something lacking or\n    annoying. Thus, TidyPy was born.\n\n    .. _prospector: https://github.com/landscapeio/prospector\n    .. _pylama: https://github.com/klen/pylama\n    .. _flake8: https://gitlab.com/pycqa/flake8\n    .. _ciocheck: https://github.com/ContinuumIO/ciocheck\n\nHow do I run TidyPy on a single file?\n    The short answer is, you don't (at the moment, anyway). It wasn't designed\n    with that use case in mind. TidyPy was built to analyze a whole project,\n    and show you everything.\n\nI tried TidyPy out on my project and it reported hundreds/thousands of issues. My ego is now bruised.\n    Yea, that happens. The philosophy I chose to follow with this tool is that\n    I didn't want it to hide anything from me. I wanted its default behavior to\n    execute every tool in its suite using their most obnoxious setting. Then,\n    when I can see the full scope of damage, I can then decide to disable\n    specific tools or issues via a project-level configuration. I figured if\n    someone took the time to implement a check for a particular issue, they\n    must think it has some value. If my tooling hides that from me by default,\n    then I won't be able to gain any benefits from it.\n\n    In general, I don't recommend starting to use linters or other sorts of\n    static analyzers when you think you're \"done\". You should incorporate them\n    into your workflow right at the beginning of a project -- just as you would\n    (or should) your unit tests. That way you find things early and learn from\n    them (or disable them). It's much less daunting a task to deal with when\n    you address them incrementally.\n\n\nContributing\n------------\nContributions are most welcome. Particularly if they're bug fixes! To hack on\nthis code, simply clone it, make sure you have `Pipenv`_ installed (it's a\ngreat tool, you should use it even if you're not working on this project), and\nthen run ``make setup``. This will create a virtualenv with all the tools\nyou'll need. The ``Makefile`` also has a ``test`` target for running the pytest\nsuite, and a ``lint`` target for running TidyPy on itself.\n\n.. _Pipenv: https://github.com/kennethreitz/pipenv\n\n\nLicense\n-------\nTidyPy is released under the terms of the `MIT License`_.\n\n.. _MIT License: https://opensource.org/licenses/MIT\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jayclassless/tidypy",
    "keywords": "tidypy lint linter static analysis pep8 pep257 pylint",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tidypy",
    "platform": "",
    "project_url": "https://pypi.org/project/tidypy/",
    "release_url": "https://pypi.org/project/tidypy/0.1.0/",
    "requires_dist": [
      "pathlib2; python_version<\"3.4\"",
      "eradicate (<0.3,>=0.2); python_version<\"3.4\"",
      "yamllint (>=1.8,<2)",
      "vulture (>=0.14,<0.15)",
      "six",
      "restructuredtext-lint (>=1.1,<2)",
      "radon (<3,>=2)",
      "pyyaml (>=3.12,<4)",
      "pytoml (>=0.1,<0.2)",
      "pyroma (>=2.2,<3)",
      "pylint (<1.8,>=1.7)",
      "pyflakes (>=1.5,<1.6)",
      "pydocstyle (<3,>=2)",
      "pycodestyle (<3,>=2.3)",
      "progress (>=1.3,<2)",
      "pep8-naming (<0.5,>=0.4)",
      "dennis (>=0.9,<1)",
      "demjson (>=2.2.4,<3)",
      "click (<7,>=6)",
      "bandit (>=1.4,<2)"
    ],
    "requires_python": "",
    "summary": "A tool that executes a suite of static analysis tools upon a Python project.",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "65b2be16ed6869be8bc0f984de7dce23",
          "sha256": "d6cb4a5bb32d0843e4a242c8b3f36eea743f59dd8a91410727f68ba45c30bff4"
        },
        "downloads": -1,
        "filename": "tidypy-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65b2be16ed6869be8bc0f984de7dce23",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 41001,
        "upload_time": "2017-10-15T17:13:23",
        "url": "https://files.pythonhosted.org/packages/10/85/6787e2fcd42ae8f3b320232b73a6eca69d7acba6b590f197bbb07134157d/tidypy-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c44fca67979ac4ecea615f89c9e42b11",
          "sha256": "14f47d6b2f30f2ea0e9ca1f5c32563b174e7761c3e91d6a1a1afb5a4e816fa21"
        },
        "downloads": -1,
        "filename": "tidypy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c44fca67979ac4ecea615f89c9e42b11",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32505,
        "upload_time": "2017-10-15T17:13:25",
        "url": "https://files.pythonhosted.org/packages/d0/87/4a43a4dd40e7db6523d885f6c31ccf49d553b8d5b7aad3bc86baad9ccf92/tidypy-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "65b2be16ed6869be8bc0f984de7dce23",
        "sha256": "d6cb4a5bb32d0843e4a242c8b3f36eea743f59dd8a91410727f68ba45c30bff4"
      },
      "downloads": -1,
      "filename": "tidypy-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "65b2be16ed6869be8bc0f984de7dce23",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 41001,
      "upload_time": "2017-10-15T17:13:23",
      "url": "https://files.pythonhosted.org/packages/10/85/6787e2fcd42ae8f3b320232b73a6eca69d7acba6b590f197bbb07134157d/tidypy-0.1.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "c44fca67979ac4ecea615f89c9e42b11",
        "sha256": "14f47d6b2f30f2ea0e9ca1f5c32563b174e7761c3e91d6a1a1afb5a4e816fa21"
      },
      "downloads": -1,
      "filename": "tidypy-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c44fca67979ac4ecea615f89c9e42b11",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 32505,
      "upload_time": "2017-10-15T17:13:25",
      "url": "https://files.pythonhosted.org/packages/d0/87/4a43a4dd40e7db6523d885f6c31ccf49d553b8d5b7aad3bc86baad9ccf92/tidypy-0.1.0.tar.gz"
    }
  ]
}