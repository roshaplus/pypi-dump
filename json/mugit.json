{
  "info": {
    "author": "Richard Walters",
    "author_email": "rwalters@digitalstirling.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Version Control :: Git"
    ],
    "description": "\ufeffmugit\r\n=======\r\n\r\nThis is a tool for managing a workspace containing multiple git_ repositories.\r\n\r\nAlthough generally all software architects agree that version control is\r\nessential to software development, the community is split on what is best\r\nfor large-scale projects, especially those which heavily reuse components.\r\nThere are many different opinions (for example, see [#]_, [#]_, [#]_, and\r\n[#]_) but they generally fall into one of two camps:\r\n\r\n- monorepo \u2014 one monolithic repository containing everything\r\n\r\n- multiple repos \u2014 split project into many repositories, each managing a\r\n  single component\r\n\r\nFor those whose projects which adopt the philosophy of multiple repos, mugit\r\nis used in concert with git_ to manage the overall project workspace.\r\n\r\nThe root directory of the workspace, itself managed as a git_ repository,\r\nincludes a *manifest* file.  This is an XML file describing which folders\r\nin the workspace are themselves git_ repositories.  For each of these,\r\nthe manifest holds configuration metadata:\r\n\r\n- upstream URL, from which to clone the repository and to where to\r\n  push changes\r\n\r\n- which branch to check out\r\n\r\n- whether or not to keep the repository *pinned*, or pointed to a\r\n  specific revision even if the branch changes (e.g. new commits are\r\n  added upstream)\r\n\r\nMultiple manifest files may exist in a project.  Typically one manifest\r\nis used during normal development to keep all components up to date\r\non their configured branches, and another manifest (with all repositories\r\npinned) is used to mark what revisions of each component together\r\nconstitute the last release or snapshot of the overall project.\r\n\r\nInstallation\r\n------------\r\n\r\n- ``pip install mugit`` \u2014 download and install from PyPI\r\n\r\n- ``pip install mugit-1.0.0-py2.py3-none-any.whl`` \u2014 install from local\r\n  wheel file\r\n\r\n- ``pip install -e .`` \u2014 install in `editable mode`_ from mugit\r\n  source folder\r\n\r\nUsage\r\n-----\r\n\r\n- ``mugit [COMMAND] --help`` \u2014 get more help overall or for a specific command\r\n\r\n- ``mugit select [-c] <MANIFEST>`` \u2014 select manifest to use in other\r\n  mugit commands\r\n\r\n- ``mugit pull [-c]`` \u2014 clone missing repositories and fetch/rebase\r\n  existing ones\r\n\r\n- ``mugit status [-c] [-a]`` \u2014 generate report on the state of the workspace\r\n\r\n  - Use ``-a`` to list all repositories, not just ones with changes.\r\n\r\n- ``mugit update [-c]`` \u2014 update manifest to reflect current workspace state\r\n\r\n- ``mugit add [-c] --all | <PATH>..`` \u2014 add repositories to the manifest\r\n\r\n  - Specify repositories by path or use ``--all`` to automatically scan\r\n    for them.\r\n\r\n- ``mugit remove <PATH>..`` \u2014 remove repositories from the manifest\r\n\r\n- ``mugit release <MANIFEST>`` \u2014 create or update a release/snapshot manifest\r\n\r\n- ``mugit --version`` \u2014 display tool version information\r\n\r\nMany mugit commands use `ANSI escape codes`_ to control cursor movement in\r\nthe console.  This works for most terminals, but some (most notably, the\r\nWindows command prompt) may need help from the colorama_ library.\r\nThe commands which can make use of colorama_ accept the optional -c argument,\r\nwhich if used, activates colorama_.\r\n\r\nCreating a New Project\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nWhen setting up a new project, use ``mugit select`` to choose the name\r\nof the manifest.  The selected manifest is tracked in the ``.git/config``\r\nof the root project repository.\r\n\r\nAfter creating or cloning project components, use ``mugit add -a`` to\r\nscan the workspace for repositories, adding an entry for each into\r\nthe manifest.  This creates the manifest XML file if it didn't exist\r\npreviously.  Note that newly created components will have no upstream\r\nURL and will be skipped in all pulls and remote checks.\r\n\r\n::\r\n\r\n  mkdir FooBar\r\n  cd FooBar\r\n  git init\r\n  mkdir Foo\r\n  mkdir Bar\r\n  git clone https://example.com/Utilites.git\r\n  cd Foo\r\n  git init\r\n  git commit --allow-empty -m \"Initial Revision\"\r\n  cd ../Bar\r\n  git init\r\n  git commit --allow-empty -m \"Initial Revision\"\r\n  cd ..\r\n  mugit select main\r\n  mugit add -a\r\n  git add main.xml\r\n  git commit -m \"Initial Revision\"\r\n\r\nTo add individual components later, create or clone them, and then\r\npass their paths to ``mugit add`` to update the manifest.  Remember\r\nto commit the manifest change to the root project repository.\r\n\r\n::\r\n\r\n  mkdir Spam\r\n  cd Spam\r\n  git init\r\n  git commit --allow-empty -m \"Initial Revision\"\r\n  cd ..\r\n  mugit select main\r\n  mugit add Spam\r\n  git add main.xml\r\n  git commit -m \"Add Spam\"\r\n\r\nWhen a new component is initially published, use ``mugit update`` to\r\nupdate the manifest to include the upstream URL.  Remember\r\nto commit the manifest change to the root project repository.\r\n\r\n::\r\n\r\n  cd Foo\r\n  git remote add origin https://example.com/foo.git\r\n  git push --set-upstream origin master\r\n  cd ..\r\n  mugit update\r\n  git add main.xml\r\n  git commit -m \"Foo now published at example.com\"\r\n\r\nCloning an Upstream Project\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nUse ``mugit select`` followed by ``mugit pull`` to initially clone\r\nall components in a project.\r\n\r\n::\r\n\r\n  git clone https://example.com/FooBar.git\r\n  cd FooBar\r\n  mugit select main\r\n  mugit pull\r\n\r\nChecking Status\r\n~~~~~~~~~~~~~~~\r\n\r\nUse ``mugit status`` whenever unsure about whether there are local\r\nchanges, or to check if there are other changes upstream.\r\nNormally, only components found to have local or remote changes will\r\nbe reported.  Use the ``-a`` option to force  all components to be\r\nincluded in the report.\r\n\r\n::\r\n\r\n  mugit status -a\r\n\r\nDownloading Updates\r\n~~~~~~~~~~~~~~~~~~~\r\n\r\nUse ``mugit pull`` to fetch upstream changes.  The changes are first\r\nfetched into the remote tracking branch.  The working branch is then\r\nrebased onto the remote tracking branch, resulting in a fast-forward\r\n(if there were no local changes) or a rebase (if there were local changes).\r\n\r\nIt's best to check the status with ``mugit status`` first to make sure\r\nthere are no local untracked or staged changes which might interfere\r\nwith a rebase.\r\n\r\n::\r\n\r\n  mugit status\r\n  mugit pull\r\n\r\n\r\nMaking a Release\r\n~~~~~~~~~~~~~~~~\r\n\r\nUse ``mugit release`` to create a special copy of the selected\r\nmanifest where all components are *pinned*, or marked with their\r\ncurrent commit SHA1 code listed in the manifest.  This is useful\r\nfor recording the exact revisions of all components used to form\r\na specific snapshot or release of the project.\r\n\r\n::\r\n\r\n  mugit release release\r\n  git add release.xml\r\n  git commit -m \"Release 1.12.7\"\r\n  git tag \"1.12.7\"\r\n\r\nChecking Out a Release\r\n~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nA generated manifest can be used later with ``mugit select`` to check out\r\nthe exact revisions of all components in the manifest that were\r\npresent when that manifest was generated, even if component branches\r\nhave moved in the interim.\r\n\r\nNote that each component ise put into a *headless* state, even\r\nif the revision checked out happens to still be at the head of the\r\nconfigured branch.\r\n\r\n::\r\n\r\n  mugit select release\r\n\r\nLicense/Warranty\r\n----------------\r\n\r\nThis tool is made available under the MIT license.\r\n\r\n::\r\n\r\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n  SOFTWARE.\r\n\r\nSee the file `LICENSE.txt <https://bitbucket.org/digitalstirling/mugit/src/HEAD/LICENSE.txt>`_ for more information.\r\n\r\n.. _ANSI escape codes: https://en.wikipedia.org/wiki/ANSI_escape_code\r\n.. _colorama: https://pypi.python.org/pypi/colorama\r\n.. _editable mode: https://pip.pypa.io/en/stable/reference/pip_install/#editable-installs\r\n.. _git: https://git-scm.com/\r\n\r\n.. [#] https://gist.github.com/arschles/5d7ba90495eb50fa04fc\r\n.. [#] https://gist.github.com/technosophos/9c706b1ef10f42014a06\r\n.. [#] https://news.ycombinator.com/item?id=10007654\r\n.. [#] http://blog.shippable.com/our-journey-to-microservices-and-a-mono-repository\r\n\r\n\r\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/digitalstirling/mugit",
    "keywords": "git",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mugit",
    "platform": "",
    "project_url": "https://pypi.org/project/mugit/",
    "release_url": "https://pypi.org/project/mugit/1.0.2/",
    "requires_dist": [],
    "requires_python": ">=2.7, <4",
    "summary": "Git multi-repository workspace management tool",
    "version": "1.0.2"
  },
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bb1c8daa139e267207f30e9b4d241815",
          "sha256": "d7428c9100b7923bc2f67eccf06f0af71130418e875f6d37d0e0bbef13797c14"
        },
        "downloads": 0,
        "filename": "mugit-1.0.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "bb1c8daa139e267207f30e9b4d241815",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 25705,
        "upload_time": "2017-09-05T07:58:07",
        "url": "https://files.pythonhosted.org/packages/a0/ab/dc7c2ee267aaefa9390c3e053974e587742c04cc69b7b909b9fc50688af0/mugit-1.0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1d93590a32759c1a00b87fa0a663c5b9",
          "sha256": "82f8003e3dfaf5591fae4e88f349de110f660d819e344c6f59e2af2e07a528db"
        },
        "downloads": 0,
        "filename": "mugit-1.0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "1d93590a32759c1a00b87fa0a663c5b9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15154,
        "upload_time": "2017-09-05T07:58:09",
        "url": "https://files.pythonhosted.org/packages/5e/18/10cef758e74186d936920555c5981e70d2f201d3e93702c211f929989b1b/mugit-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "401b42f3d1f2a0a98348778a43fbb0a1",
          "sha256": "bd1a7acc1f05654b3f7fdf3b976e86cde9486b41d6eb8f59952601b939805c6b"
        },
        "downloads": 0,
        "filename": "mugit-1.0.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "401b42f3d1f2a0a98348778a43fbb0a1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 25752,
        "upload_time": "2017-09-06T07:54:19",
        "url": "https://files.pythonhosted.org/packages/37/e3/74b0ff99198607302fb9fd26179e878f6075b41308174493eefac3acb30e/mugit-1.0.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f8aab215b74978ad85a131f69df46d9e",
          "sha256": "bd4e8aba1331fe28229517950ebd372d681a04d891611502c5a368005bfba432"
        },
        "downloads": 0,
        "filename": "mugit-1.0.2.tar.gz",
        "has_sig": true,
        "md5_digest": "f8aab215b74978ad85a131f69df46d9e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15188,
        "upload_time": "2017-09-06T07:54:20",
        "url": "https://files.pythonhosted.org/packages/c9/5a/3eea01bd99f238a8626947a45f2947ec82a9d7244720c45732b25ad45eae/mugit-1.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "401b42f3d1f2a0a98348778a43fbb0a1",
        "sha256": "bd1a7acc1f05654b3f7fdf3b976e86cde9486b41d6eb8f59952601b939805c6b"
      },
      "downloads": 0,
      "filename": "mugit-1.0.2-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "401b42f3d1f2a0a98348778a43fbb0a1",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 25752,
      "upload_time": "2017-09-06T07:54:19",
      "url": "https://files.pythonhosted.org/packages/37/e3/74b0ff99198607302fb9fd26179e878f6075b41308174493eefac3acb30e/mugit-1.0.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "f8aab215b74978ad85a131f69df46d9e",
        "sha256": "bd4e8aba1331fe28229517950ebd372d681a04d891611502c5a368005bfba432"
      },
      "downloads": 0,
      "filename": "mugit-1.0.2.tar.gz",
      "has_sig": true,
      "md5_digest": "f8aab215b74978ad85a131f69df46d9e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 15188,
      "upload_time": "2017-09-06T07:54:20",
      "url": "https://files.pythonhosted.org/packages/c9/5a/3eea01bd99f238a8626947a45f2947ec82a9d7244720c45732b25ad45eae/mugit-1.0.2.tar.gz"
    }
  ]
}