{
  "info": {
    "author": "Sean Pianka",
    "author_email": "pianka@eml.cc",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "Flask-Lambda2\n=============\n\nFlask-Lambda2 is a python package to add a compatibility layer between a\nFlask application and AWS Lambda for creating RESTful applications.\n\nExplanation\n-----------\n\nThe main assumption is that the lambda function, on the AWS Lambda\ndashboard, must be named with the following scheme:\n\n::\n\n    httpMethod_route_to_desired_endpoint\n\nThis scheme translates to the HTTP statement:\n\n::\n\n    HTTPMETHOD /route/to/desired/endpoint\n\nWhich then propagates to the following Flask endpoint:\n\n::\n\n    app.route('/route/to/desired/endpoint/', methods=[\"HTTPMETHOD\"])\n\nThis is a *convention* and it is assumed that users of this class will\nfollow the outlined convention. Behavior during use while deviating from\nthe required convention is undefined -- as in it likely will not work\n:).\n\nGetting Started\n---------------\n\nWe will create an endpoint named ``get_users``; this is a endpoint which\ntheoretically can be accessed via the HTTP request ``GET /users/``\n(however, it must be accessed in a manner compliant with AWS Lambda's\ncalling convention).\n\nSteps\n~~~~~\n\n1. .. rubric:: Locally clone ``Flask-Lambda2`` via:\n      :name: locally-clone-flask-lambda2-via\n\n   ``git clone https://github.com/seanpianka/Flask-Lambda2 && mv Flask-Lambda2/flask_lambda2/ . && rm -rf Flask-Lambda2/``\n\n   or\n\n   ``pip install -t . flask-lambda2`` (**Note**: Flask-Lambda2 is\n   currently not available on pip)\n\n2. .. rubric:: Create AWS Lambda function with name ``get_users``.\n      :name: create-aws-lambda-function-with-name-get_users.\n\n   **Note**: The HTTP method at the beginning of the name can any\n   capitalization, but it will be transformed to lowercase. However, the\n   \"\\_route\\_to\\_desired\\_endpoint\" string and its capitalization matter\n   as that's what will be exactly translated into a URL rule.\n3. .. rubric:: Create a local file named ``get_users.py`` that contains\n      the following boilerplate:\n      :name: create-a-local-file-named-get_users.py-that-contains-the-following-boilerplate\n\n   .. code:: python\n\n       from flask_lambda2 import FlaskLambda\n\n       app = FlaskLambda(__name__)\n\n       app.route('/users/', methods=[\"GET\"]) # ensure `methods` match the method specified by the lambda function name\n       def get_users():                      # function identifier is irrelevant to functionality\n           return {'message': 'Hello, World!', 'status_code': 200}\n\n4. .. rubric:: Package Flask-Lambda2 along with ``get_users.py`` into a\n      zip (which we name ``get_users.py.zip``):\n      :name: package-flask-lambda2-along-with-get_users.py-into-a-zip-which-we-name-get_users.py.zip\n\n   .. code:: bash\n\n       $ zip --recurse-paths get_users.py.zip get_users.py flask-lambda2/\n\n5. .. rubric:: Use either ``aws-cli`` or the web interface for AWS\n      Lambda to upload the zip:\n      :name: use-either-aws-cli-or-the-web-interface-for-aws-lambda-to-upload-the-zip\n\n   1. Create a new AWS Lambda function:\n      ``aws lambda create-function --function-name get_users --runtime python3.6 --zip-file fileb://get_users.py.zip --role user_supplied_aws_role_here --handler get_users.app``\n\n      1. ``--handler get_users.app`` implies that:\n\n         1. The single Python file you're uploading is named\n            ``get_users``\n         2. The instance of the ``FlaskLambda`` class is named ``app``,\n            like: ``app = FlaskLambda()`` If this line was changed to\n            ``application = FlaskLambda``, then the ``handler`` flag\n            should be given as ``--handler get_users.application``.\n\n      2. You will need to create your own AWS execution/IAM role, see\n         `this\n         link <https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example-create-iam-role.html>`__\n         for more details. Afterwards, specify this role as\n         ``--role arn:aws:iam::###:role/iam_role_name``.\n      3. Once you've created your AWS Lambda function, you can update\n         the zipped code with:\n         ``aws lambda update-function-code --function-name get_users --zip-file fileb://get_users.py.zip``\n\n6. .. rubric:: Use the appropriate method for invoking your AWS Lambda\n      function for your platform.\n      :name: use-the-appropriate-method-for-invoking-your-aws-lambda-function-for-your-platform.\n\nDeployment\n----------\n\nHere's an example ``makefile`` that you can use for deploying your\nfunctions.\n\n.. code:: makefile\n\n    ZIP_ALL_ROUTES=sh -c '\\\n    rm *.zip; \\\n    cd libs; \\\n    for i in ../*.py; \\\n    do \\\n        zip -r $$i.zip $$i * > /dev/null 2>&1; \\\n        echo \"Zipped $$i\"; \\\n    done; \\\n    cd ..;'\n\n    default: zip\n\n    zip:\n        $(ZIP_ALL_ROUTES)\n\n    clean:\n        @rm *.zip\n        @echo \"Cleaned: *\"\n\n    update-all-functions: # make update-all-functions\n        $(ZIP_ALL_ROUTES)\n        @for i in *.zip; do \\\n            func_name=$$(python -c \"print(\\\"$$i\\\".split(\\\".\\\")[0])\"); \\\n            aws lambda update-function-code --function-name $$func_name --zip-file fileb://$$i > /dev/null 2>&1; \\\n            echo \"Updated: $$i\"; \\\n        done\n\n    update-function: # make update-function FUNC=get_users\n        @cd libs && \\\n         zip -r ../$$FUNC.py.zip ../$$FUNC.py * > /dev/null 2>&1 && \\\n         echo \"Zipped: $$FUNC\" && \\\n         aws lambda update-function-code --function-name $$FUNC --zip-file fileb://../$$FUNC.py.zip > /dev/null 2>&1;\n        @echo \"Updated: $$FUNC\";\n\n    set-environment-vars: # requires env_vars.txt to be in current working directory and to be in JSON format, see aws-cli documentation for update-function configuration\n        $(ZIP_ALL_ROUTES)\n        @for i in *.zip; do \\\n            func_name=$$(python -c \"print(\\\"$$i\\\".split(\\\".\\\")[0])\"); \\\n            aws lambda update-function-configuration --function-name $$func_name --environment $$(<env_vars.txt) > /dev/null 2>&1; \\\n            echo \"Updated: $$i\"; \\\n        done\n\nThe following ``makefile`` expects a directory structure as follows:\n\n::\n\n    .\n    \u251c\u2500\u2500 get_users.py\n    \u251c\u2500\u2500 libs\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 click\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 click-6.7.dist-info\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 flask\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 Flask-0.12.2.dist-info\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 flask_lambda2\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 itsdangerous-0.24.dist-info\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 itsdangerous.py\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 jinja2\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 Jinja2-2.9.6.dist-info\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 markupsafe\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 MarkupSafe-1.0.dist-info\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 werkzeug\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 Werkzeug-0.12.2.dist-info\n    \u2514\u2500\u2500 makefile\n\nTests\n-----\n\nTests are available in ``Flask-Lambda2/tests`` through invoking\n``test.py`` with ``python test.py``. Ensure all dependencies are\ninstalled through invoking ``pip install -r requirements.txt``.\n\nFunctional Examples\n-------------------\n\nGridLight-API\n~~~~~~~~~~~~~\n\nI have created a backend for a mobile application using this library,\nit's source code is available `here at the GridLight-API\nrepository <https://github.com/seanpianka/GridLight-API>`__.\nAdditionally, I have created a ``makefile`` that optimizes the\ndeployment process of the routes to AWS CLI.\n\nIf you have any questions, feel free to e-mail me at pianka@eml.cc.\n\nTranslation Examples\n--------------------\n\nRoute: get\\_users -> GET /users/\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n1. | Lambda Function Name:\n   | ``get_users``\n\n2. | HTTP Translation:\n   | ``GET /users/``\n\n3. | Flask Propogation:\n   | ``app.route('/users/', methods=[\"GET\"])``\n\nRoute: post\\_users\\_contracts -> POST /users/contracts/\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n1. | Lambda Function Name:\n   | ``post_users_contracts``\n\n2. | HTTP Translation:\n   | ``POST /users/contracts/``\n\n3. | Flask Propogation:\n   | ``app.route('/users/contracts/', methods=[\"POST\"])``\n\nRoute: delete\\_users\\_contracts\\_id -> DELETE /users/contracts/<id>/\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n1. Lambda Function Name:\n   ``delete_users_contracts_id``\n2. HTTP Translation:\n   ``DELETE /users/contracts/<id>/``\n3. Flask Propogation:\n   ``app.route('/users/contracts/<id>/', methods=[\"DELETE\"])``\n\nBuilt With\n----------\n\n-  `Flask <https://github.com/pallets/flask>`__ - Micro web-framework\n   based on Werkzeug and Jinja2\n\nLicense\n-------\n\nThis project is licensed under the Apache 2.0 License - see the\nLICENSE.md file for details\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/seanpianka/flask-lambda2",
    "keywords": "flask lambda aws api rest restful layer compatiblity endpoint",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-lambda2",
    "platform": "",
    "project_url": "https://pypi.org/project/flask-lambda2/",
    "release_url": "https://pypi.org/project/flask-lambda2/1.0.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python package to add compatibility between Flask and AWS Lambda for creating RESTful applications.",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "551ffb550b3189dc3707d1ee4029190d",
          "sha256": "44089c7700adcdcab24d7328fccb53ba92b5c92e08335d933b4bb3167d8f4fae"
        },
        "downloads": 0,
        "filename": "flask_lambda2-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "551ffb550b3189dc3707d1ee4029190d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 9131,
        "upload_time": "2017-09-01T02:39:30",
        "url": "https://files.pythonhosted.org/packages/3d/a3/2cb35ee4e29fc111246163a4ce06821a3abe4020574c7e48607304f13b33/flask_lambda2-1.0.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "467099fa547dd9bfe8b8f4eb3704e7b2",
          "sha256": "d1f789e115856268fde233e19e09611ac3020baa58e793ceb45ced906a6ab442"
        },
        "downloads": 0,
        "filename": "flask-lambda2-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "467099fa547dd9bfe8b8f4eb3704e7b2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6185,
        "upload_time": "2017-09-01T02:39:33",
        "url": "https://files.pythonhosted.org/packages/3b/e5/8effa5c074381db8bf03cf477723cff1c1bfd36d9acf85d4b653c44a1542/flask-lambda2-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "551ffb550b3189dc3707d1ee4029190d",
        "sha256": "44089c7700adcdcab24d7328fccb53ba92b5c92e08335d933b4bb3167d8f4fae"
      },
      "downloads": 0,
      "filename": "flask_lambda2-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "551ffb550b3189dc3707d1ee4029190d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 9131,
      "upload_time": "2017-09-01T02:39:30",
      "url": "https://files.pythonhosted.org/packages/3d/a3/2cb35ee4e29fc111246163a4ce06821a3abe4020574c7e48607304f13b33/flask_lambda2-1.0.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "467099fa547dd9bfe8b8f4eb3704e7b2",
        "sha256": "d1f789e115856268fde233e19e09611ac3020baa58e793ceb45ced906a6ab442"
      },
      "downloads": 0,
      "filename": "flask-lambda2-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "467099fa547dd9bfe8b8f4eb3704e7b2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6185,
      "upload_time": "2017-09-01T02:39:33",
      "url": "https://files.pythonhosted.org/packages/3b/e5/8effa5c074381db8bf03cf477723cff1c1bfd36d9acf85d4b653c44a1542/flask-lambda2-1.0.0.tar.gz"
    }
  ]
}