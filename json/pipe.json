{
  "info": {
    "author": "Julien Palard",
    "author_email": "julien@palard.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Infix programming toolkit\n\nModule enabling a sh like infix syntax (using pipes).\n\n\n# Introduction\n\nAs an exemple, here is the solution for the 2nd Euler Project exercise:\n\n> Find the sum of all the even-valued terms in Fibonacci which do not\n  exceed four million.\n\nGiven fib a generator of fibonacci numbers:\n\n    euler2 = fib() | where(lambda x: x % 2 == 0)\n                   | take_while(lambda x: x < 4000000)\n                   | add\n\n\n# Vocabulary\n\n- A Pipe: a Pipe is a 'pipeable' function, somthing that you can pipe to,\n  In the code '[1, 2, 3] | add' add is a Pipe\n- A Pipe function: A standard function returning a Pipe so it can be used like\n  a normal Pipe but called like in : [1, 2, 3] | concat(\"#\")\n\n\n# Syntax\n\nI don't like `import * `but for the following examples in an REPL it\nwill be OK, so:\n\n    >>> from pipe import *\n\nThe basic symtax is to use a Pipe like in a shell:\n\n    >>> [1, 2, 3] | add\n    6\n\nA Pipe can be a function call, for exemple the Pipe function 'where':\n\n    >>> [1, 2, 3] | where(lambda x: x % 2 == 0) #doctest: +ELLIPSIS\n    <generator object ...>\n\nA Pipe as a function is nothing more than a function returning\na specialized Pipe.\n\n\n# Constructing your own\n\nYou can construct your pipes using Pipe classe initialized with lambdas like:\n\n    stdout = Pipe(lambda x: sys.stdout.write(str(x)))\n    select = Pipe(lambda iterable, pred: (pred(x) for x in iterable))\n\nOr using decorators:\n\n    @Pipe\n    def stdout(x):\n        sys.stdout.write(str(x))\n\n\n# Existing Pipes in this module\n\n    stdout\n        Outputs anything to the standard output\n        >>> \"42\" | stdout\n        42\n\n    lineout\n        Outputs anything to the standard output followed by a line break\n        >>> 42 | lineout\n        42\n\n    tee\n        tee outputs to the standard output and yield unchanged items, usefull for\n        debugging\n        >>> [1, 2, 3, 4, 5] | tee | add\n        1\n        2\n        3\n        4\n        5\n        15\n\n    as_list\n        Outputs an iterable as a list\n        >>> (0, 1, 2) | as_list\n        [0, 1, 2]\n\n    as_tuple\n        Outputs an iterable as a tuple\n        >>> [1, 2, 3] | as_tuple\n        (1, 2, 3)\n\n    as_dict\n        Outputs an iterable of tuples as a dictionary\n        [('a', 1), ('b', 2), ('c', 3)] | as_dict\n        {'a': 1, 'b': 2, 'c': 3}\n\n    concat()\n        Aggregates strings using given separator, or \", \" by default\n        >>> [1, 2, 3, 4] | concat\n        '1, 2, 3, 4'\n        >>> [1, 2, 3, 4] | concat(\"#\")\n        '1#2#3#4'\n\n    average\n        Returns the average of the given iterable\n        >>> [1, 2, 3, 4, 5, 6] | average\n        3.5\n\n    netcat\n        Open a socket on the given host and port, and send data to it,\n        Yields host reponse as it come.\n        netcat apply traverse to its input so it can take a string or\n        any iterable.\n\n        \"GET / HTTP/1.0\\r\\nHost: google.fr\\r\\n\\r\\n\" \\\n            | netcat('google.fr', 80)               \\\n            | concat                                \\\n            | stdout\n\n    netwrite\n        Like netcat but don't read the socket after sending data\n\n    count\n        Returns the length of the given iterable, counting elements one by one\n        >>> [1, 2, 3, 4, 5, 6] | count\n        6\n\n    add\n        Returns the sum of all elements in the preceding iterable\n        >>> (1, 2, 3, 4, 5, 6) | add\n        21\n\n    first\n        Returns the first element of the given iterable\n        >>> (1, 2, 3, 4, 5, 6) | first\n        1\n\n    chain\n        Unfold preceding Iterable of Iterables\n        >>> [[1, 2], [3, 4], [5]] | chain | concat\n        '1, 2, 3, 4, 5'\n\n        Warning : chain only unfold iterable containing ONLY iterables :\n          [1, 2, [3]] | chain\n              Gives a TypeError: chain argument #1 must support iteration\n              Consider using traverse\n\n    traverse\n        Recursively unfold iterables\n        >>> [[1, 2], [[[3], [[4]]], [5]]] | traverse | concat\n        '1, 2, 3, 4, 5'\n        >>> squares = (i * i for i in range(3))\n        >>> [[0, 1, 2], squares] | traverse | as_list\n        [0, 1, 2, 0, 1, 4]\n\n    select()\n        Apply a conversion expression given as parameter\n        to each element of the given iterable\n        >>> [1, 2, 3] | select(lambda x: x * x) | concat\n        '1, 4, 9'\n\n    where()\n        Only yields the matching items of the given iterable\n        >>> [1, 2, 3] | where(lambda x: x % 2 == 0) | concat\n        '2'\n\n    take_while()\n        Like itertools.takewhile, yields elements of the\n        given iterable while the predicat is true\n        >>> [1, 2, 3, 4] | take_while(lambda x: x < 3) | concat\n        '1, 2'\n\n    skip_while()\n        Like itertools.dropwhile, skips elements of the given iterable\n        while the predicat is true, then yields others\n        >>> [1, 2, 3, 4] | skip_while(lambda x: x < 3) | concat\n        '3, 4'\n\n    chain_with()\n        Like itertools.chain, yields elements of the given iterable,\n        then yields elements of its parameters\n        >>> (1, 2, 3) | chain_with([4, 5], [6]) | concat\n        '1, 2, 3, 4, 5, 6'\n\n    take()\n        Yields the given quantity of elemenets from the given iterable, like head\n        in shell script.\n        >>> (1, 2, 3, 4, 5) | take(2) | concat\n        '1, 2'\n\n    tail()\n        Yiels the given quantity of the last elements of the given iterable.\n        >>> (1, 2, 3, 4, 5) | tail(3) | concat\n        '3, 4, 5'\n\n    skip()\n        Skips the given quantity of elements from the given iterable, then yields\n        >>> (1, 2, 3, 4, 5) | skip(2) | concat\n        '3, 4, 5'\n\n    islice()\n        Just the itertools.islice\n        >>> (1, 2, 3, 4, 5, 6, 7, 8, 9) | islice(2, 8, 2) | concat\n        '3, 5, 7'\n\n    izip()\n        Just the itertools.izip\n        >>> (1, 2, 3, 4, 5, 6, 7, 8, 9) \\\n        ...  | izip([9, 8, 7, 6, 5, 4, 3, 2, 1]) \\\n        ...  | concat\n        '(1, 9), (2, 8), (3, 7), (4, 6), (5, 5), (6, 4), (7, 3), (8, 2), (9, 1)'\n\n    aggregate()\n        Works as python reduce, the optional initializer must be passed as a\n        keyword argument\n        >>> (1, 2, 3, 4, 5, 6, 7, 8, 9) | aggregate(lambda x, y: x * y)\n        362880\n\n        >>> () | aggregate(lambda x, y: x + y, initializer=0)\n        0\n\n        Simulate concat :\n        >>> (1, 2, 3, 4, 5, 6, 7, 8, 9) \\\n        ... | aggregate(lambda x, y: str(x) + ', ' + str(y))\n        '1, 2, 3, 4, 5, 6, 7, 8, 9'\n\n    any()\n        Returns True if any element of the given iterable satisfies the predicate\n        >>> (1, 3, 5, 6, 7) | any(lambda x: x >= 7)\n        True\n\n        >>> (1, 3, 5, 6, 7) | any(lambda x: x > 7)\n        False\n\n    all()\n        Returns True if all elements of the given iterable\n        satisfies the given predicate\n        >>> (1, 3, 5, 6, 7) | all(lambda x: x < 7)\n        False\n\n        >>> (1, 3, 5, 6, 7) | all(lambda x: x <= 7)\n        True\n\n    max()\n        Returns the biggest element, using the given key function if\n        provided (or else the identity)\n\n        >>> ('aa', 'b', 'foo', 'qwerty', 'bar', 'zoog') | max(key=len)\n        'qwerty'\n        >>> ('aa', 'b', 'foo', 'qwerty', 'bar', 'zoog') | max()\n        'zoog'\n        >>> ('aa', 'b', 'foo', 'qwerty', 'bar', 'zoog') | max\n        'zoog'\n\n    min()\n        Returns the smallest element, using the key function if provided\n        (or else the identity)\n\n        >>> ('aa', 'b', 'foo', 'qwerty', 'bar', 'zoog') | min(key=len)\n        'b'\n        >>> ('aa', 'b', 'foo', 'qwerty', 'bar', 'zoog') | min\n        'aa'\n\n    groupby()\n        Like itertools.groupby(sorted(iterable, key = keyfunc), keyfunc)\n        (1, 2, 3, 4, 5, 6, 7, 8, 9) \\\n                | groupby(lambda x: x % 2 and \"Even\" or \"Odd\")\n                | select(lambda x: \"%s : %s\" % (x[0], (x[1] | concat(', '))))\n                | concat(' / ')\n        'Even : 1, 3, 5, 7, 9 / Odd : 2, 4, 6, 8'\n\n    sort()\n        Like Python's built-in \"sorted\" primitive. Allows cmp (Python 2.x\n        only), key, and reverse arguments. By default sorts using the\n        identity function as the key.\n\n        >>> \"python\" | sort | concat(\"\")\n        'hnopty'\n        >>> [5, -4, 3, -2, 1] | sort(key=abs) | concat\n        '1, -2, 3, -4, 5'\n\n    reverse\n        Like Python's built-in \"reversed\" primitive.\n        >>> [1, 2, 3] | reverse | concat\n        '3, 2, 1'\n\n    passed\n        Like Python's pass.\n        >>> \"something\" | passed\n\n\n    index\n        Returns index of value in iterable\n        >>> [1,2,3,2,1] | index(2)\n        1\n        >>> [1,2,3,2,1] | index(1,1)\n        4\n\n    strip\n        Like Python's strip-method for str.\n        >>> '  abc   ' | strip\n        'abc'\n        >>> '.,[abc] ] ' | strip('.,[] ')\n        'abc'\n\n    rstrip\n        Like Python's rstrip-method for str.\n        >>> '  abc   ' | rstrip\n        '  abc'\n        >>> '.,[abc] ] ' | rstrip('.,[] ')\n        '.,[abc'\n\n    lstrip\n        Like Python's lstrip-method for str.\n        >>> 'abc   ' | lstrip\n        'abc   '\n        >>> '.,[abc] ] ' | lstrip('.,[] ')\n        'abc] ] '\n\n    run_with\n        >>> (1,10,2) | run_with(range) | as_list\n        [1, 3, 5, 7, 9]\n\n    t\n        Like Haskell's operator \":\"\n        >>> 0 | t(1) | t(2) == range(3) | as_list\n        True\n\n    to_type\n        Typecast\n        >>> range(5) | add | to_type(str) | t(' is summ!') | concat('')\n        '10 is summ!'\n\n    permutations()\n        Returns all possible permutations\n        >>> 'ABC' | permutations(2) | concat(' ')\n        \"('A', 'B') ('A', 'C') ('B', 'A') ('B', 'C') ('C', 'A') ('C', 'B')\"\n\n        >>> range(3) | permutations | concat('-')\n        '(0, 1, 2)-(0, 2, 1)-(1, 0, 2)-(1, 2, 0)-(2, 0, 1)-(2, 1, 0)'\n\n    transpose()\n        Transposes the rows and columns of a matrix\n        >>> [[1, 2, 3], [4, 5, 6], [7, 8, 9]] | transpose\n        [(1, 4, 7), (2, 5, 8), (3, 6, 9)]\n\n\n# Euler project samples\n\n> Find the sum of all the multiples of 3 or 5 below 1000.\n\n    euler1 = (itertools.count() | select(lambda x: x * 3) | take_while(lambda x: x < 1000) | add) \\\n           + (itertools.count() | select(lambda x: x * 5) | take_while(lambda x: x < 1000) | add) \\\n           - (itertools.count() | select(lambda x: x * 15) | take_while(lambda x: x < 1000) | add)\n    assert euler1 == 233168\n\n> Find the sum of all the even-valued terms in Fibonacci which do not exceed four million.\n\n    euler2 = fib() | where(lambda x: x % 2 == 0) | take_while(lambda x: x < 4000000) | add\n    assert euler2 == 4613732\n\n> Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.\n\n    square = lambda x: x * x\n    euler6 = square(itertools.count(1) | take(100) | add) - (itertools.count(1) | take(100) | select(square) | add)\n    assert euler6 == 25164150",
    "docs_url": null,
    "download_url": "https://github.com/JulienPalard/Pipe/tarball/master",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/JulienPalard/Pipe",
    "keywords": "",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pipe",
    "platform": "",
    "project_url": "https://pypi.org/project/pipe/",
    "release_url": "https://pypi.org/project/pipe/1.4.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Module enablig a sh like infix syntax (using pipes)",
    "version": "1.4.2"
  },
  "releases": {
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f61af48362497db5b80ab34ba8f47796",
          "sha256": "4636fb16f05c302bbf882533b4e79a90c59ddb8295e74a0236c5084fc3ed31fd"
        },
        "downloads": -1,
        "filename": "pipe-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f61af48362497db5b80ab34ba8f47796",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6862,
        "upload_time": "2011-03-29T07:57:32",
        "url": "https://files.pythonhosted.org/packages/77/e2/477d8a6793e8c7da0a09d560397ea746ba149d19d4d733ae45a05173b891/pipe-1.3.tar.gz"
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a15a779e4d0b291c8eec8e5256d0dece",
          "sha256": "0aaba5b5f97d037601d8ae8dccfc7adcb009af02d9451ac4731d9bc75d4a6d92"
        },
        "downloads": -1,
        "filename": "pipe-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a15a779e4d0b291c8eec8e5256d0dece",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6934,
        "upload_time": "2011-03-29T12:37:57",
        "url": "https://files.pythonhosted.org/packages/91/c6/4d578366c787a9d4b4e6323af6695bb8cdfdbb567d738dc124b74af01d29/pipe-1.4.tar.gz"
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3bff61cab5d189ce88ec44bd64f1788d",
          "sha256": "1bc9b3456c86406aea508edff9d606ee9caf4962fe534116f96a82e10c5bd0d7"
        },
        "downloads": -1,
        "filename": "pipe-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3bff61cab5d189ce88ec44bd64f1788d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7166,
        "upload_time": "2011-04-07T12:35:37",
        "url": "https://files.pythonhosted.org/packages/8a/9d/f6e5733502049d878c5f7aaa3ce53732d5c55883d604c06f818222dc5cf2/pipe-1.4.1.tar.gz"
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b0f8eeab6368df806290d8744d91bc59",
          "sha256": "84655b9ccbb049d869b1ecf5df0c6f4676ef502ce003eb4b09f04a6e71b6960e"
        },
        "downloads": -1,
        "filename": "pipe-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b0f8eeab6368df806290d8744d91bc59",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8868,
        "upload_time": "2017-12-04T22:03:35",
        "url": "https://files.pythonhosted.org/packages/5f/b0/e078169700e5653788ba8ebc59f7af2e91cc7fec30d043c5a47b8415d8b9/pipe-1.4.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b0f8eeab6368df806290d8744d91bc59",
        "sha256": "84655b9ccbb049d869b1ecf5df0c6f4676ef502ce003eb4b09f04a6e71b6960e"
      },
      "downloads": -1,
      "filename": "pipe-1.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "b0f8eeab6368df806290d8744d91bc59",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8868,
      "upload_time": "2017-12-04T22:03:35",
      "url": "https://files.pythonhosted.org/packages/5f/b0/e078169700e5653788ba8ebc59f7af2e91cc7fec30d043c5a47b8415d8b9/pipe-1.4.2.tar.gz"
    }
  ]
}