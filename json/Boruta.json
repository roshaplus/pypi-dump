{
  "info": {
    "author": "Daniel Homola",
    "author_email": "dani.homola@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "boruta\\_py\n==========\n\nThis project hosts Python implementations of the `Boruta all-relevant\nfeature selection method <https://m2.icm.edu.pl/boruta/>`__.\n\n[Related blog post]\n(http://danielhomola.com/2015/05/08/borutapy-an-all-relevant-feature-selection-method/)\n\nDependencies\n------------\n\n-  numpy\n-  scipy\n-  scikit-learn\n\nHow to use\n----------\n\nDownload, import and do as you would with any other scikit-learn method:\n\\* fit(X, y) \\* transform(X) \\* fit\\_transform(X, y)\n\nDescription\n-----------\n\nPython implementations of the Boruta R package.\n\nThis implementation tries to mimic the scikit-learn interface, so use\nfit, transform or fit\\_transform, to run the feautre selection.\n\nFor more, see the docs of these functions, and the examples below.\n\nOriginal code and method by: Miron B Kursa,\nhttps://m2.icm.edu.pl/boruta/\n\nBoruta is an all relevant feature selection method, while most other are\nminimal optimal; this means it tries to find all features carrying\ninformation usable for prediction, rather than finding a possibly\ncompact subset of features on which some classifier has a minimal error.\n\nWhy bother with all relevant feature selection? When you try to\nunderstand the phenomenon that made your data, you should care about all\nfactors that contribute to it, not just the bluntest signs of it in\ncontext of your methodology (yes, minimal optimal set of features by\ndefinition depends on your classifier choice).\n\nWhat's different in BorutaPy?\n-----------------------------\n\nIt is the original R package recoded in Python with a few added extra\nfeatures. Some improvements include:\n\n-  Faster run times, thanks to scikit-learn\n\n-  Scikit-learn like interface\n\n-  Compatible with any ensemble method from scikit-learn\n\n-  Automatic n\\_estimator selection\n\n-  Ranking of features\n\nFor more details, please check the top of the docstring.\n\nWe highly recommend using pruned trees with a depth between 3-7.\n\nAlso, after playing around a lot with the original code I identified a\nfew areas where the core algorithm could be improved/altered to make it\nless strict and more applicable to biological data, where the Bonferroni\ncorrection might be overly harsh.\n\n| **Percentile as threshold**\n| The original method uses the maximum of the shadow features as a\n  threshold in deciding which real feature is doing better than the\n  shadow ones. This could be overly harsh.\n\nTo control this, I added the perc parameter, which sets the percentile\nof the shadow features' importances, the algorithm uses as the\nthreshold. The default of 100 which is equivalent to taking the maximum\nas the R version of Boruta does, but it could be relaxed. Note, since\nthis is the percentile, it changes with the size of the dataset. With\nseveral thousands of features it isn't as stringent as with a few dozens\nat the end of a Boruta run.\n\n| **Two step correction for multiple testing**\n| The correction for multiple testing was relaxed by making it a two\n  step process, rather than a harsh one step Bonferroni correction.\n\nWe need to correct firstly because in each iteration we test a number of\nfeatures against the null hypothesis (does a feature perform better than\nexpected by random). For this the Bonferroni correction is used in the\noriginal code which is known to be too stringent in such scenarios (at\nleast for biological data), and also the original code corrects for n\nfeatures, even if we are in the 50th iteration where we only have k< A\nsupervised learning estimator, with a 'fit' method that returns the >\nfeature\\_importances\\_ attribute. Important features must correspond to\n> high absolute values in the feature\\_importances\\_.\n\n**n\\_estimators** : int or string, default = 1000 > If int sets the\nnumber of estimators in the chosen ensemble method. > If 'auto' this is\ndetermined automatically based on the size of the > dataset. The other\nparameters of the used estimators need to be set > with initialisation.\n\n**perc** : int, default = 100 > Instead of the max we use the percentile\ndefined by the user, to pick > our threshold for comparison between\nshadow and real features. The max > tend to be too stringent. This\nprovides a finer control over this. The > lower perc is the more false\npositives will be picked as relevant but > also the less relevant\nfeatures will be left out. The usual trade-off. > The default is\nessentially the vanilla Boruta corresponding to the max.\n\n**alpha** : float, default = 0.05 > Level at which the corrected\np-values will get rejected in both correction steps.\n\n**two\\_step** : Boolean, default = True > If you want to use the\noriginal implementation of Boruta with Bonferroni > correction only set\nthis to False.\n\n**max\\_iter** : int, default = 100 > The number of maximum iterations to\nperform.\n\n**verbose** : int, default=0 > Controls verbosity of output.\n\nAttributes\n----------\n\n**n\\_features\\_** : int > The number of selected features.\n\n**support\\_** : array of shape [n\\_features] > The mask of selected\nfeatures - only confirmed ones are True.\n\n**support\\_weak\\_** : array of shape [n\\_features] > The mask of\nselected tentative features, which haven't gained enough > support\nduring the max\\_iter number of iterations..\n\n**ranking\\_** : array of shape [n\\_features] > The feature ranking, such\nthat ``ranking_[i]`` corresponds to the > ranking position of the i-th\nfeature. Selected (i.e., estimated > best) features are assigned rank 1\nand tentative features are assigned > rank 2.\n\nExamples\n--------\n\n::\n\n    import pandas as pd\n    from sklearn.ensemble import RandomForestClassifier\n    from boruta import BorutaPy\n\n    # load X and y\n    # NOTE BorutaPy accepts numpy arrays only, hence the .values attribute\n    X = pd.read_csv('examples/test_X.csv', index_col=0).values\n    y = pd.read_csv('examples/test_y.csv', header=None, index_col=0).values\n    y = y.ravel()\n\n    # define random forest classifier, with utilising all cores and\n    # sampling in proportion to y labels\n    rf = RandomForestClassifier(n_jobs=-1, class_weight='auto', max_depth=5)\n\n    # define Boruta feature selection method\n    feat_selector = BorutaPy(rf, n_estimators='auto', verbose=2, random_state=1)\n\n    # find all relevant features - 5 features should be selected\n    feat_selector.fit(X, y)\n\n    # check selected features - first 5 features are selected\n    feat_selector.support_\n\n    # check ranking of features\n    feat_selector.ranking_\n\n    # call transform() on X to filter it down to selected features\n    X_filtered = feat_selector.transform(X)\n\nReferences\n----------\n\n1. Kursa M., Rudnicki W., \"Feature Selection with the Boruta Package\"\n   Journal of Statistical Software, Vol. 36, Issue 11, Sep 2010\n",
    "docs_url": null,
    "download_url": "https://github.com/danielhomola/boruta_py/tarball/0.1.5",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/danielhomola/boruta_py",
    "keywords": "feature selection,machine learning,random forest",
    "license": "BSD 3 clause",
    "maintainer": null,
    "maintainer_email": null,
    "name": "Boruta",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/Boruta/",
    "release_url": "https://pypi.org/project/Boruta/0.1.5/",
    "requires_python": null,
    "summary": "Python Implementation of Boruta Feature Selection",
    "version": "0.1.5"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "519df7c7990ea6c99b4538915dea6051",
          "sha256": "3b4882cf492e4fe7672ccedbdcd6d9bbb0fb3f5cf78ef4c4b036b0e84f3c164f"
        },
        "downloads": 123,
        "filename": "Boruta-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "519df7c7990ea6c99b4538915dea6051",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7436,
        "upload_time": "2017-01-15T13:29:37",
        "url": "https://files.pythonhosted.org/packages/df/7c/0b683c79de8bc9e7fb773bea84d4b4442e1cf24da8bab272b0ddb2e4470b/Boruta-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d5981aa88f91d0bcac725d4076be5981",
          "sha256": "565a8485d2c1d2de069794fadaee5b7077cf066c40c8971e5228359648d28560"
        },
        "downloads": 18,
        "filename": "Boruta-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d5981aa88f91d0bcac725d4076be5981",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10772,
        "upload_time": "2017-01-15T18:00:53",
        "url": "https://files.pythonhosted.org/packages/37/85/8517e19e5503ad6e5ab34d8f9c677c8e42ea3b204439c66456c331c9fbb7/Boruta-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dec3549cb0b52db3c251c43b464ef8ca",
          "sha256": "27b5af3b6166c6f577d1233314fef7ac56b8a06f12b7fe222b785585b087f124"
        },
        "downloads": 18,
        "filename": "Boruta-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dec3549cb0b52db3c251c43b464ef8ca",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8876,
        "upload_time": "2017-01-15T18:24:16",
        "url": "https://files.pythonhosted.org/packages/17/47/03fe93e8de73534ab839f5953d185136c53ba727cb549ba3aa8f5a5f83f2/Boruta-0.1.3.tar.gz"
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "deda419e5b1d53e3c9753f5d4f71f447",
          "sha256": "ccfefc21f1816ee737bee1a3d409fac661aaba1588bb29621b7b096f3841cd85"
        },
        "downloads": 21,
        "filename": "Boruta-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "deda419e5b1d53e3c9753f5d4f71f447",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8940,
        "upload_time": "2017-03-05T12:03:50",
        "url": "https://files.pythonhosted.org/packages/88/aa/5951a8bab03642ce1c468cecb770ee34bfdbd13a6fd8865f11c64acfd943/Boruta-0.1.4.tar.gz"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3933616763f95aca1532b21146d0735f",
          "sha256": "02170d5425cf4aeef2af378bd301f330427fbdae4720c5585073200ca41fb4fc"
        },
        "downloads": 34,
        "filename": "Boruta-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3933616763f95aca1532b21146d0735f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 55829,
        "upload_time": "2017-03-05T12:21:54",
        "url": "https://files.pythonhosted.org/packages/35/03/ca2b7e352bf1f0e2dd0e17e1b8c92f75dbb9f218d36eba4e894efa2a0478/Boruta-0.1.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "3933616763f95aca1532b21146d0735f",
        "sha256": "02170d5425cf4aeef2af378bd301f330427fbdae4720c5585073200ca41fb4fc"
      },
      "downloads": 34,
      "filename": "Boruta-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "3933616763f95aca1532b21146d0735f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 55829,
      "upload_time": "2017-03-05T12:21:54",
      "url": "https://files.pythonhosted.org/packages/35/03/ca2b7e352bf1f0e2dd0e17e1b8c92f75dbb9f218d36eba4e894efa2a0478/Boruta-0.1.5.tar.gz"
    }
  ]
}