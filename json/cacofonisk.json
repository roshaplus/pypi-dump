{
  "info": {
    "author": "Devhouse Spindle",
    "author_email": "info@wearespindle.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Communications :: Telephony"
    ],
    "description": "Cacofonisk\n==========\n\n.. image:: https://travis-ci.org/VoIPGRID/cacofonisk.svg?branch=master\n    :target: https://travis-ci.org/VoIPGRID/cacofonisk\n\nCacofonisk is a framework that connects to the Asterisk PBX, listens to AMI\nevents and records CallerIDs and CallerID changes on call transfers.\n\nCacofonisk takes a stream of AMI events as input and translates these to channel\nobjects. At relevant moments in a call, these channel objects can be used to get\ninformation about the active call and do anything with that information. For\nexample you may want get a signal everytime that a call is transferred. When a\ncall is transferred, you may want to know which account is initiating the\ntransfer, what the callerid is for the call he is transferring and to which\nextension the call is being transferred. All this information is available in\nCacafonisk. You may want to write it to file, but this being the 21st century,\nyou may also want to send it to a url.\n\nCacofonisk is built on the pretty awesome `Panoramisk\n<https://github.com/gawel/panoramisk>`_ library to listen to the AMI.\n\nInstallation and testing\n------------------------\n\nCacofonisk can be installed from pypi:\n\n.. code-block:: console\n\n    $ pip install cacofonisk\n\nTo install from source, run:\n\n.. code-block:: console\n\n    $ python3 setup.py install\n\nTo run tests, run:\n\n.. code-block:: console\n\n    $ python3 setup.py nosetests\n\n\nExample\n-------\nfor example, to implement the above scenario in cacofonisk, you would do the\nfollowing. in ``my_transfer_spammer.py`` you would overwrite ``on_transfer``\nlike:\n\nTo get a notification for everytime an account is ringing and when a transfer is\nperformed. Write the following to ``report_all_the_things.py``:\n\n.. code-block:: python\n\n    from cacofonisk import AmiRunner, BaseReporter\n\n\n    class ReportAllTheThings(BaseReporter):\n        def __init__(self, *args, **kwargs):\n            self.cloudcti_accounts = set()\n\n        def on_b_dial(self, call_id, caller, callee):\n            callee_account_code = callee.code\n            caller_id = caller.number\n            print(\"{} is being called by {}\".format(callee_account_code, caller_id))\n\n        def on_up(self, call_id, caller, callee):\n            callee_account_code = callee.code\n            caller_id = caller.number\n            print(\"{} is now in conversation with {}\".format(callee_account_code, caller_id))\n\n        def on_warm_transfer(self, call_id, redirector, party1, party2):\n            print(\"Account with account code {redirector.account_code} just \"\n                  \"transferred a call with callerid {party1.cli} to an extension at \"\n                  \"{party2.exten}\".format(redirector, party1, party2))\n\n        def on_hangup(self, call_id, caller, callee, reason):\n            print(\"{} and {} are no longer calling (reason: {})\".format(caller, callee, reason))\n\n  if __name__ == '__main__':\n      ami_host = {'host': '127.0.0.1', 'username': 'cacofonisk', 'password': 'bard', 'port': 5038}\n      ami_hosts = (ami_host,)\n\n      reporter = ReportAllTheThings()\n      runner = AmiRunner(ami_hosts, reporter)\n      runner.run()\n\nIf you run this like:\n\n.. code-block:: console\n\n    $ python3 report_all_the_things.py\n\nYou will see a message printed to the console for every account that is ringing\nor transferred.\n\nYou can also listen for `UserEvents\n<https://wiki.asterisk.org/wiki/display/AST/Asterisk+11+Application_UserEvent>`_.\nThis can be used to trigger actions based on User defined events in the\ndialplan.\n\nDevelopment\n===========\n\nSetup:\n------\n\n.. code-block:: console\n\n    $ mkvirtualenv cacofonisk --python=`which python3`\n    $ pip install -r requirements.txt\n\nMake sure your test user has ``read=all`` event powers in asterisk and\nrestart asterisk:\n\nTesting:\n--------\n\nTo make (automated) testing easier, it is possible to let Cacofonisk read events from different sources than AMI. To read files from a json file, the default runner can overwritten to use the ``FileRunner``:\n\n.. code-block:: python\n\n    from cacofonisk import BaseReporter, FileRunner\n\n    class TransferSpammer(BaseReporter):\n        def on_transfer(self, redirector, party1, party2):\n            print(\"Account with account code {redirector.account_code} just \"\n                  \"transferred a call with callerid {party1.cli} to an extension at \"\n                  \"{party2.exten}\".format(redirector, party1, party2))\n\n    if __name__ == \"__main__\":\n        reporter = TransferSpammer()\n        runner = FileRunner(\"path/to/file.json\", reporter)\n        runner.run()\n\nRunning this script will read events from the specified file. You can see examples for this kind of files in ``examples``. To generate your own json, you can do\n\n.. code-block:: python\n\n    from cacofonisk import JsonReporter\n\n    if __name__ == \"__main__\":\n        ami_host = {'host': '127.0.0.1', 'username': 'cacofonisk', 'password': 'bard', 'port': 5038}\n        ami_hosts = (ami_host,)\n\n        reporter = JsonReporter('path/to/file.json')\n        runner = AmiRunner(ami_hosts, reporter)\n        runner.run()\n            \nConcepts\n========\n\nRunners\n-------\n\nThe ChannelManager operates on a stream of channelevents such as are emitted by\nthe AMI of one or more Asterisken. 'runners' can be set on a Cacofonisk instance\nto specify where the events come frome. In production, cacofonisk would listen\nto an actual AMI. For this purpose, ``cacofonisk.AmiRunner`` can be used.\n\nFor (automated) tests it is more convenient to read events from a file. To make\nthis possible, cacofonisk makes it possible to convert a stream of AMI events to\na list of json objects, and write them to a file using the JsonReporter. Such a file can be\nreplayed using ``cacofonisk.JsonFileRunner``.\n\nAll runners should be passed a ``Reporter`` instance.\n\nTo start the runner, runner.run() is used:\n\n.. code-block:: python\n\n    from cacofonisk import AmiRunner, JsonFileRunner, DebugReporter\n\n    reporter = DebugReporter()\n    # To attach the AmiRunner\n    runner = AmiRunner([(ami_host, ami_user, ami_secret),], reporter)\n    runner.run()\n\n    # To attach the JsonFileRunner\n    runner = JsonFileRunner('path/to/file.json', reporter)\n    runner.run()\n\nReporter\n--------\nThe reporter is attached to the ChannelManager. It has an ``on_ami_event`` method\nthat is called for every AMI event that is encountered. When no reporter is\nspecified, the ChannelManager will use the default reporter at `verbosity=0`. In\neffect this means that no information will be displayed.\n\nThe JsonReporter is used to generate json files from AMI events. To do this,\nspecify the JsonReporter on cacofonisk as follows:\n\n.. code-block:: python\n\n    from cacofonisk import AmiRunner, JsonReporter\n\n    reporter = JsonFileReporter('path/to/file.json')\n    # To attach the AmiRunner\n    runner = AmiRunner([(ami_host, ami_user, ami_secret),], reporter)\n    runner.run()\n\nThis will create a file containing all AMI events for the duration of the run at\nthe specified path.\n\nThe ``DebugReporter`` can be used to get detailed reports of events within the\nChannelManager. It prints information to stdout.\n\n\nThe ChannelManager\n------------------\n\nA ChannelManager is instantiated for every input source. So that if three AMI\ninterfaces are set on the runner, three ChannelManagers will be active. The\nChannelManager is a central part of the way in which Cacofonisk functions. It\ncontains all the logic that decides about which channels are logically in one\nconversation and which channel is associated with which part of the call.\n\nFor most uses however, it is not necessary to access the ChannelManager\ndirectly, because the Reporter probably has all the needed information\navailable. If it is needed to make changes to the ChannelManager, a subclass of\nChannelManager can be passed to the runner:\n\n.. code-block:: python\n\n    from cacofonisk import AmiRunner, BaseReporter, ChannelManager\n\n\n    class MyAwesomeChannelManager(ChannelManager):\n        def on_event(self, event):\n            super().on_event(event)\n            print(\"Never gonna give you up!\")\n\n    reporter = BaseReporter()\n    channel_manager = MyAwesomeChannelManager()\n    runner = AmiRunner(ami_hosts, reporter, channel_manager)\n    runner.run()\n\n\nChannel\n-------\n\nThe ChannelManager operates on Channels. These can be linked, unlinked, masqueraded and destroyed just like any Asterisk Channel. This operations are pretty lowlevel, but there is one very nifty use of Channel. Information can be added to the dictionary at ``Channel.custom``. This dictionary is retained when a Channel is masqueraded.\n\n\nCallerId\n--------\n\nThe CallerId contains the following information about participants in a call:\n\n * code: The accountcode.\n * name: The callerid name.\n * number: The callerid number.\n * is_public: Whether or not the participant wants to share this information.\n\nThe CallerId is passed to the ``on_b_dial`` and ``on_transfer`` methods of a\nreporter.\n\nWriting tests\n-------------\n\nA testcase can be written that reads from a json eventlog. Below is an example\nfor a test that makes sure that events are found at all.\n\n.. code-block:: python\n\n    from cacofonisk.utils.testcases import BaseTestCase, SilentReporter\n    from cacofonisk.channel import ChannelManager\n\n\n    class TestReporter(SilentReporter):\n        \"\"\"\n        A report that increments the property ``no_of_events`` by one, every\n        time ``on_event()`` is called.\n        \"\"\"\n        def __init__(self, *args, **kwargs):\n            self.total_events = 0\n\n        def on_event(self, event):\n            self.total_events += 1\n\n\n    class MyVeryOwnTestCase(BaseTestCase):\n        \"\"\"\n        Test my very own code.\n        \"\"\"\n        def test_events_come_in(self):\n            \"\"\"\n            Play a log and test that events are coming in.\n            \"\"\"\n            reporter = TestReporter()\n\n            events = self.load_events_from_disk(\n                            '/path/to/event_file.json'\n                    )\n            chanmgr = ChannelManager(reporter=reporter)\n            for event in events:\n                chanmgr.on_event(event)\n\n            self.assertNotEqual(reporter.no_of_events, 0)",
    "docs_url": null,
    "download_url": "https://github.com/VoIPGRID/cacofonisk/archive/0.3.0.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/VoIPGRID/cacofonisk",
    "keywords": "ami asterisk callerid",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cacofonisk",
    "platform": "",
    "project_url": "https://pypi.org/project/cacofonisk/",
    "release_url": "https://pypi.org/project/cacofonisk/0.3.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Track callerid changes through Asterisk Management Interface (AMI)",
    "version": "0.3.0"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d04efb8678f2c165958a9101f2bffdc9",
          "sha256": "7cd78489261a6e4a13dfac5f0cef202b4e87d390018800bca92d88f91d5981ce"
        },
        "downloads": -1,
        "filename": "cacofonisk-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d04efb8678f2c165958a9101f2bffdc9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19541,
        "upload_time": "2016-02-12T15:14:16",
        "url": "https://files.pythonhosted.org/packages/f8/00/a01a63fbc5d24a12c31efca100e88bdfa424f3e14da1b76f918b9fbf17a3/cacofonisk-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6e3e18891c95b4254a1183f3f4072fab",
          "sha256": "52f4f22b50619665a01088dd85655b7ace9250794139b95a5fa053b8ee7c3f37"
        },
        "downloads": -1,
        "filename": "cacofonisk-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "6e3e18891c95b4254a1183f3f4072fab",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 65497,
        "upload_time": "2016-02-15T16:51:20",
        "url": "https://files.pythonhosted.org/packages/1e/d3/0eef87ffe4d6a44a6a23fa61fac49db370630ea4ed9ced5d4fcdfc071d51/cacofonisk-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6837f62f2dfac558d74b8e78cee95f26",
          "sha256": "be8f1d2f84a7b4229387c1a7dd821f2bc46a2436e97bc88f50ff6ce27cfc1e07"
        },
        "downloads": -1,
        "filename": "cacofonisk-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6837f62f2dfac558d74b8e78cee95f26",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66618,
        "upload_time": "2016-03-01T16:02:24",
        "url": "https://files.pythonhosted.org/packages/00/11/b69733a6a6f272e4a0614c530d604994fff661fa7c0b7e480996f5f3705b/cacofonisk-0.0.3.tar.gz"
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c96060a80b944cfc60e88b0bf15d8914",
          "sha256": "4d3538d72bdecaaca2cb4c691fe8aed42bca0303909abbcc83fad03fb6025aec"
        },
        "downloads": -1,
        "filename": "cacofonisk-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c96060a80b944cfc60e88b0bf15d8914",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30479,
        "upload_time": "2017-09-11T07:23:15",
        "url": "https://files.pythonhosted.org/packages/47/8f/1f2798050a55674a0a85d5168b9f3302fe3e586522f70d0f1c922b660f62/cacofonisk-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dceb0fadc0a37e4365d67860be73f8aa",
          "sha256": "111f021649f616fd42be5a598cc151c47797eb92ac36a734164ab961f58a1620"
        },
        "downloads": -1,
        "filename": "cacofonisk-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dceb0fadc0a37e4365d67860be73f8aa",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31639,
        "upload_time": "2017-10-10T09:28:04",
        "url": "https://files.pythonhosted.org/packages/9f/1c/9bcd9675154959c5d477ffc9d563ce0f4039dd397962ed713cbfc48bb4f1/cacofonisk-0.2.0.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0d7024eae3b21b3609bffe022c9af250",
          "sha256": "158928b1cda9c074a91a0d5186be62c4917d149fe261ddaa8cf9a304139bc1e4"
        },
        "downloads": -1,
        "filename": "cacofonisk-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0d7024eae3b21b3609bffe022c9af250",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32438,
        "upload_time": "2017-10-30T09:54:08",
        "url": "https://files.pythonhosted.org/packages/15/75/72e03d579ad8b44e9555d57ed93afad252d1d3c3a84e6c3f89c0a9308b58/cacofonisk-0.2.2.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c608d67a3c2c0bb22164bb08cf2387d8",
          "sha256": "7293e83c4fd32178039ee05dd1d4a786b4431099a68336e5c9de81307ce2a445"
        },
        "downloads": -1,
        "filename": "cacofonisk-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c608d67a3c2c0bb22164bb08cf2387d8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 37109,
        "upload_time": "2017-11-23T09:27:05",
        "url": "https://files.pythonhosted.org/packages/33/9b/15102bec61ab4afced0aa2494302eaf79b11c882fe8b1f895f4767fd23f9/cacofonisk-0.3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c608d67a3c2c0bb22164bb08cf2387d8",
        "sha256": "7293e83c4fd32178039ee05dd1d4a786b4431099a68336e5c9de81307ce2a445"
      },
      "downloads": -1,
      "filename": "cacofonisk-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c608d67a3c2c0bb22164bb08cf2387d8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 37109,
      "upload_time": "2017-11-23T09:27:05",
      "url": "https://files.pythonhosted.org/packages/33/9b/15102bec61ab4afced0aa2494302eaf79b11c882fe8b1f895f4767fd23f9/cacofonisk-0.3.0.tar.gz"
    }
  ]
}