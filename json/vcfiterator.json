{
  "info": {
    "author": "Svein Tore Koksrud Seljebotn",
    "author_email": "sveint@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "vcfiterator\n*************\nPython module for iterating over a VCF file, parsing and generating data structures. Targeted at understanding annotation data, and creating JSON output.\n\nThis module is still very much a WIP, but is fully working.\n\nBackground\n~~~~~~~~~~\n\nParsing VCF files into a more machine usable format can be difficult, especially when dealing with INFO fields from annotation software. Most annotation programs use their own custom format. To support parsing such INFO fields, vcfiterator has a plugin system for supporting custom fields.\n\nThe main purpose for this module is to be able to parse VCF files and generate usable JSON from it, with no further parsing necessary.\nIt can also be useful for any task where the annotation data needs to be readily available.\n\nFeatures\n~~~~~~~~~~\n\nIt currently supports output from the following annotation software:\n\n1. VEP release 79\n2. snpEff\n\nYou can easily add support for more software (see BaseInfoProcessor in processors.py). Pull requests are welcome.\n\nIt does not yet support tabix indexing or compressed VCF files.\n\nUsage\n~~~~~~~~~~\n\nSimple example showing general usage:\n\n.. code-block:: python\n\n      from vcfiterator import VcfIterator\n      from vcfiterator.processors import VEPInfoProcessor, SnpEffInfoProcessor\n\n      v = VcfIterator(path)\n      v.addInfoProcessor(VEPInfoProcessor)\n      v.addInfoProcessor(SnpEffInfoProcessor)\n\n      # Print all VEP info for all variants\n      for variant in v.iter():\n          alleles = variant['ALT']\n          for allele in alleles:\n              print allele\n              print variant['INFO'][allele]['CSQ']\n\n\nExample output\n~~~~~~~~~~~~~~~~~\n\nIn short, it takes a VCF line like the following:\n\n.. code-block:: text\n\n      5   179390472   .   C   A   21.77   LowQual AC=2;AF=1.0;AN=2;DP=2;FS=0.0;MLEAC=2;MLEAF=1.0;MQ=60.0;MQ0=0;QD=10.88;CSQ=A|55819|NM_018434.5|Transcript|stop_gained&splice_region_variant|1659|1243|415|E/*|Gag/Tag||1||-1|protein_coding|YES||NP_060904.2|||8/9|||NM_018434.5:c.1243G>T|NP_060904.2:p.Glu415Ter||||||||||||||,A|ENSG00000113269|ENST00000519708|Transcript|downstream_gene_variant|||||||1|3511|-1|retained_intron||||||||||||||||||||||||,A|55819|NM_001280801.1|Transcript|intron_variant|||||||1||-1|protein_coding|||NP_001267730.1||||7/7||NM_001280801.1:c.1150+3334G>T|||||||||||||||,A|ENSG00000113269|ENST00000521389|Transcript|stop_gained&splice_region_variant|1659|1243|415|E/*|Gag/Tag||1||-1|protein_coding|YES|CCDS4451.1|ENSP00000430237|||8/9|||ENST00000521389.1:c.1243G>T|ENSP00000430237.1:p.Glu415Ter||||||||||||||,A|ENSG00000113269|ENST00000522208|Transcript|intron_variant|||||||1||-1|protein_coding|||ENSP00000429509||||7/7||ENST00000522208.2:c.1150+3334G>T|||||||||||||||,A|ENSG00000113269|ENST00000521901|Transcript|splice_region_variant&non_coding_transcript_exon_variant&non_coding_transcript_variant|472||||||1||-1|retained_intron||||||1/2|||ENST00000521901.1:n.472G>T|||||||||||||||,A|ENSG00000249412|ENST00000510240|Transcript|upstream_gene_variant|||||||1|143|1|antisense|YES|||||||||||||||||||||||,A|ENSG00000113269|ENST00000520911|Transcript|splice_region_variant&3_prime_UTR_variant&NMD_transcript_variant|1599||||||1||-1|nonsense_mediated_decay|||ENSP00000430999|||8/9|||ENST00000520911.1:c.*762G>T|||||||||||||||,A|ENSG00000113269|ENST00000261947|Transcript|intron_variant|||||||1||-1|protein_coding||CCDS64340.1|ENSP00000261947||||7/7||ENST00000261947.4:c.1150+3334G>T|||||||||||||||;EFF=stop_gained(HIGH|NONSENSE|Gag/Tag|p.Glu415*/c.1243G>T|419|RNF130|protein_coding|CODING|ENST00000521389|8|1),splice_region_variant(LOW|||c.1243G>T|419|RNF130|protein_coding|CODING|ENST00000521389|8|1),splice_region_variant(LOW|||||RNF130|nonsense_mediated_decay|CODING|ENST00000520911|8|1),splice_region_variant(LOW|||n.472G>T||RNF130|retained_intron|CODING|ENST00000521901|1|1),sequence_feature[topological_domain:Cytoplasmic](LOW|||c.1243C>A|419|RNF130|protein_coding|CODING|ENST00000521389|7|1),sequence_feature[topological_domain:Cytoplasmic](LOW|||c.1243C>A|419|RNF130|protein_coding|CODING|ENST00000521389|4|1),sequence_feature[topological_domain:Cytoplasmic](LOW|||c.1243C>A|419|RNF130|protein_coding|CODING|ENST00000521389|3|1),sequence_feature[topological_domain:Cytoplasmic](LOW|||c.1243C>A|419|RNF130|protein_coding|CODING|ENST00000521389|9|1),sequence_feature[topological_domain:Cytoplasmic](LOW|||c.1243C>A|419|RNF130|protein_coding|CODING|ENST00000521389|6|1),sequence_feature[topological_domain:Cytoplasmic](LOW|||c.1243C>A|419|RNF130|protein_coding|CODING|ENST00000521389|5|1),sequence_feature[topological_domain:Cytoplasmic](LOW|||c.1243C>A|419|RNF130|protein_coding|CODING|ENST00000521389|8|1),3_prime_UTR_variant(MODIFIER||49801|n.*762G>T||RNF130|nonsense_mediated_decay|CODING|ENST00000520911|8|1),upstream_gene_variant(MODIFIER||143|||CTC-563A5.2|antisense|NON_CODING|ENST00000510240||1),downstream_gene_variant(MODIFIER||3511|||RNF130|retained_intron|CODING|ENST00000519708||1),intron_variant(MODIFIER|||c.1150+3334G>T|419|RNF130|protein_coding|CODING|ENST00000522208|7|1),intron_variant(MODIFIER|||c.1150+3334G>T|384|RNF130|protein_coding|CODING|ENST00000261947|7|1),non_coding_exon_variant(MODIFIER|||n.472G>T||RNF130|retained_intron|CODING|ENST00000521901|1|1) GT:AD:DP:GQ:PL  1/1:0,2:2:6:49,6,0\n\n\n\nand turns it into a data structure:\n\n.. code-block:: python\n\n      {'ALT': ['A'],\n       'CHROM': '5',\n       'FILTER': 'LowQual',\n       'ID': '.',\n       'INFO': {'A': {'AC': '2',\n                      'AF': '1.0',\n                      'CSQ': [{'ALLELE_NUM': 1,\n                               'Allele': 'A',\n                               'Amino_acids': 'E/*',\n                               'BIOTYPE': 'protein_coding',\n                               'CANONICAL': 'YES',\n                               'CDS_position': '1243',\n                               'Codons': 'Gag/Tag',\n                               'Consequence': 'stop_gained&splice_region_variant',\n                               'ENSP': 'NP_060904.2',\n                               'EXON': '8/9',\n                               'Feature': 'NM_018434.5',\n                               'Feature_type': 'Transcript',\n                               'Gene': '55819',\n                               'HGVSc': 'NM_018434.5:c.1243G>T',\n                               'HGVSp': 'NP_060904.2:p.Glu415Ter',\n                               'Protein_position': '415',\n                               'STRAND': -1,\n                               'cDNA_position': '1659'},\n\n                              ....\n\n                              {'ALLELE_NUM': 1,\n                               'Allele': 'A',\n                               'BIOTYPE': 'protein_coding',\n                               'CCDS': 'CCDS64340.1',\n                               'Consequence': 'intron_variant',\n                               'ENSP': 'ENSP00000261947',\n                               'Feature': 'ENST00000261947',\n                               'Feature_type': 'Transcript',\n                               'Gene': 'ENSG00000113269',\n                               'HGVSc': 'ENST00000261947.4:c.1150+3334G>T',\n                               'INTRON': '7/7',\n                               'STRAND': -1}],\n                      'EFF': [{'Amino_Acid_Change': 'p.Glu415*/c.1243G>T',\n                               'Amino_Acid_length': 419,\n                               'Codon_Change': 'Gag/Tag',\n                               'Effect': 'stop_gained',\n                               'Effect_Impact': 'HIGH',\n                               'Exon_Rank': 8,\n                               'Functional_Class': 'NONSENSE',\n                               'Gene_Coding': 'CODING',\n                               'Gene_Name': 'RNF130',\n                               'Genotype_Number': 1,\n                               'Transcript_BioType': 'protein_coding',\n                               'Transcript_ID': 'ENST00000521389'},\n\n                              ....\n\n                              {'Amino_Acid_Change': 'n.472G>T',\n                               'Effect': 'non_coding_exon_variant',\n                               'Effect_Impact': 'MODIFIER',\n                               'Exon_Rank': 1,\n                               'Gene_Coding': 'CODING',\n                               'Gene_Name': 'RNF130',\n                               'Genotype_Number': 1,\n                               'Transcript_BioType': 'retained_intron',\n                               'Transcript_ID': 'ENST00000521901'}],\n                      'MLEAC': '2',\n                      'MLEAF': '1.0'},\n                'ALL': {'AN': '2',\n                        'DP': '2',\n                        'FS': '0.0',\n                        'MQ': '60.0',\n                        'MQ0': '0',\n                        'QD': '10.88'}},\n       'POS': 179390472,\n       'QUAL': 21.77,\n       'REF': 'C',\n       'SAMPLES': {'TEST_CHR5': {'AD': [0, 2],\n                                 'DP': 2,\n                                 'GQ': 6,\n                                 'GT': '1/1',\n                                 'PL': [49, 6, 0]}}}\n\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/sveint/vcfiterator",
    "keywords": "parsing,iterator,vcf,json",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "vcfiterator",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/vcfiterator/",
    "release_url": "https://pypi.org/project/vcfiterator/0.1.2/",
    "requires_python": null,
    "summary": "A package for iterating of .vcf files, parsing it to data structures. Especially useful for converting vcf files to JSON.",
    "version": "0.1.2"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b581c5814eaa76673f6e828a9a89a127",
          "sha256": "499805067f74f4396e92895d46de5e8ba58d2eb00d6ca1d75da5b2d9c7fabac5"
        },
        "downloads": 970,
        "filename": "vcfiterator-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b581c5814eaa76673f6e828a9a89a127",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7696,
        "upload_time": "2015-09-24T08:26:53",
        "url": "https://files.pythonhosted.org/packages/f1/cd/f793845b59e76402a037b96468e9e0a79b9160ebadfd410e6eaca7e3f4d1/vcfiterator-0.1.tar.gz"
      }
    ],
    "0.1-pre4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d5c9222fd5099f8ca50b75cf1d5d8e09",
          "sha256": "8ec3b847341f34fa663505c1ee2e4acf491dc0a1bedf89c6bbbcabc93932eb0d"
        },
        "downloads": 568,
        "filename": "vcfiterator-0.1-pre4.tar.gz",
        "has_sig": false,
        "md5_digest": "d5c9222fd5099f8ca50b75cf1d5d8e09",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7707,
        "upload_time": "2015-09-24T08:26:04",
        "url": "https://files.pythonhosted.org/packages/f8/64/ae03bdc0db8c197082354d0899816260b7b89f85546ae1e68d4e0a3a18cb/vcfiterator-0.1-pre4.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "81af052c52198be0aae261bd11545e48",
          "sha256": "e21e89d4d0d71200c66baf4ffe12e0c4ad57f8cd1e0bbbc114dd5eaf293977a6"
        },
        "downloads": 657,
        "filename": "vcfiterator-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "81af052c52198be0aae261bd11545e48",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7515,
        "upload_time": "2015-09-24T08:38:56",
        "url": "https://files.pythonhosted.org/packages/97/a3/05f6ee010fe62d2775209f3552767a40b29b12176b812df2f985d5bfb144/vcfiterator-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "030a1d13c61d7de1523ee9823f394ced",
          "sha256": "ac2ba81d0eb627b1c145fb8b75bc2cab9524bac94a900dee0cadbce6a2620b6d"
        },
        "downloads": 396,
        "filename": "vcfiterator-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "030a1d13c61d7de1523ee9823f394ced",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7571,
        "upload_time": "2016-01-05T13:56:44",
        "url": "https://files.pythonhosted.org/packages/bd/b4/22ad1fd67afa4891e4bfe75812beb8fbb669a7723a91fb553440ff465cff/vcfiterator-0.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "030a1d13c61d7de1523ee9823f394ced",
        "sha256": "ac2ba81d0eb627b1c145fb8b75bc2cab9524bac94a900dee0cadbce6a2620b6d"
      },
      "downloads": 396,
      "filename": "vcfiterator-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "030a1d13c61d7de1523ee9823f394ced",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7571,
      "upload_time": "2016-01-05T13:56:44",
      "url": "https://files.pythonhosted.org/packages/bd/b4/22ad1fd67afa4891e4bfe75812beb8fbb669a7723a91fb553440ff465cff/vcfiterator-0.1.2.tar.gz"
    }
  ]
}