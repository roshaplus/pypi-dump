{
  "info": {
    "author": "Oleg Pidsadnyi, Anatoly Bubenkov and others",
    "author_email": "oleg.pidsadnyi@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.0",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "BDD library for the py.test runner\n==================================\n\n.. image:: http://img.shields.io/pypi/v/pytest-bdd.svg\n   :target: https://pypi.python.org/pypi/pytest-bdd\n.. image:: http://img.shields.io/coveralls/pytest-dev/pytest-bdd/master.svg\n   :target: https://coveralls.io/r/pytest-dev/pytest-bdd\n.. image:: https://travis-ci.org/pytest-dev/pytest-bdd.svg?branch=master\n    :target: https://travis-ci.org/pytest-dev/pytest-bdd\n.. image:: https://readthedocs.org/projects/pytest-bdd/badge/?version=latest\n    :target: https://readthedocs.org/projects/pytest-bdd/?badge=latest\n    :alt: Documentation Status\n\npytest-bdd implements a subset of Gherkin language for the automation of the project\nrequirements testing and easier behavioral driven development.\n\nUnlike many other BDD tools it doesn't require a separate runner and benefits from\nthe power and flexibility of the pytest. It allows to unify your unit and functional\ntests, easier continuous integration server configuration and maximal reuse of the\ntests setup.\n\nPytest fixtures written for the unit tests can be reused for the setup and actions\nmentioned in the feature steps with dependency injection, which allows a true BDD\njust-enough specification of the requirements without maintaining any context object\ncontaining the side effects of the Gherkin imperative declarations.\n\n.. _behave: https://pypi.python.org/pypi/behave\n.. _pytest-splinter: https://github.com/pytest-dev/pytest-splinter\n\nInstall pytest-bdd\n------------------\n\n::\n\n    pip install pytest-bdd\n\n\nExample\n-------\n\nAn example test for a blog hosting software could look like this.\nNote that pytest-splinter_ is used to get the browser fixture.\n\npublish_article.feature:\n\n.. code-block:: gherkin\n\n    Feature: Blog\n        A site where you can publish your articles.\n\n    Scenario: Publishing the article\n        Given I'm an author user\n        And I have an article\n        When I go to the article page\n        And I press the publish button\n        Then I should not see the error message\n        And the article should be published  # Note: will query the database\n\nNote that only one feature is allowed per feature file.\n\ntest_publish_article.py:\n\n.. code-block:: python\n\n    from pytest_bdd import scenario, given, when, then\n\n    @scenario('publish_article.feature', 'Publishing the article')\n    def test_publish():\n        pass\n\n\n    @given(\"I'm an author user\")\n    def author_user(auth, author):\n        auth['user'] = author.user\n\n\n    @given('I have an article')\n    def article(author):\n        return create_test_article(author=author)\n\n\n    @when('I go to the article page')\n    def go_to_article(article, browser):\n        browser.visit(urljoin(browser.url, '/manage/articles/{0}/'.format(article.id)))\n\n\n    @when('I press the publish button')\n    def publish_article(browser):\n        browser.find_by_css('button[name=publish]').first.click()\n\n\n    @then('I should not see the error message')\n    def no_error_message(browser):\n        with pytest.raises(ElementDoesNotExist):\n            browser.find_by_css('.message.error').first\n\n\n    @then('the article should be published')\n    def article_is_published(article):\n        article.refresh()  # Refresh the object in the SQLAlchemy session\n        assert article.is_published\n\n\nScenario decorator\n------------------\n\nScenario decorator can accept such optional keyword arguments:\n\n* ``encoding`` - decode content of feature file in specific encoding. UTF-8 is default.\n* ``example_converters`` - mapping to pass functions to convert example values provided in feature files.\n\nFunction decorated with `scenario` decorator behaves like a normal test function,\nwhich will be executed after all scenario steps.\nYou can consider it as a normal pytest test function, e.g. order fixtures there,\ncall other functions and make assertions:\n\n\n.. code-block:: python\n\n    from pytest_bdd import scenario, given, when, then\n\n    @scenario('publish_article.feature', 'Publishing the article')\n    def test_publish(browser):\n        assert article.title in browser.html\n\n\nStep aliases\n------------\n\nSometimes it is needed to declare the same fixtures or steps with the\ndifferent names for better readability. In order to use the same step\nfunction with multiple step names simply decorate it multiple times:\n\n.. code-block:: python\n\n    @given('I have an article')\n    @given('there\\'s an article')\n    def article(author):\n        return create_test_article(author=author)\n\nNote that the given step aliases are independent and will be executed\nwhen mentioned.\n\nFor example if you associate your resource to some owner or not. Admin\nuser can\u2019t be an author of the article, but articles should have a\ndefault author.\n\n.. code-block:: gherkin\n\n    Scenario: I'm the author\n        Given I'm an author\n        And I have an article\n\n\n    Scenario: I'm the admin\n        Given I'm the admin\n        And there is an article\n\n\nGiven step scope\n----------------\n\nIf you need your given step to be executed less than once per scenario (for example: once for module, session), you can\npass optional ``scope`` argument:\n\n.. code-block:: python\n\n    @given('I have an article', scope='session')\n    def article(author):\n        return create_test_article(author=author)\n\n.. code-block:: gherkin\n\n    Scenario: I'm the author\n        Given I'm an author\n        And I have an article\n\n\n    Scenario: I'm the admin\n        Given I'm the admin\n        And there is an article\n\n\nFor this example, step function for 'I have an article' given step will be executed once even though there are 2\nscenarios using it.\nNote that for other step types, it makes no sense to have scope larger than 'function' (the default) as they represent\nan action (when step), and assertion (then step).\n\n\nStep arguments\n--------------\n\nOften it's possible to reuse steps giving them a parameter(s).\nThis allows to have single implementation and multiple use, so less code.\nAlso opens the possibility to use same step twice in single scenario and with different arguments!\nAnd even more, there are several types of step parameter parsers at your disposal\n(idea taken from behave_ implementation):\n\n.. _pypi_parse: http://pypi.python.org/pypi/parse\n.. _pypi_parse_type: http://pypi.python.org/pypi/parse_type\n\n**string** (the default)\n    This is the default and can be considered as a `null` or `exact` parser. It parses no parameters\n    and matches the step name by equality of strings.\n**parse** (based on: pypi_parse_)\n    Provides a simple parser that replaces regular expressions for\n    step parameters with a readable syntax like ``{param:Type}``.\n    The syntax is inspired by the Python builtin ``string.format()``\n    function.\n    Step parameters must use the named fields syntax of pypi_parse_\n    in step definitions. The named fields are extracted,\n    optionally type converted and then used as step function arguments.\n    Supports type conversions by using type converters passed via `extra_types`\n**cfparse** (extends: pypi_parse_, based on: pypi_parse_type_)\n    Provides an extended parser with \"Cardinality Field\" (CF) support.\n    Automatically creates missing type converters for related cardinality\n    as long as a type converter for cardinality=1 is provided.\n    Supports parse expressions like:\n    * ``{values:Type+}`` (cardinality=1..N, many)\n    * ``{values:Type*}`` (cardinality=0..N, many0)\n    * ``{value:Type?}``  (cardinality=0..1, optional)\n    Supports type conversions (as above).\n**re**\n    This uses full regular expressions to parse the clause text. You will\n    need to use named groups \"(?P<name>...)\" to define the variables pulled\n    from the text and passed to your ``step()`` function.\n    Type conversion can only be done via `converters` step decorator argument (see example below).\n\nThe default parser is `string`, so just plain one-to-one match to the keyword definition.\nParsers except `string`, as well as their optional arguments are specified like:\n\nfor `cfparse` parser\n\n.. code-block:: python\n\n    from pytest_bdd import parsers\n\n    @given(parsers.cfparse('there are {start:Number} cucumbers', extra_types=dict(Number=int)))\n    def start_cucumbers(start):\n        return dict(start=start, eat=0)\n\nfor `re` parser\n\n.. code-block:: python\n\n    from pytest_bdd import parsers\n\n    @given(parsers.re(r'there are (?P<start>\\d+) cucumbers'), converters=dict(start=int))\n    def start_cucumbers(start):\n        return dict(start=start, eat=0)\n\n\nExample:\n\n.. code-block:: gherkin\n\n    Scenario: Arguments for given, when, thens\n        Given there are 5 cucumbers\n\n        When I eat 3 cucumbers\n        And I eat 2 cucumbers\n\n        Then I should have 0 cucumbers\n\n\nThe code will look like:\n\n.. code-block:: python\n\n    import re\n    from pytest_bdd import scenario, given, when, then, parsers\n\n\n    @scenario('arguments.feature', 'Arguments for given, when, thens')\n    def test_arguments():\n        pass\n\n\n    @given(parsers.parse('there are {start:d} cucumbers'))\n    def start_cucumbers(start):\n        return dict(start=start, eat=0)\n\n\n    @when(parsers.parse('I eat {eat:d} cucumbers'))\n    def eat_cucumbers(start_cucumbers, eat):\n        start_cucumbers['eat'] += eat\n\n\n    @then(parsers.parse('I should have {left:d} cucumbers'))\n    def should_have_left_cucumbers(start_cucumbers, start, left):\n        assert start_cucumbers['start'] == start\n        assert start - start_cucumbers['eat'] == left\n\nExample code also shows possibility to pass argument converters which may be useful if you need to postprocess step\narguments after the parser.\n\nYou can implement your own step parser. It's interface is quite simple. The code can looks like:\n\n.. code-block:: python\n\n    import re\n\n    from pytest_bdd import given, parsers\n\n    class MyParser(parsers.StepParser):\n\n        \"\"\"Custom parser.\"\"\"\n\n        def __init__(self, name, **kwargs):\n            \"\"\"Compile regex.\"\"\"\n            super(re, self).__init__(name)\n            self.regex = re.compile(re.sub('%(.+)%', '(?P<\\1>.+)', self.name), **kwargs)\n\n        def parse_arguments(self, name):\n            \"\"\"Get step arguments.\n\n            :return: `dict` of step arguments\n            \"\"\"\n            return self.regex.match(name).groupdict()\n\n        def is_matching(self, name):\n            \"\"\"Match given name with the step name.\"\"\"\n            return bool(self.regex.match(name))\n\n    @given(parsers.parse('there are %start% cucumbers'))\n    def start_cucumbers(start):\n        return dict(start=start, eat=0)\n\nStep arguments are fixtures as well!\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nStep arguments are injected into pytest `request` context as normal fixtures with the names equal to the names of the\narguments. This opens a number of possibilies:\n\n* you can access step's argument as a fixture in other step function just by mentioning it as an argument (just like any othe pytest fixture)\n* if the name of the step argument clashes with existing fixture, it will be overridden by step's argument value; this way you can set/override the value for some fixture deeply inside of the fixture tree in a ad-hoc way by just choosing the proper name for the step argument.\n\n\nOverride fixtures via given steps\n---------------------------------\n\nDependency injection is not a panacea if you have complex structure of your test setup data. Sometimes there's a need\nsuch a given step which would imperatively change the fixture only for certain test (scenario), while for other tests\nit will stay untouched. To allow this, special parameter `target_fixture` exists in the `given` decorator:\n\n.. code-block:: python\n\n    from pytest_bdd import given\n\n    @pytest.fixture\n    def foo():\n        return \"foo\"\n\n\n    @given(\"I have injecting given\", target_fixture=\"foo\")\n    def injecting_given():\n        return \"injected foo\"\n\n\n    @then('foo should be \"injected foo\"')\n    def foo_is_foo(foo):\n        assert foo == 'injected foo'\n\n\n.. code-block:: gherkin\n\n    Scenario: Test given fixture injection\n        Given I have injecting given\n        Then foo should be \"injected foo\"\n\nIn this example existing fixture `foo` will be overridden by given step `I have injecting given` only for scenario it's\nused in.\n\n\nMultiline steps\n---------------\n\nAs Gherkin, pytest-bdd supports multiline steps\n(aka `PyStrings <http://docs.behat.org/guides/1.gherkin.html#pystrings>`_).\nBut in much cleaner and powerful way:\n\n.. code-block:: gherkin\n\n    Scenario: Multiline step using sub indentation\n        Given I have a step with:\n            Some\n            Extra\n            Lines\n        Then the text should be parsed with correct indentation\n\nStep is considered as multiline one, if the **next** line(s) after it's first line, is indented relatively\nto the first line. The step name is then simply extended by adding futher lines with newlines.\nIn the example above, the Given step name will be:\n\n.. code-block:: python\n\n    'I have a step with:\\nSome\\nExtra\\nLines'\n\nYou can of course register step using full name (including the newlines), but it seems more practical to use\nstep arguments and capture lines after first line (or some subset of them) into the argument:\n\n.. code-block:: python\n\n    import re\n\n    from pytest_bdd import given, then, scenario\n\n\n    @scenario(\n        'multiline.feature',\n        'Multiline step using sub indentation',\n    )\n    def test_multiline():\n        pass\n\n\n    @given(parsers.parse('I have a step with:\\n{text}'))\n    def i_have_text(text):\n        return text\n\n\n    @then('the text should be parsed with correct indentation')\n    def text_should_be_correct(i_have_text, text):\n        assert i_have_text == text == 'Some\\nExtra\\nLines'\n\nNote that `then` step definition (`text_should_be_correct`) in this example uses `text` fixture which is provided\nby a a `given` step (`i_have_text`) argument with the same name (`text`). This possibility is described in\nthe `Step arguments are fixtures as well!`_ section.\n\n\nScenarios shortcut\n------------------\n\nIf you have relatively large set of feature files, it's boring to manually bind scenarios to the tests using the\nscenario decorator. Of course with the manual approach you get all the power to be able to additionally parametrize\nthe test, give the test function a nice name, document it, etc, but in the majority of the cases you don't need that.\nInstead you want to bind `all` scenarios found in the `feature` folder(s) recursively automatically.\nFor this - there's a `scenarios` helper.\n\n.. code-block:: python\n\n    from pytest_bdd import scenarios\n\n    # assume 'features' subfolder is in this file's directory\n    scenarios('features')\n\nThat's all you need to do to bind all scenarios found in the `features` folder!\nNote that you can pass multiple paths, and those paths can be either feature files or feature folders.\n\n\n.. code-block:: python\n\n    from pytest_bdd import scenarios\n\n    # pass multiple paths/files\n    scenarios('features', 'other_features/some.feature', 'some_other_features')\n\nBut what if you need to manually bind certain scenario, leaving others to be automatically bound?\nJust write your scenario in a `normal` way, but ensure you do it `BEFORE` the call of `scenarios` helper.\n\n\n.. code-block:: python\n\n    from pytest_bdd import scenario, scenarios\n\n    @scenario('features/some.feature', 'Test something')\n    def test_something():\n        pass\n\n    # assume 'features' subfolder is in this file's directory\n    scenarios('features')\n\nIn the example above `test_something` scenario binding will be kept manual, other scenarios found in the `features`\nfolder will be bound automatically.\n\n\nScenario outlines\n-----------------\n\nScenarios can be parametrized to cover few cases. In Gherkin the variable\ntemplates are written using corner braces as <somevalue>.\n`Gherkin scenario outlines <http://docs.behat.org/guides/1.gherkin.html#scenario-outlines>`_ are supported by pytest-bdd\nexactly as it's described in be behave_ docs.\n\nExample:\n\n.. code-block:: gherkin\n\n    Scenario Outline: Outlined given, when, thens\n        Given there are <start> cucumbers\n        When I eat <eat> cucumbers\n        Then I should have <left> cucumbers\n\n        Examples:\n        | start | eat | left |\n        |  12   |  5  |  7   |\n\npytest-bdd feature file format also supports example tables in different way:\n\n\n.. code-block:: gherkin\n\n    Scenario Outline: Outlined given, when, thens\n        Given there are <start> cucumbers\n        When I eat <eat> cucumbers\n        Then I should have <left> cucumbers\n\n        Examples: Vertical\n        | start | 12 | 2 |\n        | eat   | 5  | 1 |\n        | left  | 7  | 1 |\n\nThis form allows to have tables with lots of columns keeping the maximum text width predictable without significant\nreadability change.\n\nThe code will look like:\n\n.. code-block:: python\n\n    from pytest_bdd import given, when, then, scenario\n\n\n    @scenario(\n        'outline.feature',\n        'Outlined given, when, thens',\n        example_converters=dict(start=int, eat=float, left=str)\n    )\n    def test_outlined():\n        pass\n\n\n    @given('there are <start> cucumbers')\n    def start_cucumbers(start):\n        assert isinstance(start, int)\n        return dict(start=start)\n\n\n    @when('I eat <eat> cucumbers')\n    def eat_cucumbers(start_cucumbers, eat):\n        assert isinstance(eat, float)\n        start_cucumbers['eat'] = eat\n\n\n    @then('I should have <left> cucumbers')\n    def should_have_left_cucumbers(start_cucumbers, start, eat, left):\n        assert isinstance(left, str)\n        assert start - eat == int(left)\n        assert start_cucumbers['start'] == start\n        assert start_cucumbers['eat'] == eat\n\nExample code also shows possibility to pass example converters which may be useful if you need parameter types\ndifferent than strings.\n\n\nFeature examples\n^^^^^^^^^^^^^^^^\n\nIt's possible to declare example table once for the whole feature, and it will be shared\namong all the scenarios of that feature:\n\n.. code-block:: gherkin\n\n    Feature: Outline\n\n        Examples:\n        | start | eat | left |\n        |  12   |  5  |  7   |\n        |  5    |  4  |  1   |\n\n        Scenario Outline: Eat cucumbers\n            Given there are <start> cucumbers\n            When I eat <eat> cucumbers\n            Then I should have <left> cucumbers\n\n        Scenario Outline: Eat apples\n            Given there are <start> apples\n            When I eat <eat> apples\n            Then I should have <left> apples\n\nFor some more complex case, you might want to parametrize on both levels: feature and scenario.\nThis is allowed as long as parameter names do not clash:\n\n\n.. code-block:: gherkin\n\n    Feature: Outline\n\n        Examples:\n        | start | eat | left |\n        |  12   |  5  |  7   |\n        |  5    |  4  |  1   |\n\n        Scenario Outline: Eat fruits\n            Given there are <start> <fruits>\n            When I eat <eat> <fruits>\n            Then I should have <left> <fruits>\n\n            Examples:\n            | fruits  |\n            | oranges |\n            | apples  |\n\n        Scenario Outline: Eat vegetables\n            Given there are <start> <vegetables>\n            When I eat <eat> <vegetables>\n            Then I should have <left> <vegetables>\n\n            Examples:\n            | vegetables |\n            | carrots    |\n            | tomatoes   |\n\n\nCombine scenario outline and pytest parametrization\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIt's also possible to parametrize the scenario on the python side.\nThe reason for this is that it is sometimes not needed to mention example table for every scenario.\n\nThe code will look like:\n\n.. code-block:: python\n\n    import pytest\n    from pytest_bdd import scenario, given, when, then\n\n\n    # Here we use pytest to parametrize the test with the parameters table\n    @pytest.mark.parametrize(\n        ['start', 'eat', 'left'],\n        [(12, 5, 7)])\n    @scenario(\n        'parametrized.feature',\n        'Parametrized given, when, thens',\n    )\n    # Note that we should take the same arguments in the test function that we use\n    # for the test parametrization either directly or indirectly (fixtures depend on them).\n    def test_parametrized(start, eat, left):\n        \"\"\"We don't need to do anything here, everything will be managed by the scenario decorator.\"\"\"\n\n\n    @given('there are <start> cucumbers')\n    def start_cucumbers(start):\n        return dict(start=start)\n\n\n    @when('I eat <eat> cucumbers')\n    def eat_cucumbers(start_cucumbers, start, eat):\n        start_cucumbers['eat'] = eat\n\n\n    @then('I should have <left> cucumbers')\n    def should_have_left_cucumbers(start_cucumbers, start, eat, left):\n        assert start - eat == left\n        assert start_cucumbers['start'] == start\n        assert start_cucumbers['eat'] == eat\n\nWith a parametrized.feature file:\n\n.. code-block:: gherkin\n\n    Feature: parametrized\n\n    Scenario: Parametrized given, when, thens\n        Given there are <start> cucumbers\n        When I eat <eat> cucumbers\n        Then I should have <left> cucumbers\n\n\nThe significant downside of this approach is inability to see the test table from the feature file.\n\n\nOrganizing your scenarios\n-------------------------\n\nThe more features and scenarios you have, the more important becomes the question about their organization.\nThe things you can do (and that is also a recommended way):\n\n* organize your feature files in the folders by semantic groups:\n\n::\n\n    features\n    \u2502\n    \u251c\u2500\u2500frontend\n    \u2502  \u2502\n    \u2502  \u2514\u2500\u2500auth\n    \u2502     \u2502\n    \u2502     \u2514\u2500\u2500login.feature\n    \u2514\u2500\u2500backend\n       \u2502\n       \u2514\u2500\u2500auth\n          \u2502\n          \u2514\u2500\u2500login.feature\n\nThis looks fine, but how do you run tests only for certain feature?\nAs pytest-bdd uses pytest, and bdd scenarios are actually normal tests. But test files\nare separate from the feature files, the mapping is up to developers, so the test files structure can look\ncompletely different:\n\n::\n\n    tests\n    \u2502\n    \u2514\u2500\u2500functional\n       \u2502\n       \u2514\u2500\u2500test_auth.py\n          \u2502\n          \u2514 \"\"\"Authentication tests.\"\"\"\n            from pytest_bdd import scenario\n\n            @scenario('frontend/auth/login.feature')\n            def test_logging_in_frontend():\n                pass\n\n            @scenario('backend/auth/login.feature')\n            def test_logging_in_backend():\n                pass\n\n\nFor picking up tests to run we can use\n`tests selection <http://pytest.org/latest/usage.html#specifying-tests-selecting-tests>`_ technique. The problem is that\nyou have to know how your tests are organized, knowing ony the feature files organization is not enough.\n`cucumber tags <https://github.com/cucumber/cucumber/wiki/Tags>`_ introduce standard way of categorizing your features\nand scenarios, which pytest-bdd supports. For example, we could have:\n\n.. code-block:: gherkin\n\n    @login @backend\n    Feature: Login\n\n      @successful\n      Scenario: Successful login\n\n\npytest-bdd uses `pytest markers <http://pytest.org/latest/mark.html#mark>`_ as a `storage` of the tags for the given\nscenario test, so we can use standard test selection:\n\n.. code-block:: bash\n\n    py.test -k \"backend and login and successful\"\n\nThe feature and scenario markers are not different from standard pytest markers, and the `@` symbol is stripped out\nautomatically to allow test selector expressions. If you want to have bdd-related tags to be distinguishable from the\nother test markers, use prefix like `bdd`.\nNote that if you use pytest `--strict` option, all bdd tags mentioned in the feature files should be also in the\n`markers` setting of the `pytest.ini` config. Also for tags please use names which are python-compartible variable\nnames, eg starts with a non-number, underscore alphanumberic, etc. That way you can safely use tags for tests filtering.\n\nYou can customize how hooks are converted to pytest marks by implementing the\n``pytest_bdd_apply_tag`` hook and returning ``True`` from it:\n\n.. code-block:: python\n\n   def pytest_bdd_apply_tag(tag, function):\n       if tag == 'todo':\n           marker = pytest.mark.skip(reason=\"Not implemented yet\")\n           marker(function)\n           return True\n       else:\n           # Fall back to pytest-bdd's default behavior\n           return None\n\nTest setup\n----------\n\nTest setup is implemented within the Given section. Even though these steps\nare executed imperatively to apply possible side-effects, pytest-bdd is trying\nto benefit of the PyTest fixtures which is based on the dependency injection\nand makes the setup more declarative style.\n\n.. code-block:: python\n\n    @given('I have a beautiful article')\n    def article():\n        return Article(is_beautiful=True)\n\nThis also declares a PyTest fixture \"article\" and any other step can depend on it.\n\n.. code-block:: gherkin\n\n    Given I have a beautiful article\n    When I publish this article\n\nWhen step is referring the article to publish it.\n\n.. code-block:: python\n\n    @when('I publish this article')\n    def publish_article(article):\n        article.publish()\n\nMany other BDD toolkits operate a global context and put the side effects there.\nThis makes it very difficult to implement the steps, because the dependencies\nappear only as the side-effects in the run-time and not declared in the code.\nThe publish article step has to trust that the article is already in the context,\nhas to know the name of the attribute it is stored there, the type etc.\n\nIn pytest-bdd you just declare an argument of the step function that it depends on\nand the PyTest will make sure to provide it.\n\nStill side effects can be applied in the imperative style by design of the BDD.\n\n.. code-block:: gherkin\n\n    Given I have a beautiful article\n    And my article is published\n\nFunctional tests can reuse your fixture libraries created for the unit-tests and upgrade\nthem by applying the side effects.\n\n.. code-block:: python\n\n    given('I have a beautiful article', fixture='article')\n\n    @given('my article is published')\n    def published_article(article):\n        article.publish()\n        return article\n\nThis way side-effects were applied to our article and PyTest makes sure that all\nsteps that require the \"article\" fixture will receive the same object. The value\nof the \"published_article\" and the \"article\" fixtures is the same object.\n\nFixtures are evaluated only once within the PyTest scope and their values are cached.\nIn case of Given steps and the step arguments mentioning the same given step makes\nno sense. It won't be executed second time.\n\n.. code-block:: gherkin\n\n    Given I have a beautiful article\n    And some other thing\n    And I have a beautiful article  # Won't be executed, exception is raised\n\n\npytest-bdd will raise an exception even in the case of the steps that use regular expression\npatterns to get arguments.\n\n\n.. code-block:: gherkin\n\n    Given I have 1 cucumbers\n    And I have 2 cucumbers  # Exception is raised\n\nWill raise an exception if the step is using the regular expression pattern.\n\n.. code-block:: python\n\n    @given(re.compile('I have (?P<n>\\d+) cucumbers'))\n    def cucumbers(n):\n        return create_cucumbers(n)\n\n\nBackgrounds\n-----------\n\nIt's often the case that to cover certain feature, you'll need multiple scenarios. And it's logical that the\nsetup for those scenarios will have some common parts (if not equal). For this, there are `backgrounds`.\npytest-bdd implements `Gherkin backgrounds <http://docs.behat.org/en/v2.5/guides/1.gherkin.html#backgrounds>`_ for\nfeatures.\n\n.. code-block:: gherkin\n\n    Feature: Multiple site support\n\n      Background:\n        Given a global administrator named \"Greg\"\n        And a blog named \"Greg's anti-tax rants\"\n        And a customer named \"Wilson\"\n        And a blog named \"Expensive Therapy\" owned by \"Wilson\"\n\n      Scenario: Wilson posts to his own blog\n        Given I am logged in as Wilson\n        When I try to post to \"Expensive Therapy\"\n        Then I should see \"Your article was published.\"\n\n      Scenario: Greg posts to a client's blog\n        Given I am logged in as Greg\n        When I try to post to \"Expensive Therapy\"\n        Then I should see \"Your article was published.\"\n\nIn this example, all steps from the background will be executed before all the scenario's own given\nsteps, adding possibility to prepare some common setup for multiple scenarios in a single feature.\nAbout background best practices, please read\n`here <https://github.com/cucumber/cucumber/wiki/Background#good-practices-for-using-background>`_.\n\n.. NOTE:: There is only step \"Given\" should be used in \"Background\" section,\n          steps \"When\" and \"Then\" are prohibited, because their purpose are\n          related to actions and consuming outcomes, that is conflict with\n          \"Background\" aim - prepare system for tests or \"put the system\n          in a known state\" as \"Given\" does it.\n          The statement above is applied for strict Gherkin mode, which is\n          enabled by default.\n\n\nReusing fixtures\n----------------\n\nSometimes scenarios define new names for the existing fixture that can be\ninherited (reused). For example, if we have pytest fixture:\n\n\n.. code-block:: python\n\n    @pytest.fixture\n    def article():\n       \"\"\"Test article.\"\"\"\n       return Article()\n\n\nThen this fixture can be reused with other names using given():\n\n.. code-block:: python\n\n    given('I have beautiful article', fixture='article')\n\nThis will be equivalent to:\n\n\n.. code-block:: python\n\n    @given('I have beautiful article')\n    def i_have_an_article(article):\n       \"\"\"I have an article.\"\"\"\n       return article\n\n\nReusing steps\n-------------\n\nIt is possible to define some common steps in the parent conftest.py and\nsimply expect them in the child test file.\n\ncommon_steps.feature:\n\n.. code-block:: gherkin\n\n    Scenario: All steps are declared in the conftest\n        Given I have a bar\n        Then bar should have value \"bar\"\n\nconftest.py:\n\n.. code-block:: python\n\n    from pytest_bdd import given, then\n\n\n    @given('I have a bar')\n    def bar():\n        return 'bar'\n\n\n    @then('bar should have value \"bar\"')\n    def bar_is_bar(bar):\n        assert bar == 'bar'\n\ntest_common.py:\n\n.. code-block:: python\n\n    @scenario('common_steps.feature', 'All steps are declared in the conftest')\n    def test_conftest():\n        pass\n\nThere are no definitions of the steps in the test file. They were\ncollected from the parent conftests.\n\n\nUsing unicode in the feature files\n----------------------------------\n\nAs mentioned above, by default, utf-8 encoding is used for parsing feature files.\nFor steps definition, you can both use unicode- and bytestrings equally.\nHowever, for argumented steps, if you need to use unicode symbols in it's regular expression, use `u` sign with regex:\n\n\n.. code-block:: python\n\n    @given(re.compile(u\"\u0443 \u043c\u0435\u043d\u0435 \u0454 \u0440\u044f\u0434\u043e\u043a \u044f\u043a\u0438\u0439 \u043c\u0456\u0441\u0442\u0438\u0442\u044c '{0}'\".format('(?P<content>.+)')))\n    def there_is_a_string_with_content(content, string):\n        \"\"\"Create string with unicode content.\"\"\"\n        string['content'] = content\n\n\nDefault steps\n-------------\n\nHere is the list of steps that are implemented inside of the pytest-bdd:\n\ngiven\n    * trace - enters the `pdb` debugger via `pytest.set_trace()`\nwhen\n    * trace - enters the `pdb` debugger via `pytest.set_trace()`\nthen\n    * trace - enters the `pdb` debugger via `pytest.set_trace()`\n\n\nFeature file paths\n------------------\n\nBy default, pytest-bdd will use current module's path as base path for\nfinding feature files, but this behaviour can be changed by having\nfixture named ``pytestbdd_feature_base_dir`` which should return the\nnew base path.\n\ntest_publish_article.py:\n\n.. code-block:: python\n\n    import pytest\n    from pytest_bdd import scenario\n\n\n    @pytest.fixture\n    def pytestbdd_feature_base_dir():\n        return '/home/user/projects/foo.bar/features'\n\n\n    @scenario('publish_article.feature', 'Publishing the article')\n    def test_publish():\n        pass\n\n\nAvoid retyping the feature file name\n------------------------------------\n\nIf you want to avoid retyping the feature file name when defining your scenarios in a test file, use functools.partial.\nThis will make your life much easier when defining multiple scenarios in a test file.\n\nFor example:\n\n\ntest_publish_article.py:\n\n.. code-block:: python\n\n    from functools import partial\n\n    import pytest_bdd\n\n\n    scenario = partial(pytest_bdd.scenario, '/path/to/publish_article.feature')\n\n\n    @scenario('Publishing the article')\n    def test_publish():\n        pass\n\n\n    @scenario('Publishing the article as unprivileged user')\n    def test_publish_unprivileged():\n        pass\n\n\nYou can learn more about `functools.partial <http://docs.python.org/2/library/functools.html#functools.partial>`_\nin the Python docs.\n\n\nRelax strict Gherkin language validation\n----------------------------------------\n\nIf your scenarios are not written in `proper` Gherkin language, e.g. they are more like textual scripts, then\nyou might find it hard to use `pytest-bdd` as by default it validates the order of step types (given-when-then).\nTo relax that validation, just override a fixture `pytestbdd_strict_gherkin` to return `False`:\n\ntest_publish_article.py:\n\n.. code-block:: python\n\n    import pytest\n    from pytest_bdd import scenario\n\n\n    @pytest.fixture\n    def pytestbdd_strict_gherkin():\n        return False\n\n\n    @scenario('publish_article.feature', 'Publishing the article in a wierd way')\n    def test_publish():\n        pass\n\n\nHooks\n-----\n\npytest-bdd exposes several `pytest hooks <http://pytest.org/latest/plugins.html#well-specified-hooks>`_\nwhich might be helpful building useful reporting, visualization, etc on top of it:\n\n* pytest_bdd_before_scenario(request, feature, scenario) - Called before scenario is executed\n\n* pytest_bdd_after_scenario(request, feature, scenario) - Called after scenario is executed\n  (even if one of steps has failed)\n\n* pytest_bdd_before_step(request, feature, scenario, step, step_func) - Called before step function\n  is executed and it's arguments evaluated\n\n* pytest_bdd_before_step_call(request, feature, scenario, step, step_func, step_func_args) - Called before step\n* function is executed with evaluated arguments\n\n* pytest_bdd_after_step(request, feature, scenario, step, step_func, step_func_args) - Called after step function\n  is successfully executed\n\n* pytest_bdd_step_error(request, feature, scenario, step, step_func, step_func_args, exception) - Called when step\n  function failed to execute\n\n* pytest_bdd_step_validation_error(request, feature, scenario, step, step_func, step_func_args, exception) - Called\n  when step failed to validate\n\n* pytest_bdd_step_func_lookup_error(request, feature, scenario, step, exception) - Called when step lookup failed\n\n\nBrowser testing\n---------------\n\nTools recommended to use for browser testing:\n\n* pytest-splinter_ - pytest `splinter <http://splinter.cobrateam.info/>`_ integration for the real browser testing\n\n\nReporting\n---------\n\nIt's important to have nice reporting out of your bdd tests. Cucumber introduced some kind of standard for\n`json format <https://www.relishapp.com/cucumber/cucumber/docs/json-output-formatter>`_\nwhich can be used for `this <https://wiki.jenkins-ci.org/display/JENKINS/Cucumber+Test+Result+Plugin>`_ jenkins\nplugin\n\nTo have an output in json format:\n\n::\n\n    py.test --cucumberjson=<path to json report>\n\n\nTo enable gherkin-formatted output on terminal, use\n\n::\n\n    py.test --gherkin-terminal-reporter\n\n\nTest code generation helpers\n----------------------------\n\nFor newcomers it's sometimes hard to write all needed test code without being frustrated.\nTo simplify their life, simple code generator was implemented. It allows to create fully functional\nbut of course empty tests and step definitions for given a feature file.\nIt's done as a separate console script provided by pytest-bdd package:\n\n::\n\n    pytest-bdd generate <feature file name> .. <feature file nameN>\n\nIt will print the generated code to the standard output so you can easily redirect it to the file:\n\n::\n\n    pytest-bdd generate features/some.feature > tests/functional/test_some.py\n\n\nAdvanced code generation\n------------------------\n\nFor more experienced users, there's smart code generation/suggestion feature. It will only generate the\ntest code which is not yet there, checking existing tests and step definitions the same way it's done during the\ntest execution. The code suggestion tool is called via passing additional pytest arguments:\n\n::\n\n    py.test --generate-missing --feature features tests/functional\n\nThe output will be like:\n\n::\n\n    ============================= test session starts ==============================\n    platform linux2 -- Python 2.7.6 -- py-1.4.24 -- pytest-2.6.2\n    plugins: xdist, pep8, cov, cache, bdd, bdd, bdd\n    collected 2 items\n\n    Scenario is not bound to any test: \"Code is generated for scenarios which are not bound to any tests\" in feature \"Missing code generation\" in /tmp/pytest-552/testdir/test_generate_missing0/tests/generation.feature\n    --------------------------------------------------------------------------------\n\n    Step is not defined: \"I have a custom bar\" in scenario: \"Code is generated for scenario steps which are not yet defined(implemented)\" in feature \"Missing code generation\" in /tmp/pytest-552/testdir/test_generate_missing0/tests/generation.feature\n    --------------------------------------------------------------------------------\n    Please place the code above to the test file(s):\n\n    @scenario('tests/generation.feature', 'Code is generated for scenarios which are not bound to any tests')\n    def test_Code_is_generated_for_scenarios_which_are_not_bound_to_any_tests():\n        \"\"\"Code is generated for scenarios which are not bound to any tests.\"\"\"\n\n\n    @given('I have a custom bar')\n    def I_have_a_custom_bar():\n        \"\"\"I have a custom bar.\"\"\"\n\nAs as side effect, the tool will validate the files for format errors, also some of the logic bugs, for example the\nordering of the types of the steps.\n\n\nMigration of your tests from versions 0.x.x-1.x.x\n-------------------------------------------------\n\nIn version 2.0.0, the backwards-incompartible change was introduced: scenario function can now only be used as a\ndecorator. Reasons for that:\n\n* test code readability is much higher using normal python function syntax;\n* pytest-bdd internals are much cleaner and shorter when using single approach instead of supporting two;\n* after moving to parsing-on-import-time approach for feature files, it's not possible to detect whether it's a\n  decorator more or not, so to support it along with functional approach there needed to be special parameter\n  for that, which is also a backwards-incompartible change.\n\nTo help users migrate to newer version, there's migration subcommand of the `pytest-bdd` console script:\n\n::\n\n    # run migration script\n    pytest-bdd migrate <your test folder>\n\nUnder the hood the script does the replacement from this:\n\n.. code-block:: python\n\n    test_function = scenario('publish_article.feature', 'Publishing the article')\n\nto this:\n\n.. code-block:: python\n\n    @scenario('publish_article.feature', 'Publishing the article')\n    def test_function():\n        pass\n\n\nLicense\n-------\n\nThis software is licensed under the `MIT license <http://en.wikipedia.org/wiki/MIT_License>`_.\n\n\u00a9 2013-2014 Oleg Pidsadnyi, Anatoly Bubenkov and others\n\nAuthors\n=======\n\n`Oleg Pidsadnyi <oleg.pidsadnyi@gmail.com>`_\n    original idea, initial implementation and further improvements\n`Anatoly Bubenkov <bubenkoff@gmail.com>`_\n    key implementation idea and realization, many new features and improvements\n\nThese people have contributed to `pytest-bdd`, in alphabetical order:\n\n* `Adam Coddington <me@adamcoddington.net>`_\n* `Albert-Jan Nijburg <albertjan@curit.com>`_\n* `Andrey Makhnach <andrey.makhnach@gmail.com>`_\n* `Aron Curzon <curzona@gmail.com>`_\n* `Dmitrijs Milajevs <dimazest@gmail.com>`_\n* `Florian Bruhin <me@the-compiler.org>`_\n* `Floris Bruynooghe <flub@devork.be>`_\n* `Harro van der Klauw <hvdklauw@gmail.com>`_\n* `Laurence Rowe <l@lrowe.co.uk>`_\n* `Leonardo Santagada <santagada@github.com>`_\n* `Robin Pedersen <ropez@github.com>`_\n* `Sergey Kraynev <sergejyit@gmail.com>`_\n\nChangelog\n=========\n\n2.18.2\n------\n\n- Fix check for out section steps definitions for no strict gherkin feature\n\n2.18.1\n------\n\n- Relay fixture results to recursive call of 'get_features' (coddingtonbear)\n\n2.18.0\n------\n\n- Add gherkin terminal reporter (spinus + thedrow)\n\n2.17.2\n------\n\n- Fix scenario lines containing an ``@`` being parsed as a tag. (The-Compiler)\n\n2.17.1\n------\n\n- Add support for pytest 3.0\n\n2.17.0\n------\n\n- Fix FixtureDef signature for newer pytest versions (The-Compiler)\n- Better error explanation for the steps defined outside of scenarios (olegpidsadnyi)\n- Add a ``pytest_bdd_apply_tag`` hook to customize handling of tags (The-Compiler)\n- Allow spaces in tag names. This can be useful when using the\n  ``pytest_bdd_apply_tag`` hook with tags like ``@xfail: Some reason``.\n\n\n2.16.1\n------\n\n- Cleaned up hooks of the plugin (olegpidsadnyi)\n- Fixed report serialization (olegpidsadnyi)\n\n\n2.16.0\n------\n\n- Fixed deprecation warnings with pytest 2.8 (The-Compiler)\n- Fixed deprecation warnings with Python 3.5 (The-Compiler)\n\n2.15.0\n------\n\n- Add examples data in the scenario report (bubenkoff)\n\n2.14.5\n------\n\n- Properly parse feature description (bubenkoff)\n\n2.14.3\n------\n\n- Avoid potentially random collection order for xdist compartibility (bubenkoff)\n\n2.14.1\n------\n\n- Pass additional arguments to parsers (bubenkoff)\n\n2.14.0\n------\n\n- Add validation check which prevents having multiple features in a single feature file (bubenkoff)\n\n2.13.1\n------\n\n- Allow mixing feature example table with scenario example table (bubenkoff, olegpidsadnyi)\n\n2.13.0\n------\n\n- Feature example table (bubenkoff, sureshvv)\n\n2.12.2\n------\n\n- Make it possible to relax strict Gherkin scenario validation (bubenkoff)\n\n2.11.3\n------\n\n- Fix minimal `six` version (bubenkoff, dustinfarris)\n\n2.11.1\n------\n\n- Mention step type on step definition not found errors and in code generation (bubenkoff, lrowe)\n\n2.11.0\n------\n\n- Prefix step definition fixture names to avoid name collisions (bubenkoff, lrowe)\n\n2.10.0\n------\n\n- Make feature and scenario tags to be fully compartible with pytest markers (bubenkoff, kevinastone)\n\n2.9.1\n-----\n\n- Fixed FeatureError string representation to correctly support python3 (bubenkoff, lrowe)\n\n2.9.0\n-----\n\n- Added possibility to inject fixtures from given keywords (bubenkoff)\n\n2.8.0\n-----\n\n- Added hook before the step is executed with evaluated parameters (olegpidsadnyi)\n\n2.7.2\n-----\n\n- Correct base feature path lookup for python3 (bubenkoff)\n\n2.7.1\n-----\n\n- Allow to pass ``scope`` for ``given`` steps (bubenkoff, sureshvv)\n\n2.7.0\n-----\n\n- Implemented `scenarios` shortcut to automatically bind scenarios to tests (bubenkoff)\n\n2.6.2\n-----\n\n- Parse comments only in the begining of words (santagada)\n\n2.6.1\n-----\n\n- Correctly handle `pytest-bdd` command called without the subcommand under python3 (bubenkoff, spinus)\n- Pluggable parsers for step definitions (bubenkoff, spinus)\n\n2.5.3\n-----\n\n- Add after scenario hook, document both before and after scenario hooks (bubenkoff)\n\n2.5.2\n-----\n\n- Fix code generation steps ordering (bubenkoff)\n\n2.5.1\n-----\n\n- Fix error report serialization (olegpidsadnyi)\n\n2.5.0\n-----\n\n- Fix multiline steps in the Background section (bubenkoff, arpe)\n- Code cleanup (olegpidsadnyi)\n\n\n2.4.5\n-----\n\n- Fix unicode issue with scenario name (bubenkoff, aohontsev)\n\n2.4.3\n-----\n\n- Fix unicode regex argumented steps issue (bubenkoff, aohontsev)\n- Fix steps timings in the json reporting (bubenkoff)\n\n2.4.2\n-----\n\n- Recursion is fixed for the --generate-missing and the --feature parameters (bubenkoff)\n\n2.4.1\n-----\n\n- Better reporting of a not found scenario (bubenkoff)\n- Simple test code generation implemented (bubenkoff)\n- Correct timing values for cucumber json reporting (bubenkoff)\n- Validation/generation helpers (bubenkoff)\n\n2.4.0\n-----\n\n- Background support added (bubenkoff)\n- Fixed double collection of the conftest files if scenario decorator is used (ropez, bubenkoff)\n\n2.3.3\n-----\n\n- Added timings to the cucumber json report (bubenkoff)\n\n2.3.2\n-----\n\n- Fixed incorrect error message using e.argname instead of step.name (hvdklauw)\n\n2.3.1\n-----\n\n- Implemented cucumber tags support (bubenkoff)\n- Implemented cucumber json formatter (bubenkoff, albertjan)\n- Added 'trace' keyword (bubenkoff)\n\n2.1.2\n-----\n\n- Latest pytest compartibility fixes (bubenkoff)\n\n2.1.1\n-----\n\n- Bugfixes (bubenkoff)\n\n2.1.0\n-----\n\n- Implemented multiline steps (bubenkoff)\n\n2.0.1\n-----\n\n- Allow more than one parameter per step (bubenkoff)\n- Allow empty example values (bubenkoff)\n\n2.0.0\n-----\n\n- Pure pytest parametrization for scenario outlines (bubenkoff)\n- Argumented steps now support converters (transformations) (bubenkoff)\n- scenario supports only decorator form (bubenkoff)\n- Code generation refactoring and cleanup (bubenkoff)\n\n1.0.0\n-----\n\n- Implemented scenario outlines (bubenkoff)\n\n\n0.6.11\n------\n\n- Fixed step arguments conflict with the fixtures having the same name (olegpidsadnyi)\n\n0.6.9\n-----\n\n- Implemented support of Gherkin \"Feature:\" (olegpidsadnyi)\n\n0.6.8\n-----\n\n- Implemented several hooks to allow reporting/error handling (bubenkoff)\n\n0.6.6\n-----\n\n- Fixes to unnecessary mentioning of pytest-bdd package files in py.test log with -v (bubenkoff)\n\n0.6.5\n-----\n\n- Compartibility with recent pytest (bubenkoff)\n\n0.6.4\n-----\n\n- More unicode fixes (amakhnach)\n\n0.6.3\n-----\n\n- Added unicode support for feature files. Removed buggy module replacement for scenario. (amakhnach)\n\n0.6.2\n-----\n\n- Removed unnecessary mention of pytest-bdd package files in py.test log with -v (bubenkoff)\n\n0.6.1\n-----\n\n- Step arguments in whens when there are no given arguments used. (amakhnach, bubenkoff)\n\n0.6.0\n-----\n\n- Added step arguments support. (curzona, olegpidsadnyi, bubenkoff)\n- Added checking of the step type order. (markon, olegpidsadnyi)\n\n0.5.2\n-----\n\n- Added extra info into output when FeatureError exception raises. (amakhnach)\n\n0.5.0\n-----\n\n- Added parametrization to scenarios\n- Coveralls.io integration\n- Test coverage improvement/fixes\n- Correct wrapping of step functions to preserve function docstring\n\n0.4.7\n-----\n\n- Fixed Python 3.3 support\n\n0.4.6\n-----\n\n- Fixed a bug when py.test --fixtures showed incorrect filenames for the steps.\n\n0.4.5\n-----\n\n- Fixed a bug with the reuse of the fixture by given steps being evaluated multiple times.\n\n0.4.3\n-----\n\n- Update the license file and PYPI related documentation.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pytest-dev/pytest-bdd",
    "keywords": "",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-bdd",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-bdd/",
    "release_url": "https://pypi.org/project/pytest-bdd/2.18.2/",
    "requires_python": "",
    "summary": "BDD for pytest",
    "version": "2.18.2"
  },
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7d989b712030036fed3156c92af27059",
          "sha256": "f05b3a984b29f855e26eb62b7cd76259f86e550adab559691920be016f5ec951"
        },
        "downloads": 2510,
        "filename": "pytest-bdd-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7d989b712030036fed3156c92af27059",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3709,
        "upload_time": "2013-04-16T08:18:31",
        "url": "https://files.pythonhosted.org/packages/8e/36/21307257e0b25b98abd87eb80f98884257785a7eebfa492e97c8f11677a0/pytest-bdd-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "908ab5602c6cc70154e0c58eda589b02",
          "sha256": "91e8321f46245578ecadb0b6df0405d4b6be138d113a28c1263305f0ffe417a3"
        },
        "downloads": 2304,
        "filename": "pytest-bdd-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "908ab5602c6cc70154e0c58eda589b02",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3780,
        "upload_time": "2013-05-28T10:48:21",
        "url": "https://files.pythonhosted.org/packages/4e/44/a171c9dd53308daf1f1dcf173b9902caf78d65f7a8ce0f4a1ecba11c84c6/pytest-bdd-0.3.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "96f485c538d2af2bb398a5b06981361f",
          "sha256": "a5c146a906939229173bb63b50b440befa5c29a07c401f0e0e00512459795808"
        },
        "downloads": 2290,
        "filename": "pytest-bdd-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "96f485c538d2af2bb398a5b06981361f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4026,
        "upload_time": "2013-05-31T11:13:43",
        "url": "https://files.pythonhosted.org/packages/83/ed/7152c4f132aedade281893eef01be26d0f7c31b2b209a9d7a60be135d8db/pytest-bdd-0.4.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fc17cfeb0df7ec2bbf54b2a750e02491",
          "sha256": "669b054bda2b747439197a9fcacfd6810eb4c9b531ad3af1aad51ccd50a71e78"
        },
        "downloads": 2312,
        "filename": "pytest-bdd-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fc17cfeb0df7ec2bbf54b2a750e02491",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4069,
        "upload_time": "2013-06-13T13:25:50",
        "url": "https://files.pythonhosted.org/packages/b9/3c/ea98ef0d9b695f419756c14ca0bb24bab2a86cf1f221b50c827529244a07/pytest-bdd-0.4.1.tar.gz"
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f266d26ca76325a4b3bf0c2d212d9aeb",
          "sha256": "852136872e3e1138328183bd03a25fccd2670ce96b95df942ac66d2c46bb863c"
        },
        "downloads": 2326,
        "filename": "pytest-bdd-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f266d26ca76325a4b3bf0c2d212d9aeb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6917,
        "upload_time": "2013-06-16T13:53:11",
        "url": "https://files.pythonhosted.org/packages/9b/5e/35d410428257d70d858fc735272d0a69a9817cdf2d41aa6c33d564a8f9ff/pytest-bdd-0.4.2.tar.gz"
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6aaed4d1b92e5543671639eb45c8eab8",
          "sha256": "ac2dca84eafa7d546535d1ed8360e335bf415794176cb1521591c1b07042d547"
        },
        "downloads": 2313,
        "filename": "pytest-bdd-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6aaed4d1b92e5543671639eb45c8eab8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6970,
        "upload_time": "2013-06-16T14:24:08",
        "url": "https://files.pythonhosted.org/packages/a1/0c/4d1c2fd74c451c5586d615bfbd4979e5884a88c4f04ccab975380e1a147a/pytest-bdd-0.4.3.tar.gz"
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "51cbae616ee1e008277ef56477011059",
          "sha256": "0ed5f2a324ee75a8dcba87f5cd9acc6782bc381284234a3e7888b6df3f6aff31"
        },
        "downloads": 2348,
        "filename": "pytest-bdd-0.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "51cbae616ee1e008277ef56477011059",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7022,
        "upload_time": "2013-06-20T07:33:53",
        "url": "https://files.pythonhosted.org/packages/4c/e5/3c0d44b6cb8e71ca2b41b0665e52f2e92cce5acb4e07ae6f0c38a696a20c/pytest-bdd-0.4.5.tar.gz"
      }
    ],
    "0.4.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9f7e7cf73bccf3cf57b00fdb0a2450a3",
          "sha256": "9e8a306eac5c56861dcb9aa7cbfcbcedf1dbc242f077f60402717b2148366c9c"
        },
        "downloads": 2321,
        "filename": "pytest-bdd-0.4.6.tar.gz",
        "has_sig": false,
        "md5_digest": "9f7e7cf73bccf3cf57b00fdb0a2450a3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7311,
        "upload_time": "2013-06-20T10:21:50",
        "url": "https://files.pythonhosted.org/packages/99/d1/0fbb7bef36f71c3b2714e9314623cf36cf970a498f7f39b6c097eb48e208/pytest-bdd-0.4.6.tar.gz"
      }
    ],
    "0.4.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d1785a6fad186ddece587b4bef017541",
          "sha256": "a9da331641640d7eaeaf8c3f5c4a28380e2fc8b1613e3b04ae3a68fc18462e6a"
        },
        "downloads": 2511,
        "filename": "pytest-bdd-0.4.7.tar.gz",
        "has_sig": false,
        "md5_digest": "d1785a6fad186ddece587b4bef017541",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6983,
        "upload_time": "2013-07-11T19:01:26",
        "url": "https://files.pythonhosted.org/packages/99/f9/3eadba1d0de2e5e73948e5fa38329448f334079a7db6d5977920a311dabe/pytest-bdd-0.4.7.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5d15a7137fcf8b674883f9a78ca623fe",
          "sha256": "5b5b7689c77c3b3b8f3d5bf66ddfbd2a0f153894e5612e12f9b5e98e67a67b5a"
        },
        "downloads": 2356,
        "filename": "pytest-bdd-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5d15a7137fcf8b674883f9a78ca623fe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9875,
        "upload_time": "2013-08-18T00:22:46",
        "url": "https://files.pythonhosted.org/packages/94/15/35c5cdc55431b7c5e06387d8b7e2144262b20b775ab6a4ad24c7f9a80ad0/pytest-bdd-0.5.0.tar.gz"
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8ce9d95d1e12faf6165e59c6c4a0f197",
          "sha256": "d09f83075c6dbc3498939961a52fdb8823079a5babdd3df08e0a13fd6d9e4b58"
        },
        "downloads": 2349,
        "filename": "pytest-bdd-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8ce9d95d1e12faf6165e59c6c4a0f197",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12631,
        "upload_time": "2013-08-18T23:22:35",
        "url": "https://files.pythonhosted.org/packages/b1/47/e325f974c19a9ab2e59ebc00f39cff9dfa2864c717225ab7316939bedcd7/pytest-bdd-0.5.1.tar.gz"
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5b9311eda4787f5b372e6164bd7ef8aa",
          "sha256": "4da08fdadb6d0a4a66f350e8936400bd7546af893f4852f9ee98e62acc978ec0"
        },
        "downloads": 2451,
        "filename": "pytest-bdd-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5b9311eda4787f5b372e6164bd7ef8aa",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12585,
        "upload_time": "2013-08-23T13:16:54",
        "url": "https://files.pythonhosted.org/packages/e9/fb/be3b26779baa28caf3a7151cc3a5c58a6bd1ac41aacd96ae568b2e34b9d3/pytest-bdd-0.5.2.tar.gz"
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eeaf1ee9465b9e2f63db8a2a2536bf55",
          "sha256": "f240ea74fd1351b616823b5bcf694c829494222ab889cc0ff14e1987e7c6bbac"
        },
        "downloads": 2336,
        "filename": "pytest-bdd-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "eeaf1ee9465b9e2f63db8a2a2536bf55",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16725,
        "upload_time": "2013-09-23T13:52:21",
        "url": "https://files.pythonhosted.org/packages/61/9e/7286a59fb422d2d86e8d22957bb6a24960c2445479d2a7942282ccf03443/pytest-bdd-0.6.0.tar.gz"
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "92548adc89b80b65cd1f993bbd955f1a",
          "sha256": "4c2e8b53c2494a6b05f5a56272daa0586004edfaa77f267f0887e8081271fbd6"
        },
        "downloads": 2358,
        "filename": "pytest-bdd-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "92548adc89b80b65cd1f993bbd955f1a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16791,
        "upload_time": "2013-09-27T11:42:11",
        "url": "https://files.pythonhosted.org/packages/ad/ca/db357a7d97814635a71f75dff36d9a58e55a9527a5d8fee5fa7fd62d6be6/pytest-bdd-0.6.1.tar.gz"
      }
    ],
    "0.6.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "58a6e31bab25da3b33f63e0851add1e7",
          "sha256": "08551d2a2a695837daa04db229c7dc855fe8a4c4d7a0fe1e6f599a01b4977081"
        },
        "downloads": 2053,
        "filename": "pytest-bdd-0.6.10.tar.gz",
        "has_sig": false,
        "md5_digest": "58a6e31bab25da3b33f63e0851add1e7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18847,
        "upload_time": "2014-02-19T11:49:17",
        "url": "https://files.pythonhosted.org/packages/4c/28/f869a49ef4282bcc5c0a8ef0c2b24a9a2eb883e0b4974823c185de6a01ab/pytest-bdd-0.6.10.tar.gz"
      }
    ],
    "0.6.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e67e6c68dc230c3d85cca3d82e2c775f",
          "sha256": "10fb4ada6974130f3676bed5cfd17f040eb380057c428169e836806400847eb5"
        },
        "downloads": 2207,
        "filename": "pytest-bdd-0.6.11.tar.gz",
        "has_sig": false,
        "md5_digest": "e67e6c68dc230c3d85cca3d82e2c775f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18791,
        "upload_time": "2014-02-19T12:52:04",
        "url": "https://files.pythonhosted.org/packages/12/0b/dea9516c04f60243cbc1d6941f30ddb4fe5ee2261aed46b7924e1673d4f5/pytest-bdd-0.6.11.tar.gz"
      }
    ],
    "0.6.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5fa1358746f2b2cb6fdd3be0c3d90046",
          "sha256": "1ef1a991c784049a696ab45d8339ed073ece831f07037c2dd95208d70e517892"
        },
        "downloads": 2226,
        "filename": "pytest-bdd-0.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5fa1358746f2b2cb6fdd3be0c3d90046",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16934,
        "upload_time": "2013-10-31T14:27:43",
        "url": "https://files.pythonhosted.org/packages/8b/e1/18c37976b86e323b5f56595ecf1b83d76fb3df7a6a48b38ab371cbfb42d8/pytest-bdd-0.6.2.tar.gz"
      }
    ],
    "0.6.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8ce9b541f17e3da9e81d057f453e15f7",
          "sha256": "6e0cd459529d466b51d1dee3f4c61a79f6d720fd005fb068f7f5a285ed7d7d02"
        },
        "downloads": 2174,
        "filename": "pytest-bdd-0.6.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8ce9b541f17e3da9e81d057f453e15f7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17180,
        "upload_time": "2013-11-07T12:10:51",
        "url": "https://files.pythonhosted.org/packages/93/0f/eee1454ba9e6649680ec4d0cccf58cd3382f62fc326edbde9622aeac2fa5/pytest-bdd-0.6.3.tar.gz"
      }
    ],
    "0.6.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "20cdb4c963fbb9bce6bc8ed4379c61d4",
          "sha256": "6f97072b4e7ea8cf480f618b4a444eb490b0a6db72abbb8d9c28816a587d04de"
        },
        "downloads": 2385,
        "filename": "pytest-bdd-0.6.4.tar.gz",
        "has_sig": false,
        "md5_digest": "20cdb4c963fbb9bce6bc8ed4379c61d4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17239,
        "upload_time": "2013-11-10T11:57:33",
        "url": "https://files.pythonhosted.org/packages/6d/7e/22ef6a22f3f4808e96f0dca13f3a1d598f208f28916d1670912af010a558/pytest-bdd-0.6.4.tar.gz"
      }
    ],
    "0.6.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9123052fb651d22d1974fc944d045774",
          "sha256": "378b11ecb69aa4f6867ffc0e3d2190800b69194a7af47deb548dc6c30a73c635"
        },
        "downloads": 2136,
        "filename": "pytest-bdd-0.6.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9123052fb651d22d1974fc944d045774",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17545,
        "upload_time": "2013-12-11T03:04:48",
        "url": "https://files.pythonhosted.org/packages/69/66/e135d2b0b06e27c9bd22f6b359c1dd6e5e8030f655942a17bdbb5ea01745/pytest-bdd-0.6.5.tar.gz"
      }
    ],
    "0.6.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7eaef151491195b19a9cf9e01cc0ce69",
          "sha256": "d773aff193785f6983d879701dec9c0de2da556f02f2bc576d7c4e6b615c6ad9"
        },
        "downloads": 2111,
        "filename": "pytest-bdd-0.6.6.tar.gz",
        "has_sig": false,
        "md5_digest": "7eaef151491195b19a9cf9e01cc0ce69",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17648,
        "upload_time": "2013-12-11T03:22:33",
        "url": "https://files.pythonhosted.org/packages/aa/5c/f2c2699ad5030281cc0abb25bab44dcb0696823e0b465a2669377c04e365/pytest-bdd-0.6.6.tar.gz"
      }
    ],
    "0.6.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c92bc4e3ea9469eae1056f1388ea2b7c",
          "sha256": "ce58f95dec199dc9c9da53fdf9bfe3867d95f0ba8af04bff0b1f4a6b0fdfa117"
        },
        "downloads": 2183,
        "filename": "pytest-bdd-0.6.7.tar.gz",
        "has_sig": false,
        "md5_digest": "c92bc4e3ea9469eae1056f1388ea2b7c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18550,
        "upload_time": "2013-12-11T09:22:54",
        "url": "https://files.pythonhosted.org/packages/6e/7b/7530152ba45161cd49df70846ac09c4b93b8979bb1d94d0cb687e2433948/pytest-bdd-0.6.7.tar.gz"
      }
    ],
    "0.6.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bb5adf670c8554edd0c07afb23d20785",
          "sha256": "676df11e4a92e34de446bb5f2a4a53ed9ecbde6d1c7a326b35956259869b18e7"
        },
        "downloads": 2588,
        "filename": "pytest-bdd-0.6.8.tar.gz",
        "has_sig": false,
        "md5_digest": "bb5adf670c8554edd0c07afb23d20785",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15975,
        "upload_time": "2013-12-13T03:28:19",
        "url": "https://files.pythonhosted.org/packages/b7/72/181409c2134670a91223bcd9f6b1e5b689fee78e668dbd1a95b4685a988f/pytest-bdd-0.6.8.tar.gz"
      }
    ],
    "0.6.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b1017c4aa3cc2ad86a8c1e9069e08013",
          "sha256": "25a9d9ed767efdf29d78eae1bded85f89c20c54b03c8c76848eafdec6711e238"
        },
        "downloads": 2147,
        "filename": "pytest-bdd-0.6.9.tar.gz",
        "has_sig": false,
        "md5_digest": "b1017c4aa3cc2ad86a8c1e9069e08013",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18608,
        "upload_time": "2014-01-29T11:44:05",
        "url": "https://files.pythonhosted.org/packages/9c/d2/d39c9e2a04c46f3e00be46f3dc8a0cb237fd540821a7199845db971d28f1/pytest-bdd-0.6.9.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "92ea15ec05332fe18c2064906eb16dd3",
          "sha256": "410fef4da31d1b01d3a2b7b2ef29518377ade1f5386ceac4c7e60ed5b5972d71"
        },
        "downloads": 1947,
        "filename": "pytest-bdd-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "92ea15ec05332fe18c2064906eb16dd3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23344,
        "upload_time": "2014-03-25T22:57:36",
        "url": "https://files.pythonhosted.org/packages/6b/2b/99f391f3891561c8f6c9c376b495dd347505f63f6e6f44e47aec01ffce32/pytest-bdd-2.0.0.tar.gz"
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "637162a0983ba37f8ba36371608b3a66",
          "sha256": "ee2ef2d3fdd4fde9e04e710342dc8c5d3b3e8465b14240f6d0260deee9b157d1"
        },
        "downloads": 1937,
        "filename": "pytest-bdd-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "637162a0983ba37f8ba36371608b3a66",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23398,
        "upload_time": "2014-03-27T10:54:50",
        "url": "https://files.pythonhosted.org/packages/29/a7/7fb5e4a7dccf0473a1b078447bfefd0f81238281167727fb52db5a2b3503/pytest-bdd-2.0.1.tar.gz"
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "80e0495d3b3fff2c8f674e137a5bd99c",
          "sha256": "278d61c82c1832733cb09815a9eec57762ea6416a169010d3eb392d107348989"
        },
        "downloads": 2307,
        "filename": "pytest-bdd-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "80e0495d3b3fff2c8f674e137a5bd99c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25034,
        "upload_time": "2014-04-08T02:16:09",
        "url": "https://files.pythonhosted.org/packages/eb/9d/036fa99553c047fe1837dd4df45480f5df00efbacfb3809a590738466fce/pytest-bdd-2.1.0.tar.gz"
      }
    ],
    "2.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7365dd53c50dd89985e325c830f31ee5",
          "sha256": "ba68127b946761c2d91a076056d14a6e88385705b9d665d0967828cba7337a32"
        },
        "downloads": 3300,
        "filename": "pytest-bdd-2.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7365dd53c50dd89985e325c830f31ee5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21301,
        "upload_time": "2014-06-11T22:29:49",
        "url": "https://files.pythonhosted.org/packages/ee/50/8785d73b7a6209ebdf6b08792e4ab98b765ea218a36027070df1a702b846/pytest-bdd-2.1.1.tar.gz"
      }
    ],
    "2.10.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6cd99f72a914efe195a881c664f5d46b",
          "sha256": "dfeb337011a0f7ee426732ffc2fc72c47426e911f91b7bea7b6dda2206d6ec93"
        },
        "downloads": 2370,
        "filename": "pytest-bdd-2.10.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6cd99f72a914efe195a881c664f5d46b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 55371,
        "upload_time": "2015-06-04T12:14:13",
        "url": "https://files.pythonhosted.org/packages/b2/c9/000ee854bd4c7a0f3e78c85cae59dfea9d7c4cb8623a295458b0eb28e45e/pytest-bdd-2.10.0.tar.gz"
      }
    ],
    "2.11.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5047a7ee69a1fb028d75251b8285156e",
          "sha256": "2ea32fb4573a67bcfc5246614f5cde41f43244dcd25912f061434017d7897fa9"
        },
        "downloads": 1093,
        "filename": "pytest-bdd-2.11.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5047a7ee69a1fb028d75251b8285156e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 55510,
        "upload_time": "2015-06-08T08:29:28",
        "url": "https://files.pythonhosted.org/packages/e6/42/05b79bcbec45d4e0f0c01aa92ecb74359e171be54a671837a3fa6b1dedb1/pytest-bdd-2.11.0.tar.gz"
      }
    ],
    "2.11.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "baf89be74fd2078834ed76c1bbeeed5b",
          "sha256": "3ac35485e52fc138f719b020254409fd72d714831984a168b915a96d0b834231"
        },
        "downloads": 984,
        "filename": "pytest-bdd-2.11.1.tar.gz",
        "has_sig": false,
        "md5_digest": "baf89be74fd2078834ed76c1bbeeed5b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 55655,
        "upload_time": "2015-06-10T09:29:59",
        "url": "https://files.pythonhosted.org/packages/21/ab/b4094ae6b3885f83c2ec7cd9887acaca98567172814113d5c68645cd4337/pytest-bdd-2.11.1.tar.gz"
      }
    ],
    "2.11.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a5f93835b5205b7186e12f4d8ec3aa1e",
          "sha256": "6a65d36d09dd90c987e2efc6f4e924aca8724aef066034cab4f23922bfec7e86"
        },
        "downloads": 1020,
        "filename": "pytest-bdd-2.11.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a5f93835b5205b7186e12f4d8ec3aa1e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 56864,
        "upload_time": "2015-06-15T20:19:23",
        "url": "https://files.pythonhosted.org/packages/c8/15/83c3f3e71ba653380991355f6db94de0c0ccc48e0ba975f76c672a0518dd/pytest-bdd-2.11.2.tar.gz"
      }
    ],
    "2.11.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e833dba79dc5190cdebde3ea861d8894",
          "sha256": "10dd6fae6ede6550df48bf72f4673bc716b7a9f099c9490652243424ddd74e9a"
        },
        "downloads": 828,
        "filename": "pytest-bdd-2.11.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e833dba79dc5190cdebde3ea861d8894",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 56880,
        "upload_time": "2015-06-15T20:35:39",
        "url": "https://files.pythonhosted.org/packages/3f/17/5b63cdf1b4014e4dea773c72c0a6759fb3c09cdd1fa6277bf39cba053741/pytest-bdd-2.11.3.tar.gz"
      }
    ],
    "2.12.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2efcd65b6c43f5c301a9b3f1e18d3681",
          "sha256": "db2f85a9baa71b038df129b03ba4a842023f22bb75d2c2e92508e8048d5a51c1"
        },
        "downloads": 891,
        "filename": "pytest-bdd-2.12.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2efcd65b6c43f5c301a9b3f1e18d3681",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 57027,
        "upload_time": "2015-06-16T11:20:29",
        "url": "https://files.pythonhosted.org/packages/32/80/e670a4fb6ccf9ab47d6e0aea56e7cefcb5369c3751e26a82087abd345d1c/pytest-bdd-2.12.0.tar.gz"
      }
    ],
    "2.12.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9cbb97b7cf0954a886b06be12e2c59e7",
          "sha256": "56f2317de614c847244e1ab89fcf995af87e77bbf86e9139b309af881a97b97d"
        },
        "downloads": 857,
        "filename": "pytest-bdd-2.12.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9cbb97b7cf0954a886b06be12e2c59e7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 57107,
        "upload_time": "2015-06-19T08:35:19",
        "url": "https://files.pythonhosted.org/packages/a9/b5/baae173768fb7c8eaf70f1652bfbacd76a92c6882c47b851bd5db9104542/pytest-bdd-2.12.1.tar.gz"
      }
    ],
    "2.12.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7c155790fa9376aea49f9db531e10470",
          "sha256": "36c51f51232e00adfb4e95aaae61f5710f857b388a52e546f7074da46802db90"
        },
        "downloads": 1823,
        "filename": "pytest-bdd-2.12.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7c155790fa9376aea49f9db531e10470",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 57829,
        "upload_time": "2015-06-20T21:55:56",
        "url": "https://files.pythonhosted.org/packages/6b/97/da4a5974783b023ac178cb4a19ffb79e1e6b91fe8ed371dfcaa9a2ea396b/pytest-bdd-2.12.2.tar.gz"
      }
    ],
    "2.13.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "be4dfc67b59598598573c1a68a497cf8",
          "sha256": "4864520cb813cabc388d313030781bcf49cf7543343da828e1094a3ac1777892"
        },
        "downloads": 1333,
        "filename": "pytest-bdd-2.13.0.tar.gz",
        "has_sig": false,
        "md5_digest": "be4dfc67b59598598573c1a68a497cf8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 57756,
        "upload_time": "2015-06-23T13:28:43",
        "url": "https://files.pythonhosted.org/packages/24/2a/ef4b4ad31ecf7a5d2dcc1751d56e340a5b6ab9ae7bc4eefa7d0fa7bd8aa5/pytest-bdd-2.13.0.tar.gz"
      }
    ],
    "2.13.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a6aed63aac85940a4e32ab8e7d21ad5f",
          "sha256": "0b74c5cf240028f9610a0350c38501890e7328e78f99b89faef7dbcd31709f1d"
        },
        "downloads": 1615,
        "filename": "pytest-bdd-2.13.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a6aed63aac85940a4e32ab8e7d21ad5f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58366,
        "upload_time": "2015-06-24T10:36:02",
        "url": "https://files.pythonhosted.org/packages/cb/c2/8ac891e3dbf7ab4df03bfdf2b38563704e1e5aa51595e619b9e0c49c8080/pytest-bdd-2.13.1.tar.gz"
      }
    ],
    "2.14.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "23405effa0a9cfdd4b3dd71e54efb158",
          "sha256": "304d37fa940cea9a88e49614000703289c8a377a443e25f2efcf3d338c915ec5"
        },
        "downloads": 1273,
        "filename": "pytest-bdd-2.14.0.tar.gz",
        "has_sig": false,
        "md5_digest": "23405effa0a9cfdd4b3dd71e54efb158",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 59256,
        "upload_time": "2015-07-07T20:50:21",
        "url": "https://files.pythonhosted.org/packages/42/e0/d1ea75596532ca4b13e07e115d26b9b9b6786560a5c15e294d40ba804686/pytest-bdd-2.14.0.tar.gz"
      }
    ],
    "2.14.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6a1a79ca56af7e36d4a1abe88c53a227",
          "sha256": "7fb5be76cb449c60ef20174d2490e8c497193ad516dca5b6f01c0f911e82fcc0"
        },
        "downloads": 2391,
        "filename": "pytest-bdd-2.14.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6a1a79ca56af7e36d4a1abe88c53a227",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58695,
        "upload_time": "2015-07-13T16:28:17",
        "url": "https://files.pythonhosted.org/packages/1e/16/2e9b18099e523bc9e6a1c920e697ff1c3f1bd60c64d88ba56666af44fb89/pytest-bdd-2.14.1.tar.gz"
      }
    ],
    "2.14.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0d2ff7d5768b85a02f7824de33200df3",
          "sha256": "f39501043af7f3c8a0bf86b7453c97413b9afeda0876a44d7db74352bdf678f6"
        },
        "downloads": 703,
        "filename": "pytest-bdd-2.14.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0d2ff7d5768b85a02f7824de33200df3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58845,
        "upload_time": "2015-08-04T13:46:18",
        "url": "https://files.pythonhosted.org/packages/e1/62/646193612e26be57592417352b8540488523eb0de693536c3109f99a1f4a/pytest-bdd-2.14.2.tar.gz"
      }
    ],
    "2.14.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9b68a98318113a85ed09cc2cba83d620",
          "sha256": "adb1706d8e6f25cae33fd301e6d7902d042efbca0c98700b83feccbadc451941"
        },
        "downloads": 744,
        "filename": "pytest-bdd-2.14.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9b68a98318113a85ed09cc2cba83d620",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58840,
        "upload_time": "2015-08-04T13:49:25",
        "url": "https://files.pythonhosted.org/packages/37/f3/4d36bc4233dae6069acaf8cdfbc999abeb89d5922fdfdf1c703e3f8cc040/pytest-bdd-2.14.3.tar.gz"
      }
    ],
    "2.14.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2983c1cf2e16b4438b083f567198f153",
          "sha256": "f7446e8a2943f42636c92363cae34d9cb6f7fe030f7b77d098792564910965a9"
        },
        "downloads": 1883,
        "filename": "pytest-bdd-2.14.4.tar.gz",
        "has_sig": false,
        "md5_digest": "2983c1cf2e16b4438b083f567198f153",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58861,
        "upload_time": "2015-08-04T15:05:50",
        "url": "https://files.pythonhosted.org/packages/37/ac/e3d0beccff9d2818ec160e65b204e1f34c0a71823374098b3233959708a9/pytest-bdd-2.14.4.tar.gz"
      }
    ],
    "2.14.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5c42e1c9e214c4fde06dc177b674dc54",
          "sha256": "bb4c1f1041c02b735145fbf9ab918618b89755cb3aa909ed0d9a0c0fd05056a4"
        },
        "downloads": 573,
        "filename": "pytest-bdd-2.14.5.tar.gz",
        "has_sig": false,
        "md5_digest": "5c42e1c9e214c4fde06dc177b674dc54",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58916,
        "upload_time": "2015-08-31T08:35:39",
        "url": "https://files.pythonhosted.org/packages/f4/90/365efaa1a6bd39282e926a052cbf968e16f09f9521f2d85af1007a0c8186/pytest-bdd-2.14.5.tar.gz"
      }
    ],
    "2.15.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "53b803f1717419ab3ade61db2cc64d3e",
          "sha256": "c6ff617bf87d3b65b17d9430c7c7a365a9cbc240bbaa2c58579fbeeebaa97b44"
        },
        "downloads": 29829,
        "filename": "pytest-bdd-2.15.0.tar.gz",
        "has_sig": false,
        "md5_digest": "53b803f1717419ab3ade61db2cc64d3e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 59310,
        "upload_time": "2015-08-31T14:39:30",
        "url": "https://files.pythonhosted.org/packages/c8/03/e73664f19a42bc410fac588d0dacb58eaf2e181b111296a1b3771b508eef/pytest-bdd-2.15.0.tar.gz"
      }
    ],
    "2.16.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "542e2d53ba3199d7ad4f044d5b2eaf88",
          "sha256": "e1ede2438291d6567149c2ad6d3ff6173911f1445870992eea3026ae404b7a97"
        },
        "downloads": 12771,
        "filename": "pytest-bdd-2.16.0.tar.gz",
        "has_sig": false,
        "md5_digest": "542e2d53ba3199d7ad4f044d5b2eaf88",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 59281,
        "upload_time": "2015-12-20T19:03:49",
        "url": "https://files.pythonhosted.org/packages/79/5c/17cc2e2ab8bb2556b782a1ef95d1c7dcc887964994886d6dd761c81ff8ee/pytest-bdd-2.16.0.tar.gz"
      }
    ],
    "2.16.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1405a5ab18170f9a5fac8510edd15fc3",
          "sha256": "b8f79ed57fe26e55fa7426bbf8f154ded7a900773b7977f5a2be97954f800d1a"
        },
        "downloads": 2661,
        "filename": "pytest-bdd-2.16.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1405a5ab18170f9a5fac8510edd15fc3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 61017,
        "upload_time": "2016-03-19T09:15:46",
        "url": "https://files.pythonhosted.org/packages/06/83/5162f80060c821d40130194fc8cfb2a390d308f8cf0b604cc6a19c40af24/pytest-bdd-2.16.1.tar.gz"
      }
    ],
    "2.17.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6184b1006c2e241a8f92a41f29669b1e",
          "sha256": "88f8461967969786ca089a0dffbffc69d5a867df213c5ddf4afef40567944dbf"
        },
        "downloads": 2002,
        "filename": "pytest-bdd-2.17.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6184b1006c2e241a8f92a41f29669b1e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 60700,
        "upload_time": "2016-06-30T11:28:09",
        "url": "https://files.pythonhosted.org/packages/ea/d9/ec1c66eb2fdc269b31f2fe63e109ef754b7a0bfc7f70140c2b27ed90510a/pytest-bdd-2.17.0.tar.gz"
      }
    ],
    "2.17.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5df282cfe323a899d4e6be0480b64d10",
          "sha256": "adb1a42d0bc49c04d9b50119867c50fd097bc62886154969605be4fb64a0dbfd"
        },
        "downloads": 4051,
        "filename": "pytest-bdd-2.17.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5df282cfe323a899d4e6be0480b64d10",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 61106,
        "upload_time": "2016-08-21T14:07:25",
        "url": "https://files.pythonhosted.org/packages/f9/c6/fb61c681ee65bf89577e62a7ea6cbb2210b0e98bcbb17ceb81aa2d5f2c66/pytest-bdd-2.17.1.tar.gz"
      }
    ],
    "2.18.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e7c8d3ff4a866504ef22923efbc7be19",
          "sha256": "7c4a9de6154e92eeedc07c771095ed2aeb82bdb4a236f17ecb89da26a918f4ba"
        },
        "downloads": 5522,
        "filename": "pytest-bdd-2.18.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e7c8d3ff4a866504ef22923efbc7be19",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 63970,
        "upload_time": "2016-09-23T18:06:10",
        "url": "https://files.pythonhosted.org/packages/c1/fe/04269cfcd43410b94987c881d1dbc4f9d864c50574062de5190bddc7c343/pytest-bdd-2.18.0.tar.gz"
      }
    ],
    "2.18.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dc81ed62a82eb3e4d1aa367dcf059efe",
          "sha256": "05b7bb1583425276d487012f5c63eed0a1b144e65a1799eac39710e782bd40a9"
        },
        "downloads": 4961,
        "filename": "pytest-bdd-2.18.1.tar.gz",
        "has_sig": false,
        "md5_digest": "dc81ed62a82eb3e4d1aa367dcf059efe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 64141,
        "upload_time": "2016-11-05T10:29:35",
        "url": "https://files.pythonhosted.org/packages/61/2c/e9e6321078d35afbf4a696769c6aa43563e7293c24c27c5f5e619ba50486/pytest-bdd-2.18.1.tar.gz"
      }
    ],
    "2.18.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a0f806c850f227beb239fe2644f033b2",
          "sha256": "b63ca3d214d62099e9e13cbbfee91f6d283a3a2e1d6c5730ea083c3caae6a326"
        },
        "downloads": 0,
        "filename": "pytest-bdd-2.18.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a0f806c850f227beb239fe2644f033b2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 64876,
        "upload_time": "2017-05-01T10:27:19",
        "url": "https://files.pythonhosted.org/packages/71/8a/a410b846e6ab10b10607c9c0beef657162df76adf34b75040e609a6e4058/pytest-bdd-2.18.2.tar.gz"
      }
    ],
    "2.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "26720ac27c68245270de656aa027f8d8",
          "sha256": "2eb82ec4abd404ea1287ab53133302dd9a916354144a1ce47548eeaf7190c6fc"
        },
        "downloads": 2517,
        "filename": "pytest-bdd-2.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "26720ac27c68245270de656aa027f8d8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30336,
        "upload_time": "2014-07-30T21:34:10",
        "url": "https://files.pythonhosted.org/packages/3b/d4/555d6401518f264d091676911b5109cf7c67d254908aa1b81a0ac20888f0/pytest-bdd-2.3.1.tar.gz"
      }
    ],
    "2.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d70e0fcd1f5acf46f7f887161452cb0b",
          "sha256": "986384ce25e92889a6b4ddbf9111c1d85cd31f0d4fb7a20988615a80c1b02ead"
        },
        "downloads": 1725,
        "filename": "pytest-bdd-2.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d70e0fcd1f5acf46f7f887161452cb0b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30849,
        "upload_time": "2014-09-03T09:35:47",
        "url": "https://files.pythonhosted.org/packages/4c/00/5722ea4695f3236d558d9f047e53053978983f6185c5c23fe26c044f66a1/pytest-bdd-2.3.2.tar.gz"
      }
    ],
    "2.3.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "24bd5460284fa8ee3947aa8fbcb551f9",
          "sha256": "d522ca9d1d8bc86e3999f2128b67bbd37c7d892aab2ed66af2ee0ce80574e6a5"
        },
        "downloads": 1508,
        "filename": "pytest-bdd-2.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "24bd5460284fa8ee3947aa8fbcb551f9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31005,
        "upload_time": "2014-09-11T20:07:47",
        "url": "https://files.pythonhosted.org/packages/73/6b/70c09dabd7dbc4e5a85ced7a13236a1bdf2cc98575858e4b91278db78a92/pytest-bdd-2.3.3.tar.gz"
      }
    ],
    "2.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5cda330f66e17434d6920e48c11cddc0",
          "sha256": "3397f0ff99db32195bccd033a3bf08912145ecafc25befbbf46d8dabe60f3faf"
        },
        "downloads": 1657,
        "filename": "pytest-bdd-2.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5cda330f66e17434d6920e48c11cddc0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 33655,
        "upload_time": "2014-09-15T08:07:19",
        "url": "https://files.pythonhosted.org/packages/89/19/9a528a28dc8d0a87715f6874319f09c9d05da7a8dfbdc37b3ad41680b26c/pytest-bdd-2.4.0.tar.gz"
      }
    ],
    "2.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4ab374305109b263471fbe5c5173bfda",
          "sha256": "28b6df1707188ccd57b85fc7f8b966102f8ee6ee67dd819bd0836c78ef91fc41"
        },
        "downloads": 1896,
        "filename": "pytest-bdd-2.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4ab374305109b263471fbe5c5173bfda",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 40093,
        "upload_time": "2014-09-23T08:14:51",
        "url": "https://files.pythonhosted.org/packages/29/85/0caef2ad52ccb75957766de95c13cbd95a9895b93c938fa76bf27e02e002/pytest-bdd-2.4.1.tar.gz"
      }
    ],
    "2.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "57d1f2b15deb45f9647e815a82c07264",
          "sha256": "b2c4bccf1059ef05ab94012e17959c56e8109028f3321b0537220d14feaf1b2b"
        },
        "downloads": 2073,
        "filename": "pytest-bdd-2.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "57d1f2b15deb45f9647e815a82c07264",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 40243,
        "upload_time": "2014-10-21T10:56:27",
        "url": "https://files.pythonhosted.org/packages/35/48/eefefdd47143a7819d1691c37ba8e7cc2e919c10a2f0d1b1d9a71eb4555f/pytest-bdd-2.4.2.tar.gz"
      }
    ],
    "2.4.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9baef61fa3ea6e805dafd0699719e377",
          "sha256": "f5e187e4dba79f1515b6e3ce670b63940795a591bad4b9950866d5101afe8abe"
        },
        "downloads": 1320,
        "filename": "pytest-bdd-2.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9baef61fa3ea6e805dafd0699719e377",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 42373,
        "upload_time": "2014-10-22T08:12:25",
        "url": "https://files.pythonhosted.org/packages/c0/a0/89baff471c2a406c745cf978e717c7568854c3c843b7ae2e742b62c7329f/pytest-bdd-2.4.3.tar.gz"
      }
    ],
    "2.4.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8da9cfb0124ce2c0b9cea4997522d65f",
          "sha256": "fb7ed1e5db67742933bddf7821d9bcd05378dac05e478b58c8b4d26e9e10161b"
        },
        "downloads": 1467,
        "filename": "pytest-bdd-2.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8da9cfb0124ce2c0b9cea4997522d65f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 42445,
        "upload_time": "2014-10-22T11:25:24",
        "url": "https://files.pythonhosted.org/packages/29/4d/446b2aa404b6cc436c9659ca33cbe8c61932e04211237a9ea8ee82631672/pytest-bdd-2.4.5.tar.gz"
      }
    ],
    "2.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4416c98e43a142b213f0ce839ba2b6d6",
          "sha256": "0e846e780f9e76ba2f4dccb9cbe1410e77e0585460595aa33004ebecf04cca86"
        },
        "downloads": 1943,
        "filename": "pytest-bdd-2.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4416c98e43a142b213f0ce839ba2b6d6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43907,
        "upload_time": "2014-11-10T09:15:48",
        "url": "https://files.pythonhosted.org/packages/f0/a6/b41c07514c01bb1bfc391fdc507bfe4386beae6919f0342ed240e9e6a4fc/pytest-bdd-2.5.0.tar.gz"
      }
    ],
    "2.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "23d354de038bae6ff8360d5e54bc6640",
          "sha256": "7c896af49bf9ed44492fb42406a1a0b7082435262aa713841c34c7f4b6c389a2"
        },
        "downloads": 1892,
        "filename": "pytest-bdd-2.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "23d354de038bae6ff8360d5e54bc6640",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 44007,
        "upload_time": "2014-11-19T16:29:49",
        "url": "https://files.pythonhosted.org/packages/30/88/96757903b60353a8c6410862f43ffedce3098efb2c33f9c3fa1274c6b6a6/pytest-bdd-2.5.1.tar.gz"
      }
    ],
    "2.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ffa3ffe574ea80ea093478ccab1b9c0d",
          "sha256": "9ec63067b04375773fe5fbab00aea1624ec9bba16133f07463c47c1e00e8aa99"
        },
        "downloads": 1344,
        "filename": "pytest-bdd-2.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ffa3ffe574ea80ea093478ccab1b9c0d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45312,
        "upload_time": "2014-12-18T08:17:17",
        "url": "https://files.pythonhosted.org/packages/0d/a8/7064714115e06da696342d5855bb67d6a63698b494ab19fbe8f79eb9f58e/pytest-bdd-2.5.2.tar.gz"
      }
    ],
    "2.5.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9566fa73d1f4fd1c63a5c7b00ef2a73f",
          "sha256": "c3d24a31f51da40bf633fa7b040318f9aa21196aa6e074a4a5a5b553f93b2266"
        },
        "downloads": 1247,
        "filename": "pytest-bdd-2.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9566fa73d1f4fd1c63a5c7b00ef2a73f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45563,
        "upload_time": "2014-12-29T16:16:52",
        "url": "https://files.pythonhosted.org/packages/74/39/356c6a6e3d543dfddd54cb156d06da8b15ce0fadec54ca3a2a6a7fc2814c/pytest-bdd-2.5.3.tar.gz"
      }
    ],
    "2.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d9a94d64fddaa3be79b17ae22640d58a",
          "sha256": "7fda1c915b2a6fbcbeb3c2445d676c95e40fc9218e649f029febb96cc138d959"
        },
        "downloads": 1160,
        "filename": "pytest-bdd-2.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d9a94d64fddaa3be79b17ae22640d58a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 50346,
        "upload_time": "2015-01-08T21:14:05",
        "url": "https://files.pythonhosted.org/packages/4e/64/67ec678e52453f58455e7d7174969a6bdf1814957b29f0e977df81781f6f/pytest-bdd-2.6.0.tar.gz"
      }
    ],
    "2.6.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "955e7ebf1a68fd5c4208930890914bd5",
          "sha256": "41853d7293dfe5b6881c6468c2ec2f1abb03dfd3bf88749d90aa7a87805e3833"
        },
        "downloads": 1487,
        "filename": "pytest-bdd-2.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "955e7ebf1a68fd5c4208930890914bd5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 47887,
        "upload_time": "2015-01-13T14:34:41",
        "url": "https://files.pythonhosted.org/packages/ec/3f/3e0054aac229d7c52bb5a0c06ea628bf7eda4fe1810040843619b487a514/pytest-bdd-2.6.1.tar.gz"
      }
    ],
    "2.6.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9e3d25bc3d56c4cedf5af2100c6f7a06",
          "sha256": "bb2e6ccfbf47fe726af505e89241964a19340cc9d7d9380bf9daf5086d8ae100"
        },
        "downloads": 6344,
        "filename": "pytest-bdd-2.6.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9e3d25bc3d56c4cedf5af2100c6f7a06",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 50477,
        "upload_time": "2015-03-15T15:29:47",
        "url": "https://files.pythonhosted.org/packages/a4/0c/91e3ed4b6ffa7857521eff3545a34f551333609f449e6ba89925514c1c68/pytest-bdd-2.6.2.tar.gz"
      }
    ],
    "2.7.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "689cbee83fa65aaeef4b8b310c4bee35",
          "sha256": "8a5fbc16bcd6d97890c7d7216dbba4d454b42bba2c2155df1ad1e5a44a3bc64c"
        },
        "downloads": 1277,
        "filename": "pytest-bdd-2.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "689cbee83fa65aaeef4b8b310c4bee35",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 53278,
        "upload_time": "2015-03-18T23:03:38",
        "url": "https://files.pythonhosted.org/packages/c1/ef/ddb1aeba69da2205a4b2468fc362e7c08fd5d777ac6f7aaaad41783a1d9a/pytest-bdd-2.7.0.tar.gz"
      }
    ],
    "2.7.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bdd367eba0034bd500976630ac13eab7",
          "sha256": "f9f59b35c72da2c049439a8e404b5cd23eed6935d0026a329e2bd64c4aefedd9"
        },
        "downloads": 1023,
        "filename": "pytest-bdd-2.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bdd367eba0034bd500976630ac13eab7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 53173,
        "upload_time": "2015-04-07T16:41:46",
        "url": "https://files.pythonhosted.org/packages/da/65/dd9e1bfde827b715d66f7e54fbf422789a8dcdb0ca775aaeaa35ce15142c/pytest-bdd-2.7.1.tar.gz"
      }
    ],
    "2.7.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dcfc5805162d667fdae79391b020f5ef",
          "sha256": "089725c8f47cd11648819ac615db6aba84172083f3bf8450180236bb543b09df"
        },
        "downloads": 1682,
        "filename": "pytest-bdd-2.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dcfc5805162d667fdae79391b020f5ef",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 53271,
        "upload_time": "2015-04-09T16:18:21",
        "url": "https://files.pythonhosted.org/packages/c4/cd/a223a7921dc63a4ccbbde94a5658deacbddd420a97872f43d5014b1d0381/pytest-bdd-2.7.2.tar.gz"
      }
    ],
    "2.8.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0eba4ff981430d5c3d60d57da6778d88",
          "sha256": "deadc0251ac655a83e49067b156423285c9aab56263bf6971ad960bb2e7f378d"
        },
        "downloads": 1580,
        "filename": "pytest-bdd-2.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0eba4ff981430d5c3d60d57da6778d88",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 53603,
        "upload_time": "2015-05-18T11:38:26",
        "url": "https://files.pythonhosted.org/packages/1a/84/cc505e24d38bca2a097ccd669cec9e3c930a383eaf0dabf1f76953c046e2/pytest-bdd-2.8.0.tar.gz"
      }
    ],
    "2.9.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b38f725836f5f1e5c769d107f6014997",
          "sha256": "b84e731d84c1ee4fe2c3148dfc3216d94e86a8c0c32bcd6eb415d23084d1c4ae"
        },
        "downloads": 1253,
        "filename": "pytest-bdd-2.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b38f725836f5f1e5c769d107f6014997",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 54641,
        "upload_time": "2015-05-26T11:35:57",
        "url": "https://files.pythonhosted.org/packages/2b/84/fe630a74314125c1f9e0b77e061cf600657cae138ec938b257e52395ba8c/pytest-bdd-2.9.0.tar.gz"
      }
    ],
    "2.9.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f7ba4ee28985fcd40a69d46623de24db",
          "sha256": "6ef0667528fea8cb67214bcde9c357a8743783e376fcfb99d48a5a2136557600"
        },
        "downloads": 841,
        "filename": "pytest-bdd-2.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f7ba4ee28985fcd40a69d46623de24db",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 54835,
        "upload_time": "2015-06-04T08:30:43",
        "url": "https://files.pythonhosted.org/packages/49/5a/ab0d49fd5afe9c7d94fbc7cf7c4c7ecf710ac2bf4b728a8b6e62edc7df74/pytest-bdd-2.9.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a0f806c850f227beb239fe2644f033b2",
        "sha256": "b63ca3d214d62099e9e13cbbfee91f6d283a3a2e1d6c5730ea083c3caae6a326"
      },
      "downloads": 0,
      "filename": "pytest-bdd-2.18.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a0f806c850f227beb239fe2644f033b2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 64876,
      "upload_time": "2017-05-01T10:27:19",
      "url": "https://files.pythonhosted.org/packages/71/8a/a410b846e6ab10b10607c9c0beef657162df76adf34b75040e609a6e4058/pytest-bdd-2.18.2.tar.gz"
    }
  ]
}