{
  "info": {
    "author": "Eliot Berriot",
    "author_email": "contact@eliotberriot.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "Introduction\n============\n\nPersisting-theory is a small python utility designed to automate data discovering and access inside a list of packages. Use case: you are building an application that will have pluggable components. You want to allow these components to register data so it can be accessed by any other component of your app.\n\nIf you ever used Django framework, you may remember this::\n\n    from django.contrib import admin\n    admin.autodiscover()\n\nBasically, persisting-theory will do the same, except that it let you declare what you want to autodiscover.\n\nOkay, I'm bad at explaining things, and english is not my mother tongue. Let's build a simple example.\n\nQuickstart\n==========\n\nInstall\n*******\n\nInstall the package from `PyPi <https://pypi.python.org/pypi/persisting-theory/>`_. via pip (or any other tool)::\n\n    pip install persisting-theory\n\nPersisting-theory does not require any dependency but a python installation (it has been tested on python 2.7 and python 3.4).\n\nSetup\n*****\n\nA basic setup::\n\n    # registries.py\n\n    from persiting_theory import Registry\n\n    class CallbacksRegistry(Registry):\n        \"\"\"\n            Allow your apps to register callbacks\n        \"\"\"\n        # the package where the registry will try to find callbacks in each app\n        look_into = \"callbacks_registry\"\n\n    callbacks_registry = CallbacksRegistry()\n\n\n    # app1/callbacks_registry.py\n\n    from registries import callbacks_registry\n\n    @callbacks_registry.register\n    def dog():\n        print(\"Wouf\")\n\n\n    # app2/callbacks_registry.py\n\n    from registries import callbacks_registry\n\n    @callbacks_registry.register\n    def cat():\n        print(\"Meow\")\n\n\n    # dosomething.py\n\n    from registries import callbacks_registry\n    \n    APPS = (\n        'app1',\n        'app2',\n    )\n    \n    # Trigger autodiscovering process\n    callbacks_registry.autodiscover(APPS)\n\n    for callback in callbacks_registry.values():\n        callback()\n\n        # Wouf\n        # Meow\n\nAPI\n===\n\n``Registry`` inherits from python built-in `collections.OrderedDict`, which means you can use regular dict methods to access registered data::\n\n    callbacks_registry.get(\"dog\")()  #  will print Wouf\n    assert callbacks_registry.get(\"chicken\", None) is None\n\nRegistry.register()\n*******************\n\nYou can use this function as a decorator for registering functions and classes::\n\n    from persisting_theory import Registry\n\n    class AwesomeRegistry(Registry):\n        pass\n\n    r = AwesomeRegistry()\n\n    # register a class\n    @r.register\n    class AwesomeClass:\n        pass\n\n    # register a function\n    @r.register\n    def awesome_function():\n        pass\n\n    # By default, the key in the registry for a given value is obtained from the function or class name, if possible\n\n    assert r.get(\"AwesomeClass\") == AwesomeClass\n    assert r.get(\"awesome_function\") == awesome_function\n\n    # You can override this behaviour:\n\n    @r.register(name=\"Chuck\")\n    class AwesomeClass:\n        pass\n\n    @r.register(name=\"Norris\")\n    def awesome_function():\n        pass\n\n    assert r.get(\"Chuck\") == AwesomeClass\n    assert r.get(\"Norris\") == awesome_function\n\n\n    # You can also use the register method as is\n\n    awesome_var = \"Chuck Norris\"\n    r.register(awesome_var, name=\"Who am I ?\")\n\n    assert r.get(\"Who am I ?\") == awesome_var\n\n    # I f you are not registering a function or a class, you MUST provide a name argument\n\nRegistry.validate()\n*******************\n\nBy default, a registry will accept any registered value. Sometimes, it's not what you want, so you can restrict what kind of data your registry accepts::\n\n    from persisting_theory import Registry\n\n    class StartsWithAwesomeRegistry(Registry):\n\n        def validate(self, data):\n            if isinstance(data, str):\n                return data.startswith(\"awesome\")\n            return False\n\n    r = StartsWithAwesomeRegistry()\n\n    # will pass registration\n    r.register(\"awesome day\", name=\"awesome_day\")\n\n    # will fail and raise ValueError\n    r.register(\"not so awesome day\", name=\"not_so_awesome_day\")\n\nRegistry.prepare_data()\n***********************\n\nIf you want to manipulate your data before registering it, override this method. In this example, we prefix every registered string with 'hello'::\n\n    from persisting_theory import Registry\n\n    class HelloRegistry(Registry):\n\n        def prepare_data(self, data):\n            return 'hello ' + data \n\n    r = HelloRegistry()\n\n    class Greeting:\n        def __init__(self, first_name):\n            self.first_name = first_name\n\n\n    r.register(Greeting('World'), name=\"world\")\n    r.register(Greeting('Eliot'), name=\"eliot\")\n\n    assert r.register.get('world') == \"hello World\"\n    assert r.register.get('eliot') == \"hello Eliot\"\n\n\nRegistry.prepare_name()\n***********************\n\nIn a similar way, you can manipulate the name of registered data. This can help if you want to avoid repetitions. Let's improve our previous example::\n\n    from persisting_theory import Registry\n\n    class HelloRegistry(Registry):\n\n        def prepare_data(self, data):\n            return 'hello ' + data \n\n        def prepare_name(self, data, name=None):\n            return self.data.first_name.lower()\n\n    r = HelloRegistry()\n\n    class Greeting:\n        def __init__(self, first_name):\n            self.first_name = first_name\n\n\n    r.register(Greeting('World'))\n    r.register(Greeting('Eliot'))\n\n    assert r.register.get('world') == \"hello World\"\n    assert r.register.get('eliot') == \"hello Eliot\"\n\nGoing meta\n**********\n\nIf you have multiple registries, or want to allow your apps to declare their own registries, this is for you::\n\n    # registries.py\n\n    from persisting_theory import meta_registry, Registry\n\n    class RegistryA(Registry):\n        look_into = \"a\"\n    \n    class RegistryB(Registry):\n        look_into = \"b\"\n\n    registry_a = RegistryA()\n    meta_registry.register(registry_a, name=\"registry_a\")\n\n    registry_b = RegistryB()\n    meta_registry.register(registry_b, name=\"registry_b\")\n\n\n    # dosomethingelse.py\n\n    from persisting_theory import meta_registry\n\n    # will import registries declared in `registries` packages, and trigger autodiscover() on each of them\n    meta_registry.autodiscover(apps=(\"app1\", \"app2\"))\n\n\nWhat the hell is that name ?\n============================\n\nIt's an anagram for \"python registries\". \n\nContribute\n==========\n\nContributions, bug reports, and \"thank you\" are welcomed. Feel free to contact me at <contact@eliotberriot.com>.\n\nLicense\n=======\n\nThe project is licensed under BSD licence.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://code.eliotberriot.com/eliotberriot/persisting-theory",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "persisting-theory",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/persisting-theory/",
    "release_url": "https://pypi.org/project/persisting-theory/0.2.1/",
    "requires_python": null,
    "summary": "Registries that can autodiscover values accross your project apps",
    "version": "0.2.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "31a80610beb45e22aadab446fcaf7abd",
          "sha256": "f00bf9de28089cd8beff825bd113691ecc8f4dd1980c45f6545211cac97ee9e9"
        },
        "downloads": 1958,
        "filename": "persisting-theory-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "31a80610beb45e22aadab446fcaf7abd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6829,
        "upload_time": "2014-07-11T23:16:37",
        "url": "https://files.pythonhosted.org/packages/06/22/9a200600b9da8041807043d522f93aa6d283d3da1a0aa91b88079f5b4543/persisting-theory-0.1.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "03530b98164023bb784863bfc085df73",
          "sha256": "f31bb1e7c250536c0c893843124526262a7740be96530e25c01ef0f06b011579"
        },
        "downloads": 1522,
        "filename": "persisting-theory-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "03530b98164023bb784863bfc085df73",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7128,
        "upload_time": "2014-07-12T10:00:15",
        "url": "https://files.pythonhosted.org/packages/47/7b/bc1cb17795a376e3498c7fb74af5dd55c91b79338869199c722e435ef8ce/persisting-theory-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0da9e1d38095945003e86005d524a0a3",
          "sha256": "4633f7b59101968818f027a06e02b8670cc98e48610f3892a008cb8507bcdc4a"
        },
        "downloads": 1562,
        "filename": "persisting-theory-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0da9e1d38095945003e86005d524a0a3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7586,
        "upload_time": "2014-07-13T11:31:29",
        "url": "https://files.pythonhosted.org/packages/7b/08/d528213a9f537c414877cffcebc6dd3ac09e0958c71861f067d1bc9c5c65/persisting-theory-0.1.2.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8f30de22b75e10a2391b03bd07d7d795",
          "sha256": "6d5a5b64250ca95c8021672f43a2e16559e2451b9d3e661eb81168b8ab9e75b2"
        },
        "downloads": 1576,
        "filename": "persisting-theory-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8f30de22b75e10a2391b03bd07d7d795",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8544,
        "upload_time": "2014-07-26T17:49:36",
        "url": "https://files.pythonhosted.org/packages/ec/22/fa6ff7a2d5381856c96faf794cde23b59ebb3baa3d169d78868935f12284/persisting-theory-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bd4783c92a6434f80d3210bdfa7b05da",
          "sha256": "00ff7dcc8f481ff75c770ca5797d968e8725b6df1f77fe0cf7d20fa1e5790c0a"
        },
        "downloads": 2699,
        "filename": "persisting-theory-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bd4783c92a6434f80d3210bdfa7b05da",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8685,
        "upload_time": "2014-10-13T13:48:59",
        "url": "https://files.pythonhosted.org/packages/71/31/fce320615dc39f8942da2e7bc2d89620788a102c5326c46e70a40655f77a/persisting-theory-0.2.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "bd4783c92a6434f80d3210bdfa7b05da",
        "sha256": "00ff7dcc8f481ff75c770ca5797d968e8725b6df1f77fe0cf7d20fa1e5790c0a"
      },
      "downloads": 2699,
      "filename": "persisting-theory-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bd4783c92a6434f80d3210bdfa7b05da",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8685,
      "upload_time": "2014-10-13T13:48:59",
      "url": "https://files.pythonhosted.org/packages/71/31/fce320615dc39f8942da2e7bc2d89620788a102c5326c46e70a40655f77a/persisting-theory-0.2.1.tar.gz"
    }
  ]
}