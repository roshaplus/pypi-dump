{
  "info": {
    "author": "Jason Valenzuela",
    "author_email": "jvalenzuela1977@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Interface Engine/Protocol Translator",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Markup :: XML"
    ],
    "description": "=========================\nRSLogix .L5X Interface\n=========================\n\nThis package aims to implement an interface for manipulating content of\nRSLogix .L5X export files using a native Pythonic approach as opposed to\ndealing with raw XML.\n\n\nGetting Started\n-------------------------\n\nAll access to .L5X data is through a top-level Project object, instantiated\nby passing a filename to the constructor. If the project is to be modified\nthe write method writes the updated data back to a file for importing into\nRSLogix. Typical execution flow is as follows:\n\n::\n\n\timport l5x\n\tprj = l5x.Project('project.L5X')\n\n\t# Read or modify data as needed.\n\n\tprj.write('modified.L5X')\n\n\nController\n-------------------------\n\nThe controller attribute of a project has the following attributes:\n\ntags:\n\tA tag scope containing controller tags; see Tags_.\n\n\ncomm_path:\n\tPermits reading and modifying the controller's communication path.\n\tSetting to None will delete the communication path.\n\n::\n\n\t>>> prj.controller.tags['tag_name'].description = 'A controller tag'\n\t>>> prj.controller.comm_path\n\t'AB_ETHIP-1\\\\192.168.1.10\\\\Backplane\\\\0'\n\nsnn:\n\tSafety network number; see Modules_ for details.\n\n\nPrograms\n-------------------------\n\nA project's programs attribute contains a names attribute that evaluates\nto an iterable of program names, members of which can be used as indices to\naccess program-scoped tags.\n\n::\n\n\t>>> prj.programs.names\n\t['MainProgram', 'AnotherProgram']\n\t>>> prj.programs['MainProgram'].tags['a_program_tag'].value = 50\n\n\nTags\n-------------------------\n\nThe top-level project contains tag scope objects, such as controller or\nprograms, which provide access to their respective tags. Indexing a scope\nobject with a tag's name will return a tag object providing access to the\nvarious properties of the tag. An iterable of tag names can also be acquired\nfrom a scope's names attribute.\n\n::\n\n\tctl_tags = prj.controller.tags\n\ttag_names = ctl_tags.names\n\tsome_tag = ctl_tags[tag_names[0]]\n\nAll tag objects have at least the following attributes:\n\ndata_type\n\tA string describing the tag's data type, such as DINT or TIMER.\n\nvalue\n\tThe tag's complete value, the type of which varies based on the\n        tag's type. For base data types this will be a single value, such\n        as an integer, however, container objects are utilized for compound\n\tdata types such as arrays and UDTs. See documentation below for\n\tdetails. This attribute can be read to acquire the current value\n\tor written to set a new value.\n\ndescription\n\tThe tag's top-level comment. See data type specific\n        documentation for data types which support commenting subelements\n\tsuch as individual array members or integer bits. In addition to\n        normal read/write activities, setting this attribute to None will\n        delete any existing comment.\n\nConsumed tags include these additional read/write attributes:\n\nproducer\n\tName of the producing controller.\n\nremote_tag\n\tRemote tag name.\n\n\nIntegers\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDINT, INT, and SINT data types accept integer values.\n\n::\n\n\tprj.controller.tags['dint_tag'].value = 42\n\nAccessing individual bits is available via index notation with a zero-based\ninteger index:\n\n::\n\n\tprj.controller.tags['dint_tag'][3].value = 1\n\tprj.controller.tags['dint_tag'][2].description = 'this is bit 2'\n\n\nBooleans\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLike integers, BOOL data types accept integer values, albeit only\n0 or 1.\n\n\nFloats\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nREAL data types use floating point values. If an integer value is desired,\nit must first be converted to a float before assignment or a TypeError will\nbe raised. Infinite and not-a-number values may not be used.\n\n\nStructures\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nStructured data types include UDTs and built-ins such as TIMER. Individual\nmembers are accessed using the member's name as an index as follows:\n\n::\n\n\tprj.controller.tags['timer']['PRE'].value = 100\n\tprj.controller.tags['timer']['DN'].description = 'done bit'\n\nAn iterable set of member identifiers is available with the names attribute:\n\n::\n\n\t>>> prj.controller.tags['timer'].names\n\t['PRE', 'ACC', 'TT', 'EN', 'DN']\n\nAccessing the value of the structure as a whole is also possible using\ndictionaries keyed by member name.\n\n::\n\n\td = {'PRE':0, 'ACC':0, 'EN':0, 'TT':0, 'DN':0}\n\tprj.controller.tags['timer'].value = d\n\n\nArrays\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nArray elements are accessed with standard index notation using integer\nindices. Multidimensional arrays use a series of indices, each within their\nown bracket as opposed to the comma-separated style of RSLogix.\n\n::\n\n\t>>> prj.controller.tags['single_dim_array'][3].value = 16\n\t>>> prj.controller.tags['multi_dim_array'][2][5].description\n\t'This is multi_dim_array[2,5]'\n\nThe value of entire array is available through the value attribute using\nlists. Multidimensional arrays use lists of lists and arrays of complex data\ntypes are supported, for example an array of UDTs is a list of dicts.\n\n::\n\n\t>>> l = [0, 1, 2, 3, 4]\n\t>>> prj.controller.tags['single_dim_array'].value = l\n\t>>> prj.controller.tags['multi_dim_array'].value\n\t[[0, 1], [2, 3], [4, 5]]\n\t\n\nAn array's dimensions may be read with the shape attribute, which returns\na tuple containing the size of each dimension. The following example shows\noutput for a tag of type DINT[4,3,2]. Note the tuple's reversed display order\nas the number of elements in DimX is placed in shape[X].\n\n::\n\n\t>>> prj.controller.tags['array'].shape\n\t(2, 3, 4)\n\n\nArrays may also be resized by assigning the shape attribute to a new set\nof dimensions. Keep in mind the reversed appearance of dimensions described\nabove. Specifying a shape tuple of (x, y, z) will yield an array sized as\nif Dim0=x, Dim1=y, and Dim2=z were used in the Logix tag dialog. Also the\narray's element values and descriptions are undefined following a resize\noperation, even if the new shape is a subset of the original. If original\ncontent needs to be retained across a resize, it should be copied to\nseparate variables before assigning a new shape.\n\n::\n\n        >>> prj.controller.tags['DINT_array'].value\n        [0, 1, 2, 3]\n        >>> prj.controller.tags['DINT_array'].shape = (2, 2)\n        >>> prj.controller.tags['DINT_array'].value\n        [[0, 0], [0, 0]]\n\n\nModules\n-------------------------\n\nThe project's modules attribute provides access to modules defined in the\nI/O Configuration tree. A list of modules can be obtained with the names\nattribute.\n\n::\n\n\t>> prj.modules.names\n\t['Controller', 'DOUT1', 'ENBT']\n\nEach module is comprised of a set of communication ports identified by\na unique integer. Ports feature a read-only type attribute to query the\ninterface type and a read-write address attribute to get or set the\ntype-specific address. A typical example for manipulating the IP\naddress of an Ethernet port, which is usually port 2:\n\n::\n\n\t>> prj.modules['ENBT'].ports[2].type\n\t'Ethernet'\n\t>> prj.modules['ENBT'].ports[2].address = '192.168.0.1'\n\nSafety modules, including the controller, contain a read/write snn\nattribute for manipulating the module's safety network number.\nIt evaluates to a 12-character string representing the hexadecimal\nsafety network number; intervening underscores as seen with RSLogix\nare stripped away. Acceptable values to set a new number need not be\nzero padded and may contain intervening underscores, however, it must\nbe a string yielding a hexadecimal number not exceeding 48 bits.\n\n::\n\n\t>>> prj.controller.snn\n\t'000011112222'\n\t>>> prj.modules['safe_in'].snn\n\t'AAAABBBBCCCC'\n\t>>> prj.controller.snn = '42'\n\t>>> prj.modules['safe_out'].snn = '0001_0002_0003'",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://pypi.python.org/pypi/l5x/",
    "keywords": null,
    "license": "LICENSE.txt",
    "maintainer": null,
    "maintainer_email": null,
    "name": "l5x",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/l5x/",
    "release_url": "https://pypi.org/project/l5x/1.2/",
    "requires_python": null,
    "summary": "RSLogix .L5X interface.",
    "version": "1.2"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d05bc572cf5315031b6cdd83ecabdea2",
          "sha256": "a8a2e1367a30a9a239b35890a7ec9a04dc40765da14ea2b93bd1625607747891"
        },
        "downloads": 2550,
        "filename": "l5x-1.0.win32.exe",
        "has_sig": false,
        "md5_digest": "d05bc572cf5315031b6cdd83ecabdea2",
        "packagetype": "bdist_wininst",
        "python_version": "any",
        "size": 214363,
        "upload_time": "2013-03-25T02:04:29",
        "url": "https://files.pythonhosted.org/packages/f2/b2/645d21b92db7fe587710386612c3e518ebcf073150d608e532e23dfea9fd/l5x-1.0.win32.exe"
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2f858dd9bda38d03c820e4c390f9c8cc",
          "sha256": "b50cfde738861ac48635e232095e5cc2d792f436d257cb8afd1720b7b9b30cf9"
        },
        "downloads": 2087,
        "filename": "l5x-1.1.win32.exe",
        "has_sig": false,
        "md5_digest": "2f858dd9bda38d03c820e4c390f9c8cc",
        "packagetype": "bdist_wininst",
        "python_version": "any",
        "size": 224870,
        "upload_time": "2013-07-24T13:05:01",
        "url": "https://files.pythonhosted.org/packages/a0/16/ad8690c97bb25357f343631a368b3976f495d91ef1acf30a565caf8b4632/l5x-1.1.win32.exe"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "32a9726f7662d4977beb4fd2a954d7e8",
          "sha256": "836c13f87d07c7252c661d970573c59b7c3419a43f0d1d16dd8922b12ce46848"
        },
        "downloads": 2439,
        "filename": "l5x-1.1.win-amd64.exe",
        "has_sig": false,
        "md5_digest": "32a9726f7662d4977beb4fd2a954d7e8",
        "packagetype": "bdist_wininst",
        "python_version": "any",
        "size": 250979,
        "upload_time": "2013-07-27T06:28:37",
        "url": "https://files.pythonhosted.org/packages/5a/a6/419c0219fba758f90b2e9be5f23a9672613d51ac387f79d2bf7d258c3573/l5x-1.1.win-amd64.exe"
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f9c7b8d296afe6ba2e2d39033056e886",
          "sha256": "10fcda6487eebc85f6ad5f06f600b449a5e2be63b69cb401e67644271fd59b48"
        },
        "downloads": 343,
        "filename": "l5x-1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f9c7b8d296afe6ba2e2d39033056e886",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 28191,
        "upload_time": "2016-08-26T22:18:35",
        "url": "https://files.pythonhosted.org/packages/49/cf/438a0113220b379d01a955e8dd411d5c73195339dd7b63f1c05c2c0c2c91/l5x-1.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e03d7e321bb713c828309595224f84b0",
          "sha256": "70ebbbb71e772b83c0973313fcd4625d4e3e42422f2c631316dae3764b598ec6"
        },
        "downloads": 351,
        "filename": "l5x-1.2-win32.exe",
        "has_sig": false,
        "md5_digest": "e03d7e321bb713c828309595224f84b0",
        "packagetype": "bdist_wininst",
        "python_version": "any",
        "size": 227894,
        "upload_time": "2016-08-24T22:38:54",
        "url": "https://files.pythonhosted.org/packages/d5/47/6b00d9d9999b7b46fac56bac99991a5a439ed855898e4f6034fd5f0136e8/l5x-1.2-win32.exe"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f9c7b8d296afe6ba2e2d39033056e886",
        "sha256": "10fcda6487eebc85f6ad5f06f600b449a5e2be63b69cb401e67644271fd59b48"
      },
      "downloads": 343,
      "filename": "l5x-1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f9c7b8d296afe6ba2e2d39033056e886",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "size": 28191,
      "upload_time": "2016-08-26T22:18:35",
      "url": "https://files.pythonhosted.org/packages/49/cf/438a0113220b379d01a955e8dd411d5c73195339dd7b63f1c05c2c0c2c91/l5x-1.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "e03d7e321bb713c828309595224f84b0",
        "sha256": "70ebbbb71e772b83c0973313fcd4625d4e3e42422f2c631316dae3764b598ec6"
      },
      "downloads": 351,
      "filename": "l5x-1.2-win32.exe",
      "has_sig": false,
      "md5_digest": "e03d7e321bb713c828309595224f84b0",
      "packagetype": "bdist_wininst",
      "python_version": "any",
      "size": 227894,
      "upload_time": "2016-08-24T22:38:54",
      "url": "https://files.pythonhosted.org/packages/d5/47/6b00d9d9999b7b46fac56bac99991a5a439ed855898e4f6034fd5f0136e8/l5x-1.2-win32.exe"
    }
  ]
}