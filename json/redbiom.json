{
  "info": {
    "author": "Daniel McDonald",
    "author_email": "wasade@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "|redbiom|\n=========\n\n|build-status|\n==============\n\nWhat is this?\n=============\n\nRedbiom is a cache service for sample metadata and sample data. It\nallows for rapidly:\n\n-  finding samples by the features they contain\n-  finding samples by arbitrary metadata searches\n-  summarizing samples over metadata\n-  retieval of sample data into BIOM\n-  discovering metadata categories\n-  pulling out sample data from different processing types (e.g., search\n   over 16S, retrieve WGS)\n\nRedbiom is designed to handle biological and technical replicates.\nSpecifically, it allows for a one to many relationship between a\nsample's metadata and its data, both within and between preparation\ntypes.\n\nThis repository defines the de facto redbiom data representation, and\none possible interface into the resource. Other interfaces (e.g.,\nJavascript) are possible to define. Please see the Design section below\nfor details about how other interfaces can be written.\n\nBy default, redbiom will search against ``qiita.ucsd.edu:7329``. This\ncan be changed at runtime by setting the ``REDBIOM_HOST`` environmental\nvariable, e.g., ``export REDBIOM_HOST=http://qiita.ucsd.edu:7329``. The\ndefault host is **read-only** and administrative functions like loading\ndata will not work against it.\n\nIf you intend to **load** your own data, you must setup a local instance\n(please see the server installation instructions below). In addition,\nyou must explicitly set the ``REDBIOM_HOST`` environment variable.\n\nVery brief examples\n===================\n\nA few quick examples of what can be done. More complex and detailed\nexamples can be found later in the document.\n\nGet all the samples in which the word \"beer\" is found:\n\n::\n\n    $ redbiom search metadata beer | head\n    10105.Ingredient.18\n    1976.Beer.286\n    1689.261\n    10105.Ingredient.19\n    1976.Beer.262\n    10105.Ingredient.23\n    1976.Beer.228\n    10105.Ingredient.17\n    10395.000041066\n    10105.Ingredient.24\n\nGet the closed reference OTU picking 16S V4 data for those samples (more\non what ``ctx`` and ``context`` is in the longer examples below):\n\n::\n\n    $ export ctx=Pick_closed-reference_OTUs-illumina-16S-v4-66f541\n    $ redbiom search metadata beer | head | redbiom fetch samples --context $ctx --output beer_example.biom\n    $ redbiom search metadata beer | head | redbiom fetch sample-metadata --context $ctx --output beer_example.txt\n\nFind the feature IDs (Greengenes OTU IDs in this case) associated with\nS. aureus (and for example purposes, an arbitrary 10):\n\n::\n\n    $ redbiom search taxon --context $ctx s__aureus | head\n    943389\n    1023241\n    862312\n    1102743\n    870118\n    969777\n    1086805\n    976010\n    951488\n    951136\n\n...and then find samples which contain those 10 S. aureus features:\n\n::\n\n    $ redbiom search taxon --context $ctx s__aureus | head | redbiom search features --context $ctx | wc -l\n       40164\n\nInstallation\n============\n\nGeneral requirements\n~~~~~~~~~~~~~~~~~~~~\n\nRedbiom depends on `BIOM <http://biom-format.org/>`__ (tested on >=\n2.1.5), `Pandas <http://pandas.pydata.org/>`__ (tested on 0.19.0),\n`Click <http://click.pocoo.org/5/>`__ (required >= 6.7),\n`nltk <http://www.nltk.org/>`__ (tested on 3.2.2),\n`joblib <https://pythonhosted.org/joblib/>`__ (tested on 0.9.3), and\n`scipy <https://www.scipy.org/>`__ (whatever BIOM is happy with).\n\nClient\n~~~~~~\n\nIf you would like to use redbiom as only a client (which is the general\ncase), then the following instructions apply. Note that we need to\ninstall numpy separately as one of the dependencies, BIOM-Format,\nimports numpy within its installation process.\n\n::\n\n    $ pip install numpy\n    $ pip install redbiom\n\nServer\n~~~~~~\n\nIf you would like to run your own resource, and load data locally or\nprivate data, then the following instructions apply.\n\nIn addition to the general requirements, redbiom server needs\n`Redis <https://redis.io/>`__ (tested with 2.8.17 and 3.2.6) and\n`Webdis <http://webd.is/>`__ (just clone the repo). It is not necessary\nto have super user access to establish a redbiom server.\n\nFor Redis, the following has worked on OSX and multiple flavors of Linux\nwithout issue.\n\n::\n\n    $ http://download.redis.io/releases/redis-3.2.6.tar.gz\n    $ tar xzf redis-3.2.6.tar.gz\n    $ pushd redis-3.2.6\n    $ make\n    $ ./src/redis-server --daemonize\n    $ popd\n\nWebdis packages its dependencies with the exception of libevent. It is\nentirely likely that libevent is already available on your system. If\nso, the following should work. If libevent is not available, compilation\nwill die quickly. However, libevent is in all the common repositories\n(e.g., yum, apt, brew, etc), and compiling by source is straight\nforward.\n\n::\n\n    $ git clone https://github.com/nicolasff/webdis.git\n    $ pushd webdis\n    $ make\n    $ ./webdis &\n    $ popd\n\nLast, redbiom itself can be installed as a normal Python package.\n\n::\n\n    $ pip install numpy\n    $ pip install redbiom\n\nTesting\n~~~~~~~\n\nThe test framework is setup to by default only execute tests against\n``localhost``, specifically, ``127.0.0.1:7379``. However, the\nrepository, by default, is setup to communicate with a remote Webdis\nserver. If you wish to execute the test suite, please\n``export REDBIOM_HOST=http://127.0.0.1:7379``.\n\nTerminology and notation\n========================\n\nIn redbiom, the word \"context\" refers to a way in which the sample data\nwere processed. Data are loaded into contexts and searches for samples\nby feature happen within contexts.\n\nTo support the one to many relationship between a sample's metadata and\nits data, within a context, a sample's IDs are prefixed by a \"tag\" which\ncan be specified at load. Internally, within a context, these IDs are of\nthe form ``<tag>_<sample-id>``. The use of the ``_`` character ensures\nthat they are not valid QIIME sample IDs, and is necessary so we can\nappropriately differentiate these IDs. Methods which write data will\ncoerce these invalid QIIME IDs into valid IDs of the form\n``<sample-id>.<tag>``. **IMPORTANT**: if you run your own resource, it\nis important to specify ``--tag`` on load of sample data to\ndifferentiate BIOM tables in which the sample IDs between the tables may\nnot be mutually exclusive.\n\nCommands which write data will notify the user if there were\nambiguities. An ambiguitiy means that there was a sample ID which mapped\nto multiple redbiom IDs within the output. The IDs written are unique\nbecause of the reasons noted above,\n\nCommand structure\n=================\n\nRedbiom relies on ``Click`` to provide a tiered command line interface.\nAn example of the first tier is below, and with the exception of\n``admin``, are composed of verbs:\n\n::\n\n    $ redbiom --help\n    Usage: redbiom [OPTIONS] COMMAND [ARGS]...\n\n    Options:\n      --version  Show the version and exit.\n      --help     Show this message and exit.\n\n    Commands:\n      admin      Update database, etc.\n      fetch      Sample data and metadata retrieval.\n      search     Feature and sample search support.\n      select     Select items based on metadata\n      summarize  Summarize things.\n\nThe actual commands to execute are contained within a submodule. For\ninstance, below are the commands associated with \"search\":\n\n::\n\n    $ redbiom search --help\n    Usage: redbiom search [OPTIONS] COMMAND [ARGS]...\n\n      Feature and sample search support.\n\n    Options:\n      --help  Show this message and exit.\n\n    Commands:\n      metadata      Find samples or categories.\n      features      Find samples containing features.\n      taxon         Find features associated with a taxon\n\nThe intention is for commands to make sense in English. The general\ncommand form is \"redbiom \", however this form is not strictly enforced.\n\nIn general, these commands are intended to be composable via Unix pipes.\nFor example:\n\n::\n\n    redbiom search metadata antibiotics | redbiom fetch samples --context <foo> --output my_table.biom\n\nExamples\n========\n\nSearch for samples by metadata\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, redbiom is setup to query against\n`Qiita <https://qiita.ucsd.edu>`__. First, let's search for some samples\nby metadata. Specifically, what we're going to do is identify what\nsamples exist in Qiita in which any of their sample metadata contains\nthe `stem <https://en.wikipedia.org/wiki/Stemming>`__ of the word beer.\nThis returns quite a few samples, so for the sake of the example, we're\nonly going to show the first 10 using ``head``:\n\n::\n\n    $ redbiom search metadata beer | head\n    10105.Ingredient.18\n    1976.Beer.286\n    1689.261\n    10105.Ingredient.19\n    1976.Beer.262\n    10105.Ingredient.23\n    1976.Beer.228\n    10105.Ingredient.17\n    10395.000041066\n    10105.Ingredient.24\n\n    $ redbiom search metadata beer | wc -l\n      70\n\nNow that we have some samples, let's pull out their sample data. Qiita\ncontains a huge amount of data, which are logically partitioned by the\nsample preparations and processing parameters -- these partitions are\ndenoted as **contexts** in redbiom. In order to pull out the data, we\nneed to specify the context to operate in. There are a lot of contexts,\nso let's filter to only those which are 16S and V4 using ``grep``. We're\nalso going to ``cut`` the first three columns of data as the fourth one\nis a voluminous description of the processing parameters. And last,\nlet's ``sort`` the results by the number of samples represented in the\ncontext. Unfortunately, the ``grep`` removes the column headers, so\nwe'll run a second summarize command and just grab the header:\n\n::\n\n    $ redbiom summarize contexts | cut -f 1,2,3 | grep 16S-v4 | sort -k 2 -n\n    Pick_closed-reference_OTUs-illumina-16S-v45-66f541  102 29598\n    Pick_closed-reference_OTUs-flx-16S-v4-66f541    116 4699\n    Pick_closed-reference_OTUs-ls454-16S-v4-66f541  145 8437\n    Pick_closed-reference_OTUs-titanium-16S-v46-66f541  214 3568\n    Pick_closed-reference_OTUs-titanium-16S-v4-66f541   800 14269\n    deblur-workflow-illumina-16S-v4-150nt-ae489c    24613   1932042\n    deblur-workflow-illumina-16S-v4-100nt-ae489c    60150   3738847\n    deblur-workflow-illumina-16S-v4-90nt-ae489c 65143   3162632\n    Pick_closed-reference_OTUs-illumina-16S-v4-66f541   89405   84828\n\n    $ redbiom summarize contexts | head -n 1\n    ContextName SamplesWithData FeaturesWithData    Description\n\nTo reduce typing later, let's just pick a context and store it as an\nenvironment variable:\n\n::\n\n    $ export ctx=Pick_closed-reference_OTUs-illumina-16S-v4-66f541\n\n...and now we can grab some data:\n\n::\n\n    $ redbiom search metadata beer | redbiom fetch samples --context $ctx --output example.biom\n    $ biom summarize-table -i example.biom | head\n    Num samples: 37\n    Num observations: 3653\n    Total count: 2205617\n    Table density (fraction of non-zero values): 0.091\n\n    Counts/sample summary:\n     Min: 1717.0\n     Max: 208223.0\n     Median: 59224.000\n     Mean: 59611.270\n\nWe probably also want to get the sample metadata:\n\n::\n\n    $ redbiom search metadata beer | redbiom fetch sample-metadata --output example.txt --context $ctx\n\nYou might note that the total number of samples found by the metadata\nsearch is not the same as the number of samples found by the sample data\nfetch. The sample information is distinct from the sample preparation,\nand data processing: just because there is sample information does not\nmean a given sample has (for instance) 16S V4 sequence data associated\nwith it.\n\nThe query structures for metadata are fairly permissive, and there are\nactually two types of queries that can be performed. The structure is as\nfollows: ``<set operations> where <value restrictions>``. The\n``<set operations>`` work by finding all samples with that contain a\ngiven word, which can be combined together. For the set queries, ``&``\nperforms an intersection of the sample IDs, ``|`` a union, and ``-`` a\ndifference:\n\n::\n\n    $ redbiom search metadata \"soil & europe where ph < 7\" | wc -l\n    5521\n\n**IMPORTANT**: just because a sample may have a word associated with it,\ndoes not mean that word is used as you may expect. In the example below,\nwe're counting the number of samples by their described ``sample_type``\nvalue. We are working to improve the search functionality, and it is\nimportant for users to scrutinize their results:\n\n::\n\n    $ redbiom search metadata \"soil & europe where ph < 7\" | redbiom summarize samples --category sample_type  | head\n    soil    1978\n    XXQIITAXX   1686\n    Soil    612\n    fresh water 519\n    peat    192\n    sebum   99\n    bodily fluid    81\n    belly   41\n    biofilm 39\n    ab_liq  38 \n\nSearch by feature\n~~~~~~~~~~~~~~~~~\n\nWe can also use redbiom to search for samples containing features of\ninterest. Let's operate off our example table from the metadata search\nabove. What we're going to do is find all samples in Qiita that contain\nany of the a handful of the feature IDs. In this particular example,\nlet's just grab 10 arbitrary IDs:\n\n::\n\n    $ biom table-ids -i example.biom --observations | head\n    4449525\n    4420570\n    471180\n    815819\n    4235445\n    1108951\n    519367\n    12364\n    4454153\n    4227110\n\n...and then let's pipe them back into redbiom to search for other\nsamples in our context which contain those same features:\n\n::\n\n    $ biom table-ids -i example.biom --observations | head | redbiom search features --context $ctx | wc -l\n       43133\n\n    $ biom table-ids -i example.biom --observations | head | redbiom search features --context $ctx | head\n    3759_10172.3338\n    2923_10317.000017653\n    2096_1716.McG.PAPrS17\n    2015_1034.CHB1\n    2150_755.SSFA.L1.D30.07.06.11.lane1.NoIndex.L001\n    2150_755.LSSF.ALPHA.D20.14.07.11.lane1.NoIndex.L001\n    26483_10317.000007237\n    3788_10119.MT.741\n    2112_1774.527.Skin.Puer\n    2102_1734.BD.ERD510\n\nSearch by taxon\n~~~~~~~~~~~~~~~\n\nOne thing you might want to do is find features based on taxonomy. We\ncan do this by searching for a taxon:\n\n::\n\n    $ redbiom search taxon g__Roseburia --context $ctx | wc -l\n         108\n\nWhat we get back are the feature IDs that are of that taxon. We can then\ntake those feature IDs and feed them back into redbiom. So for instance,\nlet's say we wanted to find all samples which contain a Roseburia\nfeature:\n\n::\n\n    $ redbiom search taxon g__Roseburia --context $ctx | redbiom search features --context $ctx | wc -l\n       37539\n\n**IMPORTANT** not all contexts necessarily have taxonomy, and taxonomy\nmay not make sense for a context (e.g., if it contains KEGG Orthologous\ngroup features).\n\nSummarizations\n~~~~~~~~~~~~~~\n\nWe found a lot of samples that contain Roseburia. That isn't too\nsurprising since Qiita contains a lot of fecal samples. How many? In\nthis next example, we're taking all of the feature IDs associated with\nRoseburia, then finding all of the samples which contain that taxon,\nfollowed by binning each sample by their ``sample_type`` category value,\nand finally we're taking just the top 10 entries. You can see that the\nmetadata are a bit noisy.\n\n::\n\n    $ redbiom search taxon g__Roseburia --context $ctx | redbiom search features --context $ctx | redbiom summarize samples --category sample_type | head\n    Stool   13251\n    stool   11416\n    XXQIITAXX   1029\n    tanker milk 984\n    biopsy  930\n    Floor   622\n    skin    615\n    Stool_Stabilizer    566\n    control blank   520\n    Mouth   420\n\nWe can still work through the noise though. Let's take our samples we\nfound that contain Roseburia, and only select the ones that appear to\nobviously be fecal. Instead of summarizing as we did in our last\nexample, we're going to \"select\" the samples in which ``sample_type`` is\neither \"Stool\" or \"stool\". (as this command is getting long, we'll break\nit up with \\\\):\n\n::\n\n    $ redbiom search taxon g__Roseburia --context $ctx | \\\n        redbiom search features --context $ctx | \\\n        redbiom select samples-from-metadata --context $ctx \"where sample_type in ('Stool', 'stool')\" | \\\n        wc -l\n       24667\n\nAnd last, we can grab the data for those samples. Fetching data for\n24,667 samples can take a few minutes, so for the purpose of the\nexample, let's just grab the ones associated with skin. Please note the\n\"ambiguity\" on the output, more in a second on that:\n\n::\n\n    $ redbiom search taxon g__Roseburia --context $ctx | \\\n        redbiom search features --context $ctx | \\\n        redbiom select samples-from-metadata --context $ctx \"where sample_type=='skin'\" | \\\n        redbiom fetch samples --context $ctx --output roseburia_example.biom\n    16 sample ambiguities observed. Writing ambiguity mappings to: roseburia_example.biom.ambiguities\n\nAmbiguities can arise if the same sample was processed multiple times as\nmight happen with a technical replicate. It is the same physical sample,\nbut it may have been processed multiple times. The ``.ambiguities`` file\nis in JSON and contains a mapping of what IDs map to the same sample.\n\nLoad some data (i.e., if you are running your own server)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo make use of this cache, we need to load things. Loading can be done\nin parallel. First, we'll load up metadata. This will create keys in\nRedis which describe all of the columns associated with a sample (e.g.,\n``metadata:categories:<sample_id>``, hash buckets for each category and\nsample combination (e.g., ``metadata:category:<category_name>`` as the\nhash and ``<sample_id>`` as the field), a set of all known categories\n(e.g., ``metadata:categories-represented``), and a set of all known\nsample IDs (e.g., ``metadata:samples-represented``):\n\n::\n\n    $ redbiom admin load-sample-metadata --metadata path/to/qiime/compat/mapping.txt\n\nredbiom supports one to many mappings between sample metadata and actual\nsample data. This is done as there may be multiple types of processing\nperformed on the same data (e.g., different nucleotide trims). Or, a\nphysical sample may have been run through multiple protocols (e.g., 16S,\nWGS, etc). So before we load any data, we need to create a context for\nthe data to be placed. The following action will add an entry into the\n``state:contexts`` hash bucket keyed by ``name`` and valued by\n``description``:\n\n::\n\n    $ redbiom admin create-context --name deblur-100nt --description \"16S V4 Caporaso et al data deblurred at 100nt\"\n\nNext, we'll load up associations between every single feature in a BIOM\ntable to all the samples its found in. This will create Redis sets and\ncan be accessed using keys of the form\n``<context_name>:samples:<feature_id>``. Note that we specify the\ncontext we're loading into.\n\n::\n\n    $ redbiom admin load-features --context deblur-100nt --table /path/to/biom/table.biom\n\nLast, let's load up all of the BIOM table data. We'll only store the\nnon-zero values, and we'll encode the sample data into something simple\nso that it goes in as just a string to Redis. Important: we only support\nstoring count data right now, not floating point. The keys created are\nof the form ``<context_name>:sample:<redbiom_id>``. To reduce space, we\nreindex the feature IDs as things like sOTUs tend to be very long in\nname. The mapping is stable over all tables loaded (ie the same feature\nhas the same index), and is stored under\n``<context_name>:feature-index``. Because we need to update the index,\nthis operation cannot be done in parallel however the code is setup with\na redis-based mutex so it's okay to queue up multiple loads.\n\n::\n\n    $ redbiom load-sample-data --context deblur-100nt --table /path/to/biom/table.biom\n\nCaveats\n=======\n\nRedbiom is still in heavy active development. At this time, there are\nstill some important caveats.\n\n-  Metadata values containing ``/`` characters cannot be represented the\n   forward slash is used to denote arguments with Webdis. At present,\n   these values are omitted. This is more generally a problem for dates\n   which have not been normalized into an ISO standard. See issue #9.\n-  Metadata values which appear to be null are not stored. The set of\n   values currently considered nulls are:\n\n   {'Not applicable', 'Unknown', 'Unspecified', 'Missing: Not\n   collected', 'Missing: Not provided', 'Missing: Restricted access',\n   'null', 'NULL', 'no\\_data', 'None', 'nan'}\n\n-  Sample IDs must be QIIME compatible.\n\nDesign\n======\n\nPython and testing\n~~~~~~~~~~~~~~~~~~\n\nThere are a few design decisions in place which deviate from some other\ntypical Python projects. First off, the majority of ``import``\\ s are\ndeferred. The motivating force here is to minimize overhead on load as\nto provide a responsive user interface -- deferred imports are the most\nstraight forward way to accomplish that goal.\n\nThe test harness is broken into multiple components, and are driven by a\n``Makefile``. This was done initially to be pragmatic as it was easier\nto write integration tests than unit tests for the ``click`` commands.\nThese tests can be found in ``test.sh`` which is composed of \"positive\"\ntests and ``test_failures.sh`` which is composed of \"negative\" tests.\nThe difference being that the positive tests will fail if any command\nresults in a nonzero exit status, whereas the negative tests expect a\nnonzero exit status (and really, the decision was to avoid unsetting\n\"-e\"). Additional tests which validate some of the Redis contents can be\nfound in ``redbiom/tests/test_rest.py``. These are neither unit tests\nnor integration tests, but simply exercise the behind-the-scenes REST\ninterface. Last, there are a suite of unit tests placed under\n``redbiom/tests/``.\n\nRedis data organization\n~~~~~~~~~~~~~~~~~~~~~~~\n\nBecause redbiom is currently in alpha, and its data model is subject to\nchange, we are holding off an indepth description of it. That being\nsaid, the API methods in general outline the Redis commands issued\nwithin their docstrings and can be used to guide interaction.\n\nThe key structures used are in the following forms:\n\n-  ``state:*`` redbiom state information such as context details\n-  ``metadata:category:<category>`` the samples and metadata values for\n   the category\n-  ``metadata:categories:<sample-id>`` the metadata categories known to\n   exist for a given sample\n-  ``metadata:text-search:<stem>`` the samples associated with a given\n   metadata value stem\n-  ``metadata:category-search:<stem>`` the categories associated with a\n   given stem\n-  ``metadata:samples-represented`` the samples that are represented by\n   the metadata\n-  ``<context>:sample:<redbiom-id>`` the sample data within a context\n-  ``<context>:feature:<feature-id>`` the feature data within a context\n-  ``<context>:samples-represented`` the samples within the context\n   which contain BIOM data\n-  ``<context>:sample-index`` a mapping between a sample ID and a\n   context-unique stable integer\n-  ``<context>:sample-index-inverted`` a mapping between a\n   context-unique stable integer and its associated sample ID\n-  ``<context>:features-represented`` the reatures represented within\n   the context\n-  ``<context>:feature-index`` a mapping between a feature ID and a\n   context-unique stable integer\n-  ``<context>:feature-index-inverted`` a mapping between a\n   context-unique stable integer and its associated feature ID\n-  ``<context>:taxonomy-children:<taxon>`` the children of a taxon\n-  ``<context>:taxonomy-parents`` child to parent taxon mappings\n\n.. |redbiom| image:: https://raw.githubusercontent.com/biocore/redbiom/master/logo.png\n.. |build-status| image:: https://travis-ci.org/biocore/redbiom.svg?branch=master",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/biocore/redbiom",
    "keywords": null,
    "license": "BSD-3-Clause",
    "maintainer": null,
    "maintainer_email": null,
    "name": "redbiom",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/redbiom/",
    "release_url": "https://pypi.org/project/redbiom/0.1.0/",
    "requires_python": null,
    "summary": "UNKNOWN",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9af6b21ae4879e6d78f8632e16502a0c",
          "sha256": "23677f724b32821352f732ddc0571e4ecd445e27a51d9228c4877129a02d9e50"
        },
        "downloads": 0,
        "filename": "redbiom-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9af6b21ae4879e6d78f8632e16502a0c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 65482,
        "upload_time": "2017-06-08T01:24:52",
        "url": "https://files.pythonhosted.org/packages/0d/a8/73ee12e7f0674a827bdc2b9c124021852d4d526ba1f07d8f76210ca63545/redbiom-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9af6b21ae4879e6d78f8632e16502a0c",
        "sha256": "23677f724b32821352f732ddc0571e4ecd445e27a51d9228c4877129a02d9e50"
      },
      "downloads": 0,
      "filename": "redbiom-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9af6b21ae4879e6d78f8632e16502a0c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 65482,
      "upload_time": "2017-06-08T01:24:52",
      "url": "https://files.pythonhosted.org/packages/0d/a8/73ee12e7f0674a827bdc2b9c124021852d4d526ba1f07d8f76210ca63545/redbiom-0.1.0.tar.gz"
    }
  ]
}