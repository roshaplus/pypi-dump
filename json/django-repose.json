{
  "info": {
    "author": "Matthew Schinckel",
    "author_email": "matt@schinckel.net",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "repose - a RESTful django framework\n===================================\n\nWhy repose? Why another framework?\n----------------------------------\n\nThis is not the first time I've written a framework for creating a\nRESTful interface from django. The first attempt, called ``rest_api``\nwas modelled on the django admin interface (``django.contrib.admin``),\nand was used in a work project extensively.\n\nThere were lots of bits I didn't like about it. Some of this I didn't\neven realize until I came across ``django-rest-framework``: which uses\ndjango forms for validation.\n\nI decided to take this even further.\n\nRepose is a form-based rest-api framework.\n\nThat is, the intention is that you will use django's forms to create and\nrender your views, even if they are JSON or XML.\n\nInstallation\n------------\n\nYou'll want to install repose into your virtualenv.\n\nUsage\n-----\n\nRepose uses the django class-based-views structure. In fact, the views\nwithin repose all inherit from ``django.views.generic.View``.\n\nRepose provides a handful of pre-built views, but the general idea is\nthat you will probably want to sub-class them.\n\nThe simplest way to use a repose view is to install it in your urls.py\nas follows:\n\n::\n\n    from repose.views import ModelDetailView\n\n    from models import ModelName\n\n    urlpatterns = patterns('',\n        url(r'^path/$', ModelDetailView.as_view(model=ModelName), name=\"modelname_detail\"),\n    )\n\nThis will automatically create a ModelForm (which also includes the 'id'\nfield, allowing the client to know about relationships without having to\nembed them).\n\nYou can supply your own Form, and/or View classes:\n\n::\n\n    from repose.views import ModelDetailView\n    from models import ModelName\n    from forms import ModelNameForm\n\n    class ModelNameView(ModelDetailView):\n        form = ModelNameForm\n\nYou may also override some specific methods in your View class to change\nbehaviour. The most common is likely to be ``get_queryset``, which\nenables you you change which subset of objects ``request.user`` is able\nto access. For the detail view classes, you can also override\n``get_object``.\n\nThere are some useful Mixins that do this type of thing in ``mixins.py``",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://bitbucket.org/schinckel/repose/",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-repose",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-repose/",
    "release_url": "https://pypi.org/project/django-repose/0.2.3/",
    "requires_python": null,
    "summary": "Form-based RESTful interface for Django sites.",
    "version": "0.2.3"
  },
  "releases": {
    "0.2.3": []
  },
  "urls": []
}