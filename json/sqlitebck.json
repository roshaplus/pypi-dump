{
  "info": {
    "author": "Piotr Husiaty\u0144ski",
    "author_email": "phusiatynski@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: C",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Database"
    ],
    "description": "================================================================\nSqlite3 backup function implementation for Python sqlite3 module\n================================================================\n\nSingle function that allows to save any sqlite3 database one to another. You\ncan use this for example for loading and dumping memory database (`:memory:`)\ninto file (alternative to `iter dump`_ functionality).\n\nSee the `Sqlite3 C API docs`_ for more info.\n\nThe same functionality is being provided by the `apsw backup`_ API, which\nprovides even more information about the copy process.\n\n\nBuild and installation\n======================\n\nNow you can build or install `sqlitebck` using distutils::\n\n    $ python setup.py build\n    $ python setup.py install\n\nYou can also intsall it, using the `pip` command::\n\n    $ pip install sqlitebck\n\n\n\nTests\n=====\n\nNothing big, just test basic functionality (make sure you have build the\n`sqlitebck` module)::\n\n    $ python tests.py\n\n\nUsage example\n=============\n\nBasic usage example - memory database saved into file::\n\n    >>> import sqlite3\n    >>> conn = sqlite3.connect(':memory:')\n    >>> curr = conn.cursor()\n\nCreate table and put there some data::\n\n    >>> curr.execute('CREATE TABLE foo (bar INTEGER)')\n    <sqlite3.Cursor object at 0xb73b2800>\n    >>> curr.execute('INSERT INTO foo VALUES (123)')\n    <sqlite3.Cursor object at 0xb73b2800>\n    >>> curr.close()\n    >>> conn.commit()\n    >>> import sqlitebck\n\nSave in memory database (conn) into file::\n\n    >>> conn2 = sqlite3.connect('/tmp/in_memory_sqlite_db_save.db')\n    >>> sqlitebck.copy(conn, conn2)\n    >>> conn.close()\n    >>> curr2 = conn2.cursor()\n\nCheck if data is in file database::\n\n    >>> curr2.execute('SELECT * FROM foo');\n    <sqlite3.Cursor object at 0xb73b2860>\n    >>> curr2.fetchall()\n    [(123,)]\n\nIf you want to load file database into memory, just call::\n\n    >>> sqlitebck.copy(conn2, conn)\n\n\n.. _iter dump: http://docs.python.org/release/2.6/library/sqlite3.html#sqlite3.Connection.iterdump\n.. _Sqlite3 C API docs: http://www.sqlite.org/c3ref/backup_finish.html\n.. _apsw backup: http://apidoc.apsw.googlecode.com/hg/backup.html\n",
    "docs_url": null,
    "download_url": "https://github.com/husio/python-sqlite3-backup/tarball/master#egg=sqlitebck-1.2.1",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/husio/python-sqlite3-backup",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "sqlitebck",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/sqlitebck/",
    "release_url": "https://pypi.org/project/sqlitebck/1.2.1/",
    "requires_python": null,
    "summary": "Sqlite3 online backup API implementation.",
    "version": "1.2.1"
  },
  "releases": {
    "1.0": [],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "be239f45c3b352c4b873ec90ffc3305a",
          "sha256": "3322f76c1bf29a16d5038b0a831504e1abdcac87c37a433f82467f570c78d769"
        },
        "downloads": 2489,
        "filename": "sqlitebck-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "be239f45c3b352c4b873ec90ffc3305a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3688,
        "upload_time": "2012-11-06T19:29:42",
        "url": "https://files.pythonhosted.org/packages/67/32/547cceb458d03ea49581ef674fd9d13295af66d90512a232bfb031e37b07/sqlitebck-1.1.tar.gz"
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d277e42c946001bf02938afb3413135e",
          "sha256": "df57adae9b82d76e86aa2a80457e990e44cdc10503013ac2a5548c46bbaa450f"
        },
        "downloads": 2061,
        "filename": "sqlitebck-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d277e42c946001bf02938afb3413135e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3976,
        "upload_time": "2012-11-06T22:19:54",
        "url": "https://files.pythonhosted.org/packages/67/22/1032e19a070b4a3b0472efb5131a16e2f7f1cce70a5f015fc2e83352fe53/sqlitebck-1.2.tar.gz"
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3b094b07e651196a57bee431841594ec",
          "sha256": "a870a0a3efcbf2d43d2074c01ae76611ea735ed9b5b578d92afa30edd70f6ed8"
        },
        "downloads": 6293,
        "filename": "sqlitebck-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3b094b07e651196a57bee431841594ec",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6414,
        "upload_time": "2012-11-08T20:06:17",
        "url": "https://files.pythonhosted.org/packages/37/e4/580395c41604134a0a21b41d8558df8b9896955e7a90697eec77224f6848/sqlitebck-1.2.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "3b094b07e651196a57bee431841594ec",
        "sha256": "a870a0a3efcbf2d43d2074c01ae76611ea735ed9b5b578d92afa30edd70f6ed8"
      },
      "downloads": 6293,
      "filename": "sqlitebck-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3b094b07e651196a57bee431841594ec",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6414,
      "upload_time": "2012-11-08T20:06:17",
      "url": "https://files.pythonhosted.org/packages/37/e4/580395c41604134a0a21b41d8558df8b9896955e7a90697eec77224f6848/sqlitebck-1.2.1.tar.gz"
    }
  ]
}