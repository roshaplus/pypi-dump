{
  "info": {
    "author": "Lele Gaifax",
    "author_email": "lele@metapensiero.it",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development",
      "Topic :: Utilities"
    ],
    "description": ".. -*- coding: utf-8 -*-\n.. :Project:   metapensiero.tool.tinject -- Automate creation of sources\n.. :Created:   Wed 13 Apr 2016 11:22:34 CEST\n.. :Author:    Lele Gaifax <lele@metapensiero.it>\n.. :License:   GNU General Public License version 3 or later\n.. :Copyright: \u00a9 2016, 2017 Lele Gaifax\n..\n\n===========================\n metapensiero.tool.tinject\n===========================\n\nAutomate creation of sources\n============================\n\n :author: Lele Gaifax\n :contact: lele@metapensiero.it\n :license: GNU General Public License version 3 or later\n\nThis is a simple tool that takes a YAML_ declarative configuration of `actions`, each\ndescribing the set of `steps` needed to accomplish it, and realizes one or more action possibly\ninterpolating a set of dynamic values inserted by the user.\n\nI've written it with the goal of taking away, as much as possible, the tediousness of creating\nnew content in a PatchDB_ setup.\n\nThere is a myriad of similar tools around, but most of them are either targeted at\nbootstrapping a hierarchy of files and directories (that is, a *one-shot* operation, for\nexample to create the *skeleton* of a new Python package, like cookiecutter_ to mention one) or\nbelong to a very specific domain (an example of this category may be ZopeSkel_).\n\nTo fulfill my goal I needed a tool able to perform an arbitrary list of operations, primarily:\n\n* create a directory\n* create a file with a particular content\n* change the content of an existing file\n\nIt obviously need to be *parametric* in almost every part: the pathnames and the actual content\nof the files must be determined by a *template* interpolated with a set of *values*. This is\nwhat Jinja2_ excels at. Since the values are mostly *volatile* (that is, almost all of them\nchange from one invocation to the other), I used the `whaaaaat`_ library to prompt the user.\n\n.. contents::\n\n.. _cookiecutter: https://pypi.python.org/pypi/cookiecutter\n.. _whaaaaat: https://pypi.python.org/pypi/whaaaaat\n.. _jinja2: http://jinja.pocoo.org/\n.. _patchdb: https://pypi.python.org/pypi/metapensiero.sphinx.patchdb\n.. _yaml: http://yaml.org/\n.. _zopeskel: https://pypi.python.org/pypi/ZopeSkel\n\n\nConfiguration\n-------------\n\nThe YAML configuration file may be composed by one or two *documents*: an optional *global\nsection* and a mandatory one containing the list of available `actions`, each of them being\nbasically a list of `steps`.\n\n\nGlobal section\n~~~~~~~~~~~~~~\n\nThe first *document* contains a set of optional global settings, in particular:\n\n* the options to instantiate the Jinja2 *environment*\n* a set of file *headers*, one for each kind of file\n* a list of *steps* to be performed at every invocation\n\n\nJinja2 environment\n++++++++++++++++++\n\nTo avoid clashes with the syntax used by Python's ``format()`` minilanguage, the `default\nenvironment settings`__ are the following:\n\nblock_start_string\n  The start of a block is ``<<``, instead of the default ``{%``\n\nblock_end_string\n  The end of a block is ``>>``, instead of the default ``%}``\n\nvariable_start_string\n  A variable is introduced by ``\u00ab``, instead of the classic ``{{``\n\nvariable_end_string\n  A variable ends with ``\u00bb``, and not with the classic ``}}``\n\nextensions\n  The extension ``jinja2_time.TimeExtension`` is automatically selected\n\nkeep_trailing_newline\n  By default the trailing newline is *not* discarded\n\nObviously any Jinja2 template defined by the configuration must adhere to these settings. If\nyou don't like them, or if you want define different ones, you can put an entry like the\nfollowing in the globals section of the configuration::\n\n  jinja:\n    block_start_string: \"[[\"\n    block_end_string: \"]]\"\n    variable_start_string: \"<<\"\n    variable_end_string: \">>\"\n\n__ http://jinja.pocoo.org/docs/dev/api/#jinja2.Environment\n\n\nFile headers\n++++++++++++\n\nThis is a map between a file *suffix* and a template that will be automatically injected in the\nrender's context as the variable ``header``. For example, should you need to generate a Pascal\nunit, you could insert the following::\n\n  headers:\n    pas: |\n      (*\u00ab \"*\" * 70 \u00bb\n       * Project: \u00abpackage_name\u00bb\n       * Created: \u00abtimestamp\u00bb\n       *\u00ab \"*\" * 70 \u00bb)\n\n\nInitial steps\n+++++++++++++\n\nThis is a list of steps to be executed unconditionally at startup. In particular it may be used\nto gather some values from arbitrary places to initialize the *answers*, to prompt the user for\na common set of values and to define custom *steps*. As an example, you could say::\n\n  steps:\n    - python:\n        script: |\n          import os, pwd, sys\n\n          class InitCustomAnswersWithoutPrompt(Step):\n              def __init__(self, state, config):\n                  super().__init__(state, config)\n                  self.name = config['name']\n                  self.value = config['value']\n\n              def announce(self):\n                  self.state.announce('*', \"Inject %s=%s\", self.name, self.value)\n\n              def __call__(self):\n                  return {self.name: self.value, python_version: sys.version}\n\n          register_step('initcustom', InitCustomAnswersWithoutPrompt)\n\n          myself = pwd.getpwuid(os.getuid())\n          state.answers['author_username'] = myself.pw_name\n          state.answers['author_fullname'] = myself.pw_gecos.split(',')[0]\n\n    ## Here you can execute the new kind of operation defined above\n\n    - initcustom:\n        name: \"myextravar\"\n        value: \"thevalue\"\n\n\nActions\n~~~~~~~\n\nAn *action* is identified by a unique name and carries an optional description, an optional set\nof prompts specific to the action and a list of one or more steps.\n\nThe following is a complete example::\n\n  create_top_level_setup_py:\n    description: Create top level setup.py\n\n    prompt:\n      - package_name:\n          message: The name of the Python package\n\n    steps:\n      - createdir:\n          directory: src\n\n      - createfile:\n          directory: src\n          filename: setup.py\n          content: |\n            # Hi, I'm the setup.py file for \u00abpackage_name\u00bb\n\n\nSteps\n~~~~~\n\nA *step* is some kind of *operation* that must be carried out. The name of the step identifies\nthe kind of operation, and its value is used to specify the needed parameters. So, in the\nexample above, we have two steps, ``createdir`` and ``createfile``, each requiring its specific\narguments map.\n\nA step may be conditionally skipped specifying an expression in its ``when`` setting: if\npresent, the operation will be performed only when the expression evaluates to true.\n\nThis is the list of available operation kinds:\n\nchangefile\n  Perform some quite simple changes to the content of an existing file.\n\n  Required configuration:\n\n    directory\n      The directory containing the file to be changed\n\n    filename\n      The name of the existing file within the given directory\n\n    changes\n      A list of tweaks: there are currently just three types, one that *add* some content\n      *before* a given *marker*, one to add the content *after* it and one that *insert* some\n      content *between* a marker *and* another marker keeping the block sorted\n\n  Example::\n\n    - changefile:\n        directory: src\n        filename: listofitems.txt\n        changes:\n          - add: \"\u00abnewitemname\u00bb\\n\"\n            before: \"\\n;; items delimiter\\n\"\n          - add: \"\u00abnewitemname\u00bb\\n\"\n            after: \"\\n;; reversed insertion order\\n\"\n\n    - changefile:\n        directory: src\n        filename: __init__.py\n        changes:\n          - insert: \"from .\u00abtable_name\u00bb import \u00abtable_name\u00bb\\n\"\n            between: \"\\n## \u2304\u2304\u2304 tinject import marker \u2304\u2304\u2304, please don't remove!\\n\"\n            and: \"\\n## \u2303\u2303\u2303 tinject import marker \u2303\u2303\u2303, please don't remove!\\n\"\n\ncreatedir\n  Create a directory and its parents.\n\n  Required configuration:\n\n    directory\n      The directory to be created\n\n  Example::\n\n    - createdir:\n        directory: src/my/new/package\n\ncreatefile\n  Create a new file with a particular content.\n\n  Required configuration:\n\n    directory\n      The directory contained the file to be created\n\n    filename\n      The name of the new file\n\n    content\n      A Jinja2 template that will be rendered and written to the new file\n\n  Example::\n\n    - createfile:\n        directory: \"\u00abdocs_dir\u00bb/\u00abschema_name\u00bb/tables\"\n        filename: \"\u00abtable_name\u00bb.sql\"\n        description: Structure of table \u00abschema_name\u00bb.\u00abtable_name\u00bb\n        ## The template may be either inline or included from an external file\n        content: !include 'table.sql'\n\nprompt\n  Ask the user for some information bits.\n\n  Required configuration: a list of dictionaries, each representing a `whaaaaat's question`.\n\n  Example::\n\n    - prompt:\n        - name_of_the_variable:\n            message: Tell me the value\n            default: \"default value\"\n\n        - different_kind_of_input:\n            message: Select the variant\n            kind: list\n            choices:\n              - Big\n              - Medium\n              - Small\n\npython\n  Execute an arbitrary Python script.\n\n  Required configuration:\n\n    script\n      The code of the script\n\n  The script is executed with a context containing the class ``Step``, the function\n  ``register_step`` and the global ``state`` of the program.\n\n  See the `initial steps`_ above for an example.\n\nrepeat\n  Repeat a list of substeps\n\n  Required configuration:\n\n    steps\n      The list of substeps to repeat\n\n  Optional configuration:\n\n    description\n      A message string, emitted at the start, if given\n\n    answers\n      The name of variable holding a list of answers, when one substep is a ``prompt``\n\n    count\n      The number of iterations\n\n    when\n      A Jinja boolean expression: if given it's evaluated once before the loop begins, that\n      gets executed only when it expression's value is true, otherwise no repetition happens at\n      all; the expression may refer to previous answers, even those collected while looping\n      (that is, the variable specified by the ``answers`` option)\n\n    until\n      A Jinja boolean expression: if given (and ``count`` is **not**), then the loop is\n      terminated when the condition is false\n\n    again_message\n      When neither ``count`` nor ``until`` are specified, the step will explicitly ask\n      confirmation about looping again, at the end of all substeps execution\n\n  See ``examples/repeat.yml`` for an example.\n\n\nSample session\n--------------\n\nCreate a new schema with a new table::\n\n  $ tinject --verbose apply examples/patchdb.yml new_schema new_table\n\n  * Execute Python script\n  [?] Author fullname (author_fullname): Lele Gaifax\n  [?] Author username (author_username): lele\n  [?] Author email (author_email): \u00abauthor_username\u00bb@example.com\n  [?] Fully qualified package name (package_name): package.qualified.name\n  [?] Timestamp (timestamp): << now 'local', '%a %d %b %Y %H:%M:%S %Z' >>\n  [?] Year (year): << now 'local', '%Y' >>\n  [?] Distribution license (license): GNU General Public License version 3 or later\n  [?] Copyright holder (copyright): \u00a9 \u00abyear\u00bb \u00abauthor_fullname\u00bb\n  [?] Root directory of Sphinx documentation (docs_dir): docs/database\n  [?] Root directory of SQLAlchemy model sources (model_dir): src/\u00abpackage_name|replace(\".\",\"/\")\u00bb\n\n  =====================\n   Create a new schema\n  =====================\n  [?] Name of the new schema (schema_name): public\n\n  * Create directory docs/database/public\n\n  * Create file docs/database/public/index.rst\n\n  * Create directory docs/database/public/tables\n\n  * Create file docs/database/public/tables/index.rst\n\n  * Create directory src/package/qualified/name/entities/public\n\n  * Create file src/package/qualified/name/entities/public/__init__.py\n\n  * Create directory src/package/qualified/name/tables/public\n\n  * Create file src/package/qualified/name/tables/public/__init__.py\n\n  ====================\n   Create a new table\n  ====================\n  [?] Schema name of the new table (schema_name): public\n  [?] Name of the new table (table_name): things\n  [?] Description of the new table (table_description): The table ``\u00abschema_name\u00bb.\u00abtable_name\u00bb`` contains...\n  [?] Name of the corresponding entity (entity_name): Thing\n\n  * Create file docs/database/public/tables/things.rst\n\n  * Create file docs/database/public/tables/things.sql\n\n  * Create file src/package/qualified/name/entities/public/thing.py\n\n  * Change file src/package/qualified/name/entities/public/__init__.py\n\n    - insert \u201cfrom .thing import T\u2026\u201d between \u201c## \u2304\u2304\u2304 tinject impo\u2026\u201d and \u201c## \u2303\u2303\u2303 tinject impo\u2026\u201d\n\n    - add \u201cmapper(Thing, t.thi\u2026\u201d after \u201c## \u2303\u2303\u2303 tinject impo\u2026\u201d\n\n  * Create file src/package/qualified/name/tables/public/things.py\n\n  * Change file src/package/qualified/name/tables/public/__init__.py\n\n    - insert \u201cfrom .things import \u2026\u201d between \u201c## \u2304\u2304\u2304 tinject impo\u2026\u201d and \u201c## \u2303\u2303\u2303 tinject impo\u2026\u201d\n\nVerify::\n\n  $ cat src/package/qualified/name/entities/public/__init__.py\n  # -*- coding: utf-8 -*-\n  # :Project:   package.qualified.name -- Entities in schema public\n  # :Created:   mer 15 giu 2016 13:24:54 CEST\n  # :Author:    Lele Gaifax <lele@example.com>\n  # :License:   GNU General Public License version 3 or later\n  # :Copyright: \u00a9 2016 Lele Gaifax\n  #\n\n  from sqlalchemy.orm import mapper\n\n  from ...tables import public as t\n\n  ## \u2304\u2304\u2304 tinject import marker \u2304\u2304\u2304, please don't remove!\n  from .thing import Thing\n\n  ## \u2303\u2303\u2303 tinject import marker \u2303\u2303\u2303, please don't remove!\n\n  mapper(Thing, t.things, properties={\n  })\n\nAdd another table::\n\n  $ tinject --verbose apply examples/patchdb.yml new_table\n\n  * Execute Python script\n  [?] Author fullname (author_fullname): Lele Gaifax\n  [?] Author username (author_username): lele\n  [?] Author email (author_email): \u00abauthor_username\u00bb@example.com\n  [?] Fully qualified package name (package_name): package.qualified.name\n  [?] Timestamp (timestamp): << now 'local', '%a %d %b %Y %H:%M:%S %Z' >>\n  [?] Year (year): << now 'local', '%Y' >>\n  [?] Distribution license (license): GNU General Public License version 3 or later\n  [?] Copyright holder (copyright): \u00a9 \u00abyear\u00bb \u00abauthor_fullname\u00bb\n  [?] Root directory of Sphinx documentation (docs_dir): docs/database\n  [?] Root directory of SQLAlchemy model sources (model_dir): src/\u00abpackage_name|replace(\".\",\"/\")\u00bb\n\n  ====================\n   Create a new table\n  ====================\n  [?] Schema name of the new table (schema_name): public\n  [?] Name of the new table (table_name): thangs\n  [?] Description of the new table (table_description): The table ``\u00abschema_name\u00bb.\u00abtable_name\u00bb`` contains...\n  [?] Name of the corresponding entity (entity_name): Thang\n\n  * Create file docs/database/public/tables/thangs.rst\n\n  * Create file docs/database/public/tables/thangs.sql\n\n  * Create file src/package/qualified/name/entities/public/thang.py\n\n  * Change file src/package/qualified/name/entities/public/__init__.py\n\n    - insert \u201cfrom .thang import T\u2026\u201d between \u201c## \u2304\u2304\u2304 tinject impo\u2026\u201d and \u201c## \u2303\u2303\u2303 tinject impo\u2026\u201d\n\n    - add \u201cmapper(Thang, t.tha\u2026\u201d after \u201c## \u2303\u2303\u2303 tinject impo\u2026\u201d\n\n  * Create file src/package/qualified/name/tables/public/thangs.py\n\n  * Change file src/package/qualified/name/tables/public/__init__.py\n\n    - insert \u201cfrom .thangs import \u2026\u201d between \u201c## \u2304\u2304\u2304 tinject impo\u2026\u201d and \u201c## \u2303\u2303\u2303 tinject impo\u2026\u201d\n\nVerify::\n\n  $ cat src/package/qualified/name/entities/public/__init__.py\n  # -*- coding: utf-8 -*-\n  # :Project:   package.qualified.name -- Entities in schema public\n  # :Created:   mer 15 giu 2016 13:24:54 CEST\n  # :Author:    Lele Gaifax <lele@example.com>\n  # :License:   GNU General Public License version 3 or later\n  # :Copyright: \u00a9 2016 Lele Gaifax\n  #\n\n  from sqlalchemy.orm import mapper\n\n  from ...tables import public as t\n\n  ## \u2304\u2304\u2304 tinject import marker \u2304\u2304\u2304, please don't remove!\n  from .thang import Thang\n  from .thing import Thing\n\n  ## \u2303\u2303\u2303 tinject import marker \u2303\u2303\u2303, please don't remove!\n\n  mapper(Thang, t.thangs, properties={\n  })\n\n  mapper(Thing, t.things, properties={\n  })\n\n\n.. -*- coding: utf-8 -*-\n\nChanges\n-------\n\n0.7 (2017-06-02)\n~~~~~~~~~~~~~~~~\n\n- Use whaaaaat__ instead of inquirer__: being based on `prompt_toolkit`__ it offers a better\n  user experience and should be usable also under Windows\n\n__ https://pypi.python.org/pypi/whaaaaat\n__ https://pypi.python.org/pypi/inquirer\n__ https://pypi.python.org/pypi/prompt_toolkit\n\n\n0.6 (2017-03-22)\n~~~~~~~~~~~~~~~~\n\n- Minor tweak, no externally visible changes\n\n\n0.5 (2016-11-07)\n~~~~~~~~~~~~~~~~\n\n- All steps support a \u201cwhen\u201d condition\n\n\n0.4 (2016-06-16)\n~~~~~~~~~~~~~~~~\n\n- New changefile tweak to insert a line in a sorted block\n\n\n0.3 (2016-05-22)\n~~~~~~~~~~~~~~~~\n\n- New ability to repeat a list of substeps\n\n\n0.2 (2016-05-19)\n~~~~~~~~~~~~~~~~\n\n- First release on PyPI\n\n\n0.1 (2016-04-26)\n~~~~~~~~~~~~~~~~\n\n- Initial effort\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/lele/metapensiero.tool.tinject",
    "keywords": "YAML",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "metapensiero.tool.tinject",
    "platform": "",
    "project_url": "https://pypi.org/project/metapensiero.tool.tinject/",
    "release_url": "https://pypi.org/project/metapensiero.tool.tinject/0.7/",
    "requires_python": "",
    "summary": "Automate creation of sources",
    "version": "0.7"
  },
  "releases": {
    "0.0": [],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f2f15f1794bb6101488e65114afb76c0",
          "sha256": "047e73d167cf61d157da1d5dd38e125b2dd8752f6a0cc2f8fac295cf3ad27c30"
        },
        "downloads": 453,
        "filename": "metapensiero.tool.tinject-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f2f15f1794bb6101488e65114afb76c0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16764,
        "upload_time": "2016-04-26T07:55:33",
        "url": "https://files.pythonhosted.org/packages/5e/c6/a15e2a32081ee8c2da856c57da030e801ae96735cf16011bc1ceab7868c0/metapensiero.tool.tinject-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "62588840ab035c358f0546fa8381cae2",
          "sha256": "a776d541102305dc118f4297d10861416667034f3b81ca61f8ebd358d82e88e7"
        },
        "downloads": 112,
        "filename": "metapensiero.tool.tinject-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "62588840ab035c358f0546fa8381cae2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16835,
        "upload_time": "2016-05-19T19:11:22",
        "url": "https://files.pythonhosted.org/packages/5d/5b/31b8003f49e8e715725c952d56d8c3ef615a4a10794efaea896751cd39d3/metapensiero.tool.tinject-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "64c012aeb0b5f5ad77a316b8c7256b91",
          "sha256": "19586411a31a057f61690a04c83cf835aed5abfafd5e93827530cc3517df95ef"
        },
        "downloads": 120,
        "filename": "metapensiero.tool.tinject-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "64c012aeb0b5f5ad77a316b8c7256b91",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17730,
        "upload_time": "2016-05-22T14:30:38",
        "url": "https://files.pythonhosted.org/packages/bf/f0/af4ea5a813cc20fc55d0ec075140eac3bf0ba8c367d02f42bce96b7ef6e9/metapensiero.tool.tinject-0.3.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4787bd148a8c56996599d7b14507f979",
          "sha256": "009840fa8e6242d6a37de82c9659168040d73854367d38adcbf57e933126d10a"
        },
        "downloads": 138,
        "filename": "metapensiero.tool.tinject-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4787bd148a8c56996599d7b14507f979",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19082,
        "upload_time": "2016-06-16T09:22:35",
        "url": "https://files.pythonhosted.org/packages/df/d2/ae108492ae2ce12f030b5e383df945a54442fdb24b803c43de875eba57f0/metapensiero.tool.tinject-0.4.tar.gz"
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "45a62bbed28865e5ecf6b28d13494185",
          "sha256": "8b0a96b71246af79544fe23c5079935672d43ffdd1af0fcf3b31998472c98b5f"
        },
        "downloads": 59,
        "filename": "metapensiero.tool.tinject-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "45a62bbed28865e5ecf6b28d13494185",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19383,
        "upload_time": "2016-11-07T22:38:33",
        "url": "https://files.pythonhosted.org/packages/87/3c/56a2d3b78800406de85815d42a9b45491325e79ae24ac88ec4002328f1d2/metapensiero.tool.tinject-0.5.tar.gz"
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "05a028117eb2e27daf7ae8082dde417b",
          "sha256": "c46515bfeb0a20b04f21db7e26093edbf4c4ca57ad7b4e841285fe292f81706a"
        },
        "downloads": 105,
        "filename": "metapensiero.tool.tinject-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "05a028117eb2e27daf7ae8082dde417b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19482,
        "upload_time": "2017-03-22T21:09:45",
        "url": "https://files.pythonhosted.org/packages/62/13/2236f7410dec911a58722385c680ed0be92f2d16303685c5b272b12d8d5a/metapensiero.tool.tinject-0.6.tar.gz"
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "902b24d207add10836250bb143b1eb6d",
          "sha256": "a2fff289f237865f05829c5b13f2f471abd496b106dd9e5c96e185ea32a8b6a5"
        },
        "downloads": 0,
        "filename": "metapensiero.tool.tinject-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "902b24d207add10836250bb143b1eb6d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19565,
        "upload_time": "2017-06-02T16:35:12",
        "url": "https://files.pythonhosted.org/packages/0f/f8/a621ed930475d91a80823e5eb7c431ce9e5a964f88e56b39dbdd31feb88c/metapensiero.tool.tinject-0.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "902b24d207add10836250bb143b1eb6d",
        "sha256": "a2fff289f237865f05829c5b13f2f471abd496b106dd9e5c96e185ea32a8b6a5"
      },
      "downloads": 0,
      "filename": "metapensiero.tool.tinject-0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "902b24d207add10836250bb143b1eb6d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 19565,
      "upload_time": "2017-06-02T16:35:12",
      "url": "https://files.pythonhosted.org/packages/0f/f8/a621ed930475d91a80823e5eb7c431ce9e5a964f88e56b39dbdd31feb88c/metapensiero.tool.tinject-0.7.tar.gz"
    }
  ]
}