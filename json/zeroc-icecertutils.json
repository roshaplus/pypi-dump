{
  "info": {
    "author": "ZeroC, Inc.",
    "author_email": "info@zeroc.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.0",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Security",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "The Ice Certificate Utilities package includes the iceca command line utility and a small Python library to allow creating certificates for Ice clients or servers.\n\nIt relies on PyOpenSSL for the creation of certificates. The Java KeyStore files are created with the keytool utility. The Java BouncyCastle provider is required to create BouncyCastle KeyStore files.\n\nInstallation\n============\n\nWe recommend using ``pip`` or ``easy_install`` to install this package.\n\nPackage Contents\n================\n\nThe iceca command line utility\n------------------------------\n\nThe iceca utility provides a small certificate authority to allow creating certificates for use with Ice client and servers. It supports commands for initialization of the CA database, certification creation and export.\n\nUsage:\n::\n\n    usage: iceca [--verbose --help --capass <pass>] init create list show export\n\n    The iceca command manages a small certificate authority to create and sign\n    certificates for Ice clients or servers.\n\n    Commands:\n    init     Initialize the certificate authority database\n    create   Create and sign a certificate/key pair\n    list     List the created certificates\n    show     Show a given certificate\n    export   Export a given certificate\n\n\nUsage of the ``init`` subcommand:\n\n::\n\n    usage: init [--overwrite --no-capass]\n\n    Initializes the certificate authority database.\n\n    Options:\n    --overwrite    Overwrite the existing CA database\n    --no-capass    Don't protect the CA with a password\n\nUsage of the ``create`` subcommand:\n\n::\n\n    usage: create [--ip=<ip>] [--dns=<dns>] <alias> [<common-name>]\n\n    Creates and signs a certificate. A certificate is identified by its alias. If no\n    common name is specified, the alias is used as the common name.\n\n    Options:\n    --ip    Optional IP subject alternative name field\n    --dns   Optional DNS subject alternative name field\n\n\nUsage of the ``list`` subcommand:\n\n::\n\n    usage: list\n\n    List aliases for the certificates created with this CA.\n\nUsage of the ``show`` subcommand:\n\n::\n\n    usage: show <alias>\n\n    Print out the certificate associated to the given alias.\n\nUsage of the ``export`` subcommand:\n\n::\n\n    usage: export [--password <password>] [--alias <alias>] path\n\n    Export a certificate from the CA to the given file path. If --alias isn't\n    specified, the filename indicates which certificate to export. The file\n    extension also specifies the export format for the certificate. Supported\n    formats are:\n\n     PKCS12 (.p12, .pfx)\n     PEM (.pem)\n     DER (.der, .cer, .crt)\n     JKS (.jks, requires keytool to be in the PATH)\n     BKS (.bks, requires keytool and support for the BouncyCastle provider)\n\n    Options:\n    --password  The password to use for protecting the exported certificate\n    --alias     The alias of the certificate to export\n\n\nThe IceCertUtils module\n-----------------------\n\nHere's an example on how to create a server and client certificate with the IceCertUtils module:\n\n::\n\n    import IceCertUtils\n\n    #\n    # Create the certicate factory\n    #\n    factory = IceCertUtils.CertificateFactory(cn = \"My CA\")\n\n    # Get the CA certificate and save it to PEM/DER and JKS files\n    factory.getCA().save(\"cacert.pem\").save(\"cacert.der\").save(\"cacert.jks\")\n\n    #\n    # Create a client certificate\n    #\n    client = factory.create(\"client\", cn = \"Client\")\n\n    # Save the client certificate to the PKCS12 format\n    client.save(\"client.p12\")\n\n    # Save the client certificate to the JKS format and also include the CA\n     certificate in the keystore with the alias \"cacert\"\n    client.save(\"client.jks\", caalias=\"cacert\")\n\n    #\n    # Create the server certificate, include IP and DNS subject alternative names.\n    #\n    server = factory.create(\"server\", cn = \"Server\", ip=\"127.0.0.1\", dns=\"server.foo.com\")\n\n    # Save the server certificate to the PKCS12 format\n    server.save(\"server.p12\")\n\n    # Save the server certificate to the JKS format\n    server.save(\"server.jks\", caalias=\"cacert\")\n\n    # Save the client and server certificates to the BKS format. If the BKS\n    # provider is not installed this will throw.\n    try:\n        client.save(\"client.bks\", caalias=\"cacert\")\n        server.save(\"server.bks\", caalias=\"cacert\")\n    except Exception as ex:\n        print(\"warning: couldn't generate BKS certificates:\\n\" + str(ex))\n\n    factory.destroy()\n",
    "docs_url": null,
    "download_url": "https://github.com/zeroc-ice/icecertutils/archive/v1.0.1.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/zeroc-ice/icecertutils",
    "keywords": "ice,certificate,ca,ssl",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "zeroc-icecertutils",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/zeroc-icecertutils/",
    "release_url": "https://pypi.org/project/zeroc-icecertutils/1.0.1/",
    "requires_python": null,
    "summary": "ZeroC Ice certificate utilities",
    "version": "1.0.1"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "61bd2b00ce2b3d83c203773fe73fa372",
          "sha256": "b8999817fdc38184ae13381585575a3b65d9b4969d7be3c60a880e68502a2848"
        },
        "downloads": 2296,
        "filename": "zeroc-icecertutils-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "61bd2b00ce2b3d83c203773fe73fa372",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15157,
        "upload_time": "2015-06-10T09:33:57",
        "url": "https://files.pythonhosted.org/packages/85/80/6af94257b3683f58d6b1010edaa1a4c4d1092d25ebcca2cdb12a35ea05b3/zeroc-icecertutils-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e385fd06e95bbbaee495de54021a79d4",
          "sha256": "f6e0c068c8326ef687b069e6b2f90714e0914e1a2c02f285e8f1001200da3303"
        },
        "downloads": 2438,
        "filename": "zeroc-icecertutils-1.0.1-1.tar.gz",
        "has_sig": false,
        "md5_digest": "e385fd06e95bbbaee495de54021a79d4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15171,
        "upload_time": "2015-09-03T09:47:10",
        "url": "https://files.pythonhosted.org/packages/23/7e/5c3dc3360f8bbc6c7ab14a28912d79a16f1bc8f620db3e06eee2e6980259/zeroc-icecertutils-1.0.1-1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e385fd06e95bbbaee495de54021a79d4",
        "sha256": "f6e0c068c8326ef687b069e6b2f90714e0914e1a2c02f285e8f1001200da3303"
      },
      "downloads": 2438,
      "filename": "zeroc-icecertutils-1.0.1-1.tar.gz",
      "has_sig": false,
      "md5_digest": "e385fd06e95bbbaee495de54021a79d4",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 15171,
      "upload_time": "2015-09-03T09:47:10",
      "url": "https://files.pythonhosted.org/packages/23/7e/5c3dc3360f8bbc6c7ab14a28912d79a16f1bc8f620db3e06eee2e6980259/zeroc-icecertutils-1.0.1-1.tar.gz"
    }
  ]
}