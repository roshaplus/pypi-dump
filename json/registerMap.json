{
  "info": {
    "author": "Russell Smiley",
    "author_email": "im.russell.smiley@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Build Tools",
      "Topic :: System :: Hardware"
    ],
    "description": "registerMap\n===========\n\nA Python 3 framework for creating and maintaining register maps used for\nintegrated circuit design and embedded software development.\n\nMain Features\n-------------\n\n-  define a register map by the *relationships* and *order* of registers\n   and bit fields\n-  generate address of registers and modules automatically from\n   relationships\n-  constrain registers and modules by size or address\n-  automatically manage registers that span multiple memory units\n-  automatically generate a series of modules from a template/reference\n   module\n-  arbitrary number of memory unit bits (but constant across the\n   register map)\n-  arbitrary number of address bits (but constant across the register\n   map)\n-  automatically avoid allocating register/module addresses to page\n   registers\n\nInstallation\n------------\n\nThe simplest way to acquire ``registerMap`` is using ``pip``.\n\n.. code:: bash\n\n    pip install registerMap\n\nGetting Started\n---------------\n\nIn this framework a register map is an ordered list of modules. A module\nis an ordered list of registers and a register is made up of bit fields.\n\nA memory space defines the fundamental properties of the register map\nsuch as the number of bits in addresses, the base address of the\nregister map and the number of bits in memory units.\n\nThe order of the modules defines how module addresses are generated. So\nthe first module in the list would probably get assigned the base\naddress of the register map memory space and the next module might get\nthe next available address. The words 'probably' and 'might' are used\nhere because there are other factors such as the total span of the\nmodule, page registers and constraints applied to modules and registers\nthat can change what addresses are available for assignment. More on\nthat later.\n\nA module is a way of grouping registers together. When there is more\nthan one module, the groups will probably have some functional\nassociation of the registers, for example, a set of registers associated\nwith a particular output, or a set of read only registers for reporting\nstatus.\n\nA register is made up of bit fields. The order of bit fields is not\ndefined because the bits to which each bit field is assigned must be\nexplicitly defined. A register, or perhaps more accurately, the total\nspan of its bit fields may also span multiple memory units. This enables\nsupport for data that is larger than the bit size of a single memory\nunit; eg. If the memory unit size is 8 bits, then it may still be\ndesirable to store a 16, 32 or 64 bit number for the function of the\nintegrated circuit.\n\nThe primary source format of the register map is YAML, so one way to get\nstarted is by defining your register map directly in a YAML text file.\nThe other way is to import the Python library and start working on the\nregister map dataset directly in a Python terminal or script.\n\nGetting started using a YAML file\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUsing a text editor you can define the YAML structure of your register\nmap relatively easily. It gets a little easier if you use an editor that\nunderstands YAML, such as `Notepad++ <https://notepad-plus-plus.org/>`__\nor an IDE such as `PyCharm <https://www.jetbrains.com/pycharm/>`__.\n\nThe example below shows a register map skeleton that defines some\nproperties of the memory space, along with a summary and description of\nthe register map. The modules section is left blank for now.\n\nIn any register map you must have at least one module.\n\n.. code:: yaml\n\n    registerMap: {\n      # A memorySpace is not optional\n      memorySpace: {\n        # but all the parameters are optional.\n        # Default: 0x0\n        baseAddress: 0x1000\n        # Default: None\n        pageSize: None\n        # Default: 32\n        addressBits: 48\n        # Default: 8\n        memoryUnitBits: 16\n      }\n      summary: 'A short summary of the register map'\n      description: 'A longer description of the register map'\n      modules: [\n      ]\n    }\n\nWhen you are done and have saved your YAML data to a file, your YAML\nregister map can be loaded into Python.\n\n.. code:: python\n\n    import registerMap\n    myMap = registerMap.load( 'registermap.yml' )\n\nLet's test that the register map properties are loaded as expected.\n\n.. code:: python\n\n    assert myMap.memory.addressBits == 48\n    assert myMap.memory.memoryUnitBits == 16\n    assert myMap.memory.baseAddress == 0x1000\n\nGetting started using Python\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can start creating your register map directly in Python. You just\nneed to import the ``registerMap`` library and declare a ``RegisterMap``\ninstance. At this point you will have the default settings for the\nmemory space and no modules defined.\n\n.. code:: python\n\n    import registerMap\n    myMap = registerMap.RegisterMap()\n\n    assert myMap.memory.addressBits == 32\n    assert myMap.memory.memoryUnitBits == 8\n    assert myMap.memory.baseAddress == 0x0\n    assert len( myMap[ 'modules' ] ) == 0\n\nNow that the register map is defined, it can be saved.\n\n.. code:: python\n\n    registerMap.save( myMap, 'registermap.yml' )",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://gitlab.com/blueskyjunkie/registerMap",
    "keywords": "registermap buildtools development hardware digital register",
    "license": "GPLV3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "registerMap",
    "platform": "",
    "project_url": "https://pypi.org/project/registerMap/",
    "release_url": "https://pypi.org/project/registerMap/0.1.0/",
    "requires_python": "",
    "summary": "YAML based register map definitions for digital hardware and embedded software development",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "161e80fe204f272a6c0df3becd1baeb9",
          "sha256": "d315b2c5c34655c089c49522fe14fe94c9b7ba37156fdf227c8745ad9fd7d0f0"
        },
        "downloads": 10,
        "filename": "registerMap-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "161e80fe204f272a6c0df3becd1baeb9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48968,
        "upload_time": "2017-02-25T03:04:08",
        "url": "https://files.pythonhosted.org/packages/40/bf/05a95d49866073be4577b24081cccd20dc1bdbc50b1ded0cc3cd0af0ae3b/registerMap-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "161e80fe204f272a6c0df3becd1baeb9",
        "sha256": "d315b2c5c34655c089c49522fe14fe94c9b7ba37156fdf227c8745ad9fd7d0f0"
      },
      "downloads": 10,
      "filename": "registerMap-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "161e80fe204f272a6c0df3becd1baeb9",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 48968,
      "upload_time": "2017-02-25T03:04:08",
      "url": "https://files.pythonhosted.org/packages/40/bf/05a95d49866073be4577b24081cccd20dc1bdbc50b1ded0cc3cd0af0ae3b/registerMap-0.1.0.tar.gz"
    }
  ]
}