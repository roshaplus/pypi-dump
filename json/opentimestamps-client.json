{
  "info": {
    "author": "Peter Todd",
    "author_email": "pete@petertodd.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Security :: Cryptography"
    ],
    "description": "# OpenTimestamps Client\n\nCommand-line tool to create and validate timestamp proofs with the\nOpenTimestamps protocol, using the Bitcoin blockchain as a timestamp notary.\nAdditionally this package provides timestamping of PGP signed Git commits, and\nverification of timestamps for both Git commits as a whole, and individual\nfiles within a Git repository.\n\n## Requirements\n\n* Python3\n\nWhile OpenTimestamps can *create* timestamps without a local Bitcoin node, to\n*verify* timestamps you need a local Bitcoin Core node (a pruned node is fine).\n\n\n## Installation\n\nEither via PyPi:\n\n    $ pip3 install opentimestamps-client\n\nor from source:\n\n    $ python3 setup.py install\n\nOn Debian (Stretch) you can install the necessary system dependencies with:\n\n    sudo apt-get install python3 python3-dev python3-pip3 python3-setuptools python3-wheel\n\n## Usage\n\nCreating a timestamp:\n\n    $ ./ots stamp README.md\n    Submitting to remote calendar https://a.pool.opentimestamps.org\n    Submitting to remote calendar https://b.pool.opentimestamps.org\n    Submitting to remote calendar https://a.pool.eternitywall.com\n\nYou'll see that `README.md.ots` has been created with the aid of three remote\ncalendars. We can't verify it immediately however:\n\n    $ ./ots verify README.md.ots\n    Assuming target filename is 'README.md'\n    Calendar https://alice.btc.calendar.opentimestamps.org: Pending confirmation in Bitcoin blockchain\n    Calendar https://bob.btc.calendar.opentimestamps.org: Pending confirmation in Bitcoin blockchain\n    Calendar https://finney.calendar.eternitywall.com: Pending confirmation in Bitcoin blockchain\n\nIt takes a few hours for the timestamp to get confirmed by the Bitcoin\nblockchain; we're not doing one transaction per timestamp.\n\nHowever, the client does come with a number of example timestamps which you can\ntry verifying immediately. Here's a complete timestamp that can be verified\nlocally:\n\n    $ ./ots verify examples/hello-world.txt.ots\n    Assuming target filename is 'examples/hello-world.txt'\n    Success! Bitcoin attests data existed as of Thu May 28 15:41:18 2015 UTC\n\nIncomplete timestamps are ones that require the assistance of a remote calendar\nto verify; the calendar provides the path to the Bitcoin block header:\n\n    $ ./ots verify examples/incomplete.txt.ots\n    Assuming target filename is 'examples/incomplete.txt'\n    Got 1 new attestation(s) from https://alice.btc.calendar.opentimestamps.org\n    Success! Bitcoin attests data existed as of Wed Sep  7 05:56:43 2016 UTC\n\nThe client maintains a cache of timestamps it obtains from remote calendars, so\nif you verify the same file again it'll use the cache:\n\n    $ ./ots verify examples/incomplete.txt.ots\n    Assuming target filename is 'examples/incomplete.txt'\n    Got 1 attestation(s) from cache\n    Success! Bitcoin attests data existed as of Wed Sep  7 05:56:43 2016 UTC\n\nYou can also upgrade an incomplete timestamp, which adds the path to the\nBitcoin blockchain to the timestamp itself:\n\n    $ ./ots upgrade examples/incomplete.txt.ots\n    Got 1 attestation(s) from cache\n    Success! Timestamp is complete\n\nFinally, you can get information on a timestamp, including the actual\ncommitment operations and attestations in it:\n\n    $ ./ots info examples/two-calendars.txt.ots\n    File sha256 hash: efaa174f68e59705757460f4f7d204bd2b535cfd194d9d945418732129404ddb\n    Timestamp:\n    append 839037eef449dec6dac322ca97347c45\n    sha256\n     -> append 6b4023b6edd3a0eeeb09e5d718723b9e\n        sha256\n        prepend 57d46515\n        append eadd66b1688d5574\n        verify PendingAttestation('https://alice.btc.calendar.opentimestamps.org')\n     -> append a3ad701ef9f10535a84968b5a99d8580\n        sha256\n        prepend 57d46516\n        append 647b90ea1b270a97\n        verify PendingAttestation('https://bob.btc.calendar.opentimestamps.org')\n\n### Timestamping and Verifying PGP Signed Git Commits\n\nSee `doc/git-integration.md`\n\n### Timestamping Git Trees\n\nRead the source code: `python-opentimestamps/opentimestamps/core/git.py`\n\nThis functionality needs more peer review before using it can be recommended.\n\n## Privacy Security\n\nTimestamping inherently records potentially revealing metadata: the current\ntime. If you create multiple timestamps in close succession it's quite likely\nthat an adversary will be able to link those timestmaps as related simply on\nthe basis of when they were created; if you make use of the timestamp multiple\nfiles in one command functionality (`./ots stamp <file1> <file2> ... <fileN>`)\nmost of the commitment operations in the timestamps themselves will be\nidentical, providing an adversary very strong evidence that the files were\ntimestamped by the same person. Finally, the REST API used to communicate with\nremote calendars doesn't currently attempt to provide any privacy, although it\ncould be modified to do so in the future (e.g. with prefix filters).\n\nFile contents *are* protected with nonces: a remote calendar learns nothing\nabout the contents of anything you timestamp as it only ever receives an opaque\nand meaningless digest. Equally, if multiple files are timestamped at once,\neach file is protected by an individual nonce; the timestamp for one file\nreveals nothing about the contents of another file timestamped at the same\ntime.\n\n## Compatibility Expectations\n\nOpenTimestamps is alpha software, so it's possible that timestamp formats may\nhave to change in the future in non-backward-compatible ways. However it will\nalmost certainly be possible to write conversion tools for any\nnon-backwards-compatible changes.\n\nIt's very likely that the REST protocol used to communicate with remote\ncalendars will change, including in backwards incompatible ways. If this\nhappens you'll just need to upgrade your client; existing timestamps will be\nunaffected.\n\n## Calendar Mirroring\n\nAs a short-term measure, the raw calendar data for the three calendar servers\nin operation at this time can be downloaded directly. See\nthe `contrib/calendar-mirror.sh` script for details.\n\n## Development\n\nUse the setuptools development mode:\n\n    python3 setup.py develop --user\n\n\n## Known Issues\n\n* Displaying Bitcoin timestamps down to the second is false precision, and\n  misleading. But rounding off to the nearest day is over-doing it in the other\n  direction. See https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2016-September/013120.html\n  for more information on this issue.\n\n* Need unit tests for the client.\n\n* Git tree re-hashing support fails on certain filenames with invalid unicode\n  encodings; this appears to be due to bugs in the underlying GitPython\n  library. As a work-around, you may find the `convmv` tool useful to find and\n  rename these files.\n\n* Git annex support only works with the SHA256 and SHA256E backends.\n\n* Errors in the Bitcoin RPC communication aren't handled in a user-friendly\n  way.\n\n* Not all Python platforms check SSL certificates correctly. This means that on\n  some platforms, it would be possible for a MITM attacker to intercept HTTPS\n  connections to remote calendars. That said, it shouldn't be possible for such\n  an attacker to do anything worse than give us a timestamp that fails\n  validation, an easily fixed problem.\n\n* ots-git-gpg-wrapper doesn't yet check for you if the timestamp on the git commit\n  makes sense.\n\n* `bitcoin` package can cause issues, with ots confusing it with the\n  required `python-bitcoinlib` package. A symptom of this issue is the\n  message `AttributeError: module 'bitcoin' has no attribute\n  'SelectParams'`. To remedy this issue, one must do the following:\n\n```bash\n# uninstall the packages through pip\npip3 uninstall bitcoin python-bitcoinlib\n\n# remove the bitcoin directory manually from your dist-packages folder\nrm /usr/local/lib/python3.5/dist-packages/bitcoin\n\n# reinstall the required package\npip3 install python-bitcoinlib\n```",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/opentimestamps/opentimestamps-client",
    "keywords": "cryptography timestamping bitcoin",
    "license": "LGPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "opentimestamps-client",
    "platform": "",
    "project_url": "https://pypi.org/project/opentimestamps-client/",
    "release_url": "https://pypi.org/project/opentimestamps-client/0.5.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Command-line tool to create and verify OpenTimestamps proofs",
    "version": "0.5.0"
  },
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0517e528187c76f2ab365cdd458f6764",
          "sha256": "915233a36e1a86acc3a17736318946b674070ffb9c66106bba745a0e78d3ef88"
        },
        "downloads": 0,
        "filename": "opentimestamps_client-0.5.0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "0517e528187c76f2ab365cdd458f6764",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 24905,
        "upload_time": "2017-08-26T01:26:41",
        "url": "https://files.pythonhosted.org/packages/bc/6b/d77bfcd300abda2aeadedcb96a8d2ed37217363b78c3a8879e6bc6ff48df/opentimestamps_client-0.5.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "919af8705841658aa26075e4c97fdd38",
          "sha256": "4931548d697d1555fc2c14ba54a1456225dde003b22afbc2dfeab981f26ee838"
        },
        "downloads": 0,
        "filename": "opentimestamps-client-0.5.0.tar.gz",
        "has_sig": true,
        "md5_digest": "919af8705841658aa26075e4c97fdd38",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17469,
        "upload_time": "2017-08-26T01:26:34",
        "url": "https://files.pythonhosted.org/packages/25/90/6f05e89cc438bbfa7622aa81654a839953774dd1ef3ad18ef0d32f1585a0/opentimestamps-client-0.5.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0517e528187c76f2ab365cdd458f6764",
        "sha256": "915233a36e1a86acc3a17736318946b674070ffb9c66106bba745a0e78d3ef88"
      },
      "downloads": 0,
      "filename": "opentimestamps_client-0.5.0-py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "0517e528187c76f2ab365cdd458f6764",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 24905,
      "upload_time": "2017-08-26T01:26:41",
      "url": "https://files.pythonhosted.org/packages/bc/6b/d77bfcd300abda2aeadedcb96a8d2ed37217363b78c3a8879e6bc6ff48df/opentimestamps_client-0.5.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "919af8705841658aa26075e4c97fdd38",
        "sha256": "4931548d697d1555fc2c14ba54a1456225dde003b22afbc2dfeab981f26ee838"
      },
      "downloads": 0,
      "filename": "opentimestamps-client-0.5.0.tar.gz",
      "has_sig": true,
      "md5_digest": "919af8705841658aa26075e4c97fdd38",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 17469,
      "upload_time": "2017-08-26T01:26:34",
      "url": "https://files.pythonhosted.org/packages/25/90/6f05e89cc438bbfa7622aa81654a839953774dd1ef3ad18ef0d32f1585a0/opentimestamps-client-0.5.0.tar.gz"
    }
  ]
}