{
  "info": {
    "author": "Sergi Rubio",
    "author_email": "srubio@cells.es",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Other Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "=====\nVACCA\n=====\n\nDESCRIPTION\n===========\n\nVACCA is a versatile Control System Navigator tool built on top of the Taurus framework.\nIt was developed by Sergi Rubio (srubio@cells.es) as the VACuum Control Application for ALBA Synchrotron.\n\nhttp://www.tango-controls.org/Members/srubio/vacca\n\nIt provides:\n\n * Enhanced control system navigation, interactive browsing between synoptic, device tree, panels and device searching tools.\n * A customizable interface, allowing user groups to have different views and configure and save their own perspectives.\n * Control over tango devices and other tango services like Archiving, Astor/Starter or Tango DB properties.\n * Filters at Device/Attribute/Command level, to display only the devices/attributes users are interested in.\n\nSince Vacca 2.0 the application is build on top of taurus-gui. Its default setup includes 4 initial perspectives combining tree, synoptic, device panel, attribute grids, taurus trends and some common vacuum panels like pressure/temperature profiles.\n\nLINKS / DEPENDENCIES\n====================\n\nAll dependencies and User Manual are available from www.tango-controls.org:\n\nTango\nPyTango\nTaurus\nFandango\n\nINSTALLING:\n===========\n\nCopy vacca folder to a folder in your PYTHONPATH\nCopy ./vaccagui script to a folder in your PATH\nCopy default.py.ini to default.py and edit your default options (follow comments in the file)\n\nFor a fast way to test VACCA, try the ELINAC example:\n\n * https://github.com/sergirubio/VACCA/blob/master/examples/elinac/README.rst\n\nCONTENTS:\n=========\n\n * bin/vaccagui : a launcher script\n * vaccagui : an application definition for taurusgui\n\n  * vaccagui.__init__ : it loads the contents of vacca.config module\n  * vaccagui/default.ini : 4 perspectives by default (from showing all widgets to minimal for small screens)\n\n * vacca : the main module\n\nCUSTOMIZING:\n============\n\nThe idea is to have general config in default.py (ORGANIZATION_LOGO, EXTRA_APPS, ...) and use another file to customize to your beamline/system.\nCopy default.py to my_beamline.py; modify variables like JDRAW_FILE, COMPOSER, GRID, DEVICE, GAUGES, ...\nRemove all variables you don't need to modify (if ORGANIZATION_LOG is the same for all do not have it declared in many files)\n\nRUNNING:\n========\n\nLaunch the gui as:\n ./vaccagui path/to/mybeamline.py \n\nPath to your file must be absolute or relative from \"vacca\" module location.\nIf no config file is passed as argument the application will try to open $TANGO_HOST.py if exists (lazy deployment).\n\n----\n\nCreating a new default.ini:\n\nTo create a new default file for QSettings you have to remember that models must be clean up for Tree, Gauges and Profile widgets; if not the default file will not behave properly.\n",
    "docs_url": "https://pythonhosted.org/Vacca/",
    "download_url": null,
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "UNKNOWN",
    "keywords": null,
    "license": "GPL-3.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "Vacca",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/Vacca/",
    "release_url": "https://pypi.org/project/Vacca/4.2/",
    "requires_python": null,
    "summary": "Viewer and Commander Control Application for Tango Control System.",
    "version": "4.2"
  },
  "releases": {
    "4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1bf0815ca164cfeed396805b3608f543",
          "sha256": "45f7f95dabaf81e7c6ec13ad5491f74c30d675f2a6312d39b3acc76c28f929c6"
        },
        "downloads": 223,
        "filename": "Vacca-4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1bf0815ca164cfeed396805b3608f543",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 643595,
        "upload_time": "2016-11-28T11:37:16",
        "url": "https://files.pythonhosted.org/packages/e9/d1/70c843c19ac7cee72fedff83361f7c43c47d6fd489b6f66ee42972c7e26c/Vacca-4.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1bf0815ca164cfeed396805b3608f543",
        "sha256": "45f7f95dabaf81e7c6ec13ad5491f74c30d675f2a6312d39b3acc76c28f929c6"
      },
      "downloads": 223,
      "filename": "Vacca-4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "1bf0815ca164cfeed396805b3608f543",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 643595,
      "upload_time": "2016-11-28T11:37:16",
      "url": "https://files.pythonhosted.org/packages/e9/d1/70c843c19ac7cee72fedff83361f7c43c47d6fd489b6f66ee42972c7e26c/Vacca-4.2.tar.gz"
    }
  ]
}