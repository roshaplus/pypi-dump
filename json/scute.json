{
  "info": {
    "author": "Olivier philippon",
    "author_email": "olivier@rougemine.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Scute\n=====\n\nScute is a small Dependency Injection Container for Python 3.6+, ported from PHP's `Pimple`_, that consists\nof just one file and one class (about 80 lines of code).\n\nThe test suite, and even this README file, are basically a copy-n-paste of Pimple's ones, with only a light adaptation to Python.\nSo all kudos go to `Fabien Potencier`_ and to Pimple contributors!\n\n\nInstall it from PyPi::\n\n    $ pip install scute\n\nThen import it in your code, and you're good to go::\n\n    from scute import Container\n\nCreating a container is a matter of instating the ``Container`` class::\n\n    container = Container()\n\nAs many other dependency injection containers, Scute is able to manage two\ndifferent kind of data: *services* and *parameters*.\n\nDefining Parameters\n-------------------\n\nDefining a parameter is as simple as using the Scute instance as an array::\n\n    # define some parameters\n    container['cookie_name'] = 'SESSION_ID'\n    container['session_storage_class'] = 'SessionStorage'\n\nDefining Services\n-----------------\n\nA service is an object that does something as part of a larger system.\nExamples of services: Database connection, templating engine, mailer. Almost\nany object could be a service.\n\nServices are defined by callables (lambda, functions or callable classes) that return an instance of an\nobject::\n\n    // #define some services\n    define session_storage(c: Container):\n        session_storage_class_ref = getattr(importlib.import_module('app'), c['session_storage_class'])\n        return session_storage_class_ref(c['cookie_name'])\n    container['session_storage'] = session_storage\n\n    container['session'] = labmda c: new Session(c['session_storage'])\n\nNotice that the function has access to the current container\ninstance, allowing references to other services or parameters.\n\nAs objects are only created when you get them, the order of the definitions\ndoes not matter, and there is no performance penalty.\n\nUsing the defined services is also very easy::\n\n    # get the session object\n    session = container['session']\n\n    # the above call is roughly equivalent to the following code:\n    # storage = app.SessionStorage('SESSION_ID')\n    # session = Session(storage)\n\nDefining Factory Services\n------------------------\n\nBy default, each time you get a service, Scute returns the same instance of it.\nIf you want a different instance to be returned for all calls, wrap your callable with the ``factory()`` method::\n\n    container['session'] = container.factory(lambda c: new Session(c['session_storage'])\n\nNow, each call to ``container['session']`` returns a new instance of the session.\n\nProtecting Parameters\n---------------------\n\nBecause Scute sees callables as service definitions, you need to\nwrap anonymous functions with the ``protect()`` method to store them as\nparameter::\n\n    container['random'] = container.protect(lambda: randrange(10000))\n\nModifying services after creation\n---------------------------------\n\nIn some cases you may want to modify a service definition after it has been\ndefined. You can use the ``extend()`` method to define additional code to\nbe run on your service just after it is created::\n\n    container['mail'] = lambda c: MailjetApi(user = c['email.user'], password = ['email.password'])\n\n    def extended_email(mail, c: Container):\n        mail.set_from(c['mail.default_from'])\n        return mail\n    container.extend('mail', extended_email)\n\nThe first argument is the name of the object, the second is a callable that\ngets access to the object instance and the container. The return value is\na service definition, so you need to re-assign it on the container.\n\nFetching the service creation function\n--------------------------------------\n\nWhen you access an object, Scute automatically calls the callable (function, lambda, callable class...)\nthat you defined, which creates the service object for you. If you want to get\nraw access to this function, you can use the ``raw()`` method::\n\n    session_function = $container.raw('session')\n\n\n.. _Fabien Potencier: http://fabien.potencier.org/\n.. _Pimple: https://github.com/silexphp/Pimple/tree/1.1\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/DrBenton/scute",
    "keywords": "Dependency injection",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scute",
    "platform": "",
    "project_url": "https://pypi.org/project/scute/",
    "release_url": "https://pypi.org/project/scute/1.0.0/",
    "requires_dist": [
      "pytest; extra == 'test'"
    ],
    "requires_python": ">=3.6",
    "summary": "A small Dependency Injection Container, ported from PHP's Pimple",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "02d1e7abc2ba23cc56cb2bf248bd7cf9",
          "sha256": "3375c5160754251580363d70b90f54997d04eafc95e9cbceabf890a5202f3df2"
        },
        "downloads": 0,
        "filename": "scute-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "02d1e7abc2ba23cc56cb2bf248bd7cf9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 5414,
        "upload_time": "2017-09-20T22:11:10",
        "url": "https://files.pythonhosted.org/packages/71/b0/74669af023831ea370f2aaae5a69021cde5523901aeab334edf58d008490/scute-1.0.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "46c6b22c251a36fc4e29d99f9719e4dd",
          "sha256": "4bbe30f7994de0c413430b68bb772285ea2bd1467a7bab901eb6eb87c6614973"
        },
        "downloads": 0,
        "filename": "scute-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "46c6b22c251a36fc4e29d99f9719e4dd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3690,
        "upload_time": "2017-09-20T22:11:13",
        "url": "https://files.pythonhosted.org/packages/b5/0d/bb22280f897d51250e7194d4418203d6339a5a2d123478c47bf61b23516e/scute-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "02d1e7abc2ba23cc56cb2bf248bd7cf9",
        "sha256": "3375c5160754251580363d70b90f54997d04eafc95e9cbceabf890a5202f3df2"
      },
      "downloads": 0,
      "filename": "scute-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "02d1e7abc2ba23cc56cb2bf248bd7cf9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 5414,
      "upload_time": "2017-09-20T22:11:10",
      "url": "https://files.pythonhosted.org/packages/71/b0/74669af023831ea370f2aaae5a69021cde5523901aeab334edf58d008490/scute-1.0.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "46c6b22c251a36fc4e29d99f9719e4dd",
        "sha256": "4bbe30f7994de0c413430b68bb772285ea2bd1467a7bab901eb6eb87c6614973"
      },
      "downloads": 0,
      "filename": "scute-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "46c6b22c251a36fc4e29d99f9719e4dd",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3690,
      "upload_time": "2017-09-20T22:11:13",
      "url": "https://files.pythonhosted.org/packages/b5/0d/bb22280f897d51250e7194d4418203d6339a5a2d123478c47bf61b23516e/scute-1.0.0.tar.gz"
    }
  ]
}