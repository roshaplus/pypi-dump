{
  "info": {
    "author": "mongkok",
    "author_email": "domake.io@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "Django GraphQL Extensions\n=========================\n\n|Pypi| |Wheel| |Build Status| |Codecov| |Code Climate|\n\nA collection of custom extensions for `Django GraphQL`_\n\n.. _Django GraphQL: https://github.com/graphql-python/graphene-django\n\n\nDependencies\n------------\n\n* Python \u2265 3.4\n* Django \u2265 1.11\n\n\nInstallation\n------------\n\nInstall last stable version from Pypi.\n\n.. code:: sh\n\n    pip install django-graphql-extensions\n\n\nAuthentication\n--------------\n\n- ``@login_required``\n- ``@staff_member_required``\n- ``@permission_required``\n\n.. code:: python\n\n    from django.contrib.auth import get_user_model\n\n    import graphene\n    from graphql_extensions.auth.decorators import (\n        login_required, staff_member_required\n    )\n\n\n    class Query(graphene.ObjectType):\n        me = graphene.Field(UserType)\n        users = graphene.List(UserType)\n\n        @login_required\n        def resolve_me(self, info, **kwargs):\n            return info.context.user\n\n        @staff_member_required\n        def resolve_users(self, info, **kwargs):\n            return get_user_model().objects.all()\n\n\nErrors\n------\n\nReturning appropriate **error responses** and **masking** error messages sent to the client.\n\nConfigure your ``GraphQLView``.\n\n.. code:: python\n\n    from django.urls import include, path\n\n    from graphql_extensions.views import GraphQLView\n\n    urlpatterns = [\n        path('', GraphQLView.as_view(), name='index'),\n    ]\n\n**Exceptions**\n\n.. code:: python\n\n    from graphql_extensions import exceptions\n\n\n    raise exceptions.GraphQLError()\n    raise exceptions.NotAuthenticated()\n    raise exceptions.PermissionDenied()\n    raise exceptions.ValidationError()\n    raise exceptions.NotFound()\n\n\n**Payload**\n\n.. code:: js\n\n    {\n      \"errors\": [\n        {\n          \"type\": \"NotFound\",\n          \"message\": \"GraphQL object not found\",\n          \"code\": \"notFound\",\n          \"data\": {\n            \"id\": 1\n          },\n          \"path\": [\"updateGroup\"],\n          \"operation\": \"mutation\",\n          \"trace\": [\n            \"  File \\\"/app/schema.py\\\", line 30, in mutate\\n    group = cls.update(info, **kwargs)\\n\",\n            \"  File \\\"/graphql_extensions/mixins.py\\\", line 32, in update\\n    instance = cls.get_object(context, id=id)\\n\",\n            \"  File \\\"/graphql_extensions/mixins.py\\\", line 21, in get_object\\n    raise exceptions.NotFound(**kwargs)\\n\"\n          ]\n        }\n      ],\n      \"data\": {\n        \"updateGroup\": null\n      }\n    }\n\n\nMixins\n------\n\n**Pre-built mutations** that provide for commonly used patterns.\n\n- ``RetrieveMixin``\n- ``UpdateMixin``\n\n.. code:: python\n\n    from django.contrib.auth.models import Group\n\n    import graphene\n    from graphene_django import DjangoObjectType\n    from graphql_extensions import mixins\n    from graphql_extensions.auth.decorators import login_required\n\n\n    class GroupType(DjangoObjectType):\n\n        class Meta:\n            model = Group\n\n\n    class UpdateGroup(mixins.UpdateMixin, graphene.Mutation):\n        group = graphene.Field(GroupType)\n\n        class Arguments:\n            id = graphene.Int(required=True)\n            name = graphene.String()\n\n        @classmethod\n        def get_queryset(cls, info, **kwargs):\n            return info.context.user.groups.all()\n\n        @classmethod\n        @login_required\n        def mutate(cls, root, info, **kwargs):\n            group = cls.update(info, **kwargs)\n            return cls(group=group)\n\n\nTesting\n-------\n\nHelper classes to improve support for **testing**.\n\n- ``GraphQLTestCase``\n\n\n.. code:: python\n\n    from graphql_extensions.testcases import GraphQLTestCase\n\n\n    class UsersTests(GraphQLTestCase):\n\n        def test_create_user(self):\n            query = '''\n            mutation CreateUser($username: String!, $password: String!) {\n              createUser(username: $username, password: $password) {\n                user {\n                  id\n                }\n              }\n            }'''\n\n            username = 'test'\n            password = 'dolphins'\n\n            response = self.client.execute(query, {\n                'username': username,\n                'password': password,\n            })\n\n            self.assertFalse(response.errors)\n            self.assertTrue(response.data['user'])\n\n            self.client.login(username=username, password=password)\n\n            query = '''\n            {\n              me {\n                username\n              }\n            }'''\n\n            response = self.client.execute(query)\n            self.assertEqual(response.data['me']['username'], username)\n\n\nTypes\n-----\n\nCustom *Graphene* **types**.\n\n- ``Email``\n- ``Timestamp``\n- ``Choices``\n- ``CamelJSON``\n- ...\n\n\nRelay\n-----\n\nComplete support for `Relay`_.\n\n.. _Relay: https://facebook.github.io/relay/\n\n\n.. |Pypi| image:: https://img.shields.io/pypi/v/django-graphql-extensions.svg\n   :target: https://pypi.python.org/pypi/django-graphql-extensions\n\n.. |Wheel| image:: https://img.shields.io/pypi/wheel/django-graphql-extensions.svg\n   :target: https://pypi.python.org/pypi/django-graphql-extensions\n\n.. |Build Status| image:: https://travis-ci.org/flavors/django-graphql-extensions.svg?branch=master\n   :target: https://travis-ci.org/flavors/django-graphql-extensions\n\n.. |Codecov| image:: https://img.shields.io/codecov/c/github/flavors/django-graphql-extensions.svg\n   :target: https://codecov.io/gh/flavors/django-graphql-extensions\n\n.. |Code Climate| image:: https://api.codeclimate.com/v1/badges/6ca5da3b6a51d35ea7d6/maintainability\n   :target: https://codeclimate.com/github/flavors/django-graphql-extensions\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/flavors/django-graphql-extensions/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-graphql-extensions",
    "platform": "",
    "project_url": "https://pypi.org/project/django-graphql-extensions/",
    "release_url": "https://pypi.org/project/django-graphql-extensions/0.0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A collection of custom extensions for Django GraphQL",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3bbfc2d4c7b6e193a86794a7a38c697b",
          "sha256": "4e17ebe95b3c441048576c64f5f9a5a073bb8e4cdf1b1fecc73874f4783f9456"
        },
        "downloads": -1,
        "filename": "django_graphql_extensions-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3bbfc2d4c7b6e193a86794a7a38c697b",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 15523,
        "upload_time": "2018-01-21T09:41:39",
        "url": "https://files.pythonhosted.org/packages/5c/ed/69445e1513187f886b5c460a1377dfa9c5745101fffdeecc9deda88fb2b4/django_graphql_extensions-0.0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "af567af74fd47462e138bee5bd6dd181",
          "sha256": "853d36a89bcb832701438701ee705b74c796280ef0033341e7c3b9810b200a81"
        },
        "downloads": -1,
        "filename": "django-graphql-extensions-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "af567af74fd47462e138bee5bd6dd181",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9342,
        "upload_time": "2018-01-21T09:41:12",
        "url": "https://files.pythonhosted.org/packages/88/e3/e8fbad65f1d7b068050b7efea7539d6cef969daa483c791474960dd89a31/django-graphql-extensions-0.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "3bbfc2d4c7b6e193a86794a7a38c697b",
        "sha256": "4e17ebe95b3c441048576c64f5f9a5a073bb8e4cdf1b1fecc73874f4783f9456"
      },
      "downloads": -1,
      "filename": "django_graphql_extensions-0.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3bbfc2d4c7b6e193a86794a7a38c697b",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "size": 15523,
      "upload_time": "2018-01-21T09:41:39",
      "url": "https://files.pythonhosted.org/packages/5c/ed/69445e1513187f886b5c460a1377dfa9c5745101fffdeecc9deda88fb2b4/django_graphql_extensions-0.0.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "af567af74fd47462e138bee5bd6dd181",
        "sha256": "853d36a89bcb832701438701ee705b74c796280ef0033341e7c3b9810b200a81"
      },
      "downloads": -1,
      "filename": "django-graphql-extensions-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "af567af74fd47462e138bee5bd6dd181",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9342,
      "upload_time": "2018-01-21T09:41:12",
      "url": "https://files.pythonhosted.org/packages/88/e3/e8fbad65f1d7b068050b7efea7539d6cef969daa483c791474960dd89a31/django-graphql-extensions-0.0.1.tar.gz"
    }
  ]
}