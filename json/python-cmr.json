{
  "info": {
    "author": "Justin Deal, Matt Isnor",
    "author_email": "deal.justin@gmail.com, isnor.matt@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Python CMR\n==========\n\n.. image:: https://travis-ci.org/jddeal/python-cmr.svg?branch=master\n    :target: https://travis-ci.org/jddeal/python-cmr\n\nPython CMR is an easy to use wrapper to the NASA EOSDIS\n`Common Metadata Repository API <https://cmr.earthdata.nasa.gov/search/>`_. This package aims to make\nquerying the API intuitive and less error-prone by providing methods that will preemptively check\nfor invalid input and handle the URL encoding the CMR API expects.\n\nGetting access to NASA's earth science metadata is as simple as this:\n\n::\n\n    >>> from cmr import CollectionQuery, GranuleQuery\n\n    >>> api = CollectionQuery()\n    >>> collections = api.archive_center(\"LP DAAC\").keyword(\"AST_L1*\").get(5)\n\n    >>> for collection in collections:\n    >>>   print(collection[\"short_name\"])\n    AST_L1A\n    AST_L1AE\n    AST_L1T\n\n    >>> api = GranuleQuery()\n    >>> granules = api.short_name(\"AST_L1T\").point(-112.73, 42.5).get(3)\n\n    >>> for granule in granules:\n    >>>   print(granule[\"title\"])\n    SC:AST_L1T.003:2149105822\n    SC:AST_L1T.003:2149105820\n    SC:AST_L1T.003:2149155037\n\n\nInstallation\n============\n\nTo install from pypi:\n\n::\n\n    $ pip install python-cmr\n\n\nTo install from github, perhaps to try out the dev branch:\n\n::\n\n    $ git clone https://github.com/jddeal/python-cmr\n    $ cd python-cmr\n    $ pip install .\n\n\nExamples\n========\n\nThis library is broken into two classes, `CollectionQuery` and `GranuleQuery`. Each of these\nclasses provide a large set of methods used to build a query for CMR. Not all parameters provided\nby the CMR API are covered by this version of python-cmr.\n\nThe following methods are available to both collecton and granule queries:\n\n::\n\n    # search for granules matching a specific product/short_name\n    >>> api.short_name(\"AST_L1T\")\n\n    # search for granules matching a specific version\n    >>> api.version(\"006\")\n\n    # search for granules at a specific longitude and latitude\n    >>> api.point(-112.73, 42.5)\n\n    # search for granules in an area bound by a box (lower left lon/lat, upper right lon/lat)\n    >>> api.bounding_box(-112.70, 42.5, -110, 44.5)\n\n    # search for granules in a polygon\n    >>> api.polygon((-100, 40), (-90, 40), (-95, 38), (-100, 40))\n\n    # search for granules in a line\n    >>> api.line((-100, 40), (-90, 40), (-95, 38))\n\n    # search for granules in an open or closed date range\n    >>> api.temporal(\"2016-10-10T01:02:00Z\", \"2016-10-12T00:00:30Z\")\n    >>> api.temporal(\"2016-10-10T01:02:00Z\", None)\n    >>> api.temporal(datetime(\"2016-10-10T01:02:00Z\"), datetime.now())\n\n    # only include granules available for download\n    >>> api.downloadable()\n\n    # only include granules that are unavailable for download\n    >>> api.online_only()\n\n\nGranule searches support these methods (in addition to the shared methods above):\n\n::\n\n    # search for a granule by its unique ID\n    >>> api.granule_ur(\"SC:AST_L1T.003:2150315169\")\n\n    # search for granules from a specific orbit\n    >>> api.orbit_number(5000)\n\n    # filter by the day/night flag\n    >>> api.day_night_flag(\"day\")\n\n    # filter by cloud cover percentage range\n    >>> api.cloud_cover(25, 75)\n\n    # filter by specific instrument or platform\n    >>> api.instrument(\"MODIS\")\n    >>> api.platform(\"Terra\")\n\n\nCollection searches support these methods (in addition to the shared methods above):\n\n::\n\n    # search for collections from a specific archive center\n    >>> api.archive_center(\"LP DAAC\")\n\n    # case insensitive, wildcard enabled text search through most collection fields\n    >>> api.keyword(\"M*D09\")\n\n\nTo inspect and retreive results from the API, the following methods are available:\n\n::\n\n    # inspect the number of results the query will return without downloading the results\n    >>> print(api.hits())\n\n    # retrieve 100 granules\n    >>> granules = api.get(100)\n\n    # retrieve 25,000 granules\n    >>> granules = api.get(25000)\n\n    # retrieve all the granules possible for the query\n    >>> granules = api.get_all()  # this is a shortcut for api.get(api.hits())\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jddeal/python-cmr",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-cmr",
    "platform": "",
    "project_url": "https://pypi.org/project/python-cmr/",
    "release_url": "https://pypi.org/project/python-cmr/0.2/",
    "requires_python": "",
    "summary": "Python wrapper to the NASA Common Metadata Repository (CMR) API.",
    "version": "0.2"
  },
  "releases": {
    "0.1b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b01a9a57c276725f139e69a7d7413b2d",
          "sha256": "ce7efe803e0811efd8b80a6eafd056fd28aeb7e0302140d1bd7d74bffdae7374"
        },
        "downloads": 0,
        "filename": "python_cmr-0.1b1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b01a9a57c276725f139e69a7d7413b2d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 8898,
        "upload_time": "2017-05-25T02:07:49",
        "url": "https://files.pythonhosted.org/packages/93/a1/acd6c6e98e04f9949eef0520578c6121c6ababe8aae3c15a24129fbee98a/python_cmr-0.1b1-py2.py3-none-any.whl"
      }
    ],
    "0.1b2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b52a3458a24aaa2b5f3b01c89ec9e19d",
          "sha256": "2e9c9efc28c092f822d8527f77b7dd7d6268198bec718f8a6bbd685bc07322cc"
        },
        "downloads": 0,
        "filename": "python_cmr-0.1b2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b52a3458a24aaa2b5f3b01c89ec9e19d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 8888,
        "upload_time": "2017-05-25T02:23:53",
        "url": "https://files.pythonhosted.org/packages/b5/2d/8808aac303d7b8d27b1f84b8f81582e7171f36bfc90149c56efe00b368fe/python_cmr-0.1b2-py2.py3-none-any.whl"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f250f01cd9a347484ca8aa9397a8fc66",
          "sha256": "2c32978fc36f7621029d202f717dc4e277025b1d7c4678a15e66ca63727c9f0c"
        },
        "downloads": 0,
        "filename": "python_cmr-0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f250f01cd9a347484ca8aa9397a8fc66",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 9527,
        "upload_time": "2017-05-26T02:04:53",
        "url": "https://files.pythonhosted.org/packages/d2/f8/cfda9acbb4bd412a560187cd86470b33b092f2601f2021cd7d7149a0cec3/python_cmr-0.2-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f250f01cd9a347484ca8aa9397a8fc66",
        "sha256": "2c32978fc36f7621029d202f717dc4e277025b1d7c4678a15e66ca63727c9f0c"
      },
      "downloads": 0,
      "filename": "python_cmr-0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f250f01cd9a347484ca8aa9397a8fc66",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 9527,
      "upload_time": "2017-05-26T02:04:53",
      "url": "https://files.pythonhosted.org/packages/d2/f8/cfda9acbb4bd412a560187cd86470b33b092f2601f2021cd7d7149a0cec3/python_cmr-0.2-py2.py3-none-any.whl"
    }
  ]
}