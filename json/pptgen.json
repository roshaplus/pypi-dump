{
  "info": {
    "author": "Sanjay Yadav",
    "author_email": "sanjay.yadav@gramener.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Office/Business :: Office Suites",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "PPTGen\r\n======\r\n\r\nPPTGen is a library and tool to make PowerPoint presentations from data.\r\n\r\nInstallation\r\n------------\r\n\r\n    pip install pptgen\r\n\r\nUsage\r\n-----\r\n\r\nPPTGen lets you modify the contents of a PowerPoint presentation based on data.\r\nFor example, you can:\r\n\r\n- Update charts, images and text from data\r\n- Create a series of slides using a template from spreadsheets or database\r\n\r\n**Examples are in `tests/`.** You can run the commands below in the `tests/` directory.\r\n\r\nPPTGen takes a YAML configuration file as input.\r\n\r\n    pptgen config.yaml\r\n\r\nThe YAML configuration defines the `source`, `target`, `data` and any number of\r\nrules. Here is a simple configuration that just copies a source PPTX to a\r\ntarget PPTX without any changes.\r\n\r\n```yaml\r\nsource: input.pptx           # Default input\r\ntarget: out-unchanged.pptx   # Default output\r\n```\r\n\r\nYou can override these parameters using `--source <path>` and `--target <path>`.\r\n\r\n    pptgen config.yaml --source input.pptx --target out-cmdline.pptx\r\n\r\n### Shapes\r\n\r\nIn PowerPoint, all shapes have names. To see shape names, select Home tab >\r\nDrawing group > Arrange drop-down > Selection pane. Or press ALT + F10.\r\n\r\n![Selection pane](help/selection-pane.png)\r\n\r\nTo change the shape names, double-click on the name in the selection pane.\r\n\r\n### Text\r\n\r\nTo change the title on the input slide to \"New title\", use this configuration `config-text.yaml`:\r\n\r\n```yaml\r\nsource: input.pptx\r\ntarget: out-text.pptx\r\nchange-title:             # This section defines the first change.\r\n                          # (You can replace \"change-title\" with anything.)\r\n  Title 1:                # Take the shape named \"Title 1\"\r\n    text: New Title       # Replace its text with \"New Title\"\r\n```\r\n\r\nTo *substitute* text instead of replacing the full title -- for example, to just\r\nreplace \"title\" with \"heading\", and \"Old\" with \"New\" use `config-replace.yaml`:\r\n\r\n```yaml\r\nsource: input.pptx\r\ntarget: out-replace.pptx\r\nreplace-title:                    # The change section can be called anything\r\n  Title 1:                        # Take the shape named \"Title 1\"\r\n    replace:                      # Replace these keywords\r\n      \"Old\": \"New\"                #   Old -> New\r\n      \"Title\": \"Heading\"          #   Title -> Heading\r\n```\r\n\r\nReplacement only works for words that have the same formatting. For example, in\r\nsome_where_, \"where\" is underlined. You cannot replace \"somewhere\". But you can\r\nreplace \"some\" and \"where\" independently.\r\n\r\n### Images\r\n\r\nTo change the picture on an image, use `config-image.yaml`:\r\n\r\n```yaml\r\nsource: input.pptx\r\ntarget: out-image.pptx\r\nchange-image:\r\n  Picture 1:                      # Take the shape named \"Picture 1\"\r\n    image: sample.png             # Replace the image with sample.png\r\n```\r\n\r\nThe image can be a URL or a file path.\r\n\r\n### Groups\r\n\r\nTo change groups' contents, use a nested configuration. For example, if the group\r\nnamed \"Group 1\" has text named \"Caption\" and an image named \"Picture\", this\r\n`config-group.yaml` replaces those:\r\n\r\n```yaml\r\nsource: input.pptx\r\ntarget: out-group.pptx\r\nchange-image:\r\n  Group 1:                        # Take the shape named \"Group 1\"\r\n    Caption:                      # Find the shape named \"Caption\" inside it\r\n      text: New caption           #   Change its text to \"New caption\"\r\n    Picture:                      # Find the shape named \"Picture\" inside it\r\n      image: sample.png           #   Replace the image with sample.png\r\n```\r\n\r\n### Data\r\n\r\nPPTGen can change presentations with data from various sources. This example\r\nshows all ways of loading data:\r\n\r\n```yaml\r\nsource: input.pptx\r\ntarget: out-unchanged.pptx\r\ndata:                               # The data section\r\n  cities: {csv: cities.csv}         # Load CSV data into \"cities\" key\r\n  sales: {xlsx: sales.xlsx, sheet: Sheet1}   # Load Excel sheet into \"sales\" key\r\n  tweets: {json: tweets.json}       # Load JSON data into \"tweets\" key\r\n  sample: {yaml: sample.yaml}       # Load YAML data into \"config\"\r\n  direct: {values: {x: 1, y: 2}}    # The \"direct\" key takes values directly\r\n```\r\n\r\n### Templates\r\n\r\nYou can use values from the data anywhere, as a template. See\r\n`config-template.yaml`:\r\n\r\n```yaml\r\nsource: input.pptx\r\ntarget: out-template.pptx\r\ndata:\r\n  tweets: {json: tweets.json}\r\ntext-template:\r\n  Title 1:\r\n    text: \"Tweet from @{{ tweets[0]['user']['screen_name'] }}\"\r\n  Picture 1:\r\n    image: \"{{ tweets[0]['user']['profile_image_url'] }}\"\r\n```\r\n\r\nThe values inside `{{ ... }}` are evaluated as Python expressions in the context\r\nof `data`.\r\n\r\n### Charts\r\n\r\nTBD\r\n\r\n### Tables\r\n\r\nTBD\r\n\r\n### Slides\r\n\r\nBy default, changes are applied to all slides. To restrict changes to a specific\r\nslide, use one of these:\r\n\r\n1. `slide-number` indicates the slide number starting with slide 1.\r\n2. `slide-title` is a regular expression that matches the slide title.\r\n\r\nFor example, this applies the `change-title` rule only on slide 1.\r\n\r\n```yaml\r\nsource: input.pptx\r\ntarget: out-text.pptx\r\nchange-title:\r\n  slide-number: 1         # Apply this change only on slide 1\r\n  Title 1:\r\n    text: New title\r\n```\r\n\r\nTo create multiple slides from data, add `data:` to the change. For example:\r\n\r\n```yaml\r\nsource: input.pptx\r\ntarget: out-slides.pptx\r\ndata:\r\n  sales: {xlsx: sales.xlsx}\r\nchange-title:\r\n  slide-number: 1         # Apply this change only on slide 1\r\n  data: sales             # For each row in sales.xlsx, create a new slide\r\n  Title 1:\r\n    text: \"Region {{ region }} has sales of ${{ sales }}\"\r\n```\r\n\r\n### Layouts\r\n\r\nTo create multiple shapes using data, use `layout:` and `data:`. For example:\r\n\r\n```yaml\r\nsource: input.pptx\r\ntarget: out-layout.pptx\r\ndata:\r\n  sales: {xlsx: sales.xlsx}\r\nmultiple-objects:\r\n  Picture 1:                          # Take the Picture 1 shape\r\n    data: sales                       # Duplicate it for each row in sales\r\n    layout: horizontal                # Lay the images out horizontally\r\n    image: \"{{ region }}.png\"         # Change the picture using this template\r\n```\r\n\r\nCurrently, `layout:` supports `horizontal` and `vertical`. We may extend this to\r\n`grid: [<columns>, <rows>]` and `wrap: <items>`.\r\n\r\n\r\nDevelopment\r\n-----------\r\n\r\nTo set up the development environment, clone this repo. Then run:\r\n\r\n    pip uninstall pptgen\r\n    pip install -e .\r\n\r\nCreate a branch for local development using `git checkout -b <branch>`.\r\nTest your changes by running `nosetests`.\r\nCommit your branch and send a merge request.\r\n\r\nRelease\r\n-------\r\n\r\nWhen releasing a new version of pptgen:\r\n\r\n1. Check [build errors](http://code.gramener.com/sanjay.yadav/pptgen/pipelines).\r\n2. Run `nosetests` on Python 2.7 and on 3.x\r\n3. Update version number in `pptgen/release.json`\r\n4. Push `dev` branch to the server. Ensure that there are no build errors.\r\n5. Merge with master, create an annotated tag and push the code:\r\n\r\n    git checkout master\r\n    git merge dev\r\n    git tag -a v1.x.x           # Annotate with a one-line summary of features\r\n    git push --follow-tags\r\n    git checkout dev            # Switch back to dev\r\n\r\n6. Release to PyPi\r\n\r\n    python setup.py sdist bdist_wheel --universal\r\n    twine upload dist/*\r\n\r\n\r\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://code.gramener.com/sanjay.yadav/pptgen",
    "keywords": "p,o,w,e,r,p,o,i,n,t, ,p,p,t, ,p,p,t,x, ,o,f,f,i,c,e, ,o,p,e,n, ,x,m,l",
    "license": "Gramener",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pptgen",
    "platform": "",
    "project_url": "https://pypi.org/project/pptgen/",
    "release_url": "https://pypi.org/project/pptgen/0.1.0/",
    "requires_dist": [
      "tornado (>=4.3)",
      "six",
      "setuptools (>=16.0)",
      "pyyaml (>=3.10)",
      "python-pptx (>=0.6.6)",
      "pandas (>=0.19)",
      "orderedattrdict (>=1.4.3)"
    ],
    "requires_python": "",
    "summary": "Make PowerPoint presentations from data",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cd636758173103d2fee0ef3981da7710",
          "sha256": "46cfa265b977c155a369c50972d5079548a046f09e2cf413bab071c6aa940d86"
        },
        "downloads": 0,
        "filename": "pptgen-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cd636758173103d2fee0ef3981da7710",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 52109,
        "upload_time": "2017-09-01T05:05:45",
        "url": "https://files.pythonhosted.org/packages/ad/a9/58c2d36ebc095c1e629272a685a334e7c18054f0f684a142d568f57ac834/pptgen-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0fac52062ef3d7e2215f719e5530afc6",
          "sha256": "adddf8774d7b203905cb4e431bd6b9829a50ad501f3930199f5dc5ba800f44ea"
        },
        "downloads": 0,
        "filename": "pptgen-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0fac52062ef3d7e2215f719e5530afc6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 49115,
        "upload_time": "2017-09-01T05:05:46",
        "url": "https://files.pythonhosted.org/packages/db/2f/e80342a973c3ee65c882ec7f2d2484ae717ccb444f5166574f376f896f98/pptgen-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "cd636758173103d2fee0ef3981da7710",
        "sha256": "46cfa265b977c155a369c50972d5079548a046f09e2cf413bab071c6aa940d86"
      },
      "downloads": 0,
      "filename": "pptgen-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cd636758173103d2fee0ef3981da7710",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 52109,
      "upload_time": "2017-09-01T05:05:45",
      "url": "https://files.pythonhosted.org/packages/ad/a9/58c2d36ebc095c1e629272a685a334e7c18054f0f684a142d568f57ac834/pptgen-0.1.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "0fac52062ef3d7e2215f719e5530afc6",
        "sha256": "adddf8774d7b203905cb4e431bd6b9829a50ad501f3930199f5dc5ba800f44ea"
      },
      "downloads": 0,
      "filename": "pptgen-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0fac52062ef3d7e2215f719e5530afc6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 49115,
      "upload_time": "2017-09-01T05:05:46",
      "url": "https://files.pythonhosted.org/packages/db/2f/e80342a973c3ee65c882ec7f2d2484ae717ccb444f5166574f376f896f98/pptgen-0.1.0.tar.gz"
    }
  ]
}