{
  "info": {
    "author": "Karel Brinda",
    "author_email": "kbrinda@hsph.harvard.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "SAMsift\n=======\n\nSAMsift is a program for advanced filtering and tagging of SAM/BAM alignments\nusing Python expressions.\n\n\nGetting started\n---------------\n\n.. code-block:: bash\n\n       git clone http://github.com/karel-brinda/samsift\n       cd samsift\n       # keep only alignments with alignment score >94\n       samsift/samsift -i tests/test.bam -o filtered.sam -f 'AS>94'\n       # add tags 'ln' with sequence length and 'ab' with average base quality\n       samsift/samsift -i tests/test.bam -o with_ln_ab.sam -c 'ln=len(SEQ);ab=1.0*sum(QUAL)/ln'\n\n\nInstallation\n------------\n\n**Using Bioconda:**\n\n.. code-block:: bash\n\n        # add all necessary Bioconda channels\n        conda config --add channels defaults\n        conda config --add channels conda-forge\n        conda config --add channels bioconda\n\n        # install samsift\n        conda install samsift\n\n\n**Using PIP from PyPI:**\n\n.. code-block:: bash\n\n   pip install --upgrade samsift\n\n\n**Using PIP from Github:**\n\n.. code-block:: bash\n\n   pip install --upgrade git+https://github.com/karel-brinda/samsift\n\n\nCommand-line parameters\n-----------------------\n\n.. code-block::\n\n        usage: samsift.py [-h] [-v] [-i file] [-o file] [-f py_expr] [-c py_code]\n                          [-d py_expr] [-t py_expr]\n\n        Program: samsift (advanced filtering and tagging of SAM/BAM alignments using Python expressions)\n        Version: 0.1.0\n        Author:  Karel Brinda <kbrinda@hsph.harvard.edu>\n\n        optional arguments:\n          -h, --help     show this help message and exit\n          -v, --version  show program's version number and exit\n          -i file        input SAM/BAM file [-]\n          -o file        output SAM/BAM file [-]\n          -f py_expr     filter [True]\n          -c py_code     code to be executed (e.g., assigning new tags) [None]\n          -d py_expr     debugging expression to print [None]\n          -t py_expr     debugging trigger [True]\n\n\n\nAlgorithm\n---------\n\n.. code-block:: python\n\n        for ALIGNMENT in ALIGNMENTS:\n                if eval(DEBUG_TRIGER):\n                        print(eval(DEBUG_EXPR))\n                if eval(FILTER):\n                        exec(CODE)\n                        print(ALIGNMENT)\n\n\nAll Python expressions can access variables mirroring the fields from the\nalignment section of the `SAM specification\n<https://samtools.github.io/hts-specs/SAMv1.pdf>`_, i.e., `QNAME`, `FLAG`,\n`RNAME`, `POS` (1-based), `MAPQ`, `CIGAR` , `RNEXT`, `PNEXT`, `TLEN`, `SEQ`,\nand `QUAL`.  For instance, keeping only reads with `POS` smaller than  10000\ncan be done by\n\n.. code-block:: bash\n\n        samsift -i tests/test.bam -f 'POS<10000'\n\n\nThe PySAM representation of current alignment (class `pysam.AlignedSegment\n<http://pysam.readthedocs.io/en/latest/api.html#pysam.AlignedSegment>`_) is\navailable through variable `a`. Therefore, the previous example is equivalent\nto\n\n.. code-block:: bash\n\n        samsift -i tests/test.bam -f 'a.reference_starts+1<10000'\n\n\nAll SAM tags are translated to variables with equal name. For instance, if\nalignment score is provided through the `AS` tag (as it is defined in the\n`Sequence Alignment/Map Optional Fields Specification\n<https://samtools.github.io/hts-specs/SAMtags.pdf>`_), then alignments with\nscore smaller or equal to the sequence length can be removed using\n\n.. code-block:: bash\n\n        samsift -i tests/test.bam -f 'AS>len(SEQ)'\n\nIf `CODE` is provided, all two-letter variables are back-translated to tags.\nFor instance, a tag `ab` carrying the average base quality can be added by\n\n.. code-block:: bash\n\n        samsift -i tests/test.bam -c 'ab=1.0*sum(QUAL)/ln'\n\n\nSimilar programs\n----------------\n\n* `samtools view <http://www.htslib.org/doc/samtools.html>`_ can filter alignments based on FLAGS, read group tags, and CIGAR strings.\n* `sambamba view <http://lomereiter.github.io/sambamba/docs/sambamba-view.html>`_ supports, in addition to SAMtools, filtration using `simple perl expression <https://github.com/lomereiter/sambamba/wiki/%5Bsambamba-view%5D-Filter-expression-syntax>`_. However, it's not possible to compare different tags.\n\nAuthor\n------\n\n`Karel Brinda <http://brinda.cz>`_ <kbrinda@hsph.harvard.edu>\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/karel-brinda/samsift",
    "keywords": "NGS SAM alignment",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "samsift",
    "platform": "",
    "project_url": "https://pypi.org/project/samsift/",
    "release_url": "https://pypi.org/project/samsift/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "SAMsift - sift your alignments",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d802fb31c3567ec3d0f8ea4dfce938a8",
          "sha256": "806670711dcac34d90eda341ef99134dcbd38f6a717aed6a73d94c1cea21bf65"
        },
        "downloads": 0,
        "filename": "samsift-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d802fb31c3567ec3d0f8ea4dfce938a8",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 7783,
        "upload_time": "2017-08-31T19:33:50",
        "url": "https://files.pythonhosted.org/packages/49/74/bfd6db7a8eb094842ae7b91368a7943bf950da6cca27a69e78ba6ef3bbff/samsift-0.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d61699655e3724652415f890db9c0fbc",
          "sha256": "2508a030faee574e50fcfb0e2a76fc4ed5c90d2d434e68a63cdf04e1950ee2b9"
        },
        "downloads": 0,
        "filename": "samsift-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d61699655e3724652415f890db9c0fbc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4891,
        "upload_time": "2017-08-31T19:33:48",
        "url": "https://files.pythonhosted.org/packages/bf/88/63dd104a0ca7c3bf9f251bd45a7f9ab75e6db7fdfd0afc31a4f4377d3f17/samsift-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d802fb31c3567ec3d0f8ea4dfce938a8",
        "sha256": "806670711dcac34d90eda341ef99134dcbd38f6a717aed6a73d94c1cea21bf65"
      },
      "downloads": 0,
      "filename": "samsift-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d802fb31c3567ec3d0f8ea4dfce938a8",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "size": 7783,
      "upload_time": "2017-08-31T19:33:50",
      "url": "https://files.pythonhosted.org/packages/49/74/bfd6db7a8eb094842ae7b91368a7943bf950da6cca27a69e78ba6ef3bbff/samsift-0.1.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "d61699655e3724652415f890db9c0fbc",
        "sha256": "2508a030faee574e50fcfb0e2a76fc4ed5c90d2d434e68a63cdf04e1950ee2b9"
      },
      "downloads": 0,
      "filename": "samsift-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d61699655e3724652415f890db9c0fbc",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4891,
      "upload_time": "2017-08-31T19:33:48",
      "url": "https://files.pythonhosted.org/packages/bf/88/63dd104a0ca7c3bf9f251bd45a7f9ab75e6db7fdfd0afc31a4f4377d3f17/samsift-0.1.0.tar.gz"
    }
  ]
}