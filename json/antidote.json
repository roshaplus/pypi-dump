{
  "info": {
    "author": "Benjamin Rabier",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": ".. image:: https://travis-ci.org/Finistere/antidote.svg?branch=master\n  :target: https://travis-ci.org/Finistere/antidote\n\n.. image:: https://codecov.io/gh/Finistere/antidote/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/Finistere/antidote\n\n.. image:: https://readthedocs.org/projects/antidote/badge/?version=latest\n  :target: http://antidote.readthedocs.io/en/latest/?badge=latest\n  :alt: Documentation Status\n\n********\nAntidote\n********\n\n*Antidote* is dependency injection module for Python 2.7 and 3.4+. It\nis designed to work with simple decorators and annotations. The goal is to\nrecognize dependencies and inject them automatically.\n\nFeatures Highlight\n==================\n\n- Dependencies bound through type annotations and optionally from variable \n  names and/or mapping.\n- Simple decorators to handle pretty much everything.\n- Standard dependency injection features: singleton, factories, auto-wiring\n  (automatically injecting dependencies of defined services, etc.)\n- Python 2.7 support (without annotations, obviously :))\n- Integration with the `attrs <http://www.attrs.org/en/stable/>`_ package\n  (>= v17.1).\n- Other dependencies, such as configuration parameters, can be easily added\n  for injection as a dictionary.\n\n\nQuick Start\n===========\n\nA simple example with a external database for which you have an adapter which\nwill be injected in other services.\n\nFor Python 3.4+, the dependency management is straight-forward:\n\n.. code-block:: python\n\n    from antidote import antidote\n\n    class Database(object):\n        \"\"\"\n        Class from an external library.\n        \"\"\"\n        def __init__(self, *args, **kwargs):\n            \"\"\" Initializes the database. \"\"\"\n\n    # Simple way to add some configuration.\n    # Any object implementing __getitem__ works\n    antidote.container.extend(dict(\n        database_host='host',\n        database_user='user',\n        database_password='password',\n    ))\n\n    # Declare a factory which should be called to instantiate Database\n    # Variables names are used here for injection.\n    @antidote.factory(use_arg_name=True)\n    def database_factory(database_host, database_user, database_password) -> Database:\n        \"\"\"\n        Configure your database.\n        \"\"\"\n        return Database(\n            host=database_host,\n            user=database_user,\n            password=database_password\n        )\n\n    # Declare DatabaseWrapper as a dependency to be injected\n    @antidote.register\n    class DatabaseWrapper(object):\n        \"\"\"\n        Your class to manage the database.\n        \"\"\"\n\n        # Dependencies of __init__() are injected by default when registering\n        # a dependency.\n        def __init__(self, db: Database):\n            self.db = db\n\n\n    @antidote.inject\n    def f(db: DatabaseWrapper):\n        \"\"\" Do something with your database. \"\"\"\n\nFor Python 2, the example is a bit more verbose as you need to compensate for \nthe lack of annotations:\n\n.. code-block:: python\n\n    from antidote import antidote\n\n\n    class Database(object):\n        \"\"\"\n        Class from an external library.\n        \"\"\"\n        def __init__(self, *args, **kwargs):\n            \"\"\" Initializes the database. \"\"\"\n\n    # Simple way to add some configuration.\n    # Any object implementing __getitem__ works\n    antidote.container.extend(dict(\n        database_host='host',\n        database_user='user',\n        database_password='password',\n    ))\n\n    # Declare a factory which should be called to instantiate Database\n    # Variables names are used here for injection.\n    # PY2: The id of the returned service is specified\n    @antidote.factory(use_arg_name=True, id=Database)\n    def database_factory(database_host, database_user, database_password):\n        \"\"\"\n        Configure your database.\n        \"\"\"\n        return Database(\n            host=database_host,\n            user=database_user,\n            password=database_password\n        )\n\n    # Declare DatabaseWrapper as a dependency to be injected\n    # PY2: A class-wide argument -> dependency mapping is specified,\n    @antidote.register(mapping=dict(db=Database))\n    class DatabaseWrapper(object):\n        \"\"\"\n        Your class to manage the database.\n        \"\"\"\n\n        # Dependencies of __init__() are injected by default when registering\n        # a dependency.\n        def __init__(self, db):\n            self.db = db\n\n    # PY2: An argument -> dependency mapping is specified\n    @antidote.inject(mapping=dict(db=DatabaseWrapper))\n    def f(db):\n        \"\"\" Do something with your database. \"\"\"\n\n\nDocumentation\n=============\n\nThe documentation is available at\n`<https://antidote.readthedocs.io/>`_.\n\n\nWhy ?\n=====\n\nDependency injection is, IMHO, a fundamental tool when working on projects. As\nit grows the more necessary it becomes to decouple your code by defining\nclearly in only one place how an object or a function should be called with\nwhich dependencies.\n\nSo while searching for a dependency injection library, I had three requirements\nin mind:\n\n- Use of annotations compatible with type checker such as\n  `mypy <https://github.com/python/mypy>`_ to inject dependencies. But other\n  ways should exist, as configuration parameters cannot be injected this way\n  for example.\n- IMHO, the strict minimum of a dependency injection library: services,\n  factories, and something to inject those in any callable which injects their\n  dependencies.\n- The library should be easy to integrate in existing code, be it in Python 2\n  (it's not gone, yet) or 3. Ideally one should be able to use injected classes\n  or functions like any other. Usage should be transparent, which leads to\n  easier integration and adoption.\n\nHowever, I did not found a suitable library and was actually surprised to see\nthat dependency injection was not commonly used in Python. So I created this\nproject to answer those requirements.\n\n\nRelated Projects\n================\n\nDifferent projects exist for dependency injection which did not satisfied my\nrequirements:\n\n- `Dependency Injector <https://github.com/ets-labs/python-dependency-injector>`_:\n  Does not use annotations, thus IMHO the code is too boilerplate.\n- `Siringa <https://github.com/h2non/siringa>`_: Does not integrate well with\n  `mypy <https://github.com/python/mypy>`_ with its need for :code:`'!'` to\n  specify dependencies to be injected.\n- `PyCDI <https://github.com/ettoreleandrotognoli/python-cdi>`_: Need to use\n  :code:`call()` to execute a function.\n- `Injector <https://github.com/alecthomas/injector>`_: Need to retrieve a\n  service with the :code:`Injector`.\n\n\nTODO\n====\n\n- Better support for configuration (ConfigParser typically)\n- tags to filter services and retrieve a list of them.\n- proxies ?\n\n\nLicense\n=======\n\nMIT\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Finistere/antidote",
    "keywords": "dependency injection",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "antidote",
    "platform": "",
    "project_url": "https://pypi.org/project/antidote/",
    "release_url": "https://pypi.org/project/antidote/0.1.0/",
    "requires_dist": [
      "attrs (>=17.1); extra == 'attrs'",
      "chainmap; python_version<'3'",
      "wrapt"
    ],
    "requires_python": "",
    "summary": "Transparent dependency injection.",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a3025fba0d4edbe6e972deee588c4df8",
          "sha256": "cd615b52899624af0177782d7cf69f6029a0b0c9eba13c29d57a5956412a3f79"
        },
        "downloads": -1,
        "filename": "antidote-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3025fba0d4edbe6e972deee588c4df8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 16026,
        "upload_time": "2017-11-26T17:07:42",
        "url": "https://files.pythonhosted.org/packages/ff/d2/5cbc27cd872191dda529b1846f54ec771b0795b4714c259ab84ed43e45e5/antidote-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "722e044841b57f2fdd9d8874017de996",
          "sha256": "68e14696aa9206912bddde51cc8ef9c72d8093e2efc42b457d074bc97e0c4a08"
        },
        "downloads": -1,
        "filename": "antidote-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "722e044841b57f2fdd9d8874017de996",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10590,
        "upload_time": "2017-11-26T17:07:46",
        "url": "https://files.pythonhosted.org/packages/cf/ce/a8142e14213a9a005b2e3b85fe6f1d0758be652b2bae2d31445f72d186f4/antidote-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a3025fba0d4edbe6e972deee588c4df8",
        "sha256": "cd615b52899624af0177782d7cf69f6029a0b0c9eba13c29d57a5956412a3f79"
      },
      "downloads": -1,
      "filename": "antidote-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a3025fba0d4edbe6e972deee588c4df8",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 16026,
      "upload_time": "2017-11-26T17:07:42",
      "url": "https://files.pythonhosted.org/packages/ff/d2/5cbc27cd872191dda529b1846f54ec771b0795b4714c259ab84ed43e45e5/antidote-0.1.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "722e044841b57f2fdd9d8874017de996",
        "sha256": "68e14696aa9206912bddde51cc8ef9c72d8093e2efc42b457d074bc97e0c4a08"
      },
      "downloads": -1,
      "filename": "antidote-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "722e044841b57f2fdd9d8874017de996",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10590,
      "upload_time": "2017-11-26T17:07:46",
      "url": "https://files.pythonhosted.org/packages/cf/ce/a8142e14213a9a005b2e3b85fe6f1d0758be652b2bae2d31445f72d186f4/antidote-0.1.0.tar.gz"
    }
  ]
}