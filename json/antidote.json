{
  "info": {
    "author": "Benjamin Rabier",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "********\nAntidote\n********\n\n\n.. image:: https://img.shields.io/pypi/v/antidote.svg\n  :target: https://pypi.python.org/pypi/antidote\n\n.. image:: https://img.shields.io/pypi/l/antidote.svg\n  :target: https://pypi.python.org/pypi/antidote\n\n.. image:: https://img.shields.io/pypi/pyversions/antidote.svg\n  :target: https://pypi.python.org/pypi/antidote\n\n.. image:: https://travis-ci.org/Finistere/antidote.svg?branch=master\n  :target: https://travis-ci.org/Finistere/antidote\n\n.. image:: https://codecov.io/gh/Finistere/antidote/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/Finistere/antidote\n\n.. image:: https://readthedocs.org/projects/antidote/badge/?version=latest\n  :target: http://antidote.readthedocs.io/en/latest/?badge=latest\n\n*Antidote* is a dependency injection micro framework for Python 2.7 and 3.4+.\nIt provides simple decorators to declare services and to inject those\nautomatically based on type hints.\n\n\nFeatures Highlight\n==================\n\n\n- Dependencies bound through type hints and optionally from variable names\n  and/or mapping.\n- Integrates well with any code, injected functions can be called as usual\n  with all their arguments.\n- Standard dependency injection features: singleton, factories, auto-wiring\n  (automatically injecting dependencies of defined services)\n- Dependency cycle detection.\n- Thread-safe and limited performance impact (see\n  `injection benchmark <https://github.com/Finistere/antidote/blob/master/benchmark.ipynb>`_).\n- Python 2.7 support (without type hints, obviously :))\n- Integration with the `attrs <http://www.attrs.org/en/stable/>`_ package\n  (>= v17.1).\n- Other dependencies, such as configuration parameters, can be easily added\n  for injection as a dictionary.\n\n\nInstallation\n============\n\n\nTo install Antidote, simply run this command:\n\n.. code-block:: bash\n\n    pip install antidote\n\n\nQuick Start\n===========\n\n\nLet's suppose you have database class from an external library and you wrap it\nwith a custom class for easier usage. Antidote can do all the wiring for you.\n\nWith type hints, it is straight-forward:\n\n.. code-block:: python\n\n    import antidote\n\n    class Database(object):\n        \"\"\"\n        Class from an external library.\n        \"\"\"\n        def __init__(self, *args, **kwargs):\n            \"\"\" Initializes the database. \"\"\"\n\n    # Simple way to add some configuration.\n    antidote.world.update(dict(\n        db_host='host',\n        db_user='user',\n        db_password='password',\n    ))\n\n    # Declare a factory which should be called to instantiate Database\n    # Variables names are used here for injection.\n    @antidote.factory(use_names=True)\n    def database_factory(db_host, db_user, db_password) -> Database:\n        \"\"\"\n        Configure your database.\n        \"\"\"\n        return Database(\n            host=db_host,\n            user=db_user,\n            password=db_password\n        )\n\n    # Declare DatabaseWrapper as a service to be injected\n    @antidote.register\n    class DatabaseWrapper(object):\n        \"\"\"\n        Your class to manage the database.\n        \"\"\"\n\n        # Dependencies of __init__() are injected by default when\n        # registering a service.\n        def __init__(self, db: Database):\n            self.db = db\n\n\n    @antidote.inject\n    def f(db: DatabaseWrapper):\n        \"\"\" Do something with your database. \"\"\"\n\n    # Can be called without arguments now.\n    f()\n\n    # You can still explicitly pass the arguments for testing\n    # for example.\n    f(DatabaseWrapper(database_factory(\n        db_host='host',\n        db_user='user',\n        db_password='password'\n    )))\n\nFor Python 2, the example is a bit more verbose as you need to compensate for\nthe lack of annotations:\n\n.. code-block:: python\n\n    import antidote\n\n\n    class Database(object):\n        \"\"\"\n        Class from an external library.\n        \"\"\"\n        def __init__(self, *args, **kwargs):\n            \"\"\" Initializes the database. \"\"\"\n\n    # Simple way to add some configuration.\n    antidote.world.update(dict(\n        db_host='host',\n        db_user='user',\n        db_password='password',\n    ))\n\n    # Declare a factory which should be called to instantiate Database\n    # Variables names are used here for injection.\n    # PY2: The id of the returned service is specified\n    @antidote.factory(use_names=True, id=Database)\n    def database_factory(db_host, db_user, db_password):\n        \"\"\"\n        Configure your database.\n        \"\"\"\n        return Database(\n            host=db_host,\n            user=db_user,\n            password=db_password\n        )\n\n    # Declare DatabaseWrapper as a service to be injected\n    # PY2: A class-wide argument -> dependency mapping is specified,\n    @antidote.register(mapping=dict(db=Database))\n    class DatabaseWrapper(object):\n        \"\"\"\n        Your class to manage the database.\n        \"\"\"\n\n        # Dependencies of __init__() are injected by default when\n        # registering a service.\n        def __init__(self, db):\n            self.db = db\n\n    # PY2: An argument -> dependency mapping is specified\n    @antidote.inject(mapping=dict(db=DatabaseWrapper))\n    def f(db):\n        \"\"\" Do something with your database. \"\"\"\n\n    # Can be called without arguments now.\n    f()\n\n    # You can still explicitly pass the arguments for testing\n    # for example.\n    f(DatabaseWrapper(database_factory(\n        db_host='host',\n        db_user='user',\n        db_password='password'\n    )))\n\n\n\nDocumentation\n=============\n\n\nThe documentation is available at\n`<https://antidote.readthedocs.io/>`_.\n\nInjection benchmark is available at\n`injection benchmarks <https://github.com/Finistere/antidote/blob/master/benchmark.ipynb>`_.\n\n\nWhy Antidote ?\n==============\n\n\nDependency injection is, IMHO, a fundamental tool when working on projects.\nYour thinking about dependencies will shift from *\"I need to retrieve,\ninstantiate and provide my service with dependencies\"* to *\"I need those\ndependencies\"*. The rest is handled through dependency injection.\n\nAs your project grows the more necessary it becomes to decouple your code. If\nyou change how a service is created, it does not affect code depending on it.\nWith dependency injection, you only need to specify how and with which\ndependencies a service needs to be used, once at its definition.\n\nSo while searching for a dependency injection library, I had three requirements\nin mind:\n\n- Use of type hints to inject dependencies. And provide other means to specify\n  dependencies as configuration parameters cannot be injected this way for\n  example.\n- IMHO, the strict minimum of a dependency injection library: services,\n  factories, and something to inject those in any callable which injects their\n  dependencies.\n- The library should be easy to integrate in existing code, be it in Python 2\n  (it's not gone, yet) or 3. Ideally one should be able to use injected classes\n  or functions like any other. Usage should be transparent, which leads to\n  easier integration and adoption.\n\nHowever, I did not found a suitable library and was actually surprised to see\nthat dependency injection was not commonly used in Python. So I created this\nproject to answer those requirements.\n\n\nRelated Projects\n================\n\n\nDifferent projects exist for dependency injection which did not satisfied my\nrequirements. Here is partial list of project and why they do not fulfill\npreviously stated requirements (at the 26/11/17):\n\n- `Dependency Injector <https://github.com/ets-labs/python-dependency-injector>`_:\n  Does not use type hints, which leads to a lot of boilerplate code IMHO.\n- `Siringa <https://github.com/h2non/siringa>`_: Does not use type hints but\n  custom annotations with for :code:`'!'` to specify dependencies to be\n  injected.\n- `PyCDI <https://github.com/ettoreleandrotognoli/python-cdi>`_: Need to use\n  :code:`call()` to execute a function. This is, IMHO, not a proper design for\n  dependency injection, you either need to use :code:`call()` on all your entry\n  points, or know which functions needs it. This makes it harder to use on\n  existing projects.\n- `Injector <https://github.com/alecthomas/injector>`_: Need to retrieve a\n  service with the :code:`Injector`. Same issue as the previous library.\n\n\nHow to Contribute\n=================\n\n\n1. Check for open issues or open a fresh issue to start a discussion around a\n   feature or a bug.\n2. Fork the repo on GitHub. Run the tests to confirm they all pass on your\n   machine. If you cannot find why it fails, open an issue.\n3. Start making your changes to the master branch.\n4. Writes tests which shows that your code is working as intended. (This also\n   means 100% coverage.)\n5. Send a pull request.\n\n.. note::\n\n    Be sure to merge the latest from \"upstream\" before making a pull request!\n\n\nPull requests **should avoid** to:\n\n- make it harder to integrate Antidote into existing code.\n- break backwards compatibility.\n\nPull requests **will not** be accepted if:\n\n- classes and non trivial functions have not docstrings documenting their\n  behavior.\n- tests do not cover all of code changes.\n\n\n.. note::\n\n    Do not hesitate to send a pull request, even if incomplete, to get early\n    feedback ! :)\n\n\nBug Reports / Feature Requests\n==============================\n\n\nAny feedback is always welcome, feel free to submit issues and enhancement\nrequests ! :)\n\n\nTODO\n====\n\nThis actually more of a roadmap of features. Those marked with a \"(?)\" may not\nbe implemented.\n\n- Better support for configuration (ConfigParser typically) with a provider.\n- tags to filter services and retrieve a list of them.\n- type hints in Antidote's source code.\n- find a way to test absence of attrs with pytest as it now depends on it.\n- use pipenv\n- use python 2 type hints (?)\n- way to restrict services availability, either through tags, different\n  containers or injectors, etc... (?)\n- proxies (?)\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Finistere/antidote",
    "keywords": "dependency injection",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "antidote",
    "platform": "",
    "project_url": "https://pypi.org/project/antidote/",
    "release_url": "https://pypi.org/project/antidote/0.2.0/",
    "requires_dist": [
      "attrs (>=17.1); extra == 'attrs'",
      "typing; python_version<'3.5'",
      "future",
      "wrapt"
    ],
    "requires_python": "",
    "summary": "Transparent dependency injection.",
    "version": "0.2.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a3025fba0d4edbe6e972deee588c4df8",
          "sha256": "cd615b52899624af0177782d7cf69f6029a0b0c9eba13c29d57a5956412a3f79"
        },
        "downloads": -1,
        "filename": "antidote-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3025fba0d4edbe6e972deee588c4df8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 16026,
        "upload_time": "2017-11-26T17:07:42",
        "url": "https://files.pythonhosted.org/packages/ff/d2/5cbc27cd872191dda529b1846f54ec771b0795b4714c259ab84ed43e45e5/antidote-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "722e044841b57f2fdd9d8874017de996",
          "sha256": "68e14696aa9206912bddde51cc8ef9c72d8093e2efc42b457d074bc97e0c4a08"
        },
        "downloads": -1,
        "filename": "antidote-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "722e044841b57f2fdd9d8874017de996",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10590,
        "upload_time": "2017-11-26T17:07:46",
        "url": "https://files.pythonhosted.org/packages/cf/ce/a8142e14213a9a005b2e3b85fe6f1d0758be652b2bae2d31445f72d186f4/antidote-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fece28a52f4b957ec04c2352e269511b",
          "sha256": "e243ef5c933ac49de9e1279c1b5a640446fc1d7219ca22efc04ec687cebb4692"
        },
        "downloads": -1,
        "filename": "antidote-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fece28a52f4b957ec04c2352e269511b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 16401,
        "upload_time": "2017-12-11T19:26:37",
        "url": "https://files.pythonhosted.org/packages/3d/9a/5ca863a1b7d2a01e4d1afc802d88e3e487011ed300457423730f7d8314f9/antidote-0.2.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "69698f9dee0786d237da35b8ce42eaf0",
          "sha256": "5316ceabb0e99978e39aea919f635100ace7e4452e4987c0a5ca56f2afdded73"
        },
        "downloads": -1,
        "filename": "antidote-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "69698f9dee0786d237da35b8ce42eaf0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10788,
        "upload_time": "2017-12-11T19:26:38",
        "url": "https://files.pythonhosted.org/packages/63/45/3c4cd74767f6e9a1cdc8489e2bdc03292a0ca610b66a157c3b3b075b8a03/antidote-0.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "fece28a52f4b957ec04c2352e269511b",
        "sha256": "e243ef5c933ac49de9e1279c1b5a640446fc1d7219ca22efc04ec687cebb4692"
      },
      "downloads": -1,
      "filename": "antidote-0.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fece28a52f4b957ec04c2352e269511b",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 16401,
      "upload_time": "2017-12-11T19:26:37",
      "url": "https://files.pythonhosted.org/packages/3d/9a/5ca863a1b7d2a01e4d1afc802d88e3e487011ed300457423730f7d8314f9/antidote-0.2.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "69698f9dee0786d237da35b8ce42eaf0",
        "sha256": "5316ceabb0e99978e39aea919f635100ace7e4452e4987c0a5ca56f2afdded73"
      },
      "downloads": -1,
      "filename": "antidote-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "69698f9dee0786d237da35b8ce42eaf0",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10788,
      "upload_time": "2017-12-11T19:26:38",
      "url": "https://files.pythonhosted.org/packages/63/45/3c4cd74767f6e9a1cdc8489e2bdc03292a0ca610b66a157c3b3b075b8a03/antidote-0.2.0.tar.gz"
    }
  ]
}