{
  "info": {
    "author": "Jeremiah C Leary",
    "author_email": "jeremiah.c.leary@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Text Processing :: General"
    ],
    "description": "# vhdl-style-guide (VSG)\nStyle guide enforcement for VHDL\n\nAfter recently performing code reviews for some VHDL, there were quite a few style issues.\nI believe these issues distracted from the true purpose of the code review.\n\nWe typically use Spyglass as a static analyzer, but it does not cover all the style issues I am interested in.\n\nTherefore, I am writing VSG to help with future code reviews.\n\n## Language\n\nI have choosen to implement the program in Python so I can further my learning of the language.\n\n## Design Strategy\n\n### Architecture\n\nThe program will be designed around rules.\nThe rules will be atomic so they can be added or removed easily.\n\n## Installation\n\nAfter downloading the source, issue the following command:\n\n  python setup.py install\n\nThis will install the vsg package and binary.\nIf you add the path to the binary to your PATH environment variable, then the program can be called directly.\n\n## Testing\n\nI will be using TDD for development.\nTests are located under the tests directory.\n\n### Executing tests\n\nYou can run all the tests at the top level by invoking the following command:\n\n python setup.py test\n\n## Local rules\n\nVSG supports customization by allowing localized rules.\nThis is simply a directory with an __init__.py file and one or more python files.\nThe files should follow the same structure and naming convention as the rules found in the vsg/rules directory.\n\nThe localized rules will be used when the -l command line argument is given.\n\n## Phases\n\nThe rules will be grouped together and ran in phases.\nIf a phase failes, then successive phases will not execute.\n\n### Phase 1 - Structural\n\nThis phase checks the structure of VHDL statements.\nThis ensures the VHDL is structured properly for future phases.\n\n### Phase 2 - Whitespace\n\nThis phase checks whitespace rules.\nHowever, this does not include indentation.\n\n### Phase 3 - Vertical Spacing\n\nThis phase checks all vertical spacing requirements are met.\n\n### Phase 4 - Indentation\n\nThis phase checks all indentation rules\n\n### Phase 5 - Alignment\n\nThis phase checks all alignment rules\n\n### Phase 6 - Capitalization\n\nThis phase checks capitalization rules\n\n### Phase 7 - Naming conventions\n\nThis phase checks naming restrictions for signals, constants, ports, etc...\n\n## Configuring rules\n\nAny attribute of any rule can be configured by using the --configuration option and a JSON file.\n\n### Disabling a rule\n\nBelow is an example of a JSON file which disables the rule **entity_004**\n\n```json\n{\n  \"rule\":{\n    \"entity_004\":{\n        \"disable\":\"True\"\n    }\n  }\n}\n```\n\n### Setting the indent increment size\n\nThe indent increment size can be configured on an per rule basis:\n\n```json\n{\n  \"rule\":{\n      \"entity_004\":{\n        \"indentSize\":4\n      }\n}\n```\n\nor the indent increment size can be configured for every rule using **global**:\n\n\n```json\n{\n  \"rule\":{\n      \"global\":{\n        \"indentSize\":4\n      }\n}\n```\n\nUse **global** to configure the attribute of all rules.\nThe **global** value can be overridden by a specific rule value.\n",
    "docs_url": null,
    "download_url": "https://github.com/jeremiah-c-leary/vhdl-style-guide",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jeremiah-c-leary/vhdl-style-guide",
    "keywords": "vhdl",
    "license": "GNU General Public License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vsg",
    "platform": "",
    "project_url": "https://pypi.org/project/vsg/",
    "release_url": "https://pypi.org/project/vsg/0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "VHDL Style Guide",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "284aaa8dca100a3c763de3409748252b",
          "sha256": "ad23bbfcb0d0b7326ce5087cfc78b16f925aa0eecc29ca3c74f263a1ed242e20"
        },
        "downloads": -1,
        "filename": "vsg-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "284aaa8dca100a3c763de3409748252b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26177,
        "upload_time": "2017-11-11T17:44:06",
        "url": "https://files.pythonhosted.org/packages/cb/56/a1d14c14ce60ea6480b6181772977efe967fbf3e2c9bd9ffe6059f981063/vsg-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "284aaa8dca100a3c763de3409748252b",
        "sha256": "ad23bbfcb0d0b7326ce5087cfc78b16f925aa0eecc29ca3c74f263a1ed242e20"
      },
      "downloads": -1,
      "filename": "vsg-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "284aaa8dca100a3c763de3409748252b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 26177,
      "upload_time": "2017-11-11T17:44:06",
      "url": "https://files.pythonhosted.org/packages/cb/56/a1d14c14ce60ea6480b6181772977efe967fbf3e2c9bd9ffe6059f981063/vsg-0.1.tar.gz"
    }
  ]
}