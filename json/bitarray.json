{
  "info": {
    "author": "Ilan Schnell",
    "author_email": "ilanschnell@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Python Software Foundation License",
      "Operating System :: OS Independent",
      "Programming Language :: C",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.4",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Topic :: Utilities"
    ],
    "description": "======================================\nbitarray: efficient arrays of booleans\n======================================\n\nThis module provides an object type which efficiently represents an array\nof booleans.  Bitarrays are sequence types and behave very much like usual\nlists.  Eight bits are represented by one byte in a contiguous block of\nmemory.  The user can select between two representations; little-endian\nand big-endian.  All of the functionality is implemented in C.\nMethods for accessing the machine representation are provided.\nThis can be useful when bit level access to binary files is required,\nsuch as portable bitmap image files (.pbm).  Also, when dealing with\ncompressed data which uses variable bit length encoding, you may find\nthis module useful.\n\n\nKey features\n------------\n\n * All functionality implemented in C.\n\n * Bitarray objects behave very much like a list object, in particular\n   slicing (including slice assignment and deletion) is supported.\n\n * The bit endianness can be specified for each bitarray object, see below.\n\n * On 32bit systems, a bitarray object can contain up to 2^34 elements,\n   that is 16 Gbits (on 64bit machines up to 2^63 elements in theory --\n   on Python 2.4 only 2^31 elements,\n   see `PEP 353 <http://www.python.org/dev/peps/pep-0353/>`_\n   (added in Python 2.5)).\n\n * Packing and unpacking to other binary data formats,\n   e.g. `numpy.ndarray <http://www.scipy.org/Tentative_NumPy_Tutorial>`_,\n   is possible.\n\n * Fast methods for encoding and decoding variable bit length prefix codes\n\n * Sequential search (as list or iterator)\n\n * Bitwise operations: ``&, |, ^, &=, |=, ^=, ~``\n\n * Pickling and unpickling of bitarray objects possible.\n\n * Bitarray objects support the buffer protocol (Python 2.7 only)\n\n\nInstallation\n------------\n\nbitarray can be installed from source::\n\n   $ tar xzf bitarray-0.8.1.tar.gz\n   $ cd bitarray-0.8.1\n   $ python setup.py install\n\nOn Unix systems, the latter command may have to be executed with root\nprivileges.\nIf you have `distribute <http://pypi.python.org/pypi/distribute/>`_\ninstalled, you can easy_install bitarray.\nOnce you have installed the package, you may want to test it::\n\n   $ python -c 'import bitarray; bitarray.test()'\n   bitarray is installed in: /usr/local/lib/python2.7/site-packages/bitarray\n   bitarray version: 0.8.1\n   2.7.2 (r271:86832, Nov 29 2010) [GCC 4.2.1 (SUSE Linux)]\n   .........................................................................\n   ...........................................\n   ----------------------------------------------------------------------\n   Ran 134 tests in 1.396s\n   \n   OK\n\nYou can always import the function test,\nand ``test().wasSuccessful()`` will return True when the test went well.\n\n\n\nUsing the module\n----------------\n\nAs mentioned above, bitarray objects behave very much like lists, so\nthere is not too new to learn.  The biggest difference to list objects\nis the ability to access the machine representation of the object.\nWhen doing so, the bit endianness is of importance, this issue is\nexplained in detail in the section below.  Here, we demonstrate the\nbasic usage of bitarray objects:\n\n   >>> from bitarray import bitarray\n   >>> a = bitarray()            # create empty bitarray\n   >>> a.append(True)\n   >>> a.extend([False, True, True])\n   >>> a\n   bitarray('1011')\n\nBitarray objects can be instantiated in different ways:\n\n   >>> a = bitarray(2**20)       # bitarray of length 1048576 (uninitialized)\n   >>> bitarray('1001011')       # from a string\n   bitarray('1001011')\n   >>> lst = [True, False, False, True, False, True, True]\n   >>> bitarray(lst)             # from list, tuple, iterable\n   bitarray('1001011')\n\nBits can be assigned from any Python object, if the value can be interpreted\nas a truth value.  You can think of this as Python's built-in function bool()\nbeing applied, whenever casting an object:\n\n   >>> a = bitarray([42, '', True, {}, 'foo', None])\n   >>> a\n   bitarray('101010')\n   >>> a.append(a)      # note that bool(a) is True\n   >>> a.count(42)      # counts occurrences of True (not 42)\n   4L\n   >>> a.remove('')     # removes first occurrence of False\n   >>> a\n   bitarray('110101')\n\nLike lists, bitarray objects support slice assignment and deletion:\n\n   >>> a = bitarray(50)\n   >>> a.setall(False)\n   >>> a[11:37:3] = 9 * bitarray([True])\n   >>> a\n   bitarray('00000000000100100100100100100100100100000000000000')\n   >>> del a[12::3]\n   >>> a\n   bitarray('0000000000010101010101010101000000000')\n   >>> a[-6:] = bitarray('10011')\n   >>> a\n   bitarray('000000000001010101010101010100010011')\n   >>> a += bitarray('000111')\n   >>> a[9:]\n   bitarray('001010101010101010100010011000111')\n\nIn addition, slices can be assigned to booleans, which is easier (and\nfaster) than assigning to a bitarray in which all values are the same:\n\n   >>> a = 20 * bitarray('0')\n   >>> a[1:15:3] = True\n   >>> a\n   bitarray('01001001001001000000')\n\nThis is easier and faster than:\n\n   >>> a = 20 * bitarray('0')\n   >>> a[1:15:3] = 5 * bitarray('1')\n   >>> a\n   bitarray('01001001001001000000')\n\nNote that in the latter we have to create a temporary bitarray whose length\nmust be known or calculated.\n\n\nBit endianness\n--------------\n\nSince a bitarray allows addressing of individual bits, where the machine\nrepresents 8 bits in one byte, there two obvious choices for this mapping;\nlittle- and big-endian.\nWhen creating a new bitarray object, the endianness can always be\nspecified explicitly:\n\n   >>> a = bitarray(endian='little')\n   >>> a.frombytes(b'A')\n   >>> a\n   bitarray('10000010')\n   >>> b = bitarray('11000010', endian='little')\n   >>> b.tobytes()\n   'C'\n\nHere, the low-bit comes first because little-endian means that increasing\nnumeric significance corresponds to an increasing address (index).\nSo a[0] is the lowest and least significant bit, and a[7] is the highest\nand most significant bit.\n\n   >>> a = bitarray(endian='big')\n   >>> a.frombytes(b'A')\n   >>> a\n   bitarray('01000001')\n   >>> a[6] = 1\n   >>> a.tobytes()\n   'C'\n\nHere, the high-bit comes first because big-endian\nmeans \"most-significant first\".\nSo a[0] is now the lowest and most significant bit, and a[7] is the highest\nand least significant bit.\n\nThe bit endianness is a property attached to each bitarray object.\nWhen comparing bitarray objects, the endianness (and hence the machine\nrepresentation) is irrelevant; what matters is the mapping from indices\nto bits:\n\n   >>> bitarray('11001', endian='big') == bitarray('11001', endian='little')\n   True\n\nBitwise operations (``&, |, ^, &=, |=, ^=, ~``) are implemented efficiently\nusing the corresponding byte operations in C, i.e. the operators act on the\nmachine representation of the bitarray objects.  Therefore, one has to be\ncautious when applying the operation to bitarrays with different endianness.\n\nWhen converting to and from machine representation, using\nthe ``tobytes``, ``frombytes``, ``tofile`` and ``fromfile`` methods,\nthe endianness matters:\n\n   >>> a = bitarray(endian='little')\n   >>> a.frombytes(b'\\x01')\n   >>> a\n   bitarray('10000000')\n   >>> b = bitarray(endian='big')\n   >>> b.frombytes(b'\\x80')\n   >>> b\n   bitarray('10000000')\n   >>> a == b\n   True\n   >>> a.tobytes() == b.tobytes()\n   False\n\nThe endianness can not be changed once an object is created.\nHowever, since creating a bitarray from another bitarray just copies the\nmemory representing the data, you can create a new bitarray with different\nendianness:\n\n   >>> a = bitarray('11100000', endian='little')\n   >>> a\n   bitarray('11100000')\n   >>> b = bitarray(a, endian='big')\n   >>> b\n   bitarray('00000111')\n   >>> a == b\n   False\n   >>> a.tobytes() == b.tobytes()\n   True\n\nThe default bit endianness is currently big-endian, however this may change\nin the future, and when dealing with the machine representation of bitarray\nobjects, it is recommended to always explicitly specify the endianness.\n\nUnless, explicitly converting to machine representation, using\nthe ``tobytes``, ``frombytes``, ``tofile`` and ``fromfile`` methods,\nthe bit endianness will have no effect on any computation, and one\ncan safely ignore setting the endianness, and other details of this section.\n\n\nBuffer protocol\n---------------\n\nPython 2.7 provides memoryview objects, which allow Python code to access\nthe internal data of an object that supports the buffer protocol without\ncopying.  Bitarray objects support this protocol, with the memory being\ninterpreted as simple bytes.\n\n   >>> a = bitarray('01000001' '01000010' '01000011', endian='big')\n   >>> v = memoryview(a)\n   >>> len(v)\n   3\n   >>> v[-1]\n   'C'\n   >>> v[:2].tobytes()\n   'AB'\n   >>> v.readonly  # changing a bitarray's memory is also possible\n   False\n   >>> v[1] = 'o'\n   >>> a\n   bitarray('010000010110111101000011')\n\n\nVariable bit length prefix codes\n--------------------------------\n\nThe method ``encode`` takes a dictionary mapping symbols to bitarrays\nand an iterable, and extends the bitarray object with the encoded symbols\nfound while iterating.  For example:\n\n   >>> d = {'H':bitarray('111'), 'e':bitarray('0'),\n   ...      'l':bitarray('110'), 'o':bitarray('10')}\n   ...\n   >>> a = bitarray()\n   >>> a.encode(d, 'Hello')\n   >>> a\n   bitarray('111011011010')\n\nNote that the string ``'Hello'`` is an iterable, but the symbols are not\nlimited to characters, in fact any immutable Python object can be a symbol.\nTaking the same dictionary, we can apply the ``decode`` method which will\nreturn a list of the symbols:\n\n   >>> a.decode(d)\n   ['H', 'e', 'l', 'l', 'o']\n   >>> ''.join(a.decode(d))\n   'Hello'\n\nSince symbols are not limited to being characters, it is necessary to return\nthem as elements of a list, rather than simply returning the joined string.\n\n\nReference\n---------\n\n**The bitarray class:**\n\n``bitarray([initial], [endian=string])``\n   Return a new bitarray object whose items are bits initialized from\n   the optional initial, and endianness.\n   If no object is provided, the bitarray is initialized to have length zero.\n   The initial object may be of the following types:\n   \n   int, long\n       Create bitarray of length given by the integer.  The initial values\n       in the array are random, because only the memory allocated.\n   \n   string\n       Create bitarray from a string of '0's and '1's.\n   \n   list, tuple, iterable\n       Create bitarray from a sequence, each element in the sequence is\n       converted to a bit using truth value value.\n   \n   bitarray\n       Create bitarray from another bitarray.  This is done by copying the\n       memory holding the bitarray data, and is hence very fast.\n   \n   The optional keyword arguments 'endian' specifies the bit endianness of the\n   created bitarray object.\n   Allowed values are 'big' and 'little' (default is 'big').\n   \n   Note that setting the bit endianness only has an effect when accessing the\n   machine representation of the bitarray, i.e. when using the methods: tofile,\n   fromfile, tobytes, frombytes.\n\n\n**A bitarray object supports the following methods:**\n\n``all()`` -> bool\n   Returns True when all bits in the array are True.\n\n\n``any()`` -> bool\n   Returns True when any bit in the array is True.\n\n\n``append(item)``\n   Append the value bool(item) to the end of the bitarray.\n\n\n``buffer_info()`` -> tuple\n   Return a tuple (address, size, endianness, unused, allocated) giving the\n   current memory address, the size (in bytes) used to hold the bitarray's\n   contents, the bit endianness as a string, the number of unused bits\n   (e.g. a bitarray of length 11 will have a buffer size of 2 bytes and\n   5 unused bits), and the size (in bytes) of the allocated memory.\n\n\n``bytereverse()``\n   For all bytes representing the bitarray, reverse the bit order (in-place).\n   Note: This method changes the actual machine values representing the\n   bitarray; it does not change the endianness of the bitarray object.\n\n\n``copy()`` -> bitarray\n   Return a copy of the bitarray.\n\n\n``count([value])`` -> int\n   Return number of occurrences of value (defaults to True) in the bitarray.\n\n\n``decode(code)`` -> list\n   Given a prefix code (a dict mapping symbols to bitarrays),\n   decode the content of the bitarray and return the list of symbols.\n\n\n``encode(code, iterable)``\n   Given a prefix code (a dict mapping symbols to bitarrays),\n   iterates over iterable object with symbols, and extends the bitarray\n   with the corresponding bitarray for each symbols.\n\n\n``endian()`` -> string\n   Return the bit endianness as a string (either 'little' or 'big').\n\n\n``extend(object)``\n   Append bits to the end of the bitarray.  The objects which can be passed\n   to this method are the same iterable objects which can given to a bitarray\n   object upon initialization.\n\n\n``fill()`` -> int\n   Adds zeros to the end of the bitarray, such that the length of the bitarray\n   is not a multiple of 8.  Returns the number of bits added (0..7).\n\n\n``frombytes(bytes)``\n   Append from a byte string, interpreted as machine values.\n\n\n``fromfile(f, [n])``\n   Read n bytes from the file object f and append them to the bitarray\n   interpreted as machine values.  When n is omitted, as many bytes are\n   read until EOF is reached.\n\n\n``fromstring(string)``\n   Append from a string, interpreting the string as machine values.\n   Deprecated since version 0.4.0, use ``frombytes()`` instead.\n\n\n``index(value, [start, [stop]])`` -> int\n   Return index of the first occurrence of bool(value) in the bitarray.\n   Raises ValueError if the value is not present.\n\n\n``insert(i, item)``\n   Insert bool(item) into the bitarray before position i.\n\n\n``invert()``\n   Invert all bits in the array (in-place),\n   i.e. convert each 1-bit into a 0-bit and vice versa.\n\n\n``iterdecode(code)`` -> iterator\n   Given a prefix code (a dict mapping symbols to bitarrays),\n   decode the content of the bitarray and iterate over the symbols.\n\n\n``itersearch(bitarray)`` -> iterator\n   Searches for the given a bitarray in self, and return an iterator over\n   the start positions where bitarray matches self.\n\n\n``length()`` -> int\n   Return the length, i.e. number of bits stored in the bitarray.\n   This method is preferred over __len__ (used when typing ``len(a)``),\n   since __len__ will fail for a bitarray object with 2^31 or more elements\n   on a 32bit machine, whereas this method will return the correct value,\n   on 32bit and 64bit machines.\n\n\n``pack(bytes)``\n   Extend the bitarray from a byte string, where each characters corresponds to\n   a single bit.  The character b'\\x00' maps to bit 0 and all other characters\n   map to bit 1.\n   This method, as well as the unpack method, are meant for efficient\n   transfer of data between bitarray objects to other python objects\n   (for example NumPy's ndarray object) which have a different view of memory.\n\n\n``pop([i])`` -> item\n   Return the i-th (default last) element and delete it from the bitarray.\n   Raises IndexError if bitarray is empty or index is out of range.\n\n\n``remove(item)``\n   Remove the first occurrence of bool(item) in the bitarray.\n   Raises ValueError if item is not present.\n\n\n``reverse()``\n   Reverse the order of bits in the array (in-place).\n\n\n``search(bitarray, [limit])`` -> list\n   Searches for the given a bitarray in self, and returns the start positions\n   where bitarray matches self as a list.\n   The optional argument limits the number of search results to the integer\n   specified.  By default, all search results are returned.\n\n\n``setall(value)``\n   Set all bits in the bitarray to bool(value).\n\n\n``sort(reverse=False)``\n   Sort the bits in the array (in-place).\n\n\n``to01()`` -> string\n   Return a string containing '0's and '1's, representing the bits in the\n   bitarray object.\n   Note: To extend a bitarray from a string containing '0's and '1's,\n   use the extend method.\n\n\n``tobytes()`` -> bytes\n   Return the byte representation of the bitarray.\n   When the length of the bitarray is not a multiple of 8, the few remaining\n   bits (1..7) are set to 0.\n\n\n``tofile(f)``\n   Write all bits (as machine values) to the file object f.\n   When the length of the bitarray is not a multiple of 8,\n   the remaining bits (1..7) are set to 0.\n\n\n``tolist()`` -> list\n   Return an ordinary list with the items in the bitarray.\n   Note that the list object being created will require 32 or 64 times more\n   memory than the bitarray object, which may cause a memory error if the\n   bitarray is very large.\n   Also note that to extend a bitarray with elements from a list,\n   use the extend method.\n\n\n``tostring()`` -> string\n   Return the string representing (machine values) of the bitarray.\n   When the length of the bitarray is not a multiple of 8, the few remaining\n   bits (1..7) are set to 0.\n   Deprecated since version 0.4.0, use ``tobytes()`` instead.\n\n\n``unpack(zero=b'\\x00', one=b'\\xff')`` -> bytes\n   Return a byte string containing one character for each bit in the bitarray,\n   using the specified mapping.\n   See also the pack method.\n\n\n**Functions defined in the module:**\n\n``test(verbosity=1, repeat=1)`` -> TextTestResult\n   Run self-test, and return unittest.runner.TextTestResult object.\n\n\n``bitdiff(a, b)`` -> int\n   Return the difference between two bitarrays a and b.\n   This is function does the same as (a ^ b).count(), but is more memory\n   efficient, as no intermediate bitarray object gets created\n\n\n``bits2bytes(n)`` -> int\n   Return the number of bytes necessary to store n bits.\n\n\nChange log\n----------\n\n**0.8.1** (2013-03-30):\n\n  * fix issue #10, i.e. int(bitarray()) segfault\n  * added tests for using a bitarray object as an argument to functions\n    like int, long (on Python 2), float, list, tuple, dict\n\n\n**0.8.0** (2012-04-04):\n\n  * add Python 2.4 support\n  * add (module level) function bitdiff for calculating the difference\n    between two bitarrays\n\n\n**0.7.0** (2012-02-15):\n\n  * add iterdecode method (C level), which returns an iterator but is\n    otherwise like the decode method\n  * improve memory efficiency and speed of pickling large bitarray objects\n\n\nPlease find the complete change log\n`here <https://github.com/ilanschnell/bitarray/blob/master/CHANGE_LOG>`_.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ilanschnell/bitarray",
    "keywords": null,
    "license": "PSF",
    "maintainer": null,
    "maintainer_email": null,
    "name": "bitarray",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/bitarray/",
    "release_url": "https://pypi.org/project/bitarray/0.8.1/",
    "requires_python": null,
    "summary": "efficient arrays of booleans -- C extension",
    "version": "0.8.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e0e01765d15963531324a1b81b3796bc",
          "sha256": "65a99398fb160022caf72ee4424e118d4a55b64b3313a05bc233fb25b10a4f08"
        },
        "downloads": 3292,
        "filename": "bitarray-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e0e01765d15963531324a1b81b3796bc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14349,
        "upload_time": "2008-08-17T21:48:44",
        "url": "https://files.pythonhosted.org/packages/55/5c/a0883a2b6ccf209aa444e95ac30a520be4b0b31bc47fcd96a636d9489514/bitarray-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bb904c5bbb0566c674798a62c616f367",
          "sha256": "d744b718e38aeea6ccfaae034ea18258a4b92d9c38739e496ec603b5b827fe0f"
        },
        "downloads": 3265,
        "filename": "bitarray-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "bb904c5bbb0566c674798a62c616f367",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30209,
        "upload_time": "2008-09-02T14:09:41",
        "url": "https://files.pythonhosted.org/packages/a7/e4/3c45234533ba512c77d9208776aba25f1fdc4450112e254a47a35050e4f3/bitarray-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4197a52621bdea43cd8b028cf0e59917",
          "sha256": "cc6f8e4f03a6bb488ba1874571d2ddfb8699a3590b5b00abbddefc5f1745697d"
        },
        "downloads": 3248,
        "filename": "bitarray-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4197a52621bdea43cd8b028cf0e59917",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 33387,
        "upload_time": "2008-09-08T04:42:09",
        "url": "https://files.pythonhosted.org/packages/24/96/15206fa1cc9bb511b9226ae213cdd572c3feb39fdad99aa0ec0c1ccd6a41/bitarray-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d03d9f1e6bdc99161a1dbc004f8ed93b",
          "sha256": "161038f0b8db32d68dbd6a185b81c6355025e954cdeb108186af272fe49f571e"
        },
        "downloads": 3278,
        "filename": "bitarray-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d03d9f1e6bdc99161a1dbc004f8ed93b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 33950,
        "upload_time": "2008-09-10T03:04:39",
        "url": "https://files.pythonhosted.org/packages/4b/e8/a28d08c226df752181025b2f5af380ca7c023ede8021f8777f39c2bf5052/bitarray-0.2.2.tar.gz"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ba762db8fc4a9656260afa531e145f14",
          "sha256": "f0a16a2493483f948ee372caf017698389c08647e5dfff2c8e02767a752056eb"
        },
        "downloads": 3394,
        "filename": "bitarray-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ba762db8fc4a9656260afa531e145f14",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39163,
        "upload_time": "2008-09-17T01:55:52",
        "url": "https://files.pythonhosted.org/packages/08/81/96aac89e78bc2109572029330008d215bbbe4faadddd33676f8ea7dd853f/bitarray-0.2.3.tar.gz"
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c352badd1bcf8c50145c8cac89b5c33d",
          "sha256": "3d3f41b197ba6a7ca45a08f39dc0d3b93e43a706c88a929846a4f98e3a92dc27"
        },
        "downloads": 3269,
        "filename": "bitarray-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c352badd1bcf8c50145c8cac89b5c33d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39262,
        "upload_time": "2008-09-22T05:12:09",
        "url": "https://files.pythonhosted.org/packages/70/c1/78f3e109c81f9605c168d1378fd45376087ea2da4f5f2777a2444347991c/bitarray-0.2.4.tar.gz"
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3bb5555530365c46a160469aa330e5ad",
          "sha256": "ac7f89438eff0cf70d4d96f0ae1e4e7cb28d54c5fd125ee185c0b6a86459169d"
        },
        "downloads": 3293,
        "filename": "bitarray-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "3bb5555530365c46a160469aa330e5ad",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 40921,
        "upload_time": "2008-09-23T15:06:08",
        "url": "https://files.pythonhosted.org/packages/ff/80/bd4295babc33a84ee0b05b09ee3dcee66631ab0a66566a129a59b24bcaa8/bitarray-0.2.5.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7b8b73479337416648799dfdf25a2201",
          "sha256": "bbfd83f186834fffd76178cde3e771da24e5f98bf0db51ed5949dd5c68db0ad3"
        },
        "downloads": 3268,
        "filename": "bitarray-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7b8b73479337416648799dfdf25a2201",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 40485,
        "upload_time": "2008-10-01T01:19:23",
        "url": "https://files.pythonhosted.org/packages/ca/e6/abbfc26432de5f39ae5d496c79bfb9ed5231dd262ef65a61f38cf9b6dc74/bitarray-0.3.0.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "03a2660c997fbe95cb49be8e760aec52",
          "sha256": "e5ee079f81f9739a08ea967be333db7a7d99a1c2f142a6295850c2fcc19fb62b"
        },
        "downloads": 3291,
        "filename": "bitarray-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "03a2660c997fbe95cb49be8e760aec52",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 40686,
        "upload_time": "2008-10-12T06:21:50",
        "url": "https://files.pythonhosted.org/packages/79/08/fd03483af50e9dda39f89d7f278aaf4285f022c7981efe45f29ba344d667/bitarray-0.3.1.tar.gz"
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e3de642f8121cea8b98801b311c0d0cd",
          "sha256": "6ff58d5dfd3e5b64eea2a3670de26e4be7327c8753a6523c8a80de369a640c21"
        },
        "downloads": 3891,
        "filename": "bitarray-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e3de642f8121cea8b98801b311c0d0cd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41660,
        "upload_time": "2008-10-20T02:41:07",
        "url": "https://files.pythonhosted.org/packages/1c/fd/58ce26ca429a9187f755912553ffaea472531297086cd5edbc5e04231ef5/bitarray-0.3.2.tar.gz"
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b745560982b4eb35c0c9ac6a2eab2d05",
          "sha256": "565e3fa1242b99795c201e2adc44643cd6c8d36a2eac13bf4afa466204cf68d3"
        },
        "downloads": 3259,
        "filename": "bitarray-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b745560982b4eb35c0c9ac6a2eab2d05",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38211,
        "upload_time": "2008-12-14T05:38:06",
        "url": "https://files.pythonhosted.org/packages/b6/72/7956cfbd7efe940cafae9b0eb479b8f665322a371ea0380661f022b17191/bitarray-0.3.3.tar.gz"
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7ec37ca4b8bd3713ebe9d337484585a8",
          "sha256": "7fb334c763f30b2da159662a7d72723a77ffe7d9fbd8be10aa8ba6fe39e59a63"
        },
        "downloads": 3785,
        "filename": "bitarray-0.3.4-py2.5-win32.egg",
        "has_sig": false,
        "md5_digest": "7ec37ca4b8bd3713ebe9d337484585a8",
        "packagetype": "bdist_egg",
        "python_version": "2.5",
        "size": 53027,
        "upload_time": "2009-01-15T20:22:15",
        "url": "https://files.pythonhosted.org/packages/24/95/ee2f52edbb6af377f9f119e436fede506c95649f541b7e5b3cf2cbc05549/bitarray-0.3.4-py2.5-win32.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6b49a3b50c82d5adfde6e75f6e917ee0",
          "sha256": "d8e5e0aa8603d63b454ab3c8e25e6311bb27ca8bf469e03b420730fb26437dbc"
        },
        "downloads": 3474,
        "filename": "bitarray-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6b49a3b50c82d5adfde6e75f6e917ee0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38338,
        "upload_time": "2009-01-15T04:38:24",
        "url": "https://files.pythonhosted.org/packages/2a/81/f2acf88511e99f658e1d55fd1a7a3ec2c958e0be2f5fe43aa17c4c9779b4/bitarray-0.3.4.tar.gz"
      }
    ],
    "0.3.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "666188abdf378ee48a37438aaab29552",
          "sha256": "410dad6f5113c67fed2a5013f37c27982b6ed0ed0a35a8065b2b3b14689b3590"
        },
        "downloads": 4148,
        "filename": "bitarray-0.3.5-py2.5-win32.egg",
        "has_sig": false,
        "md5_digest": "666188abdf378ee48a37438aaab29552",
        "packagetype": "bdist_egg",
        "python_version": "2.5",
        "size": 54079,
        "upload_time": "2009-04-07T03:17:41",
        "url": "https://files.pythonhosted.org/packages/7d/bd/ca44472ffaa0376cd2b202a86afa99cbc37ef237650f1046c15a98c0ee56/bitarray-0.3.5-py2.5-win32.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c4b178699532c29fde5d655b96611ba9",
          "sha256": "c5877b0e46768219e08ed3de887a5fa9c18c321dda99e3da738c157c36946dcf"
        },
        "downloads": 4185,
        "filename": "bitarray-0.3.5-py2.6-win32.egg",
        "has_sig": false,
        "md5_digest": "c4b178699532c29fde5d655b96611ba9",
        "packagetype": "bdist_egg",
        "python_version": "2.6",
        "size": 55371,
        "upload_time": "2010-01-15T18:31:51",
        "url": "https://files.pythonhosted.org/packages/fe/5d/7825208e85f1a38a36a771c7728fe1557e2d44955a9240bb1b68b7cae713/bitarray-0.3.5-py2.6-win32.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1f9bf863634ca89c31025279618fc49a",
          "sha256": "9da9ff492e54cf246145a2bd8198b90db5006593394d2d44cecaae3cbfd57fad"
        },
        "downloads": 3794,
        "filename": "bitarray-0.3.5-py2.6-win-amd64.egg",
        "has_sig": false,
        "md5_digest": "1f9bf863634ca89c31025279618fc49a",
        "packagetype": "bdist_egg",
        "python_version": "2.6",
        "size": 55198,
        "upload_time": "2010-01-15T18:32:22",
        "url": "https://files.pythonhosted.org/packages/8e/e2/efb965875b2383031419fee889ecbf3d9299000a14ff39a40ed0cebe872d/bitarray-0.3.5-py2.6-win-amd64.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8ed0da96a6b926d07c7181ec5d767b38",
          "sha256": "3a5eb92dbb0e09589f3129544b1a9036f2b36ddcdee3fabca5d1094dfd3f2b10"
        },
        "downloads": 4438,
        "filename": "bitarray-0.3.5-py2.7-win32.egg",
        "has_sig": false,
        "md5_digest": "8ed0da96a6b926d07c7181ec5d767b38",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 55232,
        "upload_time": "2011-02-24T19:17:17",
        "url": "https://files.pythonhosted.org/packages/f5/d9/87f3cfea82a5a7cdf82bda6e9a31a6bda2b37c18e8b98a7641b81fdbc824/bitarray-0.3.5-py2.7-win32.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6ad446f81b3bbc6ae9b07e5ee3b9a477",
          "sha256": "5f962ff2651b01a815cc67ccb8af50a0181f1248cdc52be2d68d601e3af3ecaf"
        },
        "downloads": 3758,
        "filename": "bitarray-0.3.5-py2.7-win-amd64.egg",
        "has_sig": false,
        "md5_digest": "6ad446f81b3bbc6ae9b07e5ee3b9a477",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 55045,
        "upload_time": "2011-02-24T19:16:36",
        "url": "https://files.pythonhosted.org/packages/74/d0/d239ca9ccc6c1e744d5718826117b8741240c32113bdbb5b559478ffda6f/bitarray-0.3.5-py2.7-win-amd64.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "322a25e04e7aece5e028e5b068329291",
          "sha256": "cebf82b533dc7ffdd1b8b669633e754e2e1a00016bf27865fdd3ea6ca28aaf51"
        },
        "downloads": 18295,
        "filename": "bitarray-0.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "322a25e04e7aece5e028e5b068329291",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 42009,
        "upload_time": "2009-04-07T03:06:57",
        "url": "https://files.pythonhosted.org/packages/cd/bd/a0004437d0baff149c2f5a86ead23aa7e4a67413de40f7286e8cd85266af/bitarray-0.3.5.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3a9995865cf4c835abf40ff3c5237bde",
          "sha256": "23a03dffdb3e5c7cd5990652ec5a0b4497f43140dbad87bfcf3a75d6ed875341"
        },
        "downloads": 3654,
        "filename": "bitarray-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3a9995865cf4c835abf40ff3c5237bde",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39064,
        "upload_time": "2011-12-30T02:44:30",
        "url": "https://files.pythonhosted.org/packages/35/5a/d16058c255be8df3bdf91be825fdf690cb65204c43a5410703316db09de3/bitarray-0.4.0.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "19e49ef6d2e74d14dc78bd1ff54b12d9",
          "sha256": "210a4e6f55c2ecaaa4b0352771fdc6aab35711e47921021a12632913ccbd06f8"
        },
        "downloads": 3685,
        "filename": "bitarray-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "19e49ef6d2e74d14dc78bd1ff54b12d9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 40826,
        "upload_time": "2012-01-23T20:11:40",
        "url": "https://files.pythonhosted.org/packages/9e/b3/ae0531d7b0b1ab9b54a87fe06d8856a70669a3cdba2c410153e2ae73be71/bitarray-0.5.0.tar.gz"
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bed26368db217cde6ff8ef162401309a",
          "sha256": "b607cca3e4059f80987d957f3cf3996c7ecd178dd851308d0227f795c2966037"
        },
        "downloads": 2961,
        "filename": "bitarray-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bed26368db217cde6ff8ef162401309a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 40057,
        "upload_time": "2012-02-01T03:24:49",
        "url": "https://files.pythonhosted.org/packages/4a/22/437ae17e117bb40bdd3f4e3df1eceb390370a24e53816180c48171428144/bitarray-0.5.1.tar.gz"
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "057680ef69992bf134d6d6c194609da9",
          "sha256": "51f01b8b2b8c9f9e0378b0b973f49b351a62d027eff9c0802b7656856d88555a"
        },
        "downloads": 3110,
        "filename": "bitarray-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "057680ef69992bf134d6d6c194609da9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41694,
        "upload_time": "2012-02-03T02:42:12",
        "url": "https://files.pythonhosted.org/packages/b6/bb/9bb030285dcd890002df9a472276208236aec3ec4f35dbeee70b9a3ec930/bitarray-0.5.2.tar.gz"
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2cd86472146fe2f49bffe10ff1845f5d",
          "sha256": "b6d4c45add021811388882d792c781b3cd886633355813c0c02b057617b4c8d1"
        },
        "downloads": 3485,
        "filename": "bitarray-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2cd86472146fe2f49bffe10ff1845f5d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 44515,
        "upload_time": "2012-02-07T04:01:45",
        "url": "https://files.pythonhosted.org/packages/71/6f/07234a7d5c181793fdaef174b8f4587fb22769de30d5e8ecdbe9e1a8a567/bitarray-0.6.0.tar.gz"
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e05c4aaf5df32a0d7c040c0c69311edc",
          "sha256": "d6f7caa14f678a52467da361b56e6ea9ff888d1b48c69367468c2f7361ad0239"
        },
        "downloads": 4361,
        "filename": "bitarray-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e05c4aaf5df32a0d7c040c0c69311edc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45675,
        "upload_time": "2012-02-16T02:14:24",
        "url": "https://files.pythonhosted.org/packages/8e/16/93ed475097ef4fbf85be9c00b4779320959da75a794ed3bcd9ef94f910e9/bitarray-0.7.0.tar.gz"
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a1e80e63aec650721826d385b017201b",
          "sha256": "203426d96bf43adc5220a2f66a3c18fedcf009ce98de419a8a580ec7695424d1"
        },
        "downloads": 26200,
        "filename": "bitarray-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a1e80e63aec650721826d385b017201b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 46455,
        "upload_time": "2012-04-04T18:24:32",
        "url": "https://files.pythonhosted.org/packages/8e/6b/b6b11c76784d379bdd0faa60346fd3caf20626e0bac3486856ce0ef60cea/bitarray-0.8.0.tar.gz"
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3825184f54f4d93508a28031b4c65d3b",
          "sha256": "7da501356e48a83c61f479393681c1bc4b94e5a34ace7e08cb29e7dd9290ab18"
        },
        "downloads": 792582,
        "filename": "bitarray-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3825184f54f4d93508a28031b4c65d3b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 46877,
        "upload_time": "2013-03-31T02:08:49",
        "url": "https://files.pythonhosted.org/packages/0a/da/9f61d28a20c42b4963334efacfd257c85150ede96d0cd2509b37da69da47/bitarray-0.8.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "3825184f54f4d93508a28031b4c65d3b",
        "sha256": "7da501356e48a83c61f479393681c1bc4b94e5a34ace7e08cb29e7dd9290ab18"
      },
      "downloads": 792582,
      "filename": "bitarray-0.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3825184f54f4d93508a28031b4c65d3b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 46877,
      "upload_time": "2013-03-31T02:08:49",
      "url": "https://files.pythonhosted.org/packages/0a/da/9f61d28a20c42b4963334efacfd257c85150ede96d0cd2509b37da69da47/bitarray-0.8.1.tar.gz"
    }
  ]
}