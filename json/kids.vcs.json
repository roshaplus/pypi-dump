{
  "info": {
    "author": "Valentin Lab",
    "author_email": "valentin.lab@kalysto.org",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=========================\r\nkids.vcs\r\n=========================\r\n\r\n.. image:: http://img.shields.io/pypi/v/kids.vcs.svg?style=flat\r\n   :target: https://pypi.python.org/pypi/kids.vcs/\r\n   :alt: Latest PyPI version\r\n\r\n.. image:: http://img.shields.io/pypi/dm/kids.vcs.svg?style=flat\r\n   :target: https://pypi.python.org/pypi/kids.vcs/\r\n   :alt: Number of PyPI downloads\r\n\r\n.. image:: http://img.shields.io/travis/0k/kids.vcs/master.svg?style=flat\r\n   :target: https://travis-ci.org/0k/kids.vcs/\r\n   :alt: Travis CI build status\r\n\r\n.. image:: http://img.shields.io/coveralls/0k/kids.vcs/master.svg?style=flat\r\n   :target: https://coveralls.io/r/0k/kids.vcs\r\n   :alt: Test coverage\r\n\r\n\r\n\r\n``kids.vcs`` is a Python library providing GIT helpers. Would have\r\nnamed it ``kids.git`` if it didn't messed everything with github.\r\n\r\nIt's part of 'Kids' (for Keep It Dead Simple) library.\r\n\r\n\r\nFeatures\r\n========\r\n\r\nusing ``kids.vcs``:\r\n\r\n- You can manage and access your git repository, commits, logs, or git\r\n  config.\r\n\r\nCompatibility\r\n=============\r\n\r\nTis code is python2 and python3 ready. It wasn't tested on windows.\r\n\r\n\r\nInstallation\r\n============\r\n\r\nYou don't need to download the GIT version of the code as ``kids.vcs`` is\r\navailable on the PyPI. So you should be able to run::\r\n\r\n    pip install kids.vcs\r\n\r\nIf you have downloaded the GIT sources, then you could add install\r\nthe current version via traditional::\r\n\r\n    python setup.py install\r\n\r\nAnd if you don't have the GIT sources but would like to get the latest\r\nmaster or branch from github, you could also::\r\n\r\n    pip install git+https://github.com/0k/kids.vcs\r\n\r\nOr even select a specific revision (branch/tag/commit)::\r\n\r\n    pip install git+https://github.com/0k/kids.vcs@master\r\n\r\n\r\nUsage\r\n=====\r\n\r\nLet's play with a new git repository, let's first create temporary\r\ndirectory::\r\n\r\n    >>> from __future__ import print_function\r\n\r\n    >>> import tempfile, os\r\n    >>> old_cwd = os.getcwd()\r\n    >>> tmpdir = tempfile.mkdtemp()\r\n    >>> os.chdir(tmpdir)\r\n\r\nLet's now create a real git repository::\r\n\r\n    >>> from kids.sh import wrap\r\n\r\n    >>> _ = wrap(\"\"\"\r\n    ...\r\n    ...     ## Creating repository\r\n    ...     mkdir repos\r\n    ...     cd repos\r\n    ...     git init .\r\n    ...\r\n    ...     git config user.email \"committer@example.com\"\r\n    ...     git config user.name \"The Committer\"\r\n    ...\r\n    ... \"\"\")\r\n\r\nWe can now already access it::\r\n\r\n    >>> from kids.vcs import GitRepos\r\n\r\n    >>> r = GitRepos(\"repos\")\r\n\r\nBy default, the current directory is used and the top-most git repository\r\nthat contains the current directory will be used as the master git repository.\r\n\r\n\r\nAccess core informations\r\n------------------------\r\n\r\nYou can get interesting information fron the git repository itself::\r\n\r\n    >>> print(r.toplevel)\r\n    /.../repos\r\n\r\n    >>> r.bare\r\n    False\r\n\r\n    >>> print(r.gitdir)\r\n    /.../repos/.git\r\n\r\n\r\nRead git config\r\n---------------\r\n\r\nWe can access the config thanks to::\r\n\r\n    >>> r.config\r\n    <...GitConfig...>\r\n\r\n    >>> print(r.config[\"core.filemode\"])\r\n    true\r\n\r\n\r\nGit commit access\r\n-----------------\r\n\r\nWe can access interesting information per commit, for the following\r\nwe need actually to commit something::\r\n\r\n    >>> _ = wrap(r\"\"\"\r\n    ...     cd repos\r\n    ...     ## Adding first file\r\n    ...     echo 'Hello' > a\r\n    ...     git add a\r\n    ...     git commit -m 'new: first commit' \\\r\n    ...         --author 'Bob <bob@example.com>' \\\r\n    ...         --date '2000-01-01 10:00:00'\r\n    ...     git tag 0.0.1\r\n    ...\r\n    ...     ## Adding second file\r\n    ...     echo 'Second file' > b\r\n    ...     git add b\r\n    ...\r\n    ...     ## Notice there are no section here.\r\n    ...     git commit -m 'added ``b``, what a summary !' \\\r\n    ...         --author 'Alice <alice@example.com>' \\\r\n    ...         --date '2000-01-02 11:00:00'\r\n    ...     git tag 0.0.2\r\n    ... \"\"\")\r\n\r\nNow we can::\r\n\r\n    >>> r.commit(\"HEAD\")\r\n    <GitCommit 'HEAD'>\r\n\r\nAnd several informations are available::\r\n\r\n    >>> print(r.commit(\"HEAD\").author_name)\r\n    Alice\r\n    >>> print(r.commit(\"master\").subject)\r\n    added ``b``, what a summary !\r\n\r\nYou can access to all of these::\r\n\r\n    >>> from kids.vcs import GIT_FORMAT_KEYS\r\n\r\n    >>> print(\", \".join(sorted(GIT_FORMAT_KEYS)))\r\n    author_date, author_date_timestamp, author_name, body,\r\n    committer_date_timestamp, committer_name, raw_body, sha1, subject\r\n\r\n\r\nThere's a convienience attribute ``date`` also::\r\n\r\n    >>> print(r.commit(\"0.0.2\").date)\r\n    2000-01-02\r\n\r\n\r\nTags\r\n----\r\n\r\nYou can get the list of tags::\r\n\r\n    >>> r.tags\r\n    [<GitCommit ...'0.0.1'>, <GitCommit ...'0.0.2'>]\r\n\r\n\r\nLogs\r\n----\r\n\r\nYou can access all commits via::\r\n\r\n    >>> list(r.log())\r\n    [<GitCommit ...>, <GitCommit ...>]\r\n\r\nand provide wich commit ancestry to include or to exclude (see ``git log``)::\r\n\r\n    >>> list(r.log(includes=[\"HEAD\", ], excludes=[\"0.0.1\", ]))\r\n    [<GitCommit ...>]\r\n\r\n\r\nContributing\r\n============\r\n\r\nAny suggestion or issue is welcome. Push request are very welcome,\r\nplease check out the guidelines.\r\n\r\n\r\nPush Request Guidelines\r\n-----------------------\r\n\r\nYou can send any code. I'll look at it and will integrate it myself in\r\nthe code base and leave you as the author. This process can take time and\r\nit'll take less time if you follow the following guidelines:\r\n\r\n- check your code with PEP8 or pylint. Try to stick to 80 columns wide.\r\n- separate your commits per smallest concern.\r\n- each commit should pass the tests (to allow easy bisect)\r\n- each functionality/bugfix commit should contain the code, tests,\r\n  and doc.\r\n- prior minor commit with typographic or code cosmetic changes are\r\n  very welcome. These should be tagged in their commit summary with\r\n  ``!minor``.\r\n- the commit message should follow gitchangelog rules (check the git\r\n  log to get examples)\r\n- if the commit fixes an issue or finished the implementation of a\r\n  feature, please mention it in the summary.\r\n\r\nIf you have some questions about guidelines which is not answered here,\r\nplease check the current ``git log``, you might find previous commit that\r\nwould show you how to deal with your issue.\r\n\r\n\r\nLicense\r\n=======\r\n\r\nCopyright (c) 2015 Valentin Lab.\r\n\r\nLicensed under the `BSD License`_.\r\n\r\n.. _BSD License: http://raw.github.com/0k/kids.vcs/master/LICENSE\r\n\r\nChangelog\r\n=========\r\n\r\n0.0.1 (2015-02-05)\r\n------------------\r\n\r\n- First import. [Valentin Lab]",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/0k/kids.vcs",
    "keywords": "",
    "license": "UNKNOWN",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kids.vcs",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/kids.vcs/",
    "release_url": "https://pypi.org/project/kids.vcs/0.0.1/",
    "requires_python": null,
    "summary": "Kids VCS management library.",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6983c64e4aff73869ae37cb4a7664672",
          "sha256": "4a9eeef66fc14e787d1a35637dfb9943b185c79c29ba28549b520e7755424a4d"
        },
        "downloads": 1575,
        "filename": "kids.vcs-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6983c64e4aff73869ae37cb4a7664672",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8531,
        "upload_time": "2015-02-06T08:07:20",
        "url": "https://files.pythonhosted.org/packages/29/15/9ca943478a8d4a0b7a2b3d56ffd10a0a73a0588e713bff19453c16d10e43/kids.vcs-0.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6983c64e4aff73869ae37cb4a7664672",
        "sha256": "4a9eeef66fc14e787d1a35637dfb9943b185c79c29ba28549b520e7755424a4d"
      },
      "downloads": 1575,
      "filename": "kids.vcs-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6983c64e4aff73869ae37cb4a7664672",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8531,
      "upload_time": "2015-02-06T08:07:20",
      "url": "https://files.pythonhosted.org/packages/29/15/9ca943478a8d4a0b7a2b3d56ffd10a0a73a0588e713bff19453c16d10e43/kids.vcs-0.0.1.tar.gz"
    }
  ]
}