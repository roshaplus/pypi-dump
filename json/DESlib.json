{
  "info": {
    "author": "Rafael M. O. Cruz, L. G. Hafemann",
    "author_email": "rafaelmenelau@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": ".. image:: https://readthedocs.org/projects/deslib/badge/?version=latest\n    :target: http://deslib.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://travis-ci.org/Menelau/DESlib.svg?branch=master\n    :target: https://travis-ci.org/Menelau/DESlib\n\n.. image:: https://codecov.io/gh/Menelau/DESlib/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/Menelau/DESlib\n\n.. image:: https://landscape.io/github/Menelau/DESlib/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/Menelau/DESlib/master\n   :alt: Code Health\n\n.. image:: https://img.shields.io/badge/License-BSD%203--Clause-blue.svg\n    :target: https://opensource.org/licenses/BSD-3-Clause\n\n\nDESlib\n========\n\nDESlib is an easy to use ensemble learning library focusing the implementation of the state-of-the-art techniques for dynamic classifier and ensemble selection.\nThe library is is based on scikit-learn_, using the same method signature: **fit**, **predict**, **predict_proba** and **score**.\nAll dynamic selection techniques were implemented according to the definitions from [1]_.\n\nDynamic Selection:\n-------------------\n\nDynamic Selection (DS) refers to techniques in which the base classifiers are selected\non the fly, according to each new sample to be classified. Only the most competent, or an ensemble containing the most competent classifiers is selected to predict\nthe label of a specific test sample. The rationale for such techniques is that not every classifier in\nthe pool is an expert in classifying all unknown samples; rather, each base classifier is an expert in\na different local region of the feature space.\n\nDS is one of the most promising MCS approaches due to the fact that\nmore and more works are reporting the superior performance of such techniques over static combination methods. Such techniques\nhave achieved better classification performance especially when dealing with small-sized and imbalanced datasets.\n\nInstallation:\n-------------\n\nThe package can be installed using pip:\n\nStable version:\n\n.. code-block:: bash\n\n    pip install deslib\n\nLatest version (under development):\n\n.. code-block:: bash\n\n    pip install git+https://github.com/Menelau/DESlib\n\n\nDependencies:\n-------------\n\nDESlib is tested to work with Python 3.5, and 3.6. The dependency requirements are:\n\n* scipy(>=0.13.3)\n* numpy(>=1.10.4)\n* scikit-learn(>=0.19.0)\n\nThese dependencies are automaticatically installed using the pip commands above.\n\nDescription:\n------------\n\nThe library is divided into four modules:\n\n1. deslib.des: Implementation of DES techniques.\n2. deslib.dcs: Implementation of DCS techniques.\n3. deslib.static: Implementation of baseline ensemble methods.\n4. deslib.util: A collection of aggregation functions and diversity measures for ensemble of classifiers.\n\n* DES techniques currently available are:\n    1. META-DES [7]_ [8]_ [15]_\n    2. K-Nearest-Oracle-Eliminate (KNORA-E) [3]_\n    3. K-Nearest-Oracle-Union (KNORA-U) [3]_\n    4. Dynamic Ensemble Selection-Performance(DES-P) [12]_\n    5. K-Nearest-Output Profiles (KNOP) [9]_\n    6. Randomized Reference Classifier (DES-RRC) [10]_\n    7. DES Kullback-Leibler Divergence (DES-KL) [12]_\n    8. DES-Exponential [21]_\n    9. DES-Logarithmic [11]_\n    10. DES-Minimum Difference [21]_\n    11. DES-Clustering [16]_\n    12. DES-KNN [16]_\n\n* DCS techniques currently available are:\n    1. Modified Classifier Rank (Rank) [19]_\n    2. Overall Locall Accuracy (OLA) [4]_\n    3. Local Class Accuracy (LCA) [4]_\n    4. Modified Local Accuracy (MLA) [23]_\n    5. Multiple Classifier Behaviour (MCB) [5]_\n    6. A Priori Selection (A Priori) [6]_\n    7. A Posteriori Selection (A Posteriori) [6]_\n\n* Baseline methods:\n    1. Oracle [20]_\n    2. Single Best [2]_\n    3. Static Selection [2]_\n\nVariations of each DES techniques are also provided by the library (e.g., different versions of the META-DES framework).\nMoreover, each DES technique can be used as Dynamic Selection, Dynamic Weighting or a Hybrid version which includes dynamic selection + weighting.\nThe library also offers the implementation of methods which can be applied to DS techniques in order to improve the classification\naccuracy such as the Dynamic Frienemy Pruning (DFP) [13]_.\n\nExamples:\n---------\n\nHere we show an example using the KNORA-E method using random forest as a pool of classifiers:\n\n.. code-block:: python\n\n    from sklearn.ensemble import RandomForestClassifier\n    from deslib.des.knora_e import KNORAE\n\n\n    # Train a pool of 10 classifiers\n    pool_classifiers = RandomForestClassifier(n_estimators=10)\n    pool_classifiers.fit(X_train, y_train)\n\n    # Initialize the DES model\n    knorae = KNORAE(pool_classifiers)\n\n    # Preprocess the Dynamic Selection dataset (DSEL)\n    knorae.fit(X_dsel, y_dsel)\n\n    # Predict new examples:\n    knorae.predict(X_test)\n\nThe library accepts any list of classifiers (from scikit-learn) as input, including a list containing different classifier models (heterogeneous ensembles).\nMore examples to use the API can be found in the documentation and im the Examples directory.\n\nReferences:\n-----------\n\n.. [1] : R. M. O. Cruz, R. Sabourin, and G. D. Cavalcanti, \u201cDynamic classifier selection: Recent advances and perspectives,\u201d Information Fusion, vol. 41, pp. 195 \u2013 216, 2018.\n\n.. [2] : A. S. Britto, R. Sabourin, L. E. S. de Oliveira, Dynamic selection of classifiers - A comprehensive review, Pattern Recognition 47 (11) (2014) 3665\u20133680.\n\n.. [3] : A. H. R. Ko, R. Sabourin, u. S. Britto, Jr., From dynamic classifier selection to dynamic ensemble selection, Pattern Recognition 41 (2008) 1735\u20131748.\n\n.. [4] : K. Woods, W. P. Kegelmeyer, Jr., K. Bowyer, Combination of multiple classifiers using local accuracy estimates, IEEE Transactions on Pattern Analysis Machine Intelligence 19 (1997) 405\u2013410.\n\n.. [5] : G. Giacinto, F. Roli, Dynamic classifier selection based on multiple classifier behaviour, Pattern Recognition 34 (2001) 1879\u20131881.\n\n.. [6] : L. Didaci, G. Giacinto, F. Roli, G. L. Marcialis, A study on the performances of dynamic classifier selection based on local accuracy estimation, Pattern Recognition 38 (11) (2005) 2188\u20132191.\n\n.. [7] : R. M. O. Cruz, R. Sabourin, G. D. C. Cavalcanti, T. I. Ren, META-DES: A dynamic ensemble selection framework using meta-learning, Pattern Recognition 48 (5) (2015) 1925\u20131935.\n\n.. [8] : Cruz, R.M., Sabourin, R. and Cavalcanti, G.D., 2015, July. META-DES. H: a dynamic ensemble selection technique using meta-learning and a dynamic weighting approach. In Neural Networks (IJCNN), 2015 International Joint Conference on (pp. 1-8)\n\n.. [9] : P. R. Cavalin, R. Sabourin, C. Y. Suen, Dynamic selection approaches for multiple classifier systems, Neural Computing and Applications 22 (3-4) (2013) 673\u2013688.\n\n.. [10] : T.Woloszynski, M. Kurzynski, A probabilistic model of classifier competence for dynamic ensemble selection, Pattern Recognition 44 (2011) 2656\u20132668.\n\n.. [11] : T.Woloszynski, M. Kurzynski, A measure of competence based on randomized reference classifier for dynamic ensemble selection, in: International Conference on Pattern Recognition (ICPR), 2010, pp. 4194\u20134197.\n\n.. [12] : T. Woloszynski, M. Kurzynski, P. Podsiadlo, G. W. Stachowiak, A measure of competence based on random classification for dynamic ensemble selection, Information Fusion 13 (3) (2012) 207\u2013213.\n\n.. [13] : Oliveira, D.V.R., Cavalcanti, G.D.C. and Sabourin, R., Online Pruning of Base Classifiers for Dynamic Ensemble Selection, Pattern Recognition, vol. 72, December 2017, pp 44-58.\n\n.. [14] : Cruz RM, Zakane HH, Sabourin R, Cavalcanti GD. Dynamic Ensemble Selection VS K-NN: why and when Dynamic Selection obtains higher classification performance?.\n\n.. [15] : R. M. O. Cruz, R. Sabourin, G. D. C. Cavalcanti, META-DES.Oracle: Meta-learning and feature selection for dynamic ensemble selection, Information Fusion 38 (2017) 84\u2013103.Nov 30;38:84-103.\n\n.. [16] : R. G. F. Soares, A. Santana, A. M. P. Canuto, M. C. P. de Souto, Using accuracy and diversity to select classifiers to build ensembles, Proceedings of the International Joint Conference on Neural Networks (2006) 1310\u20131316.\n\n.. [17] : L. I. Kuncheva, Combining Pattern Classifiers: Methods and Algorithms, Wiley-Interscience, 2004.\n\n.. [18] : Shipp, Catherine A., and Ludmila I. Kuncheva. \"Relationships between combination methods and measures of diversity in combining classifiers.\" Information fusion 3.2 (2002): 135-148.\n\n.. [19] : M. Sabourin, A. Mitiche, D. Thomas, G. Nagy, Classifier combination for handprinted digit recognition, International Conference on Document Analysis and Recognition (1993) 163\u2013166.\n\n.. [20] : L. I. Kuncheva, A theoretical study on six classifier fusion strategies, IEEE Transactions on Pattern Analysis and Machine Intelligence 24 (2) (2002) 281\u2013286.\n\n.. [21] : B. Antosik, M. Kurzynski, New measures of classifier competence \u2013 heuristics and application to the design of multiple classifier systems., in: Computer recognition systems 4., 2011, pp. 197\u2013206.\n\n.. [22] : Smith, M.R., Martinez, T. and Giraud-Carrier, C., 2014. An instance level analysis of data complexity. Machine learning, 95(2), pp.225-256\n\n.. [23] : P. C. Smits, Multiple classifier systems for supervised remote sensing image classification based on dynamic classifier selection, IEEE Transactions on Geoscience and Remote Sensing 40 (4) (2002) 801\u2013813.\n\n.. _scikit-learn: http://scikit-learn.org/stable/\n\n.. _numpy: http://www.numpy.org/\n\n.. _scipy: https://www.scipy.org/\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Menelau/DESlib",
    "keywords": "",
    "license": "BSD 3-clause \"New\" or \"Revised License\"",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DESlib",
    "platform": "",
    "project_url": "https://pypi.org/project/DESlib/",
    "release_url": "https://pypi.org/project/DESlib/0.1/",
    "requires_dist": [
      "scipy (>=0.13.3)",
      "numpy (>=1.10.4)",
      "scikit-learn (>=0.19.0)"
    ],
    "requires_python": ">=3",
    "summary": "Implementation of Dynamic Ensemble Selection methods",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "728d9923683949e08cbdb1fc5be34e00",
          "sha256": "9c1c6763937cfe55775828cc8022642f774f450e3e4d215b6847e34b58b7963e"
        },
        "downloads": -1,
        "filename": "DESlib-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "728d9923683949e08cbdb1fc5be34e00",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 103643,
        "upload_time": "2018-01-31T20:55:09",
        "url": "https://files.pythonhosted.org/packages/f7/b6/309d2716b33ee687d49fa6c17c6396ba2d467ac265c8bbe3ed9af2405452/DESlib-0.1.2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c2f097b720a06d5eef3ba56c42dc216b",
          "sha256": "69c4c73fa8395aebbc760c27717226f8cd12341c1aac7c1a71fc0d4c7e691cd7"
        },
        "downloads": -1,
        "filename": "DESlib-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c2f097b720a06d5eef3ba56c42dc216b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 94370,
        "upload_time": "2018-01-31T20:55:11",
        "url": "https://files.pythonhosted.org/packages/32/00/18f9184117912f2df57ebab8c9f4613e362ff0edabf5e3b11f9dd9f25ec6/DESlib-0.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "728d9923683949e08cbdb1fc5be34e00",
        "sha256": "9c1c6763937cfe55775828cc8022642f774f450e3e4d215b6847e34b58b7963e"
      },
      "downloads": -1,
      "filename": "DESlib-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "728d9923683949e08cbdb1fc5be34e00",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 103643,
      "upload_time": "2018-01-31T20:55:09",
      "url": "https://files.pythonhosted.org/packages/f7/b6/309d2716b33ee687d49fa6c17c6396ba2d467ac265c8bbe3ed9af2405452/DESlib-0.1.2-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "c2f097b720a06d5eef3ba56c42dc216b",
        "sha256": "69c4c73fa8395aebbc760c27717226f8cd12341c1aac7c1a71fc0d4c7e691cd7"
      },
      "downloads": -1,
      "filename": "DESlib-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c2f097b720a06d5eef3ba56c42dc216b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 94370,
      "upload_time": "2018-01-31T20:55:11",
      "url": "https://files.pythonhosted.org/packages/32/00/18f9184117912f2df57ebab8c9f4613e362ff0edabf5e3b11f9dd9f25ec6/DESlib-0.1.2.tar.gz"
    }
  ]
}