{
  "info": {
    "author": "antb123",
    "author_email": "awbarker@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: Chinese (Simplified)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "[![Build Status](https://travis-ci.org/StellarCN/py-stellar-base.svg)](https://travis-ci.org/StellarCN/py-stellar-base) [![AppVeyor](https://img.shields.io/appveyor/ci/overcat/py-stellar-base-96yof.svg)](https://ci.appveyor.com/project/overcat/py-stellar-base-96yof) [![PyPI](https://img.shields.io/pypi/v/stellar-base.svg)](https://pypi.python.org/pypi/stellar-base)\n# Installation\n \u00a0 \u00a0`pip install stellar-base`\n# Quick Start\n\n## 1. Create a Stellar key pair\nThere are 2 methods for generating a key pair in `py-stellar-base`.\n\n### 1.1 Random generation\n```python\nfrom stellar_base.keypair import Keypair\nkp = Keypair.random()\n```    \n\n### 1.2 Deterministic generation\nIn this method the key pair is deterministically generated from a mnemonic string, also known as \"seed phrase\".\nFirst we generate a Unicode mnemonic string:\n```python\nfrom stellar_base.utils import StellarMnemonic\nsm = StellarMnemonic(\"chinese\") # here we use chinese, but default language is 'english'\nm = sm.generate() \n# or m = u'\u57df \u76d1 \u60dc \u56fd \u671f \u78b1 \u73cd \u7ee7 \u9020 \u76d1 \u5265 \u7535' (must add u'' before the string if using Python 2)\n```\nThe call `sm.generate()` prints out the generated mnemonic string, which is a phrase made of random words separated by\nspaces. You should either write this phrase down or memorize it. Do not share your mnemonic string with anyone.\n\nNow we use the mnemonic string `m` to generate the key pair:\n```python\nkp = Keypair.deterministic(m, lang='chinese')\n```\n\nAfter the key pair generation, we can get a public key and a seed from it:\n```python\npublickey = kp.address().decode()\nseed = kp.seed().decode()\n```    \nThe public key is also your account address. If someone needs to send you a transaction, you should share with them this key.\nThe seed is your secret. For safety, please keep it local and never send it through the Internet.\n\nWhenever we forget/lose the public key, we can regenerate the key pair from the seed:\n```python\nfrom stellar_base.keypair import Keypair\nkp = Keypair.from_seed(seed)\n```\nIf we forget/lose both the public key and the seed, we can regenerate the key pair from the mnemonic string:\n```python\nfrom stellar_base.keypair import Keypair\nseed_phrase = '...' # the word sequence that you wrote down or memorized\nkp = Keypair.deterministic(seed_phrase, lang='chinese')\n```\n\nThis is my favorite key pair in TESTNET, let's use them in the following steps.\n```python\npublickey = 'GDVDKQFP665JAO7A2LSHNLQIUNYNAAIGJ6FYJVMG4DT3YJQQJSRBLQDG'\nseed = 'SCVLSUGYEAUC4MVWJORB63JBMY2CEX6ATTJ5MXTENGD3IELUQF4F6HUB'\n```   \n\n## 2.Create Account\nAfter the key pair generation, you have already got the address, but it is not activated until someone transfers at least 20 lumen into it. \n\n### 2.1 Testnet\nIf you want to play in the Stellar test network, you can ask our Friendbot to create an account for you as shown below:\n```python\nimport requests\npublickey = kp.address().decode()\nr = requests.get('https://horizon-testnet.stellar.org/friendbot?addr=' + publickey)\n```\n### 2.2 Livenet\nOn the other hand, if you would like to create an account in the livenet, you should buy some Stellar Lumens from an exchange. When you withdraw the Lumens into your new account, the exchange will automatically create the account for you.\nHowever, if you want to create an account from another account of your own, you may run the following code:\n```python\nfrom stellar_base.keypair import Keypair\nfrom stellar_base.asset import Asset\nfrom stellar_base.operation import Payment\nfrom stellar_base.operation import CreateAccount\nfrom stellar_base.transaction import Transaction\nfrom stellar_base.transaction_envelope import TransactionEnvelope as Te\nfrom stellar_base.memo import TextMemo\nfrom stellar_base.horizon import horizon_testnet, horizon_livenet\n\noldAccountSeed = \"SCVLSUGYEAUC4MVWJORB63JBMY2CEX6ATTJ5MXTENGD3IELUQF4F6HUB\"\nnewAccountAddress = \"XXX\"\namount = '25' # Any amount higher than 20\nkp = Keypair.from_seed(oldAccountSeed)\nhorizon = horizon_livenet()\nasset = Asset(\"XLM\")\n# create op \nop = CreateAccount({\n    'destination': newAccountAddress,\n    'starting_balance': amount\n})\n# create a memo\nmsg = TextMemo('')\n# get sequence of new account address\nsequence = horizon.account(kp.address()).get('sequence')\n# construct the transaction\ntx = Transaction(\n    source=kp.address().decode(),\n    opts={\n        'sequence': sequence,\n        #'timeBounds': [],\n        'memo': msg,\n        #'fee': 100,\n        'operations': [\n            op,\n        ],\n    },\n)\n# build envelope\nenvelope = Te(tx=tx, opts={\"network_id\": \"PUBLIC\"})\n# sign \nenvelope.sign(kp)\n# submit\nxdr = envelope.xdr()\nresponse = horizon.submit(xdr)\n```\nThen, you can check the status of this operation with the response.\n\n## 3. Check account\n### 3.1 Basic info\nAfter creating the account, we may check the basic information of the account.\n```python\nfrom stellar_base.address import Address\npublickey = 'GDVDKQFP665JAO7A2LSHNLQIUNYNAAIGJ6FYJVMG4DT3YJQQJSRBLQDG'\naddress = Address(address=publickey) # address = Address(address=publickey,network='public') for livenet\naddress.get() # get the updated information\n```\nNow you can check the address `balance`, `sequence`, `flags`, `signers`, `data` etc.\n```python\nprint \"balances: \" + address.balances\nprint \"sequence: \" + address.sequence\nprint \"flags: \" + address.flags\nprint \"signers: \" + address.signers\nprint \"data: \" + address.data\n```\n\n### 3.2 Check payments\nWe can check the most recent payments by:\n`address.payments()`\n\nWe can use three parameters to customize the query: `limit`, `order`, and `cursor` (`paging_token`), and the default value for them are respectively: `limit=10, order=\"asc\", cursor=0`.\n\nSo if you need to check payments after a specific cursor, try:\n`address.payments(cursor='4225135422738433', limit=20, order='asc')`\n\nHorizon has SSE support for push data, if you really want to, use it like this: `address.payments(sse=True, cursor='4225135422738433')`\n\n### 3.3 Check others\nJust like payments, we can check `transactions`, `effects`, `offers`, and `operations` by:\n```python\naddress.transactions()\naddress.effects()\naddress.offers()\naddress.operations()\n```\nBy the way, offers do not have SSE support.\n\n## 4. Building transaction\nWe can build a transaction with a wrapper or from scratch.\n\n### 4.1 Build with a wrapper\n```python\nfrom stellar_base.builder import Builder\nseed = \"SCVLSUGYEAUC4MVWJORB63JBMY2CEX6ATTJ5MXTENGD3IELUQF4F6HUB\"\nbuilder = Builder(secret=seed) # builder = Builder(secret=seed, network='public') for LIVENET\n```\nHow about sending Bob a payment?\n```python\n    bob_address = 'XXX'\n    builder.append_payment_op(bob_address,'100','XLM')\n```\nOr if you want to pay him with CNY:\n```python\nCNY_ISSUER = 'GDVDKQFP665JAO7A2LSHNLQIUNYNAAIGJ6FYJVMG4DT3YJQQJSRBLQDG'# Just a Stellar address which issues asset CNY\nbuilder.append_payment_op(bob_address, '100', 'CNY', CNY_ISSUER)\n```\nAnd maybe you need to carry a message:\n```python\nbuilder.add_text_memo('Buy yourself a beer!') # string length <= 28 bytes\n```    \nAt last, sign & submit\n ```python   \nbuilder.sign()\nbuilder.submit()\n```\nDone.\n\nSometimes, we need to deal with multi-signature transactions. Especially when you get a xdr string (or transaction envelope xdr) from a friend or partner, which describes a multi-sig transaction. They may need you to sign on it too. \n```python\nbuilder = Builder(secret=seed) # or builder = Builder(secret=secret, network='public') for LIVENET.\nbuilder.import_from_xdr(xdr_string) # the xdr_string come from your friend\nbuilder.sign()\nbuilder.to_xdr() # generate new xdr string \n# or builder.submit() # submit to Stellar network\n```\n\n### 4.2 Build from scratch\n```python   \nfrom stellar_base.keypair import Keypair\nfrom stellar_base.asset import Asset\nfrom stellar_base.operation import Payment\nfrom stellar_base.transaction import Transaction\nfrom stellar_base.transaction_envelope import TransactionEnvelope as Te\nfrom stellar_base.memo import TextMemo\nfrom stellar_base.horizon import horizon_testnet, horizon_livenet\n\nalice_seed = 'SAZJ3EDATROKTNNN4WZBZPRC34AN5WR43VEHAFKT5D66UEZTKDNKUHOK'\nbob_address = 'GDLP3SP4WP72L4BAJWZUDZ6SAYE4NAWILT5WQDS7RWC4XCUNUQDRB2A4'\nCNY_ISSUER = 'GDVDKQFP665JAO7A2LSHNLQIUNYNAAIGJ6FYJVMG4DT3YJQQJSRBLQDG'\namount = '100'\n\nAlice = Keypair.from_seed(alice_seed)\nhorizon = horizon_testnet() # horizon = horizon_livenet() for LIVENET\n\nasset = Asset('CNY', CNY_ISSUER) \n# create op \nop = Payment({\n    # 'source' : Alice.address().decode(),\n    'destination': bob_address,\n    'asset': asset,\n    'amount': amount\n})\n# create a memo\nmsg = TextMemo('Buy yourself a beer !')\n\n# get sequence of Alice\n# Python 2\nsequence = horizon.account(Alice.address()).get('sequence')\n# Python 3\n# sequence = horizon.account(Alice.address().decode('utf-8')).get('sequence')\n\n# construct Tx\ntx = Transaction(\n    source = Alice.address().decode(),\n    opts = {\n        'sequence': sequence,\n        # 'timeBounds': [],\n        'memo': msg,\n        # 'fee': 100,\n        'operations': [\n            op,\n        ],\n    },\n)\n    \n    \n# build envelope\nenvelope = Te(tx=tx, opts={\"network_id\": \"TESTNET\"}) # envelope = Te(tx=tx, opts={\"network_id\": \"PUBLIC\"}) for LIVENET\n# sign \nenvelope.sign(Alice)\n# submit\nxdr = envelope.xdr()\nresponse = horizon.submit(xdr)\n```",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/stellarCN/py-stellar-base/",
    "keywords": "stellar.org,lumens,xlm,blockchain,distributed exchange,dex,stellar-core,horizon",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stellar-base",
    "platform": "",
    "project_url": "https://pypi.org/project/stellar-base/",
    "release_url": "https://pypi.org/project/stellar-base/0.1.7.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Code for managing Stellar.org blockchain transactions and accounts using stellar-base in python. Allows full functionality interfacing with the Horizon front end. Visit https://stellar.org for more information",
    "version": "0.1.7.3"
  },
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a45a10797e40b4760723fce632a558ae",
          "sha256": "1e08555b91bb98c7733b1503e2642ca4b809713e7fd4067d385f370d828041c2"
        },
        "downloads": -1,
        "filename": "stellar-base-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a45a10797e40b4760723fce632a558ae",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66067,
        "upload_time": "2016-10-29T22:53:42",
        "url": "https://files.pythonhosted.org/packages/c1/54/1f546b6c12850ea80a213d2faa818920767c5dc6882927ed99a113edb07a/stellar-base-0.0.5.tar.gz"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "95e49a467cf7116174b43faffc48e666",
          "sha256": "443b7fcb20076a3ef98db45d3d5120b6f63758018726c1f1aa473877b4493f23"
        },
        "downloads": -1,
        "filename": "stellar-base-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "95e49a467cf7116174b43faffc48e666",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66493,
        "upload_time": "2016-10-30T00:25:33",
        "url": "https://files.pythonhosted.org/packages/1e/cb/4db19307566a4e9305ce70b87b78f2230503a2a5e34f0501e5120c25a069/stellar-base-0.1.5.tar.gz"
      }
    ],
    "0.1.7.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "62a1d704f15b9a249c7f20db58cb607c",
          "sha256": "c372a929b6489cde3eefb18a4f91aeb8ac91b21b1c8cb49267c447e949562425"
        },
        "downloads": -1,
        "filename": "stellar-base-0.1.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "62a1d704f15b9a249c7f20db58cb607c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 82444,
        "upload_time": "2018-01-17T14:07:19",
        "url": "https://files.pythonhosted.org/packages/c5/db/debdfc8165ad1f87a6d19fdbbb9ac0baf9b4d6f0cf9269176f43891e678d/stellar-base-0.1.7.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "62a1d704f15b9a249c7f20db58cb607c",
        "sha256": "c372a929b6489cde3eefb18a4f91aeb8ac91b21b1c8cb49267c447e949562425"
      },
      "downloads": -1,
      "filename": "stellar-base-0.1.7.3.tar.gz",
      "has_sig": false,
      "md5_digest": "62a1d704f15b9a249c7f20db58cb607c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 82444,
      "upload_time": "2018-01-17T14:07:19",
      "url": "https://files.pythonhosted.org/packages/c5/db/debdfc8165ad1f87a6d19fdbbb9ac0baf9b4d6f0cf9269176f43891e678d/stellar-base-0.1.7.3.tar.gz"
    }
  ]
}