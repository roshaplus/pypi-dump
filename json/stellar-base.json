{
  "info": {
    "author": "antb123",
    "author_email": "awbarker@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: Chinese (Simplified)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Python libraries that allow you to interface with the stellar.org horizon interface. Stellar-base library consists of classes to read, write, hash, and sign the xdr structures that are used in stellar-core.\n\n# install\n    pip install stellar-base\n\n# requirements\n    ed25519 requires python-dev to be installed\n    ubuntu/debian:\n    sudo apt-get install python-dev  # for python2.x installs\n    sudo apt-get install python3-dev  # for python3.x installs\n    yum:\n    sudo yum install python-devel\n\n#getting lumens\n    The Stellar blockchain functions with lumens for settlement and account creation.\n    To get some lumens (xlm)\n    Test network:\n        url = 'https://horizon-testnet.stellar.org'\n        r = requests.get(url + '/friendbot?addr=' + kp.address().decode('ascii')) # Get 1000 lumens\n    Live:\n        https://poloniex.com\n        https://tempo.eu.com\n        https://btc38.com\n\n[![Build Status](https://travis-ci.org/StellarCN/py-stellar-base.svg)](https://travis-ci.org/StellarCN/py-stellar-base)\n# usage\n\ncheck out full stellar development docs at:\nhttps://www.stellar.org/developers/guides/\n\n\nAnd the laboratory:\nhttps://www.stellar.org/laboratory/#?network=test\n\n## Create a Stellar keypair?\n```python\n    from stellar_base.keypair import Keypair\n    kp = Keypair.random()\n```    \n**or** \n```python\n    from __future__ import unicode_literals\n    master = u'\u4e2d\u6587'.encode('utf-8')\n    kp = Keypair.deterministic(master)\n```    \nthen we can get key/secret from random:\n \n    publickey = kp.address().decode()\n    secret = kp.seed().decode()\n\n\nlet's start with my favourite keypair in TESTNET. \n\n    publickey = 'GDVDKQFP665JAO7A2LSHNLQIUNYNAAIGJ6FYJVMG4DT3YJQQJSRBLQDG'\n    secret = 'SCVLSUGYEAUC4MVWJORB63JBMY2CEX6ATTJ5MXTENGD3IELUQF4F6HUB'\n    \n    \n##Account\n\n### base info\n```python\n    from stellar_base.address import Address\n    publickey = 'GDVDKQFP665JAO7A2LSHNLQIUNYNAAIGJ6FYJVMG4DT3YJQQJSRBLQDG'\n    address = Address(address=publickey) \n    # address = Address(address=publickey,network='public') for livenet.\n    address.get()\n```\nnow you can check address.`balance` ,`sequence` ,`flags` ,`signers`, `manage_data` etc.\n\n### check payments\n`address.payments()`will give you latest 10 payments.\n\nthere are three params using for query : `limit`, `order` and `cursor`(paging_token). and the default value for them is 10, asc and 0  \n\nso need check payments after a specific cursor?try `address.payments(cursor='4225135422738433',limit=20,order='asc')`\n\nHorizon have SSE support for push data ,if you really want, use like this: `address.payment(sse=True,cursor='4225135422738433')`\n\n###like check payments, you can check `transactions`,`effects`,`offers`,and `operations`.\nremember , offers have not SSE support.\n\n    \n## Transaction Builder\n\n### create a Transaction Builder at first\n\n    from stellar_base.builder import Builder\n    builder = Builder(secret=secret) \n    # builder = Builder(secret=secret, network='public') for LIVENET.\n    \n### operations\nhow about sending Bob a tip?\n\n    bob_address = 'GABCDEFGHIJKLMNOPQRSTUVW'\n    builder.append_payment_op(bob_address,'100','XLM')\nor\n\n    CNY_ISSUER='GCNYISSUERABCDEFGHIJKLMNOPQ'\n    builder.append_payment_op(bob_address,'100','CNY',CNY_ISSUER)\n    \n### then maybe need carry a message\n\n    builder.add_text_memo('Have a nice day!')  # string length <= 28 bytes\n    \n### sign & submit\n    \n    builder.sign()\n    builder.submit()\n\nDone.\n\n### sign a multi-sig transaction \n\n  you get a xdr string (or transaction envelope xdr)from a friend or partner ,which describe a multi-sig transaction . \n  They need you sign on it too. \n\n    builder = Builder(secret=secret) \n    # or builder = Builder(secret=secret, network='public') for LIVENET.\n    builder.import_from_xdr(xdr_string)\n    builder.sign()\n    builder.to_xdr()  # generate new xdr string \n    # or builder.submit() #submit to stellar network\n\n\n\n## A payment example without wrapper\n\n    \n    from stellar_base.keypair import Keypair\n    from stellar_base.asset import Asset\n    from stellar_base.operation import Payment\n    from stellar_base.transaction import Transaction\n    from stellar_base.transaction_envelope import TransactionEnvelope as Te\n    from stellar_base.memo import TextMemo\n    from stellar_base.horizon import horizon_testnet, horizon_pubic\n    \n    alice_seed = 'SAZJ3EDATROKTNNN4WZBZPRC34AN5WR43VEHAFKT5D66UEZTKDNKUHOK'\n    bob_address = 'GDLP3SP4WP72L4BAJWZUDZ6SAYE4NAWILT5WQDS7RWC4XCUNUQDRB2A4'\n    CNY_ISSUER = 'GDVDKQFP665JAO7A2LSHNLQIUNYNAAIGJ6FYJVMG4DT3YJQQJSRBLQDG'\n    amount = '100'\n    \n    Alice = Keypair.from_seed(alice_seed)\n    horizon = horizon_testnet()\n    \n    asset = Asset('CNY', CNY_ISSUER) \n    # create op \n    op = Payment({\n        # 'source' : Alice.address().decode(),\n        'destination': bob_address,\n        'asset': asset,\n        'amount': amount\n    })\n    # create a memo\n    msg = TextMemo('Have a nice day!')\n    \n    # get sequence of Alice\n    sequence = horizon.account(Alice.address()).get('sequence') \n    \n    # construct Tx\n    tx = Transaction(\n        source=Alice.address().decode(),\n        opts={\n            'sequence': sequence,\n            # 'timeBounds': [],\n            'memo': msg,\n            # 'fee': 100,\n            'operations': [\n                op,\n            ],\n        },\n    )\n    \n    \n    # build envelope\n    envelope = Te(tx=tx, opts={\"network_id\": \"TESTNET\"})\n    # sign \n    envelope.sign(Alice)\n    # submit\n    xdr = envelope.xdr()\n    horizon.submit(xdr)",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/stellarCN/py-stellar-base/",
    "keywords": "stellar.org,lumens,xlm,blockchain",
    "license": "Apache",
    "maintainer": null,
    "maintainer_email": null,
    "name": "stellar-base",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/stellar-base/",
    "release_url": "https://pypi.org/project/stellar-base/0.1.5/",
    "requires_python": null,
    "summary": "Code for managing Stellar.org blockchain transactions and accounts \n    using stellar-base in python. Allows full functionality interfacing\n    with the Horizon front end.",
    "version": "0.1.5"
  },
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a45a10797e40b4760723fce632a558ae",
          "sha256": "1e08555b91bb98c7733b1503e2642ca4b809713e7fd4067d385f370d828041c2"
        },
        "downloads": 261,
        "filename": "stellar-base-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a45a10797e40b4760723fce632a558ae",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66067,
        "upload_time": "2016-10-29T22:53:42",
        "url": "https://files.pythonhosted.org/packages/c1/54/1f546b6c12850ea80a213d2faa818920767c5dc6882927ed99a113edb07a/stellar-base-0.0.5.tar.gz"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "95e49a467cf7116174b43faffc48e666",
          "sha256": "443b7fcb20076a3ef98db45d3d5120b6f63758018726c1f1aa473877b4493f23"
        },
        "downloads": 263,
        "filename": "stellar-base-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "95e49a467cf7116174b43faffc48e666",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66493,
        "upload_time": "2016-10-30T00:25:33",
        "url": "https://files.pythonhosted.org/packages/1e/cb/4db19307566a4e9305ce70b87b78f2230503a2a5e34f0501e5120c25a069/stellar-base-0.1.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "95e49a467cf7116174b43faffc48e666",
        "sha256": "443b7fcb20076a3ef98db45d3d5120b6f63758018726c1f1aa473877b4493f23"
      },
      "downloads": 263,
      "filename": "stellar-base-0.1.5.tar.gz",
      "has_sig": false,
      "md5_digest": "95e49a467cf7116174b43faffc48e666",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 66493,
      "upload_time": "2016-10-30T00:25:33",
      "url": "https://files.pythonhosted.org/packages/1e/cb/4db19307566a4e9305ce70b87b78f2230503a2a5e34f0501e5120c25a069/stellar-base-0.1.5.tar.gz"
    }
  ]
}