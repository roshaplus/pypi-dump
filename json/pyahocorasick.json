{
  "info": {
    "author": "Wojciech Mu\u0142a",
    "author_email": "wojciech_mula@poczta.onet.pl",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: C",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries",
      "Topic :: Text Editors :: Text Processing"
    ],
    "description": "========================================================================\n                          pyahocorasick\n========================================================================\n\n.. image:: https://travis-ci.org/WojciechMula/pyahocorasick.svg?branch=master\n    :target: https://travis-ci.org/WojciechMula/pyahocorasick\n    :alt: Linux Master branch tests status\n\n.. image:: https://ci.appveyor.com/api/projects/status/github/WojciechMula/pyahocorasick?branch=master&svg=true\n   :target: https://ci.appveyor.com/project/WojciechMula/pyahocorasick\n   :alt: Windows Master branch tests status\n\n**pyahocorasick** is a fast and memory efficient library for exact or approximate\nmulti-pattern string search meaning that you can find multiple key strings\noccurrences at once in some input text.  The library provides an `ahocorasick` Python\nmodule that you can use as a plain dict-like Trie or convert a Trie to an automaton\nfor efficient Aho-Corasick search.\n\nIt is implemented in C and tested on Python 2.7 and 3.4+. It works on Linux, Mac and\nWindows.\n\nThe license_ is BSD-3-clause. Some utilities, such as tests and the pure Python\nautomaton are dedicated to the Public Domain.\n\nDownload and source code\n========================\n\nYou can fetch **pyahocorasick** from:\n    - GitHub https://github.com/WojciechMula/pyahocorasick/\n    - Pypi https://pypi.python.org/pypi/pyahocorasick/\n\nDocumentation\n=============\n\nThe full documentation including the API reference is published on\n`readthedocs <http://pyahocorasick.readthedocs.io/>`_.\n\nQuick start\n===========\n\nThis module is written in C. You need a C compiler installed to compile native\nCPython extensions. To install::\n\n    pip install pyahocorasick\n\nThen create an Automaton::\n\n    >>> import ahocorasick\n    >>> A = ahocorasick.Automaton()\n\nYou can use the Automaton class as a trie. Add some string keys and their associated\nvalue to this trie. Here we associate a tuple of (insertion index, original string)\nas a value to each key string we add to the trie::\n\n    >>> for idx, key in enumerate('he her hers she'.split()):\n    ...   A.add_word(key, (idx, key))\n\nThen check if some string exists in the trie::\n\n    >>> 'he' in A\n    True\n    >>> 'HER' in A\n    False\n\nAnd play with the ``get()`` dict-like method::\n\n    >>> A.get('he')\n    (0, 'he')\n    >>> A.get('she')\n    (3, 'she')\n    >>> A.get('cat', 'not exists')\n    'not exists'\n    >>> A.get('dog')\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    KeyError\n\nNow convert the trie to an Aho-Corasick automaton to enable Aho-Corasick search::\n\n    >>> A.make_automaton()\n\nThen search all occurrences of the keys (the needles) in an input string (our haystack).\n\nHere we print the results and just check that they are correct. The\n`Automaton.iter()` method return the results as two-tuples of the `end index` where a\ntrie key was found in the input string and the associated `value` for this key. Here\nwe had stored as values a tuple with the original string and its trie insertion\norder::\n\n    >>> for end_index, (insert_order, original_value) in A.iter(haystack):\n    ...     start_index = end_index - len(original_value) + 1\n    ...     print((start_index, end_index, (insert_order, original_value)))\n    ...     assert haystack[start_index:start_index + len(original_value)] == original_value\n    ... \n    (1, 2, (0, 'he'))\n    (1, 3, (1, 'her'))\n    (1, 4, (2, 'hers'))\n    (4, 6, (3, 'she'))\n    (5, 6, (0, 'he'))\n\nYou can also create an eventually large automaton ahead of time and `pickle` it to\nre-load later. Here we just pickle to a string. You would typically pickle to a\nfile instead::\n\n    >>> import cPickle\n    >>> pickled = cPickle.dumps(A)\n    >>> B = cPickle.dumps(pickled)\n    >>> B.get('he')\n    (0, 'he')\n\n\nSee also:\n    - FAQ and Who is using pyahocorasick? https://github.com/WojciechMula/pyahocorasick/wiki/FAQ#who-is-using-pyahocorasick\n    - `API overview`_ for more options and the API documentation.\n    - `Examples`_ for more examples.\n    - `Build and install`_ for more details on installation.\n    - `Tests`_ to run unit tests.\n    - `Support`_ for help and bugs.\n    - and `Authors`_ and `License`_ .\n\n\nIntroduction\n============\n\nWith an `Aho-Corasick automaton <http://en.wikipedia.org/wiki/Aho-Corasick%20algorithm>`_ \nyou can efficiently search all occurrences of multiple strings (the needles) in an\ninput string (the haystack) making a single pass over the input string. With\npyahocorasick you can eventually build large automatons and pickle them to reuse\nthem over and over as an indexed structure for fast multi pattern string matching.\n\nOne of the advantages of an Aho-Corasick automaton is that the typical worst-case\nand best-case **runtimes** are about the same and depends primarily on the size\nof the input string and secondarily on the number of matches returned.  While\nthis may not be the fastest string search algorithm in all cases, it can search\nfor multiple strings at once and its runtime guarantees make it rather unique.\nBecause pyahocorasick is based on a Trie, it stores redundant keys prefixes only\nonce using memory efficiently.\n\nA drawback is that it needs to be constructed and \"finalized\" ahead of time\nbefore you can search strings. In several applications where you search for several\npre-defined \"needles\" in a variable \"haystacks\" this is actually an advantage.\n\n**Aho-Corasick automatons** are commonly used for fast multi-pattern matching\nin intrusion detection systems (such as snort), anti-viruses and many other\napplications that need fast matching against a pre-defined set of string keys.\n\nInternally an Aho-Corasick automaton is typically based on a Trie with extra\ndata for failure links and an implementation of the Aho-Corasick search\nprocedure.\n\nBehind the scenes the **pyahocorasick** Python library implements these two data\nstructures:  a `Trie <http://en.wikipedia.org/wiki/trie>`_ and an Aho-Corasick string\nmatching automaton. Both are exposed through the `Automaton` class.\n\nIn addition to Trie-like and Aho-Corasick methods and data structures,\n**pyahocorasick** also implements dict-like methods: The pyahocorasick\n**Automaton** is a **Trie** a dict-like structure indexed by string keys each\nassociated with a value object. You can use this to retrieve an associated value\nin a time proportional to a string key length.\n\npyahocorasick is available in two flavors:\n\n* a CPython **C-based extension**, compatible with Python 2 and 3.\n\n* a simpler pure Python module, compatible with Python 2 and 3. This is only\n  available in the source repository (not on Pypi) under the py/ directory and\n  has a slightly different API.\n\n\nSome background about pyahocorasick internals\n=============================================\n\nI wrote this article about `different trie representations <http://0x80.pl/articles/trie-representation.html>`_.\nThese are experiments I made while creating this module.\n\n\nOther Aho-Corasick implementations for Python you can consider\n==============================================================\n\nWhile **pyahocorasick** tries to be the finest and fastest Aho Corasick library\nfor Python you may consider these other libraries:\n\n\n* `py_aho_corasick <https://github.com/JanFan/py-aho-corasick>`_ by Jan\n\n * Written in pure Python.\n * Poor performance.\n\n* `noaho <https://github.com/JDonner/NoAho>`_ by Jeff Donner\n\n * Written in C. Does not return overlapping matches.\n * Does not compile on Windows (July 2016).\n * No support for the pickle protocol.\n\n* `acora <https://github.com/scoder/acora>`_ by Stefan Behnel\n\n * Written in Cython. \n * Large automaton may take a long time to build (July 2016)\n * No support for a dict-like protocol to associate a value to a string key.\n\n* `ahocorasick <https://hkn.eecs.berkeley.edu/~dyoo/python/ahocorasick/>`_ by Danny Yoo\n\n * Written in C.\n * seems unmaintained (last update in 2005).\n * GPL-licensed.\n\n\nAPI overview\n============\n\nThis is a quick tour of the API for the C **ahocorasick** module.\nSee the full API doc for more details. The pure Python module has a slightly different interface.\n\nThe module ``ahocorasick`` contains a few constants and the main ``Automaton`` class.\n\n\n.. _Unicode and bytes:\n\n\nModule constants\n----------------\n\n - ``ahocorasick.unicode`` --- see `Unicode and bytes`_\n\n - ``ahocorasick.STORE_ANY``, ``ahocorasick.STORE_INTS``,\n   ``ahocorasick.STORE_LENGTH`` --- see `Automaton class`_\n\n - ``ahocorasick.EMPTY``, ``ahocorasick.TRIE``, ``ahocorasick.AHOCORASICK``\n   --- see `Automaton Attributes`_\n\n - ``ahocorasick.MATCH_EXACT_LENGTH``, ``ahocorasick.MATCH_AT_MOST_PREFIX``,\n   ``ahocorasick.MATCH_AT_LEAST_PREFIX`` --- see description of the keys method\n\n\nAutomaton class\n---------------\n\nNote: ``Automaton`` instances are `pickle-able <https://docs.python.org/3/library/pickle.html>`_\nmeaning that you can create ahead of time an eventually large automaton then save it to disk\nand re-load it later to reuse it over and over as a persistent multi-string search index.\nInternally, Automaton implements the ``__reduce__() magic method``.\n\n\n``Automaton(value_type)``\n    Create a new empty Automaton optionally passing a `value_type` to indicate what\n    is the type of associated values (default to any Python object type)\n\nAutomaton Trie methods\n----------------------\n\nThe Automaton class has the following main trie-like methods:\n\n``add_word(key, [value]) => bool``\n    Add a ``key`` string to the dict-like trie and associate this key with a ``value``.\n\n``exists(key) => bool`` or ``key in ...``\n    Return True if the key is present in the trie. \n\n``match(key) => bool``\n    Return True if there is a prefix (or key) equal to ``key`` present in the trie.\n\n\nAutomaton Dictionary-like methods\n---------------------------------\n\nA pyahocorasick Automaton trie behaves more or less like a Python dictionary and\nimplements a subset of dict-like methods. Some of them are:\n\n``get(key[, default])``\n    Return the value associated with the ``key`` string. Similar to `dict.get()`.\n\n``keys([prefix, [wildcard, [how]]]) => yield strings``\n    Return an iterator on keys.\n``values([prefix, [wildcard, [how]]]) => yield object``\n    Return an iterator on values associated with each keys.\n``items([prefix, [wildcard, [how]]]) => yield tuple (string, object)``\n    Return an iterator on tuples of (key, value).\n\nWildcard search\n~~~~~~~~~~~~~~~\n\nThe methods ``keys``, ``values`` and ``items`` can be called with an optional \n**wildcard**. A wildcard character is equivalent to a question mark used in glob \npatterns (?) or a dot (.) in regular expressions. You can use any character you\nlike as a wildcard.\n\nNote that it is not possible to escape a wildcard to match it exactly.\nYou need instead to select another wildcard character not present in the\nprovided prefix. For example::\n\n    automaton.keys(\"hi?\", \"?\")  # would match \"him\", \"his\"\n    automaton.keys(\"XX?\", \"X\")  # would match \"me?\", \"he?\" or \"it?\"\n\nAho-Corasick methods\n--------------------\n\nThe Automaton class has the following main Aho-Corasick methods:\n\n``make_automaton()``\n    Finalize and create the Aho-Corasick automaton.\n\n``iter(string, [start, [end]])``\n    Perform the Aho-Corasick search procedure using the provided input ``string``.\n    Return an iterator of tuples (end_index, value) for keys found in string.\n\nAutomatonSearchIter class\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInstances of this class are returned by the ``iter`` method of an ``Automaton``. \nThis iterator can be manipulated through its `set()` method.\n\n``set(string, [reset]) => None``\n    Set a new string to search eventually keeping the current Automaton state to\n    continue searching for the next chunk of a string.\n\n    For example::\n\n        >>> it = A.iter(b\"\")\n        >>> while True:\n        ...     buffer = receive(server_address, 4096)\n        ...     if not buffer:\n        ...         break\n        ...     it.set(buffer)\n        ...     for index, value in it:\n        ...         print(index, '=>', value)\n\n    When ``reset`` is ``True`` then processing is restarted. For example this code::\n\n        >>> for string in string_set:\n        ...     for index, value in A.iter(string)\n        ...         print(index, '=>', value)\n\n    does the same job as::\n\n        >>> it = A.iter(b\"\")\n        >>> for string in string_set:\n        ...     it.set(it, True)\n        ...     for index, value in it:\n        ...         print(index, '=>', value)\n\n\nAutomaton Attributes\n--------------------\n\nThe Automaton class has the following attributes:\n\n``kind`` [readonly]\n    Return the state of the ``Automaton`` instance. \n\n``store`` [readonly]\n    Return the type of values stored in the Automaton as specified at creation.\n\nOther Automaton methods\n-----------------------\n\nThe Automaton class has a few other interesting methods:\n\n``dump() => (list of nodes, list of edges, list of fail links)``\n    Return a three-tuple of lists describing the Automaton as a graph of\n    (nodes, edges, failure links).\n    The source repository and source package also contains the  ``dump2dot.py``\n    script that converts ``dump()`` results to a `graphviz <http://graphviz.org>`_ dot\n    format for convenient visualization of the trie and Automaton data structure.\n\n``get_stats() => dict``\n    Return a dictionary containing Automaton statistics.\n    Note that the real size occupied by the data structure could be larger because\n    of `internal memory fragmentation <http://en.wikipedia.org/Memory%20fragmentation>`_\n    that can occur in a memory manager.\n\n``__sizeof__() => int``\n    Return the approximate size in bytes occupied by the Automaton instance.\n    Also available by calling sys.getsizeof(automaton instance).\n\n\nExamples\n========\n\n::\n\n    >>> import ahocorasick\n    >>> A = ahocorasick.Automaton()\n\n    >>> # add some key words to trie\n    >>> for index, word in enumerate('he her hers she'.split()):\n    ...   A.add_word(word, (index, word))\n\n    >>> # test that these key words exists in the trie all right\n    >>> 'he' in A\n    True\n    >>> 'HER' in A\n    False\n    >>> A.get('he')\n    (0, 'he')\n    >>> A.get('she')\n    (3, 'she')\n    >>> A.get('cat', '<not exists>')\n    '<not exists>'\n    >>> A.get('dog')\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    KeyError\n\n    >>> # convert the trie in an Aho-Corasick automaton\n    >>> A.make_automaton()\n\n    >>> # then find all occurrences of the stored keys in a string\n    >>> for item in A.iter('_hershe_'):\n    ...  print(item)\n    ...\n    (2, (0, 'he'))\n    (3, (1, 'her'))\n    (4, (2, 'hers'))\n    (6, (3, 'she'))\n    (6, (0, 'he'))\n\n\nExample of the keys method behavior\n-----------------------------------\n\n::\n\n    >>> import ahocorasick\n    >>> A = ahocorasick.Automaton()\n\n    >>> # add some key words to trie\n    >>> for index, word in enumerate('cat catastropha rat rate bat'.split()):\n    ...   A.add_word(word, (index, word))\n\n    >>> # Search some prefix\n    >>> list(A.keys('cat'))\n    ['cat', 'catastropha']\n\n    >>> # Search with a wildcard: here '?' is used as a wildcard. You can use any character you like.\n    >>> list(A.keys('?at', '?', ahocorasick.MATCH_EXACT_LENGTH))\n    ['bat', 'cat', 'rat']\n\n    >>> list(A.keys('?at?', '?', ahocorasick.MATCH_AT_MOST_PREFIX))\n    ['bat', 'cat', 'rat', 'rate']\n\n    >>> list(A.keys('?at?', '?', ahocorasick.MATCH_AT_LEAST_PREFIX))\n    ['rate']\n\n\nBuild and install\n=================\n\nTo install for common operating systems, use pip. Pre-built wheels should be\navailable on Pypi at some point in the future::\n\n    pip install pyahocorasick\n\nTo build from sources you need to have a C compiler installed and configured which\nshould be standard on Linux and easy to get on MacOSX.\n\nOn Windows and Python 2.7 you need the `Microsoft Visual C++ Compiler for Python 2.7\n<https://www.microsoft.com/en-us/download/details.aspx?id=44266>`_ (aka. Visual\nStudio 2008). There have been reports that `pyahocorasick` does not build yet with\nMinGW. It may build with cygwin but this has not been tested. If you get this working\nwith these platforms, please report in a ticket!\n\nTo build from sources, clone the git repository or download and extract the source\narchive.\n\nInstall `pip` (and its `setuptools` companion) and then run (in a `virtualenv` of\ncourse!)::\n\n    pip install .\n\nIf compilation succeeds, the module is ready to use. \n\n\nUnicode and bytes\n-----------------\n\nThe type of strings accepted and returned by ``Automaton`` methods are either\n**unicode** or **bytes**, depending on a compile time settings (preprocessor\ndefinition of ``AHOCORASICK_UNICODE`` as set in `setup.py`).\n\nThe ``Automaton.unicode`` attributes can tell you how the library was built.\nOn Python 3, unicode is the default. On Python 2, bytes is the default and only value.\n\n\n.. warning::\n\n    When the library is built with unicode support on Python 3, an Automaton will\n    store 2 or 4 bytes per letter, depending on your Python installation. When built\n    for bytes, only one byte per letter is needed. \n    \n    Unicode is **NOT supported** on Python 2 for now.\n\n\nTests\n=====\n\nThe source repository contains several tests. To run them use::\n\n    make test\n\n\nSupport\n=======\n\nSupport is available through the `GitHub issue tracker\n<https://github.com/WojciechMula/pyahocorasick/issues>`_ to report bugs or ask\nquestions.\n\n\nContributing\n============\n\nYou can submit contributions through `GitHub pull requests\n<https://github.com/WojciechMula/pyahocorasick/pull>`_.\n\n\nAuthors\n=======\n\nThe main author: Wojciech Mu\u0142a, wojciech_mula@poczta.onet.pl\nThis library would not be possible without help of many people, who contributed in\nvarious ways.\nThey created `pull requests <https://github.com/WojciechMula/pyahocorasick/pull>`_,\nreported bugs as `GitHub issues <https://github.com/WojciechMula/pyahocorasick/issues>`_\nor via direct messages, proposed fixes, or spent their valuable time on testing.\n\nThank you.\n\n\nLicense\n=======\n\nThis library is licensed under very liberal\n`BSD-3-Clause <http://spdx.org/licenses/BSD-3-Clause.html>`_ license. Some portions of\nthe code are dedicated to the public domain such as the pure Python automaton and test\ncode.\n\nFull text of license is available in LICENSE file.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/WojciechMula/pyahocorasick",
    "keywords": "aho-corasick,trie,automaton,dictionary",
    "license": "BSD-3-Clause and Public-Domain",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyahocorasick",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/pyahocorasick/",
    "release_url": "https://pypi.org/project/pyahocorasick/1.1.6/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "pyahocorasick is a fast and memory efficient library for exact or approximate multi-pattern string search.  With the ahocorasick.Automaton class, you can find multiple key strings occurrences at once in some input text.  You can use it as a plain dict-like Trie or convert a Trie to an automaton for efficient Aho-Corasick search.  Implemented in C and tested on Python 2.7 and 3.4+.  Works on Linux, Mac and Windows. BSD-3-clause license.",
    "version": "1.1.6"
  },
  "releases": {
    "1.0": [],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "177508a1571952f5c0892cb06bf1a6ca",
          "sha256": "df33b16810faa7ec4285eff1a9e19ef6058f8034b17d70d490a4473043cf85fc"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "177508a1571952f5c0892cb06bf1a6ca",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24272,
        "upload_time": "2014-11-25T18:53:43",
        "url": "https://files.pythonhosted.org/packages/a5/7c/2c358d45ceafb3bbf14aa8c67b8461c5bd9c0a4c1770221d00d9d4bb3eb6/pyahocorasick-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c6b097c9198fcb2e6f5e72a9c8db6ff6",
          "sha256": "6d200fbc2741e6598b574497dd1a7ea76c698f244584cc5cfce605be60bbb969"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c6b097c9198fcb2e6f5e72a9c8db6ff6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22086,
        "upload_time": "2016-04-19T18:25:31",
        "url": "https://files.pythonhosted.org/packages/17/e4/118675d2e5b10f2bb53293f5a614eab29e669f87b513ec4a52f99c620731/pyahocorasick-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "73e9d77b61fd0f194219d8f4202cab89",
          "sha256": "dab3d4112a5edcc9498a148dd0b18400c7e4f36bcd767a6d1a88379fc0531848"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "73e9d77b61fd0f194219d8f4202cab89",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22408,
        "upload_time": "2016-04-23T19:10:12",
        "url": "https://files.pythonhosted.org/packages/6c/7d/70b5eddb94703b9ecf30c47b0fd7a18f3affa2cd0d8c46b2686684f9e008/pyahocorasick-1.0.2.tar.gz"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ba5ef5b8276f2f246b938b60c142410f",
          "sha256": "6fda6a72d9c1bb9ad64bf00e107097c1edcb27cdece7df6fc54ddf017e30405a"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ba5ef5b8276f2f246b938b60c142410f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22328,
        "upload_time": "2016-04-24T16:00:54",
        "url": "https://files.pythonhosted.org/packages/06/65/890752fcba80c65d2d76f325d2f2ff99f482a0e2c5043427b1479992ad43/pyahocorasick-1.0.3.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2e304e7b3e9da43633aed47b6969dd6e",
          "sha256": "483ac352a732fdba98d0aef474887574fd1b2316742ed1fb8d9b55543e915b1d"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2e304e7b3e9da43633aed47b6969dd6e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23228,
        "upload_time": "2016-04-26T18:08:45",
        "url": "https://files.pythonhosted.org/packages/14/fa/05bd230aa57c14bd22fcb2c9293029ddaa220b96e0a5e032636cff8ef824/pyahocorasick-1.1.0.tar.gz"
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ac58da737a2bf01aa4dddccef127985b",
          "sha256": "25f76b610e8ee3414e04688ba933f3f16409cbd821921de279c7143bdf35040c"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ac58da737a2bf01aa4dddccef127985b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 46268,
        "upload_time": "2016-07-29T16:54:55",
        "url": "https://files.pythonhosted.org/packages/8a/2b/a2b2d4cbc93afe5d4a02f43f5fb9de27fc1e98008b6cabf9242252b8f301/pyahocorasick-1.1.1.tar.gz"
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "331d93a2d4f50726c6cd89b02ecec0e7",
          "sha256": "6bcd35f70f26860f19355e6b6e2151d74be7b2651ac97e02812e0877e46829ab"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "331d93a2d4f50726c6cd89b02ecec0e7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32705,
        "upload_time": "2016-08-06T17:47:17",
        "url": "https://files.pythonhosted.org/packages/76/6c/57cbf0c8638d29f5cef4d6670998c82fe5ece1e8095ede167e265b4a4625/pyahocorasick-1.1.2.tar.gz"
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e4f33d9527c60bb7fb4e6f8f5179b1aa",
          "sha256": "381735c3600d7458d26e865f9ac56697becc3559d867f6c29d35869fdcdb5deb"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.1.3.tar.bz2",
        "has_sig": false,
        "md5_digest": "e4f33d9527c60bb7fb4e6f8f5179b1aa",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31060,
        "upload_time": "2016-08-08T07:23:37",
        "url": "https://files.pythonhosted.org/packages/a5/a7/3ebb3e3ee262ebf45fcabc5796e81eb5589d3358e63042205a47cb5eeede/pyahocorasick-1.1.3.tar.bz2"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "870fe772c0457300ea13bcb641b2cc8a",
          "sha256": "fe1a98f9ab41f9d6159721744f1329fcbe5a3e122ea40ffa2bafa6f0b0721276"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "870fe772c0457300ea13bcb641b2cc8a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45129,
        "upload_time": "2016-08-08T07:23:40",
        "url": "https://files.pythonhosted.org/packages/a1/77/be4acc07e59942ed35de6bff4e17ee898e9acb7e36ef122a421df8ebf2c9/pyahocorasick-1.1.3.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6f4bd282866f9dcc782d2ac8ec35e2c9",
          "sha256": "a94e00d609b9ea9221daff9f6a4fdb01d8dea325d4429ae83c9fb0f343af0596"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.1.3.zip",
        "has_sig": false,
        "md5_digest": "6f4bd282866f9dcc782d2ac8ec35e2c9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 56686,
        "upload_time": "2016-08-08T07:23:43",
        "url": "https://files.pythonhosted.org/packages/97/70/4b9c634752c7255ccd849aeb4d3c02f3b17cefde20704096ac19573055d0/pyahocorasick-1.1.3.zip"
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ad445b6648dc06e9040705ce1ccb4384",
          "sha256": "16d7ad7ba79d89c1f7d896cc0ef68dddca0b4e341e7a75251ff2f6a5e51d2d1f"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.1.4.tar.bz2",
        "has_sig": false,
        "md5_digest": "ad445b6648dc06e9040705ce1ccb4384",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31040,
        "upload_time": "2016-08-08T07:56:45",
        "url": "https://files.pythonhosted.org/packages/1e/75/8005d086cac4cc41d3b320d338972c5e5c6a21f88472f21ac9d0e031d300/pyahocorasick-1.1.4.tar.bz2"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "850eed8264eef383b2671bbc95c2692c",
          "sha256": "655d9a137d386fb9220a4fd3eccaf2d1431070e82f9844de0703d0ead0886905"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "850eed8264eef383b2671bbc95c2692c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45091,
        "upload_time": "2016-08-08T07:56:48",
        "url": "https://files.pythonhosted.org/packages/c2/e3/a57a410a867d20fe869354f82896f4874614ecd2b63bfee14b5ab7f3c9fb/pyahocorasick-1.1.4.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c3c254e511d468be4b2fda032accc5f6",
          "sha256": "a9c0d01ea485493ee5a3885b7a56ce4f3132ce07fd25f299d4065ece851d3690"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.1.4.zip",
        "has_sig": false,
        "md5_digest": "c3c254e511d468be4b2fda032accc5f6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 56642,
        "upload_time": "2016-08-08T07:56:51",
        "url": "https://files.pythonhosted.org/packages/af/7a/5e27f583f733f737192831ec4fb430c0b3d1cca882e7c8bb0c636a155b3e/pyahocorasick-1.1.4.zip"
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9068078941d62508fc5dd494616be91a",
          "sha256": "43a44d73e74b739a3f765e182009396c1be1e5cbfbb439aaac9e86020f1985cc"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9068078941d62508fc5dd494616be91a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48062,
        "upload_time": "2017-11-22T12:55:29",
        "url": "https://files.pythonhosted.org/packages/cf/f8/4689f23b4ecc021ebe17cc9e6f3ff9d30e00edc325a13f07078e57779383/pyahocorasick-1.1.5.tar.gz"
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "152985bf49c16ba26667f1471d232276",
          "sha256": "6bb71feccd515584edfb6923cd9e5c143da11cf0f7ffbc3c7d3eb2912cbd2026"
        },
        "downloads": -1,
        "filename": "pyahocorasick-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "152985bf49c16ba26667f1471d232276",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 69833,
        "upload_time": "2017-11-27T17:40:24",
        "url": "https://files.pythonhosted.org/packages/ba/cb/6fbc85fb088658e0dcbe002a09bfa361fec0bb69c72c1f42fe0368adfc99/pyahocorasick-1.1.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "152985bf49c16ba26667f1471d232276",
        "sha256": "6bb71feccd515584edfb6923cd9e5c143da11cf0f7ffbc3c7d3eb2912cbd2026"
      },
      "downloads": -1,
      "filename": "pyahocorasick-1.1.6.tar.gz",
      "has_sig": false,
      "md5_digest": "152985bf49c16ba26667f1471d232276",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 69833,
      "upload_time": "2017-11-27T17:40:24",
      "url": "https://files.pythonhosted.org/packages/ba/cb/6fbc85fb088658e0dcbe002a09bfa361fec0bb69c72c1f42fe0368adfc99/pyahocorasick-1.1.6.tar.gz"
    }
  ]
}