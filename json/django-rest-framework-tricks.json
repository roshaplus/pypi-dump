{
  "info": {
    "author": "Artur Barseghyan",
    "author_email": "artur.barseghyan@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "============================\ndjango-rest-framework-tricks\n============================\nCollection of various tricks for\n`Django REST framework <https://pypi.python.org/pypi/djangorestframework>`_.\n\nPrerequisites\n=============\n\n- Django 1.8, 1.9, 1.10 and 1.11.\n- Python 2.7, 3.4, 3.5, 3.6\n\nDependencies\n============\n\n- djangorestframework\n\nInstallation\n============\n\n(1) Install latest stable version from PyPI:\n\n    .. code-block:: sh\n\n        pip install django-rest-framework-tricks\n\n    or latest stable version from GitHub:\n\n    .. code-block:: sh\n\n        pip install https://github.com/barseghyanartur/django-rest-framework-tricks/archive/stable.tar.gz\n\n(2) Add ``rest_framework`` and ``rest_framework_tricks`` to ``INSTALLED_APPS``:\n\n    .. code-block:: python\n\n        INSTALLED_APPS = (\n            # ...\n            # REST framework\n            'rest_framework',\n\n            # REST framework tricks (this package)\n            'rest_framework_tricks',\n\n            # ...\n        )\n\nMain features and highlights\n============================\n\n- `Nested serializers`_: Nested serializers for non-relational fields.\n\nUsage examples\n==============\n\nNested serializers\n------------------\n\nNested serializers for non-relational fields.\n\nOur imaginary ``Book`` model consists of the following (non-relational) Django\nmodel fields:\n\n- ``title``: ``CharField``\n- ``description``: ``TextField``\n- ``summary``: ``TextField``\n- ``publication_date``: ``DateTimeField``\n- ``state``: ``CharField`` (with choices)\n- ``isbn``: ``CharField``\n- ``price``: ``DecimalField``\n- ``pages``: ``IntegerField``\n- ``stock_count``: ``IntegerField``\n\nIn our REST API, we want to split serializer into parts using nested\nserializers and have the following structure:\n\n.. code-block:: json\n\n    {\n        \"id\": \"\",\n        \"title\": \"\",\n        \"description\": \"\",\n        \"summary\": \"\",\n        \"publishing_information\": {\n            \"publication_date\": \"\",\n            \"isbn\": \"\",\n            \"pages\": \"\"\n        },\n        \"stock_information\": {\n            \"stock_count\": \"\",\n            \"price\": \"\",\n            \"state\": \"\"\n        }\n    }\n\nSample model\n~~~~~~~~~~~~\n\nThe only customisation here is that we declare two ``NestedProxyField`` fields\non the ``Book`` model level for to be used in ``BookSerializer`` serializer.\n\nNote, that the change does not cause model change (no migrations or whatever).\n\nRequired imports\n^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from django.db import models\n\n    from rest_framework_tricks.models.fields import NestedProxyField\n\nModel definition\n^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    BOOK_PUBLISHING_STATUS_PUBLISHED = 'published'\n    BOOK_PUBLISHING_STATUS_NOT_PUBLISHED = 'not_published'\n    BOOK_PUBLISHING_STATUS_IN_PROGRESS = 'in_progress'\n    BOOK_PUBLISHING_STATUS_CANCELLED = 'cancelled'\n    BOOK_PUBLISHING_STATUS_REJECTED = 'rejected'\n    BOOK_PUBLISHING_STATUS_CHOICES = (\n        (BOOK_PUBLISHING_STATUS_PUBLISHED, \"Published\"),\n        (BOOK_PUBLISHING_STATUS_NOT_PUBLISHED, \"Not published\"),\n        (BOOK_PUBLISHING_STATUS_IN_PROGRESS, \"In progress\"),\n        (BOOK_PUBLISHING_STATUS_CANCELLED, \"Cancelled\"),\n        (BOOK_PUBLISHING_STATUS_REJECTED, \"Rejected\"),\n    )\n    BOOK_PUBLISHING_STATUS_DEFAULT = BOOK_PUBLISHING_STATUS_PUBLISHED\n\n\n    class Book(models.Model):\n        \"\"\"Book.\"\"\"\n\n        title = models.CharField(max_length=100)\n        description = models.TextField(null=True, blank=True)\n        summary = models.TextField(null=True, blank=True)\n        publication_date = models.DateField()\n        state = models.CharField(max_length=100,\n                                 choices=BOOK_PUBLISHING_STATUS_CHOICES,\n                                 default=BOOK_PUBLISHING_STATUS_DEFAULT)\n        isbn = models.CharField(max_length=100, unique=True)\n        price = models.DecimalField(max_digits=10, decimal_places=2)\n        pages = models.PositiveIntegerField(default=200)\n        stock_count = models.PositiveIntegerField(default=30)\n\n        # List the fields for `PublishingInformationSerializer` nested\n        # serializer. This does not cause a model change.\n        publishing_information = NestedProxyField(\n            'publication_date',\n            'isbn',\n            'pages',\n        )\n\n        # List the fields for `StockInformationSerializer` nested serializer.\n        # This does not cause a model change.\n        stock_information = NestedProxyField(\n            'stock_count',\n            'price',\n            'state',\n        )\n\n        class Meta(object):\n            \"\"\"Meta options.\"\"\"\n\n            ordering = [\"isbn\"]\n\n        def __str__(self):\n            return self.title\n\nSample serializers\n~~~~~~~~~~~~~~~~~~\n\nAt first, we add ``nested_proxy_field`` property to the ``Meta`` class\ndefinitions  of ``PublishingInformationSerializer`` and\n``StockInformationSerializer`` nested serializers.\n\nThen we define our (main) ``BookSerializer`` class, which is going to be\nused a ``serializer_class`` of the ``BookViewSet``. We inherit the\n``BookSerializer`` from\n``rest_framework_tricks.serializers.HyperlinkedModelSerializer``\ninstead of the one of the Django REST framework.\n\nRequired imports\n^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from rest_framework import serializers\n    from rest_framework_tricks.serializers import (\n        HyperlinkedModelSerializer,\n    )\n\n    from .models import Book\n\nDefining the serializers\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n**Nested serializer**\n\n.. code-block:: python\n\n    class PublishingInformationSerializer(serializers.ModelSerializer):\n        \"\"\"Publishing information serializer.\"\"\"\n\n        publication_date = serializers.DateField(required=False)\n        isbn = serializers.CharField(required=False)\n        pages = serializers.IntegerField(required=False)\n\n        class Meta(object):\n            \"\"\"Meta options.\"\"\"\n\n            model = Book\n            fields = (\n                'publication_date',\n                'isbn',\n                'pages',\n            )\n            # Note, that this should be set to True to identify that\n            # this serializer is going to be used as `NestedProxyField`.\n            nested_proxy_field = True\n\n**Nested serializer**\n\n.. code-block:: python\n\n    class StockInformationSerializer(serializers.ModelSerializer):\n        \"\"\"Stock information serializer.\"\"\"\n\n        class Meta(object):\n            \"\"\"Meta options.\"\"\"\n\n            model = Book\n            fields = (\n                'stock_count',\n                'price',\n                'state',\n            )\n            # Note, that this should be set to True to identify that\n            # this serializer is going to be used as `NestedProxyField`.\n            nested_proxy_field = True\n\n**Main serializer to be used in the ViewSet**\n\n.. code-block:: python\n\n    # Note, that we are importing the ``HyperlinkedModelSerializer`` from\n    # the `rest_framework_tricks.serializers`.\n    class BookSerializer(HyperlinkedModelSerializer):\n        \"\"\"Book serializer.\"\"\"\n\n        publishing_information = PublishingInformationSerializer(required=False)\n        stock_information = StockInformationSerializer(required=False)\n\n        class Meta(object):\n            \"\"\"Meta options.\"\"\"\n\n            model = Book\n            fields = (\n                'url',\n                'id',\n                'title',\n                'description',\n                'summary',\n                'publishing_information',\n                'stock_information',\n            )\n\nSample ViewSet\n~~~~~~~~~~~~~~\n\nAbsolutely no customisations here.\n\nRequired imports\n^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    from rest_framework.viewsets import ModelViewSet\n    from rest_framework.permissions import AllowAny\n\n    from .models import Book\n    from .serializers import BookSerializer\n\nViewSet definition\n^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    class BookViewSet(ModelViewSet):\n        \"\"\"Book ViewSet.\"\"\"\n\n        queryset = Book.objects.all()\n        serializer_class = BookSerializer\n        permission_classes = [AllowAny]\n\nSample OPTIONS call\n^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: text\n\n    OPTIONS /books/api/books/\n    HTTP 200 OK\n    Allow: GET, POST, HEAD, OPTIONS\n    Content-Type: application/json\n    Vary: Accept\n\n.. code-block:: json\n\n    {\n        \"name\": \"Book List\",\n        \"description\": \"Book ViewSet.\",\n        \"renders\": [\n            \"application/json\",\n            \"text/html\"\n        ],\n        \"parses\": [\n            \"application/json\",\n            \"application/x-www-form-urlencoded\",\n            \"multipart/form-data\"\n        ],\n        \"actions\": {\n            \"POST\": {\n                \"id\": {\n                    \"type\": \"integer\",\n                    \"required\": false,\n                    \"read_only\": true,\n                    \"label\": \"ID\"\n                },\n                \"title\": {\n                    \"type\": \"string\",\n                    \"required\": true,\n                    \"read_only\": false,\n                    \"label\": \"Title\",\n                    \"max_length\": 100\n                },\n                \"description\": {\n                    \"type\": \"string\",\n                    \"required\": false,\n                    \"read_only\": false,\n                    \"label\": \"Description\"\n                },\n                \"summary\": {\n                    \"type\": \"string\",\n                    \"required\": false,\n                    \"read_only\": false,\n                    \"label\": \"Summary\"\n                },\n                \"publishing_information\": {\n                    \"type\": \"nested object\",\n                    \"required\": false,\n                    \"read_only\": false,\n                    \"label\": \"Publishing information\",\n                    \"children\": {\n                        \"publication_date\": {\n                            \"type\": \"date\",\n                            \"required\": false,\n                            \"read_only\": false,\n                            \"label\": \"Publication date\"\n                        },\n                        \"isbn\": {\n                            \"type\": \"string\",\n                            \"required\": false,\n                            \"read_only\": false,\n                            \"label\": \"Isbn\"\n                        },\n                        \"pages\": {\n                            \"type\": \"integer\",\n                            \"required\": false,\n                            \"read_only\": false,\n                            \"label\": \"Pages\"\n                        }\n                    }\n                },\n                \"stock_information\": {\n                    \"type\": \"nested object\",\n                    \"required\": false,\n                    \"read_only\": false,\n                    \"label\": \"Stock information\",\n                    \"children\": {\n                        \"stock_count\": {\n                            \"type\": \"integer\",\n                            \"required\": false,\n                            \"read_only\": false,\n                            \"label\": \"Stock count\"\n                        },\n                        \"price\": {\n                            \"type\": \"decimal\",\n                            \"required\": true,\n                            \"read_only\": false,\n                            \"label\": \"Price\"\n                        },\n                        \"state\": {\n                            \"type\": \"choice\",\n                            \"required\": false,\n                            \"read_only\": false,\n                            \"label\": \"State\",\n                            \"choices\": [\n                                {\n                                    \"value\": \"published\",\n                                    \"display_name\": \"Published\"\n                                },\n                                {\n                                    \"value\": \"not_published\",\n                                    \"display_name\": \"Not published\"\n                                },\n                                {\n                                    \"value\": \"in_progress\",\n                                    \"display_name\": \"In progress\"\n                                },\n                                {\n                                    \"value\": \"cancelled\",\n                                    \"display_name\": \"Cancelled\"\n                                },\n                                {\n                                    \"value\": \"rejected\",\n                                    \"display_name\": \"Rejected\"\n                                }\n                            ]\n                        }\n                    }\n                }\n            }\n        }\n    }\n\nTesting\n=======\n\nProject is covered with tests.\n\nTo test with all supported Python/Django versions type:\n\n.. code-block:: sh\n\n    tox\n\nTo test against specific environment, type:\n\n.. code-block:: sh\n\n    tox -e py36-django110\n\nTo test just your working environment type:\n\n.. code-block:: sh\n\n    ./runtests.py\n\nTo run a single test in your working environment type:\n\n.. code-block:: sh\n\n    ./runtests.py src/rest_framework_tricks/tests/test_nested_proxy_field.py\n\nOr:\n\n.. code-block:: sh\n\n    ./manage.py test rest_framework_tricks.tests.test_nested_proxy_field\n\nIt's assumed that you have all the requirements installed. If not, first\ninstall the test requirements:\n\n.. code-block:: sh\n\n    pip install -r examples/requirements/test.txt\n\nWriting documentation\n=====================\n\nKeep the following hierarchy.\n\n.. code-block:: text\n\n    =====\n    title\n    =====\n\n    header\n    ======\n\n    sub-header\n    ----------\n\n    sub-sub-header\n    ~~~~~~~~~~~~~~\n\n    sub-sub-sub-header\n    ^^^^^^^^^^^^^^^^^^\n\n    sub-sub-sub-sub-header\n    ++++++++++++++++++++++\n\n    sub-sub-sub-sub-sub-header\n    **************************\n\nLicense\n=======\n\nGPL 2.0/LGPL 2.1\n\nSupport\n=======\n\nFor any issues contact me at the e-mail given in the `Author`_ section.\n\nAuthor\n======\n\nArtur Barseghyan <artur.barseghyan@gmail.com>\n",
    "docs_url": "https://pythonhosted.org/django-rest-framework-tricks/",
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/barseghyanartur/django-rest-framework-tricks/",
    "keywords": "django",
    "license": "GPL 2.0/LGPL 2.1",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rest-framework-tricks",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rest-framework-tricks/",
    "release_url": "https://pypi.org/project/django-rest-framework-tricks/0.1.8/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Collection of various tricks for Django REST framework.",
    "version": "0.1.8"
  },
  "releases": {
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9848100edc107833335786fb83584615",
          "sha256": "99f41fbadd68a6319dce78d8ca71a0fbdaaca0f2f5f178ca471892298ad0e76b"
        },
        "downloads": 0,
        "filename": "django_rest_framework_tricks-0.1.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9848100edc107833335786fb83584615",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 16822,
        "upload_time": "2017-06-30T22:22:32",
        "url": "https://files.pythonhosted.org/packages/9b/68/667df6f0cf56db2eeb0b921517d8bda4858a36867245c0ae27fb50f61e7c/django_rest_framework_tricks-0.1.8-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9ae4eff37a362500a8dea6c8a38a4293",
          "sha256": "cac51b239ea13f9421f286f49244ac4598687026fa59d128dd7fda8abe48f407"
        },
        "downloads": 0,
        "filename": "django-rest-framework-tricks-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "9ae4eff37a362500a8dea6c8a38a4293",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29135,
        "upload_time": "2017-06-30T22:22:30",
        "url": "https://files.pythonhosted.org/packages/71/b5/ae85f76ac616fb16de9d5cf6fab518d977a4175014d77cd577c46451b878/django-rest-framework-tricks-0.1.8.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9848100edc107833335786fb83584615",
        "sha256": "99f41fbadd68a6319dce78d8ca71a0fbdaaca0f2f5f178ca471892298ad0e76b"
      },
      "downloads": 0,
      "filename": "django_rest_framework_tricks-0.1.8-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9848100edc107833335786fb83584615",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 16822,
      "upload_time": "2017-06-30T22:22:32",
      "url": "https://files.pythonhosted.org/packages/9b/68/667df6f0cf56db2eeb0b921517d8bda4858a36867245c0ae27fb50f61e7c/django_rest_framework_tricks-0.1.8-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "9ae4eff37a362500a8dea6c8a38a4293",
        "sha256": "cac51b239ea13f9421f286f49244ac4598687026fa59d128dd7fda8abe48f407"
      },
      "downloads": 0,
      "filename": "django-rest-framework-tricks-0.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "9ae4eff37a362500a8dea6c8a38a4293",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 29135,
      "upload_time": "2017-06-30T22:22:30",
      "url": "https://files.pythonhosted.org/packages/71/b5/ae85f76ac616fb16de9d5cf6fab518d977a4175014d77cd577c46451b878/django-rest-framework-tricks-0.1.8.tar.gz"
    }
  ]
}