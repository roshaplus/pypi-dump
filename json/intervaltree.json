{
  "info": {
    "author": "Chaim-Leib Halbert, Konstantin Tretyakov",
    "author_email": "chaim.leib.halbert@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development :: Libraries",
      "Topic :: Text Processing :: General",
      "Topic :: Text Processing :: Linguistic",
      "Topic :: Text Processing :: Markup"
    ],
    "description": ".. This file is automatically generated by setup.py from README.md and CHANGELOG.md.\n\nintervaltree\n============\n\nA mutable, self-balancing interval tree for Python 2 and 3. Queries may\nbe by point, by range overlap, or by range envelopment.\n\nThis library was designed to allow tagging text and time intervals,\nwhere the intervals include the lower bound but not the upper bound.\n\nInstalling\n----------\n\n.. code:: sh\n\n    pip install intervaltree\n\nFeatures\n--------\n\n-  Supports Python 2.6+ and Python 3.2+\n-  Initializing\n\n   -  blank ``tree = IntervalTree()``\n   -  from an iterable of ``Interval`` objects\n      (``tree = IntervalTree(intervals)``)\n   -  from an iterable of tuples\n      (``tree = IntervalTree.from_tuples(interval_tuples)``)\n\n-  Insertions\n\n   -  ``tree[begin:end] = data``\n   -  ``tree.add(interval)``\n   -  ``tree.addi(begin, end, data)``\n\n-  Deletions\n\n   -  ``tree.remove(interval)`` (raises ``ValueError`` if not present)\n   -  ``tree.discard(interval)`` (quiet if not present)\n   -  ``tree.removei(begin, end, data)`` (short for\n      ``tree.remove(Interval(begin, end, data))``)\n   -  ``tree.discardi(begin, end, data)`` (short for\n      ``tree.discard(Interval(begin, end, data))``)\n   -  ``tree.remove_overlap(point)``\n   -  ``tree.remove_overlap(begin, end)`` (removes all overlapping the\n      range)\n   -  ``tree.remove_envelop(begin, end)`` (removes all enveloped in the\n      range)\n\n-  Overlap queries\n\n   -  ``tree[point]``\n   -  ``tree[begin:end]``\n   -  ``tree.search(point)``\n   -  ``tree.search(begin, end)``\n\n-  Envelop queries\n\n   -  ``tree.search(begin, end, strict=True)``\n\n-  Membership queries\n\n   -  ``interval_obj in tree`` (this is fastest, O(1))\n   -  ``tree.containsi(begin, end, data)``\n   -  ``tree.overlaps(point)``\n   -  ``tree.overlaps(begin, end)``\n\n-  Iterable\n\n   -  ``for interval_obj in tree:``\n   -  ``tree.items()``\n\n-  Sizing\n\n   -  ``len(tree)``\n   -  ``tree.is_empty()``\n   -  ``not tree``\n   -  ``tree.begin()`` (the ``begin`` coordinate of the leftmost\n      interval)\n   -  ``tree.end()`` (the ``end`` coordinate of the rightmost interval)\n\n-  Set-like operations\n\n   -  union\n\n      -  ``result_tree = tree.union(iterable)``\n      -  ``result_tree = tree1 | tree2``\n      -  ``tree.update(iterable)``\n      -  ``tree |= other_tree``\n\n   -  difference\n\n      -  ``result_tree = tree.difference(iterable)``\n      -  ``result_tree = tree1 - tree2``\n      -  ``tree.difference_update(iterable)``\n      -  ``tree -= other_tree``\n\n   -  intersection\n\n      -  ``result_tree = tree.intersection(iterable)``\n      -  ``result_tree = tree1 & tree2``\n      -  ``tree.intersection_update(iterable)``\n      -  ``tree &= other_tree``\n\n   -  symmetric difference\n\n      -  ``result_tree = tree.symmetric_difference(iterable)``\n      -  ``result_tree = tree1 ^ tree2``\n      -  ``tree.symmetric_difference_update(iterable)``\n      -  ``tree ^= other_tree``\n\n   -  comparison\n\n      -  ``tree1.issubset(tree2)`` or ``tree1 <= tree2``\n      -  ``tree1 <= tree2``\n      -  ``tree1.issuperset(tree2)`` or ``tree1 > tree2``\n      -  ``tree1 >= tree2``\n      -  ``tree1 == tree2``\n\n-  Restructuring\n\n   -  ``chop(begin, end)`` (slice intervals and remove everything\n      between ``begin`` and ``end``)\n   -  ``slice(point)`` (slice intervals at ``point``)\n   -  ``split_overlaps()`` (slice at all interval boundaries)\n\n-  Copying and typecasting\n\n   -  ``IntervalTree(tree)`` (``Interval`` objects are same as those in\n      tree)\n   -  ``tree.copy()`` (``Interval`` objects are shallow copies of those\n      in tree)\n   -  ``set(tree)`` (can later be fed into ``IntervalTree()``)\n   -  ``list(tree)`` (ditto)\n\n-  Pickle-friendly\n-  Automatic AVL balancing\n\nExamples\n--------\n\n-  Getting started\n\n   .. code:: python\n\n       >>> from intervaltree import Interval, IntervalTree\n       >>> t = IntervalTree()\n       >>> t\n       IntervalTree()\n\n-  Adding intervals - any object works!\n\n   .. code:: python\n\n       >>> t[1:2] = \"1-2\"\n       >>> t[4:7] = (4, 7)\n       >>> t[5:9] = {5: 9}\n\n-  Query by point\n\n   | The result of a query is a ``set`` object, so if ordering is\n     important,\n   | you must sort it first.\n\n   .. code:: python\n\n       >>> sorted(t[6])\n       [Interval(4, 7, (4, 7)), Interval(5, 9, {5: 9})]\n       >>> sorted(t[6])[0]\n       Interval(4, 7, (4, 7))\n\n-  Query by range\n\n   Note that ranges are inclusive of the lower limit, but non-inclusive\n   of the upper limit. So:\n\n   .. code:: python\n\n       >>> sorted(t[2:4])\n       []\n\n   But:\n\n   .. code:: python\n\n       >>> sorted(t[1:5])\n       [Interval(1, 2, '1-2'), Interval(4, 7, (4, 7))]\n\n-  Accessing an ``Interval`` object\n\n   .. code:: python\n\n       >>> iv = Interval(4, 7, (4, 7))\n       >>> iv.begin\n       4\n       >>> iv.end\n       7\n       >>> iv.data\n       (4, 7)\n\n       >>> begin, end, data = iv\n       >>> begin\n       4\n       >>> end\n       7\n       >>> data\n       (4, 7)\n\n-  Constructing from lists of intervals\n\n   We could have made a similar tree this way:\n\n   .. code:: python\n\n       >>> ivs = [(1, 2), (4, 7), (5, 9)]\n       >>> t = IntervalTree(\n       ...    Interval(begin, end, \"%d-%d\" % (begin, end)) for begin, end in ivs\n       ... )\n\n   Or, if we don't need the data fields:\n\n   .. code:: python\n\n       >>> t2 = IntervalTree(Interval(*iv) for iv in ivs)\n\n-  Removing intervals\n\n   .. code:: python\n\n       >>> t.remove( Interval(1, 2, \"1-2\") )\n       >>> sorted(t)\n       [Interval(4, 7, '4-7'), Interval(5, 9, '5-9')]\n\n       >>> t.remove( Interval(500, 1000, \"Doesn't exist\"))  # raises ValueError\n       Traceback (most recent call last):\n       ValueError\n\n       >>> t.discard(Interval(500, 1000, \"Doesn't exist\"))  # quietly does nothing\n\n       >>> del t[5]  # same as t.remove_overlap(5)\n       >>> t\n       IntervalTree()\n\n   We could also empty a tree entirely:\n\n   .. code:: python\n\n       >>> t2.clear()\n       >>> t2\n       IntervalTree()\n\n   Or remove intervals that overlap a range:\n\n   .. code:: python\n\n       >>> t = IntervalTree([\n       ...     Interval(0, 10), \n       ...     Interval(10, 20), \n       ...     Interval(20, 30), \n       ...     Interval(30, 40)])\n       >>> t.remove_overlap(25, 35)\n       >>> sorted(t)\n       [Interval(0, 10), Interval(10, 20)]\n\n   We can also remove only those intervals completely enveloped in a\n   range:\n\n   .. code:: python\n\n       >>> t.remove_envelop(5, 20)\n       >>> sorted(t)\n       [Interval(0, 10)]\n\n-  Chopping\n\n   We could also chop out parts of the tree:\n\n   .. code:: python\n\n       >>> t = IntervalTree([Interval(0, 10)])\n       >>> t.chop(3, 7)\n       >>> sorted(t)\n       [Interval(0, 3), Interval(7, 10)]\n\n   To modify the new intervals' data fields based on which side of the\n   interval is being chopped:\n\n   .. code:: python\n\n       >>> def datafunc(iv, islower):\n       ...     oldlimit = iv[islower]\n       ...     return \"oldlimit: {0}, islower: {1}\".format(oldlimit, islower)\n       >>> t = IntervalTree([Interval(0, 10)])\n       >>> t.chop(3, 7, datafunc)\n       >>> sorted(t)[0]\n       Interval(0, 3, 'oldlimit: 10, islower: True')\n       >>> sorted(t)[1]\n       Interval(7, 10, 'oldlimit: 0, islower: False')\n\n-  Slicing\n\n   You can also slice intervals in the tree without removing them:\n\n   .. code:: python\n\n       >>> t = IntervalTree([Interval(0, 10), Interval(5, 15)])\n       >>> t.slice(3)\n       >>> sorted(t)\n       [Interval(0, 3), Interval(3, 10), Interval(5, 15)]\n\n   You can also set the data fields, for example, re-using\n   ``datafunc()`` from above:\n\n   .. code:: python\n\n       >>> t = IntervalTree([Interval(5, 15)])\n       >>> t.slice(10, datafunc)\n       >>> sorted(t)[0]\n       Interval(5, 10, 'oldlimit: 15, islower: True')\n       >>> sorted(t)[1]\n       Interval(10, 15, 'oldlimit: 5, islower: False')\n\nFuture improvements\n-------------------\n\nSee the issue tracker on GitHub.\n\nBased on\n--------\n\n-  Eternally Confuzzled's AVL tree\n-  Wikipedia's Interval Tree\n-  Heavily modified from Tyler Kahn's Interval Tree implementation in\n   Python (GitHub project)\n-  Incorporates contributions from:\n\n   -  konstantint/Konstantin Tretyakov of the University of Tartu\n      (Estonia)\n   -  siniG/Avi Gabay\n   -  lmcarril/Luis M. Carril of the Karlsruhe Institute for Technology\n      (Germany)\n\nCopyright\n---------\n\n-  Chaim-Leib Halbert, 2013-2015\n-  Modifications, Konstantin Tretyakov, 2014\n\nLicensed under the Apache License, version 2.0.\n\nThe source code for this project is at\nhttps://github.com/chaimleib/intervaltree\n\nChange log\n==========\n\nVersion 2.1.0\n-------------\n\n-  Added:\n\n   -  ``merge_overlaps()`` method and tests\n   -  ``merge_equals()`` method and tests\n   -  ``range()`` method\n   -  ``span()`` method, for returning the difference between ``end()``\n      and ``begin()``\n\n-  Fixes:\n\n   -  Development version numbering is changing to be compliant with\n      PEP440. Version numbering now contains major, minor and micro\n      release numbers, plus the number of builds following the stable\n      release version, e.g. 2.0.4b34\n   -  Speed improvement: ``begin()`` and ``end()`` methods used\n      iterative ``min()`` and ``max()`` builtins instead of the more\n      efficient ``iloc`` member available to ``SortedDict``\n   -  ``overlaps()`` method used to return ``True`` even if provided\n      null test interval\n\n-  Maintainers:\n\n   -  Added coverage test (``make coverage``) with html report\n      (``htmlcov/index.html``)\n   -  Tests run slightly faster\n\nVersion 2.0.4\n-------------\n\n-  Fix: Issue #27: README incorrectly showed using a comma instead of a\n   colon when querying the ``IntervalTree``: it showed\n   ``tree[begin, end]`` instead of ``tree[begin:end]``\n\nVersion 2.0.3\n-------------\n\n-  Fix: README showed using + operator for setlike union instead of the\n   correct \\| operator\n-  Removed tests from release package to speed up installation; to get\n   the tests, download from GitHub\n\nVersion 2.0.2\n-------------\n\n-  Fix: Issue #20: performance enhancement for large trees.\n   ``IntervalTree.search()`` made a copy of the entire\n   ``boundary_table`` resulting in linear search time. The\n   ``sortedcollections`` package is now the sole install dependency\n\nVersion 2.0.1\n-------------\n\n-  Fix: Issue #26: failed to prune empty ``Node`` after a rotation\n   promoted contents of ``s_center``\n\nVersion 2.0.0\n-------------\n\n-  ``IntervalTree`` now supports the full ``collections.MutableSet`` API\n-  Added:\n\n   -  ``__delitem__`` to ``IntervalTree``\n   -  ``Interval`` comparison methods ``lt()``, ``gt()``, ``le()`` and\n      ``ge()`` to ``Interval``, as an alternative to the comparison\n      operators, which are designed for sorting\n   -  ``IntervalTree.from_tuples(iterable)``\n   -  ``IntervalTree.clear()``\n   -  ``IntervalTree.difference(iterable)``\n   -  ``IntervalTree.difference_update(iterable)``\n   -  ``IntervalTree.union(iterable)``\n   -  ``IntervalTree.intersection(iterable)``\n   -  ``IntervalTree.intersection_update(iterable)``\n   -  ``IntervalTree.symmetric_difference(iterable)``\n   -  ``IntervalTree.symmetric_difference_update(iterable)``\n   -  ``IntervalTree.chop(a, b)``\n   -  ``IntervalTree.slice(point)``\n\n-  Deprecated ``IntervalTree.extend()`` -- use ``update()`` instead\n-  Internal improvements:\n\n   -  More verbose tests with progress bars\n   -  More tests for comparison and sorting behavior\n   -  Code in the README is included in the unit tests\n\n-  Fixes\n\n   -  BACKWARD INCOMPATIBLE: On ranged queries where ``begin >= end``,\n      the query operated on the overlaps of ``begin``. This behavior was\n      documented as expected in 1.x; it is now changed to be more\n      consistent with the definition of ``Interval``\\ s, which are\n      half-open.\n   -  Issue #25: pruning empty Nodes with staggered descendants could\n      result in invalid trees\n   -  Sorting ``Interval``\\ s and numbers in the same list gathered all\n      the numbers at the beginning and the ``Interval``\\ s at the end\n   -  ``IntervalTree.overlaps()`` and friends returned ``None`` instead\n      of ``False``\n   -  Maintainers: ``make install-testpypi`` failed because the ``pip``\n      was missing a ``--pre`` flag\n\nVersion 1.1.1\n-------------\n\n-  Removed requirement for pyandoc in order to run functionality tests.\n\nVersion 1.1.0\n-------------\n\n-  Added ability to use ``Interval.distance_to()`` with points, not just\n   ``Intervals``\n-  Added documentation on return types to ``IntervalTree`` and\n   ``Interval``\n-  ``Interval.__cmp__()`` works with points too\n-  Fix: ``IntervalTree.score()`` returned maximum score of 0.5 instead\n   of 1.0. Now returns max of subscores instead of avg\n-  Internal improvements:\n\n   -  Development version numbering scheme, based on ``git describe``\n      the \"building towards\" release is appended after a hyphen, eg.\n      1.0.2-37-g2da2ef0-1.10. The previous tagged release is 1.0.2, and\n      there have been 37 commits since then, current tag is g2da2ef0,\n      and we are getting ready for a 1.1.0 release\n   -  Optimality tests added\n   -  ``Interval`` overlap tests for ranges, ``Interval``\\ s and points\n      added\n\nVersion 1.0.2\n-------------\n\n| -Bug fixes:\n|  - ``Node.depth_score_helper()`` raised ``AttributeError``\n|  - README formatting\n\nVersion 1.0.1\n-------------\n\n-  Fix: pip install failure because of failure to generate README.rst\n\nVersion 1.0.0\n-------------\n\n-  Renamed from PyIntervalTree to intervaltree\n-  Speed improvements for adding and removing Intervals (~70% faster\n   than 0.4)\n-  Bug fixes:\n\n   -  BACKWARD INCOMPATIBLE: ``len()`` of an ``Interval`` is always 3,\n      reverting to default behavior for ``namedtuples``. In Python 3,\n      ``len`` returning a non-integer raises an exception. Instead, use\n      ``Interval.length()``, which returns 0 for null intervals and\n      ``end - begin`` otherwise. Also, if the ``len() === 0``, then\n      ``not iv`` is ``True``.\n   -  When inserting an ``Interval`` via ``__setitem__`` and improper\n      parameters given, all errors were transformed to ``IndexError``\n   -  ``split_overlaps`` did not update the ``boundary_table`` counts\n\n-  Internal improvements:\n\n   -  More robust local testing tools\n   -  Long series of interdependent tests have been separated into\n      sections\n\nVersion 0.4\n-----------\n\n-  Faster balancing (~80% faster)\n-  Bug fixes:\n\n   -  Double rotations were performed in place of a single rotation when\n      presented an unbalanced Node with a balanced child.\n   -  During single rotation, kept referencing an unrotated Node instead\n      of the new, rotated one\n\nVersion 0.3.3\n-------------\n\n-  Made IntervalTree crash if inited with a null Interval (end <= begin)\n-  IntervalTree raises ValueError instead of AssertionError when a null\n   Interval is inserted\n\nVersion 0.3.2\n-------------\n\n-  Support for Python 3.2+ and 2.6+\n-  Changed license from LGPL to more permissive Apache license\n-  Merged changes from https://github.com/konstantint/PyIntervalTree to\n   https://github.com/chaimleib/PyIntervalTree\n\n   -  Interval now inherits from a namedtuple. Benefits: should be\n      faster.\n      Drawbacks: slight behavioural change (Intervals not mutable\n      anymore).\n   -  Added float tests\n   -  Use setup.py for tests\n   -  Automatic testing via travis-ci\n   -  Removed dependency on six\n\n-  Interval improvements:\n\n   -  Intervals without data have a cleaner string representation\n   -  Intervals without data are pickled more compactly\n   -  Better hashing\n   -  Intervals are ordered by begin, then end, then by data. If data is\n      not\n      orderable, sorts by type(data)\n\n-  Bug fixes:\n\n   -  Fixed crash when querying empty tree\n   -  Fixed missing close parenthesis in examples\n   -  Made IntervalTree crash earlier if a null Interval is added\n\n-  Internals:\n\n   -  New test directory\n   -  Nicer display of data structures for debugging, using custom\n      test/pprint.py (Python 2.6, 2.7)\n   -  More sensitive exception handling\n   -  Local script to test in all supported versions of Python\n   -  Added IntervalTree.score() to measure how optimally a tree is\n      structured\n\nVersion 0.2.3\n-------------\n\n-  Slight changes for inclusion in PyPI.\n-  Some documentation changes\n-  Added tests\n-  Bug fix: interval addition via [] was broken in Python 2.7 (see\n   http://bugs.python.org/issue21785)\n-  Added intervaltree.bio subpackage, adding some utilities for use in\n   bioinformatics\n\nVersion 0.2.2b\n--------------\n\n-  Forked from https://github.com/MusashiAharon/PyIntervalTree",
    "docs_url": null,
    "download_url": "https://github.com/chaimleib/intervaltree/tarball/2.1.0",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/chaimleib/intervaltree",
    "keywords": "interval-tree data-structure intervals tree",
    "license": "Apache License, Version 2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "intervaltree",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/intervaltree/",
    "release_url": "https://pypi.org/project/intervaltree/2.1.0/",
    "requires_python": null,
    "summary": "Editable interval tree data structure for Python 2 and 3",
    "version": "2.1.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a5a5867755cc73ff01e2a366ba822ef1",
          "sha256": "dd94427d37bccbb30c865d72c6294b58b0cf89563a6e272634d449c330cfd23e"
        },
        "downloads": 1257,
        "filename": "intervaltree-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a5a5867755cc73ff01e2a366ba822ef1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21789,
        "upload_time": "2014-12-09T18:04:44",
        "url": "https://files.pythonhosted.org/packages/89/ba/0fa4b50ad13915280e036ab6493194848d55ccb954716310882948c5f279/intervaltree-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "09d78482364b7be2d14f9b84a76a02d7",
          "sha256": "92eceee3c9ed636330531ab22390cb8838220081f30d3bf7b4bfef9db23c0e50"
        },
        "downloads": 1265,
        "filename": "intervaltree-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "09d78482364b7be2d14f9b84a76a02d7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22021,
        "upload_time": "2014-12-09T23:55:54",
        "url": "https://files.pythonhosted.org/packages/4e/ac/f5492dd5a132325356d3381163b69679c2ef773f2f1bddb4ffa62b8ddbc8/intervaltree-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "46b4bca79f69232d8417a7b830044625",
          "sha256": "323c318ea9c62accc18e51e099cbb5ddadd409c6fda6ced55941ed68de0bdc53"
        },
        "downloads": 1262,
        "filename": "intervaltree-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "46b4bca79f69232d8417a7b830044625",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22304,
        "upload_time": "2014-12-10T12:48:33",
        "url": "https://files.pythonhosted.org/packages/48/7f/dda2b63ea3e0824e7c98d1f0c923d582ed2b14c2f55db7b5fa436d551ce2/intervaltree-1.0.2.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cddc4125f4c6c4e9c8e57fb7299f04ec",
          "sha256": "85e35cdf4a79446f3922b44ed6ca02a968b0d74abc48cf551b9e2ecebb2964a5"
        },
        "downloads": 1255,
        "filename": "intervaltree-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cddc4125f4c6c4e9c8e57fb7299f04ec",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24674,
        "upload_time": "2014-12-10T22:57:12",
        "url": "https://files.pythonhosted.org/packages/02/98/d0ee7d50ba2905c255a39d90b69c104ab8b11cadb78b39fc9e16ea44247d/intervaltree-1.1.0.tar.gz"
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e1e61658207276956e039b8dc77b7066",
          "sha256": "9b2393eed6bd8db986b21f0d41247ad7020fe966864356a45d5c131fdfb53cd6"
        },
        "downloads": 2951,
        "filename": "intervaltree-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e1e61658207276956e039b8dc77b7066",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24736,
        "upload_time": "2014-12-18T06:30:42",
        "url": "https://files.pythonhosted.org/packages/f1/f9/aa84a4a63ef87b9baa2aad5dafee79056c395a63400d8c870dd2f0629a31/intervaltree-1.1.1.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a18fd8142c58662dca4d7775a381e43f",
          "sha256": "b89f2ce2b0b2f9a7dcb7e7286842e8d98f875a1bbef3c426cd1c715e56bb1db8"
        },
        "downloads": 1197,
        "filename": "intervaltree-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a18fd8142c58662dca4d7775a381e43f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1209656,
        "upload_time": "2014-12-31T12:35:09",
        "url": "https://files.pythonhosted.org/packages/f7/71/0e52390f999103f73e5b5a3a843fbb74b06932e47810c133c82316b12a2f/intervaltree-2.0.0.tar.gz"
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a9e2be17e1868d09f2bb69f57200181b",
          "sha256": "c002f3dbb19385c6c138d9e6a9cfd7b620f4e6688284c20e35b8d7aa9bc1aa50"
        },
        "downloads": 1199,
        "filename": "intervaltree-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a9e2be17e1868d09f2bb69f57200181b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1209821,
        "upload_time": "2015-01-01T06:58:51",
        "url": "https://files.pythonhosted.org/packages/6c/fb/2b0ca30b20f8b7685d591c1b1f3c9fb89dd6173c96db42fc3a008950418f/intervaltree-2.0.1.tar.gz"
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8f2549a3fd16516af9462639d7b60a6b",
          "sha256": "ff6446339450085d54c196f38f04d85e09ae2239d68d1e917c22b7668eb2ad56"
        },
        "downloads": 1250,
        "filename": "intervaltree-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8f2549a3fd16516af9462639d7b60a6b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1210250,
        "upload_time": "2015-01-02T14:09:21",
        "url": "https://files.pythonhosted.org/packages/82/8a/4b4fe24c0371cbda0bb9654414ebc3d3261edc5c1e397998b4c93f2cc9f8/intervaltree-2.0.2.tar.gz"
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1ec8b93aa94bdc1af9ec7e39765b28d8",
          "sha256": "514ede1145f74a36b216663620bfaa60f359e602f50d0f562c39e1c6ec5a49e0"
        },
        "downloads": 1174,
        "filename": "intervaltree-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1ec8b93aa94bdc1af9ec7e39765b28d8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35318,
        "upload_time": "2015-01-18T06:42:47",
        "url": "https://files.pythonhosted.org/packages/a7/4b/c4a2c835585465696e151078d9c0cee8a53df8c3fdf5a41799a0656e31e8/intervaltree-2.0.3.tar.gz"
      }
    ],
    "2.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "20503e888d75f7c8d12362fb14e72e45",
          "sha256": "d5c45ce8874ef04303c02b66327793320aa2027cf25c89188f74be69beaa3c5f"
        },
        "downloads": 7097,
        "filename": "intervaltree-2.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "20503e888d75f7c8d12362fb14e72e45",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35476,
        "upload_time": "2015-01-21T18:37:57",
        "url": "https://files.pythonhosted.org/packages/03/1b/1a96859cb09bd2c13efd0c06e46297cdb8d8b7a1b32cf15c296a6ae2d193/intervaltree-2.0.4.tar.gz"
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "33bef3448aaf30b78aa093dc7c315c2c",
          "sha256": "aca5804b88f70cb49050c37b6de59090570f77a75aec1932966cf69f6a48810b"
        },
        "downloads": 48238,
        "filename": "intervaltree-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "33bef3448aaf30b78aa093dc7c315c2c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38404,
        "upload_time": "2015-05-07T18:09:13",
        "url": "https://files.pythonhosted.org/packages/ca/c1/450d109b70fa58ca9d77972b02f69222412f9175ccf99fdeaf167be9583c/intervaltree-2.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "33bef3448aaf30b78aa093dc7c315c2c",
        "sha256": "aca5804b88f70cb49050c37b6de59090570f77a75aec1932966cf69f6a48810b"
      },
      "downloads": 48238,
      "filename": "intervaltree-2.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "33bef3448aaf30b78aa093dc7c315c2c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 38404,
      "upload_time": "2015-05-07T18:09:13",
      "url": "https://files.pythonhosted.org/packages/ca/c1/450d109b70fa58ca9d77972b02f69222412f9175ccf99fdeaf167be9583c/intervaltree-2.1.0.tar.gz"
    }
  ]
}