{
  "info": {
    "author": "Colby Chiang (colbychiang@wustl.edu)",
    "author_email": "colbychiang@wustl.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Copyright (c) 2014 Colby Chiang\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\nDescription: SVTyper\n        =======\n        [![GitHub license](https://img.shields.io/badge/license-MIT-blue.svg)](https://raw.githubusercontent.com/hall-lab/svtyper/master/LICENSE)\n        [![Build Status](https://travis-ci.org/hall-lab/svtyper.svg?branch=master)](https://travis-ci.org/hall-lab/svtyper)\n        \n        Bayesian genotyper for structural variants\n        \n        ## Overview\n        \n        SVTyper performs breakpoint genotyping of structural variants (SVs) using whole genome sequencing data. Users must supply a VCF file of sites to genotype (which may be generated by [LUMPY](https://github.com/arq5x/lumpy-sv)) as well as a BAM/CRAM file of Illumina paired-end reads aligned with [BWA-MEM](https://github.com/lh3/bwa). SVTyper assesses discordant and concordant reads from paired-end and split-read alignments to infer genotypes at each site. Algorithm details and benchmarking are described in [Chiang et al., 2015](http://www.nature.com/nmeth/journal/vaop/ncurrent/full/nmeth.3505.html).\n        \n        ![NA12878 heterozygous deletion](etc/het.png?raw=true \"NA12878 heterozygous deletion\")\n        \n        ## Installation\n        \n        Requirements:\n        - Python 2.7.x\n        \n        ### Install via `pip`\n        \n            pip install git+https://github.com/hall-lab/svtyper.git\n        \n        `svtyper` depends on [pysam][0] _(version 0.12.0 or newer)_, [numpy][1], and [scipy][2]; `svtyper-sso` additionally depends on [cytoolz][7]. If the dependencies aren't already available on your system, `pip` will attempt to download and install them.\n        \n        ## `svtyper` vs `svtyper-sso`\n        \n        `svtyper` is the original implementation of the genotyping algorithm, and works with multiple samples.  `svtyper-sso` is an alternative implementation of `svtyper` that is optimized for genotyping a single sample.  `svtyper-sso` is a parallelized implementation of `svtyper` that takes advantage of multiple CPU cores via the [multiprocessing][8] module. `svtyper-sso` can offer a 2x or more speedup (depending on how many CPU cores used) in genotyping a single sample.\n        \n        ## Example Usage\n        \n        ### `svtyper`\n        \n        #### As a Command Line Python Script\n        \n        ```bash\n        svtyper \\\n            -i sv.vcf \\\n            -B sample.bam \\\n            -l sample.bam.json \\\n            > sv.gt.vcf\n        ```\n        \n        #### As a Python Library\n        \n        ```python\n        import svtyper.classic as svt\n        \n        input_vcf = \"/path/to/input.vcf\"\n        input_bam = \"/path/to/input.bam\"\n        library_info = \"/path/to/library_info.json\"\n        output_vcf = \"/path/to/output.vcf\"\n        \n        with open(input_vcf, \"r\") as inf, open(output_vcf, \"w\") as outf:\n            svt.sv_genotype(bam_string=input_bam,\n                            vcf_in=inf,\n                            vcf_out=outf,\n                            min_aligned=20,\n                            split_weight=1,\n                            disc_weight=1,\n                            num_samp=1000000,\n                            lib_info_path=library_info,\n                            debug=False,\n                            alignment_outpath=None,\n                            ref_fasta=None,\n                            sum_quals=False,\n                            max_reads=None)\n        \n        # Results will be inside the /path/to/output.vcf file\n        ```\n        \n        ### `svtyper-sso`\n        \n        #### As a Command Line Python Script\n        \n        ```bash\n        svtyper-sso \\\n            --core 2 # number of cpu cores to use \\\n            --batch_size 1000 # number of SVs to process in a single batch (default: 1000) \\\n            --max_reads 1000 # skip genotyping if SV contains valid reads greater than this threshold (default: 1000) \\\n            -i sv.vcf \\\n            -B sample.bam \\\n            -l sample.bam.json \\\n            > sv.gt.vcf\n        ```\n        \n        #### As a Python Library\n        \n        ```python\n        import svtyper.singlesample as sso\n        \n        input_vcf = \"/path/to/input.vcf\"\n        input_bam = \"/path/to/input.bam\"\n        library_info = \"/path/to/library_info.json\"\n        output_vcf = \"/path/to/output.vcf\"\n        \n        with open(input_vcf, \"r\") as inf, open(output_vcf, \"w\") as outf:\n            sso.sso_genotype(bam_string=input_bam,\n                             vcf_in=inf,\n                             vcf_out=outf,\n                             min_aligned=20,\n                             split_weight=1,\n                             disc_weight=1,\n                             num_samp=1000000,\n                             lib_info_path=library_info,\n                             debug=False,\n                             alignment_outpath=None,\n                             ref_fasta=None,\n                             sum_quals=False,\n                             max_reads=1000,\n                             cores=2,\n                             batch_size=1000)\n        \n        # Results will be inside the /path/to/output.vcf file\n        ```\n        \n        ## Development\n        \n        Requirements:\n        - Python 2.7 or newer\n        - GNU Make\n        - [virtualenv][3] _(or [conda][4] for [anaconda][5] or [miniconda][6] users)_\n        \n        ### Setting Up a Development Environment\n        \n        #### Using `virtualenv`\n        \n            git clone https://github.com/hall-lab/svtyper.git\n            cd svtyper\n            virtualenv myvenv\n            source myvenv/bin/activate\n            pip install -e .\n            <add, edit, or delete code>\n            make test\n        \n            # when you're finished with development\n            git push <remote-name> <branch>\n            deactivate\n            cd .. && rm -rf svtyper\n        \n        #### Using `conda`\n        \n            git clone https://github.com/hall-lab/svtyper.git\n            cd svtyper\n            conda create --channel bioconda --name mycenv pysam numpy scipy cytoolz # type 'y' when prompted with \"proceed ([y]/n)?\"\n            source activate mycenv\n            pip install -e .\n            <add, edit, or delete code>\n            make test\n        \n        \n            # when you're finished with development\n            git push <remote-name> <branch>\n            source deactivate\n            cd .. && rm -rf svtyper\n            conda remove --name mycenv --all\n        \n        ## Troubleshooting\n        \n        Many common issues are related to abnormal insert size distributions in the BAM file. SVTyper provides methods to assess and visualize the characteristics of sequencing libraries.\n        \n        Running SVTyper with the `-l` flag creates a JSON file with essential metrics on a BAM file. SVTyper will sample the first N reads for the file (1 million by default) to parse the libraries, read groups, and insert size histograms. This can be done in the absence of a VCF file.\n        ```\n        svtyper \\\n            -B my.bam \\\n            -l my.bam.json\n        ```\n        \n        The [lib_stats.R](scripts/lib_stats.R) script produces insert size histograms from the JSON file\n        ```\n        scripts/lib_stats.R my.bam.json my.bam.json.pdf\n        ```\n        ![Insert size histogram](etc/my.bam.json.png?raw=true \"Insert size histogram\")\n        \n        \n        ## Citation\n        \n        C Chiang, R M Layer, G G Faust, M R Lindberg, D B Rose, E P Garrison, G T Marth, A R Quinlan, and I M Hall. SpeedSeq: ultra-fast personal genome analysis and interpretation. Nat Meth 12, 966\u2013968 (2015). doi:10.1038/nmeth.3505.\n        \n        http://www.nature.com/nmeth/journal/vaop/ncurrent/full/nmeth.3505.html\n        \n        [0]: https://github.com/pysam-developers/pysam\n        [1]: http://www.numpy.org/\n        [2]: https://www.scipy.org/\n        [3]: https://github.com/pypa/virtualenv\n        [4]: https://conda.io/docs/index.html\n        [5]: https://docs.continuum.io/anaconda/\n        [6]: https://conda.io/miniconda.html\n        [7]: https://github.com/pytoolz/cytoolz\n        [8]: https://docs.python.org/2/library/multiprocessing.html\n        \nPlatform: UNKNOWN\nClassifier: Intended Audience :: Science/Research\nClassifier: Topic :: Scientific/Engineering :: Bio-Informatics\nClassifier: License :: OSI Approved :: MIT License\nClassifier: Programming Language :: Python :: 2.7\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/hall-lab/svtyper",
    "keywords": "",
    "license": "The MIT License (MIT)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "svtyper",
    "platform": "",
    "project_url": "https://pypi.org/project/svtyper/",
    "release_url": "https://pypi.org/project/svtyper/0.5.0/",
    "requires_dist": [
      "scipy",
      "pysam (>=0.12.0)",
      "numpy",
      "cytoolz (>=0.8.2)"
    ],
    "requires_python": "",
    "summary": "Bayesian genotyper for structural variants",
    "version": "0.5.0"
  },
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "266de6ae6576adc0886e1fac8d215ae8",
          "sha256": "6914e7ef146d32c3a7aef0edccb164d58a2c45753f8f619de118fb5793449b87"
        },
        "downloads": -1,
        "filename": "svtyper-0.5.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "266de6ae6576adc0886e1fac8d215ae8",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 62766,
        "upload_time": "2018-01-19T22:15:25",
        "url": "https://files.pythonhosted.org/packages/5e/03/69ccdb6042f2527848e8c48b196da2b78f2f1dfc4d4dbe31d29910e172a8/svtyper-0.5.0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4d8e42bf66b4f74b06d7329c2e29c978",
          "sha256": "2c9b8b16747f4cadc2edd517530b366e5b642c1fc025a64d958a377f85171f92"
        },
        "downloads": -1,
        "filename": "svtyper-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4d8e42bf66b4f74b06d7329c2e29c978",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 46045,
        "upload_time": "2018-01-19T22:15:26",
        "url": "https://files.pythonhosted.org/packages/1e/4c/ae913a1b85e01566e735a2f83630d81beea5a2c8dedd0c148890bf91f5c6/svtyper-0.5.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "266de6ae6576adc0886e1fac8d215ae8",
        "sha256": "6914e7ef146d32c3a7aef0edccb164d58a2c45753f8f619de118fb5793449b87"
      },
      "downloads": -1,
      "filename": "svtyper-0.5.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "266de6ae6576adc0886e1fac8d215ae8",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 62766,
      "upload_time": "2018-01-19T22:15:25",
      "url": "https://files.pythonhosted.org/packages/5e/03/69ccdb6042f2527848e8c48b196da2b78f2f1dfc4d4dbe31d29910e172a8/svtyper-0.5.0-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "4d8e42bf66b4f74b06d7329c2e29c978",
        "sha256": "2c9b8b16747f4cadc2edd517530b366e5b642c1fc025a64d958a377f85171f92"
      },
      "downloads": -1,
      "filename": "svtyper-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4d8e42bf66b4f74b06d7329c2e29c978",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 46045,
      "upload_time": "2018-01-19T22:15:26",
      "url": "https://files.pythonhosted.org/packages/1e/4c/ae913a1b85e01566e735a2f83630d81beea5a2c8dedd0c148890bf91f5c6/svtyper-0.5.0.tar.gz"
    }
  ]
}