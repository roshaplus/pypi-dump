{
  "info": {
    "author": "Russi Chatterjee",
    "author_email": "root@ixaxaar.in",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "# Differentiable Neural Computers and family, for Pytorch\n\nIncludes:\n1. Differentiable Neural Computers (DNC)\n2. Sparse Access Memory (SAM)\n3. Sparse Differentiable Neural Computers (SDNC)\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n\n- [Install](#install)\n  - [From source](#from-source)\n- [Architecure](#architecure)\n- [Usage](#usage)\n  - [DNC](#dnc)\n    - [Example usage](#example-usage)\n    - [Debugging](#debugging)\n  - [SDNC](#sdnc)\n    - [Example usage](#example-usage-1)\n    - [Debugging](#debugging-1)\n  - [SAM](#sam)\n    - [Example usage](#example-usage-2)\n    - [Debugging](#debugging-2)\n- [Tasks](#tasks)\n  - [Copy task (with curriculum and generalization)](#copy-task-with-curriculum-and-generalization)\n  - [Generalizing Addition task](#generalizing-addition-task)\n  - [Generalizing Argmax task](#generalizing-argmax-task)\n- [Code Structure](#code-structure)\n- [General noteworthy stuff](#general-noteworthy-stuff)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n[![Build Status](https://travis-ci.org/ixaxaar/pytorch-dnc.svg?branch=master)](https://travis-ci.org/ixaxaar/pytorch-dnc) [![PyPI version](https://badge.fury.io/py/dnc.svg)](https://badge.fury.io/py/dnc)\n\nThis is an implementation of [Differentiable Neural Computers](http://people.idsia.ch/~rupesh/rnnsymposium2016/slides/graves.pdf), described in the paper [Hybrid computing using a neural network with dynamic external memory, Graves et al.](https://www.nature.com/articles/nature20101)\nand Sparse DNCs (SDNCs) and Sparse Access Memory (SAM) described in [Scaling Memory-Augmented Neural Networks with Sparse Reads and Writes](http://papers.nips.cc/paper/6298-scaling-memory-augmented-neural-networks-with-sparse-reads-and-writes.pdf).\n\n## Install\n\n```bash\npip install dnc\n```\n\n### From source\n\n```\ngit clone https://github.com/ixaxaar/pytorch-dnc\ncd pytorch-dnc\npip install -r ./requirements.txt\npip install -e .\n```\n\nFor using fully GPU based SDNCs or SAMs, install FAISS:\n\n```bash\nconda install faiss-gpu -c pytorch\n```\n\n`pytest` is required to run the test\n\n## Architecure\n\n<img src=\"./docs/dnc.png\" height=\"600\" />\n\n## Usage\n\n### DNC\n\n**Constructor Parameters**:\n\nFollowing are the constructor parameters:\n\nFollowing are the constructor parameters:\n\n| Argument | Default | Description |\n| --- | --- | --- |\n| input_size | `None` | Size of the input vectors |\n| hidden_size | `None` | Size of hidden units |\n| rnn_type | `'lstm'` | Type of recurrent cells used in the controller |\n| num_layers | `1` | Number of layers of recurrent units in the controller |\n| num_hidden_layers | `2` | Number of hidden layers per layer of the controller |\n| bias | `True` | Bias |\n| batch_first | `True` | Whether data is fed batch first |\n| dropout | `0` | Dropout between layers in the controller |\n| bidirectional | `False` | If the controller is bidirectional (Not yet implemented |\n| nr_cells | `5` | Number of memory cells |\n| read_heads | `2` | Number of read heads |\n| cell_size | `10` | Size of each memory cell |\n| nonlinearity | `'tanh'` | If using 'rnn' as `rnn_type`, non-linearity of the RNNs |\n| gpu_id | `-1` | ID of the GPU, -1 for CPU |\n| independent_linears | `False` | Whether to use independent linear units to derive interface vector |\n| share_memory | `True` | Whether to share memory between controller layers |\n\nFollowing are the forward pass parameters:\n\n| Argument | Default | Description |\n| --- | --- | --- |\n| input | - | The input vector `(B*T*X)` or `(T*B*X)` |\n| hidden | `(None,None,None)` | Hidden states `(controller hidden, memory hidden, read vectors)` |\n| reset_experience | `False` | Whether to reset memory |\n| pass_through_memory | `True` | Whether to pass through memory |\n\n\n#### Example usage\n\n```python\nfrom dnc import DNC\n\nrnn = DNC(\n  input_size=64,\n  hidden_size=128,\n  rnn_type='lstm',\n  num_layers=4,\n  nr_cells=100,\n  cell_size=32,\n  read_heads=4,\n  batch_first=True,\n  gpu_id=0\n)\n\n(controller_hidden, memory, read_vectors) = (None, None, None)\n\noutput, (controller_hidden, memory, read_vectors) = \\\n  rnn(torch.randn(10, 4, 64), (controller_hidden, memory, read_vectors, reset_experience=True))\n```\n\n\n#### Debugging\n\nThe `debug` option causes the network to return its memory hidden vectors (numpy `ndarray`s) for the first batch each forward step.\nThese vectors can be analyzed or visualized, using visdom for example.\n\n```python\nfrom dnc import DNC\n\nrnn = DNC(\n  input_size=64,\n  hidden_size=128,\n  rnn_type='lstm',\n  num_layers=4,\n  nr_cells=100,\n  cell_size=32,\n  read_heads=4,\n  batch_first=True,\n  gpu_id=0,\n  debug=True\n)\n\n(controller_hidden, memory, read_vectors) = (None, None, None)\n\noutput, (controller_hidden, memory, read_vectors), debug_memory = \\\n  rnn(torch.randn(10, 4, 64), (controller_hidden, memory, read_vectors, reset_experience=True))\n```\n\nMemory vectors returned by forward pass (`np.ndarray`):\n\n| Key | Y axis (dimensions) | X axis (dimensions) |\n| --- | --- | --- |\n| `debug_memory['memory']` | layer * time | nr_cells * cell_size\n| `debug_memory['link_matrix']` | layer * time | nr_cells * nr_cells\n| `debug_memory['precedence']` | layer * time | nr_cells\n| `debug_memory['read_weights']` | layer * time | read_heads * nr_cells\n| `debug_memory['write_weights']` | layer * time | nr_cells\n| `debug_memory['usage_vector']` | layer * time | nr_cells\n\n\n### SDNC\n\n**Constructor Parameters**:\n\nFollowing are the constructor parameters:\n\n| Argument | Default | Description |\n| --- | --- | --- |\n| input_size | `None` | Size of the input vectors |\n| hidden_size | `None` | Size of hidden units |\n| rnn_type | `'lstm'` | Type of recurrent cells used in the controller |\n| num_layers | `1` | Number of layers of recurrent units in the controller |\n| num_hidden_layers | `2` | Number of hidden layers per layer of the controller |\n| bias | `True` | Bias |\n| batch_first | `True` | Whether data is fed batch first |\n| dropout | `0` | Dropout between layers in the controller |\n| bidirectional | `False` | If the controller is bidirectional (Not yet implemented |\n| nr_cells | `5000` | Number of memory cells |\n| read_heads | `4` | Number of read heads |\n| sparse_reads | `4` | Number of sparse memory reads per read head |\n| temporal_reads | `4` | Number of temporal reads |\n| cell_size | `10` | Size of each memory cell |\n| nonlinearity | `'tanh'` | If using 'rnn' as `rnn_type`, non-linearity of the RNNs |\n| gpu_id | `-1` | ID of the GPU, -1 for CPU |\n| independent_linears | `False` | Whether to use independent linear units to derive interface vector |\n| share_memory | `True` | Whether to share memory between controller layers |\n\nFollowing are the forward pass parameters:\n\n| Argument | Default | Description |\n| --- | --- | --- |\n| input | - | The input vector `(B*T*X)` or `(T*B*X)` |\n| hidden | `(None,None,None)` | Hidden states `(controller hidden, memory hidden, read vectors)` |\n| reset_experience | `False` | Whether to reset memory |\n| pass_through_memory | `True` | Whether to pass through memory |\n\n\n#### Example usage\n\n```python\nfrom dnc import SDNC\n\nrnn = SDNC(\n  input_size=64,\n  hidden_size=128,\n  rnn_type='lstm',\n  num_layers=4,\n  nr_cells=100,\n  cell_size=32,\n  read_heads=4,\n  sparse_reads=4,\n  batch_first=True,\n  gpu_id=0\n)\n\n(controller_hidden, memory, read_vectors) = (None, None, None)\n\noutput, (controller_hidden, memory, read_vectors) = \\\n  rnn(torch.randn(10, 4, 64), (controller_hidden, memory, read_vectors, reset_experience=True))\n```\n\n\n#### Debugging\n\nThe `debug` option causes the network to return its memory hidden vectors (numpy `ndarray`s) for the first batch each forward step.\nThese vectors can be analyzed or visualized, using visdom for example.\n\n```python\nfrom dnc import SDNC\n\nrnn = SDNC(\n  input_size=64,\n  hidden_size=128,\n  rnn_type='lstm',\n  num_layers=4,\n  nr_cells=100,\n  cell_size=32,\n  read_heads=4,\n  batch_first=True,\n  sparse_reads=4,\n  temporal_reads=4,\n  gpu_id=0,\n  debug=True\n)\n\n(controller_hidden, memory, read_vectors) = (None, None, None)\n\noutput, (controller_hidden, memory, read_vectors), debug_memory = \\\n  rnn(torch.randn(10, 4, 64), (controller_hidden, memory, read_vectors, reset_experience=True))\n```\n\nMemory vectors returned by forward pass (`np.ndarray`):\n\n| Key | Y axis (dimensions) | X axis (dimensions) |\n| --- | --- | --- |\n| `debug_memory['memory']` | layer * time | nr_cells * cell_size\n| `debug_memory['visible_memory']` | layer * time | sparse_reads+2*temporal_reads+1 * nr_cells\n| `debug_memory['read_positions']` | layer * time | sparse_reads+2*temporal_reads+1\n| `debug_memory['link_matrix']` | layer * time | sparse_reads+2*temporal_reads+1 * sparse_reads+2*temporal_reads+1\n| `debug_memory['rev_link_matrix']` | layer * time | sparse_reads+2*temporal_reads+1 * sparse_reads+2*temporal_reads+1\n| `debug_memory['precedence']` | layer * time | nr_cells\n| `debug_memory['read_weights']` | layer * time | read_heads * nr_cells\n| `debug_memory['write_weights']` | layer * time | nr_cells\n| `debug_memory['usage']` | layer * time | nr_cells\n\n### SAM\n\n**Constructor Parameters**:\n\nFollowing are the constructor parameters:\n\n| Argument | Default | Description |\n| --- | --- | --- |\n| input_size | `None` | Size of the input vectors |\n| hidden_size | `None` | Size of hidden units |\n| rnn_type | `'lstm'` | Type of recurrent cells used in the controller |\n| num_layers | `1` | Number of layers of recurrent units in the controller |\n| num_hidden_layers | `2` | Number of hidden layers per layer of the controller |\n| bias | `True` | Bias |\n| batch_first | `True` | Whether data is fed batch first |\n| dropout | `0` | Dropout between layers in the controller |\n| bidirectional | `False` | If the controller is bidirectional (Not yet implemented |\n| nr_cells | `5000` | Number of memory cells |\n| read_heads | `4` | Number of read heads |\n| sparse_reads | `4` | Number of sparse memory reads per read head |\n| cell_size | `10` | Size of each memory cell |\n| nonlinearity | `'tanh'` | If using 'rnn' as `rnn_type`, non-linearity of the RNNs |\n| gpu_id | `-1` | ID of the GPU, -1 for CPU |\n| independent_linears | `False` | Whether to use independent linear units to derive interface vector |\n| share_memory | `True` | Whether to share memory between controller layers |\n\nFollowing are the forward pass parameters:\n\n| Argument | Default | Description |\n| --- | --- | --- |\n| input | - | The input vector `(B*T*X)` or `(T*B*X)` |\n| hidden | `(None,None,None)` | Hidden states `(controller hidden, memory hidden, read vectors)` |\n| reset_experience | `False` | Whether to reset memory |\n| pass_through_memory | `True` | Whether to pass through memory |\n\n\n#### Example usage\n\n```python\nfrom dnc import SAM\n\nrnn = SAM(\n  input_size=64,\n  hidden_size=128,\n  rnn_type='lstm',\n  num_layers=4,\n  nr_cells=100,\n  cell_size=32,\n  read_heads=4,\n  sparse_reads=4,\n  batch_first=True,\n  gpu_id=0\n)\n\n(controller_hidden, memory, read_vectors) = (None, None, None)\n\noutput, (controller_hidden, memory, read_vectors) = \\\n  rnn(torch.randn(10, 4, 64), (controller_hidden, memory, read_vectors, reset_experience=True))\n```\n\n\n#### Debugging\n\nThe `debug` option causes the network to return its memory hidden vectors (numpy `ndarray`s) for the first batch each forward step.\nThese vectors can be analyzed or visualized, using visdom for example.\n\n```python\nfrom dnc import SAM\n\nrnn = SAM(\n  input_size=64,\n  hidden_size=128,\n  rnn_type='lstm',\n  num_layers=4,\n  nr_cells=100,\n  cell_size=32,\n  read_heads=4,\n  batch_first=True,\n  sparse_reads=4,\n  gpu_id=0,\n  debug=True\n)\n\n(controller_hidden, memory, read_vectors) = (None, None, None)\n\noutput, (controller_hidden, memory, read_vectors), debug_memory = \\\n  rnn(torch.randn(10, 4, 64), (controller_hidden, memory, read_vectors, reset_experience=True))\n```\n\nMemory vectors returned by forward pass (`np.ndarray`):\n\n| Key | Y axis (dimensions) | X axis (dimensions) |\n| --- | --- | --- |\n| `debug_memory['memory']` | layer * time | nr_cells * cell_size\n| `debug_memory['visible_memory']` | layer * time | sparse_reads+2*temporal_reads+1 * nr_cells\n| `debug_memory['read_positions']` | layer * time | sparse_reads+2*temporal_reads+1\n| `debug_memory['read_weights']` | layer * time | read_heads * nr_cells\n| `debug_memory['write_weights']` | layer * time | nr_cells\n| `debug_memory['usage']` | layer * time | nr_cells\n\n\n## Tasks\n\n### Copy task (with curriculum and generalization)\n\nThe copy task, as descibed in the original paper, is included in the repo.\n\nFrom the project root:\n```bash\npython ./tasks/copy_task.py -cuda 0 -optim rmsprop -batch_size 32 -mem_slot 64 # (like original implementation)\n\npython ./tasks/copy_task.py -cuda 0 -lr 0.001 -rnn_type lstm -nlayer 1 -nhlayer 2 -dropout 0 -mem_slot 32 -batch_size 1000 -optim adam -sequence_max_length 8 # (faster convergence)\n\nFor SDNCs:\npython ./tasks/copy_task.py -cuda 0 -lr 0.001 -rnn_type lstm -memory_type sdnc -nlayer 1 -nhlayer 2 -dropout 0 -mem_slot 100 -mem_size 10  -read_heads 1 -sparse_reads 10 -batch_size 20 -optim adam -sequence_max_length 10\n\nand for curriculum learning for SDNCs:\npython ./tasks/copy_task.py -cuda 0 -lr 0.001 -rnn_type lstm -memory_type sdnc -nlayer 1 -nhlayer 2 -dropout 0 -mem_slot 100 -mem_size 10  -read_heads 1 -sparse_reads 4 -temporal_reads 4 -batch_size 20 -optim adam -sequence_max_length 4 -curriculum_increment 2 -curriculum_freq 10000\n```\n\nFor the full set of options, see:\n```\npython ./tasks/copy_task.py --help\n```\n\nThe copy task can be used to debug memory using [Visdom](https://github.com/facebookresearch/visdom).\n\nAdditional step required:\n\n```bash\npip install visdom\npython -m visdom.server\n```\n\nOpen http://localhost:8097/ on your browser, and execute the copy task:\n\n```bash\npython ./tasks/copy_task.py -cuda 0\n```\n\nThe visdom dashboard shows memory as a heatmap for batch 0 every `-summarize_freq` iteration:\n\n![Visdom dashboard](./docs/dnc-mem-debug.png)\n\n### Generalizing Addition task\n\nThe adding task is as described in [this github pull request](https://github.com/Mostafa-Samir/DNC-tensorflow/pull/4#issue-199369192).\nThis task\n- creates one-hot vectors of size `input_size`, each representing a number\n- feeds a sentence of them to a network\n- the output of which is added to get the sum of the decoded outputs\n\nThe task first trains the network for sentences of size ~100, and then tests if the network genetalizes for lengths ~1000.\n\n```bash\npython ./tasks/adding_task.py -cuda 0 -lr 0.0001 -rnn_type lstm -memory_type sam -nlayer 1 -nhlayer 1 -nhid 100 -dropout 0 -mem_slot 1000 -mem_size 32 -read_heads 1 -sparse_reads 4 -batch_size 20 -optim rmsprop -input_size 3 -sequence_max_length 100\n```\n\n### Generalizing Argmax task\n\nThe second adding task is similar to the first one, except that the network's output at the last time step is expected to be the argmax of the input.\n\n```bash\npython ./tasks/argmax_task.py -cuda 0 -lr 0.0001 -rnn_type lstm -memory_type dnc -nlayer 1 -nhlayer 1 -nhid 100 -dropout 0 -mem_slot 100 -mem_size 10 -read_heads 2 -batch_size 1 -optim rmsprop -sequence_max_length 15 -input_size 10 -iterations 10000\n```\n\n\n\n## Code Structure\n\n1. DNCs:\n  - [dnc/dnc.py](dnc/dnc.py) - Controller code.\n  - [dnc/memory.py](dnc/memory.py) - Memory module.\n2. SDNCs:\n  - [dnc/sdnc.py](dnc/sdnc.py) - Controller code, inherits [dnc.py](dnc/dnc.py).\n  - [dnc/sparse_temporal_memory.py](dnc/sparse_temporal_memory.py) - Memory module.\n  - [dnc/flann_index.py](dnc/flann_index.py) - Memory index using kNN.\n3. SAMs:\n  - [dnc/sam.py](dnc/sam.py) - Controller code, inherits [dnc.py](dnc/dnc.py).\n  - [dnc/sparse_memory.py](dnc/sparse_memory.py) - Memory module.\n  - [dnc/flann_index.py](dnc/flann_index.py) - Memory index using kNN.\n4. Tests:\n  - All tests are in [./tests](./tests) folder.\n\n## General noteworthy stuff\n\n1. SDNCs use the [FLANN approximate nearest neigbhour library](https://www.cs.ubc.ca/research/flann/), with its python binding [pyflann3](https://github.com/primetang/pyflann) and [FAISS](https://github.com/facebookresearch/faiss).\n\nFLANN can be installed either from pip (automatically as a dependency), or from source (e.g. for multithreading via OpenMP):\n\n```bash\n# install openmp first: e.g. `sudo pacman -S openmp` for Arch.\ngit clone git://github.com/mariusmuja/flann.git\ncd flann\nmkdir build\ncd build\ncmake ..\nmake -j 4\nsudo make install\n```\n\nFAISS can be installed using:\n\n```bash\nconda install faiss-gpu -c pytorch\n```\n\nFAISS is much faster, has a GPU implementation and is interoperable with pytorch tensors.\nWe try to use FAISS by default, in absence of which we fall back to FLANN.\n\n2. `nan`s in the gradients are common, try with different batch sizes\n\nRepos referred to for creation of this repo:\n\n- [deepmind/dnc](https://github.com/deepmind/dnc)\n- [ypxie/pytorch-NeuCom](https://github.com/ypxie/pytorch-NeuCom)\n- [jingweiz/pytorch-dnc](https://github.com/jingweiz/pytorch-dnc)\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pypa/dnc",
    "keywords": "differentiable neural computer dnc memory network",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dnc",
    "platform": "",
    "project_url": "https://pypi.org/project/dnc/",
    "release_url": "https://pypi.org/project/dnc/0.0.7/",
    "requires_dist": [
      "coverage; extra == 'test'",
      "check-manifest; extra == 'dev'",
      "pyflann3",
      "numpy",
      "torch"
    ],
    "requires_python": ">=3",
    "summary": "Differentiable Neural Computer, for Pytorch",
    "version": "0.0.7"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d295e69d69b3a856b256eb7291e06e76",
          "sha256": "0844e57c9940cc3abdf1f2c3807862a938e364206e10f8802834861ffe8f930a"
        },
        "downloads": -1,
        "filename": "dnc-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d295e69d69b3a856b256eb7291e06e76",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 11031,
        "upload_time": "2017-10-26T15:07:10",
        "url": "https://files.pythonhosted.org/packages/a8/b2/020ff756c488b20dbab7f805ec9d12366c8dca4dcc6829551da19d1760ce/dnc-0.0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b1e08d1905ffea52364ffd2442360fb5",
          "sha256": "5c08c8601a8c6d2fec8639c723b269124ddbaba63f53546cff0bf2586526ae6d"
        },
        "downloads": -1,
        "filename": "dnc-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1e08d1905ffea52364ffd2442360fb5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 11027,
        "upload_time": "2017-10-26T15:07:14",
        "url": "https://files.pythonhosted.org/packages/b5/42/1bc285684407a5820aa7c11bb2b6bd0136222723a8288622d31a803129a6/dnc-0.0.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4a8e599db6efec5f43b7e49fdf5297d2",
          "sha256": "101a78b55c624c14108bb1dd614003fa04b6c959c86c6c8b25b94488c4010173"
        },
        "downloads": -1,
        "filename": "dnc-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4a8e599db6efec5f43b7e49fdf5297d2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9278,
        "upload_time": "2017-10-26T15:07:18",
        "url": "https://files.pythonhosted.org/packages/4c/8e/0958434a5d1448b2628d6fe1a7ad8d48e6f8bbc784648956c1d39afe545d/dnc-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a5a7a58b63dd69f5b8a3032fa5657674",
          "sha256": "da0b1e9bd9af568b885eadda14cdcc0efa3d3ab2ab02ac496d5d0adb78f2673b"
        },
        "downloads": -1,
        "filename": "dnc-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a5a7a58b63dd69f5b8a3032fa5657674",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 12983,
        "upload_time": "2017-10-26T15:57:56",
        "url": "https://files.pythonhosted.org/packages/fe/1f/d8290c601681c22ed14ba111fa13fe342379ac28e5cb56d3f2b6c4608845/dnc-0.0.2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1d76122772557f6bbd73bbde650f60d9",
          "sha256": "4870783579929f94e7d0f63115ff167df44e32cb1a8b6aa90cdd871e0a5849dd"
        },
        "downloads": -1,
        "filename": "dnc-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1d76122772557f6bbd73bbde650f60d9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10962,
        "upload_time": "2017-10-26T15:58:01",
        "url": "https://files.pythonhosted.org/packages/ef/9e/0e0899ec2f0ba4593a528f46ddc2ebcdc9c7b599390a7ed4134b5e4adaef/dnc-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c92bf52f7260dd2282bad18d5da3d416",
          "sha256": "e3816574b12e55583286ad0d149033268c4a6d84620a899240f8879c3ebe5702"
        },
        "downloads": -1,
        "filename": "dnc-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c92bf52f7260dd2282bad18d5da3d416",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 13075,
        "upload_time": "2017-10-27T11:32:16",
        "url": "https://files.pythonhosted.org/packages/db/1c/93563ca20bb7dbf5bd11cc1b34bece5c067e705e4aaef1d828cd89c4dc6f/dnc-0.0.3-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3fe187205773a0e3e7e33c30ad6343eb",
          "sha256": "0bb87716cde2b2748c0c1b1a4e7fc02f90180d0425d4b395f69d554779c4891c"
        },
        "downloads": -1,
        "filename": "dnc-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3fe187205773a0e3e7e33c30ad6343eb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11094,
        "upload_time": "2017-10-27T11:32:18",
        "url": "https://files.pythonhosted.org/packages/1e/70/3b5d54395c54e347d473b0e11f8565a118e8aee38e89dd02807e30dbd69b/dnc-0.0.3.tar.gz"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "04143faac31ebf12a2e997cc3758ed96",
          "sha256": "da1c6b9747ab14783874d27adb1adb78bb3353ec679965d3e2e6af65deafa039"
        },
        "downloads": -1,
        "filename": "dnc-0.0.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "04143faac31ebf12a2e997cc3758ed96",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 13857,
        "upload_time": "2017-10-27T18:43:40",
        "url": "https://files.pythonhosted.org/packages/da/7f/17afa05f233c25b9b7eb9b44031faf52d8f22a59e403185b9fa126f6fb93/dnc-0.0.4-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3836b8b013e2287600b1c3f92a0c6f6d",
          "sha256": "39e3835e983eb74cec90c42a1c9abd107f6040e24d56531c6934b2586c11be81"
        },
        "downloads": -1,
        "filename": "dnc-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3836b8b013e2287600b1c3f92a0c6f6d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10225,
        "upload_time": "2017-10-27T18:43:44",
        "url": "https://files.pythonhosted.org/packages/2c/c2/bcd35979e8d28c70f2f52380ab0ef45557873e2a5ca46c4d8efacb92dd4f/dnc-0.0.4.tar.gz"
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "61f679491aadf2c603b5ddd7e08e4104",
          "sha256": "06b5f5f0e4d9ecb23d1ae366138b47004ed9d1432c79af188b3c0526de4efc26"
        },
        "downloads": -1,
        "filename": "dnc-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "61f679491aadf2c603b5ddd7e08e4104",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 14317,
        "upload_time": "2017-11-01T07:24:27",
        "url": "https://files.pythonhosted.org/packages/0d/81/a35b37fc41668ad859a8b64a48d9682ba503df0520bd31b019e97dbf275b/dnc-0.0.5-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b51220e789075d3a8afa83f4493875e0",
          "sha256": "c07ad510d982ac6e90a22751f430d8c23ccbcdc9a53e4469510d305f7db203f4"
        },
        "downloads": -1,
        "filename": "dnc-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "b51220e789075d3a8afa83f4493875e0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11977,
        "upload_time": "2017-11-01T07:24:29",
        "url": "https://files.pythonhosted.org/packages/fb/4a/8e66326f24d61206c74608aa398780db4512582026edfcefa88d566e4be7/dnc-0.0.5.tar.gz"
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "94bb26762be4023fc91aeb3c50c0f4c5",
          "sha256": "90638ede2a8d37594eb3f03e68e18d59255c887c84f1650c6fe1a098a347efbd"
        },
        "downloads": -1,
        "filename": "dnc-0.0.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "94bb26762be4023fc91aeb3c50c0f4c5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 15566,
        "upload_time": "2017-11-12T19:18:14",
        "url": "https://files.pythonhosted.org/packages/b8/be/1cfbb450fbbc13c4f54d2875292eee6befef7013b6784b3c57ce32e3f749/dnc-0.0.6-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c17e67a3b78674343e92f3fc40d45677",
          "sha256": "e450c94df60b63dfd9811219234b161d7d083d8e3306f55a55f286451c1da4f5"
        },
        "downloads": -1,
        "filename": "dnc-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "c17e67a3b78674343e92f3fc40d45677",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12977,
        "upload_time": "2017-11-12T19:18:17",
        "url": "https://files.pythonhosted.org/packages/8f/38/67c6633350d65a05db5d7dbe407ae3d351da4b0eb367683eb503cf56f8b2/dnc-0.0.6.tar.gz"
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2a2e663e072e95ce5d7c07c5017d20f7",
          "sha256": "c7850bebb10d94ecd25f6cd158aeb3ec504d901e0054f79c93383632c2b69792"
        },
        "downloads": -1,
        "filename": "dnc-0.0.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2a2e663e072e95ce5d7c07c5017d20f7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 28069,
        "upload_time": "2017-12-20T09:01:16",
        "url": "https://files.pythonhosted.org/packages/80/96/98e776fa54ce0657fb65a87bf0dfbd7a540f1922a6370f8a49ec797ac870/dnc-0.0.7-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "84a6433f4b705383e7900204534ad671",
          "sha256": "5d824c064763d8da045af54284187907b0b07ee5a64444ded7f8c400274bb54f"
        },
        "downloads": -1,
        "filename": "dnc-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "84a6433f4b705383e7900204534ad671",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23641,
        "upload_time": "2017-12-20T09:01:19",
        "url": "https://files.pythonhosted.org/packages/ee/62/1888a9808c86b63515edb1377da96c5c049592d35ba42257993986e29b4e/dnc-0.0.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2a2e663e072e95ce5d7c07c5017d20f7",
        "sha256": "c7850bebb10d94ecd25f6cd158aeb3ec504d901e0054f79c93383632c2b69792"
      },
      "downloads": -1,
      "filename": "dnc-0.0.7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2a2e663e072e95ce5d7c07c5017d20f7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 28069,
      "upload_time": "2017-12-20T09:01:16",
      "url": "https://files.pythonhosted.org/packages/80/96/98e776fa54ce0657fb65a87bf0dfbd7a540f1922a6370f8a49ec797ac870/dnc-0.0.7-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "84a6433f4b705383e7900204534ad671",
        "sha256": "5d824c064763d8da045af54284187907b0b07ee5a64444ded7f8c400274bb54f"
      },
      "downloads": -1,
      "filename": "dnc-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "84a6433f4b705383e7900204534ad671",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 23641,
      "upload_time": "2017-12-20T09:01:19",
      "url": "https://files.pythonhosted.org/packages/ee/62/1888a9808c86b63515edb1377da96c5c049592d35ba42257993986e29b4e/dnc-0.0.7.tar.gz"
    }
  ]
}