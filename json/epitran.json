{
  "info": {
    "author": "David R. Mortensen",
    "author_email": "dmortens@cs.cmu.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "Epitran\n=======\n\nA library and tool for transliterating orthographic text as IPA\n(International Phonetic Alphabet).\n\nUsage\n-----\n\nThe principle script for transliterating orthographic text as IPA is\n``epitranscriber.py``. It takes one argument, the ISO 639-3 code for the\nlanguage of the orthographic text, takes orthographic text at standard\nin and writes Unicode IPA to standard out. $ echo \"D\u00fc\u011f\u00fcn olur bayram\ngelir\" \\| epitranscribe.py \"tur-Latn\" dy\u0270yn olu\u027e baj\u027eam \u025feli\u027e $\nepitranscribe.py \"tur-Latn\" < orthography.txt > phonetic.txt\nAdditionally, the small Python modules ``epitran`` and\n``epitran.vector`` can be used to easily write more sophisticated Python\nprograms for deploying the **Epitran** mapping tables. This is\ndocumented below.\n\nUsing the ``epitran`` Module\n----------------------------\n\nThe most general functionality in the ``epitran`` module is encapsulated\nin the very simple ``Epitran`` class:\n\nEpitran(code, preproc=True, postproc=True, ligatures=False,\ncedict\\_file=None).\n\nIts constructor takes one argument, ``code``, the ISO 639-3 code of the\nlanguage to be transliterated plus a hyphen plus a four letter code for\nthe script (e.g. 'Latn' for Latin script, 'Cyrl' for Cyrillic script,\nand 'Arab' for a Perso-Arabic script). It also takes optional keyword\narguments: \\* ``preproc`` and ``postproc`` enable pre- and\npost-processors. These are enabled by default. \\* ``ligatures`` enables\nnon-standard IPA ligatures like \"\u02a4\" and \"\u02a8\". \\* ``cedict_file`` gives\nthe path to the `CC-CEDict <https://cc-cedict.org/wiki/>`__ dictionary\nfile (relevant only when working with Mandarin Chinese and which,\nbecause of licensing restrictions cannot be distributed with Epitran).\n\n::\n\n    >>> import epitran\n    >>> epi = epitran.Epitran('uig-Arab')  # Uyghur in Perso-Arabic script\n\n::\n\n    It is now possible to use the Epitran class for English and Mandarin Chinese (Simplified and Traditional) G2P as well as the other langugages that use Epitran's \"classic\" model. For Chinese, it is necessary to point the constructor to a copy of the [CC-CEDict](https://cc-cedict.org/wiki/) dictionary:\n\n            import epitran epi = epitran.Epitran('cmn-Hans',\n            cedict\\_file='cedict\\_1\\_0\\_ts\\_utf-8\\_mdbg.txt') The\n            ``Epitran`` class has only one \"public\" method right now,\n            ``transliterate``:\n\nEpitran.\\ **transliterate**\\ (text, normpunc=False, ligatures=False).\nConvert ``text`` (in Unicode-encoded orthography of the language\nspecified in the constructor) to IPA, which is returned. ``normpunc``\nenables punctuation normalization and ``ligatures`` enables non-standard\nIPA ligatures like \"\u02a4\" and \"\u02a8\". Usage is illustrated below:\n\n::\n\n    >>> epi.transliterate(u'D\u00fc\u011f\u00fcn')\n    u'dy\\u0270yn'\n    >>> print(epi.transliterate(u'D\u00fc\u011f\u00fcn'))\n    dy\u0270yn\n\nEpitran.\\ **word\\_to\\_tuples**\\ (word, normpunc=False): Takes a ``word``\n(a Unicode string) in a supported orthography as input and returns a\nlist of tuples with each tuple corresponding to an IPA segment of the\nword. The tuples have the following structure:\n\n::\n\n    (\n        character_category :: String,\n        is_upper :: Integer,\n        orthographic_form :: Unicode String,\n        phonetic_form :: Unicode String,\n        segments :: List<Tuples>\n    )\n\nNote that **word\\_to\\_tuples** is not implemented for all\nlanguage-script pairs.\n\nThe codes for ``character_category`` are from the initial characters of\nthe two character sequences listed in the \"General Category\" codes found\nin `Chapter 4 of the Unicode\nStandard <http://www.unicode.org/versions/Unicode8.0.0/ch04.pdf#G134153>`__.\nFor example, \"L\" corresponds to letters and \"P\" corresponds to\nproduction marks. The above data structure is likely to change in\nsubsequent versions of the library. The structure of ``segments`` is as\nfollows:\n\n::\n\n    (\n        segment :: Unicode String,\n        vector :: List<Integer>\n    )\n\nHere is an example of an interaction with ``word_to_tuples``:\n\n::\n\n    >>> import epitran\n    >>> epi = epitran.Epitran('tur-Latn')\n    >>> epi.word_to_tuples(u'D\u00fc\u011f\u00fcn')\n    [(u'L', 1, u'D', u'd', [(u'd', [-1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 0, -1])]), (u'L', 0, u'u\\u0308', u'y', [(u'y', [1, 1, -1, 1, -1, -1, -1, 0, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1])]), (u'L', 0, u'g\\u0306', u'\\u0270', [(u'\\u0270', [-1, 1, -1, 1, 0, -1, -1, 0, 1, -1, -1, 0, -1, 0, -1, 1, -1, 0, -1, 1, -1])]), (u'L', 0, u'u\\u0308', u'y', [(u'y', [1, 1, -1, 1, -1, -1, -1, 0, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, 1, 1, -1])]), (u'L', 0, u'n', u'n', [(u'n', [-1, 1, 1, -1, -1, -1, 1, -1, 1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 0, -1])])]\n\nPreprocessors and Their Pitfalls\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIn order to build a maintainable orthography to phoneme mapper, it is\nsometimes necessary to employ preprocessors that make contextual\nsubstitutions of symbols before text is passed to a orthography-to-IPA\nmapping system that preserves relationships between input and output\ncharacters. This is particularly true of languages with a poor\nsound-symbols correspondence (like French and English). Languages like\nFrench are particularly good targets for this approach because the\npronunication of a given string of letters is highly predictable even\nthough the individual symbols often do not map neatly into sounds.\n(Sound-symbol correspondence is so poor in English that effective\nEnglish G2P systems rely heavily on pronouncing dictionaries.)\n\nPreprocessing the inputs words to allow for straightforward\ngrapheme-to-phoneme mappings (as is done in the current version of\n``epitran`` for some languages) is advantaeous because the restricted\nregular expression language used to write the preprocessing rules is\nmore powerful than the language for the mapping rules and allows the\nequivalent of many mapping rules to be written with a single rule.\nWithout them, providing ``epitran`` support for languages like French\nand German would not be practical. However, they do present some\nproblems. Specifically, when using a language with a preprocessor, one\n**must** be aware that the input word will not always be identical to\nthe concatenation of the orthographic strings (``orthographic_form``)\noutput by ``Epitran.word_to_tuples``. Instead, the output of\n``word_to_tuple`` will reflect the output of the preprocessor, which may\ndelete, insert, and change letters in order to allow direct\northography-to-phoneme mapping at the next step. The same is true of\nother methods that rely on ``Epitran.word_to_tuple`` such as\n``VectorsWithIPASpace.word_to_segs`` from the ``epitran.vector`` module\n(deprecated).\n\nUsing the ``epitran.vector`` Module (deprecated)\n------------------------------------------------\n\nThe ``epitran.vector`` module is also very simple. It contains one\nclass, ``VectorsWithIPASpace``, including one method of interest,\n``word_to_segs``:\n\nThe constructor for ``VectorsWithIPASpace`` takes two arguments: -\n``code``: the language-script code for the language to be processed. -\n``spaces``: the codes for the punctuation/symbol/IPA space in which the\ncharacters/segments from the data are expected to reside. The available\nspaces are listed `below <#language-support>`__.\n\nIts principle method is ``word_to_segs``:\n\nVectorWithIPASpace.\\ **word\\_to\\_segs**\\ (word, normpunc=False) Word is\na Unicode string. If the keyword argument *normpunc* is set to True,\npunctuation disovered in *word* is normalized to ASCII equivalents.\n\nA typical interaction with the ``VectorsWithIPASpace`` object via the\n``word_to_segs`` method is illustrated here:\n\n::\n\n    >>> import epitran.vector\n    >>> vwis = epitran.vector.VectorsWithIPASpace('uzb-Latn', 'uzb-with_attached_suffixes-space')\n    >>> vwis.word_to_segs(u'dar\u00eb')\n    [(u'L', 0, u'd', u'd\\u032a', u'40', [-1, -1, 1, -1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 0, -1]), (u'L', 0, u'a', u'a', u'37', [1, 1, -1, 1, -1, -1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1]), (u'L', 0, u'r', u'r', u'54', [-1, 1, 1, 1, 0, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 0, 0, 0, -1, 0, -1]), (u'L', 0, u'e\\u0308', u'ja', u'46', [-1, 1, -1, 1, -1, -1, -1, 0, 1, -1, -1, -1, -1, 0, -1, 1, -1, -1, -1, 0, -1]), (u'L', 0, u'e\\u0308', u'ja', u'37', [1, 1, -1, 1, -1, -1, -1, 0, 1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, 1, -1])]\n\n(It is important to note that, though the word that serves as\ninput--\\ *dar\u00eb*--has four letters, the output contains four tuples\nbecause the last letter in *dar\u00eb* actually corresponds to two IPA\nsegments, /j/ and /a/.) The returned data structure is a list of tuples,\neach with the following structure:\n\n::\n\n    (\n        character_category :: String,\n        is_upper :: Integer,\n        orthographic_form :: Unicode String,\n        phonetic_form :: Unicode String,\n        in_ipa_punc_space :: Integer,\n        phonological_feature_vector :: List<Integer>\n    )\n\nA few notes are in order regarding this data structure: -\n``character_category`` is defined as part of the Unicode standard\n(`Chapter\n4 <http://www.unicode.org/versions/Unicode8.0.0/ch04.pdf#G134153>`__).\nIt consists of a single, uppercase letter from the set {'L', 'M', 'N',\n'P', 'S', 'Z', 'C'}.. The most frequent of these are 'L' (letter), 'N'\n(number), 'P' (punctuation), and 'Z' (separator [including separating\nwhite space]). - ``is_upper`` consists only of integers from the set {0,\n1}, with 0 indicating lowercase and 1 indicating uppercase. - The\ninteger in ``in_ipa_punc_space`` is an index to a list of known\ncharacters/segments such that, barring degenerate cases, each character\nor segment is assignmed a unique and globally consistant number. In\ncases where a character is encountered which is not in the known space,\nthis field has the value -1. - The length of the list\n``phonological_feature_vector`` should be constant for any instantiation\nof the class (it is based on the number of features defined in panphon)\nbut is--in principles--variable. The integers in this list are drawn\nfrom the set {-1, 0, 1}, with -1 corresponding to '-', 0 corresponding\nto '0', and 1 corresponding to '+'. For characters with no IPA\nequivalent, all values in the list are 0.\n\nLanguage Support\n----------------\n\nTransliteration Language/Script Pairs\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n+---------------+--------------------------+\n| Code          | Language (Script)        |\n+===============+==========================+\n| aar-Latn      | Afar                     |\n+---------------+--------------------------+\n| amh-Ethi      | Amharic                  |\n+---------------+--------------------------+\n| aze-Cyrl      | Azerbaijani (Cyrillic)   |\n+---------------+--------------------------+\n| aze-Latn      | Azerbaijani (Latin)      |\n+---------------+--------------------------+\n| ben-Beng      | Bengali                  |\n+---------------+--------------------------+\n| ceb-Latn      | Cebuano                  |\n+---------------+--------------------------+\n| cmn-Hans      | Mandarin (Simplified)    |\n+---------------+--------------------------+\n| cmn-Hant      | Mandarin (Traditional)   |\n+---------------+--------------------------+\n| ckb-Arab      | Sorani                   |\n+---------------+--------------------------+\n| deu-Latn      | German                   |\n+---------------+--------------------------+\n| deu-Latn-np   | German\\*                 |\n+---------------+--------------------------+\n| eng-Latn      | English\\*\\*              |\n+---------------+--------------------------+\n| fas-Arab      | Farsi (Perso-Arabic)     |\n+---------------+--------------------------+\n| fra-Latn      | French                   |\n+---------------+--------------------------+\n| fra-Latn-np   | French\\*                 |\n+---------------+--------------------------+\n| hau-Latn      | Hausa                    |\n+---------------+--------------------------+\n| hin-Deva      | Hindi                    |\n+---------------+--------------------------+\n| hun-Latn      | Hungarian                |\n+---------------+--------------------------+\n| ilo-Latn      | Ilocano                  |\n+---------------+--------------------------+\n| ind-Latn      | Indonesian               |\n+---------------+--------------------------+\n| ita-Latn      | Italian                  |\n+---------------+--------------------------+\n| jav-Latn      | Javanese                 |\n+---------------+--------------------------+\n| kaz-Cyrl      | Kazakh (Cyrillic)        |\n+---------------+--------------------------+\n| kaz-Latn      | Kazakh (Latin)           |\n+---------------+--------------------------+\n| kin-Latn      | Kinyarwanda              |\n+---------------+--------------------------+\n| kir-Arab      | Kyrgyz (Perso-Arabic)    |\n+---------------+--------------------------+\n| kir-Cyrl      | Kyrgyz (Cyrillic)        |\n+---------------+--------------------------+\n| kir-Latn      | Kyrgyz (Latin)           |\n+---------------+--------------------------+\n| krm-Latn      | Kurmanji                 |\n+---------------+--------------------------+\n| mar-Deva      | Marathi                  |\n+---------------+--------------------------+\n| nld-Latn      | Dutch                    |\n+---------------+--------------------------+\n| nya-Latn      | Chichewa                 |\n+---------------+--------------------------+\n| orm-Latn      | Oromo                    |\n+---------------+--------------------------+\n| pan-Guru      | Punjabi (Eastern)        |\n+---------------+--------------------------+\n| rus-Cyrl      | Russian                  |\n+---------------+--------------------------+\n| sna-Latn      | Shona                    |\n+---------------+--------------------------+\n| som-Latn      | Somali                   |\n+---------------+--------------------------+\n| spa-Latn      | Spanish                  |\n+---------------+--------------------------+\n| swa-Latn      | Swahili                  |\n+---------------+--------------------------+\n| swe-Latn      | Swedish                  |\n+---------------+--------------------------+\n| tam-Taml      | Tamil                    |\n+---------------+--------------------------+\n| tel-Telu      | Telugu                   |\n+---------------+--------------------------+\n| tgk-Cyrl      | Tajik                    |\n+---------------+--------------------------+\n| tgl-Latn      | Tagalog                  |\n+---------------+--------------------------+\n| tha-Thai      | Thai                     |\n+---------------+--------------------------+\n| tir-Ethi      | Tigrinya                 |\n+---------------+--------------------------+\n| tuk-Cyrl      | Turkmen (Cyrillic)       |\n+---------------+--------------------------+\n| tuk-Latn      | Turkmen (Latin)          |\n+---------------+--------------------------+\n| tur-Latn      | Turkish (Latin)          |\n+---------------+--------------------------+\n| uig-Arab      | Uyghur (Perso-Arabic)    |\n+---------------+--------------------------+\n| uzb-Cyrl      | Uzbek (Cyrillic)         |\n+---------------+--------------------------+\n| uzb-Latn      | Uzbek (Latin)            |\n+---------------+--------------------------+\n| vie-Latn      | Vietnamese               |\n+---------------+--------------------------+\n| xho-Latn      | Xhosa                    |\n+---------------+--------------------------+\n| yor-Latn      | Yoruba                   |\n+---------------+--------------------------+\n| zul-Latn      | Zulu                     |\n+---------------+--------------------------+\n\n\\*These language preprocessors and maps naively assume a phonemic\northography. \\*\\*English G2P requires the installation of the CMU Flite\nspeech synthesis system.\n\nLanguage \"Spaces\"\n~~~~~~~~~~~~~~~~~\n\n+------------------+------------+----------------------------------------+\n| Code             | Language   | Note                                   |\n+==================+============+========================================+\n| deu-Latn         | German     |                                        |\n+------------------+------------+----------------------------------------+\n| nld-Latn         | Dutch      |                                        |\n+------------------+------------+----------------------------------------+\n| spa-Latn         | Spanish    |                                        |\n+------------------+------------+----------------------------------------+\n| tur-Latn-suf     | Turkish    | Based on data with suffixes attached   |\n+------------------+------------+----------------------------------------+\n| tur-Latn-nosuf   | Turkish    | Based on data with suffixes removed    |\n+------------------+------------+----------------------------------------+\n| uzb-Latn-suf     | Uzbek      | Based on data with suffixes attached   |\n+------------------+------------+----------------------------------------+\n\nNote that major languages, including **French**, are missing from this\ntable to to a lack of appropriate text data.\n\nInstallation of Flite (for English G2P)\n---------------------------------------\n\nFor use with most languages, Epitran requires no special installation\nsteps. It can be installed as an ordinarary python package, either with\n``pip`` or by running ``python setup.py install`` in the root of the\nsource directory. However, English G2P in Epitran relies on CMU Flite, a\nspeech synthesis package by Alan Black and other speech researchers at\nCarnegie Mellon University. For the current version of Epitran, you\nshould follow the installation instructions for ``lex_lookup``, which is\nused as the default G2P interface for Epitran.\n\n``t2p``\n~~~~~~~\n\nThe ``epitran.flite`` module shells out to the ``flite`` speech\nsynthesis system to do English G2P.\n`Flite <http://www.speech.cs.cmu.edu/flite/>`__ must be installed in\norder for this module to function. The ``t2p`` binary from ``flite`` is\nnot installed by default and must be manually copied into the path. An\nillustration of how this can be done on a Unix-like system is given\nbelow. Note that GNU ``gmake`` is required and that, if you have another\n``make`` installed, you may have to call ``gmake`` explicitly:\n\n::\n\n    $ tar xjf flite-2.0.0-release.tar.bz2\n    $ cd flite-2.0.0-release/\n    $ ./configure && make\n    $ sudo make install\n    $ sudo cp bin/t2p /usr/local/bin\n\nYou should adapt these instructions to local conditions. Installation on\nWindows is easiest when using Cygwin. You will have to use your\ndiscretion in deciding where to put ``t2p.exe`` on Windows, since this\nmay depend on your python setup. Other platforms are likely workable but\nhave not been tested.\n\n``lex_lookup``\n~~~~~~~~~~~~~~\n\n``t2p`` does not behave as expected on letter sequences that are highly\ninfrequent in English. In such cases, ``t2p`` gives the pronunciation of\nthe English letters of the name, rather than an attempt at the\npronunciation of the name. There is a different binary included in the\nmost recent (pre-release) versions of Flite that behaves better in this\nregard, but takes some extra effort to install. To install, you need to\nobtain at least version\n`2.0.5 <http://tts.speech.cs.cmu.edu/awb/flite-2.0.5-current.tar.bz2>`__\nof Flite. Untar and compile the source, following the steps below,\nadjusting where appropriate for your system:\n\n::\n\n    $ tar xjf flite-2.0.5-current.tar.bz2\n    $ cd flite-2.0.5-current\n    $ ./configure && make\n    $ sudo make install\n    $ cd testsuite\n    $ make lex_lookup\n    $ sudo cp lex_lookup /usr/local/bin\n\nWhen installing on MacOS and other systems that use a BSD version of\n``cp``, some modification to a Makefile must be made in order to install\nflite-2.0.5 (between steps 3 and 4). Edit ``main/Makefile`` and change\nboth instances of ``cp -pd`` to ``cp -pR``. Then resume the steps above\nat step 4.\n\nUsage\n~~~~~\n\nTo use ``lex_lookup``, simply instantiate Epitran as usual, but with the\n``code`` set to 'eng-Latn':\n\n::\n\n    >>> import epitran\n    >>> epi = epitran.Epitran('eng-Latn')\n    >>> print epi.transliterate(u'Berkeley')\n    b\u0279\u0329kli\n\nExtending Epitran with map files, preprocessors and postprocessors\n------------------------------------------------------------------\n\nLanguage support in Epitran is provided through map files, which define\nmappings between orthographic and phonetic units, preprocessors that run\nbefore the map is applied, and postprocessors that run after the map is\napplied. These are all defined in UTF8-encoded, comma-delimited value\n(CSV) files. The files are each named -.csv where is the (three letter,\nall lowercase) ISO 639-3 code for the language and is the (four letter,\ncapitalized) ISO 15924 code for the script. These files reside in the\n``data`` directory of the Epitran installation under the ``map``,\n``pre``, and ``post`` subdirectories, respectively.\n\nMap files (mapping tables)\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe map files are simple, two-column files where the first column\ncontains the orthgraphic characters/sequences and the second column\ncontains the phonetic characters/sequences. For many languages (most\nlanguages with unambiguous, phonemically adequate orthographies) just\nthis easy-to-produce mapping file is adequate to produce a serviceable\nG2P system.\n\nThe first row is a header and is discarded. For consistency, it should\ncontain the fields \"Orth\" and \"Phon\". The following rows by consist of\nfields of any length, separated by a comma. The same phonetic form (the\nsecond field) may occur any number of times but an orthographic form may\nonly occur once. Where one orthograrphic form is a prefix of another\nform, the longer form has priority in mapping. In other words, matching\nbetween orthographic units and orthographic strings is greedy. Mapping\nworks by finding the longest prefix of the orthographic form and adding\nthe corresponding phonetic string to the end of the phonetic form, then\nremoving the prefix from the orthographic form and continuing, in the\nsame manner, until the orthographic form is consumed. If no non-empty\nprefix of the orthographic form is present in the mapping table, the\nfirst character in the orthographic form is removed and appended to the\nphonetic form. The normal sequence then resumes. This means that\nnon-phonetic characters may end up in the \"phonetic\" form, which we\njudge to be better than loosing information through an inadequate\nmapping table.\n\nPreprocesssors and postprocessors\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor language-script pairs with more complicated orthographies, it is\nsometimes necessary to manipulate the orthographic form prior to mapping\nor to manipulate the phonetic form after mapping. This is done, in\nEpitran, with grammars of context-sensitive string rewrite rules. In\ntruth, these rules would be more than adequate to solve the mapping\nproblem as well but in practical terms, it is usually easier to let\neasy-to-understand and easy-to-maintain mapping files carry most of the\nweight of conversion and reserve the more powerful context sensitive\ngrammar formalism for pre- and post-processing.\n\nTo make it easy to edit the files in a spreadsheet (like LibreOffice\nCalc), the files are formatted as CSV. Of course, they can be edited in\ntext editor as well. The first row is a header, which should have the\nfields \"a\", \"b\", \"X\", and \"Y\", corresponding to the parts of \"a \u2192 b / X\n\\_ Y\", which can be read as \"a is rewritten as b in the context between\nX and Y\". It is equivalent to XaY \u2192 XbY. Each subsequent row is a rule\nin this format. The symbol \"#\" matches a word-boundary (at the beginning\nand end of a word-length token). For example, a rule that changes \"e\" to\n\"\u0259\" at the end of a word, for use in a postprocessor, would have the\nfollowing form:\n\n::\n\n    e,\u0259,,#\n\nWhich corresponds to:\n\n::\n\n    e \u2192 \u0259 / _ #\n\nThe rules apply in order, so earlier rules may \"feed\" and \"bleed\" later\nrules. Therefore, their sequence is *very important* and can be\nleveraged in order to achieve valuable results.\n\nAll of the fields are strings (of zero or more characters). If \"a\" is\nthe empty string, the rule will insert \"b\" in the environment between\n\"X\" and \"Y\". If \"b\" is the empty string, the rule will delete \"a\" in the\nenvironment betwee \"X\" and \"Y\". It is sometimes useful to write rules\nthat insert custom symbols that trigger (or prevent the triggering of)\nsubsequent rules (and which are subsequently deleted). By convention,\nthese symbols consist of lowercase characters enclosed in angle brackets\n(\"<\" and \">\").\n\nThe strings are combined to form a regular expression using the python\n``regex`` module (a drop-in replacement for the ``re`` module). Because\nof this, it is possible to use most regex notation in the strings. For\nexample, to replace \"a\" with \"aa\" before \"b\", \"d\", or \"g', one would use\nthe following rule:\n\n::\n\n    a,aa,,(b|d|g)\n\nor, less optimally:\n\n::\n\n    a,aa,,[bdg]\n\nThere is a special construct for handling cases of metathesis (where\n\"AB\" is replaced with \"BA\"). For example, the rule:\n\n::\n\n    (?P<sw1>[\u0e40\u0e41\u0e42\u0e44\u0e43\u0e44])(?P<sw2>.),,,\n\nWill \"swap\" the positions of any character in \"\u0e40\u0e41\u0e42\u0e44\u0e43\u0e44\" and any following\ncharacter.\n",
    "docs_url": null,
    "download_url": "http://github.com/dmort27/epitran/tarball/0.18",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/dmort27/epitran",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "epitran",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/epitran/",
    "release_url": "https://pypi.org/project/epitran/0.18/",
    "requires_python": null,
    "summary": "Tools for transcribing languages into IPA.",
    "version": "0.18"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5eb5e020b2c6c53a7b5fd3ec779f75a2",
          "sha256": "b3c614682bb2add983a57b2bed1665b0c157505285c9096b8a6651a76176a4b4"
        },
        "downloads": 478,
        "filename": "epitran-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5eb5e020b2c6c53a7b5fd3ec779f75a2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13209,
        "upload_time": "2016-04-30T02:46:00",
        "url": "https://files.pythonhosted.org/packages/04/b6/1fcc130ab6c912b9e294f1ded121091eace528b9c8cc776f213a455c3491/epitran-0.1.tar.gz"
      }
    ],
    "0.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b7f2d15dbf0b880a85ec5f8c8d3455da",
          "sha256": "4e92b3f5bd3dc3339ea37eb36a1bf870c7ea512d34c2f116c52843890d7037b0"
        },
        "downloads": 0,
        "filename": "epitran-0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "b7f2d15dbf0b880a85ec5f8c8d3455da",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43276,
        "upload_time": "2017-04-12T20:35:11",
        "url": "https://files.pythonhosted.org/packages/79/67/5d4e1eb88830014c9f8f19e7ccebf2fd6178d92a519e98454827fa72cde5/epitran-0.10.tar.gz"
      }
    ],
    "0.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c4156a295cba9e26d93c4d75fe0fe71f",
          "sha256": "b7640a380fb543253d2e6a14dfeac979f1f71bba8aefa16c6cfd7c7eb5aa3226"
        },
        "downloads": 0,
        "filename": "epitran-0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "c4156a295cba9e26d93c4d75fe0fe71f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 44037,
        "upload_time": "2017-04-17T18:32:39",
        "url": "https://files.pythonhosted.org/packages/0d/06/9a769a87c557a8f004a0a8f6a86a2cac54830067b66d2e955436bb41745c/epitran-0.11.tar.gz"
      }
    ],
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "af96a35bb580ec66dd59fbd39d71d32b",
          "sha256": "00abbdb12d0cbfea93c0a5b752dbb02f163da16360356a9f7b2ef25fc53c7776"
        },
        "downloads": 0,
        "filename": "epitran-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "af96a35bb580ec66dd59fbd39d71d32b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 42685,
        "upload_time": "2017-04-22T16:05:07",
        "url": "https://files.pythonhosted.org/packages/18/9a/c6b4831abbf9909434efc7d7928522af9af551b813ed875028de823aa5cd/epitran-0.12.tar.gz"
      }
    ],
    "0.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3c65cc3f803c6c884a197205fa7087ce",
          "sha256": "cabc2ea4229e0fbc41549ce370d6702805fae82707df56bca16c42e37a1decab"
        },
        "downloads": 0,
        "filename": "epitran-0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "3c65cc3f803c6c884a197205fa7087ce",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 42690,
        "upload_time": "2017-04-24T00:26:49",
        "url": "https://files.pythonhosted.org/packages/d5/88/1b69a90a60bd59830863b4e1b03235f0e532cecce7e25da167491319ae20/epitran-0.13.tar.gz"
      }
    ],
    "0.14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9d9a5474e15f849073b1d509e618cad8",
          "sha256": "422d75f01bd100504a52a286812391d7a2e87985f7bc9c6b3fef659e08a4f508"
        },
        "downloads": 0,
        "filename": "epitran-0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "9d9a5474e15f849073b1d509e618cad8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 44276,
        "upload_time": "2017-04-25T18:31:30",
        "url": "https://files.pythonhosted.org/packages/b5/fe/b8b40116f35bb863e9d4d407268c8d979041c956ce369605cddba19df6e9/epitran-0.14.tar.gz"
      }
    ],
    "0.15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1b18c106fbf473e9029abc2ddb5a87fd",
          "sha256": "7f89cf721d45f2254ad55d77e68d06816e279488872138717711569f25331d1c"
        },
        "downloads": 0,
        "filename": "epitran-0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "1b18c106fbf473e9029abc2ddb5a87fd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 44094,
        "upload_time": "2017-04-25T19:08:27",
        "url": "https://files.pythonhosted.org/packages/17/b5/6849789e718488772504b35cd1dd6cdd0f878e9c7599d0755b104426e9ed/epitran-0.15.tar.gz"
      }
    ],
    "0.16": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e465b80b485a5372cb8e431da14cec2c",
          "sha256": "eafb2dae4700445f339722cf7e76c7023278a68c434be4385982455351bc70f8"
        },
        "downloads": 0,
        "filename": "epitran-0.16.tar.gz",
        "has_sig": false,
        "md5_digest": "e465b80b485a5372cb8e431da14cec2c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 44096,
        "upload_time": "2017-04-25T23:10:46",
        "url": "https://files.pythonhosted.org/packages/c5/b2/d24d05a5877187a46ec512d1f9ace5e78e084ea6f6c763c35e906e62c3d9/epitran-0.16.tar.gz"
      }
    ],
    "0.17": [
      {
        "comment_text": "",
        "digests": {
          "md5": "83c0348e0f46a36dffb2975cc4163a11",
          "sha256": "0b425b9999c095d7e5a499f1c3d964e04821c88231be763a0bc7eb66f4a2cf30"
        },
        "downloads": 0,
        "filename": "epitran-0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "83c0348e0f46a36dffb2975cc4163a11",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 42826,
        "upload_time": "2017-04-27T00:12:20",
        "url": "https://files.pythonhosted.org/packages/80/ad/9a8ad387951b5c3f41fcaf8e879ba7e5e62bd3b85aad0e76ed89bfcaeb04/epitran-0.17.tar.gz"
      }
    ],
    "0.18": [
      {
        "comment_text": "",
        "digests": {
          "md5": "09885a8d0153722a84721a018c281cd0",
          "sha256": "88ed36dcb2d1177fc16473405f3e17944a5c673d34408a6bb4e89eb0f808a7fb"
        },
        "downloads": 0,
        "filename": "epitran-0.18.tar.gz",
        "has_sig": false,
        "md5_digest": "09885a8d0153722a84721a018c281cd0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45472,
        "upload_time": "2017-04-28T21:13:55",
        "url": "https://files.pythonhosted.org/packages/93/c1/14b0f0644f42f06000fbbe938fcd17acb37a059e1a242bb38254f65efb52/epitran-0.18.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d8c2433939a1235010d72486e65ea575",
          "sha256": "1e0c45a8dab11d1ca7661170894071e84bb29d86da685b50ef0ede42ff40ae9a"
        },
        "downloads": 151,
        "filename": "epitran-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d8c2433939a1235010d72486e65ea575",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18651,
        "upload_time": "2016-05-09T21:23:47",
        "url": "https://files.pythonhosted.org/packages/03/ea/c6f13d940929f799ee8a89fec8aebb0fc6d2168f992351f1196a74e53c9c/epitran-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a03ecd958aa8b8b9b23f57abb7eb3e8a",
          "sha256": "f21f7781164ca8fafa808244c6f2339c00af3d9356f4177d6bffe3d3ec0bda96"
        },
        "downloads": 138,
        "filename": "epitran-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a03ecd958aa8b8b9b23f57abb7eb3e8a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25807,
        "upload_time": "2016-07-29T22:11:39",
        "url": "https://files.pythonhosted.org/packages/89/3f/81c6d1e10da126fa1531b4cc081ca2c73b47ccff68d723f02e4324a4320b/epitran-0.3.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cabe891ff54fe87c4fd06e674ada4a5b",
          "sha256": "cf41954426e953571305dbb81dc685f2824535e9aace001883e53515f0f153cf"
        },
        "downloads": 378,
        "filename": "epitran-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "cabe891ff54fe87c4fd06e674ada4a5b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25785,
        "upload_time": "2016-08-27T14:20:33",
        "url": "https://files.pythonhosted.org/packages/67/79/3bdb771e020b6e515f761599932a00e9dbd116e35d3ad1398e77b3cb1c19/epitran-0.4.tar.gz"
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "24fc445da1229cfc5f531f35a89e8649",
          "sha256": "6e263a031fb8d86a638ef48a9eae86c4535200b7d7066a84e3743d71b11ee124"
        },
        "downloads": 12,
        "filename": "epitran-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "24fc445da1229cfc5f531f35a89e8649",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41242,
        "upload_time": "2017-02-01T19:52:39",
        "url": "https://files.pythonhosted.org/packages/b6/80/d5cbdac454e7fad5f8e70fc15991fc1575936c668de6399cac5d3645463d/epitran-0.5.tar.gz"
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "31d9865e0b1daa8bc9fbd12b7cf0de4a",
          "sha256": "28eac005a9d19da96478c4363d2179a80144ab56493192fa9a25e577111d8548"
        },
        "downloads": 11,
        "filename": "epitran-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "31d9865e0b1daa8bc9fbd12b7cf0de4a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 36854,
        "upload_time": "2017-02-15T22:23:09",
        "url": "https://files.pythonhosted.org/packages/2d/6a/9f2c421abaabf6758505cf8318a4f8b8138d034e88c70feea03cb6068bbc/epitran-0.6.tar.gz"
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "df1ef1c854a2537b4856018089a4a140",
          "sha256": "c122f37a7b05a5f565279f0b12c4d354773e0e5c7887c486c7c936783eba7daa"
        },
        "downloads": 16,
        "filename": "epitran-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "df1ef1c854a2537b4856018089a4a140",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 36037,
        "upload_time": "2017-02-17T22:13:44",
        "url": "https://files.pythonhosted.org/packages/65/b0/e8075e7a13952fe0dbebcd04d9bb1d5ffa7f97772e0bfb9988028050bc08/epitran-0.7.tar.gz"
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f64d4a560a4f6bdeb425ec50d6e6f9df",
          "sha256": "b23ba1a960ec52dd948625dd640dceb1842f68abe15a53b5496445ebc7650269"
        },
        "downloads": 88,
        "filename": "epitran-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "f64d4a560a4f6bdeb425ec50d6e6f9df",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41156,
        "upload_time": "2017-04-05T14:56:48",
        "url": "https://files.pythonhosted.org/packages/59/b7/d0990bdadda80de7b300a94f25c67ac81b8b6566bf452556ce170b70adb2/epitran-0.8.tar.gz"
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5f249abb1ee3a48051c3e8bc38f76daf",
          "sha256": "dbde528bfa9f6bc84afacc7aa746a7144556fffbd6a295604833a974aaf27c53"
        },
        "downloads": 108,
        "filename": "epitran-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "5f249abb1ee3a48051c3e8bc38f76daf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41184,
        "upload_time": "2017-04-05T17:38:36",
        "url": "https://files.pythonhosted.org/packages/40/ee/25148e90990442f1f6102390f6b60d2b54163dd75ed92900b3e046bb7e16/epitran-0.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "09885a8d0153722a84721a018c281cd0",
        "sha256": "88ed36dcb2d1177fc16473405f3e17944a5c673d34408a6bb4e89eb0f808a7fb"
      },
      "downloads": 0,
      "filename": "epitran-0.18.tar.gz",
      "has_sig": false,
      "md5_digest": "09885a8d0153722a84721a018c281cd0",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 45472,
      "upload_time": "2017-04-28T21:13:55",
      "url": "https://files.pythonhosted.org/packages/93/c1/14b0f0644f42f06000fbbe938fcd17acb37a059e1a242bb38254f65efb52/epitran-0.18.tar.gz"
    }
  ]
}