{
  "info": {
    "author": "Felipe A. Hernandez",
    "author_email": "ergoithz@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3"
    ],
    "description": "\n# lfudacache\n\nPython implementation Less Frequently Used with Dynamic Aging (LFUDA).\n\n## Usage\n\n```python\nimport lfudacache\n\ncache = LFUDCache(1000)\ncache.set('value')\ncache.get('value')  # 'value'\n```\n\nA function memoization decorator is also provided. Please note that,\nunhashable arguments will raise `TypeError` just like python's standard\n`functools.lru_cache`.\n\n```python\nimport lfudacache\n\n@lfudacache.memoize(1000)\ndef my_cached_function(attr):\n    # a lot of work here\n    return attr\n```\n\n## Rationale\n\nAlthough I found a lot of LFU implementations for Python, I were unable to get\na LFUDA one.\n\nIn the other hand, LRU and LFU object-based implementations are quite\ninefficient for such performance-critical use cases, due to python attribute\nlookup overhead (thats why python's standard lru_cache implementation is\npurely functional).\n\nOur implementation follows a hybrid approach: the methods make extensive use\nof python closures, while providing an object-oriented interface to those\n(static) methods, as they use a different intermediate dynamic class for every\ninstance, holding said state.\n\n### Why Less Frequently Used with Dynamic Aging (LFUDA)\n\nLFUDA evicts less used items when they become too old, rejecting new cache\nitems until then.\n\nIn our implementation, an item become too old when its cache hit count lags\nbehind the entire cache misses.\n\nThis approach prevents eviction of very used items in favor of potentially less\nused items.\n\n\n### Why not Less Recently Used (LRU)\n\nLRU is a very simple approach to caching, evicting older unused items.\n\nThis approach is optimal when the most relevant items are accessed frequently,\nbut this is not always the case.\n\nThe drawback is that very used items will be evicted when a lot of new items\nare added to cache, even if they will never be accesed again.\n\nThis problem is usually minimized increasing the cache size until potentially\nirrelevant cache items become only a tiny fraction of the entire cache, but\nthis is not a possibility on all cases (ie. caching huge datasets).\n\n### Why not Less Frequenty Used (LFU)\n\nLFU is our base algorithm, which evicts less used items.\n\nThis approach has one major drawback when cache is full: a new saved item\ncould cause the eviction of an item more frequently used than the new one.\nThis is called cache pollution.\n\nTo minimize this problem, it's common to implement two different item storages,\nwith different eviction policies. Please note while this method reduces said\ncache pollution issue, it does not fix it.\n\n## Documentation\n\n\n### make_key(args, kwargs, tuple=tuple, hash=hash)\n\n```\nHash function for function arguments.\n\n:param args: argument iterable\n:type args: iterable\n:param kwargs: keyword argument dict-like object\n:type kwargs: dict\n:returns: hash of arg and kwargs\n:rtype: int\n```\n\n### LFUDACache\n\n```\nLess Frequenty Used with Dynamic Aging cache.\n\nImplementation note:\n\n    Instances will be created from their own different subclass.\n\n    As a side effect, the effective instance type won't be this class, so\n    avoid :func:`type` conparisons and use :func:`isinstance` instead.\n\nHow it works:\n\n* Every cache hit increases item `HIT` counter.\n* Every cache miss increases `THRESHOLD`, until max `HITS` is reached.\n* When full, a new cache item will only be accepted if `THRESHOLD` is\n  above or equals the less frequently used item's HIT counter. Said\n  item is evicted.\n* When a new item is cached, its `HIT` counter is set equal to `THRESHOLD`\n  itself.\n* When an existing item is updated, its `HIT` counter is incremented\n  by 1 above `THRESHOLD`.\n* When any item's `HIT` reaches `MAX_HITS`, said value is substracted\n  from every `HIT` and `THRESHOLD` counter.\n```\n\n#### LFUDACache.get(key, default=None)\n\n```\nLFUDACache.get(key[,default]) -> value\n\nGet value of key from cache.\n\n:param key: cache item key\n:param default: optional default parameter\n:returns: cache item value\n```\n\n#### LFUDACache.__getitem__(key)\n\n```\nLFUDACache[key] -> value\n\nGet value of key from cache.\n\nIf key is not found, KeyError is raised.\n\n:param key: cache item key\n:param default: optional default parameter\n:returns: cache item value\n```\n\n#### LFUDACache.__setitem__(key, value)\n\n```\nLFUDACache[key] = value\n\nSet value for key in cache.\n\n:param key: cache item key\n:param value: cache item value\n```\n\n#### LFUDACache.__delitem__(key)\n\n```\ndel LFUDACache[key]\n\nRemove specified key and return the corresponding value.\nIf key is not found KeyError is raised.\n\n:param key: cache item key\n:param value: cache item value\n```\n\n#### LFUDACache.__contains__(key)\n\n```\nkey in LFUDACache -> True if cached, False otherwise\n\n:returns: True if key is cached, False otherwise\n```\n\n#### LFUDACache.pop(key, default=None)\n\n```\nLFUDACache.pop(key[,default]) -> value\n\nRemove specified key and return the corresponding value.\nIf key is not found, default is returned if given, otherwise\nKeyError is raised.\n\n:param key: cache item key\n:param default: optional default parameter\n:returns: cache item value\n```\n\n#### LFUDACache.items()\n\n```\nLFUDACache.items() => iterable of key and value tuples\n\nIterable of cache pairs (key, value) sorted from most to lesser\nfrequently used.\n\n:yields: (key, value) tuples\n```\n\n#### LFUDACache.keys():\n\n```\nLFUDACache.keys() -> iterable of keys\n\nIterable of cache keys sorted from most to lesser\nfrequently used.\n\n:yields: key\n```\n\n#### LFUDACache.__iter__()\n\n```\niter(LFUDACache) -> iterable of keys\n\nIterable of cache keys sorted from most to lesser\nfrequently used.\n\n:yields: key\n```\n\n#### LFUDACache.values()\n\n```\nLFUDACache.values() -> iterable of values\n\nIterable of cache values sorted from most to lesser\nfrequently used.\n\n:yields: value\n```\n\n#### LFUDACache.clear()\n\n```\nLFUDA.clear()\n\nEvict the entire cache.\n```\n\n#### LFUDACache.threshold\n\n```\nCurrent threshold level\n```\n\n#### LFUDACache.__len__()\n\n```\nlen(LFUDACache) -> current cache size\n```\n\n### memoize(maxsize, fnc=None, key_fnc=make_key)\n\n```\nMemoization decorator using Less Frequenty Used with Dynamic Aging cache\neviction algorithm.\n\nThe LFUDACache instance is available on the decorated function, as `cache`\nproperty.\n\n:param maxsize: maximum cache size\n:type maxsize: int\n:param fnc: optional function to memoize\n:type fnc: callable or None\n:param key_fnc: optional custom cache key function, receiving argument\n                list and keyword argument dict\n:type key_fnc: callable\n:returns: decorator if fnc is not given, wrapped function otherwise\n:rtype: callable\n```\n",
    "docs_url": null,
    "download_url": "https://github.com/ergoithz/lfudacache/archive/0.0.1.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ergoithz/lfudacache",
    "keywords": "cache",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lfudacache",
    "platform": "any",
    "project_url": "https://pypi.org/project/lfudacache/",
    "release_url": "https://pypi.org/project/lfudacache/0.0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Less Frequently Used with Dynamic Aging",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4f24c3774eadc441c2e12b98fbd87701",
          "sha256": "b31661e2fb10eb8a678d2dbe4c6bf267f513b46e694ce2f5eb2df2dd30adf90d"
        },
        "downloads": -1,
        "filename": "lfudacache-0.0.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f24c3774eadc441c2e12b98fbd87701",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 11771,
        "upload_time": "2017-10-29T17:20:30",
        "url": "https://files.pythonhosted.org/packages/41/25/6d5f0bc58c681901397864a818925e61541243d14959fd9f90c5cd3288b2/lfudacache-0.0.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2718d447f7d0c734c9e5c7b91fefaf63",
          "sha256": "2ca733901ef9d491f963c124dc58f519f9be611dfd5f68240e3610280b719734"
        },
        "downloads": -1,
        "filename": "lfudacache-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2718d447f7d0c734c9e5c7b91fefaf63",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7492,
        "upload_time": "2017-10-29T17:20:31",
        "url": "https://files.pythonhosted.org/packages/ae/2f/3bf7fa50a9eb81890dfe17c5a8514faa304d843ed4e3c710ad9921790871/lfudacache-0.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4f24c3774eadc441c2e12b98fbd87701",
        "sha256": "b31661e2fb10eb8a678d2dbe4c6bf267f513b46e694ce2f5eb2df2dd30adf90d"
      },
      "downloads": -1,
      "filename": "lfudacache-0.0.1-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "4f24c3774eadc441c2e12b98fbd87701",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "size": 11771,
      "upload_time": "2017-10-29T17:20:30",
      "url": "https://files.pythonhosted.org/packages/41/25/6d5f0bc58c681901397864a818925e61541243d14959fd9f90c5cd3288b2/lfudacache-0.0.1-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "2718d447f7d0c734c9e5c7b91fefaf63",
        "sha256": "2ca733901ef9d491f963c124dc58f519f9be611dfd5f68240e3610280b719734"
      },
      "downloads": -1,
      "filename": "lfudacache-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "2718d447f7d0c734c9e5c7b91fefaf63",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7492,
      "upload_time": "2017-10-29T17:20:31",
      "url": "https://files.pythonhosted.org/packages/ae/2f/3bf7fa50a9eb81890dfe17c5a8514faa304d843ed4e3c710ad9921790871/lfudacache-0.0.1.tar.gz"
    }
  ]
}