{
  "info": {
    "author": "Peter Salnikov",
    "author_email": "peter@navio.tech",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "|Build Status|\n\nWhy I did this fork and what will happen here?\n==============================================\n\nThis project was forked from Pynt. `Raghunandan\nRao <https://github.com/rags/pynt>`__\n\nI appreciate work made by `Raghunandan Rao <https://github.com/rags>`__\nand will push any good parts of my changes to initial\n`rags/pynt <https://github.com/rags/pynt>`__ repo.\n\nAim of this navio-builder project is to provide my clients with\nlightweight and easy to use python devops tool. I\u2019m going to accumulate\nwork done by `Raghunandan Rao <https://github.com/rags>`__ and other\npynt contributers here. My own changes and new features will be\nimplemented here and push as PR to original pynt repo.\n\nA pynt of Python build.\n=======================\n\nFeatures\n--------\n\n-  Easy to learn.\n-  Build tasks are just python funtions.\n-  Manages dependencies between tasks.\n-  Automatically generates a command line interface.\n-  Rake style param passing to tasks\n-  Supports python 2.7 and python 3.x\n\nTodo Features\n-------------\n\n-  Async tasks\n-  Additional tasks timing reporting\n\nInstallation\n------------\n\nYou can install navio-builder from the Python Package Index (PyPI) or\nfrom source.\n\nUsing pip\n\n.. code:: bash\n\n    $ pip install navio-builder\n\nUsing easy_install\n\n.. code:: bash\n\n    $ easy_install navio-builder\n\nExample\n-------\n\nThe build script is written in pure Python and navio-builder takes care\nof managing any dependencies between tasks and generating a command line\ninterface.\n\nWriting build tasks is really simple, all you need to know is the @task\ndecorator. Tasks are just regular Python functions marked with the\n``@task()`` decorator. Dependencies are specified with ``@task()`` too.\nTasks can be ignored with the ``@task(ignore=True)``. Disabling a task\nis an useful feature to have in situations where you have one task that\na lot of other tasks depend on and you want to quickly remove it from\nthe dependency chains of all the dependent tasks.\n\n**build.py**\n------------\n\n.. code:: python\n\n\n    #!/usr/bin/python\n\n    import sys\n    from navio.builder import task\n\n    @task()\n    def clean():\n        '''Clean build directory.'''\n        print 'Cleaning build directory...'\n\n    @task(clean)\n    def html(target='.'):\n        '''Generate HTML.'''\n        print 'Generating HTML in directory \"%s\"' %  target\n\n    @task(clean, ignore=True)\n    def images():\n        '''Prepare images.'''\n        print 'Preparing images...'\n\n    @task(html,images)\n    def start_server(server='localhost', port = '80'):\n        '''Start the server'''\n        print 'Starting server at %s:%s' % (server, port)\n\n    @task(start_server) #Depends on task with all optional params\n    def stop_server():\n        print 'Stopping server....'\n\n    @task()\n    def copy_file(src, dest):\n        print 'Copying from %s to %s' % (src, dest)\n\n    @task()\n    def echo(*args,**kwargs):\n        print args\n        print kwargs\n        \n    # Default task (if specified) is run when no task is specified in the command line\n    # make sure you define the variable __DEFAULT__ after the task is defined\n    # A good convention is to define it at the end of the module\n    # __DEFAULT__ is an optional member\n\n    __DEFAULT__=start_server\n\n**Running navio-builder tasks**\n-------------------------------\n\nThe command line interface and help is automatically generated. Task\ndescriptions are extracted from function docstrings.\n\n.. code:: bash\n\n    $ nb -h\n    usage: nb [-h] [-l] [-v] [-f file] [task [task ...]]\n\n    positional arguments:\n      task                  perform specified task and all its dependencies\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -l, --list-tasks      List the tasks\n      -v, --version         Display the version information\n      -f file, --file file  Build file to read the tasks from. Default is\n                            'build.py'\n\n.. code:: bash\n\n    $ nb -l\n    Tasks in build file ./build.py:\n      clean                       Clean build directory.\n      copy_file                   \n      echo                        \n      html                        Generate HTML.\n      images           [Ignored]  Prepare images.\n      start_server     [Default]  Start the server\n      stop_server                 \n\n    Powered by navio-builder - A Lightweight Python Build Tool.\n\nnavio-builder takes care of dependencies between tasks. In the following\ncase start_server depends on clean, html and image generation (image\ntask is ignored).\n\n.. code:: bash\n\n    $ nb #Runs the default task start_server. It does exactly what \"nb start_server\" would do.\n    [ example.py - Starting task \"clean\" ]\n    Cleaning build directory...\n    [ example.py - Completed task \"clean\" ]\n    [ example.py - Starting task \"html\" ]\n    Generating HTML in directory \".\"\n    [ example.py - Completed task \"html\" ]\n    [ example.py - Ignoring task \"images\" ]\n    [ example.py - Starting task \"start_server\" ]\n    Starting server at localhost:80\n    [ example.py - Completed task \"start_server\" ]\n\nThe first few characters of the task name is enough to execute the task,\nas long as the partial name is unambigious. You can specify multiple\ntasks to run in the commandline. Again the dependencies are taken taken\ncare of.\n\n.. code:: bash\n\n    $ nb cle ht cl\n    [ example.py - Starting task \"clean\" ]\n    Cleaning build directory...\n    [ example.py - Completed task \"clean\" ]\n    [ example.py - Starting task \"html\" ]\n    Generating HTML in directory \".\"\n    [ example.py - Completed task \"html\" ]\n    [ example.py - Starting task \"clean\" ]\n    Cleaning build directory...\n    [ example.py - Completed task \"clean\" ]\n\nThe \u2018html\u2019 task dependency \u2018clean\u2019 is run only once. But clean can be\nexplicitly run again later.\n\nnb tasks can accept parameters from commandline.\n\n.. code:: bash\n\n    $ nb \"copy_file[/path/to/foo, path_to_bar]\"\n    [ example.py - Starting task \"clean\" ]\n    Cleaning build directory...\n    [ example.py - Completed task \"clean\" ]\n    [ example.py - Starting task \"copy_file\" ]\n    Copying from /path/to/foo to path_to_bar\n    [ example.py - Completed task \"copy_file\" ]\n\nnb can also accept keyword arguments.\n\n.. code:: bash\n\n    $ nb start[port=8888]\n    [ example.py - Starting task \"clean\" ]\n    Cleaning build directory...\n    [ example.py - Completed task \"clean\" ]\n    [ example.py - Starting task \"html\" ]\n    Generating HTML in directory \".\"\n    [ example.py - Completed task \"html\" ]\n    [ example.py - Ignoring task \"images\" ]\n    [ example.py - Starting task \"start_server\" ]\n    Starting server at localhost:8888\n    [ example.py - Completed task \"start_server\" ]\n        \n    $ nb echo[hello,world,foo=bar,blah=123]\n    [ example.py - Starting task \"echo\" ]\n    ('hello', 'world')\n    {'blah': '123', 'foo': 'bar'}\n    [ example.py - Completed task \"echo\" ]\n\n**Organizing build scripts**\n----------------------------\n\nYou can break up your build files into modules and simple import them\ninto your main build file.\n\n.. code:: python\n\n    from deploy_tasks import *\n    from test_tasks import functional_tests, report_coverage\n\nContributors/Contributing\n-------------------------\n\n-  Raghunandan Rao - navio-builder is preceded by and forked from\n   `pynt <https://github.com/rags/pynt>`__, which was created by\n   `Raghunandan Rao <https://github.com/rags/pynt>`__.\n-  Calum J. Eadie - pynt is preceded by and forked from\n   `microbuild <https://github.com/CalumJEadie/microbuild>`__, which was\n   created by `Calum J. Eadie <https://github.com/CalumJEadie>`__.\n\nIf you want to make changes the repo is at\nhttps://github.com/naviotech/navio-builder. You will need\n`pytest <http://www.pytest.org>`__ to run the tests\n\n.. code:: bash\n\n    $ ./b t\n\nIt will be great if you can raise a `pull\nrequest <https://help.github.com/articles/using-pull-requests>`__ once\nyou are done.\n\nIf you find any bugs or need new features please raise a ticket in the\n`issues section <https://github.com/naviotech/navio-builder/issues>`__\nof the github repo.\n\nLicense\n-------\n\nnavio-builder is licensed under a `MIT\nlicense <http://opensource.org/licenses/MIT>`__\n\n.. |Build Status| image:: https://travis-ci.org/naviotech/navio-builder.png?branch=master\n   :target: https://travis-ci.org/naviotech/navio-builder\n\nChanges\n=======\n\n0.1.16 - 14/12/2017\n-------------------\n\n-  Add task running time to output\n\n.. section-1:\n\n0.1.0 - 11/12/2017\n------------------\n\n-  Initial release. Fork from pynt.\n-  Rename done to modules",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://oss.navio.tech/navio-builder/",
    "keywords": "devops,build tool",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "navio-builder",
    "platform": "",
    "project_url": "https://pypi.org/project/navio-builder/",
    "release_url": "https://pypi.org/project/navio-builder/0.1.20/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Lightweight Python Build Tool.",
    "version": "0.1.20"
  },
  "releases": {
    "0.1.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "52536684df0c7e0e8a55e9822c7fbc1f",
          "sha256": "8dcc76599a14e225c7b95cb507bb5f1235d0e1b8fd268c643ecf2fc19bf6af8e"
        },
        "downloads": -1,
        "filename": "navio-builder-0.1.10.tar.gz",
        "has_sig": false,
        "md5_digest": "52536684df0c7e0e8a55e9822c7fbc1f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8655,
        "upload_time": "2017-12-14T09:22:45",
        "url": "https://files.pythonhosted.org/packages/44/64/e8ffc619937b7152189386d5301062f730fd28a27d799f090f492dbe4258/navio-builder-0.1.10.tar.gz"
      }
    ],
    "0.1.15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "68290ad6eb65e1a0cd5890b0a869f5b1",
          "sha256": "6016b21bbf3caf999b8f32a758fe3c0a3f0bd92db48ca93476e0e1a5273c07a8"
        },
        "downloads": -1,
        "filename": "navio-builder-0.1.15.tar.gz",
        "has_sig": false,
        "md5_digest": "68290ad6eb65e1a0cd5890b0a869f5b1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8656,
        "upload_time": "2017-12-14T09:53:32",
        "url": "https://files.pythonhosted.org/packages/d8/7f/5e8bdb5982992ede1804d8e720828b80b2eeae4da8a581989176b678b57f/navio-builder-0.1.15.tar.gz"
      }
    ],
    "0.1.16": [
      {
        "comment_text": "",
        "digests": {
          "md5": "96de98aa4a1f1924b09cf7a285c90495",
          "sha256": "b73c771c87bb5e46a8ec834fe6a7377d43be1bc85d257f74fea79369bb95d054"
        },
        "downloads": -1,
        "filename": "navio-builder-0.1.16.tar.gz",
        "has_sig": false,
        "md5_digest": "96de98aa4a1f1924b09cf7a285c90495",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8655,
        "upload_time": "2017-12-14T12:45:22",
        "url": "https://files.pythonhosted.org/packages/16/bd/304b39a59dea4e5eeffdbe9c17b8f9b394b53b6e4011b71434868db7490f/navio-builder-0.1.16.tar.gz"
      }
    ],
    "0.1.19": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1b4ad6726b9929537585157d9e2a9286",
          "sha256": "092cdfb945b7b6284ff1bc8d628e40b595750aacadaa058beb92845064cc1694"
        },
        "downloads": -1,
        "filename": "navio-builder-0.1.19.tar.gz",
        "has_sig": false,
        "md5_digest": "1b4ad6726b9929537585157d9e2a9286",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8858,
        "upload_time": "2017-12-27T10:50:27",
        "url": "https://files.pythonhosted.org/packages/42/37/b5f40f4925cec71c40fb5e410fd2861f9d7489d8a37325e9fb707eceae13/navio-builder-0.1.19.tar.gz"
      }
    ],
    "0.1.20": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2fe3e5b4e3d3016bcf8331b6a91e4f19",
          "sha256": "ebe8fc02faece38efbd6fb1cc0eb73d786dbf35c34c71b88ec4d72e0aa9eb2e8"
        },
        "downloads": -1,
        "filename": "navio-builder-0.1.20.tar.gz",
        "has_sig": false,
        "md5_digest": "2fe3e5b4e3d3016bcf8331b6a91e4f19",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8952,
        "upload_time": "2017-12-27T11:11:38",
        "url": "https://files.pythonhosted.org/packages/5b/7a/cac5d4f0a2bcd228714d946fffb85f0a063cc7f554df66d6089ebcf04580/navio-builder-0.1.20.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2fe3e5b4e3d3016bcf8331b6a91e4f19",
        "sha256": "ebe8fc02faece38efbd6fb1cc0eb73d786dbf35c34c71b88ec4d72e0aa9eb2e8"
      },
      "downloads": -1,
      "filename": "navio-builder-0.1.20.tar.gz",
      "has_sig": false,
      "md5_digest": "2fe3e5b4e3d3016bcf8331b6a91e4f19",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8952,
      "upload_time": "2017-12-27T11:11:38",
      "url": "https://files.pythonhosted.org/packages/5b/7a/cac5d4f0a2bcd228714d946fffb85f0a063cc7f554df66d6089ebcf04580/navio-builder-0.1.20.tar.gz"
    }
  ]
}