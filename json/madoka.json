{
  "info": {
    "author": "Yukino Ikegami",
    "author_email": "yukinoik@icloud.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: C++",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "madoka\r\n===========\r\n.. image:: https://badge.fury.io/py/madoka.png\r\n    :target: http://badge.fury.io/py/madoka\r\n.. image:: https://travis-ci.org/ikegami-yukino/madoka-python.svg?branch=master\r\n    :target: https://travis-ci.org/ikegami-yukino/madoka-python\r\n.. image:: https://coveralls.io/repos/ikegami-yukino/madoka-python/badge.png\r\n    :target: https://coveralls.io/r/ikegami-yukino/madoka-python\r\n\r\n\r\nMadoka is an implementation of a Count-Min sketch data structure for summarizing data streams.\r\n\r\nString-int pairs in a Madoka-Sketch may take less memory than in a standard Python dict.\r\n\r\nBased on `madoka`_ C++ library.\r\n\r\n.. _madoka: https://github.com/s-yata/madoka\r\n\r\nNOTE: Madoka-Sketch does not have index of keys. so Madoka-Sketch can not dump all keys such as Python dict's `dict.keys()`.\r\n\r\nInstallation\r\n============\r\n\r\n::\r\n\r\n $ pip install madoka\r\n\r\nClass\r\n============\r\n\r\nMadoka has some classes having same interface. These classes are vary in value data type. So you can choose for your purpose.\r\n\r\nFor example, if you wants to count float data, it's preferable to choose CroquisFloat class or CroquisDouble class.\r\n\r\n- Sketch\r\n  - storing unsigned long long (64bit) and fast implementation\r\n- CroquisFloat\r\n  - storing float (32bit)\r\n- CroquisDouble\r\n  - storing double (64bit)\r\n- CroquisUint8\r\n  - storing unsigned char (8bit)\r\n- CroquisUint16\r\n  - storing unsigned short (16bit)\r\n- CroquisUint32\r\n  - storing unsigned int (32bit)\r\n- CroquisUint64\r\n  - storing unsigned long long (64bit)\r\n\r\nUsage\r\n=====\r\n\r\nFrom here, I will describe about Sketch class.\r\nBut, Croquis classes have also same interfaces mostly.\r\nSo you can use other classes by the same way as Sketch class.\r\nIn that case, you should replace to intended class from \"Sketch\".\r\n\r\n\r\nCreate a new sketch\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> import madoka\r\n >>> sketch = madoka.Sketch()\r\n\r\n- Sketch madoka.Sketch([width=0, max_value=0, path='', flags=0, seed=0])\r\n\r\n  - Permission of file given to `path` should be 644\r\n\r\n  - `madoka.Sketch()` calls `madoka.Sketch.create()`, so you don't have to explicitly call `create()` in initialization\r\n\r\n\r\nIncrement a key value\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch['mami'] += 1\r\n \r\nor\r\n\r\n:: \r\n\r\n >>> sketch.inc('mami')\r\n\r\n\r\n- int inc(key[, key_length=0])\r\n\r\n  - Note that `key_length` is automatically determined when not giving `key_length`. Thus, the order of parameters differs from original madoka C++ library.\r\n\r\n\r\nAdd a value to the current key value\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch['mami'] += 6\r\n \r\nor\r\n\r\n::\r\n\r\n >>> sketch.add('mami', 6)\r\n\r\n\r\n- int add(key, value[, key_length=0])\r\n\r\n  - Note that `key_length` is automatically determined when not giving `key_length`. Thus, the order of parameters differs from original madoka C++ library.\r\n\r\n\r\n\r\nUpdate a key value\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch['mami'] = 6\r\n \r\nor\r\n\r\n::\r\n\r\n >>> sketch.set('mami', 6)\r\n\r\n\r\n- void set(key, value[, key_length=0])\r\n\r\n  * Note that `set()` does nothing when the given value is not greater than the current key value.\r\n\r\n  * Also note that the new value is saturated when the given value is greater than the upper limit.\r\n\r\n  * Additionally note that `key_length` is automatically determined when not giving `key_length`. Thus, the order of parameters differs from original madoka C++ library.\r\n\r\n\r\nGet a key value\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch['mami']\r\n \r\nor\r\n\r\n::\r\n\r\n >>> sketch.get('mami')\r\n\r\n\r\n- int get(key[, key_length=0])\r\n\r\n  - Note that `key_length` is automatically determined when not giving `key_length`. Thus, the order of parameters differs from original madoka C++ library.\r\n\r\nGet all values\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch.values()\r\n\r\n\r\n- generator<int> values()\r\n\r\n  - Note that processing time increases according to sketch's width. But this method may be slow, so I recommend setting width to less than 1000000 when creating sketch.\r\n\r\nSave a sketch to a file\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch.save('example.madoka')\r\n\r\n- void save(path)\r\n\r\n  - Permission of file given to `path` should be 644\r\n\r\nLoad a sketch from a file\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch.load('example.madoka')\r\n\r\n- void load(path)\r\n\r\n  - Permission of file given to `path` should be 644\r\n\r\nClear a sketch\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch.clear()\r\n\r\n- void clear()\r\n\r\n  * Delete all key-value pairs. It differs from `create()` in maintaining current settings.\r\n\r\n\r\nInitialize a sketch with settings change\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch.create()\r\n\r\n- void create([width=0, max_value=0, path=NULL, flags=0, seed=0])\r\n\r\n  - Permission of file given to `path` should be 644\r\n\r\nCopy a sketch\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch.copy(othersketch)\r\n\r\n- void copy(Sketch)\r\n\r\n\r\nMerge two sketches\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch += other_sketch\r\n\r\nor\r\n\r\n::\r\n\r\n >>> sketch.merge(othersketch)\r\n\r\n- void merge(Sketch[, lhs_filter=None, rhs_filter=None])\r\n\r\n  - lhs_filter is applied for self.sketch, rhs_filter is applied for given sketch\r\n\r\n\r\nShrink a sketch\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch.shrink(sketch, width=1000)\r\n\r\n- void shrink(Sketch[, width=0, max_value=0, filter=None, path=None, flags=0])\r\n\r\n  - When width > 0, width must be less than source sketch\r\n\r\n  - Permission of file given to `path` should be 644\r\n\r\n\r\nGet summed sketch\r\n-----------------------\r\n\r\n::\r\n\r\n >>> summed_sketch = sketch + other_sketch\r\n\r\n- Create summed sketch, So it does not break original sketches\r\n\r\nGet summed sketch by dict\r\n--------------------------\r\n\r\n::\r\n\r\n >>> summed_sketch = sketch + {'mami': 1, 'kyoko': 2}\r\n\r\n- Create summed sketch, So it does not break original sketches\r\n\r\n\r\nCheck whether sketch contains key value\r\n-----------------------------------------\r\n\r\n::\r\n\r\n >>> 'mami' in sketch\r\n\r\n\r\nGet inner product of two sketches\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch.inner_product(other_sketch)\r\n\r\n- list<float> inner_product(Sketch)\r\n\r\n  - Returns [inner product, square length of left hands sketch (float), square length of right hands sketch (float)]\r\n\r\n\r\nApply filter into all values\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch.filter(lambda x: x + 1)\r\n\r\n- void filter(Callable[, apply_zerovalue=False])\r\n\r\n  - If apply_zerovalue = True, filter_method is applied also 0 values (It may be slow) (from version 0.6 or later)\r\n\r\n  - Note that processing time increases according to sketch's width. If you feel this method is slow, I recommend setting width to less than 1000000 when creating sketch\r\n\r\nSet values from dict\r\n--------------------------------------------\r\n\r\n::\r\n\r\n >>> sketch.fromdict({'mami': 14, 'madoka': 13})\r\n\r\nor \r\n\r\n::\r\n\r\n >>> sketch += {'mami': 14, 'madoka': 13}\r\n\r\n\r\n- void fromdict(dict)\r\n\r\n\r\n\r\nTODO\r\n=========\r\n\r\n- Benchmark score about memory usage compared with Python standard dict and Redis\r\n\r\nContributions are welcome!\r\n\r\n\r\nLicense\r\n=========\r\n\r\n- Wrapper code is licensed under New BSD License.\r\n- Bundled `madoka`_ C++ library is licensed under the Simplified BSD License.\r\n\r\nCHANGES\r\n========\r\n\r\n0.6 (2014-11-23)\r\n----------------\r\n\r\n- Support Python 3.4\r\n- Improve processing time of `inner_product()`\r\n- Fix `shrink()` method bug\r\n- Change `filter()` methods param\r\n- Support with-statement\r\n- Implement increment-add from dict\r\n  - (e.g.) summed_sketch = sketch + dict; sketch += dict\r\n\r\n\r\n0.5 (2014-04-08)\r\n----------------\r\n\r\n- Add Croquis classes handling some data types (e.g., float, uint8)\r\n- Given length=True to inner product method, returns also square length of both left hands and right hands sketch\r\n- Add fromdict method\r\n\r\n0.4 (2014-03-30)\r\n----------------\r\n\r\n- Implement dict-like interface (e.g., sketch['key'])\r\n- Add filter() method\r\n- Add values() method for dumping all values\r\n\r\n0.3 (2014-03-14)\r\n----------------\r\n\r\n- Key length is automatically determined when it is not given\r\n- Remove filter function\r\n- Slightly decreasing amount of memory usage\r\n\r\n0.2 (2013-10-12)\r\n----------------\r\n\r\nSimplify the step of creating new sketch.\r\n\r\n0.1 (2013-10-11)\r\n----------------\r\n\r\nInitial release.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ikegami-yukino/madoka-python",
    "keywords": "Count-Min Sketch,counter,word count",
    "license": "New BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "madoka",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/madoka/",
    "release_url": "https://pypi.org/project/madoka/0.6/",
    "requires_python": null,
    "summary": "Memory-efficient CountMin Sketch key-value structure (based on Madoka C++ library)",
    "version": "0.6"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7c31a516146c0f4286e2595598c15975",
          "sha256": "83c7e29a05895102164f243164381c2b1a3a21cfcba6addbfeab6d7462b9e466"
        },
        "downloads": 2785,
        "filename": "madoka-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7c31a516146c0f4286e2595598c15975",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 59684,
        "upload_time": "2013-10-11T18:43:59",
        "url": "https://files.pythonhosted.org/packages/e6/9e/b514d7024cbc118d7ca8e8d0d50af14fb2af500405a99cfbe25ac589c89e/madoka-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b6527511efc68aae73e1ba2ee2a5cbd0",
          "sha256": "9c228be9855bfea68000f5e4fa395e42237cb17492258f6d3f8f284396077fcb"
        },
        "downloads": 2332,
        "filename": "madoka-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b6527511efc68aae73e1ba2ee2a5cbd0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 60620,
        "upload_time": "2013-10-12T20:12:34",
        "url": "https://files.pythonhosted.org/packages/eb/83/5f40eaf54222258e6fcfbaff808a6005b046d169efe8e1ad6ce6ac703bfc/madoka-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cdb07009aa3cb1c4785ad6fcf28e86fb",
          "sha256": "ee1dfc17bd407b80f3507cbf7c9398692141a6b1f531175a8859d5f5493310a0"
        },
        "downloads": 2058,
        "filename": "madoka-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cdb07009aa3cb1c4785ad6fcf28e86fb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 61003,
        "upload_time": "2014-03-14T07:15:54",
        "url": "https://files.pythonhosted.org/packages/8a/b8/c151a228fefd6b23ee4c278e3ff100cab1c19c9e8569dc93b4879985232e/madoka-0.3.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "65559a1d450fd0f74cf1ab5653e95556",
          "sha256": "e2adde915c82181dbc3300f5cad71ad28de4dceda51c1c7cf4a757e1aeeb6610"
        },
        "downloads": 1902,
        "filename": "madoka-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "65559a1d450fd0f74cf1ab5653e95556",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 60785,
        "upload_time": "2014-03-30T17:45:11",
        "url": "https://files.pythonhosted.org/packages/9d/53/528e586d9b917c08fb1c9c668823f77f991ad681a30f75ea8f7dd914c9e5/madoka-0.4.tar.gz"
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "42aab530f5ef0f53be16c47ac816f23b",
          "sha256": "a5e2a091f12cba8e312b4018d0f5e8e4006973cdf115a3ab4d358b608888b91c"
        },
        "downloads": 1953,
        "filename": "madoka-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "42aab530f5ef0f53be16c47ac816f23b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 84454,
        "upload_time": "2014-04-07T20:18:30",
        "url": "https://files.pythonhosted.org/packages/b9/87/05723332721080246bc2c2c2b1d4848d91d88f89fcf144dcfcfbf4dba1c1/madoka-0.5.tar.gz"
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "edad6b068b472cfb8f23663fb3fe093a",
          "sha256": "10e2b18e455fb3402483b9544b982918a11d6194d1af412287d07d206bea68d7"
        },
        "downloads": 1719,
        "filename": "madoka-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "edad6b068b472cfb8f23663fb3fe093a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 83388,
        "upload_time": "2014-11-23T09:48:11",
        "url": "https://files.pythonhosted.org/packages/d4/e6/94e9545faa4c65cc096fd0833e014cea3fc22ac7dffbc8d064fe066ffdce/madoka-0.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "edad6b068b472cfb8f23663fb3fe093a",
        "sha256": "10e2b18e455fb3402483b9544b982918a11d6194d1af412287d07d206bea68d7"
      },
      "downloads": 1719,
      "filename": "madoka-0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "edad6b068b472cfb8f23663fb3fe093a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 83388,
      "upload_time": "2014-11-23T09:48:11",
      "url": "https://files.pythonhosted.org/packages/d4/e6/94e9545faa4c65cc096fd0833e014cea3fc22ac7dffbc8d064fe066ffdce/madoka-0.6.tar.gz"
    }
  ]
}