{
  "info": {
    "author": "craft ai",
    "author_email": "contact@craft.ai",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Scientific/Engineering :: Artificial Intelligence"
    ],
    "description": "**craft ai** API python client\n==============================\n\n|PyPI| |Build Status| |License| |python|\n\n`**craft ai** *AI-as-a-service* <http://craft.ai>`__ enables your\nservices to learn every day: provide a personalized experience to each\nuser and automate complex tasks.\n\nGet Started!\n------------\n\n0 - Signup\n~~~~~~~~~~\n\nIf you're reading this you are probably already registered with **craft\nai**, if not, head to\n```https://beta.craft.ai/signup`` <https://beta.craft.ai/signup>`__.\n\n1 - Create a project\n~~~~~~~~~~~~~~~~~~~~\n\nOnce your account is setup, let's create your first **project**! Go in\nthe 'Projects' tab in the **craft ai** control center at\n```https://beta.craft.ai/projects`` <https://beta.craft.ai/projects>`__,\nand press **Create a project**.\n\nOnce it's done, you can click on your newly created project to retrieve\nits tokens. There are two types of tokens: **read** and **write**.\nYou'll need the **write** token to create, update and delete your agent.\n\n2 - Setup\n~~~~~~~~~\n\nInstall\n^^^^^^^\n\n`PIP <https://pypi.python.org/pypi/pip/>`__ / `PyPI <https://pypi.python.org/pypi>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLet's first install the package from pip.\n\n.. code:: sh\n\n    pip install --upgrade craft-ai\n\nThen import it in your code\n\n.. code:: python\n\n    import craftai\n\n    This client also provides helpers to use it in conjuction with\n    `pandas <#pandas-support>`__\n\nInitialize\n^^^^^^^^^^\n\n.. code:: python\n\n    config = {\n        \"token\": \"{token}\"\n    }\n    client = craftai.Client(config)\n\n3 - Create an agent\n~~~~~~~~~~~~~~~~~~~\n\n**craft ai** is based on the concept of **agents**. In most use cases,\none agent is created per user or per device.\n\nAn agent is an independent module that stores the history of the\n**context** of its user or device's context, and learns which\n**decision** to take based on the evolution of this context in the form\nof a **decision tree**.\n\nIn this example, we will create an agent that learns the **decision\nmodel** of a light bulb based on the time of the day and the number of\npeople in the room. In practice, it means the agent's context have 4\nproperties:\n\n-  ``peopleCount`` which is a ``continuous`` property,\n-  ``timeOfDay`` which is a ``time_of_day`` property,\n-  ``timezone``, a property of type ``timezone`` needed to generate\n   proper values for ``timeOfDay`` (cf. the `context properties type\n   section <#context-properties-types>`__ for further information),\n-  and finally ``lightbulbState`` which is an ``enum`` property that is\n   also the output.\n\n.. code:: python\n\n    agent_id = \"my_first_agent\"\n    configuration = {\n        \"context\": {\n            \"peopleCount\": {\n                \"type\": \"continuous\"\n            },\n            \"timeOfDay\": {\n                \"type\": \"time_of_day\"\n            },\n            \"timezone\": {\n                \"type\": \"timezone\"\n            },\n            \"lightbulbState\": {\n                \"type\": \"enum\"\n            }\n        },\n        \"output\": [\"lightbulbState\"]\n    }\n\n    agent = client.create_agent(configuration, agent_id)\n    print(\"Agent\", agent[\"id\"], \"has successfully been created\")\n\nPretty straightforward to test! Open\n```https://beta.craft.ai/inspector`` <https://beta.craft.ai/inspector>`__,\nselect you project and your agent is now listed.\n\nNow, if you run that a second time, you'll get an error: the agent\n``'my_first_agent'`` is already existing. Let's see how we can delete it\nbefore recreating it.\n\n.. code:: python\n\n    agent_id = \"my_first_agent\"\n    client.delete_agent(agent_id)\n    print(\"Agent\", agent_id, \"no longer exists\")\n\n    configuration = ...\n    agent = client.create_agent(configuration, agent_id)\n    print(\"Agent\", agent[\"id\"], \"has successfully been created\")\n\n*For further information, check the `'create agent' reference\ndocumentation <#create>`__.*\n\n4 - Add context operations\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe have now created our first agent but it is not able to do much, yet.\nTo learn a decision model it needs to be provided with data, in **craft\nai** these are called context operations.\n\nIn the following we add 8 operations:\n\n#. The initial one sets the initial state of the agent, on July 25 2016\n   at 5:30, in Paris, nobody is there and the light is off;\n#. At 7:02, someone enters the room the light is turned on;\n#. At 7:15, someone else enters the room;\n#. At 7:31, the light is turned off;\n#. At 8:12, everyone leaves the room;\n#. At 19:23, 2 persons enter the room;\n#. At 22:35, the light is turned on;\n#. At 23:06, everyone leaves the room and the light is turned off.\n\n.. code:: python\n\n    agent_id = \"my_first_agent\"\n    client.delete_agent(agent_id)\n    print(\"Agent\", agent_id, \"no longer exists\")\n\n    configuration = ...\n    agent = client.create_agent(configuration, agent_id)\n    print(\"Agent\", agent[\"id\"], \"has successfully been created\")\n\n    context_list = [\n        {\n            \"timestamp\": 1469410200,\n            \"context\": {\n                \"timezone\": \"+02:00\",\n                \"peopleCount\": 0,\n                \"lightbulbState\": \"OFF\"\n            }\n        },\n        {\n            \"timestamp\": 1469415720,\n            \"context\": {\n                \"peopleCount\": 1,\n                \"lightbulbState\": \"ON\"\n            }\n        },\n        {\n            \"timestamp\": 1469416500,\n            \"context\": {\n                \"peopleCount\": 2\n            }\n        },\n        {\n            \"timestamp\": 1469417460,\n            \"context\": {\n                \"lightbulbState\": \"OFF\"\n            }\n        },\n        {\n            \"timestamp\": 1469419920,\n            \"context\": {\n                \"peopleCount\": 0\n            }\n        },\n        {\n            \"timestamp\": 1469460180,\n            \"context\": {\n                \"peopleCount\": 2\n            }\n        },\n        {\n            \"timestamp\": 1469471700,\n            \"context\": {\n                \"lightbulbState\": \"ON\"\n            }\n        },\n        {\n            \"timestamp\": 1469473560,\n            \"context\": {\n                \"peopleCount\": 0\n            }\n        }\n    ]\n    client.add_operations(agent_id, context_list)\n    print(\"Successfully added initial operations to agent\", agent_id, \"!\")\n\nIn real-world applications, you'll probably do the same kind of things\nwhen the agent is created and then, regularly throughout the lifetime of\nthe agent with newer data.\n\n*For further information, check the `'add context operations' reference\ndocumentation <#add-operations>`__.*\n\n5 - Compute the decision tree\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe agent has acquired a context history, we can now compute a decision\ntree from it! A decision tree models the output, allowing us to estimate\nwhat the output would be in a given context.\n\nThe decision tree is computed at a given timestamp, which means it will\nconsider the context history from the creation of this agent up to this\nmoment. Let's first try to compute the decision tree at midnight on July\n26, 2016.\n\n.. code:: python\n\n    agent_id = \"my_first_agent\"\n\n    client.delete_agent(agent_id)\n    print(\"Agent\", agent_id, \"no longer exists\")\n\n    configuration = ...\n    agent = client.create_agent(configuration, agent_id)\n    print(\"Agent\", agent[\"id\"], \"has successfully been created\")\n\n    context_list = ...\n    client.add_operations(agent_id, context_list)\n    print(\"Successfully added initial operations to agent\", agent_id, \"!\")\n\n    decision_tree = client.get_decision_tree(agent_id, 1469476800)\n    print(\"The full decision tree at timestamp\", dt_timestamp, \"is the following:\")\n    print(decision_tree)\n    \"\"\" Outputed tree is the following\n      {\n        \"_version\": \"1.0.0\",\n        \"configuration\": {\n          \"context\": {\n            \"peopleCount\": {\n              \"type\": \"continuous\"\n            },\n            \"timeOfDay\": {\n              \"type\": \"time_of_day\",\n              \"is_generated\": true\n            },\n            \"timezone\": {\n              \"type\": \"timezone\"\n            },\n            \"lightbulbState\": {\n              \"type\": \"enum\"\n            }\n          },\n          \"output\": [\n            \"lightbulbState\"\n          ],\n          \"time_quantum\": 600,\n          \"learning_period\": 108000\n        },\n        \"trees\": {\n          \"lightbulbState\": {\n            \"children\": [\n              {\n                \"children\": [\n                  {\n                    \"children\": [\n                      {\n                        \"confidence\": 0.9545537233352661,\n                        \"decision_rule\": {\n                          \"operator\": \"continuous.lessthan\",\n                          \"operand\": 1,\n                          \"property\": \"peopleCount\"\n                        },\n                        \"predicted_value\": \"OFF\"\n                      },\n                      {\n                        \"confidence\": 0.8630361557006836,\n                        \"decision_rule\": {\n                          \"operator\": \">=\",\n                          \"operand\": 1,\n                          \"property\": \"peopleCount\"\n                        },\n                        \"predicted_value\": \"ON\"\n                      }\n                    ],\n                    \"decision_rule\": {\n                      \"operator\": \"<\",\n                      \"operand\": 5.666666507720947,\n                      \"property\": \"timeOfDay\"\n                    }\n                  },\n                  {\n                    \"confidence\": 0.9947378635406494,\n                    \"decision_rule\": {\n                      \"operator\": \">=\",\n                      \"operand\": 5.666666507720947,\n                      \"property\": \"timeOfDay\"\n                    },\n                    \"predicted_value\": \"OFF\"\n                  }\n                ],\n                \"decision_rule\": {\n                  \"operator\": \"<\",\n                  \"operand\": 20.66666603088379,\n                  \"property\": \"timeOfDay\"\n                }\n              },\n              {\n                \"confidence\": 0.8630361557006836,\n                \"decision_rule\": {\n                  \"operator\": \">=\",\n                  \"operand\": 20.66666603088379,\n                  \"property\": \"timeOfDay\"\n                },\n                \"predicted_value\": \"ON\"\n              }\n            ],\n          }\n        }\n      ]\n      \"\"\"\n\nTry to retrieve the tree at different timestamps to see how it gradually\nlearns from the new operations. To visualize the trees, use the\n`inspector <https://beta.craft.ai/inspector>`__!\n\n*For further information, check the `'compute decision tree' reference\ndocumentation <#compute>`__.*\n\n6 - Take a decision\n~~~~~~~~~~~~~~~~~~~\n\nOnce the decision tree is computed it can be used to take a decision. In\nour case it is basically answering this type of question: \"What is the\nanticipated **state of the lightbulb** at 7:15 if there are 2 persons in\nthe room ?\".\n\n.. code:: python\n\n    agent_id = \"my_first_agent\"\n\n    client.delete_agent(agent_id)\n    print(\"Agent\", agent_id, \"no longer exists\")\n\n    configuration = ...\n    agent = client.create_agent(configuration, agent_id)\n    print(\"Agent\", agent[\"id\"], \"has successfully been created\")\n\n    context_list = ...\n    client.add_operations(agent_id, context_list)\n    print(\"Successfully added initial operations to agent\", agent_id, \"!\")\n\n    decision_tree = client.get_decision_tree(agent_id, 1469476800)\n    print(\"The decision tree at timestamp\", dt_timestamp, \"is the following:\")\n    print(decision_tree)\n\n    context = {\n        \"timezone\": \"+02:00\",\n        \"timeOfDay\": 7.25,\n        \"peopleCount\": 2\n    }\n    resp = client.decide(decision_tree, context)\n    print(\"The anticipated lightbulb state is:\", resp[\"output\"][\"lightbulbState\"][\"predicted_value\"])\n\n*For further information, check the `'take decision' reference\ndocumentation <#take-decision>`__.*\n\nPython starter kit\n~~~~~~~~~~~~~~~~~~\n\nIf you prefer to get started from an existing code base, the official\nPython starter kit can get you there! Retrieve the sources locally and\nfollow the \"readme\" to get a fully working **Wellness Coach** example\nusing *real-world* data.\n\n    `\ud83d\udce6 *Get the **craft ai** Python Starter\n    Kit* <https://github.com/craft-ai/craft-ai-starterkit-python>`__\n\nAPI\n---\n\nProject\n~~~~~~~\n\n**craft ai** agents belong to **projects**. In the current version, each\nidentified users defines a owner and can create projects for themselves,\nin the future we will introduce shared projects.\n\nConfiguration\n~~~~~~~~~~~~~\n\nEach agent has a configuration defining:\n\n-  the context schema, i.e. the list of property keys and their type (as\n   defined in the following section),\n-  the output properties, i.e. the list of property keys on which the\n   agent takes decisions,\n\n    \u26a0\ufe0f In the current version, only one output property can be provided.\n\n-  the ``time_quantum``, i.e. the minimum amount of time, in seconds,\n   that is meaningful for an agent; context updates occurring faster\n   than this quantum won't be taken into account. As a rule of thumb,\n   you should always choose the largest value that seems right and\n   reduce it, if necessary, after some tests.\n-  the ``learning_period``, i.e. the maximum amount of time, in seconds,\n   that matters for an agent; the agent's decision model can ignore\n   context that is older than this duration. You should generally choose\n   the smallest value that fits this description.\n\n    \u26a0\ufe0f if no time\\_quantum is specified, the default value is 600.\n\n    \u26a0\ufe0f if no learning\\_period is specified, the default value is 15000\n    time quantums.\n\nContext properties types\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nBase types: ``enum`` and ``continuous``\n'''''''''''''''''''''''''''''''''''''''\n\n``enum`` and ``continuous`` are the two base **craft ai** types:\n\n-  an ``enum`` property is a string;\n-  a ``continuous`` property is a real number.\n\n    \u26a0\ufe0f the absolute value of a ``continuous`` property must be less than\n    1020.\n\nTime types: ``timezone``, ``time_of_day``, ``day_of_week``, ``day_of_month`` and ``month_of_year``\n''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''\n\n**craft ai** defines the following types related to time:\n\n-  a ``time_of_day`` property is a real number belonging to **[0.0;\n   24.0[**, each value represents the number of hours in the day since\n   midnight (e.g. 13.5 means\n   13:30),\n-  a ``day_of_week`` property is an integer belonging to **[0, 6]**,\n   each\n   value represents a day of the week starting from Monday (0 is Monday,\n   6 is\n   Sunday).\n-  a ``day_of_month`` property is an integer belonging to **[1, 31]**,\n   each value represents a day of the month.\n-  a ``month_of_year`` property is an integer belonging to **[1, 12]**,\n   each value represents a month of the year.\n-  a ``timezone`` property is a string value representing the timezone\n   as an\n   offset from UTC, the expected format is **\u00b1[hh]:[mm]** where ``hh``\n   represent the\n   hour and ``mm`` the minutes from UTC (eg. ``+01:30``)), between\n   ``-12:00`` and\n   ``+14:00``.\n\n    | \u2139\ufe0f By default, the values of the ``time_of_day`` and\n      ``day_of_week``\n    | properties are generated from the ```timestamp`` <#timestamp>`__\n      of an agent's\n    | state and the agent's current ``timezone``. Therefore, whenever\n      you use generated\n    | ``time_of_day`` and/or ``day_of_week`` in your configuration, you\n      **must** provide a\n    | ``timezone`` value in the context. There can only be one\n      ``timezone`` property.\n\n    | If you wish to provide their values manually, add\n      ``is_generated: false`` to the\n    | time types properties in your configuration. In this case, since\n      you provide the values, the\n    | ``timezone`` property is not required, and you must update the\n      context whenever\n    | one of these time values changes in a way that is significant for\n      your system.\n\nExamples\n''''''''\n\n| Let's take a look at the following configuration. It is designed to\n  model the **color**\n| of a lightbulb (the ``lightbulbColor`` property, defined as an output)\n  depending\n| on the **outside light intensity** (the ``lightIntensity`` property),\n  the **time\n  of the day** (the ``time`` property) and the **day of the week** (the\n  ``day``\n| property).\n\n| ``day`` and ``time`` values will be generated automatically, hence the\n  need for\n| ``timezone``, the current Time Zone, to compute their value from given\n| ```timestamps`` <#timestamp>`__.\n\n| The ``time_quantum`` is set to 100 seconds, which means that if the\n  lightbulb\n| color is changed from red to blue then from blue to purple in less\n  that 1\n| minutes and 40 seconds, only the change from red to purple will be\n  taken into\n| account.\n\n| The ``learning_period`` is set to 108 000 seconds (one month) , which\n  means that\n| the state of the lightbulb from more than a month ago can be ignored\n  when learning\n| the decision model.\n\n.. code:: json\n\n    {\n      \"context\": {\n          \"lightIntensity\":  {\n            \"type\": \"continuous\"\n          },\n          \"time\": {\n            \"type\": \"time_of_day\"\n          },\n          \"day\": {\n            \"type\": \"day_of_week\"\n          },\n          \"timezone\": {\n            \"type\": \"timezone\"\n          },\n          \"lightbulbColor\": {\n              \"type\": \"enum\"\n          }\n      },\n      \"output\": [\"lightbulbColor\"],\n      \"time_quantum\": 100,\n      \"learning_period\": 108000\n    }\n\n| In this second example, the ``time`` property is not generated, no\n  property of\n| type ``timezone`` is therefore needed. However values of ``time`` must\n  be manually\n| provided continuously.\n\n.. code:: json\n\n    {\n      \"context\": {\n        \"time\": {\n          \"type\": \"time_of_day\",\n          \"is_generated\": false\n        },\n        \"lightIntensity\":  {\n            \"type\": \"continuous\"\n        },\n        \"lightbulbColor\": {\n            \"type\": \"enum\"\n        }\n      },\n      \"output\": [\"lightbulbColor\"],\n      \"time_quantum\": 100,\n      \"learning_period\": 108000\n    }\n\nTimestamp\n~~~~~~~~~\n\n**craft ai** API heavily relies on ``timestamps``. A ``timestamp`` is an\ninstant represented as a `Unix\ntime <https://en.wikipedia.org/wiki/Unix_time>`__, that is to say the\namount of seconds elapsed since Thursday, 1 January 1970 at midnight\nUTC. In most programming languages this representation is easy to\nretrieve, you can refer to `**this\npage** <https://github.com/techgaun/unix-time/blob/master/README.md>`__\nto find out how.\n\n``craftai.Time``\n^^^^^^^^^^^^^^^^\n\nThe ``craftai.Time`` class facilitates the handling of time types in\n**craft ai**. It is able to extract the different **craft ai** formats\nfrom various *datetime* representations, thanks to\n`datetime <https://docs.python.org/3.5/library/datetime.html>`__.\n\n.. code:: python\n\n    # From a unix timestamp and an explicit UTC offset\n    t1 = craftai.Time(1465496929, \"+10:00\")\n\n    # t1 == {\n    #   utc: \"2016-06-09T18:28:49.000Z\",\n    #   timestamp: 1465496929,\n    #   day_of_week: 4,\n    #   time_of_day: 4.480277777777778,\n    #   timezone: \"+10:00\"\n    # }\n\n    # From a unix timestamp and using the local UTC offset.\n    t2 = craftai.Time(1465496929)\n\n    # Value are valid if in Paris !\n    # t2 == {\n    #   utc: \"2016-06-09T18:28:49.000Z\",\n    #   timestamp: 1465496929,\n    #   day_of_week: 3,\n    #   time_of_day: 20.480277777777776,\n    #   timezone: \"+02:00\"\n    # }\n\n    # From a ISO 8601 string. Note that here it should not have any \":\" in the timezone part\n    t3 = craftai.Time(\"1977-04-22T01:00:00-0500\")\n\n    # t3 == {\n    #   utc: \"1977-04-22T06:00:00.000Z\",\n    #   timestamp: 230536800,\n    #   day_of_week: 4,\n    #   time_of_day: 1,\n    #   timezone: \"-05:00\"\n    # }\n\n    # Retrieve the current time with the local UTC offset\n    now = craftai.Time()\n\n    # Retrieve the current time with the given UTC offset\n    nowP5 = craftai.Time(timezone=\"+05:00\")\n\nAdvanced configuration\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe following **advanced** configuration parameters can be set in\nspecific cases. They are **optional**. Usually you would not need them.\n\n-  ``operations_as_events`` is a boolean, either ``true`` or ``false``.\n   The default value is ``false``. If it is set to true, all context\n   operations are treated as events, as opposed to context updates. This\n   is appropriate if the data for an agent is made of events that have\n   no duration, and if many events are more significant than a few. If\n   ``operations_as_events`` is ``true``, ``learning_period`` and the\n   advanced parameter ``tree_max_operations`` must be set as well. In\n   that case, ``time_quantum`` is ignored because events have no\n   duration, as opposed to the evolution of an agent's context over\n   time.\n-  ``tree_max_operations`` is a positive integer. It **can and must** be\n   set only if ``operations_as_events`` is ``true``. It defines the\n   maximum number of events on which a single decision tree can be\n   based. It is complementary to ``learning_period``, which limits the\n   maximum age of events on which a decision tree is based.\n-  ``tree_max_depth`` is a positive integer. It defines the maximum\n   depth of decision trees, which is the maximum distance between the\n   root node and a leaf (terminal) node. A depth of 0 means that the\n   tree is made of a single root node. By default, ``tree_max_depth`` is\n   set to 6 if the output is categorical (e.g. ``enum``), or to 4 if the\n   output is numerical (e.g. ``continuous``).\n\nThese advanced configuration parameters are optional, and will appear in\nthe agent information returned by **craft ai** only if you set them to\nsomething other than their default value. If you intend to use them in a\nproduction environment, please get in touch with us.\n\nAgent\n~~~~~\n\nCreate\n^^^^^^\n\nCreate a new agent, and create its `configuration <#configuration>`__.\n\n.. code:: python\n\n    client.create_agent(\n        { # The configuration\n            \"context\": {\n              \"peopleCount\": {\n                \"type\": \"continuous\"\n              },\n              \"timeOfDay\": {\n                \"type\": \"time_of_day\"\n              },\n              \"timezone\": {\n                \"type\": \"timezone\"\n              },\n              \"lightbulbState\": {\n                \"type\": \"enum\"\n              }\n            },\n            \"output\": [ \"lightbulbState\" ],\n            \"time_quantum\": 100,\n            \"learning_period\": 108000\n        },\n        \"impervious_kraken\", # id for the agent, if undefined a random id is generated\n\nDelete\n^^^^^^\n\n.. code:: python\n\n    client.delete_agent(\n        \"impervious_kraken\" # The agent id\n    )\n\nRetrieve\n^^^^^^^^\n\n.. code:: python\n\n    client.get_agent(\n        \"impervious_kraken\" # The agent id\n    )\n\nList\n^^^^\n\n.. code:: python\n\n    client.list_agents()\n    # Return a list of agents' name\n    # Example: [ \"impervious_kraken\", \"joyful_octopus\", ... ]\n\nCreate and retrieve shared url\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n| Create and get a shareable url to view an agent tree.\n| Only one url can be created at a time.\n\n.. code:: python\n\n    client.get_shared_agent_inspector_url(\n        \"impervious_kraken\", # The agent id.\n        1464600256 # optional, the timestamp for which you want to inspect the tree.\n    )\n\nDelete shared url\n^^^^^^^^^^^^^^^^^\n\n| Delete a shareable url.\n| The previous url cannot access the agent tree anymore.\n\n.. code:: python\n\n    client.delete_shared_agent_inspector_url(\n        'impervious_kraken' # The agent id.\n    )\n\nContext\n~~~~~~~\n\nAdd operations\n^^^^^^^^^^^^^^\n\n.. code:: python\n\n    client.add_operations(\n        \"impervious_kraken\", # The agent id\n        [ # The list of context operations\n            {\n                \"timestamp\": 1469410200,\n                \"context\": {\n                    \"timezone\": \"+02:00\",\n                    \"peopleCount\": 0,\n                    \"lightbulbState\": \"OFF\"\n                }\n            },\n            {\n                \"timestamp\": 1469415720,\n                \"context\": {\n                    \"peopleCount\": 1,\n                    \"lightbulbState\": \"ON\"\n                }\n            },\n            {\n                \"timestamp\": 1469416500,\n                \"context\": {\n                    \"peopleCount\": 2\n                }\n            },\n            {\n                \"timestamp\": 1469417460,\n                \"context\": {\n                    \"lightbulbState\": \"OFF\"\n                }\n            },\n            {\n                \"timestamp\": 1469419920,\n                \"context\": {\n                    \"peopleCount\": 0\n                }\n            },\n            {\n                \"timestamp\": 1469460180,\n                \"context\": {\n                    \"peopleCount\": 2\n                }\n            },\n            {\n                \"timestamp\": 1469471700,\n                \"context\": {\n                    \"lightbulbState\": \"ON\"\n                }\n            },\n            {\n                \"timestamp\": 1469473560,\n                \"context\": {\n                    \"peopleCount\": 0\n                }\n            }\n        ]\n    )\n\nList operations\n^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    client.get_operations_list(\n        \"impervious_kraken\" # The agent id\n    )\n\nRetrieve state\n^^^^^^^^^^^^^^\n\n.. code:: python\n\n    client.get_context_state(\n        \"impervious_kraken\", # The agent id\n        1469473600 # The timestamp at which the context state is retrieved\n    )\n\nDecision tree\n~~~~~~~~~~~~~\n\nDecision trees are computed at specific timestamps, directly by **craft\nai** which learns from the context operations\n`added <#add-operations>`__ throughout time.\n\nWhen you `compute <#compute>`__ a decision tree, **craft ai** returns an\nobject containing:\n\n-  the **API version**\n-  the agent's configuration as specified during the agent's\n   `creation <#create-agent>`__\n-  the tree itself as a JSON object:\n\n-  Internal nodes are represented by a ``\"decision_rule\"`` object and a\n   ``\"children\"`` array. The first one, contains the ``\"property``, and\n   the ``\"property\"``'s value, to decide which child matches a context.\n-  Leaves have a ``\"predicted_value\"``, ``\"confidence\"`` and\n   ``\"decision_rule\"`` object for this value, instead of a\n   ``\"children\"`` array. ``\"predicted_value``\" is an estimation of the\n   output in the contexts matching the node. ``\"confidence\"`` is a\n   number between 0 and 1 that indicates how confident **craft ai** is\n   that the output is a reliable prediction. When the output is a\n   numerical type, leaves also have a ``\"standard_deviation\"`` that\n   indicates a margin of error around the ``\"predicted_value\"``.\n-  The root only contains a ``\"children\"`` array.\n\nCompute\n^^^^^^^\n\n.. code:: python\n\n    client.get_decision_tree(\n        \"impervious_kraken\", # The agent id\n        1469473600 # The timestamp at which the decision tree is retrieved\n    )\n\nTake Decision\n^^^^^^^^^^^^^\n\nTo get a chance to store and reuse the decision tree, use\n``get_decision_tree`` and use ``decide``, a simple function evaluating a\ndecision tree offline.\n\n.. code:: python\n\n    tree = { ... } # Decision tree as retrieved through the craft ai REST API\n\n    # Compute the decision on a fully described context\n    decision = client.decide(\n        tree,\n        { # The context on which the decision is taken\n            \"timezone\": \"+02:00\",\n            \"timeOfDay\": 7.5,\n            \"peopleCount\": 3\n        }\n    )\n\n    # Or Compute the decision on a context created from the given one and filling the\n    # `day_of_week`, `time_of_day` and `timezone` properties from the given `Time`\n\n    decision = client.decide(\n      tree,\n      {\n        \"timezone\": \"+02:00\",\n        \"peopleCount\": 3\n      },\n      craftai.Time(\"2010-01-01T07:30:30\")\n    )\n\nA computed ``decision`` on an ``enum`` output type would look like:\n\n.. code:: python\n\n    {\n      \"context\": { # In which context the decision was taken\n        \"timezone\": \"+02:00\",\n        \"timeOfDay\": 7.5,\n        \"peopleCount\": 3\n      },\n      \"output\": { # The decision itself\n        \"lightbulbState\": {\n          \"predicted_value\": \"ON\"\n          \"confidence\": 0.9937745256361138, # The confidence in the decision\n          \"decision_rules\": [ # The ordered list of decision_rules that were validated to reach this decision\n            {\n              \"property\": \"timeOfDay\",\n              \"operator\": \">=\",\n              \"operand\": 6\n            },\n            {\n              \"property\": \"peopleCount\",\n              \"operator\": \">=\",\n              \"operand\": 2\n            }\n          ]\n        },\n      }\n    }\n\nA ``decision`` for a numerical output type would look like:\n\n.. code:: python\n\n      \"output\": {\n        \"lightbulbIntensity\": {\n          \"predicted_value\": 10.5,\n          \"standard_deviation\": 1.25, // For numerical types, this field is returned in decisions.\n          \"decision_rules\": [ ... ],\n          \"confidence\": ...\n        }\n      }\n\nA ``decision`` in a case where the tree cannot make a prediction:\n\n.. code:: python\n\n      \"output\": {\n        \"lightbulbState\": {\n          \"predicted_value\": None,\n          \"confidence\": 0 // Zero confidence if the decision is null\n          \"decision_rules\": [ ... ]\n        }\n      }\n\nError Handling\n~~~~~~~~~~~~~~\n\nWhen using this client, you should be careful wrapping calls to the API\nwith ``try/except`` blocks, in accordance with the\n`EAFP <https://docs.python.org/3/glossary.html#term-eafp>`__ principle.\n\nThe **craft ai** python client has its specific exception types, all of\nthem inheriting from the ``CraftAIError`` type.\n\nAll methods which have to send an http request (all of them except\n``decide``) may raise either of these exceptions:\n``CraftAINotFoundError``, ``CraftAIBadRequestError``,\n``CraftAICredentialsError`` or ``CraftAIUnknownError``.\n\nThe ``decide``\u00a0method only raises ``CrafAIDecisionError`` of\n``CraftAiNullDecisionError`` type of exceptions. The latter is raised\nwhen no the given context is valid but no decision can be taken.\n\nPandas support\n~~~~~~~~~~~~~~\n\nThe craft ai python client optionally supports\n`pandas <http://pandas.pydata.org/>`__ a very popular library used for\nall things data.\n\nBasically instead of importing the default module, you can do the\nfollowing\n\n.. code:: python\n\n    import craftai.pandas\n\n    # Most of the time you'll need the following\n    import numpy as np\n    import pandas as pd\n\nThe craft ai pandas module is derived for the *vanilla* one, with the\nfollowing methods are overriden to support pandas'\n```DataFrame`` <https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html>`__.\n\n``craftai.pandas.Client.get_operations_list``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRetrieves the desired operations as a ``DataFrame`` where:\n\n-  each operation is a row,\n-  each context property is a column,\n-  the index is `*time\n   based* <https://pandas.pydata.org/pandas-docs/stable/timeseries.html>`__\n   matching the operations timestamps,\n-  ``np.NaN`` means no value were given at this property for this\n   timestamp.\n\n.. code:: python\n\n    df = client.get_operations_list(\"impervious_kraken\")\n\n    # `df` is a pd.DataFrame looking like\n    #\n    #              peopleCount  lightbulbState   timezone\n    # 2013-01-01   0            OFF              +02:00\n    # 2013-01-02   1            ON               NaN\n    # 2013-01-03   2            NaN              NaN\n    # 2013-01-04   NaN          OFF              NaN\n    # 2013-01-05   0            NaN              NaN\n\n``craftai.pandas.Client.add_operations``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd a ``DataFrame`` of operations to the desired agent. The format is\nthe same as above.\n\n.. code:: python\n\n    df = pd.DataFrame(\n      [\n        [0, \"OFF\", \"+02:00\"],\n        [1, \"ON\", np.nan],\n        [2, np.nan, np.nan],\n        [np.nan, \"OFF\", np.nan],\n        [0, np.nan, np.nan]\n      ],\n      columns=['peopleCount', 'lightbulbState', 'timezone'],\n      index=pd.date_range('20130101', periods=5, freq='D')\n    )\n    client.add_operations(\"impervious_kraken\", df)\n\nGiven something that is not a ``DataFrame`` this method behave like the\n*vanilla* ``craftai.Client.add_operations``.\n\n``craftai.pandas.Client.decide_from_contexts_df``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTake multiple decisions on a given ``DataFrame`` following the same\nformat as above.\n\n.. code:: python\n\n    decisions_df = client.decide(tree, pd.DataFrame(\n      [\n        [0, \"+02:00\"],\n        [1, np.nan],\n        [2, np.nan],\n        [np.nan, np.nan],\n        [0, np.nan]\n      ],\n      columns=['peopleCount', 'timezone'],\n      index=pd.date_range('20130101', periods=5, freq='D')\n    ))\n    # `decisions_df` is a pd.DataFrame looking like\n    #\n    #              lightbulbState_predicted_value   lightbulbState_confidence ...\n    # 2013-01-01   OFF                              0.999449                  ...\n    # 2013-01-02   ON                               0.970325                  ...\n    # 2013-01-03   ON                               0.970325                  ...\n    # 2013-01-04   ON                               0.970325                  ...\n    # 2013-01-05   OFF                              0.999449                  ...\n\nThis function never raises ``CraftAiNullDecisionError``, instead it\ninserts these errors in the result ``Dataframe`` in a specific ``error``\ncolumn.\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/craft-ai.svg?style=flat-square\n   :target: https://pypi.python.org/pypi?:action=display&name=craft-ai\n.. |Build Status| image:: https://img.shields.io/travis/craft-ai/craft-ai-client-python/master.svg?style=flat-square\n   :target: https://travis-ci.org/craft-ai/craft-ai-client-python\n.. |License| image:: https://img.shields.io/badge/license-BSD--3--Clause-42358A.svg?style=flat-square\n   :target: LICENSE\n.. |python| image:: https://img.shields.io/pypi/pyversions/craft-ai.svg?style=flat-square\n   :target: https://pypi.python.org/pypi?:action=display&name=craft-ai\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/craft-ai/craft-ai-client-python/",
    "keywords": "ai craft-ai",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "craft-ai",
    "platform": "",
    "project_url": "https://pypi.org/project/craft-ai/",
    "release_url": "https://pypi.org/project/craft-ai/1.5.0/",
    "requires_dist": [
      "pandas (>=0.20); extra == 'pandas_support'",
      "tzlocal (==1.2.2)",
      "six (==1.10)",
      "semver (==2.7.7)",
      "requests (==2.13.0)",
      "datetime (==4.1.1)"
    ],
    "requires_python": "",
    "summary": "craft ai API client for python",
    "version": "1.5.0"
  },
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f1f361d77828a797f1d1d622b537770e",
          "sha256": "c7ea06000b1cf586271f6b64f19c7dbcb1dda6dcd142cf9cce6cc0c0fcf0fc92"
        },
        "downloads": 578,
        "filename": "craft_ai-0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1f361d77828a797f1d1d622b537770e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 9013,
        "upload_time": "2016-08-04T11:11:12",
        "url": "https://files.pythonhosted.org/packages/b8/a7/8228880d36b7f4897b077df8b6d5ed19d56dfb87b6efef4b3c6246d5400f/craft_ai-0.2-py2.py3-none-any.whl"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "959545c12d3b16695eeb2d5736a32925",
          "sha256": "667b5595b3ccd560feb0ff75483f02f4eab2f04707226616e0c9c2025541c6f5"
        },
        "downloads": 130,
        "filename": "craft_ai-0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "959545c12d3b16695eeb2d5736a32925",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 16308,
        "upload_time": "2016-08-12T12:21:17",
        "url": "https://files.pythonhosted.org/packages/85/0a/2df042f2e78de4cd8325fc2763dc5ee1419d48fbffcce6d4aa20e40105be/craft_ai-0.3-py2.py3-none-any.whl"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b962b6c716b9429eb5909a46e6668494",
          "sha256": "18be2a81279ba24c99f26553a20fae5459b57b2421d6c1793a7ccbd3b4f9865d"
        },
        "downloads": 118,
        "filename": "craft_ai-0.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b962b6c716b9429eb5909a46e6668494",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 16349,
        "upload_time": "2016-08-12T14:51:39",
        "url": "https://files.pythonhosted.org/packages/19/06/50d0820c73ff792b8d6bc93d151a0a9458661a20994cd1613b70270cb7c0/craft_ai-0.3.1-py2.py3-none-any.whl"
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f287e214116454734792f291858e54f7",
          "sha256": "96c168bac67693ca8a36fb1616ded3d8d48ac3cddf305c0352d35f63479ea881"
        },
        "downloads": 118,
        "filename": "craft_ai-0.3.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f287e214116454734792f291858e54f7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 16403,
        "upload_time": "2016-08-12T16:45:47",
        "url": "https://files.pythonhosted.org/packages/2e/f7/f0ea8f0d22a91d34f727c08dc5c10ac668422aae4dbe4efe45b722efad0c/craft_ai-0.3.2-py2.py3-none-any.whl"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5fe37eaebd6e26b8aef165ffe304a3c3",
          "sha256": "68eb85bdaa9ebcc55ea690b183fe655d4e3909a562bd8c1a6bc6f53789032a72"
        },
        "downloads": 260,
        "filename": "craft_ai-0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5fe37eaebd6e26b8aef165ffe304a3c3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 17912,
        "upload_time": "2016-08-23T14:57:42",
        "url": "https://files.pythonhosted.org/packages/69/84/59e9260e424210096ac10587359018cdf0b878ab1a534089a2d785bae465/craft_ai-0.4-py2.py3-none-any.whl"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "44e63bc36cc83f818dfa86f0e886b372",
          "sha256": "0b6e51c35f58605d5c62de30a9c8b82c5a69fa4c5f2dbd3f2b591e41c6c3ebab"
        },
        "downloads": 269,
        "filename": "craft_ai-0.4.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44e63bc36cc83f818dfa86f0e886b372",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 21901,
        "upload_time": "2016-08-23T16:50:54",
        "url": "https://files.pythonhosted.org/packages/36/ed/554ab41adff92622a03c5b63938b57fa2681e47fc3c09d3b8e6dcf92e2b8/craft_ai-0.4.1-py2.py3-none-any.whl"
      }
    ],
    "0.4.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "22c688bc210ee2b5320f25e1541075ab",
          "sha256": "7ba73a502447da5b85d44ccfd0ab560490f5e95a8b2cba91f5ac039c52b300af"
        },
        "downloads": 10,
        "filename": "craft_ai-0.4.10-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22c688bc210ee2b5320f25e1541075ab",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 24947,
        "upload_time": "2017-01-16T17:13:35",
        "url": "https://files.pythonhosted.org/packages/7d/6d/f0a984f561347ac0f9aee6e353a98cd09fe36b01a1be57aace650b80d3f9/craft_ai-0.4.10-py2.py3-none-any.whl"
      }
    ],
    "0.4.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "055ebd700893d4386eaf737c30ecb5db",
          "sha256": "7e14f1b83b3ef5dbe048b1e2a722b8245a312564ac1ed109a1506ba32d917aa6"
        },
        "downloads": 11,
        "filename": "craft_ai-0.4.11-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "055ebd700893d4386eaf737c30ecb5db",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 25207,
        "upload_time": "2017-02-13T07:43:01",
        "url": "https://files.pythonhosted.org/packages/78/70/33d1bd9ee515a0046caa38237d5a35edb0225de1c43126a5bc79accfeb5f/craft_ai-0.4.11-py2.py3-none-any.whl"
      }
    ],
    "0.4.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "973ffd35a4df7339feac5a7e365db02d",
          "sha256": "4c29a2deeb18cacb3ffeb07835d35e2a97c1983a6f5c56503bdc400af6a96035"
        },
        "downloads": 17,
        "filename": "craft_ai-0.4.12-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "973ffd35a4df7339feac5a7e365db02d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 26316,
        "upload_time": "2017-03-08T17:54:54",
        "url": "https://files.pythonhosted.org/packages/2b/21/329fcbabb9c298e6063638f054267f278bc3944417892fede73aa0605b46/craft_ai-0.4.12-py2.py3-none-any.whl"
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ab3544127939e1f91bf44a30e0d7e3d1",
          "sha256": "7a180d509f44b1546f3329ca0e1745d1cc667b9d540362f148d50daf824173a2"
        },
        "downloads": 275,
        "filename": "craft_ai-0.4.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ab3544127939e1f91bf44a30e0d7e3d1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 21902,
        "upload_time": "2016-08-23T17:07:44",
        "url": "https://files.pythonhosted.org/packages/71/b9/41d1ff69fe883d3aa44f82dbee3e764b98f23984ddabaacb9b47ddc4f70e/craft_ai-0.4.2-py2.py3-none-any.whl"
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bb249cc2ceb76507c199e277e3638f07",
          "sha256": "d6fcf6047febf5b973caad8f4e03990d1e38fe2a43804d851bdf9afcb840bb29"
        },
        "downloads": 363,
        "filename": "craft_ai-0.4.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bb249cc2ceb76507c199e277e3638f07",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 23502,
        "upload_time": "2016-08-25T12:17:21",
        "url": "https://files.pythonhosted.org/packages/c3/48/7f1e4bce82f2aebc1c08a389f745a03535370ee2cc376802c429d64957af/craft_ai-0.4.3-py2.py3-none-any.whl"
      }
    ],
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6727626a3ed01c8cd3c86bee860ba146",
          "sha256": "754f7ae68522e854a4b6953e5a6e3cd92af891b50fda52ea2344a9af5a2d7bc1"
        },
        "downloads": 193,
        "filename": "craft_ai-0.4.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6727626a3ed01c8cd3c86bee860ba146",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 23515,
        "upload_time": "2016-08-30T14:19:10",
        "url": "https://files.pythonhosted.org/packages/f7/b9/069576721537a5ecdafc7358324215ba3a5f85c962dfe8399ce66aa58783/craft_ai-0.4.4-py2.py3-none-any.whl"
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b761607f5b099d2e91c22ba8fd63476a",
          "sha256": "d5fb7fb793a9abc84de26333c6b66caccdc5bb07c8697f854f6b951b62c29466"
        },
        "downloads": 88,
        "filename": "craft_ai-0.4.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b761607f5b099d2e91c22ba8fd63476a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 24818,
        "upload_time": "2016-10-14T13:21:01",
        "url": "https://files.pythonhosted.org/packages/87/cc/7bb5bcdd6a68f5121be170acc7bd0f959b46d7ccc544b177cc88fde34a64/craft_ai-0.4.5-py2.py3-none-any.whl"
      }
    ],
    "0.4.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3c28b4746785ec027bac675d66f73e1c",
          "sha256": "597c39b8cf286ccc9c2576b859d36065b68cb82fccf2d12f6ac1292341303af5"
        },
        "downloads": 94,
        "filename": "craft_ai-0.4.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3c28b4746785ec027bac675d66f73e1c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 24780,
        "upload_time": "2016-10-14T17:08:32",
        "url": "https://files.pythonhosted.org/packages/ac/58/e76c4442571998250e2acec069886a87266244694c4b6fdb6c3a31e0d33b/craft_ai-0.4.6-py2.py3-none-any.whl"
      }
    ],
    "0.4.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ee30967e6145d38382a2e20fc53d1479",
          "sha256": "90dc842b2c67274ae98ff45c5daf453edb3c05fbfafd034ebeb37932598db9e7"
        },
        "downloads": 112,
        "filename": "craft_ai-0.4.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ee30967e6145d38382a2e20fc53d1479",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 24779,
        "upload_time": "2016-10-17T12:15:12",
        "url": "https://files.pythonhosted.org/packages/6f/d3/96c1981446c9a29762278a6bee8f890d881f101f91df595b9b5ae8f0bd7a/craft_ai-0.4.7-py2.py3-none-any.whl"
      }
    ],
    "0.4.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "387d80db5b7f91a91a25f7ddbc9545be",
          "sha256": "efb87ee0a997b0e531d71617368b58f589bbcc87c7d0a9cb2da830cd92896cdd"
        },
        "downloads": 60,
        "filename": "craft_ai-0.4.8-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "387d80db5b7f91a91a25f7ddbc9545be",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 24792,
        "upload_time": "2016-11-16T15:48:54",
        "url": "https://files.pythonhosted.org/packages/8e/76/6674e78229ddd4fe5065ee1ac63450e53f1b829883f88edb3c54c56662fa/craft_ai-0.4.8-py2.py3-none-any.whl"
      }
    ],
    "0.4.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2e4ff0b45fac494df51ea26c15c8f6fe",
          "sha256": "10bf5adc30637cdb6c223fe58c642b3d59e9775a9fb0b578b7371e33b6a658be"
        },
        "downloads": 57,
        "filename": "craft_ai-0.4.9-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e4ff0b45fac494df51ea26c15c8f6fe",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 24808,
        "upload_time": "2016-12-08T13:29:28",
        "url": "https://files.pythonhosted.org/packages/5b/3d/6d1d39f009ee0d52d8d9b38c1bb1750be54873345b9e9e926b19e39ad8cc/craft_ai-0.4.9-py2.py3-none-any.whl"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e7f756cd850ede5b3779811bfcb3db94",
          "sha256": "7f1fdaa31527491842de15902954226e11dd99e1df00f568c9d42c4fdb747f71"
        },
        "downloads": 11,
        "filename": "craft_ai-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e7f756cd850ede5b3779811bfcb3db94",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 26143,
        "upload_time": "2017-03-22T18:04:50",
        "url": "https://files.pythonhosted.org/packages/fa/1e/09f73590fe35d585e3a81a54d5d1df27117a76bdd4cf97518dc5ff9380d5/craft_ai-1.0.0-py2.py3-none-any.whl"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0481ab4eca3d6c4e0493dd54edfa9884",
          "sha256": "a978c6d0284cc62040f8768da62bc7f6963c164e0a018b02ef307450d9681f13"
        },
        "downloads": 12,
        "filename": "craft_ai-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0481ab4eca3d6c4e0493dd54edfa9884",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 26144,
        "upload_time": "2017-03-23T09:19:19",
        "url": "https://files.pythonhosted.org/packages/7e/dc/c8d5b692eb3506d39dfca2346e2764be7e1d903f056a1a0ce4d315be1a83/craft_ai-1.0.1-py2.py3-none-any.whl"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4b4470cc1e361bfac73b79d108e0387a",
          "sha256": "19827d9a435986c4553002898fb7dc09d7149e9de1b9b098465c31eda615d309"
        },
        "downloads": 30,
        "filename": "craft_ai-1.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b4470cc1e361bfac73b79d108e0387a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 26813,
        "upload_time": "2017-04-04T12:37:59",
        "url": "https://files.pythonhosted.org/packages/e2/d7/e58350fe3863158d966843966c411cfdc44bf1ff9703703db006b299d938/craft_ai-1.1.0-py2.py3-none-any.whl"
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6c8bbf1862d0676b880d7d733a54aa6f",
          "sha256": "0264d88d81a1a779cb3ee933c2b02699757c73a75566ef8439b7aaad051e16bd"
        },
        "downloads": 0,
        "filename": "craft_ai-1.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6c8bbf1862d0676b880d7d733a54aa6f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 27932,
        "upload_time": "2017-04-13T11:14:08",
        "url": "https://files.pythonhosted.org/packages/92/b6/e8dd0e42585fe7deaefde1b96a64878bf30396faa85a2a057ebdb58ac684/craft_ai-1.2.0-py2.py3-none-any.whl"
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "974232dcd7dffcc9ba3b9292b022c012",
          "sha256": "65f97f54c3f1451fd1e7147083b27d33a552f0701c6f00202eee81f20c768227"
        },
        "downloads": 0,
        "filename": "craft_ai-1.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "974232dcd7dffcc9ba3b9292b022c012",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 27934,
        "upload_time": "2017-04-13T13:30:16",
        "url": "https://files.pythonhosted.org/packages/8b/c3/001331bfb59c3e23b2d1c1c89947259a081d79b83e359a330c9f0d9d08c3/craft_ai-1.2.1-py2.py3-none-any.whl"
      }
    ],
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0cff4e9ce0e2e599a769e0946162dcfa",
          "sha256": "6b85a5e8e03cf2c9fa3b3cb8ff7c9f2f481a03a181f384c484fbf1c3032d3e14"
        },
        "downloads": 0,
        "filename": "craft_ai-1.2.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0cff4e9ce0e2e599a769e0946162dcfa",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 27996,
        "upload_time": "2017-06-06T16:43:31",
        "url": "https://files.pythonhosted.org/packages/60/84/9ed9542a3fff3eb6f64c66aeac41e04913659aeadd21d5f9741261161875/craft_ai-1.2.3-py2.py3-none-any.whl"
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "445c116e7e52f60782c510b161cab8e6",
          "sha256": "b35f71abff612a1aac618cbd3c8e6f21252cf7a5bcfeda62a7758f69ac05af62"
        },
        "downloads": 0,
        "filename": "craft_ai-1.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "445c116e7e52f60782c510b161cab8e6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 29777,
        "upload_time": "2017-07-10T07:00:04",
        "url": "https://files.pythonhosted.org/packages/e0/6c/faac781add731fb2e49d79773de5cff7ae384995a1ad51c84f88a58a7702/craft_ai-1.3.0-py2.py3-none-any.whl"
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ef6e4e59c2680204b97114dbe07d8284",
          "sha256": "b00b81905a3441a557fa575e3b5d6fef5904c4ea2602d5da9e98a0bbe1ac8af2"
        },
        "downloads": 0,
        "filename": "craft_ai-1.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ef6e4e59c2680204b97114dbe07d8284",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 31696,
        "upload_time": "2017-07-10T08:28:57",
        "url": "https://files.pythonhosted.org/packages/87/16/b69f363b0dfb57cf3dde4db4a395268903cc228776548ac2fc2e9f26fd66/craft_ai-1.3.1-py2.py3-none-any.whl"
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4caab3c08081cbc40799485f5558b124",
          "sha256": "10ba142b21197719d0e73f573587720a6bef05bcc4bbc637364363911ddc35ad"
        },
        "downloads": 0,
        "filename": "craft_ai-1.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4caab3c08081cbc40799485f5558b124",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 33040,
        "upload_time": "2017-07-13T13:19:16",
        "url": "https://files.pythonhosted.org/packages/41/1e/5ee603e676800e442403e3b63b2f92ffdca896a75ad586bda00bf0a32823/craft_ai-1.4.0-py2.py3-none-any.whl"
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "43da7cfeb570943da552ca08a6b5d6de",
          "sha256": "375741417917db4d39792081cf51ad93112997a8f90604698b0314748cbf442b"
        },
        "downloads": 0,
        "filename": "craft_ai-1.4.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43da7cfeb570943da552ca08a6b5d6de",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 33146,
        "upload_time": "2017-07-19T12:33:11",
        "url": "https://files.pythonhosted.org/packages/6a/96/1258f89530308ad01c068e0f31fc3959c40bd956de5c9a237622607fe13d/craft_ai-1.4.1-py2.py3-none-any.whl"
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "55a1e35b91487c2348652d12a57f3a4a",
          "sha256": "75b3e737eb6d82c5ab6d225eba2734a138c733b727e0f046ec6fad7a6813d18a"
        },
        "downloads": 0,
        "filename": "craft_ai-1.5.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55a1e35b91487c2348652d12a57f3a4a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 33345,
        "upload_time": "2017-08-02T10:02:41",
        "url": "https://files.pythonhosted.org/packages/d6/e3/21dae690aa0217d417d59014e200782070a6ee598f03666b2ca46ac001b0/craft_ai-1.5.0-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "55a1e35b91487c2348652d12a57f3a4a",
        "sha256": "75b3e737eb6d82c5ab6d225eba2734a138c733b727e0f046ec6fad7a6813d18a"
      },
      "downloads": 0,
      "filename": "craft_ai-1.5.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "55a1e35b91487c2348652d12a57f3a4a",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 33345,
      "upload_time": "2017-08-02T10:02:41",
      "url": "https://files.pythonhosted.org/packages/d6/e3/21dae690aa0217d417d59014e200782070a6ee598f03666b2ca46ac001b0/craft_ai-1.5.0-py2.py3-none-any.whl"
    }
  ]
}