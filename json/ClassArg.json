{
  "info": {
    "author": "Ian Chen",
    "author_email": "patrickchen1994@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: OS Independent",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "========\nClassArg\n========\n\n.. image:: https://travis-ci.org/PatrickChen83/ClassArg.svg?branch=master\n    :target: https://travis-ci.org/PatrickChen83/ClassArg\n\nClassArg is a library to bridge the gap between command-line interfaces and python classes. This\nproject is inspired by a similar project\n`python-fire <https://github.com/google/python-fire>`_. python-fire is a great project\nand is very handy on developing and debugging. However, there is no good way to generate\nhelp messages, and it would be difficult to provide a traditional, UNIX-style interface\nwhen using python-fire. Also, it is very slow.\n\nAnother great library commonly used, besides the standard `argparse`, is\n`docopt <http://docopt.org/>`_. By typing the help message, one also gets a command-line argument\nparser. However, we often define the app's interface as we develop, and it would be very\nunhandy if we often change the app's interface.\n\nClassArg tries to solve these issues by providing standard template classes,\nso generating help messages and having a conventional command-line interface can be simple\nand intuitive.\n\nInstallation\n------------\n\n.. code-block:: console\n\n    pip install classarg\n\nClassArg requires Python 3.4 or above.\n\nBasic Usage\n-----------\n\nYou should define a callable (that is, a function or a class) and put it into one of the `classarg` template classes.\n\n.. code-block:: python\n\n    import classarg\n\n    def main(model, lr=0.0001, cuda=False):\n        pass\n\n\n    if __name__ == '__main__':\n        classarg.Simple(main)\n\nThen you can invoke this script by typing\n\n.. code-block:: console\n\n    python app.py MODEL [--lr LR] [--cuda]\n\nFor details about each template class, see the `documentation <docs>`_ and the\n`tutorial <docs/tutorial.md>`_.\n\nBenchmark\n---------\n\nThis benchmark runs a simple function and parse command-line arguments with ``argparse``\n, ``docopt``, ``fire``, and ``classarg``. The target function is\n\n.. code-block:: python\n\n    def train(model, lr=0.001, *, cuda=False):\n        pass\n\nTest script is in [tests/benchmark.py](tests/benchmark.py)\n\n.. code-block:: console\n\n    $ python benchmark.py model\n    run_classarg 0.4271279939857777\n    run_docopt 1.5328545999946073\n    run_argparse 2.9145904570177663\n    run_fire 9.55186035297811\n\nContribute\n----------\n\nAny PR, bug report, and feature request are welcome. You can give us feedback on\nour `issue page <https://github.com/PatrickChen83/ClassArg/issues>`_.\n\nLicense\n-------\n\nMIT\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/PatrickChen83/ClassArg",
    "keywords": "command line interface cli python classarg shell tool",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ClassArg",
    "platform": "",
    "project_url": "https://pypi.org/project/ClassArg/",
    "release_url": "https://pypi.org/project/ClassArg/0.1.2/",
    "requires_dist": [],
    "requires_python": ">=3.4",
    "summary": "A library to bridge the gap between the command-line interface and python classes",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9e8eb05aab4a99783d256013ddcb644e",
          "sha256": "a6a8868fb200ad3a0b09a900501e37445117f3c1cb5a17e40e4bb922d618a41b"
        },
        "downloads": 0,
        "filename": "ClassArg-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9e8eb05aab4a99783d256013ddcb644e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 17137,
        "upload_time": "2017-07-08T17:01:10",
        "url": "https://files.pythonhosted.org/packages/28/f0/4ea301d12588bae7db0efa7190b77715d0260d1c9fc3811428209e524b45/ClassArg-0.1.2-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9e8eb05aab4a99783d256013ddcb644e",
        "sha256": "a6a8868fb200ad3a0b09a900501e37445117f3c1cb5a17e40e4bb922d618a41b"
      },
      "downloads": 0,
      "filename": "ClassArg-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9e8eb05aab4a99783d256013ddcb644e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 17137,
      "upload_time": "2017-07-08T17:01:10",
      "url": "https://files.pythonhosted.org/packages/28/f0/4ea301d12588bae7db0efa7190b77715d0260d1c9fc3811428209e524b45/ClassArg-0.1.2-py3-none-any.whl"
    }
  ]
}