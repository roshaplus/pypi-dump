{
  "info": {
    "author": "Ionel Cristian M\u0103rie\u0219",
    "author_email": "contact@ionelmc.ro",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Utilities"
    ],
    "description": "========\nOverview\n========\n\n\n\nTraceback serialization library.\n\n* Free software: BSD license\n\nIt allows you to:\n\n* `Pickle <https://docs.python.org/3/library/pickle.html>`_ tracebacks and raise exceptions\n  with pickled tracebacks in different processes. This allows better error handling when running\n  code over multiple processes (imagine multiprocessing, billiard, futures, celery etc).\n* Create traceback objects from strings (the ``from_string`` method). *No pickling is used*.\n* Serialize tracebacks to/from plain dicts (the ``from_dict`` and ``to_dict`` methods). *No pickling is used*.\n* Raise the tracebacks created from the aforementioned sources.\n\n**Again, note that using the pickle support is completely optional. You are solely responsible for\nsecurity problems should you decide to use the pickle support.**\n\nInstallation\n============\n\n::\n\n    pip install tblib\n\nDocumentation\n=============\n\n.. contents::\n   :local:\n\nPickling tracebacks\n~~~~~~~~~~~~~~~~~~~\n\n**Note**: The traceback objects that come out are stripped of some attributes (like variables). But you'll be able to raise exceptions with\nthose tracebacks or print them - that should cover 99% of the usecases.\n\n::\n\n    >>> from tblib import pickling_support\n    >>> pickling_support.install()\n    >>> import pickle, sys\n    >>> def inner_0():\n    ...     raise Exception('fail')\n    ...\n    >>> def inner_1():\n    ...     inner_0()\n    ...\n    >>> def inner_2():\n    ...     inner_1()\n    ...\n    >>> try:\n    ...     inner_2()\n    ... except:\n    ...     s1 = pickle.dumps(sys.exc_info())\n    ...\n    >>> len(s1) > 1\n    True\n    >>> try:\n    ...     inner_2()\n    ... except:\n    ...     s2 = pickle.dumps(sys.exc_info(), protocol=pickle.HIGHEST_PROTOCOL)\n    ...\n    >>> len(s2) > 1\n    True\n\n    >>> try:\n    ...     import cPickle\n    ... except ImportError:\n    ...     import pickle as cPickle\n    >>> try:\n    ...     inner_2()\n    ... except:\n    ...     s3 = cPickle.dumps(sys.exc_info(), protocol=pickle.HIGHEST_PROTOCOL)\n    ...\n    >>> len(s3) > 1\n    True\n\nUnpickling\n~~~~~~~~~~\n\n::\n\n    >>> pickle.loads(s1)\n    (<...Exception'>, Exception('fail',), <traceback object at ...>)\n\n    >>> pickle.loads(s2)\n    (<...Exception'>, Exception('fail',), <traceback object at ...>)\n\n    >>> pickle.loads(s3)\n    (<...Exception'>, Exception('fail',), <traceback object at ...>)\n\nRaising\n~~~~~~~\n\n::\n\n    >>> from six import reraise\n    >>> reraise(*pickle.loads(s1))\n    Traceback (most recent call last):\n      ...\n      File \"<doctest README.rst[14]>\", line 1, in <module>\n        reraise(*pickle.loads(s2))\n      File \"<doctest README.rst[8]>\", line 2, in <module>\n        inner_2()\n      File \"<doctest README.rst[5]>\", line 2, in inner_2\n        inner_1()\n      File \"<doctest README.rst[4]>\", line 2, in inner_1\n        inner_0()\n      File \"<doctest README.rst[3]>\", line 2, in inner_0\n        raise Exception('fail')\n    Exception: fail\n    >>> reraise(*pickle.loads(s2))\n    Traceback (most recent call last):\n      ...\n      File \"<doctest README.rst[14]>\", line 1, in <module>\n        reraise(*pickle.loads(s2))\n      File \"<doctest README.rst[8]>\", line 2, in <module>\n        inner_2()\n      File \"<doctest README.rst[5]>\", line 2, in inner_2\n        inner_1()\n      File \"<doctest README.rst[4]>\", line 2, in inner_1\n        inner_0()\n      File \"<doctest README.rst[3]>\", line 2, in inner_0\n        raise Exception('fail')\n    Exception: fail\n    >>> reraise(*pickle.loads(s3))\n    Traceback (most recent call last):\n      ...\n      File \"<doctest README.rst[14]>\", line 1, in <module>\n        reraise(*pickle.loads(s2))\n      File \"<doctest README.rst[8]>\", line 2, in <module>\n        inner_2()\n      File \"<doctest README.rst[5]>\", line 2, in inner_2\n        inner_1()\n      File \"<doctest README.rst[4]>\", line 2, in inner_1\n        inner_0()\n      File \"<doctest README.rst[3]>\", line 2, in inner_0\n        raise Exception('fail')\n    Exception: fail\n\nWhat if we have a local stack, does it show correctly ?\n-------------------------------------------------------\n\nYes it does::\n\n    >>> exc_info = pickle.loads(s3)\n    >>> def local_0():\n    ...     reraise(*exc_info)\n    ...\n    >>> def local_1():\n    ...     local_0()\n    ...\n    >>> def local_2():\n    ...     local_1()\n    ...\n    >>> local_2()\n    Traceback (most recent call last):\n      File \"...doctest.py\", line ..., in __run\n        compileflags, 1) in test.globs\n      File \"<doctest README.rst[24]>\", line 1, in <module>\n        local_2()\n      File \"<doctest README.rst[23]>\", line 2, in local_2\n        local_1()\n      File \"<doctest README.rst[22]>\", line 2, in local_1\n        local_0()\n      File \"<doctest README.rst[21]>\", line 2, in local_0\n        reraise(*exc_info)\n      File \"<doctest README.rst[11]>\", line 2, in <module>\n        inner_2()\n      File \"<doctest README.rst[5]>\", line 2, in inner_2\n        inner_1()\n      File \"<doctest README.rst[4]>\", line 2, in inner_1\n        inner_0()\n      File \"<doctest README.rst[3]>\", line 2, in inner_0\n        raise Exception('fail')\n    Exception: fail\n\nIt also supports more contrived scenarios\n-----------------------------------------\n\nLike tracebacks with syntax errors::\n\n    >>> from tblib import Traceback\n    >>> from examples import bad_syntax\n    >>> try:\n    ...     bad_syntax()\n    ... except:\n    ...     et, ev, tb = sys.exc_info()\n    ...     tb = Traceback(tb)\n    ...\n    >>> reraise(et, ev, tb.as_traceback())\n    Traceback (most recent call last):\n      ...\n      File \"<doctest README.rst[58]>\", line 1, in <module>\n        reraise(et, ev, tb.as_traceback())\n      File \"<doctest README.rst[57]>\", line 2, in <module>\n        bad_syntax()\n      File \"...tests...examples.py\", line 18, in bad_syntax\n        import badsyntax\n      File \"...tests...badsyntax.py\", line 5\n        is very bad\n         ^\n    SyntaxError: invalid syntax\n\nOr other import failures::\n\n    >>> from examples import bad_module\n    >>> try:\n    ...     bad_module()\n    ... except:\n    ...     et, ev, tb = sys.exc_info()\n    ...     tb = Traceback(tb)\n    ...\n    >>> reraise(et, ev, tb.as_traceback())\n    Traceback (most recent call last):\n      ...\n      File \"<doctest README.rst[61]>\", line 1, in <module>\n        reraise(et, ev, tb.as_traceback())\n      File \"<doctest README.rst[60]>\", line 2, in <module>\n        bad_module()\n      File \"...tests...examples.py\", line 23, in bad_module\n        import badmodule\n      File \"...tests...badmodule.py\", line 3, in <module>\n        raise Exception(\"boom!\")\n    Exception: boom!\n\nOr a traceback that's caused by exceeding the recursion limit (here we're\nforcing the type and value to have consistency across platforms)::\n\n    >>> def f(): f()\n    >>> try:\n    ...    f()\n    ... except RuntimeError:\n    ...    et, ev, tb = sys.exc_info()\n    ...    tb = Traceback(tb)\n    ...\n    >>> reraise(RuntimeError, RuntimeError(\"maximum recursion depth exceeded\"), tb.as_traceback())\n    Traceback (most recent call last):\n      ...\n      File \"<doctest README.rst[32]>\", line 1, in f\n        def f(): f()\n      File \"<doctest README.rst[32]>\", line 1, in f\n        def f(): f()\n      File \"<doctest README.rst[32]>\", line 1, in f\n        def f(): f()\n      ...\n    RuntimeError: maximum recursion depth exceeded\n\nReference\n~~~~~~~~~\n\ntblib.Traceback\n---------------\n\nIt is used by the ``pickling_support``. You can use it too if you want more flexibility::\n\n    >>> from tblib import Traceback\n    >>> try:\n    ...     inner_2()\n    ... except:\n    ...     et, ev, tb = sys.exc_info()\n    ...     tb = Traceback(tb)\n    ...\n    >>> reraise(et, ev, tb.as_traceback())\n    Traceback (most recent call last):\n      ...\n      File \"<doctest README.rst[21]>\", line 6, in <module>\n        reraise(et, ev, tb.as_traceback())\n      File \"<doctest README.rst[21]>\", line 2, in <module>\n        inner_2()\n      File \"<doctest README.rst[5]>\", line 2, in inner_2\n        inner_1()\n      File \"<doctest README.rst[4]>\", line 2, in inner_1\n        inner_0()\n      File \"<doctest README.rst[3]>\", line 2, in inner_0\n        raise Exception('fail')\n    Exception: fail\n\ntblib.Traceback.to_dict\n```````````````````````\n\nYou can use the ``to_dict`` method and the ``from_dict`` classmethod to\nconvert a Traceback into and from a dictionary serializable by the stdlib\njson.JSONDecoder::\n\n    >>> import json\n    >>> from pprint import pprint\n    >>> try:\n    ...     inner_2()\n    ... except:\n    ...     et, ev, tb = sys.exc_info()\n    ...     tb = Traceback(tb)\n    ...     tb_dict = tb.to_dict()\n    ...     pprint(tb_dict)\n    {'tb_frame': {'f_code': {'co_filename': '<doctest README.rst[...]>',\n                             'co_name': '<module>'},\n                  'f_globals': {'__name__': '__main__'}},\n     'tb_lineno': 2,\n     'tb_next': {'tb_frame': {'f_code': {'co_filename': ...\n                                         'co_name': 'inner_2'},\n                              'f_globals': {'__name__': '__main__'}},\n                 'tb_lineno': 2,\n                 'tb_next': {'tb_frame': {'f_code': {'co_filename': ...\n                                                     'co_name': 'inner_1'},\n                                          'f_globals': {'__name__': '__main__'}},\n                             'tb_lineno': 2,\n                             'tb_next': {'tb_frame': {'f_code': {'co_filename': ...\n                                                                 'co_name': 'inner_0'},\n                                                      'f_globals': {'__name__': '__main__'}},\n                                         'tb_lineno': 2,\n                                         'tb_next': None}}}}\n\ntblib.Traceback.from_dict\n`````````````````````````\n\nBuilding on the previous example::\n\n    >>> tb_json = json.dumps(tb_dict)\n    >>> tb = Traceback.from_dict(json.loads(tb_json))\n    >>> reraise(et, ev, tb.as_traceback())\n    Traceback (most recent call last):\n      ...\n      File \"<doctest README.rst[21]>\", line 6, in <module>\n        reraise(et, ev, tb.as_traceback())\n      File \"<doctest README.rst[21]>\", line 2, in <module>\n        inner_2()\n      File \"<doctest README.rst[5]>\", line 2, in inner_2\n        inner_1()\n      File \"<doctest README.rst[4]>\", line 2, in inner_1\n        inner_0()\n      File \"<doctest README.rst[3]>\", line 2, in inner_0\n        raise Exception('fail')\n    Exception: fail\n\ntblib.Traceback.from_string\n```````````````````````````\n\n::\n\n    >>> tb = Traceback.from_string(\"\"\"\n    ... File \"skipped.py\", line 123, in func_123\n    ... Traceback (most recent call last):\n    ...   File \"tests/examples.py\", line 2, in func_a\n    ...     func_b()\n    ...   File \"tests/examples.py\", line 6, in func_b\n    ...     func_c()\n    ...   File \"tests/examples.py\", line 10, in func_c\n    ...     func_d()\n    ...   File \"tests/examples.py\", line 14, in func_d\n    ... Doesn't: matter\n    ... \"\"\")\n    >>> reraise(et, ev, tb.as_traceback())\n    Traceback (most recent call last):\n      ...\n      File \"<doctest README.rst[42]>\", line 6, in <module>\n        reraise(et, ev, tb.as_traceback())\n      File \"...examples.py\", line 2, in func_a\n        func_b()\n      File \"...examples.py\", line 6, in func_b\n        func_c()\n      File \"...examples.py\", line 10, in func_c\n        func_d()\n      File \"...examples.py\", line 14, in func_d\n        raise Exception(\"Guessing time !\")\n    Exception: fail\n\n\nIf you use the ``strict=False`` option then parsing is a bit more lax::\n\n    >>> tb = Traceback.from_string(\"\"\"\n    ... File \"bogus.py\", line 123, in bogus\n    ... Traceback (most recent call last):\n    ...  File \"tests/examples.py\", line 2, in func_a\n    ...   func_b()\n    ...    File \"tests/examples.py\", line 6, in func_b\n    ...     func_c()\n    ...    File \"tests/examples.py\", line 10, in func_c\n    ...   func_d()\n    ...  File \"tests/examples.py\", line 14, in func_d\n    ... Doesn't: matter\n    ... \"\"\", strict=False)\n    >>> reraise(et, ev, tb.as_traceback())\n    Traceback (most recent call last):\n      ...\n      File \"<doctest README.rst[42]>\", line 6, in <module>\n        reraise(et, ev, tb.as_traceback())\n      File \"bogus.py\", line 123, in bogus\n      File \"...examples.py\", line 2, in func_a\n        func_b()\n      File \"...examples.py\", line 6, in func_b\n        func_c()\n      File \"...examples.py\", line 10, in func_c\n        func_d()\n      File \"...examples.py\", line 14, in func_d\n        raise Exception(\"Guessing time !\")\n    Exception: fail\n\ntblib.decorators.return_error\n-----------------------------\n\n::\n\n    >>> from tblib.decorators import return_error\n    >>> inner_2r = return_error(inner_2)\n    >>> e = inner_2r()\n    >>> e\n    <tblib.decorators.Error object at ...>\n    >>> e.reraise()\n    Traceback (most recent call last):\n      ...\n      File \"<doctest README.rst[26]>\", line 1, in <module>\n        e.reraise()\n      File \"...tblib...decorators.py\", line 19, in reraise\n        reraise(self.exc_type, self.exc_value, self.traceback)\n      File \"...tblib...decorators.py\", line 25, in return_exceptions_wrapper\n        return func(*args, **kwargs)\n      File \"<doctest README.rst[5]>\", line 2, in inner_2\n        inner_1()\n      File \"<doctest README.rst[4]>\", line 2, in inner_1\n        inner_0()\n      File \"<doctest README.rst[3]>\", line 2, in inner_0\n        raise Exception('fail')\n    Exception: fail\n\nHow's this useful ? Imagine you're using multiprocessing like this::\n\n    >>> import traceback\n    >>> from multiprocessing import Pool\n    >>> from examples import func_a\n    >>> if sys.version_info[:2] >= (3, 4):\n    ...     import multiprocessing.pool\n    ...     # Undo the fix for http://bugs.python.org/issue13831 so that we can see the effects of our change.\n    ...     # because Python 3.4 will show the remote traceback (but as a string sadly)\n    ...     multiprocessing.pool.ExceptionWithTraceback = lambda e, t: e\n    >>> pool = Pool()\n    >>> try:\n    ...     for i in pool.map(func_a, range(5)):\n    ...         print(i)\n    ... except:\n    ...     print(traceback.format_exc())\n    ...\n    Traceback (most recent call last):\n      File \"<doctest README.rst[...]>\", line 2, in <module>\n        for i in pool.map(func_a, range(5)):\n      File \"...multiprocessing...pool.py\", line ..., in map\n        ...\n      File \"...multiprocessing...pool.py\", line ..., in get\n        ...\n    Exception: Guessing time !\n    <BLANKLINE>\n    >>> pool.terminate()\n\nNot very useful is it? Let's sort this out::\n\n    >>> from tblib.decorators import apply_with_return_error, Error\n    >>> from itertools import repeat\n    >>> pool = Pool()\n    >>> try:\n    ...     for i in pool.map(apply_with_return_error, zip(repeat(func_a), range(5))):\n    ...         if isinstance(i, Error):\n    ...             i.reraise()\n    ...         else:\n    ...             print(i)\n    ... except:\n    ...     print(traceback.format_exc())\n    ...\n    Traceback (most recent call last):\n      File \"<doctest README.rst[...]>\", line 4, in <module>\n        i.reraise()\n      File \"...tblib...decorators.py\", line ..., in reraise\n        reraise(self.exc_type, self.exc_value, self.traceback)\n      File \"...tblib...decorators.py\", line ..., in return_exceptions_wrapper\n        return func(*args, **kwargs)\n      File \"...tblib...decorators.py\", line ..., in apply_with_return_error\n        return args[0](*args[1:])\n      File \"...examples.py\", line 2, in func_a\n        func_b()\n      File \"...examples.py\", line 6, in func_b\n        func_c()\n      File \"...examples.py\", line 10, in func_c\n        func_d()\n      File \"...examples.py\", line 14, in func_d\n        raise Exception(\"Guessing time !\")\n    Exception: Guessing time !\n    <BLANKLINE>\n    >>> pool.terminate()\n\nMuch better !\n\nWhat if we have a local call stack ?\n````````````````````````````````````\n\n::\n\n    >>> def local_0():\n    ...     pool = Pool()\n    ...     for i in pool.map(apply_with_return_error, zip(repeat(func_a), range(5))):\n    ...         if isinstance(i, Error):\n    ...             i.reraise()\n    ...         else:\n    ...             print(i)\n    ...\n    >>> def local_1():\n    ...     local_0()\n    ...\n    >>> def local_2():\n    ...     local_1()\n    ...\n    >>> try:\n    ...     local_2()\n    ... except:\n    ...     print(traceback.format_exc())\n    Traceback (most recent call last):\n      File \"<doctest README.rst[...]>\", line 2, in <module>\n        local_2()\n      File \"<doctest README.rst[...]>\", line 2, in local_2\n        local_1()\n      File \"<doctest README.rst[...]>\", line 2, in local_1\n        local_0()\n      File \"<doctest README.rst[...]>\", line 5, in local_0\n        i.reraise()\n      File \"...tblib...decorators.py\", line 20, in reraise\n        reraise(self.exc_type, self.exc_value, self.traceback)\n      File \"...tblib...decorators.py\", line 27, in return_exceptions_wrapper\n        return func(*args, **kwargs)\n      File \"...tblib...decorators.py\", line 47, in apply_with_return_error\n        return args[0](*args[1:])\n      File \"...tests...examples.py\", line 2, in func_a\n        func_b()\n      File \"...tests...examples.py\", line 6, in func_b\n        func_c()\n      File \"...tests...examples.py\", line 10, in func_c\n        func_d()\n      File \"...tests...examples.py\", line 14, in func_d\n        raise Exception(\"Guessing time !\")\n    Exception: Guessing time !\n    <BLANKLINE>\n\nOther weird stuff\n`````````````````\n\nClearing traceback works (Python 3.4 and up)::\n\n    >>> tb = Traceback.from_string(\"\"\"\n    ... File \"skipped.py\", line 123, in func_123\n    ... Traceback (most recent call last):\n    ...   File \"tests/examples.py\", line 2, in func_a\n    ...     func_b()\n    ...   File \"tests/examples.py\", line 6, in func_b\n    ...     func_c()\n    ...   File \"tests/examples.py\", line 10, in func_c\n    ...     func_d()\n    ...   File \"tests/examples.py\", line 14, in func_d\n    ... Doesn't: matter\n    ... \"\"\")\n    >>> import traceback, sys\n    >>> if sys.version_info > (3, 4):\n    ...     traceback.clear_frames(tb)\n\nCredits\n=======\n\n* `mitsuhiko/jinja2 <https://github.com/mitsuhiko/jinja2>`_ for figuring a way to create traceback objects.\n\n\nChangelog\n=========\n\n1.3.2 (2017-04-09)\n~~~~~~~~~~~~~~~~~~\n\n* Add support for PyPy3.5-5.7.1-beta. Previously ``AttributeError:\n  'Frame' object has no attribute 'clear'``  could be raised. See PyPy\n  issue `#2532 <https://bitbucket.org/pypy/pypy/issues/2532/pypy3-attributeerror-frame-object-has-no>`_.\n\n1.3.1 (2017-03-27)\n~~~~~~~~~~~~~~~~~~\n\n* Fixed handling for tracebacks due to exceeding the recursion limit.\n  Fixes `#15 <https://github.com/ionelmc/python-tblib/issues/15>`_.\n\n1.3.0 (2016-03-08)\n~~~~~~~~~~~~~~~~~~\n\n* Added ``Traceback.from_string``.\n\n1.2.0 (2015-12-18)\n~~~~~~~~~~~~~~~~~~\n\n* Fixed handling for tracebacks from generators and other internal improvements\n  and optimizations. Contributed by DRayX in `#10 <https://github.com/ionelmc/python-tblib/issues/10>`_\n  and `#11 <https://github.com/ionelmc/python-tblib/pull/11>`_.\n\n1.1.0 (2015-07-27)\n~~~~~~~~~~~~~~~~~~\n\n* Added support for Python 2.6. Contributed by Arcadiy Ivanov in\n  `#8 <https://github.com/ionelmc/python-tblib/pull/8>`_.\n\n1.0.0 (2015-03-30)\n~~~~~~~~~~~~~~~~~~\n\n* Added ``to_dict`` method and ``from_dict`` classmethod on Tracebacks.\n  Contributed by beckjake in `#5 <https://github.com/ionelmc/python-tblib/pull/5>`_.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ionelmc/python-tblib",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tblib",
    "platform": "",
    "project_url": "https://pypi.org/project/tblib/",
    "release_url": "https://pypi.org/project/tblib/1.3.2/",
    "requires_python": "",
    "summary": "Traceback serialization library.",
    "version": "1.3.2"
  },
  "releases": {
    "0.0.1": [],
    "0.1": [],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "130cbfa587893c91ba11ca04da7d0213",
          "sha256": "9160a254e435918fa47323a298ee08e542e11f4afa6e329e9c2269b161d9f6f7"
        },
        "downloads": 4255,
        "filename": "tblib-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "130cbfa587893c91ba11ca04da7d0213",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6914,
        "upload_time": "2013-12-31T01:46:19",
        "url": "https://files.pythonhosted.org/packages/97/19/5daea5233c686b75019a70cf2625e1e768e822d95ae4e9f7d9179dd2d53e/tblib-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f926650cc4425b9f23aaf249abf91fd9",
          "sha256": "2bae3178b25399703f738d0f01a7d4423cba7585a95088c89a3187e57160a56b"
        },
        "downloads": 33063,
        "filename": "tblib-0.2.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "f926650cc4425b9f23aaf249abf91fd9",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 9348,
        "upload_time": "2015-01-12T20:38:18",
        "url": "https://files.pythonhosted.org/packages/c7/bc/4447c3aa980a3422a77e6e35c7f8091a91c1d4d9263855b37d13431a24b5/tblib-0.2.0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "60468d285d9b39992310e2a00fdde54c",
          "sha256": "244b54395a51af8692ada7d22979fdf5905ca9e68ac9a621ae9cc022fa623ce6"
        },
        "downloads": 1621,
        "filename": "tblib-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "60468d285d9b39992310e2a00fdde54c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8573,
        "upload_time": "2015-01-12T20:38:15",
        "url": "https://files.pythonhosted.org/packages/e1/b1/7b7b6ffec022d511439b745db25088061db21fe2c34bec4088f7ecfe8477/tblib-0.2.0.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cda015f51560034e08e927795daeee55",
          "sha256": "f110085ae68b46fecefc37086a64d01f5f2dc2145df5cf6d0361434d21464401"
        },
        "downloads": 908,
        "filename": "tblib-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cda015f51560034e08e927795daeee55",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 9997,
        "upload_time": "2015-03-30T23:06:31",
        "url": "https://files.pythonhosted.org/packages/c9/b8/3bc9cd8c43b473fa7c866421aee6a5a395709b7a2a5cf10fe60305af2a84/tblib-1.0.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "53f5e3a9bd1710ffdb41dadd757cee24",
          "sha256": "6f8ca8759e41098a2841b7473ea5e8d441365321370070d31ccd845bc588eb40"
        },
        "downloads": 957,
        "filename": "tblib-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "53f5e3a9bd1710ffdb41dadd757cee24",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10899,
        "upload_time": "2015-03-30T23:06:34",
        "url": "https://files.pythonhosted.org/packages/1d/29/dfc50ec7c0cbfc9e487177f2d9dd7c352e2b36b1d80a58c5861b77698ef8/tblib-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e9535bc45ce387b59ac3c45e144e1d41",
          "sha256": "ae5904b924033112ccd987f742237eaeebd88282b50c4ad0818bef6b7643c9e2"
        },
        "downloads": 1838,
        "filename": "tblib-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9535bc45ce387b59ac3c45e144e1d41",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 10601,
        "upload_time": "2015-03-30T23:34:59",
        "url": "https://files.pythonhosted.org/packages/8c/f8/7911dd1d33316bc537a5824b1bebdc0be28b9a0254a29890776f5bcfd62e/tblib-1.0.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c65af5d1b1405243b7e4177114da465a",
          "sha256": "a86cbbec76b7aaa54b9f8dd0c3274ad8231f47f86ab39b9a3e637481f8afdaf3"
        },
        "downloads": 3891,
        "filename": "tblib-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c65af5d1b1405243b7e4177114da465a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11679,
        "upload_time": "2015-03-30T23:35:03",
        "url": "https://files.pythonhosted.org/packages/57/6d/4b9c31205dd7f9f9cbd6857841480bedecd73a3289acc32aa58e2ee7f696/tblib-1.0.1.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2bd576c10bf96cf02034802037480280",
          "sha256": "5dd8e55704217dde031728d5a2d4056eb0ef46ce99493845ee6dbed0fffb64a6"
        },
        "downloads": 7177,
        "filename": "tblib-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2bd576c10bf96cf02034802037480280",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 10586,
        "upload_time": "2015-07-27T10:24:33",
        "url": "https://files.pythonhosted.org/packages/c3/72/a8b91527a74aa256553a110f5e8361b728af638efe94abbdca6c958b204f/tblib-1.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a5131b5b58a5495130e6ab1f8c305832",
          "sha256": "5ec03b6b79403dc6d975290363ae9dfcf09e38d545357ad2716101701bea93e6"
        },
        "downloads": 11029,
        "filename": "tblib-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a5131b5b58a5495130e6ab1f8c305832",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11689,
        "upload_time": "2015-07-27T10:24:37",
        "url": "https://files.pythonhosted.org/packages/29/71/daf823c9792d1f55d0da4e0432cc7758af8548c5357c22bf8c3f5cd09437/tblib-1.1.0.tar.gz"
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d139ce4ac5be3cfef7493cbdfc25ed6f",
          "sha256": "c635fa39d7c436be2cfeb6891906b6e0eda01038f87a8341b998fa4b37aca246"
        },
        "downloads": 6925,
        "filename": "tblib-1.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d139ce4ac5be3cfef7493cbdfc25ed6f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 12015,
        "upload_time": "2015-12-18T05:41:18",
        "url": "https://files.pythonhosted.org/packages/a2/41/b180d2a1505ae8a5e9dfbd1a7b8c5c8c77d5802ff7334a96e383896dd846/tblib-1.2.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "804aed92abafcffa7439b0ce4e5dbc95",
          "sha256": "80bb2d8782cc6f4b898e6455ac51abca3529f20205e5bcf34ae2ebf3e10df613"
        },
        "downloads": 1587,
        "filename": "tblib-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "804aed92abafcffa7439b0ce4e5dbc95",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21801,
        "upload_time": "2015-12-18T05:41:23",
        "url": "https://files.pythonhosted.org/packages/a1/90/ebfeabeefb53fd96e61b9f088eed7f86e26378d1940f21372ffe2fa978c7/tblib-1.2.0.tar.gz"
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b90a8ddb338b7c240ebc0879e9b1a603",
          "sha256": "42385bbba5967051ba689b38d3d16acb4cac66d0a076f6f1ec827e308ca6b8be"
        },
        "downloads": 18406,
        "filename": "tblib-1.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b90a8ddb338b7c240ebc0879e9b1a603",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 12035,
        "upload_time": "2016-03-08T18:07:41",
        "url": "https://files.pythonhosted.org/packages/32/1a/4011e2ea21918bfd353f0dc4e5cb2bf6c5e1350a42e6d75fca1da8b7ec9b/tblib-1.3.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0dbc13ffc624aa1603ab125404fa7b7d",
          "sha256": "d1078592e594a2d73d2d383aa6fe551cc646cd986a092cc9824724e5a6832a0a"
        },
        "downloads": 5449,
        "filename": "tblib-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0dbc13ffc624aa1603ab125404fa7b7d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25295,
        "upload_time": "2016-03-08T18:07:48",
        "url": "https://files.pythonhosted.org/packages/52/aa/aefcbf6b2976fc91d5c32c4014f40e2202654279654cc509b613d7cf5568/tblib-1.3.0.tar.gz"
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7d85c754126b8f83a84c3ca3f34c1163",
          "sha256": "4f367132adb66d4729b0451368bbd3dff08fadeda36da60757dd04c5afe32dd5"
        },
        "downloads": 2046,
        "filename": "tblib-1.3.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7d85c754126b8f83a84c3ca3f34c1163",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 12946,
        "upload_time": "2017-03-27T11:46:21",
        "url": "https://files.pythonhosted.org/packages/f0/05/8f00888eb387adfe17df6eec9f885b69b5b42dafa6f3cedc7f721c1fb31f/tblib-1.3.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4abe56fcd915f3d8d90be033465d8e35",
          "sha256": "180372043269a714ea5d6b86461da07b62fce68f93d02a6276bec5e9ad531caf"
        },
        "downloads": 239,
        "filename": "tblib-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4abe56fcd915f3d8d90be033465d8e35",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25038,
        "upload_time": "2017-03-27T11:46:23",
        "url": "https://files.pythonhosted.org/packages/a0/7b/c96c10fe290187b46833a2307e233ecbe27f3e34f1ec6c32d42ce021ca8b/tblib-1.3.1.tar.gz"
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "82beba34d60e38a9a2039fffe8ccc9d7",
          "sha256": "9bae4b8c44b06af0e114bfc4d5f6aa3eafd2119af5a4dcab34f51f1665f16c59"
        },
        "downloads": 0,
        "filename": "tblib-1.3.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "82beba34d60e38a9a2039fffe8ccc9d7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 13456,
        "upload_time": "2017-04-09T20:12:24",
        "url": "https://files.pythonhosted.org/packages/4a/82/1b9fba6e93629a8557f9784cd8f1ae063c8762c26446367a6764edd328ce/tblib-1.3.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a0b3a444515b2afcdafab83104cbafec",
          "sha256": "436e4200e63d92316551179dc540906652878df4ff39b43db30fcf6400444fe7"
        },
        "downloads": 0,
        "filename": "tblib-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a0b3a444515b2afcdafab83104cbafec",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26958,
        "upload_time": "2017-04-09T20:12:25",
        "url": "https://files.pythonhosted.org/packages/ec/c4/8c651f3240a73c28a218194f3d527eb2be5a173d08501060cdee84ade33f/tblib-1.3.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "82beba34d60e38a9a2039fffe8ccc9d7",
        "sha256": "9bae4b8c44b06af0e114bfc4d5f6aa3eafd2119af5a4dcab34f51f1665f16c59"
      },
      "downloads": 0,
      "filename": "tblib-1.3.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "82beba34d60e38a9a2039fffe8ccc9d7",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 13456,
      "upload_time": "2017-04-09T20:12:24",
      "url": "https://files.pythonhosted.org/packages/4a/82/1b9fba6e93629a8557f9784cd8f1ae063c8762c26446367a6764edd328ce/tblib-1.3.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "a0b3a444515b2afcdafab83104cbafec",
        "sha256": "436e4200e63d92316551179dc540906652878df4ff39b43db30fcf6400444fe7"
      },
      "downloads": 0,
      "filename": "tblib-1.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "a0b3a444515b2afcdafab83104cbafec",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 26958,
      "upload_time": "2017-04-09T20:12:25",
      "url": "https://files.pythonhosted.org/packages/ec/c4/8c651f3240a73c28a218194f3d527eb2be5a173d08501060cdee84ade33f/tblib-1.3.2.tar.gz"
    }
  ]
}