{
  "info": {
    "author": "Blake Huber",
    "author_email": "blakeca00@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "README : stsAval\n================\n\n--------------\n\nPurpose\n-------\n\n**stsAval** (pronounced \"s-t-s Aay-val\") -- Spanish for \"sts *trustee*\".\n\n| **stsAval** is a python3 library that requests and manages temporary\n  credentials from `Amazon's Security Token Service\n  (STS) <http://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html>`__\n  on your behalf.\n| stsAval generates temporary credentials against roles that reside in\n  any number of AWS accounts.\n\n| A primary use case for the **stsAval** library is generation of\n  temporary access credentials for automation tools\n| to authenticate to Amazon Web Services. Such automation tooling may be\n  running within AWS; however, commonly\n| are running in environments external to AWS such as a local machine.\n\n| **stsAval** manages temporary credentials generates credentials in\n  memory for applications that\n| need access to iam roles at AWS. If temporary credentials are needed\n  for extended periods (> 1 hour),\n| **stsAval** will automatically renew sts credentials before\n  expiration.\n\n| Prior to reading the Use Cases & Examples section of this README, you\n  may find it helpful to review an overview of\n| **stsAval**'s dual credential formats in the `Credential Format\n  Overview <./docs/markdown/credential-format-overview.md>`__.\n\nSee `v0.3.6 Release Notes <./notes/release_v0.3.6.md>`__\n\nPrevious Releases\n~~~~~~~~~~~~~~~~~\n\n-  `v0.2.1 Release Notes <./notes/release_v0.2.1.md>`__\n-  `v0.1.8 Release Notes <./notes/release_v0.1.8.md>`__\n\n--------------\n\nDeployment Owner/ Author\n------------------------\n\n| Blake Huber\n| Slack: [@blake](https://mpcaws.slack.com/team/blake)\n| BitBucket: [@blake](blakeca00[AT]gmail.com)\n\n--------------\n\nDependencies\n------------\n\n-  Python3 via one of the following:\n\n   -  Python 3.5.X+\n   -  Python 3.6.X+\n\n-  Installation of Amazon CLI tools (awscli, see Installation section)\n-  Linux Operating System, one of the following:\n\n   -  Redhat Enterprise Linux v7.X (preferred)\n   -  Ubuntu 14.04, (Ubuntu 16.04 preferred)\n   -  Amazon Linux (2017.03+ )\n\n--------------\n\nInstallation - Redhat / Ubuntu\n------------------------------\n\n-  Install `awscli <https://github.com/aws/aws-cli/>`__\n\n   Detailed instructions can be found in the README located at:\n   https://github.com/aws/aws-cli/\n\n   The easiest method, provided your platform supports it, is via\n   `pip <http://www.pip-installer.org/en/latest>`__.\n\n.. code:: bash\n\n        $ sudo pip install awscli\n\n-  If you have the aws-cli installed and want to upgrade to the latest\n   version you can run:\n\n.. code:: bash\n\n        $ sudo pip install --upgrade awscli\n\n-  Installation via pip\n\n.. code:: bash\n\n        $ sudo -H pip3 install stsAval\n\n-  Setup and Configuration\n\n.. code:: bash\n\n        $ cd /home/user/<stsAval directory>/\n        $ python3 ...TBD\n\n--------------\n\nUse Cases & Examples\n====================\n\n--------------\n\nGenerate Session Token (default IAM User)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  ``Default`` profile in local awscli config. Default user has\n   permissions to assume roles for which **stsAval**\n   will generate credentials\n-  Token with default lifetime (60 minutes)\n-  Cli *not* protected with MFA (Multi-Factor Authentication, 6 digit\n   code)\n\n.. code:: python\n\n\n        from stsAval import StsCore\n\n        >>> sts_object = StsCore()\n        >>> token = sts_object.generate_session_token()\n        >>> print(token)\n        <stsAval.vault.STSToken at 0x7f05365e3ef0>\n\n        # token attributes\n\n        >>> print(token.start)\n        datetime.datetime(2017, 8, 25, 20, 4, 37, tzinfo=tzutc()\n\n        >>> print(token.end)\n        datetime.datetime(2017, 8, 25, 21, 4, 36, tzinfo=tzutc())\n\n        >>> print(token.access_key)\n        'ASIAI6QV2U3JJAYRHCJQ'\n\n        >>> print(token.secret_key)\n        'MdjPAkXTHl12k64LSjmgTWMsmnHk4cJfeMHdXMLA'\n\n        >>> print(token.session)\n        'FQoDYXdzEDMaDHAaP2wi/+77fNJJryKvAa20AqGxoQlcRtf8RFLa5Mps9zK9V5SM3Q7+M3h9iNbcxfaZsUnTzFvFwjVZjYKk...zQU='\n\n        >>> print(token.boto)    # native boto generated format\n\n    {\n        'AccessKeyId': 'ASIAI6QV2U3JJAYRHCJQ',\n        'StartTime': datetime.datetime(2017, 8, 25, 20, 4, 37, tzinfo=tzutc()),\n        'Expiration': datetime.datetime(2017, 8, 25, 21, 4, 36, tzinfo=tzutc()),\n        'SecretAccessKey': 'MdjPAkXTHl12k64LSjmgTWMsmnHk4cJfeMHdXMLA',\n        'SessionToken': 'FQoDYXdzEDMaDHAaP2wi/+77fNJJryKvAa20AqGxoQlcRtf8RFLa5Mps9zK9V5SM3Q7+M3h9iNbcxfa...zQU='\n    }\n\nGenerate Session Token (named IAM User)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Named IAM user profile in local awscli config. User has permissions\n   to assume roles for which **stsAval**\n   will generate credentials\n-  MFA protected cli access configuration\n-  STS Token with default lifetime (60 minutes)\n\n.. code:: python\n\n\n        from stsAval import StsCore\n\n        >>> sts_object = StsCore(profile_name='BobSmith')\n        >>> code = '123456'\n        >>> token = sts_object.generate_session_token(mfa_code=code)\n\n        >>> print(token.boto)\n\n    {\n        'AccessKeyId': 'ASIAI6QV2U3JJAYRHCJQ',\n        'StartTime': datetime.datetime(2017, 8, 25, 20, 4, 37, tzinfo=tzutc()),\n        'Expiration': datetime.datetime(2017, 8, 25, 21, 4, 36, tzinfo=tzutc()),\n        'SecretAccessKey': 'MdjPAkXTHl12k64LSjmgTWMsmnHk4cJfeMHdXMLA',\n        'SessionToken': 'FQoDYXdzEDMaDHAaP2wi/+77fNJJryKvAdVZjYKk...zQU='\n    }\n\n--------------\n\nGenerate Credentials (default lifetime)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  generate STS temporary credentials, default lifetime (60 minutes)\n-  Credential format set to 'vault' (default stsAval format)\n-  **stsAval** supports 2 credential formats. See the `Credential Format\n   Overview <./docs/markdown/credential-format-overview.md>`__.\n\n.. code:: python\n\n\n        >>> sts_object = StsCore(profile_name='BobSmith')\n        >>> token = sts_object.generate_session_token()\n        >>> profile_list = [\n                'DynamoDBRole-dev', 'CodeDeployRole-qa', 'S3ReadOnlyRole-prod'\n            ]\n\n                # where profile_list = list of profile names from local awscli config\n\n        >>> sts_object.generate_credentials(profile_list)\n\n        >>> print(credentials)     \n\n    {\n        'sts-DynamoDBRole-dev': <stsAval.vault.STSingleSet at 0x7fee0ae05c88>,\n        'sts-CodeDeployRole-qa': <stsAval.vault.STSingleSet at 0x7fee0ae05f60>,\n        'sts-S3ReadOnlyRole-prod': <stsAval.vault.STSingleSet at 0x7fee0ae05fd0>\n    }\n\n--------------\n\nGenerate Extended Use Credentials (Auto-refresh)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Named IAM user profile in local awscli config. User has permissions\n   to assume roles for which stsAval\n   will generate credentials\n-  MFA protected cli configuration\n-  Credential format set to 'boto' (native Amazon STS format)\n-  Credentials auto-refreshed for total 5 hour valid lifetime without\n   MFA auth\n\n.. code:: python\n\n\n        from stsAval import StsCore\n\n        >>> sts_object = StsCore(profile_name='BobSmith', format='boto')\n        >>> code = '123456'\n        >>> token = sts_object.generate_session_token(lifetime=5, mfa_code=code)  \n        >>> profile_list = [\n                'DynamoDBRole-dev', 'CodeDeployRole-qa', 'S3ReadOnlyRole-prod'\n            ]\n\n                # where profile_list = list of profile names from local awscli config\n\n        >>> sts_object.generate_credentials(profile_list)\n        >>> credentials = sts_object.current_credentials\n\nRefresh of Credentials\n~~~~~~~~~~~~~~~~~~~~~~\n\n-  STS temporary credentials will regenerate once per hour, prior to\n   expiration\n-  Refresh of credentials is non-blocking (via threading)\n-  Thread management is via event states; threads are terminated as soon\n   as their associated\n   session token expires or they receive a halt event.\n-  No hanging threads. Any threads which are alive when new credentials\n   generated are safely terminated\n   before generating a new set.\n\n.. code:: python\n\n\n        >>> print(credentials())         # boto format credentials\n\n    {\n      'sts-DynamoDBRole-dev': {        \n          'StartTime': datetime.datetime(2017, 10, 1, 14, 17, 45, 652218, tzinfo=<UTC>)},\n          'Expiration': datetime.datetime(2017, 10, 1, 15, 17, 45, tzinfo=tzutc()),\n          'AccessKeyId': 'ASIAJRW7F2BAVN4J34LQ',\n          'SecretAccessKey': 'P8EjwTUKL4hil4Y7Ouo9OkFzQ1IxGikbhIjMP5uN',\n          'SessionToken': 'FQoDYXdzEDMaDCpxZzDdwWGok/ylQiLcAdlrHCkxP+kvQOes3mnQ0r5GXt...'\n      },\n      'sts-CodeDeployRole-qa': {\n          'StartTime': datetime.datetime(2017, 10, 1, 14, 17, 45, 652218, tzinfo=<UTC>)},\n          'Expiration': datetime.datetime(2017, 10, 1, 15, 17, 45, tzinfo=tzutc()),\n          'AccessKeyId': 'ASIAIOOOKUYFICAPC6TQ',\n          'SecretAccessKey': '3Q+N4UMpbmW7OrvY2mfgbjXxr/qt1L4XqmO+Njpq',\n          'SessionToken': 'FQoDYXdzEDMaDL/sJkeAF28UsxE/iyLUAbvBrCUoAkP/eqeS...'\n      },\n      'sts-S3ReadOnlyRole-prod': {        \n          'StartTime': datetime.datetime(2017, 10, 1, 14, 17, 45, 652218, tzinfo=<UTC>)}}\n          'Expiration': datetime.datetime(2017, 10, 1, 15, 17, 46, tzinfo=tzutc()),\n          'AccessKeyId': 'ASIAJPRTS4IXPYGPLKZA',\n          'SecretAccessKey': 'EMAfJUz5zMNOyjKl7U2IWpJ0GCtWCos0squOE0wz',\n          'SessionToken': 'FQoDYXdzEDMaDO0ekTXJi4+IRWV1ESLXAe1ZfOpmGcS9hbIr...'\n      }\n    }\n\n    # stdout log stream\n    /stsaval/core.py - 0.2.0 - [INFO]: _validate: Valid account profile names: ['DynamoDBRole-dev', 'CodeDeployRole-qa', 'S3ReadOnlyRole-prod']\n    /stsaval/async.py - 0.2.0 - [INFO]: executing event: <bound method StsCore.generate_credentials of <stsaval.core.StsCore object at 0x7f91c9df02e8>>\n    /stsaval/async.py - 0.2.0 - [INFO]: thread identifier: Thread-150\n    /stsaval/async.py - 0.2.0 - [INFO]: thread Alive status is: True\n    /stsaval/async.py - 0.2.0 - [INFO]: completed 1 out of 5 total executions\n    /stsaval/async.py - 0.2.0 - [INFO]: remaining in cycle: 4 hours, 59 minutes\n\n\n      >>> print(credentials())\n\n    {\n      'sts-DynamoDBRole-dev': {        \n          'StartTime': datetime.datetime(2017, 10, 1, 15, 17, 45, 652218, tzinfo=<UTC>)},\n          'Expiration': datetime.datetime(2017, 10, 1, 16, 17, 45, tzinfo=tzutc()),\n          'AccessKeyId': 'ASIAJRW7F2BAVN4J34LQ',\n          'SecretAccessKey': 'P8EjwTUKL4hil4Y7Ouo9OkFzQ1IxGikbhIjMP5uN',\n          'SessionToken': 'FQoDYXdzEDMaDCpxZzDdwWGok/ylQiLcAdlrHCkxP+kvQOes3mnQ0r5GXt...'\n      },\n      'sts-CodeDeployRole-qa': {\n          'StartTime': datetime.datetime(2017, 10, 1, 15, 17, 45, 652218, tzinfo=<UTC>)},\n          'Expiration': datetime.datetime(2017, 10, 1, 16, 17, 45, tzinfo=tzutc()),\n          'AccessKeyId': 'ASIAIOOOKUYFICAPC6TQ',\n          'SecretAccessKey': '3Q+N4UMpbmW7OrvY2mfgbjXxr/qt1L4XqmO+Njpq',\n          'SessionToken': 'FQoDYXdzEDMaDL/sJkeAF28UsxE/iyLUAbvBrCUoAkP/eqeS...'\n      },\n      'sts-S3ReadOnlyRole-prod': {        \n          'StartTime': datetime.datetime(2017, 10, 1, 15, 17, 45, 652218, tzinfo=<UTC>)}}\n          'Expiration': datetime.datetime(2017, 10, 1, 16, 17, 46, tzinfo=tzutc()),\n          'AccessKeyId': 'ASIAJPRTS4IXPYGPLKZA',\n          'SecretAccessKey': 'EMAfJUz5zMNOyjKl7U2IWpJ0GCtWCos0squOE0wz',\n          'SessionToken': 'FQoDYXdzEDMaDO0ekTXJi4+IRWV1ESLXAe1ZfOpmGcS9hbIr...'\n      }\n    }\n\n    # stdout log stream\n    /stsaval/core.py - 0.2.0 - [INFO]: _validate: Valid account profile names: ['DynamoDBRole-dev', 'CodeDeployRole-qa', 'S3ReadOnlyRole-prod']\n    /stsaval/async.py - 0.2.0 - [INFO]: thread identifier: Thread-150\n    /stsaval/async.py - 0.2.0 - [INFO]: thread Alive status is: True\n    /stsaval/async.py - 0.2.0 - [INFO]: completed 2 out of 5 total executions\n    /stsaval/async.py - 0.2.0 - [INFO]: remaining in cycle: 3 hours, 59 minutes\n\n--------------\n\nNon-default IAM Role credentials filename or location\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n| **Use-Case**: When you wish to use role credentials file not currently\n  part of the awscli,\n| you can provide a custom location to stsAval as a parameter\n\n-  Initialization\n\n.. code:: python\n\n\n        import stsAval\n\n        >>> sts_object = stsAval.StsCore()\n        >>> credentials_file = '~/myAccount/role_credentials'   # awscli credentials file, located in ~/.aws\n\n        >>> sts_object.refactor(credentials_file)\n        >>> sts_object.profiles\n\n-  Output\n\n.. code:: json\n\n\n    {\n        \"acme-db-dev\": {\n            \"role_arn\": \"arn:aws:iam::236600111358:role/AcmeDEV\",\n            \"mfa_serial\": \"arn:aws:iam::3788881165911:mfa/BillCaster\",\n            \"source_profile\": \"william-caster\"\n        },\n        \"acme-apps-dev\": {\n            \"role_arn\": \"arn:aws:iam::123660943358:role/AcmeDEV\",\n            \"mfa_serial\": \"arn:aws:iam::3788881165911:mfa/BillCaster\",\n            \"source_profile\": \"william-caster\"\n        },\n        \"acme-apps-qa\": {\n            \"role_arn\": \"arn:aws:iam::430864833800:role/AcmeAdmin\",\n            \"mfa_serial\": \"arn:aws:iam::3788881165911:mfa/BillCaster\",\n            \"source_profile\": \"william-caster\"\n        },\n        \"acme-prod08\": {\n            \"role_arn\": \"arn:aws:iam::798623437252:role/EC2RORole\",\n            \"mfa_serial\": \"arn:aws:iam::3788881165911:mfa/BillCaster\",\n            \"source_profile\": \"william-caster\"\n        },\n        \"acme-prod09\": {\n            \"role_arn\": \"arn:aws:iam::123660943358:role/S3Role\",\n            \"mfa_serial\": \"arn:aws:iam::3788881165911:mfa/BillCaster\",\n            \"source_profile\": \"william-caster\"\n        }\n    }\n\n--------------\n\nFAQ\n---\n\nsee `Frequently Asked Questions <./FAQ.md>`__\n\n--------------\n\nEnhancement Roadmap\n-------------------\n\nfor a complete list of enhancements logged against the stsAval project,\nsee the `list of stsAval\nissues <https://bitbucket.org/blakeca00/stsaval/issues?status=new&status=open>`__.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/blakeca00/stsaval",
    "keywords": "iam role credentials",
    "license": "GPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "stsAval",
    "platform": "",
    "project_url": "https://pypi.org/project/stsAval/",
    "release_url": "https://pypi.org/project/stsAval/0.3.6/",
    "requires_dist": [
      "pytz (>=2017.1)",
      "botocore (>=1.6.8)",
      "boto3 (>=1.4.6)",
      "awscli (>=1.11.100)"
    ],
    "requires_python": ">=3.5, <4",
    "summary": "Library for bulk generation of Amazon STS temporary credentials",
    "version": "0.3.6"
  },
  "releases": {
    "0.3.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ac5a0d310590dc2ff195c02d34bf73d4",
          "sha256": "bcf84eaec06d0e2cab322475d960d6d8b41ab2376367f8d224244ce1e9643b77"
        },
        "downloads": -1,
        "filename": "stsAval-0.3.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ac5a0d310590dc2ff195c02d34bf73d4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 24755,
        "upload_time": "2017-10-23T11:04:25",
        "url": "https://files.pythonhosted.org/packages/80/21/3ded20e02dbb8832ab66dd56d5a447f845f2cf79c1efb3dd8b7974b75b60/stsAval-0.3.6-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "dea71cc6b03121b1a6a352e23f5d6027",
          "sha256": "2fb4141204e531294da9670e29e122eccdbe6a91b00b4a3df9bfedda22c5e7f3"
        },
        "downloads": -1,
        "filename": "stsAval-0.3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "dea71cc6b03121b1a6a352e23f5d6027",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38289,
        "upload_time": "2017-10-23T11:04:26",
        "url": "https://files.pythonhosted.org/packages/3a/af/b92b423f292cbd91271837bcb3de2b6434f4e7f7304f4d7035b925455453/stsAval-0.3.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ac5a0d310590dc2ff195c02d34bf73d4",
        "sha256": "bcf84eaec06d0e2cab322475d960d6d8b41ab2376367f8d224244ce1e9643b77"
      },
      "downloads": -1,
      "filename": "stsAval-0.3.6-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ac5a0d310590dc2ff195c02d34bf73d4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 24755,
      "upload_time": "2017-10-23T11:04:25",
      "url": "https://files.pythonhosted.org/packages/80/21/3ded20e02dbb8832ab66dd56d5a447f845f2cf79c1efb3dd8b7974b75b60/stsAval-0.3.6-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "dea71cc6b03121b1a6a352e23f5d6027",
        "sha256": "2fb4141204e531294da9670e29e122eccdbe6a91b00b4a3df9bfedda22c5e7f3"
      },
      "downloads": -1,
      "filename": "stsAval-0.3.6.tar.gz",
      "has_sig": false,
      "md5_digest": "dea71cc6b03121b1a6a352e23f5d6027",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 38289,
      "upload_time": "2017-10-23T11:04:26",
      "url": "https://files.pythonhosted.org/packages/3a/af/b92b423f292cbd91271837bcb3de2b6434f4e7f7304f4d7035b925455453/stsAval-0.3.6.tar.gz"
    }
  ]
}