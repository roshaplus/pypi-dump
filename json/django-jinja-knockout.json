{
  "info": {
    "author": "Dmitriy Sintsov",
    "author_email": "questpc256@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "=====================\r\ndjango-jinja-knockout\r\n=====================\r\n\r\n.. _celery: http://www.celeryproject.org/\r\n.. _Knockout.js: http://knockoutjs.com/\r\n.. _Jinja2: http://jinja.pocoo.org/docs/dev/\r\n.. _Bootstrap 3: http://getbootstrap.com/\r\n.. _django-jinja-knockout python localization: https://poeditor.com/join/project/9hqQrFEdDM\r\n.. _django-jinja-knockout javascript localization: https://poeditor.com/join/project/049HWzP3eb\r\n.. _sample application: https://github.com/Dmitri-Sintsov/djk-sample\r\n.. _prefetch_related(): https://docs.djangoproject.com/en/dev/ref/models/querysets/#django.db.models.Prefetch\r\n.. _underscore.js templates: http://django-jinja-knockout.readthedocs.io/en/latest/quickstart.html#underscore-js-templates\r\n\r\n.. image:: https://badge.fury.io/py/django-jinja-knockout.png\r\n   :alt: PyPI package\r\n   :target: https://badge.fury.io/py/django-jinja-knockout\r\n\r\n.. image:: https://circleci.com/gh/Dmitri-Sintsov/django-jinja-knockout.svg?style=shield\r\n    :target: https://circleci.com/gh/Dmitri-Sintsov/django-jinja-knockout\r\n\r\n.. image:: https://img.shields.io/travis/Dmitri-Sintsov/django-jinja-knockout.svg?style=flat\r\n    :target: https://travis-ci.org/Dmitri-Sintsov/django-jinja-knockout\r\n\r\n.. image:: http://www.icoph.org/img/ic-youtube.png\r\n    :alt: Watch selenium tests recorded videos.\r\n    :target: https://www.youtube.com/channel/UCZTrByxVSXdyW0z3e3qjTsQ\r\n\r\n.. image:: https://badges.gitter.im/django-jinja-knockout/Lobby.svg\r\n   :alt: Join the chat at https://gitter.im/django-jinja-knockout/Lobby\r\n   :target: https://gitter.im/django-jinja-knockout/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge\r\n\r\nScreenshot of `sample application`_:\r\n\r\n.. image:: https://raw.githubusercontent.com/wiki/Dmitri-Sintsov/djk-sample/djk_edit_inline.png\r\n   :width: 740px\r\n\r\nMore screenshots with descriptions are available at: https://github.com/Dmitri-Sintsov/djk-sample/wiki\r\n\r\nDocumentation (in development): https://django-jinja-knockout.readthedocs.org/\r\n\r\nPlease contribute to the localization of the project:\r\n\r\n* `django-jinja-knockout python localization`_\r\n* `django-jinja-knockout javascript localization`_\r\n\r\nLocalization contributors:\r\n\r\n* Dutch: ``Melvyn Sopacua``\r\n* Polish: ``pawelkoston``\r\n\r\nKey features\r\n------------\r\n\r\n* Django 1.8, 1.9, 1.10, 1.11 support. Python 3.4 / 3.5 / 3.6 support.\r\n* `Supports existing Django templates (DTL).`\r\n* `Bootstrap 3`_ / `Jinja2`_ / `Knockout.js`_ integration into Django projects.\r\n* No deep knowledge of Knockout.js is required: it has ready working components.\r\n* Dynamic adding / removing of inline formsets with Knockout.js, protected from XSS.\r\n* Django raw queries with ``filter()`` / ``exclude()`` / ``order()`` / ``values()`` / ``values_list()`` and SQL slicing\r\n  support via ``FilteredRawQuerySet``, suitable for usage in ``ListView`` / ``ListSortingView`` / ``KoGridView`` derived\r\n  classes.\r\n* Knockout.js powered AJAX django.admin-like grids (paginated tables) with sorting / filters and custom actions.\r\n* ``ForeignKeyGridWidget`` provides ``ForeignKeyRawIdWidget``-like functionality to select ``ModelForm`` foreign key\r\n  field value via AJAX query / response.\r\n* Jinja2 templates can be integrated into existing Django templates via custom\r\n  template library tag::\r\n\r\n    {% extends 'base_min.html' %}\r\n    {% load jinja %}\r\n    {% load staticfiles %}\r\n\r\n    {% block main %}\r\n    {% jinja 'bs_list.htm' with _render_=1 view=view object_list=object_list is_paginated=is_paginated page_obj=page_obj %}\r\n    {% endblock main %}\r\n\r\nMajor changes (version 0.5.0)\r\n-----------------------------\r\nRewritten recursive underscore.js template processor, see `underscore.js templates`_.\r\n\r\nDisplaying verbose field names in grid rows, grid row actions and in ``ForeignKeyGridWidget`` placeholder.\r\n\r\nClean-up of client-side components code.\r\n\r\nBetter support for grids that use RAW queries with ``LEFT JOIN``, which may have multiple rows with the same ``pkVal``\r\n=== ``null``.\r\n\r\nImprovenemtns in Selenium automation testing: better handling of automation commands, more of commands implemented,\r\nmuch larger test coverage.\r\n\r\n* Numerous bugfixes, including related field queries support in ``FilteredRawQuerySet``.\r\n\r\nMajor changes (version 0.4.0)\r\n-----------------------------\r\nLarge improvements in Selenium testing support: additional commands are implemented, auto-retry on DOM timeout, fixtures\r\nloading / saving which allows to skip already debugged parts of tests, saving developer's time.\r\n\r\n``ContextMiddleware`` supports request mocking and request-time storage.\r\n\r\n``FilteredRawQuerySet`` supports Q expressions (Q objects) with relation mapping.\r\n\r\n``BaseFilterView`` / ``KoGridView`` - basic support for Q expressions (currently is used for ``None`` value of field\r\nfilter), support for ``in`` query for ``choice`` filter value via the list of values.\r\n\r\nEven better support of optional Django model ``get_str_fields()`` method in ``DisplayText`` widget and in Knockout.js\r\ngrids.\r\n\r\nVarious bugfixes.\r\n\r\nMinor changes (version 0.4.1)\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\nImplemented ``multiple_choices``: ``True`` option of the field filter ``type`` ``choices`` in ``ListSortingView``.\r\nThat allows to perform ``in`` field lookups for the selected field filter.\r\n\r\nLarge monolithic ``views.py`` split into smaller parts with symbols exported via module ``__init__.py`` for the\r\nconvenience and compatibility.\r\n\r\nAlternative breadcrumbs layout of field filters widgets.\r\n\r\nBugfixes and security fixes in query / views modules.\r\n\r\nMajor changes (version 0.3.0)\r\n-----------------------------\r\n\r\nAuto-configuration of nested foreign key filter fields in ``KoGridView`` / ``ForeignKeyGridWidget``.\r\n\r\n``FilteredRawQuerySet`` now supports more precise ``.count()`` method.\r\n\r\n``ListQuerySet`` supports significant part of Django queryset functionality for the lists of Django model instances,\r\nreturned by `prefetch_related()`_.\r\n\r\nBootstrap tabs generation macro ``bs_tabs()`` with client-side support of switching tabs when window.location.hash\r\nvalue changes.\r\n\r\n``SendmailQueue`` functionality can be extended via injecting ioc class - for example to send email in the background\r\nvia `celery`_ task.\r\n\r\nMajor changes (version 0.2.0)\r\n-----------------------------\r\n``$.inherit()`` Javascript prototype inheritance function now supports multi-level inheritance with nested ``.super``\r\ncalls without having to specify parent class prototype property implicitely in descendant class instances, with newly\r\nintroduced ``$.SuperChain`` class.\r\n\r\n\"django.admin-like\" AJAX functionality was implemented via ``KoGridView`` class-based view (CBV) at server-side with\r\ncorresponding Knockout.js templates and Javascript classes at client-side. Besides providing standard CRUD actions and\r\nfilters, it allows to implement arbitrary actions in descendant classes and quickly design django.admin-like user\r\ninterfaces in non-admin views. AJAX calls also minimize server HTTP traffic, reducing network bandwitch and making the\r\nUI more responsive.\r\n\r\nNew ``ForeignKeyGridWidget`` was developed which provides ``ForeignKeyRawIdWidget``-like functionality in non-admin\r\n``ModelForm`` classes to select foreign key fields value via AJAX query / response.\r\n\r\nSupport of auto-instantiating Javascript classes with binding these to selected DOM nodes with 'component' css class via\r\n``App.Components`` class.\r\n\r\nSupport of auto-compiling / auto-loading client-side underscore.js templates via ``App.compileTemplate`` /\r\n``App.domTemplate`` / ``App.loadTemplates``. One of usage examples is the possibility of loading modal body from\r\nunderscore.js template in ``App.Dialog``.\r\n\r\nSupport of client-side generation of view urls with kwargs for client-side url names via updated ``context_processors.py``\r\nand client-side ``App.routeUrl()`` Javascript function.\r\n\r\n``tpl.resolve_cbv()`` allows to resolve view class via url name and it's kwargs.\r\n\r\nDjango templates (DTL) and Jinja2 templates now can be mixed using shared Jinja2 template code via ``{% load jinja %}``\r\ntemplate library ``jinja`` template tags, which performs ``include`` for Jinja2 template with current context::\r\n\r\n    {% extends 'base_min.html' %}\r\n    {% load jinja %}\r\n    {% load staticfiles %}\r\n\r\n    {% block main %}\r\n    {% jinja 'bs_list.htm' with _render_=1 view=view object_list=object_list is_paginated=is_paginated page_obj=page_obj %}\r\n    {% endblock main %}\r\n\r\nNumerous bug fixes.\r\n\r\nDocumentation\r\n-------------\r\n\r\nThe full documentation is at https://django-jinja-knockout.readthedocs.org.\r\n\r\nCookiecutter Tools Used in Making This Package\r\n----------------------------------------------\r\n\r\n*  cookiecutter\r\n*  cookiecutter-djangopackage\r\n\r\n\r\n.. _add_instance: https://github.com/Dmitri-Sintsov/djk-sample/search?utf8=%E2%9C%93&q=add_instance\r\n.. _bs_list.htm: https://github.com/Dmitri-Sintsov/django-jinja-knockout/blob/master/django_jinja_knockout/jinja2/bs_list.htm\r\n.. _djk-sample: https://github.com/Dmitri-Sintsov/djk-sample\r\n.. _dump_data: https://github.com/Dmitri-Sintsov/djk-sample/search?utf8=%E2%9C%93&q=dump_data\r\n.. _fixtures_order: https://github.com/Dmitri-Sintsov/djk-sample/search?utf8=%E2%9C%93&q=fixtures_order\r\n.. _.has_fixture(): https://github.com/Dmitri-Sintsov/djk-sample/search?utf8=%E2%9C%93&q=has_fixture\r\n.. _yield_out_instances: https://github.com/Dmitri-Sintsov/djk-sample/search?utf8=%E2%9C%93&q=yield_out_instances\r\n\r\n=======\r\nHistory\r\n=======\r\n\r\n0.1.0\r\n-----\r\n\r\n* To be released on PyPI.\r\n\r\n0.2.0\r\n-----\r\n* Django 1.8 / 1.9 / 1.10, Python 3.4 / 3.5 support.\r\n* ``djk-sample`` demo / automated testing project.\r\n* \"django.admin-like\" AJAX functionality implemented via ``KoGridView`` class-based view.\r\n* ``$.inherit()`` Javascript prototype inheritance function now supports multi-level inheritance with nested\r\n  ``._super._call()``.\r\n* ``FilteredRawQuerySet`` supports Django raw querysets with ``.filter()`` / ``.exclude()`` / ``.order_by()`` /\r\n  ``.values()`` / ``.values_list()`` and SQL level slicing.\r\n* ``ForeignKeyGridWidget`` provides ``ForeignKeyRawIdWidget`` -like functionality via AJAX query / response in non-admin\r\n  forms to select ModelForm foreign key values.\r\n* Client-side generation of view urls with kwargs in Javascript client-side routes via ``App.routeUrl()``.\r\n* Nested autocompiled underscore.js client-side templates for Javascript components, primarily used with Knockout.js,\r\n  but is not limited to.\r\n\r\n0.3.0\r\n-----\r\n* ``ContentTypeLinker`` - added method to return html representation of content types framework related object (html\r\n  link with the description by default).\r\n* ``FilteredRawQuerySet`` now supports more precise ``.count()`` method to calculate the length of raw queryset.\r\n* ``ListQuerySet`` implements large part of queryset methods for the lists of Django model instances. Such lists are\r\n  created by Django queryset ``.prefetch_related()`` method.\r\n* Auto-highlight bootstrap navs which have 'auto-highlight' css class at client-side.\r\n* ``bs_tabs()`` Jinja2 macro which simplifies generation of bootstrap tabs. Bootstrap tabs now support automatic\r\n  switching via window.location.hash change.\r\n* ``ListSortingView`` improvements:\r\n\r\n  * Supports graceful handling of error reporting, producing in-place messages instead of just rising an exception.\r\n  * ``.get_filter_args()`` / ``.get_no_match_kwargs()`` methods are implemented to generate macro arguments used in\r\n    `bs_list.htm`_ Jinja2 template. This allows to override default messages for field filters / no match reports in\r\n    the grid classes.\r\n\r\n* ``KoGridView`` has multiple improvements:\r\n\r\n  * ``decimal`` field filter is renamed to ``number`` as now it supports both Django model ``DecimalField`` and\r\n    ``IntegerField``.\r\n  * Django model ``IntegerField`` is now bound either to ``choices`` type filter, when it has non-empty ``choices``\r\n    attribute, or to ``number`` type filter to select range of values, otherwise.\r\n  * Action handlers do not require to return default viewmodel ``view`` name manually, now it's being done automatically\r\n    (when viewmodel ``view`` name is not specified).\r\n  * ``get_default_grid_options()`` method was renamed to shorter ``get_grid_options()`` method.\r\n  * ``grid_options`` may be defined as class attribute, not having to always define ``get_grid_options()`` method which\r\n    is more verbose (but is more flexible).\r\n  * ``discover_grid_options()`` method was implemented to populate grid ``fkGridOptions`` which are used to setup\r\n    foreign key filter fields automatically (when possible). That allows to reduce boilerplate data in ``grid_options``\r\n    / ``get_grid_options()``, especially when using nested foreign key filters. ``fkGridOptions`` nested dictionary\r\n    still can be specified manually as the part of ``get_grid_options()`` result, in complex cases (eg. DB or view\r\n    kwargs based options).\r\n  * Enable quick selection / deselection of currently displayed grid rows when ``selectMultipleRows`` is ``true``.\r\n\r\n* ``ForeignKeyGridWidget`` also autodetects foreign key filter ``fkGridOptions``.\r\n* ``SendmailQueue`` supports extension of ``add()`` / ``flush()`` methods via ioc class.\r\n* ``SendmailQueue`` may be used to send uncaught exception emails when running in production mode.\r\n\r\n0.4.0\r\n-----\r\n* Improvements in testing support:\r\n\r\n  * ``AutomationCommands`` now uses yield to generate the sequence of opcodes and their args, resulting in cleaner code.\r\n  * ``SeleniumCommands`` is reworked into ``BaseSeleniumCommands``. It supports:\r\n\r\n    * Saving current database state to Django fixtures at the particular points of tests via `dump_data`_ command. That\r\n      allows to skip already debugged parts of tests via `.has_fixture()`_ method, greatly reducing the time\r\n      required to develop and debug long running Selenium tests. To make proper order (sequence) of stored / loaded\r\n      fixtures, one has to define `fixtures_order`_ attribute of ``DjkTestCase`` derived class.\r\n    * Automatic retry of the last Selenium commands execution in case current command is timed out when running at\r\n      slow client due to DOM is not being updated in time.\r\n    * css parsing / xpath string escaping.\r\n\r\n  * ``SeleniumQueryCommands`` implements generic Selenium commands, including Django reverse url support for navigation\r\n    bar, anchors and forms, which could be useful in any Django application.\r\n  * ``DjkSeleniumQueryCommands`` implements additional Selenium commands related to django-jinja-knockout functionality,\r\n    such as BootstrapDialog and Knockout.js grids / widgets support.\r\n\r\nforms.py\r\n~~~~~~~~\r\n* ``BootstrapModelForm`` always populates ``.request`` attribute for convenience.\r\n* ``CustomFullClean`` / ``StripWhilespaceMixin`` mixins for Django forms.\r\n\r\nmiddleware.py\r\n~~~~~~~~~~~~~\r\n* ``ContextMiddleware`` class:\r\n\r\n  * Supports request mocking when running not under HTTP server, for example as shell command / celery task.\r\n  * Supports request-time storage of lists / dicts of objects via `add_instance`_ / `yield_out_instances`_ methods.\r\n\r\nquery.py\r\n~~~~~~~~\r\n* ``FilteredRawQuerySet`` supports Q expressions (Q objects) with relation mapping.\r\n\r\nviews submodule\r\n~~~~~~~~~~~~~~~\r\n* ``BaseFilterView``\r\n\r\n  * ``filter_queryset()`` now supports args in addition to kwargs. That allows to use Django ``Q`` objects in grids\r\n    and lists, although actual generation of ``Q`` objects is still limited to ``None`` value filtering.\r\n  * ``None`` can be valid value of field filter query. It is mapped to ``is_null`` field lookup, also it uses Django\r\n    ``Q.__or__`` operation in case ``None`` is presented in the list of field filter values.\r\n  * Query filters now support ``in`` clause for drop-down ``choice`` filter.\r\n\r\nwidgets.py\r\n~~~~~~~~~~\r\n* ``DisplayText`` field widget ``__init__()`` method now supports two types of ``get_text`` callback arguments:\r\n\r\n  * ``get_text_method`` which binds passed function to DisplayText widget instance (self as first argument)\r\n  * ``get_text_fn`` which uses unbound function (no self).\r\n\r\nIf form that defined widget uses ``WidgetInstancsMixin`` and model field instance has ``get_str_fields()`` method\r\nimplemented, such field will be auto-rendered via ``print_list_group()`` / ``print_bs_well()`` functions of ``tpl``\r\nmodile to produce structured output.\r\n\r\nko_grid_body.htm\r\n~~~~~~~~~~~~~~~~\r\n*  Fixed ``ko_grid_body()`` macro not including underscore.js templates copied with different ``template_id`` when these\r\n   templates were called from related underscore.js templates.\r\n\r\nko-grid.js\r\n~~~~~~~~~~\r\n* Reset filter now uses ``undefined`` value instead of ``null`` value because filtering by ``None`` value is now\r\n  supported in ``KoGridView``.\r\n* ``App.ko.GridRow`` class ``toDisplayValue()`` method now automatically picks nested relation value from nested\r\n  ``strFields`` value, when available. That allows to traverse nested ``get_str_fields()`` values automatically.\r\n\r\n  See ``getDisplayValue()`` method for the implementation.\r\n* Allow to click nested elements of row cells when these are enclosed into anchors.\r\n* Allow to override grid callback action via viewmodel ``callback_action`` property.\r\n* Query filters now support multi-value ``in`` clause for values of drop-down ``choice`` filter.\r\n* Grid viewmodel ``deleted_pks`` key values are processed first in ``App.ko.Grid.updatePage()``. That allows to delete\r\n  old row and add new row with the same ``pkVal`` at once (forced update).\r\n* ``App.ko.Grid`` class  ``.setFiltersChoices()`` method simplifies programmatic filtering of grid at client-side, for\r\n  example from the parsed querystring.\r\n\r\nplugins.js\r\n~~~~~~~~~~\r\n``$.linkPreview`` now has separate inclusion filter for local urls and exclusion filter for remote urls, which minimizes\r\nthe possibility of preview glitches due to wrong guess of resource type.\r\n\r\n0.4.1\r\n-----\r\nSupport of the ``'choices' filter`` option ``multiple_choices``: ``True`` in  non-AJAX ``ListSortingView``. That allows\r\nto perform ``in`` field lookups for the selected field filter which was previously available only in AJAX\r\n``KoGridView``.\r\n\r\nLarge monolithic ``views.py`` split into smaller parts with symbols exported via module ``__init__.py`` for the\r\nconvenience and compatibility.\r\n\r\nAlternative breadcrumbs layout of field filters widgets.\r\n\r\n0.4.2\r\n-----\r\n* Compatibility to 1.10+ new-style middleware (thanks to Melvyn Sopacua).\r\n* Fixed pagination when multiple filter field choices are seiected in views.ListSortingView.\r\n\r\n0.4.3\r\n-----\r\n* Django 1.11 / Python 3.6 support.\r\n* Selenium testing commands fixes.\r\n\r\n0.5.0\r\n-----\r\n* Reworked recursive underscore.js template processor as ``App.Tpl`` class.\r\n* Grid rows, grid row actions and ``ForeignKeyGridWidget`` placeholder now are displaying Django model instances verbose\r\n  field names along with their values. Related model fields verbose names are displayed as well.\r\n* Client-side components code now uses separate html5 data attribute ``data-component-class`` to bind DOM subtrees to\r\n  Javascript component classes (for example grids), instead of placing everything into ``data-component-options``\r\n  attribute as in previous versions.\r\n* Overridable method to check whether two grid rows match the same Django model instance, suitable for RAW query\r\n  grids with LEFT JOIN, which could have multiple rows with the same ``pkVal`` === ``null``.\r\n* Automation commands now uses ``SimpleNamespace`` as chained context, which allows to use different nodes for relative\r\n  search queries chaining. Currently implemented are relative Selenium queries for form, component, bootstrap dialog and\r\n  grid. Much better tests coverage in `djk-sample`_ project. Many new Selenium commands are implemented, including\r\n  ``screenshot`` command.\r\n* ``ko_generic_inlineformset_factory`` supports dynamic adding / removal of generic inline formsets.\r\n* ``FilteredRawQuerySet`` / ``ListQuerySet`` queryset classes ``values()`` and ``values_list()`` methods now support\r\n  model relations in queried field names via ``__`` separator, just like usual Django querysets.\r\n* Numerous bugfixes.",
    "docs_url": "https://pythonhosted.org/django-jinja-knockout/",
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Dmitri-Sintsov/django-jinja-knockout",
    "keywords": "django",
    "license": "GPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-jinja-knockout",
    "platform": "",
    "project_url": "https://pypi.org/project/django-jinja-knockout/",
    "release_url": "https://pypi.org/project/django-jinja-knockout/0.5.0/",
    "requires_python": "",
    "summary": "Django AJAX ModelForms. Read-only display ModelForms. Django AJAX grids with CRUD and custom actions. Supports Django Templates.",
    "version": "0.5.0"
  },
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "478ad1fa77edf500daf1883bc7c2fee5",
          "sha256": "28c73409e7f1055289f9f893c2dad6e02867410563be43754dfb0a25d73096ff"
        },
        "downloads": 495,
        "filename": "django-jinja-knockout-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "478ad1fa77edf500daf1883bc7c2fee5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 395951,
        "upload_time": "2016-03-17T16:28:29",
        "url": "https://files.pythonhosted.org/packages/4e/67/67c480e4410ee51dc9eb223defa83cac177845cac4beaa25e1302cd882d6/django-jinja-knockout-0.1.2.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b21ffae95d97f8ad606e17db204e1037",
          "sha256": "98323f9faea3da94ee9075f9bbc4f4760cd57bcc6b069a5cf8c1218f5cc9ac93"
        },
        "downloads": 97,
        "filename": "django-jinja-knockout-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b21ffae95d97f8ad606e17db204e1037",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 452206,
        "upload_time": "2016-10-15T17:29:21",
        "url": "https://files.pythonhosted.org/packages/f0/e5/efdc5d5b1b3d090c66d2cdad75f57a0ef1e37196e2ece135e57cfa0300d0/django-jinja-knockout-0.2.0.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6a2717f0fa69aa3e7a2167739a33ae26",
          "sha256": "1f9cc175ed30c66e68340d28d615c359557121fa668bc756bef7f81941666fc5"
        },
        "downloads": 70,
        "filename": "django-jinja-knockout-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6a2717f0fa69aa3e7a2167739a33ae26",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 468122,
        "upload_time": "2016-11-17T15:16:51",
        "url": "https://files.pythonhosted.org/packages/0a/0f/858545f65ffc9a0918f9a3f9543133fc57376141835a7d01098172280271/django-jinja-knockout-0.3.0.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "52b699b6cb344ab5489fe9800173a7f8",
          "sha256": "31236ea3c78e8ea3ff32241d0bc6325f78dda7b71306d90f55fdab5cfd7487c1"
        },
        "downloads": 12,
        "filename": "django-jinja-knockout-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "52b699b6cb344ab5489fe9800173a7f8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 485392,
        "upload_time": "2017-02-07T15:53:50",
        "url": "https://files.pythonhosted.org/packages/09/8c/99cad60909ac9470016eaa3927efc0b009d2d5de132ab54058e6879664c4/django-jinja-knockout-0.4.0.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9c554e9e644fbd071808159175a186b3",
          "sha256": "ba91da2dd22fce1ce45e69905ad7abe80d16f0f6bd8902e2d889767ea1c21e53"
        },
        "downloads": 9,
        "filename": "django-jinja-knockout-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9c554e9e644fbd071808159175a186b3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 484652,
        "upload_time": "2017-02-23T13:44:54",
        "url": "https://files.pythonhosted.org/packages/9f/f3/067b41a8b3e12d641b5afae30cf776bccaf9f0503bdbbacbcfa661593e10/django-jinja-knockout-0.4.1.tar.gz"
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "020315d7a878da7996171850f40ae5bf",
          "sha256": "6512f4da4450e070088af944747d6607d3ef27a8ecf90eb9794e3c418724c1fe"
        },
        "downloads": 9,
        "filename": "django-jinja-knockout-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "020315d7a878da7996171850f40ae5bf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 494845,
        "upload_time": "2017-03-02T16:43:10",
        "url": "https://files.pythonhosted.org/packages/ee/d2/f867919bf630459209c1e3dff7f127b263561271961809edf4495b7beac6/django-jinja-knockout-0.4.2.tar.gz"
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0db3022925d30cb360cb09a2f6a04bd1",
          "sha256": "f0fd44ee66ca205ecd449113da9482e538096b19fe2e349bea6141925e58f87a"
        },
        "downloads": 12,
        "filename": "django-jinja-knockout-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0db3022925d30cb360cb09a2f6a04bd1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 497052,
        "upload_time": "2017-03-22T09:57:28",
        "url": "https://files.pythonhosted.org/packages/93/2e/2b20ed3e833ea8acfff2749eb4e9804d9da63fd784c8d9f9a99d0163fc42/django-jinja-knockout-0.4.3.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "76983c5bffc357df63c23f62933eb198",
          "sha256": "e4291f18b12db1cc1a2673831ef291f0f07c43bbeaca78d3bae46cad1750ed0c"
        },
        "downloads": 0,
        "filename": "django-jinja-knockout-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "76983c5bffc357df63c23f62933eb198",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 504223,
        "upload_time": "2017-04-17T15:07:33",
        "url": "https://files.pythonhosted.org/packages/54/05/16193b2153e622d514431308dadb8d9f5ef430e69e95fc141a23dec6ec24/django-jinja-knockout-0.5.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "76983c5bffc357df63c23f62933eb198",
        "sha256": "e4291f18b12db1cc1a2673831ef291f0f07c43bbeaca78d3bae46cad1750ed0c"
      },
      "downloads": 0,
      "filename": "django-jinja-knockout-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "76983c5bffc357df63c23f62933eb198",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 504223,
      "upload_time": "2017-04-17T15:07:33",
      "url": "https://files.pythonhosted.org/packages/54/05/16193b2153e622d514431308dadb8d9f5ef430e69e95fc141a23dec6ec24/django-jinja-knockout-0.5.0.tar.gz"
    }
  ]
}