{
  "info": {
    "author": "Peter Boin",
    "author_email": "peter.boin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Manufacturing",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering"
    ],
    "description": "=======\npygcode\n=======\n\nGCODE Parser for Python\n\nCurrently in development, ``pygcode`` is a low-level GCode interpreter\nfor python.\n\nInstallation\n============\n\nUsing `PyPi <https://pypi.python.org/pypi/pydemia>`__:\n\n``pip install pygcode``\n\nUsage\n=====\n\nJust brainstorming here...\n\nWriting GCode\n-------------\n\nWriting gcode from python object instances to text\n\n::\n\n    >>> from pygcode import *\n    >>> gcodes = [\n    ...     GCodeRapidMove(Z=5),\n    ...     GCodeStartSpindleCW(),\n    ...     GCodeRapidMove(X=10, Y=20),\n    ...     GCodeFeedRate(200),\n    ...     GCodeLinearMove(Z=-1.5),\n    ...     GCodeRapidMove(Z=5),\n    ...     GCodeStopSpindle(),\n    ... ]\n    >>> print('\\n'.join(str(g) for g in gcodes))\n\n    G00 Z5\n    M03\n    G00 X10 Y20\n    F200\n    G01 Z-1.5\n    G00 Z5\n    M05\n\n\nTo plot along a lines of vectors, you could write...\n\n::\n\n    >>> from pygcode import *\n    >>> from euclid import Vector3\n\n    >>> vectors = [\n    ...     Vector3(0, 0, 0),\n    ...     Vector3(10, 0, 0),\n    ...     Vector3(10, 20, 0),\n    ...     Vector3(10, 20, 3),\n    ...     Vector3(0, 20, 3),\n    ...     Vector3(0, 0, 3),\n    ...     Vector3(0, 0, 0)\n    ... ]\n\n    >>> to_coords = lambda v: {'X': v.x, 'Y': v.y, 'Z': v.z}\n    >>> for v in vectors:\n    ...     print(\"%s\" % GCodeLinearMove(**to_coords(v)))\n\n    G01 X0 Y0 Z0\n    G01 X10 Y0 Z0\n    G01 X10 Y20 Z0\n    G01 X10 Y20 Z3\n    G01 X0 Y20 Z3\n    G01 X0 Y0 Z3\n    G01 X0 Y0 Z0\n\n\nReading / Interpreting GCode\n----------------------------\n\nTo read gcode from a file, utilise the ``Line`` class.\nEach ``Line`` instance contains a ``Block`` and an optional ``Comment``.\nThe ``Block`` contains a list of gcodes you're after.\n\n::\n\n    from pygcode import Line\n\n    with open('part.gcode', 'r') as fh:\n        for line_text in fh.readlines():\n            line = Line(line_text)\n\n            print(line)  # will print the line (with cosmetic changes)\n            line.block.gcodes  # is your list of gcodes\n            line.block.modal_params  # are all parameters not assigned to a gcode, assumed to be motion modal parameters\n            if line.comment:\n                line.comment.text  # your comment text\n\nTo elaborate, here are some line examples\n\n::\n\n    >>> from pygcode import Line\n\n    >>> line = Line('G01 x1 y2  f100 s1000 ; blah')\n    >>> print(line)\n    G01 X1 Y2 F100 S1000 ; blah\n    >>> print(line.block)\n    G01 X1 Y2 F100 S1000\n    >>> print(line.comment)\n    ; blah\n\n    >>> line = Line('G0 x1 y2 (foo) f100 (bar) s1000')\n    >>> print(line)\n    G00 X1 Y2 F100 S1000 (foo. bar)\n    >>> print(line.comment)\n    (foo. bar)\n\n\nInterpreting what a line of gcode does depends on the machine it's running on,\nand also that machine's state (or 'mode')\n\nThe simple line of a rapid move to ``x=10, y=10`` may be ``G00 X10 Y10``.\nHowever, if the machine in question is in \"Incremental Motion\" mode ``G91`` then\nthe machine will only end up at ``x=10, y=10`` if it started at ``x=0, y=0``\n\nSo, GCode interpretation is done via a virtual machine:\n\n::\n\n    >>> from pygcode import Machine, GCodeRapidMove\n\n    >>> m = Machine()\n    >>> m.pos\n    <Position: X0 Y0 Z0>\n    >>> g = GCodeRapidMove(X=10, Y=20)\n    >>> m.process_gcodes(g)\n    >>> m.pos\n    <Position: X10 Y20 Z0>\n    >>> m.process_gcodes(g)\n    >>> m.pos\n    <Position: X10 Y20 Z0>   # same position; machine in absolute mode\n    >>> m.mode.distance\n    <GCodeAbsoluteDistanceMode: G90>  # see\n\n    >>> m.process_gcodes(GCodeIncrementalDistanceMode())\n    >>> m.process_gcodes(g)  # same gcode as above\n    >>> m.pos\n    <Position: X20 Y40 Z0>\n\nall valid ``m.mode`` attributes can be found with ``from pygcode.gcodes import MODAL_GROUP_MAP; MODAL_GROUP_MAP.keys()``\n\nAlso note that the order codes are interpreted is important.\nFor example, the following code is WRONG\n\n::\n\n    from pygcode import Machine, Line\n    m = Machine()\n    line = Line('G0 x10 y10 G91')\n    m.process_gcodes(*line.block.gcodes)  # WRONG!\n\nThis will process the movement to ``x=10, y=10``, and **then** it will change the\ndistance mode to *Incremental*... there are 2 ways to do this correctly.\n\n- ``m.process_gcodes(*sorted(line.block.gcodes))``, or simply\n- ``m.process_block(line.block)``\n\nsorting a list of gcodes will sort them in execution order (as specified by\n`LinuxCNC's order of execution <http://linuxcnc.org/docs/html/gcode/overview.html#_g_code_order_of_execution>`__).\n``process_block`` does this automatically.\n\nIf you need to process & change one type of gcode (usually a movement),\nyou must split a list of gcodes into those executed before, and after the one\nin question.\n\n::\n\n    from pygcode import GCodeRapidMove, GCodeLinearMove\n    from pygcode import Machine, Line, split_gcodes\n    m = Machine()\n    line = Line('M0 G0 x10 y10 G91')\n    (befores, (g,), afters) = split_gcodes(line.block.gcodes, (GCodeRapidMove, GCodeLinearMove))\n    m.process_gcodes(*sorted(befores))\n    if g.X is not None:\n        g.X += 100  # shift linear movements (rapid or otherwise)\n    m.process_gcodes(g)\n    m.process_gcodes(*sorted(afters))\n\n\nFor a more practical use of machines & interpreting gcode, have a look at\n`pygcode-normalize.py <https://github.com/fragmuffin/pygcode/blob/master/scripts/pygcode-normalize.py>`__\n\nAt the time of writing this, that script converts arcs to linear codes, and\nexpands drilling cycles to basic movements (so my\n`GRBL <https://github.com/gnea/grbl>`__ machine can understand them)\n\n\nDevelopment\n===========\n\nThis library came from my own needs to interpret and convert erroneous\narcs to linear segments, and to expand canned drilling cycles, but also\nas a means to *learn* GCode.\n\nAs such there is no direct plan for further development, however I'm\ninterested in what you'd like to use it for, and cater for that.\n\nGenerally, in terms of what to support, I'm following the lead of:\n\n- `GRBL <https://github.com/gnea/grbl>`__ and\n- `LinuxCNC <http://linuxcnc.org/>`__\n\nMore support will come with increased interest.\nSo that is... if you don't like what it does, or how it's documented, make some\nnoise in the `issue section <https://github.com/fragmuffin/pygcode/issues>`__.\nif you get in early, you may get some free labour out of me ;)\n\n\nSupported G-Codes\n-----------------\n\nAll GCodes supported by `LinuxCNC <http://linuxcnc.org>`__ can be written, and\nparsed by ``pygcode``.\n\nFew GCodes are accurately interpreted by a virtual CNC ``Machine`` instance.\nSupported movements are currently;\n\n- linear movements\n- arc movements\n- canned drilling cycles\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/fragmuffin/pygcode",
    "keywords": "gcode,cnc,parser,interpreter",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pygcode",
    "platform": "",
    "project_url": "https://pypi.org/project/pygcode/",
    "release_url": "https://pypi.org/project/pygcode/0.1.0/",
    "requires_dist": [
      "six",
      "euclid3"
    ],
    "requires_python": "",
    "summary": "Basic g-code parser, interpreter, and encoder library.",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9975fba2ccb0f49d703db2dbc5ec6806",
          "sha256": "b8677cdd4537e55eed1f09df6fea1cc4559d2d68df19ae380eb0773ea9d5b907"
        },
        "downloads": 0,
        "filename": "pygcode-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9975fba2ccb0f49d703db2dbc5ec6806",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 54139,
        "upload_time": "2017-07-18T12:32:57",
        "url": "https://files.pythonhosted.org/packages/b0/70/c74891e335e35a1a69a96751e422dd3de7e64ae053d460dcb2a3176ef429/pygcode-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "34acd855ce53e479022139115cc484b3",
          "sha256": "0099a4fac8ee0816a235294db816e3623e601d95d75aa47ec9e137b4fbfa4f78"
        },
        "downloads": 0,
        "filename": "pygcode-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "34acd855ce53e479022139115cc484b3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 36092,
        "upload_time": "2017-07-18T12:32:59",
        "url": "https://files.pythonhosted.org/packages/96/68/18effd8e44e05239e778bac9eef358884a1ddb2c9670a956c44a7f02da10/pygcode-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9975fba2ccb0f49d703db2dbc5ec6806",
        "sha256": "b8677cdd4537e55eed1f09df6fea1cc4559d2d68df19ae380eb0773ea9d5b907"
      },
      "downloads": 0,
      "filename": "pygcode-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9975fba2ccb0f49d703db2dbc5ec6806",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 54139,
      "upload_time": "2017-07-18T12:32:57",
      "url": "https://files.pythonhosted.org/packages/b0/70/c74891e335e35a1a69a96751e422dd3de7e64ae053d460dcb2a3176ef429/pygcode-0.1.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "34acd855ce53e479022139115cc484b3",
        "sha256": "0099a4fac8ee0816a235294db816e3623e601d95d75aa47ec9e137b4fbfa4f78"
      },
      "downloads": 0,
      "filename": "pygcode-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "34acd855ce53e479022139115cc484b3",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 36092,
      "upload_time": "2017-07-18T12:32:59",
      "url": "https://files.pythonhosted.org/packages/96/68/18effd8e44e05239e778bac9eef358884a1ddb2c9670a956c44a7f02da10/pygcode-0.1.0.tar.gz"
    }
  ]
}