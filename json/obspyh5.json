{
  "info": {
    "author": "Tom Eulenfeld",
    "author_email": "tom.eulenfeld@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "Saves and writes ObsPy streams to hdf5 files.\nStats attributes are preserved if they are numbers, strings,\nUTCDateTime objects or numpy arrays.\nIt can be used as a plugin to obspy's read function to read a whole hdf5 file.\nAlternatively you can iterate over the traces in a hdf5 file with the iterh5\nfunction.\n\nInstallation\n^^^^^^^^^^^^\nInstall h5py and obspy. After that install obspyh5 using pip by::\n\n    pip install obspyh5\n\nAlternatively you can install obspyh5 by downloading the source code and\nrunning::\n\n    python setup.py install\n\nUsage\n^^^^^\nBasic example using the obspy plugin::\n\n    >>> from obspy import read\n    >>> stream = read()  # load example stream\n    >>> print stream\n    ..3 Trace(s) in Stream:\n    BW.RJOB..EHZ | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples\n    BW.RJOB..EHN | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples\n    BW.RJOB..EHE | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples\n    >>> stream.write('test.h5', 'H5')  # declare 'H5' as format\n    >>> print read('test.h5')  # Order is not preserved!\n    3 Trace(s) in Stream:\n    BW.RJOB..EHZ | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples\n    BW.RJOB..EHE | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples\n    BW.RJOB..EHN | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples\n\nExample iterating over traces in a huge hdf5 file. After each iteration the\ntrace is not kept in memory and therefore it is possible to process a huge hdf5\nfile on a PC without problems. ::\n\n    >>> from obspyh5 import iterh5\n    >>> for trace in iterh5('huge_in.h5')\n            trace.do_something()\n            trace.write('huge_out.h5', 'H5', mode='a')  # append mode to write into file\n\nAlternative indexing\n^^^^^^^^^^^^^^^^^^^^\nobspyh5 supports alternative indexing. ::\n\n    >>> from obspy import read\n    >>> import obspyh5\n    >>> print obspyh5._INDEX  # default index\n    {network}.{station}/{location}.{channel}/{starttime.datetime:%Y-%m-%dT%H:%M:%S}_{endtime.datetime:%Y-%m-%dT%H:%M:%S}\n\nThe index gets populated by the stats object when writing a trace, e.g. ::\n\n    >>> stats = read()[0].stats\n    >>> print obspyh5._INDEX.format(**stats)\n    'BW.RJOB/.EHZ/2009-08-24T00:20:03_2009-08-24T00:20:32'\n\nTo change the index use set_index. ::\n\n    >>> obspyh5.set_index('xcorr')  # xcorr indexing\n    >>> obspyh5.set_index('{newtork}.{station}/{distance}')  # custom indexing\n\nWhen using the 'xcorr' indexing stats needs the entries 'network1', 'station1',\n'location1', 'channel1', 'network2', 'station2', 'location2' and 'channel2'\nof the first and second station. An example: ::\n\n    >>> from obspy import read\n    >>> import obspyh5\n    >>> obspyh5.set_index('xcorr')  # activate xcorr indexing\n    >>> stream = read()\n    >>> for i, tr in enumerate(stream):  # manipulate stats object\n            station1, station2 = 'ST1', 'ST%d' % i\n            channel1, channel2 = 'HHZ', 'HHN'\n            s = tr.stats\n            # we manipulate seed id so that important information gets\n            # printed by obspy\n            s.network, s.station = s.station1, s.channel1 = station1, channel1\n            s.location, s.channel = s.station2, s.channel2 = station2, channel2\n            s.network1 = s.network2 = 'BW'\n            s.location1 = s.location2 = ''\n    >>> print stream\n    ST1.HHZ.ST0.HHN | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples\n    ST1.HHZ.ST1.HHN | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples\n    ST1.HHZ.ST2.HHN | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples\n    >>> stream.write('test_xcorr.h5', 'H5')\n    >>> print read('test_xcorr.h5')\n    ST1.HHZ.ST0.HHN | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples\n    ST1.HHZ.ST1.HHN | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples\n    ST1.HHZ.ST2.HHN | 2009-08-24T00:20:03.000000Z - 2009-08-24T00:20:32.990000Z | 100.0 Hz, 3000 samples\n\nNote\n^^^^\nSee also ASDF_ for a more comprehensive approach.\n\nUse case: Cross-correlation of late Okhotsk coda (notebook_).\n\n.. _ASDF: https://github.com/krischer/ASDF\n\n.. _notebook: http://nbviewer.jupyter.org/github/trichter/notebooks/blob/master/notebooks/okhotsk_coda_xcorr.ipynb",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/trichter/obspyh5",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "obspyh5",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/obspyh5/",
    "release_url": "https://pypi.org/project/obspyh5/0.2.3/",
    "requires_python": null,
    "summary": "HDF5 write/read support for obspy",
    "version": "0.2.3"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dd3f54e7b44e655faa1014e3fc4cb38d",
          "sha256": "f538f7215c2ddfb0df18d8e020da870323b77878dfbe6c4ab4ca23ba78497c8e"
        },
        "downloads": 2286,
        "filename": "obspyh5-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dd3f54e7b44e655faa1014e3fc4cb38d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7355,
        "upload_time": "2014-03-24T18:34:06",
        "url": "https://files.pythonhosted.org/packages/f7/5a/aa7c6c3e81dd29eee3061ce33c70ff697682951ebd06d4fbe978d43a8586/obspyh5-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5c6f7436e94b1f8dd91663877550f869",
          "sha256": "dcaf5065c304832ad5fe509ca7ff2eadc222c413590e16a6af7b442131385e5f"
        },
        "downloads": 856,
        "filename": "obspyh5-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5c6f7436e94b1f8dd91663877550f869",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7483,
        "upload_time": "2015-06-02T09:39:17",
        "url": "https://files.pythonhosted.org/packages/a8/dc/f01e246cc249292adf6c96b432dc9b04ab273e828a196753a97cf5ac6246/obspyh5-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "90727dffeebbba332cda40c6ffc61bbe",
          "sha256": "51a4b41ac4b553722b30c6acee60564ed33e3681a5b6ad0f6e682344ea9f6928"
        },
        "downloads": 2407,
        "filename": "obspyh5-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "90727dffeebbba332cda40c6ffc61bbe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7493,
        "upload_time": "2015-06-02T10:28:39",
        "url": "https://files.pythonhosted.org/packages/03/f5/c5d8b0806d2bd36f5092ca2791039f038afc45cb138fd36a4222217b74f9/obspyh5-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "71951e778016b38a0ce6a0092750e124",
          "sha256": "fc40af9f3e162e75ef91b3f8335c3ebb0f8bf8351c982a806a8214b2f56e8472"
        },
        "downloads": 114,
        "filename": "obspyh5-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "71951e778016b38a0ce6a0092750e124",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8079,
        "upload_time": "2016-02-12T13:08:11",
        "url": "https://files.pythonhosted.org/packages/e5/62/dd66e28270ac0d2b5f8b2db86146d7423b42752e0cf3a6189a844c2f0faf/obspyh5-0.2.2.tar.gz"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b4ccf513309e5c48b3572b7934464d77",
          "sha256": "428c0b84a35bb198ee55f754c5cccfcc5bdd810d8f2c913b5ab6f9514ccf1c89"
        },
        "downloads": 163,
        "filename": "obspyh5-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b4ccf513309e5c48b3572b7934464d77",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8388,
        "upload_time": "2016-06-29T09:50:42",
        "url": "https://files.pythonhosted.org/packages/40/9d/0dd5211eb2c5c640a90c64465e4698849dddf92c9055f0b35b18bf9fd269/obspyh5-0.2.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b4ccf513309e5c48b3572b7934464d77",
        "sha256": "428c0b84a35bb198ee55f754c5cccfcc5bdd810d8f2c913b5ab6f9514ccf1c89"
      },
      "downloads": 163,
      "filename": "obspyh5-0.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "b4ccf513309e5c48b3572b7934464d77",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8388,
      "upload_time": "2016-06-29T09:50:42",
      "url": "https://files.pythonhosted.org/packages/40/9d/0dd5211eb2c5c640a90c64465e4698849dddf92c9055f0b35b18bf9fd269/obspyh5-0.2.3.tar.gz"
    }
  ]
}