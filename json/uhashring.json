{
  "info": {
    "author": "Ultrabug",
    "author_email": "ultrabug@ultrabug.net",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "*********\nuhashring\n*********\n|version|\n\n.. |version| image:: https://img.shields.io/pypi/v/uhashring.svg\n\n**uhashring** implements **consistent hashing** in pure python and is fully compatible with `ketama <https://github.com/RJ/ketama>`_.\n\nConsistent hashing is mostly used on distributed systems/caches/databases as this avoid the total reshuffling of your key-node mappings when adding or removing a node in your ring (called continuum on libketama). More information and details about this can be found in the *literature* section.\n\nThis full featured implementation offers:\n\n- a lot of **convenient methods** to use your consistent hash ring in real world applications.\n- simple **integration** with other libs such as memcache through monkey patching.\n- all the missing functions in the libketama C python binding (which is not even available on pypi).\n- possibility to **use your own weight and hash functions** if you don't care about the ketama compatibility.\n- **instance-oriented usage** so you can use your consistent hash ring object directly in your code (see advanced usage).\n- native **pypy support**.\n- tests of implementation, key distribution and ketama compatibility.\n\n**uhashring** default is to be compatible with the ketama implementation so you get 40 vnodes and 4 replicas = 160 points per node in the ring. Per node weight is also supported and will affect the nodes distribution on the ring.\n\nUsage\n=====\nBasic usage\n-----------\n**uhashring** is very simple and efficient to use:\n\n.. code-block:: python\n\n    from uhashring import HashRing\n\n    # create a consistent hash ring of 3 nodes of weight 1\n    hr = HashRing(nodes=['node1', 'node2', 'node3'])\n\n    # get the node name for the 'coconut' key\n    target_node = hr.get_node('coconut')\n\nAdvanced usage\n--------------\n\n.. code-block:: python\n\n    from uhashring import HashRing\n\n    # Mapping of dict configs\n    # Ommited config keys will get a default value, so\n    # you only need to worry about the ones you need\n    nodes = {\n        'node1': {\n                'hostname': 'node1.fqdn',\n                'instance': redis.StrictRedis(host='node1.fqdn'),\n                'port': 11211,\n                'vnodes': 40,\n                'weight': 1\n            },\n        'node2': {\n                'hostname': 'node2.fqdn',\n                'instance': redis.StrictRedis(host='node2.fqdn'),\n                'port': 11211,\n                'vnodes': 40\n            },\n        'node3': {\n                'hostname': 'node3.fqdn',\n                'instance': redis.StrictRedis(host='node3.fqdn'),\n                'port': 11211\n            }\n        }\n\n    # create a new consistent hash ring with the nodes\n    hr = HashRing(nodes)\n\n    # set the 'coconut' key/value on the right host's redis instance\n    hr['coconut'].set('coconut', 'my_value')\n\n    # get the 'coconut' key from the right host's redis instance\n    hr['coconut'].get('coconut')\n\n    # delete the 'coconut' key on the right host's redis instance\n    hr['coconut'].delete('coconut')\n\n    # get the node config for the 'coconut' key\n    conf = hr.get('coconut')\n\nDefault node configuration\n--------------------------\n**uhashring** offers advanced node configuration for real applications, this is the default you get for every added node:\n\n.. code-block:: python\n\n    {\n        'hostname': nodename,\n        'instance': None,\n        'port': None,\n        'vnodes': 40,\n        'weight': 1\n    }\n\nAdding / removing nodes\n-----------------------\nYou can add and remove nodes from your consistent hash ring at any time.\n\n.. code-block:: python\n\n    from uhashring import HashRing\n\n    # this is a 3 nodes consistent hash ring\n    hr = HashRing(nodes=['node1', 'node2', 'node3'])\n\n    # this becomes a 2 nodes consistent hash ring\n    hr.remove_node('node2')\n\n    # add back node2\n    hr.add_node('node2')\n\n    # add node4 with a weight of 10\n    hr.add_node('node4', {'weight': 10})\n\nCustomizable node weight calculation\n------------------------------------\n\n.. code-block:: python\n\n    from uhashring import HashRing\n\n    def weight_fn(**conf):\n        \"\"\"Returns the last digit of the node name as its weight.\n\n        :param conf: node configuration in the ring, example:\n            {\n             'hostname': 'node3',\n             'instance': None,\n             'nodename': 'node3',\n             'port': None,\n             'vnodes': 40,\n             'weight': 1\n            }\n        \"\"\"\n        return int(conf['nodename'][-1])\n\n    # this is a 3 nodes consistent hash ring with user defined weight function\n    hr = HashRing(nodes=['node1', 'node2', 'node3'], weight_fn=weight_fn)\n\n    # distribution with custom weight assignment\n    print(hr.distribution)\n\n    # >>> Counter({'node3': 240, 'node2': 160, 'node1': 80})\n\nCustomizable hash function\n--------------------------\n\n.. code-block:: python\n\n    from uhashring import HashRing\n\n    # import your own hash function (must be a callable)\n    # in this example, MurmurHash v3\n    from mmh3 import hash as m3h\n\n    # this is a 3 nodes consistent hash ring with user defined hash function\n    hr = HashRing(nodes=['node1', 'node2', 'node3'], hash_fn=m3h)\n\n    # now all lookup operations will use the m3h hash function\n    print(hr.get_node('my key hashed by your function'))\n\nHashRing options\n----------------\n- **nodes**: nodes used to create the continuum (see doc for format).\n- **replicas**: number of replicas per node (forced to 4 in compatibility mode).\n- **vnodes**: default number of vnodes per node.\n- **compat**: use a ketama compatible hash calculation (default True).\n- **weight_fn**: user provided function to calculate the node's weight, gets the node conf dict as kwargs.\n\nAvailable methods\n-----------------\n- **add_node(nodename, conf)**: add (or overwrite) the node in the ring with the given config.\n- **get(key)**: returns the node object dict matching the hashed key.\n- **get_key(key)**: alias of ketama hashi method, returns the hash of the given key.\n- **get_instances()**: returns a list of the instances of all the configured nodes.\n- **get_node(key)**: returns the node name of the node matching the hashed key.\n- **get_node_hostname(key)**: returns the hostname of the node matching the hashed key.\n- **get_node_instance(key)**: returns the instance of the node matching the hashed key.\n- **get_node_port(key)**: returns the port of the node matching the hashed key.\n- **get_node_pos(key)**: returns the index position of the node matching the hashed key.\n- **get_node_weight(key)**: returns the weight of the node matching the hashed key.\n- **get_nodes()**: returns a list of the names of all the configured nodes.\n- **get_points()**: returns a ketama compatible list of (position, nodename) tuples.\n- **get_server(key)**: returns a ketama compatible (position, nodename) tuple.\n- **hashi(key)**: returns the hash of the given key (on compat mode, this is the same as libketama).\n- **iterate_nodes(key, distinct)**: hash_ring compatibility implementation, same as range but returns tuples as a generator.\n- **print_continuum()**: prints a ketama compatible continuum report.\n- **range(key, size, unique)**: returns a (unique) list of max (size) nodes' configuration available in the consistent hash ring.\n- **regenerate**: regenerate the ring from the current nodes configuration, useful only when using *weight_fn*.\n- **remove_node(nodename)**: remove the given node from the ring\n\nAvailable properties\n--------------------\n- **conf**: dict of all the nodes and their configuration.\n- **continuum**: same as ring.\n- **distribution**: counter of the nodes distribution in the consistent hash ring.\n- **nodes**: same as conf.\n- **ring**: hash key/node mapping of the consistent hash ring.\n- **size**: size of the consistent hash ring.\n\nIntegration (monkey patching)\n=============================\nYou can benefit from a consistent hash ring using **uhashring** monkey patching on the following libraries:\n\npython-memcached\n----------------\n\n.. code-block:: python\n\n    import memcache\n\n    from uhashring import monkey\n    monkey.patch_memcache()\n\n    mc = memcache.Client(['node1:11211', 'node2:11211'])\n\nInstallation\n============\nPypi\n----\nUsing pip:\n\n.. code-block:: sh\n\n    $ pip install uhashring\n\nGentoo Linux\n------------\nUsing emerge:\n\n.. code-block:: sh\n\n    $ sudo emerge -a uhashring\n\nBenchmark\n=========\nUsage of the ketama compatible hash (default) has some performance impacts.\nContributions are welcome as to ways of improving this !\n\n    There is a big performance gap in the hash calculation between\n    the ketama C binding and its pure python counterpart.\n\n    Python 3 is doing way better than python 2 thanks to its\n    native bytes/int representation.\n\n    Quick benchmark, for 1 million generated ketama compatible keys:\n        - python_ketama C binding: 0.8427069187164307 s\n        - python 2: 5.462762832641602 s\n        - python 3: 3.570068597793579 s\n        - pypy: 1.6146340370178223 s\n\n    When using python 2 and ketama compatibility is not important, you\n    can get a better hashing speed using the other provided hashing.\n\n    hr = HashRing(nodes=[], compat=False)\n\n    Quick benchmark, for 1 million generated hash keys:\n        - python 2: 3.7595579624176025 s\n        - python 3: 3.268343687057495 s\n        - pypy: 1.9193649291992188 s\n\nLiterature\n==========\n- consistent hashing: https://en.wikipedia.org/wiki/Consistent_hashing\n- web caching paper: http://www8.org/w8-papers/2a-webserver/caching/paper2.html\n- research paper: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.23.3738\n- distributed hash table: https://en.wikipedia.org/wiki/Distributed_hash_table\n\nLicense\n=======\nBSD\n",
    "docs_url": null,
    "download_url": "https://github.com/ultrabug/uhashring/tags",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ultrabug/uhashring",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "uhashring",
    "platform": "any",
    "project_url": "https://pypi.org/project/uhashring/",
    "release_url": "https://pypi.org/project/uhashring/0.8/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Consistent hashing implementation compatible with the ketama hash ring.",
    "version": "0.8"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2c4ef947f5da8824a26ef605ea2743cd",
          "sha256": "72d5999006e44a38a1cc0a99e9f5ac81d893948abb32752090936ffd89af7cdb"
        },
        "downloads": 967,
        "filename": "uhashring-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2c4ef947f5da8824a26ef605ea2743cd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11063,
        "upload_time": "2015-10-07T16:14:01",
        "url": "https://files.pythonhosted.org/packages/9c/99/aad58687633fc0bdd8de798f44111794ee3f502fbb7c66e07b13c0bda1fc/uhashring-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "20365943e128cb7f82b84ab5c9c127b4",
          "sha256": "e903d39ec2890e84fb289f1f9a6e8568f9d71e1324511797dee0ef5266222036"
        },
        "downloads": 541,
        "filename": "uhashring-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "20365943e128cb7f82b84ab5c9c127b4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11158,
        "upload_time": "2015-10-15T14:30:21",
        "url": "https://files.pythonhosted.org/packages/08/bf/3ef22c5b36b8373211defa8e7fc60458bb594327adfd050d929d0e1db692/uhashring-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "67ca70ed31aff2930a0b34c64826c920",
          "sha256": "24c497c577469eda89cc0e732bfee4d2f7e020a490287ab526cde8306918fa1f"
        },
        "downloads": 551,
        "filename": "uhashring-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "67ca70ed31aff2930a0b34c64826c920",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11238,
        "upload_time": "2015-10-27T11:30:47",
        "url": "https://files.pythonhosted.org/packages/27/13/0bb6fd92b9e345b7699fcca34564e2c60f60bc04df0122c7138d746553e3/uhashring-0.3.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3ec9b158187ebdb63ea3295fa7a4eac0",
          "sha256": "da0555e752ce259042d2de8ab7b6b07e280bc3532d76a8589e31dcfdc382e031"
        },
        "downloads": 3697,
        "filename": "uhashring-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3ec9b158187ebdb63ea3295fa7a4eac0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11820,
        "upload_time": "2015-11-13T15:56:02",
        "url": "https://files.pythonhosted.org/packages/de/a7/26420bb2a7631a23382828ab6eb74526af10391c93383c33c411c2ba3a3a/uhashring-0.4.tar.gz"
      }
    ],
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4dbdb3b42df00f96bcbd6f37c4ce7ea4",
          "sha256": "330d059ea14dee207c061269a4050258fea0457fbde3bfd0e5b73d91cf3a66a1"
        },
        "downloads": 0,
        "filename": "uhashring-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4dbdb3b42df00f96bcbd6f37c4ce7ea4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10195,
        "upload_time": "2017-07-10T11:07:57",
        "url": "https://files.pythonhosted.org/packages/a3/33/8250f0b88267d95146f41e2e08a989937604918aa08a62ca1dd3b39908b6/uhashring-0.6.tar.gz"
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d83ba0156c9ccb0ace2f221889585f66",
          "sha256": "8f7860c2dd196d8f736810883a2e241ebbd11e54c176cb5fd66782595bb1b3f7"
        },
        "downloads": 0,
        "filename": "uhashring-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "d83ba0156c9ccb0ace2f221889585f66",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10250,
        "upload_time": "2017-07-17T15:03:36",
        "url": "https://files.pythonhosted.org/packages/55/ad/e4888cbdfaa316f91cce6b674da99d1b6fe5c9d215b0446c4f8eb115d617/uhashring-0.7.tar.gz"
      }
    ],
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c122e831f4e4b070de778e27dce632e2",
          "sha256": "9ef2d2de021d332307d176da283efd8c2416ef9e363507a98f69fc48ed3e82e2"
        },
        "downloads": 0,
        "filename": "uhashring-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "c122e831f4e4b070de778e27dce632e2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13202,
        "upload_time": "2017-10-06T15:30:29",
        "url": "https://files.pythonhosted.org/packages/6b/28/dc9eae8b7e4114484e7a5d5299e6bdba0f03326db31f7b6e2b7442af7323/uhashring-0.8.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c122e831f4e4b070de778e27dce632e2",
        "sha256": "9ef2d2de021d332307d176da283efd8c2416ef9e363507a98f69fc48ed3e82e2"
      },
      "downloads": 0,
      "filename": "uhashring-0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "c122e831f4e4b070de778e27dce632e2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 13202,
      "upload_time": "2017-10-06T15:30:29",
      "url": "https://files.pythonhosted.org/packages/6b/28/dc9eae8b7e4114484e7a5d5299e6bdba0f03326db31f7b6e2b7442af7323/uhashring-0.8.tar.gz"
    }
  ]
}