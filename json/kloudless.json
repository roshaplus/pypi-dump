{
  "info": {
    "author": "Kloudless",
    "author_email": "hello@kloudless.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "Python library for the Kloudless API\n====================================\n\nPython library for the `Kloudless\nAPI <https://developers.kloudless.com>`__.\n\nInstallation\n------------\n\nTo install, clone the repository and run:\n\n.. code:: bash\n\n    python setup.py install\n\nYou may also install via pip:\n\n.. code:: bash\n\n    pip install https://github.com/kloudless/kloudless-python/archive/master.zip\n\nDocumentation\n-------------\n\nSee the `Kloudless API Docs <https://developers.kloudless.com/docs>`__\nfor the official reference. You can obtain an API Key at the `Developer\nPortal <https://developers.kloudless.com>`__, or use an authenticated\nuser's Bearer token.\n\nConfiguration\n-------------\n\nConfigure Kloudless using the ``configure`` method on the ``kloudless``\nmodule:\n\n.. code:: python\n\n    >>> import kloudless\n    >>> kloudless.configure(token=\"BEARER TOKEN\")\n    >>> # Or:\n    >>> kloudless.configure(api_key=\"API_KEY\")\n\nHere are the configuration options:\n\n-  ``api_key`` The Kloudless API Key. Will be used instead of the Bearer\n   Token if both are provided.\n-  ``dev_key`` The Kloudless Developer Key. Used to access the\n   Management API.\n-  ``token`` A Kloudless account's Bearer token.\n-  ``api_version`` The API version. (default: ``0``)\n-  ``base_url`` The API Server's URL. (default:\n   ``https://api.kloudless.com``)\n-  ``throttle_retry_strategy``: Defaults to retrying a request with\n   exponential fallback if it is rate-limited, or by checking the\n   Retry-After header in the response. Set to ``None`` to never retry.\n   You can also set this to your own sub-class to handle retries in some\n   custom manner. See ``throttling.py`` for more information.\n-  ``headers``: A dictionary of headers to send on every request.\n   Headers included on individual requests will take precedence. See\n   ``config.py`` for some examples.\n\nResources\n~~~~~~~~~\n\nHere are some of the popular resource classes available:\n\n-  ``Account``\n-  ``File``\n-  ``Folder``\n-  ``Link``\n-  ``Search``\n-  ``Recent``\n-  ``Events``\n-  ``Multipart``\n-  ``Property``\n-  ``Permission``\n-  ``CRMObject``\n\nA full list can be viewed in\n`resources.py <https://github.com/Kloudless/kloudless-python/blob/master/kloudless/resources.py>`__.\n\nEach class has the following methods where applicable:\n\n-  ``create(**data)`` makes a POST request to create a resource of that\n   type.\n-  ``all(**params)`` makes a GET request to list all resources\n-  ``retrieve(id, **params)`` makes a GET request to retrieve metadata\n   for that resource.\n\nIn addition, instances have the methods below where applicable:\n\n-  ``save(**params)`` makes a PATCH request to update the resource after\n   attributes on it have been modified.\n-  ``delete(**params)`` makes a DELETE request to delete the resource.\n\nParameters mentioned above:\n\n-  ``id``: The ID of the resource.\n-  ``params``: Keyword arguments that will be converted into query\n   parameters for the request.\n-  ``data``: Keyword arguments that will be converted into a JSON string\n   sent in the body of the request.\n\nAccessing nested resources\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``Account`` model has some helper attributes to make using class\nmethods easier. For example:\n\n-  ``links`` references the Link class\n-  ``files`` references the File class\n-  ``folders`` references the Folder class\n-  ``search`` references the Search class\n-  ``recent`` references the Recent class\n-  ``events`` references the Events class\n-  ``multipart`` references the Multipart class\n-  ``calendars`` references the Calendar class\n\nA full list can be viewed under the ``Account`` class in\n`resources.py <https://github.com/Kloudless/kloudless-python/blob/master/kloudless/resources.py>`__.\n\nExamples\n--------\n\nBasics\n~~~~~~\n\nHere is an example retrieving metadata on a folder in an account:\n\n.. code:: python\n\n    >>> import kloudless; kloudless.configure(api_key=\"API_KEY\")\n    >>> accounts = kloudless.Account.all()\n    >>> account = accounts[0]\n    >>> root_folder = account.folders()\n    >>> children = root_folder.contents()\n    >>> child_folder = [f for f in children if f.type == 'folder'][0]\n\nThe shortcut method ``account.folders`` is used above, but you can also\ninstantiate the classes above independently:\n\n.. code:: python\n\n    >>> root_folder = kloudless.Folder(id='root', parent_resource=account)\n\nThere are different ways to retrieve information on a resource, given\nit's ID. Here are some examples, given ``account_id`` and\n``child_folder_id`` as the account and folder IDs respectively.\n\n.. code:: python\n\n    # We need to create the account object with an account ID first.\n    >>> account = kloudless.Account(id=account_id)\n\n    # Get the child folder via the \"account.folders\" helper method.\n    >>> account.folders.retrieve(id=child_folder_id)\n\n    # Retrieve the child folder a different way\n    >>> kloudless.Folder.retrieve(id=child_folder.id, parent_resource=account)\n\n    # Retrieve the child folder another way\n    >>> f = kloudless.Folder(id=child_folder.id, parent_resource=account)\n    >>> f.refresh() # Pulls latest metadata given the ID.\n\nAnother example retrieving link information a few different ways:\n\n.. code:: python\n\n    # A few different ways\n    >>> link = kloudless.Link.all(parent_resource=account)[0]\n    >>> link = account.links.retrieve(id=link.id)\n    >>> link = kloudless.Link.retrieve(id=link.id, parent_resource=account)\n    >>> link = kloudless.Link(id=link.id); link.refresh();\n\nMoving a file\n~~~~~~~~~~~~~\n\nHere's an example moving a file from one account to a folder in a\ndifferent account.\n\n.. code:: python\n\n    # Get two cloud storage accounts.\n    >>> accounts = kloudless.Account.all();\n    >>> accounts[0].id\n    10\n    >>> accounts[1].id\n    20\n\n    # Find a file in the first account.\n    >>> root_contents = accounts[0].folders().contents() # Get the root folder contents\n    >>> f = [f for f in root_contents if f.type == 'file'][0] # Get a file\n\n    # Find a folder in the second account.\n    >>> root_contents = accounts[1].folders().contents()\n    >>> folder = [folder for folder in root_contents if folder.type == 'folder'][0]\n\n    # Update the file with new information\n    >>> f.account = accounts[1].id # Moving it to a different account\n    >>> f.name = 'new file name.txt'\n    >>> f.parent_id = folder.id\n    >>> f.save() # Makes the request to move the file.\n\n    # 'f' now represents the new file object.\n\nCalendar API\n~~~~~~~~~~~~\n\nHere is an example calendar and calendar events in an account:\n\n.. code:: python\n\n    >>> import kloudless; kloudless.configure(api_key=\"API_KEY\")\n    >>> accounts = kloudless.Account.all()\n    >>> account = accounts[0]\n    >>> calendars = account.calendars.all()\n\n    # Creating a calendar in an account\n    >>> calendar_data = {\n    ....    \"name\": \"My Test Calendar\",\n    ....    \"description\": \"A test calendar for testing\",\n    ....    \"location\": \"San Francisco, CA\",\n    ....    \"timezone\": \"US/Pacific\"\n    ....}\n    >>> calendar = account.calendars.create(data=calendar_data)\n\n    # Retrieving a calendar in an account\n    >>> calendar = account.calendars.retrieve(id=calendar_id)\n\n    # Updating the calendar with new information\n    >>> calendar.name = \"New Calendar name\"\n    >>> calendar.description = \"New Calendar description\"\n    >>> calendar.save() # Makes the request to update the calendar.\n\n    # Deleting a calendar\n    >>> calendar.delete()\n\n    # Retrieving a list of calendar events\n    >>> events = calendar.events.all()\n\n    # Creating a calendar event\n    >>> event_data = {\n    ....    \"name\": \"Event 2\",\n    ....    \"start\": \"2017-09-01T12:30:00Z\",\n    ....    \"end\": \"2017-09-01T13:30:00Z\",\n    ....    \"creator\": {\n    ....        \"name\": \"Company Owner\",\n    ....        \"email\": \"owner@company.com\"\n    ....    },\n    ....    \"owner\": {\n    ....        \"name\": \"Company Owner\",\n    ....        \"email\": \"owner@company.com\"\n    ....    }\n    ....}\n    >>> event = calendar.events.create(data=event_data)\n\n    # Retrieving a calendar event\n    >>> event = calendar.events.retrieve(id=event_id)\n\n    # Updating the calendar event with new information\n    >>> event.name = \"Event 2 Update\"\n    >>> event.start = \"2017-09-01T12:00:00Z\"\n    >>> event.end = \"2017-09-01T13:00:00Z\"\n    >>> event.save() # Makes the request to update the calendar event.\n\n    # Deleting a calendar\n    >>> event.delete()\n\nApps using the Python SDK\n-------------------------\n\n-  https://github.com/vinodc/cloud-text-editor creates folders and\n   uploads files via the Kloudless API.\n\nTests\n-----\n\nTo install test dependencies, run\n``pip install -r tests/requirements.txt``.\n\nThe tests are written using `py.test <http://pytest.org>`__ and can be\nrun like so (from within this directory):\n\n.. code:: shell\n\n    pip install tox\n    tox\n\nIntegration Tests\n~~~~~~~~~~~~~~~~~\n\nIntegration tests are seperate and can be run collectively or\nindependently within the ``tests/integration/`` directory, with an\nappropriate ``API_KEY`` set in the environment. Here is a full list of\nenvironment variables that can be used to configure the tests:\n\n``API_KEY``: Required. The API Key to use.\n\n``DEV_KEY``: Required if testing the Management API. The Developer Key\nto use.\n\n``BASE_URL``: Optional. Defaults to 'https://api.kloudless.com'.\nConfigures the base URL to use for tests.\n\n``SERVICES``: Optional. A comma-separated list of service names to\nrestrict the services tested.\n\n``ACCOUNTS``: Optional. A comma-separated list of account IDs to\nrestrict the accounts tested.\n\n``REQUESTS_CA_BUNDLE``: Optional. If pointing to a BASE\\_URL secured\nwith a non-trusted root CA certificate, this environment variable can be\npointed to the certificate to trust. See\nhttp://docs.python-requests.org/en/latest/user/advanced/#ssl-cert-verification\nfor more information.\n\n``RUN_LONG_TESTS``: Optional. Defaults to a Falsey value. If Truthy,\ntests which take an extended period of time to run (due to\nwaiting/sleeping), will be included.\n\nExamples:\n\n.. code:: shell\n\n    API_KEY='...' python test.py\n    API_KEY='...' python test_cases/test_link.py\n    API_KEY='...' SERVICES='dropbox' python test_cases/test_link.py\n    API_KEY='...' SERVICES='dropbox,s3,box' python test.py\n    DEV_KEY='...' BASE_URL='...' python management_api/test_application.py\n    API_KEY='...' DEV_KEY='...' BASE_URL='...' python test.py\n\nAn account for each service will be obtained from the API to run tests\nfor.\n\nAcknowledgements\n----------------\n\n-  `requests <https://github.com/kennethreitz/requests>`__ makes the API\n   requests easy.\n-  `stripe-python <https://github.com/stripe/stripe-python>`__ was a\n   useful resource while researching the interface for this API.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://kloudless.com/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "kloudless",
    "platform": "",
    "project_url": "https://pypi.org/project/kloudless/",
    "release_url": "https://pypi.org/project/kloudless/1.1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python library for the Kloudless API",
    "version": "1.1.2"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c37fa1f804df04cff8e11b2056add6e8",
          "sha256": "05975bbc0109bc970a15b955a585061b3b5df1e74ddd101884ba4509e14cfbd3"
        },
        "downloads": 2400,
        "filename": "kloudless-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c37fa1f804df04cff8e11b2056add6e8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9121,
        "upload_time": "2014-04-28T22:00:18",
        "url": "https://files.pythonhosted.org/packages/e5/24/ded75539fa2ac5e9bcc2f9db53f035bdacb15aef1666af32dd4e5ebf9fbb/kloudless-0.1.0.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f5ff70cb238755a192e1e183db704c48",
          "sha256": "b56a40c0567fa9fb566003b4b42b00ae7ac31b51a0a1de67d47da8be89122734"
        },
        "downloads": 0,
        "filename": "kloudless-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f5ff70cb238755a192e1e183db704c48",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14563,
        "upload_time": "2017-04-11T21:07:12",
        "url": "https://files.pythonhosted.org/packages/11/a9/1d9449eaf554535f9d175b5e46d4770b2fe8bb5f01f19f6007e52b0d7e8c/kloudless-1.0.0.tar.gz"
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "650125721895451102d55bcbee700ee3",
          "sha256": "3755e2668754e1b0c6f1475975e1fb6f18839b4675a84f5fcf01afc88f91324e"
        },
        "downloads": 0,
        "filename": "kloudless-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "650125721895451102d55bcbee700ee3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15702,
        "upload_time": "2017-04-11T21:44:54",
        "url": "https://files.pythonhosted.org/packages/b7/98/4d417bbaacc058d764f901880cc6fd108073f659be635e01411c8a77c320/kloudless-1.1.1.tar.gz"
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2e1ec50dedb4904f22b3a510cd0c45e1",
          "sha256": "3a28d4e7c5ea024ebe6d5993ca450f616ce666d911380ec34661568477c33ed5"
        },
        "downloads": 0,
        "filename": "kloudless-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2e1ec50dedb4904f22b3a510cd0c45e1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17190,
        "upload_time": "2017-10-03T20:11:14",
        "url": "https://files.pythonhosted.org/packages/91/f2/056a6279ad08dfe52e0d10fa84b2971f81689ec822d2c5d918a1481b3a6a/kloudless-1.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2e1ec50dedb4904f22b3a510cd0c45e1",
        "sha256": "3a28d4e7c5ea024ebe6d5993ca450f616ce666d911380ec34661568477c33ed5"
      },
      "downloads": 0,
      "filename": "kloudless-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "2e1ec50dedb4904f22b3a510cd0c45e1",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 17190,
      "upload_time": "2017-10-03T20:11:14",
      "url": "https://files.pythonhosted.org/packages/91/f2/056a6279ad08dfe52e0d10fa84b2971f81689ec822d2c5d918a1481b3a6a/kloudless-1.1.2.tar.gz"
    }
  ]
}