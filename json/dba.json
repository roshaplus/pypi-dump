{
  "info": {
    "author": "Olligobber",
    "author_email": "hello@olligobber.timbeaudet.com",
    "bugtrack_url": "",
    "classifiers": [],
    "description": "===\r\ndba\r\n===\r\n\r\n**NOTE** There are builtin functions that do this way better.\r\n\r\n**NOTE2** The encryption is extremely basic. Do not use it for sensitive data.\r\n\r\nWelcome to the dba module, used for simple tasks to do with Decimal, Binary and Ascii data.\r\n\r\nThis module was created by `Olligobber <http://olligobber.timbeaudet.com/>`_.\r\n\r\nIt is not to be modified, and may only be used when attributed to its creator.\r\n\r\nFor more information on the license visit the (broken link).\r\n\r\n\r\nInstallation\r\n============\r\n\r\nPlease ensure you are running Python 2.7. Python 3 will not work. Earlier versions may work.\r\n\r\nDownload the tarball (.tar.gz) free from the `Python Package Index <http://http://pypi.python.org/pypi/dba>`_ or the (broken link).\r\n\r\nExtract the tarball to a folder.\r\n\r\nRun the standard command::\r\n\r\n\tpython setup.py install\r\n\r\nTo do this, open terminal, command line (cmd), or your nearest equivalent.\r\nNavigate to the location of the extracted files.\r\nRun the command above.\r\n\r\nIf you are running on Windows, and the command does not work, try::\r\n\r\n\tsetup.py install\r\n\r\nIf you are running Ubuntu and the command does not work, run as root user (add sudo to start) and see how it goes.\r\n\r\n\r\nChanges\r\n=======\r\n\r\n0.5.1\r\n-----\r\n\r\n* Fixed a bug with dba.ba(bin)\r\n\r\n0.5\r\n---\r\n\r\n* dba.db(0) now works\r\n\r\n* dba.daa now has a maximum length variable, for easily retreiving data that has been saved using dba.daa\r\n\r\n* Added dba.dal(dec), which returns the length of a conversion daa, without doing said conversion\r\n\r\n* Added dba.mss(dat, max) and msl(dat, max) for saving and loading large amounts of data\r\n\r\n* Added a check for Python 2.7\r\n\r\n0.4\r\n---\r\n\r\n* Doc strings make using commands easier.\r\n\r\n* Fixed readme to include links, full titles and nicer variables.\r\n\r\n* Decimal checking and outputs now compatible with long data types, for numbers larger than 999,999,999.\r\n\r\n* Fixed Ascii Reference to be 100% Accurate.\r\n\r\n* Added encryption and decryption.\r\n\r\n0.3\r\n---\r\n\r\n* All modules made more efficient.\r\n\r\n* Removed extra character at the end of ascii reference.\r\n\r\n* Is functions return either True or a message in string form.\r\n\r\n* isd and isb now have a negative = True/False variable.\r\n\r\n* Readme completely rewritten.\r\n\r\n0.2\r\n---\r\n\r\n* As of dba-0.2 no functions require Ascii.txt!\r\n\r\n* Also, dda and add have been renamed to daa and aad.\r\n\r\n\r\nUse\r\n===\r\n\r\nThis module comes with 14 functions, and each one is used slightly differently.\r\n\r\nIs Binary (isb)\r\n---------------\r\n\r\nThis function detects whether an input is a binary number or not.\r\n\r\nIt is called as follows::\r\n\r\n\tdba.isb(Binary, [Allow Fractions, Allow Negatives]) -> True/Error message\r\n\r\nBy default fraction and negative are true.\r\n\r\nBinary input can be anything, and must only contain '1's and '0's, but if fraction is True, it can contain '.'s, and if negative is true, it can contain '-'s. It is recommended binary inputs are strings, to avoid data type issues.\r\n\r\nThe output is either True, meaning the Binary input fitted the requirements, or can be a string, containing the reason for failure.\r\n\r\nTypical usage is::\r\n\r\n\tif dba.isb(binary):\r\n\t\tdostuffto(binary)\r\n\telse:\r\n\t\tprint \"Error: \" + dba.isb(binary)\r\n\r\nIs Decimal (isd)\r\n----------------\r\n\r\nThis function detects whether an input is a decimal number or not.\r\n\r\nIt is called as follows::\r\n\r\n\tdba.isd(Decimal, [Allow Fractions, Allow Negatives, Allow Long]) -> True/Error message\r\n\r\nBy default long and negative are true, and fraction is false. Long and fraction cannot both be true. Choosing long will not work on any fractional input, but choosing fraction will round numbers larger than 9,999,999,999\r\n\r\nDecimal input can be anything, but must be convertible into an integer, a float if fraction is true, or a long integer if long is true. If negative is false, Decimal input cannot be less than zero.\r\n\r\nThe output is either True, meaning the Decimal input fitted the requirements, or can be a string, containing the reason for failure.\r\n\r\nTypical usage is::\r\n\r\n\tif dba.isd(decimal):\r\n\t\tdostuffto(decimal)\r\n\telse:\r\n\t\tprint \"Error: \" + dba.isd(decimal)\r\n\r\nAscii Reference (ar)\r\n--------------------\r\n\r\nThis function returns a string value of each Ascii character used, in order from 0 to 255.\r\n\r\nIt is called as follows::\r\n\r\n\tdba.ar() -> Ascii symbols\r\n\r\nThe Ascii symbols cannot be printed, as some characters cannot be displayed, such as null.\r\n\r\nThe only long term use for this is obtaining the character null as a place holder. Done like so::\r\n\r\n\tdba.ar()[0]\r\n\r\nIs Ascii (isa)\r\n--------------\r\n\r\nThis function detects whether an input is made entirely of Ascii characters.\r\n\r\nIt is called as follows::\r\n\r\n\tdba.isa(Ascii) -> True/Error message\r\n\r\nAscii input can be anything, but every character must be an ascii character in the Ascii Reference. Typically, python will not contain non-ascii symbols, but it is possible.\r\n\r\nThe output is either True, meaning the Ascii input fitted the requirements, or can be a string, containing the reason for failure.\r\n\r\nTypical usage is::\r\n\r\n\tif dba.isa(ascii):\r\n\t\tdostuffto(ascii)\r\n\telse:\r\n\t\tprint \"Error: \" + dba.isa(ascii)\r\n\r\nBinary to Decimal (bd)\r\n----------------------\r\n\r\nThis function converts a binary input into a decimal output.\r\n\r\nIt is called as follows::\r\n\r\n\tdba.bd(Binary) -> Decimal Float/Long\r\n\r\nThe input is checked with using is binary (isb), and supports fractional or negative inputs, and extra zeros on the start and end.\r\n\r\nThe output is a long value, unless a decimal point is present, where it is float.\r\n\r\nDecimal to Binary (db)\r\n----------------------\r\n\r\nThis function converts a decimal input into a binary output.\r\n\r\nIt is called as follows::\r\n\r\n\tdba.db(Decimal, [Minimum Length]) -> Binary String\r\n\r\nThe input is checked using is decimal (isd), and supports fractional or negative inputs, and extra zeroes on the start and end.\r\n\r\nThe output is a string value.\r\n\r\nIf the output is shorter than the specified minimum length, additional zeroes are added to the front. This defaults to 0, meaning no modifications are made.\r\n\r\nDecimal to Ascii (da)\r\n---------------------\r\n\r\nThis function converts a decimal input into a single Ascii character.\r\n\r\nIt is called as follows::\r\n\r\n\tdba.da(Decimal) -> Ascii Symbol\r\n\r\nThe input is checked using is decimal (isd), and must be an integer between 0 and 255 inclusive.\r\n\r\nThe output is a single Ascii character in string format.\r\n\r\nUse of Decimal to Ascii string (daa) is recommended over this, as it converts any positive integer to multiple Ascii characters.\r\n\r\nAscii to Decimal (ad)\r\n---------------------\r\n\r\nThis function converts a single Ascii character into a decimal number.\r\n\r\nIt is called as follows::\r\n\r\n\tdba.ad(Ascii Symbol) -> Decimal Integer\r\n\r\nThe input is checked using is ascii (isa), and must be exactly one character.\r\n\r\nOutput is a decimal number in integer form.\r\n\r\nUse of Ascii string to Decimal (aad) is recommended over this, as it converts a string of characters to decimal.\r\n\r\nBinary to Ascii (ba)\r\n--------------------\r\n\r\nThis function converts a binary input into Ascii characters.\r\n\r\nIt is called as follows::\r\n\r\n\tdba.ba(Binary) -> Ascii String\r\n\r\nThe input is checked using is binary (isb), and may not be a fraction or negative, but may be any length.\r\n\r\nThe output is Ascii characters in string format.\r\n\r\nAscii to Binary (ab)\r\n--------------------\r\n\r\nThis function converts an Ascii input into binary.\r\n\r\nIt is called as follows::\r\n\r\n\tdba.ab(Ascii String) -> Binary String\r\n\r\nInput is checked using is ascii (isa), and may be any length.\r\n\r\nOutput is binary in string format.\r\n\r\nDecimal to Ascii String (daa)\r\n-----------------------------\r\n\r\nThis function converts any decimal number into Ascii characters.\r\n\r\nIt is called as follows::\r\n\r\n\tdba.daa(Decimal, [Maximum Value]) -> Ascii String\r\n\r\nThe input is checked using is decimal (isd), and may not be a fraction or negative, but may be any positive integer.\r\n\r\nThe maximum value defines the highest expected value, and adds zeroes to the front, so multiple values can be seperated.\r\n\r\nThe output is Ascii characters in string format.\r\n\r\nThis would typically be used for compacting numerical data into pure byte code for compression.\r\n\r\nAscii String to Decimal (aad)\r\n-----------------------------\r\n\r\nThis function converts Ascii characters into a decimal number.\r\n\r\nIt is called as follows::\r\n\r\n\tdba.aad(Ascii String) -> Decimal Long Integer\r\n\r\nInput is checked using is ascii (isa), and may be any length.\r\n\r\nThe output is a decimal number in long integer format.\r\n\r\nThis would typically be used to extract numerical data from files compressed by Decimal to Ascii string above.\r\n\r\nMass Save (mss)\r\n---------------\r\n\r\nThis function converts lots of different decimal data into a single Ascii string.\r\n\r\nIt is called as follows::\r\n\r\n\tdba.mss(Decimal Data, Maximum Values) -> Ascii Data\r\n\r\nDecimal data is a list of integers, checked using is decimal (isd), and the maximum values are a list of integers, which are the maximum expected values for corresponding data.\r\n\r\nThe ouput is an Ascii string.\r\n\r\nThis would typically be used for saving all the data of a save file. If a person was level 10 of 100, and ranked 98 of 268, input would be [10, 98], [100, 268], and output would be '\\x00\\n\\x00b' (three bytes).\r\n\r\nMass Load (msl)\r\n---------------\r\n\r\nThis function inverts Mass Save (mss), turning an Ascii String into Decimal data.\r\n\r\nIt is called as follows::\r\n\r\n\tdba.msl(Ascii Data, Maximum Values) -> Decimal Data\r\n\r\nAscii data is the Ascii string outputted by Mass Save (mss), checked using is ascii (isa), and the maximum values are a list of integers, which are the maximum expected values for corresponding data.\r\n\r\nThe output is Decimal data in a list.\r\n\r\nThis would typically be used for loading all the data of a save file. If a person could have any level up to 100, could be ranked up to 268, and the saved data was '\\x00\\n\\x00b', input would be '\\x00\\n\\x00b',[100,268], and output would be [10,98].\r\n\r\nEncrypt (enc)\r\n-------------\r\n\r\nThis function uses very basic logic to encrypt Ascii data into unrecognisable Ascii data, given Ascii key(s).\r\n\r\nIt is called as follows::\r\n\r\n\tdba.enc(Ascii String, Keys) -> Ascii String\r\n\r\nInput is a string checked using is ascii (isa). Keys can be a single string, or a list of strings. Each key is checked using isa.\r\n\r\nThe output is a string.\r\n\r\nThis form of encryption is simple, and as far as I am aware, uncrackable. The resulting data is the same size as the original data, apart from the keys. More keys increase the security slightly, but only while the keys could be found by others.\r\n\r\nIt is not recommended one copies and pastes encrypted data, as it can be lost. Rather, saving to a file or sending directly through networking is recommended. NEVER handwrite encrypted data. The characters can be difficult or impossible to type in again accurately.\r\n\r\nDecrypt (dec)\r\n-------------\r\n\r\nThis function does the opposite of the encryption above to decrypt unrecognisable Ascii data into Ascii data given the correct Ascii key(s).\r\n\r\nIt is called as follows::\r\n\r\n\tdba.dec(Ascii String, Keys) -> Ascii String\r\n\r\nInput is a string checked using is ascii (isa). Keys can be a single string, or a list of strings. Each key is checked using isa.\r\n\r\nThe output is a string.\r\n\r\nKeys must be accurate to the bit for perfect decryption. If a charter in a 10 character key is wrong, every tenth letter in the decrypted data will be wrong.\r\n\r\nUsing dba\r\n=========\r\n\r\nBasically, dba can be used for anything when referenced to Olligobber, at olligobber.timbeaudet.com.\r\n\r\ndba is no longer maintained. The builtin functions do a much better job than this.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://olligobber.timbeaudet.com/",
    "keywords": "",
    "license": "Creative Commons Attribution-NoDerivs 3.0 Unported",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dba",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dba/",
    "release_url": "https://pypi.org/project/dba/0.5.1/",
    "requires_python": null,
    "summary": "For dealing with Decimal, Binary and Ascii",
    "version": "0.5.1"
  },
  "releases": {
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "481dfbb344c14b696b7f15a43e1627e7",
          "sha256": "6b7ab9cc60cb38757ac9965932c3413408f3da8232310a43336a9fd46e719e17"
        },
        "downloads": 2827,
        "filename": "dba-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "481dfbb344c14b696b7f15a43e1627e7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6837,
        "upload_time": "2012-04-14T23:54:37",
        "url": "https://files.pythonhosted.org/packages/9c/8e/067e3cf4386b77151d3e20c4396c6e6315c7a0fdb15a38f0e6630f00362c/dba-0.4.tar.gz"
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "58096b9f73d1a69e812469b1d96c4b15",
          "sha256": "ea5a776a715f3a94022a9f4430f158e94205febaff14c6b6cd7795a3d02c76ab"
        },
        "downloads": 3055,
        "filename": "dba-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "58096b9f73d1a69e812469b1d96c4b15",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7871,
        "upload_time": "2012-06-17T00:54:45",
        "url": "https://files.pythonhosted.org/packages/17/a5/4ce2abfb7e8bd90d7187014f69ca270538f063862eeefdf7151c5530a409/dba-0.5.tar.gz"
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "419783521403b9b27a2197657347114b",
          "sha256": "278d72894e020d4264ff5eac06f87e9b4e641402e4660c3290a4ace60b62d456"
        },
        "downloads": 2574,
        "filename": "dba-0.5.1.linux-x86_64.exe",
        "has_sig": false,
        "md5_digest": "419783521403b9b27a2197657347114b",
        "packagetype": "bdist_wininst",
        "python_version": "any",
        "size": 80946,
        "upload_time": "2012-09-01T04:43:06",
        "url": "https://files.pythonhosted.org/packages/ca/ed/9970e6e29ec790db73c7416b8e6061af746767db155806365c2a8319ab2c/dba-0.5.1.linux-x86_64.exe"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e5d6d6f044508c040cff992b62707d89",
          "sha256": "ab7fe537c6cd7a06ba18a24c4f4d48bc20f02c2b85d0f83cfcf88062ac3b2170"
        },
        "downloads": 2931,
        "filename": "dba-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e5d6d6f044508c040cff992b62707d89",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7890,
        "upload_time": "2012-09-01T04:43:04",
        "url": "https://files.pythonhosted.org/packages/a9/a7/d2f3770cb63734b331c5549fef34b5a9ccf94a61fc4cfd0c7a9d247ad585/dba-0.5.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "419783521403b9b27a2197657347114b",
        "sha256": "278d72894e020d4264ff5eac06f87e9b4e641402e4660c3290a4ace60b62d456"
      },
      "downloads": 2574,
      "filename": "dba-0.5.1.linux-x86_64.exe",
      "has_sig": false,
      "md5_digest": "419783521403b9b27a2197657347114b",
      "packagetype": "bdist_wininst",
      "python_version": "any",
      "size": 80946,
      "upload_time": "2012-09-01T04:43:06",
      "url": "https://files.pythonhosted.org/packages/ca/ed/9970e6e29ec790db73c7416b8e6061af746767db155806365c2a8319ab2c/dba-0.5.1.linux-x86_64.exe"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "e5d6d6f044508c040cff992b62707d89",
        "sha256": "ab7fe537c6cd7a06ba18a24c4f4d48bc20f02c2b85d0f83cfcf88062ac3b2170"
      },
      "downloads": 2931,
      "filename": "dba-0.5.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e5d6d6f044508c040cff992b62707d89",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7890,
      "upload_time": "2012-09-01T04:43:04",
      "url": "https://files.pythonhosted.org/packages/a9/a7/d2f3770cb63734b331c5549fef34b5a9ccf94a61fc4cfd0c7a9d247ad585/dba-0.5.1.tar.gz"
    }
  ]
}