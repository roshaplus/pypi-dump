{
  "info": {
    "author": "Louis Thibault",
    "author_email": "louist87@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Ephemeral:  Encrypted Temporary Files\n========\nEphemeral is a library that adds an encryption layer on top of python's standard ```tempfile``` module.  It provides the same benefits as using ```tempfile`` (i.e.: unlinked files, randomized filenames, delete-on-close behavior) and transparrently encrypts all data using a sessionkey.\n\nWARNING\n========\n\nAlthough I have done my best to release highly-secure code, I remain an amateur coder.  In no circumstances should Ephemeral be used where strong cryptographic security is required.  If you blame me for a catastrophic leak in production code, I will personally:\n\n1. Tie you to a chair.\n2. Break your kneecaps with a tire iron.\n3. Destroy everything you love.\n4. Provide free chips and beverages for all who come watch.\n\nDo not use Ephemeral in production code unless you have the knowledge and experience to audit every last line of code in this library.  If this is the case, please inform me of what you find!\n\nGetting Ephemeral\n========\n\nEphemeral is developed and tested on python version 2.7.  It will most likely work on older versions, but I make no guarantees.  The only external dependency is the ```pycrypto``` module, which is installed automatically if you install through pip or by using ```setup.py```.\n\n###Installing through pip\n\nThe easiest and best way to obtain Ephemeral is through pip.  Only stable versions are published to PyPI.\n\n```pip install ephemeral --user```\n\n###Installing through git\n\nIf you want the latest development version, please clone this repository by issuing the following command:  ```git clone https://github.com/louist87/ephemeral.git```\n\nYou should then install the package with the following commands:\n\n```\ncd ephemeral\nsudo python setup.py install\n```\nUsing Ephemeral\n========\n###Assumptions\n\nEphemeral makes several strong assumptions in its threat model.  The three most important assumptions are:\n\n1. Attackers do not have physical access to the machine executing Ephemeral code.\n1. Attackers are running under a seperate uuid (i.e., keys cannot be read from memory).\n1. Attackers cannot modify ciphertext.\n\nAssumption 1 is more or less standard for storage encryption.  The assumption here is that keys cannot be obtained by manipulating hardware.  Assumptions 2 and 3 essentially defer problems of key storage and ciphertext authentication to operating system permissions.  In other words, it is the responsibility of the user to run ephemeral-dependent apps as apprpriately-isolated users.\n\nRegarding the modification of ciphertext, the ```tempfile``` module implements approaches to render manipulation of temporary files difficult (randomized names and filesystem unlinking).\n\nTo be perfectly explicit:  **There is no cryptographic authentication in ephemeral**.  I do plan to switch from CTR mode to an authenticated mode once:\n\n1. Such modes become available in pycrypto\n2. The CEASAR competition is over\n\n**In summary:**  ephemeral is intended as a mitigation measure against drive theft and undeleting.  It is a simpler (albeit slightly less secure) solution than a ram-based temp directory with an encrypted swap file.  Its main advantage is that it requires no reconfiguring of the operating system, and can be safely employed on end-user machines.\n\n###Basic usage\n\nEphemeral exposes one construct:  the ```EphemeralFile```.  An ephemeral file should be thought of as a superset of ```tempfile.TemporaryFile```.  It accepts the same keyword-arguments as ```TemporaryFile``` and exposes identical methods.  Please refer to the [standard library documentation](http://docs.python.org/2/library/tempfile.html) for details pertaining to these keywords.\n\nIf it isn't already obvious, an ```EphemeralFile``` instance can be used wherever a ```tempfile.TemporaryFile``` instance would normally be used.  An ephemeral file can be instantiated in exactly the same manner as a standard ```TemporaryFile```.\n\n```python\nimport ephemeral\n\nf = ephemeral.EphemeralFile()\nf.write('hello, world')\nf.close()  # file is deleted\n```\n\nNaturally, ```EphemeralFile``` implements a context manager.\n\n```python\nimport ephemeral\n\nwith ephemeral.EphemeralFile() as f:\n    f.write('goodbye, cruel world!')\n```\n\n###Reading raw ciphertext\n\nNormally, there is no need to manipulate ciphertext directly.  For purposes of convenent cryptanalysis, however, ephemeral file objects expose the ```read_ciphertext``` method.  This method behaves exactly like ```file.read``` (it, in fact, *is* ```file.read``` behind the scenes) and outputs raw ciphertext.\n\n###Key length\n\nIn addition to the optional arguments inherited from ```TemporaryFile```, ephemeral files can take an optional ```key_size``` argument, which defaults to `32`.  Supported key sizes are\n\n- 16 (16 bytes = 128 bits)\n- 24 (25 bytes = 192 bits)\n- 32 (32 bytes = 256 bits)\n\nTechnical Details\n========\n\nEphemeral uses AES-CTR with a default key-length of 256 bits.  The counter function is a simple 64-bit integer incrementation function with a 64-bit, randomly-generated, nonce prepended to the counter block (final counter size:  128 bits).",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/louist87/ephemeral",
    "keywords": "cryptography,encryption,file,crypto,AES",
    "license": "GPL 3.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "Ephemeral",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/Ephemeral/",
    "release_url": "https://pypi.org/project/Ephemeral/1.0/",
    "requires_python": null,
    "summary": "Encrypted temporary files using session keys.",
    "version": "1.0"
  },
  "releases": {
    "0.0.1.alpha": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1d82a0cc229c426b89ea71180dfba409",
          "sha256": "cf64d9fad0ff70d98ba596c5cbaa5f3a8af5cfbb504c1462330a1e6a14a990f9"
        },
        "downloads": 2847,
        "filename": "Ephemeral-0.0.1.alpha.tar.gz",
        "has_sig": false,
        "md5_digest": "1d82a0cc229c426b89ea71180dfba409",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3908,
        "upload_time": "2013-05-15T15:03:17",
        "url": "https://files.pythonhosted.org/packages/2c/a1/e323431278b5a6abe576765689c170dab5c8f08aa27536e5ee60394e8284/Ephemeral-0.0.1.alpha.tar.gz"
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5c72c740a3183bd261e5428cf6a15e02",
          "sha256": "534c246fae8afcf43e3fca930f7d8a7631421529404141907df21da37f6c3508"
        },
        "downloads": 2811,
        "filename": "Ephemeral-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5c72c740a3183bd261e5428cf6a15e02",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4673,
        "upload_time": "2013-05-15T15:34:23",
        "url": "https://files.pythonhosted.org/packages/13/15/109e531782acda8aee7b5eb40077f68f20c3826176ac07d7554798afac6d/Ephemeral-1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5c72c740a3183bd261e5428cf6a15e02",
        "sha256": "534c246fae8afcf43e3fca930f7d8a7631421529404141907df21da37f6c3508"
      },
      "downloads": 2811,
      "filename": "Ephemeral-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5c72c740a3183bd261e5428cf6a15e02",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4673,
      "upload_time": "2013-05-15T15:34:23",
      "url": "https://files.pythonhosted.org/packages/13/15/109e531782acda8aee7b5eb40077f68f20c3826176ac07d7554798afac6d/Ephemeral-1.0.tar.gz"
    }
  ]
}