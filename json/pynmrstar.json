{
  "info": {
    "author": "Jon Wedell",
    "author_email": "wedell@bmrb.wisc.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "PyNMRSTAR\n=========\n\nA Python module for reading, writing, and manipulating NMR-STAR files.\n|Build Status|\n\nPython versions supported: 2.6, 2.7, 3.3, 3.4, 3.5, and 3.6\n\n====\n\nCommand line tools\n~~~~~~~~~~~~~~~~~~\n\nWe have developed several command line tools to ease certain common\nactions performed against NMR-STAR files. If you are looking for\ninformation on those please go `here <cmdline/README.md>`__.\n\n====\n\nPyNMRSTAR Overview\n~~~~~~~~~~~~~~~~~~\n\nThis module provides Entry, Saveframe, and Loop objects. Use python's\nbuilt in help function for documentation.\n\nThere are eight module variables you can set to control our behavior.\n\n-  Setting bmrb.VERBOSE to True will print some of what is going on to\n   the terminal.\n\n-  Setting bmrb.RAISE\\_PARSE\\_WARNINGS to True will raise an exception\n   if the parser encounters something problematic. Normally warnings are\n   suppressed.\n\n-  In addition, if you want to ignore some parse warnings but allow the\n   rest, you can specify warnings to ignore by adding the warning to\n   ignore to the \"WARNINGS\\_TO\\_IGNORE\" list.\n\nHere are descriptions of the parse warnings that can be suppressed:\n\n-  \"tag-only-loop\": A loop with no data was found.\n-  \"empty-loop\": A loop with no tags or values was found.\n-  \"tag-not-in-schema\": A tag was found in the entry that was not\n   present in the schema.\n-  \"invalid-null-value\": A tag for which the schema disallows null\n   values had a null value.\n-  \"bad-multiline\": A tag with an improper multi-line value was found.\n   Multiline values should look like this:\n\n.. code:: code\n\n    ;\n    The multi-line\n    value here.\n    ;\n\nbut the tag looked like this:\n\n.. code:: code\n\n    ; The multi-line\n    value here.\n    ;\n\n-  Setting SKIP\\_EMPTY\\_LOOPS to True will suppress the printing of\n   empty loops when calling **str** methods.\n\n-  Adding key->value pairs to STR\\_CONVERSION\\_DICT will automatically\n   convert tags whose value matches \"key\" to the string \"value\" when\n   printing. This allows you to set the default conversion value for\n   Booleans or other objects.\n\n-  Setting bmrb.ALLOW\\_V2\\_ENTRIES will allow parsing of NMR-STAR\n   version 2.1 entries. Most other methods will not operate correctly on\n   parsed 2.1 entries. This is only to allow you parse and access the\n   data in these entries - nothing else. Only set this if you have a\n   really good reason to. Attempting to print a 2.1 entry will 'work'\n   but tags that were after loops will be moved to before loops.\n\n-  Setting bmrb.DONT\\_SHOW\\_COMMENTS to True will supress the printing\n   of comments before saveframes.\n\n-  Setting bmrb.CONVERT\\_DATATYPES to True will automatically convert\n   the data loaded from the file into the corresponding python type as\n   determined by loading the standard BMRB schema. This would mean that\n   all floats will be represented as decimal.Decimal objects, all\n   integers will be python int objects, strings and vars will remain\n   strings, and dates will become datetime.date objects. When printing\n   str() is called on all objects. Other that converting uppercase \"E\"s\n   in scientific notation floats to lowercase \"e\"s this should not cause\n   any change in the way re-printed NMR-STAR objects are displayed.\n\nSome errors will be detected and exceptions raised, but this does not\nimplement a full validator (at least at present).\n\nCall directly (rather than importing) to run a self-test.\n\nVariables\n---------\n\n-  ``ALLOW_V2_ENTRIES``: False\n-  ``CONVERT_DATATYPES``: False\n-  ``DONT_SHOW_COMMENTS``: False\n-  ``RAISE_PARSE_WARNINGS``: False\n-  ``SKIP_EMPTY_LOOPS``: False\n-  ``STR_CONVERSION_DICT``: {None: '.'}\n-  ``VERBOSE``: False\n-  ``WARNINGS_TO_IGNORE``: []\n\nFunctions\n---------\n\ndef ``clean_value(value)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAutomatically quotes the value in the appropriate way. Don't quote\nvalues you send to this method or they will show up in another set of\nquotes as part of the actual data. E.g.:\n\nclean\\_value('\"e. coli\"') returns ''\"e. coli\"''\n\nwhile\n\nclean\\_value(\"e. coli\") returns \"'e. coli'\"\n\nThis will automatically be called on all values when you use a str()\nmethod (so don't call it before inserting values into tags or loops).\n\nBe mindful of the value of STR\\_CONVERSION\\_DICT as it will effect the\nway the value is converted to a string.\n\ndef ``delete_empty_saveframes(entry_object, tags_to_ignore=['sf_category', 'sf_framecode'], allowed_null_values=['.', '?', None])``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis method will delete all empty saveframes in an entry (the loops in\nthe saveframe must also be empty for the saveframe to be deleted).\n\"Empty\" means no values in tags, not no tags present.\n\ndef ``diff(entry1, entry2)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPrints the differences between two entries. Non-equal entries will\nalways be detected, but specific differences detected depends on order\nof entries. ### def ``enable_nef_defaults()``\n\nSets the module variables such that our behavior matches the NEF\nstandard. Specifically, suppress printing empty loops by default and\nconvert True -> \"true\" and False -> \"false\" when printing. ### def\n``enable_nmrstar_defaults()``\n\nSets the module variables such that our behavior matches the BMRB\nstandard (NMR-STAR). This is the default behavior of this module. This\nmethod only exists to revert after calling enable\\_nef\\_defaults().\n\ndef ``validate(entry_to_validate, schema=None)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPrints a validation report of an entry.\n\nClasses\n-------\n\nclass ``Entry()``\n~~~~~~~~~~~~~~~~~\n\nAn OO representation of a BMRB entry. You can initialize this object\nseveral ways; (e.g. from a file, from the official database, from\nscratch) see the class methods below.\n\nMethods:\n\ndef ``__init__()``\n^^^^^^^^^^^^^^^^^^\n\nYou should not directly instantiate an Entry using this method. Instead\nuse the class methods:\" Entry.from\\_database() Entry.from\\_file()\nEntry.from\\_string() Entry.from\\_scratch() Entry.from\\_json()\n\ndef ``add_saveframe(frame)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd a saveframe to the entry.\n\ndef ``compare(other)``\n^^^^^^^^^^^^^^^^^^^^^^\n\nReturns the differences between two entries as a list. Otherwise returns\n1 if different and 0 if equal. Non-equal entries will always be\ndetected, but specific differences detected depends on order of entries.\n\ndef ``frame_dict()``\n^^^^^^^^^^^^^^^^^^^^\n\nReturns a dictionary of saveframe name -> saveframe object\n\ndef ``from_database(cls, entry_num)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate an entry corresponding to the most up to date entry on the public\nBMRB server. (Requires ability to initiate outbound HTTP connections.)\n\ndef ``from_file(cls, the_file)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate an entry by loading in a file. If the\\_file starts with http://,\nhttps://, or ftp:// then we will use those protocols to attempt to open\nthe file.\n\ndef ``from_json(cls, json_dict)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate an entry from JSON (serialized or unserialized JSON).\n\ndef ``from_scratch(cls, entry_id)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate an empty entry that you can programatically add to. You must pass\na value corresponding to the Entry ID. (The unique identifier \"xxx\" from\n\"data\\_xxx\".)\n\ndef ``from_string(cls, the_string)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate an entry by parsing a string.\n\ndef ``get_json(serialize=True)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns the entry in JSON format. If serialize is set to False a\ndictionary representation of the entry that is serializeable is\nreturned.\n\ndef ``get_loops_by_category(value)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAllows fetching loops by category.\n\ndef ``get_saveframe_by_name(frame)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAllows fetching a saveframe by name.\n\ndef ``get_saveframes_by_category(value)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAllows fetching saveframes by category.\n\ndef ``get_saveframes_by_tag_and_value(tag_name, value)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAllows fetching saveframe(s) by tag and tag value.\n\ndef ``get_tag(tag, whole_tag=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGiven a tag (E.g. \\_Assigned\\_chem\\_shift\\_list.Data\\_file\\_name) return\na list of all values for that tag. Specify whole\\_tag=True and the\n[tag\\_name, tag\\_value (,tag\\_linenumber)] pair will be returned.\n\ndef ``get_tags(tags)``\n^^^^^^^^^^^^^^^^^^^^^^\n\nGiven a list of tags, get all of the tags and return the results in a\ndictionary.\n\ndef ``nef_string()``\n^^^^^^^^^^^^^^^^^^^^\n\nReturns a string representation of the entry in NEF.\n\ndef ``normalize(schema=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSorts saveframes, loops, and tags according to the schema provided (or\nBMRB default if none provided) and according to the assigned ID.\n\ndef ``print_tree()``\n^^^^^^^^^^^^^^^^^^^^\n\nPrints a summary, tree style, of the frames and loops in the entry.\n\ndef ``rename_saveframe(original_name, new_name)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRenames a saveframe and updates all pointers to that saveframe in the\nentry with the new name.\n\ndef ``validate(validate_schema=True, schema=None, validate_star=True)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nValidate an entry in a variety of ways. Returns a list of errors found.\n0-length list indicates no errors found. By default all validation modes\nare enabled.\n\nvalidate\\_schema - Determines if the entry is validated against the\nNMR-STAR schema. You can pass your own custom schema if desired,\notherwise the schema will be fetched from the BMRB servers.\n\nvalidate\\_star - Determines if the STAR syntax checks are ran.\n\nclass ``Saveframe()``\n~~~~~~~~~~~~~~~~~~~~~\n\nA saveframe object. Create using the class methods, see below.\n\nMethods:\n\ndef ``__init__()``\n^^^^^^^^^^^^^^^^^^\n\nDon't use this directly. Use the class methods to construct:\nSaveframe.from\\_scratch() Saveframe.from\\_string()\nSaveframe.from\\_template() Saveframe.from\\_file() and\nSaveframe.from\\_json()\n\ndef ``add_loop(loop_to_add)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd a loop to the saveframe loops.\n\ndef ``add_tag(name, value, linenum=None, update=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd a tag to the tag list. Does a bit of validation and parsing. Set\nupdate to true to update a tag if it exists rather than raise an\nexception.\n\ndef ``add_tags(tag_list, update=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdds multiple tags to the list. Input should be a list of tuples that\nare either [key, value] or [key]. In the latter case the value will be\nset to \".\". Set update to true to update a tag if it exists rather than\nraise an exception.\n\ndef ``compare(other)``\n^^^^^^^^^^^^^^^^^^^^^^\n\nReturns the differences between two saveframes as a list. Non-equal\nsaveframes will always be detected, but specific differences detected\ndepends on order of saveframes.\n\ndef ``delete_tag(tag)``\n^^^^^^^^^^^^^^^^^^^^^^^\n\nDeletes a tag from the saveframe based on tag name.\n\ndef ``from_file(cls, the_file, csv=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate a saveframe by loading in a file. Specify csv=True is the file is\na CSV file. If the\\_file starts with http://, https://, or ftp:// then\nwe will use those protocols to attempt to open the file.\n\ndef ``from_json(cls, json_dict)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate a saveframe from JSON (serialized or unserialized JSON).\n\ndef ``from_scratch(cls, sf_name, tag_prefix=None, source=from_scratch())``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate an empty saveframe that you can programatically add to. You may\nalso pass the tag prefix as the second argument. If you do not pass the\ntag prefix it will be set the first time you add a tag.\n\ndef ``from_string(cls, the_string, csv=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate a saveframe by parsing a string. Specify csv=True is the string\nis in CSV format and not NMR-STAR format.\n\ndef ``from_template(cls, category, name=None, all_tags=False, schema=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate a saveframe that has all of the tags and loops from the schema\npresent. No values will be assigned. Specify the category when calling\nthis method. Optionally also provide the name of the saveframe as the\n'name' argument.\n\nThe optional argument 'all\\_tags' forces all tags to be included rather\nthan just the mandatory tags.\n\ndef ``get_data_as_csv(header=True, show_category=True)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturn the data contained in the loops, properly CSVd, as a string. Set\nheader to False omit the header. Set show\\_category to False to omit the\nloop category from the headers.\n\ndef ``get_json(serialize=True)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns the saveframe in JSON format. If serialize is set to False a\ndictionary representation of the saveframe that is serializeable is\nreturned.\n\ndef ``get_loop_by_category(name)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturn a loop based on the loop name (category).\n\ndef ``get_tag(query, whole_tag=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAllows fetching the value of a tag by tag name. Specify whole\\_tag=True\nand the [tag\\_name, tag\\_value] pair will be returned.\n\ndef ``loop_dict()``\n^^^^^^^^^^^^^^^^^^^\n\nReturns a hash of loop category -> loop.\n\ndef ``loop_iterator()``\n^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns an iterator for saveframe loops.\n\ndef ``print_tree()``\n^^^^^^^^^^^^^^^^^^^^\n\nPrints a summary, tree style, of the loops in the saveframe.\n\ndef ``set_tag_prefix(tag_prefix)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSet the tag prefix for this saveframe.\n\ndef ``sort_tags(schema=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSort the tags so they are in the same order as a BMRB schema. Will\nautomatically use the standard schema if none is provided.\n\ndef ``tag_iterator()``\n^^^^^^^^^^^^^^^^^^^^^^\n\nReturns an iterator for saveframe tags.\n\ndef ``validate(validate_schema=True, schema=None, validate_star=True)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nValidate a saveframe in a variety of ways. Returns a list of errors\nfound. 0-length list indicates no errors found. By default all\nvalidation modes are enabled.\n\nvalidate\\_schema - Determines if the entry is validated against the\nNMR-STAR schema. You can pass your own custom schema if desired,\notherwise the schema will be fetched from the BMRB servers.\n\nvalidate\\_star - Determines if the STAR syntax checks are ran.\n\nclass ``Schema()``\n~~~~~~~~~~~~~~~~~~\n\nA BMRB schema. Used to validate STAR files.\n\nMethods:\n\ndef ``__init__(schema_file=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nInitialize a BMRB schema. With no arguments the most up-to-date schema\nwill be fetched from the BMRB FTP site. Otherwise pass a URL or a file\nto load a schema from using the schema\\_file keyword argument.\n\ndef ``add_tag(tag, tag_type, null_allowed, sf_category, loop_flag, after=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdds the specified tag to the tag dictionary. You must provide:\n\n1) The full tag as such: \"\\_Entry\\_interview.Sf\\_category\"\n2) The tag type which is one of the following: \"INTEGER\" \"FLOAT\"\n   \"CHAR(len)\" \"VARCHAR(len)\" \"TEXT\" \"DATETIME year to day\"\n3) A python True/False that indicates whether null values are allowed.\n4) The sf\\_category of the parent saveframe.\n5) A True/False value which indicates if this tag is a loop tag.\n6) Optional: The tag to order this tag behind when normalizing\n   saveframes.\n\ndef ``convert_tag(tag, value, linenum=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nConverts the provided tag from string to the appropriate type as\nspecified in this schema.\n\ndef ``string_representation(search=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nPrints all the tags in the schema if search is not specified and prints\nthe tags that contain the search string if it is.\n\ndef ``val_type(tag, value, category=None, linenum=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nValidates that a tag matches the type it should have according to this\nschema.\n\nclass ``Loop()``\n~~~~~~~~~~~~~~~~\n\nA BMRB loop object. Create using the class methods, see below.\n\nMethods:\n\ndef ``__init__()``\n^^^^^^^^^^^^^^^^^^\n\nYou should not directly instantiate a Loop using this method. Instead\nuse the class methods: Loop.from\\_scratch() Loop.from\\_string()\nLoop.from\\_template() Loop.from\\_file() Loop.from\\_json()\n\ndef ``add_column(name, ignore_duplicates=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd a column to the column list. Does a bit of validation and parsing.\nSet ignore\\_duplicates to true to ignore attempts to add the same tag\nmore than once rather than raise an exception.\n\nYou can also pass a list of column names to add more than one column at\na time.\n\nNote that adding a column only adds a new tag to the list of tags\npresent in this loop. It does not automatically add a column of None\nvalues to the data array if the loop is already populated with data.\n\ndef ``add_data(the_list, rearrange=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd a list to the data field. Items in list can be any type, they will\nbe converted to string and formatted correctly. The list must have the\nsame cardinality as the column names or you must set the rearrange\nvariable to true and have already set all the columns in the loop.\nRearrange will break a longer list into rows based on the number of\ncolumns.\n\ndef ``add_data_by_column(column_id, value)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAdd data to the loop one element at a time, based on column. Useful when\nadding data from SANS parsers.\n\ndef ``clear_data()``\n^^^^^^^^^^^^^^^^^^^^\n\nErases all data in this loop. Does not erase the data columns or loop\ncategory.\n\ndef ``compare(other)``\n^^^^^^^^^^^^^^^^^^^^^^\n\nReturns the differences between two loops as a list. Order of loops\nbeing compared does not make a difference on the specific errors\ndetected.\n\ndef ``delete_data_by_tag_value(tag, value, index_tag=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDeletes all rows which contain the provided value in the provided\ncolumn. If index\\_tag is provided, that column is renumbered starting\nwith 1. Returns the deleted rows.\n\ndef ``filter(tag_list, ignore_missing_tags=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns a new loop containing only the specified tags. Specify\nignore\\_missing\\_tags=True to bypass missing tags rather than raising an\nerror.\n\ndef ``from_file(cls, the_file, csv=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate a saveframe by loading in a file. Specify csv=True if the file is\na CSV file. If the\\_file starts with http://, https://, or ftp:// then\nwe will use those protocols to attempt to open the file.\n\ndef ``from_json(cls, json_dict)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate a loop from JSON (serialized or unserialized JSON).\n\ndef ``from_scratch(cls, category=None, source=from_scratch())``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate an empty saveframe that you can programatically add to. You may\nalso pass the tag prefix as the second argument. If you do not pass the\ntag prefix it will be set the first time you add a tag.\n\ndef ``from_string(cls, the_string, csv=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate a saveframe by parsing a string. Specify csv=True is the string\nis in CSV format and not NMR-STAR format.\n\ndef ``from_template(cls, tag_prefix, all_tags=False, schema=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCreate a loop that has all of the tags from the schema present. No\nvalues will be assigned. Specify the tag prefix of the loop.\n\nThe optional argument all\\_tags forces all tags to be included rather\nthan just the mandatory tags.\n\ndef ``get_columns()``\n^^^^^^^^^^^^^^^^^^^^^\n\nReturn the columns for this entry with the category included. Throws\nValueError if the category was never set.\n\ndef ``get_data_as_csv(header=True, show_category=True)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturn the data contained in the loops, properly CSVd, as a string. Set\nheader to False to omit the header. Set show\\_category to false to omit\nthe loop category from the headers.\n\ndef ``get_data_by_tag(tags=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIdentical to get\\_tag but wraps the results in a list even if only\nfetching one tag. Primarily exists for legacy code.\n\ndef ``get_json(serialize=True)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns the loop in JSON format. If serialize is set to False a\ndictionary representation of the loop that is serializeable is returned.\n\ndef ``get_tag(tags=None, whole_tag=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nProvided a tag name (or a list of tag names), or ordinals corresponding\nto columns, return the selected tags by row as a list of lists.\n\nIf whole\\_tag=True return the full tag name along with the tag value, or\nif dict\\_result=True, as the tag key.\n\nIf dict\\_result=True, return the tags as a list of dictionaries in which\nthe tag value points to the tag.\"\"\"\n\ndef ``print_tree()``\n^^^^^^^^^^^^^^^^^^^^\n\nPrints a summary, tree style, of the loop.\n\ndef ``renumber_rows(index_tag, start_value=1, maintain_ordering=False)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRenumber a given column incrementally. Set start\\_value to initial value\nif 1 is not acceptable. Set maintain\\_ordering to preserve sequence with\noffset.\n\nE.g. 2,3,3,5 would become 1,2,2,4.\n\ndef ``set_category(category)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSet the category of the loop. Useful if you didn't know the category at\nloop creation time.\n\ndef ``sort_rows(tags, key=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSort the data in the rows by their values for a given column or columns.\nSpecify the columns using their names or ordinals. Accepts a list or an\nint/float. By default we will sort numerically. If that fails we do a\nstring sort. Supply a function as key and we will order the elements\nbased on the keys it provides. See the help for sorted() for more\ndetails. If you provide multiple columns to sort by, they are\ninterpreted as increasing order of sort priority.\n\ndef ``sort_tags(schema=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nRearranges the columns and data in the loop to match the order from the\nschema. Uses the BMRB schema unless one is provided.\n\ndef ``validate(validate_schema=True, schema=None, validate_star=True, category=None)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nValidate a loop in a variety of ways. Returns a list of errors found.\n0-length list indicates no errors found. By default all validation modes\nare enabled.\n\nvalidate\\_schema - Determines if the entry is validated against the\nNMR-STAR schema. You can pass your own custom schema if desired,\notherwise the schema will be fetched from the BMRB servers.\n\nvalidate\\_star - Determines if the STAR syntax checks are ran.\n\n.. |Build Status| image:: https://travis-ci.org/uwbmrb/PyNMRSTAR.svg?branch=v2\n   :target: https://travis-ci.org/uwbmrb/PyNMRSTAR",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/uwbmrb/PyNMRSTAR",
    "keywords": "bmrb,parser,nmr,nmrstar,biomagresbank,biological magnetic resonance bank",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pynmrstar",
    "platform": "",
    "project_url": "https://pypi.org/project/pynmrstar/",
    "release_url": "https://pypi.org/project/pynmrstar/2.5.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "PyNMR-STAR provides tools for reading, writing, modifying, and interacting with NMR-STAR files. Maintained by the BMRB.",
    "version": "2.5.1"
  },
  "releases": {
    "2.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2723303a2c1fe85fd235df1d2a23021d",
          "sha256": "0ab4425ad3fa446911296dfde99fd1e0fa64d7524db6195a213bc76c22933603"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.2.2.tar.gz",
        "has_sig": true,
        "md5_digest": "2723303a2c1fe85fd235df1d2a23021d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 441340,
        "upload_time": "2016-11-11T20:28:03",
        "url": "https://files.pythonhosted.org/packages/d8/0f/1836b764a94f5759a80b76f7ba87478ca77e8b08188ac2fd7f565680c187/pynmrstar-2.2.2.tar.gz"
      }
    ],
    "2.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b26313313f47d18457a939450488117d",
          "sha256": "d17fa0bbf2912a9f589dc5e2f027f5cf56b6b24e2be0029dddb1e3bf9aeb9e43"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.2.3.tar.gz",
        "has_sig": true,
        "md5_digest": "b26313313f47d18457a939450488117d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 441864,
        "upload_time": "2016-11-29T17:54:52",
        "url": "https://files.pythonhosted.org/packages/cb/f7/0b53cf584fc15de6604de9373b91e82c668dd02b0421813436df1bc287d7/pynmrstar-2.2.3.tar.gz"
      }
    ],
    "2.2.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1ad438add517b8ca9474ea9918122cdf",
          "sha256": "f50a0ad82e3a930878876c62a0878b4d3f0a6a3749a680e0747fce3e8417b17a"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.2.4.tar.gz",
        "has_sig": true,
        "md5_digest": "1ad438add517b8ca9474ea9918122cdf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 439713,
        "upload_time": "2016-12-05T18:20:24",
        "url": "https://files.pythonhosted.org/packages/8e/a7/6d78ff40a397d1eed88108beda6b2b525d4603143c7f40618e6148cc22f2/pynmrstar-2.2.4.tar.gz"
      }
    ],
    "2.2.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5b2eb98d27a92454039b793e271401c2",
          "sha256": "288930cee2ab27bd0be48c86a8778dd5db6ebc3e98be877098d9700c07deddf0"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.2.5.tar.gz",
        "has_sig": true,
        "md5_digest": "5b2eb98d27a92454039b793e271401c2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 441369,
        "upload_time": "2016-12-15T17:11:32",
        "url": "https://files.pythonhosted.org/packages/57/39/68fa00efc9cb830608cf6a1dd689960050a108c91958cbd673a0ba9f40d6/pynmrstar-2.2.5.tar.gz"
      }
    ],
    "2.2.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e645eeb3ffe1c838c2e528055871eb1d",
          "sha256": "a21ad01d1bc88083ea775ac83caea729b5e5e8fcb2ad164c56d467aeb88ffa91"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.2.6.tar.gz",
        "has_sig": true,
        "md5_digest": "e645eeb3ffe1c838c2e528055871eb1d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 442048,
        "upload_time": "2016-12-15T18:05:17",
        "url": "https://files.pythonhosted.org/packages/ec/0a/5d4047c6c84bf81255a9cd9e1e1d31c87b297af1593d032576c4475e220c/pynmrstar-2.2.6.tar.gz"
      }
    ],
    "2.2.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "167dce77b8bc0ab4c2b5a26c1141315f",
          "sha256": "fd40aa06cafa95b597a8686ca45f7745d4f98995db220ef79630bde2f0a4fd4c"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.2.7.tar.gz",
        "has_sig": true,
        "md5_digest": "167dce77b8bc0ab4c2b5a26c1141315f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 456666,
        "upload_time": "2017-02-08T12:52:36",
        "url": "https://files.pythonhosted.org/packages/72/99/26fee28186aed4e2efb76e4d74ec5b9fb1acdee5f6d48197a3f2329166f4/pynmrstar-2.2.7.tar.gz"
      }
    ],
    "2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0164a9273b7d9e10842b1141744c4837",
          "sha256": "ea0948cb6be7ee2918e153bebd822893563f7fddf7f8e9d4bfdf5bb78d63dd9d"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.3.tar.gz",
        "has_sig": true,
        "md5_digest": "0164a9273b7d9e10842b1141744c4837",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 457421,
        "upload_time": "2017-02-24T19:59:21",
        "url": "https://files.pythonhosted.org/packages/6f/94/d80d0057459bab23e6e6bfcc14623a8831daad3a36e1171e5811b683b8f4/pynmrstar-2.3.tar.gz"
      }
    ],
    "2.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "712eb620d5e4c27516e8bc36000016a9",
          "sha256": "14b61142c1803adc05a22c3741e4cf6345ab1af3a28afb81a5137242849026fd"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.3.1.tar.gz",
        "has_sig": true,
        "md5_digest": "712eb620d5e4c27516e8bc36000016a9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 455136,
        "upload_time": "2017-03-02T20:40:20",
        "url": "https://files.pythonhosted.org/packages/25/16/5071317a45ac7d2e7b6f9022ff597c1294f15fcfa005cef7e31a7c4cff15/pynmrstar-2.3.1.tar.gz"
      }
    ],
    "2.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2406ab8e8c69218fac1ffcc0ef83cab9",
          "sha256": "b10aae964b2ed166f08b496d9120d6cee44150d1bdaf12565612c2cdae192ae3"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.3.2.tar.gz",
        "has_sig": true,
        "md5_digest": "2406ab8e8c69218fac1ffcc0ef83cab9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 457405,
        "upload_time": "2017-03-09T18:27:47",
        "url": "https://files.pythonhosted.org/packages/e6/1c/0da167a442b9c0b4d61dd02cbb14e1aaf544c3cd69e6e3da7c2ccb243913/pynmrstar-2.3.2.tar.gz"
      }
    ],
    "2.3.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "413d2db33b37082faa5a0dea2c424161",
          "sha256": "079adea18e48514bb4ad267b5e4f999ef76d456d220f21859bd2cf5be6b99231"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.3.3.tar.gz",
        "has_sig": true,
        "md5_digest": "413d2db33b37082faa5a0dea2c424161",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 454127,
        "upload_time": "2017-03-21T17:37:41",
        "url": "https://files.pythonhosted.org/packages/1d/94/aee808aad96131c54820aedb5f9b12e6c563f7420e1a03caa4b186c78f5a/pynmrstar-2.3.3.tar.gz"
      }
    ],
    "2.3.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b3d77081d322f6f1a1cdc5dc97153b4d",
          "sha256": "fb047ef2c0ff866dcac1cad1ae48f4407b8b9fc6b1ba327bcd8a35c4dbfdd5bd"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.3.4.tar.gz",
        "has_sig": true,
        "md5_digest": "b3d77081d322f6f1a1cdc5dc97153b4d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 454132,
        "upload_time": "2017-06-01T13:45:51",
        "url": "https://files.pythonhosted.org/packages/44/2e/692bff3d74bee2830002fd1aae1944580dd038a483cf0545daaed5b2e57a/pynmrstar-2.3.4.tar.gz"
      }
    ],
    "2.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "17ebecef12194d2a1686101867d02fa7",
          "sha256": "1ba03f383c4510a3733e933796888d1c1d1b2c60c6c62bcdb5289da7c4126fb1"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.4.tar.gz",
        "has_sig": true,
        "md5_digest": "17ebecef12194d2a1686101867d02fa7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 454515,
        "upload_time": "2017-07-24T20:08:58",
        "url": "https://files.pythonhosted.org/packages/c6/65/d6f82f7762d0cab8ace4a7aacceb8076fdcbe6c9c97dce10c7e1f28960c1/pynmrstar-2.4.tar.gz"
      }
    ],
    "2.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b248bdeed980a617e93e5276aa3ef397",
          "sha256": "449d72e584a4da6740ad755acabbd0d0a0687829fffb9d1482912b1e4cc6b406"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.4.1.tar.gz",
        "has_sig": true,
        "md5_digest": "b248bdeed980a617e93e5276aa3ef397",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 459624,
        "upload_time": "2017-09-01T16:12:55",
        "url": "https://files.pythonhosted.org/packages/66/a5/d8c461be041e4555cf33ca159e82916db7f4ecdb805600653a9ad723849e/pynmrstar-2.4.1.tar.gz"
      }
    ],
    "2.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3fd401acdc2064c2c602ac143f9df512",
          "sha256": "3e11cf36a998c8cd60adaf76863f080105fe3100408866139d9c7303b2fea7a4"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.4.2.tar.gz",
        "has_sig": true,
        "md5_digest": "3fd401acdc2064c2c602ac143f9df512",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 462064,
        "upload_time": "2017-09-01T17:10:24",
        "url": "https://files.pythonhosted.org/packages/61/07/48b7ca8d77a0c7e73e1544871f8bd1b3b49c121f24366897aa8ac0f34eff/pynmrstar-2.4.2.tar.gz"
      }
    ],
    "2.4.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3da6406e73a48d33f6978445697a2681",
          "sha256": "4eaa75023a7f7228d752fa249635c50677914f49bb5c3e3d86b2d2b85da584d0"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.4.3.tar.gz",
        "has_sig": true,
        "md5_digest": "3da6406e73a48d33f6978445697a2681",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 456113,
        "upload_time": "2017-09-01T18:53:51",
        "url": "https://files.pythonhosted.org/packages/da/e7/5eae8010bd04b7dfeb149d8ce54f145af6f8a346894a3791024fc60cb78b/pynmrstar-2.4.3.tar.gz"
      }
    ],
    "2.4.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "792c4f2f51496b05e13d708d73f08015",
          "sha256": "66ca9a8bc8bff696f3451a5b470c112208626e5aa0faad2d50104e934d64cf74"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.4.4.tar.gz",
        "has_sig": true,
        "md5_digest": "792c4f2f51496b05e13d708d73f08015",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 467052,
        "upload_time": "2017-09-14T15:37:50",
        "url": "https://files.pythonhosted.org/packages/8d/30/8d75f1ec9d51b525c67a3658ad60b7db580ae78dc4181cf2e0eab1f37ad7/pynmrstar-2.4.4.tar.gz"
      }
    ],
    "2.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bbc303987755285bc28d9bb2ba5e8249",
          "sha256": "14cb09068ec466fa9ff6d403c50322f1ca82ccf57cd5228fdaca8d00924cb95f"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.5.tar.gz",
        "has_sig": true,
        "md5_digest": "bbc303987755285bc28d9bb2ba5e8249",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 463241,
        "upload_time": "2017-10-13T15:06:10",
        "url": "https://files.pythonhosted.org/packages/3b/81/971470f8b4211b8841b11f4c6612be7ffc7564cd06a60744fb847d2d06c2/pynmrstar-2.5.tar.gz"
      }
    ],
    "2.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4365b125431e35160f673b25adaac220",
          "sha256": "f5f89d67335f547ab50fe0452b4cb67adf93f2f55957be3c36327580eb5b0c94"
        },
        "downloads": -1,
        "filename": "pynmrstar-2.5.1.tar.gz",
        "has_sig": true,
        "md5_digest": "4365b125431e35160f673b25adaac220",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 459874,
        "upload_time": "2017-12-14T18:34:34",
        "url": "https://files.pythonhosted.org/packages/fb/72/d2d588172203f753f74b31d16bd79b11a05d0a4fd1612e88e490b574bc19/pynmrstar-2.5.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4365b125431e35160f673b25adaac220",
        "sha256": "f5f89d67335f547ab50fe0452b4cb67adf93f2f55957be3c36327580eb5b0c94"
      },
      "downloads": -1,
      "filename": "pynmrstar-2.5.1.tar.gz",
      "has_sig": true,
      "md5_digest": "4365b125431e35160f673b25adaac220",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 459874,
      "upload_time": "2017-12-14T18:34:34",
      "url": "https://files.pythonhosted.org/packages/fb/72/d2d588172203f753f74b31d16bd79b11a05d0a4fd1612e88e490b574bc19/pynmrstar-2.5.1.tar.gz"
    }
  ]
}