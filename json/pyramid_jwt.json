{
  "info": {
    "author": "Wichert Akkerman",
    "author_email": "wichert@wiggy.net",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: DFSG approved",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "JWT authentication for Pyramid\n==============================\n\nThis package implements an authentication policy for Pyramid that using  `JSON\nWeb Tokens <http://jwt.io/>`_. This standard (`RFC 7519\n<https://tools.ietf.org/html/rfc7519>`_) is often used to secure backens APIs.\nThe excellent `PyJWT <https://pyjwt.readthedocs.org/en/latest/>`_ library is\nused for the JWT encoding / decoding logic.\n\nEnabling JWT support in a Pyramid application is very simple:\n\n.. code-block:: python\n\n   from pyramid.config import Configurator\n   from pyramid.authorization import ACLAuthorizationPolicy\n\n   def main():\n       config = Configurator()\n       # Pyramid requires an authorization policy to be active.\n       config.set_authorization_policy(ACLAuthorizationPolicy())\n       # Enable JWT authentication.\n       config.include('pyramid_jwt')\n       config.set_jwt_authentication_policy('secret')\n\nThis will set a JWT authentication policy using the `Authorization` HTTP header\nwith a `JWT` scheme to retrieve tokens. Using another HTTP header is trivial:\n\n.. code-block:: python\n\n    config.set_jwt_authentication_policy('secret', http_header='X-My-Header')\n\nTo make creating valid tokens easier a new ``create_jwt_token`` method is\nadded to the request. You can use this in your view to create tokens. A simple\nauthentication view for a REST backend could look something like this:\n\n.. code-block:: python\n\n    @view_config('login', request_method='POST', renderer='json')\n    def login(request):\n        login = request.POST['login']\n        password = request.POST['password']\n        user_id = authenticate(login, password)  # You will need to implement this.\n        if user_id:\n            return {\n                'result': 'ok',\n                'token': request.create_jwt_token(user_id)\n            }\n        else:\n            return {\n                'result': 'error'\n            }\n\nSince JWT is typically used via HTTP headers and does not use cookies the\nstandard ``remember()`` and ``forget()`` functions from Pyramid are not useful.\nTrying to use them while JWT authentication is enabled will result in a warning.\n\n\nExtra claims\n------------\n\nNormally pyramid_jwt only makes a single JWT claim: the *subject* (or\n``sub`` claim) is set to the principal. You can also add extra claims to the\ntoken by passing keyword parameters to the ``create_jwt_token`` method.\n\n.. code-block:: python\n\n   token = request.create_jwt_token(user.id,\n       name=user.name,\n       admin=(user.role == 'admin'))\n\n\nAll claims found in a JWT token can be accessed through the ``jwt_claims``\ndictionary property on a request. For the above example you can retrieve the\nname and admin-status for the user directly from the request:\n\n.. code-block:: python\n\n   print('User id: %d' % request.authenticated_userid)\n   print('Users name: %s', request.jwt_claims['name'])\n   if request.jwt_claims['admin']:\n      print('This user is an admin!')\n\nKeep in mind that data ``jwt_claims`` only reflects the claims from a JWT\ntoken and do not check if the user is valid: the callback configured for the\nauthentication policy is *not* checked. For this reason you should always use\n``request.authenticated_userid`` instead of ``request.jwt_claims['sub']``.\n\nYou can also use extra claims to manage extra principals for users. For example\nyou could claims to represent add group membership or roles for a user. This\nrequires two steps: first add the extra claims to the JWT token as shown above,\nand then use the authentication policy's callback hook to turn the extra claim\ninto principals. Here is a quick example:\n\n.. code-block:: python\n\n   def add_role_principals(userid, request):\n      return ['role:%s' % role for role in request.jwt_claims.get('roles', [])]\n\n   config.set_jwt_authentication_policy(callback=add_role_principals)\n\n\nYou can then use the role principals in an ACL:\n\n.. code-block:: python\n\n   class MyView:\n       __acl__ = [\n           (Allow, Everyone, ['read']),\n           (Allow, 'role:admin', ['create', 'update']),\n       ]\n\nValidation Example\n------------------\n\nAfter creating and returning the token through your API with\n``create_jwt_token`` you can test by issuing an HTTP authorization header type\nfor JWT.\n\n.. code-block:: text\n\n   GET /resource HTTP/1.1\n   Host: server.example.com\n   Authorization: JWT eyJhbGciOiJIUzI1NiIXVCJ9...TJVA95OrM7E20RMHrHDcEfxjoYZgeFONFh7HgQ\n\nWe can test using curl.\n\n.. code-block:: bash\n\n   curl --header 'Authorization: JWT TOKEN' server.example.com/ROUTE_PATH\n\n.. code-block:: python\n\n   config.add_route('example', '/ROUTE_PATH')\n   @view_config(route_name=example)\n   def some_action(request):\n       if request.authenticated_userid:\n           # Do something\n\n\nSettings\n--------\n\nThere are a number of flags that specify how tokens are created and verified.\nYou can either set this in your .ini-file, or pass/override them directly to the\n``config.set_jwt_authentication_policy()`` function.\n\n+--------------+-----------------+---------------+--------------------------------------------+\n| Parameter    | ini-file entry  | Default       | Description                                |\n+==============+=================+===============+============================================+\n| private_key  | jwt.private_key |               | Key used to hash or sign tokens.           |\n+--------------+-----------------+---------------+--------------------------------------------+\n| public_key   | jwt.public_key  |               | Key used to verify token signatures. Only  |\n|              |                 |               | used with assymetric algorithms.           |\n+--------------+-----------------+---------------+--------------------------------------------+\n| algorithm    | jwt.algorithm   | HS512         | Hash or encryption algorithm               |\n+--------------+-----------------+---------------+--------------------------------------------+\n| expiration   | jwt.expiration  |               | Number of seconds (or a datetime.timedelta |\n|              |                 |               | instance) before a token expires.          |\n+--------------+-----------------+---------------+--------------------------------------------+\n| leeway       | jwt.leeway      | 0             | Number of seconds a token is allowed to be |\n|              |                 |               | expired before it is rejected.             |\n+--------------+-----------------+---------------+--------------------------------------------+\n| http_header  | jwt.http_header | Authorization | HTTP header used for tokens                |\n+--------------+-----------------+---------------+--------------------------------------------+\n| auth_type    | jwt.auth_type   | JWT           | Authentication type used in Authorization  |\n|              |                 |               | header. Unused for other HTTP headers.     |\n+--------------+-----------------+---------------+--------------------------------------------+\n| json_encoder |                 | None          | A subclass of JSONEncoder to be used       |\n|              |                 |               | to encode principal and claims infos.      |\n+--------------+-----------------+---------------+--------------------------------------------+\n\nChangelog\n=========\n\n1.2 - May 25, 2017\n------------------\n\n- Fix a `log.warn` deprecation warning on Python 3.6.\n\n- Documentation improvements, courtesy of `\u00c9ric Araujo <https://github.com/merwok>`_\n  and `Guillermo Cruz <https://github.com/webjunkie01>`_.\n\n- `Pull request #10 <https://github.com/wichert/pyramid_jwt/pull/10>`_\n  Allow use of a custom JSON encoder.\n  Submitted by `Julien Meyer <https://github.com/julienmeyer>`_.\n\n\n1.1 - May 4, 2016\n-----------------\n\n- `Issue #2 <https://github.com/wichert/pyramid_jwt/issues/2>`_:\n  Support setting and reading extra claims in a JWT token.\n\n- `Pull request #4 <https://github.com/wichert/pyramid_jwt/pull/4>`_:\n  Fix parsing of expiration and leeway settings from a configuration value.\n  Submitted by `Daniel Kraus <https://github.com/dakra>`_.\n\n- `Pull request #3 <https://github.com/wichert/pyramid_jwt/pull/3>`_:\n  Allow overriding the expiration timestamp for a token when creating a new\n  token. Submitted by `Daniel Kraus`_.\n\n\n1.0 - December 17, 2015\n-----------------------\n\n- First release\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/wichert/pyramid_jwt",
    "keywords": "Pyramid JWT authentication security",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyramid_jwt",
    "platform": "",
    "project_url": "https://pypi.org/project/pyramid_jwt/",
    "release_url": "https://pypi.org/project/pyramid_jwt/1.2/",
    "requires_python": "",
    "summary": "JWT authentication policy for Pyramid",
    "version": "1.2"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8e1dafb07a6a7f8e24cbd63742115f77",
          "sha256": "c071a9320e13e44c5cfa47a64032402877e95e7c36c048b158662b63d7382b4b"
        },
        "downloads": 942,
        "filename": "pyramid_jwt-1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8e1dafb07a6a7f8e24cbd63742115f77",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 7332,
        "upload_time": "2015-12-17T09:36:10",
        "url": "https://files.pythonhosted.org/packages/d6/80/878f9521ea9fda5a82320ef84f5c4e79c612780f1a947435b2ca9aee1265/pyramid_jwt-1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e80e834ac46c7cf547dc5ea5aa0322eb",
          "sha256": "1e93e9660ae53ed1d700a06dab55872c64760ba7358b422ef99d9fbbf48650cc"
        },
        "downloads": 409,
        "filename": "pyramid_jwt-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e80e834ac46c7cf547dc5ea5aa0322eb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5653,
        "upload_time": "2015-12-17T09:35:59",
        "url": "https://files.pythonhosted.org/packages/6a/2b/095d1559b2ac400df19073853e64a9e276ac0946c9bf207b9eba3d330994/pyramid_jwt-1.0.tar.gz"
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6d4a809016ff2786d6acad4ac1fc7b9e",
          "sha256": "7172aa97258aadd828e4b04eb76977fd4d7384a743be34b01d2806e92c083fa3"
        },
        "downloads": 4170,
        "filename": "pyramid_jwt-1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d4a809016ff2786d6acad4ac1fc7b9e",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 8738,
        "upload_time": "2016-05-04T10:01:37",
        "url": "https://files.pythonhosted.org/packages/d0/e1/4d0e3d7836eace4c5f34b8aa14f1003e4c24ab913da537848ac12d731d0f/pyramid_jwt-1.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d93eb0513f05cd52f59bacdca7a5efa3",
          "sha256": "d0e2e4651a7f7f4ad093679613bc43baafd3e752a63dac3990003dd0e8f5a03d"
        },
        "downloads": 432,
        "filename": "pyramid_jwt-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d93eb0513f05cd52f59bacdca7a5efa3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6676,
        "upload_time": "2016-05-04T10:01:30",
        "url": "https://files.pythonhosted.org/packages/46/24/8585b7d6ccb12f22f26bc27b4ec09feba078752ffb9b1214b40f45e850cf/pyramid_jwt-1.1.tar.gz"
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "43a678e2a83c0743e9c5e5c173ebf6f5",
          "sha256": "6d6531e03b4bf1bb985240c9928ad9db1585c4e053ec1fde2ce6f282aebc8064"
        },
        "downloads": 0,
        "filename": "pyramid_jwt-1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "43a678e2a83c0743e9c5e5c173ebf6f5",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 10101,
        "upload_time": "2017-05-25T11:16:29",
        "url": "https://files.pythonhosted.org/packages/89/62/b1d96aaca028a3135ae44dff31929d5e80d9594330f9c482e2de418bfb5a/pyramid_jwt-1.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "74af040fdc1d41b1ea3aa2d340b7a06d",
          "sha256": "2a364257dd2785ca8d1ed10adc0aff66c864c366e8dc40a47f0d58c2a5b56e63"
        },
        "downloads": 0,
        "filename": "pyramid_jwt-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "74af040fdc1d41b1ea3aa2d340b7a06d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8859,
        "upload_time": "2017-05-25T11:16:32",
        "url": "https://files.pythonhosted.org/packages/89/93/b4f28123276af85cd1acfe8f0e7b40ab116e38e627ae4427e91775f840a6/pyramid_jwt-1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "43a678e2a83c0743e9c5e5c173ebf6f5",
        "sha256": "6d6531e03b4bf1bb985240c9928ad9db1585c4e053ec1fde2ce6f282aebc8064"
      },
      "downloads": 0,
      "filename": "pyramid_jwt-1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "43a678e2a83c0743e9c5e5c173ebf6f5",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "size": 10101,
      "upload_time": "2017-05-25T11:16:29",
      "url": "https://files.pythonhosted.org/packages/89/62/b1d96aaca028a3135ae44dff31929d5e80d9594330f9c482e2de418bfb5a/pyramid_jwt-1.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "74af040fdc1d41b1ea3aa2d340b7a06d",
        "sha256": "2a364257dd2785ca8d1ed10adc0aff66c864c366e8dc40a47f0d58c2a5b56e63"
      },
      "downloads": 0,
      "filename": "pyramid_jwt-1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "74af040fdc1d41b1ea3aa2d340b7a06d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8859,
      "upload_time": "2017-05-25T11:16:32",
      "url": "https://files.pythonhosted.org/packages/89/93/b4f28123276af85cd1acfe8f0e7b40ab116e38e627ae4427e91775f840a6/pyramid_jwt-1.2.tar.gz"
    }
  ]
}