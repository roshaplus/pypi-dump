{
  "info": {
    "author": "Andras Maroy",
    "author_email": "andras@maroy.hu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# pconf\n\n[![Build Status](https://api.travis-ci.org/andrasmaroy/pconf.svg?branch=master)](https://travis-ci.org/andrasmaroy/pconf)\n[![Code Coverage](https://codecov.io/gh/andrasmaroy/pconf/branch/master/graph/badge.svg)](https://codecov.io/gh/andrasmaroy/pconf)\n\nHierarchical python configuration with files, environment variables, command-line arguments. Inspired by [nconf](https://github.com/indexzero/nconf).\n\n## Example\n\n``` python\nfrom pconf import Pconf\nimport json\n\n\"\"\"\nSetup pconf config source hierarchy as:\n  1. Environment variables\n  2. A JSON file located at 'path/to/config.json'\n\"\"\"\nPconf.env()\nPconf.file('path/to/config.json', encoding='json')\n\n# Get all the config values parsed from the sources\nconfig = Pconf.get()\n\n# Just print everything nicely\nprint json.dumps(config, sort_keys=True, indent=4)\n```\nRun the above script:\n``` bash\npython example.py\n```\nThe output should be something like this:\n```\n{\n    \"HOSTNAME\": \"bb30700d22d8\",\n    \"TERM\": \"xterm\",\n    \"PATH\": \"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\",\n    \"PWD\": \"/\",\n    \"SHLVL\": \"1\",\n    \"HOME\": \"/root\",\n    \"no_proxy\": \"*.local, 169.254/16\",\n    \"_\": \"/usr/bin/env\",\n    \"example\": {\n        \"another\": \"stuff\",\n        \"key\": \"value\"\n    }\n}\n```\n\n## Hierarchical configuration\nPconf is designed to be used with multiple sources of configuration values with the user being able define the priority of each of these as a hierarchy. The supported sources described below can be setup in any order without any hardcoded defaults. Priority meaning if a configuration key appears in multiple sources the value from the sources higher up in the hierarchy takes precedence. The order in which the sources are attached defines the priority in the hierarchy.\n\nThe available sources (more details about the below) in a sensible order:\n1. **overrides** - Loads data passed to it\n2. **argv** - Parses command line arguments to the process\n3. **env** - Parses environment variables\n4. **file** - Parses config files of various formats\n5. **defaults** - Loads data passed to it\n\n## Config sources\n\n### Defaults, overrides\nThese two sources are essentially the same, pass a `dict` to when attaching and they will return that when queried.\n``` python\nPconf.overrides({'key': 'override_value'})\nPconf.defaults({'key': 'default_value'})\n```\nVery simple, as the name suggests these are to allow the user to set defaults and override whatever value.\n\n### Argv\nResponsible for loading values parsed from command line arguments passed to the process. Parameters passed to the process, but not described to be parsed as below are ignored.\n\nParsed arguments can be defined with the following parameters:\n* `name`: the long name of the argument\n* `short_name`: the *optional* short name of the argument (f)\n* `type`: the *optional* type of the argument (str)\n* `help`: the *optional* help text for the argument\n\n``` python\nPconf.argv('--test_argument')\nPconf.argv('--privileged', type=bool)\nPconf.argv('--threads', short_name='-c', type=int)\nPconf.argv('--verbose', short_name='-v', type=bool, help='Run in verbose mode')\n```\nThese could be used like:\n``` bash\npython example.py --test_argument=hello_world -v --threads 4\n```\n\n### Env\nResponsible for loading values parsesd from `os.environ` into the configuration hierarchy.\n``` python\n# Just load all the variables available for the process\nPconf.env()\n\n# A separator can be specified for nested keys\nPconf.env(separator='__')\n# This turns the 'log__file=/log' env variable into the `{'log': {'file': '/log'}}` dict\n\n# Available variables can be whitelisted\nPconf.env(whitelist=['only', 'load', 'variables', 'listed', 'here'])\n\n# A regular expression can be specified for matching keys also\n# Keys matched by this expression are considered whitelisted\nPconf.env(match='^REGEX.*')\n\n# Use all at once\nPconf.env(separator='__',\n          match='whatever_matches_this_will_be_whitelisted',\n          whitelist=['whatever', 'doesnt', 'match', 'but', 'is', 'whitelisted', 'gets', 'loaded', 'too'])\n```\n\n### File\nResponsible for loading values parsed from a given file into the configuration hierarchy.\n\nBy default tries to parse file contents as literal python variables, use the `encoding` parameter to set the file format/encoding.\n``` python\n\"\"\"\n`/path/to/literal` contents:\n{'this': 'is_a_literal_python_dict'}\n\"\"\"\nPconf.file('/path/to/literal')\n```\n\n#### Built-in encodings:\nThese are the built-in supported encodings, that can be passed as the `encoding` parameter to the function.\n* json\n    ``` python\n    \"\"\"\n    `/path/to/config.json` contents:\n    {\n        \"example\": {\n            \"key\": \"value\",\n            \"another\": \"stuff\"\n        }\n    }\n    \"\"\"\n    Pconf.file('/path/to/config.json', encoding='json')\n    ```\n* yaml\n    ``` python\n    \"\"\"\n    `/path/to/config.yaml` contents:\n    ---\n    example:\n      key: value\n      another: stuff\n    \"\"\"\n    Pconf.file('/path/to/config.yaml', encoding='yaml')\n    ```\n\n#### Using custom file formats\nTo use custom encodings supply a parser along with an encoding that is not built-in. The parser is a function that expects the file contents as its argument and returns a dict containing the parsed contents.\n``` python\ndef custom_parser(file_contents):\n    return {'example': file_contents}\n\nPconf.file('/path/to/custom/file', encoding='example', parser=custom_parser)\n```\n\n## Getting the config values\nUse the `get` method to get the processed config values. The method returns all the values as a python dictionary, with nested values and all. Values can be accessed as expected from a `dict`.\n\n``` python\nconfig = Pconf.get()\n\nprint config['key']\n```\n\n## Run Tests\nTest are written using the standard python unittest framework.\nFirst install the dev requirements:\n```bash\npip install -r requirements-dev.txt\n```\nRun the tests from the repository root like so:\n```bash\npy.test\n```\n\n#### Author: [Andras Maroy](https://github.com/andrasmaroy)\n#### License: MIT\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/andrasmaroy/pconf",
    "keywords": "configuration hierarchical",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pconf",
    "platform": "",
    "project_url": "https://pypi.org/project/pconf/",
    "release_url": "https://pypi.org/project/pconf/0.5.0/",
    "requires_python": "",
    "summary": "Hierarchical python configuration with files, environment variables, command-line arguments.",
    "version": "0.5.0"
  },
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e9af955c65c02224cfde17c51842201c",
          "sha256": "18a3fab2801b747f3fddeaec62ec73e12f789a628faae723bb3aab4c06efd4ef"
        },
        "downloads": 0,
        "filename": "pconf-0.5.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9af955c65c02224cfde17c51842201c",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 12867,
        "upload_time": "2017-06-16T15:40:56",
        "url": "https://files.pythonhosted.org/packages/77/aa/0b2dba0ed1afcdb7ec4c39dae39e0f69286f6179680995147dc0df79a72a/pconf-0.5.0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "54478aaf256a88455ee4a362fa3b691b",
          "sha256": "002249d3a00f8616f03ade7f1ac2344cf06feb41cbaaee909552ce6b44eec0f5"
        },
        "downloads": 0,
        "filename": "pconf-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "54478aaf256a88455ee4a362fa3b691b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7184,
        "upload_time": "2017-06-16T15:40:58",
        "url": "https://files.pythonhosted.org/packages/98/56/45f42e91f610ddbac52bde522781e9cacfb35109abf2b6e4f3eb1b3c93f8/pconf-0.5.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e9af955c65c02224cfde17c51842201c",
        "sha256": "18a3fab2801b747f3fddeaec62ec73e12f789a628faae723bb3aab4c06efd4ef"
      },
      "downloads": 0,
      "filename": "pconf-0.5.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "e9af955c65c02224cfde17c51842201c",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 12867,
      "upload_time": "2017-06-16T15:40:56",
      "url": "https://files.pythonhosted.org/packages/77/aa/0b2dba0ed1afcdb7ec4c39dae39e0f69286f6179680995147dc0df79a72a/pconf-0.5.0-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "54478aaf256a88455ee4a362fa3b691b",
        "sha256": "002249d3a00f8616f03ade7f1ac2344cf06feb41cbaaee909552ce6b44eec0f5"
      },
      "downloads": 0,
      "filename": "pconf-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "54478aaf256a88455ee4a362fa3b691b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7184,
      "upload_time": "2017-06-16T15:40:58",
      "url": "https://files.pythonhosted.org/packages/98/56/45f42e91f610ddbac52bde522781e9cacfb35109abf2b6e4f3eb1b3c93f8/pconf-0.5.0.tar.gz"
    }
  ]
}