{
  "info": {
    "author": "Iv\u00e1n de Paz Centeno",
    "author_email": "ipazc@unileon.es",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "==============\nVRPWRP 0.0.3\n==============\nVRPWRP (Vision-algorithm Requests Processing Wrappers) is a package that wraps an API-REST for Computer Vision deep-learning algorithms. Currently, it supports state-of-the-art a face-detection and face-recognition algorithms out-of-the-box. \n\nInstallation\n============\nCurrently it is only supported Python 3.4.1 onwards:\n\n.. code:: bash\n    \n    sudo pip3 install vrpwrp\n\nFace detection\n===============\nFace detection allows you to retrieve the location of faces inside images in the form of bounding boxes (left, top, width, height).\n\nA simple example for retrieving the bounding boxes of faces from an image:\n\n.. code:: python\n\n    >>> from vrpwrp.wrappers.face_detection import FaceDetection\n    >>> face_detection = FaceDetection()\n    >>> bounding_boxes = face_detection.analyze_file(\"route/to/image.jpg\")\n    >>> for bb in bounding_boxes: print(bb)\n    ... \n    [162, 79, 114, 146]\n\nFaceDetection has methods for analyzing images also from bytes, URLs and pillow images directly:\n\n.. code:: python\n\n    >>> bounding_boxes = face_detection.analyze_bytes(image_bytes)\n    >>> bounding_boxes = face_detection.analyze_url(image_url)\n    >>> bounding_boxes = face_detection.analyze_pil(pillow_image)\n    ... \n\n\nFace Recognition\n================\nFace recognition allows extracting the identity of a face within a given image of the face. The identity is a set of float numbers (since it is deep-learning-based, it is the output of the last convolution layer of a Convolutional Neural Network). In vrpwrp it is called **embeddings**.\n\nA simple example for retrieving the embeddings of a face is:\n\n.. code:: python\n\n    >>> from vrpwrp.wrappers.face_recognition import FaceRecognition\n    >>> face_recognition = FaceRecognition()\n    >>> face_embeddings = face_recognition.get_embeddings_from_file(\"route/to/image_of_face.jpg\")\n    >>> print(face_embeddings)\n    [-0.05258641 -0.14807236  0.21828972  0.00097196  0.08881456  0.01356898 -0.01393933 -0.09459263 -0.07305822  0.00354048  0.1649337  -0.05636634  0.03599492 -0.02649886 ...]\n\nLike in FaceDetection, it allows to analyze images from different sources:\n\n.. code:: python\n\n    >>> embeddings = face_recognition.get_embeddings_from_bytes(image_bytes)\n    >>> embeddings = face_recognition.get_embeddings_from_url(image_url)\n    >>> embeddings = face_recognition.get_embeddings_from_pil(pillow_image)\n    ... \n\n\n\nThe embeddings of two faces can be easily compared to see how close they are:\n\n.. code:: python\n\n    >>> face1_embeddings = face_recognition.get_embeddings_from_file(\"route/to/image_of_face1.jpg\")\n    >>> face2_embeddings = face_recognition.get_embeddings_from_file(\"route/to/image_of_face2.jpg\")\n    >>> print(face1_embeddings - face2_embeddings)\n    0.5634614628831894\n\nA value close to 0 indicates that two faces might be of the same person. In this example, image_of_face1.jpg and image_of_face2.jpg are likely to be of the same person. Otherwise, a value over 1.0 might indicate that two faces are not likely to be of the same person.\n\nThis might lead to a scenario where you store lot of embeddings and want to compare a single one with each of them, resulting in a loop like the following:\n\n.. code:: python\n\n    faces_embeddings = [emb1, emb2, ..., embN]\n\n    new_embedding = face_recognition.get_embeddings_from_file(\"route/to/image_of_face1.jpg\")\n\n    for embedding in faces_embeddings:\n         distance = embedding - new_embedding\n\nRather than using a loop (even if it is a list-comprehension), there is an optimized and preferred way of performing such a comparison that can be used instead:\n\n.. code:: python\n\n    faces_embeddings = [emb1, emb2, ..., embN]\n\n    new_embedding = face_recognition.get_embeddings_from_file(\"route/to/image_of_face1.jpg\")\n    distances = face_recognition.get_embeddings_distances(new_embedding, faces_embeddings)\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/ipazc/vrpwrp",
    "keywords": "vrpwrp face_detection face_recognition face deep-learning computer vision face detection face recognition api rest wrapper",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vrpwrp",
    "platform": "",
    "project_url": "https://pypi.org/project/vrpwrp/",
    "release_url": "https://pypi.org/project/vrpwrp/0.0.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Vision-algorithms Requests Processing Wrappers for deep-learning Computer Vision algorithms on the cloud.",
    "version": "0.0.3"
  },
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f9cbe5c558e1282471ae3d5daaf5bf64",
          "sha256": "672080e243481fef05e8820927da9c8e71a9655bbbe430a03ce1e55c3e2c359f"
        },
        "downloads": 0,
        "filename": "vrpwrp-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f9cbe5c558e1282471ae3d5daaf5bf64",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9017,
        "upload_time": "2017-09-07T08:49:39",
        "url": "https://files.pythonhosted.org/packages/90/50/58fac7c38d494c7266be0789c52514dc082aaf2c42d07f66271d60a81447/vrpwrp-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ae19261538e1692c6999562aaf39ad56",
          "sha256": "528884ef39848834bbfa73abf4004901a0c798f70a93fd23c4032f597e92df8e"
        },
        "downloads": 0,
        "filename": "vrpwrp-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "ae19261538e1692c6999562aaf39ad56",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12551,
        "upload_time": "2017-09-07T16:25:39",
        "url": "https://files.pythonhosted.org/packages/ca/6c/7a4e7816592b77ab8e7a0aa6a5f3bfe428f9e6788cd4e30634aa8e2bba8d/vrpwrp-0.0.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ae19261538e1692c6999562aaf39ad56",
        "sha256": "528884ef39848834bbfa73abf4004901a0c798f70a93fd23c4032f597e92df8e"
      },
      "downloads": 0,
      "filename": "vrpwrp-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "ae19261538e1692c6999562aaf39ad56",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 12551,
      "upload_time": "2017-09-07T16:25:39",
      "url": "https://files.pythonhosted.org/packages/ca/6c/7a4e7816592b77ab8e7a0aa6a5f3bfe428f9e6788cd4e30634aa8e2bba8d/vrpwrp-0.0.3.tar.gz"
    }
  ]
}