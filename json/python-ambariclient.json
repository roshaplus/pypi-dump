{
  "info": {
    "author": "Rackspace",
    "author_email": "greg.hill@rackspace.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "Python bindings to the Apache Ambari API\n==================================================\n\nAll syntax examples will assume you are using the client against the test host\ncreated by following the Ambari Quick Start Guide.  I've set up a 5 node\ncluster which has hostnames `c6401-c6405.ambari.apache.org`.  The examples will\ntranslate to other clusters, just the hostnames and number of hosts might\nchange, obviously.\n\n\nBasic API bindings design\n----------\n\nThe starting point for users is the Ambari class in `ambariclient.client`:\n\n```python\n>>> from ambariclient.client import Ambari\n>>> client = Ambari('c6401.ambari.apache.org', port=8080, username='admin', password='admin')\n```\n\n\nAmbari Shell\n-----------\n\nThe Ambari Shell will automatically set up the ambari client for you and let\nyou play around with the API to learn the syntax.  To load it run the\n`ambari-shell` executable.  It should have been put in a system path for you\nautomatically at install time, but if you're just playing with the source code,\nyou can call `bin/ambari-shell` directly.  It is based on the IPython shell, so\nfor more comprehensive documentation of all the capabilities provided by that,\nrefer to\n[the IPython documentation](http://ipython.org/ipython-doc/stable/interactive/index.html).\nNote that the shell functionality requires that you install IPython:\n\n```bash\n$ pip install IPython\n```\n\nHere is an \n\n```\n$ ambari-shell\n\nPython 2.7.6 (default, Sep  9 2014, 15:04:36)\n[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.39)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\nLogging level set to 50\nPython 2.7.6 (default, Sep  9 2014, 15:04:36)\nType \"copyright\", \"credits\" or \"license\" for more information.\n\nIPython 3.1.0 -- An enhanced Interactive Python.\n?         -> Introduction and overview of IPython's features.\n%quickref -> Quick reference.\nhelp      -> Python's own help system.\nobject?   -> Details about 'object', use 'object??' for extra details.\n\n\nAmbari client available as 'ambari'\n - Ambari Server is http://c6401.ambari.apache.org:8080\n - Ambari Version is 2.0.0\n\n - log(new_level) will reset the logger level\n - ambari_ref() will show you all available client method chains\n\nIn [1]:\n```\n\nYou can then just reference the `ambari` variable as the client.  The client is configurable via \ncommand-line options and/or a config file.  The defaults are those for the Ambari Quick Start \nsetup.  Username and password are defaulted to `admin`, and the host is defaulted to \n`http://c6401.ambari.apache.org:8080` \n\nYou can override them by creating a JSON configuration file in `$HOME/.ambari`:\n\n```\n{\n    \"host\": \"my.ambari.server.com\",\n    \"port\": 80,\n    \"username\": \"my-username\",\n    \"password\": \"my-password\"\n}\n```\n\nYou can also pass in any of those options on the CLI:\n\n```bash\n$ ambari-shell --host http://my.ambari.server.com --username my-username --password my-password\n```\n\nOr you can specify some in the config file and then override some using the CLI switches.\n\nYou can also override the logger level by passing it in or putting it in the config file:\n\n```bash\n$ ambari-shell --logger INFO\n```\n\nTo get more information about the switches, run `ambari-shell --help`\n\n\nBasic Examples\n-----------\n\nAll of the various resources are broken down into what are known as collections.\nEach collection contains one or more models, which represent resources in the\nAmbari API.  For example, to get the usernames of all users in the system:\n\n```python\n>>> for user in ambari.users:\n...     user.user_name\n...\nu'admin'\n```\n\nYou can get a specific model from a collection if you have the primary identifier\nfor that model.  So, for a user, the `user_name` is the primary identifier.  To get\nthe 'admin' user:\n\n```python\n>>> user = ambari.users('admin')\n>>> user.user_name\nu'admin'\n```\n\nEach model can then, in turn, contain collections of models that are subordinate\nto it.  In the case of users, there is a relationship to what are called\nprivileges:\n\n```python\n>>> for privilege in ambari.users('admin').privileges:\n...     privilege.permission_name\n...\nu'AMBARI.ADMIN'\n```\n\nThe API tries to mimic a promises-style API (also called futures).  It will\nonly load data when it is required to proceed.  So, for example, in the\nprevious example, we had to issue a GET request when we called\n`privilege.permission_name` because `permission_name` was not known until that\npoint.  However, if we simply needed to get the `permission_id` instead, that\ninformation is returned by the `GET` request on the user object. I'm including\nthe relevant debug log statements to show the difference:\n\n```python\n>>> for privilege in ambari.users('admin').privileges:\n...     privilege.permission_name\n...\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /api/v1/users/admin HTTP/1.1\" 200 416\nDEBUG:ambariclient.client:Response: {\n  \"href\" : \"http://c6401.ambari.apache.org:8080/api/v1/users/admin\",\n  \"Users\" : {\n    \"active\" : true,\n    \"admin\" : true,\n    \"groups\" : [ ],\n    \"ldap_user\" : false,\n    \"user_name\" : \"admin\"\n  },\n  \"privileges\" : [\n    {\n      \"href\" : \"http://c6401.ambari.apache.org:8080/api/v1/users/admin/privileges/1\",\n      \"PrivilegeInfo\" : {\n        \"privilege_id\" : 1,\n        \"user_name\" : \"admin\"\n      }\n    }\n  ]\n}\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /api/v1/users/admin/privileges/1 HTTP/1.1\" 200 287\nDEBUG:ambariclient.client:Response: {\n  \"href\" : \"http://c6401.ambari.apache.org:8080/api/v1/users/admin/privileges/1\",\n  \"PrivilegeInfo\" : {\n    \"permission_name\" : \"AMBARI.ADMIN\",\n    \"principal_name\" : \"admin\",\n    \"principal_type\" : \"USER\",\n    \"privilege_id\" : 1,\n    \"type\" : \"AMBARI\",\n    \"user_name\" : \"admin\"\n  }\n}\nu'AMBARI.ADMIN'\n```\n\nNotice that two `GET` requests were sent to load the appropriate data.  The\nfirst is sent as soon as you access the `privileges` attribute on\n`ambari.users('admin')`.  Most people would expect it to be sent on\n`ambari.users('admin')` but at that point you aren't attempting to access any\ndata unknown to the object, so no API call is sent.  Accessing a relationship\nrequires the object to be populated as the relationship data is often returned\nin the original request, saving a separate API call later.  Now, back to the\nexample:\n\n```python\n>>> for privilege in ambari.users('admin').privileges:\n...     privilege.privilege_id\n...\nDEBUG:requests.packages.urllib3.connectionpool:\"GET /api/v1/users/admin HTTP/1.1\" 200 416\nDEBUG:ambariclient.client:Response: {\n  \"href\" : \"http://c6401.ambari.apache.org:8080/api/v1/users/admin\",\n  \"Users\" : {\n    \"active\" : true,\n    \"admin\" : true,\n    \"groups\" : [ ],\n    \"ldap_user\" : false,\n    \"user_name\" : \"admin\"\n  },\n  \"privileges\" : [\n    {\n      \"href\" : \"http://c6401.ambari.apache.org:8080/api/v1/users/admin/privileges/1\",\n      \"PrivilegeInfo\" : {\n        \"privilege_id\" : 1,\n        \"user_name\" : \"admin\"\n      }\n    }\n  ]\n}\n1\n```\n\nIn this case, only the GET request for the user object was required, since it\nprovided the needed `privilege_id` information.\n\nThe last concept you need to be aware of is the `wait()` method that exists on\nnearly all objects in the system, both collections and models.  Calling\n`wait()` will force a sync operation to occur.  What this means in practical\nterms is:\n\n- If the object is backed by a URL, it will be loaded with fresh data from the\n  server\n- If the object had a method called on it that generated a `Request` object on\n  the server (i.e. a long-running asynchronous process), it will poll that\n  request until it is completed\n\nThe basic idea is to wait until the object is in a 'ready' state, so that it can\nbe further acted upon.  The method is designed for method-chaining, so you can do\nfun things like:\n\n```python\n>>> host.components.install().wait().start().wait()\n```\n\nIt's most-commonly useful after a `create()` call:\n\n```python\n>>> cluster = ambari.clusters.create(name, blueprint=bp_name,\n                                     host_groups=host_groups,\n                                     default_password=pwd\n                                    ).wait(timeout=1800, interval=30)\n```\n\nYou can override the default timeout and interval settings if you have a good\nidea of how long you expect the process to take.  Both values are in seconds.\nThe default is to poll every 15s for an hour, which is often excessive.\n\n\nHost bootstrapping\n-----------\n\nFor testing things out, the bootstrap API is very useful.  To start a bootstrap\nprocess using this library, it's pretty simple:\n\n```python\n>>> hosts = [\"c6401.ambari.apache.org\", \"c6402.ambari.apache.org\", \"c6403.ambari.apache.org\", \"c6404.ambari.apache.org\"]\n>>> ssh_key = ''\n>>> with open(\"/path/to/insecure_private_key\") as f:\n...    ssh_key = f.read()\n...\n>>> bootstrap = ambari.bootstrap.create(hosts=hosts, sshKey=ssh_key, user='vagrant')\n>>> bootstrap.wait()\n```\n\nThere is no way to retrieve a list of bootstrap operations, so don't lose track\nof the one you started.  This is a server-side API restriction:\n\n```python\n>>> ambari.bootstrap.wait()\nambariclient.exceptions.MethodNotAllowed: HTTP request failed for GET http://c6401.ambari.apache.org:8080/api/v1/bootstrap: Method Not Allowed 405: {\n  \"status\": 405,\n  \"message\": \"Method Not Allowed\"\n}\n```\n\n\nAPI Hierarchy\n-----------\n\nFor reference, this is the currently-supported hierarchy of collections and models\navailable for you to use.  This list can be regenerated by calling reference()\nin the ambari-shell.  We'll try to keep it up-to-date:\n\n- `ambari.actions`\n- `ambari.actions(action_name)`\n- `ambari.alert_targets`\n- `ambari.alert_targets(id)`\n- `ambari.blueprints`\n- `ambari.blueprints(blueprint_name)`\n- `ambari.blueprints(blueprint_name).host_groups`\n- `ambari.blueprints(blueprint_name).host_groups(name)`\n- `ambari.bootstrap`\n- `ambari.bootstrap(requestId)`\n- `ambari.clusters`\n- `ambari.clusters(cluster_name)`\n- `ambari.clusters(cluster_name).alert_definitions`\n- `ambari.clusters(cluster_name).alert_definitions(id)`\n- `ambari.clusters(cluster_name).alert_groups`\n- `ambari.clusters(cluster_name).alert_groups(id)`\n- `ambari.clusters(cluster_name).alert_history`\n- `ambari.clusters(cluster_name).alert_history(id)`\n- `ambari.clusters(cluster_name).alert_notices`\n- `ambari.clusters(cluster_name).alert_notices(id)`\n- `ambari.clusters(cluster_name).alerts`\n- `ambari.clusters(cluster_name).alerts(id)`\n- `ambari.clusters(cluster_name).configurations`\n- `ambari.clusters(cluster_name).configurations(type)`\n- `ambari.clusters(cluster_name).host_components`\n- `ambari.clusters(cluster_name).host_components(component_name)`\n- `ambari.clusters(cluster_name).hosts`\n- `ambari.clusters(cluster_name).hosts(host_name)`\n- `ambari.clusters(cluster_name).hosts(host_name).alert_history`\n- `ambari.clusters(cluster_name).hosts(host_name).alert_history(id)`\n- `ambari.clusters(cluster_name).hosts(host_name).alerts`\n- `ambari.clusters(cluster_name).hosts(host_name).alerts(id)`\n- `ambari.clusters(cluster_name).hosts(host_name).components`\n- `ambari.clusters(cluster_name).hosts(host_name).components(component_name)`\n- `ambari.clusters(cluster_name).privileges`\n- `ambari.clusters(cluster_name).privileges(privilege_id)`\n- `ambari.clusters(cluster_name).requests`\n- `ambari.clusters(cluster_name).requests(id)`\n- `ambari.clusters(cluster_name).requests(id).tasks`\n- `ambari.clusters(cluster_name).requests(id).tasks(id)`\n- `ambari.clusters(cluster_name).services`\n- `ambari.clusters(cluster_name).services(service_name)`\n- `ambari.clusters(cluster_name).services(service_name).alert_history`\n- `ambari.clusters(cluster_name).services(service_name).alert_history(id)`\n- `ambari.clusters(cluster_name).services(service_name).alerts`\n- `ambari.clusters(cluster_name).services(service_name).alerts(id)`\n- `ambari.clusters(cluster_name).services(service_name).components`\n- `ambari.clusters(cluster_name).services(service_name).components(component_name)`\n- `ambari.clusters(cluster_name).services(service_name).components(component_name).host_components`\n- `ambari.clusters(cluster_name).services(service_name).components(component_name).host_components(component_name)`\n- `ambari.clusters(cluster_name).services(service_name).components(component_name).metrics`\n- `ambari.clusters(cluster_name).services(service_name).components(component_name).metrics(name)`\n- `ambari.clusters(cluster_name).upgrades`\n- `ambari.clusters(cluster_name).upgrades(request_id)`\n- `ambari.clusters(cluster_name).upgrades(request_id).groups`\n- `ambari.clusters(cluster_name).upgrades(request_id).groups(group_id)`\n- `ambari.clusters(cluster_name).upgrades(request_id).groups(group_id).items`\n- `ambari.clusters(cluster_name).upgrades(request_id).groups(group_id).items(stage_id)`\n- `ambari.clusters(cluster_name).upgrades(request_id).groups(group_id).items(stage_id).tasks`\n- `ambari.clusters(cluster_name).upgrades(request_id).groups(group_id).items(stage_id).tasks(id)`\n- `ambari.groups`\n- `ambari.groups(group_name)`\n- `ambari.groups(group_name).members`\n- `ambari.groups(group_name).members(user_name)`\n- `ambari.hosts`\n- `ambari.hosts(host_name)`\n- `ambari.services`\n- `ambari.services(service_name)`\n- `ambari.services(service_name).components`\n- `ambari.services(service_name).components(component_name)`\n- `ambari.services(service_name).components(component_name).host_components`\n- `ambari.stacks`\n- `ambari.stacks(stack_name)`\n- `ambari.stacks(stack_name).versions`\n- `ambari.stacks(stack_name).versions(stack_version)`\n- `ambari.stacks(stack_name).versions(stack_version).operating_systems`\n- `ambari.stacks(stack_name).versions(stack_version).operating_systems(os_type)`\n- `ambari.stacks(stack_name).versions(stack_version).operating_systems(os_type).repositories`\n- `ambari.stacks(stack_name).versions(stack_version).operating_systems(os_type).repositories(repo_id)`\n- `ambari.stacks(stack_name).versions(stack_version).services`\n- `ambari.stacks(stack_name).versions(stack_version).services(service_name)`\n- `ambari.stacks(stack_name).versions(stack_version).services(service_name).components`\n- `ambari.stacks(stack_name).versions(stack_version).services(service_name).components(component_name)`\n- `ambari.stacks(stack_name).versions(stack_version).services(service_name).configurations`\n- `ambari.users`\n- `ambari.users(user_name)`\n- `ambari.users(user_name).privileges`\n- `ambari.users(user_name).privileges(privilege_id)`\n- `ambari.views`\n- `ambari.views(view_name)`\n- `ambari.views(view_name).versions`\n- `ambari.views(view_name).versions(version)`\n- `ambari.views(view_name).versions(version).instances`\n- `ambari.views(view_name).versions(version).instances(instance_name)`\n- `ambari.views(view_name).versions(version).permissions`\n- `ambari.views(view_name).versions(version).permissions(permission_id)`\n\n\nTesting\n-------\n\nSince doing good unit tests for this library would require mocking pretty much\nthe entire Ambari API, we didn't see a lot of benefit in that.  There are some\nbasic unit tests that will be expanded upon over time, but most testing is\ncurrently done manually.\n\n```bash\n$ tox -e py27\n$ tox -e py33\n$ tox -e\n```\n\nAmbari Versions\n---------------\n\nThe goal of the client is to work with multiple versions of Ambari by smoothing\nout the differences for the user.  The client can automatically detect the\nversion of Ambari running on the server:\n\n```python\n>>> ambari.version\n('1', '7', '0')\n```\n\nThis client has only been tested against Ambari 1.7+.  If you need\nsupport for older versions, you might need to submit patches for anything\nthat was changed after that time.  Supporting anything prior to 1.6 is\nproblematic as the basic method of creating clusters changed to require\nblueprints in that release, but if you have a good idea on how to make it\nseamless, then we can try to integrate the solution.\n\n\nPython Versions\n---------------\n\nThe goal is to support Python 2.7+ and 3.3+. I'm not opposed to adding 2.6\nsupport, but someone else will need to do the work.\n\n\nCommand-Line Interface\n----------------------\n\nA CLI was originally planned, but never implemented.  Some methods that require\na large JSON body are not amenable to a CLI, but we could easily build one for\nother methods if people want one.  We replaced the idea with the Ambari Shell for\nnow, but are open to revisiting this if demand is present.\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://www.github.com/jimbobhickville/python-ambariclient",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "python-ambariclient",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/python-ambariclient/",
    "release_url": "https://pypi.org/project/python-ambariclient/0.5.10/",
    "requires_python": null,
    "summary": "Client library for Apache Ambari.",
    "version": "0.5.10"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "83486661081fe1491e524d338d7444ab",
          "sha256": "220012396ac71c5b25ac231fda26a200bc645233bc78c2de20d970632c9e5804"
        },
        "downloads": 1661,
        "filename": "python-ambariclient-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "83486661081fe1491e524d338d7444ab",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17790,
        "upload_time": "2014-12-15T18:23:03",
        "url": "https://files.pythonhosted.org/packages/e4/9c/15df4c6c5875411b0f365d11c87d7f021178e5dd2c2ced9eca06c75142f9/python-ambariclient-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5172fade5189e4ac8701b3ac1bd56bae",
          "sha256": "dd1a519a5dda5d8af2636bde1ed868f18b962a5d8e3d2e59c81e46b37c1aa9eb"
        },
        "downloads": 905,
        "filename": "python-ambariclient-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5172fade5189e4ac8701b3ac1bd56bae",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19458,
        "upload_time": "2015-02-02T21:29:23",
        "url": "https://files.pythonhosted.org/packages/0d/43/4d31a05aa2631cd54c13e057b170b7eeb4769a8db79345fc754dbcc3a930/python-ambariclient-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "36b0e3fcdc102657101fae082c4ec221",
          "sha256": "93dd40cda983944b54b7578fbb2d1e2c0e34602d541e7c962f29a4b705fbde81"
        },
        "downloads": 907,
        "filename": "python-ambariclient-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "36b0e3fcdc102657101fae082c4ec221",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23631,
        "upload_time": "2015-02-03T17:02:56",
        "url": "https://files.pythonhosted.org/packages/85/9b/aaaaad4b1530914c6b45c67d62a52b602246424177b38def2e88939ec46d/python-ambariclient-0.3.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4d1e0458f7ffa8ce5d32bdaf0614a440",
          "sha256": "df4fe28611c67bc201970b3ab8106bdcdab90785113b039ace24f6d90037a92a"
        },
        "downloads": 983,
        "filename": "python-ambariclient-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "4d1e0458f7ffa8ce5d32bdaf0614a440",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24717,
        "upload_time": "2015-02-09T17:36:28",
        "url": "https://files.pythonhosted.org/packages/a5/28/2618e2b3b2f70f54b24f866f7de3b6478569048a30bd4f489bd8f7f1888d/python-ambariclient-0.4.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0321c200c75d74f7d23773cf87237f71",
          "sha256": "1e52b8f4fa50db03301e49edbf1776c4a2b21d53dd0975e76c56bd31ebb946b8"
        },
        "downloads": 1059,
        "filename": "python-ambariclient-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0321c200c75d74f7d23773cf87237f71",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24766,
        "upload_time": "2015-04-06T13:15:58",
        "url": "https://files.pythonhosted.org/packages/83/fd/6b7ef7cce638f817e39aa5e6da2c56f15399fac471eded98d8363d7a4cff/python-ambariclient-0.4.1.tar.gz"
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2a8557c355fa2b0f1bd2ff6f283a2cad",
          "sha256": "cdc5ed8d7299a5b7612ce4dbce48b333609a8dcbb98e504cdc424be7f3996237"
        },
        "downloads": 1275,
        "filename": "python-ambariclient-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2a8557c355fa2b0f1bd2ff6f283a2cad",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25737,
        "upload_time": "2015-04-14T15:39:54",
        "url": "https://files.pythonhosted.org/packages/61/3d/f538615cca79027ae78b1597ff15958558f4853d5cb033d664beab08d313/python-ambariclient-0.4.2.tar.gz"
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "96d7fd1dab7c1b4ad11201331947fcc1",
          "sha256": "c2b65483cb0b9de5a15e026b632985c38f93bb0709c5b224f50ad8fbe551c20c"
        },
        "downloads": 1040,
        "filename": "python-ambariclient-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "96d7fd1dab7c1b4ad11201331947fcc1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25838,
        "upload_time": "2015-05-04T23:11:02",
        "url": "https://files.pythonhosted.org/packages/bc/60/642e8f4369f74e35bc96b93f552f8ee395ec43c3cef8f803f70a4b56d77c/python-ambariclient-0.4.3.tar.gz"
      }
    ],
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5f4b40052d52aa912a23e92d8862ed23",
          "sha256": "90863e601f1b2ddbb9e30196b88260ca48761cabe71b4f5d847ce1291a78d9f9"
        },
        "downloads": 938,
        "filename": "python-ambariclient-0.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5f4b40052d52aa912a23e92d8862ed23",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25837,
        "upload_time": "2015-05-05T14:32:21",
        "url": "https://files.pythonhosted.org/packages/62/fe/4067b1f7e7a31736fd727fe2fd75aca4c98aedd789665bdd46f0bff45bd3/python-ambariclient-0.4.4.tar.gz"
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eba48c57e56f244e3968dc433fcfa409",
          "sha256": "dfdab4b18f8051ca32ee18e8c3a95589ac940b1bf6128519a27d3729b5c35fd2"
        },
        "downloads": 2027,
        "filename": "python-ambariclient-0.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "eba48c57e56f244e3968dc433fcfa409",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26073,
        "upload_time": "2015-05-05T17:19:02",
        "url": "https://files.pythonhosted.org/packages/70/25/0672c95df8b8eceb23f4b6870260d40a31e0e285080bfa7a2f936bcc7c5c/python-ambariclient-0.4.5.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b141ee4a5af90ae0e11182f487e3a354",
          "sha256": "8b0923e23179cce61eaf271fc1a423240d3a210d2f8190217c0eb172c97f5ff4"
        },
        "downloads": 1102,
        "filename": "python-ambariclient-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b141ee4a5af90ae0e11182f487e3a354",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27101,
        "upload_time": "2015-05-07T20:15:06",
        "url": "https://files.pythonhosted.org/packages/cc/f5/4514c402bed54c152d93064bf43219e39edf247c92c92b0c5b059ef1907d/python-ambariclient-0.5.0.tar.gz"
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "638f21f139331a23fc88f6f8576806ec",
          "sha256": "df90a87ee1d5847e168bb528a021ee08e8f8729e77b8175c1b9efed6596b9af7"
        },
        "downloads": 1666,
        "filename": "python-ambariclient-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "638f21f139331a23fc88f6f8576806ec",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32332,
        "upload_time": "2015-05-19T20:39:13",
        "url": "https://files.pythonhosted.org/packages/26/9b/0f2cbc88c07d40d2ca6d00b914b85dc7e9f18858c6fdcb2f9c805008412b/python-ambariclient-0.5.1.tar.gz"
      }
    ],
    "0.5.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2906c7dff0436bda4efd02e353679d0a",
          "sha256": "6d9b06533f9ea9899b9124539632ebd891e35bd8209f487ddd53a62ab0f241d3"
        },
        "downloads": 1113,
        "filename": "python-ambariclient-0.5.10.tar.gz",
        "has_sig": false,
        "md5_digest": "2906c7dff0436bda4efd02e353679d0a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 34123,
        "upload_time": "2016-09-27T21:10:17",
        "url": "https://files.pythonhosted.org/packages/0a/c2/de4aed4e10380ac58f083c67cef6a4379866f483340e3d2e2c7fb8e86662/python-ambariclient-0.5.10.tar.gz"
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "34abdc85b1f115a65e4d4956a39c3af2",
          "sha256": "bf4074f3e9f4d7e27cb124b03366e6745e1aed846ffd9c4b57bf30b62560e39c"
        },
        "downloads": 1017,
        "filename": "python-ambariclient-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "34abdc85b1f115a65e4d4956a39c3af2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32370,
        "upload_time": "2015-05-20T14:50:51",
        "url": "https://files.pythonhosted.org/packages/e3/c6/e862b36da43ac7b5bbea0764a1bf1dfbaf03278903e7240059e05fa41fb5/python-ambariclient-0.5.2.tar.gz"
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e53f51bba59e520dde0683927e3caa89",
          "sha256": "a00f2e9d3727ad3200689a90e477d37c40746d853be7202aecb00d95940cea73"
        },
        "downloads": 4043,
        "filename": "python-ambariclient-0.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e53f51bba59e520dde0683927e3caa89",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32353,
        "upload_time": "2015-05-29T15:29:40",
        "url": "https://files.pythonhosted.org/packages/96/86/ccd39de5cb099551ccc38b0838d7a9b4ff18f25a44469e562959a946a1b7/python-ambariclient-0.5.3.tar.gz"
      }
    ],
    "0.5.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a4837968315e90c79e87bc780dbb8ef0",
          "sha256": "4118bc6ee2889414abd14423153e4e4e6a1beef4ec14efeed4ffcd707cfd57ec"
        },
        "downloads": 1345,
        "filename": "python-ambariclient-0.5.4.tar.gz",
        "has_sig": false,
        "md5_digest": "a4837968315e90c79e87bc780dbb8ef0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 33358,
        "upload_time": "2015-08-11T22:11:27",
        "url": "https://files.pythonhosted.org/packages/4e/7f/ecba15f432a0312e8ad82c4579e3a712f7507078010394bed011fc9aff5f/python-ambariclient-0.5.4.tar.gz"
      }
    ],
    "0.5.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "55eb88c29fbe2c2e114fa6dd2ead2036",
          "sha256": "e54ffbd912e960e386b4dd3cb09b992576db93bd5cd51d23dea22f1353631365"
        },
        "downloads": 619,
        "filename": "python-ambariclient-0.5.5.tar.gz",
        "has_sig": false,
        "md5_digest": "55eb88c29fbe2c2e114fa6dd2ead2036",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 33858,
        "upload_time": "2015-08-20T16:25:26",
        "url": "https://files.pythonhosted.org/packages/bc/4c/c5c972b7d2a1b016d8a9a88b6183c68f93a94fef2f2b0958f2a839185f80/python-ambariclient-0.5.5.tar.gz"
      }
    ],
    "0.5.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4eba1293924583bc2d7c728bfa62583c",
          "sha256": "3c0fa107ff0ca265717197f27ca3c74365ac1480671a32e3c54e2e9e71466082"
        },
        "downloads": 856,
        "filename": "python-ambariclient-0.5.6.tar.gz",
        "has_sig": false,
        "md5_digest": "4eba1293924583bc2d7c728bfa62583c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 33875,
        "upload_time": "2015-08-24T20:44:17",
        "url": "https://files.pythonhosted.org/packages/01/d7/6948f1e896539dedf40bf63045b352ee61f456675e980ace5b21eb7f24bb/python-ambariclient-0.5.6.tar.gz"
      }
    ],
    "0.5.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9665d705cf71b7af528d4383cad54a73",
          "sha256": "4b303f957a9ae532d373be129c2dba47e21921146e247ed562a2db7a63b39907"
        },
        "downloads": 1576,
        "filename": "python-ambariclient-0.5.7.tar.gz",
        "has_sig": false,
        "md5_digest": "9665d705cf71b7af528d4383cad54a73",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 33891,
        "upload_time": "2015-09-16T12:20:41",
        "url": "https://files.pythonhosted.org/packages/b5/fb/0ea0d1fb5e2031df9753dc8d814bf3c29fbdf12dc8c885c7b46734250c78/python-ambariclient-0.5.7.tar.gz"
      }
    ],
    "0.5.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a8004194e9051393e2e60a7e6b5ae3bb",
          "sha256": "bc0650e1ebfb317ee934fd2cb4d4f19d9f85dd32f942d33becd5e484ffc3f1d0"
        },
        "downloads": 241,
        "filename": "python-ambariclient-0.5.8.tar.gz",
        "has_sig": false,
        "md5_digest": "a8004194e9051393e2e60a7e6b5ae3bb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 34055,
        "upload_time": "2016-02-01T19:30:03",
        "url": "https://files.pythonhosted.org/packages/7b/d0/7ee147265ed41bf4a812ae02d7b59ad76cb445b7873a8087b39b854c3e6e/python-ambariclient-0.5.8.tar.gz"
      }
    ],
    "0.5.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "74d6e04e962737594cacf5cf4af126c6",
          "sha256": "5041eca807e31999a1c830be3dc504e03d919cf9159c6461f839392ac5763484"
        },
        "downloads": 571,
        "filename": "python-ambariclient-0.5.9.tar.gz",
        "has_sig": false,
        "md5_digest": "74d6e04e962737594cacf5cf4af126c6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 34084,
        "upload_time": "2016-06-13T15:15:54",
        "url": "https://files.pythonhosted.org/packages/c6/38/9317ea5c2fb1c11c92f94e797716b473ebcea3d91ea315738630fcc80976/python-ambariclient-0.5.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2906c7dff0436bda4efd02e353679d0a",
        "sha256": "6d9b06533f9ea9899b9124539632ebd891e35bd8209f487ddd53a62ab0f241d3"
      },
      "downloads": 1113,
      "filename": "python-ambariclient-0.5.10.tar.gz",
      "has_sig": false,
      "md5_digest": "2906c7dff0436bda4efd02e353679d0a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 34123,
      "upload_time": "2016-09-27T21:10:17",
      "url": "https://files.pythonhosted.org/packages/0a/c2/de4aed4e10380ac58f083c67cef6a4379866f483340e3d2e2c7fb8e86662/python-ambariclient-0.5.10.tar.gz"
    }
  ]
}