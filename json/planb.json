{
  "info": {
    "author": "Alex Boonstra, Walter Doekes, OSSO B.V.",
    "author_email": "wjdoekes+planb@osso.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: System :: Archiving :: Backup"
    ],
    "description": "PlanB\n=====\n\nPlanB backs up your remote SSH-accessible files using rsync to a local ZFS\nstorage. Manage many hosts and host groups. Automate daily, weekly, monthly and\nyearly backups with snapshots.\n\n\n------------\nHow it looks\n------------\n\nAt the moment, the interface is just a Django admin interface:\n\n.. image:: example_hosts.png\n    :alt: A list of hosts configured in PlanB with most recent backup status\n\nThe files are stored on ZFS storage, using snapshots to keep earlier versions\nof tiles. See this example shell transscript::\n\n    # zfs list | grep mongo2\n    rpool/BACKUP/experience-mongo2         9,34G  1,60T   855M  /srv/backups/experience-mongo2\n\n    # ls -l /srv/backups/experience-mongo2/data/srv/mongodb\n    total 646610\n    -rw------- 1 planb nogroup   67108864 jun 17 17:03 experience.0\n    -rw------- 1 planb nogroup  134217728 jun  9 16:01 experience.1\n    ...\n\nThose are the \"current\" files in the workspace. But you can go back in time::\n\n    # zfs list -r -t all rpool/BACKUP/experience-mongo2 | head -n4\n    NAME                                                  USED  AVAIL  REFER  MOUNTPOINT\n    rpool/BACKUP/experience-mongo2                       9,34G  1,60T   855M  /srv/backups/experience-mongo2\n    rpool/BACKUP/experience-mongo2@daily-201706031147        0      -   809M  -\n    rpool/BACKUP/experience-mongo2@monthly-201706031147      0      -   809M  -\n\n    # cd /srv/backups/experience-mongo2/.zfs/\n    # ls -1\n    daily-201706031147\n    daily-201706031211\n    daily-201706040001\n    daily-201706050002\n    ...\n\n    # ls daily-201706031147/data/srv/mongodb -l\n    total 581434\n    -rw------- 1 planb nogroup   67108864 jun  2 18:21 experience.0\n    -rw------- 1 planb nogroup  134217728 mei 29 14:38 experience.1\n    ...\n\n\n--------------------\nRequirements / setup\n--------------------\n\nPlanB can be installed as a standalone Django_ application, or it can be\nintegrated in another Django project.\n\nSee `requirements.txt`_ or `setup.py`_ for up-to-date dependencies/requirements.\n\nBasically, you'll need: ZFS storage, ssh and rsync, a webserver (nginx), python\nhosting (uwsgi), a database (mysql), a communication/cache bus (redis) and a\nfew python packages.\n\nFor more detailed steps, see `Setting it all up`_ below.\n\n.. _Django: https://www.djangoproject.com/\n.. _`requirements.txt`: ./requirements.txt\n.. _`setup.py`: ./setup.py\n\n\n----\nTODO\n----\n\n* Fix logrotate sample.\n* Move broker from Redis to DjangoORM? We don't need redis for anything else..\n* Add uwsgi-uid==djangoq-uid check?\n* Re-add some form of \"list-stale-mounts\" (!).\n  # contrib/list-stale-mounts | mail -E -s \"[$HOSTNAME] Stale ZFS mounts?\"\n* Re-add non-INFO output from planb_custom.daily...\n  # run_backupinfo | grep -vFB1 INFO/ /var/log/osso-backup/billing.log |\n  # mail -E -s \"[$HOSTNAME] Backup billing push\"\n* Re-add some kind of monthly report about what has been backupped.\n  # parse_and_mail_backupdirs\n* Add makefile for quick uninstall/install/uwsgi-reload?\n* Sort HostGroups in HostConfig sidebar.\n* Add pepcleaning pre-commit hook.\n* Add flake-checking pre-commit hook.\n* Add BCH checks.\n* Alter HostGroup:\n  - use fs-name and human-name\n  - use asciifield for fs-name?\n* Alter HostConfig:\n  - use fs-name and optionally human-name\n  - use asciifield for fs-name?\n* Replace the exception mails for common errors (like failing rsync) to\n  use mail_admins style mail.\n* After using mail_admins style mail, we can start introducing mail digests\n  instead: daily summary of backup successes and failures.\n* Fix admin \"Planb\" name as \"PlanB\".\n* Split off the subparts of the HostConfig to separate configs:\n  - include-config\n  - transport-config\n  - retention-config\n  - host-status (use this as main enqueue-view?)\n* Use hostgroup+hostname in more places. Right now the friendly_name is\n  too short. Also, use unique_together, so the friendlyname can be reused.\n* BUG: Items added to /exclude list are not deleted from destination if\n  they have already been backed up once.\n* The 'data_files' in setup.py all get chucked into the virtualenv root.\n  We should place most of them in share/planb/ instead.\n* Replace the \"daily report\" hack with a signal-receiver.\n\n\n-------\nWARNING\n-------\n\nThe Django-Q task scheduler is highly configurable from the\n``/admin/``-view. With a little effort it will run user-supplied python\ncode directly. Any user with access to the schedulers will have\ntremendous powers\n\n**Recommendation**: don't give your users powers to edit the schedulers.\nUse the fine-grained permissions of the Django-admin systems to limit\nthem to Hosts and HostGroups only.\n\n*Perhaps we should disable web-access to it altogether.*\n\n\n-----------------\nSetting it all up\n-----------------\n\nIf you follow the HOWTO below, you'll set up PlanB as a standalone\nproject. Those familiar with Django_ will know how to integrate it into\ntheir own project.\n\nThe setup below assumes you'll be using the ``planb`` user. You're free\nto change that consistently of course.\n\n\nSetting up a ZFS pool\n~~~~~~~~~~~~~~~~~~~~~\n\nTODO: Document this briefly.\n\n\nSetting up the project\n~~~~~~~~~~~~~~~~~~~~~~\n\nSetting up a virtualenv (optional)::\n\n    mkdir -p /srv/virtualenvs\n    echo 'WORKON_HOME=/srv/virtualenvs' >>~/.bashrc\n    apt-get install python3-virtualenv python3-pip virtualenvwrapper\n    # you may need to log in/out once after this\n\n    mkvirtualenv planb --python=$(which python3) --system-site-packages\n\n    mkdir /etc/planb\n    cd /etc/planb\n    pwd >$VIRTUAL_ENV/.project\n\n    workon planb\n\nInstalling PlanB::\n\n    apt-get install python3-mysqldb python3-redis python3-setproctitle\n    pip install git+https://github.com/ossobv/planb.git@master\n\nSetting up a local ``planb`` user::\n\n    adduser planb --disabled-password --home=/var/spool/planb \\\n      --shell=/bin/bash --system\n\n    sudo -H -u planb ssh-keygen -b 8192\n\n.. note:: *You may want to back that ssh key up somewhere.*\n\nSetting up the local environment::\n\n    cat >/etc/planb/envvars <<EOF\n    USER=planb\n    PYTHONPATH=/etc/planb\n    DJANGO_SETTINGS_MODULE=settings\n    EOF\n\n.. note:: *During development, you can use a local* ``./envvars`` *in your\n           development directory or set* ``PLANB_ENVFILE`` *to a\n           specific path. You can set* ``PYTHONPATH`` *to*\n           ``/etc/planb:/home/yourname/src/planb`` *to develop on the\n           production machine.*\n\nSetting up the local configuration::\n\n    cp /srv/virtualenvs/planb/example_settings.py /etc/planb/settings.py\n    ${EDITOR:-vi} /etc/planb/settings.py\n\n**Replace all *FIXME* entries in the ``settings.py``**\n\nMake sure the SQL database exists. How to do that is beyond the scope of\nthis readme.\n\nAt this point, you should be able to run the ``planb`` script.\n\nSet up the database and a web-user::\n\n    planb migrate\n    planb createsuperuser\n\nSetting up uwsgi ``planb.ini``::\n\n    [uwsgi]\n    plugin = python3\n    workers = 4\n\n    chdir = /\n    virtualenv = /srv/virtualenvs/planb\n    wsgi-file = /srv/virtualenvs/planb/wsgi.py\n\n    uid = planb\n    gid = www-data\n    chmod-socket = 660\n\n    for-readline = /etc/planb/envvars\n       env = %(_)\n    endfor =\n\nSet up static path, static files and log path::\n\n    # see the STATIC_ROOT entry in your settings.py\n    install -o planb -d /srv/http/YOURHOSTNAME/static\n\n    planb collectstatic\n\n    install -o planb -d /var/log/planb\n\nSetting up nginx config::\n\n    server {\n        listen 80;\n        server_name YOURHOSTNAME;\n\n        root /srv/http/YOURHOSTNAME;\n\n        location / {\n            uwsgi_pass unix:/run/uwsgi/app/planb/socket;\n            include uwsgi_params;\n        }\n\n        location /static/ {\n        }\n    }\n\nGiving *PlanB* access to ZFS tools and paths::\n\n    cat >/etc/sudoers.d/planb <<EOF\n    planb ALL=NOPASSWD: /sbin/zfs, /bin/chown\n    EOF\n\n    zfs create rpool/BACKUP -o mountpoint=/srv/backups\n    chown planb /srv/backups\n    chmod 700 /srv/backups\n\nSetting up ``qcluster`` for scheduled tasks::\n\n    apt-get install redis-server\n\n    # (in the source, this file is in rc.d)\n    cp /srv/virtualenvs/planb/planb-queue.service /etc/systemd/system/\n    ${EDITOR:-vi} /etc/systemd/system/planb-queue.service\n\n    systemctl daemon-reload &&\n      systemctl enable planb-queue &&\n      systemctl start planb-queue &&\n      systemctl status planb-queue\n\nInstalling automatic jobs::\n\n    planb loaddata planb_jobs\n\n\n-------------------------\nConfiguring a remote host\n-------------------------\n\nCreate a ``remotebackup`` user on the remote host (or ``encbackup`` for\nencrypted backups, which is beyond the scope of this document)::\n\n    adduser --disabled-password remotebackup\n\nConfigure sudo access using ``visudo -f /etc/sudoers.d/remotebackup``::\n\n    # Backup user needs to be able to get the files\n    remotebackup ALL=NOPASSWD: /usr/bin/rsync --server --sender *\n    remotebackup ALL=NOPASSWD: /usr/bin/ionice -c2 -n7 /usr/bin/rsync --server --sender *\n    remotebackup ALL=NOPASSWD: /usr/bin/ionice -c3 /usr/bin/rsync --server --sender *\n\nObserve how the ``--server --sender`` makes the rsync read-only.\n\nSet up the ssh key like you'd normally do::\n\n    mkdir -p ~remotebackup/.ssh\n    cat >>~remotebackup/.ssh/authorized_keys <<EOF\n    ... ssh public key from /var/spool/planb/.ssh/id_rsa.pub goes here ...\n    EOF\n\n    chmod 640 ~remotebackup/.ssh/authorized_keys\n    chown remotebackup -R ~remotebackup/.ssh\n\nWhen you use this pattern, you can tick ``use_sudo`` and set the remote\nuser to ``remotebackup``.\n\n\n-------------------------------\nAdding post-backup notification\n-------------------------------\n\nDo you want a notification when a backup succeeds? Or when it fails?\n\nYou can add something like this to your settings::\n\n    from datetime import datetime\n    from subprocess import check_call\n    from django.dispatch import receiver\n    from planb.signals import backup_done\n\n    @receiver(backup_done)\n    def notify_zabbix(sender, hostconfig, success, **kwargs):\n        if success:\n            key = 'planb.get_latest[{}]'.format(hostconfig.identifier)\n            val = datetime.now().strftime('%s')\n            cmd = (\n                'zabbix_sender', '-c', '/etc/zabbix/zabbix_agentd.conf',\n                '-k', key, '-o', val)\n            check_call(cmd)\n\nThat combines nicely with a backup host discovery rule using ``blist``::\n\n    # Machine discovery (redirects stderr to mail).\n    UserParameter=planb.discovery, \\\n      ( planb blist --zabbix 3>&2 2>&1 1>&3 \\\n      | mail -E -s 'ERROR: planb.discovery (zabbix)' root ) 2>&1\n\n\n----------------\nDoing daily jobs\n----------------\n\nA quick hack to get daily reports up and running is by placing something\nlike this in ``/etc/planb/planb_custom.py``::\n\n    from planb.contrib.billing import BossoBillingPoster, daily_hostgroup_report\n\n    def daily_billing_report():\n        \"\"\"\n        This function is added into: Home >> Task Queue >> Scheduled task\n        As: \"Report to Billing\" <planb_custom.daily_bosso_report>\n        \"\"\"\n        daily_hostgroup_report(BossoBillingPoster('http://my.url.here/'))\n\n\n------\nF.A.Q.\n------\n\nCan I use the software and customize it to my own needs?\n    It is licensed under the GNU GPL version 3.0 or higher. See the LICENSE\n    file for the full text. That means: probably yes, but you may be required to\n    share any changes you make. But you were going to do that anyway, right?\n\n\nThe ``uwsgi`` log complains about *\"No module named site\"*.\n    If your uwsgi fails to start, and the log looks like this::\n\n        Python version: 2.7.12 (default, Nov 19 2016, 06:48:10)\n        Set PythonHome to /srv/virtualenvs/planb\n        ImportError: No module named site\n\n    Then your uWSGI is missing the Python 3 module. Go install\n    ``uwsgi-plugin-python3``.\n\n\nThe ``mkvirtualenv`` said ``locale.Error: unsupported locale setting``.\n    You need to install the right locales until ``perl -e setlocale`` is\n    silent. How depends on your system and your config. See ``locale`` and\n    e.g. ``locale-gen en_US.UTF-8``.\n\n\nRsync complains about ``Invalid or incomplete multibyte or wide character``.\n    If rsync returns with code 23 and says this::\n\n        rsync: recv_generator: failed to stat \"...\\#351es-BCS 27-09-11.csv\":\n          Invalid or incomplete multibyte or wide character (84)\n\n    Then you might be backing up old hosts with legacy Latin-1 encoding\n    on the filesystem. Adding ``--iconv=utf8,latin1`` to the hostconfig\n    flags should fix it.\n\n    You may need rsync version 3 or higher for that.\n\n    Right now we opt to *not* implement any of these workarounds:\n\n    * Patch rsync to cope with ``EILSEQ`` (84) \"Illegal byte sequence\".\n    * Cope with error code 23 and pretend that everything went fine.\n\n    Instead, you should install a recent rsync and/or fix the filenames\n    on your remote filesystem.\n\n\nRsync complains about ``failed to stat`` or ``mkdir failed``.\n    If rsync returns these messages::\n\n        rsync: recv_generator: failed to stat \"...\": Permission denied (13)\n        rsync: recv_generator: mkdir \"...\" failed: Permission denied (13)\n\n    Then you may be looking at parent directories with crooked\n    permissions, like 077. Fix the permissions on the remote end.\n\n\nBackup success mail are sent, but failure mails are not.\n    Check the ``DEBUG`` setting. At the moment, error-mails are sent\n    through the logging subsystem and that is disabled when running in\n    debug-mode.\n\n\n-------\nAuthors\n-------\n\nPlanB was started in 2013 as \"OSSO backup\" by Alex Boonstra at OSSO B.V. Since\nthen, it has been evolved into *PlanB*. When it was Open Sourced by Walter\nDoekes in 2017, the old commits were dropped to ensure that any private compnay\ninformation was not disclosed.\n\n\n\nChanges\n-------\n\n* v1.0:\n\n  - Initial release.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ossobv/planb",
    "keywords": "",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "planb",
    "platform": "linux",
    "project_url": "https://pypi.org/project/planb/",
    "release_url": "https://pypi.org/project/planb/1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "PlanB automates remote SSH+rsync backups",
    "version": "1.0"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e19916e53a27e8e623feb14843e57f74",
          "sha256": "cbc4ad0f1b08493b5d42f826861b3e3042aa299091433f95bd7ef587377b68bb"
        },
        "downloads": 0,
        "filename": "planb-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e19916e53a27e8e623feb14843e57f74",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 46130,
        "upload_time": "2017-07-11T13:22:05",
        "url": "https://files.pythonhosted.org/packages/c9/5c/0584f5a52c908f710e169ea84443c63b2d68bd3a57eacf3dd0c6935a1bec/planb-1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e19916e53a27e8e623feb14843e57f74",
        "sha256": "cbc4ad0f1b08493b5d42f826861b3e3042aa299091433f95bd7ef587377b68bb"
      },
      "downloads": 0,
      "filename": "planb-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e19916e53a27e8e623feb14843e57f74",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 46130,
      "upload_time": "2017-07-11T13:22:05",
      "url": "https://files.pythonhosted.org/packages/c9/5c/0584f5a52c908f710e169ea84443c63b2d68bd3a57eacf3dd0c6935a1bec/planb-1.0.tar.gz"
    }
  ]
}