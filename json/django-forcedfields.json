{
  "info": {
    "author": "monotonee",
    "author_email": "monotonee@tuta.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Database"
    ],
    "description": "###################\ndjango-forcedfields\n###################\n\n*******\nSummary\n*******\n\nA Python module that provides a set of custom, specialized Django model fields.\n\nWhile I haved worked with Django's ORM for some time and have enjoyed many of\nits features for simple use cases, I find myself increasingly impeded, annoyed,\nand dissatisfied by its limitations in complex applications. One glaring problem\nin my eyes is the ORM's lack of semantic database field data types and\nmodifiers.\n\nFor example, an eight-character varchar field that can be null and that has a\ndefault value of 'elegy' will not result in the MySQL\n`DDL <https://dev.mysql.com/doc/refman/en/glossary.html#glos_ddl>`_::\n\n    VARCHAR(8) DEFAULT 'elegy' NULL\n\nbut simply as::\n\n    VARCHAR(8) NULL\n\nWhile this varchar example may not be the most egregious, it nonetheless\nillustrates a complete reliance upon the application and its ORM for behavior\nthat should be handled, and indeed is best handled, by the database management\nsystem itself.\n\nDatabases should be as self-documenting and semantic as possible, independent of\nany application code, ORM models, or documentation. I will not compromise this\nprinciple for the sake of an ORM's conveniences. To this end, I have begun to\ncreate these custom Django model fields to force Django to issue the most\nspecific and complete DDL statements possible. It is my goal with these and\nfuture fields to shift responsibility from the application ORM to the underlying\ndatabase wherever possible while maintaining a consistent and complete ORM\ninterface and database backend abstraction.\n\n************\nInstallation\n************\n::\n\n    pip install [--user] django-forcedfields\n\n*************\nExample Usage\n*************\n::\n\n    import django_forcedfields as forcedfields\n\nor::\n\n    from django_forcedfields import TimestampField\n\n******\nFields\n******\n\nFixedCharField\n==============\n\n**class FixedCharField(max_length=None, **options)**\n\nThis field extends Django's `CharField\n<https://docs.djangoproject.com/en/dev/ref/models/fields/#charfield>`_.\n\nThis field inherits all functionality and interfaces from Django's standard\nCharField but, rather than producing a ``VARCHAR`` field in the database, the\nFixedCharField creates a ``CHAR`` field. The parent CharField class' keyword\nargument \"max_length\" is retained and, when passed, specifies the ``CHAR``\nfield's max length just like it does for the ``VARCHAR`` implementation.\n\nThe ``CHAR`` field is supported on all RDBMS in common use with Django.\n\nThe current implementation of the FixedCharField does not output complete DDL.\nFuture development will add the ``DEFAULT`` modifier clause when necessary.\n\nA note here on Django's `admonition on null values with text fields\n<https://docs.djangoproject.com/en/dev/ref/models/fields/#null>`_: Django is\nwrong. ``NULL`` means unknown data, an empty string means an empty string. Their\nmeanings are semantically different by definition. Set ``null=True`` on text\nfields when your use case warrants it. That is, when you may have a complete\nabsence of data as well as the need to record an empty string. Google this topic\nfor more analysis.\n\nTimestampField\n==============\n\n**class TimestampField(auto_now=False, auto_now_add=False,\nauto_now_update=False, **options)**\n\nThis field extends Django's `DateTimeField\n<https://docs.djangoproject.com/en/dev/ref/models/fields/#datetimefield>`_.\n\nThis field supports all `DateTimeField keyword arguments\n<https://docs.djangoproject.com/en/dev/ref/models/fields/#datefield>`_ and\nadds a new \"auto_now_update\" argument.\n\n**TimestampField.auto_now_update**\n    auto_now_update is a boolean that, when True, sets a new timestamp field\n    value on update operations *only*, not on insert.\n\n    This option is mutually exclusive with auto_now.\n\nLike its parent DateTimeField, the TimestampField's options auto_now,\nauto_now_add, and auto_now_update will forcibly overwrite any manually-set model\nfield attribute values when enabled and when their conditions are triggered.\n\nA timestamp is well-suited to record system and database record metadata such as\nrecord insert and update times. Due to the database data type features, it is\nalso ideal when storing a fixed point in time, independent of time zone.\nAlthough the creation of the TimestampField was largely motivated by the need\nfor an ORM abstraction for metadata fields, it can also be used just like its\nparent DateTimeField as long as one understands the data type's different\nadvantages and limitations.\n\nInstead of DateTimeField's reliance on ``DATETIME`` and similar data types, the\nTimestampField uses ``TIMESTAMP`` data type and other data types that do not\nstore time zone information. The data type changes can be seen in the following\ntable:\n\n========== ======================= ===========================\ndatabase   DateTimeField data type TimestampField data type\n========== ======================= ===========================\nMySQL      DATETIME                TIMESTAMP\nPostgreSQL TIMESTAMP WITH TIMEZONE TIMESTAMP WITHOUT TIME ZONE\nsqlite     DATETIME                DATETIME\n========== ======================= ===========================\n\nAlso note that standard DDL modifiers such as ``DEFAULT CURRENT TIMESTAMP`` and\nnon-standard ones such as MySQL's ``ON UPDATE CURRENT_TIMESTAMP`` are used when\nthe corresponding options are enabled.\n\nNaturally, when designing a system field instead of a user data field, the need\nto offload responsibility to the underlying database becomes greater. If the\ndata is for system and metadata purposes, then it increases consistency and\ndata integrity to delegate field value management to the system itself.\nUnfortunately, Django's ORM made this difficult.\n\nIn implementing Django custom field method overrides, I attempted to use\ndatabase backend-specific functions and keywords such as ``NOW()`` and\n``CURRENT_TIMESTAMP`` to allow the database management system to set its own\ntimestamp rather than generating the value from the application layer. However,\nin methods such as `get_db_prep_value\n<https://docs.djangoproject.com/en/dev/ref/models/fields/#django.db.models.Field.get_prep_value>`_,\nthe return value is always quoted in the final, compiled SQL, causing some\ndatabases to emit errors. I finally conceded (temporary) defeat and reverted to\napplication-generated timestamp values.\n\nDevelopment\n===========\n\nTo set up the development environment, a Vagrantfile is included. Install\n`Vagrant <https://www.vagrantup.com/>`_ and::\n\n    vagrant up\n\nOnce Vagrant has completed provisioning, ``vagrant ssh`` into the box and start\nthe database servers against which to run the test suite::\n\n    docker-compose up -d\n\nFinally, run the tests with::\n\n    make tests\n\nIn this project, I use `Google's Python style guide\n<https://google.github.io/styleguide/pyguide.html>`_. Pylint doesn't play nicely\nwith some of the styles. A few notes on pylint:\n\n* bad-continuation\n\n    * Ignore most of these. Google style guide allows for a 4-space hanging\n      indent with nothing on first line.\n    * Example: `line length\n      <https://google.github.io/styleguide/pyguide.html?showone=Line_length#Line_length>`_\n    * Example: `indentation\n      <https://google.github.io/styleguide/pyguide.html?showone=Indentation#Indentation>`_\n\n* bad-super-call\n\n    * Ignore this. I use the first argument of Python's build-in ``super()`` to\n      define the method resolution order and pass ``self`` as the second\n      argument to bind the method call to the current instance.\n    * `super() <https://docs.python.org/3/library/functions.html#super>`_\n\nOracle Support\n==============\n\nThe FixedCharField should work on Oracle but the TimestampField will default to\nDateTimeField database field data types when used with Oracle. I did not test\nOracle for a few reasons:\n\n#. It is too difficult to get an Oracle server instance against which to test.\n   As one can see, I use lightweight Docker containerized services to run the\n   test databases. To use Oracle, one needs to provide the Oracle installation\n   binaries. To get the binaries, one needs to sign in to Oracle's web site for\n   the privilege of downloading over 2.5 gigabytes. Too much unnecessary pain,\n   not enough return. If you use Oracle products, I sympathize and may god have\n   mercy on your soul.\n\n    * https://github.com/oracle/docker-images/tree/master/OracleDatabase\n\n#. Oracle seems to be `rarely used with Django\n   <https://www.djangosites.org/stats/>`_.\n#. I hate Oracle products and Oracle as an entity.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/monotonee/django-forcedfields",
    "keywords": "char database django field model timestamp",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-forcedfields",
    "platform": "",
    "project_url": "https://pypi.org/project/django-forcedfields/",
    "release_url": "https://pypi.org/project/django-forcedfields/0.1.1/",
    "requires_python": "",
    "summary": "Django model fields designed to more precisely define data types in database fields.",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "13aaad5e4ad456161caa40f200e7b8e7",
          "sha256": "25910c9a5c7d61f0a4dadf12e7e12ba3668fcc895b82cc5a8cd6f61fb50b04a4"
        },
        "downloads": 16,
        "filename": "django_forcedfields-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "13aaad5e4ad456161caa40f200e7b8e7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 14129,
        "upload_time": "2017-03-11T01:44:23",
        "url": "https://files.pythonhosted.org/packages/24/19/f6a41ed510cb21036a633e8c9fb3e955bf4db8115947fb9eaf41b0997240/django_forcedfields-0.1.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "db24073f397559b4f8e2e72064e7faf1",
          "sha256": "ffd0008b3b52c9a0762e8c13aeebe3e8f62631ab0261ebbca6f6859ccb817932"
        },
        "downloads": 14,
        "filename": "django-forcedfields-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "db24073f397559b4f8e2e72064e7faf1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10366,
        "upload_time": "2017-03-11T01:44:25",
        "url": "https://files.pythonhosted.org/packages/72/fe/e0d91c5e5558b54b57c696b52c47dea1e3c67133977c964567884550420c/django-forcedfields-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "13aaad5e4ad456161caa40f200e7b8e7",
        "sha256": "25910c9a5c7d61f0a4dadf12e7e12ba3668fcc895b82cc5a8cd6f61fb50b04a4"
      },
      "downloads": 16,
      "filename": "django_forcedfields-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "13aaad5e4ad456161caa40f200e7b8e7",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 14129,
      "upload_time": "2017-03-11T01:44:23",
      "url": "https://files.pythonhosted.org/packages/24/19/f6a41ed510cb21036a633e8c9fb3e955bf4db8115947fb9eaf41b0997240/django_forcedfields-0.1.1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "db24073f397559b4f8e2e72064e7faf1",
        "sha256": "ffd0008b3b52c9a0762e8c13aeebe3e8f62631ab0261ebbca6f6859ccb817932"
      },
      "downloads": 14,
      "filename": "django-forcedfields-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "db24073f397559b4f8e2e72064e7faf1",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10366,
      "upload_time": "2017-03-11T01:44:25",
      "url": "https://files.pythonhosted.org/packages/72/fe/e0d91c5e5558b54b57c696b52c47dea1e3c67133977c964567884550420c/django-forcedfields-0.1.1.tar.gz"
    }
  ]
}