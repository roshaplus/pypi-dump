{
  "info": {
    "author": "James Kermode",
    "author_email": "james.kermode@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "f90wrap: Fortran to Python interface generator with derived type support\n========================================================================\n\n[![Build Status](https://travis-ci.org/jameskermode/f90wrap.svg?branch=master)](https://travis-ci.org/jameskermode/f90wrap)\n\nf90wrap is a tool to automatically generate Python extension modules\nwhich interface to Fortran code that makes use of derived types. It\nbuilds on the capabilities of the popular\n[f2py](https://sysbio.ioc.ee/projects/f2py2e/) utility by generating a\nsimpler Fortran 90 interface to the original Fortran code which is then\nsuitable for wrapping with f2py, together with a higher-level Pythonic\nwrapper that makes the existance of an additional layer transparent to\nthe final user.\n\nCopyright (C) James Kermode 2011-2016. Released under the GNU General\nPublic License, version 2. Originally based on f90doc - automatic\ndocumentation generator for Fortran 90. Copyright (C) 2004 Ian Rutt.\n\nIf you would like to license the source code under different terms,\nplease contact James Kermode <james.kermode@gmail.com>\n\nDependencies\n------------\n\n 1.  [Python](http://www.python.org) \\>= 2.7 or 3.x (both now supported!)\n 2.  Recent version of [numpy](http://www.numpy.org) which includes `f2py`\n 3.  Fortran compiler - tested with `gfortran` 4.6+ and recent `ifort` 12+\n\nInstallation\n------------\n\nInstallation is as follows:\n\n    git clone https://github.com/jameskermode/f90wrap\n    cd f90wrap\n    python setup.py install [--prefix PREFIX]\n\n\nf90wrap can also be installed using `conda` via the conda-forge channel:\n\n```\nconda config --add channels conda-forge\n```\n\nOnce the conda-forge channel has been enabled, f90wrap can be installed with:\n\n```\nconda install f90wrap\n```\n\nIt is possible to list all of the versions of f90wrap available on your platform with:\n\n```\nconda search f90wrap --channel conda-forge\n```\n\n\nExamples and Testing\n--------------------\n\nTo test the installation, run `make test` from the `examples/`\ndirectory. You may find the code in the various examples useful.\n\nCase studies\n------------\n\nf90wrap has been used to wrap the following large-scale scientific\napplications:\n\n - [QUIP](http://libatoms.github.io/QUIP/) - molecular dynamics code\n - [CASTEP](http://www.castep.org) - electronic structure code\n\nSee this [IPython notebook](http://nbviewer.ipython.org/github/jameskermode/f90wrap/blob/master/docs/tutorials/kermode-csc-warwick-nov-2015.ipynb) from a recent seminar for more details.\n\nUsage\n-----\n\nTo use `f90wrap` to wrap a set of Fortran 90 source files and produce\nwrappers suitable for input to f2py use:\n\n    f90wrap -m MODULE F90_FILES\n\nwhere `MODULE` is the name of the Python module you want to produce (e.g.\nthe name of the Fortran code you are wrapping) and `F90_FILES` is a list\nof Fortran 90 source files containing the modules, types and subroutines\nyou would like to expose via Python.\n\nThis will produce two types of output: Fortran 90 wrapper files suitable\nfor input to `f2py` to produce a low-level Python extension module, and a\nhigh-level Python module desinged to be used together with the\nf2py-generated module to give a more Pythonic interface.\n\nOne Fortran 90 wrapper file is written for each source file, named\n`f90wrap_F90_FILE.f90`, plus possibly an extra file named\n`f90wrap_toplevel.f90` if there are any subroutines or functions defined\noutside of modules in `F90_FILES`.\n\nTo use f2py to compile these wrappers into an extension module, use:\n\n    f2py -c -m _MODULE OBJ_FILES f90wrap_*.f90 *.o\n\nwhere `_MODULE` is the name of the low-level extension module.\n\nOptionally, you can replace `f2py` with `f2py-f90wrap`, which is a\nslightly modified version of `f2py` included in this distribution\nthat introduces the following features:\n\n1.  Allow the Fortran `present()` intrinsic function to work correctly with\n    optional arguments. If an argument to an f2py wrapped function is\n    optional and is not given, replace it with `NULL`.\n2.  Allow Fortran routines to raise a RuntimeError exception with a\n    message by calling an external function `f90wrap_abort`().\n    This is implemented using a `setjmp()/longjmp()` trap.\n3.  Allow Fortran routines to be interrupted with `Ctrl+C` by installing\n    a custom interrupt handler before the call into Fortran is made.\n    After the Fortran routine returns, the previous interrupt handler\n    is restored.\n\nNotes\n-----\n\n- Unlike standard `f2py`, `f90wrap` converts all `intent(out)` arrays to\n`intent(in, out)`. This was a deliberate design decision to allow allocatable and automatic arrays of unknown output size to be used. It is hard in general to work out what size array needs to be allocated, so relying on the the user to pre-allocate from Python is the safest solution.\n- Scalar arguments without `intent` are treated as `intent(in)` by `f2py`. To have `inout` scalars, you need to call `f90wrap` with the `--default-to-inout` flag and declare the python variables as 1-length numpy arrays (`numpy.zeros(1)` for example).\n- Pointer arguments are not supported.\n- Arrays of derived types are currently not fully supported: a workaround is provided for 1D-fixed-length arrays, i.e. `type(a), dimension(b) :: c`. In this case, the super-type `Type_a_Xb_Array` will be created, and the array of types can be accessed through `c.items`. Note that dimension b can not be `:`, but can be a parameter.\n\n\nHow f90wrap works\n-----------------\n\nThere are five steps in the process of wrapping a Fortran 90 routine to\nallow it to be called from Python.\n\n1.  The Fortran source files are scanned, building up an\n    abstract symbol tree (AST) which describes all the modules, types,\n    subroutines and functions found.\n2.  The AST is transformed to remove nodes which\n    should not be wrapped (e.g. private symbols in modules, routines\n    with arguments of a derived type not defined in the project, etc.)\n3.  The `f90wrap.f90wrapgen.F90WrapperGenerator` class is used to write\n    a simplified Fortran 90 prototype for each routine, with derived\n    type arguments replaced by integer arrays containing a\n    representation of a pointer to the derived type, in the manner\n    described in\n    (Pletzer2008)[http://link.aip.org/link/?CSENFA/10/86/1].\n    This allows opaque references to the\n    true Fortran derived type data structures to be passed back and\n    forth between Python and Fortran.\n4.  f2py is used to combine the F90 wrappers and the original compiled\n    functions into a Python extension module (optionally, f2py can be\n    replaced by f2py-f90wrap, a slightly modified version which adds\n    support for exception handling and interruption during exceution of\n    Fortran code).\n5.  The `f90wrap.pywrapgen.PythonWrapperGenerator` class is used to\n    write a thin object-oriented layer on top of the f2py generated\n    wrapper functions which handles conversion between Python object\n    instances and Fortran derived-type variables, converting arguments\n    back and forth automatically.\n\nAdvanced Features\n-----------------\n\nAdditional command line arguments can be passed to f90wrap to customize\nhow the wrappers are generated. See the `examples/` directory to see how\nsome of the options are used:\n\n    -h, --help            show this help message and exit\n    -v, --verbose         set verbosity level [default: None]\n    -V, --version         show program's version number and exit\n    -p PREFIX, --prefix PREFIX\n                          Prefix to prepend to arguments and subroutines.\n    -c [CALLBACK [CALLBACK ...]], --callback [CALLBACK [CALLBACK ...]]\n                          Names of permitted callback routines.\n    -C [CONSTRUCTORS [CONSTRUCTORS ...]], --constructors [CONSTRUCTORS [CONSTRUCTORS ...]]\n                          Names of constructor routines.\n    -D [DESTRUCTORS [DESTRUCTORS ...]], --destructors [DESTRUCTORS [DESTRUCTORS ...]]\n                          Names of destructor routines.\n    -k KIND_MAP, --kind-map KIND_MAP\n                          File containing Python dictionary in f2py_f2cmap\n                          format\n    -s STRING_LENGTHS, --string-lengths STRING_LENGTHS\n                          \"File containing Python dictionary mapping string\n                          length names to values\n    -S DEFAULT_STRING_LENGTH, --default-string-length DEFAULT_STRING_LENGTH\n                          Default length of character strings\n    -i INIT_LINES, --init-lines INIT_LINES\n                          File containing Python dictionary mapping type names\n                          to necessary initialisation code\n    -I INIT_FILE, --init-file INIT_FILE\n                          Python source file containing code to be added to\n                          autogenerated __init__.py\n    -A ARGUMENT_NAME_MAP, --argument-name-map ARGUMENT_NAME_MAP\n                          File containing Python dictionary to rename Fortran\n                          arguments\n    --short-names SHORT_NAMES\n                          File containing Python dictionary mapping full type\n                          names to abbreviations\n    -m MOD_NAME, --mod-name MOD_NAME\n                          Name of output extension module (without .so\n                          extension).\n    -M, --move-methods    Convert routines with derived type instance as first\n                          agument into class methods\n    -P, --package         Generate a Python package instead of a single module\n    -a ABORT_FUNC, --abort-func ABORT_FUNC\n                          Name of Fortran subroutine to invoke if a fatal error\n                          occurs\n    --only [ONLY [ONLY ...]]\n                          Subroutines to include in wrapper\n    --skip [SKIP [SKIP ...]]\n                          Subroutines to exclude from wrapper         \n\nAuthor\n------\n\nJames Kermode: <james.kermode@gmail.com>\n\nContributors\n------------\n\n- Steven Murray [steven-murray](https://github.com/steven-murray)\n- Greg Corbett  [gregcorbett](https://github.com/gregcorbett)\n- Bob Fischer [citibob](https://github.com/citibob)\n- David Verelst [davidovitch](https://github.com/davidovitch)\n- James Orr [jamesorr](https://github.com/jamesorr)\n- [yvesch](https://github.com/yvesch)",
    "docs_url": null,
    "download_url": "https://github.com/jameskermode/f90wrap/archive/v0.1.4.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jameskermode/f90wrap",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "f90wrap",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/f90wrap/",
    "release_url": "https://pypi.org/project/f90wrap/0.1.4/",
    "requires_python": null,
    "summary": "Fortran to Python interface generator with derived type support",
    "version": "0.1.4"
  },
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "34384c83d57d3ee13d3ed19d85b15935",
          "sha256": "afa19c27e952f167cdd20497f97864ffaa0ac1033733b2f46d86951a618364b1"
        },
        "downloads": 404,
        "filename": "f90wrap-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "34384c83d57d3ee13d3ed19d85b15935",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66217,
        "upload_time": "2016-08-09T08:47:31",
        "url": "https://files.pythonhosted.org/packages/05/80/80e4f6d3829a583d1bf9fad4735c9c4f7d9e96d0c51737413aeb6b7c07b7/f90wrap-0.1.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "34384c83d57d3ee13d3ed19d85b15935",
        "sha256": "afa19c27e952f167cdd20497f97864ffaa0ac1033733b2f46d86951a618364b1"
      },
      "downloads": 404,
      "filename": "f90wrap-0.1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "34384c83d57d3ee13d3ed19d85b15935",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 66217,
      "upload_time": "2016-08-09T08:47:31",
      "url": "https://files.pythonhosted.org/packages/05/80/80e4f6d3829a583d1bf9fad4735c9c4f7d9e96d0c51737413aeb6b7c07b7/f90wrap-0.1.4.tar.gz"
    }
  ]
}