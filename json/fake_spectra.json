{
  "info": {
    "author": "Simeon Bird",
    "author_email": "spb@ias.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Astronomy",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "= Flux extractor =\r\n\r\nThis is a small code for generating and analyzing simulated spectra from\r\nArepo/Gadget HDF5 simulation output. It is fast, parallel and written in C++ and Python 3.\r\nIt really has two parts: \r\n1) a C++/python 3 code which generates and analyses arbitrary spectra\r\n2) A (slightly) maintained C++ command line program, extract, that generates \r\nLyman-alpha spectra and outputs them to a binary file.\r\n\r\nIf you are reading these instructions, I will assume you are using the first part:\r\nthe second program is for compatibility with older spectral extraction codes, \r\nof which this is a rewrite, and so anyone who wants it should already know \r\nhow to use it.\r\n\r\n== Installation ==\r\n\r\n*This is a python 3 code*\r\n*Make sure you install the python 3 libraries!*\r\n\r\nRequired Python libraries:\r\n- numpy (core functionality)\r\n- h5py (for saving)\r\n\r\nOptional libraries:\r\n- matplotlib (if you want to plot)\r\n- cloudy_tables (scripts for finding an ionisation fraction from a cloudy table): this is required to generate metal line absorption.\r\n- bigfile (to install, do 'pip install --user bigfile') for reading BigFile snapshot outputs from Yu Feng's MP-Gadget.\r\n- spb_common  (used only to read halo catalogues)\r\n\r\nAll these libraries should be in your $PYTHONPATH\r\n\r\nAt time of writing, the code should compile with python2, once \r\npython3-config in the Makefile is replaced with python2-config. \r\nHowever, I do not guarantee bug-free operation, and strongly \r\nrecommend using python 3.\r\n\r\nTo make the C module, type:\r\n\"make\"\r\nOn some systems you may have to set PYINC in the Makefile \r\nto the location of your python include headers.\r\n\r\nThe test suite for the C++ module requires Boost::Test and can be used with \r\n\"make test\"\r\n\r\n== Usage ==\r\nThe main spectral generation routines are used can be called with:\r\n\r\nimport spectra\r\nspectra.Spectra(...)\r\n\r\nHowever, this requires you to specify the positions of each sightline.\r\nI have created a number of convenient wrappers for common configurations.\r\nTwo of these are:\r\n\r\nrandspectra.py - Generate spectra at random locations. Can optionally discard spectra that\r\ndo not meet an HI column density threshold.\r\nhalospectra.py - Generate spectra through the center of halos.\r\n\r\nSpectral generation routines take two arguments, base and num, which\r\nspecify where they should look for snapshot output. They will search:\r\n$(base)/snapdir_$(num)/snap_$(num).hdf5\r\nNote that num is padded with zeros to three characters, so passing '40' will result in '040'.\r\n\r\nColumn densities can be generated for arbitrary ions with the method get_col_density(elem, ion)\r\nFor neutral gas, pass ion 1. For the sum of all ionic species, pass ion -1.\r\n\r\nOptical depths can be generated for arbitrary lines with the method get_tau(elem, ion, line)\r\nLine data is loaded from a copy of atom.dat taken from VPFIT.\r\n\r\nThus, to generate randomly positioned Lyman-series spectra and associated HI column densities, \r\none would use this script:\r\n\r\nfrom randspectra import RandSpectra\r\n\r\nrr = RandSpectra(5, \"MySim\", thresh=0.)\r\nrr.get_tau(\"H\",1,1215)\r\n#Lyman-beta\r\nrr.get_tau(\"H\",1,1026)\r\nrr.get_col_density(\"H\",1)\r\n#Save spectra to file\r\nrr.save_file()\r\n\r\nGenerated spectra will be saved into HDF5 files, for ease of later analysis.\r\nEach spectral generation routine saves spectra to a differently named file.\r\n\r\nTo load them again, use the PlottingSpectra routines:\r\n\r\nfrom plot_spectra import PlottingSpectra\r\n\r\nps = PlottingSpectra(5,\"MySim\", savefile=\"mysavefile.hdf5\")\r\nps.plot_cddf(\"H\",1)",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/sbird/fake_spectra",
    "keywords": "",
    "license": "UNKNOWN",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fake_spectra",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/fake_spectra/",
    "release_url": "https://pypi.org/project/fake_spectra/1.1/",
    "requires_python": null,
    "summary": "Analysis tools for generating artificial spectra from simulations.",
    "version": "1.1"
  },
  "releases": {
    "1.0": [],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9d7e4aa3fd979b4123b912f6e569eb26",
          "sha256": "99e2c4997904c4a90ab6939225eaabc4f802ccb3bbb610090a1ca0b19d95fb26"
        },
        "downloads": 0,
        "filename": "fake_spectra-1.1b.tar.gz",
        "has_sig": false,
        "md5_digest": "9d7e4aa3fd979b4123b912f6e569eb26",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14839096,
        "upload_time": "2017-06-06T23:49:17",
        "url": "https://files.pythonhosted.org/packages/3d/ff/4c6f678b683f8d90889d8a14e833d110ff4c99e33d24248ad5f83887f675/fake_spectra-1.1b.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9d7e4aa3fd979b4123b912f6e569eb26",
        "sha256": "99e2c4997904c4a90ab6939225eaabc4f802ccb3bbb610090a1ca0b19d95fb26"
      },
      "downloads": 0,
      "filename": "fake_spectra-1.1b.tar.gz",
      "has_sig": false,
      "md5_digest": "9d7e4aa3fd979b4123b912f6e569eb26",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 14839096,
      "upload_time": "2017-06-06T23:49:17",
      "url": "https://files.pythonhosted.org/packages/3d/ff/4c6f678b683f8d90889d8a14e833d110ff4c99e33d24248ad5f83887f675/fake_spectra-1.1b.tar.gz"
    }
  ]
}