{
  "info": {
    "author": "Simeon Bird",
    "author_email": "spb@ias.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Astronomy",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "= Flux extractor =\n\nThis is a small code for generating and analyzing simulated spectra from\nArepo/Gadget HDF5 simulation output. It is fast, parallel and written in C++ and Python 3.\nIt really has two parts: \n1) a C++/python 3 code which generates and analyses arbitrary spectra\n2) A (slightly) maintained C++ command line program, extract, that generates \nLyman-alpha spectra and outputs them to a binary file.\n\nIf you are reading these instructions, I will assume you are using the first part:\nthe second program is for compatibility with older spectral extraction codes, \nof which this is a rewrite, and so anyone who wants it should already know \nhow to use it.\n\n== Installation ==\n\n*This is a python 3 code*\n*Make sure you install the python 3 libraries!*\n\nRequired Python libraries:\n- numpy (core functionality)\n- h5py (for saving)\n\nOptional libraries:\n- matplotlib (if you want to plot)\n- cloudy_tables (scripts for finding an ionisation fraction from a cloudy table): this is required to generate metal line absorption.\n- bigfile (to install, do 'pip install --user bigfile') for reading BigFile snapshot outputs from Yu Feng's MP-Gadget.\n- spb_common  (used only to read halo catalogues)\n\nAll these libraries should be in your $PYTHONPATH\n\nAt time of writing, the code should compile with python2, once \npython3-config in the Makefile is replaced with python2-config. \nHowever, I do not guarantee bug-free operation, and strongly \nrecommend using python 3.\n\nTo make the C module, type:\n\"make\"\nOn some systems you may have to set PYINC in the Makefile \nto the location of your python include headers.\n\nThe test suite for the C++ module requires Boost::Test and can be used with \n\"make test\"\n\n== Usage ==\nThe main spectral generation routines are used can be called with:\n\nimport spectra\nspectra.Spectra(...)\n\nHowever, this requires you to specify the positions of each sightline.\nI have created a number of convenient wrappers for common configurations.\nTwo of these are:\n\nrandspectra.py - Generate spectra at random locations. Can optionally discard spectra that\ndo not meet an HI column density threshold.\nhalospectra.py - Generate spectra through the center of halos.\n\nSpectral generation routines take two arguments, base and num, which\nspecify where they should look for snapshot output. They will search:\n$(base)/snapdir_$(num)/snap_$(num).hdf5\nNote that num is padded with zeros to three characters, so passing '40' will result in '040'.\n\nColumn densities can be generated for arbitrary ions with the method get_col_density(elem, ion)\nFor neutral gas, pass ion 1. For the sum of all ionic species, pass ion -1.\n\nOptical depths can be generated for arbitrary lines with the method get_tau(elem, ion, line)\nLine data is loaded from a copy of atom.dat taken from VPFIT.\n\nThus, to generate randomly positioned Lyman-series spectra and associated HI column densities, \none would use this script:\n\nfrom randspectra import RandSpectra\n\nrr = RandSpectra(5, \"MySim\", thresh=0.)\nrr.get_tau(\"H\",1,1215)\n#Lyman-beta\nrr.get_tau(\"H\",1,1026)\nrr.get_col_density(\"H\",1)\n#Save spectra to file\nrr.save_file()\n\nGenerated spectra will be saved into HDF5 files, for ease of later analysis.\nEach spectral generation routine saves spectra to a differently named file.\n\nTo load them again, use the PlottingSpectra routines:\n\nfrom plot_spectra import PlottingSpectra\n\nps = PlottingSpectra(5,\"MySim\", savefile=\"mysavefile.hdf5\")\nps.plot_cddf(\"H\",1)\n",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/sbird/fake_spectra",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "fake_spectra",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/fake_spectra/",
    "release_url": "https://pypi.org/project/fake_spectra/1.0/",
    "requires_python": null,
    "summary": "Analysis tools for generating artificial spectra from simulations.",
    "version": "1.0"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "217b994ff5f43031b30d6524ae67c5fd",
          "sha256": "01d18dd4813aeebea246463e2ef21bfd07efb1f6a00bc2ee281425b2e66d0719"
        },
        "downloads": 0,
        "filename": "fake_spectra-1.0.2a.tar.gz",
        "has_sig": false,
        "md5_digest": "217b994ff5f43031b30d6524ae67c5fd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 98111,
        "upload_time": "2017-04-25T16:56:37",
        "url": "https://files.pythonhosted.org/packages/68/04/724765fb6948f22c8fd95d1e88f96343fd68616e3dc1b31610d47ab26519/fake_spectra-1.0.2a.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "217b994ff5f43031b30d6524ae67c5fd",
        "sha256": "01d18dd4813aeebea246463e2ef21bfd07efb1f6a00bc2ee281425b2e66d0719"
      },
      "downloads": 0,
      "filename": "fake_spectra-1.0.2a.tar.gz",
      "has_sig": false,
      "md5_digest": "217b994ff5f43031b30d6524ae67c5fd",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 98111,
      "upload_time": "2017-04-25T16:56:37",
      "url": "https://files.pythonhosted.org/packages/68/04/724765fb6948f22c8fd95d1e88f96343fd68616e3dc1b31610d47ab26519/fake_spectra-1.0.2a.tar.gz"
    }
  ]
}