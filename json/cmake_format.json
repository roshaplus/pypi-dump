{
  "info": {
    "author": "Josh Bialkowski",
    "author_email": "josh.bialkowski@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "============\ncmake format\n============\n\n``cmake-format`` can format your listfiles nicely so that they don't look\nlike crap.\n\n-----\nUsage\n-----\n\n.. code:: text\n\n    usage: cmake-format [-h] [-i] [-o OUTFILE_PATH] [-c CONFIG_FILE]\n                          infilepaths [infilepaths ...]\n\n    Parse cmake listfiles and format them nicely.\n\n    positional arguments:\n      infilepaths\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -i, --in-place\n      -o OUTFILE_PATH, --outfile-path OUTFILE_PATH\n                            Where to write the formatted file. Default is stdout.\n      -c CONFIG_FILE, --config-file CONFIG_FILE\n                            path to yaml config\n\n-------------\nConfiguration\n-------------\n\n``cmake-format`` accepts configuration files in yaml or json format. An example\nconfiguration file is given here. Additional flags and additional kwargs will\nhelp ``cmake_format`` to break up your custom commands in a pleasant way.\n\n.. code:: yaml\n\n    # How wide to allow formatted cmake files\n    line_width: 80\n\n    # How many spaces to tab for indent\n    tab_size: 2\n\n    # If arglists are longer than this, break them always.\n    max_subargs_per_line: 3\n\n    # Additional FLAGS and KWARGS for custom commands\n    additional_commands:\n      foo:\n        flags: [BAR, BAZ]\n        kwargs:\n          HEADERS : '*'\n          SOURCES : '*'\n          DEPENDS : '*'\n\nYou may specify a path to a configuration file with the ``--config-file``\ncommand line option. Otherwise, ``cmake-format`` will search the ancestry\nof each ``infilepath`` looking for a configuration file to use. If no\nconfiguration file is found it will use sensible defaults.\n\nA automatically detected configuration file may be named any of the following:\n\n* ``.cmake-format``\n* ``cmake-format.yaml``\n* ``cmake-format.json``\n\n-------\nExample\n-------\n\nWill turn this:\n\n.. code:: cmake\n\n    # The following multiple newlines should be collapsed into a single newline\n\n\n\n\n    cmake_minimum_required(VERSION 2.8.11)\n    project(cmake_format_test)\n\n    # This multiline-comment should be reflowed\n    # into a single comment\n    # on one line\n\n    # This comment should remain right before the command call.\n    # Furthermore, the command call should be formatted\n    # to a single line.\n    add_subdirectories(foo bar baz\n      foo2 bar2 baz2)\n\n    # This very long command should be split to multiple lines\n    set(HEADERS very_long_header_name_a.h very_long_header_name_b.h very_long_header_name_c.h)\n\n    # This command should be split into one line per entry because it has a long\n    # argument list.\n    set(SOURCES source_a.cc source_b.cc source_d.cc source_e.cc source_f.cc source_g.cc)\n\n    # The string in this command should not be split\n    set_target_properties(foo bar baz PROPERTIES COMPILE_FLAGS \"-std=c++11 -Wall -Wextra\")\n\n    # This command has a very long argument and can't be aligned with the command\n    # end, so it should be moved to a new line with block indent + 1.\n    some_long_command_name(\"Some very long argument that really needs to be on the next line.\")\n\n    # This situation is similar but the argument to a KWARG needs to be on a\n    # newline instead.\n    set(CMAKE_CXX_FLAGS \"-std=c++11 -Wall -Wno-sign-compare -Wno-unused-parameter -xx\")\n\n    set(HEADERS header_a.h header_b.h # This comment should\n                                      # be preserved, moreover it should be split\n                                      # across two lines.\n        header_c.h header_d.h)\n\n\n    # This part of the comment should\n    # be formatted\n    # but...\n    # cmake-format: off\n    # This bunny should remain untouched:\n    # . \u3000 \uff3f\u3000\u2229\n    # \u3000\u3000\uff9a\uff8d\u30fd| |\n    # \u3000\u3000\u3000 (\u30fb\uff58\u30fb)\n    # \u3000\u3000 c( uu}\n    # cmake-format: on\n    #          while this part should\n    #          be formatted again\n\n    # This is a paragraph\n    #\n    # This is a second paragraph\n    #\n    # This is a third paragraph\n\n    # This is a comment\n    # that should be joined but\n    # TODO(josh): This todo should not be joined with the previous line.\n    # NOTE(josh): Also this should not be joined with the todo.\n\n    if(foo)\n    if(sbar)\n    # This comment is in-scope.\n    add_library(foo_bar_baz foo.cc bar.cc # this is a comment for arg2\n                  # this is more comment for arg2, it should be joined with the first.\n        baz.cc) # This comment is part of add_library\n\n    other_command(some_long_argument some_long_argument) # this comment is very long and gets split across some lines\n\n    other_command(some_long_argument some_long_argument some_long_argument) # this comment is even longer and wouldn't make sense to pack at the end of the command so it gets it's own lines\n    endif()\n    endif()\n\n\n    # This very long command should be broken up along keyword arguments\n    foo(nonkwarg_a nonkwarg_b HEADERS a.h b.h c.h d.h e.h f.h SOURCES a.cc b.cc d.cc DEPENDS foo bar baz)\n\n    # This command uses a string with escaped quote chars\n    foo(some_arg some_arg \"This is a \\\"string\\\" within a string\")\n\n    # This command uses an empty string\n    foo(some_arg some_arg \"\")\n\n    # This command uses a multiline string\n    foo(some_arg some_arg \"\n        This string is on multiple lines\n    \")\n\n\ninto this:\n\n.. code:: cmake\n\n    # The following multiple newlines should be collapsed into a single newline\n\n    cmake_minimum_required(VERSION 2.8.11)\n    project(cmake_format_test)\n\n    # This multiline-comment should be reflowed into a single comment on one line\n\n    # This comment should remain right before the command call. Furthermore, the\n    # command call should be formatted to a single line.\n    add_subdirectories(foo bar baz foo2 bar2 baz2)\n\n    # This very long command should be split to multiple lines\n    set(HEADERS\n        very_long_header_name_a.h\n        very_long_header_name_b.h\n        very_long_header_name_c.h)\n\n    # This command should be split into one line per entry because it has a long\n    # argument list.\n    set(SOURCES\n        source_a.cc\n        source_b.cc\n        source_d.cc\n        source_e.cc\n        source_f.cc\n        source_g.cc)\n\n    # The string in this command should not be split\n    set_target_properties(foo bar baz\n                          PROPERTIES COMPILE_FLAGS \"-std=c++11 -Wall -Wextra\")\n\n    # This command has a very long argument and can't be aligned with the command\n    # end, so it should be moved to a new line with block indent + 1.\n    some_long_command_name(\n      \"Some very long argument that really needs to be on the next line.\")\n\n    # This situation is similar but the argument to a KWARG needs to be on a newline\n    # instead.\n    set(CMAKE_CXX_FLAGS\n        \"-std=c++11 -Wall -Wno-sign-compare -Wno-unused-parameter -xx\")\n\n    set(HEADERS\n        header_a.h\n        header_b.h # This comment should be preserved, moreover it should be split\n                  # across two lines.\n        header_c.h\n        header_d.h)\n\n    # This part of the comment should be formatted but...\n    # cmake-format: off\n    # This bunny should remain untouched:\n    # . \u3000 \uff3f\u3000\u2229\n    # \u3000\u3000\uff9a\uff8d\u30fd| |\n    # \u3000\u3000\u3000 (\u30fb\uff58\u30fb)\n    # \u3000\u3000 c( uu}\n    # cmake-format: on\n    # while this part should be formatted again\n\n    # This is a paragraph\n    #\n    # This is a second paragraph\n    #\n    # This is a third paragraph\n\n    # This is a comment that should be joined but\n    # TODO(josh): This todo should not be joined with the previous line.\n    # NOTE(josh): Also this should not be joined with the todo.\n\n    if(foo)\n      if(sbar)\n        # This comment is in-scope.\n        add_library(foo_bar_baz\n                    foo.cc\n                    bar.cc # this is a comment for arg2 this is more comment for\n                          # arg2, it should be joined with the first.\n                    baz.cc) # This comment is part of add_library\n\n        other_command(some_long_argument some_long_argument) # this comment is very\n                                                            # long and gets split\n                                                            # across some lines\n\n        other_command(some_long_argument some_long_argument some_long_argument)\n        # this comment is even longer and wouldn't make sense to pack at the end of\n        # the command so it gets it's own lines\n      endif()\n    endif()\n\n    # This very long command should be broken up along keyword arguments\n    foo(nonkwarg_a nonkwarg_b\n        HEADERS a.h\n                b.h\n                c.h\n                d.h\n                e.h\n                f.h\n        SOURCES a.cc b.cc d.cc\n        DEPENDS foo bar baz)\n\n    # This command uses a string with escaped quote chars\n    foo(some_arg some_arg \"This is a \\\"string\\\" within a string\")\n\n    # This command uses an empty string\n    foo(some_arg some_arg \"\")\n\n    # This command uses a multiline string\n    foo(some_arg some_arg \"\n        This string is on multiple lines\n    \")\n\n",
    "docs_url": null,
    "download_url": "https://github.com/cheshirekow/cmake_format/archive/0.2.0.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/cheshirekow/cmake_format",
    "keywords": "cmake",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cmake_format",
    "platform": "",
    "project_url": "https://pypi.org/project/cmake_format/",
    "release_url": "https://pypi.org/project/cmake_format/0.2.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Can format your listfiles so they don't looke like crap",
    "version": "0.2.0"
  },
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e88c8357961adcbe214c97c582bcf697",
          "sha256": "0e23355d3640a73fe4bf02998112407834180b4ce857b3478392cd77db102bdc"
        },
        "downloads": -1,
        "filename": "cmake_format-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e88c8357961adcbe214c97c582bcf697",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20926,
        "upload_time": "2018-01-24T20:49:48",
        "url": "https://files.pythonhosted.org/packages/8d/3f/cbae86bdad260ebec1465781a361482cf9f5c1cbed1d41a69cd443f6ddb8/cmake_format-0.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e88c8357961adcbe214c97c582bcf697",
        "sha256": "0e23355d3640a73fe4bf02998112407834180b4ce857b3478392cd77db102bdc"
      },
      "downloads": -1,
      "filename": "cmake_format-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e88c8357961adcbe214c97c582bcf697",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 20926,
      "upload_time": "2018-01-24T20:49:48",
      "url": "https://files.pythonhosted.org/packages/8d/3f/cbae86bdad260ebec1465781a361482cf9f5c1cbed1d41a69cd443f6ddb8/cmake_format-0.2.0.tar.gz"
    }
  ]
}