{
  "info": {
    "author": "pohmelie",
    "author_email": "multisosnooley@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3"
    ],
    "description": "[![travis](https://img.shields.io/travis/pohmelie/skin.svg)](https://travis-ci.org/pohmelie/skin)\n[![coveralls](https://img.shields.io/coveralls/pohmelie/skin.svg)](https://coveralls.io/github/pohmelie/skin)\n[![pypi](https://img.shields.io/pypi/v/skin.svg)](https://pypi.python.org/pypi/skin)\n\n# Skin\nGetitem-objects \u00abskin\u00bb for attribute-like access.\n\n## Reason\n[addict](https://github.com/mewwts/addict), [python-box](https://github.com/cdgriffith/Box) and [tri.struct](https://github.com/TriOptima/tri.struct) do not respect `dict` reference transparency.\n### addict\n``` python\n>>> from addict import Dict\n>>> original = {\"foo\": [1, 2, 3]}\n>>> d = Dict(original)\n>>> d.foo\n[1, 2, 3]\n>>> type(d.foo)\n<class 'list'>\n>>> d.foo.append(4)\n>>> original\n{'foo': [1, 2, 3]}\n>>> d.foo\n[1, 2, 3, 4]\n>>>\n```\n### python-box\n``` python\n>>> from box import Box\n>>> original = {\"foo\": [1, 2, 3]}\n>>> b = Box(original)\n>>> b.foo\n<BoxList: [1, 2, 3]>\n>>> type(b.foo)\n<class 'box.BoxList'>\n>>> b.foo.append(4)\n>>> original\n{'foo': [1, 2, 3]}\n>>> b.foo\n<BoxList: [1, 2, 3, 4]>\n>>>\n```\n### tri.struct\n``` python\n>>> from tri.struct import Struct\n>>> o = {\"foo\": [1, 2, {\"bar\": \"baz\"}]}\n>>> s = Struct(o)\n>>> s.foo[-1].bar\nTraceback (most recent call last):\nFile \"<input>\", line 1, in <module>\n    s.foo[-1].bar\nAttributeError: 'dict' object has no attribute 'bar'\n>>> s.new = \"new\"\n>>> o\n{'foo': [1, 2, {'bar': 'baz'}]}\n>>> s\nStruct(foo=[1, 2, {'bar': 'baz'}], new='new')\n>>>\n```\n### skin\n``` python\n>>> from skin import Skin\n>>> original = {\"foo\": [1, 2, 3]}\n>>> s = Skin(original)\n>>> s.foo\nSkin([1, 2, 3])\n>>> type(s.foo)\n<class 'skin.Skin'>\n>>> type(s.foo.value)\n<class 'list'>\n>>> s.foo.value is original[\"foo\"]\nTrue\n>>> s.foo.append(4)\n>>> original\n{'foo': [1, 2, 3, 4]}\n>>>\n```\n# Documentation\n``` python\nSkin(value=DEFAULT_VALUE, *, allowed=ANY, forbidden=FORBIDDEN)\n```\n* value \u2014 any object with `__getitem__` method (default: `dict`).\n* allowed \u2014 tuple of allowed types to wrap or `skin.ANY` for all types allowed (default: `skin.ANY`)\n* forbidden \u2014 tuple of forbidden types to wrap (default: `(str, bytes, bytearray, memoryview, range)`)\n\nWhat is `allowed` and `forbidden`?\n\nSince skin target is not to recreate containers there should be a rule to determine is object container or endpoint-node. Some objects (listed above as `forbidden`) have `__getitem__` method, but wont act like containers.\n\nExample:\nYou have original dictionary `{\"foo\": \"bar\"}`, and you expect from skin that `Skin({\"foo\": \"bar\"}).foo` is `\"bar\"` string, not skin wrapper. But, `str`, `bytes`, etc. have `__getitiem__` method. That is why there is `allowed` and `forbidden` tuples. I hope defaults are enough for 99% usecases.\nIn general: if `value` have no `__getitem__` or not allowed or forbidden you will get `SkinValueError` exception, which skin catches to determine if object can be wrapped.\n\n**Skin class have only one accessible attribute: `value` \u2014 original object, which skin wraps** :tada:\n\nSkin supports both \"item\" and \"attribute\" notations:\n``` python\n>>> s = Skin({\"foo\": \"bar\"})\n>>> s.foo is s[\"foo\"]\nTrue\n>>>\n```\nBut, in case of nested containers:\n``` python\n>>> s = Skin({\"foo\": {\"bar\": \"baz\"}})\n>>> s.foo is s[\"foo\"]\nFalse\n>>> s.foo.value is s[\"foo\"].value\nTrue\n>>>\n```\nBoth objects `s.foo` and `s[\"foo\"]` is instances of `Skin`, but since they are created dynamicaly they are not the same object.\n\nSkin use strict order to find \"items\":\n* in case of attribute access:\n    * skin attribute\n    * value attribute\n    * value item\n    * orphan item\n* in case of item access:\n    * value item\n    * orphan item\n\nOrphan item is just naming for item, which is not yet set. Example:\n``` python\n>>> s = Skin()\n>>> s.foo.bar\nSkin({})\n>>> s\nSkin({})\n>>>\n```\n\nAs you can see there is no \"foo\" or \"bar\" items. But in case of setting:\n``` python\n>>> s = Skin()\n>>> s.foo.bar = \"baz\"\n>>> s\nSkin({'foo': {'bar': 'baz'}})\n>>>\n```\nSince skin is just wrapper, which do not recreate container you can use any object with `__getitem__`:\n``` python\n>>> import collections\n>>> s = Skin(collections.defaultdict(list))\n>>> s.foo.append(1)\n>>> s\nSkin(defaultdict(<class 'list'>, {'foo': [1]}))\n>>>\n```\n\n# Benchmark (v0.0.5)\n``` text\nCreate instance:\n  Box            0.7227337849326432\n  Dict           0.8247780610108748\n  Skin           0.14907896996010095\n  tri.struct     0.014445346896536648\nAccess exist:\n  dict           0.005448702024295926\n  Box            0.32549735193606466\n  Dict           0.21359142300207168\n  Skin           1.5485703510930762\nAccess non-exist:\n  Dict           0.2847607780713588\n  Skin           1.007843557978049\n```\n`Skin` do not wrap objects recursively, so it have constant creation time. In case of access, `Skin` create wrappers every time. That is why it is 3x-8x slower, than `Dict` and `Box`.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pohmelie/skin",
    "keywords": "",
    "license": "Apache 2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "skin",
    "platform": "",
    "project_url": "https://pypi.org/project/skin/",
    "release_url": "https://pypi.org/project/skin/0.0.5/",
    "requires_dist": [],
    "requires_python": ">= 3.4",
    "summary": "Getitem-objects \u00abskin\u00bb for attribute-like access",
    "version": "0.0.5"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2b4a1f07fe9a5ce30f6718f3c370982d",
          "sha256": "9f7ee80b9b4bf9b18b364400f26546906416bbafbac59f0d83958f83bc874381"
        },
        "downloads": -1,
        "filename": "skin-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2b4a1f07fe9a5ce30f6718f3c370982d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3054,
        "upload_time": "2017-11-26T00:52:32",
        "url": "https://files.pythonhosted.org/packages/ea/ec/c974292a50fe5453132af6d7e7d548c0dd325b8488b1ee2371da1fcaf8e9/skin-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a0a2b2c203c56b3dd19413a517bdf06e",
          "sha256": "5fd2fd7873e23ea3f9526ad36c79419045af21f24c353491b6abad0a4584dbf3"
        },
        "downloads": -1,
        "filename": "skin-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a0a2b2c203c56b3dd19413a517bdf06e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3073,
        "upload_time": "2017-11-26T01:08:43",
        "url": "https://files.pythonhosted.org/packages/c1/a4/8775b5b6fb0e74ff748fa9144f3c8eb559dbad652dd2a0541b7589544e8c/skin-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dba54c0bd3a3257a1863747816ca8652",
          "sha256": "58e28af632e09701afa5cb1c5e0ce754857326af11b9c809a9fb633432ce90c9"
        },
        "downloads": -1,
        "filename": "skin-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dba54c0bd3a3257a1863747816ca8652",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4131,
        "upload_time": "2017-11-28T01:01:26",
        "url": "https://files.pythonhosted.org/packages/03/98/a2eaac8dc7b4cab8a1d02539401295ecea75290fe1e30dcdd60c08bedb42/skin-0.0.3.tar.gz"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f1bd2f6fd292a357662f85574e5e1e97",
          "sha256": "15f2b9b2a2908339e04dd25269c030a4fa30c9ac620cb5f823b0b27fc804da98"
        },
        "downloads": -1,
        "filename": "skin-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f1bd2f6fd292a357662f85574e5e1e97",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4095,
        "upload_time": "2017-11-28T01:11:48",
        "url": "https://files.pythonhosted.org/packages/78/de/71c1ee6437e97d077d6a617eb78df9f1c220a6a9242864c871a37bc2b01d/skin-0.0.4.tar.gz"
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "26ad72a1dd1e6ea427685f115b084f5c",
          "sha256": "913eb5e4cf7f47b410606658e6920335ecb42d8121f10fd76ae25c409b9eaf94"
        },
        "downloads": -1,
        "filename": "skin-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "26ad72a1dd1e6ea427685f115b084f5c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4334,
        "upload_time": "2017-11-29T21:58:45",
        "url": "https://files.pythonhosted.org/packages/f2/02/83b563430dedea7b4bbf904088a54e6ad4dd1efb1ca1f12a39896270de8d/skin-0.0.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "26ad72a1dd1e6ea427685f115b084f5c",
        "sha256": "913eb5e4cf7f47b410606658e6920335ecb42d8121f10fd76ae25c409b9eaf94"
      },
      "downloads": -1,
      "filename": "skin-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "26ad72a1dd1e6ea427685f115b084f5c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4334,
      "upload_time": "2017-11-29T21:58:45",
      "url": "https://files.pythonhosted.org/packages/f2/02/83b563430dedea7b4bbf904088a54e6ad4dd1efb1ca1f12a39896270de8d/skin-0.0.5.tar.gz"
    }
  ]
}