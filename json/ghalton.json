{
  "info": {
    "author": "Francois-Michel De Rainville",
    "author_email": "f.derainville@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Topic :: Scientific/Engineering"
    ],
    "description": "Generalized Halton Number Generator\r\n===================================\r\n\r\nThis library allows to generate quasi-random numbers according to the\r\ngeneralized Halton sequence. For more information on Generalized Halton\r\nSequences, their properties, and limits see Braaten and Weller (1979), Faure\r\nand Lemieux (2009), and De Rainville et al. (2012) and reference therein.\r\n\r\n\r\nBuilding The Code\r\n-----------------\r\nTo build the code you'll need a working C++ compiler. ::\r\n\r\n    $ python setup.py install\r\n\r\nUsing the Library\r\n-----------------\r\nThe library contains two generators one producing the standard Halton sequence\r\nand the other a generalized version of it. The former constructor takes a\r\nsingle argument, which is the dimensionalty of the sequence. ::\r\n\r\n    import ghalton\r\n    sequencer = ghalton.Halton(5)\r\n\r\nThe last code will produce a sequence in five dimension. To get the points use ::\r\n\r\n    points = sequencer.get(100)\r\n\r\nA list of 100 lists will be produced, each sub list will containt 5 points ::\r\n\r\n    print points[0]\r\n    # [0.5, 0.3333, 0.2, 0.1429, 0.0909]\r\n\r\nThe halton sequence produce points in sequence, to reset it call\r\n`sequencer.reset()`.\r\n\r\nThe generalised Halton sequence constructor takes at least one argument,\r\neither the dimensionality, or a configuration. When the dimensionality is\r\ngiven, an optional argument can be used to seed for the random permutations\r\ncreated. ::\r\n\r\n    import ghalton\r\n    sequencer = ghalton.GeneralizedHalton(5, 68)\r\n    points = sequencer.get(100)\r\n    print points[0]\r\n    # [0.5, 0.6667, 0.4, 0.8571, 0.7273]\r\n\r\nA configuration is a series of permutations each of *n_i* numbers,\r\nwhere *n_i* is the *n_i*'th prime number. The dimensionality is infered from\r\nthe number of sublists given. ::\r\n\r\n    import ghalton\r\n    perms = ((0, 1),\r\n             (0, 2, 1),\r\n             (0, 4, 2, 3, 1),\r\n             (0, 6, 5, 4, 3, 2, 1),\r\n             (0, 8, 2, 10, 4, 9, 5, 6, 1, 7, 3))\r\n    sequencer = ghalton.GeneralizedHalton(perms)\r\n    points = sequencer.get(100)\r\n    print points[0]\r\n    # [0.5, 0.6667, 0.8, 0.8571, 0.7273]\r\n\r\nThe configuration presented in De Rainville et al. (2012) is available in the\r\nghalton module. Use the first *dim* dimensions of the `EA_PERMS` constant.\r\nThe maximum dimensionality provided is 100. ::\r\n\r\n    import ghalton\r\n    dim = 5\r\n    sequencer = ghalton.GeneralizedHalton(ghalton.EA_PERMS[:dim])\r\n    points = sequencer.get(100)\r\n    print points[0]\r\n    # [0.5, 0.6667, 0.8, 0.8571, 0.7273]\r\n\r\nThe complete API is presented `here <http://vision.gel.ulaval.ca/~fmdrainville/doc/python/index.html>`_.\r\n\r\nReferences\r\n----------\r\nE. Braaten and G. Weller. An improved low-discrepancy sequence for multidi-\r\nmensional quasi-Monte Carlo integration. *J. of Comput. Phys.*,\r\n33(2):249-258, 1979.\r\n\r\nF.-M. De Rainville, C. Gagn\u00e9, O. Teytaud, D. Laurendeau. Evolutionary\r\noptimization of low-discrepancy sequences. *ACM Trans. Model. Comput. Simul.*,\r\n22(2):1-25, 2012.\r\n\r\nH. Faure and C. Lemieux. Generalized Halton sequences in 2008: A comparative\r\nstudy. *ACM Trans. Model. Comput. Simul.*, 19(4):1-43, 2009.",
    "docs_url": null,
    "download_url": "https://github.com/fmder/ghalton/tarball/0.6",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/fmder/ghalton",
    "keywords": "",
    "license": "LICENSE.txt",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ghalton",
    "platform": "",
    "project_url": "https://pypi.org/project/ghalton/",
    "release_url": "https://pypi.org/project/ghalton/0.6/",
    "requires_python": null,
    "summary": "Generalized Halton number generator",
    "version": "0.6"
  },
  "releases": {
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a805befa01b4312a460d6c8e098c6ad9",
          "sha256": "3077a9caf75118e793b0ecc47bb661d0ba900b6751e69ee185aac16f877a2b1f"
        },
        "downloads": 7597,
        "filename": "ghalton-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a805befa01b4312a460d6c8e098c6ad9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 123518,
        "upload_time": "2013-08-21T13:11:18",
        "url": "https://files.pythonhosted.org/packages/30/bf/22194ea16afe433f7f7356ff8e89440821fa1309e93a388820a6b81dc87f/ghalton-0.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a805befa01b4312a460d6c8e098c6ad9",
        "sha256": "3077a9caf75118e793b0ecc47bb661d0ba900b6751e69ee185aac16f877a2b1f"
      },
      "downloads": 7597,
      "filename": "ghalton-0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "a805befa01b4312a460d6c8e098c6ad9",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 123518,
      "upload_time": "2013-08-21T13:11:18",
      "url": "https://files.pythonhosted.org/packages/30/bf/22194ea16afe433f7f7356ff8e89440821fa1309e93a388820a6b81dc87f/ghalton-0.6.tar.gz"
    }
  ]
}