{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Aliyun FunctionCompute Python SDK\n=================================\n\n.. image:: https://badge.fury.io/py/aliyun-fc.svg\n    :target: https://badge.fury.io/py/aliyun-fc\n.. image:: https://travis-ci.org/aliyun/fc-python-sdk.svg?branch=master\n    :target: https://travis-ci.org/aliyun/fc-python-sdk\n.. image:: https://coveralls.io/repos/github/aliyun/fc-python-sdk/badge.svg?branch=master\n    :target: https://coveralls.io/github/aliyun/fc-python-sdk?branch=master\n\nOverview\n--------\n\nThe SDK of this version is dependent on the third-party HTTP library `requests <https://github.com/kennethreitz/requests>`_.\n\n\nRunning environment\n-------------------\n\nPython 2.7, Python 3.6\n\nInstallation\n-------------------\n\nInstall the official release version through PIP (taking Linux as an example):\n\n.. code-block:: bash\n\n    $ pip install aliyun-fc\n\nYou can also install the unzipped installer package directly:\n\n.. code-block:: bash\n\n    $ sudo python setup.py install\n\nNotice\n-------------------\nWe suggest using fc2, which corresponds to the fc2-master branch\uff0cThe main difference between fc and fc2 is:\n\n1, The invoke fuction user can add custom headers\n\n.. code-block:: python\n\n    def invoke_function(self, serviceName, functionName, payload=None, \n            customHeaders = {'x-fc-invocation-type': 'Sync', 'x-fc-log-type' : 'None'}):                                           \n        \"\"\"\n        Invoke the function synchronously.\n        :param serviceName: (required, string) the name of the service.\n        :param functionName: (required, string) the name of the function.\n        :param payload: (optional, bytes or seekable file-like object): the input of the function.\n        Invoke the function synchronously or asynchronously.\n        :param logType: (optional, string) 'None' or 'Tail'. When invoke a function synchronously,\n        you can set the log type to 'Tail' to get the last 4KB base64-encoded function log.\n        :param traceId: (optional, string) a uuid to do the request tracing.\n        :param customHeaders: (required, dict) user-defined request header. \n                            'x-fc-invocation-type' : require, 'Sync'/'Async' ,only two choice\n                            'x-fc-trace-id' : require, default is 'None'\n                            'x-fc-trace-id' : option\n                            # other can add user define header\n        :return: function output InvokeFunctionResponse object.\n\n        \"\"\"\n        return self._invoke_function(\n            serviceName, functionName, payload=payload, customHeaders=customHeaders)\n\n\n2, The reponse returned by the user is the following object, where data represents the \"reponse\" corresponding to fc.\n\n.. code-block:: python\n\n    class InvokeFunctionResponse(object):\n        def __init__(self, headers, data):\n            self._headers = headers\n            self._data = data\n\n        @property\n        def headers(self):\n            return self._headers\n\n        # user function return value\n        @property\n        def data(self):\n            return self._data\n\nInstall the official fc2 release version through PIP (taking Linux as an example):\n\n.. code-block:: bash\n\n    $ pip install aliyun-fc2\n\nGetting started\n-------------------\n\n.. code-block:: python\n\n    # -*- coding: utf-8 -*-\n\n    import fc\n\n    # To know the endpoint and access key id/secret info, please refer to:\n    # https://help.aliyun.com/document_detail/52984.html\n    client = fc.Client(\n        endpoint='<Your Endpoint>',\n        accessKeyID='<Your AccessKeyID>',\n        accessKeySecret='<Your AccessKeySecret>')\n\n    # Create service.\n    client.create_service('service_name')\n\n    # Create function.\n    # the current directory has a main.zip file (main.py which has a function of myhandler)\n    client.create_function('service_name', 'function_name', 'main.my_handler', codeZipFile = 'main.zip')\n\n    # Invoke function synchronously.\n    client.invoke_function('service_name', 'function_name')\n\n    # Invoke a function with a input parameter.\n    client.invoke_function('service_name', 'function_name', payload=bytes('hello_world'))\n\n    # Read a image and invoke a function with the file data as input parameter.\n    src = open('src_image_file_path', 'rb') # Note: please open it as binary.\n    r = client.invoke_function('service_name', 'function_name', payload=src)\n    # save the result as the output image.\n    dst = open('dst_image_file_path', 'wb')\n    dst.write(r) # if fc2, dst.write(r.data)\n    src.close()\n    dst.close()\n\n    # Invoke function asynchronously.\n    client.async_invoke_function('service_name', 'function_name')\n\n    # List services.\n    client.list_services()\n\n    # List functions with prefix and limit.\n    client.list_functions('service_name', prefix='the_prefix', limit=10)\n\n    # Delete service.\n    client.delete_service('service_name')\n\n    # Delete function.\n    client.delete_function('service_name', 'function_name')\n\n\nTesting\n-------\n\nTo run the tests, please set the access key id/secret, endpoint as environment variables.\nTake the Linux system for example:\n\n.. code-block:: bash\n\n    $ export ENDPOINT=<endpoint>\n    $ export ACCESS_KEY_ID=<AccessKeyId>\n    $ export ACCESS_KEY_SECRET=<AccessKeySecret>\n    $ export STS_TOKEN=<roleARN>\n\nRun the test in the following method:\n\n.. code-block:: bash\n\n    $ nosetests                          # First install nose\n\nMore resources\n--------------\n- `Aliyun FunctionCompute docs <https://help.aliyun.com/product/50980.html>`_\n\nContacting us\n-------------\n- `Links <https://help.aliyun.com/document_detail/53087.html>`_\n\nLicense\n-------\n- `MIT <https://github.com/aliyun/fc-python-sdk/blob/master/LICENSE>`_",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://www.aliyun.com/product/fc",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aliyun-fc2",
    "platform": "",
    "project_url": "https://pypi.org/project/aliyun-fc2/",
    "release_url": "https://pypi.org/project/aliyun-fc2/2.0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Aliyun FunctionCompute SDK2",
    "version": "2.0.1"
  },
  "releases": {
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "54d4cf3c79dd4655d4898d71095b49db",
          "sha256": "150e497b9decfaaa6887d2cadaa79cb51ecdd1cd7eb056ad7b9991e2e497810e"
        },
        "downloads": -1,
        "filename": "aliyun-fc2-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "54d4cf3c79dd4655d4898d71095b49db",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10475,
        "upload_time": "2017-12-01T07:43:14",
        "url": "https://files.pythonhosted.org/packages/c5/58/0a7df7c1c3dbbeea708cef42e34742026d6f38b6383d4f64c42eb67d9ab8/aliyun-fc2-2.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "54d4cf3c79dd4655d4898d71095b49db",
        "sha256": "150e497b9decfaaa6887d2cadaa79cb51ecdd1cd7eb056ad7b9991e2e497810e"
      },
      "downloads": -1,
      "filename": "aliyun-fc2-2.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "54d4cf3c79dd4655d4898d71095b49db",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10475,
      "upload_time": "2017-12-01T07:43:14",
      "url": "https://files.pythonhosted.org/packages/c5/58/0a7df7c1c3dbbeea708cef42e34742026d6f38b6383d4f64c42eb67d9ab8/aliyun-fc2-2.0.1.tar.gz"
    }
  ]
}