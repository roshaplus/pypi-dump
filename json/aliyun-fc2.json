{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Aliyun FunctionCompute Python SDK\n=================================\n\n.. image:: https://badge.fury.io/py/aliyun-fc.svg\n    :target: https://badge.fury.io/py/aliyun-fc\n.. image:: https://travis-ci.org/aliyun/fc-python-sdk.svg?branch=master\n    :target: https://travis-ci.org/aliyun/fc-python-sdk\n.. image:: https://coveralls.io/repos/github/aliyun/fc-python-sdk/badge.svg?branch=master\n    :target: https://coveralls.io/github/aliyun/fc-python-sdk?branch=master\n\nOverview\n--------\n\nThe SDK of this version is dependent on the third-party HTTP library `requests <https://github.com/kennethreitz/requests>`_.\n\n\nRunning environment\n-------------------\n\nPython 2.7, Python 3.6\n\n\nNotice\n-------------------\nfc and fc2 are not compatible, now master repo is fc2, if you still use fc, 1.x branch is what you need.\nWe suggest using fc2, The main difference between fc and fc2 is:\n\n1, all http request fuction can set headers\n\n.. code-block:: python\n\n    def invoke_function(self, serviceName, functionName, payload=None, \n            headers = {'x-fc-invocation-type': 'Sync', 'x-fc-log-type' : 'None'}):                                           \n        ...\n\n\n2, The all http response returned by the user is the following object\n\n.. code-block:: python\n\n    class FcHttpResponse(object):\n        def __init__(self, headers, data):\n            self._headers = headers\n            self._data = data\n\n        @property\n        def headers(self):\n            return self._headers\n\n        @property\n        def data(self):\n            return self._data\n\nNote: for invoke function, data is bytes, for other apis, data is dict\n\nInstallation\n-------------------\n\nInstall the official release version through PIP (taking Linux as an example):\n\n.. code-block:: bash\n\n    $ pip install aliyun-fc2\n\nYou can also install the unzipped installer package directly:\n\n.. code-block:: bash\n\n    $ sudo python setup.py install\n\n\nif you still use fc, you can install the official fc1 release version through PIP (taking Linux as an example):\n\n.. code-block:: bash\n\n    $ pip install aliyun-fc\n\nGetting started\n-------------------\n\n.. code-block:: python\n\n    # -*- coding: utf-8 -*-\n\n    import fc2\n\n\n    # To know the endpoint and access key id/secret info, please refer to:\n    # https://help.aliyun.com/document_detail/52984.html\n    client = fc2.Client(\n        endpoint='<Your Endpoint>',\n        accessKeyID='<Your AccessKeyID>',\n        accessKeySecret='<Your AccessKeySecret>')\n\n    # Create service.\n    client.create_service('service_name')\n\n    # Create function.\n    # the current directory has a main.zip file (main.py which has a function of myhandler)\n    client.create_function('service_name', 'function_name', 'main.my_handler', codeZipFile = 'main.zip')\n\n    # Invoke function synchronously.\n    client.invoke_function('service_name', 'function_name')\n\n    # Invoke a function with a input parameter.\n    client.invoke_function('service_name', 'function_name', payload=bytes('hello_world'))\n\n    # Read a image and invoke a function with the file data as input parameter.\n    src = open('src_image_file_path', 'rb') # Note: please open it as binary.\n    r = client.invoke_function('service_name', 'function_name', payload=src)\n    # save the result as the output image.\n    dst = open('dst_image_file_path', 'wb')\n    dst.write(r.data)\n    src.close()\n    dst.close()\n\n    # Invoke function asynchronously.\n    client.async_invoke_function('service_name', 'function_name')\n\n    # List services.\n    client.list_services()\n\n    # List functions with prefix and limit.\n    client.list_functions('service_name', prefix='the_prefix', limit=10)\n\n    # Delete service.\n    client.delete_service('service_name')\n\n    # Delete function.\n    client.delete_function('service_name', 'function_name')\n\n\nTesting\n-------\n\nTo run the tests, please set the access key id/secret, endpoint as environment variables.\nTake the Linux system for example:\n\n.. code-block:: bash\n\n    $ export ENDPOINT=<endpoint>\n    $ export ACCESS_KEY_ID=<AccessKeyId>\n    $ export ACCESS_KEY_SECRET=<AccessKeySecret>\n    $ export STS_TOKEN=<roleARN>\n\nRun the test in the following method:\n\n.. code-block:: bash\n\n    $ nosetests                          # First install nose\n\nMore resources\n--------------\n- `Aliyun FunctionCompute docs <https://help.aliyun.com/product/50980.html>`_\n\nContacting us\n-------------\n- `Links <https://help.aliyun.com/document_detail/53087.html>`_\n\nLicense\n-------\n- `MIT <https://github.com/aliyun/fc-python-sdk/blob/master/LICENSE>`_",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://www.aliyun.com/product/fc",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aliyun-fc2",
    "platform": "",
    "project_url": "https://pypi.org/project/aliyun-fc2/",
    "release_url": "https://pypi.org/project/aliyun-fc2/2.0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Aliyun FunctionCompute SDK2",
    "version": "2.0.2"
  },
  "releases": {
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "54d4cf3c79dd4655d4898d71095b49db",
          "sha256": "150e497b9decfaaa6887d2cadaa79cb51ecdd1cd7eb056ad7b9991e2e497810e"
        },
        "downloads": -1,
        "filename": "aliyun-fc2-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "54d4cf3c79dd4655d4898d71095b49db",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10475,
        "upload_time": "2017-12-01T07:43:14",
        "url": "https://files.pythonhosted.org/packages/c5/58/0a7df7c1c3dbbeea708cef42e34742026d6f38b6383d4f64c42eb67d9ab8/aliyun-fc2-2.0.1.tar.gz"
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "859a954bd9182fc20904280301bb1f73",
          "sha256": "08131c7a6ffe82bfde031f72df66d41ff545699a1ff5e504c02bc9a2f8023476"
        },
        "downloads": -1,
        "filename": "aliyun-fc2-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "859a954bd9182fc20904280301bb1f73",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10129,
        "upload_time": "2017-12-13T02:48:52",
        "url": "https://files.pythonhosted.org/packages/07/81/572127427bc924894104874646de6d3601c856f69e1f695d6ac2d3a30cc9/aliyun-fc2-2.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "859a954bd9182fc20904280301bb1f73",
        "sha256": "08131c7a6ffe82bfde031f72df66d41ff545699a1ff5e504c02bc9a2f8023476"
      },
      "downloads": -1,
      "filename": "aliyun-fc2-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "859a954bd9182fc20904280301bb1f73",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10129,
      "upload_time": "2017-12-13T02:48:52",
      "url": "https://files.pythonhosted.org/packages/07/81/572127427bc924894104874646de6d3601c856f69e1f695d6ac2d3a30cc9/aliyun-fc2-2.0.2.tar.gz"
    }
  ]
}