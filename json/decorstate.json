{
  "info": {
    "author": "Andrew Hawker",
    "author_email": "andrew.r.hawker@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "# decorstate\n\n[![Build Status](https://travis-ci.org/ahawker/decorstate.svg)](https://travis-ci.org/ahawker/decorstate)\n\nBuild dumb little \"state machines\" with Python decorators.\n\n### Installation\n\nTo install decorstate from [pip](https://pypi.python.org/pypi/pip):\n```bash\n    $ pip install decorstate\n```\n\nTo install decorstate from source:\n```bash\n    $ git clone git@github.com:ahawker/decorstate.git\n    $ cd decorstate\n    $ python setup.py install\n```\n\n### Usage\n\nHow do I use this pile?\n\n```python\nimport decorstate\n\nclass Switch(object):\n    state = 'off'\n\n    @decorstate.transition('off', 'on')\n    def on(self, *args, **kwargs):\n        print 'You turned me on!'\n\n    @decorstate.transition('on', 'off')\n    def off(self, *args, **kwargs):\n        print 'You turned me off!'\n\n>>> switch = Switch()\n>>> switch.state\n'off'\n>>> switch.on()\nYou turned me on!\n'on'\n>>> switch.off()\nYou turned me off!\n'off'\n```\n\nA switch? Really? How lame.\n\n\n```python\nimport decorstate\n\nclass BrokenSwitch(object):\n    state = 'off'\n\n    @decorstate.transition('off', 'on')\n    def on(self, *args, **kwargs):\n        print 'You turned me on!'\n\n    @decorstate.transition('on', 'off')\n    def off(self, *args, **kwargs):\n        print 'You turned me off? Nah!'\n\n    @off.guard\n    def off(self, *args, **kwargs):\n        print 'Ha! I laugh at your feeble attempt!'\n\n>>> broken_switch = BrokenSwitch()\n>>> broken_switch.state\n'off'\n>>> broken_switch.on()\nYou turned me on!\n'on'\n>>> broken_switch.off()\nHa! I laugh at your feeble attempt!\n'on'\n>>> broken_switch.state\n'on'\n>>> broken_switch.off()\nHa! I laugh at your feeble attempt!\n'on'\n>>> broken_switch.state\n'on'\n```\n\nA broken switch? Yawn.\n\n\n```python\nimport decorstate\n\nclass InstantOffSwitch(object):\n    state = 'off'\n\n    @decorstate.transition('off', 'off')\n    def on(self, *args, **kwargs):\n        print 'You turned me on!'\n\n    @decorstate.transition('on', 'off')\n    def off(self, *args, **kwargs):\n        print 'You turned me off!'\n\n    @on.after\n    def on(self, *args, **kwargs):\n        print 'Ha! No light for you!'\n\n>>> instant_off_switch = InstantOffSwitch()\n>>> instant_off_switch.state\n'off'\n>>> instant_off_switch.on()\nYou turned me on!\nHa! No light for you!\n'off'\n>>> instant_off_switch.state\n'off'\n```\n\nWell, that's kinda mean.\n\n\n```python\nimport decorstate\nimport random\n\nclass IoTSwitch(object):\n    state = 'off'\n\n    @decorstate.transition('off', 'off')\n    def on(self, *args, **kwargs):\n        print 'You turned me on? Maybe...'\n\n    @decorstate.transition('on', 'off')\n    def off(self, *args, **kwargs):\n        print 'You turned me off? Maybe...'\n\n    @on.guard\n    def on(self, *args, **kwargs):\n        return self.coin_flip()\n\n    @off.guard\n    def off(self, *args, **kwargs):\n        return not self.coin_flip()\n\n    @staticmethod\n    def coin_flip():\n        return random.randint(1, 2) == 1\n\n>>> iot_switch = IoTSwitch()\n>>> iot_switch.state\n'off'\n>>> iot_switch.on()\n'off'\n>>> iot_switch.on()\n'off'\n>>> iot_switch.on()\n'off'\n>>> iot_switch.on()\nYou turned me on? Maybe...\n'on'\n>>> iot_switch.off()\n'on'\n>>> iot_switch.off()\n'on'\n>>> iot_switch.off()\n'on'\n>>> iot_switch.off()\n'on'\n>>> iot_switch.off()\nYou turned me off? Maybe...\n'off'\n```\n\nHey now, why you hating? Internet powered light switches are next level shit. My living room has its own twitter feed.\n\n\n### Why?\n\nI was interesting in doing something a bit more complex using the Python [descriptor protocol](https://docs.python.org/2/howto/descriptor.html).\n\n### TODO?\n\nRandom thoughts and musing about potential changes/features.\n\n*  Consider adding the @machine decorator back as currently, you cannot use the \"state\", \"transition\" and \"transition_event\" attributes until the first transition has been performed since they are lazy created.\n*  Add event handler that fires only when \"entering\" a state and not when you perform multiple transitions but stay in the same state.\n\n### License\n\n[Apache 2.0](LICENSE)",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ahawker/decorstate",
    "keywords": null,
    "license": "Apache 2.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "decorstate",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/decorstate/",
    "release_url": "https://pypi.org/project/decorstate/0.0.1/",
    "requires_python": null,
    "summary": "Simple \"state machines\" with Python decorators",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0c7f544878ecf5fe3330b92c347880b3",
          "sha256": "dd4b66c76fc84655432cb068a9daea571725c3d864aa9b065379896714b87990"
        },
        "downloads": 779,
        "filename": "decorstate-0.0.1-py2.7.egg",
        "has_sig": false,
        "md5_digest": "0c7f544878ecf5fe3330b92c347880b3",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 8981,
        "upload_time": "2015-12-22T08:51:54",
        "url": "https://files.pythonhosted.org/packages/3c/51/e1a79803978363f364f145ee7f5492b598cde12c496d48904a75240aafc9/decorstate-0.0.1-py2.7.egg"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0c7f544878ecf5fe3330b92c347880b3",
        "sha256": "dd4b66c76fc84655432cb068a9daea571725c3d864aa9b065379896714b87990"
      },
      "downloads": 779,
      "filename": "decorstate-0.0.1-py2.7.egg",
      "has_sig": false,
      "md5_digest": "0c7f544878ecf5fe3330b92c347880b3",
      "packagetype": "bdist_egg",
      "python_version": "2.7",
      "size": 8981,
      "upload_time": "2015-12-22T08:51:54",
      "url": "https://files.pythonhosted.org/packages/3c/51/e1a79803978363f364f145ee7f5492b598cde12c496d48904a75240aafc9/decorstate-0.0.1-py2.7.egg"
    }
  ]
}