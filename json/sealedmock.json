{
  "info": {
    "author": "Mario Corchero",
    "author_email": "mariocj89@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing"
    ],
    "description": "|Build Status| # Sealed Mock Whitelist the attributes/methods of your\nmocks instead of just letting it create new mock objects.\n\nSealedMock allows specify when you are done defining the mock, ensuring\nthat any unexpected call to the mock is cached.\n\nSample:\n\n.. code:: python\n\n    import sealedmock\n    m = sealedmock.SealedMock()\n    m.method1.return_value.attr1.method2.return_value = 1\n    m.sealed = True\n    m.method1().attr1.method2()\n    # 1\n    m.method1().attr2\n    # Exception: SealedMockAttributeAccess: mock.method1().attr2\n\nInstall\n=======\n\n``pip install sealedmock``\n\nUsage\n=====\n\nGiven you have a file like:\n\n.. code:: python\n\n    import urllib2\n\n    class SampleCodeClass(object):\n        \"\"\"This is sample code\"\"\"\n        def calling_urlopen(self):\n            return urllib2.urlopen(\"http://chooserandom.com\")\n\n        def calling_splithost(self):\n            return urllib2.splithost(\"//host:port/path\")\n\nYou can write a test like:\n\n.. code:: python\n\n    from sealedmock import patch\n    @patch(\"tests.sample_code.urllib2\")\n    def test_using_decorator(mock):\n            sample = sample_code.SampleCodeClass()\n            mock.urlopen.return_value = 2\n\n            mock.sealed = True  # No new attributes can be declared\n\n            # calling urlopen succeeds as mock.urlopen has been defined\n            assert sample.calling_urlopen()\n\n            # This will fail as mock.splithost has not been defined\n            sample.calling_splithost()\n\nIf you use an common Mock the second part will pass as it will create a\nmock for you and return it. With SealedMock you can choose when to stop\nthat behaviour.\n\nThis is recursive so you can write:\n\n.. code:: python\n\n    @patch(\"sample_code.secret\")\n    def test_recursive(mock):\n            sample = sample_code.SampleCodeClass()\n            mock.secret.call1.call2.call3.return_value = 1\n            mock.sealed = True  # No new attributes can be declared\n\n            # If secret is not used as specified above it will fail\n            # ex: if do_stuff also calls secret.call1.call9\n            sample.do_stuff()\n\nIt also prevents typos on tests if used like this:\n\n.. code:: python\n\n    @patch(\"sample_code.secret\")\n    def test_recursive(mock):\n            sample = sample_code.SampleCodeClass()\n\n            sample.do_stuff()\n\n            mock.sealed = True\n            mock.asert_called_with(1)\n            # Note the typo in asert (should be assert)\n            # Sealed mock will rise, normal mock won't\n\n.. |Build Status| image:: https://travis-ci.org/Mariocj89/sealedmock.svg?branch=master\n   :target: https://travis-ci.org/Mariocj89/sealedmock",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Mariocj89/sealedmock",
    "keywords": "mock,testing,unittest,integration,whitelist",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "sealedmock",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/sealedmock/",
    "release_url": "https://pypi.org/project/sealedmock/0.3.0/",
    "requires_python": null,
    "summary": "Mocks that whitelist its interface",
    "version": "0.3.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f005fa42deb2d11f50d39fd6de465420",
          "sha256": "c83b0183b99384e7b24337ef40dc719772723fdba95ec466d2a98148c61e2efc"
        },
        "downloads": 137,
        "filename": "sealedmock-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f005fa42deb2d11f50d39fd6de465420",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2339,
        "upload_time": "2016-12-17T15:56:51",
        "url": "https://files.pythonhosted.org/packages/52/8e/9f3fe4c16d9ec9cec25aeb6b5d9dec0cc7e823545f5f0b863be3c0677b10/sealedmock-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e8d96ed183956b18751094d57b2a6fa3",
          "sha256": "2284b556f227f5eab9022a876a1dd5fb8f6e3437b432841f509c5123661797de"
        },
        "downloads": 40,
        "filename": "sealedmock-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e8d96ed183956b18751094d57b2a6fa3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3312,
        "upload_time": "2016-12-18T11:33:38",
        "url": "https://files.pythonhosted.org/packages/18/7c/81383a2348e732e578ec99e2f5570b3de03aaf780476b0666c7be6f1155b/sealedmock-0.2.0.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ef54215d03e4d02b74950fc835880ccb",
          "sha256": "417376b5d1b2a6594fce8da6d258df4ef1ae6e37f62fab37de0f6bcd8e7a4768"
        },
        "downloads": 104,
        "filename": "sealedmock-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ef54215d03e4d02b74950fc835880ccb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3387,
        "upload_time": "2016-12-18T19:05:47",
        "url": "https://files.pythonhosted.org/packages/de/9e/4a5f109d00852983d8a0d29f662863446d2cd81d036828a649d7aa8daae7/sealedmock-0.3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ef54215d03e4d02b74950fc835880ccb",
        "sha256": "417376b5d1b2a6594fce8da6d258df4ef1ae6e37f62fab37de0f6bcd8e7a4768"
      },
      "downloads": 104,
      "filename": "sealedmock-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ef54215d03e4d02b74950fc835880ccb",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3387,
      "upload_time": "2016-12-18T19:05:47",
      "url": "https://files.pythonhosted.org/packages/de/9e/4a5f109d00852983d8a0d29f662863446d2cd81d036828a649d7aa8daae7/sealedmock-0.3.0.tar.gz"
    }
  ]
}