{
  "info": {
    "author": "Wolfgang Schnerring <wosc@wosc.de>",
    "author_email": "wosc@wosc.de",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "=======\nrsspull\n=======\n\nrsspull downloads and parses RSS and Atom feeds, converts posts into email\nmessages, and stores them in Maildirs. This way you can read your feeds using\nan email client (I use `claws`_, so I can access mailing lists, newsgroups and\nfeeds all in one application). The heavy lifting is performed by the awesome\n`feedparser`_ library.\n\n.. _`claws`: http://claws-mail.org/\n.. _`feedparser`: https://pypi.python.org/pypi/feedparser\n\n\n\nInstallation\n============\n\nrsspull requires at least Python 2.6 (and won't work under Python 3 yet).\nYou can install it from PyPI like this::\n\n    $ pip install ws.rsspull\n\nYou need to create a configuration file in ``~/.rsspull/config``, like::\n\n    [global]\n    maildir = ~/Maildir/rss\n    logfile = ~/.rsspull/log\n    workers = 1\n\nList the feeds you want to pull in an OPML file at ``~/.rsspull/feeds.opml``::\n\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <opml version=\"1.1\">\n      <head>\n        <title>feeds.opml</title>\n        <ownerName>rsspull</ownerName>\n        <ownerEmail>rsspull@localhost</ownerEmail>\n      </head>\n      <body>\n        <outline text=\"tech\">\n          <outline text=\"ongoing\" xmlUrl=\"http://www.tbray.org/ongoing/ongoing.atom\" />\n        </outline>\n        <outline text=\"general\">\n          <outline text=\"heisec\" xmlUrl=\"http://www.heise.de/security/news/news.rdf\" />\n          <outline text=\"trac_example\" xmlUrl=\"https://example.com/trac/timeline?milestone=on&amp;ticket=on&amp;changeset=on&amp;wiki=on&amp;max=10&amp;daysback=90&amp;format=rss\" auth=\"user:password\"/>\n        </outline>\n      </body>\n    </opml>\n\nNotes about the format:\n\n* You can group your feeds (using nested ``<outlines>``), this does not matter\n  to rsspull.\n* The ``text`` attribute is used as the folder name, relative to the\n  ``maildir`` setting in ``~/.rsspull/config``. If you run rsspull on an IMAP\n  server, you can create folder hierarchies by using something like\n  ``text=\".rss.tech.ongoing\"`` (check you IMAP server documentation how it\n  represents folder hierarchies. The example with dots works for Courier,\n  others might use actual subfolders, and so on).\n* Basic authentication is supported with the ``auth`` attribute.\n* You can use ``file://`` URLs.\n\nThen simply run::\n\n    $ rsspull\n\nto download the feeds.\n\n\nFeatures\n========\n\n* Uses ``If-Modified-Since`` HTTP headers to avoid downloading a feed that has\n  not changed.\n* Addds a ``Content-Location`` header to each message that contains the URL of\n  that post. I bound the following script to [return] in claws to open the\n  current entry in a webbrowser::\n\n    #!/bin/bash\n    URL=`sed -ne '/^Content-Location/s/.*: //p' $1 | head -n 1`\n    if [ -n \"$URL\" ]; then\n        mozilla $URL &> /dev/null\n    fi\n\n* Entries are converted to multipart messages, one with the original HTML and\n  one converted into markdown-like plaintext (via `html2text`_), so most of the\n  time opening in a browser isn't even necessary since you can read the post\n  right in the email client.\n* Can use several worker threads to download and parse feeds to increase\n  performance, since quite some time is spent waiting for downloads to complete\n  (the ``workers`` setting in ``~/.rsspull/config``).\n* Has been in daily usage since 2007, so it definitely Works For Me(tm).\n\n\n.. _`html2text`: https://pypi.python.org/pypi/html2text\n\n\nCHANGES\n=======\n\n2.0 (2014-02-22)\n----------------\n\n- Switch from spawning curl to using urllib2.\n\n- Package as egg.\n\n\n1.2 (2013-10-03)\n----------------\n\n- Use stdlib xml parser instead of python-xml.\n\n\n1.1 (2009-05-23)\n----------------\n\n- Write messages directly to Maildir instead of using procmail.\n\n- Send messages as multipart, text and html.\n\n\n1.0 (2007-03-31)\n----------------\n\n- First release, inspired by http://newspipe.sourceforge.net/.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/wosc/rsspull/",
    "keywords": null,
    "license": "ZPL 2.1",
    "maintainer": null,
    "maintainer_email": null,
    "name": "ws.rsspull",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/ws.rsspull/",
    "release_url": "https://pypi.org/project/ws.rsspull/2.0/",
    "requires_python": null,
    "summary": "Downloads RSS/Atom feeds and converts them to Maildir messages.",
    "version": "2.0"
  },
  "releases": {
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ae847d04f99834ce1fae13f1d67fe835",
          "sha256": "bc2d296fe4a98effeb8c626d14d301d1496dc011fd22bc8b29da4c617955e35f"
        },
        "downloads": 2471,
        "filename": "ws.rsspull-2.0.zip",
        "has_sig": false,
        "md5_digest": "ae847d04f99834ce1fae13f1d67fe835",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 55048,
        "upload_time": "2014-02-22T08:37:01",
        "url": "https://files.pythonhosted.org/packages/fd/1b/3a03a90c8196e19a9a1fe0d1abbf2da27b0a92fb2972d6329c715e97feef/ws.rsspull-2.0.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ae847d04f99834ce1fae13f1d67fe835",
        "sha256": "bc2d296fe4a98effeb8c626d14d301d1496dc011fd22bc8b29da4c617955e35f"
      },
      "downloads": 2471,
      "filename": "ws.rsspull-2.0.zip",
      "has_sig": false,
      "md5_digest": "ae847d04f99834ce1fae13f1d67fe835",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 55048,
      "upload_time": "2014-02-22T08:37:01",
      "url": "https://files.pythonhosted.org/packages/fd/1b/3a03a90c8196e19a9a1fe0d1abbf2da27b0a92fb2972d6329c715e97feef/ws.rsspull-2.0.zip"
    }
  ]
}