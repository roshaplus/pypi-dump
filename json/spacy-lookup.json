{
  "info": {
    "author": "Marc Puig",
    "author_email": "marc.puig@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "spacy-lookup: Named Entity Recognition based on dictionaries\n************************************************************\n\n`spaCy v2.0 <https://spacy.io/usage/v2>`_ extension and pipeline component\nfor adding Named Entities metadata to ``Doc`` objects. Detects Named Entities\nusing dictionaries. The extension sets the custom ``Doc``,\n``Token`` and ``Span`` attributes ``._.is_entity``, ``._.entity_type``,\n``._.has_entities`` and ``._.entities``.\n\nNamed Entities are matched using the python module ``flashtext``, and\nlooks up in the data provided by different dictionaries.\n\n\u23f3 Installation\n===============\n\n``spacy-lookup`` requires ``spacy`` v2.0.0 or higher.\n\n.. code:: bash\n\n    pip install spacy-lookup\n\nUsage\n=====\n\nImport the component and initialise it with the shared ``nlp`` object (i.e. an\ninstance of ``Language``), which is used to initialise ``flashtext``\nwith the shared vocab, and create the match patterns. Then add the component\nanywhere in your pipeline.\n\n.. code:: python\n\n    import spacy\n    from spacy_lookup import Entity\n\n    nlp = spacy.load('en')\n    entity = Entity(nlp, keywords_list=['python', 'java platform'])\n    nlp.add_pipe(entity, last=True)\n\n    doc = nlp(u\"I am a product manager for a java and python.\")\n    assert doc._.has_entities == True\n    assert doc[2:5]._.has_entities == True\n    assert doc[0]._.is_entity == False\n    assert doc[3]._.is_entity == True\n    print(doc._.entities)\n\n``spacy-lookup`` only cares about the token text, so you can use it on a blank\n``Language`` instance (it should work for all\n`available languages <https://spacy.io/usage/models#languages>`_!), or in\na pipeline with a loaded model. If you're loading a model and your pipeline\nincludes a tagger, parser and entity recognizer, make sure to add  the entity\ncomponent as ``last=True``, so the spans are merged at the end of the pipeline.\n\nAvailable attributes\n--------------------\n\nThe extension sets attributes on the ``Doc``, ``Span`` and ``Token``. You can\nchange the attribute names on initialisation of the extension. For more details\non custom components and attributes, see the\n`processing pipelines documentation <https://spacy.io/usage/processing-pipelines#custom-components>`_.\n\n====================== ======= ===\n``Token._.is_entity``   bool    Whether the token is an entity.\n``Token._.entity_type`` unicode A human-readable description of the entity.\n``Doc._.has_entities``    bool    Whether the document contains entity.\n``Doc._.entities``        list    ``(entity, index, description)`` tuples of the document's entities.\n``Span._.has_entities``   bool    Whether the span contains entity.\n``Span._.entities``       list    ``(entity, index, description)`` tuples of the span's entities.\n====================== ======= ===\n\nSettings\n--------\n\nOn initialisation of ``Entity``, you can define the following settings:\n\n=============== ============ ===\n``nlp``         ``Language`` The shared ``nlp`` object. Used to initialise the matcher with the shared ``Vocab``, and create ``Doc`` match patterns.\n``attrs``       tuple        Attributes to set on the ._ property. Defaults to ``('has_entities', 'is_entity', 'entity_type', 'entity')``.\n``keywords_list``      list         Optional lookup table with the list of terms to look for.\n``keywords_dict``      dict         Optional lookup table with the list of terms to look for.\n``keywords_file``      string         Optional filename with the list of terms to look for.\n=============== ============ ===\n\n.. code:: python\n\n    entity = Entity(nlp, keywords_list=['python', 'java platform'], label='ACME')\n    nlp.add_pipe(entity)\n    doc = nlp(u\"I am a product manager for a java platform and python.\")\n    assert doc[3]._.is_entity\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/mpuig/spacy-lookup",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "spacy-lookup",
    "platform": "",
    "project_url": "https://pypi.org/project/spacy-lookup/",
    "release_url": "https://pypi.org/project/spacy-lookup/0.0.1/",
    "requires_dist": [
      "flashtext (>=2.5)",
      "spacy (<3.0.0,>=2.0.0)"
    ],
    "requires_python": "",
    "summary": "spaCy pipeline component for Named Entity Recognition based on dictionaries.",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a8e933a229644ed6f23aea18361f6743",
          "sha256": "c84bb0d3e1c2ae3a7b19ccf70133747e2891cb403c0a74770868c478fef33de3"
        },
        "downloads": -1,
        "filename": "spacy_lookup-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8e933a229644ed6f23aea18361f6743",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 7121,
        "upload_time": "2018-01-15T17:54:07",
        "url": "https://files.pythonhosted.org/packages/9d/02/65334f32f1dbab2a739de0924f768b695daa97faa56d9b899d0863958d6e/spacy_lookup-0.0.1-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a8e933a229644ed6f23aea18361f6743",
        "sha256": "c84bb0d3e1c2ae3a7b19ccf70133747e2891cb403c0a74770868c478fef33de3"
      },
      "downloads": -1,
      "filename": "spacy_lookup-0.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a8e933a229644ed6f23aea18361f6743",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 7121,
      "upload_time": "2018-01-15T17:54:07",
      "url": "https://files.pythonhosted.org/packages/9d/02/65334f32f1dbab2a739de0924f768b695daa97faa56d9b899d0863958d6e/spacy_lookup-0.0.1-py2.py3-none-any.whl"
    }
  ]
}