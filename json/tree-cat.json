{
  "info": {
    "author": "Fritz Obermeyer",
    "author_email": "fritz.obermeyer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Tree-Cat\n========\n\n|Build Status| |Latest Version| |DOI|\n\nA Bayesian latent tree model of multivariate multinomial data.\n\nIntended Use\n------------\n\nTree-Cat is appropriate for analyzing medium-sized tabular data with\ncategorical and ordinal values, possibly with missing observations.\n\n+------------------------------+-----------------------------------------------+\n|                              | Tree-Cat supports                             |\n+==============================+===============================================+\n| **Feature Types**            | categorical, ordinal, binomial, multinomial   |\n+------------------------------+-----------------------------------------------+\n| **# Rows (n)**               | 1000-100K                                     |\n+------------------------------+-----------------------------------------------+\n| **# Features (p)**           | 10-1000                                       |\n+------------------------------+-----------------------------------------------+\n| **# Cells (n \u00d7 p)**          | <1M                                           |\n+------------------------------+-----------------------------------------------+\n| **# Categories**             | 2-10ish                                       |\n+------------------------------+-----------------------------------------------+\n| **Max Ordinal**              | 10ish                                         |\n+------------------------------+-----------------------------------------------+\n| **Missing obervations?**     | yes                                           |\n+------------------------------+-----------------------------------------------+\n| **Repeated observations?**   | yes                                           |\n+------------------------------+-----------------------------------------------+\n| **Sparse data?**             | no, use something else                        |\n+------------------------------+-----------------------------------------------+\n| **Unsupervised**             | yes                                           |\n+------------------------------+-----------------------------------------------+\n| **Semisupervised**           | yes                                           |\n+------------------------------+-----------------------------------------------+\n| **Supervised**               | no, use something else                        |\n+------------------------------+-----------------------------------------------+\n\nInstalling\n----------\n\nFirst install ``numba``. Then\n\n.. code:: sh\n\n    $ pip install tree-cat\n\nQuick Start\n-----------\n\n1. Create two csv files: a ``schema.csv`` and a ``data.csv``.\n\n2. Import the csv files into treecat's internal format.\n\n   .. code:: python\n\n       from treecat.format import import_data\n\n       import_data('schema.csv', 'data.csv', 'dataset.pkl.gz')\n\n3. Train an ensemble model on your dataset.\n\n   .. code:: python\n\n       from treecat.format import pickle_load, pickle_dump\n       from treecat.config import train_ensemble\n       from treecat.training import train_ensemble\n       from treecat.config import make_default_config\n\n       dataset = pickle_load('dataset.pkl.gz')\n       config = make_default_config()\n       ensemble = train_ensemble(dataset['ragged_index'],\n                                 dataset['data'], config)\n       pickle_dump(ensemble, 'ensemble.plk.gz')\n\n4. Load your trained model into a server\n\n   .. code:: python\n\n       from treecat.serving import serve_ensemble\n\n       server = serve_ensemble('ensemble.plk.gz')\n\n5. Run queries against the server, e.g. compute marginals\n\n   .. code:: python\n\n       server.sample(100, np.ones(V)).mean(axis=1)\n\n   or compute a latent correlation matrix\n\n   .. code:: python\n\n       print(server.correlation())\n\nThe Model\n---------\n\nLet ``V`` be a set of vertices (one vertex per feature). Let ``C[v]`` be\nthe dimension of the ``v``\\ th feature. Let ``N`` be the number of\ndatapoints. Let ``K[n,v]`` be the number of observations of feature\n``v`` in row ``n`` (e.g. 1 for a categorical variable, 0 for missing\ndata, or ``k`` for an ordinal value with minimum 0 and maximum ``k``).\n\nTree-Cat is the following generative model:\n\n.. code:: bugs\n\n    E ~ UniformSpanningTree(V)    # An undirected tree.\n    for v in V:\n        Pv[v] ~ Dirichlet(size = [M], alpha = 1/2)\n    for (u,v) in E:\n        Pe[u,v] ~ Dirichlet(size = [M,M], alpha = 1/(2M))\n        assume Pv[u] == sum(Pe[u,v], axis=1)\n        assume Pv[v] == sum(Pe[u,v], axis=0)\n    for v in V:\n        for i in 1:M:\n            Q[v,i] ~ Dirichlet(size = [C[v]])\n    for n in 1:N:\n        for v in V:\n            X[n,v] ~ Categorical(Pv[v])\n        for (u,v) in E:\n            (X[n,u],X[n,v]) ~ Categorical(Pe[u,v])\n        for v in V:\n            Z[n,v] ~ Multinomial(Q[v,X[n,v]], count = K[n,v])\n\nwhere we've avoided adding an arbitrary root to the tree, and instead\npresented the model as a manifold with overlapping variables and\nconstraints.\n\nThe Inference Algorithm\n-----------------------\n\nThis package implements fully Bayesian MCMC inference using\nsubsample-annealed Gibbs sampling. There are two pieces of latent state\nthat are sampled:\n\n-  Latent classes for each row for each vertex. These are sampled by\n   single-site Gibbs sampling with a linear subsample-annealing\n   schedule.\n\n-  The latent tree structure is sampled by randomly removing an edge and\n   replacing it. Since removing an edge splits the graph into two\n   connected components, the only replacement locations that are\n   feasible are those that re-connect the graph.\n\nThe single-site Gibbs sampler uses dynamic programming to simultaneously\nsample the complete latent assignment vector for each row. A dynamic\nprogramming program is created each time the tree structure changes.\nThis program is interpreted by various virtual machines for different\npurposes (training the model, sampling from the posterior, computing log\nprobability of the posterior). The virtual machine for training is\njit-compiled using numba.\n\nLicense\n-------\n\nCopyright (c) 2017 Fritz Obermeyer. Tree-Cat is licensed under the\n`Apache 2.0 License </LICENSE>`__.\n\n.. |Build Status| image:: https://travis-ci.org/posterior/treecat.svg?branch=master\n   :target: https://travis-ci.org/posterior/treecat\n.. |Latest Version| image:: https://badge.fury.io/py/tree-cat.svg\n   :target: https://pypi.python.org/pypi/tree-cat\n.. |DOI| image:: https://zenodo.org/badge/93913649.svg\n   :target: https://zenodo.org/badge/latestdoi/93913649\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tree-cat",
    "platform": "",
    "project_url": "https://pypi.org/project/tree-cat/",
    "release_url": "https://pypi.org/project/tree-cat/0.1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A Bayesian latent tree model of multivariate multinomial data",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c9b037094eba51cbdaed6f0621cbc497",
          "sha256": "7b063b574f56d366eec7551a53e69cdeeeadc1db7de160ed82379273b8fabed6"
        },
        "downloads": 0,
        "filename": "tree-cat-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c9b037094eba51cbdaed6f0621cbc497",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21367,
        "upload_time": "2017-07-04T05:15:01",
        "url": "https://files.pythonhosted.org/packages/80/6c/65824f4c3943108f2ab80300a1d0f8f0d3e5e3a6a5c507ca9e4b2c77920d/tree-cat-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "03f3907efa80d33c5edcdd0c50fd1621",
          "sha256": "7cc57c4a0174ab5b6308a32a147809168a6b6cbbdd0dc0dc001e4ce3b9956814"
        },
        "downloads": 0,
        "filename": "tree-cat-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "03f3907efa80d33c5edcdd0c50fd1621",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22060,
        "upload_time": "2017-07-04T16:05:27",
        "url": "https://files.pythonhosted.org/packages/c2/55/f59f62ae376b3acc278023f3c9888b6727d2b8fb27f53cc6c3c6d485ea07/tree-cat-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c470746e1ce1518ef53b481dfc9b0f9a",
          "sha256": "c4954acb204b36795cfeae95c50d1579d48f0827f76a904ee1f6e00a19ce2e4d"
        },
        "downloads": 0,
        "filename": "tree-cat-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c470746e1ce1518ef53b481dfc9b0f9a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22154,
        "upload_time": "2017-07-04T16:14:38",
        "url": "https://files.pythonhosted.org/packages/a0/63/6a83e46c03ebc3adfae98c1270c9174f46b79ba459d320fe284fe7242fb6/tree-cat-0.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c470746e1ce1518ef53b481dfc9b0f9a",
        "sha256": "c4954acb204b36795cfeae95c50d1579d48f0827f76a904ee1f6e00a19ce2e4d"
      },
      "downloads": 0,
      "filename": "tree-cat-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c470746e1ce1518ef53b481dfc9b0f9a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 22154,
      "upload_time": "2017-07-04T16:14:38",
      "url": "https://files.pythonhosted.org/packages/a0/63/6a83e46c03ebc3adfae98c1270c9174f46b79ba459d320fe284fe7242fb6/tree-cat-0.1.2.tar.gz"
    }
  ]
}