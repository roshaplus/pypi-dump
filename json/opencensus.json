{
  "info": {
    "author": "OpenCensus Authors",
    "author_email": "census-developers@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "OpenCensus for Python - A stats collection and distributed tracing framework\n============================================================================\n\n    `Census`_ for Python. Census provides a framework to measure a server's resource\n    usage and collect performance stats. This repository contains Python related\n    utilities and supporting software needed by Census.\n\n    .. _Census: https://github.com/census-instrumentation\n\n|circleci|\n\n.. |circleci| image:: https://circleci.com/gh/census-instrumentation/opencensus-python.svg?style=shield\n   :target: https://circleci.com/gh/census-instrumentation/opencensus-python\n\n-  `API Documentation`_\n\n.. _API Documentation: http://opencensus.io/opencensus-python/trace/usage.html\n\nInstallation & basic usage\n--------------------------\n\n1. Install the opencensus-trace package using `pip`_ or `pipenv`_:\n\n    ::\n\n        pip install opencensus\n        pipenv install opencensus\n\n2. Initialize a tracer for application:\n\n    .. code:: python\n\n        from opencensus.trace import request_tracer\n\n        tracer = request_tracer.RequestTracer()\n\n    .. _pip: https://pip.pypa.io\n    .. _pipenv: https://docs.pipenv.org/\n\nUsage\n-----\n\nYou can collect traces using the ``RequestTracer`` `context manager`_:\n\n.. code:: python\n\n    from opencensus.trace import request_tracer\n\n    # Initialize a tracer, by default using the `PrintExporter`\n    tracer = request_tracer.RequestTracer()\n\n    # Example for creating nested spans\n    with tracer.span(name='span1') as span1:\n        do_something_to_trace()\n        with span1.span(name='span1_child1') as span1_child1:\n            do_something_to_trace()\n        with span1.span(name='span1_child2') as span1_child2:\n            do_something_to_trace()\n    with tracer.span(name='span2') as span2:\n        do_something_to_trace()\n\nCensus will collect everything within the ``with`` statement as a single span.\n\nAlternatively, you can explicitly start and end a span:\n\n.. code:: python\n\n    from opencensus.trace import request_tracer\n\n    # Initialize a tracer, by default using the `PrintExporter`\n    tracer = request_tracer.RequestTracer()\n\n    tracer.start_span(name='span1')\n    do_something_to_trace()\n    tracer.end_span()\n\n\n.. _context manager: https://docs.python.org/3/reference/datamodel.html#context-managers\n\n\nCustomization\n-------------\n\nSamplers\n~~~~~~~~\n\nYou can specify different samplers when initializing a tracer, default\nis using ``AlwaysOnSampler``, the other options are ``AlwaysOffSampler``\nand ``ProbabilitySampler``\n\n.. code:: python\n\n    from opencensus.trace.samplers import probability\n    from opencensus.trace import request_tracer\n\n    # Sampling the requests at the rate equals 0.5\n    sampler = probability.ProbabilitySampler(rate=0.5)\n    tracer = request_tracer.RequestTracer(sampler=sampler)\n\nExporters\n~~~~~~~~~\n\nYou can choose different exporters to send the traces to. By default,\nthe traces are printed to stdout in JSON format. Other options include\nwriting to a file, sending to Python logging, or reporting to\nStackdriver.\n\nThis example shows how to configure Census to save the traces to a\nfile:\n\n.. code:: python\n\n    from opencensus.trace.exporters import file_exporter\n    from opencensus.trace.tracer import context_tracer\n\n    exporter = file_exporter.FileExporter(file_name='traces')\n    tracer = context_tracer.ContextTracer(exporter=exporter)\n\nThis example shows how to report the traces to Stackdriver Trace:\n\n.. code:: python\n\n    from opencensus.trace.exporters import stackdriver_exporter\n    from opencensus.trace import request_tracer\n\n    exporter = stackdriver_exporter.StackdriverExporter(\n        project_id='your_cloud_project')\n    tracer = request_tracer.RequestTracer(exporter=exporter)\n\nPropagators\n~~~~~~~~~~~\n\nYou can specify the propagator type for serializing and deserializing the\n``SpanContex`` and its headers. There are currently two built in propagators:\n``GoogleCloudFormatPropagator`` and ``TextFormatPropagator``.\n\nThis example shows how to use the ``GoogleCloudFormatPropagator``:\n\n.. code:: python\n\n    from opencensus.trace.propagation import google_cloud_format\n\n    propagator = google_cloud_format.GoogleCloudFormatPropagator()\n\n    # Deserialize\n    span_context = propagator.from_header(header)\n\n    # Serialize\n    header = propagator.to_header(span_context)\n\nBlacklist Paths\n~~~~~~~~~~~~~~~\n\nYou can specify which paths you do not want to trace by configuring the\nblacklist paths.\n\nThis example shows how to configure the blacklist to ignore the `_ah/health` endpoint\nfor a Flask application:\n\n.. code:: python\n\n    from opencensus.trace.ext.flask.flask_middleware import FlaskMiddleware\n\n    app = flask.Flask(__name__)\n\n    blacklist_paths = ['_ah/health']\n    middleware = FlaskMiddleware(app, blacklist_paths=blacklist_paths)\n\nFor Django, you can configure the blacklist in the ``OPENCENSUS_PARAMS`` in ``settings.py``:\n\n.. code:: python\n\n    OPENCENSUS_PARAMS: {\n        ...\n        'BLACKLIST_PATHS': ['_ah/health',],\n    }\n\n\n.. note:: By default the health check path for the App Engine flexible environment is not traced,\n    but you can turn it on by excluding it from the blacklist setting.\n\nFramework Integration\n---------------------\n\nOpencensus supports integration with popular web frameworks including\nDjango, Flask, and Webapp2. When the application receives a HTTP request,\nthe tracer will automatically generate a span context using the trace\ninformation extracted from the request headers, and propagated to the\nchild spans.\n\nFlask\n~~~~~\n\nIn your application, use the middleware to wrap your app and the\nrequests will be automatically traced.\n\n.. code:: python\n\n    from opencensus.trace.ext.flask.flask_middleware import FlaskMiddleware\n\n    app = flask.Flask(__name__)\n\n    # You can also specify the sampler, exporter, propagator in the middleware,\n    # default is using `AlwaysOnSampler` as sampler, `PrintExporter` as exporter,\n    # `GoogleCloudFormatPropagator` as propagator.\n    middleware = FlaskMiddleware(app)\n\nDjango\n~~~~~~\n\nFor tracing Django requests, you will need to add the following line to\nthe ``MIDDLEWARE_CLASSES`` section in the Django ``settings.py`` file.\n\n.. code:: python\n\n    MIDDLEWARE_CLASSES = [\n        ...\n        'opencensus.trace.ext.django.middleware.OpencensusMiddleware',\n    ]\n\nAnd add this line to the ``INSTALLED_APPS`` section:\n\n.. code:: python\n\n    INSTALLED_APPS = [\n        ...\n        'opencensus.trace.ext.django',\n    ]\n\nYou can configure the the sampler, exporter, propagator using the ``OPENCENSUS_TRACE`` setting in\n``settings.py``:\n\n.. code:: python\n\n    OPENCENSUS_TRACE = {\n        'SAMPLER': 'opencensus.trace.samplers.probability.ProbabilitySampler',\n        'REPORTER': 'opencensus.trace.exporters.print_exporter.PrintExporter',\n        'PROPAGATOR': 'opencensus.trace.propagation.google_cloud_format.'\n                      'GoogleCloudFormatPropagator',\n    }\n\nYou can configure the sampling rate and other parameters using the ``OPENCENSUS_TRACE_PARAMS``\nsetting in ``settings.py``:\n\n.. code:: python\n\n    OPENCENSUS_TRACE_PARAMS = {\n        'BLACKLIST_PATHS': ['/_ah/health'],\n        'GCP_EXPORTER_PROJECT': None,\n        'SAMPLING_RATE': 0.5,\n        'ZIPKIN_EXPORTER_SERVICE_NAME': 'my_service',\n        'ZIPKIN_EXPORTER_HOST_NAME': 'localhost',\n        'ZIPKIN_EXPORTER_PORT': 9411,\n    }\n\nWebapp2\n~~~~~~~\n\n.. code:: python\n\n    from opencensus.trace.tracer import webapp2_tracer\n\n    tracer = webapp2_tracer.WebApp2Tracer()\n\n    with tracer.span(name='span1'):\n        do_something_to_trace()\n\n\nService Integration\n-------------------\n\nOpencensus supports integration with various popular outbound services such as\nMySQL and Requests. To enable integration you will need to pass the list of\nservices to census:\n\n.. code:: python\n\n    from opencensus.trace import config_integration\n    from opencensus.trace import request_tracer\n\n    import mysql.connector\n\n    # Trace both mysql-connection and psycopg2\n    integration = ['mysql', 'postgresql']\n\n    config_integration.trace_integrations(integration)\n\n\nMySQL\n~~~~~\n\nThe integration with MySQL supports the `mysql-connector`_ library and is specified\nto ``trace_integrations`` using ``'mysql'``.\n\n.. _mysql-connector: https://pypi.org/project/mysql-connector\n\nPostgreSQL\n~~~~~~~~~~\n\nThe integration with PostgreSQL supports the `psycopg2`_ library and is specified\nto ``trace_integrations`` using ``'postgresql'``.\n\n.. _psycopg2: https://pypi.org/project/psycopg2\n\n\nSQLAlchemy\n~~~~~~~~~~\n\nYou can trace usage of `sqlalchemy package`_, regardless of the underlying database, by\nspecifying ``'sqlalchemy'`` to ``trace_integrations``.\n\n.. _SQLAlchemy package: https://pypi.org/project/SQLAlchemy\n\n.. note:: If you enable tracing of SQLAlchemy and the underlying database\n    driver, you will get duplicate spans. Instead, just trace SQLAlchemy.\n\nRequests\n~~~~~~~~\n\nCensus can trace HTTP requests made with the `Requests`_ library. The request URL,\nmethod, and status will be collected.\n\nYou can enable Requests integration by specifying ``'requests'`` to ``trace_integrations``.\n\n\nContributing\n------------\n\nContributions to this library are always welcome and highly encouraged.\n\nSee `CONTRIBUTING <CONTRIBUTING.md>`__ for more information on how to\nget started.\n\n\nDevelopment\n-----------\n\nTests\n~~~~~\n\n::\n\n    cd trace\n    tox -e py34\n    source .tox/py34/bin/activate\n\n    # Run the unit test\n    pip install nox-automation\n\n    # See what's available in the nox suite\n    nox -l\n\n    # Run a single nox command\n    nox -s \"unit_tests(python_version='2.7')\"\n\n    # Run all the nox commands\n    nox\n\n    # Integration test\n    # We don't have script for integration test yet, but can test as below.\n    python setup.py bdist_wheel\n    cd dist\n    pip install opencensus-0.0.1-py2.py3-none-any.whl\n\n    # Then just run the tracers normally as you want to test.\n\nLicense\n-------\n\nApache 2.0 - See `LICENSE <LICENSE>`__ for more information.\n\nDisclaimer\n----------\n\nThis is not an official Google product.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/census-instrumentation/opencensus-python",
    "keywords": "",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "opencensus",
    "platform": "",
    "project_url": "https://pypi.org/project/opencensus/",
    "release_url": "https://pypi.org/project/opencensus/0.1.1/",
    "requires_dist": [
      "google-cloud-trace (<0.17dev,>=0.16.0)"
    ],
    "requires_python": "",
    "summary": "A stats collection and distributed tracing framework",
    "version": "0.1.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1bc851891cdf33c295bc4c7d597ecf27",
          "sha256": "4c42e14e023cf0bda177cc59c5872b5162deaf64b547bc45ff65cc9b0d9fa197"
        },
        "downloads": -1,
        "filename": "opencensus-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1bc851891cdf33c295bc4c7d597ecf27",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 2430,
        "upload_time": "2017-07-13T00:12:18",
        "url": "https://files.pythonhosted.org/packages/42/46/f3e72792813c2c354a0d53e0d70c41feb7b3f37592c2827c186868f569e1/opencensus-0.0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2cfb6e36105578712a2d6cf13ac891df",
          "sha256": "413d386eb7d9df4520dbd11e042eef363f6974cd53a2c5759f611932c19d8a03"
        },
        "downloads": -1,
        "filename": "opencensus-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2cfb6e36105578712a2d6cf13ac891df",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5444,
        "upload_time": "2017-07-13T00:12:19",
        "url": "https://files.pythonhosted.org/packages/d3/2e/87959e7fc92d96b8f58bafe4579bc8262eb2b12b344eef09079651f748d2/opencensus-0.0.1.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1c986b9a5d65870f19cd768c6d193806",
          "sha256": "8962f141be64f744a94c2d913198787adafab8c1d4416eced9ec5baa21b3a067"
        },
        "downloads": -1,
        "filename": "opencensus-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1c986b9a5d65870f19cd768c6d193806",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 69973,
        "upload_time": "2017-12-05T20:00:03",
        "url": "https://files.pythonhosted.org/packages/da/69/64dc2185963c9dcf71a036e0a67a243c5931c2e06181d2ec477a6ed8bef9/opencensus-0.1.1-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1c986b9a5d65870f19cd768c6d193806",
        "sha256": "8962f141be64f744a94c2d913198787adafab8c1d4416eced9ec5baa21b3a067"
      },
      "downloads": -1,
      "filename": "opencensus-0.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1c986b9a5d65870f19cd768c6d193806",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 69973,
      "upload_time": "2017-12-05T20:00:03",
      "url": "https://files.pythonhosted.org/packages/da/69/64dc2185963c9dcf71a036e0a67a243c5931c2e06181d2ec477a6ed8bef9/opencensus-0.1.1-py2.py3-none-any.whl"
    }
  ]
}