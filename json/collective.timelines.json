{
  "info": {
    "author": "Alec Mitchell",
    "author_email": "alecpm@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Plone",
      "Programming Language :: Python"
    ],
    "description": "Introduction\n============\n\nThis package which integrates the `Verite TimelineJS <http://timeline.verite.co/>`_\napplication into Plone.  Providing a beautiful, customizable timeline view\nfor folders and collections.\n\nIt adds a view ``timeline-view`` for Folders and new and old-style\n(ATTopic) Collections (ATTopic).\n\nIn addition, it adds a Dexterity behavior for setting timeline dates\non content and a schema extender that applies to all Archetypes\ncontent (except ATEvent, for which the normal date fields are used).\n\nIf the content has a remoteUrl (i.e. and ATLink), that link will be\nused to generate the thumbnail for the page.  Special handling is\nbuilt in for Youtube, Twitter, Wikipedia and Flickr links, among\nothers.  Otherwise, the page url is used to generate the thumbnail.\n\n\nCustomizations\n--------------\n\nThe default adapters for Archetypes and Dexterity content should\nhandle most usecases.  However, you may customize the timeline\nmetadata for specific content types by registering adapters to the\n``ITimelineContent`` and/or ``ITimelineSupplement`` interfaces.\n\nFor example if I wanted to change the asset url for my IFoo content type\nI would simply add the following to a grokked package::\n\n    from five import grok\n    from collective.timelines.interfaces import ITimelineSupplement\n\n    class FooTimelineSupplement(grok.Adapter):\n        grok.name('foo')\n        grok.context(IFoo)\n        grok.provides(ITimelineSupplement)\n\n        def update(self, data):\n            data['asset']['media'] = self.context.my_url\n            return data\n\nThere is an example of a timeline supplement provided in the\nmap_support module, which uses metadata from ``Products.Maps`` enabled\ncontent to display a map in the timeline.\n\nTo override the date calculation to use a custom date, or to\ncompletely change the base data, you can override the ITimelineContent\nadapter::\n\n    from five import grok\n    from DateTime import DateTime\n    from collective.timelines.interfaces import ITimelineContent\n    from collective.timelines.dexterity_content import TimeLineContent\n\n    class FooTimelineContent(TimelineContent):\n        grok.provides(ITimelineContent)\n        grok.context(IFoo)\n\n        def date(self):\n            date = self.context.my_date\n            return DateTime(date.year, date.month, date.day)\n\n        def data(self):\n            # Calculate custom dictionary for timeline date entry\n\nThere is an example of a custom ``ITimelineContent`` data provider in\nthe at_content module, which handles ATEvent content by automatically\nusing the start and end dates.\n\nChangelog\n=========\n\n1.0dev (unreleased)\n-------------------\n\n- Initial release",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://svn.plone.org/svn/collective/",
    "keywords": "",
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "collective.timelines",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/collective.timelines/",
    "release_url": "https://pypi.org/project/collective.timelines/1.0b1/",
    "requires_python": null,
    "summary": "Timeline views for collections and folders (using verite TimelineJS).",
    "version": "1.0b1"
  },
  "releases": {
    "1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5ffeb5d72547c4ef8804764c28fe9415",
          "sha256": "e252569218d56190bf823a94ae9c116690e7fc8008c09eb55f50b2fddee213f4"
        },
        "downloads": 2623,
        "filename": "collective.timelines-1.0a1.zip",
        "has_sig": false,
        "md5_digest": "5ffeb5d72547c4ef8804764c28fe9415",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 302671,
        "upload_time": "2013-08-15T21:35:50",
        "url": "https://files.pythonhosted.org/packages/1a/7c/7189ec89fa7d855650adabb0ec82d9f02460fa58d20614425d48842b47ac/collective.timelines-1.0a1.zip"
      }
    ],
    "1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5e29b20a21eb4099646cee907152f4b6",
          "sha256": "ef59a401aeb73716b9aa0fd3f32efadd2737fbefb8ad2c948c4b8baee49911da"
        },
        "downloads": 2381,
        "filename": "collective.timelines-1.0b1.zip",
        "has_sig": false,
        "md5_digest": "5e29b20a21eb4099646cee907152f4b6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 302739,
        "upload_time": "2013-11-09T04:10:13",
        "url": "https://files.pythonhosted.org/packages/e7/41/1b3cbaa2713710be35ca1a9f0c35e8b7c7572dd3a2e738082c24fb6f4ce9/collective.timelines-1.0b1.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5e29b20a21eb4099646cee907152f4b6",
        "sha256": "ef59a401aeb73716b9aa0fd3f32efadd2737fbefb8ad2c948c4b8baee49911da"
      },
      "downloads": 2381,
      "filename": "collective.timelines-1.0b1.zip",
      "has_sig": false,
      "md5_digest": "5e29b20a21eb4099646cee907152f4b6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 302739,
      "upload_time": "2013-11-09T04:10:13",
      "url": "https://files.pythonhosted.org/packages/e7/41/1b3cbaa2713710be35ca1a9f0c35e8b7c7572dd3a2e738082c24fb6f4ce9/collective.timelines-1.0b1.zip"
    }
  ]
}