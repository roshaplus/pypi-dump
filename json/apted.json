{
  "info": {
    "author": "Joao Pimentel",
    "author_email": "joaofelipenp@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "Python APTED algorithm for the Tree Edit Distance\n=================================================\n\nInformation\n-----------\n\nThis is a Python implementation of the APTED algorithm, the\nstate-of-the-art solution for computing the tree edit distance [1,2],\nwhich supersedes the RTED algorithm [3].\n\nIt is a port of the original Java implementation available at\nhttps://github.com/DatabaseGroup/apted. During the port, some changes\nwere made to reduce the duplication on symmetric operations and to make\nit look more Pythonic.\n\nYou can find more information about APTED on the following website\nhttp://tree-edit-distance.dbresearch.uni-salzburg.at/\n\nCiting APTED\n------------\n\nIf you want to refer to APTED in a publication, please cite [1] and [2].\n\nLicence\n-------\n\nThe source code is published under the **MIT licence** found in the root\ndirectory of the project and in the header of each source file.\n\nInput\n-----\n\nCurrently, we support only the so-called bracket notation for the input\ntrees, for example, encoding ``{A{B{X}{Y}{F}}{C}}`` corresponds to the\nfollowing tree:\n\n::\n\n        A\n       / \\\n      B   C\n     /|\\\n    X Y F\n\nOutput\n------\n\nOur tool computes two outputs: - tree edit **distance** value - the\nminimum cost of transforming the source tree into the destination tree.\n- tree edit **mapping** - a mapping between nodes that corresponds to\nthe tree edit distance value. Nodes that are not mapped are deleted\n(source tree) or inserted (destination tree).\n\nGetting started\n---------------\n\nThis version were tested on Python 2.7, 3.4, 3.5, and 3.6.\n\nFirst, install it with pip:\n\n::\n\n    pip install apted\n\nIf you want to compare the trees {a{b}{c}} and {a{b{d}}}, please run:\n\n::\n\n    python -m apted -t {a{b}{c}} {a{b{d}}} -mv\n\nThe output is:\n\n::\n\n    distance:             2\n    runtime:              0.000270843505859\n    {a{b}{c}} -> {a{b{d}}}\n    {c} -> None\n    {b} -> {b{d}}\n    None -> {d}\n\nFor more information on running options, please run\n\n::\n\n    python -m apted -h\n\nCustomizing\n-----------\n\nIt is possible to customize the algorithm to run with custom trees with\nlabels different from simple strings or custom data-structures.\nAdditionally it is possible to customize it to use a more sophisticated\ncost model than unit cost.\n\nFor customizing the algorithm, you can create a custom *Config* class:\n\n.. code:: python\n\n    from apted import APTED, Config\n\n    class CustomConfig(Config):\n       def rename(self, node1, node2):\n            \"\"\"Compares attribute .value of trees\"\"\"\n            return 1 if node1.value != node2.value else 0\n\n        def children(self, node):\n            \"\"\"Get left and right children of binary tree\"\"\"\n            return [x for x in (node.left, node.right) if x]\n\n    apted = APTED(tree1, tree2, CustomConfig())\n    ted = apted.compute_edit_distance()\n    mapping = apted.compute_edit_mapping()\n\nBy default, the included *Config* class consider trees with the atribute\n*name* as label and the atribute *children* as children in left to right\npreorder.\n\nIn addition to the Config class, we also provide a\n*PerEditOperationConfig* class that allows you to specify weights for\neach operation:\n\n.. code:: python\n\n    from apted import APTED, PerEditOperationConfig\n\n    apted = APTED(tree1, tree2, PerEditOperationConfig(.4, .4, .6))\n    ted = apted.compute_edit_distance()\n    mapping = apted.compute_edit_mapping()\n\nIf your main usage for APTED is to obtain the mapping, it is possible to\nconfigure the algorith to keep track of the mapping during the\nexecution. To do so, we provide a function, *meta\\_chained\\_config*,\nthat modifies existing *Config* classes:\n\n.. code:: python\n\n    from apted import APTED, PerEditOperationConfig, meta_chained_config\n\n    new_config = meta_chained_config(PerEditOperationConfig)\n    apted = APTED(tree1, tree2, new_config(.4, .4, .6))\n    ted = apted.compute_edit_distance()\n    mapping = apted.compute_edit_mapping()\n\nNote that this approach uses much more memory and we didn't evaluate if\nit is faster than the original algorithm for the mapping with huge\ntrees. The execution time for the mapping tests were about the same as\nthe original algorithm.\n\nContributing\n------------\n\nFeel free to submit pull resquests to this repository.\n\nThe codebase follows the PEP8 conventions. However it is not too strict.\nFor instance, it is okay to have lines with a little more than 79\ncharacters, but try not to exceed too much.\n\nPlease, run ``python test.py`` during your changes to make sure\neverything is working. It is also desirable to use coverage.py to check\ntest coverage: ``coverage run test.py``.\n\nOriginal Authors\n----------------\n\n-  Mateusz Pawlik\n-  Nikolaus Augsten\n\nImplementation Author\n---------------------\n\n-  Joao Felipe Pimentel\n\nReferences\n----------\n\n1. M. Pawlik and N. Augsten. *Tree edit distance: Robust and memory-\n   efficient*. Information Systems 56. 2016.\n\n2. M. Pawlik and N. Augsten. *Efficient Computation of the Tree Edit\n   Distance*. ACM Transactions on Database Systems (TODS) 40(1). 2015.\n\n3. M. Pawlik and N. Augsten. *RTED: A Robust Algorithm for the Tree Edit\n   Distance*. PVLDB 5(4). 2011.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/JoaoFelipe/apted",
    "keywords": "APTED TED tree edit distance",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "apted",
    "platform": "",
    "project_url": "https://pypi.org/project/apted/",
    "release_url": "https://pypi.org/project/apted/1.0.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "APTED algorithm for the Tree Edit Distance",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "10cc1df9cea0a4e5731799aab2c75633",
          "sha256": "57f4fb6d52126d91c1daf4c1264243d5910645a95410116f4ca8bed647e88e6b"
        },
        "downloads": -1,
        "filename": "apted-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "10cc1df9cea0a4e5731799aab2c75633",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 40406,
        "upload_time": "2017-11-05T04:48:28",
        "url": "https://files.pythonhosted.org/packages/1a/ac/bc57286bf792a2b015e97d21d52a002f40d63338dc8cb507062f00454562/apted-1.0.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "45588005a573a31cc89c0498499f50bb",
          "sha256": "fab0e8c8e78878b36b768f8ca62d7e4ef06c3595a7310a15706223366c6ddcdb"
        },
        "downloads": -1,
        "filename": "apted-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "45588005a573a31cc89c0498499f50bb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24416,
        "upload_time": "2017-11-05T04:48:31",
        "url": "https://files.pythonhosted.org/packages/3e/d1/d5d47e1de3c53eed7c087deab7936287853cba3f9568bf0ae79cb67e3cc7/apted-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "10cc1df9cea0a4e5731799aab2c75633",
        "sha256": "57f4fb6d52126d91c1daf4c1264243d5910645a95410116f4ca8bed647e88e6b"
      },
      "downloads": -1,
      "filename": "apted-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "10cc1df9cea0a4e5731799aab2c75633",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 40406,
      "upload_time": "2017-11-05T04:48:28",
      "url": "https://files.pythonhosted.org/packages/1a/ac/bc57286bf792a2b015e97d21d52a002f40d63338dc8cb507062f00454562/apted-1.0.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "45588005a573a31cc89c0498499f50bb",
        "sha256": "fab0e8c8e78878b36b768f8ca62d7e4ef06c3595a7310a15706223366c6ddcdb"
      },
      "downloads": -1,
      "filename": "apted-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "45588005a573a31cc89c0498499f50bb",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 24416,
      "upload_time": "2017-11-05T04:48:31",
      "url": "https://files.pythonhosted.org/packages/3e/d1/d5d47e1de3c53eed7c087deab7936287853cba3f9568bf0ae79cb67e3cc7/apted-1.0.0.tar.gz"
    }
  ]
}