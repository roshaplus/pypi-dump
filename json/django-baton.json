{
  "info": {
    "author": "abidibo",
    "author_email": "abidibo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development",
      "Topic :: Software Development :: User Interfaces"
    ],
    "description": "# django-baton\n\nA cool, modern and responsive django admin application, based on bootstrap 4-alpha6.\n\nDocumentation: [readthedocs](http://django-baton.readthedocs.io/)\n\n![Screenshot](screenshots/index-analytics-lg.jpg)\n\n## Table of contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n    - [Menu](#configuration-menu)\n    - [Analytics](#configuration-analytics)\n- [Form Tabs](#form-tabs)\n- [Customization](#customization)\n- [Known Issues](#known-issues)\n- [TODO](#todo)\n- [Screenshots](#screenshots)\n\n## <a name=\"features\"></a>Features\n\nTested with django 1.10.5 and 1.11.1\n\nThis application was written with one concept in mind: overwrite as few django templates as possible.\nEverything is styled through css, and when an help is needed, js is armed.\n\n- Based on bootstrap 4-alpha6 and FontAwesome\n- Fully responsive\n- Custom and flexible sidebar menu\n- Form tabs out of the box\n- Optional index page filled with google analytics widgets\n- Customization available recompiling the js app provided\n- it translations provided\n\nIt requires the following python packages in order to manage the google analytics index:\n\n- google-api-python-client\n- oauth2client==1.5.2\n\nAt the moment __baton__ defines only 3 custom templates:\n\n- `admin/base_site.html`, needed in order to inject the js application (which includes also css and graphics, compiled with [webpack](https://webpack.github.io/));\n- `admin/delete_confirmation.html`, needed because of a bug (IMO) in the template, in particular the `extra_head` block does not contain the parent content, hence it must be overridden (FIXED IN django 1.11, remains until baton will support django 1.10);\n- `admin/delete_selected_confirmation.html`, same as above.\n\nBaton is based on the following frontend technologies:\n\n- bootstrap 4-alpha6\n- FontAwesome 4.7.0\n\nFlexbox is used here and there to accomplish responsiveness. jQuery is used for DOM manipulations.\n\nAll js, fonts and css are compiled, and produce a single js file which is included in the base_site template.\n\nA custom menu is provided, the menu is rendered through js, and data are fetched in json format through ajax request.\n\n## <a name=\"installation\"></a>Installation\n\nInstall the last stable release\n\n    pip install django-baton\n\nor clone the repo inside your project\n\n    git clone https://github.com/otto-torino/django-baton.git\n\nAdd `baton` and `baton.autodiscover` to your `INSTALLED_APPS`:\n\n    INSTALLED_APPS = (\n        # ...\n        'baton',\n        'django.contrib.admin',\n        # ...\n        'baton.autodiscover',\n    )\n\nReplace django.contrib.admin in your project urls, and add baton urls:\n\n    # from django.contrib import admin\n    from baton.autodiscover import admin\n\n    urlpatterns = [\n        url(r'^admin/', include(admin.site.urls)),\n        # ...\n        url(r'^baton/', include('baton.urls')),\n    ]\n\n### Why two installed apps?\n\nWell, the first `baton` has to be placed before the `django.contrib.admin` app, because it overrides 3 templates and resets all css.\nThe `baton.autodiscover` entry is needed as the last installed app in order to register all applications for the admin.\nI decided to create a custom `AdminSite` class, in order to allow the customization of some variables the django way (`site_header`, `index_title`, ...). I think this is a good approach,\nbetter than customizing this vars overwriting the orignal templates. The problem is that when creating a custom AdminSite, you should register manually all the apps. I didn't like\nthis, so I wrote this `autodiscover` module, which automatically registers all the apps already registered with the django default AdminSite. In order to do this, all the apps must be already registered, so it comes as the last installed app.\n\n## <a name=\"configuration\"></a>Configuration\n\nThe configuration dictionary must be defined inside your settings:\n\n    BATON = {\n        'SITE_HEADER': 'Baton',\n        'SITE_TITLE': 'Baton',\n        'INDEX_TITLE': 'Site administration',\n        'SUPPORT_HREF': 'https://github.com/otto-torino/django-baton/issues',\n        'COPYRIGHT': 'copyright \u00a9 2017 <a href=\"https://www.otto.to.it\">Otto srl</a>', # noqa\n        'POWERED_BY': '<a href=\"https://www.otto.to.it\">Otto srl</a>',\n        'CONFIRM_UNSAVED_CHANGES': True,\n        'MENU': (\n            { 'type': 'title', 'label': 'main', 'apps': ('auth', ) },\n            {\n                'type': 'app',\n                'name': 'auth',\n                'label': 'Authentication',\n                'icon': 'fa fa-lock',\n                'models': (\n                    {\n                        'name': 'user',\n                        'label': 'Users'\n                    },\n                    {\n                        'name': 'group',\n                        'label': 'Groups'\n                    },\n                )\n            },\n            { 'type': 'title', 'label': 'Contents', 'apps': ('flatpages', ) },\n            { 'type': 'model', 'label': 'Pages', 'name': 'flatpage', 'app': 'flatpages' },\n            { 'type': 'free', 'label': 'Custom Link', 'url': 'http://www.google.it', 'perms': ('flatpages.add_flatpage', 'auth.change_user') },\n        ),\n        'ANALYTICS': {\n            'CREDENTIALS': os.path.join(BASE_DIR, 'credentials.json'),\n            'VIEW_ID': '12345678',\n        }\n    }\n\n- `SITE_HEADER`, `COPYRIGHT` and `POWERED_BY` are marked as safe, so you can include also img tags and links, for example.\n- `SUPPORT_HREF` is the content of an href attribute, then you can use also a `mailto:info@blabla.com`\n- `CONFIRM_UNSAVED_CHANGES`: if set to `True` a confirmation modal appears when leaving a change form or add form with unsaved changes.\nThe check of a dirty form relies on the jQuery serialize method, so it's not 100% safe. Disabled inputs, particular widgets (ckeditor) can not be detected.\nDefault value is `True`.\n\nLet's see the `MENU` and `ANALYTICS` configurations in detail.\n\n### <a name=\"configuration-menu\"></a>MENU\n\nCurrently four kind of voices are supported: _title_, _app_, _model_ and _free_.\n\nFirst of all, if you don't define a MENU key in the configuration dictionary, the default MENU is shown.\nIf you define a MENU key, then the custom menu is built and shown.\n\n#### Title\n\nLike __MAIN__ and __CONTENTS__ in the screenshot, it represents a menu section. You should set a label and optionally an apps or perms key, used for visualization purposes.\n\nIf the title voice should act as a section title for a group of apps, you'd want to specify these apps, because if the user can't operate over them, then the voice is not shown.\nAt the same time you can define some perms (OR condition), something like:\n\n    { 'type': 'title', 'label': 'main', 'perms': ('auth.add_user', ) },\n\n#### App\n\nYou must specify the _type_ and _name_ keys, optionally an icon key (you can use FontAwesome classes which are included by default) and a _models_ key.\nIf you don't define the _models_ key then the default app models are listed under your app, otherwise only the specified models are listed (in the order you provide).\n\n#### Model\n\nYou must specify the _type_, _name_ and _app_ keys, optionally an icon key (you can use FontAwesome classes which are included by default).\n\n#### Free\n\nYou can specify free voices, you must define an _url_ and if you want some visibility permissions (OR clause)\n\n### <a name=\"configuration-analytics\"></a>ANALYTICS\n\nYou can create a cool index page displaying some statistics widgets consuming the google analytics api, just by defining the `ANALYTICS` setting.\n\nIt requires two keys:\n\n- `CREDENTIALS`: it is the path to the credentials json file\n- `VIEW_ID`: id of the view from which display data\n\n#### How to generate a credentials json file\n\nFollow the steps in the Google Identity Platform documentation to [create a service account](https://developers.google.com/identity/protocols/OAuth2ServiceAccount#creatinganaccount) from the [Google Developer Console](https://console.developers.google.com/).\n\nOnce the service account is created, you can click the Generate New JSON Key button to create and download the key and add it to your project.\n\nAdd the service account as a user in Google Analytics. The service account you created in the previous step has an email address that you can add to any of the Google Analytics views you'd like to request data from. It's generally best to only grant the service account read-only access.\n\n## <a name=\"form-tabs\"></a>Form tabs\n\nHow much I loved django-suit form tabs? Too much.\n\nSo, this was a feature I couldn't live without. Let's see how to define tabs in your admin forms (everyting is done through js, no templatetags, no templates overriden):\n\n    class AttributeInline(admin.StackedInline):\n        model = Attribute\n        extra = 1\n\n    class FeatureInline(admin.StackedInline):\n        model = Feature\n        extra = 1\n\n    class ItemAdmin(admin.ModelAdmin):\n        list_display = ('label', )\n        inlines = [AttributeInline, FeatureInline, ]\n\n        fieldsets = (\n            ('Main', {\n                'fields': ('label', ),\n                'classes': ('baton-tabs-init', 'baton-tab-inline-attribute', 'baton-tab-inline-feature', 'baton-tab-fs-content',  ),\n                'description': 'This is a description text'\n\n            }),\n            ('Content', {\n                'fields': ('text', ),\n                'classes': ('tab-fs-content', ),\n                'description': 'This is another description text'\n\n            }),\n        )\n\nAs you can see these are the rules:\n\n- Inline classes remain the same, no action needed\n- In the first fieldset define a `baton-tabs-init` class which enables tabs\n- For every InLine you want to put in a separate tab, add a class `baton-tab-inline-MODELNAME` or `baton-tab-inline-RELATEDNAME` if you've specified a related name in the model foreign key field\n- For every fieldset you want to put in a separate tab, add a class `baton-tab-fs-CUSTOMNAME`, and add a class `tab-fs-CUSTOMNAME` on the fieldset\n- Tabs order respects the defined classes order\n\nOther features:\n\n- when some field has an error, the first tab containing errors is opened automatically\n- you can open a tab on page load just by adding an hash to the url, i.e. `#inline-feature`\n\n## <a name=\"customization\"></a>Customization\n\nIt's easy to heavily customize the appeareance of __baton__. All the stuff is compiled from a modern js app which resides in `baton/static/baton/app`.\n\nYou just need to change the [sass variables values](https://github.com/otto-torino/django-baton/blob/master/baton/static/baton/app/src/styles/_variables.scss) (and you can overwrite also bootstrap variables), re-compile, get the compiled js file, place it in the static folder of your main app,\nand place your main app (ROOTAPP) before __baton__ in the `INSTALLED_APPS`.\n\nSo:\n\n    $ git clone https://github.com/otto-torino/django-baton.git\n    $ cd django-baton/baton/static/baton/app/\n    $ npm install\n    $ vim src/styles/_variables.scss\n    $ npm run compile\n    $ cp dist/baton.min.js ROOTAPP/static/baton/app/dist/\n\nIf you want to test live your changes it's easy, just start the webpack dev server:\n\n    $ cd django-baton/baton/static/baton/app/\n    $ npm run dev\n\nAnd the inside the `base_site.html` template make these changes:\n\n    <!-- <script src=\"{% static 'baton/app/dist/baton.min.js' %}\"></script> comment the compiled src and uncomment the webpack served src -->\n    <script src=\"http://localhost:8080/dist/baton.min.js\"></script>\n\nNow while you make your changes to the js app (css included), webpack will update the bundle automatically, so just refresh the page and you'll see your changes.\n\n## <a name=\"known-issues\"></a>Known Issues\n\nSome issues which are known, and may or may not be fixed in the future.\n\nThis application is meant for use with modern browsers, targeting all recent versions of chrome, firefox an IE. Surely it will cause graphic disasters with older IE versions.\n\n### Wrap multiple fields in the same line in fieldsets\n\nIt is possible in django to wrap multiple fields in the same line, when defining a fieldset:\n\n    {\n        'fields': (('first_name', 'last_name'), 'address', 'city', 'state'),\n    }\n\nputting `first_name` and `last_name` in their own tuple will fire this behaviour.\n\nThis feature is not supported in django-baton, because field-rows are not supposed to be inline.\n\nI think I won't fix this, I prefer using other approaches in these situations, like for example write a custom widget.\n\n## <a name=\"todo\"></a>TODO\n\n- write tests\n\n## <a name=\"screenshots\"></a>Screenshots\n\n![Screenshot](screenshots/mobile_mix.jpg)\n![Screenshot](screenshots/changelist_user-lg.jpg)\n![Screenshot](screenshots/tabs-lg.jpg)",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/otto-torino/django-baton",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-baton",
    "platform": "",
    "project_url": "https://pypi.org/project/django-baton/",
    "release_url": "https://pypi.org/project/django-baton/1.0.8/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A cool, modern and responsive django admin application",
    "version": "1.0.8"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a0a2c3e54d98913d6ba0404ca7da6fe5",
          "sha256": "3bc1d21d25617e14fd675947f1f184be2424279afb373bd9fddb03ac95f8bfb9"
        },
        "downloads": -1,
        "filename": "django-baton-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a0a2c3e54d98913d6ba0404ca7da6fe5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15411419,
        "upload_time": "2017-05-18T12:13:23",
        "url": "https://files.pythonhosted.org/packages/ae/fb/5e8f748fc114ac37455dbadf26efad64f838acf497dc6ee1064bd2bdeb68/django-baton-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "146a370b508fa48118038500b82f77d4",
          "sha256": "fdfc8cfb728f07a8ff44db3fe532e74b9699847b955a863e327f79fbd6449745"
        },
        "downloads": -1,
        "filename": "django-baton-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "146a370b508fa48118038500b82f77d4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1475086,
        "upload_time": "2017-05-18T12:25:51",
        "url": "https://files.pythonhosted.org/packages/92/a3/169d0d3d2f86bb33590a0d804a75c084310a05023d43c7437dd3423f64cc/django-baton-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a821179cc7391a63372c192d1ddb45c3",
          "sha256": "99b2dbe0713e5e0f4cbd288001415b3fa0c04398c211869d1796c3be660d0b08"
        },
        "downloads": -1,
        "filename": "django-baton-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "a821179cc7391a63372c192d1ddb45c3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1474691,
        "upload_time": "2017-06-13T15:44:42",
        "url": "https://files.pythonhosted.org/packages/50/c5/7110b73998f0bf3931332d88a043e0e7d63bc9cf8deb9509d9aabc632d13/django-baton-1.0.2.tar.gz"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b4002e138a37af0355bc6716453f58ea",
          "sha256": "db0bb1f1cc1d62e76f25cb6877fea4c6fac6e62ae2fc921ffd61ae6f8f9ec33b"
        },
        "downloads": -1,
        "filename": "django-baton-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b4002e138a37af0355bc6716453f58ea",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1474713,
        "upload_time": "2017-09-28T10:21:00",
        "url": "https://files.pythonhosted.org/packages/af/2b/e83682b82798ee19479d714e89109a93cd5393dbc88270d47ded4b8b8f1a/django-baton-1.0.3.tar.gz"
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "904263394421a686e489db7b7bdba3be",
          "sha256": "34abfe6e52dbfbb3e1111287b690c003326d304249c215b638ddb28111443d7f"
        },
        "downloads": -1,
        "filename": "django-baton-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "904263394421a686e489db7b7bdba3be",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1474730,
        "upload_time": "2017-09-28T13:52:51",
        "url": "https://files.pythonhosted.org/packages/3d/93/c54b16ee55f4346d6bfc24812a946ce9e0cef34165c592c32cba463f46f2/django-baton-1.0.4.tar.gz"
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "caea568bc230faaaff03209c49be247c",
          "sha256": "f4ffe3efe633af0fae3615872a2d02fc83bb84db2ac3be8f9538a4c3e7e6e806"
        },
        "downloads": -1,
        "filename": "django-baton-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "caea568bc230faaaff03209c49be247c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1474988,
        "upload_time": "2017-10-13T09:09:14",
        "url": "https://files.pythonhosted.org/packages/de/b4/303a884ea9b2bc43f2be0f7cbf4c9499847beec4157fd983c5b626cc3511/django-baton-1.0.5.tar.gz"
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "284f34452ba9b9dfce7378ea9bf1ffdc",
          "sha256": "bcb8015884a52a76173ca8ce86db382aa654f2abb3737089de351b183ada476a"
        },
        "downloads": -1,
        "filename": "django-baton-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "284f34452ba9b9dfce7378ea9bf1ffdc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1475001,
        "upload_time": "2017-10-24T10:03:03",
        "url": "https://files.pythonhosted.org/packages/8c/c0/da34e527e792d815b373535ff0d5d93418142fa778311dae6f9f99023da5/django-baton-1.0.6.tar.gz"
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d1cbd4043abb34593c7027ab9c542602",
          "sha256": "f5ad65ad202f2ca1b0b1bfc438aedffca1db50e1c7194c6fb66e6f44cc0581d8"
        },
        "downloads": -1,
        "filename": "django-baton-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "d1cbd4043abb34593c7027ab9c542602",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1478954,
        "upload_time": "2017-11-13T16:12:46",
        "url": "https://files.pythonhosted.org/packages/42/ad/3562ccb0820a37a6877c9ffe5cd799fedc8f3f3ec23c506d11f307f94483/django-baton-1.0.7.tar.gz"
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5d2b189f280929761f87fa66686fef76",
          "sha256": "7414dd5defe22024fc46a8c704014a603c8aebeee79a4b2df59012efceeea74f"
        },
        "downloads": -1,
        "filename": "django-baton-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "5d2b189f280929761f87fa66686fef76",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1478951,
        "upload_time": "2017-12-19T14:50:17",
        "url": "https://files.pythonhosted.org/packages/eb/56/0b0af57cde4967d5ab4ed4c1a3ab1bd1c945d2f42a84c689d750420c3b49/django-baton-1.0.8.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5d2b189f280929761f87fa66686fef76",
        "sha256": "7414dd5defe22024fc46a8c704014a603c8aebeee79a4b2df59012efceeea74f"
      },
      "downloads": -1,
      "filename": "django-baton-1.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "5d2b189f280929761f87fa66686fef76",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 1478951,
      "upload_time": "2017-12-19T14:50:17",
      "url": "https://files.pythonhosted.org/packages/eb/56/0b0af57cde4967d5ab4ed4c1a3ab1bd1c945d2f42a84c689d750420c3b49/django-baton-1.0.8.tar.gz"
    }
  ]
}