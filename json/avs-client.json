{
  "info": {
    "author": "Richard Tier",
    "author_email": "rikatee@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "alexa-voice-service-client\n==========================\n\nPython Client for Alexa Voice Service (AVS)\n\nInstallation\n------------\n\n.. code:: sh\n\n    pip install git+https://github.com/richtier/alexa-browser-client.git@0.4.0#egg=alexa_browser_client\n\nUsage\n-----\n\nFile audio\n~~~~~~~~~~\n\n.. code:: py\n\n    from avs_client import AlexaVoiceServiceClient\n\n\n    alexa_client = AlexaVoiceServiceClient(\n        client_id='my-client-id',\n        secret='my-secret',\n        refresh_token='my-refresh-token',\n    )\n    alexa_client.connect()  # authenticate and other handshaking steps\n    with open('./tests/resources/alexa_what_time_is_it.wav', 'rb') as f:\n        alexa_response_audio = alexa_client.send_audio_file(f)\n    with open('./output.wav', 'wb') as f:\n        f.write(alexa_response_audio)\n\nNow listen to ``output.wave`` and Alexa should tell you the time.\n\nMicrophone audio\n~~~~~~~~~~~~~~~~\n\n.. code:: py\n\n    from io import BytesIO\n\n    import pyaudio\n\n    from avs_client import AlexaVoiceServiceClient\n\n\n    buffer = BytesIO()\n\n    def callback(in_data, frame_count, time_info, status):\n        buffer.write(in_data)\n        return (in_data, pyaudio.paContinue)\n    p = pyaudio.PyAudio()\n    stream = p.open(\n        format=pyaudio.paInt16,\n        channels=1,\n        rate=16000,\n        input=True,\n        stream_callback=callback,\n    )\n\n\n    alexa_client = AlexaVoiceServiceClient(\n        client_id='my-client-id',\n        secret='my-secret',\n        refresh_token='my-refresh-token',\n    )\n\n\n    try:\n        stream.start_stream()\n        print('listening. Press CTRL + C to exit.')\n        alexa_client.connect()\n        alexa_response_audio = alexa_client.send_audio_file(buffer)\n        if alexa_response_audio:\n            with open('./output.wav', 'wb') as f:\n                f.write(alexa_response_audio)\n    finally:\n        stream.stop_stream()\n        stream.close()\n        p.terminate()\n\nAuthentication\n--------------\n\nTo use AVS you must first have a `developer\naccount <http://developer.amazon.com>`__. Then register your product\n`here <https://developer.amazon.com/avs/home.html#/avs/products/new>`__.\nChoose \"Application\" under \"Is your product an app or a device\"?\n\nThe client requires your ``client_id``, ``secret`` and\n``refresh_token``:\n\n+---------------------+-------------------------------------------------------------------------------------------------------------------+\n| client kwarg        | Notes                                                                                                             |\n+=====================+===================================================================================================================+\n| ``client_id``       | Retrieve by clicking on the your product listed `here <https://developer.amazon.com/avs/home.html#/avs/home>`__   |\n+---------------------+-------------------------------------------------------------------------------------------------------------------+\n| ``secret``          | Retrieve by clicking on the your product listed `here <https://developer.amazon.com/avs/home.html#/avs/home>`__   |\n+---------------------+-------------------------------------------------------------------------------------------------------------------+\n| ``refresh_token``   | You must generate this. `See here <#refresh-token>`__                                                             |\n+---------------------+-------------------------------------------------------------------------------------------------------------------+\n\nRefresh token\n~~~~~~~~~~~~~\n\nYou will need to login to Amazon via a web browser to get your refresh\ntoken.\n\nTo enable this first go\n`here <https://developer.amazon.com/avs/home.html#/avs/home>`__ and\nclick on your product to set some security settings under\n``Security Profile``:\n\n+-----------------------+------------------------------------+\n| setting               | value                              |\n+=======================+====================================+\n| Allowed Origins       | https://localhost:9000             |\n+-----------------------+------------------------------------+\n| Allowed Return URLs   | https://localhost:9000/callback/   |\n+-----------------------+------------------------------------+\n\nThen run:\n\n.. code:: sh\n\n    python ./avs_client/refreshtoken/serve.py \\\n        --device-type-id=enter-device-type-id-here \\\n        --client-id=enter-client-id-here \\\n        --client-secret=enter-client-secret-here\n\nFollow the on-screen instructions shown at ``http://localhost:9000`` in\nyour web browser. On completion Amazon will return your\n``refresh_token``.\n\nSteaming audio to AVS\n---------------------\n\n``alexa_client.send_audio_file`` streaming uploads a file-like object to\nAVS for great latency. The file-like object can be an actual file on\nyour filesystem, an in-memory BytesIo buffer containing audio from your\nmicrophone, or even audio streaming from `your browser over a websocket\nin real-time <https://github.com/richtier/alexa-browser-client>`__.\n\nAVS requires the audio data to be 16bit Linear PCM (LPCM16), 16kHz\nsample rate, single-channel, and little endian.\n\nPersistent AVS connection\n-------------------------\n\nCalling ``alexa_client.connect()`` creates a persistent connection to\nAVS. The connection may get forcefully closed due to inactivity. Keep\nopen by calling ``alexa_client.alexa_client.conditional_ping()``:\n\n.. code:: py\n\n    import threading\n\n\n    def ping_avs():\n        while True:\n            alexa_client.conditional_ping()\n\n    ping_thread = threading.Thread(target=ping_avs)\n    ping_thread.start()\n\nYou will only need this if you intend to run the process for more than\nfive minutes. `More\ninformation <https://developer.amazon.com/public/solutions/alexa/alexa-voice-service/docs/managing-an-http-2-connection>`__.\n\nOther projects\n--------------\n\nThis library is used by\n`alexa-browser-client <https://github.com/richtier/alexa-browser-client>`__,\nwhich allows you to talk to Alexa from your browser.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/richtier/alexa-voice-service-client",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "avs-client",
    "platform": "",
    "project_url": "https://pypi.org/project/avs-client/",
    "release_url": "https://pypi.org/project/avs-client/0.4.2/",
    "requires_dist": [
      "requests-toolbelt (==0.7.0)",
      "requests (==2.13.0)",
      "hyper (==0.7.0)"
    ],
    "requires_python": "",
    "summary": "Python Client for Alexa Voice Service (AVS)",
    "version": "0.4.2"
  },
  "releases": {
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1d3125311c9e10603284ec572e27ad19",
          "sha256": "16ba682e4c1f735ce798a0d8c3fd439e72e23fae6ec206d44d6348a27f905c18"
        },
        "downloads": 0,
        "filename": "avs_client-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1d3125311c9e10603284ec572e27ad19",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 6243,
        "upload_time": "2017-08-26T22:04:27",
        "url": "https://files.pythonhosted.org/packages/77/99/35831e3d120bbc0ee7874a39ddacdb3e499396db3ef80d3ac99590996126/avs_client-0.4.0-py3-none-any.whl"
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9cb139dc65923f55ed05fcc757b32618",
          "sha256": "f60bc11640207b4bb2a8fbc57b9bbb231e97868a7aeecb2dc3a76089b0fe97a3"
        },
        "downloads": 0,
        "filename": "avs_client-0.4.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "9cb139dc65923f55ed05fcc757b32618",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 13875,
        "upload_time": "2017-08-26T22:28:25",
        "url": "https://files.pythonhosted.org/packages/d9/cd/31619bcc5beaf87f68e51b5991b25ba9ea30faaadd5e471e26bc316a8651/avs_client-0.4.2-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9cb139dc65923f55ed05fcc757b32618",
        "sha256": "f60bc11640207b4bb2a8fbc57b9bbb231e97868a7aeecb2dc3a76089b0fe97a3"
      },
      "downloads": 0,
      "filename": "avs_client-0.4.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "9cb139dc65923f55ed05fcc757b32618",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 13875,
      "upload_time": "2017-08-26T22:28:25",
      "url": "https://files.pythonhosted.org/packages/d9/cd/31619bcc5beaf87f68e51b5991b25ba9ea30faaadd5e471e26bc316a8651/avs_client-0.4.2-py3-none-any.whl"
    }
  ]
}