{
  "info": {
    "author": "Dillon Dixon",
    "author_email": "dillondixon@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Framework :: Flask",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "Flask-Basic-Roles |Build Status|\n================================\n\nA Flask library for extending basic web authentication with multiple\nusers and roles.\n\nWhat's ``flask-basic-roles`` for?\n---------------------------------\n\nHave you ever designed a simple web app that you wanted a little more\nthan `basic\nauthentication <https://en.wikipedia.org/wiki/Basic_access_authentication>`__\nfor, but didn't really have a need for full-blown sessions and a\ndatabase for user management?\n\nThe goal of\\ ``flask-basic-roles`` is to bridge that gap and make it as\nsimple as possible to add some role based security to a\n`Flask <http://flask.pocoo.org/>`__ based web service/REST API.\n\nHow do I get it?\n----------------\n\nInstall via pip:\n\n::\n\n    pip install flask_basic_roles\n\nHow do I use it?\n----------------\n\nHere's a very simple example building upon the ``Flask`` quickstart\nguide that tries to demonstrate the functionality of this library.\n\n.. code:: python\n\n    from flask import Flask\n    from flask_basic_roles import BasicRoleAuth\n    app = Flask(__name__)\n    auth = BasicRoleAuth()\n\n    # Let's add some users.\n    auth.add_user(user='bob', password='secret123', roles='producer')\n    auth.add_user(user='alice', password='drowssap', roles=('producer','consumer'))\n    auth.add_user(user='bill', password='54321')\n    auth.add_user(user='steve', password='12345', roles='admin')\n\n    # Only producers and admins can post, while consumers can only get.\n    # Admins can also perform all other verbs.\n    @app.route(\"/task\")\n    @auth.require(roles={\n        'POST': 'producer',\n        'GET': 'consumer',\n        'DELETE,POST,PATCH,PUT,GET': 'admin'\n    })\n    def tasks_endpoint(methods=(...)):\n        return \"Here tasks get produced and consumed!\"\n\n    # We can secure by user too. Steve can use any verb on this\n    # endpoint and everyone else is denied access.\n    @app.route(\"/task_status\")\n    @auth.require(users='steve')\n    def task_status_endpoint(methods=(...)):\n        return \"Here are the task statuses!\"\n\n    # Alice, Bill and users with an 'admin' role can access this, while everyone\n    # else is denied on all verbs.\n    @app.route(\"/task_failures\")\n    @auth.require(users=('alice', 'bill'), roles='admin')\n    def task_failures(methods=(...)):\n        return \"Here are the task failures!\"\n\n    # Everyone including unauthenticated users can view task results.\n    @app.route(\"/task_results\")\n    def task_results(methods=(...)):\n        return \"Here are the task results!\"\n\n    if __name__ == \"__main__\":\n        app.run()\n\nBut isn't putting passwords in code a bad idea?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYes! This is only supported in the API for demonstration and testing\npurposes. Users and their roles can (and should!) instead be specified\nin a file loaded via ``auth.load_from_file(\"file path here\")`` or\n``auth = BasicRoleAuth(user_file=\"file path here\")``.\n\nThis file defines each user one line at a time in the following format:\n\n::\n\n    <user>:<password>:<role_1>,<role_2>,...<role_n>`\n\nIn the case of the above example, this would look like:\n\n::\n\n    bob:secret123:producer\n    alice:drowssap:producer,consumer\n    bill:54321:\n    steve:12345:admin\n\nWhat if I'm too lazy to make that file?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis file can also be generated from a configured ``BasicRoleAuth``\nobject via the ``auth.save_to_file(\"file path here\")`` function.\n\nWhat happens if a user fails to authenticate or has no authorization?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf a user fails to authenticate, then\n``BasicRoleAuth.no_authentication`` is executed to generate the\nresponse.\n\nIf a user authenticates (i.e. they provide a matching username and\npassword), but their \"account\" has no authorization to perform the\naction (e.g. in the example above, ``bob`` attempting to do ``DELETE``\non ``/tasks``), then ``BasicRoleAuth.no_authorization`` is executed to\ngenerate the response.\n\nThese methods can be overridden as follows:\n\n.. code:: python\n\n    def no_authentication():\n        return Response(\"My custom response here\", 401)\n\n    auth = BasicRoleAuth()\n    auth.no_authentication = no_authentication\n\nAnything else I should know before using this in my own projects?\n-----------------------------------------------------------------\n\n1. ``flask-basic-roles`` is intended for small projects ideally\n   **without** user registration (i.e. **not** a forum website or store)\n   and for a small predefined number of users. If you are building\n   something intended for a big audience, don't use this library!\n\n2. ``flask-basic-roles``\\ does **not** provide transport level security.\n   If you are building something for use outside of your LAN, secure it\n   with HTTPS via a reverse proxy like\n   `NGINX <https://www.nginx.com/>`__.\n\n3. Passwords are in **plain text**. Support may be added later for\n   `digest access\n   authentication <https://en.wikipedia.org/wiki/Digest_access_authentication>`__.\n   You should **not** use passwords you tend to use in a lot of\n   different places with this library.\n\n.. |Build Status| image:: https://travis-ci.org/ownaginatious/flask-basic-roles.svg?branch=master\n   :target: https://travis-ci.org/ownaginatious/flask-basic-roles\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ownaginatious/flask-basic-roles",
    "keywords": "flask,python,authentication,authorization",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "flask_basic_roles",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/flask_basic_roles/",
    "release_url": "https://pypi.org/project/flask_basic_roles/0.1.post4/",
    "requires_python": null,
    "summary": "A plugin for adding very simple users + roles to a flask app",
    "version": "0.1.post4"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "987c083ca69e360927c2d7a5e7795ba9",
          "sha256": "5cdd08f8a2509da8c28bf200a5fe82b87689011f9e4c9d08ac611e2a706a3bc8"
        },
        "downloads": 471,
        "filename": "flask_basic_roles-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "987c083ca69e360927c2d7a5e7795ba9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6541,
        "upload_time": "2016-03-15T22:15:58",
        "url": "https://files.pythonhosted.org/packages/71/05/d6818e24b7ea5cc35ef12076d0fed1076d173fb4b2f78d401d30b6314106/flask_basic_roles-0.1.tar.gz"
      }
    ],
    "0.1.post4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "773517c469e7e1a08bf8351bec82dcef",
          "sha256": "afb2aa0729a44f633570b127a442b6c6b2285888055f6e69d98eeb29955a15fa"
        },
        "downloads": 154,
        "filename": "flask_basic_roles-0.1.post4.tar.gz",
        "has_sig": false,
        "md5_digest": "773517c469e7e1a08bf8351bec82dcef",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22487,
        "upload_time": "2016-04-23T01:30:05",
        "url": "https://files.pythonhosted.org/packages/89/9a/930041372f9cba4659b4a95686a44996d2290c0d1a3fdba9f9b7f686633c/flask_basic_roles-0.1.post4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "773517c469e7e1a08bf8351bec82dcef",
        "sha256": "afb2aa0729a44f633570b127a442b6c6b2285888055f6e69d98eeb29955a15fa"
      },
      "downloads": 154,
      "filename": "flask_basic_roles-0.1.post4.tar.gz",
      "has_sig": false,
      "md5_digest": "773517c469e7e1a08bf8351bec82dcef",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 22487,
      "upload_time": "2016-04-23T01:30:05",
      "url": "https://files.pythonhosted.org/packages/89/9a/930041372f9cba4659b4a95686a44996d2290c0d1a3fdba9f9b7f686633c/flask_basic_roles-0.1.post4.tar.gz"
    }
  ]
}