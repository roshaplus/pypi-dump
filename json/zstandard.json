{
  "info": {
    "author": "Gregory Szorc",
    "author_email": "gregory.szorc@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: C",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "================\npython-zstandard\n================\n\nThis project provides Python bindings for interfacing with the\n`Zstandard <http://www.zstd.net>`_ compression library. A C extension\nand CFFI interface are provided.\n\nThe primary goal of the project is to provide a rich interface to the\nunderlying C API through a Pythonic interface while not sacrificing\nperformance. This means exposing most of the features and flexibility\nof the C API while not sacrificing usability or safety that Python provides.\n\nThe canonical home for this project is\nhttps://github.com/indygreg/python-zstandard.\n\n|  |ci-status| |win-ci-status|\n\nState of Project\n================\n\nThe project is officially in beta state. The author is reasonably satisfied\nthat functionality works as advertised. **There will be some backwards\nincompatible changes before 1.0, probably in the 0.9 release.** This may\ninvolve renaming the main module from *zstd* to *zstandard* and renaming\nvarious types and methods. Pin the package version to prevent unwanted\nbreakage when this change occurs!\n\nThis project is vendored and distributed with Mercurial 4.1, where it is\nused in a production capacity.\n\nThere is continuous integration for Python versions 2.6, 2.7, and 3.3+\non Linux x86_x64 and Windows x86 and x86_64. The author is reasonably\nconfident the extension is stable and works as advertised on these\nplatforms.\n\nThe CFFI bindings are mostly feature complete. Where a feature is implemented\nin CFFI, unit tests run against both C extension and CFFI implementation to\nensure behavior parity.\n\nExpected Changes\n----------------\n\nThe author is reasonably confident in the current state of what's\nimplemented on the ``ZstdCompressor`` and ``ZstdDecompressor`` types.\nThose APIs likely won't change significantly. Some low-level behavior\n(such as naming and types expected by arguments) may change.\n\nThere will likely be arguments added to control the input and output\nbuffer sizes (currently, certain operations read and write in chunk\nsizes using zstd's preferred defaults).\n\nThere should be an API that accepts an object that conforms to the buffer\ninterface and returns an iterator over compressed or decompressed output.\n\nThere should be an API that exposes an ``io.RawIOBase`` interface to\ncompressor and decompressor streams, like how ``gzip.GzipFile`` from\nthe standard library works (issue 13).\n\nThe author is on the fence as to whether to support the extremely\nlow level compression and decompression APIs. It could be useful to\nsupport compression without the framing headers. But the author doesn't\nbelieve it a high priority at this time.\n\nThere will likely be a refactoring of the module names. Currently,\n``zstd`` is a C extension and ``zstd_cffi`` is the CFFI interface.\nThis means that all code for the C extension must be implemented in\nC. ``zstd`` may be converted to a Python module so code can be reused\nbetween CFFI and C and so not all code in the C extension has to be C.\n\nRequirements\n============\n\nThis extension is designed to run with Python 2.6, 2.7, 3.3, 3.4, 3.5, and\n3.6 on common platforms (Linux, Windows, and OS X). Only x86_64 is\ncurrently well-tested as an architecture.\n\nInstalling\n==========\n\nThis package is uploaded to PyPI at https://pypi.python.org/pypi/zstandard.\nSo, to install this package::\n\n   $ pip install zstandard\n\nBinary wheels are made available for some platforms. If you need to\ninstall from a source distribution, all you should need is a working C\ncompiler and the Python development headers/libraries. On many Linux\ndistributions, you can install a ``python-dev`` or ``python-devel``\npackage to provide these dependencies.\n\nPackages are also uploaded to Anaconda Cloud at\nhttps://anaconda.org/indygreg/zstandard. See that URL for how to install\nthis package with ``conda``.\n\nPerformance\n===========\n\nVery crude and non-scientific benchmarking (most benchmarks fall in this\ncategory because proper benchmarking is hard) show that the Python bindings\nperform within 10% of the native C implementation.\n\nThe following table compares the performance of compressing and decompressing\na 1.1 GB tar file comprised of the files in a Firefox source checkout. Values\nobtained with the ``zstd`` program are on the left. The remaining columns detail\nperformance of various compression APIs in the Python bindings.\n\n+-------+-----------------+-----------------+-----------------+---------------+\n| Level | Native          | Simple          | Stream In       | Stream Out    |\n|       | Comp / Decomp   | Comp / Decomp   | Comp / Decomp   | Comp          |\n+=======+=================+=================+=================+===============+\n|   1   | 490 / 1338 MB/s | 458 / 1266 MB/s | 407 / 1156 MB/s |  405 MB/s     |\n+-------+-----------------+-----------------+-----------------+---------------+\n|   2   | 412 / 1288 MB/s | 381 / 1203 MB/s | 345 / 1128 MB/s |  349 MB/s     |\n+-------+-----------------+-----------------+-----------------+---------------+\n|   3   | 342 / 1312 MB/s | 319 / 1182 MB/s | 285 / 1165 MB/s |  287 MB/s     |\n+-------+-----------------+-----------------+-----------------+---------------+\n|  11   |  64 / 1506 MB/s |  66 / 1436 MB/s |  56 / 1342 MB/s |   57 MB/s     |\n+-------+-----------------+-----------------+-----------------+---------------+\n\nAgain, these are very unscientific. But it shows that Python is capable of\ncompressing at several hundred MB/s and decompressing at over 1 GB/s.\n\nComparison to Other Python Bindings\n===================================\n\nhttps://pypi.python.org/pypi/zstd is an alternate Python binding to\nZstandard. At the time this was written, the latest release of that\npackage (1.1.2) only exposed the simple APIs for compression and decompression.\nThis package exposes much more of the zstd API, including streaming and\ndictionary compression. This package also has CFFI support.\n\nBundling of Zstandard Source Code\n=================================\n\nThe source repository for this project contains a vendored copy of the\nZstandard source code. This is done for a few reasons.\n\nFirst, Zstandard is relatively new and not yet widely available as a system\npackage. Providing a copy of the source code enables the Python C extension\nto be compiled without requiring the user to obtain the Zstandard source code\nseparately.\n\nSecond, Zstandard has both a stable *public* API and an *experimental* API.\nThe *experimental* API is actually quite useful (contains functionality for\ntraining dictionaries for example), so it is something we wish to expose to\nPython. However, the *experimental* API is only available via static linking.\nFurthermore, the *experimental* API can change at any time. So, control over\nthe exact version of the Zstandard library linked against is important to\nensure known behavior.\n\nInstructions for Building and Testing\n=====================================\n\nOnce you have the source code, the extension can be built via setup.py::\n\n   $ python setup.py build_ext\n\nWe recommend testing with ``nose``::\n\n   $ nosetests\n\nA Tox configuration is present to test against multiple Python versions::\n\n   $ tox\n\nTests use the ``hypothesis`` Python package to perform fuzzing. If you\ndon't have it, those tests won't run. Since the fuzzing tests take longer\nto execute than normal tests, you'll need to opt in to running them by\nsetting the ``ZSTD_SLOW_TESTS`` environment variable. This is set\nautomatically when using ``tox``.\n\nThe ``cffi`` Python package needs to be installed in order to build the CFFI\nbindings. If it isn't present, the CFFI bindings won't be built.\n\nTo create a virtualenv with all development dependencies, do something\nlike the following::\n\n  # Python 2\n  $ virtualenv venv\n\n  # Python 3\n  $ python3 -m venv venv\n\n  $ source venv/bin/activate\n  $ pip install cffi hypothesis nose tox\n\nAPI\n===\n\nThe compiled C extension provides a ``zstd`` Python module. The CFFI\nbindings provide a ``zstd_cffi`` module. Both provide an identical API\ninterface. The types, functions, and attributes exposed by these modules\nare documented in the sections below.\n\n.. note::\n\n   The documentation in this section makes references to various zstd\n   concepts and functionality. The ``Concepts`` section below explains\n   these concepts in more detail.\n\nZstdCompressor\n--------------\n\nThe ``ZstdCompressor`` class provides an interface for performing\ncompression operations.\n\nEach instance is associated with parameters that control compression\nbehavior. These come from the following named arguments (all optional):\n\nlevel\n   Integer compression level. Valid values are between 1 and 22.\ndict_data\n   Compression dictionary to use.\n\n   Note: When using dictionary data and ``compress()`` is called multiple\n   times, the ``CompressionParameters`` derived from an integer compression\n   ``level`` and the first compressed data's size will be reused for all\n   subsequent operations. This may not be desirable if source data size\n   varies significantly.\ncompression_params\n   A ``CompressionParameters`` instance (overrides the ``level`` value).\nwrite_checksum\n   Whether a 4 byte checksum should be written with the compressed data.\n   Defaults to False. If True, the decompressor can verify that decompressed\n   data matches the original input data.\nwrite_content_size\n   Whether the size of the uncompressed data will be written into the\n   header of compressed data. Defaults to False. The data will only be\n   written if the compressor knows the size of the input data. This is\n   likely not true for streaming compression.\nwrite_dict_id\n   Whether to write the dictionary ID into the compressed data.\n   Defaults to True. The dictionary ID is only written if a dictionary\n   is being used.\nthreads\n   Enables and sets the number of threads to use for multi-threaded compression\n   operations. Defaults to 0, which means to use single-threaded compression.\n   Negative values will resolve to the number of logical CPUs in the system.\n   Read below for more info on multi-threaded compression. This argument only\n   controls thread count for operations that operate on individual pieces of\n   data. APIs that spawn multiple threads for working on multiple pieces of\n   data have their own ``threads`` argument.\n\nUnless specified otherwise, assume that no two methods of ``ZstdCompressor``\ninstances can be called from multiple Python threads simultaneously. In other\nwords, assume instances are not thread safe unless stated otherwise.\n\nSimple API\n^^^^^^^^^^\n\n``compress(data)`` compresses and returns data as a one-shot operation.::\n\n   cctx = zstd.ZstdCompressor()\n   compressed = cctx.compress(b'data to compress')\n\nThe ``data`` argument can be any object that implements the *buffer protocol*.\n\nUnless ``compression_params`` or ``dict_data`` are passed to the\n``ZstdCompressor``, each invocation of ``compress()`` will calculate the\noptimal compression parameters for the configured compression ``level`` and\ninput data size (some parameters are fine-tuned for small input sizes).\n\nIf a compression dictionary is being used, the compression parameters\ndetermined from the first input's size will be reused for subsequent\noperations.\n\nThere is currently a deficiency in zstd's C APIs that makes it difficult\nto round trip empty inputs when ``write_content_size=True``. Attempting\nthis will raise a ``ValueError`` unless ``allow_empty=True`` is passed\nto ``compress()``.\n\nStreaming Input API\n^^^^^^^^^^^^^^^^^^^\n\n``write_to(fh)`` (which behaves as a context manager) allows you to *stream*\ndata into a compressor.::\n\n   cctx = zstd.ZstdCompressor(level=10)\n   with cctx.write_to(fh) as compressor:\n       compressor.write(b'chunk 0')\n       compressor.write(b'chunk 1')\n       ...\n\nThe argument to ``write_to()`` must have a ``write(data)`` method. As\ncompressed data is available, ``write()`` will be called with the compressed\ndata as its argument. Many common Python types implement ``write()``, including\nopen file handles and ``io.BytesIO``.\n\n``write_to()`` returns an object representing a streaming compressor instance.\nIt **must** be used as a context manager. That object's ``write(data)`` method\nis used to feed data into the compressor.\n\nA ``flush()`` method can be called to evict whatever data remains within the\ncompressor's internal state into the output object. This may result in 0 or\nmore ``write()`` calls to the output object.\n\nBoth ``write()`` and ``flush()`` return the number of bytes written to the\nobject's ``write()``. In many cases, small inputs do not accumulate enough\ndata to cause a write and ``write()`` will return ``0``.\n\nIf the size of the data being fed to this streaming compressor is known,\nyou can declare it before compression begins::\n\n   cctx = zstd.ZstdCompressor()\n   with cctx.write_to(fh, size=data_len) as compressor:\n       compressor.write(chunk0)\n       compressor.write(chunk1)\n       ...\n\nDeclaring the size of the source data allows compression parameters to\nbe tuned. And if ``write_content_size`` is used, it also results in the\ncontent size being written into the frame header of the output data.\n\nThe size of chunks being ``write()`` to the destination can be specified::\n\n    cctx = zstd.ZstdCompressor()\n    with cctx.write_to(fh, write_size=32768) as compressor:\n        ...\n\nTo see how much memory is being used by the streaming compressor::\n\n    cctx = zstd.ZstdCompressor()\n    with cctx.write_to(fh) as compressor:\n        ...\n        byte_size = compressor.memory_size()\n\nStreaming Output API\n^^^^^^^^^^^^^^^^^^^^\n\n``read_from(reader)`` provides a mechanism to stream data out of a compressor\nas an iterator of data chunks.::\n\n   cctx = zstd.ZstdCompressor()\n   for chunk in cctx.read_from(fh):\n        # Do something with emitted data.\n\n``read_from()`` accepts an object that has a ``read(size)`` method or conforms\nto the buffer protocol. (``bytes`` and ``memoryview`` are 2 common types that\nprovide the buffer protocol.)\n\nUncompressed data is fetched from the source either by calling ``read(size)``\nor by fetching a slice of data from the object directly (in the case where\nthe buffer protocol is being used). The returned iterator consists of chunks\nof compressed data.\n\nIf reading from the source via ``read()``, ``read()`` will be called until\nit raises or returns an empty bytes (``b''``). It is perfectly valid for\nthe source to deliver fewer bytes than were what requested by ``read(size)``.\n\nLike ``write_to()``, ``read_from()`` also accepts a ``size`` argument\ndeclaring the size of the input stream::\n\n    cctx = zstd.ZstdCompressor()\n    for chunk in cctx.read_from(fh, size=some_int):\n        pass\n\nYou can also control the size that data is ``read()`` from the source and\nthe ideal size of output chunks::\n\n    cctx = zstd.ZstdCompressor()\n    for chunk in cctx.read_from(fh, read_size=16384, write_size=8192):\n        pass\n\nUnlike ``write_to()``, ``read_from()`` does not give direct control over the\nsizes of chunks fed into the compressor. Instead, chunk sizes will be whatever\nthe object being read from delivers. These will often be of a uniform size.\n\nStream Copying API\n^^^^^^^^^^^^^^^^^^\n\n``copy_stream(ifh, ofh)`` can be used to copy data between 2 streams while\ncompressing it.::\n\n   cctx = zstd.ZstdCompressor()\n   cctx.copy_stream(ifh, ofh)\n\nFor example, say you wish to compress a file::\n\n   cctx = zstd.ZstdCompressor()\n   with open(input_path, 'rb') as ifh, open(output_path, 'wb') as ofh:\n       cctx.copy_stream(ifh, ofh)\n\nIt is also possible to declare the size of the source stream::\n\n   cctx = zstd.ZstdCompressor()\n   cctx.copy_stream(ifh, ofh, size=len_of_input)\n\nYou can also specify how large the chunks that are ``read()`` and ``write()``\nfrom and to the streams::\n\n   cctx = zstd.ZstdCompressor()\n   cctx.copy_stream(ifh, ofh, read_size=32768, write_size=16384)\n\nThe stream copier returns a 2-tuple of bytes read and written::\n\n   cctx = zstd.ZstdCompressor()\n   read_count, write_count = cctx.copy_stream(ifh, ofh)\n\nCompressor API\n^^^^^^^^^^^^^^\n\n``compressobj()`` returns an object that exposes ``compress(data)`` and\n``flush()`` methods. Each returns compressed data or an empty bytes.\n\nThe purpose of ``compressobj()`` is to provide an API-compatible interface\nwith ``zlib.compressobj`` and ``bz2.BZ2Compressor``. This allows callers to\nswap in different compressor objects while using the same API.\n\n``flush()`` accepts an optional argument indicating how to end the stream.\n``zstd.COMPRESSOBJ_FLUSH_FINISH`` (the default) ends the compression stream.\nOnce this type of flush is performed, ``compress()`` and ``flush()`` can\nno longer be called. This type of flush **must** be called to end the\ncompression context. If not called, returned data may be incomplete.\n\nA ``zstd.COMPRESSOBJ_FLUSH_BLOCK`` argument to ``flush()`` will flush a\nzstd block. Flushes of this type can be performed multiple times. The next\ncall to ``compress()`` will begin a new zstd block.\n\nHere is how this API should be used::\n\n   cctx = zstd.ZstdCompressor()\n   cobj = cctx.compressobj()\n   data = cobj.compress(b'raw input 0')\n   data = cobj.compress(b'raw input 1')\n   data = cobj.flush()\n\nOr to flush blocks::\n\n   cctx.zstd.ZstdCompressor()\n   cobj = cctx.compressobj()\n   data = cobj.compress(b'chunk in first block')\n   data = cobj.flush(zstd.COMPRESSOBJ_FLUSH_BLOCK)\n   data = cobj.compress(b'chunk in second block')\n   data = cobj.flush()\n\nFor best performance results, keep input chunks under 256KB. This avoids\nextra allocations for a large output object.\n\nIt is possible to declare the input size of the data that will be fed into\nthe compressor::\n\n   cctx = zstd.ZstdCompressor()\n   cobj = cctx.compressobj(size=6)\n   data = cobj.compress(b'foobar')\n   data = cobj.flush()\n\nBatch Compression API\n^^^^^^^^^^^^^^^^^^^^^\n\n(Experimental. Not yet supported in CFFI bindings.)\n\n``multi_compress_to_buffer(data, [threads=0])`` performs compression of multiple\ninputs as a single operation.\n\nData to be compressed can be passed as a ``BufferWithSegmentsCollection``, a\n``BufferWithSegments``, or a list containing byte like objects. Each element of\nthe container will be compressed individually using the configured parameters\non the ``ZstdCompressor`` instance.\n\nThe ``threads`` argument controls how many threads to use for compression. The\ndefault is ``0`` which means to use a single thread. Negative values use the\nnumber of logical CPUs in the machine.\n\nThe function returns a ``BufferWithSegmentsCollection``. This type represents\nN discrete memory allocations, eaching holding 1 or more compressed frames.\n\nOutput data is written to shared memory buffers. This means that unlike\nregular Python objects, a reference to *any* object within the collection\nkeeps the shared buffer and therefore memory backing it alive. This can have\nundesirable effects on process memory usage.\n\nThe API and behavior of this function is experimental and will likely change.\nKnown deficiencies include:\n\n* If asked to use multiple threads, it will always spawn that many threads,\n  even if the input is too small to use them. It should automatically lower\n  the thread count when the extra threads would just add overhead.\n* The buffer allocation strategy is fixed. There is room to make it dynamic,\n  perhaps even to allow one output buffer per input, facilitating a variation\n  of the API to return a list without the adverse effects of shared memory\n  buffers.\n\nZstdDecompressor\n----------------\n\nThe ``ZstdDecompressor`` class provides an interface for performing\ndecompression.\n\nEach instance is associated with parameters that control decompression. These\ncome from the following named arguments (all optional):\n\ndict_data\n   Compression dictionary to use.\n\nThe interface of this class is very similar to ``ZstdCompressor`` (by design).\n\nUnless specified otherwise, assume that no two methods of ``ZstdDecompressor``\ninstances can be called from multiple Python threads simultaneously. In other\nwords, assume instances are not thread safe unless stated otherwise.\n\nSimple API\n^^^^^^^^^^\n\n``decompress(data)`` can be used to decompress an entire compressed zstd\nframe in a single operation.::\n\n    dctx = zstd.ZstdDecompressor()\n    decompressed = dctx.decompress(data)\n\nBy default, ``decompress(data)`` will only work on data written with the content\nsize encoded in its header. This can be achieved by creating a\n``ZstdCompressor`` with ``write_content_size=True``. If compressed data without\nan embedded content size is seen, ``zstd.ZstdError`` will be raised.\n\nIf the compressed data doesn't have its content size embedded within it,\ndecompression can be attempted by specifying the ``max_output_size``\nargument.::\n\n    dctx = zstd.ZstdDecompressor()\n    uncompressed = dctx.decompress(data, max_output_size=1048576)\n\nIdeally, ``max_output_size`` will be identical to the decompressed output\nsize.\n\nIf ``max_output_size`` is too small to hold the decompressed data,\n``zstd.ZstdError`` will be raised.\n\nIf ``max_output_size`` is larger than the decompressed data, the allocated\noutput buffer will be resized to only use the space required.\n\nPlease note that an allocation of the requested ``max_output_size`` will be\nperformed every time the method is called. Setting to a very large value could\nresult in a lot of work for the memory allocator and may result in\n``MemoryError`` being raised if the allocation fails.\n\nIf the exact size of decompressed data is unknown, it is **strongly**\nrecommended to use a streaming API.\n\nStreaming Input API\n^^^^^^^^^^^^^^^^^^^\n\n``write_to(fh)`` can be used to incrementally send compressed data to a\ndecompressor.::\n\n    dctx = zstd.ZstdDecompressor()\n    with dctx.write_to(fh) as decompressor:\n        decompressor.write(compressed_data)\n\nThis behaves similarly to ``zstd.ZstdCompressor``: compressed data is written to\nthe decompressor by calling ``write(data)`` and decompressed output is written\nto the output object by calling its ``write(data)`` method.\n\nCalls to ``write()`` will return the number of bytes written to the output\nobject. Not all inputs will result in bytes being written, so return values\nof ``0`` are possible.\n\nThe size of chunks being ``write()`` to the destination can be specified::\n\n    dctx = zstd.ZstdDecompressor()\n    with dctx.write_to(fh, write_size=16384) as decompressor:\n        pass\n\nYou can see how much memory is being used by the decompressor::\n\n    dctx = zstd.ZstdDecompressor()\n    with dctx.write_to(fh) as decompressor:\n        byte_size = decompressor.memory_size()\n\nStreaming Output API\n^^^^^^^^^^^^^^^^^^^^\n\n``read_from(fh)`` provides a mechanism to stream decompressed data out of a\ncompressed source as an iterator of data chunks.:: \n\n    dctx = zstd.ZstdDecompressor()\n    for chunk in dctx.read_from(fh):\n        # Do something with original data.\n\n``read_from()`` accepts a) an object with a ``read(size)`` method that will\nreturn  compressed bytes b) an object conforming to the buffer protocol that\ncan expose its data as a contiguous range of bytes. The ``bytes`` and\n``memoryview`` types expose this buffer protocol.\n\n``read_from()`` returns an iterator whose elements are chunks of the\ndecompressed data.\n\nThe size of requested ``read()`` from the source can be specified::\n\n    dctx = zstd.ZstdDecompressor()\n    for chunk in dctx.read_from(fh, read_size=16384):\n        pass\n\nIt is also possible to skip leading bytes in the input data::\n\n    dctx = zstd.ZstdDecompressor()\n    for chunk in dctx.read_from(fh, skip_bytes=1):\n        pass\n\nSkipping leading bytes is useful if the source data contains extra\n*header* data but you want to avoid the overhead of making a buffer copy\nor allocating a new ``memoryview`` object in order to decompress the data.\n\nSimilarly to ``ZstdCompressor.read_from()``, the consumer of the iterator\ncontrols when data is decompressed. If the iterator isn't consumed,\ndecompression is put on hold.\n\nWhen ``read_from()`` is passed an object conforming to the buffer protocol,\nthe behavior may seem similar to what occurs when the simple decompression\nAPI is used. However, this API works when the decompressed size is unknown.\nFurthermore, if feeding large inputs, the decompressor will work in chunks\ninstead of performing a single operation.\n\nStream Copying API\n^^^^^^^^^^^^^^^^^^\n\n``copy_stream(ifh, ofh)`` can be used to copy data across 2 streams while\nperforming decompression.::\n\n    dctx = zstd.ZstdDecompressor()\n    dctx.copy_stream(ifh, ofh)\n\ne.g. to decompress a file to another file::\n\n    dctx = zstd.ZstdDecompressor()\n    with open(input_path, 'rb') as ifh, open(output_path, 'wb') as ofh:\n        dctx.copy_stream(ifh, ofh)\n\nThe size of chunks being ``read()`` and ``write()`` from and to the streams\ncan be specified::\n\n    dctx = zstd.ZstdDecompressor()\n    dctx.copy_stream(ifh, ofh, read_size=8192, write_size=16384)\n\nDecompressor API\n^^^^^^^^^^^^^^^^\n\n``decompressobj()`` returns an object that exposes a ``decompress(data)``\nmethods. Compressed data chunks are fed into ``decompress(data)`` and\nuncompressed output (or an empty bytes) is returned. Output from subsequent\ncalls needs to be concatenated to reassemble the full decompressed byte\nsequence.\n\nThe purpose of ``decompressobj()`` is to provide an API-compatible interface\nwith ``zlib.decompressobj`` and ``bz2.BZ2Decompressor``. This allows callers\nto swap in different decompressor objects while using the same API.\n\nEach object is single use: once an input frame is decoded, ``decompress()``\ncan no longer be called.\n\nHere is how this API should be used::\n\n   dctx = zstd.ZstdDeompressor()\n   dobj = cctx.decompressobj()\n   data = dobj.decompress(compressed_chunk_0)\n   data = dobj.decompress(compressed_chunk_1)\n\nBatch Decompression API\n^^^^^^^^^^^^^^^^^^^^^^^\n\n(Experimental. Not yet supported in CFFI bindings.)\n\n``multi_decompress_to_buffer()`` performs decompression of multiple\nframes as a single operation and returns a ``BufferWithSegmentsCollection``\ncontaining decompressed data for all inputs.\n\nCompressed frames can be passed to the function as a ``BufferWithSegments``,\na ``BufferWithSegmentsCollection``, or as a list containing objects that\nconform to the buffer protocol. For best performance, pass a\n``BufferWithSegmentsCollection`` or a ``BufferWithSegments``, as\nminimal input validation will be done for that type. If calling from\nPython (as opposed to C), constructing one of these instances may add\noverhead cancelling out the performance overhead of validation for list\ninputs.\n\nThe decompressed size of each frame must be discoverable. It can either be\nembedded within the zstd frame (``write_content_size=True`` argument to\n``ZstdCompressor``) or passed in via the ``decompressed_sizes`` argument.\n\nThe ``decompressed_sizes`` argument is an object conforming to the buffer\nprotocol which holds an array of 64-bit unsigned integers in the machine's\nnative format defining the decompressed sizes of each frame. If this argument\nis passed, it avoids having to scan each frame for its decompressed size.\nThis frame scanning can add noticeable overhead in some scenarios.\n\nThe ``threads`` argument controls the number of threads to use to perform\ndecompression operations. The default (``0``) or the value ``1`` means to\nuse a single thread. Negative values use the number of logical CPUs in the\nmachine.\n\n.. note::\n\n   It is possible to pass a ``mmap.mmap()`` instance into this function by\n   wrapping it with a ``BufferWithSegments`` instance (which will define the\n   offsets of frames within the memory mapped region).\n\nThis function is logically equivalent to performing ``dctx.decompress()``\non each input frame and returning the result.\n\nThis function exists to perform decompression on multiple frames as fast\nas possible by having as little overhead as possible. Since decompression is\nperformed as a single operation and since the decompressed output is stored in\na single buffer, extra memory allocations, Python objects, and Python function\ncalls are avoided. This is ideal for scenarios where callers need to access\ndecompressed data for multiple frames.\n\nCurrently, the implementation always spawns multiple threads when requested,\neven if the amount of work to do is small. In the future, it will be smarter\nabout avoiding threads and their associated overhead when the amount of\nwork to do is small.\n\nContent-Only Dictionary Chain Decompression\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``decompress_content_dict_chain(frames)`` performs decompression of a list of\nzstd frames produced using chained *content-only* dictionary compression. Such\na list of frames is produced by compressing discrete inputs where each\nnon-initial input is compressed with a *content-only* dictionary consisting\nof the content of the previous input.\n\nFor example, say you have the following inputs::\n\n   inputs = [b'input 1', b'input 2', b'input 3']\n\nThe zstd frame chain consists of:\n\n1. ``b'input 1'`` compressed in standalone/discrete mode\n2. ``b'input 2'`` compressed using ``b'input 1'`` as a *content-only* dictionary\n3. ``b'input 3'`` compressed using ``b'input 2'`` as a *content-only* dictionary\n\nEach zstd frame **must** have the content size written.\n\nThe following Python code can be used to produce a *content-only dictionary\nchain*::\n\n    def make_chain(inputs):\n        frames = []\n\n        # First frame is compressed in standalone/discrete mode.\n        zctx = zstd.ZstdCompressor(write_content_size=True)\n        frames.append(zctx.compress(inputs[0]))\n\n        # Subsequent frames use the previous fulltext as a content-only dictionary\n        for i, raw in enumerate(inputs[1:]):\n            dict_data = zstd.ZstdCompressionDict(inputs[i])\n            zctx = zstd.ZstdCompressor(write_content_size=True, dict_data=dict_data)\n            frames.append(zctx.compress(raw))\n\n        return frames\n\n``decompress_content_dict_chain()`` returns the uncompressed data of the last\nelement in the input chain.\n\nIt is possible to implement *content-only dictionary chain* decompression\non top of other Python APIs. However, this function will likely be significantly\nfaster, especially for long input chains, as it avoids the overhead of\ninstantiating and passing around intermediate objects between C and Python.\n\nMulti-Threaded Compression\n--------------------------\n\n``ZstdCompressor`` accepts a ``threads`` argument that controls the number\nof threads to use for compression. The way this works is that input is split\ninto segments and each segment is fed into a worker pool for compression. Once\na segment is compressed, it is flushed/appended to the output.\n\nThe segment size for multi-threaded compression is chosen from the window size\nof the compressor. This is derived from the ``window_log`` attribute of a\n``CompressionParameters`` instance. By default, segment sizes are in the 1+MB\nrange.\n\nIf multi-threaded compression is requested and the input is smaller than the\nconfigured segment size, only a single compression thread will be used. If the\ninput is smaller than the segment size multiplied by the thread pool size or\nif data cannot be delivered to the compressor fast enough, not all requested\ncompressor threads may be active simultaneously.\n\nCompared to non-multi-threaded compression, multi-threaded compression has\nhigher per-operation overhead. This includes extra memory operations,\nthread creation, lock acquisition, etc.\n\nDue to the nature of multi-threaded compression using *N* compression\n*states*, the output from multi-threaded compression will likely be larger\nthan non-multi-threaded compression. The difference is usually small. But\nthere is a CPU/wall time versus size trade off that may warrant investigation.\n\nOutput from multi-threaded compression does not require any special handling\non the decompression side. In other words, any zstd decompressor should be able\nto consume data produced with multi-threaded compression.\n\nDictionary Creation and Management\n----------------------------------\n\nCompression dictionaries are represented as the ``ZstdCompressionDict`` type.\n\nInstances can be constructed from bytes::\n\n   dict_data = zstd.ZstdCompressionDict(data)\n\nIt is possible to construct a dictionary from *any* data. Unless the\ndata begins with a magic header, the dictionary will be treated as\n*content-only*. *Content-only* dictionaries allow compression operations\nthat follow to reference raw data within the content. For one use of\n*content-only* dictionaries, see\n``ZstdDecompressor.decompress_content_dict_chain()``.\n\nMore interestingly, instances can be created by *training* on sample data::\n\n   dict_data = zstd.train_dictionary(size, samples)\n\nThis takes a list of bytes instances and creates and returns a\n``ZstdCompressionDict``.\n\nYou can see how many bytes are in the dictionary by calling ``len()``::\n\n   dict_data = zstd.train_dictionary(size, samples)\n   dict_size = len(dict_data)  # will not be larger than ``size``\n\nOnce you have a dictionary, you can pass it to the objects performing\ncompression and decompression::\n\n   dict_data = zstd.train_dictionary(16384, samples)\n\n   cctx = zstd.ZstdCompressor(dict_data=dict_data)\n   for source_data in input_data:\n       compressed = cctx.compress(source_data)\n       # Do something with compressed data.\n\n   dctx = zstd.ZstdDecompressor(dict_data=dict_data)\n   for compressed_data in input_data:\n       buffer = io.BytesIO()\n       with dctx.write_to(buffer) as decompressor:\n           decompressor.write(compressed_data)\n       # Do something with raw data in ``buffer``.\n\nDictionaries have unique integer IDs. You can retrieve this ID via::\n\n   dict_id = zstd.dictionary_id(dict_data)\n\nYou can obtain the raw data in the dict (useful for persisting and constructing\na ``ZstdCompressionDict`` later) via ``as_bytes()``::\n\n   dict_data = zstd.train_dictionary(size, samples)\n   raw_data = dict_data.as_bytes()\n\nThe following named arguments to ``train_dictionary`` can also be used\nto further control dictionary generation.\n\nselectivity\n   Integer selectivity level. Default is 9. Larger values yield more data in\n   dictionary.\nlevel\n   Integer compression level. Default is 6.\ndict_id\n   Integer dictionary ID for the produced dictionary. Default is 0, which\n   means to use a random value.\nnotifications\n   Controls writing of informational messages to ``stderr``. ``0`` (the\n   default) means to write nothing. ``1`` writes errors. ``2`` writes\n   progression info. ``3`` writes more details. And ``4`` writes all info.\n\nCover Dictionaries\n^^^^^^^^^^^^^^^^^^\n\nAn alternate dictionary training mechanism named *cover* is also available.\nMore details about this training mechanism are available in the paper\n*Effective Construction of Relative Lempel-Ziv Dictionaries* (authors:\nLiao, Petri, Moffat, Wirth).\n\nTo use this mechanism, use ``zstd.train_cover_dictionary()`` instead of\n``zstd.train_dictionary()``. The function behaves nearly the same except\nits arguments are different and the returned dictionary will contain ``k``\nand ``d`` attributes reflecting the parameters to the cover algorithm.\n\n.. note::\n\n   The ``k`` and ``d`` attributes are only populated on dictionary\n   instances created by this function. If a ``ZstdCompressionDict`` is\n   constructed from raw bytes data, the ``k`` and ``d`` attributes will\n   be ``0``.\n\nThe segment and dmer size parameters to the cover algorithm can either be\nspecified manually or you can ask ``train_cover_dictionary()`` to try\nmultiple values and pick the best one, where *best* means the smallest\ncompressed data size.\n\nIn manual mode, the ``k`` and ``d`` arguments must be specified or a\n``ZstdError`` will be raised.\n\nIn automatic mode (triggered by specifying ``optimize=True``), ``k``\nand ``d`` are optional. If a value isn't specified, then default values for\nboth are tested.  The ``steps`` argument can control the number of steps\nthrough ``k`` values. The ``level`` argument defines the compression level\nthat will be used when testing the compressed size. And ``threads`` can\nspecify the number of threads to use for concurrent operation.\n\nThis function takes the following arguments:\n\ndict_size\n   Target size in bytes of the dictionary to generate.\nsamples\n   A list of bytes holding samples the dictionary will be trained from.\nk\n   Parameter to cover algorithm defining the segment size. A reasonable range\n   is [16, 2048+].\nd\n   Parameter to cover algorithm defining the dmer size. A reasonable range is\n   [6, 16]. ``d`` must be less than or equal to ``k``.\ndict_id\n   Integer dictionary ID for the produced dictionary. Default is 0, which uses\n   a random value.\noptimize\n   When true, test dictionary generation with multiple parameters.\nlevel\n   Integer target compression level when testing compression with\n   ``optimize=True``. Default is 1.\nsteps\n   Number of steps through ``k`` values to perform when ``optimize=True``.\n   Default is 32.\nthreads\n   Number of threads to use when ``optimize=True``. Default is 0, which means\n   to use a single thread. A negative value can be specified to use as many\n   threads as there are detected logical CPUs.\nnotifications\n   Controls writing of informational messages to ``stderr``. See the\n   documentation for ``train_dictionary()`` for more.\n\nExplicit Compression Parameters\n-------------------------------\n\nZstandard's integer compression levels along with the input size and dictionary\nsize are converted into a data structure defining multiple parameters to tune\nbehavior of the compression algorithm. It is possible to use define this\ndata structure explicitly to have lower-level control over compression behavior.\n\nThe ``zstd.CompressionParameters`` type represents this data structure.\nYou can see how Zstandard converts compression levels to this data structure\nby calling ``zstd.get_compression_parameters()``. e.g.::\n\n    params = zstd.get_compression_parameters(5)\n\nThis function also accepts the uncompressed data size and dictionary size\nto adjust parameters::\n\n    params = zstd.get_compression_parameters(3, source_size=len(data), dict_size=len(dict_data))\n\nYou can also construct compression parameters from their low-level components::\n\n    params = zstd.CompressionParameters(20, 6, 12, 5, 4, 10, zstd.STRATEGY_FAST)\n\nYou can then configure a compressor to use the custom parameters::\n\n    cctx = zstd.ZstdCompressor(compression_params=params)\n\nThe members/attributes of ``CompressionParameters`` instances are as follows::\n\n* window_log\n* chain_log\n* hash_log\n* search_log\n* search_length\n* target_length\n* strategy\n\nThis is the order the arguments are passed to the constructor if not using\nnamed arguments.\n\nYou'll need to read the Zstandard documentation for what these parameters\ndo.\n\nFrame Inspection\n----------------\n\nData emitted from zstd compression is encapsulated in a *frame*. This frame\nbegins with a 4 byte *magic number* header followed by 2 to 14 bytes describing\nthe frame in more detail. For more info, see\nhttps://github.com/facebook/zstd/blob/master/doc/zstd_compression_format.md.\n\n``zstd.get_frame_parameters(data)`` parses a zstd *frame* header from a bytes\ninstance and return a ``FrameParameters`` object describing the frame.\n\nDepending on which fields are present in the frame and their values, the\nlength of the frame parameters varies. If insufficient bytes are passed\nin to fully parse the frame parameters, ``ZstdError`` is raised. To ensure\nframe parameters can be parsed, pass in at least 18 bytes.\n\n``FrameParameters`` instances have the following attributes:\n\ncontent_size\n   Integer size of original, uncompressed content. This will be ``0`` if the\n   original content size isn't written to the frame (controlled with the\n   ``write_content_size`` argument to ``ZstdCompressor``) or if the input\n   content size was ``0``.\n\nwindow_size\n   Integer size of maximum back-reference distance in compressed data.\n\ndict_id\n   Integer of dictionary ID used for compression. ``0`` if no dictionary\n   ID was used or if the dictionary ID was ``0``.\n\nhas_checksum\n   Bool indicating whether a 4 byte content checksum is stored at the end\n   of the frame.\n\nMisc Functionality\n------------------\n\nestimate_compression_context_size(CompressionParameters)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nGiven a ``CompressionParameters`` struct, estimate the memory size required\nto perform compression.\n\nestimate_decompression_context_size()\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nEstimate the memory size requirements for a decompressor instance.\n\nConstants\n---------\n\nThe following module constants/attributes are exposed:\n\nZSTD_VERSION\n    This module attribute exposes a 3-tuple of the Zstandard version. e.g.\n    ``(1, 0, 0)``\nMAX_COMPRESSION_LEVEL\n    Integer max compression level accepted by compression functions\nCOMPRESSION_RECOMMENDED_INPUT_SIZE\n    Recommended chunk size to feed to compressor functions\nCOMPRESSION_RECOMMENDED_OUTPUT_SIZE\n    Recommended chunk size for compression output\nDECOMPRESSION_RECOMMENDED_INPUT_SIZE\n    Recommended chunk size to feed into decompresor functions\nDECOMPRESSION_RECOMMENDED_OUTPUT_SIZE\n    Recommended chunk size for decompression output\n\nFRAME_HEADER\n    bytes containing header of the Zstandard frame\nMAGIC_NUMBER\n    Frame header as an integer\n\nWINDOWLOG_MIN\n    Minimum value for compression parameter\nWINDOWLOG_MAX\n    Maximum value for compression parameter\nCHAINLOG_MIN\n    Minimum value for compression parameter\nCHAINLOG_MAX\n    Maximum value for compression parameter\nHASHLOG_MIN\n    Minimum value for compression parameter\nHASHLOG_MAX\n    Maximum value for compression parameter\nSEARCHLOG_MIN\n    Minimum value for compression parameter\nSEARCHLOG_MAX\n    Maximum value for compression parameter\nSEARCHLENGTH_MIN\n    Minimum value for compression parameter\nSEARCHLENGTH_MAX\n    Maximum value for compression parameter\nTARGETLENGTH_MIN\n    Minimum value for compression parameter\nTARGETLENGTH_MAX\n    Maximum value for compression parameter\nSTRATEGY_FAST\n    Compression strategy\nSTRATEGY_DFAST\n    Compression strategy\nSTRATEGY_GREEDY\n    Compression strategy\nSTRATEGY_LAZY\n    Compression strategy\nSTRATEGY_LAZY2\n    Compression strategy\nSTRATEGY_BTLAZY2\n    Compression strategy\nSTRATEGY_BTOPT\n    Compression strategy\n\nPerformance Considerations\n--------------------------\n\nThe ``ZstdCompressor`` and ``ZstdDecompressor`` types maintain state to a\npersistent compression or decompression *context*. Reusing a ``ZstdCompressor``\nor ``ZstdDecompressor`` instance for multiple operations is faster than\ninstantiating a new ``ZstdCompressor`` or ``ZstdDecompressor`` for each\noperation. The differences are magnified as the size of data decreases. For\nexample, the difference between *context* reuse and non-reuse for 100,000\n100 byte inputs will be significant (possiby over 10x faster to reuse contexts)\nwhereas 10 1,000,000 byte inputs will be more similar in speed (because the\ntime spent doing compression dwarfs time spent creating new *contexts*).\n\nBuffer Types\n------------\n\nThe API exposes a handful of custom types for interfacing with memory buffers.\nThe primary goal of these types is to facilitate efficient multi-object\noperations.\n\nThe essential idea is to have a single memory allocation provide backing\nstorage for multiple logical objects. This has 2 main advantages: fewer\nallocations and optimal memory access patterns. This avoids having to allocate\na Python object for each logical object and furthermore ensures that access of\ndata for objects can be sequential (read: fast) in memory.\n\nBufferWithSegments\n^^^^^^^^^^^^^^^^^^\n\nThe ``BufferWithSegments`` type represents a memory buffer containing N\ndiscrete items of known lengths (segments). It is essentially a fixed size\nmemory address and an array of 2-tuples of ``(offset, length)`` 64-bit\nunsigned native endian integers defining the byte offset and length of each\nsegment within the buffer.\n\nInstances behave like containers.\n\n``len()`` returns the number of segments within the instance.\n\n``o[index]`` or ``__getitem__`` obtains a ``BufferSegment`` representing an\nindividual segment within the backing buffer. That returned object references\n(not copies) memory. This means that iterating all objects doesn't copy\ndata within the buffer.\n\nThe ``.size`` attribute contains the total size in bytes of the backing\nbuffer.\n\nInstances conform to the buffer protocol. So a reference to the backing bytes\ncan be obtained via ``memoryview(o)``. A *copy* of the backing bytes can also\nbe obtained via ``.tobytes()``.\n\nThe ``.segments`` attribute exposes the array of ``(offset, length)`` for\nsegments within the buffer. It is a ``BufferSegments`` type.\n\nBufferSegment\n^^^^^^^^^^^^^\n\nThe ``BufferSegment`` type represents a segment within a ``BufferWithSegments``.\nIt is essentially a reference to N bytes within a ``BufferWithSegments``.\n\n``len()`` returns the length of the segment in bytes.\n\n``.offset`` contains the byte offset of this segment within its parent\n``BufferWithSegments`` instance.\n\nThe object conforms to the buffer protocol. ``.tobytes()`` can be called to\nobtain a ``bytes`` instance with a copy of the backing bytes.\n\nBufferSegments\n^^^^^^^^^^^^^^\n\nThis type represents an array of ``(offset, length)`` integers defining segments\nwithin a ``BufferWithSegments``.\n\nThe array members are 64-bit unsigned integers using host/native bit order.\n\nInstances conform to the buffer protocol.\n\nBufferWithSegmentsCollection\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``BufferWithSegmentsCollection`` type represents a virtual spanning view\nof multiple ``BufferWithSegments`` instances.\n\nInstances are constructed from 1 or more ``BufferWithSegments`` instances. The\nresulting object behaves like an ordered sequence whose members are the\nsegments within each ``BufferWithSegments``.\n\n``len()`` returns the number of segments within all ``BufferWithSegments``\ninstances.\n\n``o[index]`` and ``__getitem__(index)`` return the ``BufferSegment`` at\nthat offset as if all ``BufferWithSegments`` instances were a single\nentity.\n\nIf the object is composed of 2 ``BufferWithSegments`` instances with the\nfirst having 2 segments and the second have 3 segments, then ``b[0]``\nand ``b[1]`` access segments in the first object and ``b[2]``, ``b[3]``,\nand ``b[4]`` access segments from the second.\n\nChoosing an API\n===============\n\nThere are multiple APIs for performing compression and decompression. This is\nbecause different applications have different needs and the library wants to\nfacilitate optimal use in as many use cases as possible.\n\nFrom a high-level, APIs are divided into *one-shot* and *streaming*. See\nthe ``Concepts`` section for a description of how these are different at\nthe C layer.\n\nThe *one-shot* APIs are useful for small data, where the input or output\nsize is known. (The size can come from a buffer length, file size, or\nstored in the zstd frame header.) A limitation of the *one-shot* APIs is that\ninput and output must fit in memory simultaneously. For say a 4 GB input,\nthis is often not feasible.\n\nThe *one-shot* APIs also perform all work as a single operation. So, if you\nfeed it large input, it could take a long time for the function to return.\n\nThe streaming APIs do not have the limitations of the simple API. But the\nprice you pay for this flexibility is that they are more complex than a\nsingle function call.\n\nThe streaming APIs put the caller in control of compression and decompression\nbehavior by allowing them to directly control either the input or output side\nof the operation.\n\nWith the *streaming input*, *compressor*, and *decompressor* APIs, the caller\nhas full control over the input to the compression or decompression stream.\nThey can directly choose when new data is operated on.\n\nWith the *streaming ouput* APIs, the caller has full control over the output\nof the compression or decompression stream. It can choose when to receive\nnew data.\n\nWhen using the *streaming* APIs that operate on file-like or stream objects,\nit is important to consider what happens in that object when I/O is requested.\nThere is potential for long pauses as data is read or written from the\nunderlying stream (say from interacting with a filesystem or network). This\ncould add considerable overhead.\n\nConcepts\n========\n\nIt is important to have a basic understanding of how Zstandard works in order\nto optimally use this library. In addition, there are some low-level Python\nconcepts that are worth explaining to aid understanding. This section aims to\nprovide that knowledge.\n\nZstandard Frames and Compression Format\n---------------------------------------\n\nCompressed zstandard data almost always exists within a container called a\n*frame*. (For the technically curious, see the\n`specification <https://github.com/facebook/zstd/blob/3bee41a70eaf343fbcae3637b3f6edbe52f35ed8/doc/zstd_compression_format.md>_.)\n\nThe frame contains a header and optional trailer. The header contains a\nmagic number to self-identify as a zstd frame and a description of the\ncompressed data that follows.\n\nAmong other things, the frame *optionally* contains the size of the\ndecompressed data the frame represents, a 32-bit checksum of the\ndecompressed data (to facilitate verification during decompression),\nand the ID of the dictionary used to compress the data.\n\nStoring the original content size in the frame (``write_content_size=True``\nto ``ZstdCompressor``) is important for performance in some scenarios. Having\nthe decompressed size stored there (or storing it elsewhere) allows\ndecompression to perform a single memory allocation that is exactly sized to\nthe output. This is faster than continuously growing a memory buffer to hold\noutput.\n\nCompression and Decompression Contexts\n--------------------------------------\n\nIn order to perform a compression or decompression operation with the zstd\nC API, you need what's called a *context*. A context essentially holds\nconfiguration and state for a compression or decompression operation. For\nexample, a compression context holds the configured compression level.\n\nContexts can be reused for multiple operations. Since creating and\ndestroying contexts is not free, there are performance advantages to\nreusing contexts.\n\nThe ``ZstdCompressor`` and ``ZstdDecompressor`` types are essentially\nwrappers around these contexts in the zstd C API.\n\nOne-shot And Streaming Operations\n---------------------------------\n\nA compression or decompression operation can either be performed as a\nsingle *one-shot* operation or as a continuous *streaming* operation.\n\nIn one-shot mode (the *simple* APIs provided by the Python interface),\n**all** input is handed to the compressor or decompressor as a single buffer\nand **all** output is returned as a single buffer.\n\nIn streaming mode, input is delivered to the compressor or decompressor as\na series of chunks via multiple function calls. Likewise, output is\nobtained in chunks as well.\n\nStreaming operations require an additional *stream* object to be created\nto track the operation. These are logical extensions of *context*\ninstances.\n\nThere are advantages and disadvantages to each mode of operation. There\nare scenarios where certain modes can't be used. See the\n``Choosing an API`` section for more.\n\nDictionaries\n------------\n\nA compression *dictionary* is essentially data used to seed the compressor\nstate so it can achieve better compression. The idea is that if you are\ncompressing a lot of similar pieces of data (e.g. JSON documents or anything\nsharing similar structure), then you can find common patterns across multiple\nobjects then leverage those common patterns during compression and\ndecompression operations to achieve better compression ratios.\n\nDictionary compression is generally only useful for small inputs - data no\nlarger than a few kilobytes. The upper bound on this range is highly dependent\non the input data and the dictionary.\n\nPython Buffer Protocol\n----------------------\n\nMany functions in the library operate on objects that implement Python's\n`buffer protocol <https://docs.python.org/3.6/c-api/buffer.html>`_.\n\nThe *buffer protocol* is an internal implementation detail of a Python\ntype that allows instances of that type (objects) to be exposed as a raw\npointer (or buffer) in the C API. In other words, it allows objects to be\nexposed as an array of bytes.\n\nFrom the perspective of the C API, objects implementing the *buffer protocol*\nall look the same: they are just a pointer to a memory address of a defined\nlength. This allows the C API to be largely type agnostic when accessing their\ndata. This allows custom types to be passed in without first converting them\nto a specific type.\n\nMany Python types implement the buffer protocol. These include ``bytes``\n(``str`` on Python 2), ``bytearray``, ``array.array``, ``io.BytesIO``,\n``mmap.mmap``, and ``memoryview``.\n\n``python-zstandard`` APIs that accept objects conforming to the buffer\nprotocol require that the buffer is *C contiguous* and has a single\ndimension (``ndim==1``). This is usually the case. An example of where it\nis not is a Numpy matrix type.\n\nRequiring Output Sizes for Non-Streaming Decompression APIs\n-----------------------------------------------------------\n\nNon-streaming decompression APIs require that either the output size is\nexplicitly defined (either in the zstd frame header or passed into the\nfunction) or that a max output size is specified. This restriction is for\nyour safety.\n\nThe *one-shot* decompression APIs store the decompressed result in a\nsingle buffer. This means that a buffer needs to be pre-allocated to hold\nthe result. If the decompressed size is not known, then there is no universal\ngood default size to use. Any default will fail or will be highly sub-optimal\nin some scenarios (it will either be too small or will put stress on the\nmemory allocator to allocate a too large block).\n\nA *helpful* API may retry decompression with buffers of increasing size.\nWhile useful, there are obvious performance disadvantages, namely redoing\ndecompression N times until it works. In addition, there is a security\nconcern. Say the input came from highly compressible data, like 1 GB of the\nsame byte value. The output size could be several magnitudes larger than the\ninput size. An input of <100KB could decompress to >1GB. Without a bounds\nrestriction on the decompressed size, certain inputs could exhaust all system\nmemory. That's not good and is why the maximum output size is limited.\n\nNote on Zstandard's *Experimental* API\n======================================\n\nMany of the Zstandard APIs used by this module are marked as *experimental*\nwithin the Zstandard project. This includes a large number of useful\nfeatures, such as compression and frame parameters and parts of dictionary\ncompression.\n\nIt is unclear how Zstandard's C API will evolve over time, especially with\nregards to this *experimental* functionality. We will try to maintain\nbackwards compatibility at the Python API level. However, we cannot\nguarantee this for things not under our control.\n\nSince a copy of the Zstandard source code is distributed with this\nmodule and since we compile against it, the behavior of a specific\nversion of this module should be constant for all of time. So if you\npin the version of this module used in your projects (which is a Python\nbest practice), you should be buffered from unwanted future changes.\n\nDonate\n======\n\nA lot of time has been invested into this project by the author.\n\nIf you find this project useful and would like to thank the author for\ntheir work, consider donating some money. Any amount is appreciated.\n\n.. image:: https://www.paypalobjects.com/en_US/i/btn/btn_donate_LG.gif\n    :target: https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=gregory%2eszorc%40gmail%2ecom&lc=US&item_name=python%2dzstandard&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donate_LG%2egif%3aNonHosted\n    :alt: Donate via PayPal\n\n.. |ci-status| image:: https://travis-ci.org/indygreg/python-zstandard.svg?branch=master\n    :target: https://travis-ci.org/indygreg/python-zstandard\n\n.. |win-ci-status| image:: https://ci.appveyor.com/api/projects/status/github/indygreg/python-zstandard?svg=true\n    :target: https://ci.appveyor.com/project/indygreg/python-zstandard\n    :alt: Windows build status",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/indygreg/python-zstandard",
    "keywords": "zstandard zstd compression",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "zstandard",
    "platform": "",
    "project_url": "https://pypi.org/project/zstandard/",
    "release_url": "https://pypi.org/project/zstandard/0.8.1/",
    "requires_python": "",
    "summary": "Zstandard bindings for Python",
    "version": "0.8.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "644792fff7553afbed3f4c46652b2ab6",
          "sha256": "ec429d1e13b5dd76bad156183f5faccde1780bc8fed54ba6cdd54eb930ef07ee"
        },
        "downloads": 99,
        "filename": "zstandard-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "644792fff7553afbed3f4c46652b2ab6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 108852,
        "upload_time": "2016-09-03T20:28:57",
        "url": "https://files.pythonhosted.org/packages/f2/97/6bf4040ca010a3dbd8484556507793aab7c59f3c6dc1db0dc1ea86180933/zstandard-0.0.1.tar.gz"
      }
    ],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b60bae1170ac181d04cd497ab4d9fc8e",
          "sha256": "c3e634e2687d98d28c98b1e672a0ff24f0a82434ef0c234929a9b26a5d1cbedd"
        },
        "downloads": 118,
        "filename": "zstandard-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b60bae1170ac181d04cd497ab4d9fc8e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 151385,
        "upload_time": "2016-09-05T18:17:25",
        "url": "https://files.pythonhosted.org/packages/53/20/69a33f56b545a4266516daedd183da0c23fa9ff3b7d360634c8d19dd4f65/zstandard-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0069137c897483cdd2afa445f9051059",
          "sha256": "b9468de9016fbfdc420a5b93a5c846a7a0a9c44e888625551b03814bea914a98"
        },
        "downloads": 146,
        "filename": "zstandard-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0069137c897483cdd2afa445f9051059",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 153588,
        "upload_time": "2016-09-06T02:39:26",
        "url": "https://files.pythonhosted.org/packages/d3/63/f4b0a5c85f9928ca46e63835a8b7dcf6f111db3cbfe76519dbd9bf359f22/zstandard-0.2.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f33176ef737dd5cf65ddfc81ac97064c",
          "sha256": "0b0266d4b903e09e1b1293bf6321db1b0c3effdf39cef329b95ec51060f73d6c"
        },
        "downloads": 95,
        "filename": "zstandard-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f33176ef737dd5cf65ddfc81ac97064c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 153670,
        "upload_time": "2016-09-06T04:33:41",
        "url": "https://files.pythonhosted.org/packages/b5/3f/9241d6affa731398738ba61469fae646a2b6943a06da9b0c8137a26c94fe/zstandard-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7540fb8c05b08600a03035301c7aa07c",
          "sha256": "9904e9e7f79fd9c18b6cbe6a83e1b0a6a5e89332501bd17972f09c49c4862aa8"
        },
        "downloads": 96,
        "filename": "zstandard-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7540fb8c05b08600a03035301c7aa07c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154750,
        "upload_time": "2016-09-06T04:45:25",
        "url": "https://files.pythonhosted.org/packages/84/9f/8dbd1040e7556401793255acc944ddd5b92a415290ce96f360c4bf6265ed/zstandard-0.2.2.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eb4047941bd6a8e8c47158aadebd8d08",
          "sha256": "f41786932c6f1f20a56a7ceee91eac020a3bcc5940bcac31dec810a0358c320c"
        },
        "downloads": 291,
        "filename": "zstandard-0.3.0-cp35-cp35m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "eb4047941bd6a8e8c47158aadebd8d08",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 122931,
        "upload_time": "2016-09-11T06:37:41",
        "url": "https://files.pythonhosted.org/packages/12/87/f6c78839a4ee64825f90003d551847aad1c11a9459aa8947ad84b5751935/zstandard-0.3.0-cp35-cp35m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e7bc8288381e80330e3f9988e819fee3",
          "sha256": "c43a133b756a6e087e56b5c7d3192d4df28eb17e3e59acec812cbb8dee9f73a3"
        },
        "downloads": 295,
        "filename": "zstandard-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e7bc8288381e80330e3f9988e819fee3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 164681,
        "upload_time": "2016-09-11T06:23:56",
        "url": "https://files.pythonhosted.org/packages/7b/41/8b4f2b7122c3ef6d3c7614a1f9af20397813c04122292b0996512918c905/zstandard-0.3.0.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "767cb03ee9513cac05db26482c60cf85",
          "sha256": "f4f51a7327d745193558b54dc26992ab82a9ca81a58b803da413b715c58be335"
        },
        "downloads": 309,
        "filename": "zstandard-0.3.1-cp26-cp26m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "767cb03ee9513cac05db26482c60cf85",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 234015,
        "upload_time": "2016-09-12T02:53:53",
        "url": "https://files.pythonhosted.org/packages/66/df/489a3a1d391e2e0863bca4db94096f4a9ea44098e3c61fbb7b8bd3f63ccd/zstandard-0.3.1-cp26-cp26m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2e6795f5554977aaf7a2dd925a9e7294",
          "sha256": "fb56707c4c06da5eeb93827b1ec616720f23f4c2f3c23f242fc6130f6a0913ce"
        },
        "downloads": 238,
        "filename": "zstandard-0.3.1-cp27-cp27m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "2e6795f5554977aaf7a2dd925a9e7294",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 233468,
        "upload_time": "2016-09-12T02:56:15",
        "url": "https://files.pythonhosted.org/packages/6d/56/8fc3b0d4288b24c5d47170c0dfe8fcedb0a19cd4c4470d396d699bb10885/zstandard-0.3.1-cp27-cp27m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9d1fa8771b63ae6ad6893e3a4d3c2672",
          "sha256": "c4585ee541d3e3a3adfd7e0d4e6c650d8d62bdc913c551305e409758b38708fc"
        },
        "downloads": 243,
        "filename": "zstandard-0.3.1-cp33-cp33m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "9d1fa8771b63ae6ad6893e3a4d3c2672",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 239874,
        "upload_time": "2016-09-12T02:56:18",
        "url": "https://files.pythonhosted.org/packages/46/01/65def39eb0fcdcdbf5db44d9c57459a9a77f2a32f19e069634145befe078/zstandard-0.3.1-cp33-cp33m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3496d77efc602588f0dcc5c6a819f126",
          "sha256": "96f92d8f84ace7e225bf76c687a257ed8f4bb821c90219b316561f61ff451a0d"
        },
        "downloads": 234,
        "filename": "zstandard-0.3.1-cp34-cp34m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "3496d77efc602588f0dcc5c6a819f126",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 239882,
        "upload_time": "2016-09-12T02:56:20",
        "url": "https://files.pythonhosted.org/packages/e6/17/4dc6e5c6ddc752997b3bf9f0b83208ba6fd6a0f4ef6b5b4a4bd2248e77c4/zstandard-0.3.1-cp34-cp34m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9c3badd8788749148b58ca125bd997ba",
          "sha256": "200d45a6d87d1d957ce86cf31a108813e4c660880adcebf59d12616468b9c79b"
        },
        "downloads": 237,
        "filename": "zstandard-0.3.1-cp35-cp35m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "9c3badd8788749148b58ca125bd997ba",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 220411,
        "upload_time": "2016-09-12T02:56:23",
        "url": "https://files.pythonhosted.org/packages/6c/dc/16b72d485197bfae63d5ab3cd2a1d91e7f4e1470a172e880c7dd9336ac2c/zstandard-0.3.1-cp35-cp35m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6c7be0853bae1e8c26908b34cc2e0a8f",
          "sha256": "861dc645cc961ef5357426a88a6065dc9b4a28d87da77537cae4da84d84bc1e4"
        },
        "downloads": 243,
        "filename": "zstandard-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6c7be0853bae1e8c26908b34cc2e0a8f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 167910,
        "upload_time": "2016-09-12T02:53:00",
        "url": "https://files.pythonhosted.org/packages/37/60/80da89c220dd66b3cad3e48458c42f249efc573f2e759bcc236a3d6f833d/zstandard-0.3.1.tar.gz"
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "12b107f87379642148b481a23af77831",
          "sha256": "5b5374f2dc94968f99be0caeae4f3315d844fe34066855a1020d312a5fe75eab"
        },
        "downloads": 238,
        "filename": "zstandard-0.3.2-cp26-cp26m-win32.whl",
        "has_sig": false,
        "md5_digest": "12b107f87379642148b481a23af77831",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 203318,
        "upload_time": "2016-09-12T03:57:43",
        "url": "https://files.pythonhosted.org/packages/f1/d1/e1b348c09218dad49d243d2619036e708cb4497e89096d6e64bdbcffa9f4/zstandard-0.3.2-cp26-cp26m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8a29c42a8969bb8d787beaa736424251",
          "sha256": "eef0738d9fe10c2bb084468a55f7eaffd29055d1c7adc96ed8f0e36281c7c65e"
        },
        "downloads": 229,
        "filename": "zstandard-0.3.2-cp26-cp26m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "8a29c42a8969bb8d787beaa736424251",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 233979,
        "upload_time": "2016-09-12T03:57:46",
        "url": "https://files.pythonhosted.org/packages/6c/f8/6af395333131e500f548f7a64e3c074f16bc17a14c80b2620dbc8c147bf6/zstandard-0.3.2-cp26-cp26m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "7d5e4bde8487e04bfbfc323765b4bc03",
          "sha256": "b0f3f2072e9f5960247a2d49c4f48b3c3b76d0edba830455d4771c01a930f722"
        },
        "downloads": 238,
        "filename": "zstandard-0.3.2-cp27-cp27m-win32.whl",
        "has_sig": false,
        "md5_digest": "7d5e4bde8487e04bfbfc323765b4bc03",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 202848,
        "upload_time": "2016-09-12T03:57:48",
        "url": "https://files.pythonhosted.org/packages/91/68/63038d017e6c3378d59065f14294392a53583bc4e0f0c3d3176195670ce4/zstandard-0.3.2-cp27-cp27m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6aaa35206908a29e76e52b9f65e89bcb",
          "sha256": "4784f4db8d4bed0015d57412035f7cf9b685d636b1d11619bed696164f94e18c"
        },
        "downloads": 229,
        "filename": "zstandard-0.3.2-cp27-cp27m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "6aaa35206908a29e76e52b9f65e89bcb",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 233433,
        "upload_time": "2016-09-12T03:57:51",
        "url": "https://files.pythonhosted.org/packages/7e/11/0152eb69ca11d6379128b0c571a31f5a0daaac25a263c579f51717aa3840/zstandard-0.3.2-cp27-cp27m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4264835f2f53b3e1272eca698109ab29",
          "sha256": "c94b5366e0ee676f81ab58ae8bfc227b59671edead1cbaa45470e88add87f179"
        },
        "downloads": 229,
        "filename": "zstandard-0.3.2-cp33-cp33m-win32.whl",
        "has_sig": false,
        "md5_digest": "4264835f2f53b3e1272eca698109ab29",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 205492,
        "upload_time": "2016-09-12T03:57:53",
        "url": "https://files.pythonhosted.org/packages/ba/6e/e68415a32979a1aa0402c6b2f9f610e6758a3900300765ea7d02118784e1/zstandard-0.3.2-cp33-cp33m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "35d2302aa93df900b67769c533c07839",
          "sha256": "579b9202d1b2e9af8ccf9cd77938564ec1eec8c3ce580a9bbbbf59961766ba3a"
        },
        "downloads": 229,
        "filename": "zstandard-0.3.2-cp33-cp33m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "35d2302aa93df900b67769c533c07839",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 239839,
        "upload_time": "2016-09-12T03:57:56",
        "url": "https://files.pythonhosted.org/packages/75/53/b1a75c9ef884acd018ddb91b1fbea6700b9048528916ed61fcd6d884d96d/zstandard-0.3.2-cp33-cp33m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c22c3579673bfcd733a13e1e95677aea",
          "sha256": "d522063da77bf133e9c21b14bae1c32b2aeac0472e04f2bc0f3dfab8a1acdade"
        },
        "downloads": 221,
        "filename": "zstandard-0.3.2-cp34-cp34m-win32.whl",
        "has_sig": false,
        "md5_digest": "c22c3579673bfcd733a13e1e95677aea",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 205462,
        "upload_time": "2016-09-12T03:57:59",
        "url": "https://files.pythonhosted.org/packages/28/d0/e49376e55fd4daaec685411566627253a73f99328876fba36e342b7f3b36/zstandard-0.3.2-cp34-cp34m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a186cfffd36a02af5304af6f7bba2099",
          "sha256": "8945645e470c8c2b329dd5e2e3fe22cfa6db826c2bab56f5468866797e1755ed"
        },
        "downloads": 234,
        "filename": "zstandard-0.3.2-cp34-cp34m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "a186cfffd36a02af5304af6f7bba2099",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 239848,
        "upload_time": "2016-09-12T03:58:01",
        "url": "https://files.pythonhosted.org/packages/0b/96/d7aecea082dc9695183309d9525dfd5d04c3238a00472d701c68a9eeeec3/zstandard-0.3.2-cp34-cp34m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a48b31b5455d6cc3b1d8b4409f4de32b",
          "sha256": "85a3f2d6260fad915d4bd7da19cfac0a3c9459924a5e342acb9ffc4bcc864810"
        },
        "downloads": 228,
        "filename": "zstandard-0.3.2-cp35-cp35m-win32.whl",
        "has_sig": false,
        "md5_digest": "a48b31b5455d6cc3b1d8b4409f4de32b",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 187696,
        "upload_time": "2016-09-12T03:58:04",
        "url": "https://files.pythonhosted.org/packages/be/38/6b3d78537c2064a2adba0e43c0e782847e2b4e25d514c38f35c10f0b6eb9/zstandard-0.3.2-cp35-cp35m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "5cbf454e9887165802fc61504126f91a",
          "sha256": "7479bbe03cc39c936832a3c9d382b2f1da3adddcd715c4e41b014d4f2c163fd7"
        },
        "downloads": 230,
        "filename": "zstandard-0.3.2-cp35-cp35m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "5cbf454e9887165802fc61504126f91a",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 220375,
        "upload_time": "2016-09-12T03:58:06",
        "url": "https://files.pythonhosted.org/packages/f9/7e/483b560f3ace4a72f6fcab8a404b4b961c557ba898b02c4c097fc34973d5/zstandard-0.3.2-cp35-cp35m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2618af75322e8f2ad8f8ec03b8c5a03c",
          "sha256": "d097ed6fbf8c4e355012d8480f6e13b0070ea1f8367f1f48a402ac657e50aeab"
        },
        "downloads": 267,
        "filename": "zstandard-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2618af75322e8f2ad8f8ec03b8c5a03c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 167907,
        "upload_time": "2016-09-12T03:31:45",
        "url": "https://files.pythonhosted.org/packages/4f/1b/04e5fe1aef7b8b6cdb5edb8fb0842f92233af17c39e4837fc71f4f7223b2/zstandard-0.3.2.tar.gz"
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8a947ec7b8c8cc7445ccea7d005ab5e6",
          "sha256": "2da9dae664f6dc22221b7da4d01d8390bb21582e52dd357fb0c6502601975d79"
        },
        "downloads": 82,
        "filename": "zstandard-0.3.3-cp26-cp26m-win32.whl",
        "has_sig": false,
        "md5_digest": "8a947ec7b8c8cc7445ccea7d005ab5e6",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 203287,
        "upload_time": "2016-10-02T18:33:34",
        "url": "https://files.pythonhosted.org/packages/6a/f5/32f7328774638a2919e8162a0d07a7fa3f6d953146e2f8acc35cb868210a/zstandard-0.3.3-cp26-cp26m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d55fbf67df0790f67eeb72be29572edc",
          "sha256": "6a885fd1aec9441c85e66e04cdeb22b1c50aaf4399a57750944bd0c2a084be20"
        },
        "downloads": 85,
        "filename": "zstandard-0.3.3-cp26-cp26m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "d55fbf67df0790f67eeb72be29572edc",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 233936,
        "upload_time": "2016-10-02T18:33:38",
        "url": "https://files.pythonhosted.org/packages/7c/05/d9c4526c128631de4dc240317fb6fae34a9ae894f9bbc490ef05d70c1ff6/zstandard-0.3.3-cp26-cp26m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "7139d851a7f1bc322b78d15b03cffc6e",
          "sha256": "b4150367213f33240ab807983dfbb9b29f9542c3e9559bad90d3ea6c004546b1"
        },
        "downloads": 81,
        "filename": "zstandard-0.3.3-cp27-cp27m-win32.whl",
        "has_sig": false,
        "md5_digest": "7139d851a7f1bc322b78d15b03cffc6e",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 202809,
        "upload_time": "2016-10-02T18:33:41",
        "url": "https://files.pythonhosted.org/packages/b1/ca/64464563ec38a85dd29f339b2223f8af5e2039980d282adf78b7b2736c23/zstandard-0.3.3-cp27-cp27m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "cfc905cd3d8a9ead5cad2e4e1e17f81e",
          "sha256": "83938ddb2a486966e0d914a339c9a1f78d8dfecc4f65aa77fb7262317ae27b10"
        },
        "downloads": 81,
        "filename": "zstandard-0.3.3-cp27-cp27m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "cfc905cd3d8a9ead5cad2e4e1e17f81e",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 233389,
        "upload_time": "2016-10-02T18:33:44",
        "url": "https://files.pythonhosted.org/packages/a5/06/f085b94ce5e9b2f4d462311f7faf97f28fa4f4d842119cfae05142b30b75/zstandard-0.3.3-cp27-cp27m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "451ab7a40a49538d0801557f0f3e61b7",
          "sha256": "124a9d7c6a43968a5f428e04275a3ecaf3529a3727484da986eb487c9f46394d"
        },
        "downloads": 79,
        "filename": "zstandard-0.3.3-cp33-cp33m-win32.whl",
        "has_sig": false,
        "md5_digest": "451ab7a40a49538d0801557f0f3e61b7",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 205451,
        "upload_time": "2016-10-02T18:33:47",
        "url": "https://files.pythonhosted.org/packages/1d/5d/fb3eaaef358062564b8554d245e96eee8524941c77dd93a0017c4dfcbfd6/zstandard-0.3.3-cp33-cp33m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "82f062cf0d0f0ed3655479ddf52a667b",
          "sha256": "fdcb76e58af79acfd51be1b4e6fe5ea5b4a4e59e5b2809d09416f9e72bc050a8"
        },
        "downloads": 81,
        "filename": "zstandard-0.3.3-cp33-cp33m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "82f062cf0d0f0ed3655479ddf52a667b",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 239787,
        "upload_time": "2016-10-02T18:33:51",
        "url": "https://files.pythonhosted.org/packages/20/11/37be7bd75c2d603bdbb30023b2bb14758e36accd05160f9cb41f9b447442/zstandard-0.3.3-cp33-cp33m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8ca039a097093ab8b830f614bef49ea8",
          "sha256": "86d249185fa40706e8aff03f686bed84bc21c6b7379f9d0cb4a6131624622d8d"
        },
        "downloads": 81,
        "filename": "zstandard-0.3.3-cp34-cp34m-win32.whl",
        "has_sig": false,
        "md5_digest": "8ca039a097093ab8b830f614bef49ea8",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 205422,
        "upload_time": "2016-10-02T18:33:54",
        "url": "https://files.pythonhosted.org/packages/56/ee/8d5f92dde2337730371a7bcdb5211ed129f2030353377af40a1fdfce7ee5/zstandard-0.3.3-cp34-cp34m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "47f000d4142a129c4925ecf33ffbe173",
          "sha256": "da71e39c89c9345aaf5a7efa97619f7e90557a8e6d5d2c061d3faea25380ea9f"
        },
        "downloads": 79,
        "filename": "zstandard-0.3.3-cp34-cp34m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "47f000d4142a129c4925ecf33ffbe173",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 239793,
        "upload_time": "2016-10-02T18:33:58",
        "url": "https://files.pythonhosted.org/packages/0b/60/da0ab9859789af968a92582b04d044982ef2279723b548deb3577cc69f27/zstandard-0.3.3-cp34-cp34m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "948283ea525b76d396a9c512473382c9",
          "sha256": "a44bcd41d58d02ce269d384b1ffef6b565181a3f36aaeb84a4ce5b3a3292908e"
        },
        "downloads": 81,
        "filename": "zstandard-0.3.3-cp35-cp35m-win32.whl",
        "has_sig": false,
        "md5_digest": "948283ea525b76d396a9c512473382c9",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 187674,
        "upload_time": "2016-10-02T18:34:02",
        "url": "https://files.pythonhosted.org/packages/57/c7/9507c28d40d9e22c953042b2603a285e82574902d35cd0f02a7bafd0c85c/zstandard-0.3.3-cp35-cp35m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c4aa5272b1814a9d0f68cbca3ea625fe",
          "sha256": "13dd8aaa19e0943975f87a2d3a59ef19796842213643a59957c197b018365165"
        },
        "downloads": 81,
        "filename": "zstandard-0.3.3-cp35-cp35m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "c4aa5272b1814a9d0f68cbca3ea625fe",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 220341,
        "upload_time": "2016-10-02T18:34:06",
        "url": "https://files.pythonhosted.org/packages/9c/b4/835c8a5f73abb88b13cc7c895c26b44990421ed05fdfb4878e67ce68836e/zstandard-0.3.3-cp35-cp35m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8e52ab55244a87331511e3dd838c5235",
          "sha256": "9f4883bd88cfbe856fb83ca07fb25d8d8171ecc4aba7cb5c41a2f93387388d97"
        },
        "downloads": 87,
        "filename": "zstandard-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8e52ab55244a87331511e3dd838c5235",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 167875,
        "upload_time": "2016-10-02T17:56:51",
        "url": "https://files.pythonhosted.org/packages/20/4b/acaad7eb3156309449f2b9bb24376080976d6b7e6ad0a07427579da648a0/zstandard-0.3.3.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bd82d6e5a6f492b7cc520814ab146123",
          "sha256": "a3d4ff251e633b5354563bfffc1017ceeb2dbdb2b1cf2e568e343a7aabd857cc"
        },
        "downloads": 120,
        "filename": "zstandard-0.4.0-cp26-cp26m-win32.whl",
        "has_sig": false,
        "md5_digest": "bd82d6e5a6f492b7cc520814ab146123",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 205130,
        "upload_time": "2016-10-03T04:20:45",
        "url": "https://files.pythonhosted.org/packages/1f/87/fb71aaf65e816a66684cb1eda856f4cdb1b2998593360101d664733dc7bd/zstandard-0.4.0-cp26-cp26m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "dcc2843460a65483a4a2a5fdb04ddc92",
          "sha256": "af6dc61fd2c9b6e03acffa8c7168d15020311840b770385fda23423377329e20"
        },
        "downloads": 126,
        "filename": "zstandard-0.4.0-cp26-cp26m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "dcc2843460a65483a4a2a5fdb04ddc92",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 236611,
        "upload_time": "2016-10-03T04:20:48",
        "url": "https://files.pythonhosted.org/packages/00/82/a2d7ed47dfdeacf2da79056673e331b1532432a57c430e5a64479d82afbf/zstandard-0.4.0-cp26-cp26m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4a582b3fda298a40568e499f714eae02",
          "sha256": "d2b2cd1ba1deda2610133cc84b387ef87bf0f39f38239ef16df1fc23eb26ea81"
        },
        "downloads": 129,
        "filename": "zstandard-0.4.0-cp27-cp27m-win32.whl",
        "has_sig": false,
        "md5_digest": "4a582b3fda298a40568e499f714eae02",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 204659,
        "upload_time": "2016-10-03T04:20:51",
        "url": "https://files.pythonhosted.org/packages/4b/13/7aa3fa39a0f27cad75d179be4c2bd8d5abe3fefcd75bbc0b208f9a03496d/zstandard-0.4.0-cp27-cp27m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "60626d978e95b66a82ab9c449eb42ad9",
          "sha256": "86e7a44b0ff7ca955f5030e99eda1891069d1ad44282c6d970410e170fff89f5"
        },
        "downloads": 130,
        "filename": "zstandard-0.4.0-cp27-cp27m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "60626d978e95b66a82ab9c449eb42ad9",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 236068,
        "upload_time": "2016-10-03T04:20:54",
        "url": "https://files.pythonhosted.org/packages/04/58/c9197fbcb609a18d0bbe3b90f2fbe4740f678e619549cb1e2805f994aba0/zstandard-0.4.0-cp27-cp27m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d1c629c9ea2265298bc8b59161c0d4b1",
          "sha256": "5878f9d666bcbb4c29b7e120831a4e6aaa1d2b76964e1d192df4b26f4f3c2091"
        },
        "downloads": 129,
        "filename": "zstandard-0.4.0-cp33-cp33m-win32.whl",
        "has_sig": false,
        "md5_digest": "d1c629c9ea2265298bc8b59161c0d4b1",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 207484,
        "upload_time": "2016-10-03T04:20:57",
        "url": "https://files.pythonhosted.org/packages/c2/c9/ccf83c0257a6bf2d07d56484766db305ffd529f2230452aab059a678d322/zstandard-0.4.0-cp33-cp33m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "dc1c783aafd00ff4f737c16d9dd76570",
          "sha256": "8318c08e2f38430d08950e48623c0c9878ada1dbeaae5a425cbb12178c42f4c6"
        },
        "downloads": 127,
        "filename": "zstandard-0.4.0-cp33-cp33m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "dc1c783aafd00ff4f737c16d9dd76570",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 242593,
        "upload_time": "2016-10-03T04:21:00",
        "url": "https://files.pythonhosted.org/packages/8f/16/0d00ea2d27286576e234dde8952f5b9394b0459f68240c881d37c1ba3fc2/zstandard-0.4.0-cp33-cp33m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f2ad446a7061ce8f6ce03a488332b5d8",
          "sha256": "cb4aca8e81c97bc81757f43295cad1b84b963ca2460b9d8aeb18dcf2e2db5cc1"
        },
        "downloads": 123,
        "filename": "zstandard-0.4.0-cp34-cp34m-win32.whl",
        "has_sig": false,
        "md5_digest": "f2ad446a7061ce8f6ce03a488332b5d8",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 207466,
        "upload_time": "2016-10-03T04:21:04",
        "url": "https://files.pythonhosted.org/packages/ce/9a/b4af180ddb774e2ae5b1a6f1cc67856d8d1782c09a9721b97ab6423f12b8/zstandard-0.4.0-cp34-cp34m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e2a4b9c202d9b5146c75998aa283a96b",
          "sha256": "a497cb8cc89441d720d77915a95c533d351bf30089bafdf5e198a33bce921c4c"
        },
        "downloads": 124,
        "filename": "zstandard-0.4.0-cp34-cp34m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "e2a4b9c202d9b5146c75998aa283a96b",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 242573,
        "upload_time": "2016-10-03T04:21:08",
        "url": "https://files.pythonhosted.org/packages/ae/85/fa02e0437b98d5cf0e2203bb1164c54019add43ce0362f46bd5adbec078f/zstandard-0.4.0-cp34-cp34m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2e303e57eeda4d63b4a363d52aa37301",
          "sha256": "10a11b2fa75f0ca07969e4be31f9eed954254e20fa0d1f4c56d691893a6cf0d9"
        },
        "downloads": 122,
        "filename": "zstandard-0.4.0-cp35-cp35m-win32.whl",
        "has_sig": false,
        "md5_digest": "2e303e57eeda4d63b4a363d52aa37301",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 190305,
        "upload_time": "2016-10-03T04:21:12",
        "url": "https://files.pythonhosted.org/packages/5a/e1/25056ccd27acf256510efbfa50a10e74ed3b6ba101cf24afb6c9518cbf18/zstandard-0.4.0-cp35-cp35m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d53f3e10fcb9fc67552346b958d39337",
          "sha256": "da6117a71241ef323cfafbcc8be00934873750e2cbaf89bc25987906b0dd8656"
        },
        "downloads": 126,
        "filename": "zstandard-0.4.0-cp35-cp35m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "d53f3e10fcb9fc67552346b958d39337",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 223724,
        "upload_time": "2016-10-03T04:21:15",
        "url": "https://files.pythonhosted.org/packages/ea/ee/d89dd6af3e4be1b267aa48dd99a5dd418dda8d1e1039d0228b049ff57009/zstandard-0.4.0-cp35-cp35m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "76f3ca21ad75702eff006223d3851319",
          "sha256": "c7230e994edb26d23b816c8a5430e6b15f8d1d1fdf60473bb8eb9847136693aa"
        },
        "downloads": 263,
        "filename": "zstandard-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "76f3ca21ad75702eff006223d3851319",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 718892,
        "upload_time": "2016-10-03T04:21:19",
        "url": "https://files.pythonhosted.org/packages/90/9e/645fa2b65a5bfe794d4ad6536a02e2a8a3be5273d912464a94675b97b800/zstandard-0.4.0.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "71a51930933c236fd6c25017e6b4eb80",
          "sha256": "9e7fc5bfe211401fc3363bd11638050e54b4bcfe3f7150d4adf043417bc3f588"
        },
        "downloads": 37,
        "filename": "zstandard-0.5.0-cp26-cp26m-win32.whl",
        "has_sig": false,
        "md5_digest": "71a51930933c236fd6c25017e6b4eb80",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 224738,
        "upload_time": "2016-11-11T05:23:05",
        "url": "https://files.pythonhosted.org/packages/b8/fc/abd2c021d051c47d33ff601eb50104c1e0c8148d44a41b75999875e65b86/zstandard-0.5.0-cp26-cp26m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d2c4d65d05e14657014a2aa59eb3f767",
          "sha256": "6cd3811d83b81d082659667eb30fc94f202e867da73f99beb561adfef5e1a08c"
        },
        "downloads": 42,
        "filename": "zstandard-0.5.0-cp26-cp26m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "d2c4d65d05e14657014a2aa59eb3f767",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 259943,
        "upload_time": "2016-11-11T05:23:08",
        "url": "https://files.pythonhosted.org/packages/a5/44/8248565c0c128bfaaaec231ac0cad79c5ae75d0f286d4ccdc149fe90ff66/zstandard-0.5.0-cp26-cp26m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f3c9fdd9da78c69d5b46cd56df80d9de",
          "sha256": "e3dc00af3a14265f5327f92ad7ea94cd83f0d46a8cfe9eedbad85f890bf78f7b"
        },
        "downloads": 37,
        "filename": "zstandard-0.5.0-cp27-cp27m-win32.whl",
        "has_sig": false,
        "md5_digest": "f3c9fdd9da78c69d5b46cd56df80d9de",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 224233,
        "upload_time": "2016-11-11T05:24:10",
        "url": "https://files.pythonhosted.org/packages/e3/70/1a6a1e5a9e03eb6ccdecb8596b7c944299c9feef0f66f50828fc8b543f01/zstandard-0.5.0-cp27-cp27m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3015d56867d35c002adabe837db420f4",
          "sha256": "bb53b594cfddf0914b3b3287c931c14132749d0ab43cee2a1c361dc4d9edaeae"
        },
        "downloads": 37,
        "filename": "zstandard-0.5.0-cp27-cp27m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "3015d56867d35c002adabe837db420f4",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 259332,
        "upload_time": "2016-11-11T05:24:12",
        "url": "https://files.pythonhosted.org/packages/bd/47/a4212793e03725d57d0b1fef2ffc0b6a05810471df90bea86241ca96dafc/zstandard-0.5.0-cp27-cp27m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e2dcd780d7c88adbe42a04d2906dfa45",
          "sha256": "346c78122ce0b461a77d033d81417945bc87971bee5f3128d76d076c1e8d30ec"
        },
        "downloads": 41,
        "filename": "zstandard-0.5.0-cp33-cp33m-win32.whl",
        "has_sig": false,
        "md5_digest": "e2dcd780d7c88adbe42a04d2906dfa45",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 225576,
        "upload_time": "2016-11-11T05:24:15",
        "url": "https://files.pythonhosted.org/packages/c5/53/1679c5216cec5aefe1008fc4f5524b9a63a90c27727bd01d2d6d4cbd0610/zstandard-0.5.0-cp33-cp33m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b89a158f64b28cd9ed015a3294879e7c",
          "sha256": "94566e345976bf0c765e86abfc633010179433fcd23de27fa479dcfe802b6792"
        },
        "downloads": 39,
        "filename": "zstandard-0.5.0-cp33-cp33m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "b89a158f64b28cd9ed015a3294879e7c",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 264379,
        "upload_time": "2016-11-11T05:24:18",
        "url": "https://files.pythonhosted.org/packages/c4/aa/aa164c834b3ca4e823e412e4baaa2348d39da93b0d5464c09b898ac19f71/zstandard-0.5.0-cp33-cp33m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "283d1ac5f0e0c87d33db82e450d699e2",
          "sha256": "2efd9e1a970ee338b9d0095fd66ac3b06475202279323b8be77451296807eca1"
        },
        "downloads": 37,
        "filename": "zstandard-0.5.0-cp34-cp34m-win32.whl",
        "has_sig": false,
        "md5_digest": "283d1ac5f0e0c87d33db82e450d699e2",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 225552,
        "upload_time": "2016-11-11T05:24:21",
        "url": "https://files.pythonhosted.org/packages/96/5f/fdcc4deb272904d91cfc83a8ccc06a2e466557ebaa1732b9a0d54825b6eb/zstandard-0.5.0-cp34-cp34m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1a172e37161a193df4ce028884665135",
          "sha256": "230bdda1b2486ed7f4c55b2b5268f42234ef09bc051a1d310a86ae95b94a5c36"
        },
        "downloads": 42,
        "filename": "zstandard-0.5.0-cp34-cp34m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "1a172e37161a193df4ce028884665135",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 264279,
        "upload_time": "2016-11-11T05:24:24",
        "url": "https://files.pythonhosted.org/packages/e5/3f/d8695d0aef319c928ff4cb792b0be0b7273fc47562130827439bc9ff720b/zstandard-0.5.0-cp34-cp34m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1af9c048cfeb9cf867158676f3980f03",
          "sha256": "3e220b7cc9f11a9e57f571c2634e31a5944c1012c3be01ad6acac37abd661e7f"
        },
        "downloads": 39,
        "filename": "zstandard-0.5.0-cp35-cp35m-win32.whl",
        "has_sig": false,
        "md5_digest": "1af9c048cfeb9cf867158676f3980f03",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 213624,
        "upload_time": "2016-11-11T05:24:26",
        "url": "https://files.pythonhosted.org/packages/20/08/6f5a2f2980cb33baff7d6dfe13b8860eb50a772be07a1a266ee29c3cf1ed/zstandard-0.5.0-cp35-cp35m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4f6c3ea10540cac4b3d4b676c9c59609",
          "sha256": "5d9712f6cc6eb99362cf76caf082a573696bc5ae9fac0b5bf0b6b4e29c5a5f95"
        },
        "downloads": 38,
        "filename": "zstandard-0.5.0-cp35-cp35m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "4f6c3ea10540cac4b3d4b676c9c59609",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 246096,
        "upload_time": "2016-11-11T05:24:29",
        "url": "https://files.pythonhosted.org/packages/e4/5d/00ba0021f4b0e20252fcb498d55d618f3f60f808df67722d44f4e3c53631/zstandard-0.5.0-cp35-cp35m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "69560efecaae81b7ee0cfa4facf4f3c7",
          "sha256": "91b64452309178b477593f8702c39475666f6417b9306d380bde06096823ac5f"
        },
        "downloads": 60,
        "filename": "zstandard-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "69560efecaae81b7ee0cfa4facf4f3c7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 166463,
        "upload_time": "2016-11-11T05:25:15",
        "url": "https://files.pythonhosted.org/packages/d8/84/36aaa396c682c1fcf6c5fe7106383b4cc63127b6b04e56d75d3fbc28a154/zstandard-0.5.0.tar.gz"
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4cfaaa685b95b127fb0bfc99f41e0f40",
          "sha256": "8821d719dc94f320454b7f2e15c26fdf2e67da892fc84858952df46b52e3f29f"
        },
        "downloads": 38,
        "filename": "zstandard-0.5.1-cp26-cp26m-win32.whl",
        "has_sig": false,
        "md5_digest": "4cfaaa685b95b127fb0bfc99f41e0f40",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 224811,
        "upload_time": "2016-11-13T03:57:06",
        "url": "https://files.pythonhosted.org/packages/7c/2a/9027132963ef3be24f582a9a768bd28e76d80cf5947653fff6a5942af0af/zstandard-0.5.1-cp26-cp26m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9d777ce5e3ee1a4c7dedc3ce77cc9519",
          "sha256": "afcf0653e82029eb9ba7550f6a015106b9e484a1b4ca8c06cc0a4e3c28046020"
        },
        "downloads": 37,
        "filename": "zstandard-0.5.1-cp26-cp26m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "9d777ce5e3ee1a4c7dedc3ce77cc9519",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 260016,
        "upload_time": "2016-11-13T03:57:08",
        "url": "https://files.pythonhosted.org/packages/7b/94/cf96ed6ad235794e8acfab8b4b5967f9bd1770cf42fe8007f165418bbc69/zstandard-0.5.1-cp26-cp26m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "bdcc107a2f07a78f7e95a0b834e6b5d1",
          "sha256": "54183be8c604e2fad50c266c1d7e160b85848564b58401a0f77237a614c3891c"
        },
        "downloads": 38,
        "filename": "zstandard-0.5.1-cp27-cp27m-win32.whl",
        "has_sig": false,
        "md5_digest": "bdcc107a2f07a78f7e95a0b834e6b5d1",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 224303,
        "upload_time": "2016-11-13T03:57:11",
        "url": "https://files.pythonhosted.org/packages/a3/93/beefaf732847ffdc18151b8295b8bd8bafd59dfd8aca48083a773ace3b1e/zstandard-0.5.1-cp27-cp27m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e1a64a151aa5f5e78e570a41d5e92c03",
          "sha256": "8b8ebd0fe4afc77cce504ea75d4751f8a2ddcebd387a099363b7d2dc32a3c62a"
        },
        "downloads": 37,
        "filename": "zstandard-0.5.1-cp27-cp27m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "e1a64a151aa5f5e78e570a41d5e92c03",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 259404,
        "upload_time": "2016-11-13T03:57:14",
        "url": "https://files.pythonhosted.org/packages/2a/0f/824011f6093e17c09b7ee897f0ad8ab1c36b0026d45f6eec4303ff7f0720/zstandard-0.5.1-cp27-cp27m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "dcfa0f520d51939b1e9555c8877fae2e",
          "sha256": "8e06d72d899542a37815b13b57ce7de037357e14e935fbf546e5f688a239700e"
        },
        "downloads": 41,
        "filename": "zstandard-0.5.1-cp33-cp33m-win32.whl",
        "has_sig": false,
        "md5_digest": "dcfa0f520d51939b1e9555c8877fae2e",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 225641,
        "upload_time": "2016-11-13T03:57:17",
        "url": "https://files.pythonhosted.org/packages/0b/15/6a06eb273e154171c332e8dcac757ba0d5489b3086c3995c2a626d52bdfb/zstandard-0.5.1-cp33-cp33m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b9b4c36f96989982b2f1097a4601f6c0",
          "sha256": "25b312d6a527e8335ec118fdc72878ac34183b9d9aa02be6922d2cb78542f79d"
        },
        "downloads": 37,
        "filename": "zstandard-0.5.1-cp33-cp33m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "b9b4c36f96989982b2f1097a4601f6c0",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 264449,
        "upload_time": "2016-11-13T03:57:19",
        "url": "https://files.pythonhosted.org/packages/50/a6/39c8c86de0c9aea5919c5d3cc7063d5bb34b60f68fa0a19d9c50bf29eaf7/zstandard-0.5.1-cp33-cp33m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e0a76a2e7a6f150f8e0be5cf2e7a512a",
          "sha256": "a090e78d71f92c8146b0277722b3dad1bc058aadd47b8342b59a7fa9eaec7479"
        },
        "downloads": 37,
        "filename": "zstandard-0.5.1-cp34-cp34m-win32.whl",
        "has_sig": false,
        "md5_digest": "e0a76a2e7a6f150f8e0be5cf2e7a512a",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 225622,
        "upload_time": "2016-11-13T03:57:23",
        "url": "https://files.pythonhosted.org/packages/2b/c0/43687a085bd2ce932a8a97fe4d1f5a02949951f22216344c307f3cff2251/zstandard-0.5.1-cp34-cp34m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "868397738f5199a02cb79526c0e29e9b",
          "sha256": "859e546cb5fc47e75cfa1d5dc5bef242790482b5098658bd273b9e9ab19eb08f"
        },
        "downloads": 39,
        "filename": "zstandard-0.5.1-cp34-cp34m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "868397738f5199a02cb79526c0e29e9b",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 264345,
        "upload_time": "2016-11-13T03:57:26",
        "url": "https://files.pythonhosted.org/packages/34/0c/64bb573776aa45c3265f4f41e93959ee57d7ed6d4e0bc1a2ac4cf6f33951/zstandard-0.5.1-cp34-cp34m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "62f66e3fb9002f3ce39f80a83373a927",
          "sha256": "3c0c1f964dbd940c04d38ea02f4cacc3316cd3f04147626ad7c1051e8c904c35"
        },
        "downloads": 37,
        "filename": "zstandard-0.5.1-cp35-cp35m-win32.whl",
        "has_sig": false,
        "md5_digest": "62f66e3fb9002f3ce39f80a83373a927",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 213695,
        "upload_time": "2016-11-13T03:57:29",
        "url": "https://files.pythonhosted.org/packages/79/aa/42bbbe0a2cf80d1e0b261d4d3c698e788f4757b0e48eccd802178be1931c/zstandard-0.5.1-cp35-cp35m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3b28b6df5d913f9ae7f18b3406bbdaee",
          "sha256": "c01688135fb6376dd866084deb2e637ce767581695a518819240e1276b772b75"
        },
        "downloads": 37,
        "filename": "zstandard-0.5.1-cp35-cp35m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "3b28b6df5d913f9ae7f18b3406bbdaee",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 246164,
        "upload_time": "2016-11-13T03:57:32",
        "url": "https://files.pythonhosted.org/packages/8a/39/e978fcff66a0a9f3efdd382bb5b9c2e29dca1069284d8a8e3a4aa90f23fb/zstandard-0.5.1-cp35-cp35m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e575f438c7559896dfefd10063b2c67c",
          "sha256": "abb0f2d5a3ca8116be9fc765aec069bc04638064d0215c37d496f52f77f9e800"
        },
        "downloads": 39,
        "filename": "zstandard-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e575f438c7559896dfefd10063b2c67c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 167117,
        "upload_time": "2016-11-13T03:57:34",
        "url": "https://files.pythonhosted.org/packages/b4/e1/0058d1bfd97a375fd98529c88af34f262ee19716149ded822c758edc98d0/zstandard-0.5.1.tar.gz"
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c2fb9787d7cb79648ce469ce7a172da7",
          "sha256": "fa9c8dc5e7daf48e1cf887da7f8e46b232a9960c741a1cabe5b461141140e0b6"
        },
        "downloads": 40,
        "filename": "zstandard-0.5.2-cp26-cp26m-win32.whl",
        "has_sig": false,
        "md5_digest": "c2fb9787d7cb79648ce469ce7a172da7",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 224810,
        "upload_time": "2016-11-13T05:06:43",
        "url": "https://files.pythonhosted.org/packages/d3/de/beebacf55baaf69c0e025d533c9f5f66631bb808853099edc6831beabadc/zstandard-0.5.2-cp26-cp26m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6fee8db434d96458279a7786975c3c0f",
          "sha256": "db88937d77d9eec89546c4a545c4230fea515196e3479247924fa7e3167263db"
        },
        "downloads": 42,
        "filename": "zstandard-0.5.2-cp26-cp26m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "6fee8db434d96458279a7786975c3c0f",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 260014,
        "upload_time": "2016-11-13T05:06:47",
        "url": "https://files.pythonhosted.org/packages/3c/da/38c26ba0fc20043bb901027c61d4513a5e2e5fe39325ae2d2befc5124b5e/zstandard-0.5.2-cp26-cp26m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "61d116bcc88895faedecceb94c970f1f",
          "sha256": "fa647519b058bfdad5f7e98b2d2930c0933cdb2ef95106cce3940d957bd51293"
        },
        "downloads": 39,
        "filename": "zstandard-0.5.2-cp27-cp27m-win32.whl",
        "has_sig": false,
        "md5_digest": "61d116bcc88895faedecceb94c970f1f",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 224304,
        "upload_time": "2016-11-13T05:06:50",
        "url": "https://files.pythonhosted.org/packages/bc/78/3770dea1bb72b6398ee7a0c90134500a1f199e4161f323d7169e4294df85/zstandard-0.5.2-cp27-cp27m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1b9e43c1a4e84d52e3ab8e7c0ae59b49",
          "sha256": "2e988ac1a62c506f3e7d59cae9425fe4f12c9fcbf348ff5d2b27c4f7a5d1a501"
        },
        "downloads": 44,
        "filename": "zstandard-0.5.2-cp27-cp27m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "1b9e43c1a4e84d52e3ab8e7c0ae59b49",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 259402,
        "upload_time": "2016-11-13T05:06:53",
        "url": "https://files.pythonhosted.org/packages/64/ec/2133e757deef1e38251d510380ea30b3af93a586c9c4cf6b436c88ed495b/zstandard-0.5.2-cp27-cp27m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9a34b984e0e1f90ca9f12337bc8c5026",
          "sha256": "757f3062d9c5f86296b87fe4518cdb26400d4d729483cf581ee3932a34ba67b6"
        },
        "downloads": 37,
        "filename": "zstandard-0.5.2-cp33-cp33m-win32.whl",
        "has_sig": false,
        "md5_digest": "9a34b984e0e1f90ca9f12337bc8c5026",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 225645,
        "upload_time": "2016-11-13T05:06:56",
        "url": "https://files.pythonhosted.org/packages/c2/39/68dd43812bf45e0e9ba707119e697f54ffedccd1c2c4a990a5431b4f532e/zstandard-0.5.2-cp33-cp33m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3f88ed9f755bd9f65c58386561e7c1a6",
          "sha256": "05ebcc0b93d85135fe25a4bd7a1f4f47bf093f32db0c83486a686e8535bc244a"
        },
        "downloads": 41,
        "filename": "zstandard-0.5.2-cp33-cp33m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "3f88ed9f755bd9f65c58386561e7c1a6",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 264449,
        "upload_time": "2016-11-13T05:06:59",
        "url": "https://files.pythonhosted.org/packages/7c/30/d9650fa10fe9c98723e5a4adc4f3c3755bd47eaf669cd7ab2982d7b741e9/zstandard-0.5.2-cp33-cp33m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8fdbf9369ea9c7d6448e4def97fe828c",
          "sha256": "b78af87201e749bf9928d5afc76d8bcbfb1b4fb173a91fd7eaba2d6a1a0cbf63"
        },
        "downloads": 40,
        "filename": "zstandard-0.5.2-cp34-cp34m-win32.whl",
        "has_sig": false,
        "md5_digest": "8fdbf9369ea9c7d6448e4def97fe828c",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 225621,
        "upload_time": "2016-11-13T05:07:03",
        "url": "https://files.pythonhosted.org/packages/6e/8c/6d6efda45240af7cc82d73c77287c2af6666ba5c5d97fb0e383e74f173d1/zstandard-0.5.2-cp34-cp34m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e8f19212ce056886fe6ce53311d95d50",
          "sha256": "518f26b1a44c110ac656f78268d4190cc90401042c810acbc7c3bf106b65b32f"
        },
        "downloads": 41,
        "filename": "zstandard-0.5.2-cp34-cp34m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "e8f19212ce056886fe6ce53311d95d50",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 264346,
        "upload_time": "2016-11-13T05:07:06",
        "url": "https://files.pythonhosted.org/packages/1b/8e/f82dd61f6f2e3600b3d1d570d38affff6a0748ce381b7f38ab114a5e9a3d/zstandard-0.5.2-cp34-cp34m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f1d92272a10a0fc1a2f8b2305f56a71f",
          "sha256": "c3dbb8dc1a7b59047e4cae04d24949b78ad94bde85edda347ed2441af71cd362"
        },
        "downloads": 45,
        "filename": "zstandard-0.5.2-cp35-cp35m-win32.whl",
        "has_sig": false,
        "md5_digest": "f1d92272a10a0fc1a2f8b2305f56a71f",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 213694,
        "upload_time": "2016-11-13T05:07:09",
        "url": "https://files.pythonhosted.org/packages/2a/55/35f6daabece39980d182c3322ad1a5e7dcb544068d5286ed381cc63321b3/zstandard-0.5.2-cp35-cp35m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4f3b07cd9b5469543ea61014223cf662",
          "sha256": "b0a062ee97ea22de58eabd68a5e818d151e6540627e23845262591aa5df440c0"
        },
        "downloads": 41,
        "filename": "zstandard-0.5.2-cp35-cp35m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "4f3b07cd9b5469543ea61014223cf662",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 246165,
        "upload_time": "2016-11-13T05:07:12",
        "url": "https://files.pythonhosted.org/packages/08/3d/40848c3923acf160b53f6c12a746ff859f7da356fd41d5260e6354668d39/zstandard-0.5.2-cp35-cp35m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ff4701ad4fdef9269ec64637803f97b8",
          "sha256": "9dc31efd3b07f87919a174174cc6004ac6b20219419c1efa7e782d0774d9407b"
        },
        "downloads": 69,
        "filename": "zstandard-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ff4701ad4fdef9269ec64637803f97b8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 187754,
        "upload_time": "2016-11-13T05:07:15",
        "url": "https://files.pythonhosted.org/packages/69/ca/1173799ad853adf3b7aee12db023b13cd32146ca3c7e2ac113bebe6790f8/zstandard-0.5.2.tar.gz"
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b55d77f841da83ae8a19ffa200b83185",
          "sha256": "8c0b4b0aa29c56212af2b873e17338e5537459ed63f2fb269c6cb3c547ad3233"
        },
        "downloads": 9,
        "filename": "zstandard-0.6.0-cp26-cp26m-win32.whl",
        "has_sig": false,
        "md5_digest": "b55d77f841da83ae8a19ffa200b83185",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 225472,
        "upload_time": "2017-01-15T03:29:37",
        "url": "https://files.pythonhosted.org/packages/13/49/ac1bedd4f3a7463b1ddadf7a87bbc743d41e1e5fd165f667ea0bbba5ac15/zstandard-0.6.0-cp26-cp26m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e12830eb36c4c1fddd73515a4ef8a04d",
          "sha256": "581fdaf5cc64a300f1683fa1cba8bf23b3dd7c5a432e5375c80b91ca20aa3971"
        },
        "downloads": 9,
        "filename": "zstandard-0.6.0-cp26-cp26m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "e12830eb36c4c1fddd73515a4ef8a04d",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 264596,
        "upload_time": "2017-01-15T03:29:38",
        "url": "https://files.pythonhosted.org/packages/17/65/fc1b197a96e066cef1c55379a4f5e682a609ff88c608d3a9c0493eab74d9/zstandard-0.6.0-cp26-cp26m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "76082fe9b869f2a917969c99f9b86f10",
          "sha256": "1e5277fdfda505ff3feccec844f0b0863a2e0a65675ec44b430f80788d017b58"
        },
        "downloads": 9,
        "filename": "zstandard-0.6.0-cp27-cp27m-win32.whl",
        "has_sig": false,
        "md5_digest": "76082fe9b869f2a917969c99f9b86f10",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 224965,
        "upload_time": "2017-01-15T03:29:40",
        "url": "https://files.pythonhosted.org/packages/15/2d/7a3fb9fb99213749e13c932856fcc0ecd55e38aaf8743d0653e74ebc35dd/zstandard-0.6.0-cp27-cp27m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6600ac480b4d872a41a61f54b0bb1e7a",
          "sha256": "a3124acb59522f5b9ec2eaa9182d375265d939606aa81e3da58e0bf9193cc643"
        },
        "downloads": 8,
        "filename": "zstandard-0.6.0-cp27-cp27m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "6600ac480b4d872a41a61f54b0bb1e7a",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 263969,
        "upload_time": "2017-01-15T03:29:41",
        "url": "https://files.pythonhosted.org/packages/d3/74/51fe7fd7b105103e085cd64be60b30ec66174543a9e3d5bd16b42cd5cc69/zstandard-0.6.0-cp27-cp27m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "320e6a9253b1877c51d9f7a81a90617f",
          "sha256": "8ac7acb98ac2d20be20dffc843b7eed2f353d87f9cf94c2d6cf06dfb93f76ae7"
        },
        "downloads": 9,
        "filename": "zstandard-0.6.0-cp33-cp33m-win32.whl",
        "has_sig": false,
        "md5_digest": "320e6a9253b1877c51d9f7a81a90617f",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 227415,
        "upload_time": "2017-01-15T03:29:43",
        "url": "https://files.pythonhosted.org/packages/7c/32/791643b3925b0cd54f6c1a8126e85861257f865c73800a6d7c347f241aad/zstandard-0.6.0-cp33-cp33m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "fc3c1781477d9e8afe6f71713610c70b",
          "sha256": "311ac45c78ba9533747debf1451c58091b5eb701797de6c6168faf7a5d77808e"
        },
        "downloads": 7,
        "filename": "zstandard-0.6.0-cp33-cp33m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "fc3c1781477d9e8afe6f71713610c70b",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 269319,
        "upload_time": "2017-01-15T03:29:45",
        "url": "https://files.pythonhosted.org/packages/d6/89/598f951a4eb92e8243605f2f73c3b8e411c5be1a5e650699da0578d9a778/zstandard-0.6.0-cp33-cp33m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ad245776f2fdf7233d3095d556bdf19b",
          "sha256": "4f65fb614dcec8bbe2fe01f1bb47d51efcdb647d991a62e869ebf0ef7feb9734"
        },
        "downloads": 8,
        "filename": "zstandard-0.6.0-cp34-cp34m-win32.whl",
        "has_sig": false,
        "md5_digest": "ad245776f2fdf7233d3095d556bdf19b",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 227375,
        "upload_time": "2017-01-15T03:29:47",
        "url": "https://files.pythonhosted.org/packages/c2/60/5270ab84090ce422ce7fd4877f3e45d9a92f9d95ad4928d50518bf00e575/zstandard-0.6.0-cp34-cp34m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "5710d7b1ede388556e334940dfa7db18",
          "sha256": "6f515a258e3880940e20971d356dd9f2047c3675a85a5b6c456c7d98f30e2128"
        },
        "downloads": 11,
        "filename": "zstandard-0.6.0-cp34-cp34m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "5710d7b1ede388556e334940dfa7db18",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 269239,
        "upload_time": "2017-01-15T03:29:49",
        "url": "https://files.pythonhosted.org/packages/ea/0b/bb923f592d6afc6ca91224eebbf86de624cf8764f69fcfeee96bd47f3be6/zstandard-0.6.0-cp34-cp34m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "7954849cf60e71e426739e89c91e37fd",
          "sha256": "266239a135ef42ad22c4f9876560baf9287f9d5cd48513b1f2f3a6dd23fae246"
        },
        "downloads": 9,
        "filename": "zstandard-0.6.0-cp35-cp35m-win32.whl",
        "has_sig": false,
        "md5_digest": "7954849cf60e71e426739e89c91e37fd",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 226795,
        "upload_time": "2017-01-15T03:29:51",
        "url": "https://files.pythonhosted.org/packages/07/30/1286a34d7d9ace9c6fbaccb10adf748b851b0887b3a8e6e438a2e111f2ec/zstandard-0.6.0-cp35-cp35m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0ee5137447e51f957f5bfdd95f154986",
          "sha256": "b456e255ab77ba86124e225ea33deabd27f21356539963134bc27f3075d06217"
        },
        "downloads": 7,
        "filename": "zstandard-0.6.0-cp35-cp35m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "0ee5137447e51f957f5bfdd95f154986",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 262680,
        "upload_time": "2017-01-15T03:29:52",
        "url": "https://files.pythonhosted.org/packages/8c/dd/d2fc41c4032608628a1962732bf545d6bdb07ae3dac8eef39be5f91f8699/zstandard-0.6.0-cp35-cp35m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d0a7efa8872b700d1680d430f9f434c1",
          "sha256": "8ce323379dd0d419aec4ed5e8a4ecc270e3ca90f0a60aaac6d356b9691e450d9"
        },
        "downloads": 10,
        "filename": "zstandard-0.6.0-cp36-cp36m-win32.whl",
        "has_sig": false,
        "md5_digest": "d0a7efa8872b700d1680d430f9f434c1",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "size": 226794,
        "upload_time": "2017-01-15T03:29:54",
        "url": "https://files.pythonhosted.org/packages/f3/ad/55bb85d6504b94a4d4dd324f18b0ba58289fb61b6de3dc16f31c80d409e8/zstandard-0.6.0-cp36-cp36m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "dc933bcb9277bd0038c42c609b25fd26",
          "sha256": "f262b4beaf0f7c246e7dc678aeeefd17dd711282eab728634cfcbb56dfc28188"
        },
        "downloads": 10,
        "filename": "zstandard-0.6.0-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "dc933bcb9277bd0038c42c609b25fd26",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "size": 262673,
        "upload_time": "2017-01-15T03:29:55",
        "url": "https://files.pythonhosted.org/packages/99/dd/0b97b4f3ec162140bf70b9b8e86f4c6ab5f1efd5e9addad69aabf9ac5038/zstandard-0.6.0-cp36-cp36m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "776df5996fae5ea2faa1587672bac64a",
          "sha256": "a97a01f8eae5b6f7a23336c82981c07d3b8af5eaca4ef7b1f0439c0463eb6bbd"
        },
        "downloads": 10,
        "filename": "zstandard-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "776df5996fae5ea2faa1587672bac64a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 398524,
        "upload_time": "2017-01-15T03:00:32",
        "url": "https://files.pythonhosted.org/packages/9d/7c/0b0914eedd2a2b4c3d874b5a48b4def8bdb8d0c1aa867a2863d63839a3c8/zstandard-0.6.0.tar.gz"
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "203f2a9a46d3eeecbfedb75d9c180b37",
          "sha256": "175d5f45ed1ac235e5679d2fb222c962dba3cb219cdc71c44d8d9d13cc3b0e97"
        },
        "downloads": 9,
        "filename": "zstandard-0.7.0-cp26-cp26m-win32.whl",
        "has_sig": false,
        "md5_digest": "203f2a9a46d3eeecbfedb75d9c180b37",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 240378,
        "upload_time": "2017-02-08T07:19:28",
        "url": "https://files.pythonhosted.org/packages/ae/38/3b9b9b5dfc2db8491a3029ad35dafee51d8b2853f95978df85faa261bf62/zstandard-0.7.0-cp26-cp26m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "fa24b4ba804d014219c09fbf91ab3410",
          "sha256": "a8836f26107ac03e1f62ce6eb87e64b223744cf6d1f3f4af92365f8c5c70eeac"
        },
        "downloads": 11,
        "filename": "zstandard-0.7.0-cp26-cp26m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "fa24b4ba804d014219c09fbf91ab3410",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 285901,
        "upload_time": "2017-02-08T07:19:31",
        "url": "https://files.pythonhosted.org/packages/bd/83/f415d89e36e7181e9efbd46e4f154e902e456d7432e3186d9f5a56eccf72/zstandard-0.7.0-cp26-cp26m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4beb881c1b5af25a85bd978c969b181f",
          "sha256": "1b53836562d88a6cde5201c82e0d9217d4c891aa2fe99995825826b50674cb4c"
        },
        "downloads": 11,
        "filename": "zstandard-0.7.0-cp27-cp27m-win32.whl",
        "has_sig": false,
        "md5_digest": "4beb881c1b5af25a85bd978c969b181f",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 239885,
        "upload_time": "2017-02-08T07:19:32",
        "url": "https://files.pythonhosted.org/packages/a5/ac/b98fc7a54e5a926c1775c7eddb89cc986b20dd123a63dfd7b4dcdf5e5e67/zstandard-0.7.0-cp27-cp27m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "14fa99777a0db62c6b7590ff0d32c97c",
          "sha256": "1d7f20532b9a19942ce4ca3ccba9060279adea906bee8f5fdaf80b8357dc1b02"
        },
        "downloads": 10,
        "filename": "zstandard-0.7.0-cp27-cp27m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "14fa99777a0db62c6b7590ff0d32c97c",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 285379,
        "upload_time": "2017-02-08T07:19:34",
        "url": "https://files.pythonhosted.org/packages/a6/d2/d3407e8bbec12c25ac5e1a939122fc77d7fc3377e3951c818a6792f2a98c/zstandard-0.7.0-cp27-cp27m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c7ebc74db9fbc8e1f02ad040085e474a",
          "sha256": "629d00bfa0293ef3216438ccf28d1a1544f3c90fdd3f3e9da53719384ca5c8e2"
        },
        "downloads": 10,
        "filename": "zstandard-0.7.0-cp33-cp33m-win32.whl",
        "has_sig": false,
        "md5_digest": "c7ebc74db9fbc8e1f02ad040085e474a",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 244256,
        "upload_time": "2017-02-08T07:19:35",
        "url": "https://files.pythonhosted.org/packages/ca/4d/523d2c142198cc141f0f6157c4350ac4ed24704d98482ddadce4e090ac1c/zstandard-0.7.0-cp33-cp33m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2682564a6985978c265aed7c9144fab0",
          "sha256": "07458893b1805287f4d8d60bfca3bef338ce9884f22885b71377f1e8e98dc932"
        },
        "downloads": 10,
        "filename": "zstandard-0.7.0-cp33-cp33m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "2682564a6985978c265aed7c9144fab0",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 289287,
        "upload_time": "2017-02-08T07:19:37",
        "url": "https://files.pythonhosted.org/packages/21/20/8cf1eaf09f62f957dd57957bab5d1cf47181e566c1020c13d3135ace186c/zstandard-0.7.0-cp33-cp33m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b4c539ec696ffd2c358523a3fb92cb1a",
          "sha256": "fb6fa974803506fa17e83b0ea32dd3d6b872f4c29d44f6f4b80a773b10ad7915"
        },
        "downloads": 11,
        "filename": "zstandard-0.7.0-cp34-cp34m-win32.whl",
        "has_sig": false,
        "md5_digest": "b4c539ec696ffd2c358523a3fb92cb1a",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 244241,
        "upload_time": "2017-02-08T07:19:38",
        "url": "https://files.pythonhosted.org/packages/4c/ba/04362e8dbef9b3bcb009ae5db847007a146cb185b3ce41bd2aee3fefc43b/zstandard-0.7.0-cp34-cp34m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9db9118ae3217cd620eacd0647f32b49",
          "sha256": "43014359d6799446bc6ad5f46ebf6c43484bfebd616e9366f12f61010a62aa83"
        },
        "downloads": 11,
        "filename": "zstandard-0.7.0-cp34-cp34m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "9db9118ae3217cd620eacd0647f32b49",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 289221,
        "upload_time": "2017-02-08T07:19:40",
        "url": "https://files.pythonhosted.org/packages/2a/2b/bb2d88a557bc3fd870005d0808589ef322dcd389427b5c75a575e39d62b0/zstandard-0.7.0-cp34-cp34m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "fb30e9b7a2cde877a02270f241b71f2a",
          "sha256": "b877df870edda29f65ede2b2a080ea18d0a47e0a8e94257a18ee1c16981dcbe1"
        },
        "downloads": 11,
        "filename": "zstandard-0.7.0-cp35-cp35m-win32.whl",
        "has_sig": false,
        "md5_digest": "fb30e9b7a2cde877a02270f241b71f2a",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 257870,
        "upload_time": "2017-02-08T07:19:42",
        "url": "https://files.pythonhosted.org/packages/56/73/724d165cef23aca3c9c788181e34a19f653a9c20a53ae4c46351765f9ae3/zstandard-0.7.0-cp35-cp35m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3915fc9f9f6cdd4e7da5ec078a4f7a28",
          "sha256": "b2d25e7dc6de5b40711b53165e7b7f015947704529ba80a919eb642ea4080b00"
        },
        "downloads": 11,
        "filename": "zstandard-0.7.0-cp35-cp35m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "3915fc9f9f6cdd4e7da5ec078a4f7a28",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 300640,
        "upload_time": "2017-02-08T07:19:44",
        "url": "https://files.pythonhosted.org/packages/dd/85/2f8d7de2e9ee68b278397f1859376908b820a67f77aace46a1a3d9f26d99/zstandard-0.7.0-cp35-cp35m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2ab4b19d9fe5b4a63b1a8840b9fe1757",
          "sha256": "6acad62de9bd07378b4525ecd4c93241b039874d9495abe7c14d63ec3769cf10"
        },
        "downloads": 10,
        "filename": "zstandard-0.7.0-cp36-cp36m-win32.whl",
        "has_sig": false,
        "md5_digest": "2ab4b19d9fe5b4a63b1a8840b9fe1757",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "size": 257863,
        "upload_time": "2017-02-08T07:19:46",
        "url": "https://files.pythonhosted.org/packages/12/be/c604be823ea4640b93c377c6687fa065714f337106df701843f73369430b/zstandard-0.7.0-cp36-cp36m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ea49be208971e2c17e9e6af22339689c",
          "sha256": "3ba62346a65f7439c60aeab76c277c7b397c54d78c028d1f96ea1053bf97231f"
        },
        "downloads": 10,
        "filename": "zstandard-0.7.0-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "ea49be208971e2c17e9e6af22339689c",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "size": 300642,
        "upload_time": "2017-02-08T07:19:48",
        "url": "https://files.pythonhosted.org/packages/40/5f/c480539e0b8e13cb2c8b3c45acd4311663110ce534a1d7f74ee3169758b7/zstandard-0.7.0-cp36-cp36m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0c95327cd640711132e16a8281770225",
          "sha256": "29f2babe5828b257a793e077543150e64ab944b9f3cc071fb5cbb6892243645a"
        },
        "downloads": 15,
        "filename": "zstandard-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0c95327cd640711132e16a8281770225",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 427288,
        "upload_time": "2017-02-08T07:01:39",
        "url": "https://files.pythonhosted.org/packages/b2/d1/b86068d710f25c24bf4f8b3efb0c86f528bfe3d2a1e469526de17909acbc/zstandard-0.7.0.tar.gz"
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "90adda5e2d00e3468957edae3a94e3a8",
          "sha256": "c4547b40cd4ace38a8e3ccfd0500c501abe8ffde6df459c01855759d38705169"
        },
        "downloads": 15,
        "filename": "zstandard-0.8.0-cp26-cp26m-win32.whl",
        "has_sig": false,
        "md5_digest": "90adda5e2d00e3468957edae3a94e3a8",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 269694,
        "upload_time": "2017-03-09T01:49:56",
        "url": "https://files.pythonhosted.org/packages/5f/a3/34bdf9764ac88d47e1e8a1a49ef63ab6948a59c81fd6daac4c1539d638e8/zstandard-0.8.0-cp26-cp26m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "56671a93a4b2a381587ccf32257bae10",
          "sha256": "f4f4891dfc65fd5cd71fa0c3b271fc0241b01a09fc7f87eb84d3e38b83a7927a"
        },
        "downloads": 17,
        "filename": "zstandard-0.8.0-cp26-cp26m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "56671a93a4b2a381587ccf32257bae10",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 319458,
        "upload_time": "2017-03-09T01:49:58",
        "url": "https://files.pythonhosted.org/packages/9a/cd/39104196b17a4053e06a86c2213e96f9960a74eb9072b844c8cb05a56f8a/zstandard-0.8.0-cp26-cp26m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "272f4f4fdc405303f884f8223dc6ebcb",
          "sha256": "30fcecdd1f0ae90f67e6f15091cf6ff5aa6fbe735029c18324ce07c807a5b916"
        },
        "downloads": 15,
        "filename": "zstandard-0.8.0-cp27-cp27m-win32.whl",
        "has_sig": false,
        "md5_digest": "272f4f4fdc405303f884f8223dc6ebcb",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 269223,
        "upload_time": "2017-03-09T01:50:01",
        "url": "https://files.pythonhosted.org/packages/3e/6a/b7905d19b0f7e0bd132e358d4edacc0b63947331edfd52c97183288b6638/zstandard-0.8.0-cp27-cp27m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "62c0ba39b6fbac5b436f307b6b0f495d",
          "sha256": "5f9e6abf8331b96a48f24885e1b31a9a8cbd462f3d7da504814266601e4cbf8b"
        },
        "downloads": 17,
        "filename": "zstandard-0.8.0-cp27-cp27m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "62c0ba39b6fbac5b436f307b6b0f495d",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 318879,
        "upload_time": "2017-03-09T01:50:03",
        "url": "https://files.pythonhosted.org/packages/63/57/b3371ce3407868d0507831c3f9ca71cb5d7e5051735e2f5f9f7290abfdb3/zstandard-0.8.0-cp27-cp27m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "55b9e37ee3199c57560fea1f42336d0e",
          "sha256": "2e33bfd4cca546cb0c820763989ff894e7cb37cb49466a6665732159560655c7"
        },
        "downloads": 16,
        "filename": "zstandard-0.8.0-cp33-cp33m-win32.whl",
        "has_sig": false,
        "md5_digest": "55b9e37ee3199c57560fea1f42336d0e",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 273870,
        "upload_time": "2017-03-09T01:50:05",
        "url": "https://files.pythonhosted.org/packages/36/04/c035b92db2a1ab785abda377cfad9c4b0bedf644a1f3bf07e0c0b43461af/zstandard-0.8.0-cp33-cp33m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e3489c9e4044bba87ba8057e9548b33e",
          "sha256": "309677a8e33dd161b274d9d49456bb464fbd7ecadf2cd2ad4e59ace418e64b98"
        },
        "downloads": 14,
        "filename": "zstandard-0.8.0-cp33-cp33m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "e3489c9e4044bba87ba8057e9548b33e",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 323020,
        "upload_time": "2017-03-09T01:50:07",
        "url": "https://files.pythonhosted.org/packages/80/60/671dc0e6496c1f12d9b39bba0afe5b300968dcf1d6ab0fadc648c1ad634f/zstandard-0.8.0-cp33-cp33m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "26f8c275f2ebee6e726963d5d3dfd609",
          "sha256": "c69395dfadbf7c3650544c0549dea20e0dcdd78f5147a1e026486de5f3d50f08"
        },
        "downloads": 16,
        "filename": "zstandard-0.8.0-cp34-cp34m-win32.whl",
        "has_sig": false,
        "md5_digest": "26f8c275f2ebee6e726963d5d3dfd609",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 273819,
        "upload_time": "2017-03-09T01:50:10",
        "url": "https://files.pythonhosted.org/packages/f7/db/048450bd4c225fb725725abda10a66049afef32b61d477a6b91a0fdd6e14/zstandard-0.8.0-cp34-cp34m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a11fb5c160c08fbbc9eb8f7b69d14310",
          "sha256": "1116f8988e122fa0c22a38650a7b0b947e17290abae6fd2fee759234d100026a"
        },
        "downloads": 15,
        "filename": "zstandard-0.8.0-cp34-cp34m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "a11fb5c160c08fbbc9eb8f7b69d14310",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 322919,
        "upload_time": "2017-03-09T01:50:12",
        "url": "https://files.pythonhosted.org/packages/4e/10/bfba4f3005a0f7b709af74eeff0aa0413c573babb85af6c0e7a4e3c65eab/zstandard-0.8.0-cp34-cp34m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "30d949312955bb6862cd5285e3cc027d",
          "sha256": "a9bc45ee43437e5d9d79dad4dbff7e31ef95cf410a6d44409591df3e1584f4a4"
        },
        "downloads": 16,
        "filename": "zstandard-0.8.0-cp35-cp35m-win32.whl",
        "has_sig": false,
        "md5_digest": "30d949312955bb6862cd5285e3cc027d",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 289311,
        "upload_time": "2017-03-09T01:50:14",
        "url": "https://files.pythonhosted.org/packages/05/38/3002a3dbe37fc45b69eb41c49a71386ef362905f6bbe19e66d204bdd98fb/zstandard-0.8.0-cp35-cp35m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3aa9192f48f527c821005916d8f98d26",
          "sha256": "353e6382e5a996fc5e989e4b2f94b935cf8def9ff9826056459ce9d376e072e4"
        },
        "downloads": 16,
        "filename": "zstandard-0.8.0-cp35-cp35m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "3aa9192f48f527c821005916d8f98d26",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 337778,
        "upload_time": "2017-03-09T01:50:16",
        "url": "https://files.pythonhosted.org/packages/29/fc/1f6955aa6dc95bb396ec8ce17ee2de664364a2f377f5d6c5f35220876c95/zstandard-0.8.0-cp35-cp35m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "58797d59b877775ece8f3c64fdf23774",
          "sha256": "19bb34bf6d98afa1a0eb2dbbac78129af9401c979ce154a8e675193a852d99db"
        },
        "downloads": 16,
        "filename": "zstandard-0.8.0-cp36-cp36m-win32.whl",
        "has_sig": false,
        "md5_digest": "58797d59b877775ece8f3c64fdf23774",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "size": 289314,
        "upload_time": "2017-03-09T01:50:18",
        "url": "https://files.pythonhosted.org/packages/d0/74/0e63f1722fbf1a3ac26588843d1011ef3127db6f81e23a713bb55618cd39/zstandard-0.8.0-cp36-cp36m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a3cc72fa202cfc4620cb7fd60ee1d931",
          "sha256": "c5b40604e32790339578c2c81db2583889f5d9f01fae4c4737f2739981b7d457"
        },
        "downloads": 14,
        "filename": "zstandard-0.8.0-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "a3cc72fa202cfc4620cb7fd60ee1d931",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "size": 337775,
        "upload_time": "2017-03-09T01:50:19",
        "url": "https://files.pythonhosted.org/packages/f5/ca/7800673e4c45140dab5905b78d15e2c3cbe7c8320d187522a6b65dbd14d2/zstandard-0.8.0-cp36-cp36m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b28212c36510f987e4da00e8604aac99",
          "sha256": "455751752f9d185b169e45bfd4a437d9473ef944ddd7313c8f15bdd466cd8d6c"
        },
        "downloads": 57,
        "filename": "zstandard-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b28212c36510f987e4da00e8604aac99",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 463794,
        "upload_time": "2017-03-09T01:49:40",
        "url": "https://files.pythonhosted.org/packages/7b/75/ffecd0a26fd347bf1fcdf290714a614c1a86cc1fc0010e43f73c5e399914/zstandard-0.8.0.tar.gz"
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f1250556851546549b4dd6aeddb2978b",
          "sha256": "86b55ff7faaac4682c7e3ffface667c1180d71936d93fca574e835fa3e24672e"
        },
        "downloads": 0,
        "filename": "zstandard-0.8.1-cp26-cp26m-win32.whl",
        "has_sig": false,
        "md5_digest": "f1250556851546549b4dd6aeddb2978b",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 269694,
        "upload_time": "2017-04-08T23:55:21",
        "url": "https://files.pythonhosted.org/packages/ec/d7/f48300078f52ed7895f2c62b512624adade9a309cac7b5393dc9e3a5bc69/zstandard-0.8.1-cp26-cp26m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4ff604add1f8a6a752005ee5a2b3dcd6",
          "sha256": "7eed815a8ade917393db420a5b4913cbf5f741a164807e493d24deb3a67440df"
        },
        "downloads": 0,
        "filename": "zstandard-0.8.1-cp26-cp26m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "4ff604add1f8a6a752005ee5a2b3dcd6",
        "packagetype": "bdist_wheel",
        "python_version": "cp26",
        "size": 319462,
        "upload_time": "2017-04-08T23:55:25",
        "url": "https://files.pythonhosted.org/packages/3e/fd/3919638a9a22b0c9109ff4585218c232efa6fb8e85c444c9e692d6c68c6a/zstandard-0.8.1-cp26-cp26m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "7495378291fa04bec108b57252970b29",
          "sha256": "0cc9c79a704613a1b2be1f64a0a686752c6794a5d969ffa494d666ed2996683e"
        },
        "downloads": 0,
        "filename": "zstandard-0.8.1-cp27-cp27m-win32.whl",
        "has_sig": false,
        "md5_digest": "7495378291fa04bec108b57252970b29",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 269221,
        "upload_time": "2017-04-08T23:55:28",
        "url": "https://files.pythonhosted.org/packages/5d/17/0aa211e944be03ef1acd3ed3be379b9c86645605ae9c781c6d9187584f1e/zstandard-0.8.1-cp27-cp27m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "00ec9b846632a49271835d63da1adc5d",
          "sha256": "175c1b3e984d79ba44ca2674110bda46490f4f7399edff954e59cdb3d8b7856a"
        },
        "downloads": 0,
        "filename": "zstandard-0.8.1-cp27-cp27m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "00ec9b846632a49271835d63da1adc5d",
        "packagetype": "bdist_wheel",
        "python_version": "cp27",
        "size": 318882,
        "upload_time": "2017-04-08T23:55:30",
        "url": "https://files.pythonhosted.org/packages/63/14/1f104373ef4c87b019f990d5b8132bbe48237fc63d19827e4dce2898ccf4/zstandard-0.8.1-cp27-cp27m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "69544e8ad5ad3b9b6ee1f7aadffd6f26",
          "sha256": "672c1741af022017f77ff1248abdee57f68d6099e3159d66a062b8b311353365"
        },
        "downloads": 0,
        "filename": "zstandard-0.8.1-cp33-cp33m-win32.whl",
        "has_sig": false,
        "md5_digest": "69544e8ad5ad3b9b6ee1f7aadffd6f26",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 273865,
        "upload_time": "2017-04-08T23:55:33",
        "url": "https://files.pythonhosted.org/packages/c5/bc/0dc6c25e336d7a77919fcd21e29ed603c2c67250e2f67b835bf8c1e807e9/zstandard-0.8.1-cp33-cp33m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "07bde8ec86bd32744e2abe02a76cbc59",
          "sha256": "4f60c561e17c1072f8731de3b06029680dcd6f4c6403615c487ed0bcba0d1d24"
        },
        "downloads": 0,
        "filename": "zstandard-0.8.1-cp33-cp33m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "07bde8ec86bd32744e2abe02a76cbc59",
        "packagetype": "bdist_wheel",
        "python_version": "cp33",
        "size": 323020,
        "upload_time": "2017-04-08T23:55:35",
        "url": "https://files.pythonhosted.org/packages/61/26/f93f0ab3f0e5166af4b192f78d21dbb24a6ad552eee13d5b08193c624655/zstandard-0.8.1-cp33-cp33m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9d6e844de589924925488bcea7a0b4eb",
          "sha256": "c3b8a111ad20f028883e96a2b49ce027afe31a88850112db207d3d5dacb0f622"
        },
        "downloads": 0,
        "filename": "zstandard-0.8.1-cp34-cp34m-win32.whl",
        "has_sig": false,
        "md5_digest": "9d6e844de589924925488bcea7a0b4eb",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 273818,
        "upload_time": "2017-04-08T23:55:38",
        "url": "https://files.pythonhosted.org/packages/91/8d/d84144f91c2d9a4db8c2d5abbf2c675502fdbddecdd6887f74f441e005d6/zstandard-0.8.1-cp34-cp34m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "501eb7b471587f81bcf32d13be111d0c",
          "sha256": "d386623dd4e667f8da8efa69ac5a3bf28efa320e8b4a48cb9bcfc7eb5f51c3c8"
        },
        "downloads": 0,
        "filename": "zstandard-0.8.1-cp34-cp34m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "501eb7b471587f81bcf32d13be111d0c",
        "packagetype": "bdist_wheel",
        "python_version": "cp34",
        "size": 322918,
        "upload_time": "2017-04-08T23:55:40",
        "url": "https://files.pythonhosted.org/packages/61/90/e00d0d8b29b17f00d8f3a354823a40373b74204752a4070bea57bf26b9a7/zstandard-0.8.1-cp34-cp34m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "99d432fcb106b12aacd512769bde0798",
          "sha256": "1d468404eed08667a3cf060f7b79ab8e7d3e46758ab79f9520971a392e49dbae"
        },
        "downloads": 0,
        "filename": "zstandard-0.8.1-cp35-cp35m-win32.whl",
        "has_sig": false,
        "md5_digest": "99d432fcb106b12aacd512769bde0798",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 289311,
        "upload_time": "2017-04-08T23:55:43",
        "url": "https://files.pythonhosted.org/packages/04/c1/6c886a639915b251c29bf98171f3b1178511ced26c3086a625f1c1e2dc6b/zstandard-0.8.1-cp35-cp35m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2346ddabe2fa2f661922b31d0c153e2d",
          "sha256": "3e0a8fa28657453e62855bba79e25d09d85dad84d4f16264d17e44db84944f7c"
        },
        "downloads": 0,
        "filename": "zstandard-0.8.1-cp35-cp35m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "2346ddabe2fa2f661922b31d0c153e2d",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 337778,
        "upload_time": "2017-04-08T23:55:46",
        "url": "https://files.pythonhosted.org/packages/8c/08/dbd2a0c4535805c6271f5dc4cc4886ddda8150bf9627bf1a23a1dd2b88fa/zstandard-0.8.1-cp35-cp35m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "af445bbeeb47f9f2ec7a491d658011c5",
          "sha256": "45c8ed764c3ba38a88d1e16649167b8f188d8fe4824687ea645662c0fa311372"
        },
        "downloads": 0,
        "filename": "zstandard-0.8.1-cp36-cp36m-win32.whl",
        "has_sig": false,
        "md5_digest": "af445bbeeb47f9f2ec7a491d658011c5",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "size": 289312,
        "upload_time": "2017-04-08T23:55:48",
        "url": "https://files.pythonhosted.org/packages/df/bf/a207a4b45dd97ce99487dc79a8fedcac8e9c9dea63bf7e09ebd8126edae4/zstandard-0.8.1-cp36-cp36m-win32.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "14605b73fbbc31e686b0527d1e7fe5a2",
          "sha256": "09bb81b4deee9473c311eaa2d18fef8d564a633f3ead38cd480f60503eec39d3"
        },
        "downloads": 0,
        "filename": "zstandard-0.8.1-cp36-cp36m-win_amd64.whl",
        "has_sig": false,
        "md5_digest": "14605b73fbbc31e686b0527d1e7fe5a2",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "size": 337776,
        "upload_time": "2017-04-08T23:55:52",
        "url": "https://files.pythonhosted.org/packages/ff/ba/815495aa9a302c3651302abc2f928f9c71aeae2b6b7c85bf9c61f184e6a0/zstandard-0.8.1-cp36-cp36m-win_amd64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f97ba5cb2929f70468b32c7c5c8e7ab4",
          "sha256": "d8df3b40fed5c0a5d15b36e698b0286323170086b2034e5d52465fa3c1ce2429"
        },
        "downloads": 0,
        "filename": "zstandard-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f97ba5cb2929f70468b32c7c5c8e7ab4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 463785,
        "upload_time": "2017-04-08T23:55:11",
        "url": "https://files.pythonhosted.org/packages/92/17/84ce378990e15d856ffa976e46277a7b19210db530234d2f624449510959/zstandard-0.8.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f1250556851546549b4dd6aeddb2978b",
        "sha256": "86b55ff7faaac4682c7e3ffface667c1180d71936d93fca574e835fa3e24672e"
      },
      "downloads": 0,
      "filename": "zstandard-0.8.1-cp26-cp26m-win32.whl",
      "has_sig": false,
      "md5_digest": "f1250556851546549b4dd6aeddb2978b",
      "packagetype": "bdist_wheel",
      "python_version": "cp26",
      "size": 269694,
      "upload_time": "2017-04-08T23:55:21",
      "url": "https://files.pythonhosted.org/packages/ec/d7/f48300078f52ed7895f2c62b512624adade9a309cac7b5393dc9e3a5bc69/zstandard-0.8.1-cp26-cp26m-win32.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "4ff604add1f8a6a752005ee5a2b3dcd6",
        "sha256": "7eed815a8ade917393db420a5b4913cbf5f741a164807e493d24deb3a67440df"
      },
      "downloads": 0,
      "filename": "zstandard-0.8.1-cp26-cp26m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "4ff604add1f8a6a752005ee5a2b3dcd6",
      "packagetype": "bdist_wheel",
      "python_version": "cp26",
      "size": 319462,
      "upload_time": "2017-04-08T23:55:25",
      "url": "https://files.pythonhosted.org/packages/3e/fd/3919638a9a22b0c9109ff4585218c232efa6fb8e85c444c9e692d6c68c6a/zstandard-0.8.1-cp26-cp26m-win_amd64.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "7495378291fa04bec108b57252970b29",
        "sha256": "0cc9c79a704613a1b2be1f64a0a686752c6794a5d969ffa494d666ed2996683e"
      },
      "downloads": 0,
      "filename": "zstandard-0.8.1-cp27-cp27m-win32.whl",
      "has_sig": false,
      "md5_digest": "7495378291fa04bec108b57252970b29",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "size": 269221,
      "upload_time": "2017-04-08T23:55:28",
      "url": "https://files.pythonhosted.org/packages/5d/17/0aa211e944be03ef1acd3ed3be379b9c86645605ae9c781c6d9187584f1e/zstandard-0.8.1-cp27-cp27m-win32.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "00ec9b846632a49271835d63da1adc5d",
        "sha256": "175c1b3e984d79ba44ca2674110bda46490f4f7399edff954e59cdb3d8b7856a"
      },
      "downloads": 0,
      "filename": "zstandard-0.8.1-cp27-cp27m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "00ec9b846632a49271835d63da1adc5d",
      "packagetype": "bdist_wheel",
      "python_version": "cp27",
      "size": 318882,
      "upload_time": "2017-04-08T23:55:30",
      "url": "https://files.pythonhosted.org/packages/63/14/1f104373ef4c87b019f990d5b8132bbe48237fc63d19827e4dce2898ccf4/zstandard-0.8.1-cp27-cp27m-win_amd64.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "69544e8ad5ad3b9b6ee1f7aadffd6f26",
        "sha256": "672c1741af022017f77ff1248abdee57f68d6099e3159d66a062b8b311353365"
      },
      "downloads": 0,
      "filename": "zstandard-0.8.1-cp33-cp33m-win32.whl",
      "has_sig": false,
      "md5_digest": "69544e8ad5ad3b9b6ee1f7aadffd6f26",
      "packagetype": "bdist_wheel",
      "python_version": "cp33",
      "size": 273865,
      "upload_time": "2017-04-08T23:55:33",
      "url": "https://files.pythonhosted.org/packages/c5/bc/0dc6c25e336d7a77919fcd21e29ed603c2c67250e2f67b835bf8c1e807e9/zstandard-0.8.1-cp33-cp33m-win32.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "07bde8ec86bd32744e2abe02a76cbc59",
        "sha256": "4f60c561e17c1072f8731de3b06029680dcd6f4c6403615c487ed0bcba0d1d24"
      },
      "downloads": 0,
      "filename": "zstandard-0.8.1-cp33-cp33m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "07bde8ec86bd32744e2abe02a76cbc59",
      "packagetype": "bdist_wheel",
      "python_version": "cp33",
      "size": 323020,
      "upload_time": "2017-04-08T23:55:35",
      "url": "https://files.pythonhosted.org/packages/61/26/f93f0ab3f0e5166af4b192f78d21dbb24a6ad552eee13d5b08193c624655/zstandard-0.8.1-cp33-cp33m-win_amd64.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "9d6e844de589924925488bcea7a0b4eb",
        "sha256": "c3b8a111ad20f028883e96a2b49ce027afe31a88850112db207d3d5dacb0f622"
      },
      "downloads": 0,
      "filename": "zstandard-0.8.1-cp34-cp34m-win32.whl",
      "has_sig": false,
      "md5_digest": "9d6e844de589924925488bcea7a0b4eb",
      "packagetype": "bdist_wheel",
      "python_version": "cp34",
      "size": 273818,
      "upload_time": "2017-04-08T23:55:38",
      "url": "https://files.pythonhosted.org/packages/91/8d/d84144f91c2d9a4db8c2d5abbf2c675502fdbddecdd6887f74f441e005d6/zstandard-0.8.1-cp34-cp34m-win32.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "501eb7b471587f81bcf32d13be111d0c",
        "sha256": "d386623dd4e667f8da8efa69ac5a3bf28efa320e8b4a48cb9bcfc7eb5f51c3c8"
      },
      "downloads": 0,
      "filename": "zstandard-0.8.1-cp34-cp34m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "501eb7b471587f81bcf32d13be111d0c",
      "packagetype": "bdist_wheel",
      "python_version": "cp34",
      "size": 322918,
      "upload_time": "2017-04-08T23:55:40",
      "url": "https://files.pythonhosted.org/packages/61/90/e00d0d8b29b17f00d8f3a354823a40373b74204752a4070bea57bf26b9a7/zstandard-0.8.1-cp34-cp34m-win_amd64.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "99d432fcb106b12aacd512769bde0798",
        "sha256": "1d468404eed08667a3cf060f7b79ab8e7d3e46758ab79f9520971a392e49dbae"
      },
      "downloads": 0,
      "filename": "zstandard-0.8.1-cp35-cp35m-win32.whl",
      "has_sig": false,
      "md5_digest": "99d432fcb106b12aacd512769bde0798",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "size": 289311,
      "upload_time": "2017-04-08T23:55:43",
      "url": "https://files.pythonhosted.org/packages/04/c1/6c886a639915b251c29bf98171f3b1178511ced26c3086a625f1c1e2dc6b/zstandard-0.8.1-cp35-cp35m-win32.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "2346ddabe2fa2f661922b31d0c153e2d",
        "sha256": "3e0a8fa28657453e62855bba79e25d09d85dad84d4f16264d17e44db84944f7c"
      },
      "downloads": 0,
      "filename": "zstandard-0.8.1-cp35-cp35m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "2346ddabe2fa2f661922b31d0c153e2d",
      "packagetype": "bdist_wheel",
      "python_version": "cp35",
      "size": 337778,
      "upload_time": "2017-04-08T23:55:46",
      "url": "https://files.pythonhosted.org/packages/8c/08/dbd2a0c4535805c6271f5dc4cc4886ddda8150bf9627bf1a23a1dd2b88fa/zstandard-0.8.1-cp35-cp35m-win_amd64.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "af445bbeeb47f9f2ec7a491d658011c5",
        "sha256": "45c8ed764c3ba38a88d1e16649167b8f188d8fe4824687ea645662c0fa311372"
      },
      "downloads": 0,
      "filename": "zstandard-0.8.1-cp36-cp36m-win32.whl",
      "has_sig": false,
      "md5_digest": "af445bbeeb47f9f2ec7a491d658011c5",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "size": 289312,
      "upload_time": "2017-04-08T23:55:48",
      "url": "https://files.pythonhosted.org/packages/df/bf/a207a4b45dd97ce99487dc79a8fedcac8e9c9dea63bf7e09ebd8126edae4/zstandard-0.8.1-cp36-cp36m-win32.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "14605b73fbbc31e686b0527d1e7fe5a2",
        "sha256": "09bb81b4deee9473c311eaa2d18fef8d564a633f3ead38cd480f60503eec39d3"
      },
      "downloads": 0,
      "filename": "zstandard-0.8.1-cp36-cp36m-win_amd64.whl",
      "has_sig": false,
      "md5_digest": "14605b73fbbc31e686b0527d1e7fe5a2",
      "packagetype": "bdist_wheel",
      "python_version": "cp36",
      "size": 337776,
      "upload_time": "2017-04-08T23:55:52",
      "url": "https://files.pythonhosted.org/packages/ff/ba/815495aa9a302c3651302abc2f928f9c71aeae2b6b7c85bf9c61f184e6a0/zstandard-0.8.1-cp36-cp36m-win_amd64.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "f97ba5cb2929f70468b32c7c5c8e7ab4",
        "sha256": "d8df3b40fed5c0a5d15b36e698b0286323170086b2034e5d52465fa3c1ce2429"
      },
      "downloads": 0,
      "filename": "zstandard-0.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f97ba5cb2929f70468b32c7c5c8e7ab4",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 463785,
      "upload_time": "2017-04-08T23:55:11",
      "url": "https://files.pythonhosted.org/packages/92/17/84ce378990e15d856ffa976e46277a7b19210db530234d2f624449510959/zstandard-0.8.1.tar.gz"
    }
  ]
}