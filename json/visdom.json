{
  "info": {
    "author": "Allan Jabri, Jack Urbanek",
    "author_email": "jju@fb.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# **Visdom**\n\n![visdom_big](https://lh3.googleusercontent.com/-bqH9UXCw-BE/WL2UsdrrbAI/AAAAAAAAnYc/emrxwCmnrW4_CLTyyUttB0SYRJ-i4CCiQCLcB/s0/Screen+Shot+2017-03-06+at+10.51.02+AM.png\"visdom_big\")\n\nA flexible tool for creating, organizing, and sharing visualizations of live, rich data. Supports Torch and Numpy.\n\n* [Overview](#overview)\n* [Concepts](#concepts)\n* [Setup](#setup)\n* [Usage](#usage)\n* [API](#api)\n* [To Do](#to-do)\n* [Contributing](#contributing)\n\n\n## Overview\n\nVisdom aims to facilitate visualization of (remote) data with an emphasis on supporting scientific experimentation.\n\n<p align=\"center\"><img src=\"https://lh3.googleusercontent.com/-h3HuvbU2V0SfgqgXGiK3LPghE5vqvS0pzpObS0YgG_LABMFk62JCa3KVu_2NV_4LJKaAa5-tg=s0\" width=\"500\"  /></p>\n\nBroadcast visualizations of plots, images, and text for yourself and your collaborators.\n\n<p align=\"center\"><img src=\"https://thumbs.gfycat.com/SlipperySecondhandGemsbuck-size_restricted.gif\" width=\"500\" /></p>\n\nOrganize your visualization space programmatically or through the UI to create dashboards for live data, inspect results of experiments, or debug experimental code.\n\n<p align=\"center\"><img align=\"center\" src=\"https://lh3.googleusercontent.com/-IHexvZ-FMtk/WLTXBgQlijI/AAAAAAAAm_s/514LM8R1XFgyNKPVMf4tNwYluZsHsC63wCLcB/s0/Screen+Shot+2017-02-27+at+3.15.27+PM.png\" width=\"500\" /></p>\n\n\n\n <br/>\n\n## Concepts\nVisdom has a simple set of features that can be composed for various use-cases.\n\n### Panes\n<p align=\"center\"><img align=\"center\" src=\"https://lh3.googleusercontent.com/-kLnogsg9RCs/WLx34PEsGWI/AAAAAAAAnSs/7t_62pbfmfoEBnkcbKTXIqz0WM8pQJHVQCLcB/s0/Screen+Shot+2017-03-05+at+3.34.43+PM.png\" width=\"500\" /></p>\n\n\nThe UI begins as a blank slate -- you can populate it with plots, images, and text. These appear in windows that you can drag, drop, resize, and destroy. The windows live in `envs` and the state of `envs` is stored across sessions. You can download the content of windows -- including your plots in `svg`.\n\n\n\n> **Tip**: You can use the zoom of your browser to adjust the scale of the UI.\n\n\n\n### Environments\n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/1276867/34618198-fc63976c-f20b-11e7-9c0d-060132fdb37e.png\" width=\"300\" /></p>\n\nYou can partition your visualization space with `envs`. By default, every user will have an env called `main`. New envs can be created in the UI or programmatically. The state of envs is chronically saved. Environments are able to keep entirely different pools of plots.\n\nYou can access a specific env via url: `http://localhost.com:8097/env/main`. If your server is hosted, you can share this url so others can see your visualizations too.\n\n#### Selecting Environments\n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/1276867/34618242-261d55d4-f20c-11e7-820d-c16731248b26.png\" width=\"300\" /></p>\n\nFrom the main page it is possible to toggle between different environments using the environment selector. Selecting a new environment will query the server for the plots that exist in that environment.\n\n#### Clearing Environments\nYou can use the eraser button to remove all of the current contents of an environment. This closes the plot panes for that environment but keeps the empty environment for new plots.\n\n#### Managing Environments\n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/1276867/34618262-3bb635c8-f20c-11e7-9370-9facfde0cfb7.png\" width=\"400\" /></p>\n\nPressing the folder icon opens a dialog that allows you to fork or force save the current environment, or delete any of your existing environments. Use of this feature is fully described in the **State** section.\n\n>**Env Files:**\n>Your envs are loaded at initialization of the server, by default from `$HOME/.visdom/`. Custom paths can be passed as a cmd-line argument. Envs are removed by using the delete button or by deleting the corresponding `.json` file from the env dir.\n\n### State\nOnce you've created a few visualizations, state is maintained. The server automatically caches your visualizations -- if you reload the page, your visualizations reappear.\n\n<p align=\"center\"><img align=\"center\" src=\"https://lh3.googleusercontent.com/-ZKeFJfMe5S4/WLXebiNgFwI/AAAAAAAAnFI/AH2cGsf40hEWbH6UeclYQcZPS0YZbcayQCLcB/s0/env_fork_2.gif\" width=\"400\" /></p>\n\n* **Save:** You can manually do so with the `save` button. This will serialize the env's state (to disk, in JSON), including window positions. You can save an `env` programmatically.\n<br/>This is helpful for more sophisticated visualizations in which configuration is meaningful, e.g. a data-rich demo, a model training dashboard, or systematic experimentation. This also makes them easy to share and reuse.\n\n\n* **Fork:** If you enter a new env name, saving will create a new env -- effectively **forking** the previous env.\n\n> **Tip**: Fork an environment before you begin to make edits to ensure that your changes are saved seperately.\n\n### Filter\nYou can use the `filter` to dynamically sift through windows present in an env -- just provide a regular expression with which to match titles of window you want to show. This can be helpful in use cases involving an env with many windows e.g. when systematically checking experimental results.\n\n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/1276867/34618118-b86cb138-f20b-11e7-834d-b7d7039313f0.png\" width=\"300\" /></p>\n\n### [BETA] Views\n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/1276867/34618173-e2546f40-f20b-11e7-9969-16267891fb53.png\" width=\"300\" /></p>\n\nIt is possible to manage the views simply by dragging the tops of windows around, however additional features exist to keep views organized and save common views. View management can be useful for saving and switching between multiple common organizations of your windows.\n\n#### Saving/Deleting Views\nUsing the folder icon, a dialog window opens where views can be forked in the same way that envs can be. Saving a view will retain the position and sizes of all of the panes in a given environment.\n\n> **Note**: Saved views are static, and editing a saved view copies that view over to the `current` view where editing can occur.\n\n> **Warning**: Saved views are currently only saved locally, and are lost on page refresh. Saving to server is coming soon.\n\n#### Re-Packing\nUsing the repack icon (9 boxes), visdom will attempt to pack your windows in a way that they best fit while retaining row/column ordering.\n\n> **Note**: Due to the reliance on row/column ordering and `ReactGridLayout` the final layout might be slightly different than what might be expected. We're working on improving that experience or providing alternatives that give more fine-tuned control.\n\n#### Reloading Views\n<p align=\"center\"><img align=\"center\" src=\"https://user-images.githubusercontent.com/1276867/34621042-9c6c05f6-f215-11e7-92c7-60afe2bf7e1e.gif\" width=\"600\" /></p>\n\nUsing the view dropdown it is possible to select previously saved views, restoring the locations and sizes of all of the windows within the current environment to the places they were when that view was saved last.\n\n## Setup\n\nRequires Python 2.7/3 (and optionally Torch7)\n\n```bash\n# Install Python server and client from pip\n# (STABLE VERSION, NOT ALL CURRENT FEATURES ARE SUPPORTED)\npip install visdom\n\n# Install Torch client\n# (STABLE VERSION, NOT ALL CURRENT FEATURES ARE SUPPORTED)\nluarocks install visdom\n\n```\n\n```bash\n# Install python from source\npip install -e .\n# If the above runs into issues, you can try the below\neasy_install .\n\n# Install Torch client from source (from th directory)\nluarocks make\n\n```\n\n## Usage\n\nStart the server (probably in a  `screen` or `tmux`) :\n\n```bash\npython -m visdom.server\n```\n\nVisdom now can be accessed by going to `http://localhost:8097` in your browser, or your own host address if specified.\n\n>If the above does not work, try using an SSH tunnel to your server by adding the following line to your local  `~/.ssh/config`:\n```LocalForward 127.0.0.1:8097 127.0.0.1:8097```.\n\n#### Python example\n```python\nimport visdom\nimport numpy as np\nvis = visdom.Visdom()\nvis.text('Hello, world!')\nvis.image(np.ones((3, 10, 10)))\n```\n\n#### Torch example\n```lua\nrequire 'image'\nvis = require 'visdom'()\nvis:text{text = 'Hello, world!'}\nvis:image{img = image.fabio()}\n```\n\nSome users have reported issues when connecting Lua clients to the Visdom server.\nA potential work-around may be to switch off IPv6:\n```\nvis = require 'visdom'()\nvis.ipv6 = false  -- switches off IPv6\nvis:text{text = 'Hello, world!'}\n```\n\n\n### Demos\n\n```bash\npython example/demo.py\nth example/demo1.lua\nth example/demo2.lua\n```\n\n\n## API\nFor a quick introduction into the capabilities of `visdom`, have a look at the `example` directory, or read the details below.\n\n### Basics\nVisdom offers the following basic visualization functions:\n- [`vis.image`](#visimage)    : image\n- [`vis.images`](#visimages)   : list of images\n- [`vis.text`](#vistext)     : arbitrary HTML\n- [`vis.video`](#visvideo)    : videos\n- [`vis.svg`](#vissvg)      : SVG object\n- [`vis.save`](#vissave)     : serialize state server-side\n\n### Plotting\nWe have wrapped several common plot types to make creating basic visualizations easily. These visualizations are powered by [Plotly](https://plot.ly/).\n\nThe following API is currently supported:\n- [`vis.scatter`](#visscatter)  : 2D or 3D scatter plots\n- [`vis.line`](#visline)     : line plots\n- [`vis.updateTrace`](#visupdatetrace)     : update existing line/scatter plots\n- [`vis.stem`](#visstem)     : stem plots\n- [`vis.heatmap`](#visheatmap)  : heatmap plots\n- [`vis.bar`](#visbar)  : bar graphs\n- [`vis.histogram`](#vishistogram) : histograms\n- [`vis.boxplot`](#visboxplot)  : boxplots\n- [`vis.surf`](#vissurf)     : surface plots\n- [`vis.contour`](#viscontour)  : contour plots\n- [`vis.quiver`](#visquiver)   : quiver plots\n- [`vis.mesh`](#vismesh)     : mesh plots\n\n### Generic Plots\nNote that the server API adheres to the Plotly convention of `data` and `layout` objects, such that you can produce your own arbitrary `Plotly` visualizations:\n\n```python\nimport visdom\nvis = visdom.Visdom()\n\ntrace = dict(x=[1, 2, 3], y=[4, 5, 6], mode=\"markers+lines\", type='custom'\n             marker={'color': 'red', 'symbol': 104, 'size': \"10\"},\n             text=[\"one\", \"two\", \"three\"], name='1st Trace')\nlayout = dict(title=\"First Plot\", xaxis={'title': 'x1'}, yaxis={'title': 'x2'})\n\nvis._send({'data': [trace], 'layout': layout, 'win': 'mywin'})\n```\n\n### Others\n- [`vis.close`](#visclose)    : close a window by id\n- [`vis.win_exists`](#viswin_exists) : check if a window already exists by id\n- [`vis.check_connection`](#vischeck_connection): check if the server is connected\n\n## Details\n![visdom_big](https://lh3.googleusercontent.com/-bqH9UXCw-BE/WL2UsdrrbAI/AAAAAAAAnYc/emrxwCmnrW4_CLTyyUttB0SYRJ-i4CCiQCLcB/s0/Screen+Shot+2017-03-06+at+10.51.02+AM.png\"visdom_big\")\n\n### Basics\n\n#### vis.image\nThis function draws an `img`. It takes as input an `CxHxW` tensor `img`\nthat contains the image.\n\nThe following `opts` are supported:\n\n- `opts.jpgquality`: JPG quality (`number` 0-100; default = 100)\n- `opts.caption`: Caption for the image\n\n#### vis.images\n\nThis function draws a list of `images`. It takes an input `B x C x H x W` tensor or a `list of images` all of the same size. It makes a grid of images of size (B / nrow, nrow).\n\nThe following arguments and `opts` are supported:\n\n- `nrow`: Number of images in a row\n- `padding`: Padding around the image, equal padding around all 4 sides\n- `opts.jpgquality`: JPG quality (`number` 0-100; default = 100)\n- `opts.caption`: Caption for the image\n\n#### vis.text\nThis function prints text in a  box. You can use this to embed arbitrary HTML.\nIt takes as input a `text` string.\nNo specific `opts` are currently supported.\n\n#### vis.video\nThis function plays a video. It takes as input the filename of the video\n`videofile` or a `LxHxWxC`-sized\n`tensor` containing all the frames of the video as input. The\nfunction does not support any plot-specific `opts`.\n\nThe following `opts` are supported:\n\n- `opts.fps`: FPS for the video (`integer` > 0; default = 25)\n\nNote: Using `tensor` input requires that ffmpeg is installed and working.\nYour ability to play video may depend on the browser you use: your browser has\nto support the Theano codec in an OGG container (Chrome supports this).\n\n#### vis.svg\nThis function draws an SVG object. It takes as input a SVG string `svgstr` or\nthe name of an SVG file `svgfile`. The function does not support any specific\n`opts`.\n\n#### vis.save\nThis function saves the `envs` that are alive on the visdom server. It takes input a list (in python) or table (in lua) of env ids to be saved.\n\n### Plotting\nFurther details on the wrapped plotting functions are given below.\n\nThe exact inputs into the plotting functions vary, although most of them take as input a tensor `X` than contains the data and an (optional) tensor `Y` that contains optional data variables (such as labels or timestamps). All plotting functions take as input an optional `win` that can be used to plot into a specific window; each plotting function also returns the `win` of the window it plotted in. One can also specify the `env`  to which the visualization should be added.\n\n#### vis.scatter\n\nThis function draws a 2D or 3D scatter plot. It takes as input an `Nx2` or\n`Nx3` tensor `X` that specifies the locations of the `N` points in the\nscatter plot. An optional `N` tensor `Y` containing discrete labels that\nrange between `1` and `K` can be specified as well -- the labels will be\nreflected in the colors of the markers.\n\n`update` can be used to efficiently update the data of an existing plot. Use 'append' to append data, 'replace' to use new data. If updating a single trace, use `name` to specify the name of the trace to be updated. Update data that is all NaN is ignored (can be used for masking update).\n\nThe following `opts` are supported:\n\n- `opts.colormap`    : colormap (`string`; default = `'Viridis'`)\n- `opts.markersymbol`: marker symbol (`string`; default = `'dot'`)\n- `opts.markersize`  : marker size (`number`; default = `'10'`)\n- `opts.markercolor` : color per marker. (`torch.*Tensor`; default = `nil`)\n- `opts.legend`      : `table` containing legend names\n\n`opts.markercolor` is a Tensor with Integer values. The tensor can be of size `N` or `N x 3` or `K` or `K x 3`.\n\n- Tensor of size `N`: Single intensity value per data point. 0 = black, 255 = red\n- Tensor of size `N x 3`: Red, Green and Blue intensities per data point. 0,0,0 = black, 255,255,255 = white\n- Tensor of size `K` and `K x 3`: Instead of having a unique color per data point, the same color is shared for all points of a particular label.\n\n\n#### vis.line\nThis function draws a line plot. It takes as input an `N` or `NxM` tensor\n`Y` that specifies the values of the `M` lines (that connect `N` points)\nto plot. It also takes an optional `X` tensor that specifies the\ncorresponding x-axis values; `X` can be an `N` tensor (in which case all\nlines will share the same x-axis values) or have the same size as `Y`.\n\n`update` can be used to efficiently update the data of an existing plot. Use 'append' to append data, 'replace' to use new data. If updating a single trace, use `name` to specify the name of the trace to be updated. Update data that is all NaN is ignored (can be used for masking update).\n\nThe following `opts` are supported:\n\n- `opts.fillarea`    : fill area below line (`boolean`)\n- `opts.colormap`    : colormap (`string`; default = `'Viridis'`)\n- `opts.markers`     : show markers (`boolean`; default = `false`)\n- `opts.markersymbol`: marker symbol (`string`; default = `'dot'`)\n- `opts.markersize`  : marker size (`number`; default = `'10'`)\n- `opts.legend`      : `table` containing legend names\n\n\n#### vis.updateTrace\nThis function allows updating of data for extant line or scatter plots.\n\nIt is up to the user to specify `name` of an existing trace if they want\nto add to it, and a new `name` if they want to add a trace to the plot.\nBy default, if no legend is specified at time of first creation,\nthe `name` is the index of the line in the legend.\n\nIf no `name` is specified, all traces should be updated.\nTrace update data that is all `NaN` is ignored;\nthis can be used for masking update.\n\nThe `append` parameter determines if the update data should be appended\nto or replaces existing data.\n\nThere are no `opts` because they are assumed to be inherited from the\nspecified plot.\n\n*Note: This function will be deprecated in upcoming versions.*\n\n#### vis.stem\nThis function draws a stem plot. It takes as input an `N` or `NxM` tensor\n`X` that specifies the values of the `N` points in the `M` time series.\nAn optional `N` or `NxM` tensor `Y` containing timestamps can be specified\nas well; if `Y` is an `N` tensor then all `M` time series are assumed to\nhave the same timestamps.\n\nThe following `opts` are supported:\n\n- `opts.colormap`: colormap (`string`; default = `'Viridis'`)\n- `opts.legend`  : `table` containing legend names\n\n#### vis.heatmap\nThis function draws a heatmap. It takes as input an `NxM` tensor `X` that\nspecifies the value at each location in the heatmap.\n\nThe following `opts` are supported:\n\n- `opts.colormap`   : colormap (`string`; default = `'Viridis'`)\n- `opts.xmin`       : clip minimum value (`number`; default = `X:min()`)\n- `opts.xmax`       : clip maximum value (`number`; default = `X:max()`)\n- `opts.columnnames`: `table` containing x-axis labels\n- `opts.rownames`   : `table` containing y-axis labels\n\n#### vis.bar\nThis function draws a regular, stacked, or grouped bar plot. It takes as\ninput an `N` or `NxM` tensor `X` that specifies the height of each of the\nbars. If `X` contains `M` columns, the values corresponding to each row\nare either stacked or grouped (depending on how `opts.stacked` is\nset). In addition to `X`, an (optional) `N` tensor `Y` can be specified\nthat contains the corresponding x-axis values.\n\nThe following plot-specific `opts` are currently supported:\n\n- `opts.rownames`: `table` containing x-axis labels\n- `opts.stacked`    : stack multiple columns in `X`\n- `opts.legend`     : `table` containing legend labels\n\n#### vis.histogram\nThis function draws a histogram of the specified data. It takes as input\nan `N` tensor `X` that specifies the data of which to construct the\nhistogram.\n\nThe following plot-specific `opts` are currently supported:\n\n- `opts.numbins`: number of bins (`number`; default = 30)\n\n#### vis.boxplot\nThis function draws boxplots of the specified data. It takes as input\nan `N` or an `NxM` tensor `X` that specifies the `N` data values of which\nto construct the `M` boxplots.\n\nThe following plot-specific `opts` are currently supported:\n\n- `opts.legend`: labels for each of the columns in `X`\n\n#### vis.surf\nThis function draws a surface plot. It takes as input an `NxM` tensor `X`\nthat specifies the value at each location in the surface plot.\n\nThe following `opts` are supported:\n\n- `opts.colormap`: colormap (`string`; default = `'Viridis'`)\n- `opts.xmin`    : clip minimum value (`number`; default = `X:min()`)\n- `opts.xmax`    : clip maximum value (`number`; default = `X:max()`)\n\n#### vis.contour\nThis function draws a contour plot. It takes as input an `NxM` tensor `X`\nthat specifies the value at each location in the contour plot.\n\nThe following `opts` are supported:\n\n- `opts.colormap`: colormap (`string`; default = `'Viridis'`)\n- `opts.xmin`    : clip minimum value (`number`; default = `X:min()`)\n- `opts.xmax`    : clip maximum value (`number`; default = `X:max()`)\n\n#### vis.quiver\nThis function draws a quiver plot in which the direction and length of the\narrows is determined by the `NxM` tensors `X` and `Y`. Two optional `NxM`\ntensors `gridX` and `gridY` can be provided that specify the offsets of\nthe arrows; by default, the arrows will be done on a regular grid.\n\nThe following `opts` are supported:\n\n- `opts.normalize`:  length of longest arrows (`number`)\n- `opts.arrowheads`: show arrow heads (`boolean`; default = `true`)\n\n#### vis.mesh\nThis function draws a mesh plot from a set of vertices defined in an\n`Nx2` or `Nx3` matrix `X`, and polygons defined in an optional `Mx2` or\n`Mx3` matrix `Y`.\n\nThe following `opts` are supported:\n\n- `opts.color`: color (`string`)\n- `opts.opacity`: opacity of polygons (`number` between 0 and 1)\n\n### Customizing plots\n\nThe plotting functions take an optional `opts` table as input that can be used to change (generic or plot-specific) properties of the plots. All input arguments are specified in a single table; the input arguments are matches based on the keys they have in the input table.\n\nThe following `opts` are generic in the sense that they are the same for all visualizations (except `plot.image` and `plot.text`):\n\n- `opts.title`       : figure title\n- `opts.width`       : figure width\n- `opts.height`      : figure height\n- `opts.showlegend`  : show legend (`true` or `false`)\n- `opts.xtype`       : type of x-axis (`'linear'` or `'log'`)\n- `opts.xlabel`      : label of x-axis\n- `opts.xtick`       : show ticks on x-axis (`boolean`)\n- `opts.xtickmin`    : first tick on x-axis (`number`)\n- `opts.xtickmax`    : last tick on x-axis (`number`)\n- `opts.xtickvals`   : locations of ticks on x-axis (`table` of `number`s)\n- `opts.xticklabels` : ticks labels on x-axis (`table` of `string`s)\n- `opts.xtickstep`   : distances between ticks on x-axis (`number`)\n- `opts.ytype`       : type of y-axis (`'linear'` or `'log'`)\n- `opts.ylabel`      : label of y-axis\n- `opts.ytick`       : show ticks on y-axis (`boolean`)\n- `opts.ytickmin`    : first tick on y-axis (`number`)\n- `opts.ytickmax`    : last tick on y-axis (`number`)\n- `opts.ytickvals`   : locations of ticks on y-axis (`table` of `number`s)\n- `opts.yticklabels` : ticks labels on y-axis (`table` of `string`s)\n- `opts.ytickstep`   : distances between ticks on y-axis (`number`)\n- `opts.marginleft`  : left margin (in pixels)\n- `opts.marginright` : right margin (in pixels)\n- `opts.margintop`   : top margin (in pixels)\n- `opts.marginbottom`: bottom margin (in pixels)\n\nThe other options are visualization-specific, and are described in the\ndocumentation of the functions.\n\n### Others\n\n#### vis.close\n\nThis function closes a specific window. It takes input window id `win` and environment id `eid`. Use `win` as `None` to close all windows in an environment.\n\n#### vis.win_exists\n\nThis function returns a bool indicating whether or not a window `win` exists on the server already. Returns None if something went wrong.\n\nOptional arguments:\n- `env`: Environment to search for the window in. Default is `None`.\n\n#### vis.check_connection\n\nThis function returns a bool indicating whether or not the server is connected.\n\n## To Do\n\n- [ ] Command line tool for easy systematic plotting from live logs.\n- [ ] Filtering through windows with regex by title (or meta field)\n- [ ] Compiling react by python server at runtime\n\n## Contributing\nSee guidelines for contributing [here.](./CONTRIBUTING.md)\n\n## Acknowledgments\nVisdom was inspired by tools like [display](https://github.com/szym/display) and relies on [Plotly](https://plot.ly/) as a plotting front-end.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/facebookresearch/visdom",
    "keywords": "",
    "license": "CC-BY-4.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "visdom",
    "platform": "",
    "project_url": "https://pypi.org/project/visdom/",
    "release_url": "https://pypi.org/project/visdom/0.1.7/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A tool for visualizing live, rich data for Torch and Numpy",
    "version": "0.1.7"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9c7d6ad497285caf2ffd347f800ee60f",
          "sha256": "30bff9f7ba02017923304a159e4e1383eae85d392c3720f76a66d2e291d9ac05"
        },
        "downloads": -1,
        "filename": "visdom-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9c7d6ad497285caf2ffd347f800ee60f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24698,
        "upload_time": "2017-03-10T05:28:06",
        "url": "https://files.pythonhosted.org/packages/01/1e/a674de42cc497b3395c4d205bf74f8fba317426d9da792293d1788726a2d/visdom-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dec12a7f0bf44ecbd90142f60c6a24b9",
          "sha256": "14e0dcfeb3ced396c81ef5777edaf8f6331fccd379264cd191b9a1bcd1ba047d"
        },
        "downloads": -1,
        "filename": "visdom-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dec12a7f0bf44ecbd90142f60c6a24b9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24698,
        "upload_time": "2017-03-10T05:38:19",
        "url": "https://files.pythonhosted.org/packages/e8/3b/f4ccb3a12e8954a93cf364d5b0db59f954218d3c560b25eaed55d2e5dede/visdom-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cb284db569afde0beee396eac8527f86",
          "sha256": "1bab21571f5d41ecc702a21143c9660ac67fe9e31b076b23b8596cbd81049cad"
        },
        "downloads": -1,
        "filename": "visdom-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cb284db569afde0beee396eac8527f86",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24659,
        "upload_time": "2017-03-10T05:50:11",
        "url": "https://files.pythonhosted.org/packages/da/24/89aecc6192d8120e104d0157be9766ec747a3d1d5d1f78f2a1e38bdbbea6/visdom-0.0.3.tar.gz"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5c56b3121df186f60a0bf3790b115f5f",
          "sha256": "2227303b03f9c0731bacb927aa62df8e6962ef878bda30a1be89060000b938e2"
        },
        "downloads": -1,
        "filename": "visdom-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5c56b3121df186f60a0bf3790b115f5f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24636,
        "upload_time": "2017-03-10T08:12:46",
        "url": "https://files.pythonhosted.org/packages/20/66/a7643457152e6db04dab4cf0792c6468d7bddf7b0f83ff94b766668cf6b0/visdom-0.0.4.tar.gz"
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "37121c7ec433e3885542221a212364a8",
          "sha256": "05817f3a7ded2477ae8bb7673399a4f69c906e5b8e391b8e042d8a9a6c63dd31"
        },
        "downloads": -1,
        "filename": "visdom-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "37121c7ec433e3885542221a212364a8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24471,
        "upload_time": "2017-03-16T15:09:38",
        "url": "https://files.pythonhosted.org/packages/c5/2c/01247408c49ec9201a278733fbe2484cc993c7ff839deeb005a7a732cb4d/visdom-0.0.9.tar.gz"
      }
    ],
    "0.1.01": [
      {
        "comment_text": "",
        "digests": {
          "md5": "065c5428b0c5fc3503c62b042837497a",
          "sha256": "13742f2f097a939144d4352684bbdc0a3208fcd4deb6492508a61875eb2a4e52"
        },
        "downloads": -1,
        "filename": "visdom-0.1.01.tar.gz",
        "has_sig": false,
        "md5_digest": "065c5428b0c5fc3503c62b042837497a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25013,
        "upload_time": "2017-03-19T23:26:10",
        "url": "https://files.pythonhosted.org/packages/b3/a2/d82885adfa342aa49dfab8f217f669e719f99167143246dac83bbd89ce88/visdom-0.1.01.tar.gz"
      }
    ],
    "0.1.02": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dd4d9d52cb174aed282c66b909b0349b",
          "sha256": "aa66985393a9cbdde2571134c9168b58876de771eb98b3bf9e25486e69d25083"
        },
        "downloads": -1,
        "filename": "visdom-0.1.02.tar.gz",
        "has_sig": false,
        "md5_digest": "dd4d9d52cb174aed282c66b909b0349b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26864,
        "upload_time": "2017-03-25T15:19:06",
        "url": "https://files.pythonhosted.org/packages/c3/0a/41966452e53678ba40c3404b119656469b3460adfacb770d774de7e617d6/visdom-0.1.02.tar.gz"
      }
    ],
    "0.1.03": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d9c4b84dd9ad8e42565ac5259f30897f",
          "sha256": "cc4024d40bb9c0f6aee6f2b12851618648354473d5f6c0ce243ffd1594d3ed46"
        },
        "downloads": -1,
        "filename": "visdom-0.1.03.tar.gz",
        "has_sig": false,
        "md5_digest": "d9c4b84dd9ad8e42565ac5259f30897f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29457,
        "upload_time": "2017-04-21T21:12:28",
        "url": "https://files.pythonhosted.org/packages/2f/e3/4d3e1fd5b2ea5d547c0877b0d9ce12fc0c65c2187640edde70273c78a4b8/visdom-0.1.03.tar.gz"
      }
    ],
    "0.1.04": [
      {
        "comment_text": "",
        "digests": {
          "md5": "499d33d51af6add24ff86457ca074c83",
          "sha256": "e031abc993645407c692760ba0d6cd4156ebb8b705e981db26960dd02b7d505a"
        },
        "downloads": -1,
        "filename": "visdom-0.1.04.tar.gz",
        "has_sig": false,
        "md5_digest": "499d33d51af6add24ff86457ca074c83",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29459,
        "upload_time": "2017-04-21T21:32:25",
        "url": "https://files.pythonhosted.org/packages/e0/00/c197e363652b44ea664e68293c5f70d496c856994cda445fdc975acb4636/visdom-0.1.04.tar.gz"
      }
    ],
    "0.1.05": [
      {
        "comment_text": "",
        "digests": {
          "md5": "826910a38b46cd65378cc3b4552e4446",
          "sha256": "08cb193f893da6834ee1b98bda53238f72b33b3fb92c83426d994199a0e80fd8"
        },
        "downloads": -1,
        "filename": "visdom-0.1.05.tar.gz",
        "has_sig": false,
        "md5_digest": "826910a38b46cd65378cc3b4552e4446",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32550,
        "upload_time": "2017-07-25T20:07:33",
        "url": "https://files.pythonhosted.org/packages/5f/bc/cc2b176369402178fb26fd1c365d254f08ab4edab676992d16bb201fbd12/visdom-0.1.05.tar.gz"
      }
    ],
    "0.1.1": [],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "52c8a9e55c2643ce76bb4068e864450c",
          "sha256": "978e2708d44db6ae36835c03f3958617b39d5950f3b9334827d75fcd09c150c5"
        },
        "downloads": -1,
        "filename": "visdom-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "52c8a9e55c2643ce76bb4068e864450c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38310,
        "upload_time": "2017-10-27T13:34:46",
        "url": "https://files.pythonhosted.org/packages/e0/a5/59c3ae47c4833727bf89232b61ed0c6fa9152990f95e3f1c106d433e96e5/visdom-0.1.6.tar.gz"
      }
    ],
    "0.1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fffb06089be382480c29a0db38fbe4b2",
          "sha256": "cf23729d7e8d10fcae879fdcbd814354f0efd015606de5442a87aa83d3dcab2f"
        },
        "downloads": -1,
        "filename": "visdom-0.1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fffb06089be382480c29a0db38fbe4b2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38325,
        "upload_time": "2017-10-27T14:56:24",
        "url": "https://files.pythonhosted.org/packages/18/b2/ffedf7a3aeb602d2f5b057ec185e3151b1a3806fbbd439cccc4fdd50eac9/visdom-0.1.6.1.tar.gz"
      }
    ],
    "0.1.6.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "35052ed1ac4b58b8112566ed2e50f280",
          "sha256": "024a41dc1ec335c3961ab096060e51232a0b765629fea8fbde38de5947565e71"
        },
        "downloads": -1,
        "filename": "visdom-0.1.6.3.tar.gz",
        "has_sig": false,
        "md5_digest": "35052ed1ac4b58b8112566ed2e50f280",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39165,
        "upload_time": "2017-11-17T16:49:53",
        "url": "https://files.pythonhosted.org/packages/ad/0e/8c5c76fa4da12f85f2aae8144e15257250d0dc9d4f9ce51458b23236eb3d/visdom-0.1.6.3.tar.gz"
      }
    ],
    "0.1.6.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "279e5c9a0d9d43afe06f58820273e82a",
          "sha256": "a035a11035fe07cd474e5fc610943c4ff46b7ce8c5830500e7b0377a8bbc2c65"
        },
        "downloads": -1,
        "filename": "visdom-0.1.6.5.tar.gz",
        "has_sig": false,
        "md5_digest": "279e5c9a0d9d43afe06f58820273e82a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39588,
        "upload_time": "2017-12-18T15:53:58",
        "url": "https://files.pythonhosted.org/packages/c8/e7/9cac06a3c1c2749a18644f1658a4e4fb1187d11978d7e504fba849a2fe0f/visdom-0.1.6.5.tar.gz"
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7a280bbe8844f6ddf8d2b424321357e2",
          "sha256": "62732c1e912b8a0819cb3c69a429d0360c291559511ff99932f12bd3f1d1a8bd"
        },
        "downloads": -1,
        "filename": "visdom-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "7a280bbe8844f6ddf8d2b424321357e2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43435,
        "upload_time": "2018-01-10T20:50:34",
        "url": "https://files.pythonhosted.org/packages/0e/f2/27b5d7c34b718afb355587d4e0c1f9108e925db4c0c932e935ba01051efd/visdom-0.1.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7a280bbe8844f6ddf8d2b424321357e2",
        "sha256": "62732c1e912b8a0819cb3c69a429d0360c291559511ff99932f12bd3f1d1a8bd"
      },
      "downloads": -1,
      "filename": "visdom-0.1.7.tar.gz",
      "has_sig": false,
      "md5_digest": "7a280bbe8844f6ddf8d2b424321357e2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 43435,
      "upload_time": "2018-01-10T20:50:34",
      "url": "https://files.pythonhosted.org/packages/0e/f2/27b5d7c34b718afb355587d4e0c1f9108e925db4c0c932e935ba01051efd/visdom-0.1.7.tar.gz"
    }
  ]
}