{
  "info": {
    "author": "Allan Jabri",
    "author_email": "ajabri@fb.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# **Visdom**\n\n![visdom_big](https://lh3.googleusercontent.com/-bqH9UXCw-BE/WL2UsdrrbAI/AAAAAAAAnYc/emrxwCmnrW4_CLTyyUttB0SYRJ-i4CCiQCLcB/s0/Screen+Shot+2017-03-06+at+10.51.02+AM.png\"visdom_big\")\n\nA flexible tool for creating, organizing, and sharing visualizations of live, rich data. Supports Torch and Numpy.\n\n* [Overview](#overview)\n* [Concepts](#concepts)\n* [Setup](#setup)\n* [Usage](#launch)\n* [API](#api)\n* [To Do](#to-do)\n* [Contributing](#contributing)\n\n\n## Overview\n\nVisdom aims to facilitate visualization of (remote) data with an emphasis on supporting scientific experimentation.\n\n<p align=\"center\"><img src=\"https://lh3.googleusercontent.com/-h3HuvbU2V0SfgqgXGiK3LPghE5vqvS0pzpObS0YgG_LABMFk62JCa3KVu_2NV_4LJKaAa5-tg=s0\" width=\"500\"  /></p>\n\nBroadcast visualizations of plots, images, and text for yourself and your collaborators.\n\n<p align=\"center\"><img src=\"https://thumbs.gfycat.com/SlipperySecondhandGemsbuck-size_restricted.gif\" width=\"500\" /></p>\n\nOrganize your visualization space programmatically or through the UI to create dashboards for live data, inspect results of experiments, or debug experimental code.\n\n<p align=\"center\"><img align=\"center\" src=\"https://lh3.googleusercontent.com/-IHexvZ-FMtk/WLTXBgQlijI/AAAAAAAAm_s/514LM8R1XFgyNKPVMf4tNwYluZsHsC63wCLcB/s0/Screen+Shot+2017-02-27+at+3.15.27+PM.png\" width=\"500\" /></p>\n\n\n\n <br/>\n\n## Concepts\nVisdom has a simple set of features that can be composed for various use-cases.\n\n#### Panes\n<p align=\"center\"><img align=\"center\" src=\"https://lh3.googleusercontent.com/-kLnogsg9RCs/WLx34PEsGWI/AAAAAAAAnSs/7t_62pbfmfoEBnkcbKTXIqz0WM8pQJHVQCLcB/s0/Screen+Shot+2017-03-05+at+3.34.43+PM.png\" width=\"500\" /></p>\n\n\nThe UI begins as a blank slate -- you can populate it with plots, images, and text. These appear in panes that you can drag, drop, resize, and destroy. The panes live in `envs` and the state of `envs` is stored across sessions. You can download the content of panes -- including your plots in `svg`.\n\n\n\n> **Tip**: You can use the zoom of your browser to adjust the scale of the UI.\n\n\n\n#### Environments\n<p align=\"center\"><img align=\"center\" src=\"https://lh3.googleusercontent.com/-1wRSpNIoFeo/WLXacodRTMI/AAAAAAAAnEo/sTr5jSnQviA0uLqFIvwPGledmxcpupdkgCLcB/s0/Screen+Shot+2017-02-28+at+2.54.13+PM.png\" width=\"300\" /></p>\n\nYou can partition your visualization space with `envs`. By default, every user will have an env called `main`. New envs can be created in the UI or programmatically. The state of envs is chronically saved.\n\nYou can access a specific env via url: `http://localhost.com:8097/env/main`. If your server is hosted, you can share this url so others can see your visualizations too.\n\n>**Managing Envs:**\n>Your envs are loaded at initialization of the server, by default from `$HOME/.visdom/`. Custom paths can be passed as a cmd-line argument. Envs are removed by deleting the corresponding `.json` file from the env dir.\n\n#### State\nOnce you've created a few visualizations, state is maintained. The server automatically caches your visualizations -- if you reload the page, your visualizations reappear.\n\n<p align=\"center\"><img align=\"center\" src=\"https://lh3.googleusercontent.com/-ZKeFJfMe5S4/WLXebiNgFwI/AAAAAAAAnFI/AH2cGsf40hEWbH6UeclYQcZPS0YZbcayQCLcB/s0/env_fork_2.gif\" width=\"400\" /></p>\n\n* **Save:** You can manually do so with the `save` button. This will serialize the env's state (to disk, in JSON), including window positions. You can save an `env` programmatically.\n<br/>This is helpful for more sophisticated visualizations in which configuration is meaningful, e.g. a data-rich demo, a model training dashboard, or systematic experimentation. This also makes them easy to share and reuse.\n\n\n* **Fork:** If you enter a new env name, saving will create a new env -- effectively **forking** the previous env.\n\n\n## Setup\n\nRequires Python 2.7/3 (and optionally Torch7)\n\n```bash\n# Install Python server and client\npip install visdom\n\n# Install Torch client\nluarocks install visdom\n\n```\n\n## Launch\n\nStart the server (probably in a  `screen` or `tmux`) :\n\n```bash\npython -m visdom.server\n```\n\nVisdom now can be accessed by going to `http://localhost:8097` in your browser, or your own host address if specified.\n\n>If the above does not work, try using an SSH tunnel to your server by adding the following line to your local  `~/.ssh/config`:\n```LocalForward 127.0.0.1:8097 127.0.0.1:8097```.\n\n#### Python example\n```python\nimport visdom\nimport numpy as np\nvis = visdom.Visdom()\nvis.text('Hello, world!')\nvis.image(np.ones((3, 10, 10)))\n```\n\n#### Torch example\n```lua\nrequire 'image'\nvis = require 'visdom'()\nvis:text{text = 'Hello, world!'}\nvis:image{img = image.fabio()}\n```\n\nSome users have reported issues when connecting Lua clients to the Visdom server.\nA potential work-around may be to switch off IPv6:\n```\nvis = require 'visdom'()\nvis.ipv6 = false  -- switches off IPv6\nvis:text{text = 'Hello, world!'}\n```\n\n\n### Demos\n\n```bash\npython example/demo.py\nth example/demo1.lua\nth example/demo2.lua\n```\n\n\n## API\nFor a quick introduction into the capabilities of `visdom`, have a look at the `example` directory, or read the details below.\n\n### Basics\nVisdom offers the following basic visualization functions:\n- `vis.image`    : images\n- `vis.text`     : arbitrary HTML\n- `vis.video`    : videos\n- `vis.svg`      : SVG object\n- `vis.save`     : serialize state server-side\n\n### Plotting\nWe have wrapped several common plot types to make creating basic visualizations easily. These visualizations are powered by [Plotly](https://plot.ly/).\n\nThe following API is currently supported:\n- `vis.scatter`  : 2D or 3D scatter plots\n- `vis.line`     : line plots\n- `vis.updateTrace`     : update existing line/scatter plots\n- `vis.stem`     : stem plots\n- `vis.heatmap`  : heatmap plots\n- `vis.bar`      : bar graphs\n- `vis.histogram`: histograms\n- `vis.boxplot`  : boxplots\n- `vis.surf`     : surface plots\n- `vis.contour`  : contour plots\n- `vis.quiver`   : quiver plots\n- `vis.mesh`     : mesh plots\n\n#### Generic Plots\nNote that the server API adheres to the Plotly convention of `data` and `layout` objects, such that you can produce your own arbitrary `Plotly` visualizations:\n\n```python\nimport visdom\nvis = visdom.Visdom()\n\ntrace = dict(x=[1,2,3], y=[4,5,6], marker={'color': 'red', 'symbol': 104, 'size': \"10\"},\n                    mode=\"markers+lines\",  text=[\"one\",\"two\",\"three\"], name='1st Trace')\nlayout=dict(title=\"First Plot\", xaxis={'title':'x1'}, yaxis={'title':'x2'})\n\nvis._send(data=[trace], layout=layout, win='mywin')\n```\n\n![visdom_big](https://lh3.googleusercontent.com/-bqH9UXCw-BE/WL2UsdrrbAI/AAAAAAAAnYc/emrxwCmnrW4_CLTyyUttB0SYRJ-i4CCiQCLcB/s0/Screen+Shot+2017-03-06+at+10.51.02+AM.png\"visdom_big\")\n\n\n## Details\n\n#### vis.image\nThis function draws an `img`. It takes as input an `CxHxW` tensor `img`\nthat contains the image.\n\nThe following `options` are supported:\n\n- `options.jpgquality`: JPG quality (`number` 0-100; default = 100)\n- `options.caption`: Caption for the image\n\n#### vis.text\nThis function prints text in a  box. You can use this to embed arbitrary HTML.\nIt takes as input a `text` string.\nNo specific `options` are currently supported.\n\n#### vis.video\nThis function plays a video. It takes as input the filename of the video\n`videofile` or a `LxCxHxW`-sized `tensor` (in Lua) or a or a `LxHxWxC`-sized\n`tensor` (in Python) containing all the frames of the video as input. The\nfunction does not support any plot-specific `options`.\n\nNote: Using `tensor` input requires that ffmpeg is installed and working.\nYour ability to play video may depend on the browser you use: your browser has\nto support the Theano codec in an OGG container (Chrome supports this).\n\n#### vis.svg\nThis function draws an SVG object. It takes as input a SVG string `svgstr` or\nthe name of an SVG file `svgfile`. The function does not support any specific\n`options`.\n\n### Simple Plots\nFurther details on the wrapped plotting functions are given below.\n\nThe exact inputs into the plotting functions vary, although most of them take as input a tensor `X` than contains the data and an (optional) tensor `Y` that contains optional data variables (such as labels or timestamps). All plotting functions take as input an optional `win` that can be used to plot into a specific window; each plotting function also returns the `win` of the window it plotted in. One can also specify the `env`  to which the visualization should be added.\n\n#### vis.scatter\nThis function draws a 2D or 3D scatter plot. It takes as input an `Nx2` or\n`Nx3` tensor `X` that specifies the locations of the `N` points in the\nscatter plot. An optional `N` tensor `Y` containing discrete labels that\nrange between `1` and `K` can be specified as well -- the labels will be\nreflected in the colors of the markers.\nThe following `options` are supported:\n\n- `options.colormap`    : colormap (`string`; default = `'Viridis'`)\n- `options.markersymbol`: marker symbol (`string`; default = `'dot'`)\n- `options.markersize`  : marker size (`number`; default = `'10'`)\n- `options.markercolor` : color per marker. (`torch.*Tensor`; default = `nil`)\n- `options.legend`      : `table` containing legend names\n\n`options.markercolor` is a Tensor with Integer values. The tensor can be of size `N` or `N x 3` or `K` or `K x 3`.\n\n- Tensor of size `N`: Single intensity value per data point. 0 = black, 255 = red\n- Tensor of size `N x 3`: Red, Green and Blue intensities per data point. 0,0,0 = black, 255,255,255 = white\n- Tensor of size `K` and `K x 3`: Instead of having a unique color per data point, the same color is shared for all points of a particular label.\n\n\n#### vis.line\nThis function draws a line plot. It takes as input an `N` or `NxM` tensor\n`Y` that specifies the values of the `M` lines (that connect `N` points)\nto plot. It also takes an optional `X` tensor that specifies the\ncorresponding x-axis values; `X` can be an `N` tensor (in which case all\nlines will share the same x-axis values) or have the same size as `Y`.\n\nThe following `options` are supported:\n\n- `options.fillarea`    : fill area below line (`boolean`)\n- `options.colormap`    : colormap (`string`; default = `'Viridis'`)\n- `options.markers`     : show markers (`boolean`; default = `false`)\n- `options.markersymbol`: marker symbol (`string`; default = `'dot'`)\n- `options.markersize`  : marker size (`number`; default = `'10'`)\n- `options.legend`      : `table` containing legend names\n\n\n#### vis.updateTrace\nThis function allows updating of data for extant line or scatter plots.\n\nIt is up to the user to specify `name` of an existing trace if they want\nto add to it, and a new `name` if they want to add a trace to the plot.\nBy default, if no legend is specified at time of first creation,\nthe `name` is the index of the line in the legend.\n\nIf no `name` is specified, all traces should be updated.\nTrace update data that is all `NaN` is ignored;\nthis can be used for masking update.\n\nThe `append` parameter determines if the update data should be appended\nto or replaces existing data.\n\nThere are no options because they are assumed to be inherited from the\nspecified plot.\n\n#### vis.stem\nThis function draws a stem plot. It takes as input an `N` or `NxM` tensor\n`X` that specifies the values of the `N` points in the `M` time series.\nAn optional `N` or `NxM` tensor `Y` containing timestamps can be specified\nas well; if `Y` is an `N` tensor then all `M` time series are assumed to\nhave the same timestamps.\n\nThe following `options` are supported:\n\n- `options.colormap`: colormap (`string`; default = `'Viridis'`)\n- `options.legend`  : `table` containing legend names\n\n#### vis.heatmap\nThis function draws a heatmap. It takes as input an `NxM` tensor `X` that\nspecifies the value at each location in the heatmap.\n\nThe following `options` are supported:\n\n- `options.colormap`   : colormap (`string`; default = `'Viridis'`)\n- `options.xmin`       : clip minimum value (`number`; default = `X:min()`)\n- `options.xmax`       : clip maximum value (`number`; default = `X:max()`)\n- `options.columnnames`: `table` containing x-axis labels\n- `options.rownames`   : `table` containing y-axis labels\n\n#### vis.bar\nThis function draws a regular, stacked, or grouped bar plot. It takes as\ninput an `N` or `NxM` tensor `X` that specifies the height of each of the\nbars. If `X` contains `M` columns, the values corresponding to each row\nare either stacked or grouped (depending on how `options.stacked` is\nset). In addition to `X`, an (optional) `N` tensor `Y` can be specified\nthat contains the corresponding x-axis values.\n\nThe following plot-specific `options` are currently supported:\n\n- `options.columnnames`: `table` containing x-axis labels\n- `options.stacked`    : stack multiple columns in `X`\n- `options.legend`     : `table` containing legend labels\n\n#### vis.histogram\nThis function draws a histogram of the specified data. It takes as input\nan `N` tensor `X` that specifies the data of which to construct the\nhistogram.\n\nThe following plot-specific `options` are currently supported:\n\n- `options.numbins`: number of bins (`number`; default = 30)\n\n#### vis.boxplot\nThis function draws boxplots of the specified data. It takes as input\nan `N` or an `NxM` tensor `X` that specifies the `N` data values of which\nto construct the `M` boxplots.\n\nThe following plot-specific `options` are currently supported:\n\n- `options.legend`: labels for each of the columns in `X`\n\n#### vis.surf\nThis function draws a surface plot. It takes as input an `NxM` tensor `X`\nthat specifies the value at each location in the surface plot.\n\nThe following `options` are supported:\n\n- `options.colormap`: colormap (`string`; default = `'Viridis'`)\n- `options.xmin`    : clip minimum value (`number`; default = `X:min()`)\n- `options.xmax`    : clip maximum value (`number`; default = `X:max()`)\n\n#### vis.contour\nThis function draws a contour plot. It takes as input an `NxM` tensor `X`\nthat specifies the value at each location in the contour plot.\n\nThe following `options` are supported:\n\n- `options.colormap`: colormap (`string`; default = `'Viridis'`)\n- `options.xmin`    : clip minimum value (`number`; default = `X:min()`)\n- `options.xmax`    : clip maximum value (`number`; default = `X:max()`)\n\n#### vis.quiver\nThis function draws a quiver plot in which the direction and length of the\narrows is determined by the `NxM` tensors `X` and `Y`. Two optional `NxM`\ntensors `gridX` and `gridY` can be provided that specify the offsets of\nthe arrows; by default, the arrows will be done on a regular grid.\n\nThe following `options` are supported:\n\n- `options.normalize`:  length of longest arrows (`number`)\n- `options.arrowheads`: show arrow heads (`boolean`; default = `true`)\n\n#### vis.mesh\nThis function draws a mesh plot from a set of vertices defined in an\n`Nx2` or `Nx3` matrix `X`, and polygons defined in an optional `Mx2` or\n`Mx3` matrix `Y`.\n\nThe following `options` are supported:\n\n- `options.color`: color (`string`)\n- `options.opacity`: opacity of polygons (`number` between 0 and 1)\n\n### Customizing plots\n\nThe plotting functions take an optional `options` table as input that can be used to change (generic or plot-specific) properties of the plots. All input arguments are specified in a single table; the input arguments are matches based on the keys they have in the input table.\n\nThe following `options` are generic in the sense that they are the same for all visualizations (except `plot.image` and `plot.text`):\n\n- `options.title`       : figure title\n- `options.width`       : figure width\n- `options.height`      : figure height\n- `options.showlegend`  : show legend (`true` or `false`)\n- `options.xtype`       : type of x-axis (`'linear'` or `'log'`)\n- `options.xlabel`      : label of x-axis\n- `options.xtick`       : show ticks on x-axis (`boolean`)\n- `options.xtickmin`    : first tick on x-axis (`number`)\n- `options.xtickmax`    : last tick on x-axis (`number`)\n- `options.xtickstep`   : distances between ticks on x-axis (`number`)\n- `options.ytype`       : type of y-axis (`'linear'` or `'log'`)\n- `options.ylabel`      : label of y-axis\n- `options.ytick`       : show ticks on y-axis (`boolean`)\n- `options.ytickmin`    : first tick on y-axis (`number`)\n- `options.ytickmax`    : last tick on y-axis (`number`)\n- `options.ytickstep`   : distances between ticks on y-axis (`number`)\n- `options.marginleft`  : left margin (in pixels)\n- `options.marginright` : right margin (in pixels)\n- `options.margintop`   : top margin (in pixels)\n- `options.marginbottom`: bottom margin (in pixels)\n\n\nThe other options are visualization-specific, and are described in the\ndocumentation of the functions.\n\n## To Do\n\n- [ ] Command line tool for easy systematic plotting from live logs.\n- [ ] Filtering through panes with regex by title (or meta field)\n- [ ] Compiling react by python server at runtime\n\n## Contributing\nSee guidelines for contributing [here.](./CONTRIBUTING.md)\n\n## Acknowledgments\nVisdom was inspired by tools like [display](https://github.com/szym/display) and relies on [Plotly](https://plot.ly/) as a plotting front-end.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/facebookresearch/visdom",
    "keywords": null,
    "license": "CC-BY-4.0",
    "maintainer": null,
    "maintainer_email": null,
    "name": "visdom",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/visdom/",
    "release_url": "https://pypi.org/project/visdom/0.1.04/",
    "requires_python": null,
    "summary": "A tool for visualizing live, rich data for Torch and Numpy",
    "version": "0.1.04"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9c7d6ad497285caf2ffd347f800ee60f",
          "sha256": "30bff9f7ba02017923304a159e4e1383eae85d392c3720f76a66d2e291d9ac05"
        },
        "downloads": 17,
        "filename": "visdom-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9c7d6ad497285caf2ffd347f800ee60f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24698,
        "upload_time": "2017-03-10T05:28:06",
        "url": "https://files.pythonhosted.org/packages/01/1e/a674de42cc497b3395c4d205bf74f8fba317426d9da792293d1788726a2d/visdom-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dec12a7f0bf44ecbd90142f60c6a24b9",
          "sha256": "14e0dcfeb3ced396c81ef5777edaf8f6331fccd379264cd191b9a1bcd1ba047d"
        },
        "downloads": 17,
        "filename": "visdom-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dec12a7f0bf44ecbd90142f60c6a24b9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24698,
        "upload_time": "2017-03-10T05:38:19",
        "url": "https://files.pythonhosted.org/packages/e8/3b/f4ccb3a12e8954a93cf364d5b0db59f954218d3c560b25eaed55d2e5dede/visdom-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cb284db569afde0beee396eac8527f86",
          "sha256": "1bab21571f5d41ecc702a21143c9660ac67fe9e31b076b23b8596cbd81049cad"
        },
        "downloads": 17,
        "filename": "visdom-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "cb284db569afde0beee396eac8527f86",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24659,
        "upload_time": "2017-03-10T05:50:11",
        "url": "https://files.pythonhosted.org/packages/da/24/89aecc6192d8120e104d0157be9766ec747a3d1d5d1f78f2a1e38bdbbea6/visdom-0.0.3.tar.gz"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5c56b3121df186f60a0bf3790b115f5f",
          "sha256": "2227303b03f9c0731bacb927aa62df8e6962ef878bda30a1be89060000b938e2"
        },
        "downloads": 18,
        "filename": "visdom-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5c56b3121df186f60a0bf3790b115f5f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24636,
        "upload_time": "2017-03-10T08:12:46",
        "url": "https://files.pythonhosted.org/packages/20/66/a7643457152e6db04dab4cf0792c6468d7bddf7b0f83ff94b766668cf6b0/visdom-0.0.4.tar.gz"
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "37121c7ec433e3885542221a212364a8",
          "sha256": "05817f3a7ded2477ae8bb7673399a4f69c906e5b8e391b8e042d8a9a6c63dd31"
        },
        "downloads": 164,
        "filename": "visdom-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "37121c7ec433e3885542221a212364a8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24471,
        "upload_time": "2017-03-16T15:09:38",
        "url": "https://files.pythonhosted.org/packages/c5/2c/01247408c49ec9201a278733fbe2484cc993c7ff839deeb005a7a732cb4d/visdom-0.0.9.tar.gz"
      }
    ],
    "0.1.01": [
      {
        "comment_text": "",
        "digests": {
          "md5": "065c5428b0c5fc3503c62b042837497a",
          "sha256": "13742f2f097a939144d4352684bbdc0a3208fcd4deb6492508a61875eb2a4e52"
        },
        "downloads": 87,
        "filename": "visdom-0.1.01.tar.gz",
        "has_sig": false,
        "md5_digest": "065c5428b0c5fc3503c62b042837497a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25013,
        "upload_time": "2017-03-19T23:26:10",
        "url": "https://files.pythonhosted.org/packages/b3/a2/d82885adfa342aa49dfab8f217f669e719f99167143246dac83bbd89ce88/visdom-0.1.01.tar.gz"
      }
    ],
    "0.1.02": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dd4d9d52cb174aed282c66b909b0349b",
          "sha256": "aa66985393a9cbdde2571134c9168b58876de771eb98b3bf9e25486e69d25083"
        },
        "downloads": 71,
        "filename": "visdom-0.1.02.tar.gz",
        "has_sig": false,
        "md5_digest": "dd4d9d52cb174aed282c66b909b0349b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26864,
        "upload_time": "2017-03-25T15:19:06",
        "url": "https://files.pythonhosted.org/packages/c3/0a/41966452e53678ba40c3404b119656469b3460adfacb770d774de7e617d6/visdom-0.1.02.tar.gz"
      }
    ],
    "0.1.03": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d9c4b84dd9ad8e42565ac5259f30897f",
          "sha256": "cc4024d40bb9c0f6aee6f2b12851618648354473d5f6c0ce243ffd1594d3ed46"
        },
        "downloads": 0,
        "filename": "visdom-0.1.03.tar.gz",
        "has_sig": false,
        "md5_digest": "d9c4b84dd9ad8e42565ac5259f30897f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29457,
        "upload_time": "2017-04-21T21:12:28",
        "url": "https://files.pythonhosted.org/packages/2f/e3/4d3e1fd5b2ea5d547c0877b0d9ce12fc0c65c2187640edde70273c78a4b8/visdom-0.1.03.tar.gz"
      }
    ],
    "0.1.04": [
      {
        "comment_text": "",
        "digests": {
          "md5": "499d33d51af6add24ff86457ca074c83",
          "sha256": "e031abc993645407c692760ba0d6cd4156ebb8b705e981db26960dd02b7d505a"
        },
        "downloads": 0,
        "filename": "visdom-0.1.04.tar.gz",
        "has_sig": false,
        "md5_digest": "499d33d51af6add24ff86457ca074c83",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29459,
        "upload_time": "2017-04-21T21:32:25",
        "url": "https://files.pythonhosted.org/packages/e0/00/c197e363652b44ea664e68293c5f70d496c856994cda445fdc975acb4636/visdom-0.1.04.tar.gz"
      }
    ],
    "0.1.1": []
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "499d33d51af6add24ff86457ca074c83",
        "sha256": "e031abc993645407c692760ba0d6cd4156ebb8b705e981db26960dd02b7d505a"
      },
      "downloads": 0,
      "filename": "visdom-0.1.04.tar.gz",
      "has_sig": false,
      "md5_digest": "499d33d51af6add24ff86457ca074c83",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 29459,
      "upload_time": "2017-04-21T21:32:25",
      "url": "https://files.pythonhosted.org/packages/e0/00/c197e363652b44ea664e68293c5f70d496c856994cda445fdc975acb4636/visdom-0.1.04.tar.gz"
    }
  ]
}