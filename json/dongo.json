{
  "info": {
    "author": "Johan Nestaas",
    "author_email": "johannestaas@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Environment :: MacOS X",
      "Environment :: Win32 (MS Windows)",
      "Environment :: X11 Applications :: Qt",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python"
    ],
    "description": "dongo\n=====\n\nA Mongo ORM inspired by django's, but flexible for different documents.\n\nInstallation\n------------\n\nFrom pypi as root to install to the whole system::\n\n    $ sudo pip install dongo\n\n...or in a virtualenv::\n\n    (virtualenv) $ pip install dongo\n\n...or from the project root directory::\n\n    $ python setup.py install\n\nUsage\n-----\n\nDongo is a Django inspired ORM for mongodb, using pymongo on the backend.\n\nPymongo is a very light wrapper around mongodb (which is nice), but often I find\nmyself writing a lot of similar boilerplate ORM-like code around it. You might\nfind yourself writing classes that wrap records in a collection, and this abstracts\nthat logic into a common syntax with an ORM similar to Django, but with the\nflexibility of mongo and it's schema-less nature.\n\nHere are a few examples of the query and class syntax.\n\nSetup\n-----\n\nYou will need to first connect to a database and host. By default, localhost\nport 27017 will be selected, but you will still need to specify the default\ndatabase::\n\n    from dongo import connect\n\n    # For the mydatabase named database on localhost\n    connect('mydatabase')\n\n    # For your mongodb in the private network\n    connect('mydatabase', host='192.168.1.200')\n\n    # For multiple hosts in a replica set\n    connect('mydatabase', hosts=['10.0.0.100', '10.0.0.101', '10.0.0.102:27018'], replica_set='myrepset0')\n\n    # A uri can explicitly be specified as well\n    connect('mydatabase', uri='mongodb://localhost:27017/')\n\n\nYou can separate collections into different databases, but those connections select\nthe default database that collections will use if database is unspecified.\n\nNext you will need to declare some sort of collection classes::\n\n    from dongo import MongoCollection\n    from datetime import datetime\n\n    class MusicArtist(MongoCollection):\n        # if a specific database other than the default is desired, uncomment this:\n        # database = 'myotherdatabase'\n        collection = 'music_artists'\n\n    # That is all you need to query and read records from the collection \"music_artists\",\n    # and the following would create new records and insert them and query for them.\n\n    queen = MusicArtist({\n        'name': 'queen',\n        'lead': 'freddie',\n        'songs': ['we are the champions', 'we will rock you'],\n        'fans': ['jack', 'jill'],\n        'nested': {\n            'field1': 1,\n            'field2': 2,\n        },\n    })\n    # insert must be called manually\n    queen.insert()\n\n    # you can use keywords and auto-insert with the \"new\" classmethod:\n    queen_stoneage = MusicArtist.new(\n        name='queens of the stone age',\n        lead='josh',\n        songs=['go with the flow', 'little sister'],\n        start=datetime(year=1996, month=1, day=1),\n        fans=['jack'],\n        'nested': {\n            'field1': 1,\n            'field2': 222,\n        },\n    )\n\n    # queries are simple\n    for ma in MusicArtist.select(fans='jack'):\n        print('jack likes ' + ma['name'])\n\n    # you can even do regex queries and bulk updates\n    MusicArtist.select(name__regex='^queen').update(new_field='this is a new field')\n\n    # There are many operators, like __gt, __gte, __lt, __lte, __in, __nin, all corresponding to mongo's\n    # operators like $gt.\n\n    # you can do set logic as well with operators: |, &, ~\n    # for example less than comparisons and checking field existence:\n    for ma in (MusicArtist.select(start__lt=datetime(2000, 1, 1)) | MusicArtist.select(start__exists=0)):\n        print('either this music artist started before the year 2000 or their startdate is unknown: ' + ma['name'])\n\n    # And you can query inside nested dictionaries\n\n    for ma in MusicArtist.select(nested__field1=1):\n        print(ma)\n\n    # updating the database or fetching fields is as easy as dictionary access\n    ma = MusicArtist.select(name='queen').first()\n    ma['new_field'] = 'new_value'\n    print(ma['name'])\n    ma.set(new_field_2='a', new_field_3='b', new_field_4={'foo': 'bar'})\n    ma['nested.field1'] = 'new value in nested field'\n    ma.set(nested__field1='reset that nested field to this value')\n\n\nYou will likely want methods associated with records, and to do that you just extend your\nclass definition::\n\n    class Person(MongoCollection):\n        collection = 'persons'\n\n        def print_name(self):\n            print(self.get('name', 'unknown'))\n\n        def serialize(self):\n            return {\n                'name': self.get('name'),\n                'age': self.get('age', 0),\n                'birthday': self.get('start', datetime.min).isoformat(),\n                'favorite_color': self.get('color'),\n            }\n\n        def change_color(self, new_color):\n            # updates record in database as well\n            self['color'] = new_color\n\n        @classmethod\n        def start_new_year(cls):\n            # add 1 to all age values for every record with a field \"age\"\n            cls.select(age__exists=1).inc(age=1)\n            # kill off those 110 and older\n            cls.select(age__gte=110).delete()\n\n        @classmethod\n        def startswith(cls, prefix):\n            # find all persons with a name that starts with ``prefix``\n            regex = '^{}'.format(prefix)\n            return cls.select(name__regex=regex)\n\n        @classmethod\n        def endswith(cls, suffix):\n            # find all persons with a name that ends with ``suffix``\n            regex = '{}$'.format(suffix)\n            return cls.select(name__regex=regex)\n\n        @classmethod\n        def first_10(cls):\n            return cls.select().iter(limit=10, sort='name')\n\n        @classmethod\n        def sort_by_oldest_first_then_alphabetically(cls):\n            return cls.select().iter(sort=[('age', -1), ('name', 1)])\n\n\nRelease Notes\n-------------\n\n:0.1.2:\n    - Add documentation URL and github pages\n:0.1.1:\n    - Fixed iterator across class\n    - Fixed update/delete\n:0.1.0:\n    Most basic functionality is implemented, such as query logic and math.\n:0.0.1:\n    Project created",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/johannestaas/dongo",
    "keywords": "",
    "license": "GPLv3+",
    "maintainer": null,
    "maintainer_email": null,
    "name": "dongo",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/dongo/",
    "release_url": "https://pypi.org/project/dongo/0.1.2/",
    "requires_python": null,
    "summary": "https://johannestaas.github.io/dongo/",
    "version": "0.1.2"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "82914e24b27e3b276d607ada0cd31d0c",
          "sha256": "897ee2341579c175027bd855130de5a66dd6ffeae23efd733e6604de677a68fe"
        },
        "downloads": 0,
        "filename": "dongo-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "82914e24b27e3b276d607ada0cd31d0c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8806,
        "upload_time": "2017-06-01T01:20:46",
        "url": "https://files.pythonhosted.org/packages/bc/1b/06cbba12ae190f51afc10cbb242da593c0cf2e6ac44261141605a10efe9d/dongo-0.0.1.tar.gz"
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a5a080fabc21c023e748675803ce250e",
          "sha256": "0c9c7b2d3ebe0da7730807a83a26bd39931199788baeb896c36ecf492c596926"
        },
        "downloads": 0,
        "filename": "dongo-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a5a080fabc21c023e748675803ce250e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13742,
        "upload_time": "2017-06-01T08:14:02",
        "url": "https://files.pythonhosted.org/packages/45/59/a15069a5b2d4f68e5eb61e6e14e7f1e1c46c1d76c1d3fb905577e9d94908/dongo-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5b0b1c9797c950556976b892b1f0054b",
          "sha256": "66403d20965ab71b86c8da5403531168884a06399c59b621b62fb57fa572d1a5"
        },
        "downloads": 0,
        "filename": "dongo-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5b0b1c9797c950556976b892b1f0054b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13675,
        "upload_time": "2017-06-01T08:26:42",
        "url": "https://files.pythonhosted.org/packages/8d/67/b537a8fee6c7152efafd57cc980f6596a47e72262fc7438f74785fee1b62/dongo-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fc6530bfe0e3c1a40e2dcc04254e0ef9",
          "sha256": "e7c48535e057ad4aac1bc6c7f04743c982cbb7fc54a2f07940202a46bb93cc49"
        },
        "downloads": 0,
        "filename": "dongo-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fc6530bfe0e3c1a40e2dcc04254e0ef9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14033,
        "upload_time": "2017-06-01T18:35:04",
        "url": "https://files.pythonhosted.org/packages/8d/86/4f278d03ada2272f1908dd624fdaf52da388393a1d80d12e0f05dce69a94/dongo-0.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "fc6530bfe0e3c1a40e2dcc04254e0ef9",
        "sha256": "e7c48535e057ad4aac1bc6c7f04743c982cbb7fc54a2f07940202a46bb93cc49"
      },
      "downloads": 0,
      "filename": "dongo-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "fc6530bfe0e3c1a40e2dcc04254e0ef9",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 14033,
      "upload_time": "2017-06-01T18:35:04",
      "url": "https://files.pythonhosted.org/packages/8d/86/4f278d03ada2272f1908dd624fdaf52da388393a1d80d12e0f05dce69a94/dongo-0.1.2.tar.gz"
    }
  ]
}