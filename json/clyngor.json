{
  "info": {
    "author": "lucas bourneuf",
    "author_email": "lucas.bourneuf@laposte.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Natural Language :: English",
      "Programming Language :: ASP",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "<p align=\"center\">\n  <img src=\"clyngor.png\"/><br>\n</p>\n\nHandy python wrapper around [Potassco's Clingo](https://potassco.org/) [ASP solver](https://en.wikipedia.org/wiki/Answer%20set%20programming).\n\n\n\n## Example\nClyngor offers multiple interfaces. The followings are all equivalent.\n(they search for [formal concepts](https://en.wikipedia.org/wiki/Formal_concept_analysis))\n\n    from clyngor import ASP, solve\n\n    answers = ASP(\"\"\"\n    rel(a,(c;d)). rel(b,(d;e)).\n    obj(X):- rel(X,_) ; rel(X,Y): att(Y).\n    att(Y):- rel(_,Y) ; rel(X,Y): obj(X).\n    :- not obj(X):obj(X).\n    :- not att(Y):att(Y).\n    \"\"\")\n    for answer in answers:\n        print(answer)\n\nThe same, but with the lower level function expecting files:\n\n    answers = solve(inline=\"\"\"\n    rel(a,(c;d)). rel(b,(d;e)).\n    obj(X):- rel(X,_) ; rel(X,Y): att(Y).\n    att(Y):- rel(_,Y) ; rel(X,Y): obj(X).\n    :- not obj(X):obj(X).\n    :- not att(Y):att(Y).\n    \"\"\")\n\nMore traditional interface, using file containing the ASP source code:\n\n    answers = solve('concepts.lp'):  # also accepts list of file\n\nMore examples are available in [the unit tests](clyngor/test/).\n\n\n\n## Chaining\nOnce you get your answers, clyngor allows you to specify\nthe answer sets format using builtin methods:\n\n    for answer in answers.by_predicate.first_arg_only:\n        print('{' + ','.join(answer['obj']) + '} \u00d7 {' + ','.join(answer['att']) + '}')\n\nAnd if you need a [*pyasp-like*](https://github.com/sthiele/pyasp) interface:\n\n    for answer in answers.as_pyasp:\n        print('{' + ','.join(a.args()[0] for a in answer if a.predicate == 'obj')\n              + '} \u00d7 {' + ','.join(a.args()[0] for a in answer if a.predicate == 'att') + '}')\n\n\nCurrently, there is only one way to see all chaining operator available:\n[the source code of the Answers object](clyngor/answers.py).\n\n\n\n\n## Debugging\nTODO: Clyngor is also able to parse an ASP program to generate debugging help.\n\n## Solver scripting\nTODO: Clyngor is able to manage python inside ASP source code, allowing user to fully control the solving.\n\n\n\n## Alternatives\n[pyasp](https://github.com/sthiele/pyasp) comes into mind, but do not (yet) supports clingo alone.\n\n\n\n## Installation\n\n    pip install clyngor\n\nYou must have `clingo` in your path. Depending on your OS, it might be done with a system installation,\nor through downloading and (compilation and) manual installation.\n\n[See the doc](https://potassco.org/doc/start/).\n\n\n\n\n## Tips\n### Careful parsing\nBy default, clyngor uses a very simple parser (yeah, `str.split`) in order to achieve time efficiency in most time.\nHowever, when asked to compute a particular output format (like `parse_args`) or an explicitely *careful parsing*,\nclyngor will use a much more robust parser (made with an [arpeggio](http://www.igordejanovic.net/Arpeggio/) grammar).\n\n### Define the path to clingo binary\n\n    import clyngor\n    clyngor.CLINGO_BIN_PATH = 'path/to/clingo'\n\nNote that it will be the very first parameter to [`subprocess.Popen`](https://docs.python.org/3/library/subprocess.html#popen-constructor).\n\n### Dinopython support\nNo.\n\n### Contributions\nYes.\n\n### Why clyngor ?\nNo, it's pronounced [*clyngor*](https://www.youtube.com/watch?v=RyU99BCNRuU#t=50s).\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/aluriak/clyngor",
    "keywords": "ASP clingo wrapper",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "clyngor",
    "platform": "",
    "project_url": "https://pypi.org/project/clyngor/",
    "release_url": "https://pypi.org/project/clyngor/0.0.4/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python wrapper around Clingo/Answer Set Programming",
    "version": "0.0.4"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "118060b2052a524b3add70432a054317",
          "sha256": "981eeb6f6040566c2afbc3697af7247c26e8f4c793608cc346f4e8fa7dffe990"
        },
        "downloads": 0,
        "filename": "clyngor-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "118060b2052a524b3add70432a054317",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4538,
        "upload_time": "2017-08-25T08:29:24",
        "url": "https://files.pythonhosted.org/packages/a6/c9/5a1466fc5ee8dc01498ce1152feb191072ac50dc109fe4c6c54fb6a89cd7/clyngor-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "992d5bdee1e07bee42133aa4a3903b5f",
          "sha256": "1b8c5bc2edba55da7bb9f0ecb5dc135cc83229c9176dd3ec8ac6113e8fe708f3"
        },
        "downloads": 0,
        "filename": "clyngor-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "992d5bdee1e07bee42133aa4a3903b5f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4803,
        "upload_time": "2017-08-25T08:30:26",
        "url": "https://files.pythonhosted.org/packages/c4/31/6d2e9e1a108e4e6d1db13ffdccaea954e035bd6b5fa14c3f504f5521fd8c/clyngor-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e9f4116784fa393eff5e77aa4c01ef6c",
          "sha256": "96e49b7268a687ce2bf9bf5021f044775f078be3435df3abb2c6bef554576711"
        },
        "downloads": 0,
        "filename": "clyngor-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e9f4116784fa393eff5e77aa4c01ef6c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11411,
        "upload_time": "2017-08-25T14:25:18",
        "url": "https://files.pythonhosted.org/packages/c2/f7/742330b60f5cdae24176607a03408c11a2d2db7abd9d6dab6d1d2bddefd5/clyngor-0.0.3.tar.gz"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5a3844b355d9b4c6f73fd905dc68a722",
          "sha256": "ff32f280086235a949ab6e15aa04d7b1cdde88791d5cbb530cbce980cb278b7b"
        },
        "downloads": 0,
        "filename": "clyngor-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "5a3844b355d9b4c6f73fd905dc68a722",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11830,
        "upload_time": "2017-08-25T14:47:07",
        "url": "https://files.pythonhosted.org/packages/e1/29/449077b818a4f50bb6a7bdef26a0766cd6f5c463fcb170ba584b35b63b59/clyngor-0.0.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5a3844b355d9b4c6f73fd905dc68a722",
        "sha256": "ff32f280086235a949ab6e15aa04d7b1cdde88791d5cbb530cbce980cb278b7b"
      },
      "downloads": 0,
      "filename": "clyngor-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "5a3844b355d9b4c6f73fd905dc68a722",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 11830,
      "upload_time": "2017-08-25T14:47:07",
      "url": "https://files.pythonhosted.org/packages/e1/29/449077b818a4f50bb6a7bdef26a0766cd6f5c463fcb170ba584b35b63b59/clyngor-0.0.4.tar.gz"
    }
  ]
}