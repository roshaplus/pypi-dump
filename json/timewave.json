{
  "info": {
    "author": "Deutsche Postbank AG [pbrisk]",
    "author_email": "pbrisk@icloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Financial and Insurance Industry",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Education",
      "Topic :: Office/Business",
      "Topic :: Office/Business :: Financial",
      "Topic :: Office/Business :: Financial :: Investment",
      "Topic :: Office/Business :: Scheduling",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Mathematics",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Localization",
      "Topic :: Utilities"
    ],
    "description": "timewave simulation engine\r\n==========================\r\n\r\ntimewave, a classical time evolution simulation engine in python. It\r\nconsists of four building blocks.\r\n\r\n|Codeship Status for pbrisk/pace|\r\n\r\nThe State\r\n---------\r\n\r\nwhich evolves over time during a simulation path. It is the nucleus or\r\nnode which marks a point of time in a path.\r\n\r\nThe Producer\r\n------------\r\n\r\nis the objects that provides states to the simulation and does the\r\nactual time evolution. Think of the producer building as the constructor\r\nof a stochastic process like a Brownian motion or, less mathematical,\r\nfuture stock prices or future rain intensities.\r\n\r\nThe Consumer\r\n------------\r\n\r\nis an object that takes a state as a point in time provided by the\r\nproducer and consumes it, i.e. does something with it - the actual\r\ncalculation if you like.\r\n\r\nThe Engine\r\n----------\r\n\r\nfinally, which organizes the creation of states by the producer and the\r\nconsumption by the consumer. The engine uses, if present,\r\nmultiprocessing, i.e. takes full advantage of multi cpu frameworks.\r\nTherefore the engine splits the simulation into equal but distinct\r\nchunks of path for the number of workers (by default the number of cpu)\r\nand loops over the set of dedicated path in each worker. Each path is\r\nevolved by the producer in states which are at each point in time\r\nconsumed directly by consumers. States are, due to limits of resources,\r\nnot stored during the simulation. If you like to, use the storage\r\nconsumer to save all states.\r\n\r\nmain frame workflow\r\n-------------------\r\n\r\nsetup simulation by\r\n\r\n::\r\n\r\n    engine = Engine(Producer(), Consumer())\r\n    engine.run(range(20))\r\n\r\nthen run loop starts by\r\n\r\n::\r\n\r\n    producer/initialize()\r\n\r\nsetup workers (by default by the number of cpu's) on each worker start\r\nloop by\r\n\r\n::\r\n\r\n    producer/consumer.initialize_worker()\r\n\r\nand invoke loop over paths and start again with\r\n\r\n::\r\n\r\n    producer/consumer.initialize_path()\r\n\r\nthen do time evolution of a path\r\n\r\n::\r\n\r\n    producer.evolve() / consumer.consume()\r\n\r\nand finish with last consumer in consumer stack\r\n\r\n::\r\n\r\n    consumer[-1].finalize_path()\r\n\r\nand\r\n\r\n::\r\n\r\n    consumer[-1].finalize_worker()\r\n\r\nput results into queue and take them out by\r\n\r\n::\r\n\r\n    consumer[-1].put()/get(result)\r\n\r\nfinish simulation (kind of reduce method)\r\n\r\n::\r\n\r\n    consumer[-1].finalize()\r\n\r\nbefore returning results from run.\r\n\r\n.. |Codeship Status for pbrisk/pace| image:: https://codeship.com/projects/e5f5fcb0-9d66-0134-5a6b-6ae80fc9d0de/status?branch=master\r\n   :target: https://codeship.com/projects/188639",
    "docs_url": "https://pythonhosted.org/timewave/",
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pbrisk/timewave",
    "keywords": "",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "timewave",
    "platform": "any",
    "project_url": "https://pypi.org/project/timewave/",
    "release_url": "https://pypi.org/project/timewave/0.4/",
    "requires_python": null,
    "summary": "timewave, a classical time evolution simulation engine in python.",
    "version": "0.4"
  },
  "releases": {
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cc933d8d4cf6f00ce7d2fcbc83afeda4",
          "sha256": "af3aa991caadd4d311f6f76576bdd043e690d540692971176a486be15c124adf"
        },
        "downloads": 0,
        "filename": "timewave-0.4-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc933d8d4cf6f00ce7d2fcbc83afeda4",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 34399,
        "upload_time": "2017-04-27T06:48:36",
        "url": "https://files.pythonhosted.org/packages/d9/25/b7656f63e115911a08f659fb3d00c2c26152b532da8609cb599565843e37/timewave-0.4-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f6887f2a63dbb57a21583b4452416e73",
          "sha256": "04a2a6ed9a130d03cef4a0698e0d363d58e666c6bc7ebb7b0acdd54e46283fc4"
        },
        "downloads": 0,
        "filename": "timewave-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f6887f2a63dbb57a21583b4452416e73",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20424,
        "upload_time": "2017-04-27T06:49:03",
        "url": "https://files.pythonhosted.org/packages/5f/bc/2cfdfcefdc6735816e3cea2f4d82ee1f97abd0c4948fbe411ed5fd729eb3/timewave-0.4.tar.gz"
      }
    ],
    "0.4": []
  },
  "urls": []
}