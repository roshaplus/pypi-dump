{
  "info": {
    "author": "Sauce Labs",
    "author_email": "dev@saucelabs.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2.7",
      "Topic :: Utilities"
    ],
    "description": "isign\n=====\n\nA tool and library to re-sign iOS applications, without proprietary Apple software.\n\nFor example, an iOS app in development would probably only run on the developer's iPhone. \n``isign`` can alter the app so that it can run on another developer's iPhone.\n\nApple tools already exist to do this. But with ``isign``, now you can do this on operating\nsystems like Linux.\n\n\nTable of contents\n-----------------\n\n- `Installing`_\n- `How to get started`_\n- `How to use isign`_\n- `isign command line arguments`_\n- `Contributing`_\n- `More documentation`_\n- `Authors`_\n\n\n.. _Installing:\n\nInstalling\n----------\n\nLinux\n~~~~~\n\nThe latest version of ``isign`` can be installed via `PyPi <https://pypi.python.org/pypi/isign/>`__:\n\n.. code::\n\n  $ pip install isign\n\nMac OS X\n~~~~~~~~\n\nOn Mac OS X, there are a lot of prerequisites, so the ``pip`` method probably won't work.\nThe easiest method is to use ``git`` to clone the `source code repository <https://github.com/saucelabs/isign>`__ and \nrun the install script:\n\n.. code::\n\n  $ git clone https://github.com/saucelabs/isign.git\n  $ cd isign\n  $ sudo ./INSTALL.sh\n\n.. _How to get started:\n\nHow to get started\n------------------\n\nAll the libraries and tools that ``isign`` needs to run will work on both Linux \nand Mac OS X. However, you will need a Mac to export your Apple developer \ncredentials. \n\nIf you're like most iOS developers, credentials are confusing -- if so check out \nthe `documentation on credentials <https://github.com/saucelabs/isign/blob/master/docs/credentials.rst>`__ on Github.\n\nYou should have a key and certificate in \n`Keychain Access <https://en.wikipedia.org/wiki/Keychain_(software)>`__,\nand a provisioning profile associated with that certificate, that you \ncan use to sign iOS apps for one or more of your own iOS devices.\n\nIn Keychain Access, open the *Certificates*. Find the certificate you use to sign apps. \nRight click on it and export the key as a ``.p12`` file, let's say ``Certificates.p12``. If Keychain \nasks you for a password to protect this file, just leave it blank. \n\nNext, let's extract the key and certificate you need, into a standard PEM format.\n\n.. code::\n\n  $ isign_export_creds.sh ~/Certificates.p12\n\nIf you get prompted for a password, just press ``Return``.\n\nBy default, ``isign_export_creds.sh`` will put these files into ``~/.isign``, which is\nthe standard place to put ``isign`` configuration files.\n\nFinally, you need a provisioning profile from the Apple Developer Portal that uses\nthe same certificate. If you've never dealt with this, the provisioning profile is \nwhat tells the phone that you Apple has okayed you installing apps onto this particular phone.\n\nIf you develop with XCode, you might have a provisioning profile already. \nOn the Mac where you develop with XCode, try running the ``isign_guess_mobileprovision.sh`` script. \nIf you typically have only a few provisioning profiles and install on one phone, it might find it. \n\nAnyway, once you have a ``.mobileprovision`` file, move it to ``~/.isign/isign.mobileprovision``.\n\nThe end result should look like this:\n\n.. code::\n\n  $ ls -l ~/.isign\n  -r--r--r--    1 alice  staff  2377 Sep  4 14:17 certificate.pem\n  -r--r--r--    1 alice  staff  9770 Nov 23 13:30 isign.mobileprovision\n  -r--------    1 alice  staff  1846 Sep  4 14:17 key.pem\n\nAnd now you're ready to start re-signing apps!\n\n.. _How to use isign:\n\nHow to use isign\n----------------\n\nIf you've installed all the files in the proper locations above, then ``isign`` can be now invoked\non any iOS ``.app`` directory, or ``.ipa`` archive, or ``.app.zip`` zipped directory. For example:\n\n.. code::\n\n  $ isign -o resigned.ipa my.ipa\n  archived Ipa to /home/alice/resigned.ipa\n\nYou can also call it from Python:\n\n.. code:: python\n\n  from isign import isign\n\n  isign.resign(\"my.ipa\", output_path=\"resigned.ipa\")\n\n.. _isign command line arguments:\n\nisign command line arguments\n----------------------------\n\nSynopsis:\n\n.. code::\n\n    isign [-h] [-a <path to applecerts.pem>] \n               [-c <path to your cert in .pem form>]\n               [-k <path to your key in .pem form>] \n               [-p <your.mobileprovision>] \n               [-o <output path>]\n               <path to app to resign>\n\n**-a <path>, --apple-cert <path>**\n\nPath to Apple certificate in PEM format. This is already included in the library, so you will likely\nnever need it. In the event that the certificates need to be changed, See the `Apple Certificate documentation <docs/applecerts.rst>`__.\n\n**-c <path>, --certificate <path>**\n\nPath to your certificate in PEM format. Defaults to ``$HOME/.isign/certificate.pem``.\n\n**-h, --help**\n\nShow a help message and exit.\n\n**-k <path>, --key <path>**\n\nPath to your private key in PEM format. Defaults to ``$HOME/.isign/key.pwm``.\n\n**-o <path>, --output <path>**\n\nPath to write the re-signed application. Defaults to ``out`` in your current working directory.\n\n**-p <path>, --provisioning-profile <path>**\n\nPath to your provisioning profile. This should be associated with your certificate. Defaults to \n``$HOME/.isign/isign.mobileprovision``.\n\n\n.. _Contributing:\n\nContributing\n------------\n\nDevelopment happens on `our Github repository <https://github.com/saucelabs/isign>`__. File an issue, or fork the code!\n\nYou'll probably want to create some kind of python virtualenv, so you don't have to touch your system python or its \nlibraries. `virtualenvwrapper <https://virtualenvwrapper.readthedocs.org/en/latest/>`__ is a good tool for this.\n\nThen, just do the following:\n\n.. code::\n\n  $ git clone https://github.com/saucelabs/isign.git\n  $ cd isign\n  $ dev/setup.sh \n  $ ./run_tests.sh\n\nIf the tests don't pass please `file an issue <https://github.com/saucelabs/isign/issues>`__. Please keep the tests up to date as you develop.\n\nNote: some tests require Apple's\n`codesign <https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/codesign.1.html>`__\nto run, so they are skipped unless you run them on a Macintosh computer with developer tools.\n\nOkay, if all the tests passed, you now have an 'editable' install of isign. Any edits to this repo will affect (for instance)\nhow the `isign` command line tool works.\n\nSauce Labs supports ongoing public ``isign`` development. ``isign`` is a part of our infrastructure\nfor the `iOS Real Device Cloud <https://saucelabs.com/press-room/press-releases/sauce-labs-expands-mobile-test-automation-cloud-with-the-addition-of-real-devices-1>`__,\nwhich allows customers to test apps and websites on real iOS devices. ``isign`` has been successfully re-signing submitted customer apps in production\nsince June 2015.\n\nThis project not have an official code of conduct, yet, but one is forthcoming. Please contribute\nto discussion `here <https://github.com/saucelabs/isign/issues/6>`__.\n\n.. _More documentation:\n\nMore documentation\n------------------\n\nSee the `docs <docs>`__ directory of this repository for random stuff that didn't fit here.\n\n.. _Authors:\n\n\nAuthors\n-------\n\n`Neil Kandalgaonkar <https://github.com/neilk>`__ is the main developer and maintainer.\n\nProof of concept by `Steven Hazel <https://github.com/sah>`__ and Neil Kandalgaonkar.\n\nReference scripts using Apple tools by `Michael Han <https://github.com/mhan>`__.\n",
    "docs_url": null,
    "download_url": "https://github.com/saucelabs/ak-isign/tarball/v0.9.3",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/saucelabs/ak-isign",
    "keywords": "ios,app,signature,codesign,sign,resign",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ak-isign",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/ak-isign/",
    "release_url": "https://pypi.org/project/ak-isign/0.9.3/",
    "requires_python": "",
    "summary": "Re-signing iOS apps without Apple tools",
    "version": "0.9.3"
  },
  "releases": {
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e8bc2ab623d86e6434ff487150b8b012",
          "sha256": "22a7e1b4426b74394c914db0a68dcee7a03b4e6bd1085bb8c88ebaf11fde4af7"
        },
        "downloads": 504,
        "filename": "ak-isign-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "e8bc2ab623d86e6434ff487150b8b012",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31339,
        "upload_time": "2016-06-07T21:37:47",
        "url": "https://files.pythonhosted.org/packages/16/a5/2cbbae578715b770bb1c5d03430e915037e830729bc9420ae4f948f1d262/ak-isign-0.9.tar.gz"
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8b680fd6ac81f1fd5e23da330454199a",
          "sha256": "315d7e573a8fafffbc09e26e2eab481a74e62c6856c74088ddfbe3ef35ce2789"
        },
        "downloads": 162,
        "filename": "ak-isign-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8b680fd6ac81f1fd5e23da330454199a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31295,
        "upload_time": "2016-06-07T21:53:11",
        "url": "https://files.pythonhosted.org/packages/81/bc/3247864d823c0c48c303ce8434c3f640942418e1dc18c3e353924414ea13/ak-isign-0.9.1.tar.gz"
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "64d68d7e718767ed8ced1a44ab4ee9c8",
          "sha256": "c877be5f9fee3f55ac43996281e3351b494922a0f0540cdc62b980fef875143b"
        },
        "downloads": 162,
        "filename": "ak-isign-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "64d68d7e718767ed8ced1a44ab4ee9c8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31294,
        "upload_time": "2016-06-07T22:09:04",
        "url": "https://files.pythonhosted.org/packages/f6/be/402ac37374de12221484413b2c024a1063b812eda02d91f04994f362eeab/ak-isign-0.9.2.tar.gz"
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a10ac9434550357407196b29d2c5f935",
          "sha256": "6781ea35dffcf4dcc3826870224d3dcbfb54297cd58ad71ea90c08897643222c"
        },
        "downloads": 269,
        "filename": "ak-isign-0.9.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a10ac9434550357407196b29d2c5f935",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31293,
        "upload_time": "2016-06-07T22:23:52",
        "url": "https://files.pythonhosted.org/packages/05/50/5d44ac6c5a0d7abd032aeece2ff34565c5230b606e88682c712f3259ff74/ak-isign-0.9.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a10ac9434550357407196b29d2c5f935",
        "sha256": "6781ea35dffcf4dcc3826870224d3dcbfb54297cd58ad71ea90c08897643222c"
      },
      "downloads": 269,
      "filename": "ak-isign-0.9.3.tar.gz",
      "has_sig": false,
      "md5_digest": "a10ac9434550357407196b29d2c5f935",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 31293,
      "upload_time": "2016-06-07T22:23:52",
      "url": "https://files.pythonhosted.org/packages/05/50/5d44ac6c5a0d7abd032aeece2ff34565c5230b606e88682c712f3259ff74/ak-isign-0.9.3.tar.gz"
    }
  ]
}