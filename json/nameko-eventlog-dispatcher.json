{
  "info": {
    "author": "Julio Trigo",
    "author_email": "julio.trigo@sohonet.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Nameko eventlog dispatcher\n==========================\n\n.. pull-quote::\n\n    `Nameko <http://nameko.readthedocs.org>`_ dependency provider that\n    dispatches log data using ``Events`` (Pub-Sub).\n\n\n.. image:: https://travis-ci.org/sohonetlabs/nameko-eventlog-dispatcher.svg?branch=master\n\n\nUsage\n-----\n\nDispatching event log data\n``````````````````````````\n\nInclude the ``EventLogDispatcher`` dependency in your service class:\n\n.. code-block:: python\n\n    from nameko.rpc import rpc\n    from nameko_eventlog_dispatcher import EventLogDispatcher\n\n\n    class FooService:\n\n        name = 'foo'\n\n        eventlog_dispatcher = EventLogDispatcher()\n\n        @rpc\n        def foo_method(self):\n            self.eventlog_dispatcher('foo_event_type', {'value': 1})\n\n``event_type`` and  some ``event_data`` (optional) will be provided as\narguments. ``event_data`` must contain JSON serializable data.\n\nCalling ``foo_method`` will dispatch an event from the ``foo`` service\nwith ``log_event`` as the event type.\n\nThen, any nameko service will be able to handle this event.\n\n.. code-block:: python\n\n    from nameko.events import event_handler\n\n\n    class BarService:\n\n        name = 'bar'\n\n        @event_handler('foo', 'log_event')\n        def foo_log_event_handler(self, body):\n            \"\"\"`body` will contain the event log data.\"\"\"\n\n\nCapturing log data when entrypoints are fired\n`````````````````````````````````````````````\n\nEnable auto capture event logs in your nameko configuration file:\n\n.. code-block:: yaml\n\n    # config.yaml\n\n    EVENTLOG_DISPATCHER:\n      auto_capture: true\n      entrypoints_to_exclude: []\n\nWith ``auto_capture`` set to ``true``, a nameko event will be dispatched\nevery time an entrypoint is fired:\n\n- The source service for these events will be ``all``.\n- The event type will be ``entrypoint_fired``.\n- Only entrypoints listed in the ``ENTRYPOINT_TYPES_TO_LOG`` class\n  attribute will be logged.\n- ``entrypoints_to_exclude`` can be used to provide a list of entrypoint\n  method names to exclude when firing events automatically.\n\nThen, any nameko service will be able to handle this kind of events:\n\n.. code-block:: python\n\n    from nameko.events import event_handler\n\n\n    class BazService:\n\n        name = 'baz'\n\n        @event_handler('all', 'entrypoint_fired')\n        def all_entrypoint_fired_event_handler(self, body):\n            \"\"\"Body will contain the event log data.\"\"\"\n\n\nFormat of the event log data\n----------------------------\n\nThis is the format of the event log data:\n\n.. code-block:: python\n\n    {\n      \"entrypoint_name\": \"foo_method\",\n      \"service_name\": \"foo\",\n      \"timestamp\": \"2017-06-12T13:48:16+00:00\",\n      \"event_type\": \"foo_event_type\",\n      \"data\": {},\n      \"call_stack\": [\n        \"standalone_rpc_proxy.call.3f349ea4-ed3e-4a3b-93d0-a36fbf928ecb\",\n        \"bla.bla_method.21d623b4-edc4-4232-9957-4fad72533b75\",\n        \"foo.foo_method.d7e907ee-9425-48a6-84e6-89db19e3ce50\"\n      ],\n      \"entrypoint_protocol\": \"Rpc\",\n      \"call_id\": \"foo.foo_method.d7e907ee-9425-48a6-84e6-89db19e3ce50\"\n    }\n\nThe ``data`` attribute will contain the event data that was provided as\nan argument for the ``event_data`` parameter when dispatching the event.\n\n\nTests\n-----\n\nIt is assumed that RabbitMQ is up and running on the default URL\n``guest:guest@localhost`` and uses the default ports.\n\n.. code-block:: bash\n\n    $ make test\n    $ make coverage\n\nA different RabbitMQ URI can be provided overriding the following\nenvironment variables: ``RABBIT_CTL_URI`` and ``AMQP_URI``.\n\nAdditional ``pytest`` parameters can be also provided using the ``ARGS``\nvariable.\n\n.. code-block:: bash\n\n    $ make test RABBIT_CTL_URI=http://guest:guest@dockermachine:15673 AMQP_URI=amqp://guest:guest@dockermachine:5673 ARGS='-x -vv --disable-pytest-warnings'\n    $ make coverage RABBIT_CTL_URI=http://guest:guest@dockermachine:15673 AMQP_URI=amqp://guest:guest@dockermachine:5673 ARGS='-x -vv --disable-pytest-warnings'",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/sohonetlabs/nameko-eventlog-dispatcher",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nameko-eventlog-dispatcher",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/nameko-eventlog-dispatcher/",
    "release_url": "https://pypi.org/project/nameko-eventlog-dispatcher/0.1.0/",
    "requires_python": "",
    "summary": "Nameko dependency provider that dispatches log data using Events (Pub-Sub).",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "40c48e6b889bceaf0e6b5e43f35b0b36",
          "sha256": "b64ed4d291d93fdb0e7377fb0f4589a90b40fd3341a9ab75968683989cc62269"
        },
        "downloads": 0,
        "filename": "nameko_eventlog_dispatcher-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "40c48e6b889bceaf0e6b5e43f35b0b36",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 7551,
        "upload_time": "2017-06-19T10:53:49",
        "url": "https://files.pythonhosted.org/packages/9b/3d/784f9673fd178597db572f24c7045115d0553e66d23cd5b3dc5da6289ca8/nameko_eventlog_dispatcher-0.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a463f9f64c7d9ba0ac98d2575e66ee0d",
          "sha256": "5d63c2204759373badaeefdac3a6ec9630a0dc4bbd9811d617258562ed30f3ce"
        },
        "downloads": 0,
        "filename": "nameko-eventlog-dispatcher-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a463f9f64c7d9ba0ac98d2575e66ee0d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4487,
        "upload_time": "2017-06-19T10:53:51",
        "url": "https://files.pythonhosted.org/packages/2c/2e/ebed0f415f3d9345a1241647fe18ee6168406318641b1356aed045e976ef/nameko-eventlog-dispatcher-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "40c48e6b889bceaf0e6b5e43f35b0b36",
        "sha256": "b64ed4d291d93fdb0e7377fb0f4589a90b40fd3341a9ab75968683989cc62269"
      },
      "downloads": 0,
      "filename": "nameko_eventlog_dispatcher-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "40c48e6b889bceaf0e6b5e43f35b0b36",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 7551,
      "upload_time": "2017-06-19T10:53:49",
      "url": "https://files.pythonhosted.org/packages/9b/3d/784f9673fd178597db572f24c7045115d0553e66d23cd5b3dc5da6289ca8/nameko_eventlog_dispatcher-0.1.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "a463f9f64c7d9ba0ac98d2575e66ee0d",
        "sha256": "5d63c2204759373badaeefdac3a6ec9630a0dc4bbd9811d617258562ed30f3ce"
      },
      "downloads": 0,
      "filename": "nameko-eventlog-dispatcher-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a463f9f64c7d9ba0ac98d2575e66ee0d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4487,
      "upload_time": "2017-06-19T10:53:51",
      "url": "https://files.pythonhosted.org/packages/2c/2e/ebed0f415f3d9345a1241647fe18ee6168406318641b1356aed045e976ef/nameko-eventlog-dispatcher-0.1.0.tar.gz"
    }
  ]
}