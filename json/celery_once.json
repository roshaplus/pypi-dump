{
  "info": {
    "author": "Cameron Maske",
    "author_email": "cam@trackmaven.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: System :: Distributed Computing"
    ],
    "description": "Celery Once\n===========\n\n|Build Status| |Coverage Status|\n\nCelery Once allows you to prevent multiple execution and queuing of `celery <http://www.celeryproject.org/>`_ tasks.\n\nInstallation\n============\n\nInstalling ``celery_once`` is simple with pip, just run:\n\n::\n\n    pip install -U celery_once\n\n\nRequirements\n============\n\n* `Celery <http://www.celeryproject.org/>`_. Built to run with Celery 4.0. Older versions may work, but are not officially supported.\n\nUsage\n=====\n\nTo use ``celery_once``, your tasks need to inherit from an `abstract <http://celery.readthedocs.org/en/latest/userguide/tasks.html#abstract-classes>`_ base task called ``QueueOnce``.\n\nOnce installed, you'll need to configure a few options a ``ONCE`` key in celery's conf.\n\n.. code:: python\n\n    from celery import Celery\n    from celery_once import QueueOnce\n    from time import sleep\n\n    celery = Celery('tasks', broker='amqp://guest@localhost//')\n    celery.conf.ONCE = {\n      'backend': 'celery_once.backends.Redis',\n      'settings': {\n        'url': 'redis://localhost:6379/0',\n        'default_timeout': 60 * 60\n      }\n    }\n\n    @celery.task(base=QueueOnce)\n    def slow_task():\n        sleep(30)\n        return \"Done!\"\n\n\nThe exact configuration, depends on which locking backend you want to use. See [Backends](#Backends).\n\n\nBehind the scenes, this overrides ``apply_async`` and ``delay``. It does not affect calling the tasks directly.\n\nWhen running the task, ``celery_once`` checks that no lock is in place (against a Redis key).\nIf it isn't, the task will run as normal. Once the task completes (or ends due to an exception) the lock will clear.\nIf an attempt is made to run the task again before it completes an ``AlreadyQueued`` exception will be raised.\n\n.. code:: python\n\n    example.delay(10)\n    example.delay(10)\n    Traceback (most recent call last):\n        ..\n    AlreadyQueued()\n\n.. code:: python\n\n    result = example.apply_async(args=(10))\n    result = example.apply_async(args=(10))\n    Traceback (most recent call last):\n        ..\n    AlreadyQueued()\n\n\n``graceful``\n------------\n\nOptionally, instead of raising an ``AlreadyQueued`` exception, the task can return ``None`` if ``once={'graceful': True}`` is set in the task's `options <http://celery.readthedocs.org/en/latest/userguide/tasks.html#list-of-options>`_ or when run through ``apply_async``.\n\n.. code:: python\n\n    from celery_once import AlreadyQueued\n    # Either catch the exception,\n    try:\n        example.delay(10)\n    except AlreadyQueued:\n        pass\n    # Or, handle it gracefully at run time.\n    result = example.apply(args=(10), once={'graceful': True})\n    # or by default.\n    @celery.task(base=QueueOnce, once={'graceful': True})\n    def slow_task():\n        sleep(30)\n        return \"Done!\"\n\n\n``keys``\n--------\n\nBy default ``celery_once`` creates a lock based on the task's name and its arguments and values.\nTake for example, the following task below...\n\n.. code:: python\n\n    @celery.task(base=QueueOnce)\n    def slow_add(a, b):\n        sleep(30)\n        return a + b\n\nRunning the task with different arguments will default to checking against different locks.\n\n.. code:: python\n\n    slow_add(1, 1)\n    slow_add(1, 2)\n\nIf you want to specify locking based on a subset, or no arguments you can adjust the keys ``celery_once`` looks at in the task's `options <http://celery.readthedocs.org/en/latest/userguide/tasks.html#list-of-options>`_ with ``once={'keys': [..]}``\n\n.. code:: python\n\n    @celery.task(base=QueueOnce, once={'keys': ['a']})\n    def slow_add(a, b):\n        sleep(30)\n        return a + b\n\n    example.delay(1, 1)\n    # Checks if any tasks are running with the `a=1`\n    example.delay(1, 2)\n    Traceback (most recent call last):\n        ..\n    AlreadyQueued()\n    example.delay(2, 2)\n\n.. code:: python\n\n    @celery.task(base=QueueOnce, once={'keys': []})\n    def slow_add(a, b):\n        sleep(30)\n        return a + b\n\n    # Will enforce only one task can run, no matter what arguments.\n    example.delay(1, 1)\n    example.delay(2, 2)\n    Traceback (most recent call last):\n        ..\n    AlreadyQueued()\n\n\n``timeout``\n-----------\nAs a fall back, ``celery_once`` will clear a lock after 60 minutes.\nThis is set globally in Celery's configuration with ``ONCE_DEFAULT_TIMEOUT`` but can be set for individual tasks using...\n\n.. code:: python\n\n    @celery.task(base=QueueOnce, once={'timeout': 60 * 60 * 10})\n    def long_running_task():\n        sleep(60 * 60 * 3)\n\n\n``unlock_before_run``\n---------------------\nBy default, the lock is removed after the task has executed (using celery's `after_return <https://celery.readthedocs.org/en/latest/reference/celery.app.task.html#celery.app.task.Task.after_return>`_). This behaviour can be changed setting the task's option ``unlock_before_run``. When set to ``True``, the lock will be removed just before executing the task.\n\n**Caveats**:\n  * Any retry of the task won't re-enable the lock!\n  * This can only be set when defining the task, it cannot be passed dynamically to ``apply_async``\n\n.. code:: python\n\n    @celery.task(base=QueueOnce, once={'unlock_before_run': True})\n    def slow_task():\n        sleep(30)\n        return \"Done!\"\n\n\n\n\nBackends\n========\n\nRedis Backend\n-------------\n\n\nRequires:\n\n* `Redis <http://redis.io/>`_ is used as a distributed locking mechanism.\n\nConfiguration:\n\n-  ``backend`` - ``celery_once.backends.Redis``\n-  ``settings``\n  - ``default_timeout`` - how many seconds after a lock has been set before it should automatically timeout (defaults to 3600 seconds, or 1 hour).\n  - ``url`` - should point towards a running Redis instance (defaults to ``redis://localhost:6379/0``). See below for the format options supported\n\n\nThe URL parser supports two patterns of urls:\n\n* ``redis://host:port[/db][?options]``: redis over TCP\n\n* ``redis+socket:///path/to/redis.sock[?options]``: redis over a UNIX socket\n\n  The ``options`` query args are mapped to the `StrictRedis <https://redis-py.readthedocs.org/en/latest/index.html#redis.StrictRedis>`_ keyword args.\n  Examples:\n  * ``redis://localhost:6379/1``\n\n  * ``redis+socket:///var/run/redis/redis.sock?db=1``\n\n\nExample Configuration:\n\n.. code:: python\n\n    celery.conf.ONCE = {\n      'backend': 'celery_once.backends.Redis',\n      'settings': {\n        'url': 'redis://localhost:6379/0',\n        'default_timeout': 60 * 60\n      }\n    }\n\n\nCustom Backend\n--------------\n\nIf you want to implement a custom locking backend, see `BACKEND\\_GUIDE.rst`_.\n\n.. _BACKEND\\_GUIDE.rst: BACKEND_GUIDE.rst\n\nSupport\n=======\n\n* Tests are run against Python 2.7, 3.4 and 3.5. Other versions may work, but are not officially supported.\n\nContributing\n============\n\nContributions are welcome, and they are greatly appreciated! See `contributing\nguide <CONTRIBUTING.rst>`_ for more details.\n\n\n.. |Build Status| image:: https://travis-ci.org/TrackMaven/celery-once.svg\n   :target: https://travis-ci.org/TrackMaven/celery-once\n.. |Coverage Status| image:: https://coveralls.io/repos/TrackMaven/celery-once/badge.svg\n   :target: https://coveralls.io/r/TrackMaven/celery-once",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/trackmaven/celery-once",
    "keywords": "celery,mutex,once,lock,redis",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "celery_once",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/celery_once/",
    "release_url": "https://pypi.org/project/celery_once/1.0.2/",
    "requires_python": null,
    "summary": "Allows you to prevent multiple execution and queuing of celery tasks.",
    "version": "1.0.2"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "181b2718565fd7299e8723beae7cb6dd",
          "sha256": "2411c9b821487470b5cc2a3f206bd1bedc243a362d97198c6e07936b422699bd"
        },
        "downloads": 6159,
        "filename": "celery_once-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "181b2718565fd7299e8723beae7cb6dd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5749,
        "upload_time": "2015-01-30T20:52:51",
        "url": "https://files.pythonhosted.org/packages/28/39/12f710eb5ef1baadb670710f041ac292d5e15568553b3d98244404537718/celery_once-0.1.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "02fb58675b4eadaefa588023197d3ad6",
          "sha256": "ba850698fa360810eda7eb52e2a38a4ee7d1ee6f1f17284f5d10e8e1f00d1326"
        },
        "downloads": 1320,
        "filename": "celery_once-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "02fb58675b4eadaefa588023197d3ad6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6060,
        "upload_time": "2015-02-27T02:24:42",
        "url": "https://files.pythonhosted.org/packages/d0/51/b589d477c0f08aacdcedf72370dcb4fe0216908432e3b2fd195829961a9a/celery_once-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f2596048a7d40ffe8c2215af39489666",
          "sha256": "c9c6ed3c48a752841e50d036e68a8898d2b21a4427b171bbf55402e690427177"
        },
        "downloads": 5385,
        "filename": "celery_once-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f2596048a7d40ffe8c2215af39489666",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6628,
        "upload_time": "2015-03-16T03:07:33",
        "url": "https://files.pythonhosted.org/packages/4f/67/65efbdcd3d6cec5e5d9050bfec2530108333377ca7e6045de8d6c1734759/celery_once-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c5ad5cf10968b5f4cef3d19ec1e98376",
          "sha256": "4640281ff0fee61f6321be17fa7d5c30d4934b28962295d85735dda8123f35ba"
        },
        "downloads": 2765,
        "filename": "celery_once-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c5ad5cf10968b5f4cef3d19ec1e98376",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6938,
        "upload_time": "2015-07-14T16:10:50",
        "url": "https://files.pythonhosted.org/packages/6e/ca/cc1278268b5302b7d0ea18055161d558736127c4841ae292e6c1e995b0de/celery_once-0.1.3.tar.gz"
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d33f800151c1ac3e99de97c6c11fdd52",
          "sha256": "f3e330b2bef8c952145b77275004db8c4bb6409850bbbca90115285349f007fe"
        },
        "downloads": 7273,
        "filename": "celery_once-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d33f800151c1ac3e99de97c6c11fdd52",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6976,
        "upload_time": "2015-07-29T21:47:56",
        "url": "https://files.pythonhosted.org/packages/0c/eb/4a1966b5ca68d0c5600c9eb7bf627de8cb8dcf01f68077fb9e97c9121283/celery_once-0.1.4.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a013a504ba92a7cb6fae42dca2fd36b4",
          "sha256": "22b2f8b0f088927b9e68545f8d239e8f90818714a31c189aab2a4d1d84925ed2"
        },
        "downloads": 0,
        "filename": "celery_once-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a013a504ba92a7cb6fae42dca2fd36b4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9515,
        "upload_time": "2017-06-06T08:49:25",
        "url": "https://files.pythonhosted.org/packages/64/28/67040127279db925142ddc112b9cd50ae5474336fe51e9cf3f1b87b9fb76/celery_once-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "023ed5589471de6a93da507366cb35bc",
          "sha256": "1b75127a89fb28ce56ad43595a2046b4b3c3d4cbe3052965c69d90fdd09a3289"
        },
        "downloads": 0,
        "filename": "celery_once-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "023ed5589471de6a93da507366cb35bc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10282,
        "upload_time": "2017-06-06T15:07:51",
        "url": "https://files.pythonhosted.org/packages/8e/e3/f4332ed46eada0d96764e69f79fa15371e0f22325ddc339d1195c0ff3b08/celery_once-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4a617c2d51b5d0888094f032444ff1ca",
          "sha256": "475671cb8c2e16043bd8b96dbe09eb04744e63fb955c1f0c778cc64f74e6a69e"
        },
        "downloads": 0,
        "filename": "celery_once-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4a617c2d51b5d0888094f032444ff1ca",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10356,
        "upload_time": "2017-06-06T15:22:47",
        "url": "https://files.pythonhosted.org/packages/d3/31/379f744074d9eac3ae8fc79f5c52b19f42b03398b6914ae9a6ba6c56134e/celery_once-1.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4a617c2d51b5d0888094f032444ff1ca",
        "sha256": "475671cb8c2e16043bd8b96dbe09eb04744e63fb955c1f0c778cc64f74e6a69e"
      },
      "downloads": 0,
      "filename": "celery_once-1.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4a617c2d51b5d0888094f032444ff1ca",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10356,
      "upload_time": "2017-06-06T15:22:47",
      "url": "https://files.pythonhosted.org/packages/d3/31/379f744074d9eac3ae8fc79f5c52b19f42b03398b6914ae9a6ba6c56134e/celery_once-1.0.2.tar.gz"
    }
  ]
}