{
  "info": {
    "author": "Mehdi Sadeghi",
    "author_email": "mehdi@mehdix.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# osmtogtfs [![Build Status](https://travis-ci.org/hiposfer/osmtogtfs.svg?branch=master)](https://travis-ci.org/hiposfer/osmtogtfs)\nExtracts partial GTFS feed from OSM data.\n\nOpenStreeMaps data contain information about bus, tram, train and other public transport means.\nThis information is not enought for providing a complete routing service, most importantly because\nit lacks timing data. However, it still contains routes, stop positions and some other useful data.\n\nThis tool takes an OSM file or URI and thanks to [osmium](http://osmcode.org/) library converts it to a partial \n[GTFS](https://developers.google.com/transit/gtfs/reference/) feed. GTFS is the de facto standard \nfor sharing public transport information and there are many tools around it. The resulting feed would\nnot validate if you check it, because it is of course partial. Nevertheless, it is yet valuable to us.\n\n# Installation\nThis tool uses osmium which is a C++ library built using boost, so one should install that first.\nThe best way would be using the package manager of your OS and installing [pyosmium](https://github.com/osmcode/pyosmium).\nAfterwards clone the repo and install it:\n\n    $ git clone https://github.com/hiposfer/osmtogtfs & cd osmtogtfs\n    $ python setup.py install\n\n\nThis will install `osmtogtfs.py` executable on your OS. You can also directly run the script found\nin the source code. Make sure to run it with python 3.\n\n# Tests\nWe use the wonderful `pytest` package for testing. Install pytest and run the tests:\n\n    $ pip install pytest\n    $ pytest -s tests/tests.py\n\n`-s` disables capturing and shows us more output (such as print statements and log messages).\n\n## Pytest Caching\nIn order to run tests faster we use caching. The result of OSM preprocessing will be cached and used\nfor subsequent tests. In order to clear the cache run pytest with `--cache-clear` option. Alternatively\nyou can delete `.cache` folder.\n\n## Profiling\nIn order to profile the code we use `cProfile`:\n\n    # For the `osmtogtfs` script\n    $ python -m cProfile -s cumtime osmtogtfs.py resources/osm/bremen-latest.osm.pbf --outdir tests/out > tests/main_profile.txt\n    # For tests\n    $ python -m cProfile -s cumtime /path/to/pytest tests/tests.py > tests/tests_profile.txt\n\nYou will find results in [`tests/main_profile.txt`](tests/main_profile.txt) and [`tests/main_profile.txt`](tests/tests_profile.txt).\nTheses results are produced on an Archlinux machine with an Intel(R) Core(TM) i5-3210M CPU @ 2.50GHz CPU with 16GB RAM.\n\n# Usage\nRun the tool over your OSM data source (or whatever osmium accepts):\n\n    python osmtogtfs.py <osmfile>\n\nAfter a while, depending on the file size, a file named `gtfs.zip` will be produced inside the working directory.\nMoreover, if you install the package, you will get an script called `osmtogtfs` in your python path:\n\n    $ osmtogtfs --help\n    Usage: osmtogtfs [OPTIONS] INPUT\n\n    Options:\n      --outdir PATH   Store output in this directory.\n      --zipfile PATH  Save as Zip file if provided.\n      --help          Show this message and exit.\n\n`--outdir` defaults to the working directory and if `--zipfile` is provided, the feed will be zipped and stored in\nthe _outdir_ with the given name, otherwise feed will be stored as plain text in multiple files.\n\n# Implementation Notes\nIn this section we describe important aspects of the implementation in order to help understand how the program works.\n\n## Field Mapping\nGTFS feeds could contain up to thirteen different CSV files with `.txt` extension. Six of these files are required for a valid\nfeed, including _agency.txt_, _stops.txt_, _routes.txt_, _trips.txt_, _stop_times.txt_ and _calendar.txt_. \nEach file contains a set of comumns. Some columns are required and some are optional. \nMost importantly, not all the fields necessary to build a GTFS feed are available in OSM data. \nTherefore we have to generate some fileds ourselves or leave them blank.\nBelow we cover how the values for each column of the files that we produce at the moment are produced.\n\n### agency.txt\nWe use _operator_ tag on OSM relations which are tagged as `relation=route` to extract agency information. \nHowever, there are some routes without operator tags. In such cases we use a dummy agency:\n\n    {'agency_id': -1, 'agency_name': 'Unkown agency', 'agency_timezone': ''}\n\n - agency_id: we use the _operator_ value to produce the _agency_id_: `agency_id = abs(hash(operator_name))`\n - agency_name: the value of the _operator_ tag\n - agency_timezone: we guess it based on the coordinates of the elements in the relation\n\n### stops.txt\n\n - stop_id: value of the node id from OSM\n - stop_name: value of _name_ tag or _Unknown_\n - stop_lon: longitute of the node\n - stop_lat: latitute of the node\n\n### routes.txt\n\n - route_id: id of the OSM relation element\n - route_short_name: value of _name_ or _ref_ tag of the relation\n - route_long_name: a combination of _from_ and _to_ tags on the relation otherwise empty\n - route_type: we map OSM route types to GTFS\n - route_url: link to the relation on openstreetmaps.org\n - route_color: value of the _color_ tag if present otherwise empty\n - agency_id: ID of the agency otherwise -1\n\n #### OSM to GTFS Route Type Mapping\n Below is the mapping that we use, the left column is the OSM value and the right column is the \n corresponding value from GTFS specification (make sure the see the code for any changes):\n\n    tram: \t\t0\n    light_rail: 0\n    subway: \t1\n    rail: \t\t2\n    railway: \t2\n    train: \t\t2\n    bus: \t\t3\n    ex-bus: \t3\n    ferry: \t\t4\n    cableCar: \t5\n    gondola: \t6\n    funicular: \t7\n\n\n# Lincense\nMIT\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/hiposfer/osmtogtfs",
    "keywords": "osm,gtfs",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "osmtogtfs",
    "platform": "any",
    "project_url": "https://pypi.org/project/osmtogtfs/",
    "release_url": "https://pypi.org/project/osmtogtfs/0.1.1/",
    "requires_dist": [
      "click",
      "pytest",
      "timezonefinder",
      "osmium"
    ],
    "requires_python": "",
    "summary": "Extracts partial GTFS feed from OSM data.",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d7dd5e696c9a6ec8a3feeca2109076ff",
          "sha256": "e9139670380a53ca65fddaeb31202d7e527fa8da77d38f6b8373cc9cf3d6b4d8"
        },
        "downloads": -1,
        "filename": "osmtogtfs-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d7dd5e696c9a6ec8a3feeca2109076ff",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 12284,
        "upload_time": "2017-12-04T15:54:09",
        "url": "https://files.pythonhosted.org/packages/48/c1/2c42ec9ad0be4caca294d0b8c171e7fa0e64d7a5f7faf6ea41ac62ff5b95/osmtogtfs-0.1.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "26d3c091158db6adccfaf29c11b87f2e",
          "sha256": "cebb07972d367e842dd9b80242f958d22c6d0a18c3d84d44665e2a6c623eab52"
        },
        "downloads": -1,
        "filename": "osmtogtfs-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "26d3c091158db6adccfaf29c11b87f2e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8153,
        "upload_time": "2017-12-04T15:54:11",
        "url": "https://files.pythonhosted.org/packages/7c/6a/f6742e5541e6e20c04d3989605f34ea7f309a19c3f0888e5bf099ad46019/osmtogtfs-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d7dd5e696c9a6ec8a3feeca2109076ff",
        "sha256": "e9139670380a53ca65fddaeb31202d7e527fa8da77d38f6b8373cc9cf3d6b4d8"
      },
      "downloads": -1,
      "filename": "osmtogtfs-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d7dd5e696c9a6ec8a3feeca2109076ff",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 12284,
      "upload_time": "2017-12-04T15:54:09",
      "url": "https://files.pythonhosted.org/packages/48/c1/2c42ec9ad0be4caca294d0b8c171e7fa0e64d7a5f7faf6ea41ac62ff5b95/osmtogtfs-0.1.1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "26d3c091158db6adccfaf29c11b87f2e",
        "sha256": "cebb07972d367e842dd9b80242f958d22c6d0a18c3d84d44665e2a6c623eab52"
      },
      "downloads": -1,
      "filename": "osmtogtfs-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "26d3c091158db6adccfaf29c11b87f2e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8153,
      "upload_time": "2017-12-04T15:54:11",
      "url": "https://files.pythonhosted.org/packages/7c/6a/f6742e5541e6e20c04d3989605f34ea7f309a19c3f0888e5bf099ad46019/osmtogtfs-0.1.1.tar.gz"
    }
  ]
}