{
  "info": {
    "author": "Zope Foundation and Contributors",
    "author_email": "zope-dev@zope.org",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 6 - Mature",
      "Environment :: Web Environment",
      "Framework :: Zope2",
      "License :: OSI Approved :: Zope Public License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "The DateTime package\n====================\n\nEncapsulation of date/time values.\n\n\nFunction Timezones()\n--------------------\n\nReturns the list of recognized timezone names:\n\n  >>> from DateTime import Timezones\n  >>> zones = set(Timezones())\n\nAlmost all of the standard pytz timezones are included, with the exception\nof some commonly-used but ambiguous abbreviations, where historical Zope\nusage conflicts with the name used by pytz:\n\n  >>> import pytz\n  >>> [x for x in pytz.all_timezones if x not in zones]\n  ['CET', 'EET', 'EST', 'MET', 'MST', 'WET']\n\nClass DateTime\n--------------\n\nDateTime objects represent instants in time and provide interfaces for\ncontrolling its representation without affecting the absolute value of\nthe object.\n\nDateTime objects may be created from a wide variety of string or\nnumeric data, or may be computed from other DateTime objects.\nDateTimes support the ability to convert their representations to many\nmajor timezones, as well as the ablility to create a DateTime object\nin the context of a given timezone.\n\nDateTime objects provide partial numerical behavior:\n\n* Two date-time objects can be subtracted to obtain a time, in days\n  between the two.\n\n* A date-time object and a positive or negative number may be added to\n  obtain a new date-time object that is the given number of days later\n  than the input date-time object.\n\n* A positive or negative number and a date-time object may be added to\n  obtain a new date-time object that is the given number of days later\n  than the input date-time object.\n\n* A positive or negative number may be subtracted from a date-time\n  object to obtain a new date-time object that is the given number of\n  days earlier than the input date-time object.\n\nDateTime objects may be converted to integer, long, or float numbers\nof days since January 1, 1901, using the standard int, long, and float\nfunctions (Compatibility Note: int, long and float return the number\nof days since 1901 in GMT rather than local machine timezone).\nDateTime objects also provide access to their value in a float format\nusable with the python time module, provided that the value of the\nobject falls in the range of the epoch-based time module.\n\nA DateTime object should be considered immutable; all conversion and numeric\noperations return a new DateTime object rather than modify the current object.\n\nA DateTime object always maintains its value as an absolute UTC time,\nand is represented in the context of some timezone based on the\narguments used to create the object.  A DateTime object's methods\nreturn values based on the timezone context.\n\nNote that in all cases the local machine timezone is used for\nrepresentation if no timezone is specified.\n\nConstructor for DateTime\n------------------------\n\nDateTime() returns a new date-time object.  DateTimes may be created\nwith from zero to seven arguments:\n\n* If the function is called with no arguments, then the current date/\n  time is returned, represented in the timezone of the local machine.\n\n* If the function is invoked with a single string argument which is a\n  recognized timezone name, an object representing the current time is\n  returned, represented in the specified timezone.\n\n* If the function is invoked with a single string argument\n  representing a valid date/time, an object representing that date/\n  time will be returned.\n\n  As a general rule, any date-time representation that is recognized\n  and unambigous to a resident of North America is acceptable.  (The\n  reason for this qualification is that in North America, a date like:\n  2/1/1994 is interpreted as February 1, 1994, while in some parts of\n  the world, it is interpreted as January 2, 1994.) A date/ time\n  string consists of two components, a date component and an optional\n  time component, separated by one or more spaces.  If the time\n  component is omited, 12:00am is assumed.\n  \n  Any recognized timezone name specified as the final element of the\n  date/time string will be used for computing the date/time value.\n  (If you create a DateTime with the string,\n  \"Mar 9, 1997 1:45pm US/Pacific\", the value will essentially be the\n  same as if you had captured time.time() at the specified date and\n  time on a machine in that timezone).  If no timezone is passed, then\n  the timezone configured on the local machine will be used, **except**\n  that if the date format matches ISO 8601 ('YYYY-MM-DD'), the instance\n  will use UTC / CMT+0 as the timezone.\n\n  o Returns current date/time, represented in US/Eastern:\n\n    >>> from DateTime import DateTime\n    >>> e = DateTime('US/Eastern')\n    >>> e.timezone()\n    'US/Eastern'\n\n  o Returns specified time, represented in local machine zone:\n\n    >>> x = DateTime('1997/3/9 1:45pm')\n    >>> x.parts() # doctest: +ELLIPSIS\n    (1997, 3, 9, 13, 45, ...)\n\n  o Specified time in local machine zone, verbose format:\n\n    >>> y = DateTime('Mar 9, 1997 13:45:00')\n    >>> y.parts() # doctest: +ELLIPSIS\n    (1997, 3, 9, 13, 45, ...)\n    >>> y == x\n    True\n    \n  o Specified time in UTC via ISO 8601 rule:\n  \n    >>> z = DateTime('2014-03-24')\n    >>> z.parts() # doctest: +ELLIPSIS\n    (2014, 3, 24, 0, 0, ...)\n    >>> z.timezone()\n    'GMT+0'\n\n  The date component consists of year, month, and day values.  The\n  year value must be a one-, two-, or four-digit integer.  If a one-\n  or two-digit year is used, the year is assumed to be in the\n  twentieth century.  The month may an integer, from 1 to 12, a month\n  name, or a month abreviation, where a period may optionally follow\n  the abreviation.  The day must be an integer from 1 to the number of\n  days in the month.  The year, month, and day values may be separated\n  by periods, hyphens, forward, shashes, or spaces.  Extra spaces are\n  permitted around the delimiters.  Year, month, and day values may be\n  given in any order as long as it is possible to distinguish the\n  components.  If all three components are numbers that are less than\n  13, then a a month-day-year ordering is assumed.\n\n  The time component consists of hour, minute, and second values\n  separated by colons.  The hour value must be an integer between 0\n  and 23 inclusively.  The minute value must be an integer between 0\n  and 59 inclusively.  The second value may be an integer value\n  between 0 and 59.999 inclusively.  The second value or both the\n  minute and second values may be ommitted.  The time may be followed\n  by am or pm in upper or lower case, in which case a 12-hour clock is\n  assumed.\n\n* If the DateTime function is invoked with a single Numeric argument,\n  the number is assumed to be either a floating point value such as\n  that returned by time.time() , or a number of days after January 1,\n  1901 00:00:00 UTC.\n\n  A DateTime object is returned that represents either the gmt value\n  of the time.time() float represented in the local machine's\n  timezone, or that number of days after January 1, 1901.  Note that\n  the number of days after 1901 need to be expressed from the\n  viewpoint of the local machine's timezone.  A negative argument will\n  yield a date-time value before 1901.\n\n* If the function is invoked with two numeric arguments, then the\n  first is taken to be an integer year and the second argument is\n  taken to be an offset in days from the beginning of the year, in the\n  context of the local machine timezone.  The date-time value returned\n  is the given offset number of days from the beginning of the given\n  year, represented in the timezone of the local machine.  The offset\n  may be positive or negative.  Two-digit years are assumed to be in\n  the twentieth century.\n\n* If the function is invoked with two arguments, the first a float\n  representing a number of seconds past the epoch in gmt (such as\n  those returned by time.time()) and the second a string naming a\n  recognized timezone, a DateTime with a value of that gmt time will\n  be returned, represented in the given timezone.\n\n    >>> import time\n    >>> t = time.time()\n\n  Time t represented as US/Eastern:\n\n    >>> now_east = DateTime(t, 'US/Eastern')\n\n  Time t represented as US/Pacific:\n\n    >>> now_west = DateTime(t, 'US/Pacific')\n\n  Only their representations are different:\n\n    >>> now_east.equalTo(now_west)\n    True\n\n* If the function is invoked with three or more numeric arguments,\n  then the first is taken to be an integer year, the second is taken\n  to be an integer month, and the third is taken to be an integer day.\n  If the combination of values is not valid, then a DateTimeError is\n  raised.  One- or two-digit years up to 69 are assumed to be in the \n  21st century, whereas values 70-99 are assumed to be 20th century.\n  The fourth, fifth, and sixth arguments are floating point, positive\n  or negative offsets in units of hours, minutes, and days, and\n  default to zero if not given.  An optional string may be given as\n  the final argument to indicate timezone (the effect of this is as if\n  you had taken the value of time.time() at that time on a machine in\n  the specified timezone).\n\nIf a string argument passed to the DateTime constructor cannot be\nparsed, it will raise SyntaxError.  Invalid date, time, or\ntimezone components will raise a DateTimeError.\n\nThe module function Timezones() will return a list of the timezones\nrecognized by the DateTime module.  Recognition of timezone names is\ncase-insensitive.\n\nInstance Methods for DateTime (IDateTime interface)\n---------------------------------------------------\n\nConversion and comparison methods\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ``timeTime()`` returns the date/time as a floating-point number in\n  UTC, in the format used by the python time module.  Note that it is\n  possible to create date /time values with DateTime that have no\n  meaningful value to the time module, and in such cases a\n  DateTimeError is raised.  A DateTime object's value must generally\n  be between Jan 1, 1970 (or your local machine epoch) and Jan 2038 to\n  produce a valid time.time() style value.\n\n    >>> dt = DateTime('Mar 9, 1997 13:45:00 US/Eastern')\n    >>> dt.timeTime()\n    857933100.0\n\n    >>> DateTime('2040/01/01 UTC').timeTime()\n    2208988800.0\n\n    >>> DateTime('1900/01/01 UTC').timeTime()\n    -2208988800.0\n\n* ``toZone(z)`` returns a DateTime with the value as the current\n  object, represented in the indicated timezone:\n\n    >>> dt.toZone('UTC')\n    DateTime('1997/03/09 18:45:00 UTC')\n\n    >>> dt.toZone('UTC').equalTo(dt)\n    True\n\n* ``isFuture()`` returns true if this object represents a date/time\n  later than the time of the call:\n\n    >>> dt.isFuture()\n    False\n    >>> DateTime('Jan 1 3000').isFuture() # not time-machine safe!\n    True\n\n* ``isPast()`` returns true if this object represents a date/time\n  earlier than the time of the call:\n\n    >>> dt.isPast()\n    True\n    >>> DateTime('Jan 1 3000').isPast() # not time-machine safe!\n    False\n\n* ``isCurrentYear()`` returns true if this object represents a\n  date/time that falls within the current year, in the context of this\n  object's timezone representation:\n\n    >>> dt.isCurrentYear()\n    False\n    >>> DateTime().isCurrentYear()\n    True\n\n* ``isCurrentMonth()`` returns true if this object represents a\n  date/time that falls within the current month, in the context of\n  this object's timezone representation:\n\n    >>> dt.isCurrentMonth()\n    False\n    >>> DateTime().isCurrentMonth()\n    True\n\n* ``isCurrentDay()`` returns true if this object represents a\n  date/time that falls within the current day, in the context of this\n  object's timezone representation:\n\n    >>> dt.isCurrentDay()\n    False\n    >>> DateTime().isCurrentDay()\n    True\n\n* ``isCurrentHour()`` returns true if this object represents a\n  date/time that falls within the current hour, in the context of this\n  object's timezone representation:\n\n    >>> dt.isCurrentHour()\n    False\n\n    >>> DateTime().isCurrentHour()\n    True\n\n* ``isCurrentMinute()`` returns true if this object represents a\n  date/time that falls within the current minute, in the context of\n  this object's timezone representation:\n\n    >>> dt.isCurrentMinute()\n    False\n    >>> DateTime().isCurrentMinute()\n    True\n\n* ``isLeapYear()`` returns true if the current year (in the context of\n  the object's timezone) is a leap year:\n\n    >>> dt.isLeapYear()\n    False\n    >>> DateTime('Mar 8 2004').isLeapYear()\n    True\n\n* ``earliestTime()`` returns a new DateTime object that represents the\n    earliest possible time (in whole seconds) that still falls within\n    the current object's day, in the object's timezone context:\n\n    >>> dt.earliestTime()\n    DateTime('1997/03/09 00:00:00 US/Eastern')\n\n* ``latestTime()`` return a new DateTime object that represents the\n  latest possible time (in whole seconds) that still falls within the\n  current object's day, in the object's timezone context\n\n    >>> dt.latestTime()\n    DateTime('1997/03/09 23:59:59 US/Eastern')\n\nComponent access\n~~~~~~~~~~~~~~~~\n\n* ``parts()`` returns a tuple containing the calendar year, month,\n  day, hour, minute second and timezone of the object\n\n    >>> dt.parts() # doctest: +ELLIPSIS\n    (1997, 3, 9, 13, 45, ... 'US/Eastern')\n\n* ``timezone()`` returns the timezone in which the object is represented:\n\n    >>> dt.timezone() in Timezones()\n    True\n\n* ``tzoffset()`` returns the timezone offset for the objects timezone:\n\n    >>> dt.tzoffset()\n    -18000\n\n* ``year()`` returns the calendar year of the object:\n\n    >>> dt.year()\n    1997\n\n* ``month()`` retursn the month of the object as an integer:\n\n    >>> dt.month()\n    3\n\n* ``Month()`` returns the full month name:\n\n    >>> dt.Month()\n    'March'\n\n* ``aMonth()`` returns the abreviated month name:\n\n    >>> dt.aMonth()\n    'Mar'\n\n* ``pMonth()`` returns the abreviated (with period) month name:\n\n    >>> dt.pMonth()\n    'Mar.'\n\n* ``day()`` returns the integer day:\n\n    >>> dt.day()\n    9\n\n* ``Day()`` returns the full name of the day of the week:\n\n    >>> dt.Day()\n    'Sunday'\n\n* ``dayOfYear()`` returns the day of the year, in context of the\n  timezone representation of the object:\n\n    >>> dt.dayOfYear()\n    68\n\n* ``aDay()`` returns the abreviated name of the day of the week:\n\n    >>> dt.aDay()\n    'Sun'\n\n* ``pDay()`` returns the abreviated (with period) name of the day of\n  the week:\n\n    >>> dt.pDay()\n    'Sun.'\n\n* ``dow()`` returns the integer day of the week, where Sunday is 0:\n\n    >>> dt.dow()\n    0\n\n* ``dow_1()`` returns the integer day of the week, where sunday is 1:\n\n    >>> dt.dow_1()\n    1\n\n* ``h_12()`` returns the 12-hour clock representation of the hour:\n\n    >>> dt.h_12()\n    1\n\n* ``h_24()`` returns the 24-hour clock representation of the hour:\n\n    >>> dt.h_24()\n    13\n\n* ``ampm()`` returns the appropriate time modifier (am or pm):\n\n    >>> dt.ampm()\n    'pm'\n\n* ``hour()`` returns the 24-hour clock representation of the hour:\n\n    >>> dt.hour()\n    13\n\n* ``minute()`` returns the minute:\n\n    >>> dt.minute()\n    45\n\n* ``second()`` returns the second:\n\n    >>> dt.second() == 0\n    True\n\n* ``millis()`` returns the milliseconds since the epoch in GMT.\n\n    >>> dt.millis() == 857933100000\n    True\n\nstrftime()\n~~~~~~~~~~\n\nSee ``tests/test_datetime.py``.\n\nGeneral formats from previous DateTime\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n* ``Date()`` return the date string for the object:\n\n    >>> dt.Date()\n    '1997/03/09'\n\n* ``Time()`` returns the time string for an object to the nearest\n  second:\n\n    >>> dt.Time()\n    '13:45:00'\n\n* ``TimeMinutes()`` returns the time string for an object not showing\n  seconds:\n\n    >>> dt.TimeMinutes()\n    '13:45'\n\n* ``AMPM()`` returns the time string for an object to the nearest second:\n\n    >>> dt.AMPM()\n    '01:45:00 pm'\n\n* ``AMPMMinutes()`` returns the time string for an object not showing\n  seconds:\n\n    >>> dt.AMPMMinutes()\n    '01:45 pm'\n\n* ``PreciseTime()`` returns the time string for the object:\n\n    >>> dt.PreciseTime()\n    '13:45:00.000'\n\n* ``PreciseAMPM()`` returns the time string for the object:\n\n    >>> dt.PreciseAMPM()\n    '01:45:00.000 pm'\n\n* ``yy()`` returns the calendar year as a 2 digit string\n\n    >>> dt.yy()\n    '97'\n\n* ``mm()`` returns the month as a 2 digit string\n\n    >>> dt.mm()\n    '03'\n\n* ``dd()`` returns the day as a 2 digit string:\n\n    >>> dt.dd()\n    '09'\n\n* ``rfc822()`` returns the date in RFC 822 format:\n\n    >>> dt.rfc822()\n    'Sun, 09 Mar 1997 13:45:00 -0500'\n\nNew formats\n~~~~~~~~~~~\n\n* ``fCommon()`` returns a string representing the object's value in\n  the format: March 9, 1997 1:45 pm:\n\n    >>> dt.fCommon()\n    'March 9, 1997 1:45 pm'\n\n* ``fCommonZ()`` returns a string representing the object's value in\n  the format: March 9, 1997 1:45 pm US/Eastern:\n\n    >>> dt.fCommonZ()\n    'March 9, 1997 1:45 pm US/Eastern'\n\n* ``aCommon()`` returns a string representing the object's value in\n  the format: Mar 9, 1997 1:45 pm:\n\n    >>> dt.aCommon()\n    'Mar 9, 1997 1:45 pm'\n\n* ``aCommonZ()`` return a string representing the object's value in\n  the format: Mar 9, 1997 1:45 pm US/Eastern:\n\n    >>> dt.aCommonZ()\n    'Mar 9, 1997 1:45 pm US/Eastern'\n\n* ``pCommon()`` returns a string representing the object's value in\n  the format Mar. 9, 1997 1:45 pm:\n\n    >>> dt.pCommon()\n    'Mar. 9, 1997 1:45 pm'\n\n* ``pCommonZ()`` returns a string representing the object's value in\n  the format: Mar. 9, 1997 1:45 pm US/Eastern:\n\n    >>> dt.pCommonZ()\n    'Mar. 9, 1997 1:45 pm US/Eastern'\n\n* ``ISO()`` returns a string with the date/time in ISO format.  Note:\n  this is not ISO 8601-format! See the ISO8601 and HTML4 methods below\n  for ISO 8601-compliant output.  Dates are output as: YYYY-MM-DD HH:MM:SS\n\n    >>> dt.ISO()\n    '1997-03-09 13:45:00'\n\n* ``ISO8601()`` returns the object in ISO 8601-compatible format\n  containing the date, time with seconds-precision and the time zone\n  identifier - see http://www.w3.org/TR/NOTE-datetime.  Dates are\n  output as: YYYY-MM-DDTHH:MM:SSTZD (T is a literal character, TZD is\n  Time Zone Designator, format +HH:MM or -HH:MM).\n\n  The ``HTML4()`` method below offers the same formatting, but\n  converts to UTC before returning the value and sets the TZD\"Z\"\n\n    >>> dt.ISO8601()\n    '1997-03-09T13:45:00-05:00'\n\n\n* ``HTML4()`` returns the object in the format used in the HTML4.0\n  specification, one of the standard forms in ISO8601.  See\n  http://www.w3.org/TR/NOTE-datetime.  Dates are output as:\n  YYYY-MM-DDTHH:MM:SSZ (T, Z are literal characters, the time is in\n  UTC.):\n\n    >>> dt.HTML4()\n    '1997-03-09T18:45:00Z'\n\n* ``JulianDay()`` returns the Julian day according to\n  http://www.tondering.dk/claus/cal/node3.html#sec-calcjd\n\n    >>> dt.JulianDay()\n    2450517\n\n* ``week()`` returns the week number according to ISO\n  see http://www.tondering.dk/claus/cal/node6.html#SECTION00670000000000000000\n\n    >>> dt.week()\n    10\n\nDeprecated API\n~~~~~~~~~~~~~~\n\n* DayOfWeek(): see Day()\n\n* Day_(): see pDay()\n\n* Mon(): see aMonth()\n\n* Mon_(): see pMonth\n\nGeneral Services Provided by DateTime\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDateTimes can be repr()'ed; the result will be a string indicating how\nto make a DateTime object like this:\n\n  >>> repr(dt)\n  \"DateTime('1997/03/09 13:45:00 US/Eastern')\"\n\nWhen we convert them into a string, we get a nicer string that could\nactually be shown to a user:\n\n  >>> str(dt)\n  '1997/03/09 13:45:00 US/Eastern'\n\nThe hash value of a DateTime is based on the date and time and is\nequal for different representations of the DateTime:\n\n  >>> hash(dt)\n  3618678\n  >>> hash(dt.toZone('UTC'))\n  3618678\n\nDateTime objects can be compared to other DateTime objects OR floating\npoint numbers such as the ones which are returned by the python time\nmodule by using the equalTo method. Using this API, True is returned if the\nobject represents a date/time equal to the specified DateTime or time module\nstyle time:\n\n  >>> dt.equalTo(dt)\n  True\n  >>> dt.equalTo(dt.toZone('UTC'))\n  True\n  >>> dt.equalTo(dt.timeTime())\n  True\n  >>> dt.equalTo(DateTime())\n  False\n\nSame goes for inequalities:\n\n  >>> dt.notEqualTo(dt)\n  False\n  >>> dt.notEqualTo(dt.toZone('UTC'))\n  False\n  >>> dt.notEqualTo(dt.timeTime())\n  False\n  >>> dt.notEqualTo(DateTime())\n  True\n\nNormal equality operations only work with datetime objects and take the\ntimezone setting into account:\n\n  >>> dt == dt\n  True\n  >>> dt == dt.toZone('UTC')\n  False\n  >>> dt == DateTime()\n  False\n\n  >>> dt != dt\n  False\n  >>> dt != dt.toZone('UTC')\n  True\n  >>> dt != DateTime()\n  True\n\nBut the other comparison operations compare the referenced moment in time and\nnot the representation itself:\n\n  >>> dt > dt\n  False\n  >>> DateTime() > dt\n  True\n  >>> dt > DateTime().timeTime()\n  False\n  >>> DateTime().timeTime() > dt\n  True\n\n  >>> dt.greaterThan(dt)\n  False\n  >>> DateTime().greaterThan(dt)\n  True\n  >>> dt.greaterThan(DateTime().timeTime())\n  False\n\n  >>> dt >= dt\n  True\n  >>> DateTime() >= dt\n  True\n  >>> dt >= DateTime().timeTime()\n  False\n  >>> DateTime().timeTime() >= dt\n  True\n\n  >>> dt.greaterThanEqualTo(dt)\n  True\n  >>> DateTime().greaterThanEqualTo(dt)\n  True\n  >>> dt.greaterThanEqualTo(DateTime().timeTime())\n  False\n\n  >>> dt < dt\n  False\n  >>> DateTime() < dt\n  False\n  >>> dt < DateTime().timeTime()\n  True\n  >>> DateTime().timeTime() < dt\n  False\n\n  >>> dt.lessThan(dt)\n  False\n  >>> DateTime().lessThan(dt)\n  False\n  >>> dt.lessThan(DateTime().timeTime())\n  True\n\n  >>> dt <= dt\n  True\n  >>> DateTime() <= dt\n  False\n  >>> dt <= DateTime().timeTime()\n  True\n  >>> DateTime().timeTime() <= dt\n  False\n\n  >>> dt.lessThanEqualTo(dt)\n  True\n  >>> DateTime().lessThanEqualTo(dt)\n  False\n  >>> dt.lessThanEqualTo(DateTime().timeTime())\n  True\n\nNumeric Services Provided by DateTime\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA DateTime may be added to a number and a number may be added to a\nDateTime:\n\n  >>> dt + 5\n  DateTime('1997/03/14 13:45:00 US/Eastern')\n  >>> 5 + dt\n  DateTime('1997/03/14 13:45:00 US/Eastern')\n\nTwo DateTimes cannot be added:\n\n  >>> from DateTime.interfaces import DateTimeError\n  >>> try:\n  ...     dt + dt\n  ...     print('fail')\n  ... except DateTimeError:\n  ...     print('ok')\n  ok\n\nEither a DateTime or a number may be subtracted from a DateTime,\nhowever, a DateTime may not be subtracted from a number:\n\n  >>> DateTime('1997/03/10 13:45 US/Eastern') - dt\n  1.0\n  >>> dt - 1\n  DateTime('1997/03/08 13:45:00 US/Eastern')\n  >>> 1 - dt\n  Traceback (most recent call last):\n  ...\n  TypeError: unsupported operand type(s) for -: 'int' and 'DateTime'\n\nDateTimes can also be converted to integers (number of seconds since\nthe epoch) and floats:\n\n  >>> int(dt)\n  857933100\n  >>> float(dt)\n  857933100.0\n\n\nChangelog\n=========\n\n4.2 (2017-04-26)\n----------------\n\n- Add support for Python 3.6, drop support for Python 3.3.\n\n4.1.1 (2016-04-30)\n------------------\n\n- Support unpickling instances having a numeric timezone like `+0430`.\n\n4.1 (2016-04-03)\n----------------\n\n- Add support for Python 3.4 and 3.5.\n\n- Drop support for Python 2.6 and 3.2.\n\n4.0.1 (2013-10-15)\n------------------\n\n- Provide more backward compatible timezones.\n  [vangheem]\n\n4.0 (2013-02-23)\n----------------\n\n- Added support for Python 3.2 and 3.3 in addition to 2.6 and 2.7.\n\n- Removed unused legacy pytz tests and the DateTimeZone module and renamed\n  some test internals.\n\n3.0.3 (2013-01-22)\n------------------\n\n- Allow timezone argument to be a Unicode string while creating a DateTime\n  object using two arguments.\n\n3.0.2 (2012-10-21)\n------------------\n\n- LP #1045233: Respect date format setting for parsing dates like `11-01-2001`.\n\n3.0.1 (2012-09-23)\n------------------\n\n- Add `_dt_reconstructor` function introduced in DateTime 2.12.7 to provide\n  forward compatibility with pickles that might reference this function.\n\n3.0 (2011-12-09)\n----------------\n\n- No changes.\n\nBackwards compatibility of DateTime 3\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDateTime 3 changes its pickle representation. DateTime instances pickled with\nformer versions of DateTime can be read, but older DateTime versions cannot read\nDateTime instances pickled with version 3.\n\nDateTime 3 changes DateTime to be a new-style class with slots instead of being\nan old-style class.\n\nDateTime 3 tries to preserve microsecond resolution throughout most of its API's\nwhile former versions were often only accurate to millisecond resolution. Due to\nthe representation of float values in Python versions before Python 2.7 you\nshouldn't compare string or float representations of DateTime instances if you\nwant high accuracy. The same is true for calculated values returned by methods\nlike `timeTime()`. You get the highest accuracy of comparing DateTime values by\ncalling its `micros()` methods. DateTime is not particular well suited to be\nused in comparing timestamps of file systems - use the time and datetime objects\nfrom the Python standard library instead.\n\n3.0b3 (2011-10-19)\n------------------\n\n- Allow comparison of DateTime objects against None.\n\n3.0b2 (2011-10-19)\n------------------\n\n- Reverted the single argument `None` special case handling for unpickling and\n  continue to treat it as meaning `now`.\n\n3.0b1 (2011-05-07)\n------------------\n\n- Restored `strftimeFormatter` as a class.\n\n- Added tests for read-only class attributes and interface.\n\n3.0a2 (2011-05-07)\n------------------\n\n- Added back support for reading old DateTime pickles without a `_micros` value.\n\n- Avoid storing `_t` representing the time as a float in seconds since the\n  epoch, as we already have `_micros` doing the same as a long. Memory use is\n  down to about 300 bytes per DateTime instance.\n\n- Updated exception raising syntax to current style.\n\n- Avoid storing `_aday`, `_fday`, `_pday`, `_amon`, `_fmon`, `_pmon`, `_pmhour`\n  and `_pm` in memory for every instance but look them up dynamically based on\n  `_dayoffset`, `_month` and `_hour`. This saves another 150 bytes of memory\n  per DateTime instance.\n\n- Moved various internal parsing related class variables to module constants.\n\n- No longer provide the `DateError`, `DateTimeError`, `SyntaxError` and\n  `TimeError` exceptions as class attributes, import them from their canonical\n  `DateTime.interfaces` location instead.\n\n- Removed deprecated `_isDST` and `_localzone` class variables.\n\n- Moved pytz cache from `DateTime._tzinfo` to a module global `_TZINFO`.\n\n- Make DateTime a new-style class and limit its available attributes via a\n  slots definition. The pickle size increases to 110 bytes thanks to the\n  `ccopy_reg\\n_reconstructor` stanza. But the memory size drops from 3kb to\n  500 bytes for each instance.\n\n3.0a1 (2011-05-06)\n------------------\n\n- Reordered some calculations in `_calcIndependentSecondEtc` to preserve more\n  floating point precision.\n\n- Optimized the pickled data, by only storing a tuple of `_micros` and time\n  zone information - this reduces the pickle size from an average of 300 bytes\n  to just 60 bytes.\n\n- Optimized un-pickling, by avoiding the creation of an intermediate DateTime\n  value representing the current time.\n\n- Removed in-place migration of old DateTime pickles without a `_micros` value.\n\n- Removed deprecated support for using `DateTime.__cmp__`.\n\n- Take time zone settings into account when comparing two date times for\n  (non-) equality.\n\n- Fixed (possibly unused) _parse_iso8601 function.\n\n- Removed unused import of legacy DateTimeZone, strftime and re.\n  Remove trailing whitespace.\n\n- Removed reference to missing version section from buildout.\n\n2.12.7 (2012-08-11)\n-------------------\n\n- Added forward compatibility with DateTime 3 pickle format. DateTime\n  instances constructed under version 3 can be read and unpickled by this\n  version. The pickled data is converted to the current versions format\n  (old-style class / no slots). Once converted it will be stored again in the\n  old format. This should allow for a transparent upgrade/downgrade path\n  between DateTime 2 and 3.\n\n2.12.6 (2010-10-17)\n-------------------\n\n- Changed ``testDayOfWeek`` test to be independent of OS locale.\n\n2.12.5 (2010-07-29)\n-------------------\n\n- Launchpad #143269: Corrected the documentation for year value \n  behavior when constructing a DateTime object with three numeric \n  arguments.\n\n- Launchpad #142521: Removed confusing special case in \n  DateTime.__str__ where DateTime instances for midnight \n  (e.g. '2010-07-27 00:00:00 US/Eastern') values would \n  render only their date and nothing else.\n\n2.12.4 (2010-07-12)\n-------------------\n\n- Fixed mapping of EDT (was -> 'GMT-0400', now 'GMT-4').\n\n2.12.3 (2010-07-09)\n-------------------\n\n- Added EDT timezone support. Addresses bug #599856.\n  [vangheem]\n\n2.12.2 (2010-05-05)\n-------------------\n\n- Launchpad #572715:  Relaxed pin on pytz, after applying a patch from \n  Marius Gedminus which fixes the apparent API breakage.\n\n2.12.1 (2010-04-30)\n-------------------\n\n- Removed an undeclared testing dependency on zope.testing.doctest in favor of\n  the standard libraries doctest module.\n\n- Added a maximum version requirement on pytz <= 2010b. Later versions produce\n  test failures related to timezone changes.\n\n2.12.0 (2009-03-04)\n-------------------\n\n- Launchpad #290254: Forward-ported fix for '_micros'-less pickles from\n  the Zope 2.11 branch version.\n\n2.11.2 (2009-02-02)\n-------------------\n\n- Include *all* pytz zone names, not just \"common\" ones.\n\n- Fix one fragile doctest, band-aid another.\n\n- Fix for launchpad #267545: DateTime(DateTime()) should preserve the\n  correct hour.\n\n2.11.1 (2008-08-05)\n-------------------\n\n- DateTime conversion of datetime objects with non-pytz tzinfo. Timezones()\n  returns a copy of the timezone list (allows tests to run).\n\n- Merged the slinkp-datetime-200007 branch: fix the DateTime(anotherDateTime)\n  constructor to preserve timezones.\n\n2.11.0b1 (2008-01-06)\n---------------------\n\n- Split off from the Zope2 main source code tree.\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://pypi.python.org/pypi/DateTime",
    "keywords": "",
    "license": "ZPL 2.1",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DateTime",
    "platform": "",
    "project_url": "https://pypi.org/project/DateTime/",
    "release_url": "https://pypi.org/project/DateTime/4.2/",
    "requires_python": "",
    "summary": "This package provides a DateTime data type, as known from Zope 2. Unless you need to communicate with Zope 2 APIs, you're probably better off using Python's built-in datetime module.",
    "version": "4.2"
  },
  "releases": {
    "2.11.0b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "aab709ac7db6ef846608e41e5dd012f1",
          "sha256": "2dd683984ab566bf172a8ea6def0db166160930149b78916473e02622ee03a39"
        },
        "downloads": 4510,
        "filename": "DateTime-2.11.0b1.tar.gz",
        "has_sig": false,
        "md5_digest": "aab709ac7db6ef846608e41e5dd012f1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 77549,
        "upload_time": "2008-01-06T19:15:12",
        "url": "https://files.pythonhosted.org/packages/67/24/83b4de80fcb0a42b626c811d699a87628edd8d8cb3be7d211192ba701bf8/DateTime-2.11.0b1.tar.gz"
      }
    ],
    "2.11.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d2f87699318201ba58644d90ce27bc1b",
          "sha256": "1b6930969e66558d0d33fc3ab96b88123c3959bd9c571f5caa56cf52a231bd55"
        },
        "downloads": 4820,
        "filename": "DateTime-2.11.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d2f87699318201ba58644d90ce27bc1b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 76129,
        "upload_time": "2008-08-05T14:14:51",
        "url": "https://files.pythonhosted.org/packages/e9/72/b856b1f6bf39005785ace123530a3f98e1a585fad01661705c82c5b5d469/DateTime-2.11.1.tar.gz"
      }
    ],
    "2.11.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5900fe5f9918dc8d062af8de296cc0b1",
          "sha256": "aa4012027c62cce9be44310c0b0ed89276765ccb3f9ea309ef6e2e63b4a00feb"
        },
        "downloads": 4643,
        "filename": "DateTime-2.11.2.zip",
        "has_sig": true,
        "md5_digest": "5900fe5f9918dc8d062af8de296cc0b1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 84118,
        "upload_time": "2009-02-02T20:43:14",
        "url": "https://files.pythonhosted.org/packages/ef/b1/3d58086a6b492a8262318a080aa2279307ae1802b8c81ba0507f120a1ebf/DateTime-2.11.2.zip"
      }
    ],
    "2.12.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b74e592e65c2b80b59f3c12448427952",
          "sha256": "575043033ce88da7477c130f28ecfc19b63779cf2211b6f72bb716250ad76c69"
        },
        "downloads": 17301,
        "filename": "DateTime-2.12.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b74e592e65c2b80b59f3c12448427952",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 78373,
        "upload_time": "2009-03-04T18:06:40",
        "url": "https://files.pythonhosted.org/packages/10/88/3ae9402fdec4ce281469912a0987937e4a154b31c0dd85adbf8d31df746e/DateTime-2.12.0.tar.gz"
      }
    ],
    "2.12.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "398562bef42b2feea84b589afd383e45",
          "sha256": "1bfc8ec253fca34400c14bbbc7f4265ca01342fe66f04cd5468deb4604dcaecb"
        },
        "downloads": 4145,
        "filename": "DateTime-2.12.1.zip",
        "has_sig": false,
        "md5_digest": "398562bef42b2feea84b589afd383e45",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 86851,
        "upload_time": "2010-04-30T15:39:48",
        "url": "https://files.pythonhosted.org/packages/da/6f/450f59c4e2268dd3ac22060cae8ce2fdf201a17afb90fc52d611ca611711/DateTime-2.12.1.zip"
      }
    ],
    "2.12.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "323c2c8eebab7f0349f55b53c1514f4e",
          "sha256": "c95c7bf53288c2c707597a8eac31892bb41dbd3704e8576df4b1fe9c28100e3b"
        },
        "downloads": 7262,
        "filename": "DateTime-2.12.2.tar.gz",
        "has_sig": false,
        "md5_digest": "323c2c8eebab7f0349f55b53c1514f4e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 80060,
        "upload_time": "2010-05-05T21:58:44",
        "url": "https://files.pythonhosted.org/packages/d1/e9/4c52d6447ddd05cd63776ac52084a89df7c5b19a07004da3d96075a799a6/DateTime-2.12.2.tar.gz"
      }
    ],
    "2.12.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "982d0fa45171888949cf6e660316ff89",
          "sha256": "64fc253a685342b396a055658991c18d6938b44e4dcf50c842c63593485447bf"
        },
        "downloads": 4057,
        "filename": "DateTime-2.12.3.zip",
        "has_sig": false,
        "md5_digest": "982d0fa45171888949cf6e660316ff89",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 87380,
        "upload_time": "2010-07-09T22:26:25",
        "url": "https://files.pythonhosted.org/packages/1c/f7/41d396a3446e7ed77f1d8ba3ad942325e1fe45f2fcb68d141650c1bf6f2d/DateTime-2.12.3.zip"
      }
    ],
    "2.12.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7fb614cf8cf79962c21099f87f298935",
          "sha256": "b2a7460ec85548f40ab8462236f624c086b3b5142af40aa3360e97bc84c3bb05"
        },
        "downloads": 16863,
        "filename": "DateTime-2.12.4.zip",
        "has_sig": false,
        "md5_digest": "7fb614cf8cf79962c21099f87f298935",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 87511,
        "upload_time": "2010-07-12T20:44:54",
        "url": "https://files.pythonhosted.org/packages/2e/1b/f7b3d764f9711648afd5d915db05b58a000e80632f2ee6654560bc503cd9/DateTime-2.12.4.zip"
      }
    ],
    "2.12.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9141f07686e882c2cd912ab6e1abde16",
          "sha256": "f7ab0fcb8ad64dc189ef3cfb7ccde3ca9a9bdee7c18c271edd42b58abea0d162"
        },
        "downloads": 47116,
        "filename": "DateTime-2.12.5.tar.gz",
        "has_sig": false,
        "md5_digest": "9141f07686e882c2cd912ab6e1abde16",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 82273,
        "upload_time": "2010-07-29T13:25:28",
        "url": "https://files.pythonhosted.org/packages/6d/52/7fe54921f923683f971724f79751e4a1638222bd6a3a88595def3522a4ef/DateTime-2.12.5.tar.gz"
      }
    ],
    "2.12.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b2ade6cd7e85dd0c38c770f015c42500",
          "sha256": "35ad061643d859ecfa83a66af7b0a0eb739911e597b23442f079a03937c84916"
        },
        "downloads": 55502,
        "filename": "DateTime-2.12.6.zip",
        "has_sig": false,
        "md5_digest": "b2ade6cd7e85dd0c38c770f015c42500",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 88224,
        "upload_time": "2010-10-17T14:20:57",
        "url": "https://files.pythonhosted.org/packages/5d/11/e1575490ae91dbd600b684159952aaf06fbcd3126c6c9807e04f4e4f7b41/DateTime-2.12.6.zip"
      }
    ],
    "2.12.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "72a8bcf80b52211ae7fdfe36c693d70c",
          "sha256": "e57d9e0c402f1b06560357777895e0e259bd4ca6924730f70433887811eaacc3"
        },
        "downloads": 28117,
        "filename": "DateTime-2.12.7.zip",
        "has_sig": false,
        "md5_digest": "72a8bcf80b52211ae7fdfe36c693d70c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 82270,
        "upload_time": "2012-08-11T00:14:50",
        "url": "https://files.pythonhosted.org/packages/51/1f/4c99560c7ae9d082d85e5508aae1be394743692a402431a140779e702c83/DateTime-2.12.7.zip"
      }
    ],
    "2.12.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "77b6038ce4d01f1f0ec36acc56e08923",
          "sha256": "f0f49bb2921a0f6e0520e14613b4bf4321fa1874558f384b388ce029a7536807"
        },
        "downloads": 4319,
        "filename": "DateTime-2.12.8.tar.gz",
        "has_sig": true,
        "md5_digest": "77b6038ce4d01f1f0ec36acc56e08923",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 74855,
        "upload_time": "2015-06-15T23:24:59",
        "url": "https://files.pythonhosted.org/packages/85/22/6bf978c42594523c06fa48a9ee410342eeee071066d0d7a68cacaa3c408d/DateTime-2.12.8.tar.gz"
      }
    ],
    "3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d5d71043e3986ae95c17804a4fa60ba1",
          "sha256": "2576bc9e93b746560c09237c57c72bbd7605255662b3e015977b41a26a4a2afe"
        },
        "downloads": 10958,
        "filename": "DateTime-3.0.zip",
        "has_sig": false,
        "md5_digest": "d5d71043e3986ae95c17804a4fa60ba1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 84321,
        "upload_time": "2011-12-09T14:04:38",
        "url": "https://files.pythonhosted.org/packages/92/40/dabe0cc1141160ed6fa241669f9fdecbff670a7e6cf233feb380c8ddf4d9/DateTime-3.0.zip"
      }
    ],
    "3.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "139e070e8ef01900facc4dd81b3b8338",
          "sha256": "6cc3493d26673909db4ae0e5a27265fea09f26ea3ac2daaadff31b330e1de35b"
        },
        "downloads": 4423,
        "filename": "DateTime-3.0.1.zip",
        "has_sig": false,
        "md5_digest": "139e070e8ef01900facc4dd81b3b8338",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 84963,
        "upload_time": "2012-09-23T16:12:22",
        "url": "https://files.pythonhosted.org/packages/59/69/1dbe986f08905f95f64087e06dc44bbfb5e77e59bf8e474536d123e18939/DateTime-3.0.1.zip"
      }
    ],
    "3.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d2dce6ce3b8d93bc65713e40b5d89ae0",
          "sha256": "0205beba610b8ec1190ffe66d808b6d9d05dfde67071841395cb033ba43ffb45"
        },
        "downloads": 8021,
        "filename": "DateTime-3.0.2.zip",
        "has_sig": false,
        "md5_digest": "d2dce6ce3b8d93bc65713e40b5d89ae0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 85217,
        "upload_time": "2012-10-21T19:41:40",
        "url": "https://files.pythonhosted.org/packages/f5/3d/e0744380fc5325b6cbc896c007989339a09cda83180cd240a7cc0001ac78/DateTime-3.0.2.zip"
      }
    ],
    "3.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5ebf0a8e3775b744c5de2e6685b37ae9",
          "sha256": "076155f509ac122effb2be32576540ba4a5cca56de557c4bc206980e4017a8c3"
        },
        "downloads": 41877,
        "filename": "DateTime-3.0.3.zip",
        "has_sig": false,
        "md5_digest": "5ebf0a8e3775b744c5de2e6685b37ae9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 85359,
        "upload_time": "2013-01-22T10:33:27",
        "url": "https://files.pythonhosted.org/packages/58/aa/9d2388d5225de799230ff0a6c80142f18237e614caa38c9ebfbdacb284f3/DateTime-3.0.3.zip"
      }
    ],
    "3.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e0c1b20faaea4f80004a79037f73450a",
          "sha256": "9a7f214afc29271f41ad613fa6b0dfc9e662d685b755071a7822025af60cf0ba"
        },
        "downloads": 3836,
        "filename": "DateTime-3.0a1.zip",
        "has_sig": false,
        "md5_digest": "e0c1b20faaea4f80004a79037f73450a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 88662,
        "upload_time": "2011-05-06T20:24:08",
        "url": "https://files.pythonhosted.org/packages/81/1a/6419b81af34b3433cce70c5d9a09ed99c4a5cda3778219769e45235d46e5/DateTime-3.0a1.zip"
      }
    ],
    "3.0a2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "aeb0bcd6ed4528f58ce8ec4d498bf17a",
          "sha256": "db55efd7f4c39a529a755a3df3d6447ee9a0b070ccf26d46aada9e1b4d4caa7c"
        },
        "downloads": 3833,
        "filename": "DateTime-3.0a2.zip",
        "has_sig": false,
        "md5_digest": "aeb0bcd6ed4528f58ce8ec4d498bf17a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 82750,
        "upload_time": "2011-05-08T16:33:54",
        "url": "https://files.pythonhosted.org/packages/2a/74/93d590dbbc82958ddf2eb0d62f35ddd1a176333d65efe54f34f1660a8e3f/DateTime-3.0a2.zip"
      }
    ],
    "3.0b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "586e7711254b9aab79cc394e76424874",
          "sha256": "5893afa3e7269bbb09c8e525e81b2cc5c800c0dfb06222334d702bfaed6c7b62"
        },
        "downloads": 6036,
        "filename": "DateTime-3.0b1.zip",
        "has_sig": false,
        "md5_digest": "586e7711254b9aab79cc394e76424874",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 82963,
        "upload_time": "2011-05-08T18:49:20",
        "url": "https://files.pythonhosted.org/packages/d6/7f/defa77ea7f28f425b8291d31528be62d9391de2023dadc0084f75596e53c/DateTime-3.0b1.zip"
      }
    ],
    "3.0b2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "92569928febbe08d7708e608a05452d5",
          "sha256": "6da2d7b69f1639b85bae55b9ad45f8eaaccc683e0ea11d5c432bb774e79ea30f"
        },
        "downloads": 3753,
        "filename": "DateTime-3.0b2.zip",
        "has_sig": false,
        "md5_digest": "92569928febbe08d7708e608a05452d5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 84242,
        "upload_time": "2011-10-19T11:42:41",
        "url": "https://files.pythonhosted.org/packages/eb/65/c572c4b9f894fc583d098498bc453c91034e59291348f4b8da7e37b21aff/DateTime-3.0b2.zip"
      }
    ],
    "3.0b3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e3d5bc6346b3643fc51d9b6a7455424b",
          "sha256": "e216b6d8d190726208f3e92fa9065b4a389f1a8534e0a205bc2dec2d67179b4f"
        },
        "downloads": 5233,
        "filename": "DateTime-3.0b3.zip",
        "has_sig": false,
        "md5_digest": "e3d5bc6346b3643fc51d9b6a7455424b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 84387,
        "upload_time": "2011-10-19T15:21:39",
        "url": "https://files.pythonhosted.org/packages/de/5f/e75d9b776207719f2debf9ba3866d3b7f6fc13c1a48eb18544c96ca6f2cd/DateTime-3.0b3.zip"
      }
    ],
    "4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "40b19ca3f0e5d8c97ddad2aeb1cd5d61",
          "sha256": "cb66b32c6d2fad9f2222addaf2919ee35379f7fc001807894412e3fc72b4818d"
        },
        "downloads": 15740,
        "filename": "DateTime-4.0.zip",
        "has_sig": true,
        "md5_digest": "40b19ca3f0e5d8c97ddad2aeb1cd5d61",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 67671,
        "upload_time": "2013-02-23T15:31:18",
        "url": "https://files.pythonhosted.org/packages/91/27/f1e0cc25bcdb0fd28353a10fde7612bc92c8e776604dbecd7d6dfa799e61/DateTime-4.0.zip"
      }
    ],
    "4.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2241f4a18a7cf16f1d6e8e324fca0ef0",
          "sha256": "a4073f0549862278aad3986982e835092009fca681f9d4a719112eb24964695b"
        },
        "downloads": 176119,
        "filename": "DateTime-4.0.1.zip",
        "has_sig": true,
        "md5_digest": "2241f4a18a7cf16f1d6e8e324fca0ef0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 65369,
        "upload_time": "2013-10-15T09:36:48",
        "url": "https://files.pythonhosted.org/packages/66/3c/cf4272421dc2c2094563093dcc57930b589f54c84f2fa5eaf27442cc4c35/DateTime-4.0.1.zip"
      }
    ],
    "4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a512f282823ff1a8481d296ff87059bc",
          "sha256": "2f387e08b99bb872825485e7a3172b40dfb3a77965cd03137c0d4ea3a4dd8b39"
        },
        "downloads": 451,
        "filename": "DateTime-4.1.zip",
        "has_sig": false,
        "md5_digest": "a512f282823ff1a8481d296ff87059bc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 65816,
        "upload_time": "2016-04-03T13:57:53",
        "url": "https://files.pythonhosted.org/packages/cd/d0/2d8c8a2e2d45c0e4fe85b28ccb0ba9c67ad4e0235d7fa70f254afa186aa9/DateTime-4.1.zip"
      }
    ],
    "4.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0836a4604ad385a32ab7f1dbb340fc35",
          "sha256": "10936a83bb9051a70b0f0feb227fe147b4362c5467fe1faedf2c97d8850ad371"
        },
        "downloads": 36778,
        "filename": "DateTime-4.1.1.zip",
        "has_sig": false,
        "md5_digest": "0836a4604ad385a32ab7f1dbb340fc35",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66523,
        "upload_time": "2016-04-30T07:49:27",
        "url": "https://files.pythonhosted.org/packages/80/67/37467b2725462859366d35bfe30e1e217e6f49ca391ecbe54ae2f09da191/DateTime-4.1.1.zip"
      }
    ],
    "4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6bc33b13a5cba7c7f5cb7b9fbfdbc053",
          "sha256": "6a7d0650cf9cfc10b0e152fa6c667176cff7cd68b93040c10aca868d4a4617c0"
        },
        "downloads": 0,
        "filename": "DateTime-4.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6bc33b13a5cba7c7f5cb7b9fbfdbc053",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 60534,
        "upload_time": "2017-05-28T20:14:49",
        "url": "https://files.pythonhosted.org/packages/0d/db/511934e34360fe0cfe91fc58483b25d8a9c516264ff2877dadb11a0612cd/DateTime-4.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "edbe70fb2b057e338a3c88a77c503418",
          "sha256": "b3d91011caff312274a629b35abd6eb67038f8f92423ad3d9e071c0bf8823226"
        },
        "downloads": 0,
        "filename": "DateTime-4.2.tar.gz",
        "has_sig": true,
        "md5_digest": "edbe70fb2b057e338a3c88a77c503418",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 58830,
        "upload_time": "2017-04-26T15:03:14",
        "url": "https://files.pythonhosted.org/packages/c2/fd/6f12e58cf25b71a0941e882f030650e040c1990355371a3d51ed3c379449/DateTime-4.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6bc33b13a5cba7c7f5cb7b9fbfdbc053",
        "sha256": "6a7d0650cf9cfc10b0e152fa6c667176cff7cd68b93040c10aca868d4a4617c0"
      },
      "downloads": 0,
      "filename": "DateTime-4.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6bc33b13a5cba7c7f5cb7b9fbfdbc053",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 60534,
      "upload_time": "2017-05-28T20:14:49",
      "url": "https://files.pythonhosted.org/packages/0d/db/511934e34360fe0cfe91fc58483b25d8a9c516264ff2877dadb11a0612cd/DateTime-4.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "edbe70fb2b057e338a3c88a77c503418",
        "sha256": "b3d91011caff312274a629b35abd6eb67038f8f92423ad3d9e071c0bf8823226"
      },
      "downloads": 0,
      "filename": "DateTime-4.2.tar.gz",
      "has_sig": true,
      "md5_digest": "edbe70fb2b057e338a3c88a77c503418",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 58830,
      "upload_time": "2017-04-26T15:03:14",
      "url": "https://files.pythonhosted.org/packages/c2/fd/6f12e58cf25b71a0941e882f030650e040c1990355371a3d51ed3c379449/DateTime-4.2.tar.gz"
    }
  ]
}