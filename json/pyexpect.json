{
  "info": {
    "author": "Martin H\u00e4cker",
    "author_email": "spamfaenger@gmx.de",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing"
    ],
    "description": "pyexpect: Minimal but very flexible implementation of the expect pattern\n========================================================================\n\nThe whole point of the expect pattern is to allow concise assertions\nthat generate predictable and good error messages.\n\nBest viewed in an example:\n\n::\n\n    >>> expect(3).to.equal(4)\n    Traceback (most recent call last):\n      File \"<input>\", line 1, in <module>\n      File \"expect.py\", line 146, in __call__\n    AssertionError: Expect 3 to equal 4\n\nLine noise is reduced as much as possible, so the error message is\ndisplayed as near to the problematic code as possible. No stack traces\nto dig through, clear and consistent error messages that tell you what\nwent wrong. Thats how assertions should work.\n\nWhy should I use expect() over self.assert\\*?\n---------------------------------------------\n\nThis is best explained in contrast to the classic assertion pattern like\nthe python unittest module uses. In addition to all that however, these\nassertions can be used independently of any unittest package. But lets\nstart with an example:\n\n::\n\n    self.assertEquals('foo', 'bar')\n\nIn this assertion it is not possible to see which of the arguments is\nthe expected and which is the actual value. While this ordering is\nmostly internally consistent between the different assertions within the\nunittest package (sadly only mostly), it is not consistent between all\nthe different unit testing packages out there for python and especially\nnot between different languages this pattern has been implemented on.\n\nTo add insult to injury some frameworks will then output the error\nmessage like this: (Yes unittest I'm looking at you!)\n\n::\n\n    'bar' does not equal 'foo'\n\nIt's easy to spend minutes till you remember or figure out that your\nframework fooled you and inverted the order of arguments just to make it\nharder for you to understand the code you are reading.\n\nIf you are as annoyed by this as I am, allow me to introduce you to the\nexpect pattern. An assertion like this:\n\n::\n\n    expect('foo').to.equal('bar')\n    # or this\n    expect('foo').equals('bar')\n    # or even this\n    expect('foo') == 'bar'\n\nMakes it absolutely plain what is the expected and what is the actual\nvalue. No confusion possible. Also the error messages are designed to\nmap cleanly back to the source code:\n\n::\n\n    Expect 'foo' to equal 'bar'.\n\nThus the mapping from the error message is immediate and complete saving\nyou minutes each time, enhancing your focus, productivity and - most\nimportant - your enjoyment when working with unit tests.\n\nAs a bonus all these exceptions are not coupled to any TestCase class so\nyou can easily reuse them anywhere in your code to formalize\nexpectations that your code has about some internal state. Sometimes\ncalled 'Design by Contract' or 'Fail Fast' programming. Oh and these\nexpectations are generally shorter, so you even have less to type while\ngetting clearer and more to the point assertions into your tests. Almost\nlike having a cake and eating it too!\n\nInteresting! So what can it do?\n-------------------------------\n\nGlad you ask! Here you go:\n\n1. Lots of included matchers: Take a look at the source to see all the\n   assertions you need to get started. From ``equals`` over ``be`` or\n   ``is_`` and ``raises`` till ``matches`` - we've got you covered. And\n   not only that, but each matcher has some aliasses so you can use the\n   variant that reads the best in your assertion, or that you are more\n   used to when using multiple unit testing frameworks across language\n   boundaries (python/js anyone?).\n\n   Some examples:\n\n   ::\n\n       expect(True).is_.true()\n       expect(True).is_true()\n       expect(True).equals(True)\n       expect(True).is_.equal(True)\n       expect(True) == True\n       expect(raising_calable).raises()\n       expect(raising_calable).to_raise()\n\n   Should an important alias be missing, pull requests are welcome.\n\n2. Ease of use: ``expect()`` can be arbitrary chained with whatever you\n   can think of (provided it's a valid python identifier) to give you\n   the cleanest description of your assertion possible:\n\n   ::\n\n       expect(23).to.equal(23)\n       expect(23).is_.equal(23)\n       # or go all out - but just because it works doesn't mean it's sensible\n       expect(23).to_be_chaned.with_something.that_makes_sense_in\\\n           .your_context.before_it.calls_the.matcher.as_the_last.segment(23)\n       # Here .segment(23) would be the matcher that is called\n\n   Choose whatever makes sense for your specific test to read well so\n   that reading the test later feels natural and transports the meaning\n   of the code as best as possible.\n\n3. Simplicity of extension: In all other python expect implementations\n   I've looked at, at least some aspects of them are way more\n   complicated. Each matcher is a class or something that needs to be\n   registered via a more or less complicated process, arguments are not\n   just straightforward method arguments, ``not`` is not supported as a\n   native framework concept...\n\n   In contrast in pyexpect if you want to register a new matcher, it's\n   as easy as defining a method and then assigning it to as many\n   instance method names as you want, asserting what you want to assert\n   within and clearly define the error message that is going to be\n   raised:\n\n   ::\n\n       def falseish(self):\n           # See expect() source for availeable helpers\n           self._assert(self._actual == False, \"to be falseish\")\n       expect.is_falsish = expect.is_falseish = expect.falsish = expect.falseish = falseish\n\n   or class expect(original\\_expect): def falseish(self): # See expect()\n   source for availeable helpers self.\\_assert(self.\\_actual == False,\n   \"to be falseish\")\n\n   Done!\n\n   Also note how the matcher clearly communicates what is important:\n   what it asserts, and what error message it generates. No fluff\n   included\u2122!\n\n   Compared this to how you would add matchers to more established\n   packages like `sure <https://pypi.python.org/pypi/sure>`__ and\n   `ensure <https://pypi.python.org/pypi/ensure>`__ - I think pyexpect\n   is simpler - you can either just assign a property on ``expect`` or\n   create a local subclass with more methods.\n\n4. Native ``not`` support: If you define a matcher, you don't have to\n   define the inverse of it too or do anything special to get it. That\n   means that for every matchers like ``equals``, you automatically get\n   the inverse of that, i.e. ``not_equals``. This inverse can be invoked\n   in a number of ways:\n\n   You can just prefix the matcher with ``not_`` like this\n\n   ::\n\n       expect(foo).not_equals(bar)\n       expect(some_function).not_to_raise()\n\n   You can include ``not`` as part of the path before the matcher like\n   this:\n\n   ::\n\n       expect(foo).not_.to_equal(bar)\n       expect(foo).not_to.equal(bar)\n       expect(foo).to_not.equal(bar)\n       expect(foo).to_not_be.equal(bar)\n       # or go all out - but just because it works doesn't mean it's sensible\n       expect(foo).is.just_a_little.not_quite_the_same_as_it.equals(bar)\n\n   That is you can include the word ``not`` at the beginning, middle or\n   end of an identifier - just ensure to separate it from the identifier\n   by snakecase.\n\n   This works for all aliasses of each matcher, so no additional work\n   there.\n\n   For more examples, have a look at the testsuite for the matchers.\n\n   If you want to add your own matchers, sometimes the inverse doesn't\n   work automatically if you implement your expectations as multiple\n   consecutive checks. In that case the inverse matcher might assert the\n   wrong thing, because the order of the checks doesn't make sense in\n   the inverted case. Should that happen, take a look at\n   ``expect._assert_if_positive()``, ``expect._assert_if_negative()``\n   and ``expect._is_negative()``. Be advised however, that good matchers\n   should need this only very rarely.\n\n5. Great error messages: pyexpect takes great care to ensure every\n   aspect of experiencing an error is as concise and usefull as\n   possible. All error messages have the same format that always starts\n   with what is expected and then is customized by the matcher to pack\n   as much information as possible.\n\n   ::\n\n       expect(23).not_.to_equal(23)\n       Expect 23 not to equal 23\n\n   If you write your own assertion methods to enhance your unit testing,\n   it's quite easy to get long stack traces because the actuall\n   assertion happens some stack frames down in one of the called\n   matchers.\n\n   Consider assertions like this (a little fabricated, ok. But I'm sure\n   you've seen this happen in your projects):\n\n   ::\n\n       from unittest import TestCase, main\n       class Test(TestCase):\n           def assert_equals(self, actual, expected):\n               self.assertEquals(actual, expected)\n           def assert_something(self, something):\n               self.assert_equals(something, 'something')\n           def test_something(self):\n               self.assert_something('fnord')\n       main()\n\n   It will give you output like this:\n\n   ::\n\n       FAIL: test_something (__main__.Test)\n       ----------------------------------------------------------------------\n       Traceback (most recent call last):\n         method test_something in test.py at line 11\n           self.assert_something('fnord')\n         method assert_something in test.py at line 8\n           self.assert_equals(something, 'something')\n         method assert_equals in test.py at line 5\n           self.assertEquals(actual, expected)\n       AssertionError: 'fnord' != 'something'\n\n   Even in this simple case the actual error is 4 lines removed from the\n   actual error.\n\n   Using pyexpect however a test like this:\n\n   ::\n\n       from pyexpect import expect\n       def something(self):\n           self._assert(self._actual == 'something', \"to be 'something'\")\n       expect.something = something\n\n       from unittest import TestCase, main\n       class Test(TestCase):\n           def test_something(self):\n               expect('fnord').to_be.something()\n       main()\n\n   Gives you this output (standard ``unittest.main()``):\n\n   ::\n\n       FAIL: test_something (__main__.Test)\n       ----------------------------------------------------------------------\n       Traceback (most recent call last):\n         File \"test_example.py\", line 11, in test_something\n           expect('fnord').to_be.something()\n         File \"/Users/dwt/Code/Projekte/pyexpect/internals.py  # pyexpect_internals_hidden_in_backtraces\n           raise assertion\n       AssertionError: Expect 'fnord' to be something\n\n   In ``nosetests``:\n\n   ::\n\n       FAIL: test_example:Test.test_something\n         mate +11  test_example.py  # test_something\n           expect('fnord').to_be.something()\n         mate +150 internals.py  # pyexpect_internals_hidden_in_backtraces\n           raise assertion\n       AssertionError: Expect 'fnord' to be something\n\n   ``py.test`` this is even prettier:\n\n   ::\n\n       self = <test_example.Test testMethod=test_something>\n       def test_something(self):\n       >       expect('fnord').to_be.something()\n       E       AssertionError: Expect 'fnord' to be something\n\n   Notice here, that the actual matcher ``someting()`` calls another\n   method ``_assert`` to do the actual assertion and compose the error\n   message, but none of this is visible in the stack trace? That is true\n   for any methods you call in the matcher, so call into your api or\n   whatever you need to trigger the assertion and enjoy the readability\n   of the generated error messages.\n\n   Another common cause for really hard to read error messages are too\n   long messages. Ever had something like this?\n\n   ::\n\n       FAIL: test_example (__main__.DemoTest)\n       ----------------------------------------------------------------------\n       Traceback (most recent call last):\n         File \"untitled\", line 15, in test_example\n           self.assertEquals(long_actual, long_expected)\n       AssertionError: ['foo', 'bar', 'baz', 'quoox', 'quaax', 'quuuxfoo', 'bar', 'baz', 'quoox', 'quaax', 'quuux'] != ['foo', 'bar', 'baz', 'quoox', 'quaax', 'quuux', 'foo', 'bar', 'baz', 'quoox', 'quaax', 'quuux', 'foo', 'bar', 'baz', 'quoox', 'quaax', 'quuux']\n\n   Good luck finding where the output of the expected and actual object\n   even are separated, let alone what is different between them.\n\n   pyexpect formats long error messages on multiple lines, so you always\n   see where the complaint starts and have a much easier time mentally\n   diffing the two objects:\n\n   ::\n\n       FAIL: test_example (__main__.DemoTest)\n       ----------------------------------------------------------------------\n       Traceback (most recent call last):\n         File \"test.py\", line 16, in test_example\n           expect(long_actual) == long_expected\n         File \"pyexpect/internals.py\", line 17, in pyexpect_internals_hidden_in_backtraces\n           raise exception\n       AssertionError: Expect ['foo', 'bar', 'baz', 'quoox', 'quaax', 'quuuxfoo', 'bar', 'baz', 'quoox', 'quaax', 'quuux']\n\n       to equal ['foo', 'bar', 'baz', 'quoox', 'quaax', 'quuux', 'foo', 'bar', 'baz', 'quoox', 'quaax', 'quuux', 'foo', 'bar', 'baz', 'quoox', 'quaax', 'quuux']\n\n   tl;dr: error messages are much easier to read and there is less fluff\n   in between the error and the cause to distract you. As it should be.\n\n6. Usage outside of unit tests: You can use this package as a standalone\n   assertion package that gives you much more expressive assertions than\n   just using using ``assert`` and refined error messages to boot.\n\n   Just assert away wherever you need it to get robust code by failing\n   fast:\n\n   ::\n\n       from pyexpect import expect\n       def some_method(some_argument):\n           expect(some_argument).is_.between(3,20)\n           something(some_argument)\n\n   And should you need it, you can switch the assertions from throwing\n   to returning a ``(bool, string)`` tuple so you can reuse it in your\n   api.\n\n   ::\n\n       from pyexpect import expect\n       def some_api(something):\n           was_success, explanation = expect.returning(something) == 23\n           if not was_success: register_error(explanation)\n\n   And should you need it, you can override the error messages generated\n   without needing to change the matchers. See ``expect.with_message()``\n   for details.\n\n7. Test coverage: Of course pyexpect has full test coverage ensuring\n   that it does exactly what you expect it to do.\n\n8. Think something could be better in this documentation? Send a pull\n   request. :)\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/dwt/pyexpect",
    "keywords": "",
    "license": "ISC",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyexpect",
    "platform": "",
    "project_url": "https://pypi.org/project/pyexpect/",
    "release_url": "https://pypi.org/project/pyexpect/1.0.17/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python expectaton library",
    "version": "1.0.17"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "98120f90062e4db1933f8e77450c23dc",
          "sha256": "47e914a1d7d1fae6e99faac2ce0dc5ea0eca5467bc5bb7776ed50a93710fe0b0"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "98120f90062e4db1933f8e77450c23dc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13000,
        "upload_time": "2013-12-25T14:44:05",
        "url": "https://files.pythonhosted.org/packages/e0/76/31e6d2a5c31b6d671bec511dca65abea4d085c494f0f104f7ce58ce96600/pyexpect-1.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "64352f6d882cb47f22748444ec1a40ab",
          "sha256": "4bad80f348ba6942b949bea5cca093203ba358e6323ac16d99575f11e36cdd21"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "64352f6d882cb47f22748444ec1a40ab",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13130,
        "upload_time": "2013-12-27T17:16:31",
        "url": "https://files.pythonhosted.org/packages/24/12/8e9cf01921309958490443bb81ab731bfbac5a56ea5459bcbdaed8930e95/pyexpect-1.0.1.tar.gz"
      }
    ],
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c05c0fd04dbeaa0a494e2ac2768f7396",
          "sha256": "7ae271fb98af4cd8d1ed2b8ad94799997e615f5142a630aa0bbd055cb3e8d68a"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "c05c0fd04dbeaa0a494e2ac2768f7396",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22083,
        "upload_time": "2015-02-11T11:51:28",
        "url": "https://files.pythonhosted.org/packages/8b/78/6e2a1b075c17d34335d475880dd30ef72358176e982ede3e1e6fcb9b9898/pyexpect-1.0.10.tar.gz"
      }
    ],
    "1.0.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c59c00793b32255483ccf5cce4d474d3",
          "sha256": "47e2b1e3661154ddb891c9e12a188491b4fa1db45c31483b8bf41e75c03105f1"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "c59c00793b32255483ccf5cce4d474d3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24403,
        "upload_time": "2015-03-21T13:37:42",
        "url": "https://files.pythonhosted.org/packages/c8/c1/92c0ac092e8b2a47d996f9e1de1e5b660bfe9d881043f91c2f1a95de959f/pyexpect-1.0.11.tar.gz"
      }
    ],
    "1.0.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f5083bc249363c0bee9e909590c9574c",
          "sha256": "ef043024af0bffc38418d80db77be98554a06a3d71af6b4c12b0ae4a6d26833f"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "f5083bc249363c0bee9e909590c9574c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24696,
        "upload_time": "2015-03-21T15:20:09",
        "url": "https://files.pythonhosted.org/packages/0a/64/b30ee0e963f1449a444559f15b5c2ce433d8dc4cf5f756ec51b03cb4f011/pyexpect-1.0.12.tar.gz"
      }
    ],
    "1.0.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "15860508eeca43ebc580e2386ad13cd5",
          "sha256": "fefb16ae6e2b634354078f76569eea52cd55752ad181b43622294c82669da124"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "15860508eeca43ebc580e2386ad13cd5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24985,
        "upload_time": "2015-03-23T12:24:40",
        "url": "https://files.pythonhosted.org/packages/13/1e/e30724c3c22d2afad858769e41aa56bc2b653763c365d6d15fc3812eb5f0/pyexpect-1.0.13.tar.gz"
      }
    ],
    "1.0.14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7b9a2fb194df3689089da4d259332010",
          "sha256": "5c32182a477bc613ff762e32a4f2d8bb6800861881ed5f8c4500f5455ff050c9"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "7b9a2fb194df3689089da4d259332010",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25995,
        "upload_time": "2015-05-25T21:38:15",
        "url": "https://files.pythonhosted.org/packages/97/70/23941d254e49c8224e58887f07591446019e5dfab3e97b320bad12baf268/pyexpect-1.0.14.tar.gz"
      }
    ],
    "1.0.15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2ec701965532e1ba40b3c8c2b7787c77",
          "sha256": "551b801d02a1229af1b8fbf701f1df6837abb2a29e92f4088d8532a7969f5eb8"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "2ec701965532e1ba40b3c8c2b7787c77",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28723,
        "upload_time": "2016-02-26T13:53:03",
        "url": "https://files.pythonhosted.org/packages/d1/53/c077776668d72f9018a277d3512cbaa7515fe482ff3129dfec2162adb791/pyexpect-1.0.15.tar.gz"
      }
    ],
    "1.0.16": [
      {
        "comment_text": "",
        "digests": {
          "md5": "24b643e9127182785605c255b49279b9",
          "sha256": "4533f1524a0b15571245e8af2f43683398d3a086980c4c15edba4e409fba3e95"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.16.tar.gz",
        "has_sig": false,
        "md5_digest": "24b643e9127182785605c255b49279b9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28923,
        "upload_time": "2016-03-01T10:16:42",
        "url": "https://files.pythonhosted.org/packages/7c/eb/ff613c76ed434b22a4bc7638cdb907e72777ea10790ec0e9d29512311fa5/pyexpect-1.0.16.tar.gz"
      }
    ],
    "1.0.17": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c71307d6c7096fdbde0813018dfa0092",
          "sha256": "d656ef7e07a8aa539ce0a4883a683341037b6fc1c329bf55b63bffbf2cce9582"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "c71307d6c7096fdbde0813018dfa0092",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29254,
        "upload_time": "2017-10-30T20:31:42",
        "url": "https://files.pythonhosted.org/packages/07/49/a695e8fbca0e0c7abc09b32e2ab9fdd5ce71e0c4e643a678d4965b057e9f/pyexpect-1.0.17.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "42617e95bb98249470eb8f1a8e7e78ea",
          "sha256": "bdb7409629c9a99df8bd627f00fba52050ec354f196ed7d60807fd54193a4295"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "42617e95bb98249470eb8f1a8e7e78ea",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16201,
        "upload_time": "2014-01-06T20:49:20",
        "url": "https://files.pythonhosted.org/packages/e4/61/4d524fc223660ce2783b56a00602231e0a98d1fff30d5a2f0101ba9d02e0/pyexpect-1.0.2.tar.gz"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "da1e0087f2626e9f7c601ce9d6e8f9f5",
          "sha256": "2e352f5f976762069d73f9bce907746827d05b578a254c6b101a0050313886d3"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "da1e0087f2626e9f7c601ce9d6e8f9f5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17052,
        "upload_time": "2014-01-08T11:32:30",
        "url": "https://files.pythonhosted.org/packages/7c/e8/7049bae1a702a80da42ecb933878faafa74697715dafe480c59805b9653c/pyexpect-1.0.3.tar.gz"
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "91576fccce1a69e30b49493e3b93def3",
          "sha256": "1d79381446dad912c7cec5d38cd4ce4d3be18ab1179d91104e55ce80e5e99429"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "91576fccce1a69e30b49493e3b93def3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17251,
        "upload_time": "2014-01-08T12:31:15",
        "url": "https://files.pythonhosted.org/packages/8b/28/3ca9732719b1f87629262aabcba07c6f9ce78caa6d16fe4961056b1456d7/pyexpect-1.0.4.tar.gz"
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d79d0db9c9977a846f1b659d91f78759",
          "sha256": "ccf925fe3d8a3bbdfbacd0c772c4c96dbe4be349996c50531e90c1fe35f74e5f"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d79d0db9c9977a846f1b659d91f78759",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17167,
        "upload_time": "2014-01-08T12:44:10",
        "url": "https://files.pythonhosted.org/packages/cc/28/0736eeefa2b82496e1ffeffcc858282024f21653dd5a6c2c12c3379b5054/pyexpect-1.0.5.tar.gz"
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ff217db3c5bab6155a49194b9c20f1b4",
          "sha256": "220d10cbfb05314e7dc88be8a0f63778628a4e81a7bc6a74d8820c6bb956b6b9"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "ff217db3c5bab6155a49194b9c20f1b4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17184,
        "upload_time": "2014-04-15T08:58:41",
        "url": "https://files.pythonhosted.org/packages/fe/02/a846e94c158c4f0a4671b1a19b7997445f3da92a2b0682007165b287c200/pyexpect-1.0.6.tar.gz"
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b3639e094dbc964c7fbb558ae06488e0",
          "sha256": "07e673056cee7ddbbeaf3521247ca9eff92553a88f292349d0ec141fd5f0f73c"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "b3639e094dbc964c7fbb558ae06488e0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19452,
        "upload_time": "2014-05-07T14:22:56",
        "url": "https://files.pythonhosted.org/packages/69/d8/ea0e550b43a964cf8b32da654d2fb3d4fb47cefb0ecf64478571c5ab59d6/pyexpect-1.0.7.tar.gz"
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2c707a25e1af9b7cbc97a37ce365fd0e",
          "sha256": "c45f8b01c915a4cc00064e3eba2993ad639436620744cfbbf8c00372447067ba"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "2c707a25e1af9b7cbc97a37ce365fd0e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16202,
        "upload_time": "2014-08-24T16:59:51",
        "url": "https://files.pythonhosted.org/packages/b6/a7/35f222c393c49811da60bd6a21a2580b40f40860bca83d7187b6a953b901/pyexpect-1.0.8.tar.gz"
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9cfa8f6b1c7a6a0ee41f59a08bf52f69",
          "sha256": "28c4093a30f536e9aad730075c9fd840e473381fe6ab851ccb9b6c72d881b190"
        },
        "downloads": -1,
        "filename": "pyexpect-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "9cfa8f6b1c7a6a0ee41f59a08bf52f69",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21546,
        "upload_time": "2014-12-06T20:41:41",
        "url": "https://files.pythonhosted.org/packages/99/88/455400d178a334a708dea4ae10fd7c308684d708654d39ffdf7c5f164e98/pyexpect-1.0.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c71307d6c7096fdbde0813018dfa0092",
        "sha256": "d656ef7e07a8aa539ce0a4883a683341037b6fc1c329bf55b63bffbf2cce9582"
      },
      "downloads": -1,
      "filename": "pyexpect-1.0.17.tar.gz",
      "has_sig": false,
      "md5_digest": "c71307d6c7096fdbde0813018dfa0092",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 29254,
      "upload_time": "2017-10-30T20:31:42",
      "url": "https://files.pythonhosted.org/packages/07/49/a695e8fbca0e0c7abc09b32e2ab9fdd5ce71e0c4e643a678d4965b057e9f/pyexpect-1.0.17.tar.gz"
    }
  ]
}