{
  "info": {
    "author": "CenturyLink Managed Services Team",
    "author_email": "managedos@ctl.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "=================================================\nCenturyLink Cloud ManagedOS Python Utilities [1]_\n=================================================\n\n***************\nGetting Started\n***************\n\nTo install the ``clc_msa_utils`` package, use the command below.::\n\n    pip3 install clc_msa_utils\n\n*******\nKVStore\n*******\n\nThis is a utlitiy class that abstracts loading a configuration from Consul or ETCD. This class supports perodically\nreloading the configuration from the configured key-value store, and notifing a callback method after reloading.\nThe following may be passed into the constructor, or pulled from env variables:\n\n+------------------+-----------------------+--------------------------------------------+-----------+\n| Constructor Arg  | Environment Variable  | Description                                | Default   |\n+==================+=======================+============================================+===========+\n| consul_host      | CONSUL_HOST           | Host for Consul                            | None      |\n+------------------+-----------------------+--------------------------------------------+-----------+\n| consul_port      | CONSUL_PORT           | Port for Consul                            | 8500      |\n+------------------+-----------------------+--------------------------------------------+-----------+\n| etcd_host        | ETCD_HOST             | Host for etcd                              | localhost |\n+------------------+-----------------------+--------------------------------------------+-----------+\n| etcd_port        | ETCD_PORT             | Port for etcd                              | 2379      |\n+------------------+-----------------------+--------------------------------------------+-----------+\n| kv_prefix        | KV_PREFIX             | Prefix for config path                     | \"\"        |\n+------------------+-----------------------+--------------------------------------------+-----------+\n| reload_seconds   | RELOAD_CONFIG_PERIOD  | Seconds between config reloads             | 20        |\n+------------------+-----------------------+--------------------------------------------+-----------+\n| reload_enabled   | RELOAD_ENABLED        | If true, reloads the config periodically.  | False     |\n+------------------+-----------------------+--------------------------------------------+-----------+\n\nTODO: Future Features\n~~~~~~~~~~~~~~~~~~~~~~\n* Logging Configuration: Will enable configuring logging by updating the specified configuration mechanism.\n* Nested Configurations: Will enable you specify a list of prefixes to use to overlay configuration values.\n\nExample Usage\n~~~~~~~~~~~~~\n\n.. code:: python\n   :number-lines: 1\n\n      from clc_msa_utils.kv_store import KVStore\n\n        # Create config store\n        kv_store = KVStore(\n            kv_prefix=os.getenv('CONSUL_PREFIX') or os.getenv('ETCD_PREFIX', '/config/retry-listener'),\n            reload_enabled=True\n        )\n\n        # Setup on_reload handler\n        def initialize():\n            kv_store.on_reload(dynamic_configuration)\n\n        # Implement reload handler to check if attributes changed, and then perform some logic.\n        def dynamic_configuration(old, new):\n            if not old or old.get('exchange_configs') != new.get('exchange_configs') \\\n                or kv_store.attribute_changed(\"rabbit_host\",\"rabbit_port\",\"rabbit_user\",\"rabbit_password\",\"rabbit_queue_name\"):\n            setup_queue()\n\n    # Use kv_store to pull configuration values.\n    def setup_queue():\n        rabbit_host = kv_store.get('rabbit_host', 'localhost')\n        rabbit_port = int(kv_store.get('rabbit_port', 5672))\n\n\n************\nLogManager\n************\n\nThis is a utility class that uses a KVStore to configure the python logging facility. It uses KVStore's dynamic ability\nto reload its configuration to update Python's logging facility.\n\n+------------------+---------------------------------------------+--------------------+\n| Constructor Arg  |  Description                                | Default            |\n+==================+=============================================+====================+\n| kv_store         |  Backing KVStore used to configure logging. | None/Required      |\n+------------------+---------------------------------------------+--------------------+\n\nKVStore configurations relative to the kv_prefix\n\n+------------------------------+---------------------------------------------+-----------------------------------------------------------------------+\n| Key                          |  Description                                | Default                                                               |\n+==============================+=============================================+=======================================================================+\n| logging_filename             |  The file where logs are written.           | None (Std Out)                                                        |\n+------------------------------+---------------------------------------------+-----------------------------------------------------------------------+\n| logging_filemode             |  The file mode if a filename is specified   | None                                                                  |\n+------------------------------+---------------------------------------------+-----------------------------------------------------------------------+\n| logging_format               |  The format of the logging line             | [%(threadName)s] %(asctime)s - %(levelname)s - %(name)s - %(message)s |\n+------------------------------+---------------------------------------------+-----------------------------------------------------------------------+\n| logging_datefmt              |  The datefmt of the date written            | %m/%d/%Y %I:%M:%S %p                                                  |\n+------------------------------+---------------------------------------------+-----------------------------------------------------------------------+\n| logging_level                |  Root logging Level                         | INFO                                                                  |\n+------------------------------+---------------------------------------------+-----------------------------------------------------------------------+\n| logging_config/log_name_1    |  Logging level for <log_name_1>             | None                                                                  |\n+------------------------------+---------------------------------------------+-----------------------------------------------------------------------+\n| logging_config/log_name_2    |  Logging level for <log_name_2>             | None                                                                  |\n+------------------------------+---------------------------------------------+-----------------------------------------------------------------------+\n| logging_config/log_name_n    |  Logging level for <log_name_n>             | None                                                                  |\n+------------------------------+---------------------------------------------+-----------------------------------------------------------------------+\n\n\nExample Usage\n~~~~~~~~~~~~~\nHere are the available configurations for logging provided by KVStore using an example of `/confing/local_config`\n\n.. code:: json\n\n    {\n      \"config\" : {\n         \"local_config\" : {\n            \"logging_level\": \"INFO\",\n            \"logging_config: {\n               \"default\": \"DEBUG\",\n               \"KVStore\": \"DEBUG\",\n               \"LogManager\": \"DEBUG\"\n            }\n         }\n      }\n    }\n\n\n\n.. code:: python\n   :number-lines: 1\n\n   from clc_msa_utils.kv_store import KVStore\n   from clc_msa_utils.log_manager import LogManager\n\n   kv_store = KVStore(\n       kv_prefix=os.getenv('CONSUL_PREFIX') or\n                 os.getenv('ETCD_PREFIX') or\n                 os.getenv('KV_PREFIX', '/config/local_config'),\n       reload_enabled=True\n   )\n\n   log_manager = LogManager(kv_store=kv_store)\n\n\n************\nQueueFactory\n************\n\nThis is a utility class that abstracts the creation of Queue Producers and Queue Consumers/Listeners.\nThe producers and consumers are constructed based on a configuration passed into their respective methods\nas a parameter.  The following is an example JSON configuration of a Queue Consumer configuration that\ncould be stored in a key-value store such as ETCD or Consul. Notice that the `queue_config` attribute is\nan array and can be all of the necessary configuration for both your Consumer and Producers.\n\n.. code:: json\n\n    {\n      \"queue_config\": [\n        {\n          \"name\": \"make_managed_request\",\n          \"type\": \"consumer\",\n          \"exchange\": {\n            \"name\": \"managed_server\",\n            \"type\": \"x-delayed-message\",\n            \"arguments\": {\"x-delayed-type\": \"topic\"},\n            \"durable\": true\n          },\n          \"queue\": \"make_managed_mos_cmdb\",\n          \"binding_key\": \"requested.make_managed\",\n          \"host\": \"rabbitmq.managed-services-dev.skydns.local\",\n          \"port\": \"5672\",\n          \"auth\": {\n            \"user\": \"guest\",\n            \"password\": \"guest\"\n          }\n        }\n      ]\n    }\n\nExample Usage\n~~~~~~~~~~~~~\n\n.. code:: python\n   :number-lines: 1\n\n        from clc_msa_utils.queueing import QueueFactory\n\n        # Get config (eg. from kv_store)\n        queue_config = kv_store.get('queue-config')\n\n        # Initialize QueueFactory\n        q_factory = QueueFactory()\n\n        # Generate Queue Consumers (QueueConsumer)\n        consumers = q_factory.create_consumers(queue_config)\n\n        # Generate Queue Producers (QueueProducer)\n        producers = q_factory.create_producers(queue_config)\n\n        # Retrieve and use consumer based on name configured\n        consumers['make_managed_request'].listen(callback_function)\n\n        # Retrieve and use producer based on name configured\n        producers['error'].publish({\"error_details\": \"message about how you messed things up...\"})\n\n\n\n        def callback_function(ch, method, properties, body):\n        ...\n\n\nMulti-Threaded Example\n~~~~~~~~~~~~~~~~~~~~~~\n.. code:: python\n   :number-lines: 1\n\n      queue_factory = None\n\n      def setup_queue:\n\n         # If the queue_factory was already created, stop_consuming.\n         # Clean up the existing connections before creating new ones\n         # on a configuration change.\n         if queue_factory:\n             queue_factory.stop_consuming()\n\n         # Create one configuration per thread, with a unique name for each.\n         queue_factory_config = {\n             \"queue_config\": []\n         }\n\n         amqp_connections = int(kv_store.get('amqp_connections', '10'))\n         x = 0\n\n         while x < amqp_connections:\n             queue_config = {\n                 \"name\": \"notify_worker_thread_\" + str(x),\n                 \"type\": \"consumer\",\n                 \"queue\": \"my_queue\",\n                 \"host\": \"localhost\",\n                 \"port\": \"5672\",\n                 \"exchange\": {\n                     \"name\": \"managed_server\",\n                     \"type\": \"x-delayed-message\",\n                     \"arguments\": {\"x-delayed-type\": \"topic\"},\n                     \"durable\": true\n                 },\n                 \"auth\": {\n                     \"user\": \"guest\",\n                     \"password\": \"guest\"\n                 }\n             }\n\n             queue_factory_config[\"queue_config\"].append(queue_config)\n             x = x + 1\n\n         # Create the QueueFactory, and pass in the configuration and worker function.\n         queue_factory = QueueFactory()\n         queue_factory.create_consumers(queue_factory_config)\n         queue_factory.start_consuming(do_work)\n\n         # Wait for all threads to stop before stopping the main thread.\n         for queue_consumer in queue_factory.consumers():\n             queue_consumer.thread().join()\n\n      ...\n\n      def do_work(ch, method, properties, body):\n         # Worker code goes here\n         pass\n\n\n************\nQueueWorker\n************\n\nThis is a utility class that creates a KVStore, LogManager, configures exchanges and queues, and starts consuming.\nIt provides convenience methods to publish success, and error messages, and will handle catching and reporting exceptions\nin your callback method, and acknowldge the message when done.\n\nHere are the parameters available when creating a QueueWorker\n\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| Parameter                    |  Description                                                                                                 | Default              |\n+==============================+==============================================================================================================+======================+\n| consul_host                  |  Consul host used to initialize the KVStore.                                                                 | None                 |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| consul_port                  |  Consul port used to initialize the KVStore.                                                                 | None                 |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| etcd_host                    |  Etcd host used to initialize the KVStore.                                                                   | None                 |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| etcd_port                    |  Etcd port used to initialize the KVStore.                                                                   | None                 |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| kv_prefix                    |  The prefix used to initialize the KVStore.                                                                  | None                 |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| rabbit_host_key              |  The key in the kv store that contains the RabbitMQ Host.                                                    | rabbit_host          |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| rabbit_port_key              |  The key in the kv store that contains the RabbitMQ Port                                                     | rabbit_port          |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| rabbit_user_key              |  The key in the kv store that contains the RabbitMQ User                                                     | rabbit_user          |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| rabbit_password_key          |  The key in the kv store that contains the RabbitMQ Password                                                 | rabbit_password      |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| amqp_connection_key          |  The key in the kv store that contains the number of connections to RabbitMQ                                 | amqp_connections     |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| listen_exchange_key          |  The key in the kv store that contains the exchange to publish to listen on when consuming messages          | exchange             |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| listen_routing_key_key       |  The key in the kv store that contains the routing key to bind to when consuming messages.                   | listen_routing_key   |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| queue_name_key               |  The key in the kv store that contains the queue name to listen on when consuming messages                   | queue                |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| done_exchange_key            |  The key in the kv store that contains the exchange to publish to on success                                 | done_exchange        |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| done_routing_key_key         |  The key in the kv store that contains the routing key to publish to on success.                             | done_routing_key     |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| error_exchange_key           |  The key in the kv store that contains the exchange to publish to on error                                   | error_exchange       |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| error_routing_key_key        |  The key in the kv store that contains the routing key to publish to on error.                               | error_routing_key    |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| data_key_on_error_payload    |  The key in the kv store that contains the key in the error payload when publishing  to the error exchange.  | data                 |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| initialize_log_manager       |  When true, creates a LogManager using the kv store created or specified                                     | True                 |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n| kv_store                     |  When specigfied, this kv_store is used instead of creating a new one.                                       | None                 |\n+------------------------------+--------------------------------------------------------------------------------------------------------------+----------------------+\n\n\nExample Usage\n~~~~~~~~~~~~~\n\n.. code:: python\n   :number-lines: 1\n\n   from clc_msa_utils.queueing import QueueWorker\n\n   logger = logging.getLogger(\"default\")\n\n   register_queue_worker = None\n\n   register_queue_worker = QueueWorker(rabbit_host_key=\"rabbit-host\",\n                                       rabbit_port_key=\"rabbit-port\",\n                                       rabbit_user_key=\"rabbit-user\",\n                                       rabbit_password_key=\"rabbit-password\",\n                                       amqp_connection_key=\"amqp-connection-count\",\n                                       queue_name_key=\"queue\",\n                                       done_exchange_key=\"done-exchange\",\n                                       error_exchange_key=\"error-exchange\",\n                                       listen_exchange_key=\"listen-exchange\",\n                                       listen_routing_key_key=\"listen-routing-key\",\n                                       done_routing_key_key=\"done-routing-key\",\n                                       error_routing_key_key=\"error-routing-key\",\n                                       data_key_on_error_payload=\"original_payload\")\n\n   # Use the same kv_store as above, and don't initialize another log_manager\n   unregister_queue_worker = QueueWorker(rabbit_host_key=\"rabbit-host\",\n                                         rabbit_port_key=\"rabbit-port\",\n                                         rabbit_user_key=\"rabbit-user\",\n                                         rabbit_password_key=\"rabbit-password\",\n                                         amqp_connection_key=\"amqp-un-connection-count\",\n                                         queue_name_key=\"un-queue\",\n                                         listen_exchange_key=\"listen-exchange\",\n                                         done_exchange_key=\"done-exchange\",\n                                         error_exchange_key=\"error-exchange\",\n                                         listen_routing_key_key=\"listen-un-routing-key\",\n                                         done_routing_key_key=\"done-un-routing-key\",\n                                         error_routing_key_key=\"error-un-routing-key\",\n                                         data_key_on_error_payload=\"original_payload\",\n                                         initiliaze_log_manager=False,\n                                         kv_store=register_queue_worker.kv_store())\n\n\n   # Initializes the listener\n   def initialize():\n       logger.debug(\"Initializing worker...\")\n\n       # Register the callbacks with the queue workers, this initializes the worker and starts consuming.\n       register_queue_worker.set_callback(register_listener)\n       unregister_queue_worker.set_callback(unregister_listener)\n\n       logger.debug(\"Done Initializing worker\")\n\n\n   def register_listener(ch, method, properties, body):\n       _do_work(ch, method, properties, body, \"register\", register_queue_worker)\n\n\n   def unregister_listener(ch, method, properties, body):\n       _do_work(ch, method, properties, body, \"unregister\", unregister_queue_worker)\n\n\n   def _do_work(ch, method, properties, body, task_name, queue_worker, sleep_seconds=5):\n       logger.info(\"[{0}] Received the following message: {1}\".format(task_name, body.decode(\"utf-8\")))\n       logger.info(\"[{0}] Pretending to do something for {1} seconds...\".format(task_name, str(sleep_seconds)))\n\n       time.sleep(sleep_seconds)\n\n       logger.info(\"[{0}] Done pretending to do something. \".format(task_name, str(sleep_seconds)))\n\n       payload = {\n           \"task_name\": task_name,\n           \"sleep_seconds\": sleep_seconds,\n           \"original_message\": body.decode(\"utf-8\"),\n           \"properties\": properties,\n           \"method\": method\n       }\n\n       # No need to catch an error, the queue worker will publish the error for you.\n       # The error message will contain 'Exception: Raising an error.', the error_details and\n       # errorDetails will contain the stack trace, and the `data_key_on_error_payload` property will contain the\n       # original payload.\n       if \"error\" in str(body.decode(\"utf-8\")):\n           raise Exception(\"Raising an error.\")\n\n       # Publish a success message, propagating the properties\n       queue_worker.publish_success(payload, properties)\n\n       # If I need to manually publish an error message, there is a method to do so.\n       queue_worker.publish_error(payload)\n\n       # Queue worker acknowledges the message, so no need to do it here!\n       logger.info(\"[{0}] Acknowledged that I am done pretending to do something.\".format(task_name))\n\n\n   if __name__ == '__main__':\n       initialize()\n\n\n----\n\n\n.. [1] This document is formatted using `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_,\n   with `reStructuredText directives <http://docutils.sourceforge.net/docs/ref/rst/directives.html>`_.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/CenturyLinkCloud/mos-pyutils",
    "keywords": "CenturyLink ManagedServices Utilities",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "clc_msa_utils",
    "platform": "",
    "project_url": "https://pypi.org/project/clc_msa_utils/",
    "release_url": "https://pypi.org/project/clc_msa_utils/0.6.9/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "CenturyLink Managed Services Anywhere Python Utilities",
    "version": "0.6.9"
  },
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "25e4d995fa40394cd0490f9b2183bdef",
          "sha256": "8f7204134ffaa39d468619f72fcfea14df07c529ba66afc0a7fdb3213d034b09"
        },
        "downloads": -1,
        "filename": "clc_msa_utils-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "25e4d995fa40394cd0490f9b2183bdef",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7647,
        "upload_time": "2018-01-11T17:19:32",
        "url": "https://files.pythonhosted.org/packages/14/f1/22a2b55d267750216d1d6e9331de1daa4cbb1eae1f55bf6b0f9458074e81/clc_msa_utils-0.5.0.tar.gz"
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e91e3c82a016e6ceb54cc95ae8add878",
          "sha256": "5b5fc8782b2bf1b936ba0c91fbda300e1ecae30fc780b292df7da7fbc5e1ae5f"
        },
        "downloads": -1,
        "filename": "clc_msa_utils-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e91e3c82a016e6ceb54cc95ae8add878",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8670,
        "upload_time": "2018-01-19T16:54:03",
        "url": "https://files.pythonhosted.org/packages/78/20/42af3eb5fc798c373fd7aab97eea6a0c137d90a21137d9f4e6c8a3c38e8c/clc_msa_utils-0.6.1.tar.gz"
      }
    ],
    "0.6.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6d11ebbdaf3588bd8d5d6a51c9cb7cc8",
          "sha256": "5d0e0c11ba099294882b78a92c0e1e471d6e2a21a99ae74a9b7e4f49f6d93bee"
        },
        "downloads": -1,
        "filename": "clc_msa_utils-0.6.7.tar.gz",
        "has_sig": false,
        "md5_digest": "6d11ebbdaf3588bd8d5d6a51c9cb7cc8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11222,
        "upload_time": "2018-01-29T22:37:09",
        "url": "https://files.pythonhosted.org/packages/7f/aa/d4b0af8df9b45f6219621e3ab48414feca90e557d28e272813b4e2b5af96/clc_msa_utils-0.6.7.tar.gz"
      }
    ],
    "0.6.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0b82fd9f5ad656e4fb68c04172e4d36a",
          "sha256": "b6f0393c1d8f081d940741b3e9d60b51e6f392373932d31615feef1703eb8906"
        },
        "downloads": -1,
        "filename": "clc_msa_utils-0.6.8.tar.gz",
        "has_sig": false,
        "md5_digest": "0b82fd9f5ad656e4fb68c04172e4d36a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11199,
        "upload_time": "2018-01-30T17:07:16",
        "url": "https://files.pythonhosted.org/packages/74/08/95c10f92c06e48586957874c0ccc7c18a6643948e5b2b704a2c6af2dacac/clc_msa_utils-0.6.8.tar.gz"
      }
    ],
    "0.6.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5644790eb1e01de6df0b26b086dacabb",
          "sha256": "598ce53529564fa05effffffdf25fe1773055a04470592ec23d905b170736b9d"
        },
        "downloads": -1,
        "filename": "clc_msa_utils-0.6.9.tar.gz",
        "has_sig": false,
        "md5_digest": "5644790eb1e01de6df0b26b086dacabb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22177,
        "upload_time": "2018-02-08T20:52:01",
        "url": "https://files.pythonhosted.org/packages/e0/fb/c1e14d8f0eefaeccdd3e52b0ec1753890ff6c4b1dbe33ec4aba12a2a0ea5/clc_msa_utils-0.6.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5644790eb1e01de6df0b26b086dacabb",
        "sha256": "598ce53529564fa05effffffdf25fe1773055a04470592ec23d905b170736b9d"
      },
      "downloads": -1,
      "filename": "clc_msa_utils-0.6.9.tar.gz",
      "has_sig": false,
      "md5_digest": "5644790eb1e01de6df0b26b086dacabb",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 22177,
      "upload_time": "2018-02-08T20:52:01",
      "url": "https://files.pythonhosted.org/packages/e0/fb/c1e14d8f0eefaeccdd3e52b0ec1753890ff6c4b1dbe33ec4aba12a2a0ea5/clc_msa_utils-0.6.9.tar.gz"
    }
  ]
}