{
  "info": {
    "author": "CenturyLink Managed Services Team",
    "author_email": "managedos@ctl.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "=================================================\nCenturyLink Cloud ManagedOS Python Utilities [1]_\n=================================================\n\n***************\nGetting Started\n***************\n\nTo install the ``clc_msa_utils`` package, use the command below.::\n\n    pip3 install clc_msa_utils\n\n*******\nKVStore\n*******\n\nThis is a utlitiy class that abstracts loading a configuration from Consul or ETCD. This class supports perodically\nreloading the configuration from the configured key-value store, and notifing a callback method after reloading.\nThe following may be passed into the constructor, or pulled from env variables:\n\n+------------------+-----------------------+--------------------------------------------+-----------+\n| Constructor Arg  | Environment Variable  | Description                                | Default   |\n+==================+=======================+============================================+===========+\n| consul_host      | CONSUL_HOST           | Host for Consul                            | None      |\n+------------------+-----------------------+--------------------------------------------+-----------+\n| consul_port      | CONSUL_PORT           | Port for Consul                            | 8500      |\n+------------------+-----------------------+--------------------------------------------+-----------+\n| etcd_host        | ETCD_HOST             | Host for etcd                              | localhost |\n+------------------+-----------------------+--------------------------------------------+-----------+\n| etcd_port        | ETCD_PORT             | Port for etcd                              | 2379      |\n+------------------+-----------------------+--------------------------------------------+-----------+\n| kv_prefix        | KV_PREFIX             | Prefix for config path                     | \"\"        |\n+------------------+-----------------------+--------------------------------------------+-----------+\n| reload_seconds   | RELOAD_CONFIG_PERIOD  | Seconds between config reloads             | 20        |\n+------------------+-----------------------+--------------------------------------------+-----------+\n| reload_enabled   | RELOAD_ENABLED        | If true, reloads the config periodically.  | False     |\n+------------------+-----------------------+--------------------------------------------+-----------+\n\nTODO: Future Features\n~~~~~~~~~~~~~~~~~~~~~~\n* Logging Configuration: Will enable configuring logging by updating the specified configuration mechanism.\n* Nested Configurations: Will enable you specify a list of prefixes to use to overlay configuration values.\n\nExample Usage\n~~~~~~~~~~~~~\n\n.. code:: python\n   :number-lines: 1\n\n      from clc_msa_utils.kv_store import KVStore\n\n        # Create config store\n        kv_store = KVStore(\n            kv_prefix=os.getenv('CONSUL_PREFIX') or os.getenv('ETCD_PREFIX', '/config/retry-listener'),\n            reload_enabled=True\n        )\n\n        # Setup on_reload handler\n        def initialize():\n            kv_store.on_reload(dynamic_configuration)\n\n        # Implement reload handler to check if attributes changed, and then perform some logic.\n        def dynamic_configuration(old, new):\n            if not old or old.get('exchange_configs') != new.get('exchange_configs') \\\n                or kv_store.attribute_changed(\"rabbit_host\",\"rabbit_port\",\"rabbit_user\",\"rabbit_password\",\"rabbit_queue_name\"):\n            setup_queue()\n\n    # Use kv_store to pull configuration values.\n    def setup_queue():\n        rabbit_host = kv_store.get('rabbit_host', 'localhost')\n        rabbit_port = int(kv_store.get('rabbit_port', 5672))\n\n\n************\nQueueFactory\n************\n\nThis is a utility class that abstracts the creation of Queue Producers and Queue Consumers/Listeners.\nThe producers and consumers are constructed based on a configuration passed into their respective methods\nas a parameter.  The following is an example JSON configuration of a Queue Consumer configuration that\ncould be stored in a key-value store such as ETCD or Consul. Notice that the `queue_config` attribute is\nan array and can be all of the necessary configuration for both your Consumer and Producers.\n\n.. code:: json\n\n    {\n      \"queue_config\": [\n        {\n          \"name\": \"make_managed_request\",\n          \"type\": \"consumer\",\n          \"exchange\": {\n            \"name\": \"managed_server\",\n            \"type\": \"x-delayed-message\",\n            \"arguments\": {\"x-delayed-type\": \"topic\"},\n            \"durable\": true\n          },\n          \"queue\": \"make_managed_mos_cmdb\",\n          \"binding_key\": \"requested.make_managed\",\n          \"host\": \"rabbitmq.managed-services-dev.skydns.local\",\n          \"port\": \"5672\",\n          \"auth\": {\n            \"user\": \"guest\",\n            \"password\": \"guest\"\n          }\n        }\n      ]\n    }\n\nExample Usage\n~~~~~~~~~~~~~\n\n.. code:: python\n   :number-lines: 1\n\n        from clc_msa_utils.queueing import QueueFactory\n\n        # Get config (eg. from kv_store)\n        queue_config = kv_store.get('queue-config')\n\n        # Initialize QueueFactory\n        q_factory = QueueFactory()\n\n        # Generate Queue Consumers (QueueConsumer)\n        consumers = q_factory.create_consumers(queue_config)\n\n        # Generate Queue Producers (QueueProducer)\n        producers = q_factory.create_producers(queue_config)\n\n        # Retrieve and use consumer based on name configured\n        consumers['make_managed_request'].listen(callback_function)\n\n        # Retrieve and use producer based on name configured\n        producers['error'].publish({\"error_details\": \"message about how you messed things up...\"})\n\n\n\n        def callback_function(ch, method, properties, body):\n        ...\n\n\nMulti-Threaded Example\n~~~~~~~~~~~~~~~~~~~~~~\n.. code:: python\n   :number-lines: 1\n\n      queue_factory = None\n\n      def setup_queue:\n\n         # If the queue_factory was already created, stop_consuming.\n         # Clean up the existing connections before creating new ones\n         # on a configuration change.\n         if queue_factory:\n             queue_factory.stop_consuming()\n\n         # Create one configuration per thread, with a unique name for each.\n         queue_factory_config = {\n             \"queue_config\": []\n         }\n\n         amqp_connections = int(kv_store.get('amqp_connections', '10'))\n         x = 0\n\n         while x < amqp_connections:\n             queue_config = {\n                 \"name\": \"notify_worker_thread_\" + str(x),\n                 \"type\": \"consumer\",\n                 \"queue\": \"my_queue\",\n                 \"host\": \"localhost\",\n                 \"port\": \"5672\",\n                 \"exchange\": {\n                     \"name\": \"managed_server\",\n                     \"type\": \"x-delayed-message\",\n                     \"arguments\": {\"x-delayed-type\": \"topic\"},\n                     \"durable\": true\n                 },\n                 \"auth\": {\n                     \"user\": \"guest\",\n                     \"password\": \"guest\"\n                 }\n             }\n\n             queue_factory_config[\"queue_config\"].append(queue_config)\n             x = x + 1\n\n         # Create the QueueFactory, and pass in the configuration and worker function.\n         queue_factory = QueueFactory()\n         queue_factory.create_consumers(queue_factory_config)\n         queue_factory.start_consuming(do_work)\n\n         # Wait for all threads to stop before stopping the main thread.\n         for queue_consumer in queue_factory.consumers():\n             queue_consumer.thread().join()\n\n      ...\n\n      def do_work(ch, method, properties, body):\n         # Worker code goes here\n         pass\n\n\n\n----\n\n\n.. [1] This document is formatted using `reStructuredText <http://docutils.sourceforge.net/docs/user/rst/quickref.html>`_,\n   with `reStructuredText directives <http://docutils.sourceforge.net/docs/ref/rst/directives.html>`_.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/CenturyLinkCloud/mos-pyutils",
    "keywords": "CenturyLink ManagedServices Utilities",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "clc_msa_utils",
    "platform": "",
    "project_url": "https://pypi.org/project/clc_msa_utils/",
    "release_url": "https://pypi.org/project/clc_msa_utils/0.6.5/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "CenturyLink Managed Services Anywhere Python Utilities",
    "version": "0.6.5"
  },
  "releases": {
    "0.0.6.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6fb4d0f4417b59b94a58923300d6972a",
          "sha256": "2d1812e82380d172b88c8f477b146914422e27e5b632bc3f9bd6f905b9bc388f"
        },
        "downloads": -1,
        "filename": "clc_msa_utils-0.0.6.6.tar.gz",
        "has_sig": false,
        "md5_digest": "6fb4d0f4417b59b94a58923300d6972a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10975,
        "upload_time": "2018-01-29T20:10:54",
        "url": "https://files.pythonhosted.org/packages/41/32/01f763c77c13ad9e85a4e5be6b653ebb15ecd3ce7e0831d5b0c872371f5b/clc_msa_utils-0.0.6.6.tar.gz"
      }
    ],
    "0.0.6.6.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1dd9641319348905d493f5d2aee8c087",
          "sha256": "24ef724258552953911f07b8fd7023cc4f8640fd9343238ccf575321d750a9ec"
        },
        "downloads": -1,
        "filename": "clc_msa_utils-0.0.6.6.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1dd9641319348905d493f5d2aee8c087",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11068,
        "upload_time": "2018-01-29T20:32:21",
        "url": "https://files.pythonhosted.org/packages/84/22/cc039179ab4919a47b060252976c8179c56436ab448f546e41b18c9422da/clc_msa_utils-0.0.6.6.3.tar.gz"
      }
    ],
    "0.0.6.6.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "73f16458faa29e9a054bc92d0b1f5f71",
          "sha256": "8c3259d77498d99818842d0feeb457f04846592c4d31864993244329ea2e4b31"
        },
        "downloads": -1,
        "filename": "clc_msa_utils-0.0.6.6.4.tar.gz",
        "has_sig": false,
        "md5_digest": "73f16458faa29e9a054bc92d0b1f5f71",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11094,
        "upload_time": "2018-01-29T20:38:48",
        "url": "https://files.pythonhosted.org/packages/a3/5a/57562e9566a7c4d1ad4261beba518582f66fce90a00e0b97b50cb25ae691/clc_msa_utils-0.0.6.6.4.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "25e4d995fa40394cd0490f9b2183bdef",
          "sha256": "8f7204134ffaa39d468619f72fcfea14df07c529ba66afc0a7fdb3213d034b09"
        },
        "downloads": -1,
        "filename": "clc_msa_utils-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "25e4d995fa40394cd0490f9b2183bdef",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7647,
        "upload_time": "2018-01-11T17:19:32",
        "url": "https://files.pythonhosted.org/packages/14/f1/22a2b55d267750216d1d6e9331de1daa4cbb1eae1f55bf6b0f9458074e81/clc_msa_utils-0.5.0.tar.gz"
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e91e3c82a016e6ceb54cc95ae8add878",
          "sha256": "5b5fc8782b2bf1b936ba0c91fbda300e1ecae30fc780b292df7da7fbc5e1ae5f"
        },
        "downloads": -1,
        "filename": "clc_msa_utils-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e91e3c82a016e6ceb54cc95ae8add878",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8670,
        "upload_time": "2018-01-19T16:54:03",
        "url": "https://files.pythonhosted.org/packages/78/20/42af3eb5fc798c373fd7aab97eea6a0c137d90a21137d9f4e6c8a3c38e8c/clc_msa_utils-0.6.1.tar.gz"
      }
    ],
    "0.6.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8aef046d55cb417079a83e17373dd02b",
          "sha256": "7bfb936a7caeacd34db201185cf17113ee0e0326328871293da69bd8a8d42535"
        },
        "downloads": -1,
        "filename": "clc_msa_utils-0.6.5.tar.gz",
        "has_sig": false,
        "md5_digest": "8aef046d55cb417079a83e17373dd02b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8793,
        "upload_time": "2018-01-29T18:52:01",
        "url": "https://files.pythonhosted.org/packages/6b/df/1de2f262d49daf30cb45ac5e9b077b4a76892603dde1b5ceeda129cd76a3/clc_msa_utils-0.6.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8aef046d55cb417079a83e17373dd02b",
        "sha256": "7bfb936a7caeacd34db201185cf17113ee0e0326328871293da69bd8a8d42535"
      },
      "downloads": -1,
      "filename": "clc_msa_utils-0.6.5.tar.gz",
      "has_sig": false,
      "md5_digest": "8aef046d55cb417079a83e17373dd02b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8793,
      "upload_time": "2018-01-29T18:52:01",
      "url": "https://files.pythonhosted.org/packages/6b/df/1de2f262d49daf30cb45ac5e9b077b4a76892603dde1b5ceeda129cd76a3/clc_msa_utils-0.6.5.tar.gz"
    }
  ]
}