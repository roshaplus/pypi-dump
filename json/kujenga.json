{
  "info": {
    "author": "Don MacMillen",
    "author_email": "don@macmillen.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development"
    ],
    "description": "\n# Kujenga\n\nKujenga is a lightweight way to build EC2 images using Python, boto and fabric.\n\nKujenga uses simple JSON based scripts as recipies to build images\nin Amazon EC2.  It does this by spinning up a base instance, uploading\nany local files, and then executing a set of commands to configure the\ninstance.  Finally it snapshots the image.\n\nDuring the process it generates temporary keys and temporary security\ngroups that are used to connect to the running image using Fabric.\nAfter the image has been created, the instance is terminated and\nthe temporary keys and security groups are deleted.\n\nKujenga is different from other EC2 script based solutions in that it attempts\nto deal with the unpredictable delays and eventual consistancy issues of\nEC2 rather than leaving that as an exercise for the user.  It is meant to\nbe used in an automated stack.\n\n## Prerequisites\nKujenga requires\n  - Boto\n  - Fabric\n\nBecause of the boto dependency, Kujenga does not work with Python 3.\nUsing Amazon EC2 requires having an account there and setting the \nfollowing environment variables\n\n    export AWS_ACCESS_KEY_ID=<your aws access key>\n    export AWS_SECRET_ACCESS_KEY=<your aws secret access key>\n\n## Installation\nTODO:\n\n## Details\n\nAn example of a minimal Kujenga recipe is the following:\n\n    {\n        \"name\": \"dbm-desktop\",\n        \"description\": \"Desktop image in cloud for use with remote desktop\",\n        \"region\" \"us-west-2\",\n        \"user\": \"ubuntu\",\n        \"instance_type\": \"m3.medium\",\n        \"base_image\": {\n            \"doc-string\": \"These are the U14.04 amd64 ebs images as of 3-Aug-2014\",\n            \"us-west-2\": \"ami-9986fea9\",\n            \"us-west-1\": \"ami-79b4b73c\",\n            \"us-east-1\": \"ami-a427efcc\",\n            \"sa-east-1\": \"ami-fb8b22e6\"\n        },\n        \"uploads\": {\n            \"doc-string\": \"Everthing in the source dir will be uploaded to target_directory\",\n            \"source\": \"/home/ubuntu/source\",\n            \"target\": \"/home/ubuntu/target\"\n        },\n        \"commands\": [ \"apt-get update\",\n                      \"apt-get upgrade -y\",\n                      \"apt-get install emacs -y\",\n                      \"python /home/ubuntu/target/get_pip.py\"]\n    }\n\nThe **name** and **description** values will be used to annotate the image\nin EC2.  Kujenga will use the EC2 region specified by the **region**\nvalue to create the image.  The **user** value is used to ssh into the\nrunning instance in order to configure it.  It must be part of the\nsudo'ers group.  \n\nThe **instance_type** value will be used as the machine\ntype for the instance.  Note that it must be compatible with the ami\nthat is specified in the **base_image** dictionary. The **uploads** \ndictionary gives directions on files to upload.  Everything in the source \ndirectory (full path) will be uploaded to the target directory (full path).  \nThese files can then be referred to in the commands section for installation \nof custom software etc.\n\nEvery entry in the **commands** section will be executed verbatim by\nthe sudo command.\n\nFinally, Kujenga snapshots the instance to make a new ami and cleans up\nby shutting down the instance and deletes temporary keys and security groups\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/macd/kujenga",
    "keywords": "Amazon EC2,Boto,Fabric",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "kujenga",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/kujenga/",
    "release_url": "https://pypi.org/project/kujenga/0.1.0/",
    "requires_python": null,
    "summary": "Ultra-lightweight EC2 ami builds from json recipes",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f3594384c029e1d3521a3036410718f5",
          "sha256": "51f598e1bae8f1dc0204656890905e5bb3612452b862f65b09622d99d4ed32e4"
        },
        "downloads": 2219,
        "filename": "kujenga-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f3594384c029e1d3521a3036410718f5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4849,
        "upload_time": "2014-08-06T07:33:59",
        "url": "https://files.pythonhosted.org/packages/e6/e1/2a2d4373829e88f2253f18415582b636253b2923cbe0a12cceef0b927eb7/kujenga-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f3594384c029e1d3521a3036410718f5",
        "sha256": "51f598e1bae8f1dc0204656890905e5bb3612452b862f65b09622d99d4ed32e4"
      },
      "downloads": 2219,
      "filename": "kujenga-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f3594384c029e1d3521a3036410718f5",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4849,
      "upload_time": "2014-08-06T07:33:59",
      "url": "https://files.pythonhosted.org/packages/e6/e1/2a2d4373829e88f2253f18415582b636253b2923cbe0a12cceef0b927eb7/kujenga-0.1.0.tar.gz"
    }
  ]
}