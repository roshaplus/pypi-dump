{
  "info": {
    "author": "MIT Haystack Observatory",
    "author_email": "openradar-developers@openradar.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: BSD License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: C",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Topic :: Scientific/Engineering"
    ],
    "description": "The Digital RF project encompasses a standardized HDF5 format for reading and writing of radio frequency data and the software for doing so. The format is designed to be self-documenting for data archive and to allow rapid random access for data processing.\n\nThis package includes:\n\n* ``digital_rf`` Python package\n* Tools for managing and processing Digital RF data\n* ``gr_digital_rf`` Python package for interfacing with GNU Radio\n* GNU Radio Companion blocks\n* `thor` UHD radio recorder script\n* Example scripts and applications\n\nDigital RF C and MATLAB libraries can be found at the `official source code repository <https://github.com/MITHaystack/digital_rf>`_. To build from source, you must have the HDF5 library and headers installed.\n\nFor help and/or questions, contact the `user mailing list <openradar-users@openradar.org>`_.\n\n\nExample Usage\n=============\n\nThe following code will load and read data located in a directory '/data/test'.\n\nLoad the module and create a reader object::\n\n    import digital_rf as drf\n    do = drf.DigitalRFReader('/data/test')\n\nList channels::\n\n    do.get_channels()\n\nGet data bounds for channel 'cha'::\n\n    s, e = do.get_bounds('cha')\n\nRead first 10 samples from channel 'cha'::\n\n    data = do.read_vector(s, 10, 'cha')",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/MITHaystack/digital_rf",
    "keywords": "hdf5 radio rf",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "digital-rf",
    "platform": "",
    "project_url": "https://pypi.org/project/digital-rf/",
    "release_url": "https://pypi.org/project/digital-rf/2.6.0.dev4/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python tools to read/write Digital RF data in HDF5 format",
    "version": "2.6.0.dev4"
  },
  "releases": {
    "2.6.0.dev4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1f361afb3411fdc52a0f272df3032944",
          "sha256": "ca43f27b24e30f69569bc512f6ecc89e9b399b8c999816f11395e13b94d2c00d"
        },
        "downloads": -1,
        "filename": "digital_rf-2.6.0.dev4.tar.gz",
        "has_sig": false,
        "md5_digest": "1f361afb3411fdc52a0f272df3032944",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1014817,
        "upload_time": "2018-02-01T20:53:26",
        "url": "https://files.pythonhosted.org/packages/64/c9/2079ffb7203ad9b09d3402eaedf02f16af9be4ebfa1f20a17c9da3cc7d38/digital_rf-2.6.0.dev4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1f361afb3411fdc52a0f272df3032944",
        "sha256": "ca43f27b24e30f69569bc512f6ecc89e9b399b8c999816f11395e13b94d2c00d"
      },
      "downloads": -1,
      "filename": "digital_rf-2.6.0.dev4.tar.gz",
      "has_sig": false,
      "md5_digest": "1f361afb3411fdc52a0f272df3032944",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 1014817,
      "upload_time": "2018-02-01T20:53:26",
      "url": "https://files.pythonhosted.org/packages/64/c9/2079ffb7203ad9b09d3402eaedf02f16af9be4ebfa1f20a17c9da3cc7d38/digital_rf-2.6.0.dev4.tar.gz"
    }
  ]
}