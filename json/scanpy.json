{
  "info": {
    "author": "F. Alexander Wolf, P. Angerer",
    "author_email": "alex.wolf@helmholtz-muenchen.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Framework :: Jupyter",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "`Getting started`_ \\| Examples_ \\| Docs_ \\| Installation_ \\| References_\n\n|Build Status|\n\n.. |Build Status| image:: https://travis-ci.org/theislab/scanpy.svg?branch=master\n   :target: https://travis-ci.org/theislab/scanpy\n\nScanpy \u2013 Single-Cell Analysis in Python\n=======================================\n\nScanpy is a scalable toolkit for analyzing single-cell gene expression data. It includes preprocessing, visualization, clustering, pseudotime and trajectory inference, differential expression testing and simulation of gene regulatory networks. The Python-based implementation efficiently deals with data sets of more than one million cells and enables easy integration of advanced machine learning algorithms.\n\nFor conceptual ideas and context, see our `draft <http://falexwolf.de/docs/scanpy.pdf>`__; comments are highly appreciated.\n\nGetting started\n---------------\n\nWith Python 3.5 or 3.6 installed, get `releases on PyPI <https://pypi.python.org/pypi/scanpy>`__ via (more information on installation `here <Installation_>`__)::\n\n  pip3 install scanpy\n\nTo work with the latest version on `GitHub <https://github.com/theislab/scanpy>`__: clone the repository \u2013 green button on top of the page \u2013 and ``cd`` into its root directory and type::\n\n    pip3 install -e .\n\nYou can now ``import scanpy.api as sc`` anywhere on your system and work with the command ``scanpy`` on the command-line.\n\nExamples\n--------\n\nExamples are collected in the repo scanpy_usage_. Good starting points are the following use cases:\n\n.. _scanpy_usage: https://github.com/theislab/scanpy_usage\n\n17-05-05_\n  We reproduce most of the `Guided Clustering tutorial`_ of Seurat_ [Satija15]_.\n17-05-03_\n  Analyzing 68 000 cells from [Zheng17]_, we find that Scanpy is about a factor 5 to 16 faster and more memory efficient than the `Cell Ranger`_ R kit for secondary analysis.\n17-05-02_\n  We reproduce the results of the Diffusion Pseudotime (DPT) paper of [Haghverdi16]_. Note that DPT has recently been very `favorably discussed`_ by the authors of Monocle_.\n\n.. _17-05-05: https://github.com/theislab/scanpy_usage/tree/master/170505_seurat\n.. _17-05-03: https://github.com/theislab/scanpy_usage/tree/master/170503_zheng17\n.. _17-05-02: https://github.com/theislab/scanpy_usage/tree/master/170502_haghverdi16\n.. _17-04-30: https://github.com/theislab/scanpy_usage/tree/master/170430_krumsiek11\n\n.. _Guided Clustering tutorial: http://satijalab.org/seurat/pbmc3k_tutorial.html\n.. _Seurat: http://satijalab.org/seurat\n.. _Cell Ranger: https://github.com/10XGenomics/single-cell-3prime-paper/tree/master/pbmc68k_analysis\n.. _favorably discussed: https://doi.org/10.1101/110668\n.. _Monocle: http://cole-trapnell-lab.github.io/monocle-release/articles/v2.0.0/\n\n\nDocs\n----\n\nHere, we give an Overview_ of the toplevel user functions, describe `Basic Features`_ and the context of the `Tools <Visualization_>`__. For detailed help on the functions, use Python's ``help``. A separate docs page will soon be established.\n\nOverview\n~~~~~~~~\n\nScanpy user functions are grouped into the following modules\n\nsc.tools_\n  Machine Learning and statistics tools. Abbreviation ``sc.tl``.\nsc.preprocessing_\n  Preprocessing. Abbreviation ``sc.pp``.\nsc.plotting_\n  Plotting. Abbreviation ``sc.pl``.\nsc.settings_\n  Settings.\n\n.. _sc.tools:         https://github.com/theislab/scanpy/tree/master/scanpy/tools\n.. _sc.preprocessing: https://github.com/theislab/scanpy/tree/master/scanpy/preprocessing\n.. _sc.plotting:      https://github.com/theislab/scanpy/tree/master/scanpy/plotting\n.. _sc.settings:      https://github.com/theislab/scanpy/tree/master/scanpy/settings.py\n\nPreprocessing\n^^^^^^^^^^^^^\n\n`pp.* <sc.preprocessing_>`__\n  Filtering of highly-variable genes, batch-effect correction, per-cell (UMI) normalization, preprocessing recipes.\n\nVisualizations\n^^^^^^^^^^^^^^\n\n`tl.pca <pca_>`__\n  PCA [Pedregosa11]_.\n`tl.diffmap <diffmap_>`__\n  Diffusion Maps [Coifman05]_ [Haghverdi15]_ [Wolf17]_.\n`tl.tsne <tsne_>`__\n  t-SNE [Maaten08]_ [Amir13]_ [Pedregosa11]_.\n`tl.draw_graph <draw_graph_>`__\n  Force-directed graph drawing [Fruchterman91]_ [Weinreb17]_ [Csardi06]_.\n\nBranching trajectories and pseudotime, clustering, differential expression\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n`tl.dpt <dpt_>`__\n  Infer progression of cells, identify *branching* subgroups [Haghverdi16]_ [Wolf17]_.\n`tl.louvain <louvain_>`__\n  Cluster cells into subgroups [Blondel08]_ [Levine15]_ [Traag17]_.\n`tl.rank_genes_groups <rank_genes_groups_>`__\n  Rank genes according to differential expression [Wolf17]_.\n\nSimulations\n^^^^^^^^^^^\n\n`tl.sim <sim_>`__\n  Simulate dynamic gene expression data [Wittmann09]_ [Wolf17]_.\n\nBasic Features\n~~~~~~~~~~~~~~\n\nThe typical workflow consists of subsequent calls of data analysis tools\nof the form::\n\n    sc.tl.tool(adata, **params)\n\nwhere ``adata`` is an ``AnnData`` object and ``params`` are optional parameters. Each of these calls adds annotation to an expression matrix *X*, which stores *n* *d*-dimensional gene expression measurements. To facilitate writing memory-efficient pipelines, by default, Scanpy tools operate *inplace* on ``adata`` and return ``None``. If you want to copy the ``AnnData`` object, pass the ``copy`` argument::\n\n    adata_copy = sc.tl.tool(adata, copy=True, **params)\n\nReading and writing data files and AnnData objects\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nOne usually calls::\n\n    adata = sc.read(filename)\n\nto initialize an AnnData object, possibly adds further annotation using, e.g., ``np.genfromtxt`` or ``pd.read_csv``::\n\n    annotation = pd.read_csv(filename_annotation)\n    adata.smp['cell_groups'] = annotation['cell_groups']  # categorical annotation of type str or int\n    adata.smp['time'] = annotation['time']                # numerical annotation of type float\n\nand uses::\n\n    sc.write(filename, adata)\n\nto save the ``adata`` as a collection of data arrays to a file in a platform and language-independent way. Reading foresees filenames with extensions *h5*, *xlsx*, *mtx*, *txt*, *csv* and others. Writing foresees writing *h5*, *csv* and *txt*. Instead of providing a filename, you can provide a *filekey*, i.e., any string that does *not* end on a valid file extension.\n\nAnnData objects\n^^^^^^^^^^^^^^^\n\nAn ``AnnData`` instance stores an array-like data matrix as ``adata.X``, dict-like sample annotation as ``adata.smp``, dict-like variable annotation as ``adata.var`` and additional unstructured dict-like annotation as ``adata.add``. While ``adata.add`` is a conventional dictionary, ``adata.smp`` and ``adata.var`` are instances of a low-level Pandas dataframe-like class.\n\nValues can be retrieved and appended via ``adata.smp[key]`` and ``adata.var[key]``. Sample and variable names can be accessed via ``adata.smp_names`` and ``adata.var_names``, respectively. AnnData objects can be sliced like Pandas dataframes, for example, ``adata = adata[:, list_of_gene_names]``. The AnnData class is similar to R's ExpressionSet [Huber15]_ the latter though is not implemented for sparse data.\n\nPlotting\n^^^^^^^^\n\nFor each tool, there is an associated plotting function::\n\n    sc.pl.tool(adata)\n\nthat retrieves and plots annotation in ``adata`` that has been added by ``sc.tl.tool(adata)``. Scanpy's plotting module can be viewed similar to Seaborn_: an extension of matplotlib_ that allows visualizing operations on AnnData objects with one-line commands. Detailed configuration has to be done via matplotlib functions, which is easy as Scanpy's plotting functions accept and return a ``Matplotlib.Axes`` object.\n\n.. _Seaborn: http://seaborn.pydata.org/\n.. _matplotlib: http://matplotlib.org/\n\n\nVisualization\n~~~~~~~~~~~~~\n\npca\n^^^\n\n`[source] <tl.pca_>`__ Computes PCA coordinates, loadings and variance decomposition. Uses the implementation of *scikit-learn* [Pedregosa11]_.\n\ntsne\n^^^^\n\n`[source] <tl.tsne_>`__ t-distributed stochastic neighborhood embedding (tSNE) [Maaten08]_ has been proposed for single-cell data by [Amir13]_. By default, Scanpy uses the implementation of *scikit-learn* [Pedregosa11]_. You can achieve a huge speedup if you install *Multicore-tSNE* by [Ulyanov16]_, which will be automatically detected by Scanpy.\n\ndiffmap\n^^^^^^^\n\n`[source] <tl.diffmap_>`__ Diffusion maps [Coifman05]_ has been proposed for visualizing single-cell data by [Haghverdi15]_. The tool uses the adapted Gaussian kernel suggested by [Haghverdi16]_. Uses the implementation of [Wolf17]_.\n\ndraw_graph\n^^^^^^^^^^\n\n`[source] <tl.draw_graph_>`__ `Force-directed graph drawing`_ describes a class of long-established algorithms for visualizing graphs. It has been suggested for visualizing single-cell data by [Weinreb17]_. Here, by default, the Fruchterman & Reingold [Fruchterman91]_ algorithm is used; many other layouts are available. Uses the igraph implementation [Csardi06]_.\n\n.. _Force-directed graph drawing: https://en.wikipedia.org/wiki/Force-directed_graph_drawing\n\nDiscrete clustering of subgroups, continuous progression through subgroups, differential expression\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\ndpt\n^^^\n\n`[source] <tl.dpt_>`__ Reconstruct the progression of a biological process from snapshot data and detect branching subgroups. Diffusion Pseudotime analysis has been introduced by [Haghverdi16]_. Here, we use a further developed version, which is able to detect multiple branching events [Wolf17]_.\n\nThe possibilities of *diffmap* and *dpt* are similar to those of the R package destiny_ of [Angerer16]_. The Scanpy tools though run faster and scale to much higher cell numbers.\n\n*Examples:* See this `use case <17-05-02_>`__.\n\n.. _destiny: http://bioconductor.org/packages/destiny\n\nlouvain\n^^^^^^^\n\n`[source] <tl.louvain_>`__ Cluster cells using the Louvain algorithm [Blondel08]_ in the implementation of [Traag17]_. The Louvain algorithm has been proposed for single-cell analysis by [Levine15]_.\n\n*Examples:* See this `use case <17-05-05_>`__.\n\nrank_genes_groups\n^^^^^^^^^^^^^^^^^\n\n`[source] <tl.rank_genes_groups_>`__ Rank genes by differential expression.\n\n*Examples:* See this `use case <17-05-05_>`__.\n\n\nSimulation\n~~~~~~~~~~\n\nsim\n^^^\n\n`[source] <scanpy/tools/sim.py>`__ Sample from a stochastic differential equation model built from literature-curated boolean gene regulatory networks, as suggested by [Wittmann09]_. The Scanpy implementation is due to [Wolf17]_.\n\nThe tool is similar to the Matlab tool *Odefy* of [Krumsiek10]_.\n\n*Examples:* See this `use case <17-04-30_>`__.\n\n.. _tl.pca:               https://github.com/theislab/scanpy/tree/master/scanpy/tools/pca.py\n.. _tl.tsne:              https://github.com/theislab/scanpy/tree/master/scanpy/tools/tsne.py\n.. _tl.diffmap:           https://github.com/theislab/scanpy/tree/master/scanpy/tools/diffmap.py\n.. _tl.draw_graph:        https://github.com/theislab/scanpy/tree/master/scanpy/tools/draw_graph.py\n.. _tl.dpt:               https://github.com/theislab/scanpy/tree/master/scanpy/tools/dpt.py\n.. _tl.louvain:           https://github.com/theislab/scanpy/tree/master/scanpy/tools/louvain.py\n.. _tl.rank_genes_groups: https://github.com/theislab/scanpy/tree/master/scanpy/tools/rank_genes_groups.py\n\n\nInstallation\n------------\n\nIf you use Windows or Mac OS X and do not have Python 3.5 or 3.6, download and install Miniconda_ (see below). If you use Linux, use your package manager to obtain a current Python distribution.\n\nGet `releases on PyPI <https://pypi.python.org/pypi/scanpy>`__ via::\n\n  pip3 install scanpy\n\nTo work with the latest version on `GitHub <https://github.com/theislab/scanpy>`__: clone the repository \u2013 green button on top of the page \u2013 and ``cd`` into its root directory. To install with symbolic links (stay up to date with your cloned version after you update with ``git pull``) call::\n\n    pip3 install -e .\n\nYou can now ``import scanpy.api as sc`` anywhere on your system and work with the command ``scanpy`` on the command-line.\n\n\nInstalling Miniconda\n~~~~~~~~~~~~~~~~~~~~\n\nAfter downloading Miniconda_, in a unix shell (Linux, Mac), run\n\n.. code:: shell\n\n    cd DOWNLOAD_DIR\n    chmod +x Miniconda3-latest-VERSION.sh\n    ./Miniconda3-latest-VERSION.sh\n\nand accept all suggestions. Either reopen a new terminal or ``source ~/.bashrc`` on Linux/ ``source ~/.bash_profile`` on Mac. The whole process takes just a couple of minutes.\n\n.. _Miniconda: http://conda.pydata.org/miniconda.html\n\nTrouble shooting\n~~~~~~~~~~~~~~~~\n\nIf you do not have sudo rights (you get a ``Permission denied`` error)::\n\n    pip install --user scanpy\n\nOn MacOS, you probably need to install the C core of igraph via homebrew first\n\n- ``brew install igraph``\n- If python-igraph still fails to install, see `here <https://stackoverflow.com/questions/29589696/problems-compiling-c-core-of-igraph-with-python-2-7-9-anaconda-2-2-0-on-mac-osx>`__ or consider installing gcc via ``brew install gcc --without-multilib`` and exporting ``export CC=\"/usr/local/Cellar/gcc/X.x.x/bin/gcc-X\"; export CXX=\"/usr/local/Cellar/gcc/X.x.x/bin/gcc-X\"``, where ``X`` and ``x`` refers to the version of ``gcc``; in my case, the path reads ``/usr/local/Cellar/gcc/6.3.0_1/bin/gcc-6``.\n\n\nReferences\n----------\n\n.. [Amir13] Amir *et al.* (2013),\n   *viSNE enables visualization of high dimensional single-cell data and reveals phenotypic heterogeneity of leukemia*,\n   `Nature Biotechnology <https://doi.org/10.1038/nbt.2594>`__.\n\n.. [Angerer16] Angerer *et al.* (2016),\n   *destiny \u2013 diffusion maps for large-scale single-cell data in R*,\n   `Bioinformatics <https://doi.org/10.1093/bioinformatics/btv715>`__.\n\n.. [Blondel08] Blondel *et al.* (2008),\n   *Fast unfolding of communities in large networks*,\n   `J. Stat. Mech. <https://doi.org/10.1088/1742-5468/2008/10/P10008>`__.   \n\n.. [Coifman05] Coifman *et al.* (2005),\n   *Geometric diffusions as a tool for harmonic analysis and structure definition of data: Diffusion maps*,\n   `PNAS <https://doi.org/10.1038/nmeth.3971>`__.\n\n.. [Csardi06] Csardi *et al.* (2006),\n   *The igraph software package for complex network researc*,\n   `InterJournal Complex Systems <http://igraph.org>`__.\n\n   \n.. [Ester96] Ester *et al.* (1996),\n   *A Density-Based Algorithm for Discovering Clusters in Large Spatial Databases with Noise*,\n   `Proceedings of the 2nd International Conference on Knowledge Discovery and Data Mining,\n   Portland, OR <http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.121.9220>`__.\n\n.. [Fruchterman91] Fruchterman & Reingold (1991),\n   *Graph drawing by force-directed placement*,\n   `Software: Practice & Experience <http://doi.org:10.1002/spe.4380211102>`__.\n\n.. [Hagberg08] Hagberg *et al.* (2008),\n   *Exploring Network Structure, Dynamics, and Function using NetworkX*,\n   `Scipy Conference <http://conference.scipy.org/proceedings/SciPy2008/paper_2/>`__.\n\n.. [Haghverdi15] Haghverdi *et al.* (2015),\n   *Diffusion maps for high-dimensional single-cell analysis of differentiation data*,\n   `Bioinformatics <https://doi.org/10.1093/bioinformatics/btv325>`__.\n\n.. [Haghverdi16] Haghverdi *et al.* (2016),\n   *Diffusion pseudotime robustly reconstructs branching cellular lineages*,\n   `Nature Methods <https://doi.org/10.1038/nmeth.3971>`__.\n\n.. [Huber15] Huber *et al.* (2015),\n   *Orchestrating high-throughput genomic analysis with Bioconductor*,\n   `Nature Methods <https://doi.org/10.1038/nmeth.3252>`__.\n\n.. [Krumsiek10] Krumsiek *et al.* (2010),\n   *Odefy \u2013 From discrete to continuous models*,\n   `BMC Bioinformatics <https://doi.org/10.1186/1471-2105-11-233>`__.\n\n.. [Krumsiek11] Krumsiek *et al.* (2011),\n   *Hierarchical Differentiation of Myeloid Progenitors Is Encoded in the Transcription Factor Network*,\n   `PLoS ONE <https://doi.org/10.1371/journal.pone.0022649>`__.\n\n.. [Levine15] Levine *et al.* (2015),\n   *Data-Driven Phenotypic Dissection of AML Reveals Progenitor--like Cells that Correlate with Prognosis*,\n   `Cell <https://doi.org/10.1016/j.cell.2015.05.047>`__.\n   \n.. [Maaten08] Maaten & Hinton (2008),\n   *Visualizing data using t-SNE*,\n   `JMLR <http://www.jmlr.org/papers/v9/vandermaaten08a.html>`__.\n\n.. [Satija15] Satija *et al.* (2015),\n   *Spatial reconstruction of single-cell gene expression data*,\n   `Nature Biotechnology <https://doi.org/10.1038/nbt.3192>`__.\n\n.. [Moignard15] Moignard *et al.* (2015),\n   *Decoding the regulatory network of early blood development from single-cell gene expression measurements*,\n   `Nature Biotechnology <https://doi.org/10.1038/nbt.3154>`__.\n\n.. [Pedregosa11] Pedregosa *et al.* (2011),\n   *Scikit-learn: Machine Learning in Python*,\n   `JMLR <http://www.jmlr.org/papers/v12/pedregosa11a.html>`__.\n\n.. [Paul15] Paul *et al.* (2015),\n   *Transcriptional Heterogeneity and Lineage Commitment in Myeloid Progenitors*,\n   `Cell <https://doi.org/10.1016/j.cell.2015.11.013>`__.\n\n.. [Traag17] Traag (2017),\n   *Louvain*,\n   `GitHub <https://doi.org/10.5281/zenodo.35117>`__.\n   \n.. [Ulyanov16] Ulyanov (2016),\n   *Multicore t-SNE*,\n   `GitHub <https://github.com/DmitryUlyanov/Multicore-TSNE>`__.\n\n.. [Weinreb17] Weinreb *et al.* (2016),\n   *SPRING: a kinetic interface for visualizing high dimensional single-cell expression data*,\n   `bioRXiv <https://doi.org/10.1101/090332>`__.\n\n.. [Wittmann09] Wittmann *et al.* (2009),\n   *Transforming Boolean models to continuous models: methodology and application to T-cell receptor signaling*,\n   `BMC Systems Biology <https://doi.org/10.1186/1752-0509-3-98>`__.\n\n.. [Wolf17] Wolf *et al* (2017),\n   TBD.\n\n.. [Zheng17] Zheng *et al.* (2017),\n   *Massively parallel digital transcriptional profiling of single cells*,\n   `Nature Communications <https://doi.org/10.1038/ncomms14049>`__.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/theislab/scanpy",
    "keywords": "",
    "license": "BSD-3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scanpy",
    "platform": "",
    "project_url": "https://pypi.org/project/scanpy/",
    "release_url": "https://pypi.org/project/scanpy/0.2.6/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Single-Cell Analysis in Python.",
    "version": "0.2.6"
  },
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bd63e8a131498c76f3971e80640f05c0",
          "sha256": "3941922c380486514d5da9f47dc455194ac01284e4c311576d69490224d03913"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.1-cp35-cp35m-macosx_10_6_x86_64.whl",
        "has_sig": false,
        "md5_digest": "bd63e8a131498c76f3971e80640f05c0",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 186869,
        "upload_time": "2017-07-24T09:29:35",
        "url": "https://files.pythonhosted.org/packages/3c/ee/2994d26c802420029f65a300f704bf2bb633e586bb6fe439f5d04652d9ba/scanpy-0.2.1-cp35-cp35m-macosx_10_6_x86_64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d7b524e66f61fa8649b6a0fbafc42dc9",
          "sha256": "a9d49405bac51ca47bdb7aa00af4a48223004a723da31521b548b9c6cc4dc261"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.1-cp36-cp36m-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "d7b524e66f61fa8649b6a0fbafc42dc9",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "size": 225669,
        "upload_time": "2017-07-24T11:50:48",
        "url": "https://files.pythonhosted.org/packages/31/92/5babaea6aed7085834ec56f7601418617b4fa0c0eaa6f0f470a71b6c2b86/scanpy-0.2.1-cp36-cp36m-manylinux1_x86_64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b2c4691b415e58eb5108757d464267e7",
          "sha256": "03c6c6bea9af5b0d1f65a8cd111ef3802d8c1f6e40ed56dfa05aeea1bd8dad5c"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b2c4691b415e58eb5108757d464267e7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 201495,
        "upload_time": "2017-07-24T09:29:39",
        "url": "https://files.pythonhosted.org/packages/da/33/bc5a7a75978e783e01780f1710e9061f74d7dc182c8a33f1d57179df3c95/scanpy-0.2.1.tar.gz"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f2d431f548f45fcee8906b8410b75f5d",
          "sha256": "028c60d3da54be181725a7782b7cceace5974e1467cf461055de90da3d3f25e2"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.3-cp35-cp35m-macosx_10_6_x86_64.whl",
        "has_sig": false,
        "md5_digest": "f2d431f548f45fcee8906b8410b75f5d",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 186923,
        "upload_time": "2017-07-24T15:03:55",
        "url": "https://files.pythonhosted.org/packages/33/01/10eb692e1499f40bccb15af9b268726e227a3ba04ec5e1102aba65f7c413/scanpy-0.2.3-cp35-cp35m-macosx_10_6_x86_64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a8f89c0ece93bd628aee2c478504da04",
          "sha256": "1a94784f88c9e28f8345c76c944d59b871858048a1a8b66a51f8c7dfbcc833e8"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.3-cp36-cp36m-manylinux1_x86_64.whl",
        "has_sig": false,
        "md5_digest": "a8f89c0ece93bd628aee2c478504da04",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "size": 225721,
        "upload_time": "2017-07-25T07:25:46",
        "url": "https://files.pythonhosted.org/packages/d9/49/b4cc7b3aaa9a81e5d92cc9c706af0bd9e5eecc5d55e4cd2c0fb5e0cc816b/scanpy-0.2.3-cp36-cp36m-manylinux1_x86_64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1ff653952e6abe66851aabda84e41dc4",
          "sha256": "b3770d01d8579f9c738ba64196ac8304049ef15b5415a1157229104fcacf5b3c"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1ff653952e6abe66851aabda84e41dc4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 201526,
        "upload_time": "2017-07-24T15:03:57",
        "url": "https://files.pythonhosted.org/packages/a1/d5/3701d2f84b50996883e1e7b2076da7beb01d2a394353f575d5866cca1f46/scanpy-0.2.3.tar.gz"
      }
    ],
    "0.2.3.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d3a017d1a942f272acc464a3ee4c84b4",
          "sha256": "054fb64c7fb9935b4f688b58ed5464eff6e3ee547673238f0e537bef94d3adac"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.3.4-cp35-cp35m-macosx_10_6_x86_64.whl",
        "has_sig": false,
        "md5_digest": "d3a017d1a942f272acc464a3ee4c84b4",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 187680,
        "upload_time": "2017-07-25T15:49:56",
        "url": "https://files.pythonhosted.org/packages/af/1e/c75a9afa88fd8008c5f63caf3d29816d2d18b396ec02736d43a69cb576c9/scanpy-0.2.3.4-cp35-cp35m-macosx_10_6_x86_64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3d97fa460780c9985f3074bf88d22738",
          "sha256": "8e81fc2e7402664f3040a40d24489282069b23700ee9786789989d72ec259a40"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "3d97fa460780c9985f3074bf88d22738",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 202412,
        "upload_time": "2017-07-25T15:49:58",
        "url": "https://files.pythonhosted.org/packages/a3/78/245dcc1d2975a595f9673e87f922e4577875d678d12806c0b19ca4f766ee/scanpy-0.2.3.4.tar.gz"
      }
    ],
    "0.2.3.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c075a25b7b6740a004ecf8630fa2a8e8",
          "sha256": "092a439730191fae1fca01599c884def3bd913d5108df8866686699b5f0ea626"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.3.5-cp35-cp35m-macosx_10_6_x86_64.whl",
        "has_sig": false,
        "md5_digest": "c075a25b7b6740a004ecf8630fa2a8e8",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 187666,
        "upload_time": "2017-07-25T16:03:53",
        "url": "https://files.pythonhosted.org/packages/cc/b8/58cfb064ea87677eb5119bec7b0a2386d695adc36bd5fd5892363094095b/scanpy-0.2.3.5-cp35-cp35m-macosx_10_6_x86_64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "14e8957a2cc24e192d4e5d5b01df46e0",
          "sha256": "2ac4daf472fcf13c48d4a8a8803684b3d5f12036b45375f5e717f68cfb86157c"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "14e8957a2cc24e192d4e5d5b01df46e0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 202396,
        "upload_time": "2017-07-25T16:03:55",
        "url": "https://files.pythonhosted.org/packages/2b/b8/2b8b1af1883251ea7831bae91af7d8680455b8c4b9d8c472c7ca2526f678/scanpy-0.2.3.5.tar.gz"
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9d7f3ed2f707093d5a387384bb8d99cf",
          "sha256": "42760d8a2202ad8df7895dd1e70295e152be2cf3f8d9c63a9c44ab6f751bda39"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.4-cp35-cp35m-macosx_10_6_x86_64.whl",
        "has_sig": false,
        "md5_digest": "9d7f3ed2f707093d5a387384bb8d99cf",
        "packagetype": "bdist_wheel",
        "python_version": "cp35",
        "size": 188862,
        "upload_time": "2017-07-27T14:28:26",
        "url": "https://files.pythonhosted.org/packages/1a/ed/3ddf26974e617be88a3854880e1248ee92fa3632d3e8c23cd865dfa644fb/scanpy-0.2.4-cp35-cp35m-macosx_10_6_x86_64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a6f67cd421223f5efd67c720cc0e4fa3",
          "sha256": "bc9c033bbd57392f56625e6ec7898a5d49ac8d5b2c14596790826db3f73ffc91"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.4-cp36-cp36m-macosx_10_7_x86_64.whl",
        "has_sig": false,
        "md5_digest": "a6f67cd421223f5efd67c720cc0e4fa3",
        "packagetype": "bdist_wheel",
        "python_version": "cp36",
        "size": 181548,
        "upload_time": "2017-07-27T14:28:32",
        "url": "https://files.pythonhosted.org/packages/3d/52/851c93f77e802f7a7df631c6ba5f40682fd3ee3c05c23b1430f03ba704cb/scanpy-0.2.4-cp36-cp36m-macosx_10_7_x86_64.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e72787b333f3f232336db6b99cc166b5",
          "sha256": "d63e0be88155a2fc02a20fc3fe3c29bf6beb8b709e84c9a2cae82a4080bb3e1f"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e72787b333f3f232336db6b99cc166b5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 203130,
        "upload_time": "2017-07-27T14:28:34",
        "url": "https://files.pythonhosted.org/packages/0a/cb/72affead9c3e60e2d635b59c22775773dd8ea09691c7dcc86995c13608c3/scanpy-0.2.4.tar.gz"
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "37f98b249478809c6a5b7943894a9f34",
          "sha256": "623608a73f2a7c05515b0964b33abe5ff9a3dabf757f4d0d50c80837d50ad964"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "37f98b249478809c6a5b7943894a9f34",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 204263,
        "upload_time": "2017-07-31T23:55:16",
        "url": "https://files.pythonhosted.org/packages/41/4d/a82fcdc0fc47eca450145c9fa026a4551434bdd74d7de352536cad41cfc3/scanpy-0.2.5.tar.gz"
      }
    ],
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c3165d9d3e3e1c8f804087a5511b9886",
          "sha256": "fbfb8c0d9c8418890e02e920b54fb2ad2a6412081709a44c26af0647a07d129a"
        },
        "downloads": 0,
        "filename": "scanpy-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "c3165d9d3e3e1c8f804087a5511b9886",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 204669,
        "upload_time": "2017-08-04T10:31:34",
        "url": "https://files.pythonhosted.org/packages/7a/58/77f3b4b257eb1c176eb41a7bf8f215d5ad65971ff400633dbdec9599ef6a/scanpy-0.2.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c3165d9d3e3e1c8f804087a5511b9886",
        "sha256": "fbfb8c0d9c8418890e02e920b54fb2ad2a6412081709a44c26af0647a07d129a"
      },
      "downloads": 0,
      "filename": "scanpy-0.2.6.tar.gz",
      "has_sig": false,
      "md5_digest": "c3165d9d3e3e1c8f804087a5511b9886",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 204669,
      "upload_time": "2017-08-04T10:31:34",
      "url": "https://files.pythonhosted.org/packages/7a/58/77f3b4b257eb1c176eb41a7bf8f215d5ad65971ff400633dbdec9599ef6a/scanpy-0.2.6.tar.gz"
    }
  ]
}