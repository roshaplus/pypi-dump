{
  "info": {
    "author": "S. Andrew Sheppard",
    "author_email": "andrew@wq.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 1.6",
      "Framework :: Django :: 1.7",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Swapper\n=======\n\nDjango Swappable Models - No longer only for auth.User!\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSwapper is an unofficial API for the\n`undocumented <https://code.djangoproject.com/ticket/19103>`__ but very\npowerful Django feature: swappable models. Swapper facilitates\nimplementing arbitrary swappable models in your own reusable apps.\n\n|Latest PyPI Release| |Release Notes| |License| |GitHub Stars| |GitHub\nForks| |GitHub Issues|\n\n|Travis Build Status| |Python Support| |Django Support|\n\nMotivation\n----------\n\nSuppose your reusable app has two related tables:\n\n.. code:: python\n\n    from django.db import models\n    class Parent(models.Model):\n        name = models.TextField()\n\n    class Child(models.Model):\n        name = models.TextField()\n        parent = models.ForeignKey(Parent)\n\nSuppose further that you want to allow the user to subclass either or\nboth of these models and supplement them with their own additional\nfields. You could use Abstract classes (e.g. ``BaseParent`` and\n``BaseChild``) for this, but then you would either need to:\n\n1. Avoid putting the foreign key on ``BaseChild`` and tell the user they\n   need to do it.\n2. Put the foreign key on ``BaseChild``, but make ``Parent`` a concrete\n   model that can't be swapped\n3. Use swappable models, together with ``ForeignKeys`` that read the\n   swappable settings.\n\nThis third approach is taken by Django to facilitate `swapping the\nauth.User\nmodel <https://docs.djangoproject.com/en/1.10/topics/auth/customizing/#auth-custom-user>`__.\nThe ``auth.User`` swappable code was implemented in a generic way that\nallows it to be used for any model. Although this capability is\ncurrently `undocumented <https://code.djangoproject.com/ticket/19103>`__\nwhile any remaining issues are being sorted out, it has proven to be\nvery stable and useful in our experience.\n\nSwapper is essentially a simple API wrapper around this existing\nfunctionality. Note that Swapper is primarily a tool for library\nauthors; users of your reusable app generally should not need to know\nabout Swapper in order to use it. (See the notes on `End User\nDocumentation <#end-user-documentation>`__ below.)\n\nReal-World Example\n~~~~~~~~~~~~~~~~~~\n\nSwapper is used extensively in the `vera <http://wq.io/vera>`__\nextension to `wq.db <http://wq.io/wq.db>`__. vera provides `7\ninter-related models <https://github.com/wq/vera#models>`__, each of\nwhich can be swapped out for custom implementations. (Swapper actually\nstarted out as part of\n`wq.db.patterns <http://wq.io/docs/about-patterns>`__, but was extracted\nfor more general-purpose use.)\n\nCreating a Reusable App\n-----------------------\n\nFirst, make sure you have ``swapper`` installed. If you are publishing\nyour reusable app as a Python package, be sure to add ``swapper`` to\nyour project's dependencies (e.g. ``setup.py``) to ensure that users of\nyour app don't have errors integrating it.\n\n.. code:: bash\n\n    pip3 install swapper\n\nExtending the above example, you might create two abstract base classes\nand corresponding default implementations:\n\n.. code:: python\n\n    # reusableapp/models.py\n    from django.db import models\n    import swapper\n\n    class BaseParent(models.Model):\n        # minimal base implementation ...\n        class Meta:\n            abstract = True\n\n    class Parent(BaseParent):\n        # default (swappable) implementation ...\n        class Meta:\n           swappable = swapper.swappable_setting('reusableapp', 'Parent')\n\n    class BaseChild(models.Model):\n        parent = models.ForeignKey(swapper.get_model_name('reusableapp', 'Parent'))\n        # minimal base implementation ...\n        class Meta:\n            abstract = True\n\n    class Child(BaseChild):\n        # default (swappable) implementation ...\n        class Meta:\n           swappable = swapper.swappable_setting('reusableapp', 'Child')\n\nLoading Swapped Models\n~~~~~~~~~~~~~~~~~~~~~~\n\nIn your reusable views and other functions, always use the swapper\ninstead of importing swappable models directly. This is because you\nmight not know whether the user of your app is using your default\nimplementation or their own version.\n\n.. code:: python\n\n    # reusableapp/views.py\n\n    # Might work, might not\n    # from .models import Parent\n\n    import swapper\n    Parent = swapper.load_model(\"reusableapp\", \"Parent\")\n    Child = swapper.load_model(\"reusableapp\", \"Child\")\n\n    def view(request, *args, **kwargs):\n        qs = Parent.objects.all()\n        # ...\n\n    Note: ``swapper.load_model()`` is the general equivalent of\n    `get\\_user\\_model() <https://docs.djangoproject.com/en/1.10/topics/auth/customizing/#referencing-the-user-model>`__\n    and subject to the same constraints: e.g. it should not be used\n    until after the model system has fully initialized.\n\nMigration Scripts\n~~~~~~~~~~~~~~~~~\n\nSwapper can also be used in Django 1.7+ migration scripts to facilitate\ndependency ordering and foreign key references. To use this feature in\nyour library, generate a migration script with ``makemigrations`` and\nmake the following changes. In general, users of your library should not\nneed to make any similar changes to their own migration scripts. The one\nexception is if you have multiple levels of swappable models with\nforeign keys pointing to each other (as in\n`vera <http://wq.io/vera>`__).\n\n.. code:: diff\n\n      # reusableapp/migrations/0001_initial.py\n\n      from django.db import models, migrations\n    < from django.conf import settings\n    > import swapper\n\n      class Migration(migrations.Migration):\n\n          dependencies = [\n    <          migrations.swappable_dependency(settings.REUSABLEAPP_PARENT_MODEL),\n    >          swapper.dependency('reusableapp', 'Parent')\n          ]\n\n          operations = [\n              migrations.CreateModel(\n                  name='Child',\n                  fields=[\n                      ('id', models.AutoField(auto_created=True, serialize=False, primary_key=True, verbose_name='ID')),\n                  ],\n                  options={\n    <                 'swappable': 'REUSABLEAPP_CHILD_MODEL',\n    >                 'swappable': swapper.swappable_setting('reusableapp', 'Child'),\n                  },\n                  bases=(models.Model,),\n              ),\n              migrations.CreateModel(\n                  name='Parent',\n                  fields=[\n                      ('id', models.AutoField(auto_created=True, serialize=False, primary_key=True, verbose_name='ID')),\n                  ],\n                  options={\n    <                 'swappable': 'REUSABLEAPP_PARENT_MODEL',\n    >                 'swappable': swapper.swappable_setting('reusableapp', 'Parent'),\n                  },\n                  bases=(models.Model,),\n              ),\n              migrations.AddField(\n                  model_name='child',\n                  name='parent',\n    <             field=models.ForeignKey(to=settings.REUSABLEAPP_PARENT_MODEL),\n    >             field=models.ForeignKey(to=swapper.get_model_name('reusableapp', 'Parent')),\n                  preserve_default=True,\n              ),\n          ]\n\nEnd User Documentation\n----------------------\n\nWith the above setup, the user of your app can override one or both\nmodels in their own app. You might provide them with an example like\nthis:\n\n.. code:: python\n\n    # myapp/models.py\n    from reusableapp.models import BaseParent\n    class Parent(BaseParent):\n        # custom implementation ...\n\nThen, tell your users to update their settings to trigger the swap.\n\n.. code:: python\n\n    # myproject/settings.py\n    REUSABLEAPP_PARENT_MODEL = \"myapp.Parent\"\n\nThe goal is to make this process just as easy for your end user as\n`swapping the auth.User\nmodel <https://docs.djangoproject.com/en/1.10/topics/auth/customizing/#auth-custom-user>`__\nis. As with ``auth.User``, there are some important caveats that you may\nwant to inform your users about.\n\nThe biggest issue is that your users will probably need to define the\nswapped model settings **before creating any migrations** for their\nimplementation of ``myapp``. Due to key assumptions made within Django's\nmigration infrastructure, it is difficult to start out with a default\n(non-swapped) model and then later to switch to a swapped implementation\nwithout doing some migration hacking. This is somewhat awkward - as your\nusers will most likely want to try out your default implementation\nbefore deciding to customize it. Unfortunately, there isn't an easy\nworkaround due to how the swappable setting is currently implemented in\nDjango core. This will likely be addressed in future Django versions\n(see `#10 <https://github.com/wq/django-swappable-models/issues/10>`__\nand `Django ticket\n#25313 <https://code.djangoproject.com/ticket/25313>`__).\n\nAPI Documentation\n-----------------\n\nHere is the full API for ``swapper``, which you may find useful in\ncreating your reusable app code. End users of your library should\ngenerally not need to reference this API.\n\n+---------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| function                                          | purpose                                                                                                                                                                                                                                                                                                 |\n+===================================================+=========================================================================================================================================================================================================================================================================================================+\n| ``swappable_setting(app_label, model)``           | Generates a swappable setting name for the provided model (e.g. ``\"REUSABLEAPP_PARENT_MODEL\"``)                                                                                                                                                                                                         |\n+---------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| ``is_swapped(app_label, model)``                  | Determines whether or not a given model has been swapped. (Returns the model name if swapped, otherwise ``False``)                                                                                                                                                                                      |\n+---------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| ``get_model_name(app_label, model)``              | Gets the name of the model the swappable model has been swapped for (or the name of the original model if not swapped.)                                                                                                                                                                                 |\n+---------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| ``get_model_names(app_label, models)``            | Match a list of model names to their swapped versions. All of the models should be from the same app (though their swapped versions need not be).                                                                                                                                                       |\n+---------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| ``load_model(app_label, model, required=True)``   | Load the swapped model class for a swappable model (or the original model if it hasn't been swapped). If your code can function without the specified model, set ``required = False``.                                                                                                                  |\n+---------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| ``dependency(app_label, model)``                  | Generate a dependency tuple for use in Django 1.7+ migrations.                                                                                                                                                                                                                                          |\n+---------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| ``set_app_prefix(app_label, prefix)``             | Set a custom prefix for swappable settings (the default is the upper case ``app_label``). Used in `wq.db <http://wq.io/wq.db>`__ to make all of the swappable settings start with ``\"WQ\"`` (e.g. ``WQ_FILE_MODEL`` instead of ``FILES_FILE_MODEL``). This should be set at the top of your models.py.   |\n+---------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| ``join(app_label, model)``, ``split(model)``      | Utilities for splitting and joining ``\"app.Model\"`` strings and ``(\"app\", \"Model\")`` tuples.                                                                                                                                                                                                            |\n+---------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n.. |Latest PyPI Release| image:: https://img.shields.io/pypi/v/swapper.svg\n   :target: https://pypi.python.org/pypi/swapper\n.. |Release Notes| image:: https://img.shields.io/github/release/wq/django-swappable-models.svg\n   :target: https://github.com/wq/django-swappable-models/releases\n.. |License| image:: https://img.shields.io/pypi/l/swapper.svg\n   :target: https://github.com/wq/django-swappable-models/blob/master/LICENSE\n.. |GitHub Stars| image:: https://img.shields.io/github/stars/wq/django-swappable-models.svg\n   :target: https://github.com/wq/django-swappable-models/stargazers\n.. |GitHub Forks| image:: https://img.shields.io/github/forks/wq/django-swappable-models.svg\n   :target: https://github.com/wq/django-swappable-models/network\n.. |GitHub Issues| image:: https://img.shields.io/github/issues/wq/django-swappable-models.svg\n   :target: https://github.com/wq/django-swappable-models/issues\n.. |Travis Build Status| image:: https://img.shields.io/travis/wq/django-swappable-models.svg\n   :target: https://travis-ci.org/wq/django-swappable-models\n.. |Python Support| image:: https://img.shields.io/pypi/pyversions/swapper.svg\n   :target: https://pypi.python.org/pypi/swapper\n.. |Django Support| image:: https://img.shields.io/badge/Django-1.6%2C%201.7%2C%201.8%2C%201.9%2C%201.10%2C%201.11-blue.svg\n   :target: https://pypi.python.org/pypi/swapper",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/wq/django-swappable-models",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "swapper",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/swapper/",
    "release_url": "https://pypi.org/project/swapper/1.1.0/",
    "requires_python": null,
    "summary": "The unofficial Django swappable models API.",
    "version": "1.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "01a9d591effc057ff30067ae54c53097",
          "sha256": "02baad60bf34dac9e1c82c9def4313b22e4e8c7e562b29fcf9061551e3010264"
        },
        "downloads": 1922,
        "filename": "swapper-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "01a9d591effc057ff30067ae54c53097",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3450,
        "upload_time": "2014-01-09T01:35:48",
        "url": "https://files.pythonhosted.org/packages/30/cf/5729481e28efd66db61e404bdc0e02bd4827a18654be9bd81cefe0e18f54/swapper-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1efc03c4b4ec45232b490681873e879e",
          "sha256": "267f1aa0f34f0e1e95e294ad6e7c25248e7c4915fc4ad2ad4ff88d06eb83be95"
        },
        "downloads": 3367,
        "filename": "swapper-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1efc03c4b4ec45232b490681873e879e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3811,
        "upload_time": "2014-01-09T17:45:33",
        "url": "https://files.pythonhosted.org/packages/c2/db/72c9566d612c6aa452c3e07dc032f918c52e858ca4cb48dfab0981196641/swapper-0.1.1.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c36e92d23188c20c9e9a71cb296609cc",
          "sha256": "828c930d3600d1a44c0cb6204783fdfcc31b0d12eb78e358bbb93cd68d0f5131"
        },
        "downloads": 2190,
        "filename": "swapper-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c36e92d23188c20c9e9a71cb296609cc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4083,
        "upload_time": "2014-09-12T22:02:12",
        "url": "https://files.pythonhosted.org/packages/3c/90/fce87c2ad102477996554dfa436e055d25bb265947e938391a7b1b9b2483/swapper-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d04f05b3620dbf8aa90af8a27c2a42bf",
          "sha256": "76a43fb60b1c2c41a0a5ab327423535c80f03e737dd613d83234fba9593e9aaf"
        },
        "downloads": 4366,
        "filename": "swapper-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d04f05b3620dbf8aa90af8a27c2a42bf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5554,
        "upload_time": "2014-11-17T19:48:11",
        "url": "https://files.pythonhosted.org/packages/ea/3e/c66d6e5607f1c1eb7e5759532cb6b239b5e483630d03ec492322d08f3247/swapper-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3b057b8a3ed7c444decdc26068a63d75",
          "sha256": "411dfbdb52f73505f01c8e9611111d364bb0df41d6bb8e902dc1d86c61d07049"
        },
        "downloads": 5231,
        "filename": "swapper-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3b057b8a3ed7c444decdc26068a63d75",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6134,
        "upload_time": "2015-06-15T20:15:35",
        "url": "https://files.pythonhosted.org/packages/6c/77/3a6a7efe5c5c52579748eb29e5b20d8cabdcb34e7d7fd0241615835178b1/swapper-0.2.2.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3b6b10bda1bc30d4f7f928a2046565ae",
          "sha256": "55bd1fb3aa61d1e18e9f3582da086cc30975d4788499d151326f2fcebdbbbcc0"
        },
        "downloads": 1820,
        "filename": "swapper-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3b6b10bda1bc30d4f7f928a2046565ae",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6245,
        "upload_time": "2015-11-16T20:33:27",
        "url": "https://files.pythonhosted.org/packages/33/fe/b45eb38e066fa999d4e59770642b1d50069280bb8341d3d24c64973d01cd/swapper-0.3.0.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d5bcbdd8ad0c6c3c7278bc689b0d0b90",
          "sha256": "907861b223844d6fa77669f96f2eda96303002d69b4ea941f447fa08d43cc19c"
        },
        "downloads": 2959,
        "filename": "swapper-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d5bcbdd8ad0c6c3c7278bc689b0d0b90",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7340,
        "upload_time": "2016-08-26T18:09:11",
        "url": "https://files.pythonhosted.org/packages/23/c1/1147572c0094e5d1f452ef6457ed7a95dee3b159baabadb1dde2bc404d10/swapper-1.0.0.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f177707043a81c973fc071252546b5ff",
          "sha256": "bcd162c85d3906f6aabd3970e854041b4327e67d0fc96d07e234a85d96131425"
        },
        "downloads": 0,
        "filename": "swapper-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f177707043a81c973fc071252546b5ff",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8046,
        "upload_time": "2017-05-11T02:06:33",
        "url": "https://files.pythonhosted.org/packages/98/a1/44d48ab9e004eb64bb429f8421986ac1c4d6e48c38cd98bb9e0ff543b116/swapper-1.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f177707043a81c973fc071252546b5ff",
        "sha256": "bcd162c85d3906f6aabd3970e854041b4327e67d0fc96d07e234a85d96131425"
      },
      "downloads": 0,
      "filename": "swapper-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "f177707043a81c973fc071252546b5ff",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8046,
      "upload_time": "2017-05-11T02:06:33",
      "url": "https://files.pythonhosted.org/packages/98/a1/44d48ab9e004eb64bb429f8421986ac1c4d6e48c38cd98bb9e0ff543b116/swapper-1.1.0.tar.gz"
    }
  ]
}