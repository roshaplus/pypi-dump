{
  "info": {
    "author": "Nervana Systems",
    "author_email": "info@nervanasys.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Environment :: Console :: Curses",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: System :: Distributed Computing"
    ],
    "description": "neon\r\n====\r\n\r\n`neon <https://github.com/NervanaSystems/neon>`__ is NErvana's pythON\r\nbased Deep Learning Framework! We have designed it with the following\r\nfunctionality in mind:\r\n\r\n-  YAML for easy model specification (inspired by\r\n   `pylearn2 <https://github.com/lisa-lab/pylearn2>`__)\r\n-  Python for easily adding models and support for many data formats\r\n-  Support for commonly used models: convnets, MLPs, RNNs, LSTMs,\r\n   autoencoders, RBMs\r\n-  Support for common learning rules, activation functions and cost\r\n   functions\r\n-  Comparing performance of alternate numeric representations with\r\n   32-bit floating point (fp32) for Deep Learning\r\n-  Support for using\r\n   `spearmint <https://github.com/JasperSnoek/spearmint>`__ for\r\n   hyperparameter optimization\r\n-  Swappable hardware backends: write code once and then deploy on CPUs,\r\n   GPUs, or Nervana hardware\r\n\r\nFeatures that are unique to neon include:\r\n\r\n-  Tight integration with\r\n   `nervanagpu <https://github.com/NervanaSystems/nervanagpu>`__ kernels\r\n   for fp16 and fp32\r\n   (`benchmarks <https://github.com/soumith/convnet-benchmarks>`__) on\r\n   Maxwell GPUs. These are the fastest implementations of the benchmark\r\n   deep networks.\r\n-  4.3s/macrobatch on AlexNet on Titan X (Full run on 1 GPU ~ 45 hrs)\r\n-  Out of the box `fp16 AlexNet\r\n   model <https://github.com/NervanaSystems/neon/blob/master/examples/convnet/i1k-alexnet-fp16.yaml>`__ that has the same\r\n   accuracy as `fp32 <https://github.com/NervanaSystems/neon/blob/master/examples/convnet/i1k-alexnet-fp32.yaml>`__\r\n-  Integration with our fork\r\n   (`cudanet <https://github.com/NervanaSystems/cuda-convnet2>`__) of\r\n   Alex Krizhevsky's cuda-convnet2 library for Kepler GPU support\r\n-  Support for our distributed processor (Nervana Engine\u2122) for deep\r\n   learning.\r\n\r\nWe use neon internally at Nervana to solve our customers' problems\r\nacross many `domains <http://www.nervanasys.com/products/>`__. We are\r\nhiring across several roles. Apply\r\n`here <http://www.nervanasys.com/careers/>`__!\r\n\r\nGetting started\r\n---------------\r\n\r\nBasic information to get started is below. Please consult the `full\r\ndocumentation <http://neon.nervanasys.com/docs/latest>`__ for more\r\ninformation.\r\n\r\nInstallation\r\n~~~~~~~~~~~~\r\n\r\n-  `Local install and\r\n   dependencies <http://neon.nervanasys.com/docs/latest/installation.html>`__\r\n-  Cloud-based access (`email us <mailto:demo@nervanasys.com>`__ for an\r\n   account)\r\n\r\nQuick Install\r\n~~~~~~~~~~~~~\r\n\r\nOn a Mac OSX or Linux box enter the following to download and install\r\nneon, and use it to train your first multi-layer perceptron or\r\nconvolutional neural networks below.\r\n\r\n::\r\n\r\n    git clone https://github.com/NervanaSystems/neon.git\r\n    cd neon\r\n    sudo make install\r\n\r\nThe above will install neon system-wide. If you don't have sufficient\r\nprivileges or would prefer an isolated installation, see our\r\n`virtualenv <http://neon.nervanasys.com/docs/latest/installation.htm#virtualenv>`__\r\nbased install.\r\n\r\nThere are several examples built-in to neon in the ``examples``\r\ndirectory for a user to get started. The YAML format is plain-text and\r\ncan be edited to change various aspects of the model. See the\r\n`ANNOTATED\\_EXAMPLE.yaml <https://github.com/NervanaSystems/neon/blob/master/examples/ANNOTATED_EXAMPLE.yaml>`__ for some\r\nof the definitions and possible choices.\r\n\r\nRunning a simple MNIST model (on CPU)\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n::\r\n\r\n    neon examples/mlp/mnist-small.yaml\r\n\r\nRunning an Alexnet model (on GPU)\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nIn `fp32 <https://github.com/NervanaSystems/neon/blob/master/examples/convnet/i1k-alexnet-fp32.yaml>`__:\r\n\r\n::\r\n\r\n    # for nervangpu (requires Maxwell GPUs)\r\n    neon --gpu nervanagpu examples/convnet/i1k-alexnet-fp32.yaml\r\n\r\n    # for cudanet (works with Kepler or Maxwell GPUs)\r\n    neon --gpu cudanet examples/convnet/i1k-alexnet-fp32.yaml\r\n\r\nIn `fp16 <https://github.com/NervanaSystems/neon/blob/master/examples/convnet/i1k-alexnet-fp16.yaml>`__:\r\n\r\n::\r\n\r\n    neon --gpu nervanagpu examples/convnet/i1k-alexnet-fp16.yaml\r\n\r\nCode organization\r\n~~~~~~~~~~~~~~~~~\r\n\r\n::\r\n\r\n    backends    --- implementation of different hardware backends\r\n    datasets    --- support for common datasets CIFAR-10, ImageNet, MNIST etc.\r\n    diagnostics --- hooks to measure timing and numeric ranges\r\n    hyperopt    --- hooks for hyperparameter optimization\r\n    layers      --- layer code\r\n    models      --- model code\r\n    optimizers  --- learning rules\r\n    transforms  --- activation & cost functions\r\n    metrics     --- performance evaluation metrics\r\n\r\nDocumentation\r\n~~~~~~~~~~~~~\r\n\r\nThe complete documentation for neon is available\r\n`here <http://neon.nervanasys.com/docs/latest>`__. Some useful starting\r\npoints are:\r\n\r\n-  `Using\r\n   neon <http://neon.nervanasys.com/docs/latest/using_framework.html>`__\r\n-  `API <http://neon.nervanasys.com/docs/latest/api.html>`__\r\n-  `Developing for\r\n   neon <http://neon.nervanasys.com/docs/latest/developing_framework.html>`__\r\n\r\nIssues\r\n~~~~~~\r\n\r\nFor any bugs or feature requests please:\r\n\r\n1. Search the open and closed `issues\r\n   list <https://github.com/NervanaSystems/neon/issues>`__ to see if\r\n   we're already working on what you have uncovered.\r\n2. Check that your issue/request has already been addressed in our\r\n   `Frequently Asked Questions\r\n   (FAQ) <http://neon.nervanasys.com/docs/latest/faq.html>`__\r\n3. File a new `issue <https://github.com/NervanaSystems/neon/issues>`__\r\n   or submit a new `pull\r\n   request <https://github.com/NervanaSystems/neon/pulls>`__ if you have\r\n   some code you'd like to contribute\r\n\r\nMachine learning OPerations (MOP) Layer\r\n---------------------------------------\r\n\r\nThe\r\n`MOP <http://neon.nervanasys.com/docs/latest/ml_operational_layer.html>`__\r\nis an abstraction layer for Nervana's system software and hardware which\r\nincludes the Nervana Engine, a custom distributed processor for deep\r\nlearning.\r\n\r\nThe MOP consists of linear algebra and other operations required by deep\r\nlearning. Some MOP operations are currently exposed in neon, while\r\nothers, such as distributed primitives, will be exposed in later\r\nversions as well as in other forthcoming Nervana libraries.\r\n\r\nDefining models in a MOP-compliant manner guarantees they will run on\r\nall provided backends. It also provides a way for existing Deep Learning\r\nframeworks such as `theano <https://github.com/Theano/Theano>`__,\r\n`torch <https://github.com/torch/torch7>`__, and\r\n`caffe <https://github.com/BVLC/caffe>`__ to interface with the Nervana\r\nEngine.\r\n\r\nUpcoming libraries\r\n------------------\r\n\r\nWe have separate, upcoming efforts on the following fronts:\r\n\r\n-  Distributed models\r\n-  Automatic differentiation\r\n-  Integration with Nervana Cloud\u2122\r\n\r\nLicense\r\n-------\r\n\r\nWe are releasing `neon <https://github.com/NervanaSystems/neon>`__ and\r\n`nervanagpu <https://github.com/NervanaSystems/nervanagpu>`__ under an\r\nopen source `Apache 2.0 <https://www.apache.org/licenses/LICENSE-2.0>`__\r\nLicense. We welcome you to `contact us <mailto:info@nervanasys.com>`__\r\nwith your use cases.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://www.nervanasys.com",
    "keywords": "",
    "license": "License :: OSI Approved :: Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nervananeon",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/nervananeon/",
    "release_url": "https://pypi.org/project/nervananeon/0.8.1/",
    "requires_python": null,
    "summary": "Deep learning framework with configurable backends",
    "version": "0.8.1"
  },
  "releases": {
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8d5f1bc7ab42d36c05ba6d9a98b2818a",
          "sha256": "310052781db4fa49daeb1f940b9c7d72dec7668b87df5536ce8f310d5d229559"
        },
        "downloads": 2274,
        "filename": "nervananeon-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8d5f1bc7ab42d36c05ba6d9a98b2818a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 334150,
        "upload_time": "2015-05-04T22:59:25",
        "url": "https://files.pythonhosted.org/packages/08/78/2d87a9c14b22caa2e53b6f6db42ec5d1f7b660279f01e4519b27535d7b30/nervananeon-0.8.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8d5f1bc7ab42d36c05ba6d9a98b2818a",
        "sha256": "310052781db4fa49daeb1f940b9c7d72dec7668b87df5536ce8f310d5d229559"
      },
      "downloads": 2274,
      "filename": "nervananeon-0.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "8d5f1bc7ab42d36c05ba6d9a98b2818a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 334150,
      "upload_time": "2015-05-04T22:59:25",
      "url": "https://files.pythonhosted.org/packages/08/78/2d87a9c14b22caa2e53b6f6db42ec5d1f7b660279f01e4519b27535d7b30/nervananeon-0.8.1.tar.gz"
    }
  ]
}