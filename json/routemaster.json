{
  "info": {
    "author": "Thread",
    "author_email": "tech@thread.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Natural Language :: English",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Office/Business"
    ],
    "description": "\nRoutemaster\n===========\n\n\n.. image:: https://circleci.com/gh/thread/routemaster.svg?style=shield&circle-token=3973777302b4f7f00f5b9eb1c07e3c681ea94f35\n   :target: https://circleci.com/gh/thread/routemaster\n   :alt: CircleCI\n\n.. image:: https://coveralls.io/repos/github/thread/routemaster/badge.svg?branch=master\n   :target: https://coveralls.io/github/thread/routemaster?branch=master\n   :alt: Coverage Status\n\n\nState machines as a service.\n\n(The *master* of *routes* through a state machine.)\n\nRoutemaster targets Python 3.6 and above, and requires Postgres.\n\nUseful Links\n\"\"\"\"\"\"\"\"\"\"\"\"\n\n\n* `Glossary <docs/glossary.md>`_\n* `Development Setup <docs/getting_started.md>`_\n\nPlease note, the below is currently intended to get everyone on the same page\nabout what Routemaster is, rather than as a list of current features. When we\npublish Routemaster this may form the basis of a blog post, or the introduction\nto the documentation.\n\nMotivation for Routemaster\n--------------------------\n\nRoutemaster was born at `Thread <https://www.thread.com/>`_ out of the need for a\ncomplex state machine for our email drip-feed system.\n\nThe drip feed had to be able to integrate data entered by users, recommendations\ncreated by our recommendations service, realtime insights generated by our\nrealtime data pipeline (Bazalgette) and A/B tests being run by our split testing\nsystem (\\ `Jacquard <https://github.com/prophile/jacquard>`_\\ ).\n\nWe also came to build Routemaster as a replacement for a third party service\nthat was a poor fit for us given our significant complexity and data consistency\nrequirements, and that created significant operational complexity in\nunderstanding the system when it went wrong.\n\nWith all of these separate services needing to integrate with the drip feed, a\nbacklog of ideas to test in the drip feed, and the need for a system that we\ncould understand at a level above our previous implementation, we decided to\nbuild a generic state machine service that would be able to scale to our future\nrequirements.\n\nDesign\n------\n\nRoutemaster is designed to be understandable. At any given time, the location of\na `label <docs/glossary.md#label>`_\\ , the reason for it not progressing to the next state, its\ncurrent planned route through the state machine, and the whole shape of the\nstate machine, should be easy to inspect, and easy to understand.\n\nAs a result, no external system is able to directly change the state of a label\nin a state machine. The most an external client can do is push more\n`metadata <docs/glossary.md#metadata>`_ into the system that *may* change the state of a label,\ndepending on how the state machine is configured.\n\nRoutemaster is also designed to operate in a multi-service environment, where\nmultiple systems may want to affect the route of a label through a state\nmachine. This is where the benefits of not allowing clients to explicitly move a\nlabel pay off.\n\nThis README refers to the state machine configuration. The behaviour of\nRoutemaster is configured with a YAML file, an example of which can be found in\n``example.yaml``.\n\nState machines\n^^^^^^^^^^^^^^\n\nA state machine is a series of states, with defined transitions between states,\nand conditions for when those transitions are allowed to occur.\n\nA single Routemaster instance can manage multiple state machines.\n\nLabels\n^^^^^^\n\nLabels are the core element that moves through a state machine. A label is\nsimply a string. It is assumed that clients to Routemaster will use labels that\nmake sense for their use-cases, such as database primary keys, UUIDs, etc.\nRoutemaster treats the label as opaque data and imparts no semantics onto it.\n\nGiven that a label is the only piece of data required for a state machine to\nwork, it follows that labels must be unique within a state machine. However\nthere are no such requirements between multiple state machines\u2014in fact\ninternally the primary key on the labels table is composed of the label name\nand the state machine's name.\n\nStates\n^^^^^^\n\nStates in a state machine can either be an `\\ *action* <docs/glossary.md#action>`_ or a\n`\\ *gate* <docs/glossary.md#gate>`_.\n\nActions\n~~~~~~~\n\nAn action has an associated URL that is called on entry into the state, in order\nfor an external system to perform the action associated with that state.\nRoutemaster will keep re-trying requests to the URL until it receives a 200\nseries status code, or until a certain number of attempts have been made. At\nthis point the label will be marked as \"errored\" and no longer retried.\n\nRequests are made as HTTP ``POST`` requests with the label metadata included as\nJSON encoded body data.\n\nOnce a successful request has been made the label moves out of the action state\nand directly into the next state.\n\nGates\n~~~~~\n\nA gate is a state that that may prevent a label from progressing until an `exit\ncondition <docs/glossary.md#exit-condition>`_ is met. Routemaster will evaluate the exit condition\nin response to configurable triggers, and advance any label that passes the\ncondition.\n\nExit conditions\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nExit conditions are small programs which execute with a [context][context]\nformed of the metadata attached to a label, optional dynamic data fetched from\ndata feeds, and system provided data including the current date and time, and\nthe time that has passed since the label entered the current state.\n\nAll exit conditions evaluate to a either a truthy value, in which case the label\nprogresses to the next state, or to a falsy value, in which the label remains at\nthe gate.\n\nAn example of an exit condition is:\n\n.. code-block::\n\n   metadata.has_recommendations and\n   12h has passed since system.entered_state and\n   system.time >= 18:30\n\nThis will prevent the label (in this example a user) from progressing until\nanother system has pushed ``{\"has_recommendations\": true}`` into the metadata, and\nthe label has been in this state for at least 12 hours (in this case so we space\nemails apart far enough), and the time is after 18:30, as we know that is a time\nwhen emails have a good impact.\n\nThis exit condition does not itself mean that the next state, an action to send\nan email, will be performed at 18:30, for that we will need the correct trigger\nconfiguration.\n\nTriggers\n\"\"\"\"\"\"\"\"\n\nTriggers define when an exit condition will be evaluated, and the label moved to\nthe next state if necessary.\n\nThere are 3 types of trigger:\n\n\n* **Metadata** \u2014 triggers whenever the metadata for a label is updated at a given path.\n* **Time** \u2014 triggers each day at the given time.\n* **Interval** \u2014 triggers every given interval (i.e. 1 hour, 5 minutes)\n\nData feeds\n^^^^^^^^^^\n\nIn some cases it might not be easy or appropriate to *push* data into\nRoutemaster, so Routemaster is also able to *pull* data in from external\nsources.\n\nData feeds are defined at the state machine level, and are formed of a pair of a\nname and a URL. The string ``<label>`` in the URL will be replaced with the\ncorrect label when requested. For example:\n\n.. code-block:: yaml\n\n   feeds:\n     - name: split_tests\n       url: http://localhost:8001/user/<label>\n     - name: extra_config\n       url: http://localhost:8002/<state_machine>\n\nWhen evaluating the any exit condition in the state machine that uses any value\nbelow the path ``feeds.split_tests``\\ , for the user with the label ``88625``\\ ,\nRoutemaster will issue an HTTP ``GET`` to the URL\n``http://localhost:8001/user/88625``\\ , accepting a JSON encoded response and\nproviding it in the exit condition context at the path ``feeds.split_tests``.\n\n*Note that because feed data is pulled in, it cannot be used in metadata\ntriggers, in fact Routemaster refers to feed data and metadata separately in\norder to make this distinction as clear as possible.*\n\nTransitions\n^^^^^^^^^^^\n\nTransitions from a state to the next state(s) are defined in ``next`` blocks in\nthe config file. There are two types of transition:\n\n**Constant transitions** are exactly what they sound like, they always\ntransition a label to the same next state.\n\n**Context transitions** use the value at a path in the label's context to\ndetermine the destination. This is the same context as used in the exit\ncondition evaluation that will have taken place immediately beforehand.\n\nThese transitions map a set of possible values at the path in the context to a\nset of state names. Multiple values may map to the same next state, but the same\nvalue cannot map to multiple states. A default state must also be provided for\ncases where the value does not match any of the given options.\n\n*Note that it is left up to the person configuring the state machine to\nexhaustively cover all the possible values for the key at the given path if they\nwish to do so. Since these values could come from data feeds at evaluation time,\nno validation for exhaustiveness is done.*\n\nThere is also an implicit third type of transition, the null transition, which\nresults from not specifying any other transition. This creates an end state that\ncannot be progressed from.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/thread/routemaster",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "routemaster",
    "platform": "",
    "project_url": "https://pypi.org/project/routemaster/",
    "release_url": "https://pypi.org/project/routemaster/1.0.10/",
    "requires_dist": [
      "dataclasses",
      "networkx",
      "requests",
      "freezegun",
      "schedule",
      "gunicorn (>=19.7)",
      "alembic (>=0.9.6)",
      "python-dateutil",
      "sqlalchemy",
      "psycopg2",
      "flask",
      "jsonschema (>=2.6)",
      "pyyaml",
      "click"
    ],
    "requires_python": "",
    "summary": "State machines as a service.",
    "version": "1.0.10"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cacd0e68fc3dbfe7a975103b35b9d882",
          "sha256": "81e78a271e9c190031c2eaa320226e40fbe444cd3d9b72bc7efb6337c43df6e7"
        },
        "downloads": -1,
        "filename": "routemaster-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cacd0e68fc3dbfe7a975103b35b9d882",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 2099,
        "upload_time": "2017-12-05T16:47:52",
        "url": "https://files.pythonhosted.org/packages/26/cb/50003eeec31b3e1e0a19f4c47f0664cf316b1f9699443ba05f79f330803d/routemaster-0.0.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "aa4690e1b63f656a441580598c64442b",
          "sha256": "d80f852503860bfc33cd0e44de8805d29f97e7c9bfce10d186026142d9f03a90"
        },
        "downloads": -1,
        "filename": "routemaster-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "aa4690e1b63f656a441580598c64442b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1229,
        "upload_time": "2017-12-05T16:47:54",
        "url": "https://files.pythonhosted.org/packages/ec/5d/233ec41e5a2c0aec2542978d2a93266f8a810cac504ee334155d10621c05/routemaster-0.0.1.tar.gz"
      }
    ],
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "36a5e82e8647c4436131e472348ac4ef",
          "sha256": "d54feade516d14114500b0ac6d31416d023c897de0ebddf016b198398ad9fd2e"
        },
        "downloads": -1,
        "filename": "routemaster-1.0.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "36a5e82e8647c4436131e472348ac4ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 53543,
        "upload_time": "2018-02-11T13:09:10",
        "url": "https://files.pythonhosted.org/packages/11/65/37352955df1096d2b5977d08de1dba23dadcb7db86ba0f83162b0f35a265/routemaster-1.0.10-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "704d9d60c01a2aa7c74d27e66b7b9bc3",
          "sha256": "32a7437a7919cc5db209b036ff52aa5a127501adaa277a50da116630a35811f5"
        },
        "downloads": -1,
        "filename": "routemaster-1.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "704d9d60c01a2aa7c74d27e66b7b9bc3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35971,
        "upload_time": "2018-02-11T13:09:11",
        "url": "https://files.pythonhosted.org/packages/de/90/18c5d8b01a6319872db035548f6c15afad2db1e1c894722400445b673f6d/routemaster-1.0.10.tar.gz"
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3fa51ab0e0e3a6afb3cef6aa0f957d1f",
          "sha256": "a38a68eaf9ad231bee80e5135bc4bb8865cb4582ce22fb8092df3f0de7d9e407"
        },
        "downloads": -1,
        "filename": "routemaster-1.0.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3fa51ab0e0e3a6afb3cef6aa0f957d1f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 53465,
        "upload_time": "2018-02-11T12:50:22",
        "url": "https://files.pythonhosted.org/packages/b7/13/10d816f9461f7571c98ca277b4ff6238103d7f5eda1626136fa3f1745373/routemaster-1.0.9-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "5533fda6cfad61ba26fa9597a14a18f7",
          "sha256": "afb345fbda3f8c757d16186b50d023db0c34c6e32fc501b212dea3edb9cba353"
        },
        "downloads": -1,
        "filename": "routemaster-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "5533fda6cfad61ba26fa9597a14a18f7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39056,
        "upload_time": "2018-02-11T12:50:24",
        "url": "https://files.pythonhosted.org/packages/ec/9b/bdf0a1e848701e69c1a322d5a2cdc6a92b83d628e87b68a0fe828ecfe6a2/routemaster-1.0.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "36a5e82e8647c4436131e472348ac4ef",
        "sha256": "d54feade516d14114500b0ac6d31416d023c897de0ebddf016b198398ad9fd2e"
      },
      "downloads": -1,
      "filename": "routemaster-1.0.10-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "36a5e82e8647c4436131e472348ac4ef",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 53543,
      "upload_time": "2018-02-11T13:09:10",
      "url": "https://files.pythonhosted.org/packages/11/65/37352955df1096d2b5977d08de1dba23dadcb7db86ba0f83162b0f35a265/routemaster-1.0.10-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "704d9d60c01a2aa7c74d27e66b7b9bc3",
        "sha256": "32a7437a7919cc5db209b036ff52aa5a127501adaa277a50da116630a35811f5"
      },
      "downloads": -1,
      "filename": "routemaster-1.0.10.tar.gz",
      "has_sig": false,
      "md5_digest": "704d9d60c01a2aa7c74d27e66b7b9bc3",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 35971,
      "upload_time": "2018-02-11T13:09:11",
      "url": "https://files.pythonhosted.org/packages/de/90/18c5d8b01a6319872db035548f6c15afad2db1e1c894722400445b673f6d/routemaster-1.0.10.tar.gz"
    }
  ]
}