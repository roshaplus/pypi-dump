{
  "info": {
    "author": "Brian T. Park",
    "author_email": "brian@xparks.net",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "BigQuery Schema Generator\n=========================\n\nSummary\n-------\n\nThis script generates the BigQuery schema from the data records on the\nSTDIN. The BigQuery data importer uses only the first 100 lines when the\nschema auto-detection feature is enabled. In contrast, this script uses\nall data records to generate the schema.\n\nUsage:\n\n::\n\n    $ generate_schema.py < file.data.json > file.schema.json\n\nBackground\n----------\n\nData can be imported into\n`BigQuery <https://cloud.google.com/bigquery/>`__ using the\n`bq <https://cloud.google.com/bigquery/bq-command-line-tool>`__ command\nline tool. It accepts a number of data formats including CSV or\nnewline-delimited JSON. The data can be loaded into an existing table or\na new table can be created during the loading process. The structure of\nthe table is defined by its\n`schema <https://cloud.google.com/bigquery/docs/schemas>`__. The table's\nschema can be defined manually or the schema can be\n`auto-detected <https://cloud.google.com/bigquery/docs/schema-detect#auto-detect>`__.\n\nWhen the auto-detect feature is used, the BigQuery data importer\nexamines only the first 100 records of the input data. In many cases,\nthis is sufficient because the data records were dumped from another\ndatabase and the exact schema of the source table was known. However,\nfor data extracted from a service (e.g. using a REST API) the record\nfields could have been organically added at later dates. In this case,\nthe first 100 records do not contain fields which are present in later\nrecords. The **bq load** auto-detection fails and the data fails to\nload.\n\nThe **bq load** tool does not support the ability to process the entire\ndataset to determine a more accurate schema. This script fills in that\ngap. It processes the entire dataset given in the STDIN and outputs the\nBigQuery schema in JSON format on the STDOUT. This schema file can be\nfed back into the **bq load** tool to create a table that is more\ncompatible with the data fields in the input dataset.\n\nUsage\n-----\n\nThe ``generate_schema.py`` script accepts a newline-delimited JSON data\nfile on the STDIN. (CSV is not supported currently.) It scans every\nrecord in the input data file to deduce the table's schema. It prints\nthe JSON formatted schema file on the STDOUT:\n\n::\n\n    $ generate_schema.py < file.data.json > file.schema.json\n\nThe schema file can be used in the **bq** command using:\n\n::\n\n    $ bq load --schema file.schema.json mydataset.mytable file.data.json\n\nwhere ``mydataset.mytable`` is the target table in BigQuery.\n\nA useful flag for **bq load** is ``--ignore_unknown_values``, which\ncauses ``bq load`` to ignore fields in the input data which are not\ndefined in the schema. When ``generate_schema.py`` detects an\ninconsistency in the definition of a particular field in the input data,\nit removes the field from the schema definition. Without the\n``--ignore_unknown_values``, the **bq load** fails when the inconsistent\ndata record is read.\n\nAfter the BigQuery table is loaded, the schema can be retrieved using:\n\n::\n\n    $ bq show --schema mydataset.mytable | python -m json.tool\n\n(The ``python -m json.tool`` command will pretty-print the JSON\nformatted schema file.) This schema file should be identical to\n``file.schema.json``.\n\nOptions\n~~~~~~~\n\nThe ``generate_schema.py`` script supports a handful of command line\nflags:\n\n-  ``--keep_nulls`` Print the schema for null values, empty arrays or\n   empty records.\n-  ``--debugging_interval lines`` Number of lines between heartbeat\n   debugging messages. Default 1000.\n-  ``--debugging_map`` Print the metadata schema map for debugging\n   purposes\n\nNull Values\n^^^^^^^^^^^\n\nNormally when the input data file contains a field which has a null,\nempty array or empty record as its value, the field is suppressed in the\nschema file. This flag enables this field to be included in the schema\nfile. In other words, for the data file:\n\n::\n\n    { \"s\": null, \"a\": [], \"m\": {} }\n\nthe schema would normally be:\n\n::\n\n    []\n\nWith the ``keep_nulls``, the resulting schema file will be:\n\n::\n\n    [\n      {\n        \"mode\": \"REPEATED\",\n        \"type\": \"STRING\",\n        \"name\": \"a\"\n      },\n      {\n        \"mode\": \"NULLABLE\",\n        \"fields\": [\n          {\n            \"mode\": \"NULLABLE\",\n            \"type\": \"STRING\",\n            \"name\": \"__unknown__\"\n          }\n        ],\n        \"type\": \"RECORD\",\n        \"name\": \"d\"\n      },\n      {\n        \"mode\": \"NULLABLE\",\n        \"type\": \"STRING\",\n        \"name\": \"s\"\n      }\n    ]\n\nExample:\n\n::\n\n    $ generate_schema.py --keep_nulls < file.data.json > file.schema.json\n\nDebugging Interval\n^^^^^^^^^^^^^^^^^^\n\nBy default, the ``generate_schema.py`` script prints a short progress\nmessage every 1000 lines of input data. This interval can be changed\nusing the ``--debugging_interval`` flag.\n\n::\n\n    $ generate_schema.py --debugging_interval 1000 < file.data.json > file.schema.json\n\nDebugging Map\n^^^^^^^^^^^^^\n\nInstead of printing out the BigQuery schema, the ``--debugging_map``\nprints out the bookkeeping metadata map which is used internally to keep\ntrack of the various fields and theirs types that was inferred using the\ndata file. This flag is intended to be used for debugging.\n\n::\n\n    $ generate_schema.py --debugging_map < file.data.json > file.schema.json\n\nExamples\n--------\n\nHere is an example of a single JSON data record on the STDIN:\n\n::\n\n    $ ./generate_schema.py\n    { \"s\": \"string\", \"b\": true, \"i\": 1, \"x\": 3.1, \"t\": \"2017-05-22T17:10:00-07:00\" }\n    ^D\n    INFO:root:Processed 1 lines\n    [\n      {\n        \"mode\": \"NULLABLE\",\n        \"name\": \"b\",\n        \"type\": \"BOOLEAN\"\n      },\n      {\n        \"mode\": \"NULLABLE\",\n        \"name\": \"i\",\n        \"type\": \"INTEGER\"\n      },\n      {\n        \"mode\": \"NULLABLE\",\n        \"name\": \"s\",\n        \"type\": \"STRING\"\n      },\n      {\n        \"mode\": \"NULLABLE\",\n        \"name\": \"t\",\n        \"type\": \"TIMESTAMP\"\n      },\n      {\n        \"mode\": \"NULLABLE\",\n        \"name\": \"x\",\n        \"type\": \"FLOAT\"\n      }\n    ]\n\nIn most cases, the data file will be stored in a file:\n\n::\n\n    cat > file.data.json\n    { \"a\": [1, 2] }\n    { \"i\": 3 }\n    ^D\n\n    $ ./generate_schema.py < file.data.json > file.schema.json\n    INFO:root:Processed 2 lines\n\n    $ cat file.schema.json\n    [\n      {\n        \"mode\": \"REPEATED\",\n        \"name\": \"a\",\n        \"type\": \"INTEGER\"\n      },\n      {\n        \"mode\": \"NULLABLE\",\n        \"name\": \"i\",\n        \"type\": \"INTEGER\"\n      }\n    ]\n\nSystem Requirements\n-------------------\n\nThis project was developed on Ubuntu 17.04 using Python 3.5. It is\nlikely compatible with other python environments but I have not yet\nverified those.\n\nAuthor\n------\n\nCreated by Brian T. Park (brian@xparks.net).\n\nLicense\n-------\n\nApache License 2.0",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/bxparks/bigquery-schema-generator",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bigquery-schema-generator",
    "platform": "",
    "project_url": "https://pypi.org/project/bigquery-schema-generator/",
    "release_url": "https://pypi.org/project/bigquery-schema-generator/0.1/",
    "requires_dist": [],
    "requires_python": "~=3.5",
    "summary": "BigQuery schema generator",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "24cf9cc9d0c5f9f043cb304612367bc2",
          "sha256": "f72de9d303d89997b7d83f1ecc046ff7d089a76f8ce864e55d80336c1c296eba"
        },
        "downloads": -1,
        "filename": "bigquery-schema-generator-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "24cf9cc9d0c5f9f043cb304612367bc2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8142,
        "upload_time": "2018-01-02T21:23:28",
        "url": "https://files.pythonhosted.org/packages/e1/db/d9a03a7e36a708489a655effd59a3cb5fcc13f8dd2aba74a319d65d7e03a/bigquery-schema-generator-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "24cf9cc9d0c5f9f043cb304612367bc2",
        "sha256": "f72de9d303d89997b7d83f1ecc046ff7d089a76f8ce864e55d80336c1c296eba"
      },
      "downloads": -1,
      "filename": "bigquery-schema-generator-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "24cf9cc9d0c5f9f043cb304612367bc2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8142,
      "upload_time": "2018-01-02T21:23:28",
      "url": "https://files.pythonhosted.org/packages/e1/db/d9a03a7e36a708489a655effd59a3cb5fcc13f8dd2aba74a319d65d7e03a/bigquery-schema-generator-0.1.tar.gz"
    }
  ]
}