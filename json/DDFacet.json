{
  "info": {
    "author": "Cyril Tasse",
    "author_email": "cyril.tasse@obspm.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Astronomy"
    ],
    "description": "DDFacet\n###################################\nA facet-based radio imaging package\n    .. image:: https://jenkins.meqtrees.net/job/DDFacet_master_cron/badge/icon\n        :alt: Build status\n        :target: https://jenkins.meqtrees.net/job/DDFacet_master_cron\n\n    .. image:: https://img.shields.io/aur/license/yaourt.svg\n        :alt: AUR\n\nCopyright (C) 2013-2016  Cyril Tasse, l'Observatoire de Paris,\nSKA South Africa, Rhodes University\n\nThis program is free software; you can redistribute it and/or\nmodify it under the terms of the GNU General Public License\nas published by the Free Software Foundation; either version 2\nof the License, or (at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\n(Users/Recommended) Docker-based installation\n==========================================================\n1. Simply pull the latest DDFacet and build the Docker image::\n\n    git clone git@github.com:cyriltasse/DDFacet.git\n    cd DDFacet\n    docker build -t ddf .\n\n2. You should now be able to run DDFacet in a container. Note that your parsets must have filenames relative to the mounted volume inside the container, for instance::\n\n    docker run --shm-size 6g -v /scratch/TEST_DATA:/mnt ddf /mnt/test-master1.parset\n\n**Important: if you ran ``git submodule update --init --recursive`` before you may need to remove the cached SkyModel before building the docker image with ``git rm --cached SkyModel``**\n\n(Users) Virtual environment and pip:\n==========================================================\nWe prefer that users use DDFacet though the Docker. However, if this is not available (e.g. cluster\nenvironments) we recommend you use a virtual environment. If you install it directly into your system packages you're\non your own -- be warned!!\n\n1. You need to add in the KERN 2 ppa if you don't already have it::\n\n        add-apt-repository -y -s ppa:kernsuite/kern-2\n\n2. Install each of the debian dependencies. The latest full list of apt dependencies can be be found in the Dockerfile <https://github.com/cyriltasse/DDFacet/blob/master/Dockerfile>\n\n3. Create a virtual environment somewhere on your system and activate::\n\n        virtualenv --system-site-packages ddfacet\n        source ddfacet/bin/activate\n        \n\n   Adding the `--system-site-packages` directive ensures that the virtualenv has access to system packages (such as meqtrees).\n\n4. Then, install directly from the Python Package Index (PyPI) using pip - ensure your venv is activated::\n\n        pip install -U pip setuptools\n        pip install DDFacet --force-reinstall -U\n\n5. When you're done with your imaging business::\n\n        deactivate\n        \n(Users/Optional) Montblanc and pyMORESANE installation\n==========================================================\nMontblanc <https://github.com/ska-sa/montblanc> requires DDFacet to be installed in a virtual environment. **This section requires the DDFacet virtual environment to be activated and that you are in the DDFacet directory.**::\n    \n        (ddfvenv) $ pip install -r requirements.txt\n\n(Users/Troubleshooting) Configure max shared memory\n==========================================================\nRunning DDFacet on large images requires a lot of shared memory. Most systems limit the amount of shared memory to about 10%. To increase this limit add the following line to your ``/etc/default/tmpfs`` file::\n\n        SHM_SIZE=100%\n\nA restart will be required for this change to reflect. If you would prefer a once off solution execute the following line::\n\n        sudo mount -o remount,size=100% /run/shm\n\nIt may also be necessary to run the following to remove the kernel security limit on mlock pinning. Without this things may\nbe slower than usual::\n\n        echo \"*        -   memlock     unlimited\" > /etc/security/limits.conf\n\n(Developers/Recommended): setting up your dev environment\n==========================================================\n**NOTE:Setup your virtual environment just as specified in the user section above. Ensure you activate!**\n\nTo setup your local development environment navigate clone DDFacet and run::\n\n        (ddfvenv) $ git clone https://github.com/cyriltasse/DDFacet\n        (ddfvenv) $ cd DDFacet\n        (ddfvenv) $ git submodule update --init --recursive\n        (ddfvenv) $ cd ..\n        (ddfvenv) $ pip install -e DDFacet/\n        #To (re-)build the backend in your checked out folder:\n        (ddfvenv) $ cd DDFacet\n        (ddfvenv) $ python setup.py build\n\n**IMPORTANT NOTE: You may need to remove the development version before running PIP when installing**\n\n(Developers/Debugging) Build a few libraries (by hand with custom flags)\n==========================================================\nYou can build against custom versions of libraries such is libPython and custom numpy versions.\nTo do this modify setup.cfg. Find and modify the following lines::\n\n    compopts=-DENABLE_NATIVE_TUNING=ON -ENABLE_FAST_MATH=ON -DCMAKE_BUILD_TYPE=Release\n    # or -DCMAKE_BUILD_TYPE=RelWithDebInfo for developers: this includes debugging symbols\n    # or -DCMAKE_BUILD_TYPE=Debug to inspect the stacks using kdevelop or something similar\n\n(Developers/Acceptance tests)\n==========================================================\nPaths\n---------------------------------------------------------\nAdd this to your ``.bashrc``::\n\n        export DDFACET_TEST_DATA_DIR=[folder where you keep the acceptance test data and images]\n        export DDFACET_TEST_OUTPUT_DIR=[folder where you want the acceptance test output to be dumped]\n\nTo test your branch against the master branch using Jenkins\n---------------------------------------------------------\nMost of the core use cases will in the nearby future have reference images and an automated acceptance test.\n\nPlease **do not** commit against cyriltasse/master. The correct strategy is to branch/fork and do a pull request on Github\nto merge changes into master. Once you opened a pull request add the following comment: \"ok to test\". This will let the Jenkins server know to start testing. You should see that the pull request and commit statusses shows \"Pending\". If the test succeeds you should see \"All checks have passed\" above the green merge button. Once the code is reviewed it will be merged into the master branch.\n\nTo run the tests on your local machine:\n---------------------------------------------------------\nYou can run the automated tests by grabbing the latest set of measurements and reference images from the web and\nextracting them to the directory you set up in your **DDFACET_TEST_DATA_DIR** environment variable. You can run\nthe automated tests by navigating to your DDFacet directory and running nosetests.\n\nEach of the test cases is labeled by a class name and has reference images and a parset file with the same\nname, ie. if the test case that has failed is called \"TestWidefieldDirty\" the reference images will be called the same. You should investigate the reason for any severe discrepancies between the output of the test case and the images produced by your changed codebase. See the docstring at the top of the class ClassCompareFITSImage for help and\nfilename conventions.\n\nAcceptance test data can be found on the Jenkins server in the **/data/test-data** directory.\n\nAdding more tests and creating new reference images.\n---------------------------------------------------------\nTo resimulate images and add more tests:\nIn the Jenkins server data directory run **make** to resimulate and set up new reference images. This should only be done with the ``origin/master`` branch - not your branch or fork! You should manually verify that all the reference images are correct when you regenerate them. Each time you add a new option to DDFacet also add an option to the makefile in this directory. Once the option is set up in the makefile you can build the reference images on Jenkins.\n\n[tf_pip_install]: <https://www.tensorflow.org/get_started/os_setup#pip_installation>\n\n\n",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/cyriltasse/DDFacet",
    "keywords": null,
    "license": "GNU GPL v2",
    "maintainer": null,
    "maintainer_email": null,
    "name": "DDFacet",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/DDFacet/",
    "release_url": "https://pypi.org/project/DDFacet/0.1.dev3/",
    "requires_python": null,
    "summary": "Facet-based radio astronomy continuum imager",
    "version": "0.1.dev3"
  },
  "releases": {
    "0.1.dev3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "71b1bc0fe9ef8b0291327b58c5895706",
          "sha256": "5628d48d48ce752443b9e7e9e53b6b5696273bb97188be359eddff32c630b53b"
        },
        "downloads": 0,
        "filename": "DDFacet-0.1.dev3-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "71b1bc0fe9ef8b0291327b58c5895706",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 1956656,
        "upload_time": "2017-05-30T21:04:29",
        "url": "https://files.pythonhosted.org/packages/d5/8f/021ddd51da9bf099d5443dd41c2f782642eb535cf28723dedde4570ee907/DDFacet-0.1.dev3-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "fb8b8e4acbd54f23a64a0cb5cd76c038",
          "sha256": "83c8158b3ec449d128b3c9802a9e19e2dff5cc132d0e8543a8874ea6fc68ab16"
        },
        "downloads": 0,
        "filename": "DDFacet-0.1.dev3.tar.gz",
        "has_sig": false,
        "md5_digest": "fb8b8e4acbd54f23a64a0cb5cd76c038",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 480057,
        "upload_time": "2017-05-30T21:04:03",
        "url": "https://files.pythonhosted.org/packages/e4/50/69fe2a27aa5adc900dcf6f65d8f1f567d3bc29562b7e75e9e76a0d5764f8/DDFacet-0.1.dev3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "71b1bc0fe9ef8b0291327b58c5895706",
        "sha256": "5628d48d48ce752443b9e7e9e53b6b5696273bb97188be359eddff32c630b53b"
      },
      "downloads": 0,
      "filename": "DDFacet-0.1.dev3-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "71b1bc0fe9ef8b0291327b58c5895706",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "size": 1956656,
      "upload_time": "2017-05-30T21:04:29",
      "url": "https://files.pythonhosted.org/packages/d5/8f/021ddd51da9bf099d5443dd41c2f782642eb535cf28723dedde4570ee907/DDFacet-0.1.dev3-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "fb8b8e4acbd54f23a64a0cb5cd76c038",
        "sha256": "83c8158b3ec449d128b3c9802a9e19e2dff5cc132d0e8543a8874ea6fc68ab16"
      },
      "downloads": 0,
      "filename": "DDFacet-0.1.dev3.tar.gz",
      "has_sig": false,
      "md5_digest": "fb8b8e4acbd54f23a64a0cb5cd76c038",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 480057,
      "upload_time": "2017-05-30T21:04:03",
      "url": "https://files.pythonhosted.org/packages/e4/50/69fe2a27aa5adc900dcf6f65d8f1f567d3bc29562b7e75e9e76a0d5764f8/DDFacet-0.1.dev3.tar.gz"
    }
  ]
}