{
  "info": {
    "author": "Eddie Antonio Santos",
    "author_email": "easantos@ualberta.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "======================================================\nsentinel \u00ad create sentinel nodes and singleton objects\n======================================================\n\nCreates simple sentinel objects which are the only instance of their own\nanonymous class. As a singleton, there is a guarantee that there will only\never be one instance: they can be safely used with ``pickle`` and ``cPickle``\nalike, as well as being able to be used properly with ``copy.deepcopy()``. In\naddition, a self-documenting ``__repr__`` is provided for free!\n\nUsage\n-----\n\nSentinels_ are singleton_ objects that typically represent some end or\nterminating condition. Some singletons already exist in Python, like ``None``\n``NotImplemented``, and ``Ellipsis``.\n\n\nAll that's needed to create a sentinel is its name::\n\n    >>> import sentinel\n    >>> Nothing = sentinel.create('Nothing')\n    >>> Nothing\n    Nothing\n\nThis by itself is useful when other objects such as ``None``, ``False``,\n``0``, ``-1``, etc.  are entirely valid values. For example, setting default\nvalues when all other values are valid with: ``dict.setdefault()``::\n\n    >>> MissingEntry = sentinel.create('MissingEntry')\n    >>> d = {'stdout': None, 'stdin': 0, 'EOF': -1}\n    >>> [d.setdefault(key, MissingEntry) for key in ('stdin', 'stdout', 'stderr')]\n    [0, None, MissingEntry]\n\nAlternatively, using ``dict.get()`` when fetching values::\n\n    >>> d = {'stdout': None, 'stdin': 0, 'EOF': -1}\n    >>> d.get('stdout', MissingEntry)\n    None\n    >>> d.get('stdin', MissingEntry)\n    0\n    >>> d.get('stderr', MissingEntry)\n    MissingEntry\n\nIt's known immediately which value was missing from the dictionary in a\nself-documenting manner.\n\nAdvanced Usage\n--------------\n\nSentinels may also inherit from base classes, or implement extra methods.\n\nConsider a binary search tree with two kinds of nodes: interior nodes\n(``Node``) which contain some payload and leaves (``Leaf``), which simply\nterminate traversal.\n\nTo create singleton leaf which implements a ``search`` method and an\n``is_leaf`` property, you may provide any extra class attributes in the\n``extra_methods`` keyword argument. The following is a full example of both\nthe singleton ``Leaf`` and its ``Node`` counterpart::\n\n    def _search_leaf(self, key):\n        raise KeyError(key)\n\n    Leaf = sentinel.create('Leaf', extra_methods={\n        'search': _search_leaf,\n        'is_leaf': property(lambda self: True)\n    })\n\n    class Node(object):\n        def __init__(self, key, payload, left=Leaf, right=Leaf):\n            self.left = left\n            self.right = right\n            self.key = key\n            self.payload = payload\n\n        def search(self, key):\n            if key < self.__key:\n                return self.left.search(key)\n            elif key > self.key:\n                return self.right.search(key)\n            else:\n                return self.payload\n\n        is_leaf = property(lambda: false)\n\nExample usage::\n\n    >>> tree = Node(2, 'bar', Node(1, 'foo'), Node(3, 'baz'))\n    >>> tree.search(1)\n    'foo'\n    >>> tree.search(4)\n    Traceback (most recent call last):\n        ...\n    KeyError: 2\n\nAdvanced usage 2\n----------------\n\nAnother usage is inheriting from a tuple, in order to do tuple comparison. For\nexample, consider a scenario where a certain order must be maintained, but\nordering matters. If the key being used to sort is an integer, a plain\n``object`` instance will always sort greater::\n\n    >>> (1, ..., ...) < (object(), None, None)\n    True\n\nNow say we want to encode this in a neat, self-documenting package. This is\ncan be done by create a sentinel that inherits from ``tuple`` and is\ninstantiated with the given tuple::\n\n    arg = (object(), None, None)\n    AlwaysGreater = sentinel.create('AlwaysGreater', (tuple,), {}, args)\n\nThis will call ``tuple((object(), None, None))``. This means the singleton\nwill now behave exactly as expected::\n\n    >>> (1, ..., ...) < AlwaysGreater\n    True\n\n.. _Sentinels: http://en.wikipedia.org/wiki/Sentinel_nodes\n.. _singleton: http://en.wikipedia.org/wiki/Singleton_pattern",
    "docs_url": null,
    "download_url": "https://github.com/eddieantonio/sentinel/tarball/v0.1.1",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/eddieantonio/sentinel",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "sentinel",
    "platform": "any",
    "project_url": "https://pypi.org/project/sentinel/",
    "release_url": "https://pypi.org/project/sentinel/0.1.1/",
    "requires_python": null,
    "summary": "Create sentinel and singleton objects",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a0c07702d81d11a1d72f58b9eaa24072",
          "sha256": "8d0a59adfeced6fe9c8a2add2db35d5e9737769a511a230f2d095ff3be775c9d"
        },
        "downloads": 1802,
        "filename": "sentinel-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a0c07702d81d11a1d72f58b9eaa24072",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3281,
        "upload_time": "2014-08-22T23:37:08",
        "url": "https://files.pythonhosted.org/packages/0e/08/96620cf74ffb5c60a1ad275bc59d909c187d55084a03e3505cdb4e571fb5/sentinel-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "29993a01be2fa1d46a567d745d9c05fe",
          "sha256": "c00ba2a4f240ea4c5414059a696d6e128730272cb2c631b2eff42e86da1f89b3"
        },
        "downloads": 7409,
        "filename": "sentinel-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "29993a01be2fa1d46a567d745d9c05fe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3894,
        "upload_time": "2014-08-23T05:24:12",
        "url": "https://files.pythonhosted.org/packages/2e/12/867f97b68c2a541f1e0de6b3b8ff52a2c2bef8d88228efc885ad07f20968/sentinel-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "29993a01be2fa1d46a567d745d9c05fe",
        "sha256": "c00ba2a4f240ea4c5414059a696d6e128730272cb2c631b2eff42e86da1f89b3"
      },
      "downloads": 7409,
      "filename": "sentinel-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "29993a01be2fa1d46a567d745d9c05fe",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3894,
      "upload_time": "2014-08-23T05:24:12",
      "url": "https://files.pythonhosted.org/packages/2e/12/867f97b68c2a541f1e0de6b3b8ff52a2c2bef8d88228efc885ad07f20968/sentinel-0.1.1.tar.gz"
    }
  ]
}