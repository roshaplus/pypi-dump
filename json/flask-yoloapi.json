{
  "info": {
    "author": "Sander Ferdinand",
    "author_email": "sa.ferdinand@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "# Flask-YoloAPI\n\n![whoop](https://i.imgur.com/xVS3UGq.png)\n\nA small framework for creating simple JSON endpoints.\n\nExample\n-------\n\n```python\nfrom flask_yoloapi import endpoint, parameter\n\n@app.route('/api/login', methods=['GET', 'POST'])\n@endpoint.api(\n    parameter('username', type=str, required=True),\n    parameter('password', type=str, required=True),\n    parameter('remember', type=bool, required=False, default=False)\n)\ndef login(username, password, remember):\n    \"\"\"\n    Logs the user in.\n    :param username: The username of the user\n    :param password: The password of the user\n    :param expiration: Session expiration time in seconds\n    :return: The logged in message!\n    \"\"\"\n    return \"user logged in!\"\n```\n\nThe response:\n\n```javascript\n{\n    data: \"user logged in!\"\n}\n```\n\nUse cases\n-------------\n\n- You don't want to write boilerplate code that involves classes just to make some API routes (flask-restful).\n- You don't want to fish incoming parameters out of `request.args`, or wait, was it `request.form`? No, `request.json` :sleeping:\n- You don't need to hook your endpoints directly to SQLa models.\n- You don't care about providing REST compliancy - you just want somewhat consistent JSON endpoints, damnit!\n\nIn short, this is a simple library for simple JSON endpoints.\n\n\n## Return values\nIn the example above, a string was returned. The following types are also supported:\n\n- `str`, `unicode`, `int`, `float`, `dict`, `list`, `datetime`.\n\n```python\n@app.route('/wishlist')\n@endpoint.api(\n    parameter('category', type=str, required=False)\n)\ndef wishlist(category):\n    if category == \"cars\":\n        return ['volvo xc60', 'mclaren mp4-12c']\n```\n\n```javascript\n{\n    \"data\": [\n        \"volvo xc60\", \n        \"mclaren mp4-12c\"\n    ]\n}\n``` \n\n## HTTP status codes\n\nTo return different status codes, return a 2-length `tuple` with the second index being the status code itself.\n\n```python\n@app.route('/create_foo')\n@endpoint.api()\ndef view_function():\n    return 'created', 201\n```\n\n## Route parameters\n\nYou can still use Flask's route parameters in conjunction with endpoint parameters.\n\n```python\n@app.route('/hello/<name>')\n@endpoint.api(\n    parameter('age', type=int, required=True)\n)\ndef hello(name, age):\n    return {'name': name, 'age': age}\n```\n\n`/hello/sander?age=27`\n\n```javascript\n{\n    \"data\": {\n        \"age\": 27, \n        \"name\": \"sander\"\n    }\n}\n```\n\n## Default values\n\nYou can define default values for endpoint parameters via `default`.\n\n```python\n@app.route('/hello/<name>')\n@endpoint.api(\n    parameter('age', type=int, required=False, default=10)\n)\ndef hello(name, age):\n    return {'name': name, 'age': age}\n```\n`/hello/sander`\n```javascript\n{\n    \"data\": {\n        \"age\": 10, \n        \"name\": \"sander\"\n    }\n}\n```\n\n## Type annotations\n\nParameter types are required, except when type annotations are in use.\n\nA Python 3.5 example:\n\n```python\n@app.route('/hello/', methods=['POST'])\n@endpoint.api(\n    parameter('age', required=True),\n    parameter('name', required=True)\n)\ndef hello(name: str, age: int):\n    return {'name': name, 'age': age}\n```\n\nPython 2 equivalent:\n\n```python\n@app.route('/hello/', methods=['POST'])\n@endpoint.api(\n    parameter('age', type=int, required=True),\n    parameter('name', type=str, required=True)\n)\ndef hello(name, age):\n    return {'name': name, 'age': age}\n```\n\nNote that type annotations are only supported from Python 3.5 and upwards (PEP 484).\n\n## Custom validators\n\nAdditional parameter validation can be done by providing a validator function. This function takes 1 parameter; the input. \n\nAn `Exception` must be raised when the validation proves to be unsuccessful.\n\n```python\ndef custom_validator(value):\n    if value > 120:\n        raise Exception(\"you can't possibly be that old!\")\n\n@app.route('/hello/<name>')\n@endpoint.api(\n    parameter('age', type=int, required=True, validator=custom_validator)\n)\ndef hello(name, age):\n    return {'name': name, 'age': age}\n```\n\n`/hello/sander?age=130`\n\n```javascript\n{\n    \"data\": \"parameter 'age' error: you can't possibly be that old!\"\n}\n```\n\nIf you need more flexibility regarding incoming types use the `flask_yoloapi.types.ANY` type.\n\n## Parameter handling\n\nThis library is rather opportunistic about gathering incoming parameters, as it will check in the following 3 places:\n\n- `request.args`\n- `request.json`\n- `request.form`\n\n## Datetime format\n\nTo output datetime objects in `ISO 8601` format (which are trivial to parse in Javascript via `Date.parse()`), use a custom JSON encoder.\n\n```python\nfrom datetime import date\nfrom flask.json import JSONEncoder\n\nclass ApiJsonEncoder(JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, (date, datetime)):\n            return obj.isoformat()\n        return super(ApiJsonEncoder, self).default(obj)\n\napp = Flask(__name__)\napp.json_encoder = ApiJsonEncoder\n```\n\n\n## Error handling\n\nWhen the view function itself raises an exception, a JSON response is generated that includes:\n\n- The error message\n- Docstring of the view function\n- HTTP 500\n\nThis error response is also generated when endpoint requirements are not met.\n\n```javascript\n{\n    data: \"argument 'password' is required\",\n    docstring: {\n        help: \"Logs the user in.\",\n        return: \"The logged in message!\",\n        params: {\n            username: {\n                help: \"The username of the user\",\n                required: true,\n                type: \"str\"\n                }\n            },\n        ...\n```\n\n\nLicense\n-------------\nMIT.\n\n\n",
    "docs_url": null,
    "download_url": "https://github.com/skftn/flask-yoloapi/archive/master.zip",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/skftn/flask-yoloapi",
    "keywords": "flask api flapi",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "flask-yoloapi",
    "platform": "",
    "project_url": "https://pypi.org/project/flask-yoloapi/",
    "release_url": "https://pypi.org/project/flask-yoloapi/0.0.5/",
    "requires_dist": [
      "flask"
    ],
    "requires_python": "",
    "summary": "Simply the best Flask API library",
    "version": "0.0.5"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f894ce62e0747e48cc47babbf99cdadf",
          "sha256": "d49a298a55017628bb601f66eef2c73e8cf7a8c698661559f82102176cc273f4"
        },
        "downloads": 0,
        "filename": "flask_yoloapi-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f894ce62e0747e48cc47babbf99cdadf",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 10097,
        "upload_time": "2017-09-23T19:41:43",
        "url": "https://files.pythonhosted.org/packages/28/d0/2986dcf0723422decd20d79e88380a82c2a2036383c27dc0de7f43ae4adf/flask_yoloapi-0.0.1-py3-none-any.whl"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "afdaeedb55210d511af814e4ef1d32c0",
          "sha256": "a90527c93ddb7b41a4159c498d682b3178b5a0edc47fbf75d3621c7023f3f73f"
        },
        "downloads": 0,
        "filename": "flask_yoloapi-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "afdaeedb55210d511af814e4ef1d32c0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 13459,
        "upload_time": "2017-09-23T23:25:04",
        "url": "https://files.pythonhosted.org/packages/b5/35/654d5b2737e0f2d8393cf369e31a7fd2490659680de08f2dc178439fb592/flask_yoloapi-0.0.2-py3-none-any.whl"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "68865642e3cade33b41c043ebb1b7386",
          "sha256": "6b49515defaf25adae53136215374f7b326dfcdddd1bec92eacd4cf22716ff15"
        },
        "downloads": 0,
        "filename": "Flask_YoloAPI-0.0.3-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "68865642e3cade33b41c043ebb1b7386",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 10097,
        "upload_time": "2017-09-24T19:42:30",
        "url": "https://files.pythonhosted.org/packages/d9/28/aef770f81992656129340e0571926cc727c2735ba520c629c8d23e24c882/Flask_YoloAPI-0.0.3-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3ace3443d1d238ff486a695229ee50e5",
          "sha256": "2c680fe8baceb0f39e4b5c0cfecde05d7fc347dbe5db041695449a5e48383432"
        },
        "downloads": 0,
        "filename": "Flask_YoloAPI-0.0.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ace3443d1d238ff486a695229ee50e5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 10098,
        "upload_time": "2017-09-24T19:43:49",
        "url": "https://files.pythonhosted.org/packages/99/55/43af6f92946496ff2d233989294ae9ac2750b9a8b4f82ea048d7d3bdd02e/Flask_YoloAPI-0.0.3-py3-none-any.whl"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e44a0f38c2b227d8582610f2ee07a316",
          "sha256": "aecbffca5a4f2b57d4405ca5fd751f587cbe336f68cc9abb7cd2e57158cf774f"
        },
        "downloads": 0,
        "filename": "Flask_YoloAPI-0.0.4-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "e44a0f38c2b227d8582610f2ee07a316",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 10120,
        "upload_time": "2017-09-25T13:31:24",
        "url": "https://files.pythonhosted.org/packages/65/60/7db77793296a93bf4f1ede16d467da9d5dd0794e5036ab4183016d985869/Flask_YoloAPI-0.0.4-py2-none-any.whl"
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7af7d71941fb7bfe49b4722e2172dc3a",
          "sha256": "68f474d6c573f8b9e1555c6574f6983e9b7ab4ab1c136ebeecb281a26eca388b"
        },
        "downloads": 0,
        "filename": "Flask_YoloAPI-0.0.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7af7d71941fb7bfe49b4722e2172dc3a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 10118,
        "upload_time": "2017-09-27T07:04:01",
        "url": "https://files.pythonhosted.org/packages/2a/79/3cee2f8e9884c63072e61bc96b2a7887a4342facc5143d3abf8301de1b72/Flask_YoloAPI-0.0.5-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7af7d71941fb7bfe49b4722e2172dc3a",
        "sha256": "68f474d6c573f8b9e1555c6574f6983e9b7ab4ab1c136ebeecb281a26eca388b"
      },
      "downloads": 0,
      "filename": "Flask_YoloAPI-0.0.5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7af7d71941fb7bfe49b4722e2172dc3a",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 10118,
      "upload_time": "2017-09-27T07:04:01",
      "url": "https://files.pythonhosted.org/packages/2a/79/3cee2f8e9884c63072e61bc96b2a7887a4342facc5143d3abf8301de1b72/Flask_YoloAPI-0.0.5-py3-none-any.whl"
    }
  ]
}