{
  "info": {
    "author": "Werner Robitza",
    "author_email": "werner.robitza@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Multimedia :: Sound/Audio",
      "Topic :: Multimedia :: Sound/Audio :: Analysis",
      "Topic :: Multimedia :: Sound/Audio :: Conversion"
    ],
    "description": "# ffmpeg-normalize\n\n[![Build Status](https://travis-ci.org/slhck/ffmpeg-normalize.svg?branch=master)](https://travis-ci.org/slhck/ffmpeg-normalize)\n\nA utility for batch-normalizing audio using ffmpeg.\n\nThis program normalizes media files to a certain LUFS level using the EBU R128 loudness normalization procedure. It can also perform RMS-based normalization (where the mean is lifted or attenuated), or peak normalization to a certain target level.\n\nBatch processing of several input files is possible, including video files.\n\n## Requirements\n\n-   Python 2.7 or 3\n-   ffmpeg v3.1 or above from <http://ffmpeg.org/> installed in your \\$PATH\n\n## Installation\n\n    pip3 install ffmpeg-normalize\n\n## Usage\n\n    ffmpeg-normalize [-h] [-o OUTPUT [OUTPUT ...]] [-of OUTPUT_FOLDER] [-f]\n                    [-d] [-v] [-n] [--version] [-nt {ebu,rms,peak}]\n                    [-t TARGET_LEVEL] [-lrt LOUDNESS_RANGE_TARGET]\n                    [-tp TRUE_PEAK] [--offset OFFSET] [--dual-mono]\n                    [-c:a AUDIO_CODEC] [-b:a AUDIO_BITRATE]\n                    [-ar SAMPLE_RATE] [-vn] [-c:v VIDEO_CODEC] [-sn] [-mn]\n                    [-e EXTRA_OUTPUT_OPTIONS] [-ofmt OUTPUT_FORMAT]\n                    [-ext EXTENSION]\n                    input [input ...]\n\nFor more information, run `ffmpeg-normalize -h`, or read on.\n\n## Description\n\nThe program takes a number of input files and, by default, writes them to a folder called `normalized`, using an `.mkv` container. You can specify an output file name for each input file with the `-o` option. In this case, the container format will be inferred from the file name extension.\n\nBy default, all streams from the input file will be written to the output file. For example, if your input is a video with two language tracks and a subtitle track, both audio tracks will be normalized independently. The video and subtitle tracks will be copied over to the output file.\n\n**Important Note:** The default audio encoding method is uncompressed PCM to avoid introducing compression artifacts. This will result in a much higher bitrate than you might want, for example if your input files are MP3s. Some containers (like MP4) also cannot handle PCM audio. If you want to use such containers and/or keep the file size down, use `-c:a` and specify an audio codec (e.g., `-c:a aac` for ffmpeg's built-in AAC encoder).\n\n## Examples\n\nNormalize two WAV files and write them to the specified output files with uncompressed PCM WAV as audio codec:\n\n    ffmpeg-normalize file1.wav file2.wav -o file1-normalized.wav -o file2-normalized.wav\n\nNormalize a number of videos in the current folder and write them to a folder called `normalized`, converting all audio streams to AAC with 192 kBit/s.\n\n    ffmpeg-normalize *.mkv -c:a aac -b:a 192k\n\nInstead of EBU R128, one might just want to use simple peak normalization to 0 dB:\n\n    ffmpeg-normalize test.wav --normalization-type peak --target-level 0 --output normalized.wav\n    ffmpeg-normalize test.wav -nt peak -t 0 -o normalized.wav\n\nYou can (if you really need to!) also overwrite your input file. Warning, this will destroy data:\n\n    ffmpeg-normalize input.mp4 -o input.mp4 -f\n\nIf you need some fancy extra options, such as setting `vbr` for the `libfdk_aac` encoder, pass them to the `-e`/`--extra-options` argument:\n\n    ffmpeg-normalize input.m4a -c:a libfdk_aac -e '[\"vbr\": \"3\"]' -o output.m4a\n\nFurther examples? Please submit a PR so I can collect them.\n\n## Detailed Options\n\nFile Input/output:\n\n- `input`: Input media file(s)\n\n- `-o OUTPUT [OUTPUT ...], --output OUTPUT [OUTPUT ...]`: Output file names.\n\n    Will be applied per input file.\n\n    If no output file name is specified for an input file, the output files\n    will be written to the default output folder with the name `<input>.wav`.\n\n- `-of OUTPUT_FOLDER, --output-folder OUTPUT_FOLDER`: Output folder (default: `normalized`)\n\n    This folder will be used for input files that have no explicit output name specified.\n\nFile Input/Output:\n\n- `-f, --force`: Force overwrite existing files\n\n- `-d, --debug`: Print debugging output\n\n- `-v, --verbose`: Print verbose output\n\n- `-n, --dry-run`: Do not run normalization, only print what would be done\n\n- `--version`: Print version and exit\n\nNormalization:\n\n- `-nt {ebu,rms,peak}, --normalization-type {ebu,rms,peak}`: Normalization type (default: `ebu`).\n\n    EBU normalization performs two passes and normalizes according to EBU R128.\n\n    RMS-based normalization brings the input file to the specified RMS level.\n\n    Peak normalization brings the signal to the specified peak level.\n\n- `-t TARGET_LEVEL, --target-level TARGET_LEVEL`: Normalization target level in dB/LUFS (default: -23).\n\n    For EBU normalization, it corresponds to Integrated Loudness Target in LUFS. The range is -70.0 - -5.0.\n\n    Otherwise, the range is -99 to 0.\n\nEbu R128 Normalization:\n\n- `-lrt LOUDNESS_RANGE_TARGET, --loudness-range-target LOUDNESS_RANGE_TARGET`: EBU Loudness Range Target in LUFS (default: 7.0).\n\n    Range is 1.0 - 20.0.\n\n- `-tp TRUE_PEAK, --true-peak TRUE_PEAK`: EBU Maximum True Peak in dBTP (default: -2.0).\n\n    Range is -9.0 - +0.0.\n\n- `--offset OFFSET`: EBU Offset Gain (default: 0.0).\n\n    The gain is applied before the true-peak limiter.\n    Range is -99.0 - +99.0.\n\n- `--dual-mono`: Treat mono input files as \"dual-mono\".\n\n    If a mono file is intended for playback on a stereo system, its EBU R128 measurement will be perceptually incorrect. If set, this option will compensate for this effect. Multi-channel input files are not affected by this option.\n\nAudio Encoding:\n\n- `-c:a AUDIO_CODEC, --audio-codec AUDIO_CODEC`: Audio codec to use for output files.\n\n    See `ffmpeg -encoders` for a list.\n\n    Will use PCM audio with input stream bit depth by default.\n\n- `-b:a AUDIO_BITRATE, --audio-bitrate AUDIO_BITRATE`: Audio bitrate in bits/s, or with K suffix.\n\n    If not specified, will use codec default.\n\n- `-ar SAMPLE_RATE, --sample-rate SAMPLE_RATE`: Audio sample rate to use for output files in Hz.\n\n    Will use input sample rate by default.\n\nOther Encoding Options:\n\n- `-vn, --video-disable`: Do not write video streams to output\n\n- `-c:v VIDEO_CODEC, --video-codec VIDEO_CODEC`: Video codec to use for output files (default: 'copy').\n\n    See `ffmpeg -encoders` for a list.\n\n    Will attempt to copy video codec by default.\n\n- `-sn, --subtitle-disable`: Do not write subtitle streams to output\n\n- `-mn, --metadata-disable`: Do not write metadata to output\n\nOutput Format:\n\n- `-e EXTRA_OUTPUT_OPTIONS, --extra-output-options EXTRA_OUTPUT_OPTIONS`: Extra output options list.\n\n    Must be a list of ffmpeg command line arguments without leading dashes. Wrap in quotes to prevent shell expansion and to preserve literal quotes inside string.\n\n    Example: `-e '[ \"-vbr\", \"3\" ]'`\n\n- `-ofmt OUTPUT_FORMAT, --output-format OUTPUT_FORMAT`: Media format to use for output file(s).\n\n    See `ffmpeg -formats` for a list.\n\n    If not specified, the format will be inferred by ffmpeg from the output file name. If the output file name is not explicitly specified, the extension will govern the format (see '--extension' option).\n\n- `-ext EXTENSION, --extension EXTENSION`: Output file extension to use for output files that were not explicitly specified. (Default: `mkv`)\n\nThe program additionally respects environment variables:\n\n- `TMP` / `TEMP` / `TEMPDIR`\n\n    Sets the path to the temporary directory in which files are\n    stored before being moved to the final output directory.\n    Note: You need to use full paths.\n\n- `FFMPEG_PATH`\n\n    Sets the full path to an `ffmpeg` executable other than\n    the system default.\n\n\n## FAQ\n\n### After updating, this program does not work as expected anymore!\n\nYou are probably using a 0.x version of this program. There are significant changes to the command line arguments and inner workings of this program, so please  adapt your scripts to the new one. Those changes were necessary to address a few issues that kept piling up; leaving the program as-is would have made it hard to extend it. You can continue using the old version (find it under *Releases* on GitHub or request the specific version from PyPi), but it will not be supported anymore.\n\n### The program doesn't work because the \"loudnorm\" filter can't be found\n\nMake sure you run ffmpeg v3.1 or higher. Many distributions package outdated ffmpeg 2.x versions, or (even worse), Libav's `ffmpeg` disguising as a real `ffmpeg` from the FFmpeg project.\n\nYou can always download a static build from [their website](http://ffmpeg.org/download.html) and use that.\n\nIf you have to use an outdated ffmpeg version, you can only use `rms` or `peak` as normalization types, but I can't promise that the program will work correctly.\n\n### Should I use this to normalize my music collection?\n\nWhen you run `ffmpeg-normalize` and re-encode files with MP3 or AAC, you will inevitably introduce [generation loss](https://en.wikipedia.org/wiki/Generation_loss). Therefore, I do not recommend running this on your precious music collection, unless you have a backup of the originals or accept potential quality reduction. If you just want to normalize the subjective volume of the files without changing the actual content, consider using [MP3Gain](http://mp3gain.sourceforge.net/) and [aacgain](http://aacgain.altosdesign.com/).\n\n### The conversion does not work and I get a cryptic ffmpeg error!\n\nOne possible reason is that the input file contains some streams that cannot be mapped to the output file. Examples:\n\n- You are trying to normalize a movie file, writing to a `.wav` or `.mp3` file. WAV/MP3 files only support audio. Disable video and subtitles with `-vn` and `-sn`.\n\n- You are trying to normalize a file, writing to an `.mp4` container. MP4 does not support PCM audio. Make sure that your audio codec is set (e.g. `-c:a aac`).\n\nThe default output container is `.mkv` as it will support most input stream types. If you want a different output container, make sure that it supports your input file's video, audio, and subtitle streams (if any).\n\nAlso, if there is some other broken metadata, you can try to disable copying over of metadata with `-mn`.\n\n### What are the different normalization algorithms?\n\n- **EBU R128** is an EBU standard that is commonly used in the broadcasting world. The normalization is performed using a psychoacoustic model that targets a subjective loudness level measured in LUFS (Loudness Unit Full Scale). R128 is subjectively more accurate than any peak or RMS-based normalization. More info on R128 can be found in the [official document](https://tech.ebu.ch/docs/r/r128.pdf) and [the `loudnorm` filter description](http://k.ylo.ph/2016/04/04/loudnorm.html) by its original author.\n\n- **Peak Normalization** analyzes the peak signal level in dBFS and increases the volume of the input signal such that the maximum in the output is 0 dB (or any other chosen threshold). Since spikes in the signal can cause high volume peaks, peak normalization might still result in files that are subjectively quieter than other, non-peak-normalized files.\n\n- **RMS-based Normalization** analyzes the [RMS power](https://en.wikipedia.org/wiki/Root_mean_square#Average_power) of the signal and changes the volume such that a new RMS target is reached. Otherwise it works similar to peak normalization.\n\n### Couldn't I just run `loudnorm` with ffmpeg?\n\nYou absolutely can. However, you can get better accuracy and linear normalization with two passes of the filter. Since ffmpeg does not allow you to automatically run these two passes, you have to do it yourself and parse the output values from the first run. If this program is too over-engineered for you, you could also use an approach such as featured [in this Ruby script](https://gist.github.com/kylophone/84ba07f6205895e65c9634a956bf6d54) that performs the two `loudnorm` passes.\n\n### Can I buy you a beer / coffee / random drink?\n\nIf you found this program useful and feel like giving back, feel free to send a donation [via PayPal](https://paypal.me/slhck).\n\n# License\n\nThe MIT License (MIT)\n\nCopyright (c) 2015-2018 Werner Robitza\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n# History\n\n## 1.0.9 (2018-02-08)\n\n- Add normalized folder to gitignore\n- Do not print escape sequences on Windows\n- Do not check for file existence, fixes #57\n\n## 1.0.8 (2018-02-01)\n\n- Do not check for ffmpeg on module import\n\n## 1.0.7 (2018-02-01)\n\n- Fix issue with wrong normalization parameters\n\n## 1.0.6 (2018-01-30)\n\n- Document temporary directory env variable\n- Use FFMPEG_PATH environment variable\n\n## 1.0.5 (2018-01-26)\n\n- Handle edge case for short input clips\n\n## 1.0.4 (2018-01-26)\n\n- Do not try to remove file that doesn't exist\n\n## 1.0.3 (2018-01-26)\n\n- Always streamcopy when detecting streams to avoid initializing encoder\n- Fix handling of temporary file names\n\n## 1.0.2 (2018-01-25)\n\n- Fix bug with target level for Peak/RMS\n\n## 1.0.1 (2018-01-24)\n\n- Set default threshold to -23 as recommended\n\n## 1.0 (2018-01-21)\n\n- General rewrite of the program\n- New input/output file handling\n- Default to two-pass linear EBU normalization\n\n## 0.7.3 (2017-10-09)\n\n- Use shutil.move instead of os.rename for cross-FS compatibility\n\n## 0.7.2 (2017-09-17)\n\n- Allow setting threshold to 0 to always normalize file, see #38\n\n## 0.7.1 (2017-09-14)\n\n- Fix for expanding variables in `$PATH`\n\n## 0.7.0 (2017-08-02)\n\n- Internal code cleanup\n- Add more examples\n- Add simple test suite\n\n## 0.6.0 (2017-07-31)\n\n- Allow overwriting input file\n\n## 0.5.2 (2017-07-31)\n\n- Improve command-line handling\n\n## 0.5.1 (2017-04-04)\n\n- Fix --merge/-u option not working\n\n## 0.5 (2017-04-02)\n\n- Add new EBU R128 normalization filter\n- Fix issue with output file extension not being WAV by default\n- Fix issue #24 where setup.py fails on Windows / Python 3.6\n\n## 0.4.3 (2017-02-27)\n\n-   Fix option `-np`, should be `-x` short\n-   Abort when input and output file are the same (ffmpeg can't\n    overwrite it)\n\n## 0.4.2 (2017-02-27)\n\n-   Map metadata from input to output when merging\n-   Clarify use of merge option\n\n## 0.4.1 (2017-02-13)\n\n-   Fix #13\n\n## 0.4 (2017-01-24)\n\n-   Cleanup in code, make it class-based\n-   Drop avconv support, it was never good anyway\n-   Add support for specifying codec for non-merging operations\n-   Add support for specifying output format\n-   README improvements\n\n## 0.3 (2017-01-19)\n\n-   Add option to remove prefix\n\n## 0.2.4 (2016-10-27)\n\n-   Fixed issue where multiple spaces were collapsed into one\n\n## 0.2.3 (2016-02-12)\n\n-   Fixed issue where ffmpeg could not be found if path included spaces\n\n## 0.2.2 (2016-02-09)\n\n-   Change default level back to -26\n\n## 0.2.1 (2016-02-08)\n\n-   Documentation fixes\n\n## 0.2.0 (2016-02-08)\n\n-   Support multiple input files\n-   Allow merging with input file instead of creating separate WAV\n-   Write to directory instead of using prefix\n-   Set the audio codec when merging\n-   Set additional encoder or ffmpeg options\n\nNote: avconv support is very limited, use the real ffmpeg from\n<http://ffmpeg.org/> instead.\n\n## 0.1.3 (2015-12-15)\n\n-   Bugfix for detecting ffmpeg or avconv on Windows (as .exe)\n-   Add version to Usage message\n-   Update year\n\n## 0.1.2 (2015-11-13)\n\n-   Bugfix for missing ffmpeg or avconv\n\n## 0.1.0 (2015-08-01)\n\n-   First release, changing name to ffmpeg-normalize\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/slhck/ffmpeg-normalize",
    "keywords": "ffmpeg",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ffmpeg-normalize",
    "platform": "",
    "project_url": "https://pypi.org/project/ffmpeg-normalize/",
    "release_url": "https://pypi.org/project/ffmpeg-normalize/1.0.9/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Normalize audio via ffmpeg",
    "version": "1.0.9"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fc83948f6b7e0871d51ff1d4406e28a6",
          "sha256": "355eee87dc89f4ec97d63ffc5042b7e3609a67e6bf8c2e9071e5f15e8fbe0d3c"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "fc83948f6b7e0871d51ff1d4406e28a6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5087,
        "upload_time": "2015-08-01T19:19:14",
        "url": "https://files.pythonhosted.org/packages/a3/b4/33280a31594629f9f86be16375ef2ad9356955c5bad7ce64fa0fe469f13a/ffmpeg-normalize-0.1.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0b6dd302acc1ea6e9a3b2034184a0354",
          "sha256": "0b0b34ab15d7e5a97b06ccb85830d311d23e756a45966a242f4445df0e44d453"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.1.1.tar.gz",
        "has_sig": true,
        "md5_digest": "0b6dd302acc1ea6e9a3b2034184a0354",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5336,
        "upload_time": "2015-11-12T10:41:35",
        "url": "https://files.pythonhosted.org/packages/81/d3/7547b5a9712fd8d9164e7c2110886d2648b6b99a8bc096ed37719adec7f6/ffmpeg-normalize-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ec2f18e8c4d2352977d51baedb974480",
          "sha256": "2bfd3bf5cabd5a22cbaf23c00599e4a85f9864ee4ec2648adbd872b2e5e94229"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ec2f18e8c4d2352977d51baedb974480",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5312,
        "upload_time": "2015-11-13T08:48:31",
        "url": "https://files.pythonhosted.org/packages/0a/e1/95a767ebf2dbe5e03e7daffc752b604c92ae6dbd332bd5e3133da7913554/ffmpeg-normalize-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f2901f9de210275db6f0f32031abd03e",
          "sha256": "141fdfdba60eac314d1be0fd100091973dcee856e088fb9d36f442b067c73ed3"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f2901f9de210275db6f0f32031abd03e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5429,
        "upload_time": "2015-12-15T10:53:51",
        "url": "https://files.pythonhosted.org/packages/5f/35/3b4d6b887ccbf71c8340b865125575219e5a5d074dc923895217417a0a1a/ffmpeg-normalize-0.1.3.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b9ed96ce4a6abd40269776008ed77bb6",
          "sha256": "427d48ce6a03964c55b6db09208f82c56c6cedc432b346253ed137431fe1616b"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b9ed96ce4a6abd40269776008ed77bb6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6284,
        "upload_time": "2016-02-08T18:53:06",
        "url": "https://files.pythonhosted.org/packages/fd/23/ce7b2745c3662a63ec1b7cc2da9662cb0d2a5cd59a6890417b9f09bde01a/ffmpeg-normalize-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2ac34ff0e8eec19f556abb09aca4494c",
          "sha256": "35fec264cb0f003b429d04680c0b93eede046f7c27c47a8ba79c24c2e1cf4119"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2ac34ff0e8eec19f556abb09aca4494c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6378,
        "upload_time": "2016-02-08T18:58:48",
        "url": "https://files.pythonhosted.org/packages/f7/c3/65db8f40fbb84850658130690337b97224537a2c5b7b646df93e30ed0fc4/ffmpeg-normalize-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "077e78382ded144b251798067675e212",
          "sha256": "3963c1afa8a295ea99596b1c9ea8d5e52c6c5362f29fec8228145eb142ae1e6b"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "077e78382ded144b251798067675e212",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6406,
        "upload_time": "2016-02-09T09:14:53",
        "url": "https://files.pythonhosted.org/packages/3b/3a/46b659c33f753b58d44e82c0cbd68f1557321e9f127b93090b84c2ecd815/ffmpeg-normalize-0.2.2.tar.gz"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "43bfe9be80f04dcd26797fc298cf657d",
          "sha256": "17d5448d410c6d49040ceae0aa2308c5892ab1a18b74a9a563cdef4376d7d6e8"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "43bfe9be80f04dcd26797fc298cf657d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6458,
        "upload_time": "2016-02-12T12:03:29",
        "url": "https://files.pythonhosted.org/packages/35/b3/aa5dc7b4c91cc72e789733081e6627717db2a004ece75a155527850bebdb/ffmpeg-normalize-0.2.3.tar.gz"
      }
    ],
    "0.2.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ea0c7c912f77b63a8908fc1a0c656af5",
          "sha256": "a7e9624ea8d4d4cb529bb2308de34a9361dabfc8859e719ce5470026b691e258"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.2.4.tar.gz",
        "has_sig": false,
        "md5_digest": "ea0c7c912f77b63a8908fc1a0c656af5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6501,
        "upload_time": "2016-10-27T10:01:51",
        "url": "https://files.pythonhosted.org/packages/55/cd/7f751bdc2613128021a3561e0346c42e3aa9728c0fb31f75cf4367fa3f86/ffmpeg-normalize-0.2.4.tar.gz"
      }
    ],
    "0.2.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a587cfd03b60fc5fdd4ec1b1de1dc300",
          "sha256": "a4578e220daa22252f8bc4dedc267dda4a9d70c4f5a976cfd14818a3b31833ca"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.2.5.tar.gz",
        "has_sig": false,
        "md5_digest": "a587cfd03b60fc5fdd4ec1b1de1dc300",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6633,
        "upload_time": "2017-01-19T10:18:51",
        "url": "https://files.pythonhosted.org/packages/16/0a/b0ac1e2f4db5196d56cd4efe543fc8676a2423ef7097e1a7089746317c21/ffmpeg-normalize-0.2.5.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7cf725c2ccbe8b6bd7156522e981a5cb",
          "sha256": "7e3bd1b3553782a64388cc251224fb099f4187c18d201c584a02a6a2f703d3cc"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7cf725c2ccbe8b6bd7156522e981a5cb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7728,
        "upload_time": "2017-01-24T12:58:23",
        "url": "https://files.pythonhosted.org/packages/bf/d0/3722348a45703370ec06a7b54ecaa7fe65f6cda809be2e5d7d5d5fb0891d/ffmpeg-normalize-0.4.0.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b40387d17a3462fff7df1a20ba9927b4",
          "sha256": "f2aa2ddc765e9a7e49ac8cae785613ece3a48240a4c1c3e49340b18b604884e7"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b40387d17a3462fff7df1a20ba9927b4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7721,
        "upload_time": "2017-02-13T13:27:58",
        "url": "https://files.pythonhosted.org/packages/3a/b7/82371867b2d402e0e56ae6a556b034288137c08d4de9c751e849fb131a57/ffmpeg-normalize-0.4.1.tar.gz"
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2b5712220c566cf7306a8000512e027c",
          "sha256": "0c9b53b585d43a8aa254bca825dff9bcb26b294f7c719246721a605dba6d4fa3"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "2b5712220c566cf7306a8000512e027c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7954,
        "upload_time": "2017-02-27T18:54:21",
        "url": "https://files.pythonhosted.org/packages/4f/a6/312c55d78e58619b58cabc1ac223e3918b659314108c26369cde1a8738f4/ffmpeg-normalize-0.4.2.tar.gz"
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f425258a28e2bb31033c2d2690bd4c84",
          "sha256": "fb6d7c3db18ea3537a3fa2678d1efd231245db818878ba2b401ffb784780431e"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f425258a28e2bb31033c2d2690bd4c84",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8027,
        "upload_time": "2017-02-27T19:03:27",
        "url": "https://files.pythonhosted.org/packages/ca/79/dea74db25a059cae31ab41a4e8feb68c99e0ef3b57775e17e86793253737/ffmpeg-normalize-0.4.3.tar.gz"
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1f3eeb2d13c9315bb0d76efb878bbcb2",
          "sha256": "ab6dccb10b9871fb7a5acfb32c198a18baffdc3cdd2f7f1ad3f5ae93af7ce51a"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "1f3eeb2d13c9315bb0d76efb878bbcb2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8965,
        "upload_time": "2017-04-02T17:52:28",
        "url": "https://files.pythonhosted.org/packages/22/36/1152b819acca808577f46a3179a85c7502a42abbd3bbfe1d85de4faffebd/ffmpeg-normalize-0.5.tar.gz"
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ea65ec476d629cb1fea7d9a54226b642",
          "sha256": "c6c0acac35ed0bf7f2b5979ac5330b2ea100c744840370a0334a2e645ac122d8"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ea65ec476d629cb1fea7d9a54226b642",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9018,
        "upload_time": "2017-04-04T19:34:04",
        "url": "https://files.pythonhosted.org/packages/32/4c/74fe22a95cdc71b759c1f0f46ea9b02773a23373c2c8cf55bb4b26aa96ea/ffmpeg-normalize-0.5.1.tar.gz"
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "85ffaf5491adca68c35d7e45a12ce05b",
          "sha256": "4e69b8dc55658d2c97f2712996a758ebcc415d86eeadd8bf4ce45140d9d06ba9"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "85ffaf5491adca68c35d7e45a12ce05b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9252,
        "upload_time": "2017-07-31T08:09:43",
        "url": "https://files.pythonhosted.org/packages/75/6b/da02ccc10c86ca07309659346697a0fea64ca0256041015004d0ee11cfd2/ffmpeg-normalize-0.5.2.tar.gz"
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7b44534ccb125b62379449238c18736b",
          "sha256": "4e0bb7af05094fdef4346bc735cd6544c78f6f25c8a8de939f5b41c4f1dce118"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7b44534ccb125b62379449238c18736b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9581,
        "upload_time": "2017-07-31T08:35:03",
        "url": "https://files.pythonhosted.org/packages/22/26/69ee30b40bc4b70f00af716aaaf6f7de7aa7a0392a018491055075918ef1/ffmpeg-normalize-0.6.0.tar.gz"
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ca6f395a41fc9e7846c2f1fa497fd472",
          "sha256": "e36d1f5a9e7042f900bac98115b3194c5d564a949ab66f801e10f20a0eed434a"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ca6f395a41fc9e7846c2f1fa497fd472",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18428,
        "upload_time": "2017-08-02T15:18:39",
        "url": "https://files.pythonhosted.org/packages/f5/ad/977f93920cb041f5e2f66ebe6ab416c1f2549756e5f25604f36422706595/ffmpeg-normalize-0.7.0.tar.gz"
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6f27f895cfe296eae35a7d9c694c9cc8",
          "sha256": "95acc861942d07c4966e3af292ffbb1fa3ce14257c7384d712ceaee395e8a243"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6f27f895cfe296eae35a7d9c694c9cc8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17140,
        "upload_time": "2017-09-14T15:23:21",
        "url": "https://files.pythonhosted.org/packages/9a/4d/eb6e3e95790677f2836e227fce2265189a1aaf8cce563cf2dc20d3dfcb4e/ffmpeg-normalize-0.7.1.tar.gz"
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "51f5d7b018029178d19ba8aa77b8be8c",
          "sha256": "1f6b18d2fd52b906524f66efa0b603935137edacb63578804e71e0576e55e08c"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "51f5d7b018029178d19ba8aa77b8be8c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16779,
        "upload_time": "2017-09-17T14:08:52",
        "url": "https://files.pythonhosted.org/packages/4b/59/9f315d53d532fee16d9c41cc01a0c23f7f3e18d084969a12a1d6f6e2d07f/ffmpeg-normalize-0.7.2.tar.gz"
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "853d71be27b9ee07b0aa55cd64d99464",
          "sha256": "764f6309b09bb5354dd27cf1e683ad3bbae532ecca5d8123b2be51f53a421a1f"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "853d71be27b9ee07b0aa55cd64d99464",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16856,
        "upload_time": "2017-10-09T18:42:42",
        "url": "https://files.pythonhosted.org/packages/b8/33/6277a26244566ee0ddb9331ec01caeef35b658c0593661dc06d16ab08f8a/ffmpeg-normalize-0.7.3.tar.gz"
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b072c3b5c99194933e2885f956fbf322",
          "sha256": "2cb1746a6f56ffd420b89689c3601b0b4ca411e4eb649caa00d137c2b858138c"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b072c3b5c99194933e2885f956fbf322",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1931770,
        "upload_time": "2018-01-23T19:41:14",
        "url": "https://files.pythonhosted.org/packages/3f/df/042231cd997aae7d839308ffd2e381fa26ab617c828e6189f07192d71708/ffmpeg-normalize-1.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "963b92f097318aefe007bb6750cbc90e",
          "sha256": "719360b0f72c7d6391db8bad78451011ecf0705bfa7ade8ca26fac3c8694ee58"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "963b92f097318aefe007bb6750cbc90e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1931818,
        "upload_time": "2018-01-24T07:26:17",
        "url": "https://files.pythonhosted.org/packages/15/47/d3e7d0adb89d8e3a035901edd394bfc5dcafa1852d5768661c304519a5e8/ffmpeg-normalize-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "da94ddf8d599607d80590706bbf982ad",
          "sha256": "9613435e280da6f76925b7ffb88031ecd85bd08851318e16456091a4651b2a4c"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "da94ddf8d599607d80590706bbf982ad",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1932061,
        "upload_time": "2018-01-25T18:57:23",
        "url": "https://files.pythonhosted.org/packages/e1/44/f70d9a774093d5912592040d8a22293d25622a14b9500558e7f6bce76006/ffmpeg-normalize-1.0.2.tar.gz"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "abf8734ff8a3bb1bc219ddfcf820b0d5",
          "sha256": "89b5ffa6f8a122d7c9a1133734f248db6d93a2879d982150ff1711b4aed84db6"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "abf8734ff8a3bb1bc219ddfcf820b0d5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1932212,
        "upload_time": "2018-01-26T18:53:28",
        "url": "https://files.pythonhosted.org/packages/cb/54/02a12d5cde99ac899980b44e16caa907d02a4965681b94efb100b1b245b3/ffmpeg-normalize-1.0.3.tar.gz"
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6da8f7f090016242ed554d333cd584be",
          "sha256": "44e6c2681fb2126cd9ffefdb38a6e079ba8e5f965633c6e5b6d2b9a2a5ab8f3a"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6da8f7f090016242ed554d333cd584be",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1932245,
        "upload_time": "2018-01-26T18:57:21",
        "url": "https://files.pythonhosted.org/packages/b0/1c/8593f9472f67f7ff87b38db3a5b7dcb5cce930a93c0ad632c5af3b187978/ffmpeg-normalize-1.0.4.tar.gz"
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cebcef84718bad8087ff68a98fffe7bc",
          "sha256": "c897ecd8a848a013a164a646142b0a53f35b92c7448e6197b042d13ed7c9aead"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "cebcef84718bad8087ff68a98fffe7bc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1932369,
        "upload_time": "2018-01-26T19:09:23",
        "url": "https://files.pythonhosted.org/packages/3a/7d/c4b6023f1603d45f902a98b144a7000a4804c29e3ff590ae1fde46462fa8/ffmpeg-normalize-1.0.5.tar.gz"
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "120772ea6c11475de3940abed9f9b0cd",
          "sha256": "cc654a8cbc34254afbde185d86c0ddd7aaf8df636f7ced5cb2d05924ed65e585"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "120772ea6c11475de3940abed9f9b0cd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1932729,
        "upload_time": "2018-01-30T09:01:25",
        "url": "https://files.pythonhosted.org/packages/7a/0b/3363fbb2edd57b394e7870cc7539c2fcc6a4f46396e3b5bd15c6422a3707/ffmpeg-normalize-1.0.6.tar.gz"
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3346840f521a86537d634c319922863a",
          "sha256": "67dac3563a429ae9d6b11c7f69d14404c912f4dca17f461fcbb131d64220719d"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-1.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "3346840f521a86537d634c319922863a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1932752,
        "upload_time": "2018-02-01T13:56:12",
        "url": "https://files.pythonhosted.org/packages/3e/68/63df9ff29095bec953678fb96a31d393f9679e219b78b3786e6a4eeb615b/ffmpeg-normalize-1.0.7.tar.gz"
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ec3bf57295a581824c9886b62991e8e4",
          "sha256": "3a1ccad6f020be6e2d4d06e36f93d4b9e3915e7957a4be4141d582cab3c5e529"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-1.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "ec3bf57295a581824c9886b62991e8e4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1932858,
        "upload_time": "2018-02-01T14:14:39",
        "url": "https://files.pythonhosted.org/packages/0b/b2/ad6fbfecc8eaca1d5715ff9956630ad4a1aa0b92d32926a71e1cb4be0de8/ffmpeg-normalize-1.0.8.tar.gz"
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8bfa2319f2bfaaec2ec3ebd3a8a59352",
          "sha256": "b9059e2cf829243b63ef2ffdf16576fc70bf9b7c5cbc887a704f7d5916f15a53"
        },
        "downloads": -1,
        "filename": "ffmpeg-normalize-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "8bfa2319f2bfaaec2ec3ebd3a8a59352",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1932523,
        "upload_time": "2018-02-08T08:16:20",
        "url": "https://files.pythonhosted.org/packages/3e/f2/154f4ffe50d62b3cd7db7ada6ebcc912585f08063bab41830ff3f849ccda/ffmpeg-normalize-1.0.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8bfa2319f2bfaaec2ec3ebd3a8a59352",
        "sha256": "b9059e2cf829243b63ef2ffdf16576fc70bf9b7c5cbc887a704f7d5916f15a53"
      },
      "downloads": -1,
      "filename": "ffmpeg-normalize-1.0.9.tar.gz",
      "has_sig": false,
      "md5_digest": "8bfa2319f2bfaaec2ec3ebd3a8a59352",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 1932523,
      "upload_time": "2018-02-08T08:16:20",
      "url": "https://files.pythonhosted.org/packages/3e/f2/154f4ffe50d62b3cd7db7ada6ebcc912585f08063bab41830ff3f849ccda/ffmpeg-normalize-1.0.9.tar.gz"
    }
  ]
}