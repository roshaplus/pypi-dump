{
  "info": {
    "author": "Plone Foundation",
    "author_email": "plone-developers@lists.sourceforge.net",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Plone",
      "Framework :: Plone :: 5.0",
      "Framework :: Plone :: 5.1",
      "Framework :: Zope2",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "Introduction\n============\n\n.. contents:: Table of contents\n\n``plone.app.testing`` provides tools for writing integration and functional\ntests for code that runs on top of Plone. It is based on `plone.testing`_.\nIf you are unfamiliar with ``plone.testing``, the concept of layers, or the\n`zope.testing`_ testrunner, please take a look at the the ``plone.testing``\ndocumentation. In fact, even if you are working exclusively with Plone, you\nare likely to want to use some of its features for unit testing.\n\nIn short, ``plone.app.testing`` includes:\n\n* A set of layers that set up fixtures containing a Plone site, intended for\n  writing integration and functional tests.\n* A collection of helper functions, some useful for writing your own layers\n  and some applicable to tests themselves.\n* A convenient layer base class, extending ``plone.testing.Layer``, which\n  makes it easier to write custom layers extending the Plone site fixture,\n  with proper isolation and tear-down.\n* Cleanup hooks for ``zope.testing.cleanup`` to clean up global state found\n  in a Plone installation. This is useful for unit testing.\n\nCompatibility\n-------------\n\n``plone.app.testing`` 5.x works with Plone 5.\n``plone.app.testing`` 4.x works with Plone 4 and Zope 2.12. It may work with\nnewer versions. It will not work with earlier versions. Use\n``plone.app.testing`` 3.x for Plone 3 and Zope 2.10.\n\nInstallation and usage\n======================\n\nTo use ``plone.app.testing`` in your own package, you need to add it as a\ndependency. Most people prefer to keep test-only dependencies separate, so\nthat they do not need to be installed in scenarios (such as on a production\nserver) where the tests will not be run. This can be achieved using a\n``test`` extra.\n\nIn ``setup.py``, add or modify the ``extras_require`` option, like so::\n\n    extras_require = {\n        'test': [\n                'plone.app.testing',\n            ]\n    },\n\nThis will also include ``plone.testing``, with the ``[z2]``, ``[zca]`` and\n``[zodb]`` extras (which ``plone.app.testing`` itself relies on).\n\nPlease see the `plone.testing`_ documentation for more details about how to\nadd a test runner to your buildout, and how to write and run tests.\n\nLayer reference\n===============\n\nThis package contains a layer class,\n``plone.app.testing.layers.PloneFixture``, which sets up a Plone site fixture.\nIt is combined with other layers from `plone.testing`_ to provide a number of\nlayer instances. It is important to realise that these layers all have the\nsame fundamental fixture: they just manage test setup and tear-down\ndifferently.\n\nWhen set up, the fixture will:\n\n* Create a ZODB sandbox, via a stacked ``DemoStorage``. This ensures\n  persistent changes made during layer setup can be cleanly torn down.\n* Configure a global component registry sandbox. This ensures that global\n  component registrations (e.g. as a result of loading ZCML configuration)\n  can be cleanly torn down.\n* Create a configuration context with the ``disable-autoinclude`` feature\n  set. This has the effect of stopping Plone from automatically loading the\n  configuration of any installed package that uses the\n  ``z3c.autoinclude.plugin:plone`` entry point via `z3c.autoinclude`_. (This\n  is to avoid accidentally polluting the test fixture - custom layers should\n  load packages' ZCML configuration explicitly if required).\n* Install a number of Zope 2-style products on which Plone depends.\n* Load the ZCML for these products, and for ``Products.CMFPlone``, which in\n  turn pulls in the configuration for the core of Plone.\n* Create a default Plone site, with the default theme enabled, but with no\n  default content.\n* Add a user to the root user folder with the ``Manager`` role.\n* Add a test user to this instance with the ``Member`` role.\n\nFor each test:\n\n* The test user is logged in\n* The local component site is set\n* Various global caches are cleaned up\n\nVarious constants in the module ``plone.app.testing.interfaces`` are defined\nto describe this environment:\n\n+----------------------+--------------------------------------------------+\n| **Constant**         | **Purpose**                                      |\n+----------------------+--------------------------------------------------+\n| PLONE_SITE_ID        | The id of the Plone site object inside the Zope  |\n|                      | application root.                                |\n+----------------------+--------------------------------------------------+\n| PLONE_SITE_TITLE     | The title of the Plone site                      |\n+----------------------+--------------------------------------------------+\n| DEFAULT_LANGUAGE     | The default language of the Plone site ('en')    |\n+----------------------+--------------------------------------------------+\n| TEST_USER_ID         | The id of the test user                          |\n+----------------------+--------------------------------------------------+\n| TEST_USER_NAME       | The username of the test user                    |\n+----------------------+--------------------------------------------------+\n| TEST_USER_PASSWORD   | The password of the test user                    |\n+----------------------+--------------------------------------------------+\n| TEST_USER_ROLES      | The default global roles of the test user -      |\n|                      | ('Member',)                                      |\n+----------------------+--------------------------------------------------+\n| SITE_OWNER_NAME      | The username of the user owning the Plone site.  |\n+----------------------+--------------------------------------------------+\n| SITE_OWNER_PASSWORD  | The password of the user owning the Plone site.  |\n+----------------------+--------------------------------------------------+\n\nAll the layers also expose a resource in addition to those from their\nbase layers, made available during tests:\n\n``portal``\n   The Plone site root.\n\nPlone site fixture\n------------------\n\n+------------+--------------------------------------------------+\n| Layer:     | ``plone.app.testing.PLONE_FIXTURE``              |\n+------------+--------------------------------------------------+\n| Class:     | ``plone.app.testing.layers.PloneFixture``        |\n+------------+--------------------------------------------------+\n| Bases:     | ``plone.testing.z2.STARTUP``                     |\n+------------+--------------------------------------------------+\n| Resources: |                                                  |\n+------------+--------------------------------------------------+\n\nThis layer sets up the Plone site fixture on top of the ``z2.STARTUP``\nfixture.\n\nYou should not use this layer directly, as it does not provide any test\nlifecycle or transaction management. Instead, you should use a layer\ncreated with either the ``IntegrationTesting`` or ``FunctionalTesting``\nclasses, as outlined below.\n\nMock MailHost\n-------------\n\n+------------+--------------------------------------------------+\n| Layer:     | ``plone.app.testing.MOCK_MAILHOST_FIXTURE``      |\n+------------+--------------------------------------------------+\n| Class:     | ``plone.app.testing.layers.MockMailHostLayer``   |\n+------------+--------------------------------------------------+\n| Bases:     | ``plone.app.testing.layers.PLONE_FIXTURE``       |\n+------------+--------------------------------------------------+\n| Resources: |                                                  |\n+------------+--------------------------------------------------+\n\nThis layer builds on top of ``PLONE_FIXTURE`` to patch Plone's MailHost implementation.\n\nWith it,\nany attempt to send an email will instead store each of them as a string in a list in ``portal.MailHost.messages``.\n\nYou should not use this layer directly, as it does not provide any test\nlifecycle or transaction management. Instead, you should use a layer\ncreated with either the ``IntegrationTesting`` or ``FunctionalTesting``\nclasses, like::\n\n    from plone.app.testing import MOCK_MAILHOST_FIXTURE\n\n    MY_INTEGRATION_TESTING = IntegrationTesting(\n        bases=(\n            MY_FIXTURE,\n            MOCK_MAILHOST_FIXTURE,\n        ),\n        name=\"MyFixture:Integration\"\n    )\n\n\nPloneWithPackageLayer class\n---------------------------\n\nMost add-ons do not need more setup than loading a ZCML file and\nrunning a GenericSetup profile.\n\nWith this helper class, a fixture can easily be instantiated::\n\n    from plone.app.testing import PloneWithPackageLayer\n    import my.addon\n\n    FIXTURE = PloneWithPackageLayer(\n        zcml_package=my.addon,\n        zcml_filename='configure.zcml',\n        gs_profile_id='my.addon:default',\n        name=\"MyAddonFixture\"\n    )\n\nPloneWithPackageLayer constructor takes two other keyword arguments:\n``bases`` and ``additional_z2_products``.\n\nThe ``bases`` argument takes a sequence of base layer fixtures.\nIt is useful, among other reasons,\nto pass a fixture which makes other calls to plone.app.testing API.\nThe need could arise in the development process.\n\n``additional_z2_products`` argument takes a sequence of package names\nthat need to be installed as Zope2 Products and are dependencies of the tested add-on.\n\nIntegration and functional testing test lifecycles\n--------------------------------------------------\n\n``plone.app.testing`` comes with two layer classes, ``IntegrationTesting``\nand ``FunctionalTesting``, which derive from the corresponding layer classes\nin ``plone.testing.z2``.\n\nThese classes set up the ``app``, ``request`` and ``portal`` resources, and\nreset the fixture (including various global caches) between each test run.\n\nAs with the classes in ``plone.testing``, the ``IntegrationTesting`` class\nwill create a new transaction for each test and roll it back on test tear-\ndown, which is efficient for integration testing, whilst ``FunctionalTesting``\nwill create a stacked ``DemoStorage`` for each test and pop it on test tear-\ndown, making it possible to exercise code that performs an explicit commit\n(e.g. via tests that use ``zope.testbrowser``).\n\nWhen creating a custom fixture, the usual pattern is to create a new layer\nclass that has ``PLONE_FIXTURE`` as its default base, instantiating that as a\nseparate \"fixture\" layer. This layer is not to be used in tests directly,\nsince it won't have test/transaction lifecycle management, but represents a\nshared fixture, potentially for both functional and integration testing. It\nis also the point of extension for other layers that follow the same pattern.\n\nOnce this fixture has been defined, \"end-user\" layers can be defined using\nthe ``IntegrationTesting`` and ``FunctionalTesting`` classes. For example::\n\n    from plone.testing import Layer\n    from plone.app.testing import PLONE_FIXTURE\n    from plone.app.testing import IntegrationTesting, FunctionalTesting\n\n    class MyFixture(Layer):\n        defaultBases = (PLONE_FIXTURE,)\n\n        ...\n\n    MY_FIXTURE = MyFixture()\n\n    MY_INTEGRATION_TESTING = IntegrationTesting(bases=(MY_FIXTURE,), name=\"MyFixture:Integration\")\n    MY_FUNCTIONAL_TESTING = FunctionalTesting(bases=(MY_FIXTURE,), name=\"MyFixture:Functional\")\n\nSee the ``PloneSandboxLayer`` layer below for a more comprehensive example.\n\nPlone integration testing\n-------------------------\n\n+------------+--------------------------------------------------+\n| Layer:     | ``plone.app.testing.PLONE_INTEGRATION_TESTING``  |\n+------------+--------------------------------------------------+\n| Class:     | ``plone.app.testing.layers.IntegrationTesting``  |\n+------------+--------------------------------------------------+\n| Bases:     | ``plone.app.testing.PLONE_FIXTURE``              |\n+------------+--------------------------------------------------+\n| Resources: | ``portal`` (test setup only)                     |\n+------------+--------------------------------------------------+\n\nThis layer can be used for integration testing against the basic\n``PLONE_FIXTURE`` layer.\n\nYou can use this directly in your tests if you do not need to set up any\nother shared fixture.\n\nHowever, you would normally not extend this layer - see above.\n\n\nPlone functional testing\n------------------------\n\n+------------+--------------------------------------------------+\n| Layer:     | ``plone.app.testing.PLONE_FUNCTIONAL_TESTING``   |\n+------------+--------------------------------------------------+\n| Class:     | ``plone.app.testing.layers.FunctionalTesting``   |\n+------------+--------------------------------------------------+\n| Bases:     | ``plone.app.testing.PLONE_FIXTURE``              |\n+------------+--------------------------------------------------+\n| Resources: | ``portal`` (test setup only)                     |\n+------------+--------------------------------------------------+\n\nThis layer can be used for functional testing against the basic\n``PLONE_FIXTURE`` layer, for example using ``zope.testbrowser``.\n\nYou can use this directly in your tests if you do not need to set up any\nother shared fixture.\n\nAgain, you would normally not extend this layer - see above.\n\nPlone ZServer\n-------------\n\n+------------+--------------------------------------------------+\n| Layer:     | ``plone.app.testing.PLONE_ZSERVER``              |\n+------------+--------------------------------------------------+\n| Class:     | ``plone.testing.z2.ZServer``                     |\n+------------+--------------------------------------------------+\n| Bases:     | ``plone.app.testing.PLONE_FUNCTIONAL_TESTING``   |\n+------------+--------------------------------------------------+\n| Resources: | ``portal`` (test setup only)                     |\n+------------+--------------------------------------------------+\n\nThis is layer is intended for functional testing using a live, running HTTP\nserver, e.g. using Selenium or Windmill.\n\nAgain, you would not normally extend this layer. To create a custom layer\nthat has a running ZServer, you can use the same pattern as this one, e.g.::\n\n    from plone.testing import Layer\n    from plone.testing import z2\n    from plone.app.testing import PLONE_FIXTURE\n    from plone.app.testing import FunctionalTesting\n\n    class MyFixture(Layer):\n        defaultBases = (PLONE_FIXTURE,)\n\n        ...\n\n    MY_FIXTURE = MyFixture()\n    MY_ZSERVER = FunctionalTesting(bases=(MY_FIXTURE, z2.ZSERVER_FIXTURE), name='MyFixture:ZServer')\n\nSee the description of the ``z2.ZSERVER`` layer in `plone.testing`_\nfor further details.\n\nPlone FTP server\n----------------\n\n+------------+--------------------------------------------------+\n| Layer:     | ``plone.app.testing.PLONE_FTP_SERVER``           |\n+------------+--------------------------------------------------+\n| Class:     | ``plone.app.testing.layers.FunctionalTesting``   |\n+------------+--------------------------------------------------+\n| Bases:     | ``plone.app.testing.PLONE_FIXTURE``              |\n|            | ``plone.testing.z2.ZSERVER_FIXTURE``             |\n+------------+--------------------------------------------------+\n| Resources: | ``portal`` (test setup only)                     |\n+------------+--------------------------------------------------+\n\nThis is layer is intended for functional testing using a live FTP server.\n\nIt is semantically equivalent to the ``PLONE_ZSERVER`` layer.\n\nSee the description of the ``z2.FTP_SERVER`` layer in `plone.testing`_\nfor further details.\n\nHelper functions\n================\n\nA number of helper functions are provided for use in tests and custom layers.\n\nPlone site context manager\n--------------------------\n\n``ploneSite(db=None, connection=None, environ=None)``\n    Use this context manager to access and make changes to the Plone site\n    during layer setup. In most cases, you will use it without arguments,\n    but if you have special needs, you can tie it to a particular database\n    instance. See the description of the ``zopeApp()`` context manager in\n    `plone.testing`_ (which this context manager uses internally) for details.\n\n    The usual pattern is to call it during ``setUp()`` or ``tearDown()`` in\n    your own layers::\n\n        from plone.testing import Layer\n        from plone.app.testing import ploneSite\n\n        class MyLayer(Layer):\n\n            def setUp(self):\n\n                ...\n\n                with ploneSite() as portal:\n\n                    # perform operations on the portal, e.g.\n                    portal.title = u\"New title\"\n\n    Here, ``portal`` is the Plone site root. A transaction is begun before\n    entering the ``with`` block, and will be committed upon exiting the block,\n    unless an exception is raised, in which case it will be rolled back.\n\n    Inside the block, the local component site is set to the Plone site root,\n    so that local component lookups should work.\n\n    **Warning:** Do not attempt to load ZCML files inside a ``ploneSite``\n    block. Because the local site is set to the Plone site, you may end up\n    accidentally registering components in the local site manager, which can\n    cause pickling errors later.\n\n    **Note:** You should not use this in a test, or in a ``testSetUp()`` or\n    ``testTearDown()`` method of a layer based on one of the layer in this\n    package. Use the ``portal`` resource instead.\n\n    **Also note:** If you are writing a layer setting up a Plone site fixture,\n    you may want to use the ``PloneSandboxLayer`` layer base class, and\n    implement the ``setUpZope()``, ``setUpPloneSite()``, ``tearDownZope()``\n    and/or ``tearDownPloneSite()`` methods instead. See below.\n\nUser management\n---------------\n\n``login(portal, userName)``\n    Simulate login as the given user. This is based on the ``z2.login()``\n    helper in `plone.testing`_, but instead of passing a specific user folder,\n    you pass the portal (e.g. as obtained via the ``portal`` layer resource).\n\n    For example::\n\n        import unittest2 as unittest\n\n        from plone.app.testing import PLONE_INTEGRATION_TESTING\n        from plone.app.testing import TEST_USER_NAME\n        from plone.app.testing import login\n\n        ...\n\n        class MyTest(unittest.TestCase):\n\n            layer = PLONE_INTEGRATION_TESTING\n\n            def test_something(self):\n                portal = self.layer['portal']\n                login(portal, TEST_USER_NAME)\n\n                ...\n\n``logout()``\n    Simulate logging out, i.e. becoming the anonymous user. This is equivalent\n    to the ``z2.logout()`` helper in `plone.testing`_.\n\n    For example::\n\n        import unittest2 as unittest\n\n        from plone.app.testing import PLONE_INTEGRATION_TESTING\n        from plone.app.testing import logout\n\n        ...\n\n        class MyTest(unittest.TestCase):\n\n            layer = PLONE_INTEGRATION_TESTING\n\n            def test_something(self):\n                portal = self.layer['portal']\n                logout()\n\n                ...\n\n``setRoles(portal, userId, roles)``\n    Set the roles for the given user. ``roles`` is a list of roles.\n\n    For example::\n\n        import unittest2 as unittest\n\n        from plone.app.testing import PLONE_INTEGRATION_TESTING\n        from plone.app.testing import TEST_USER_ID\n        from plone.app.testing import setRoles\n\n        ...\n\n        class MyTest(unittest.TestCase):\n\n            layer = PLONE_INTEGRATION_TESTING\n\n            def test_something(self):\n                portal = self.layer['portal']\n                setRoles(portal, TEST_USER_ID, ['Manager'])\n\nProduct and profile installation\n--------------------------------\n\n``applyProfile(portal, profileName, blacklisted_steps=None)``\n    Install a GenericSetup profile (usually an extension profile) by name,\n    using the ``portal_setup`` tool. The name is normally made up of a package\n    name and a profile name. Do not use the ``profile-`` prefix.\n\n    For example::\n\n        from plone.testing import Layer\n\n        from plone.app.testing import ploneSite\n        from plone.app.testing import applyProfile\n\n        ...\n\n        class MyLayer(Layer):\n\n            ...\n\n            def setUp(self):\n\n                ...\n\n                with ploneSite() as portal:\n                    applyProfile(portal, 'my.product:default')\n\n                    ...\n\n``quickInstallProduct(portal, productName, reinstall=False)``\n    Use this function to install a particular product into the given Plone\n    site, using the ``portal_quickinstaller`` tool. If ``reinstall`` is\n    ``False`` and the product is already installed, nothing will happen; if\n    ``reinstall`` is ``True``, the product will be reinstalled. The\n    ``productName`` should be a full dotted name, e.g. ``Products.MyProduct``,\n    or ``my.product``.\n\n    For example::\n\n        from plone.testing import Layer\n\n        from plone.app.testing import ploneSite\n        from plone.app.testing import quickInstallProduct\n\n        ...\n\n        class MyLayer(Layer):\n\n            ...\n\n            def setUp(self):\n\n                ...\n\n                with ploneSite() as portal:\n                    quickInstallProduct(portal, 'my.product')\n\n                    ...\n\nComponent architecture sandboxing\n---------------------------------\n\n``pushGlobalRegistry(portal, new=None, name=None)``\n    Create or obtain a stack of global component registries, and push a new\n    registry to the top of the stack. This allows Zope Component Architecture\n    registrations (e.g. loaded via ZCML) to be effectively torn down.\n\n    If you are going to use this function, please read the corresponding\n    documentation for ``zca.pushGlobalRegistry()`` in `plone.testing`_. In\n    particular, note that you *must* reciprocally call ``popGlobalRegistry()``\n    (see below).\n\n    This helper is based on ``zca.pushGlobalRegistry()``, but will also fix\n    up the local component registry in the Plone site ``portal`` so that it\n    has the correct bases.\n\n    For example::\n\n        from plone.testing import Layer\n\n        from plone.app.testing import ploneSite\n        from plone.app.testing import pushGlobalRegistry\n        from plone.app.testing import popGlobalRegistry\n\n        ...\n\n        class MyLayer(Layer):\n\n            ...\n\n            def setUp(self):\n\n                ...\n\n                with ploneSite() as portal:\n                    pushGlobalRegistry(portal)\n\n                    ...\n\n``popGlobalRegistry(portal)``\n    Tear down the top of the component architecture stack, as created with\n    ``pushGlobalRegistry()``\n\n    For example::\n\n        ...\n\n            def tearDown(self):\n\n                with ploneSite() as portal:\n                    popGlobalRegistry(portal)\n\nGlobal state cleanup\n--------------------\n\n``tearDownMultiPluginRegistration(pluginName)``\n    PluggableAuthService \"MultiPlugins\" are kept in a global registry. If\n    you have registered a plugin, e.g. using the ``registerMultiPlugin()``\n    API, you should tear that registration down in your layer's ``tearDown()``\n    method. You can use this helper, passing a plugin name.\n\n    For example::\n\n        from plone.testing import Layer\n\n        from plone.app.testing import ploneSite\n        from plone.app.testing import tearDownMultiPluginRegistration\n\n        ...\n\n        class MyLayer(Layer):\n\n            ...\n\n            def tearDown(self):\n\n                tearDownMultiPluginRegistration('MyPlugin')\n\n                ...\n\nLayer base class\n================\n\nIf you are writing a custom layer to test your own Plone add-on product, you\nwill often want to do the following on setup:\n\n1. Stack a new ``DemoStorage`` on top of the one from the base layer. This\n   ensures that any persistent changes performed during layer setup can be\n   torn down completely, simply by popping the demo storage.\n\n2. Stack a new ZCML configuration context. This keeps separate the information\n   about which ZCML files were loaded, in case other, independent layers want\n   to load those same files after this layer has been torn down.\n\n3. Push a new global component registry. This allows you to register\n   components (e.g. by loading ZCML or using the test API from\n   ``zope.component``) and tear down those registration easily by popping the\n   component registry.\n\n4. Load your product's ZCML configuration\n\n5. Install the product into the test fixture Plone site\n\nOf course, you may wish to make other changes too, such as creating some base\ncontent or changing some settings.\n\nOn tear-down, you will then want to:\n\n1. Remove any Pluggable Authentication Service \"multi-plugins\" that were added\n   to the global registry during setup.\n\n2. Pop the global component registry to unregister components loaded via ZCML.\n\n3. Pop the configuration context resource to restore its state.\n\n4. Pop the ``DemoStorage`` to undo any persistent changes.\n\nIf you have made other changes on setup that are not covered by this broad\ntear-down, you'll also want to tear those down explicitly here.\n\nStacking a demo storage and component registry is the safest way to avoid\nfixtures bleeding between tests. However, it can be tricky to ensure that\neverything happens in the right order.\n\nTo make things easier, you can use the ``PloneSandboxLayer`` layer base class.\nThis extends ``plone.testing.Layer`` and implements ``setUp()`` and\n``tearDown()`` for you. You simply have to override one or more of the\nfollowing methods:\n\n``setUpZope(self, app, configurationContext)``\n    This is called during setup. ``app`` is the Zope application root.\n    ``configurationContext`` is a newly stacked ZCML configuration context.\n    Use this to load ZCML, install products using the helper\n    ``plone.testing.z2.installProduct()``, or manipulate other global state.\n\n``setUpPloneSite(self, portal)``\n    This is called during setup. ``portal`` is the Plone site root as\n    configured by the ``ploneSite()`` context manager. Use this to make\n    persistent changes inside the Plone site, such as installing products\n    using the ``applyProfile()`` or ``quickInstallProduct()`` helpers, or\n    setting up default content.\n\n``tearDownZope(self, app)``\n    This is called during tear-down, before the global component registry and\n    stacked ``DemoStorage`` are popped. Use this to tear down any additional\n    global state.\n\n    **Note:** Global component registrations PAS multi-plugin registrations are\n    automatically torn down. Product installations are not, so you should use\n    the ``uninstallProduct()`` helper if any products were installed during\n    ``setUpZope()``.\n\n``tearDownPloneSite(self, portal)``\n    This is called during tear-down, before the global component registry and\n    stacked ``DemoStorage`` are popped. During this method, the local\n    component site hook is set, giving you access to local components.\n\n    **Note:** Persistent changes to the ZODB are automatically torn down by\n    virtue of a stacked ``DemoStorage``. Thus, this method is less commonly\n    used than the others described here.\n\nLet's show a more comprehensive example of what such a layer may look like.\nImagine we have a product ``my.product``. It has a ``configure.zcml`` file\nthat loads some components and registers a ``GenericSetup`` profile, making it\ninstallable in the Plone site. On layer setup, we want to load the product's\nconfiguration and install it into the Plone site.\n\nThe layer would conventionally live in a module ``testing.py`` at the root of\nthe package, i.e. ``my.product.testing``::\n\n    from plone.app.testing import PloneSandboxLayer\n    from plone.app.testing import PLONE_FIXTURE\n    from plone.app.testing import IntegrationTesting\n\n    from plone.testing import z2\n\n    class MyProduct(PloneSandboxLayer):\n\n        defaultBases = (PLONE_FIXTURE,)\n\n        def setUpZope(self, app, configurationContext):\n            # Load ZCML\n            import my.product\n            self.loadZCML(package=my.product)\n\n            # Install product and call its initialize() function\n            z2.installProduct(app, 'my.product')\n\n            # Note: you can skip this if my.product is not a Zope 2-style\n            # product, i.e. it is not in the Products.* namespace and it\n            # does not have a <five:registerPackage /> directive in its\n            # configure.zcml.\n\n        def setUpPloneSite(self, portal):\n            # Install into Plone site using portal_setup\n            self.applyProfile(portal, 'my.product:default')\n\n        def tearDownZope(self, app):\n            # Uninstall product\n            z2.uninstallProduct(app, 'my.product')\n\n            # Note: Again, you can skip this if my.product is not a Zope 2-\n            # style product\n\n    MY_PRODUCT_FIXTURE = MyProduct()\n    MY_PRODUCT_INTEGRATION_TESTING = IntegrationTesting(bases=(MY_PRODUCT_FIXTURE,), name=\"MyProduct:Integration\")\n\nHere, ``MY_PRODUCT_FIXTURE`` is the \"fixture\" base layer. Other layers can\nuse this as a base if they want to build on this fixture, but it would not\nbe used in tests directly. For that, we have created an ``IntegrationTesting``\ninstance, ``MY_PRODUCT_INTEGRATION_TESTING``.\n\nOf course, we could have created a ``FunctionalTesting`` instance as\nwell, e.g.::\n\n    MY_PRODUCT_FUNCTIONAL_TESTING = FunctionalTesting(bases=(MY_PRODUCT_FIXTURE,), name=\"MyProduct:Functional\")\n\nOf course, we could do a lot more in the layer setup. For example, let's say\nthe product had a content type 'my.product.page' and we wanted to create some\ntest content. We could do that with::\n\n    from plone.app.testing import TEST_USER_ID\n    from plone.app.testing import TEST_USER_NAME\n    from plone.app.testing import login\n    from plone.app.testing import setRoles\n\n    ...\n\n        def setUpPloneSite(self, portal):\n\n            ...\n\n            setRoles(portal, TEST_USER_ID, ['Manager'])\n            login(portal, TEST_USER_NAME)\n            portal.invokeFactory('my.product.page', 'page-1', title=u\"Page 1\")\n            setRoles(portal, TEST_USER_ID, ['Member'])\n\n    ...\n\nNote that unlike in a test, there is no user logged in at layer setup time,\nso we have to explicitly log in as the test user. Here, we also grant the test\nuser the ``Manager`` role temporarily, to allow object construction (which\nperforms an explicit permission check).\n\n    **Note:** Automatic tear down suffices for all the test setup above. If\n    the only changes made during layer setup are to persistent, in-ZODB data,\n    or the global component registry then no additional tear-down is required.\n    For any other global state being managed, you should write a\n    ``tearDownPloneSite()`` method to perform the necessary cleanup.\n\nGiven this layer, we could write a test (e.g. in ``tests.py``) like::\n\n    import unittest2 as unittest\n    from my.product.testing import MY_PRODUCT_INTEGRATION_TESTING\n\n    class IntegrationTest(unittest.TestCase):\n\n        layer = MY_PRODUCT_INTEGRATION_TESTING\n\n        def test_page_dublin_core_title(self):\n            portal = self.layer['portal']\n\n            page1 = portal['page-1']\n            page1.title = u\"Some title\"\n\n            self.assertEqual(page1.Title(), u\"Some title\")\n\nPlease see `plone.testing`_ for more information about how to write and run\ntests and assertions.\n\nCommon test patterns\n====================\n\n`plone.testing`_'s documentation contains details about the fundamental\ntechniques for writing tests of various kinds. In a Plone context, however,\nsome patterns tend to crop up time and again. Below, we will attempt to\ncatalogue some of the more commonly used patterns via short code samples.\n\nThe examples in this section are all intended to be used in tests. Some may\nalso be useful in layer set-up/tear-down. We have used ``unittest`` syntax\nhere, although most of these examples could equally be adopted to doctests.\n\nWe will assume that you are using a layer that has ``PLONE_FIXTURE`` as a base\n(whether directly or indirectly) and uses the ``IntegrationTesting`` or\n``FunctionalTesting`` classes as shown above.\n\nWe will also assume that the variables ``app``, ``portal`` and ``request`` are\ndefined from the relative layer resources, e.g. with::\n\n    app = self.layer['app']\n    portal = self.layer['portal']\n    request = self.layer['request']\n\nNote that in a doctest set up using the ``layered()`` function from\n``plone.testing``, ``layer`` is in the global namespace, so you would do e.g.\n``portal = layer['portal']``.\n\nWhere imports are required, they are shown alongside the code example. If\na given import or variable is used more than once in the same section, it\nwill only be shown once.\n\nBasic content management\n------------------------\n\nTo create a content item of type 'Folder' with the id 'f1' in the root of\nthe portal::\n\n    portal.invokeFactory('Folder', 'f1', title=u\"Folder 1\")\n\nThe ``title`` argument is optional. Other basic properties, like\n``description``, can be set as well.\n\nNote that this may fail with an ``Unauthorized`` exception, since the test\nuser won't normally have permissions to add content in the portal root, and\nthe ``invokeFactory()`` method performs an explicit security check. You can\nset the roles of the test user to ensure that he has the necessary\npermissions::\n\n    from plone.app.testing import setRoles\n    from plone.app.testing import TEST_USER_ID\n\n    setRoles(portal, TEST_USER_ID, ['Manager'])\n    portal.invokeFactory('Folder', 'f1', title=u\"Folder 1\")\n\nTo obtain this object, acquisition-wrapped in its parent::\n\n    f1 = portal['f1']\n\nTo make an assertion against an attribute or method of this object::\n\n    self.assertEqual(f1.Title(), u\"Folder 1\")\n\nTo modify the object::\n\n    f1.setTitle(u\"Some title\")\n\nTo add another item inside the folder f1::\n\n    f1.invokeFactory('Document', 'd1', title=u\"Document 1\")\n    d1 = f1['d1']\n\nTo check if an object is in a container::\n\n    self.assertTrue('f1' in portal)\n\nTo delete an object from a container:\n\n    del portal['f1']\n\nThere is no content or workflows installed by default. You can enable workflows::\n\n    portal.portal_workflow.setDefaultChain(\"simple_publication_workflow\")\n\nSearching\n---------\n\nTo obtain the ``portal_catalog`` tool::\n\n    from Products.CMFCore.utils import getToolByName\n\n    catalog = getToolByName(portal, 'portal_catalog')\n\nTo search the catalog::\n\n    results = catalog(portal_type=\"Document\")\n\nKeyword arguments are search parameters. The result is a lazy list. You can\ncall ``len()`` on it to get the number of search results, or iterate through\nit. The items in the list are catalog brains. They have attributes that\ncorrespond to the \"metadata\" columns configured for the catalog, e.g.\n``Title``, ``Description``, etc. Note that these are simple attributes (not\nmethods), and contain the value of the corresponding attribute or method from\nthe source object at the time the object was cataloged (i.e. they are not\nnecessarily up to date).\n\nTo make assertions against the search results::\n\n    self.assertEqual(len(results), 1)\n\n    # Copy the list into memory so that we can use [] notation\n    results = list(results)\n\n    # Check the first (and in this case only) result in the list\n    self.assertEqual(results[0].Title, u\"Document 1\")\n\nTo get the path of a given item in the search results::\n\n    self.assertEqual(resuls[0].getPath(), portal.absolute_url_path() + '/f1/d1')\n\nTo get an absolute URL::\n\n    self.assertEqual(resuls[0].getURL(), portal.absolute_url() + '/f1/d1')\n\nTo get the original object::\n\n    obj = results[0].getObject()\n\nTo re-index an object d1 so that its catalog information is up to date::\n\n    d1.reindexObject()\n\nUser management\n---------------\n\nTo create a new user::\n\n    from Products.CMFCore.utils import getToolByName\n\n    acl_users = getToolByName(portal, 'acl_users')\n\n    acl_users.userFolderAddUser('user1', 'secret', ['Member'], [])\n\nThe arguments are the username (which will also be the user id), the password,\na list of roles, and a list of domains (rarely used).\n\nTo make a particular user active (\"logged in\") in the integration testing\nenvironment use the ``login`` method and pass it the username::\n\n    from plone.app.testing import login\n\n    login(portal, 'user1')\n\nTo log out (become anonymous)::\n\n    from plone.app.testing import logout\n\n    logout()\n\nTo obtain the current user::\n\n    from AccessControl import getSecurityManager\n\n    user = getSecurityManager().getUser()\n\nTo obtain a user by name::\n\n    user = acl_users.getUser('user1')\n\nOr by user id (id and username are often the same, but can differ in real-world\nscenarios)::\n\n    user = acl_users.getUserById('user1')\n\nTo get the user's user name::\n\n    userName = user.getUserName()\n\nTo get the user's id::\n\n    userId = user.getId()\n\nPermissions and roles\n---------------------\n\nTo get a user's roles in a particular context (taking local roles into\naccount)::\n\n    from AccessControl import getSecurityManager\n\n    user = getSecurityManager().getUser()\n\n    self.assertEqual(user.getRolesInContext(portal), ['Member'])\n\nTo change the test user's roles::\n\n    from plone.app.testing import setRoles\n    from plone.app.testing import TEST_USER_ID\n\n    setRoles(portal, TEST_USER_ID, ['Member', 'Manager'])\n\nPass a different user name to change the roles of another user.\n\nTo grant local roles to a user in the folder f1::\n\n    f1.manage_setLocalRoles(TEST_USER_ID, ('Reviewer',))\n\nTo check the local roles of a given user in the folder 'f1'::\n\n    self.assertEqual(f1.get_local_roles_for_userid(TEST_USER_ID), ('Reviewer',))\n\nTo grant the 'View' permission to the roles 'Member' and 'Manager' in the\nportal root without acquiring additional roles from its parents::\n\n    portal.manage_permission('View', ['Member', 'Manager'], acquire=False)\n\nThis method can also be invoked on a folder or individual content item.\n\nTo assert which roles have the permission 'View' in the context of the\nportal::\n\n    roles = [r['name'] for r in portal.rolesOfPermission('View') if r['selected']]\n    self.assertEqual(roles, ['Member', 'Manager'])\n\nTo assert which permissions have been granted to the 'Reviewer' role in the\ncontext of the portal::\n\n    permissions = [p['name'] for p in portal.permissionsOfRole('Reviewer') if p['selected']]\n    self.assertTrue('Review portal content' in permissions)\n\nTo add a new role::\n\n    portal._addRole('Tester')\n\nThis can now be assigned to users globally (using the ``setRoles`` helper)\nor locally (using ``manage_setLocalRoles()``).\n\nTo assert which roles are available in a given context::\n\n    self.assertTrue('Tester' in portal.valid_roles())\n\nWorkflow\n--------\n\nTo set the default workflow chain::\n\n    from Products.CMFCore.utils import getToolByName\n\n    workflowTool = getToolByName(portal, 'portal_workflow')\n\n    workflowTool.setDefaultChain('my_workflow')\n\nIn Plone, most chains contain only one workflow, but the ``portal_workflow``\ntool supports longer chains, where an item is subject to more than one\nworkflow simultaneously.\n\nTo set a multi-workflow chain, separate workflow names by commas.\n\nTo get the default workflow chain::\n\n    self.assertEqual(workflowTool.getDefaultChain(), ('my_workflow',))\n\nTo set the workflow chain for the 'Document' type::\n\n    workflowTool.setChainForPortalTypes(('Document',), 'my_workflow')\n\nYou can pass multiple type names to set multiple chains at once. To set a\nmulti-workflow chain, separate workflow names by commas. To indicate that a\ntype should use the default workflow, use the special chain name '(Default)'.\n\nTo get the workflow chain for the portal type 'Document'::\n\n    chains = dict(workflowTool.listChainOverrides())\n    defaultChain = workflowTool.getDefaultChain()\n    documentChain = chains.get('Document', defaultChain)\n\n    self.assertEqual(documentChain, ('my_other_workflow',))\n\nTo get the current workflow chain for the content object f1::\n\n    self.assertEqual(workflowTool.getChainFor(f1), ('my_workflow',))\n\nTo update all permissions after changing the workflow::\n\n    workflowTool.updateRoleMappings()\n\nTo change the workflow state of the content object f1 by invoking the\ntransaction 'publish'::\n\n    workflowTool.doActionFor(f1, 'publish')\n\nNote that this performs an explicit permission check, so if the current user\ndoesn't have permission to perform this workflow action, you may get an error\nindicating the action is not available. If so, use ``login()`` or\n``setRoles()`` to ensure the current user is able to change the workflow\nstate.\n\nTo check the current workflow state of the content object f1::\n\n    self.assertEqual(workflowTool.getInfoFor(f1, 'review_state'), 'published')\n\nProperties\n----------\n\nTo set the value of a property on the portal root::\n\n    portal._setPropValue('title', u\"My title\")\n\nTo assert the value of a property on the portal root::\n\n    self.assertEqual(portal.getProperty('title'), u\"My title\")\n\nTo change the value of a property in a property sheet in the\n``portal_properties`` tool::\n\n    from Products.CMFCore.utils import getToolByName\n\n    propertiesTool = getToolByName(portal, 'portal_properties')\n    siteProperties = propertiesTool['site_properties']\n\n    siteProperties._setPropValue('many_users', True)\n\nTo assert the value of a property in a property sheet in the\n``portal_properties`` tool::\n\n    self.assertEqual(siteProperties.getProperty('many_users'), True)\n\nInstalling products and extension profiles\n------------------------------------------\n\nTo apply a particular extension profile::\n\n    from plone.app.testing import applyProfile\n\n    applyProfile(portal, 'my.product:default')\n\nThis is the preferred method of installing a product's configuration.\n\nTo install an add-on product into the Plone site using the\n``portal_quickinstaller`` tool::\n\n    from plone.app.testing import quickInstallProduct\n\n    quickInstallProduct(portal, 'my.product')\n\nTo re-install a product using the quick-installer::\n\n    quickInstallProduct(portal, 'my.product', reinstall=True)\n\nNote that both of these assume the product's ZCML has been loaded, which is\nusually done during layer setup. See the layer examples above for more details\non how to do that.\n\nWhen writing a product that has an installation extension profile, it is often\ndesirable to write tests that inspect the state of the site after the profile\nhas been applied. Some of the more common such tests are shown below.\n\nTo verify that a product has been installed (e.g. as a dependency via\n``metadata.xml``)::\n\n    from Products.CMFCore.utils import getToolByName\n\n    quickinstaller = getToolByName(portal, 'portal_quickinstaller')\n    self.assertTrue(quickinstaller.isProductInstalled('my.product'))\n\nTo verify that a particular content type has been installed (e.g. via\n``types.xml``)::\n\n    typesTool = getToolByName(portal, 'portal_types')\n\n    self.assertNotEqual(typesTool.getTypeInfo('mytype'), None)\n\nTo verify that a new catalog index has been installed (e.g. via\n``catalog.xml``)::\n\n    catalog = getToolByName(portal, 'portal_catalog')\n\n    self.assertTrue('myindex' in catalog.indexes())\n\nTo verify that a new catalog metadata column has been added (e.g. via\n``catalog.xml``)::\n\n    self.assertTrue('myattr' in catalog.schema())\n\nTo verify that a new workflow has been installed (e.g. via\n``workflows.xml``)::\n\n    workflowTool = getToolByName(portal, 'portal_workflow')\n\n    self.assertNotEqual(workflowTool.getWorkflowById('my_workflow'), None)\n\nTo verify that a new workflow has been assigned to a type (e.g. via\n``workflows.xml``)::\n\n    self.assertEqual(dict(workflowTool.listChainOverrides())['mytype'], ('my_workflow',))\n\nTo verify that a new workflow has been set as the default (e.g. via\n``workflows.xml``)::\n\n    self.assertEqual(workflowTool.getDefaultChain(), ('my_workflow',))\n\nTo test the value of a property in the ``portal_properties`` tool (e.g. set\nvia ``propertiestool.xml``):::\n\n    propertiesTool = getToolByName(portal, 'portal_properties')\n    siteProperties = propertiesTool['site_properties']\n\n    self.assertEqual(siteProperties.getProperty('some_property'), \"some value\")\n\nTo verify that a stylesheet has been installed in the ``portal_css`` tool\n(e.g. via ``cssregistry.xml``)::\n\n    cssRegistry = getToolByName(portal, 'portal_css')\n\n    self.assertTrue('mystyles.css' in cssRegistry.getResourceIds())\n\nTo verify that a JavaScript resource has been installed in the\n``portal_javascripts`` tool (e.g. via ``jsregistry.xml``)::\n\n    jsRegistry = getToolByName(portal, 'portal_javascripts')\n\n    self.assertTrue('myscript.js' in jsRegistry.getResourceIds())\n\nTo verify that a new role has been added (e.g. via ``rolemap.xml``)::\n\n    self.assertTrue('NewRole' in portal.valid_roles())\n\nTo verify that a permission has been granted to a given set of roles (e.g. via\n``rolemap.xml``)::\n\n    roles = [r['name'] for r in portal.rolesOfPermission('My Permission') if r['selected']]\n    self.assertEqual(roles, ['Member', 'Manager'])\n\nTraversal\n---------\n\nTo traverse to a view, page template or other resource, use\n``restrictedTraverse()`` with a relative path::\n\n    resource = portal.restrictedTraverse('f1/@@folder_contents')\n\nThe return value is a view object, page template object, or other resource.\nIt may be invoked to obtain an actual response (see below).\n\n``restrictedTraverse()`` performs an explicit security check, and so may\nraise ``Unauthorized`` if the current test user does not have permission to\nview the given resource. If you don't want that, you can use::\n\n    resource = portal.unrestrictedTraverse('f1/@@folder_contents')\n\nYou can call this on a folder or other content item as well, to traverse from\nthat starting point, e.g. this is equivalent to the first example above::\n\n    f1 = portal['f1']\n    resource = f1.restrictedTraverse('@@folder_contents')\n\nNote that this traversal will not take ``IPublishTraverse`` adapters into\naccount, and you cannot pass query string parameters. In fact,\n``restrictedTraverse()`` and ``unrestrictedTraverse()`` implement the type of\ntraversal that happens with path expressions in TAL, which is similar, but not\nidentical to URL traversal.\n\nTo look up a view manually::\n\n    from zope.component import getMultiAdapter\n\n    view = getMultiAdapter((f1, request), name=u\"folder_contents\")\n\nNote that the name here should not include the ``@@`` prefix.\n\nTo simulate an ``IPublishTraverse`` adapter call, presuming the view\nimplements ``IPublishTraverse``::\n\n    next = view.IPublishTraverse(request, u\"some-name\")\n\nOr, if the ``IPublishTraverse`` adapter is separate from the view::\n\n    from zope.publisher.interfaces import IPublishTraverse\n\n    publishTraverse = getMultiAdapter((f1, request), IPublishTraverse)\n    next = view.IPublishTraverse(request, u\"some-name\")\n\nTo simulate a form submission or query string parameters::\n\n    request.form.update({\n            'name': \"John Smith\",\n            'age':  23\n        })\n\nThe ``form`` dictionary contains the marshalled request. That is, if you are\nsimulating a query string parameter or posted form variable that uses a\nmarshaller like ``:int`` (e.g. ``age:int`` in the example above), the value\nin the ``form`` dictionary should be marshalled (an int instead of a string,\nin the example above), and the name should be the base name (``age`` instead\nof ``age:int``).\n\nTo invoke a view and obtain the response body as a string::\n\n    view = f1.restrictedTraverse('@@folder_contents')\n    body = view()\n\n    self.assertFalse(u\"An unexpected error occurred\" in body)\n\nPlease note that this approach is not perfect. In particular, the request\nis will not have the right URL or path information. If your view depends on\nthis, you can fake it by setting the relevant keys in the request, e.g.::\n\n    request.set('URL', f1.absolute_url() + '/@@folder_contents')\n    request.set('ACTUAL_URL', f1.absolute_url() + '/@@folder_contents')\n\nTo inspect the state of the request (e.g. after a view has been invoked)::\n\n    self.assertEqual(request.get('disable_border'), True)\n\nTo inspect response headers (e.g. after a view has been invoked)::\n\n    response = request.response\n\n    self.assertEqual(response.getHeader('content-type'), 'text/plain')\n\nSimulating browser interaction\n------------------------------\n\nEnd-to-end functional tests can use `zope.testbrowser`_ to simulate user\ninteraction. This acts as a web browser, connecting to Zope via a special\nchannel, making requests and obtaining responses.\n\n  **Note:** zope.testbrowser runs entirely in Python, and does not simulate\n  a JavaScript engine.\n\nNote that to use ``zope.testbrowser``, you need to use one of the functional\ntesting layers, e.g. ``PLONE_FUNCTIONAL_TESTING``, or another layer\ninstantiated with the ``FunctionalTesting`` class.\n\nIf you want to create some initial content, you can do so either in a layer,\nor in the test itself, before invoking the test browser client. In the latter\ncase, you need to commit the transaction before it becomes available, e.g.::\n\n    from plone.app.testing import setRoles\n    from plone.app.testing import TEST_USER_ID\n\n    # Make some changes\n    setRoles(portal, TEST_USER_ID, ['Manager'])\n    portal.invokeFactory('Folder', 'f1', title=u\"Folder 1\")\n    setRoles(portal, TEST_USER_ID, ['Member'])\n\n    # Commit so that the test browser sees these changes\n    import transaction\n    transaction.commit()\n\nTo obtain a new test browser client::\n\n    from plone.testing.z2 import Browser\n\n    # This is usually self.app (Zope root) or site.portal (test Plone site root)\n    browser = Browser(app)\n\nTo open a given URL::\n\n    portalURL = portal.absolute_url()\n    browser.open(portalURL)\n\nTo inspect the response::\n\n    self.assertTrue(u\"Welcome\" in browser.contents)\n\nTo inspect response headers::\n\n    self.assertEqual(browser.headers['content-type'], 'text/html; charset=utf-8')\n\nTo follow a link::\n\n    browser.getLink('Edit').click()\n\nThis gets a link by its text. To get a link by HTML id::\n\n    browser.getLink(id='edit-link').click()\n\nTo verify the current URL::\n\n    self.assertEqual(portalURL + '/edit', browser.url)\n\nTo set a form control value::\n\n    browser.getControl('Age').value = u\"30\"\n\nThis gets the control by its associated label. To get a control by its form\nvariable name::\n\n    browser.getControl(name='age:int').value = u\"30\"\n\nSee the `zope.testbrowser`_ documentation for more details on how to select\nand manipulate various types of controls.\n\nTo submit a form by clicking a button::\n\n    browser.getControl('Save').click()\n\nAgain, this uses the label to find the control. To use the form variable\nname::\n\n    browser.getControl(name='form.button.Save').click()\n\nTo simulate HTTP BASIC authentication and remain logged in for all\nrequests::\n\n    from plone.app.testing import TEST_USER_NAME, TEST_USER_PASSWORD\n\n    browser.addHeader('Authorization', 'Basic %s:%s' % (TEST_USER_NAME, TEST_USER_PASSWORD,))\n\nTo simulate logging in via the login form::\n\n    browser.open(portalURL + '/login_form')\n    browser.getControl(name='__ac_name').value = TEST_USER_NAME\n    browser.getControl(name='__ac_password').value = TEST_USER_PASSWORD\n    browser.getControl(name='submit').click()\n\nTo simulate logging out::\n\n    browser.open(portalURL + '/logout')\n\nDebugging tips\n~~~~~~~~~~~~~~\n\nBy default, only HTTP error codes (e.g. 500 Server Side Error) are shown when\nan error occurs on the server. To see more details, set ``handleErrors`` to\nFalse::\n\n    browser.handleErrors = False\n\nTo inspect the error log and obtain a full traceback of the latest entry::\n\n    from Products.CMFCore.utils import getToolByName\n\n    errorLog = getToolByName(portal, 'error_log')\n    print errorLog.getLogEntries()[-1]['tb_text']\n\nTo save the current response to an HTML file::\n\n    open('/tmp/testbrowser.html', 'w').write(browser.contents)\n\nYou can now open this file and use tools like Firebug to inspect the structure\nof the page. You should remove the file afterwards.\n\nComparison with ZopeTestCase/PloneTestCase\n==========================================\n\n`plone.testing`_ and ``plone.app.testing`` have in part evolved from\n``ZopeTestCase``, which ships with Zope 2 in the ``Testing`` package, and\n`Products.PloneTestCase`_, which ships with Plone and is used by Plone itself\nas well as numerous add-on products.\n\nIf you are familiar with ``ZopeTestCase`` and ``PloneTestCase``, the concepts\nof these package should be familiar to you. However, there are some important\ndifferences to bear in mind.\n\n* ``plone.testing`` and ``plone.app.testing`` are unburdened by the legacy\n  support that ``ZopeTestCase`` and ``PloneTestCase`` have to include. This\n  makes them smaller and easier to understand and maintain.\n\n* Conversely, ``plone.testing`` only works with Python 2.6 and Zope 2.12 and\n  later. ``plone.app.testing`` only works with Plone 4 and later. If you need\n  to write tests that run against older versions of Plone, you'll need to use\n  ``PloneTestCase``.\n\n* ``ZopeTestCase``/``PloneTestCase`` were written before layers were available\n  as a setup mechanism. ``plone.testing`` is very layer-oriented.\n\n* ``PloneTestCase`` provides a base class, also called ``PloneTestCase``,\n  which you must use, as it performs setup and tear-down. ``plone.testing``\n  moves shared state to layers and layer resources, and does not impose any\n  particular base class for tests. This does sometimes mean a little more\n  typing (e.g. ``self.layer['portal']`` vs. ``self.portal``), but it makes\n  it much easier to control and re-use test fixtures. It also makes your\n  test code simpler and more explicit.\n\n* ``ZopeTestCase`` has an ``installProduct()`` function and a corresponding\n  ``installPackage()`` function. `plone.testing`_ has only an\n  ``installProduct()``, which can configure any kind of Zope 2 product (i.e.\n  packages in the ``Products.*`` namespace, old-style products in a special\n  ``Products`` folder, or packages in any namespace that have had their ZCML\n  loaded and which include a ``<five:registerPackage />`` directive in their\n  configuration). Note that you must pass a full dotted name to this function,\n  even for \"old-style\" products in the ``Products.*`` namespace, e.g.\n  ``Products.LinguaPlone`` instead of ``LinguaPlone``.\n\n* On setup, ``PloneTestCase`` will load Zope 2's default ``site.zcml``. This\n  in turn will load all ZCML for all packages in the ``Products.*`` namespace.\n  ``plone.testing`` does not do this (and you are strongly encouraged from\n  doing it yourself), because it is easy to accidentally include packages in\n  your fixture that you didn't intend to be there (and which can actually\n  change the fixture substantially). You should load your package's ZCML\n  explicitly. See the `plone.testing`_ documentation for details.\n\n* When using ``PloneTestCase``, any package that has been loaded onto\n  ``sys.path`` and which defines the ``z3c.autoinclude.plugin:plone`` entry\n  point will be loaded via `z3c.autoinclude`_'s plugin mechanism. This loading\n  is explicitly disabled, for the same reasons that the ``Products.*`` auto-\n  loading is. You should load your packages' configuration explicitly.\n\n* ``PloneTestCase`` sets up a basic fixture that has member folder enabled,\n  and in which the test user's member folder is available as ``self.folder``.\n  The ``plone_workflow`` workflow is also installed as the default.\n  ``plone.app.testing`` takes a more minimalist approach. To create a test\n  folder owned by the test user that is similar to ``self.folder`` in a\n  ``PloneTestCase``, you can do::\n\n        import unittest2 as unittest\n        from plone.app.testing import TEST_USER_ID, setRoles\n        from plone.app.testing import PLONE_INTEGRATION_TESTING\n\n        class MyTest(unitest.TestCase):\n\n            layer = PLONE_INTEGRATION_TESTING\n\n            def setUp(self):\n                self.portal = self.layer['portal']\n\n                setRoles(self.portal, TEST_USER_ID, ['Manager'])\n                self.portal.invokeFactory('Folder', 'test-folder')\n                setRoles(self.portal, TEST_USER_ID, ['Member'])\n\n                self.folder = self.portal['test-folder']\n\n  You could of course do this type of setup in your own layer and expose it\n  as a resource instead.\n\n* To use `zope.testbrowser`_ with ``PloneTestCase``, you should use its\n  ``FunctionalTestCase`` as a base class, and then use the following pattern::\n\n        from Products.Five.testbrowser import Browser\n        browser = Browser()\n\n  The equivalent pattern in ``plone.app.testing`` is to use the\n  ``FunctionalTesting`` test lifecycle layer (see example above), and then\n  use::\n\n        from plone.testing.z2 import Browser\n        browser = Browser(self.layer['app'])\n\n  Also note that if you have made changes to the fixture prior to calling\n  ``browser.open()``, they will *not* be visible until you perform an\n  explicit commit. See the ``zope.testbrowser`` examples above for details.\n\n.. _plone.testing: http://pypi.python.org/pypi/plone.testing\n.. _zope.testing: http://pypi.python.org/pypi/zope.testing\n.. _z3c.autoinclude: http://pypi.python.org/pypi/z3c.autoinclude\n.. _zope.testbrowser: http://pypi.python.org/pypi/zope.testbrowser\n.. _Products.PloneTestCase: http://pypi.python.org/pypi/Products.PloneTestCase\n\n\nChangelog\n=========\n\n5.0.8 (2017-10-25)\n------------------\n\nBug fixes:\n\n- Load Products.PageTemplates ZCML.  [tschorr]\n\n\n5.0.7 (2017-07-03)\n------------------\n\nBug fixes:\n\n- Remove deprecated __of__ calls on BrowserViews\n  [MrTango]\n\n- Remove unittest2 dependency\n  [kakshay21]\n\n\n5.0.6 (2016-12-19)\n------------------\n\nBug fixes:\n\n- No longer try to load `Products.SecureMailHost` and its zcml.\n  This is not shipped with Plone 5.0 or higher.  [maurits]\n\n\n5.0.5 (2016-11-19)\n------------------\n\nBug fixes:\n\n- Do not use install Products.PasswordResetTool in the PloneFixture if it isn't available.\n  [thet]\n\n\n5.0.4 (2016-09-23)\n------------------\n\nNew features:\n\n- Use get_installer instead of portal_quickinstaller when available, for\n  Plone 5.1 and higher.  [maurits]\n\n- In PloneSandboxLayer make profile upgrade versions persistent.  This\n  way installed profile versions get reset in teardown.  [maurits]\n\n\n5.0.3 (2016-09-07)\n------------------\n\nBug fixes:\n\n- Load Products.CMFFormController in tests.  It is still used by core\n  Plone, also without Archetypes.  This makes the CMFFormController\n  tests pass.  [maurits]\n\n\n5.0.2 (2016-06-07)\n------------------\n\nFixes:\n\n- Do not use install Products.SecureMailHost in the PloneFixture if it isn't available\n  [vangheem]\n\n\n5.0.1 (2016-02-26)\n------------------\n\nFixes:\n\n- Replace deprecated ``zope.site.hooks`` import with ``zope.component.hooks``.\n  [thet]\n\n\n5.0.0 (2016-02-20)\n------------------\n\nNew:\n\n- Add a MOCK_MAILHOST_FIXTURE fixture that integration and functional tests layers can depend on.\n  This allows to easily check how mails are sent from Plone.\n  [gforcada]\n\nFixes:\n\n- Fix ``layers.rst`` doctest to be compatible with older and newer zope.testrunner layer ordering.\n  [thet]\n\n- Depend on ``zope.testrunner`` and fix deprecated usage of ``zope.testing.testrunner``.\n  [thet]\n\n- Cleanup code, flake8, sort imports, etc.\n  [gforcada]\n\n- Fix RAM cache error with bbb.PloneTestCase.\n  [ebrehault]\n\n\n5.0b6 (2015-08-22)\n------------------\n\n- No need for unittest2.\n  [gforcada]\n\n\n5.0b5 (2015-07-18)\n------------------\n\n- Do not install CMFDefault.\n  [tomgross]\n\n- Document PloneWithPackageLayer.\n  [gotcha]\n\n\n5.0b4 (2015-05-04)\n------------------\n\n- Do not install CMFFormController.\n  [timo]\n\n- Do not install CMFDefault\n  [tomgross]\n\n5.0b3 (2015-03-26)\n------------------\n\n- Remove PloneLanguageTool from PloneFixture.\n  [timo]\n\n\n5.0b2 (2015-03-13)\n------------------\n\n- remove test of applying an extension profile, we don't have a good one to\n  test now.\n  [davidagli]\n\n- fix test, plone.app.theming does not get recorded as installed .\n  [davisagli]\n\n- fix: ``Products.CMFPlone`` needs the ``gopip`` index from\n  ``plone.app.folder``. So latter has to be initialized before CMFPlones\n  profile is applied (which installs the index to catalog). At the moment\n  CMFPlone therefore registers the index itself, but plone.app.folder\n  registers it too, which resulted in plone/Products.CMFPlone#313\n  \"GopipIndex registered twice\" In tests the registration does not succedd,\n  because plone.app.folder was never initialized as z2 products. In order to\n  remove the misleading regisatration from CMFPlone we must take care that the\n  index is available, which is achieved with this change. Also minor pep8\n  optimizations in the file touched.\n  [jensens]\n\n- create memberfolder, if it is not there for testing.\n  [tomgross]\n\n\n5.0b1 (2014-10-23)\n------------------\n\n- Allow applyProfile to skip steps and all other options supported by\n  runAllImportStepsFromProfile of portal_setup-tool.\n  [pbauer, tomgross]\n\n\n5.0a2 (2014-04-19)\n------------------\n\n- Install Products.DateRecurringIndex for the PLONE_FIXTURE Layer.\n  [thet]\n\n\n5.0a1 (2014-02-22)\n------------------\n\n- Add 'ROBOT_TEST_LEVEL' to interfaces, so other packages can import it. This\n  makes things easier if we decide to change the value.\n  [timo]\n\n- Replace deprecated test assert statements.\n  [timo]\n\n- plonetheme.classic no longer ships with Plone, don't use it for\n  testing.\n  [esteele]\n\n- Clean up the zodbDB and configurationContext resources if there\n  is an error during the PloneSandboxLayer setUp.\n  [davisagli]\n\n- Make PLONE_FIXTURE not install a content type system.\n  Packages that need content types to run their tests should\n  pick the appropriate fixture from plone.app.contenttypes\n  or Products.ATContentTypes.\n  [davisagli]\n\n- Pin [robot] extra to ``robotsuite>=1.4.0``.\n  [saily]\n\n- Fix wrong spelling of ``reinstallProducts`` method in quickInstallProduct.\n  [saily]\n\n- Sync bbb PloneTestCase class with original one.\n  [tomgross]\n\n\n4.2.2 (2013-02-09)\n------------------\n\n- Add [robot] extras for requiring dependnecies for Robot Framework\n  tests with Selenium2Library\n  [datakurre]\n\n- Install PythonScripts as zope product\n  [mikejmets]\n\n\n4.2.1 (2012-12-15)\n------------------\n\n- Allow testing with non standard port. Allows running multiple test suites\n  in parallel.\n  [do3cc]\n\n- Documentation updates.\n  [moo]\n\n\n4.2 (2012-04-15)\n----------------\n\n- Branch as 4.2 as the plone.app.collection addition breaks backwards\n  compatibility.\n  [esteele]\n\n- Fixed spurious failure in our own tests by using a longer timeout.\n  [maurits]\n\n- plone.app.collection added to PloneFixture.\n  [timo]\n\n\n4.0.2 (2011-08-31)\n------------------\n\n- Load ZCML before installing Zope products in ``PloneWithPackageLayer``;\n  it enables package registration.\n  [gotcha]\n\n\n4.0.1 (2011-07-14)\n------------------\n\n- Add ``additional_z2_products`` parameter to ``PloneWithPackageLayer``\n  helper class to install additional Zope 2 products.\n  [jfroche]\n\n\n4.0 - 2011-05-13\n------------------\n\n- 4.0 Final release.\n  [esteele]\n\n- Add MANIFEST.in.\n  [WouterVH]\n\n\n4.0a6 - 2011-04-06\n------------------\n\n- Added helper functions for selenium layer. (Copied from SeleniumTestCase\n  within Products.CMFPlone/Products/CMFPlone/tests/selenium/base.py)\n  [emanlove]\n\n- Rework layer setup of SeleniumLayer so that z2.ZSERVER_FIXTURE is a\n  default_base.\n  [esteele]\n\n- Convert the passed-in selenium webdriver name to lowercase before doing a\n  module lookup.\n  [esteele]\n\n- Moved selenium start up and tear down to testSetUp and testTearDown,\n  respectively.  This was done to help further isolate individual tests.\n  For example, logging in under one test would require either logging out\n  or shutting down the browser, which is what the selenium_layer will now\n  do under testTearDown, in order to have a \"clean\" state within the next\n  test.\n  [emanlove]\n\n- Corrected module path for the various selenium webdrivers using\n  selenium 2.0b2.\n  [emanlove]\n\n\n4.0a5 - 2011-03-02\n------------------\n\n- Use the new ``plone.testing.security`` module to ensure isolation of\n  security checkers when setting up and tearing down layers based on the\n  ``PloneSandboxLayer`` helper base class. This would cause problems when\n  running multiple test suites in the same test run, in particular if one of\n  those suites were setting up ZCML that used ``five.grok``.\n  [optilude]\n\n\n4.0a4 - 2011-01-11\n------------------\n\n- Automatically tear down PAS registrations via snapshotting when using\n  ``PloneSandboxLayer``. It's too difficult to do this manually when you\n  consider that plugins may be registered in ZCML via transitive dependencies.\n  There should be no backwards compatibility concern - using\n  ``tearDownMultiPlugin()`` is still supported, and it's generally safe to\n  call it once.\n  [optilude]\n\n- Try to make sure ``tearDownMultiPlugin()`` and the generic PAS plugin\n  cleanup handler do not interfere with the cleanup handler from the PAS\n  ZCML directive.\n  [optilude]\n\n- Do not install ``Products.kupu`` or ``Products.CMFPlacefulWorkflow``.\n  [elro]\n\n- Depend on ``Products.CMFPlone`` instead of ``Plone``.\n  [elro]\n\n\n4.0a3 - 2010-12-14\n------------------\n\n- Allow top-level import of PloneTestLifecycle.\n  [stefan]\n\n- Added a warning not to use 'default' Firefox profile for selenium tests.\n  [zupo]\n\n- Fixed distribution dependency declarations.\n  [hannosch]\n\n- Correct license to GPL version 2 only.\n  [hannosch]\n\n- Make some module imports helper methods on the already policy-heavy\n  helper class per optilude's suggestion.\n  [rossp]\n\n- Add a layer and test case for running selenium tests.\n  [rossp]\n\n- Give the default test user differing user id and login name. This helps reveal\n  problems with userid vs login name errors, an overly common error.\n  [wichert]\n\n\n1.0a2 - 2010-09-05\n------------------\n\n- Make sure plone.app.imaging is installed properly during layer setup.\n  [optilude]\n\n\n1.0a1 - 2010-08-01\n------------------\n\n- Initial release",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://pypi.python.org/pypi/plone.app.testing",
    "keywords": "plone tests",
    "license": "GPL version 2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "plone.app.testing",
    "platform": "",
    "project_url": "https://pypi.org/project/plone.app.testing/",
    "release_url": "https://pypi.org/project/plone.app.testing/5.0.8/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Testing tools for Plone-the-application, based on plone.testing.",
    "version": "5.0.8"
  },
  "releases": {
    "1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "60a9e4073663faef34c6bba336d648ef",
          "sha256": "7eacb34fd7f1160ba8d52d42c069523901d8b538186beffc4fa1b1c993e0b8c3"
        },
        "downloads": -1,
        "filename": "plone.app.testing-1.0a1.zip",
        "has_sig": false,
        "md5_digest": "60a9e4073663faef34c6bba336d648ef",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 77649,
        "upload_time": "2010-08-01T17:00:58",
        "url": "https://files.pythonhosted.org/packages/07/61/6126bf64abc8fe3925bca891c6ffb1b603e8d7edf2bdebfae491eaac9d14/plone.app.testing-1.0a1.zip"
      }
    ],
    "1.0a2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1adae24e5c3a12a13306df736e28fd0a",
          "sha256": "9a61d6c607650f0eab54e979fba8ba1948626e4b7ab2cb4008d78dd7e63eb01b"
        },
        "downloads": -1,
        "filename": "plone.app.testing-1.0a2.zip",
        "has_sig": false,
        "md5_digest": "1adae24e5c3a12a13306df736e28fd0a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 78429,
        "upload_time": "2010-09-05T20:53:10",
        "url": "https://files.pythonhosted.org/packages/2c/b0/ac8c38207a66c970b6e0f7b952ee34c3c6b8d3a2f44cf8741b9f67f6441f/plone.app.testing-1.0a2.zip"
      }
    ],
    "3.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fbe8f955d27d41d129fed4582f10a800",
          "sha256": "f62b1897f4d00de2212c821cfe08f248e54aa0ca7b12ee6b391df97f866cd0a8"
        },
        "downloads": -1,
        "filename": "plone.app.testing-3.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "fbe8f955d27d41d129fed4582f10a800",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 73071,
        "upload_time": "2010-12-14T15:30:36",
        "url": "https://files.pythonhosted.org/packages/ba/13/46c30cca3453aeb301b80fad35ba5d3f699a04a40e66a9ef708f2f42f336/plone.app.testing-3.0a1.tar.gz"
      }
    ],
    "4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "95a8473fe43419ad03707450ba0b0b18",
          "sha256": "be9be3a84ae60297a7ee9dcf7fda71ef896605310bbba05da78003bd7a7cccf8"
        },
        "downloads": -1,
        "filename": "plone.app.testing-4.0.zip",
        "has_sig": false,
        "md5_digest": "95a8473fe43419ad03707450ba0b0b18",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 99740,
        "upload_time": "2011-05-13T17:29:09",
        "url": "https://files.pythonhosted.org/packages/ac/44/4e3764e96b63ad8c42b2cdefe32e9adadf0bd9357af439f5b147df0154af/plone.app.testing-4.0.zip"
      }
    ],
    "4.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d541bbf02e43fc01e816cfda6dd66594",
          "sha256": "7d159ac0e2801f3c88be490ef660d99388082d8f3f0c6a0e08c7d98a852315d0"
        },
        "downloads": -1,
        "filename": "plone.app.testing-4.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "d541bbf02e43fc01e816cfda6dd66594",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 73395,
        "upload_time": "2011-07-14T14:47:39",
        "url": "https://files.pythonhosted.org/packages/e9/b1/5d2e2ace67373836909219b5bd74674d7a48379e1133014e1744b34f08e9/plone.app.testing-4.0.1.tar.gz"
      }
    ],
    "4.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9e9051b434b212c83a984b3381a3b480",
          "sha256": "b88261a394b4e6748654c2c83bd25525d1139b54f4200f1b606747b0b91dd3e1"
        },
        "downloads": -1,
        "filename": "plone.app.testing-4.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9e9051b434b212c83a984b3381a3b480",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 74493,
        "upload_time": "2011-09-01T03:42:25",
        "url": "https://files.pythonhosted.org/packages/fe/c4/58e211415b3796424bf2028182dafec934bf7b81616e67bdb92ac3791f39/plone.app.testing-4.0.2.tar.gz"
      }
    ],
    "4.0a3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9101a8515837a03c70cbf155121c80d5",
          "sha256": "e6ade043de21105877e32764c2a3a85dde71516076eacbbe2dee5e5592799fe0"
        },
        "downloads": -1,
        "filename": "plone.app.testing-4.0a3.tar.gz",
        "has_sig": false,
        "md5_digest": "9101a8515837a03c70cbf155121c80d5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 72789,
        "upload_time": "2010-12-14T15:02:35",
        "url": "https://files.pythonhosted.org/packages/d4/7d/29cbba2f15683471d4a9df93e2433f0f3c761e3b6d7510d221d783141f21/plone.app.testing-4.0a3.tar.gz"
      }
    ],
    "4.0a4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "db274e4a50f9afbe77f332bfcf792b2d",
          "sha256": "5f98cf07422929232315dc4b914ed401e752d395f73a97960021407ba62fc10b"
        },
        "downloads": -1,
        "filename": "plone.app.testing-4.0a4.zip",
        "has_sig": false,
        "md5_digest": "db274e4a50f9afbe77f332bfcf792b2d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 86147,
        "upload_time": "2011-01-11T22:26:43",
        "url": "https://files.pythonhosted.org/packages/d3/63/191a3bab0a58800fcdadaa6b294a47993c85c8b9f108a546961687f059cd/plone.app.testing-4.0a4.zip"
      }
    ],
    "4.0a5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c78b4f33d828cad59052f028f0449f5f",
          "sha256": "73f00207749e09fc9e7d880f4d6fee8bc12634e5cc17d8bc354bde2a34c2e598"
        },
        "downloads": -1,
        "filename": "plone.app.testing-4.0a5.zip",
        "has_sig": false,
        "md5_digest": "c78b4f33d828cad59052f028f0449f5f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 86612,
        "upload_time": "2011-03-02T21:50:59",
        "url": "https://files.pythonhosted.org/packages/08/8d/badcd44e75447db84de9dae12f47dd47a8eaa18e99d70ec0fb60e30b1e26/plone.app.testing-4.0a5.zip"
      }
    ],
    "4.0a6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a931735d01716f1c2d2e45801e5a9555",
          "sha256": "59e7eedfd51527689a0c6309c90b1261f79b41c5b271a9e18f6423b2b0ba5f05"
        },
        "downloads": -1,
        "filename": "plone.app.testing-4.0a6.zip",
        "has_sig": false,
        "md5_digest": "a931735d01716f1c2d2e45801e5a9555",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 85906,
        "upload_time": "2011-04-07T01:27:11",
        "url": "https://files.pythonhosted.org/packages/66/b9/477889499d653e1ccb9e43da0c768946cd1c71f97b2673cef57d0e90ea0a/plone.app.testing-4.0a6.zip"
      }
    ],
    "4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ec61b9a45c80d992baad407a48e86dea",
          "sha256": "2b89675b25dfaa22795e5e87d7b25ecf1e70ea8cddf42f89b2c9b88d097e0cb6"
        },
        "downloads": -1,
        "filename": "plone.app.testing-4.2.zip",
        "has_sig": false,
        "md5_digest": "ec61b9a45c80d992baad407a48e86dea",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 87033,
        "upload_time": "2012-04-15T21:39:23",
        "url": "https://files.pythonhosted.org/packages/5a/99/386c883712db5281178167a24e92e8d487c12f671317a6cf2b2c2fc9efc5/plone.app.testing-4.2.zip"
      }
    ],
    "4.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1a40df72c8beda9520b83dc449a97a3c",
          "sha256": "0e3368cea92e64c4fd8e57ce9cec6080d920676bdea7497fbf277a78700fc036"
        },
        "downloads": -1,
        "filename": "plone.app.testing-4.2.1.zip",
        "has_sig": false,
        "md5_digest": "1a40df72c8beda9520b83dc449a97a3c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 85009,
        "upload_time": "2012-12-15T16:14:51",
        "url": "https://files.pythonhosted.org/packages/ec/80/1b6d1115a0b278ef746d0e523b849c0cc4dc9abd7eb25ec925176bc0af61/plone.app.testing-4.2.1.zip"
      }
    ],
    "4.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f47fd99bf6467e75d2086f321306c72e",
          "sha256": "3203e116f268413aea9140851368242694282d522756d44df8ff6f5002bc073e"
        },
        "downloads": -1,
        "filename": "plone.app.testing-4.2.2.zip",
        "has_sig": false,
        "md5_digest": "f47fd99bf6467e75d2086f321306c72e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 88326,
        "upload_time": "2013-02-09T15:21:48",
        "url": "https://files.pythonhosted.org/packages/38/23/2f1d686ae02f88b83fafc5b8e7af6a25373e2f0904a1c2600109ae3b76e5/plone.app.testing-4.2.2.zip"
      }
    ],
    "4.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "defa6250f8c17c124878299b5fad9d0a",
          "sha256": "af82cc65ff6e0c68ebed16145f221f72c41520fa735ccd63fa90b4241b957a13"
        },
        "downloads": -1,
        "filename": "plone.app.testing-4.2.3.zip",
        "has_sig": false,
        "md5_digest": "defa6250f8c17c124878299b5fad9d0a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 93596,
        "upload_time": "2014-01-28T13:45:40",
        "url": "https://files.pythonhosted.org/packages/42/fb/698ef5c3d8a9fa4bb0db4c1e8a706ab4f70c5d2a1161ce99d2084e11501e/plone.app.testing-4.2.3.zip"
      }
    ],
    "4.2.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c25b1ee9308ebd62a73d99d61863d1f5",
          "sha256": "14ff2b134da46bf923416e17c4189333abbdab127819c5a13b330680900ec5ab"
        },
        "downloads": -1,
        "filename": "plone.app.testing-4.2.4.zip",
        "has_sig": false,
        "md5_digest": "c25b1ee9308ebd62a73d99d61863d1f5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 90372,
        "upload_time": "2014-02-11T13:43:53",
        "url": "https://files.pythonhosted.org/packages/3d/50/1d4f9f020fce7d171de52cd5c34a87106aada5fa9b0b694a01321f6c2a0f/plone.app.testing-4.2.4.zip"
      }
    ],
    "4.2.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9e367b88a23452bc352c1332eb657591",
          "sha256": "efb8d082d22e320cddfa6f9666d98f85f68076eed366b63dad8fa65a74526375"
        },
        "downloads": -1,
        "filename": "plone.app.testing-4.2.5.zip",
        "has_sig": false,
        "md5_digest": "9e367b88a23452bc352c1332eb657591",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 90656,
        "upload_time": "2015-03-17T09:16:08",
        "url": "https://files.pythonhosted.org/packages/a4/94/1d5ae50e160558bdcd52a8b8e499ee2736a54100a4d4f8572e61a1048af4/plone.app.testing-4.2.5.zip"
      }
    ],
    "4.2.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "347b409333d713249bfced4028106ea0",
          "sha256": "29b16ddc2004b2d16a354436a76e7cd06823b5984609401560b9a7c3820fee12"
        },
        "downloads": -1,
        "filename": "plone.app.testing-4.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "347b409333d713249bfced4028106ea0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 78534,
        "upload_time": "2017-05-09T15:10:14",
        "url": "https://files.pythonhosted.org/packages/f8/1a/21797e48ae301365b9e32b958ecc790e6567be12fc0e0b8fb3bcafca26bc/plone.app.testing-4.2.6.tar.gz"
      }
    ],
    "5.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "607dd28ed71ad79dbdd4ab60cff6d885",
          "sha256": "57280cc60682ca25a855bf86cc0e4fcdc4cda34c9b1ac678b821353076fd305e"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "607dd28ed71ad79dbdd4ab60cff6d885",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 86202,
        "upload_time": "2016-02-20T15:52:50",
        "url": "https://files.pythonhosted.org/packages/71/b2/782002294feb82263a9da65f4ab2cd3d371e2822f09b42aed6a0ac4b8872/plone.app.testing-5.0.0.tar.gz"
      }
    ],
    "5.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bd1a8b08990129a32c85c5b764bf4ba9",
          "sha256": "a3fbb363fef25e38c60158cd8ee4238c528aad9f1fd324d24626b8e7a22f6f82"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bd1a8b08990129a32c85c5b764bf4ba9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 86247,
        "upload_time": "2016-02-26T19:37:48",
        "url": "https://files.pythonhosted.org/packages/d4/26/86b9de2f01ee4cfdc19b6cb27dd4aba02079e4f99ee361a6564bc44538b6/plone.app.testing-5.0.1.tar.gz"
      }
    ],
    "5.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5eae0636bf5dd3ea47dd70abf2fd2cd6",
          "sha256": "7c2a6e9273f4b5c83d460a0b63a1e540755e8d251595901961124d0d0c6774cc"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5eae0636bf5dd3ea47dd70abf2fd2cd6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 86432,
        "upload_time": "2016-06-07T10:33:21",
        "url": "https://files.pythonhosted.org/packages/8b/dd/efda1efda4ab9b2c19569e8e8dc589c5dc8d376ea6f62bb80c10539d78fd/plone.app.testing-5.0.2.tar.gz"
      }
    ],
    "5.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a2d696aa52fead636657a02f6807b543",
          "sha256": "e154bc74d789273f7a252810fd4cd7d6ea3995a2cba17beb9177e02607384bf9"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "a2d696aa52fead636657a02f6807b543",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 101439,
        "upload_time": "2016-09-06T23:47:27",
        "url": "https://files.pythonhosted.org/packages/40/cc/3dd0d2850060d0e1debd939f42fac0476461de78af59b7ddedc3709aed45/plone.app.testing-5.0.3.tar.gz"
      }
    ],
    "5.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fd3b822cd23ef1d3b8c5ad32ab1fae3b",
          "sha256": "f42270a7f0d0b7d024d56f5cf848fa3d4ee796221b806dad1066d3774ca06e02"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "fd3b822cd23ef1d3b8c5ad32ab1fae3b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 102760,
        "upload_time": "2016-09-23T19:02:58",
        "url": "https://files.pythonhosted.org/packages/06/3e/4c31ade687666d0819d6829bd780adc03608eb520ea9d4817233119ab266/plone.app.testing-5.0.4.tar.gz"
      }
    ],
    "5.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "69fd6283847984ac2aef3f7c1c8a193c",
          "sha256": "8983ff7c9f863ad9c5da0f7fe026526e44e2ead077800e8aafabc6a855f9b8d1"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "69fd6283847984ac2aef3f7c1c8a193c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 102892,
        "upload_time": "2016-11-19T20:27:32",
        "url": "https://files.pythonhosted.org/packages/41/95/60cd2a406413b6f1823ded4403ffff53940edfabc06eb51b284b3e4aa937/plone.app.testing-5.0.5.tar.gz"
      }
    ],
    "5.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "560f6fb59d9c7fcc086a913517c094b8",
          "sha256": "ddfd818caf6e997cc0bb9b9df04c54bb0bcc24c33a138f26d30057fd96217b03"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "560f6fb59d9c7fcc086a913517c094b8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 102959,
        "upload_time": "2016-12-19T17:04:33",
        "url": "https://files.pythonhosted.org/packages/6e/28/4090118c641c0a51e8b1ce78dd8ec18cc803d6fe283e1e0676fb5f9aedeb/plone.app.testing-5.0.6.tar.gz"
      }
    ],
    "5.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e94556ba65cac3121e36d790b527784b",
          "sha256": "0c2894221af7bb698222539a8af5928d5636b030acbc728104f51a700927c3d8"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "e94556ba65cac3121e36d790b527784b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 106403,
        "upload_time": "2017-07-03T10:13:28",
        "url": "https://files.pythonhosted.org/packages/63/86/f429214e73d8784668390159ee331d9a21a9a928a21f2eaa5218d3b524df/plone.app.testing-5.0.7.tar.gz"
      }
    ],
    "5.0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "65e2a1ec5b754e64ea742e897ac5546a",
          "sha256": "2f7f4f5b05d2f0269a24a7aa6001ce576551cc5084a738006350685189b6c83d"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "65e2a1ec5b754e64ea742e897ac5546a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 103231,
        "upload_time": "2017-10-24T22:58:45",
        "url": "https://files.pythonhosted.org/packages/50/db/e661dadb93945c0afebc7423966bffc1010917589537d419e5aab3fefac2/plone.app.testing-5.0.8.tar.gz"
      }
    ],
    "5.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ee46d4d2ee796a300c9e76cdd803efb8",
          "sha256": "f16c8b6335243966d5abf80a068f91c518fe82d5375ea258c57cf983bd17ac50"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0a1.zip",
        "has_sig": false,
        "md5_digest": "ee46d4d2ee796a300c9e76cdd803efb8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 93373,
        "upload_time": "2014-02-22T06:06:27",
        "url": "https://files.pythonhosted.org/packages/ae/74/9ee1d13d1a71798ea6eedf842e3ab95e831eab0a654723f3cbcf5a5923d9/plone.app.testing-5.0a1.zip"
      }
    ],
    "5.0a2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f73cfa27c1da80dd4969f0d9527a5a47",
          "sha256": "8d88b8ce9a74937159d1ab334650417e3b314d501eb2b8500bb7d4f522aa39f2"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0a2.zip",
        "has_sig": false,
        "md5_digest": "f73cfa27c1da80dd4969f0d9527a5a47",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 108519,
        "upload_time": "2014-04-19T11:15:17",
        "url": "https://files.pythonhosted.org/packages/6f/f2/3a6e9748d4bcce49204828902a54d15129141630421f61277a0fd5362b4d/plone.app.testing-5.0a2.zip"
      }
    ],
    "5.0b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "430c273fbe3345eab6561dc030c19ba6",
          "sha256": "5ebf91b58bd23f656339afd0be6a52770fb358bf5a90ea26bb39a8a7fc90fed4"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0b1.zip",
        "has_sig": false,
        "md5_digest": "430c273fbe3345eab6561dc030c19ba6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 113169,
        "upload_time": "2014-10-24T02:45:09",
        "url": "https://files.pythonhosted.org/packages/c2/8f/08e533867999be858fd6129a3d377165d1347765c03d84e6a364877086fe/plone.app.testing-5.0b1.zip"
      }
    ],
    "5.0b2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cd15b1c0b32e049d86d56c236adc9ad3",
          "sha256": "e9ff2ee7e9fb6e31410b34860bee1b1a75e8f7af51e2c0780bd5ab5049f269b8"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0b2.zip",
        "has_sig": false,
        "md5_digest": "cd15b1c0b32e049d86d56c236adc9ad3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 110264,
        "upload_time": "2015-03-13T07:57:17",
        "url": "https://files.pythonhosted.org/packages/30/84/415871a0c4c05ae3b3b4db989048d8c5b22ca87af7f9d523d4da1da9bbc6/plone.app.testing-5.0b2.zip"
      }
    ],
    "5.0b3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9a4b297522a5249af9deb9460b8f113e",
          "sha256": "96f9d3cb18b41d65a3636ecaca36ee499018e80b566c08d4ada0cf5b1b306840"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0b3.zip",
        "has_sig": false,
        "md5_digest": "9a4b297522a5249af9deb9460b8f113e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 110332,
        "upload_time": "2015-03-26T20:28:11",
        "url": "https://files.pythonhosted.org/packages/6d/d4/cea8b29efaf263595f17f6eb4d1672db368b323d9cb5eed855738d7f38e5/plone.app.testing-5.0b3.zip"
      }
    ],
    "5.0b4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7764d5d07dea2db5ae8ca88dd50804f4",
          "sha256": "e8428b1e97067cfa193cfd2a38046ffc77bec3b37efdcc76e99c83a19e08d723"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0b4.tar.gz",
        "has_sig": false,
        "md5_digest": "7764d5d07dea2db5ae8ca88dd50804f4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 82163,
        "upload_time": "2015-05-04T21:59:24",
        "url": "https://files.pythonhosted.org/packages/b2/f6/6a33e9bb6411d70f059d349b2fe2da6879c88b96dd2c7b76e2fc4017b232/plone.app.testing-5.0b4.tar.gz"
      }
    ],
    "5.0b5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6f2129fedadff21c40c582f608014c0b",
          "sha256": "4cd0a41746021b721640f6069b77e2b9887bdcca1e4378ec19d3c3a1b433e385"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0b5.tar.gz",
        "has_sig": false,
        "md5_digest": "6f2129fedadff21c40c582f608014c0b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 83246,
        "upload_time": "2015-07-18T06:43:56",
        "url": "https://files.pythonhosted.org/packages/ae/81/b6bb794c23718ef09d5946b115bdcda52c90c1fb5d9220beb6f7d5cf2d2a/plone.app.testing-5.0b5.tar.gz"
      }
    ],
    "5.0b6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4d726aa416990bb1ae957477f73fa86a",
          "sha256": "6dd7435694acba2472677154ffeb4f8de8111bb81c5b9760f71344e75a3b9119"
        },
        "downloads": -1,
        "filename": "plone.app.testing-5.0b6.tar.gz",
        "has_sig": false,
        "md5_digest": "4d726aa416990bb1ae957477f73fa86a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 83328,
        "upload_time": "2015-08-22T04:54:45",
        "url": "https://files.pythonhosted.org/packages/09/a6/d0418781e13a4c4ad3a980ee6466f5d385571dffe7b44b30d1ea195b9e23/plone.app.testing-5.0b6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "65e2a1ec5b754e64ea742e897ac5546a",
        "sha256": "2f7f4f5b05d2f0269a24a7aa6001ce576551cc5084a738006350685189b6c83d"
      },
      "downloads": -1,
      "filename": "plone.app.testing-5.0.8.tar.gz",
      "has_sig": false,
      "md5_digest": "65e2a1ec5b754e64ea742e897ac5546a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 103231,
      "upload_time": "2017-10-24T22:58:45",
      "url": "https://files.pythonhosted.org/packages/50/db/e661dadb93945c0afebc7423966bffc1010917589537d419e5aab3fefac2/plone.app.testing-5.0.8.tar.gz"
    }
  ]
}