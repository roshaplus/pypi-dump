{
  "info": {
    "author": "Malthe Borch",
    "author_email": "mborch@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Let *pop* run your services!\n\nSkip to `acknowledgements and credits`_.\n\nMotivation\n==========\n\nSoftware builds, deployment and service management, are tasks that\nbecome exceedingly difficult to carry out without the assistance of\na computer.\n\nTypically, this assistance is a collection of scripts that require\nsome amount of handholding. When multiple machines are involved, this\nhandholding becomes a problem of distributed coordination.\n\nWe need a tool!\n\nThis is not meant to replace a configuration tool such as `Chef\n<http://www.opscode.com/chef/>`_ or `Puppet\n<http://puppetlabs.com/>`_. You'll probably still need those.\n\nTo add to the confusion, it's also not meant to replace `Supervisor\n<http://supervisord.org/>`_, an excellent process control system\nwritten in Python. In fact, we recommend that you run your machine\nagents using this software.\n\nWhat *pop* is meant to replace is you!\n\nNow, we've already got a language \u2013 `Python\n<http://www.python.org>`_. All we need is to model the actions that\nyou would carry out if you were the best possible system\nadministrator.\n\n\nPrinciples\n==========\n\nWith these principles we try to cover the basic design and philosophy.\n\n#. *Adaptive*. The system is dynamic and the equilibrium is the target\n   state. There's always a state and if it's not the target state,\n   then we must take the necessary steps to reach that state.\n\n#. *Distributed*. The system is comprised of services running on\n   multiple machines. We use Apache's `ZooKeeper\n   <http://zookeeper.apache.org/>`_ for \"highly reliable distributed\n   coordination\" (via `txzookeeper\n   <http://pypi.python.org/pypi/txzookeeper>`_, a `Twisted\n   <http://twistedmatrix.com/trac/>`_ library written for the Ubuntu\n   `Juju <https://juju.ubuntu.com/>`_ cloud deployment tool).\n\n#. *Integrated*. This is a Python-based tool for running Python-based\n   services. The system is extensible through plugins.\n\n#. *Open*. The system should not be tied to a particular platform.\n\n\nInstallation\n============\n\nThese steps will be necessary for each machine in the system \u2013 except\nfor the final step which applies only to the machine that should run\nZooKeeper.\n\nWe assume that Python 2.7 is installed and available as ``python2``.\n\n#. To get started, log in to a machine, and install *pop* using\n   `setuptools <http://pypi.python.org/pypi/setuptools>`_ and\n   `virtualenv <http://www.virtualenv.org/>`_::\n\n     $ wget http://peak.telecommunity.com/dist/ez_setup.py\n     $ sudo python2 ez_setup.py\n     $ sudo easy_install-2.7 virtualenv\n\n   That's it for ``sudo``. We can continue with an unprivileged user.\n\n   Let's install *pop* into an isolated, virtual environment under the\n   home directory and enter the environment::\n\n     $ virtualenv --python=python2 ~/pop\n     $ source ~/pop/bin/activate\n     $ easy_install pop\n\n   This installs the ``pop`` command-line utility as well as\n   supporting libraries.\n\n#. Build and install ZooKeeper on the system (see `instructions\n   <http://zookeeper.apache.org/doc/trunk/zookeeperStarted.html>`_ for\n   more details).\n\n   Make sure your system has `Apache Ant <http://ant.apache.org/>`_\n   installed (a build tool for `Java <http://openjdk.java.net/>`_)\n   before proceeding::\n\n      $ cd ~/pop\n      $ git clone git://git.apache.org/zookeeper.git\n      $ cd zookeeper\n      $ ant\n\n   First we need to build the C-bindings::\n\n      $ cd src/c\n      $ autoreconf -if\n      $ ./configure --prefix=~/pop/zookeeper\n      $ make && make install\n\n   Then the Python-bindings::\n\n      $ cd ../contrib/zkpython\n      $ ant install\n\n   That's it for the installation.\n\n#. Configure and start ZooKeeper::\n\n      $ cd ~/pop/zookeeper/conf\n      $ cp zoo_sample.cfg zoo.cfg\n\n   You should edit ``zoo.cfg`` before you start a real deployment\n   because the default storage setting is ``/tmp/zookeeper``.\n\n   There's a script included to run the service::\n\n      $ ../bin/zkServer.sh start\n\n   If you want to keep track of what's going on, use\n   ``start-foreground``. Note that the ``pop`` utility expects\n   ZooKeeper to run on ``localhost`` unless the ``--host`` argument is\n   provided.\n\n   If everything's gone to plan, we're ready to use the system.\n\nTutorial\n========\n\nAs a first look, in this tutorial we'll learn how to use *pop* to run\na vanilla installation of `Plone <http://www.plone.org>`_.\n\n#. Initialize *pop* namespace::\n\n     $ pop init\n\n   This adds a number of nodes to the hierarchy that *pop* requires\n   for its operation. Note that the command effectively resets the\n   configuration although this requires the ``--force`` option if\n   an existing configuration is in place.\n\n#. Add the ``plone4`` service which runs the latest version of Plone::\n\n     $ pop add plone4\n\n   The service will be set up with the default configuration with the\n   name ``\"plone4\"`` (unless the ``--name`` argument was provided). We\n   can confirm this using the ``status`` command::\n\n     $ pop status plone4\n\n   In the default configuration, Plone is set to listen on port\n   8080. To change this, use the ``--port`` parameter when you first\n   add the service.\n\n#. To make the local machine available as a system that we can run\n   services on, we need to start the *machine agent*::\n\n     $ pop start\n\n   This process can also run in the foreground using ``pop fg``.\n\n#. Finally, to deploy the Plone service on the local machine::\n\n     $ pop deploy plone4\n\n   This works because the utility assumes that we want to deploy the\n   service on the local machine.\n\nThe order of the last two steps is *not* important. We could easily\nhave deployed the service first, then made the machine available.\n\n\nState\n=====\n\n*Pop* keeps all state in ZooKeeper (ZK).\n\nThe table below lists the various paths involved.\n\n=================================================  ==============  ==============  ==============\n Path                                               Data            Format          Type\n=================================================  ==============  ==============  ==============\n``/machines``\n``/machines/<machine-id>``\n``/machines/<machine-id>/<service-name>``           PID [#]_        Integer         Ephemeral\n``/services``\n``/services/<service-name>``\n``/services/<service-name>/machines``               Machines [#]_   JSON\n``/services/<service-name>/settings``               Settings [#]_   JSON\n``/services/<service-name>/state/<machine-id>``     State [#]_      JSON            Ephemeral\n=================================================  ==============  ==============  ==============\n\nNotes:\n\n.. [#] The process identifier.\n\n.. [#] This is a list of machines on which the service should run.\n\n.. [#] These are the settings used to bring up the service (regardless\n       of the machine). If changed, the service will be restarted.\n\n.. [#] This is set by the service when it's up and running; the\n       contents is specific to the implementation, but must be in JSON-format.\n\nNote that an ephemeral node is one that's created using the\n``zookeeper.EPHEMERAL`` flag and immediately removed when the creator\ndisconnects.\n\nTerminology\n-----------\n\nMachine identification\n\n    The *machine id* is a hardware UUIDs. On Linux this is the value\n    returned by `HAL <http://linux.die.net/man/8/hald>`_ for the\n    ``\"system.hardware.uuid\"`` key.\n\nService identification\n\n    Each service is required to have a unique *service name* (a string).\n\nScripts\n=======\n\nTo carry out tasks such as upgrades, coordinated script execution is\nneeded.\n\nPlugins can define tasks on a service level and make them available on\nthe command-line::\n\n  $ pop run <service> <command> [args]\n\nEnvironment\n-----------\n\nThe ``PythonEnvironment`` base class comes with a set of tasks that\nhelp to set up the interpreter environment. These are available to all\nservices that derive from this base class.\n\n1. *Install packages*. To make a Python package available in the\n   instance environment::\n\n     $ pop run plone install lxml==2.3.5\n\n   Multiple packages can be listed, separate with space.\n\n2. *List packages*. Return a list of installed Python libraries. For\n   each package, print time of installation, source and version::\n\n     $ pop run plone packages\n\n\nDevelopment\n===========\n\nThis section documents the development of pop (not *with*).\n\nTests\n-----\n\nTo run the automated test suite, you need a running ZooKeeper service\nand the `nose <http://nose.readthedocs.org/en/latest/>`_ test runner.\n\nIn your ``virtualenv`` environment::\n\n  $ python setup.py nosetests\n\nIt's often useful to get a more verbose output::\n\n  $ python setup.py nosetests --verbosity=3\n\nNote that a higher verbosity setting will result in a great amount of\nnoise from the nose test runner itself.\n\n\nAcknowledgements and Credits\n============================\n\nThe architecture and technical implementation of this software was\ninspired by Canonical's Juju cloud deployment tool, originally\ndesigned by Kapil Thangavelu. We deliberately use the same terms and\nconventions when possible (for example *machines* and *services*).\n\nThe author of this software:\n\n  Malthe Borch \u2013 mborch@gmail.com\n\n\nLicense\n=======\n\n*Pop* is available under the GPL.\n\n\n\u25a0\n\n\nChanges\n=======\n\nIn next release ...\n\n- Initial public release.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://www.github.com/malthe/pop",
    "keywords": "coordination deployment services zookeeper",
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pop",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pop/",
    "release_url": "https://pypi.org/project/pop/1.0-dev/",
    "requires_python": null,
    "summary": "Automated build, deployment and service management tool.",
    "version": "1.0-dev"
  },
  "releases": {
    "1.0-dev": []
  },
  "urls": []
}