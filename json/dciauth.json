{
  "info": {
    "author": "Distributed CI team",
    "author_email": "distributed-ci@redhat.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Security :: Cryptography"
    ],
    "description": "# python-dciauth\n\nDCI authentication module used by dci-control-server and python-dciclient\n\n## Summary of signing steps\n\nTo create a signed request, complete the following:\n\n * Task 1: Hash payload you want to send\n\n * Task 2: Create a string to sign\n\n   Create a string to sign with the request and extra information such as the request date, and the payload (hash) of the request.\n\n * Task 3: Calculate the signature for DCI\n\n   Derive a signing key by performing a succession of keyed hash operations (HMAC operations) on the string to sign, with your API secret.\n\n * Task 4: Add the Signing Information to the Request\n\n   After you calculate the signature, add it to an HTTP header or to the query string of the request.\n\n## Summary of the validation steps\n\n * Task 1: Hash payload you received\n\n * Task 2: Create a string to sign\n\n   Create a string to sign with the request and extra information such as the request date **header**, and the payload (hash) of the request.\n\n * Task 3: Calculate the signature for DCI\n\n   Derive a signing key by performing a succession of keyed hash operations (HMAC operations) on the string to sign, with user's API secret.\n\n * Task 4: Compare signature calculated with signature send\n\n   After you calculate the signature, compare it to an HTTP header.\n\n * Task 5: Reject any request older than 5 minutes\n\n## Signing example:\n\n```python\n    from dciauth import signature\n\n    secret = \"Y4efRHLzw2bC2deAZNZvxeeVvI46Cx8XaLYm47Dc019S6bHKejSBVJiGAfHbZLIN\"\n    method = \"GET\"\n    content_type = 'application/json'\n    url = \"/api/v1/jobs\"\n    query_string = \"limit=100&offset=1\"\n    payload = {}\n    headers = signature.generate_headers_with_secret(\n        secret,\n        method,\n        content_type,\n        url,\n        query_string,\n        payload)\n\n    # headers == {\n    #     'Authorization': 'DCI-HMAC-SHA256 811f7ceb089872cd264fc5859cffcd6ddfbe8ce851f0743199ad4c96470c6b6b',\n    #     'Content-Type: 'application/json',\n    #     'DCI-Datetime': '20171103T162727Z'\n    # }\n```\n\n## Validation example\n\n```python\n    from dciauth import signature\n\n    secret = \"Y4efRHLzw2bC2deAZNZvxeeVvI46Cx8XaLYm47Dc019S6bHKejSBVJiGAfHbZLIN\"\n    method = \"GET\"\n    headers = {\n        'Authorization': 'DCI-HMAC-SHA256 811f7ceb089872cd264fc5859cffcd6ddfbe8ce851f0743199ad4c96470c6b6b',\n        'DCI-Datetime': '20171103T162727Z',\n        'Content-type': 'application/json'\n    }\n    url = \"/api/v1/jobs\"\n    query_string = \"limit=100&offset=1\"\n    payload = {}\n    expected_signature = signature.calculate_signature(\n        secret,\n        method,\n        headers,\n        url,\n        query_string,\n        payload)\n    dci_signature = signature.get_signature_from_headers(headers)\n\n    if signature.equals(expected_signature, dci_signature):\n        raise Exception(\"Authentication failed: signature invalid\")\n\n    if signature.is_expired(headers):\n        raise Exception(\"Authentication failed: signature expired\")\n\n```\n\n## Validation example with flask request\n\n```python\n    from dciauth import signature\n    from flask import request\n\n    secret = \"Y4efRHLzw2bC2deAZNZvxeeVvI46Cx8XaLYm47Dc019S6bHKejSBVJiGAfHbZLIN\"\n    headers = request.headers\n    expected_signature = signature.calculate_signature(\n        secret,\n        method = request.method,\n        headers = headers,\n        url = request.path,\n        query_string = request.query_string.decode('utf-8'),\n        payload = request.get_json(silent=True)\n    )\n    dci_signature = signature.get_signature_from_headers(headers)\n\n    if signature.equals(expected_signature, dci_signature):\n        raise Exception(\"Authentication failed: signature invalid\")\n\n    if signature.is_expired(headers):\n        raise Exception(\"Authentication failed: signature expired\")\n\n```\n\n## Implementation details\n\nAlong each request, the client must add the three following HTTP headers:\n\n * `Authorization`\n * `Content-Type`\n * `DCI-Datetime`\n\nThey are build as following\n\n### Content-Type\n\n`Content-Type` (e.g.: `application/json`) of the request\n\n### DCI-Datetime\n\n`DCI-Datetime` is the current client timestamp in UTC timezone with the following format: `%Y%m%dT%H%M%SZ` (e.g.: `20170612T142917Z`)\n\n### Authorization\n\nThe signature header `Authorization:<algorithm> <signature>` is obtained with:\n\n * `<algorithm>`: only `DCI-HMAC-SHA256`\n * `<signature>`: `hexdigest( HMAC-SHA256( <api secret>, <string_to_sign>.encode('utf-8') ) )`\n * `<string_to_sign>`:\n\n        <HTTP Verb> + \"\\n\"\n        <Content-Type> + \"\\n\"\n        <timestamp> + \"\\n\"\n        <url> + \"\\n\"\n        <query_string> + \"\\n\"\n        <payload hash>\n\n     * `<HTTP Verb>`: the HTTP method used in uppercase\n     * `<Content-Type>`: Usually `application/json` for API calls\n     * `<timestamp>`: as previously, the client timestamp in UTC timezone with the following format: `%Y%m%dT%H%M%SZ`\n     * `<url>`: the resource path, without query string\n     * `<query_string>`: the parameter passed when querying (the part after the `?` in the full URL)\n     * `<payload hash>`: `hexdigest( SHA256( payload ) )`\n\nSee `tests/test_signature.py` for some detailed examples\n\n## License\n\nApache 2.0\n\n\n## Author Information\n\nDistributed-CI Team  <distributed-ci@redhat.com>\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/redhat-cip/python-dciauth",
    "keywords": "",
    "license": "Apache v2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dciauth",
    "platform": "",
    "project_url": "https://pypi.org/project/dciauth/",
    "release_url": "https://pypi.org/project/dciauth/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "DCI authentication module used by dci-control-server and python-dciclient",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2f5e445fe8023a072342b364b1f142a9",
          "sha256": "7fac4c5e27d052a26377cfb7e8475821553fa8253ad41042162d867fbdf7c871"
        },
        "downloads": -1,
        "filename": "dciauth-0.1.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f5e445fe8023a072342b364b1f142a9",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 7393,
        "upload_time": "2017-11-09T14:28:25",
        "url": "https://files.pythonhosted.org/packages/0a/39/2028cbe84ac50b29b9281fb091142530b6b15af5ecbe490f921e1a081460/dciauth-0.1.0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b4e29a97ae871e445a56f7ebcb2a7b9d",
          "sha256": "64188a8db480d841cf3200e7eb6d05f88c1a121f711c5d9235e2ab7e924903bb"
        },
        "downloads": -1,
        "filename": "dciauth-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b4e29a97ae871e445a56f7ebcb2a7b9d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7852,
        "upload_time": "2017-11-09T14:28:27",
        "url": "https://files.pythonhosted.org/packages/63/4d/73818d673f92ce6639579812878056b42126bffc15ee10c836f676cb8e4c/dciauth-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2f5e445fe8023a072342b364b1f142a9",
        "sha256": "7fac4c5e27d052a26377cfb7e8475821553fa8253ad41042162d867fbdf7c871"
      },
      "downloads": -1,
      "filename": "dciauth-0.1.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "2f5e445fe8023a072342b364b1f142a9",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 7393,
      "upload_time": "2017-11-09T14:28:25",
      "url": "https://files.pythonhosted.org/packages/0a/39/2028cbe84ac50b29b9281fb091142530b6b15af5ecbe490f921e1a081460/dciauth-0.1.0-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "b4e29a97ae871e445a56f7ebcb2a7b9d",
        "sha256": "64188a8db480d841cf3200e7eb6d05f88c1a121f711c5d9235e2ab7e924903bb"
      },
      "downloads": -1,
      "filename": "dciauth-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b4e29a97ae871e445a56f7ebcb2a7b9d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7852,
      "upload_time": "2017-11-09T14:28:27",
      "url": "https://files.pythonhosted.org/packages/63/4d/73818d673f92ce6639579812878056b42126bffc15ee10c836f676cb8e4c/dciauth-0.1.0.tar.gz"
    }
  ]
}