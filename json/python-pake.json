{
  "info": {
    "author": "Eric A. Blundell",
    "author_email": "blundell.a.eric@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Utilities"
    ],
    "description": "About pake\n==========\n\n|Master Documentation Status| |Develop Documentation Status| |codecov|\n\npake is a make like python build utility where tasks, dependencies and\nbuild commands can be expressed entirely in python, similar to ruby\nrake.\n\npake supports automatic file change detection when dealing with inputs\nand outputs and also parallel builds.\n\npake requires python3.5+\n\nInstalling\n==========\n\nNote: pake is Alpha and likely to change some.\n\n::\n\n    sudo pip3 install python-pake\n\nExample project using pake\n==========================\n\nI am using libasm\\_io to help test pake and have included a pakefile\nbuild along side the makefiles in that project.\n\nhttps://github.com/EriHoss/libasm\\_io\n\nWriting basic tasks\n===================\n\n.. code:: python\n\n\n    import pake\n\n    # Tasks are registered the the pake.Pake object\n    # returned by pake's initialization call, using the task decorator.\n\n    pk = pake.init()\n\n    # Try to grab a command line define,\n    # in particular the value of -D CC=.. if\n    # it has been passed on the command line.\n    # CC will default to gcc in this case\n    #\n    # you can also use the syntax: pk[\"CC\"] to\n    # attempt to get the defines value, if it is not\n    # defined then it will return None.\n\n    CC = pk.get_define(\"CC\", \"gcc\")\n\n\n    # If you just have a single input/output, there is no\n    # need to pass a list to the tasks inputs/outputs\n\n    @pk.task(i=\"foo/foo.c\", o=\"foo/foo.o\")\n    def foo(ctx):\n        # Execute a program (gcc) and print its stdout/stderr to the tasks output.\n        ctx.call(CC, '-c', ctx.inputs, '-o', ctx.outputs)\n\n\n    # Pake can handle file change detection with multiple inputs\n    # and outputs. If the amount of inputs is different from\n    # the amount of outputs, the task is considered to be out\n    # of date if any input file is newer than any output file.\n    #\n    # When the amount of inputs is equal to the amount of outputs,\n    # pake will compare each input to its corresponding output\n    # and collect out of date input/outputs into ctx.outdated_inputs\n    # and ctx.outdated_outputs respectively.  ctx.outdated_pairs\n    # can be used to get a generator over (input, output) pairs,\n    # it is shorthand for zip(ctx.outdated_inputs, ctx.outdated_outputs)\n    @pk.task(i=pake.glob(\"bar/*.c\"), o=pake.pattern('bar/%.o'))\n    def bar(ctx):\n\n        # zip together the outdated inputs and outputs, since they\n        # correspond to each other, this iterates of a sequence of python\n        # tuple objects in the form (\"input\", \"output\")\n\n        for i, o in ctx.outdated_pairs:\n            ctx.call(CC, '-c', i, '-o', o)\n\n    # This task depends on the foo and bar tasks, as\n    # specified with the decorators leading parameters,\n    # And only outputs \"bin/baz\" by taking the input \"main.c\"\n    # and linking it to the object files produced in the other tasks.\n\n    # Documentation strings can be viewed by running 'pake -ti' in\n    # the directory the pakefile exists in, it will list all documented\n    # tasks with their python doc strings.\n    #\n    # The pake.FileHelper class (pake.fileutil.FileHelper)\n    # can be used to preform basic file system operations while\n    # printing to the tasks output information about what said\n    # operation is doing.\n    @pk.task(foo, bar, o=\"bin/baz\", i=\"main.c\")\n    def baz(ctx):\n        \"\"\"Use this to build baz\"\"\"\n\n        # see: pake.fileutil.FileHelper\n        file_helper = pake.FileHelper(ctx)\n\n        # Create a bin directory, this won't complain if it exists already\n        file_helper.makedirs(\"bin\")\n\n        # Execute gcc with ctx.call, using the list argument form\n        # instead of a string, this allows easily concatenating all the\n        # immediate dependencies outputs to the command line arguments\n        #\n        # ctx.dependency_outputs contains a list of all outputs that this\n        # tasks immediate dependencies produce\n        #\n        ctx.call(CC, '-o', ctx.outputs, ctx.inputs, ctx.dependency_outputs)\n\n\n    @pk.task\n    def clean(ctx):\n        \"\"\"Clean binaries\"\"\"\n\n        # see: pake.fileutil.FileHelper\n        file_helper = pake.FileHelper(ctx)\n\n        # Clean up using a the FileHelper object\n        # Remove any bin directory, this wont complain if \"bin\"\n        # does not exist.\n        file_helper.rmtree(\"bin\")\n\n        # Glob remove object files from the foo and bar directories\n        file_helper.glob_remove(\"foo/*.o\")\n        file_helper.glob_remove(\"bar/*.o\")\n\n\n    # Run pake, the default task that will be executed when\n    # none are specified will be 'baz'. the tasks parameter\n    # is optional, if it is not specified then you will have to specify\n    # which tasks need to be run on the command line.\n\n    pake.run(pk, tasks=baz)\n\nOutput from the example above:\n\n::\n\n\n    ===== Executing task: \"bar\"\n    gcc -c \"bar/bar.c\" -o \"bar/bar.o\"\n    ===== Executing task: \"foo\"\n    gcc -c \"foo/foo.c\" -o \"foo/foo.o\"\n    ===== Executing task: \"baz\"\n    Created Directory(s): \"bin\"\n    gcc -o bin/baz main.c foo/foo.o bar/bar.o\n\nParallelism inside tasks\n========================\n\nWork can be submitted to the threadpool pake is running it's tasks on in\norder to achieve a predictable level of parallelism that is limited by\nthe **--jobs** command line argument or the *jobs* parameter of\n**pake.Pake.run**.\n\n.. code:: python\n\n\n    import pake\n\n    pk=pake.init()\n\n    @pk.task(i=pake.glob('src/*.c'), o=pake.pattern('obj/%.o'))\n    def build_c(ctx):\n\n        # Start multitasking\n\n        with ctx.multitask() as mt:\n            for i, o in ctx.outdated_pairs:\n                # Submit a work function with arguments to the threadpool\n\n                mt.submit(ctx.call, ['gcc', '-c', i, '-o', o])\n\n\n    @pk.task(build_c, i=pake.glob('obj/*.o'), o='main')\n    def build(ctx):\n        ctx.call('gcc', ctx.inputs, '-o', ctx.outputs)\n\n\n    pake.run(pk, tasks=build)\n\nRunning pake scripts in pake\n============================\n\nPake is able to run itself through the use of ctx.subpake or even\npake.subpake. ctx.subpake is preferred because it handles writing\nprogram output to the tasks output queue in a synchronized manner when\nmultiple jobs are running.\n\n.. code:: python\n\n\n    import pake\n\n    pk = pake.init()\n\n    # Try to get the CC define from the command line,\n    # default to \"GCC\".\n\n    CC = pk.get_define(\"CC\", \"gcc\")\n\n    # Export the CC variable's value to all invocations\n    # of pake.subpake or ctx.subpake as a define that can be \n    # retrieved with pk.get_define()\n    #\n    pake.export(\"CC\", CC)\n\n\n    # You can also export lists, dictionaries sets and tuples,\n    # as long as they only contain literal values.\n    # Literal values being: strings, integers, floats; and\n    # other lists, dicts, sets and tuples (if they only contain literals)\n\n    pake.export(\"CC_FLAGS\", ['-Wextra', '-Wall'])\n\n\n    # Nesting works with composite literals,\n    # as long as everything is a pure literal or something\n    # that str()'s  into a literal.\n\n    pake.export(\"STUFF\",\n                ['you',\n                 ['might',\n                  ('be',\n                   ['a',\n                    {'bad' :\n                         ['person', ['if', {'you', 'do'}, (\"this\",) ]]\n                     }])]])\n\n\n    # Execute outside of a task, by default the stdout/stderr\n    # of the subscript goes to this scripts stdout.  The file\n    # object to which stdout gets written to can be specified\n    # with pake.subpake(..., stdout=(file))\n\n    pake.subpake(\"sometasks/pakefile.py\", \"dotasks\")\n\n    # This task does not depend on anything or have any inputs/outputs\n    # it will basically only run if you explicitly specify it as a default\n    # task in pake.run, or specify it on the command line\n\n    @pk.task\n    def my_phony_task(ctx):\n        # Arguments are passed in a variadic parameter...\n        \n        # Specify that the \"foo\" task is to be ran.\n        # The scripts output is written to this tasks output queue\n\n        ctx.subpake(\"library/pakefile.py\", \"foo\")\n\n\n\n    # Run this pake script, with a default task of 'my_phony_task'\n\n    pake.run(pk, tasks=my_phony_task)\n\nOutput from the example above:\n\n::\n\n\n    *** enter subpake[1]:\n    pake[1]: Entering Directory \"(REST OF PATH...)/paketest/sometasks\"\n    ===== Executing Task: \"dotasks\"\n    Do Tasks\n    pake[1]: Exiting Directory \"(REST OF PATH...)/paketest/sometasks\"\n    *** exit subpake[1]:\n    ===== Executing Task: \"my_phony_task\"\n    *** enter subpake[1]:\n    pake[1]: Entering Directory \"(REST OF PATH...)/paketest/library\"\n    ===== Executing Task: \"foo\"\n    Foo!\n    pake[1]: Exiting Directory \"(REST OF PATH...)/paketest/library\"\n    *** exit subpake[1]:\n\nRunning pake\n============\n\n.. code:: bash\n\n\n    cd your_pakefile_directory\n\n    # Run pake with up to 10 tasks running in parallel\n\n    pake -j 10\n\npake will look for \"pakefile.py\" or \"pakefile\" in the current directory\nand run it.\n\nOr you can specify one or more files to run with **-f/--file**. The\nswitch does not have multiple arguments, but it can be used more than\nonce to specify multiple files.\n\nFor example:\n\n``pake -f pakefile.py foo``\n\n``pake -f your_pakefile_1.py -f your_pakefile_2.py foo``\n\nYou can also specify multiple tasks, but do not rely on unrelated tasks\nbeing executed in any specific order because they won't be. If there is\na specific order you need your tasks to execute in, the one that comes\nfirst should be declared a dependency of the one that comes second, then\nthe second task should be specified to run.\n\nWhen running parallel builds, leaf dependencies will start executing\npretty much simultaneously, and non related tasks that have a dependency\nchain may execute in parallel.\n\n``pake task unrelated_task order_independent_phony``\n\nPakes current options\n=====================\n\n::\n\n\n    usage: pake [-h] [-v] [-D DEFINE] [-j JOBS] [-n] [-C DIRECTORY] [-t] [-ti]\n                [-f FILE]\n                [tasks [tasks ...]]\n\n    positional arguments:\n      tasks                 Build tasks.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -v, --version         show program's version number and exit\n      -D DEFINE, --define DEFINE\n                            Add defined value.\n      -j JOBS, --jobs JOBS  Max number of parallel jobs. Using this option enables\n                            unrelated tasks to run in parallel with a max of N\n                            tasks running at a time.\n      -n, --dry-run         Use to preform a dry run, lists all tasks that will be\n                            executed in the next actual invocation.\n      -C DIRECTORY, --directory DIRECTORY\n                            Change directory before executing.\n      -t, --show-tasks      List all task names.\n      -ti, --show-task-info\n                            List all tasks along side their doc string. Only tasks\n                            with doc strings present will be shown.\n      -f FILE, --file FILE  Pakefile path(s). This switch can be used more than\n                            once, all specified pakefiles will be executed in\n                            order with the current directory as the working\n                            directory (unless -C is specified).\n\n\n\n.. |Master Documentation Status| image:: https://readthedocs.org/projects/pake/badge/?version=latest\n   :target: http://pake.readthedocs.io/en/latest/?badge=latest\n.. |Develop Documentation Status| image:: https://readthedocs.org/projects/pake/badge/?version=develop\n   :target: http://pake.readthedocs.io/en/latest/?badge=develop\n.. |codecov| image:: https://codecov.io/gh/EriHoss/pake/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/EriHoss/pake\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/EriHoss/pake",
    "keywords": "",
    "license": "BSD 3-Clause",
    "maintainer": "",
    "maintainer_email": "",
    "name": "python-pake",
    "platform": "",
    "project_url": "https://pypi.org/project/python-pake/",
    "release_url": "https://pypi.org/project/python-pake/0.11.0.0a1/",
    "requires_python": "",
    "summary": "A make like build utility entirely in python.",
    "version": "0.11.0.0a1"
  },
  "releases": {
    "0.10.0.2a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a0858c5fbd72782bb76dcda9dbd7af5f",
          "sha256": "d63b5e51fd28dcfe9d106d3404d5c07688dffaee7f5dfb764330d2f70656f743"
        },
        "downloads": 0,
        "filename": "python-pake-0.10.0.2a1.tar.gz",
        "has_sig": false,
        "md5_digest": "a0858c5fbd72782bb76dcda9dbd7af5f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43916,
        "upload_time": "2017-06-14T03:38:31",
        "url": "https://files.pythonhosted.org/packages/43/7b/0491384918874c98ce62510c6c798ba827178b7572fb0aed0df1c118a03a/python-pake-0.10.0.2a1.tar.gz"
      }
    ],
    "0.10.1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b963d16f6084fef716c17e6e84f9c54b",
          "sha256": "a4cd7e6ab5dbe61f8e55ce45fa98fb43ffd7a3f005838877c6ffdf90904cc850"
        },
        "downloads": 0,
        "filename": "python-pake-0.10.1.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "b963d16f6084fef716c17e6e84f9c54b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 44023,
        "upload_time": "2017-06-14T04:13:56",
        "url": "https://files.pythonhosted.org/packages/e4/0a/95f69b74f1026f058efd382996dbf5d214cdd105831b30b66f1c933fbd3c/python-pake-0.10.1.0a1.tar.gz"
      }
    ],
    "0.10.2.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "db03b414570088c9b6ac86c6ab19ecf3",
          "sha256": "1a54b1a3d8d133652f751f0a9748e83614ccbaffa31fc978c5d4974edb849830"
        },
        "downloads": 0,
        "filename": "python-pake-0.10.2.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "db03b414570088c9b6ac86c6ab19ecf3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43823,
        "upload_time": "2017-06-14T04:42:24",
        "url": "https://files.pythonhosted.org/packages/bb/c9/7ee83a19b96632e2dba1d5a8e94fc3693980c7c9e513cb05cb65c8da3ba4/python-pake-0.10.2.0a1.tar.gz"
      }
    ],
    "0.10.2.1a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a432f95634e9d12b96f407152b55871c",
          "sha256": "069e6273c379213ed7c5a9a8810aed0143c5f4ddaf96d9c802d7e5e2249a73f0"
        },
        "downloads": 0,
        "filename": "python-pake-0.10.2.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "a432f95634e9d12b96f407152b55871c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43830,
        "upload_time": "2017-06-14T04:48:59",
        "url": "https://files.pythonhosted.org/packages/42/e3/189559132efe5b7ae18941dfd2a6c70c921b0e6ff83702bccbfad5394eb1/python-pake-0.10.2.1a1.tar.gz"
      }
    ],
    "0.10.2.2a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "86431783d186cb87bec82490910a51fd",
          "sha256": "2e75c5b57faea75802657b8e973e79f5b7f539653e79f204485919e4eb42d8ef"
        },
        "downloads": 0,
        "filename": "python-pake-0.10.2.2a1.tar.gz",
        "has_sig": false,
        "md5_digest": "86431783d186cb87bec82490910a51fd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43931,
        "upload_time": "2017-06-14T04:59:39",
        "url": "https://files.pythonhosted.org/packages/01/88/c4169743724448caed80f7e5dc17e9e2843ef4003c870b18c70ac5a28965/python-pake-0.10.2.2a1.tar.gz"
      }
    ],
    "0.11.0.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "01e72969a35a5992f8e8b4526791e394",
          "sha256": "ffed3d75a50c13f1424f23b69d383b8cf139bdb41ad36fc3555cdde93b92396b"
        },
        "downloads": 0,
        "filename": "python-pake-0.11.0.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "01e72969a35a5992f8e8b4526791e394",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45312,
        "upload_time": "2017-06-14T08:52:19",
        "url": "https://files.pythonhosted.org/packages/92/75/8e79f81e64e60705967cd682d70793714311240c21837bc1b03dad4fbc02/python-pake-0.11.0.0a1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "01e72969a35a5992f8e8b4526791e394",
        "sha256": "ffed3d75a50c13f1424f23b69d383b8cf139bdb41ad36fc3555cdde93b92396b"
      },
      "downloads": 0,
      "filename": "python-pake-0.11.0.0a1.tar.gz",
      "has_sig": false,
      "md5_digest": "01e72969a35a5992f8e8b4526791e394",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 45312,
      "upload_time": "2017-06-14T08:52:19",
      "url": "https://files.pythonhosted.org/packages/92/75/8e79f81e64e60705967cd682d70793714311240c21837bc1b03dad4fbc02/python-pake-0.11.0.0a1.tar.gz"
    }
  ]
}