{
  "info": {
    "author": "Matt Bodenhamer",
    "author_email": "mbodenhamer@mbodenhamer.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Topic :: Utilities"
    ],
    "description": "yatr\n====\n\n.. image:: https://travis-ci.org/mbodenhamer/yatr.svg?branch=master\n    :target: https://travis-ci.org/mbodenhamer/yatr\n\n.. image:: https://img.shields.io/coveralls/mbodenhamer/yatr.svg\n    :target: https://coveralls.io/r/mbodenhamer/yatr\n\n.. image:: https://readthedocs.org/projects/yatr/badge/?version=latest\n    :target: http://yatr.readthedocs.org/en/latest/?badge=latest\n\nYet Another Task Runner.  Or alternatively, YAml Task Runner.  Yatr is a YAML-based task runner that attempts to implement and extend the best features of GNU Make for 21st-century software development contexts that are not centered around the compilation of C/C++ code.  The project is very much in preliminary development, but is nonetheless functional for basic applications.\n\nInstallation\n------------\n::\n\n    $ pip install yatr\n\n\nUsage\n-----\n::\n\n    usage: yatr [-h] [-f <yatrfile>] [--version] [--validate] [--dump]\n            [--dump-path] [--pull]\n            [<task>] [ARGS [ARGS ...]]\n\n    Yet Another Task Runner.\n\n    positional arguments:\n      <task>                The task to run\n      ARGS                  Additional arguments for the task\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -f <yatrfile>, --yatrfile <yatrfile>\n\t\t\t    The yatrfile to load\n      --version             Print version\n      --validate            Only validate the yatrfile\n      --dump                Dump macro values\n      --dump-path           Print yatrfile path\n      --pull                Force download of URL includes and imports\n\n\nIf not supplied, ``<yatrfile>`` will default to a file matching the regular expression ``^[Yy]atrfile(.yml)?$``.  If such a file is not present in the current working directory, yatr will search rootward up the filesystem tree looking for a file that matches the expression.  This is intended as a feature of convenience, so that tasks can be easily executed when working in a project sub-directory.  If it is unclear which yatrfile has been loaded, the ``--dump-path`` option may be supplied to disambiguate.  Likewise, the ``-f`` option may be supplied in order to force the loading of a particular yatrfile.\n\nExample(s)\n----------\n\nSuppose you have the following ``yatrfile.yml`` in your current working directory::\n\n    include:\n      - \"{{urlbase}}/test/test2.yml\"\n\n    macros:\n      urlbase: https://raw.githubusercontent.com/mbodenhamer/yatrfiles/master/yatrfiles\n      b: bar\n      c: \"{{b}} baz\"\n\n    tasks:\n      cwd: pwd\n\n      bar:\n\t- foo\n\t- \"echo {{c}} {{_1|default('xyz')}}\"\n\n      cond1:\n\tcommand: foo\n\tif: \"true\"\n\n      cond2:\n\tcommand: foo\n\tif: \"false\"\n\n      cond3:\n\tcommand: foo\n\tifnot: \"true\"\n\n      cond4:\n\tcommand: foo\n\tifnot: \"false\"\n\n\nAs illustrated in this example, yatr currently supports three top-level keys in the yatrfile: ``include``, ``macros``, and ``tasks``.  The ``macros`` section must be a mapping of macro names to macro definitions.  Macro definitions may either be plain strings or `Jinja2 templates`_.\n\nThe ``include`` section must be a list of strings, each of which must be either a filesystem path or a URL specifying the location of another yatrfile.  When a yatrfile is \"included\" in this manner, its macros and tasks are added to the macros and tasks defined by the main yatrfile.  Nested includes are supported, following the rule that conflicts in macro or task names are resolved by favoring the definition closest to the main yatrfile.  \n\nFor example, suppose yatr is invoked on a yatrfile named ``C.yml``, which includes ``B.yml``, which includes ``A.yml``, as follows:\n\n``A.yml``::\n\n    macros:\n      a: foo\n      b: def\n      c: xyz\n\n\n``B.yml``::\n\n    include:\n      - A.yml\n\n    macros:\n      a: bar\n      b: ghi\n\n\n``C.yml``::\n\n    include:\n      - B.yml\n\n    macros:\n      a: baz\n\n\nIn this case, the macro values would resolve as follows::\n\n    $ yatr -f C.yml --dump\n    a = baz\n    b = ghi\n    c = xyz\n\n\nName conflicts of tasks from includes are resolved the same way as macros.\n\nInclude paths or URLs may use macros, as the main example above demonstrates, having an include defined in terms of the ``urlbase`` macro.  However, any such macros must be defined in the yatrfile itself, and cannot be defined in an included yatrfile or depend on the macros defined in an included yatrfile for their proper resolution.\n\nIf an include path is a URL, yatr will attempt to download the file and save it in a cache directory.  The cache directory is currently set to ``~/.yatr/``, but future releases will make this configurable.  If the URL file already exists in the cache directory, yatr will load the cached file without downloading.  To force yatr to re-download all URL includes specified by the yatrfile, supply the ``--pull`` option at the command line.\n\nTasks are defined in the ``tasks`` section of the yatrfile.  Tasks may be defined as a single command string.  In this example, the task ``cwd`` is simply defined as the system command ``pwd``.  If your current working directory happens to be ``/foo/baz``, then::\n\n    $ yatr cwd\n    /foo/baz\n\n\nAfter includes are processed, macros are not resolved until task runtime.  The example yatrfile specifies the inclusion of a file named `test2.yml`_, which defines a task named ``foo``.  However, ``foo`` is defined in terms of a macro named ``b``, which is not defined in ``test2.yml``.  The macro ``b`` is defined in the main yatrfile, however, which induces the following behavior::\n\n    $ yatr foo\n    bar\n\n\nTasks may also be defined as a list of command strings, to be executed one after the other, as illustrated by ``bar``::\n\n    $ yatr bar\n    foo\n    bar baz xyz\n\n\nIf the command string is the name of a defined task, then yatr will simply execute that task instead of trying to execute that string as a system command.  The ``bar`` task will first execute the ``foo`` task defined in `test2.yml`_, and then run the ``echo`` command.\n\nThe ``bar`` task also illustrates another feature of yatr:  command-line arguments may be passed to tasks for execution.  For example::\n\n    $ yatr bar foo\n    foo\n    bar baz foo\n\n\nUnless, explicitly re-defined, the macro ``_1`` denotes the first task command-line argument, ``_2`` denotes the second task command-line argument, and so on.  Default values may be specified using the Jinja2 ``default`` filter, as is illustrated in the definition of ``bar``.\n\nTasks may be defined to execute conditionally upon the successful execution of a command, using the keys ``if`` and ``ifnot``.  If these or other command options are used, the command itself must be explicitly identified by use of the ``command`` key.  These principles are illustrated in the ``cond1``, ``cond2``, ``cond3``, and ``cond4`` tasks::\n\n    $ yatr cond1\n    bar\n    $ yatr cond2\n    $ yatr cond3\n    $ yatr cond4\n    bar\n\n\nAs currently implemented, the strings supplied to ``if`` and ``ifnot`` must be system commands, not tasks, and must not contain any macros.  If a value is supplied for ``if``, the command will be executed only if the return code of the test command is zero.  Likewise, if a value is supplied for ``ifnot``, the command will be executed only if the return code of the test command is non-zero.  Supporting macros and task references in the test command specification is planned for future releases.\n\n.. _Jinja2 templates: http://jinja.pocoo.org/docs/latest/templates/\n.. _test2.yml: https://github.com/mbodenhamer/yatrfiles/blob/master/yatrfiles/test/test2.yml\n\n.. _Future Features:\n\nFuture Features\n---------------\n\nAs an inspection of the source code might reveal, three additional top-level keys are also allowed in a yatrfile:  ``import``, ``secrets``, and ``contexts``.  The ``import`` section, much like ``include``, specifies a list of paths or URLs.  However, unlike ``include``, which specifies other yatrfiles, the ``import`` section specifies Python modules to import that will extend the functionality of yatr.  While implemented at a basic level, the future shape of this feature is uncertain and thus its use is not recommended at this time.  However, the goal of this feature is to enable the functionality of yatr to be extended in arbitrarily-complex ways when necessary, while preserving the simplicity of the default YAML specification for the other 95% of use cases that do not require such complexity.\n\nThe ``secrets`` section defines a special type of macro, specifying a list of names corresponding to secrets that should not be stored as plaintext.  In future releases, yatr will attempt to find these values in the user keyring, and then prompt the user to enter their values via stdin if not present.  There will also be an option to store values so entered in the user keyring to avoid having to re-enter them on future task invocations.  No support for secrets is implemented at present, however.\n\nThe ``contexts`` section allows the specification of custom execution contexts in which tasks are invoked.  For example, one might define a custom shell execution context that specifies the values of various environment variables to avoid cluttering up a task definition with extra macros or statements.  This feature is not currently supported, and its future is uncertain.\n\nA top-level ``settings`` section is also planned for configuring the default behavior of tasks in various ways.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/mbodenhamer/yatr",
    "keywords": "task,make,yaml",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "yatr",
    "platform": "",
    "project_url": "https://pypi.org/project/yatr/",
    "release_url": "https://pypi.org/project/yatr/0.0.2/",
    "requires_dist": [
      "requests",
      "dockerman"
    ],
    "requires_python": "",
    "summary": "Yet Another Task Runner",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5e93ff563917acebba85d79397b0013c",
          "sha256": "1cfc986c4fe0f4ad42c6ef9fa7d826fc1641d092db927b629f562adc7fd85815"
        },
        "downloads": -1,
        "filename": "yatr-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e93ff563917acebba85d79397b0013c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 13148,
        "upload_time": "2017-10-19T04:42:19",
        "url": "https://files.pythonhosted.org/packages/a1/c5/49805535330019c750514ebb105c4afc1bb675cd14d9414b4439a9c9e105/yatr-0.0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "827789af38262867a866afcd6c26f4c0",
          "sha256": "edd1c11cf7ddd13e34944bb2af5791ae130c31f036f17e0e0e55d96fc62aefe4"
        },
        "downloads": -1,
        "filename": "yatr-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "827789af38262867a866afcd6c26f4c0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19769,
        "upload_time": "2017-10-19T04:42:20",
        "url": "https://files.pythonhosted.org/packages/93/69/a1dd10026e2bce33b40776fca1e835bfaa7bbee8fa48695733fa1708bbb0/yatr-0.0.1.tar.gz"
      }
    ],
    "0.0.1-pre": [],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f2a91fb2a17d2a044041194eedef22fd",
          "sha256": "5a90890aceeca4925a12a87926e4345b8dfae58032d52c0175356d821df647ff"
        },
        "downloads": -1,
        "filename": "yatr-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f2a91fb2a17d2a044041194eedef22fd",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 20671,
        "upload_time": "2017-10-27T01:43:48",
        "url": "https://files.pythonhosted.org/packages/5f/a0/0f9f85f0cd98080dd7c0a9418d44bc1ac77025564b0403602cceb351ccfd/yatr-0.0.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "994bfc03ae810cd532e22bce7b00d39b",
          "sha256": "3a7d5740eedf5eb772c4ed22d4d784ad07dda00f78fd1eefe27dcc63eb840d13"
        },
        "downloads": -1,
        "filename": "yatr-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "994bfc03ae810cd532e22bce7b00d39b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 28833,
        "upload_time": "2017-10-27T01:43:50",
        "url": "https://files.pythonhosted.org/packages/2f/9e/d19fb62bbe7b1ec204ea5f44e7a486baf70c56cc26823519751fabac7a43/yatr-0.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f2a91fb2a17d2a044041194eedef22fd",
        "sha256": "5a90890aceeca4925a12a87926e4345b8dfae58032d52c0175356d821df647ff"
      },
      "downloads": -1,
      "filename": "yatr-0.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f2a91fb2a17d2a044041194eedef22fd",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 20671,
      "upload_time": "2017-10-27T01:43:48",
      "url": "https://files.pythonhosted.org/packages/5f/a0/0f9f85f0cd98080dd7c0a9418d44bc1ac77025564b0403602cceb351ccfd/yatr-0.0.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "994bfc03ae810cd532e22bce7b00d39b",
        "sha256": "3a7d5740eedf5eb772c4ed22d4d784ad07dda00f78fd1eefe27dcc63eb840d13"
      },
      "downloads": -1,
      "filename": "yatr-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "994bfc03ae810cd532e22bce7b00d39b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 28833,
      "upload_time": "2017-10-27T01:43:50",
      "url": "https://files.pythonhosted.org/packages/2f/9e/d19fb62bbe7b1ec204ea5f44e7a486baf70c56cc26823519751fabac7a43/yatr-0.0.2.tar.gz"
    }
  ]
}