{
  "info": {
    "author": "Martin Owens",
    "author_email": "doctormo@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Bug Reports and Development\n===========================\n\nPlease report any problems to `the launchpad bug tracker <https://bugs.launchpad.net/pyvalidate>`_\n\nDescription\n===========\n\nThis module provides a way to validate data from many different file formats with a condensed\nXML Schema (XSD) subset. Errors are returned using a mirror-tree pattern instead of an exception\nbased invalidation.\n\nBased on xsd and xml validation, this is an attempt to provide those functions\nwithout requiring xml and to allow errors to be fed into machine readable mechanisms.\n\nSynopse\n=======\n\n from xssd import Validator\n\n val = Validator( definition )\n err = val.validate( data )\n\n print err or \"All is well!\"\n\nDefinitions\n===========\n\nAn example definition for registering a user on a website:\n\n definition = {\n    'root' : [\n        { 'name : 'username',     'type' : 'token'                                   },\n        { 'name : 'password',     'type' : 'password'                                },\n        { 'name : 'confirm',      'type' : 'confirm'                                 },\n        { 'name : 'firstName',    'type' : 'rname'                                   },\n        { 'name : 'familyName',   'type' : 'name',  'minOccurs' : 0                  },\n        { 'name : 'nickName',     'type' : 'name',  'minOccurs' : 0                  },\n        { 'name : 'emailAddress', 'type' : 'email', 'minOccurs' : 1, 'maxOccurs' : 3 },\n        [\n          { 'name' : 'aim',    'type' : 'index'  },\n          { 'name' : 'msn',    'type' : 'email'  },\n          { 'name' : 'jabber', 'type' : 'email'  },\n          { 'name' : 'irc',    'type' : 'string' },\n        ],\n    ],\n\n    'simpleTypes' : {\n      'confirm'  : { 'base' : 'id',   'match'     : '/input/password' },\n      'rname'    : { 'base' : 'name', 'minLength' : 1 },\n      'password' : { 'base' : 'id',   'minLength' : 6 },\n    },\n\n    'complexTypes' : {},\n }\n\nData\n====\n\nAnd this is an example of the data that would validate against it:\n\n  data = {\n      'username'     : 'abcdef',\n      'password'     : '1234567',\n      'confirm'      : '1234567',\n      'firstName'    : 'test',\n      'familyName'   : 'user',\n      'nickName'     : 'foobar',\n      'emailAddress' : [ 'foo@bar.com', 'some@other.or', 'great@nice.con' ],\n      'msn'          : 'foo@msn.com',\n  }\n\nWe are asking for a username, a password typed twice, some real names, a nick name, between 1 and 3 email addresses and at least one instant message account, foo is an extra string of information to show that the level is arbitary. bellow the definition and all options are explained.\n\nErrors and Results\n==================\n\nThe first result you get is a structure the second is a boolean, the boolean explains the total stuctures pass or fail status.\n\nThe structure that is returned is almost a mirror structure of the input:\n\nerrors = {\n    'input' : {\n       'username'     : NO_ERROR,\n       'password'     : NO_ERROR,\n       'confirm'      : NO_ERROR,\n       'firstName'    : NO_ERROR,\n       'familyName'   : NO_ERROR,\n       'nickName'     : NO_ERROR,\n       'emailAddress' : NO_ERROR,\n    }\n},\n\n\nSimple Types\n============\n\nA simple type is a definition which will validate data directly, it will never validate lists or dictionaries.\n\nEach simpleType is defined as an item in the definition's 'simpleTypes' list.\n\n  base           - The name of another simple type to first test the value against.\n  fixed          - The value should match this exactly.\n  pattern        - Should be a regular expresion reference which matchs the value.\n  minLength      - The minimum length of a string value.\n  maxLength      - The maximum length of a string value.\n  match          - An XPath link to another data node it should match.\n  notMatch       - An XPath link to another data node it should NOT match.\n  enumeration    - An array reference of possible values of which value should be one.\n  custom         - Should contain a CODE reference which will be called upon to validate the value.\n  minInclusive   - The minimum value of a number value inclusive, i.e greater than or eq to (>=).\n  maxInclusive   - The maximum value of a number value inclusive, i.e less than of eq to (<=).\n  minExclusive   - The minimum value of a number value exlusive, i.e more than (>).\n  maxExclusive   - The maximum value of a number value exlusive, i.e less than (<).\n  fractionDigits - The maximum number of digits on a fractional number.\n\nComplex Types\n=============\n\nA complex type is a definition which will validate a dictionary. The optional very first structure, 'root' is a complex definition and follows the same syntax as all complex types. Each complex type is a list of data which should all occur in the hash, when a list entry is a hash it equates to one named entry in the hash data and has the following options:\n\n  name      - Required name of the entry in the hash data.\n  minOccurs - The minimum number of the named that this data should have in it.\n  maxOccurs - The maximum number of the named that this data should have in it.\n  type      - The type definition which validates the contents of the data.\n\nWhere the list entry is an array, it will toggle the combine mode and allow further list entries With in it this allows for parts of the sturcture to be optional only if different parts of the stucture exist.\n\nInbuilt Types\n=============\n\n  By default these types are available to all definitions as base types.\n\n    string           - /^.*$/\n    integer          - /^[\\-]{0,1}\\d+$/\n    index            - /^\\d+$/\n    double           - /^[0-9\\-\\.]*$/\n    token            - /^\\w+$/\n    boolean          - /^1|0|true|false$/\n    email            - /^.+@.+\\..+$/\n    date             - /^\\d\\d\\d\\d-\\d\\d-\\d\\d$/ + datetime\n    'time'           - /^\\d\\d:\\d\\d$/ + datetime\n    datetime         - /^(\\d\\d\\d\\d-\\d\\d-\\d\\d)?[T ]?(\\d\\d:\\d\\d)?$/ + valid_date method\n    percentage       - minInclusive == 0 + maxInclusive == 100 + double\n\n\nTesting\n=======\n\nThe test suite provides the full supported schema and tests against itself to ensure sanity.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://code.launchpad.net/pyvalidate",
    "keywords": null,
    "license": "GPLv3",
    "maintainer": null,
    "maintainer_email": null,
    "name": "xssd",
    "platform": "linux",
    "project_url": "https://pypi.org/project/xssd/",
    "release_url": "https://pypi.org/project/xssd/0.7/",
    "requires_python": null,
    "summary": "Validating python structures based on XSD Subset rules.",
    "version": "0.7"
  },
  "releases": {
    "0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a110e7a1449ae769281b7c538b20e4a7",
          "sha256": "b5125bec28756616a0ea9fbe2a881c89f8be08c999082781c6e10d3b7ed21f1a"
        },
        "downloads": 1545,
        "filename": "xssd-0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "a110e7a1449ae769281b7c538b20e4a7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 37543,
        "upload_time": "2014-04-25T19:02:31",
        "url": "https://files.pythonhosted.org/packages/15/b9/41522407989ea7c527fd20407b84380b71c23bf3dab46a928d49ebcc6974/xssd-0.6.tar.gz"
      }
    ],
    "0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c0cc17eb8adf2245e1341b4bd9eb868c",
          "sha256": "af589a80e66509a59e580419f8da1fccdccfce7ac89b7d4091c2091eef7a12a4"
        },
        "downloads": 2115,
        "filename": "xssd-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "c0cc17eb8adf2245e1341b4bd9eb868c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 36130,
        "upload_time": "2014-05-18T23:50:11",
        "url": "https://files.pythonhosted.org/packages/a8/42/28417ac07d6ada725fb225fbbcf9e78ab5224657f9f0f9dc92fe7531a1ee/xssd-0.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c0cc17eb8adf2245e1341b4bd9eb868c",
        "sha256": "af589a80e66509a59e580419f8da1fccdccfce7ac89b7d4091c2091eef7a12a4"
      },
      "downloads": 2115,
      "filename": "xssd-0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "c0cc17eb8adf2245e1341b4bd9eb868c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 36130,
      "upload_time": "2014-05-18T23:50:11",
      "url": "https://files.pythonhosted.org/packages/a8/42/28417ac07d6ada725fb225fbbcf9e78ab5224657f9f0f9dc92fe7531a1ee/xssd-0.7.tar.gz"
    }
  ]
}