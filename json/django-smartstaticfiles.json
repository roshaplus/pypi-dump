{
  "info": {
    "author": "Rockallite Wulf",
    "author_email": "rockallite.wulf@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "django-smartstaticfiles\n=======================\n\n**django-smartstaticfiles** enhances the functionalities of |collectstatic|_\nmanagement command of Django **1.11.x**, allows for finer-grained control\nover serving static files in production.\n\nUnder the hood, it provides a file storage backend for use with\n|STATICFILES_STORAGE|_ setting, which inherits and improves Django's\n|ManifestStaticFilesStorage|_ storage backend.\n\nFeatures\n--------\n\n- Deletes unhashed files and intermediate files by default.\n- Optionally ignores hashing of specific files.\n- Optionally minifies JavaScript and CSS files.\n- Optionally replace JavaScript asset URLs with hashed versions using\n  *loud comments* markup. *(New in v0.2.0)*\n- Optimizes hashing process with fewer I/O and less calculation.\n\nQuick Start\n-----------\n\n1. Install the stable version from PyPI:\n\n   .. code:: bash\n\n       pip install django-smartstaticfiles\n\n   Or install the stable version with extras for JavaScript and CSS minification\n   (will also install |jsmin|_ and |csscompressor|_):\n\n   .. code:: bash\n\n       pip install django-smartstaticfiles[jsmin,cssmin]\n\n   Or install the latest version from GitHub:\n\n   .. code:: bash\n\n       pip install git+https://github.com/rockallite/django-smartstaticfiles.git\n\n2. Add the following lines to the project's Django settings module:\n\n   .. code:: python\n\n       STATIC_ROOT = '/path/for/collecting/static/files'\n\n       STATICFILES_STORAGE = 'django_smartstaticfiles.storage.SmartManifestStaticFilesStorage'\n\n       # Remove this if you don't need to minify JavaScript and CSS\n       SMARTSTATICFILES_CONFIG = {\n           'JS_MIN_ENABLED': True,\n           'CSS_MIN_ENABLED': True,\n       }\n\n3. In the project directory, collect static files by running the following\n   command:\n\n   .. code:: bash\n\n       python manage.py collectstatic --clear --no-input\n\nJavaScript Asset URLs Replacement\n---------------------------------\n\n*(New in v0.2.0)*\n\nBy default, URLs of referenced assets (images, fonts, etc) in CSS\nfiles will be replaced with hashed versions during processing.\n**django-smartstaticfiles** extends this feature to JavaScript files by\nutilizing special *loud comments* (``/*! ... */``) markup.\n\nSimple use case\n~~~~~~~~~~~~~~~\n\nThe JavaScript asset URLs replacement feature is disabled by default. To enable\nit, add the following setting to Django settings module:\n\n.. code:: python\n\n    SMARTSTATICFILES_CONFIG = {\n        # Enable JavaScript asset URLs replacement\n        'JS_ASSETS_REPL_ENABLED': True,\n    }\n\nTo replace an asset URL with the hashed version, surround the URL string with\n``/*! rev */`` and ``/*! endrev */`` markup:\n\n.. code:: javascript\n\n    var imageURL = /*! rev */ '../img/welcome.jpg' /*! endrev */;\n\nSupposed that the hashed filename is ``welcome.ac99c750806a.jpg``, the\nprocessing result will be:\n\n.. code:: javascript\n\n    var imageURL = '../img/welcome.ac99c750806a.jpg';\n\nOnly a single- or double-quoted bare string should be put inside ``/*! rev */``\nand ``/*! endrev */`` markup. No comma or semicolon is allowed. Spaces around\nor inside loud comments are optional, though.\n\nUsing a different parent path\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default, relative asset URLs are considered to be relative to the\nreferencing JavaScript file, just the same rule for a CSS file. However,\nsince JavaScript runs in global scope of a browser, the path of a\nJavaScript file is sometimes not useful for locating relative assets.\n\nTherefore, the markup accepts a parameter as *virtual parent path*, passing in\nbetween a pair of parentheses right behind the loud comment starting tag, like\nthis: ``/*! rev(path) */``. During processing, it will be considered as if it\nwere the parent path of the asset. For example:\n\n.. code:: javascript\n\n    /*\n     * Supposed there are following files:\n     *     STATIC_URL/helloworld/img/welcome.jpg\n     *     STATIC_URL/helloworld/js/main.js\n     *\n     * Then in the main.js:\n     */\n\n    var imageURLs = [\n        // *** Absolute reference ***\n        // (STATIC_URL as the root path)\n\n        // Leading and trailing slashes in a virtual parent path are optional\n        /*! rev(helloworld/img) */ 'welcome.jpg' /*! endrev */,\n        /*! rev(/helloworld/img/) */ 'welcome.jpg' /*! endrev */,\n        /*! rev(/helloworld/img) */ 'welcome.jpg' /*! endrev */,\n        /*! rev(helloworld/img/) */ 'welcome.jpg' /*! endrev */,\n\n        // A leading dot slash (./) or dot-dot slash (../) in an asset URL is OK\n        /*! rev(helloworld/img) */ './welcome.jpg' /*! endrev */,\n        /*! rev(helloworld/img) */ '../img/welcome.jpg' /*! endrev */,\n\n        // Use different path portion in a virtual parent path. A single slash means root (STATIC_URL).\n        /*! rev(helloworld) */ 'img/welcome.jpg' /*! endrev */,\n        /*! rev(/) */ 'helloworld/img/welcome.jpg' /*! endrev */,\n\n        // *** Relative reference ***\n        // (Relative to the JavaScript file)\n\n        // A leading dot (.) or dot-dot (..) path part in a virtual parent path indicates a relative reference\n        /*! rev(../img) */ 'welcome.jpg' /*! endrev */,\n        /*! rev(..) */ 'img/welcome.jpg' /*! endrev */,\n        /*! rev(../..) */ 'helloworld/img/welcome.jpg' /*! endrev */\n    ];\n\nAfter processing, the above code becomes:\n\n.. code:: javascript\n\n    /*\n     * Supposed there are following files:\n     *     STATIC_URL/helloworld/img/welcome.jpg\n     *     STATIC_URL/helloworld/js/main.js\n     *\n     * Then in the main.js:\n     */\n\n    var imageURLs = [\n        // *** Absolute reference ***\n        // (STATIC_URL as the root path)\n\n        // Leading and trailing slashes in a virtual parent path are optional\n        'welcome.ac99c750806a.jpg',\n        'welcome.ac99c750806a.jpg',\n        'welcome.ac99c750806a.jpg',\n        'welcome.ac99c750806a.jpg',\n\n        // A leading dot slash (./) or dot-dot slash (../) in an asset URL is OK\n        './welcome.ac99c750806a.jpg',\n        '../img/welcome.ac99c750806a.jpg',\n\n        // Use different path portion in a virtual parent path. A single slash means root (STATIC_URL).\n        'img/welcome.ac99c750806a.jpg',\n        'helloworld/img/welcome.ac99c750806a.jpg',\n\n        // *** Relative reference ***\n        // (Relative to the JavaScript file)\n\n        // A leading dot (.) or dot-dot (..) path part in a virtual parent path indicates a relative reference\n        'welcome.ac99c750806a.jpg',\n        'img/welcome.ac99c750806a.jpg',\n        'helloworld/img/welcome.ac99c750806a.jpg'\n    ];\n\nNotice that ``STATIC_URL`` **WILL NOT be prepended to the final URL**. You\nhave to pass the value of ``STATIC_URL`` to the browser, e.g. via Django\ntemplates in dynamic generated JavaScript code, and then manually concatenate the value and the URL path in JavaScript.\n\nCustomizing the tag name\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can also use a custom tag name in loud comments markup via the following\nsetting in Django settings module:\n\n.. code:: python\n\n    SMARTSTATICFILES_CONFIG = {\n        # ...\n        # Tag name of loud comments used in JavaScript asset URLs replacement\n        'JS_ASSETS_REPL_TAG': 'hash-it',\n    }\n\nThen the corresponding JavaScript code should be written as:\n\n.. code:: javascript\n\n    var imageURL = /*! hash-it */ '../img/welcome.jpg' /*! endhash-it */;\n\nHints about minification\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you use a customized JavaScript minification function, you should ensure\nthat loud comments (``/*! ... */``) are preserved after processing.\nOtherwise, JavaScript asset URLs replacement won't work. The default ``jsmin``\nlibrary takes care of that.\n\nSome JavaScript minification libraries (including ``jsmin``) will deliberately\ninsert a newline at the end of each loud comment after minification. For\nexample, supposed that there is following code:\n\n.. code:: javascript\n\n    var imageURL = /*! rev */ '../img/welcome.jpg' /*! endrev */;\n    var mehFace = 'mehFace';\n\nIt would be minified as:\n\n.. code:: javascript\n\n    var imageURL=/*! rev */\n    '../img/welcome.jpg'/*! endrev */\n    ;var mehFace='mehFace';\n\nThis is totally acceptable in most cases. However, it is still possible that\nit causes unexpected results in `some edge cases`_ or drives perfectionists\nnuts. Therefore **django-smartstaticfiles** by default will remove one trailing\nnewline (if presents) from each replaced URL in JavaScript if ``\"JS_MIN_ENABLED\"`` is set to ``True``. The final result after URLs replacement would be:\n\n.. code:: javascript\n\n    var imageURL='../img/welcome.ac99c750806a.jpg';var mehFace='mehFace';\n\nThat's much nicer. If you don't want this behavior, add the following setting\nto Django settings module:\n\n.. code:: python\n\n    SMARTSTATICFILES_CONFIG = {\n        # ...\n        # Disable removal of a trailing newline at the end of loud comments when replacing asset URLs\n        # in JavaScript (restoring the old behavior in v0.2.0)\n        'JS_ASSETS_REPL_TRAILING_FIX': False,\n    }\n\n*(New in v0.3.0: the* ``JS_ASSETS_REPL_TRAILING_FIX`` *setting and new behavior\nis added.)*\n\nConfigurations\n--------------\nAll configurations of **django-smartstaticfiles** are in the ``SMARTSTATICFILES_CONFIG`` property of\nDjango settings module, a dict containing configuration keys. All\nkeys are optional, which means you don't even need a ``SMARTSTATICFILES_CONFIG``\nproperty at all if the default values meet your needs.\n\nPossible keys and default values are listed below:\n\n.. code:: python\n\n    SMARTSTATICFILES_CONFIG = {\n        # Whether to enable JavaScript minification.\n        'JS_MIN_ENABLED': False,\n\n        # Whether to enable CSS minification.\n        'CSS_MIN_ENABLED': False,\n\n        # File patterns for matching JavaScript assets (in relative URL without\n        # STATIC_URL prefix)\n        'JS_FILE_PATTERNS': ['*.js'],\n\n        # File patterns for matching CSS assets (in relative URL without\n        # STATIC_URL prefix)\n        'CSS_FILE_PATTERNS': ['*.css'],\n\n        # Dotted string of the module path and the callable for JavaScript\n        # minification. The callable should accept a single argument of unicode\n        # string which contains the content of original JavaScript, and return\n        # a unicode string of minified content. (Notice that loud comments\n        # such as /*! ... */ must be preserved in the result so as to make\n        # JavaScript asset URLs replacement work.) The result will be cached and\n        # reused when possible.\n        'JS_MIN_FUNC': 'jsmin.jsmin',\n\n        # Dotted string of the module path and the callable for CSS\n        # minification. The callable should accept a single argument of unicode\n        # string which contains the content of original CSS, and return a\n        # unicode string of minified content. The result will be cached and\n        # reused when possible.\n        'CSS_MIN_FUNC': 'csscompressor.compress',\n\n        # A regular expression (case-sensitive by default) which is used to\n        # search against assets (in relative URL without STATIC_URL prefix). The\n        # mathced assets won't be minified. Set it to None to ignore no assets.\n        # (Assets with .min.js or .min.css extensions are always ignored.)\n        'RE_IGNORE_MIN': None,\n\n        # Whether to enable deletion of unhashed files.\n        'DELETE_UNHASHED_ENABLED': True,\n\n        # Whether to enable deletion of intermediate hashed files.\n        'DELETE_INTERMEDIATE_ENABLED': True,\n\n        # A regular expression (case-sensitive by default) which is used to\n        # search against assets (in relative URL without STATIC_URL prefix). The\n        # matched assets won't be hashed. Set it to None to ignore no assets.\n        'RE_IGNORE_HASHING': None,\n\n        # Whether to enable JavaScript asset URLs replacement.\n        'JS_ASSETS_REPL_ENABLED': False,\n\n        # Tag name of loud comments used in JavaScript asset URLs replacement.\n        'JS_ASSETS_REPL_TAG': 'rev',\n\n        # Whether to remove one trailing newline (if presents) after each\n        # replaced URL in JavaScript. This is effective only if \"JS_MIN_ENABLED\"\n        # is set to True. This fixes the problems and annoyances caused by a\n        # deliberately added newline at the end of each loud comment by certain\n        # minification libraries (such as jsmin).\n        'JS_ASSETS_REPL_TRAILING_FIX': True,\n    }\n\n\nExtensibility\n-------------\n\nThe ``SmartManifestStaticFilesStorage`` storage backend provided by **django-smartstaticfiles** inherits two parent\nclasses:\n\n.. code:: python\n\n    class SmartManifestStaticFilesStorage(SmartManifestFilesMixin, StaticFilesStorage):\n        pass\n\nThe main logic is implemented in ``SmartManifestFilesMixin``,\nwhich is similar to Django's ``ManifestStaticFilesStorage``:\n\n.. code:: python\n\n    class ManifestStaticFilesStorage(ManifestFilesMixin, StaticFilesStorage):\n        pass\n\nThe goal of this project is to make ``SmartManifestFilesMixin``\na drop-in replacement for ``ManifestFilesMixin``, without sacrificing\nfunctionalities or performance. So you can combine\n``SmartManifestFilesMixin`` with other storage class that is compatible with\n``ManifestFilesMixin``.\n\nFor example, django-s3-storage_ provides a storage backend which utilizes\nDjango's ``ManifestFilesMixin``:\n\n.. code:: python\n\n    # django_s3_storage/storage.py\n    from django.contrib.staticfiles.storage import ManifestFilesMixin\n\n    # ...\n\n    class ManifestStaticS3Storage(ManifestFilesMixin, StaticS3Storage):\n        pass\n\nYou can make a similar but enhanced storage backend by replacing it with\n``SmartManifestFilesMixin``:\n\n.. code:: python\n\n    from django_s3_storage.storage import StaticS3Storage\n    from django_smartstaticfiles.storage import SmartManifestFilesMixin\n\n\n    class SmartManifestStaticS3Storage(SmartManifestFilesMixin, StaticS3Storage):\n        pass\n\nWhy Django 1.11.x only?\n-----------------------\n\nUntil version 1.11, Django shipped with a ``ManifestStaticFilesStorage`` storage\nbackend that had `a broken implementation`_. In other words, content changes in\nreferenced files (images, fonts, etc) aren't represented in hashes of\nreferencing files (CSS files, specifically). This breaks the foundation of\ncache-busting mechanism.\n\nThen, there are significant code changes in Django 1.11.x in order to fix the\nbehavior of the ``ManifestStaticFilesStorage`` storage backend. And it becomes\nimpractical to maintain compatibility of **django-smartstaticfiles** with older\nDjango code. Therefore, only Django 1.11.x is supported (the latest version at\nthe time of writing).\n\n\n.. |collectstatic| replace:: ``collectstatic``\n.. _collectstatic: https://docs.djangoproject.com/en/1.11/ref/contrib/staticfiles/#django-admin-collectstatic\n\n.. |STATICFILES_STORAGE| replace:: ``STATICFILES_STORAGE``\n.. _STATICFILES_STORAGE: https://docs.djangoproject.com/en/1.11/ref/settings/#std:setting-STATICFILES_STORAGE\n\n.. |ManifestStaticFilesStorage| replace:: ``ManifestStaticFilesStorage``\n.. _ManifestStaticFilesStorage: https://docs.djangoproject.com/en/1.11/ref/contrib/staticfiles/#manifeststaticfilesstorage\n\n.. |jsmin| replace:: ``jsmin``\n.. _jsmin: https://github.com/tikitu/jsmin/\n\n.. |csscompressor| replace:: ``csscompressor``\n.. _csscompressor: https://github.com/sprymix/csscompressor\n\n.. _`some edge cases`: http://stackoverflow.com/questions/2846283/what-are-the-rules-for-javascripts-automatic-semicolon-insertion-asi\n\n.. _django-s3-storage: https://github.com/etianen/django-s3-storage\n\n.. _a broken implementation: https://docs.djangoproject.com/en/1.11/ref/contrib/staticfiles/#django.contrib.staticfiles.storage.ManifestStaticFilesStorage.max_post_process_passes\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/rockallite/django-smartstaticfiles",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-smartstaticfiles",
    "platform": "",
    "project_url": "https://pypi.org/project/django-smartstaticfiles/",
    "release_url": "https://pypi.org/project/django-smartstaticfiles/0.3.0/",
    "requires_python": "",
    "summary": "Provides enhanced static files storage backend for Django 1.11",
    "version": "0.3.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5115be5de673b262548543b835fc680e",
          "sha256": "ad3bbc2b332a5a1be5820f1ad64c4d87d389a53b5f9ce77471e15ff5c45fddea"
        },
        "downloads": 0,
        "filename": "django_smartstaticfiles-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5115be5de673b262548543b835fc680e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 12767,
        "upload_time": "2017-05-10T17:14:01",
        "url": "https://files.pythonhosted.org/packages/cf/e0/0c295e3808ae72be668479d669824eaaa2b973c6b544a40d8899bb1808e2/django_smartstaticfiles-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "252de31a894e529ca9ccca9994f26fe3",
          "sha256": "421257c6255f040695e3f1ac4a8ea09986d93151ad697dbbefc7f55e1801343c"
        },
        "downloads": 0,
        "filename": "django-smartstaticfiles-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "252de31a894e529ca9ccca9994f26fe3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9576,
        "upload_time": "2017-05-10T17:07:01",
        "url": "https://files.pythonhosted.org/packages/58/5a/2cf44053fffd2970c0fec455823356ad2b73be5b484040cec19246e4c4ec/django-smartstaticfiles-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "71df2f22193397f70342f3805b580434",
          "sha256": "2d9d68307ab30717f9768073bf154262137401c4941dd7134a000736295d7efd"
        },
        "downloads": 0,
        "filename": "django_smartstaticfiles-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "71df2f22193397f70342f3805b580434",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 16471,
        "upload_time": "2017-05-11T15:00:16",
        "url": "https://files.pythonhosted.org/packages/d5/ab/a4f25c90132b6c81b262ec393d2462115dc042d7c344c9bcdd86990df4ab/django_smartstaticfiles-0.2.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "795a54758527a53d43794f8ec704c68c",
          "sha256": "1ff62a8881c36c6012de447c099ef8e2a2c776272dc1db7111e11e3e81608785"
        },
        "downloads": 0,
        "filename": "django-smartstaticfiles-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "795a54758527a53d43794f8ec704c68c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12980,
        "upload_time": "2017-05-11T15:00:18",
        "url": "https://files.pythonhosted.org/packages/00/55/dfd4a7172b13c167968756232e0209d29c0ff450e1059d30abebb7d7498b/django-smartstaticfiles-0.2.0.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "70531d0540e43d746357bb5840b6c894",
          "sha256": "7fdfe0ec29d1b677f0b53e302889e52bac43ccf26213c2b2f2da22992e57b2e0"
        },
        "downloads": 0,
        "filename": "django_smartstaticfiles-0.3.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "70531d0540e43d746357bb5840b6c894",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 18142,
        "upload_time": "2017-05-12T11:13:25",
        "url": "https://files.pythonhosted.org/packages/ac/92/4dba20b769fd1cb8b983cddf35c31b7a54a36f1f1e9503ee503876fc4f1b/django_smartstaticfiles-0.3.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9002c499ec9b3c116154b5235c914cce",
          "sha256": "5dd9a5d9bd80c04cedfc87051638dbab76b88e4c5ff290fcbf06b6707e75ceb7"
        },
        "downloads": 0,
        "filename": "django-smartstaticfiles-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9002c499ec9b3c116154b5235c914cce",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14436,
        "upload_time": "2017-05-12T11:13:29",
        "url": "https://files.pythonhosted.org/packages/dd/1c/073aa38a014f3e2c4da3a15e32b4bf538b2cfa79909d8a247dbe3d8bb190/django-smartstaticfiles-0.3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "70531d0540e43d746357bb5840b6c894",
        "sha256": "7fdfe0ec29d1b677f0b53e302889e52bac43ccf26213c2b2f2da22992e57b2e0"
      },
      "downloads": 0,
      "filename": "django_smartstaticfiles-0.3.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "70531d0540e43d746357bb5840b6c894",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 18142,
      "upload_time": "2017-05-12T11:13:25",
      "url": "https://files.pythonhosted.org/packages/ac/92/4dba20b769fd1cb8b983cddf35c31b7a54a36f1f1e9503ee503876fc4f1b/django_smartstaticfiles-0.3.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "9002c499ec9b3c116154b5235c914cce",
        "sha256": "5dd9a5d9bd80c04cedfc87051638dbab76b88e4c5ff290fcbf06b6707e75ceb7"
      },
      "downloads": 0,
      "filename": "django-smartstaticfiles-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9002c499ec9b3c116154b5235c914cce",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 14436,
      "upload_time": "2017-05-12T11:13:29",
      "url": "https://files.pythonhosted.org/packages/dd/1c/073aa38a014f3e2c4da3a15e32b4bf538b2cfa79909d8a247dbe3d8bb190/django-smartstaticfiles-0.3.0.tar.gz"
    }
  ]
}