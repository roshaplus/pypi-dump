{
  "info": {
    "author": "Student.com",
    "author_email": "wearehiring@student.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "SQLAlchemy-filters\n==================\n\n.. pull-quote::\n\n    Filter, sort and paginate SQLAlchemy query objects.\n    Ideal for exposing these actions over a REST API.\n\nFiltering\n---------\n\nAssuming that we have a SQLAlchemy `query` that only contains a single\nmodel:\n\n.. code-block:: python\n\n    from sqlalchemy import Column, Integer, String\n    from sqlalchemy.ext.declarative import declarative_base\n\n\n    class Base(object):\n        id = Column(Integer, primary_key=True)\n        name = Column(String(50), nullable=False)\n        count = Column(Integer, nullable=True)\n\n\n    Base = declarative_base(cls=Base)\n\n\n    class Foo(Base):\n\n        __tablename__ = 'foo'\n\n    # ...\n\n    query = self.session.query(Foo)\n\nThen we can apply filters to that ``query`` object (multiple times):\n\n.. code-block:: python\n\n    from sqlalchemy_filters import apply_filters\n\n    # `query` should be a SQLAlchemy query object\n\n    filters = [{'field': 'name', 'op': '==', 'value': 'name_1'}]\n    filtered_query = apply_filters(query, filters)\n\n    more_filters = [{'field': 'foo_id', 'op': 'is_not_null'}]\n    filtered_query = apply_filters(filtered_query, more_filters)\n\n    result = filtered_query.all()\n\nSort\n----\n\n.. code-block:: python\n\n    from sqlalchemy_filters import apply_sort\n\n    # `query` should be a SQLAlchemy query object\n\n    order_by = [\n        {'field': 'name', 'direction': 'asc'},\n        {'field': 'id', 'direction': 'desc'},\n    ]\n    sorted_query = apply_sort(query, order_by)\n\n    result = sorted_query.all()\n\n\nPagination\n----------\n\n.. code-block:: python\n\n    from sqlalchemy_filters import apply_pagination\n\n    # `query` should be a SQLAlchemy query object\n\n    query, pagination = apply_pagination(query, page_number=1, page_size=10)\n\n    page_size, page_number, num_pages, total_results = pagination\n\n    assert 10 == len(query)\n    assert 10 == page_size == pagination.page_size\n    assert 1 == page_number == pagination.page_number\n    assert 3 == num_pages == pagination.num_pages\n    assert 22 == total_results == pagination.total_results\n\nFilters format\n--------------\n\nFilters must be provided in a list and will be applied sequentially.\nEach filter will be a dictionary element in that list, using the\nfollowing format:\n\n.. code-block:: python\n\n    filters = [\n        {'field': 'field_name', 'op': '==', 'value': 'field_value'},\n        {'field': 'field_2_name', 'op': '!=', 'value': 'field_2_value'},\n        # ...\n    ]\n\nOptionally, if there is only one filter, the containing list may be omitted:\n\n.. code-block:: python\n\n    filters = {'field': 'field_name', 'op': '==', 'value': 'field_value'}\n\nWhere ``field`` is the name of the field that will be filtered using the\noperator provided in ``op`` (optional, defaults to `==`) and the\nprovided ``value`` (optional, depending on the operator).\n\nThis is the list of operators that can be used:\n\n- ``is_null``\n- ``is_not_null``\n- ``==``, ``eq``\n- ``!=``, ``ne``\n- ``>``, ``gt``\n- ``<``, ``lt``\n- ``>=``, ``ge``\n- ``<=``, ``le``\n- ``like``\n- ``in``\n- ``not_in``\n\nBoolean Functions\n*****************\n``and``, ``or``, and ``not`` functions can be used and nested within the filter definition:\n\n.. code-block:: python\n\n    filters = [\n        {\n            'or': [\n                {\n                    'and': [\n                        {'field': 'field_name', 'op': '==', 'value': 'field_value'},\n                        {'field': 'field_2_name', 'op': '!=', 'value': 'field_2_value'},\n                    ]\n                },\n                {\n                    'not': [\n                        {'field': 'field_3_name', 'op': '==', 'value': 'field_3_value'}\n                    ]\n                },\n            ],\n        }\n    ]\n\n\nNote: ``or`` and ``and`` must reference a list of at least one element. ``not`` must reference a list of exactly one element.\n\nSort format\n-----------\n\nSort elements must be provided as dictionaries in a list and will be\napplied sequentially:\n\n.. code-block:: python\n\n    order_by = [\n        {'field': 'name', 'direction': 'asc'},\n        {'field': 'id', 'direction': 'desc'},\n        # ...\n    ]\n\nWhere ``field`` is the name of the field that will be sorted using the\nprovided ``direction``.\n\nRunning tests\n-------------\n\nThere are some Makefile targets that can be used to run the tests. A\ntest database will be created, used during the tests and destroyed\nafterwards.\n\nThe default configuration uses both SQLite and MySQL (if the driver is\ninstalled) to run the tests, with the following URIs:\n\n.. code-block:: shell\n\n    sqlite+pysqlite:///test_sqlalchemy_filters.db\n    mysql+mysqlconnector://root:@localhost:3306/test_sqlalchemy_filters\n\nExample of usage:\n\n.. code-block:: shell\n\n    $ # using default settings\n    $ make test\n    $ make coverage\n\n    $ # overriding DB parameters\n    $ ARGS='--mysql-test-db-uri mysql+mysqlconnector://root:@192.168.99.100:3340/test_sqlalchemy_filters' make test\n    $ ARGS='--sqlite-test-db-uri sqlite+pysqlite:///test_sqlalchemy_filters.db' make test\n\n    $ ARGS='--mysql-test-db-uri mysql+mysqlconnector://root:@192.168.99.100:3340/test_sqlalchemy_filters' make coverage\n    $ ARGS='--sqlite-test-db-uri sqlite+pysqlite:///test_sqlalchemy_filters.db' make coverage\n\n\nLicense\n-------\n\nApache 2.0. See LICENSE for details.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Overseas-Student-Living/sqlalchemy-filters",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlalchemy-filters",
    "platform": "",
    "project_url": "https://pypi.org/project/sqlalchemy-filters/",
    "release_url": "https://pypi.org/project/sqlalchemy-filters/0.3.0/",
    "requires_python": "",
    "summary": "A library to filter SQLAlchemy queries.",
    "version": "0.3.0"
  },
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "68395bb825ab2c2269f7128dc341cf2e",
          "sha256": "ec24a191df860c93fb02ee4379f9b49196d0a52fede4aef43783dd4aa8969ebe"
        },
        "downloads": 156,
        "filename": "sqlalchemy-filters-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "68395bb825ab2c2269f7128dc341cf2e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5651,
        "upload_time": "2017-02-17T15:21:29",
        "url": "https://files.pythonhosted.org/packages/5a/c3/9e3494900983000f05b53c8e35859a748eceb3df08d2a5a2d8b106adfe9f/sqlalchemy-filters-0.2.0.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "aded656a46e7764cb07a40a621750b0c",
          "sha256": "94ab8a7e79c32f3495431aad34495a18a0ac02e7f7c27645b6ef841f40e2fa27"
        },
        "downloads": 0,
        "filename": "sqlalchemy-filters-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "aded656a46e7764cb07a40a621750b0c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7176,
        "upload_time": "2017-05-30T17:38:52",
        "url": "https://files.pythonhosted.org/packages/cc/d2/6b9e4f32e1bc12af44af79a28193576c7e5fae662313c3456c88cbba8502/sqlalchemy-filters-0.3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "aded656a46e7764cb07a40a621750b0c",
        "sha256": "94ab8a7e79c32f3495431aad34495a18a0ac02e7f7c27645b6ef841f40e2fa27"
      },
      "downloads": 0,
      "filename": "sqlalchemy-filters-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "aded656a46e7764cb07a40a621750b0c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7176,
      "upload_time": "2017-05-30T17:38:52",
      "url": "https://files.pythonhosted.org/packages/cc/d2/6b9e4f32e1bc12af44af79a28193576c7e5fae662313c3456c88cbba8502/sqlalchemy-filters-0.3.0.tar.gz"
    }
  ]
}