{
  "info": {
    "author": "Student.com",
    "author_email": "wearehiring@student.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "SQLAlchemy-filters\n==================\n\n.. pull-quote::\n\n    Filter, sort and paginate SQLAlchemy query objects.\n    Ideal for exposing these actions over a REST API.\n\nFiltering\n---------\n\nAssuming that we have a SQLAlchemy `query` object:\n\n.. code-block:: python\n\n    from sqlalchemy import Column, Integer, String\n    from sqlalchemy.ext.declarative import declarative_base\n\n\n    class Base(object):\n        id = Column(Integer, primary_key=True)\n        name = Column(String(50), nullable=False)\n        count = Column(Integer, nullable=True)\n\n\n    Base = declarative_base(cls=Base)\n\n\n    class Foo(Base):\n\n        __tablename__ = 'foo'\n\n    # ...\n\n    query = session.query(Foo)\n\nThen we can apply filters to that ``query`` object (multiple times):\n\n.. code-block:: python\n\n    from sqlalchemy_filters import apply_filters\n\n    # `query` should be a SQLAlchemy query object\n\n    filter_spec = [{'field': 'name', 'op': '==', 'value': 'name_1'}]\n    filtered_query = apply_filters(query, filter_spec)\n\n    more_filters = [{'field': 'foo_id', 'op': 'is_not_null'}]\n    filtered_query = apply_filters(filtered_query, more_filters)\n\n    result = filtered_query.all()\n\nIt is also possible to filter queries that contain multiple models, including joins:\n\n.. code-block:: python\n\n    class Bar(Base):\n\n        __tablename__ = 'bar'\n        foo_id = Column(Integer, ForeignKey('foo.id'))\n\n\n.. code-block:: python\n\n    query = session.query(Foo).join(Bar)\n\n    filter_spec = [\n        {'model': 'Foo', field': 'name', 'op': '==', 'value': 'name_1'},\n        {'model': 'Bar', field': 'count', 'op': '>=', 'value': 5},\n    ]\n    filtered_query = apply_filters(query, filter_spec)\n\n    result = filtered_query.all()\n\nYou must specify the `model` key in each filter if the query is against more than one model.\n\nNote that we can also apply filters to queries defined by fields or functions:\n\n.. code-block:: python\n\n    query_alt_1 = session.query(Foo.id, Foo.name)\n    query_alt_2 = session.query(func.count(Foo.id))\n\n\nRestricted Loads\n----------------\n\nYou can restrict the fields that SQLAlchemy loads from the database by using\nthe `apply_loads` function:\n\n.. code-block:: python\n\n    query = session.query(Foo, Bar).join(Bar)\n    load_spec = [\n        {'model': 'Foo', 'fields': ['name']},\n        {'model': 'Bar', 'fields': ['count']}\n    ]\n    query = apply_loads(query, load_spec)  # will load only Foo.name and Bar.count\n\n\nThe effect of the `apply_loads` function is to _defer_ the load of any other fields to when/if they're accessed, rather than loading them when the query is executed. It only applies to fields that would be loaded during normal query execution.\n\n\nEffect on joined queries\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe default SQLAlchemy join is lazy, meaning that columns from the joined table are loaded only when required. Therefore `apply_loads` has limited effect in the following scenario:\n\n.. code-block:: python\n\n    query = session.query(Foo).join(Bar)\n    load_spec = [\n        {'model': 'Foo', 'fields': ['name']}\n        {'model': 'Bar', 'fields': ['count']}  # ignored\n    ]\n    query = apply_loads(query, load_spec)  # will load only Foo.name\n\n\n`apply_loads` cannot be applied to columns that are loaded as `joined eager loads <http://docs.sqlalchemy.org/en/latest/orm/loading_relationships.html#joined-eager-loading>`_. This is because a joined eager load does not add the joined model to the original query, as explained `here <http://docs.sqlalchemy.org/en/latest/orm/loading_relationships.html#the-zen-of-joined-eager-loading>`_\n\nThe following would produce an error:\n\n.. code-block:: python\n\n    query = session.query(Foo).options(joinedload(Bar))\n    load_spec = [\n        {'model': 'Foo', 'fields': ['name']}\n        {'model': 'Bar', 'fields': ['count']}  # invalid\n    ]\n    query = apply_loads(query, load_spec)  # error! query does not contain model Bar\n\n\nIf you wish to perform a joined load with restricted columns, you must specify the columns as part of the joined load, rather than with `apply_loads`:\n\n.. code-block:: python\n\n    query = session.query(Foo).options(joinedload(Bar).load_only('count'))\n    load_spec = [\n        {'model': 'Foo', 'fields': ['name']}\n    ]\n    query = apply_loads(query. load_spec)  # will load ony Foo.name and Bar.count\n\n\nSort\n----\n\n.. code-block:: python\n\n    from sqlalchemy_filters import apply_sort\n\n    # `query` should be a SQLAlchemy query object\n\n    sort_spec = [\n        {'model': 'Foo', field': 'name', 'direction': 'asc'},\n        {'model': 'Bar', field': 'id', 'direction': 'desc'},\n    ]\n    sorted_query = apply_sort(query, sort_spec)\n\n    result = sorted_query.all()\n\n\nPagination\n----------\n\n.. code-block:: python\n\n    from sqlalchemy_filters import apply_pagination\n\n    # `query` should be a SQLAlchemy query object\n\n    query, pagination = apply_pagination(query, page_number=1, page_size=10)\n\n    page_size, page_number, num_pages, total_results = pagination\n\n    assert 10 == len(query)\n    assert 10 == page_size == pagination.page_size\n    assert 1 == page_number == pagination.page_number\n    assert 3 == num_pages == pagination.num_pages\n    assert 22 == total_results == pagination.total_results\n\nFilters format\n--------------\n\nFilters must be provided in a list and will be applied sequentially.\nEach filter will be a dictionary element in that list, using the\nfollowing format:\n\n.. code-block:: python\n\n    filter_spec = [\n        {'model': 'model_name', 'field': 'field_name', 'op': '==', 'value': 'field_value'},\n        {'model': 'model_name', 'field': 'field_2_name', 'op': '!=', 'value': 'field_2_value'},\n        # ...\n    ]\n\nThe `model` key is optional if the query being filtered only applies to one model.\n\nIf there is only one filter, the containing list may be omitted:\n\n.. code-block:: python\n\n    filter_spec = {'field': 'field_name', 'op': '==', 'value': 'field_value'}\n\nWhere ``field`` is the name of the field that will be filtered using the\noperator provided in ``op`` (optional, defaults to `==`) and the\nprovided ``value`` (optional, depending on the operator).\n\nThis is the list of operators that can be used:\n\n- ``is_null``\n- ``is_not_null``\n- ``==``, ``eq``\n- ``!=``, ``ne``\n- ``>``, ``gt``\n- ``<``, ``lt``\n- ``>=``, ``ge``\n- ``<=``, ``le``\n- ``like``\n- ``in``\n- ``not_in``\n\nBoolean Functions\n*****************\n``and``, ``or``, and ``not`` functions can be used and nested within the filter specification:\n\n.. code-block:: python\n\n    filter_spec = [\n        {\n            'or': [\n                {\n                    'and': [\n                        {'field': 'field_name', 'op': '==', 'value': 'field_value'},\n                        {'field': 'field_2_name', 'op': '!=', 'value': 'field_2_value'},\n                    ]\n                },\n                {\n                    'not': [\n                        {'field': 'field_3_name', 'op': '==', 'value': 'field_3_value'}\n                    ]\n                },\n            ],\n        }\n    ]\n\n\nNote: ``or`` and ``and`` must reference a list of at least one element. ``not`` must reference a list of exactly one element.\n\nSort format\n-----------\n\nSort elements must be provided as dictionaries in a list and will be\napplied sequentially:\n\n.. code-block:: python\n\n    sort_spec = [\n        {'model': 'Foo', 'field': 'name', 'direction': 'asc'},\n        {'model': 'Bar', 'field': 'id', 'direction': 'desc'},\n        # ...\n    ]\n\nWhere ``field`` is the name of the field that will be sorted using the\nprovided ``direction``.\n\nThe `model` key is optional if the query being sorted only applies to one model.\n\n\nRunning tests\n-------------\n\nThere are some Makefile targets that can be used to run the tests. A\ntest database will be created, used during the tests and destroyed\nafterwards.\n\nThe default configuration uses both SQLite and MySQL (if the driver is\ninstalled) to run the tests, with the following URIs:\n\n.. code-block:: shell\n\n    sqlite+pysqlite:///test_sqlalchemy_filters.db\n    mysql+mysqlconnector://root:@localhost:3306/test_sqlalchemy_filters\n\nExample of usage:\n\n.. code-block:: shell\n\n    $ # using default settings\n    $ make test\n    $ make coverage\n\n    $ # overriding DB parameters\n    $ ARGS='--mysql-test-db-uri mysql+mysqlconnector://root:@192.168.99.100:3340/test_sqlalchemy_filters' make test\n    $ ARGS='--sqlite-test-db-uri sqlite+pysqlite:///test_sqlalchemy_filters.db' make test\n\n    $ ARGS='--mysql-test-db-uri mysql+mysqlconnector://root:@192.168.99.100:3340/test_sqlalchemy_filters' make coverage\n    $ ARGS='--sqlite-test-db-uri sqlite+pysqlite:///test_sqlalchemy_filters.db' make coverage\n\n\nLicense\n-------\n\nApache 2.0. See LICENSE for details.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Overseas-Student-Living/sqlalchemy-filters",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sqlalchemy-filters",
    "platform": "",
    "project_url": "https://pypi.org/project/sqlalchemy-filters/",
    "release_url": "https://pypi.org/project/sqlalchemy-filters/0.6.0/",
    "requires_dist": [
      "mysql-connector-python-rf (==2.1.3); extra == 'mysql'",
      "sqlalchemy-utils (==0.32.12); extra == 'dev'",
      "pytest (==3.0.5); extra == 'dev'",
      "flake8 (==3.2.1); extra == 'dev'",
      "coverage (==4.3.1); extra == 'dev'",
      "sqlalchemy (>=1.0.16)",
      "six (>=1.10.0)"
    ],
    "requires_python": "",
    "summary": "A library to filter SQLAlchemy queries.",
    "version": "0.6.0"
  },
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "68395bb825ab2c2269f7128dc341cf2e",
          "sha256": "ec24a191df860c93fb02ee4379f9b49196d0a52fede4aef43783dd4aa8969ebe"
        },
        "downloads": -1,
        "filename": "sqlalchemy-filters-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "68395bb825ab2c2269f7128dc341cf2e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5651,
        "upload_time": "2017-02-17T15:21:29",
        "url": "https://files.pythonhosted.org/packages/5a/c3/9e3494900983000f05b53c8e35859a748eceb3df08d2a5a2d8b106adfe9f/sqlalchemy-filters-0.2.0.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "aded656a46e7764cb07a40a621750b0c",
          "sha256": "94ab8a7e79c32f3495431aad34495a18a0ac02e7f7c27645b6ef841f40e2fa27"
        },
        "downloads": -1,
        "filename": "sqlalchemy-filters-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "aded656a46e7764cb07a40a621750b0c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7176,
        "upload_time": "2017-05-30T17:38:52",
        "url": "https://files.pythonhosted.org/packages/cc/d2/6b9e4f32e1bc12af44af79a28193576c7e5fae662313c3456c88cbba8502/sqlalchemy-filters-0.3.0.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c7203cc2df138ac91ef056c87106d50f",
          "sha256": "1fa8a56db1c1e44d99926249d08343c33952e1a035b234ce890e419f326a04f1"
        },
        "downloads": -1,
        "filename": "sqlalchemy_filters-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7203cc2df138ac91ef056c87106d50f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 11308,
        "upload_time": "2017-06-21T10:45:24",
        "url": "https://files.pythonhosted.org/packages/f7/82/7c8da0db3cd37499a2b5300767cb91ab24a34ab87cfc566f600fcf01da8d/sqlalchemy_filters-0.4.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "326e61336e8c54651e962392b11fd7d5",
          "sha256": "2654342d6342af72033a41ffd9b05885b85fe432c4e72dd9154327e915ef7dc2"
        },
        "downloads": -1,
        "filename": "sqlalchemy-filters-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "326e61336e8c54651e962392b11fd7d5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7274,
        "upload_time": "2017-06-21T10:45:26",
        "url": "https://files.pythonhosted.org/packages/04/ce/142e8b447b5f9f40e436658a453a34b187ed3ba0f0108d185a23a1c3cf25/sqlalchemy-filters-0.4.0.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b7be2776b255b98ccd489a5c000d28d3",
          "sha256": "244a0d3b914ac17b5016d0ee3106dc9c088cc398327a369fee35808aa9a3c4b6"
        },
        "downloads": -1,
        "filename": "sqlalchemy_filters-0.5.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "b7be2776b255b98ccd489a5c000d28d3",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 11554,
        "upload_time": "2017-11-15T15:24:50",
        "url": "https://files.pythonhosted.org/packages/4b/f4/11988b4d7377ecbd7ddd12a8f42948f1c85148e1a90c3a9ed8a8f210f449/sqlalchemy_filters-0.5.0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8b1beef15ee31d4f18e4256f48e50c01",
          "sha256": "7ad69040caced71867601985ef707c2f316fefd252f7b2350e777241fd6c3de3"
        },
        "downloads": -1,
        "filename": "sqlalchemy-filters-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8b1beef15ee31d4f18e4256f48e50c01",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6913,
        "upload_time": "2017-11-15T15:24:51",
        "url": "https://files.pythonhosted.org/packages/ff/b8/257deca7abb298d68ae1e5c902495748140e68f3c4650e5dab5ab602934b/sqlalchemy-filters-0.5.0.tar.gz"
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "02c95bd577a3faca5b3079f362398b1e",
          "sha256": "adc109ca97919abf6ce884fdd181bf2df5ac9f72891a68cbbaea1b11733d43b8"
        },
        "downloads": -1,
        "filename": "sqlalchemy_filters-0.6.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "02c95bd577a3faca5b3079f362398b1e",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 14029,
        "upload_time": "2017-11-30T12:13:53",
        "url": "https://files.pythonhosted.org/packages/c8/6d/f5262c077b9e05591d949937bd336e18bc93b5b02731c4e08e8428eb1d5c/sqlalchemy_filters-0.6.0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e03036cd66105ce5fdcaa49e8ebda451",
          "sha256": "5d90b0604da94c19e9598830bd9e87a401ffd0fd52e0691c2c3f5bfa31ff029f"
        },
        "downloads": -1,
        "filename": "sqlalchemy-filters-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e03036cd66105ce5fdcaa49e8ebda451",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8372,
        "upload_time": "2017-11-30T12:13:55",
        "url": "https://files.pythonhosted.org/packages/bb/7a/63873de6bb039aecde1909d8b98686a808243f76c84134368ef84e22b34b/sqlalchemy-filters-0.6.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "02c95bd577a3faca5b3079f362398b1e",
        "sha256": "adc109ca97919abf6ce884fdd181bf2df5ac9f72891a68cbbaea1b11733d43b8"
      },
      "downloads": -1,
      "filename": "sqlalchemy_filters-0.6.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "02c95bd577a3faca5b3079f362398b1e",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 14029,
      "upload_time": "2017-11-30T12:13:53",
      "url": "https://files.pythonhosted.org/packages/c8/6d/f5262c077b9e05591d949937bd336e18bc93b5b02731c4e08e8428eb1d5c/sqlalchemy_filters-0.6.0-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "e03036cd66105ce5fdcaa49e8ebda451",
        "sha256": "5d90b0604da94c19e9598830bd9e87a401ffd0fd52e0691c2c3f5bfa31ff029f"
      },
      "downloads": -1,
      "filename": "sqlalchemy-filters-0.6.0.tar.gz",
      "has_sig": false,
      "md5_digest": "e03036cd66105ce5fdcaa49e8ebda451",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8372,
      "upload_time": "2017-11-30T12:13:55",
      "url": "https://files.pythonhosted.org/packages/bb/7a/63873de6bb039aecde1909d8b98686a808243f76c84134368ef84e22b34b/sqlalchemy-filters-0.6.0.tar.gz"
    }
  ]
}