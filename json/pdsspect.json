{
  "info": {
    "author": "PlanetaryPy Developers",
    "author_email": "contact@planetarypy.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "===============================================================\npdsspect - A Python PDS Image Region of Interest Selection Tool\n===============================================================\n\n**NOTE:** This is Alpha quality software that is being actively developed, use\nat your own risk.  This software is not produced by NASA.\n\n* Free software: BSD license\n* Documentation: https://pdsspect.readthedocs.org.\n\nFeatures\n--------\n\n* NASA PDS Image Viewer\n\n**NOTE:** This is alpha quality software.  It lacks many features and lacks\nsupport for many PDS image types.  This software is not produced by NASA.\n\nInstall\n-------\n\nOn OS X you must first install the Qt UI toolkit using Homebrew\n(http://brew.sh/).  After installing Homebrew, issue the following command::\n\n    brew install qt\n\nInstall Using Pip\n+++++++++++++++++\nInstall pdsspect using pip::\n  \n  pip install pdsspect\n\nThen install your choice of pyside, pyqt4, or pyqt5\n\nInstall for Development\n+++++++++++++++++++++++\n\nCreate a new virtual environment, install the `pdsspect` module with git,\nand setup the PySide environment. You must install either PySide, PyQt5, or\nPyQt4 as well (recommend PyQt5)::\n\n    Make a clone of ``pdsspect`` and change to main directory. We recommend\n    making a virtual environment for to install ``pdsspect`` in.\n\n    pip install -e .\n    pip install PyQt5\n\nNow you should be able to run the `pdsspect` program.\n\nThis works on Linux as well (Ubuntu 14.04).  Instructions coming soon.\n\nQuick Tutorial\n--------------\n\nOpen an image in the command line::\n    \n    pdsspect tests/mission_data/2m132591087cfd1800p2977m2f1.img\n\nThis will open the default window:\n\n.. image:: screenshots/default1.png\n.. image:: screenshots/default2.png\n.. image:: screenshots/default3.png\n\nThe bottom left window is considered the main window. In this window, the user\ncan adjust the position of the pan and open other windows. The bottom right\nwindow is the ``basic`` window. Pressing the ``basic`` button will open this\nwindow if closed. However, it starts out open. In this window, the user can\nchange the image in the views and adjust the cut levels by either moving the\nred lines or typing in the numbers in the cut boxes:\n\n.. image:: screenshots/set_cuts1.png\n.. image:: screenshots/set_cuts2.png\n\nThe top window is the ``pan window`` which displays the data in the main\nwindow's red box. The main function of this window is to make Region of\nInterest (ROI) selections.\n\nIn the ``zoom`` box in the main window, the user can change the size of the box\nand the data in the pan view:\n\n.. image:: screenshots/zoom1.png\n.. image:: screenshots/zoom2.png\n\nthe mouse wheel can also be used to change the zoom. Rolling the wheel foward\nand backwards will adjust the zoom amount by ``+1`` or ``-1`` respectively.\nThe user can adjust the position of the box by clicking in the main window\nwhere the center of the pan should be. Using the arrow keys will also adjust\nthe position of the box by ``1`` in the direction of the arrow key.\n\nClicking the ``Add Window`` button will open another view. This view will have\nthe same image, cut levels, and zoom by default.\n\n.. image:: screenshots/multiple_window1.png\n\nIf the image's are the same, chaning the cut levels on one image will\nautomatically change the cut levels on another image. However, one can change\nthe zoom on one view without changing the zoom another view.\n\n.. image:: screenshots/multiple_window2.png\n.. image:: screenshots/multiple_window3.png\n.. image:: screenshots/multiple_window4.png\n\nWhen the images are different, adjusting the cut levels on one image will only\nchange the cut levels on that image:\n\n.. image:: screenshots/different_cuts1.png\n.. image:: screenshots/different_cuts2.png\n\nThe user can create separate ROIs in each view:\n\n.. image:: screenshots/roi1.png\n\nClicking the ``Selection`` button will open the ``Selections Window``:\n\n.. image:: screenshots/selection1.png\n\nIn this window, the user can choose the color of the ROI. The possible choices\nfor colors: ``red``, ``brown``, ``lightblue``, ``lightcyan``, ``darkgreen``,\n``yellow``, ``pink``, ``teal``, ``goldenrod``, ``sienna``, ``darkblue``,\n``crimson``, ``maroon``, ``purple``, and ``eraser (black)``. The selection type\ncan be changed in this window as well. The possible types are ``filled\nrectangle``, ``filled polygon``, and ``pencil`` (single points).\n\nFurthermore, in this window, the user can clear the current color or clear all\nROIs. Most importantly, the user can export ROIs to ``.npz`` files. These files\ncontain boolean masks and of the images and a list of files open at the time\nof export. The ROIs in the 2nd, 3rd, 4th, etc. views will be labeled as \n``color#view`` while the ROIs in the first view is still labeled as ``color``.\nFor example, to see the data in an example file ``example.npz``, use `numpy\nload method\n<https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.load.html>`_\nto view and utilize data.\n\n.. code-block:: python\n\n    >>> import numpy as np\n    >>> selections = np.load('example.npz')\n    >>> selections['red'][114:118, 142:146]\n    array([[ True,  True,  True,  True],\n           [ True,  True,  True,  True],\n           [ True,  True,  True,  True],\n           [ True,  True,  True,  True]], dtype=bool)\n    >>> selections['purple2'][48:52, 146:150]\n    array([[False, False, False, False],\n           [False,  True,  True,  True],\n           [ True,  True,  True,  True],\n           [ True,  True,  True,  True]], dtype=bool)\n\nThe user can also import ROI selections. However the images that are open must\nbe in the ``files`` list in the ``.npz`` file.\n\nChanging the opacity in the Selecitons window will change the opacity on all\nthe ROIs in every view:\n\n.. image:: screenshots/opacity1.png\n.. image:: screenshots/opacity2.png\n\n\nYou can view the data within the ROIs with the ``ROI Histogram`` window. Open\nthe window by pressing the ``ROI Histogram`` button in the main viewer.\n\n.. image:: screenshots/histogram1.png\n\nDisplay the data in the ROI by color by checking the checkbox next to the\ncolor. When the image in the menu and the current image in the checked view are\nthe same, the plot will be a histogram:\n\n.. image:: screenshots/histogram2.png\n\nWhen the menu and the current image are different, the plot will compare the\ndata:\n\n.. image:: screenshots/histogram3.png\n\nTo view the data in the other view, check the view number:\n\n.. image:: screenshots/histogram4.png\n\nOverlay ROIs by checking other boxes. The order (depth) of the histogram data\nwill be in the order that the user checks the boxes (i.e., checking red and\nthen purple will result in purple overlaying the red).\n\nTo perform multispectral analysis use ``ROI Line Plot``.\nIf analyzing images that are not :ref:`fully supported (see here for list of\ninstruments supported by pdsspect) <supported-instruments>` the user must\nmanually input the image wavelength with ``Set Wavelength`` widget:\n\n.. image:: screenshots/set_wavelength1.png\n\n``ROI Line Plot`` works similar to that of the histogram plot except it will\ncompare each image with an associated wavelength.\n\n.. image:: screenshots/line_plot1.png\n.. image:: screenshots/line_plot2.png\n.. image:: screenshots/line_plot3.png\n\nThe user can flip the image over different axis with the Transforms window.\nThe transformation will apply to each image in all the views:\n\n.. image:: screenshots/transforms1.png\n.. image:: screenshots/transforms2.png\n.. image:: screenshots/transforms3.png\n\nNote that when opening multiple images at the same time, it is best practice\nthat they are all the same shape. Otherwise the images will have the smallest\ncommon shape and not look as expected (i.e., If when loading two images where\none image has a shape of ``(63, 36)`` and the other image has a shape of\n``(24, 42)``, the displayed shape will be ``(24, 36)``. This will cause the\nfirst image to have the right side cut off and the second image to have the\ntop cut off). This is done so all ROIs created can apply to the entire list\nof images. To avoid this behavior, either only open images that have the same\nshape or open images one at a time.\n\n\nImages In Example\n+++++++++++++++++\n\n* `2p235913308radau37p2111l2c1.img \n  <http://pds-geosciences.wustl.edu/mer/mer2-m-pancam-3-radcal-rdr-v1/\n  mer2pc_1xxx/data/sol1234/2p235913308radau37p2111l2c1.img>`_\n* `2p235913328radau37p2111l3c1.img\n  <http://pds-geosciences.wustl.edu/mer/mer2-m-pancam-3-radcal-rdr-v1/\n  mer2pc_1xxx/data/sol1234/2p235913328radau37p2111l3c1.img>`_\n* `2p235913348radau37p2111l4c1.img\n  <http://pds-geosciences.wustl.edu/mer/mer2-m-pancam-3-radcal-rdr-v1/\n  mer2pc_1xxx/data/sol1234/2p235913348radau37p2111l4c1.img>`_\n* `2p235913368radau37p2111l5c1.img\n  <http://pds-geosciences.wustl.edu/mer/mer2-m-pancam-3-radcal-rdr-v1/\n  mer2pc_1xxx/data/sol1234/2p235913368radau37p2111l5c1.img>`_\n* `2p235913399radau37p2111l6c1.img\n  <http://pds-geosciences.wustl.edu/mer/mer2-m-pancam-3-radcal-rdr-v1/\n  mer2pc_1xxx/data/sol1234/2p235913399radau37p2111l6c1.img>`_\n* `2p235913431radau37p2111l7c1.img\n  <http://pds-geosciences.wustl.edu/mer/mer2-m-pancam-3-radcal-rdr-v1/\n  mer2pc_1xxx/data/sol1234/2p235913431radau37p2111l7c1.img>`_\n\n.. _supported-instruments:\n\nSupported Instruments\n+++++++++++++++++++++\n\n.. include:: supported_instruments.rst\n\nAdding More Instruments\n~~~~~~~~~~~~~~~~~~~~~~~\n\nWe welcome anyone to create more models for instruments that are not yet\nsupported. Please follow the Pull Request guide to make sure your model is\ncompatible with the rest of the models. See `Pull Request #20\n<https://github.com/planetarypy/pdsspect/pull/20>`_ as an example.\n\nPull Request Checklist\n######################\n\nPlease include the following checklist in your PR so we know you have completed\neach step::\n\n  - [ ] Created model as subclass of [InstrumentBase](https://github.com/planetarypy/pdsspect/blob/master/instrument_models/instrument.py#L7)\n  - [ ] Added model to [get_wavelength](https://github.com/planetarypy/pdsspect/blob/master/instrument_models/get_wavelength.py)\n  - [ ] Documented Model\n  - [ ] Tested Model\n  - [ ] Added model to [test_get_wavelength](https://github.com/planetarypy/pdsspect/blob/master/tests/test_get_wavelength.py) test\n  - [ ] Added instrument to supported_instruments.rst list\n\n\nStyle\n#####\n\n* Set PR label to ``Instrument Model``\n* If an issue was created, please include ``Fixes #<issue_number>`` at the top\n  of the PR to automatically close the issue\n* Please include a link to any documents used to find the filter wavelength.\n  Follow the example for `Mastcam\n  <https://github.com/planetarypy/pdsspect/blob/master/instrument_models/\n  mastcam.py>`_\n  and/or `Pancam\n  <https://github.com/planetarypy/pdsspect/blob/master/instrument_models/\n  pancam.py>`_\n* When documenting your model, use `numpy docs\n  <https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt>`_.See\n  these `examples <http://sphinxcontrib-napoleon.readthedocs.io/en/latest/\n  example_numpy.html>`_. Also add to `instrument_models.rst\n  <https://github.com/planetarypy/pdsspect/blob/master/docs/\n  instrument_models.rst>`_ following the format of the other models\n* For tests, if one of the core mission_data images is not from your instrument,\n  create a minimal label in the `tests\\\\__init__.py\n  <https://github.com/planetarypy/pdsspect/blob/master/tests/__init__.py>`_.\n  You must test the model itself and test that it works in\n  `test_get_wavelength <https://github.com/planetarypy/pdsspect/blob/master/\n  tests/test_get_wavelength.py>`_\n* Add the mission and instrument to the ``supported_instruments.rst`` file\n  following the set format.\n\n\n\n\n\n\nHistory\n-------\n\n0.1.0 (\"2017-08-20\")\n--------------------\n\n* First release on PyPi\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/planetarypy/pdsspect",
    "keywords": "pdsspect",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pdsspect",
    "platform": "",
    "project_url": "https://pypi.org/project/pdsspect/",
    "release_url": "https://pypi.org/project/pdsspect/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "PDS Image Viewer",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1612ace62ccfef43eb084637a7ed74da",
          "sha256": "e881461270a0556d0446a3fa40563f1b2ddf414d9d685a99bf2372cac37a6ae8"
        },
        "downloads": 0,
        "filename": "pdsspect-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1612ace62ccfef43eb084637a7ed74da",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 54690,
        "upload_time": "2017-07-20T22:31:37",
        "url": "https://files.pythonhosted.org/packages/25/17/837d702d4a707c2639ca71b620330767e2d6fbdb6bab11545f94296b0347/pdsspect-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "04968feb075e0a5dd61dde47e2e4ae6f",
          "sha256": "c5207e99bb3131579b18290430390f60373758d98e59e3781c6e30b01ead5359"
        },
        "downloads": 0,
        "filename": "pdsspect-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "04968feb075e0a5dd61dde47e2e4ae6f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 105614,
        "upload_time": "2017-07-20T22:21:18",
        "url": "https://files.pythonhosted.org/packages/ce/18/9a138226e56238b92ab7d5f0940ac3d72d7e9e1a5a2bb2189de17eb82c22/pdsspect-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1612ace62ccfef43eb084637a7ed74da",
        "sha256": "e881461270a0556d0446a3fa40563f1b2ddf414d9d685a99bf2372cac37a6ae8"
      },
      "downloads": 0,
      "filename": "pdsspect-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "1612ace62ccfef43eb084637a7ed74da",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 54690,
      "upload_time": "2017-07-20T22:31:37",
      "url": "https://files.pythonhosted.org/packages/25/17/837d702d4a707c2639ca71b620330767e2d6fbdb6bab11545f94296b0347/pdsspect-0.1.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "04968feb075e0a5dd61dde47e2e4ae6f",
        "sha256": "c5207e99bb3131579b18290430390f60373758d98e59e3781c6e30b01ead5359"
      },
      "downloads": 0,
      "filename": "pdsspect-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "04968feb075e0a5dd61dde47e2e4ae6f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 105614,
      "upload_time": "2017-07-20T22:21:18",
      "url": "https://files.pythonhosted.org/packages/ce/18/9a138226e56238b92ab7d5f0940ac3d72d7e9e1a5a2bb2189de17eb82c22/pdsspect-0.1.0.tar.gz"
    }
  ]
}