{
  "info": {
    "author": "Pluga AI",
    "author_email": "gusutabopb@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Database"
    ],
    "description": "aioinflux\n=========\n\nAsynchronous Python client for InfluxDB. Built on top of\n|aiohttp|_ and |asyncio|_.\n\nInfluxDB is an open-source distributed time series database. Find more\nabout InfluxDB at http://influxdata.com/\n\nInstallation\n------------\n\nTo install the latest release:\n\n.. code:: bash\n\n    $ pip install aioinflux\n\nThe library is still in beta, so you may also want to install the latest version from\nthe development branch:\n\n.. code:: bash\n\n    $ pip install git+https://github.com/plugaai/aioinflux@dev\n\nDependencies\n~~~~~~~~~~~~\n\nAioinflux supports Python 3.6+ **ONLY**. For older Python versions\nplease use the `official Python client`_\n\nThird-party library dependencies are: |aiohttp|_ for all HTTP\nrequest handling and |pandas|_ for ``DataFrame`` reading/writing support.\n\n.. |asyncio| replace:: ``asyncio``\n.. _asyncio: https://docs.python.org/3/library/asyncio.html\n.. |aiohttp| replace:: ``aiohttp``\n.. _aiohttp: https://github.com/aio-libs/aiohttp\n.. |pandas| replace:: ``pandas``\n.. _pandas: https://github.com/pandas-dev/pandas\n.. _`official Python Client`: https://github.com/influxdata/influxdb-python\n\nUsage\n-----\n\nTL;DR:\n~~~~~~\n\nThis sums most of what you can do with ``aioinflux``:\n\n.. code:: python\n\n    import asyncio\n    from aioinflux import AsyncInfluxDBClient\n\n    point = dict(time='2009-11-10T23:00:00Z',\n                 measurement='cpu_load_short',\n                 tags={'host': 'server01',\n                       'region': 'us-west'},\n                 fields={'value': 0.64})\n\n    client = AsyncInfluxDBClient(db='testdb')\n\n    coros = [client.create_database(db='testdb'),\n             client.write(point),\n             client.query('SELECT value FROM cpu_load_short')]\n\n    loop = asyncio.get_event_loop()\n    results = loop.run_until_complete(asyncio.gather(*coros))\n    for result in results:\n        print(result)\n\nClient modes\n~~~~~~~~~~~~\n\nDespite its name, ``AsyncInfluxDBClient`` can also run in sync/blocking\nmodes. Available modes are: ``async`` (default), ``blocking`` and\n``dataframe``.\n\nExample using ``blocking`` mode:\n\n.. code:: python\n\n    client = AsyncInfluxDBClient(db='testdb', mode='blocking')\n    client.ping()\n    client.write(point)\n    client.query('SELECT value FROM cpu_load_short')\n\nSee `Retrieving DataFrames <#retrieving-dataframes>`__ for ``dataframe``\nmode usage.\n\nWriting data\n~~~~~~~~~~~~\n\nInput data can be: 1) A string properly formatted in InfluxDB's line\nprotocol 2) A dictionary containing the following keys: ``measurement``,\n``time``, ``tags``, ``fields`` 3) A Pandas DataFrame with a\nDatetimeIndex 4) An iterable of one of the above\n\nInput data in formats 2-4 are parsed into the `line\nprotocol`_ before being written to InfluxDB. All parsing functionality is located\nat serialization.py_. Beware that\nserialization is not highly optimized (PRs are welcome!) and may become\na bottleneck depending on your application.\n\nThe ``write`` method returns ``True`` when successful and raises an\n``InfluxDBError`` otherwise.\n\n.. _`line protocol`: https://docs.influxdata.com/influxdb/v1.3/write_protocols/line_protocol_reference/\n.. |serialization.py| replace:: ``serialization.py``\n.. _serialization.py: https://github.com/plugaai/aioinflux/blob/master/aioinflux/serialization.py\n\nWriting dictionary-like objects\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAioinflux accepts any dictionary-like object (mapping) as input.\nHowever, that dictionary must be properly formatted and contain the\nfollowing keys:\n\n1) **measurement**: Optional. Must be a string-like object. If\n   omitted, must be specified when calling ``AsyncInfluxDBClient.write``\n   by passing a ``measurement`` argument.\n2) **time**: Optional. The value can be ``datetime.datetime``,\n   date-like string (e.g., ``2017-01-01``, ``2009-11-10T23:00:00Z``) or\n   anything else that can be parsed by Pandas' |Timestamp|_ class initializer.\n3) **tags**: Optional. This must contain another mapping of field\n   names and values. Both tag keys and values should be strings.\n4) **fields**: Mandatory. This must contain another mapping of field\n   names and values. Field keys should be strings. Field values can be\n   ``float``, ``int``, ``str``, or ``bool`` or any equivalent type.\n\n.. |Timestamp| replace:: ``Timestamp``\n.. _Timestamp: https://pandas.pydata.org/pandas-docs/stable/timeseries.html\n\n\nAny fields other then the above will be ignored when writing data to\nInfluxDB.\n\nA typical dictionary-like point would look something like the following:\n\n.. code:: python\n\n    {'time': '2009-11-10T23:00:00Z',\n    'measurement': 'cpu_load_short',\n    'tags': {'host': 'server01', 'region': 'us-west'},\n    'fields': {'value1': 0.64, 'value2': True, 'value3': 10}}\n\nWriting DataFrames\n^^^^^^^^^^^^^^^^^^\n\nAioinflux also accepts Pandas dataframes as input. The only requirements\nfor the dataframe is that the index **must** be of type\n``DatetimeIndex``. Also, any column whose ``dtype`` is ``object`` will\nbe converted to a string representation.\n\nA typical DataFrame input should look something like the following:\n\n.. code:: text\n\n                                           LUY       BEM       AJW tag\n    2017-06-24 08:45:17.929097+00:00  2.545409  5.173134  5.532397   B\n    2017-06-24 10:15:17.929097+00:00 -0.306673 -1.132941 -2.130625   E\n    2017-06-24 11:45:17.929097+00:00  0.894738 -0.561979 -1.487940   B\n    2017-06-24 13:15:17.929097+00:00 -1.799512 -1.722805 -2.308823   D\n    2017-06-24 14:45:17.929097+00:00  0.390137 -0.016709 -0.667895   E\n\nThe measurement name must be specified with the ``measurement`` argument\nwhen calling ``AsyncInfluxDBClient.write``. Additional tags can also be\npassed using arbitrary keyword arguments.\n\n**Example:**\n\n.. code:: python\n\n    client = AsyncInfluxDBClient(db='testdb', mode='blocking')\n    client.write(df, measurement='prices', tag_columns=['tag'], asset_class='equities')\n\nIn the example above, ``df`` is the DataFrame we are trying to write to\nInfluxDB and ``measurement`` is the measurement we are writing to.\n\n``tag_columns`` is in an optional iterable telling which of the\ndataframe columns should be parsed as tag values. If ``tag_columns`` is\nnot explicitly passed, all columns in the dataframe will be treated as\nInfluxDB field values.\n\nAny other keyword arguments passed to ``AsyncInfluxDBClient.write`` are\ntreated as extra tags which will be attached to the data being written\nto InfluxDB. Any string which is a valid `InfluxDB identifier`_ and\nvalid `Python identifier`_ can be used as an extra tag key (with the\nexception of they strings ``data``, ``measurement`` and ``tag_columns``).\n\nSee ``AsyncInfluxDBClient.write`` docstring for details.\n\n.. _`InfluxDB identifier`: https://docs.influxdata.com/influxdb/v1.3/query_language/spec/#identifiers\n.. _`Python identifier`: https://docs.python.org/3/reference/lexical_analysis.html#identifiers\n\nQuerying data\n~~~~~~~~~~~~~\n\nQuerying data is as simple as passing an InfluxDB query string to\n``AsyncInfluxDBClient.write``:\n\n.. code:: python\n\n    client.query('SELECT myfield FROM mymeasurement')\n\nThe result (in ``blocking`` and ``async`` modes) is a dictionary\ncontaining the raw JSON data returned by the InfluxDB `HTTP API`_:\n\n.. _`HTTP API`: https://docs.influxdata.com/influxdb/v1.3/guides/querying_data/#querying-data-using-the-http-api\n\n.. code:: python\n\n    {'results': [{'series': [{'columns': ['time', 'Price', 'Volume'],\n         'name': 'mymeasurement',\n         'values': [[1491963424224703000, 5783, 100],\n          [1491963424375146000, 5783, 200],\n          [1491963428374895000, 5783, 100],\n          [1491963429645478000, 5783, 1100],\n          [1491963429655289000, 5783, 100],\n          [1491963437084443000, 5783, 100],\n          [1491963442274656000, 5783, 900],\n          [1491963442274657000, 5782, 5500],\n          [1491963442274658000, 5781, 3200],\n          [1491963442314710000, 5782, 100]]}],\n       'statement_id': 0}]}\n\nRetrieving DataFrames\n^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: text\n\n                                      Price  Volume\n    2017-04-12 02:17:04.224703+00:00   5783     100\n    2017-04-12 02:17:04.375146+00:00   5783     200\n    2017-04-12 02:17:08.374895+00:00   5783     100\n    2017-04-12 02:17:09.645478+00:00   5783    1100\n    2017-04-12 02:17:09.655289+00:00   5783     100\n    2017-04-12 02:17:17.084443+00:00   5783     100\n    2017-04-12 02:17:22.274656+00:00   5783     900\n    2017-04-12 02:17:22.274657+00:00   5782    5500\n    2017-04-12 02:17:22.274658+00:00   5781    3200\n    2017-04-12 02:17:22.314710+00:00   5782     100\n\nChunked responses\n^^^^^^^^^^^^^^^^^\n\nTODO\n\nConvenience functions\n^^^^^^^^^^^^^^^^^^^^^\n\nAioinflux provides some wrappers around ``AsyncInfluxDBClient.query`` in\norder to provide convenient access to commonly used query patterns.\nAppropriate named arguments must be passed (e.g.: ``db``,\n``measurement``, etc).\n\nExamples:\n\n.. code:: python\n\n    client.create_database(db='foo')\n    client.drop_measurement(measurement='bar')\n    client.show_users()\n\nFor more complex queries, pass a raw query to\n``AsyncInfluxDBClient.query``.\n\nPlease refer to the source_ for argument information and to\nInfluxDB documentation_ for further query-related information.\n\n.. _source: https://github.com/plugaai/aioinflux/blob/master/aioinflux/client.py#L211\n.. _documentation: https://docs.influxdata.com/influxdb/v1.3/query_language/spec/#queries\n\n.. _source: https://github.com/plugaai/aioinflux/blob/master/aioinflux/client.py#L211\n\nOther functionality\n~~~~~~~~~~~~~~~~~~~\n\nAuthentication\n^^^^^^^^^^^^^^\n\nTODO\n\nDatabase selection\n^^^^^^^^^^^^^^^^^^\n\nAfter the instantiation of the ``AsyncInfluxDBClient`` object, database\ncan be switched by changing the ``db`` attribute:\n\n.. code:: python\n\n    client = AsyncInfluxDBClient(db='db1')  # instantiate client\n    client.db = 'db2'  # switch database\n\nBeware that differently from some NoSQL databases (such as MongoDB),\nInfluxDB requires that a databases is explicitly created (by using the\n|CREATE DATABASE|_ query) before doing any operations on it.\n\n.. |CREATE DATABASE| replace:: ``CREATE DATABASE``\n.. _`CREATE DATABASE`: https://docs.influxdata.com/influxdb/v1.3/query_language/database_management/#create-database\n\nDebugging\n^^^^^^^^^\n\nTODO\n\nImplementation\n--------------\n\nSince InfluxDB exposes all its functionality through an `HTTP\nAPI <https://docs.influxdata.com/influxdb/v1.3/tools/api/>`__,\n``AsyncInfluxDBClient`` tries to be nothing more than a thin and dry\nwrapper around that API.\n\nThe InfluxDB HTTP API exposes exactly three endpoints/functions:\n``ping``, ``write`` and ``query``.\n\n``AsyncInfluxDBClient`` merely wraps these three functions and provides\nsome parsing functionality for generating line protocol data (when\nwriting) and parsing JSON responses (when querying).\n\nAdditionally,\n`partials <https://en.wikipedia.org/wiki/Partial_application>`__ are\nused in order to provide convenient access to commonly used query\npatterns. See the `Convenience functions <#convenience-functions>`__\nsection for details.\n\nContributing\n------------\n\n| To contribute, fork the repository on GitHub, make your changes and\n  submit a pull request.\n| Aioinflux is not a mature project yet, so just simply raising issues\n  is also greatly appreciated :)\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/plugaai/aioinflux",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aioinflux",
    "platform": "",
    "project_url": "https://pypi.org/project/aioinflux/",
    "release_url": "https://pypi.org/project/aioinflux/0.1.1/",
    "requires_dist": [
      "pandas (>=0.21)",
      "numpy",
      "aiohttp (>=2.3.0)"
    ],
    "requires_python": "",
    "summary": "Asynchronous Python client for InfluxDB",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4ddd3295ca212826661b9aa8029683d8",
          "sha256": "83513d047068d771de6eb39418645ab9377c7774dfb191487cff0349f6a0e093"
        },
        "downloads": -1,
        "filename": "aioinflux-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4ddd3295ca212826661b9aa8029683d8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 17288,
        "upload_time": "2017-10-04T06:32:50",
        "url": "https://files.pythonhosted.org/packages/52/db/4df1ab358f81939e62c2bbcebab1da11468e8d09121b6bc8775d3e40c080/aioinflux-0.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0309b0e0ac862f01ba068473944bd750",
          "sha256": "2e15c8679e3a1266dd1a4fd8382dc9d24941abc953a8fddfb529c5cc410d871a"
        },
        "downloads": -1,
        "filename": "aioinflux-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0309b0e0ac862f01ba068473944bd750",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11864,
        "upload_time": "2017-10-04T06:32:52",
        "url": "https://files.pythonhosted.org/packages/75/c3/f6d49be0bfb5ae036f731128bfcf988ae772bfd4b36f572d0fc59a0252f7/aioinflux-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ff3f44240fa24fbc9917865ca30ae483",
          "sha256": "2acd54e0e060526bb14c8ddf1354b1133422f3b32e4bcbbfca501cc5520a3b1a"
        },
        "downloads": -1,
        "filename": "aioinflux-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ff3f44240fa24fbc9917865ca30ae483",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 17444,
        "upload_time": "2017-11-10T07:40:54",
        "url": "https://files.pythonhosted.org/packages/90/8d/1c9426aa990f4d57214b1e986bbcac240d7be2badb3caffca020dc28b6a9/aioinflux-0.1.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "bf176398aebe0cdc1a376aca1b7cd9a1",
          "sha256": "725b7f9725955e139ebd7b7de8f9aa7972f44d490a014eb9b859f54a0f9582ba"
        },
        "downloads": -1,
        "filename": "aioinflux-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bf176398aebe0cdc1a376aca1b7cd9a1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14656,
        "upload_time": "2017-11-10T07:40:56",
        "url": "https://files.pythonhosted.org/packages/c4/c2/5ed1dfc8a208b9f7b559af1ce28a808ef2ecb06f1e48c58e98ca809a70b2/aioinflux-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ff3f44240fa24fbc9917865ca30ae483",
        "sha256": "2acd54e0e060526bb14c8ddf1354b1133422f3b32e4bcbbfca501cc5520a3b1a"
      },
      "downloads": -1,
      "filename": "aioinflux-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ff3f44240fa24fbc9917865ca30ae483",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 17444,
      "upload_time": "2017-11-10T07:40:54",
      "url": "https://files.pythonhosted.org/packages/90/8d/1c9426aa990f4d57214b1e986bbcac240d7be2badb3caffca020dc28b6a9/aioinflux-0.1.1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "bf176398aebe0cdc1a376aca1b7cd9a1",
        "sha256": "725b7f9725955e139ebd7b7de8f9aa7972f44d490a014eb9b859f54a0f9582ba"
      },
      "downloads": -1,
      "filename": "aioinflux-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "bf176398aebe0cdc1a376aca1b7cd9a1",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 14656,
      "upload_time": "2017-11-10T07:40:56",
      "url": "https://files.pythonhosted.org/packages/c4/c2/5ed1dfc8a208b9f7b559af1ce28a808ef2ecb06f1e48c58e98ca809a70b2/aioinflux-0.1.1.tar.gz"
    }
  ]
}