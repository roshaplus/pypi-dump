{
  "info": {
    "author": "Ekeyme Mo",
    "author_email": "ekeyme@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "Bio-pm\n======\n\nA Python3 point mutation pattern analyzing tool for nucleotide sequence.\n\nInstallation\n------------\n\nUse pip(recommended):\n\n::\n\n    pip install bio-pm\n\nOR\n\n::\n\n    pip install biopython  #  required\n    python3 setup.py install\n\nExamples\n--------\n\nAnalyze point mutation status using ``pm.analyze(seq, stdseq, translate=True)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFeed your pairwised seq and stdseq into ``pm.analyze``, it will return\nyou the correct point mutation status object.\n\n.. code:: python\n\n    >>> import pm\n    >>> \n    >>> stdseq = \"ATGGGCGCT\"\n    >>> seq_without_pm = 'ATGGGCGCT'\n    >>> pm.analyze(seq_without_pm, stdseq)\n    <pm.status.Y object with: gaps=0, nt_pm=0, aa_pm=0, stdseq='ATGGGCGCT'>\n    >>> \n    >>> seq_conserved = \"ATGGGCGCC\"\n    >>> pm.analyze(seq_conserved, stdseq)\n    <pm.status.Conserved object with: gaps=0, nt_pm=1, aa_pm=0, stdseq='ATGGGCGCC'>\n    >>> \n    >>> seq_with_pm = 'ATGGGCGAT'\n    >>> pm.analyze(seq_with_pm, stdseq)\n    <pm.status.PM object with: gaps=0, nt_pm=1, aa_pm=1, stdseq='ATGGGCGAT'>\n    >>> \n    >>> seq_with_gap = 'ATGGGCG-C'\n    >>> pm.analyze(seq_with_gap, stdseq)\n    <pm.status.NA object with: gaps=1, nt_pm=1, aa_pm=0, stdseq='ATGGGCGC'>\n    >>> \n\nQuickly compare the point mutation status objects\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPoint mutation status objects have its internal order, Y > Conserved >\nPM > NA, when the stdseq is the same. So you can quickly do comparing\nbetween them.\n\n.. code:: python\n\n    >>> import pm\n    >>> stdseq = \"ATGGGCGCT\"\n    >>> seq_without_pm = 'ATGGGCGCT'\n    >>> seq_conserved = \"ATGGGCGCC\"\n    >>> seq_with_pm = 'ATGGGCGAT'\n    >>> status_Y = pm.analyze(seq_without_pm, stdseq)\n    >>> status_Conserved = pm.analyze(seq_conserved, stdseq)\n    >>> status_PM = pm.analyze(seq_with_pm, stdseq)\n    >>> status_Y > status_Conserved > status_PM\n    True\n    >>> sorted([status_PM, status_Y], reverse=True)\n    [<pm.status.Y object with: gaps=0, nt_pm=0, aa_pm=0, stdseq='ATGGGCGCT'>, <pm.status.PM object with: gaps=0, nt_pm=1, aa_pm=1, stdseq='ATGGGCGAT'>]\n    >>>\n\nGenerate HGVS-like mutation format basing on mutant patterns\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nContinues from ``Quickly compare the point mutation status objects``\n\n.. code:: python\n\n    >>> from pm.pattern import mutant_to_str\n    >>> status_PM\n    <pm.status.PM object with: gaps=0, nt_pm=1, aa_pm=1, stdseq='ATGGGCGAT'>\n    >>> status_PM.pattern\n    <pm.pattern.TranslatedPattern object at 0x2b03c9cfdc18>\n    >>> status_PM.pattern.list()\n    [((8, 'C', 'A'), (3, 'A', 'D'))]\n    >>> for nt_pm, aa_pm in status_PM.pattern.list():\n    ...     print(mutant_to_str(*nt_pm) + '|' + mutant_to_str(*aa_pm))\n    ...\n    8C>A|3A>D\n\nLicense\n-------\n\nMIT",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ekeyme/bio-pm",
    "keywords": "python3 point mutation analyzing tool",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "bio-pm",
    "platform": "any",
    "project_url": "https://pypi.org/project/bio-pm/",
    "release_url": "https://pypi.org/project/bio-pm/1.1.0b2/",
    "requires_python": null,
    "summary": "point mutation pattern analyzing tool for nucleotide sequence",
    "version": "1.1.0b2"
  },
  "releases": {
    "1.1.0b2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2296705d4007cb72748f66a7faff8d8e",
          "sha256": "cde2500847322fb7df628bacee61931bf7c214fe32feb422a1e1abb9163ae893"
        },
        "downloads": 15,
        "filename": "bio-pm-1.1.0b2.zip",
        "has_sig": false,
        "md5_digest": "2296705d4007cb72748f66a7faff8d8e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11928,
        "upload_time": "2017-03-21T08:34:31",
        "url": "https://files.pythonhosted.org/packages/c6/f6/043bbe076db8ad37e71d91d87e4d46608d4cf8530616f6fb3a3e09e070fb/bio-pm-1.1.0b2.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2296705d4007cb72748f66a7faff8d8e",
        "sha256": "cde2500847322fb7df628bacee61931bf7c214fe32feb422a1e1abb9163ae893"
      },
      "downloads": 15,
      "filename": "bio-pm-1.1.0b2.zip",
      "has_sig": false,
      "md5_digest": "2296705d4007cb72748f66a7faff8d8e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 11928,
      "upload_time": "2017-03-21T08:34:31",
      "url": "https://files.pythonhosted.org/packages/c6/f6/043bbe076db8ad37e71d91d87e4d46608d4cf8530616f6fb3a3e09e070fb/bio-pm-1.1.0b2.zip"
    }
  ]
}