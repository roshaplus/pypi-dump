{
  "info": {
    "author": "Artur Barseghyan",
    "author_email": "artur.barseghyan@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v2 (GPLv2)",
      "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "============================\r\ndjango-elasticsearch-dsl-drf\r\n============================\r\nIntegrate `django-elasticsearch-dsl\r\n<https://pypi.python.org/pypi/django-elasticsearch-dsl>`_ with\r\n`Django REST framework <https://pypi.python.org/pypi/djangorestframework>`_ in\r\nthe shortest way possible, with least efforts possible.\r\n\r\nPackage provides views, filter backends and other handy tools.\r\n\r\nYou are expected to use `django-elasticsearch-dsl\r\n<https://pypi.python.org/pypi/django-elasticsearch-dsl>`_ for defining your\r\ndocument models.\r\n\r\nPrerequisites\r\n=============\r\n\r\n- Django 1.8, 1.9, 1.10 and 1.11.\r\n- Python 2.7, 3.4, 3.5, 3.6\r\n- Elasticsearch 2.x, 5.x\r\n\r\nDependencies\r\n============\r\n\r\n- django-elasticsearch-dsl\r\n- djangorestframework\r\n\r\nInstallation\r\n============\r\n\r\n(1) Install latest stable version from PyPI:\r\n\r\n    .. code-block:: sh\r\n\r\n        pip install django-elasticsearch-dsl-drf\r\n\r\n    Or latest stable version from GitHub:\r\n\r\n    .. code-block:: sh\r\n\r\n        pip install https://github.com/barseghyanartur/django-elasticsearch-dsl-drf/archive/stable.tar.gz\r\n\r\n(2) Add ``rest_framework`` and ``django_elasticsearch_dsl`` to\r\n    ``INSTALLED_APPS``:\r\n\r\n    .. code-block:: python\r\n\r\n        INSTALLED_APPS = (\r\n            # ...\r\n            'rest_framework',  # REST framework\r\n            'django_elasticsearch_dsl',  # ElasticSearch integration\r\n            # ...\r\n        )\r\n\r\nUsage examples\r\n==============\r\n\r\nSee the `example project\r\n<https://github.com/barseghyanartur/django-elasticsearch-dsl-drf/tree/master/examples/simple>`_\r\nfor sample models/views/serializers.\r\n\r\n- `models\r\n  <https://github.com/barseghyanartur/django-elasticsearch-dsl-drf/blob/master/examples/simple/books/models.py>`_\r\n- `documents\r\n  <https://github.com/barseghyanartur/django-elasticsearch-dsl-drf/blob/master/examples/simple/search_indexes/documents/book.py>`_\r\n- `serializers\r\n  <https://github.com/barseghyanartur/django-elasticsearch-dsl-drf/blob/master/examples/simple/search_indexes/serializers.py>`_\r\n- `views\r\n  <https://github.com/barseghyanartur/django-elasticsearch-dsl-drf/blob/master/examples/simple/search_indexes/views.py>`_\r\n\r\nBasic Django REST framework integration example\r\n-----------------------------------------------\r\n\r\nSample basic example models\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nbooks/models.py:\r\n\r\n.. code-block:: python\r\n\r\n    class Publisher(models.Model):\r\n        \"\"\"Publisher.\"\"\"\r\n\r\n        name = models.CharField(max_length=30)\r\n        address = models.CharField(max_length=50)\r\n        city = models.CharField(max_length=60)\r\n        state_province = models.CharField(max_length=30)\r\n        country = models.CharField(max_length=50)\r\n        website = models.URLField()\r\n\r\n        class Meta(object):\r\n            \"\"\"Meta options.\"\"\"\r\n\r\n            ordering = [\"id\"]\r\n\r\n        def __str__(self):\r\n            return self.name\r\n\r\n\r\nSample basic example document\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nsearch_indexes/documents/publisher.py:\r\n\r\n.. code-block:: python\r\n\r\n    from django_elasticsearch_dsl import DocType, Index, fields\r\n    from elasticsearch_dsl import analyzer\r\n\r\n    from books.models import Publisher\r\n\r\n    # Name of the ElasticSearch index\r\n    PUBLISHER_INDEX = Index('publisher')\r\n    # See ElasticSearch Indices API reference for available settings\r\n    PUBLISHER_INDEX.settings(\r\n        number_of_shards=1,\r\n        number_of_replicas=1\r\n    )\r\n\r\n\r\n    @PUBLISHER_INDEX.doc_type\r\n    class PublisherDocument(DocType):\r\n        \"\"\"Publisher ElasticSearch document.\"\"\"\r\n\r\n        id = fields.IntegerField(attr='id')\r\n\r\n        name = fields.StringField(\r\n            fields={\r\n                'raw': fields.StringField(\r\n                    analyzer='keyword'\r\n                )\r\n            }\r\n        )\r\n        address = fields.StringField(\r\n            fields={\r\n                'raw': fields.StringField(\r\n                    analyzer='keyword'\r\n                )\r\n            }\r\n        )\r\n        city = fields.StringField(\r\n            fields={\r\n                'raw': fields.StringField(\r\n                    analyzer='keyword'\r\n                )\r\n            }\r\n        )\r\n        state_province = fields.StringField(\r\n            fields={\r\n                'raw': fields.StringField(\r\n                    analyzer='keyword'\r\n                )\r\n            }\r\n        )\r\n        country = fields.StringField(\r\n            fields={\r\n                'raw': fields.StringField(\r\n                    analyzer='keyword'\r\n                )\r\n            }\r\n        )\r\n        website = fields.StringField(\r\n            fields={\r\n                'raw': fields.StringField(\r\n                    analyzer='keyword'\r\n                )\r\n            }\r\n        )\r\n\r\n        class Meta(object):\r\n            \"\"\"Meta options.\"\"\"\r\n\r\n            model = Publisher  # The model associate with this DocType\r\n\r\n\r\nSample basic example serializer\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nsearch_indexes/serializers.py:\r\n\r\n.. code-block:: python\r\n\r\n    import json\r\n\r\n    from rest_framework import serializers\r\n\r\n    class PublisherDocumentSerializer(serializers.Serializer):\r\n        \"\"\"Serializer for Publisher document.\"\"\"\r\n\r\n        id = serializers.IntegerField(read_only=True)\r\n        name = serializers.CharField(read_only=True)\r\n        address = serializers.CharField(read_only=True)\r\n        city = serializers.CharField(read_only=True)\r\n        state_province = serializers.CharField(read_only=True)\r\n        country = serializers.CharField(read_only=True)\r\n        website = serializers.CharField(read_only=True)\r\n\r\n        class Meta(object):\r\n            \"\"\"Meta options.\"\"\"\r\n\r\n            fields = read_only_fields = (\r\n                'id',\r\n                'name',\r\n                'address',\r\n                'city',\r\n                'state_province',\r\n                'country',\r\n                'website',\r\n            )\r\n            read_only_fields = fields\r\n\r\nSample basic example view\r\n~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nsearch_indexes/views.py:\r\n\r\n.. code-block:: python\r\n\r\n    from django_elasticsearch_dsl_drf.filter_backends import (\r\n        FilteringFilterBackend,\r\n        OrderingFilterBackend,\r\n        SearchFilterBackend,\r\n    )\r\n    from django_elasticsearch_dsl_drf.views import BaseDocumentViewSet\r\n\r\n    # Example app models\r\n    from search_indexes.documents.publisher import PublisherDocument\r\n    from search_indxes.serializers import PublisherDocumentSerializer\r\n\r\n    class PublisherDocumentView(BaseDocumentViewSet):\r\n        \"\"\"The PublisherDocument view.\"\"\"\r\n\r\n        document = PublisherDocument\r\n        serializer_class = PublisherDocumentSerializer\r\n        lookup_field = 'id'\r\n        filter_backends = [\r\n            FilteringFilterBackend,\r\n            OrderingFilterBackend,\r\n            SearchFilterBackend,\r\n        ]\r\n        # Define search fields\r\n        search_fields = (\r\n            'name',\r\n            'address',\r\n            'city',\r\n            'state_province',\r\n            'country',\r\n        )\r\n        # Define filtering fields\r\n        filter_fields = {\r\n            'id': None,\r\n            'name': 'name.raw',\r\n            'city': 'city.raw',\r\n            'state_province': 'state_province.raw',\r\n            'country': 'country.raw',\r\n        }\r\n        # Define ordering fields\r\n        ordering_fields = {\r\n            'id': None,\r\n            'name': None,\r\n            'city': None,\r\n            'country': None,\r\n        }\r\n        # Specify default ordering\r\n        ordering = ('id', 'name',)\r\n\r\n\r\nUsage simple example\r\n~~~~~~~~~~~~~~~~~~~~\r\nConsidering samples above, you should be able to perform the search, sorting\r\nand filtering actions described below.\r\n\r\nSample queries\r\n^^^^^^^^^^^^^^\r\n\r\nSearch\r\n++++++\r\nQuery param name reserved for search is ``search``. Make sure your models and\r\ndocuments do not have it as a field or attribute.\r\n\r\nMultiple search terms are joined with ``OR``.\r\n\r\nLet's assume we have a number of Book items with fields ``title``,\r\n``description`` and ``summary``.\r\n\r\n**Search in all fields**\r\n\r\nSearch in all fields (``name``, ``address``, ``city``, ``state_province`` and\r\n``country``) for word \"reilly\".\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/publisher/?search=reilly\r\n\r\n**Search in specific field**\r\n\r\nIn order to search in specific field (``name``) for term \"reilly\", add\r\nthe field name separated with ``|`` to the search term.\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/publisher/?search=name|reilly\r\n\r\n**Search for multiple terms**\r\n\r\nIn order to search for multiple terms \"reilly\", \"bloomsbury\" add\r\nmultiple ``search`` query params.\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/publisher/?search=reilly&search=bloomsbury\r\n\r\n**Search for multiple terms in specific fields**\r\n\r\nIn order to search for multiple terms \"reilly\", \"bloomsbury\" in specific\r\nfields add multiple ``search`` query params and field names separated with\r\n``|`` to each of the search terms.\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/publisher/?search=name|reilly&search=city|london\r\n\r\nFiltering\r\n+++++++++\r\n\r\nLet's assume we have a number of Publisher documents with in cities (Yerevan,\r\nGroningen, Amsterdam, London).\r\n\r\nMultiple filter terms are joined with ``AND``.\r\n\r\n**Filter documents by single field**\r\n\r\nFilter documents by field (``city``) \"yerevan\".\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/publisher/?city=yerevan\r\n\r\n**Filter documents by multiple states**\r\n\r\nFilter documents by ``city`` \"Yerevan\" and \"Groningen\".\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/publisher/?city__in=yerevan|groningen\r\n\r\n**Filter document by a single field**\r\n\r\nFilter documents by (field ``country``) \"Armenia\".\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/publisher/?country=armenia\r\n\r\n**Filter documents by multiple fields**\r\n\r\nFilter documents by multiple fields (field ``city``) \"Yerevan\" and \"Amsterdam\"\r\nwith use of functional ``in`` query filter.\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/publisher/?city__in=yerevan|amsterdam\r\n\r\nYou can achieve the same effect by specifying multiple tags (``city``)\r\n\"Yerevan\" and \"Amsterdam\". Note, that in this case multiple filter terms are\r\njoined with ``OR``.\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/publisher/?city=yerevan&city=amsterdam\r\n\r\nIf you want the same as above, but joined with ``AND``, add ``__term`` to each\r\nlookup.\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/publisher/?city__term=education&city__term=economy\r\n\r\n**Filter documents by a word part of a single field**\r\n\r\nFilter documents by a part word part in single field (``city``). Word part\r\nshould match both \"ondon\".\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/publisher/?city__wildcard=*ondon\r\n\r\nOrdering\r\n++++++++\r\n\r\nThe ``-`` prefix means ordering should be descending.\r\n\r\n**Order documents by field (ascending)**\r\n\r\nFilter documents by field ``city`` (ascending).\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/publisher/?search=country|armenia&ordering=city\r\n\r\n**Order documents by field (descending)**\r\n\r\nFilter documents by field ``country`` (descending).\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/publisher/?ordering=country\r\n\r\n**Order documents by multiple fields**\r\n\r\nIf you want to order by multiple fields, use multiple ordering query params. In\r\nthe example below, documents would be ordered first by field\r\n``country`` (descending), then by field ``city`` (ascending).\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/publisher/?ordering=-country&ordering=city\r\n\r\nAdvanced Django REST framework integration example\r\n--------------------------------------------------\r\n\r\nSample advanced example models\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nbooks/models.py:\r\n\r\n.. code-block:: python\r\n\r\n    import json\r\n\r\n    from django.conf import settings\r\n    from django.db import models\r\n    from django.utils.translation import ugettext, ugettext_lazy as _\r\n\r\n    from six import python_2_unicode_compatible\r\n\r\n    BOOK_PUBLISHING_STATUS_PUBLISHED = 'published'\r\n    BOOK_PUBLISHING_STATUS_NOT_PUBLISHED = 'not_published'\r\n    BOOK_PUBLISHING_STATUS_IN_PROGRESS = 'in_progress'\r\n    BOOK_PUBLISHING_STATUS_CANCELLED = 'cancelled'\r\n    BOOK_PUBLISHING_STATUS_REJECTED = 'rejected'\r\n    BOOK_PUBLISHING_STATUS_CHOICES = (\r\n        (BOOK_PUBLISHING_STATUS_PUBLISHED, \"Published\"),\r\n        (BOOK_PUBLISHING_STATUS_NOT_PUBLISHED, \"Not published\"),\r\n        (BOOK_PUBLISHING_STATUS_IN_PROGRESS, \"In progress\"),\r\n        (BOOK_PUBLISHING_STATUS_CANCELLED, \"Cancelled\"),\r\n        (BOOK_PUBLISHING_STATUS_REJECTED, \"Rejected\"),\r\n    )\r\n    BOOK_PUBLISHING_STATUS_DEFAULT = BOOK_PUBLISHING_STATUS_PUBLISHED\r\n\r\n\r\n    @python_2_unicode_compatible\r\n    class Publisher(models.Model):\r\n        \"\"\"Publisher.\"\"\"\r\n\r\n        name = models.CharField(max_length=30)\r\n        address = models.CharField(max_length=50)\r\n        city = models.CharField(max_length=60)\r\n        state_province = models.CharField(max_length=30)\r\n        country = models.CharField(max_length=50)\r\n        website = models.URLField()\r\n\r\n        class Meta(object):\r\n            \"\"\"Meta options.\"\"\"\r\n\r\n            ordering = [\"id\"]\r\n\r\n        def __str__(self):\r\n            return self.name\r\n\r\n\r\n    @python_2_unicode_compatible\r\n    class Author(models.Model):\r\n        \"\"\"Author.\"\"\"\r\n\r\n        salutation = models.CharField(max_length=10)\r\n        name = models.CharField(max_length=200)\r\n        email = models.EmailField()\r\n        headshot = models.ImageField(upload_to='authors', null=True, blank=True)\r\n\r\n        class Meta(object):\r\n            \"\"\"Meta options.\"\"\"\r\n\r\n            ordering = [\"id\"]\r\n\r\n        def __str__(self):\r\n            return self.name\r\n\r\n\r\n    class Tag(models.Model):\r\n        \"\"\"Simple tag model.\"\"\"\r\n\r\n        title = models.CharField(max_length=255, unique=True)\r\n\r\n        class Meta(object):\r\n            \"\"\"Meta options.\"\"\"\r\n\r\n            verbose_name = _(\"Tag\")\r\n            verbose_name_plural = _(\"Tags\")\r\n\r\n        def __str__(self):\r\n            return self.title\r\n\r\n\r\n    @python_2_unicode_compatible\r\n    class Book(models.Model):\r\n        \"\"\"Book.\"\"\"\r\n\r\n        title = models.CharField(max_length=100)\r\n        description = models.TextField(null=True, blank=True)\r\n        summary = models.TextField(null=True, blank=True)\r\n        authors = models.ManyToManyField('books.Author', related_name='books')\r\n        publisher = models.ForeignKey(Publisher, related_name='books')\r\n        publication_date = models.DateField()\r\n        state = models.CharField(max_length=100,\r\n                                 choices=BOOK_PUBLISHING_STATUS_CHOICES,\r\n                                 default=BOOK_PUBLISHING_STATUS_DEFAULT)\r\n        isbn = models.CharField(max_length=100, unique=True)\r\n        price = models.DecimalField(max_digits=10, decimal_places=2)\r\n        pages = models.PositiveIntegerField(default=200)\r\n        stock_count = models.PositiveIntegerField(default=30)\r\n        tags = models.ManyToManyField('books.Tag',\r\n                                      related_name='books',\r\n                                      blank=True)\r\n\r\n        class Meta(object):\r\n            \"\"\"Meta options.\"\"\"\r\n\r\n            ordering = [\"isbn\"]\r\n\r\n        def __str__(self):\r\n            return self.title\r\n\r\n        @property\r\n        def publisher_indexing(self):\r\n            \"\"\"Publisher for indexing.\r\n\r\n            Used in ElasticSearch indexing.\r\n            \"\"\"\r\n            if self.publisher is not None:\r\n                return self.publisher.name\r\n\r\n        @property\r\n        def tags_indexing(self):\r\n            \"\"\"Tags for indexing.\r\n\r\n            Used in ElasticSearch indexing.\r\n            \"\"\"\r\n            return json.dumps([tag.title for tag in self.tags.all()])\r\n\r\nSample advanced example document\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nsearch_indexes/documents/book.py:\r\n\r\n.. code-block:: python\r\n\r\n    from django_elasticsearch_dsl import DocType, Index, fields\r\n    from elasticsearch_dsl import analyzer\r\n\r\n    from books.models import Book\r\n\r\n    # Name of the ElasticSearch index\r\n    BOOK_INDEX = Index('book')\r\n    # See ElasticSearch Indices API reference for available settings\r\n    BOOK_INDEX.settings(\r\n        number_of_shards=1,\r\n        number_of_replicas=1\r\n    )\r\n\r\n\r\n    html_strip = analyzer(\r\n        'html_strip',\r\n        tokenizer=\"standard\",\r\n        filter=[\"standard\", \"lowercase\", \"stop\", \"snowball\"],\r\n        char_filter=[\"html_strip\"]\r\n    )\r\n\r\n\r\n    @BOOK_INDEX.doc_type\r\n    class BookDocument(DocType):\r\n        \"\"\"Book ElasticSearch document.\"\"\"\r\n\r\n        id = fields.IntegerField(attr='id')\r\n\r\n        title = fields.StringField(\r\n            analyzer=html_strip,\r\n            fields={\r\n                'raw': fields.StringField(\r\n                    analyzer='keyword'\r\n                )\r\n            }\r\n        )\r\n\r\n        description = fields.StringField(\r\n            analyzer=html_strip,\r\n            fields={\r\n                'raw': fields.StringField(\r\n                    analyzer='keyword'\r\n                )\r\n            }\r\n        )\r\n\r\n        summary = fields.StringField(\r\n            analyzer=html_strip,\r\n            fields={\r\n                'raw': fields.StringField(\r\n                    analyzer='keyword'\r\n                )\r\n            }\r\n        )\r\n\r\n        publisher = fields.StringField(\r\n            attr='publisher_indexing',\r\n            analyzer=html_strip,\r\n            fields={\r\n                'raw': fields.StringField(\r\n                    analyzer='keyword'\r\n                )\r\n            }\r\n        )\r\n\r\n        publication_date = fields.DateField()\r\n\r\n        state = fields.StringField(\r\n            analyzer=html_strip,\r\n            fields={\r\n                'raw': fields.StringField(\r\n                    analyzer='keyword'\r\n                )\r\n            }\r\n        )\r\n\r\n        isbn = fields.StringField(\r\n            analyzer=html_strip,\r\n            fields={\r\n                'raw': fields.StringField(\r\n                    analyzer='keyword'\r\n                )\r\n            }\r\n        )\r\n\r\n        price = fields.FloatField()\r\n\r\n        pages = fields.IntegerField()\r\n\r\n        stock_count = fields.IntegerField()\r\n\r\n        tags = fields.StringField(\r\n            attr='tags_indexing',\r\n            analyzer=html_strip,\r\n            fields={\r\n                'raw': fields.StringField(\r\n                    analyzer='keyword',\r\n                    multi=True\r\n                )\r\n            },\r\n            multi=True\r\n        )\r\n\r\n        class Meta(object):\r\n            \"\"\"Meta options.\"\"\"\r\n\r\n            model = Book  # The model associate with this DocType\r\n\r\nSample advanced example serializer\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nsearch_indexes/serializers.py:\r\n\r\n.. code-block:: python\r\n\r\n    import json\r\n\r\n    from rest_framework import serializers\r\n\r\n    class TagSerializer(serializers.Serializer):\r\n        \"\"\"Helper serializer for the Tag field of the Book document.\"\"\"\r\n\r\n        title = serializers.CharField()\r\n\r\n        class Meta(object):\r\n            \"\"\"Meta options.\"\"\"\r\n\r\n            fields = ('title',)\r\n            read_only_fields = ('title',)\r\n\r\n\r\n    class BookDocumentSerializer(serializers.Serializer):\r\n        \"\"\"Serializer for the Book document.\"\"\"\r\n\r\n        id = serializers.SerializerMethodField()\r\n\r\n        title = serializers.CharField(read_only=True)\r\n        description = serializers.CharField(read_only=True)\r\n        summary = serializers.CharField(read_only=True)\r\n\r\n        publisher = serializers.CharField(read_only=True)\r\n        publication_date = serializers.DateField(read_only=True)\r\n        state = serializers.CharField(read_only=True)\r\n        isbn = serializers.CharField(read_only=True)\r\n        price = serializers.FloatField(read_only=True)\r\n        pages = serializers.IntegerField(read_only=True)\r\n        stock_count = serializers.IntegerField(read_only=True)\r\n        tags = serializers.SerializerMethodField()\r\n\r\n        class Meta(object):\r\n            \"\"\"Meta options.\"\"\"\r\n\r\n            fields = (\r\n                'id',\r\n                'title',\r\n                'description',\r\n                'summary',\r\n                'publisher',\r\n                'publication_date',\r\n                'state',\r\n                'isbn',\r\n                'price',\r\n                'pages',\r\n                'stock_count',\r\n                'tags',\r\n            )\r\n            read_only_fields = (\r\n                'id',\r\n                'title',\r\n                'description',\r\n                'summary',\r\n                'publisher',\r\n                'publication_date',\r\n                'state',\r\n                'isbn',\r\n                'price',\r\n                'pages',\r\n                'stock_count',\r\n                'tags',\r\n            )\r\n\r\n        def get_tags(self, obj):\r\n            \"\"\"Get tags.\"\"\"\r\n            return json.loads(obj.tags)\r\n\r\nSample advanced example view\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nsearch_indexes/views.py:\r\n\r\n.. code-block:: python\r\n\r\n    from django_elasticsearch_dsl_drf.constants import (\r\n        LOOKUP_FILTER_TERMS,\r\n        LOOKUP_FILTER_RANGE,\r\n        LOOKUP_FILTER_PREFIX,\r\n        LOOKUP_FILTER_WILDCARD,\r\n        LOOKUP_QUERY_IN,\r\n        LOOKUP_QUERY_EXCLUDE,\r\n    )\r\n    from django_elasticsearch_dsl_drf.filter_backends import (\r\n        FilteringFilterBackend,\r\n        OrderingFilterBackend,\r\n        SearchFilterBackend,\r\n    )\r\n    from django_elasticsearch_dsl_drf.views import BaseDocumentViewSet\r\n\r\n    # Example app models\r\n    from search_indexes.documents.book import BookDocument\r\n    from search_indxes.serializers import BookDocumentSerializer\r\n\r\n\r\n    class BookDocumentView(BaseDocumentViewSet):\r\n        \"\"\"The BookDocument view.\"\"\"\r\n\r\n        document = BookDocument\r\n        serializer_class = BookDocumentSerializer\r\n        lookup_field = 'id'\r\n        filter_backends = [\r\n            FilteringFilterBackend,\r\n            OrderingFilterBackend,\r\n            SearchFilterBackend,\r\n        ]\r\n        # Define search fields\r\n        search_fields = (\r\n            'title',\r\n            'description',\r\n            'summary',\r\n        )\r\n        # Define filtering fields\r\n        filter_fields = {\r\n            'id': {\r\n                'field': '_id',\r\n                'lookups': [\r\n                    LOOKUP_FILTER_RANGE,\r\n                    LOOKUP_QUERY_IN,\r\n                ],\r\n            },\r\n            'publisher': {\r\n                'field': 'publisher.raw',\r\n            },\r\n            'publication_date': 'publication_date',\r\n            'isbn': {\r\n                'field': 'isbn.raw',\r\n            },\r\n            'tags': {\r\n                'field': 'tags',\r\n                'lookups': [\r\n                    LOOKUP_FILTER_TERMS,\r\n                    LOOKUP_FILTER_PREFIX,\r\n                    LOOKUP_FILTER_WILDCARD,\r\n                    LOOKUP_QUERY_IN,\r\n                    LOOKUP_QUERY_EXCLUDE,\r\n                ],\r\n            },\r\n            'tags.raw': {\r\n                'field': 'tags.raw',\r\n                'lookups': [\r\n                    LOOKUP_FILTER_TERMS,\r\n                    LOOKUP_FILTER_PREFIX,\r\n                    LOOKUP_FILTER_WILDCARD,\r\n                    LOOKUP_QUERY_IN,\r\n                    LOOKUP_QUERY_EXCLUDE,\r\n                ],\r\n            },\r\n        }\r\n        # Define ordering fields\r\n        ordering_fields = {\r\n            'id': 'id',\r\n            'title': 'title.raw',\r\n            'price': 'price.raw',\r\n            'state': 'state.raw',\r\n            'publication_date': 'publication_date',\r\n        }\r\n        # Specify default ordering\r\n        ordering = ('id', 'title',)\r\n\r\nUsage advanced example\r\n~~~~~~~~~~~~~~~~~~~~~~\r\nConsidering samples above, you should be able to perform the search, sorting\r\nand filtering actions described below.\r\n\r\nSample queries\r\n^^^^^^^^^^^^^^\r\n\r\nSearch\r\n++++++\r\nQuery param name reserved for search is ``search``. Make sure your models and\r\ndocuments do not have it as a field or attribute.\r\n\r\nMultiple search terms are joined with ``OR``.\r\n\r\nLet's assume we have a number of Book items with fields ``title``,\r\n``description`` and ``summary``.\r\n\r\n**Search in all fields**\r\n\r\nSearch in all fields (``title``, ``description`` and ``summary``) for word\r\n\"education\"\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/books/?search=education\r\n\r\n**Search in specific field**\r\n\r\nIn order to search in specific field (``title``) for term \"education\", add\r\nthe field name separated with ``|`` to the search term.\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/books/?search=title|education\r\n\r\n**Search for multiple terms**\r\n\r\nIn order to search for multiple terms \"education\", \"technology\" add\r\nmultiple ``search`` query params.\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/books/?search=education&search=technology\r\n\r\n**Search for multiple terms in specific fields**\r\n\r\nIn order to search for multiple terms \"education\", \"technology\" in specific\r\nfields add multiple ``search`` query params and field names separated with\r\n``|`` to each of the search terms.\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/books/?search=title|education&search=summary|technology\r\n\r\nFiltering\r\n+++++++++\r\n\r\nLet's assume we have a number of Book documents with the tags (education,\r\npolitics, economy, biology, climate, environment, internet, technology).\r\n\r\nMultiple filter terms are joined with ``AND``.\r\n\r\n**Filter documents by state**\r\n\r\nFilter documents by ``state`` \"published\".\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/books/?state=published\r\n\r\n**Filter documents by multiple states**\r\n\r\nFilter documents by ``states`` \"published\" and \"in_progress\"\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/books/?state__in=published|in_progress\r\n\r\n**Filter document by a single field**\r\n\r\nFilter documents by (field ``tag``) \"education\".\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/books/?tag=education\r\n\r\n**Filter documents by multiple fields**\r\n\r\nFilter documents by multiple fields (field ``tags``) \"education\" and \"economy\"\r\nwith use of functional ``in`` query filter.\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/books/?tags__in=education|economy\r\n\r\nYou can achieve the same effect by specifying multiple tags (``tags``)\r\n\"education\" and \"economy\". Note, that in this case multiple filter terms are\r\njoined with ``OR``.\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/books/?tags=education&tags=economy\r\n\r\nIf you want the same as above, but joined with ``AND``, add ``__term`` to each\r\nlookup.\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/books/?tags__term=education&tags__term=economy\r\n\r\n**Filter documents by a word part of a single field**\r\n\r\nFilter documents by a part word part in single field (``tags``). Word part\r\nshould match both \"technology\" and \"biology\".\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/books/?tags__wildcard=*logy\r\n\r\nOrdering\r\n++++++++\r\n\r\nThe ``-`` prefix means ordering should be descending.\r\n\r\n**Order documents by field (ascending)**\r\n\r\nFilter documents by field ``price`` (ascending).\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/books/?search=title|lorem&ordering=price\r\n\r\n**Order documents by field (descending)**\r\n\r\nFilter documents by field ``price`` (descending).\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/books/?search=title|lorem&ordering=-price\r\n\r\n**Order documents by multiple fields**\r\n\r\nIf you want to order by multiple fields, use multiple ordering query params. In\r\nthe example below, documents would be ordered first by field\r\n``publication_date`` (descending), then by field ``price`` (ascending).\r\n\r\n.. code-block:: text\r\n\r\n    http://127.0.0.1:8080/search/books/?search=title|lorem&ordering=-publication_date&ordering=price\r\n\r\nVarious handy helpers\r\n---------------------\r\n\r\nMore like this\r\n~~~~~~~~~~~~~~\r\n\r\nTo get more-like-this results on a random registered model, do as follows:\r\n\r\n.. code-block:: python\r\n\r\n    from django_elasticsearch_dsl_drf.helpers import more_like_this\r\n    from books.models import Book\r\n    book = Book.objects.first()\r\n    similar_books = more_like_this(\r\n        book,\r\n        ['title', 'description', 'summary']\r\n    )\r\n\r\nTesting\r\n=======\r\n\r\nProject is covered with tests.\r\n\r\nTo test with all supported Python/Django versions type:\r\n\r\n.. code-block:: sh\r\n\r\n    tox\r\n\r\nTo test against specific environment, type:\r\n\r\n.. code-block:: sh\r\n\r\n    tox -e py36-django110\r\n\r\nTo test just your working environment type:\r\n\r\n.. code-block:: sh\r\n\r\n    ./runtests.py\r\n\r\nTo run a single test in your working environment type:\r\n\r\n.. code-block:: sh\r\n\r\n    ./runtests.py src/django_elasticsearch_dsl_drf/tests/test_ordering.py\r\n\r\nOr:\r\n\r\n.. code-block:: sh\r\n\r\n    ./manage.py test django_elasticsearch_dsl_drf.tests.test_ordering\r\n\r\nIt's assumed that you have all the requirements installed. If not, first\r\ninstall the test requirements:\r\n\r\n.. code-block:: sh\r\n\r\n    pip install -r examples/requirements/test.txt\r\n\r\nWriting documentation\r\n=====================\r\n\r\nKeep the following hierarchy.\r\n\r\n.. code-block:: text\r\n\r\n    =====\r\n    title\r\n    =====\r\n\r\n    header\r\n    ======\r\n\r\n    sub-header\r\n    ----------\r\n\r\n    sub-sub-header\r\n    ~~~~~~~~~~~~~~\r\n\r\n    sub-sub-sub-header\r\n    ^^^^^^^^^^^^^^^^^^\r\n\r\n    sub-sub-sub-sub-header\r\n    ++++++++++++++++++++++\r\n\r\n    sub-sub-sub-sub-sub-header\r\n    **************************\r\n\r\nLicense\r\n=======\r\n\r\nGPL 2.0/LGPL 2.1\r\n\r\nSupport\r\n=======\r\n\r\nFor any issues contact me at the e-mail given in the `Author`_ section.\r\n\r\nAuthor\r\n======\r\n\r\nArtur Barseghyan <artur.barseghyan@gmail.com>",
    "docs_url": "https://pythonhosted.org/django-elasticsearch-dsl-drf/",
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/barseghyanartur/django-elasticsearch-dsl-drf/",
    "keywords": "django",
    "license": "GPL 2.0/LGPL 2.1",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-elasticsearch-dsl-drf",
    "platform": "",
    "project_url": "https://pypi.org/project/django-elasticsearch-dsl-drf/",
    "release_url": "https://pypi.org/project/django-elasticsearch-dsl-drf/0.1.2/",
    "requires_python": "",
    "summary": "Integrate Elasticsearch DSL with Django REST framework.",
    "version": "0.1.2"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cc6ed0117b6b8e22d7c66948260fb92e",
          "sha256": "7cba85a90f1b5d9c6629cfb91b192a28fab4e19353d7f5a16fffe8df508e7e2d"
        },
        "downloads": 0,
        "filename": "django_elasticsearch_dsl_drf-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cc6ed0117b6b8e22d7c66948260fb92e",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 39093,
        "upload_time": "2017-06-20T00:51:05",
        "url": "https://files.pythonhosted.org/packages/e0/38/9e6823c6f2fbbb3a3cb1f7c13812d76a74eda6a6fccdcffcbe468770d2cd/django_elasticsearch_dsl_drf-0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "60a4fafb4e12c30e3d8e6d59f63db5e8",
          "sha256": "d134d079cc82a94e42b04e3b6f5ae927007d571e75adf846f7fb56594043b261"
        },
        "downloads": 0,
        "filename": "django-elasticsearch-dsl-drf-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "60a4fafb4e12c30e3d8e6d59f63db5e8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43192,
        "upload_time": "2017-06-20T00:51:03",
        "url": "https://files.pythonhosted.org/packages/54/e9/f9d7b7d0893889b160ffbd954aeb0c3b4919d0b6759fc9bf53691cb4d71c/django-elasticsearch-dsl-drf-0.1.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4b7666668c3c58c11b02587dd4bf8807",
          "sha256": "b9548f996c30c1174096e157c9870ef2a02cabfa5ba072a39e7c57c7517ba5d8"
        },
        "downloads": 0,
        "filename": "django_elasticsearch_dsl_drf-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4b7666668c3c58c11b02587dd4bf8807",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 39517,
        "upload_time": "2017-06-20T07:14:06",
        "url": "https://files.pythonhosted.org/packages/4a/6d/b827232769007c28e57393999f53c0973a786502a8ed6b9fb5ae99de6549/django_elasticsearch_dsl_drf-0.1.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "7f46b765aa14885d3018980fb690b3c4",
          "sha256": "be321ac089544153773fc35a474417b959658cc012f4371d18a1425bac5d4f95"
        },
        "downloads": 0,
        "filename": "django-elasticsearch-dsl-drf-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7f46b765aa14885d3018980fb690b3c4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45762,
        "upload_time": "2017-06-20T07:14:02",
        "url": "https://files.pythonhosted.org/packages/2e/f6/538a22d285f613d33ff8ff059b8cb5e9b07944e23b52e69e153f18a5e394/django-elasticsearch-dsl-drf-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "560b51bfa5284c5049396d1f98ce61ce",
          "sha256": "f3a64198532369a99e4023b1f66513473e4991b2a5c9132adfd5df94d8d6a9bd"
        },
        "downloads": 0,
        "filename": "django_elasticsearch_dsl_drf-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "560b51bfa5284c5049396d1f98ce61ce",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 39784,
        "upload_time": "2017-06-20T08:31:56",
        "url": "https://files.pythonhosted.org/packages/d5/03/791fe745e9e6360d871e3fbaee4c2f153dc5d61a69ae44e2a1af5958454a/django_elasticsearch_dsl_drf-0.1.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "de4b95e521536d301a6580c0db9d89ed",
          "sha256": "a974320d2b2e2a9b43e654ed1a8e8a55119246a7b51c8eec3188c4b7d3e164c5"
        },
        "downloads": 0,
        "filename": "django-elasticsearch-dsl-drf-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "de4b95e521536d301a6580c0db9d89ed",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45857,
        "upload_time": "2017-06-20T08:31:53",
        "url": "https://files.pythonhosted.org/packages/40/44/9e06b5ed5e6ee7b65cbc8501c53f3c3d727edcbcafff3961e29217fe5422/django-elasticsearch-dsl-drf-0.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "560b51bfa5284c5049396d1f98ce61ce",
        "sha256": "f3a64198532369a99e4023b1f66513473e4991b2a5c9132adfd5df94d8d6a9bd"
      },
      "downloads": 0,
      "filename": "django_elasticsearch_dsl_drf-0.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "560b51bfa5284c5049396d1f98ce61ce",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 39784,
      "upload_time": "2017-06-20T08:31:56",
      "url": "https://files.pythonhosted.org/packages/d5/03/791fe745e9e6360d871e3fbaee4c2f153dc5d61a69ae44e2a1af5958454a/django_elasticsearch_dsl_drf-0.1.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "de4b95e521536d301a6580c0db9d89ed",
        "sha256": "a974320d2b2e2a9b43e654ed1a8e8a55119246a7b51c8eec3188c4b7d3e164c5"
      },
      "downloads": 0,
      "filename": "django-elasticsearch-dsl-drf-0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "de4b95e521536d301a6580c0db9d89ed",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 45857,
      "upload_time": "2017-06-20T08:31:53",
      "url": "https://files.pythonhosted.org/packages/40/44/9e06b5ed5e6ee7b65cbc8501c53f3c3d727edcbcafff3961e29217fe5422/django-elasticsearch-dsl-drf-0.1.2.tar.gz"
    }
  ]
}