{
  "info": {
    "author": "Lauriola Ivano",
    "author_email": "ivanolauriola@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "\n\nMKLpy\n=====\n\n\nMKLpy is a framework for Multiple Kernel Learning and kernel machines scikit-compliant.\n\nThis package contains:\n\n* MKL algorithms\n  * EasyMKL\n  * RM-GD\n  * R-MKL\n  * Average of kernels\n\n* a meta-MKL-classifier used in multiclass problems according to one-vs-one pattern;\n\n* tools to operate over kernels, such as normalization, centering, summation, mean...;\n\n* metrics, such as kernel_alignment, radius...;\n\n* kernel functions, such as HPK and boolean kernels (disjunctive, conjunctive, DNF, CNF).\n\n\n\nFor more informations about classification, kernels and predictors visit `Link scikit-learn <http://scikit-learn.org/stable/>`_\n\n\nrequirements\n------------\n\nTo work properly, MKLpy requires:\n\n* numpy\n\n* scikit-learn\n\n* cvxopt\n\n\nexamples\n--------\n\n\n**LOADING data**\n\nIt is possible to load data by using scikit-learn, exploiting the svmlight standard\n\n.. code-block:: python\n\n    from sklearn.datasets import load_svmlight_file\n    X,Y = load_svmlight_file(path)\n    X = X.toarray() #Important! MKLpy require dense matrices!\n\n\n**PREPROCESSING**\n\nMKLpy provides several tools to preprocess data, some examples are:\n\n.. code-block:: python\n\n    from MKLpy.regularization import normalization,rescale_01\n    X = rescale_01(X)\n    X = normalization(X)\n\nIt is also possible to operate on kernels directly\n\n.. code-block:: python\n\n    from MKLpy.metrics.pairwise import HPK_kernel\n    K = HPK_kernel(X,degree=2)\n\n    from MKLpy.regularization import          kernel_centering,           kernel_normalization,           tracenorm\n    Kc = kernel_centering(K)\n    Kn = kernel_normalization(K)\n    Kt = tracenorm(K)\n\n\n**GENERATION**\n\nMKL algorithms require list or arrays of kernels, it is possible to create any custom list\n\n.. code-block:: python\n\n    KL = [HPK_kernel(X,degree=d) for d in range(1,11)]\n    \n    #creating lists of boolean kernels\n    from MKLpy.metrics.pairwise import              monotone_conjunctive_kernel as mCK,           monotone_disjunctive_kernel as mDK\n    #WARNING: boolean kernels require binary valued data {0,1}\n    KL = [mCK(X,k=d) for d in range(1,11)] + [mDK(X,k=d) for d in range(2,11)]\n\n\n**LEARNING**\n\nThe learning phase consists on two steps: learning kernels and fit models by using a MKl algorithm and a standard kernel machine\n\n.. code-block:: python\n\n    from MKLpy.algorithms import EasyMKL,RMGD,RMKL,AverageMKL\n    #learn kernels\n    K_easy = EasyMKL(lam=0.1).arrange_kernel(KL,Y)\n    K_rmgd = RMGD(max_iter=3).arrange_kernel(KL,Y)\n    #fit models\n    from sklearn.svm import SVC\n    from MKLpy.algorithms import KOMD\n    clf_komd = KOMD(lam=0.1,kernel='precomputed').fit(K_easy,Y)\n    clf_svc  = SVC(C=10,kernel='precomputed').fit(K_rmgd,Y)\n\nNow, we show a more suitable procedure, where MKL algorithms use a default base learner\n\n.. code-block:: python\n\n    clf = EasyMKL().fit(KL,Y)\n    clf = AverageMKL().fit(KL,Y)\n\nIt is also possible to set a custom base learner\n\n.. code-block:: python\n\n    clf = EasyMKL(estimator=SVC(C=1)).fit(KL,Y)\n\n\n**EVALUATION**\n\nIt is possible to evaluate a model by splitting a kernels list in train and test\n\n.. code-block:: python\n\n    from MKLpy.model_selection import train_test_split, cross_val_score\n    from sklearn.metrics import roc_auc_score\n    \n    KLtr,KLte,Ytr,Yte = train_test_split(KL,Y,train_size=.75,random_state=42)\n    y_score = clf.fit(KLtr,Ytr).decision_function(KLte)\n    auc_score = roc_auc_score(Yte, y_score)\n\nOr using a cross-validation procedure\n\n.. code-block:: python\n\n    clf = EasyMKL(estimator=SVC())\n    scores = cross_val_score(KL,Y,estimator=clf,n_folds=5)\n\n\n**OTHER TOOLS**\n\nMKLpy contains a wide set of tools for kernel learning and MKL, a simple example:\n\n.. code-block:: python\n\n    from MKLpy.metrics import margin, radius\n    K = AverageMKL().arrange_kernel(KL,Y)\n    rho = margin(K,Y) #distance between classes\n    R = radius(K) #radius of MEB\n\n\n\n\n",
    "docs_url": null,
    "download_url": "https://github.com/IvanoLauriola/MKLpy",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/IvanoLauriola/MKLpy",
    "keywords": "kernel",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "MKLpy",
    "platform": "",
    "project_url": "https://pypi.org/project/MKLpy/",
    "release_url": "https://pypi.org/project/MKLpy/0.2.1b0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A package for Multiple Kernel Learning scikit-compliant",
    "version": "0.2.1b0"
  },
  "releases": {
    "0.2.1b0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "abb2742d2303668a6f737713f50a62f3",
          "sha256": "4910dbb0fa9133325a4e677e6a1e2c8924a06616ab3d311f6a64388922a6053d"
        },
        "downloads": 0,
        "filename": "MKLpy-0.2.1b0.tar.gz",
        "has_sig": false,
        "md5_digest": "abb2742d2303668a6f737713f50a62f3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23057,
        "upload_time": "2017-07-29T14:53:53",
        "url": "https://files.pythonhosted.org/packages/58/f8/e6b194f6cc8e2fdfb4bbc222edfb5122c5ee0b47670306ac4b2831ff2c66/MKLpy-0.2.1b0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "abb2742d2303668a6f737713f50a62f3",
        "sha256": "4910dbb0fa9133325a4e677e6a1e2c8924a06616ab3d311f6a64388922a6053d"
      },
      "downloads": 0,
      "filename": "MKLpy-0.2.1b0.tar.gz",
      "has_sig": false,
      "md5_digest": "abb2742d2303668a6f737713f50a62f3",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 23057,
      "upload_time": "2017-07-29T14:53:53",
      "url": "https://files.pythonhosted.org/packages/58/f8/e6b194f6cc8e2fdfb4bbc222edfb5122c5ee0b47670306ac4b2831ff2c66/MKLpy-0.2.1b0.tar.gz"
    }
  ]
}