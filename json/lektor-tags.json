{
  "info": {
    "author": "A. Jesse Jiryu Davis",
    "author_email": "jesse@emptysquare.net",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Plugins",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "Lektor Tags Plugin\r\n==================\r\n\r\nIntroduction\r\n------------\r\n\r\nThis plugin implements tagging for your site. For each of your tags, it\r\nbuilds a page displaying a list of items that have that tag. This can be\r\nused for standard tag-based blog navigation.\r\n\r\nFor example, if your site has blog posts like this in your\r\n``content/blog`` directory:\r\n\r\n::\r\n\r\n    name: First Post\r\n    ---\r\n    tags:\r\n\r\n    coffee\r\n    tea\r\n\r\nCreate a ``configs/tags.ini``, like:\r\n\r\n.. code:: ini\r\n\r\n    parent = /blog\r\n\r\nThe ``lektor-tags`` plugin builds pages at these URLs:\r\n\r\n-  ``/blog/tag/coffee/``\r\n-  ``/blog/tag/tea/``\r\n\r\nEach page lists all the posts with that tag.\r\n\r\nInstallation\r\n------------\r\n\r\nAdd lektor-tags to your project from command line:\r\n\r\n::\r\n\r\n    lektor plugins add lektor-tags\r\n\r\nSee `the Lektor documentation for more instructions on installing\r\nplugins <https://www.getlektor.com/docs/plugins/>`__.\r\n\r\nOverview\r\n--------\r\n\r\nSay you have a \"blog-post\" model like this:\r\n\r\n.. code:: ini\r\n\r\n    [model]\r\n    name = Blog Post\r\n\r\n    [fields.tags]\r\n    type = strings\r\n\r\nMake a ``blog-post.html`` template that includes:\r\n\r\n.. code:: html\r\n\r\n    {% if this.tags %}\r\n      <ul>\r\n        {% for t in this.tags -%}\r\n          <li>\r\n            <a href=\"{{ ('/blog@tag/' ~ t.lower())|url }}\">\r\n              All posts tagged {{ t }}\r\n        {% endfor %}\r\n      </ul>\r\n    {% endif %}\r\n\r\nThis expression in the template generates a *source path* for each of\r\nthe blog post's tags:\r\n\r\n::\r\n\r\n    '/blog@tag/' ~ t.lower()\r\n\r\nThe if the tag is \"my-tag\", the expression renders a source path like:\r\n\r\n::\r\n\r\n    /blog/tag/my-tag\r\n\r\nA Lektor source path becomes an actual URL using the ``url`` filter. So\r\nthe template generates URLs to tag pages like:\r\n\r\n::\r\n\r\n    <a href=\"{{ ('/blog@tag/' ~ t.lower())|url }}\">\r\n\r\nThis uses the source path expression from before, but pipes it through\r\n``url`` to generate an actual link from the blog post to a tag page.\r\n\r\nConfiguration\r\n-------------\r\n\r\nSet these options in ``configs/tags.ini``:\r\n\r\n``parent``\r\n~~~~~~~~~~\r\n\r\nRequired. The source path of the tag pages' parent page. For example:\r\n\r\n.. code:: ini\r\n\r\n    parent = blog\r\n\r\nThen tag pages' source paths are like:\r\n\r\n::\r\n\r\n    /blog/tag/my-tag\r\n\r\nYou can specify the root as the parent:\r\n\r\n.. code:: ini\r\n\r\n    parent = /\r\n\r\n``items``\r\n~~~~~~~~~\r\n\r\nA query for all items on the page for one tag. You can use the variables\r\n``site`` and ``tag``. The template's ``this`` variable has a ``parent``\r\nattribute. The default query is:\r\n\r\n.. code:: ini\r\n\r\n    items = this.parent.children.filter(F.tags.contains(tag))\r\n\r\nYou can sort and filter with any expression:\r\n\r\n.. code:: ini\r\n\r\n    items = this.parent.children.filter(F.tags.contains(tag) and F.status == 'published').order_by('-pub_date')\r\n\r\nIf the parent page has `a pagination\r\nquery <https://www.getlektor.com/docs/guides/pagination/>`__ you may\r\nwant to use it for tagged pages:\r\n\r\n.. code:: ini\r\n\r\n    items = this.parent.pagination.items.filter(F.tags.contains(tag))\r\n\r\nSee `the Lektor documentation for\r\nqueries <https://www.getlektor.com/docs/api/db/query/>`__.\r\n\r\n``tags_field``\r\n~~~~~~~~~~~~~~\r\n\r\nThe name of the field in your model that contains tags. Defaults to\r\n``tags``. The field should be of type ``strings``. See `the Lektor\r\ndocumentation for the ``strings``\r\ntype <https://www.getlektor.com/docs/api/db/types/strings/>`__.\r\n\r\nFor example, if your model is like:\r\n\r\n.. code:: ini\r\n\r\n    [fields.labels]\r\n    type = strings\r\n\r\nThen add this to ``tags.ini``:\r\n\r\n.. code:: ini\r\n\r\n    tags_field = labels\r\n\r\n``template``\r\n~~~~~~~~~~~~\r\n\r\nThe template for the page that lists all posts with a certain tag. The\r\ntemplate's ``this`` variable has attributes ``tag`` and ``items``. An\r\nexample template:\r\n\r\n.. code:: html\r\n\r\n    <h1>Tag: {{ this.tag }}</h1>\r\n    <h1>Items:</h1>\r\n    <ul>\r\n      {% for i in this.items %}\r\n        <li><a href=\"{{ i|url }}\">{{ i._id }}</a></li>\r\n      {% else %}\r\n        <li><em>No items.</em></li>\r\n      {% endfor %}\r\n    </ul>\r\n\r\nSave a file like this to your project's ``templates/tags.html``. If you\r\nname the file something different, like ``label.html``, add this line to\r\n``tags.ini``:\r\n\r\n.. code:: ini\r\n\r\n    template = label.html\r\n\r\nThe plugin provides a default template if you don't specify one.\r\n\r\n``url_path``\r\n~~~~~~~~~~~~\r\n\r\nAn expression for the location of each tag page. You can use the\r\nvariables ``site`` and ``tag``. The ``this`` variable is a page with\r\nattributes ``parent`` and ``items``. The default expression is:\r\n\r\n.. code:: ini\r\n\r\n    url_path = {{ this.parent.url_path }}tag/{{ tag }}\r\n\r\nThis expression generates URLs like ``/blog/tag/coffee``.\r\n\r\n``ignore_missing``\r\n~~~~~~~~~~~~~~~~~~\r\n\r\nDefault false. To set true, add this line to ``tags.ini``:\r\n\r\n.. code:: ini\r\n\r\n    ignore_missing = true\r\n\r\nThis allows URLs to missing tag pages to be silently replaced with \"\".\r\nThe example use case is if your ``blog-post.html`` template includes a\r\nstatement like:\r\n\r\n.. code:: html\r\n\r\n    {% for t in this.tags -%}\r\n      <a href=\"{{ ('/blog@tag/' ~ t.lower())|url }}\">{{ t }}</a>\r\n    {% endfor %}\r\n\r\nIf a blog post *draft* is not discoverable, and it has any new tags used\r\nby no published blog posts, then those tag pages do not yet exist. Turn\r\non ``ignore_missing`` to allow such drafts to be built. The tag-page URL\r\npath will be the empty string \"\", until the draft is published and the\r\ntag page is created.\r\n\r\n``tags``\r\n~~~~~~~~\r\n\r\nAdvanced configuration. An expression for the set of tags. The default\r\nexpression is:\r\n\r\n.. code:: ini\r\n\r\n    tags = parent.children.distinct(\"tags\")\r\n\r\nIf you set ``tags_field`` to a different field name than \"tags\", the\r\ndefault expression uses your custom field name. For example if you have\r\nthis line in ``tags.ini``:\r\n\r\n.. code:: ini\r\n\r\n    tags_field = labels\r\n\r\nThen the default value of ``tags`` is:\r\n\r\n.. code:: ini\r\n\r\n    tags = parent.children.distinct(\"labels\")\r\n\r\nYou can use any template expression. For example, if your items have a\r\n\"published\" boolean field, you can select tags of published items:\r\n\r\n.. code:: ini\r\n\r\n    tags = parent.children.filter(F.published).distinct(\"tags\")\r\n\r\nOr even list your tags manually:\r\n\r\n.. code:: ini\r\n\r\n    tags = [\"tag1\", \"tag2\"]\r\n\r\nSee `the Lektor documentation for\r\nqueries <https://www.getlektor.com/docs/api/db/query/>`__.\r\n\r\nTags are always deduplicated, and alphabetically ordered.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "UNKNOWN",
    "keywords": "lektor tags",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lektor-tags",
    "platform": "",
    "project_url": "https://pypi.org/project/lektor-tags/",
    "release_url": "https://pypi.org/project/lektor-tags/0.1/",
    "requires_python": null,
    "summary": "Lektor Tags Plugin",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a2e42ee309e1b6a89f4fd6e81e210053",
          "sha256": "f701de3e6c4fd471fd577d17f2265ae1339e6b98363cdab1fa8ee3b361c626a2"
        },
        "downloads": 478,
        "filename": "lektor-tags-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a2e42ee309e1b6a89f4fd6e81e210053",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2756,
        "upload_time": "2016-04-28T15:43:13",
        "url": "https://files.pythonhosted.org/packages/1e/65/0da890d28440697595cfcd32c41452ba8867012adf05bbdcde9d818d29b2/lektor-tags-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a2e42ee309e1b6a89f4fd6e81e210053",
        "sha256": "f701de3e6c4fd471fd577d17f2265ae1339e6b98363cdab1fa8ee3b361c626a2"
      },
      "downloads": 478,
      "filename": "lektor-tags-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a2e42ee309e1b6a89f4fd6e81e210053",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 2756,
      "upload_time": "2016-04-28T15:43:13",
      "url": "https://files.pythonhosted.org/packages/1e/65/0da890d28440697595cfcd32c41452ba8867012adf05bbdcde9d818d29b2/lektor-tags-0.1.tar.gz"
    }
  ]
}