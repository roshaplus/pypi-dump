{
  "info": {
    "author": "Heng Li",
    "author_email": "lh3@me.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "==============================\nMappy: Minimap2 Python Binding\n==============================\n\n`Minimap2 <https://github.com/lh3/minimap2>`_ is a fast and accurate pairwise\naligner for genomic and transcribed nucleotide sequences. This Python extension\nprovides a convenient interface to calling minimap2 in Python.\n\nInstallation\n------------\n\nThe mappy module can be installed directly with:\n\n.. code:: shell\n\n\tgit clone https://github.com/lh3/minimap2\n\tcd minimap2\n\tpython setup.py install\n\nor with `pip <https://en.wikipedia.org/wiki/Pip_(package_manager)>`_:\n\n.. code:: shell\n\n\tpip install --user mappy\n\nUsage\n-----\n\nThe following Python program shows the key functionality of this module:\n\n.. code:: python\n\n\timport mappy as mp\n\ta = mp.Aligner(\"test/MT-human.fa\")  # load or build index\n\tif not a: raise Exception(\"ERROR: failed to load/build index\")\n\tfor hit in a.map(\"GGTTAAATACAGACCAAGAGCCTTCAAAGCCCTCAGTAAGTTGCAATACTTAATTTCTGT\"):\n\t\tprint(\"{}\\t{}\\t{}\\t{}\".format(hit.ctg, hit.r_st, hit.r_en, hit.cigar_str))\n\nIt builds an index from the specified sequence file (or loads an index if a\npre-built index is specified), aligns a sequence against it, traverses each hit\nand prints them out.\n\nAPIs\n----\n\nClass mappy.Aligner\n~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n\tAligner(fn_idx_in, preset=None, ...)\n\nArguments:\n\n* **fn_idx_in**: index or sequence file name. Minimap2 automatically tests the\n  file type. If a sequence file is provided, minimap2 builds an index. The\n  sequence file can be optionally gzip'd.\n\n* **preset**: minimap2 preset. Currently, minimap2 supports the following\n  presets: **sr** for single-end short reads; **map-pb** for PacBio\n  read-to-reference mapping; **map-ont** for Oxford Nanopore read mapping;\n  **splice** for long-read spliced alignment; **asm5** for assembly-to-assembly\n  alignment; **asm10** for full genome alignment of closely related species. Note\n  that the Python module does not support all-vs-all read overlapping.\n\n* **k**: k-mer length, no larger than 28\n\n* **w**: minimizer window size, no larger than 255\n\n* **min_cnt**: mininum number of minimizers on a chain\n\n* **min_chain_score**: minimum chaing score\n\n* **bw**: chaining and alignment band width\n\n* **best_n**: max number of alignments to return\n\n* **n_threads**: number of indexing threads; 3 by default\n\n* **fn_idx_out**: name of file to which the index is written\n\n.. code:: python\n\n\tmap(seq)\n\nThis method maps :code:`seq` against the index. It *yields* a generator,\ngenerating a series of :code:`Alignment` objects.\n\nClass mappy.Alignment\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis class has the following properties:\n\n* **ctg**: name of the reference sequence the query is mapped to\n\n* **ctg_len**: total length of the reference sequence\n\n* **r_st** and **r_en**: start and end positions on the reference\n\n* **q_st** and **q_en**: start and end positions on the query\n\n* **strand**: +1 if on the forward strand; -1 if on the reverse strand\n\n* **mapq**: mapping quality\n\n* **NM**: number of mismatches and gaps in the alignment\n\n* **blen**: length of the alignment, including both alignment matches and gaps\n\n* **trans_strand**: transcript strand. +1 if on the forward strand; -1 if on the\n  reverse strand; 0 if unknown\n\n* **is_primary**: if the alignment is primary (typically the best and the first\n  to generate)\n\n* **cigar_str**: CIGAR string\n\n* **cigar**: CIGAR returned as an array of shape :code:`(n_cigar,2)`. The two\n  numbers give the length and the operator of each CIGAR operation.\n\nAn :code:`Alignment` object can be converted to a string in the following format:\n\n::\n\n\tq_st  q_en  strand  ctg  ctg_len  r_st  r_en  blen-NM  blen  mapq  cg:Z:cigar_str\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/lh3/minimap2",
    "keywords": "bioinformatics",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mappy",
    "platform": "",
    "project_url": "https://pypi.org/project/mappy/",
    "release_url": "https://pypi.org/project/mappy/2.2rc0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Minimap2 python binding",
    "version": "2.2rc0"
  },
  "releases": {
    "2.2rc0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0600b968d7d796cd8dfa96d992c89774",
          "sha256": "a18537193a3ec01658d114c61bfd2e5b023c336c7f7a468b536e51b8f0f49766"
        },
        "downloads": 0,
        "filename": "mappy-2.2rc0.tar.gz",
        "has_sig": false,
        "md5_digest": "0600b968d7d796cd8dfa96d992c89774",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 119164,
        "upload_time": "2017-09-17T04:09:55",
        "url": "https://files.pythonhosted.org/packages/10/63/46fb16e567cdbd081b6b8e5915813f43feb7cb1e449f8a875832fab5601d/mappy-2.2rc0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0600b968d7d796cd8dfa96d992c89774",
        "sha256": "a18537193a3ec01658d114c61bfd2e5b023c336c7f7a468b536e51b8f0f49766"
      },
      "downloads": 0,
      "filename": "mappy-2.2rc0.tar.gz",
      "has_sig": false,
      "md5_digest": "0600b968d7d796cd8dfa96d992c89774",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 119164,
      "upload_time": "2017-09-17T04:09:55",
      "url": "https://files.pythonhosted.org/packages/10/63/46fb16e567cdbd081b6b8e5915813f43feb7cb1e449f8a875832fab5601d/mappy-2.2rc0.tar.gz"
    }
  ]
}