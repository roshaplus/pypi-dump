{
  "info": {
    "author": "Zulko",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Dna Cauldron\n=============\n\n.. image:: https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/DnaCauldron/master/docs/_static/images/title.png\n   :alt: [logo]\n   :align: center\n   :width: 500px\n\n.. image:: https://travis-ci.org/Edinburgh-Genome-Foundry/DnaCauldron.svg?branch=master\n  :target: https://travis-ci.org/Edinburgh-Genome-Foundry/DnaCauldron\n  :alt: Travis CI build status\n\nDna Cauldron (complete documentation `here <https://edinburgh-genome-foundry.github.io/DnaCauldron/>`_)\nis a Python library to simulate restriction-based assembly operations.\nYou provide a set of parts and receptor vectors and Dna Cauldron will compute the\nassembli(es) that could result from the mix.\n\nDna Cauldron was written with Synthetic Biology applications in mind (typically,\nbatches of parts-based assemblies).\n\nIt is simple to use, plays well with BioPython, can import and export Genbank\n(it conserves all features), and provides ways to select particular\nconstructs when dealing with large combinatorial assemblies.\n\n**Try it online !** Too lazy to use the library programmatically ?\nIt is available\n`there as a web service <http://cuba.genomefoundry.org/#/simulate_gg_assemblies>`_\n.\n\nInstallation\n-------------\n\nYou can install DnaCauldron through PIP\n\n\n.. code:: shell\n\n    sudo pip install dnacauldron\n\nAlternatively, you can unzip the sources in a folder and type\n\n\n.. code:: shell\n\n    sudo python setup.py install\n\nIt works better with the Networkx development version, that you install with\n\n.. code:: shell\n\n    sudo pip3 install git+https://github.com/networkx/networkx.git\n\nUsage\n------\n\nSingle assembly\n~~~~~~~~~~~~~~~\n\nTo assemble several parts and a receptor plasmid into a single construct,\nuse `single_assembly`. The parts can be provided either as paths to genbank\nfiles or as Biopython records. Dna Cauldron returns a Biopython record of the\nfinal assembly, and (optionally) writes it to a Genbank file.\n\n.. code:: python\n\n    from dnacauldron.utils import single_assembly\n    final_construct = single_assembly(\n        parts=[\"partA.gb\", \"partB.gb\", \"partC.gb\", \"partD.gb\"],\n        receptor=\"receptor.gb\", # Receptor plasmid for the final assembly\n        outfile=\"final_construct.gb\", # Name of the output\n        enzyme=\"BsmBI\" # enzyme used for the assembly\n    )\n\nCombinatorial assembly\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe following example imports parts from Genbank files and outputs all\npossible outcomes of BsmBI-based Golden-Gate assembly as new genbank files\n`001.gb`, `002.gb`, etc. We ignore the final assemblies containing a BsmBI site\nas these are unstable.\n\n.. code:: python\n\n    from Bio import SeqIO # for exporting to Genbank\n    from dnacauldron import (RestrictionLigationMix, NoRestrictionSiteFilter,\n                             load_genbank)\n    \n    # Load all the parts (including the receptor)\n    parts_files = [\"partA.gb\", \"partA2.gb\", \"partB.gb\", \"partB2.gb\", \"partC.gb\",\n                   \"receptor.gb\"]\n    parts = [load_genbank(filename, linear=False) for filename in parts_files]\n    \n    # Create the \"reaction mix\"\n    enzyme = \"BsmBI\"\n    mix = RestrictionLigationMix(parts, enzyme)\n    \n    # Find all final assemblies (containing no sites from the restriction enzyme)\n    filters = [NoRestrictionSiteFilter(enzyme)]\n    assemblies = mix.compute_circular_assemblies(seqrecord_filters=filters)\n    \n    # Iter through all possible constructs and write them on disk as Genbanks.\n    for i, assembly in enumerate(assemblies):\n        SeqIO.write(assembly, os.path.join(\"..\", \"%03d.gb\" % i), \"genbank\")\n\n\nFull Assembly report\n~~~~~~~~~~~~~~~~~~~~\n\nDNA Cauldron also implements routine to generate reports on the assemblies,\nfeaturing the resulting constructs (in genbank and PDF format) as well as\nfigures for verifying that the parts assembled as expected and help troubleshoot\nif necessary.\n\nThe following code produces a structured directory with various reports:\n\n.. code:: python\n\n    import dnacauldron as dc\n    parts = [\n        dc.load_genbank(\"partA.gb\", linear=False, name=\"PartA\"),\n        dc.load_genbank(\"partB.gb\", linear=False, name=\"PartB\"),\n        dc.load_genbank(\"partC.gb\", linear=False, name=\"PartC\"),\n        dc.load_genbank(\"receptor.gb\", linear=False, name=\"Receptor\"),\n    ]\n    dc.full_assembly_report(parts, target=\"./my_report\", enzyme=\"BsmBI\",\n                            max_assemblies=40, fragments_filters='auto',\n                            assemblies_prefix='asm')\n\nResult:\n\n.. image:: https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/DnaCauldron/master/docs/_static/images/report_screenshot.jpg\n   :alt: [logo]\n   :align: center\n   :width: 600px\n\n\nHow it works\n------------\n\nDna Cauldron simulates enzyme digestions and computes sticky ends, then generates\na graph of the fragments that bind together, and explores circular paths in this graph\n(which correspond to circular constructs), an idea also used in\n`PyDNA <https://github.com/BjornFJohansson/pydna>`_ and first\ndescribed in `Pereira et al. Bioinf. 2015 <http://bmcbioinformatics.biomedcentral.com/articles/10.1186/s12859-015-0544-x>`_ .\nDNA Cauldron adds methods to deal with combinatorial assemblies,\nselecting constructs based on a marker, routines for report generation, etc.\n\n\nLicence\n--------\n\nDna Cauldron is an open-source software originally written at the `Edinburgh Genome Foundry\n<http://edinburgh-genome-foundry.github.io/home.html>`_ by `Zulko <https://github.com/Zulko>`_\nand `released on Github <https://github.com/Edinburgh-Genome-Foundry/DnaCauldron>`_ under the MIT licence (\u00a2 Edinburgh Genome Foundry).\nEveryone is welcome to contribute !\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "",
    "license": "see LICENSE.txt",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dnacauldron",
    "platform": "",
    "project_url": "https://pypi.org/project/dnacauldron/",
    "release_url": "https://pypi.org/project/dnacauldron/0.1.1/",
    "requires_python": "",
    "summary": "",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dd589cb35012d46a2fe1548f0dfd9005",
          "sha256": "bc9143f4c25e6a537c97799c3c6e3babead0c80075de89f2d8855c562d58c034"
        },
        "downloads": 0,
        "filename": "dnacauldron-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dd589cb35012d46a2fe1548f0dfd9005",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 200176,
        "upload_time": "2017-05-22T08:45:13",
        "url": "https://files.pythonhosted.org/packages/70/81/efb75a2fd9180ec9c6fc4798ddb2120b4c19a9ee1b2dc57f67b24436f6c0/dnacauldron-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "550e65521d08473da16ff5857d7452d3",
          "sha256": "4debcac8027faa7083a64f70b1ea3d0659096ca6fc92d31f25a63b9d07437c6c"
        },
        "downloads": 0,
        "filename": "dnacauldron-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "550e65521d08473da16ff5857d7452d3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 201155,
        "upload_time": "2017-05-23T16:36:44",
        "url": "https://files.pythonhosted.org/packages/36/7d/ffa4a2968d5cdd104c2557f1ef7b69dea16527aad970e6f4581d17d45fa4/dnacauldron-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "550e65521d08473da16ff5857d7452d3",
        "sha256": "4debcac8027faa7083a64f70b1ea3d0659096ca6fc92d31f25a63b9d07437c6c"
      },
      "downloads": 0,
      "filename": "dnacauldron-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "550e65521d08473da16ff5857d7452d3",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 201155,
      "upload_time": "2017-05-23T16:36:44",
      "url": "https://files.pythonhosted.org/packages/36/7d/ffa4a2968d5cdd104c2557f1ef7b69dea16527aad970e6f4581d17d45fa4/dnacauldron-0.1.1.tar.gz"
    }
  ]
}