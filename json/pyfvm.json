{
  "info": {
    "author": "Nico Schl\u00f6mer",
    "author_email": "nico.schloemer@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "PyFVM\n=====\n\n|CircleCI| |codecov| |PyPi Version| |GitHub stars|\n\nCreating finite volume equation systems with ease.\n\nPyFVM provides everything that is needed for setting up finite volume\nequation systems. The user needs to specify the finite volume\nformulation in a configuration file, and PyFVM will create the\nmatrix/right-hand side or the nonlinear system for it. This package is\nfor everyone who wants to quickly construct FVM systems.\n\nExamples\n~~~~~~~~\n\nLinear equation systems\n^^^^^^^^^^^^^^^^^^^^^^^\n\nPyFVM works by specifying the residuals, so for solving Poisson's\nequation with Dirichlet boundary conditions, simply do\n\n.. code:: python\n\n    import pyfvm\n    from pyfvm.form_language import *\n    import meshzoo\n    from scipy.sparse import linalg\n    import voropy\n\n    class Poisson(object):\n        def apply(self, u):\n            return integrate(lambda x: -n_dot_grad(u(x)), dS) \\\n                 - integrate(lambda x: 1.0, dV)\n\n        def dirichlet(self, u):\n            return [(lambda x: u(x) - 0.0, Boundary())]\n\n    # Create mesh using meshzoo\n    vertices, cells = meshzoo.rectangle(0.0, 2.0, 0.0, 1.0, 401, 201)\n    mesh = voropy.mesh_tri.MeshTri(vertices, cells)\n\n    matrix, rhs = pyfvm.discretize_linear(Poisson(), mesh)\n\n    u = linalg.spsolve(matrix, rhs)\n\n    mesh.write('out.vtu', point_data={'u': u})\n\nThis example uses `meshzoo <https://pypi.python.org/pypi/meshzoo>`__ for\ncreating a simple mesh, but anything else that provides vertices and\ncells works as well. For example, reading from a wide variety of mesh\nfiles is supported (via\n`meshio <https://pypi.python.org/pypi/meshio>`__):\n\n.. code:: python\n\n    mesh, _, _ = pyfvm.reader.read('pacman.e')\n\nLikewise, `PyAMG <https://github.com/pyamg/pyamg>`__ is a much faster\nsolver for this problem\n\n::\n\n    import pyamg\n    ml = pyamg.smoothed_aggregation_solver(linear_system.matrix)\n    u = ml.solve(linear_system.rhs, tol=1e-10)\n\nMore examples are contained in the `examples directory <examples/>`__.\n\nNonlinear equation systems\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nNonlinear systems are treated almost equally; only the discretization\nand obviously the solver call is different. For Bratu's problem:\n\n.. code:: python\n\n    import pyfvm\n    from pyfvm.form_language import *\n    import meshzoo\n    import numpy\n    from sympy import exp\n    import voropy\n\n    class Bratu(object):\n        def apply(self, u):\n            return integrate(lambda x: -n_dot_grad(u(x)), dS) \\\n                 - integrate(lambda x: 2.0 * exp(u(x)), dV)\n\n        def dirichlet(self, u):\n            return [(u, Boundary())]\n\n    vertices, cells = meshzoo.rectangle(0.0, 2.0, 0.0, 1.0, 101, 51)\n    mesh = voropy.mesh_tri.MeshTri(vertices, cells)\n\n    f, jacobian = pyfvm.discretize(Bratu(), mesh)\n\n    def jacobian_solver(u0, rhs):\n        from scipy.sparse import linalg\n        jac = jacobian.get_linear_operator(u0)\n        return linalg.spsolve(jac, rhs)\n\n    u0 = numpy.zeros(len(vertices))\n    u = pyfvm.newton(f.eval, jacobian_solver, u0)\n\n    mesh.write('out.vtu', point_data={'u': u})\n\nNote that the Jacobian is computed symbolically from the ``Bratu``\nclass.\n\nInstead of ``pyfvm.newton``, you can use any solver that accepts the\nresidual computation ``f.eval``, e.g.,\n\n::\n\n    import scipy.optimize\n    u = scipy.optimize.newton_krylov(f.eval, u0)\n\nInstallation\n~~~~~~~~~~~~\n\nPyFVM is `available from the Python Package\nIndex <https://pypi.python.org/pypi/pyfvm/>`__, so simply type\n\n::\n\n    pip install -U pyfvm\n\nto install or upgrade.\n\nTesting\n~~~~~~~\n\nTo run the tests, check out this repository and type\n\n::\n\n    pytest\n\nDistribution\n~~~~~~~~~~~~\n\nTo create a new release\n\n1. bump the ``__version__`` number,\n\n2. publish to PyPi and GitHub:\n\n   ::\n\n       make publish\n\nLicense\n~~~~~~~\n\nPyFVM is published under the `MIT\nlicense <https://en.wikipedia.org/wiki/MIT_License>`__.\n\n.. |CircleCI| image:: https://img.shields.io/circleci/project/github/nschloe/pyfvm.svg\n   :target: https://circleci.com/gh/nschloe/pyfvm\n.. |codecov| image:: https://codecov.io/gh/nschloe/pyfvm/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/nschloe/pyfvm\n.. |PyPi Version| image:: https://img.shields.io/pypi/v/pyfvm.svg\n   :target: https://pypi.python.org/pypi/pyfvm\n.. |GitHub stars| image:: https://img.shields.io/github/stars/nschloe/pyfvm.svg?style=social&label=Star&maxAge=2592000\n   :target: https://github.com/nschloe/pyfvm\n\n\n",
    "docs_url": null,
    "download_url": "https://github.com/nschloe/pyfvm/releases",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/nschloe/pyfvm",
    "keywords": "",
    "license": "License :: OSI Approved :: MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyfvm",
    "platform": "any",
    "project_url": "https://pypi.org/project/pyfvm/",
    "release_url": "https://pypi.org/project/pyfvm/0.2.3/",
    "requires_python": "",
    "summary": "Finite Volume Discretizations for Python",
    "version": "0.2.3"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "27b9e9ce4e058ce146671e106f9e749b",
          "sha256": "5b63aea33ca6b81b0c03e9034b25701d9dfaa6def5aa58a5a12eddce3b35d18b"
        },
        "downloads": 544,
        "filename": "pyfvm-0.1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "27b9e9ce4e058ce146671e106f9e749b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23275,
        "upload_time": "2016-06-20T13:53:13",
        "url": "https://files.pythonhosted.org/packages/93/94/455f7d914eb0e7a48dc7101dc908a5090cd6dbd78c25b0943bf710d58bff/pyfvm-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0a211b18882582a23a5132fc1cb78979",
          "sha256": "8c9e4115986359754b0a1b2b23f84328fc882c7ec89e540ca39aa084d1fd7a9b"
        },
        "downloads": 0,
        "filename": "PyFVM-0.2.0.tar.gz",
        "has_sig": true,
        "md5_digest": "0a211b18882582a23a5132fc1cb78979",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13945,
        "upload_time": "2017-05-26T11:13:42",
        "url": "https://files.pythonhosted.org/packages/ca/5c/8d2ec311b199202641931e045fc3cc02578e8cf0974dec1f7ea2d360bc58/PyFVM-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "faa874b3ab6060cc38bc35708a968dbe",
          "sha256": "8001cba3467058ddc1f81e114dcc90e0a8081a1bf64f87e0381f0e5cfb7fe35b"
        },
        "downloads": 0,
        "filename": "PyFVM-0.2.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "faa874b3ab6060cc38bc35708a968dbe",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 17983,
        "upload_time": "2017-05-26T13:01:51",
        "url": "https://files.pythonhosted.org/packages/90/73/f7db62ed4ecb311d2bcdb26cec4c4c20ed113799e51f3daf47b5569a42f5/PyFVM-0.2.1-py2.py3-none-any.whl"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a0e0666b0ecd733e44e12eae9ee9966d",
          "sha256": "f722b6dbb6e73aeb2e4490752da0f3e7cbc8c13fe7332ff19fe636ddec9f0dac"
        },
        "downloads": 0,
        "filename": "PyFVM-0.2.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "a0e0666b0ecd733e44e12eae9ee9966d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 17793,
        "upload_time": "2017-05-27T21:23:54",
        "url": "https://files.pythonhosted.org/packages/05/75/ccd101fd4ce8234bb22ab9a6d93a03ff11d08cd608303a50e126f8b8041d/PyFVM-0.2.2-py2.py3-none-any.whl"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "70e4773763d2e71671ee75040113051c",
          "sha256": "45b887465c9f0d68fc750599f72301c6ef3157b47875f2b5d309d39fb5bfbc04"
        },
        "downloads": 0,
        "filename": "PyFVM-0.2.3-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "70e4773763d2e71671ee75040113051c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 17547,
        "upload_time": "2017-05-29T21:12:10",
        "url": "https://files.pythonhosted.org/packages/c4/12/d15678b973cfde5e4fad57abba9023400f82091cd62a0ae3daf0fb43534f/PyFVM-0.2.3-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "70e4773763d2e71671ee75040113051c",
        "sha256": "45b887465c9f0d68fc750599f72301c6ef3157b47875f2b5d309d39fb5bfbc04"
      },
      "downloads": 0,
      "filename": "PyFVM-0.2.3-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "70e4773763d2e71671ee75040113051c",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 17547,
      "upload_time": "2017-05-29T21:12:10",
      "url": "https://files.pythonhosted.org/packages/c4/12/d15678b973cfde5e4fad57abba9023400f82091cd62a0ae3daf0fb43534f/PyFVM-0.2.3-py2.py3-none-any.whl"
    }
  ]
}