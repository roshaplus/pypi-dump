{
  "info": {
    "author": "Robert Schindler",
    "author_email": "r.schindler@efficiosoft.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "hass-heaty\n==========\n\nA highly-configurable, comfortable to use Home Assistant / appdaemon app\nthat controls thermostats based on a schedule while still facilitating\nmanual intervention at any time.\n\n**Note:**\nHeaty is still a young piece of software which likely contains some bugs.\nPlease keep that in mind when using it. Bug reports and suggestions are\nalways welcome. Use the GitHub Issues for this sort of feedback.\n\n\nFeatures\n--------\n\nThese key features are implemented in Heaty. More are added continuously.\n\n* Schedules (based on time, days of week/month, month, year)\n* Separate schedule and settings for each room (multi-zone)\n* Dynamic temperatures based on expressions written in Python\n* Configurable re-scheduling after manual temperature adjustments\n* Correction of inaccurate sensors by a per-thermostat delta\n* Open window detection\n* Re-sending until thermostat reports the change back (for unreliable networks)\n* Master switch to turn off everything\n* Logging\n* Custom widgets for AppDaemon dashboards (WIP)\n\n\nInstallation\n------------\n\nInstall from PyPi.\n\n::\n\n    pip3 install hass-heaty\n\nOr clone the GitHub repository to get even the latest changes:\n\n::\n\n    git clone https://github.com/efficiosoft/hass-heaty\n    cd hass-heaty\n    pip3 install . --upgrade\n\n\nA note for hass.io users\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nAs far as I know, it's not possible to create a plug & play add-on for\nhass.io containing Heaty, because it needs to be installed into\nAppDaemon's container.\n\nEven though it's untested, the only actions needed in order to install\nunder hass.io are:\n\n1. Install the appdaemon add-on.\n2. Copy the ``hass_heaty`` folder and the file ``heaty_app.py`` into\n   the ``apps`` directory of your AppDaemon container. This is also the\n   only thing you need to do when upgrading to a newer version of Heaty.\n3. Continue with the configuration as normal.\n\n\nConfiguration\n-------------\n\n1. Get yourself a nice cup of coffee or tea. You'll surely need it.\n2. Copy the file ``heaty_app.py`` to your AppDaemon's ``apps`` directory.\n   This is just a stub that imports the real app's code, making later\n   upgrades a little easier.\n3. Copy the contents of ``apps.yaml.example`` to your ``apps.yaml`` file\n   and adapt it as necessary. The example file also contains documentation\n   comments explaining what the different settings mean.\n   There are both a minimal and a full configuration example in that file.\n   You'll probably want to get up and running with the minimal one and\n   extend your configuration later, since there is really a lot you can do\n   if you want. But don't worry, the minimal configuration will probably\n   do just fine for now.\n4. AppDaemon should have noticed the changes made to ``apps.yaml`` and\n   restart its apps automatically.\n\nYou're done!\n\n\nUpgrade\n-------\n\nSimply pull upgrades from PyPi:\n\n::\n\n    pip3 install --upgrade hass-heaty\n\nOr, if you installed from the git repository:\n\n::\n\n    cd /path/to/your/clone/of/the/repository\n    git pull\n    pip3 install . --upgrade\n\nNote that AppDaemon doesn't detect changes in the imported modules\nautomatically and needs to be restarted manually after an upgrade.\n\n**When upgrading from v0.2.0,** please do also upgrade ``heaty_app.py``.\n\n\nWriting schedules\n-----------------\n\nA schedule controls the temperature in a room over time. It consists\nof a set of rules.\n\nEach rule must define a temperature:\n\n::\n\n    schedule:\n    - temp: 16\n\nThis schedule would just always set the temperature to ``16``\ndegrees, nothing else. Of course, schedules wouldn't make a lot\nsense if they couldn't do more than that.\n\nBasic scheduling based on time of the day\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nHere is another one:\n\n::\n\n    schedule:\n    - temp: 21.5\n      start: \"07:00\"\n      end: \"22:00\"\n\n    - temp: 16\n\nThis schedule contains the same rule as the schedule before, but\nadditionally, it got a new one. The new rule overwrites the other\nand will set a temperature of ``21.5`` degrees, but only from 7.00 am\nto 10.00 pm. This is because it's placed before the ``16``-degrees-rule.\nThat is how Heaty schedules work. The first matching rule wins.\n\nIf you omit the ``start`` parameter, Heaty assumes that you mean\nmidnight (``00:00``) and fills that in for you.\n\nWhen ``end`` is not specified, Heaty does two things. First, it sets\n``00:00`` as value for ``end``. This alone wouldn't make sense,\nbecause the resulting rule would stop being valid before it started.\nTo achieve the behaviour we'd expect, Heaty sets another attribute,\n``end_plus_days: 1``. This means that the rule is valid up to the\ntime specified in the ``end`` field, but one day later than the\nstart. Cool, right?\n\nHaving done the same manually would result in the following schedule,\nwhich behaves exactly like the previous one.\n\n::\n\n    schedule:\n    - { temp: 21.5, start: \"07:00\", end: \"22:00\" }\n    - { temp: 16,   start: \"00:00\", end: \"00:00\", end_plus_days: 1 }\n\nNote how each rule has been rewritten to take just a single line.\nThis is no special feature of Heaty, it's rather normal YAML. But\nwriting rules this way is often more readable, especially if you\nneed to create multiple similar ones which, for instance, only\ndiffer in weekdays, time or temperature.\n\nNow we have covered the basics, but we can't create schedules based\non, for instance, the days of the week. Let's do that next.\n\nConstraints\n~~~~~~~~~~~\n\n::\n\n    schedule:\n    - temp: 22\n      weekdays: 1-5\n      start: \"07:00\"\n      end: \"22:00\"\n\n    - temp: 22\n      weekdays: 6,7\n      start: \"07:45\"\n\n    - temp: 15\n\nWith your knowledge so far, this should be self-explanatory. The only\nnew parameter is ``weekdays``, which is a so called constraint.\n\nConstraints can be used to limit the days on which the rule is\nconsidered. There are a number of these constraints, namely:\n\n* ``years``: limit the years (e.g. ``years: 2016 - 2018``\n* ``months``: limit based on months of the year (e.g.\n  ``months: 1-3, 10-12`` for Jan, Feb, Mar, Oct, Nov and Dec)\n* ``days``: limit based on days of the month (e.g.\n  ``days: 1-15, 22`` for the first half of the month + the 22nd)\n* ``weeks``: limit based on the weeks of the year\n* ``weekdays``: limit based on the days of the week, from 1 (Monday)\n  to 7 (Sunday)\n\nThe format used to specify values for constraints is as follows.\nWe call it range strings, and only integers are supported, no\ndecimal values.\n\n* ``x-y``: range of numbers from ``x`` to ``y``, including ``x``\n  and ``y``\n* ``a,b``: numbers ``a`` and ``b``\n* ``a,b,x-y``: the previous two together\n* ... and so on\n* Any spaces are ignored.\n\nAll constraints you define need to be fulfilled for the rule to match.\n\nWith this knowledge, writing quite powerful Heaty schedules should be\neasy and quick.\n\nThe next chapter deals with temperature expressions, which finally\ngive you the power to do whatever you can do with Python, right inside\nyour schedules.\n\n\nTemperature Expressions\n-----------------------\n\nHeaty accepts so called temperature expressions in schedules or when\nmanually setting a temperature via the ``heaty_set_temp`` event.\n\nTemperature expressions are a powerful way of expressing a temperature\nin relation to anything you can think of. This power comes from the fact\nthat temperature expressions are just normal Python expressions which\nare evaluated at runtime. When Heaty parses its configuration, all\ntemperature expressions are pre-compiled to make their later evaluation\nmore performant.\n\nTemperature expressions must evaluate to an object of type\n``ResultBase``. However, you should always return one of its sub-types.\n\nSuch an object can be created like ``Result(19)`` or ``Result(OFF)``.\nIf your expression evaluates to an ``int``, ``float`` or ``str`` type,\nHeaty converts it to a ``Result`` automatically for convenience.\n\nAn object of one of the following sub-types of ``ResultBase`` can be\nreturned to influence the way your result is treated.\n\n* ``Add(value)``, which causes ``value`` to be added to the result of\n  a consequent rule. This is continued until a rule evaluates to a\n  final ``Result``.\n* ``Break()``, which causes schedule lookup to be aborted immediately.\n  The temperature will not be changed in this case.\n* ``Ignore()``, which causes the rule to be treated as if it doesn't\n  exist at all. If one exists, the next rule is evaluated in this case.\n* ``Result(value)``: just the final result which will be used as the\n  temperature. Schedule lookup is aborted at this point.\n\nIf you want to turn the thermostats in a room off, there is a special\nvalue available under the name ``OFF``. Just return that.\n\nThere is an object available under the name ``app`` which represents\nthe ``appdaemon.appapi.AppDaemon`` object of Heaty. You could,\nfor instance, retrieve values of input sliders via the normal\nAppDaemon API.\n\nBeside the return types like ``Add``, ``Break``, ``Ignore`` and\n``Result``, the following global variables are available inside\ntime expressions:\n\n* ``app``: the appdaemon.appapi.AppDaemon object\n* ``room_name``: the name of the room the expression is evaluated for\n  as configured in Heaty's configuration (not the friendly name)\n* ``now``: a ``datetime.datetime`` object containing the current date\n  and time\n* ``date``: a shortcut for ``now.date()``\n* ``time``: a shortcut for ``now.time()``\n* ``datetime``: Python's ``datetime`` module\n\nUsing code from custom modules\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can easily make your own code available inside temperature\nexpressions by importing custom modules. Modules that should be\navailable in your expressions have to be specified in the configuration\nlike so:\n\n::\n\n    temp_expression_modules:\n      math:\n      time:\n        as: _time\n      my_custom_module:\n\nThis will make the modules ``math`` and ``time`` from Python's standard\nlibrary available, as well as ``my_custom_module``. However, the\n``time`` module will be made accessible under the name ``_time`` to\nprevent the variable ``time``, which is included by Heaty anyway, from\nbeing overwritten.\n\nExample: Use of an external module\n~~~~~~~===========================\n\nImagine you have a module which makes some more complex decisions\nbased on the current state. We call it ``my_mod``. This could look\nas follows:\n\n::\n\n    # This module gives us access to Ignore as well as all other\n    # ResultBase sub-types and OFF.\n    from hass_heaty import expr\n\n    def get_temp(room_name, app):\n        if room_name == \"bath\":\n            if app.get_state(\"switch.take_a_bath\") == \"on\":\n                return 22\n        return expr.Ignore()\n\nSave the code as ``my_mod.py`` somewhere Python can find it.\nThe easiest way is to store it inside AppDaemon's ``apps`` directory.\n\nAdd the module to your ``temp_expression_modules`` config as\nexplained before.\n\nNow, we write two new schedule rules for the bath room (note their\norder):\n\n::\n\n    schedule:\n    - temp: my_mod.get_temp(room_name, app)\n    - temp: 19\n\nLast step is to write a simple Home Assistant automation to emit a\nre-schedule event whenever the state of ``switch.take_a_bath`` changes.\n\n::\n\n    - alias: \"Re-schedule when switch.take_a_bath is toggled\"\n      trigger:\n      - platform: state\n        entity_id: switch.take_a_bath\n      action:\n      - event: heaty_reschedule\n        event_data:\n          room_name: bath\n\nWe're done! Now, whenever we toggle the ``take_a_bath`` switch, the\nschedules are re-evaluated and our first schedule rule executes.\nThe rule invokes our custom function, passing to it the room's name\nand the ``appdaemon.appapi.AppDaemon`` object. Our custom function\nchecks the state of the ``take_a_bath`` switch and, if it's enabled,\ncauses the temperature to be set to 22 degrees. However, if the switch\nis off or we called it for a room it actually has no clue about,\nthe rule is ignored completely.\n\nIf that happens, the second rule is processed, which always evaluates\nto 19 degrees.\n\nYou should be able to extend the ``get_temp`` function to include\nfunctionality for other rooms now as well.\n\nExample: Inlining temperature expressions into schedules\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis example demonstrated how custom modules can be used in schedules.\nHowever, for such a simple use case, there is a much shorter way of\nachieving the same goal. The following schedule will have the same\neffect, but without the use of any external Python module:\n\n::\n\n    schedule:\n    - temp: 22 if app.get_state(\"switch.take_a_bath\") == \"on\" else Ignore()\n    - temp: 19\n\nBasically, we inlined the Python code we previously placed in\n``my_mod.py`` right into the schedule rule. This works because it is\njust an ordinary expression and not a series of statements. If you know\na little Python, you'll probably be familiar with this way of writing\nexpressions. Often, it is easier and also more readable to include such\nshort ones directly into the rule instead of calling external code.\n\nExample: Use of ``Add()`` and ``Ignore()``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis is a rule I use in my own Heaty configuration at home:\n\n::\n\n    schedule_prepend:\n    - temp: Add(-3) if app.get_state(\"input_boolean.absent\") == \"on\" else Ignore()\n\nWhat does this? Well, the first thing we see is that the rule is placed\ninside the ``schedule_prepend`` section. That means, it is valid for\nevery room and always the first rule being evaluated.\n\nI've defined an ``input_boolean`` called ``absent`` in Home Assistant.\nWhenever I leave the house, this gets enabled. If I return, it's turned\noff again. In order for Heaty to notice the toggling, I added an\nautomation to Home Assistant which fires a ``heaty_reschedule`` event.\nHow that can be done has already been shown above.\n\nNow let's get back to the schedule rule. If it evaluates, it checks the\nstate of ``input_boolean.absent``. If the switch is turned on, it\nevaluates to ``Add(-3)``, otherwise to ``Ignore()``.\n\n``Add(-3)`` is no final temperature yet. Think of it as a temporary\nvalue that is remembered and used later.\n\nNow, my regular schedule starts being evaluated, which, of course, is\ndifferent for every room. Rules are evaluated just as normal. If one\nreturns a ``Result``, that is used as the temperature and evaluation\nstops. But wait, there was the ``Add(-3)``, wasn't it? Sure it was.\nHence ``-3`` is now added to the final result.\n\nWith this minimal configuration effort, I added an useful away-mode\nwhich throttles all thermostats in the house as soon as I leave.\n\nThink of a device tracker that is able to report the distance between\nyou and your home. Having such one set up, you could even implement\ndynamic throttling that slowly decreases as you near with almost zero\nconfiguration.\n\nExample: What to use ``Break()`` for\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``Break`` return type is most useful for disabling Heaty's\nscheduling mechanism depending on the state of entities. You might\nimplement a schedule on/off switch with it, like so:\n\n::\n\n    schedule_prepend:\n    - temp: Break() if app.get_state(\"input_boolean.heating_schedule\") == \"off\" else Ignore()\n\nSecurity considerations\n~~~~~~~~~~~~~~~~~~~~~~~\n\nIt has to be noted that temperature expressions are evaluated using\nPython's ``eval()`` function. In general, this is not suited for code\noriginating from a source you don't trust completely, because such code\ncan potentially execute arbitrary commands on your system with the same\npermissions and capabilities the AppDaemon process itself has.\nThat shouldn't be a problem for temperature expressions you write\nyourself inside schedules.\n\nThis feature could however become problematic if an attacker somehow\nis able to emit events on your Home Assistant's event bus. To prevent\ntemperature expressions from being accepted in the ``heaty_set_temp``\nevent, processing of such expressions is disabled by default and has\nto be enabled explicitly by setting ``untrusted_temp_expressions: true``\nin your Heaty configuration.\n\n\nEvents\n------\n\nHeaty introduces two new events it listens to:\n\n* ``heaty_reschedule``: Trigger a re-scheduling of the temperature.\n  Parameters are:\n\n  * ``room_name``: the name of the room to re-schedule as defined in Heaty's configuration (not the ``friendly_name``) (optional, default: ``null``, which means all rooms)\n\n* ``heaty_set_temp``: Sets a given temperature in a room.\n  Parameters are:\n\n  * ``room_name``: the name of the room as defined in Heaty's configuration (not the ``friendly_name``)\n  * ``temp``: a temperature expression\n  * ``force_resend``: whether to re-send the temperature to the thermostats even if it hasn't changed due to Heaty's records (optional, default: ``false``)\n  * ``reschedule_delay``: a number of minutes after which Heaty should automatically switch back to the schedule (optional, default: the ``reschedule_delay`` set in Heaty's configuration for the particular room)\n\nYou can emit these events from your custom Home Assistant automations\nor scripts in order to control Heaty's behaviour.\n\nThis is an example Home Assistant script that turns the heating in the\nroom named ``living`` to ``25.0`` degrees and switches back to the\nregular schedule after one hour:\n\n::\n\n    - alias: Hot for one hour\n      sequence:\n      - event: heaty_set_temp\n        event_data:\n          room_name: living\n          temp: 25.0\n          reschedule_delay: 60\n\n\nUsing Heaty without schedules\n-----------------------------\n\nSchedules are not mandatory when using Heaty. It is perfectly valid to\nuse Heaty just for controlling temperatures in rooms manually while\nstill benefitting from other features like the open window detection.\n\nTo do so, just leave out everything that is related to schedules in\nyour ``apps.yaml``.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/efficiosoft/hass-heaty",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "hass_heaty",
    "platform": "",
    "project_url": "https://pypi.org/project/hass_heaty/",
    "release_url": "https://pypi.org/project/hass_heaty/0.8.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A highly-configurable, comfortable to use HomeAssistant / appdaemon app that controls thermostats based on a schedule while facilitating manual intervention at any time.",
    "version": "0.8.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ce4e076d41bca6e0c986f3954de1042e",
          "sha256": "d1975885ea13ec832f29ee42fa3a1e85582e9668df238a08deb86ff08a4602a1"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ce4e076d41bca6e0c986f3954de1042e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3911,
        "upload_time": "2017-12-04T11:04:54",
        "url": "https://files.pythonhosted.org/packages/fa/ee/c87ce9a0510ffd47beba4b9d218d535c0c2e587ee75ca859f04c33483784/hass_heaty-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0bf6c4b1b033585e8dcab6e9c0b58f19",
          "sha256": "e4f4121173aaa5a20029475f2fb4a77d0ff97b4a4a5e712adb555529a043086c"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0bf6c4b1b033585e8dcab6e9c0b58f19",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4294,
        "upload_time": "2017-12-06T12:09:31",
        "url": "https://files.pythonhosted.org/packages/95/10/dfbd04787f586a0f963691f4e6241982f8fcbcc96d8914ae11214692f0e8/hass_heaty-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c5ea48693ac54deeb4e4485953550c9a",
          "sha256": "f4dd92761305a570b4da88caa42e53a295364d3160dac62219921c1ff3dd10ef"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c5ea48693ac54deeb4e4485953550c9a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4766,
        "upload_time": "2017-12-07T11:21:14",
        "url": "https://files.pythonhosted.org/packages/fd/11/9fcb241352f92de4d9e74f7c179c72ddafa32c18f86b8361d886ab86b1b5/hass_heaty-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e84e90374027b5b6e1932d3977e87b3e",
          "sha256": "966653a9433d97996f591c45827d87c5c826488e36d969376e72aad622e8a5dc"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e84e90374027b5b6e1932d3977e87b3e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5065,
        "upload_time": "2017-12-07T11:50:53",
        "url": "https://files.pythonhosted.org/packages/ad/3b/6c44564143891a16a59fa090ad3cfe6eee11c2c904b4ea7d6b99f143ef38/hass_heaty-0.1.3.tar.gz"
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "331ac943eae823e396eb037ce4135ee8",
          "sha256": "63593341b0bffbd85c2272dab52548d144b12cf1ef147c034a8bac27497b634c"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "331ac943eae823e396eb037ce4135ee8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6129,
        "upload_time": "2017-12-07T15:56:12",
        "url": "https://files.pythonhosted.org/packages/a7/0e/4b0d738c526c80f96aa8f8330cb19e9e85bfe14ded5a182e36f0e54feda8/hass_heaty-0.1.4.tar.gz"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bdd679ec091efc0852b897612c774780",
          "sha256": "0a1232c6c6a99c3c88f87205eef5665cdecb46221651e255ec0100692b3f7868"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "bdd679ec091efc0852b897612c774780",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6261,
        "upload_time": "2017-12-07T16:43:45",
        "url": "https://files.pythonhosted.org/packages/eb/18/aa6175b44f3abc69d9405f69df6d7beca1638a51b6b3cea59315b4bd3542/hass_heaty-0.1.5.tar.gz"
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ef6279de71d7139b4356dcd83772bacd",
          "sha256": "b63cacbddad05647ee1794fd4d6f0285bd598bdf9d5bb75b4fe18194f131ef9c"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "ef6279de71d7139b4356dcd83772bacd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6621,
        "upload_time": "2017-12-08T09:25:11",
        "url": "https://files.pythonhosted.org/packages/0f/a0/4a1f94d27c41ba8817f3da9811aef655ac0378a1c45b2aabdb2088e0a4e9/hass_heaty-0.1.6.tar.gz"
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f6f48cbe8376b69f58a2d8f4ec0632f4",
          "sha256": "9494eda20f8e90446d2a89306de69d65bd509b293bc86176396e69141cbe97b8"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f6f48cbe8376b69f58a2d8f4ec0632f4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8020,
        "upload_time": "2017-12-08T17:24:29",
        "url": "https://files.pythonhosted.org/packages/52/9a/5ac3ec108843dbdd4dd37b30c089dc0e1cc6b032c3a27037c238e8efa2ee/hass_heaty-0.1.7.tar.gz"
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "69c246d1e240afdb2613843e04bbdb4f",
          "sha256": "04eff7befa8e837ea70ebc1a140f90b84468ff08cc667b2500767527267243a9"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "69c246d1e240afdb2613843e04bbdb4f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8053,
        "upload_time": "2017-12-08T21:21:26",
        "url": "https://files.pythonhosted.org/packages/7d/2b/83227a390f1b1d21a11f1ee74c2074b262f7e2b475eecc25b52a5dc34b6a/hass_heaty-0.1.8.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a417d847bae80f962bab53d13e4aac11",
          "sha256": "1e9b14cddfbd58abf3e8733168cc77cac72fbbcf7c3ed688c2aff7d87ff8ad99"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a417d847bae80f962bab53d13e4aac11",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8476,
        "upload_time": "2017-12-09T10:46:49",
        "url": "https://files.pythonhosted.org/packages/52/cd/b1629b9d40b092e7c8348b0b255ecb80db5e03cfc012c94eecc7e0a20086/hass_heaty-0.2.0.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "30c9938a7185281bbbe8982776b2ede7",
          "sha256": "2b74a9abd407039d234496d43947462dade7ccb1866fd5cd228a33f5413dd983"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "30c9938a7185281bbbe8982776b2ede7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10213,
        "upload_time": "2017-12-10T08:50:48",
        "url": "https://files.pythonhosted.org/packages/ef/c7/0fe49b984ebc9b79bdfbe06f5542d7b1d17ba4f051d57f30f68173b91986/hass_heaty-0.3.0.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9365da955325fbf78d73fa2d92c4d42c",
          "sha256": "594a0ffe0e7e0c6b0234fee7c8db1d3e309bd043afa2b2735c17fd620bf34492"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9365da955325fbf78d73fa2d92c4d42c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10066,
        "upload_time": "2017-12-10T09:01:53",
        "url": "https://files.pythonhosted.org/packages/e6/12/bbcdb773466bae8b81de961decefdd1ae06033703baa3632470cfc5517da/hass_heaty-0.3.1.tar.gz"
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "705b4d53b30a7ebd5ad9e7fce563b4e2",
          "sha256": "7421eca652f13706bbfac7beac83dd31475475f92c8a89f779be025aa9655185"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "705b4d53b30a7ebd5ad9e7fce563b4e2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12809,
        "upload_time": "2017-12-10T14:53:47",
        "url": "https://files.pythonhosted.org/packages/fa/08/cca070e25ae30445826cfcdc01e5d79b6c7f2d3499ec30ce8bba28fa2d5f/hass_heaty-0.3.2.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5aafb9b146445d71a2b03adb0d535caa",
          "sha256": "865ee6ac297438c09ba01672cf0d7f29ceb41b3ffeab2f3d36ce9125a08010c1"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5aafb9b146445d71a2b03adb0d535caa",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17971,
        "upload_time": "2017-12-11T18:23:52",
        "url": "https://files.pythonhosted.org/packages/e3/a6/dc5bf3f026d07b2f62d0c71d1c2473fe456171630d29c1170058fd40c7f1/hass_heaty-0.4.0.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3076bf81070580119ebce144628ef2da",
          "sha256": "9e0698ea635bba720a6c837fa6f642f67c468f295e06f19969666d7cb794e11e"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3076bf81070580119ebce144628ef2da",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18584,
        "upload_time": "2017-12-12T10:17:31",
        "url": "https://files.pythonhosted.org/packages/7d/7a/40b6d18f73a471b791958a58861a5beb725ccd81db0a779b6459987764f3/hass_heaty-0.5.0.tar.gz"
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f1e6637bfb13c0b17242da5c5875bcbc",
          "sha256": "d537a447345db4de02acfe7c9beb95ea80f715470aeac111d3376c0721975318"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f1e6637bfb13c0b17242da5c5875bcbc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22300,
        "upload_time": "2017-12-15T08:40:15",
        "url": "https://files.pythonhosted.org/packages/bd/17/d768a59bb168b28344d1ce2aed763b6140f42c02c8d2f780613414c92f29/hass_heaty-0.6.0.tar.gz"
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fa67ae4df4f072f363429d47040db741",
          "sha256": "8219e1e8c09ee968baa7d23c75f7f0d4933d0c31f5fccef10056ba8eea7049b6"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fa67ae4df4f072f363429d47040db741",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22907,
        "upload_time": "2017-12-19T08:31:28",
        "url": "https://files.pythonhosted.org/packages/23/e8/5022c0bdac8974ad95b37c56fe00bb17923eebcc3372f22791c533cc207a/hass_heaty-0.7.0.tar.gz"
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2553a343873dab22ff56f1001a521279",
          "sha256": "734d865aab0e383b8b1e9cc217c48716b9e9ef1af75daac0d982a0cf82db1dd8"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "2553a343873dab22ff56f1001a521279",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23117,
        "upload_time": "2017-12-19T10:29:13",
        "url": "https://files.pythonhosted.org/packages/49/54/194bd1b63390c2fad46b59f069a6a924895b8996c1b523c9aeae7d88a056/hass_heaty-0.7.1.tar.gz"
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cb6ca2870b8dfaf3035f685dd934b589",
          "sha256": "b778bb19f0745187e56b653753f73a90c00dd05336c5283fc25903008418a6ff"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "cb6ca2870b8dfaf3035f685dd934b589",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23168,
        "upload_time": "2017-12-19T12:50:26",
        "url": "https://files.pythonhosted.org/packages/f1/71/12be63d67e2f9bf0d0b9b35b180a845e5079662caef0ba9d5e5de307eb99/hass_heaty-0.7.2.tar.gz"
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c722ac4d96adc9689c0456f1455b0cdf",
          "sha256": "1d7f6d8141351118478da1db2b891d2dc4429db1d527051b481fd637468d7055"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c722ac4d96adc9689c0456f1455b0cdf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23233,
        "upload_time": "2017-12-19T21:08:36",
        "url": "https://files.pythonhosted.org/packages/76/ae/ce238d2d5b3fbfa6d3a33050fbff2a05217f69e0427fa873e8eb5dc30d48/hass_heaty-0.7.3.tar.gz"
      }
    ],
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c26f9fe503e593fa6c2bff2ef14fbbe8",
          "sha256": "948e480280f0d1ba220a68daede65ec236e87f0aec2fd4d32fe274eb8ed49391"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.7.4.tar.gz",
        "has_sig": false,
        "md5_digest": "c26f9fe503e593fa6c2bff2ef14fbbe8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23214,
        "upload_time": "2017-12-20T16:48:25",
        "url": "https://files.pythonhosted.org/packages/19/ac/ecb2e910a50a0f5e411a599e139606ffefafb879728c4b7a328c799b7579/hass_heaty-0.7.4.tar.gz"
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c2f34f0c50eb1a3e270530d3fd2f2352",
          "sha256": "25e748b680e5577cc32b348fffe3809eddd87a397f0546313f19bbeafb8cb660"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c2f34f0c50eb1a3e270530d3fd2f2352",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24588,
        "upload_time": "2017-12-22T10:33:17",
        "url": "https://files.pythonhosted.org/packages/c3/ec/9fad5fab07e5d67b0cff0dc35f5b56d167eb109fdb1186b59469c1f4ecf4/hass_heaty-0.8.0.tar.gz"
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a8f1c90a4a7ace7dec6dacaf5d9c5ebe",
          "sha256": "ece3edfffac70bbadbc37da22b651bd4f0b92be9a79646d3c6fe2dcd385381b6"
        },
        "downloads": -1,
        "filename": "hass_heaty-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a8f1c90a4a7ace7dec6dacaf5d9c5ebe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24593,
        "upload_time": "2017-12-28T08:45:43",
        "url": "https://files.pythonhosted.org/packages/c2/06/749f19b859e32e151e61163d70d9e6b17fdda2008bc581addf5e7aad87ca/hass_heaty-0.8.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a8f1c90a4a7ace7dec6dacaf5d9c5ebe",
        "sha256": "ece3edfffac70bbadbc37da22b651bd4f0b92be9a79646d3c6fe2dcd385381b6"
      },
      "downloads": -1,
      "filename": "hass_heaty-0.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a8f1c90a4a7ace7dec6dacaf5d9c5ebe",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 24593,
      "upload_time": "2017-12-28T08:45:43",
      "url": "https://files.pythonhosted.org/packages/c2/06/749f19b859e32e151e61163d70d9e6b17fdda2008bc581addf5e7aad87ca/hass_heaty-0.8.1.tar.gz"
    }
  ]
}