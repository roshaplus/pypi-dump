{
  "info": {
    "author": "David Craven",
    "author_email": "david@craven.ch",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# Circuit Description Library\n\nAttempts to make designing and building electronics easy and fun by\nmaking design reuse and collaboration simple and making design intent\nexplicit.\n\nIt's guiding principles are code is the best documentation and GUI's\nare stupid.\n\n## Devices\n\n```python\nfrom pycircuit.device import *\n\nDevice('MCU',\n       Pin('GND'),\n       Pin('VCC'),\n       Pin('XTAL_XI', Bus('XTAL', 'XI')),\n       Pin('XTAL_XO', Bus('XTAL', 'XO')),\n       Pin('JTAG_TCK', Bus('JTAG', 'TCK')),\n       Pin('JTAG_TDO', Bus('JTAG', 'TDO')),\n       Pin('JTAG_TMS', Bus('JTAG', 'TMS')),\n       Pin('JTAG_TDI', Bus('JTAG', 'TDI')),\n       Pin('GPIO_1', 'GPIO', Bus('UART1', 'UART', 'TX')),\n       Pin('GPIO_2', 'GPIO', Bus('UART1', 'UART', 'RX')),\n       Pin('GPIO_3', 'GPIO'),\n       Pin('GPIO_4', 'GPIO'),\n       Pin('GPIO_5', 'GPIO', Bus('UART2', 'UART', 'TX')),\n       Pin('GPIO_6', 'GPIO', Bus('UART2', 'UART', 'RX')),\n       Pin('GPIO_7', 'GPIO'))\n```\n\n## Packages\n\n```python\nfrom pycircuit.package import *\n\nPackage('0805', IPCGrid(4, 8), TwoPads(1.9),\n        package_size=(1.4, 2.15), pad_size=(1.5, 1.3))\n\nPackage('QFN16', RectCrtyd(5.3, 5.3), QuadPads(16, pitch=0.65, radius=2, thermal_pad=2.5),\n        package_size=(5, 5), pad_size=(0.35, 0.8))\n```\n\n## Footprints\n\n```python\nfrom pycircuit.footprint import *\n\nFootprint('MCUQFN16', 'MCU', 'QFN16',\n          Map(1, 'GPIO_1'),\n          Map(2, 'GPIO_2'),\n          Map(3, 'GPIO_3'),\n          Map(4, 'GPIO_4'),\n          Map(5, 'VCC'),\n          Map(6, 'GND'),\n          Map(7, 'GPIO_5'),\n          Map(8, 'GPIO_6'),\n          Map(9, 'XTAL_XI'),\n          Map(10, 'XTAL_XO'),\n          Map(11, 'GPIO_7'),\n          Map(12, 'JTAG_TCK'),\n          Map(13, 'JTAG_TDO'),\n          Map(14, 'JTAG_TMS'),\n          Map(15, 'JTAG_TDI'),\n          Map(17, 'GND'))\n```\n\n## Circuits\n\n```python\nfrom pycircuit.circuit import *\n\n@circuit('LED')\ndef led():\n    Node('Rs', 'R')\n    Node('LED', 'D')\n\n    Net('IN') + Ref('Rs')['~']\n    Ref('Rs')['~'] + Ref('LED')['A']\n    Ref('LED')['K'] + Net('GND')\n\n@circuit('RGB')\ndef rgb():\n    Sub('RED', led())\n    Sub('GREEN', led())\n    Sub('BLUE', led())\n\n    for net in ['RED', 'GREEN', 'BLUE']:\n        Net(net) + Ref(net)['IN']\n        Net('GND') + Refs()['GND']\n\n@circuit('TOP')\ndef top():\n    Node('BAT1', 'BAT')\n    Node('OSC1', 'XTAL')\n    Node('MCU1', 'MCU')\n    Sub('RGB1', rgb())\n\n    Net('VCC') + Refs()['VCC']\n    Net('GND') + Refs()['GND']\n    Ref('MCU1')['XTAL'] + Ref('OSC1')['XTAL']\n    Ref('MCU1')['UART']['RX', 'TX'] + Ref('MCU1')['UART']['TX', 'RX']\n    Ref('MCU1')['GPIO'] + Ref('RGB1')['RED', 'GREEN', 'BLUE']\n```\n\n## Assign footprints\n\n```python\nfrom pycircuit.pcb import *\n\ncircuit = top()\n\n# Set footprints\nfor node in circuit.nodes_by_device('R'):\n    node.set_footprint('R0805')\n\nfor node in circuit.nodes_by_device('D'):\n    node.set_footprint('D0805')\n\ncircuit.node_by_name('OSC1').set_footprint('OSC0805')\ncircuit.node_by_name('BAT1').set_footprint('BAT0805')\n\nmcu1 = circuit.node_by_name('MCU1')\nmcu1.set_footprint('MCUQFN16')\n```\n\n## Place\n\n```python\ni = 0\nfor node in circuit.iter_nodes():\n    if node.footprint.package.name == '0805':\n        node.place(i * 5, 0, 90)\n        i += 1\n\nmcu1.place(10, 10)\nmcu1.flip()\n\n# Show some statistics\nbat = circuit.node_by_name('BAT1')\nprint('MCU1 area:', mcu1.area())\nprint('BAT1 area:', bat.area())\nprint('MCU1 intersects itself:', mcu1.intersects(mcu1))\nprint('MCU1 intersects BAT1:', mcu1.intersects(bat))\n\nfor net in circuit.iter_nets():\n    print('net', net.name, net.half_perimeter_length())\n```\n\n## Route\n\n```python\npcb = Pcb(circuit)\npcb.move_to('BAT1', '1')\ndist = pcb.distance('MCU1', '5')\npcb.segment(dy=dist[1])\npcb.via()\npcb.segment_to('MCU1', '5')\n\n# Print some more statistics\nprint(pcb.net.length())\n```\n\n## Export\n\n```python\nfrom pycircuit.export import *\n\n# Export circuit to graph\nexport_circuit_to_graphviz(circuit)\n# Export pcb to svg\nexport_pcb_to_svg(pcb)\n\n# Convert pcb to kicad\nkpcb = pcb_to_kicad(pcb)\n# Use pykicad to postprocess the pcb\n# Save pcb to file\nexport_pcb(kpcb)\n```\n\n![Graphviz](https://user-images.githubusercontent.com/741807/28041534-23b27852-65ca-11e7-8851-18986616fd96.png)\n![SVG](https://user-images.githubusercontent.com/741807/28041535-23b34174-65ca-11e7-8c1d-6b5c36cbc390.png)\n![KiCad](https://user-images.githubusercontent.com/741807/28041533-23af0726-65ca-11e7-8759-b010181a5372.png)\n\n\n# License\nISC License\n\nCopyright (c) 2017, David Craven\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\nOR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/dvc94ch/pycircuit",
    "keywords": "eda,cad,hdl,kicad",
    "license": "ISC",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pycircuit",
    "platform": "",
    "project_url": "https://pypi.org/project/pycircuit/",
    "release_url": "https://pypi.org/project/pycircuit/0.0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Library for composing circuits and pcb layouts",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "58df9400f65d0fcd0a6632ee47e5e1b9",
          "sha256": "e4ace2ceb27073893ba78050edfc1d2a325400b7c5d270da5a36bf4b481f30bf"
        },
        "downloads": 0,
        "filename": "pycircuit-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "58df9400f65d0fcd0a6632ee47e5e1b9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18980,
        "upload_time": "2017-07-10T22:03:06",
        "url": "https://files.pythonhosted.org/packages/58/b3/2820f2ab9b684814c286a24f63f0f3028f115baef71575beacab5254ec3f/pycircuit-0.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "58df9400f65d0fcd0a6632ee47e5e1b9",
        "sha256": "e4ace2ceb27073893ba78050edfc1d2a325400b7c5d270da5a36bf4b481f30bf"
      },
      "downloads": 0,
      "filename": "pycircuit-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "58df9400f65d0fcd0a6632ee47e5e1b9",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 18980,
      "upload_time": "2017-07-10T22:03:06",
      "url": "https://files.pythonhosted.org/packages/58/b3/2820f2ab9b684814c286a24f63f0f3028f115baef71575beacab5254ec3f/pycircuit-0.0.1.tar.gz"
    }
  ]
}