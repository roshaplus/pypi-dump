{
  "info": {
    "author": "Open Knowledge Foundation",
    "author_email": "info@okfn.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "tableschema-pandas-py\n=====================\n\n| |Travis|\n| |Coveralls|\n| |PyPi|\n| |Gitter|\n\nGenerate and load Pandas data frames `Table\nSchema <http://specs.frictionlessdata.io/table-schema/>`__ descriptors.\n\nFeatures\n--------\n\n-  implements ``tableschema.Storage`` interface\n\nGetting Started\n---------------\n\nInstallation\n~~~~~~~~~~~~\n\nThe package use semantic versioning. It means that major versions could\ninclude breaking changes. It's highly recommended to specify ``package``\nversion range in your ``setup/requirements`` file e.g.\n``package>=1.0,<2.0``.\n\n::\n\n    $ pip install tableschema-pandas\n\nExample\n~~~~~~~\n\nCode examples in this readme requires Python 3.3+ interpreter. You could\nsee even more example in\n`examples <https://github.com/frictionlessdata/tableschema-pandas-py/tree/master/examples>`__\ndirectory.\n\nYou can easily load resources from a data package as Pandas data frames\nby simply using ``datapackage.push_datapackage`` function:\n\n.. code:: python\n\n    >>> import datapackage\n\n    >>> data_url = 'http://data.okfn.org/data/core/country-list/datapackage.json'\n    >>> storage = datapackage.push_datapackage(data_url, 'pandas')\n\n    >>> storage.buckets\n    ['data___data']\n\n    >>> type(storage['data___data'])\n    <class 'pandas.core.frame.DataFrame'>\n\n    >>> storage['data___data'].head()\n                 Name Code\n    0     Afghanistan   AF\n    1   \u00c5land Islands   AX\n    2         Albania   AL\n    3         Algeria   DZ\n    4  American Samoa   AS\n\nAlso it is possible to pull your existing data frame into a data\npackage:\n\n.. code:: python\n\n    >>> datapackage.pull_datapackage('/tmp/datapackage.json', 'country_list', 'pandas', tables={\n    ...     'data': storage['data___data'],\n    ... })\n    Storage\n\nDocumentation\n-------------\n\nThe whole public API of this package is described here and follows\nsemantic versioning rules. Everyting outside of this readme are private\nAPI and could be changed without any notification on any new version.\n\nStorage\n~~~~~~~\n\nPackage implements `Tabular\nStorage <https://github.com/frictionlessdata/tableschema-py#storage>`__\ninterface (see full documentation on the link):\n\n|Storage|\n\nThis driver provides an additional API:\n\n``Storage(dataframes=[])``\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n-  ``dataframes (object[])`` - list of storage dataframes\n\nWe can get storage this way:\n\n.. code:: python\n\n    >>> from tableschema_pandas import Storage\n\n    >>> storage = Storage()\n\nStorage works as a container for Pandas data frames. You can define new\ndata frame inside storage using ``storage.create`` method:\n\n.. code:: python\n\n    >>> storage.create('data', {\n    ...     'primaryKey': 'id',\n    ...     'fields': [\n    ...         {'name': 'id', 'type': 'integer'},\n    ...         {'name': 'comment', 'type': 'string'},\n    ...     ]\n    ... })\n\n    >>> storage.buckets\n    ['data']\n\n    >>> storage['data'].shape\n    (0, 0)\n\nUse ``storage.write`` to populate data frame with data:\n\n.. code:: python\n\n    >>> storage.write('data', [(1, 'a'), (2, 'b')])\n\n    >>> storage['data']\n    id comment\n    1        a\n    2        b\n\nAlso you can use\n`tabulator <https://github.com/frictionlessdata/tabulator-py>`__ to\npopulate data frame from external data file. As you see, subsequent\nwrites simply appends new data on top of existing ones:\n\n.. code:: python\n\n    >>> import tabulator\n\n    >>> with tabulator.Stream('data/comments.csv', headers=1) as stream:\n    ...     storage.write('data', stream)\n\n    >>> storage['data']\n    id comment\n    1        a\n    2        b\n    1     good\n\nContributing\n------------\n\nThe project follows the `Open Knowledge International coding\nstandards <https://github.com/okfn/coding-standards>`__.\n\n| Recommended way to get started is to create and activate a project\nvirtual environment.\n| To install package and development dependencies into active\nenvironment:\n\n::\n\n    $ make install\n\nTo run tests with linting and coverage:\n\n.. code:: bash\n\n    $ make test\n\n| For linting ``pylama`` configured in ``pylama.ini`` is used. On this\nstage it's already\n| installed into your environment and could be used separately with more\nfine-grained control\n| as described in documentation -\nhttps://pylama.readthedocs.io/en/latest/.\n\nFor example to sort results by error type:\n\n.. code:: bash\n\n    $ pylama --sort <path>\n\n| For testing ``tox`` configured in ``tox.ini`` is used.\n| It's already installed into your environment and could be used\nseparately with more fine-grained control as described in documentation\n- https://testrun.org/tox/latest/.\n\n| For example to check subset of tests against Python 2 environment with\nincreased verbosity.\n| All positional arguments and options after ``--`` will be passed to\n``py.test``:\n\n.. code:: bash\n\n    tox -e py27 -- -v tests/<path>\n\n| Under the hood ``tox`` uses ``pytest`` configured in ``pytest.ini``,\n``coverage``\n| and ``mock`` packages. This packages are available only in tox\nenvionments.\n\nChangelog\n---------\n\nHere described only breaking and the most important changes. The full\nchangelog and documentation for all released versions could be found in\nnicely formatted `commit\nhistory <https://github.com/frictionlessdata/tableschema-pandas-py/commits/master>`__.\n\nv0.x\n~~~~\n\nInitial driver implementation.\n\n.. |Travis| image:: https://img.shields.io/travis/frictionlessdata/tableschema-pandas-py/master.svg\n   :target: https://travis-ci.org/frictionlessdata/tableschema-pandas-py\n.. |Coveralls| image:: http://img.shields.io/coveralls/frictionlessdata/tableschema-pandas-py.svg?branch=master\n   :target: https://coveralls.io/r/frictionlessdata/tableschema-pandas-py?branch=master\n.. |PyPi| image:: https://img.shields.io/pypi/v/tableschema-pandas.svg\n   :target: https://pypi.python.org/pypi/tableschema-pandas\n.. |Gitter| image:: https://img.shields.io/gitter/room/frictionlessdata/chat.svg\n   :target: https://gitter.im/frictionlessdata/chat\n.. |Storage| image:: https://i.imgur.com/RQgrxqp.png\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/frictionlessdata/tableschema-pandas-py",
    "keywords": "frictionless data,datapackage,pandas",
    "license": "LGPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tableschema-pandas",
    "platform": "",
    "project_url": "https://pypi.org/project/tableschema-pandas/",
    "release_url": "https://pypi.org/project/tableschema-pandas/0.6.1/",
    "requires_dist": [
      "tox; extra == 'develop'",
      "pylama; extra == 'develop'",
      "tabulator (>=1.0,<2.0)",
      "tableschema (>=1.0.4,<2.0)",
      "six (>=1.9,<2.0)",
      "pandas (>=0.18,<2.0)",
      "isodate (>=0.5.4,<2.0)"
    ],
    "requires_python": "",
    "summary": "Generate Pandas data frames, load and extract data, based on JSON Table Schema descriptors.",
    "version": "0.6.1"
  },
  "releases": {
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "712e4919a1e93bb61a8de5253d231d4b",
          "sha256": "f9c1a567f2c6c6469c3c5bc9a1db96dd187960ccd528e93720ae0e08b4e28ee3"
        },
        "downloads": 0,
        "filename": "tableschema_pandas-0.6.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "712e4919a1e93bb61a8de5253d231d4b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 11086,
        "upload_time": "2017-09-28T07:40:25",
        "url": "https://files.pythonhosted.org/packages/04/5a/434093806ab1a66db46b4cd3222543693a39173b2ace377da9bb1ead580f/tableschema_pandas-0.6.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "5f2eb920a6e8335f08af3b32ae05b225",
          "sha256": "4d1bfb120146b3313e7187eee16dc305599be4c37e0d571fef8ee12531eed21d"
        },
        "downloads": 0,
        "filename": "tableschema-pandas-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5f2eb920a6e8335f08af3b32ae05b225",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11833,
        "upload_time": "2017-09-28T07:40:27",
        "url": "https://files.pythonhosted.org/packages/3d/54/22d69fc1b60beac80747fa403ba1efad218c4515b60c631461ca3e0c5add/tableschema-pandas-0.6.0.tar.gz"
      }
    ],
    "0.6.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c79f848a65bbdc8529409b08a9df0619",
          "sha256": "b3647d17d8c86ddf6bf70446c8340c33c11757de8a59cee849f2c741dc315090"
        },
        "downloads": 0,
        "filename": "tableschema_pandas-0.6.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c79f848a65bbdc8529409b08a9df0619",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 11272,
        "upload_time": "2017-09-30T18:00:48",
        "url": "https://files.pythonhosted.org/packages/5d/09/1c9595766292a148bc463408e30b55c3e099bb4694be083d685d8c43193c/tableschema_pandas-0.6.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a9fcd7537251b6dd5a911b3149248cbb",
          "sha256": "ee374f86fb2b5f79a2f16961dc049f5985f7ed6e936d3f10fb6804ed0e712a4c"
        },
        "downloads": 0,
        "filename": "tableschema-pandas-0.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a9fcd7537251b6dd5a911b3149248cbb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11956,
        "upload_time": "2017-09-30T18:00:49",
        "url": "https://files.pythonhosted.org/packages/e5/3c/df78f653532e4c4851b32f814e8c79a4a48120b394bd1d97acb4659a5f6e/tableschema-pandas-0.6.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c79f848a65bbdc8529409b08a9df0619",
        "sha256": "b3647d17d8c86ddf6bf70446c8340c33c11757de8a59cee849f2c741dc315090"
      },
      "downloads": 0,
      "filename": "tableschema_pandas-0.6.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c79f848a65bbdc8529409b08a9df0619",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 11272,
      "upload_time": "2017-09-30T18:00:48",
      "url": "https://files.pythonhosted.org/packages/5d/09/1c9595766292a148bc463408e30b55c3e099bb4694be083d685d8c43193c/tableschema_pandas-0.6.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "a9fcd7537251b6dd5a911b3149248cbb",
        "sha256": "ee374f86fb2b5f79a2f16961dc049f5985f7ed6e936d3f10fb6804ed0e712a4c"
      },
      "downloads": 0,
      "filename": "tableschema-pandas-0.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a9fcd7537251b6dd5a911b3149248cbb",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 11956,
      "upload_time": "2017-09-30T18:00:49",
      "url": "https://files.pythonhosted.org/packages/e5/3c/df78f653532e4c4851b32f814e8c79a4a48120b394bd1d97acb4659a5f6e/tableschema-pandas-0.6.1.tar.gz"
    }
  ]
}