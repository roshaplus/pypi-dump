{
  "info": {
    "author": "Jon Wolverton",
    "author_email": "wolverton.jr@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Utilities"
    ],
    "description": "GenSON\n======\n\n**GenSON** is a powerful, user-friendly `JSON Schema`_ generator built in Python.\n\n.. note::\n    This is *not* the Python equivalent of the `Java Genson library`_. If you are coming from Java need to create JSON objects in Python, you want `Python's builtin json library`_.)\n\nGenSON's core function is to take JSON objects and generate schemas that describe them, but it is unique in its ability to *merge* schemas. It was originally built to describe the common structure of a large number of JSON objects, and it uses its merging ability to generate a single schema from any number of JSON objects and/or schemas.\n\nGenSON's schema builder follows these three rules:\n\n1. *Every* object it is given must validate under the generated schema.\n2. *Any* object that is valid under *any* schema it is given must also validate under the generated schema. (there is one glaring exception to this, detailed `below`_)\n3. The generated schema should be as strict as possible given the first 2 rules.\n\n\nJSON Schema Implementation\n--------------------------\n\n**GenSON** is compatible with JSON Schema Draft 4 and above.\n\nIt is important to note that GenSON uses only a subset of JSON Schema's capabilities. This is mainly because it doesn't know the specifics of your data model, and it tries to avoid guessing them. Its purpose is to generate the basic structure so that you can skip the boilerplate and focus on the details of the schema.\n\nCurrently, GenSON only deals with these keywords:\n\n* ``\"$schema\"``\n* ``\"type\"``\n* ``\"items\"``\n* ``\"properties\"``\n* ``\"patternProperties\"``\n* ``\"required\"``\n* ``\"anyOf\"``\n\nYou should be aware that this limited vocabulary could cause GenSON to violate rules 1 and 2. If you feed it schemas with advanced keywords, it will just blindly pass them on to the final schema. Note that ``\"$ref\"`` and ``id`` are also not supported, so GenSON will not dereference linked nodes when building a schema.\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    $ pip install genson\n\n\nCLI Tool\n--------\n\nThe package includes a ``genson`` executable that allows you to access this functionality from the command line. For usage info, run with ``--help``:\n\n.. code-block:: bash\n\n    $ genson --help\n\n.. code-block::\n\n    usage: genson.py [-h] [-d DELIM] [-i SPACES] [-s SCHEMA] [-$ URI] ...\n\n    Generate one, unified JSON Schema from one or more JSON objects and/or JSON\n    Schemas. It's compatible with Draft 4 and above.\n\n    positional arguments:\n      object                files containing JSON objects (defaults to stdin if no\n                            arguments are passed)\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -d DELIM, --delimiter DELIM\n                            set a delimiter - Use this option if the input files\n                            contain multiple JSON objects/schemas. You can pass\n                            any string. A few cases ('newline', 'tab', 'space')\n                            will get converted to a whitespace character. If this\n                            option is omitted, the parser will try to auto-detect\n                            boundaries\n      -i SPACES, --indent SPACES\n                            pretty-print the output, indenting SPACES spaces\n      -s SCHEMA, --schema SCHEMA\n                            file containing a JSON Schema (can be specified\n                            multiple times to merge schemas)\n      -$ URI, --schema-uri URI\n                            the value of the '$schema' keyword (defaults to\n                            'http://json-schema.org/schema#' or can be specified\n                            in a schema with the -s option). If 'NULL' is passed,\n                            the \"$schema\" keyword will not be included in the\n                            result.\n\nGenSON Python API\n-----------------\n\n``SchemaBuilder`` is the basic schema generator class. ``SchemaBuilder`` objects can be loaded up with existing schemas and objects before being serialized.\n\n.. code-block:: python\n\n    >>> from genson import SchemaBuilder\n\n    >>> builder = SchemaBuilder()\n    >>> builder.add_schema({\"type\": \"object\", \"properties\": {}})\n    >>> builder.add_object({\"hi\": \"there\"})\n    >>> builder.add_object({\"hi\": 5})\n\n    >>> builder.to_schema()\n    {'$schema': 'http://json-schema.org/schema#',\n     'type': 'object',\n     'properties': {\n        'hi': {'type': ['integer', 'string']}},\n        'required': ['hi']}\n\n    >>> print(builder.to_json(indent=2))\n    {\n      \"$schema\": \"http://json-schema.org/schema#\",\n      \"type\": \"object\",\n      \"properties\": {\n        \"hi\": {\n          \"type\": [\n            \"integer\",\n            \"string\"\n          ]\n        }\n      },\n      \"required\": [\n        \"hi\"\n      ]\n    }\n\nSchemaBuilder.__init__(schema_uri=None)\n+++++++++++++++++++++++++++++++++++++++\n\n:param schema_uri: value of the ``$schema`` keyword. If not given, it will use the value of the first available ``$schema`` keyword on an added schema or else the default: ``'http://json-schema.org/schema#'``. A value of ``False`` or ``None`` will direct GenSON to leave out the ``\"$schema\"`` keyword.\n\nSchemaBuilder.add_schema(schema)\n++++++++++++++++++++++++++++++++\n\nMerge in a JSON schema. This can be a ``dict`` or another ``SchemaBuilder``\n\n:param schema: a JSON Schema\n\n.. note::\n    There is no schema validation. If you pass in a bad schema,\n    you might get back a bad schema.\n\nSchemaBuilder.add_object(obj)\n+++++++++++++++++++++++++++++\n\nModify the schema to accomodate an object.\n\n:param obj: any object or scalar that can be serialized in JSON\n\nSchemaBuilder.to_schema()\n+++++++++++++++++++++++++\n\nMerges in an existing schema.\n\n:rtype: ``dict``\n\nSchemaBuilder.to_json()\n+++++++++++++++++++++++\n\nGenerate a schema and convert it directly to serialized JSON.\n\n:rtype: ``str``\n\nSchemaBuilder.__eq__(other)\n+++++++++++++++++++++++++++\n\nCheck for equality with another ``SchemaBuilder`` object.\n\n:param other: another ``SchemaBuilder`` object. Other types are accepted, but will always return ``False``\n\nSchemaBuilder object interaction\n++++++++++++++++++++++++++++++++\n\n``SchemaBuilder`` objects can also interact with each other:\n\n* You can pass one schema directly to another to merge them.\n* You can compare schema equality directly.\n\n.. code-block:: python\n\n    >>> from genson import SchemaBuilder\n\n    >>> b1 = SchemaBuilder()\n    >>> b1.add_schema({\"type\": \"object\", \"properties\": {\n    ...   \"hi\": {\"type\": \"string\"}}})\n    >>> b2 = SchemaBuilder()\n    >>> b2.add_schema({\"type\": \"object\", \"properties\": {\n    ...   \"hi\": {\"type\": \"integer\"}}})\n    >>> b1 == b2\n    False\n\n    >>> b1.add_schema(b2)\n    >>> b2.add_schema(b1)\n    >>> b1 == b2\n    True\n    >>> b1.to_schema()\n    {'$schema': 'http://json-schema.org/schema#',\n     'type': 'object',\n     'properties': {'hi': {'type': ['integer', 'string']}}}\n\n\nSeed Schemas\n------------\n\nThere are several cases where multiple valid schemas could be generated from the same object. GenSON makes a default choice in all these ambiguous cases, but if you want it to choose differently, you can tell it what to do using a *seed schema*.\n\nSeeding Arrays\n++++++++++++++\n\nFor example, suppose you have a simple array with two items:\n\n.. code-block:: python\n\n    ['one', 1]\n\nThere are always two ways for GenSON to interpret any array: List and Tuple. Lists have one schema for every item, whereas Tuples have a different schema for every array position. This is analogous to the (now deprecated) ``merge_arrays`` option from version 0. You can read more about JSON Schema `array validation here`_.\n\nList Validation\n^^^^^^^^^^^^^^^\n\n.. code-block:: json\n\n    {\n      \"type\": \"array\",\n      \"items\": {\"type\": [\"integer\", \"string\"]}\n    }\n\nTuple Validation\n^^^^^^^^^^^^^^^^\n\n.. code-block:: json\n\n    {\n      \"type\": \"array\",\n      \"items\": [{\"type\": \"integer\"}, {\"type\": \"string\"}]\n    }\n\nBy default, GenSON always interprets arrays using list validation, but you can tell it to use tuple validation by seeding it with a schema.\n\n.. code-block:: python\n\n    >>> from genson import SchemaBuilder\n\n    >>> builder = SchemaBuilder()\n    >>> builder.add_object(['one', 1])\n    >>> builder.to_schema()\n    {'$schema': 'http://json-schema.org/schema#',\n     'type': 'array',\n     'items': {'type': ['integer', 'string']}}\n\n    >>> builder = SchemaBuilder()\n    >>> seed_schema = {'type': 'array', 'items': []}\n    >>> builder.add_schema(seed_schema)\n    >>> builder.add_object(['one', 1])\n    >>> builder.to_schema()\n    {'$schema': 'http://json-schema.org/schema#',\n     'type': 'array',\n     'items': [{'type': 'string'}, {'type': 'integer'}]}\n\nNote that in this case, the seed schema is actually invalid. You can't have an empty array as the value for an ``items`` keyword. But GenSON is a generator, not a validator, so you can fudge a little. GenSON will modify the generated schema so that it is valid, provided that there aren't invalid keywords beyond the ones it knows about.\n\nSeeding patternProperties\n+++++++++++++++++++++++++\n\nSupport for patternProperties_ is new in version 1; however, since GenSON's default behavior is to only use ``properties``, this powerful keyword can only be utilized with seed schemas. You will need to supply an ``object`` schema with a ``patternProperties`` object whose keys are RegEx strings. Again, you can fudge here and set the values to null instead of creating valid subschemas.\n\n.. code-block:: python\n\n    >>> from genson import SchemaBuilder\n\n    >>> builder = SchemaBuilder()\n    >>> builder.add_schema({'type': 'object', 'patternProperties': {r'^\\d+$': None}})\n    >>> builder.add_object({'1': 1, '2': 2, '3': 3})\n    >>> builder.to_schema()\n    {'$schema': 'http://json-schema.org/schema#', 'type': 'object', 'patternProperties':  {'^\\\\d+$': {'type': 'integer'}}}\n\nThere are a few gotchas you should be aware of here:\n\n* GenSON is written in Python, so it uses the `Python flavor of RegEx`_.\n* GenSON still prefers ``properties`` to ``patternProperties`` if a property already exists that matches one of your patterns, the normal property will be updated, *not* the pattern property.\n* If a key matches multiple patterns, there is *no guarantee* of which one will be updated.\n* The patternProperties_ docs themselves have some more useful pointers that can save you time.\n\nTypeless Schemas\n++++++++++++++++\n\nIn version 0, GenSON did not accept a schema without a type, but in order to be flexible in the support of seed schemas, support was added for version 1. However, GenSON violates rule #2 in its handling of typeless schemas. Any object will validate under an empty schema, but GenSON incorporates typeless schemas into the first-available typed schema, and since typed schemas are stricter than typless ones, so objects that would validate under an added schema will not validate under the result.\n\nCompatibility\n-------------\n\nGenSON has been tested and verified using the following versions of Python:\n\n* Python 2.7.11\n* Python 3.3.5\n* Python 3.4.4\n* Python 3.5.1\n* Python 3.6.2\n\n\nContributing\n------------\n\nWhen contributing, please follow these steps:\n\n1. Clone the repo and make your changes.\n2. Make sure your code has test cases written against it.\n3. Make sure all the tests pass.\n4. Lint your code with `Flake8`_.\n5. Ensure the docs are accurate.\n6. Add your name to the list of contributers.\n7. Submit a Pull Request.\n\nTests\n+++++\n\nTests are written in ``unittest``. You can run them all easily with the included executable ``bin/test.py``.\n\n.. code-block:: bash\n\n    $ bin/test.py\n\nYou can also invoke individual test suites:\n\n.. code-block:: bash\n\n    $ bin/test.py --test-suite test.test_gen_single\n\n\nPotential Future Features\n+++++++++++++++++++++++++\n\nThe following are extra features under consideration.\n\n* recognize every validation keyword and ignore any that don't apply\n* open up generator API for custom schema generator classes\n* option to set error level\n* custom serializer plugins\n* logical support for more keywords:\n\n  * ``enum``\n  * ``min``/``max``\n  * ``minLength``/``maxLength``\n  * ``minItems``/``maxItems``\n  * ``minProperties``/``maxProperties``\n  * ``additionalItems``\n  * ``additionalProperties``\n  * ``format`` & ``pattern``\n  * ``$ref`` & ``id``\n\n.. _JSON Schema: http://json-schema.org/\n.. _Java Genson library: https://owlike.github.io/genson/\n.. _Python's builtin json library: https://docs.python.org/library/json.html\n.. _Flake8: https://pypi.python.org/pypi/flake8\n.. _below: #typeless-schemas\n.. _array validation here: https://spacetelescope.github.io/understanding-json-schema/reference/array.html#items\n.. _patternProperties: https://spacetelescope.github.io/understanding-json-schema/reference/object.html#pattern-properties\n.. _`Python flavor of RegEx`: https://docs.python.org/3.6/library/re.html\n\n\nHistory\n=======\n\n0.1.0 (2014-11-29)\n------------------\n\n* Initial release.\n\n0.2.0\n-----\n\n* **Bugfix**: Options were not propagated down to subschemas.\n* **Bugfix**: Empty arrays resulted in invalid schemas because it still included an ``items`` property.\n* **Bugfix**: ``items`` was being set to a list even when ``merge_arrays`` was set to ``True``. This resulted in overly permissive schemas because ``items`` are matched optionally by default.\n* **Improvement**: Positional Array Matching - In order to be more consistent with the way JSON Schema works, the alternate to ``merge_arrays`` is no longer never to merge list items, but instead to merge them based on their position in the list.\n* **Improvement**: Schema Incompatibility Warning - A schema incompatibility used to cause a fatal error with a nondescript warning. The message has been improved and it has been reduced to a warning.\n\n0.2.1\n-----\n* **Bugfix**: ``add_schema`` failed when adding list-style array schemas.\n* **Bugfix**: typo in readme\n\n0.2.2\n-----\n* **Docs**: Python 3.6 is now explicitly tested and listed as compatible.\n\n0.2.3\n-----\n* **Docs**: add installation instructions\n\n1.0.0\n-----\n\nThis version was a total overhaul. The main change was to split Schema into three separate classes, making it simpler to add more complicated functionality by having different generator types to handle the different schema types.\n\n1. ``SchemaNode`` to manage the tree structure\n2. ``SchemaGenerator`` for the schema generation logic\n3. ``SchemaBuilder`` to manage the public API\n\nInterface Changes\n+++++++++++++++++\n\n* ``SchemaBuilder`` is the new ``Schema``\n* ``to_dict()`` is now called ``to_schema()``\n\nTo make the transition easier, there is still a ``Schema`` class that wraps ``SchemaBuilder`` with a backwards-compatibility layer, but you will trigger a ``PendingDeprecationWarning`` if you use it.\n\nSeed Schemas\n++++++++++++\n\nThe ``merge_arrays`` option has been removed in favor of seed schemas. You can now seed specific nodes as list or tuple instead of setting a global option for every node in the schema tree.\n\nYou can also now seed object nodes with ``patternProperties``, which was a highly requested feature.\n\nOther Changes\n+++++++++++++\n\n* include ``\"$schema\"`` keyword\n* accept schemas without ``\"type\"`` keyword\n* use ``\"anyOf\"`` keyword to help combine schemas\n* add ``SchemaGenerationError`` for better error handling\n* empty ``\"properties\"`` and ``\"items\"`` are not included in generated schemas\n* ``genson`` executable\n\n  * new ``--schema-uri`` option\n  * auto-detect object boundaries by default\n\n\nCredits\n=======\n\n**GenSON** is written and maintained by `Jon Wolverton <https://github.com/wolverdude>`_.\n\n\nContributors\n------------\n\n- `Brad Sokol <https://github.com/bradsokol>`_\n- `David Kay <https://github.com/davek2>`_\n",
    "docs_url": null,
    "download_url": "https://github.com/wolverdude/GenSON/tarball/v0.2s.0",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/wolverdude/genson/",
    "keywords": "json",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "genson",
    "platform": "",
    "project_url": "https://pypi.org/project/genson/",
    "release_url": "https://pypi.org/project/genson/1.0.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "GenSON is a powerful, user-friendly JSON Schema generator.",
    "version": "1.0.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6a9505b3dccf02124a9d25b4883ae52d",
          "sha256": "588f5266ef52465bd32cefef679f3050ae0bc38836fdf4dd74370ae3f3b48f6d"
        },
        "downloads": -1,
        "filename": "genson-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6a9505b3dccf02124a9d25b4883ae52d",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 11255,
        "upload_time": "2014-11-30T04:50:35",
        "url": "https://files.pythonhosted.org/packages/9d/8d/123cd25290f008092870c71ffc8f159f04aa7b9dfd5e95053e885d3d355f/genson-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b6bb0f826eabd13e755d564291121307",
          "sha256": "ac250f735c26c7d0cc38e469b954e3dbd969240da93ae8f0372c85cdcd970b61"
        },
        "downloads": -1,
        "filename": "genson-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b6bb0f826eabd13e755d564291121307",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10109,
        "upload_time": "2014-11-30T04:50:28",
        "url": "https://files.pythonhosted.org/packages/e8/f6/ca4d054d3bcc10acbf04cdc021e9cd63c893061a5280951035a589e6a245/genson-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e165a4c15fb9f27d7318d0182e99311b",
          "sha256": "6ea2bb5b87f042d099154535dbdf61f62402b19bb249e82a15435f2340c58dea"
        },
        "downloads": -1,
        "filename": "genson-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e165a4c15fb9f27d7318d0182e99311b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11682,
        "upload_time": "2016-06-19T11:49:04",
        "url": "https://files.pythonhosted.org/packages/88/0c/3b0e218467cdcd21cb192fc361b597150f5c9dc36f9c5554c6593e90f752/genson-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b2fe31b7736371d79e96f248d6debd84",
          "sha256": "99b225a5d78a04a8c85dc60b87683f3e53c46e4d7ae6ad87e8b98aece1bab46a"
        },
        "downloads": -1,
        "filename": "genson-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b2fe31b7736371d79e96f248d6debd84",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11849,
        "upload_time": "2017-02-07T05:24:23",
        "url": "https://files.pythonhosted.org/packages/cb/3c/977e0d79f1133e9a58af3cf4d69cbea6d88dd6f4dfeac398a93ce2348347/genson-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bda3576a33e245cfbae4a079205cf10f",
          "sha256": "f5909b781ea429dfd6282427978a4a4dc27571479643ed9b18e8224711962d25"
        },
        "downloads": -1,
        "filename": "genson-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "bda3576a33e245cfbae4a079205cf10f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11906,
        "upload_time": "2017-08-12T17:32:43",
        "url": "https://files.pythonhosted.org/packages/78/40/b1b539948887884bc881e909de95c914116ac98de984c0a6b039c9512343/genson-0.2.2.tar.gz"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "19dcaece4bd9d03d549fa5fb9f045713",
          "sha256": "1756740cff035de646a0b1af5cc21f3c8cf558574630c00e40d17ad12024d8da"
        },
        "downloads": -1,
        "filename": "genson-0.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "19dcaece4bd9d03d549fa5fb9f045713",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11983,
        "upload_time": "2017-10-15T21:38:54",
        "url": "https://files.pythonhosted.org/packages/2b/70/4eea716b647e7b11bf029d05d72eb3b783f20a39ef3a58ed82df8a6bde6b/genson-0.2.3.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "424a2842d0fcd858ef99a434efa1f8a2",
          "sha256": "06bbedcde7f268626991b465b0ed3dae00f150b1c20c31c60c092a752531262c"
        },
        "downloads": -1,
        "filename": "genson-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "424a2842d0fcd858ef99a434efa1f8a2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25725,
        "upload_time": "2018-01-02T19:21:22",
        "url": "https://files.pythonhosted.org/packages/ad/69/967f7e8c7e31c387c660687f50f234204df869518d39afcc40715737211a/genson-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "424a2842d0fcd858ef99a434efa1f8a2",
        "sha256": "06bbedcde7f268626991b465b0ed3dae00f150b1c20c31c60c092a752531262c"
      },
      "downloads": -1,
      "filename": "genson-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "424a2842d0fcd858ef99a434efa1f8a2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 25725,
      "upload_time": "2018-01-02T19:21:22",
      "url": "https://files.pythonhosted.org/packages/ad/69/967f7e8c7e31c387c660687f50f234204df869518d39afcc40715737211a/genson-1.0.0.tar.gz"
    }
  ]
}