{
  "info": {
    "author": "Pretaweb",
    "author_email": "support@pretaweb.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Plone",
      "Framework :: Plone :: 4.2",
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. contents::\n\nIntroduction\n============\n\n.. image:: https://secure.travis-ci.org/collective/collective.listingviews.png\n    :target: http://travis-ci.org/collective/collective.listingviews\n\n``collective.listingviews`` allows a Plone site administrator to create\nnew views through the web.  They can use this to:\n\n- create custom views of folders or collections that include metadata and\n  content from contained or matching items;\n- create custom listing portlets with additional information such as\n  lead images, publication dates or authors;\n- create listing views with subqueries or python via `TAL expressions`_;\n- create additional views of non-folderish content items, showing other aspects of the\n  content;\n- create portlets to display information about the current item such as last\n  updated date, or even the whole content replacing plugins like ItemViewPortlet;\n- create carousel portlets which pull content or images from collections or\n  folders and apply javascript to them, replacing collective.carousel are related\n  plugins;\n- create custom listings for ``eea.facetednavigation``;\n\nListing Views are designed to be simple to create quickly on a Plone site\nand avoid the complexity of creating custom page templates or overridden\nviews for many common cases.\n\nView definitions are created inside the Plone Site setup by TTW developers. \nContent editors can apply the views to content items via the\n``Display Menu`` for content or in a ``Listing View Portlet`` for portlets \n(and in the future in a ``Content Listing Tile``).\n\nThe HTML markup used by the view is simple and designed to be easily adapted\nto your needs using CSS or Diazo. Each view consists of:\n\n- a definition list of fields of the target or context content item;\n- a list of definition lists of fields for each the listed items if the\n  target or context is a folder, or collection;\n- unique CSS classes for the lists and each field type.\n\nBy default Fields that can make up a ListingView are :\n\n- Any Metadata fields stored in the catalog (e.g. Title, Effective Date)\n- Some Metadata fields with formatting applied (e.g. Title (Link), Effective Date (Date & Time))\n- Any custom TAL expressions\n\nWorked Examples\n===============\n\n\nCreating a custom field\n-----------------------\n\nLet's say have a design that demands that has a folder displaying the publication date for each item.\n\nMost of this can be achieved using diazo and css however the publication date isn't in any of Plone's default listing\nviews.\nPreviously you would have to dig into Plone's code base, find it's folder template implementation and then\nuse ``jbot`` or ``ZCML`` template overrides to customise the folder listing template.\nNot only will you need to learn about TAL, python, packaging and deployment but the end result will make your site\nharder to upgrade. Any future enhancements in Plone's folder template will have to be merged back into your patched\noverriden template.\n\nInstead here is how you do it using a ListingView.\n\nFirst we need to create a custom field using TAL since we want a custom date format rather than Plones default.\nA TAL Expression like the following will work.\n\n>>> tal = \"python:item.effective.strftime('%d/%m/%Y') if item.EffectiveDate != 'None' else '' \"\n\n- Go to ``Site Setup > Listing Custom Fields > Add``\n- The ``Id`` is unique and is also used as a CSS class in the final html\n- The ``Title`` is what the editor picks from the ``Display Menu`` or in the ``ListingView Portlet``\n- Finally the TAL Expression that is evaluated when showing the field. ``item`` is the catalog brain.\n  ``object`` or ``here`` is the context object. Below is the TAL we are going to use.\n\n>>> browser = layer['manager']\n>>> browser.getLink('Site Setup').click()\n>>> browser.getLink('Listing Custom Fields').click()\n>>> browser.getControl('Add').click()\n>>> browser.getControl('Id').value = \"pubdate\"\n>>> browser.getControl('Title').value = \"Local Publication Date\"\n>>> browser.getControl('TAL expression').value = tal\n>>> browser.getControl('Save').click()\n\n\nCreating a listing view\n-----------------------\n\nNow that we've created our custom field we can add a new Listing View via\n``Site Setup > Listing View > Add``.\n\n>>> browser.getLink('Site Setup').click()\n>>> browser.getLink('Listing View').click()\n>>> browser.getControl('Add').click()\n\nThere are two kinds of information a listing view display. Information about the context object called\n``Item Fields`` and information about the contents or matched items called ``Listing Fields``.\nThese fields come from either standard metadata or the custom fields we add.\n\n>>> print '\\n'.join( browser.getControl('Title', index=1).control.displayOptions )\nCreation Date (Date)\nCreation Date (Date & Time)\nCreator\nDescription\nEffective Date (Date)\nEffective Date (Date & Time)\nEnd Date (Date)\nEnd Date (Date & Time)\nExpiration Date (Date)\nExpiration Date (Date & Time)\nShort Name\nShort Name (Link)\nSize\nLocation\nModification Date (Date)\nModification Date (Date & Time)\nState\nStart Date (Date)\nStart Date (Date & Time)\nTags\nTitle\nTitle (Link)\nTotal number of comments\nItem Type\nLocal Publication Date (Custom)\n\nBy default the view will be enabled for standard content types. These are\n\n>>> options = browser.getControl('Page').control.displayOptions\n>>> options = [o for o in options if 'old-style' not in o]\n>>> print '\\n'.join( options )\nCollection\nComment\nEvent\nFile\nFolder\nImage\nLink\nNews Item\nPage\n\nIn this case we'll create a view called ``News with publication``.\nFor the context object we'll show\n\n - ``Title``\n\nfor each of the content items\n\n - ``Title``\n - ``Title (Link)``\n - ``Effective Date``\n - ``Local Publication Date``\n\nand finally we'll enable the view for all content types\n\n>>> browser.getControl('Id').value = \"pubnews\"\n>>> browser.getControl('Title', index=0).value = \"News with publication\"\n>>> layer.setInAndOut(browser, ['Title'], index=1)\n>>> layer.setInAndOut(browser, ['Title', 'Title (Link)', 'Effective Date (Date)', 'Local Publication Date (Custom)'], index=3)\n>>> layer.setInAndOut(browser, browser.getControl('Page').control.displayOptions, index=0 )\n>>> browser.getControl('Add').click()\n\nWe can manage our existing listing views including a link to edit the view we just created.\n\n>>> browser.getLink('pubnews')\n<Link text='pubnews' url='http://nohost/plone/listingviews_controlpanel/pubnews'>\n\nUsing a listing view on a folder\n--------------------------------\n\nWe have a ``folder1`` with some pages in including a Page called ``item1``.\nUsing the ``Display > News with publication`` menu we will change the folder view to\n``News with publication`` view we created.\n\n>>> browser.getLink('folder1').click()\n>>> browser.getLink('item1')\n<Link text='item1' url='http://nohost/plone/folder1/item1'>\n>>> browser.getLink('folder1').click()\n>>> browser.getLink('News with publication').click()\n>>> browser.contents\n'...View changed...'\n\n\nYou will now have a listing that contains all the information you need.\nWe have\n\n- a definition for the fields of the folder (the context item)\n- an unordered list of definition lists for every item contained in the folder.\n\n  - the title of ``item1``\n  - a title made into a link to ``item1``\n  - the ``EffectiveDate`` using Plone's default Date format\n  - and finally our custom version of the effective date\n\nNote the html is in exactly the same order as we specifed in our view definition\n\n\n>>> print browser.contents\n<...\n      <div class=\"listing-item-fields\">\n        <dl class=\"pubnews-item item-fields\">\n              <dt class=\"listing-field field-Title\">Title</dt>\n              <dd class=\"listing-field field-Title\">folder1</dd>\n        </dl>\n      </div>\n...\n>>> print browser.contents\n<...\n      <ul class=\"pubnews-listing listing-items-view\">\n          <li class=\"listing-item\">\n              <dl class=\"listing-fields\">\n              ...\n              </dl>\n          </li>\n      </ul>\n...\n>>> print browser.contents\n<...\n<dt class=\"listing-field field-Title\">Title</dt>\n<dd class=\"listing-field field-Title\">item1</dd>\n...\n>>> print browser.contents\n<...\n<dt class=\"listing-field field-Title-tolink\">Title</dt>\n<dd class=\"listing-field field-Title-tolink\"><a href=\"http://nohost/plone/folder1/item1\">item1</a></dd>\n...\n>>> print browser.contents\n<...\n<dt class=\"listing-field field-EffectiveDate-localshort\">Effective Date</dt>\n<dd class=\"listing-field field-EffectiveDate-localshort\">..., ...</dd>\n...\n>>> print browser.contents\n<...\n<dt class=\"listing-field pubdate\">Local Publication Date</dt>\n<dd class=\"listing-field pubdate\">.../.../...</dd>\n...\n>>> print browser.contents\n<...\n<dt class=\"listing-field field-Title\">Title</dt>\n...\n<dt class=\"listing-field field-Title-tolink\">Title</dt>\n...\n<dt class=\"listing-field field-EffectiveDate-localshort\">Effective Date</dt>\n...\n<dt class=\"listing-field pubdate\">Local Publication Date</dt>\n...\n\n\nThe styling of this view is very basic. With ``Diazo`` we can turn this into a much nicer looking view by\nmatching against the CSS class ``pubnews-listing``::\n\n    <replace css:content=\"ul.pubnews-listing\">\n        <xsl:for-each select=\"./li[contains(@class, 'listing-item')]\">\n            <div class=\"span8\">\n                <div class=\"headline\">\n                    <xsl:element name=\"a\">\n                        <xsl:attribute name=\"href\"><xsl:value-of select=\"./dl/dd[contains(@class, 'field-location')]\"/></xsl:attribute>\n                        <xsl:value-of select=\"./dl/dd[contains(@class, 'field-Title')]\"/>\n                    </xsl:element>\n                </div>\n                <div id=\"publishedDets1\" class=\"publishDate\">Published <xsl:value-of select=\"./dl/dd[contains(@class, 'custom-date')]\"/></div>\n                <div class=\"description\"><xsl:value-of select=\"./dl/dd[contains(@class, 'field-Description')]\"/></div>\n                <div class=\"newsLink\">\n                    <xsl:element name=\"a\">\n                        <xsl:attribute name=\"href\"><xsl:value-of select=\"./dl/dd[contains(@class, 'field-location')]\"/></xsl:attribute>\n                        <xsl:text>Read Full Article</xsl:text>\n                    </xsl:element>\n                </div>\n            </div>\n        </xsl:for-each>\n    </replace>\n\n\nAdding publication date to a Page using a portlet\n-------------------------------------------------\n\nWe can use the same custom publication date field when viewing Page items.\n\nWe'll create a new Listing View\ncalled ``Publication Info``, .\nadd ``Local Publication Date`` to the 'item' fields, rather than the listing fields.\n\nFinally we only want this to be applied to a Page content type\n\n>>> browser.getLink('Site Setup').click()\n>>> browser.getLink('Listing View').click()\n>>> browser.getControl('Add').click()\n>>> browser.getControl('Id').value = \"pubnewsitem\"\n>>> browser.getControl('Title', index=0).value = \"Publication Info\"\n>>> layer.setInAndOut(browser, ['Local Publication Date (Custom)'], index=0)\n>>> layer.setInAndOut(browser, ['Page'])\n>>> browser.getControl('Add').click()\n\n\nGo to your  folder where all the pages are located\nand\n\n1. Add a ``ListingView Portlet`` portlet to the left side using ``Manage porlets``.\n2. Enter ``Publication Info`` as the Portlet header.\n3. Select ``Publication Info`` as the ``Listing views``.\n4. Leave ``Target`` target blank as you want portlet to show information of the current item. Click ``Save``.\n\nAlternatively you can also add the portlet as a Content Type portlet which also ensures it will only be shown only when\nviewing this content type. (e.g. ``Site Setup > Types > News Item > Manage Portlets assigned to this content type``).\n\n>>> browser.getLink('Home').click()\n>>> browser.getLink('folder1').click()\n>>> browser.getLink('Manage portlets').click()\n>>> browser.getControl('ListingView Portlet', index=1).click()\n>>> layer.getFormFromControl(browser.getControl('ListingView Portlet', index=1)).submit()\n>>> browser.getControl('Portlet header').value = 'Publication Info'\n>>> browser.getControl('Publication Info').click()\n>>> browser.getControl('Save').click()\n\n\nNow whenever you view a news item you will get a portlet on the left hand side.\nWe can see\n\n- a portlet with the heading ``Publication Info``.\n- Our portlet shows data about the context item (in this case item1)\n- and because item1 has no contents we have an empty list in the listing part of the portlet.\n\n>>> browser.getLink('folder1').click()\n>>> browser.getLink('item1').click()\n>>> print browser.contents\n<...\n    <dl class=\"portlet portletListing portlet-listing-publication-info\">\n    ...\n    </dl>\n...\n>>> print browser.contents\n<...\n    <dt class=\"portletHeader\">\n        <span class=\"portletTopLeft\"></span>\n        <span>\n           Publication Info\n        </span>\n        <span class=\"portletTopRight\"></span>\n    </dt>\n...\n>>> print browser.contents\n<...\n  <div class=\"listing-item-fields-portlet\">\n      <dl class=\"pubnewsitem-item item-fields\">\n                  <dt class=\"listing-field pubdate\">Local Publication Date</dt>\n                  <dd class=\"listing-field pubdate\">.../.../...</dd>\n            </dl>\n  </div>\n...\n>>> print browser.contents\n<...\n    <ul class=\"pubnewsitem-listing listing-items-view\">\n    </ul>\n...\n\nUsing the diazo mockup and rules.xml to change the final design we can move the publication date below the title\nand remove the portlet completely::\n\n    <drop content-children=\"//dl[contains(@class, 'portlet-listing-news-item')]\" />\n    <replace css:content=\"#parent-fieldname-title\" if-content=\"//dl[contains(@class, 'portlet-listing-news-item')]\" >\n        <xsl:copy-of select=\".\" />\n        <div id=\"publishedDets\" class=\"publishDate\">Published <xsl:value-of select=\"//dl[contains(@class, 'portlet-listing-news-item')]//dd[contains(@class, 'custom-date')]\"/></div>\n    </replace>\n\n\nBecause we restricted which types the view can be applied to we won't see the portlet on the folder.\nWe also aren't able to select that view from the display menu because this is a folder not a Page.\n\n>>> browser.getLink('folder1').click()\n>>> 'portlet-listing-news-item-info' in browser.contents\nFalse\n>>> 'There was an error while rendering the portlet' in browser.contents\nFalse\n>>> browser.getLink('Publication Info')\nTraceback (most recent call last):\n...\nLinkNotFoundError\n\n\nItem View on content\n--------------------\n\nWe are also able to select our ``Publication Info`` view as a view for the ``item1`` main content as well\nvia the ``Display > Publication Info`` menu.\n\n>>> browser.getLink('folder1').click()\n>>> browser.getLink('item1').click()\n>>> browser.getLink('Publication Info')\n<Link text='Publication Info' url='.../folder1/item1/selectViewTemplate?templateId=collective.listingviews.pubnewsitem'>\n\n\nItem View portlet for fixed item\n--------------------------------\nIt's also possible to fix a portlet to show information on particular item instead of the current content context.\nEdit the portlet and search for ``item1`` in the ``Target`` Field.\n\n>>> browser.getLink('Manage portlets').click()\n>>> browser.getLink('Publication Info').click()\n>>> browser.getControl('Save').mech_form.new_control('text','form.root', {'value':'/folder1/item1'})\n>>> browser.getControl('Save').click()\n\n#TODO show what happens if we pick an item of invalid type\n\nWe will now see the portlet at the folder level\n\n>>> browser.getLink('folder1').click()\n>>> print browser.contents\n<...\n  <div class=\"listing-item-fields-portlet\">\n      <dl class=\"pubnewsitem-item item-fields\">\n          <dt class=\"listing-field pubdate\">Local Publication Date</dt>\n          <dd class=\"listing-field pubdate\">.../.../...</dd>\n      </dl>\n  </div>\n...\n\nListing Views for collections\n-----------------------------\n\nWe have create a collection in our folder1 called collection1\n\n>>> browser.getLink('folder1').click()\n>>> browser.getLink('collection1').click()\n>>> browser.getLink('item1')\n<Link text='item1' url='http://nohost/plone/folder1/item1'>\n\nSwitch to our publication view\n\nSelect ``Display > 'News with publication'``.\n\n>>> browser.getLink('collection1').click()\n>>> browser.getLink('News with publication').click()\n>>> browser.contents\n'...View changed...'\n\nAnd we'll still see item1\nand our custom field\n\n>>> browser.getLink('item1')\n<Link text='item1' url='http://nohost/plone/folder1/item1'>\n>>> print browser.contents\n<...\n<dt class=\"listing-field pubdate\">Local Publication Date</dt>\n<dd class=\"listing-field pubdate\">.../.../...</dd>\n...\n\n\nCollection Portlets\n-------------------\n\nWe can also create a portlet on the home page listing the contents of this collection\n\nOn the home page we have no link to item1\n\n>>> browser.getLink('Home').click()\n>>> browser.getLink('item1')\nTraceback (most recent call last):\n...\nLinkNotFoundError\n\nWe'll create a portlet to give us links.\nGive the portlet a header.\nWe have a choice of Listing Views to pick from.\nSelect ``News with publication`` as the ``Listing views``.\nWe can select a specific collection to display by searching by\nname for ``collection1`` in the ``Target`` field.\n\n>>> browser.getLink('Manage portlets').click()\n>>> browser.getControl('ListingView Portlet', index=1).click()\n>>> layer.getFormFromControl(browser.getControl('ListingView Portlet', index=1)).submit()\n>>> browser.getControl('Portlet header').value = 'Collection Portlet'\n>>> browser.getControl('Listing views').displayOptions\n['(nothing selected)', 'News with publication', 'Publication Info']\n>>> browser.getControl('News with publication').click()\n>>> browser.getControl('Save').mech_form.new_control('text','form.root', {'value':'/folder1/collection1'})\n>>> browser.getControl('Save').click()\n\nNew when we view home we  see the items inside ``folder1` based on criteria in ``collection1``, so we'll see\na link to the ``item1``\n\n>>> browser.getLink('Home').click()\n>>> browser.getLink('item1')\n<Link text='item1' url='http://nohost/plone/folder1/item1'>\n\n\nExample: News listing in table view\n-----------------------------------\n\nLet's say have a design that demands that has a news folder that displays the publication date for each news item in table form.\n\nWe just copy our listing view and give it a new class. Add the following to your diazo rules.xml to turn the plain view into a table::\n\n    <replace css:content=\"ul.listing-items-view\">\n        <table>\n            <tr>\n                <th><xsl:value-of select=\"./li[contains(@class, 'listing-item')][1]/dl/dt[contains(@class, 'field-Title')]\"/></th>\n                <th><xsl:value-of select=\"./li[contains(@class, 'listing-item')][1]/dl/dt[contains(@class, 'custom-date')]\"/></th>\n                <th><xsl:value-of select=\"./li[contains(@class, 'listing-item')][1]/dl/dt[contains(@class, 'field-Description')]\"/></th>\n            </tr>\n            <xsl:for-each select=\"./li[contains(@class, 'listing-item')]\">\n                <tr>\n                    <td>\n                        <xsl:element name=\"a\">\n                            <xsl:attribute name=\"href\"><xsl:value-of select=\"./dl/dd[contains(@class, 'field-location')]\"/></xsl:attribute>\n                            <xsl:value-of select=\"./dl/dd[contains(@class, 'field-Title')]\"/>\n                        </xsl:element>\n                    </td>\n                    <td>\n                        <p id=\"publishedDets1\" class=\"publishDate\">Published <xsl:value-of select=\"./dl/dd[contains(@class, 'custom-date')]\"/></p>\n                    </td>\n                    <td>\n                        <p class=\"description\"><xsl:value-of select=\"./dl/dd[contains(@class, 'field-Description')]\"/></p>\n                    </td>\n                </tr>\n            </xsl:for-each>\n        </table>\n    </replace>\n\n\n\n\n\n\nContributing\n============\n\n``collective.listingviews`` is an initial attempt to create a Plone plugin\nthat is flexible yet simple to understand.  To make it even more useful we\nneed feedback and pull requests to enable it to replace custom Page\nTemplates in more cases, while keeping it easy to understand.\n\nDevelopment is at http://github.com/collective/collective.listingviews\n\nInitial development was funded by `PretaWeb`_.\n\nWe have some ideas on where this could go:\n\n- Safe HTML filtering for all fields. Currently not implemented.\n- Support `plone.app.contentlistingtile`_ for Deco or ``collective.cover``.\n  ``contentlistingtile`` allows custom views to be selected so this should\n  be simple.\n- Support `plone.app.collection`_. Currently only old-style collections\n  are supported.\n- Preview view as ZPT. This provides a way to learn ZPT and a base to start\n  from when more complex views are needed.\n- Debug custom fields. Allow selection of content to test fields quickly.\n- Migration of views. Provide a way to make bulk changes in content from one\n  listingview to another listingview. This would allow a new \"template\" to\n  be created and tested and then switched in production.\n- Support customisation of batching settings.\n- Allow GET requests so that the list can act as a custom search listing\n  page.\n- Support grouping.\n- Support hierarchical listing. Allow navigation portlets, sitemaps with\n  additional fields. Maybe different kind of views?  Maybe allow views to be\n  used as fields within other views?\n- Support AJAX batching and infinite lists (auto-load next when scrolled\n  down).\n- Reuse TAL on different fields. The TAL becomes a formatter function\n  instead of a field; e.g. convert date or turn Title into link.  Functions\n  let you select with fields they apply to, or apply to whole item (i.e.\n  custom field).\n- Pre-calculate custom fields, i.e. add them to catalog metadata.\n\n.. _plone.app.contentlistingtile: https://github.com/plone/plone.app.contentlistingtile\n.. _plone.app.collection: https://github.com/plone/plone.app.collection\n.. _PretaWeb: http://www.pretaweb.com\n.. _TAL expressions: http://developer.plone.org/functionality/expressions.html\n\nChangelog\n=========\n\n1.0beta3 (2013-09-11)\n---------------------\n\n- fix import of getSite to work with Plone 4.3\n\n1.0beta2 (2013-01-31)\n---------------------\n- fixed bug where can set dynamic view for 'Discussion Item' [Dylan Jay]\n\n1.0beta1 (2013-01-30)\n---------------------\n\n- Renamed TAL attributes. object->item (catalog metadata), context->object [Dylan Jay]\n- Functional tests [Dylan Jay]\n- Use CRUD z3cform framework and autoform so make easier to use and easier to replace widgets  [Dylan Jay]\n- Make \"Restricted to types\" work [Dylan Jay]\n- Add date and link filters  [Dylan Jay]\n- Views appear in display menu directly [Dylan Jay]\n\n1.0alpha1 (unreleased)\n----------------------\n\n- Refactor to support eea.facetednavigation [Dylan Jay]\n- Precompile TAL expressions before loop [Dylan Jay]\n- Initial version [Ivan Teoh]\n- Package created using templer [Ivan Teoh]",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/collective/collective.listingviews",
    "keywords": "Plone Python TTW",
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "collective.listingviews",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/collective.listingviews/",
    "release_url": "https://pypi.org/project/collective.listingviews/1.0beta3/",
    "requires_python": null,
    "summary": "Listing views",
    "version": "1.0beta3"
  },
  "releases": {
    "1.0beta1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f782129ff1a9c7fe3bd3a4928ed6a278",
          "sha256": "46ff08b17dc1424a655c9bd26e44f00153d06ff170da92394dad55f581734875"
        },
        "downloads": 2528,
        "filename": "collective.listingviews-1.0beta1.tar.gz",
        "has_sig": false,
        "md5_digest": "f782129ff1a9c7fe3bd3a4928ed6a278",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 701122,
        "upload_time": "2013-01-30T14:37:49",
        "url": "https://files.pythonhosted.org/packages/46/df/1f22277832aae543f1ca180e6a07e50675f9322c785f1e7f46d4a472f0d3/collective.listingviews-1.0beta1.tar.gz"
      }
    ],
    "1.0beta2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9695400e6ce765a275fd7ff5f84773d4",
          "sha256": "d04370e94ad410d2d98fdf7d3061ab90e73f350f2b25dc8786bcbbb6480f1576"
        },
        "downloads": 2647,
        "filename": "collective.listingviews-1.0beta2.tar.gz",
        "has_sig": false,
        "md5_digest": "9695400e6ce765a275fd7ff5f84773d4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 52803,
        "upload_time": "2013-01-30T16:23:18",
        "url": "https://files.pythonhosted.org/packages/fe/f5/0aac3fdc8b1bfe6691d6230153adbc7c1ca81fb755ff56d765f4873e6b1b/collective.listingviews-1.0beta2.tar.gz"
      }
    ],
    "1.0beta3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b4f8bf1aecdff44cfd7fac105f0dcaad",
          "sha256": "2e2a3ea3b6022483df111b81d84dbb2dd9e990f427196ab82d9c0c5b64066e46"
        },
        "downloads": 3045,
        "filename": "collective.listingviews-1.0beta3.zip",
        "has_sig": false,
        "md5_digest": "b4f8bf1aecdff44cfd7fac105f0dcaad",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 74952,
        "upload_time": "2013-09-11T22:06:53",
        "url": "https://files.pythonhosted.org/packages/5d/65/e06c8f8ff4e662ba5b660d4e4a9abd836ffb730aa3ee2c77b2750e1b0337/collective.listingviews-1.0beta3.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b4f8bf1aecdff44cfd7fac105f0dcaad",
        "sha256": "2e2a3ea3b6022483df111b81d84dbb2dd9e990f427196ab82d9c0c5b64066e46"
      },
      "downloads": 3045,
      "filename": "collective.listingviews-1.0beta3.zip",
      "has_sig": false,
      "md5_digest": "b4f8bf1aecdff44cfd7fac105f0dcaad",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 74952,
      "upload_time": "2013-09-11T22:06:53",
      "url": "https://files.pythonhosted.org/packages/5d/65/e06c8f8ff4e662ba5b660d4e4a9abd836ffb730aa3ee2c77b2750e1b0337/collective.listingviews-1.0beta3.zip"
    }
  ]
}