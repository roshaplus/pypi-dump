{
  "info": {
    "author": "Azure IoT Edge",
    "author_email": "edgedevs@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "# Azure IoT Edge Runtime Control\n\n## Introduction\nThe Azure IoT Edge Runtime Control utility assists a user in managing and controlling the IoT Edge runtime.\n\nSpecifically, it can help:\n* Initial setup or bootstrap\n* Certificate provisioning\n* Starting/Stopping and other IoT Edge runtime control options.\n\n## Prerequisites\n* Python 2.7+\n* Setuptools (if installing via python)\n\n## Installation\n### Python\nInstallation requires python and setuptools.\nDownload [python here](https://www.python.org/downloads/).\n\nOn Windows, make sure the python.exe and python Scripts directory are on your path.\nMore information for [installing python on Windows](https://docs.python.org/2/using/windows.html) can be found here.\n\n### Install the tool\nIn a terminal, complete the following steps run `pip install azure-iot-edge-runtime-ctl` (may need to run as administrator)\n\nThis should install the `iotedgectl` tool on your path.\n\nSee [Installation Troubleshooting](#installation-troubleshooting) for common installation problems.\n\n## How To Run:\nThe main commands to to operate the IoT Edge runtime are:\nsetup, start, restart, stop, status and uninstall.\n\n* **setup**: This command accepts users input to configure the runtime.\nThe required filesystem and certificates are created as part of this step.\nUsers can setup the IoT Edge interactively or by using a input configuration file or finally, specify the configuration items via command line args.\nListed below are a few examples of how to use these.\n\n* **start**: This command starts the IoT Edge runtime.\nThis downloads the Edge Agent unless already available on the host machine.\nAny configuration information pertaining to the host is supplied to the Edge Agent when it is instantiated.\n\n* **restart**: This command restarts the IoT Edge runtime and behaves like start if the Edge Agent does not exist.\nIf a runtime is active, it will be stopped and started back to back.\n\n* **stop**: This command stops the IoT Edge runtime.\n\n* **status**: Prints the current state of the IoT Edge runtime.\n\nPrint Help and Exit\n```\n$> iotedgectl --help\n```\nSetup the IoT Edge Runtime using a IoT Edge Host Configuration file.\nPlease see the [IoT Edge Host Configuration File Description](#edge-host-configuration-file-description)\n```\n$> iotedgectl setup --help\n$> iotedgectl setup --config-file edge_config.json\n$> iotedgectl setup --verbose DEBUG --config-file edge_config.json\nNote: When specifying the homeDir path on Windows please use \"C:\\\\example\\\\edge-home\"\n```\n\nSetup the IoT Edge Runtime Using Manually Specified Command Line Args\n```\n$> iotedgectl setup --connection-string \"HostName=<>;DeviceId=<>;SharedAccessKey=<>\"\nNote: When specifying the connection string ensure that it is surrounded by double quotes \".\nIn general anything with a semi colon should be put into a separate command line args.\n```\n\nStart the IoT Edge Runtime\n```\n$> iotedgectl start\n$> iotedgectl --verbose INFO start\n```\n\nRestart the IoT Edge Runtime\n```\n$> iotedgectl restart\n$> iotedgectl --verbose INFO restart\n```\n\nStop the IoT Edge Runtime\n```\n$> iotedgectl stop\n$> iotedgectl --verbose INFO stop\n```\n\nUninstall the IoT Edge Runtime\n```\n$> iotedgectl uninstall\n$> iotedgectl --verbose DEBUG uninstall\n```\n\nPrint the current status of the IoT Edge Runtime\n```\n$> iotedgectl status\n$> iotedgectl --verbose INFO status\n```\n\n### IoT Edge Home Directory Description\nThe IoT Edge runtime needs a directory on the host machine in order to execute.\nThis directory will contain the necessary configuration, certificates and module specific files.\nLets call this the *EDGEHOMEDIR*.\nIf users do not specify a value for the *EDGEHOMEDIR*, these default directories will be used to setup/start/stop the IoT Edge runtime.\n\n```\nDefault Host Paths:\n-------------------\n    Linux:   /usr/local/azure-iot-edge\n    Windows: C:\\azure-iot-edge\n    MacOS:   TBD\n```\n\nAs the IoT Edge runtime is executed, the following file system structure is created under *EDGEHOMEDIR*.\n\n```\nEDGEHOMEDIR Structure:\n-----------------------\n    EDGEHOMEDIR\n        .\n        +-- config  -- IoT Edge configuration file(s) read by the azure-iot-edge-ctl scripts to setup,\n        |              deploy and execute the IoT Edge runtime.\n        +-- certs   -- This directory is created by the scripts when generating self signed certificates.\n        |\n        +-- modules -- This is directory that will be created by the iotedgectl scripts\n                       and it used to host all the Edge Module specific files.\n```\n\n### IoT Edge Host Configuration File Description\n\nThe following section goes into details of the various configuration items and lays out how users are expected to modify this.\n\n```\n  // Config file format schema; Users should not need to modify this.\n  \"schemaVersion\": \"1\",\n\n  // User's IoTHub Device Connection string in the format listed below.\n  \"deviceConnectionString\": \"HostName=<>;DeviceId=<>;SharedAccessKey=<>\",\n\n  // Path to the IoT Edge home dir, if left empty, a default home dir will be used\n  \"homeDir\": \"<EDGEHOMEDIR>\",\n\n  // IoT Edge device's DNS name;\n  // Specifying a FQDN is only required when operating the\n  // IoT Edge as a 'Gateway' for leaf device connectivity.\n  // If a FQDN is unavailable, the host name could be used. If left blank,\n  // the utility will determine the FQDN if available or the machine name.\n  // This hostname value is needed for certificate\n  // generation for the Edge Hub server. This certificate is used to enable\n  // TLS connections from IoT Edge modules and leaf devices.\n  \"hostName\": \"<Hostname>\",\n\n  // Log level setting for IoT Edge runtime diagnostics. \"info\" and \"debug\".\n  // are the supported levels and default is info. User should only\n  // modify this for debugging purposes.\n  \"logLevel\": \"info\",\n\n  // Configuration settings for the IoT Edge Runtime\n  \"security\": {\n\n    // Configuration of X.509 certificates; There are two options:\n    //  - Self Signed Certificates:   This mode is NOT secure and is only\n    //    (selfSigned)                intended for development purposes\n    //                                and quick start type scenarios.\n    //\n    //  - Pre Installed Certificates: When this is enabled, users are\n    //    (preInstalled)              expected to supply a \"Device CA\"\n    //                                certificate and a Edge Hub server\n    //                                certificate signed by this\n    //                                Device CA cert. This is more of\n    //                                a real world setup.\n    // The \"option\" key below selects any of the modes listed above.\n    \"certificates\": {\n      \"option\": \"selfSigned\",\n      \"selfSigned\": {\n        \"forceRegenerate\": false,\n        \"forceNoPasswords\": true\n      },\n\n      \"preInstalled\": {\n        \"deviceCACertificateFilePath\": \"\",\n        \"serverCertificateFilePath\": \"\"\n      }\n    }\n  },\n  // Section containing Configuration of IoT Edge Runtime Deployment and Host.\n  \"deployment\": {\n\n    // Currently \"docker\" is the only deployment type supported.\n    \"type\": \"docker\",\n\n    // Docker host settings\n    \"docker\": {\n      // Docker Daemon Socket URI; Under normal circumstances. Users should\n      // modify this according to what is supported on their host\n      \"uri\": \"unix:///var/run/docker.sock\",\n\n      // IoT Edge runtime image; Users may have to update this as newer images\n      // are released over time.\n      \"edgeRuntimeImage\": \"edge_repository_address/edge_image_name:version\",\n\n      // Users can add registries in this array for their custom modules.\n      // If there is no username or password associated with a repository,\n      // users should set the values as \"\".\n      // NOTE: This is a temporary configuration item required by the IoT Edge\n      // Longer term, users would be able to manage their repositories and\n      // credentials in the cloud using the IoTHub portal.\n      \"registries\": [\n        {\n          \"address\": \"example-repository-address-1\",\n          \"username\": \"example-username-1\",\n          \"password\": \"example-password-1\"\n        },\n        {\n          \"address\": \"example-repository-address-2\",\n          \"username\": \"example-username-2\",\n          \"password\": \"example-password-2\"\n        }\n      ],\n\n      // Logging options for the IoT Edge runtime. The format complies with\n      // the docker schema described here:\n      // https://docs.docker.com/engine/admin/logging/overview/\n      \"loggingOptions\": {\n        \"log-driver\": \"json-file\",\n        \"log-opts\": {\n          \"max-size\": \"10m\"\n        }\n      }\n    }\n  }\n```\n\n### Installation Troubleshooting\n\n#### Raspbian\n\nOn the raspbian platform, you may need to update pip or the setup tools:\n\n```\nsudo pip install --upgrade setuptools pip\n```\n\nThe Python installation may require some C libraries to be built, these libraries\nrequire development packages not installed by default:\n\n```\nsudo apt-get install python2.7-dev libffi-dev libssl-dev\n```\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/azure/iot-edge",
    "keywords": "azure iot edge",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "azure-iot-edge-runtime-ctl",
    "platform": "",
    "project_url": "https://pypi.org/project/azure-iot-edge-runtime-ctl/",
    "release_url": "https://pypi.org/project/azure-iot-edge-runtime-ctl/1.0.0rc11/",
    "requires_dist": [
      "check-manifest; extra == 'dev'",
      "pypiwin32; sys_platform == \"win32\"",
      "pyOpenSSL",
      "enum34",
      "docker[tls] (>=2.6)"
    ],
    "requires_python": "",
    "summary": "Azure IoT Edge Runtime Control",
    "version": "1.0.0rc11"
  },
  "releases": {
    "1.0.0rc11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "47cb95a833dfbf6452ec2d22b0ca7ea6",
          "sha256": "b15c93da6c630f743069c84ca7d14347d1af9636871df28f2e5f54eaafb7cc39"
        },
        "downloads": -1,
        "filename": "azure_iot_edge_runtime_ctl-1.0.0rc11-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47cb95a833dfbf6452ec2d22b0ca7ea6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 38094,
        "upload_time": "2017-11-11T02:55:29",
        "url": "https://files.pythonhosted.org/packages/57/61/1716c5d31f5db0e66e02847ea288ee7b22053ae8dcbcb2b6720ddc41e4e4/azure_iot_edge_runtime_ctl-1.0.0rc11-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4e1bdac8f9c15fc3fd6e4cbfb09cdec6",
          "sha256": "11ddb5a80384a2c39a68362ff6d9a30195049d2d5e417dcf87f61323f0f66ef4"
        },
        "downloads": -1,
        "filename": "azure-iot-edge-runtime-ctl-1.0.0rc11.tar.gz",
        "has_sig": false,
        "md5_digest": "4e1bdac8f9c15fc3fd6e4cbfb09cdec6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31461,
        "upload_time": "2017-11-11T02:55:31",
        "url": "https://files.pythonhosted.org/packages/d2/89/423440eb2576d0884e809cd9521a5eb2b6e6c62b429bc6e6e922ff31f715/azure-iot-edge-runtime-ctl-1.0.0rc11.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "47cb95a833dfbf6452ec2d22b0ca7ea6",
        "sha256": "b15c93da6c630f743069c84ca7d14347d1af9636871df28f2e5f54eaafb7cc39"
      },
      "downloads": -1,
      "filename": "azure_iot_edge_runtime_ctl-1.0.0rc11-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "47cb95a833dfbf6452ec2d22b0ca7ea6",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 38094,
      "upload_time": "2017-11-11T02:55:29",
      "url": "https://files.pythonhosted.org/packages/57/61/1716c5d31f5db0e66e02847ea288ee7b22053ae8dcbcb2b6720ddc41e4e4/azure_iot_edge_runtime_ctl-1.0.0rc11-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "4e1bdac8f9c15fc3fd6e4cbfb09cdec6",
        "sha256": "11ddb5a80384a2c39a68362ff6d9a30195049d2d5e417dcf87f61323f0f66ef4"
      },
      "downloads": -1,
      "filename": "azure-iot-edge-runtime-ctl-1.0.0rc11.tar.gz",
      "has_sig": false,
      "md5_digest": "4e1bdac8f9c15fc3fd6e4cbfb09cdec6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 31461,
      "upload_time": "2017-11-11T02:55:31",
      "url": "https://files.pythonhosted.org/packages/d2/89/423440eb2576d0884e809cd9521a5eb2b6e6c62b429bc6e6e922ff31f715/azure-iot-edge-runtime-ctl-1.0.0rc11.tar.gz"
    }
  ]
}