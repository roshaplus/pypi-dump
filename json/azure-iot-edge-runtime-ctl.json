{
  "info": {
    "author": "Azure IoT Edge",
    "author_email": "edgedevs@microsoft.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "Azure IoT Edge Runtime Control\n==============================\n\nIntroduction\n------------\n\nThe Azure IoT Edge Runtime Control utility assists a user in managing\nand controlling the IoT Edge runtime.\n\nSpecifically, it can help: \\* Initial setup or bootstrap \\* Certificate\nprovisioning \\* Starting/Stopping and other IoT Edge runtime control\noptions.\n\nPrerequisites\n-------------\n\n-  Python 2.7+\n-  Python setuptools (for pip installation)\n-  Docker\n\nInstallation\n------------\n\nPython\n~~~~~~\n\nInstallation requires python and setuptools. Download `python\nhere <https://www.python.org/downloads/>`__.\n\nOn Windows, make sure the python.exe and python Scripts directory are on\nyour path. More information for `installing python on\nWindows <https://docs.python.org/2/using/windows.html>`__ can be found\nhere.\n\nNote: See the Installation Troubleshooting section below if you run into\nany problems.\n\nPython\n~~~~~~\n\n- Installation requires python and setuptools. Download `python here <https://www.python.org/downloads/>`__.\n\n- On Windows, make sure the python.exe and python Scripts directory are on your path. More information for `installing python on Windows <https://docs.python.org/2/using/windows.html>`__ can be found here.\n\n- **Note:** See the Installation Troubleshooting section below if you run into any problems.\n\n\nDocker\n~~~~~~\n- Follow the instructions here to get Docker installed on your host machine https://docs.microsoft.com/en-us/azure/iot-edge\n\n\n **Enabling Docker on Windows Subsystem for Linux (WSL)**\n\n   **Note:** *This section applies to Windows machines only and usually targets developer environments.*\n\n - To get iotedgectl to work in WSL here are additional installation steps that need to be done.\n\n 1. Do not install Docker in WSL, instead first install Docker on your Windows machine.\n\n  - Docker installed on the Windows machine can be used directly within the bash shell.\n\n 2. In Docker Settings Window under *'General'*, check *\"Expose Daemon on tcp://localhost:2375 without TLS\"*\n\n 3. Next steps require to the run from a bash shell\n\n  a. Add the docker executable files to the **$PATH** environment variable and set up aliases.\n\n   - Edit file *~/.bashrc* and add these lines:\n\n    ::\n\n     PATH=\"$HOME/bin:$HOME/.local/bin:$PATH\"\n     PATH=\"$PATH:/mnt/c/Program\\ Files/Docker/Docker/resources/bin\"\n     alias docker=docker.exe\n     alias docker-machine=docker-machine.exe\n     alias docker-compose=docker-compose.exe\n     export DOCKER_HOST=\"tcp://localhost:2375\"\n\n   - Save and close the *~/.bashrc* file\n\n  b. Add environment variable **DOCKER_HOST** to sudoers.\n\n   - Edit sudoers configuration by running\n\n    ::\n\n     sudo visudo\n\n  - Add this line to the file\n\n   ::\n\n    Defaults env_keep += \"DOCKER_HOST\"\n\n  - Save and close the file\n\n\n c. Ensure the environment variables get exported\n\n  ::\n\n   source ~/.bashrc\n\n d. Test installation by running any docker command. Examples:\n\n  ::\n\n   docker ps\n   docker images\n\n\n\nInstall the tool\n~~~~~~~~~~~~~~~~\n\nIn a terminal, complete the following steps run\n``pip install azure-iot-edge-runtime-ctl`` (may need to run as\nadministrator)\n\nThis should install the ``iotedgectl`` tool on your path.\n\nSee `Installation Troubleshooting <#installation-troubleshooting>`__ for\ncommon installation problems.\n\nHow To Run:\n-----------\n\nThe main commands to operate the IoT Edge runtime are: setup, start,\nrestart, stop, status, update, login and uninstall.\n\n-  **setup**: This command accepts user input to configure the runtime.\n   The required configuration files and certificates to operate the IoT\n   Edge are created as part of this step.\n\n   IoT Edge can be setup either by using an input configuration file and\n   command line (CLI) argument --config-file or by specifying the\n   various configuration values via the *setup* CLI arguments. If using the\n   --config-file argument, all other CLI arguments will be ignored.\n\n   The 'setup' command, may need to be run with admin (sudo) privileges. One\n   resulting output of this command is a configuration file generated in JSON\n   format. The directory where this file is generated is configurable and if\n   unspecified, default paths (see below) will be used.\n\n   There are 3 ways the Edge config directory is set, here they are in the order\n   of precedence:\n\n    1. Environment variable **EDGECONFIGDIR** - When using this, an absolute\n       path to a directory on the host must be specified as the value of this\n       variable.\n\n    2. iotedgectl CLI options to specify a directory path.\n\n     * --config-file: Configure the input JSON config file with the directory path as described in this document below.\n\n     * --edge-config-dir: When using this option, an absolute path to a directory on the host must be specified.\n\n     *Note*: If environment variable **EDGECONFIGDIR** and a CLI option is specified,\n     the environment variable will take precedence and the CLI option will be ignored.\n\n    3. If none of the above are set, the following default paths will be chosen:\n\n     ::\n\n        Default IoT Edge Configuration Host Paths:\n        ------------------------------------------\n            Linux:   /etc/azure-iot-edge\n            Windows: %PROGRAMDATA%\\azure-iot-edge\\config\n            MacOS:   /etc/azure-iot-edge\n\n\n-  **start**: This command starts the IoT Edge runtime. This command downloads\n   the Edge Agent image unless already available on the host machine.\n   Configuration information specified during the **setup** step above\n   is supplied to the Edge Agent when it is instantiated.\n\n-  **stop**: This command stops the IoT Edge runtime. Note: The Edge\n   modules are stopped and not removed.\n\n-  **restart**: This command restarts the IoT Edge runtime and behaves\n   like start if the Edge runtime does not exist on the host. If a runtime is\n   active, it will be stopped along with any modules deployed by the\n   Edge runtime. Subsequently, the Edge runtime and all other modules will be\n   restarted again.\n\n-  **status**: Prints the current state of the IoT Edge runtime.\n\n-  **uninstall**: This command stops and uninstalls the IoT Edge\n   runtime. Running uninstall will delete the configuration file,\n   certificates. Additionally, the IoT Edge runtime and all modules will\n   be removed.\n\n-  **update**: This command accepts an Edge Agent image as input and\n   configures the IoT Edge with this new image. Running this command\n   will update the IoT Edge configuration file with this new image and\n   the existing Edge Agent will be stopped, its older image removed and\n   restarted with the new image.\n\n-  **login**: This command accepts a registry server, username and\n   credentials as input and configures the IoT Edge with this data.\n   Running login will update the IoT Edge configuration file with the\n   registry information. This is useful for users who host their module\n   images on private registries. Note: in the event the Edge runtime is\n   active and running, the Edge Agent will be stopped and the existing\n   instance will be removed and restarted with the new credentials.\n\nHere are a few sample command invocations:\n\n* Print Help and Exit\n\n ::\n\n    $> iotedgectl --help\n\n* Setup the IoT Edge Runtime using an IoT Edge Host Configuration file. Please see `IoT Edge Host Configuration File Description <#edge-host-configuration-file-description>`__\n\n ::\n\n    $> iotedgectl setup --help\n    $> iotedgectl setup --config-file edge_config.json\n    $> iotedgectl --verbose DEBUG setup --config-file edge_config.json\n    Note: When specifying the homeDir path on Windows please use \"C:\\\\example\\\\edge-home\"\n\n* Setup the IoT Edge Runtime using manually specified command line arguments\n\n ::\n\n    $> iotedgectl setup --connection-string \"HostName=<>;DeviceId=<>;SharedAccessKey=<>\"\n    Note: When specifying the connection string ensure that it is surrounded by double quotes \".\n    In general, anything with a semicolon should be put into quotes.\n\n* Start the IoT Edge Runtime\n\n ::\n\n    $> iotedgectl start\n    $> iotedgectl --verbose INFO start\n\n* Restart the IoT Edge Runtime\n\n ::\n\n    $> iotedgectl restart\n    $> iotedgectl --verbose INFO restart\n\n* Stop the IoT Edge Runtime\n\n ::\n\n    $> iotedgectl stop\n    $> iotedgectl --verbose INFO stop\n\n* Uninstall the IoT Edge Runtime\n\n ::\n\n    $> iotedgectl uninstall\n    $> iotedgectl --verbose DEBUG uninstall\n\n* Print the current status of the IoT Edge Runtime\n\n ::\n\n    $> iotedgectl status\n    $> iotedgectl --verbose INFO status\n\n\nIoT Edge Home Directory Description\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe IoT Edge runtime needs a directory on the host machine in order to\nexecute. This directory will contain the necessary configuration files,\ncertificates and module specific files. This is called the *EDGEHOMEDIR*.\nTo configure the directory path of the EDGEHOMEDIR, the CLI option\n'iotedgectl setup --edge-home-dir <path>' can be used.\nIn case it is unspecified, the default directories listed below will be used\nas the EDGEHOMEDIR:\n\n::\n\n    Default Host Paths:\n    -------------------\n        Linux:   /var/lib/azure-iot-edge\n        Windows: %PROGRAMDATA%\\azure-iot-edge\\data\n        MacOS:   /var/lib/azure-iot-edge\n\nWhen using the --config-file option, an absolute directory path is required to setup the Edge runtime (see below).\n\n*Note*: If the directory does not exist, it will be created.\n\nAs the IoT Edge runtime is executed, the following file system structure\nis created under *EDGEHOMEDIR*.\n\n::\n\n    EDGEHOMEDIR Structure:\n    -----------------------\n        EDGEHOMEDIR\n            .\n            +-- certs   -- This directory is created by the iotedgectl utility when generating\n            |              either self signed certificates or Device CA based certificates.\n            +-- modules -- This directory is created by the iotedgectl utility to host\n                           all the Edge Module specific files.\n\nIoT Edge Host Configuration File Description\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe following section describes the various configuration items required\nto setup the IoT Edge. \\* When using the command line options to setup\nthe IoT Edge, this file is auto generated. \\* When using the\n--config-file to setup the IoT Edge device, a configuration file with\nappropriate input data would have to provided.\n\n::\n\n      // Config file format schema; Users should not need to modify this.\n      \"schemaVersion\": \"1\",\n\n      // IoTHub Device Connection string in the format listed below.\n      // A connection string is required when using the --config-file option\n      // to setup the Edge runtime.\n      \"deviceConnectionString\": \"HostName=<>;DeviceId=<>;SharedAccessKey=<>\",\n\n      // Absolute path to the IoT Edge home dir.\n      // An absolute directory path is required when using the --config-file option\n      // to setup the Edge runtime.\n      // If the specified directory does not exist, it will be created.\n      // For Windows paths, use \\\\ as the path separator. Example: C:\\\\path\\\\file.ext\n      \"homeDir\": \"<EDGEHOMEDIR>\",\n\n      // Absolute path to the IoT Edge configuration dir. This is an optional\n      // configuration item. Please review the setup command section above to see\n      // how this field is used by this utility.\n      // An absolute directory path is required when using the --config-file option\n      // to setup the Edge runtime.\n      // If the specified directory does not exist, it will be created.\n      // For Windows paths, use \\\\ as the path separator. Example: C:\\\\path\\\\file.ext\n      \"configDir\": \"<EDGECONFIGDIR>\",\n\n      // IoT Edge device's DNS name;\n      // Specifying a FQDN is only required when operating the\n      // IoT Edge as a 'Gateway' for leaf device connectivity.\n      // If a FQDN is unavailable, the host name (or machine name) could be used.\n      // This typically occurs when the host is not domain registered such as\n      // a device on a home Wifi network. This should work just fine for Edge module\n      // to Edge Hub communication but may not work for leaf device connectivity.\n      // This hostname value is needed specifically to name the Edge Hub server\n      // and is also used to generate the Edge Hub server certificate.\n      // This server certificate is used to enable TLS connections from IoT Edge\n      // modules and leaf devices.\n      // The DNS host name is required when using the --config-file option\n      // to setup the Edge runtime.\n      \"hostName\": \"<Hostname>\",\n\n      // Log level setting for IoT Edge runtime diagnostics. \"info\" and \"debug\".\n      // are the supported levels and default is info. This should only\n      // modified for debugging purposes.\n      // A log level is required when using the --config-file option\n      // to setup the Edge runtime.\n      \"logLevel\": \"info\",\n\n      // Configuration settings for the IoT Edge Runtime\n      \"security\": {\n\n        // Configuration of X.509 certificates; There are two options:\n        //  - Self Signed Certificates:   This mode is NOT secure and is only\n        //    (selfSigned)                intended for development purposes\n        //                                and quick start type scenarios.\n        //\n        //  - Pre Installed Certificates: When this is enabled, it is expected\n        //    (preInstalled)              that the \"Device CA\" and \"Owner CA\"\n        //                                certificates and their corresponding\n        //                                certificate chain be provided. Additionally,\n        //                                the Device CA private key and its\n        //                                optional passphrase should be provided.\n        //                                This is more of a real world setup\n        //                                where the IoT Edge is configured to run\n        //                                as a gateway.\n        //\n        // The \"option\" key below selects any of the modes listed above.\n        // An option is required when using the --config-file option\n        // to setup the Edge runtime.\n        \"certificates\": {\n          \"option\": \"selfSigned\",\n          \"selfSigned\": {\n            // If the boolean value of forceNoPasswords is true,\n            // it is not required to supply valid paths\n            // to the Edge Device or Edge Agent private key\n            // passphrase (password) files described below.\n            \"forceNoPasswords\": true\n\n            // Absolute path to the passphrase file for the Edge Device private key.\n            // The passphrase must be between 4 - 1023 characters in length and the\n            // file should be a regular ascii text file containing the passphrase.\n            \"deviceCAPassphraseFilePath\": \"\",\n\n            // Absolute path to the passphrase file for the Edge Agent private key.\n            // The passphrase must be between 4 - 1023 characters in length and the\n            // file should be a regular ascii text file containing the passphrase.\n            \"agentCAPassphraseFilePath\": \"\"\n          },\n          \"preInstalled\": {\n            // Absolute path to the Edge Owner CA certificate file in X.509 PEM format.\n            // An absolute file path is required when using the --config-file option\n            // and 'preInstalled' is the certificate option selected\n            // to setup the Edge runtime.\n            // For Windows paths, use \\\\ as the path separator. Example: C:\\\\path\\\\file.ext\n            \"ownerCACertificateFilePath\": \"\",\n\n            // Absolute path to the Edge Device CA certificate file in X.509 PEM format\n            // An absolute file path is required when using the --config-file option\n            // and 'preInstalled' is the certificate option selected\n            // to setup the Edge runtime.\n            // For Windows paths, use \\\\ as the path separator. Example: C:\\\\path\\\\file.ext\n            \"deviceCACertificateFilePath\": \"\",\n\n            // Absolute path to the Edge Device CA certificate chain file in X.509 PEM format.\n            // This is the certificate chain from the Owner CA up to and including the\n            // Device CA certificate.\n            // An absolute file path is required when using the --config-file option\n            // and 'preInstalled' is the certificate option selected\n            // to setup the Edge runtime.\n            // For Windows paths, use \\\\ as the path separator. Example: C:\\\\path\\\\file.ext\n            \"deviceCAChainCertificateFilePath\": \"\",\n\n            // Absolute path to the Edge Device CA certificate's private key\n            // file in X.509 PEM format.\n            // An absolute file path is required when using the --config-file option\n            // and 'preInstalled' is the certificate option selected\n            // to setup the Edge runtime.\n            // For Windows paths, use \\\\ as the path separator. Example: C:\\\\path\\\\file.ext\n            // Note: If a passphrase was used to generate the private key,\n            // the passphrase must be provided via the deviceCAPassphraseFilePath\n            // option described below.\n            \"deviceCAPrivateKeyFilePath\": \"\",\n\n            // Absolute path to the passphrase file for the Edge Device private key.\n            // The passphrase must be between 4 - 1023 characters in length and the\n            // file should be regular ascii text file containing the passphrase.\n            // This would need to be provided only if the Edge Device CA private\n            // was created with a passphrase.\n            // For Windows paths, use \\\\ as the path separator. Example: C:\\\\path\\\\file.ext\n            \"deviceCAPassphraseFilePath\": \"\",\n\n            // If the boolean value of forceNoPasswords is true,\n            // it is not required to supply valid paths\n            // to the Edge Agent private key password (passphrase) file.\n            \"forceNoPasswords\": true\n\n            // Absolute path to the passphrase file for the Edge Agent private key.\n            // The passphrase must be between 4 - 1023 characters in length and the\n            // file should be a regular ascii text file containing the passphrase.\n            // For Windows paths, use \\\\ as the path separator. Example: C:\\\\path\\\\file.ext\n            \"agentCAPassphraseFilePath\": \"\"\n          },\n          // Certificate subject data.\n          // These are values that are used when auto generating\n          // any certificates required for operating the IoT Edge.\n          // These values can be modified as needed\n          // and the values for all the fields can be empty strings.\n          // These values are not when using the preInstalled certificate\n          // option, rather they are determined from the Device CA certificate.\n          \"subject\": {\n            \"countryCode\": \"US\",\n            \"state\": \"Washington\",\n            \"locality\": \"Redmond\",\n            \"organization\": \"Default Edge Organization\",\n            \"organizationUnit\": \"Edge Unit\",\n            \"commonName\": \"Edge Device CA\"\n          }\n        }\n      },\n      // Section containing Configuration of IoT Edge Runtime Deployment and Host.\n      \"deployment\": {\n\n        // Currently \"docker\" is the only deployment type supported.\n        // Specifying this value is required when using the --config-file option\n        // to setup the Edge runtime.\n        \"type\": \"docker\",\n\n        // Docker host settings\n        \"docker\": {\n          // Docker Daemon socket URI; This is the end point that the Edge Agent\n          // will use to communicate with the daemon. Please note this may not be\n          // the same docker URI end point that a user might use on their host.\n          // This is true when running Linux containers on Windows.\n          // A valid URI is required when using the --config-file option\n          // to setup the Edge runtime.\n          \"uri\": \"unix:///var/run/docker.sock\",\n\n          // IoT Edge runtime image; This value may need to be updated as newer\n          // images are released over time either by updating the config file and\n          // using --config-file or the **update** command.\n          // A runtime image is required when using the --config-file option\n          // to setup the Edge runtime.\n          \"edgeRuntimeImage\": \"edge_repository_address/edge_image_name:version\",\n\n          // Docker registries can be added in this array for custom modules.\n          // If there is no username or password associated with a registry,\n          // there is no need to add any data here.\n          // NOTE: This is a temporary configuration item required by the IoT Edge\n          // Longer term, it will be possible to manage registries and\n          // credentials using the IoTHub portal.\n          // Adding a registry to the array can be done either by updating the\n          // config file and using --config-file or the **login** command.\n          \"registries\": [\n            {\n              \"address\": \"example-repository-address-1\",\n              \"username\": \"example-username-1\",\n              \"password\": \"example-password-1\"\n            },\n            {\n              \"address\": \"example-repository-address-2\",\n              \"username\": \"example-username-2\",\n              \"password\": \"example-password-2\"\n            }\n          ],\n\n          // Logging options for the IoT Edge runtime. The format complies with\n          // the docker schema described here:\n          // https://docs.docker.com/engine/admin/logging/overview/\n          // Appropriate log configuration values are required when using the\n          // --config-file option to setup the Edge runtime.\n          \"loggingOptions\": {\n            \"log-driver\": \"json-file\",\n            \"log-opts\": {\n              \"max-size\": \"10m\"\n            }\n          }\n        }\n      }\n\nInstallation Troubleshooting\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRaspbian\n^^^^^^^^\n\nOn the raspbian platform, you may need to update pip or the setup tools:\n\n::\n\n    sudo pip install --upgrade setuptools pip\n\nThe Python installation may require some C libraries to be built, these\nlibraries require development packages not installed by default:\n\n::\n\n    sudo apt-get install python2.7-dev libffi-dev libssl-dev\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/azure/iot-edge",
    "keywords": "azure iot edge",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "azure-iot-edge-runtime-ctl",
    "platform": "",
    "project_url": "https://pypi.org/project/azure-iot-edge-runtime-ctl/",
    "release_url": "https://pypi.org/project/azure-iot-edge-runtime-ctl/1.0.0rc19/",
    "requires_dist": [
      "mock; extra == 'test'",
      "coverage; extra == 'test'",
      "check-manifest; extra == 'dev'",
      "pypiwin32 (<222); sys_platform == \"win32\"",
      "pyOpenSSL",
      "enum34",
      "docker[tls] (==2.6)"
    ],
    "requires_python": "",
    "summary": "Azure IoT Edge Runtime Control",
    "version": "1.0.0rc19"
  },
  "releases": {
    "1.0.0rc11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "47cb95a833dfbf6452ec2d22b0ca7ea6",
          "sha256": "b15c93da6c630f743069c84ca7d14347d1af9636871df28f2e5f54eaafb7cc39"
        },
        "downloads": -1,
        "filename": "azure_iot_edge_runtime_ctl-1.0.0rc11-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47cb95a833dfbf6452ec2d22b0ca7ea6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 38094,
        "upload_time": "2017-11-11T02:55:29",
        "url": "https://files.pythonhosted.org/packages/57/61/1716c5d31f5db0e66e02847ea288ee7b22053ae8dcbcb2b6720ddc41e4e4/azure_iot_edge_runtime_ctl-1.0.0rc11-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4e1bdac8f9c15fc3fd6e4cbfb09cdec6",
          "sha256": "11ddb5a80384a2c39a68362ff6d9a30195049d2d5e417dcf87f61323f0f66ef4"
        },
        "downloads": -1,
        "filename": "azure-iot-edge-runtime-ctl-1.0.0rc11.tar.gz",
        "has_sig": false,
        "md5_digest": "4e1bdac8f9c15fc3fd6e4cbfb09cdec6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31461,
        "upload_time": "2017-11-11T02:55:31",
        "url": "https://files.pythonhosted.org/packages/d2/89/423440eb2576d0884e809cd9521a5eb2b6e6c62b429bc6e6e922ff31f715/azure-iot-edge-runtime-ctl-1.0.0rc11.tar.gz"
      }
    ],
    "1.0.0rc13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "976edcfd0560d05622a4972c381533a4",
          "sha256": "4fff7f0e5afd5c3aca7a2ac07b9b7af3d3a40b477432dbced0f76d20c7aee468"
        },
        "downloads": -1,
        "filename": "azure_iot_edge_runtime_ctl-1.0.0rc13-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "976edcfd0560d05622a4972c381533a4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 46042,
        "upload_time": "2017-11-15T04:42:36",
        "url": "https://files.pythonhosted.org/packages/9c/1f/900bb21d98a332083e3ff0ee2b34b3425f22677c32719ed77f9b9803c299/azure_iot_edge_runtime_ctl-1.0.0rc13-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "5c8dc93691d89681830bfc7af3264b46",
          "sha256": "76eed5b40ca286d6ae8790aad60ed5a5ea958baed8f5389137242f22c9eff36e"
        },
        "downloads": -1,
        "filename": "azure-iot-edge-runtime-ctl-1.0.0rc13.tar.gz",
        "has_sig": false,
        "md5_digest": "5c8dc93691d89681830bfc7af3264b46",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39034,
        "upload_time": "2017-11-15T04:42:37",
        "url": "https://files.pythonhosted.org/packages/d5/24/70683448243956541f32f2c2a77b12c9f9d91c84b69a969842ff7001573b/azure-iot-edge-runtime-ctl-1.0.0rc13.tar.gz"
      }
    ],
    "1.0.0rc14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6bab1f1c8e9df7130bd500bf1bbc9105",
          "sha256": "46645c02d5620631cab495486e0eb6af47bfc96ec0cc140e095c9ea25ff1aea9"
        },
        "downloads": -1,
        "filename": "azure_iot_edge_runtime_ctl-1.0.0rc14-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6bab1f1c8e9df7130bd500bf1bbc9105",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 46084,
        "upload_time": "2017-11-22T22:14:56",
        "url": "https://files.pythonhosted.org/packages/22/51/41c972427bb410521fc72772c59a140fe841f7c51edb45aefc44e2d202ad/azure_iot_edge_runtime_ctl-1.0.0rc14-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6d00e373c03e0c104b234373268314e7",
          "sha256": "2435849a59204b92a50623c67267d51c233029de30063c0c26d475c2a9f3c402"
        },
        "downloads": -1,
        "filename": "azure-iot-edge-runtime-ctl-1.0.0rc14.tar.gz",
        "has_sig": false,
        "md5_digest": "6d00e373c03e0c104b234373268314e7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 39089,
        "upload_time": "2017-11-22T22:14:57",
        "url": "https://files.pythonhosted.org/packages/85/12/2de6ec3f9b99f70483531ebbcd81992cc0b0dec07cce64c4342094a31b67/azure-iot-edge-runtime-ctl-1.0.0rc14.tar.gz"
      }
    ],
    "1.0.0rc17": [
      {
        "comment_text": "",
        "digests": {
          "md5": "16abe73817c87b69cd70ad8fe994937e",
          "sha256": "e37df447b3f1fe199edb3e7ade2440ef0a966247661693843d847cf0103ce7d9"
        },
        "downloads": -1,
        "filename": "azure_iot_edge_runtime_ctl-1.0.0rc17-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "16abe73817c87b69cd70ad8fe994937e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 51698,
        "upload_time": "2017-12-20T22:27:26",
        "url": "https://files.pythonhosted.org/packages/0b/ee/95081c9d188c9277873608fb0093d8c836842feaabbf7d008f3ac4035c85/azure_iot_edge_runtime_ctl-1.0.0rc17-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "519370e8c1a87f9ff96c94a7201f934f",
          "sha256": "47f9c0df466e0773ba35c24eeaed4cfda9b1a020a3b50938c122b46039faff46"
        },
        "downloads": -1,
        "filename": "azure-iot-edge-runtime-ctl-1.0.0rc17.tar.gz",
        "has_sig": false,
        "md5_digest": "519370e8c1a87f9ff96c94a7201f934f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 40654,
        "upload_time": "2017-12-20T22:27:27",
        "url": "https://files.pythonhosted.org/packages/76/ff/dcb1c1d55dc69a809e6f4b1aa3a83eba578e696b4461af26cacc4b00a9f8/azure-iot-edge-runtime-ctl-1.0.0rc17.tar.gz"
      }
    ],
    "1.0.0rc19": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5e3063428e67aa47408bdbd323763b8d",
          "sha256": "cb93c0d8f46da706fe29ed348aac5d6e77124cabcf6a212a4d6de0a5ea03b322"
        },
        "downloads": -1,
        "filename": "azure_iot_edge_runtime_ctl-1.0.0rc19-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e3063428e67aa47408bdbd323763b8d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 62586,
        "upload_time": "2018-01-27T01:03:11",
        "url": "https://files.pythonhosted.org/packages/fc/b0/d9de006c50009b4dfa47af8966b85b26c0abf258ea50f11abcebc3ad4c69/azure_iot_edge_runtime_ctl-1.0.0rc19-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "662229b77b69152ff22b412c92856eeb",
          "sha256": "d6edf0bc35ad9898485d93a1dbea743e12a6f1ca7ef6c7e37a5e352d06208b46"
        },
        "downloads": -1,
        "filename": "azure-iot-edge-runtime-ctl-1.0.0rc19.tar.gz",
        "has_sig": false,
        "md5_digest": "662229b77b69152ff22b412c92856eeb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48055,
        "upload_time": "2018-01-27T01:03:12",
        "url": "https://files.pythonhosted.org/packages/36/6e/298d4ea65c292f55ac0fa444a18b26df32efaa0edc749a63d45de395c08f/azure-iot-edge-runtime-ctl-1.0.0rc19.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5e3063428e67aa47408bdbd323763b8d",
        "sha256": "cb93c0d8f46da706fe29ed348aac5d6e77124cabcf6a212a4d6de0a5ea03b322"
      },
      "downloads": -1,
      "filename": "azure_iot_edge_runtime_ctl-1.0.0rc19-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5e3063428e67aa47408bdbd323763b8d",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 62586,
      "upload_time": "2018-01-27T01:03:11",
      "url": "https://files.pythonhosted.org/packages/fc/b0/d9de006c50009b4dfa47af8966b85b26c0abf258ea50f11abcebc3ad4c69/azure_iot_edge_runtime_ctl-1.0.0rc19-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "662229b77b69152ff22b412c92856eeb",
        "sha256": "d6edf0bc35ad9898485d93a1dbea743e12a6f1ca7ef6c7e37a5e352d06208b46"
      },
      "downloads": -1,
      "filename": "azure-iot-edge-runtime-ctl-1.0.0rc19.tar.gz",
      "has_sig": false,
      "md5_digest": "662229b77b69152ff22b412c92856eeb",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 48055,
      "upload_time": "2018-01-27T01:03:12",
      "url": "https://files.pythonhosted.org/packages/36/6e/298d4ea65c292f55ac0fa444a18b26df32efaa0edc749a63d45de395c08f/azure-iot-edge-runtime-ctl-1.0.0rc19.tar.gz"
    }
  ]
}