{
  "info": {
    "author": "Syrus Akbary",
    "author_email": "me@syrusakbary.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "WebOb-GraphQL\n=============\n\n|Build Status| |Coverage Status| |PyPI version|\n\nAdds GraphQL support to your WebOb application.\n\nUsage\n-----\n\nJust use the ``serve_graphql_request`` function from ``webob_graphql``\n\nPyramid\n~~~~~~~\n\n.. code:: python\n\n    from pyramid.view import view_config\n\n    from webob_graphql import serve_graphql_request\n\n\n    @view_config(\n        route_name='graphql',\n        # The serve_graphql_request method will detect what's the best renderer\n        # to use, so it will do the json render automatically.\n        # In summary, don't use the renderer='json' here :)\n    )\n    def graphql_view(request):\n        return serve_graphql_request(request, schema)\n\n        # Optional, for adding batch query support (used in Apollo-Client)\n        return serve_graphql_request(request, schema, batch_enabled=True)\n\nSupported options\n~~~~~~~~~~~~~~~~~\n\n-  ``schema``: The ``GraphQLSchema`` object that you want the view to\n   execute when it gets a valid request.\n-  ``context``: A value to pass as the ``context`` to the ``graphql()``\n   function.\n-  ``root_value``: The ``root_value`` you want to provide to\n   ``executor.execute``.\n-  ``format_error``: If you want to use a custom error formatter.\n-  ``pretty``: Whether or not you want the response to be pretty printed\n   JSON.\n-  ``executor``: The ``Executor`` that you want to use to execute\n   queries.\n-  ``graphiql_enabled``: If ``True`` (default), may present\n   `GraphiQL <https://github.com/graphql/graphiql>`__ when loaded\n   directly from a browser (a useful tool for debugging and\n   exploration).\n-  ``render_graphiql``: A custom function for rendering GraphiQL (this\n   function should have the arguments ``result`` and ``params``).\n-  ``batch_enabled``: Enable batch support (for using in\n   `Apollo-Client <http://dev.apollodata.com/core/network.html#query-batching>`__\n   or\n   `ReactRelayNetworkLayer <https://github.com/nodkz/react-relay-network-layer>`__)\n\n.. |Build Status| image:: https://travis-ci.org/graphql-python/webob-graphql.svg?branch=master\n   :target: https://travis-ci.org/graphql-python/webob-graphql\n.. |Coverage Status| image:: https://coveralls.io/repos/graphql-python/webob-graphql/badge.svg?branch=master&service=github\n   :target: https://coveralls.io/github/graphql-python/webob-graphql?branch=master\n.. |PyPI version| image:: https://badge.fury.io/py/webob-graphql.svg\n   :target: https://badge.fury.io/py/webob-graphql",
    "docs_url": null,
    "download_url": "https://github.com/graphql-python/webob-graphql/releases",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/graphql-python/webob-graphql",
    "keywords": "api graphql protocol rest webob",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "WebOb-GraphQL",
    "platform": "any",
    "project_url": "https://pypi.org/project/WebOb-GraphQL/",
    "release_url": "https://pypi.org/project/WebOb-GraphQL/1.0.dev20170404001/",
    "requires_python": null,
    "summary": "Adds GraphQL support to your WebOb (Pyramid/Pylons/...) application",
    "version": "1.0.dev20170404001"
  },
  "releases": {
    "1.0.dev20170404001": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ba7f801efa94fdd564a4991b7eb60857",
          "sha256": "28401d9b88b8d92a999e96efede784e29a8783525cbe478a2fa0c9315884fd82"
        },
        "downloads": 62,
        "filename": "WebOb-GraphQL-1.0.dev20170404001.tar.gz",
        "has_sig": false,
        "md5_digest": "ba7f801efa94fdd564a4991b7eb60857",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7142,
        "upload_time": "2017-04-05T07:07:07",
        "url": "https://files.pythonhosted.org/packages/80/93/b0cf39ff70b61a572cab64e47ebc37b1687d8496f16f2f42cf2616490a81/WebOb-GraphQL-1.0.dev20170404001.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ba7f801efa94fdd564a4991b7eb60857",
        "sha256": "28401d9b88b8d92a999e96efede784e29a8783525cbe478a2fa0c9315884fd82"
      },
      "downloads": 62,
      "filename": "WebOb-GraphQL-1.0.dev20170404001.tar.gz",
      "has_sig": false,
      "md5_digest": "ba7f801efa94fdd564a4991b7eb60857",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7142,
      "upload_time": "2017-04-05T07:07:07",
      "url": "https://files.pythonhosted.org/packages/80/93/b0cf39ff70b61a572cab64e47ebc37b1687d8496f16f2f42cf2616490a81/WebOb-GraphQL-1.0.dev20170404001.tar.gz"
    }
  ]
}