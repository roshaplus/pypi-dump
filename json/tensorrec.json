{
  "info": {
    "author": "James Kirk",
    "author_email": "james.f.kirk@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# TensorRec\nA TensorFlow recommendation algorithm and framework in Python.\n\n[![Build Status](https://travis-ci.org/jfkirk/tensorrec.svg?branch=master)](https://travis-ci.org/jfkirk/tensorrec) [![Gitter chat](https://badges.gitter.im/tensorrec/gitter.png)](https://gitter.im/tensorrec)\n\n## What is TensorRec?\nTensorRec is a Python recommendation system that allows you to quickly develop recommendation algorithms and customize them using TensorFlow.\n\nTensorRec lets you to customize your recommendation system's embedding functions and loss functions while TensorRec handles the data manipulation, scoring, and ranking to generate recommendations.\n\nA TensorRec system consumes three pieces of data: `user_features`, `item_features`, and `interactions`. It uses this data to learn to make and rank recommendations.\n\nFor more information, and for an outline of this project, please read [this blog post](https://medium.com/@jameskirk1/tensorrec-a-recommendation-engine-framework-in-tensorflow-d85e4f0874e8).\n\n## TODO\nImmediate plans for development of TensorRec include:\n1. Documentation of TensorRec class and methods\n2. Implementation of WARP loss, or an alternate pairwise loss solution\n3. Implementation of more evaluation methods (AUC, F score, etc)\n4. Integration of publicly available data sets (MovieLens, etc)\n\n## Example: Input data\n\nThe following examples show what user/item features and interactions would look like in a TensorRec system meant to recommend business consulting projects (items) to consultants (users).\n\nThe data is represented in matrices. TensorRec can consume these matrices as any `scipy.sparse` matrix.\n\n### User features:\n\n![user_features](https://cdn-images-1.medium.com/max/1600/1*43Be-sAmktN9HYvseA3mng.png)\n\n### Item features:\n\n![item_features](https://cdn-images-1.medium.com/max/1600/1*56TwD4Sh5A2SEGvl1S_82g.png)\n\n### Interactions:\n\n![interactions](https://cdn-images-1.medium.com/max/1600/1*tfnTAxGB-SSY8tV_Mrw2CQ.png)\n\nImages from [Medium](https://medium.com/product-at-catalant-technologies/using-lightfm-to-recommend-projects-to-consultants-44084df7321c)\n\n## Example: Basic usage\n```python\nimport numpy as np\nimport tensorrec\n\n# Build the model with default parameters\nmodel = tensorrec.TensorRec()\n\n# Generate some dummy data\ninteractions, user_features, item_features = tensorrec.util.generate_dummy_data(num_users=100,\n                                                                                num_items=150,\n                                                                                interaction_density=.05)\n\n# Fit the model for 5 epochs\nmodel.fit(interactions, user_features, item_features, epochs=5, verbose=True)\n\n# Predict scores for user 75 on items 100, 101, and 102\npredictions = model.predict(user_ids=[75, 75, 75],\n                            item_ids=[100, 101, 102],\n                            user_features=user_features,\n                            item_features=item_features)\n\n# Calculate and print the recall at 10\nr_at_k = tensorrec.eval.recall_at_k(model, interactions,\n                                    k=10,\n                                    user_features=user_features,\n                                    item_features=item_features)\nprint(np.mean(r_at_k))\n```\n\n## Example: Defining custom representation function\n```python\nimport tensorflow as tf\nimport tensorrec\n\n# Define a custom representation function graph\ndef tanh_representation_graph(tf_features, n_components, n_features, node_name_ending):\n    \"\"\"\n    This representation function embeds the user/item features by passing them through a single tanh layer.\n    :param tf_features: tf.SparseTensor\n    The user/item features as a SparseTensor of dimensions [n_users/items, n_features]\n    :param n_components: int\n    The dimensionality of the resulting representation.\n    :param n_features: int\n    The number of features in tf_features\n    :param node_name_ending: String\n    Either 'user' or 'item'\n    :return:\n    A tuple of (tf.Tensor, list) where the first value is the resulting representation in n_components\n    dimensions and the second value is a list containing all tf.Variables which should be subject to\n    regularization.\n    \"\"\"\n    tf_tanh_weights = tf.Variable(tf.random_normal([n_features, n_components],\n                                                   stddev=.5),\n                                  name='tanh_weights_%s' % node_name_ending)\n\n    tf_repr = tf.nn.tanh(tf.sparse_tensor_dense_matmul(tf_features, tf_tanh_weights))\n\n    # Return repr layer and variables\n    return tf_repr, [tf_tanh_weights]\n\n# Build a model with the custom representation function\nmodel = tensorrec.TensorRec(user_repr_graph=tanh_representation_graph,\n                            item_repr_graph=tanh_representation_graph)\n```\n\n## Example: Defining custom loss function\n```python\nimport tensorflow as tf\nimport tensorrec\n\n# Define a custom loss function graph\ndef simple_error_graph(tf_prediction, tf_y, **kwargs):\n    \"\"\"\n    This loss function returns the absolute simple error between the predictions and the interactions.\n    :param tf_prediction: tf.Tensor\n    The recommendation scores as a Tensor of shape [n_samples, 1]\n    :param tf_y: tf.Tensor\n    The sample interactions corresponding to tf_prediction as a Tensor of shape [n_samples, 1]\n    :param kwargs:\n    Other TensorFlow nodes (not yet implemented)\n    :return:\n    A tf.Tensor containing the learning loss.\n    \"\"\"\n    return tf.reduce_mean(tf.abs(tf_y - tf_prediction))\n\n# Build a model with the custom loss function\nmodel = tensorrec.TensorRec(loss_graph=simple_error_graph)\n```\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jfkirk/tensorrec",
    "keywords": "machine-learning,tensorflow,recommendation-system,python",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tensorrec",
    "platform": "",
    "project_url": "https://pypi.org/project/tensorrec/",
    "release_url": "https://pypi.org/project/tensorrec/0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A TensorFlow recommendation algorithm and framework in Python.",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e38296d01eac835e1251baaa5498f7bc",
          "sha256": "a0c26c2d05babff92b0e75dfc322903e4f45c5a044311132119888f55fe39d54"
        },
        "downloads": -1,
        "filename": "tensorrec-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e38296d01eac835e1251baaa5498f7bc",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 12551,
        "upload_time": "2017-10-30T17:11:41",
        "url": "https://files.pythonhosted.org/packages/aa/ba/702a146c52c959a92cfa1bebe8812efa57b9de2357298e1386cdfce19d90/tensorrec-0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "937b74d7e31b81ae79f5f30345f910dc",
          "sha256": "c1aa1de0857d634f51ba71b1c698ac017326bfef7f0734c14da893f4941b3b9d"
        },
        "downloads": -1,
        "filename": "tensorrec-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "937b74d7e31b81ae79f5f30345f910dc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10665,
        "upload_time": "2017-10-30T17:11:43",
        "url": "https://files.pythonhosted.org/packages/c7/aa/ee94073cf6e0de5d13345a3358abc0978d40bf0f60d8da149e5f8248dca7/tensorrec-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e38296d01eac835e1251baaa5498f7bc",
        "sha256": "a0c26c2d05babff92b0e75dfc322903e4f45c5a044311132119888f55fe39d54"
      },
      "downloads": -1,
      "filename": "tensorrec-0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "e38296d01eac835e1251baaa5498f7bc",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 12551,
      "upload_time": "2017-10-30T17:11:41",
      "url": "https://files.pythonhosted.org/packages/aa/ba/702a146c52c959a92cfa1bebe8812efa57b9de2357298e1386cdfce19d90/tensorrec-0.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "937b74d7e31b81ae79f5f30345f910dc",
        "sha256": "c1aa1de0857d634f51ba71b1c698ac017326bfef7f0734c14da893f4941b3b9d"
      },
      "downloads": -1,
      "filename": "tensorrec-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "937b74d7e31b81ae79f5f30345f910dc",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10665,
      "upload_time": "2017-10-30T17:11:43",
      "url": "https://files.pythonhosted.org/packages/c7/aa/ee94073cf6e0de5d13345a3358abc0978d40bf0f60d8da149e5f8248dca7/tensorrec-0.1.tar.gz"
    }
  ]
}