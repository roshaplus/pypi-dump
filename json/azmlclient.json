{
  "info": {
    "author": "Sylvain Mari\u00e9",
    "author_email": "\"Sylvain Mari\u00e9\" <sylvain.marie@schneider-electric.com>",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "python-azureml-client\n=====================\n\nAn ***unofficial*** generic client stack for azureML web services,\nworking with python 3.\n\nAs opposed to the 'complete' `AzureML client\nlibrary <https://github.com/Azure/Azure-MachineLearning-ClientLibrary-Python#services-usage>`__,\nthis library is much simpler and is only focused on calling the deployed\nweb services using python 3. It does not require your AzureML workspace\nid and API key, only the deployed services' URL and API key.\n\nYou may use it for example \\* to show to your customers how to consume\nyour AzureML cloud services. \\* to make simple 'edge' devices consume\nyour AzureML cloud services (if they support python :) ).\n\nMain features\n-------------\n\n-  Creates the Web Services requests from dataframe inputs and\n   dataframe/dictionary parameters, and maps the responses to dataframes\n   too\n-  Maps the errors to more friendly python exceptions\n-  Supports both Request/Response and Batch mode\n-  In Batch mode, performs all the Blob storage and retrieval for you.\n-  Properly handles file encoding in both modes (``utf-8`` is used by\n   default as the pivot encoding)\n-  Supports global ``requests.Session`` configuration to configure the\n   HTTP clients behaviour (including the underlying blob storage\n   client).\n\nInstallation\n------------\n\nRecommended : create a clean virtual environment\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe strongly recommend that you use conda *environment* or pip\n*virtualenv*/*venv* in order to better manage packages. Once you are in\nyour virtual environment, open a terminal and check that the python\ninterpreter is correct:\n\n.. code:: bash\n\n    (Windows)>  where python\n    (Linux)  >  which python\n\nThe first executable that should show up should be the one from the\nvirtual environment.\n\nInstallation steps\n~~~~~~~~~~~~~~~~~~\n\nThis package is available on ``PyPI``. You may therefore use ``pip`` to\ninstall from a release\n\n.. code:: bash\n\n    > pip install azmlclient\n\n***Note for conda users***: The only drawback of the method above using\n``pip``, is that all dependencies (numpy, pandas, azure-storage) are\nautomatically installed using ``pip`` too, and therefore are not\ndownloaded from validated ``conda`` repositories. If you prefer to\ninstall them from ``conda``, the workaround is to run the following\ncommand *before installing*:\n\n.. code:: bash\n\n    > conda install numpy, pandas, azure-storage==0.33.0\n\nUninstalling\n~~~~~~~~~~~~\n\nAs usual :\n\n.. code:: bash\n\n    > pip uninstall azmlclient\n\nExamples\n--------\n\nFirst import the package\n\n.. code:: python\n\n    import azmlclient as ac  \n\nThen create variables holding the access information provided by AzureML\n\n.. code:: python\n\n    base_url = 'https://europewest.services.azureml.net/workspaces/<workspaceId>/services/<serviceId>'\n    api_key = '<apiKey>'\n    use_new_ws = False\n\nThen create \\* the inputs - a dictionary containing all you inputs as\ndataframe objects\n\n::\n\n    ```python\n    inputs = {\"trainDataset\": trainingDataDf, \"input2\": input2Df}\n    ```\n\n\n-  the parameters - a dictionary\n\n   .. code:: python\n\n       params = {\"param1\": \"val1\", \"param2\": \"val2\"}\n\n-  and optionally provide a list of expected output names\n\n   .. code:: python\n\n       outputNames = [\"my_out1\",\"my_out2\"]\n\nFinally call in Request-Response mode:\n\n.. code:: python\n\n    outputs = ac.execute_rr(api_key, base_url, inputs=inputs, params=params, output_names=output_names)\n\nOr in Batch mode. In this case you also need to configure the Blob\nstorage to be used:\n\n.. code:: python\n\n    # Define the blob storage to use for storing inputs and outputs\n    blob_account = '<account_id>'\n    blob_apikey = '<api_key>'\n    blob_container = '<container>'\n    blob_path_prefix = '<path_prefix>'\n\n    # Perform the call (polling is done every 5s until job end)\n    outputs = ac.execute_bes(api_key, base_url,\n                              blob_storage_account, blob_storage_apikey, blob_container_for_ios, \n                              blob_path_prefix=blob_path_prefix,\n                              inputs=inputs, params=params, output_names=output_names)\n\nDebug and proxies\n-----------------\n\nUsers may wish to create a requests session object using the helper\nmethod provided, in order to override environment variable settings for\nHTTP requests. For example to use ``Fiddler`` as a proxy to debug the\nweb service calls:\n\n.. code:: python\n\n    session = ac.create_session_for_proxy(http_proxyhost='localhost', http_proxyport=8888, \n                                          use_http_for_https_proxy=True, ssl_verify=False)\n\nThen you may use that object in the ``requests_session`` parameter of\nthe methods:\n\n.. code:: python\n\n    outputsRR = ac.execute_rr(..., requests_session=session)\n    outputsB = ac.execute_bes(..., requests_session=session)\n\nNote that the session object will be passed to the underlying azure blob\nstorage client to ensure consistency.\n\nAdvanced usage\n--------------\n\nAdvanced users may directly create ``Batch_Client`` or ``RR_Client``\nclasses to better control what's happening.\n\nAn optional parameter allow to work with the 'new web services' mode\n(``use_new_ws = True`` - still evolving on MS side, so will need to be\nupdated).\n\nDevelopers\n----------\n\nPackaging\n~~~~~~~~~\n\nThis project uses ``setuptools_scm`` to synchronise the version number.\nTherefore the following command should be used for development snapshots\nas well as official releases:\n\n.. code:: bash\n\n    python setup.py egg_info bdist_wheel rotate -m.whl -k3\n\nReleasing memo\n~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    twine upload dist/* -r pypitest\n    twine upload dist/*",
    "docs_url": null,
    "download_url": "https://github.com/smarie/python-azureml-client/tarball/1.0.1",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/smarie/python-azureml-client",
    "keywords": "Azure Machine Learning AzureML web services client",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "azmlclient",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/azmlclient/",
    "release_url": "https://pypi.org/project/azmlclient/1.0.1/",
    "requires_python": "",
    "summary": "A Python 3 client for AzureMl web services",
    "version": "1.0.1"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b3be706a0d4b131878603f32096e5b8a",
          "sha256": "a6f2fae988a7376821104c992890bc7cc0cf9ead1a90844aa1ed4921a508a470"
        },
        "downloads": 47,
        "filename": "azmlclient-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b3be706a0d4b131878603f32096e5b8a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 24708,
        "upload_time": "2016-12-01T14:59:56",
        "url": "https://files.pythonhosted.org/packages/4f/cc/9f06f74073f47bb2b49d7f1d48624a58aa61037b461b75d9be43f69b583a/azmlclient-1.0.0-py3-none-any.whl"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b0e4443ad84bdfdccd4ad781735992d8",
          "sha256": "c28a5b1448069315fe19446db81bccf56e66d6ea7e9188f6aaece67d577fe4ad"
        },
        "downloads": 49,
        "filename": "azmlclient-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0e4443ad84bdfdccd4ad781735992d8",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 29663,
        "upload_time": "2016-12-05T12:20:08",
        "url": "https://files.pythonhosted.org/packages/09/b5/a5173aa529e37f706f0c6d1061939cb4ac5eda1f1c046e9af31a4e211a12/azmlclient-1.0.1-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b0e4443ad84bdfdccd4ad781735992d8",
        "sha256": "c28a5b1448069315fe19446db81bccf56e66d6ea7e9188f6aaece67d577fe4ad"
      },
      "downloads": 49,
      "filename": "azmlclient-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b0e4443ad84bdfdccd4ad781735992d8",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 29663,
      "upload_time": "2016-12-05T12:20:08",
      "url": "https://files.pythonhosted.org/packages/09/b5/a5173aa529e37f706f0c6d1061939cb4ac5eda1f1c046e9af31a4e211a12/azmlclient-1.0.1-py3-none-any.whl"
    }
  ]
}