{
  "info": {
    "author": "Jessica B. Hamrick",
    "author_email": "jhamrick@berkeley.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "plotchecker\n===========\n\n|Build Status| |codecov.io| |Documentation Status|\n\nA set of utilities for checking and grading matplotlib plots. **Please\nnote that ``plotchecker`` is only compatible with Python 3, and not\nlegacy Python 2**. Documentation is available on `Read The\nDocs <https://plotchecker.readthedocs.org/>`__.\n\nThe inspiration for this library comes from including plotting exercises\nin programming assignments. Often, there are multiple possible ways to\nsolve a problem; for example, if students are asked to create a \"scatter\nplot\", the following are all valid methods of doing so:\n\n.. code:: python\n\n    # Method 1\n    plt.plot(x, y, 'o')\n\n    # Method 2\n    plt.scatter(x, y)\n\n    # Method 3\n    for i in range(len(x)):\n        plt.plot(x[i], y[i], 'o')\n\n    # Method 4\n    for i in range(len(x)):\n        plt.scatter(x[i], y[i])\n\nUnfortunately, each of the above approaches also creates a different\nunderlying representation of the data in matplotlib. Method 1 creates a\nsingle Line object; Method 2 creates a single Collection; Method 3\ncreates *n* Line objects, where *n* is the number of points; and Method\n4 creates *n* Collection objects. Testing for all of these different\nedge cases is a huge burden on instructors.\n\nWhile some of the above options are certainly better than others in\nterms of simplicity and performance, it doesn't seem quite fair to ask\nstudents to create their plots in a very specific way when all we've\nasked them for is a scatter plot. If they look pretty much identical\nvisually, why isn't it a valid approach?\n\nEnter ``plotchecker``, which aims to abstract away from these\ndifferences and expose a simple interface for instructors to check\nstudents' plots. All that is necessary is access to the ``Axes`` object,\nand then you can write a common set of tests for plots independent of\nhow they were created.\n\n.. code:: python\n\n    from plotchecker import ScatterPlotChecker\n\n    axis = plt.gca()\n    pc = ScatterPlotChecker(axis)\n    pc.assert_x_data_equal(x)\n    pc.assert_y_data_equal(y)\n    ...\n\nPlease see the `Examples.ipynb <Examples.ipynb>`__ notebook for futher\nexamples on how ``plotchecker`` can be used.\n\nCaveats: there are *many* ways that plots can be created in matplotlib.\n``plotchecker`` almost certainly misses some of the edge cases. If you\nfind any, please submit a bug report (or even better, a PR!).\n\n.. |Build Status| image:: https://travis-ci.org/jhamrick/plotchecker.svg?branch=master\n   :target: https://travis-ci.org/jhamrick/plotchecker\n.. |codecov.io| image:: http://codecov.io/github/jhamrick/plotchecker/coverage.svg?branch=master\n   :target: http://codecov.io/github/jhamrick/plotchecker?branch=master\n.. |Documentation Status| image:: https://readthedocs.org/projects/plotchecker/badge/?version=latest\n   :target: http://plotchecker.readthedocs.org/en/latest/?badge=latest",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jhamrick/plotchecker",
    "keywords": null,
    "license": null,
    "maintainer": null,
    "maintainer_email": null,
    "name": "plotchecker",
    "platform": null,
    "project_url": "https://pypi.org/project/plotchecker/",
    "release_url": "https://pypi.org/project/plotchecker/0.1.0/",
    "requires_python": null,
    "summary": "A set of utilities for testing matplotlib plots in an object-oriented manner.",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b295cba85f0a964969d521f8d08bf155",
          "sha256": "d1a5948b78d9cb5a0d6d2ff780780e537622f6db2de43de8a38cacd035c6ee14"
        },
        "downloads": 1302,
        "filename": "plotchecker-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b295cba85f0a964969d521f8d08bf155",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 15439,
        "upload_time": "2015-10-09T00:05:53",
        "url": "https://files.pythonhosted.org/packages/82/47/dd4df9b707ac6080ce647a60d37693c5fc6ac3da4fa1267b1491f18a3758/plotchecker-0.1.0-py2.py3-none-any.whl"
      }
    ],
    "0.1.0.dev": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a8852095cd43cec014866a0155399eef",
          "sha256": "2bfa4bef62c9e4610e20d61f17e9898da7a6ba20d3783d5da349f619ae1bbe13"
        },
        "downloads": 541,
        "filename": "plotchecker-0.1.0.dev-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a8852095cd43cec014866a0155399eef",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 11647,
        "upload_time": "2015-10-08T16:01:07",
        "url": "https://files.pythonhosted.org/packages/3b/98/077a6a0ab14febdf5554893851cb59d31ad15691fc484fbc4ec30c5a93c2/plotchecker-0.1.0.dev-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b295cba85f0a964969d521f8d08bf155",
        "sha256": "d1a5948b78d9cb5a0d6d2ff780780e537622f6db2de43de8a38cacd035c6ee14"
      },
      "downloads": 1302,
      "filename": "plotchecker-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b295cba85f0a964969d521f8d08bf155",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 15439,
      "upload_time": "2015-10-09T00:05:53",
      "url": "https://files.pythonhosted.org/packages/82/47/dd4df9b707ac6080ce647a60d37693c5fc6ac3da4fa1267b1491f18a3758/plotchecker-0.1.0-py2.py3-none-any.whl"
    }
  ]
}