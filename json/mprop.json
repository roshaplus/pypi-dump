{
  "info": {
    "author": "Josiah Carlson",
    "author_email": "josiah.carlson@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.4",
      "Programming Language :: Python :: 2.5",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.0",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4"
    ],
    "description": "Description\n===========\n\nThis package intends to offer a mechanism to add properties to your modules.\nThe primary use-case of this functionality is to allow for the deferred\nexecution of expensive-to-compute module/package level globals without needing\nto explicitly call a function.\n\nGenerally speaking, this module has two APIs that offer this functionality.\nYou can use either of them or both of them, and everything will work more or\nless as you expect it to, as long as you follow the rules.\n\nNote that this package supports the use of basically any descriptor at the\nmodule-level, not just properties.\n\nUsage\n=====\n\nThe first method of using the package supports basically any descriptor being\nused as a decorator in the standard way. We show the use of `property` for the\nsake of brevity::\n\n    @property\n    def module_property(mod):\n        '''mod is the module that this property was defined in'''\n\n    import mprop; mprop.init()\n\n.. warning: If you use properties or any of your own descriptors, you must\n    call `mprop.init()` after defining all of your properties/descriptors.\n    You *can* call `mprop.init()` multiple times if you need to add more\n    properties/descriptors during runtime.\n\nBecause remembering to put the import/init call at the bottom of a module can\nbe annoying, we've got a special decorator that works just like the property\nobject, but handles the `mprop.init()` call for you::\n\n    from mprop import mproperty\n\n    @mproperty\n    def module_property2(mod):\n        '''I work exactly the same as the earlier module property, but you\n        don't need to make a subsequent call to `mprop.init()`'''\n\nRegardless of which method you use, if the name of your module is `mod`, you\nthose that import the module can access the properties as normal::\n\n    # example.py\n    from mprop import mproperty\n\n    @mproperty\n    def prop(mod):\n        return \"I was called!\"\n\n    def fcn():\n        # I can access the property via:\n        print _pmodule.prop\n\n    # test.py\n    import example\n\n    # the below should print \"I was called!\"\n    print example.prop\n    # this should also print \"I was called!\"\n    example.fcn()\n\nReferencing properties from within the module\n=============================================\n\nAfter initialization, your code may want to reference the global properties.\nIf you try to access the properties directly, you will get a NameError unless\nyou locally aliased the value, the initialization has not completed, or unless\nsomeone else injected a value with that name into the globals.\n\nIn order to reference properties from within the module, any module that has\nbeen initialized with `mprop.init()` or has used the `mproperty` decorator\nwill have in its global namespace an object called `_pmodule`, which is the\n\"property-enhanced module\" that offers property access.\n\nIf you find it necessary to require access to the original module object\n(which doesn't support properties), you can access `_module` from the global\nnamspace.\n\nHow it works\n============\n\nThe short version: we replace the standard Python module instance in\n`sys.modules` during module import, which allows us to ensure that the module\nis replaced everywhere it is used. We perform some magic to ensure that\neverything available in the original module is available in the replacement\nmodule (the replacement module's `__dict__` is the module's globals), and we\npost-process everything in the module's global namespace to pull out\ndescriptors as necessary.\n\nWhen using the `mproperty` decorator, much the same goes on, but we add a\nspecial `__getattribute__` method that handles descriptor extraction on first\nattribute access to the module.\n\nPython magic that goes on\n-------------------------\n\n* Using `sys.getframe()` to pull calling frame objects to get module globals\n  and subsequently the module object itself\n* Replace `sys.modules` entries\n* Replace an instance `__dict__`\n* Assign descriptors during runtime by modifying the base class of the\n  replacement module\n* Assign and delete class-level `__getattribute__` methods",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/josiahcarlson/mprop",
    "keywords": null,
    "license": "GNU LGPL v2.1",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mprop",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mprop/",
    "release_url": "https://pypi.org/project/mprop/0.14/",
    "requires_python": null,
    "summary": "Module properties for Python",
    "version": "0.14"
  },
  "releases": {
    "0.09": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6a465c7ee0818f71d68b64928c4973b9",
          "sha256": "bc10baf7238a9f1b46b68778bbc659bcc000b8a30a2f7c7d1665033132c4e9a5"
        },
        "downloads": 3530,
        "filename": "mprop-0.09.tar.gz",
        "has_sig": false,
        "md5_digest": "6a465c7ee0818f71d68b64928c4973b9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4095,
        "upload_time": "2015-06-25T04:40:17",
        "url": "https://files.pythonhosted.org/packages/02/1d/9b893be346ca6114d65d0780a5b473035b47b17b997fad524cc6aff52327/mprop-0.09.tar.gz"
      }
    ],
    "0.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9c4e7a8f811c6018ce296a94214b7cc5",
          "sha256": "7fa85c459d8eaf54f564cb38872740b23e5eacfc0e4cf21d289b03648bd89565"
        },
        "downloads": 1838,
        "filename": "mprop-0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "9c4e7a8f811c6018ce296a94214b7cc5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4090,
        "upload_time": "2013-12-06T07:05:50",
        "url": "https://files.pythonhosted.org/packages/a2/de/f8e96ff27b824344d5d3bd2569d75f34a20272e3518d6b19b419dedd22e1/mprop-0.10.tar.gz"
      }
    ],
    "0.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "51d9d2089bc3833d8ac9a6e97b4e715b",
          "sha256": "6ac23fff7254bef5cd4dfef32a317eb7d8b07dd1ba4c4a52e3e444bb011126bc"
        },
        "downloads": 1796,
        "filename": "mprop-0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "51d9d2089bc3833d8ac9a6e97b4e715b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4091,
        "upload_time": "2013-12-06T15:40:08",
        "url": "https://files.pythonhosted.org/packages/89/68/e4b0efd3c46e952ae722402355d20b53340d552de8833fb1111562f231ba/mprop-0.11.tar.gz"
      }
    ],
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cf1ee76bd391a1dd200cb80985191bb0",
          "sha256": "90a4bef1f2c2ee6141b89a747959a20789ede9f599c3cdb76f8b026f126d5d23"
        },
        "downloads": 1794,
        "filename": "mprop-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "cf1ee76bd391a1dd200cb80985191bb0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4085,
        "upload_time": "2013-12-06T15:42:20",
        "url": "https://files.pythonhosted.org/packages/af/f0/23734fb43d49b3ac7c60d9be23c735311bd73a01d47c01a451a444204b0f/mprop-0.12.tar.gz"
      }
    ],
    "0.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1d72fc4c6d055018d80dd6c8636628f2",
          "sha256": "d3f2b24c6c7ae3c904f02e0c9407f998b1ac96b254fb9b19824f0d623bba765c"
        },
        "downloads": 2166,
        "filename": "mprop-0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "1d72fc4c6d055018d80dd6c8636628f2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4140,
        "upload_time": "2013-12-06T21:13:00",
        "url": "https://files.pythonhosted.org/packages/49/e1/8beb68f209841c30180b929824f2c9212d0870f36ed31ae671280be758da/mprop-0.13.tar.gz"
      }
    ],
    "0.14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "779731d48c8f2f01ee0c9e833bfddeb5",
          "sha256": "6ee974fb2bfbc28ed23ee4d7760da56ac4d8b349b7629bdb57efc71cb1346097"
        },
        "downloads": 1239,
        "filename": "mprop-0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "779731d48c8f2f01ee0c9e833bfddeb5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4262,
        "upload_time": "2015-06-25T04:40:43",
        "url": "https://files.pythonhosted.org/packages/bf/0c/c070c0d90022d21d707f6e4b750fbfa022afdaf4ea8dbe0fbcb7fee9ab2e/mprop-0.14.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "779731d48c8f2f01ee0c9e833bfddeb5",
        "sha256": "6ee974fb2bfbc28ed23ee4d7760da56ac4d8b349b7629bdb57efc71cb1346097"
      },
      "downloads": 1239,
      "filename": "mprop-0.14.tar.gz",
      "has_sig": false,
      "md5_digest": "779731d48c8f2f01ee0c9e833bfddeb5",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4262,
      "upload_time": "2015-06-25T04:40:43",
      "url": "https://files.pythonhosted.org/packages/bf/0c/c070c0d90022d21d707f6e4b750fbfa022afdaf4ea8dbe0fbcb7fee9ab2e/mprop-0.14.tar.gz"
    }
  ]
}