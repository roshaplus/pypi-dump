{
  "info": {
    "author": "Gurdul\u00f9",
    "author_email": "macgurd@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing"
    ],
    "description": ".. _Python: http://www.python.org/\n.. _PyYAML: http://pyyaml.org/wiki/PyYAML\n.. _JMESPath: https://github.com/jmespath/jmespath.py\n.. _boto3: https://github.com/boto/boto3\n\n=====\nVirga\n=====\n\nVirga tests your Cloud resources.\n\n-------------\nWhat is Virga\n-------------\n\nFrom `Wikipedia <https://en.wikipedia.org/wiki/Virga>`_: *\"In meteorology, Virga is an observable streak or shaft of\nprecipitation falling from a cloud that evaporates or sublimates before reaching the ground.\"*\n\nThis piece of software is not about a weather phenomenon. Virga is a tool for analysing your Cloud infrastructure\nbefore the rain reaches the ground.\n\n----------------------------------\nThis project is still in pre-alpha\n----------------------------------\n\nThere are many things still missing:\n\n* the documentation needs to be completed\n* the definition file is just a draft for testing purposes\n* it needs tests on real data resources\n\n------------------\nProvider supported\n------------------\n\nAt the moment only `AWS <https://aws.amazon.com/>`_.\n\n------------\nRequirements\n------------\n\n* Python_\n* PyYAML_\n* JMESPath_\n\nSpecific for AWS\n================\n\n* an AWS working account\n* boto3_\n\n-----------\nQuick start\n-----------\n\n1. Install Virga :code:`pip install virga`\n2. Create the file ``tests.yaml``\n3. :code:`virga tests.yaml`\n\n\n``tests.yaml`` is the `Tests definition file`_.\n\n-------\nOptions\n-------\n\nFollowing the list of options of Virga\n\n.. code::bash\n\n    usage: virga [-h] [-definition DEFINITION] [-logfile LOGFILE] [-debug] [-silent] [-output OUTPUT] config\n\n    positional arguments:\n      config                  test definition file\n\n    optional arguments:\n      -h, --help              show this help message and exit\n      -definition DEFINITION  definition file\n      -logfile LOGFILE        log file\n      -output OUTPUT          resource output directory\n      -silent                 do not output results\n      -debug                  show debug\n\nThe option ``-definition`` is necessary only if the standard definition file has been modified.\n\nBy default the logs are outputted to the stdout. ``-logfile`` redirect the log stream to a file instead.\n\n``-output`` saves the information about the single resources in a directory for testing purposes.\n\n``-silent`` sets the level for the log to CRITICAL and ``-debug`` sets the level to DEBUG  (see\n`Logging facility for Python <https://docs.python.org/3/library/logging.html>`_).\n\n-------------------\nConfiguration files\n-------------------\n\nSee `This project is still in pre-alpha`_\n\nThere are two types of configuration files.\n\nThe first one (**definitions**) is used for defining the characteristics of the provider and the way we filter the\nresources we want to check.\n\nThe second one (**tests**) is specific to the tests we want to implement.\n\nDefinitions\n===========\n\nThe **definitions** describe the way we want to obtain information about a specific resource type\n\n.. code-block::yaml\n\n    subnets:\n      client: ec2\n      action: describe_subnets\n      context: Subnets\n      prefix: Subnets\n      resource_id: SubnetId\n      identifiers:\n        id: subnet-id\n        name: tag:Name\n    instances:\n      client: ec2\n      action: describe_instances\n      context: EC2 Instances\n      prefix: Reservations.Instances\n      resource_id: InstanceId\n      identifiers:\n        id: instance-id\n        name: tag:Name\n\n\nIn the piece of code above (see `<virga/providers/aws.yaml>`_) we say that for the ``subnets`` section we are going to\ninstantiate a *client* and invoke an *action* identifying the resources we want to filter with **id** or with **name**.\n\nThe same concept is applied to the ``instances`` section.\n\nThis configuration file is unlikely to be changed as contains information depending on the underlying library (in this\ncase boto3_) but in case we want to add new sections or defining different identifiers, we can use the provided file\nas template and override the default definition file with the option ``-definition``.\n\n\nTests definition file\n=====================\n\nAn example is worth 1000 words.\n\nYou want to know if the subnet ``my-subnet`` on AWS has:\n\n* the CIDR block equals to 10.0.0.0/24\n* set the tag *environment* with the value *staging*\n\nand then you want to know if the EC2 instances with the tag name starting with the value ``my-app`` are in the subnet\n``my-subnet``.\n\nAccording to the definition, our ``test.yaml`` will be\n\n.. code:: yaml\n\n    ---\n    provider:\n      name: aws\n      params:\n        region_name: eu-west-2\n      extra:\n        role_arn: arn:aws:iam::0123456789:role/Tests\n    tests:\n      subnets:\n        - id: subnet-0123456789\n          assertions:\n            - CidrBlock=='10.0.0.0/24'\n            - Tags[?Key=='environment' && Value=='staging']\n            - Tags[?Key=='Name' && Value=='my-subnet']\n      instances:\n        - name: my-app-*\n          assertions:\n            - SubnetId==\"_lookup('subnets', 'name', 'my-subnet')\"\n\nThe ``provider`` section specify the parameters for connecting our client to AWS.\n\nThe ``tests`` section declares two scopes for the tests: ``subnets`` and ``instances`` and the resources are\nidentified with the ``subnet-id`` for the subnet and with the ``tag:Name`` for the EC2 instances.\n\nThe ``assertions`` are the actual tests: each item represents a condition to verify using the query language\nJMESPath_. The only exception is the last assertion\n\n.. code::yaml\n\n    SubnetId==\"_lookup('subnets', 'name', 'my-subnet')\"\n\n``_lookup`` is not a standard JMESPath construct but a Virga function (see `_lookup function`_).\n\n_lookup function\n================\n\nThe ``_lookup`` function filters a single resource returning the ID.\n\nIn the example above instead of declaring the equality\n\n.. code::yaml\n\n    SubnetId==\"subnet-0123456789\"\n\nwe have filtered the subnet with the tag:Name equals to *my-subnet*.\n\nThe argument passed to the function are:\n\n* the context\n* the identifier (eg. *name* or *id*)\n* the value to search\n\nIf no result is found, the test fails.\n\n---\nFAQ\n---\n\nSee `This project is still in pre-alpha`_\n\nRecommendation on permissions\n=============================\n\nSee `This project is still in pre-alpha`_\n\nWhy my test is failing\n======================\n\nSee `This project is still in pre-alpha`_\n\n----------------\nResource mapping\n----------------\n\n* `List of AWS resources <docs/resource_mapping_aws.rst>`_\n\n---------------\nAdvanced topics\n---------------\n\n* `Definition file <docs/definition_file.rst>`_\n* `How to build a custom provider <docs/custom_provider.rst>`_\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/gurdulu/virga",
    "keywords": "qa testing cloud aws",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "virga",
    "platform": "",
    "project_url": "https://pypi.org/project/virga/",
    "release_url": "https://pypi.org/project/virga/0.0.7/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Analysing your Cloud infrastructure before the rain falls to the ground",
    "version": "0.0.7"
  },
  "releases": {
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0ffd7d435bd505c9aacf80d921290e07",
          "sha256": "11bcf74db2381f73e5d6dbceddb46079b22242ff462b32324ae7cfb4a5f22e83"
        },
        "downloads": 0,
        "filename": "virga-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "0ffd7d435bd505c9aacf80d921290e07",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12114,
        "upload_time": "2017-09-29T22:16:29",
        "url": "https://files.pythonhosted.org/packages/9f/22/994310da2ea6ecbdb08cbd10b748a65ab9019204a978f5212e04f44a2203/virga-0.0.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0ffd7d435bd505c9aacf80d921290e07",
        "sha256": "11bcf74db2381f73e5d6dbceddb46079b22242ff462b32324ae7cfb4a5f22e83"
      },
      "downloads": 0,
      "filename": "virga-0.0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "0ffd7d435bd505c9aacf80d921290e07",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 12114,
      "upload_time": "2017-09-29T22:16:29",
      "url": "https://files.pythonhosted.org/packages/9f/22/994310da2ea6ecbdb08cbd10b748a65ab9019204a978f5212e04f44a2203/virga-0.0.7.tar.gz"
    }
  ]
}