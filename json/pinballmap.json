{
  "info": {
    "author": "Isaac Csandl",
    "author_email": "eyesee1@me.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "Pinball Map API Client\n======================\n\nPython client for `Pinball Map API`_.\n\nSpecial thanks to `Logan Arcade`_ in Chicago, IL for supporting development of this project.\n\n.. _Pinball Map API: http://pinballmap.com/api/v1/docs\n.. _Logan Arcade: https://loganarcade.com/\n\nCurrent version: 0.2.2\n\nInstallation\n------------\n\n.. code:: bash\n\n    $ pip install python-pinballmap\n\n\nQuick Start\n-----------\n\n.. code:: python\n\n    >>> from pinballmap import PinballMapClient\n\n    >>> c = PinballMapClient(location_id=0, region_name=\"chicago\", authentication_token=\"...\", user_email=\"email@example.com\")\n\n    # Sync your list of machines by providing a complete list of current Pinball Map machine_ids.\n    # e.g.:\n    >>> c.update_map([1423, 22, 33, 44, 423, 55])\n\n    # look up games by name, results sorted by match quality:\n    >>> c.machine_by_name(\"Game of Thrones (LE)\")\n    ({'created_at': '2015-10-22T18:55:02.702Z',\n      'id': 2442,\n      'ipdb_id': None,\n      'ipdb_link': '',\n      'is_active': None,\n      'machine_group_id': 22,\n      'manufacturer': 'Stern',\n      'name': 'Game of Thrones (LE)',\n      'updated_at': '2015-10-22T18:55:02.702Z',\n      'year': 2015}, ...)\n\n\nCommand Line Usage\n------------------\n\nLimited functionality at this point, but it does a few things.\n\n.. code:: bash\n\n    >>> pinballmap --help\n    usage: pinballmap [-h] [-l LOCATION_ID] [-r REGION_NAME] [-i]\n                      [-t AUTHENTICATION_TOKEN] [-e USER_EMAIL]\n                      {search,machine_id,machine_ipdb,loc_machines}\n                      [value [value ...]]\n\n    Interact with Pinball Map API\n\n    positional arguments:\n      {search,machine_id,machine_ipdb,loc_machines}\n                            search: finds machine data by name; machine_id: finds\n                            machine matching id; machine_ipdb: finds machine by\n                            IPDB id; loc_machines: list machines at a location\n      value\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -l LOCATION_ID, --location LOCATION_ID\n      -r REGION_NAME, --region REGION_NAME\n                            region name (e.g., chicago)\n      -i, --id-only         return only machine ids for query\n      -t AUTHENTICATION_TOKEN, --token AUTHENTICATION_TOKEN\n                            API authentication token (needed for all write\n                            operations)\n      -e USER_EMAIL, --email USER_EMAIL\n                            User email address (needed for all write operations)\n\n    Happy flipping!\n\n    >>> pinballmap search 'Game of Thrones (LE)'\n    id    name                       manufacturer      year    ipdb_id\n    ----  -------------------------  --------------  ------  ---------\n    2442  Game of Thrones (LE)       Stern             2015\n    2441  Game of Thrones (Pro)      Stern             2015\n    2527  Game of Thrones (Premium)  Stern             2015\n     760  The Bally Game Show        Bally             1990        985\n\n    >>> pinballmap --location 4495 loc_machines\n      id  name                            manufacturer      year    ipdb_id\n    ----  ------------------------------  --------------  ------  ---------\n    2773  Aerosmith (LE)                  Stern             2017\n     643  Attack from Mars                Bally             1995       3781\n    2728  Batman 66 (LE)                  Stern             2016\n     656  Elvira and the Party Monsters   Bally             1989        782\n     852  Galaxy                          Stern             1980        980\n    2442  Game of Thrones (LE)            Stern             2015\n    2571  Ghostbusters (LE)               Stern             2016\n     695  Junk Yard                       Williams          1996       4014\n    2353  Kiss                            Stern             2015       6265\n    2306  Medieval Madness (Remake)       Planetary         2015\n    1606  Metallica (Premium)             Stern             2013       5478\n     641  Monster Bash                    Williams          1998       4441\n     675  No Fear: Dangerous Sports       Williams          1995       2852\n     677  Radical!                        Bally             1990       1904\n     916  Robocop                         Data East         1989       1976\n    2165  Star Trek (Pro)                 Stern             2013       6044\n     684  Star Trek: The Next Generation  Williams          1993       2357\n     694  Star Wars                       Data East         1992       2358\n    2844  Star Wars (Premium)             Stern             2017\n    1118  TRON: Legacy                    Stern             2011       5682\n     779  Taxi                            Williams          1988       2505\n     687  The Addams Family               Bally             1992         20\n    2203  The Walking Dead (Pro)          Stern             2014       6155\n    2277  Wrestlemania                    Stern             2015\n\n    >>> pinballmap --location 4495 --id-only loc_machines\n    2773,643,2728,656,852,2442,2571,695,2353,2306,1606,641,675,677,916,2165,684,694,2844,1118,779,687,2203,2277\n\n    >>> pinballmap machine_id 2571\n      id  name               manufacturer      year  ipdb_id\n    ----  -----------------  --------------  ------  ---------\n    2571  Ghostbusters (LE)  Stern             2016\n\n\nExample Django ``settings.py``\n------------------------------\n\nNOTE: Django settings, if present, will take precedence over arguments to PinballMapClient(...)\n\n.. code-block:: python\n   :emphasize-lines: 4,5\n\n    PINBALL_MAP = {\n        'region_name': 'chicago',\n        'location_id': your_location_id,  # should be an int\n        # email and token are required for all write operations\n        'user_email': '...', # your pinball map account email, needed for write operations\n        'user_password': '...', # your pinball map password, needed for write operations (not needed with token)\n        'authentication_token': '...', # your pinball map api token, needed for write operations\n        'cache_name': 'default',  # default: 'default'\n        'cache_key_prefix': 'pmap_',  # default: 'pmap_'\n    }\n\n\n\nExample Django management command\n---------------------------------\n\nCreate yourapp/management/commands/update_pinball_map.py and use this as a starting point:\n\n.. code-block:: python\n   :emphasize-lines: 11\n\n   from django.core.management.base import BaseCommand, CommandError\n   from pinballmap import PinballMapClient\n   from yourapp.somewhere import get_current_game_list\n\n\n   class Command(BaseCommand):\n       help = 'Update the Pinball Map API. Adds/removes machines from our location.'\n\n       def handle(self, *args, **options):\n           try:\n               games = get_current_game_list()  # \u2190 your code provides a list of current IDs\n               # no args needed if you used Django settings as shown above:\n               c = PinballMapClient()\n               c.update_map([g.pinball_map_id for g in games])\n               self.stdout.write(self.style.SUCCESS(\"Pinball Map updated.\"))\n           except Exception as err:\n               self.stderr.write(self.style.ERROR(\"Could not update pinball map because: {}\".format(err)))\n\n\n\nChange Log\n==========\n\n0.2.0\n-----\n\n* breaking change: PinballMapClient now takes keyword arguments, old ordered argument syntax will no longer work\n* now supports authentication tokens, signup process, getting auth details\n* now uses https by default\n* fix dry-run bug\n\n0.1.2\n-----\n* initial release\n\n\nRoadmap\n=======\n\n* update command line interface to support signup and getting auth details\n* eventually support all API actions, such as scores, machine conditions, etc.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pypa/sampleproject",
    "keywords": "pinball map api",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pinballmap",
    "platform": "",
    "project_url": "https://pypi.org/project/pinballmap/",
    "release_url": "https://pypi.org/project/pinballmap/0.2.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python client for the Pinball Map API",
    "version": "0.2.2"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "12d8888af5b5c4b21bd150195d6b9fbc",
          "sha256": "458a6daeb75147f3abad9444104dec7f4d83183acd64bb38a2831bf9bea3d1e2"
        },
        "downloads": 14,
        "filename": "pinballmap-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "12d8888af5b5c4b21bd150195d6b9fbc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 12670,
        "upload_time": "2017-02-16T00:18:58",
        "url": "https://files.pythonhosted.org/packages/ad/c8/172fa6f017c233da735ad00c4df22ee1ab6dd6663557689b42ec90142897/pinballmap-0.1.1-py3-none-any.whl"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "35af80eac4354306b777ea55bf319ae5",
          "sha256": "5eef4853a26f91a7ecdf1153a46aef9d7576221954bcb931ead5c16a0b68f604"
        },
        "downloads": 15,
        "filename": "pinballmap-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35af80eac4354306b777ea55bf319ae5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 12663,
        "upload_time": "2017-02-16T02:33:24",
        "url": "https://files.pythonhosted.org/packages/58/71/a52de97b83ff4019649aa3432550e1fa4855d8ae51a174480e531489e119/pinballmap-0.1.2-py3-none-any.whl"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "df5fa505f6f93d2dde76aa013aee9ac8",
          "sha256": "c06ee114d5d0cfd21dd5af83335811c4aa1a643f48f606e198653ef725ac6a20"
        },
        "downloads": 0,
        "filename": "pinballmap-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "df5fa505f6f93d2dde76aa013aee9ac8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13300,
        "upload_time": "2017-10-02T16:18:50",
        "url": "https://files.pythonhosted.org/packages/f8/5c/a278670f1d95aa4ccf40caff13aec8a3a4567e7c1b7dc9449be8d24188db/pinballmap-0.2.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "df5fa505f6f93d2dde76aa013aee9ac8",
        "sha256": "c06ee114d5d0cfd21dd5af83335811c4aa1a643f48f606e198653ef725ac6a20"
      },
      "downloads": 0,
      "filename": "pinballmap-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "df5fa505f6f93d2dde76aa013aee9ac8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 13300,
      "upload_time": "2017-10-02T16:18:50",
      "url": "https://files.pythonhosted.org/packages/f8/5c/a278670f1d95aa4ccf40caff13aec8a3a4567e7c1b7dc9449be8d24188db/pinballmap-0.2.2.tar.gz"
    }
  ]
}