{
  "info": {
    "author": "Isaac Csandl",
    "author_email": "eyesee1@me.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "Pinball Map API Client\n======================\n\nPython client for `Pinball Map API`_.\n\nSpecial thanks to `Logan Arcade`_ in Chicago for supporting development of this project.\n\nFull documentation is at `Read the Docs/`_\n\n.. _Pinball Map API: http://pinballmap.com/\n.. _Logan Arcade: https://loganarcade.com/\n.. _Read the Docs/: http://python-pinballmap.rtfd.io/\n\n\nInstallation\n------------\n\n.. code:: bash\n\n    $ pip install pinballmap\n\n\nQuick Start\n-----------\n\n.. code:: python\n\n    >>> from pinballmap import PinballMapClient\n\n    >>> c = PinballMapClient(location_id=0, region_name=\"chicago\")\n\n    # Sync your list of machines by providing a complete list of current Pinball Map machine_ids.\n    # e.g.:\n    >>> c.update_map([1423, 22, 33, 44, 423, 55])\n\n    # look up games by name, results sorted by match quality:\n    >>> c.machine_by_name(\"Game of Thrones (LE)\")\n    ({'created_at': '2015-10-22T18:55:02.702Z',\n      'id': 2442,\n      'ipdb_id': None,\n      'ipdb_link': '',\n      'is_active': None,\n      'machine_group_id': 22,\n      'manufacturer': 'Stern',\n      'name': 'Game of Thrones (LE)',\n      'updated_at': '2015-10-22T18:55:02.702Z',\n      'year': 2015}, ...)\n\n\nCommand Line Usage\n------------------\n\nLimited functionality at this point, but it does a few things.\n\n.. code:: bash\n\n    >>> pinballmap --help\n    usage: pinballmap [-h] [-l LOCATION_ID] [-r REGION_NAME] [-i]\n                      {search,machine_id,machine_ipdb,loc_machines}\n                      [value [value ...]]\n\n    Interact with Pinball Map API\n\n    positional arguments:\n      {search,machine_id,machine_ipdb,loc_machines}\n                            search: finds machine data by name; machine_id: finds\n                            machine matching id; machine_ipdb: finds machine by\n                            IPDB id; loc_machines: list machines at a location\n      value\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -l LOCATION_ID, --location LOCATION_ID\n      -r REGION_NAME, --region REGION_NAME\n                            region name (e.g., chicago)\n      -i, --id-only         return only machine ids for query\n\n    Happy flipping!\n\n    >>> pinballmap search 'Game of Thrones (LE)'\n    id    name                       manufacturer      year    ipdb_id\n    ----  -------------------------  --------------  ------  ---------\n    2442  Game of Thrones (LE)       Stern             2015\n    2441  Game of Thrones (Pro)      Stern             2015\n    2527  Game of Thrones (Premium)  Stern             2015\n     760  The Bally Game Show        Bally             1990        985\n\n    >>> pinballmap --location 4495 loc_machines\n      id  name                            manufacturer      year    ipdb_id\n    ----  ------------------------------  --------------  ------  ---------\n    2728  Batman 66 (LE)                  Stern             2016\n     655  Black Knight 2000               Williams          1989        311\n     738  Dr. Dude                        Bally             1990        737\n     656  Elvira and the Party Monsters   Bally             1989        782\n     852  Galaxy                          Stern             1980        980\n    2442  Game of Thrones (LE)            Stern             2015\n    2571  Ghostbusters (LE)               Stern             2016\n    1195  Hercules                        Atari             1979       1155\n    2353  Kiss (Stern)                                      2015       6265\n     641  Monster Bash                    Williams          1998       4441\n     744  Mousin' Around!                 Bally             1989       1635\n    2532  Mustang (Premium)               Stern             2014\n     723  PIN-BOT                         Williams          1986       1796\n    2726  Pabst Can Crusher               Stern             2016\n     677  Radical!                        Bally             1990       1904\n     678  Revenge from Mars               Bally             1999       4446\n     692  Ripley's Believe It or Not!     Stern             2003       4917\n    1276  Shaq Attaq                      Gottlieb          1995       2874\n    2165  Star Trek (Pro)                 Stern             2013       6044\n     684  Star Trek: The Next Generation  Williams          1993       2357\n     694  Star Wars                       Data East         1992       2358\n    1118  TRON: Legacy                    Stern             2011       5682\n     779  Taxi                            Williams          1988       2505\n     687  The Addams Family               Bally             1992         20\n    2203  The Walking Dead (Pro)          Stern             2014       6155\n     689  White Water                     Williams          1993       2768\n    2324  Whoa Nellie! Big Juicy Melons   Stern             2015       6252\n    2277  Wrestlemania                    Stern             2015\n\n    >>> pinballmap --location 4495 --id-only loc_machines\n    2728,655,738,656,852,2442,2571,1195,2353,641,744,2532,723,2726,677,678,692,1276,2165,684,694,1118,779,687,2203,689,2324,2277\n\n    >>> pinballmap machine_id 2571\n      id  name               manufacturer      year  ipdb_id\n    ----  -----------------  --------------  ------  ---------\n    2571  Ghostbusters (LE)  Stern             2016\n\n\nExample Django ``settings.py``\n------------------------------\n\n.. code-block:: python\n   :emphasize-lines: 2,3\n\n    PINBALL_MAP = {\n        'region_name': 'chicago',\n        'location_id': your_location_id,  # should be an int\n        'cache_name': 'default',  # default: 'default'\n        'cache_key_prefix': 'pmap_',  # default: 'pmap_'\n    }\n\n\n\nExample Django management command\n---------------------------------\n\nCreate ``yourapp/management/commands/update_pinball_map.py`` and use this as a starting point:\n\n.. code:: python\n\n    from django.core.management.base import BaseCommand, CommandError\n    from pinballmap import PinballMapClient\n    from yourapp.somewhere import get_current_game_list\n\n\n    class Command(BaseCommand):\n        help = 'Update the Pinball Map API. Adds/removes machines from our location.'\n\n        def handle(self, *args, **options):\n            try:\n                games = get_current_game_list()\n                c = PinballMapConnection()\n                c.update_map([g.pinball_map_id for g in games])\n                self.stdout.write(self.style.SUCCESS(\"Pinball Map updated.\"))\n            except Exception as err:\n                self.stderr.write(self.style.ERROR(\"Could not update pinball map because: {}\".format(err)))\n\n\n\nRoadmap\n=======\n\n* read/write machine condition reports\n* read/write high scores\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/eyesee1/python-pinballmap",
    "keywords": "pinball map api",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pinballmap",
    "platform": "",
    "project_url": "https://pypi.org/project/pinballmap/",
    "release_url": "https://pypi.org/project/pinballmap/0.1.2/",
    "requires_python": "",
    "summary": "Python client for the Pinball Map API",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "12d8888af5b5c4b21bd150195d6b9fbc",
          "sha256": "458a6daeb75147f3abad9444104dec7f4d83183acd64bb38a2831bf9bea3d1e2"
        },
        "downloads": 14,
        "filename": "pinballmap-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "12d8888af5b5c4b21bd150195d6b9fbc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 12670,
        "upload_time": "2017-02-16T00:18:58",
        "url": "https://files.pythonhosted.org/packages/ad/c8/172fa6f017c233da735ad00c4df22ee1ab6dd6663557689b42ec90142897/pinballmap-0.1.1-py3-none-any.whl"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "35af80eac4354306b777ea55bf319ae5",
          "sha256": "5eef4853a26f91a7ecdf1153a46aef9d7576221954bcb931ead5c16a0b68f604"
        },
        "downloads": 15,
        "filename": "pinballmap-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35af80eac4354306b777ea55bf319ae5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 12663,
        "upload_time": "2017-02-16T02:33:24",
        "url": "https://files.pythonhosted.org/packages/58/71/a52de97b83ff4019649aa3432550e1fa4855d8ae51a174480e531489e119/pinballmap-0.1.2-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "35af80eac4354306b777ea55bf319ae5",
        "sha256": "5eef4853a26f91a7ecdf1153a46aef9d7576221954bcb931ead5c16a0b68f604"
      },
      "downloads": 15,
      "filename": "pinballmap-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "35af80eac4354306b777ea55bf319ae5",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 12663,
      "upload_time": "2017-02-16T02:33:24",
      "url": "https://files.pythonhosted.org/packages/58/71/a52de97b83ff4019649aa3432550e1fa4855d8ae51a174480e531489e119/pinballmap-0.1.2-py3-none-any.whl"
    }
  ]
}