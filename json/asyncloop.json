{
  "info": {
    "author": "Don Kim",
    "author_email": "dgkimdev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: AsyncIO",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3 :: Only"
    ],
    "description": "# asymplejobs\nA Celery-like event loop with `asyncio` and no more dependencies\n\n# Get started\n```python\nimport asyncio as aio\n\nfrom asyncloop import AsyncLoop\n\n\n# A simple job, which should be a native coroutine\nasync def job_to_wait(sleep_sec):\n    await aio.sleep(sleep_sec)\n    return sleep_sec\n\n\n# A simple callback\ndef callback(fut):\n    if fut.cancelled():\n        print('CANCELLED: ', fut)\n    elif fut.done():\n        print('DONE: ', fut)\n\tprint('RESULT: ', fut.result()\n\n\n# AsyncLoop starts\naloop = AsyncLoop()  # <AsyncLoop(Thread-##, initial)>\naloop.start()  # <AsyncLoop(Thread-##, started ##########)>\n\n# Submit a job and be free to work on\n# it returns the concurrent.futures.Future object\nfut = aloop.submit_job(job_to_wait(10), callback)\nfut  # <Future at 0x#### state=pending>\n\n# After 10 seconds the callback activated\nDONE:  <Future at 0x#### state=finished returned int>\nRESULT: 10\n\n# Get a result\nret = fut.result()  # 10\n\n# You MUST stop the aloop before exit or destroy\naloop.stop()  # <AsyncLoop(Thread-##, stopped ##########)>\n```\nThat's all. Also you can `submit_jobs` with an iterable of coroutines.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/dgkim5360/asyncloop",
    "keywords": "asyncio celery event loop",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "asyncloop",
    "platform": "",
    "project_url": "https://pypi.org/project/asyncloop/",
    "release_url": "https://pypi.org/project/asyncloop/0.1.0a1/",
    "requires_dist": [],
    "requires_python": ">=3.5",
    "summary": "A Celery-like event loop with asyncio and no more dependencies",
    "version": "0.1.0a1"
  },
  "releases": {
    "0.1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4d30297e52e13627cb9dc6539e073d76",
          "sha256": "cef8f89f63f1c1377537d89b13b15255b4954af160a410813b3eae892f85dd89"
        },
        "downloads": -1,
        "filename": "asyncloop-0.1.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "4d30297e52e13627cb9dc6539e073d76",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2294,
        "upload_time": "2017-10-22T16:15:46",
        "url": "https://files.pythonhosted.org/packages/17/fa/4b202acc7282b1de0ef2563bc20d54e569eabebca119e77dab4df5f24069/asyncloop-0.1.0a1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4d30297e52e13627cb9dc6539e073d76",
        "sha256": "cef8f89f63f1c1377537d89b13b15255b4954af160a410813b3eae892f85dd89"
      },
      "downloads": -1,
      "filename": "asyncloop-0.1.0a1.tar.gz",
      "has_sig": false,
      "md5_digest": "4d30297e52e13627cb9dc6539e073d76",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 2294,
      "upload_time": "2017-10-22T16:15:46",
      "url": "https://files.pythonhosted.org/packages/17/fa/4b202acc7282b1de0ef2563bc20d54e569eabebca119e77dab4df5f24069/asyncloop-0.1.0a1.tar.gz"
    }
  ]
}