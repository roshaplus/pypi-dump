{
  "info": {
    "author": "Kota Yamaguchi",
    "author_email": "KotaYamaguchi1984@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Communications :: Email"
    ],
    "description": "mailman-rss\n===========\n\nA simple mailman archive -> rss converter. Also the command can run as a\ntwitter bot.\n\nInstall\n-------\n\nInstall the package with ``pip``.\n\n.. code:: bash\n\n    pip install mailman-rss\n\nTwitter bot can be installed with an option:\n\n.. code:: bash\n\n    pip install mailman-rss[twitter]\n\nUsage\n-----\n\n::\n\n    usage: mailman-rss [-h] [--command COMMAND] [--config CONFIG]\n                       [--archive-url URL] [--max-items MAX_ITEMS] [-o OUTPUT]\n                       [-l LOGLEVEL] [--encoding ENCODING] [--language LANGUAGE]\n\n    Fetch Mailman archive and export to RSS\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --command COMMAND     Command to execute, rss or twitter\n      --config CONFIG       mailman-rss config json file, default None\n      --archive-url URL     Archive URL to fetch\n      --max-items MAX_ITEMS\n                            number of messages to convert to rss\n      -o OUTPUT, --output OUTPUT\n                            output file name, default stdout\n      -l LOGLEVEL, --loglevel LOGLEVEL\n                            logging level for debugging, default warning\n      --encoding ENCODING   email message encoding, default None\n      --language LANGUAGE   language specification, default None\n\nRSS Example: this will output RSS feed to stdout.\n\n.. code:: bash\n\n    mailman-rss --archive-url http://example.com/mailman/list/\n\nThe command can have a config file.\n\n.. code:: bash\n\n    mailman-rss --config /path/to/config.json\n\n.. code:: json\n\n    {\n      \"archive_url\": \"http://example.com/mailman/list/\",\n      \"output\": \"/home/user/public_html/mailman.rss\"\n    }\n\nTwitter example: twitter bot requires an application token and a storage space.\n`Get Twitter API Key <https://python-twitter.readthedocs.io/en/latest/getting_started.html#getting-your-application-tokens>`_ to run the command.\n\n.. code:: json\n\n    {\n      \"command\": \"twitter\",\n      \"archive_url\": \"http://example.com/mailman/list/\",\n      \"db\": \"/home/user/scraper.sqlite3\",\n      \"max_items\": 10,\n      \"consumer_key\": \"XXXXXXXXXXXXXXXXXXXXXXXXXX\",\n      \"consumer_secret\": \"XXXXXXXXXXXXXXXXXXXXXXXXXX\",\n      \"access_token_key\": \"XXXXXXX-XXXXXXXXXXXXXXXXXXXXXXXXXX\",\n      \"access_token_secret\": \"XXXXXXXXXXXXXXXXXXXXXXXXXX\"\n    }\n\n\nDeploy\n------\n\nThe command should be run from cron.\n\n.. code:: bash\n\n    crontab -l\n\n    0 * * * * mailman-rss --archive-url http://example.com/mailman/list/ > /var/www/archive.rss\n    0 * * * * mailman-rss --config /home/user/twitter-bot.json\n\nTest\n----\n\n.. code:: bash\n\n    tox\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/kyamagu/mailman_rss",
    "keywords": "mailman rss",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mailman-rss",
    "platform": "",
    "project_url": "https://pypi.org/project/mailman-rss/",
    "release_url": "https://pypi.org/project/mailman-rss/0.2.0/",
    "requires_dist": [
      "python-twitter; extra == 'twitter'",
      "requests",
      "python-dateutil",
      "future",
      "beautifulsoup4"
    ],
    "requires_python": "",
    "summary": "Scrape mailman archive and convert to rss",
    "version": "0.2.0"
  },
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "df944e4e209cae23d490f21cfc1d7dbc",
          "sha256": "5d279a52f08d44520b6d0bc6b6c6b5cbeb4a724520b1b0af7205eae4cc82611e"
        },
        "downloads": -1,
        "filename": "mailman_rss-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df944e4e209cae23d490f21cfc1d7dbc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 11081,
        "upload_time": "2017-12-26T08:23:44",
        "url": "https://files.pythonhosted.org/packages/9d/f1/1701e2e52188b77b05b237797230c389e4201ba74d0fbab99f6d71bff594/mailman_rss-0.2.0-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "df944e4e209cae23d490f21cfc1d7dbc",
        "sha256": "5d279a52f08d44520b6d0bc6b6c6b5cbeb4a724520b1b0af7205eae4cc82611e"
      },
      "downloads": -1,
      "filename": "mailman_rss-0.2.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "df944e4e209cae23d490f21cfc1d7dbc",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 11081,
      "upload_time": "2017-12-26T08:23:44",
      "url": "https://files.pythonhosted.org/packages/9d/f1/1701e2e52188b77b05b237797230c389e4201ba74d0fbab99f6d71bff594/mailman_rss-0.2.0-py3-none-any.whl"
    }
  ]
}