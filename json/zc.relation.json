{
  "info": {
    "author": "Gary Poster",
    "author_email": "gary@zope.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "================\nRelation Catalog\n================\n\n.. contents::\n   :local:\n\nOverview\n========\n\nThe relation catalog can be used to optimize intransitive and transitive\nsearches for N-ary relations of finite, preset dimensions.\n\nFor example, you can index simple two-way relations, like employee to\nsupervisor; RDF-style triples of subject-predicate-object; and more complex\nrelations such as subject-predicate-object with context and state.  These\ncan be searched with variable definitions of transitive behavior.\n\nThe catalog can be used in the ZODB or standalone. It is a generic, relatively\npolicy-free tool.\n\nIt is expected to be used usually as an engine for more specialized and\nconstrained tools and APIs. Three such tools are zc.relationship containers,\nplone.relations containers, and zc.vault. The documents in the package,\nincluding this one, describe other possible uses.\n\nHistory\n=======\n\nThis is a refactoring of the ZODB-only parts of the zc.relationship package.\nSpecifically, the zc.relation catalog is largely equivalent to the\nzc.relationship index. The index in the zc.relationship 2.x line is an\nalmost-completely backwards-compatible wrapper of the zc.relation catalog.\nzc.relationship will continue to be maintained, though active development is\nexpected to go into zc.relation.\n\nMany of the ideas come from discussions with and code from Casey Duncan, Tres\nSeaver, Ken Manheimer, and more.\n\nSetting Up a Relation Catalog\n=============================\n\nIn this section, we will be introducing the following ideas.\n\n- Relations are objects with indexed values.\n\n- You add value indexes to relation catalogs to be able to search.  Values\n  can be identified to the catalog with callables or interface elements. The\n  indexed value must be specified to the catalog as a single value or a\n  collection.\n\n- Relations and their values are stored in the catalog as tokens: unique\n  identifiers that you can resolve back to the original value. Integers are the\n  most efficient tokens, but others can work fine too.\n\n- Token type determines the BTree module needed.\n\n- You must define your own functions for tokenizing and resolving tokens. These\n  functions are registered with the catalog for the relations and for each of\n  their value indexes.\n\n- Relations are indexed with ``index``.\n\nWe will use a simple two way relation as our example here. A brief introduction\nto a more complex RDF-style subject-predicate-object set up can be found later\nin the document.\n\nCreating the Catalog\n--------------------\n\nImagine a two way relation from one value to another.  Let's say that we\nare modeling a relation of people to their supervisors: an employee may\nhave a single supervisor.  For this first example, the relation between\nemployee and supervisor will be intrinsic: the employee has a pointer to\nthe supervisor, and the employee object itself represents the relation.\n\nLet's say further, for simplicity, that employee names are unique and\ncan be used to represent employees.  We can use names as our \"tokens\".\n\nTokens are similar to the primary key in a relational database. A token is a\nway to identify an object. It must sort reliably and you must be able to write\na callable that reliably resolves to the object given the right context. In\nZope 3, intids (zope.app.intid) and keyreferences (zope.app.keyreference) are\ngood examples of reasonable tokens.\n\nAs we'll see below, you provide a way to convert objects to tokens, and resolve\ntokens to objects, for the relations, and for each value index individually.\nThey can be the all the same functions or completely different, depending on\nyour needs.\n\nFor speed, integers make the best tokens; followed by other\nimmutables like strings; followed by non-persistent objects; followed by\npersistent objects.  The choice also determines a choice of BTree module, as\nwe'll see below.\n\nHere is our toy ``Employee`` example class.  Again, we will use the employee\nname as the tokens.\n\n    >>> employees = {} # we'll use this to resolve the \"name\" tokens\n    >>> class Employee(object):\n    ...     def __init__(self, name, supervisor=None):\n    ...         if name in employees:\n    ...             raise ValueError('employee with same name already exists')\n    ...         self.name = name # expect this to be readonly\n    ...         self.supervisor = supervisor\n    ...         employees[name] = self\n    ...     # the next parts just make the tests prettier\n    ...     def __repr__(self):\n    ...         return '<Employee instance \"' + self.name + '\">'\n    ...     def __cmp__(self, other):\n    ...         # pukes if other doesn't have name\n    ...         return cmp(self.name, other.name)\n    ...\n\nSo, we need to define how to turn employees into their tokens.  We call the\ntokenization a \"dump\" function. Conversely, the function to resolve tokens into\nobjects is called a \"load\".\n\nFunctions to dump relations and values get several arguments. The first\nargument is the object to be tokenized. Next, because it helps sometimes to\nprovide context, is the catalog. The last argument is a dictionary that will be\nshared for a given search. The dictionary can be ignored, or used as a cache\nfor optimizations (for instance, to stash a utility that you looked up).\n\nFor this example, our function is trivial: we said the token would be\nthe employee's name.\n\n    >>> def dumpEmployees(emp, catalog, cache):\n    ...     return emp.name\n    ...\n\nIf you store the relation catalog persistently (e.g., in the ZODB) be aware\nthat the callables you provide must be picklable--a module-level function,\nfor instance.\n\nWe also need a way to turn tokens into employees, or \"load\".\n\nThe \"load\" functions get the token to be resolved; the catalog, for\ncontext; and a dict cache, for optimizations of subsequent calls.\n\nYou might have noticed in our ``Employee.__init__`` that we keep a mapping\nof name to object in the ``employees`` global dict (defined right above\nthe class definition).  We'll use that for resolving the tokens.  \n\n    >>> def loadEmployees(token, catalog, cache):\n    ...     return employees[token]\n    ...\n\nNow we know enough to get started with a catalog.  We'll instantiate it\nby specifying how to tokenize relations, and what kind of BTree modules\nshould be used to hold the tokens.\n\nHow do you pick BTree modules?\n\n- If the tokens are 32-bit ints, choose ``BTrees.family32.II``,\n  ``BTrees.family32.IF`` or ``BTrees.family32.IO``.\n\n- If the tokens are 64 bit ints, choose ``BTrees.family64.II``,\n  ``BTrees.family64.IF`` or ``BTrees.family64.IO``.\n\n- If they are anything else, choose ``BTrees.family32.OI``,\n  ``BTrees.family64.OI``, or ``BTrees.family32.OO`` (or\n  ``BTrees.family64.OO``--they are the same).\n\nWithin these rules, the choice is somewhat arbitrary unless you plan to merge\nthese results with that of another source that is using a particular BTree\nmodule. BTree set operations only work within the same module, so you must\nmatch module to module. The catalog defaults to IF trees, because that's what\nstandard zope catalogs use. That's as reasonable a choice as any, and will\npotentially come in handy if your tokens are in fact the same as those used by\nthe zope catalog and you want to do some set operations.\n\nIn this example, our tokens are strings, so we want OO or an OI variant.  We'll\nchoose BTrees.family32.OI, arbitrarily.\n\n    >>> import zc.relation.catalog\n    >>> import BTrees\n    >>> catalog = zc.relation.catalog.Catalog(dumpEmployees, loadEmployees,\n    ...                                       btree=BTrees.family32.OI)\n\n[#verifyObjectICatalog]_ [#legacy]_ Look! A relation catalog! We can't do very\nmuch searching with it so far though, because the catalog doesn't have any\nindexes.\n\nIn this example, the relation itself represents the employee, so we won't need\nto index that separately.\n\nBut we do need a way to tell the catalog how to find the other end of the\nrelation, the supervisor. You can specify this to the catalog with an attribute\nor method specified from ``zope.interface Interface``, or with a callable.\nWe'll use a callable for now. The callable will receive the indexed relation\nand the catalog for context.\n\n    >>> def supervisor(emp, catalog):\n    ...     return emp.supervisor # None or another employee\n    ...\n\nWe'll also need to specify how to tokenize (dump and load) those values. In\nthis case, we're able to use the same functions as the relations themselves.\nHowever, do note that we can specify a completely different way to dump and\nload for each \"value index,\" or relation element.\n\nWe could also specify the name to call the index, but it will default to the\n``__name__`` of the function (or interface element), which will work just fine\nfor us now.\n\nNow we can add the \"supervisor\" value index.\n\n    >>> catalog.addValueIndex(supervisor, dumpEmployees, loadEmployees,\n    ...                       btree=BTrees.family32.OI)\n\nNow we have an index [#addValueIndexExceptions]_.\n\n    >>> [info['name'] for info in catalog.iterValueIndexInfo()]\n    ['supervisor']\n\nAdding Relations\n----------------\n\nNow let's create a few employees.  All but one will have supervisors. \nIf you recall our toy ``Employee`` class, the first argument to the\nconstructor is the employee name (and therefore the token), and the\noptional second argument is the supervisor.\n\n    >>> a = Employee('Alice')\n    >>> b = Employee('Betty', a)\n    >>> c = Employee('Chuck', a)\n    >>> d = Employee('Diane', b)\n    >>> e = Employee('Edgar', b)\n    >>> f = Employee('Frank', c)\n    >>> g = Employee('Galyn', c)\n    >>> h = Employee('Howie', d)\n\nHere is a diagram of the hierarchy.\n\n::\n\n                Alice\n             __/     \\__\n        Betty           Chuck\n        /   \\           /   \\\n    Diane   Edgar   Frank   Galyn\n      |\n    Howie\n\nLet's tell the catalog about the relations, using the ``index`` method.\n\n    >>> for emp in (a,b,c,d,e,f,g,h):\n    ...     catalog.index(emp)\n    ...\n\nWe've now created the relation catalog and added relations to it. We're ready\nto search!\n\nSearching\n=========\n\nIn this section, we will introduce the following ideas.\n\n- Queries to the relation catalog are formed with dicts.\n\n- Query keys are the names of the indexes you want to search, or, for the\n  special case of precise relations, the ``zc.relation.RELATION`` constant.\n\n- Query values are the tokens of the results you want to match; or ``None``,\n  indicating relations that have ``None`` as a value (or an empty collection,\n  if it is a multiple). Search values can use\n  ``zc.relation.catalog.any(args)`` or ``zc.relation.catalog.Any(args)`` to\n  specify multiple (non-``None``) results to match for a given key.\n\n- The index has a variety of methods to help you work with tokens.\n  ``tokenizeQuery`` is typically the most used, though others are available.\n\n- To find relations that match a query, use ``findRelations`` or\n  ``findRelationTokens``.\n\n- To find values that match a query, use ``findValues`` or ``findValueTokens``.\n\n- You search transitively by using a query factory. The\n  ``zc.relation.queryfactory.TransposingTransitive`` is a good common case\n  factory that lets you walk up and down a hierarchy. A query factory can be\n  passed in as an argument to search methods as a ``queryFactory``, or\n  installed as a default behavior using ``addDefaultQueryFactory``.\n\n- To find how a query is related, use ``findRelationChains`` or\n  ``findRelationTokenChains``.\n\n- To find out if a query is related, use ``canFind``.\n\n- Circular transitive relations are handled to prevent infinite loops. They\n  are identified in ``findRelationChains`` and ``findRelationTokenChains`` with\n  a ``zc.relation.interfaces.ICircularRelationPath`` marker interface.\n\n- search methods share the following arguments:\n\n  * ``maxDepth``, limiting the transitive depth for searches;\n  \n  * ``filter``, allowing code to filter transitive paths;\n  \n  * ``targetQuery``, allowing a query to filter transitive paths on the basis\n    of the endpoint;\n  \n  * ``targetFilter``, allowing code to filter transitive paths on the basis of\n    the endpoint; and\n\n  * ``queryFactory``, mentioned above.\n\n- You can set up search indexes to speed up specific transitive searches.\n\nQueries, ``findRelations``, and special query values\n----------------------------------------------------\n\nSo who works for Alice?  That means we want to get the relations--the\nemployees--with a ``supervisor`` of Alice.\n\nThe heart of a question to the catalog is a query.  A query is spelled\nas a dictionary.  The main idea is simply that keys in a dictionary\nspecify index names, and the values specify the constraints.\n\nThe values in a query are always expressed with tokens.  The catalog has\nseveral helpers to make this less onerous, but for now let's take\nadvantage of the fact that our tokens are easily comprehensible.\n\n    >>> sorted(catalog.findRelations({'supervisor': 'Alice'}))\n    [<Employee instance \"Betty\">, <Employee instance \"Chuck\">]\n\nAlice is the direct (intransitive) boss of Betty and Chuck.\n\nWhat if you want to ask \"who doesn't report to anyone?\"  Then you want to\nask for a relation in which the supervisor is None.\n\n    >>> list(catalog.findRelations({'supervisor': None}))\n    [<Employee instance \"Alice\">]\n\nAlice is the only employee who doesn't report to anyone.\n\nWhat if you want to ask \"who reports to Diane or Chuck?\"  Then you use the\nzc.relation ``Any`` class or ``any`` function to pass the multiple values.\n\n    >>> sorted(catalog.findRelations(\n    ...     {'supervisor': zc.relation.catalog.any('Diane', 'Chuck')}))\n    ... # doctest: +NORMALIZE_WHITESPACE\n    [<Employee instance \"Frank\">, <Employee instance \"Galyn\">,\n     <Employee instance \"Howie\">]\n\nFrank, Galyn, and Howie each report to either Diane or Chuck. [#any]_\n\n``findValues`` and the ``RELATION`` query key\n---------------------------------------------\n\nSo how do we find who an employee's supervisor is?  Well, in this case,\nlook at the attribute on the employee!  If you can use an attribute that\nwill usually be a win in the ZODB.  \n\n    >>> h.supervisor\n    <Employee instance \"Diane\">\n\nAgain, as we mentioned at the start of this first example, the knowledge\nof a supervisor is \"intrinsic\" to the employee instance.  It is\npossible, and even easy, to ask the catalog this kind of question, but\nthe catalog syntax is more geared to \"extrinsic\" relations, such as the\none from the supervisor to the employee: the connection between a\nsupervisor object and its employees is extrinsic to the supervisor, so\nyou actually might want a catalog to find it!\n\nHowever, we will explore the syntax very briefly, because it introduces an\nimportant pair of search methods, and because it is a stepping stone\nto our first transitive search.\n\nSo, o relation catalog, who is Howie's supervisor?  \n\nTo ask this question we want to get the indexed values off of the relations:\n``findValues``. In its simplest form, the arguments are the index name of the\nvalues you want, and a query to find the relations that have the desired\nvalues.\n\nWhat about the query? Above, we noted that the keys in a query are the names of\nthe indexes to search. However, in this case, we don't want to search one or\nmore indexes for matching relations, as usual, but actually specify a relation:\nHowie.\n\nWe do not have a value index name: we are looking for a relation. The query\nkey, then, should be the constant ``zc.relation.RELATION``. For our current\nexample, that would mean the query is ``{zc.relation.RELATION: 'Howie'}``.\n\n    >>> import zc.relation\n    >>> list(catalog.findValues(\n    ...     'supervisor', {zc.relation.RELATION: 'Howie'}))[0]\n    <Employee instance \"Diane\">\n\nCongratulations, you just found an obfuscated and comparitively\ninefficient way to write ``howie.supervisor``! [#intrinsic_search]_\n[#findValuesExceptions]_\n\nSlightly more usefully, you can use other query keys along with\nzc.relation.RELATION. This asks, \"Of Betty, Alice, and Frank, who are\nsupervised by Alice?\"\n    \n    >>> sorted(catalog.findRelations(\n    ...     {zc.relation.RELATION: zc.relation.catalog.any(\n    ...         'Betty', 'Alice', 'Frank'),\n    ...      'supervisor': 'Alice'}))\n    [<Employee instance \"Betty\">]\n\nOnly Betty is.\n\nTokens\n------\n\nAs mentioned above, the catalog provides several helpers to work with tokens.\nThe most frequently used is ``tokenizeQuery``, which takes a query with object\nvalues and converts them to tokens using the \"dump\" functions registered for\nthe relations and indexed values. Here are alternate spellings of some of the\nqueries we've encountered above.\n\n    >>> catalog.tokenizeQuery({'supervisor': a})\n    {'supervisor': 'Alice'}\n    >>> catalog.tokenizeQuery({'supervisor': None})\n    {'supervisor': None}\n    >>> import pprint\n    >>> catalog.tokenizeQuery(\n    ...     {zc.relation.RELATION: zc.relation.catalog.any(a, b, f),\n    ...     'supervisor': a}) # doctest: +NORMALIZE_WHITESPACE\n    {None: <zc.relation.catalog.Any instance ('Alice', 'Betty', 'Frank')>,\n    'supervisor': 'Alice'}\n\n(If you are wondering about that ``None`` in the last result, yes,\n``zc.relation.RELATION`` is just readability sugar for ``None``.)\n\nSo, here's a real search using ``tokenizeQuery``.  We'll make an alias for\n``catalog.tokenizeQuery`` just to shorten things up a bit.\n\n    >>> query = catalog.tokenizeQuery\n    >>> sorted(catalog.findRelations(query(\n    ...     {zc.relation.RELATION: zc.relation.catalog.any(a, b, f),\n    ...      'supervisor': a})))\n    [<Employee instance \"Betty\">]\n\nThe catalog always has parallel search methods, one for finding objects, as\nseen above, and one for finding tokens (the only exception is ``canFind``,\ndescribed below). Finding tokens can be much more efficient, especially if the\nresult from the relation catalog is just one step along the path of finding\nyour desired result. But finding objects is simpler for some common cases.\nHere's a quick example of some queries above, getting tokens rather than\nobjects.\n\nYou can also spell a query in ``tokenizeQuery`` with keyword arguments. This\nwon't work if your key is ``zc.relation.RELATION``, but otherwise it can\nimprove readability. We'll see some examples of this below as well.\n\n    >>> sorted(catalog.findRelationTokens(query(supervisor=a)))\n    ['Betty', 'Chuck']\n\n    >>> sorted(catalog.findRelationTokens({'supervisor': None}))\n    ['Alice']\n\n    >>> sorted(catalog.findRelationTokens(\n    ...     query(supervisor=zc.relation.catalog.any(c, d))))\n    ['Frank', 'Galyn', 'Howie']\n\n    >>> sorted(catalog.findRelationTokens(\n    ...     query({zc.relation.RELATION: zc.relation.catalog.any(a, b, f),\n    ...            'supervisor': a})))\n    ['Betty']\n\nThe catalog provides several other methods just for working with tokens.\n\n- ``resolveQuery``: the inverse of ``tokenizeQuery``, converting a\n  tokenizedquery to a query with objects.\n\n- ``tokenizeValues``: returns an iterable of tokens for the values of the given\n  index name.\n\n- ``resolveValueTokens``: returns an iterable of values for the tokens of the\n  given index name.\n\n- ``tokenizeRelation``: returns a token for the given relation.\n\n- ``resolveRelationToken``: returns a relation for the given token.\n\n- ``tokenizeRelations``: returns an iterable of tokens for the relations given.\n\n- ``resolveRelationTokens``: returns an iterable of relations for the tokens\n  given.\n\nThese methods are lesser used, and described in more technical documents in\nthis package.\n\nTransitive Searching, Query Factories, and ``maxDepth``\n-------------------------------------------------------\n\nSo, we've seen a lot of one-level, intransitive searching. What about\ntransitive searching? Well, you need to tell the catalog how to walk the tree.\nIn simple (and very common) cases like this, the\n``zc.relation.queryfactory.TransposingTransitive`` will do the trick.\n\nA transitive query factory is just a callable that the catalog uses to\nask \"I got this query, and here are the results I found. I'm supposed to\nwalk another step transitively, so what query should I search for next?\"\nWriting a factory is more complex than we want to talk about right now,\nbut using the ``TransposingTransitiveQueryFactory`` is easy. You just tell\nit the two query names it should transpose for walking in either\ndirection.\n\nFor instance, here we just want to tell the factory to transpose the two keys\nwe've used, ``zc.relation.RELATION`` and 'supervisor'. Let's make a factory,\nuse it in a query for a couple of transitive searches, and then, if you want,\nyou can read through a footnote to talk through what is happening.\n\nHere's the factory.\n\n    >>> import zc.relation.queryfactory\n    >>> factory = zc.relation.queryfactory.TransposingTransitive(\n    ...     zc.relation.RELATION, 'supervisor')\n\nNow ``factory`` is just a callable.  Let's let it help answer a couple of\nquestions.\n\nWho are all of Howie's supervisors transitively (this looks up in the\ndiagram)?\n\n    >>> list(catalog.findValues('supervisor', {zc.relation.RELATION: 'Howie'},\n    ...      queryFactory=factory))\n    ... # doctest: +NORMALIZE_WHITESPACE\n    [<Employee instance \"Diane\">, <Employee instance \"Betty\">,\n     <Employee instance \"Alice\">]\n\nWho are all of the people Betty supervises transitively, breadth first (this\nlooks down in the diagram)?\n\n    >>> people = list(catalog.findRelations(\n    ...     {'supervisor': 'Betty'}, queryFactory=factory))\n    >>> sorted(people[:2])\n    [<Employee instance \"Diane\">, <Employee instance \"Edgar\">]\n    >>> people[2]\n    <Employee instance \"Howie\">\n\nYup, that looks right.  So how did that work?  If you care, read this\nfootnote. [#I_care]_\n    \nThis transitive factory is really the only transitive factory you would\nwant for this particular catalog, so it probably is safe to wire it in\nas a default.  You can add multiple query factories to match different\nqueries using ``addDefaultQueryFactory``.\n\n    >>> catalog.addDefaultQueryFactory(factory)\n\nNow all searches are transitive by default.\n\n    >>> list(catalog.findValues('supervisor', {zc.relation.RELATION: 'Howie'}))\n    ... # doctest: +NORMALIZE_WHITESPACE\n    [<Employee instance \"Diane\">, <Employee instance \"Betty\">,\n     <Employee instance \"Alice\">]\n    >>> people = list(catalog.findRelations({'supervisor': 'Betty'}))\n    >>> sorted(people[:2])\n    [<Employee instance \"Diane\">, <Employee instance \"Edgar\">]\n    >>> people[2]\n    <Employee instance \"Howie\">\n\nWe can force a non-transitive search, or a specific search depth, with\n``maxDepth`` [#needs_a_transitive_queries_factory]_.\n\n    >>> list(catalog.findValues(\n    ...     'supervisor', {zc.relation.RELATION: 'Howie'}, maxDepth=1))\n    [<Employee instance \"Diane\">]\n    >>> sorted(catalog.findRelations({'supervisor': 'Betty'}, maxDepth=1))\n    [<Employee instance \"Diane\">, <Employee instance \"Edgar\">]\n\n[#maxDepthExceptions]_ We'll introduce some other available search\narguments later in this document and in other documents.  It's important\nto note that *all search methods share the same arguments as\n``findRelations``*.  ``findValues`` and ``findValueTokens`` only add the\ninitial argument of specifying the desired value.\n\nWe've looked at two search methods so far: the ``findValues`` and\n``findRelations`` methods help you ask what is related.  But what if you\nwant to know *how* things are transitively related?\n\n``findRelationChains`` and ``targetQuery``\n------------------------------------------\n\nAnother search method, ``findRelationChains``, helps you discover how\nthings are transitively related.  \n\nThe method name says \"find relation chains\".  But what is a \"relation\nchain\"?  In this API, it is a transitive path of relations.  For\ninstance, what's the chain of command above Howie?  ``findRelationChains``\nwill return each unique path.\n\n    >>> list(catalog.findRelationChains({zc.relation.RELATION: 'Howie'}))\n    ... # doctest: +NORMALIZE_WHITESPACE\n    [(<Employee instance \"Howie\">,),\n     (<Employee instance \"Howie\">, <Employee instance \"Diane\">),\n     (<Employee instance \"Howie\">, <Employee instance \"Diane\">,\n      <Employee instance \"Betty\">),\n     (<Employee instance \"Howie\">, <Employee instance \"Diane\">,\n     <Employee instance \"Betty\">, <Employee instance \"Alice\">)]\n\nLook at that result carefully.  Notice that the result is an iterable of\ntuples.  Each tuple is a unique chain, which may be a part of a\nsubsequent chain.  In this case, the last chain is the longest and the\nmost comprehensive.\n\nWhat if we wanted to see all the paths from Alice?  That will be one\nchain for each supervised employee, because it shows all possible paths.\n\n    >>> sorted(catalog.findRelationChains(\n    ...     {'supervisor': 'Alice'}))\n    ... # doctest: +NORMALIZE_WHITESPACE\n    [(<Employee instance \"Betty\">,),\n     (<Employee instance \"Betty\">, <Employee instance \"Diane\">),\n     (<Employee instance \"Betty\">, <Employee instance \"Diane\">,\n      <Employee instance \"Howie\">),\n     (<Employee instance \"Betty\">, <Employee instance \"Edgar\">),\n     (<Employee instance \"Chuck\">,),\n     (<Employee instance \"Chuck\">, <Employee instance \"Frank\">),\n     (<Employee instance \"Chuck\">, <Employee instance \"Galyn\">)]\n\nThat's all the paths--all the chains--from Alice.  We sorted the results,\nbut normally they would be breadth first.\n\nBut what if we wanted to just find the paths from one query result to\nanother query result--say, we wanted to know the chain of command from Alice\ndown to Howie?  Then we can specify a ``targetQuery`` that specifies the\ncharacteristics of our desired end point (or points).\n\n    >>> list(catalog.findRelationChains(\n    ...     {'supervisor': 'Alice'},\n    ...     targetQuery={zc.relation.RELATION: 'Howie'}))\n    ... # doctest: +NORMALIZE_WHITESPACE\n    [(<Employee instance \"Betty\">, <Employee instance \"Diane\">,\n      <Employee instance \"Howie\">)]\n\nSo, Betty supervises Diane, who supervises Howie.\n\nNote that ``targetQuery`` now joins ``maxDepth`` in our collection of shared\nsearch arguments that we have introduced.\n\n``filter`` and ``targetFilter``\n-------------------------------\n\nWe can take a quick look now at the last of the two shared search arguments:\n``filter`` and ``targetFilter``.  These two are similar in that they both are\ncallables that can approve or reject given relations in a search based on\nwhatever logic you can code.  They differ in that ``filter`` stops any further\ntransitive searches from the relation, while ``targetFilter`` merely omits the\ngiven result but allows further search from it.  Like ``targetQuery``, then,\n``targetFilter`` is good when you want to specify the other end of a path.\n\nAs an example, let's say we only want to return female employees.\n\n    >>> female_employees = ('Alice', 'Betty', 'Diane', 'Galyn')\n    >>> def female_filter(relchain, query, catalog, cache):\n    ...     return relchain[-1] in female_employees\n    ...\n\nHere are all the female employees supervised by Alice transitively, using\n``targetFilter``.\n\n    >>> list(catalog.findRelations({'supervisor': 'Alice'},\n    ...                            targetFilter=female_filter))\n    ... # doctest: +NORMALIZE_WHITESPACE\n    [<Employee instance \"Betty\">, <Employee instance \"Diane\">,\n     <Employee instance \"Galyn\">]\n\nHere are all the female employees supervised by Chuck.\n\n    >>> list(catalog.findRelations({'supervisor': 'Chuck'},\n    ...                            targetFilter=female_filter))\n    [<Employee instance \"Galyn\">]\n\nThe same method used as a filter will only return females directly\nsupervised by other females--not Galyn, in this case.\n\n    >>> list(catalog.findRelations({'supervisor': 'Alice'},\n    ...                            filter=female_filter))\n    [<Employee instance \"Betty\">, <Employee instance \"Diane\">]\n\nThese can be combined with one another, and with the other search\narguments [#filter]_.\n\nSearch indexes\n--------------\n\nWithout setting up any additional indexes, the transitive behavior of\nthe ``findRelations`` and ``findValues`` methods essentially relies on the\nbrute force searches of ``findRelationChains``.  Results are iterables\nthat are gradually computed.  For instance, let's repeat the question\n\"Whom does Betty supervise?\".  Notice that ``res`` first populates a list\nwith three members, but then does not populate a second list.  The\niterator has been exhausted.\n\n    >>> res = catalog.findRelationTokens({'supervisor': 'Betty'})\n    >>> unindexed = sorted(res)\n    >>> len(unindexed)\n    3\n    >>> len(list(res)) # iterator is exhausted\n    0\n\nThe brute force of this approach can be sufficient in many cases, but\nsometimes speed for these searches is critical.  In these cases, you can\nadd a \"search index\".  A search index speeds up the result of one or\nmore precise searches by indexing the results.  Search indexes can\naffect the results of searches with a ``queryFactory`` in ``findRelations``,\n``findValues``, and the soon-to-be-introduced ``canFind``, but they do not\naffect ``findRelationChains``.\n\nThe zc.relation package currently includes two kinds of search indexes, one for\nindexing transitive membership searches in a hierarchy and one for intransitive\nsearches explored in tokens.txt in this package, which can optimize frequent\nsearches on complex queries or can effectively change the meaning of an\nintransitive search. Other search index implementations and approaches may be\nadded in the future. \n\nHere's a very brief example of adding a search index for the transitive\nsearches seen above that specify a 'supervisor'.\n\n    >>> import zc.relation.searchindex\n    >>> catalog.addSearchIndex(\n    ...     zc.relation.searchindex.TransposingTransitiveMembership(\n    ...         'supervisor', zc.relation.RELATION))\n\nThe ``zc.relation.RELATION`` describes how to walk back up the chain. Search\nindexes are explained in reasonable detail in searchindex.txt.\n\nNow that we have added the index, we can search again.  The result this\ntime is already computed, so, at least when you ask for tokens, it\nis repeatable.\n\n    >>> res = catalog.findRelationTokens({'supervisor': 'Betty'})\n    >>> len(list(res))\n    3\n    >>> len(list(res))\n    3\n    >>> sorted(res) == unindexed\n    True\n\nNote that the breadth-first sorting is lost when an index is used [#updates]_.\n\nTransitive cycles (and updating and removing relations)\n-------------------------------------------------------\n\nThe transitive searches and the provided search indexes can handle\ncycles.  Cycles are less likely in the current example than some others,\nbut we can stretch the case a bit: imagine a \"king in disguise\", in\nwhich someone at the top works lower in the hierarchy.  Perhaps Alice\nworks for Zane, who works for Betty, who works for Alice.  Artificial,\nbut easy enough to draw::\n\n            ______\n           /      \\\n          /     Zane\n         /        |\n        /       Alice\n       /     __/     \\__\n      / Betty__         Chuck\n      \\-/  /   \\         /   \\\n         Diane Edgar Frank   Galyn\n          |\n        Howie\n\nEasy to create too.\n\n    >>> z = Employee('Zane', b)\n    >>> a.supervisor = z\n\nNow we have a cycle.  Of course, we have not yet told the catalog about it.\n``index`` can be used both to reindex Alice and index Zane.\n\n    >>> catalog.index(a)\n    >>> catalog.index(z)\n\nNow, if we ask who works for Betty, we get the entire tree.  (We'll ask\nfor tokens, just so that the result is smaller to look at.) [#same_set]_\n\n    >>> sorted(catalog.findRelationTokens({'supervisor': 'Betty'}))\n    ... # doctest: +NORMALIZE_WHITESPACE\n    ['Alice', 'Betty', 'Chuck', 'Diane', 'Edgar', 'Frank', 'Galyn', 'Howie',\n     'Zane']\n\nIf we ask for the supervisors of Frank, it will include Betty.\n\n    >>> list(catalog.findValueTokens(\n    ...     'supervisor', {zc.relation.RELATION: 'Frank'}))\n    ['Chuck', 'Alice', 'Zane', 'Betty']\n\nPaths returned by ``findRelationChains`` are marked with special interfaces,\nand special metadata, to show the chain.\n\n    >>> res = list(catalog.findRelationChains({zc.relation.RELATION: 'Frank'}))\n    >>> len(res)\n    5\n    >>> import zc.relation.interfaces\n    >>> [zc.relation.interfaces.ICircularRelationPath.providedBy(r)\n    ...  for r in res]\n    [False, False, False, False, True]\n\nHere's the last chain:\n    \n    >>> res[-1] # doctest: +NORMALIZE_WHITESPACE\n    cycle(<Employee instance \"Frank\">, <Employee instance \"Chuck\">,\n          <Employee instance \"Alice\">, <Employee instance \"Zane\">,\n          <Employee instance \"Betty\">)\n\nThe chain's 'cycled' attribute has a list of queries that create a cycle.\nIf you run the query, or queries, you see where the cycle would\nrestart--where the path would have started to overlap.  Sometimes the query\nresults will include multiple cycles, and some paths that are not cycles.\nIn this case, there's only a single cycled query, which results in a single\ncycled relation.\n\n    >>> len(res[4].cycled)\n    1\n\n    >>> list(catalog.findRelations(res[4].cycled[0], maxDepth=1))\n    [<Employee instance \"Alice\">]\n\nTo remove this craziness [#reverse_lookup]_, we can unindex Zane, and change\nand reindex Alice.\n\n    >>> a.supervisor = None\n    >>> catalog.index(a)\n\n    >>> list(catalog.findValueTokens(\n    ...     'supervisor', {zc.relation.RELATION: 'Frank'}))\n    ['Chuck', 'Alice']\n\n    >>> catalog.unindex(z)\n\n    >>> sorted(catalog.findRelationTokens({'supervisor': 'Betty'}))\n    ['Diane', 'Edgar', 'Howie']\n\n``canFind``\n-----------\n\nWe're to the last search method: ``canFind``.  We've gotten values and\nrelations, but what if you simply want to know if there is any\nconnection at all?  For instance, is Alice a supervisor of Howie? Is\nChuck?  To answer these questions, you can use the ``canFind`` method\ncombined with the ``targetQuery`` search argument.\n\nThe ``canFind`` method takes the same arguments as findRelations.  However,\nit simply returns a boolean about whether the search has any results.  This\nis a convenience that also allows some extra optimizations.\n\nDoes Betty supervise anyone?\n\n    >>> catalog.canFind({'supervisor': 'Betty'})\n    True\n\nWhat about Howie?\n\n    >>> catalog.canFind({'supervisor': 'Howie'})\n    False\n\nWhat about...Zane (no longer an employee)?\n\n    >>> catalog.canFind({'supervisor': 'Zane'})\n    False\n\nIf we want to know if Alice or Chuck supervise Howie, then we want to specify\ncharacteristics of two points on a path.  To ask a question about the other\nend of a path, use ``targetQuery``.\n\nIs Alice a supervisor of Howie?\n\n    >>> catalog.canFind({'supervisor': 'Alice'},\n    ...                 targetQuery={zc.relation.RELATION: 'Howie'})\n    True\n\nIs Chuck a supervisor of Howie?\n\n    >>> catalog.canFind({'supervisor': 'Chuck'},\n    ...                 targetQuery={zc.relation.RELATION: 'Howie'})\n    False\n\nIs Howie Alice's employee?\n\n    >>> catalog.canFind({zc.relation.RELATION: 'Howie'},\n    ...                 targetQuery={'supervisor': 'Alice'})\n    True\n\nIs Howie Chuck's employee?\n\n    >>> catalog.canFind({zc.relation.RELATION: 'Howie'},\n    ...                 targetQuery={'supervisor': 'Chuck'})\n    False\n\n(Note that, if your relations describe a hierarchy, searching up a hierarchy is\nusually more efficient than searching down, so the second pair of questions is\ngenerally preferable to the first in that case.)\n\nWorking with More Complex Relations\n===================================\n\nSo far, our examples have used a simple relation, in which the indexed object\nis one end of the relation, and the indexed value on the object is the other.\nThis example has let us look at all of the basic zc.relation catalog\nfunctionality.\n\nAs mentioned in the introduction, though, the catalog supports, and was\ndesigned for, more complex relations.  This section will quickly examine a\nfew examples of other uses.\n\nIn this section, we will see several examples of ideas mentioned above but not\nyet demonstrated.\n\n- We can use interface attributes (values or callables) to define value\n  indexes.\n\n- Using interface attributes will cause an attempt to adapt the relation if it\n  does not already provide the interface.\n\n- We can use the ``multiple`` argument when defining a value index to indicate\n  that the indexed value is a collection.\n\n- We can use the ``name`` argument when defining a value index to specify the\n  name to be used in queries, rather than relying on the name of the interface\n  attribute or callable.\n\n- The ``family`` argument in instantiating the catalog lets you change the\n  default btree family for relations and value indexes from\n  ``BTrees.family32.IF`` to ``BTrees.family64.IF``.\n\nExtrinsic Two-Way Relations\n---------------------------\n\nA simple variation of our current story is this: what if the indexed relation\nwere between two other objects--that is, what if the relation were extrinsic to\nboth participants?\n\nLet's imagine we have relations that show biological parentage. We'll want a\n\"Person\" and a \"Parentage\" relation. We'll define an interface for\n``IParentage`` so we can see how using an interface to define a value index\nworks.\n\n    >>> class Person(object):\n    ...     def __init__(self, name):\n    ...         self.name = name\n    ...     def __repr__(self):\n    ...         return '<Person %r>' % (self.name,)\n    ...\n    >>> import zope.interface\n    >>> class IParentage(zope.interface.Interface):\n    ...     child = zope.interface.Attribute('the child')\n    ...     parents = zope.interface.Attribute('the parents')\n    ...\n    >>> class Parentage(object):\n    ...     zope.interface.implements(IParentage)\n    ...     def __init__(self, child, parent1, parent2):\n    ...         self.child = child\n    ...         self.parents = (parent1, parent2)\n    ...\n\nNow we'll define the dumpers and loaders and then the catalog.  Notice that\nwe are relying on a pattern: the dump must be called before the load.\n\n    >>> _people = {}\n    >>> _relations = {}\n    >>> def dumpPeople(obj, catalog, cache):\n    ...     if _people.setdefault(obj.name, obj) is not obj:\n    ...         raise ValueError('we are assuming names are unique')\n    ...     return obj.name\n    ...\n    >>> def loadPeople(token, catalog, cache):\n    ...     return _people[token]\n    ...\n    >>> def dumpRelations(obj, catalog, cache):\n    ...     if _relations.setdefault(id(obj), obj) is not obj:\n    ...         raise ValueError('huh?')\n    ...     return id(obj)\n    ...\n    >>> def loadRelations(token, catalog, cache):\n    ...     return _relations[token]\n    ...\n    >>> catalog = zc.relation.catalog.Catalog(dumpRelations, loadRelations)\n    >>> catalog.addValueIndex(IParentage['child'], dumpPeople, loadPeople,\n    ...                       btree=BTrees.family32.OO)\n    >>> catalog.addValueIndex(IParentage['parents'], dumpPeople, loadPeople,\n    ...                       btree=BTrees.family32.OO, multiple=True,\n    ...                       name='parent')\n    >>> catalog.addDefaultQueryFactory(\n    ...     zc.relation.queryfactory.TransposingTransitive(\n    ...         'child', 'parent'))\n\nNow we have a catalog fully set up.  Let's add some relations.\n\n    >>> a = Person('Alice')\n    >>> b = Person('Betty')\n    >>> c = Person('Charles')\n    >>> d = Person('Donald')\n    >>> e = Person('Eugenia')\n    >>> f = Person('Fred')\n    >>> g = Person('Gertrude')\n    >>> h = Person('Harry')\n    >>> i = Person('Iphigenia')\n    >>> j = Person('Jacob')\n    >>> k = Person('Karyn')\n    >>> l = Person('Lee')\n\n    >>> r1 = Parentage(child=j, parent1=k, parent2=l)\n    >>> r2 = Parentage(child=g, parent1=i, parent2=j)\n    >>> r3 = Parentage(child=f, parent1=g, parent2=h)\n    >>> r4 = Parentage(child=e, parent1=g, parent2=h)\n    >>> r5 = Parentage(child=b, parent1=e, parent2=d)\n    >>> r6 = Parentage(child=a, parent1=e, parent2=c)\n\nHere's that in one of our hierarchy diagrams.\n\n::\n\n    Karyn   Lee\n         \\ /\n        Jacob   Iphigenia\n             \\ /\n            Gertrude    Harry\n                    \\  /\n                 /-------\\\n             Fred        Eugenia\n               Donald   /     \\    Charles\n                     \\ /       \\  /\n                    Betty      Alice\n\nNow we can index the relations, and ask some questions.\n\n    >>> for r in (r1, r2, r3, r4, r5, r6):\n    ...     catalog.index(r)\n    >>> query = catalog.tokenizeQuery\n    >>> sorted(catalog.findValueTokens(\n    ...     'parent', query(child=a), maxDepth=1))\n    ['Charles', 'Eugenia']\n    >>> sorted(catalog.findValueTokens('parent', query(child=g)))\n    ['Iphigenia', 'Jacob', 'Karyn', 'Lee']\n    >>> sorted(catalog.findValueTokens(\n    ...     'child', query(parent=h), maxDepth=1))\n    ['Eugenia', 'Fred']\n    >>> sorted(catalog.findValueTokens('child', query(parent=h)))\n    ['Alice', 'Betty', 'Eugenia', 'Fred']\n    >>> catalog.canFind(query(parent=h), targetQuery=query(child=d))\n    False\n    >>> catalog.canFind(query(parent=l), targetQuery=query(child=b))\n    True\n\nMulti-Way Relations\n-------------------\n\nThe previous example quickly showed how to set the catalog up for a completely\nextrinsic two-way relation.  The same pattern can be extended for N-way\nrelations.  For example, consider a four way relation in the form of\nSUBJECTS PREDICATE OBJECTS [in CONTEXT].  For instance, we might\nwant to say \"(joe,) SELLS (doughnuts, coffee) in corner_store\", where \"(joe,)\"\nis the collection of subjects, \"SELLS\" is the predicate, \"(doughnuts, coffee)\"\nis the collection of objects, and \"corner_store\" is the optional context.\n\nFor this last example, we'll integrate two components we haven't seen examples\nof here before: the ZODB and adaptation.\n\nOur example ZODB approach uses OIDs as the tokens. this might be OK in some\ncases, if you will never support multiple databases and you don't need an\nabstraction layer so that a different object can have the same identifier.\n\n    >>> import persistent\n    >>> import struct\n    >>> class Demo(persistent.Persistent):\n    ...     def __init__(self, name):\n    ...         self.name = name\n    ...     def __repr__(self):\n    ...         return '<Demo instance %r>' % (self.name,)\n    ...\n    >>> class IRelation(zope.interface.Interface):\n    ...     subjects = zope.interface.Attribute('subjects')\n    ...     predicate = zope.interface.Attribute('predicate')\n    ...     objects = zope.interface.Attribute('objects')\n    ...\n    >>> class IContextual(zope.interface.Interface):\n    ...     def getContext():\n    ...         'return context'\n    ...     def setContext(value):\n    ...         'set context'\n    ...\n    >>> class Contextual(object):\n    ...     zope.interface.implements(IContextual)\n    ...     _context = None\n    ...     def getContext(self):\n    ...         return self._context\n    ...     def setContext(self, value):\n    ...         self._context = value\n    ...\n    >>> class Relation(persistent.Persistent):\n    ...     zope.interface.implements(IRelation)\n    ...     def __init__(self, subjects, predicate, objects):\n    ...         self.subjects = subjects\n    ...         self.predicate = predicate\n    ...         self.objects = objects\n    ...         self._contextual = Contextual()\n    ...\n    ...     def __conform__(self, iface):\n    ...         if iface is IContextual:\n    ...             return self._contextual\n    ...\n\n(When using zope.component, the ``__conform__`` would normally be unnecessary;\nhowever, this package does not depend on zope.component.)\n\n    >>> def dumpPersistent(obj, catalog, cache):\n    ...     if obj._p_jar is None:\n    ...         catalog._p_jar.add(obj) # assumes something else places it\n    ...     return struct.unpack('<q', obj._p_oid)[0]\n    ...\n    >>> def loadPersistent(token, catalog, cache):\n    ...     return catalog._p_jar.get(struct.pack('<q', token))\n    ...\n\n    >>> from ZODB.tests.util import DB\n    >>> db = DB()\n    >>> conn = db.open()\n    >>> root = conn.root()\n    >>> catalog = root['catalog'] = zc.relation.catalog.Catalog(\n    ...     dumpPersistent, loadPersistent, family=BTrees.family64)\n    >>> catalog.addValueIndex(IRelation['subjects'],\n    ...     dumpPersistent, loadPersistent, multiple=True, name='subject')\n    >>> catalog.addValueIndex(IRelation['objects'],\n    ...     dumpPersistent, loadPersistent, multiple=True, name='object')\n    >>> catalog.addValueIndex(IRelation['predicate'], btree=BTrees.family32.OO)\n    >>> catalog.addValueIndex(IContextual['getContext'],\n    ...     dumpPersistent, loadPersistent, name='context')\n    >>> import transaction\n    >>> transaction.commit()\n\nThe ``dumpPersistent`` and ``loadPersistent`` is a bit of a toy, as warned\nabove. Also, while our predicate will be stored as a string, some programmers\nmay prefer to have a dump in such a case verify that the string has been\nexplicitly registered in some way, to prevent typos. Obviously, we are not\nbothering with this for our example.\n\nWe make some objects, and then we make some relations with those objects and\nindex them.\n\n    >>> joe = root['joe'] = Demo('joe')\n    >>> sara = root['sara'] = Demo('sara')\n    >>> jack = root['jack'] = Demo('jack')\n    >>> ann = root['ann'] = Demo('ann')\n    >>> doughnuts = root['doughnuts'] = Demo('doughnuts')\n    >>> coffee = root['coffee'] = Demo('coffee')\n    >>> muffins = root['muffins'] = Demo('muffins')\n    >>> cookies = root['cookies'] = Demo('cookies')\n    >>> newspaper = root['newspaper'] = Demo('newspaper')\n    >>> corner_store = root['corner_store'] = Demo('corner_store')\n    >>> bistro = root['bistro'] = Demo('bistro')\n    >>> bakery = root['bakery'] = Demo('bakery')\n\n    >>> SELLS = 'SELLS'\n    >>> BUYS = 'BUYS'\n    >>> OBSERVES = 'OBSERVES'\n\n    >>> rel1 = root['rel1'] = Relation((joe,), SELLS, (doughnuts, coffee))\n    >>> IContextual(rel1).setContext(corner_store)\n    >>> rel2 = root['rel2'] = Relation((sara, jack), SELLS,\n    ...                                (muffins, doughnuts, cookies))\n    >>> IContextual(rel2).setContext(bakery)\n    >>> rel3 = root['rel3'] = Relation((ann,), BUYS, (doughnuts,))\n    >>> rel4 = root['rel4'] = Relation((sara,), BUYS, (bistro,))\n    \n    >>> for r in (rel1, rel2, rel3, rel4):\n    ...     catalog.index(r)\n    ...\n\nNow we can ask a simple question.  Where do they sell doughnuts?\n\n    >>> query = catalog.tokenizeQuery\n    >>> sorted(catalog.findValues(\n    ...     'context',\n    ...     (query(predicate=SELLS, object=doughnuts))),\n    ...     key=lambda ob: ob.name)\n    [<Demo instance 'bakery'>, <Demo instance 'corner_store'>]\n\nHopefully these examples give you further ideas on how you can use this tool.\n\nAdditional Functionality\n========================\n\nThis section introduces peripheral functionality.  We will learn the following.\n\n- Listeners can be registered in the catalog.  They are alerted when a relation\n  is added, modified, or removed; and when the catalog is cleared and copied\n  (see below).\n\n- The ``clear`` method clears the relations in the catalog.\n\n- The ``copy`` method makes a copy of the current catalog by copying internal\n  data structures, rather than reindexing the relations, which can be a\n  significant optimization opportunity.  This copies value indexes and search\n  indexes; and gives listeners an opportunity to specify what, if anything,\n  should be included in the new copy.\n\n- The ``ignoreSearchIndex`` argument to the five pertinent search methods\n  causes the search to ignore search indexes, even if there is an appropriate\n  one.\n\n- ``findRelationTokens()`` (without arguments) returns the BTree set of all\n  relation tokens in the catalog.\n\n- ``findValueTokens(INDEX_NAME)`` (where \"INDEX_NAME\" should be replaced with\n  an index name) returns the BTree set of all value tokens in the catalog for\n  the given index name.\n\nListeners\n---------\n\nA variety of potential clients may want to be alerted when the catalog changes.\nzc.relation does not depend on zope.event, so listeners may be registered for\nvarious changes.  Let's make a quick demo listener.  The ``additions`` and\n``removals`` arguments are dictionaries of {value name: iterable of added or\nremoved value tokens}.\n\n    >>> def pchange(d):\n    ...     pprint.pprint(dict(\n    ...         (k, v is not None and set(v) or v) for k, v in d.items()))\n    >>> class DemoListener(persistent.Persistent):\n    ...     zope.interface.implements(zc.relation.interfaces.IListener)\n    ...     def relationAdded(self, token, catalog, additions):\n    ...         print ('a relation (token %r) was added to %r '\n    ...                'with these values:' % (token, catalog))\n    ...         pchange(additions)\n    ...     def relationModified(self, token, catalog, additions, removals):\n    ...         print ('a relation (token %r) in %r was modified '\n    ...                'with these additions:' % (token, catalog))\n    ...         pchange(additions)\n    ...         print 'and these removals:'\n    ...         pchange(removals)\n    ...     def relationRemoved(self, token, catalog, removals):\n    ...         print ('a relation (token %r) was removed from %r '\n    ...                'with these values:' % (token, catalog))\n    ...         pchange(removals)\n    ...     def sourceCleared(self, catalog):\n    ...         print 'catalog %r had all relations unindexed' % (catalog,)\n    ...     def sourceAdded(self, catalog):\n    ...         print 'now listening to catalog %r' % (catalog,)\n    ...     def sourceRemoved(self, catalog):\n    ...         print 'no longer listening to catalog %r' % (catalog,)\n    ...     def sourceCopied(self, original, copy):\n    ...         print 'catalog %r made a copy %r' % (catalog, copy)\n    ...         copy.addListener(self)\n    ...\n\nListeners can be installed multiple times.\n\nListeners can be added as persistent weak references, so that, if they are\ndeleted elsewhere, a ZODB pack will not consider the reference in the catalog\nto be something preventing garbage collection.\n\nWe'll install one of these demo listeners into our new catalog as a\nnormal reference, the default behavior.  Then we'll show some example messages\nsent to the demo listener.\n\n    >>> listener = DemoListener()\n    >>> catalog.addListener(listener) # doctest: +ELLIPSIS\n    now listening to catalog <zc.relation.catalog.Catalog object at ...>\n    >>> rel5 = root['rel5'] = Relation((ann,), OBSERVES, (newspaper,))\n    >>> catalog.index(rel5) # doctest: +ELLIPSIS\n    a relation (token ...) was added to <...Catalog...> with these values:\n    {'context': None,\n     'object': set([...]),\n     'predicate': set(['OBSERVES']),\n     'subject': set([...])}\n    >>> rel5.subjects = (jack,)\n    >>> IContextual(rel5).setContext(bistro)\n    >>> catalog.index(rel5) # doctest: +ELLIPSIS\n    a relation (token ...) in ...Catalog... was modified with these additions:\n    {'context': set([...]),\n     'subject': set([...])}\n    and these removals:\n    {'subject': set([...])}\n    >>> catalog.unindex(rel5) # doctest: +ELLIPSIS\n    a relation (token ...) was removed from <...Catalog...> with these values:\n    {'context': set([...]),\n     'object': set([...]),\n     'predicate': set(['OBSERVES']),\n     'subject': set([...])}\n\n    >>> catalog.removeListener(listener) # doctest: +ELLIPSIS\n    no longer listening to catalog <...Catalog...>\n    >>> catalog.index(rel5) # doctest: +ELLIPSIS\n\nThe only two methods not shown by those examples are ``sourceCleared`` and\n``sourceCopied``.  We'll get to those very soon below.\n\nThe ``clear`` Method\n--------------------\n\nThe ``clear`` method simply indexes all relations from a catalog.  Installed\nlisteners have ``sourceCleared`` called.\n\n    >>> len(catalog)\n    5\n\n    >>> catalog.addListener(listener) # doctest: +ELLIPSIS\n    now listening to catalog <zc.relation.catalog.Catalog object at ...>\n\n    >>> catalog.clear() # doctest: +ELLIPSIS\n    catalog <...Catalog...> had all relations unindexed\n\n    >>> len(catalog)\n    0\n    >>> sorted(catalog.findValues(\n    ...     'context',\n    ...     (query(predicate=SELLS, object=doughnuts))),\n    ...     key=lambda ob: ob.name)\n    []\n\nThe ``copy`` Method\n-------------------\n\nSometimes you may want to copy a relation catalog.  One way of doing this is\nto create a new catalog, set it up like the current one, and then reindex\nall the same relations.  This is unnecessarily slow for programmer and\ncomputer.  The ``copy`` method makes a new catalog with the same corpus of\nindexed relations by copying internal data structures.\n\nSearch indexes are requested to make new copies of themselves for the new\ncatalog; and listeners are given an opportunity to react as desired to the new\ncopy, including installing themselves, and/or another object of their choosing\nas a listener.\n\nLet's make a copy of a populated index with a search index and a listener.\nNotice in our listener that ``sourceCopied`` adds itself as a listener to the\nnew copy. This is done at the very end of the ``copy`` process.\n\n    >>> for r in (rel1, rel2, rel3, rel4, rel5):\n    ...     catalog.index(r)\n    ... # doctest: +ELLIPSIS\n    a relation ... was added...\n    a relation ... was added...\n    a relation ... was added...\n    a relation ... was added...\n    a relation ... was added...\n    >>> BEGAT = 'BEGAT'\n    >>> rel6 = root['rel6'] = Relation((jack, ann), BEGAT, (sara,))\n    >>> henry = root['henry'] = Demo('henry')\n    >>> rel7 = root['rel7'] = Relation((sara, joe), BEGAT, (henry,))\n    >>> catalog.index(rel6) # doctest: +ELLIPSIS\n    a relation (token ...) was added to <...Catalog...> with these values:\n    {'context': None,\n     'object': set([...]),\n     'predicate': set(['BEGAT']),\n     'subject': set([..., ...])}\n    >>> catalog.index(rel7) # doctest: +ELLIPSIS\n    a relation (token ...) was added to <...Catalog...> with these values:\n    {'context': None,\n     'object': set([...]),\n     'predicate': set(['BEGAT']),\n     'subject': set([..., ...])}\n    >>> catalog.addDefaultQueryFactory(\n    ...     zc.relation.queryfactory.TransposingTransitive(\n    ...         'subject', 'object', {'predicate': BEGAT}))\n    ...\n    >>> list(catalog.findValues(\n    ...     'object', query(subject=jack, predicate=BEGAT)))\n    [<Demo instance 'sara'>, <Demo instance 'henry'>]\n    >>> catalog.addSearchIndex(\n    ...     zc.relation.searchindex.TransposingTransitiveMembership(\n    ...         'subject', 'object', static={'predicate': BEGAT}))\n    >>> sorted(\n    ...     catalog.findValues(\n    ...         'object', query(subject=jack, predicate=BEGAT)),\n    ...     key=lambda o: o.name)\n    [<Demo instance 'henry'>, <Demo instance 'sara'>]\n\n    >>> newcat = root['newcat'] = catalog.copy() # doctest: +ELLIPSIS\n    catalog <...Catalog...> made a copy <...Catalog...>\n    now listening to catalog <...Catalog...>\n    >>> transaction.commit()\n\nNow the copy has its own copies of internal data structures and of the\nsearchindex.  For example, let's modify the relations and add a new one to the\ncopy.\n\n    >>> mary = root['mary'] = Demo('mary')\n    >>> buffy = root['buffy'] = Demo('buffy')\n    >>> zack = root['zack'] = Demo('zack')\n    >>> rel7.objects += (mary,)\n    >>> rel8 = root['rel8'] = Relation((henry, buffy), BEGAT, (zack,))\n    >>> newcat.index(rel7) # doctest: +ELLIPSIS\n    a relation (token ...) in ...Catalog... was modified with these additions:\n    {'object': set([...])}\n    and these removals:\n    {}\n    >>> newcat.index(rel8) # doctest: +ELLIPSIS\n    a relation (token ...) was added to ...Catalog... with these values:\n    {'context': None,\n     'object': set([...]),\n     'predicate': set(['BEGAT']),\n     'subject': set([..., ...])}\n    >>> len(newcat)\n    8\n    >>> sorted(\n    ...     newcat.findValues(\n    ...         'object', query(subject=jack, predicate=BEGAT)),\n    ...     key=lambda o: o.name) # doctest: +NORMALIZE_WHITESPACE\n    [<Demo instance 'henry'>, <Demo instance 'mary'>, <Demo instance 'sara'>,\n     <Demo instance 'zack'>]\n    >>> sorted(\n    ...     newcat.findValues(\n    ...         'object', query(subject=sara)),\n    ...     key=lambda o: o.name) # doctest: +NORMALIZE_WHITESPACE\n    [<Demo instance 'bistro'>, <Demo instance 'cookies'>,\n    <Demo instance 'doughnuts'>, <Demo instance 'henry'>,\n    <Demo instance 'mary'>, <Demo instance 'muffins'>]\n\nThe original catalog is not modified.\n\n    >>> len(catalog)\n    7\n    >>> sorted(\n    ...     catalog.findValues(\n    ...         'object', query(subject=jack, predicate=BEGAT)),\n    ...     key=lambda o: o.name)\n    [<Demo instance 'henry'>, <Demo instance 'sara'>]\n    >>> sorted(\n    ...     catalog.findValues(\n    ...         'object', query(subject=sara)),\n    ...     key=lambda o: o.name) # doctest: +NORMALIZE_WHITESPACE\n    [<Demo instance 'bistro'>, <Demo instance 'cookies'>,\n     <Demo instance 'doughnuts'>, <Demo instance 'henry'>,\n     <Demo instance 'muffins'>]\n\nThe ``ignoreSearchIndex`` argument\n----------------------------------\n\nThe five methods that can use search indexes, ``findValues``,\n``findValueTokens``, ``findRelations``, ``findRelationTokens``, and\n``canFind``, can be explicitly requested to ignore any pertinent search index\nusing the ``ignoreSearchIndex`` argument.\n\nWe can see this easily with the token-related methods: the search index result\nwill be a BTree set, while without the search index the result will be a\ngenerator.\n\n    >>> res1 = newcat.findValueTokens(\n    ...     'object', query(subject=jack, predicate=BEGAT))\n    >>> res1 # doctest: +ELLIPSIS\n    LFSet([..., ..., ..., ...])\n    >>> res2 = newcat.findValueTokens(\n    ...     'object', query(subject=jack, predicate=BEGAT),\n    ...     ignoreSearchIndex=True)\n    >>> res2 # doctest: +ELLIPSIS\n    <generator object at 0x...>\n    >>> sorted(res2) == list(res1)\n    True\n\n    >>> res1 = newcat.findRelationTokens(\n    ...     query(subject=jack, predicate=BEGAT))\n    >>> res1 # doctest: +ELLIPSIS\n    LFSet([..., ..., ...])\n    >>> res2 = newcat.findRelationTokens(\n    ...     query(subject=jack, predicate=BEGAT), ignoreSearchIndex=True)\n    >>> res2 # doctest: +ELLIPSIS\n    <generator object at 0x...>\n    >>> sorted(res2) == list(res1)\n    True\n\nWe can see that the other methods take the argument, but the results look the\nsame as usual.\n\n    >>> res = newcat.findValues(\n    ...     'object', query(subject=jack, predicate=BEGAT),\n    ...     ignoreSearchIndex=True)\n    >>> res # doctest: +ELLIPSIS\n    <generator object at 0x...>\n    >>> list(res) == list(newcat.resolveValueTokens(newcat.findValueTokens(\n    ...     'object', query(subject=jack, predicate=BEGAT),\n    ...     ignoreSearchIndex=True), 'object'))\n    True\n\n    >>> res = newcat.findRelations(\n    ...     query(subject=jack, predicate=BEGAT),\n    ...     ignoreSearchIndex=True)\n    >>> res # doctest: +ELLIPSIS\n    <generator object at 0x...>\n    >>> list(res) == list(newcat.resolveRelationTokens(\n    ...     newcat.findRelationTokens(\n    ...         query(subject=jack, predicate=BEGAT),\n    ...         ignoreSearchIndex=True)))\n    True\n\n    >>> newcat.canFind(\n    ...     query(subject=jack, predicate=BEGAT), ignoreSearchIndex=True)\n    True\n\n``findRelationTokens()``\n------------------------\n\nIf you call ``findRelationTokens`` without any arguments, you will get the\nBTree set of all relation tokens in the catalog.  This can be handy for tests\nand for advanced uses of the catalog.\n\n    >>> newcat.findRelationTokens() # doctest: +ELLIPSIS\n    <BTrees.LFBTree.LFTreeSet object at ...>\n    >>> len(newcat.findRelationTokens())\n    8\n    >>> set(newcat.resolveRelationTokens(newcat.findRelationTokens())) == set(\n    ...     (rel1, rel2, rel3, rel4, rel5, rel6, rel7, rel8))\n    True\n\n``findValueTokens(INDEX_NAME)``\n-------------------------------\n\nIf you call ``findValueTokens`` with only an index name, you will get the BTree\nstructure of all tokens for that value in the index. This can be handy for\ntests and for advanced uses of the catalog.\n\n    >>> newcat.findValueTokens('predicate') # doctest: +ELLIPSIS\n    <BTrees.OOBTree.OOBTree object at ...>\n    >>> list(newcat.findValueTokens('predicate'))\n    ['BEGAT', 'BUYS', 'OBSERVES', 'SELLS']\n\nConclusion\n==========\n\nReview\n------\n\nThat brings us to the end of our introductory examples.  Let's review, and\nthen look at where you can go from here.\n\n* Relations are objects with indexed values.\n\n* The relation catalog indexes relations. The relations can be one-way,\n  two-way, three-way, or N-way, as long as you tell the catalog to index the\n  different values.\n\n* Creating a catalog:\n    \n    - Relations and their values are stored in the catalog as tokens: unique\n      identifiers that you can resolve back to the original value. Integers are\n      the most efficient tokens, but others can work fine too.\n    \n    - Token type determines the BTree module needed.\n    \n        - If the tokens are 32-bit ints, choose ``BTrees.family32.II``,\n          ``BTrees.family32.IF`` or ``BTrees.family32.IO``.\n        \n        - If the tokens are 64 bit ints, choose ``BTrees.family64.II``,\n          ``BTrees.family64.IF`` or ``BTrees.family64.IO``.\n        \n        - If they are anything else, choose ``BTrees.family32.OI``,\n          ``BTrees.family64.OI``, or ``BTrees.family32.OO`` (or\n          BTrees.family64.OO--they are the same).\n        \n      Within these rules, the choice is somewhat arbitrary unless you plan to\n      merge these results with that of another source that is using a\n      particular BTree module. BTree set operations only work within the same\n      module, so you must match module to module.\n\n    - The ``family`` argument in instantiating the catalog lets you change the\n      default btree family for relations and value indexes from\n      ``BTrees.family32.IF`` to ``BTrees.family64.IF``.\n\n    - You must define your own functions for tokenizing and resolving tokens.\n      These functions are registered with the catalog for the relations and for\n      each of their value indexes.\n\n    - You add value indexes to relation catalogs to be able to search.  Values\n      can be identified to the catalog with callables or interface elements.\n    \n        - Using interface attributes will cause an attempt to adapt the\n          relation if it does not already provide the interface.\n        \n        - We can use the ``multiple`` argument when defining a value index to\n          indicate that the indexed value is a collection.  This defaults to\n          False.\n        \n        - We can use the ``name`` argument when defining a value index to\n          specify the name to be used in queries, rather than relying on the\n          name of the interface attribute or callable.\n\n    - You can set up search indexes to speed up specific searches, usually\n      transitive.\n\n    - Listeners can be registered in the catalog. They are alerted when a\n      relation is added, modified, or removed; and when the catalog is cleared\n      and copied.\n\n* Catalog Management:\n\n    - Relations are indexed with ``index(relation)``, and removed from the\n      catalog with ``unindex(relation)``. ``index_doc(relation_token,\n      relation)`` and ``unindex_doc(relation_token)`` also work.\n\n    - The ``clear`` method clears the relations in the catalog.\n    \n    - The ``copy`` method makes a copy of the current catalog by copying\n      internal data structures, rather than reindexing the relations, which can\n      be a significant optimization opportunity. This copies value indexes and\n      search indexes; and gives listeners an opportunity to specify what, if\n      anything, should be included in the new copy.\n\n* Searching a catalog:\n\n    - Queries to the relation catalog are formed with dicts.\n    \n    - Query keys are the names of the indexes you want to search, or, for the\n      special case of precise relations, the ``zc.relation.RELATION`` constant.\n    \n    - Query values are the tokens of the results you want to match; or\n      ``None``, indicating relations that have ``None`` as a value (or an empty\n      collection, if it is a multiple). Search values can use\n      ``zc.relation.catalog.any(args)`` or ``zc.relation.catalog.Any(args)`` to\n      specify multiple (non-``None``) results to match for a given key.\n\n    - The index has a variety of methods to help you work with tokens.\n      ``tokenizeQuery`` is typically the most used, though others are\n      available.\n    \n    - To find relations that match a query, use ``findRelations`` or\n      ``findRelationTokens``.  Calling ``findRelationTokens`` without any\n      arguments returns the BTree set of all relation tokens in the catalog.\n    \n    - To find values that match a query, use ``findValues`` or\n      ``findValueTokens``.  Calling ``findValueTokens`` with only the name\n      of a value index returns the BTree set of all tokens in the catalog for\n      that value index.\n    \n    - You search transitively by using a query factory. The\n      ``zc.relation.queryfactory.TransposingTransitive`` is a good common case\n      factory that lets you walk up and down a hierarchy. A query factory can\n      be passed in as an argument to search methods as a ``queryFactory``, or\n      installed as a default behavior using ``addDefaultQueryFactory``.\n    \n    - To find how a query is related, use ``findRelationChains`` or\n      ``findRelationTokenChains``.\n    \n    - To find out if a query is related, use ``canFind``.\n    \n    - Circular transitive relations are handled to prevent infinite loops. They\n      are identified in ``findRelationChains`` and ``findRelationTokenChains``\n      with a ``zc.relation.interfaces.ICircularRelationPath`` marker interface.\n\n    - search methods share the following arguments:\n    \n      * ``maxDepth``, limiting the transitive depth for searches;\n      \n      * ``filter``, allowing code to filter transitive paths;\n      \n      * ``targetQuery``, allowing a query to filter transitive paths on the\n        basis of the endpoint;\n      \n      * ``targetFilter``, allowing code to filter transitive paths on the basis\n        of the endpoint; and\n    \n      * ``queryFactory``, mentioned above.\n      \n      In addition, the ``ignoreSearchIndex`` argument to ``findRelations``,\n      ``findRelationTokens``, ``findValues``, ``findValueTokens``, and\n      ``canFind`` causes the search to ignore search indexes, even if there is\n      an appropriate one.\n\nNext Steps\n----------\n\nIf you want to read more, next steps depend on how you like to learn.  Here\nare some of the other documents in the zc.relation package.\n\n:optimization.txt:\n    Best practices for optimizing your use of the relation catalog.\n\n:searchindex.txt:\n    Queries factories and search indexes: from basics to nitty gritty details.\n\n:tokens.txt:\n    This document explores the details of tokens.  All God's chillun\n    love tokens, at least if God's chillun are writing non-toy apps\n    using zc.relation.  It includes discussion of the token helpers that\n    the catalog provides, how to use zope.app.intid-like registries with\n    zc.relation, how to use tokens to \"join\" query results reasonably\n    efficiently, and how to index joins.  It also is unnecessarily\n    mind-blowing because of the examples used.\n\n:interfaces.py:\n    The contract, for nuts and bolts.\n\nFinally, the truly die-hard might also be interested in the timeit\ndirectory, which holds scripts used to test assumptions and learn.\n\n.. ......... ..\n.. FOOTNOTES ..\n.. ......... ..\n\n.. [#verifyObjectICatalog] The catalog provides ICatalog.\n\n    >>> from zope.interface.verify import verifyObject\n    >>> import zc.relation.interfaces\n    >>> verifyObject(zc.relation.interfaces.ICatalog, catalog)\n    True\n\n.. [#legacy] Old instances of zc.relationship indexes, which in the newest\n    version subclass a zc.relation Catalog, used to have a dict in an\n    internal data structure.  We specify that here so that the code that\n    converts the dict to an OOBTree can have a chance to run.\n\n    >>> catalog._attrs = dict(catalog._attrs)\n\n.. [#addValueIndexExceptions] Adding a value index can generate several\n    exceptions.\n    \n    You must supply both of dump and load or neither.\n\n    >>> catalog.addValueIndex(supervisor, dumpEmployees, None,\n    ...                       btree=BTrees.family32.OI, name='supervisor2')\n    Traceback (most recent call last):\n    ...\n    ValueError: either both of 'dump' and 'load' must be None, or neither\n\n    In this example, even if we fix it, we'll get an error, because we have\n    already indexed the supervisor function.\n\n    >>> catalog.addValueIndex(supervisor, dumpEmployees, loadEmployees,\n    ...                       btree=BTrees.family32.OI, name='supervisor2')\n    ... # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n    ...\n    ValueError: ('element already indexed', <function supervisor at ...>)\n\n    You also can't add a different function under the same name.\n    \n    >>> def supervisor2(emp, catalog):\n    ...     return emp.supervisor # None or another employee\n    ...\n    >>> catalog.addValueIndex(supervisor2, dumpEmployees, loadEmployees,\n    ...                       btree=BTrees.family32.OI, name='supervisor')\n    ... # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n    ...\n    ValueError: ('name already used', 'supervisor')\n\n    Finally, if your function does not have a ``__name__`` and you do not\n    provide one, you may not add an index.\n    \n    >>> class Supervisor3(object):\n    ...     __name__ = None\n    ...     def __call__(klass, emp, catalog):\n    ...         return emp.supervisor\n    ...\n    >>> supervisor3 = Supervisor3()\n    >>> supervisor3.__name__\n    >>> catalog.addValueIndex(supervisor3, dumpEmployees, loadEmployees,\n    ...                       btree=BTrees.family32.OI)\n    ... # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n    ...\n    ValueError: no name specified\n\n.. [#any] ``Any`` can be compared.\n\n    >>> zc.relation.catalog.any('foo', 'bar', 'baz')\n    <zc.relation.catalog.Any instance ('bar', 'baz', 'foo')>\n    >>> (zc.relation.catalog.any('foo', 'bar', 'baz') ==\n    ...  zc.relation.catalog.any('bar', 'foo', 'baz'))\n    True\n    >>> (zc.relation.catalog.any('foo', 'bar', 'baz') !=\n    ...  zc.relation.catalog.any('bar', 'foo', 'baz'))\n    False\n    >>> (zc.relation.catalog.any('foo', 'bar', 'baz') ==\n    ...  zc.relation.catalog.any('foo', 'baz'))\n    False\n    >>> (zc.relation.catalog.any('foo', 'bar', 'baz') !=\n    ...  zc.relation.catalog.any('foo', 'baz'))\n    True\n\n.. [#intrinsic_search] Here's the same with token results.\n\n    >>> list(catalog.findValueTokens('supervisor',\n    ...                              {zc.relation.RELATION: 'Howie'}))\n    ['Diane']\n\n    While we're down here in the footnotes, I'll mention that you can\n    search for relations that haven't been indexed.\n\n    >>> list(catalog.findRelationTokens({zc.relation.RELATION: 'Ygritte'}))\n    []\n    >>> list(catalog.findRelations({zc.relation.RELATION: 'Ygritte'}))\n    []\n\n.. [#findValuesExceptions] If you use ``findValues`` or ``findValueTokens`` and\n    try to specify a value name that is not indexed, you get a ValueError.\n    \n    >>> catalog.findValues('foo')\n    Traceback (most recent call last):\n    ...\n    ValueError: ('name not indexed', 'foo')\n\n.. [#I_care] OK, you care about how that query factory worked, so\n    we will look into it a bit.  Let's talk through two steps of the\n    transitive search in the second question.  The catalog initially\n    performs the initial intransitive search requested: find relations\n    for which Betty is the supervisor.  That's Diane and Edgar. \n    \n    Now, for each of the results, the catalog asks the query factory for\n    next steps.  Let's take Diane.  The catalog says to the factory,\n    \"Given this query for relations where Betty is supervisor, I got\n    this result of Diane.  Do you have any other queries I should try to\n    look further?\".  The factory also gets the catalog instance so it\n    can use it to answer the question if it needs to.\n\n    OK, the next part is where your brain hurts.  Hang on.\n    \n    In our case, the factory sees that the query was for supervisor. Its\n    other key, the one it transposes with, is ``zc.relation.RELATION``. *The\n    factory gets the transposing key's result for the current token.* So, for\n    us, a key of ``zc.relation.RELATION`` is actually a no-op: the result *is*\n    the current token, Diane. Then, the factory has its answer: replace the old\n    value of supervisor in the query, Betty, with the result, Diane. The next\n    transitive query should be {'supervisor', 'Diane'}. Ta-da.\n\n.. [#needs_a_transitive_queries_factory] A search with a ``maxDepth`` > 1 but\n    no ``queryFactory`` raises an error.\n    \n    >>> catalog.removeDefaultQueryFactory(factory)\n    >>> catalog.findRelationTokens({'supervisor': 'Diane'}, maxDepth=3)\n    Traceback (most recent call last):\n    ...\n    ValueError: if maxDepth not in (None, 1), queryFactory must be available\n\n    >>> catalog.addDefaultQueryFactory(factory)\n\n.. [#maxDepthExceptions] ``maxDepth`` must be None or a positive integer, or\n    else you'll get a value error.\n    \n    >>> catalog.findRelations({'supervisor': 'Betty'}, maxDepth=0)\n    Traceback (most recent call last):\n    ...\n    ValueError: maxDepth must be None or a positive integer\n\n    >>> catalog.findRelations({'supervisor': 'Betty'}, maxDepth=-1)\n    Traceback (most recent call last):\n    ...\n    ValueError: maxDepth must be None or a positive integer\n\n.. [#filter] For instance:\n\n    >>> list(catalog.findRelationTokens(\n    ...     {'supervisor': 'Alice'}, targetFilter=female_filter,\n    ...     targetQuery={zc.relation.RELATION: 'Galyn'}))\n    ['Galyn']\n    >>> list(catalog.findRelationTokens(\n    ...     {'supervisor': 'Alice'}, targetFilter=female_filter,\n    ...     targetQuery={zc.relation.RELATION: 'Not known'}))\n    []\n    >>> arbitrary = ['Alice', 'Chuck', 'Betty', 'Galyn']\n    >>> def arbitrary_filter(relchain, query, catalog, cache):\n    ...     return relchain[-1] in arbitrary\n    >>> list(catalog.findRelationTokens({'supervisor': 'Alice'},\n    ...                                 filter=arbitrary_filter,\n    ...                                 targetFilter=female_filter))\n    ['Betty', 'Galyn']\n\n.. [#updates] The scenario we are looking at in this document shows a case\n    in which special logic in the search index needs to address updates.\n    For example, if we move Howie from Diane\n\n    ::\n\n                 Alice\n              __/     \\__\n         Betty           Chuck\n         /   \\           /   \\\n     Diane   Edgar   Frank   Galyn\n       |\n     Howie\n\n    to Galyn\n\n    ::\n\n                 Alice\n              __/     \\__\n         Betty           Chuck\n         /   \\           /   \\\n     Diane   Edgar   Frank   Galyn\n                               |\n                             Howie\n\n    then the search index is correct both for the new location and the old.\n\n    >>> h.supervisor = g\n    >>> catalog.index(h)\n    >>> list(catalog.findRelationTokens({'supervisor': 'Diane'}))\n    []\n    >>> list(catalog.findRelationTokens({'supervisor': 'Betty'}))\n    ['Diane', 'Edgar']\n    >>> list(catalog.findRelationTokens({'supervisor': 'Chuck'}))\n    ['Frank', 'Galyn', 'Howie']\n    >>> list(catalog.findRelationTokens({'supervisor': 'Galyn'}))\n    ['Howie']\n    >>> h.supervisor = d\n    >>> catalog.index(h) # move him back\n    >>> list(catalog.findRelationTokens({'supervisor': 'Galyn'}))\n    []\n    >>> list(catalog.findRelationTokens({'supervisor': 'Diane'}))\n    ['Howie']\n\n.. [#same_set] The result of the query for Betty, Alice, and Zane are all the\n    same.\n\n    >>> res1 = catalog.findRelationTokens({'supervisor': 'Betty'})\n    >>> res2 = catalog.findRelationTokens({'supervisor': 'Alice'})\n    >>> res3 = catalog.findRelationTokens({'supervisor': 'Zane'})\n    >>> list(res1) == list(res2) == list(res3)\n    True\n\n    The cycle doesn't pollute the index outside of the cycle.\n    \n    >>> res = catalog.findRelationTokens({'supervisor': 'Diane'})\n    >>> list(res)\n    ['Howie']\n    >>> list(res) # it isn't lazy, it is precalculated\n    ['Howie']\n\n.. [#reverse_lookup] If you want to, look what happens when you go the\n    other way:\n\n    >>> res = list(catalog.findRelationChains({'supervisor': 'Zane'}))\n    >>> def sortEqualLenByName(one, two):\n    ...     if len(one) == len(two):\n    ...         return cmp(one, two)\n    ...     return 0\n    ...\n    >>> res.sort(sortEqualLenByName) # normalizes for test stability\n    >>> print res # doctest: +NORMALIZE_WHITESPACE\n    [(<Employee instance \"Alice\">,),\n     (<Employee instance \"Alice\">, <Employee instance \"Betty\">),\n     (<Employee instance \"Alice\">, <Employee instance \"Chuck\">),\n     (<Employee instance \"Alice\">, <Employee instance \"Betty\">,\n      <Employee instance \"Diane\">),\n     (<Employee instance \"Alice\">, <Employee instance \"Betty\">,\n      <Employee instance \"Edgar\">),\n     cycle(<Employee instance \"Alice\">, <Employee instance \"Betty\">,\n           <Employee instance \"Zane\">),\n     (<Employee instance \"Alice\">, <Employee instance \"Chuck\">,\n      <Employee instance \"Frank\">),\n     (<Employee instance \"Alice\">, <Employee instance \"Chuck\">,\n      <Employee instance \"Galyn\">),\n     (<Employee instance \"Alice\">, <Employee instance \"Betty\">,\n      <Employee instance \"Diane\">, <Employee instance \"Howie\">)]\n\n    >>> [zc.relation.interfaces.ICircularRelationPath.providedBy(r)\n    ...  for r in res]\n    [False, False, False, False, False, True, False, False, False]\n    >>> len(res[5].cycled)\n    1\n    >>> list(catalog.findRelations(res[5].cycled[0], maxDepth=1))\n    [<Employee instance \"Alice\">]\n\n=======\nChanges\n=======\n\n1.0 (2008-04-23)\n================\n\nThis is the initial release of the zc.relation package.  However, it\nrepresents a refactoring of another package, zc.relationship.  This\npackage contains only a modified version of the relation(ship) index,\nnow called a catalog. The refactored version of zc.relationship index\nrelies on (subclasses) this catalog. zc.relationship also maintains a\nbackwards-compatible subclass.  \n\nThis package only relies on the ZODB, zope.interface, and zope.testing\nsoftware, and can be used inside or outside of a standard ZODB database.\nThe software does have to be there, though (the package relies heavily\non the ZODB BTrees package).\n\nIf you would like to switch a legacy zc.relationship index to a\nzc.relation catalog, try this trick in your generations script.\nAssuming the old index is ``old``, the following line should create\na new zc.relation catalog with your legacy data:\n\n    >>> new = old.copy(zc.relation.Catalog)\n\nWhy is the same basic data structure called a catalog now?  Because we\nexposed the ability to mutate the data structure, and what you are really\nadding and removing are indexes.  It didn't make sense to put an index in\nan index, but it does make sense to put an index in a catalog.  Thus, a\nname change was born.\n\nThe catalog in this package has several incompatibilities from the earlier\nzc.relationship index, and many new features.  The zc.relationship package\nmaintains a backwards-compatible subclass.  The following discussion\ncompares the zc.relation catalog with the zc.relationship 1.x index.\n\nIncompatibilities with zc.relationship 1.x index\n------------------------------------------------\n\nThe two big changes are that method names now refer to ``Relation`` rather\nthan ``Relationship``; and the catalog is instantiated slightly differently\nfrom the index.  A few other changes are worth your attention.  The\nfollowing list attempts to highlight all incompatibilities.\n\n:Big incompatibilities:\n    \n    - ``findRelationshipTokenSet`` and ``findValueTokenSet`` are renamed, with\n      some slightly different semantics, as ``getRelationTokens`` and\n      ``getValueTokens``.  The exact same result as\n      ``findRelationTokenSet(query)`` can be obtained with\n      ``findRelationTokens(query, 1)`` (where 1 is maxDepth).  The same\n      result as ``findValueTokenSet(reltoken, name)`` can be obtained with\n      ``findValueTokens(name, {zc.relation.RELATION: reltoken}, 1)``.\n\n    - ``findRelations`` replaces ``findRelatonships``.  The new method will use\n      the defaultTransitiveQueriesFactory if it is set and maxDepth is not 1.\n      It shares the call signature of ``findRelationChains``.\n\n    - ``isLinked`` is now ``canFind``.\n\n    - The catalog instantiation arguments have changed from the old index.\n\n      * ``load`` and ``dump`` (formerly ``loadRel`` and ``dumpRel``,\n        respectively) are now required arguments for instantiation.\n  \n      * The only other optional arguments are ``btree`` (was ``relFamily``) and\n        ``family``. You now specify what elements to index with\n        ``addValueIndex``\n  \n      * Note also that ``addValueIndex`` defaults to no load and dump function,\n        unlike the old instantiation options.\n\n    - query factories are different.  See ``IQueryFactory`` in the interfaces.\n    \n      * they first get (query, catalog, cache) and then return a getQueries\n        callable that gets relchains and yields queries; OR None if they\n        don't match.\n\n      * They must also handle an empty relchain.  Typically this should\n        return the original query, but may also be used to mutate the\n        original query.\n        \n      * They are no longer thought of as transitive query factories, but as\n        general query mutators.\n\n:Medium:\n\n    - The catalog no longer inherits from\n      zope.app.container.contained.Contained.\n\n    - The index requires ZODB 3.8 or higher.\n\n:Small:\n\n    - ``deactivateSets`` is no longer an instantiation option (it was broken\n      because of a ZODB bug anyway, as had been described in the\n      documentation).\n\nChanges and new features\n------------------------\n\n- The catalog now offers the ability to index certain\n  searches.  The indexes must be explicitly instantiated and registered\n  you want to optimize. This can be used when searching for values, when\n  searching for relations, or when determining if two objects are\n  linked.  It cannot be used for relation chains. Requesting an index\n  has the usual trade-offs of greater storage space and slower write\n  speed for faster search speed.  Registering a search index is done\n  after instantiation time; you can iteratate over the current settings\n  used, and remove them.  (The code path expects to support legacy\n  zc.relationship index instances for all of these APIs.)\n\n- You can now specify new values after the catalog has been created, iterate\n  over the settings used, and remove values.\n\n- The catalog has a copy method, to quickly make new copies without actually\n  having to reindex the relations.\n\n- query arguments can now specify multiple values for a given name by\n  using zc.relation.catalog.any(1, 2, 3, 4) or\n  zc.relation.catalog.Any((1, 2, 3, 4)).\n\n- The catalog supports specifying indexed values by passing callables rather\n  than interface elements (which are also still supported).\n\n- ``findRelations`` and new method ``findRelationTokens`` can find\n  relations transitively and intransitively.  ``findRelationTokens``\n  when used intransitively repeats the legacy zc.relationship index\n  behavior of ``findRelationTokenSet``.\n  (``findRelationTokenSet`` remains in the API, not deprecated, a companion\n  to ``findValueTokenSet``.)\n\n- in findValues and findValueTokens, ``query`` argument is now optional.  If\n  the query evaluates to False in a boolean context, all values, or value\n  tokens, are returned.  Value tokens are explicitly returned using the\n  underlying BTree storage.  This can then be used directly for other BTree\n  operations.\n\n- Completely new docs.  Unfortunately, still really not good enough.\n\n- The package has drastically reduced direct dependecies from zc.relationship:\n  it is now more clearly a ZODB tool, with no other Zope dependencies than\n  zope.testing and zope.interface.\n\n- Listeners allow objects to listen to messages from the catalog (which can\n  be used directly or, for instance, to fire off events).\n\n- You can search for relations, using a key of zc.relation.RELATION...which is\n  really an alias for None. Sorry. But hey, use the constant! I think it is\n  more readable.\n\n- tokenizeQuery (and resolveQuery) now accept keyword arguments as an\n  alternative to a normal dict query.  This can make constructing the query\n  a bit more attractive (i.e., ``query = catalog.tokenizeQuery;\n  res = catalog.findValues('object', query(subject=joe, predicate=OWNS))``).",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "UNKNOWN",
    "keywords": "zope zope3",
    "license": "ZPL 2.1",
    "maintainer": null,
    "maintainer_email": null,
    "name": "zc.relation",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/zc.relation/",
    "release_url": "https://pypi.org/project/zc.relation/1.0/",
    "requires_python": null,
    "summary": "Index intransitive and transitive n-ary relationships.",
    "version": "1.0"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7e479095954fc6d8f648951434695837",
          "sha256": "771ee928bce412f4eaeb6ebebb6dbf12ca2ba9dc4d60ad0a0dae0b608b57cdc5"
        },
        "downloads": 73703,
        "filename": "zc.relation-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7e479095954fc6d8f648951434695837",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 114754,
        "upload_time": "2008-04-24T01:12:56",
        "url": "https://files.pythonhosted.org/packages/bf/31/76b2c1e408136b3e61b5508d254b6ccc26c79b14dc440abe17aae05e3695/zc.relation-1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7e479095954fc6d8f648951434695837",
        "sha256": "771ee928bce412f4eaeb6ebebb6dbf12ca2ba9dc4d60ad0a0dae0b608b57cdc5"
      },
      "downloads": 73703,
      "filename": "zc.relation-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "7e479095954fc6d8f648951434695837",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 114754,
      "upload_time": "2008-04-24T01:12:56",
      "url": "https://files.pythonhosted.org/packages/bf/31/76b2c1e408136b3e61b5508d254b6ccc26c79b14dc440abe17aae05e3695/zc.relation-1.0.tar.gz"
    }
  ]
}