{
  "info": {
    "author": "Therp BV,Odoo Community Association (OCA)",
    "author_email": "support@odoo-community.org",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Odoo",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Programming Language :: Python :: 2.7"
    ],
    "description": ".. image:: https://img.shields.io/badge/licence-AGPL--3-blue.svg\n    :alt: License: AGPL-3\n\n=====================\nRestrict field access\n=====================\n\nThis module was written to help developers restricting access to fields in a\nsecure and flexible manner on record level.\n\nIf you're not a developer, this module is not for you as you need to write code\nin order to actually use it.\n\nUsage\n=====\n\nTo use this module, you need to inherit this mixin for the model whose fields\nyou want to restrict, and implement at least the following methods to do\nsomething useful:\n\n.. code:: python\n\n    class ResPartner(models.Model):\n        # inherit from the mixin\n        _inherit = ['restrict.field.access.mixin', 'res.partner']\n        _name = 'res.partner'\n\n        @api.multi\n        def _restrict_field_access_get_field_whitelist(self, action='read'):\n            # return a whitelist (or a blacklist) of fields, depending on the\n            # action passed\n            whitelist = [\n                'name', 'parent_id', 'is_company', 'firstname', 'lastname',\n                'infix', 'initials',\n            ] + super(ResPartner, self)\\\n                ._restrict_field_access_get_field_whitelist(action=action)\n            if action == 'read':\n                whitelist.extend(['section_id', 'user_id'])\n            return whitelist\n\n        @api.multi\n        def _restrict_field_access_is_field_accessible(self, field_name,\n                                                       action='read'):\n            # in case the whitelist is not enough, you can also decide for\n            # specific records if an action can be carried out on it or not\n            result = super(ResPartner, self)\\\n                ._restrict_field_access_is_field_accessible(\n                    field_name, action=action)\n            if result or not self:\n                return result\n            return all(this.section_id in self.env.user.section_ids or\n                       this.user_id == self.env.user\n                       for this in self)\n\n        @api.multi\n        @api.onchange('section_id', 'user_id')\n        @api.depends('section_id', 'user_id')\n        def _compute_restrict_field_access(self):\n            # if your decision depends on other fields, you probably need to\n            # override this function in order to attach the correct onchange/\n            # depends decorators\n            return super(ResPartner, self)._compute_restrict_field_access()\n\n        @api.model\n        def _restrict_field_access_inject_restrict_field_access_domain(\n                self, domain):\n            # you also might want to decide with a domain expression which\n            # records are visible in the first place\n            domain[:] = expression.AND([\n                domain,\n                [\n                    '|',\n                    ('section_id', 'in', self.env.user.section_ids.ids),\n                    ('user_id', '=', self.env.user.id),\n                ],\n            ])\n\nThe example code here will allow only reading a few fields for partners of\nwhich the current user is neither the sales person nor in this partner's sales\nteam.\n\nRead the comments of the mixin, that's part of the documentation. Also have a\nlook at the tests, that's another example on how to use this code.\n\nFor further information, please visit:\n\n* https://www.odoo.com/forum/help-1\n\nKnown issues / Roadmap\n======================\n\n* the code contains some TODOs which should be done\n\nBug Tracker\n===========\n\nBugs are tracked on `GitHub Issues <https://github.com/OCA/server-tools/issues>`_.\nIn case of trouble, please check there if your issue has already been reported.\nIf you spotted it first, help us smashing it by providing a detailed and welcomed feedback\n`here <https://github.com/OCA/server-tools/issues/new?body=module:%20base_mixin_restrict_field_access%0Aversion:%208.0%0A%0A**Steps%20to%20reproduce**%0A-%20...%0A%0A**Current%20behavior**%0A%0A**Expected%20behavior**>`_.\n\nCredits\n=======\n\nContributors\n------------\n\n* Holger Brunn <hbrunn@therp.nl>\n\nMaintainer\n----------\n\n.. image:: https://odoo-community.org/logo.png\n   :alt: Odoo Community Association\n   :target: https://odoo-community.org\n\nThis module is maintained by the OCA.\n\nOCA, or the Odoo Community Association, is a nonprofit organization whose\nmission is to support the collaborative development of Odoo features and\npromote its widespread use.\n\nTo contribute to this module, please visit https://odoo-community.org.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "",
    "license": "AGPL-3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "odoo8-addon-base-mixin-restrict-field-access",
    "platform": "",
    "project_url": "https://pypi.org/project/odoo8-addon-base-mixin-restrict-field-access/",
    "release_url": "https://pypi.org/project/odoo8-addon-base-mixin-restrict-field-access/8.0.1.0.0.99.dev3/",
    "requires_dist": [
      "odoo8-addon-base-suspend-security",
      "odoo (<9.0a,>=8.0a)"
    ],
    "requires_python": "",
    "summary": "Make it simple to restrict read and/or write access to certain fields base on some condition",
    "version": "8.0.1.0.0.99.dev3"
  },
  "releases": {
    "8.0.1.0.0.99.dev3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e47401471ced7b4d727114933dece5f5",
          "sha256": "bbf4cb8943fd42850bbe1a0828425ed0c1f95a886d6cde6f0aefc17cfa989d67"
        },
        "downloads": 0,
        "filename": "odoo8_addon_base_mixin_restrict_field_access-8.0.1.0.0.99.dev3-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "e47401471ced7b4d727114933dece5f5",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 27085,
        "upload_time": "2017-09-29T04:30:26",
        "url": "https://files.pythonhosted.org/packages/3e/74/6022f9fd8d6cce327fb3db3ecde8feec7b08913a0df0a6ae1d702655238f/odoo8_addon_base_mixin_restrict_field_access-8.0.1.0.0.99.dev3-py2-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e47401471ced7b4d727114933dece5f5",
        "sha256": "bbf4cb8943fd42850bbe1a0828425ed0c1f95a886d6cde6f0aefc17cfa989d67"
      },
      "downloads": 0,
      "filename": "odoo8_addon_base_mixin_restrict_field_access-8.0.1.0.0.99.dev3-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "e47401471ced7b4d727114933dece5f5",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 27085,
      "upload_time": "2017-09-29T04:30:26",
      "url": "https://files.pythonhosted.org/packages/3e/74/6022f9fd8d6cce327fb3db3ecde8feec7b08913a0df0a6ae1d702655238f/odoo8_addon_base_mixin_restrict_field_access-8.0.1.0.0.99.dev3-py2-none-any.whl"
    }
  ]
}