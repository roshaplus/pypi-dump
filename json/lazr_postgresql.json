{
  "info": {
    "author": "Launchpad Developers",
    "author_email": "launchpad-dev@lists.launchpad.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License (GPL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "*********************************************\nlazr_postgresql: Launchpad PostgreSQL support\n*********************************************\n\n    Copyright (c) 2011, Canonical Ltd\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, version 3 only.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program.  If not, see <http://www.gnu.org/licenses/>.\n    GNU General Public License version 3 (see the file LICENSE).\n\nlazr_postgresql contains various helpers used by Launchpad for PostgreSQL\nsupport. Primary amongst these is the Slony aware database migrations facility.\n\nDependencies\n============\n\n* Python 2.6+\n\nTesting Dependencies\n====================\n\n* subunit (http://pypi.python.org/pypi/python-subunit) (optional)\n\n* testtools (http://pypi.python.org/pypi/testtools)\n\n* van.pg (http://pypi.python.org/pypi/van.pg)\n\nUsage\n=====\n\nDatabase migrations\n+++++++++++++++++++\n\nThe upgrade tool will apply data migrations to PostgreSQL or Slony\nenvironments.\n\nEach migration is a SQL file named patch-$major-$minor-$point-$type.sql.\nMajor, minor and point are integers that provide a sequence for how patches\nare applied.\nThe type tells the migration applier whether the migration should be applied\nin a normal transaction, directly to all the nodes in the cluster in a\ntransaction, or direcly to all the nodes in a cluster outside of a transaction.\nThese are indicated by 'std', 'direct' and 'concurrent'.\n\nIf a patch application is interrupted in anything other than 'standard' mode,\nmanual cleanup may be required (e.g. because a half built index will be in\nplace on some nodes).\n\nFor instance a file called patch-1-2-3-concurrent.sql will be applied in the\nfollowing way on a non-Slony environment:\n\n* A transaction on the master will be opened and the row 1-2-3 added to the list\n  of applied patches. This prevents other migrations being attempted\n  simultaneously.\n* Then the contents of the patch file will be executed.\n* The end timestamp for the 1-2-3 row will be updated.\n* Finally the transaction is committed.\n\nIn a Slony environment the following would happen:\n\n* A transaction on the master will be opened and the row 1-2-3 added to the list\n  of applied patches. This prevents other migrations being attempted\n  simultaneously.\n* On all nodes the the contents of the patch file will be executed in separate\n  connections outside of a transaction.\n* The end timestamp for the 1-2-3 row will be updated.\n* Finally the transaction is committed.\n\nA single invocation of upgrade.py will only apply std, or direct + concurrent\npatches unless the --all parameter is given, when it will loop until all\npatches are applied.\n\nMore coming soon.\n\nInstallation\n============\n\nEither run setup.py in an environment with all the dependencies available, or\nadd the working directory to your PYTHONPATH.\n\nDevelopment\n===========\n\nUpstream development takes place at https://launchpad.net/lazr_postgresql.\nTo setup a working area for development, if the dependencies are not\nimmediately available, you can use ./bootstrap.py to create bin/buildout, then\nbin/py to get a python interpreter with the dependencies available.\n\nTo run the tests use the runner of your choice, the test suite is\nlazr_postgresql.tests.test_suite.\n\nFor instance::\n\n  $ bin/py -m testtools.run lazr_postgresql.tests.test_suite\n\nIf you have testrepository you can run the tests with it:\n\n  $ testr run",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://launchpad.net/lazr-postgresql",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "lazr_postgresql",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/lazr_postgresql/",
    "release_url": "https://pypi.org/project/lazr_postgresql/0.0.1/",
    "requires_python": null,
    "summary": "LAZR postgresql specific support code.",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": []
  },
  "urls": []
}