{
  "info": {
    "author": "Anthony Leontiev",
    "author_email": "alonetiev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "dj: the Django CLI\n==================\n\n   * [Getting Started](#getting-started)\n      * [Installation](#installation)\n      * [Commands](#commands)\n         * [info](#info)\n         * [init](#init)\n         * [add](#add)\n         * [remove](#remove)\n         * [generate](#generate)\n         * [run](#run)\n         * [lint](#lint)\n         * [test](#test)\n   * [Developer's Guide](#developers-guide)\n      * [Principles](#principles)\n         * [Consistency](#consistency)\n         * [Clarity](#clarity)\n      * [Blueprints](#blueprints)\n         * [Context](#context)\n         * [Templates](#templates)\n            * [Rendering](#rendering)\n            * [Merging](#merging)\n\n   * [Dependencies](#dependencies)\n      * [redbaron](#redbaron)\n      * [click](#click)\n      * [jinja2](#jinja2)\n      * [virtualenv](#virtualenv)\n      * [pyenv](#pyenv)\n\n# Getting Started\n\n`dj` is a command-line tool that automates Django application developer workflows:\n\n* Setting up a new project\n* Managing project dependencies\n* Building and running the project\n* Generating new code stubs\n\nThe Python distribution ecosystem often provides an uncertain and segmented experience, especially for newcomers. There are too many options, they don't integrate well, and they don't provide complete functionality.\n\nFor example, the typical development environment might use `pyenv` to control the Python runtime version, `virtualenv` to isolate the project's dependencies, `pip` and `setuptools` to specify dependencies, `django-admin` to initialize a project, `manage.py` within the virtual environment to run commands, and a `Makefile` or `run.py` to wrap all of these tools, filling in the gaps between them.\n\n`dj`, insipred by ember-cli, attempts to instead provide a simple, comprehensive, and extendable\ninterface for the Django development lifecycle.\n\nWith `dj`, you can create and start a Django app in seconds, and modify it with your first migration in minutes.\n\n## Installation\n\nTo install `dj`, simply run [the appropriate installer](./INSTALLERS.md) for your operating system.\n`dj` distributes with PyInstaller and runs within an isolated Python environment.\n\n## Commands\n\nRun `dj --help` to see a list of supported commands.\nRun `dj SUBCOMMAND --help` for help on any specific subcommand.\n\n### add\n\nAdd a dependency to the project. The dependency must be provided in `pip` dependency notation.\n\nIf `--dev` is passed, the addon will only be required for testing and local development.\nOtherwise, the addon will be installed in production.\n\nIf the `addon` has an `init` blueprint, the `init` blueprint will be generated.\n\nFor example:\n\n    dj add dynamic-rest==1.5.0\n    dj add dynamic-rest --dev\n    dj add git+https://github.com/AltSchool/dynamic-rest@master#egg=dynamic-rest\n\n### generate\n\nGenerates a set of modules given a blueprint. The blueprint can be prefixed by the name\nof an addon and may take several arguments.\n\nThe following core blueprints are supported:\n\n#### init\n    \nThe app blueprint, create the application from scratch.\n\n#### model\n\nCreate a custom data model and associated test.\n\n#### command\n        \nCreate a custom server command and associated test.\n\n### info\n\nDisplay information about the current app.\n\n### init\n\nSets up a shell Django project in the current directory. This command will prompt for all optional arguments, unless passed in.\n\n### lint\n\nLints code files using `flake8` / fixes with `autopep8`.\n\n### remove\n\nRemoves an installed addon, the inverse of `dj add`.\n\n### run\n\nRun any Django command in development mode.\n\nThe app is built and run in a virtual environment.\nThe runtime specified during initialization is used.\n\n### test\n\nRun tests within the project.\nThis uses `manage.py test` or provided runner (e.g. `py.test`) to run all test cases in the `tests` package.\n\n# Developer's Guide\n\nIt is easy to turn an existing Python or Django library into a `dj`-compatible app that be used standalone or\nas an addon to another app. The term \"addon\" is used to mean that the application code can be used as a library\nand that its blueprints can be generated.\n\n## Principles\n\nDjango apps using `dj` should follow these principles.\nMost are recommended, some are required.\n\n### Consistency\n\nApps should follow a predictable style and structure.\n\n####  An app MUST have a name.\n\nThis name should contain only lower-case letters and underscores.\n\n#### An app MUST have only one top-level code package sharing the app's name.\n\nThe package name should be the same as the app name.\n\nFor example:        \n\n    app \"foo\" would package all of its code under the \"foo\" package.\n\n#### An app MUST have a top-level `setup.py` file.\n    \nThe setup.py file is used by Python installer tools (pip, setuptools)\nto determine your package's core dependencies and basic information.\n\nThis setup.py file should include a `name` for your app, which should match\nthe name of your primary app package.\n\nThis file is generated by `dj init` and is required by most `dj` commands.\n\n#### An app may have a top-level `manage.py` script.\n\nThis manage.py script is the Django entrypoint and should be made executable by\nentry in the `scripts` directive in `setup.py`.\n\nDjango-specific commands like `migrate`, `shell`, and `serve` will not work without this script.\nHowever, generic Python commands `generate`, `test`, and `run` can still be used.\n\nThis file is generated automatically by `dj init`.\n\n#### An app may include a top-level `requirements.txt` dependency file.\n    \nThe most common way for apps to install their dependencies is using a pip-formatted requirements file.\nWhen pip installs from a requirements file, it first downloads each required package. It then installs\neach package with `python setup.py install`, which can download and install further packages as defined\nin the`install_requires` setup directive.\n    \nThe caveat to `requirements.txt` is that pip does not run itself recursively on this file, so library apps\nthat want to distribute with other dependencies need to add the `setup.py` directives: `install_requires` and \n`dependency_links`.\n\n`dj` works around this by using a special loader in `setup.py` that reduces `requirements.txt`\nto `install_requires` and `dependency_links`. This allows you to keep your core dependencies in one place while support both `pip` and `setuptools` installation.\n\nThis file is generated automatically by `dj init` and updated by `dj add` and `dj remove`.\n\n#### An app may have a top-level `requirements.txt.dev` dependency file.\n\nThis file is used to install development packages that would not be installed in production.\n\nIt is generated automatically by `dj init` and updated by `dj add --dev` and `dj remove --dev`.\n\n#### The code package of the app should contain settings.py, wsgi.py, and urls.py packages.\n    \nThese packages are necessary for Django applications to load. A models.py file is recommended.\n    \n    settings.py:\n        Django configuration file, used to define all core and accessory settings.\n        \n        Try to use a single configuration file between different environments, with environment secrets\n        to differentiate instead.\n    \n    wsgi.py:\n        Exports the WSGI server entrypoint, loaded by a WSGI server to access the Django application.\n\n        Configurable by the WSGI_APPLICATION setting (defaults to $APP.wsgi.application)\n\n    urls.py:\n        The URL routing file, should export `urlpatterns`, a list of route matching patterns.\n\nThese files are generated automatically by `dj init`.\n\n#### An app should be written in a single code style.\n\n    Style should be enforced by a linter (e.g. `flake8`).\n    Naming should be kept consistent between different modules.\n\n#### An app should contain a tests package for all unit and integration tests.\n    \n    The package `foo.models.bar` should be tested by `tests.unit.foo.models.test_bar`.\n\n### Clarity\n\nApp code and structure should be easy to understand.\n\n#### An app should only export one package.\n    \nWhen dependencies are installed in the pip/setuptools model,\nthe top-level packages of a dependency are added to the application's environment.\n\nThe flexible mapping between dependency and packages can lead to ambiguity, as dependencies can provide conflicting packages.\n    \nTo mitigate this issue, apps should provide a single package that has the same name as the application name.\n\n#### App code should be concise. \n\nRe-use shared utility code.\nAvoid self-repetition in code (DRY).\n\nUse structure to manage frequently growing lists of code components, e.g. models.\n\nFor example:\n    \n    Don't store all of your models in models.py.\n    This file will grow to the point where it becomes unweildy.\n\n    Instead, create one file per model, with the complete list\n    defined in models/__init__.py for compatability with the Django model loader.\n\n#### App structure should be concise.\n\nRe-use structural patterns.\nAvoid creating unnecessary structure.\n\nCreate components within your code package.\nComponents should have a name (the class name).\n\nWe can derive a type (the last functional component),\nand a prefix (all functional components leading up to the type component).\n\nUse a hierarchical structure to group components together,\neither functionally or logically.\n\nFor example:\n        \n    Add models into the `$APP.models` package.\n    A model's type is \"model\", path is \"$APP.models\", and name is \"Foo\".\n\n    Add API serializers into the `$APP.api.$VERSION.serializers` package.\n    A serializer's type is \"serializer\", prefix is \"$APP.api.v0.serializers\", and name is \"Foo\".\n\n    Add API views into the `$APP.api.$VERSION.views` package.\n    A view's type is \"view\", prefix is \"$APP.api.v0\", and name is \"User\".\n\n## Blueprints\n\nBlueprints allows apps that can function as addons to establish structural conventions for\ntheir consumer apps through the code generation features built into `dj`.\n\nA *blueprint* is a Python package with a `context.py` module that describes the input to the generator function\nand a `templates` folder that describes the output.\n\n### Context\n\nA blueprint's `context` package should export a single method called `get_context` that serves as a `click`\nentrypoint for the blueprint. This entrypoint should describe the required and optional parameters using\n`click` decorators and should return the context that will be called by `dj`'s generation methods.\n\nFor example:\n\n```\nimport click\n\n@click.command()\n@click.argument('name')\n@click.option('--class-name')\ndef get_context(name, class_name):\n    return {\n        'name': name,\n        'class_name': class_name or name.title()\n    }\n```\n\n### Templates\n\nA blueprint's templates folder contains `Jinja` template files that are rendered and merged into an existing\napplication when the blueprint is called. All Jinja files should be suffixed with `.j2`.\n\n#### Rendering\n\nBlueprints are rendered by applying the context passed to `dj`s `generate` method to each of the files\nin the `templates` directory. In addition, file names containing double-underscore delimited variables are replaced by values\nfrom the context. The \"app\" variable is automatically populated by `dj` with the name of the current application.\n\nFor example, the model blueprint:\n```\n/\n    {{app}}/\n        models/\n            __init__.py\n                from .{{ name }} import {{ class_name }}\n            __name__.py\n                from django.db import models\n                class {{ class_name }}(models.Model):\n                    pass\n```\n\n... would be rendered as follows for app \"foo\" and name \"bar\":\n\n```\n/\n    foo/\n        models/\n            __init__.py\n                from .bar import Bar\n            bar.py\n                from django.db import models\n                class Bar(models.Model):\n                    pass\n```\n\n#### Merging \n\nAfter a blueprint has been rendered, it is merged into the current application folder by folder.\nThe following rules are used for each folder:\n\n* Folders and files in the blueprint that do not already exist within an application are created\n* Files within the blueprint that do exist and match exactly are ignored\n* Files within the blueprint that do not match are merged using FST analysis (this is done with the awesome [redbaron](https://github.com/PyCQA/redbaron) package.\n\nFor example, suppose that app \"foo\" has the following code and structure:\n\n```\n/\n    ...\n    foo/\n        settings.py\n            ...\n        models/\n            __init__.py\n                from .qux import Qux\n            qux.py\n                ...\n```\n\nAfter merging in the blueprint for model \"bar\" from the above example, the code would look like:\n\n```\n/\n    ...\n    foo/\n        settings.py\n            ...\n        models/\n            __init__.py\n                from .qux import Qux\n                from .bar import Bar\n            bar.py\n                from django.db import models\n                class Bar(models.Model):\n                    pass\n            qux.py\n                ...\n```\n\n# Dependencies\n\n`dj` is written in Python and depends on the following libraries:\n\n## redbaron\n\n`redbaron` is used to merge Python files (FST-merge). This is applied in the `generate` command. `redbaron` comes packaged with `dj`.\n\n## click\n\n`click` provides the CLI framework. All `dj` subcommands are implemented as `click` commands. `click` comes packaged with `dj`.\n\n## jinja2\n\n`Jinja2` is used to render templates by the `generate` command. It comes packaged with `dj`.\n\n## virtualenv\n\n`virtualenv` is used to build the app in an isolated environment. It is used by `dj run` and other executors. The CLI version is used to support multiple runtimes, and it will be installed if not already present.\n\n## pyenv\n\n`pyenv` is used to manage multiple runtimes / versions of Python. `pyenv` will be installed if not already present.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/aleontiev/dj",
    "keywords": null,
    "license": "Copyright (c) 2017 Anthony Leontiev\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
    "maintainer": null,
    "maintainer_email": null,
    "name": "djay",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/djay/",
    "release_url": "https://pypi.org/project/djay/0.0.3/",
    "requires_python": null,
    "summary": "dj, the Django CLI",
    "version": "0.0.3"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5d449a39ae99ffae2b87ff9b481f5919",
          "sha256": "e541833eb2488545f1757c37828da5ab12ddc27ca426c853d6a37ab16a4b4540"
        },
        "downloads": 13,
        "filename": "djay-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5d449a39ae99ffae2b87ff9b481f5919",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26298,
        "upload_time": "2017-02-16T18:30:51",
        "url": "https://files.pythonhosted.org/packages/cc/22/5bea175f24a49e5f522f0d50df0b52da04de72fcbf154a9e1768a0068a05/djay-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9e4e39b92578084f668de1b0ba8a7d92",
          "sha256": "da5870ef2bacbc33eefb59ee9f337e7d9a266e322a3aa3000cc0c327ef7ce3d5"
        },
        "downloads": 15,
        "filename": "djay-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "9e4e39b92578084f668de1b0ba8a7d92",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26520,
        "upload_time": "2017-02-21T21:36:28",
        "url": "https://files.pythonhosted.org/packages/79/e3/fe6c5b128e0052c9d62266294f3b24f562b34af121648417755cd083f816/djay-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "93896cdf725a6a37b76248f416ba9b79",
          "sha256": "012ac6b399ef5ea2f3bb392f553c029967641e705658c7abca849a951bb20b03"
        },
        "downloads": 21,
        "filename": "djay-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "93896cdf725a6a37b76248f416ba9b79",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27682,
        "upload_time": "2017-02-21T21:37:54",
        "url": "https://files.pythonhosted.org/packages/f9/12/f43ced1827bf67624b61c422968aa04d07c50571e2250826bf96db4eb89c/djay-0.0.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "93896cdf725a6a37b76248f416ba9b79",
        "sha256": "012ac6b399ef5ea2f3bb392f553c029967641e705658c7abca849a951bb20b03"
      },
      "downloads": 21,
      "filename": "djay-0.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "93896cdf725a6a37b76248f416ba9b79",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 27682,
      "upload_time": "2017-02-21T21:37:54",
      "url": "https://files.pythonhosted.org/packages/f9/12/f43ced1827bf67624b61c422968aa04d07c50571e2250826bf96db4eb89c/djay-0.0.3.tar.gz"
    }
  ]
}