{
  "info": {
    "author": "The Py3AMF Project",
    "author_email": "yhbu@stdc.so",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Django",
      "Framework :: Pylons",
      "Framework :: Twisted",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Application",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# Py3AMF\nPy3AMF is fork of [PyAMF](https://github.com/hydralabs/pyamf) to support Python3\n\n### Why Py3AMF\nBy states of issues and PR in [PyAMF](https://github.com/hydralabs/pyamf), it dosen't seems to be under developing.\nAnd another PR that supports Py3 has been discontinued for over two years.\nThis is the only Python AMF Project which trying to support Py3 under developing on GitHub.\n\n### State\nPass `setup.py test`\nBut, adapters were not tested\n\n### Warning\nThis project isn't completed.\nIf you want to make it fast, please send PR.\n\n### Install\nThis was tested on Ubuntu 16.04.2 and macOS 10.12.4\n\nTo install, you can use pip3 on your environment. \n```\npip3 install Py3AMF\n```\n\nOr, you can use setup.py to develop.\n```\ngit clone git@github.com:StdCarrot/Py3AMF.git\ncd Py3AMF\n# python3 setup.py test\npython3 setup.py install\n```\n\n### Simple example\nEverything is same with PyAMF, but you have to concern str and bytes types.\n```python\nimport pyamf\nfrom pyamf import remoting\nfrom pyamf.flex import messaging\nimport uuid\nimport requests\n\nmsg = messaging.RemotingMessage(operation='retrieveUser', \n                                destination='so.stdc.flexact.common.User',\n                                messageId=str(uuid.uuid4()).upper(),\n                                body=['user_id'])\nreq = remoting.Request(target='UserService', body=[msg])\nev = remoting.Envelope(pyamf.AMF3)        \nev['/0'] = req\n\n# Encode request \nbin_msg = remoting.encode(ev)\n\n# Send request; You can use other channels like RTMP\nresp = requests.post('http://example.com/amf', \n                     data=bin_msg.getvalue(), \n                     headers={'Content-Type': 'application/x-amf'})\n\n# Decode response\nresp_msg = remoting.decode(resp.content)\nprint(resp_msg.bodies)\n```\n\n## TODO\n- Check adapters\n\n------------------------------------------------------\n\n[PyAMF](http://www.pyamf.org) provides Action Message Format ([AMF](http://en.wikipedia.org/wiki/Action_Message_Format)) support for [Python](http://python.org) that is compatible with the [Adobe Flash Player](http://en.wikipedia.org/wiki/Flash_Player). It includes integration with Python web frameworks like [Django](http://djangoproject.com), [Pylons](http://pylonshq.com), [Twisted](http://twistedmatrix.com), [SQLAlchemy](http://sqlalchemy.org), [web2py](http://www.web2py.com) and [more](http://pyamf.org/tutorials/index.html).\n\nThe [Adobe Integrated Runtime](http://en.wikipedia.org/wiki/Adobe_AIR) and [Adobe Flash Player](http://en.wikipedia.org/wiki/Flash_Player) use AMF to communicate between an application and a remote server. AMF encodes remote procedure calls (RPC) into a compact binary representation that can be transferred over HTTP/HTTPS or the [RTMP/RTMPS](http://en.wikipedia.org/wiki/Real_Time_Messaging_Protocol) protocol. Objects and data values are serialized into this binary format, which increases performance, allowing applications to load data up to 10 times faster than with text-based formats such as XML or SOAP.\n\nAMF3, the default serialization for [ActionScript](http://dev.pyamf.org/wiki/ActionScript) 3.0, provides various advantages over AMF0, which is used for ActionScript 1.0 and 2.0. AMF3 sends data over the network more efficiently than AMF0. AMF3 supports sending `int` and `uint` objects as integers and supports data types that are available only in ActionScript 3.0, such as [ByteArray](http://dev.pyamf.org/wiki/ByteArray), [ArrayCollection](http://dev.pyamf.org/wiki/ArrayCollection), [ObjectProxy](http://dev.pyamf.org/wiki/ObjectProxy) and [IExternalizable](http://dev.pyamf.org/wiki/IExternalizable).",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/StdCarrot/Py3AMF",
    "keywords": "python3 amf amf0 amf3 flex flash remoting rpc http flashplayer air bytearray\nobjectproxy arraycollection recordset actionscript decoder encoder gateway\nremoteobject twisted pylons django sharedobject lso sol",
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "Py3AMF",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/Py3AMF/",
    "release_url": "https://pypi.org/project/Py3AMF/0.8.6/",
    "requires_python": null,
    "summary": "AMF support for Python",
    "version": "0.8.6"
  },
  "releases": {
    "0.8.3": [],
    "0.8.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "770c67fbe9a35a978ef4f7ccbcd04238",
          "sha256": "f2a23eee561e57a5284f59707a0c9d6e0b4ab63af13b616f5d61732b35734d20"
        },
        "downloads": 165,
        "filename": "Py3AMF-0.8.4.tar.gz",
        "has_sig": false,
        "md5_digest": "770c67fbe9a35a978ef4f7ccbcd04238",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1612816,
        "upload_time": "2017-04-06T02:54:00",
        "url": "https://files.pythonhosted.org/packages/75/53/9b29570769decb910225044d076d32c9d7284ac8409906ee92689533a51d/Py3AMF-0.8.4.tar.gz"
      }
    ],
    "0.8.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "23edcbdb11ac682d27df8351cb42164e",
          "sha256": "5858df63992c3941236caf084a1332b9e22f38c2dd5c31209634f03d813cc97c"
        },
        "downloads": 171,
        "filename": "Py3AMF-0.8.5.tar.gz",
        "has_sig": false,
        "md5_digest": "23edcbdb11ac682d27df8351cb42164e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1612783,
        "upload_time": "2017-04-06T02:54:47",
        "url": "https://files.pythonhosted.org/packages/96/bd/2ec7aab3cbeafd4fc41b2aa8f95c7b2bf9cddd215f5440395b5c9cd4b8fb/Py3AMF-0.8.5.tar.gz"
      }
    ],
    "0.8.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "51183f11f7f8362a0a605ff0f4de822e",
          "sha256": "24d7aab474b64af64e58f684f36edb91c9ab48783ee888a896cde70619b236d4"
        },
        "downloads": 0,
        "filename": "Py3AMF-0.8.6.tar.gz",
        "has_sig": false,
        "md5_digest": "51183f11f7f8362a0a605ff0f4de822e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1613867,
        "upload_time": "2017-04-26T08:23:08",
        "url": "https://files.pythonhosted.org/packages/cd/f8/7ddb2c0119a83a32eda9db4a6fd07db4ee44e838da1a7d2f7a6872e9a127/Py3AMF-0.8.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "51183f11f7f8362a0a605ff0f4de822e",
        "sha256": "24d7aab474b64af64e58f684f36edb91c9ab48783ee888a896cde70619b236d4"
      },
      "downloads": 0,
      "filename": "Py3AMF-0.8.6.tar.gz",
      "has_sig": false,
      "md5_digest": "51183f11f7f8362a0a605ff0f4de822e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 1613867,
      "upload_time": "2017-04-26T08:23:08",
      "url": "https://files.pythonhosted.org/packages/cd/f8/7ddb2c0119a83a32eda9db4a6fd07db4ee44e838da1a7d2f7a6872e9a127/Py3AMF-0.8.6.tar.gz"
    }
  ]
}