{
  "info": {
    "author": "GoPay",
    "author_email": "integrace@gopay.cz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "GoPay's Python SDK for Payments REST API\n========================================\n\n|Build Status|\n\n\u00a0Requirements\n-------------\n\n-  Python >= 2.6, Python 3\n-  dependencies:\n   ```requests`` <https://github.com/kennethreitz/requests>`__\n\n\u00a0Installation\n-------------\n\nThe simplest way to install SDK is to use\n`PIP <https://docs.python.org/2.7/installing/>`__:\n\n.. code:: bash\n\n    pip install gopay\n\nBasic usage\n-----------\n\n.. code:: python\n\n    import gopay\n\n    # minimal configuration\n    payments = gopay.payments({\n        'goid': 'my goid',\n        'clientId': 'my id',\n        'clientSecret': 'my secret',\n        'isProductionMode': False\n    })\n\n    # full configuration\n    payments = gopay.payments({\n        'goid': 'my goid',\n        'clientId': 'my id',\n        'clientSecret': 'my secret',\n        'isProductionMode': False,\n        'scope': gopay.TokenScope.ALL,\n        'language': gopay.Language.CZECH,\n        'timeout': 30\n    })\n\nConfiguration\n~~~~~~~~~~~~~\n\nRequired fields\n^^^^^^^^^^^^^^^\n\n+-----------------+------------+--------------+\n| Required field  | Data type  | Documentatio |\n|                 |            | n            |\n+=================+============+==============+\n| ``goid``        | string     | default      |\n|                 |            | GoPay        |\n|                 |            | account used |\n|                 |            | in           |\n|                 |            | ``create_pay |\n|                 |            | ment``       |\n|                 |            | if           |\n|                 |            | ``target``   |\n|                 |            | is not       |\n|                 |            | specified    |\n+-----------------+------------+--------------+\n| ``clientId``    | string     | https://doc. |\n|                 |            | gopay.com/en |\n|                 |            | /?shell#oaut |\n|                 |            | h            |\n+-----------------+------------+--------------+\n| ``clientSecret` | string     | https://doc. |\n| `               |            | gopay.com/en |\n|                 |            | /?shell#oaut |\n|                 |            | h            |\n+-----------------+------------+--------------+\n| ``isProductionM | boolean    | `test or     |\n| ode``           |            | production   |\n|                 |            | environment? |\n|                 |            |  <https://he |\n|                 |            | lp.gopay.com |\n|                 |            | /en/s/ey>`__ |\n+-----------------+------------+--------------+\n\nOptional fields\n^^^^^^^^^^^^^^^\n\n+-----------------+------------+----------------+----------------+\n| Optional field  | Data type  | Default value  | Documentation  |\n+=================+============+================+================+\n| ``scope``       | string     | ```gopay.enums | https://doc.go |\n|                 |            | .TokenScope.AL | pay.com/en/?sh |\n|                 |            | L`` </gopay/en | ell#scope      |\n|                 |            | ums.py>`__     |                |\n+-----------------+------------+----------------+----------------+\n| ``language``    | string     | ```gopay.enums | language used  |\n|                 |            | .Language.ENGL | in             |\n|                 |            | ISH`` </gopay/ | ``create_payme |\n|                 |            | enums.py>`__   | nt``           |\n|                 |            |                | if ``lang`` is |\n|                 |            |                | not specified  |\n|                 |            |                | + used for     |\n|                 |            |                | `localization  |\n|                 |            |                | of             |\n|                 |            |                | errors <https: |\n|                 |            |                | //doc.gopay.co |\n|                 |            |                | m/en/?shell#re |\n|                 |            |                | turn-errors>`_ |\n|                 |            |                | _              |\n+-----------------+------------+----------------+----------------+\n| ``timeout``     | int        | 30             | Browser        |\n|                 |            |                | timeout in     |\n|                 |            |                | seconds        |\n+-----------------+------------+----------------+----------------+\n\n\u00a0Available methods\n~~~~~~~~~~~~~~~~~~\n\n+------+-------------+\n| API  | SDK method  |\n+======+=============+\n| `Cre | ``payments. |\n| ate  | create_paym |\n| stan | ent({})``   |\n| dard |             |\n| paym |             |\n| ent  |             |\n| <htt |             |\n| ps:/ |             |\n| /doc |             |\n| .gop |             |\n| ay.c |             |\n| om/e |             |\n| n/#s |             |\n| tand |             |\n| ard- |             |\n| paym |             |\n| ent> |             |\n| `__  |             |\n+------+-------------+\n| `Sta | ``payments. |\n| tus  | get_status( |\n| of   | id_payment) |\n| the  | ``          |\n| paym |             |\n| ent  |             |\n| <htt |             |\n| ps:/ |             |\n| /doc |             |\n| .gop |             |\n| ay.c |             |\n| om/e |             |\n| n/#s |             |\n| tatu |             |\n| s-of |             |\n| -the |             |\n| -pay |             |\n| ment |             |\n| >`__ |             |\n+------+-------------+\n| `Ref | ``payments. |\n| und  | refund_paym |\n| of   | ent(id_paym |\n| the  | ent, $amoun |\n| paym | t)``        |\n| ent  |             |\n| <htt |             |\n| ps:/ |             |\n| /doc |             |\n| .gop |             |\n| ay.c |             |\n| om/e |             |\n| n/#r |             |\n| efun |             |\n| d-of |             |\n| -the |             |\n| -pay |             |\n| ment |             |\n| -(ca |             |\n| ncel |             |\n| atio |             |\n| n)>` |             |\n| __   |             |\n+------+-------------+\n| `Cre | ``payments. |\n| ate  | create_paym |\n| recu | ent({})``   |\n| rrin |             |\n| g    |             |\n| paym |             |\n| ent  |             |\n| <htt |             |\n| ps:/ |             |\n| /doc |             |\n| .gop |             |\n| ay.c |             |\n| om/e |             |\n| n/#r |             |\n| ecur |             |\n| ring |             |\n| -pay |             |\n| ment |             |\n| >`__ |             |\n+------+-------------+\n| `Rec | ``payments. |\n| urri | create_recu |\n| ng   | rrence(id_p |\n| paym | ayment, {}) |\n| ent  | ``          |\n| on   |             |\n| dema |             |\n| nd < |             |\n| http |             |\n| s:// |             |\n| doc. |             |\n| gopa |             |\n| y.co |             |\n| m/en |             |\n| /#re |             |\n| curr |             |\n| ing- |             |\n| paym |             |\n| ent- |             |\n| on-d |             |\n| eman |             |\n| d>`_ |             |\n| _    |             |\n+------+-------------+\n| `Can | ``payments. |\n| cell | void_recurr |\n| atio | ence(id_pay |\n| n    | ment)``     |\n| of   |             |\n| the  |             |\n| recu |             |\n| rrin |             |\n| g    |             |\n| paym |             |\n| ent  |             |\n| <htt |             |\n| ps:/ |             |\n| /doc |             |\n| .gop |             |\n| ay.c |             |\n| om/e |             |\n| n/#c |             |\n| ance |             |\n| llat |             |\n| ion- |             |\n| of-t |             |\n| he-r |             |\n| ecur |             |\n| ring |             |\n| -pay |             |\n| ment |             |\n| >`__ |             |\n+------+-------------+\n| `Cre | ``payments. |\n| ate  | create_paym |\n| pre- | ent({})``   |\n| auth |             |\n| oriz |             |\n| ed   |             |\n| paym |             |\n| ent  |             |\n| <htt |             |\n| ps:/ |             |\n| /doc |             |\n| .gop |             |\n| ay.c |             |\n| om/e |             |\n| n/#p |             |\n| re-a |             |\n| utho |             |\n| rize |             |\n| d-pa |             |\n| ymen |             |\n| t>`_ |             |\n| _    |             |\n+------+-------------+\n| `Cha | ``payments. |\n| rge  | capture_aut |\n| of   | horization( |\n| pre- | id_payment) |\n| auth | ``          |\n| oriz |             |\n| ed   |             |\n| paym |             |\n| ent  |             |\n| <htt |             |\n| ps:/ |             |\n| /doc |             |\n| .gop |             |\n| ay.c |             |\n| om/e |             |\n| n/#c |             |\n| harg |             |\n| e-of |             |\n| -pre |             |\n| -aut |             |\n| hori |             |\n| zed- |             |\n| paym |             |\n| ent> |             |\n| `__  |             |\n+------+-------------+\n| `Can | ``payments. |\n| cell | void_author |\n| atio | ization(id_ |\n| n    | payment)``  |\n| of   |             |\n| the  |             |\n| pre- |             |\n| auth |             |\n| oriz |             |\n| ed   |             |\n| paym |             |\n| ent  |             |\n| <htt |             |\n| ps:/ |             |\n| /doc |             |\n| .gop |             |\n| ay.c |             |\n| om/e |             |\n| n/#c |             |\n| ance |             |\n| llat |             |\n| ion- |             |\n| of-t |             |\n| he-p |             |\n| re-a |             |\n| utho |             |\n| rize |             |\n| d-pa |             |\n| ymen |             |\n| t>`_ |             |\n| _    |             |\n+------+-------------+\n\nSDK response? Has my call succeed?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSDK returns wrapped API response. Every method returns\n```gopay.http.response`` object </gopay/http.py>`__. Structure of\n``json/__str__`` should be same as in\n`documentation <https://doc.gopay.com/en>`__. SDK throws no exception.\nPlease create an issue if you catch one.\n\n.. code:: python\n\n    response = payments.create_payment({})\n    if response.has_succeed():\n        print(\"hooray, API returned \" + str(response))\n        return response.json['gw_url'] # url for initiation of gateway\n    else:\n        # errors format: https://doc.gopay.com/en/?shell#http-result-codes\n        print(\"oops, API returned \" + str(response.status_code) + \": \" + str(response))\n\n+---------+-------------+\n| Method  | Description |\n+=========+=============+\n| ``respo | checks if   |\n| nse.has | API returns |\n| _succee | status code |\n| d()``   | *200*       |\n+---------+-------------+\n| ``respo | decoded     |\n| nse.jso | response,   |\n| n``     | returned    |\n|         | objects are |\n|         | converted   |\n|         | into        |\n|         | associative |\n|         | arrays      |\n+---------+-------------+\n| ``respo | HTTP status |\n| nse.sta | code        |\n| tus_cod |             |\n| e``     |             |\n+---------+-------------+\n| ``respo | raw body    |\n| nse.__s | from HTTP   |\n| tr__()` | response    |\n| `       |             |\n+---------+-------------+\n\n\u00a0Are required fields and allowed values validated?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n**No.** API `validates\nfields <https://doc.gopay.com/en/?shell#return-errors>`__ pretty\nextensively so there is no need to duplicate validation in SDK. It would\nonly introduce new type of error. Or we would have to perfectly simulate\nAPI error messages. That's why SDK just calls API which behavior is well\ndocumented in `doc.gopay.com <https://doc.gopay.com/en>`__.\n\n--------------\n\nAdvanced usage\n--------------\n\nInitiation of the payment gateway\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    # create payment and pass url to template\n    response = payments.create_payment({})\n    if response.has_succeed():\n        templateParameters = {\n            'gatewayUrl': response.json['gw_url'],\n            'embedJs': gopay.url_to_embedjs()\n        }\n        # render template\n\n`Inline gateway <https://doc.gopay.com/en/#inline-option>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: jinja\n\n    <form action=\"<%= $gatewayUrl %>\" method=\"post\" id=\"gopay-payment-button\">\n      <button name=\"pay\" type=\"submit\">Pay</button>\n      <script type=\"text/javascript\" src=\"<%= $embedJs %>\"></script>\n    </form>\n\n`Redirect gateway <https://doc.gopay.com/en/#redirect-option>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: jinja\n\n    <form action=\"<%= $gatewayUrl %>\" method=\"post\">\n      <button name=\"pay\" type=\"submit\">Pay</button>\n    </form>\n\n`Asynchronous initialization using JavaScript <https://github.com/gopaycommunity/gopay-php-api/blob/master/examples/js-initialization.md>`__\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nEnums (`Code lists <https://doc.gopay.com/en/#code-lists>`__)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nInstead of hardcoding bank codes string you can use predefined enums.\nCheck using enums in `create-payment\nexample </examples/create_payment.py>`__\n\n+----------------------------------------+------------------------------------------------------------------------+\n| Type                                   | Description                                                            |\n+========================================+========================================================================+\n| `Language </gopay/enums.py>`__         | Payment language, localization of error messages                       |\n+----------------------------------------+------------------------------------------------------------------------+\n| `Token scope </gopay/enums.py>`__      | Authorization scope for `OAuth2 <https://doc.gopay.com/en/#oauth>`__   |\n+----------------------------------------+------------------------------------------------------------------------+\n| `Payment enums </gopay/enums.py>`__    | Enums for creating payment                                             |\n+----------------------------------------+------------------------------------------------------------------------+\n| `Response enums </gopay/enums.py>`__   | Result of creating payment, executing payment operations               |\n+----------------------------------------+------------------------------------------------------------------------+\n\nCache access token\n~~~~~~~~~~~~~~~~~~\n\nAccess token expires after 30 minutes so it's expensive to use new token\nfor every request. Unfortunately it's default behavior of\n```gopay.oauth2.InMemoryTokenCache`` </gopay/oauth2.py>`__. But you can\nimplement your cache and store tokens in Memcache, Redis, files, ...\nIt's up to you.\n\nYour cache must implement template methods ``get_token`` and\n``set_token``. Be aware that there are two\n`scopes <https://doc.gopay.com/en/?shell#scope>`__ (``TokenScope``) and\nSDK can be used for different clients (``clientId``,\n``isProductionMode``). So ``client`` passed to methods is unique\nidentifier (``string``) that is built for current environment. Below you\ncan see example implementation of caching tokens in memory:\n\n.. code:: python\n\n    # register cache in optional service configuration\n    payments = gopay.payments(\n        {}, # your config\n        {'cache': MyCache()}\n    )\n\n.. code:: python\n\n    class MyCache:\n        def __init__(self):\n            self.tokens = {}\n\n        def get_token(self, client):\n            return self.tokens.get(client) # return None if token not exists\n\n        def set_token(self, client, token):\n            self.tokens[client] = token\n\nLog HTTP communication\n~~~~~~~~~~~~~~~~~~~~~~\n\nYou can log every request and response from communication with API.\nCheck available loggers below. Or you can implement your own logger,\njust implement function that takes two arguments:\n```gopay.http.request`` </gopay/http.py>`__ and\n```gopay.http.response`` </gopay/http.py>`__.\n\n.. code:: python\n\n    # register logger in optional service configuration\n    payments = gopay.payments(\n        {}, # your config\n        {'logger': my_logger}\n    )\n\n    def my_logger(request, response):\n        print(vars(request))\n        print(vars(response))\n\n+--------------------------------------------------------------+-------------------------------------------------------------------+\n| Available logger                                             | Description                                                       |\n+==============================================================+===================================================================+\n| `gopay.http.null\\_logger </gopay/http.py>`__                 | Default logger which does nothing                                 |\n+--------------------------------------------------------------+-------------------------------------------------------------------+\n| `tests.remote.debug\\_logger </tests/remote/__init__.py>`__   | Prints request and response in `remote tests <tests/remote/>`__   |\n+--------------------------------------------------------------+-------------------------------------------------------------------+\n\nContributing\n------------\n\nContributions from others would be very much appreciated! Send `pull\nrequest <https://github.com/gopaycommunity/gopay-python-api/pulls>`__/\n`issue <https://github.com/gopaycommunity/gopay-python-api/issues>`__.\nThanks!\n\nLicense\n-------\n\nCopyright (c) 2015 GoPay.com. MIT Licensed, see\n`LICENSE <https://github.com/gopaycommunity/gopay-python-api/blob/master/LICENSE>`__\nfor details.\n\n.. |Build Status| image:: https://travis-ci.org/gopaycommunity/gopay-python-api.svg?branch=master\n   :target: https://travis-ci.org/gopaycommunity/gopay-python-api\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/gopaycommunity/gopay-python-sdk",
    "keywords": "gopay payments sdk rest api",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "gopay",
    "platform": "",
    "project_url": "https://pypi.org/project/gopay/",
    "release_url": "https://pypi.org/project/gopay/1.2.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "GoPay's Python SDK for Payments REST API",
    "version": "1.2.1"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5e9de2c6f2913dd708de3512106b31e3",
          "sha256": "ba23544648ffc7e31917e5f3dbf040f3054846215f6e870789303443a884287e"
        },
        "downloads": 936,
        "filename": "gopay-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5e9de2c6f2913dd708de3512106b31e3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 12762,
        "upload_time": "2015-12-02T11:06:50",
        "url": "https://files.pythonhosted.org/packages/9f/71/50c963d0e2d8b305d9f17e36fb88d245b1f3e927d20d23f0fc3e46c161ca/gopay-1.0.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "235b34f7f506f7efd3d80497a3fe71ce",
          "sha256": "713e818e7e4c3204ae3a7c44aaf0c7c19cd7875103e84ce03c26bee23d657aa2"
        },
        "downloads": 541,
        "filename": "gopay-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "235b34f7f506f7efd3d80497a3fe71ce",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9304,
        "upload_time": "2015-12-02T11:07:06",
        "url": "https://files.pythonhosted.org/packages/73/e7/05c424b8939149a89437dbdbd95c3202ca25c878d37dd33feb9335bcaca0/gopay-1.0.0.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6abd4850c75dbac1cca2086d65e00c2b",
          "sha256": "10730a93d173b607ed32dd4d6796b85be95abee590574b1fb8667b51b00f4530"
        },
        "downloads": 0,
        "filename": "gopay-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6abd4850c75dbac1cca2086d65e00c2b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14827,
        "upload_time": "2017-05-10T12:39:30",
        "url": "https://files.pythonhosted.org/packages/61/f4/356a131273d8f4418dd61ea5b9275cba601bea832293a08ac5a666dfecde/gopay-1.1.0.tar.gz"
      }
    ],
    "1.2.0": [],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a274756e4bfdcfe4290386f9b80c2a63",
          "sha256": "aff8dff52cd19ce8b319418fee17ae786bddd0244c5b8699b4f415425dd6112e"
        },
        "downloads": 0,
        "filename": "gopay-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a274756e4bfdcfe4290386f9b80c2a63",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15164,
        "upload_time": "2017-10-05T14:40:15",
        "url": "https://files.pythonhosted.org/packages/8f/bd/0a73d287edf4e6befb23c8b31858b79bf7a75ef207d80603612e98327848/gopay-1.2.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a274756e4bfdcfe4290386f9b80c2a63",
        "sha256": "aff8dff52cd19ce8b319418fee17ae786bddd0244c5b8699b4f415425dd6112e"
      },
      "downloads": 0,
      "filename": "gopay-1.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a274756e4bfdcfe4290386f9b80c2a63",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 15164,
      "upload_time": "2017-10-05T14:40:15",
      "url": "https://files.pythonhosted.org/packages/8f/bd/0a73d287edf4e6befb23c8b31858b79bf7a75ef207d80603612e98327848/gopay-1.2.1.tar.gz"
    }
  ]
}