{
  "info": {
    "author": "Sanskrit programmers",
    "author_email": "sanskrit-programmers@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "Introduction\n============\n\nThis module defines: - shared standard schema for communicating and\nstoring Sanskrit data. - various idiosyncratic notations used by various\nmodules which deviate from the proposed standards.\n\nTogether with this, it provides python classes (corresponding to the\nschema) and shared libraries for validating, (de-)serializing and\nstoring sanskrit data. Similar libraries in various other languages are\nbeing built: - Scala (likely compatible with Java):\n`db-interface <https://github.com/sanskrit-coders/db-interface>`__ .\n\nMotivation\n----------\n\n-  Various sanskrit modules need to communicate data amongst each other\n   (for example through a REST API or database stores or even function\n   calls). **Examples of the data being communicated** could be:\n-  Gramatical details of a given word\n-  Sentences in a given book chapter\n-  Annotations on a given phrase\n-  When it comes to serialization formats - two distinct approaches\n   present themselves to us:\n-  One possible route is to have each project defining and using its own\n   idiosyncratic notation. But this entails an additional burdens:\n\n   -  Each communicating module having to convert the data from one\n      idiosyncratic notation to another.\n   -  Good schema design or notation is non trivial. Even if no external\n      module is using the data, it is a waste to have to reinvent the\n      wheel.\n\n-  A superior route is to have a common, standard format for encoding\n   various data-types for storage/ communication.\n-  To the extant possible, we should take latter approach to data\n   storage and communication.\n-  Where idiosyncratic notations are adapted for various reasons, it is\n   still desirable to collect such definitions in a single module - to\n   facilitate conversion to the standard format.\n\nFor users\n=========\n\nInstallation\n------------\n\n-  Latest release: ``sudo pip2 install sanskrit_data -U``\n-  Development copy:\n   ``sudo pip2 install git+https://github.com/sanskrit-coders/sanskrit_data@master -U``\n-  `Web <https://pypi.python.org/pypi/sanskrit_data>`__.\n\nUsage\n-----\n\n-  The sanskrit\\_data.schema module contains various python files\n   describing various Python classes for storing Sanskrit data, and\n   their corresponding schema.\n-  At the base of every such class is the common.JsonObject class.\n-  Just pick the most suitable class to store your data (or contribute\n   it here).\n-  Design considerations for data containers corresponding to the\n   various submodules (such as books and annotations) are given below -\n   or in the corresponding source files.\n\nFor contributors\n================\n\nContact\n-------\n\nHave a problem or question? Please head to\n`github <https://github.com/sanskrit-coders/sanskrit_data>`__.\n\nPackaging\n---------\n\n-  ~/.pypirc should have your pypi login credentials.\n\n   ::\n\n       python setup.py bdist_wheel\n       twine upload dist/* --skip-existing\n\nDesign principles\n=================\n\nGeneral principles\n------------------\n\n-  We want data to be stored and communicated between programs in a\n   popular, extensible format - we want to take advantage of existing\n   technologies to the maximum possible extant and not waste time\n   reinventing associated (de)serialization, validation and other\n   libraries.\n-  But this does not prevent the data from being presented in a\n   different format for human consumption.\n\nWhile designing the JSON **data-model**: - Type-hint in JSON should be\njsonClass (a language-independent name we've picked). - Try to avoid\nfield-names which conflict with programming language keywords. (Eg.\nPrefer \"source\\_type\" to \"type\"). - In general, use camelCase or\nunderscore\\_case for field names - both are fine. Where romanized\n(potentially mixed case) sanskrit words are used, the latter is the\nsuperior convention. - Where field names and values are to be\nautomatically rendered into various scripts, as in case of sanskrit\nvyAkarana jargon (eg: vibhakti, lakAra), we prefer SLP1 transliteration\n(\"viBakti\", \"lakAra\"). - PS: Convenient transliteration modules are\navailable in various languages: please see them listed\n`here <https://github.com/sanskrit-coders/indic-transliteration#libraries-in-other-languages>`__.\n- A `transliteration\nmap <https://docs.google.com/spreadsheets/d/1o2vysXaXfNkFxCO-WD77C4AEbXcAcJmDVgUb-E0mYbg/edit#gid=0>`__\nfor reference. - When in doubt, keep fields optional.\n\nBooks and annotations\n---------------------\n\n-  Basic principles\n-  Books are stored as a hierarchy of BookPortion objects - book\n   containing many chapters containing many lines etc..\n-  Annotations are stored in a similar hierarchy, for example - a\n   TextAnnotation having PadaAnnotations having SamaasaAnnotations.\n\n   -  Some Annotations (eg. SandhiAnnotation, TextAnnotation) can have\n      multiple \"targets\" (ie. other objects being annotated).\n   -  Rather than a simple tree, we end up with a Directed Acyclic Graph\n      (DAG) of Annotation objects.\n\n-  JSON schema mindmap\n   `here <https://drive.mindmup.com/map?state=%7B%22ids%22:%5B%220B1_QBT-hoqqVbHc4QTV3Q2hjdTQ%22%5D,%22action%22:%22open%22,%22userId%22:%22109000762913288837175%22%7D>`__\n   (Updated as needed).\n-  The data containers are in a separate sanskrit\\_data module - so that\n   it can be extracted and used outside this server.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/sanskrit-coders/sanskrit_data",
    "keywords": "sanskrit schema samskrtam samskritam",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sanskrit-data",
    "platform": "",
    "project_url": "https://pypi.org/project/sanskrit-data/",
    "release_url": "https://pypi.org/project/sanskrit-data/0.2.0/",
    "requires_dist": [
      "pymongo",
      "jsonschema",
      "jsonpickle"
    ],
    "requires_python": "",
    "summary": "Standard and idiosyncratic schemata for Sanskrit data, with a library of validation, (de-)serialization and other utilities.",
    "version": "0.2.0"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c6ebd4d6fb40e2dfda0ac7b5cec4cfff",
          "sha256": "3610740995dc5b9b36ef4d6126ec8fc356e96ab8bf96042c6e07cdaab3980bc7"
        },
        "downloads": 0,
        "filename": "sanskrit_data-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c6ebd4d6fb40e2dfda0ac7b5cec4cfff",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 17001,
        "upload_time": "2017-07-29T22:56:15",
        "url": "https://files.pythonhosted.org/packages/26/c5/4259c2cb8e974efb7958ba6ac31a2763ebdae9f1e8f3dc5a85a7ad62cd2a/sanskrit_data-0.1.1-py2.py3-none-any.whl"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e1fa47678de87bb182797a760ea1a667",
          "sha256": "e79cc1b50f24b5c411801486d4b833fe1c788c40f33adccb077728d61670b0bb"
        },
        "downloads": 0,
        "filename": "sanskrit_data-0.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1fa47678de87bb182797a760ea1a667",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 17429,
        "upload_time": "2017-07-29T23:14:27",
        "url": "https://files.pythonhosted.org/packages/6b/ef/882273de21aeaaf6d4dfb59d21fc0f0de9dde336ec78c22404903b83e82f/sanskrit_data-0.1.2-py2.py3-none-any.whl"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "55f8c679421a0cc71969d2d48f2606bb",
          "sha256": "c9af792d4633de65f572291fe3ebd224bedde11e5c5ea0a9a4cd5d88b609595d"
        },
        "downloads": 0,
        "filename": "sanskrit_data-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "55f8c679421a0cc71969d2d48f2606bb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 20349,
        "upload_time": "2017-07-30T00:24:48",
        "url": "https://files.pythonhosted.org/packages/9c/48/afc449efc817b6254009267a995cf66a762dbc9fa65491657def8807cc03/sanskrit_data-0.2.0-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "55f8c679421a0cc71969d2d48f2606bb",
        "sha256": "c9af792d4633de65f572291fe3ebd224bedde11e5c5ea0a9a4cd5d88b609595d"
      },
      "downloads": 0,
      "filename": "sanskrit_data-0.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "55f8c679421a0cc71969d2d48f2606bb",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 20349,
      "upload_time": "2017-07-30T00:24:48",
      "url": "https://files.pythonhosted.org/packages/9c/48/afc449efc817b6254009267a995cf66a762dbc9fa65491657def8807cc03/sanskrit_data-0.2.0-py2.py3-none-any.whl"
    }
  ]
}