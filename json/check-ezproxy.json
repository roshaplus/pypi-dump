{
  "info": {
    "author": "Ed Hill",
    "author_email": "hill.charles2@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# Check for EZProxy configurations\nA simple command-line script to check that EZProxy configurations exist for library databases. Built for checking LibGuides A-Z databases and OCLC Knowledge Base, but can be easily extended. Built/Tested with Python 3.4, but should work back to at least 2.7.\n\nInstallation\n===========\nEasiest way is:\n\n`pip install check_proxy`\n\nOr:\n1. Clone the repository.\n2. Optional: If you want to make the file exectuable, run chmod +x filename (in a bash system; this makes it so you shouldn't have to prepend each call with python)\n3. From the main directory, run `python check_proxy_run.py -args` (or `./check_proxy_run.py -args` if you did step 2 above)\n4. Run `python setup.py install` to install \n\nUse\n===\nInstalling via pip or setup.py will make the `check_proxy` command available globally. It is suggested you install it into a virtual environment to:\n\n1. not permanently pollute the global namespace in your shell, especially since check_proxy is not a terribly unique name\n2. not pollute your base python packages, as this utility uses some popular libraries and even if this tool isn't necessarily reliant on a particular version, another tool might be. Best to keep em separated.\n\n\nConfiguration\n=============\nSome minimal configuration is needed for the checks to be able to run, and there are a couple of ways to supply this.\n- Rename 'config_template.py' to 'config.py' and supply the listed parameters. This is best for quick testing or if you want to extend the tool.\n- Make a .json file containing the necessary config, then point the tool to it with the -c argument. You can optionally use a -s flag to save these configs so you don't need to point toward them again, but note that these will override any other configs you may try to give. You will need to use `--flush-config` to use another configuration.\n- You can also use the package as a tool for making your own utility and provide config in your script. Details below.\n\nConfigurations to set are:\n- **ezproxy_prefix**- the full prefix for your EZProxy server, protocol included\n- **libguides_api_url**- The full URL to LibGuides API for database assets including your site id, API key, and asset_type=10 as query parameters (v. 1.1 only at this time, v. 1.2 soon)\n- **ezproxy_error_text**- Some text on your page for proxied links with no stanzas set that you can be relatively sure is unique. The tool will match against this the page text to determine which links are not properly configured.\n- **kb_wskey**- If you want to check links directly from the OCLC knowledge base, you will need to apply for an API key. Only the WSKey is needed here, not the secret.\n- **kb_collections**- The name of the collections in the knowledge base to check. If using Python for config these can be in a tuple or list (or any iterable), if using JSON they go in an array. Even if you only have 1 to check, it needs to be in an iterable wrapper.\n\nArguments\n=========\nNote: none of these arguments are mandatory, though some rely on others to be set as well.\n### -u, --urlsource\n***\nThe location to get the urls to run the check on. Current possible options are 'libguides', 'oclc', and 'kbart' (will have to use -k to provide the path to the KBART file to check. -k can be used on its own as well).\n\n### -t, --type\n***\nThe type of check to run. Current supported checks are 'text' and 'link'.\n\n`-t text` will make a call to retrieve the page through the proxy server and compare the text returned to known error text (can't use status codes because those are 200 even for a wrongly configured database). At Westfield this text is 'your EZproxy administrator must first' but you will need to set comparison text for your institution as ERROR_TEXT in constants.py\n`-t link` will just make a head request and check the status code.\n\n### -k, --kbart\n***\nThe path to a kbart file to check. If using this, it is not necessary to set a --urlsource, though it is fine to do so. The path can be relative, absolute, or relative to your home directory (~)\n\n### -w, --write\n***\nWrite the output to a file rather than printing to the standard output\n\n### -f, --output-file\n***\nThe path and filename you wish to use in conjunction with the `-w`. It is necessary to also use `-w`, but if you do not specify a file here it will default to 'check_proxy.txt' in your home directory.\n\n### -p, --proxy\n***\nForce the presence or absence of a proxy prefix. Acceptable values are:\n- `force`\n- `no_proxy`\n\n`force` will cause every link to have a proxy prefix regardless of whether it 'should' (i.e. whether the LibGuides Database A-Z list has it set to not be proxied)\n\n`no_proxy` will do the opposite and force the link to have no proxy prefix, useful for checking for dead links which will still be dead when proxied (and which might give false negatives if a link is dead and proxied)\n\n### -c, --config-file\n***\nUse a JSON config file rather than one of the Python options for config files. Arg just takes the path (relative, absolute, or relative to home) of the .json file you want to use.\n\n### -s, --save-config\n***\nTo be used in conjunction with `-c`, will save the config file you used so that you don't have to provide the path to it every time. This saved config will trump everything.\n\n### --flush-config\n***\nFlush any saved JSON configuration and use either a Python or new JSON configuration. Can be used on the same call as `-c new_json_config.json`.\n\n\nExample Calls\n=============\nBasic call to check link status on the OCLC Knowledge Base collection defined in your configuration.\n\n`check_proxy -u oclc -t link`\n\nCall with a JSON config that we are saving.\n\n`check_proxy --config=./config.json -s`\n\nCheck set OCLC knowledge base collection with an updated config.json\n\n`check_proxy --flush-config -c ./config.json -s`\n\nAdd New Url Sources or types of checks\n======================================\nimport the 'register' decorator from registration.py.\n\n###For a new Url source\nWrite a function that returns an iterable (i.e. list or tuple) of classes or named tuples with a url and name element. Named tuple can be used like so:\n```python\nfrom collections import namedtuple\nRecord = namedtuple('Record', 'name url')\nnew_record = Record('this_name', 'http://www.example.com')\nnew_record.name #will output 'this_name'\n```\nDecorate that function with the register decorator that takes what you want the argument to be called in the command line script and 'places'\n```python\nfrom registration import register\n\n@register('get_links_here', 'places')\ndef get_links_here():\n    return [list_of_record_named_tuples]\n```\nSave that file to the same directory as the rest of the scripts, import it in check proxy, and it should automatically be available in the command line script.\n\n###For a new type of check\nDo the same thing as for a url source above, except the second argument to the decorator should be 'checks' and your function should take a database argument and a config argument, run some kind of check, and return that object if everything is fine and an object with name, url, and a new status attribute if something went wrong.\n```python\nfrom registration import register\n@register('check_em_good', 'checks')\ndef check_em_good(db):\n    check(db)\n    return db\n```\n\nYou can also just add the check to the checks.py or places.py files and (optionally) make a pull request to bring your checks into the main repository.\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/chill17/check_ezproxy/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "check-ezproxy",
    "platform": "",
    "project_url": "https://pypi.org/project/check-ezproxy/",
    "release_url": "https://pypi.org/project/check-ezproxy/0.1.0/",
    "requires_dist": [
      "requests",
      "pykbart",
      "gevent"
    ],
    "requires_python": "",
    "summary": "Command line tool to test EZProxy stanza configurations and link health.",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "010ce48523d81e75e9f85edb8d3d8737",
          "sha256": "728aeec3716544af4ae5f8ecd3d1686ba86c3ffff9ebf2cac55ff54655b41130"
        },
        "downloads": 0,
        "filename": "check_ezproxy-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "010ce48523d81e75e9f85edb8d3d8737",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 15308,
        "upload_time": "2017-08-14T16:04:19",
        "url": "https://files.pythonhosted.org/packages/79/04/718658b87782cb1595c5a3827c33a025650ac8654e8981ab37265eb59331/check_ezproxy-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "5b9b7be053442bfa9a877b9daa29c3e7",
          "sha256": "7067aac285cf60b8524a11d85234fd8ebf787e42e132929261a0331fd8548855"
        },
        "downloads": 0,
        "filename": "check_ezproxy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5b9b7be053442bfa9a877b9daa29c3e7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8805,
        "upload_time": "2017-08-14T16:04:20",
        "url": "https://files.pythonhosted.org/packages/b7/95/50fafd525e4cb23df3af1a78efc8913faca9687ccf4513eac1c9f4c586b7/check_ezproxy-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "010ce48523d81e75e9f85edb8d3d8737",
        "sha256": "728aeec3716544af4ae5f8ecd3d1686ba86c3ffff9ebf2cac55ff54655b41130"
      },
      "downloads": 0,
      "filename": "check_ezproxy-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "010ce48523d81e75e9f85edb8d3d8737",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 15308,
      "upload_time": "2017-08-14T16:04:19",
      "url": "https://files.pythonhosted.org/packages/79/04/718658b87782cb1595c5a3827c33a025650ac8654e8981ab37265eb59331/check_ezproxy-0.1.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "5b9b7be053442bfa9a877b9daa29c3e7",
        "sha256": "7067aac285cf60b8524a11d85234fd8ebf787e42e132929261a0331fd8548855"
      },
      "downloads": 0,
      "filename": "check_ezproxy-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "5b9b7be053442bfa9a877b9daa29c3e7",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8805,
      "upload_time": "2017-08-14T16:04:20",
      "url": "https://files.pythonhosted.org/packages/b7/95/50fafd525e4cb23df3af1a78efc8913faca9687ccf4513eac1c9f4c586b7/check_ezproxy-0.1.0.tar.gz"
    }
  ]
}