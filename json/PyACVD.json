{
  "info": {
    "author": "Alex Kaszynski",
    "author_email": "akascap@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Topic :: Scientific/Engineering :: Information Analysis"
    ],
    "description": "ACVD Clustering module\r\n\r\nThis module takes a vtk surface mesh (vtkPolyData) surface and returns a\r\nuniformly meshed surface also as a vtkPolyData.  It is based on research by:\r\nS. Valette, and J. M. Chassery in\r\nApproximated Centroidal Voronoi Diagrams for Uniform Polygonal Mesh Coarsening\r\nhttp://www.creatis.insa-lyon.fr/site/en/acvd\r\n\r\nMuch of this code was translated from the C++ source code available on the\r\nabove website.  Cython was used as much of the remeshing process is of an\r\niterative nature.  This is currently a work in progress and any bugs within\r\nthis module do not reflect the true nature of ACVD developed by S. Valette.\r\n\r\nThis code has been tested with Ubuntu 14.10 and Windows 7 64-bit using\r\nPython 2.7.  It should be compatable with newer versions of Python, but this\r\nhas not been tested (yet).\r\n\r\n\r\nInstallation:\r\n    $ pip install PyACVD\r\n    # Note: if \"Clustering_Cython\" cannot be imported after this install,\r\n            install for a single user (below)\r\n\r\n    - or for a single user -\r\n    $ pip install PyACVD --user\r\n\r\n    - or download the source code and execute the following from the download folder: -\r\n    $ python setup.py install\r\n\r\n\r\nInstall Tests:\r\n   from PyACVD import Tests\r\n\r\n   # Run Stanford bunny remeshing example/test\r\n   Tests.Remesh.Bunny()\r\n\r\n   # Run non-uniform sphere remeshing example/test\r\n   Tests.Remesh.Sphere()\r\n\r\n\r\nExample Code:\r\n    from PyACVD import Clustering\r\n    \r\n    # Load mesh from file.  One method would be to load a *.stl file using:\r\n    \r\n    filename = 'file.stl'\r\n    stlReader = vtk.vtkSTLReader() \r\n    stlReader.SetFileName(filename) \r\n    stlReader.Update()\r\n    mesh = stlReader.GetOutput()\r\n    \r\n    # Create clustering object\r\n    cobj = Clustering.Cluster(target)\r\n\r\n    # Generate clusters\r\n    cobj.GenClusters(10000)\r\n    \r\n    # Generate uniform mesh\r\n    cobj.GenMesh()\r\n\r\n    # Get mesh\r\n    remesh = cobj.ReturnNewMesh()\r\n    \r\n    \r\n    # The clustered original mesh and new mesh can be viewed with:\r\n    cobj.PlotClusters()   # must run cobj.GenClusters first\r\n    cobj.PlotRemesh()     # must run cobj.GenMesh first\r\n\r\n\r\nRestrictions: \r\n    vtkPolyData mesh should not contain duplicate points (i.e. adjcent faces\r\n    should share identical points).  If not already done so, clean the mesh\r\n    using \"vtk.vtkCleanPolyData()\"\r\n    \r\n    The number of resulting points is limited by the available memory of the\r\n    host computer.  If approaching the upper limit of your available memory,\r\n    reduce the \"subratio\" option when generating the mesh.  As it will be\r\n    pointed out below, the coarser the mesh, the less accurate the solution.\r\n    \r\n    The input mesh should be composed of one surface.  Unexpected behavior\r\n    may result from a multiple input meshes, though some testing has shown\r\n    that it is stable.\r\n    \r\n    Holes in the input mesh may not be filled by the module and will result in\r\n    a non-manifold output.\r\n\r\n\r\nOptions:\r\n    See individual modules for available options\r\n\r\n\r\nKnown bugs:\r\n    - Cluster sizes are highly dependent on initial cluster placement.\r\n    - Clusters one face (or point) large will generate highly non-uniform\r\n      meshes.\r\n\r\nPlease submit any bugs or issues with the code on the github repository below.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/akaszynski/PyACVD",
    "keywords": "vtk uniform meshing remeshing",
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "PyACVD",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/PyACVD/",
    "release_url": "https://pypi.org/project/PyACVD/0.1/",
    "requires_python": null,
    "summary": "Uniformly remeshes vtk surface meshes",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "72bd932772b44eaa5df19c7d30cd07ac",
          "sha256": "812a0d4bb56f9254723466ab7cb8e640ea0cf45a0a514660843fc1da3d2650fc"
        },
        "downloads": 1310,
        "filename": "PyACVD-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "72bd932772b44eaa5df19c7d30cd07ac",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8190042,
        "upload_time": "2015-09-19T00:02:53",
        "url": "https://files.pythonhosted.org/packages/82/4b/25b2542dadfbfd49d975db2a146c270dab488a7a708b7ca4d55551768801/PyACVD-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "72bd932772b44eaa5df19c7d30cd07ac",
        "sha256": "812a0d4bb56f9254723466ab7cb8e640ea0cf45a0a514660843fc1da3d2650fc"
      },
      "downloads": 1310,
      "filename": "PyACVD-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "72bd932772b44eaa5df19c7d30cd07ac",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8190042,
      "upload_time": "2015-09-19T00:02:53",
      "url": "https://files.pythonhosted.org/packages/82/4b/25b2542dadfbfd49d975db2a146c270dab488a7a708b7ca4d55551768801/PyACVD-0.1.tar.gz"
    }
  ]
}