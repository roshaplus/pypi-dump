{
  "info": {
    "author": "Thorsten Weyter",
    "author_email": "tweyter@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Topic :: Utilities"
    ],
    "description": "#CityTime\n\nDependencies:\npytz\n\nThanks:\n/u/phira\n\nThe CityTime object is my solution for the headache of time zones and daylight savings time.  It takes\nthe local time and the local time zone, and translates the time into UTC.  The time can then be reproduced\nin various formats and also incremented forward and back while still adjusting for daylight savings time.\n\nCityTime is a tool for comparing the time in two different cities. For example, let's say it is 5pm in New York\nand 4pm in Chicago. CityTime will take both of those times and time zones, convert them to UTC, and by comparing\nthe two CityTime objects, will tell you if they are the same time or not (in this case, they are).\n\nLet's say it's 8pm in Tokyo on November 1 (UTC + 9), and 7am in New York on the same date (UTC - 4). If you\ncreate a CityTime object for each city, and compare the two, it will show that they are the same. However,\nif you tried the same thing on November 3 (after Daylight Savings Time ends), they will be different,\nbecause Japan does not follow Daylight Savings Time.\n\nCityTime handles cases like those mentioned above by converting the input local time to UTC, while storing\nthe Olson Database time zone, rather than just using a UTC offset. This way, local differences in the start\nand end of Daylight Savings Time are accounted for.\n\nCityTime has the following methods:\n\n###set(datetime, time_zone):\nor\n###set(other_CityTime_object):\nAllows setting the local time after a CityTime object has been created.\nInput can be with either another CityTime object, or with a datetime.datetime object\nplus a time zone string that refers to a time zone in the Olson database.\nIt is important to note that when initiating or setting a CityTime object,\nthe local time must include the date and the time zone. Otherwise, there would be no\nway to account for Daylight Savings Time.\n\n###local():\nOutputs the time as a datetime.datetime object with the local time zone.\n\n###utc():\nOutputs the time as a datetime.datetime object converted to UTC.\n\n###check_set():\nChecks to see whether a CityTime object has been created with or without\nthe local time being set.\n\nThis is for instances where a someone might want to create a CityTime object, but\nwill actually set its time later in the program.\n\n###astimezone(time_zone):\nCheck to see what the local time would be in a different time zone.\nLet's say it is 8pm in Tokyo on November 1, and we would like to know what time\nit is in New York. Calling .astimezone('America/New_York') from our CityTime object will\nshow that it is 7am in New York.\n\n###local_minute():\nGet just the local time, no date info, in the form of minutes.\n\n###timezone():\nOutputs the local time zone (Olson database, string format).\n\n###tzinfo():\nReturn a datetime.tzinfo implementation for the given timezone.\n\nEquivalent to pytz.timezone('Time_zone_string'). It can then be used with datetime,\nwith pytz.localize, etc.\n\n###weekday()\nGet the numerical day of the week (0 = Monday, 6 = Sunday) for the local time zone.\n\n###day_name():\nGet the calendar day of the week for the local time zone.\n\n###day_abbr():\nGet the abbreviated form of the calendar day of the week for the local time zone.\n\n###time_string():\nGet the local time in HHMM format.\n\n###increment(days, hours, minutes, seconds):\nIncrement the time forward or back while adjusting for daylight savings time.\n\nThis increments the underlying UTC time, but it also checks to make sure that the\nequivalent local time is a valid time.\n\nFor example, let's say it's 7am in New York on November 1. We want to know what the local\ntime will be 24 hours later. By incrementing the time by +24 hours, it will show that the\nlocal time is now 6am. This is due to daylight savings time ending at 2am on November 2.\n\n###local_strftime(format):\nThe equivalent of datetime.datetime.strftime.\n\nConvert the local time to a string as specified by the format argument. The format argument\nmust be a string.\n\n###utc_strftime(format):\nThe equivalent of datetime.datetime.strftime, but for UTC time.\n\nConvert the time in UTC format to a string as specified by the format argument. The format argument\nmust be a string.\n\n##Magic Methods:\n###__str__():\nReturns the local time in string format.\n\n###__bool__():\nReturns True if the CityTime object has been set with a local time, otherwise returns false.\n\n###__hash__():\nReturns the hash from datetime.datetime set to UTC.\n\n###__eq__():\nReturns true if this object's set time in UTC is equal to another CityTime object's UTC time.\n\nFor example, if this object is set to 4pm in Chicago, and you compare it to another CityTime\nobject that is set to 5pm in New York on the same date, it will show as equal.\n\n###__ne__():\nReturns true if this object's set time in UTC is not equal to another CityTime object's UTC time.\n\nFor example, if this object is set to 4pm in Chicago, and you compare it to another CityTime\nobject that is set to 4pm in New York on the same date, it will show as not equal, because when\nit is 4pm in Chicago it is 5pm in New York.\n\n###__lt__():\nReturns true if this object's set time in UTC is earlier than another CityTime object's UTC time.\n\nFor example, if this object is set to 3pm in Chicago, and you compare it to another CityTime\nobject that is set to 5pm in New York on the same date, it will return True, however if the\nsame comparison is made when this object is set to 4pm in Chicago, it will return False because when\nit is 4pm in Chicago it is 5pm in New York, and thus the times are equal.\n\n###__le__():\nReturns true if this object's set time in UTC is earlier than or equal to another CityTime\nobject's UTC time.\n\nFor example, if this object is set to 3pm in Chicago, and you compare it to another CityTime\nobject that is set to 5pm in New York on the same date, it will return True. If the\nsame comparison is made when this object is set to 4pm in Chicago, it will also return True\nbecause when it is 4pm in Chicago it is 5pm in New York, and thus the times are equal.  When\nthis object is set to 5pm in Chicago, the comparison will then return False becaues 5pm in\nChicago is equivalent to 6pm in New York.\n\n###__gt__():\nReturns true if this object's set time in UTC is later than another CityTime object's UTC time.\n\nFor example, if this object is set to 5pm in Chicago, and you compare it to another CityTime\nobject that is set to 5pm in New York on the same date, it will return True, however if the\nsame comparison is made when this object is set to 4pm in Chicago, it will return False because when\nit is 4pm in Chicago it is 5pm in New York, and thus the times are equal.\n\n###__ge__():\nReturns true if this object's set time in UTC is later than or equal to another CityTime\nobject's UTC time.\n\nFor example, if this object is set to 5pm in Chicago, and you compare it to another CityTime\nobject that is set to 5pm in New York on the same date, it will return True. If the\nsame comparison is made when this object is set to 4pm in Chicago, it will also return True\nbecause when it is 4pm in Chicago it is 5pm in New York, and thus the times are equal.  When\nthis object is set to 3pm in Chicago, the comparison will then return False becaues 3pm in\nChicago is equivalent to 4pm in New York.\n\n###__add__():\nReturns a new CityTime object with the daylight savings time adjusted sum of this CityTime object\nand a given timedelta.\n\nThis method mirrors the __add__ method of datetime.datetime, except that it adjusts for daylight\nsavings time. Instead of straight addition, however, this method increments the time forward or\nbackward depending on the given timedelta. Forward if the timedelta is positive, backward if the \ntimedelta is negative.  It will raise AmbiguousTimeError or NonExistentTimeError if the sum results\nin an ambiguous time or a non existent time (caused by the transition to/from daylight\nsavings time.\n\n###__radd__():\nSame as __add__()\n\n###__sub__():\nReturns a new CityTime object with the result of this CityTime object decremented by\nthe amount of time in the given timedelta.\n\nThis mirrors the __sub__ method of datetime.datetime, except that it adjusts for daylight\nsavings time. It will raise AmbiguousTimeError or NonExistentTimeError if the product results\nin an ambiguous time or a non existent time (caused by the transition to/from daylight\nsavings time.\n\n###__rsub__():\nSame as __sub__()\n\n##There are also three exceptions inherited from pytz:\n###AmbiguousTimeError:\nHandles the end of Daylight Savings Time, when the local time between 1:00am and 2:00am occurs twice.\nAt 2:00am, people set their clocks back an hour to 1:00am, and the clock runs from 1:00am through\n1:59am twice.\n\n###NonExistentTimeError:\nHandles the start of Daylight Savings Time, when the local time between 1:00am and 2:00am is skipped.\nAt 1:00am, people set their clocks forward an hour to 2:00am, thus the clock never runs through 1:01am\nto 1:59am.\n\n###UnknownTimeZoneError:\nRaised if the user tries to pass an unknown time zone string (One that is not in the Olson database).",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/tweyter/CityTime",
    "keywords": "time datetime olson timezone",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "CityTime",
    "platform": "",
    "project_url": "https://pypi.org/project/CityTime/",
    "release_url": "https://pypi.org/project/CityTime/1.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A tool for comparing time between different locations/timezones",
    "version": "1.1.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dd5f0d70b9863894257d667647334bed",
          "sha256": "7acba7df49f0c17730ee2bc1caf30db5152727f74108d8971f251726fe9094e3"
        },
        "downloads": 0,
        "filename": "CityTime-1.0.0-py3.4.egg",
        "has_sig": false,
        "md5_digest": "dd5f0d70b9863894257d667647334bed",
        "packagetype": "bdist_egg",
        "python_version": "3.4",
        "size": 852,
        "upload_time": "2017-06-25T01:17:04",
        "url": "https://files.pythonhosted.org/packages/73/a7/a60bd2d7b05f8325a9290c7105bbebab9fa05e02021108d1da2bd8519d90/CityTime-1.0.0-py3.4.egg"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c9e8539dbd96c4ad3c19fa5a1a790031",
          "sha256": "7cb948b0e0f879786d39e924231240ca0163034b2208ea1308bc7ada70281d29"
        },
        "downloads": 0,
        "filename": "CityTime-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c9e8539dbd96c4ad3c19fa5a1a790031",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3651,
        "upload_time": "2017-06-25T01:17:05",
        "url": "https://files.pythonhosted.org/packages/53/b5/63e2f5f881919c4da548f1bd107bf73d1e078e3369d338301b94165acc6a/CityTime-1.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c9e8539dbd96c4ad3c19fa5a1a790031",
        "sha256": "7cb948b0e0f879786d39e924231240ca0163034b2208ea1308bc7ada70281d29"
      },
      "downloads": 0,
      "filename": "CityTime-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c9e8539dbd96c4ad3c19fa5a1a790031",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3651,
      "upload_time": "2017-06-25T01:17:05",
      "url": "https://files.pythonhosted.org/packages/53/b5/63e2f5f881919c4da548f1bd107bf73d1e078e3369d338301b94165acc6a/CityTime-1.1.0.tar.gz"
    }
  ]
}