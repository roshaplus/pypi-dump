{
  "info": {
    "author": "Dave Simons",
    "author_email": "simonsdave@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "tor-async-util\n==============\n\n|Maintained| |MIT license| |Python 2.7| |Requirements Status| |Build\nStatus| |Coverage Status|\n\ntor-async-util is a set of utilities that are useful when implementing\nRESTful APIs using `Tornado's <http://www.tornadoweb.org/en/stable/>`__\n`Asynchronous and non-Blocking\nI/O <http://tornado.readthedocs.org/en/latest/guide/async.html>`__.\n\nFeatures\n--------\n\n-  when async curl httpclient is used, it's useful to know if libcurl\n   was compiled with an async dns resolver - see\n   ``is_libcurl_compiled_with_async_dns_resolver()``\n\n-  instead of CTRL+C generating an unfriendly stack trace install a\n   signal handler - see ``install_sigint_handler()``\n\n-  a default request handler which generates a RESTful API friendly not\n   found response - see ``DefaultRequestHandler()``\n\n-  an abstract base class from which all request handler classes can be\n   derived to provide\n\n-  read and write json requests and responses optionally verifying each\n   against a jsonschema - see ``RequestHandler.get_json_request_body()``\n   and ``RequestHandler.write_and_verify()``\n\n-  accessing decoded BASIC auth credentials - see\n   ``RequestHandler.get_basic_auth_creds()``\n\n-  augment Tornado's default ``set_status()`` with support for\n   additional status codes - see ``RequestHandler.set_status()``\n\n-  override Tornado's default ``write_error()`` so a json response body\n   is generated rather than the default HTML response body - see\n   ``RequestHandler.write_error()``\n\n-  thin wrapper around ``ConfigParser.ConfigParser`` to parse ini files\n   for things settings such as logging levels, keyczar crypters and\n   keyczar signers - see ``Config``\n\n-  core implementations of ``/_noop`` and ``/_health`` endpoints include\n   async health checkers - see ``generate_noop_response()``,\n   ``generate_health_check_response()`` and ``AsyncHealthCheck``\n\n-  `this <http://tornado.readthedocs.org/en/latest/httpclient.html#response-objects>`__\n   explains that the time\\_info attribute of a tornado response object\n   contains timing details of the phases of a request which is available\n   when using the cURL http client. a description of these timing\n   details can be found at\n   `here <http://curl.haxx.se/libcurl/c/curl_easy_getinfo.html#TIMES>`__.\n   these timings are very, very helpful in understanding latencies from\n   interactions between microservices - see\n   ``write_http_client_response_to_log()``. an example of what the logs\n   look like is below\n\n::\n\n    2016-01-23T03:45:53.362+00:00 INFO async_docker_remote_api 'Remote Docker API' took 3.42 ms to\n    respond with 200 to 'GET' against >>>http://127.0.0.1:4243/containers/cid/logs?stdout=1<<< - timing\n    detail: q=0.13 ms n=0.03 ms c=0.04 ms p=1.65 ms s=1.66 ms t=1.83 ms r=0.00 ms\n\n-  integration tests often run database installer(s), start up\n   service(s) and then direct various requests at the service(s). when\n   the tests fail it's very useful to output the logs associated with\n   the installers and services. The nose plug-in\n   ``tor_async_util.nose_plugins.FileCapture`` is used in integration\n   tests to identify the files that should be displayed on test failure.\n   in order for ``tor_async_util.nose_plugins.FileCapture`` to work as\n   desired it must be registered prior to running tests.\n   ``tor_async_util_nosetests.py`` is responsible for registering\n   ``tor_async_util.nose_plugins.FileCapture`` and is as a replacement\n   for ``nosetests`` as per the instructions documented\n   `here <http://nose.readthedocs.org/en/latest/api/core.html#nose.core.TestProgram>`__\n\n.. |Maintained| image:: https://img.shields.io/maintenance/yes/2017.svg\n.. |MIT license| image:: http://img.shields.io/badge/license-MIT-brightgreen.svg\n   :target: http://opensource.org/licenses/MIT\n.. |Python 2.7| image:: https://img.shields.io/badge/python-2.7-FFC100.svg?style=flat\n.. |Requirements Status| image:: https://requires.io/github/simonsdave/tor-async-util/requirements.svg?branch=master\n   :target: https://requires.io/github/simonsdave/tor-async-util/requirements/?branch=master\n.. |Build Status| image:: https://travis-ci.org/simonsdave/tor-async-util.svg?branch=master\n   :target: https://travis-ci.org/simonsdave/tor-async-util\n.. |Coverage Status| image:: https://coveralls.io/repos/simonsdave/tor-async-util/badge.svg?branch=master&service=github\n   :target: https://coveralls.io/github/simonsdave/tor-async-util?branch=master",
    "docs_url": null,
    "download_url": "https://github.com/simonsdave/tor-async-util/tarball/v1.13.0",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/simonsdave/tor-async-util",
    "keywords": "tornado",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "tor_async_util",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/tor_async_util/",
    "release_url": "https://pypi.org/project/tor_async_util/1.13.0/",
    "requires_python": null,
    "summary": "Tornado Async Utilities",
    "version": "1.13.0"
  },
  "releases": {
    "1.13.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "201b154921b4e4533d49f7d21d57b28a",
          "sha256": "813ef2074151d8b490d441fdf61e7918a14d268ed6cd9e5ce40f09942e5d7b0d"
        },
        "downloads": 12,
        "filename": "tor_async_util-1.13.0.tar.gz",
        "has_sig": false,
        "md5_digest": "201b154921b4e4533d49f7d21d57b28a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12670,
        "upload_time": "2017-02-04T21:18:41",
        "url": "https://files.pythonhosted.org/packages/5a/92/0abd1861ca0769eb6c3180d3862b04b727dce377d55fbb6fafc1404c231c/tor_async_util-1.13.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "201b154921b4e4533d49f7d21d57b28a",
        "sha256": "813ef2074151d8b490d441fdf61e7918a14d268ed6cd9e5ce40f09942e5d7b0d"
      },
      "downloads": 12,
      "filename": "tor_async_util-1.13.0.tar.gz",
      "has_sig": false,
      "md5_digest": "201b154921b4e4533d49f7d21d57b28a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 12670,
      "upload_time": "2017-02-04T21:18:41",
      "url": "https://files.pythonhosted.org/packages/5a/92/0abd1861ca0769eb6c3180d3862b04b727dce377d55fbb6fafc1404c231c/tor_async_util-1.13.0.tar.gz"
    }
  ]
}