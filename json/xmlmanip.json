{
  "info": {
    "author": "John-Paul Jorissen",
    "author_email": "jjorissen52@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: Microsoft :: Windows :: Windows 10",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "\n.. code:: ipython3\n\n    from xmlmanip import XMLSchema\n\n.. code:: ipython3\n\n    string = \"\"\"\n    <breakfast_menu>\n    <food tag=\"waffles\">\n        <name>Belgian Waffles</name>\n        <price>$5.95</price>\n        <description>\n       Two of our famous Belgian Waffles with plenty of real maple syrup\n       </description>\n        <calories>650</calories>\n    </food>\n    <food tag=\"waffles\">\n        <name >Strawberry Belgian Waffles</name>\n        <price>$7.95</price>\n        <description>\n        Light Belgian waffles covered with strawberries and whipped cream\n        </description>\n        <calories>900</calories>\n    </food>\n    <food tag=\"waffles\">\n        <name>Berry-Berry Belgian Waffles</name>\n        <price>$8.95</price>\n        <description>\n        Belgian waffles covered with assorted fresh berries and whipped cream\n        </description>\n        <calories>900</calories>\n    </food>\n    <food tag=\"toast\">\n        <name>French Toast</name>\n        <price>$4.50</price>\n        <description>\n        Thick slices made from our homemade sourdough bread\n        </description>\n        <calories>600</calories>\n    </food>\n    <food tag=\"classic\">\n        <name>Homestyle Breakfast</name>\n        <price>$6.95</price>\n        <description>\n        Two eggs, bacon or sausage, toast, and our ever-popular hash browns\n        </description>\n        <calories>950</calories>\n    </food>\n    </breakfast_menu>\n    \"\"\"\n\nYou can import your XML string to convert it to a dict. (dict conversion\nhandled by https://github.com/martinblech/xmltodict).\n\n.. code:: ipython3\n\n    schema = XMLSchema(string)\n\n.. code:: ipython3\n\n    print(schema)\n\n\n.. parsed-literal::\n\n    {\n      \"breakfast_menu\": {\n        \"food\": [\n          {\n            \"@tag\": \"waffles\",\n            \"name\": \"Belgian Waffles\",\n            \"price\": \"$5.95\",\n            \"description\": \"Two of our famous Belgian Waffles with plenty of real maple syrup\",\n            \"calories\": \"650\"\n          },\n          {\n            \"@tag\": \"waffles\",\n            \"name\": \"Strawberry Belgian Waffles\",\n            \"price\": \"$7.95\",\n            \"description\": \"Light Belgian waffles covered with strawberries and whipped cream\",\n            \"calories\": \"900\"\n          },\n          {\n            \"@tag\": \"waffles\",\n            \"name\": \"Berry-Berry Belgian Waffles\",\n            \"price\": \"$8.95\",\n            \"description\": \"Belgian waffles covered with assorted fresh berries and whipped cream\",\n            \"calories\": \"900\"\n          },\n          {\n            \"@tag\": \"toast\",\n            \"name\": \"French Toast\",\n            \"price\": \"$4.50\",\n            \"description\": \"Thick slices made from our homemade sourdough bread\",\n            \"calories\": \"600\"\n          },\n          {\n            \"@tag\": \"classic\",\n            \"name\": \"Homestyle Breakfast\",\n            \"price\": \"$6.95\",\n            \"description\": \"Two eggs, bacon or sausage, toast, and our ever-popular hash browns\",\n            \"calories\": \"950\"\n          }\n        ]\n      }\n    }\n\n\nUse .locate() and .retrieve() to find and retrieve your data of\ninterest.\n\n.. code:: ipython3\n\n    schema.locate(name=\"Homestyle Breakfast\")\n\n\n\n\n.. parsed-literal::\n\n    ['__breakfast_menu__food__4__name']\n\n\n\n.. code:: ipython3\n\n    schema.retrieve('__breakfast_menu__food__4__name')\n\n\n\n\n.. parsed-literal::\n\n    'Homestyle Breakfast'\n\n\n\n.. code:: ipython3\n\n    schema.retrieve('__breakfast_menu__food__4')\n\n\n\n\n.. parsed-literal::\n\n    SchemaInnerDict([('@tag', 'classic'),\n                     ('name', 'Homestyle Breakfast'),\n                     ('price', '$6.95'),\n                     ('description',\n                      'Two eggs, bacon or sausage, toast, and our ever-popular hash browns'),\n                     ('calories', '950')])\n\n\n\nYou have access to all of the standard comparison methods.\n\n.. code:: ipython3\n\n    paths = schema.locate(name__contains=\"Waffles\")\n    paths\n\n\n\n\n.. parsed-literal::\n\n    ['__breakfast_menu__food__0__name',\n     '__breakfast_menu__food__1__name',\n     '__breakfast_menu__food__2__name']\n\n\n\n.. code:: ipython3\n\n    [schema.retrieve(path) for path in paths]\n\n\n\n\n.. parsed-literal::\n\n    ['Belgian Waffles',\n     'Strawberry Belgian Waffles',\n     'Berry-Berry Belgian Waffles']\n\n\n\n.. code:: ipython3\n\n    paths = schema.locate(calories__lt=\"700\") \n\n.. code:: ipython3\n\n    [schema.retrieve(path) for path in paths]\n\n\n\n\n.. parsed-literal::\n\n    ['650', '600']\n\n\n\nWarning, all types are compared as strings, which may have undesirable results. A fix for this problem is coming.\n=================================================================================================================\n\n.. code:: ipython3\n\n    schema.locate(calories__lt=\"700\") == schema.locate(calories__lt=\"70\") \n\n\n\n\n.. parsed-literal::\n\n    True\n\n\n\nSome attributes cannot be accessed via keyword arguements,\nunfortunately.\n\n.. code:: ipython3\n\n    schema.retrieve(@tag__ne=\"waffles\")\n\n\n::\n\n\n      File \"<ipython-input-21-c070fc7f6462>\", line 1\n        schema.retrieve(@tag__ne=\"waffles\")\n                        ^\n    SyntaxError: invalid syntax\n\n\n\nYou will need to pass the desired attribute and comparison method as\nstrings in this case.\n\n.. code:: ipython3\n\n    schema.locate('@tag', 'waffles') # default comparison is __eq__\n\n\n\n\n.. parsed-literal::\n\n    ['__breakfast_menu__food__0__@tag',\n     '__breakfast_menu__food__1__@tag',\n     '__breakfast_menu__food__2__@tag']\n\n\n\n.. code:: ipython3\n\n    schema.locate('@tag', 'waffles', comparison='ne')\n\n\n\n\n.. parsed-literal::\n\n    ['__breakfast_menu__food__3__@tag', '__breakfast_menu__food__4__@tag']\n\n\n\nThat's it so far.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jjorissen52/xmlmanip",
    "keywords": "XML document parse search",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "xmlmanip",
    "platform": "",
    "project_url": "https://pypi.org/project/xmlmanip/",
    "release_url": "https://pypi.org/project/xmlmanip/1.1.0.dev0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Convert XML documents to dict and easily search for and retrieve the data they contain.",
    "version": "1.1.0.dev0"
  },
  "releases": {
    "1.0.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "204b07ecbc3824b02c0e63fa1c62b892",
          "sha256": "884aea20171d3fbd03b248cd129232e32fb852eb1bdaeac63a61f5dd08b46d8a"
        },
        "downloads": 0,
        "filename": "xmlmanip-1.0.0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "204b07ecbc3824b02c0e63fa1c62b892",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5197,
        "upload_time": "2017-08-08T16:00:02",
        "url": "https://files.pythonhosted.org/packages/05/f0/7942ba10bc32aa81815fe260e8bcc84c8960bf7f407ac03fcb430d9217f9/xmlmanip-1.0.0.dev0.tar.gz"
      }
    ],
    "1.0.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a7bd9aa49a8687f637db461344e9b50e",
          "sha256": "a971da834ee1302b0d29ebf8fc6f45b25660492b6a051e6ae63409ed0ae29248"
        },
        "downloads": 0,
        "filename": "xmlmanip-1.0.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "a7bd9aa49a8687f637db461344e9b50e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5187,
        "upload_time": "2017-08-08T16:01:55",
        "url": "https://files.pythonhosted.org/packages/2c/05/670c02d0b92e86b4f1b12bb192552947c3e07afd11f3cbb067534bb085f5/xmlmanip-1.0.1.dev0.tar.gz"
      }
    ],
    "1.1.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f02308ff010b5e26df7220535ae822f4",
          "sha256": "e0ae75901c50a6ee9ab64f38f8b0b51f1394771e660388d0b9933ee89e2a46b0"
        },
        "downloads": 0,
        "filename": "xmlmanip-1.1.0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "f02308ff010b5e26df7220535ae822f4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6197,
        "upload_time": "2017-09-18T16:43:54",
        "url": "https://files.pythonhosted.org/packages/f0/17/91f8dcb928c5a17cb3fd940c513ca0acb01bbc06beabe451402c7736cb75/xmlmanip-1.1.0.dev0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f02308ff010b5e26df7220535ae822f4",
        "sha256": "e0ae75901c50a6ee9ab64f38f8b0b51f1394771e660388d0b9933ee89e2a46b0"
      },
      "downloads": 0,
      "filename": "xmlmanip-1.1.0.dev0.tar.gz",
      "has_sig": false,
      "md5_digest": "f02308ff010b5e26df7220535ae822f4",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6197,
      "upload_time": "2017-09-18T16:43:54",
      "url": "https://files.pythonhosted.org/packages/f0/17/91f8dcb928c5a17cb3fd940c513ca0acb01bbc06beabe451402c7736cb75/xmlmanip-1.1.0.dev0.tar.gz"
    }
  ]
}