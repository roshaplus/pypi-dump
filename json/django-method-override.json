{
  "info": {
    "author": "LocalMed",
    "author_email": "pete.browne@localmed.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "Django Method Override\n======================\n\nDjango middleware that overrides the HTTP method through either a `_method` form param (Ruby on Rails style) or the X-HTTP-Method-Override header.\n\nInstallation\n------------\n\n1. Install via pip:\n\n        :::bash\n        $ pip install django-method-override\n\n2. Add the `MethodOverrideMiddleware` **after** Django's `CsrfViewMiddleware`:\n\n        :::python\n        MIDDLEWARE_CLASSES = (\n            # ...\n            'django.middleware.csrf.CsrfViewMiddleware',\n            'method_override.middleware.MethodOverrideMiddleware',\n            # ...\n        )\n\n3. Add `method_override` to your `INSTALLED_APPS`:\n\n        :::python\n        INSTALLED_APPS = (\n            # ...\n            'method_override',\n        )\n\nUsage\n-----\n\nUse the provided template tag in your form to add the desired form:\n\n    :::html+django\n    {% load method_override %}\n    <form action=\"{% url 'post-detail' %}\" method=\"POST\">\n      {% csrf_token %}\n      {% method_override 'PUT' %}\n    </form>\n\nNow, you may use `put` in you Class-based views. Django Method Override will even copy over the form data to `request.PUT`:\n\n    :::python\n    class PostView(View):\n        def put(self, request):\n            form = Form(request.PUT)\n            # ...\n\nThe X-HTTP-Method-Override header is also supported. So for the above view, this will work too:\n\n    :::javascript\n    $.ajax({\n      'headers': {'X-HTTP-Method-Override': 'PUT'},\n      'type': 'POST',\n      'url': 'http://localhost:8000/posts/1/',\n      // ...\n    });\n\nConfiguration\n-------------\n\nDjango Method Override can be customized from your Django `settings.py` file:\n\n### `METHOD_OVERRIDE_ALLOWED_HTTP_METHODS`\n\nA list of the allowed methods for overriding. Defaults to:\n\n    :::python\n    ['GET', 'HEAD', 'PUT', 'POST', 'DELETE', 'OPTIONS', 'PATCH']\n\n### `METHOD_OVERRIDE_PARAM_KEY`\n\nThe form param key used to override the method. Defaults to `'_method'`.\n\n### `METHOD_OVERRIDE_HTTP_HEADER`\n\nThe HTTP header to check. Defaults to `'HTTP_X_HTTP_METHOD_OVERRIDE'`\n\n### `METHOD_OVERRIDE_INPUT_TEMPLATE`\n\nThe string tempalte used to render the input for the form param. It will based to kwargs, `name` and `value`. Defaults to:\n\n    :::python\n    '<input type=\"hidden\" name=\"{name}\" value=\"{value}\">'\n\nCopyright\n---------\n\nCopyright (c) 2013 [LocalMed, Inc.](http://www.localmed.com/). See LICENSE for details.\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/localmed/django-method-override",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-method-override",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-method-override/",
    "release_url": "https://pypi.org/project/django-method-override/0.2.0/",
    "requires_python": null,
    "summary": "Django Middleware for HTTP Method Override Form Params & Header",
    "version": "0.2.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "629f6332501f81d92a5d3b29f907cf04",
          "sha256": "4bba679eac11fad8a6a83449fe25e6f6c40633c035748618e10bc9d45b157c14"
        },
        "downloads": 37167,
        "filename": "django-method-override-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "629f6332501f81d92a5d3b29f907cf04",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4157,
        "upload_time": "2013-06-12T22:10:46",
        "url": "https://files.pythonhosted.org/packages/58/d1/1a6f916286362d116b3650660891711665004fa7264ec5477d60249ef253/django-method-override-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "834cb4b41be105216fdd73dc4a10e4f7",
          "sha256": "bd24aa2e9792d8cdf2cf3cb9886a160c8a0f583b612fe3789acf8f4136672c1e"
        },
        "downloads": 205,
        "filename": "django-method-override-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "834cb4b41be105216fdd73dc4a10e4f7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4237,
        "upload_time": "2016-08-31T15:39:00",
        "url": "https://files.pythonhosted.org/packages/9c/eb/166768db3946f759a99d0aae3c89df713d56c1bf7a35261996ebfbd9938d/django-method-override-0.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "834cb4b41be105216fdd73dc4a10e4f7",
        "sha256": "bd24aa2e9792d8cdf2cf3cb9886a160c8a0f583b612fe3789acf8f4136672c1e"
      },
      "downloads": 205,
      "filename": "django-method-override-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "834cb4b41be105216fdd73dc4a10e4f7",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4237,
      "upload_time": "2016-08-31T15:39:00",
      "url": "https://files.pythonhosted.org/packages/9c/eb/166768db3946f759a99d0aae3c89df713d56c1bf7a35261996ebfbd9938d/django-method-override-0.2.0.tar.gz"
    }
  ]
}