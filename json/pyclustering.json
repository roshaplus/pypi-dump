{
  "info": {
    "author": "Andrei Novikov",
    "author_email": "pyclustering@yandex.ru",
    "bugtrack_url": "https://github.com/annoviko/pyclustering/issues",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: Microsoft :: Windows :: Windows 7",
      "Operating System :: POSIX :: Linux",
      "Operating System :: Unix",
      "Programming Language :: C",
      "Programming Language :: C++",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Education",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Scientific/Engineering :: Bio-Informatics",
      "Topic :: Scientific/Engineering :: Image Recognition",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Scientific/Engineering :: Visualization"
    ],
    "description": "================================ \r\nIntroduction \r\n================================ \r\n\r\n**PyClustring 0.6** library is a collection of cluster analysis, graph coloring, travelling salesman problem algorithms, oscillatory and neural network models, containers, tools for visualization and result analysis, etc. High performance is ensured by CCORE library that is a part of the pyclustering library where almost the same algorithms, models, tools are implemented. There is ability to use python code implementation only or CCORE (C/C++) implementation using special flag. CCORE library does not use python.h interface to communicate with python code due to requirement to save ability to use CCORE library or C/C++ code part of CCORE in other projects. \r\n\r\n================================ \r\nLibrary content\r\n================================ \r\n\r\n**PyClustering** consists of six general modules where the algorithms, models, tools are placed.\r\n\r\n**Cluster analysis algorithms** (module pyclustering.cluster):\r\n\r\n- **Agglomerative** (pyclustering.cluster.agglomerative);\r\n- **BIRCH** (pyclustering.cluster.birch); \r\n- **CLARANS** (pyclustering.cluster.clarans); \r\n- **CURE** (pyclustering.cluster.cure); \r\n- **DBSCAN** (pyclustering.cluster.dbscan); \r\n- **HSyncNet** (bio-inspired algorithm pyclustering.cluster.hsyncnet); \r\n- **K-Means** (pyclustering.cluster.kmeans); \r\n- **K-Medians** (pyclustering.cluster.kmedians); \r\n- **K-Medoids** (pyclustering.cluster.kmedoids); \r\n- **OPTICS** (pyclustering.cluster.optics); \r\n- **ROCK** (pyclustering.cluster.rock); \r\n- **SyncNet** (bio-inspired algorithm pyclustering.cluster.syncnet) \r\n- **SyncSOM** (bio-inspired algorithm pyclustering.cluster.syncsom) \r\n- **X-Means** (pyclustering.cluster.xmeans); \r\n\r\n**Oscillatory and neural network models** (module pyclustering.nnet): \r\n\r\n- **Oscillatory network based on Hodgkin-Huxley model** (pyclustering.nnet.hhn); \r\n- **Hysteresis Oscillatory Network** (pyclustering.nnet.hysteresis); \r\n- **LEGION**: Local Excitatory Global Inhibitory Oscillatory Network (pyclustering.nnet.legion); \r\n- **PCNN**: Pulse-Coupled Neural Network (pyclustering.nnet.pcnn); \r\n- **SOM**: Self-Organized Map (pyclustering.nnet.som); \r\n- **Sync**: Oscillatory Network based on Kuramoto model (pyclustering.nnet.sync); \r\n- **SyncPR**: Oscillatory Network based on Kuramoto model for pattern recognition (pyclustering.nnet.syncpr); \r\n- **SyncSegm**: Oscillatory Network based on Kuramoto model for image segmentation (pyclustering.nnet.syncsegm); \r\n\r\n**Graph coloring algorithms** (module pyclustering.gcolor):\r\n\r\n- **DSATUR** (pyclustering.gcolor.dsatur); \r\n- **Hysteresis Oscillatory Network** for graph coloring (pyclustering.gcolor.hysteresis); \r\n- **SyncGColor**: Oscillatory Network based on Kuramoto model for graph coloring (pyclustering.gcolor.sync); \r\n\r\n**Containers** (module pyclustering.container): \r\n\r\n- **CF-Tree** (pyclustering.container.cftree); \r\n- **KD-Tree** (pyclustering.container.kdtree); \r\n\r\n**Travelling Salesman Problem Algorithms** (module pyclustering.tsp):\r\n\r\n- **AntColony** (pyclustering.tsp.antcolony);\r\n\r\n**Utils** that can be used for analysis, visualization, etc are placed in module pyclustering.utils. \r\n\r\n================================\r\nInstallation\r\n================================\r\nThe simplest way to install pyclustering library:\r\n\r\n.. code:: bash\r\n\r\n   $ pip3 install pyclustering \r\n\r\nThe library can be compiled and manually installed on linux machine wherever you want: \r\n\r\n.. code:: bash\r\n\r\n   # compile CCORE library (core of the pyclustering library). \r\n   $ cd pyclustering/ccore \r\n   $ make ccore \r\n\r\n   # return to parent folder of the pyclustering library \r\n   cd ../ \r\n\r\n   # add current folder to python path \r\n   PYTHONPATH=`pwd` \r\n   export PYTHONPATH=${PYTHONPATH} \r\n\r\nThe library CCORE for 64-bit windows is distributed with pyclustering library so there is no need to re-built it. If you want to re-built  CCORE library you can open CCORE Microsoft Visual Studio project that is located in ccore/ folder and compile it. \r\n\r\n\r\n================================\r\nExamples\r\n================================\r\nThe library provides intuitive and friendly interface, cluster analysis can be easily performed: \r\n\r\n.. code:: python\r\n\r\n   # an example of clustering by BIRCH algorithm. \r\n   from pyclustering.cluster.birch import birch; \r\n   \r\n   from pyclustering.utils import read_sample; \r\n   \r\n   # load data from the FCPS set that is provided by the library. \r\n   sample = read_sample(FCPS_SAMPLES.SAMPLE_LSUN); \r\n   \r\n   # create BIRCH algorithm for allocation three objects. \r\n   birch_instance = birch(sample, 3); \r\n\r\n   # start processing - cluster analysis of the input data. \r\n   birch_instance.process(); \r\n\r\n   # allocate clusters. \r\n   clusters = birch_instance.get_clusters(); \r\n   \r\n   # visualize obtained clusters. \r\n   visualizer = cluster_visualizer(); \r\n   visualizer.append_clusters(clusters, sample); \r\n   visualizer.show(); \r\n\r\n\r\nClustering algorithms can be used for image processing: \r\n\r\n.. code:: python\r\n\r\n   # an example of image color segmentation. \r\n   from pyclustering.utils import draw_image_mask_segments, read_image; \r\n\r\n   from pyclustering.samples.definitions import IMAGE_SIMPLE_SAMPLES; \r\n\r\n   from pyclustering.cluster.kmeans import kmeans; \r\n\r\n   # load image from the pyclustering collection. \r\n   data = read_image(IMAGE_SIMPLE_SAMPLES.IMAGE_SIMPLE_BEACH); \r\n\r\n   # set initial centers for K-Means algorithm. \r\n   start_centers = [ [153, 217, 234, 128], [0, 162, 232, 128], [34, 177, 76, 128], [255, 242, 0, 128] ]; \r\n\r\n   # create K-Means algorithm instance. \r\n   kmeans_instance = kmeans(data, start_centers); \r\n\r\n   # start processing. \r\n   kmeans_instance.process(); \r\n\r\n   # obtain clusters that are considered as segments. \r\n   segments = kmeans_instance.get_clusters(); \r\n\r\n   # show image segmentation results. \r\n   draw_image_mask_segments(IMAGE_SIMPLE_SAMPLES.IMAGE_SIMPLE_BEACH, segments); \r\n\r\n\r\nSimulation of oscillatory network based on Hodgkin-Huxley neuron model where six synchronous ensembles of oscillators are formed. It means that three features from input data are allocated where each feature is encoded by only one ensemble. \r\n\r\n.. code:: python\r\n\r\n   # an example of simulation of oscillatory network based on Hodgkin-Huxley model \r\n   from pyclustering.utils import draw_dynamics; \r\n\r\n   from pyclustering.nnet.hhn import hhn_network, hhn_parameters; \r\n\r\n   # set period of 400 time units when high strength value of synaptic connection exists from CN2 to PN. \r\n   params = hhn_parameters(); \r\n   params.deltah = 400; \r\n\r\n   # prepare external stimulus that encode three different features. \r\n   stimulus = [0, 0, 25, 25, 47, 47]; \r\n\r\n   # create oscillatory network that has six oscillators. \r\n   net = hhn_network(len(stimulus), stimulus, params); \r\n\r\n   # perform simulation during 1200 steps in 600 time units. \r\n   (t, dyn) = net.simulate(1200, 600); \r\n\r\n   # visualize results of simulation (output dynamic of the network). \r\n   draw_dynamics(t, dyn, x_title = \"Time\", y_title = \"V\", separate = True);\r\n\r\n================================\r\nProposals, questions, bugs:\r\n================================\r\nIn case of any questions, proposals or bugs related to the pyclustering please contact to pyclustering@yandex.ru or create an issue here: https://github.com/annoviko/pyclustering/issues.",
    "docs_url": "https://pythonhosted.org/pyclustering/",
    "download_url": "https://github.com/annoviko/pyclustering/releases/tag/0.6.6",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/annoviko/pyclustering",
    "keywords": "pyclustering data mining cluster analysis neural oscillatory networks",
    "license": "GNU Public License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyclustering",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pyclustering/",
    "release_url": "https://pypi.org/project/pyclustering/0.6.6/",
    "requires_python": null,
    "summary": "pyclustring is a python data mining library",
    "version": "0.6.6"
  },
  "releases": {
    "0.6.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f0b4c13f9f665037ffdf680f81198de7",
          "sha256": "4a1d05c9cbb6502ad5c603f94e4718f81bbce63f264b3d33f5bdef2ea5c89cdd"
        },
        "downloads": 560,
        "filename": "pyclustering-0.6.5.tar.gz",
        "has_sig": false,
        "md5_digest": "f0b4c13f9f665037ffdf680f81198de7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5522940,
        "upload_time": "2016-08-27T13:58:57",
        "url": "https://files.pythonhosted.org/packages/2e/0a/66161ef1d81e17bc677603061afc0f20134e7804646ba1b5d0ba29cbee79/pyclustering-0.6.5.tar.gz"
      }
    ],
    "0.6.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9aca2afc594b7acbee38b5e7084c68e0",
          "sha256": "db07afef704c71e7badab3a63f69e582b76a3bc837bc3e9c2d81114f005e8f8b"
        },
        "downloads": 272,
        "filename": "pyclustering-0.6.6.tar.gz",
        "has_sig": false,
        "md5_digest": "9aca2afc594b7acbee38b5e7084c68e0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3323762,
        "upload_time": "2016-10-07T16:21:39",
        "url": "https://files.pythonhosted.org/packages/b4/e1/cc768d79efee4d17901bb7ad58cb4d3e8acc25ffb761b59a42321f95f65b/pyclustering-0.6.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9aca2afc594b7acbee38b5e7084c68e0",
        "sha256": "db07afef704c71e7badab3a63f69e582b76a3bc837bc3e9c2d81114f005e8f8b"
      },
      "downloads": 272,
      "filename": "pyclustering-0.6.6.tar.gz",
      "has_sig": false,
      "md5_digest": "9aca2afc594b7acbee38b5e7084c68e0",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3323762,
      "upload_time": "2016-10-07T16:21:39",
      "url": "https://files.pythonhosted.org/packages/b4/e1/cc768d79efee4d17901bb7ad58cb4d3e8acc25ffb761b59a42321f95f65b/pyclustering-0.6.6.tar.gz"
    }
  ]
}