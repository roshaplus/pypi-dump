{
  "info": {
    "author": "Victor Dods",
    "author_email": "victor.dods@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Copyright (c) 2016 Victor Dods\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nDownload-URL: https://github.com/vdods/vorpy/archive/v0.4.3.tar.gz\nDescription: Vorpy\n        =====\n        \n        A Python package for (usually math-related) code that I've written that finds use over and over.\n        \n        Vorpy is short for \"VictOR dods' PYthon package\". Plus if you Google \"vorpy\", you come up with some pretty `hilarious <http://www.urbandictionary.com/define.php?term=Vorpy>`__ `shit <http://vorpycrill.bandcamp.com/releases>`__, so it seems like a good name choice.\n        \n        Contents\n        ========\n        \n        -  `vorpy <https://github.com/vdods/vorpy/tree/master/vorpy>`__ : The root module for the vorpy package.\n        -  `vorpy.apply\\_along\\_axes <https://github.com/vdods/vorpy/blob/master/vorpy/apply_along_axes.py>`__ : Multi-dimensional generalization of ``numpy.apply_along_axis``.\n        -  `vorpy.pickle <https://github.com/vdods/vorpy/blob/master/vorpy/pickle.py>`__ : A module which facilitates disk-based caching of data via pickle files. Useful when using data that is time-consuming to generate but does not often change.\n        -  `vorpy.symbolic <https://github.com/vdods/vorpy/blob/master/vorpy/symbolic.py>`__ : Symbolic calculus module. This module eases use of ``sympy``, facilitating the use of vector/tensor calculus (via ``numpy.ndarray``\\ s of symbols), and which allows compilation of symbolic functions into Python code, caching the generated code if desired. That process is known as 'lambdification' in ``sympy``. Take a look at the ``cached_lambdified`` function within this source.\n        -  `vorpy.symplectic\\_integration <https://github.com/vdods/vorpy/blob/master/vorpy/symplectic_integration/>`__ : Module implementing symplectic integrators; available is a family of separable Hamiltonian integrators and a nonseparable Hamiltonian integrator.\n        \n        How to Install\n        ==============\n        \n        Vorpy can be installed directly from this github.com repository using the following command:\n        \n        ::\n        \n            pip install --upgrade git+https://github.com/vdods/vorpy.git\n        \n        Installation can also be made from a local copy of the vorpy package repo:\n        \n        ::\n        \n            pip install --upgrade path/to/vorpy\n        \n        where path/to/vorpy is the root directory of the project; the path containing setup.py (as well as this README.md file). Apropos: see ``pip install --editable <path/url>``\n        \n        To uninstall, use the following obvious command:\n        \n        ::\n        \n            pip uninstall vorpy\n        \n        Running Tests\n        =============\n        \n        The suite of unit tests can be run via the command:\n        \n        ::\n        \n            python setup.py test\n        \n        Release Notes\n        =============\n        \n        -  ``0.4.3`` : More updates to be able to submit to ``pypi``. Made tests generate files to the ``test_artifacts`` directory.\n        -  ``0.4.2`` : Updates to be able to submit to ``pypi`` -- the Python Package Index. Also a minor exception printing improvement.\n        -  ``0.4.1`` : Changed ``vorpy.pickle`` to use the ``dill`` module (which can pickle lambda expressions) instead of the builtin ``pickle`` module.\n        -  ``0.4.0`` : Added ``vorpy.pickle``.\n        -  ``0.3.1`` : Added a means to salvage results from symplectic integration if an exception is raised during integration.\n        -  ``0.3.0`` : Added ``vorpy.symplectic_integration.nonseparable_hamiltonian``.\n        -  ``0.2.0`` : Added ``vorpy.symplectic_integration.separable_hamiltonian``.\n        -  ``0.1.0`` : Added ``vorpy.apply_along_axes``.\n        -  ``0.0.0`` : Initial release. Added ``vorpy.symbolic``.\n        \n        To-Do List\n        ==========\n        \n        -  Make the ``symbolic`` module aware of vectorized operations so that fast ``numpy``-implemented ``ndarray`` functions can be used instead of structure-forgetting symbolic expressions that are fully written out. For example, the 1st and 2nd total derivatives of a quadratic form are simply matrix expressions which have simple ``numpy`` expressions.\n        -  Verify that ``vorpy.apply_along_axes`` is automatically parallelized.\n        -  Require ``numpy.ndarray`` or ``tuple`` be the type of the input array(s) for ``apply_along_axes``, so that extra parens to form a trivial tuple are not necessary in the basic case where there is a single input array.\n        -  In ``apply_along_axes``, allow the base case where ``input_array_v[0].shape == ()`` and ``input_axis_v == []``.\n        -  Increasing the order of Tao's nonseparable Hamiltonian integrator doesn't actually do what it should, even when using very small timesteps (expected behavior is that the error is orders smaller, but what actually happens is that it's of the same order as say order=2). Examine why this is happening (perhaps published version of Tao paper is updated with correction).\n        -  Create a [symplectic] integrator using the `Jacobi-Maupertuis principle <https://en.wikipedia.org/wiki/Maupertuis%27_principle>`__.\n        -  Specify an upper bound for integrator on H error, which abs(H - H(qp(0))). When computing the next step, if the H error is above the upper bound, recompute that step with a lower dt. This will involve defining a search strategy for dt that doesn't make it too small.\n        -  Move ``PendulumNd`` and ``KeplerNd`` from tests dir into vorpy and write tests to symbolically verify all the formulas are correct. The goal would be to create more of these to provide a whole family of dynamical systems that can be used and experimented with.\n        -  Have tests create a ``test_artifacts`` subdir which all files that the tests produce are put in, so there's an easy single thing to delete after tests run (or tests can clean this up themselves).\n        -  Switch to `pytest <https://docs.pytest.org/en/latest/>`__.\n        -  For ``sys.stderr.write``-based warnings, create a flag that can be set within the ``vorpy`` module to silence them.\n        -  Use ``hashlib`` for data caching layer on top of ``vorpy.pickle``.\n        -  Make a human-readable hash, which concatenates words to represent elements of a hash space. This should be convertable to/from a binary string. Examples:\n        \n           ::\n        \n               StupidlyWalkingPerson\n               BigThing\n               Tree\n        \n           Maybe also tack on the remaining bits to the end as a decimal or hex number. Examples:\n        \n           ::\n        \n               StupidlyWalkingPersonA07BE5\n               Tree10034\n        \n           See `this <https://stackoverflow.com/questions/17753182/getting-a-large-list-of-nouns-or-adjectives-in-python-with-nltk-or-python-mad>`__.\n        -  Use hashing in ``vorpy.symbolic.cached_lambdified`` on what gets lambdified so that changes to the function automatically cause the cache to be updated.\n        -  Make a module that provides a nice abstraction for concurrent.futures.ProcessPoolExecutor for parallel processing.\n        -  Allow multiply-nested dirs for cache\\_dirname in cached\\_lambdified -- this would correspond to multiply-nested modules for the cached code. Use os.makedirs instead of os.mkdir\n        \n        References\n        ==========\n        \n        -  [http://docs.python-guide.org/en/latest/writing/structure/]\n        -  [https://en.wikipedia.org/wiki/Symplectic\\_integrator]\n        -  [https://en.wikipedia.org/wiki/Energy\\_drift]\n        -  [https://journals.aps.org/pre/abstract/10.1103/PhysRevE.94.043303] - Molei Tao - Explicit symplectic approximation of nonseparable Hamiltonians: Algorithm and long time performance\n        -  The package index for `dill <https://pypi.python.org/pypi/dill>`__ (which is imported by ``vorpy.pickle``) makes the following request:\n        \n           ::\n        \n               If you use dill to do research that leads to publication, we ask that you acknowledge use of dill by citing the following in your publication:\n        \n                   M.M. McKerns, L. Strand, T. Sullivan, A. Fang, M.A.G. Aivazis,\n                   \"Building a framework for predictive science\", Proceedings of\n                   the 10th Python in Science Conference, 2011;\n                   http://arxiv.org/pdf/1202.1056\n        \n                   Michael McKerns and Michael Aivazis,\n                   \"pathos: a framework for heterogeneous computing\", 2010- ;\n                   http://trac.mystic.cacr.caltech.edu/project/pathos\n        \n               Please see http://trac.mystic.cacr.caltech.edu/project/pathos or http://arxiv.org/pdf/1202.1056 for further information.\n        \nKeywords: numerical computation symbolic tensor calculus cached lambdify geometric symplectic integration\nPlatform: UNKNOWN\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/vdods/vorpy",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "vorpy",
    "platform": "",
    "project_url": "https://pypi.org/project/vorpy/",
    "release_url": "https://pypi.org/project/vorpy/0.4.3/",
    "requires_dist": [
      "sympy",
      "numpy",
      "dill"
    ],
    "requires_python": "",
    "summary": "VictOR dods' PYthon package (mostly math-related)",
    "version": "0.4.3"
  },
  "releases": {
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0e95e093b68429a2920f783b0b25b70b",
          "sha256": "e03c2360e5808f713779c279967328faee14022d955492a6422fa3414832c0be"
        },
        "downloads": -1,
        "filename": "vorpy-0.4.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0e95e093b68429a2920f783b0b25b70b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 36246,
        "upload_time": "2018-01-04T06:07:01",
        "url": "https://files.pythonhosted.org/packages/1c/ff/999542377e69f58e894b69e65dbcb0b1e4bd52952fae029bf3df5b0fe5ee/vorpy-0.4.3-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9d7d0ebd800e6fcd025403be4aea3aa9",
          "sha256": "d0b7586f490e6b875202870c8e1f0d5e5a0befd8e56bbd2a4fe5ea331a539ea7"
        },
        "downloads": -1,
        "filename": "vorpy-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9d7d0ebd800e6fcd025403be4aea3aa9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 29880,
        "upload_time": "2018-01-04T06:07:02",
        "url": "https://files.pythonhosted.org/packages/e6/87/2af6e1acf72e8baab6751afcfa548b794c49c50c062a22d8abb9c94ee552/vorpy-0.4.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0e95e093b68429a2920f783b0b25b70b",
        "sha256": "e03c2360e5808f713779c279967328faee14022d955492a6422fa3414832c0be"
      },
      "downloads": -1,
      "filename": "vorpy-0.4.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0e95e093b68429a2920f783b0b25b70b",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 36246,
      "upload_time": "2018-01-04T06:07:01",
      "url": "https://files.pythonhosted.org/packages/1c/ff/999542377e69f58e894b69e65dbcb0b1e4bd52952fae029bf3df5b0fe5ee/vorpy-0.4.3-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "9d7d0ebd800e6fcd025403be4aea3aa9",
        "sha256": "d0b7586f490e6b875202870c8e1f0d5e5a0befd8e56bbd2a4fe5ea331a539ea7"
      },
      "downloads": -1,
      "filename": "vorpy-0.4.3.tar.gz",
      "has_sig": false,
      "md5_digest": "9d7d0ebd800e6fcd025403be4aea3aa9",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 29880,
      "upload_time": "2018-01-04T06:07:02",
      "url": "https://files.pythonhosted.org/packages/e6/87/2af6e1acf72e8baab6751afcfa548b794c49c50c062a22d8abb9c94ee552/vorpy-0.4.3.tar.gz"
    }
  ]
}