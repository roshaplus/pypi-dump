{
  "info": {
    "author": "Pawel",
    "author_email": "inne.poczta@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "data\\_object\n============\n\nDescription:\n------------\n\nSimple base class for creating data object (it means objects, dedicated\nto storing data only). It's a little bit similar to `case\nclass <https://docs.scala-lang.org/tour/case-classes.html>`__ from\nScala. Using it as base class, You don't need to take care of data\nobjects boilerplate (like \\_\\_str\\_\\_, \\_\\_eq\\_\\_, \\_\\_hash\\_\\_\nmethods). Main features: \\* Objects are considered to be equal based on\npublic fields (method with names started with \\_ are not took into\naccount) values instead of object identity \\* \\_\\_str\\_\\_ and\n\\_\\_repr\\_\\_ methods return values based on public fields \\* Static\nmethod for creating instances from dictionary. Main difference to dict\nunpacking is that all non matching keys are ignored and default values\nare supported \\* there are two base classes: **DataObject** and\n**ImmutableDataObject**. The second on creates immutable object (so\nvalue assigned once to field, cannot be changed)\n\n**WARNING:** > In future version default behavior may change. It's still\nunder consideration, whether two different classes with the same set of\nfields and values should be equal\n\nInstall\n-------\n\n``pip install data_object``\n\nUsage\n-----\n\nDataObject\n^^^^^^^^^^\n\n.. code:: python\n\n    from data_object import DataObject\n\n\n    class CustomClass(DataObject):\n        def __init__(self, foo, bar):\n            self.foo = foo\n            self.bar = bar\n\nStr and Repr:\n\n\n.. code:: python\n\n    a = CustomClass('a', 'b')\n    print(a) # output: {\"bar\": \"b\", \"foo\": \"a\"}\n    print(repr(a)) # output: CustomClass(bar=b, foo=a)\n\nEquality and Hash\n\n\n.. code:: python\n\n\n    class OtherClass(DataObject):\n        def __init__(self, foo, bar):\n            self.foo = foo\n            self.bar = bar\n\n    a = CustomClass('a', 'b')\n    b = CustomClass('a', 'b')\n    c = CustomClass('a', 'z')\n    d = OtherClass('a', 'b')\n\n    a == b # True\n    a == c # False\n    a == d # True\n\n    z = set()\n    z.add(a)\n    z.add(b)\n    z.add(c)\n    z.add(d)\n    print(z) # output: {CustomClass(bar=b, foo=a), CustomClass(bar=z, foo=a)}\n\nCreating instances from dict\n\n\n.. code:: python\n\n    class SomeClass(DataObject):\n        def __init__(self, a, b, c='xyz'):\n            self.a = a\n            self.b = b\n            self.c = c\n\n    params1 = {'a': 'aaa', 'b': 'bbb', 'c': 'ccc'}\n    params2 = {'a': 'xxx', 'b': 'yyy'}\n    params3 = {'a': 'xxx'}\n\n    inst1 = SomeClass.from_dict(params1)\n    inst2 = SomeClass.from_dict(params2)\n    inst3 = SomeClass.from_dict(params3, none_if_not_found=True)\n\n    print(inst1) # output: {\"a\": \"aaa\", \"b\": \"bbb\", \"c\": \"ccc\"}\n    print(inst2) # output: {\"a\": \"xxx\", \"b\": \"yyy\", \"c\": \"xyz\"}\n    print(inst3) # output: {\"a\": \"xxx\", \"b\": null, \"c\": \"xyz\"}\n\nImmutableDataObject\n^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from data_object import ImmutableDataObject\n\n    class CustomImmutableClass(ImmutableDataObject):\n        def __init__(self, foo, bar):\n            self.foo = foo\n            self.bar = bar\n\n    inst = CustomImmutableClass('abc', 'xyz')\n    print(inst) # output: {\"bar\": \"xyz\", \"foo\": \"abc\"}\n\n    inst.foo = 'aaa'\n\nwill produce exception:\n\n::\n\n    Traceback (most recent call last):\n    ...\n    data_object.exceptions.ImmutableObjectViolation: Changing attributes not permitted for immutable object\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/PawelJ-PL/data_object",
    "keywords": "Python data object case class boilerplate dto",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "data-object",
    "platform": "",
    "project_url": "https://pypi.org/project/data-object/",
    "release_url": "https://pypi.org/project/data-object/1.0.0/",
    "requires_dist": [
      "nose; extra == 'test'",
      "coverage; extra == 'test'"
    ],
    "requires_python": ">=3",
    "summary": "Base class for data objects",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5b0f4f91171dc6c0d6c3e5c067a82559",
          "sha256": "11094c4b724ada81dc98bc9b1fa56af4204483ce6204bf72aeae6c46787a7cd2"
        },
        "downloads": -1,
        "filename": "data_object-1.0.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5b0f4f91171dc6c0d6c3e5c067a82559",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 8731,
        "upload_time": "2018-01-22T22:14:34",
        "url": "https://files.pythonhosted.org/packages/df/7f/6b9a92b517ea722480bc8eb6c90e140c9bd1c658c87e9a9bca5ce1b97d1e/data_object-1.0.0-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5b0f4f91171dc6c0d6c3e5c067a82559",
        "sha256": "11094c4b724ada81dc98bc9b1fa56af4204483ce6204bf72aeae6c46787a7cd2"
      },
      "downloads": -1,
      "filename": "data_object-1.0.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5b0f4f91171dc6c0d6c3e5c067a82559",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 8731,
      "upload_time": "2018-01-22T22:14:34",
      "url": "https://files.pythonhosted.org/packages/df/7f/6b9a92b517ea722480bc8eb6c90e140c9bd1c658c87e9a9bca5ce1b97d1e/data_object-1.0.0-py3-none-any.whl"
    }
  ]
}