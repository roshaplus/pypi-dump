{
  "info": {
    "author": "Adam Mills",
    "author_email": "adam@armills.info",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "jsonrpc-websocket: a compact JSON-RPC websocket client library for asyncio\n=======================================================================================================\n\n.. image:: https://travis-ci.org/armills/jsonrpc-websocket.svg\n    :target: https://travis-ci.org/armills/jsonrpc-websocket\n.. image:: https://coveralls.io/repos/armills/jsonrpc-websocket/badge.svg\n    :target: https://coveralls.io/r/armills/jsonrpc-websocket\n\nThis is a compact and simple JSON-RPC websocket client implementation for asyncio python code. This code is forked from https://github.com/gciotta/jsonrpc-requests\n\nMain Features\n-------------\n\n* Python 3.4 & 3.5 compatible\n* Supports nested namespaces (eg. `app.users.getUsers()`)\n* 100% test coverage\n\nUsage\n-----\nIt is recommended to manage the aiohttp ClientSession object externally and pass it to the Server constructor. `(See the aiohttp documentation.) <https://aiohttp.readthedocs.io/en/stable/client_reference.html#aiohttp.ClientSession>`_ If not passed to Server, a ClientSession object will be created automatically.\n\nExecute remote JSON-RPC functions\n\n.. code-block:: python\n\n    import asyncio\n    from jsonrpc_websocket import Server\n\n    @asyncio.coroutine\n    def routine():\n        server = Server('ws://localhost:9090')\n        try:\n            yield from server.ws_connect()\n\n            yield from server.foo(1, 2)\n            yield from server.foo(bar=1, baz=2)\n            yield from server.foo({'foo': 'bar'})\n            yield from server.foo.bar(baz=1, qux=2)\n        finally:\n            yield from server.close()\n            yield from server.session.close()\n\n    asyncio.get_event_loop().run_until_complete(routine())\n\nA notification\n\n.. code-block:: python\n\n    import asyncio\n    from jsonrpc_websocket import Server\n\n    @asyncio.coroutine\n    def routine():\n        server = Server('ws://localhost:9090')\n        try:\n            yield from server.ws_connect()\n\n            yield from server.foo(bar=1, _notification=True)\n        finally:\n            yield from server.close()\n            yield from server.session.close()\n\n    asyncio.get_event_loop().run_until_complete(routine())\n\nHandle requests from server to client\n\n.. code-block:: python\n\n    import asyncio\n    from jsonrpc_websocket import Server\n\n    def client_method(arg1, arg2):\n        return arg1 + arg2\n\n    @asyncio.coroutine\n    def routine():\n        server = Server('ws://localhost:9090')\n        # client_method is called when server requests method 'namespace.client_method'\n        server.namespace.client_method = client_method\n        try:\n            yield from server.ws_connect()\n        finally:\n            yield from server.close()\n            yield from server.session.close()\n\n    asyncio.get_event_loop().run_until_complete(routine())\n\nPass through arguments to aiohttp (see also `aiohttp  documentation <http://aiohttp.readthedocs.io/en/stable/client_reference.html#aiohttp.ClientSession.request>`_)\n\n.. code-block:: python\n\n    import asyncio\n    import aiohttp\n    from jsonrpc_websocket import Server\n\n    @asyncio.coroutine\n    def routine():\n        server = Server(\n            'ws://localhost:9090',\n            auth=aiohttp.BasicAuth('user', 'pass'),\n            headers={'x-test2': 'true'})\n        try:\n            yield from server.ws_connect()\n\n            yield from server.foo()\n        finally:\n            yield from server.close()\n            yield from server.session.close()\n\n    asyncio.get_event_loop().run_until_complete(routine())\n\nPass through aiohttp exceptions\n\n.. code-block:: python\n\n    import asyncio\n    import aiohttp\n    from jsonrpc_websocket import Server\n\n    @asyncio.coroutine\n    def routine():\n        server = Server('ws://unknown-host')\n        try:\n            yield from server.ws_connect()\n\n            yield from server.foo()\n        except TransportError as transport_error:\n            print(transport_error.args[1]) # this will hold a aiohttp exception instance\n        finally:\n            yield from server.close()\n            yield from server.session.close()\n\n    asyncio.get_event_loop().run_until_complete(routine())\n\nTests\n-----\nInstall the Python tox package and run ``tox``, it'll test this package with various versions of Python.\n\nCredits\n-------\n`@gciotta <https://github.com/gciotta>`_ for creating the base project `jsonrpc-requests <https://github.com/gciotta/jsonrpc-requests>`_.\n\n`@mbroadst <https://github.com/mbroadst>`_ for providing full support for nested method calls, JSON-RPC RFC\ncompliance and other improvements.\n\n`@vaab <https://github.com/vaab>`_ for providing api and tests improvements, better RFC compliance.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/armills/jsonrpc-websocket",
    "keywords": "json-rpc async asyncio websocket",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jsonrpc-websocket",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/jsonrpc-websocket/",
    "release_url": "https://pypi.org/project/jsonrpc-websocket/0.5/",
    "requires_python": "",
    "summary": "A JSON-RPC websocket client library for asyncio",
    "version": "0.5"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a8906f1b9fa0b249d6f2d76398fb0903",
          "sha256": "2b01e0237f2e05f52e6099a4ad1d79ad2624b4c636797383e3eede2c8711c187"
        },
        "downloads": 14,
        "filename": "jsonrpc-websocket-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a8906f1b9fa0b249d6f2d76398fb0903",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4866,
        "upload_time": "2017-02-15T16:55:56",
        "url": "https://files.pythonhosted.org/packages/19/b2/97e6c1e807b7e43d05c8ed69d58712c14abbbde5562f36911c126807fb9d/jsonrpc-websocket-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4addfb7a9a7f993a22168d5307c20fee",
          "sha256": "608b4b99532059ca6e77025c936751c7b33bac726609b5ac2acbf1f8c6307141"
        },
        "downloads": 147,
        "filename": "jsonrpc-websocket-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4addfb7a9a7f993a22168d5307c20fee",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4938,
        "upload_time": "2017-02-16T01:29:18",
        "url": "https://files.pythonhosted.org/packages/e6/90/a196a99a2db1712476e82ba84f03b1b9d21440e3eb475b5e55db51bd2ab6/jsonrpc-websocket-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b0a41d5adb5696a484696611fdaf570f",
          "sha256": "c7c62e364d7856d3d3eb18ad17cc016e532770ecaeae2cc4da34c5d2b8cd4de5"
        },
        "downloads": 223,
        "filename": "jsonrpc-websocket-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b0a41d5adb5696a484696611fdaf570f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4895,
        "upload_time": "2017-03-19T15:38:58",
        "url": "https://files.pythonhosted.org/packages/c0/55/06500a5dc4ca07bae5bd327c46fd2f8020487df3342708e495f9c0a82d44/jsonrpc-websocket-0.3.tar.gz"
      }
    ],
    "0.4": [],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7d7fa81ff1a71c9b89fb8d31cad1c5d0",
          "sha256": "04c30808f9dd21713f9b77e357418a5751d31e90baf8a45bc131ededd0c23232"
        },
        "downloads": 302,
        "filename": "jsonrpc-websocket-0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7d7fa81ff1a71c9b89fb8d31cad1c5d0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4905,
        "upload_time": "2017-04-06T21:52:19",
        "url": "https://files.pythonhosted.org/packages/11/ea/85f2bc48b322a1e36f40636e43b34b65ca9e48e1a488dd83095da4dfea41/jsonrpc-websocket-0.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7d7fa81ff1a71c9b89fb8d31cad1c5d0",
        "sha256": "04c30808f9dd21713f9b77e357418a5751d31e90baf8a45bc131ededd0c23232"
      },
      "downloads": 302,
      "filename": "jsonrpc-websocket-0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "7d7fa81ff1a71c9b89fb8d31cad1c5d0",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4905,
      "upload_time": "2017-04-06T21:52:19",
      "url": "https://files.pythonhosted.org/packages/11/ea/85f2bc48b322a1e36f40636e43b34b65ca9e48e1a488dd83095da4dfea41/jsonrpc-websocket-0.5.tar.gz"
    }
  ]
}