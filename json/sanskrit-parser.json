{
  "info": {
    "author": "Sanskrit programmers",
    "author_email": "sanskrit-programmers@googlegroups.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Topic :: Text Processing :: Linguistic"
    ],
    "description": "sanskrit\\_parser\n================\n\nParsers for Sanskrit / \u0938\u0902\u0938\u094d\u0915\u0943\u0924\u092e\u094d\n\n**NOTE:** This project is still under development. Both over-generation\n(invalid forms/splits) and under-generation (missing valid forms/splits)\nare quite likely. Please see the Sanskrit Parser Stack section below for\ndetailed status. Report any issues\n`here <https://github.com/kmadathil/sanskrit_parser/issues>`__.\n\nPlease feel free to ping us if you would like to collaborate on this\nproject.\n\nInstallation\n------------\n\nThis project has been tested and developed using Python 2.7. (Python 3\nsupport is in progress)\n\n::\n\n    pip install sanskrit_parser\n\nUsage\n-----\n\nLexical Analyzer\n~~~~~~~~~~~~~~~~\n\nUse the ``SanskritLexicalAnalyzer`` to split a sentence (wrapped in a\n``SanskritObject``) and retrieve the top 10 splits:\n\n.. code:: python\n\n    >>> from sanskrit_parser.lexical_analyzer.SanskritLexicalAnalyzer import SanskritLexicalAnalyzer\n    >>> from sanskrit_parser.base.SanskritBase import SanskritObject, SLP1\n    >>> sentence = SanskritObject(\"astyuttarasyAMdishidevatAtmA\")\n    >>> analyzer = SanskritLexicalAnalyzer()\n    >>> splits = analyzer.getSandhiSplits(sentence).findAllPaths(10)\n    >>> for split in splits:\n    ...    print split\n    ...\n    [u'asti', u'uttarasyAm', u'diSi', u'devatA', u'AtmA']\n    [u'asti', u'uttarasyAm', u'diSi', u'devat', u'AtmA']\n    [u'asti', u'uttarasyAm', u'diSi', u'devata', u'AtmA']\n    [u'asti', u'uttara', u'syAm', u'diSi', u'devatA', u'AtmA']\n    [u'asti', u'uttarasyAm', u'diSi', u'devatA', u'at', u'mA']\n    [u'asti', u'uttarasyAm', u'diSi', u'de', u'vatA', u'AtmA']\n    [u'asti', u'uttarasyAm', u'diSi', u'devata', u'at', u'mA']\n    [u'asti', u'uttas', u'rasyAm', u'diSi', u'devat', u'AtmA']\n    [u'asti', u'uttara', u'syAm', u'diSi', u'devat', u'AtmA']\n    [u'asti', u'uttarasyAm', u'diSi', u'de', u'avatA', u'AtmA']\n\nThe lexical\\_analyzer can also be used to look up the tags for a given\nword form in the INRIA database: (Note that the database stores words\nending in visarga with an 's' at the end)\n\n.. code:: python\n\n    >>> word = SanskritObject('hares')\n    >>> tags = analyzer.getLexicalTags(word)\n    >>> for tag in tags:\n    ...    print tag\n    ...\n    ('hf#1', set(['cj', 'snd', 'prim', 'para', 'md', 'sys', 'prs', 'v', 'np', 'sg', 'op']))\n    ('hari#1', set(['na', 'mas', 'sg', 'gen']))\n    ('hari#1', set(['na', 'mas', 'abl', 'sg']))\n    ('hari#1', set(['na', 'fem', 'sg', 'gen']))\n    ('hari#1', set(['na', 'fem', 'abl', 'sg']))\n    ('hari#2', set(['na', 'mas', 'sg', 'gen']))\n    ('hari#2', set(['na', 'mas', 'abl', 'sg']))\n    ('hari#2', set(['na', 'fem', 'sg', 'gen']))\n    ('hari#2', set(['na', 'fem', 'abl', 'sg']))\n\nMorphological Analyzer\n~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``SanskritMorphologicalAnalyzer`` class has a similar interface to\n``SanskritLexicalAnalyzer``, and has a ``constrainPath()`` method which\ncan find whether a particular split has a valid morphology, and output\nall such valid morphologies.\n\n.. code:: python\n\n    >>> from sanskrit_parser.base.SanskritBase import SanskritObject, SLP1\n    >>> from sanskrit_parser.morphological_analyzer.SanskritMorphologicalAnalyzer import SanskritMorphologicalAnalyzer\n    >>> sentence = SanskritObject(\"astyuttarasyAm\")\n    >>> analyzer = SanskritMorphologicalAnalyzer()\n    >>> graph=analyzer.getSandhiSplits(sentence,tag=True)\n    >>> splits=graph.findAllPaths()\n    >>> for sp in splits:\n    >>>     print(\"Lexical Split:\",sp)\n    >>>     p=analyzer.constrainPath(sp)\n    >>>     if p:\n    >>>         print(\"Valid Morphologies\")\n    >>>         for pp in p:\n    >>>             print([(spp,pp[str(spp)]) for spp in sp])\n    >>>     else:\n    >>>         print(\"No valid morphologies for this split\")\n    ...\n    ('Lexical Split:', [asti, uttarasyAm])\n    Valid Morphologies\n    [(asti, ('as#1', set([kartari, law, ekavacanam, prATamikaH, praTamapuruzaH]))), (uttarasyAm, ('uttara#2', set([strIliNgam, saptamIviBaktiH, ekavacanam])))]\n    [(asti, ('as#1', set([kartari, law, ekavacanam, prATamikaH, praTamapuruzaH]))), (uttarasyAm, ('uttara#1', set([strIliNgam, saptamIviBaktiH, ekavacanam])))]\n    ('Lexical Split:', [asti, uttara, syAm])\n    No valid morphologies for this split\n    ('Lexical Split:', [asti, ut, tara, syAm])\n    No valid morphologies for this split\n\nInriaXMLWrapper\n~~~~~~~~~~~~~~~\n\nThe InriaXMLWrapper utility class can also be used to lookup tags:\n\n.. code:: python\n\n    >>> from sanskrit_parser.util.inriaxmlwrapper import InriaXMLWrapper\n    >>> db = InriaXMLWrapper()\n    >>> db_tags = db.get_tags('hares')\n    >>> tags == db_tags\n    True\n\nSandhi\n~~~~~~\n\nThe ``Sandhi`` class can be used to join/split words:\n\n.. code:: python\n\n    >>> from sanskrit_parser.lexical_analyzer.sandhi import Sandhi\n    >>> sandhi = Sandhi()\n    >>> word1 = SanskritObject('te')\n    >>> word2 = SanskritObject('eva')\n    >>> joins = sandhi.join(word1, word2)\n    >>> for join in joins:\n    ...    print join\n    ...\n    teeva\n    taeva\n    ta eva\n    tayeva\n\nTo split at a specific position, use the ``Sandhi.split_at()`` method:\n\n.. code:: python\n\n    >>> w = SanskritObject('taeva')\n    >>> splits = sandhi.split_at(w, 1)\n    >>> for split in splits:\n    ...    print split\n    ...\n    (u'tar', u'eva')\n    (u'tas', u'eva')\n    (u'taH', u'eva')\n    (u'ta', u'eva')\n\nTo split at all possible locations, use the ``Sandhi.split_all()``\nmethod:\n\n.. code:: python\n\n    >>> splits_all = sandhi.split_all(w)\n    >>> for split in splits_all:\n    ...    print split\n    ...\n    (u't', u'aeva')\n    (u'tar', u'eva')\n    (u'taev', u'a')\n    (u'to', u'eva')\n    (u'ta', u'eva')\n    (u'te', u'eva')\n    (u'taH', u'eva')\n    (u'tae', u'va')\n    (u'taeva', u'')\n    (u'tas', u'eva')\n\n**Note**: As mentioned previously, both over-generation and\nunder-generation are possible with the ``Sandhi`` class.\n\nMaheshvaraSutras\n~~~~~~~~~~~~~~~~\n\nGet varnas in a pratyahara:\n\n.. code:: python\n\n    >>> from sanskrit_parser.base.MaheshvaraSutras import MaheshvaraSutras\n    >>> MS = MaheshvaraSutras()\n    >>> jaS = SanskritObject('jaS', encoding=SLP1)\n    >>> print MS.getPratyahara(jaS)\n    jabagaqada\n\nCheck if a varna is in a pratyahara:\n\n.. code:: python\n\n    >>> g = SanskritObject('g')\n    >>> print MS.isInPratyahara(jaS, g)\n    True\n    >>> k = SanskritObject('k')\n    >>> print MS.isInPratyahara(jaS, k)\n    False\n\nSanskritObject\n~~~~~~~~~~~~~~\n\n``SanskritObject`` is a base class used in all modules. It supports\nautomatic detection of input encoding and transcoding to any encoding\nsupported by the ``indic_transliteration`` package.\n\n.. code:: python\n\n    >>> from sanskrit_parser.base.SanskritBase import SanskritObject, SLP1\n    >>> sentence = SanskritObject(\"astyuttarasyAMdishidevatAtmA\")\n    >>> print sentence.transcoded(SLP1)\n    astyuttarasyAMdiSidevatAtmA\n\nCommand Line Usage\n~~~~~~~~~~~~~~~~~~\n\nAll the classes described above can also be used from the command line.\nThe corresponding examples are below. Please run the tools with\n``--help/-h`` to get help on the options\n\nSanskritMorphologicalAnalyzer\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    $ python -m sanskrit_parser.morphological_analyzer.SanskritMorphologicalAnalyzer astyuttarasyAm --input-encoding SLP1 --need-lakara\n    Input String: astyuttarasyAm\n    Input String in SLP1: astyuttarasyAm\n    Start Split: 2017-10-01 11:16:10.489660\n    End DAG generation: 2017-10-01 11:16:10.496199\n    End pathfinding: 2017-10-01 11:16:10.497342\n    Splits:\n    Lexical Split: [asti, uttarasyAm]\n    Valid Morphologies\n    [(asti, ('as#1', set([kartari, law, ekavacanam, prATamikaH, praTamapuruzaH]))), (uttarasyAm, ('uttara#2', set([strIliNgam, saptamIviBaktiH, ekavacanam])))]\n    [(asti, ('as#1', set([kartari, law, ekavacanam, prATamikaH, praTamapuruzaH]))), (uttarasyAm, ('uttara#1', set([strIliNgam, saptamIviBaktiH, ekavacanam])))]\n    Lexical Split: [asti, uttara, syAm]\n    No valid morphologies for this split\n    Lexical Split: [asti, ut, tara, syAm]\n    No valid morphologies for this split\n\nSanskritLexicalAnalyzer\n^^^^^^^^^^^^^^^^^^^^^^^\n\n::\n\n    $ python -m sanskrit_parser.lexical_analyzer.SanskritLexicalAnalyzer astyuttarasyAMdishidevatAtmA --split\n    Splits:\n    [u'asti', u'uttarasyAm', u'diSi', u'devat', u'AtmA']\n    [u'asti', u'uttarasyAm', u'diSi', u'devata', u'AtmA']\n    [u'asti', u'uttarasyAm', u'diSi', u'devatA', u'AtmA']\n    [u'asti', u'uttara', u'syAm', u'diSi', u'devat', u'AtmA']\n    [u'asti', u'uttarasyAm', u'diSi', u'devata', u'at', u'mA']\n    [u'asti', u'uttarasyAm', u'diSi', u'de', u'vatAt', u'mA']\n    [u'asti', u'uttarasyAm', u'diSi', u'devatA', u'at', u'mA']\n    [u'asti', u'uttas', u'asyAm', u'diSi', u'devat', u'AtmA']\n    [u'asti', u'uttara', u'syAm', u'diSi', u'devata', u'AtmA']\n    [u'asti', u'uttarasyAm', u'diSi', u'de', u'vatA', u'AtmA']\n\n    $ python -m sanskrit_parser.lexical_analyzer.SanskritLexicalAnalyzer hares\n    Input String: hares\n    Input String in SLP1: hares\n    [('hf#1', set(['cj', 'snd', 'prim', 'para', 'md', 'sys', 'prs', 'v', 'np', 'sg', 'op'])), ('hari#1', set(['na', 'mas', 'sg', 'gen'])), ('hari#1', set(['na', 'mas', 'abl', 'sg'])), ('hari#1', set(['na', 'fem', 'sg', 'gen'])), ('hari#1', set(['na', 'fem', 'abl', 'sg'])), ('hari#2', set(['na', 'mas', 'sg', 'gen'])), ('hari#2', set(['na', 'mas', 'abl', 'sg'])), ('hari#2', set(['na', 'fem', 'sg', 'gen'])), ('hari#2', set(['na', 'fem', 'abl', 'sg']))]\n\nInriaXMLWrapper\n^^^^^^^^^^^^^^^\n\n::\n\n    $ python -m sanskrit_parser.util.inriaxmlwrapper hares\n    INFO:root:Pickle file found, loading at 2017-07-31 14:35:56.093000\n    INFO:root:Loading finished at 2017-07-31 14:35:59.159000, took 3.066000 s\n    INFO:root:Cached 666994 forms for fast lookup\n    Getting tags for hares\n    ('hf#1', set(['cj', 'snd', 'prim', 'para', 'md', 'sys', 'prs', 'v', 'np', 'sg', 'op']))\n    ('hari#1', set(['na', 'mas', 'sg', 'gen']))\n    ('hari#1', set(['na', 'mas', 'abl', 'sg']))\n    ('hari#1', set(['na', 'fem', 'sg', 'gen']))\n    ('hari#1', set(['na', 'fem', 'abl', 'sg']))\n    ('hari#2', set(['na', 'mas', 'sg', 'gen']))\n    ('hari#2', set(['na', 'mas', 'abl', 'sg']))\n    ('hari#2', set(['na', 'fem', 'sg', 'gen']))\n    ('hari#2', set(['na', 'fem', 'abl', 'sg']))\n\nSandhi\n^^^^^^\n\n::\n\n    $ python -m sanskrit_parser.lexical_analyzer.sandhi --join te eva\n    Joining te eva\n    set([u'teeva', u'taeva', u'ta eva', u'tayeva'])\n\n    $ python -m sanskrit_parser.lexical_analyzer.sandhi --split taeva 1\n    Splitting taeva at 1\n    set([(u'tar', u'eva'), (u'tas', u'eva'), (u'taH', u'eva'), (u'ta', u'eva')])\n\n    $ python -m sanskrit_parser.lexical_analyzer.sandhi --split taeva --all\n    All possible splits for taeva\n    set([(u't', u'aeva'), (u'tar', u'eva'), (u'taev', u'a'), (u'to', u'eva'), (u'ta', u'eva'), (u'te', u'eva'), (u'taH', u'eva'), (u'tae', u'va'), (u'taeva', u''), (u'tas', u'eva')])\n\nMaheshvaraSutras\n^^^^^^^^^^^^^^^^\n\n::\n\n    $ python -m sanskrit_parser.base.MaheshvaraSutras --encoding SLP1 --pratyahara jaS\n    aiuR fxk eoN EOc hayavaraw laR YamaNaRanam JaBaY GaQaDaz jabagaqadaS KaPaCaWaTacawatav kapay Sazasar hal\n    \u091c\u0936\u094d\n    \u091c\u092c\u0917\u0921\u0926\n\n    $ python -m sanskrit_parser.base.MaheshvaraSutras --encoding SLP1 --pratyahara jaS --varna k\n    aiuR fxk eoN EOc hayavaraw laR YamaNaRanam JaBaY GaQaDaz jabagaqadaS KaPaCaWaTacawatav kapay Sazasar hal\n    \u091c\u0936\u094d\n    \u091c\u092c\u0917\u0921\u0926\n    Is \u0915\u094d in \u091c\u0936\u094d?\n    False\n\n    $ python -m sanskrit_parser.base.MaheshvaraSutras --encoding SLP1 --pratyahara jaS --varna g\n    aiuR fxk eoN EOc hayavaraw laR YamaNaRanam JaBaY GaQaDaz jabagaqadaS KaPaCaWaTacawatav kapay Sazasar hal\n    \u091c\u0936\u094d\n    \u091c\u092c\u0917\u0921\u0926\n    Is \u0917\u094d in \u091c\u0936\u094d?\n    True\n\nSanskrit Parser Stack\n---------------------\n\nStack of parsing tools\n\nLevel 0\n~~~~~~~\n\nSandhi splitting subroutine Input: Phoneme sequence and Phoneme number\nto split at Action: Perform a sandhi split at given input phoneme number\nOuptut: left and right sequences (multiple options will be output). No\nsemantic validation will be performed (up to higher levels)\n\nCurrent Status\n^^^^^^^^^^^^^^\n\nModule that performs sandhi split/join and convenient rule definition is\nat ``lexical_analyzer/sandhi.py``.\n\nRule definitions (human readable!) are at\n``lexical_analyzer/sandhi_rules/*.txt``\n\nLevel 1\n~~~~~~~\n\n-  From dhatu + lakAra + puruSha + vachana to pada and vice versa\n-  From prAtipadika + vibhakti + vachana to pada and vice versa\n-  Upasarga + dhAtu forms - forward and backwards\n-  nAmadhAtu forms\n-  Krt forms - forwards and backwards\n-  Taddhita forms - forwards and backwards\n\nCurrent Status\n^^^^^^^^^^^^^^\n\nTo be done.\n\nHowever, we have a usable solution with inriaxmlwrapper + Prof. Gerard\nHuet's forms database to act as queriable form database. That gives us\nthe bare minimum we need from Level 1, so Level 2 can work.\n\nLevel 2\n~~~~~~~\n\nInput\n^^^^^\n\nSanskrit Sentence #### Action \\* Traverse the sentence, splitting it (or\nnot) at each location to determine all possible valid splits \\* Traverse\nfrom left to right \\* Using dynamic programming, assemble the results of\nall choices\n\n::\n\n      To split or not to split at each phoneme\n\n      If split, all possible left/right combination of phonemes that can result\n\n      Once split, check if the left section is a valid pada (use level 1 tools to pick pada type and tag morphologically) \n\n      If left section is valid, proceed to split the right section\n\n-  At the end of this step, we will have all possible syntactically\n   valid splits with morphological tags\n\nOutput\n^^^^^^\n\nAll semantically valid sandhi split sequences\n\nCurrent Status\n^^^^^^^^^^^^^^\n\nModule that performs sentence split is at\n``lexical_analyzer/SanksritLexicalAnalyzer.py``\n\nLevel 3\n~~~~~~~\n\nInput\n^^^^^\n\nSemantically valid sequence of tagged padas (output of Level 1) ####\nAction: \\* Assemble graphs of morphological constraints\n\n::\n\n    viseShaNa - viseShya\n\n    karaka/vibhakti\n\n    vachana/puruSha constraints on tiGantas and subantas\n\n-  Check validity of graphs #### Output\n\n1. Is the input sequence a morphologically valid sentence?\n2. Enhanced sequence of tagged padas, with karakas tagged, and a\n   dependency graph associated\n\nCurrent Status\n^^^^^^^^^^^^^^\n\nNot begun\n\nSeq2Seq based Sanskrit Parser\n-----------------------------\n\nSee: Grammar as a Foreign Language : Vinyals & Kaiser et. al. Google\nhttp://arxiv.org/abs/1412.7449\n\n-  Method: Seq2Seq Neural Network (n? layers)\n-  Input Embedding with word2vec (optional)\n\nInput\n~~~~~\n\nSanskrit sentence ### Output Sentence split into padas with tags ###\nTrain/Test data DCS corpus, converted by Vishvas Vasuki\n\nCurrent Status\n^^^^^^^^^^^^^^\n\nNot begun\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/kmadathil/sanskrit_parser",
    "keywords": "sanskrit samskritam",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sanskrit-parser",
    "platform": "",
    "project_url": "https://pypi.org/project/sanskrit-parser/",
    "release_url": "https://pypi.org/project/sanskrit-parser/0.0.1.dev4/",
    "requires_dist": [
      "python-constraint",
      "networkx",
      "lxml",
      "indic-transliteration"
    ],
    "requires_python": "",
    "summary": "Tools for lexical and morphological analysis of Sanskrit",
    "version": "0.0.1.dev4"
  },
  "releases": {
    "0.0.1.dev1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "17a0dbc895eea7a2fd66f88bf3f50f41",
          "sha256": "0b3313d94fdf0abeca665301ee1ab28448db42cb3441d858be3e1bd2a4173a0c"
        },
        "downloads": 0,
        "filename": "sanskrit_parser-0.0.1.dev1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "17a0dbc895eea7a2fd66f88bf3f50f41",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 33547,
        "upload_time": "2017-08-01T06:17:52",
        "url": "https://files.pythonhosted.org/packages/7c/cf/2b4d311fc86659b7a7639173c23dfb5a378d28f066766cb971a9a666e94a/sanskrit_parser-0.0.1.dev1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6746354a5771a7a0a3d6d6987021cc38",
          "sha256": "8bf8fb74efbf1024db0538343e9e538c3754c0248e37f37bd8569ce7a506c7d5"
        },
        "downloads": 0,
        "filename": "sanskrit_parser-0.0.1.dev1.tar.gz",
        "has_sig": false,
        "md5_digest": "6746354a5771a7a0a3d6d6987021cc38",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25653,
        "upload_time": "2017-08-01T06:17:54",
        "url": "https://files.pythonhosted.org/packages/6c/d6/504d15efd85fcbaf09c1ebed54b0890fead3e51209bc8a7386fb71e1a18f/sanskrit_parser-0.0.1.dev1.tar.gz"
      }
    ],
    "0.0.1.dev2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b6825813045a7578cfe5dbcc593bc855",
          "sha256": "90836dd09a6cb9662c84100ce96e4ca8cc32fe7ec5b07b98e88eacaac830402a"
        },
        "downloads": 0,
        "filename": "sanskrit_parser-0.0.1.dev2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "b6825813045a7578cfe5dbcc593bc855",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 33539,
        "upload_time": "2017-08-01T07:20:41",
        "url": "https://files.pythonhosted.org/packages/59/9d/dffd26fa4fbe1ec9643f7b402e05cae885d533edfe076cc5f55815f49bea/sanskrit_parser-0.0.1.dev2-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "72cdbd2490b2d85a1fe672be74da9202",
          "sha256": "7aacdaa99ac6ae6ed9663e171783eb8fc20606f1c10230e955ba94dbe8ba4c22"
        },
        "downloads": 0,
        "filename": "sanskrit_parser-0.0.1.dev2.tar.gz",
        "has_sig": false,
        "md5_digest": "72cdbd2490b2d85a1fe672be74da9202",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25673,
        "upload_time": "2017-08-01T07:20:44",
        "url": "https://files.pythonhosted.org/packages/15/ee/beb0443f17c20e67b0a45a19d49116094d3b385798a788816e1874ed491f/sanskrit_parser-0.0.1.dev2.tar.gz"
      }
    ],
    "0.0.1.dev3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5063b8becebfdedc8f21337b80046400",
          "sha256": "414d433bebe2c8e3bf97ebdde1bbb35a9a4cfc872a67d2d9695139bbc63b38d7"
        },
        "downloads": 0,
        "filename": "sanskrit_parser-0.0.1.dev3-py2.7.egg",
        "has_sig": false,
        "md5_digest": "5063b8becebfdedc8f21337b80046400",
        "packagetype": "bdist_egg",
        "python_version": "2.7",
        "size": 52051,
        "upload_time": "2017-08-09T06:38:43",
        "url": "https://files.pythonhosted.org/packages/b7/94/f7104bbfd435ea946b7289c0122a6fe79288204fa6354f76eeaeafe068ba/sanskrit_parser-0.0.1.dev3-py2.7.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d04478900fd6eaad72f5c30c400a5cf2",
          "sha256": "ecd1d4d28233a7f6c2255e7d7f6990fcfab8c6617ce4a04d1310e924ec4cb9c1"
        },
        "downloads": 0,
        "filename": "sanskrit_parser-0.0.1.dev3-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "d04478900fd6eaad72f5c30c400a5cf2",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 33684,
        "upload_time": "2017-08-09T06:38:40",
        "url": "https://files.pythonhosted.org/packages/3f/6a/147213ed02dcb46949e14e0b05f615c554156031ededefbe87b26df39e04/sanskrit_parser-0.0.1.dev3-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "94ad846ab2ae3270dcea0eb4f250fb00",
          "sha256": "347857ed69492a71703eb3e3be33af5ccdb31124337c5468059b2f1705bf84f0"
        },
        "downloads": 0,
        "filename": "sanskrit_parser-0.0.1.dev3.tar.gz",
        "has_sig": false,
        "md5_digest": "94ad846ab2ae3270dcea0eb4f250fb00",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25861,
        "upload_time": "2017-08-09T06:38:45",
        "url": "https://files.pythonhosted.org/packages/f2/9c/1632eb71192315c5276ad83b8c943b51c3b1876d4b90dd374fc45dffec6f/sanskrit_parser-0.0.1.dev3.tar.gz"
      }
    ],
    "0.0.1.dev4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "309ba0ad061527ecca199ee33a4e3e40",
          "sha256": "ddd5be7d842a1bf92b58a0bb73267c300fd664201f2aa3adead2b4f8d90f9253"
        },
        "downloads": 0,
        "filename": "sanskrit_parser-0.0.1.dev4-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "309ba0ad061527ecca199ee33a4e3e40",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 37151,
        "upload_time": "2017-10-01T06:19:47",
        "url": "https://files.pythonhosted.org/packages/8a/af/af0ffb5390b0a333c937867343a2eaca74d5f15e05fdc11cf456c050d3c7/sanskrit_parser-0.0.1.dev4-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "af34de69e31a1f36508008fa442a70e4",
          "sha256": "2ee9cd435dbd794fbf0a8e28cbebe24679b61aee71ed1cdf2769e20347cf09f3"
        },
        "downloads": 0,
        "filename": "sanskrit_parser-0.0.1.dev4.tar.gz",
        "has_sig": false,
        "md5_digest": "af34de69e31a1f36508008fa442a70e4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27334,
        "upload_time": "2017-10-01T06:19:49",
        "url": "https://files.pythonhosted.org/packages/24/b7/43e13340f1417429f33ee9aab9c32b4b003fa037b1d563246be92ed230ac/sanskrit_parser-0.0.1.dev4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "309ba0ad061527ecca199ee33a4e3e40",
        "sha256": "ddd5be7d842a1bf92b58a0bb73267c300fd664201f2aa3adead2b4f8d90f9253"
      },
      "downloads": 0,
      "filename": "sanskrit_parser-0.0.1.dev4-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "309ba0ad061527ecca199ee33a4e3e40",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 37151,
      "upload_time": "2017-10-01T06:19:47",
      "url": "https://files.pythonhosted.org/packages/8a/af/af0ffb5390b0a333c937867343a2eaca74d5f15e05fdc11cf456c050d3c7/sanskrit_parser-0.0.1.dev4-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "af34de69e31a1f36508008fa442a70e4",
        "sha256": "2ee9cd435dbd794fbf0a8e28cbebe24679b61aee71ed1cdf2769e20347cf09f3"
      },
      "downloads": 0,
      "filename": "sanskrit_parser-0.0.1.dev4.tar.gz",
      "has_sig": false,
      "md5_digest": "af34de69e31a1f36508008fa442a70e4",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 27334,
      "upload_time": "2017-10-01T06:19:49",
      "url": "https://files.pythonhosted.org/packages/24/b7/43e13340f1417429f33ee9aab9c32b4b003fa037b1d563246be92ed230ac/sanskrit_parser-0.0.1.dev4.tar.gz"
    }
  ]
}