{
  "info": {
    "author": "John Torakis - operatorequals",
    "author_email": "john.torakis@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "``httpimport``\n==============\n\nModule for *remote*, *in-memory* Python *package/module* ``import``\\ ing\n**through HTTP/S**\n\n|PyPI version|\n\nA feature that *Python2/3* **misses** and has become popular in other\nlanguages is the **remote loading of packages/modules**.\n\n``httpimport`` lets a *Python2/3* packages/modules to be imported\ndirectly in Python interpreter's process memory, through **remote\n``URIs``**, and *more*...\n\nExample - In a Nutshell\n^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    >>> import httpimport\n    >>> httpimport.__all__\n    ['HttpImporter', 'add_remote_repo', 'remove_remote_repo', 'remote_repo', 'github_repo', 'bitbucket_repo']\n\n.. code:: python\n\n    >>> with httpimport.remote_repo(['package1','package2','package3'], 'http://my-codes.example.com/python_packages'):\n    ...     import package1\n    ...\n\n.. code:: python\n\n    >>> with httpimport.github_repo('operatorequals', 'covertutils', branch = master):\n    ...     import covertutils\n    ... # Also works with 'bitbucket_repo'\n\n.. code:: python\n\n    >>> # A depends to B and B depends to C (A, B, C : Python modules/packages in different domains):\n    >>> # A exists in \"repo_a.my-codes.example.com\" |\n    >>> # B exists in \"repo_b.my-codes.example.com\" | <-- Different domains\n    >>> # C exists in \"repo_c.my-codes.example.com\" |\n    >>> with httpimport.remote_repo(['C'], 'http://repo_c.my-codes.example.com/python_packages'):\n    ...  with httpimport.remote_repo(['B'], 'http://repo_b.my-codes.example.com/python_packages'):\n    ...     with httpimport.remote_repo(['A'], 'http://repo_a.my-codes.example.com/python_packages'):\n    ...     import A\n    ... # Asks for A, Searches for B, Asks for B, Searches for C, Asks for C --> Resolves --> Imports A\n    >>>\n\n.. code:: python\n\n    >>> module_object = httpimport.load('package1', 'http://my-codes.example.com/python_packages')\n    >>> module_object\n    <module 'package1' from 'http://my-codes.example.com/python_packages/package1/__init__.py'>\n\nExample - The Whole Picture\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUsing the ``SimpleHTTPServer``, a whole directory can be served through\nHTTP as follows:\n\n.. code:: bash\n\n    user@hostname:/tmp/test_directory$ ls -R\n    .:\n    test_package\n\n    ./test_package:\n    __init__.py  __init__.pyc  module1.py  module2.py\n    user@hostname:/tmp/test_directory$\n    user@hostname:/tmp/test_directory$ python -m SimpleHTTPServer &\n    [1] 9565\n    Serving HTTP on 0.0.0.0 port 8000 ...\n\n    user@hostname:/tmp/test_directory$\n    user@hostname:/tmp/test_directory$\n    user@hostname:/tmp/test_directory$ curl http://localhost:8000/test_package/module1.py\n    127.0.0.1 - - [22/Aug/2017 17:42:49] \"GET /test_package/module1.py HTTP/1.1\" 200 -\n\n\n    def dummy_func() : return 'Function Loaded'\n\n\n    class dummy_class :\n\n        def dummy_method(self) : return 'Class and method loaded'\n\n\n    dummy_str = 'Constant Loaded'\n\n    user@hostname:/tmp/test_directory$\n    user@hostname:/tmp/test_directory$ curl http://localhost:8000/test_package/__init__.py\n    127.0.0.1 - - [22/Aug/2017 17:45:20] \"GET /test_package/__init__.py HTTP/1.1\" 200 -\n    __all__ = [\"module1\", \"module2\"]\n\nUsing this simple built-in feature of ``Py2/3``, a custom importer can\nbeen created, that given a base URL and a list of package names, it\nfetches and automatically loads all modules and packages to the local\nnamespace.\n\nUsage\n^^^^^\n\nMaking the HTTP repo\n^^^^^^^^^^^^^^^^^^^^\n\n.. code:: bash\n\n    user@hostname:/tmp/test_directory$ ls -R\n    .:\n    test_package\n\n    ./test_package:\n    __init__.py  __init__.pyc  module1.py  module2.py\n\n    user@hostname:/tmp/test_directory$\n    user@hostname:/tmp/test_directory$ python -m SimpleHTTPServer\n    Serving HTTP on 0.0.0.0 port 8000 ...\n\nImporting Remotely\n^^^^^^^^^^^^^^^^^^\n\n``add_remote_repo()`` and ``remove_remote_repo()``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThese 2 functions will *add* and *remove* to the default\n``sys.meta_path`` custom ``HttpImporter`` objects, given the URL they\nwill look for packages/modules and a list of packages/modules its one\ncan serve.\n\n.. code:: python\n\n    >>> import test_package\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    ImportError: No module named test_package\n    >>>\n    >>> from httpimport import add_remote_repo, remove_remote_repo\n    >>> # In the given URL the 'test_package/' is available\n    >>> add_remote_repo(['test_package'], 'http://localhost:8000/') #  \n    >>> import test_package\n    >>>\n    >>> remove_remote_repo('http://localhost:8000/')\n    >>> import test_package.module1\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    ImportError: No module named module1\n\nThe ``remote_repo()`` context\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n*Adding* and *removing* Remote Repos can be a pain, *specially* if there\nare packages that are available in **more than one** repos. So the\n``with`` keyword does the trick again:\n\n.. code:: python\n\n    >>> from httpimport import remote_repo\n    >>>\n    >>>\n    >>> with remote_repo(['test_package'], 'http://localhost:8000/') :\n    ...     from test_package import module1\n    ...\n    >>>\n    >>> from test_package import module2\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    ImportError: cannot import name module2\n\n    >>> module1.dummy_str\n    'Constant Loaded'\n    >>> module1.dummy_func\n    <function dummy_func at 0x7f7a8a170410>\n\nThe Tiny Test for your amusement\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``test.py`` file contains a minimal test. Try changing working\ndirectories and package names and see what happens...\n\n.. code:: bash\n\n    $ python test.py\n    serving at port 8000\n    127.0.0.1 - - [22/Aug/2017 17:36:44] code 404, message File not found\n    127.0.0.1 - - [22/Aug/2017 17:36:44] \"GET /test_package/module1/__init__.py HTTP/1.1\" 404 -\n    127.0.0.1 - - [22/Aug/2017 17:36:44] \"GET /test_package/module1.py HTTP/1.1\" 200 -\n    Constant Loaded\n    Function Loaded\n    Class and method loaded\n\nThe *Github* Use Case!\n----------------------\n\nSuch HTTP Servers (serving Python packages in a *directory structured\nway*) can be found in the wild, not only created with\n``SimpleHTTPServer``. **Github repos can serve as Python HTTPS Repos as\nwell!!!**\n\nHere is an example with my beloved ``covertutils`` project:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    >>>\n    >>> import covertutils\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    ImportError: No module named covertutils\n    >>> # covertutils is not available through normal import!\n    >>>\n    >>> covertutils_url = 'https://raw.githubusercontent.com/operatorequals/covertutils/master/'\n    >>>\n    >>> from httpimport import remote_repo\n    >>>\n    >>> with remote_repo(['covertutils'], covertutils_url) :\n    ...     import covertutils\n    ...\n    >>> print covertutils.__author__\n    John Torakis - operatorequals\n\nThe **dedicated** ``github_repo()`` context:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    >>> from httpimport import github_repo\n    >>> with github_repo( 'operatorequals', 'covertutils', ) :\n    ...     import covertutils\n    ...\n    >>> covertutils.__author__\n    'John Torakis - operatorequals'\n    >>>\n\nWhat about branches?\n^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    >>> from httpimport import github_repo\n    >>> with github_repo( 'operatorequals', 'covertutils', branch='py3_compatibility' ) :\n    ...     import covertutils\n    ...\n    >>> covertutils.__author__\n    'John Torakis - operatorequals'\n    >>>\n\nAnd ad-hoc commits too?\n^^^^^^^^^^^^^^^^^^^^^^^\n\nWhat if you need to stick to a fixed -*known to work*- commit?\n\n.. code:: python\n\n    >>> from httpimport import github_repo\n    >>> with github_repo( 'operatorequals', 'covertutils', commit='cf3f78c77c437edf2c291bd5b4ed27e0a93e6a77' ) :\n    ...     import covertutils\n    ...\n    >>> covertutils.__author__\n    'John Torakis - operatorequals'\n    >>>\n\nThe newer sibling ``bitbucket_repo()`` (as of ``0.5.9``)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    >>> with bitbucket_repo('atlassian', 'python-bitbucket', module='pybitbucket'):\n    ...     import pybitbucket\n    ...\n    >>>\n\nRecursive Dependencies\n----------------------\n\nIf package ``A`` requires module ``B`` and ``A`` exists in\n``http://example.com/a_repo/``, while ``B`` exists in\n``http://example.com/b_repo/``, then ``A`` can be imported using the\nfollowing technique:\n\n.. code:: python\n\n    >>> from httpimport import remote_repo\n    >>> with remote_repo(['B'],\"http://example.com/b_repo/\") :\n    ...     with remote_repo(['A'],\"http://example.com/a_repo/\") :\n    ...             import A\n    ... \n    [!] 'B' not found in HTTP repository. Moving to next Finder.\n    >>> \n    >>> A\n    <module 'A' from 'http://example.com/a_repo/A/__init__.py'>\n    >>> B\n    <module 'B' from 'http://example.com/a_repo/B.py'>\n    >>> \n\nAny combination of *packages* and *modules* can be imported this way!\n\n*The ``[!]`` Warning was emitted by the ``HttpImporter`` object created\nfor ``A``, as it couldn't locate ``B``, and passed control to the next\n``Finder`` object, that happened to be the ``HttpImporter`` object\ncreated for ``B``!*\n\nThe ``load()`` function (as of ``0.5.10``)\n------------------------------------------\n\nThe ``load()`` function was added to make module loading possible\nwithout ``Namespace`` pollution.\n\n.. code:: python\n\n    >>> import httpimport\n    >>> pack1 = httpimport.load('random-package','http://localhost:8000/')\n    >>> pack1\n    <module 'random-package' from 'http://localhost:8000//random-package/__init__.py'>\n    >>>\n    >>> # Trying to load 'os' module from the URL will fail, as it won't delegate to to other Finders/Loaders.\n    >>> httpimport.load('os','http://localhost:8000/')\n    [!] 'non-existent-package' not found in HTTP repository. Moving to next Finder.\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"httpimport.py\", line 287, in load\n        raise ImportError(\"Module '%s' cannot be imported from '%s'\" % (module_name, url) )\n    ImportError: Module 'os' cannot be imported from 'http://localhost:8000/'\n\nAnd no data touches the disk, nor any virtual environment. The import happens just to the running Python process!\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nLife suddenly got simpler for Python module testing!!!\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nImagine the breeze of testing *Pull Requests* and packages that you\naren't sure they will work for you!\n\nDebugging...\n------------\n\n.. code:: python\n\n    >>> from httpimport import *\n    >>>\n    >>> import logging\n    >>> logging.getLogger('httpimport').setLevel(logging.DEBUG)\n    >>>\n    >>> with github_repo('operatorequals','covertutils') :\n    ...     import covertutils\n    ...\n    FINDER=================\n    [!] Searching covertutils\n    [!] Path is None\n    [@] Checking if connection is HTTPS secure >\n    [@] Checking if in declared remote module names >\n    [@] Checking if built-in >\n    [@] Checking if it is name repetition >\n    [*]Module/Package 'covertutils' can be loaded!\n    LOADER=================\n    [+] Loading covertutils\n    [+] Trying to import as package from: 'https://raw.githubusercontent.com/operatorequals/covertutils/master//covertutils/__init__.py'\n    [+] Importing 'covertutils'\n    [+] Ready to execute 'covertutils' code\n    [+] 'covertutils' imported succesfully!\n    >>>\n\nBeware: **Huge Security Implications!**\n---------------------------------------\n\n*Using the ``httpimport`` with **HTTP URLs** is highly discouraged\noutside the ``localhost`` interface!*\n\nAs HTTP traffic isn't encrypted and/or integrity checked (*unlike\nHTTPS*), it is trivial for a remote attacker to intercept the HTTP\nresponses (via an *ARP MiTM* probably), and add arbitrary *Python* code\nto the downloaded *packages/modules*. This will directly result in\n*Remote Code Execution* to your current user's context! In other words,\nyou get **totally F\\*ed**...\n\nPreventing the disaster (setting ``httpimport.INSECURE`` flag):\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    >>> import httpimport\n    >>>\n    >>> # Importing from plain HTTP ...\n    >>> httpimport.load('test_module', 'http://localhost:8000//')\n    [!] Using non HTTPS URLs ('http://localhost:8000//') can be a security hazard!\n    [-] 'httpimport.INSECURE is not set! Aborting...\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"httpimport.py\", line 302, in load\n        raise ImportError(\"Module '%s' cannot be imported from URL: '%s'\" % (module_name, url) )\n    ImportError: Module 'test_module' cannot be imported from URL: 'http://localhost:8000/'\n    >>> # ... Throws Error!\n    >>>\n    >>> # Importing from plain HTTP has to be DELIBERATELY enabled!\n    >>> httpimport.INSECURE = True\n    >>> httpimport.load('test_module', 'http://localhost:8000//')\n    [!] Using non HTTPS URLs ('http://localhost:8000//') can be a security hazard!\n    <module 'test_module' from 'http://localhost:8000//test_module.py'>\n    >>> # Succeeded!\n\nYou have been warned! Use **HTTPS URLs** with ``httpimport``!\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDid I hear you say \"Staging protocol for `covertutils <https://github.com/operatorequals/covertutils>`__ backdoors\"?\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTechnique documentation on `using ``httpimport`` to stage\n``covertutils`` backdoor\ncode <http://covertutils.readthedocs.io/en/latest/staging_exec.html>`__,\nmaking *EXE packed* and *unreadable* code load *non-included module\ndependencies*.\n\n.. |PyPI version| image:: https://badge.fury.io/py/httpimport.svg\n   :target: https://pypi.python.org/pypi/httpimport\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/operatorequals/httpimport",
    "keywords": "import",
    "license": "Apache2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "httpimport",
    "platform": "",
    "project_url": "https://pypi.org/project/httpimport/",
    "release_url": "https://pypi.org/project/httpimport/0.5.15/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Module for remote in-memory Python package/module loading through HTTP",
    "version": "0.5.15"
  },
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c9e697df58c35347294b2f950d876e26",
          "sha256": "2eabb2994bd6313774a5fbdd0521148435f0aa86cd7c2a3f03f8c66ed477eb89"
        },
        "downloads": -1,
        "filename": "httpimport-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c9e697df58c35347294b2f950d876e26",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2749,
        "upload_time": "2017-08-25T09:54:07",
        "url": "https://files.pythonhosted.org/packages/b7/24/60a8bc195455bfc2e8458d8718a517ed14b61b10e96e64a3f4f73ef3a06e/httpimport-0.5.0.tar.gz"
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "33f8aefd62e523ede84108387ec7d7e1",
          "sha256": "d60a7ee84ea1ecd021e7da64aa798e1225a8f38b4848ef2624eb55c7fa9d9adf"
        },
        "downloads": -1,
        "filename": "httpimport-0.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "33f8aefd62e523ede84108387ec7d7e1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3424,
        "upload_time": "2017-08-25T10:28:48",
        "url": "https://files.pythonhosted.org/packages/a9/b4/43279b334a3fb27af1dd6096de6f3eae4d6114033f8fc6ae99d599a5fdd8/httpimport-0.5.1.tar.gz"
      }
    ],
    "0.5.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "23dadc66c69ccc87fbdbbc8b316a85a3",
          "sha256": "9ab849b75b57921f3828cddf5dc13796d8e672e071aaa9a38d3acaa6d3cc5168"
        },
        "downloads": -1,
        "filename": "httpimport-0.5.10.tar.gz",
        "has_sig": false,
        "md5_digest": "23dadc66c69ccc87fbdbbc8b316a85a3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4171,
        "upload_time": "2018-01-16T05:25:20",
        "url": "https://files.pythonhosted.org/packages/28/68/b2419b749452ee220e1dbe213b673ee1ff1e7730b89037adab5e4c3eedc2/httpimport-0.5.10.tar.gz"
      }
    ],
    "0.5.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e22700f388b9e5c766d3234635cd30d4",
          "sha256": "36127218fc4386956b88ed8332283a07a5cf5822f7360ec2ea63b371328709d8"
        },
        "downloads": -1,
        "filename": "httpimport-0.5.11.tar.gz",
        "has_sig": false,
        "md5_digest": "e22700f388b9e5c766d3234635cd30d4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8103,
        "upload_time": "2018-01-16T05:43:15",
        "url": "https://files.pythonhosted.org/packages/54/3f/1e62e96498a4e8fafd9c72934788f07a7c5af50fab9491a378e142df58c9/httpimport-0.5.11.tar.gz"
      }
    ],
    "0.5.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7bafe6ed5a3b8ec1d396ee1b3ebaeae2",
          "sha256": "a9f4b3a343a43f8c0ca6ab4797565a06f5fd62e05c1b29ee176e0cf605404457"
        },
        "downloads": -1,
        "filename": "httpimport-0.5.12.tar.gz",
        "has_sig": false,
        "md5_digest": "7bafe6ed5a3b8ec1d396ee1b3ebaeae2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9306,
        "upload_time": "2018-01-16T07:03:19",
        "url": "https://files.pythonhosted.org/packages/56/2b/765894c98e93d3b614d64740902b3a61b1ded3dc95b4d9b591befe658545/httpimport-0.5.12.tar.gz"
      }
    ],
    "0.5.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8b924473511d6d44744491a91044b9ff",
          "sha256": "305ee0f00792077a97e7c0b6842a1995f2acda2b3047b9d68afca00ec4be89e4"
        },
        "downloads": -1,
        "filename": "httpimport-0.5.13.tar.gz",
        "has_sig": false,
        "md5_digest": "8b924473511d6d44744491a91044b9ff",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8495,
        "upload_time": "2018-01-16T08:45:18",
        "url": "https://files.pythonhosted.org/packages/13/58/5f47e211b9c3a838d8d2731719478d576ef99aa079bcfccad5048737ec8d/httpimport-0.5.13.tar.gz"
      }
    ],
    "0.5.14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a19f297602a8443ee236a878602a637b",
          "sha256": "0a573b6b170ff8c596323598e82f44d5ca95b354b64b322860d9d6ee1dbd7414"
        },
        "downloads": -1,
        "filename": "httpimport-0.5.14.tar.gz",
        "has_sig": false,
        "md5_digest": "a19f297602a8443ee236a878602a637b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8579,
        "upload_time": "2018-01-28T07:31:28",
        "url": "https://files.pythonhosted.org/packages/2c/be/c6742446a7c1a8fad69753b26972dfd429b8f81d7d1952a10101d304cb9b/httpimport-0.5.14.tar.gz"
      }
    ],
    "0.5.15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1c132df2ef6813224763408c6a60266a",
          "sha256": "3eff90ab815f12c6946b2b3481e248d8d628f24eb4201506e6efb07aa149eb2d"
        },
        "downloads": -1,
        "filename": "httpimport-0.5.15.tar.gz",
        "has_sig": false,
        "md5_digest": "1c132df2ef6813224763408c6a60266a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8579,
        "upload_time": "2018-01-28T07:48:40",
        "url": "https://files.pythonhosted.org/packages/5a/8a/e8febba7431d32290cbd6352e0794f72bf558a327b5327798019a2b3a0f0/httpimport-0.5.15.tar.gz"
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d238ce74a63bf7446ef3545036e900c7",
          "sha256": "e3bf4151737d297ceaefbe4f44aa77a85aaa879dcb8a141312777e49341a1d34"
        },
        "downloads": -1,
        "filename": "httpimport-0.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "d238ce74a63bf7446ef3545036e900c7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3437,
        "upload_time": "2017-09-18T12:43:49",
        "url": "https://files.pythonhosted.org/packages/51/8f/a631320d8b1d3130282ee1d3e60dbbbe8d2a67dea9523060197319d4fe6f/httpimport-0.5.2.tar.gz"
      }
    ],
    "0.5.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "07755ae82b1fcb5d69ba921309fb7963",
          "sha256": "897fd8fc735326349b9180edef530933e16e8c58878336c4b7acaffa1fb1390b"
        },
        "downloads": -1,
        "filename": "httpimport-0.5.9.tar.gz",
        "has_sig": false,
        "md5_digest": "07755ae82b1fcb5d69ba921309fb7963",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3968,
        "upload_time": "2017-12-20T22:27:33",
        "url": "https://files.pythonhosted.org/packages/d4/b6/aee55c6720be85eef50089914e52034abe3ffa496d4a2a8a5df9d0d7ba84/httpimport-0.5.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1c132df2ef6813224763408c6a60266a",
        "sha256": "3eff90ab815f12c6946b2b3481e248d8d628f24eb4201506e6efb07aa149eb2d"
      },
      "downloads": -1,
      "filename": "httpimport-0.5.15.tar.gz",
      "has_sig": false,
      "md5_digest": "1c132df2ef6813224763408c6a60266a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8579,
      "upload_time": "2018-01-28T07:48:40",
      "url": "https://files.pythonhosted.org/packages/5a/8a/e8febba7431d32290cbd6352e0794f72bf558a327b5327798019a2b3a0f0/httpimport-0.5.15.tar.gz"
    }
  ]
}