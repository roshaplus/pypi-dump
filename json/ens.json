{
  "info": {
    "author": "Jason Carver",
    "author_email": "ut96caarrs@snkmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Database :: Front-Ends",
      "Topic :: Internet :: Finger",
      "Topic :: Internet :: Name Service (DNS)",
      "Topic :: Security :: Cryptography",
      "Topic :: System :: Distributed Computing",
      "Topic :: System :: Systems Administration :: Authentication/Directory",
      "Topic :: Utilities"
    ],
    "description": "\n## Ethereum Name Service via Python\n\nAccess the Ethereum Name Service using this python library. Note: **this is a work in progress**\n\nUsing this library is not a way to skip learning how ENS works. A small misunderstanding can cause\nyou to lose **all** your deposit. Go read about it first. Your funds are your responsibility.\n\n#### Alpha-quality warning\n\nThis is a preview for developers, and an invitation for contributions. Please do not use this in\nproduction until this warning is removed, especially when putting funds at risk. Examples of funds\nbeing at risk include: sending ether/tokens to resolved addresses and participating in name\nauctions.\n\nThe [nameprep algorithm](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-137.md#name-syntax)\nis not well tested, please be cautious and double-check the result through another channel. If you\nsupply the name in `bytes`, it will be assumed to be UTF-8 encoded, like in\n[Ethereum contracts](https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#argument-encoding).\nCurrently, several of the convenience methods only split on '.' and not other similar dot\ncharacters, as defined in ut-46.\n\n\n#### Look up information\n\nGet a name, defaulting to .eth:\n\n```\nfrom ens import ens\n\n\n# look up the hex representation of the address for a name\n\neth_address = ens.resolve('jasoncarver.eth')\n\n\n# ens.py will assume you want a .eth name if you don't specify a full name\n\nassert ens.resolve('jasoncarver') == eth_address\n```\n\n\nFind the name for an address:\n\n```\ndomain = ens.reverse('0xfdb33f8ac7ce72d7d4795dd8610e323b4c122fbb')\n\n\n# reverse() also accepts the bytes version of the address\n\nassert ens.reverse(b'\\xfd\\xb3?\\x8a\\xc7\\xcer\\xd7\\xd4y]\\xd8a\\x0e2;L\\x12/\\xbb') == domain\n\n\n# confirm that the name resolves back to the address that you looked up:\n\nassert ens.resolve(domain) == '0xfdb33f8ac7ce72d7d4795dd8610e323b4c122fbb'\n```\n\n\nFind the owner of a name:\n\n```\neth_address = ens.owner('exchange.eth')\n```\n\n#### Auctions for names ending in .eth\n\nLook up auction status for the domain 'payment.eth':\n\n```\nfrom ens.registrar import Status\n\n\nstatus = ens.registrar.status('payment')\n\n\n# if you forget to strip out .eth, ens.py will do it for you\n\nassert ens.registrar.status('payment.eth') == status\n\n\n# these are the possible statuses\n\nassert status in (\n  Status.Open,\n  Status.Auction,\n  Status.Owned,\n  Status.Forbidden,\n  Status.Reveal,\n  Status.NotYetAvailable\n  )\n\n\n# if you get the integer status from another source, you can compare it directly\n\nassert Status.Owned == 2\n```\n\nStart auctions:\n\n```\n# start one auction (which tips people off that you're interested)\n\nens.registrar.start('you_saw_him_repressin_me_didnt_ya')\n\n\n# start many auctions (which provides a bit of cover)\n\nens.registrar.start(['exchange', 'tickets', 'payment', 'trading', 'registry'])\n```\n\nBid on a name:\n\n```\nfrom web3utils import web3\n\nens.registrar.bid('trading', web3.toWei('5211', 'ether'),  \"I promise I will not forget my secret\",\n                  transact={'from': web3.eth.accounts[0]})\n```\n\nReveal your bid on a name:\n\n```\nens.registrar.reveal('registry', web3.toWei('0.01', 'ether'), \"For real, though: losing your secret means losing ether\",\n                     transact={'from': web3.eth.accounts[0]})\n```\n\nFinalize an auction that you won:\n\n```\nens.registrar.finalize('gambling')\n```\n\nGet various auction details:\n\n```\nentries = ens.registrar.entries('ethfinex')\n\n# confirm the auction is closed\nassert entries[0] == Status.Owned\n\n# find out the owner of the name\nassert entries[1].owner() == '0x9a02ed4ca9ad55b75ff9a05debb36d5eb382e184'\n\n# when was the auction completed? (a datetime object)\nassert str(entries[2]) == '2017-06-05 08:10:03+00:00'\n\n# how much is held on deposit?\n\nfrom decimal import Decimal\n\nassert web3.fromWei(entries[3], 'ether') == Decimal('0.01')\n\n# what was the highest bid?\nassert web3.fromWei(entries[4], 'ether') == Decimal('201709.02')\n```\n\n\n#### Developer Setup\n\n```\nvirtualenv -p python3 venv\n. venv/bin/activate\npip install -e .\npip install -r requirements-dev.txt\n```\n\n#### FAQ\n\n*Why might the owner be different than the resolved name?*\n\nThe owner is like an administrator for the name, and the administrator might direct it elsewhere.\nThis might even be common for anything other than personal addresses.\n\n*Why does ens require python 3?*\n\nBecause [web3utils requires python 3](https://github.com/carver/web3utils.py#why-is-python-3-required). Plus, Ethereum is brand new. You shouldn't have any legacy\ncode that requires you to use a ~10-year-old python version.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/carver/ens.py",
    "keywords": "ethereum eth web3 web3.py ENS web3utils",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ens",
    "platform": "",
    "project_url": "https://pypi.org/project/ens/",
    "release_url": "https://pypi.org/project/ens/0.0.1/",
    "requires_dist": [
      "web3utils (<1)",
      "pytz"
    ],
    "requires_python": ">=3.5",
    "summary": "Ethereum Name Service, made easy in Python",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "14a96c355267ec811f37b5796d171628",
          "sha256": "24c5c61dfabda233fbfdd4f005bec4ad247626a6c936b49ac91c853adad86165"
        },
        "downloads": 0,
        "filename": "ens-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14a96c355267ec811f37b5796d171628",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 11954,
        "upload_time": "2017-07-24T00:26:16",
        "url": "https://files.pythonhosted.org/packages/c8/82/a3773f89ac3978ecddfb5e1674727111fdccac78c586acfd6c324299a3dd/ens-0.0.1-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "14a96c355267ec811f37b5796d171628",
        "sha256": "24c5c61dfabda233fbfdd4f005bec4ad247626a6c936b49ac91c853adad86165"
      },
      "downloads": 0,
      "filename": "ens-0.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "14a96c355267ec811f37b5796d171628",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 11954,
      "upload_time": "2017-07-24T00:26:16",
      "url": "https://files.pythonhosted.org/packages/c8/82/a3773f89ac3978ecddfb5e1674727111fdccac78c586acfd6c324299a3dd/ens-0.0.1-py3-none-any.whl"
    }
  ]
}