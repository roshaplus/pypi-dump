{
  "info": {
    "author": "Jason Carver",
    "author_email": "ut96caarrs@snkmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Database :: Front-Ends",
      "Topic :: Internet :: Finger",
      "Topic :: Internet :: Name Service (DNS)",
      "Topic :: Security :: Cryptography",
      "Topic :: System :: Distributed Computing",
      "Topic :: System :: Systems Administration :: Authentication/Directory",
      "Topic :: Utilities"
    ],
    "description": "\n# Ethereum Name Service via Python\n\n[![Join the chat at https://gitter.im/ens-py/Lobby](https://badges.gitter.im/ens-py/Lobby.svg)](https://gitter.im/ens-py/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nAccess the Ethereum Name Service using this python library. Note: **this is a work in progress**\n\nUsing this library is not a way to skip learning how ENS works. If you are registering a name, a\nsmall misunderstanding can cause you to lose **all** your deposit.\nGo [read about ENS](http://docs.ens.domains/en/latest/userguide.html) first.\nYour funds are your responsibility.\n\n## Alpha-quality warning\n\nThis is a preview for developers, and an invitation for contributions. Please do not use this in\nproduction until this warning is removed, especially when putting funds at risk. Examples of funds\nbeing at risk include: sending ether/tokens to resolved addresses and participating in name\nauctions.\n\nThe [nameprep algorithm](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-137.md#name-syntax)\nimplementation is not well tested, please be cautious and double-check the result through another\nchannel. If you supply the name in `bytes`, it will be assumed to be UTF-8 encoded, like in\n[Ethereum contracts](https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#argument-encoding).\nCurrently, several of the convenience methods only split on '.' -- instead, UT-46 says that several\nother dot characters should be split, too.\n\n\n## Setup\n\n```\npip install ens\n```\n\nAny issues? See [Setup details](#setup-details)\n\n## Usage\n\nAll examples in Python 3\n\n### Name info\n\n#### Get address from name\n\nDefault to {name}.eth:\n\n```\nfrom ens import ens\n\n\n# look up the hex representation of the address for a name\n\neth_address = ens.address('jasoncarver.eth')\n\nassert eth_address == '0x5b2063246f2191f18f2675cedb8b28102e957458'\n\n\n# ens.py will assume you want a .eth name if you don't specify a full name\n\nassert ens.address('jasoncarver') == eth_address\n```\n\n#### Get name from address\n\n```\ndomain = ens.name('0x5b2063246f2191f18f2675cedb8b28102e957458')\n\n\n# reverse() also accepts the bytes version of the address\n\nassert ens.name(b'[ c$o!\\x91\\xf1\\x8f&u\\xce\\xdb\\x8b(\\x10.\\x95tX') == domain\n\n\n# confirm that the name resolves back to the address that you looked up:\n\nassert ens.address(domain) == '0x5b2063246f2191f18f2675cedb8b28102e957458'\n```\n\n#### Get owner of name\n\n```\neth_address = ens.owner('exchange.eth')\n```\n\n### Auctions for names ending in .eth\n\n#### Get auction status\n\nExample with domain 'payment.eth':\n\n```\nfrom ens.registrar import Status\n\n\nstatus = ens.registrar.status('payment')\n\n\n# if you forget to strip out .eth, ens.py will do it for you\n\nassert ens.registrar.status('payment.eth') == status\n\n\n# these are the possible statuses\n\nassert status in (\n  Status.Open,\n  Status.Auctioning,\n  Status.Owned,\n  Status.Forbidden,\n  Status.Revealing,\n  Status.NotYetAvailable\n  )\n\n\n# if you get the integer status from another source, you can compare it directly\n\nassert Status.Owned == 2\n```\n\n#### Start auctions\n\n```\n# start one auction (which tips people off that you're interested)\n\nens.registrar.start('you_saw_him_repressin_me_didnt_ya')\n\n\n# start many auctions (which provides a bit of cover)\n\nens.registrar.start(['exchange', 'tickets', 'payment', 'trading', 'registry'])\n```\n\n#### Bid on auction\n\nBid on a 'trading.eth' with 5211 ETH, and secret \"I promise I will not forget my secret\":\n\n```\nfrom web3utils import web3\n\nens.registrar.bid(\n      'trading',\n      web3.toWei('5211', 'ether'),\n      \"I promise I will not forget my secret\",\n      transact={'from': web3.eth.accounts[0]}\n      )\n```\n(if you want to \"mask\" your bid, set a higher value in the transact dict)\n\n#### Reveal your bid\n\nYou must **always** reveal your bid, whether you won or lost.\nOtherwise you will lose the full deposit.\n\nExample of revealing your bid on 'registry.eth' with 0.01 ETH, and secret\n\"For real, though: losing your secret means losing ether\":\n\n```\nens.registrar.reveal(\n      'registry',\n      web3.toWei('0.01', 'ether'),\n      \"For real, though: losing your secret means losing ether\",\n      transact={'from': web3.eth.accounts[0]}\n      )\n```\n\n#### Claim the name you won\n\naka \"Finalize\" auction, which makes you the owner in ENS.\n\n```\nens.registrar.finalize('gambling')\n```\n\n#### Get detailed information on an auction\n\naka \"entries\" for an auction\n\n```\nentries = ens.registrar.entries('ethfinex')\n\n\n# confirm the auction is closed\n\nassert entries[0] == Status.Owned\n\n\n# find out the owner of the auction Deed --\nsee [docs on the difference](http://docs.ens.domains/en/latest/userguide.html#managing-ownership)\nbetween owning the name and the deed\n\nassert entries[1].owner() == '0x9a02ed4ca9ad55b75ff9a05debb36d5eb382e184'\n\n\n# when was the auction completed? (a timezone-aware datetime object)\n\nassert str(entries[2]) == '2017-06-05 08:10:03+00:00'\n\n\n# how much is held on deposit?\n\nfrom decimal import Decimal\n\nassert web3.fromWei(entries[3], 'ether') == Decimal('0.01')\n\n\n# what was the highest bid?\n\nassert web3.fromWei(entries[4], 'ether') == Decimal('201709.02')\n```\n\n## Setup details\n\n### If Python 2 is your default, or you're not sure\n\nIn your shell\n```\nif pip --version | grep \"python 2\"; then\n  python3 -m venv ~/.py3venv\n  source ~/.py3venv/bin/activate\nfi\n```\n\n### Now, with Python 3\n\nIn your shell: `pip install ens`\n\n*ens.py* requires an up-to-date Ethereum blockchain, preferably local. If your setup isn't working,\ntry running `geth --fast` until it's fully-synced. I highly recommend using the default IPC\ncommunication method, for speed and security.\n\n### \"No matching distribution found for ens\"\n\nIf you are seeing something like:\n```\nCollecting ens\n  Could not find a version that satisfies the requirement ens (from versions: )\nNo matching distribution found for ens\n```\n\nThen retry the first Setup section, to make sure you're in Python 3\n\n### Optionally, a custom web3 provider\n\nIn Python:\n\n```\nfrom ens import ENS\nfrom web3utils import web3\nfrom web3 import IPCProvider \n\nweb3.setProvider(IPCProvider('/your/custom/ipc/path'))\n\nens = ENS(web3)\n```\n\n\n\n## Developer Setup\n\n```\ngit clone git@github.com:carver/ens.py.git\ncd ens.py/\n\npython3 -m venv venv\n. venv/bin/activate\n\npip install -e .\npip install -r requirements-dev.txt\n```\n\n### Why does ens.py require python 3?\n\nBecause [web3utils requires python 3](https://github.com/carver/web3utils.py#why-is-python-3-required).\nPlus, Ethereum is brand new. You shouldn't have any legacy\ncode that requires you to use a ~10-year-old python version.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/carver/ens.py",
    "keywords": "ethereum eth web3 web3.py ENS web3utils",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ens",
    "platform": "",
    "project_url": "https://pypi.org/project/ens/",
    "release_url": "https://pypi.org/project/ens/0.3.0/",
    "requires_dist": [
      "web3utils (<1)",
      "pytz"
    ],
    "requires_python": ">=3.5",
    "summary": "Ethereum Name Service, made easy in Python",
    "version": "0.3.0"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "14a96c355267ec811f37b5796d171628",
          "sha256": "24c5c61dfabda233fbfdd4f005bec4ad247626a6c936b49ac91c853adad86165"
        },
        "downloads": 0,
        "filename": "ens-0.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "14a96c355267ec811f37b5796d171628",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 11954,
        "upload_time": "2017-07-24T00:26:16",
        "url": "https://files.pythonhosted.org/packages/c8/82/a3773f89ac3978ecddfb5e1674727111fdccac78c586acfd6c324299a3dd/ens-0.0.1-py3-none-any.whl"
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f4eabbb8a65d103e743c403df0d23dae",
          "sha256": "cb67fab3321f8c98ac2e3639a57aaf2a803a6481830f1a5ed4d3df4a1a4a115d"
        },
        "downloads": 0,
        "filename": "ens-0.1.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "f4eabbb8a65d103e743c403df0d23dae",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 12692,
        "upload_time": "2017-07-24T19:31:47",
        "url": "https://files.pythonhosted.org/packages/6a/ee/9e652de3c7f1de9b04fb45dcbac6644c664a163255176f58dd1842d85cb1/ens-0.1.0-py2-none-any.whl"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1aa02e513a5976834d758ef2d125a7a5",
          "sha256": "6a05aadf3d3accb081829fd5794e9dd53ac9756b633f1252f7cf5faecf5ae938"
        },
        "downloads": 0,
        "filename": "ens-0.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1aa02e513a5976834d758ef2d125a7a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 13641,
        "upload_time": "2017-07-25T18:13:13",
        "url": "https://files.pythonhosted.org/packages/90/e9/b6d5814ffaf719ea2b212d9d89feb50e22e38fa4d5ba2f22aa50cd55a01c/ens-0.2.0-py3-none-any.whl"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b642d6881d1dcf4062c79671a107152e",
          "sha256": "7d95b41c242e3312133fe6ce3ace622b1033e71ba1f435bed3188443548ae992"
        },
        "downloads": 0,
        "filename": "ens-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b642d6881d1dcf4062c79671a107152e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 13659,
        "upload_time": "2017-07-25T18:32:01",
        "url": "https://files.pythonhosted.org/packages/ac/da/ede07a91d948e07e3d34f678fbcb4f07c6b1a10b9bee111f6312612dc6c4/ens-0.3.0-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b642d6881d1dcf4062c79671a107152e",
        "sha256": "7d95b41c242e3312133fe6ce3ace622b1033e71ba1f435bed3188443548ae992"
      },
      "downloads": 0,
      "filename": "ens-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b642d6881d1dcf4062c79671a107152e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 13659,
      "upload_time": "2017-07-25T18:32:01",
      "url": "https://files.pythonhosted.org/packages/ac/da/ede07a91d948e07e3d34f678fbcb4f07c6b1a10b9bee111f6312612dc6c4/ens-0.3.0-py3-none-any.whl"
    }
  ]
}