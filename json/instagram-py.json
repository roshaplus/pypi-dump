{
  "info": {
    "author": "DeathSec",
    "author_email": "antonyjr@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.6",
      "Topic :: Utilities"
    ],
    "description": "==============\r\n Instagram-Py \r\n==============\r\n\r\n    | Instagram-py performs slick brute force attack on Instagram without any type of password limiting\r\n    | and also resumes your attack in ease. \r\n    \r\n    --DeathSec\r\n\r\n\r\n.. image:: https://img.shields.io/github/issues/deathsec/instagram-py.svg?style=flat-square   \r\n      :target: https://github.com/deathsec/instagram-py/issues\r\n\r\n.. image:: https://img.shields.io/github/forks/deathsec/instagram-py.svg?style=flat-square   \r\n      :target: https://github.com/deathsec/instagram-py/network\r\n      \r\n.. image:: https://img.shields.io/github/stars/deathsec/instagram-py.svg?style=flat-square\r\n      :target: https://github.com/deathsec/instagram-py/stargazers\r\n\r\n.. image:: https://img.shields.io/badge/license-MIT-blue.svg?style=flat-square   \r\n      :target: https://raw.githubusercontent.com/deathsec/instagram-py/master/LICENSE\r\n\r\n.. image:: https://img.shields.io/pypi/v/instagram-py.svg?style=flat-square\r\n      :target: #\r\n\r\n\r\n\r\n  \r\n.. image:: https://raw.githubusercontent.com/deathsec/instagram-py/master/preview.gif\r\n\r\n.. image:: http://forthebadge.com/images/badges/built-with-love.svg\r\n      :target: #\r\n.. image:: http://forthebadge.com/images/badges/60-percent-of-the-time-works-every-time.svg\r\n      :target: #\r\n      \r\n.. image:: http://forthebadge.com/images/badges/made-with-python.svg\r\n      :target: #\r\n      \r\n\r\n      \r\n-------\r\n Why?\r\n-------\r\n\r\n| **I Actually** started this **project** for **proof of concept** that we can brute force **Instagram** forever.\r\n| When I created the prototype and posted on **Twitter** , I got a **lot of people** who wanted a simple slick tool to execute \r\n| brute force attack on **Instagram** , So I thought why reinvent the wheel?....\r\n| So I searched **Github** and found nothing worth value , some were fake or poorly engineered!\r\n| And here it is **a Authentic brute force tool for Instagram**\r\n\r\n\r\n------\r\n How?\r\n------\r\n\r\n| We use , **tor** to change our ip once blocked for many tries and continue attack.\r\n| Since the official api is not a hacker wants, So we use the **InstagramAPK signature** to stay **anonymous!**\r\n| And we also **save** the **progress** so that even in network interuption we can avoid breaking the computer!\r\n\r\n **See the 'Algorimthm' section down below for more hackery!**\r\n\r\n-------\r\n What?\r\n-------\r\n\r\n| **Instagram-Py** is a simple python script to perform basic **brute force** attack against **Instagram** ,   \r\n| this script can **bypass** login limiting on wrong passwords ,  so basically it can test **infinite number of passwords**.\r\n| Instagram-Py is **proved** and can test **over 6M** passwords on a single instagram account with **less resource** as possible\r\n| This script mimics the activities of the official **instagram android app** and sends request over **tor** so you are secure ,\r\n| but if your **tor** installation is **misconfigured** then the blame is on you.\r\n\r\n\r\n\r\n**Depends on**: python3 , tor ,  requests , requests[socks] , stem\r\n\r\n==============\r\n Installation\r\n==============\r\n\r\n-------------------------------\r\n using pip to get Instagram-py\r\n-------------------------------\r\n\r\n**Make sure you have got the latest version of pip(>= 9.0 and python(>= 3.6)**\r\n\r\n::\r\n\r\n $ sudo easy_install3 -U pip # you have to install python3-setuptools , update pip\r\n $ sudo pip3 install requests --upgrade\r\n $ sudo pip3 install requests[socks]\r\n $ sudo pip3 install stem\r\n $ sudo pip3 install instagram-py\r\n $ instagram-py # installed successfully\r\n $ # Now lets copy the config file to your hard drive!\r\n $ wget -O ~/instapy-config.json \"https://git.io/v5DGy\"\r\n\r\n--------------------------------\r\n    Configuring Instagram-Py\r\n--------------------------------\r\n\r\nOpen your configuration file found in your home directory , this file is **very important**\r\nlocated at **~/instapy-config.json** , do not change anything except tor configuration\r\n\r\n::\r\n\r\n $ vim ~/instapy-config.json # open it with your favorite text editior!\r\n\r\n**The configuration file looks like this**\r\n\r\n::\r\n\r\n {\r\n  \"api-url\" : \"https://i.instagram.com/api/v1/\",\r\n  \"user-agent\" : \"Instagram 10.26.0 Android (18/4.3; 320dp..... \",\r\n  \"ig-sig-key\" : \"4f8732eb9ba7d1c8e8897a75d6474d4eb3f5279137431b2aafb71fafe2abe178\",\r\n  \"ig-sig-version\" : \"4\",\r\n  \"tor\" : { \r\n     \"server\" : \"127.0.0.1\",\r\n     \"port\" : \"9050\",\r\n     \"protocol\" : \"socks5\",\r\n     \"control\" : {\r\n           \"password\" : \"\",\r\n           \"port\" : \"9051\"\r\n       }\r\n   }\r\n    \r\n }\r\n\r\n\r\n**api-url** : do not change this unless you know what you are doing\r\n\r\n**user-agent** : do not change this unless you know your stuff\r\n\r\n**ig-sig_key** : never change this unless new release, this is extracted from the instagram apk file\r\n\r\n**tor** : change everything according to your tor server configuration , do not mess up!\r\n\r\n--------------------------------------------------\r\n    Configuring Tor server to open control port\r\n--------------------------------------------------\r\n\r\nopen your **tor configuration** file usually located at **/etc/tor/torrc**\r\n\r\n\r\n::\r\n \r\n $ sudo vim /etc/tor/torrc # open it with your text editor\r\n \r\n\r\n**search** for the file for this **specific section**\r\n\r\n::\r\n\r\n ## The port on which Tor will listen for local connections from Tor\r\n ## controller applications, as documented in control-spec.txt.\r\n #ControlPort 9051\r\n \r\n**uncomment** 'ControlPort' by deleting the **#** before 'ControlPort' , **now save the file and restart your tor server**\r\n\r\n**now you are ready to crack any instagram account , make sure your tor configuration matched ~/instapy-config.json** \r\n\r\n=============\r\n    Usage\r\n=============\r\n\r\n**Finally** , now you can use instagram-py!\r\n\r\n::\r\n\r\n $ instagram-py your_account_username path_to_password_list\r\n\r\n\r\n===========\r\n Algorithm\r\n===========\r\n\r\n**Instagram-Py** uses a very simple algorimthm for checking passwords efficiently , this section is dedicated for those who\r\nwish to recreate this program in any other language.\r\n\r\n-------------\r\n What we do\r\n-------------\r\n\r\n**Step 1:** Get the magic cookie , which is used to verify device integrity!\r\n\r\nGetting the magic cookie is the simplest job , all we need to do is send a get request to **https://i.instagram.com/api/v1/si/fetch_headers/?challenge_type=signup&guid=** , where the **guid** get parameter is a random 32 character string.\r\nThe random 32 character string can be generator using python's simple **uuid library** , to be specific **v4** of **UUID**.\r\nSo finally we just have to request the url **https://i.instagram.com/api/v1/si/fetch_headers/?challenge_type=signup&guid=800e88b931bf491fa3b4a7afa4e679eb** and get the cookie named **csrftoken** , if we observe the **response header** we\r\ncould see that our cookie only **expires** next **year** the same day. So by this we only have to make this request once\r\nand can use it for a year! How vulnerable is that?... \r\n\r\n.. image:: https://raw.githubusercontent.com/deathsec/instagram-py/master/observations/cookies.png \r\n      :target: #\r\n\r\n\r\n**Step 2:** Build a post request with Instagram's signature.\r\n\r\nThis part is **simple** but may be difficult to setup , first i need to get instagram's signature\r\nwhich is only present in their free apk from google play , Remember our **Strength can be our Weakness**\r\n, All i have to do reverse engineer the apk and find the signature, lets call it **ig_sig**.\r\n\r\n::\r\n \r\n ig_sig = 4f8732eb9ba7d1c8e8897a75d6474d4eb3f5279137431b2aafb71fafe2abe178\r\n ig_version = 4\r\n\r\n**Instagram** uses **HMAC Authentication** for login stuff, so lets use python's **hmac library**.\r\nBut first we have to build our body which will be encoded in json for it to actually sign with \r\n**ig_sig** , So the post **body** looks likes this...\r\n\r\n\r\n::\r\n \r\n phone_id   = <RANDOM 32 CHARACTER STRING SEPERATED WITH - on EQUAL INTERVALS>\r\n _csrftoken = <THE MAGIC COOKIE THAT WE GOT!>\r\n username   = <TARGET ACCOUNT>\r\n guid       = <RANDOM 32 CHARACTER STRING SEPERATED WITH - on EQUAL INTERVALS>\r\n device_id  = android-<RANDOM 16 CHARACTER STRING>\r\n password   = <PASSWORD TO TRY>\r\n login_attempt_count = 0\r\n\r\n\r\nThe above will be encoded to **JSON** , So to test the password we have to post the data to this url\r\n**https://i.instagram.com/api/v1/accounts/login/ig_sig_key_version=4&signed_body=<SIGNED BODY>.<URL ENCODED JSON DATA>** .\r\n\r\n**<SIGNED BODY>:** using **HMAC** , sign our json encoded data with **ig_sig** and return a hexa value.\r\n\r\n**<URL ENCODED JSON DATA>:** the same data in json but we url encode so that it goes properly to insta!\r\n\r\nSo to test a account with username as **USERNAME** and password with **PASSWORD** we simply request this\r\nurl **https://i.instagram.com/api/v1/accounts/login/ig_sig_key_version=4&signed_body=bc90e1b7d430f39152e92b4e7d517bfb231dbe0515ed2071dc784cf876e301c3.%7B%22phone_id%22%3A%20%2232abb45c-f605-4fd7-9b5e-674115516b90%22%2C%20%22_csrftoken%22%3A%20%22PyMH2niVQrk41UIBW0lKilleG7GylluQ%22%2C%20%22username%22%3A%20%22USERNAME%22%2C%20%22guid%22%3A%20%2267ca220c-a9eb-4240-b173-2d253808904d%22%2C%20%22device_id%22%3A%20%22android-283abce46cb0a0bcef4%22%2C%20%22password%22%3A%20%22PASSWORD%22%2C%20%22login_attempt_count%22%3A%20%220%22%7D** \r\n\r\n**Take a look** how I did it... \r\n\r\n.. image:: https://raw.githubusercontent.com/deathsec/instagram-py/master/observations/login_create.png\r\n\r\n\r\n**Step 3:** With the json response and response code , we determine the password is correct or wrong.\r\n\r\nif **We get response 200** then the login is success but if we get **response 400** , We inspect the\r\n**json data** for clues if it is the **correct password or invalid request or too many tries**.\r\nSo we inspect the **message** from instagram json response!\r\n\r\n**Message = Challenge Required** , then the password is correct but instagram got some questions so\r\nwe must wait until the user logs in and answer the question and if we are lucky they will not change\r\nthe password and we could login in later(**Most of the time people won't change the password!**)\r\n\r\n**Message = The password you entered is incorrect.** , then the password is incorrect for sure , try\r\nanother.\r\n\r\n**Message as something like word invalid in it then** , some other error so just try again, can happen\r\nbecause of wordlist encoding error which i ignored because all the worldlist have encoding error!\r\n\r\n**Message = Too many tries** , Time to change our ip and loop but we don't want to change our magic cookie\r\n\r\n**Thats it you just hacked instagram with a very simple algorithm!**\r\n\r\n=============\r\n   License\r\n=============\r\n\r\nThe MIT License,\r\n\r\nCopyright (C) 2017 The Future Shell , DeathSec\r\n",
    "docs_url": null,
    "download_url": "https://github.com/deathsec/instagram-py/archive/v1.3.3.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/DeathSec/Instagram-Py",
    "keywords": "cli",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "instagram-py",
    "platform": "",
    "project_url": "https://pypi.org/project/instagram-py/",
    "release_url": "https://pypi.org/project/instagram-py/1.3.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Slick Instagram brute force command line tool writen in python.",
    "version": "1.3.3"
  },
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "66d33a482c1204e1e837a60c90226bfe",
          "sha256": "c43a03d6a77f5b95a822b39cd04a8dfa4bd2096b7cb4362f52f6d2e80eb587bf"
        },
        "downloads": -1,
        "filename": "instagram-py-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "66d33a482c1204e1e837a60c90226bfe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15744,
        "upload_time": "2017-09-12T13:32:51",
        "url": "https://files.pythonhosted.org/packages/98/c7/f5e9cd1124da5f632001861f2ae35b35220e923a9890197842413958d682/instagram-py-0.2.1.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "09989a54d23908ad86bed3462713df38",
          "sha256": "424a55cd66754607ccae2ee0cd63c60961ab8829a112445ef7c2410f1f2ee452"
        },
        "downloads": -1,
        "filename": "instagram-py-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "09989a54d23908ad86bed3462713df38",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15805,
        "upload_time": "2017-09-12T13:38:46",
        "url": "https://files.pythonhosted.org/packages/40/97/f81f9e2dc05cc54072f322b94c5cf35467c16d55c4c922064f29fa53c714/instagram-py-0.3.1.tar.gz"
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "93713a1184b28f8749206f8a91273154",
          "sha256": "8ca373fec6d94fb73351fae83297015fa213248e4d9a81eaccbd4e302d4decfe"
        },
        "downloads": -1,
        "filename": "instagram-py-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "93713a1184b28f8749206f8a91273154",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15896,
        "upload_time": "2017-09-13T09:29:00",
        "url": "https://files.pythonhosted.org/packages/71/b4/365dd273628546e4bcf2971bdf0cde32544b08c6d3a2e0552d127f883329/instagram-py-0.3.2.tar.gz"
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "faccfd4780a0d073faef2bd73a3e9741",
          "sha256": "084125d49027d6f53807bbfa18e4c964d814491e4639acb2d19c731c97fbe81f"
        },
        "downloads": -1,
        "filename": "instagram-py-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "faccfd4780a0d073faef2bd73a3e9741",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22003,
        "upload_time": "2017-10-12T12:44:08",
        "url": "https://files.pythonhosted.org/packages/f3/44/938f52c6f07d8c184d4a7dd253a6e631a8e5d0dedff91ad52c6bea89f173/instagram-py-1.3.2.tar.gz"
      }
    ],
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d7f9d8dcb9a5a970b8f391cbd19b14c1",
          "sha256": "c14357b6ba5cb4fdb99ef4efb54384127ee142fca29f9a6702c592449a3b8cbe"
        },
        "downloads": -1,
        "filename": "instagram-py-1.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d7f9d8dcb9a5a970b8f391cbd19b14c1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21997,
        "upload_time": "2017-10-12T12:55:04",
        "url": "https://files.pythonhosted.org/packages/3c/2f/31e32b22233aa12852878a22e31c1786fdbf7c143ad4d4f29503da994631/instagram-py-1.3.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d7f9d8dcb9a5a970b8f391cbd19b14c1",
        "sha256": "c14357b6ba5cb4fdb99ef4efb54384127ee142fca29f9a6702c592449a3b8cbe"
      },
      "downloads": -1,
      "filename": "instagram-py-1.3.3.tar.gz",
      "has_sig": false,
      "md5_digest": "d7f9d8dcb9a5a970b8f391cbd19b14c1",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 21997,
      "upload_time": "2017-10-12T12:55:04",
      "url": "https://files.pythonhosted.org/packages/3c/2f/31e32b22233aa12852878a22e31c1786fdbf7c143ad4d4f29503da994631/instagram-py-1.3.3.tar.gz"
    }
  ]
}