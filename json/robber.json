{
  "info": {
    "author": "Tao Liang",
    "author_email": "tao@synapse-ai.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Testing"
    ],
    "description": "|Build Status| |Coverage Status|\r\n\r\nrobber.py - BDD / TDD assertion library for Python.\r\n===================================================\r\n\r\nSynopsis\r\n--------\r\n\r\nIn order to use ``robber``, you need to import ``expect`` from the\r\nmodule:\r\n\r\n.. code:: python\r\n\r\n    from robber import expect\r\n\r\nThat's all. You are good to go.\r\n\r\nAssertions\r\n~~~~~~~~~~\r\n\r\neq/==\r\n^^^^^\r\n\r\nAsserts that actual is equal (==) to expected:\r\n\r\n.. code:: python\r\n\r\n    expect(1).to.eq(1)\r\n    expect([1, 2]).to.eq([1, 2])\r\n\r\nAlso:\r\n\r\n.. code:: python\r\n\r\n    expect(1) == 1\r\n\r\nne/not\\_eq/!=\r\n^^^^^^^^^^^^^\r\n\r\nAsserts that actual is not equal (!=) to expected:\r\n\r\n.. code:: python\r\n\r\n    expect(1).to.ne(2)\r\n    expect(1).to.not_eq(2)\r\n    expect(1).to != 2\r\n    expect(1) != 2\r\n\r\nequal\r\n^^^^^\r\n\r\nAsserts that the target is identical (is) to the expected:\r\n\r\n.. code:: python\r\n\r\n    expect(1).to.equal(1)\r\n\r\nnot\\_equal\r\n^^^^^^^^^^\r\n\r\nAsserts that the target is not identical (is) to the expected:\r\n\r\n.. code:: python\r\n\r\n    expect({ 'test': 'robber' }).to.not_equal({ 'test': 'robber' })\r\n\r\ntrue\r\n^^^^\r\n\r\nAsserts that the target is True:\r\n\r\n.. code:: python\r\n\r\n    expect(True).to.be.true()\r\n\r\nfalse\r\n^^^^^\r\n\r\nAsserts that the target is False:\r\n\r\n.. code:: python\r\n\r\n    expect(False).to.be.false()\r\n\r\ninstanceof\r\n^^^^^^^^^^\r\n\r\nAsserts that the target is an instance of expected:\r\n\r\n.. code:: python\r\n\r\n    expect(obj).to.be.instanceof(Klass)\r\n\r\nmatch\r\n^^^^^\r\n\r\nAsserts that the target can be matched by a regular expression:\r\n\r\n.. code:: python\r\n\r\n    expect('foo').to.match(r'foo')\r\n\r\nnot\\_match\r\n^^^^^^^^^^\r\n\r\nAsserts that the target can not be matched by a regular expression:\r\n\r\n.. code:: python\r\n\r\n    expect('bar').to.not_match(r'foo')\r\n\r\nrespond\\_to\r\n^^^^^^^^^^^\r\n\r\nAsserts that the target responds to a method:\r\n\r\n.. code:: python\r\n\r\n    expect(obj).to.respond_to('method')\r\n\r\ntruthy\r\n^^^^^^\r\n\r\nAsserts that the target is truthy:\r\n\r\n.. code:: python\r\n\r\n    expect(['test']).to.be.truthy()\r\n\r\nfalsy\r\n^^^^^\r\n\r\nAsserts that the target is falsy:\r\n\r\n.. code:: python\r\n\r\n    expect([]).to.be.falsy()\r\n\r\nlength\r\n^^^^^^\r\n\r\nAsserts that the target has a length of expected:\r\n\r\n.. code:: python\r\n\r\n    expect([1, 2]).to.have.length(2)\r\n    expect('str').to.have.length(3)\r\n\r\nempty\r\n^^^^^\r\n\r\nAsserts that the target is empty:\r\n\r\n.. code:: python\r\n\r\n    expect([]).to.be.empty()\r\n    expect('').to.be.empty()\r\n\r\nnot\\_empty\r\n^^^^^^^^^^\r\n\r\nAsserts that the target is nonempty:\r\n\r\n.. code:: python\r\n\r\n    expect([1, 2, 3]).to.be.not_empty()\r\n    expect('foo').to.be.not_empty()\r\n\r\nstring\r\n^^^^^^\r\n\r\nAsserts that the target is a string:\r\n\r\n.. code:: python\r\n\r\n    expect('str').to.be.a.string()\r\n\r\ninteger\r\n^^^^^^^\r\n\r\nAsserts that the target is an integer:\r\n\r\n.. code:: python\r\n\r\n    expect('str').to.be.an.integer()\r\n\r\nfloat\r\n^^^^^\r\n\r\nAsserts that the target is floating point number:\r\n\r\n.. code:: python\r\n\r\n    expect(1.0).to.be.a.float()\r\n\r\nlist\r\n^^^^\r\n\r\nAsserts that the target is a list:\r\n\r\n.. code:: python\r\n\r\n    expect([1, 2]).to.be.a.list()\r\n\r\ndict\r\n^^^^\r\n\r\nAsserts that the target is a dictionary:\r\n\r\n.. code:: python\r\n\r\n    expect({}).to.be.a.dict()\r\n\r\ntuple\r\n^^^^^\r\n\r\nAsserts that the target is a tuple:\r\n\r\n.. code:: python\r\n\r\n    expect((1, 2)).to.be.a.tuple()\r\n\r\nnone\r\n^^^^\r\n\r\nAsserts that the target is None:\r\n\r\n.. code:: python\r\n\r\n    expect(None).to.be.none()\r\n\r\nabove\r\n^^^^^\r\n\r\nAsserts that the target is above expected:\r\n\r\n.. code:: python\r\n\r\n    expect(2).to.be.above(1)\r\n\r\nbelow\r\n^^^^^\r\n\r\nAsserts that the target is below expected:\r\n\r\n.. code:: python\r\n\r\n    expect(1).to.be.below(2)\r\n\r\nwithin\r\n^^^^^^\r\n\r\nAsserts that the target is within expected:\r\n\r\n.. code:: python\r\n\r\n    expect(2).to.be.within(0, 2)\r\n\r\ncontain\r\n^^^^^^^\r\n\r\nAsserts that the target contains an element, or a key:\r\n\r\n.. code:: python\r\n\r\n    expect([1,2,3]).to.contain(2)\r\n    expect({'foo': 'bar'}).to.contain('foo')\r\n\r\nnot\\_contain/exclude\r\n^^^^^^^^^^^^^^^^^^^^\r\n\r\nAsserts that the target does not contain an element, or a key:\r\n\r\n.. code:: python\r\n\r\n    expect([1,2,3]).to.not_contain(4)\r\n    expect({'foo': 'bar'}).to.exclude('baz')\r\n\r\nLanguage chains\r\n~~~~~~~~~~~~~~~\r\n\r\nIn order to write more readable assertions, there are a few built-in\r\nlanguage chains that you can use:\r\n\r\n-  to\r\n-  be\r\n-  a\r\n-  an\r\n-  have\r\n\r\nFor example, the following two lines are functionally equivalent:\r\n\r\n::\r\n\r\n    expect(1.0).to.be.a.float()\r\n\r\n    expect(1.0).float()\r\n\r\nExpectation chaining\r\n~~~~~~~~~~~~~~~~~~~~\r\n\r\nIn the spirit of more readable assertions, and to eliminate redundant\r\nevaluations of the same expression, you can chain multiple expectations.\r\n\r\nFor example, the following two lines are functionally equivalent. The\r\nfirst example evaluates the expression '1 + 1' only once:\r\n\r\n::\r\n\r\n    expect(1 + 1).to.be.an.integer().to.be.within(1, 3)\r\n\r\n    expect(1 + 1).to.be.an.integer()\r\n    expect(1 + 1).to.be within(1, 3)\r\n\r\nCustom assertions\r\n~~~~~~~~~~~~~~~~~\r\n\r\nWriting custom assertion is as easy as extending a base matcher class\r\nand adding two methods - matches for matching and failure\\_message for\r\nthe error notice:\r\n\r\n.. code:: python\r\n\r\n    class Chain(Base):\r\n        def matches(self):\r\n            expectation = self.actual(None)\r\n            chain = getattr(expectation, self.expected)\r\n            return expectation is chain\r\n\r\n        def failure_message(self):\r\n            return 'Expected \"%s\" to have chain \"%s\"' % (self.actual, self.expected)\r\n\r\n    expect.register('chain', Chain)\r\n\r\nAfter you register the new matcher, you can use it as expected:\r\n\r\n.. code:: python\r\n\r\n    expect(obj).to.have.chain('be')\r\n\r\nCustom error messages\r\n~~~~~~~~~~~~~~~~~~~~~\r\n\r\nIf you want to have custom failure messages, for assertion or group of\r\nassertions, you can simply do:\r\n\r\n.. code:: python\r\n\r\n    from robber import failure_message\r\n\r\n    with failure_message('Something went wrong'):\r\n        expect(1).to.eq(2)\r\n\r\nInstallation\r\n------------\r\n\r\n::\r\n\r\n    $ pip install robber\r\n\r\nRequirements\r\n------------\r\n\r\n-  Python 2.6, 2.7 or 3.5\r\n-  pip\r\n-  nose (for testing)\r\n\r\nTests\r\n-----\r\n\r\n::\r\n\r\n    $ nosetests tests/\r\n\r\nLicense\r\n-------\r\n\r\nMIT License\r\n\r\n.. |Build Status| image:: https://secure.travis-ci.org/taoenator/robber.py.png\r\n   :target: http://travis-ci.org/taoenator/robber.py\r\n.. |Coverage Status| image:: https://coveralls.io/repos/github/taoenator/robber.py/badge.svg?branch=master\r\n   :target: https://coveralls.io/github/taoenator/robber.py?branch=master",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/vesln/robber.py",
    "keywords": "",
    "license": "UNKNOWN",
    "maintainer": "",
    "maintainer_email": "",
    "name": "robber",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/robber/",
    "release_url": "https://pypi.org/project/robber/1.0.1/",
    "requires_python": null,
    "summary": "BDD / TDD assertion library for Python",
    "version": "1.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ce62f58356eb2f411471b318d56ed3a5",
          "sha256": "3ae0d10b9aae68996c82485dc70b9a8a1a40b252b5e0e6f7608c4d03ee3cb570"
        },
        "downloads": 2092,
        "filename": "robber-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ce62f58356eb2f411471b318d56ed3a5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4948,
        "upload_time": "2012-09-16T14:28:30",
        "url": "https://files.pythonhosted.org/packages/53/b5/7e1c72dcfbfb8c0fa5fda5ca1b55a63641ade81b8cee63434e542d2d9d13/robber-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "418aa83d3ddac92037a964f32df8b0ca",
          "sha256": "dac67850f5c569fef0cc18c749e9d204527cf096a7595056d744bff945fc62e5"
        },
        "downloads": 2073,
        "filename": "robber-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "418aa83d3ddac92037a964f32df8b0ca",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4937,
        "upload_time": "2012-09-16T14:35:43",
        "url": "https://files.pythonhosted.org/packages/f8/06/e738a613a9845efafbdba19253df6e9dd6934c1bfbf61706c28bef529c53/robber-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e30a3ec7babca36b743cf188bc6923cb",
          "sha256": "6238a1d23619f5fdf36e311ea3d9a6a8f24e6a53cb333716864493b908a41bb8"
        },
        "downloads": 2074,
        "filename": "robber-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e30a3ec7babca36b743cf188bc6923cb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4923,
        "upload_time": "2012-09-16T14:36:29",
        "url": "https://files.pythonhosted.org/packages/ce/60/bdc009be78a3fc54f4f54c29cde966cc84e7ccff50a7d94e0933e4df99c7/robber-0.0.3.tar.gz"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cdff334d7ff603892a46c11c13c77a1a",
          "sha256": "f5a310f7123461f18b20e618cbdeac7f1ea594c0321a1fb17d07fdcca024ebf4"
        },
        "downloads": 2448,
        "filename": "robber-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "cdff334d7ff603892a46c11c13c77a1a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4999,
        "upload_time": "2012-09-17T09:35:41",
        "url": "https://files.pythonhosted.org/packages/da/04/2f8b3244dd10a6f4e6e53044d393a5b394cd33748bf2c1be955c883cc34e/robber-0.0.4.tar.gz"
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f5f41e4f0542be4b246582ba65d12fa4",
          "sha256": "91420518cfb5b1ccd880be43bbafac200b01f3fb7b83e4befc641966be95b4d3"
        },
        "downloads": 3668,
        "filename": "robber-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f5f41e4f0542be4b246582ba65d12fa4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5022,
        "upload_time": "2012-12-05T08:47:49",
        "url": "https://files.pythonhosted.org/packages/68/8f/03687cc958655765396d86ca31b1ecc604fb0d5ac5af9934351edb7aae8f/robber-0.1.0.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "99fbc8c7754d9c5b9aeb4808864d1c75",
          "sha256": "d66847adfee9d108eed58b2a467dc4190859539db3bc08206e0685c4f13e2571"
        },
        "downloads": 125,
        "filename": "robber-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "99fbc8c7754d9c5b9aeb4808864d1c75",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6831,
        "upload_time": "2016-03-14T18:13:16",
        "url": "https://files.pythonhosted.org/packages/f1/79/e8f2fabb7b8d93c1f389a69b5ff667c3afe0968afa5286976fff500a0394/robber-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "49af6a8f6cdcc19896a1966562423e6a",
          "sha256": "87f705c1630e2eb622c0e7f7b940303a519392167d3d2ba707e97e3c58001ecb"
        },
        "downloads": 669,
        "filename": "robber-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "49af6a8f6cdcc19896a1966562423e6a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5947,
        "upload_time": "2016-03-14T18:31:23",
        "url": "https://files.pythonhosted.org/packages/c0/ae/d4208be5838d982b1a77973ea91eeba431290c217a62b1e5d485c2651807/robber-1.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "49af6a8f6cdcc19896a1966562423e6a",
        "sha256": "87f705c1630e2eb622c0e7f7b940303a519392167d3d2ba707e97e3c58001ecb"
      },
      "downloads": 669,
      "filename": "robber-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "49af6a8f6cdcc19896a1966562423e6a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5947,
      "upload_time": "2016-03-14T18:31:23",
      "url": "https://files.pythonhosted.org/packages/c0/ae/d4208be5838d982b1a77973ea91eeba431290c217a62b1e5d485c2651807/robber-1.0.1.tar.gz"
    }
  ]
}