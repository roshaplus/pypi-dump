{
  "info": {
    "author": "Scrapinghub",
    "author_email": "info@scrapinghub.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "=================\nscrapy-jsonschema\n=================\n\n.. image:: https://travis-ci.org/scrapy-plugins/scrapy-jsonschema.svg?branch=master\n    :target: https://travis-ci.org/scrapy-plugins/scrapy-jsonschema\n\n.. image:: https://codecov.io/gh/scrapy-plugins/scrapy-jsonschema/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/scrapy-plugins/scrapy-jsonschema\n\nThis plugin provides two features based on `JSON Schema`_ and the\n`jsonschema`_ Python library:\n\n* a `Scrapy Item`_ definition builder from a JSON Schema definition\n* a `Scrapy item pipeline`_ to validate items against a JSON Schema definition\n\n.. _jsonschema: https://pypi.python.org/pypi/jsonschema\n.. _Scrapy Item: https://docs.scrapy.org/en/latest/topics/items.html\n.. _Scrapy item pipeline: https://docs.scrapy.org/en/latest/topics/item-pipeline.html\n\n\nInstallation\n============\n\nInstall scrapy-jsonschema using ``pip``::\n\n    $ pip install scrapy-jsonschema\n\n\nConfiguration\n=============\n\nAdd ``JsonSchemaValidatePipeline`` by including it in ``ITEM_PIPELINES``\nin your ``settings.py`` file::\n\n   ITEM_PIPELINES = {\n       ...\n       'scrapy_jsonschema.JsonSchemaValidatePipeline': 100,\n   }\n\nHere, priority ``100`` is just an example.\nSet its value depending on other pipelines you may have enabled already.\n\n\nUsage\n=====\n\nLet's assume that you are working with this JSON schema below,\nrepresenting products each requiring a numeric ID, a name, and a non-negative price\n(this example is taken from `JSON Schema`_ website)::\n\n    {\n        \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n        \"title\": \"Product\",\n        \"description\": \"A product from Acme's catalog\",\n        \"type\": \"object\",\n        \"properties\": {\n            \"id\": {\n                \"description\": \"The unique identifier for a product\",\n                \"type\": \"integer\"\n            },\n            \"name\": {\n                \"description\": \"Name of the product\",\n                \"type\": \"string\"\n            },\n            \"price\": {\n                \"type\": \"number\",\n                \"minimum\": 0,\n                \"exclusiveMinimum\": true\n            }\n        },\n        \"required\": [\"id\", \"name\", \"price\"]\n    }\n\nYou can define a ``scrapy.Item`` from this schema by subclassing\n``scrapy_jsonschema.item.JsonSchemaItem``, and setting a ``jsonschema``\nclass attribute set to the schema.\nThis attribute should be a Python ``dict`` -- note that JSON's \"true\" became ``True`` below;\nyou can use Python's ``json`` module to load a JSON Schema as string)::\n\n    from scrapy_jsonschema.item import JsonSchemaItem\n\n\n    class ProductItem(JsonSchemaItem):\n        jsonschema =     {\n            \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n            \"title\": \"Product\",\n            \"description\": \"A product from Acme's catalog\",\n            \"type\": \"object\",\n            \"properties\": {\n                \"id\": {\n                    \"description\": \"The unique identifier for a product\",\n                    \"type\": \"integer\"\n                },\n                \"name\": {\n                    \"description\": \"Name of the product\",\n                    \"type\": \"string\"\n                },\n                \"price\": {\n                    \"type\": \"number\",\n                    \"minimum\": 0,\n                    \"exclusiveMinimum\": true\n                }\n            },\n            \"required\": [\"id\", \"name\", \"price\"]\n        }\n\nYou can then use this item class as any regular Scrapy item\n(notice how fields that are not in the schema raise errors when assigned)::\n\n    >>> item = ProductItem()\n    >>> item['foo'] = 3\n    (...)\n    KeyError: 'ProductItem does not support field: foo'\n\n    >>> item['name'] = 'Some name'\n    >>> item['name']\n    'Some name'\n\nIf you use this item definition in a spider and if the pipeline is enabled,\ngenerated items that do no follow the schema will be dropped.\nIn the (unrealistic) example spider below, one of the items only contains the \"name\",\nand \"id\" and \"price\" are missing::\n\n    class ExampleSpider(scrapy.Spider):\n        name = \"example\"\n        allowed_domains = [\"example.com\"]\n        start_urls = ['http://example.com/']\n\n        def parse(self, response):\n            yield ProductItem({\n                \"name\": response.css('title::text').extract_first()\n            })\n\n            yield ProductItem({\n                \"id\": 1,\n                \"name\": response.css('title::text').extract_first(),\n                \"price\": 9.99\n            })\n\nWhen running this spider, when the item with missing fields is output,\nyou should see these lines appear in the logs::\n\n    2017-01-20 12:34:23 [scrapy.core.scraper] WARNING: Dropped: schema validation failed:\n     id: 'id' is a required property\n    price: 'price' is a required property\n\n    {'name': u'Example Domain'}\n\nThe second item conforms to the schema so it appears as a regular item log::\n\n    2017-01-20 12:34:23 [scrapy.core.scraper] DEBUG: Scraped from <200 http://example.com/>\n    {'id': 1, 'name': u'Example Domain', 'price': 9.99}\n\n\nThe item pipeline also updates Scrapy stats with a few counters, under\n``jsonschema/`` namespace::\n\n    2017-01-20 12:34:23 [scrapy.statscollectors] INFO: Dumping Scrapy stats:\n    {...\n     'item_dropped_count': 1,\n     'item_dropped_reasons_count/DropItem': 1,\n     'item_scraped_count': 1,\n     'jsonschema/errors/id': 1,\n     'jsonschema/errors/price': 1,\n     ...}\n    2017-01-20 12:34:23 [scrapy.core.engine] INFO: Spider closed (finished)\n\n\n.. _JSON Schema: http://json-schema.org/\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/scrapy-plugins/scrapy-jsonschema",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "scrapy-jsonschema",
    "platform": "Any",
    "project_url": "https://pypi.org/project/scrapy-jsonschema/",
    "release_url": "https://pypi.org/project/scrapy-jsonschema/0.1.0/",
    "requires_python": "",
    "summary": "Scrapy schema validation pipeline and Item builder using JSON Schema",
    "version": "0.1.0"
  },
  "releases": {
    "0.0.2": [],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d072b4420b692e5f073a83332dded860",
          "sha256": "c2e92b4ab105832f38398a21ff8358d1bcfb829c389092ddeeed3a85adccd5cb"
        },
        "downloads": 10,
        "filename": "scrapy_jsonschema-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d072b4420b692e5f073a83332dded860",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 3842,
        "upload_time": "2017-01-20T14:38:01",
        "url": "https://files.pythonhosted.org/packages/d0/4e/c01e643fb80b5414866ce5ff9233eff23273d33a683dcbb0c277c76999c6/scrapy_jsonschema-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0db6dea53842cdb4378150d058d1cdee",
          "sha256": "afc5aa10925f9fb2b7c5664401bfba47295c25aa5280d117541836959398a54e"
        },
        "downloads": 9,
        "filename": "scrapy-jsonschema-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0db6dea53842cdb4378150d058d1cdee",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3850,
        "upload_time": "2017-01-20T14:38:02",
        "url": "https://files.pythonhosted.org/packages/84/d1/4d9888e9c74d73dc4b976defaeee1a1b0da3eb0fb35a9894f84718dd38a2/scrapy-jsonschema-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d072b4420b692e5f073a83332dded860",
        "sha256": "c2e92b4ab105832f38398a21ff8358d1bcfb829c389092ddeeed3a85adccd5cb"
      },
      "downloads": 10,
      "filename": "scrapy_jsonschema-0.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d072b4420b692e5f073a83332dded860",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 3842,
      "upload_time": "2017-01-20T14:38:01",
      "url": "https://files.pythonhosted.org/packages/d0/4e/c01e643fb80b5414866ce5ff9233eff23273d33a683dcbb0c277c76999c6/scrapy_jsonschema-0.1.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "0db6dea53842cdb4378150d058d1cdee",
        "sha256": "afc5aa10925f9fb2b7c5664401bfba47295c25aa5280d117541836959398a54e"
      },
      "downloads": 9,
      "filename": "scrapy-jsonschema-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0db6dea53842cdb4378150d058d1cdee",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3850,
      "upload_time": "2017-01-20T14:38:02",
      "url": "https://files.pythonhosted.org/packages/84/d1/4d9888e9c74d73dc4b976defaeee1a1b0da3eb0fb35a9894f84718dd38a2/scrapy-jsonschema-0.1.0.tar.gz"
    }
  ]
}