{
  "info": {
    "author": "Akshay Kurmi",
    "author_email": "akshaykurmi95@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Topic :: Scientific/Engineering :: Artificial Intelligence",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=======\nlearnnn\n=======\n\nA pure Numpy deep learning framework with a modular Keras-like API.\n\nInstallation\n------------\nFrom PyPI:\n\n.. code-block:: bash\n\n    $ pip install learnnn\n\nFrom source:\n\n.. code-block:: bash\n\n    $ python setup.py install\n\nUsage\n-----\n\nMNIST handwritten digits classification example:\n\n.. code-block:: python\n\n    from learnnn.datasets import MNIST\n    from learnnn.activations import ReLU, Sigmoid\n    from learnnn.losses import MeanSquaredError\n    from learnnn.optimizers import Momentum\n    from learnnn.initializers import RandomUniform, Zeros\n    from learnnn.metrics import CategoricalAccuracy\n    from learnnn.layers import Dense, Dropout\n    from learnnn.models import FeedForwardNetwork\n    from learnnn.utils.data import one_hot_encode, normalize\n\n    dataset = MNIST()\n    (X_train, y_train), (X_test, y_test) = dataset.training_data(), dataset.test_data()\n    X_train, X_test = normalize(X_train, X_test)\n    y_train, y_test = one_hot_encode(y_train), one_hot_encode(y_test)\n\n    model = FeedForwardNetwork()\n    model.add(Dense(units=100,\n                    activation=ReLU(),\n                    weights_initializer=RandomUniform(scale=0.01),\n                    bias_initializer=Zeros(),\n                    input_shape=(784,)))\n    model.add(Dropout(drop_percent=0.3))\n    model.add(Dense(units=10,\n                    activation=Sigmoid(),\n                    weights_initializer=RandomUniform(scale=0.01),\n                    bias_initializer=Zeros()))\n    model.compile(optimizer=Momentum(learning_rate=0.01, nesterov=True, clip_value=0.05),\n                  loss=MeanSquaredError(),\n                  metrics=[CategoricalAccuracy()])\n\n    model.fit(X_train, y_train, batch_size=32, epochs=50)\n    loss, metrics = model.evaluate(X_test, y_test, batch_size=32)\n    print(\"Test Loss :\", loss)\n    print(\"Test Metrics :\", metrics)\n\nOutput:\n\n.. figure:: examples/mnist_demo_output.gif\n    :width: 100%\n\n\nIncluded Components\n-------------------\n\n+------------------------+-----------------------------------+\n| *Layers*               | Dense                             |\n|                        +-----------------------------------+\n|                        | Dropout                           |\n+------------------------+-----------------------------------+\n| *Activations*          | ReLU                              |\n|                        +-----------------------------------+\n|                        | Sigmoid                           |\n+------------------------+-----------------------------------+\n| *Optimizers*           | Stochastic Gradient Descent (SGD) |\n|                        +-----------------------------------+\n|                        | SGD with Momentum                 |\n+------------------------+-----------------------------------+\n| *Losses*               | Mean Squared Error                |\n+------------------------+-----------------------------------+\n| *Weight Initializers*  | Zeros                             |\n|                        +-----------------------------------+\n|                        | Random Uniform                    |\n+------------------------+-----------------------------------+\n| *Metrics*              | Categorical Accuracy              |\n+------------------------+-----------------------------------+\n| *Datasets*             | MNIST handwritten digits          |\n|                        +-----------------------------------+\n|                        | Synthetic - Moons, Spirals        |\n+------------------------+-----------------------------------+\n\nDownloading Datasets\n--------------------\n.. code-block:: bash\n\n    $ python -m learnnn --download {dataset_name}\n\nList available commands:\n\n.. code-block:: bash\n\n    $ python -m learnnn -h\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/akshaykurmi/learnnn",
    "keywords": "deep learning neural networks",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "learnnn",
    "platform": "",
    "project_url": "https://pypi.org/project/learnnn/",
    "release_url": "https://pypi.org/project/learnnn/0.1.0/",
    "requires_dist": [
      "tqdm (>=4.19.5)",
      "matplotlib (>=2.1.1)",
      "numpy (>=1.13.3)"
    ],
    "requires_python": "~=3.4",
    "summary": "A Pure Numpy Deep Learning Framework",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d1bdba7c5f7aa64a7eec287be78120e9",
          "sha256": "e090a6d7454aa0f0dc42e844b5bbf8775549213703c547b1e557c8772cecf5c0"
        },
        "downloads": -1,
        "filename": "learnnn-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d1bdba7c5f7aa64a7eec287be78120e9",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 17269,
        "upload_time": "2018-01-21T11:29:24",
        "url": "https://files.pythonhosted.org/packages/ee/0a/850f37b5bf916da036d25eada9d3cfcda19365c5d6d706bd734b1bca667f/learnnn-0.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4f92a62bd7a2239a2164c41b432d2fd1",
          "sha256": "b333b18cb20aafd75b44348d72fac3a8e3c4a38445d41f203293fc0c8740a369"
        },
        "downloads": -1,
        "filename": "learnnn-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4f92a62bd7a2239a2164c41b432d2fd1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8460,
        "upload_time": "2018-01-21T11:29:25",
        "url": "https://files.pythonhosted.org/packages/f7/d5/df2e6c07ca7fdfdb76f95b618a1fc0be5c7081a9c214c9bc3a6b5ba79f51/learnnn-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d1bdba7c5f7aa64a7eec287be78120e9",
        "sha256": "e090a6d7454aa0f0dc42e844b5bbf8775549213703c547b1e557c8772cecf5c0"
      },
      "downloads": -1,
      "filename": "learnnn-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "d1bdba7c5f7aa64a7eec287be78120e9",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 17269,
      "upload_time": "2018-01-21T11:29:24",
      "url": "https://files.pythonhosted.org/packages/ee/0a/850f37b5bf916da036d25eada9d3cfcda19365c5d6d706bd734b1bca667f/learnnn-0.1.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "4f92a62bd7a2239a2164c41b432d2fd1",
        "sha256": "b333b18cb20aafd75b44348d72fac3a8e3c4a38445d41f203293fc0c8740a369"
      },
      "downloads": -1,
      "filename": "learnnn-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4f92a62bd7a2239a2164c41b432d2fd1",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8460,
      "upload_time": "2018-01-21T11:29:25",
      "url": "https://files.pythonhosted.org/packages/f7/d5/df2e6c07ca7fdfdb76f95b618a1fc0be5c7081a9c214c9bc3a6b5ba79f51/learnnn-0.1.0.tar.gz"
    }
  ]
}