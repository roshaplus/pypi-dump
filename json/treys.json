{
  "info": {
    "author": "Will Drevo",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Topic :: Games/Entertainment"
    ],
    "description": "Treys\n========\n\nA pure Python poker hand evaluation library\n\n    [ 3 \u2764 ] , [ 3 \u2660 ]\n    \n## Installation\n\n```\n$ pip install git+https://github.com/ihendley/treys\n```\n\n## Implementation notes\n\nTreys is a fork of https://github.com/worldveil/deuces that supports Python 3. \n\nTreys (originally Deuces) was written by [Will Drevo](http://willdrevo.com/) for the MIT Pokerbots Competition. It is lightweight and fast. All lookups are done with bit arithmetic and dictionary lookups. That said, Treys won't beat a C implemenation (~250k eval/s) but it is useful for situations where Python is required or where bots are allocated reasonable thinking time (human time scale).\n\nTreys handles 5, 6, and 7 card hand lookups. The 6 and 7 card lookups are done by combinatorially evaluating the 5 card choices.\n\n## Usage\n\nTreys is easy to set up and use. \n\n```python\n>>> from treys import Card\n>>> card = Card.new('Qh')\n```\n\nCard objects are represented as integers to keep Treys performant and lightweight. \n\nNow let's create the board and an example Texas Hold'em hand:\n\n```python\n>>> board = [\n>>>     Card.new('Ah'),\n>>>     Card.new('Kd'),\n>>>     Card.new('Jc')\n>>> ]\n>>> hand = [\n>>>    Card.new('Qs'),\n>>>    Card.new('Th')\n>>> ]\n```\n\nPretty print card integers to the terminal: \n\n    >>> Card.print_pretty_cards(board + hand)\n      [ A \u2764 ] , [ K \u2666 ] , [ J \u2663 ] , [ Q \u2660 ] , [ T \u2764 ] \n\nIf you have [`termacolor`](http://pypi.python.org/pypi/termcolor) installed, they will be colored as well. \n\nOtherwise move straight to evaluating your hand strength:\n```python\n>>> from treys import Evaluator\n>>> evaluator = Evaluator()\n>>> print evaluator.evaluate(board, hand)\n1600\n```\n\nHand strength is valued on a scale of 1 to 7462, where 1 is a Royal Flush and 7462 is unsuited 7-5-4-3-2, as there are only 7642 distinctly ranked hands in poker. Once again, refer to my blog post for a more mathematically complete explanation of why this is so. \n\nIf you want to deal out cards randomly from a deck, you can also do that with Treys:\n```python\n>>> from treys import Deck\n>>> deck = Deck()\n>>> board = deck.draw(5)\n>>> player1_hand = deck.draw(2)\n>>> player2_hand = deck.draw(2)\n```\nand print them:\n\n    >>> Card.print_pretty_cards(board)\n      [ 4 \u2663 ] , [ A \u2660 ] , [ 5 \u2666 ] , [ K \u2663 ] , [ 2 \u2660 ]\n    >>> Card.print_pretty_cards(player1_hand)\n      [ 6 \u2663 ] , [ 7 \u2764 ] \n    >>> Card.print_pretty_cards(player2_hand)\n      [ A \u2663 ] , [ 3 \u2764 ] \n\nLet's evaluate both hands strength, and then bin them into classes, one for each hand type (High Card, Pair, etc)\n```python\n>>> p1_score = evaluator.evaluate(board, player1_hand)\n>>> p2_score = evaluator.evaluate(board, player2_hand)\n>>> p1_class = evaluator.get_rank_class(p1_score)\n>>> p2_class = evaluator.get_rank_class(p2_score)\n```\nor get a human-friendly string to describe the score,\n\n    >>> print \"Player 1 hand rank = %d (%s)\\n\" % (p1_score, evaluator.class_to_string(p1_class))\n    Player 1 hand rank = 6330 (High Card)\n\n    >>> print \"Player 2 hand rank = %d (%s)\\n\" % (p2_score, evaluator.class_to_string(p2_class))\n    Player 2 hand rank = 1609 (Straight)\n\nor, coolest of all, get a blow-by-blow analysis of the stages of the game with relation to hand strength:\n\n    >>> hands = [player1_hand, player2_hand]\n    >>> evaluator.hand_summary(board, hands)\n\n    ========== FLOP ==========\n    Player 1 hand = High Card, percentage rank among all hands = 0.893192\n    Player 2 hand = Pair, percentage rank among all hands = 0.474672\n    Player 2 hand is currently winning.\n\n    ========== TURN ==========\n    Player 1 hand = High Card, percentage rank among all hands = 0.848298\n    Player 2 hand = Pair, percentage rank among all hands = 0.452292\n    Player 2 hand is currently winning.\n\n    ========== RIVER ==========\n    Player 1 hand = High Card, percentage rank among all hands = 0.848298\n    Player 2 hand = Straight, percentage rank among all hands = 0.215626\n\n    ========== HAND OVER ==========\n    Player 2 is the winner with a Straight\n\n## License\n\nCopyright (c) 2013 Will Drevo\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ihendley/treys",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "treys",
    "platform": "",
    "project_url": "https://pypi.org/project/treys/",
    "release_url": "https://pypi.org/project/treys/0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "treys is a pure Python poker hand evaluation library",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3829a8c5455c539af7102724e5a5df32",
          "sha256": "e193c2a2daf37a56be44bc36aec5b44018765f8d4b5d8221f551007aed66452d"
        },
        "downloads": -1,
        "filename": "treys-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3829a8c5455c539af7102724e5a5df32",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10167,
        "upload_time": "2017-12-11T10:11:22",
        "url": "https://files.pythonhosted.org/packages/98/3f/3ea770807fe37a9627d2bdca87c6c8254cac3d6694ed9d70e8597938efa3/treys-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "3829a8c5455c539af7102724e5a5df32",
        "sha256": "e193c2a2daf37a56be44bc36aec5b44018765f8d4b5d8221f551007aed66452d"
      },
      "downloads": -1,
      "filename": "treys-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "3829a8c5455c539af7102724e5a5df32",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10167,
      "upload_time": "2017-12-11T10:11:22",
      "url": "https://files.pythonhosted.org/packages/98/3f/3ea770807fe37a9627d2bdca87c6c8254cac3d6694ed9d70e8597938efa3/treys-0.1.tar.gz"
    }
  ]
}