{
  "info": {
    "author": "Zulko",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": ".. image:: https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/BandWitch/master/docs/_static/images/title.png\n   :alt: [logo]\n   :align: center\n   :width: 600px\n\nBandWitch\n==========\n\n.. image:: https://travis-ci.org/Edinburgh-Genome-Foundry/BandWitch.svg?branch=master\n   :target: https://travis-ci.org/Edinburgh-Genome-Foundry/BandWitch\n   :alt: Travis CI build status\n\n(the documentation is incomplete, come back later for more)\n\nBandwitch (full documentation `here <https://edinburgh-genome-foundry.github.io/BandWitch/>`_)\nis a Python library for the planning and analysis of restriction\nexperiments in DNA assembly operations. Bandwitch implements enzyme selection\nmethods to validate or identify DNA assemblies, and routines to automatically\nvalidate/identify assemblies from experimental data.\n\nYou can try BandWitch in this interactive webdemo.\n\nInstallation\n-------------\n\nYou can install DnaCauldron through PIP\n\n\n.. code:: shell\n\n    sudo pip install bandwitch\n\nOn Ubuntu at least, you may need to install libblas first:\n\n.. code::\n\n    sudo apt-get install libblas-dev liblapack-dev\n\nAlternatively, you can unzip the sources in a folder and type\n\n.. code:: shell\n\n    sudo python setup.py install\n\n\nEnzyme selection with BandWitch\n-------------------------------\n\nIn the following examples, we assume that we have a set of 12 constructs which we will\nneed to either validate (i.e. we digest these constructs and compare each pattern\nwith the expected pattern for that construct) or identify (i.e. we will digest an\na-priori unknown construct and use the migration patterns to un-ambiguously\nidentify each construct among the 12 possible candidates).\n\nFor validation purposes, the difficulty is to find a digestion that will produce\nharmonious patterns for all the constructs at once: well-spaced bands, and not\ntoo many or too few of them. For identification purposes, the difficulty is to\nfind a digestion giving very distant patterns for each construct in the set of\ncandidates.\n\nEvery time when the problem cannot be solved with a single digestion, BandWitch\ncan propose 2 or 3 digestions which collectively solve the problem.\n\nTo select enzymes that will **produce nice patterns for all constructs, for validation:**\n\n.. code:: python\n\n  from bandwitch import IdealDigestionsProblem, LADDERS, load_genbank\n\n  # DEFINE THE SEQUENCES AND THE ENZYME SET\n  enzymes = [\"EcoRI\", \"BamHI\", \"XhoI\", \"EcoRV\", \"SpeI\", \"XbaI\",\n             \"NotI\", \"SacI\", \"SmaI\", \"HindIII\", \"PstI\"]\n  sequences = [\n      load_genbank(genbank_file_path, name=f)\n      for genbank_file_path in some_llist_of_files)\n  ]\n\n  # SELECT THE BEST SINGLE DIGESTION WITH AT MOST ENZYMES\n  problem = IdealDigestionsProblem(enzymes=enzymes,\n                                   ladder=LADDERS['100_to_4k'],\n                                   sequences=sequences,\n                                   max_enzymes_per_digestion=2)\n  score, selected_digestions = problem.select_digestions(max_digestions=1)\n\n  # PLOT THE BAND PATTERNS PRODUCED BY THE SELECTED DIGESTION\n  problem.plot_digestions(\n      digestions=selected_digestions,\n      patterns_props={'label_fontdict': {'rotation': 35}}\n      target_file=\"ideal_digestions.png\"\n  )\n\nResult:\n\n.. image:: https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/BandWitch/master/examples/ideal_digestions.png\n   :alt: [logo]\n   :align: center\n\nTo select enzymes that will produce **different patterns for each construct, for identification:**\n\n.. code:: python\n\n    from bandwitch import (SeparatingDigestionsProblem, list_common_enzymes,\n                           LADDERS, load_genbank)\n\n\n    # DEFINE SEQUENCES AND ENZYME SET (6-CUTTERS WITH >3 COMMERCIAL PROVIDERS)\n    enzymes = list_common_enzymes(site_length=(6,), min_suppliers=3)\n    sequences = [\n        load_genbank(genbank_file_path, name=f)\n        for genbank_file_path in some_llist_of_files)\n    ]\n\n    # SELECT THE BEST DIGESTION PAIRS (AT MOST 1 ENZYME PER DIGESTION)\n    problem = SeparatingDigestionsProblem(enzymes=enzymes,\n                                          ladder=LADDERS['100_to_4k'],\n                                          sequences=sequences,\n                                          max_enzymes_per_digestion=1)\n    score, selected_digestions = problem.select_digestions(max_digestions=2)\n\n    # GENERATE A FIGURE OF THE BAND PATTERNS\n\n    problem.plot_digestions(\n        selected_digestions,\n        patterns_props={'label_fontdict': {'rotation': 35}},\n        target_file=\"separating_digestions.png\"\n    )\n\n    problem.plot_distances_map(digestions=selected_digestions,\n                               target_file=\"separating_digestions_distances.png\")\n\nResult:\n\n.. image:: https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/BandWitch/master/examples/separating_digestions.png\n   :alt: [logo]\n   :align: center\n\nUsage: Construct validation or identification from experimental data\n---------------------------------------------------------------------\n\nThis part is still under construction.\n\nBandwitch can process output files from an automated fragment analyzer and produce\ninformative reports as illustrated below:\n\n.. image:: https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/BandWitch/master/docs/_static/images/bands_validation.png\n   :alt: [logo]\n   :align: center\n   :width: 600px\n\n\nContribute\n----------\n\nBandWitch is an open-source library originally written at the\nEdinburgh Genome Foundry by Zulko_. It is released on Github_ under the MIT\nlicence (\u00a2 Edinburgh Genome Foundry), everyone is welcome to contribute.\n\n.. _Zulko: https://github.com/Zulko/\n.. _Github: https://github.com/EdinburghGenomeFoundry/BandWitch\n.. _PYPI: https://pypi.python.org/pypi/bandwitch\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "Restriction enzyme synthetic biology DNA band patterns",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bandwitch",
    "platform": "",
    "project_url": "https://pypi.org/project/bandwitch/",
    "release_url": "https://pypi.org/project/bandwitch/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Enzyme selection for DNA verification and identification",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "03fdbe1c60b8001351070e5858b4d375",
          "sha256": "ca010228b0cdb19f841144ead5809522319e4ddcbca108d08756458607f6dbd7"
        },
        "downloads": -1,
        "filename": "bandwitch-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "03fdbe1c60b8001351070e5858b4d375",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32736,
        "upload_time": "2017-10-11T18:33:57",
        "url": "https://files.pythonhosted.org/packages/86/2b/7ac37cf6bff632c5716abe711ec3ec0884df395d3ff9ac37b803d338b954/bandwitch-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "03fdbe1c60b8001351070e5858b4d375",
        "sha256": "ca010228b0cdb19f841144ead5809522319e4ddcbca108d08756458607f6dbd7"
      },
      "downloads": -1,
      "filename": "bandwitch-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "03fdbe1c60b8001351070e5858b4d375",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 32736,
      "upload_time": "2017-10-11T18:33:57",
      "url": "https://files.pythonhosted.org/packages/86/2b/7ac37cf6bff632c5716abe711ec3ec0884df395d3ff9ac37b803d338b954/bandwitch-0.1.0.tar.gz"
    }
  ]
}