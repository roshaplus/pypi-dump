{
  "info": {
    "author": "Jean-S\u00e9bastien SUZANNE",
    "author_email": "jssuzanne@anybox.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. This file is a part of the AnyBlok Marshmallow project\n..\n..    Copyright (C) 2017 Jean-Sebastien SUZANNE <jssuzanne@anybox.fr>\n..\n.. This Source Code Form is subject to the terms of the Mozilla Public License,\n.. v. 2.0. If a copy of the MPL was not distributed with this file,You can\n.. obtain one at http://mozilla.org/MPL/2.0/.\n\n.. image:: https://travis-ci.org/AnyBlok/AnyBlok_Marshmallow.svg?branch=master\n    :target: https://travis-ci.org/AnyBlok/AnyBlok_Marshmallow\n    :alt: Build status\n\n.. image:: https://coveralls.io/repos/github/AnyBlok/AnyBlok_Marshmallow/badge.svg?branch=master\n    :target: https://coveralls.io/github/AnyBlok/AnyBlok_Marshmallow?branch=master\n    :alt: Coverage\n\n.. image:: https://img.shields.io/pypi/v/AnyBlok_Marshmallow.svg\n   :target: https://pypi.python.org/pypi/AnyBlok_Marshmallow/\n   :alt: Version status\n\n.. image:: https://readthedocs.org/projects/anyblok-marshmallow/badge/?version=latest\n    :alt: Documentation Status\n    :scale: 100%\n    :target: https://doc.anyblok-marshmallow.anyblok.org/?badge=latest\n\n\nAnyBlok Marshmallow\n===================\n\nImprove AnyBlok `AnyBlok <http://doc.anyblok.org>`_ to add validator, serializer and \ndeserializer schema with `marshmallow <https://marshmallow.readthedocs.io/en/latest/>`_.\n\nThis module is a wrapper of `marshmallow-sqlalchemy <https://marshmallow-sqlalchemy.readthedocs.io/en/latest/>`_,\nthe goal is to give the SQLAlchemy Model build by AnyBlok to this librairy\n\nAnyBlok Marshmallow is released under the terms of the `Mozilla Public License`.\n\nSee the `latest documentation <http://doc.anyblok-marshmallow.anyblok.org/>`_\n\n\n.. This file is a part of the AnyBlok / Marshmallow project\n..\n..    Copyright (C) 2017 Jean-Sebastien SUZANNE <jssuzanne@anybox.fr>\n..\n.. This Source Code Form is subject to the terms of the Mozilla Public License,\n.. v. 2.0. If a copy of the MPL was not distributed with this file,You can\n.. obtain one at http://mozilla.org/MPL/2.0/.\n\n.. contents::\n\nFront Matter\n============\n\nInformation about the AnyBlok / Marshmallow project.\n\nProject Homepage\n----------------\n\nAnyBlok is hosted on `github <http://github.com>`_ - the main project\npage is at https://github.com/AnyBlok/AnyBlok_Marshmallow. Source code is\ntracked here using `GIT <https://git-scm.com>`_.\n\nReleases and project status are available on Pypi at\nhttp://pypi.python.org/pypi/anyblok_marshmallow.\n\nThe most recent published version of this documentation should be at\nhttp://doc.anyblok-marshmallow.anyblok.org.\n\nProject Status\n--------------\n\nAnyBlok with Marshmallow is currently in beta status and is expected to be fairly\nstable.   Users should take care to report bugs and missing features on an as-needed\nbasis.  It should be expected that the development version may be required\nfor proper implementation of recently repaired issues in between releases;\n\nInstallation\n------------\n\nInstall released versions of AnyBlok from the Python package index with\n`pip <http://pypi.python.org/pypi/pip>`_ or a similar tool::\n\n    pip install anyblok_marshmallow\n\nInstallation via source distribution is via the ``setup.py`` script::\n\n    python setup.py install\n\nInstallation will add the ``anyblok`` commands to the environment.\n\nUnit Test\n---------\n\nRun the test with ``nose``::\n\n    pip install nose\n    nosetests anyblok_marshmallow/tests\n\nDependencies\n------------\n\nAnyBlok works with **Python 3.3** and later. The install process will\nensure that `AnyBlok <http://doc.anyblok.org>`_,\n`marshmallow <https://marshmallow.readthedocs.io/en/latest/>`_ and \n`marshmallow-sqlalchemy <https://marshmallow-sqlalchemy.readthedocs.io/en/latest/>`_ \nare installed, in addition to other dependencies. \nThe latest version of them is strongly recommended.\n\n\nContributing (hackers needed!)\n------------------------------\n\nAnyblok / Marshmallow is at a very early stage, feel free to fork, talk with core\ndev, and spread the word!\n\nAuthor\n------\n\nJean-S\u00e9bastien Suzanne\n\nContributors\n------------\n\n`Anybox <http://anybox.fr>`_ team:\n\n* Jean-S\u00e9bastien Suzanne\n\n`Sensee <http://sensee.com>`_ team:\n\n* Franck Bret\n\nBugs\n----\n\nBugs and feature enhancements to AnyBlok should be reported on the `Issue\ntracker <https://github.com/AnyBlok/AnyBlok_Marshmallow/issues>`_.\n\n.. This file is a part of the AnyBlok / Marshmallow project\n..\n..    Copyright (C) 2017 Jean-Sebastien SUZANNE <jssuzanne@anybox.fr>\n..\n.. This Source Code Form is subject to the terms of the Mozilla Public License,\n.. v. 2.0. If a copy of the MPL was not distributed with this file,You can\n.. obtain one at http://mozilla.org/MPL/2.0/.\n\n.. contents::\n\nMemento\n=======\n\nDeclare your **AnyBlok model**\n------------------------------\n\n::\n\n    from anyblok.column import Integer, String\n    from anyblok.relationship import Many2One, Many2Many\n    from anyblok import Declarations\n\n\n    @Declarations.register(Declarations.Model)\n    class City:\n\n        id = Integer(primary_key=True)\n        name = String(nullable=False)\n        zipcode = String(nullable=False)\n\n        def __repr__(self):\n            return '<City(name={self.name!r})>'.format(self=self)\n\n\n    @Declarations.register(Declarations.Model)\n    class Tag:\n\n        id = Integer(primary_key=True)\n        name = String(nullable=False)\n\n        def __repr__(self):\n            return '<Tag(name={self.name!r})>'.format(self=self)\n\n\n    @Declarations.register(Declarations.Model)\n    class Customer:\n        id = Integer(primary_key=True)\n        name = String(nullable=False)\n        tags = Many2Many(model=Declarations.Model.Tag)\n\n        def __repr__(self):\n            return '<Customer(name={self.name!r}, '\n                   'tags={self.tags!r})>'.format(self=self)\n\n\n    @Declarations.register(Declarations.Model)\n    class Address:\n\n        id = Integer(primary_key=True)\n        street = String(nullable=False)\n        city = Many2One(model=Declarations.Model.City, nullable=False)\n        customer = Many2One(\n            model=Declarations.Model.Customer, nullable=False,\n            one2many=\"addresses\")\n\n\n.. warning::\n\n    The **AnyBlok model** must be declared in a blok\n\n\nDeclare your schema\n-------------------\n\n::\n\n    from anyblok_marshmallow import ModelSchema\n    from anyblok_marshmallow.fields import Nested\n\n    class CitySchema(ModelSchema):\n\n        class Meta:\n            model = 'Model.City'\n\n\n    class TagSchema(ModelSchema):\n\n        class Meta:\n            model = 'Model.Tag'\n\n\n    class AddressSchema(ModelSchema):\n\n        # follow the relationship Many2One and One2One\n        city = Nested(CitySchema)\n\n        class Meta:\n            model = 'Model.Address'\n\n\n    class CustomerSchema(ModelSchema):\n\n        # follow the relationship One2Many and Many2Many\n        # - the many=True is required because it is *2Many\n        # - exclude is used to forbid the recurse loop\n        addresses = Nested(AddressSchema, many=True, exclude=('customer', ))\n        tags = Nested(TagSchema, many=True)\n\n        class Meta:\n            model = 'Model.Customer'\n            # optionally attach an AnyBlok registry\n            # to use for serialization, desarialization and validation\n            registry = registry\n            # optionally return an AnyBlok model instance\n            post_load_return_instance = True\n\n\n    customer_schema = CustomerSchema()\n\n\n.. note::\n\n    **New** in version **1.1.0** the Nested field must come from **anyblok_marshmallow**,\n    because **marshmallow** cache the Nested field with the context. And the context is not propagated\n    again if it changed\n\n\n(De)serialize your data and validate it\n---------------------------------------\n\n::\n\n    customer = registry.Customer.insert(name=\"JS Suzanne\")\n    tag1 = registry.Tag.insert(name=\"tag 1\")\n    customer.tags.append(tag1)\n    tag2 = registry.Tag.insert(name=\"tag 2\")\n    customer.tags.append(tag2)\n    rouen = registry.City.insert(name=\"Rouen\", zipcode=\"76000\")\n    paris = registry.City.insert(name=\"Paris\", zipcode=\"75000\")\n    registry.Address.insert(customer=customer, street=\"Somewhere\", city=rouen)\n    registry.Address.insert(customer=customer, street=\"Another place\", city=paris)\n\n    dump_data = customer_schema.dump(customer).data\n    # {\n    #     'id': 1,\n    #     'name': 'JS Suzanne',\n    #     'tags': [\n    #         {\n    #             'id': 1,\n    #             'name': 'tag 1',\n    #         },\n    #         {\n    #             'id': 2,\n    #             'name': 'tag 2',\n    #         },\n    #     ],\n    #     'addresses': [\n    #         {\n    #             'id': 1\n    #             'street': 'Somewhere'\n    #             'city': {\n    #                 'id': 1,\n    #                 'name': 'Rouen',\n    #                 'zipcode': '76000',\n    #             },\n    #         },\n    #         {\n    #             'id': 2\n    #             'street': 'Another place'\n    #             'city': {\n    #                 'id': 2,\n    #                 'name': 'Paris',\n    #                 'zipcode': '75000',\n    #             },\n    #         },\n    #     ],\n    # }\n\n    customer_schema.load(dump_data).data\n    # <Customer(name='JS Suzanne' tags=[<Tag(name='tag 1')>, <Tag (name='tag 2')>])>\n\n    errors = customer_schema.validate(dump_data)\n    # dict with all the validating errors\n\n\n.. note::\n\n    By default: the deserialization return a dict with deserialized data, \n    here we get an instance of the model because the ``CustomerSchema`` add \n    ``post_load_return_instance = True`` in their Meta\n\n\nGive the registry\n-----------------\n\nThe schema need to have the registry.\n\nIf no registry found when the de(serialization) or validation then the \n**RegistryNotFound** exception will be raised.\n\nAdd the **registry** by the Meta\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis is the solution given in the main exemple::\n\n    class CustomerSchema(ModelSchema):\n\n        class Meta:\n            model = 'Model.Customer'\n            registry = registry\n\n\nAdd the **registry** during init\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis solution is use during the instanciation\n\n::\n\n    customer_schema = CustomerSchema(registry=registry)\n\n\nAdd the **registry** by the context\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis solution is use during the instanciation or after\n\n::\n\n    customer_schema = CustomerSchema(context={'registry': registry})\n\nor\n\n::\n\n    customer_schema = CustomerSchema()\n    customer_schema.context['registry'] = registry\n\n\nAdd the **registry** when the de(serialization or validatoris called\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    customer_schema.dump(customer, registry=registry)\n    customer_schema.load(dump_data, registry=registry)\n    customer_schema.validate(dump_data, registry=registry)\n\n\n**post_load_return_instance** option\n------------------------------------\n\nAs the registry this option can be passed by initialization of the schema, by the\ncontext or during the call of methods\n\nThe value of this options can be:\n\n* False: **default**, the output is a dict\n* True: the output is an instance of the model. The primary keys must be in value\n* array of string: the output is an instance of the model, each str entry must be an existing column\n\n.. warning::\n\n    If the option is not False, and the instance can no be found, then the **instance** error will be added\n    in the errors dict of the method\n\n.. warning::\n\n    The post load is only for load method!!!\n\n\n**model** option\n----------------\n\nThis option add in the model name. As the registry, this option\ncan be passed by definition, initialization, context or during the call of the (de)serialization / validation\n\n::\n\n    class AnySchema(ModelSchema):\n\n        class Meta:\n            model = \"Model.Customer\"\n\nor\n\n::\n\n    any_schema = AnySchema(model=\"Model.customer\")\n\nor\n\n::\n\n    any_schema.context['model'] = \"Model.Customer\"\n\nor\n\n::\n\n    any_schema.dump(instance, model=\"Model.Customer\")\n    any_schema.load(dump_data, model=\"Model.Customer\")\n    any_schema.validate(dump_data, model=\"Model.Customer\")\n\n\n**only_primary_key** option\n---------------------------\n\nThis option add in the only argument the primary keys of the model. As the registry, this option\ncan be passed by definition, initialization, context or during the call of the (de)serialization / validation\n\n::\n\n    class CustomerSchema(ModelSchema):\n\n        class Meta:\n            model = \"Model.Customer\"\n            only_primary_key = True\n\nor\n\n::\n\n    customer_schema = CustomerSchema(only_primary_key=True)\n\nor\n\n::\n\n    customer_schema.context['only_primary_key'] = True\n\nor\n\n::\n\n    customer_schema.dump(instance, only_primary_key=True)\n    customer_schema.load(dump_data, only_primary_key=True)\n    customer_schema.validate(dump_data, only_primary_key=True)\n\n.. This file is a part of the AnyBlok / Marshmallow project\n..\n..    Copyright (C) 2017 Jean-Sebastien SUZANNE <jssuzanne@anybox.fr>\n..\n.. This Source Code Form is subject to the terms of the Mozilla Public License,\n.. v. 2.0. If a copy of the MPL was not distributed with this file,You can\n.. obtain one at http://mozilla.org/MPL/2.0/.\n\n.. contents::\n\nCHANGELOG\n=========\n\n1.3.0 (2017-12-23)\n------------------\n\n* [ADD] unittest on some case\n* [FIX] AnyBlok field.Function is return as MarshMallow fields.Raw\n* [ADD] fields.File, type to encode and decode to/from base 64\n\n1.2.0 (2017-11-30)\n------------------\n\n* [REF] decrease complexity\n* [IMP] Add ``validates_schema`` on ModelSchema to automaticly check\n  if the field exist on the model\n\n1.1.0 (2017-11-02)\n------------------\n\n* Add option put only the primary keys\n* Fix the Front page\n* REF model option, can be given by another way than Meta\n* Put RegistryNotFound in exceptions\n* Add Nested field, this field is not and have not to be cached\n\n1.0.2 (2017-10-25)\n------------------\n\n* Fix pypi documentation\n\n1.0.0 (2017-10-24)\n------------------\n\n* Add marshmallow schema for AnyBlok for:\n\n  - Serialization\n  - Deserialization\n  - Validation\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://anyblok-marshmallow.readthedocs.io/en/1.3.0",
    "keywords": "anyblok_marshmallow",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "anyblok_marshmallow",
    "platform": "",
    "project_url": "https://pypi.org/project/anyblok_marshmallow/",
    "release_url": "https://pypi.org/project/anyblok_marshmallow/1.3.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Add validator, serializer and deserializer to AnyBlok",
    "version": "1.3.0"
  },
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fbca021ee266c444e54aa68cdab099e6",
          "sha256": "88dbf09ac7c1f28e92c78b84b4e26391d2eb6e89b3bbe13102afddb0316344e9"
        },
        "downloads": -1,
        "filename": "anyblok_marshmallow-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fbca021ee266c444e54aa68cdab099e6",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 24477,
        "upload_time": "2017-10-24T16:11:59",
        "url": "https://files.pythonhosted.org/packages/93/32/3ef853e3af3b216addc4aae5aa8b0de27425011d96317d2b60fda6768adb/anyblok_marshmallow-1.0.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "35cf22e48d08f9f4eacbfd084a0a4f99",
          "sha256": "9de80bc720d09fb6d0de31cfd0012d9078e06cbefec95dc36d548c489eaf5cfa"
        },
        "downloads": -1,
        "filename": "anyblok_marshmallow-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "35cf22e48d08f9f4eacbfd084a0a4f99",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17974,
        "upload_time": "2017-10-24T16:11:55",
        "url": "https://files.pythonhosted.org/packages/40/ca/49a79be7e53339bcdd77e3215889c97d56b06c947a140c99522b16978700/anyblok_marshmallow-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fccabbb090067453f881d9b1e2f7fa20",
          "sha256": "c47c6176e199fd6931b627038459ddfd594f131e380764883ff4cd644bf8bf7c"
        },
        "downloads": -1,
        "filename": "anyblok_marshmallow-1.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fccabbb090067453f881d9b1e2f7fa20",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 24514,
        "upload_time": "2017-10-25T05:30:32",
        "url": "https://files.pythonhosted.org/packages/c6/f2/a6d2912b27d72376c3bf379cadbec6590a4a04efeb9e78d7b8ce00a523eb/anyblok_marshmallow-1.0.2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3772f08f6edc2103ec7ca991ebea25d5",
          "sha256": "e2215fa7d0e4c5c1899c925bb09804dc2a6c23542ed9f7d77eaf86329dd679f8"
        },
        "downloads": -1,
        "filename": "anyblok_marshmallow-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "3772f08f6edc2103ec7ca991ebea25d5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18009,
        "upload_time": "2017-10-25T05:30:27",
        "url": "https://files.pythonhosted.org/packages/5c/d2/aa574ab6b4ce972c5f67ab2d88d5ea28a1cb4f2b738ef32e53aeb8fcb4ee/anyblok_marshmallow-1.0.2.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f7196c686aa6501c9fca1d9379049144",
          "sha256": "cf73583a3126b62f944db1a9a2737ec0b507f94eb7080f78062b7d9fc706a5c3"
        },
        "downloads": -1,
        "filename": "anyblok_marshmallow-1.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f7196c686aa6501c9fca1d9379049144",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 28478,
        "upload_time": "2017-11-02T10:31:45",
        "url": "https://files.pythonhosted.org/packages/74/10/92ee23614f14c2bd3053cdce873cfc6dbc1be5976e946f4b3bf754e1df9f/anyblok_marshmallow-1.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "2b3405c77bd159bb7dbc7195a238eddd",
          "sha256": "63925709982e7bc9048f683f74e3bd097b28b2a1c15c02cdc50c6dca0a413b42"
        },
        "downloads": -1,
        "filename": "anyblok_marshmallow-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2b3405c77bd159bb7dbc7195a238eddd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19565,
        "upload_time": "2017-11-02T10:31:43",
        "url": "https://files.pythonhosted.org/packages/a1/c0/2d4b1539de657fe2e895d5d1cce6b81db838fa6c1f00f572f095419afdcc/anyblok_marshmallow-1.1.0.tar.gz"
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b26c0bd400393eeb66b1d1c63bb59e2e",
          "sha256": "72dca0dd2094cfa467ab35df0ef22cf81b226833ef6a21cc2739ad86c7aa8e5d"
        },
        "downloads": -1,
        "filename": "anyblok_marshmallow-1.2.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b26c0bd400393eeb66b1d1c63bb59e2e",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 28893,
        "upload_time": "2017-11-30T09:59:26",
        "url": "https://files.pythonhosted.org/packages/51/e1/9ab67ff9526c07b19fb0d705e91d112acc887443e3d4599e7c4789f563fe/anyblok_marshmallow-1.2.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "fc8d7f3962983a6e782bb7f009112aa8",
          "sha256": "ac85024f54118fd07a880e65bcfc5a1f8e05f084d8cb37d2aa15e0bde7cd3545"
        },
        "downloads": -1,
        "filename": "anyblok_marshmallow-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fc8d7f3962983a6e782bb7f009112aa8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19972,
        "upload_time": "2017-11-30T09:59:24",
        "url": "https://files.pythonhosted.org/packages/38/8a/381a098c9a1322177982fe7b32bbc4e975801ad9832e25ef962714a1eea8/anyblok_marshmallow-1.2.0.tar.gz"
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2c18175fa99f6143e48849f8a0d6f097",
          "sha256": "fab83d8feb7e9fd99f694885fee84fdf0b0032abbcf9944ddde0cb86e7e4c864"
        },
        "downloads": -1,
        "filename": "anyblok_marshmallow-1.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2c18175fa99f6143e48849f8a0d6f097",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 31890,
        "upload_time": "2017-12-23T11:30:00",
        "url": "https://files.pythonhosted.org/packages/af/77/ae121ed04e0430d38e62d20337783419f083fdd949ef70870f82c8a6bb5d/anyblok_marshmallow-1.3.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b2ac71373b1fd41a8b534f056e442586",
          "sha256": "c05cd680d7f30df10b82073857dad2287872646218135609dc1f858a29182f48"
        },
        "downloads": -1,
        "filename": "anyblok_marshmallow-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b2ac71373b1fd41a8b534f056e442586",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21628,
        "upload_time": "2017-12-23T11:29:57",
        "url": "https://files.pythonhosted.org/packages/e8/93/5fd768491415e2a2b50354ad0e20d24016b52830917feb0d146edf30fbad/anyblok_marshmallow-1.3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2c18175fa99f6143e48849f8a0d6f097",
        "sha256": "fab83d8feb7e9fd99f694885fee84fdf0b0032abbcf9944ddde0cb86e7e4c864"
      },
      "downloads": -1,
      "filename": "anyblok_marshmallow-1.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2c18175fa99f6143e48849f8a0d6f097",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 31890,
      "upload_time": "2017-12-23T11:30:00",
      "url": "https://files.pythonhosted.org/packages/af/77/ae121ed04e0430d38e62d20337783419f083fdd949ef70870f82c8a6bb5d/anyblok_marshmallow-1.3.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "b2ac71373b1fd41a8b534f056e442586",
        "sha256": "c05cd680d7f30df10b82073857dad2287872646218135609dc1f858a29182f48"
      },
      "downloads": -1,
      "filename": "anyblok_marshmallow-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b2ac71373b1fd41a8b534f056e442586",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 21628,
      "upload_time": "2017-12-23T11:29:57",
      "url": "https://files.pythonhosted.org/packages/e8/93/5fd768491415e2a2b50354ad0e20d24016b52830917feb0d146edf30fbad/anyblok_marshmallow-1.3.0.tar.gz"
    }
  ]
}