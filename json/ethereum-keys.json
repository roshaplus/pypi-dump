{
  "info": {
    "author": "Piper Merriam",
    "author_email": "pipermerriam@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "Ethereum Keys\n=============\n\nA common API for Ethereum key operations with pluggable backends.\n\nInstallation\n------------\n\n.. code:: sh\n\n    pip install ethereum-keys\n\nQuickStart\n----------\n\n.. code:: python\n\n    >>> from eth_keys import KeyAPI\n    >>> keys = KeyAPI()\n    >>> pk = keys.PrivateKey(b'\\x01' * 32)\n    >>> signature = pk.sign(b'a message')\n    >>> pk\n    '0x0101010101010101010101010101010101010101010101010101010101010101'\n    >>> pk.public_key\n    '0x1b84c5567b126440995d3ed5aaba0565d71e1834604819ff9c17f5e9d5dd078f70beaf8f588b541507fed6a642c5ab42dfdf8120a7f639de5122d47a69a8e8d1'\n    >>> signature\n    '0xccda990dba7864b79dc49158fea269338a1cf5747bc4c4bf1b96823e31a0997e7d1e65c06c5bf128b7109e1b4b9ba8d1305dc33f32f624695b2fa8e02c12c1e000'\n    >>> pk.public_key.to_checksum_address()\n    '0x1a642f0E3c3aF545E7AcBD38b07251B3990914F1'\n    >>> signature.verify_msg(b'a message', pk.public_key)\n    True\n    >>> signature.recover_msg(b'a message') == pk.public_key\n    True\n\nDocumentation\n-------------\n\n``KeyAPI(backend=None)``\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``KeyAPI`` object is the primary API for interacting with the\n``ethereum-keys`` libary. The object takes a single optional argument in\nit's constructor which designates what backend will be used for\neliptical curve cryptography operations. The built-in backends are:\n\n-  ``eth_keys.backends.NativeECCBackend`` (**default**): A pure python\n   implementation of the ECC operations.\n-  ``eth_keys.backends.CoinCurveECCBackend``: Uses the\n   ```coincurve`` <https://github.com/ofek/coincurve>`__ library for ECC\n   operations.\n\n    Note: The ``coincurve`` library is not automatically installed with\n    ``ethereum-keys`` and must be installed separately.\n\nThe ``backend`` argument can be given in any of the following forms.\n\n-  Instance of the backend class\n-  The backend class\n-  String with the dot-separated import path for the backend class.\n\n.. code:: python\n\n    >>> from eth_keys import KeyAPI\n    >>> from eth_keys.backends import NativeECCBackend\n    # These are all the same\n    >>> keys = KeyAPI(NativeECCBackend)\n    >>> keys = KeyAPI(NativeECCBackend())\n    >>> keys = KeyAPI('eth_keys.backends.NativeECCBackend')\n    # Or for the coincurve base backend\n    >>> keys = KeyAPI('eth_keys.backends.CoinCurveECCBackend')\n\n``KeyAPI.ecdsa_sign(message_hash, private_key) -> Signature``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis method returns a signature for the given ``message_hash``, signed\nby the provided ``public_key``.\n\n-  ``message_hash``: **must** be a byte string of length 32\n-  ``private_key``: **must** be an instance of ``PrivateKey``\n\n``KeyAPI.ecdsa_verify(message_hash, signature, public_key) -> bool``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReturns ``True`` or ``False`` based on whether the provided\n``signature`` is a valid signature for the provided ``message_hash`` and\n``public_key``.\n\n-  ``message_hash``: **must** be a byte string of length 32\n-  ``signature``: **must** be an instance of ``Signature``\n-  ``public_key``: **must** be an instance of ``PublicKey``\n\n``KeyAPI.ecdsa_recover(message_hash, signature) -> PublicKey``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReturns the ``PublicKey`` instances recovered from the given\n``signature`` and ``message_hash``.\n\n-  ``message_hash``: **must** be a byte string of length 32\n-  ``signature``: **must** be an instance of ``Signature``\n\n``KeyAPI.private_key_to_public_key(private_key) -> PublicKey``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nReturns the ``PublicKey`` instances computed from the given\n``private_key`` instance.\n\n-  ``private_key``: **must** be an instance of ``PublicKey``\n\n``KeyAPI.PublicKey(public_key_bytes)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``PublicKey`` class takes a single argument which must be a bytes\nstring with length 64.\n\n    Note that some libraries prefix the byte serialized public key with\n    a leading ``\\x04`` byte which must be removed before use with the\n    ``PublicKey`` object.\n\nThe following methods are available:\n\n``PublicKey.from_private(private_key) -> PublicKey``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis ``classmethod`` returns a new ``PublicKey`` instance computed from\nthe given ``private_key``.\n\n-  ``private_key`` may either be a byte string of length 32 or an\n   instance of the ``KeyAPI.PrivateKey`` class.\n\n``PublicKey.recover_msg(message, signature) -> PublicKey``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis ``classmethod`` returns a new ``PublicKey`` instance computed from\nthe provided ``message`` and ``signature``.\n\n-  ``message`` **must** be a byte string\n-  ``signature`` **must** be an instance of ``KeyAPI.Signature``\n\n``PublicKey.recover_msg_hash(message_hash, signature) -> PublicKey``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSame as ``PublicKey.recover_msg`` except that ``message_hash`` should be\nthe Keccak hash of the ``message``.\n\n``PublicKey.verify_msg(message, signature) -> bool``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis method returns ``True`` or ``False`` based on whether the signature\nis a valid for the given message.\n\n``PublicKey.verify_msg_hash(message_hash, signature) -> bool``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSame as ``PublicKey.verify_msg`` except that ``message_hash`` should be\nthe Keccak hash of the ``message``.\n\n``PublicKey.to_address() -> text``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns the hex encoded ethereum address for this public key.\n\n``PublicKey.to_checksum_address() -> text``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns the ERC55 checksum formatted ethereum address for this public\nkey.\n\n``PublicKey.to_canonical_address() -> bytes``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns the 20-byte representation of the ethereum address for this\npublic key.\n\n``KeyAPI.PrivateKey(private_key_bytes)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``PrivateKey`` class takes a single argument which must be a bytes\nstring with length 32.\n\nThe following methods and properties are available\n\n``PrivateKey.public_key``\n^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis *property* holds the ``PublicKey`` instance coresponding to this\nprivate key.\n\n``PrivateKey.sign(message) -> Signature``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis method returns a signature for the given ``message`` in the form of\na ``Signature`` instance\n\n-  ``message`` **must** be a byte string.\n\n``PrivateKey.sign_hash(message_hash) -> Signature``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSame as ``PrivateKey.sign`` except that ``message_hash`` should be the\nKeccak hash of the ``message``.\n\n``KeyAPI.Signature(signature_bytes=None, vrs=None)``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe ``Signature`` class can be instantiated in one of two ways.\n\n-  ``signature_bytes``: a bytes string with length 65.\n-  ``vrs``: a 3-tuple composed of the integers ``v``, ``r``, and ``s``.\n\n    Note: If using the ``signature_bytes`` to instantiate, the byte\n    string should be encoded as ``r_bytes | s_bytes | v_bytes`` where\n    ``|`` represents concatenation. ``r_bytes`` and ``s_bytes`` should\n    be 32 bytes in length. ``v_bytes`` should be a single byte ``\\x00``\n    or ``\\x01``.\n\nThe following methods and properties are available\n\n``Signature.v``\n^^^^^^^^^^^^^^^\n\nThis property returns the ``v`` value from the signature as an integer.\n\n``Signature.r``\n^^^^^^^^^^^^^^^\n\nThis property returns the ``r`` value from the signature as an integer.\n\n``Signature.s``\n^^^^^^^^^^^^^^^\n\nThis property returns the ``s`` value from the signature as an integer.\n\n``Signature.vrs``\n^^^^^^^^^^^^^^^^^\n\nThis property returns a 3-tuple of ``(v, r, s)``.\n\n``Signature.verify_msg(message, public_key) -> bool``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis method returns ``True`` or ``False`` based on whether the signature\nis a valid for the given public key.\n\n-  ``message``: **must** be a byte string.\n-  ``public_key``: **must** be an instance of ``PublicKey``\n\n``Signature.verify_msg_hash(message_hash, public_key) -> bool``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSame as ``Signature.verify_msg`` except that ``message_hash`` should be\nthe Keccak hash of the ``message``.\n\n``Signature.recover_msg(message) -> PublicKey``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis method returns a ``PublicKey`` instance recovered from the\nsignature.\n\n-  ``message``: **must** be a byte string.\n\n``Signature.recover_msg_hash(message_hash) -> PublicKey``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSame as ``Signature.recover_msg`` except that ``message_hash`` should be\nthe Keccak hash of the ``message``.\n\nExceptions\n~~~~~~~~~~\n\n``eth_api.exceptions.ValidationError``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis error is raised during instantaition of any of the ``PublicKey``,\n``PrivateKey`` or ``Signature`` classes if their constructor parameters\nare invalid.\n\n``eth_api.exceptions.BadSignature``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThis error is raised from any of the ``recover`` or ``verify`` methods\ninvolving signatures if the signature is invalid.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pipermerriam/ethereum-keys",
    "keywords": "ethereum",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ethereum-keys",
    "platform": "",
    "project_url": "https://pypi.org/project/ethereum-keys/",
    "release_url": "https://pypi.org/project/ethereum-keys/0.1.0a5/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Common API for Ethereum key operations.",
    "version": "0.1.0a5"
  },
  "releases": {
    "0.1.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b1c501c9dab818ec436dbcb8b5b3a57c",
          "sha256": "ca103f0e433e6836f1debc2268dea655cf6f2e7b2ac2a99ff0a23aac24d4965e"
        },
        "downloads": 0,
        "filename": "ethereum_keys-0.1.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b1c501c9dab818ec436dbcb8b5b3a57c",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 16815,
        "upload_time": "2017-09-21T21:00:15",
        "url": "https://files.pythonhosted.org/packages/65/dd/cdd801c51810fedf5c987e5b7e3921ff28a55c900ae845e7ad6afadff15c/ethereum_keys-0.1.0a1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "53bcb48d12e68dec48e288d37826121f",
          "sha256": "0708f0577a84d2252b6ae4cab48f9248ca062ed679d449b821b2492dff4c10f6"
        },
        "downloads": 0,
        "filename": "ethereum-keys-0.1.0a1.tar.gz",
        "has_sig": false,
        "md5_digest": "53bcb48d12e68dec48e288d37826121f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11148,
        "upload_time": "2017-09-21T21:00:11",
        "url": "https://files.pythonhosted.org/packages/4f/3e/e26502c1d2c425c1cc382db2cb7902ae5a1e4d18017f08a9e0b0e45822e9/ethereum-keys-0.1.0a1.tar.gz"
      }
    ],
    "0.1.0a2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "590ec080afa4f85f919eb3e51b26ad80",
          "sha256": "f0483a3f7161e5bc70cd3cb56f691314a84720c2a3509f79f61aa634972847b6"
        },
        "downloads": 0,
        "filename": "ethereum_keys-0.1.0a2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "590ec080afa4f85f919eb3e51b26ad80",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 16991,
        "upload_time": "2017-09-21T22:49:28",
        "url": "https://files.pythonhosted.org/packages/6c/89/a27656dbcff981f70eebc93fa3e69b42e8667f4cabb166b4cf9170b1cc51/ethereum_keys-0.1.0a2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4505ee7fe8e2df4b3f581b1b03f18dd0",
          "sha256": "3c4cf25efc7973f4e7ec3cb5fa0c4a5c3c454e19dbf6304df5b2ccc25b786107"
        },
        "downloads": 0,
        "filename": "ethereum-keys-0.1.0a2.tar.gz",
        "has_sig": false,
        "md5_digest": "4505ee7fe8e2df4b3f581b1b03f18dd0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11287,
        "upload_time": "2017-09-21T22:49:26",
        "url": "https://files.pythonhosted.org/packages/99/0a/23179ccd96807599343d0b78a29e0afb3b1e1ef74e3998fc284a721b7e74/ethereum-keys-0.1.0a2.tar.gz"
      }
    ],
    "0.1.0a3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1ecfe7f657aab8269e5a6de7cbe0886d",
          "sha256": "5e09adc3ec52a1d018719b1edd1f682f418366bba978cb7be66ed61ca257bfcc"
        },
        "downloads": 0,
        "filename": "ethereum_keys-0.1.0a3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1ecfe7f657aab8269e5a6de7cbe0886d",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 17432,
        "upload_time": "2017-09-22T16:27:14",
        "url": "https://files.pythonhosted.org/packages/84/c9/2e54f85be5e1e2bd24aad872b183872428931afdfcb6d22d15ddd4467512/ethereum_keys-0.1.0a3-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "16ff0e2bbef58640baccf7555a5b429e",
          "sha256": "be006256ae1f75f9ed37678fc466fffeed8983a03ea627fec7026cc4b057fa25"
        },
        "downloads": 0,
        "filename": "ethereum-keys-0.1.0a3.tar.gz",
        "has_sig": false,
        "md5_digest": "16ff0e2bbef58640baccf7555a5b429e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11629,
        "upload_time": "2017-09-22T16:27:12",
        "url": "https://files.pythonhosted.org/packages/e1/d6/06e8fa5a421e5c931e326d4fb1e48578e532a40911f3f7fa6b3fe82dd83f/ethereum-keys-0.1.0a3.tar.gz"
      }
    ],
    "0.1.0a4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "44ad86140053583d703e32382e5409d5",
          "sha256": "e685321a21a713a1e58023953f110605b134f11c3fd5b31825c67151584be712"
        },
        "downloads": 0,
        "filename": "ethereum_keys-0.1.0a4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "44ad86140053583d703e32382e5409d5",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 17485,
        "upload_time": "2017-09-22T17:11:40",
        "url": "https://files.pythonhosted.org/packages/60/ec/a73d74eb523f2c2d242004e50699c4454446fba92cf21b9c0f31d2bf41c6/ethereum_keys-0.1.0a4-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4cdc4b6eda014e9cb7973099f2c7fa78",
          "sha256": "13d7df71a8bbff0b50c4565cd2e81e1eabc9d1a1a02521ad2c7b6189815ccda8"
        },
        "downloads": 0,
        "filename": "ethereum-keys-0.1.0a4.tar.gz",
        "has_sig": false,
        "md5_digest": "4cdc4b6eda014e9cb7973099f2c7fa78",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11655,
        "upload_time": "2017-09-22T17:11:37",
        "url": "https://files.pythonhosted.org/packages/00/8b/c8585532c8f70734e149cbcd896eaeab0673ec7350a69fcaa44db6c8bf20/ethereum-keys-0.1.0a4.tar.gz"
      }
    ],
    "0.1.0a5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2ac1d1f1e95e2e9dd998cf94ada43a6d",
          "sha256": "41fcd1a962633df2e39778ad97cc2b96ea1ec8e9e56cac0c8bacfd39dcd7c80d"
        },
        "downloads": 0,
        "filename": "ethereum_keys-0.1.0a5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2ac1d1f1e95e2e9dd998cf94ada43a6d",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 17484,
        "upload_time": "2017-09-22T22:31:13",
        "url": "https://files.pythonhosted.org/packages/28/2c/04f3913f860e148de29c4b0ba545d973b2fac06708ac71f37c7622fab841/ethereum_keys-0.1.0a5-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "28c295cbf5e7fbe513ee14e2e464876a",
          "sha256": "593576ecd97acaeffd4899250cb9e98584576e18c7064f2a794ef7d275ef0843"
        },
        "downloads": 0,
        "filename": "ethereum-keys-0.1.0a5.tar.gz",
        "has_sig": false,
        "md5_digest": "28c295cbf5e7fbe513ee14e2e464876a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11660,
        "upload_time": "2017-09-22T22:31:06",
        "url": "https://files.pythonhosted.org/packages/49/b2/8d1cfc4da1b9944d5860165b7bc6afa4f1aad6ab1b550849bf01a9801866/ethereum-keys-0.1.0a5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2ac1d1f1e95e2e9dd998cf94ada43a6d",
        "sha256": "41fcd1a962633df2e39778ad97cc2b96ea1ec8e9e56cac0c8bacfd39dcd7c80d"
      },
      "downloads": 0,
      "filename": "ethereum_keys-0.1.0a5-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2ac1d1f1e95e2e9dd998cf94ada43a6d",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 17484,
      "upload_time": "2017-09-22T22:31:13",
      "url": "https://files.pythonhosted.org/packages/28/2c/04f3913f860e148de29c4b0ba545d973b2fac06708ac71f37c7622fab841/ethereum_keys-0.1.0a5-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "28c295cbf5e7fbe513ee14e2e464876a",
        "sha256": "593576ecd97acaeffd4899250cb9e98584576e18c7064f2a794ef7d275ef0843"
      },
      "downloads": 0,
      "filename": "ethereum-keys-0.1.0a5.tar.gz",
      "has_sig": false,
      "md5_digest": "28c295cbf5e7fbe513ee14e2e464876a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 11660,
      "upload_time": "2017-09-22T22:31:06",
      "url": "https://files.pythonhosted.org/packages/49/b2/8d1cfc4da1b9944d5860165b7bc6afa4f1aad6ab1b550849bf01a9801866/ethereum-keys-0.1.0a5.tar.gz"
    }
  ]
}