{
  "info": {
    "author": "Alexander Shorin",
    "author_email": "kxepal@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "..\n.. Copyright 2017, Rambler Digital Solutions\n..\n.. Licensed under the Apache License, Version 2.0 (the \"License\");\n.. you may not use this file except in compliance with the License.\n.. You may obtain a copy of the License at\n..\n.. http://www.apache.org/licenses/LICENSE-2.0\n..\n.. Unless required by applicable law or agreed to in writing, software\n.. distributed under the License is distributed on an \"AS IS\" BASIS,\n.. WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n.. See the License for the specific language governing permissions and\n.. limitations under the License.\n..\n\n===================\nairflow-declarative\n===================\n\nAirflow declarative DAGs via YAML.\n\nCompatibility:\n- Python 2.7 / 3.5+\n- Airflow 1.8+ (should work with older versions as well, at least down to 1.7)\n\nKey Features\n============\n\n- Declarative DAGs in plain text YAML helps a lot to understand how DAG will\n  looks like. Made for humans, not programmers.\n- It makes extremely hard to turn your DAGs into code mess. Even if you make\n  complicated YAMLs generator the result would be readable for humans.\n- No more guilty about coupling business logic with task management system\n  (Airflow). They now could coexists separated.\n- Static analysis becomes a trivial task.\n- It's a good abstraction to create your own scheduler/worker compatible with\n  original Airflow one.\n\nExamples\n========\n\nCheck `tests/dags` directory for example of DAGs which will works and which\nwon't. Use `src/airflow_declarative/schema.py` module for the reference about\nYAML file schema. It should be self descriptive.\n\nDon't be shy to experiment: `trafaret-config`_ will help you to understand\nwhat had gone wrong and why and where.\n\n.. _trafaret-config: https://pypi.python.org/pypi/trafaret-config\n\nUsage\n=====\n\nUpstream Airflow\n----------------\n\nTo use with current (up to 1.8.2 release) upstream Airflow, you need to provide\nDAGs via Python file anyway. That should looks something like this:\n\n.. code-block:: python\n\n    import os\n\n    import airflow_declarative\n\n    ROOT = '/usr/local/share/airflow'  # here should be yours path, whatever\n    DAGS = [\n        airflow_declarative.from_path(os.path.join(root, item))\n        for item in os.listdir(ROOT)\n        if item.endswith(('.yml', '.yaml'))\n    ]\n\n    globals().update({dag.dag_id: dag for dag in DAGS})\n\n\nAnd place such file to ``AIRFLOW_HOME`` directory. Airflow will load dags in\nold fashion way.\n\nPatched Airflow\n---------------\n\nCheckout `patches` directory for patches against Airflow release to have native\ndeclarative dags support on it. In this case no Python files are need on\n``AIRFLOW_HOME`` path - just put there your YAMLs, they'll get loaded\nautomagically.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/rambler-digital-solutions/airflow-declarative",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "airflow-declarative",
    "platform": "",
    "project_url": "https://pypi.org/project/airflow-declarative/",
    "release_url": "https://pypi.org/project/airflow-declarative/1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Airflow DAGs done declaratively",
    "version": "1.0"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5690eeb6d252be077049e9c3fbf0f193",
          "sha256": "ced3f80d93d98dff72ac510dc3ead91aa52b2a309d5ee793e1459998e0ca6e09"
        },
        "downloads": 0,
        "filename": "airflow_declarative-1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5690eeb6d252be077049e9c3fbf0f193",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 16185,
        "upload_time": "2017-07-27T11:19:26",
        "url": "https://files.pythonhosted.org/packages/0c/1e/6a64d3ac3695df26a58ef47c19c349e46084d22a3bbe5d761cabdca0f1c2/airflow_declarative-1.0-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5690eeb6d252be077049e9c3fbf0f193",
        "sha256": "ced3f80d93d98dff72ac510dc3ead91aa52b2a309d5ee793e1459998e0ca6e09"
      },
      "downloads": 0,
      "filename": "airflow_declarative-1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5690eeb6d252be077049e9c3fbf0f193",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 16185,
      "upload_time": "2017-07-27T11:19:26",
      "url": "https://files.pythonhosted.org/packages/0c/1e/6a64d3ac3695df26a58ef47c19c349e46084d22a3bbe5d761cabdca0f1c2/airflow_declarative-1.0-py2.py3-none-any.whl"
    }
  ]
}