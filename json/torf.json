{
  "info": {
    "author": "Random User",
    "author_email": "rndusr@posteo.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "torf\n====\n\ntorf is a Python (>=3.6) module for creating, parsing and editing .torrent\nfiles. It started as a fork of `dotorrent <https://github.com/kz26/dottorrent>`_\nbut turned into a rewrite with more features like full access to the torrent's\nmetainfo, magnet link generation, validation and more.\n\nInstallation\n------------\n\ntorf is available on `PyPI <https://pypi.org/project/torf>`_.\n\nThe latest development version is in the master branch on\n`Github <https://github.org/rndusr/torf>`_.\n\nLicense\n-------\n\n`MIT <https://opensource.org/licenses/MIT>`_\n\nDocumentation\n-------------\n\n::\n\n   Create a new torrent object:\n\n   >>> from torf import Torrent\n   >>> torrent = Torrent('path/to/My Torrent',\n   ...                   trackers=['https://localhost:123/announce'],\n   ...                   comment='This is my first torrent')\n\n   Convenient access to metainfo via properties:\n\n   >>> torrent.comment\n   'This is my first torrent. Be gentle.'\n   >>> torrent.private = True\n\n   Full control over unencoded metainfo:\n\n   >>> torrent.metainfo['info']['private']\n   True\n   >>> torrent.metainfo['more stuff'] = {'foo': 12,\n   ...                                   'bar': ('x', 'y', 'z')}\n\n   Start hashing and update progress once per second:\n\n   >>> def callback(filepath, pieces_done, pieces_total):\n   ...     print(f'{pieces_done/pieces_total*100:3.0f} % done')\n   >>> success = torrent.generate(callback, interval=1)\n     1 % done\n     2 % done\n     [...]\n   100 % done\n\n   Write torrent file:\n\n   >>> with open('my_torrent.torrent', 'wb') as f:\n   ...    torrent.write(f)\n\n   Generate magnet link:\n\n   >>> torrent.magnet()\n   'magnet:?xt=urn:btih:e167b1fbb42ea72f051f4f50432703308efb8fd1&dn=My+Torrent&xl=142631&tr=https%3A%2F%2Flocalhost%3A123%2Fannounce'\n\n   Read torrent:\n\n   >>> with open('my_torrent.torrent', 'rb') as f:\n   ...    t = Torrent.read(f)\n   >>> t.comment\n   'This is my first torrent. Be gentle.'\n\n   Methods defined here:\n\n   __init__(self, path=None, exclude=(), trackers=(), webseeds=(), httpseeds=(),\n            private=False, comment=None, creation_date=None, created_by=None,\n            source=None, piece_size=None, include_md5=False)\n       Initialize self.\n\n   convert(self)\n       Return `metainfo` with all keys encoded to bytes and all values encoded\n       to bytes, int, list or OrderedDict\n\n       Raise MetainfoError on values that cannot be converted properly.\n\n   dump(self, validate=True)\n       Return `metainfo` as validated, bencoded byte string\n\n       validate: Whether to run validate() first\n\n   generate(self, callback=None, interval=0)\n       Set 'pieces' in 'info' dictionary of `metainfo`\n\n       callback: Callable with signature (filename, pieces_completed,\n                 pieces_total); if `callable` returns anything that is not\n                 None, hashing is canceled\n       interval: Number of seconds between calls to `callback`\n\n       Raise PathEmptyError if `path` contains no data.\n\n       Return True if 'pieces' was successfully added to `metainfo`.\n       Return False if `callback` canceled the operation.\n\n   magnet(self, name=True, size=True, trackers=True, tracker=False, validate=True)\n       BTIH Magnet URI (generate() must run first)\n\n       name: Whether to include the name\n       size: Whether to include the size\n       trackers: Whether to include all trackers\n       tracker: Whether to include only the first tracker of the first tier\n                (overrides `trackers`)\n       validate: Whether to run validate() first\n\n   validate(self)\n       Check if all mandatory keys exist in `metainfo` and are of expected types\n\n       The necessary values are documented here:\n\n           http://bittorrent.org/beps/bep_0003.html\n           https://wiki.theory.org/index.php/BitTorrentSpecification#Metainfo_File_Structure\n\n       Note that 'announce' is not considered mandatory because of DHT.\n\n       Raise MetainfoError if `metainfo` would not generate a valid torrent\n       file or magnet link.\n\n   write(self, stream, validate=True)\n       Write torrent metainfo to file object (generate() must run first)\n\n       stream: A stream or file object (must be opened in 'wb' mode)\n       validate: Whether to run validate() first\n\n   ----------------------------------------------------------------------\n   Class methods defined here:\n\n   read(stream, validate=True) from builtins.type\n       Read torrent metainfo from file object\n\n       stream: A stream or file object (must be opened in 'rb' mode)\n       validate: Whether to run validate() on the Torrent object\n\n       Raise MetainfoParseError if metainfo is not a valid bencoded byte\n       string.\n\n       Return a new Torrent object.\n\n   ----------------------------------------------------------------------\n   Data descriptors defined here:\n\n   comment\n       Comment string or None\n\n       Setting this property sets or removes 'comment' in `metainfo`.\n\n   created_by\n       Application name or None\n\n       Setting this property sets or removes 'created by' in `metainfo`.\n\n   creation_date\n       datetime object, int (as from time.time()) or None\n\n       Setting this property sets or removes 'creation date' in `metainfo`.\n\n   exclude\n       List of filename patterns to exclude:\n\n           *      matches everything\n           ?      matches any single character\n           [seq]  matches any character in seq\n           [!seq] matches any char not in seq\n\n   filepaths\n       Yield absolute paths to local files in `path`\n\n   files\n       Yield relative paths to files specified in `metainfo`\n\n       Paths include the torrent's name.\n\n       Note that the paths may not exist. See `filepaths` for existing files.\n\n   httpseeds\n       List of httpseed URLs or None\n\n       http://bittorrent.org/beps/bep_0017.html\n\n   include_md5\n       Whether to include MD5 sums for each file\n\n       This takes only effect when generate() is called.\n\n   infohash\n       SHA1 info hash (generate() must run first)\n\n   infohash_base32\n       Base32 encoded SHA1 info hash (generate() must run first)\n\n   metainfo\n       Unencoded torrent metainfo as mutable mapping\n\n       You can put anything in here as long as keys are convertable to bytes\n       and values are convertable to bytes, int, list or dict. See also\n       convert() and validate().\n\n       'info' is guaranteed to exist.\n\n   name\n       Torrent name\n\n       Default to last item in `path` or None if `path` is None.\n\n       Setting this property sets or removes 'name' in the 'info' dictionary of\n       `metainfo`.\n\n   path\n       Path to torrent content or None\n\n   piece_size\n       Piece size/length or None to pick one automatically\n\n       Setting this property sets 'piece length' in the 'info' dictionary in\n       `metainfo`.\n\n       Getting this property if it hasn't been set calculates 'piece length' so\n       that there are approximately 1500 pieces in total. The result is stored\n       in `metainfo`.\n\n   private\n       Whether torrent should use trackers exclusively for peer discovery\n\n       Setting this property sets or removes 'private' in the 'info' dictionary\n       of `metainfo`.\n\n   randomize_infohash\n       Whether to ensure that `infohash` is always different\n\n       This allows cross-seeding without changing `piece_size` manually.\n\n       Setting this property to True sets 'entropy' in the 'info' dictionary of\n       `metainfo` to a random integer. Setting it to False removes it if\n       present.\n\n   size\n       Total size of content in bytes\n\n       If the 'info' dictionary in `metainfo` doesn't have 'length' or 'files'\n       set, return None instead.\n\n   source\n       Source string or None\n\n       Setting this property sets or removes 'source' in `metainfo`.\n\n   trackers\n       List of tiers of announce URLs or None\n\n       A tier is either a single announce URL (string) or a list (any iterable)\n       of announce URLs.\n\n       Setting this property sets or removes 'announce' and 'announce-list' in\n       `metainfo`. 'announce' is set to the first tracker of the first tier.\n\n   webseeds\n       List of webseed URLs or None\n\n       http://bittorrent.org/beps/bep_0019.html\n\n   ----------------------------------------------------------------------\n   Data and other attributes defined here:\n\n   MAX_PIECE_SIZE = 67108864\n\n   MIN_PIECE_SIZE = 16384",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/rndusr/torf",
    "keywords": "bittorrent torrent bencode magnet",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torf",
    "platform": "",
    "project_url": "https://pypi.org/project/torf/",
    "release_url": "https://pypi.org/project/torf/1.0rc1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "High-level Python 3 module for creating and parsing torrent files",
    "version": "1.0rc1"
  },
  "releases": {
    "1.0rc1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d2c11c233e0740fb32adc99ae1630952",
          "sha256": "425558b380bfcefd6a0eebc6b308fe888be3828e0db2bc5c822db199cbb87567"
        },
        "downloads": -1,
        "filename": "torf-1.0rc1.tar.gz",
        "has_sig": false,
        "md5_digest": "d2c11c233e0740fb32adc99ae1630952",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14690,
        "upload_time": "2017-12-21T15:05:39",
        "url": "https://files.pythonhosted.org/packages/8f/8a/a85a4b79d9b7666438084f81bb732af2f38341f1c3cbef7aaff993db6a02/torf-1.0rc1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d2c11c233e0740fb32adc99ae1630952",
        "sha256": "425558b380bfcefd6a0eebc6b308fe888be3828e0db2bc5c822db199cbb87567"
      },
      "downloads": -1,
      "filename": "torf-1.0rc1.tar.gz",
      "has_sig": false,
      "md5_digest": "d2c11c233e0740fb32adc99ae1630952",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 14690,
      "upload_time": "2017-12-21T15:05:39",
      "url": "https://files.pythonhosted.org/packages/8f/8a/a85a4b79d9b7666438084f81bb732af2f38341f1c3cbef7aaff993db6a02/torf-1.0rc1.tar.gz"
    }
  ]
}