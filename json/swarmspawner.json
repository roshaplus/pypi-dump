{
  "info": {
    "author": "Cassiny.io O\u00dc",
    "author_email": "info@cassiny.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# SwarmSpawner\n\n**SwarmSpawner** enables [JupyterHub](https://github.com/jupyterhub/jupyterhub) \nto spawn single user notebook servers in Docker Services.\n\nMore info about Docker Services [here](https://docs.docker.com/engine/reference/commandline/service_create/).\n\n## Prerequisites\n\nPython version 3.3 and above is required.\n\nClone the repo:\n\n```bash\ngit clone https://github.com/cassinyio/SwarmSpawner\ncd SwarmSpawner\n```\n\nInstall dependencies:\n\n```bash\npip install -r requirements.txt\n```\n\n## Installation\n\nInstall SwarmSpawner to the system:\n```bash\npython setup.py install\n```\n\n## Configuration\n\n### SwarmSpawner\n\nDocker Engine in Swarm mode and the related services work in a different way compared to Docker containers.\n\n\nTell JupyterHub to use SwarmSpawner by adding the following line to \nyour `jupyterhub_config.py`:\n\n```python\nc.JupyterHub.spawner_class = 'cassinyspawner.SwarmSpawner'\n\n\n# This should be the name of the jupyterhub service\nc.JupyterHub.hub_ip = 'jupyterhub'\n```\n\nThere is the possibility to set parameters using `user_options`\n\n\n```python\n# To use user_options in service creation\nc.SwarmSpawner.use_user_options = False\n```\n\nTo control the creation of the services you have 2 ways, using _jupyterhub_config.py_ or _user_options_.\n\nRemember that at the end you are just using the [Docker Engine API](https://docs.docker.com/engine/api/).\n\n(https://docs.docker.com/engine/reference/commandline/service_create/#/specify-service-constraints---constraint)\n\n### Use a configuration inside jupyterhub_config.py\nYou can define *container_spec*, *resource_spec* and _networks_ within jupyterhub_config.py.\n\n#### [Container_spec](https://github.com/docker/docker-py/blob/master/docs/user_guides/swarm_services.md)\n'command' depends from the image that you are using.\nIf you use one of the images from the Jupyter docker stack you need to specify a command: /usr/local/bin/start-singleuser.sh\n\nIf you are using a specific image, well it's up to you to specify the right command.\n\n```python\n    c.SwarmSpawner.container_spec = {\n                  # The command to be run inside the service\n                  'command' : '/usr/local/bin/start-singleuser.sh', #(string or list) \n                  'image' : 'YourImage',\n                  'mounts' : mounts\n          }\n```\n\n\n##### Bind a Host dir\nWith mounts your are going to mount a local directory of the host inside the container.\n\n<u>Remember that source should exist in the node where you are creating the service.</u>\n\nnotebook_dir = os.environ.get('DOCKER_NOTEBOOK_DIR') or '/home/jovyan/work'\nc.SwarmSpawner.notebook_dir = notebook_dir\n\n```python\nmounts = [{'type' : 'bind',\n           'source' : 'MountPointOnTheHost',\n           'target' : 'MountPointInsideTheContainer',}]\n```\n\n##### Mount a named volume\nWith mounts your are going to mount a Docker Volume inside the container.\nIf the volume doesn't exist it will be created.\n\n```python\nmounts = [{'type' : 'volume',\n           'source' : 'NameOfTheVolume',\n           'target' : 'MountPointInsideTheContainer',}]\n```\n\nFor this type of volume you can also specify something like this:\n\n```python\nmounts = [{'type' : 'volume',\n           'source' : 'jupyterhub-user-{username}',\n           'target' : 'MountPointInsideTheContainer',}]\n```\n\nusername will be the hashed version of the username.\n\n\n##### Mount an anonymous volume\n__This kind of volume will be removed with the service__\n```python\nmounts = [{'type' : 'volume',\n           'target' : 'MountPointInsideTheContainer',}]\n```\n\n#### Resource_spec\n\nYou can also specify some resource for each service\n\n```python\nc.SwarmSpawner.resource_spec = {\n                'cpu_limit' : 1, # (int) \u2013 CPU limit in units of 10^9 CPU shares.\n                'mem_limit' : 512 * 1e6, # (int) \u2013 Memory limit in Bytes.\n                'cpu_reservation' : 1000, # (int) \u2013 CPU reservation in units of 10^9 CPU shares.\n                'mem_reservation' : 512 * 1e6, # (int) \u2013 Memory reservation in Bytes\n                }\n```\n\n#### Networks\nYou can also specify a network, remember to create the network before creating the service.\nSwarmSpawner use the service name instead of the service ip as a consequence JupyterHub and servers should share the same overlay network (network across nodes).\n\n```python\nc.SwarmSpawner.networks = [\"mynetwork\"] #list of networks\n```\n\n### Using user_options\n\n**user_options, if used, will overwrite jupyter_config.py for services.**\n\nIf you set 'c.SwarmSpawner.use_user_option = True' the spawner will use the dict passed through the form or as json body when using the Hub Api.\n\nThe spawner expect a dict with these keys:\n\n```python\nuser_options = {\n  'container_spec' : {\n              'command' : '/usr/local/bin/start-singleuser.sh',   #(string or list) command to be run in the image.\n              'image' : '', # name of the image\n              'mounts' : mounts, # Same as jupyterhub_config \n  'resource_spec' : {\n              'cpu_limit' : 1, # (int) \u2013 CPU limit in units of 10^9 CPU shares.\n              'mem_limit' : 512 * 1e6,# (int) \u2013 Memory limit in Bytes.\n              'cpu_reservation' : 1000, # (int) \u2013 CPU reservation in units of 10^9 CPU shares.\n              'mem_reservation' : 512 * 1e6, # (int) \u2013 Memory reservation in Bytes\n      },\n      'placement' : [], #list of constrains\n      'network' : [], #list of networks\n      'name' : '' # Name of service\n```\n\n### Services Prefix\n\nServices using this format `{service_prefix}-{service_owner}-{service_suffix}`\n\nYou can change the service_prefix in this way:\n\nPrefix of the service in Docker\n```python\nc.SwarmSpawner.service_prefix = \"jupyterhub\"\n```\n\n`service_owner` is the hexdigest() of the hashed `user.name`.\n\nIn case of multi sigle-server per user `service_suffix` is the name of the server, otherwise is always 1.\n\n### Downloading images\nDocker Engine in Swarm mode downloads images automatically from the repository.\nEither the image is available on the remote repository or locally, if not you will get an error. \n\nYou can use all the docker images built for [JupyterHub](https://github.com/jupyter/docker-stacks).\n\n## Contributing\n\nIf you would like to contribute to the project, please read our \n[contributor documentation](http://jupyter.readthedocs.io/en/latest/contributor/content-contributor.html)\nand the [`CONTRIBUTING.md`](CONTRIBUTING.md).\n\nFor a **development install**, clone the [repository](https://github.com/jupyterhub/dockerspawner) \nand then install from source:\n\n```bash\ngit clone https://github.com/cassiny/CassinySpawner\ncd CassinySpawner\npip3 install -r dev-requirements.txt -e .\n```\n\n## License\n\nAll code is licensed under the terms of the revised BSD license.\n\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/cassinyio/SwarmSpawner",
    "keywords": "Interactive,Interpreter,Shell,Web",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "swarmspawner",
    "platform": "",
    "project_url": "https://pypi.org/project/swarmspawner/",
    "release_url": "https://pypi.org/project/swarmspawner/0.0.3/",
    "requires_python": "",
    "summary": "SwarmSpawner: A spawner for JupyterHub that uses Docker Swarm's services",
    "version": "0.0.3"
  },
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d18bdf3805f82787cae20c6b7a82a795",
          "sha256": "47e84a53867d552080b481961dfdfc24df826f03cc997d50462e5b88de315c5b"
        },
        "downloads": 16,
        "filename": "swarmspawner-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d18bdf3805f82787cae20c6b7a82a795",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 11165,
        "upload_time": "2017-02-08T01:00:43",
        "url": "https://files.pythonhosted.org/packages/b9/20/3eda123747101779ab5b514e55cdac3dba3c6f7c90209e5ca48558dc2a96/swarmspawner-0.0.2-py2.py3-none-any.whl"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5eadeb417dd52cd8780e99e272ffee1f",
          "sha256": "c4c122762bfa5fa390679d68664e9f6eee0bba5e82235017061ae33cc1ea9509"
        },
        "downloads": 14,
        "filename": "swarmspawner-0.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5eadeb417dd52cd8780e99e272ffee1f",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 11139,
        "upload_time": "2017-02-08T01:17:17",
        "url": "https://files.pythonhosted.org/packages/33/4b/9c92eb9efc5f38f56ce4515cf9176525f9ff574c972e6d9740e0b8a8fe37/swarmspawner-0.0.3-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5eadeb417dd52cd8780e99e272ffee1f",
        "sha256": "c4c122762bfa5fa390679d68664e9f6eee0bba5e82235017061ae33cc1ea9509"
      },
      "downloads": 14,
      "filename": "swarmspawner-0.0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5eadeb417dd52cd8780e99e272ffee1f",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 11139,
      "upload_time": "2017-02-08T01:17:17",
      "url": "https://files.pythonhosted.org/packages/33/4b/9c92eb9efc5f38f56ce4515cf9176525f9ff574c972e6d9740e0b8a8fe37/swarmspawner-0.0.3-py2.py3-none-any.whl"
    }
  ]
}