{
  "info": {
    "author": "Sanhe Hu",
    "author_email": "husanhe@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: Unix",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": ".. image:: https://travis-ci.org/MacHu-GWU/superjson-project.svg?branch=master\r\n\r\n.. image:: https://img.shields.io/pypi/v/superjson.svg\r\n\r\n.. image:: https://img.shields.io/pypi/l/superjson.svg\r\n\r\n.. image:: https://img.shields.io/pypi/pyversions/superjson.svg\r\n\r\n\r\nWelcome to superjson Documentation\r\n===============================================================================\r\nFeatures:\r\n\r\n1. Support for ``date``, ``datetime``, ``set``, ``OrderedDict``, ``deque``, ``numpy.ndarray``, that the original `json <https://docs.python.org/3/library/json.html>`_ module can not serialize. `See example <Other data types_>`_.\r\n2. Easy to extend to support any custom data type. `See example <Extend_>`_.\r\n3. Allow ``// double slash started comments``, ``# Pound key started comments`` style comment in json file (Good for human/machine readable config file). `See example <Comment_>`_.\r\n4. Provide a ``compress`` option to reduce the data size. `See example <Compression_>`_.\r\n5. Advance file I/O utility method can prevent **overwrite**, **interruption**, and provide **auto compression by file extension**. `See example <Advance file I/O utility method_>`_.\r\n\r\n\r\n**Quick Links**\r\n-------------------------------------------------------------------------------\r\n- `GitHub Homepage <https://github.com/MacHu-GWU/superjson-project>`_\r\n- `Online Documentation <https://pypi.python.org/pypi/superjson>`_\r\n- `PyPI download <https://pypi.python.org/pypi/superjson>`_\r\n- `Install <install_>`_\r\n- `Issue submit and feature request <https://github.com/MacHu-GWU/superjson-project/issues>`_\r\n- `API reference and source code <http://pythonhosted.org/superjson/py-modindex.html>`_\r\n\r\n\r\nOther data types\r\n-------------------------------------------------------------------------------\r\nOriginal `json <https://docs.python.org/3/library/json.html>`_ module doesn't support ``date``, ``datetime``, ``set``, ``OrderedDict``, ``deque``, ``numpy.ndarray``, but ``superjson`` does! **If you want me to add support for other data type**, please `submit here <https://github.com/MacHu-GWU/superjson-project/issues>`_.\r\n\r\n.. code-block:: python\r\n\r\n    >>> from collections import OrderedDict, deque\r\n    >>> from datetime import date, datetime\r\n    >>> from superjson import json\r\n\r\n    >>> data = {\r\n    ...     \"int\": 1,\r\n    ...     \"str\": \"Hello\",\r\n    ...     \"bytes\": \"Hello\".encode(\"utf-8\"),\r\n    ...     \"date\": date(2010, 1, 1),\r\n    ...     \"datetime\": datetime(2020, 1, 1, 18, 30, 0, 500),\r\n    ...     \"set\": set([\r\n    ...         datetime(2000, 1, 1),\r\n    ...         datetime(2000, 1, 2),\r\n    ...     ]),\r\n    ...     \"deque\": deque([\r\n    ...         deque([1, 2]),\r\n    ...         deque([3, 4]),\r\n    ...     ]),\r\n    ...     \"ordereddict\": OrderedDict([\r\n    ...         (\"b\", OrderedDict([(\"b\", 1), (\"a\", 2)])),\r\n    ...         (\"a\", OrderedDict([(\"b\", 1), (\"a\", 2)])),\r\n    ...     ]),\r\n    ... }\r\n\r\n    >>> json.dumps(data, pretty=True)\r\n    {\r\n        \"bytes\": {\r\n            \"$builtins.bytes\": \"SGVsbG8=\"\r\n        },\r\n        \"date\": {\r\n            \"$datetime.date\": \"2010-01-01\"\r\n        },\r\n        \"datetime\": {\r\n            \"$datetime.datetime\": \"2020-01-01T18:30:00.000500\"\r\n        },\r\n        \"deque\": {\r\n            \"$collections.deque\": [\r\n                {\r\n                    \"$collections.deque\": [\r\n                        1,\r\n                        2\r\n                    ]\r\n                },\r\n                {\r\n                    \"$collections.deque\": [\r\n                        3,\r\n                        4\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        \"int\": 1,\r\n        \"ordereddict\": {\r\n            \"$collections.OrderedDict\": [\r\n                [\r\n                    \"b\",\r\n                    {\r\n                        \"$collections.OrderedDict\": [\r\n                            [\r\n                                \"b\",\r\n                                1\r\n                            ],\r\n                            [\r\n                                \"a\",\r\n                                2\r\n                            ]\r\n                        ]\r\n                    }\r\n                ],\r\n                [\r\n                    \"a\",\r\n                    {\r\n                        \"$collections.OrderedDict\": [\r\n                            [\r\n                                \"b\",\r\n                                1\r\n                            ],\r\n                            [\r\n                                \"a\",\r\n                                2\r\n                            ]\r\n                        ]\r\n                    }\r\n                ]\r\n            ]\r\n        },\r\n        \"set\": {\r\n            \"$builtins.set\": [\r\n                {\r\n                    \"$datetime.datetime\": \"2000-01-02T00:00:00\"\r\n                },\r\n                {\r\n                    \"$datetime.datetime\": \"2000-01-01T00:00:00\"\r\n                }\r\n            ]\r\n        },\r\n        \"str\": \"Hello\"\r\n    }\r\n\r\n\r\nExtend\r\n-------------------------------------------------------------------------------\r\nYou can extend your Encoder/Decoder in this way:\r\n\r\n1. Make your ``MyJson`` inherit from ``superjson.SuperJson``.\r\n2. Define encode method and decode method in this name convention ``dump_xxx``, ``load_xxx``.\r\n3. dumper method has to dump object to a json serializable dictionary, and use \"$<class_name>\" as the key.\r\n4. dumper and loader method must have a second argument ``class_name``, it must have a default value equals to the class name you want to support. there's a method ``get_class_name`` can help you to find out what is the correct class name.\r\n\r\nExample:\r\n\r\n.. code-block:: python\r\n\r\n    # Add support to pathlib.Path\r\n    >>> from pathlib import Path\r\n    >>> from superjson import SuperJson, get_class_name\r\n\r\n    >>> class MySuperJson(SuperJson):\r\n    ...     # dumper method has three input argument, self, obj and class_name\r\n    ...     def dump_Path(self, obj, class_name=\"pathlib.Path\"):\r\n    ...         return {\"$\" + class_name: str(obj.absolute())}\r\n    ...\r\n    ...     # loader method has three input argument, self, dct and class_name\r\n    ...     def load_Path(self, dct, class_name=\"pathlib.Path\"):\r\n    ...         return Path(dct[\"$\" + class_name])\r\n    ...\r\n    ...     def dump_PosixPath(self, obj, class_name=\"pathlib.PosixPath\"):\r\n    ...         return {\"$\" + class_name: str(obj.absolute())}\r\n    ...\r\n    ...     def load_PosixPath(self, dct, class_name=\"pathlib.PosixPath\"):\r\n    ...         return Path(dct[\"$\" + class_name])\r\n    ...\r\n    ...     def dump_WindowsPath(self, obj, class_name=\"pathlib.WindowsPath\"):\r\n    ...         return {\"$\" + class_name: str(obj.absolute())}\r\n    ...\r\n    ...     def load_WindowsPath(self, dct, class_name=\"pathlib.WindowsPath\"):\r\n    ...         return Path(dct[\"$\" + class_name])\r\n\r\n    >>> json = MySuperJson()\r\n\r\n    >>> p = Path(__file__)\r\n    >>> class_name = get_class_name(p) # this method can help you find your pathlib.PosixPath\r\n    >>> s = json.dumps(p)\r\n    >>> s\r\n    {\"$pathlib.WindowsPath\": \"C:\\\\Users\\\\admin\\\\superjson-project\\\\README.rst\"}\r\n    >>> p1 = json.loads(s)\r\n    >>> p1\r\n    C:\\\\Users\\\\admin\\\\superjson-project\\\\README.rst\r\n\r\n\r\nComment\r\n-------------------------------------------------------------------------------\r\nYou can add comments to json file, and ``superjson`` can still read it!\r\n\r\n.. code-block:: json\r\n\r\n    >>> s= \\\r\n    \"\"\"\r\n    {\r\n        # This is host\r\n        \"host\": \"127.0.0.1\",\r\n        \"port\": 8080 // This is port\r\n    }\r\n    \"\"\"\r\n    >>> config = json.loads(s, ignore_comments=True)\r\n    >>> config\r\n    {\"host\": \"127.0.0.1\", \"port\": 8080}\r\n\r\n\r\nCompression\r\n-------------------------------------------------------------------------------\r\nCompress your json file is easy.\r\n\r\n.. code-block:: python\r\n\r\n    >>> import sys\r\n    >>> data = {str(i): i for i in range(1000)}\r\n\r\n    # Compress when dump to string\r\n    >>> s = json.dumps(data, compress=True)\r\n\r\n    # Decompress when load from compressed string\r\n    >>> data1 = json.loads(s, decompress=True)\r\n\r\n    # Auto compress when dump to file\r\n    >>> json.dump(data, \"data.gz\") # \"data.json\" will not been compressed\r\n\r\n    # Auto decompress when load from file\r\n    >>> json.load(\"data.gz\")\r\n\r\n    # compare\r\n    >>> s1 = json.dumps(data)\r\n    >>> s2 = json.dumps(data, compress=True)\r\n    >>> sys.getsizeof(s1)\r\n    11829\r\n\r\n    >>> sys.getsizeof(s2)\r\n    5809\r\n\r\n\r\nAdvance file I/O utility method\r\n-------------------------------------------------------------------------------\r\nIf your program is interrupted while writing, you got an incomplete file, and **you also lose the original file**! To solve this issue, ``json.safe_dump(data, abspath)`` method first write json to a temporary file, then rename to what you expect, and silently overwrite old one. This can **guarantee atomic write operation**.\r\n\r\n.. code-block:: python\r\n\r\n    >>> data = dict(a=1, b=2, c=3)\r\n    # it first write to \"data.gz.tmp\", when it's done, overwrite the\r\n    # original \"data.gz\" file\r\n    >>> json.safe_dump(data, \"data.gz\")\r\n\r\n\r\n.. _install:\r\n\r\nInstall\r\n-------------------------------------------------------------------------------\r\n\r\n``superjson`` is released on PyPI, so all you need is:\r\n\r\n.. code-block:: console\r\n\r\n\t$ pip install superjson\r\n\r\nTo upgrade to latest version:\r\n\r\n.. code-block:: console\r\n\r\n\t$ pip install --upgrade superjson",
    "docs_url": null,
    "download_url": "https://github.com/MacHu-GWU/superjson-project/tarball/2017-07-14",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/MacHu-GWU/superjson-project",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "superjson",
    "platform": "Windows",
    "project_url": "https://pypi.org/project/superjson/",
    "release_url": "https://pypi.org/project/superjson/0.0.5/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Extendable json encode/decode library.",
    "version": "0.0.5"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6e75c32945bcee1e724617537a980a09",
          "sha256": "35e6ac8fa30d6e07f9f853764c7b2f8ea0283dd3e08c7264ad5ecbd3f8bb3633"
        },
        "downloads": 0,
        "filename": "superjson-0.0.1.zip",
        "has_sig": false,
        "md5_digest": "6e75c32945bcee1e724617537a980a09",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 36997,
        "upload_time": "2017-05-30T16:22:24",
        "url": "https://files.pythonhosted.org/packages/c2/8a/f06cdbd1055d119ee238ce4758b6b5d8959aaa6a2ee853d5b61ca7fd7af7/superjson-0.0.1.zip"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e0fa644f8846e7ee19770a928f0638b4",
          "sha256": "a6398f5492e6d3e793b382b3bf4b3933262d6926c64e8a900435db378693b71c"
        },
        "downloads": 0,
        "filename": "superjson-0.0.2.zip",
        "has_sig": false,
        "md5_digest": "e0fa644f8846e7ee19770a928f0638b4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38618,
        "upload_time": "2017-05-30T20:52:21",
        "url": "https://files.pythonhosted.org/packages/59/a2/7f88bec9c854a8f6b55bf6d93442a80fe3fdcbcfe9990132effe8b3f7424/superjson-0.0.2.zip"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c4650306c4f2abf4f03b9a996bc2d6b1",
          "sha256": "88022be18cd4a302374b850b32d71e0fdc74e54b661a3928edc1683e9e5ebd3d"
        },
        "downloads": 0,
        "filename": "superjson-0.0.3.zip",
        "has_sig": false,
        "md5_digest": "c4650306c4f2abf4f03b9a996bc2d6b1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38688,
        "upload_time": "2017-05-30T21:20:41",
        "url": "https://files.pythonhosted.org/packages/43/d1/b53d110440614fa9db257e984af680e7deac3883ddfc702765b488403184/superjson-0.0.3.zip"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "05666d113de80500c3b4df248bd83f46",
          "sha256": "f16995a6d70e8fd59c464f21f222e29e6e7ab30abff29a5b905de6ccee43938b"
        },
        "downloads": 0,
        "filename": "superjson-0.0.4.zip",
        "has_sig": false,
        "md5_digest": "05666d113de80500c3b4df248bd83f46",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 38690,
        "upload_time": "2017-05-30T22:11:11",
        "url": "https://files.pythonhosted.org/packages/a7/9e/943f82b26a90388deed7b5f7edcbf8b6a79629853d2be490e6879a316b03/superjson-0.0.4.zip"
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ea291ae448401d95ca6596f0f83c8dc6",
          "sha256": "d1b3762d6f2381d0d4689b72ef6d4267f94c6fa9a345acbf4244e1684b5c239e"
        },
        "downloads": 0,
        "filename": "superjson-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ea291ae448401d95ca6596f0f83c8dc6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 295716,
        "upload_time": "2017-07-14T21:19:54",
        "url": "https://files.pythonhosted.org/packages/a5/d1/ba25276e78b8ca61010b66e9d066e4b22a8aaaaf9ba4b7bc2e2e60e0324a/superjson-0.0.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ea291ae448401d95ca6596f0f83c8dc6",
        "sha256": "d1b3762d6f2381d0d4689b72ef6d4267f94c6fa9a345acbf4244e1684b5c239e"
      },
      "downloads": 0,
      "filename": "superjson-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "ea291ae448401d95ca6596f0f83c8dc6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 295716,
      "upload_time": "2017-07-14T21:19:54",
      "url": "https://files.pythonhosted.org/packages/a5/d1/ba25276e78b8ca61010b66e9d066e4b22a8aaaaf9ba4b7bc2e2e60e0324a/superjson-0.0.5.tar.gz"
    }
  ]
}