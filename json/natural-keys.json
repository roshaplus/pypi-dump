{
  "info": {
    "author": "S. Andrew Sheppard",
    "author_email": "andrew@wq.io",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Database"
    ],
    "description": "Django Natural Keys\n===================\n\nEnhanced support for `natural\nkeys <https://docs.djangoproject.com/en/1.9/topics/serialization/#natural-keys>`__\nin Django and `Django REST\nFramework <http://www.django-rest-framework.org/>`__. Extracted from\n`wq.db <https://wq.io/wq.db>`__ for general use.\n\n*Django Natural Keys* provides a number of useful model methods (e.g.\n``get_or_create_by_natural_key()``) that speed up working with natural\nkeys in Django. The module also provides a couple of serializer classes\nthat streamline creating REST API support for models with natural keys.\n\n|Latest PyPI Release| |Release Notes| |License| |GitHub Stars| |GitHub\nForks| |GitHub Issues|\n\n|Travis Build Status| |Python Support| |Django Support|\n\nUsage\n-----\n\n*Django Natural Keys* is available via PyPI:\n\n.. code:: bash\n\n    pip3 install natural-keys\n\nModel API\n~~~~~~~~~\n\nTo use `natural\nkeys <https://docs.djangoproject.com/en/1.9/topics/serialization/#natural-keys>`__\nin vanilla Django, you need to define a ``natural_key()`` method on your\nModel class and a ``get_natural_key()`` method on the Manager class.\nWith *Django Natural Keys*, you can instead extend ``NaturalKeyModel``\nand define a ``unique_together`` property on your Model's ``Meta`` class\nor use a field with ``unique=True``. The first ``unique_together`` entry\nor the first ``unique`` field (except an AutoField) will be treated as\nthe natural key for the model, and all of the necessary functions for\nworking with natural keys will automatically work.\n\n.. code:: python\n\n    from natural_keys import NaturalKeyModel\n\n    class Event(NaturalKeyModel):\n        name = models.CharField(max_length=255)\n        date = models.DateField()\n        class Meta:\n            unique_together = (('name','date'),)\n            \n    class Note(models.Model):\n        event = models.ForeignKey(Event)\n        note = models.TextField()\n\nor\n\n.. code:: python\n\n    from natural_keys import NaturalKeyModel\n\n    class Event(NaturalKeyModel):\n        name = models.CharField(unique=True)\n\nThe following methods will then be available on your Model and its\nManager:\n\n.. code:: python\n\n    # Default Django methods\n    instance = Event.objects.get_by_natural_key('ABC123', date(2016, 1, 1))\n    instance.natural_key == ('ABC123', date(2016, 1, 1))\n\n    # get_or_create + natural keys\n    instance, is_new = Event.objects.get_or_create_by_natural_key('ABC123', date(2016, 1, 1))\n\n    # Like get_or_create_by_natural_key, but discards is_new\n    # Useful for quick lookup/creation when you don't care whether the object exists already\n    instance = Event.objects.find('ABC123', date(2016, 1, 1))\n    note = Note.objects.create(\n         event=Event.objects.find('ABC123', date(2016, 1, 1)),\n         note=\"This is a note\"\n    )\n    instance == note.event\n\n    # Inspect natural key fields on a model without instantiating it\n    Event.get_natural_key_fields() == ('name', 'date')\n\nNested Natural Keys\n^^^^^^^^^^^^^^^^^^^\n\nOne key feature of *Django Natural Keys* is that it will automatically\ntraverse ``ForeignKey``\\ s to related models (which should also be\n``NaturalKeyModel`` classes). This makes it possible to define complex,\narbitrarily nested natural keys with minimal effort.\n\n.. code:: python\n\n    class Place(NaturalKeyModel):\n        name = models.CharField(max_length=255)\n        class Meta:\n            unique_together = (('name',),)\n\n    class Event(NaturalKeyModel):\n        place = models.ForeignKey(Place)\n        date = models.DateField()\n        class Meta:\n            unique_together = (('place', 'date'),)\n\n.. code:: python\n\n    Event.get_natural_key_fields() == ('place__name', 'date')\n    instance = Event.find('ABC123', date(2016, 1, 1))\n    instance.place.name == 'ABC123'\n\nSerializers\n~~~~~~~~~~~\n\n*Django Natural Keys* provides two ``ModelSerializer`` classes for use\nwith `Django REST Framework <http://www.django-rest-framework.org/>`__.\nThe first is ``NaturalKeySerializer``, which is meant to be used with\n``NaturalKeyModel`` classes. The second serializer class,\n``NaturalKeyModelSerializer``, handles the more common use case:\nserializing a model that has a foreign key to a ``NaturalKeyModel`` but\nis not a ``NaturalKeyModel`` itself. (One concrete example of this is\nthe `vera.Report <https://github.com/wq/vera#report>`__ model, which has\na ForeignKey to `vera.Event <https://github.com/wq/vera#event>`__, which\nis a ``NaturalKeyModel``).\n\nYou can use these serializer classes with `Django REST\nFramework <http://www.django-rest-framework.org/>`__ and/or\n`wq.db <https://wq.io/wq.db>`__ just like any other serializer:\n\n.. code:: python\n\n    # Django REST Framework usage example\n    from rest_framework import viewsets\n    from rest_framework import routers\n    from natural_keys import NaturalKeySerializer, NaturalKeyModelSerializer\n    from .models import Event, Note\n\n    class EventSerializer(NaturalKeySerializer):\n        class Meta:\n            model = Event\n            \n    class NoteSerializer(NaturalKeyModelSerializer):\n        class Meta:\n            model = Note\n\n    class EventViewSet(viewsets.ModelViewSet):\n        queryset = Event.objects.all()\n        serializer_class = EventSerializer\n\n    class NoteViewSet(viewsets.ModelViewSet):\n        queryset = Note.objects.all()\n        serializer_class = NoteSerializer\n\n    router = routers.DefaultRouter()\n    router.register(r'events', EventViewSet)\n    router.register(r'notes', NoteViewSet)\n\n    # wq.db usage example\n    from wq.db import rest\n    from natural_keys import NaturalKeySerializer, NaturalKeyModelSerializer\n    from .models import Event, Note\n\n    rest.router.register_model(Event, serializer=NaturalKeySerializer)\n    rest.router.register_model(Note, serializer=NaturalKeyModelSerializer)\n\nOnce this is set up, you can use your REST API to create and view your\n``NaturalKeyModel`` instances and related data. To facilitate\nintegration with regular HTML Forms, *Django Natural Keys* is integrated\nwith the `HTML JSON Forms <https://github.com/wq/html-json-forms>`__\npackage, which supports nested keys via an array naming convention, as\nthe examples below demonstrate.\n\n.. code:: html\n\n    <form action=\"/events/\" method=\"post\">\n      <input name=\"place[name]\">\n      <input type=\"date\" name=\"date\">\n    </form>\n\n.. code:: js\n\n    // /events.json\n    [\n        {\n            \"id\": 123,\n            \"place\": {\"name\": \"ABC123\"},\n            \"date\": \"2016-01-01\"\n        }\n    ]\n\n.. code:: html\n\n    <form action=\"/notes/\" method=\"post\">\n      <input name=\"event[place][name]\">\n      <input type=\"date\" name=\"event[date]\">\n      <textarea name=\"note\"></textarea>\n    </form>\n\n.. code:: js\n\n    // /notes.json\n    [\n        {\n            \"id\": 12345,\n            \"event\": {\n                \"place\": {\"name\": \"ABC123\"},\n                \"date\": \"2016-01-01\"\n            },\n            \"note\": \"This is a note\"\n        }\n    ]\n\n.. |Latest PyPI Release| image:: https://img.shields.io/pypi/v/natural-keys.svg\n   :target: https://pypi.python.org/pypi/natural-keys\n.. |Release Notes| image:: https://img.shields.io/github/release/wq/django-natural-keys.svg\n   :target: https://github.com/wq/django-natural-keys/releases\n.. |License| image:: https://img.shields.io/pypi/l/natural-keys.svg\n   :target: https://github.com/wq/django-natural-keys/blob/master/LICENSE\n.. |GitHub Stars| image:: https://img.shields.io/github/stars/wq/django-natural-keys.svg\n   :target: https://github.com/wq/django-natural-keys/stargazers\n.. |GitHub Forks| image:: https://img.shields.io/github/forks/wq/django-natural-keys.svg\n   :target: https://github.com/wq/django-natural-keys/network\n.. |GitHub Issues| image:: https://img.shields.io/github/issues/wq/django-natural-keys.svg\n   :target: https://github.com/wq/django-natural-keys/issues\n.. |Travis Build Status| image:: https://img.shields.io/travis/wq/django-natural-keys/master.svg\n   :target: https://travis-ci.org/wq/django-natural-keys\n.. |Python Support| image:: https://img.shields.io/pypi/pyversions/natural-keys.svg\n   :target: https://pypi.python.org/pypi/natural-keys\n.. |Django Support| image:: https://img.shields.io/badge/Django-1.8%2C%201.10%2C%201.11-blue.svg\n   :target: https://pypi.python.org/pypi/natural-keys",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/wq/django-natural-keys",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "natural-keys",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/natural-keys/",
    "release_url": "https://pypi.org/project/natural-keys/1.2.0/",
    "requires_python": null,
    "summary": "Enhanced support for natural keys in Django and Django REST Framework",
    "version": "1.2.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "952a0059441036d302b0a07eb454cfe2",
          "sha256": "00b45353f0b668a174427d0067c06646cb83e2d9d4dc0eddce7eef063ee6bb3f"
        },
        "downloads": 505,
        "filename": "natural-keys-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "952a0059441036d302b0a07eb454cfe2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8290,
        "upload_time": "2016-03-07T22:45:19",
        "url": "https://files.pythonhosted.org/packages/cb/4d/ebf8dec68efd42bec3811769a66bd00b03f6dcf8786ce827f31555aff720/natural-keys-0.1.0.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d7153fbaa43f9cee54748583bff4726f",
          "sha256": "94c3d36359edf32aeaad0bd4d3a57bf5f7b3b458ccdbe89c737ac21dbcfce8c0"
        },
        "downloads": 351,
        "filename": "natural-keys-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d7153fbaa43f9cee54748583bff4726f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8322,
        "upload_time": "2016-08-23T16:00:29",
        "url": "https://files.pythonhosted.org/packages/31/0a/b8e2736e57c984ce4ee4ce1236ab82200b721a9afe6e49358a1e82099de9/natural-keys-1.0.0.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "20d783519faf70e50d4503449f5c3cf0",
          "sha256": "1a9ff4f922e1fbb2fb9ad292aefd75ffb2556040bd87daad1bc9f0f47a8c1e12"
        },
        "downloads": 188,
        "filename": "natural-keys-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "20d783519faf70e50d4503449f5c3cf0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8417,
        "upload_time": "2016-11-07T22:16:42",
        "url": "https://files.pythonhosted.org/packages/f7/7d/9c8809156b795657d222da5abe340e92a4bc6f1dba1dcd2cd24b63b11552/natural-keys-1.1.0.tar.gz"
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4a5f833bc5ee616bda29e94341995496",
          "sha256": "60c8873bd7b5148e3df50fafce59a76f33744009c007c88f69b0ddedb18665c9"
        },
        "downloads": 0,
        "filename": "natural-keys-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4a5f833bc5ee616bda29e94341995496",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8577,
        "upload_time": "2017-05-02T16:32:10",
        "url": "https://files.pythonhosted.org/packages/77/f5/c5e1171bc22a97f7ac09272a41f90c81c32baf285fdbb90d2470f17d1960/natural-keys-1.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4a5f833bc5ee616bda29e94341995496",
        "sha256": "60c8873bd7b5148e3df50fafce59a76f33744009c007c88f69b0ddedb18665c9"
      },
      "downloads": 0,
      "filename": "natural-keys-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "4a5f833bc5ee616bda29e94341995496",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8577,
      "upload_time": "2017-05-02T16:32:10",
      "url": "https://files.pythonhosted.org/packages/77/f5/c5e1171bc22a97f7ac09272a41f90c81c32baf285fdbb90d2470f17d1960/natural-keys-1.2.0.tar.gz"
    }
  ]
}