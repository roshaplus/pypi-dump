{
  "info": {
    "author": "Robert Singer",
    "author_email": "robertgsinger@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "Django REST - FlexFields\n========================\n\nFlexible, dynamic fields and nested models for Django REST Framework\nserializers. Works with both Python 2 &3\n\nOverview\n========\n\nFlexFields (DRF-FF) for `Django REST\nFramework <https://django-rest-framework.org>`__ is a package designed\nto provide a common baseline of functionality for dynamically setting\nfields and nested models within DRF serializers. To remove unneeded\nfields, you can dynamically set fields, including nested fields, via URL\nparameters ``(?fields=name,address.zip)`` or when configuring\nserializers. Additionally, you can dynamically expand fields from simple\nvalues to complex nested models, or treat fields as \"deferred\", and\nexpand them on an as-needed basis.\n\nThis package is designed for simplicity and provides two classes - a\nviewset class and a serializer class - with minimal magic and\nentanglement with DRF's foundational classes. If you are familar with\nDjango REST Framework, it shouldn't take you long to read over the code\nand see how it works.\n\nThere are similar packages, such as the powerful `Dynamic\nREST <https://github.com/AltSchool/dynamic-rest>`__, which does what\nthis package does and more, but you may not need all those bells and\nwhistles. There is also the more basic `Dynamic Fields\nMixin <https://github.com/dbrgn/drf-dynamic-fields>`__, but it lacks\nfunctionality for field expansion and dot-notation field customiziation.\n\nTable of Contents:\n\n-  `Installation <#installation>`__\n-  `Requirements <#requirements>`__\n-  `Basics <#basics>`__\n-  `Dynamic Field Expansion <#dynamic-field-expansion>`__\n-  `Deferred Fields <#deferred-fields>`__\n-  `Deep, Nested Expansion <#deep-nested-expansion>`__\n-  `Configuration from Serializer\n   Options <#configuration-from-serializer-options>`__\n-  `Field Expansion on \"List\" Views <#field-expansion-on-list-views>`__\n-  `Use \"~all\" to Expand All Available\n   Fields <#use-all-to-expand-all-available-fields>`__\n-  `Dynamically Setting Fields <#dynamically-setting-fields>`__\n-  `From URL Parameters <#from-url-parameters>`__\n-  `From Serializer Options <#from-serializer-options>`__\n-  `Combining Dynamically-Set Fields and Field\n   Expansion <#combining-dynamically-set-fields-and-field-expansion>`__\n-  `Serializer Introspection <#serializer-introspection>`__\n-  `Testing <#testing>`__\n-  `License <#license>`__\n\nInstallation\n============\n\n::\n\n    pip install drf-flex-fields\n\nRequirements\n============\n\n-  Python (2.7, 3.2, 3.3, 3.4, 3.5)\n-  Django (1.8, 1.9, 1.10)\n\nBasics\n======\n\nTo use this package's functionality, your viewsets need to subclass\n``FlexFieldsModelViewSet`` and your serializers need to subclass\n``FlexFieldsModelSerializer``:\n\n::\n\n    from rest_flex_fields import FlexFieldsModelViewSet, FlexFieldsModelSerializer\n\n    class PersonViewSet(FlexFieldsModelViewSet):\n      queryset = models.Person.objects.all()\n      serializer_class = PersonSerializer\n\n    class CountrySerializer(FlexFieldsModelSerializer):\n      class Meta:\n        model = Country\n        fields = ('id', 'name', 'population')\n\n    class PersonSerializer(FlexFieldsModelSerializer):\n      class Meta:\n        model = Person\n        fields = ('id', 'name', 'country', 'occupation')\n\n      expandable_fields: {\n          'country': (CountrySerializer, {source: 'country'})\n      }\n\nNow you can make requests like\n``GET /person?expand=country&fields=id,name,country`` to dynamically\nmanipulate which fields are included, as well as expand primitive fields\ninto nested objects. You can also use dot notation to control both the\n``fields`` and ``expand`` settings at arbitrary levels of depth in your\nserialized responses. Read on to learn the details and see more complex\nexamples.\n\nDynamic Field Expansion\n=======================\n\nTo define an expandable field, add it to the ``expandable_fields``\nwithin your serializer:\n\n::\n\n    class CountrySerializer(FlexFieldsModelSerializer):\n        class Meta:\n            model = Company\n            fields = ['name', 'population']\n\n\n    class PersonSerializer(FlexFieldsModelSerializer):\n        country = serializers.PrimaryKeyRelatedField(many=True, read_only=True)\n\n        class Meta:\n            model = Person\n            fields = ['id', 'name', 'country', 'occupation']\n\n        expandable_fields = {\n            'country': (CountrySerializer, {'source': 'country', 'fields': ['name']})\n        }\n\nIf the default serialized response is the following:\n\n::\n\n    {\n      \"id\" : 13322\n      \"name\" : \"John Doe\",\n      \"country\" : 12,\n      \"occupation\" : \"Programmer\",\n    }\n\nWhen you do a ``GET /person/13322?expand=country``, the response will\nchange to:\n\n::\n\n    {\n      \"id\" : 13322\n      \"name\" : \"John Doe\",\n      \"country\" : {\n        \"name\" : \"United States\"\n      },\n      \"occupation\" : \"Programmer\",\n    }\n\nNotice how ``population`` was ommitted from the nested ``country``\nobject. This is because ``fields`` was set to ``['name']`` when passed\nto the embedded ``CountrySerializer``. You will learn more about this\nlater on.\n\nDeferred Fields\n---------------\n\nAlternatively, you could treat ``country`` as a \"deferred\" field by not\ndefining it among the default fields. To make a field deferred, only\ndefine it within the serializer's ``expandable_fields``.\n\nDeep, Nested Expansion\n----------------------\n\nLet's say you add ``StateSerializer`` as serializer nested inside the\ncountry serializer above:\n\n::\n\n    class StateSerializer(FlexFieldsModelSerializer):\n        class Meta:\n            model = State\n            fields = ['name', 'population']\n\n\n    class CountrySerializer(FlexFieldsModelSerializer):\n        class Meta:\n            model = Company\n            fields = ['name', 'population']\n\n        expandable_fields = {\n            'states': (StateSerializer, {'source': 'country', 'many': True})\n        }\n\n    class PersonSerializer(FlexFieldsModelSerializer):\n        country = serializers.PrimaryKeyRelatedField(many=True, read_only=True)\n\n        class Meta:\n            model = Person\n            fields = ['id', 'name', 'country', 'occupation']\n\n        expandable_fields = {\n            'country': (CountrySerializer, {'source': 'country', 'fields': ['name']})\n        }\n\nYour default serialized response might be the following for ``person``\nand ``country``, respectively:\n\n::\n\n    {\n      \"id\" : 13322\n      \"name\" : \"John Doe\",\n      \"country\" : 12,\n      \"occupation\" : \"Programmer\",\n    }\n\n    {\n      \"id\" : 12\n      \"name\" : \"United States\",\n      \"states\" : \"http://www.api.com/countries/12/states\"\n    }\n\nBut if you do a ``GET /person/13322?expand=country.states``, it would\nbe:\n\n::\n\n    {\n      \"id\" : 13322\n      \"name\" : \"John Doe\",\n      \"occupation\" : \"Programmer\",\n      \"country\" : {\n        \"id\" : 12\n        \"name\" : \"United States\",\n        \"states\" : [\n          {\n            \"name\" : \"Ohio\",\n            \"population\": 11000000\n          }\n        ]\n      }\n    }\n\nPlease be kind to your database, as this could incur many additional\nqueries. Though, you can mitigate this impact through judicious use of\n``prefetch_related`` and ``select_related`` when defining the queryset\nfor your viewset.\n\nConfiguration from Serializer Options\n-------------------------------------\n\nYou could accomplish the same result (expanding the ``states`` field\nwithin the embedded country serializer) by explicitly passing the\n``expand`` option within your serializer:\n\n::\n\n    class PersonSerializer(FlexFieldsModelSerializer):\n\n        class Meta:\n            model = Person\n            fields = ['id', 'name', 'country', 'occupation']\n\n        expandable_fields = {\n            'country': (CountrySerializer, {'source': 'country', 'expand': ['states']})\n        }\n\nField Expansion on \"List\" Views\n-------------------------------\n\nBy default, you can only expand fields when you are retrieving single\nobjects, in order to protect yourself from careless clients. However, if\nyou would like to make a field expandable even when listing collections\nof objects, you can add the field's name to the ``permit_list_expands``\nproperty on the viewset. Just make sure you are wisely using\n``select_related`` in the viewset's queryset. You can take advantage of\na utility function, ``is_expanded`` to adjust the queryset accordingly.\n\nExample:\n\n::\n\n    from drf_flex_fields import is_expanded\n\n    class PersonViewSet(FlexFieldsModelViewSet):\n      permit_list_expands = ['employer']\n      queryset = models.Person.objects.all().select_related('employer')\n      serializer_class = PersonSerializer\n\n      def get_queryset(self):\n          if is_expanded(self.request, 'employer'):\n              models.Person.objects.all().select_related('employer')\n          return models.Person.objects.all()\n\nUse \"~all\" to Expand All Available Fields\n-----------------------------------------\n\nYou can set ``expand=~all`` to automatically expand all fields that are\navailable for expansion. This will take effect for only the top-level\nserializer; if you need to also expand fields that are present on deeply\nnested models, then you will need to explicitly pass their values using\ndot notation.\n\nDynamically Setting Fields\n==========================\n\nFrom URL Parameters\n-------------------\n\nYou can dynamically set fields, with the configuration originating from\nthe URL parameters or serializer options.\n\nConsider this as a default serialized response:\n\n::\n\n    {\n      \"id\" : 13322\n      \"name\" : \"John Doe\",\n      \"country\" : {\n        \"name\" : \"United States\",\n        \"population: 330000000\n      },\n      \"occupation\" : \"Programmer\",\n      \"hobbies\" : [\"rock climbing\", \"sipping coffee\"}\n    }\n\nTo whittle down the fields via URL parameters, simply add\n``?fields=id,name,country`` to your requests to get back:\n\n::\n\n    {\n      \"id\" : 13322\n      \"name\" : \"John Doe\",\n      \"country\" : {\n        \"name\" : \"United States\",\n        \"population: 330000000\n      }\n    }\n\nOr, for more specificity, you can use dot-notation,\n``?fields=id,name,country.name``:\n\n::\n\n    {\n      \"id\" : 13322\n      \"name\" : \"John Doe\",\n      \"country\" : {\n        \"name\" : \"United States\",\n      }\n    }\n\nFrom Serializer Options\n-----------------------\n\nYou could accomplish the same outcome as the example above by passing\noptions to your serializers. With this approach, you lose runtime\ndynamism, but gain the ability to re-use serializers, rather than\ncreating a simplified copy of a serializer for the purposes of embedding\nit.\n\n::\n\n    from rest_flex_fields import FlexFieldsModelSerializer\n\n    class CountrySerializer(FlexFieldsModelSerializer):\n        class Meta:\n            model = Country\n            fields = ['id', 'name', 'population']\n\n    class PersonSerializer(FlexFieldsModelSerializer):\n        country: CountrySerializer(fields=['name'])\n        class Meta:\n            model = Person\n            fields = ['id', 'name', 'country', 'occupation', 'hobbies']\n\n\n    serializer = PersonSerializer(person, fields=[\"id\", \"name\", \"country.name\"])\n    print(serializer.data)\n\n    >>>{\n      \"id\" : 13322\n      \"name\" : \"John Doe\",\n      \"country\" : {\n        \"name\" : \"United States\",\n      }\n    }\n\nCombining Dynamically Set Fields and Field Expansion\n====================================================\n\nYou may be wondering how things work if you use both the ``expand`` and\n``fields`` option, and there is overlap. For example, your serialized\nperson model may look like the following by default:\n\n::\n\n    {\n      \"id\" : 13322\n      \"name\" : \"John Doe\",\n      \"country\" : {\n        \"name\" : \"United States\",\n      }\n    }\n\nHowever, you make the following request\n``HTTP GET /person/13322?include=id,name&expand=country``. You will get\nthe following back:\n\n::\n\n    {\n      \"id\" : 13322\n      \"name\" : \"John Doe\"\n    }\n\nThe ``include`` field takes precedence over ``expand``. That is, if a\nfield is not among the set that is explicitly alllowed, it cannot be\nexpanded. If such a conflict occurs, you will not pay for the extra\ndatabase queries - the expanded field will be silently abandoned.\n\nSerializer Introspection\n========================\n\nWhen using an instance of ``FlexFieldsModelSerializer``, you can examine\nthe property ``expanded_fields`` to discover which, if any, fields have\nbeen dynamically expanded.\n\nTesting\n=======\n\nTests are found in a simplified DRF project in the ``/tests`` folder.\nInstall the project requirements and do ``./manage.py test`` to run\nthem.\n\nLicense\n=======\n\nSee `License <LICENSE.md>`__.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/rsinger86/drf-flex-fields",
    "keywords": "django rest api dynamic fields",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "drf-flex-fields",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/drf-flex-fields/",
    "release_url": "https://pypi.org/project/drf-flex-fields/0.2.2/",
    "requires_python": null,
    "summary": "Flexible, dynamic fields and nested models for Django REST Framework serializers.",
    "version": "0.2.2"
  },
  "releases": {
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e0cf080331471bf5cf2769fdf44d3857",
          "sha256": "11eafc216a64ececa49c0312c8f5f6db88aff1750ce44c83614a34e86dad74aa"
        },
        "downloads": 44,
        "filename": "drf-flex-fields-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "e0cf080331471bf5cf2769fdf44d3857",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6691,
        "upload_time": "2016-12-31T21:21:06",
        "url": "https://files.pythonhosted.org/packages/ff/29/9a5d700de7811885761c5745774dfa4f812fb671d4f4b0c27d3db5f5af19/drf-flex-fields-0.1.8.tar.gz"
      }
    ],
    "0.1.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e182e5ef1cb9680e07cb7041b79d8289",
          "sha256": "b715205af967c5368a3478651211420b95c2ca44c2e4b2ff6296e36a35608cd7"
        },
        "downloads": 18,
        "filename": "drf-flex-fields-0.1.9.tar.gz",
        "has_sig": false,
        "md5_digest": "e182e5ef1cb9680e07cb7041b79d8289",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7249,
        "upload_time": "2017-03-12T05:08:07",
        "url": "https://files.pythonhosted.org/packages/26/c8/879c510f808c45b5230a4626d55379cb67886c80f92cddf92cf4c15d53a6/drf-flex-fields-0.1.9.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4180340d3770c1e9d0e30f3b98eccc8a",
          "sha256": "cc3c1633f29c8fa8073e59204157477eede83ef50aa2359489e408960bf53627"
        },
        "downloads": 25,
        "filename": "drf-flex-fields-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4180340d3770c1e9d0e30f3b98eccc8a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7262,
        "upload_time": "2017-03-14T00:14:28",
        "url": "https://files.pythonhosted.org/packages/62/92/ec57d062d33be6c1d9b57495156bd54421f2dea7712aa0c2a7392b8b7db4/drf-flex-fields-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eb23df65e9177b8b53eb4b0f8848d564",
          "sha256": "38d4295b8d956d7d68f9d55d8a79f0d7715826aa13b2d18b9a766aab6e33902b"
        },
        "downloads": 33,
        "filename": "drf-flex-fields-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "eb23df65e9177b8b53eb4b0f8848d564",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7274,
        "upload_time": "2017-03-15T13:07:43",
        "url": "https://files.pythonhosted.org/packages/5b/8e/daccc72f49e8dc5dfca8487ebe8062ea09b1f17b735d6e818531f70f5f8b/drf-flex-fields-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7cfde6dfdeca8a1ec700c624c9d2503f",
          "sha256": "a61f3f45712386b5363d1907817777fd65ee83915b2c8864a37ef6f53c9ba16a"
        },
        "downloads": 122,
        "filename": "drf-flex-fields-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7cfde6dfdeca8a1ec700c624c9d2503f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7691,
        "upload_time": "2017-03-19T15:08:55",
        "url": "https://files.pythonhosted.org/packages/23/25/36273894ae77540db7567b175c4ce06fe52c9d66fc0d958dff2720ca3c39/drf-flex-fields-0.2.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7cfde6dfdeca8a1ec700c624c9d2503f",
        "sha256": "a61f3f45712386b5363d1907817777fd65ee83915b2c8864a37ef6f53c9ba16a"
      },
      "downloads": 122,
      "filename": "drf-flex-fields-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7cfde6dfdeca8a1ec700c624c9d2503f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7691,
      "upload_time": "2017-03-19T15:08:55",
      "url": "https://files.pythonhosted.org/packages/23/25/36273894ae77540db7567b175c4ce06fe52c9d66fc0d958dff2720ca3c39/drf-flex-fields-0.2.2.tar.gz"
    }
  ]
}