{
  "info": {
    "author": "Philipp Klaus",
    "author_email": "philipp.l.klaus@web.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: System :: Logging",
      "Topic :: System :: Monitoring"
    ],
    "description": "Github: https://github.com/pklaus/universal_usbtmc\n\nA Universal USBTMC Package for Python\n=====================================\n\n``universal_usbtmc`` is an effort to fix the clutter of USBTMC\nimplementations for Python.\n\nThis project provides a unified interface to the different ways/\nimplementations (\"backends\") to talk to USBTMC devices (\"instruments\").\nThis allows you to write very platform independent code.\n\nIt also comes with an interactive USBTMC shell.\n\nYou can use the following instrument implementations (\"backends\") in\nyour software:\n\n-  USBTMC via the Linux kernel module\n-  USBTMC via python-usbtmc (uses libusb)\n-  TCP Socket (remote connection e.g. via\n   `rpi-usbtmc-gateway <https://github.com/pklaus/rpi-usbtmc-gateway>`__)\n-  VXI-11 (an RPC-based TCP connection, not really usbtmc)\n-  RS232\n\nAs already mentioned, you'll automatically gain a large deal of platform\nindependence as any operating system will support at least some of those\nbackends.\n\nInstallation\n============\n\n::\n\n    pip install universal_usbtmc\n\nUsage\n=====\n\n| This software is mainly made to be used by other software, not humans.\n| It comes, however, with a small command line tool called\n  ``usbtmc-shell``. You can use it to test if the different backends\n  work for you. (Or for trying to talk to a new device you just bought.)\n  See below in the backends sections on how to use it with different\n  backends.\n\nBackends\n========\n\nTo communicate with your device, the following backends are available:\n\n-  ``linux_kernel``\n-  ``python_usbtmc``\n-  ``tcp_socket``\n-  ``python_vxi11``\n-  ``pyserial``\n\nBackend Details\n===============\n\n``linux_kernel``\n----------------\n\n| Uses the Linux Kernel Module *usbtmc*\n| The source code of the kernel module can be found\n  `here <https://github.com/torvalds/linux/blob/master/drivers/usb/class/usbtmc.c>`__.\n\nTo use this backend, you must be using a Linux kernel and have the\nkernel module compiled and loaded. Look for the device ``/dev/usbtmc0``\nto check your USBTMC device is detected.\n\nYou can run the usbtmc shell to check if everything works OK:\n\n::\n\n    usbtmc-shell --backend linux_kernel /dev/usbtmc0\n\n``python_usbtmc``\n-----------------\n\nUses the libusb-/PyUSB-based\n`python-usbtmc <https://github.com/python-ivi/python-usbtmc>`__.\n\nHere's how to use the usbtmc shell with it:\n\n::\n\n    usbtmc-shell --backend python_usbtmc USB::0x1ab1::0x0588::INSTR\n\nTo use the backend ``python_usbtmc``, you need to install the\nrequirements python-usbtmc and pyusb:\n\n::\n\n    pip install https://github.com/alexforencich/python-usbtmc/archive/master.zip\n    pip install https://github.com/walac/pyusb/archive/master.zip\n\nThe backend works on Mac OS X and Linux.\n\n``tcp_socket``\n--------------\n\nThis backend connects to your instrument via TCP sockets. How is this\npossible if the instrument itself doesn't have an Ethernet port? You can\nput it on the net with\n`rpi-usbtmc-gateway <https://github.com/pklaus/rpi-usbtmc-gateway>`__!\n\nTo connect using the *tcp\\_socket* backend, run:\n\n::\n\n    usbtmc-shell --backend tcp_socket 192.168.0.21\n    # or\n    usbtmc-shell --backend tcp_socket TCPIP::192.168.0.21::5025::SOCKET\n\nThis backend has no external dependencies and works on all operating\nsystems.\n\n``python_vxi11``\n----------------\n\nThis backend connects to your instrument via VXI-11. This is not USBTMC\nin a way but the interface with SCPI commands is usually the same.\n\nUses the Python library\n`python-vxi11 <https://github.com/python-ivi/python-vxi11>`__.\n\nTo connect using the *python\\_vxi11* backend, run:\n\n::\n\n    usbtmc-shell --backend python_vxi11 192.168.0.21\n    # or\n    usbtmc-shell --backend python_vxi11 TCPIP::192.168.0.21::INSTR\n\nTo use this backend, install python-vxi:\n\n::\n\n    pip install python-vxi11\n\nThe backend should work on all operating systems.\n\n``pyserial``\n------------\n\nThis backend uses `PySerial <http://pyserial.sourceforge.net/>`__ to\nconnect to your device via RS232. On some devices, this is more stable\nthan the USBTMC connection.\n\n::\n\n    usbtmc-shell --backend pyserial ASRL::/dev/ttyUSB0,9600::INSTR\n\nOff course, you need to install\n`PySerial <http://pyserial.sourceforge.net/>`__ first! The backend works\non all operating systems.\n\nResources\n=========\n\n-  A project with a similar aim is\n   `python-ivi <https://github.com/python-ivi/python-ivi>`__",
    "docs_url": "https://pythonhosted.org/universal_usbtmc/",
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pklaus/universal_usbtmc",
    "keywords": "USBTMC",
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "universal_usbtmc",
    "platform": "any",
    "project_url": "https://pypi.org/project/universal_usbtmc/",
    "release_url": "https://pypi.org/project/universal_usbtmc/0.3.3/",
    "requires_python": null,
    "summary": "Universal Python Interface For Different USBTMC Backends.",
    "version": "0.3.3"
  },
  "releases": {
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f3c1a4189e1066c3c6068a78832b10d6",
          "sha256": "1c779a7c150ee1457316965601e936aad55e7c9b9fceb813e36bbc07848ddc30"
        },
        "downloads": 1022,
        "filename": "universal_usbtmc-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f3c1a4189e1066c3c6068a78832b10d6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9284,
        "upload_time": "2015-09-19T12:21:32",
        "url": "https://files.pythonhosted.org/packages/a8/60/e376600c28d17fc170757b8408a98588b7325a4e16bc6c8561e8a12e47fe/universal_usbtmc-0.3.2.tar.gz"
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e6b54eb0221f7578215d413e1b69b66e",
          "sha256": "0d6f825750853f638330c080e7c01df5f6cedbd143661c21e742e7438de352a3"
        },
        "downloads": 692,
        "filename": "universal_usbtmc-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e6b54eb0221f7578215d413e1b69b66e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9502,
        "upload_time": "2015-09-19T13:41:14",
        "url": "https://files.pythonhosted.org/packages/63/ae/d292b153ea2b783642ae32d8a3d090a6eec380d3052abdb46b2bf410d36a/universal_usbtmc-0.3.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e6b54eb0221f7578215d413e1b69b66e",
        "sha256": "0d6f825750853f638330c080e7c01df5f6cedbd143661c21e742e7438de352a3"
      },
      "downloads": 692,
      "filename": "universal_usbtmc-0.3.3.tar.gz",
      "has_sig": false,
      "md5_digest": "e6b54eb0221f7578215d413e1b69b66e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9502,
      "upload_time": "2015-09-19T13:41:14",
      "url": "https://files.pythonhosted.org/packages/63/ae/d292b153ea2b783642ae32d8a3d090a6eec380d3052abdb46b2bf410d36a/universal_usbtmc-0.3.3.tar.gz"
    }
  ]
}