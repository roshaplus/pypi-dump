{
  "info": {
    "author": "Giacomo Nannicini",
    "author_email": "nannicini@us.ibm.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "..\n\tFile:      README.rst\n\tAuthor(s): Giacomo Nannicini\n        International Business Machines Corporation\n        nannicini@us.ibm.com\n\n\t(C) Copyright Singapore University of Technology and Design 2015.\n\t(C) Copyright International Business Machines Corporation 2016.\n\tYou should have received a copy of the license with this code.\n\tResearch partially supported by SUTD-MIT International Design Center.\n\n=================\nTable of contents\n=================\n\nThis software is released under the Revised BSD License. By using\nthis software, you are implicitly accepting the terms of the license.\n\nRBFOpt is a Python library for black-box optimization (also known as\nderivative-free optimization). It supports Python 2.7 and Python 3.\n\nContents of this directory:\n\n* LICENSE: Licensing information.\n* VERSION: Version of the library.\n* AUTHORS: Authors of the library.\n* README.rst: This file.\n* CHANGELOG: Changelog.\n* requirements.txt: List of dependencies for this project.\n* bin/\n\n  * rbfopt_cl_interface.py: Script for the command-line interface,\n    to run the library on a user-defined black-box function\n    implemented in a user-specified file.\n  * rbfopt_test_interface.py: Script to test the library on a\n    standard global optimization test set.\n\n* src/\n\n  * rbfopt/\n\n    * rbfopt_black_box.py: Description of an abstract black-box\n      function.\n    * rbfopt_algorithm.py: Main optimization algorithm, both\n      serial and parallel.\n    * rbfopt_aux_problems.py: Interface for the auxiliary problems\n      solved during the optimization process.\n    * rbfopt_degreeX_models.py: PyOmo models for the auxiliary\n      problems necessary for RBF functions with minimum required\n      polynomial degree X.\n    * rbfopt_refinement: Routines for trust-region based refinement\n      phase.\n    * rbfopt_settings.py: Global and algorithmic settings.\n    * rbfopt_test_functions.py: Mathematical test functions.\n    * rbfopt_user_black_box.py: A black-box class constructed from\n      user data.\n    * rbfopt_utils.py: Utility routines.\n    * doc/\n\n      * conf.py: Configuration file for Sphinx.\n      * Makefile: Makefile (for Linux/Mac) to build the\n\tdocumentation.\n      * make.bat: Batch file (for Windows) to build the\n\tdocumentation.\n      * \\*.rst: ReStructured Text files for the documentation.\n\n    * examples/\n\n      * rbfopt_black_box_example.py: Example of an implementation\n\tof a simple black-box function.\n\n* tests/\n\n  * context.py: Configuration file for nose.\n  * test_functions.py: Global optimization test functions.\n  * test_rbfopt_algorithm.py: Testing module for\n    rbfopt_algorithm.py.\n  * test_rbfopt_aux_problems.py: Testing module for\n    rbfopt_aux_problems.py.\n  * test_rbfopt_degreeX_models.py: Testing module for\n    rbfopt_degreeX_models.py.\n  * test_rbfopt_env.py: Environment variables for testing\n    environment.\n  * test_rbfopt_refinement: Testing module for rbfopt_refinement.py\n  * test_rbfopt_settings.py: Testing module for rbfopt_settings.py.\n  * test_rbfopt_utils.py Testing module for rbfopt_utils.py.\n\n=========================\nInstallation requirements\n=========================\n\nThis package requires the following software:\n\n* Python version >= 2.7 \n* NumPy version >= 1.11.0\n* SciPy version >= 0.17.0\n* Pyomo version >= 5.1.1\n\nThe software has been tested with the versions indicated above. It may\nwork with earlier version and should work with subsequent version, if\nthey are backward compatible. In particular, the software is known to\nwork with Pyomo version 4 and earlier versions of Scipy.\n\nThe code is mainly developed for Python 3, but it also runs on Python\n2.7. We recommend using Python 3 if possible.\n\nThe easiest way to install the package is via the Python module\nmanager pip, using the command::\n\n  pip install .\n\nTo build the documentation, you also need numpydoc::\n\n  pip install numpydoc\n\nOn Windows systems, we recommend `WinPython\n<http://winpython.sourceforge.net/>`, which comes with NumPy, SciPy\nand pip already installed. After installing WinPython, it is typically\nnecessary to update the PATH environment variable. The above command\nusing pip to install missing libraries has been successfully tested on\na fresh WinPython installation.\n\nRBFOpt requires the solution of convex and nonconvex nonlinear\nprograms (NLPs), as well as nonconvex mixed-integer nonlinear programs\n(MINLPs) if some of the decision variables (design parameters) are\nconstrained to be integer. Solution of these subproblems is performed\nthrough Pyomo, which supports any solver with an AMPL interface (.nl\nfile format). In our tests we employed BonMin and Ipopt, that are\nopen-source, with a permissive license, and available through the\nCOIN-OR repository. The end-user is responsible for checking that they\nhave the right to use whatever solver they employs.\n\nTo obtain pre-compiled binaries for Bonmin and Ipopt for several\nplatforms, we suggest having a look at the AMPL `opensource solvers\n<http://ampl.com/products/solvers/open-source/>` (also `here\n<http://ampl.com/dl/open/>`) for static binaries. **Note:** These\nbinaries are quite outdated: *much* better performance can be obtained\ncompiling Bonmin from scratch (Bonmin contains Ipopt as well),\nespecially if using a different solver from the default Mumps, e.g.,\nma27. Remember to compile Bonmin and Ipopt with ASL support.\n\nIn case any of the packages indicated above is missing, some features\nmay be disabled, not function properly, or the software may not run at\nall.\n\n=============================================\nInstallation instructions and getting started\n=============================================\n\n1) Install the package with pip as indicated above. This will install\n   the two executable Python scripts rbfopt_cl_interface.py and\n   rbfopt_test_interface.py in your bin/ directory (whatever is used\n   by pip for this purpose), as well as the module files in your\n   site-packages directory.\n\n2) Make sure Bonmin and Ipopt are in your path; otherwise, use the\n   options minlp_solver_path and nlp_solver_path in RbfoptSettings to\n   indicate the full path to the solvers. If you use RBFOpt as a\n   library and create your own RbfoptSettings object, these options\n   can be given as::\n\n     import rbfopt\n     settings = rbfopt.RbfoptSettings(minlp_solver_option='full/path/to/bonmin', nlp_solver_option='full/path/to/ipopt')\n\n   If you use the command-line tools, you can simply provide the option preceded by double hyphen, as in::\n\n     rbfopt_test_interface.py --minlp_solver_option='full/path/to/bonmin' branin\n\n3) Enjoy!\n\n4) You can test the installation by running::\n\n     rbfopt_test_interface.py branin\n\n   See::\n\n     rbfopt_test_interface.py --help\n\n   for more details on command-line options for the testing utility.\n\n   Many more test functions, with different characteristics, are\n   implemented in the file rbfopt_test_functions.py. They can all be\n   used for testing.\n\n5) Unit tests for the library can be executed by running::\n\n     python setup.py test\n\n   or::\n\n     python setup.py nosetests\n\n   or::\n\n     nosetests\n\n   from the current (main) directory. This may take some time. If some\n   of the tests fail, the library may or may not work correctly. Some\n   of the test failures are relatively harmless. You are advised to\n   contact the mailing list (see below) if you are unsure about some\n   test failure.\n\n=======================\nMinimal working example\n=======================\n\nAfter installation, the easiest way to optimize a function is to use\nthe RbfoptUserBlackBox class to define a black-box, and execute\nRbfoptAlgorithm on it. This is a minimal example to optimize the\n3-dimensional function defined below::\n\n  import rbfopt\n  import numpy as np\n  def obj_funct(x):\n    return x[0]*x[1] - x[2]\n\n  bb = rbfopt.RbfoptUserBlackBox(3, np.array([0] * 3), np.array([10] * 3),\n                                 np.array(['R', 'I', 'R']), obj_funct)\n  settings = rbfopt.RbfoptSettings(max_evaluations=50)\n  alg = rbfopt.RbfoptAlgorithm(settings, bb)\n  val, x, itercount, evalcount, fast_evalcount = alg.optimize()\n\nAnother possibility is to define your own class derived from\nRbfoptBlackBox in a separate file, and execute the command-line\ninterface on the file. An example is provided under\nsrc/rbfopt/examples, in the file rbfopt_black_box_example.py. This can\nbe executed with::\n\n  rbfopt_cl_interface.py -m src/rbfopt/examples/rbfopt_black_box_example.py\n\n=====================\nParallel optimization\n=====================\n\nRBFOpt supports asynchronous parallel optimization using Python's\nmultiprocessing library. This mode is enabled whenever the parameter\nnum_cpus is set to a value greater than 1. Black-box function\nevaluations as well as some of the heaviest computatations carried out\nby the algorithm will then be executed in parallel. Since the parallel\ncomputations are asynchronous, determinism cannot be guaranteed: in\nother words, if you execute the parallel optimizer twice in a row, you\nmay (and often will) get different results, even if you provide the\nsame random seed. This is because the order in which the computations\nwill be completed may change, and this may impact the course of the\nalgorithm.\n\nThe default parameters of the algorithm are optimized for the serial\noptimization mode. For recommendations on what parameters to use with\nthe parallel optimizer, feel free to ask on the mailing list.\n\nNote that the parallel optimizer is oblivious of the system-wide\nsettings for executing linear algebra routines (BLAS) in parallel. We\nrecommend setting the number of threads for BLAS to 1 when using the\nparallel optimizer, see the next section.\n\n==========================\nKnown issues with OpenBLAS\n==========================\n\nWe are aware of an issue when launching multiple distinct processes\nthat use RBFOpt and the NumPy implementation is configured to use\nOpenBLAS in parallel: in this case, on rare occasions we have observed\nthat some processes may get stuck forever when computing matrix-vector\nmultiplications. The problem can be fixed by setting the number of\nthreads for OpenBLAS to 1. We do not know if the same issue occurs\nwith other parallel implementations of BLAS.\n\nFor this reason, and because parallel BLAS uses resources suboptimally\nwhen used in conjunction with the parallel optimizer of RBFOpt (if\nBLAS runs in parallel, each thread of the parallel optimizer would\nspawn multiple threads to run BLAS, therefore disregarding the option\nnum_cpus), RBFOpt attempts to set the number of BLAS threads to 1 at\nrun time.\n\nAll scripts (rbfopt_cl_interface.py and rbfopt_test_interface.py) set\nthe environment variables OMP_NUM_THREADS to 1. Furthermore, the\nrbfopt module does the same when imported for the first time.\n\nNote that these settings are only effective if the environment\nvariable is set *before* NumPy is imported; otherwise, they are\nignored. If you are facing the same issue, we recommend setting\nenvironment variable OMP_NUM_THREADS to 1. In Python, this can be done\nwith::\n\n  import os\n  os.environ['OMP_NUM_THREADS'] = '1'\n\n=============\nDocumentation\n=============\n\nThe documentation for the code can be built using Sphinx with the\nnumpydoc extension. numpydoc can be installed with pip::\n\n  pip install numpydoc\n\nAfter that, the directory src/rbfopt/doc/ contains a Makefile (on\nWindows, use make.bat) and the Sphinx configuration file conf.py.\n\nYou can build the HTML documentation (recommended) with::\n\n  make html\n\nThe output will be located in _build/html/ and the index can be found\nin _build/html/index.html.\n\nA PDF version of the documentation (much less readable than the HTML\nversion) can be built using the command::\n\n  make latexpdf\n\nAn online version of the documentation for the latest master branch of\nthe code, and for the latest stable release, are available on\nReadTheDocs for the `latest\n<http://rbfopt.readthedocs.org/en/latest/>` and `stable\n<http://rbfopt.readthedocs.org/en/stable/>` version.\n\n=============\nCiting RBFOpt\n=============\n\nIf you use RBFOpt in one of your projects or papers, it would be great\nif you could cite the following paper:\n\n* A. Costa and G. Nannicini. RBFOpt: an open-source library for\n  black-box optimization with costly function\n  evaluations. `Optimization Online paper 4538\n  <http://www.optimization-online.org/DB_HTML/2014/09/4538.html>`.\n\nThe paper above describes version 1.0 of RBFOpt. Some of the\nimprovements introduced for version 2.0 are described in the following\npaper.\n\n* A. Fokoue, G. Diaz, G. Nannicini, H. Samulowitz. An effective\n  algorithm for hyperparameter optimization of neural networks. IBM\n  Journal of Research and Development, 61(4-5), 2017, to appear.\n\n=======\nSupport\n=======\n\nThe best place to ask question is the mailing list:\n\nrbfopt@list.coin-or.org\n\n`Subscription page <http://list.coin-or.org/mailman/listinfo/rbfopt>`\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/coin-or/rbfopt",
    "keywords": "",
    "license": "Revised BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rbfopt",
    "platform": "",
    "project_url": "https://pypi.org/project/rbfopt/",
    "release_url": "https://pypi.org/project/rbfopt/4.0.0.post1/",
    "requires_dist": [
      "scipy",
      "pyomo",
      "numpy"
    ],
    "requires_python": "",
    "summary": "Library for black-box (derivative-free) optimization",
    "version": "4.0.0.post1"
  },
  "releases": {
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8fbc03f0dc45dd62351a5499f429bace",
          "sha256": "649f1283f805c5a4e617d7099d355f8b4bd715fe77939e99318f494e711ff1cc"
        },
        "downloads": 0,
        "filename": "rbfopt-4.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8fbc03f0dc45dd62351a5499f429bace",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 121124,
        "upload_time": "2017-09-04T22:48:02",
        "url": "https://files.pythonhosted.org/packages/46/b9/7dd72f89986ad8c227a3f01c7be6c9f6fc3c5e997564f2d319edc5dda30e/rbfopt-4.0.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4b65efc3464ff53de69151abddd0c330",
          "sha256": "cc9bf2dae0595b48dc94f4dadc889d0303b1781ee7ccaaba892b9e79b6cb9c85"
        },
        "downloads": 0,
        "filename": "rbfopt-4.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4b65efc3464ff53de69151abddd0c330",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 127263,
        "upload_time": "2017-09-04T22:39:55",
        "url": "https://files.pythonhosted.org/packages/e1/76/88de9c3cbc99135e974512548ae634c53ec944f8087a2dde211a31344fe0/rbfopt-4.0.0.tar.gz"
      }
    ],
    "4.0.0.post1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "205080de8d5cb1c843cf5def88ad66c0",
          "sha256": "e402aaf42aea8f13562f1324ad455040a01cbf11440cd0221b4c21cb7aa8dc48"
        },
        "downloads": 0,
        "filename": "rbfopt-4.0.0.post1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "205080de8d5cb1c843cf5def88ad66c0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 121267,
        "upload_time": "2017-09-04T23:00:08",
        "url": "https://files.pythonhosted.org/packages/77/d9/b393d8b0e50639ba77ecc4100219d53770256150466154eb73c2d4970584/rbfopt-4.0.0.post1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "af10dbabc7dfacce1eaab89c830a6305",
          "sha256": "1e0eb32937a465cc5ddc1a7dfda20fb0e1f9a6dd8ba9ec28791dbd5fa981e605"
        },
        "downloads": 0,
        "filename": "rbfopt-4.0.0.post1.tar.gz",
        "has_sig": false,
        "md5_digest": "af10dbabc7dfacce1eaab89c830a6305",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 127333,
        "upload_time": "2017-09-04T23:00:13",
        "url": "https://files.pythonhosted.org/packages/59/d4/e313f9f9e47e2551f773949c2b7dbbff1df189a5958ca7323a859c0ccfa4/rbfopt-4.0.0.post1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "205080de8d5cb1c843cf5def88ad66c0",
        "sha256": "e402aaf42aea8f13562f1324ad455040a01cbf11440cd0221b4c21cb7aa8dc48"
      },
      "downloads": 0,
      "filename": "rbfopt-4.0.0.post1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "205080de8d5cb1c843cf5def88ad66c0",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 121267,
      "upload_time": "2017-09-04T23:00:08",
      "url": "https://files.pythonhosted.org/packages/77/d9/b393d8b0e50639ba77ecc4100219d53770256150466154eb73c2d4970584/rbfopt-4.0.0.post1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "af10dbabc7dfacce1eaab89c830a6305",
        "sha256": "1e0eb32937a465cc5ddc1a7dfda20fb0e1f9a6dd8ba9ec28791dbd5fa981e605"
      },
      "downloads": 0,
      "filename": "rbfopt-4.0.0.post1.tar.gz",
      "has_sig": false,
      "md5_digest": "af10dbabc7dfacce1eaab89c830a6305",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 127333,
      "upload_time": "2017-09-04T23:00:13",
      "url": "https://files.pythonhosted.org/packages/59/d4/e313f9f9e47e2551f773949c2b7dbbff1df189a5958ca7323a859c0ccfa4/rbfopt-4.0.0.post1.tar.gz"
    }
  ]
}