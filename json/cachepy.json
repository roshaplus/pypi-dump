{
  "info": {
    "author": "Dmitry Kislov",
    "author_email": "kislov@easydan.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development"
    ],
    "description": "Intro\n*****\n\nCaching results of functions in Python.\n\n\nFeatures\n========\n\n   * Storing cached data either on disk or in memory\n\n   * Setting up time-to-live and the number of function calls for\n     your cache\n\n   * Encryption of cached data (symmetric encryption (RSA) algorithm is used)\n\n\nNote\n====\n\n   * Encryption functionality requires *pycrypto* package to be installed\n\n   * When using cache-to-file functionality you have to to clean up\n     (if needed) created file(s) manually\n\n\nExamples\n========\n\n::\n\n   from cachepy import *\n\n   mycache = Cache() # cache to memory without encryption\n\n   @mycache\n   def my_heavy_function(x):\n       \"\"\"Performs heavy computations\"\"\"\n       print('Hi, I am called...')\n       return x**2\n\n   my_heavy_function(2)\n   # \"Hi, I am called...\" will be printed to stdout only once\n   my_heavy_function(2)\n\n\nTo store data to file, you need to create decorator as follows: ::\n\n   # create cache-to-file decorator\n   filecache = Cache('mycache.dat')\n\nIts behaviour is the same as a memory-based one.\n\nOne can set up time-to-live and/or maximum number of retrievals for cached\ndata when a decorator is created: ::\n\n   import time\n   from cachepy import *\n   # or from cachepy import Cache\n\n   cache_with_ttl = Cache(ttl=2) # ttl given in seconds\n\n   @cache_with_ttl\n   def my_heavy_function(x):\n       \"\"\"Performs heavy computations\"\"\"\n       print('Hi, I am called...')\n       return x**2\n\n   my_heavy_function(3)\n   my_heavy_function(3) # This will not print 'Hi, I am called ...'\n   time.sleep(2)\n   my_heavy_function(3) # 'Hi, I am called ...' will be printed again\n\n   cache_with_noc = Cache(noc=2) # Number-of-calls = 2\n\n   @cache_with_noc\n   def my_heavy_function(x):\n       \"\"\"Performs heavy computations\"\"\"\n       print('Hi, I am called...')\n       return x**2\n\n   my_heavy_function(3)\n   my_heavy_function(3) # This will not print 'Hi, I am called ...'\n   my_heavy_function(3) # 'Hi, I am called ...' will be printed again\n\nIt is easy to use both *noc* and *ttl* arguments on a cache decorator: ::\n\n   cache_with_noc_ttl = Cache(noc=2, ttl=1)\n\n   @cache_with_noc_ttl\n   def my_heavy_function(x):\n       \"\"\"Performs heavy computations\"\"\"\n       print('Hi, I am called...')\n       return x**2\n\n   my_heavy_function(3)\n   my_heavy_function(3) # This will not print 'Hi, I am called ...'\n   my_heavy_function(3) # This will print 'Hi, I am called ...'\n   time.sleep(2) # get ttl to be expired\n   my_heavy_function(3) # This will print 'Hi, I am called ...'\n\nOne can encrypt cached data by providing non-empty *key* argument as a\npassword (RSA algo is used): ::\n\n   cache_to_file_ttl_noc = Cache('mycache.dat',\n                                  noc=2, ttl = 2, key='mypassword')\n\n   @cache_to_file_ttl_noc\n   def my_heavy_function(x):\n       \"\"\"Performs heavy computations\"\"\"\n       print('Hi, I am called...')\n       return x**2\n\n   my_heavy_function(2) # Will print 'Hi, I am called...'\n   my_heavy_function(2) # Will not print 'Hi, I am called...'\n\nCalling the *my_heavy_function* function being decorated by *cache_to_file_ttl_noc* will\nstore *4* (result of computations) in the file *mycache.dat*; along\nwith the result of computations, additional info will be stored (these all will be\nencrypted by the RSA algo with the password *mypassword*): result\nexpiration  time (computed from ttl), noc and the number of performed\ncalls of the decorated function (*my_heavy_function*). Data will not\nbe encrypted, if *pycrypto* package isn't installed. If you pass non-\nempty *key* parameter to the  *Cache* constructor, the warning will\noccurred (\"Pycrypto not installed. Data isn't encrypted\"); In this\ncase, the cache will work without encryption functionality.\n\n\nTesting\n=======\n\nThe code tested (and works as expected) in **Python > 2.7.x** and **Python > 3.4.x**.\n\n      python -m  cachepy.tests\n\n\nTODO\n====\n\n   * Writing backend for redis server\n\n   * Testing in Python 3.x causes Error 11?!\n   \n\nLog list\n========\n\n\t* Version 0.1\n\t\t\n\t\t- initial release\n\n\n*Code author: Dmitry Kislov <kislov@easydan.com>*",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/scidam/cachepy",
    "keywords": "caching,python,cache to file,caching callables",
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "cachepy",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/cachepy/",
    "release_url": "https://pypi.org/project/cachepy/0.1/",
    "requires_python": null,
    "summary": "Caching results of functions in Python",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "55f882f518fdc01c2c07f7574693de06",
          "sha256": "e8e682940ba46d5676e3520cfb12da2f74ac5e48927e001c787dc1adfec53330"
        },
        "downloads": 537,
        "filename": "cachepy-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "55f882f518fdc01c2c07f7574693de06",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8319,
        "upload_time": "2016-03-31T05:30:45",
        "url": "https://files.pythonhosted.org/packages/46/9e/65ed8ae85bda45130f7d8b76f334b3538ea3f95958742d05f0a10da0360d/cachepy-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "55f882f518fdc01c2c07f7574693de06",
        "sha256": "e8e682940ba46d5676e3520cfb12da2f74ac5e48927e001c787dc1adfec53330"
      },
      "downloads": 537,
      "filename": "cachepy-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "55f882f518fdc01c2c07f7574693de06",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8319,
      "upload_time": "2016-03-31T05:30:45",
      "url": "https://files.pythonhosted.org/packages/46/9e/65ed8ae85bda45130f7d8b76f334b3538ea3f95958742d05f0a10da0360d/cachepy-0.1.tar.gz"
    }
  ]
}