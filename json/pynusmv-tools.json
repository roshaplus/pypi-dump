{
  "info": {
    "author": "Simon BUSARD, Xavier GILLARD",
    "author_email": "simon.busard@uclouvain.be, xavier.gillard@uclouvain.be",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# PyNuSMV-Tools\nThis package contains several tools and experiments that have been developed using\nPyNuSMV. These tools serve as examples of how to use PyNuSMV and what can be\nachieved.\n\n## About PyNuSMV\nPyNuSMV is a Python binding for NuSMV developed by the Louvain Verification Lab.\nIt is intended to provide a Python interface to NuSMV, allowing to use NuSMV as\na library. (And using it is exactly what is done in the pynusmv-tools package !)\n\nMore details about this tool are provided in the PyNuSMV documentation\n(see the DOCUMENTATION section below).\n\n## Installation\nGive some instructions for the installation. Should revolve around a plain\n````\npip3 install pynusmv-tools\n````\n\n## Contents\n\n### Tree-Like Annotated Counter-Examples\nThis tool is provided in the `pynusmv_tools.tlace` package.\n\nTree-Like Annotated Counter-Examples (TLACEs for short) are rich branching counter-examples [BP12]. This tool extends NuSMV explanations to produce these rich counter-examples instead of single paths. It uses NuSMV model checking algorithms and path explanation generators (ex_explain, eg_explain, eu_explain), the parser for CTL formulas, etc. The result is a tool taking an SMV model as argument, checking all CTL properties of the model and producing TLACEs when the property is violated.\n\nTo run this tool, launch the following command from the src/ directory of PyNuSMV package.\n````\ntlace MODEL\n````\nwhere MODEL is an SMV model. The tool computes the given model, check all its CTL specifications and produces a TLACE explaining why each violated specification is violated.\n\n\n### ARCTL with TLACE generation\nAction-Restricted CTL (ARCTL for short) is an extension of CTL where quantified paths are restricted to paths of actions satisfying a propositional property [PR07]. This tool is defined in the `pynusmv_tools.arctl` package.\n\nIt performs ARCTL model checking on SMV models and produces counter-examples and witnesses to explain ARCTL properties violation or satisfaction. These diagnostics can be either simple paths of the system or full TLACEs; TLACEs are defined in the separated sub-package `pynusmv_tools.arctl.tlace`.\n\nFinally, this tool provides two CLI to use these functionalities; these CLI are defined in the sub-package `pynusmv_tools.arctl.cmd`. `pynusmv_tools.arctl.cmd.trace` is a CLI that allows to read a system from an SMV model and to check ARCTL specifications over it. Whatever the result of the verification, this CLI produces a diagnostic to explain the verification outcome. This CLI produces simple paths of the system as diagnostics. On the other hand, `pynusmv_tools.arctl.cmd.tlace` provides the same functionalities but produces TLACEs as diagnostics.\n\nTo run this tool, launch the following command:\n````\narctl\n````\n\nThis gives a prompt accepting some commands. The list of accepted commands can be shown using the help command.\n\nTo launch the CLI producing TLACEs. Just run the same command with tlace instead of trace; accepted commands are the same.\n\n\n### CTLK model checking and TLACE generation and exploration\nCTLK is an extension of CTLK allowing to reason about time and knowledge of the agents of a system [PL03]. This logic is interpreted over systems composed of agents that have a limited knowledge of the system current state. It allows to mix temporal and epistemic operators to express, for example, that at all time, an agent knows that a property is true.\n\nThis tool performs model checking of CTLK on multi-agent systems defined with the SMV language. Il also generates diagnostics for explaining verification outcomes. Finally, it allows the user to interactively explore a TLACE explaining the result of verification.\n\nMore precisely, this tool accepts any SMV model and follows these conventions:\n    - any instance of a module declared in the \"main\" module is considered an agent;\n    - the direct knowledge of an agent is given by all its local variables, i.e. the variables declared in its module, and by all its arguments that are variables.\n\nTo run this tool, launch the following command:\n````\nctlk\n````\n\nThis gives a prompt accepting some commands listed by the \"help\" command. This prompt accepts, for example, the \"model\" command to specify an SMV model, the \"check\" command to verify a CTLK property, or the \"explain\" command to explain the model checking result. In particular, the \"explain\" command opens another prompt to explore the diagnostic; the help can be accessed through the \"help\" command. Finally, note that any command has its own help message, accessible through the \"help <cmd>\" command.\n\n\n### CTL model checking\nPyNuSMV is shipped with a reimplementation of CTL model checking, for performance measures. This tool can be run with\n````\nctl [model]\n````\nwhere [model] is the path to a NuSMV model. The tool loads the model, checks every CTL specification in the model file and outputs its truth value.\n\n\n### Fair CTL model checking\nA reimplementation of Fair CTL model checking is provided. This tool can be run with\n````\nfairctl [model]\n````\nwhere model is the path to a NuSMV model. The tool loads the model, checks every CTL specification in the model file (under fairness constraints of the model) and outputs its truth value.\n\n\n### Multi-agent systems\nAn implementation of Multi-agent systems (MAS) is provided with PyNuSMV. The tool is a library to define and manipulate MASs with NuSMV. To load a model and get the corresponding MAS, you have to use `pynusmv_tools.mas.glob` to load a model (`load_from_file` function) and to get the MAS (mas function).\n\nOn a MAS, you can perform any action given by a PyNuSMV BddFsm, plus additional functionalities like getting equivalent states according to a set of agents' knowledge or getting the protocol of any subset of agents (see `pynusmv_tools.mas.mas` for more information).\n\nThe assumptions on the given SMV model representing a MAS are the following:\n - Every module instance of the MAIN module is considered as an agent;\n - The agent's name is the variable name of the instance;\n - The knowledge of the agent (its observations) are its internal state variables (the variables beginning with agent's name) and all variables given as a parameter at instanciation of the module (only pure variables are considered, not expressions or input variables).\n\n\n### ATL model checking\nAn implementation of ATL model checking is provided, relying on the MAS library. This tool can be run with\n````\natl [model]\n````\nwhere model is the path to an SMV model representing a Multi-agent system (see above). The tool loads the model and starts a minimal command-line interface. Every typed ATL formula is checked and the result of the verification is given at standard output. The command-line interface can be exited with EOF (CTRL-D).\n\nThe grammar for ATL properties phi is the following:\n````\n  phi ::= EXPR | '(' phi ')' | phi '&' phi | phi '|' phi | '~'phi | phi '->' phi\n          | phi '<->' phi | '<' group '>' psi | '[' GROUP ']' psi\n  psi ::= 'X' phi | 'G' phi | 'F' phi | '[' phi 'U' phi ']' | '[' phi 'W' phi ']'\n````\nwhere EXPR is any simple expression over variables of the system, enclosed into simple quotes (e.g. EXPR = 'transmission = completed' or EXPR = 'v = 3'), and GROUP is a list of agent names enclosed into simple quotes, separated by commas (e.g. GROUP = 'sender', 'transmitter' or GROUP = 'dealer').\n\n\n### Model checking ATLK with full and partial observability\nAn implementation of model checking algorithms for ATLK with full and partial observability [BPQR13] is provided. This tool can be run with\n````\natlk_fo [model]\n````\nfor the full observability setting, and with\n````\natlk_po [model]\n````\nfor the partial observability setting.\n\n[model] is the path to an SMV model representing a Multi-agent system (see above). The tool loads the model and starts a minimal command-line interface. Every typed ATLK formula is checked and the result of the verification is given at standard output. The command-line interface can be exited with EOF (CTRL-D).\n\nThe grammar for ATLK properties phi (under both semantics) is the following:\n````\n  phi ::= EXPR | '(' phi ')' | phi '&' phi | phi '|' phi | '~'phi | phi '->' phi\n          | phi '<->' phi | '<' group '>' psi | '[' GROUP ']' psi\n          | 'A' psi | 'E' psi | 'nK' '<' AGENT '>' phi | 'K' '<' AGENT '>' phi\n          | 'nE' '<' GROUP '>' phi | 'K' '<' GROUP '>' phi\n          | 'nD' '<' GROUP '>' phi | 'D' '<' GROUP '>' phi\n          | 'nC' '<' GROUP '>' phi | 'C' '<' GROUP '>' phi\n  psi ::= 'X' phi | 'G' phi | 'F' phi | '[' phi 'U' phi ']' | '[' phi 'W' phi ']'\n````\nwhere EXPR is any simple expression over variables of the system, enclosed into simple quotes (e.g. `EXPR = 'transmission = completed'` or `EXPR = 'v = 3'`), AGENT is an agent name enclosed into simple quotes, and GROUP is a comma-separated list of agent names (e.g. GROUP = 'sender', 'transmitter' or AGENT = 'dealer').\n\n\nA second implementation of the algorithms can be run with\n````\natlk_irf -m [model] -p [property]\n````\n\n[property] is as above, but [model] can be either a model as above, or a python module containing the `model()` function, that returns the SMV model itself. If the module contains a `agents()` function, it is used to retreive the list of agents of the model (instead of infering them as explained above).\n\nThe tool supports several command-line arguments. For their list and descriptions, use\n````\natlk_irf --help\n````\n\n\n### DOT model export\nA DOT model export tool is provided. To run this tool, run\n````\nsmv2dot model\n````\nwhere model is the path to an SMV model. The output of the tool is a DOT representation of the reachable state-space of the model, printed on standard output (copy/paste the output in a file or redirect sdtout into a file). This is useful to get an overview of the state-space and to inspect more precisely the model in a visual way.\n\n\n### Models comparator\nA tool to compare to NuSMV models is provided. To run this tool, run\n````\nsmv_cmp first second\n````\nwhere first and second are paths to two SMV models. The output of the tool is a\ncomparison of both models in terms of states and transitions. The tool is\nuseful to compare two similar models, that is, models based on the same\nset of variables but with different reachable state-space and transition\nrelations. The tool can, in this case, show states that are in one model but\nnot in another, as well as transitions that appear in one model but not in the\nother.\n\n## Bounded Model checking\n### Diagnosability\nThis tool adopts the approach of [PCC02] and performs a bounded diagnosability\ntest of a system represented as an SMV model. To run the tool, just use the\n`diagnos` command. Complete usage information is available using\n\n````\ndiagnos --help\n````\n\n#### More information\nMore information and details about this tool can be found in sections 4.3 of\n[GP16]http://dial.uclouvain.be/downloader/downloader.php?pid=thesis%3A4575&datastream=PDF_01\n\n### BMC LTL\nThe LTL bounded model checking verifier provided in this package comes in three\nflavours. The first one `bmc_ltl` was developed to illustrate the way one could\nuse the NuSMV api exposed throught pynusmv to easily carry out sat based bounded\nmodel checking. This tool uses the NuSMV syntax for LTL properties.\n\nThe second alternative `bmc_ltl_li` pursues the same objective but illustrates\nin greater depth how one can use the bmc related capabilities of pynusmv to\nwrite verification tools. (Uses less high level apis). This tool uses the NuSMV\nsyntax for LTL properties.\n\nThe third one `bmc_ltl_py` illustrates how easily one can use the bmc extension\nof pynusmv to create tools that verify custom logics. This tool uses a different\nsyntax from the standard SMV one.\n\n#### Syntax of bmc_ltl_py\n````\nLTL         :=   '!'  LTL\n             |   '[]' LTL\n             |   '<>' LTL\n             |   '()' LTL\n             |   LTL 'U'   LTL\n             |   LTL 'W'   LTL\n             |   LTL '&'   LTL\n             |   LTL '|'   LTL\n             |   LTL '^'   LTL\n             |   LTL '=>'  LTL\n             |   LTL '<=>' LTL\n             |   comparison\n\n\ncomparison  :=   arith '<'  arith\n             |   arith '<=' arith\n             |   arith '>'  arith\n             |   arith '>=' arith\n             |   arith '='  arith\n             |   arith '!=' arith\n             |   arith\n\narith       := - arith\n             |   arith '<<'  arith\n             |   arith '>>'  arith\n             |   arith '*'   arith\n             |   arith '/'   arith\n             |   arith 'mod' arith\n             |   arith '+'   arith\n             |   arith '-'   arith\n             |   atom\n\natom        := TRUE | FALSE | variable | number\n\nvariable    := [a-zA-Z_@]+[a-zA-Z0-9_@.]*\nnumber      := [0-9]+\n````\n\n#### More information\nMore information and details about these tools can be found in sections 4.1-4.2 of\n[GP16]http://dial.uclouvain.be/downloader/downloader.php?pid=thesis%3A4575&datastream=PDF_01\n\n\n## REFERENCES\n* [BP12] Simon Busard, Charles Pecheur: Rich Counter-Examples for Temporal-Epistemic Logic Model Checking. IWIGP 2012: 39-53\n* [BPQR13] Simon Busard, Charles Pecheur, Hongyang Qu, Franco Raimondi: Reasoning about Strategies under Partial Observability and Fairness Constraints. Proceedings of SR 2013, EPTCS Vol. 112, pp. 71\u201379, 2013.\n* [PL03] W.Penczek, A.Lomuscio: Verifying epistemic properties of multi-agent systems via bounded model checking. Fundamenta Informaticae, 55(2) :167\u2013185, 2003.\n* [PR07] Charles Pecheur, Franco Raimondi: Symbolic Model Checking of Logics with Actions. MoChArt 2006: 113-128\n* [GP16] Xavier Gillard: Adding SAT-based model checking to the PyNuSMV framework. ([MSc Thesis]http://dial.uclouvain.be/downloader/downloader.php?pid=thesis%3A4575&datastream=PDF_01)\n* [PCC02] Charles Pecheur, Alessandro Cimatti, Roberto Cavada: Formal verification of diagnosability via symbolic model checking. Workshop on Model Checking and Artificial Intelligence (MoChArt-2002), Lyon, France. 2002.\n* [BCZ99] Armin Biere, Alessandro Cimatti, Edmund Clarke, Yunshan Zhu: Symbolic model checking without BDDs. In International conference on tools and algorithms for the construction and analysis of systems (pp. 193-207). Springer Berlin Heidelberg.\n* [BCCSZ03] Armin Biere, Alessandro Cimatti, Edmund Clarke, Ofer Strichman, Yunshan Zhu, Y. (2003). Bounded model checking. Advances in computers, 58, 117-148.\n\n## Credits\nPyNuSMV is developed, maintained and distributed by the LVL Group at Universit\u00e9\nCatholique de Louvain. Please contact <lvl at listes dot uclouvain dot be> for any\nquestion regarding this software distribution.\n\nNuSMV is a symbolic model checker developed as a joint project between several\npartners and distributed under the GNU LGPL license. Please contact <nusmv at\nfbk dot eu> for getting in touch with the NuSMV development staff.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://lvl.info.ucl.ac.be/Tools/PyNuSMV",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pynusmv-tools",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pynusmv-tools/",
    "release_url": "https://pypi.org/project/pynusmv-tools/1.0rc7/",
    "requires_python": "",
    "summary": "Tools, examples and experiments that showcase the potential uses for PyNuSMV",
    "version": "1.0rc7"
  },
  "releases": {
    "1.0rc3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2aa4728087e82bce67a760078d148432",
          "sha256": "716e96bbfa9aa15f871d9ab2d742f6f238b527862c979dd7a3854ba6e18784ac"
        },
        "downloads": 244,
        "filename": "pynusmv_tools-1.0rc3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2aa4728087e82bce67a760078d148432",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 195858,
        "upload_time": "2016-12-16T23:36:47",
        "url": "https://files.pythonhosted.org/packages/a7/fd/05f0608655d88bcbb642057f619a9c477e680ee517c95249d85ce0b3876c/pynusmv_tools-1.0rc3-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "87b34b278f755308c7707de2c99ec502",
          "sha256": "5c86b70acbf4b8bb56c84112283c61f7af7d39aebd54e134993aa133b8869877"
        },
        "downloads": 246,
        "filename": "pynusmv-tools-1.0rc3.tar.gz",
        "has_sig": false,
        "md5_digest": "87b34b278f755308c7707de2c99ec502",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 132815,
        "upload_time": "2016-12-16T23:36:51",
        "url": "https://files.pythonhosted.org/packages/f9/77/0293785fedfd72cc13b5e39ccb9e1241755ca26eff96262be9c3d59556da/pynusmv-tools-1.0rc3.tar.gz"
      }
    ],
    "1.0rc4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e9c0f60a90e7bb9841af1403f5352b34",
          "sha256": "72dd992dcf37fbebb1ac2bfe34a7539d682a3f7b45def2874bec1eaa81df1753"
        },
        "downloads": 240,
        "filename": "pynusmv_tools-1.0rc4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e9c0f60a90e7bb9841af1403f5352b34",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 196120,
        "upload_time": "2016-12-17T00:15:37",
        "url": "https://files.pythonhosted.org/packages/0e/f8/dd5e899be3101c323ba2c62d9b53f5a8245d96dfd73402dd51cb505a94ac/pynusmv_tools-1.0rc4-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f18e36353c246b8701d3e0984146bba5",
          "sha256": "4befeb7db2ba893c6c4b04cb13b6fcca49916536ee245ff91629aa6f31bd3a35"
        },
        "downloads": 254,
        "filename": "pynusmv-tools-1.0rc4.tar.gz",
        "has_sig": false,
        "md5_digest": "f18e36353c246b8701d3e0984146bba5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 132835,
        "upload_time": "2016-12-17T00:15:20",
        "url": "https://files.pythonhosted.org/packages/10/65/5169b6dc3581cded33622f38e7c8111f527144d6fdcdf48e99bdfd069a07/pynusmv-tools-1.0rc4.tar.gz"
      }
    ],
    "1.0rc5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "02117972c3cea0750a06bd79abeb34e9",
          "sha256": "65a2a9334cad96c4119622996a50b7a3bc7a9c94aee38685fdde5dbf42db505b"
        },
        "downloads": 77,
        "filename": "pynusmv-tools-1.0rc5.macosx-10.11-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "02117972c3cea0750a06bd79abeb34e9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 335547,
        "upload_time": "2016-12-21T12:22:23",
        "url": "https://files.pythonhosted.org/packages/81/9e/011105bd6ad0559b1dc3b602e88fb729537494d279a5c60aef78a1bc40ae/pynusmv-tools-1.0rc5.macosx-10.11-x86_64.tar.gz"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "215f5299c8ba37c93281e58a31715853",
          "sha256": "29820af5942b27afe0282bcf8d73fc1f89cd3845adb0518e725a102cc2b514f4"
        },
        "downloads": 78,
        "filename": "pynusmv_tools-1.0rc5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "215f5299c8ba37c93281e58a31715853",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 196795,
        "upload_time": "2016-12-21T12:27:02",
        "url": "https://files.pythonhosted.org/packages/e5/3a/21bc80d7718d2b14797633ff38050e56e2c490480e0f941baf32759cadf4/pynusmv_tools-1.0rc5-py3-none-any.whl"
      }
    ],
    "1.0rc6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "28e2cd880277f23fe8be70afd68e3a01",
          "sha256": "ed4192c8268bba1f8e399b96a2a90c31950172ddc65ed5e5367286137ba1e3b7"
        },
        "downloads": 236,
        "filename": "pynusmv_tools-1.0rc6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "28e2cd880277f23fe8be70afd68e3a01",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 235217,
        "upload_time": "2017-01-05T00:35:24",
        "url": "https://files.pythonhosted.org/packages/ad/21/896e4a94bed1a3de67a493a36f782c8b83ceb49e0bf7786f9b7f47023aed/pynusmv_tools-1.0rc6-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "05f42657e0d14a5c37e06220814b7de3",
          "sha256": "81d04ebc243e1fc6f35b773135b8f52bdc9923929985ed6b406b560ea5a6472e"
        },
        "downloads": 239,
        "filename": "pynusmv-tools-1.0rc6.tar.gz",
        "has_sig": false,
        "md5_digest": "05f42657e0d14a5c37e06220814b7de3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 167450,
        "upload_time": "2017-01-05T00:35:27",
        "url": "https://files.pythonhosted.org/packages/e7/e4/6d8f480bc3b8d2fda0ab65549d72648ec34eaaa8ec21dcd28d9d89c0cec7/pynusmv-tools-1.0rc6.tar.gz"
      }
    ],
    "1.0rc7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "265d0071fbc2701da634ebad32263398",
          "sha256": "fc58f09f25c2138a627e2be588ada03c2fe047b48951c75b29d7c12d5ec78967"
        },
        "downloads": 0,
        "filename": "pynusmv_tools-1.0rc7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "265d0071fbc2701da634ebad32263398",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 266975,
        "upload_time": "2017-05-19T18:36:06",
        "url": "https://files.pythonhosted.org/packages/af/0b/0476eacf2453f682517809165ad9f2e1618cc0da6b6aeba814f62b6c005d/pynusmv_tools-1.0rc7-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "7bfab3454f6dc6555ca69597dc824df8",
          "sha256": "aacafff1f6094a2404f0dbe4f3a1274a977ab1ede30d897dce6819a42816cb4a"
        },
        "downloads": 0,
        "filename": "pynusmv-tools-1.0rc7.tar.gz",
        "has_sig": false,
        "md5_digest": "7bfab3454f6dc6555ca69597dc824df8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 186849,
        "upload_time": "2017-05-19T18:36:09",
        "url": "https://files.pythonhosted.org/packages/1c/86/8b83b354b3fa9e1ac06bf0dbe62b6247b8f59b91964b16f7f0694c1c30d2/pynusmv-tools-1.0rc7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "265d0071fbc2701da634ebad32263398",
        "sha256": "fc58f09f25c2138a627e2be588ada03c2fe047b48951c75b29d7c12d5ec78967"
      },
      "downloads": 0,
      "filename": "pynusmv_tools-1.0rc7-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "265d0071fbc2701da634ebad32263398",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 266975,
      "upload_time": "2017-05-19T18:36:06",
      "url": "https://files.pythonhosted.org/packages/af/0b/0476eacf2453f682517809165ad9f2e1618cc0da6b6aeba814f62b6c005d/pynusmv_tools-1.0rc7-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "7bfab3454f6dc6555ca69597dc824df8",
        "sha256": "aacafff1f6094a2404f0dbe4f3a1274a977ab1ede30d897dce6819a42816cb4a"
      },
      "downloads": 0,
      "filename": "pynusmv-tools-1.0rc7.tar.gz",
      "has_sig": false,
      "md5_digest": "7bfab3454f6dc6555ca69597dc824df8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 186849,
      "upload_time": "2017-05-19T18:36:09",
      "url": "https://files.pythonhosted.org/packages/1c/86/8b83b354b3fa9e1ac06bf0dbe62b6247b8f59b91964b16f7f0694c1c30d2/pynusmv-tools-1.0rc7.tar.gz"
    }
  ]
}