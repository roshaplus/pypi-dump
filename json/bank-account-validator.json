{
  "info": {
    "author": "Filipe Waitman",
    "author_email": "filwaitman@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python"
    ],
    "description": "Bank Account Validator\r\n=======================\r\n\r\nPython implementation for bank account validation.\r\n\r\nCurrently, the biggest Brazilian banks are implemented - and so being validated. There is no other countries' banks implemented, but the code is modular and it can be done easily.\r\n\r\nUsage:\r\n\r\n.. code:: python\r\n\r\n    from bank_account_validator.core import Bank\r\n    bank_class = Bank.get('bank_code', 'country_code')\r\n    bank_class(branch='branch', branch_digit='branch_digit', \r\n               account='account', account_digit='account_digit').execute()\r\n\r\n\r\n\r\nExamples:\r\n\r\n.. code:: python\r\n\r\n    from bank_account_validator.core import Bank, BrazilianBank\r\n\r\n    # Account below is correct, so nothing is raised by calling execute()\r\n    bank_class = Bank.get('237', 'BR')\r\n    bank_class(branch='1769', branch_digit='8', account='200040', account_digit='7').execute()\r\n\r\n    # Account below has invalid branch so InvalidBranch will be raised\r\n    bank_class = BrazilianBank.get('237')\r\n    bank_class(branch='1769', branch_digit='0', account='200040', account_digit='7').execute()\r\n    # InvalidBranch: Branch \"1769-0\" is wrong.\r\n\r\n    # Account below has invalid account so InvalidAccount will be raised\r\n    bank_class = BrazilianBank.get('237')\r\n    bank_class(branch='1769', branch_digit='8', account='200040', account_digit='0').execute()\r\n    # InvalidAccount: Account \"0200040-0\" is wrong.\r\n\r\n    # Sometimes there is not an unitary validation for both branch and account\r\n    # I mean, the full combination is evaluated at once.\r\n    bank_class = BrazilianBank.get('033')\r\n    bank_class(branch='2006', branch_digit='', account='01008407', account_digit='1').execute()\r\n    # InvalidBranchAndAccountCombination: Combination (branch=\"2006\", account=\"01008407-1\") does not match.\r\n\r\n    # It also validates wether digits must be supplied or not, as well as branch/account lengths\r\n    bank_class = BrazilianBank.get('237')\r\n    bank_class(branch='111769', branch_digit='8', account='200040', account_digit='7').execute()\r\n    # InvalidBranchlength: For bank code \"237\", branches length must be 4.\r\n\r\n    bank_class(branch='1769', branch_digit='8', account='11200040', account_digit='7').execute()\r\n    # InvalidAccountlength: For bank code \"237\", accounts length must be 7.\r\n\r\n    bank_class(branch='1769', branch_digit='', account='200040', account_digit='7').execute()\r\n    # MissingBranchDigit: For bank code \"237\", branches must have a digit, of length 1.\r\n\r\n    bank_class(branch='1769', branch_digit='11', account='200040', account_digit='7').execute()\r\n    # UnexpectedBranchDigit: For bank code \"237\", branches must have 1 digits.\r\n\r\n    bank_class(branch='1769', branch_digit='8', account='200040', account_digit='').execute()\r\n    # MissingAccountDigit: For bank code \"237\", accounts must have a digit, of length 1.\r\n\r\n    bank_class(branch='1769', branch_digit='8', account='200040', account_digit='11').execute()\r\n    # UnexpectedAccountDigit: For bank code \"237\", accounts must have 1 digits.\r\n\r\n\r\n\r\nContribute\r\n----------\r\n\r\nDid you think in some interesting feature, or have you found a bug? Please let me know!\r\n\r\nOf course you can also download the project and send me some `pull requests <https://github.com/filwaitman/bank-account-validator/pulls>`_.\r\n\r\n\r\nYou can send your suggestions by `opening issues <https://github.com/filwaitman/bank-account-validator/issues>`_.\r\n\r\nYou can contact me directly as well. Take a look at my contact information at `http://filwaitman.github.io/ <http://filwaitman.github.io/>`_ (email is preferred rather than mobile phone).",
    "docs_url": null,
    "download_url": "https://github.com/filwaitman/bank-account-validator/tarball/0.1",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/filwaitman/bank-account-validator",
    "keywords": "",
    "license": "UNKNOWN",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bank-account-validator",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/bank-account-validator/",
    "release_url": "https://pypi.org/project/bank-account-validator/0.1/",
    "requires_python": null,
    "summary": "UNKNOWN",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7c6a27e20265664b8a41cdae690125d4",
          "sha256": "18b2b26bf67f0970d8d194724691cf688290dae9a4e277f7ef46424371ea4109"
        },
        "downloads": 519,
        "filename": "bank-account-validator-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7c6a27e20265664b8a41cdae690125d4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15538,
        "upload_time": "2016-02-14T19:42:45",
        "url": "https://files.pythonhosted.org/packages/4a/b2/8b328f789efa9c80a91fb39e282705162b1a73e92efcc74ae6136568d4af/bank-account-validator-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7c6a27e20265664b8a41cdae690125d4",
        "sha256": "18b2b26bf67f0970d8d194724691cf688290dae9a4e277f7ef46424371ea4109"
      },
      "downloads": 519,
      "filename": "bank-account-validator-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7c6a27e20265664b8a41cdae690125d4",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 15538,
      "upload_time": "2016-02-14T19:42:45",
      "url": "https://files.pythonhosted.org/packages/4a/b2/8b328f789efa9c80a91fb39e282705162b1a73e92efcc74ae6136568d4af/bank-account-validator-0.1.tar.gz"
    }
  ]
}