{
  "info": {
    "author": "Rupert Bedford",
    "author_email": "rupert.bedford@renalregistry.nhs.uk",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Cornflake\n=========\n\n.. image:: https://img.shields.io/pypi/v/cornflake.svg\n    :target: https://pypi.python.org/pypi/cornflake\n\n.. image:: https://img.shields.io/travis/renalreg/cornflake/master.svg\n    :target: https://travis-ci.org/renalreg/cornflake\n\n.. image:: https://img.shields.io/codeclimate/github/renalreg/cornflake.svg\n    :target: https://codeclimate.com/github/renalreg/cornflake\n\n.. image:: https://img.shields.io/coveralls/renalreg/cornflake.svg\n    :target: https://coveralls.io/github/renalreg/cornflake\n\nCornflake is a serialization library inspired by `Django REST Framework`_.\n\nUsage\n-----\n\nFirst we create a serializer and a class to test it with:\n\n.. code-block:: python\n\n    from cornflake import fields\n    from cornflake import serializers\n    from cornflake.exceptions import ValidationError\n    from cornflake.validators import not_empty, not_in_future\n\n    class PatientSerializer(serializers.Serializer):\n        first_name = fields.StringField(validators=[not_empty()])\n        last_name = fields.StringField(validators=[not_empty()])\n        birth_date = fields.DateField(validators=[not_in_future()])\n        death_date = fields.DateField(required=False)\n\n        def validate_first_name(self, value):\n            if value.upper() == 'TEST':\n                raise ValidationError('No test patients please.')\n\n            return value\n\n        def validate(self, data):\n            if data['death_date'] is not None and data['death_date'] < data['birth_date']:\n                raise ValidationError({'death_date': \"Can't be before birth date.\"})\n\n            return data\n\n        def create(self, validated_data):\n            return Patient(**validated_data)\n\n        def update(self, instance, validated_data):\n            for key, value in validated_data.items():\n                setattr(instance, key, value)\n\n            return instance\n\n    class Patient(object):\n        def __init__(self, first_name, last_name, birth_date, death_date):\n            self.first_name = first_name\n            self.last_name = last_name\n            self.birth_date = birth_date\n            self.death_date = death_date\n\nNow we can create a patient:\n\n.. code-block:: python\n\n    >>> serializer = PatientSerializer(data={'first_name': 'John', 'last_name': 'Smith', 'birth_date': '2001-02-03'})\n    >>> serializer.is_valid()\n    True\n    >>> patient = serializer.save()\n\nUpdate the patient with new data:\n\n.. code-block:: python\n\n    >>> serializer = PatientSerializer(patient, data={'first_name': 'John', 'last_name': 'Smith', 'birth_date': '2001-02-03', 'death_date': '2016-01-01'})\n    >>> serializer.is_valid()\n    True\n    >>> patient = serializer.save()\n\nSerialize the patient to use in an API response:\n\n.. code-block:: python\n\n    >>> serializer = PatientSerializer(patient)\n    >>> serializer.data\n    {'birth_date': '2001-02-03', 'first_name': u'John', 'last_name': u'Smith', 'death_date': '2016-01-01'}\n\nDeserialize, validate and report errors:\n\n.. code-block:: python\n\n    >>> serializer = PatientSerializer(data={'first_name': 'TEST', 'last_name': 'Smith', 'birth_date': '2001-02-03'})\n    >>> serializer.is_valid()\n    False\n    >>> serializer.errors\n    {'first_name': ['No test patients please.']}\n\nTests\n-----\n\nRun tests with the `tox` command:\n\n.. code-block:: bash\n\n    pip install tox\n    tox\n\n.. _`Django REST Framework`: http://www.django-rest-framework.org/\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/renalreg/cornflake",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "cornflake",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/cornflake/",
    "release_url": "https://pypi.org/project/cornflake/0.2.2/",
    "requires_python": null,
    "summary": "A simple library for converting to and from Python objects",
    "version": "0.2.2"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5f949cd77738b31c451f19d8dd3eeb48",
          "sha256": "2ef204796211bd04269d365cf9f59ec5ccbdbb0f5bf0cb0a9a0cf8ff1393d945"
        },
        "downloads": 500,
        "filename": "cornflake-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5f949cd77738b31c451f19d8dd3eeb48",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19226,
        "upload_time": "2016-05-11T18:29:53",
        "url": "https://files.pythonhosted.org/packages/b0/1c/e557b5ddc186a3648ad92335eb5c8c0833ffe8063a87dda170a637930867/cornflake-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9aa7af2f0cf84f1b6f30ed3dc3b4b2f4",
          "sha256": "f2253f93b755026783022f4da4143667e2ef5cc55b1ba90f6658bc465e00f1dd"
        },
        "downloads": 139,
        "filename": "cornflake-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9aa7af2f0cf84f1b6f30ed3dc3b4b2f4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18807,
        "upload_time": "2016-05-20T16:21:09",
        "url": "https://files.pythonhosted.org/packages/e4/43/4681d3e1d669d40b286536a3e4e2f0b1eb026fc89bcba3df5d6cfabd785f/cornflake-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3e4666368de6518b0e585d2f8f8dda24",
          "sha256": "12c1ed95883b69cf840e0cd06ed80910b1006f16dd7433646b32785b6cd2fe41"
        },
        "downloads": 222,
        "filename": "cornflake-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "3e4666368de6518b0e585d2f8f8dda24",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18915,
        "upload_time": "2016-05-26T11:24:04",
        "url": "https://files.pythonhosted.org/packages/53/a6/bb5cd8b32716515b66f106ba64a82a72c39f023e1669a557807bf2bf45ce/cornflake-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dd9fc6eef482d82dfe03283a78515fb8",
          "sha256": "fc3c54409c8d700a167ae9ce2b2613ac9786f1d0b80cbe658950661bd94a6400"
        },
        "downloads": 317,
        "filename": "cornflake-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "dd9fc6eef482d82dfe03283a78515fb8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18961,
        "upload_time": "2016-08-23T09:01:45",
        "url": "https://files.pythonhosted.org/packages/26/47/07b06cdeef0afc9d87b7e66704d72bb2c2503e6b80b11a3b832cd0c42216/cornflake-0.2.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "dd9fc6eef482d82dfe03283a78515fb8",
        "sha256": "fc3c54409c8d700a167ae9ce2b2613ac9786f1d0b80cbe658950661bd94a6400"
      },
      "downloads": 317,
      "filename": "cornflake-0.2.2.tar.gz",
      "has_sig": false,
      "md5_digest": "dd9fc6eef482d82dfe03283a78515fb8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 18961,
      "upload_time": "2016-08-23T09:01:45",
      "url": "https://files.pythonhosted.org/packages/26/47/07b06cdeef0afc9d87b7e66704d72bb2c2503e6b80b11a3b832cd0c42216/cornflake-0.2.2.tar.gz"
    }
  ]
}