{
  "info": {
    "author": "Simon S\u00f8rensen",
    "author_email": "teamangryghast@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# pymitv\nA Python based control of the Mi Tv 3\n\n## Using the Python package\nThe package includes two modules: `Discover` and `Control`. Each have their role, as implied by their names.\n\n### Discovering TVs\n#### `Discover.scan()`\nThis method is used to scan the local network for TVs.\n\n**Arguments**\n| Name | Required | Default value | Purpose |\n| --- | --- | --- | --- |\n| `stop_on_first` | No | `True` | Whether or not the method should continue scanning for TVs after finding its first one. Only needed for people with multiple Xiaomi TVs. |\n| `base_ip` | No | `0` | Instead of looking for the base IP, you can give it to the function in the format of `192.168.0.` |\n| `speedy_gonzalez` | No | `False` | Speeds up the scan drastically at the risk of missing a TV. |\n\n**Example usage**\n```python\nimport Discover from pymitv\n\ndiscover = Discover.scan(speedy_gonzalez=True)\nprint(discover)\n```\n\n#### `Discover.checkIp()`\nUsed by `Discover.scan()` to check if a TV is present at the IP.\n\n**Arguments**\n\n| Name              | Required | Default value | Purpose                                                     |\n|-------------------|----------|---------------|-------------------------------------------------------------|\n| `ip`              | Yes      | None          | The IP to check.                                            |\n| `fast`            | No       | `False`       | Speeds up the scan drastically at the risk of missing a TV. |\n\n**Example usage**\n\n```python\nimport Discover from pymitv\n\nprint(Discover().checkIp('192.168.0.45'))\n```\n\n___\n\n### Controlling TVs\nThis is where the `Control` class comes in handy. The class has a bunch of predefined keystrokes:\n- `turn_on`\n- `turn_off`\n- `sleep`\n- `wake`\n- `up`\n- `down`\n- `right`\n- `left`\n- `home`\n- `enter`\n- `back`\n- `menu`\n- `volume_up`\n- `volume_down`\n\n#### `Control.sendKeystrokes(ip, keystrokes)`\n\nSends a set of keystrokes to a TV at `ip`\n\n**Arguments**\n| Name              | Required | Default value | Purpose                                                     |\n|-------------------|----------|---------------|-------------------------------------------------------------|\n| `ip`              | Yes      | None          | The IP of the TV to send keystroke(s) to.                   |\n| `keystrokes`      | Yes      | None          | Keystroke(s) to send. E.g. `Control.sleep`                  |\n\n**Using the `wait` keystroke**\n\nUsing this keyword in a sequence of keystrokes will make the method sleep for 0.4 seconds which is the effective time it takes for the TV to listen to new keystrokes.\n\n**Example usage**\n```python\nimport Control from pymitv\n\nControl().sendKeystrokes(Control.sleep)\n```\n\n\n## Accessing the local API exposed by the TV\nThis can be useful if you don't wish to use the Python package (this one), but you'd rather implement your own version. Below you'll find everything you need.\n\n#### Finding the TV IP\nTo find the IP of your TV you need to scan your network for clients. You can use an application like [*Advanced IP Scanner*](http://www.advanced-ip-scanner.com/) for Windows and [*LanScan*](https://itunes.apple.com/us/app/lanscan/id472226235?mt=12) for MacOS. Both these applications resolves the MAC address to give you the name of the manufacturer. However, if you have multiple Xiaomi products it can still prove difficult to find the right one. **Fear not!** The MAC address should start with `00:9E:C8`.\n\n#### Check TV status\nTo check if the TV is on, use the following request:\n`http://TV_IP:6095/request?action=isalive`\n\nThe above will return something along the lines of:\n```json\n{\n\t\"status\": 0,\n\t\"msg\": \"success\",\n\t\"data\": {\n\t\t\"devicename\": \"\u5ba2\u5385\u7684\u5c0f\u7c73\u7535\u89c6\",\n\t\t\"ip\": \"TV_IP:6095\",\n\t\t\"feature\": [\"power\"],\n\t\t\"url\": [\"http:\\/\\/bilibili.kankanews.com\\/video\\/av\\\\d+\\/\", \"http:\\/\\/www.bilibili.tv\\/video\\/av\\\\d+\\/\"],\n\t\t\"platform\": 606,\n\t\t\"build\": 1381,\n\t\t\"version\": 16777500\n\t}\n}\n```\n\n**BEWARE! If the TV is in standby mode, this request will still return as if it were on. Currently there is no way to check if TV is actually on.**\n\n#### Send keystroke\nTo send a keystroke use the following request:\n`http://TV_IP:6095/controller?action=keyevent&keycode=KEYCODE`\n\nInstead of `KEYCODE`, you should write an actual keycode. These are the available ones:\n| Key/button | keycode | action |\n| --- | --- | --- |\n| On/off toggle | `power` | Turns the TV on or off |\n| Up | `up` | Goes up |\n| Down | `down` | Goes down |\n| Left | `left` | Goes left |\n| Right | `right` | Goes right |\n| Enter | `enter` | Affirms selection |\n| Home | `home` | Returns to home screen |\n| Back | `back` | Goes one step back |\n| Menu | `menu` | Opens options menu |\n| Volume up | `volumeup` | Increases volume by 1 |\n| Volume down | `volumedown` | Decreases volume by 1 |\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/fattdev/pymitv",
    "keywords": "xiaomi remote tv",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymitv",
    "platform": "",
    "project_url": "https://pypi.org/project/pymitv/",
    "release_url": "https://pypi.org/project/pymitv/1.0.0a2/",
    "requires_dist": [
      "requests"
    ],
    "requires_python": "",
    "summary": "A Python 3 based Xiaomi TV remote",
    "version": "1.0.0a2"
  },
  "releases": {
    "1.0.0a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "677cc8b8d1222185b9824b4bfee1deb3",
          "sha256": "c53e09c1538185352b6bf5f94c5ab0129986082ca089ec403ba0e217714a214d"
        },
        "downloads": -1,
        "filename": "pymitv-1.0.0a1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "677cc8b8d1222185b9824b4bfee1deb3",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 7675,
        "upload_time": "2018-02-11T15:06:12",
        "url": "https://files.pythonhosted.org/packages/01/8f/a4d32cacb84fbd5d09b5458d922ee0d0ee5461bd2647defa0fb34444959e/pymitv-1.0.0a1-py3-none-any.whl"
      }
    ],
    "1.0.0a2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4af12a1d89cc9dc93216ae85a2499cf4",
          "sha256": "48b7fe26a61663c5d18f8189da1fe8fda26367a871fd09b467c7c299ae93a067"
        },
        "downloads": -1,
        "filename": "pymitv-1.0.0a2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4af12a1d89cc9dc93216ae85a2499cf4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 7677,
        "upload_time": "2018-02-11T15:19:14",
        "url": "https://files.pythonhosted.org/packages/1b/90/f8b7101d492e1f7c8c911a952fcc9ae80cb9425f7f750e3d4a3b3e163c97/pymitv-1.0.0a2-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4af12a1d89cc9dc93216ae85a2499cf4",
        "sha256": "48b7fe26a61663c5d18f8189da1fe8fda26367a871fd09b467c7c299ae93a067"
      },
      "downloads": -1,
      "filename": "pymitv-1.0.0a2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "4af12a1d89cc9dc93216ae85a2499cf4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 7677,
      "upload_time": "2018-02-11T15:19:14",
      "url": "https://files.pythonhosted.org/packages/1b/90/f8b7101d492e1f7c8c911a952fcc9ae80cb9425f7f750e3d4a3b3e163c97/pymitv-1.0.0a2-py3-none-any.whl"
    }
  ]
}