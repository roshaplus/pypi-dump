{
  "info": {
    "author": "Jeff Hubbard",
    "author_email": "j3ffhubb@users.noreply.github.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "## PyMarshal\n\npymarshal replicates the feature of (un)marshalling structs to/from\nJSON in Golang.  Rather than attempting to replicate the exact\nfeature as it exists in Go, pymarshal aims for elegant,\nPythonic simplicity, and to fix the flaws in Go's implementation\nsuch as:\n  - extra keys being silently ignored\n  - lack of mandatory fields\n  - lack of default values\n\nThe only modification required to your class code is to use the `type_assert`\nfunctions to assign `__init__` arguments to self variables of the same\nname.  pymarshal provides the `type_assert` function to both enforce the type,\nand to unmarshal nested objects.  Your `__init__` methods should only use\nsimple assignment through the `type_assert` functions.  If you have a\nuse-case for a constructor that does more than simple assignment, use a\nseparate 'factory' function.\n\nThere is also:\n  - `type_assert_iter` for iterables\n  - `type_assert_dict` for anything that implements .items() -> k, v\n\nRather than using the Golang \"tag\" syntax, simply create a\n`_marshal_key_swap` and `_unmarshal_key_swap` dict in your class,\nand any re-named keys will be swapped before being passed to the\nclass constructor or before being marshalled to JSON.  The full list\nof control variables are documented in `ClassB` below.\n\n## Example\n\n```python\nfrom pymarshal import *\n\nclass ClassA:\n    def __init__(self, a, b, b2=None):\n        self.a = type_assert(a, int)\n        # If 'b' is an instance of ClassB, it will simply pass through\n        # If 'b' is a dictionary, it will be unmarshalled into a new\n        #     ClassB instance using ClassB(**b)\n        # If neither, it will raise TypeError\n        self.b = type_assert(b, ClassB)\n        # Use allow_none=True to allow this value to be None instead of\n        # an instance of ClassB\n        self.b2 = type_assert(b2, ClassB, allow_none=True)\n\nclass ClassB:\n    # Optional: Replaces keys in the JSON object before\n    # passing to __init__()\n    # Useful for JSON keys that are not valid Python variable names\n    _unmarshal_key_swap = {\n        \"C\": \"c\",\n    }\n    # Optional: Controls mapping the keys back to JSON.\n    # If unmarshalling doesn't map multiple keys to the same value,\n    # you can simply use:\n    # {v: k for k, v in _unmarshal_key_swap.items()}\n    _marshal_key_swap = {\n        \"c\": \"C\",\n    }\n    # Optional: Ignores these members when marshalling to JSON\n    _marshal_exclude = [\n        'z',\n    ]\n    # Optional: Instead of using '_marshal_exclude', you can explicitly\n    # exclude all keys that are not part of __init__().\n    # Note:\n    #     - This will cause _marshal_exclude to be ignored\n    #     - The __init__ args must match the class member names\n\n    # _marshal_only_init_args = True\n\n    # Optional: Set to False to forbid extra keys from being present in\n    # the JSON object to unmarshal from.  Defaults to True if not present.\n    # This overrides allow_extra_keys=True in unmarshal_json, and is\n    # the only way to control extra keys from within nested objects\n\n    # _unmarshal_allow_extra_keys = False\n\n    # Optional: Exclude any key whose value is None when marshalling\n    # The __init__ args this may affect should have a default value of None\n    # and type_assert(..., allow_none=True) in the assignment\n\n    # _marshal_exclude_none = True\n\n    # Optional: Exclude specific keys if their value is None when marshalling\n    # The corresponding __init__ args should have a default value of None\n    # and type_assert(..., allow_none=True) in the assignment\n    # There is no need to set this if _marshal_exclude_none == True\n\n    # _marshal_exclude_none_keys = ['key1', 'key2']\n\n    def __init__(self, c):\n        self.c = type_assert(c, float)\n        # this will be ignored when marshalling because\n        # of _marshal_exclude\n        self.z = None\n\n>>> j = {\"a\": 6, \"b\": {\"C\": 4.2}}\n>>> # pass allow_extra_keys=False to raise an exception when j has\n>>> # extra keys not present in ClassA.__init__() arguments\n>>> obj1 = unmarshal_json(j, ClassA)\n>>> obj1.a\n6\n>>> obj1.b.c\n4.2\n>>> obj2 = ClassA(12, ClassB(1.5))\n>>> marshal_json(obj2)\n{\"a\": 12, \"b\": {\"C\": 1.5}, \"b2\": None}\n```\n",
    "docs_url": null,
    "download_url": "https://github.com/j3ffhubb/pymarshal/archive/1.1.2.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/j3ffhubb/pymarshal",
    "keywords": "go",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pymarshal",
    "platform": "",
    "project_url": "https://pypi.org/project/pymarshal/",
    "release_url": "https://pypi.org/project/pymarshal/1.1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Pythonic implementation of Golang's (un)marshalling of JSON",
    "version": "1.1.2"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "632612e4ff8127b89e30f5c5c1e124d1",
          "sha256": "28bae615e5e6ea5fa15d8452b643c49770a5166bd952881950f2e656f4f33204"
        },
        "downloads": -1,
        "filename": "pymarshal-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "632612e4ff8127b89e30f5c5c1e124d1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4620,
        "upload_time": "2017-10-14T22:00:44",
        "url": "https://files.pythonhosted.org/packages/19/79/6b3f4fcfb801059c5435491dca7425f1101eae4f94d6399e703ef0d6fa65/pymarshal-1.0.0.tar.gz"
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "85497ccc6d1ba45e2545a81fde00b85b",
          "sha256": "5a8aac699cbe648ce33fa290bff5335202a22ad17dda3c61c97400f6b30cbb8c"
        },
        "downloads": -1,
        "filename": "pymarshal-1.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "85497ccc6d1ba45e2545a81fde00b85b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4643,
        "upload_time": "2017-10-15T01:35:08",
        "url": "https://files.pythonhosted.org/packages/44/61/2341c5f8db3f10256604fb2bf0f59b378cc36f468704ea5a3162dfeebdee/pymarshal-1.0.9.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a7159f40d69236d0e04e23c8d6e4176c",
          "sha256": "dbde31ca715594597c02f309920d7601a134db0b53086d888850c699bbfdfc28"
        },
        "downloads": -1,
        "filename": "pymarshal-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a7159f40d69236d0e04e23c8d6e4176c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4981,
        "upload_time": "2017-10-18T06:37:22",
        "url": "https://files.pythonhosted.org/packages/98/ed/441a4c952bc5196b72622347db62d64c768358a3155c3ea9b979a9ea79a4/pymarshal-1.1.0.tar.gz"
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c1df49b66481299e9d9b768e865c7667",
          "sha256": "1c89931613bd9576f9b2c6558c17597fef261d0c562ca6dfefc57a14a39b7a73"
        },
        "downloads": -1,
        "filename": "pymarshal-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c1df49b66481299e9d9b768e865c7667",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5422,
        "upload_time": "2017-10-18T06:47:25",
        "url": "https://files.pythonhosted.org/packages/4d/d0/04e776a0fc681b506f97305d90493250a2cc116a30ae4f737b559937ea51/pymarshal-1.1.1.tar.gz"
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "138def4a16bd93b183dab704f560c20c",
          "sha256": "e88f9904cfa37e86b649ef5cd661db2e116e2b0141ed7b1cdb1391d1bb189b18"
        },
        "downloads": -1,
        "filename": "pymarshal-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "138def4a16bd93b183dab704f560c20c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5942,
        "upload_time": "2017-10-20T06:23:31",
        "url": "https://files.pythonhosted.org/packages/fa/32/53b07c87f3c24f4fae850826a96521b5bc8ddf0e51e16882b9bc725d704b/pymarshal-1.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "138def4a16bd93b183dab704f560c20c",
        "sha256": "e88f9904cfa37e86b649ef5cd661db2e116e2b0141ed7b1cdb1391d1bb189b18"
      },
      "downloads": -1,
      "filename": "pymarshal-1.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "138def4a16bd93b183dab704f560c20c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5942,
      "upload_time": "2017-10-20T06:23:31",
      "url": "https://files.pythonhosted.org/packages/fa/32/53b07c87f3c24f4fae850826a96521b5bc8ddf0e51e16882b9bc725d704b/pymarshal-1.1.2.tar.gz"
    }
  ]
}