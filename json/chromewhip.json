{
  "info": {
    "author": "Charlie Smith",
    "author_email": "charlie@chuckus.nz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "Chromewhip - Google Chrome\u2122 as a web service\n============================================\n\n|Build Status| |Docker Hub Status| |PyPi version|\n\nChrome browser as an HTTP service with an splash compatible HTTP API\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nChromewhip is an easily deployable service that runs headless Chrome process wrapped with an HTTP\nAPI. Inspired by the ```splash`` <https://github.com/scrapinghub/splash>`__ project, we aim to\nprovide a drop-in replacement for the ``splash`` service by adhering to their documented API.\n\nIt is currently in early **alpha** and still being heavily developed. Please use the issue tracker\nto track the progress towards **beta**. For now, the required milestone can be summarised as\n**implementing the entire Splash API**.\n\nPython 3.6 asyncio driver for Chrome devtools protocol\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nChromewhip communicates with the Chrome process with our own asyncio driver.\n\n-  Typed Python bindings for devtools protocol through templated generation - get autocomplete with\n   your code editor.\n-  Can bind events to concurrent commands, which is required for providing a robust HTTP service.\n\nSome example code on how to use it:\n\n.. code:: python\n\n    import asyncio\n    import logging\n\n    from chromewhip import Chrome\n    from chromewhip.protocol import page, dom\n\n    # see logging from chromewhip\n    logging.basicConfig(level=logging.DEBUG)\n\n    HOST = '127.0.0.1'\n    PORT = 9222\n\n    loop = asyncio.get_event_loop()\n    c = Chrome(host=HOST, port=PORT)\n\n    loop.run_until_complete(c.connect())\n\n    tab = c.tabs[0]\n\n    loop.run_until_complete(tab.enable_page_events())\n\n    cmd = page.Page.navigate(url='http://nzherald.co.nz')\n\n    # send_command will return once the frameStoppedLoading event is received THAT matches\n    # the frameId that it is in the returned command payload.\n    await_on_event_type = page.FrameStoppedLoadingEvent\n    input_event_type = page.FrameNavigatedEvent\n\n    # bug with devtools protocol means the returned command payload for `navigate`\n    # has the incorrect frameId on first run but the low level api is flexible enough \n    # to deal with this\n    result = loop.run_until_complete(tab.send_command(cmd, input_event_type, await_on_event_type))\n\n    # send_command always returns a dict with keys `ack` and `event`\n    # `ack` contains the payload on response of a command\n    # `event` contains the payload of the awaited event if `await_on_event_type` is provided\n    ack = result['ack']['result']\n    event = result['event']\n    assert ack['frameId'] == event.frameId\n\n    cmd = page.Page.setDeviceMetricsOverride(width=800,\n                                             height=600,\n                                             deviceScaleFactor=0.0,\n                                             mobile=False,\n                                             fitWindow=False)\n\n    loop.run_until_complete(tab.send_command(cmd))\n\n    result = loop.run_until_complete(tab.send_command(dom.DOM.getDocument()))\n\n    dom_obj = result['ack']['result']['root']\n\n    # Python types are determined by the `types` fields in the JSON reference for the\n    # devtools protocol, and `send_command` will convert if possible.\n    assert isinstance(dom_obj, dom.Node)\n\n    print(dom_obj.nodeId)\n    print(dom_obj.nodeName)\n\nRunning\n-------\n\nDeploying with Docker\n~~~~~~~~~~~~~~~~~~~~~\n\n::\n\n    docker run --init -it --rm --shm-size=1024m -p=127.0.0.1:8080:8080 --cap-add=SYS_ADMIN \\\n      chuckus/chromewhip\n\nRequirements for MacOS 10.12+\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  Google Chrome Canary\n\nImplemented HTTP API\n--------------------\n\n/render.html\n~~~~~~~~~~~~\n\nQuery params:\n\n-  url : string : required\n-  The url to render (required)\n\n-  js : string : optional Javascript profile name.\n\n-  js\\_source : string : optional\n-  JavaScript code to be executed in page context\n\n-  viewport : string : optional\n-  View width and height (in pixels) of the browser viewport to render the web page. Format is \"x\",\n   e.g. 800x600. Default value is 1024x768.\n\n   'viewport' parameter is more important for PNG and JPEG rendering; it is supported for all\n   rendering endpoints because javascript code execution can depend on viewport size.\n\n/render.png\n~~~~~~~~~~~\n\nQuery params (including render.html):\n\n-  render\\_all : int : optional\n-  Possible values are ``1`` and ``0``. When ``render_all=1``, extend the viewport to include the\n   whole webpage (possibly very tall) before rendering.\n\nWhy not just use Selenium?\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n-  chromewhip uses the devtools protocol instead of the json wire protocol, where the devtools\n   protocol has greater flexibility, especially when it comes to subscribing to granular events from\n   the browser.\n\nBug reports and requests\n------------------------\n\nPlease simply file one using the Github tracker\n\nContributing\n------------\n\nPlease :)\n\nImplementation\n--------------\n\nDeveloped to run on Python 3.6, it leverages both ``aiohttp`` and ``asyncio`` for the implementation\nof the asynchronous HTTP server that wraps ``chrome``.\n\n.. |Build Status| image:: https://travis-ci.org/chuckus/chromewhip.svg?branch=master\n   :target: https://travis-ci.org/chuckus/chromewhip\n.. |Docker Hub Status| image:: https://img.shields.io/docker/build/chuckus/chromewhip.svg\n   :target: https://img.shields.io/docker/build/chuckus/chromewhip.svg\n.. |PyPi version| image:: https://img.shields.io/pypi/v/chromewhip.svg\n   :target: https://img.shields.io/pypi/v/chromewhip.svg\n",
    "docs_url": null,
    "download_url": "https://github.com/chuckus/chromewhip/archive/v0.2.1-alpha.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/chuckus/chromewhip",
    "keywords": "scraping chrome scraper browser automation",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chromewhip",
    "platform": "",
    "project_url": "https://pypi.org/project/chromewhip/",
    "release_url": "https://pypi.org/project/chromewhip/0.2.1a0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "asyncio driver + HTTP server for Chrome devtools protocol",
    "version": "0.2.1a0"
  },
  "releases": {
    "0.1.0a0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7c5f83a4057261da36f89ae4edb90e55",
          "sha256": "14d00074e9ecfe3dd2c57b932c4139e2ea0a7450900c48c2919e4ca52c032d7f"
        },
        "downloads": 0,
        "filename": "chromewhip-0.1.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "7c5f83a4057261da36f89ae4edb90e55",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 68222,
        "upload_time": "2017-07-21T04:31:58",
        "url": "https://files.pythonhosted.org/packages/f7/30/5b2f49f8cd4db03c4b9f95279fcdd4443c5fea7f60f45ae06abdd1ccc2e0/chromewhip-0.1.0a0.tar.gz"
      }
    ],
    "0.2.0a0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "982e80ab3219df9504b017287f6d0fd8",
          "sha256": "0b3e8761c71aa6cea546c24e8259cfa813c70d199e3ec7baf74ced7b076edb46"
        },
        "downloads": 0,
        "filename": "chromewhip-0.2.0a0.tar.gz",
        "has_sig": false,
        "md5_digest": "982e80ab3219df9504b017287f6d0fd8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 70584,
        "upload_time": "2017-07-24T01:35:57",
        "url": "https://files.pythonhosted.org/packages/0a/03/7f9c638416cdb48d65960e31d506fe24e6386479ed1d67b807b7307f0b4d/chromewhip-0.2.0a0.tar.gz"
      }
    ],
    "0.2.1a0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a4b38b382c290e06b1104eb9b4cd4ac5",
          "sha256": "8b08403731ea99c50bb9fcd22baff5f136025919da52ddae9dd3060d2c96f60d"
        },
        "downloads": 0,
        "filename": "chromewhip-0.2.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "a4b38b382c290e06b1104eb9b4cd4ac5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 71127,
        "upload_time": "2017-08-10T11:38:34",
        "url": "https://files.pythonhosted.org/packages/14/31/beb7f3424686ee6def1dbc69efa6bdc00dd2c3e239d1029891c6d1b853be/chromewhip-0.2.1a0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a4b38b382c290e06b1104eb9b4cd4ac5",
        "sha256": "8b08403731ea99c50bb9fcd22baff5f136025919da52ddae9dd3060d2c96f60d"
      },
      "downloads": 0,
      "filename": "chromewhip-0.2.1a0.tar.gz",
      "has_sig": false,
      "md5_digest": "a4b38b382c290e06b1104eb9b4cd4ac5",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 71127,
      "upload_time": "2017-08-10T11:38:34",
      "url": "https://files.pythonhosted.org/packages/14/31/beb7f3424686ee6def1dbc69efa6bdc00dd2c3e239d1029891c6d1b853be/chromewhip-0.2.1a0.tar.gz"
    }
  ]
}