{
  "info": {
    "author": "pyfancy",
    "author_email": "arodebaugh@icloud.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "[![Build Status](https://travis-ci.org/ilovecode1/Pyfancy-2.svg?branch=master)](https://travis-ci.org/ilovecode1/Pyfancy-2)\n[![FOSSA Status Shield Badge](https://app.fossa.io/api/projects/git%2Bgithub.com%2Filovecode1%2FPyfancy-2.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Filovecode1%2FPyfancy-2?ref=badge_shield)\n\n### Download\nGo to the [releases page](https://github.com/ilovecode1/Pyfancy-2/releases) and download the latest (or previous) version.\n\nOr use pip `pip install git+https://github.com/ilovecode1/Pyfancy-2/`\n\n### Overview\npyfancy is a simple Python library that provides a mechanism for easily styling text in some terminal environments. Text is styled by chaining together methods that add escape codes for color modifiers to the text.\n\n### Usage\nFormatting using pyfancy all follows the same basic pattern. First, there is the initializer, which just sets up the pyfancy object. Next is a chain of function calls that provide text formatting. Finally, there is a last method chained on which either returns the text string with format escape codes, or which directly outputs the text using the print statement / method. (The output method *should* be compatible with Python 2 and 3.)\n\nThis chain of code looks basically like this:\n```python\npyfancy().[chained statements].output() # To print using print statement / method\npyfancy().[chained statements].get()    # To get formatted text string\n```\n\nThere are two different ways to use the chained statements. The first is to provide the text that is to be chained as part of the statement call. For example, the following prints \"Hello, world!\" in red:\n```python\npyfancy().red(\"Hello, world!\").output()\n```\nHowever, chained statements are really just modifiers with an optional text argument. The following example works identically to the previous example:\n```python\npyfancy().red().add(\"Hello, world!\").output()\n```\nUsing chained statements, then, allows for modifiers to be stacked:\n```python\npyfancy().red().bold().add(\"Hello, world!\").output()\n\n# or\n\npyfancy().red().bold(\"Hello, world!\").output()\n\n# The red() and bold() calls can also be in the opposite order.\n```\nOf course, there can only be, for example, one color active at a time. This allows for the creation of multicolored statements:\n```python\npyfancy().red(\"Hello\").magenta(\", \").blue(\"world!\").output()\n```\nIt is also possible to reset all styles, either to get default styling, or to ensure that styles are reset, using the `raw` modifier:\n```python\npyfancy().raw(\"You walk into a \").red().bold(\"DANGEROUS\").raw(\" room.\").output()\n```\n\nParsing is a simple, shorter and faster way to use Pyfancy 2. Instead of:\n```python\npyfancy().red(\"Hello\").blue(\" world!\").output()\n```\n\nYou can do this:\n```python\npyfancy(\"{red Hello {blue world!}}\").output()\n```\n\nFor parsing you can also import from a text file:\n```python\npyfancy().open(\"import.txt\").output()\n```\n\nIn order to use pyfancy, import the module with `from pyfancy import *`.\n\n### Types of effects\n\n| Text Effect | Background      |               |\n|:-----------:|:---------------:|---------------|\n|             |                 |               |\n| bold        | n/a             |               |\n| dim         | n/a             | Light/Dark    |\n| underlined  | n/a             | n/a           |\n| blinking    | n/a             | n/a           |\n| black       | black_bg        | n/a           |\n| red         | red_bg          | dark_red      |\n| green       | green_bg        | dark_green    |\n| yellow      | yellow_bg       | dark_yellow   |\n| blue        | blue_bg         | dark_blue     |\n| magenta     | n/a             | dark_magenta  |\n| cyan        | n/a             | dark_cyan     |\n| n/a         | gray_bg         | light_gray    |\n| white       | n/a             | n/a           |\n| rainbow     | n/a             | n/a           |\n| multi       | n/a             | n/a           |\n| n/a         | dark_gray_bg    | dark_gray     |\n| n/a         | light_red_bg    | light_red     |\n| n/a         | light_green_bg  | light_green   |\n| n/a         | light_yellow_bg | light_yellow  |\n| n/a         | light_blue_bg   | light_blue    |\n| n/a         | light_purple_bg | light_purple  |\n| n/a         | light_cyan_bg   | light_cyan    |\n| n/a         | white_bg        | white         |\n\n\n### License\nPyfancy-2 is under the MIT license.\n\n\n[![FOSSA Status Large Badge](https://app.fossa.io/api/projects/git%2Bgithub.com%2Filovecode1%2FPyfancy-2.svg?type=large)](https://app.fossa.io/projects/git%2Bgithub.com%2Filovecode1%2FPyfancy-2?ref=badge_large)\n\n### Contributors\n\nProject by [@CosmicWebServices](https://github.com/CosmicWebServices)\n\n[@TheMonsterFromTheDeep](https://github.com/TheMonsterFromTheDeep)\n\n[@joker314](https://github.com/joker314)\n\n[@baranskistad](https://github.com/baranskistad)\n\n[@jonathan50](https://github.com/Jonathan50)\n\n[@rogersouza](https://github.com/rogersouza)\n\n[@vutondesign](https://github.com/vutondesign)\n\n[@cruxicheiros](https://github.com/cruxicheiros)\n\n[@hiccup01](https://github.com/hiccup01)",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ilovecode1/Pyfancy-2",
    "keywords": "pyfancy ansi color colour terminal",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pyfancy",
    "platform": "",
    "project_url": "https://pypi.org/project/pyfancy/",
    "release_url": "https://pypi.org/project/pyfancy/2.4.4/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Simple terminal formatting in Python",
    "version": "2.4.4"
  },
  "releases": {
    "2.4.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e165add647226151afd79814bbd11a15",
          "sha256": "21bf12686680ce7e49f95a9222275a139a6dd5f569ce8caa4c05ce403df773e1"
        },
        "downloads": -1,
        "filename": "pyfancy-2.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e165add647226151afd79814bbd11a15",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3510,
        "upload_time": "2018-02-04T19:22:57",
        "url": "https://files.pythonhosted.org/packages/6b/9d/7d081290c825517b7b5ad3cb42db2353a05582c2e7ecadb2695601eb2eb7/pyfancy-2.4.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e165add647226151afd79814bbd11a15",
        "sha256": "21bf12686680ce7e49f95a9222275a139a6dd5f569ce8caa4c05ce403df773e1"
      },
      "downloads": -1,
      "filename": "pyfancy-2.4.4.tar.gz",
      "has_sig": false,
      "md5_digest": "e165add647226151afd79814bbd11a15",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3510,
      "upload_time": "2018-02-04T19:22:57",
      "url": "https://files.pythonhosted.org/packages/6b/9d/7d081290c825517b7b5ad3cb42db2353a05582c2e7ecadb2695601eb2eb7/pyfancy-2.4.4.tar.gz"
    }
  ]
}