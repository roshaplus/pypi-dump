{
  "info": {
    "author": "Philipp Metzner",
    "author_email": "beth.aleph@yahoo.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Other Audience",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Operating System :: Unix",
      "Programming Language :: Python :: 3.5",
      "Topic :: Database",
      "Topic :: Office/Business :: Financial",
      "Topic :: Utilities"
    ],
    "description": "|Build Status| |Coverage Status|\n\nFINANCEAGER\n===========\n\nA command line application (possibly interacting with a Flask\nwebservice) that helps you administering your daily expenses and\nearnings.\n\nThe ``financeager`` backend holds a database containing 'periods'. A\nperiod consists of entries of a certain year.\n\nWho is this for?\n----------------\n\nYou might be someone who wants to organize finances with a simple\nsoftware because you're tired of Excel and the like. And you like the\ncommand line. And Python.\n\nNOTE\n----\n\nYou're currently on the ``master`` branch which is under active\ndevelopment.\n\nGENERAL USAGE\n-------------\n\nInstallation\n------------\n\nFrom PyPI package\n~~~~~~~~~~~~~~~~~\n\n::\n\n    pip install financeager\n\nFrom source\n~~~~~~~~~~~\n\nCreate a virtual environment\n\n::\n\n    mkvirtualenv --python=$(which python3) financeager\n\nClone the repo\n\n::\n\n    git clone https://github.com/pylipp/financeager\n\nInstall\n\n::\n\n    cd financeager\n    make install\n\nAlternatively, you can omit the first step and install ``financeager``\nto ``~/.local`` with (requires ``pip3``)\n\n::\n\n    pip3 install -r requirements.txt . --user\n\nTesting\n-------\n\nYou're invited to run the tests from the root directory:\n\n::\n\n    git clone https://github.com/pylipp/financeager\n    cd financeager\n    make test\n\nClient-server or serverless mode?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can run ``financeager`` as a client-server or a serverless\napplication (default). This can be controlled by the configuration file\nat ``~/.config/financeager/config``.\n\nIn either mode, you can configure frontend options, that is the name of\nthe default category (assigned when omitting the category option when\ne.g. adding an entry) and the date format (string that\n``datetime.strptime`` understands; note the double percent).\n\nDefault config:\n\n::\n\n    [FRONTEND]\n    default_category = unspecified\n    date_format = %%m-%%d\n\nTo run ``financeager`` as client-server application, specify a the\nserver-sided configuration like this\n\n::\n\n    [SERVICE]\n    name = flask\n\n    [SERVICE:FLASK]\n    host = 0.0.0.0\n\nYou can launch the server via ``financeager start`` or by wrapping the\n``app = fflask.create_app()`` in a WSGI.\n\nOn the client side, you want to put something along the lines of\n\n::\n\n    [SERVICE]\n    name = flask\n\n    [SERVICE:FLASK]\n    host = foo.pythonanywhere.com\n    timeout = 10\n    username = foouser\n    password = S3cr3t\n\nThis specifies the timeout for HTTP requests and username/password for\nbasic auth, if required by the server.\n\nCommand line usage\n~~~~~~~~~~~~~~~~~~\n\n::\n\n    usage: financeager [-h] {add,get,rm,update,copy,print,list} ...\n\n    optional arguments:\n      -h, --help            show this help message and exit\n\n    subcommands:\n      {add,start,get,rm,update,copy,print,list}\n                            list of available subcommands\n        add                 add an entry to the database\n        get                 show information about single entry\n        rm                  remove an entry from the database\n        update              update one or more fields of an database entry\n        copy                copy an entry from one period to another\n        print               show the period database\n        list                list all databases\n\nOn the client side, ``financeager`` provides the following commands to\ninteract with the database: ``add``, ``update``, ``rm``, ``get``,\n``print``, ``list``, ``copy``.\n\n*Add* earnings (no/positive sign) and expenses (negative sign) to the\ndatabase:\n\n::\n\n    > financeager add burgers -19.99 --category Restaurants\n    > financeager add lottery 123.45 --date 03-14\n\nCategory and date can be optionally specified. They default to None and\nthe current day's date, resp. ``financeager`` will try to derive the\nentry category from the database if not specified. If several matches\nare found, the default category is used.\n\n*Add recurrent* entries using the ``-t recurrent`` flag (``t`` for table\nname) and specify the frequency (yearly, half-yearly, quarterly,\nbi-monthly, monthly, weekly, daily) with the ``-f`` flag and optionally\nstart and end date with the ``-s`` and ``-e`` flags, resp.\n\n::\n\n    > financeager add rent -500 -t recurrent -f monthly -s 01-01 -c rent\n\nIf not specified, the start date defaults to the current date and the\nend date to the last day of the database's year.\n\nDid you make a mistake when adding a new entry? *Update* one or more\nfields by calling the 'update' command with the entry's ID and the\nrespective corrected fields:\n\n::\n\n    > financeager update 1 --name \"McKing Burgers\" --value -18.59\n\n*Remove* an entry by specifying its ID (visible in the output of the\n``print`` command). This removes the ``burgers`` entry:\n\n::\n\n    > financeager rm 1\n\nThis would remove the recurrent rent entries (ID is also 1 because\nstandard and recurrent entries are stored in separate tables):\n\n::\n\n    > financeager rm 1 --table-name recurrent\n\nShow a side-by-side *overview* of earnings and expenses (filter date\nand/or category by providing the ``-d`` and ``-c`` flag and/or filter\nthe name by providing a positional argument)\n\n::\n\n    > financeager print\n\n                   Earnings               |                Expenses\n    Name               Value    Date  ID  | Name               Value    Date  ID\n    Unspecified          123.45           | Rent                1500.00\n      Lottery            123.45 03-14   2 |   Rent January       500.00 01-01   1\n                                          |   Rent February      500.00 02-01   1\n                                          |   Rent March         500.00 03-01   1\n    =============================================================================\n    Total                123.45           | Total               1500.00\n\nThe aforementioned ``financeager`` commands operate on the default\ndatabase (named by the current year, e.g. 2017) unless another period is\nspecified by the ``--period`` flag.\n\n::\n\n    > financeager add xmas-gifts -42 --date 12-23 --period 2016\n\n*Copy* an entry from one database to another by specifying entry ID and\nsource/destination period:\n\n::\n\n    > financeager copy 1 --source 2017 --destination 2018\n\nDetailed information is available from\n\n::\n\n    > financeager --help\n    > financeager <subcommand> --help\n\nMore Goodies\n~~~~~~~~~~~~\n\n-  ``financeager`` will store requests if the server is not reachable\n   (the timeout is configurable). The offline backup is restored the\n   next time a connection is established. This feature is online\n   available when running financeager with flask.\n\nExpansion\n~~~~~~~~~\n\nWant to use a different database? Should be straightforward by deriving\nfrom ``Period`` and implementing the ``_entry()`` methods. Modify the\n``Server`` class accordingly to use the new period type.\n\nKNOWN BUGS\n----------\n\n-  Please. Report. Them.\n\nFUTURE FEATURES\n---------------\n\n-  [ ] experiment with urwid for building TUI or remi for HTML-based GUI\n-  [ ] support querying of standard/recurrent table with ``print``\n-  [ ] return element ID as response to add/copy/update request\n-  [ ] support passing multiple elements IDs to update/rm/copy/get\n\nIMPLEMENTED FEATURES\n--------------------\n\n-  [x] recurrent entries\n-  [x] stacked layout for ``print``\n-  [x] detect category from entry name (category cache)\n-  [x] allow filtering of specific date, name, etc. for ``print``\n-  [x] use flask for REST API\n-  [x] always show entry ID when ``print``\\ ing\n-  [x] specify date format as ``MM-DD``\n-  [x] validate user input prior to inserting to database\n-  [x] support ``get`` command\n-  [x] support 'updating' of entries\n-  [x] sort ``print`` output acc. to entry name/value/date/category\n-  [x] refactor config module (custom method to intuitively retrieve\n   config parameters)\n-  [x] ``copy`` command to transfer recurrent entries between period\n   databases\n\nDISCARDED FEATURE IDEAS\n-----------------------\n\n-  select from multiple options if possible (e.g. when searching or\n   deleting an entry): breaks the concept of having a single\n   request-response action. Instead, the user is expected to know which\n   element he wants to delete (by using the element ID) and can give a\n   precise command\n\nDEVELOPER'S TODOs\n-----------------\n\n-  [x] refactor TinyDbPeriod (return Model strings)\n-  [x] improve documentation (period module)\n-  [x] create Python package\n-  [x] set up Travis CI\n-  [ ] use logging module instead of print\n-  [x] drop PyQt dependency for schematics package\n-  [x] allow remove elements by ID only\n-  [x] specify CL option to differ between removing standard and\n   recurrent element\n-  [x] refactor ``entries`` module (no dependency on schematics package)\n-  [x] consistent naming (recurrent instead of repetitive)\n-  [x] increase code coverage\n-  [x] refactor period module (no use of CONFIG\\_DIR)\n-  [ ] use marshmallow package for keyword validation in period and\n   webservice\n-  [x] refactor some modules (e.g. split fflask and server)\n\nPERSONAL NOTE\n-------------\n\nThis is a 'sandbox' project of mine. I'm exploring and experimenting\nwith databases, data models, server applications (``Pyro4`` and\n``flask``), frontends (command line, Qt-based GUI), software\narchitecture and general Python development.\n\nFeel free to browse the project and give feedback (comments, issues,\npull requests).\n\n.. |Build Status| image:: https://travis-ci.org/pylipp/financeager.svg?branch=master\n   :target: https://travis-ci.org/pylipp/financeager\n.. |Coverage Status| image:: https://coveralls.io/repos/github/pylipp/financeager/badge.svg?branch=master\n   :target: https://coveralls.io/github/pylipp/financeager?branch=master\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pylipp/financeager",
    "keywords": "commandline finances",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "financeager",
    "platform": "",
    "project_url": "https://pypi.org/project/financeager/",
    "release_url": "https://pypi.org/project/financeager/0.5/",
    "requires_dist": [
      "schematics (==2.0.1)",
      "requests (==2.12.4)",
      "Flask-RESTful (==0.3.5)",
      "Flask (==0.12.1)",
      "python-dateutil (==2.6.0)",
      "tinydb (==3.2.1)"
    ],
    "requires_python": "",
    "summary": "command line tool for organizing finances",
    "version": "0.5"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a0415d125ada11aa2f8b2ff14cec8be1",
          "sha256": "1e86192934a5ebdd5f386b07c11c1042d1e6d5f2a2759799fc566f2d2b7ab74e"
        },
        "downloads": -1,
        "filename": "financeager-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0415d125ada11aa2f8b2ff14cec8be1",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 29410,
        "upload_time": "2018-01-01T23:20:16",
        "url": "https://files.pythonhosted.org/packages/aa/84/d9faf5e8c4df9c864c037ce04bd49831ff8c5554798ea3f76b79f4a6ad1c/financeager-0.1-py2.py3-none-any.whl"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2d061055b01ca6f7c825470f554b801b",
          "sha256": "5681a245a98a3461b048717800c8fcadaa4eafbe9973fec84cadfd762df5213c"
        },
        "downloads": -1,
        "filename": "financeager-0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d061055b01ca6f7c825470f554b801b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 29433,
        "upload_time": "2018-01-02T00:21:16",
        "url": "https://files.pythonhosted.org/packages/45/ec/c0a50836fa6eea666a05dd10a375a9127152d585b75e5860b4daa30fa9a0/financeager-0.2-py2.py3-none-any.whl"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c7606f422c43c6e60226542c6dfd8190",
          "sha256": "3cc1c0e9a4b0da1705d9140273c9cc2d28faf4f7b991047d48626add0999296c"
        },
        "downloads": -1,
        "filename": "financeager-0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c7606f422c43c6e60226542c6dfd8190",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 29910,
        "upload_time": "2018-01-11T21:49:48",
        "url": "https://files.pythonhosted.org/packages/dd/6a/d43ebd0c283726ca52a37c284b3d0d3ef1a65e43a6e5fbcb80e128fe0ff9/financeager-0.3-py2.py3-none-any.whl"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c1d9a37e1fc5b886e8d1b4c08489d8aa",
          "sha256": "48c3f90c4f8cb2783a2bb24ee4e4cbcfed17c041851e067410547c8a3be1eb52"
        },
        "downloads": -1,
        "filename": "financeager-0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c1d9a37e1fc5b886e8d1b4c08489d8aa",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 30178,
        "upload_time": "2018-01-12T19:03:09",
        "url": "https://files.pythonhosted.org/packages/ed/7d/5cb28a113f1ceae0cb65e0640a9b406c6c8d24c81a3ff113da5eb7d190f5/financeager-0.4-py2.py3-none-any.whl"
      }
    ],
    "0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c83cf846813f27f6a29a750106a6a4af",
          "sha256": "6e99d136ecd2646688deabfc16fe6b818458aeedf95b56a26bc801487948be36"
        },
        "downloads": -1,
        "filename": "financeager-0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c83cf846813f27f6a29a750106a6a4af",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 30673,
        "upload_time": "2018-01-12T21:05:07",
        "url": "https://files.pythonhosted.org/packages/50/eb/34cbf5da1b0d9b85023a9ff8345c324a763853a7f63ba15be5e24eaf766e/financeager-0.5-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c83cf846813f27f6a29a750106a6a4af",
        "sha256": "6e99d136ecd2646688deabfc16fe6b818458aeedf95b56a26bc801487948be36"
      },
      "downloads": -1,
      "filename": "financeager-0.5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "c83cf846813f27f6a29a750106a6a4af",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 30673,
      "upload_time": "2018-01-12T21:05:07",
      "url": "https://files.pythonhosted.org/packages/50/eb/34cbf5da1b0d9b85023a9ff8345c324a763853a7f63ba15be5e24eaf766e/financeager-0.5-py2.py3-none-any.whl"
    }
  ]
}