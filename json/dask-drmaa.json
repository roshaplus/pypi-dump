{
  "info": {
    "author": "Matthew Rocklin",
    "author_email": "mrocklin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Dask on DRMAA\n=============\n\n|Build Status|\n\nDeploy a Dask.distributed_ cluster on top of a cluster running a\nDRMAA_-compliant job scheduler.\n\n\nExample\n-------\n\nLaunch from Python\n\n.. code-block:: python\n\n   from dask_drmaa import DRMAACluster\n   cluster = DRMAACluster()\n\n   from dask.distributed import Client\n   client = Client(cluster)\n   cluster.start_workers(2)\n\n   >>> future = client.submit(lambda x: x + 1, 10)\n   >>> future.result()\n   11\n\nOr launch from the command line::\n\n    $ dask-drmaa 10  # starts local scheduler and ten remote workers\n\n\nInstall\n-------\n\nCurrently this is only available through GitHub and source installation::\n\n    pip install git+https://github.com/dask/dask-drmaa.git --upgrade\n\nor::\n\n    git clone git@github.com:dask/dask-drmaa.git\n    cd dask-drmaa\n    python setup.py install\n\nYou must have the DRMAA system library installed and be able to submit jobs\nfrom your local machine.\n\n\nTesting\n-------\n\nThis repository contains a Docker-compose testing harness for a Son of Grid\nEngine cluster with a master and two slaves.   You can initialize this system\nas follows\n\n.. code-block:: bash\n\n   docker-compose build\n   ./start-sge.sh\n\nAnd run tests with py.test in the master docker container\n\n.. code-block:: bash\n\n  docker exec -it sge_master /bin/bash -c \"cd /dask-drmaa; python setup.py develop\"\n  docker exec -it sge_master py.test dask-drmaa/dask_drmaa --verbose\n\n\nAdaptive Load\n-------------\n\nDask-drmaa can adapt to scheduler load, deploying more workers on the grid when\nit has more work, and cleaning up these workers when they are no longer\nnecessary.  This can simplify setup (you can just leave a cluster running) and\nit can reduce load on the cluster, making IT happy.\n\nTo enable this, call the ``Adaptive`` class on a ``DRMAACluster``.  You can\nsubmit computations to the cluster without ever explicitly creating workers.\n\n.. code-block:: python\n\n   from dask_drmaa import DRMAACluster, Adaptive\n   from dask.distributed import Client\n\n   cluster = DRMAACluster()\n   adapt = Adaptive(cluster)\n   client = Client(cluster)\n\n   futures = client.map(func, seq)  # workers will be created as necessary\n\n\nExtensible\n----------\n\nThe DRMAA interface is the lowest common denominator among many different job\nschedulers like SGE, SLURM, LSF, Torque, and others.  However, sometimes users\nneed to specify parameters particular to their cluster, such as resource\nqueues, wall times, memory constraints, etc..\n\nDRMAA allows users to pass native specifications either when constructing the\ncluster or when starting new workers:\n\n.. code-block:: python\n\n   cluster = DRMAACluster(template={'nativeSpecification': '-l h_rt=01:00:00'})\n   # or\n   cluster.start_workers(10, nativeSpecification='-l h_rt=01:00:00')\n\n\nRelated Work\n------------\n\n* DRMAA_: The Distributed Resource Management Application API, a high level\n  API for general use on traditional job schedulers\n* drmaa-python_: The Python bindings for DRMAA\n* DaskSGE_: An earlier dask-drmaa implementation\n* `Son of Grid Engine`_: The default implementation used in testing\n* Dask.distributed_: The actual distributed computing library this launches\n\n.. _DRMAA: https://www.drmaa.org/\n.. _drmaa-python: http://drmaa-python.readthedocs.io/en/latest/\n.. _`Son of Grid Engine`: https://arc.liv.ac.uk/trac/SGE\n.. _dasksge: https://github.com/mfouesneau/dasksge\n.. _Dask.distributed: http://distributed.readthedocs.io/en/latest/\n.. _DRMAA: https://www.drmaa.org/\n\n\n.. |Build Status| image:: https://travis-ci.org/dask/dask-drmaa.svg?branch=master\n   :target: https://travis-ci.org/dask/dask-drmaa\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/dask/dask-drmaa/",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "dask-drmaa",
    "platform": "",
    "project_url": "https://pypi.org/project/dask-drmaa/",
    "release_url": "https://pypi.org/project/dask-drmaa/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Dask on DRMAA",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1cda20b30bc9139591e15d9119b76ade",
          "sha256": "c98041835727539fd541a2a08963831c6b1f3371784df145ab48298d5de19aff"
        },
        "downloads": -1,
        "filename": "dask-drmaa-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1cda20b30bc9139591e15d9119b76ade",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24602,
        "upload_time": "2017-11-10T06:02:15",
        "url": "https://files.pythonhosted.org/packages/b5/88/6ecb9e020d1040ee16cc66475a75585bdf16c5b3456b877b6b3a02e35e8b/dask-drmaa-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1cda20b30bc9139591e15d9119b76ade",
        "sha256": "c98041835727539fd541a2a08963831c6b1f3371784df145ab48298d5de19aff"
      },
      "downloads": -1,
      "filename": "dask-drmaa-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1cda20b30bc9139591e15d9119b76ade",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 24602,
      "upload_time": "2017-11-10T06:02:15",
      "url": "https://files.pythonhosted.org/packages/b5/88/6ecb9e020d1040ee16cc66475a75585bdf16c5b3456b877b6b3a02e35e8b/dask-drmaa-0.1.0.tar.gz"
    }
  ]
}