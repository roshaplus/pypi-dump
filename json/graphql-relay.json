{
  "info": {
    "author": "Syrus Akbary",
    "author_email": "me@syrusakbary.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "Relay Library for GraphQL Python\n================================\n\nThis is a library to allow the easy creation of Relay-compliant servers\nusing the `GraphQL\nPython <https://github.com/graphql-python/graphql-core>`__ reference\nimplementation of a GraphQL server.\n\nNote: The code is a **exact** port of the original `graphql-relay js\nimplementation <https://github.com/graphql/graphql-relay-js>`__ from\nFacebook\n\n|PyPI version| |Build Status| |Coverage Status|\n\nGetting Started\n---------------\n\nA basic understanding of GraphQL and of the GraphQL Python\nimplementation is needed to provide context for this library.\n\nAn overview of GraphQL in general is available in the\n`README <https://github.com/graphql-python/graphql-core/blob/master/README.md>`__\nfor the `Specification for\nGraphQL <https://github.com/graphql-python/graphql-core>`__.\n\nThis library is designed to work with the the `GraphQL\nPython <https://github.com/graphql-python/graphql-core>`__ reference\nimplementation of a GraphQL server.\n\nAn overview of the functionality that a Relay-compliant GraphQL server\nshould provide is in the `GraphQL Relay\nSpecification <https://facebook.github.io/relay/docs/graphql-relay-specification.html>`__\non the `Relay website <https://facebook.github.io/relay/>`__. That\noverview describes a simple set of examples that exist as\n`tests <tests>`__ in this repository. A good way to get started with\nthis repository is to walk through that documentation and the\ncorresponding tests in this library together.\n\nUsing Relay Library for GraphQL Python (graphql-core)\n-----------------------------------------------------\n\nInstall Relay Library for GraphQL Python\n\n.. code:: sh\n\n    pip install graphql-core --pre # Last version of graphql-core\n    pip install graphql-relay\n\nWhen building a schema for\n`GraphQL <https://github.com/graphql-python/graphql-core>`__, the\nprovided library functions can be used to simplify the creation of Relay\npatterns.\n\nConnections\n~~~~~~~~~~~\n\nHelper functions are provided for both building the GraphQL types for\nconnections and for implementing the ``resolver`` method for fields\nreturning those types.\n\n-  ``connection_args`` returns the arguments that fields should provide\n   when they return a connection type.\n-  ``connection_definitions`` returns a ``connection_type`` and its\n   associated ``edgeType``, given a name and a node type.\n-  ``connection_from_list`` is a helper method that takes an array and\n   the arguments from ``connection_args``, does pagination and\n   filtering, and returns an object in the shape expected by a\n   ``connection_type``'s ``resolver`` function.\n-  ``connection_from_promised_list`` is similar to\n   ``connection_from_list``, but it takes a promise that resolves to an\n   array, and returns a promise that resolves to the expected shape by\n   ``connection_type``.\n-  ``cursor_for_object_in_connection`` is a helper method that takes an\n   array and a member object, and returns a cursor for use in the\n   mutation payload.\n\nAn example usage of these methods from the `test\nschema <tests/starwars/schema.py>`__:\n\n.. code:: python\n\n    ship_edge, ship_connection = connection_definitions('Ship', shipType)\n\n    factionType = GraphQLObjectType(\n        name= 'Faction',\n        description= 'A faction in the Star Wars saga',\n        fields= lambda: {\n            'id': global_id_field('Faction'),\n            'name': GraphQLField(\n                GraphQLString,\n                description='The name of the faction.',\n            ),\n            'ships': GraphQLField(\n                shipConnection,\n                description= 'The ships used by the faction.',\n                args= connection_args,\n                resolver= lambda faction, args, *_: connection_from_list(\n                    map(getShip, faction.ships),\n                    args\n                ),\n            )\n        },\n        interfaces= [node_interface]\n    )\n\nThis shows adding a ``ships`` field to the ``Faction`` object that is a\nconnection. It uses\n``connection_definitions({name: 'Ship', nodeType: shipType})`` to create\nthe connection type, adds ``connection_args`` as arguments on this\nfunction, and then implements the resolver function by passing the array\nof ships and the arguments to ``connection_from_list``.\n\nObject Identification\n~~~~~~~~~~~~~~~~~~~~~\n\nHelper functions are provided for both building the GraphQL types for\nnodes and for implementing global IDs around local IDs.\n\n-  ``node_definitions`` returns the ``Node`` interface that objects can\n   implement, and returns the ``node`` root field to include on the\n   query type. To implement this, it takes a function to resolve an ID\n   to an object, and to determine the type of a given object.\n-  ``to_global_id`` takes a type name and an ID specific to that type\n   name, and returns a \"global ID\" that is unique among all types.\n-  ``from_global_id`` takes the \"global ID\" created by ``toGlobalID``,\n   and retuns the type name and ID used to create it.\n-  ``global_id_field`` creates the configuration for an ``id`` field on\n   a node.\n-  ``plural_identifying_root_field`` creates a field that accepts a list\n   of non-ID identifiers (like a username) and maps then to their\n   corresponding objects.\n\nAn example usage of these methods from the `test\nschema <tests/starwars/schema.py>`__:\n\n.. code:: python\n\n    def get_node(global_id, context, info):\n        resolvedGlobalId = from_global_id(global_id)\n        _type, _id = resolvedGlobalId.type, resolvedGlobalId.id\n        if _type == 'Faction':\n            return getFaction(_id)\n        elif _type == 'Ship':\n            return getShip(_id)\n        else:\n            return None\n\n    def get_node_type(obj, context, info):\n        if isinstance(obj, Faction):\n            return factionType\n        else:\n            return shipType\n\n    node_interface, node_field = node_definitions(get_node, get_node_type)\n\n    factionType = GraphQLObjectType(\n        name= 'Faction',\n        description= 'A faction in the Star Wars saga',\n        fields= lambda: {\n            'id': global_id_field('Faction'),\n        },\n        interfaces= [node_interface]\n    )\n\n    queryType = GraphQLObjectType(\n        name= 'Query',\n        fields= lambda: {\n            'node': node_field\n        }\n    )\n\nThis uses ``node_definitions`` to construct the ``Node`` interface and\nthe ``node`` field; it uses ``from_global_id`` to resolve the IDs passed\nin in the implementation of the function mapping ID to object. It then\nuses the ``global_id_field`` method to create the ``id`` field on\n``Faction``, which also ensures implements the ``node_interface``.\nFinally, it adds the ``node`` field to the query type, using the\n``node_field`` returned by ``node_definitions``.\n\nMutations\n~~~~~~~~~\n\nA helper function is provided for building mutations with single inputs\nand client mutation IDs.\n\n-  ``mutation_with_client_mutation_id`` takes a name, input fields,\n   output fields, and a mutation method to map from the input fields to\n   the output fields, performing the mutation along the way. It then\n   creates and returns a field configuration that can be used as a\n   top-level field on the mutation type.\n\nAn example usage of these methods from the `test\nschema <tests/starwars/schema.py>`__:\n\n.. code:: python\n\n    class IntroduceShipMutation(object):\n        def __init__(self, shipId, factionId, clientMutationId=None):\n            self.shipId = shipId\n            self.factionId = factionId\n            self.clientMutationId = None\n\n    def mutate_and_get_payload(data, *_):\n        shipName = data.get('shipName')\n        factionId = data.get('factionId')\n        newShip = createShip(shipName, factionId)\n        return IntroduceShipMutation(\n            shipId=newShip.id,\n            factionId=factionId,\n        )\n\n    shipMutation = mutation_with_client_mutation_id(\n        'IntroduceShip',\n        input_fields={\n            'shipName': GraphQLField(\n                GraphQLNonNull(GraphQLString)\n            ),\n            'factionId': GraphQLField(\n                GraphQLNonNull(GraphQLID)\n            )\n        },\n        output_fields= {\n            'ship': GraphQLField(\n                shipType,\n                resolver= lambda payload, *_: getShip(payload.shipId)\n            ),\n            'faction': GraphQLField(\n                factionType,\n                resolver= lambda payload, *_: getFaction(payload.factionId)\n            )\n        },\n        mutate_and_get_payload=mutate_and_get_payload\n    )\n\n    mutationType = GraphQLObjectType(\n        'Mutation',\n        fields= lambda: {\n            'introduceShip': shipMutation\n        }\n    )\n\nThis code creates a mutation named ``IntroduceShip``, which takes a\nfaction ID and a ship name as input. It outputs the ``Faction`` and the\n``Ship`` in question. ``mutate_and_get_payload`` then gets an object\nwith a property for each input field, performs the mutation by\nconstructing the new ship, then returns an object that will be resolved\nby the output fields.\n\nOur mutation type then creates the ``introduceShip`` field using the\nreturn value of ``mutation_with_client_mutation_id``.\n\nContributing\n------------\n\nAfter cloning this repo, ensure dependencies are installed by running:\n\n.. code:: sh\n\n    python setup.py install\n\nAfter developing, the full test suite can be evaluated by running:\n\n.. code:: sh\n\n    python setup.py test # Use --pytest-args=\"-v -s\" for verbose mode\n\n.. |PyPI version| image:: https://badge.fury.io/py/graphql-relay.svg\n   :target: https://badge.fury.io/py/graphql-relay\n.. |Build Status| image:: https://travis-ci.org/graphql-python/graphql-relay-py.svg?branch=master\n   :target: https://travis-ci.org/graphql-python/graphql-relay-py\n.. |Coverage Status| image:: https://coveralls.io/repos/graphql-python/graphql-relay-py/badge.svg?branch=master&service=github\n   :target: https://coveralls.io/github/graphql-python/graphql-relay-py?branch=master",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/graphql-python/graphql-relay-py",
    "keywords": "api graphql protocol rest relay",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "graphql-relay",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/graphql-relay/",
    "release_url": "https://pypi.org/project/graphql-relay/0.4.5/",
    "requires_python": null,
    "summary": "Relay implementation for Python",
    "version": "0.4.5"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8334fb7ddba15a5547c37be45fb35dfa",
          "sha256": "c68428dc3d0771b105d5b7fc30dcf865db27184712075889025ea5d52f699901"
        },
        "downloads": 802,
        "filename": "graphql-relay-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8334fb7ddba15a5547c37be45fb35dfa",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5351,
        "upload_time": "2015-09-17T17:23:28",
        "url": "https://files.pythonhosted.org/packages/ed/9c/c5f6625b9dcfc1cfc4b21158f77625106618b1926dab1627d862eddcecaf/graphql-relay-0.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5c1459172777dd041241710859692c11",
          "sha256": "e449b54ef51453bde2ed5f26090f0e93c30d6d03b0ae17a18d77d6a15058c76c"
        },
        "downloads": 769,
        "filename": "graphql-relay-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5c1459172777dd041241710859692c11",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9007,
        "upload_time": "2015-09-23T04:19:01",
        "url": "https://files.pythonhosted.org/packages/7b/de/853ccfd8171befbb177cc0442a7b1834a8ecd7959fb4ae8716f552c2c8e1/graphql-relay-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dec4ebb849daf476a17ead5e17f808c9",
          "sha256": "678af38093f4153b430c90fc966d578b7d75e10000303057b131d414a14fb6e7"
        },
        "downloads": 651,
        "filename": "graphql-relay-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dec4ebb849daf476a17ead5e17f808c9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9022,
        "upload_time": "2015-10-07T05:27:26",
        "url": "https://files.pythonhosted.org/packages/cb/3a/5798a3d037ec452cf64cd57b00e8277ed17613e468dd12d051e4245be55a/graphql-relay-0.1.3.tar.gz"
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0cf996fb7beff0c482b50d351d4b2c3d",
          "sha256": "3c0ec743abd1ba75bcd14403b481f98683eacdbf4bde703ac23244d90317ffe3"
        },
        "downloads": 760,
        "filename": "graphql-relay-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "0cf996fb7beff0c482b50d351d4b2c3d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9017,
        "upload_time": "2015-10-08T04:28:39",
        "url": "https://files.pythonhosted.org/packages/c2/1f/4d56b6ba6bfc33cdf27b746edde62451eb785f273ad54192beb4f0cacb3c/graphql-relay-0.1.4.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d377e8eb412336b53baec32d98711ab4",
          "sha256": "5595ff87db60a89d0d4628d9f2f406682ffb157ea0834f399800f125e39bbccc"
        },
        "downloads": 931,
        "filename": "graphql-relay-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d377e8eb412336b53baec32d98711ab4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9054,
        "upload_time": "2015-10-10T07:07:48",
        "url": "https://files.pythonhosted.org/packages/bf/d4/9b003332ab249075f704d6e1dca39b9eb714636b83a5d26439b4cd339769/graphql-relay-0.2.0.tar.gz"
      }
    ],
    "0.3.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "79d32339e751025c0b2c12faa4d4b8b6",
          "sha256": "78619da97851ded699a3bb46c4118780daa87ef328c3296364c1acc16744881d"
        },
        "downloads": 5581,
        "filename": "graphql-relay-0.3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "79d32339e751025c0b2c12faa4d4b8b6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9175,
        "upload_time": "2015-10-21T04:30:48",
        "url": "https://files.pythonhosted.org/packages/71/d5/a1251273fe9ffae5b7c4b747905995edf76c122dfa90bfef2192980ff96e/graphql-relay-0.3.3.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "782bcbe824c119d7ebee479d5d0da311",
          "sha256": "ad48eee194038dcf6e4fabca0374bab123017d3820da8c41f5fd82e61fb08825"
        },
        "downloads": 280,
        "filename": "graphql-relay-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "782bcbe824c119d7ebee479d5d0da311",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9371,
        "upload_time": "2016-05-12T07:25:03",
        "url": "https://files.pythonhosted.org/packages/31/5e/38e4098b022041d6bc2c9c779d841e8677f957a64735de0d10a092750962/graphql-relay-0.4.1.tar.gz"
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7bf4f2fdad2d941a3d189941ec0867c1",
          "sha256": "fca2b946c93a1ba1477b3ca261fbef41abd5a257b1ea49d6d8a3f5a495b2792f"
        },
        "downloads": 466,
        "filename": "graphql-relay-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7bf4f2fdad2d941a3d189941ec0867c1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9383,
        "upload_time": "2016-05-19T05:10:50",
        "url": "https://files.pythonhosted.org/packages/02/96/3ffeeeccb60c2208432b078194a5ed0fc9f11dcac45d85d8b23da9c4d9af/graphql-relay-0.4.2.tar.gz"
      }
    ],
    "0.4.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e1185297e1f4bbd7cdb1d7313e128e2d",
          "sha256": "dbc5aedd1a1413ecc3c562b781c46fa7d7d91fb28343844097c898a8d78c74f4"
        },
        "downloads": 176,
        "filename": "graphql-relay-0.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e1185297e1f4bbd7cdb1d7313e128e2d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9412,
        "upload_time": "2016-06-15T06:56:24",
        "url": "https://files.pythonhosted.org/packages/c8/9a/9f79f262a14bd49549ffe71dd27a3037649161faac276b77166adcc7ddc5/graphql-relay-0.4.3.tar.gz"
      }
    ],
    "0.4.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "62b57f20a7b62a2b7cc77cef68d36dec",
          "sha256": "b12f37967d118f861d016650c9838bd38cbf9c3b2c882d1e6b5276a8bd4a9913"
        },
        "downloads": 5652,
        "filename": "graphql-relay-0.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "62b57f20a7b62a2b7cc77cef68d36dec",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9434,
        "upload_time": "2016-06-18T19:44:11",
        "url": "https://files.pythonhosted.org/packages/cf/dc/684ded66cab738f54907d3adc21ea8cc4bf395802c950e2709e36fc43a99/graphql-relay-0.4.4.tar.gz"
      }
    ],
    "0.4.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1d20e070f039229063c948ef9d8889a6",
          "sha256": "2716b7245d97091af21abf096fabafac576905096d21ba7118fba722596f65db"
        },
        "downloads": 5166,
        "filename": "graphql-relay-0.4.5.tar.gz",
        "has_sig": false,
        "md5_digest": "1d20e070f039229063c948ef9d8889a6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9422,
        "upload_time": "2016-11-23T17:43:40",
        "url": "https://files.pythonhosted.org/packages/5e/b0/b91fadc180544fc9e3c156d7049561fd5f1e2211d26fd29033548fd50934/graphql-relay-0.4.5.tar.gz"
      }
    ],
    "0.4b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fe725e899d5926982a550cb4e1d85efc",
          "sha256": "f7ee771aa9dd4ce80f605a7c80e354b2c3ac2ba0ad3cebe1460204b9dc704e5a"
        },
        "downloads": 147,
        "filename": "graphql-relay-0.4b1.tar.gz",
        "has_sig": false,
        "md5_digest": "fe725e899d5926982a550cb4e1d85efc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9364,
        "upload_time": "2016-05-12T05:36:26",
        "url": "https://files.pythonhosted.org/packages/1c/ea/79682a9f969e8d320665623ccc19d48aa6f1e290038f112b3c28726f7cf8/graphql-relay-0.4b1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1d20e070f039229063c948ef9d8889a6",
        "sha256": "2716b7245d97091af21abf096fabafac576905096d21ba7118fba722596f65db"
      },
      "downloads": 5166,
      "filename": "graphql-relay-0.4.5.tar.gz",
      "has_sig": false,
      "md5_digest": "1d20e070f039229063c948ef9d8889a6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9422,
      "upload_time": "2016-11-23T17:43:40",
      "url": "https://files.pythonhosted.org/packages/5e/b0/b91fadc180544fc9e3c156d7049561fd5f1e2211d26fd29033548fd50934/graphql-relay-0.4.5.tar.gz"
    }
  ]
}