{
  "info": {
    "author": "Thomas D.",
    "author_email": "tdebize@mail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)",
      "Topic :: Security"
    ],
    "description": "webscreenshot\n=============\n\nDescription\n-----------\nA simple script to screenshot a list of websites, based on the [`url-to-image`](https://github.com/kimmobrunfeldt/url-to-image/) phantomjs script.\n\nFeatures\n--------\n* Integrating url-to-image 'lazy-rendering' for AJAX resources\n* Fully functional on Windows and Linux systems\n* Cookie and custom HTTP header definition support\n* Multiprocessing and killing of unresponding processes after a user-definable timeout\n* Accepts several format as input target\n* Maps useful options of phantomjs such as ignoring ssl error, proxy definition and proxy authentication, HTTP Basic Authentication\n\nUsage\n-----\nPut your targets in a text file and pass it to the script (`-i`).  \nScreenshots will be available in your current ```./screenshots/``` directory (default).  \nAccepted input formats are the following:\n```\nhttp(s)://domain_or_ip:port(/ressource)\ndomain_or_ip:port(/ressource)\ndomain_or_ip(/ressource)\n```\n\n### Options\n```\n$ python webscreenshot.py -h\nUsage: webscreenshot.py [options]\n\nOptions:\n  -h, --help            show this help message and exit\n\n  Main parameters:\n    -i INPUT_FILE, --input-file=INPUT_FILE\n                        <INPUT_FILE>: text file containing the target list.\n                        Ex: list.txt\n    -o OUTPUT_DIRECTORY, --output-directory=OUTPUT_DIRECTORY\n                        <OUTPUT_DIRECTORY> (optional): screenshots output\n                        directory (default './screenshots/')\n    -w WORKERS, --workers=WORKERS\n                        <WORKERS> (optional): number of parallel execution\n                        workers (default 2)\n    -v, --verbosity     <VERBOSITY> (optional): verbosity level, repeat it to\n                        increase the level { -v INFO, -vv DEBUG } (default\n                        verbosity ERROR)\n\n  Input processing parameters:\n    -p PORT, --port=PORT\n                        <PORT> (optional): use the specified port for each\n                        target in the input list. Ex: -p 80\n    -s, --ssl           <SSL> (optional): enforce ssl for every connection\n    -m, --multiprotocol\n                        <MULTIPROTOCOL> (optional): perform screenshots over\n                        HTTP and HTTPS for each target\n\n  HTTP parameters:\n    -c COOKIE, --cookie=COOKIE\n                        <COOKIE_STRING> (optional): cookie string to add. Ex:\n                        -c \"JSESSIONID=1234; YOLO=SWAG\"\n    -a HEADER, --header=HEADER\n                        <HEADER> (optional): custom or additional header.\n                        Repeat this option for every header. Ex: -a \"Host:\n                        localhost\" -a \"Foo: bar\"\n    -u HTTP_USERNAME, --http-username=HTTP_USERNAME\n                        <HTTP_USERNAME> (optional): specify a username for\n                        HTTP Basic Authentication.\n    -b HTTP_PASSWORD, --http-password=HTTP_PASSWORD\n                        <HTTP_PASSWORD> (optional): specify a password for\n                        HTTP Basic Authentication.\n\n  Connection parameters:\n    -P PROXY, --proxy=PROXY\n                        <PROXY> (optional): specify a proxy. Ex: -P\n                        http://proxy.company.com:8080\n    -A PROXY_AUTH, --proxy-auth=PROXY_AUTH\n                        <PROXY_AUTH> (optional): provides authentication\n                        information for the proxy. Ex: -A user:password\n    -T PROXY_TYPE, --proxy-type=PROXY_TYPE\n                        <PROXY_TYPE> (optional): specifies the proxy type,\n                        \"http\" (default), \"none\" (disable completely), or\n                        \"socks5\". Ex: -T socks\n    -t TIMEOUT, --timeout=TIMEOUT\n                        <TIMEOUT> (optional): phantomjs execution timeout in\n                        seconds (default 30 sec)\n\n```\n\n### Examples\n```\nlist.txt\n--------\nhttp://google.fr\nhttps://173.194.67.113\n173.194.67.113\nhttps://duckduckgo.com/robots.txt\n\n\nDefault execution\n-----------------\n$ python webscreenshot.py -i list.txt\nwebscreenshot.py version 1.0\n\n[+] 4 URLs to be screenshot\n[+] 4 actual URLs screenshot\n[+] 0 errors\n\n\nIncreasing verbosity level execution\n-----------------------------------\n$ python webscreenshot.py -i list.txt -v\nwebscreenshot.py version 1.1\n\n[INFO][General] 'http://google.fr' has been formatted as 'http://google.fr:80' with supplied overriding options\n[INFO][General] 'https://173.194.67.113' has been formatted as 'https://173.194.67.113:443' with supplied overriding options\n[INFO][General] '173.194.67.113' has been formatted as 'http://173.194.67.113:80' with supplied overriding options\n[INFO][General] 'https://duckduckgo.com/robots.txt' has been formatted as 'https://duckduckgo.com:443/robots.txt' with supplied overriding options\n[+] 4 URLs to be screenshot\n[INFO][http://173.194.67.113:80] Screenshot OK\n[INFO][https://173.194.67.113:443] Screenshot OK\n[INFO][http://google.fr:80] Screenshot OK\n[INFO][https://duckduckgo.com:443/robots.txt] Screenshot OK\n[+] 4 actual URLs screenshot\n[+] 0 errors\n\nResults\n-------\n$ ls -l screenshots/\ntotal 61\n-rwxrwxrwx 1 root root 35005 Jan 12 19:46 http___173.194.67.113_80.png\n-rwxrwxrwx 1 root root 38152 Jan 12 19:46 http___google.fr_80.png\n-rwxrwxrwx 1 root root 35005 Jan 12 19:46 https___173.194.67.113_443.png\n-rwxrwxrwx 1 root root 12828 Jan 12 19:46 https___duckduckgo.com_443_robots.txt.png\n```\n\nRequirements\n------------\n* Python 2.7\n* webscreenshot python script: \n  * The **easiest way** to setup it: `pip install webscreenshot` and then directly use `$ webscreenshot` \n  * Or git clone that repository\n* Phantomjs > 2.x : follow the [installation guide](https://github.com/maaaaz/webscreenshot/wiki/Phantomjs-installation) and check the [FAQ](https://github.com/maaaaz/webscreenshot/wiki/FAQ) if necessary\n\n\nChangelog\n---------\n* version 2.1 - 01/14/2018: Multiprotocol option addition and PyPI packaging\n* version 2.0 - 03/08/2017: Adding proxy-type option\n* version 1.9 - 01/10/2017: Using ALL SSL/TLS ciphers\n* version 1.8 - 07/05/2015: Option groups definition\n* version 1.7 - 06/28/2015: HTTP basic authentication support + loglevel option changed to verbosity\n* version 1.6 - 04/23/2015: Transparent background fix\n* version 1.5 - 01/11/2015: Cookie and custom HTTP header support\n* version 1.4 - 10/12/2014: url-to-image phantomjs script integration + few bugs corrected\n* version 1.3 - 08/05/2014: Windows support + few bugs corrected\n* version 1.2 - 04/27/2014: few bugs corrected\n* version 1.1 - 04/21/2014: Changed the script to use phantomjs instead of the buggy wkhtml binary \n* version 1.0 - 01/12/2014: Initial commit\n\nCopyright and license\n---------------------\nwebscreenshot is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.\n\nwebscreenshot is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  \n\nSee the GNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along with webscreenshot. \nIf not, see http://www.gnu.org/licenses/.\n\nContact\n-------\n* Thomas Debize < tdebize at mail d0t com >",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/maaaaz/webscreenshot",
    "keywords": "webscreenshot web screenshot phantomjs",
    "license": "LGPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "webscreenshot",
    "platform": "",
    "project_url": "https://pypi.org/project/webscreenshot/",
    "release_url": "https://pypi.org/project/webscreenshot/2.1/",
    "requires_dist": [],
    "requires_python": "<3",
    "summary": "A simple script to screenshot a list of websites",
    "version": "2.1"
  },
  "releases": {
    "2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9efbc0c76dca31c3a325a18becf5ca53",
          "sha256": "3d5be0c5b3123c5cacd1ffa2f5a2488a84291e7f0ad2373d4337058410522d12"
        },
        "downloads": -1,
        "filename": "webscreenshot-2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9efbc0c76dca31c3a325a18becf5ca53",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14812,
        "upload_time": "2018-01-14T13:32:12",
        "url": "https://files.pythonhosted.org/packages/c6/16/27590da3c0e679d42222a9be450a8503e4e35f75856397b03b54f81894d6/webscreenshot-2.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9efbc0c76dca31c3a325a18becf5ca53",
        "sha256": "3d5be0c5b3123c5cacd1ffa2f5a2488a84291e7f0ad2373d4337058410522d12"
      },
      "downloads": -1,
      "filename": "webscreenshot-2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9efbc0c76dca31c3a325a18becf5ca53",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 14812,
      "upload_time": "2018-01-14T13:32:12",
      "url": "https://files.pythonhosted.org/packages/c6/16/27590da3c0e679d42222a9be450a8503e4e35f75856397b03b54f81894d6/webscreenshot-2.1.tar.gz"
    }
  ]
}