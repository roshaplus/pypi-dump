{
  "info": {
    "author": "Roman Bystritskiy",
    "author_email": "rbystrit@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "AVRO-GEN\r\n========\r\n\r\n##### Avro record class and specific record reader generator.\r\n\r\nCurrent Avro implementation in Python is completely typelss and operates on dicts. \r\nWhile in many cases this is convenient and pythonic, not being able to discover the schema\r\nby looking at the code, not enforcing schema during record constructions, and not having any \r\ncontext help from the IDE could hamper developer performance and introduce bugs. \r\n\r\nThis project aims to rectify this situation by providing a generator for constructing concrete\r\nrecord classes and constructing a reader which wraps Avro DatumReader and returns concrete classes\r\ninstead of dicts. In order not to violate Avro internals, this functionality is built strictly\r\non top of the DatumReader and all the specific record classes dict wrappers which define accessor\r\nproperties with proper type hints for each field in the schema. For this exact reason the \r\ngenerator does not provide an overloaded DictWriter; each specific record appears just to be a \r\nregular dictionary.\r\n \r\n#####Usage:\r\n    schema_json = \".....\"\r\n    output_directory = \".....\"\r\n    from avrogen import write_schema_files\r\n    \r\n    write_schema_files(schema_json, output_directory)\r\n    \r\nThe generator will create output directory if it does not exist and put generated files there. \r\nThe generated files will be:\r\n\r\n>  OUTPUT_DIR\r\n>  + \\_\\_init\\_\\_.py   \r\n>  + schema_classes.py \r\n>  + submodules*\r\n \r\nIn order to deal with Avro namespaces, since python doesn't support circular imports, the generator\r\n will emit all records into schema_classes.py as nested classes. The top level class there will be\r\n SchemaClasses, whose children will be classes representing namespaces. Each namespace class will \r\n in turn contain classes for records belonging to that namespace. \r\n \r\n Consider following schema:\r\n \r\n     {\"type\": \"record\", \"name\": \"tweet\", \"namespace\": \"com.twitter.avro\", \"fields\": [{\"name\": \"ID\", \"type\": \"long\" }\r\n \r\n Then schema_classes.py would contain:\r\n \r\n    class SchemaClasses(object):\r\n        class com(object):\r\n            class twitter(object):\r\n                class acro(object):\r\n                    class tweetClass(DictWrapper):\r\n                        def __init__(self, inner_dict=None):\r\n                            ....\r\n                        @property\r\n                        def ID(self):\r\n                            \"\"\"\r\n                            :rtype: long\r\n                            \"\"\"\r\n                            return self._inner_dict.get('ID', None)\r\n                        \r\n                        @ID.setter\r\n                        def ID(self, value):\r\n                            #\"\"\"\r\n                            #:param long value:\r\n                            #\"\"\"\r\n                            self._inner_dict['ID'] = value                        \r\n    \r\n In order to map specific record types and namespaces to modules, so that proper importing can\r\n be supported, there generator will create a sub-module under the output directory for each namespace\r\n which will export names of all types contained in that namespace. Types declared with empty \r\n namespace will be exported from the root module. \r\n \r\n So for the example above, output directory will look as follows:\r\n \r\n >  OUTPUT_DIR\r\n >  + \\_\\_init\\_\\_.py\r\n >  + schema_classes.py\r\n >  + com\r\n >   + twitter\r\n >     + avro\r\n >       + \\_\\_init\\_\\_.py  \r\n\r\nThe contents of OUTPUT_DIR/com/twitter/avro/\\_\\_init\\_\\_.py will be:\r\n    \r\n    from ....schema_classes import SchemaClasses\r\n    tweet = SchemaClasses.com.twitter.avro.tweet\r\n    \r\nSo in your code you will be able to say:\r\n    \r\n    from OUTPUT_DIR.com.twitter.avro import tweet\r\n    from OUTPUT_DIR import SpecificDatumReader as TweetReader, SCHEMA as your_schema\r\n    from avro import datafile, io\r\n    my_tweet = tweet()\r\n    \r\n    my_tweet.ID = 1\r\n    with open('somefile', 'w+b') as f:\r\n        writer = datafile.DataFileWriter(f,io.DatumWriter(), your_schema)\r\n        writer.append(my_tweet)\r\n        writer.close()\r\n    \r\n    with open('somefile', 'rb') as f:\r\n        reader = datafile.DataFileReader(f,TweetReader(readers_schema=your_schema))\r\n        my_tweet1 = reader.next()\r\n        reader.close()\r\n        \r\n       \r\n###Avro protocol support\r\n\r\nAvro protocol support is implemented the same way as schema support. To generate classes \r\nfor a protocol:\r\n\r\n    protocol_json = \".....\"\r\n    output_directory = \".....\"\r\n    from avrogen import write_protocol_files\r\n    \r\n    write_protocol_files(protocol_json, output_directory)\r\n    \r\nThe structure of the generated code will be exactly same as for schema, but in addition to\r\nregular types, *Request types will be generated in the root namespace of the protocol for each \r\neach message defined.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/rbystrit/avro_gen",
    "keywords": "avro class generator",
    "license": "License :: OSI Approved :: Apache Software License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "avro-gen",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/avro-gen/",
    "release_url": "https://pypi.org/project/avro-gen/0.1.0b2/",
    "requires_python": null,
    "summary": "Avro record class and specific record reader generator",
    "version": "0.1.0b2"
  },
  "releases": {
    "0.1.0b1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5ee45c4ab18368e2a7101636c44773ff",
          "sha256": "02f61e60c3b14990704b2c0c2c9cf1e2bc1c70ade8980b6889cef20325cc66dc"
        },
        "downloads": 371,
        "filename": "avro_gen-0.1.0b1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "5ee45c4ab18368e2a7101636c44773ff",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 9633,
        "upload_time": "2016-08-07T13:20:09",
        "url": "https://files.pythonhosted.org/packages/09/4d/8a0a4a8125b00a87a66f6ec8196250486d6bde0333c0717ffdbc702364ca/avro_gen-0.1.0b1-py2-none-any.whl"
      }
    ],
    "0.1.0b2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3abd1e97486939785f00f24618477d91",
          "sha256": "fee665f6c63a5491390797c37d05652407aab89eba8031fd3cd624380a2c0255"
        },
        "downloads": 140,
        "filename": "avro_gen-0.1.0b2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "3abd1e97486939785f00f24618477d91",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 15430,
        "upload_time": "2016-08-09T23:55:23",
        "url": "https://files.pythonhosted.org/packages/d7/d4/f89ebb30c89a8e286b398d62c2ee52df62149bd8b46b5a74f67cfdaad358/avro_gen-0.1.0b2-py2-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "3abd1e97486939785f00f24618477d91",
        "sha256": "fee665f6c63a5491390797c37d05652407aab89eba8031fd3cd624380a2c0255"
      },
      "downloads": 140,
      "filename": "avro_gen-0.1.0b2-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "3abd1e97486939785f00f24618477d91",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "size": 15430,
      "upload_time": "2016-08-09T23:55:23",
      "url": "https://files.pythonhosted.org/packages/d7/d4/f89ebb30c89a8e286b398d62c2ee52df62149bd8b46b5a74f67cfdaad358/avro_gen-0.1.0b2-py2-none-any.whl"
    }
  ]
}