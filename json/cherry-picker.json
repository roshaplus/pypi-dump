{
  "info": {
    "author": "Python Core Developers",
    "author_email": "core-workflow@mail.python.org",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Usage (from a cloned CPython directory) ::\n   \n   cherry_picker [--pr-remote REMOTE] [--dry-run] [--status] [--abort/--continue] [--push/--no-push] <commit_sha1> <branches>\n   \n\n.. contents::\n\nAbout\n=====\n\nUse this to backport CPython changes from ``master`` into one or more of the\nmaintenance branches (``3.6``, ``3.5``, ``2.7``).\n\nIt will prefix the commit message with the branch, e.g. ``[3.6]``, and then\nopens up the pull request page.\n\nThis script will become obsolete once the cherry-picking bot is implemented.\n\nTests are to be written using pytest.\n\n\nSetup Info\n==========\n\nRequires Python 3.6.\n\n::\n\n    $ git clone https://github.com/python/core-workflow.git\n    $ cd core-workflow\n    $ python3 -m venv venv\n    $ source venv/bin/activate\n    (venv) $ python -m pip install wheel\n    (venv) $ python -m pip install --upgrade .\n\nSpecify an `upstream` remote in the cloned CPython repository::\n\n   $ git remote add upstream https://github.com/python/cpython.git\n\n\nThe cherry picking script assumes that if an `upstream` remote is defined, then\nit should be used as the source of upstream changes and as the base for\ncherry-pick branches. Otherwise, `origin` is used for that purpose.\n\nBy default, the PR branches used to submit pull requests back to the main\nrepository are pushed to `origin`. If this is incorrect, then the correct\nremote will need be specified using the ``--pr-remote`` option (e.g.\n``--pr-remote pr`` to use a remote named ``pr``).\n\n\nCherry-picking \ud83d\udc0d\ud83c\udf52\u26cf\ufe0f\n=====================\n\n(Setup first! See prev section)\n\nFrom the cloned CPython directory:\n\n::\n\n    (venv) $ cherry_picker [--pr-remote REMOTE] [--dry-run] [--abort/--continue] [--status] [--push/--no-push] <commit_sha1> <branches>\n\n\nCommit sha1\n-----------\n\nThe commit sha1 for cherry-picking is the squashed commit that was merged to\nthe ``master`` branch.  On the merged pull request, scroll to the bottom of the\npage.  Find the event that says something like::\n\n   <coredeveloper> merged commit <commit_sha1> into python:master <sometime> ago.\n\nBy following the link to ``<commit_sha1>``, you will get the full commit hash.\nUse the full commit hash for ``cherry_picker.py``.\n\n\nOptions\n-------\n\n::\n\n    -- dry-run           Dry Run Mode.  Prints out the commands, but not executed.\n    -- pr-remote REMOTE  Specify the git remote to push into.  Default is 'origin'.\n    -- status            Do `git status` in cpython directory.\n\n\nAdditional options::\n\n    -- abort        Abort current cherry-pick and clean up branch\n    -- continue     Continue cherry-pick, push, and clean up branch\n    -- no-push      Changes won't be pushed to remote\n\nDemo\n----\n\nhttps://asciinema.org/a/122815\n\n\nExample\n-------\n\nFor example, to cherry-pick ``6de2b7817f-some-commit-sha1-d064`` into\n``3.5`` and ``3.6``, run the following command from the cloned CPython\ndirectory:\n\n::\n\n    (venv) $ cherry_picker 6de2b7817f-some-commit-sha1-d064 3.5 3.6\n\n\nWhat this will do:\n\n::\n\n    (venv) $ git fetch upstream\n    \n    (venv) $ git checkout -b backport-6de2b78-3.5 upstream/3.5\n    (venv) $ git cherry-pick -x 6de2b7817f-some-commit-sha1-d064 \n    (venv) $ git push origin backport-6de2b78-3.5\n    (venv) $ git checkout master\n    (venv) $ git branch -D backport-6de2b78-3.5\n    \n    (venv) $ git checkout -b backport-6de2b78-3.6 upstream/3.6\n    (venv) $ git cherry-pick -x 6de2b7817f-some-commit-sha1-d064 \n    (venv) $ git push origin backport-6de2b78-3.6\n    (venv) $ git checkout master\n    (venv) $ git branch -D backport-6de2b78-3.6\n\nIn case of merge conflicts or errors, the following message will be displayed::\n\n    Failed to cherry-pick 554626ada769abf82a5dabe6966afa4265acb6a6 into 2.7 :frowning_face:\n    ... Stopping here.\n\n    To continue and resolve the conflict:\n        $ cherry_picker --status  # to find out which files need attention\n        # Fix the conflict\n        $ cherry_picker --status  # should now say 'all conflict fixed'\n        $ cherry_picker --continue\n\n    To abort the cherry-pick and cleanup:\n        $ cherry_picker --abort\n\n\nPassing the ``--dry-run`` option will cause the script to print out all the\nsteps it would execute without actually executing any of them. For example::\n\n    $ cherry_picker --dry-run --pr-remote pr 1e32a1be4a1705e34011770026cb64ada2d340b5 3.6 3.5\n    Dry run requested, listing expected command sequence\n    fetching upstream ...\n    dry_run: git fetch origin\n    Now backporting '1e32a1be4a1705e34011770026cb64ada2d340b5' into '3.6'\n    dry_run: git checkout -b backport-1e32a1b-3.6 origin/3.6\n    dry_run: git cherry-pick -x 1e32a1be4a1705e34011770026cb64ada2d340b5\n    dry_run: git push pr backport-1e32a1b-3.6\n    dry_run: Create new PR: https://github.com/python/cpython/compare/3.6...ncoghlan:backport-1e32a1b-3.6?expand=1\n    dry_run: git checkout master\n    dry_run: git branch -D backport-1e32a1b-3.6\n    Now backporting '1e32a1be4a1705e34011770026cb64ada2d340b5' into '3.5'\n    dry_run: git checkout -b backport-1e32a1b-3.5 origin/3.5\n    dry_run: git cherry-pick -x 1e32a1be4a1705e34011770026cb64ada2d340b5\n    dry_run: git push pr backport-1e32a1b-3.5\n    dry_run: Create new PR: https://github.com/python/cpython/compare/3.5...ncoghlan:backport-1e32a1b-3.5?expand=1\n    dry_run: git checkout master\n    dry_run: git branch -D backport-1e32a1b-3.5\n\n`--pr-remote` option\n--------------------\n\nThis will generate pull requests through a remote other than ``origin``\n(e.g. ``pr``)\n\n\n`--status` option\n-----------------\n\nThis will do `git status` for the CPython directory.\n\n`--abort` option\n----------------\n\nCancels the current cherry-pick and cleans up the cherry-pick branch.\n\n`--continue` option\n-------------------\n\nContinues the current cherry-pick, commits, pushes the current branch to origin,\nopens the PR page, and cleans up the branch.\n\n`--no-push` option\n------------------\n\nChanges won't be pushed to remote.  This allows you to test and make additional\nchanges.  Once you're satisfied with local changes, use ``--continue`` to complete\nthe backport, or ``--abort`` to cancel and clean up the branch.  You can also\ncherry-pick additional commits, by::\n\n   $ git cherry-pick -x <commit_sha1>\n\n\nCreating Pull Requests\n======================\n\nWhen a cherry-pick was applied successfully, this script will open up a browser\ntab that points to the pull request creation page.\n\nThe url of the pull request page looks similar to the following::\n\n   https://github.com/python/cpython/compare/3.5...<username>:backport-6de2b78-3.5?expand=1\n\n\n1. Press the ``Create Pull Request`` button.\n\n2. Remove the ``needs backport to ...`` label from the original pull request\n   against ``master``.\n\n\nRunning Tests\n=============\n\nInstall pytest: ``pip install -U pytest``\n\n::\n\n    $ pytest test.py",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/python/core-workflow",
    "keywords": "",
    "license": "Apache",
    "maintainer": "",
    "maintainer_email": "",
    "name": "cherry-picker",
    "platform": "",
    "project_url": "https://pypi.org/project/cherry-picker/",
    "release_url": "https://pypi.org/project/cherry-picker/0.0.2/",
    "requires_python": "",
    "summary": "backport cpython changes from master to maintenance branches",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "952aa601d10018a6e2efa101b9ededb9",
          "sha256": "c8a80d300f7acc5f9723b7de2492594953305afde91f4cded93ffd78527398e1"
        },
        "downloads": 0,
        "filename": "cherry_picker-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "952aa601d10018a6e2efa101b9ededb9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7326,
        "upload_time": "2017-06-17T18:23:24",
        "url": "https://files.pythonhosted.org/packages/a9/b8/f9b7793d832fbd0caa1ca5d014fe4b9cf5f1fff26d2bcfaae1357816a9af/cherry_picker-0.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "952aa601d10018a6e2efa101b9ededb9",
        "sha256": "c8a80d300f7acc5f9723b7de2492594953305afde91f4cded93ffd78527398e1"
      },
      "downloads": 0,
      "filename": "cherry_picker-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "952aa601d10018a6e2efa101b9ededb9",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7326,
      "upload_time": "2017-06-17T18:23:24",
      "url": "https://files.pythonhosted.org/packages/a9/b8/f9b7793d832fbd0caa1ca5d014fe4b9cf5f1fff26d2bcfaae1357816a9af/cherry_picker-0.0.2.tar.gz"
    }
  ]
}