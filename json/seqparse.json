{
  "info": {
    "author": "Geoff Harvey",
    "author_email": "hoafaloaf@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing"
    ],
    "description": "==================================================\nseqparse: A nifty way to list your file sequences.\n==================================================\n\n|Pypi Package| |Build Status| |Coverage Status| |Code Health| |License|\n\nOverview\n--------\n\nThe seqparse module may be used to ...\n\n-  Scan specified paths for file sequences and \"singletons,\"\n-  Construct frame and file sequence from supplied values, and\n-  Query disk for overall footprint of tracked files.\n\nThe module also comes supplied with a simple tool named ``seqls`` that\nallows the user to scan multiple locations for file sequences and\nsingletons from the command line.\n\nIf you're curious about the **regular expressions** used to determine\nwhat is and isn't a valid file sequence, take a look at the\n``seqparse.regex`` module.\n\nFrame Sequences\n~~~~~~~~~~~~~~~\n\nFrame sequences are broken down into comma-separated chunks of the\nformat ``first frame`` **-** ``last frame`` **x** ``step`` where the following rules\napply:\n\n-  Frame numbers can be zero-padded,\n-  Frame step (increment) is always a positive integer,\n-  The number of digits in a frame may exceed the padding of a sequence,\n   eg ``001,010,100,1000``,\n-  Frame chunks with a specified step will **always** consist of three\n   or more frames.\n\nExamples of proper frame sequences:\n\n-  Non-padded sequence, frames == **(1, 3, 5, 7)**: ``1-7x2``\n-  Four-padded sequence, frames == **(1, 3, 5, 7)**: ``0001-0007x2``\n-  Three-padded sequence, frames == **(11, 13)**: ``011,013``\n-  Two-padded sequence **(1, 3, 5, 7, 11, 13, 102)**:\n   ``01-07x2,11,13,102``\n\nFile Sequences\n~~~~~~~~~~~~~~\n\nMembers of a file sequence can be one of two formats:\n\n-  ``base_name``\\ **.**\\ ``frame_sequence``.\\ ``file_extension``\n-  ``frame_sequence``.\\ ``file_extension``\n\nExamples of valid file sequences:\n\n-  ``my_little_pony.1-7x2.exr``\n-  ``/maya/is/very/strange/01-07x2,11,13,102.tif``\n-  ``C:\\this\\even\\works\\in\\windows\\billy.0001-0095.tga``\n\nseqls\n-----\n\n``seqls`` is the command line interface for the ``seqparse`` module.\n\n::\n\n    usage: seqls [-h] [-a] [-H] [-l] [--maxdepth MAX_LEVELS]\n                 [--mindepth MIN_LEVELS] [-m] [-S]\n                 [search_path [search_path ...]]\n\n    Command line tool for listing file sequences. Upon installation of the package\n    this script will be accessable via ``seqls`` command on the command line of your\n    choice.\n\n    positional arguments:\n      search_path           Paths that you'd like to search for file sequences.\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -a, --all             Do not ignore entries starting with '.'.\n      -H, --human-readable  with -l/--long, print sizes in human readable format\n                            (e.g., 1K 234M 2G).\n      -l, --long            Use a long listing format.\n      --maxdepth MAX_LEVELS\n                            Descend at most levels (a non-negative integer)\n                            MAX_LEVELS of directories below the starting-points.\n                            '--maxdepth 0' means scan the starting-points\n                            themselves.\n      --mindepth MIN_LEVELS\n                            Do not scan at levels less than MIN_LEVELS (a non-\n                            negative integer). '--mindepth 1' means scan all\n                            levels except the starting-points.\n      -m, --missing         Whether to invert output file sequences to only report\n                            the missing frames.\n      -S, --seqs-only       Whether to filter out all non-sequence files.\n      -v, --version         Print the version and exit.\n\nMost of the functionality is self-explanatory, but the ``-m/--missing``\noption is probably the most useful to users generating large sequences\nof frames on multiple servers.\n\nSay you're creating imagery for the latest superhero movie -- and your\nrender job crashed some time in the early morning.\n\nYou're expecting to see something like this ...\n\n::\n\n    superhero_cape_v0001.0001-1000.exr\n\n... but not everything rendered.\n\n::\n\n    $ cd /renders/superhero_cape_v0001\n    $ seqls\n    superhero_cape_v0001.0001-0500,0600-0800,0990-1000x5.exr\n\nYou can easily figure out the missing frames, though, with the\n``--missing`` option:\n\n::\n\n    $ seqls --missing\n    superhero_cape_v0001.0501-0599,0801,0991-0994,0996-0999.exr\n\nThe module\n----------\n\nUsing the module is fairly simple:\n\n1. Instantiate a parser (``Seqparse`` instance).\n2. Add files to the parser either\n\n   -  via the ``add_file`` method, or\n   -  by scanning a list of locations on disk via the ``scan_path``\n      method.\n\n3. Create an **iterator** for all file sequences (``FileSequence``\n   instances) and singletons (``File`` instances).\n4. ...\n5. Profit.\n\nExample (taken from the ``Seqparse`` docstring):\n\n::\n\n    With the following file structure ...\n\n        test_dir/\n            TEST_DIR.0001.tif\n            TEST_DIR.0002.tif\n            TEST_DIR.0003.tif\n            TEST_DIR.0004.tif\n            TEST_DIR.0010.tif\n            SINGLETON.jpg\n\n    >>> from seqparse.seqparse import Seqparse\n    >>> parser = Seqparse()\n    >>> parser.scan_path(\"test_dir\")\n    >>> for item in parser.output():\n    ...     print str(item)\n    ...\n    test_dir/TEST_DIR.0001-0004,0010.tif\n    test_dir/SINGLETON.jpg\n    >>> for item in parser.output(seqs_only=True):\n    ...     print str(item)\n    ...\n    test_dir/TEST_DIR.0001-0004,0010.tif\n    >>> for item in parser.output(missing=True):\n    ...     print str(item)\n    ...\n    test_dir/TEST_DIR.0005-0009.tif\n\nUseful Classes\n~~~~~~~~~~~~~~\n\n``FrameSequence`` instances are pretty useful on their own.\n\n::\n\n    >>> from seqparse import get_sequence\n    >>> seq = get_sequence([1, 2, 3, 4, 8])\n    >>> print repr(seq)\n    FrameSequence(pad=4, frames=set([1, 2, 3, 4, 8]))\n    >>> print seq\n    0001-0005,0008\n    >>> for frame in seq:\n    ...     print frame\n    ...\n    0001\n    0002\n    0003\n    0004\n    0010\n    >>> for frame in seq.invert():\n    ...     print frame\n    ...\n    0005\n    0006\n    0007\n\nAs are ``FileSequence`` instances (which behave similarly; check class\ndocumentation for details).\n\nRoadmap\n-------\n\n1. v0.7.0\n\n   1. Get around to setting up full coverage for the container classes.\n\n2. v1.0.0\n\n   1. Release.\n\nCurrent Tasks\n-------------\n\n1. Add flag to ``Seqparse`` so that it knows when it's supposed to test if\n   files actually exist (ie, when it's launched from ``seqls``).\n2. Add output testing for ``FileSequenceContainer`` instances.\n\nFinal Notes\n-----------\n\nThere're still a number of things I'd like to do to make the class\ninterfaces a bit more standardized (see my goals for the **v0.7.0**\nrelease above), but aside from that I'm moderately happy with this code.\n\nLemme know if you have any requests/complaints/suggestions!\n\n.. |Build Status| image:: https://travis-ci.org/hoafaloaf/seqparse.svg?branch=master\n   :target: https://travis-ci.org/hoafaloaf/seqparse\n.. |Coverage Status| image:: https://coveralls.io/repos/github/hoafaloaf/seqparse/badge.svg\n   :target: https://coveralls.io/github/hoafaloaf/seqparse\n.. |Code Health| image:: https://landscape.io/github/hoafaloaf/seqparse/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/hoafaloaf/seqparse\n.. |License| image:: https://img.shields.io/github/license/mashape/apistatus.svg\n.. |PyPi Package| image:: https://badge.fury.io/py/seqparse.svg\n   :target: https://badge.fury.io/py/seqparse",
    "docs_url": "https://pythonhosted.org/seqparse/",
    "download_url": "https://github.com/hoafaloaf/seqparse/archive/v0.7.0.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/hoafaloaf/seqparse",
    "keywords": "command-line,file,sequence",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "seqparse",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/seqparse/",
    "release_url": "https://pypi.org/project/seqparse/0.7.0/",
    "requires_python": null,
    "summary": "A nifty way to parse your file sequences.",
    "version": "0.7.0"
  },
  "releases": {
    "0.6.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "df8bdaf951a2eb63dc7bf3ff6757acd6",
          "sha256": "abf02c323ce11f0f48c0283c061ea7bdc173eca7a825b1d6d37353733a75edf7"
        },
        "downloads": 0,
        "filename": "seqparse-0.6.4-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "df8bdaf951a2eb63dc7bf3ff6757acd6",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 27078,
        "upload_time": "2017-04-08T23:30:05",
        "url": "https://files.pythonhosted.org/packages/76/57/0aa6213ce9c9cf1a71328853772d7295a3486bc9a044d02191c29348d75f/seqparse-0.6.4-py2.py3-none-any.whl"
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "133272eac6df3a619951622cf8d7af39",
          "sha256": "80038cfe5d0a5641ddc87072fb069e9cebdb7fc788c41c4477967ce9c1fc65b0"
        },
        "downloads": 0,
        "filename": "seqparse-0.7.0-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "133272eac6df3a619951622cf8d7af39",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 27735,
        "upload_time": "2017-04-28T18:22:44",
        "url": "https://files.pythonhosted.org/packages/39/49/04c0c2c7cf8a505b1fa86a4551f0a24d05713411bdb994217470d00dec70/seqparse-0.7.0-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "133272eac6df3a619951622cf8d7af39",
        "sha256": "80038cfe5d0a5641ddc87072fb069e9cebdb7fc788c41c4477967ce9c1fc65b0"
      },
      "downloads": 0,
      "filename": "seqparse-0.7.0-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "133272eac6df3a619951622cf8d7af39",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 27735,
      "upload_time": "2017-04-28T18:22:44",
      "url": "https://files.pythonhosted.org/packages/39/49/04c0c2c7cf8a505b1fa86a4551f0a24d05713411bdb994217470d00dec70/seqparse-0.7.0-py2.py3-none-any.whl"
    }
  ]
}