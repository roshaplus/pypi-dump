{
  "info": {
    "author": "Valentin Lab",
    "author_email": "valentin.lab@kalysto.org",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "=================================\nSHYAML: YAML for the command line\n=================================\n\n.. image:: https://pypip.in/v/shyaml/badge.png\n    :target: https://pypi.python.org/pypi/shyaml\n\n.. image:: https://secure.travis-ci.org/0k/shyaml.png?branch=master\n    :target: http://travis-ci.org/0k/shyaml\n\n\nDescription\n===========\n\nSimple scripts that allow read access to YAML files through command line.\n\nThis can be handy, if you want to get access to YAML data in your shell\nscripts.\n\nThis scripts supports only read access and it might not support all\nthe subtilties of YAML specification. But it should support some handy\nbasic query of YAML file.\n\n\nInstallation\n============\n\nYou don't need to download the GIT version of the code as ``shyaml`` is\navailable on the PyPI. So you should be able to run::\n\n    pip install shyaml\n\nIf you have downloaded the GIT sources, then you could add install\nthe current version via traditional::\n\n    python setup.py install\n\nAnd if you don't have the GIT sources but would like to get the latest\nmaster or branch from github, you could also::\n\n    pip install git+https://github.com/0k/shyaml\n\nOr even select a specific revision (branch/tag/commit)::\n\n    pip install git+https://github.com/0k/shyaml@master\n\n\nUsage\n=====\n\n``shyaml`` takes its YAML input file from standard input ONLY. So there are\nsome sample routine:\n\nLet's create a sample yaml file::\n\n    $ cat <<EOF > test.yaml\n    name: \"MyName !!\"\n    subvalue:\n        how-much: 1.1\n        how-many: 2\n        things:\n            - first\n            - second\n            - third\n        maintainer: \"Valentin Lab\"\n        description: |\n            Multiline description:\n            Line 1\n            Line 2\n    subvalue.how-much: 1.2\n    subvalue.how-much\\more: 1.3\n    subvalue.how-much\\.more: 1.4\n    EOF\n\n\nGeneral browsing struct and displaying simple values\n----------------------------------------------------\n\nSimple query of simple attribute::\n\n    $ cat test.yaml | shyaml get-value name\n    MyName !!\n\nQuery nested attributes by using '.' between key labels::\n\n    $ cat test.yaml | shyaml get-value subvalue.how-much\n    1.1\n\nGet type of attributes::\n\n    $ cat test.yaml | shyaml get-type name\n    str\n    $ cat test.yaml | shyaml get-type subvalue.how-much\n    float\n\n\nParse structure\n---------------\n\nGet sub YAML from a structure attribute::\n\n    $ cat test.yaml | shyaml get-type subvalue\n    struct\n    $ cat test.yaml | shyaml get-value subvalue\n    description: 'Multiline description:\n\n      Line 1\n\n      Line 2\n\n      '\n    how-many: 2\n    how-much: 1.1\n    maintainer: Valentin Lab\n    things:\n    - first\n    - second\n    - third\n\nIteration through keys only::\n\n    $ cat test.yaml | shyaml keys\n    subvalue.how-much\n    subvalue\n    subvalue.how-much\\.more\n    name\n    subvalue.how-much\\more\n\nIteration through keys only (\\0 terminated strings)::\n\n    $ cat test.yaml | shyaml keys-0 subvalue | xargs -0 -n 1 echo \"VALUE:\"\n    VALUE: how-much\n    VALUE: things\n    VALUE: how-many\n    VALUE: maintainer\n    VALUE: description\n\nIteration through values only (\\0 terminated string highly recommended)::\n\n    $ cat test.yaml | shyaml values-0 subvalue |\n      while read -r -d $'\\0' value; do\n          echo \"RECEIVED: '$value'\"\n      done\n    RECEIVED: '1.1'\n    RECEIVED: '- first\n    - second\n    - third'\n    RECEIVED: '2'\n    RECEIVED: 'Valentin Lab'\n    RECEIVED: 'Multiline description:\n    Line 1\n    Line 2'\n\nIteration through keys and values (\\0 terminated string highly recommended)::\n\n    $ read-0() {\n        while [ \"$1\" ]; do\n            IFS=$'\\0' read -r -d '' \"$1\" || return 1\n            shift\n        done\n      }\n\n    $ cat test.yaml | shyaml key-values-0 subvalue |\n      while read-0 key value; do\n          echo \"KEY: '$key'\"\n          echo \"VALUE: '$value'\"\n          echo\n      done\n    KEY: 'how-much'\n    VALUE: '1.1'\n\n    KEY: 'things'\n    VALUE: '- first\n    - second\n    - third\n    '\n\n    KEY: 'how-many'\n    VALUE: '2'\n\n    KEY: 'maintainer'\n    VALUE: 'Valentin Lab'\n\n    KEY: 'description'\n    VALUE: 'Multiline description:\n    Line 1\n    Line 2\n    '\n\nNotice, that you'll get the same result using\n``get-values``. ``get-values`` will support sequences and struct,\nand ``key-values`` support only struct. (for a complete table of\nwhich function support what you can look at the usage line)\n\nParse sequence\n--------------\n\nQuery a sequence with ``get-value``::\n\n   $ cat test.yaml | shyaml get-value subvalue.things\n   - first\n   - second\n   - third\n   $ cat test.yaml | shyaml get-value subvalue.things.0\n   first\n   $ cat test.yaml | shyaml get-value subvalue.things.-1\n   third\n   $ cat test.yaml | shyaml get-value subvalue.things.5\n   Error: invalid path 'subvalue.things.5', index 5 is out of range (3 elements in sequence).\n\nMore usefull, parse a list in one go with ``get-values``::\n\n   $ cat test.yaml | shyaml get-values subvalue.things\n   first\n   second\n   third\n\nNote that the action is called ``get-values``, and that output is separated by\n``\\n`` chars, this can bring havoc if you are parsing values containing this\ncharacter. Hopefully, ``shyaml`` has a ``get-values-0`` to terminate strings by\n``\\0`` char, which allows complete support of any type of values, including\nYAML.  ``get-values`` outputs key and values for ``struct`` types and only\nvalues for ``sequence`` types::\n\n    $ cat test.yaml | shyaml get-values-0 subvalue |\n      while IFS='' read -r -d '' key &&\n            IFS='' read -r -d '' value; do\n          echo \"'$key' -> '$value'\"\n      done\n    'how-much' -> '1.1'\n    'things' -> '- first\n    - second\n    - third\n    '\n    'how-many' -> '2'\n    'maintainer' -> 'Valentin Lab'\n    'description' -> 'Multiline description:\n    Line 1\n    Line 2\n    '\n\nPlease note that, if ``get-values{,-0}`` actually works on ``struct``,\nit's maybe more explicit to use the equivalent ``key-values{,0}``. It\nshould be noted that ``key-values{,0}`` is not completly equivalent as\nit is meant to be used with ``struct`` only and will complain if not.\n\nYou should also notice that values that are displayed are YAML compatible. So\nif they are complex, you can re-use ``shyaml`` on them to parse their content.\n\n\nKeys containing '.'\n-------------------\n\nUse and ``\\\\`` to access keys with ``\\`` and ``\\.`` to access keys\nwith literal ``.`` in them. Just be mindful of shell escaping (example\nuses single quotes)::\n\n    $ cat test.yaml | shyaml get-value 'subvalue\\.how-much'\n    1.2\n    $ cat test.yaml | shyaml get-value 'subvalue\\.how-much\\\\more'\n    1.3\n    $ cat test.yaml | shyaml get-value 'subvalue\\.how-much\\\\.more' default\n    default\n\nThis last one didn't escape correctly the last ``.``, this is the\ncorrect version::\n\n    $ cat test.yaml | shyaml get-value 'subvalue\\.how-much\\\\\\.more' default\n    1.4\n\n\nempty string keys\n-----------------\n\nYep, ``shyaml`` supports empty stringed keys. You might never have use\nfor this one, but it's in YAML specification. So ``shyaml`` supports\nit::\n\n    $ cat <<EOF > test.yaml\n    empty-sub-key:\n        \"\":\n           a: foo\n           \"\": bar\n    \"\": wiz\n    EOF\n\n    $ cat test.yaml | shyaml get-value empty-sub-key..\n    bar\n    $ cat test.yaml | shyaml get-value ''\n    wiz\n\nPlease notice that one empty string is different than no string at all::\n\n    $ cat <<EOF > test.yaml\n    \"\":\n       a: foo\n       b: bar\n    \"x\": wiz\n    EOF\n    $ cat test.yaml | shyaml keys\n\n    x\n    $ cat test.yaml | shyaml keys ''\n    a\n    b\n\nThe first asks for keys of the root YAML, the second asks for keys of the\ncontent of the empty string named element located in the root YAML.\n\n\nDefault Value\n-------------\n\nThere is a third argument on the command line of shyaml which is the\nDEFAULT argument. If the given KEY was not found in the YAML\nstructure, then ``shyaml`` would return what you provided as DEFAULT.\n\nAs of version < 0.3, this argument was defaulted to the empty\nstring. For all version above 0.3 (included), if not provided, then\nan error message will be printed::\n\n   $ echo \"a: 3\" | shyaml get-value a mydefault\n   3\n\n   $ echo \"a: 3\" | shyaml get-value b mydefault\n   mydefault\n\n   $ echo \"a: 3\" | shyaml get-value b\n   Error: invalid path 'b', missing key 'b' in struct.\n\n\nYou can emulate pre v0.3 behavior by specifying explicitely an empty\nstring as third argument::\n\n   $ echo \"a: 3\" | shyaml get-value b ''\n   $\n\n\nOrdered mappings\n----------------\n\nCurrently, using ``shyaml`` in a shell script involves happily taking\nYAML inputs and outputting YAML outputs that will further be processed.\n\nAnd this works very well.\n\nBefore version ``0.4.0``, ``shyaml`` would boldly re-order (sorting them\nalphabetically) the keys in mappings. If this should be considered\nharmless per specification (mappings are indeed supposed to be\nunordered, this means order does not matter), in practical, YAML users\ncould feel wronged by ``shyaml`` when there YAML got mangled and they\nwanted to give a meaning to the basic YAML mapping.\n\nWho am I to forbid such usage of YAML mappings ? So starting from\nversion ``0.4.0``, ``shyaml`` will happily keep the order of your\nmappings::\n\n    cat <<EOF > /tmp/test.yml\n    mapping:\n      a: 1\n      c: 2\n      b: 3\n    EOF\n\nFor ``shyaml`` version before ``0.4.0``::\n\n    $ shyaml get-value mapping < test.yml\n    a: 1\n    b: 3\n    c: 2\n\nFor ``shyaml`` version including and after ``0.4.0``::\n\n    $ shyaml get-value mapping < test.yml\n    a: 1\n    c: 2\n    b: 3\n\n\nStrict YAML for further processing\n----------------------------------\n\nProcessing yaml can be done recursively and extensively through\nusing the output of ``shyaml`` into ``shyaml``. Most of its output\nis itself YAML. Most ? Well, for ease of use, literal keys (string, numbers)\nare outputed directly without YAML quotes, which is often convenient.\n\nBut this has the consequence of introducing inconsistent behavior. So\nwhen processing YAML coming out of shyaml, you should probably think\nabout using the ``--yaml`` (or ``-y``) option to output only strict YAML.\n\nWith the drawback that when you'll want to output string, you'll need to\ncall a last time ``shyaml get-value`` to explicitely unquote the YAML.\n\n\nUsage string\n------------\n\nA quick reminder of what is available::\n\n    $ shyaml --help\n    Parses and output chosen subpart or values from YAML input.\n    It reads YAML in stdin and will output on stdout it's return value.\n\n    Usage:\n\n        %(exname)s [-y|--yaml] ACTION KEY [DEFAULT]\n\n    Options:\n\n        -y, --yaml\n                  Output only YAML safe value, more precisely, even\n                  literal values will be YAML quoted. This behavior\n                  is required if you want to output YAML subparts and\n                  further process it. If you know you have are dealing\n                  with safe literal value, then you don't need this.\n                  (Default: no safe YAML output)\n\n        ACTION    Depending on the type of data you've targetted\n                  thanks to the KEY, ACTION can be:\n\n                  These ACTIONs applies to any YAML type:\n\n                    get-type          ## returns a short string\n                    get-value         ## returns YAML\n\n                  This ACTION applies to 'sequence' and 'struct' YAML type:\n\n                    get-values{,-0}   ## return list of YAML\n\n                  These ACTION applies to 'struct' YAML type:\n\n                    keys{,-0}         ## return list of YAML\n                    values{,-0}       ## return list of YAML\n                    key-values,{,-0}  ## return list of YAML\n\n                  Note that any value returned is returned on stdout, and\n                  when returning ``list of YAML``, it'll be separated by\n                  ``\\n`` or ``NUL`` char depending of you've used the\n                  ``-0`` suffixed ACTION.\n\n        KEY       Identifier to browse and target subvalues into YAML\n                  structure. Use ``.`` to parse a subvalue. If you need\n                  to use a literal ``.`` or ``\\``, use ``\\`` to quote it.\n\n                  Use struct keyword to browse ``struct`` YAML data and use\n                  integers to browse ``sequence`` YAML data.\n\n        DEFAULT   if not provided and given KEY do not match any value in\n                  the provided YAML, then DEFAULT will be returned. If no\n                  default is provided and the KEY do not match any value\n                  in the provided YAML, shyaml will fail with an error\n                  message.\n\n    Examples:\n\n         ## get last grocery\n         cat recipe.yaml       | shyaml get-value groceries.-1\n\n         ## get all words of my french dictionary\n         cat dictionaries.yaml | shyaml keys-0 french.dictionary\n\n         ## get YAML config part of 'myhost'\n         cat hosts_config.yaml | shyaml get-value cfgs.myhost\n\n\nContributing\n============\n\nAny suggestion or issue is welcome. Push request are very welcome,\nplease check out the guidelines.\n\n\nPush Request Guidelines\n-----------------------\n\nYou can send any code. I'll look at it and will integrate it myself in\nthe code base and leave you as the author. This process can take time and\nit'll take less time if you follow the following guidelines:\n\n- check your code with PEP8 or pylint. Try to stick to 80 columns wide.\n- separate your commits per smallest concern.\n- each commit should pass the tests (to allow easy bisect)\n- each functionality/bugfix commit should contain the code, tests,\n  and doc.\n- prior minor commit with typographic or code cosmetic changes are\n  very welcome. These should be tagged in their commit summary with\n  ``!minor``.\n- the commit message should follow gitchangelog rules (check the git\n  log to get examples)\n- if the commit fixes an issue or finished the implementation of a\n  feature, please mention it in the summary.\n\nIf you have some questions about guidelines which is not answered here,\nplease check the current ``git log``, you might find previous commit that\nwould show you how to deal with your issue.\n\n\nLicense\n=======\n\nCopyright (c) 2015 Valentin Lab.\n\nLicensed under the `BSD License`_.\n\n.. _BSD License: http://raw.github.com/0k/shyaml/master/LICENSE\n\nChangelog\n=========\n\n\n0.5.0 (2017-03-23)\n------------------\n\nNew\n~~~\n- Introduce ``-y`` option to force full yaml output. [Valentin Lab]\n\n  By default, output of literal string where directly printed unquoted and\n  useable. If this is very useful, there are many cases where this is not\n  consistent and is ambiguous, especially when this string is itself a\n  YAML representation.\n\n  This could actually lead to subtle bugs occuring when re-using\n  ``shyaml`` output for further parsing.\n\n  So if you want unquoted literal types to further process these elements,\n  use ``-y``. If you expect a string and wan't it plain raw, avoid ``-y``.\n\n\n\n0.4.2 (2017-02-08)\n------------------\n\nFix\n~~~\n- ``<<:`` YAML merging facility support. [Valentin Lab]\n\n\n0.4.1 (2016-08-29)\n------------------\n\nFix\n~~~\n- On python2, unicode strings would be displayed literaly (fixes #26).\n  [Valentin Lab]\n\n  ``str`` is not the correct type to match all type of strings in python\n  2. So unicode strings (usually produced thanks to accentuated\n  characters) would be printed quoted (the python representation).\n\n\n\n0.4.0 (2016-01-11)\n------------------\n\nNew\n~~~\n- Avoid reordering mapping keys in the output. [Valentin Lab]\n\n  Several commands from ``shyaml`` will output YAML themselves. But in the\n  process, the whole content is parsed and re-dumped. This can lead to\n  differences with the original inputs. The ordering of keys can be\n  annoying in some use cases, even if, well mappings should not be\n  ordered, these are ordered by the sequential nature of a file, and using\n  'omap' is often tedious. ``shyaml`` now keep the original order the keys\n  were met.\n\n\n\n0.3.4 (2015-03-06)\n------------------\n\nNew\n~~~\n- Added a nice ``--help`` doc. [Valentin Lab]\n- Added ``key-values{,-0}`` argument to get key and values in one go.\n  [Valentin Lab]\n- Error is casted if no default specified and the key is not existent.\n  [Valentin Lab]\n\nChanges\n~~~~~~~\n- Be more informative in some key related error message. (fixed #7)\n  [Valentin Lab]\n\n\n0.2.2 (2014-03-19)\n------------------\n\nFix\n~~~\n- No argument at all was treated as one empty string argument. Thx Yassa\n  Bb. (fixes #6) [Valentin Lab]\n\n\n0.2.1 (2013-11-23)\n------------------\n\nNew\n~~~\n- Python3 support. [Valentin Lab]\n\nFix\n~~~\n- Keys can now be empty or contains dots ``.`` if they are properly\n  escaped (fixes #5, thanks to Daniel Giribet) [Daniel Giribet]\n\n\n0.2.0 (2013-05-03)\n------------------\n\nNew\n~~~\n- Support for iteration in sequence and struct in one go. [Valentin Lab]\n\nFix\n~~~\n- Forgot to mention ``./autogen.sh`` execution when getting the code\n  from git, and be more clear about other means of installation.\n  [Valentin Lab]\n\n\n0.1.3 (2013-03-29)\n------------------\n\nFix\n~~~\n- Removed the spurious line feed at the end of any ``shyaml`` output.\n  [Valentin Lab]\n- Support querying for... nothing. Which now returns the whole input\n  YAML. [Valentin Lab]\n\n  Before this fix, you couldn't ask for ``shyaml get-value`` alone, even if it\n  makes sense but is completely useless as it returns the whole YAML input.\n\n\n\n0.1.2 (2013-03-23)\n------------------\n\nNew\n~~~\n- Support for list indexes (see README.rst). [Valentin Lab]\n- Catch exceptions when parsing structure and output a clean error\n  message. [Valentin Lab]\n\n\n0.1.1 (2013-02-27)\n------------------\n\nChanges\n~~~~~~~\n- Some minor enhancements, and an \"Install\" section. [Valentin Lab]\n\n\n0.1.0 (2013-02-27)\n------------------\n- First import. [Valentin Lab]\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/0k/shyaml",
    "keywords": "",
    "license": "BSD 3-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "shyaml",
    "platform": "",
    "project_url": "https://pypi.org/project/shyaml/",
    "release_url": "https://pypi.org/project/shyaml/0.5.0/",
    "requires_python": "",
    "summary": "YAML for command line",
    "version": "0.5.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f9f11b6b45e0d9d8417413742e729cb1",
          "sha256": "624e3a0c8f339a6d850a173a862b5c08a646198b84cbf6069bf6491d7351e721"
        },
        "downloads": 2190,
        "filename": "shyaml-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f9f11b6b45e0d9d8417413742e729cb1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2572,
        "upload_time": "2013-02-27T12:22:12",
        "url": "https://files.pythonhosted.org/packages/3f/67/cc8868a4b249a9b36fc3b183606e6863266be4cd59b5f258e9a4d6c06e8f/shyaml-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "feecdba714bfdf2d82965f790806e59b",
          "sha256": "ff2fcb52e89a64d549be0170fab41d9ec5ec28e9b1e8c0328ab0b652933fa8c9"
        },
        "downloads": 2195,
        "filename": "shyaml-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "feecdba714bfdf2d82965f790806e59b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 2722,
        "upload_time": "2013-02-27T13:34:38",
        "url": "https://files.pythonhosted.org/packages/f9/a2/efe245b02836f5a572158d9a92accccc476c13d6fb9aa3c366da336cabc3/shyaml-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e162646e4ecd45e809444b14a8e150f8",
          "sha256": "b0a80617303157c80bcbb48cf1ebfe5206d05de97ed2e6b1ef232fd35c46a3e3"
        },
        "downloads": 2116,
        "filename": "shyaml-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e162646e4ecd45e809444b14a8e150f8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3106,
        "upload_time": "2013-03-23T10:36:37",
        "url": "https://files.pythonhosted.org/packages/86/bf/4ae4c2679528890d28269b02f6067d1a525b573023a7eee60e632e1a6616/shyaml-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6783ac73e4da96737f3c6bda6511579b",
          "sha256": "1563736dd02b21520c80a0acd978b6efba81868d514987a082d79378154644c2"
        },
        "downloads": 1953,
        "filename": "shyaml-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "6783ac73e4da96737f3c6bda6511579b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4508,
        "upload_time": "2013-05-02T08:29:29",
        "url": "https://files.pythonhosted.org/packages/9a/10/1a92960f17d1f4f50a958f32d0bc6e72ca0eb6775fc55514959f4f634b15/shyaml-0.1.3.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d5b136fd54d86bca0bd04b80e21cd095",
          "sha256": "cf9aa54c452ca8f2ed8e6f0ee910615e926e374c244267b547a4cc713b03fe95"
        },
        "downloads": 3029,
        "filename": "shyaml-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d5b136fd54d86bca0bd04b80e21cd095",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5964,
        "upload_time": "2013-05-03T12:10:17",
        "url": "https://files.pythonhosted.org/packages/86/5c/2c0a4f104581dfe644786a3f65a25a7a973ff708e1f99b081c4ab5d3f286/shyaml-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "15a24b1cbd46650185bdcb42b7f57c47",
          "sha256": "953cdd5b16d7a8b77831364e262123afb049a2277540f6399a3110e6f0e92314"
        },
        "downloads": 3731,
        "filename": "shyaml-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "15a24b1cbd46650185bdcb42b7f57c47",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7663,
        "upload_time": "2013-11-23T07:52:47",
        "url": "https://files.pythonhosted.org/packages/67/c4/da928ea5fcc2b75a30c23111ce3cb432e14a46edeb709828bcad55f91c99/shyaml-0.2.1.tar.gz"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1004b91b2f62b65342339014642d5fed",
          "sha256": "12c79cd057cb13a6fe350e31f9f2399c61d4bef4045cd1889910eb4a466e5c64"
        },
        "downloads": 15834,
        "filename": "shyaml-0.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1004b91b2f62b65342339014642d5fed",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6982,
        "upload_time": "2014-03-19T08:54:28",
        "url": "https://files.pythonhosted.org/packages/b8/f1/624ffacc96de89796df873ca2b2a4a49006edd721f0df04be2ebc05a0b64/shyaml-0.2.2.tar.gz"
      }
    ],
    "0.3.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f3d899d3e0696e5afef93d3c9395b5fe",
          "sha256": "c9a3c664228a52b4457e0fb5cd2877c4d3d99ff3b1e853d3dbbc680367cec4e5"
        },
        "downloads": 21561,
        "filename": "shyaml-0.3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f3d899d3e0696e5afef93d3c9395b5fe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13757,
        "upload_time": "2015-03-06T03:22:49",
        "url": "https://files.pythonhosted.org/packages/03/db/235f6bdbe1de94d97492560c1cce56a2e84ec06b9820f75a73a89c5b3057/shyaml-0.3.4.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "39fc0889f9cbde95f594a0c9c40e1f98",
          "sha256": "839e560d0746c4896b5c0947f2f9509b3c6e59ec47d878d28253101b3646928e"
        },
        "downloads": 10312,
        "filename": "shyaml-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "39fc0889f9cbde95f594a0c9c40e1f98",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15694,
        "upload_time": "2016-01-12T07:41:15",
        "url": "https://files.pythonhosted.org/packages/fc/70/03a730e53ce52bea3197d85b0f53a9bb861eb27431827025a26a3a0ea5c4/shyaml-0.4.0.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5cc41a1d50c1ff8ad423fe8bc395c6c9",
          "sha256": "a1535c25bf0058563e03ea8cbad8c4dc755ed231e6a9f3f584982994f19eae59"
        },
        "downloads": 12975,
        "filename": "shyaml-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5cc41a1d50c1ff8ad423fe8bc395c6c9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16034,
        "upload_time": "2016-08-31T11:37:35",
        "url": "https://files.pythonhosted.org/packages/67/70/1133a5817bc62ff4e7ceee59edb95d127092db9385cc7cda5fcac93c494a/shyaml-0.4.1.tar.gz"
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "355187ea0da3da570e3236e39213d9bd",
          "sha256": "ec87ce7b633fe0b8a16b9491e7434fd4345e55aa6343a567bc22c50190ba4d0f"
        },
        "downloads": 514,
        "filename": "shyaml-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "355187ea0da3da570e3236e39213d9bd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16180,
        "upload_time": "2017-02-08T08:38:27",
        "url": "https://files.pythonhosted.org/packages/c7/2e/91fa96f88c40fe65c8a85d5874090277b83024f872755f963d676a2bf177/shyaml-0.4.2.tar.gz"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a6ffae6cb22fdf1f1a8aa6581f7a2aa7",
          "sha256": "c58442f8e068d3e044a1d0543c8918855ce7b421ee5c0c320effab4fd0432f0b"
        },
        "downloads": 900,
        "filename": "shyaml-0.5.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a6ffae6cb22fdf1f1a8aa6581f7a2aa7",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 19499,
        "upload_time": "2017-03-27T23:16:54",
        "url": "https://files.pythonhosted.org/packages/f5/de/96ec4be1b908b2316726b97de53a806f06d10c7ed8ad83e6710b6e8cf6c1/shyaml-0.5.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c1e93dddb134cf80a77b91d09f99f6a6",
          "sha256": "b3711011d37aae4e07b68b31e989aa3715548d5b0759898eda2ba437b9ae3c36"
        },
        "downloads": 43,
        "filename": "shyaml-0.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c1e93dddb134cf80a77b91d09f99f6a6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14165,
        "upload_time": "2017-03-27T23:16:58",
        "url": "https://files.pythonhosted.org/packages/f7/ec/4143e8ba92d1d3654535f17bc4354f72d3a3e7d6984926d9a7ce1dec46ed/shyaml-0.5.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a6ffae6cb22fdf1f1a8aa6581f7a2aa7",
        "sha256": "c58442f8e068d3e044a1d0543c8918855ce7b421ee5c0c320effab4fd0432f0b"
      },
      "downloads": 900,
      "filename": "shyaml-0.5.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "a6ffae6cb22fdf1f1a8aa6581f7a2aa7",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 19499,
      "upload_time": "2017-03-27T23:16:54",
      "url": "https://files.pythonhosted.org/packages/f5/de/96ec4be1b908b2316726b97de53a806f06d10c7ed8ad83e6710b6e8cf6c1/shyaml-0.5.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "c1e93dddb134cf80a77b91d09f99f6a6",
        "sha256": "b3711011d37aae4e07b68b31e989aa3715548d5b0759898eda2ba437b9ae3c36"
      },
      "downloads": 43,
      "filename": "shyaml-0.5.0.tar.gz",
      "has_sig": false,
      "md5_digest": "c1e93dddb134cf80a77b91d09f99f6a6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 14165,
      "upload_time": "2017-03-27T23:16:58",
      "url": "https://files.pythonhosted.org/packages/f7/ec/4143e8ba92d1d3654535f17bc4354f72d3a3e7d6984926d9a7ce1dec46ed/shyaml-0.5.0.tar.gz"
    }
  ]
}