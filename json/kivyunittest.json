{
  "info": {
    "author": "Peter Badida",
    "author_email": "keyweeusr@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Bug Tracking",
      "Topic :: Software Development :: Testing"
    ],
    "description": "KivyUnitTest\r\n============\r\n\r\n.. image:: https://img.shields.io/pypi/pyversions/kivyunittest.svg\r\n   :target: https://pypi.python.org/pypi/kivyunittest\r\n\r\n.. image:: https://img.shields.io/pypi/v/kivyunittest.svg\r\n   :target: https://pypi.python.org/pypi/kivyunittest\r\n\r\n*Test more, cry less!*\r\n\r\nThis script is meant to launch a folder of your tests which will behave as one\r\nbig test suite. It's done this way because of necessity having a fresh `python`\r\ninterpreter for each Kivy application test to run without mistakes (otherwise\r\nmess from previous ``App().run()`` interferes).\r\n\r\nEach unittest file in a folder consisting of tests must start with `test_`\r\nprefix and end with `.py`\r\n\r\nRun from console:\r\n\r\n.. code::\r\n\r\n    python -m kivyunittest --folder \"FOLDER\"\r\n\r\nWithout ``--folder`` flag the file assumes it's placed into a folder full of\r\ntests presumably as ``__init__.py``. It makes a list of files, filters\r\neverything not starting with `test_` and ending with `.py` and runs each test.\r\n\r\nErrors\r\n------\r\n\r\nIf there is an error of whatever kind that unittest recognizes as failure,\r\nKivyUnitTest will save the name of the test and its log. When the testing ends\r\nall error logs are put together into console divided by pretty headers with\r\ntest's name.\r\n\r\nWriting Unit Test for Kivy application\r\n--------------------------------------\r\n\r\nWhen the Kivy application starts, it creates a loop and until the loop is\r\nthere, nothing will execute after ``App().run()`` line. That's why we need to\r\nprobe the loop.\r\n\r\nThis can be achieved by a simple ``time.sleep()`` as you've surely noticed\r\nsooner when trying to pause the app for a while. That's exactly what a custom\r\nunittest for Kivy does - pauses the main loop as much as possible\r\nas a scheduled interval and executes the testing ``run_test`` function.\r\n\r\nExample:\r\n\r\n.. code::\r\n\r\n    import unittest\r\n\r\n    import os\r\n    import sys\r\n    import time\r\n    import os.path as op\r\n    from functools import partial\r\n    from kivy.clock import Clock\r\n\r\nFirst we need to set up importing of the application set ``main_path``\r\nto be the folder of `main.py` e.g. when you have tests in\r\n`<app dir>/tests/test_example.py`.\r\n\r\n.. code::\r\n\r\n    main_path = op.dirname(op.dirname(op.abspath(__file__)))\r\n    sys.path.append(main_path)\r\n\r\nImport your main class that inherits from App (``class My(App):``) or even\r\nadditional stuff that's not connected with App class or its children.\r\n\r\n.. code::\r\n\r\n    from main import My\r\n\r\n\r\n    class Test(unittest.TestCase):\r\n        # sleep function that catches `dt` from Clock\r\n        def pause(*args):\r\n            time.sleep(0.000001)\r\n\r\n        # main test function\r\n        def run_test(self, app, *args):\r\n            Clock.schedule_interval(self.pause, 0.000001)\r\n\r\n            # Do something\r\n\r\n            # Comment out if you are editing the test, it'll leave the\r\n            # Window opened.\r\n            app.stop()\r\n\r\nCreate an instance of your application, put it as a parameter into partial\r\n(so that you could access it later), schedule main function with Clock and\r\nlaunch the application (working Window will appear).\r\n\r\n.. code::\r\n\r\n        # same named function as the filename(!)\r\n        def test_example(self):\r\n            app = My()\r\n            p = partial(self.run_test, app)\r\n            Clock.schedule_once(p, 0.000001)\r\n            app.run()\r\n\r\n    if __name__ == '__main__':\r\n        unittest.main()\r\n\r\nTips for testing\r\n~~~~~~~~~~~~~~~~\r\n\r\nHandle class communication through App class via ``App.get_running_app()`` in\r\nyour application, put every needed widget inside App class like this:\r\n\r\n.. code::\r\n\r\n    class MyButton(Button):\r\n        def __init__(self, **kwargs):\r\n            super(<class name>, self).__init__(**kwargs)\r\n            self.text = 'Hello Test'\r\n            app = App.get_running_app()\r\n            app.my_button = self\r\n\r\nand then access your widgets in test's ``run_test()`` function via ``app``\r\nparameter like this:\r\n\r\n.. code::\r\n\r\n    self.assertEqual('Hello Test', app.my_button.text)\r\n\r\nUse ``app.root`` to get instance of a class you pass in the ``build()``\r\nfunction in the App class.\r\n\r\nDispatch events through widgets e.g. ``<widget>.dispatch('on_release')`` to\r\nexecute function bound to `on_release`.\r\n\r\n.. |rec| replace:: Recorder module\r\n.. _rec: https://kivy.org/docs/api-kivy.input.recorder.html\r\n.. |ins| replace:: Inspector module\r\n.. _ins: https://kivy.org/docs/api-kivy.modules.inspector.html\r\n\r\nUse Kivy's |ins|_ as help to navigate down the path of App class and use `ids`\r\nin `kv language`, it'll make targeting a specific widget easier.\r\n\r\nTry even Kivy's |rec|_ to record steps and play them later instead of\r\ndispatching events manually. However, this way is heavy time-consuming as it\r\nplays the steps exactly as long as they were recorded.\r\n\r\nExample:\r\n\r\n.. code::\r\n\r\n    from kivy.input.recorder import Recorder\r\n\r\n    # place this inside ``run_test()``\r\n    rec = Recorder(filename='myrecorder.kvi')\r\n    rec.bind(on_stop=<function>)\r\n    rec.play = True\r\n\r\nThis will play all steps and then executes a function bound to ``on_stop``.\r\nMay be useful for testing touch gestures, swipes, dragging and other rather\r\nannoying to write manually stuff.\r\n\r\nThere's also possibility to change time the steps were recorded in in `.kvi`\r\nfile (that long number), which will speed things up.\r\n\r\nLicense\r\n-------\r\n\r\nThe MIT License (MIT)\r\n",
    "docs_url": null,
    "download_url": "https://github.com/KeyWeeUsr/KivyUnitTest/tarball/0.1.1",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/KeyWeeUsr/KivyUnitTest",
    "keywords": "unittest,testing,debug,kivy",
    "license": "License :: OSI Approved :: MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "kivyunittest",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/kivyunittest/",
    "release_url": "https://pypi.org/project/kivyunittest/0.1.3/",
    "requires_python": null,
    "summary": "Unittesting for Kivy framework",
    "version": "0.1.3"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d44145d76e10f219344d33de17a0bd9c",
          "sha256": "f678d1b308aedce6572ef6083ae554b447025b14ad2a3caa5c5fa972400b1868"
        },
        "downloads": 352,
        "filename": "kivyunittest-0.1.0.zip",
        "has_sig": false,
        "md5_digest": "d44145d76e10f219344d33de17a0bd9c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7621,
        "upload_time": "2016-08-02T01:29:04",
        "url": "https://files.pythonhosted.org/packages/ba/da/bfa50a5628f07842374ac60d83d90feb3c282f9b2979438575f56f6ab096/kivyunittest-0.1.0.zip"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "666ba15ed0b284539caa670014030d61",
          "sha256": "d796808b98da16f9ce482faca2e73ceb0e48cfdcd7db9bc9afea86628507851e"
        },
        "downloads": 160,
        "filename": "kivyunittest-0.1.1.zip",
        "has_sig": false,
        "md5_digest": "666ba15ed0b284539caa670014030d61",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7844,
        "upload_time": "2016-08-02T18:46:35",
        "url": "https://files.pythonhosted.org/packages/1c/dd/795dd654f782752e0d0ab4dc79276040fa539d99025be40c7ce26a0f96b7/kivyunittest-0.1.1.zip"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cf104c26e9ba8d2c49d5d31ad53ee9e3",
          "sha256": "886472c845f7e42f35e936d26196bc5dffb643b20ddd75b1c0189439dd678342"
        },
        "downloads": 280,
        "filename": "kivyunittest-0.1.2.zip",
        "has_sig": false,
        "md5_digest": "cf104c26e9ba8d2c49d5d31ad53ee9e3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7876,
        "upload_time": "2016-10-28T22:17:07",
        "url": "https://files.pythonhosted.org/packages/02/95/83fe74e4d8e33c3702e4c56619ac22815dc83844d190e5fc903476f67f99/kivyunittest-0.1.2.zip"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "359652a9822f142a12cabf4b9a0760c7",
          "sha256": "edfddb6ee9c655acb13d8f4e63202522c01350f31f8fc8decd9d9959773f8303"
        },
        "downloads": 296,
        "filename": "kivyunittest-0.1.3.zip",
        "has_sig": false,
        "md5_digest": "359652a9822f142a12cabf4b9a0760c7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7884,
        "upload_time": "2016-10-28T22:36:31",
        "url": "https://files.pythonhosted.org/packages/e1/ac/7a53eb6f5e8f5562ac7253f3cd8f677d252425e5ff883b91b81af56eb87a/kivyunittest-0.1.3.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "359652a9822f142a12cabf4b9a0760c7",
        "sha256": "edfddb6ee9c655acb13d8f4e63202522c01350f31f8fc8decd9d9959773f8303"
      },
      "downloads": 296,
      "filename": "kivyunittest-0.1.3.zip",
      "has_sig": false,
      "md5_digest": "359652a9822f142a12cabf4b9a0760c7",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7884,
      "upload_time": "2016-10-28T22:36:31",
      "url": "https://files.pythonhosted.org/packages/e1/ac/7a53eb6f5e8f5562ac7253f3cd8f677d252425e5ff883b91b81af56eb87a/kivyunittest-0.1.3.zip"
    }
  ]
}