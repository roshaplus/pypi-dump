{
  "info": {
    "author": "Florian Bruhin",
    "author_email": "me@the-compiler.org",
    "bugtrack_url": "https://github.com/The-Compiler/pytest-mccabe/issues",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Plugins",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing"
    ],
    "description": "pytest-mccabe\r\n=============\r\n\r\n.. image:: https://travis-ci.org/The-Compiler/pytest-mccabe.svg?branch=master\r\n    :target: https://travis-ci.org/The-Compiler/pytest-mccabe\r\n\r\npy.test plugin for checking cyclomatic complexity of python source with\r\n`mccabe`_.\r\n\r\n.. _mccabe: https://pypi.python.org/pypi/mccabe/\r\n\r\nUsage\r\n-----\r\n\r\ninstall via::\r\n\r\n    pip install pytest-mccabe\r\n\r\nif you then type::\r\n\r\n    py.test --mccabe\r\n\r\nevery file ending in ``.py`` will be discovered and run through mccabe,\r\nstarting from the command line arguments.\r\n\r\nSimple usage example\r\n--------------------\r\n\r\nConsider you have this (deliberately bad and complex) code::\r\n\r\n    # module.py\r\n\r\n    import random\r\n    import os.path\r\n\r\n    def some_function():\r\n        num = random.random()\r\n        if 0 <= num < 0.1:\r\n            print(\"1\")\r\n        elif 0.1 <= num < 0.2:\r\n            print(\"2\")\r\n        elif 0.2 <= num < 0.3:\r\n            print(\"3\")\r\n        elif 0.3 <= num < 0.4:\r\n            print(\"4\")\r\n        elif 0.4 <= num < 0.5:\r\n            print(\"5\")\r\n        elif 0.5 <= num < 0.6:\r\n            print(\"6\")\r\n        elif 0.6 <= num < 0.7:\r\n            print(\"7\")\r\n        elif 0.7 <= num < 0.8:\r\n            print(\"8\")\r\n        elif 0.8 <= num < 0.9:\r\n            print(\"9\")\r\n        elif 0.9 <= num < 1:\r\n            print(\"10\")\r\n\r\nRunning py.test with pytest-mccabe installed shows you this function is\r\nconsidered too complex::\r\n\r\n   $ py.test -q --mccabe module.py\r\n   F\r\n   ============================== FAILURES ==============================\r\n   ____________________________ mccabe-check ____________________________\r\n   .../module.py:4: C901 'some_function' is too complex (11)\r\n\r\n\r\nConfiguring mccabe complexity per project and file\r\n--------------------------------------------------\r\n\r\nYou may configure the maximum complexity for your project\r\nby adding an ``mccabe-complexity`` entry to pytest config file (e.g.\r\n``setup.cfg``) like this::\r\n\r\n    [pytest]\r\n    mccabe-complexity=15\r\n\r\nRerunning with the above example will now look better::\r\n\r\n    $ py.test -q --mccabe foo.py\r\n    .\r\n    1 passed in 0.00 seconds\r\n\r\nIf you have some files where you want to set a higher complexity than the\r\nproject-wide one, you can start a mccabe-complexity line with a glob-pattern::\r\n\r\n    [pytest]\r\n    mccabe-complexity =\r\n        *.py 7\r\n        magic.py 10\r\n\r\nIgnoring certain functions\r\n--------------------------\r\n\r\nYou can exclude certain functions from the complexity check by adding comments\r\nlike this::\r\n\r\n    def some_function():  # noqa\r\n        ...\r\n\r\n    def another_function():  # pragma: no mccabe\r\n        ...\r\n\r\n(both will work - ``# noqa`` is mainly there for `flake8`_ compatibility)\r\n\r\n.. _flake8: https://pypi.python.org/pypi/flake8\r\n\r\n\r\nRunning mccabe checks and no other tests\r\n----------------------------------------\r\n\r\nYou can restrict your test run to only perform \"mccabe\" tests\r\nand not any other tests by typing::\r\n\r\n    py.test --mccabe -m mccabe\r\n\r\nThis will only run tests that are marked with the \"mccabe\" keyword\r\nwhich is added for the mccabe test items added by this plugin.\r\n\r\nIf you are using pytest < 2.4, then use the following invocation\r\nto the same effect::\r\n\r\n    py.test --mccabe -k mccabe\r\n\r\n\r\nNotes\r\n-----\r\n\r\nThe repository of this plugin is at https://github.com/The-Compiler/pytest-mccabe\r\n\r\nFor more info on py.test see http://pytest.org\r\n\r\nThe code is based on Florian Schulze's excellent `pytest-flakes`_ - Thanks!\r\n\r\n.. _pytest-flakes: https://pypi.python.org/pypi/pytest-flakes\r\n\r\nChanges\r\n=======\r\n\r\n0.1\r\n---\r\n\r\n- Initial release.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/The-Compiler/pytest-mccabe",
    "keywords": "pytest plugin mccabe complexity",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-mccabe",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pytest-mccabe/",
    "release_url": "https://pypi.org/project/pytest-mccabe/0.1/",
    "requires_python": null,
    "summary": "pytest plugin to run the mccabe code complexity checker.",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "19d7bb1520e2077299e294f8c28412b2",
          "sha256": "9c663e2e7c2510302d7ff57a11acb56b851c6807b2c744e77eb968b1bbb66cca"
        },
        "downloads": 6762,
        "filename": "pytest_mccabe-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "19d7bb1520e2077299e294f8c28412b2",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 7212,
        "upload_time": "2015-06-02T18:24:42",
        "url": "https://files.pythonhosted.org/packages/ed/fa/9ccf1c3bdaa8f48186c1e2af1a742846a304686d36dd91f23902d3afc9bf/pytest_mccabe-0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "246444a05013660651498d549589fa34",
          "sha256": "f68af99861c06a27d45ee7682071a201fe0a7785f2ec0a96080022db5ca62012"
        },
        "downloads": 3731,
        "filename": "pytest-mccabe-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "246444a05013660651498d549589fa34",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6137,
        "upload_time": "2015-06-02T18:22:45",
        "url": "https://files.pythonhosted.org/packages/2f/de/db22476b05df9e553358a65bc4d2abffec5764b6fd86545f379faf946bb2/pytest-mccabe-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "19d7bb1520e2077299e294f8c28412b2",
        "sha256": "9c663e2e7c2510302d7ff57a11acb56b851c6807b2c744e77eb968b1bbb66cca"
      },
      "downloads": 6762,
      "filename": "pytest_mccabe-0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "19d7bb1520e2077299e294f8c28412b2",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 7212,
      "upload_time": "2015-06-02T18:24:42",
      "url": "https://files.pythonhosted.org/packages/ed/fa/9ccf1c3bdaa8f48186c1e2af1a742846a304686d36dd91f23902d3afc9bf/pytest_mccabe-0.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "246444a05013660651498d549589fa34",
        "sha256": "f68af99861c06a27d45ee7682071a201fe0a7785f2ec0a96080022db5ca62012"
      },
      "downloads": 3731,
      "filename": "pytest-mccabe-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "246444a05013660651498d549589fa34",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6137,
      "upload_time": "2015-06-02T18:22:45",
      "url": "https://files.pythonhosted.org/packages/2f/de/db22476b05df9e553358a65bc4d2abffec5764b6fd86545f379faf946bb2/pytest-mccabe-0.1.tar.gz"
    }
  ]
}