{
  "info": {
    "author": "iLampard",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "# argcheck\n\nA decorator based implementation of argument checks, whose code is largely referenced from [zipline/utils/input_validation](https://github.com/quantopian/zipline/blob/master/zipline/utils/input_validation.py), provides various functionality in argument validation.\n* *expect_kinds*: decorator to check argument dtype kinds\n* *expect_types*: decorator to check argument types\n* *optional*: helper of *expect_types* to deal with default argument\n* *expect_element*: decorator to check if argument takes a value in expected set of elements\n* *expect_bounded* and *expect_strictly_bounded*: decorators to check argument lies inclusively or exclusively within the bounds\n* *expect_dimensions*: decorator to check if argument takes in a numpy array with a specific dimensionality\n* *coerce* and *coerce_types*: decorators that deal with type coercions\n\n\n### Usage\n``` python\nfrom argcheck import *\n```\n\n### Install\n\n``` python\npip install argcheck\n```\n\n### Example\n\n\n\n##### *expect_kinds*: decorator that verifies inputs have expected dtype kinds\n``` python\nfrom numpy import int64, int32, float32\n\n@expect_kinds(x='i')\ndef foo(x):\n    return x\n\nfoo(int64(2))  # 2\nfoo(int32(2))  # 2\nfoo(float32(2))\n# Traceback (most recent call last):\n#       ...\n# TypeError: ...foo() expected a numpy object of kind 'i' for argument 'x',\n# but got 'f' instead.\n\n```\n\n##### *expect_types*: decorator that verifies inputs have expected types\n\n``` python\n@expect_types(x=int, y=str)\ndef foo(x, y):\n    return x, y\n\n\nfoo(2, '3')  # (2, '3')\n\n\n# foo(2.0, '3')\n# Traceback (most recent call last):\n# ...\n# TypeError: ...foo() expected a value of type int for argument 'x',\n# but got float instead.\n\n\n```\n\nworks on class member functions with default argument as well\n\n``` python\nclass test(object):\n    @expect_types(y=(int, str))\n    def __init__(self, x, y=3):\n        pass\n\n\ntest(x=3)  # OK\ntest(x=3, y=5) # OK\ntest(x=1, y=[3])\n# Traceback (most recent call last):\n# ...\n# TypeError: __init__() expected a value of type int or str for argument 'y',\n# but got list instead\n\n```\n\n\n##### *optional*: helper for use with *expect_types* when an input can be `type_` or `None`.\n\n``` python\nisinstance({}, optional(dict))  # True\nisinstance(None, optional(dict))  # True\nisinstance(1, optional(dict))  # False\nisinstance(1, optional(dict, int))  # True\n```\n``` python\n\n# used with expect_types\nclass test2(object):\n    @expect_types(y=optional(int, str))\n    def __init__(self, x, y=None):\n        pass\n\n\ntest2(3)  # OK\ntest2(3, [2])\n# TypeError: __init__() expected a value of type int or str or NoneType for argument 'y',\n# but got list instead.\n\n```\n\n\n##### *expect_element*: decorator that verifies inputs are elements of some expected collection\n\n``` python\n@expect_element(x=('a', 'b'))\ndef foo(x):\n    return x.upper()\n\nfoo('a')  # 'A'\nfoo('c')\n# ValueError: foo() expected a value in ('a', 'b') for argument 'x',\n# but got 'c' instead.\n```\n\n\n##### *expect_bounded*: decorator verifying that inputs fall INCLUSIVELY between bounds\n* Bounds should be passed as a pair of ``(min_value, max_value)``.\n    ``None`` may be passed as ``min_value`` or ``max_value`` to signify that\n    the input is only bounded above or below.\n\n``` python\n@expect_bounded(x=(1, 5))\ndef foo(x):\n    return x + 1\n\n\nfoo(3)  # 4\nfoo(6)\n# ValueError: foo() expected a value inclusively between 1 and 5 for argument 'x',\n# but got 6 instead\n\n\n```\n\n\n``` python\n@expect_bounded(x=(1, None))\ndef foo(x):\n    return x + 1\n\n\nfoo(3)  # 4\nfoo(0)\n# ValueError: foo() expected a value greater than or equal to 1 for argument 'x',\n# but got 0 instead.\n\n\n```\n\n\n##### *expect_strictly_bounded*: decorator verifying that inputs fall EXCLUSIVELY between bounds\n\n``` python\n\n@expect_strictly_bounded(x=(1, 5))\ndef foo(x):\n    return x + 1\n\nfoo(5)\n# ValueError: foo() expected a value exclusively between 1 and 5 for argument 'x',\n# but got 5 instead.\n```\n\n\n##### *expect_dimensions*: decorator that verifies inputs are numpy arrays with a specific dimensionality\n\n``` python\n\nfrom numpy import array\n\n@expect_dimensions(x=1, y=2)\ndef foo(x, y):\n    return x[0] + y[0, 0]\n\nfoo(array([1, 1]), array([[1, 1], [2, 2], [3, 4]])) #ok\nfoo(array([1, 1]), array([[1, 1], [2, 2]]))  # ok\nfoo(array([1, 1]), array([1, 1]))\n\n# ValueError: foo() expected a 2-D array for argument 'y',\n# but got a 1-D array instead.\n\n```\n\n##### *coerce*: decorator that coerces inputs of a given type by passing them to a callable\n\n``` python\n@preprocess(x=coerce(str, int, base=2), y=coerce(str, int, base=2))\ndef add_binary_strings(x, y):\n    return bin(x + y)[2:]\n\nprint add_binary_strings('101', '001')  # 110\n\n\n```\n\n\n##### *coerce_types*: decorator that applies type coercions\n* input param: dict[str -> (type, callable)]\n    * Keyword arguments mapping function parameter names to pairs of\n         (from_type, to_type)\n\n``` python\n@coerce_types(x=(float, int), y=(int, str))\ndef func(x, y):\n    return (x, y)\n\nfunc(1.0, 3)   # (1, '3')\n\n```\n\nPlease see [example](/argcheck/example.py) for details\n\n\n",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/iLampard/argcheck",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "argcheck",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/argcheck/",
    "release_url": "https://pypi.org/project/argcheck/0.0.1/",
    "requires_python": null,
    "summary": "Argument check decorator",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9980097558bbf92c7abeee938e56960a",
          "sha256": "a5c91e4285bf123bd3c51eeff55295ed06eb0eb673f325e3e239a576d3ed4ba2"
        },
        "downloads": 0,
        "filename": "argcheck-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9980097558bbf92c7abeee938e56960a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15686,
        "upload_time": "2017-05-30T14:37:51",
        "url": "https://files.pythonhosted.org/packages/2f/f3/6a4b2ae1691bf6cc430fa602ff7e3b3902f71e02e13465969b7c2f4a0cdb/argcheck-0.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9980097558bbf92c7abeee938e56960a",
        "sha256": "a5c91e4285bf123bd3c51eeff55295ed06eb0eb673f325e3e239a576d3ed4ba2"
      },
      "downloads": 0,
      "filename": "argcheck-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9980097558bbf92c7abeee938e56960a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 15686,
      "upload_time": "2017-05-30T14:37:51",
      "url": "https://files.pythonhosted.org/packages/2f/f3/6a4b2ae1691bf6cc430fa602ff7e3b3902f71e02e13465969b7c2f4a0cdb/argcheck-0.0.1.tar.gz"
    }
  ]
}