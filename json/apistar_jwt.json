{
  "info": {
    "author": "Ryan Castner",
    "author_email": "castner.rr@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# apistar-jwt\n\n[![pypi](https://img.shields.io/pypi/v/apistar_jwt.svg)](https://pypi.python.org/pypi/apistar_jwt) [![travis](https://img.shields.io/travis/audiolion/apistar_jwt.svg)](https://travis-ci.org/audiolion/apistar_jwt)\n\n\nJSON Web Token Component for use with API Star. Provides JWTAuthenticate class for JWT Authentication.\n\n\n## Installation\n\nWe recommend [pipenv](https://pipenv.readthedocs.io/en/latest/) for dependency management.\n```\n$ pipenv install apistar-jwt\n```\n\nAlternatively, install through pip.\n\n```\n$ pip install apistar-jwt\n```\n\n## Usage\n\nTo encrypt and decrpyt tokens you must set the include the following setting under your apistar settings.\n\n```python\nsettings = {\n  'JWT': {\n    # do not check your secret into version control!\n    'SECRET': 'QXp4Z83.%2F@JBiaPZ8T9YDwoasn[dn)cZ=fE}KqHMJPNka3QyPNq^KnMqL$oCsU9BC?.f9,oF2.2t4oN?[g%iq89(+'\n  }\n}\n```\n\nThe JWT Component provided can be used as an injected component in a function or through the API Star Authentication Interface.\n\n### Authentication\n\nAnnotate any routes where you want to use JWT Authentication.\n\n```python\nfrom apistar import annotate\nfrom apistar.interfaces import Auth\nfrom apistar_jwt.authentication import JWTAuthentication\n\n\n@annotate(authentication=[JWTAuthentication()])\ndef auth_route(auth: Auth):\n    # user is authenticated if it reaches here\n\n    # get user data\n    auth.user\n\n    # get token\n    auth.token\n\n    # always returns true\n    auth.is_authenticated()\n\n    # get username from either\n    auth.get_user_id()\n    auth.get_display_name()\n```\n\nIf you need to access the tokens payload you can decrypt the token inside the route.\n\n```python\nfrom apistar import annotate\nfrom apistar.interfaces import Auth\nfrom apistar.types import Settings\nfrom apistar_jwt.authentication import JWTAuthentication\nfrom apistar_jwt.token import JWT\n\n\n@annotate(authentication=[JWTAuthentication()])\ndef access_jwt_payload_route(auth: Auth, settings: Settings):\n    # get payload from token\n    token = JWT(token=auth.token, settings=settings)\n    token.payload\n```\n\nAlternatively, we can [configure the authentication policy](https://github.com/encode/apistar#configuring-the-authentication-policy).\n\n```python\nfrom apistar_jwt.authentication import JWTAuthentication\n\nsettings = {\n    'AUTHENTICATION': [JWTAuthentication()]\n}\n```\n\n### As A Component\n\nRegister the JWT Component in your App:\n\n```python\nfrom apistar import Component\nfrom apistar_jwt.authentication import get_jwt\nfrom apistar_jwt.token import JWT\n\ncomponents = [\n    Component(JWT, init=get_jwt)\n]\n\napp = App(\n    routes=routes,\n    components=components\n)\n```\n\nAdd the component to your function definition:\n\n```python\nfrom apistar import http\nfrom apistar_jwt.token import JWT\n\ndef echo_jwt_payload(request: http.Request, token: JWT):\n    return token.payload\n\n```\n\nNote that you have to do your own authentication check using this method.\n\n```python\nfrom apistar import http\nfrom apistar import exceptions\nfrom apistar_jwt.token import JWT\n\ndef auth_required_endpoint(request: http.Request, token: JWT):\n    if token.payload is None:\n      raise exceptions.Forbidden()\n    username = token.payload.get('username', '')\n    other_data_you_put_in_payload = token.payload.get('other_data', '')\n    return {\n      'username': username,\n      'other_data': other_data_you_put_in_payload,\n    }\n```\n\n### Settings\n\nThere are two settings this package uses to identify the `username` and `user_id` keys in the JWT payload, they are by default\n\n```python\nsettings = {\n  'JWT': {\n    'USERNAME': 'username',\n    'ID': 'id',\n  }\n}\n```\n\nIf your JWT uses some other kind of key, copy these keys into your settings and set the correct key values.\n\n`ID` is not required, but available if you would like to include a different id field in your JWT payload.\n\n#### Other JWT Settings\n\n`ALGORITHMS` is related to the algorithms used for decoding JWTs. By default we only use 'HS256' but JWT supports passing an array of [supported algorithms](https://pyjwt.readthedocs.io/en/latest/algorithms.html#digital-signature-algorithms) which it will sequentially try when attempting to decode.\n\n```python\nsettings = {\n  'JWT': {\n    'ALGORITHMS': ['HS256', ],\n  }\n}\n```\n\n`SECRET` is a long, randomized, secret key that should never be checked into version control.\n\n```python\nsettings = {\n  'JWT': {\n    'SECRET': 'QXp4Z83.%2F@JBiaPZ8T9YDwoasn[dn)cZ=fE}KqHMJPNka3QyPNq^KnMqL$oCsU9BC?.f9,oF2.2t4oN?[g%iq89(+'\n  }\n}\n```\n\n`ISSUER` is the urn for which JWT's should be accepted from. [Read more about issuer claim](https://pyjwt.readthedocs.io/en/latest/usage.html#issuer-claim-iss).\n\n```python\nsettings = {\n  'JWT': {\n    'ISSUER': 'urn:foo'\n  }\n}\n```\n\n`AUDIENCE` is the urn for this applications audience, it must match a value in the `aud` key of the payload. [Read more about issueer claim](https://pyjwt.readthedocs.io/en/latest/usage.html#audience-claim-aud).\n\n```python\nsettings = {\n  'JWT': {\n    'AUDIENCE': 'urn:bar'\n  }\n}\n```\n\n`LEEWAY` is the number of seconds of margin an expiration time claim in the past will still be valid for.\n\n```python\nsettings = {\n  'JWT': {\n    'LEEWAY': 10\n  }\n}\n```\n\n### Encoding JWTs\n\nAs a convenience, we provide a simple `encode` method to create JWTs, if you need more advanced JWT encodings, please [visit the PyJWT docs](https://pyjwt.readthedocs.io/en/latest/usage.html#usage-examples).\n\n```python\nfrom apistar.types import Settings\nfrom apistar_jwt.token import JWT\n\n\ndef encrypt_payload(request: http.Request, settings: Settings):\n    SECRET = settings['JWT'].get('SECRET')\n    payload = {'email': 'test@example.com'}\n\n    # algorithm for encoding defaults to HS256\n    token = JWT.encode(payload, secret=SECRET)\n\n    # use the algorithm keyword to pass a specific algorithm\n    token = JWT.encode(payload, secret=SECRET, algorithm='RS512')\n\n    return {'token': token}\n```\n\nYou may pass [valid claim names](https://pyjwt.readthedocs.io/en/latest/usage.html#registered-claim-names) or other valid kwargs to `JWT.encode()`. These claims help with your JWT's security. The following example demonstrates using all the claims, but they are all optional and the values provided for the claims in the example are arbitrary.\n\n```python\nimport datetime\n\nfrom apistar.types import Settings\nfrom apistar_jwt.token import JWT\n\n\ndef encrypt_payload(request: http.Request, settings: Settings):\n    SECRET = settings['JWT'].get('SECRET')\n    payload = {\n        'email': 'test@example.com',\n        'iss': 'urn:foo',  # only accept jwt from this issuer\n        'aud': ['urn:foo', 'urn:bar', 'urn:baz']  # only these audiences can decrpyt\n        'iat': datetime.utcnow()  # issued at to know time JWT was issued\n        'exp': datetime.datetime.utcnow() + datetime.timedelta(seconds=30),  # expiration time\n        'nbf': datetime.utcnow(),  # not before time\n    }\n\n    # you may also pass optional kwargs like headers to the encode method\n    token = JWT.encode(\n        payload,\n        secret=SECRET,\n        algorithm='RS512',\n        headers={'kid': '230498151c214b788dd97f22b85410a5'},\n    )\n\n    return {'token': token}\n```\n\n\n# HISTORY\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/audiolion/apistar_jwt",
    "keywords": "apistar_jwt",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "apistar_jwt",
    "platform": "",
    "project_url": "https://pypi.org/project/apistar_jwt/",
    "release_url": "https://pypi.org/project/apistar_jwt/0.1.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A JSON Web Token Component for API Star",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5df944e5bf9216cebd91b4338df2adc1",
          "sha256": "492c0ceca88e0e74c5c2bdb9cedabacb7495a57e4c8ad409e397a85c4a7801f5"
        },
        "downloads": 0,
        "filename": "apistar_jwt-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5df944e5bf9216cebd91b4338df2adc1",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 9152,
        "upload_time": "2017-10-04T23:45:47",
        "url": "https://files.pythonhosted.org/packages/e9/3e/d001a62fb67a1441c99a9cf9aef17d4f15b4504cf5bd42961d9e5fd06360/apistar_jwt-0.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d4c9d958d76a9f6dabd351470c7193df",
          "sha256": "0c6061752cc87347f3ccd9edcb7bb2487304460c3626091a2fcd0988d5b455c2"
        },
        "downloads": 0,
        "filename": "apistar_jwt-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d4c9d958d76a9f6dabd351470c7193df",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6802,
        "upload_time": "2017-10-04T23:45:45",
        "url": "https://files.pythonhosted.org/packages/2c/a2/7f48c80c41e6d9cf39931324d7a29897b7403dbd6a1117b85ce80a664795/apistar_jwt-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "05d114f212e1b1f79e7f5cd0375d61c7",
          "sha256": "ebe625b681bc5bd01952dc4c8ed1698136304998f13d3ded57bdd757a9a62e10"
        },
        "downloads": 0,
        "filename": "apistar_jwt-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "05d114f212e1b1f79e7f5cd0375d61c7",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 9190,
        "upload_time": "2017-10-05T00:57:04",
        "url": "https://files.pythonhosted.org/packages/14/80/028d78e7e12709222ce6a68384fe58dadbce35ad14cde85252039b8c30ea/apistar_jwt-0.1.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "01d4e401f5195c866bd607559ed8cf4e",
          "sha256": "121e7e341af0942c1ea74783d336faab90fc6e3fd5ee0a4148f2a8479e840c8e"
        },
        "downloads": 0,
        "filename": "apistar_jwt-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "01d4e401f5195c866bd607559ed8cf4e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6806,
        "upload_time": "2017-10-05T00:57:02",
        "url": "https://files.pythonhosted.org/packages/17/1e/075423f0f9d1d665249cf505dd3c5d33b4046430e9000bcef29118aa8d4e/apistar_jwt-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "05d114f212e1b1f79e7f5cd0375d61c7",
        "sha256": "ebe625b681bc5bd01952dc4c8ed1698136304998f13d3ded57bdd757a9a62e10"
      },
      "downloads": 0,
      "filename": "apistar_jwt-0.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "05d114f212e1b1f79e7f5cd0375d61c7",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "size": 9190,
      "upload_time": "2017-10-05T00:57:04",
      "url": "https://files.pythonhosted.org/packages/14/80/028d78e7e12709222ce6a68384fe58dadbce35ad14cde85252039b8c30ea/apistar_jwt-0.1.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "01d4e401f5195c866bd607559ed8cf4e",
        "sha256": "121e7e341af0942c1ea74783d336faab90fc6e3fd5ee0a4148f2a8479e840c8e"
      },
      "downloads": 0,
      "filename": "apistar_jwt-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "01d4e401f5195c866bd607559ed8cf4e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6806,
      "upload_time": "2017-10-05T00:57:02",
      "url": "https://files.pythonhosted.org/packages/17/1e/075423f0f9d1d665249cf505dd3c5d33b4046430e9000bcef29118aa8d4e/apistar_jwt-0.1.1.tar.gz"
    }
  ]
}