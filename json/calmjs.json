{
  "info": {
    "author": "Tommy Yu",
    "author_email": "tommy.yu@auckland.ac.nz",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Framework :: Setuptools Plugin",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)",
      "Operating System :: OS Independent",
      "Programming Language :: JavaScript",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "calmjs\n======\n\nA Python framework for building toolchains and utilities for working\nwith the Node.js ecosystem from within a Python environment.\n\n.. image:: https://travis-ci.org/calmjs/calmjs.svg?branch=2.1.x\n    :target: https://travis-ci.org/calmjs/calmjs\n.. image:: https://ci.appveyor.com/api/projects/status/45054tm9cfk7ryam/branch/2.1.x?svg=true\n    :target: https://ci.appveyor.com/project/metatoaster/calmjs/branch/2.1.x\n.. image:: https://coveralls.io/repos/github/calmjs/calmjs/badge.svg?branch=2.1.x\n    :target: https://coveralls.io/github/calmjs/calmjs?branch=2.1.x\n\n.. |AMD| replace:: AMD (Asynchronous Module Definition)\n.. |calmjs.bower| replace:: ``calmjs.bower``\n.. |calmjs| replace:: ``calmjs``\n.. |calmjs.rjs| replace:: ``calmjs.rjs``\n.. |npm| replace:: ``npm``\n.. |r.js| replace:: ``r.js``\n.. |setuptools| replace:: ``setuptools``\n.. _AMD: https://github.com/amdjs/amdjs-api/blob/master/AMD.md\n.. _Bower: https://bower.io/\n.. _calmjs.bower: https://pypi.python.org/pypi/calmjs.bower\n.. _calmjs.rjs: https://pypi.python.org/pypi/calmjs.rjs\n.. _Node.js: https://nodejs.org/\n.. _npm: https://www.npmjs.com/\n.. _r.js: https://github.com/requirejs/r.js\n.. _setuptools: https://pypi.python.org/pypi/setuptools\n\n\nIntroduction\n------------\n\nCalmjs defines an extensible framework for interoperability between\nPython and `Node.js`_ runtime for Python packages, so they can\ninteroperate with all aspects of Node.js/JavaScript development\necosystems.  The goal of the Calmjs framework is to aid the development,\ntesting, and deployment of Python packages that also include JavaScript.\n\n\nMethodology\n-----------\n\nFirst, this is achieved by providing Python packages the ability to\ndeclare dependencies on Node.js/JavaScript packages or source files that\nare required to complete their functionality.  This common framework\nwill ensure the accessibility of these metadata under a common protocol,\nto avoid incompatible declarations that are not portable between\ndifferent projects and environments, or being otherwise scattered across\ndifferent tools or locations or be duplicated within the same working\nenvironments by different sets of tools that are unable to communicate\nstates between each other, which are common sources of errors and\nhardships for building and deployment.\n\nSecond, by offering a set of tools built on top of this extensible\nframework to work with these declarations for generating the\nconfiguration files for required Node.js tools, so that they can\nconstruct the required the build and/or runtime environment for their\nfunctionality.\n\nUltimately, this permits better Node.js integration with a given Python\nenvironment, lowering the amount of effort needed to achieve continuous\nintegration and/or delivery of Python packages in conjunction with\nNode.js/JavaScript packages in a reproducible manner.\n\nImplementation\n~~~~~~~~~~~~~~\n\nIn order to achieve this, the Calmjs framework provides a set of\nextension to |setuptools|_ that assists with the tracking and management\nof dependencies of JavaScript or Node.js based packages (such as ones\nthrough |npm|_) for a given Python package.  It also provides a number\nof base classes that can be used to build custom toolchains that\nimplement different strategies for managing and compiling required\nJavaScript code and related assets into the deployment artifacts that an\napplication server may use, or to generate test harnesses to ensure\ncorrectness under both the development and production environment.\nThese extra functionalities will be provided by other Python packages\nunder the |calmjs| namespace in order to realize this modular\narchitecture.\n\nThe name Calmjs was originally derived from the steps in the first\niteration of the toolchain which involves the steps compile, assemble,\nand linkage into a module of JavaScript using the namespace from the\nhost Python package.  The `m` in the logo is the ear of a rabbit.  The\nreason this animal is chosen as the mascot for this project is because\nof their dietary habits, as it's analogous to how JavaScript code is\ntypically turned into a minimally usable level by other tools and\nframework.\n\n\nFeatures\n--------\n\nA framework for integration with Node.js based package managers\n    Through |setuptools| command hooks, |calmjs| provides Python\n    packages with the ability to declare and manage manifest definition\n    files for Node.js based package management systems (e.g. such as\n    ``package.json`` for |npm|).  Under typical usage, this means the\n    declaration of ``dependencies`` or ``devDependencies`` for the\n    JavaScript packages needed by a given Python package can be tracked,\n    all within the |setuptools| framework through the extensions\n    provided by |calmjs|.\n\n    The other part of this infrastructure is that these declarations\n    follow the Python package dependency graph.  Developers and users\n    can make use of the |calmjs| console command entry point, or through\n    |setuptools|, to generate a manifest file to facilitate the\n    installation of Node.js packages required by the Python packages\n    within the completed application stack, tailored for all the\n    packages at hand.\n\n    |calmjs| includes the support for |npm| by default.\n\nExport JavaScript code out of Python packages with the same namespace\n    A given Python package that included associated JavaScript source\n    code within the same Python module and namespace structure alongside\n    Python source code within the source tree, will be able to declare\n    those namespaces as the root for those JavaScript modules under the\n    exact same Python package namespace through |setuptools| entry\n    points.\n\n    These declarations will be available through registries exposed by\n    the |calmjs| module registry system for other packages to turn those\n    declarations through the API provided by the framework into working\n    JavaScript code following the same declared module and namespace\n    structures.  The default module registry will make use of the ``/``\n    character (instead of the ``.`` character like in Python) as the\n    separator for the names due to established naming conventions in\n    JavaScript (and in ES6 towards the future).\n\n    Other tools that works with the Calmjs framework can then make use\n    of these raw JavaScript source files, turning them into actual\n    usable Node.js modules for local consumption, or |AMD|_ artifacts\n    for consumption over the web.  This leads to...\n\nBetter integration of JavaScript toolchains into Python environments\n    This is achieved by providing a framework for building toolchains\n    for working with tools written in JavaScript for Node.js/JavaScript\n    environments that integrates properly with existing Python packages\n    and environments.\n\n    There are no limitations as to how or what can be done with the\n    tools or the source files, as this is left as an implementation\n    detail.  For an example please refer to the |calmjs.rjs|_ Python\n    package, which allows the production of AMD artifacts from\n    JavaScript packages embedded inside Python packages.\n\n    Generally, toolchains can be built to find and load all Python\n    packages (through the |calmjs| registry system) that have any\n    JavaScript source files, and those will be extracted, go through the\n    appropriate transpilers (if any) in order to build deployable\n    artifacts.  Test harnesses can be set up to aid with running of unit\n    tests, functional testing and naturally the final integration tests\n    needed for a successful deployment.\n\nWell-defined modular architecture to ensure code reuse and extensibility\n    The features described so far are built upon a foundation of generic\n    classes and modules, so that the support for additional JavaScript\n    tools or custom process for handling transpilation can be as simple\n    as creating a new module for a couple of classes with additional\n    parameters with the relevant |setuptools| entry points.\n\n    In fact, |calmjs| out of the box only ships with just the core\n    framework plus the |npm| interfacing part, with the support for\n    tools like `Bower`_ or |r.js|_ as completely separate packages (as\n    |calmjs.bower|_ and |calmjs.rjs|_ respectively), such that projects,\n    environments or sites that do not need the functionality those\n    packages provide can simply opt to not have them installed.\n\n\nInstallation\n------------\n\nAs the goal of |calmjs| is to integrate Node.js and |npm| into a Python\nenvironment, they need to be available within the environment; if they\nare not installed please follow the installation steps for `Node.js`_\nappropriate for the target operating system/environment/platform.\n\nTo install |calmjs| into a given Python environment, the following\ncommand can be executed to install directly from PyPI:\n\n.. code:: sh\n\n    $ pip install calmjs\n\nAlternative installation methods (for developers, advanced users)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nDevelopment is still ongoing with |calmjs|, for the latest features and\nbug fixes, the development version can be installed through git like so:\n\n.. code:: sh\n\n    $ pip install git+https://github.com/calmjs/calmjs.git#egg=calmjs\n\nAlternatively, the git repository can be cloned directly and execute\n``python setup.py develop`` while inside the root of the source\ndirectory.  However this method WILL require all packages under the\n|calmjs| namespace to be uninstalled and be reinstalled using this\ndevelopment only method.\n\nAs |calmjs| is declared as both a namespace and a package, mixing\ninstallation methods as described above when installing with other\n|calmjs| packages may result in the module importer being unable to look\nup the target files.  If such an error does arise please remove all\nmodules and only stick with a single installation method for all\npackages within the |calmjs| namespace.\n\nTesting the installation\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo ensure that the |calmjs| installation is functioning correctly, the\nbuilt-in testsuite can be executed by the following:\n\n.. code:: sh\n\n    $ python -m unittest calmjs.tests.make_suite\n\nIf there are failures, please file an issue on the issue tracker with\nthe full traceback, and/or the method of installation.  Please also\nremember to include platform specific information, such as Python\nversion, operating system environments and version, and other related\ninformation related to the issue at hand.\n\n\nUsage\n-----\n\nWhen installed to a particular Python environment, the |calmjs|\ncommand-line utility will become available within there.\n\n.. code:: sh\n\n    $ calmjs\n    usage: calmjs [-h] [-d] [-q] [-v] [-V] <command> ...\n\n    positional arguments:\n      <command>\n        npm          npm support for the calmjs framework\n\n    optional arguments:\n      -h, --help     show this help message and exit\n\nAs mentioned, |npm| support is built-in so it is always available; to\naccess its help, simply execute ``calmjs npm -h``, which will then list\nthe options available for that particular subcommand.  If other\nsubcommands are available (which will be provided by other |calmjs|\nintegration packages) they will be listed as a ``<command>`` and their\nspecific help messages will be accessible in the same manner.\n\nDeclare and use a ``package.json`` for a given Python package\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf a package wish to declare dependencies on packages hosted by |npm|,\nit may do something like this in its ``setup.py``:\n\n.. code:: python\n\n    from setuptools import setup\n\n    package_json = {\n        \"dependencies\": {\n            \"jquery\": \"~3.0.0\",\n            \"underscore\": \"~1.8.0\",\n        }\n    }\n\n    setup(\n        name='example.package',\n        ...\n        install_requires=[\n            'calmjs',\n            ...\n        ],\n        package_json=package_json,\n        ...\n    )\n\nRunning ``python setup.py install`` in the directory the ``setup.py``\nresides in will write that ``package_json`` fragment into the package's\negg-info metadata section, provided that it is a valid JSON string or a\ndictionary without incompatible data types.\n\nAll packages that ultimately depending on this ``example.package`` will\nhave the option to inherit this ``package.json`` egg-info metadata.  One\nway to do this is through that package's ``setup.py``.  By invoking\n``setup.py npm --init`` from there, a new ``package.json`` will be\nwritten to the current directory as if running ``npm init`` with all the\ndependencies declared through the Python package dependency tree for the\ngiven Python package.\n\nAlternatively, call ``calmjs npm --init example.package`` will do the\nsame thing, provided that the ``example.package`` is available through\nthe current Python environment's import system.\n\nDealing with |npm| dependencies with Python package dependencies\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nRemember, flat is better than nested.  So all ``dependencies`` (and\n``devDependencies``) declared by any upstream Python package will be\nautomatically inherited by all its downstream packages, but they have\nthe option to override it with whatever they want through the mechanism\nas described above.  They can set a JavaScript or Node.js package to\nwhatever versions desired, or even simply remove that dependency\ncompletely by setting the version to ``None``.\n\nThrough this inheritance mechanism whenever an actual ``package.json``\nis needed, the dependencies are flattened for consumption by the\nrespective JavaScript package managers, or by the desired toolchain to\nmake use of the declared information to generate the desired artifacts\nto achieve whatever desired task at hand.\n\nOf course, if the nested style of packages and dependency in the same\nstyle as |npm| is desired, no one is forced to use this, they are free\nto split their packages up to Python and JavaScript bits and have them\nbe deployed and hosted on both PyPI (for ``pip``) and |npm| respectively\nand then figure out how to bring them back together in a coherent\nmanner.  Don't ask (or debate with) the author on how the latter option\nis better or easier for everyone (developers, system integrators and\nend-users) involved.\n\nDeclare explicit dependencies on paths inside ``node_modules``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nGiven that the dependencies on specific versions of packages sourced\nfrom |npm| is explicitly specified, build tools will benefit again from\nexplicit declarations on files needed from those packages.  Namely, the\ncompiled packages could be declared in the ``extras_calmjs`` section in\nJSON string much like ``package_json``, like so:\n\n.. code:: python\n\n    extras_calmjs = {\n        'node_modules': {\n            'jquery': 'jquery/dist/jquery.js',\n            'underscore': 'underscore/underscore.js',\n        },\n    }\n\n    setup(\n        name='example.package',\n        ...\n        extras_calmjs=extras_calmjs,\n        ...\n    )\n\nSince ``node_modules`` is declared to be an ``extras_key``, conflicting\ndeclarations between packages within the environment will be resolved\nand merged in the same manner as dependencies conflicts declared in\n``package_json``.\n\nPlease do note that complete path names must be declared (note that the\n``.js`` filename suffix is included in the example); directories can\nalso be declared.  However, as these declarations are done from within\nPython, explicit, full paths are required thus it is up to downstream\nintegration packages to properly handle and/or convert this into the\nconventions that standard Node.js tools might expect (i.e. where the\n``.js`` filename suffix is omitted).\n\nExport JavaScript code from Python packages\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFurthering the previous example, if the files and directories inside\n``example.package`` are laid out like so::\n\n    .\n    \u251c\u2500\u2500 example\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 package\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 content.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 form.py\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 ui.js\n    \u2502\u00a0\u00a0     \u251c\u2500\u2500 ui.py\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 widget.js\n    \u2514\u2500\u2500 setup.py\n\nTo declare the JavaScript source files within ``./example/package`` as\nJavaScript modules through |calmjs|, an entry point can be declared like\nso in the ``setup.py`` file:\n\n.. code:: python\n\n    setup(\n        ...\n        entry_points=\"\"\"\n        ...\n        [calmjs.module]\n        example.package = example.package\n        \"\"\",\n        ...\n    )\n\nThe default method will expose the two source files with the following\nnames::\n\n    - 'example/package/ui'\n    - 'example/package/widget'\n\nFor some projects, it may be undesirable to permit this automated method\nto extract all the available JavaScript source files from within the\ngiven Python module.\n\nTo get around this, it is possible to declare new module registries\nthrough the Calmjs framework.  Provided that the ``ModuleRegistry``\nsubclass was set up correctly to generate the desired modules from a\ngiven package, simply declare this as a ``calmjs.registry`` entry point\nlike so:\n\n.. code:: python\n\n    setup(\n        ...\n        entry_points=\"\"\"\n        ...\n        [calmjs.registry]\n        example.module = example.package.registry:ExampleModuleRegistry\n        \"\"\",\n        ...\n    )\n\nDo note that while the names permitted for an entry point name is quite\nunrestricted, these registry names should be of a standard dotted\nnamespace format to ensure maximum tool compatibility, as these can be\nspecified from the command line through tools that utilizes this system.\n\nOnce the registry was declared, simply replace ``calmjs.module`` with\nthe name of that, along with a ``calmjs_module_registry`` attribute that\ndeclare this ``example.module`` registry is the default registry to use\nwith this package.\n\n.. code:: python\n\n    setup(\n        ...\n        calmjs_module_registry=['example.package'],\n        entry_points=\"\"\"\n        ...\n        [example.module]\n        example.package = example.package\n        \"\"\",\n        ...\n    )\n\nWithin the Calmjs framework, tools can be explicitly specified to\ncapture modules from any or all module registries registered to the\nframework.  One other registry was also defined.  If the entry point was\ndeclared like so:\n\n.. code:: python\n\n    setup(\n        ...\n        entry_points=\"\"\"\n        ...\n        [calmjs.py.module]\n        example.package = example.package\n        \"\"\",\n        ...\n    )\n\nThe separator for the namespace and the module will use the ``.``\ncharacter instead of ``/``.  However given that the ``.`` character is a\nvalid name for a JavaScript module, the usage of this may create issues\nwith certain JavaScript tools.  However, AMD based module systems can\ngenerally deal with ``.`` without issues so using those may end up\nresulting in somewhat more Python-like feel when dealing with imports\nwhile using JavaScript, though at a slight cost of whatever standards\ncompliance with it.\n\nBy default, another registry with the ``.tests`` suffix is also declared\nas a compliment to the previously introduced registries, which packages\ncan make use of to declare JavaScript test code that accompanies the\nrespective modules that have been declared.  For example:\n\n.. code:: python\n\n    setup(\n        ...\n        entry_points=\"\"\"\n        ...\n        [calmjs.module]\n        example.package = example.package\n\n        [calmjs.module.tests]\n        example.package = example.package.tests\n        \"\"\",\n        ...\n    )\n\nMuch like the first example, this declares ``example.package`` as a\nPython namespace module that exports JavaScript code, with the\ndeclaration following that declaring the module that contains the tests\nthat accompanies that.\n\nIntegration with |npm| through ``calmjs npm``\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAs mentioned, it is possible to make use of the ``package.json``\ngeneration capabilities from outside of |setuptools|.  Users can easily\ndo the same through the built-in ``calmjs npm`` tool:\n\n.. code:: sh\n\n    usage: calmjs npm [-h] [-d] [-q] [-v] [-V] [--view] [--init]\n                      [--install] [-i] [-m] [-w] [-E]\n                      package_names [package_names ...]\n\n    positional arguments:\n      package_names      names of the python package to use\n\n    optional arguments:\n      -h, --help         show this help message and exit\n      -i, --interactive  enable interactive prompt; if an action\n                         requires an explicit response but none were\n                         specified through flags (i.e. overwrite),\n                         prompt for response; disabled by default\n      -m, --merge        merge generated 'package.json' with the one in\n                         current directory; if interactive mode is not\n                         enabled, implies overwrite, else the difference\n                         will be displayed\n      -w, --overwrite    automatically overwrite any file changes to\n                         current directory without prompting\n      -E, --explicit     explicit mode disables resolution for\n                         dependencies; only the specified Python\n                         package(s) will be used.\n\nNaturally, the same ``--init`` functionality shown above with the\n|setuptools| framework is available, however package names can be\nsupplied for generating the target ``package.json`` file from anywhere\non the filesystem, provided that the Python environment has all the\nrequired packages installed.  For instance, if the Node.js packages for\n``example.package`` is to be installed, this can be invoked to view the\n``package.json`` that would be generated:\n\n.. code:: sh\n\n    $ calmjs -v npm --view example.package\n    2016-09-01 16:37:18,398 INFO calmjs.cli generating a flattened\n    'package.json' for 'example.package'\n    {\n        \"dependencies\": {\n            \"jquery\": \"~3.0.0\",\n            \"underscore\": \"~1.8.0\",\n        },\n        \"devDependencies\": {},\n        \"name\": \"example.package\"\n    }\n\nToolchain\n~~~~~~~~~\n\nDocumentation on how to extend the Toolchain class to support use cases\nis currently incomplete.  This is usually combined together with a\n``calmjs.runtime.DriverRuntime`` to hook into the ``calmjs`` runtime.\n\nUnfortunately at this time a detailed guide on how to do this is not yet\nwritten, however working extensions have been created - for a working\nexample on how this may be achieved please refer to |calmjs.rjs|_.\n\n\nTroubleshooting\n---------------\n\nThe following may be some issues that may be encountered with typical\nusage of |calmjs|.\n\nCRITICAL calmjs.runtime terminating due to a critical error\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf |calmjs| encounters any unexpected situation, it may abort like so:\n\n.. code:: sh\n\n    $ calmjs npm --install calmjs.dev\n    CRITICAL calmjs.runtime terminating due to a critical error\n\nIf no useful ERROR message is listed before, please try running again\nusing a debug flag (either ``-d`` or ``--debug``).\n\n.. code:: sh\n\n    $ calmjs -d npm --install calmjs.dev\n    CRITICAL calmjs.runtime terminating due to exception\n    Traceback (most recent call last):\n    ...\n\nSpecifying the debug flag twice will enable the ``post_mortem`` mode,\nwhere a debugger will be fired at the point of failure.  Authors of\nruntime modules may find this useful during their development cycles.\nDo note that the default debugger is set up to only be triggered only on\nthis termination; if errors and/or exceptions occur during the setup\nstage of the |calmjs| runtime, the errors will only simply be logged.\n\nERROR bad 'calmjs.runtime' entry point\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nImportError\n    This is typically caused by improper removal of locally installed\n    packages that had an entry point registered, an addon package to\n    |calmjs| registered entry points pointing to bad import locations,\n    or conflicting installation methods was used for the current\n    environment as outlined in the installation section of this\n    document.  Either reinstall the broken package again with the\n    correct installation method for the environment, or fully uninstall\n    or remove files belonging to the packages or sources that are\n    triggering the undesirable error messages.\n\nbad entry point\n    This is caused by packages defining malformed entry point.  The name\n    of the package triggering this error will be noted in the log; the\n    error may be reported to its developer.\n\nEnvironmental variables being ignored/not passed to underlying tools\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nGenerally speaking, the Calmjs framework filters out all environmental\nvariables except for the bare minimum by default, and only passes a\nlimited number to the underlying tool.  These are the ``PATH`` and the\n``NODE_PATH`` variables, plus platform specific variables to enable\nexecution of scripts and binaries.\n\nRuntime reporting 'unrecognized arguments:' on recognized ones\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFor instance, if the |calmjs| binary was executed like so resulting in\nerror message may look like this:\n\n.. code:: sh\n\n    $ calmjs subcmd1 subcmd2 --flag item\n    usage: calmjs subcmd1 ... [--flag FLAG]\n    calmjs subcmd1: error: unrecognized arguments: --flag\n\nThis means that ``--flag`` is unrecognized by the second subcommand\n(i.e. the ``calmjs subcmd1 subcmd2`` command) as that was placed after\n``subcmd2``, but the subparser for ``subcmd1`` flagged that as an error.\nUnfortunately there are a number of issues in the ``argparse`` module\nthat makes it difficult to resolve this problem, so for the mean time\nplease ensure the flag is provided at the correct subcommand level (i.e.\nin this case, ``calmjs subcmd1 --flag item subcmd2``), otherwise consult\nthe help at the correct level by appending ``-h`` to each of the valid\nsubcommands.\n\nModule registry not locating files from namespace packages\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThere are a number of edge cases associated with namespace packages in\nPython, especially if they are provided on the system through different\nmethods (i.e. mix of zipped eggs, wheels and development packages).\nWhile workarounds for handling of namespace modules for the given\npackages are provided, there are limitations in place.  One such cause\nis due to complexity in dealing with zipped eggs; if this is an issue,\nplease ensure that the affected package has ``zip_safe`` declared as\nfalse, or alternatively generate a Python wheel then install that wheel,\nif the target Python environment has that as the standard installation\nformat.\n\n\nContribute\n----------\n\n- Issue Tracker: https://github.com/calmjs/calmjs/issues\n- Source Code: https://github.com/calmjs/calmjs\n\n\nLegal\n-----\n\nThe Calmjs project is copyright (c) 2016 Auckland Bioengineering\nInstitute, University of Auckland.  |calmjs| is licensed under the terms\nof the GPLv2 or later.\n\nChangelog\n=========\n\n2.1.0 (2016-11-29)\n------------------\n\n- Namespace packages that have a module explicitly provided should still\n  be able to be looked up if a valid entry point is provided; naturally\n  if the module isn't declared correctly then the behavior remains\n  unchanged (github issue #5)\n- Name field in ``package.json`` should contain project names standard\n  to Node.js, i.e. if extras are specified, it should be stripped.  This\n  is done so that that ``npm`` will not choke on it with a warning and\n  die. (github issue #4)\n\n2.0.0 (2016-11-16)\n------------------\n\n- Expose the indexer module functions mapper and modgen as public.\n- Completely refactored the Toolchain class to have much more consistent\n  method naming convention and argument lists.\n- The compile method now reads from an instance specific list of methods\n  which allow very customizable compilation steps.\n- Specific ways for a toolchain to skip specific names based.\n- Fixed copying of bundle sources to targets nested in subdirectories.\n- The ``Spec`` callback system is now renamed to advice system and more\n  comprehensively implemented; every step within the toolchain will\n  execute advices before and after for each respective step that have\n  been registered under the matching identifiers.  The identifiers for\n  advices are are formalized as constants that can be imported from the\n  ``calmjs.toolchain`` module.\n- The advice system has dedicated exceptions which can be raised to\n  signal an abort or cleanly stop a run.\n- A couple spec keys were formalized, which are BUILD_DIR and\n  CONFIG_JS_FILES, reserved for the build directory and marking out\n  configuration JavaScript files.\n- On a successful toolchain call, all advices registered to the spec\n  under the key ``calmjs.toolchain.SUCCESS`` will now be invoked.\n- Dedicated runtime provided for ``Toolchain`` subclasses, joining the\n  ranks of a few other ``BaseDriver`` subclasses.  This is implemented\n  as ``calmjs.runtime.ToolchainRuntime``.\n- ``calmjs.runtime.Runtime`` can be subclassed and nested as it will now\n  nest all ``BaseRuntime``.  Also the ``init`` method is removed, just\n  use ``__init__`` and standard subclassing ``super`` usage rules.\n- The default ``ArgumentParser`` instance for every ``Runtime`` will no\n  longer be created until accessed, as it is now a property.\n- Provide a way for packages to declare the primary module registry or\n  registries it declared packages for through a new setup keyword\n  ``calmjs_module_registry``, if required and desired.\n- The default set of module registry names have been changed.  Registry\n  ``calmjs.pythonic`` is renamed to ``calmjs.py.module``; the related\n  testing related registry is renamed to include the full name of its\n  implied target.\n- Reserved a small set of core (already defined) registries for the\n  calmjs framework, which is formally defined and enforce by the\n  registry itself.\n- Corrected interactive-mode detection.\n- Helpers for source map generation for simple transpilation.\n\n1.0.3 (2016-09-07)\n------------------\n\n- Fixed the issue with bad environmental variables for subprocess.Popen\n  for Windows under Python 2.7.\n- Other minor testing fixes on CI platforms.\n\n1.0.2 (2016-09-04)\n------------------\n\n- Fixed invocation of binaries on the Windows platform.\n- Corrected some minor wording.\n\n1.0.0 (2016-09-02)\n------------------\n\n- Initial release of the ``calmjs`` framework foundation.\n- A cli runtime entry point is provided, named ``calmjs``.\n- Provide core integration with ``npm`` and generation of\n  ``package.json`` through the ``setuptools`` framework; this is\n  accessible as a ``setuptool`` command or through ``calmjs`` runtime.\n- Provide a registry framework for use within ``calmjs``.\n- Provide core registries for registering packages for use by ``calmjs``\n  through the predefined ``setuptools`` entry points and groups.\n- Provide a cli tool driver framework for interacting with ``node`` and\n  other Node.js based or other command line tools.\n- Provide the base toolchain framework, built on top of the tool driver\n  framework.\n- Provide modules for doing integration testing for modules that build\n  on top of the ``calmjs`` framework.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/calmjs/",
    "keywords": "",
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "calmjs",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/calmjs/",
    "release_url": "https://pypi.org/project/calmjs/2.1.0/",
    "requires_python": null,
    "summary": "A Python framework for building toolchains and utilities for working with the Node.js ecosystem from within a Python environment.",
    "version": "2.1.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b39a5757dba5fcc17118163d35166be9",
          "sha256": "06723a5846b549142d4f8f2f2decf3ee78a39539778135f0fbac66924a11b602"
        },
        "downloads": 468,
        "filename": "calmjs-1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b39a5757dba5fcc17118163d35166be9",
        "packagetype": "bdist_wheel",
        "python_version": "any",
        "size": 95662,
        "upload_time": "2016-09-02T17:42:39",
        "url": "https://files.pythonhosted.org/packages/3b/c5/a53e3005f5f6101f1f79a3285aa3eb32ef89f0209473dd2117e9ac3e4a17/calmjs-1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c2c97b2989f6b91c9c94ed02ca289ab1",
          "sha256": "497fb96321aa77f82d983d5b0d29d40e692f011d621693ba660f5a2fd5674b60"
        },
        "downloads": 326,
        "filename": "calmjs-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c2c97b2989f6b91c9c94ed02ca289ab1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 80865,
        "upload_time": "2016-09-02T17:43:14",
        "url": "https://files.pythonhosted.org/packages/9b/5c/d0458d3bdd706ffcd6010226db898bcde6d454649e5b73431b78ad297106/calmjs-1.0.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1aba5dc8c802a84ffbaa43fddd31f9f3",
          "sha256": "21451b41c13e05bf4eb6afdd21da02bf1107bca67d772cdf9e6d417428b495fc"
        },
        "downloads": 213,
        "filename": "calmjs-1.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "1aba5dc8c802a84ffbaa43fddd31f9f3",
        "packagetype": "bdist_wheel",
        "python_version": "3.4",
        "size": 97307,
        "upload_time": "2016-09-03T14:06:26",
        "url": "https://files.pythonhosted.org/packages/35/0a/80b4197bc86d26f95e4eaba430553aa18348f37947bebe2e9e0aa7f4c05a/calmjs-1.0.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "96d1113f4beed84666c13b99c1c0054c",
          "sha256": "af2303c18f8c0e407517f15f659d44c8c87aa31cd4e9971445a93aa8ebfdd120"
        },
        "downloads": 232,
        "filename": "calmjs-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "96d1113f4beed84666c13b99c1c0054c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 82154,
        "upload_time": "2016-09-03T14:06:22",
        "url": "https://files.pythonhosted.org/packages/f1/b0/be122fb9107c707bd742362d7dc0b08727613144dc66f9888599a80d3e71/calmjs-1.0.2.tar.gz"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "66afd0512d9fa7457ea3b9acf3c5d280",
          "sha256": "317f06feefaf38bb0ba7b76c840a633fa0b3f85ef546f6bd339b54221514e480"
        },
        "downloads": 136,
        "filename": "calmjs-1.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66afd0512d9fa7457ea3b9acf3c5d280",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 97949,
        "upload_time": "2016-09-07T04:17:16",
        "url": "https://files.pythonhosted.org/packages/5a/87/058bd9a2f71373bd6691ff78d3127398cac093af25027d5bec11130c504a/calmjs-1.0.3-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "5233bcb1f8944179a2aaf43d9f224c67",
          "sha256": "b3bce9d5a0ab184af02c5c835d283934747e000f3e08ff5c192908d8c72e2a9f"
        },
        "downloads": 149,
        "filename": "calmjs-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "5233bcb1f8944179a2aaf43d9f224c67",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 82834,
        "upload_time": "2016-09-07T04:17:19",
        "url": "https://files.pythonhosted.org/packages/dd/64/46665fdb68cc97af57a2e8f6aa76def182e084b7046485262afa9fcdf684/calmjs-1.0.3.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0b42413c7c576daa11251518ddb6d2bd",
          "sha256": "a827fb816b1ca62fe38fe2d24e8ae0e2da9cc2e233b13c88c209c703458f76b4"
        },
        "downloads": 111,
        "filename": "calmjs-2.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b42413c7c576daa11251518ddb6d2bd",
        "packagetype": "bdist_wheel",
        "python_version": "3.4",
        "size": 142347,
        "upload_time": "2016-11-16T03:51:59",
        "url": "https://files.pythonhosted.org/packages/68/25/57a0ba28f3c5b7a95126b351fe87c0f79b66e8838bda9d02cca41d31cdd3/calmjs-2.0.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "08486a1051bdc43981564964a5d90a53",
          "sha256": "b4928c415914a6d21e86338f096ede66e5fa409104a9421e2e6cd9e777ba6ba4"
        },
        "downloads": 66,
        "filename": "calmjs-2.0.0.zip",
        "has_sig": false,
        "md5_digest": "08486a1051bdc43981564964a5d90a53",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 158827,
        "upload_time": "2016-11-18T05:34:57",
        "url": "https://files.pythonhosted.org/packages/67/f6/c2f2ba683d8d847cb6d6f647c2b3931332133dbcd8428b054818d7848b6c/calmjs-2.0.0.zip"
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "03e6b002f9d79964e1e67fcc33cdb22c",
          "sha256": "ef13cea71c40b94ab67d9f7a7a6d9c6cbd2f58554309b2f7995dc5f300b1af4f"
        },
        "downloads": 53,
        "filename": "calmjs-2.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "03e6b002f9d79964e1e67fcc33cdb22c",
        "packagetype": "bdist_wheel",
        "python_version": "3.4",
        "size": 145248,
        "upload_time": "2016-11-29T04:13:27",
        "url": "https://files.pythonhosted.org/packages/b0/57/e6fe3dfc0b211c8fa91a52a6b8a893ae3c5378ab7d1de3aad31b1c1328f1/calmjs-2.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "cf5ad675297251de9915eb9b91b37f63",
          "sha256": "d7a08843b538960abedc398729967a5a241618cd608b96324cbabdafcb6ce45f"
        },
        "downloads": 51,
        "filename": "calmjs-2.1.0.zip",
        "has_sig": false,
        "md5_digest": "cf5ad675297251de9915eb9b91b37f63",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 162406,
        "upload_time": "2016-11-29T04:13:23",
        "url": "https://files.pythonhosted.org/packages/d7/23/046805323d7cb68dd376c3dffe3fb5c0f6c166a5c624a8b9d90d4b54adb8/calmjs-2.1.0.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "03e6b002f9d79964e1e67fcc33cdb22c",
        "sha256": "ef13cea71c40b94ab67d9f7a7a6d9c6cbd2f58554309b2f7995dc5f300b1af4f"
      },
      "downloads": 53,
      "filename": "calmjs-2.1.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "03e6b002f9d79964e1e67fcc33cdb22c",
      "packagetype": "bdist_wheel",
      "python_version": "3.4",
      "size": 145248,
      "upload_time": "2016-11-29T04:13:27",
      "url": "https://files.pythonhosted.org/packages/b0/57/e6fe3dfc0b211c8fa91a52a6b8a893ae3c5378ab7d1de3aad31b1c1328f1/calmjs-2.1.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "cf5ad675297251de9915eb9b91b37f63",
        "sha256": "d7a08843b538960abedc398729967a5a241618cd608b96324cbabdafcb6ce45f"
      },
      "downloads": 51,
      "filename": "calmjs-2.1.0.zip",
      "has_sig": false,
      "md5_digest": "cf5ad675297251de9915eb9b91b37f63",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 162406,
      "upload_time": "2016-11-29T04:13:23",
      "url": "https://files.pythonhosted.org/packages/d7/23/046805323d7cb68dd376c3dffe3fb5c0f6c166a5c624a8b9d90d4b54adb8/calmjs-2.1.0.zip"
    }
  ]
}