{
  "info": {
    "author": "Jelle Smet",
    "author_email": "development@smetj.net",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "::\n\n              __       __    __\n    .--.--.--|__.-----|  |--|  |--.-----.-----.-----.\n    |  |  |  |  |__ --|     |  _  |  _  |     |  -__|\n    |________|__|_____|__|__|_____|_____|__|__|_____|\n                                       version 2.1.2\n\n    Build composable event pipeline servers with minimal effort.\n\n\n\n    ====================\n    wishbone.output.amqp\n    ====================\n\n    Version: 1.0.0\n\n    Produces messages to AMQP.\n    --------------------------\n\n\n        Submits messages to an AMQP message broker.\n\n        If <exchange> is not provided, no exchange will be created during initialisation.\n        If <queue> is not provided, queue will be created during initialisation\n\n        If <exchange> and <queue> are provided, they will both be created and\n        bound during initialisation.\n\n        <exchange> and <queue> can be event lookup values.\n\n        Parameters:\n\n            - selection(str)(\"@data\")\n               |  The part of the event to submit externally.\n               |  Use an empty string to refer to the complete event.\n\n            - host(str)(\"localhost\")\n               |  The host broker to connect to.\n\n            - port(int)(5672)\n               |  The port to connect to.\n\n            - vhost(str)(\"/\")\n               |  The virtual host to connect to.\n\n            - user(str)(\"guest\")\n               |  The username to authenticate.\n\n            - password(str)(\"guest\")\n               |  The password to authenticate.\n\n            - exchange(str)(\"\")\n               |  The exchange to declare.\n\n            - exchange_type(str)(\"direct\")\n               |  The exchange type to create. (direct, topic, fanout)\n\n            - exchange_durable(bool)(false)\n               |  Declare a durable exchange.\n\n            - exchange_auto_delete(bool)(true)\n               |  If set, the exchange is deleted when all queues have finished using it.\n\n            - exchange_passive(bool)(false)\n               |  If set, the server will not create the exchange. The client can use\n               |  this to check whether an exchange exists without modifying the server state.\n\n            - exchange_arguments(dict)({})\n               |  Additional arguments for exchange declaration.\n\n            - queue(str)(\"wishbone\")\n               |  The queue to declare and bind to <exchange>. This will also the\n               |  the destination queue of the submitted messages unless\n               |  <routing_key> is set to another value and <exchange_type> is\n               |  \"topic\".\n\n            - queue_durable(bool)(false)\n               |  Declare a durable queue.\n\n            - queue_exclusive(bool)(false)\n               |  Declare an exclusive queue.\n\n            - queue_auto_delete(bool)(true)\n               |  Whether to autodelete the queue.\n\n            - queue_declare(bool)(true)\n               |  Whether to actually declare the queue.\n\n            - queue_arguments(dict)({})\n               |  Additional arguments for queue declaration.\n\n            - routing_key(str)(\"\")\n               |  The routing key to use when submitting messages.\n\n            - delivery_mode(int)(1)\n               |  Sets the delivery mode of the messages.\n\n\n        Queues:\n\n            - inbox\n               | Messages going to the defined broker.\n\n",
    "docs_url": null,
    "download_url": "https://github.com/smetj/wishbone-output-amqp/tarball/master",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/smetj/wishbone-output-amqp",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wishbone_output_amqp",
    "platform": "Linux",
    "project_url": "https://pypi.org/project/wishbone_output_amqp/",
    "release_url": "https://pypi.org/project/wishbone_output_amqp/1.1.1/",
    "requires_python": "",
    "summary": "A Wishbone output module to produces messages to AMQP.",
    "version": "1.1.1"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ecf4172d9b4030c160e8a6a16e92fd30",
          "sha256": "1e335f2bb770af742da1d10d4f95d37b7adb364bdbeb13ef9bdfc03ed9164042"
        },
        "downloads": 455,
        "filename": "wishbone_output_amqp-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ecf4172d9b4030c160e8a6a16e92fd30",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4517,
        "upload_time": "2016-03-28T13:33:19",
        "url": "https://files.pythonhosted.org/packages/43/02/f3a5510071baf9d65bdf6ecc6d501668c82786c56a3c9f8ff73e555cc1c3/wishbone_output_amqp-1.0.0.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d334a859abcc75aa51548060b5cc2384",
          "sha256": "003aa0cb65d13dd9c871a1720439de7db5ae0f7d392d5595de8b0a97820d8e04"
        },
        "downloads": 14,
        "filename": "wishbone_output_amqp-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d334a859abcc75aa51548060b5cc2384",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4524,
        "upload_time": "2017-02-22T20:21:43",
        "url": "https://files.pythonhosted.org/packages/f0/f2/89a9ffb91903183771fcb57c3caa6aa6eba239e224600f47a8a35eb6b355/wishbone_output_amqp-1.1.0.tar.gz"
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "52dd66745cb9320a79b0db751ae4a0c8",
          "sha256": "650c00a6aeed68ff0fa0d69e4e7027b0fafcc7bc6c0f35ca2b4a8aac03da87b4"
        },
        "downloads": 13,
        "filename": "wishbone_output_amqp-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "52dd66745cb9320a79b0db751ae4a0c8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4523,
        "upload_time": "2017-02-23T20:03:04",
        "url": "https://files.pythonhosted.org/packages/7e/f3/ccd3a1480d5679f509f7dde8dac24d28a978f2127fea062268d612c38c3d/wishbone_output_amqp-1.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "52dd66745cb9320a79b0db751ae4a0c8",
        "sha256": "650c00a6aeed68ff0fa0d69e4e7027b0fafcc7bc6c0f35ca2b4a8aac03da87b4"
      },
      "downloads": 13,
      "filename": "wishbone_output_amqp-1.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "52dd66745cb9320a79b0db751ae4a0c8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4523,
      "upload_time": "2017-02-23T20:03:04",
      "url": "https://files.pythonhosted.org/packages/7e/f3/ccd3a1480d5679f509f7dde8dac24d28a978f2127fea062268d612c38c3d/wishbone_output_amqp-1.1.1.tar.gz"
    }
  ]
}