{
  "info": {
    "author": "Tudor Brindus",
    "author_email": "tbrindus@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Topic :: Artistic Software"
    ],
    "description": "cube2sphere\n===========\n\n``cube2sphere`` is a Python script to map 6 cube (cubemap, skybox)\nfaces into an equirectangular (cylindrical projection, skysphere) map.\n\nUsage\n=====\n\n::\n\n    $ cube2sphere -h\n    usage: cube2sphere [-h] [-v] [-r <width> <height>] [-R <rx> <ry> <rz>]\n                   [-o <path>] [-f <name>] [-b <path>] [-t <count>] [-V]\n                   <front> <back> <right> <left> <top> <bottom>\n\n    Maps 6 cube (cubemap, skybox) faces into an equirectangular (cylindrical\n    projection, skysphere) map.\n\n    positional arguments:\n      <front>               source front cube face filename\n      <back>                source back cube face filename\n      <right>               source right cube face filename\n      <left>                source left cube face filename\n      <top>                 source top cube face filename\n      <bottom>              source bottom cube face filename\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -v, --version         show program's version number and exit\n      -r <width> <height>, --resolution <width> <height>\n                            resolution for rendered map (defaults to 1024x512)\n      -R <rx> <ry> <rz>, --rotation <rx> <ry> <rz>\n                            rotation in degrees to apply before rendering map (z\n                            is up)\n      -o <path>, --output <path>\n                            filename for rendered map (defaults to \"out\")\n      -f <name>, --format <name>\n                            format to use when saving map, i.e. \"PNG\" or \"TGA\"\n      -b <path>, --blender-path <path>\n                            filename of the Blender executable (defaults to\n                            \"blender\")\n      -t <count>, --threads <count>\n                            number of threads to use when rendering (1-64)\n      -V, --verbose         enable verbose logging\n\nSupported output formats depend on the Blender installation, but will\ngenerally include TGA, IRIS, JPEG, MOVIE, IRIZ, RAWTGA, AVIRAW, AVIJPEG, PNG,\nBMP, and FRAMESERVER.\n\n``cube2sphere`` can be run in a headless environment (e.g., a\nserver).\n\nExamples\n========\n\nIf we wanted to stitch 6 cube faces named ``${face}.jpg`` into a 2048x1024 TGA equirectangular map, we could use the following command:\n\n::\n\n    $ cube2sphere front.jpg back.jpg right.jpg left.jpg top.jpg bottom.jpg -r 2048 1024 -fTGA -ostitched\n\nThis would generate ``stitched.tga`` in the working directory.\n\nInstallation\n============\n\n``cube2sphere`` can be easily installed with ``pip``.\n\nIt assumes that Blender is installed and the ``blender`` executable is listed in the system PATH environment variable. If it is not possible for PATH to be edited (as in the case of an unprivileged user), the path to the ``blender`` executable may instead be passed through the ``-b`` flag.\n\nWindows\n-------\n\nInstall `Blender`_, and add ``blender.exe`` to ``PATH``. Finally,\n\n::\n\n    pip install cube2sphere\n\nLinux\n-----\n\n::\n\n    $ apt-get install blender\n    $ pip install cube2sphere\n\nMac OS X\n--------\n\nSimilar to Windows, install `Blender`_, and add the ``blender`` executable to ``$PATH``. Then,\n\n::\n\n    $ pip install cube2sphere\n\n.. _Blender: https://www.blender.org/",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/Xyene/cube2sphere",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "cube2sphere",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/cube2sphere/",
    "release_url": "https://pypi.org/project/cube2sphere/0.1.9/",
    "requires_python": null,
    "summary": "Utility to map 6 cube (cubemap, skybox) faces into an equirectangular (cylindrical projection, skysphere) map",
    "version": "0.1.9"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2f05a12c4126399179f1222cea257729",
          "sha256": "4f756869761e53f7ba7760f151c420c33f27a3848776cc9d3ad21d239207b6f0"
        },
        "downloads": 248,
        "filename": "cube2sphere-0.1.0.zip",
        "has_sig": false,
        "md5_digest": "2f05a12c4126399179f1222cea257729",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 150513,
        "upload_time": "2016-05-20T20:55:48",
        "url": "https://files.pythonhosted.org/packages/40/62/6b4a94604529445b948a393d1a3fbe6b12bbbfe465b61bbdb99a2636b199/cube2sphere-0.1.0.zip"
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "58b7a97b620532e36f91ff4b11961f62",
          "sha256": "74c7f21ee05a740050decfb735b3ce0a3afcba58c218e7ab243ff3ade68d098d"
        },
        "downloads": 400,
        "filename": "cube2sphere-0.1.8.zip",
        "has_sig": false,
        "md5_digest": "58b7a97b620532e36f91ff4b11961f62",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 150581,
        "upload_time": "2016-08-19T16:50:22",
        "url": "https://files.pythonhosted.org/packages/bc/75/2b15429b51969ea4ce5f50ae560a7c86000ee40c72adffc506ebea53763e/cube2sphere-0.1.8.zip"
      }
    ],
    "0.1.9": []
  },
  "urls": []
}