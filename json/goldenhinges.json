{
  "info": {
    "author": "Zulko",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": ".. image:: https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/GoldenHinges/master/docs/_static/images/title.png\n   :alt: [logo]\n   :align: center\n   :width: 600px\n\nGolden Hinges\n==============\n\n.. image:: https://travis-ci.org/Edinburgh-Genome-Foundry/GoldenHinges.svg?branch=master\n   :target: https://travis-ci.org/Edinburgh-Genome-Foundry/GoldenHinges\n   :alt: Travis CI build status\n\nGolden Hinges (full documentation `here <https://edinburgh-genome-foundry.github.io/GoldenHinges/>`_) is a Python library to find sets\nof overhangs (also called junctions, or protusions) for multipart DNA assembly\nsuch as Golden Gate assembly.\n\nGiven a set of constraints (GC content bounds, differences between overhangs,\nmandatory and forbidden overhangs) Golden Hinges enables to find:\n- Maximal sets of valid and inter-compatible overhangs.\n- Sequence decompositions (i.e. position of cuts) which produce valid and\n  inter-compatible overhangs, for type-2S DNA assembly.\n- Sequence mutations (subject to constraints) which enable the sequence\n  decomposition, in exterme cases where the original sequence does not allow\n  for such decomposition.\n\nYou can see Golden Hinges in action in this\n`web demo <http://cuba.genomefoundry.org/#/design-overhangs>`_:\n\nExamples of use\n----------------\n\nFinding maximal overhangs sets\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nLet us compute a collection of overhangs, as large as possible, where\n\n- All overhangs have 25-75 GC%\n- There is a 2-basepair difference between any two overhangs (and their reverse-complement)\n- The overhangs ``ATGC`` and ``CCGA`` are forbidden\n\nHere is the code\n\n.. code:: python\n\n  from goldenhinges import OverhangsSelector\n  selector = OverhangsSelector(gc_min=0.25, gc_max=0.5, differences=2,\n                               forbidden_overhangs=['ATGC', 'CCGA'])\n  overhangs = selector.generate_overhangs_set()\n  print (overhangs)\n\nResult:\n\n.. code:: python\n\n  >>> ['AACG', 'CAAG', 'ACAC', 'TGAC', 'ACGA', 'AGGT', 'TGTG', 'ATCC', 'AAGC',\n       'AGTC', 'TCTC', 'TAGG', 'AGCA', 'GTAG', 'TGGA', 'ACTG', 'GAAC', 'TCAG',\n       'ATGG', 'TTGC', 'TTCG', 'GATG', 'AGAG', 'TACC']\n\nIn some cases this may take some time to complete, as the algorithm slowly builds\ncollections of increasing sizes. An alternative algorithm consisting in finding\nrandom maximal sets of compatible overhangs is much faster, but gives suboptimal\nsolutions:\n\n.. code:: python\n\n    overhangs = selector.generate_overhangs_set(n_cliques=5000)\n\nResult:\n\n.. code:: python\n\n  >>> ['CAAA', 'GTAA', 'ATTC', 'AATG', 'ACAT', 'ATCA', 'AGAG', 'GCTT', 'AGTT',\n       'TCGT', 'CTGA', 'TGGA', 'TAGG', 'GGTA', 'GACA']\n\nThe two approaches can be combined to first find an approximate solution, then\nattempt to find larger sets:\n\n.. code:: python\n\n    test_overhangs = selector.generate_overhangs_set(n_cliques=5000)\n    overhangs = selector.generate_overhangs_set(start_at=len(test_overhangs))\n\n\nFinding a sequence decomposition\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n\nIn this example, we find where to cut a 50-kilobasepair sequence to create\nassemblable fragments with 4-basepair overhangs. We indicate that:\n\n- There should be 50 fragments, with a minimum of variance in their sizes.\n- The fragments overhangs should have 25-75 GC% with a 1-basepair difference\n  between any two overhangs (and their reverse-complement). They should also be\n  compatible with the 4-basepair extremities of the sequence.\n\n.. code:: python\n\n    from Bio import SeqIO\n    from goldenhinges import OverhangsSelector\n\n    sequence = SeqIO.read\n    selector = OverhangsSelector(gc_min=0.25, gc_max=0.75, differences=1)\n    solution = selector.cut_sequence(sequence, equal_segments=50,\n                                     max_radius=20, include_extremities=True)\n\nThis returns a list of dictionnaries, each representing one overhang with\nproperties ``o['location']`` (coordinate of the overhang in the sequence)\nand ``o['sequence']`` (sequence of the overhang).\n\nThis solution can be turned into a full report featuring all sequences to order\n(with restriction sites added on the left and right flanks), and a graphic of\nthe overhang's positions, using the following function:\n\n\n.. code:: python\n\n    from goldenhinges.reports import write_report_for_cutting_solution\n\n    write_report_for_cutting_solution(solution, 'full_report.zip', sequence,\n                                      left_flank='CGTCTCA',\n                                      right_flank='TGAGACG',\n                                      display_positions=False)\n\nSequence mutation and decomposition from a Genbank file\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf the input sequence is a Genbank record (or a Biopython record) has locations\nannotated vy features feature labeled ``!cut``, GoldenHinges will attempt to\nfind a decomposition with exactly one cut in each of these locations (favoring\ncuts located near the middle of each region).\n\nGoldenHinges also allows to modify the sequence to enable some decomposition.\nNote that solutions involving base changes are penalized and solutions involving\nthe original solution will always be prefered, so no base change will be\nsuggested unless strictly necessary.\n\nIf the input record has `DnaChisel <https://github.com/Edinburgh-Genome-Foundry/DnaChisel>`_\nannotations such as ``@AvoidChanges`` or ``@EnforceTranslation``, these will be\nenforced to forbid some mutations.\n\nHere is an example of such a record:\n\n.. image:: https://raw.githubusercontent.com/Edinburgh-Genome-Foundry/GoldenHinges/master/examples/data/sequence_with_constraints.png\n   :alt: [sequence with constraints]\n   :align: center\n   :width: 672px\n\nAnd here is the code to optimize and decompose it:\n\n.. code:: python\n\n    record = SeqIO.read(genbank_file, 'genbank')\n    selector = OverhangsSelector(gc_min=0.25, gc_max=0.75, differences=2)\n    solution = selector.cut_sequence(record, allow_edits=True,\n                                     include_extremities=True)\n\nInstallation\n--------------\n\nInstall Numberjack's dependencies first:\n\n.. code:: python\n\n    sudo apt install python-dev swig libxml2-dev zlib1g-dev libgmp-dev\n\nIf you have PIP installed, just type in a terminal:\n\n.. code:: python\n\n    (sudo) pip install goldenhinges\n\nGolden Hinges can be installed by unzipping the source code in one directory and\nusing this command:\n\n.. code:: python\n\n    sudo python setup.py install\n\n\n\nContribute !\n--------------\n\nGolden Hinges is an open-source software originally written at the\n`Edinburgh Genome Foundry <http://edinburgh-genome-foundry.github.io/home.html>`_\nby `Zulko <https://github.com/Zulko>`_ and\n`released on Github <https://github.com/Edinburgh-Genome-Foundry/GoldenHinges>`_\nunder the MIT licence. Everyone is welcome to contribute !\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "golden gate assembly overhangs constraint programming",
    "license": "see LICENSE.txt",
    "maintainer": "",
    "maintainer_email": "",
    "name": "goldenhinges",
    "platform": "",
    "project_url": "https://pypi.org/project/goldenhinges/",
    "release_url": "https://pypi.org/project/goldenhinges/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d7d577940823058b920e4b1ffaaddf29",
          "sha256": "bc90163428767706b1758d6caca1a68502f6a4e69b8cd0a83e04fb154d7425c0"
        },
        "downloads": 0,
        "filename": "goldenhinges-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d7d577940823058b920e4b1ffaaddf29",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 204484,
        "upload_time": "2017-10-04T15:30:09",
        "url": "https://files.pythonhosted.org/packages/ea/a8/0db366d9235f24a4426daaf9b81a297693be62229c093228a5ffc02449c5/goldenhinges-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d7d577940823058b920e4b1ffaaddf29",
        "sha256": "bc90163428767706b1758d6caca1a68502f6a4e69b8cd0a83e04fb154d7425c0"
      },
      "downloads": 0,
      "filename": "goldenhinges-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d7d577940823058b920e4b1ffaaddf29",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 204484,
      "upload_time": "2017-10-04T15:30:09",
      "url": "https://files.pythonhosted.org/packages/ea/a8/0db366d9235f24a4426daaf9b81a297693be62229c093228a5ffc02449c5/goldenhinges-0.1.0.tar.gz"
    }
  ]
}