{
  "info": {
    "author": "Emil Karlen",
    "author_email": "emil@member.fsf.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Testing",
      "Topic :: System :: Systems Administration"
    ],
    "description": "Tests a command line program by executing it in a temporary sandbox directory and inspecting its result.\n\nOr tests properties of existing files, directories etc.\n\n\nSupports individual test cases and test suites.\n\nExactly has a `Wiki\n<https://github.com/emilkarlen/exactly/wiki>`_,\nand an `introduction by examples\n<https://github.com/emilkarlen/exactly/wiki/Exactly-by-example>`_.\n\nIt also has a built in help system,\nwhich can, among other things,\ngenerate this `Reference manual\n<http://htmlpreview.github.io/?https://raw.githubusercontent.com/wiki/emilkarlen/exactly/Reference.html>`_.\n\n\n.. contents::\n\n\nTEST CASES\n========================================\n\nA test case is written as a plain text file.\n\n\nTesting stdin, stdout, stderr, exit code\n------------------------------------------------------------\n\nThe following checks that your new ``my-contacts-program`` reads a contact list from stdin,\nand is able to find the email of a person::\n\n    [setup]\n\n    stdin --file some-test-contacts.txt\n\n    [act]\n\n    my-contacts-program get-email-of --name 'Pablo Gauss'\n\n    [assert]\n\n    exitcode = 0\n\n    stdout equals <<EOF\n    pablo@gauss.org\n    EOF\n\n    stderr empty\n\n\nIf the file 'contacts.case' contains this test case, then Exactly can execute it::\n\n\n    > exactly contacts.case\n    PASS\n\n\n\"PASS\" means that all assertions were satisfied.\n\nThis test assumes that\n\n * the system under test - ``my-contacts-program`` - is is found in the same directory as the test case file\n * the file \"some-test-contacts.txt\" (that is referenced from the test case) is found in the same directory as the test case file\n\nThe ``home`` and ``act-home`` instructions\ncan be used to change the directories where Exactly looks for files referenced from the test case.\n\n\nTesting side effects on files and directories\n------------------------------------------------------------\n\nA test case is executed in a temporary sandbox directory,\nso files and directories can be created and deleted\nwithout modifying a source code repo.\n\nThe following tests a program that classifies\nfiles as either good or bad, by moving them to the\nappropriate output directory::\n\n    [setup]\n\n    dir input-files\n    dir output-files/good\n    dir output-files/bad\n\n    file input-files/a.txt <<EOF\n    GOOD contents\n    EOF\n\n    file input-files/b.txt <<EOF\n    bad contents\n    EOF\n\n    [act]\n\n    classify-files-by-moving-to-appropriate-dir GOOD .\n\n    [assert]\n\n    dir-contents input-files empty\n\n    exists --file output-files/good/a.txt\n    dir-contents  output-files/good num-files = 1\n\n    exists --file output-files/bad/b.txt\n    dir-contents  output-files/bad num-files = 1\n\n\nTesting and transforming the contents of files\n------------------------------------------------------------\n\nThe ``contents`` instruction tests the contents of a file.\nIt can also test a transformed version of a file,\nby applying a \"file transformer\".\n\nSuch a \"file transformer\" may be given a name\nusing the ``def`` instruction\nto make the test easier to read.\n\nThe following test case\ntests that \"timing lines\" are output as part of a log file \"log.txt\".\n\nThe challenge is that the (fictive) log file contains\nnon-timing lines that we are not interested in,\nand that timing lines contains a time stamp of the form\n\"NN:NN\", whos exact value we are also not interested in.\n\nA \"file transformer\" is used to extract all timing lines\nand to replace \"NN:NN\" time stamps with the constant string ``TIMESTAMP``::\n\n\n    [act]\n\n    my-system-under-test-that-writes-log-file\n\n    [assert]\n\n    contents log.txt --transformed GET_TIMING_LINES equals <<EOF\n    timing TIMESTAMP begin\n    timing TIMESTAMP preprocessing\n    timing TIMESTAMP validation\n    timing TIMESTAMP execution\n    timing TIMESTAMP end\n    EOF\n\n    [setup]\n\n    def line-matcher     IS_TIMING_LINE     = regex ^timing\n\n    def file-transformer REPLACE_TIMESTAMPS = replace [0-9]{2}:[0-9]{2} TIMESTAMP\n\n    def file-transformer GET_TIMING_LINES   = select IS_TIMING_LINE | REPLACE_TIMESTAMPS\n\n\nThe ``--transformed`` option does not modify the tested file,\nit just applies the assertion to a transformed version of it.\n\n\nUsing shell commands\n--------------------\n\nShell commands can be used both in the \"act\" phase (the system under test), and in other phases, using \"$\".\n\n::\n\n    [setup]\n\n    $ touch file\n\n    [act]\n\n    $ echo ${PATH}\n\n    [assert]\n\n    $ tr ':' '\\n' < ../result/stdout | grep '^/usr/local/bin$'\n\n\nA shell command in the \"assert\" phase becomes an assertion that depends on the exit code\nof the command.\n\n\nTesting source code files\n-------------------------\n\nThe ``actor`` instruction can specify an interpreter to test a source code file::\n\n    [conf]\n\n    actor = --file python\n\n    [act]\n\n    my-python-program.py 'an argument'\n\n    [assert]\n\n    stdout equals <<EOF\n    Arguments: an argument\n    EOF\n\n\n\nExperimenting with source code\n------------------------------\n\nThe \"source interpreter\" actor treats the contents of the \"act\" phase as source code.\nIt's probably most useful as a tool for experimenting::\n\n    [conf]\n\n    actor = --source bash\n\n    [act]\n\n    var='hello world'\n    echo ${var:5}\n\n    [assert]\n\n    stdout equals <<EOF\n    world\n    EOF\n\nor for running a source file in a sandbox::\n\n    > exactly --actor bash my-script.sh\n    PASS\n\n\nThis is more useful combined with ``--act`` (see below).\n\n\n[act] is the default phase\n--------------------------\n\n\n``[act]`` is not needed to indicate what is being checked, since the \"act\" phase is the default phase.\n\nThe following is a valid test case,\nand if run by Exactly, it won't remove anything, since it is executed inside a temporary sandbox directory::\n\n    $ rm -rf *\n\n\nPrint output from the tested program\n------------------------------------\n\n\nIf ``--act`` is used, the output of the \"act\" phase (the tested program) will become the output of ``exactly`` -\nstdout, stderr and exit code.\n::\n\n    $ echo Hello World\n\n    [assert]\n\n    stdout contains Hello\n\n::\n\n    > exactly --act hello-world.case\n    Hello World\n\n\nThe test case is executed in a sandbox, as usual.\nAnd all phases are executed, not just the \"act\" phase.\nBut the outcome of tha \"assert\" phase is ignored.\n\n\nKeeping the sandbox directory for later inspection\n--------------------------------------------------\n\n\nIf ``--keep`` is used, the sandbox directory will not be deleted, and its name will be printed.\n\nThis can be used to inspect the outcome of the \"setup\" phase, e.g::\n\n    [setup]\n\n    dir  my-dir\n    file my-file.txt\n\n    [act]\n\n    my-prog my-file.txt\n\n    [assert]\n\n    exitcode = 0\n\n::\n\n    > exactly --keep my-test.case\n    /tmp/exactly-1strbro1\n\n    > find /tmp/exactly-1strbro1\n    /tmp/exactly-1strbro1\n    /tmp/exactly-1strbro1/tmp\n    /tmp/exactly-1strbro1/tmp/user\n    /tmp/exactly-1strbro1/tmp/internal\n    /tmp/exactly-1strbro1/testcase\n    /tmp/exactly-1strbro1/act\n    /tmp/exactly-1strbro1/act/my-dir\n    /tmp/exactly-1strbro1/act/my-file.txt\n    /tmp/exactly-1strbro1/result\n    /tmp/exactly-1strbro1/result/exitcode\n    /tmp/exactly-1strbro1/result/stderr\n    /tmp/exactly-1strbro1/result/stdout\n    /tmp/exactly-1strbro1/log\n\nThe ``act/`` directory is the current directory when the test starts.\nThe ``file`` instruction has put the file ``my-file.txt`` there.\n\nThe result of the \"act\" phase is saved in the ``result/`` directory.\n\n``tmp/user/`` is a directory where the test can put temporary files.\n\nTEST SUITES\n========================================\n\n\nTests can be grouped in suites::\n\n\n    first.case\n    second.case\n\nor::\n\n    [cases]\n\n    helloworld.case\n    *.case\n    **/*.case\n\n\n    [suites]\n\n    subsuite.suite\n    *.suite\n    pkg/suite.suite\n    **/*.suite\n\n\nIf the file ``my-suite.suite`` contains this text, then Exactly can run it::\n\n  > exactly suite my-suite.suite\n  ...\n  OK\n\n\nThe result of a suite can also be reported as JUnit XML, by using ``--reporter junit``.\n\n\nHELP\n========================================\n\n\nExactly has a built in help system.\n\n\nUse ``exactly --help`` or ``exactly help`` to get brief help.\n\n``exactly help help`` displays a summary of help options.\n\n``exactly help instructions`` lists the instructions that are available in each \"phase\".\n\n``exactly help htmldoc`` outputs all built in help as html, which serves as Exactly's reference manual.\n\n\nEXAMPLES\n========================================\n\nThe ``examples/`` directory of the source distribution contains examples.\n\nA complex example\n-----------------\n\nThe following test case displays a potpurri of features. (Beware that this test case does not make sense! -\nit just displays some of Exactly's features.)\n::\n\n    [conf]\n\n\n    status = SKIP\n    # This will cause the test case to not be executed.\n\n\n    [setup]\n\n\n    install this-is-an-existing-file-in-same-dir-as-test-case.txt\n\n    dir first/second/third\n\n    file in/a/dir/file-name.txt <<EOF\n    contents of the file\n    EOF\n\n    dir root-dir-for-act-phase\n\n    cd root-dir-for-act-phase\n    # This will be current directory for the \"act\" phase.\n\n    stdin <<EOF\n    this will be stdin for the program in the \"act\" phase\n    EOF\n    # (It is also possible to have stdin redirected to an existing file.)\n\n    env MY_VAR = 'value of my environment variable'\n\n    env PATH = '${PATH}:/my-dir'\n\n    env unset VARIABLE_THAT_SHOULD_NOT_BE_SET\n\n    run my-prog--located-in-same-dir-as-test-case--that-does-some-more-setup 'with an argument'\n\n    run --python --interpret custom-setup.py 'with an argument'\n\n    run ( --python -c ) --source print('Setting up things...')\n\n\n    [act]\n\n\n    the-system-under-test\n\n\n    [before-assert]\n\n\n    cd ..\n    # Moves back to the original current directory.\n\n    $ sort root-dir-for-act-phase/output-from-sut.txt > sorted.txt\n\n\n    [assert]\n\n\n    exitcode != 0\n\n    stdout equals <<EOF\n    This is the expected output from the-system-under-test\n    EOF\n\n    stdout --transformed REPLACE_TEST_CASE_DIRS any line matches regex 'EXACTLY_ACT:[0-9]+'\n\n    stderr empty\n\n    contents a-file.txt empty\n\n    contents a-second-file.txt ! empty\n\n    contents another-file.txt --transformed REPLACE_TEST_CASE_DIRS equals --file expected-content.txt\n\n    contents file.txt any line matches regex 'my .* reg ex'\n\n    exists actual-file\n\n    exists --dir actual-file\n\n    cd this-dir-is-where-we-should-be-for-the-following-assertions\n\n    run my-prog--located-in-same-dir-as-test-case--that-does-some-assertions\n\n    run --python --interpret custom-assertion.py\n\n\n    cd --rel-result\n    # Changes to the directory where the result of the act phase is stored (exitcode, stdout, stderr)\n\n    $ sed '1,10d' stdout > modified-stdout.txt\n    contents modified-stdout.txt equals <<EOF\n    this should be the single line of modified-stdout.txt\n    EOF\n\n\n    [cleanup]\n\n\n    $ umount my-test-mount-point\n\n    run my-prog-that-removes-database 'my test database'\n\n\nINSTALLING\n========================================\n\n\nExactly is written in Python and does not require any external libraries.\n\nExactly requires Python >= 3.5 (not tested on earlier version of Python 3).\n\nUse ``pip`` or ``pip3`` to install::\n\n    > pip install exactly\n\nor::\n\n    > pip3 install exactly\n\nThe program can also be run from a source distribution::\n\n    > python3 src/default-main-program-runner.py\n\n\nDEVELOPMENT STATUS\n========================================\n\n\nCurrent version is fully functional, but syntax and semantics are experimental.\n\nComments are welcome!\n\n\nAUTHOR\n========================================\n\n\nEmil Karl\u00e9n\n\nemil@member.fsf.org\n\n\nTHANKS\n========================================\n\n\nThe Python IDE\n`PyCharm\n<https://www.jetbrains.com/pycharm/>`_\nfrom\n`JetBrains\n<https://www.jetbrains.com/>`_\nhas greatly helped the development of this software.\n\n\nDEDICATION\n========================================\n\n\nAron Karl\u00e9n\n\nTommy Karlsson\n\nG\u00f6tabergsgatan 10, l\u00e4genhet 4\n\n\n",
    "docs_url": "https://pythonhosted.org/exactly/",
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/emilkarlen/exactly/wiki",
    "keywords": "test case suite check assert script shell console command line program execute sandbox",
    "license": "GPLv3+",
    "maintainer": "",
    "maintainer_email": "",
    "name": "exactly",
    "platform": "",
    "project_url": "https://pypi.org/project/exactly/",
    "release_url": "https://pypi.org/project/exactly/0.8.6.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Tests a command line program by executing it in a temporary sandbox directory and inspecting its result.",
    "version": "0.8.6.1"
  },
  "releases": {
    "0.8.6.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6cd6115cc0ae24f40312561f4d31027e",
          "sha256": "0159eb2e4cc79c05228cf89abc150c82d0eab1578c74d52dc65e2d48eb1949bd"
        },
        "downloads": -1,
        "filename": "exactly-0.8.6.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6cd6115cc0ae24f40312561f4d31027e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 566476,
        "upload_time": "2017-12-04T23:03:30",
        "url": "https://files.pythonhosted.org/packages/0c/49/b78c53db127ebac3b15de7fdb8c6c09df33a6c7fb91841907fb61f579480/exactly-0.8.6.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a402c07b71c4ede8a1b8beec5fb78e6e",
          "sha256": "d3d8afc1d7983e45cc3b9ac58b7d9b7afb3835c09811b838bb517360c4240678"
        },
        "downloads": -1,
        "filename": "exactly-0.8.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a402c07b71c4ede8a1b8beec5fb78e6e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 344658,
        "upload_time": "2017-12-04T23:03:32",
        "url": "https://files.pythonhosted.org/packages/23/2d/f43b517663d653c19a83a011a496b74966ef6e3bffbfe5324b8017c6a366/exactly-0.8.6.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6cd6115cc0ae24f40312561f4d31027e",
        "sha256": "0159eb2e4cc79c05228cf89abc150c82d0eab1578c74d52dc65e2d48eb1949bd"
      },
      "downloads": -1,
      "filename": "exactly-0.8.6.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "6cd6115cc0ae24f40312561f4d31027e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 566476,
      "upload_time": "2017-12-04T23:03:30",
      "url": "https://files.pythonhosted.org/packages/0c/49/b78c53db127ebac3b15de7fdb8c6c09df33a6c7fb91841907fb61f579480/exactly-0.8.6.1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "a402c07b71c4ede8a1b8beec5fb78e6e",
        "sha256": "d3d8afc1d7983e45cc3b9ac58b7d9b7afb3835c09811b838bb517360c4240678"
      },
      "downloads": -1,
      "filename": "exactly-0.8.6.1.tar.gz",
      "has_sig": false,
      "md5_digest": "a402c07b71c4ede8a1b8beec5fb78e6e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 344658,
      "upload_time": "2017-12-04T23:03:32",
      "url": "https://files.pythonhosted.org/packages/23/2d/f43b517663d653c19a83a011a496b74966ef6e3bffbfe5324b8017c6a366/exactly-0.8.6.1.tar.gz"
    }
  ]
}