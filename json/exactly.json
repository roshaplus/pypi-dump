{
  "info": {
    "author": "Emil Karlen",
    "author_email": "emil@member.fsf.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Testing",
      "Topic :: System :: Systems Administration"
    ],
    "description": "Tests a command line program by executing it in a temporary sandbox directory and inspecting its result.\n\nSupports individual test cases and test suites.\n\nExactly has a `Wiki\n<https://github.com/emilkarlen/exactly/wiki>`_,\nand an `introduction by examples\n<https://github.com/emilkarlen/exactly/wiki/Exactly-by-example>`_.\n\nIt also has a `Reference manual\n<http://pythonhosted.org/exactly/>`_.\n\n\n.. contents::\n\n\nTEST CASES\n==========\n\nA test case is written as a plain text file.\nThe following checks that your new ``addressbook`` program reads an address book from stdin,\nand is able to find an address::\n\n    [setup]\n\n    stdin a-test-address-book.txt\n\n    [act]\n\n    addressbook --get-email-of --name 'Test Testingson'\n\n    [assert]\n\n    exitcode 0\n\n    stdout equals <<EOF\n    expected@email.org\n    EOF\n\n\nIf the file 'addressbook.case' contains this test case, then Exactly can execute it::\n\n\n    > exactly addressbook.case\n    PASS\n\n\n\"PASS\" means that the two assertions were satisfied.\n\nThis test assumes that\n\n * the system under test - the ``addressbook`` program - is is found in the same directory as the test case file\n * the file \"an-address-book.txt\" (that is referenced from the test case) is found in the same directory as the test case file\n\nThe ``home`` instruction can be used to change the directory where Exactly looks for files referenced from the test case.\n\n\nUsing shell commands\n--------------------\n\nShell commands can be used both in the \"act\" phase (the system under test), and in other phases, using \"$\".\n\n::\n\n    [setup]\n\n    $ touch file\n\n    [act]\n\n    $ echo ${PATH}\n\n    [assert]\n\n    $ tr ':' '\\n' < ../result/stdout | grep '^/usr/local/bin$'\n\n\nA shell command in the \"assert\" phase becomes an assertion that depends on the exit code\nof the command.\n\n\nTesting source code files\n-------------------------\n\nThe ``actor`` instruction can specify an interpreter to test a source code file::\n\n    [conf]\n\n    actor --file python\n\n    [act]\n\n    my-python-program.py 'an argument'\n\n    [assert]\n\n    stdout equals <<EOF\n    Arguments: an argument\n    EOF\n\n\n\nExperimenting with source code\n------------------------------\n\nThe \"source interpreter\" actor treats the contents of the \"act\" phase as source code.\nIt's probably most useful as a tool for experimenting::\n\n    [conf]\n\n    actor --source bash\n\n    [act]\n\n    var='hello world'\n    echo ${var:5}\n\n    [assert]\n\n    stdout equals <<EOF\n    world\n    EOF\n\nor for running a source file in a sandbox::\n\n    > exactly --actor bash my-script.sh\n    PASS\n\n\nThis is more useful combined with ``--act`` (see below).\n\n\n[act] is the default phase\n--------------------------\n\n\n``[act]`` is not needed to indicate what is being checked, since the \"act\" phase is the default phase.\n\nThe following is a valid test case,\nand if run by Exactly, it won't remove anything, since it is executed inside a temporary sandbox directory::\n\n    $ rm -rf *\n\n\nPrint output from the tested program\n------------------------------------\n\n\nIf ``--act`` is used, the output of the \"act\" phase (the tested program) will become the output of ``exactly`` -\nstdout, stderr and exit code.\n::\n\n    $ echo Hello World\n\n    [assert]\n\n    stdout contains Hello\n\n::\n\n    > exactly --act hello-world.case\n    Hello World\n\n\nThe test case is executed in a sandbox, as usual.\nAnd all phases are executed, not just the \"act\" phase.\nBut the outcome of tha \"assert\" phase is ignored.\n\n\nKeeping the sandbox directory for later inspection\n--------------------------------------------------\n\n\nIf ``--keep`` is used, the sandbox directory will not be deleted, and its name will be printed.\n\nThis can be used to inspect the outcome of the \"setup\" phase, e.g::\n\n    [setup]\n\n    dir  my-dir\n    file my-file.txt\n\n    [act]\n\n    my-prog my-file.txt\n\n    [assert]\n\n    exitcode 0\n\n::\n\n    > exactly --keep my-test.case\n    /tmp/exactly-1strbro1\n\n    > find /tmp/exactly-1strbro1\n    /tmp/exactly-1strbro1\n    /tmp/exactly-1strbro1/tmp\n    /tmp/exactly-1strbro1/tmp/user\n    /tmp/exactly-1strbro1/tmp/internal\n    /tmp/exactly-1strbro1/testcase\n    /tmp/exactly-1strbro1/act\n    /tmp/exactly-1strbro1/act/my-dir\n    /tmp/exactly-1strbro1/act/my-file.txt\n    /tmp/exactly-1strbro1/result\n    /tmp/exactly-1strbro1/result/exitcode\n    /tmp/exactly-1strbro1/result/stderr\n    /tmp/exactly-1strbro1/result/stdout\n    /tmp/exactly-1strbro1/log\n\nThe ``act/`` directory is the current directory when the test starts.\nThe ``file`` instruction has put the file ``my-file.txt`` there.\n\nThe result of the \"act\" phase is saved in the ``result/`` directory.\n\n``tmp/user/`` is a directory where the test can put temporary files.\n\nTEST SUITES\n===========\n\n\nTests can be grouped in suites::\n\n\n    first.case\n    second.case\n\nor::\n\n    [cases]\n\n    helloworld.case\n    *.case\n    **/*.case\n\n\n    [suites]\n\n    subsuite.suite\n    *.suite\n    pkg/suite.suite\n    **/*.suite\n\n\nIf the file ``mysuite.suite`` contains this text, then Exactly can run it::\n\n  > exactly suite mysuite.suite\n  ...\n  OK\n\n\nThe result of a suite can also be reported as JUnit XML, by using ``--reporter junit``.\n\n\nHELP\n====\n\n\nExactly has a built in help system.\n\n\nUse ``exactly --help`` or ``exactly help`` to get brief help.\n\n``exactly help help`` displays a summary of help options.\n\n``exactly help instructions`` lists the instructions that are available in each \"phase\".\n\n``exactly help htmldoc`` outputs all built in help as html, which serves as Exactly's reference manual.\n\n\nEXAMPLES\n========\n\nThe ``examples/`` directory of the source distribution contains examples.\n\nA complex example\n-----------------\n\nThe following test case displays a potpurri of features. (Beware that this test case does not make sense! -\nit just displays some of Exactly's features.)\n::\n\n    [conf]\n\n\n    mode SKIP\n    # This will cause the test case to not be executed.\n\n\n    [setup]\n\n\n    install this-is-an-existing-file-in-same-dir-as-test-case.txt\n\n    dir first/second/third\n\n    file in/a/dir/file-name.txt <<EOF\n    contents of the file\n    EOF\n\n    dir root-dir-for-act-phase\n\n    cd root-dir-for-act-phase\n    # This will be current directory for the \"act\" phase.\n\n    stdin <<EOF\n    this will be stdin for the program in the \"act\" phase\n    EOF\n    # (It is also possible to have stdin redirected to an existing file.)\n\n    env MY_VAR = 'value of my environment variable'\n\n    env PATH = '${PATH}:/my-dir'\n\n    env unset VARIABLE_THAT_SHOULD_NOT_BE_SET\n\n    run my-prog--located-in-same-dir-as-test-case--that-does-some-more-setup 'with an argument'\n\n    run --python --interpret custom-setup.py 'with an argument'\n\n    run ( --python -c ) --source print('Setting up things...')\n\n\n    [act]\n\n\n    the-system-under-test\n\n\n    [before-assert]\n\n\n    cd ..\n    # Moves back to the original current directory.\n\n    $ sort root-dir-for-act-phase/output-from-sut.txt > sorted.txt\n\n\n    [assert]\n\n\n    exitcode != 0\n\n    stdout equals <<EOF\n    This is the expected output from the-system-under-test\n    EOF\n\n    stdout --with-replaced-env-vars contains 'EXACTLY_ACT:[0-9]+'\n\n    stderr empty\n\n    contents a-file.txt empty\n\n    contents a-second-file.txt ! empty\n\n    contents another-file.txt --with-replaced-env-vars equals expected-content.txt\n\n    contents file.txt contains 'my .* reg ex'\n\n    type actual-file directory\n\n    cd this-dir-is-where-we-should-be-for-the-following-assertions\n\n    run my-prog--located-in-same-dir-as-test-case--that-does-some-assertions\n\n    run --python --interpret custom-assertion.py\n\n\n    cd --rel-result\n    # Changes to the directory where the result of the act phase is stored (exitcode, stdout, stderr)\n\n    $ sed '1,10d' stdout > modified-stdout.txt\n    contents modified-stdout.txt equals <<EOF\n    this should be the single line of modified-stdout.txt\n    EOF\n\n\n    [cleanup]\n\n\n    $ umount my-test-mount-point\n\n    run my-prog-that-removes-database 'my test database'\n\n\nINSTALLING\n==========\n\n\nExactly is written entirely in Python and does not require any external libraries.\n\nExactly requires Python >= 3.5 (not tested on earlier version of Python 3).\n\nUse ``pip`` or ``pip3`` to install::\n\n    > pip install exactly\n\nor::\n\n    > pip3 install exactly\n\nThe program can also be run from a source distribution::\n\n    > python3 src/default-main-program-runner.py\n\n\nDEVELOPMENT STATUS\n==================\n\n\nCurrent version is fully functional, but syntax and semantics are experimental.\n\nComments are welcome!\n\n\nAUTHOR\n======\n\n\nEmil Karl\u00e9n\n\nemil@member.fsf.org\n\n\nDEDICATION\n==========\n\n\nAron Karl\u00e9n\n\nTommy Karlsson\n\nG\u00f6tabergsgatan 10, l\u00e4genhet 4",
    "docs_url": "https://pythonhosted.org/exactly/",
    "download_url": null,
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/emilkarlen/exactly/wiki",
    "keywords": "test case suite check assert script shell console command line program execute sandbox",
    "license": "GPLv3+",
    "maintainer": null,
    "maintainer_email": null,
    "name": "exactly",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/exactly/",
    "release_url": "https://pypi.org/project/exactly/0.8.1/",
    "requires_python": null,
    "summary": "Tests a command line program by executing it in a temporary sandbox directory and inspecting its result.",
    "version": "0.8.1"
  },
  "releases": {
    "0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3ce51c7a0a5c3e18bf9a936967fcdb4f",
          "sha256": "12ae8b59b979c7e2323fec8c1994a08fbbcfa0c4614d20b06582478bbe9aca77"
        },
        "downloads": 334,
        "filename": "exactly-0.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ce51c7a0a5c3e18bf9a936967fcdb4f",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 944861,
        "upload_time": "2016-12-23T03:26:46",
        "url": "https://files.pythonhosted.org/packages/7f/19/f68cab9e01eda28aba187704757ec8df258a8fe2f527bb6c1b3a0560e66d/exactly-0.8-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ae55065467fafcabab2b818654ae4e65",
          "sha256": "60741a6312425f8baf3b0c8edbe68fa1243908d6b60c2dd0a9e622b6ab119921"
        },
        "downloads": 310,
        "filename": "exactly-0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "ae55065467fafcabab2b818654ae4e65",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 210105,
        "upload_time": "2016-12-23T03:26:50",
        "url": "https://files.pythonhosted.org/packages/aa/aa/0f0c88c6a925ee2b53ee938106ecf88352f039dd0b8711493d61588f59db/exactly-0.8.tar.gz"
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0862cd5f173dbc871b317323a865c1d0",
          "sha256": "ef46d9a239238ed3a2e5517d0dae0dc5bdf2cb9bccdbbd98d19b32536f92abd5"
        },
        "downloads": 13,
        "filename": "exactly-0.8.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0862cd5f173dbc871b317323a865c1d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 966864,
        "upload_time": "2017-02-27T06:08:58",
        "url": "https://files.pythonhosted.org/packages/2d/6e/3097865374335131be945f77b65f2a21564e8d5c8e18e5589fa80bde6cf3/exactly-0.8.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "181594e90c88d8500cf18101c0567b52",
          "sha256": "3be3b2603364edba5e05f42ab1f6b7e7befb8068508c1c4d74f5346af9b92425"
        },
        "downloads": 10,
        "filename": "exactly-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "181594e90c88d8500cf18101c0567b52",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 216127,
        "upload_time": "2017-02-27T06:09:01",
        "url": "https://files.pythonhosted.org/packages/f9/7d/caf0d1ebf8106b9736b1686a48ae79b78c6d4e48552597b4b063085abd54/exactly-0.8.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0862cd5f173dbc871b317323a865c1d0",
        "sha256": "ef46d9a239238ed3a2e5517d0dae0dc5bdf2cb9bccdbbd98d19b32536f92abd5"
      },
      "downloads": 13,
      "filename": "exactly-0.8.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "0862cd5f173dbc871b317323a865c1d0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 966864,
      "upload_time": "2017-02-27T06:08:58",
      "url": "https://files.pythonhosted.org/packages/2d/6e/3097865374335131be945f77b65f2a21564e8d5c8e18e5589fa80bde6cf3/exactly-0.8.1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "181594e90c88d8500cf18101c0567b52",
        "sha256": "3be3b2603364edba5e05f42ab1f6b7e7befb8068508c1c4d74f5346af9b92425"
      },
      "downloads": 10,
      "filename": "exactly-0.8.1.tar.gz",
      "has_sig": false,
      "md5_digest": "181594e90c88d8500cf18101c0567b52",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 216127,
      "upload_time": "2017-02-27T06:09:01",
      "url": "https://files.pythonhosted.org/packages/f9/7d/caf0d1ebf8106b9736b1686a48ae79b78c6d4e48552597b4b063085abd54/exactly-0.8.1.tar.gz"
    }
  ]
}