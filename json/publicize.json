{
  "info": {
    "author": "Dan Snider",
    "author_email": "dan.snider.cu@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries",
      "Topic :: Utilities"
    ],
    "description": "=========\nPublicize\n=========\nSet of utilities to manage the way a module is exported\n\nDetailed error messages make finding any issues easy.\n\nWorks in both Python 2.7 and 3.6\n\n============\nInstallation\n============\n\n``$ pip install publicize``\n\n=========\nFunctions\n=========\n\n- ``public(*objects:[str, object], overwrite=False) -> objects[0]``\n    Mark objects (or names) as public and automatically append them to ``__all__``.\n    Can be used as a decorator with or without closing parentheses.\n\n    There are 2 different ways to use it\\:\n        \n        ``@public(overwrite=False) <- (with or without parentheses)``\n\n            Simple decorator for functions/classes. Adds the wrapped object's\n            ``__name__`` attribute to ``__all__``\n\n        ``public(name_or_object, *names_or_objects)``\n\n            If an object is passed as an argument, all names that refer to that\n            object will be added to ``__all__``. If a string is passed, the\n            name will be added assuming the reference actually exists.\n\n            \n-  ``public constants(**constants) -> constants:``\n    Define public global variables, adding their names to ``__all__``.\n\n-  ``public_from_import(module:[str, ModuleType], *names, overwrite=False) -> {**imported}:``\n    ``from module import names`` and add the imported names to ``__all__``.\n\n-  ``publish_module(module:[str, ModuleType], overwrite=False) -> module:``\n    Publish everything that would be gotten with ``from module import *``\n\n-  ``reimport_module(module:[str, ModuleType]) -> module:``\n    Clear a module's dict and reimport it.\n\n-  ``reverse_star_import(module) -> None:``\n    Removes what would be imported with ``from module import *``\n   \n-  ``safe_star_import(module) -> {**imported}:``\n    ``from module import *`` that will not overwrite existing names\n\n-  ``star_import(module:[str, ModuleType], overwrite=False, ignore_private=False, ignore_metadata=True) -> {**imported}:``\n    Ignore default ``* import`` mechanics to import almost everything.\n\n    If ``overwrite`` is False, an error is raised instead of overwriting.\n\n    If ``ignore_private`` is True then _private names prepended with an\n    underscore are ignored.\n\n    If ``ignore_metadata`` is False, then module metadata attributes such as\n    ``__author__`` and ``__version__`` are imported.\n\n    Special attributes of modules such as ``__path__``, ``__file__``, and\n    ``__all__`` are never imported.\n\n\n=============\nExample usage\n=============\n::\n\n    # in colors.py\n    from publicize import *\n    public_from_import('enum', 'Enum')\n    @public\n    class Colors(Enum):\n        RED = red = 'red'\n        BLUE = blue = 'blue'\n        GREEN = green = 'green'\n    COLOR_DICT=public_constants(**Colors.__members__)\n    CHARTREUSE = GREEN\n    CYAN = BLUE\n    CARMINE = RED\n    public(CHARTREUSE, CYAN, CARMINE)\n\n    def _get_valid_colors():\n        return {k for k, v in globals().items() if isinstance(v, Colors)}\n\n``>>> from publicize import *``\n\n``>>> import colors``\n\n``>>> colors_namespace = star_import('colors')``\n\n``>>> colors.__all__``\n\n``['BLUE', 'CARMINE', 'CHARTREUSE', 'CYAN', 'Colors', 'Enum', 'GREEN', 'RED', 'blue', 'green', 'red']``\n\n``>>> CHARTREUSE``\n\n``<Colors.GREEN: 'green'>``\n\n``>>> COLOR_DICT['blue']``\n\n``<Colors.BLUE: 'blue>``\n\n``>>> old = CARMINE``\n\n``>>> reverse_star_import('colors')``\n\n``>>> reimport_module('colors').CARMINE is not old``\n\n``True``\n\n``>>> _get_colors()``\n\n``>>> {'BLUE', 'CHARTREUSE', 'GREEN', 'CARMINE', 'red', 'CYAN', 'green', 'blue', 'RED'}``",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://pypi.python.org/pypi/publicize/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "publicize",
    "platform": "",
    "project_url": "https://pypi.org/project/publicize/",
    "release_url": "https://pypi.org/project/publicize/1.3.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Utilities to manage the way a module is exported",
    "version": "1.3.0"
  },
  "releases": {
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b08815780a6e98d318b4ae8cedc94444",
          "sha256": "32c52878011758d43dc8ea1ef8cc23fff8d1eece1b20b72944222a435400a55f"
        },
        "downloads": -1,
        "filename": "publicize-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b08815780a6e98d318b4ae8cedc94444",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8891,
        "upload_time": "2017-10-08T17:57:55",
        "url": "https://files.pythonhosted.org/packages/46/af/27103f8cd073e12d6eb2f30e71677a5297be2759e56e58d9999487e3a77e/publicize-1.3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b08815780a6e98d318b4ae8cedc94444",
        "sha256": "32c52878011758d43dc8ea1ef8cc23fff8d1eece1b20b72944222a435400a55f"
      },
      "downloads": -1,
      "filename": "publicize-1.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b08815780a6e98d318b4ae8cedc94444",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8891,
      "upload_time": "2017-10-08T17:57:55",
      "url": "https://files.pythonhosted.org/packages/46/af/27103f8cd073e12d6eb2f30e71677a5297be2759e56e58d9999487e3a77e/publicize-1.3.0.tar.gz"
    }
  ]
}