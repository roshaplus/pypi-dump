{
  "info": {
    "author": "tp7309",
    "author_email": "yiyou7309@gmail.com",
    "bugtrack_url": "https://github.com/tp7309/TTPassGen/issues",
    "classifiers": [],
    "description": "TTPassGen\r\n=========\r\n\r\n.. image:: https://travis-ci.org/tp7309/TTPassGen.svg?branch=master\r\n    :target: https://travis-ci.org/tp7309/TTPassGen\r\n.. image:: https://coveralls.io/repos/github/tp7309/TTPassGen/badge.svg?branch=master\r\n    :target: https://coveralls.io/github/tp7309/TTPassGen?branch=master\r\n.. image:: https://api.codacy.com/project/badge/Grade/25f05aa766c34eea9b9692725237e873\r\n    :target: https://www.codacy.com/app/tp7309/TTPassGen?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=tp7309/TTPassGen&amp;utm_campaign=Badge_Grade\r\n\r\nTTPassGen is a highly flexiable and scriptable password dictionary\r\ngenerator base on Python, you can easily use various rules to generate\r\nthe desired combination of words.\r\n\r\nREADME i18n:\r\n`\u4e2d\u6587\u8bf4\u660e <https://github.com/tp7309/TTPassGen/blob/master/README_zh_CN.md>`__\r\n\r\nFeatures\r\n========\r\n\r\n-  generate password use combination\u3001permulation\u3001conditional rules and\r\n   so on.\r\n-  support all characters or words(from wordlist option) that can make\r\n   up a password, some built-in charset has been provided, such as\r\n   alphabetical lists and numeric lists.\r\n-  you can specify the order and frequency of each element in the word.\r\n-  simple rule format, and easy to use, rule could be defined similar\r\n   regex's style.\r\n-  time-consuming estimates, output size estimates, and real-time\r\n   progress reports.\r\n-  unicode word support by using wordlist option.\r\n-  Generation of large amounts of passwords at once, no output size\r\n   limit.\r\n-  it can breakup output by file size.\r\n\r\nInstall\r\n=======\r\n\r\n``TTPassGen`` can be easily installed using pip:\r\n\r\n::\r\n\r\n    pip install ttpassgen\r\n\r\nif you are using the windows operating system, you could just use the\r\n`release version <https://github.com/tp7309/TTPassGen/releases>`__\r\n\r\nRequirements\r\n============\r\n\r\nPython 2 (version 2.7 or later), or Python 3 (version 3.2 or later).\r\n\r\nQuick Start\r\n===========\r\n\r\n    Switch to the project's ``ttpassgen`` directory if you downloaded\r\n    the source code.\r\n\r\nExample: Generate word list output to file, the word format is prefix\r\nthree digits, only allow 1\u30012\u30013, appear 2 or 3 times, followed by letter a or b.\r\n\r\n::\r\n\r\n    ttpassgen -r [123]{2:3}[ab] out.dict\r\n\r\nDone.\r\n\r\nOptions\r\n=======\r\n\r\n::\r\n\r\n    C:\\Users\\tp730>ttpassgen --help\r\n    Usage: ttpassgen [OPTIONS] OUTPUT\r\n    Options:\r\n      -m, --mode INTEGER             generation mode:\r\n\r\n                                     0 = combination rule mode\r\n                                     [default: 0]\r\n      -d, --dictlist TEXT            read wordlist from the file, multi files\r\n                                     should by seperated by comma.\r\n      -r, --rule TEXT                define word format, $0 means refer first\r\n                                     file in wordlist, some built-in charsets:\r\n\r\n                                     ?l = abcdefghijklmnopqrstuvwxyz\r\n                                     ?u = ABCDEFGHIJKLMNOPQRSTUVWXYZ\r\n                                     ?d = 0123456789\r\n                                     ?s = !\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\r\n                                     ?a = ?l?u?d?s\r\n                                     ?q = ]\r\n\r\n                                     example: [?dA]{1:2}$0\r\n                                     view *Examples* section for more information.\r\n                                     [default: '']\r\n      -c, --dict_cache INTEGER       each element in 'dictlist' option represents\r\n                                     a dict file path, this option define the\r\n                                     maximum amount of memory(MB) that can be used,\r\n                                     increasing this value when the file is large \r\n                                     may increase the build speed.  [default: 500]\r\n      -g, --global_repeat_mode TEXT  whether the character is allowd to repeat:\r\n\r\n                                     ? = 0 or 1 repetitions\r\n                                     * = 0 or more repetitions\r\n                                     [default: ?]\r\n      -p, --part_size INTEGER        when result data is huge, split package\r\n                                     size(MB) will be applied, 0 is unlimited.\r\n                                     [default: 0]\r\n        -a, --append_mode INTEGER    whether append content to OUTPUT or not.\r\n                                     [default: 0]\r\n      --help                         Show this message and exit.\r\n\r\ngenerated password displayed line by line in ``OUTPUT``.\r\n\r\nExamples\r\n========\r\n\r\n**[]** Used to include charset\r\n\r\nRepeat mode\r\n-----------\r\n\r\n**[]** 1 repetitions. ``[123] -> 1 2 3``\r\n\r\n**[]?** 0 or 1 repetitions ``[123] -> '' 1 2 3``\r\n\r\n**[]{minLength:maxLength:repeatMode}**\r\n\r\n::\r\n\r\n    when repeatMode is `?`, [123]{1,2} -> 1 2 3 12 13 21 23 31 32\r\n    when repeatMode is `*`, [123]{1,2} -> 1 2 3 11 12 13 21 22 23 31 32 33\r\n\r\n**[]{minLength:maxLength}** default use ``global_repeat_mode`` option.\r\n\r\n**$no** ref dict file index from ``dictlist`` option.\r\n\r\n::\r\n\r\n    *ttpassgen --dictlist in.dict,in2.dict --rule $0[_]?$1 out.dict*\r\n    when dictlist option defined as #in.dict,in2.dict#,\r\n    in.dict content:\r\n    word11\r\n    word12\r\n\r\n    in2.dict content:\r\n    word21\r\n    word22\r\n\r\n\r\n    $0[_]?$1 -> word11word21 word11word22 word11_word21 word11_word22 word12word21 word12word22 word12_word21 word12_word22\r\n\r\nUpdate log\r\n==========\r\n\r\n`Update log <https://github.com/tp7309/TTPassGen/blob/master/CHANGES.md>`__",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/tp7309/TTPassGen",
    "keywords": "python ttpassgen password-generator wordlist password-dict password-dict-generator brute-force word-combination crunch",
    "license": "Apache License Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ttpassgen",
    "platform": "",
    "project_url": "https://pypi.org/project/ttpassgen/",
    "release_url": "https://pypi.org/project/ttpassgen/1.0.1/",
    "requires_python": "",
    "summary": "A highly flexiable and scriptable password dictionary generator.",
    "version": "1.0.1"
  },
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "31b95f4f14d190d39e5e604234d9bdb8",
          "sha256": "3d04d5cc1fa9fd11b51e44d2143e2214b5f2d228ebe0e37e5069dd7397dcb311"
        },
        "downloads": 0,
        "filename": "ttpassgen-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "31b95f4f14d190d39e5e604234d9bdb8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 15492,
        "upload_time": "2017-06-04T14:44:55",
        "url": "https://files.pythonhosted.org/packages/85/a9/57f22f0308e41e5212c0bb442d7516e40107eb8f38d5b370aad55283c6d5/ttpassgen-1.0.1-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "31b95f4f14d190d39e5e604234d9bdb8",
        "sha256": "3d04d5cc1fa9fd11b51e44d2143e2214b5f2d228ebe0e37e5069dd7397dcb311"
      },
      "downloads": 0,
      "filename": "ttpassgen-1.0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "31b95f4f14d190d39e5e604234d9bdb8",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 15492,
      "upload_time": "2017-06-04T14:44:55",
      "url": "https://files.pythonhosted.org/packages/85/a9/57f22f0308e41e5212c0bb442d7516e40107eb8f38d5b370aad55283c6d5/ttpassgen-1.0.1-py2.py3-none-any.whl"
    }
  ]
}