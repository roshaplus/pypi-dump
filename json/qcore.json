{
  "info": {
    "author": "Quora, Inc.",
    "author_email": "asynq@quora.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "*****\nqcore\n*****\n.. image:: https://travis-ci.org/quora/qcore.svg?branch=master\n    :target: https://travis-ci.org/quora/qcore\n\n``qcore`` is a library of common utility functions used at Quora. It is used to\nabstract out common functionality for other Quora libraries like `asynq <https://github.com/quora/asynq>`_.\n\nIts component modules are discussed below. See the docstrings in the code\nitself for more detail.\n\nqcore.asserts\n-------------\n\nWhen a normal Python assert fails, it only indicates that there was a failure,\nnot what the bad values were that caused the assert to fail. This module\nprovides rich assertion helpers that automatically produce better error\nmessages. For example:\n\n.. code-block:: python\n\n    >>> from qcore.asserts import assert_eq\n    >>> assert 5 == 2 * 2\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    AssertionError\n    >>> assert_eq(5, 2 * 2)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"qcore/asserts.py\", line 82, in assert_eq\n        assert expected == actual, _assert_fail_message(message, expected, actual, '!=', extra)\n    AssertionError: 5 != 4\n\nSimilar methods are provided by the standard library's ``unittest`` package,\nbut those are tied to the ``TestCase`` class instead of being standalone\nfunctions.\n\nqcore.caching\n-------------\n\nThis provides helpers for caching data. Some examples include:\n\n.. code-block:: python\n\n    from qcore.caching import cached_per_instance, lazy_constant\n\n    @lazy_constant\n    def some_function():\n        # this will only be executed the first time some_function() is called;\n        # afterwards it will be cached\n        return expensive_computation()\n\n    class SomeClass(object):\n        @cached_per_instance()\n        def some_method(self, a, b):\n            # for any instance of SomeClass, this will only be executed once\n            return expensive_computation(a, b)\n\nqcore.debug\n-----------\n\nThis module provides some helpers useful for debugging Python. Among others, it\nincludes the ``@qcore.debug.trace()`` decorator, which can be used to trace\nevery time a function is called.\n\nqcore.decorators\n----------------\n\nThis module provides an abstraction for class-based decorators that supports\ntransparently decorating functions, methods, classmethods, and staticmethods\nwhile also providing the option to add additional custom attributes. For\nexample, it could be used to provide a caching decorator that adds a ``.dirty``\nattribute to decorated functions to dirty their cache:\n\n.. code-block:: python\n\n    from qcore.decorators import DecoratorBase, DecoratorBinder, decorate\n\n    class CacheDecoratorBinder(DecoratorBinder):\n        def dirty(self, *args):\n            if self.instance is None:\n                return self.decorator.dirty(*args)\n            else:\n                return self.decorator.dirty(self.instance, *args)\n\n    class CacheDecorator(DecoratorBase):\n        binder_cls = CacheDecoratorBinder\n\n        def __init__(self, *args):\n            super(CacheDecorator, self).__init__(*args)\n            self._cache = {}\n\n        def dirty(self, *args):\n            try:\n                del self._cache[args]\n            except KeyError:\n                pass\n\n        def __call__(self, *args):\n            try:\n                return self._cache[args]\n            except KeyError:\n                value = self.fn(*args)\n                self._cache[args] = value\n                return value\n\n    cached = decorate(CacheDecorator)\n\nqcore.enum\n----------\n\nThis module provides an abstraction for defining enums. You can define an enum\nas follows:\n\n.. code-block:: python\n\n    from qcore.enum import Enum\n\n    class Color(Enum):\n        red = 1\n        green = 2\n        blue = 3\n\nqcore.errors\n------------\n\nThis module provides some commonly useful exception classes and helpers for\nreraising exceptions from a different place.\n\nqcore.events\n------------\n\nThis provides an abstraction for registering events and running callbacks.\nExample usage:\n\n.. code-block:: python\n\n    >>> from qcore.events import EventHook\n    >>> event = EventHook()\n    >>> def callback():\n    ...     print('callback called')\n    ...\n    >>> event.subscribe(callback)\n    >>> event.trigger()\n    callback called\n\nqcore.helpers\n-------------\n\nThis provides a number of small helper functions.\n\nqcore.inspectable_class\n-----------------------\n\nThis provides a base class that automatically provides hashing, equality\nchecks, and a readable ``repr()`` result. Example usage:\n\n.. code-block:: python\n\n    >>> from qcore.inspectable_class import InspectableClass\n    >>> class Pair(InspectableClass):\n    ...     def __init__(self, a, b):\n    ...         self.a = a\n    ...         self.b = b\n    ...\n    >>> Pair(1, 2)\n    Pair(a=1, b=2)\n    >>> Pair(1, 2) == Pair(1, 2)\n    True\n\nqcore.inspection\n----------------\n\nThis provides functionality similar to the standard ``inspect`` module. Among\nothers, it includes the ``get_original_fn`` function, which extracts the\nunderlying function from a ``qcore.decorators``-decorated object.\n\nqcore.microtime\n---------------\n\nThis includes helpers for dealing with time, represented as an integer number\nof microseconds since the Unix epoch.\n\nqcore.testing\n-------------\n\nThis provides helpers to use in unit tests. Among others, it provides an\n``Anything`` object that compares equal to any other Python object.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/quora/qcore",
    "keywords": "quora core common utility",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "qcore",
    "platform": "",
    "project_url": "https://pypi.org/project/qcore/",
    "release_url": "https://pypi.org/project/qcore/0.4.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Quora's core utility library",
    "version": "0.4.2"
  },
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "518d125d3730d35b439a42d6cb6e5cd8",
          "sha256": "393910affce89ddcad75e2cca567847b34302671e604be54e25ba502e3c390e2"
        },
        "downloads": -1,
        "filename": "qcore-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "518d125d3730d35b439a42d6cb6e5cd8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 370317,
        "upload_time": "2016-09-16T19:14:08",
        "url": "https://files.pythonhosted.org/packages/8b/ce/02f38e14597091fed0d8ac0d4974a5bde468687e5fffceba6b004ccbff3d/qcore-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f51cf7da5bf770c5f34f1fa2143339f5",
          "sha256": "a6cdd69ccc4aec62960860d59c7fb5cd38eda8c64f4d8162d51c1549447fbe82"
        },
        "downloads": -1,
        "filename": "qcore-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f51cf7da5bf770c5f34f1fa2143339f5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 375606,
        "upload_time": "2016-10-07T23:46:04",
        "url": "https://files.pythonhosted.org/packages/68/41/20f5c172dbaf6a6a5c56b48bd8e34a5869c13b43c7490cf611e1944c7a28/qcore-0.2.1.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fd3ac236f9d5b254c8637d66ddc5c997",
          "sha256": "38ba2e9dfdef573a579ca9712dad89276f2e241c0d5148ba3a199546c49e27cd"
        },
        "downloads": -1,
        "filename": "qcore-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fd3ac236f9d5b254c8637d66ddc5c997",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 407529,
        "upload_time": "2017-01-11T00:37:27",
        "url": "https://files.pythonhosted.org/packages/46/36/d1e964c34ebdc4ff57b548346ed8fe070cd77dd4a21fd337e249c1c6af1a/qcore-0.3.0.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d397bbed08603e411c469080838fb38f",
          "sha256": "1f2fde43126af24ca3c75b9f3d38abb9a5f15d96886de1fbdaf3a451ae06dfee"
        },
        "downloads": -1,
        "filename": "qcore-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d397bbed08603e411c469080838fb38f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 378168,
        "upload_time": "2017-07-07T20:52:34",
        "url": "https://files.pythonhosted.org/packages/8e/06/ac3928214155717be13e48a3814ea34ed0f2ac02fdb8035481acc2d2471d/qcore-0.4.0.tar.gz"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "726e37a83d6cfacab54e64611feccc92",
          "sha256": "768d4a2d181eb214582acbbe361b5916281615cface9c21f9b66ff20f1fa8cc1"
        },
        "downloads": -1,
        "filename": "qcore-0.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "726e37a83d6cfacab54e64611feccc92",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 492916,
        "upload_time": "2017-12-08T04:09:35",
        "url": "https://files.pythonhosted.org/packages/4b/d8/213cbf5b91f3eaecf1ef39c0297e00318ce8c5fd511d207146108ec9b7a0/qcore-0.4.1.tar.gz"
      }
    ],
    "0.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4fc938202ee48e29ec93a16408f3cbaf",
          "sha256": "308824f1f016643ef6b019ff981be7a8050ba12592a1e2d497c8d8099a7f3acf"
        },
        "downloads": -1,
        "filename": "qcore-0.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4fc938202ee48e29ec93a16408f3cbaf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27302,
        "upload_time": "2017-12-12T23:56:29",
        "url": "https://files.pythonhosted.org/packages/f3/09/3b295ec32e8e41e8704d798a48505474d0d6dc1a2f57c60a9c8f7cd1ea11/qcore-0.4.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4fc938202ee48e29ec93a16408f3cbaf",
        "sha256": "308824f1f016643ef6b019ff981be7a8050ba12592a1e2d497c8d8099a7f3acf"
      },
      "downloads": -1,
      "filename": "qcore-0.4.2.tar.gz",
      "has_sig": false,
      "md5_digest": "4fc938202ee48e29ec93a16408f3cbaf",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 27302,
      "upload_time": "2017-12-12T23:56:29",
      "url": "https://files.pythonhosted.org/packages/f3/09/3b295ec32e8e41e8704d798a48505474d0d6dc1a2f57c60a9c8f7cd1ea11/qcore-0.4.2.tar.gz"
    }
  ]
}