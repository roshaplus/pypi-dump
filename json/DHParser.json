{
  "info": {
    "author": "Eckhart Arnold",
    "author_email": "arnold@badw.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Code Generators",
      "Topic :: Software Development :: Compilers",
      "Topic :: Text Processing :: Markup"
    ],
    "description": "DHParser\n========\n\nA parser-combinator-based parsing and compiling infrastructure for domain\nspecific languages (DSL) in Digital Humanities projects.\n\nAuthor: Eckhart Arnold, Bavarian Academy of Sciences\nEmail:  arnold@badw.de\n\n\nLicense\n-------\n\nDHParser is open source software under the [MIT License](https://opensource.org/licenses/MIT)\n\n**Exception**: The module ``DHParser/typing34.py`` was directly taken from the\nPython 3.5 source code in order for DHParser to be backwards compatible\nwith Python 3.4. The module ``DHParser/typing34.py`` is licensed under the\n[Python Software Foundation License Version 2](https://docs.python.org/3.5/license.html)\n\n\nSources\n-------\n\nFind the sources on [gitlab.lrz.de/badw-it/DHParser](https://gitlab.lrz.de/badw-it/DHParser) . \nGet them with:\n    \n    git clone https://gitlab.lrz.de/badw-it/DHParser\n\n\nPurpose\n-------\n\nDHParser leverages the power of Domain specific languages for the \nDigital Humanities.\n\nDomain specific languages are widespread in \ncomputer sciences, but seem to be underused in the Digital Humanities.\nWhile DSLs are sometimes introduced to Digital-Humanities-projects as\n[practical adhoc-solution][M\u00fcller_2016], these solutions are often\nsomewhat \"quick and dirty\". In other words they are more of a hack\nthan a technology. The purpose of DHParser is to introduce\n[DSLs as a technology][Arnold_2016] to the Digital Humanities. It is\nbased on the well known technology of [EBNF][ISO_IEC_14977]-based\nparser generators, but employs the more modern form called\n\"[parsing expression grammar][Ford_2004]\" and\n[parser combinators][Ford_20XX] as a variant of the classical\nrecursive descent parser.\n\nWhy another parser generator? There are plenty of good parser\ngenerators out there, e.g. [A\u00f1ez's grako parser generator][A\u00f1ez_2017], \n[Eclipse XText][XText_Website]. However, DHParser is\nintended as a tool that is specifically geared towards digital\nhumanities applications, while most existing parser generators come\nfrom compiler construction toolkits for programming languages. \nWhile I expect DSLs in computer science and DSLs in the Digital \nHumanities to be quite similar as far as the technological realization\nis concerned, the use cases, requirements and challenges are somewhat \ndifferent. For example, in the humanities annotating text is a central \nuse case, which is mostly absent in computer science treatments. \nThese differences might sooner or later require to develop the \nDSL-construction toolkits in a different direction. Also,\nDHParser shall (in the future) serve as a teaching tool, which\ninfluences some of its design decisions such as, for example, clearly\nseparating the parsing, syntax-tree-transformation and compilation\nstages. Finally, DHParser is intended as a tool to experiment with.  One\npossible research area is, how non\n[context-free grammars](https://en.wikipedia.org/wiki/Context-free_grammar)\nsuch as the grammars of [TeX][tex_stackexchange_no_bnf] or\n[CommonMark][MacFarlane_et_al_2017] can be described with declarative\nlangauges in the spirit of but beyond EBNF, and what extensions of the\nparsing technology are necessary to capture such languages.\n\nPrimary use case at the Bavarian Academy of Sciences and Humanities\n(for the time being): A DSL for the\n\"[Mittellateinische W\u00f6rterbuch](http://www.mlw.badw.de/)\"!\n\nFurther (intended) use cases are:\n\n* LaTeX -> XML/HTML conversion. See this\n  [discussion on why an EBNF-parser for the complete TeX/LaTeX-grammar][tex_stackexchange_no_bnf]\n  is not possible.\n* [CommonMark][MacFarlane_et_al_2017] and other DSLs for cross media\n  publishing of scientific literature, e.g. journal articles.  (Common\n  Mark and Markdown also go beyond what is feasible with pure\n  EBNF-based-parsers.)\n* EBNF itself. DHParser is already self-hosting ;-)\n* Digital and cross-media editions \n* Digital dictionaries\n\nFor a simple self-test run `dhparser.py` from the command line. This\ncompiles the EBNF-Grammer in `examples/EBNF/EBNF.ebnf` and outputs the\nPython-based parser class representing that grammar. The concrete and\nabstract syntax tree as well as a full and abbreviated log of the\nparsing process will be stored in a sub-directory named \"LOG\".\n\n\nIntroduction\n------------\n\n*This is an introduction for absolute beginners.\nFull documentation coming soon...*\n\nMotto: *Computers enjoy XML, humans don't.*\n\nSuppose you are a literary scientist and you would like to edit a poem\nlike Heinrich Heine's \"Lyrisches Intermezzo\". Usually, the technology \nof choice would be XML and you would use an XML-Editor to write to\ncode something like this:\n\n    <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n    <gedicht>\n        <bibliographisches>\n            <autor gnd=\"118548018\">Heinrich Heine</autor>\n            <werk href=\"http://www.deutschestextarchiv.de/book/show/heine_lieder_1827\"\n                  urn=\"nbn:de:kobv:b4-200905192211\">\n                Buch der Lieder\n            </werk>\n            <ort gnd=\"4023118-5\">Hamburg</ort>\n            <jahr>1927</jahr>\n            <serie>Lyrisches Intermezzo</serie>\n            <titel>IV.</titel>\n        </bibliographisches>\n        <text>\n            <strophe>\n                <vers>Wenn ich in deine Augen seh',</vers>\n                <vers>so schwindet all' mein Leid und Weh!</vers>\n                <vers>Doch wenn ich k\u00fcsse deinen Mund,</vers>\n                <vers>so werd' ich ganz und gar gesund.</vers>\n            </strophe>\n            <strophe>\n                <vers>Wenn ich mich lehn' an deine Brust,</vers>\n                <vers>kommt's \u00fcber mich wie Himmelslust,</vers>\n                <vers>doch wenn du sprichst: Ich liebe dich!</vers>\n                <vers>so mu\u00df ich weinen bitterlich.</vers>\n            </strophe>\n        </text>\n    </gedicht>\n\nNow, while you might think that this all works well enough, there are\na few drawbacks to this approach:\n\n- The syntax is cumbersome and the encoding not very legible to humans\n  working with it. (And I did not even use \n  [TEI-XML](http://www.tei-c.org/index.xml), yet...)\n  Editing and revising XML-encoded text is a pain. Just ask the \n  literary scientists who have to work with it.\n- The XML encoding, especially TEI-XML, is often unintuitive. Only\n  experts understand it. Now, if you had the idea that you humanist\n  friend, who is not into digital technologies, might help you with\n  proof-reading, you better think about it again.\n- There is an awful lot of typing to do: All those lengthy opening \n  and closing tags. This takes time...\n- While looking for a good XML-Editor, you find that there hardly exist\n  any XML-Editors any more. (And for a reason, actually...) In \n  particular, there are no good open source XML-Editors.\n\nOne the other hand, there are good reasons why XML is used in the\nhumanities: Important encoding standards like TEI-XML are defined in \nXML. It's strict syntax and the possibility to check data against a\nschema  help detecting and avoiding encoding errors. If the schema \nis well defined, it is unambiguous, and it is easy to parse for a \ncomputer. Most of these advantages, however, are on a technical level\nand few of them are actually exclusive advantages of XML.\n\nAll in all this means, that while XML is a solid backend-technology,\nit still is a pain to work with XML as a frontend-technology. This is\nwhere DHParser comes in. It allows you to define your own domain\nspecific notation that is specifically tailored to your editing needs\nand provides an infrastructure that - if you know a little \nPython-programming - makes it very easy to convert your annotated\ntext into an XML-encoding of your choice. With DHParser, the same poem\nabove can be simply encoded like this:\n \n    Heinrich Heine <gnd:118548018>,\n    Buch der Lieder <urn:nbn:de:kobv:b4-200905192211>,\n    Hamburg <gnd:4023118-5>, 1927.\n    \n        Lyrisches Intermezzo\n    \n                 IV.\n    \n    Wenn ich in deine Augen seh',\n    so schwindet all' mein Leid und Weh!\n    Doch wenn ich k\u00fcsse deinen Mund,\n    so werd' ich ganz und gar gesund.\n    \n    Wenn ich mich lehn' an deine Brust,\n    kommt's \u00fcber mich wie Himmelslust,\n    doch wenn du sprichst: Ich liebe dich!\n    so mu\u00df ich weinen bitterlich.\n\nYes, that's right. It is as simple as that. Observe, how much \nmore effacious a verse like \"Wenn ich mich lehn' an deine Brust, / \nkommt's \u00fcber mich wie Himmelslust,\" can be if it is not uglified by\nenclosing XML tags ;-) \n\nYou might now wonder \nwhether the second version really does encode the same information\nas the XML version. How, for example, would the computer know for \nsure where a verse starts and ends or a stanza or what is \ntitle and what stanza? Well, for all these matters there exist \nconventions that poets have been using for several thousand years.\nFor example, a verse always starts and ends in one an the same \nline. There is always a gap between stanzas. And the title is always \nwritten above the poem and not in the middle of it. So, if there is\na title at all, we can be sure that what is written in the first \nline is the title and not a stanza. \n\nDHParser is able to exploit all those hints in order to gather much the\nsame information as was encoded in the XML-Version. Don't believe it?\nYou can try: Download DHParser from the \n[gitlab-repository](https://gitlab.lrz.de/badw-it/DHParser) and enter\nthe directory `examples/Tutorial` on the command line interface (shell). \nJust run `python LyrikCompiler_example.py` (you need to have installed\n[Python](https://www.python.org/) Version 3.4 or higher on your computer).\nThe output will be something like this:\n\n    <gedicht>\n        <bibliographisches>\n            <autor>\n                <namenfolge>Heinrich Heine</namenfolge>\n                <verkn\u00fcpfung>gnd:118548018</verkn\u00fcpfung>\n            </autor>\n            <werk>\n                <wortfolge>Buch der Lieder</wortfolge>\n                <verkn\u00fcpfung>urn:nbn:de:kobv:b4-200905192211</verkn\u00fcpfung>\n            </werk>\n            <ort>\n                <wortfolge>Hamburg</wortfolge>\n                <verkn\u00fcpfung>gnd:4023118-5</verkn\u00fcpfung>\n            </ort>\n            <jahr>1927</jahr>\n        </bibliographisches>\n        <serie>Lyrisches Intermezzo</serie>\n        <titel>IV.</titel>\n        <text>\n            <strophe>\n                <vers>Wenn ich in deine Augen seh',</vers>\n                <vers>so schwindet all' mein Leid und Weh!</vers>\n                <vers>Doch wenn ich k\u00fcsse deinen Mund,</vers>\n                <vers>so werd' ich ganz und gar gesund.</vers>\n            </strophe>\n            <strophe>\n                <vers>Wenn ich mich lehn' an deine Brust,</vers>\n                <vers>kommt's \u00fcber mich wie Himmelslust,</vers>\n                <vers>doch wenn du sprichst: Ich liebe dich!</vers>\n                <vers>so mu\u00df ich weinen bitterlich.</vers>\n            </strophe>\n        </text>\n    </gedicht>\n\nNow, you might notice that this is not exactly the XML-encoding as shown\nabove. (Can you spot the differences?) But you will probably believe me\nwithout further proof that it can easily be converted into the other\nversion and contains all the information that the other version contains.\n\nHow does DHParser achieve this? Well, there is the rub. In order to convert\nthe poem in the domain specific version into the XML-version, DHParser \nrequires a structural description of the domain specific encoding. This\nis a bit similar to a document type definition (DTD) in XML. This \nstructural description uses a slightly enhanced version of the \n[Extended-Backus-Naur-Form (EBNF)](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form) \nthat is a well established formalism for the structural description of \nformal languages in computer sciences. And excerpt of the EBNF-definition\nof our domain-specific encoding for the poem looks like this. (We leave out\nthe meta-data here. See \n[`examples/Tutorial/Lyrik.ebnf`](https://gitlab.lrz.de/badw-it/DHParser/blob/master/examples/Tutorial/Lyrik.ebnf)\nfor the full EBNF):\n\n    gedicht           = { LEERZEILE }+ [serie] \u00a7titel \u00a7text /\\s*/ \u00a7ENDE\n    serie             = !(titel vers NZ vers) { NZ zeile }+ { LEERZEILE }+   \n    titel             = { NZ zeile}+ { LEERZEILE }+\n    zeile             = { ZEICHENFOLGE }+\n    \n    text              = { strophe {LEERZEILE} }+\n    strophe           = { NZ vers }+\n    vers              = { ZEICHENFOLGE }+\n    \n    ZEICHENFOLGE      = /[^ \\n<>]+/~\n    NZ                = /\\n/~\n    LEERZEILE         = /\\n[ \\t]*(?=\\n)/~\n    ENDE              = !/./\n\nNow, without going into too much detail here, let me just explain a few basics of \nthis formal description: The slashes `/` enclose ordinary regular expressions.\nThus, `NZ` for (\"Neue Zeile\", German for: \"new line\") is defined as `/\\n/~` which\nis the newline-token `\\n` in a regular expression, plus further horizontal \nwhitespace (signified by the tilde `~`), if there is any.\n\nThe braces `{` `}` enclose items that can be repeated zero or more times; with\na `+` appended to the closing brace it means one or more times. Now, look at the\ndefinition of `text` in the 6th line: `{ strophe {LEERZEILE} }+`. This reads\nas follows: The text of the poem consists of a sequence of stanzas, each of which\nis followed by a sequence of empty lines (German: \"Leerzeilen\"). If you now\nlook a the structural definition of a stanza, you find that it consists of a \nsequence of verses, each of which starts, i.e. is preceeded by a new line.\n\nCan you figure out the rest? Hint: The angular brackets `[` and `]` mean that and\nitem is optional and the `\u00a7` sign means that it is obligatory. (Strictly speaking, \nthe \u00a7-signs are not necessary, because an item that is not optional is always\nobligatory, but the \u00a7-signs help the converter to produce the right error\nmessages.)\n\n\nThis should be enough for an introduction. It has shown the probably most important\nuse case of DHParser, i.e. as a frontend-technology form XML-encodings. Of course\nit can just as well be used as a frontend for any other kind of structured data,\nlike SQL or graph-strcutured data. The latter is by the way is a very reasonable\nalternative to XML for edition projects with a complex transmission history. \nSee Andreas Kuczera's Blog-entry on \n[\"Graphdatenbanken f\u00fcr Historiker\"](http://mittelalter.hypotheses.org/5995).\n\n\nReferences\n----------\n\nJuancarlo A\u00f1ez: grako, a PEG parser generator in Python, 2017. URL:\n[bitbucket.org/apalala/grako][A\u00f1ez_2017]\n\n[A\u00f1ez_2017]: https://bitbucket.org/apalala/grako\n\n\nEckhart Arnold: Dom\u00e4nenspezifische Notationen. Eine (noch)\nuntersch\u00e4tzte Technologie in den Digitalen Geisteswissenschaften,\nPr\u00e4sentation auf dem\n[dhmuc-Workshop: Digitale Editionen und Auszeichnungssprachen](https://dhmuc.hypotheses.org/workshop-digitale-editionen-und-auszeichnungssprachen),\nM\u00fcnchen 2016. Short-URL: [tiny.badw.de/2JVT][Arnold_2016]\n\n[Arnold_2016]: https://f.hypotheses.org/wp-content/blogs.dir/1856/files/2016/12/EA_Pr%C3%A4sentation_Auszeichnungssprachen.pdf\n\n\nBrian Ford: Parsing Expression Grammars: A Recognition-Based Syntactic\nFoundation, Cambridge\nMassachusetts, 2004. Short-URL:[http://t1p.de/jihs][Ford_2004]\n\n[Ford_2004]: https://pdos.csail.mit.edu/~baford/packrat/popl04/peg-popl04.pdf\n  \n[Ford_20XX]: http://bford.info/packrat/ \n\n\nRichard A. Frost, Rahmatullah Hafiz and Paul Callaghan: Parser\nCombinators for Ambiguous Left-Recursive Grammars, in: P. Hudak and\nD.S. Warren (Eds.): PADL 2008, LNCS 4902, pp. 167\u2013181, Springer-Verlag\nBerlin Heidelberg 2008.\n\n\nDominikus Herzberg: Objekt-orientierte Parser-Kombinatoren in Python,\nBlog-Post, September, 18th 2008 on denkspuren. gedanken, ideen,\nanregungen und links rund um informatik-themen, short-URL:\n[http://t1p.de/bm3k][Herzberg_2008a]\n\n[Herzberg_2008a]: http://denkspuren.blogspot.de/2008/09/objekt-orientierte-parser-kombinatoren.html\n\n\nDominikus Herzberg: Eine einfache Grammatik f\u00fcr LaTeX, Blog-Post,\nSeptember, 18th 2008 on denkspuren. gedanken, ideen, anregungen und\nlinks rund um informatik-themen, short-URL:\n[http://t1p.de/7jzh][Herzberg_2008b]\n\n[Herzberg_2008b]: http://denkspuren.blogspot.de/2008/09/eine-einfache-grammatik-fr-latex.html\n\n\nDominikus Herzberg: Uniform Syntax, Blog-Post, February, 27th 2007 on\ndenkspuren. gedanken, ideen, anregungen und links rund um\ninformatik-themen, short-URL: [http://t1p.de/s0zk][Herzberg_2007]\n\n[Herzberg_2007]: http://denkspuren.blogspot.de/2007/02/uniform-syntax.html\n\n\n[ISO_IEC_14977]: http://www.cl.cam.ac.uk/~mgk25/iso-14977.pdf\n\n\nJohn MacFarlane, David Greenspan, Vicent Marti, Neil Williams,\nBenjamin Dumke-von der Ehe, Jeff Atwood: CommonMark. A strongly\ndefined, highly compatible specification of\nMarkdown, 2017. [commonmark.org][MacFarlane_et_al_2017]\n\n[MacFarlane_et_al_2017]: http://commonmark.org/\n\n\nStefan M\u00fcller: DSLs in den digitalen Geisteswissenschaften,\nPr\u00e4sentation auf dem\n[dhmuc-Workshop: Digitale Editionen und Auszeichnungssprachen](https://dhmuc.hypotheses.org/workshop-digitale-editionen-und-auszeichnungssprachen),\nM\u00fcnchen 2016. Short-URL: [tiny.badw.de/2JVy][M\u00fcller_2016]\n\n[M\u00fcller_2016]: https://f.hypotheses.org/wp-content/blogs.dir/1856/files/2016/12/Mueller_Anzeichnung_10_Vortrag_M%C3%BCnchen.pdf\n\nMarkus Voelter, Sbastian Benz, Christian Dietrich, Birgit Engelmann, \nMats Helander, Lennart Kats, Eelco Visser, Guido Wachsmuth: \nDSL Engineering. Designing, Implementing and Using Domain-Specific Languages, 2013.\n[http://dslbook.org/][Voelter_2013]  \n\n[voelter_2013]: http://dslbook.org/\n\n[tex_stackexchange_no_bnf]: http://tex.stackexchange.com/questions/4201/is-there-a-bnf-grammar-of-the-tex-language\n \n[tex_stackexchange_latex_parsers]: http://tex.stackexchange.com/questions/4223/what-parsers-for-latex-mathematics-exist-outside-of-the-tex-engines \n\n[XText_website]: https://www.eclipse.org/Xtext/",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://gitlab.lrz.de/badw-it/DHParser",
    "keywords": "Digital Humanities,domain specific languages,parser combinators,EBNF",
    "license": "MIT License (https://opensource.org/licenses/MIT)",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DHParser",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/DHParser/",
    "release_url": "https://pypi.org/project/DHParser/0.7.5/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "DHParser - Domain specific languages for the Digital Humanities",
    "version": "0.7.5"
  },
  "releases": {
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "361c179131e48089b2df49990f887fe4",
          "sha256": "f0915d69e00a306db0b55182d04a84888b39e85d0b14b42175af57dc44ae6950"
        },
        "downloads": 0,
        "filename": "DHParser-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "361c179131e48089b2df49990f887fe4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 80724,
        "upload_time": "2017-06-27T14:06:45",
        "url": "https://files.pythonhosted.org/packages/2d/03/ca0e416b259c43e43531cd6ea9cb3bf14f09eeaf450a12326532d501ca52/DHParser-0.7.3.tar.gz"
      }
    ],
    "0.7.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8cb54cb12cb6f102dc1ce4ca060a4438",
          "sha256": "837ea3121dd0ed8142d3e9d4cb41389e3c845ff7ccb5f8902bcd474f7f3ccc25"
        },
        "downloads": 0,
        "filename": "DHParser-0.7.4.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "8cb54cb12cb6f102dc1ce4ca060a4438",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 141839,
        "upload_time": "2017-07-02T06:12:10",
        "url": "https://files.pythonhosted.org/packages/06/ad/f2fc6781d9949bb3ee651234212a4256e3acab8f740f3c1883f1442f7475/DHParser-0.7.4.linux-x86_64.tar.gz"
      }
    ],
    "0.7.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "78f319602f892bd5f041fcd7ebc8afe8",
          "sha256": "fbbf1e421dcf886d5c42a660848ff1ed356112d8fadcf057b5025cf03c61f9dc"
        },
        "downloads": 0,
        "filename": "DHParser-0.7.5.linux-x86_64.tar.gz",
        "has_sig": false,
        "md5_digest": "78f319602f892bd5f041fcd7ebc8afe8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 145903,
        "upload_time": "2017-07-02T08:32:55",
        "url": "https://files.pythonhosted.org/packages/72/90/6a990094a427518627ff4cb475ca3c1eb76ad4e30227354646823fffa70e/DHParser-0.7.5.linux-x86_64.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "78f319602f892bd5f041fcd7ebc8afe8",
        "sha256": "fbbf1e421dcf886d5c42a660848ff1ed356112d8fadcf057b5025cf03c61f9dc"
      },
      "downloads": 0,
      "filename": "DHParser-0.7.5.linux-x86_64.tar.gz",
      "has_sig": false,
      "md5_digest": "78f319602f892bd5f041fcd7ebc8afe8",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 145903,
      "upload_time": "2017-07-02T08:32:55",
      "url": "https://files.pythonhosted.org/packages/72/90/6a990094a427518627ff4cb475ca3c1eb76ad4e30227354646823fffa70e/DHParser-0.7.5.linux-x86_64.tar.gz"
    }
  ]
}