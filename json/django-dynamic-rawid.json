{
  "info": {
    "author": "Martin Mahner, Seth Buntin, Yann Malet",
    "author_email": "info@lincolnloop.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3"
    ],
    "description": ".. image:: https://travis-ci.org/lincolnloop/django-dynamic-rawid.svg?branch=master\n    :target: https://travis-ci.org/lincolnloop/django-dynamic-rawid\n\n.. image:: https://codecov.io/github/lincolnloop/django-dynamic-rawid/coverage.svg?branch=master\n    :target: https://codecov.io/github/lincolnloop/django-dynamic-rawid?branch=master\n\n\n.. important:: django-salmonella was renamed to django-dynamic-rawid and\n   re-released as version 2.0. The latest django-salmonella version was 1.2.\n   You can upgrade your code by simply replacing:\n\n   - ``django-salmonella`` with ``django-dynamic-rawid``\n   - ``salmonella`` with ``dynamic_rawid``.\n\n====================\ndjango-dynamic-rawid\n====================\n\nA Django admin raw_id_fields widget replacement that handles display of an\nobject's string value on change and can be overridden via a template.\nSee this example:\n\n.. image:: http://d.pr/i/10GtM.png\n    :target: http://d.pr/i/1kv7d.png\n\nInstallation\n============\n\nInstall the package with ``pip``::\n\n    $ pip install django-dynamic-rawid\n\nPut ``dynamic_rawid`` to your list of ``INSTALLED_APPS``::\n\n    INSTALLED_APPS = (\n        # ... other apps\n        'dynamic_rawid',\n    )\n\nAnd add the ``urlpattern``::\n\n    urlpatterns = [\n        # ...\n        url(r'^admin/dynamic_rawid/', include('dynamic_rawid.urls')),\n    ]\n\n``dynamic_rawid`` comes with some static files so don't forget to run\n``manage.py collectstatic``.\n\nUsage\n=====\n\nTo start using django-dynamic-rawid in your application all you need to do is\nimplement ``dynamic_rawidMixin`` in your  ``ModelAdmin`` class and add the desired\nfields to a list of ``dynamic_rawid_fields``::\n\n    from dynamic_rawid.admin import dynamic_rawidMixin\n\n    class UserProfileAdmin(dynamic_rawidMixin, admin.ModelAdmin):\n        dynamic_rawid_fields = ('user',)\n\nYou can use dynamic_rawid widgets in a Admin filter as well::\n\n    from dynamic_rawid.admin import dynamic_rawidMixin\n    from dynamic_rawid.filters import dynamic_rawidFilter\n\n    class UserProfileAdmin(dynamic_rawidMixin, admin.ModelAdmin):\n       list_filter = (\n           ('dynamic_rawid_fk', dynamic_rawidFilter),\n       )\n\n\nCustomizing the value of the dynamic widget\n===========================================\n\nThe coolest feature of django-dynamic-rawid is the ability to customize the output\nof the value displayed alongside the ``dynamic_rawidIdWidget``.  There is a basic\nimplementation if all you want is your object's ``__unicode__`` value. To change\nthe value displayed all you need to do is implement the correct template.\n\ndjango-dynamic-rawid looks for this template structure ``dynamic_rawid/<app>/<model>.html``\nand ``dynamic_rawid/<app>/multi_<model>.html`` (for multi-value lookups).\n\nFor instance, if I have a blog post with a ``User`` dynamic_rawid field that I want\ndisplay as ``Firstname Lastname``, I would create the template\n``dynamic_rawid/auth/user.html`` with::\n\n    <span>{{ object.0.first_name }} {{ object.0.last_name }}</span>\n\nA custom admin URL prefix\n=========================\n\nIf you have your admin *and* the dynamic_rawid scripts located on a different\nprefix than ``/admin/dynamic_rawid/`` you need adjust the ``dynamic_rawid_MOUNT_URL``\nJS variable.\n\nExample::\n\n    # In case the script is setup at /foobar/dynamic_rawid/\n    url(r'^foobar/dynamic_rawid/', include('dynamic_rawid.urls')),\n\n    # Provide a\n    <script>\n        window.dynamic_rawid_MOUNT_URL = \"{% url \"admin:index\" %}\";\n    </script>\n\nAn ideal place is the admin ``base_site.html`` template. Full example::\n\n    {% extends \"admin/base.html\" %}\n\n    {% block title %}{{ title }} | {{ site_title|default:_('Django site admin') }}{% endblock %}\n\n    {% block extrahead %}\n      {{ block.super }}\n      <script>\n        window.dynamic_rawid_MOUNT_URL = \"{% url \"admin:index\" %}\";\n      </script>\n    {% endblock %}\n\n    {% block branding %}\n    <h1 id=\"site-name\"><a href=\"{% url 'admin:index' %}\">{{ site_header|default:_('Django administration') }}</a></h1>\n    {% endblock %}\n\n    {% block nav-global %}{% endblock %}\n\n\nTesting and Local Development\n=============================\n\nRun the testsuite in your local environment using::\n\n    $ cd django-dynamic-rawid/\n    $ pipenv install --dev\n    $ pipenv run python ./runtests.py\n\nOr use tox to test against various Django and Python versions::\n\n    $ tox -r\n\nYou can also invoke the test suite or other 'manage.py' commands by calling\nthe ``django-admin`` tool with the test app settings::\n\n    $ cd django-dynamic-rawid/\n    $ pipenv install --dev\n    $ pipenv run django-admin\n    $ pipenv run django-admin test\n\nThis also allows you to run the internal testing app in a testserver, to\npreview a sample of what django-dynamic-rawid is doing::\n\n    $ pipenv run django-admin migrate\n    $ pipenv run django-admin createsuperuser\n    $ pipenv run django-admin runserver\n\n.. note:: The default settings file is set in the ``.env`` file which\n   pipenv automatically exposes::\n\n    DJANGO_SETTINGS_MODULE=dynamic_rawid.tests.testapp.settings\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/lincolnloop/django-dynamic-rawid/",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-dynamic-rawid",
    "platform": "",
    "project_url": "https://pypi.org/project/django-dynamic-rawid/",
    "release_url": "https://pypi.org/project/django-dynamic-rawid/2.0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "raw_id_fields widget replacement that handles display of an object's string value on change and can be overridden via a template.",
    "version": "2.0.1"
  },
  "releases": {
    "2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d4523260d67dcf9c3e12297aad3626a2",
          "sha256": "721a0fe6c0a251d745e2b130179b4869f0b254ac9556caf3cd55d2a0e2d7a658"
        },
        "downloads": -1,
        "filename": "django-dynamic-rawid-2.0.tar.gz",
        "has_sig": true,
        "md5_digest": "d4523260d67dcf9c3e12297aad3626a2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15270,
        "upload_time": "2018-01-17T17:59:08",
        "url": "https://files.pythonhosted.org/packages/df/b8/42c3a8ae4bdb49022327f50259069d97e924538d930b664404833f8d3e5e/django-dynamic-rawid-2.0.tar.gz"
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "33087c804b1e38e0434e22aad753d537",
          "sha256": "2519d4e40e7c61b7dce5deed0811ed57780adde8d6def0f9cb60e244d407f645"
        },
        "downloads": -1,
        "filename": "django-dynamic-rawid-2.0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "33087c804b1e38e0434e22aad753d537",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15257,
        "upload_time": "2018-01-17T18:00:54",
        "url": "https://files.pythonhosted.org/packages/c4/e7/e3ebcb95debf46ec15674bcf5c418025ac77b4dc1f21703ab38d654c8653/django-dynamic-rawid-2.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "33087c804b1e38e0434e22aad753d537",
        "sha256": "2519d4e40e7c61b7dce5deed0811ed57780adde8d6def0f9cb60e244d407f645"
      },
      "downloads": -1,
      "filename": "django-dynamic-rawid-2.0.1.tar.gz",
      "has_sig": true,
      "md5_digest": "33087c804b1e38e0434e22aad753d537",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 15257,
      "upload_time": "2018-01-17T18:00:54",
      "url": "https://files.pythonhosted.org/packages/c4/e7/e3ebcb95debf46ec15674bcf5c418025ac77b4dc1f21703ab38d654c8653/django-dynamic-rawid-2.0.1.tar.gz"
    }
  ]
}