{
  "info": {
    "author": "Martin McCrorey",
    "author_email": "martin.mccrorey@verizon.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Quality Assurance",
      "Topic :: Software Development :: Testing"
    ],
    "description": "Mobile Test Automation Framework (MTAF)\n---------------------------------------\n\nThe Mobile Test Automation Framework (MTAF) supports end-to-end regression\ntests of web and Android applications. It provides unit test and\nBehavior-Driven Development (BDD) test case organization using a Python Page\nObject Model architecture. User interaction with the application under test\n(AUT) is simulated using Selenium Webdriver (for web applications) and the\nAppium Python Client (for Android applications). Support for iOS (also using\nAppium) is planned for future development.\n\nThe first release of the MTAF includes only the MTAF Inspector, a tool to\nhelp test programmers create automated tests that use Appium to interact with\nAndroid applications. The remaining framework components will be included\nonce they have been refactored for general release.\n\nMTAF Inspector creates a graphical user interface (GUI) to capture application\nscreenshots and calculate unique partial xpaths for displayed elements. The\nresulting xpaths are converted to an abbreviated format called \"zpath\" to make\nthem shorter (Android xpaths can be quite long).\n\nThe user can select elements individually with a mouse click, or click and\ndrag a selection rectangle on the displayed screenshot to narrow down the\nlist of partial zpaths shown on the screen. Resource ID's are also displayed,\nbut some elements won't have one, and a resource ID may not represent a unique\nelement on the screenshot.\n\nClicking on an ID or xpath will outline the corresponding element(s) on the\nscreenshot, and copy the ID or zpath value to the main GUI.\n\nThe main GUI can use Appium to find elements matching the ID or zpath\nvalue, and show information about the elements.\n\n----\n\nFeatures\n========\n**MTAF Inspector:**\n    - Graphical tool to assist in designing end-to-end tests on Android devices\n    - Works with Android device emulators, or Android devices via USB connection\n    - Interactively determines valid locators for screen elements, for use with\n      Appium\n    - When no Appium server is present, grabs screenshots and xml using adb\n    - When used with Appium server, finds and manipulates visible screen\n      elements\n    - Records Appium interactions in a log file\n    - Loads plugins to extend menus, zpaths and GUI elements for specific\n      applications (see github.com/mccrorey48/mtaf_plugins for examples)\n\n**MTAF Library Modules (Python):**\n    - ADB\n        For using ADB from Python, the pyand (https://github.com/ardevd/pyand)\n        ADB module is included (which avoids the problem of \"pip install\" not\n        recognizing modules hosted on github)\n    - selenium_actions\n        Defines SeleniumActions class for using Selenium methods\n    - android_actions\n        Defines AndroidActions class for using Appium Python Client methods\n    - ios_actions (future)\n        Defines IosActions class for using Appium Python Client methods\n    - android_zpath\n        Defines abbreviations used to convert Android xpaths to zpaths, a\n        short format that makes working with locators a lot easier\n    - ios_zpath (future)\n        Defines abbreviations used to convert iOS xpaths to zpaths\n    - filters.py\n        Filter functions used to narrow down lists of screen elements returned\n        by the Appium Python Client search methods\n    - mtaf_logging\n        Wrapper for Python logging\n    - prune_logs\n        Utility to limit number and/or age of timestamped logs retained\n    - trace\n        Decorators for logging method calls and return values\n    - user_exception\n        Defines UserException class for graceful exception handling in test code\n    - softphone (future)\n        Creates and manages SIP softphones to make and receive calls for testing\n        devices that support voice calls\n\n**Page Object Model (future):**\n    - Each visible view (called a \"page\") displayed by an application under test\n      has a Python class which contains locators for that page, and methods to\n      be called while that page is displayed\n    - Locators for visible elements on the page are given names that convey the\n      element's function\n    - Each page class represents a separate namespace for locator names, so that\n      names can be re-used on other pages without conflict\n    - Test steps are generally implemented by calling methods belonging to the\n      current page's class, and these methods obtain locators from the locator\n      namespace belonging to their class\n    - Pages can inherit from a common base page class when they share common\n      elements and functionality; in this case, methods and locators are\n      inherited from the base class unless overridden in the current page class\n\n**Python Unit Test (future):**\n    - Test suite classes are structured using the Python unittest module\n      conventions\n    - Custom logging, and method call tracing using decorators\n\n**Python Feature Test (future):**\n    - Uses the Python \"behave\" framework\n    - Tests are written in \"feature\" files, using Gherkin BDD language\n    - Feature files describe tests in feature/scenario/step format, using \"plain language\" phrases to describe user interaction with the application\n    - Test step phrases are implemented in Python\n    - Test results are saved in a MongoDB database and available for review using a web browser\n\n**Report Single Page Application (future):**\n    - AngularJS application displays test results saved by Python Feature Test\n\n----\n\nRunning Inspector\n=================\n\nOnce mtaf has been installed, Inspector can be run from a script if the\nfollowing requirements are met:\n\n- adb can be found on the current path\n- Python and Tkinter are installed on the local machine\n- an Appium server is running on the local machine (optional)\n- the script has permission to write in the temporary files directory (default value is '.MtafInspector' in the user's home directory)\n\nInspector can be started with these two Python script lines::\n\n    from mtaf.inspector import start\n    start()\n\n\nInspector presents a GUI with these components (from top to bottom):\n\n- a menu bar with drop-down menus for both Appium and ADB operations\n- buttons and other controls for performing various operations that require Appium\n- a input field for entering arbitrary Python commands that will be run in the global context when the \"exec\" button is clicked\n- a scrolling text window that displays captured standard output\n- a scrolling text window that displays recorded commands\n- a bar with \"screenshot\" and \"quit\" buttons\n\nThe buttons and controls requiring Appium, along with the Appium drop-down menu,\nare disabled until Appium is started. To start Appium, run an Appium server\ninstance on the local machine, and click \"Start Appium\" on the menu\nbar.\n\nClick the \"screenshot\" button to capture a screenshot and the xml\nrepresentation of the current display.  This does not require Appium to be\nstarted, since Inspector will use ADB if Appium has not been started.\nInspector will display the screenshot, and a column of minimum unique relative\nzpaths for each element on the display; these are translated by MTAF methods\ninto the shortest xpaths that Appium can use to find that individual element.\nSome elements may have resource id's, which will be\ndisplayed in a separate column. Clicking a resource id will highlight one or\nmore elements on the screenshot (preloading the \"find element\" locator field in\nthe main GUI), and corresponding zpaths will be highlighted. Clicking a zpath\nwill highlight one element (highlighting the corresponding resource ID if the\nelement has one) and preload the zpath into the \"find element\" locator field.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/mccrorey48/mtaf",
    "keywords": "python,android,appium,selenium,adb,uiautomator,viewer,inspector,gui,locator,screenshot,xpath,resource_id,page object model",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mtaf",
    "platform": "",
    "project_url": "https://pypi.org/project/mtaf/",
    "release_url": "https://pypi.org/project/mtaf/1.0.16/",
    "requires_dist": [
      "PyYAML (==3.12)",
      "selenium (==3.8.0)",
      "Pillow (==4.3.0)",
      "olefile (==0.44)",
      "Appium-Python-Client (==0.25)"
    ],
    "requires_python": "",
    "summary": "Mobile Test Automation Framework",
    "version": "1.0.16"
  },
  "releases": {
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b60918c278afe8f032beb104800b00ef",
          "sha256": "f5c097e8c6d6d818c72e14cf6f2f37d5d29d7ef3cda6eb12c9f72fed52718c47"
        },
        "downloads": -1,
        "filename": "mtaf-1.0.10-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "b60918c278afe8f032beb104800b00ef",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 40519,
        "upload_time": "2018-01-08T16:26:23",
        "url": "https://files.pythonhosted.org/packages/27/5a/62b0a4690fe40cadb4e10f8815e64181c271d925b604c8497c8e50eba59a/mtaf-1.0.10-py2-none-any.whl"
      }
    ],
    "1.0.15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "79a30e2e62e92150670b899cb7d2c24c",
          "sha256": "e58daba55ca66d52e0a55b311f3e5e7a697aa66a8f400f4f00641c936f613418"
        },
        "downloads": -1,
        "filename": "mtaf-1.0.15-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "79a30e2e62e92150670b899cb7d2c24c",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 41089,
        "upload_time": "2018-01-12T21:04:08",
        "url": "https://files.pythonhosted.org/packages/4f/dc/b6480de7f6abe8c868e34e2f277e1c9fcb0eb375e59a8ed51eac61b7da4a/mtaf-1.0.15-py2.py3-none-any.whl"
      }
    ],
    "1.0.16": [
      {
        "comment_text": "",
        "digests": {
          "md5": "202e59e235758282a1beb254d7cf7fa0",
          "sha256": "8cea9d29580239fb558440e27761497e9d577b0bd6b971b623c81a4d50f36a5e"
        },
        "downloads": -1,
        "filename": "mtaf-1.0.16-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "202e59e235758282a1beb254d7cf7fa0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 41140,
        "upload_time": "2018-01-12T22:20:18",
        "url": "https://files.pythonhosted.org/packages/7b/0a/982ff9b5c1e2cd973ba82e5a4ce79c4ebe96b5eb9efccdae80b1d9b762ae/mtaf-1.0.16-py2.py3-none-any.whl"
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2573749fb299fe1c0ef795fc3e6feac3",
          "sha256": "9171d646d07cd8e8342b52822307b0bdf3c31b3d8117c94dcee24255ecef3a60"
        },
        "downloads": -1,
        "filename": "mtaf-1.0.4-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "2573749fb299fe1c0ef795fc3e6feac3",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 39389,
        "upload_time": "2018-01-03T23:01:15",
        "url": "https://files.pythonhosted.org/packages/a7/23/83dd2aa398002c5bc9978a800a4d125b1bc101e2d099a78423ba8a39aa15/mtaf-1.0.4-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "08f09eb81271f9524a1f4985b1327e3c",
          "sha256": "08bb06b4717bcdf1b6c869688894f37276a022ccd1e4aa1306290b0525b8f3d3"
        },
        "downloads": -1,
        "filename": "mtaf-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "08f09eb81271f9524a1f4985b1327e3c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31544,
        "upload_time": "2018-01-03T23:01:18",
        "url": "https://files.pythonhosted.org/packages/a4/6c/1f7144fd381fabbd3e8cbebde9b8f0a860ee492e2b604fb07094b6a4de03/mtaf-1.0.4.tar.gz"
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3b2aed0f2ad31eeea6d436e503ab0b6a",
          "sha256": "f699b61aac82e7d4f5f1b9df0c21dd0a370521726a69bcf2766e0361368ded7b"
        },
        "downloads": -1,
        "filename": "mtaf-1.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3b2aed0f2ad31eeea6d436e503ab0b6a",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 39713,
        "upload_time": "2018-01-04T22:42:38",
        "url": "https://files.pythonhosted.org/packages/39/e7/16b30d6da084723b8b8ca23273856a3a6e6f7aa60412cb93084f8eb9c4bf/mtaf-1.0.5-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "202e59e235758282a1beb254d7cf7fa0",
        "sha256": "8cea9d29580239fb558440e27761497e9d577b0bd6b971b623c81a4d50f36a5e"
      },
      "downloads": -1,
      "filename": "mtaf-1.0.16-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "202e59e235758282a1beb254d7cf7fa0",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 41140,
      "upload_time": "2018-01-12T22:20:18",
      "url": "https://files.pythonhosted.org/packages/7b/0a/982ff9b5c1e2cd973ba82e5a4ce79c4ebe96b5eb9efccdae80b1d9b762ae/mtaf-1.0.16-py2.py3-none-any.whl"
    }
  ]
}