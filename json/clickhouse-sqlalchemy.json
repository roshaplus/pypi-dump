{
  "info": {
    "author": "Konstantin Lebedev",
    "author_email": "kostyan.lebedev@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: SQL",
      "Topic :: Database",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries",
      "Topic :: Software Development :: Libraries :: Application Frameworks",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "ClickHouse SQLAlchemy\n=====================\n\nClickHouse dialect for SQLAlchemy with basic types support that uses HTTP interface to\n`ClickHouse database <https://clickhouse.yandex/>`_.\n\nInstallation\n============\n\nThe package can be installed using ``pip``:\n\n    .. code-block:: bash\n\n       pip install clickhouse-sqlalchemy\n\n\nConnection Parameters\n=====================\n\nClickHouse SQLAlchemy uses the following syntax for the connection string:\n\n    .. code-block:: python\n\n     'clickhouse://<user>:<password>@<host>:<port>/<database>[?key=value..]'\n\nWhere:\n\n- *port* is port ClickHouse server is bound to. Default is ``8123``.\n- *database* is database connect to. Default is ``default``.\n\nThere are several options can be specified in query string:\n\n- *timeout* in seconds. There is no timeout by default.\n- *protocol* to use. Possible choices: ``http``, ``https``. ``http`` is default.\n\n\nConnection string to database `test` in default ClickHouse installation:\n\n    .. code-block:: python\n\n         'clickhouse://default:@localhost/test'\n\n\nWhen you are using `nginx` as proxy server for ClickHouse server connection string might look like:\n\n    .. code-block:: python\n\n         'clickhouse://user:password@example.com:8124/test?protocol=https'\n\nWhere ``8124`` is proxy port.\n\n\nFeatures\n========\n\nNative SQLAlchemy declarative support\n-------------------------------------\n\nBoth declarative and constructor-style tables support:\n\n    .. code-block:: python\n\n        from sqlalchemy import create_engine, Column, Table, MetaData, literal\n\n        from clickhouse_sqlalchemy import types, engines\n        from clickhouse_sqlalchemy.session import make_session\n        from clickhouse_sqlalchemy.declarative import get_declarative_base\n\n        uri = 'clickhouse://default:@localhost/test'\n\n        engine = create_engine(uri)\n        session = make_session(engine)\n        metadata = MetaData(bind=engine)\n\n        Base = get_declarative_base(metadata=metadata)\n\n        class Rate(Base):\n            day = Column(types.Date, primary_key=True)\n            value = Column(types.Int32)\n\n            __table_args__ = (\n                engines.Memory(),\n            )\n\n        another_table = Table('another_rate', metadata,\n            Column('day', types.Date, primary_key=True),\n            Column('value', types.Int32, server_default=literal(1)),\n            engines.Memory()\n        )\n\nTables created in declarative way have lowercase with words separated by underscores naming convention.\nBut you can easy set you own via SQLAlchemy ``__tablename__`` attribute.\n\nBasic DDL support\n-----------------\n\nYou can emit simple DDL. Example ``CREATE/DROP`` table:\n\n    .. code-block:: python\n\n        table = Rate.__table__\n        table.create()\n        another_table.create()\n\n\n        another_table.drop()\n        table.drop()\n\n\nBasic INSERT clause support\n---------------------------\n\nSimple batch INSERT:\n\n    .. code-block:: python\n\n        from datetime import date, timedelta\n        from sqlalchemy import func\n\n        today = date.today()\n        rates = [{'day': today - timedelta(i), 'value': 200 - i} for i in range(100)]\n\n        # Emits single INSERT statement.\n        session.execute(table.insert(), rates)\n\n\nNative SQLAlchemy query method chaining\n---------------------------------------\n\n``order_by``, ``filter``, ``limit``, ``offset``, etc. are supported:\n\n    .. code-block:: python\n\n        session.query(func.count(Rate.day)) \\\n            .filter(Rate.day > today - timedelta(20)) \\\n            .scalar()\n\n        session.query(Rate.value) \\\n            .order_by(Rate.day.desc()) \\\n            .first()\n\n        session.query(Rate.value) \\\n            .order_by(Rate.day) \\\n            .limit(10) \\\n            .all()\n\n        session.query(func.sum(Rate.value)) \\\n            .scalar()\n\n\nAdvanced INSERT clause support\n------------------------------\nINSERT FROM SELECT statement:\n\n    .. code-block:: python\n\n        from sqlalchemy import cast\n\n        # Labels must be present.\n        select_query = session.query(\n            Rate.day.label('day'),\n            cast(Rate.value * 1.5, types.Int32).label('value')\n        ).subquery()\n\n        # Emits single INSERT FROM SELECT statement\n        session.execute(\n            another_table.insert()\n            .from_select(['day', 'value'], select_query)\n        )\n\n\nMany but not all of SQLAlchemy features are supported out of the box.\n\nUNION ALL example:\n\n    .. code-block:: python\n\n        from sqlalchemy import union_all\n\n        select_rate = session.query(\n            Rate.day.label('date'),\n            Rate.value.label('x')\n        )\n        select_another_rate = session.query(\n            another_table.c.day.label('date'),\n            another_table.c.value.label('x')\n        )\n\n        union_all(select_rate, select_another_rate).execute().fetchone()\n\n\nRunning tests\n=============\n\n    .. code-block:: bash\n\n        mkvirtualenv testenv && python setup.py test\n\n``pip`` will automatically install all required modules for testing.\n\n\nLicense\n=======\n\nClickHouse SQLAlchemy is distributed under the `MIT license\n<http://www.opensource.org/licenses/mit-license.php>`_.",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/xzkostyan/clickhouse-sqlalchemy",
    "keywords": "ClickHouse db database cloud analytics",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "clickhouse-sqlalchemy",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/clickhouse-sqlalchemy/",
    "release_url": "https://pypi.org/project/clickhouse-sqlalchemy/0.0.1/",
    "requires_python": null,
    "summary": "Simple ClickHouse SQLAlchemy Dialect using HTTP interface",
    "version": "0.0.1"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5b54ebb53c77967d374925654b5e6c19",
          "sha256": "dfdc18259455fa6959defcd9d3506ae79d40e129a4adda6f6b728a3d7a2996c2"
        },
        "downloads": 45,
        "filename": "clickhouse-sqlalchemy-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5b54ebb53c77967d374925654b5e6c19",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11202,
        "upload_time": "2017-03-30T00:13:33",
        "url": "https://files.pythonhosted.org/packages/ff/5c/9fa61a94d73476db91d196994d97c748dc518292a9c24a6bf9568b112ce0/clickhouse-sqlalchemy-0.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5b54ebb53c77967d374925654b5e6c19",
        "sha256": "dfdc18259455fa6959defcd9d3506ae79d40e129a4adda6f6b728a3d7a2996c2"
      },
      "downloads": 45,
      "filename": "clickhouse-sqlalchemy-0.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "5b54ebb53c77967d374925654b5e6c19",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 11202,
      "upload_time": "2017-03-30T00:13:33",
      "url": "https://files.pythonhosted.org/packages/ff/5c/9fa61a94d73476db91d196994d97c748dc518292a9c24a6bf9568b112ce0/clickhouse-sqlalchemy-0.0.1.tar.gz"
    }
  ]
}