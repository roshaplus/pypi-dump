{
  "info": {
    "author": "Sergei Kovalev",
    "author_email": "zili.tnd@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "Django-Rediser\n==============\n\n|build| |codacy| |pypi| |license|\n\nPackage for creating API with built-in validation and authentication\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis product is designed to build API endpoints of varying complexity\nand nesting.\n\nThe core is a view class - BaseApiView (the inheritor of the standard\ndjango view)\n\n--------------\n\n1. settings\n'''''''''''\n\nDEFAULT settings (may be overridden):\n\n.. code:: python\n\n    DJANGO_RESTER = {\n        'RESTER_JWT': {\n            'SECRET': 'secret_key',\n            'EXPIRATION': 60 * 60 * 24 * 14,  # seconds\n            'AUTH_HEADER': 'Authorization',\n            'AUTH_HEADER_PREFIX': 'JWT',\n            'ALGORITHM': 'HS256',\n            'PAYLOAD_LIST': ['email'],\n            },\n        'RESTER_LOGIN_FIELD': 'username',\n        'RESTER_AUTH_BACKEND': 'django_rester.jwt',\n        'RESTER_TRY_RESPONSE_STRUCTURE': False,\n    }\n\n**JWT** - JWT authentication settings (in case of\n'RESTER\\_AUTH\\_BACKEND' = 'django\\_rester.jwt')\\*:\n\n\u00a0\u00a0\u00a0\u00a0 **RESTER\\_SECRET** - JWT secret key\n\n\u00a0\u00a0\u00a0\u00a0 **RESTER\\_EXPIRATION\\_DELTA** - token expiration time\n(datetime.now() + RESTER\\_EXPIRATION\\_DELTA)\n\n\u00a0\u00a0\u00a0\u00a0 **RESTER\\_AUTH\\_HEADER** - HTTP headed, which will be used for auth\ntoken.\n\n\u00a0\u00a0\u00a0\u00a0 **RESTER\\_AUTH\\_HEADER\\_PREFIX** - prefix for auth token\n(\"Authorization:<prefix> <token>\")\n\n\u00a0\u00a0\u00a0\u00a0 **RESTER\\_ALGORITHM** - cypher alghorithm\n\n\u00a0\u00a0\u00a0\u00a0 **RESTER\\_PAYLOAD\\_LIST** - payload list for token encode (will\ntake specified **user** attributes to create token)\n\n**RESTER\\_LOGIN\\_FIELD** - user login field (default is 'username' as in\ndjango)\n\n**RESTER\\_AUTH\\_BACKEND** - authentication backend\\*\n\n**RESTER\\_TRY\\_RESPONSE\\_STRUCTURE** - use or not @try\\_response()\ndecorator by default. \\*\\*\\*\n\n2. built-in statuses\n''''''''''''''''''''\n\n``from django_rester.status import ...`` status.py from\n`DRF <http://www.django-rest-framework.org/>`__, it's simple and easy to\nunderstand.\n\nAny statuses used in this documentation are described in that file.\n\\*\\*\\* ##### 3. built-in exceptions:\n\n``from django_rester.exceptions import ...`` you may use those\nexceptions to interact with **@try\\_response** decorator (good example\nof usage), or in any other way you want\n\n**class ResponseError(Exception)**\n\n\u00a0\u00a0\u00a0\u00a0base exception class, standard Exception inheritor, added response\nstatus - HTTP\\_500\\_INTERNAL\\_SERVER\\_ERROR\n\n**class ResponseBadRequest(ResponseError)**\n\n\u00a0\u00a0\u00a0\u00a0ResponseError inheritor, response status changed to\nHTTP\\_400\\_BAD\\_REQUEST\n\n**class ResponseServerError(ResponseError)**\n\n\u00a0\u00a0\u00a0\u00a0ResponseError inheritor\n\n**class ResponseAuthError(ResponseError)**\n\n\u00a0\u00a0\u00a0\u00a0ResponseError inheritor, response status changed to\nHTTP\\_401\\_UNAUTHORIZED\n\n**class ResponseOkMessage(ResponseError)**\n\n\u00a0\u00a0\u00a0\u00a0ResponseError inheritor\n\n\u00a0\u00a0\u00a0\u00a0acceptable arguments: \\*, message='', data=None,\nstatus=HTTP\\_200\\_OK\n\n**class ResponseFailMessage(ResponseError)**\n\n\u00a0\u00a0\u00a0\u00a0ResponseError inheritor\n\n\u00a0\u00a0\u00a0\u00a0acceptable arguments: \\*, message='', data=None,\nstatus=HTTP\\_500\\_INTERNAL\\_SERVER\\_ERROR\n\n**class ResponseBadRequestMsgList(ResponseError)**\n\n\u00a0\u00a0\u00a0\u00a0ResponseError inheritor\n\n\u00a0\u00a0\u00a0\u00a0acceptable arguments: \\*, messages=None,\nstatus=HTTP\\_400\\_BAD\\_REQUEST\n\n\u00a0\u00a0\u00a0\u00a0messages could be list, tuple or string. \\*\\*\\* ##### 4. permisson\nclasses\n\n``from django_rester.permission import ...`` Permission classes created\nto interact wih **@permissions()** decorator (good example of usage), or\nin any other way you want\n\nAll permission classes accepts only one argument on **init** - django\nview **request** object.\n\nAll permission classes has 2 attributes, defined on **init**:\n\n**check**: Bool - returns **True** or **False** if request.user may or\nmay not access endpoint method\n\n**message**: could be a string or list of messages **class\nBasePermission**\n\n\u00a0\u00a0\u00a0\u00a0contains all base permission methods, it is not recommended to use\nit directly in projects\n\n**class IsAuthenticated(BasePermission)**\n\n\u00a0\u00a0\u00a0\u00a0check = **True** if user authenticated and active, else **False**\n\n**class IsAdmin(BasePermission)**\n\n\u00a0\u00a0\u00a0\u00a0check = **True** if user authenticated and active and is\\_superuser,\nelse **False**\n\n**class AllowAny(BasePermission)**\n\n\u00a0\u00a0\u00a0\u00a0check = **True** for any user (even anonymous)\n\n--------------\n\n5. built-in decorators\n''''''''''''''''''''''\n\n``from django_rester.decorators import ...``\n**@try\\_response(structure=True)**\n\nMay be used to handle custom built-in exceptions and return structured\ndata:\n\n\u00a0\u00a0\u00a0\u00a0**{\"success\": bool, \"message\": list, \"data\": dict}**\n\nto response handler.\n\nif **structure=False** then exeptions will be handled, but clean data\nand status will be returned **@permissions()**\n\n\u00a0\u00a0\u00a0\u00a0accepts permission class or list, tuple of classes.\n\n\u00a0\u00a0\u00a0\u00a0if check is passed, then user will be allowed to use endpoint\n\nexample:\n\n::\n\n    class Example(BaseApiView):\n\n        @permissions(IsAdmin)\n        def post(request, request_data, *args, **kwargs):\n            pass\n\n--------------\n\n6. built-in views\n'''''''''''''''''\n\n``from django_rester.views import ...`` **class\nBaseApiView(View)**\\ \\*\\*\n\ninherits from standard django view.\n\nclass attributes:\n\n\u00a0\u00a0\u00a0\u00a0**auth\\_class** - authentication class of current authentication\nbackend\n\n\u00a0\u00a0\u00a0\u00a0**available\\_fields** - list, tuple of fields which could be\nprocessed as request parameters\n\n\u00a0\u00a0\u00a0\u00a0**required\\_fields** - list, tuple of fields which required to\nprocess request\n\nclass HTTP methods (get, post, put, etc...) accepts next arguments:\nrequest, request\\_data, \\*args, \\*\\*kwargs\n\n\u00a0\u00a0\u00a0\u00a0**request** - standard django view request object\n\n\u00a0\u00a0\u00a0\u00a0**request\\_data** - all received request parameters as json\nserialized object\n\nAutomatic validation with [available\\_fields, required\\_fields,\n...]\\*\\*\\*.\n\nUser authentication with selected authentication backend **class\nLogin(BaseApiView)**\n\nCould be used to authenticate user with selected authentication backend.\n\n\u00a0\u00a0\u00a0\u00a0Allowed method is 'POST' only.\n\n\u00a0\u00a0\u00a0\u00a0Requires username and password in request parameters (username\nfieldname parameter may be set in settings)\n\n\u00a0\u00a0\u00a0\u00a0Returns token and HTTP\\_200\\_OK status code if authentication\nsuccess, error message and HTTP\\_401\\_UNAUTHORIZED if failed **class\nLogout(BaseApiView)**\n\nCould be used to logout (with redis support) or just to let know\nfrontend about logout process. Any view could be used the same way, here\nis a **simple example**:\n\n\u00a0\u00a0\u00a0\u00a0**app/views.py:**\n\n::\n\n    from django_rester.views import BaseAPIView\n    from django_rester.decorators import try_response, permissions\n    from django_rester.exceptions import ResponseOkMessage\n    from django_rester.permission import IsAdmin\n    from django_rester.status import HTTP_200_OK\n    from app.models import Model\n\n    class TestView(BaseAPIView):\n        available_fields = ['title']\n        required_fields = []\n\n        def retrieve_items():\n            return Model.objects.all()\n\n        def create_item(title):\n            item, cre = Model.objects.get_or_create(title=title)\n            return item, cre\n\n        @try_response\n        @permissions(AllowAny)\n        def get(self, request, request_data, *args, **kwargs):\n            items = self.retrieve_items()\n            response_data = {...here we should build some response structure...}****\n            return response_data, HTTP_200_OK\n\n        @try_response\n        @permissions(IsAdmin)\n        def post(self, request, request_data, *args, **kwargs):\n            title = request_data.get('title', None)\n            # no need to check 'if title', because it is allready validated by 'available_fields'\n            item, cre = self.create_item(title)\n            if not cre:\n                raise ResponseOkMessage(message='Item allready exists', data={'title': title})\n            response_data = {...here we should build some response structure...}****\n\n            return response_data\n\n\u00a0\u00a0\u00a0\u00a0**app/urls.py:**\n\n::\n\n    from django.conf.urls import url\n    from .views import TestView\n\n    urlpatterns = [\n        url(r'^test/', TestView.as_view()),\n    ]\n\n--------------\n\n\\*- Right now only one authentication backend is available - JWT\n\n\\*\\*- BaseApiView is on active development stage, other attributes and\nmethods will be added soon\n\n\\*\\*\\*- this list will be extended in development process\n\n\\*\\*\\*\\*- automatic response structure build - one of the nearest tasks\n\n.. |build| image:: https://travis-ci.org/lexycore/django-rester.svg?branch=master\n   :target: https://travis-ci.org/lexycore/django-rester\n.. |codacy| image:: https://api.codacy.com/project/badge/Grade/dee291831b0b43158e2d2301726e2c00\n   :target: https://www.codacy.com/app/lexycore/django-rester/dashboard\n.. |pypi| image:: https://img.shields.io/pypi/v/django-rester.svg\n   :target: https://pypi.python.org/pypi/django-rester\n.. |license| image:: https://img.shields.io/pypi/l/django-rester.svg\n   :target: https://github.com/lexycore/django-rester/blob/master/LICENSE\n",
    "docs_url": null,
    "download_url": "https://github.com/lexycore/django-rester.git",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://lexycore.github.io/django-rester",
    "keywords": "development",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-rester",
    "platform": "",
    "project_url": "https://pypi.org/project/django-rester/",
    "release_url": "https://pypi.org/project/django-rester/0.0.1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Django REST API Helper",
    "version": "0.0.1.2"
  },
  "releases": {
    "0.0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "688a8de8fbf32417d77bcddd1e3751db",
          "sha256": "a7ab688def4e871817e2dcb9309005d8b2cb6463ebfb6d86cae1800e37d321d2"
        },
        "downloads": -1,
        "filename": "django_rester-0.0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "688a8de8fbf32417d77bcddd1e3751db",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 17473,
        "upload_time": "2017-11-10T11:09:47",
        "url": "https://files.pythonhosted.org/packages/db/6f/a45cc8910d3adf45ac085d9d715abe749035e8cf648ea9fd2b0ff7066a45/django_rester-0.0.1.2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c493ad3b1eb294d1055bc980747d3690",
          "sha256": "c78607d8f5834ff882b51a44482400b3030fd589c0fcd13558acec25370fd8fc"
        },
        "downloads": -1,
        "filename": "django-rester-0.0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c493ad3b1eb294d1055bc980747d3690",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14348,
        "upload_time": "2017-11-10T11:09:45",
        "url": "https://files.pythonhosted.org/packages/48/1f/87cc48937156a39de5344ea118d19f2687ea2adf807d21e6ddd2632d26a7/django-rester-0.0.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "688a8de8fbf32417d77bcddd1e3751db",
        "sha256": "a7ab688def4e871817e2dcb9309005d8b2cb6463ebfb6d86cae1800e37d321d2"
      },
      "downloads": -1,
      "filename": "django_rester-0.0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "688a8de8fbf32417d77bcddd1e3751db",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "size": 17473,
      "upload_time": "2017-11-10T11:09:47",
      "url": "https://files.pythonhosted.org/packages/db/6f/a45cc8910d3adf45ac085d9d715abe749035e8cf648ea9fd2b0ff7066a45/django_rester-0.0.1.2-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "c493ad3b1eb294d1055bc980747d3690",
        "sha256": "c78607d8f5834ff882b51a44482400b3030fd589c0fcd13558acec25370fd8fc"
      },
      "downloads": -1,
      "filename": "django-rester-0.0.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "c493ad3b1eb294d1055bc980747d3690",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 14348,
      "upload_time": "2017-11-10T11:09:45",
      "url": "https://files.pythonhosted.org/packages/48/1f/87cc48937156a39de5344ea118d19f2687ea2adf807d21e6ddd2632d26a7/django-rester-0.0.1.2.tar.gz"
    }
  ]
}