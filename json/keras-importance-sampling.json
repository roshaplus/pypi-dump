{
  "info": {
    "author": "Angelos Katharopoulos",
    "author_email": "angelos.katharopoulos@idiap.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Scientific/Engineering"
    ],
    "description": "Importance Sampling\n====================\n\nThis python package provides a library that accelerates the training of\narbitrary neural networks created with `Keras <http://keras.io>`__ using\n**importance sampling**.\n\n.. code:: python\n\n    # Keras imports\n\n    from importance_sampling.training import ImportanceTraining, \\\n        ApproximateImportanceTraining\n\n\n    x_train, y_train, x_val, y_val = load_data()\n    model = create_keras_model()\n    model.compile(\n        optimizer=\"adam\",\n        loss=\"categorical_crossentropy\",\n        metrics=[\"accuracy\"]\n    )\n\n    ImportanceTraining(model).fit(\n        x_train, y_train,\n        batch_size=32,\n        epochs=10,\n        verbose=1,\n        validation_data=(x_val, y_val)\n    )\n\n    model.evaluate(x_val, y_val)\n\nImportance sampling for Deep Learning is an active research field and this\nlibrary is undergoing development so your mileage may vary.\n\nRelevant Research\n-----------------\n\n**Ours**\n\n* Biased Importance Sampling for Deep Neural Network Training [`preprint <https://arxiv.org/abs/1706.00043>`__]\n\n**By others**\n\n* Stochastic optimization with importance sampling for regularized loss\n  minimization [`pdf <http://www.jmlr.org/proceedings/papers/v37/zhaoa15.pdf>`__]\n* Variance reduction in SGD by distributed importance sampling [`pdf <https://arxiv.org/pdf/1511.06481>`__]\n\nDependencies & Installation\n---------------------------\n\nNormally if you already have a functional Keras installation you just need to\n``pip install keras-importance-sampling``.\n\n* ``Keras`` > 2\n* A Keras backend among *Tensorflow*, *Theano* and *CNTK*\n* ``transparent-keras``\n* ``blinker``\n* ``numpy``\n* ``matplotlib``, ``seaborn``, ``scikit-learn`` are optional (used by the plot\n  scripts)\n\nDocumentation\n-------------\n\nThe module has a dedicated `documentation site\n<http://idiap.ch/~katharas/importance-sampling/>`__ but you can also read the\n`source code <https://github.com/idiap/importance-sampling>`__ and the `examples\n<https://github.com/idiap/importance-sampling/tree/master/examples>`__ to get an\nidea of how the library should be used and extended.\n\nExamples\n---------\n\nIn the ``examples`` folder you can find some Keras examples that have been edited\n(minimally) to use importance sampling.\n\nCode examples\n*************\n\nIn this section we will showcase part of the API that can be used to train\nneural networks with importance sampling.\n\n.. code:: python\n\n    # Import what is needed to build the Keras model\n    from keras import backend as K\n    from keras.layers import Dense\n    from keras.models import Sequential\n\n    # Import a toy dataset and the importance training\n    from importance_sampling.datasets import CanevetICML2016\n    from importance_sampling.training import ImportanceTraining\n\n\n    def create_nn():\n        \"\"\"Build a simple fully connected NN\"\"\"\n        model = Sequential([\n            Dense(40, activation=\"tanh\", input_shape=(2,)),\n            Dense(40, activation=\"tanh\"),\n            Dense(1, activation=\"sigmoid\")\n        ])\n\n        model.compile(\n            optimizer=\"adam\",\n            loss=\"binary_crossentropy\",\n            metrics=[\"accuracy\"]\n        )\n\n        return model\n\n\n    if __name__ == \"__main__\":\n        # Load the data\n        dataset = CanevetICML2016(N=1024)\n        x_train, y_train = dataset.train_data[:]\n        x_test, y_test = dataset.test_data[:]\n        y_train, y_test = y_train.argmax(axis=1), y_test.argmax(axis=1)\n\n        # Create the NN and keep the initial weights\n        model = create_nn()\n        weights = model.get_weights()\n\n        # Train with uniform sampling\n        K.set_value(model.optimizer.lr, 0.01)\n        model.fit(\n            x_train, y_train,\n            batch_size=64, epochs=10,\n            validation_data=(x_test, y_test)\n        )\n\n        # Train with biased importance sampling\n        model.set_weights(weights)\n        K.set_value(model.optimizer.lr, 0.01)\n        ImportanceTraining(model, forward_batch_size=1024).fit(\n            x_train, y_train,\n            batch_size=64, epochs=3,\n            validation_data=(x_test, y_test)\n        )\n\nUsing the script\n****************\n\nThe following terminal commands train a small VGG-like network to ~0.55% error\non MNIST (the numbers are from a CPU). It is not optimized, it just showcases\nthat with importance sampling *6 times* less iterations are required in this\ncase.\n\n.. code::\n\n    $ # Train a small cnn with mnist for 500 mini-batches using importance\n    $ # sampling with bias to achieve ~ 0.55% error (on the CPU)\n    $ time ./importance_sampling.py \\\n    >   small_cnn \\\n    >   oracle-loss \\\n    >   model \\\n    >   predicted \\\n    >   mnist \\\n    >   /tmp/is \\\n    >   --hyperparams 'batch_size=i128;lr=f0.003;lr_reductions=I10000;k=f0.5' \\\n    >   --train_for 500 --validate_every 500\n    real    6m16.476s\n    user    24m46.800s\n    sys     5m36.592s\n    $\n    $ # And with uniform sampling to achieve the same accuracy (learning rate is\n    $ # smaller because with uniform sampling the variance is too big)\n    $ time ./importance_sampling.py \\\n    >   small_cnn \\\n    >   oracle-loss \\\n    >   uniform \\\n    >   unweighted \\\n    >   mnist \\\n    >   /tmp/uniform \\\n    >   --hyperparams 'batch_size=i128;lr=f0.001;lr_reductions=I1000' \\\n    >   --train_for 3000 --validate_every 3000\n    real    10m36.836s\n    user    47m36.316s\n    sys     7m14.412s\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://www.idiap.ch/~katharas/importance-sampling/",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "keras-importance-sampling",
    "platform": "",
    "project_url": "https://pypi.org/project/keras-importance-sampling/",
    "release_url": "https://pypi.org/project/keras-importance-sampling/0.3.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Accelerate training of neural networks using importance sampling.",
    "version": "0.3.1"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e430e0be7bf91fc4bfb4f3ae49b5763c",
          "sha256": "64d6d84339cc4b0f2e6d4c4a0a9a062a0015813a877529a4564ca25d7aa73fa7"
        },
        "downloads": -1,
        "filename": "keras-importance-sampling-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e430e0be7bf91fc4bfb4f3ae49b5763c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22878,
        "upload_time": "2017-07-31T14:20:10",
        "url": "https://files.pythonhosted.org/packages/32/21/4fecd3e0b490014f0d75732247a89c4aa0cf6018f82461d84abec75a8917/keras-importance-sampling-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7a04b7a0865899611b061172a9cb8da5",
          "sha256": "0d2b598153d96fe4cac1eb26d97c14cda58d5b2bb9eea4129d5809440948b802"
        },
        "downloads": -1,
        "filename": "keras-importance-sampling-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7a04b7a0865899611b061172a9cb8da5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22878,
        "upload_time": "2017-07-31T14:21:35",
        "url": "https://files.pythonhosted.org/packages/db/d2/de64fbb682fed771ba6959f59c7d755d8a5901c08556ac4fc505c16224b6/keras-importance-sampling-0.1.2.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "958a23cee9b3f07b19ad61e1865c12a9",
          "sha256": "a10af3952b06d34d80721edf129729cc902916768f566961b284b440cdf6b9f5"
        },
        "downloads": -1,
        "filename": "keras-importance-sampling-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "958a23cee9b3f07b19ad61e1865c12a9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22920,
        "upload_time": "2017-08-03T13:30:58",
        "url": "https://files.pythonhosted.org/packages/14/4f/618dfd0ca0861563f5b9f7f3d0cfa0e4fb1cd74223cbe845570a852fbdf0/keras-importance-sampling-0.2.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "88295b1f1219c4d82dd95e573affbf01",
          "sha256": "14d7d191e3a8e0aca4700e4f1f3e4f9ee79ad682a2ca0b7e1c8d083756c1e811"
        },
        "downloads": -1,
        "filename": "keras-importance-sampling-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "88295b1f1219c4d82dd95e573affbf01",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24978,
        "upload_time": "2017-08-09T13:19:54",
        "url": "https://files.pythonhosted.org/packages/6c/82/700d116d40dfd0fcf7c7480c6992012284103e0fa32d83e67092e4ab766f/keras-importance-sampling-0.2.1.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f8c1e0432a6cb8751d6769d3ba7e97d3",
          "sha256": "4617c9ecba024d6daf7820bad0f00a88d3dde739f50e060ac57ebbad6de4a9e2"
        },
        "downloads": -1,
        "filename": "keras-importance-sampling-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f8c1e0432a6cb8751d6769d3ba7e97d3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23574,
        "upload_time": "2017-08-24T14:47:46",
        "url": "https://files.pythonhosted.org/packages/58/49/b5d22c7a556a524e008e38c448b4122b586303d2f901bc2f1934894f9276/keras-importance-sampling-0.3.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4f15e1b60e1c2d49b01800ab32600a4f",
          "sha256": "82049d516af90fb2d4be03266af726a52fdc67bab5d7647c211a92a586974a58"
        },
        "downloads": -1,
        "filename": "keras-importance-sampling-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4f15e1b60e1c2d49b01800ab32600a4f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23561,
        "upload_time": "2017-10-16T16:29:46",
        "url": "https://files.pythonhosted.org/packages/c5/18/b124fba5bd73908c9e0e405b1bf056016f0b06701bac7b77b5b627167215/keras-importance-sampling-0.3.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "4f15e1b60e1c2d49b01800ab32600a4f",
        "sha256": "82049d516af90fb2d4be03266af726a52fdc67bab5d7647c211a92a586974a58"
      },
      "downloads": -1,
      "filename": "keras-importance-sampling-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "4f15e1b60e1c2d49b01800ab32600a4f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 23561,
      "upload_time": "2017-10-16T16:29:46",
      "url": "https://files.pythonhosted.org/packages/c5/18/b124fba5bd73908c9e0e405b1bf056016f0b06701bac7b77b5b627167215/keras-importance-sampling-0.3.1.tar.gz"
    }
  ]
}