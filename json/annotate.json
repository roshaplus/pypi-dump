{
  "info": {
    "author": "Adam Karpierz",
    "author_email": "python@python.pl",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: zlib/libpng License",
      "Natural Language :: Polish",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: IronPython",
      "Programming Language :: Python :: Implementation :: Jython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Programming Language :: Python :: Implementation :: Stackless",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "annotate\n========\n\nFunction annotations for Python2.\n\nFeatures\n========\n\n**@annotate**\n\n| Decorator to set a function's __annotations__ like Py3.\n| http://www.python.org/dev/peps/pep-3107/\n\nOverview\n========\n\nTODO...\n\nExamples\n========\n\n.. code:: python\n\n  from typing   import Optional, Tuple, Union, Sequence\n  from annotate import annotate\n\n  from .lib import cached\n  from .    import jni\n\n  from .jobjectbase import JObjectBase\n  from .jclass      import JClass\n  from .jobject     import JObject\n\n\n  class JArray(JObjectBase):\n\n      \"\"\"Java Array\"\"\"\n\n      @classmethod\n      @annotate('JArray', size=Union[int, long])\n      def newBooleanArray(cls, size):\n          ...\n      ...\n      @classmethod\n      @annotate('JArray', size=Union[int, long])\n      def newDoubleArray(cls, size):\n          ...\n      @classmethod\n      @annotate('JArray', size=Union[int, long])\n      def newStringArray(cls, size):\n          ...\n      @classmethod\n      @annotate('JArray', size=Union[int, long], component_class=JClass)\n      def newObjectArray(cls, size, component_class):\n          ...\n\n      @annotate(jenv=jni.JNIEnv, jarr=jni.jarray, borrowed=bool)\n      def __init__(self, jenv, jarr, borrowed=False):\n          ...\n\n      def __hash__(self):\n          return super(JArray, self).__hash__()\n\n      def __len__(self):\n          return self.getLength()\n\n      @annotate(JObject, borrowed=bool)\n      def asObject(self, borrowed=False):\n          ...\n\n      @cached\n      @annotate(int)\n      def getLength(self):\n          ...\n\n      @annotate(bool, idx=int)\n      def getBoolean(self, idx):\n          ...\n      ...\n      @annotate(float, idx=int)\n      def getDouble(self, idx):\n          ...\n      @annotate(Optional[str], idx=int)\n      def getString(self, idx):\n          ...\n      @annotate(Optional[JObject], idx=int)\n      def getObject(self, idx):\n          ...\n\n      @annotate(idx=int, val=bool)\n      def setBoolean(self, idx, val):\n          ...\n      @annotate(idx=int, val=str)\n      def setChar(self, idx, val):\n          ...\n      ...\n      @annotate(idx=int, val=Union[int, long])\n      def setLong(self, idx, val):\n          ...\n      @annotate(idx=int, val=float)\n      def setDouble(self, idx, val):\n          ...\n      @annotate(idx=int, val=Optional[str])\n      def setString(self, idx, val):\n          ...\n      @annotate(idx=int, val=Optional[JObject])\n      def setObject(self, idx, val):\n          ...\n\n      @annotate('JArray', start=int, stop=int, step=int)\n      def getBooleanSlice(self, start, stop, step):\n          ...\n      ...\n      @annotate('JArray', start=int, stop=int, step=int)\n      def getDoubleSlice(self, start, stop, step):\n          ...\n      @annotate('JArray', start=int, stop=int, step=int)\n      def getStringSlice(self, start, stop, step):\n          ...\n      @annotate('JArray', start=int, stop=int, step=int)\n      def getObjectSlice(self, start, stop, step):\n          ...\n\n      @annotate(start=int, stop=int, step=int, val=Sequence[bool])\n      def setBooleanSlice(self, start, stop, step, val):\n          ...\n      @annotate(start=int, stop=int, step=int, val=Union[Sequence[str], str])\n      def setCharSlice(self, start, stop, step, val):\n          ...\n      @annotate(start=int, stop=int, step=int,\n                val=Union[Sequence[Union[int,bytes]], (bytes, bytearray)])\n      def setByteSlice(self, start, stop, step, val):\n          ...\n      ...\n      @annotate(start=int, stop=int, step=int, val=Sequence[float])\n      def setDoubleSlice(self, start, stop, step, val):\n          ...\n      @annotate(start=int, stop=int, step=int, val=Sequence[Optional[str]])\n      def setStringSlice(self, start, stop, step, val):\n          ...\n      @annotate(start=int, stop=int, step=int, val=Sequence[Optional[JObject]])\n      def setObjectSlice(self, start, stop, step, val):\n          ...\n\n      @annotate(Tuple)\n      def getBooleanBuffer(self):\n          with self.jvm as (jvm, jenv):\n              is_copy = jni.jboolean()\n              return jenv.GetBooleanArrayElements(self._jobj, is_copy), jni.sizeof(jni.jboolean), b\"B\", is_copy\n      ...\n      @annotate(Tuple)\n      def getDoubleBuffer(self):\n          with self.jvm as (jvm, jenv):\n              is_copy = jni.jboolean()\n              return jenv.GetDoubleArrayElements(self._jobj, is_copy), jni.sizeof(jni.jdouble), b\"d\", is_copy\n\n      @annotate(buf=object)\n      def releaseBooleanBuffer(self, buf):\n          with self.jvm as (jvm, jenv):\n              jenv.ReleaseBooleanArrayElements(self._jobj, jni.cast(buf, jni.POINTER(jni.jboolean)))\n      ...\n      @annotate(buf=object)\n      def releaseDoubleBuffer(self, buf):\n          with self.jvm as (jvm, jenv):\n              jenv.ReleaseDoubleArrayElements(self._jobj, jni.cast(buf, jni.POINTER(jni.jdouble)))\n\nInstallation\n============\n\n::\n\n    $ python -m pip install --upgrade annotate\n\nPrerequisites:\n\n+ Python 2.6 or higher\n\n  * http://www.python.org/\n  * 2.7 and 3.4 are primary test environments.\n\n+ pip or setuptools\n\n  * http://pypi.python.org/pypi/pip\n  * http://pypi.python.org/pypi/setuptools\n\nLicense\n=======\n\n  | Copyright (c) 2012-2018 Adam Karpierz\n  |\n  | Licensed under the zlib/libpng License\n  | http://opensource.org/licenses/zlib\n  | Please refer to the accompanying LICENSE file.\n\nAuthors\n=======\n\n* Adam Karpierz <python@python.pl>\n\nChangelog\n=========\n\n1.0.2 (2018-01-25)\n------------------\n  - Fix a bug and inconsistencies in tox.ini\n\n1.0.1 (2018-01-24)\n------------------\n  - Update required Sphinx version.\n  - Update doc Sphinx configuration files.\n\n1.0.0 (2017-11-18)\n------------------\n  - Setup improvements.\n  - Other minor improvements.\n\n0.7.4 (2017-01-05)\n------------------\n  - Minor setup improvements.\n\n0.7.3 (2016-09-25)\n------------------\n  - Fix bug in setup.py\n\n0.7.1 (2016-09-25)\n------------------\n  - More PEP8 compliant\n\n0.6.7 (2016-09-24)\n------------------\n  - Minor description suplement\n\n0.6.4 (2016-09-23)\n------------------\n  - Simplify package structure.\n\n0.6.3 (2016-06-19)\n------------------\n  - | Fix incompatibility for older versions of setuptools.\n    | Add example.\n\n0.6.0 (2015-08-17)\n------------------\n  - Python3 support.\n\n0.5.1 (2015-02-27)\n------------------\n  - | Remove 'returns' as keyword argument for declare return type.\n    | For now, the type of returned value should be declared by the\n    | first positional argument.\n\n0.3.3 (2014-09-15)\n------------------\n  - Add wheels.\n\n0.3.2 (2014-09-13)\n------------------\n  - Standarize package.\n\n0.3.0 (2014-09-06)\n------------------\n  - Standarize package.\n  - Cosmetic changes.\n\n0.2.6 (2014-06-10)\n------------------\n  - Portable setup.py.\n\n0.2.5 (2014-06-10)\n------------------\n  - Cosmetic changes.\n\n0.2.3 (2012-10-13)\n------------------\n  - Initial release.\n",
    "docs_url": null,
    "download_url": "http://pypi.python.org/pypi/annotate/",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://pypi.python.org/pypi/annotate/",
    "keywords": "annotate",
    "license": "zlib/libpng License ; http://opensource.org/licenses/zlib",
    "maintainer": "",
    "maintainer_email": "",
    "name": "annotate",
    "platform": "any",
    "project_url": "https://pypi.org/project/annotate/",
    "release_url": "https://pypi.org/project/annotate/1.0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Decorator to set a function's __annotations__ like Py3",
    "version": "1.0.2"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bc80bb940c26e8854462d221db6425b6",
          "sha256": "d52e343f048350679749fbe302579e82d36e9ee4a0cd197bdd47ee8ced0f7740"
        },
        "downloads": -1,
        "filename": "annotate-1.0.0.zip",
        "has_sig": false,
        "md5_digest": "bc80bb940c26e8854462d221db6425b6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12170,
        "upload_time": "2017-11-18T14:00:26",
        "url": "https://files.pythonhosted.org/packages/d0/c1/127eb886a24ba162d93f53fa3c4d027eb80d682741e02c257a8dfa9a1787/annotate-1.0.0.zip"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3a974027c3c5c7e0dbca84b83782ba95",
          "sha256": "dd83f70236ef8e8fedb3a1aadf0dc9a06e9c68c29a56e5cec215b4c4293b2c9e"
        },
        "downloads": -1,
        "filename": "annotate-1.0.1.zip",
        "has_sig": false,
        "md5_digest": "3a974027c3c5c7e0dbca84b83782ba95",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12334,
        "upload_time": "2018-01-24T23:27:32",
        "url": "https://files.pythonhosted.org/packages/07/09/9cea0145bca157fac71095a6d6d576e184f9c466375cb6c9819dc1a02312/annotate-1.0.1.zip"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c106fae29e3090c0a2cdbb502db9bf9a",
          "sha256": "936b6007224c5e7fbc16df947d3007181a2742c5aa4d0a06b0b1d1889827aed4"
        },
        "downloads": -1,
        "filename": "annotate-1.0.2.zip",
        "has_sig": false,
        "md5_digest": "c106fae29e3090c0a2cdbb502db9bf9a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12422,
        "upload_time": "2018-01-25T09:13:51",
        "url": "https://files.pythonhosted.org/packages/3c/00/2e3b08091124b04e2e7127ee5749a2d83eaada1aca7fa059cf0f25727560/annotate-1.0.2.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c106fae29e3090c0a2cdbb502db9bf9a",
        "sha256": "936b6007224c5e7fbc16df947d3007181a2742c5aa4d0a06b0b1d1889827aed4"
      },
      "downloads": -1,
      "filename": "annotate-1.0.2.zip",
      "has_sig": false,
      "md5_digest": "c106fae29e3090c0a2cdbb502db9bf9a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 12422,
      "upload_time": "2018-01-25T09:13:51",
      "url": "https://files.pythonhosted.org/packages/3c/00/2e3b08091124b04e2e7127ee5749a2d83eaada1aca7fa059cf0f25727560/annotate-1.0.2.zip"
    }
  ]
}