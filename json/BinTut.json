{
  "info": {
    "author": "Gu Zhengxiong",
    "author_email": "rectigu@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.2"
    ],
    "description": "BinTut\n@@@@@@\n\n\n.. image:: https://img.shields.io/pypi/v/bintut.svg\n   :target: https://pypi.python.org/pypi/BinTut\n\nDynamic or live demonstration of classical exploitation techniques\nof typical memory corruption vulnerabilities,\nfrom debugging to payload generation and exploitation,\nfor educational purposes :yum:.\n\n\nWhat's BinTut\n=============\n\nBinTut is a set of tutorials, **as well as** exercises.\n\nTutorials\n---------\n\nSee `Get Started`_ for usage information.\n\nIf you are a fan of Faiz_, ``Burst Mode`` or ``Single Mode`` should\nsound familiar and inspiring.\n\nBurst Mode\n++++++++++\n\nWatch and replay to obtain general understanding of the process.\n\nUse ``-b / --burst`` to control the interval (in seconds).\nNote that ``-b0`` means ``Single Mode``, which is the default.\n\nSingle Mode\n+++++++++++\n\nPlay and examine various contents\nsuch as the stack, registers or memory addresses,\ncarefully and step by step,\nto acquire comprehensive and detailed knowledge of the process.\n\nUse ``Enter`` or ``Ctrl + D`` to step.\n\nYou can execute normal GDB_ commands via the promt.\nBut note that BinTut won't synchronize the display\nwhen you execute state-changing commands,\ne.g. ``stepi`` or ``nexti``,\nwhich are discouraged for the time being.\n\nAnother bad news is that readline_ does not work :scream:,\nand I can't figure out the reason :scream:.\n\nExercises\n---------\n\nWrite exploits that work outside debuggers\nwhen you understand the principles and techniques\nvia watching and replaying (i.e. rewatching),\ncareful **playing** (i.e., **Single Mode**),\nand most importantly,\n**reading the source code responsible for exploit generation**,\nwhich resides in a file named ``exploits.py``.\n\n\nInstallation\n============\n\nNotice\n------\n\nIf pip_ is used to install BinTut,\nmake sure that you use the pip_ version\ncorresponding to the Python_ version shipped with GDB_.\nFor more details, see `#1`_.\n\n``pip install bintut`` may or may not work for the time being.\n\nTherefore it's recommended to just clone this repository\nand run without installation\nas long as necessary libraries are installed\nby ``pip install -r requirements.txt``.\n\nWarning\n-------\n\nBinTut does not work inside virtualenv at present.\n\nTested Platforms\n----------------\n\n`Arch GNU/Linux`_\n+++++++++++++++++\n\nCurrent version of `Arch Linux`_ ships GDB_ with Python_ 3,\nin which I developed BinTut.\n\nThe latest release version should work fine.\n\n- Enable ``multilib`` in ``/etc/pacman.conf``.\n\n- Install ``gcc-mulitilib`` to support compiling and execution of 32-bit programs.\n\n  ::\n\n     sudo pacman -S gcc-mulitilib\n\n- Install Python_ 3 and ``pip3``.\n\n  ::\n\n     sudo pacman -S python python-pip\n\n- Install BinTut using ``pip3``\n\n  ::\n\n     sudo pip3 install bintut\n\n- You are ready!\n\n  ::\n\n     bintut -b0.1 jmp-esp\n\n`Fedora GNU/Linux`_\n+++++++++++++++++++\n\nThe latest Fedora Workstation comes with GDB_ with Python_ 3,\nwhich has been tested\nand BinTut is known to work properly\nas in `Arch Linux`_.\n\n- Install ``glibc.i686`` to support 32-bit programs if needed.\n\n  ::\n\n     sudo dnf install glibc.i686\n\n- Install ``BinTut`` from PyPI.\n\n  ::\n\n     sudo pip3 install bintut\n\n- Give it a try.\n\n  ::\n\n     bintut -b0.1 frame-faking\n\n`Debian GNU/Linux`_\n+++++++++++++++++++\n\nGDB_ from the stable branch of Debian_ ships with Python_ 2.\n\nLatest source from Git works with minor problems.\n\n- Add support to 32-bit programs if necessary.\n\n  ::\n\n     sudo dpkg --add-architecture i386\n     sudo apt-get update\n     sudo apt-get install libc6:i386\n\n- Clone the latest source code from Git and install requirements.\n\n  ::\n\n     git clone https://github.com/NoviceLive/bintut.git\n     cd bintut\n     sudo apt-get install python-pip gdb\n     pip2 install -r requirements.txt\n\n- Run it without installation.\n\n  ::\n\n     python2 ./bintut.py -b0.1 frame-faking\n\n\n`Kali GNU/Linux`_\n+++++++++++++++++\n\nGDB_ from the latest rolling version of Kali_ ships with Python_ 3.\n\n- Enable ``i386`` support according to aforementioned instructions.\n\n- Install ``pip3``\n\n  ::\n\n     apt-get install python3-pip\n\n- Install the latest BinTut release using ``pip3``\n\n  ::\n\n     pip3 install bintut\n\n- Start hacking!\n\n  ::\n\n     bintut -b0.1 jmp-esp\n\n\nRequirements\n------------\n\nGDB_\n++++\n\nPython_ scripting support is required.\n\nBinTut is developed with Python_ 3,\nbut it's intended to be Python_ 2 compatible.\n\nTherefore, when Python_ 2 yells at you,\nfeel free to create an issue or send me a pull request.\n\nKnown unresolved issues existing on Python_ 2\n*********************************************\n\n- Can't display disassembly after returning to shellcode.\n\n- Can't print the payload for some courses.\n\n\nRopper_\n+++++++\n\nShow information about binary files and find gadgets to\nbuild rop chains for different architectures.\n\npyelftools_\n+++++++++++\n\nPython library for analyzing ELF files\nand DWARF debugging information.\n\nPat_\n++++\n\nCustomizable Lazy Exploit Pattern Utility.\n\nColorama_\n+++++++++\n\nSimple cross-platform colored terminal text in Python.\n\nClick_\n++++++\n\nPython composable command line utility.\n\n\n.. _`Get Started`:\n\nGet Started\n===========\n\nSee ``bintut --help`` and give it a shot\nvia ``bintut --burst 0.1 frame-faking``.\n\n::\n\n   ./bintut.py --help\n   Usage: bintut.py [OPTIONS] [COURSE]\n\n     Teach You A Binary Exploitation For Great Good.\n\n   Options:\n     -V, --version      Show the version and exit.\n     -l, --list         List available courses.\n     -6, --x64          Use x64 courses.\n     -A, --aslr         Enable ASLR.\n     -b, --burst FLOAT  Use this burst mode interval.  [default: 0]\n     -v, --verbose      Be verbose.\n     -q, --quiet        Be quiet.\n     -h, --help         Show this message and exit.\n\n\nAvailable Courses\n=================\n\nOther courses might be added later.\n\n`Stack-based buffer overflow`_\n------------------------------\n\n1. plain\n++++++++\n\nReturn to plain shellcode.\n\nLinux x86 / x64.\n\nNX: Disabled.\n\nASLR: Disabled.\n\nStack Protector: Disabled.\n\n2. `nop-slide`_\n+++++++++++++++\n\nReturn to NOPs plus shellcode.\n\nLinux x86 / x64.\n\nNX: Disabled.\n\nASLR: Disabled.\n\nStack Protector: Disabled.\n\nThis course is not demonstrative enough\nand shall be updated when the author finds a scenario\nwhere `nop-slide`_ really stands out.\n\n3. jmp-esp\n++++++++++\n\nReturn to shellcode via JMP ESP / RSP.\n\nLinux x86 / x64.\n\nNX: Disabled.\n\nASLR: Disabled.\n\nStack Protector: Disabled.\n\n4. off-by-one NULL\n++++++++++++++++++\n\nVariant of ``plain`` `stack-based buffer overflow`_.\n\nLinux x86 / x64.\n\nNX: Disabled.\n\nASLR: Disabled.\n\nStack Protector: Disabled.\n\n5. ret2lib_\n+++++++++++\n\nReturn to functions.\n\nLinux x86.\n\nNX: **Enabled**.\n\nASLR: Disabled.\n\nStack Protector: Disabled.\n\n.. _`Notes for x64`:\n\nNotes for x64\n*************\n\nEither on Linux or Windows, the `ABI of x64`_, unlike that of x86,\npasses some arguments, first six or four integral arguments\non Linux or Windows respectively,\nvia registers, which may not be controlled\nwithout resort to certain gadgets.\n\nTherefore, it may be discussed in the section for ROP_.\n\n6. frame-faking\n+++++++++++++++\n\nReturn to chained functions via LEAVE RET gadget.\n\nLinux x86.\n\nNX: **Enabled**.\n\nASLR: Disabled.\n\nStack Protector: Disabled.\n\nNotes for x64\n*************\n\nSee `Notes for x64`_.\n\n\nBug Reports\n===========\n\nCreate `issues <https://github.com/NoviceLive/bintut/issues>`_.\n\nBinTut might or might not work on your system,\nbut bug reports with necessary information are always welcome.\n\nTips\n----\n\nRemember to include ``bintut --version`` in your report.\n\nYou can just submit the verbose log (``stderr``) if out of words,\ne.g., ``bintut -v -b0.1 frame-faking 2>log.txt``.\n\n\nTODO List & You Can Contribute\n==============================\n\n- Improve the code if you find something that can be done better.\n\n  The codebase of BinTut can always be improved by those\n  who have a deeper understanding of Python than the author.\n\n  Also, there are hardcoded behaviors which can be generalized.\n\n- Change color scheme to red highlight when content changes.\n\n  Currently, our color scheme remains unchanged,\n  in predefined colors,\n  which is just not eye-catching or obvious\n  when we want to observe some significant changes\n  in certain registers or specific memory locations.\n\n  Here is an example of such change,\n  the least-significant-**byte** of saved EBP / RBP\n  being cleared due to an off-by-one NULL write.\n\n  Ref. That's what you will expect in OllyDbg\n  and probably many other debuggers will also behave in this manner.\n\n  Ref. Some GDB_ enhancement projects have already implemented this.\n\n- Synchronize the display when executing state-changing commands.\n\n- Add course variants that does not allow NULL bytes.\n\n  For example, add variant courses\n  using ``strcpy`` instead of ``fread`` to trigger overflow,\n  in order to demonstrate the techniques\n  to survive in severe environments,\n  which happen to be the case of our real world.\n\n- Use a better combination of chained functions for ``frame-faking``.\n\n  What follows is the current choice.\n\n  Yes, two consecutive ``/bin/sh`` and ``exit``.\n\n  ::\n\n     elif post == 'frame-faking':\n         payload = (\n             Faked(offset=offset, address=addr) +\n             Faked(b'system', ['/bin/sh']) +\n             Faked(b'execl', ['/bin/sh', '/bin/sh', 0]) +\n             Faked(b'exit', [0]))\n\n- Support demonstration on Windows and MacOS.\n\n\nReferences\n==========\n\n- `Smashing The Stack For Fun And Profit <http://phrack.org/issues/49/14.html#article>`_\n- `The Frame Pointer Overwrite <http://phrack.org/issues/55/8.html#article>`_\n- `Advanced return-into-lib(c) exploits (PaX case study) <http://phrack.org/issues/58/4.html#article>`_\n\n\n.. _Arch GNU/Linux: https://www.archlinux.org/\n.. _Fedora GNU/Linux: https://getfedora.org/\n.. _Debian GNU/Linux: https://www.debian.org/\n.. _Kali GNU/Linux: https://www.kali.org/\n\n.. _pip: https://pip.pypa.io/\n.. _Python: https://www.python.org/\n.. _Capstone: http://www.capstone-engine.org/\n.. _filebytes: https://github.com/sashs/filebytes\n.. _#1: https://github.com/NoviceLive/bintut/issues/1\n\n.. _GDB: http://www.gnu.org/software/gdb/\n.. _Ropper: https://github.com/sashs/Ropper\n.. _pyelftools: https://github.com/eliben/pyelftools\n.. _Pat: https://github.com/NoviceLive/pat\n.. _Colorama: https://github.com/tartley/colorama\n.. _Click: https://github.com/mitsuhiko/click\n\n.. _Stack-based buffer overflow: https://en.wikipedia.org/wiki/Stack_buffer_overflow\n.. _nop-slide: https://en.wikipedia.org/wiki/NOP_slide\n.. _ret2lib: https://en.wikipedia.org/wiki/Return-to-libc_attack\n.. _ROP: https://en.wikipedia.org/wiki/Return-oriented_programming\n.. _ABI of x64: https://en.wikipedia.org/wiki/X86_calling_conventions#x86-64_calling_conventions\n.. _readline: https://docs.python.org/3/library/readline.html\n.. _Faiz: https://en.wikipedia.org/wiki/Kamen_Rider_555\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/NoviceLive/bintut",
    "keywords": "Classical Binary Exploitation",
    "license": "GPL-3",
    "maintainer": null,
    "maintainer_email": null,
    "name": "BinTut",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/BinTut/",
    "release_url": "https://pypi.org/project/BinTut/0.3.2/",
    "requires_python": null,
    "summary": "Teach You A Binary Exploitation For Great Good.",
    "version": "0.3.2"
  },
  "releases": {
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "434c64164c4317e6dc418134ba4edee5",
          "sha256": "aebee4e9efd7dde5e9b6bdb63c84ced8582039ad1c0d8b03306ac7b08026aaa9"
        },
        "downloads": 216,
        "filename": "BinTut-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "434c64164c4317e6dc418134ba4edee5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26537,
        "upload_time": "2016-03-22T10:24:41",
        "url": "https://files.pythonhosted.org/packages/9d/b0/e7cc90e684ab59ad1720e49ff15dda0280c1b0ee1d5e326b2fe53acaa73a/BinTut-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ac42e3134a47998639d0b909206308c8",
          "sha256": "31c14e99612e7b420de6e5f35f25859ae2b832066eaea77cb181d6d9f6b62a73"
        },
        "downloads": 207,
        "filename": "BinTut-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ac42e3134a47998639d0b909206308c8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24758,
        "upload_time": "2016-03-22T11:15:37",
        "url": "https://files.pythonhosted.org/packages/54/40/f25959d3fe877e08ccc6e5f534caab423a15770d4892a7e131d061745095/BinTut-0.2.1.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "900c0bb8d418c385aad3f6ac34e3b512",
          "sha256": "c9fcd1d8a53dafc6349402c2a89a06c9b72ebe24ffbf351678b044c7b2881e32"
        },
        "downloads": 204,
        "filename": "BinTut-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "900c0bb8d418c385aad3f6ac34e3b512",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 179746,
        "upload_time": "2016-04-18T09:20:06",
        "url": "https://files.pythonhosted.org/packages/66/5d/a50dd7bec8035a11370447701be89359dc244ae268ae706cbfb4d1913047/BinTut-0.3.0.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4f3e4a51948636a1dd1e7573ed8f0e34",
          "sha256": "f2e5143ca62f1712415ff9c05133daa4534f7540d6fb799bff6144d3551f85c9"
        },
        "downloads": 204,
        "filename": "BinTut-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4f3e4a51948636a1dd1e7573ed8f0e34",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 179762,
        "upload_time": "2016-04-18T09:40:11",
        "url": "https://files.pythonhosted.org/packages/cf/96/0f6ac0b9cf86997dec402e02fa5d89552b8647d732b9894fc00082fb71fc/BinTut-0.3.1.tar.gz"
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "53253cfd113c0fc4c56e377a1ef2bdd0",
          "sha256": "46a25b9a1fbbd367e5cf3a8b68967fde5675f01e1c3f799f3b83ee7344c3fcff"
        },
        "downloads": 578,
        "filename": "BinTut-0.3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "53253cfd113c0fc4c56e377a1ef2bdd0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 187021,
        "upload_time": "2016-07-06T12:38:03",
        "url": "https://files.pythonhosted.org/packages/ab/36/6e0cec645f49f951d25be977899eca57811718ab94e889ba193ba65148a5/BinTut-0.3.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "53253cfd113c0fc4c56e377a1ef2bdd0",
        "sha256": "46a25b9a1fbbd367e5cf3a8b68967fde5675f01e1c3f799f3b83ee7344c3fcff"
      },
      "downloads": 578,
      "filename": "BinTut-0.3.2.tar.gz",
      "has_sig": false,
      "md5_digest": "53253cfd113c0fc4c56e377a1ef2bdd0",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 187021,
      "upload_time": "2016-07-06T12:38:03",
      "url": "https://files.pythonhosted.org/packages/ab/36/6e0cec645f49f951d25be977899eca57811718ab94e889ba193ba65148a5/BinTut-0.3.2.tar.gz"
    }
  ]
}