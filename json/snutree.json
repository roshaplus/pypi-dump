{
  "info": {
    "author": "Lucas Flowers",
    "author_email": "laf62@case.edu",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Other Audience",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.5",
      "Topic :: Other/Nonlisted Topic",
      "Topic :: Utilities"
    ],
    "description": "Introduction\n============\n\nSome Greek-letter organizations assign big brothers or big sisters (\"bigs\") to\nnew members (\"littles\"). This program visualizes such relationships as a family\ntree, using Graphviz.\n\nUsage\n=====\n\nCommand Line\n------------\n\nBasic Usage\n~~~~~~~~~~~\n\nThe simplest usage of ``snutree`` is:\n\n.. code:: bash\n\n    snutree -o output.pdf input1.csv input2.csv ...\n\nIn this example, the CSV should have columns called ``name``, ``big_name``, and\n``semester`` where ``semester``\\s are strings starting with \"Fall\" or \"Spring\"\nand ending with a year (e.g., \"Fall 2014\" or \"Spring 1956\"). With this input,\n``snutree`` will append all the input tables together, convert them into a\ntree, and output the tree using Graphviz. Each member will be put on a row\nrepresenting the semester they joined.\n\nChanging Schemas\n~~~~~~~~~~~~~~~~\n\nThe (``name``, ``big_name``, ``semester``) headers consist of the\n\"basic\" schema. There are a few other schemas available. They are:\n\n+---------+------------------------------------------------------------------+\n| Schema  | Headers                                                          |\n+=========+==================================================================+\n| basic   | name, big\\_name, semester                                        |\n+---------+------------------------------------------------------------------+\n| keyed   | id, name, big\\_id, semester                                      |\n+---------+------------------------------------------------------------------+\n| chapter | child, parent, founded                                           |\n+---------+------------------------------------------------------------------+\n| sigmanu | badge, first\\_name, preferred\\_name, last\\_name, big\\_badge,     |\n|         | status, semester, affiliations                                   |\n+---------+------------------------------------------------------------------+\n\nChanging schemas can be done with the ``--schema`` option. For example, this\nwill print the DOT source code of a family tree of chapters to the terminal:\n\n.. code:: bash\n\n    snutree --schema chapter chapters.csv\n\nA custom Python module may be used as a schema:\n\n.. code:: bash\n\n    snutree --schema /home/example/custom.py input.csv\n\nCustom schema modules should validate the tables themselves and turn them into\nan internal format ``snutree`` can read.\n\nSQL Queries\n~~~~~~~~~~~\n\nInput files can also be SQL queries. This will run the query in ``query.sql``\non the database described in ``config.yaml`` and save the resulting tree to\n``output.pdf``:\n\n.. code:: bash\n\n    snutree --config config.yaml -o output.pdf query.sql\n\nFor a SQL query, a YAML configuration file with appropriate authentication\noptions must be provided. Here is an example of the contents of such a file:\n\n.. code:: yaml\n\n    readers:\n      sql:\n        host: '127.0.0.1'\n        port: 3306\n        user: 'root'\n        passwd: 'secret'\n        db: 'database_name'\n        # Credentials for tunneling queries through SSH (recommended)\n        ssh:\n          host: 'example.com'\n          port: 22\n          user: 'example'\n          private_key: '/home/example/.ssh/id_rsa'\n\nNote that the query must rename the column headers to match the schema used.\n\nCommand Line Summary\n~~~~~~~~~~~~~~~~~~~~\n\n.. code::\n\n    Usage: snutree.py [OPTIONS] [INPUT_FILES]...\n\n    Options:\n      --version                       Show the version and exit.\n      -S, --seed INTEGER              Seed for the random number generator. Used\n                                      to move tree nodes around in a repeatable\n                                      way.\n      -t, --to EXT                    File format for output. Must be supported by\n                                      the writer. Defaults to the output's file\n                                      extension if it is known or 'dot' if it is\n                                      unknown.\n      -w, --writer [dot|stats|table|MODULE]\n                                      Writing module. May be the path to a custom\n                                      Python module. If no module is given, one is\n                                      guessed based on the output filetype.\n      -m, --schema [basic|chapter|keyed|sigmanu|MODULE]\n                                      Member table schema. May be the path to a\n                                      custom Python module. Defaults to 'basic'.\n      -f, --from [csv|dot|sql]        File format for input coming through stdin.\n                                      Assumed to be 'csv' if not given.\n      -c, --config PATH               Program configuration files\n      -o, --output PATH               Instead of writing DOT code to stdout, send\n                                      output to the file given.\n      -l, --log PATH                  Log file path.\n      -q, --quiet                     Only print errors to stderr; no warnings.\n      -d, --debug                     Print debug information to stderr.\n      -v, --verbose                   Print information to stderr.\n      --help                          Show this message and exit.\n\n\nGUI\n---\n\nThe ``snutree`` package also includes a simple GUI called ``snutree-qt``. The\nGUI can take multiple input files of any supported format, pick schemas, output\nto PDF, and choose a seed for the random number generator.\n\nInstallation\n============\n\nFirst, install the following applications for your operating system and ensure\nthey are in your PATH:\n\n  - Python >=3.5\n\n  - `Graphviz <http://graphviz.org>`_ (be sure that ``dot`` is in your PATH)\n\nThen install ``snutree`` and its Python dependencies with Python's ``pip``:\n\n.. code:: bash\n\n    pip install snutree\n\nOptional Dependencies\n---------------------\n\nUse ``pip`` to install these packages for optional features:\n\n    - ``pyqt5``: Use the GUI\n\n    - ``mysqlclient``: Allow reading from MySQL databases\n\n        - ``sshtunnel``: Allow tunneling SQL queries through ssh\n\n    - ``pydotplus``: Allow reading data from DOT files (experimental)\n\nConfiguration\n=============\n\nAll configuration is done in YAML (or JSON) files. In the terminal, these files\ncan be included with ``--config`` flags. Configuration files listed later\noverride those that came earlier and command line options override all\nconfiguration files.\n\nBelow are all of the available options along with descriptions in the comments\nand default values where applicable.\n\nGeneral\n-------\n\n.. code:: yaml\n\n    readers: # reader module configuration\n      stdin: # standard input reader configuration\n        filetype: csv # type of files coming from stdin\n      <reader1>:\n      <reader2>: ...\n    schema: # members schema module configuration\n      name: basic # member schema module name\n    seed: 71 # random number generator seed\n    writer: # writer module configuration\n      file: None # output file name\n      filetype: # output filetype\n      name: None # writer module name\n\nReaders\n-------\n\nSQL Reader\n~~~~~~~~~~\n\nIf SSH is used, the SQL hostname should be ``127.0.0.1``.\n\n.. code:: yaml\n\n    db: # SQL database name\n    host: 127.0.0.1 # SQL server hostname\n    passwd: # SQL user password\n    port: 3306 # SQL server port\n    ssh: # credentials to encrypt SQL connection with SSH\n      host: # SSH server hostname\n      port: 22 # SSH server port\n      private_key: # SSH private keyfile path\n      user: # SSH username\n    user: root # SQL username\n\nSchemas\n-------\n\nSigma Nu Schema\n~~~~~~~~~~~~~~~\n\n.. code:: yaml\n\n    chapter: # the chapter whose family tree will be generated\n    name: sigmanu\n\nWriters\n-------\n\nDOT Writer\n~~~~~~~~~~\n\nSee `Graphviz's documentation <http://graphviz.org/content/attrs>`_ for\navailable DOT attributes.\n\n.. code:: yaml\n\n    colors: True # add color to member nodes\n    custom_edges: True # enable custom edges\n    custom_nodes: True # enable custom nodes\n    defaults: # default Graphviz attributes\n      edge: # defaults for Graphviz edges\n        all: # all edges\n          <name1>: <value1>\n          <name2>: ...\n        rank: # edges between rank nodes\n          <name1>: <value1>\n          <name2>: ...\n        unknown: # edges coming from unknown parents\n          <name1>: <value1>\n          <name2>: ...\n      graph: # defaults for Graphviz graphs\n        all:\n          <name1>: <value1>\n          <name2>: ...\n      node: # defaults for Graphviz nodes\n        all: # all nodes\n          <name1>: <value1>\n          <name2>: ...\n        member: # member nodes\n          <name1>: <value1>\n          <name2>: ...\n        rank: # rank nodes\n          <name1>: <value1>\n          <name2>: ...\n        unknown: # nodes of unknown parents\n          <name1>: <value1>\n          <name2>: ...\n    edges: # a list of custom Graphviz edges\n      - # edge1\n        attributes: # Graphviz edge attributes\n          <name1>: <value1>\n          <name2>: ...\n        nodes: # keys of nodes connected by this edge\n          - # key1\n          - ...\n      - ...\n    family_colors: # map of member keys to Graphviz colors\n      <key1>: <color1>\n      <key2>: ...\n    file: # output file name\n    filetype: # output filetype\n    name: dot # writer name\n    no_singletons: True # delete member nodes with neither parent nor child nodes\n    nodes: # custom Graphviz nodes\n      <key1>:\n        attributes: # Graphviz node attributes\n          <name1>: <value1>\n          <name2>: ...\n        rank: # the rank (i.e., year, semester, etc.) the node is in\n      <key2>: ...\n    ranks: True # enable ranks\n    unknowns: True # add parent nodes to members without any\n    warn_rank: None # if no_singletons=True, singletons with rank>=warn_rank trigger warnings when dropped\n\nVersioning\n==========\n\nThis project loosely uses `Semantic Versioning <http://semver.org/>`_.\n\nLicense\n=======\n\nThis project is licensed under\n`GPLv3 <https://www.gnu.org/licenses/gpl-3.0.html>`_.\n\n.. vim: filetype=rst\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/lucas-flowers/snutree",
    "keywords": "big little brother sister family tree",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "snutree",
    "platform": "",
    "project_url": "https://pypi.org/project/snutree/",
    "release_url": "https://pypi.org/project/snutree/0.1.3/",
    "requires_dist": [
      "pytest; extra == 'test'",
      "sshtunnel; extra == 'read_sql_ssh'",
      "mysqlclient; extra == 'read_sql_ssh'",
      "mysqlclient; extra == 'read_sql'",
      "pydotplus; extra == 'read_dot'",
      "PyQt5; extra == 'qt'",
      "voluptuous",
      "pluginbase",
      "networkx",
      "click",
      "PyYAML",
      "Cerberus"
    ],
    "requires_python": ">=3.5",
    "summary": "Visualize big\u2013little brother/sister relationships in Greek-letter organizations",
    "version": "0.1.3"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d18d4842903aed642b20645c87f88726",
          "sha256": "508138e20cdb1a6f578b6fce80983930dd61bc8a9b4afcf264c87dcc94ad3511"
        },
        "downloads": 0,
        "filename": "snutree-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d18d4842903aed642b20645c87f88726",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 48902,
        "upload_time": "2017-08-24T23:48:52",
        "url": "https://files.pythonhosted.org/packages/6e/92/02fc9af777429b961891d54e3a0c2dc982634a04d69309189ddecafb7520/snutree-0.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e79169886a3f56e63e031219f2c33bb2",
          "sha256": "199b935eebb80f0206ca66c53ef22dfa35ea71450799686ecd0bee4bd059e4cf"
        },
        "downloads": 0,
        "filename": "snutree-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e79169886a3f56e63e031219f2c33bb2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 117161,
        "upload_time": "2017-08-24T23:48:53",
        "url": "https://files.pythonhosted.org/packages/46/50/0509c67564a706284a78fe0fd323bb1d34af4cb511fe92f1d455ec4de94b/snutree-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0b54e96b92543e0894f3fec1ccf0b643",
          "sha256": "789d90cf39e95f22c3d0ca90bbfbcf4a5109486bd1c516fca6febdda396721c8"
        },
        "downloads": 0,
        "filename": "snutree-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "0b54e96b92543e0894f3fec1ccf0b643",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 48902,
        "upload_time": "2017-08-25T00:07:26",
        "url": "https://files.pythonhosted.org/packages/77/a6/ed94ac332b5ca81b4019ee90abb46868624fff05f28010a3e3fa9584c616/snutree-0.1.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6ec6a25b6e662bbab5247c7fbbd48ffc",
          "sha256": "5fd06f566acf2dc8816cea1394a1cea31d652e0139d1d4bf1b73d474bc29760a"
        },
        "downloads": 0,
        "filename": "snutree-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6ec6a25b6e662bbab5247c7fbbd48ffc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 117162,
        "upload_time": "2017-08-25T00:07:27",
        "url": "https://files.pythonhosted.org/packages/04/bf/b32123f95f66beeb1027cf3d72b2c4380aeb43e7209531243cc184756820/snutree-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "47d52b8e6d9549e4e39735f07f4cf6b2",
          "sha256": "c57a5cec2751838f43834ca33959bacc8b10a17c7b4b0015966990a329b81634"
        },
        "downloads": 0,
        "filename": "snutree-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "47d52b8e6d9549e4e39735f07f4cf6b2",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 49577,
        "upload_time": "2017-08-25T02:18:14",
        "url": "https://files.pythonhosted.org/packages/b0/09/b9974f3b08fc86d96f35acb630ea7842dc13ff8163bbdb2d577452513b15/snutree-0.1.2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "41de9fcefaa32e626bb17ba5f1432afb",
          "sha256": "5eef350d8ca9f0dd1f540bedc548113564a4aae2c68cfb1780097bb3f886b3a2"
        },
        "downloads": 0,
        "filename": "snutree-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "41de9fcefaa32e626bb17ba5f1432afb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 117555,
        "upload_time": "2017-08-25T02:18:16",
        "url": "https://files.pythonhosted.org/packages/03/a5/26bd58ede95ff2ef2bb9c0f02c0310210d708569ffd593c452d3d509e251/snutree-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8d189af155fc59f2b7989334f0cd763c",
          "sha256": "395e9a4c6c99989fdf9760b980a0c2ce500060fd6d128792dc2f8ba8094796b4"
        },
        "downloads": 0,
        "filename": "snutree-0.1.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8d189af155fc59f2b7989334f0cd763c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 49586,
        "upload_time": "2017-08-25T02:48:54",
        "url": "https://files.pythonhosted.org/packages/45/2b/b216c50b79a8ec0b097273ac47ceda459c2b2ea3f5bad233ff221946367f/snutree-0.1.3-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "643baacca2c214ad46e57d82d307fa6f",
          "sha256": "bc59f108719b21202bb1ba2f21e7e3676403cee7b5df498b4b1f7f3c30f3751a"
        },
        "downloads": 0,
        "filename": "snutree-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "643baacca2c214ad46e57d82d307fa6f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 117583,
        "upload_time": "2017-08-25T02:48:55",
        "url": "https://files.pythonhosted.org/packages/3d/21/ee8c7aa0efc76446e2c70c6840ba4e34713918d8edb893cf81a3bd52971f/snutree-0.1.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8d189af155fc59f2b7989334f0cd763c",
        "sha256": "395e9a4c6c99989fdf9760b980a0c2ce500060fd6d128792dc2f8ba8094796b4"
      },
      "downloads": 0,
      "filename": "snutree-0.1.3-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8d189af155fc59f2b7989334f0cd763c",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 49586,
      "upload_time": "2017-08-25T02:48:54",
      "url": "https://files.pythonhosted.org/packages/45/2b/b216c50b79a8ec0b097273ac47ceda459c2b2ea3f5bad233ff221946367f/snutree-0.1.3-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "643baacca2c214ad46e57d82d307fa6f",
        "sha256": "bc59f108719b21202bb1ba2f21e7e3676403cee7b5df498b4b1f7f3c30f3751a"
      },
      "downloads": 0,
      "filename": "snutree-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "643baacca2c214ad46e57d82d307fa6f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 117583,
      "upload_time": "2017-08-25T02:48:55",
      "url": "https://files.pythonhosted.org/packages/3d/21/ee8c7aa0efc76446e2c70c6840ba4e34713918d8edb893cf81a3bd52971f/snutree-0.1.3.tar.gz"
    }
  ]
}