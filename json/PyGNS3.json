{
  "info": {
    "author": "mvdwrd",
    "author_email": "maarten@vanderwoord.nl",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "PyGNS3\n======\n\nis a POC / idea for a python package to interact with\n`GNS3 <http://gns3.com>`__.\n\nIt leverages the GNS3 built in API and aims to provide some additional\nfunctionality such as custom/bulk interaction with projects and nodes. I\nhave started using GNS3 recently so walking multiple learning curves\nhere. Any ideas / suggestions / constructive criticism is more than\nwelcome.\n\nFor now it is Python 3.6 (I think) only. It is what I use, and it is way\ntoo early to start thinking about compatibility with older versions.\n\nI am using the `API\ndocumentation <https://gns3-server.readthedocs.io/en/latest/endpoints.html#controller-api-endpoints>`__\nas a starting point, and implement the Controller endpoints only (for\nnow). The implemented functionality is shown in an `example Jupyter\nNotebook <https://github.com/mvdwoord/PyGNS3/blob/master/Example.ipynb>`__.\n\nGNS3Controller\n--------------\n\nis the main component interacting with GNS3. It attempts to find a valid\ngns3\\_server.conf file to grab IP / port / credentials for the WebAPI.\nAfter a successful connection the controller object holds some basic\nproperties and allow further inspection and interaction with GNS3.\n\nWhat is the purpose?\n--------------------\n\nAs I am learning and working with GNS3 I'm not sure what exactly this\nshould lead to, but the first thing that comes to mind is parallel\ncommands towards nodes, or other (bulk) manipulations. Not sure what\nother scenario's will look like but I guess being able to interact with\nGNS3 from python could come in handy here or there.\n\nIssues\n------\n\nI am unsure about how to best implement certain things. a good example\nof which is when to initialize the API class. Upon import allows for\nimmediate instantiation of classes that are not a subclass of\nGNS3Controller. I could also implement an explicit method to do this or\nperhaps there are better / more pythonic ways to juggle this global\nconfiguration thing. I just don't want to endlessly pass the\nconfiguration parameters around.\n\nNot sure how the available images relates to the compute object... shows\nlocal files? don;t have remote box to test again atm.\n\nNext steps\n----------\n\nImplement some sub components and methods on them. Then add some custom\nfunctions which operate on multiple nodes or provide command line\nvisualization. Oh and implement telnet interaction of course. Perhaps\nsome configuration diffing or synchronization? who knows.\n\nPlus also perhaps... improvements, error handling, docstrings etc etc\netc... and bundling into a package for distribution, and other yak\nshaving.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/mvdwoord/PyGNS3",
    "keywords": "",
    "license": "Unlicense",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyGNS3",
    "platform": "",
    "project_url": "https://pypi.org/project/PyGNS3/",
    "release_url": "https://pypi.org/project/PyGNS3/0.1.1.dev0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "",
    "version": "0.1.1.dev0"
  },
  "releases": {
    "0.1.0.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9cca61d85c8437960f3d604ab945db83",
          "sha256": "28a141f0d0e5d973369b1c987ebce2e1aebf5190560e1ef3f8cf1ebf0f3dfef0"
        },
        "downloads": 0,
        "filename": "PyGNS3-0.1.0.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "9cca61d85c8437960f3d604ab945db83",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4705,
        "upload_time": "2017-08-10T16:04:00",
        "url": "https://files.pythonhosted.org/packages/f3/d0/66e0acff3dd123d56ac85df2f5c0e6a805f9494447392036435065ed6e3a/PyGNS3-0.1.0.dev0.tar.gz"
      }
    ],
    "0.1.1.dev0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0d421bbe17ecac7c162de883ec00193d",
          "sha256": "8a3e38200add2da39e7b7053064e0da262e0db0dfdcf7a3bc390f681bde7edf8"
        },
        "downloads": 0,
        "filename": "PyGNS3-0.1.1.dev0.tar.gz",
        "has_sig": false,
        "md5_digest": "0d421bbe17ecac7c162de883ec00193d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5044,
        "upload_time": "2017-08-10T16:36:11",
        "url": "https://files.pythonhosted.org/packages/85/f1/3398de6a341bf33a28e14cd55156f6c5ba88864f70326b42ebcb6cab2497/PyGNS3-0.1.1.dev0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0d421bbe17ecac7c162de883ec00193d",
        "sha256": "8a3e38200add2da39e7b7053064e0da262e0db0dfdcf7a3bc390f681bde7edf8"
      },
      "downloads": 0,
      "filename": "PyGNS3-0.1.1.dev0.tar.gz",
      "has_sig": false,
      "md5_digest": "0d421bbe17ecac7c162de883ec00193d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5044,
      "upload_time": "2017-08-10T16:36:11",
      "url": "https://files.pythonhosted.org/packages/85/f1/3398de6a341bf33a28e14cd55156f6c5ba88864f70326b42ebcb6cab2497/PyGNS3-0.1.1.dev0.tar.gz"
    }
  ]
}