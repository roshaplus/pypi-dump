{
  "info": {
    "author": "Roger Ineichen and the Zope Community",
    "author_email": "zope-dev@zope.org",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Zope3",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Zope Public License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Internet :: WWW/HTTP"
    ],
    "description": "This package provides a form wizard concept based on z3c.form for Zope3.\n\n.. contents::\n\n======\nWizard\n======\n\nThe goal of this package is to offer a form wizard. This implementation doesn't\nuse a session. It just offers the wizard logic, the data which the wizard will\nchange or add is not a part of this implementation. If you like to implement\nsome additional wizard logic you probably need to use a session and collect the\nvalues in the different wizard steps and create and add an object in the\nwizard's ``doComplete`` or ``doFinish`` or the step's ``doComplete`` method.\n\nAll steps are available by their own url. This allows us to cache each step if\nneeded. Each step url is only available if we are allowed to access a step. If\na step is accessible depends on the conditions of each step.\n\nSince steps are adapters, we can register steps for already existing wizards or\nwe can also override existing steps by registering a UnavailableStep step which\nalways will return ``False`` for the ``available`` argument.\n\nIf the wizard is completed we get redirected to the confirmation page. If we\naccess a completed wizard again, we will get redirected to the confirmation\npage again.\n\nNow let's show how this works and setup our tests.\n\n\nForm support\n------------\n\nWe need to load the formui configuration, which will make sure that\nall macros get registered correctly:\n\n  >>> from zope.configuration import xmlconfig\n  >>> import z3c.form\n  >>> import z3c.formui\n  >>> import z3c.macro\n  >>> import z3c.template\n  >>> import zope.browserresource\n  >>> import zope.component\n  >>> import zope.i18n\n  >>> import zope.security\n  >>> import zope.viewlet\n  >>> xmlconfig.XMLConfig('meta.zcml', z3c.form)()\n  >>> xmlconfig.XMLConfig('meta.zcml', z3c.macro)()\n  >>> xmlconfig.XMLConfig('meta.zcml', z3c.template)()\n  >>> xmlconfig.XMLConfig('meta.zcml', zope.browserresource)()\n  >>> xmlconfig.XMLConfig('meta.zcml', zope.component)()\n  >>> xmlconfig.XMLConfig('meta.zcml', zope.i18n)()\n  >>> xmlconfig.XMLConfig('meta.zcml', zope.security)()\n  >>> xmlconfig.XMLConfig('meta.zcml', zope.viewlet)()\n  >>> xmlconfig.XMLConfig('configure.zcml', z3c.form)()\n  >>> xmlconfig.XMLConfig('configure.zcml', z3c.formui)()\n\nAnd load the z3c.wizard macro configuration:\n\n  >>> import z3c.wizard\n  >>> xmlconfig.XMLConfig('configure.zcml', z3c.wizard)()\n\n\nSample data setup\n-----------------\n\nLet's define a sample content class:\n\n  >>> import zope.interface\n  >>> import zope.schema\n  >>> from zope.location.interfaces import ILocation\n  >>> from zope.schema.fieldproperty import FieldProperty\n  >>> class IPerson(ILocation):\n  ...     \"\"\"Person interface.\"\"\"\n  ...\n  ...     firstName = zope.schema.TextLine(title=u'First Name')\n  ...     lastName = zope.schema.TextLine(title=u'Last Name')\n  ...     street = zope.schema.TextLine(title=u'Street')\n  ...     city = zope.schema.TextLine(title=u'City')\n\n  >>> @zope.interface.implementer(IPerson)\n  ... class Person(object):\n  ...     \"\"\"Person content.\"\"\"\n  ...\n  ...\n  ...     __name__ = __parent__ = None\n  ...\n  ...     firstName = FieldProperty(IPerson['firstName'])\n  ...     lastName = FieldProperty(IPerson['lastName'])\n  ...     street = FieldProperty(IPerson['street'])\n  ...     city = FieldProperty(IPerson['city'])\n\nSetup a person for our wizard:\n\n  >>> person = Person()\n  >>> root['person'] = person\n  >>> person.__parent__ = root\n  >>> person.__name__ = u'person'\n\n\nStep\n----\n\nLet's define some steps. First use a step which knows how to store the name\nof a person:\n\n  >>> from z3c.form import form\n  >>> from z3c.form import field\n  >>> from z3c.wizard import step\n\n  >>> class PersonStep(step.EditStep):\n  ...     label = u'Person'\n  ...     fields = field.Fields(IPerson).select('firstName', 'lastName')\n\nAnd another step for collect some address data:\n\n  >>> class AddressStep(step.EditStep):\n  ...     label = u'Address'\n  ...     fields = field.Fields(IPerson).select('street', 'city')\n\n\nWizard\n------\n\nNow we can define our ``Wizard`` including our steps. Steps are named\nadapters. Let's use the global method ``addStep`` for doing the step setup:\n\n  >>> from z3c.wizard import wizard\n  >>> class IPersonWizard(z3c.wizard.interfaces.IWizard):\n  ...     \"\"\"Person wizard marker.\"\"\"\n\n  >>> @zope.interface.implementer(IPersonWizard)\n  ... class PersonWizard(wizard.Wizard):\n  ...\n  ...     label = u'Person Wizard'\n  ...\n  ...     def setUpSteps(self):\n  ...         return [\n  ...             step.addStep(self, 'person', weight=1),\n  ...             step.addStep(self, 'address', weight=2),\n  ...             ]\n\nAs next, we need to register our steps as named ``IStep`` adapters. This can be\ndone by the ``z3c:wizardStep`` directive. Let's define our adapters with the\nprovideAdapter method for now:\n\n  >>> import zope.interface\n  >>> from zope.publisher.interfaces.browser import IDefaultBrowserLayer\n  >>> from zope.publisher.interfaces.browser import IBrowserRequest\n  >>> import z3c.wizard.interfaces\n  >>> zope.component.provideAdapter(\n  ...     PersonStep, (None, IBrowserRequest, None),\n  ...     z3c.wizard.interfaces.IStep, name='person')\n\n  >>> zope.component.provideAdapter(\n  ...     AddressStep, (None, IBrowserRequest, None),\n  ...     z3c.wizard.interfaces.IStep, name='address')\n\nWe need to support the div form layer for our request. This is needed for the\nform part we use in our steps. Because our steps are forms:\n\n  >>> from z3c.formui.interfaces import IDivFormLayer\n  >>> from zope.interface import alsoProvides\n  >>> import zope.publisher.browser\n  >>> import z3c.form.interfaces\n  >>> @zope.interface.implementer(z3c.form.interfaces.IFormLayer)\n  ... class TestRequest(zope.publisher.browser.TestRequest):\n  ...     pass\n  >>> request = TestRequest()\n  >>> alsoProvides(request, IDivFormLayer)\n\nNow we can use our wizard. Our wizard will allways force to traverse to the\ncurrent active step. This means the wizard provides a browserDefault which\nreturns the default step instead of rendering the wizard as view. This allows us\nto use the step as an adapter discriminator for viewlets and other adapters\nlike the menu implementation uses. The wizard acts like a dispatcher to the\nright step and not as a view itself.\n\n  >>> personWizard = PersonWizard(person, request)\n  >>> personWizard.__parent__ = person\n  >>> personWizard.__name__ = u'wizard'\n\nNow get the default view (step) arguments from the wizard:\n\n  >>> obj, names = personWizard.browserDefault(request)\n  >>> obj\n  <PersonWizard 'wizard'>\n\n  >>> names\n  ('person',)\n\nNow traverse to the step, update and render it:\n\n  >>> personStep = obj.publishTraverse(request, names[0])\n  >>> personStep.update()\n  >>> print(personStep.render())\n  <div class=\"wizard\">\n      <div class=\"header\">Person Wizard</div>\n      <div class=\"wizardMenu\">\n        <span class=\"selected\">\n            <span>Person</span>\n        </span>\n        <span>\n            <a href=\"http://127.0.0.1/person/wizard/address\">Address</a>\n        </span>\n      </div>\n    <form action=\"http://127.0.0.1\" method=\"post\" enctype=\"multipart/form-data\" class=\"edit-form\" id=\"form\" name=\"form\">\n        <div class=\"viewspace\">\n            <div class=\"label\">Person</div>\n            <div class=\"required-info\">\n              <span class=\"required\">*</span>&ndash; required\n            </div>\n          <div class=\"step\">\n            <div id=\"form-widgets-firstName-row\" class=\"row required\">\n                <div class=\"label\">\n                  <label for=\"form-widgets-firstName\">\n                    <span>First Name</span>\n                    <span class=\"required\">*</span>\n                  </label>\n                </div>\n                <div class=\"widget\">\n      <input id=\"form-widgets-firstName\" name=\"form.widgets.firstName\" class=\"text-widget required textline-field\" value=\"\" type=\"text\" />\n  </div>\n            </div>\n            <div id=\"form-widgets-lastName-row\" class=\"row required\">\n                <div class=\"label\">\n                  <label for=\"form-widgets-lastName\">\n                    <span>Last Name</span>\n                    <span class=\"required\">*</span>\n                  </label>\n                </div>\n                <div class=\"widget\">\n      <input id=\"form-widgets-lastName\" name=\"form.widgets.lastName\" class=\"text-widget required textline-field\" value=\"\" type=\"text\" />\n  </div>\n            </div>\n          </div>\n            <div>\n              <div class=\"buttons\">\n                <span class=\"back\">\n                </span>\n                <span class=\"step\">\n  <input id=\"form-buttons-apply\" name=\"form.buttons.apply\" class=\"submit-widget button-field\" value=\"Apply\" type=\"submit\" />\n                </span>\n                <span class=\"forward\">\n  <input id=\"form-buttons-next\" name=\"form.buttons.next\" class=\"submit-widget button-field\" value=\"Next\" type=\"submit\" />\n                </span>\n              </div>\n            </div>\n        </div>\n    </form>\n  </div>\n\n\nWe can't go to the next step if we not complete the first step:\n\n  >>> request = TestRequest(form={'form.buttons.next': 'Next'})\n  >>> alsoProvides(request, IDivFormLayer)\n  >>> personWizard = PersonWizard(person, request)\n  >>> personWizard.__parent__ = person\n  >>> personWizard.__name__ = u'wizard'\n  >>> personStep = personWizard.publishTraverse(request, names[0])\n  >>> personStep.update()\n  >>> print(personStep.render())\n  <div class=\"wizard\">\n  ...\n    <div class=\"summary\">There were some errors.</div>\n  ...\n    <div class=\"error\">Required input is missing.</div>\n  ...\n    <div class=\"error\">Required input is missing.</div>\n  ...\n\n\nWe can complete this step if we fill in the required values and click next:\n\n  >>> request = TestRequest(form={'form.widgets.firstName': u'Roger',\n  ...                             'form.widgets.lastName': u'Ineichen',\n  ...                             'form.buttons.next': 'Next'})\n  >>> alsoProvides(request, IDivFormLayer)\n  >>> personWizard = PersonWizard(person, request)\n  >>> personWizard.__parent__ = person\n  >>> personWizard.__name__ = u'wizard'\n  >>> personStep = personWizard.publishTraverse(request, names[0])\n  >>> personStep.update()\n  >>> print(personStep.render())\n\nAs you can see the step get processed and the wizard will redirect to the next\nstep using the response redirect concept:\n\n  >>> personWizard.nextURL\n  'http://127.0.0.1/person/wizard/address'\n\nLet's access the next step using the traverser. This will setup the next step\nand them.\n\n  >>> request = TestRequest()\n  >>> alsoProvides(request, IDivFormLayer)\n  >>> personWizard = PersonWizard(person, request)\n  >>> personWizard.__parent__ = person\n  >>> personWizard.__name__ = u'wizard'\n\nAs you can see we see our next step is the address step:\n\n  >>> addressStep = personWizard.publishTraverse(request, 'address')\n  >>> addressStep\n  <AddressStep 'address'>\n\nUpdate and render it:\n\n  >>> addressStep.update()\n  >>> print(addressStep.render())\n  <div class=\"wizard\">\n      <div class=\"header\">Person Wizard</div>\n      <div class=\"wizardMenu\">\n        <span>\n            <a href=\"http://127.0.0.1/person/wizard/person\">Person</a>\n        </span>\n        <span class=\"selected\">\n            <span>Address</span>\n        </span>\n      </div>\n    <form action=\"http://127.0.0.1\" method=\"post\" enctype=\"multipart/form-data\" class=\"edit-form\" id=\"form\" name=\"form\">\n        <div class=\"viewspace\">\n            <div class=\"label\">Address</div>\n            <div class=\"required-info\">\n              <span class=\"required\">*</span>&ndash; required\n            </div>\n          <div class=\"step\">\n            <div id=\"form-widgets-street-row\" class=\"row required\">\n                <div class=\"label\">\n                  <label for=\"form-widgets-street\">\n                    <span>Street</span>\n                    <span class=\"required\">*</span>\n                  </label>\n                </div>\n                <div class=\"widget\">\n      <input id=\"form-widgets-street\" name=\"form.widgets.street\" class=\"text-widget required textline-field\" value=\"\" type=\"text\" />\n  </div>\n            </div>\n            <div id=\"form-widgets-city-row\" class=\"row required\">\n                <div class=\"label\">\n                  <label for=\"form-widgets-city\">\n                    <span>City</span>\n                    <span class=\"required\">*</span>\n                  </label>\n                </div>\n                <div class=\"widget\">\n      <input id=\"form-widgets-city\" name=\"form.widgets.city\" class=\"text-widget required textline-field\" value=\"\" type=\"text\" />\n  </div>\n            </div>\n          </div>\n            <div>\n              <div class=\"buttons\">\n                <span class=\"back\">\n  <input id=\"form-buttons-back\" name=\"form.buttons.back\" class=\"submit-widget button-field\" value=\"Back\" type=\"submit\" />\n                </span>\n                <span class=\"step\">\n  <input id=\"form-buttons-apply\" name=\"form.buttons.apply\" class=\"submit-widget button-field\" value=\"Apply\" type=\"submit\" />\n                </span>\n                <span class=\"forward\">\n                </span>\n              </div>\n            </div>\n        </div>\n    </form>\n  </div>\n\n\n=========================\nWizard and Step directive\n=========================\n\nShow how we can use the ``wizard`` and ``wizardStep``\ndirectives. Register the meta configuration for the directive.\n\n  >>> import sys\n  >>> from zope.configuration import xmlconfig\n  >>> import z3c.wizard\n  >>> context = xmlconfig.file('meta.zcml', z3c.wizard)\n\nWe need also a custom wizard class:\n\n  >>> import z3c.wizard\n  >>> class MyWizard(z3c.wizard.wizard.Wizard):\n  ...     \"\"\"Custom wizard\"\"\"\n\nMake them available under the fake package `custom`:\n\n  >>> sys.modules['custom'] = type(\n  ...     'Module', (),\n  ...     {'MyWizard': MyWizard})()\n\nRegister a wizard within the directive with minimal attributes:\n\n  >>> context = xmlconfig.string(\"\"\"\n  ... <configure\n  ...     xmlns:z3c=\"http://namespaces.zope.org/z3c\">\n  ...   <z3c:wizard\n  ...       name=\"wizard\"\n  ...       class=\"custom.MyWizard\"\n  ...       permission=\"zope.Public\"\n  ...       />\n  ... </configure>\n  ... \"\"\", context)\n\nNow define a step,\n\n  >>> import z3c.wizard\n  >>> class FirstStep(z3c.wizard.step.Step):\n  ...     \"\"\"First step\"\"\"\n\nregister the new step classes in the custom module\n\n  >>> sys.modules['custom'].FirstStep = FirstStep\n\nand use them in the ``wizardStep`` directive:\n\n  >>> context = xmlconfig.string(\"\"\"\n  ... <configure\n  ...     xmlns:z3c=\"http://namespaces.zope.org/z3c\">\n  ...   <z3c:wizardStep\n  ...       name=\"first\"\n  ...       wizard=\"custom.MyWizard\"\n  ...       class=\"custom.FirstStep\"\n  ...       permission=\"zope.Public\"\n  ...       />\n  ... </configure>\n  ... \"\"\", context)\n\nLet's get the wizard\n\n  >>> import zope.component\n  >>> from zope.publisher.browser import TestRequest\n  >>> wizard = zope.component.queryMultiAdapter((object(), TestRequest()),\n  ...     name='wizard')\n\nand check it:\n\n  >>> wizard\n  <MyWizard 'wizard'>\n\n  >>> z3c.wizard.interfaces.IWizard.providedBy(wizard)\n  True\n\nLet's get the wizard step\n\n  >>> import zope.component\n  >>> from zope.publisher.browser import TestRequest\n  >>> firstStep = zope.component.queryMultiAdapter(\n  ...     (object(), TestRequest(), wizard), name='first')\n\nand check it\n\n  >>> firstStep\n  <FirstStep 'first'>\n\n  >>> firstStep.context\n  <object object at ...>\n\n  >>> firstStep.wizard\n  <MyWizard 'wizard'>\n\n  >>> z3c.wizard.interfaces.IStep.providedBy(firstStep)\n  True\n\n  >>> z3c.wizard.interfaces.IWizard.providedBy(firstStep.wizard)\n  True\n\nClean up the custom module:\n\n  >>> del sys.modules['custom']\n\n\n=======\nCHANGES\n=======\n\n1.0 (2017-06-16)\n----------------\n\n- Add support for Python 3.4 up to 3.6, PyPy2 and PyPy3.\n\n\n0.9.1 (2011-10-28)\n------------------\n\n- Using Python's ``doctest`` module instead of depreacted\n  ``zope.testing.doctest``.\n\n- Allowing in step complete check that values are not existing on\n  context. This is consistent with the way `z3c.form` handles not existing\n  values.\n\n0.9.0 (2009-12-29)\n------------------\n\n- Avoid `z3c.form.testing` in tests: It depends on `lxml`, but `lxml`\n  features are not needed here.\n\n- Using ``requiredInfo`` property to render the information about\n  required fields. This property returns an i18n message id making the\n  information translateable.\n\n\n0.8.0 (2009-11-30)\n------------------\n\n- Adjusted dependencies, reflecting changes in zope packages: use new\n  packages and skip dependency to `zope.app.publisher`.\n\n\n0.7.1 (2009-10-27)\n------------------\n\n- Bugfix for z3c.form 2.2.0 changes. Removed name definition in Step\n  class. This will prevent to run into an error based on the z3c.form\n  changes.\n\n\n0.7.0 (2009-08-15)\n------------------\n\n- Added support for field groups in step template. (Copied over from\n  z3c.formui.)\n\n- There were two metal define-slots named `header`. Renamed the first\n  one to `wizard-header`.\n\n\n\n0.6.0 (2009-07-10)\n------------------\n\n- Remove dependency on z3c.i18n as it wasn't really used and we can\n  easily recreate a message factory for the \"z3c\" domain.\n\n- Fixed tests to work with z3c.form 2.0.\n\n- Added another doctest to the `long_description`.\n\n- Changed package's mailing list address to zope-dev at zope.org instead\n  of the retired zope3-dev one.\n\n0.5.0 (2009-02-22)\n------------------\n\n- Initial Release",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/zopefoundation/z3c.wizard",
    "keywords": "zope zope3 z3c form wizard",
    "license": "ZPL 2.1",
    "maintainer": "",
    "maintainer_email": "",
    "name": "z3c.wizard",
    "platform": "",
    "project_url": "https://pypi.org/project/z3c.wizard/",
    "release_url": "https://pypi.org/project/z3c.wizard/1.0/",
    "requires_python": "",
    "summary": "Wizard based on z3c.form for for Zope3",
    "version": "1.0"
  },
  "releases": {
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e7f39cd535b56143b46435b5c8f17d5b",
          "sha256": "54b90ac092528307643eb61f54d69a7c2a465c1760d56a4331f8316f9b596600"
        },
        "downloads": 2510,
        "filename": "z3c.wizard-0.5.0.zip",
        "has_sig": false,
        "md5_digest": "e7f39cd535b56143b46435b5c8f17d5b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31263,
        "upload_time": "2009-02-22T07:03:02",
        "url": "https://files.pythonhosted.org/packages/91/6b/8b3e60c6f165729c832111043d8cb3e20e09e2676b3db9cb454fc821872e/z3c.wizard-0.5.0.zip"
      }
    ],
    "0.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3fcd10ee29828a133c36f3719370dd85",
          "sha256": "80ecdaaec040061480e8ec5fa2a842c590245e23294cd35d20be13466be7b062"
        },
        "downloads": 2521,
        "filename": "z3c.wizard-0.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3fcd10ee29828a133c36f3719370dd85",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20502,
        "upload_time": "2009-07-10T08:18:56",
        "url": "https://files.pythonhosted.org/packages/3a/ba/5e72ab40ad7e468b86c0883c2879ccf200a23f1027ae0dcd16a519c11051/z3c.wizard-0.6.0.tar.gz"
      }
    ],
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8b708f448333860e3388f8f3c81bc737",
          "sha256": "9b90843c68fe81ce9cab411c27a385783f3c518a921c9bbbf021b00419077a04"
        },
        "downloads": 2495,
        "filename": "z3c.wizard-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8b708f448333860e3388f8f3c81bc737",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20826,
        "upload_time": "2009-08-15T18:51:16",
        "url": "https://files.pythonhosted.org/packages/bc/b4/76cf0bec9ad5dbd3ba33c7735fa0d50f163208467fbefea458932f59f6e7/z3c.wizard-0.7.0.tar.gz"
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0cf2beb1d2f653929230eac5ecd582f5",
          "sha256": "081fa38f044825df3a5465851fa6a2f97f9d370ecbbe7a5c8374ac2d4069e2b1"
        },
        "downloads": 2472,
        "filename": "z3c.wizard-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0cf2beb1d2f653929230eac5ecd582f5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17737,
        "upload_time": "2009-10-27T21:25:32",
        "url": "https://files.pythonhosted.org/packages/e4/da/9aa88bc83b2c4049b0837483e17a920b6b02046a227bcfbcf8d6787f7dd1/z3c.wizard-0.7.1.tar.gz"
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f23eb1bf46af43a57c2af9a6d37d074a",
          "sha256": "ceb966084584ff5561dda1fec47402c188dfa158d0275a93bb689f5fd8d2855b"
        },
        "downloads": 2472,
        "filename": "z3c.wizard-0.8.0.zip",
        "has_sig": false,
        "md5_digest": "f23eb1bf46af43a57c2af9a6d37d074a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 34010,
        "upload_time": "2009-11-30T13:28:19",
        "url": "https://files.pythonhosted.org/packages/6a/3b/3e342c92c4f5bee5f6df87baa865046727887666395cffe3c8d35f3777da/z3c.wizard-0.8.0.zip"
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "760ff3587d54b1406cebd36e1fb48022",
          "sha256": "3b03c6e5e0656b7116e3fa46f9b2b7c9e1ddc48ca09a5e0d5b5d8071354983c4"
        },
        "downloads": 3075,
        "filename": "z3c.wizard-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "760ff3587d54b1406cebd36e1fb48022",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18100,
        "upload_time": "2009-12-29T15:45:45",
        "url": "https://files.pythonhosted.org/packages/cc/16/5d70f4b74f3ffabc20a8b69f31021529e9c12cdb36ed177d233b46916ff6/z3c.wizard-0.9.0.tar.gz"
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "07d266dee89c519cd61b4bc717041154",
          "sha256": "bd1a886942a9662996060e756143b52cdbcfaf84a132ae2fe9db36307b6a5dd1"
        },
        "downloads": 2814,
        "filename": "z3c.wizard-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "07d266dee89c519cd61b4bc717041154",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25111,
        "upload_time": "2011-10-28T23:07:47",
        "url": "https://files.pythonhosted.org/packages/32/3a/5d7932079894a5a7888acf91082ddcf3c013d129eff843019df5ebace684/z3c.wizard-0.9.1.tar.gz"
      }
    ],
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2a49d4b22918daf93392c5d9a8a1727a",
          "sha256": "19d92cd27c0d286f42d61a8082414ee75c122620c0cb49d998ad8447724f12bb"
        },
        "downloads": 0,
        "filename": "z3c.wizard-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2a49d4b22918daf93392c5d9a8a1727a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25977,
        "upload_time": "2017-06-16T18:40:53",
        "url": "https://files.pythonhosted.org/packages/d6/c5/5fe528cb0c0d9f78db778f429acd1e6cd85ea2f0f0074316658ccc85e60c/z3c.wizard-1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2a49d4b22918daf93392c5d9a8a1727a",
        "sha256": "19d92cd27c0d286f42d61a8082414ee75c122620c0cb49d998ad8447724f12bb"
      },
      "downloads": 0,
      "filename": "z3c.wizard-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "2a49d4b22918daf93392c5d9a8a1727a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 25977,
      "upload_time": "2017-06-16T18:40:53",
      "url": "https://files.pythonhosted.org/packages/d6/c5/5fe528cb0c0d9f78db778f429acd1e6cd85ea2f0f0074316658ccc85e60c/z3c.wizard-1.0.tar.gz"
    }
  ]
}