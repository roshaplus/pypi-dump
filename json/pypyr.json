{
  "info": {
    "author": "345",
    "author_email": "pypyr@345.systems",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Build Tools",
      "Topic :: System :: Shells"
    ],
    "description": "#########################\npypyr cli pipeline runner\n#########################\n\n.. image:: https://cdn.345.systems/wp-content/uploads/2017/03/pypyr-logo-small.png\n    :alt: pypyr-logo\n    :align: left\n\n*pypyr*\n    pronounce how you like, but I generally say *piper* as in \"piping down the\n    valleys wild\"\n\n\npypyr is a command line interface to run pipelines defined in yaml. Think of\npypyr as a simple task runner that lets you run sequential steps.\n\n|build-status| |coverage| |pypi|\n\n.. contents::\n\n.. section-numbering::\n\n************\nInstallation\n************\n\npip\n===\n.. code-block:: bash\n\n  $ pip install --upgrade pypyr\n\nPython version\n==============\nTested against Python 3.6\n\n*****\nUsage\n*****\nRun your first pipeline\n=======================\nRun one of the built-in pipelines to get a feel for it:\n\n.. code-block:: bash\n\n  $ pypyr echo --context \"echoMe=Ceci n'est pas une pipe\"\n\nYou can achieve the same thing by running a pipeline where the context is set\nin the pipeline yaml rather than as a --context argument:\n\n.. code-block:: bash\n\n  $ pypyr magritte\n\nCheck here `pypyr.steps.echo`_ to see yaml that does this.\n\nRun a pipeline\n==============\npypyr assumes a pipelines directory in your current working directory.\n\n.. code-block:: bash\n\n  # run pipelines/mypipelinename.yaml with DEBUG logging level\n  $ pypyr mypipelinename --log 10\n\n  # run pipelines/mypipelinename.yaml with INFO logging level.\n  $ pypyr mypipelinename --log 20\n\n  # If you don't specify --log it defaults to 20 - INFO logging level.\n  $ pypyr mypipelinename\n\n  # run pipelines/mypipelinename.yaml with an input context. For this input to\n  # be available to your pipeline you need to specify a context_parser in your\n  # pipeline yaml.\n  $ pypyr mypipelinename --context 'mykey=value'\n\nGet cli help\n============\npypyr has a couple of arguments and switches you might find useful. See them all\nhere:\n\n.. code-block:: bash\n\n  $ pypyr -h\n\nExamples\n========\nIf you prefer reading code to reading words, https://github.com/pypyr/pypyr-example\n\n***************************\nAnatomy of a pypyr pipeline\n***************************\nPipeline yaml structure\n=======================\nA pipeline is a .yaml file. pypyr uses YAML version 1.2.\n\nSave pipelines to a `pipelines` directory in your working directory.\n\n.. code-block:: yaml\n\n  # This is an example showing the anatomy of a pypyr pipeline\n  # A pipeline should be saved as {working dir}/pipelines/mypipelinename.yaml.\n  # Run the pipeline from {working dir} like this: pypyr mypipelinename\n\n  # optional\n  context_parser: my.custom.parser\n\n  # mandatory.\n  steps:\n    - my.package.my.module # simple step pointing at a python module in a package\n    - mymodule # simple step pointing at a python file\n    - name: my.package.another.module # complex step. It contains a description and in parameters.\n      description: Optional description is for humans. It's any text that makes your life easier.\n      in: #optional. In parameters are added to the context so that this step and subsequent steps can use these key-value pairs.\n        parameter1: value1\n        parameter2: value2\n\n  # optional.\n  on_success:\n    - my.first.success.step\n    - my.second.success.step\n\n  # optional.\n  on_failure:\n    - my.failure.handler.step\n    - my.failure.handler.notifier\n\nBuilt-in pipelines\n==================\n+-----------------------------+-------------------------------------------------+-------------------------------------------------------------------------------------+\n| **pipeline**                | **description**                                 | **how to run**                                                                      |\n+-----------------------------+-------------------------------------------------+-------------------------------------------------------------------------------------+\n| donothing                   | Does what it says. Nothing.                     |`pypyr donothing`                                                                    |\n|                             |                                                 |                                                                                     |\n|                             |                                                 |                                                                                     |\n|                             |                                                 |                                                                                     |\n+-----------------------------+-------------------------------------------------+-------------------------------------------------------------------------------------+\n| echo                        | Echos context value echoMe to output.           |`pypyr echo --context \"echoMe=text goes here\"`                                       |\n+-----------------------------+-------------------------------------------------+-------------------------------------------------------------------------------------+\n| pypyrversion                | Prints the python cli version number.           |`pypyr pypyrversion`                                                                 |\n|                             |                                                 |                                                                                     |\n|                             |                                                 |                                                                                     |\n+-----------------------------+-------------------------------------------------+-------------------------------------------------------------------------------------+\n| magritte                    | Thoughts about pipes.                           |`pypyr magritte`                                                                     |\n|                             |                                                 |                                                                                     |\n|                             |                                                 |                                                                                     |\n+-----------------------------+-------------------------------------------------+-------------------------------------------------------------------------------------+\n\ncontext_parser\n==============\nOptional.\n\nA context_parser parses the pypyr --context input argument. The chances are\npretty good that it will take the --context argument and put in into the pypyr\ncontext.\n\nThe pypyr context is a dictionary that is in scope for the duration of the entire\npipeline. The context_parser can initialize the context. Any step in the pipeline\ncan add, edit or remove items from the context dictionary.\n\nBuilt-in context parsers\n------------------------\n+-----------------------------+-------------------------------------------------+-------------------------------------------------------------------------------------+\n| **context parser**          | **description**                                 | **example input**                                                                   |\n+-----------------------------+-------------------------------------------------+-------------------------------------------------------------------------------------+\n| pypyr.parser.commas         | Takes a comma delimited string and returns a    |`pypyr pipelinename --context \"param1,param2,param3\"`                                |\n|                             | dictionary where each element becomes the key,  |                                                                                     |\n|                             | with value to true.                             |This will create a context dictionary like this:                                     |\n|                             |                                                 |{'param1': True, 'param2': True, 'param3': True}                                     |\n|                             | Don't have spaces between commas unless you     |                                                                                     |\n|                             | really mean it. \\\"k1=v1, k2=v2\\\" will result in |                                                                                     |\n|                             | a context key name of \\' k2\\' not \\'k2\\'.       |                                                                                     |\n+-----------------------------+-------------------------------------------------+-------------------------------------------------------------------------------------+\n| pypyr.parser.json           | Takes a json string and returns a dictionary.   |`pypyr pipelinename --context \\'{\"key1\":\"value1\",\"key2\":\"value2\"}\\'`                 |\n+-----------------------------+-------------------------------------------------+-------------------------------------------------------------------------------------+\n| pypyr.parser.jsonfile       | Opens json file and returns a dictionary.       |`pypyr pipelinename --context \\'./path/sample.json'`                                 |\n+-----------------------------+-------------------------------------------------+-------------------------------------------------------------------------------------+\n| pypyr.parser.keyvaluepairs  | Takes a comma delimited key=value pair string   |`pypyr pipelinename --context \"param1=value1,param2=value2,param3=value3\"`           |\n|                             | and returns a dictionary where each pair becomes|                                                                                     |\n|                             | a dictionary element.                           |                                                                                     |\n|                             |                                                 |                                                                                     |\n|                             | Don't have spaces between commas unless you     |                                                                                     |\n|                             | really mean it. \\\"k1=v1, k2=v2\\\" will result in |                                                                                     |\n|                             | a context key name of \\' k2\\' not \\'k2\\'.       |                                                                                     |\n+-----------------------------+-------------------------------------------------+-------------------------------------------------------------------------------------+\n| pypyr.parser.yamlfile       | Opens a yaml file and writes the contents into  |`pypyr pipelinename --context \\'./path/sample.yaml'`                                 |\n|                             | the pypyr context dictionary.                   |                                                                                     |\n|                             |                                                 |                                                                                     |\n|                             | The top (or root) level yaml should describe a  |                                                                                     |\n|                             | map, not a sequence.                            |                                                                                     |\n|                             |                                                 |                                                                                     |\n|                             | Sequence (this won't work):                     |                                                                                     |\n|                             |                                                 |                                                                                     |\n|                             | .. code-block:: yaml                            |                                                                                     |\n|                             |                                                 |                                                                                     |\n|                             |   - thing1                                      |                                                                                     |\n|                             |   - thing2                                      |                                                                                     |\n|                             |                                                 |                                                                                     |\n|                             | Instead, do a map (aka dictionary):             |                                                                                     |\n|                             |                                                 |                                                                                     |\n|                             | .. code-block:: yaml                            |                                                                                     |\n|                             |                                                 |                                                                                     |\n|                             |   thing1: thing1value                           |                                                                                     |\n|                             |   thing2: thing2value                           |                                                                                     |\n+-----------------------------+-------------------------------------------------+-------------------------------------------------------------------------------------+\n\n\nRoll your own context_parser\n----------------------------\n.. code-block:: python\n\n  import logging\n\n\n  # getLogger will grab the parent logger context, so your loglevel and\n  # formatting will inherit correctly automatically from the pypyr core.\n  logger = logging.getLogger(__name__)\n\n\n  def get_parsed_context(context_arg):\n      \"\"\"This is the signature for a context parser. Input context is the string received from pypyr --context 'value here'\"\"\"\n      assert context_arg, (\"pipeline must be invoked with --context set.\")\n      logger.debug(\"starting\")\n\n      # your clever code here. Chances are pretty good you'll be doing things with the input context string to create a dictionary.\n\n      # function signature returns a dictionary\n      return {'key1': 'value1', 'key2':'value2'}\n\nsteps\n=====\nMandatory.\n\nsteps is a list of steps to execute in sequence. A step is simply a bit of\npython that does stuff.\n\nYou can specify a step in the pipeline yaml in two ways:\n\n* Simple step\n\n  - a simple step is just the name of the python module.\n\n  - pypyr will look in your working directory for these modules or packages.\n\n  - For a package, be sure to specify the full namespace (i.e not just `mymodule`, but `mypackage.mymodule`).\n\n    .. code-block:: yaml\n\n      steps:\n        - my.package.my.module # points at a python module in a package.\n        - mymodule # simple step pointing at a python file\n\n* Complex step\n\n  - a complex step allows you to specify a few more details for your step, but at heart it's the same thing as a simple step - it points at some python.\n\n    .. code-block:: yaml\n\n      steps:\n        - name: my.package.another.module\n          description: Optional Description is for humans. It's any yaml-escaped text that makes your life easier.\n          in: #optional. In parameters are added to the context so that this step and subsequent steps can use these key-value pairs.\n            parameter1: value1\n            parameter2: value2\n\n\n* You can freely mix and match simple and complex steps in the same pipeline.\n\n* Frankly, the only reason simple steps are there is because I'm lazy and I dislike redundant typing.\n\n\nBuilt-in steps\n--------------\n\n+-------------------------------+-------------------------------------------------+------------------------------+\n| **step**                      | **description**                                 | **input context properties** |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.assert`_         | Stop pipeline if item in context is not as      | assertThis (any)             |\n|                               | expected.                                       | assertEquals (any)           |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.contextclear`_   | Remove specified items from context.            | contextClear (list)          |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.contextclearall`_| Wipe the entire context.                        |                              |\n|                               |                                                 |                              |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.contextset`_     | Sets context values from already existing       | contextSet (dict)            |\n|                               | context values.                                 |                              |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.echo`_           | Echo the context value `echoMe` to the output.  | echoMe (string)              |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.env`_            | Get, set or unset $ENVs.                        | envGet (dict)                |\n|                               |                                                 |                              |\n|                               |                                                 | envSet (dict)                |\n|                               |                                                 |                              |\n|                               |                                                 | envUnset (list)              |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.fetchjson`_      | Loads json file into pypyr context.             | fetchJsonPath (path-like)    |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.fetchyaml`_      | Loads yaml file into pypyr context.             | fetchYamlPath (path-like)    |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.fileformat`_     | Parse file and substitute {tokens} from         | fileFormatIn (path-like)     |\n|                               | context.                                        |                              |\n|                               |                                                 | fileFormatOut (path-like)    |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.fileformatjson`_ | Parse json file and substitute {tokens} from    | fileFormatJsonIn (path-like) |\n|                               | context.                                        |                              |\n|                               |                                                 | fileFormatJsonOut (path-like)|\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.fileformatyaml`_ | Parse yaml file and substitute {tokens} from    | fileFormatYamlIn (path-like) |\n|                               | context.                                        |                              |\n|                               |                                                 | fileFormatYamlOut (path-like)|\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.filereplace`_    | Parse input file and replace search strings.    | fileReplaceIn (path-like)    |\n|                               |                                                 |                              |\n|                               |                                                 | fileReplaceOut (path-like)   |\n|                               |                                                 |                              |\n|                               |                                                 | fileReplacePairs (dict)      |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.py`_             | Executes the context value `pycode` as python   | pycode (string)              |\n|                               | code.                                           |                              |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.pypyrversion`_   | Writes installed pypyr version to output.       |                              |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.safeshell`_      | Runs the program and args specified in the      | cmd (string)                 |\n|                               | context value `cmd` as a subprocess.            |                              |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.shell`_          | Runs the context value `cmd` in the default     | cmd (string)                 |\n|                               | shell. Use for pipes, wildcards, $ENVs, ~       |                              |\n+-------------------------------+-------------------------------------------------+------------------------------+\n| `pypyr.steps.tar`_            | Archive and/or extract tars with or without     | tarExtract (dict)            |\n|                               | compression. Supports gzip, bzip2, lzma.        |                              |\n|                               |                                                 | tarArchive (dict)            |\n+-------------------------------+-------------------------------------------------+------------------------------+\n\npypyr.steps.assert\n^^^^^^^^^^^^^^^^^^\nAssert that something is True or equal to something else.\n\nUses these context keys:\n\n- ``assertThis``\n\n  - mandatory\n  - If assertEquals not specified, evaluates as a boolean.\n\n- ``assertEquals``\n\n  - optional\n  - If specified, compares ``assertThis`` to ``assertEquals``\n\nIf ``assertThis`` evaluates to False raises error.\n\nIf ``assertEquals`` is specified, raises error if ``assertThis != assertEquals``.\n\nSupports `Substitutions`_.\n\nExamples:\n\n.. code-block:: yaml\n\n    # continue pipeline\n    assertThis: True\n    # stop pipeline\n    assertThis: False\n\nor with substitutions:\n\n.. code-block:: yaml\n\n    interestingValue: True\n    assertThis: '{interestingValue}' # continue with pipeline\n\nNon-0 numbers evalute to True:\n\n.. code-block:: yaml\n\n    assertThis: 1 # non-0 numbers assert to True. continue with pipeline\n\nString equality:\n\n.. code-block:: yaml\n\n    assertThis: 'up the valleys wild'\n    assertEquals: 'down the valleys wild' # strings not equal. stop pipeline.\n\nString equality with substitutions:\n\n.. code-block:: yaml\n\n    k1: 'down'\n    k2: 'down'\n    assertThis: '{k1} the valleys wild'\n    assertEquals: '{k2} the valleys wild' # substituted strings equal. continue pipeline.\n\n\nNumber equality:\n\n.. code-block:: yaml\n\n    assertThis: 123.45\n    assertEquals: 123.45 # numbers equal. continue with pipeline.\n\nNumber equality with substitutions:\n\n.. code-block:: yaml\n\n    numberOne: 123.45\n    numberTwo: 678.9\n    assertThis: '{numberOne}'\n    assertEquals: '{numberTwo}' # substituted numbers not equal. Stop pipeline.\n\nComplex types:\n\n.. code-block:: yaml\n\n  complexOne:\n    - thing1\n    - k1: value1\n      k2: value2\n      k3:\n        - sub list 1\n        - sub list 2\n  complexTwo:\n    - thing1\n    - k1: value1\n      k2: value2\n      k3:\n        - sub list 1\n        - sub list 2\n  assertThis: '{complexOne}'\n  assertEquals: '{complexTwo}' # substituted types equal. Continue pipeline.\n\n\nSee a worked example `for assert here\n<https://github.com/pypyr/pypyr-example/tree/master/pipelines/assert.yaml>`__.\n\npypyr.steps.contextclear\n^^^^^^^^^^^^^^^^^^^^^^^^\nRemove the specified items from the context.\n\nWill iterate ``contextClear`` and remove those keys from context.\n\nFor example, say input context is:\n\n.. code-block:: yaml\n\n    key1: value1\n    key2: value2\n    key3: value3\n    key4: value4\n    contextClear:\n        - key2\n        - key4\n        - contextClear\n\nThis will result in return context:\n\n.. code-block:: yaml\n\n    key1: value1\n    key3: value3\n\nNotice how contextClear also cleared itself in this example.\n\npypyr.steps.contextclearall\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\nWipe the entire context. No input context arguments required.\n\nYou can always use *contextclearall* as a simple step. Sample pipeline yaml:\n\n.. code-block:: yaml\n\n    steps:\n      - my.arb.step\n      - pypyr.steps.contextclearall\n      - another.arb.step\n\n\npypyr.steps.contextset\n^^^^^^^^^^^^^^^^^^^^^^\nSets context values from already existing context values.\n\nThis is handy if you need to prepare certain keys in context where a next step\nmight need a specific key. If you already have the value in context, you can\ncreate a new key (or update existing key) with that value.\n\nSo let's say you already have `context['currentKey'] = 'eggs'`.\nIf you run newKey: currentKey, you'll end up with `context['newKey'] == 'eggs'`\n\nFor example, say your context looks like this,\n\n.. code-block:: yaml\n\n      key1: value1\n      key2: value2\n      key3: value3\n\nand your pipeline yaml looks like this:\n\n.. code-block:: yaml\n\n  steps:\n    - name: pypyr.steps.contextset\n      in:\n        contextSet:\n          key2: key1\n          key4: key3\n\nThis will result in context like this:\n\n.. code-block:: yaml\n\n    key1: value1\n    key2: value1\n    key3: value3\n    key4: value3\n\npypyr.steps.echo\n^^^^^^^^^^^^^^^^\nEcho the context value ``echoMe`` to the output.\n\nFor example, if you had pipelines/mypipeline.yaml like this:\n\n.. code-block:: yaml\n\n  context_parser: pypyr.parser.keyvaluepairs\n  steps:\n    - name: pypyr.steps.echo\n\nYou can run:\n\n.. code-block:: bash\n\n  pypyr mypipeline --context \"echoMe=Ceci n'est pas une pipe\"\n\n\nAlternatively, if you had pipelines/look-ma-no-params.yaml like this:\n\n.. code-block:: yaml\n\n  steps:\n    - name: pypyr.steps.echo\n      description: Output echoMe\n      in:\n        echoMe: Ceci n'est pas une pipe\n\n\nYou can run:\n\n.. code-block:: bash\n\n  $ pypyr look-ma-no-params\n\nSupports `Substitutions`_.\n\npypyr.steps.env\n^^^^^^^^^^^^^^^\nGet, set or unset environment variables.\n\nAt least one of these context keys must exist:\n\n- envGet\n- envSet\n- envUnset\n\nThis step will run whatever combination of Get, Set and Unset you specify.\nRegardless of combination, execution order is Get, Set, Unset.\n\nSee a worked example `for environment variables here\n<https://github.com/pypyr/pypyr-example/tree/master/pipelines/env_variables.yaml>`__.\n\nenvGet\n\"\"\"\"\"\"\nGet $ENVs into the pypyr context.\n\n``context['envGet']`` must exist. It's a dictionary.\n\nValues are the names of the $ENVs to write to the pypyr context.\n\nKeys are the pypyr context item to which to write the $ENV values.\n\nFor example, say input context is:\n\n.. code-block:: yaml\n\n  key1: value1\n  key2: value2\n  pypyrCurrentDir: value3\n  envGet:\n    pypyrUser: USER\n    pypyrCurrentDir: PWD\n\n\nThis will result in context:\n\n.. code-block:: yaml\n\n  key1: value1\n  key2: value2\n  key3: value3\n  pypyrCurrentDir: <<value of $PWD here, not value3>>\n  pypyrUser: <<value of $USER here>>\n\nenvSet\n\"\"\"\"\"\"\nSet $ENVs from the pypyr context.\n\n``context['envSet']`` must exist. It's a dictionary.\n\nValues are strings to write to $ENV. You can use {key} `Substitutions`_ to\nformat the string from context.\nKeys are the names of the $ENV values to which to write.\n\nFor example, say input context is:\n\n.. code-block:: yaml\n\n  key1: value1\n  key2: value2\n  key3: value3\n  envSet:\n      MYVAR1: {key1}\n      MYVAR2: before_{key3}_after\n      MYVAR3: arbtexthere\n\nThis will result in the following $ENVs:\n\n.. code-block:: yaml\n\n  $MYVAR1 = value1\n  $MYVAR2 = before_value3_after\n  $MYVAR3 = arbtexthere\n\nNote that the $ENVs are not persisted system-wide, they only exist for the\npypyr sub-processes, and as such for the subsequent steps during this pypyr\npipeline execution. If you set an $ENV here, don't expect to see it in your\nsystem environment variables after the pipeline finishes running.\n\nenvUnset\n\"\"\"\"\"\"\"\"\nUnset $ENVs.\n\nContext is a dictionary or dictionary-like. context is mandatory.\n\n``context['envUnset']`` must exist. It's a list.\nList items are the names of the $ENV values to unset.\n\nFor example, say input context is:\n\n.. code-block:: yaml\n\n    key1: value1\n    key2: value2\n    key3: value3\n    envUnset:\n        MYVAR1\n        MYVAR2\n\nThis will result in the following $ENVs being unset:\n\n.. code-block:: bash\n\n  $MYVAR1\n  $MYVAR2\n\npypyr.steps.fetchjson\n^^^^^^^^^^^^^^^^^^^^^\nLoads a json file into the pypyr context.\n\nThis step requires the following key in the pypyr context to succeed:\n\n- fetchJsonPath.\n  - path-like. Path to file on disk. Can be relative. Supports `Substitutions`_.\n\nJson parsed from the file will be merged into the pypyr context. This will\noverwrite existing values if the same keys are already in there.\n\nI.e if file json has ``{'eggs' : 'boiled'}``, but context ``{'eggs': 'fried'}``\nalready exists, returned ``context['eggs']`` will be 'boiled'.\n\nThe json should not be an array [] at the top level, but rather an Object.\n\npypyr.steps.fetchyaml\n^^^^^^^^^^^^^^^^^^^^^\nLoads a yaml file into the pypyr context.\n\nThis step requires the following key in the pypyr context to succeed:\n\n- fetchYamlPath.\n  - path-like. Path to file on disk. Can be relative. Supports `Substitutions`_.\n\nYaml parsed from the file will be merged into the pypyr context. This will\noverwrite existing values if the same keys are already in there.\n\nI.e if file yaml has\n\n.. code-block:: yaml\n\n  eggs: boiled\n\nbut context ``{'eggs': 'fried'}`` already exists, returned ``context['eggs']``\nwill be 'boiled'.\n\nThe yaml should not be a list at the top level, but rather a mapping.\n\nSo the top-level yaml should not look like this:\n\n.. code-block:: yaml\n\n  - eggs\n  - ham\n\nbut rather like this:\n\n.. code-block:: yaml\n\n  breakfastOfChampions:\n    - eggs\n    - ham\n\n\npypyr.steps.fileformat\n^^^^^^^^^^^^^^^^^^^^^^\nParses input text file and substitutes {tokens} in the text of the file\nfrom the pypyr context.\n\nThe following context keys expected:\n\n- fileFormatIn\n\n  - Path to source file on disk.\n\n- fileFormatOut\n\n  - Write output file to here. Will create directories in path if these do not\n    exist already.\n\nSo if you had a text file like this:\n\n.. code-block:: text\n\n  {k1} sit thee down and write\n  In a book that all may {k2}\n\nAnd your pypyr context were:\n\n.. code-block:: yaml\n\n  k1: pypyr\n  k2: read\n\nYou would end up with an output file like this:\n\n.. code-block:: text\n\n  pypyr sit thee down and write\n  In a book that all may read\n\nThe file in and out paths support `Substitutions`_.\n\npypyr.steps.fileformatjson\n^^^^^^^^^^^^^^^^^^^^^^^^^^\nParses input json file and substitutes {tokens} from the pypyr context.\n\nPretty much does the same thing as `pypyr.steps.fileformat`_, only it makes it\neasier to work with curly braces for substitutions without tripping over the\njson's structural braces.\n\nThe following context keys expected:\n\n- fileFormatJsonIn\n\n  - Path to source file on disk.\n\n- fileFormatJsonOut\n\n  - Write output file to here. Will create directories in path if these do not\n    exist already.\n\n`Substitutions`_ enabled for keys and values in the source json.\n\nThe file in and out paths also support `Substitutions`_.\n\npypyr.steps.fileformatyaml\n^^^^^^^^^^^^^^^^^^^^^^^^^^\nParses input yaml file and substitutes {tokens} from the pypyr context.\n\nPretty much does the same thing as `pypyr.steps.fileformat`_, only it makes it\neasier to work with curly braces for substitutions without tripping over the\nyaml's structural braces. If your yaml doesn't use curly braces that aren't\nmeant for {token} substitutions, you can happily use `pypyr.steps.fileformat`_\ninstead - it's more memory efficient.\n\nThis step does not preserve comments. Use `pypyr.steps.fileformat`_ if you need\nto preserve comments on output.\n\nThe following context keys expected:\n\n- fileFormatYamlIn\n\n  - Path to source file on disk.\n\n- fileFormatYamlOut\n\n  - Write output file to here. Will create directories in path if these do not\n    exist already.\n\nThe file in and out paths support `Substitutions`_.\n\npypyr.steps.filereplace\n^^^^^^^^^^^^^^^^^^^^^^^\nParses input text file and replaces a search string.\n\nThe other *fileformat* steps, by way of contradistinction, uses string\nformatting expressions inside {braces} to format values against the pypyr\ncontext. This step, however, let's you specify any search string and replace it\nwith any replace string. This is handy if you are in a file where curly braces\naren't helpful for a formatting expression - e.g inside a .js file.\n\nThe following context keys expected:\n\n- fileReplaceIn\n\n  - Path to source file on disk.\n\n- fileReplaceOut\n\n  - Write output file to here. Will create directories in path if these do not\n    exist already.\n\n- fileReplacePairs\n\n  - dictionary where format is:\n\n    - 'find_string': 'replace_string'\n\nExample input context:\n\n.. code-block:: yaml\n\n  fileReplaceIn: ./infile.txt\n  fileReplaceOut: ./outfile.txt\n  fileReplacePairs:\n    findmestring: replacewithme\n    findanotherstring: replacewithanotherstring\n    alaststring: alastreplacement\n\nThis also does string substitutions from context on the fileReplacePairs. It\ndoes this before it search & replaces the *fileReplaceIn* file.\n\nBe careful of order. The last string replacement expression could well replace\na replacement that an earlier replacement made in the sequence.\n\nIf fileReplacePairs is not an ordered collection,\nreplacements could evaluate in any given order. If you are creating your *in*\nparameters in the pipeline yaml, don't worry about it, it will be an ordered\ndictionary already, so life is good.\n\nThe file in and out paths support `Substitutions`_.\n\nSee a worked\n`example here\n<https://github.com/pypyr/pypyr-example/tree/master/pipelines/filereplace.yaml>`_.\n\npypyr.steps.py\n^^^^^^^^^^^^^^\nExecutes the context value `pycode` as python code.\n\nWill exec ``context['pycode']`` as a dynamically interpreted python code block.\n\nYou can access and change the context dictionary in a py step. See a worked\nexample `here\n<https://github.com/pypyr/pypyr-example/tree/master/pipelines/py.yaml>`_.\n\nFor example, this will invoke python print and print 2:\n\n.. code-block:: yaml\n\n  steps:\n    - name: pypyr.steps.py\n      description: Example of an arb python command. Will print 2.\n      in:\n        pycode: print(1+1)\n\npypyr.steps.pypyrversion\n^^^^^^^^^^^^^^^^^^^^^^^^\nOutputs the same as:\n\n.. code-block:: bash\n\n  pypyr --version\n\nThis is an actual pipeline, though, so unlike --version, it'll use the standard\npypyr logging format.\n\nExample pipeline yaml:\n\n.. code-block:: bash\n\n    steps:\n      - pypyr.steps.pypyrversion\n\npypyr.steps.safeshell\n^^^^^^^^^^^^^^^^^^^^^\nRuns the context value `cmd` as a sub-process.\n\nIn `safeshell`, you cannot use things like exit, return, shell pipes, filename\nwildcards, environment variable expansion, and expansion of ~ to a user\u2019s\nhome directory. Use pypyr.steps.shell for this instead. Safeshell runs a\nprogram, it does not invoke the shell.\n\nSupports string `Substitutions`_.\n\nExample pipeline yaml:\n\n.. code-block:: bash\n\n  steps:\n    - name: pypyr.steps.safeshell\n      in:\n        cmd: ls -a\n\nSee a worked example `for shell power here\n<https://github.com/pypyr/pypyr-example/tree/master/pipelines/shell.yaml>`__.\n\npypyr.steps.shell\n^^^^^^^^^^^^^^^^^\nRuns the context value `cmd` in the default shell. On a sensible O/S, this is\n`/bin/sh`\n\nDo all the things you can't do with `safeshell`.\n\nFriendly reminder of the difference between separating your commands with ; or\n&&:\n\n- ; will continue to the next statement even if the previous command errored.\n  It won't exit with an error code if it wasn't the last statement.\n- && stops and exits reporting error on first error.\n\nSupports string `Substitutions`_.\n\nExample pipeline yaml using a pipe:\n\n.. code-block:: bash\n\n  steps:\n    - name: pypyr.steps.shell\n      in:\n        cmd: ls | grep pipe; echo if you had something pipey it should show up;\n\nSee a worked example `for shell power here\n<https://github.com/pypyr/pypyr-example/tree/master/pipelines/shell.yaml>`__.\n\npypyr.steps.tar\n^^^^^^^^^^^^^^^\nArchive and/or extract tars with or without compression.\n\nAt least one of these context keys must exist:\n\n- tarExtract\n- tarArchive\n\nOptionally, you can also specify the tar compression format with\n``context['tarFormat']``. If not specified, defaults to *lzma/xz*\nAvailable options:\n\n- '' - no compression\n- gz (gzip)\n- bz2 (bzip2)\n- xz (lzma)\n\nThis step will run whatever combination of Extract and Archive you specify.\nRegardless of combination, execution order is Extract, Archive.\n\nNever extract archives from untrusted sources without prior inspection. It is\npossible that files are created outside of path, e.g. members that have\nabsolute filenames starting with \"/\" or filenames with two dots \"..\".\n\nSee a worked example `for tar here\n<https://github.com/pypyr/pypyr-example/tree/master/pipelines/tar.yaml>`__.\n\ntarExtract\n\"\"\"\"\"\"\"\"\"\"\n``context['tarExtract']`` must exist. It's a dictionary.\n\nkeys are the path to the tar to extract.\n\nvalues are the destination paths.\n\nYou can use {key} substitutions to format the string from context. See\n`Substitutions`_.\n\n.. code-block:: yaml\n\n  key1: here\n  key2: tar.xz\n  tarExtract:\n    - in: path/to/my.tar.xz\n      out: /path/extract/{key1}\n    - in: another/{key2}\n      out: .\n\nThis will:\n\n- Extract *path/to/my.tar.xz* to */path/extract/here*\n- Extract *another/tar.xz* to the current execution directory\n\n  - This is the directory you're running pypyr from, not the pypyr pipeline\n    working directory you set with the ``--dir`` flag.\n\ntarArchive\n\"\"\"\"\"\"\"\"\"\"\n``context['tarArchive']`` must exist. It's a dictionary.\n\nkeys are the paths to archive.\n\nvalues are the destination output paths.\n\nYou can use {key} substitutions to format the string from context. See\n`Substitutions`_.\n\n.. code-block:: yaml\n\n  key1: destination.tar.xz\n  key2: value2\n  tarArchive:\n    - in: path/{key2}/dir\n      out: path/to/{key1}\n    - in: another/my.file\n      out: ./my.tar.xz\n\nThis will:\n\n- Archive directory *path/value2/dir* to *path/to/destination.tar.xz*,\n- Archive file *another/my.file* to *./my.tar.xz*\n\n\nRoll your own step\n------------------\n.. code-block:: python\n\n  import logging\n\n\n  # getLogger will grab the parent logger context, so your loglevel and\n  # formatting will inherit correctly automatically from the pypyr core.\n  logger = logging.getLogger(__name__)\n\n\n  def run_step(context):\n      \"\"\"Run code in here. This shows you how to code a custom pipeline step.\n\n      :param context: dictionary-like type\n      \"\"\"\n      logger.debug(\"started\")\n      # you probably want to do some asserts here to check that the input context\n      # dictionary contains the keys and values you need for your code to work.\n      assert 'mykeyvalue' in context, (\"context['mykeyvalue'] must exist for my clever step.\")\n\n      # it's good form only to use .info and higher log levels when you must.\n      # For .debug() being verbose is very much encouraged.\n      logger.info(\"Your clever code goes here. . . \")\n\n      # Add or edit context items. These are available to any pipeline steps\n      # following this one.\n      context['existingkey'] = 'new value overwrites old value'\n      context['mynewcleverkey'] = 'new value'\n\n      logger.debug(\"done\")\n\non_success\n==========\non_success is a list of steps to execute in sequence. Runs when `steps:`\ncompletes successfully.\n\nYou can use built-in steps or code your own steps exactly like you would for\nsteps - it uses the same function signature.\n\non_failure\n==========\non_failure is a list of steps to execute in sequence. Runs when any of the\nabove hits an unhandled exception.\n\nIf on_failure encounters another exception while processing an exception, then\nboth that exception and the original cause exception will be logged.\n\nYou can use built-in steps or code your own steps exactly like you would for\nsteps - it uses the same function signature.\n\n*************\nSubstitutions\n*************\nstring interpolation\n====================\nYou can use substitution tokens, aka string interpolation, where specified for\ncontext items. This substitutes anything between {curly braces} with the\ncontext value for that key. This also works where you have dictionaries/lists\ninside dictionaries/lists. For example, if your context looked like this:\n\n.. code-block:: yaml\n\n  key1: down\n  key2: valleys\n  key3: value3\n  key4: \"Piping {key1} the {key2} wild\"\n\nThe value for ``key4`` will be \"Piping down the valleys wild\".\n\nEscape literal curly braces with doubles: {{ for {, }} for }\n\nIn json & yaml, curlies need to be inside quotes to make sure they parse as\nstrings. Especially watch in .yaml, where { as the first character of a key or\nvalue will throw a formatting error if it's not in quotes like this:\n*\"{key}\"*\n\nYou can also reference keys nested deeper in the context hierarchy, in cases\nwhere you have a dictionary that contains lists/dictionaries that might contain\nother lists/dictionaries and so forth.\n\n.. code-block:: yaml\n\n  root:\n    - list index 0\n    - key1: this is a value from a dict containing a list, which contains a dict at index 1\n      key2: key 2 value\n    - list index 1\n\nGiven the context above, you can use formatting expressions to access nested\nvalues like this:\n\n.. code-block:: text\n\n  '{root[0]}' = list index 0\n  '{root[1][key1]}' = this is a value from a dict containing a list, which contains a dict at index 1\n  '{root[1][key2]}' = key 2 value\n  '{root[2]}' = list index 1\n\n\nsic strings\n===========\nIf a string is NOT to have {substitutions} run on it, it's *sic erat scriptum*,\nor *sic* for short. This is handy especially when you are dealing with json\nas a string, rather than an actual json object, so you don't have to double\ncurly all the structural braces.\n\nA *sic* string looks like this:\n\n.. code-block:: text\n\n  [sic]\"<<your string literal here>>\"\n\nFor example:\n\n.. code-block:: text\n\n  [sic]\"piping {key} the valleys wild\"\n\nWill return \"piping {key} the valleys wild\" without attempting to substitute\n{key} from context. You can happily use \", ' or {} inside a ``[sic]\"\"`` string\nwithout escaping these any further. This makes sic strings ideal for strings\ncontaining json.\n\nSee a worked example `for substitutions here\n<https://github.com/pypyr/pypyr-example/tree/master/pipelines/substitutions.yaml>`__.\n\n********\nPlug-Ins\n********\nThe pypyr core is deliberately kept light so the dependencies are down to the\nminimum. I loathe installs where there\\'re a raft of extra deps that I don\\'t\nuse clogging up the system.\n\nWhere other libraries are requisite, you can selectively choose to add this\nfunctionality by installing a pypyr plug-in.\n\n+----------------------------+-------------------------------------------------+\n| | **boss pypyr plug-ins**  | **description**                                 |\n+----------------------------+-------------------------------------------------+\n| |pypyr-aws|                | Interact with the AWS sdk api. Supports all AWS |\n|                            | Client functions, such as S3, EC2, ECS & co.    |\n|                            | via the AWS low-level Client API.               |\n+----------------------------+-------------------------------------------------+\n| |pypyr-slack|              | Send messages to Slack                          |\n+----------------------------+-------------------------------------------------+\n\n**********************************\nTesting (for pypyr-cli developers)\n**********************************\nTesting without worrying about dependencies\n===========================================\nRun tox to test the packaging cycle inside a virtual env, plus run all tests:\n\n.. code-block:: bash\n\n  # just run tests\n  $ tox -e dev -- tests\n  # run tests, validate README.rst, run flake8 linter\n  $ tox -e stage -- tests\n\nIf tox takes too long\n=====================\nThe test framework is pytest. If you only want to run tests:\n\n.. code-block:: bash\n\n  $ pip install -e .[dev,test]\n\nDay-to-day testing\n==================\n- Tests live under */tests* (surprising, eh?). Mirror the directory structure of\n  the code being tested.\n- Prefix a test definition with *test_* - so a unit test looks like\n\n  .. code-block:: python\n\n    def test_this_should_totally_work():\n\n- To execute tests, from root directory:\n\n  .. code-block:: bash\n\n    pytest tests\n\n- For a bit more info on running tests:\n\n  .. code-block:: bash\n\n    pytest --verbose [path]\n\n- To execute a specific test module:\n\n  .. code-block:: bash\n\n    pytest tests/unit/arb_test_file.py\n\n**********\nThank yous\n**********\npypyr is fortunate to stand on the shoulders of a giant in the shape of the\nexcellent `ruamel.yaml <https://pypi.python.org/pypi/ruamel.yaml>`_ library by\nAnthon van der Neut for all yaml parsing and validation.\n\n**********\nContribute\n**********\nBugs\n====\nWell, you know. No one's perfect. Feel free to `create an issue\n<https://github.com/pypyr/pypyr-cli/issues/new>`_.\n\nContribute to the core cli\n==========================\nThe usual jazz - create an issue, fork, code, test, PR. It might be an idea to\ndiscuss your idea via the Issues list first before you go off and write a\nhuge amount of code - you never know, something might already be in the works,\nor maybe it's not quite right for the core-cli (you're still welcome to fork\nand go wild regardless, of course, it just mightn't get merged back in here).\n\nRoll your own plug-in\n=====================\nYou've probably noticed by now that pypyr is built to be pretty extensible.\nYou've probably also noticed that the core pypyr cli is deliberately kept light.\nThe core cli is philosophically only a way of running a sequence of steps.\nDependencies to external libraries should generally get their own package, so\nend-users can selectively install what they need rather than have a monolithic\nbatteries-included application.\n\nIf you've got some custom context_parser or steps code that are useful, create a\nrepo and bask in the glow of sharing with the open source community. Honor the\npypyr Apache license please.\n\nI generally name plug-ins `pypyr-myplugin`, where myplugin is likely some sort\nof dependency that you don't want in the pypyr core cli. For example,\n`pypyr-aws` contains pypyr-steps for the AWS boto3 library. This is kept separate\nso that you don't have to deal with yet another dependency you don't need if your\ncurrent project isn't using AWS.\n\nIf you want your plug-in listed here for official cred, please get in touch via\nthe Issues list. Get in touch anyway, would love to hear from you at\nhttps://www.345.systems/contact.\n\n.. |build-status| image:: https://api.shippable.com/projects/58efdfe130eb380700e559a6/badge?branch=master\n                    :alt: build status\n                    :target: https://app.shippable.com/github/pypyr/pypyr-cli\n\n.. |coverage| image:: https://api.shippable.com/projects/58efdfe130eb380700e559a6/coverageBadge?branch=master\n                :alt: coverage status\n                :target: https://app.shippable.com/github/pypyr/pypyr-cli\n\n.. |pypi| image:: https://badge.fury.io/py/pypyr.svg\n                :alt: pypi version\n                :target: https://pypi.python.org/pypi/pypyr/\n                :align: bottom\n\n.. |pypyr-aws| replace:: `pypyr-aws <https://github.com/pypyr/pypyr-aws/>`__\n\n.. |pypyr-slack| replace:: `pypyr-slack <https://github.com/pypyr/pypyr-slack/>`__",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pypyr/pypyr-cli",
    "keywords": "devops pipeline runner",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pypyr",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pypyr/",
    "release_url": "https://pypi.org/project/pypyr/0.5.12/",
    "requires_python": "",
    "summary": "pipeline runner command line to run pipelines defined in yaml",
    "version": "0.5.12"
  },
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5f540b4811013fa58b521503c80e4b7c",
          "sha256": "090271e7d223414ea1a3f67f651432edaf8699d994a6b7911a1c8b164b6f96eb"
        },
        "downloads": 17,
        "filename": "pypyr-0.0.10-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "5f540b4811013fa58b521503c80e4b7c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 18887,
        "upload_time": "2017-03-27T16:46:14",
        "url": "https://files.pythonhosted.org/packages/8c/b4/b42fdd266c5aefdbd87a076637950a29f6792eedd5d62f35fb1ada5708b8/pypyr-0.0.10-py3-none-any.whl"
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4c9f953d92e1c62b5217d4d942fd2827",
          "sha256": "909f22bc5b3eea71eba81084dd6c67c4edf86eb68b3c7fed43c301e5013046b3"
        },
        "downloads": 0,
        "filename": "pypyr-0.0.11-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "4c9f953d92e1c62b5217d4d942fd2827",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 32201,
        "upload_time": "2017-04-08T12:48:27",
        "url": "https://files.pythonhosted.org/packages/91/fa/e93f4ce43fb6f770e912e00bf6585b5252977fa12c5bb61a244bd1d8d599/pypyr-0.0.11-py3-none-any.whl"
      }
    ],
    "0.0.9": [],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b034b42e70741eaa2f8f21a9a6a592bb",
          "sha256": "f260aee66ffc19d6ab3fe96b5f9f4c613c595b7b15e36b31b4b917957d7f9ae8"
        },
        "downloads": 0,
        "filename": "pypyr-0.1.0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "b034b42e70741eaa2f8f21a9a6a592bb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 32181,
        "upload_time": "2017-04-08T13:06:31",
        "url": "https://files.pythonhosted.org/packages/d6/4e/c68dc47267fdb7590b7b8bac0ea0a6e5c70b976b36d0658efc402c62fff7/pypyr-0.1.0-py3-none-any.whl"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "29e8885b68faa95b4ceaf90227ea3ffc",
          "sha256": "97250bce8c8539cf0f8b47415eef1fd517c992a9988961b9008341a906633407"
        },
        "downloads": 0,
        "filename": "pypyr-0.1.1-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "29e8885b68faa95b4ceaf90227ea3ffc",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 32217,
        "upload_time": "2017-04-08T13:26:18",
        "url": "https://files.pythonhosted.org/packages/48/ac/de7f751170fd4aa9f0dd01298acecd3e1ef43abcabe7052a073a02362cfb/pypyr-0.1.1-py3-none-any.whl"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4c29403714eb94b10f2d9081472f4f55",
          "sha256": "24346847a1f588df0239b9bd975dc07e3913e399b26db1ecaa3061b869f09b48"
        },
        "downloads": 0,
        "filename": "pypyr-0.1.2-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "4c29403714eb94b10f2d9081472f4f55",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 34225,
        "upload_time": "2017-04-11T13:24:17",
        "url": "https://files.pythonhosted.org/packages/ac/2d/3d468dc2b4c1de9ab72341d497994dc7786d7d8694b125dc10c93ab991e2/pypyr-0.1.2-py3-none-any.whl"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eed1afed4de7a3407db6655e41f36ffb",
          "sha256": "7b19aca32e5052b6af8f46bfaae20b87606a38ea3c3a23d94430a7ef69bb6d00"
        },
        "downloads": 0,
        "filename": "pypyr-0.1.3-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "eed1afed4de7a3407db6655e41f36ffb",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 34921,
        "upload_time": "2017-04-11T21:22:25",
        "url": "https://files.pythonhosted.org/packages/d5/da/ff2a7d95794f71c0c196002c24d2bb037730a942d4a64400ec921223203c/pypyr-0.1.3-py3-none-any.whl"
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fbc9beec54dd6291efbf6809a97289fd",
          "sha256": "a8f8a7a162cdcfbc01b7b68ea2b1d21a975b1a19a6599e8c1bf3d8f3d356678c"
        },
        "downloads": 0,
        "filename": "pypyr-0.1.4-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "fbc9beec54dd6291efbf6809a97289fd",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 35007,
        "upload_time": "2017-04-12T09:43:25",
        "url": "https://files.pythonhosted.org/packages/c7/78/8377c2b63ffce11ac4eb84bafbd0329f9abdcdf023b7b39d1badd6adc59d/pypyr-0.1.4-py3-none-any.whl"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "99d8045a17d86118a8eaaf78586967a5",
          "sha256": "e16d11e900c8ebd2a878ed32a66f0af2bc1b112799a8bc8b772f105756011773"
        },
        "downloads": 0,
        "filename": "pypyr-0.1.5-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "99d8045a17d86118a8eaaf78586967a5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 36142,
        "upload_time": "2017-04-12T17:32:30",
        "url": "https://files.pythonhosted.org/packages/31/d1/d1e8643151de0a84dc16facc333ffd4017ee376aca1743fbf00ba68914fe/pypyr-0.1.5-py3-none-any.whl"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2d6eef8f7937643290ae4589abc364b1",
          "sha256": "2dc83f6c1a57c52bd9ce588e460ebe162aa3df9d398b5ee91e282c48364afd48"
        },
        "downloads": 0,
        "filename": "pypyr-0.2.0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "2d6eef8f7937643290ae4589abc364b1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 36286,
        "upload_time": "2017-04-13T10:10:48",
        "url": "https://files.pythonhosted.org/packages/2f/db/569a19eb3bb103aaa93f5efb093d87011d29499750078d39e1e76b451be0/pypyr-0.2.0-py3-none-any.whl"
      }
    ],
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2e31db5bf1157e9ecaabb3d47c3485b4",
          "sha256": "bd282edaf0ebf313056f338120898887d7e15d6bdf9684a2b4c1d6ba78cc5a1a"
        },
        "downloads": 0,
        "filename": "pypyr-0.2.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2e31db5bf1157e9ecaabb3d47c3485b4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 29114,
        "upload_time": "2017-04-18T15:08:23",
        "url": "https://files.pythonhosted.org/packages/4b/55/a380d8d55520e171b9af177f5a5574a841eaf902f41c563e3717dc13a976/pypyr-0.2.2-py3-none-any.whl"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a53561861968001be80a6053947b5628",
          "sha256": "53f06ae7b3db037bdff5dbb8a735d5c914c706592e82d51c345857b651d12811"
        },
        "downloads": 0,
        "filename": "pypyr-0.2.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a53561861968001be80a6053947b5628",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 29113,
        "upload_time": "2017-04-18T16:52:11",
        "url": "https://files.pythonhosted.org/packages/9f/6f/d99248611b58ef7f623bd0226e2a74307603455f89622e2beda0f7c24916/pypyr-0.2.3-py3-none-any.whl"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "49bc6645aac164b9b38b4b7a23877d23",
          "sha256": "45d921cf21da7b970b7e094a3062aa35c057cfc06cb5c7e48abf53aae35d2420"
        },
        "downloads": 0,
        "filename": "pypyr-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "49bc6645aac164b9b38b4b7a23877d23",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 35575,
        "upload_time": "2017-04-24T14:45:45",
        "url": "https://files.pythonhosted.org/packages/19/04/fc379488c9678ad33f420635d3c8a0183fcf8be48de4d88d8afdae754a99/pypyr-0.3.0-py3-none-any.whl"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "edd5ba2f5f4ee79fbb8cc6a2314f23e4",
          "sha256": "6d9eebc624ec8c173248c15ebff727695095c02f24d9bd37eb5134621094a3d5"
        },
        "downloads": 0,
        "filename": "pypyr-0.3.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "edd5ba2f5f4ee79fbb8cc6a2314f23e4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 35694,
        "upload_time": "2017-04-25T16:46:44",
        "url": "https://files.pythonhosted.org/packages/0b/fc/7c814902c03a71e50a7ab7624c6fa510aa209f8e5f3dc41593468a95eb8e/pypyr-0.3.1-py3-none-any.whl"
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d4d2d81a08207141bb0eb48e87faa165",
          "sha256": "81c4ac1ce222483af2b6e3f04b22e3be1853aaa52207bcb9394cc270b7045b39"
        },
        "downloads": 0,
        "filename": "pypyr-0.3.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "d4d2d81a08207141bb0eb48e87faa165",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 35987,
        "upload_time": "2017-04-26T09:38:32",
        "url": "https://files.pythonhosted.org/packages/75/08/8e528f1488eb1a32ace08caa05310d90e286bacca54fa19484b5486ad21b/pypyr-0.3.2-py3-none-any.whl"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8a0c219fb5329c661b971f6b1a4c8d28",
          "sha256": "6600466de4d886c226b23f2589f8d016c0cb4f3bd48e6ae6567c70667dc8f77d"
        },
        "downloads": 0,
        "filename": "pypyr-0.4.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a0c219fb5329c661b971f6b1a4c8d28",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 36356,
        "upload_time": "2017-04-27T18:37:04",
        "url": "https://files.pythonhosted.org/packages/36/b6/d56299d6db5dbfedc4cdf150074796e266313193be8c80e479dd6fecb1bc/pypyr-0.4.0-py3-none-any.whl"
      }
    ],
    "0.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5c3d682990790468c8716ed14eb7a2a1",
          "sha256": "d65e39a90cbb047f41966f73e0651ee142dd92932bd9f02caa704b1af5aa1550"
        },
        "downloads": 0,
        "filename": "pypyr-0.4.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c3d682990790468c8716ed14eb7a2a1",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 36821,
        "upload_time": "2017-04-28T08:41:31",
        "url": "https://files.pythonhosted.org/packages/85/47/561fb8fe73bf15f2eb304f08128e0b9fe7db046efd12c02faaa11f006c32/pypyr-0.4.1-py3-none-any.whl"
      }
    ],
    "0.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "41c12cd76542c713a212cdec02c9d7ef",
          "sha256": "bc3437546077caf83effe7cc287439face8004bcef0752d21858b8f50ea60a61"
        },
        "downloads": 0,
        "filename": "pypyr-0.5.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "41c12cd76542c713a212cdec02c9d7ef",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 37110,
        "upload_time": "2017-04-28T15:15:42",
        "url": "https://files.pythonhosted.org/packages/eb/67/d0feba65a07e6197dd5a7ea758c8211ecc12265e9a9c932b60723bf26b34/pypyr-0.5.0-py3-none-any.whl"
      }
    ],
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a3815d45e72dc15ff38d17d648f66865",
          "sha256": "caaac83a41c320856d618c265ed435e18e199e3c1d7d2d20e042454fa35b2e77"
        },
        "downloads": 0,
        "filename": "pypyr-0.5.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a3815d45e72dc15ff38d17d648f66865",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 42492,
        "upload_time": "2017-05-02T10:19:03",
        "url": "https://files.pythonhosted.org/packages/35/ac/f447921478724a1d5bf89091dc1e694df1e1d0ef3df5d22cc6dfc7f7662c/pypyr-0.5.1-py3-none-any.whl"
      }
    ],
    "0.5.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bfb5b07ba6da5e00212ecd8b5d8252f0",
          "sha256": "1b51151ff8ff5af5ab9ff72440ef09b4ac1ffcab7406afd073704412653e01c1"
        },
        "downloads": 0,
        "filename": "pypyr-0.5.10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "bfb5b07ba6da5e00212ecd8b5d8252f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 55650,
        "upload_time": "2017-06-02T14:51:29",
        "url": "https://files.pythonhosted.org/packages/fd/9a/8ca7ead35c395f32f3e4150e6add5838fc5207eddd5a7c39d0b89c6e0894/pypyr-0.5.10-py3-none-any.whl"
      }
    ],
    "0.5.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "28213c08c3b2e85f1ca08694ed21f92b",
          "sha256": "b7a480e2b258f1f8d2ad54d4b1eb71c0ee4bd7a568b17d22cfcf2cb831098c9e"
        },
        "downloads": 0,
        "filename": "pypyr-0.5.11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "28213c08c3b2e85f1ca08694ed21f92b",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 55677,
        "upload_time": "2017-06-05T07:44:52",
        "url": "https://files.pythonhosted.org/packages/69/f9/3cb4012b1a0cbdfb8250563d751b989bd4b88f8df85876f04565972260da/pypyr-0.5.11-py3-none-any.whl"
      }
    ],
    "0.5.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3ab0c91c4b0af746c8962edb5bdb89f0",
          "sha256": "e227cf927447080194481b676652f943e46680395aa0b318f5421a6238fd6289"
        },
        "downloads": 0,
        "filename": "pypyr-0.5.12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3ab0c91c4b0af746c8962edb5bdb89f0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 58158,
        "upload_time": "2017-06-08T09:28:53",
        "url": "https://files.pythonhosted.org/packages/33/07/543a1d488bb2d8d54203b830c4a1fde6dc819be7aa9de92a7159c9078ca3/pypyr-0.5.12-py3-none-any.whl"
      }
    ],
    "0.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f05d656c202b8d88493ada85470a46fe",
          "sha256": "b22bc95a44eb005861be49a48fcf72ded3fc7b9440b5e3da59645731307bd9e1"
        },
        "downloads": 0,
        "filename": "pypyr-0.5.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f05d656c202b8d88493ada85470a46fe",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 43326,
        "upload_time": "2017-05-04T16:29:21",
        "url": "https://files.pythonhosted.org/packages/0c/40/33ee2d7adcc5875d74386fe12ff1fe3c7eaa3bf1596ea6f88b53e534c3e6/pypyr-0.5.2-py3-none-any.whl"
      }
    ],
    "0.5.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7e9af368429fb54b2bc6a5d62f5e273c",
          "sha256": "b2a6b819af96c613cb21ddf0d14594c4290cf79160c774fc65b12a02d811455f"
        },
        "downloads": 0,
        "filename": "pypyr-0.5.3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e9af368429fb54b2bc6a5d62f5e273c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 45979,
        "upload_time": "2017-05-12T13:03:41",
        "url": "https://files.pythonhosted.org/packages/3a/70/2b77a99825ffe0e94110df8dec242478d8f4aa90d5345a88250f15afaa62/pypyr-0.5.3-py3-none-any.whl"
      }
    ],
    "0.5.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "62baab38f0ee04811300cc1cba253c7e",
          "sha256": "5495243a6116e34aed1b92f1c6a486a36135f6710d20c64eeb5e583f1f025a82"
        },
        "downloads": 0,
        "filename": "pypyr-0.5.4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "62baab38f0ee04811300cc1cba253c7e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 52914,
        "upload_time": "2017-05-15T10:47:54",
        "url": "https://files.pythonhosted.org/packages/96/9a/a79ba1d9a50307e09e72cf36bd5d066ef1d3462f617ea49e4c095b1ce431/pypyr-0.5.4-py3-none-any.whl"
      }
    ],
    "0.5.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "17c2410cef3fa3cf670225c1f10872a7",
          "sha256": "6462e902fe1ff95707ffbc8a21f6ea9c4e568245afc6480d23e2c9fc03f32a8f"
        },
        "downloads": 0,
        "filename": "pypyr-0.5.5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "17c2410cef3fa3cf670225c1f10872a7",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 54393,
        "upload_time": "2017-05-26T14:58:42",
        "url": "https://files.pythonhosted.org/packages/e2/a1/9588de3ccfe8473857abe3fcfd97072945098d77aa314af8b5efb5e0f222/pypyr-0.5.5-py3-none-any.whl"
      }
    ],
    "0.5.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e3f94df641346b81ada09f2654c5d81a",
          "sha256": "e9d06bbd481c123bd47c73ac3dfe4e2429e7224926fd0270a37807a4c694250e"
        },
        "downloads": 0,
        "filename": "pypyr-0.5.6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "e3f94df641346b81ada09f2654c5d81a",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 54628,
        "upload_time": "2017-05-30T10:19:25",
        "url": "https://files.pythonhosted.org/packages/3a/35/cb37d71ec118c68838482284a6fcfc40b5bde1449f9cff9a30296afcff32/pypyr-0.5.6-py3-none-any.whl"
      }
    ],
    "0.5.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6d2780e690a6659f93f1554850ae61da",
          "sha256": "69e8cff6857ce1595cb5972d92a733544c82d55ce53ea6a1c255b57cdef8aa48"
        },
        "downloads": 0,
        "filename": "pypyr-0.5.7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d2780e690a6659f93f1554850ae61da",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 54708,
        "upload_time": "2017-06-01T14:47:36",
        "url": "https://files.pythonhosted.org/packages/bb/ff/1c19dc1da28b20e44d987d883fab39a7d237fc940401f5c9fea5608b1926/pypyr-0.5.7-py3-none-any.whl"
      }
    ],
    "0.5.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "66b47503e7f3f40a9225fe2d34c16eda",
          "sha256": "585dcf3ff203a34ed894acf7a32d57d59c300ac388983315f60d8b6fc503ec24"
        },
        "downloads": 0,
        "filename": "pypyr-0.5.8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "66b47503e7f3f40a9225fe2d34c16eda",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 54708,
        "upload_time": "2017-06-01T16:21:56",
        "url": "https://files.pythonhosted.org/packages/8e/04/11bf206f29f396e45bcf4f8789c80fcd42d3672fac2aabf6eaf39122acbe/pypyr-0.5.8-py3-none-any.whl"
      }
    ],
    "0.5.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6ec7039f5887dd090993f2c228c2d0d5",
          "sha256": "cc100e53f79a11737569e7056b2d18274e647bb93dc209ca2281ec46aed71588"
        },
        "downloads": 0,
        "filename": "pypyr-0.5.9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6ec7039f5887dd090993f2c228c2d0d5",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 55635,
        "upload_time": "2017-06-01T17:13:09",
        "url": "https://files.pythonhosted.org/packages/56/5c/3ef14b0ad2efe02f60b50708762a654665ee0926d3876d51cf28aa07a2d3/pypyr-0.5.9-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "3ab0c91c4b0af746c8962edb5bdb89f0",
        "sha256": "e227cf927447080194481b676652f943e46680395aa0b318f5421a6238fd6289"
      },
      "downloads": 0,
      "filename": "pypyr-0.5.12-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "3ab0c91c4b0af746c8962edb5bdb89f0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 58158,
      "upload_time": "2017-06-08T09:28:53",
      "url": "https://files.pythonhosted.org/packages/33/07/543a1d488bb2d8d54203b830c4a1fde6dc819be7aa9de92a7159c9078ca3/pypyr-0.5.12-py3-none-any.whl"
    }
  ]
}