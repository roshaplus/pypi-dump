{
  "info": {
    "author": "Claudio J. Tessone",
    "author_email": "claudio.tessone@uzh.ch",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: End Users/Desktop",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering",
      "Topic :: Scientific/Engineering :: Information Analysis",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "PySPG is a set of python classes aimed to those of you that must (or wish to)\nrun programs in which some parameters change.\n\nFor example: Let's suppose you want to run simulations in which three\nparameters are involved, let's say D, k, a. These are some possible scenarios\n\nYou want to run a simulation in which D, k are kept fixed while a linearly\nchanges between (eeeer...) 0 and 5 with a step of 0.2. It's really easy: in the\nlanguage of your choice you write a program that performs the simulation and\nbefore and after the important part of a simulation, you just add a loop on the\na variable. Now you are done But after that, you want to keep fixed D. Now both\nk and a vary linearly between 0 and 5 with a step of 0.2. It's easy once again:\nyou just add an external loop on the k variable. And you're done again. But\nnote that you had to recompile your code without changing the important part of\nyour code: The simulation.\n\nAfter those simulations you realise that the scale relevant for the variable a\nis not a linear one, but logarithmic. Although the change is easy, you must\nrecompile.  And if you want to run a simulation in which the variation is on D\nvariable? Obviously compile the whole thing again...\nAnd if the variation must be exponential???\n...\n\nWell, perhaps you do not have to recompile if you program in an interpreted\nlanguage. But what you are doing is touch on, and on, and on again your source\ncode. The probability of doing something weird increases.\n\nThe only relevant information your program returns is the measures for each\nparameter set. The parameter variation is something subsidiary of the main\npoint of the program, that is performing measures. The values of the variables\ncan be set from outside. And this is the point of PySPG.\n\nWith PySPG you can extract one layer of complexity from your compiled code. For\nlong simulations, is obvious that the time your program takes to run is NOT in\nthe loops of changing parameters. In this way, you can avoid the problem of\nwriting boring code and just write a simple text file that will launch the\nother program for you.\n\nPySPG generates a directory hierarchy that allows you to easily navigate your\ndata.\n\nIs it all?\n\nNo. Although not so well documented yet, PySPG also features a generator of\nplots for your simulations. It can automatically generate 2D-plots in the\nformat of Grace, and for a future version, a 3D utility is planned. Also an\nautomatic report generator (TeX-based) is half-done. And it is GPL'd, so you\ncan extend it as much as you wish.\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/tessonec/PySPG",
    "keywords": "simulations parameters optimisation",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PySPG",
    "platform": "",
    "project_url": "https://pypi.org/project/PySPG/",
    "release_url": "https://pypi.org/project/PySPG/4.0.0/",
    "requires_python": "",
    "summary": "Python Systematic Parameter Generator",
    "version": "4.0.0"
  },
  "releases": {
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "df50feef95eccb4372ed3c5abf101ecb",
          "sha256": "5a562f6d7a5009d0f427c04beedbef505a2fe35f769e50d5a8126e7e6dce0cfd"
        },
        "downloads": 0,
        "filename": "PySPG-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "df50feef95eccb4372ed3c5abf101ecb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45485,
        "upload_time": "2017-06-03T18:54:06",
        "url": "https://files.pythonhosted.org/packages/b3/d9/c167b4e78476408f18e46eb58fa7708fdbab99f857d0f1a753382031d443/PySPG-2.0.1.tar.gz"
      }
    ],
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0d8f06b7cdab33713c6d27f17b5da51f",
          "sha256": "b34eb708d8602785127d1e2d9bcf1402095feb73daedb218ec3db5df823e9628"
        },
        "downloads": 0,
        "filename": "PySPG-4.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0d8f06b7cdab33713c6d27f17b5da51f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 45495,
        "upload_time": "2017-06-03T19:04:46",
        "url": "https://files.pythonhosted.org/packages/44/f0/aa8e03db27fde162493fb0da53d902310dbbeff49cbe750b0249451eab6f/PySPG-4.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0d8f06b7cdab33713c6d27f17b5da51f",
        "sha256": "b34eb708d8602785127d1e2d9bcf1402095feb73daedb218ec3db5df823e9628"
      },
      "downloads": 0,
      "filename": "PySPG-4.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0d8f06b7cdab33713c6d27f17b5da51f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 45495,
      "upload_time": "2017-06-03T19:04:46",
      "url": "https://files.pythonhosted.org/packages/44/f0/aa8e03db27fde162493fb0da53d902310dbbeff49cbe750b0249451eab6f/PySPG-4.0.0.tar.gz"
    }
  ]
}