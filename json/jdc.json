{
  "info": {
    "author": "Alex Hagen",
    "author_email": "alexhagen6@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy"
    ],
    "description": "# jdc - Jupyter Dynamic Classes\n\n*Alex Hagen*\n\n``jdc`` is a Jupyter magic made to solve a very specific problem: that sometimes\nyou want to define classes dynamically in Jupyter notebooks, and you want it to\nlook good.  On\n[Jupyter's Github](https://github.com/jupyter/notebook/issues/1243) there's a\nlengthy discussion and wider view of this issue, but I've implemented a quickfix\nwhich I think ended up looking pretty semantic.  Thanks to\n[Igor Sobreira](http://igorsobreira.com/2011/02/06/adding-methods-dynamically-in-python.html)\nfor the underlying IPython.\n\nThe example below will be most informative, but basically all ``jdc`` allows you\nto do is to add a cell and define\n\n```python\n%%add_to our_class\ndef our_function(self, our_variable):\n  print our_variable\n```\n\nand that will add the method ``our_function`` to ``our_class``, whether\n``our_class`` is a class, or an object with a class type.\n\n<div class=\"cell border-box-sizing text_cell rendered\">\n\n<div class=\"prompt input_prompt\">\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n\nExample[\u00c2\u00b6](#Example){.anchor-link} {#Example}\n===================================\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing text_cell rendered\">\n\n<div class=\"prompt input_prompt\">\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n\nBelow is an example on how to use `jdc`. First we have to import the\nclass:\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing code_cell rendered\">\n\n<div class=\"input\">\n\n<div class=\"prompt input_prompt\">\n\nIn\u00a0\\[1\\]:\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"input_area\">\n\n<div class=\"highlight hl-ipython2\">\n\n    import jdc\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing text_cell rendered\">\n\n<div class=\"prompt input_prompt\">\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n\nThen, we have to make a dummy class:\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing code_cell rendered\">\n\n<div class=\"input\">\n\n<div class=\"prompt input_prompt\">\n\nIn\u00a0\\[2\\]:\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"input_area\">\n\n<div class=\"highlight hl-ipython2\">\n\n    class dog(object):\n        def __init__(self, name, noise):\n            self.name = name\n            self.noise = noise\n\n\n    rover = dog('Rover', 'ruff')\n    spot = dog('Spot', 'woof')\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing text_cell rendered\">\n\n<div class=\"prompt input_prompt\">\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n\nThen, we want to add a function to that class:\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing code_cell rendered\">\n\n<div class=\"input\">\n\n<div class=\"prompt input_prompt\">\n\nIn\u00a0\\[3\\]:\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"input_area\">\n\n<div class=\"highlight hl-ipython2\">\n\n    %%add_to dog\n    def bark(self, times=1):\n        saying = ('%s ' % self.noise) * times\n        print \"%s says: %s\" % (self.name, saying)\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing text_cell rendered\">\n\n<div class=\"prompt input_prompt\">\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n\nAnd now we can access that function from any method of that class.\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing code_cell rendered\">\n\n<div class=\"input\">\n\n<div class=\"prompt input_prompt\">\n\nIn\u00a0\\[4\\]:\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"input_area\">\n\n<div class=\"highlight hl-ipython2\">\n\n    rover.bark(1)\n    spot.bark(2)\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"output_wrapper\">\n\n<div class=\"output\">\n\n<div class=\"output_area\">\n\n<div class=\"prompt\">\n\n</div>\n\n<div class=\"output_subarea output_stream output_stdout output_text\">\n\n    Rover says: ruff \n    Spot says: woof woof \n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing text_cell rendered\">\n\n<div class=\"prompt input_prompt\">\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n\nIf we want to add a function to only one object of that class, we can do\nthat, as well:\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing code_cell rendered\">\n\n<div class=\"input\">\n\n<div class=\"prompt input_prompt\">\n\nIn\u00a0\\[5\\]:\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"input_area\">\n\n<div class=\"highlight hl-ipython2\">\n\n    %%add_to spot\n    def sit(self):\n        print '%s is now sitting' % self.name\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing code_cell rendered\">\n\n<div class=\"input\">\n\n<div class=\"prompt input_prompt\">\n\nIn\u00a0\\[6\\]:\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"input_area\">\n\n<div class=\"highlight hl-ipython2\">\n\n    spot.sit()\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"output_wrapper\">\n\n<div class=\"output\">\n\n<div class=\"output_area\">\n\n<div class=\"prompt\">\n\n</div>\n\n<div class=\"output_subarea output_stream output_stdout output_text\">\n\n    Spot is now sitting\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing text_cell rendered\">\n\n<div class=\"prompt input_prompt\">\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n\nNote that the function added to a class object is only available to that\nobject, not all objects of that class:\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing code_cell rendered\">\n\n<div class=\"input\">\n\n<div class=\"prompt input_prompt\">\n\nIn\u00a0\\[7\\]:\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"input_area\">\n\n<div class=\"highlight hl-ipython2\">\n\n    try: \n        rover.sit()\n    except AttributeError:\n        print \"%s doesn't know that trick\" % rover.name\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"output_wrapper\">\n\n<div class=\"output\">\n\n<div class=\"output_area\">\n\n<div class=\"prompt\">\n\n</div>\n\n<div class=\"output_subarea output_stream output_stdout output_text\">\n\n    Rover doesn't know that trick\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing text_cell rendered\">\n\n<div class=\"prompt input_prompt\">\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n\nAnd if we're writing a lot of code, we can now do that in a single cell.\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing code_cell rendered\">\n\n<div class=\"input\">\n\n<div class=\"prompt input_prompt\">\n\nIn\u00a0\\[8\\]:\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"input_area\">\n\n<div class=\"highlight hl-ipython2\">\n\n    %%add_to spot\n    def rollover(self):\n        print \"%s rolled over\" % self.name\n\n    def highfive(self):\n        print \"%s is trying to high five you\" % self.name\n\n    def domytaxes(self):\n        print \"%s is just showing off now\" % self.name\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing code_cell rendered\">\n\n<div class=\"input\">\n\n<div class=\"prompt input_prompt\">\n\nIn\u00a0\\[9\\]:\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"input_area\">\n\n<div class=\"highlight hl-ipython2\">\n\n    spot.rollover()\n    spot.highfive()\n    spot.domytaxes()\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"output_wrapper\">\n\n<div class=\"output\">\n\n<div class=\"output_area\">\n\n<div class=\"prompt\">\n\n</div>\n\n<div class=\"output_subarea output_stream output_stdout output_text\">\n\n    Spot rolled over\n    Spot is trying to high five you\n    Spot is just showing off now\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n</div>\n\n<div class=\"cell border-box-sizing text_cell rendered\">\n\n<div class=\"prompt input_prompt\">\n\n</div>\n\n<div class=\"inner_cell\">\n\n<div class=\"text_cell_render border-box-sizing rendered_html\">\n\nand that's it.\n\n</div>\n\n</div>\n\n</div>\n\n## Installation\n\nRight now, installation should now work through PyPI:\n\n```bash\n\npip install jdc\n\n```\n\nPlease open up an issue if it doesn't work, I'll fix it!\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/alexhagen/jdc",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "jdc",
    "platform": "",
    "project_url": "https://pypi.org/project/jdc/",
    "release_url": "https://pypi.org/project/jdc/0.0.5/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Dynamic classes for Jupyter/IPython notebooks.",
    "version": "0.0.5"
  },
  "releases": {
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cbb9450f9f14c93b0ffccdaa4132895e",
          "sha256": "4c11a2f10cacbb7ce4d36cb81364d4447fd03d70d38d462b34fc7e98979cdd44"
        },
        "downloads": 0,
        "filename": "jdc-0.0.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "cbb9450f9f14c93b0ffccdaa4132895e",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 5779,
        "upload_time": "2017-10-03T18:12:59",
        "url": "https://files.pythonhosted.org/packages/b9/81/671bea83659c6e8a3db557cb21b46db80ee43e2d86770a32ed93198bdf85/jdc-0.0.5-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1fcbae58f2e83a79d326fa23d31e0c33",
          "sha256": "dd39fbfee8d91777898e7b9307bf61cc2fcac40be3101e367c4c8ba144f00497"
        },
        "downloads": 0,
        "filename": "jdc-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "1fcbae58f2e83a79d326fa23d31e0c33",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5459,
        "upload_time": "2017-10-03T18:13:02",
        "url": "https://files.pythonhosted.org/packages/ab/fd/e9f153486896357523f0bb3485f59fc3a34363ae746c55e1c3d9c4b49e52/jdc-0.0.5.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "cbb9450f9f14c93b0ffccdaa4132895e",
        "sha256": "4c11a2f10cacbb7ce4d36cb81364d4447fd03d70d38d462b34fc7e98979cdd44"
      },
      "downloads": 0,
      "filename": "jdc-0.0.5-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "cbb9450f9f14c93b0ffccdaa4132895e",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 5779,
      "upload_time": "2017-10-03T18:12:59",
      "url": "https://files.pythonhosted.org/packages/b9/81/671bea83659c6e8a3db557cb21b46db80ee43e2d86770a32ed93198bdf85/jdc-0.0.5-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "1fcbae58f2e83a79d326fa23d31e0c33",
        "sha256": "dd39fbfee8d91777898e7b9307bf61cc2fcac40be3101e367c4c8ba144f00497"
      },
      "downloads": 0,
      "filename": "jdc-0.0.5.tar.gz",
      "has_sig": false,
      "md5_digest": "1fcbae58f2e83a79d326fa23d31e0c33",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5459,
      "upload_time": "2017-10-03T18:13:02",
      "url": "https://files.pythonhosted.org/packages/ab/fd/e9f153486896357523f0bb3485f59fc3a34363ae746c55e1c3d9c4b49e52/jdc-0.0.5.tar.gz"
    }
  ]
}