{
  "info": {
    "author": "Andrew Rabert",
    "author_email": "arabert@nullsum.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python :: 3"
    ],
    "description": "consumers\n=========\n\n.. image:: https://img.shields.io/pypi/v/consumers.svg\n    :target: https://pypi.python.org/pypi/consumers\n\n.. image:: https://img.shields.io/pypi/l/consumers.svg\n    :target: https://pypi.python.org/pypi/consumers\n\nConsumers is a simple, flexible way to parallelize processing in Python.\n\nExamples\n--------\n\nDistributing work accross separate consumer instances.\n\n.. code:: python\n\n    from consumers import Consumer, Queue\n\n\n    class SumConsumer(Consumer):\n        def initialize(self):\n            self.sum = 0\n\n        def process(self, num):\n            self.sum += num\n\n        def shutdown(self):\n            print('Sum', self.sum)\n\n\n    with Queue(SumConsumer) as queue:\n        for i in range(5):\n            queue.put(i)\n\n\nA system with two virtual CPUs will output two results.\n\n::\n\n    Sum 4\n    Sum 6\n\n\nOrchestration\n^^^^^^^^^^^^^\n\nOrchestrating multiple types of consumers to achieve a single solution.\n\n.. code:: python\n\n    import logging\n\n    from consumers import Consumer, Queue\n\n    logging.basicConfig(level=logging.INFO)\n\n\n    class SquareConsumer(Consumer):\n        def initialize(self, sum_queue):\n            self.sum_queue = sum_queue\n\n        def process(self, num):\n            square = num * num\n            self.logger.info('Square of %d is %d', num, square)\n            self.sum_queue.put(square)\n\n\n    class SumConsumer(Consumer):\n        def initialize(self):\n            self.sum = 0\n\n        def process(self, num):\n            self.logger.info('Processing %s', num)\n            self.sum += num\n\n        def shutdown(self):\n            self.logger.info('Sum %d', self.sum)\n\n\n    sum_queue = Queue(SumConsumer, quantity=1)\n    square_queue = Queue(SquareConsumer(sum_queue))\n\n    with sum_queue, square_queue:\n        for i in range(5):\n            square_queue.put(i)\n\n\nA system with two virtual CPUs will output log entries for two instances of\n``SquareConsumer`` and one instance of ``SumConsumer``.\n\n::\n\n    INFO:SquareConsumer-2:Square of 1 is 1\n    INFO:SumConsumer-1:Processing 0\n    INFO:SumConsumer-1:Processing 1\n    INFO:SquareConsumer-1:Square of 2 is 4\n    INFO:SquareConsumer-2:Square of 3 is 9\n    INFO:SumConsumer-1:Processing 4\n    INFO:SumConsumer-1:Processing 9\n    INFO:SquareConsumer-1:Square of 4 is 16\n    INFO:SumConsumer-1:Processing 16\n    INFO:SumConsumer-1:Sum 30\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/nvllsvm/consumers",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "consumers",
    "platform": "",
    "project_url": "https://pypi.org/project/consumers/",
    "release_url": "https://pypi.org/project/consumers/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A simple, flexible way to parallelize processing in Python.",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b67374c35dcb454be5bdad5118d51ea6",
          "sha256": "2b16f7551e5ff9c40984b69a74ab945a03fbfdff461e54e1f842076ded57772b"
        },
        "downloads": -1,
        "filename": "consumers-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b67374c35dcb454be5bdad5118d51ea6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 5043,
        "upload_time": "2018-01-21T06:28:53",
        "url": "https://files.pythonhosted.org/packages/20/76/2d8b03ef6e6523206e9cbc0e16b4537da1349242a0ee8926b2547f137ad4/consumers-0.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "61213783522a4db77967a4c390fa6103",
          "sha256": "e95561a86605902867e84bd77740a56e28732c6d06419d896a2ff00d1c761306"
        },
        "downloads": -1,
        "filename": "consumers-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "61213783522a4db77967a4c390fa6103",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3173,
        "upload_time": "2018-01-21T06:28:54",
        "url": "https://files.pythonhosted.org/packages/2e/3f/71e28b6a55f72cabf80dc7ba09e1210e397ea4c67b667e00a3465814b8a1/consumers-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b67374c35dcb454be5bdad5118d51ea6",
        "sha256": "2b16f7551e5ff9c40984b69a74ab945a03fbfdff461e54e1f842076ded57772b"
      },
      "downloads": -1,
      "filename": "consumers-0.1.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b67374c35dcb454be5bdad5118d51ea6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 5043,
      "upload_time": "2018-01-21T06:28:53",
      "url": "https://files.pythonhosted.org/packages/20/76/2d8b03ef6e6523206e9cbc0e16b4537da1349242a0ee8926b2547f137ad4/consumers-0.1.0-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "61213783522a4db77967a4c390fa6103",
        "sha256": "e95561a86605902867e84bd77740a56e28732c6d06419d896a2ff00d1c761306"
      },
      "downloads": -1,
      "filename": "consumers-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "61213783522a4db77967a4c390fa6103",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3173,
      "upload_time": "2018-01-21T06:28:54",
      "url": "https://files.pythonhosted.org/packages/2e/3f/71e28b6a55f72cabf80dc7ba09e1210e397ea4c67b667e00a3465814b8a1/consumers-0.1.0.tar.gz"
    }
  ]
}