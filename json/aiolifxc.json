{
  "info": {
    "author": "Brian May",
    "author_email": "brian@linuxpenguins.xyz",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "========\naiolifxc\n========\n\n.. image:: https://img.shields.io/pypi/v/aiolifxc.svg\n        :target: https://pypi.python.org/pypi/aiolifxc\n\n.. image:: https://img.shields.io/travis/brianmay/aiolifxc.svg\n        :target: https://travis-ci.org/brianmay/aiolifxc\n\n.. image:: https://readthedocs.org/projects/aiolifxc/badge/?version=latest\n        :target: https://aiolifxc.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n.. image:: https://pyup.io/repos/github/brianmay/aiolifxc/shield.svg\n     :target: https://pyup.io/repos/github/brianmay/aiolifxc/\n     :alt: Updates\n\naiolifxc is a Python 3/asyncio library to control Lifx LED lightbulbs over your LAN.\n\nMost of it was originally taken from\n`Meghan Clarkk lifxlan package <https://github.com/mclarkk>`_\nand adapted to Python 3 (and asyncio obviously)\n\nThis is a fork from\n`Fran\u00e7ois Wautier's package <https://github.com/frawau/aiolifx>`_.\nIt uses coroutines as opposed to callbacks. If you prefer callbacks,\nplease see his implementation instead. This was forked from version 0.5.0.\n\nThis should be considered Alpha status. While it works, and seems to work\nwell, there are still changes I wish to make that may break the API.\n\nInstallation\n------------\n\nWe are on PyPi so::\n\n     pip3 install aiolifx\n\nor::\n\n     python3 -m pip install aiolifx\n\nNOTE: When installing with Python 3.4, the installation produce an error message\n      (syntax error). This can be safely ignored. \n\n\nHow to use\n----------\n\nEssentially, you create an object with at least 2 methods:\n\n    - register\n    - unregister\n\nYou then start the LifxDiscovery task in asyncio. It will register any new light it finds.\nAll the method communicating with the bulb can be passed a callback function to react to \nthe bulb response. The callback should take 2 parameters:\n\n    - a light object\n    - the response message\n\n\nThe easiest way is to look at the file in the examples directory. \"Wifi\" and \"Uptime\" use\na callback to print the info when it is returned.\n\nIn essence, the test program is this::\n\n    class bulbs():\n    \"\"\" A simple class with a register and  unregister methods\n    \"\"\"\n        def __init__(self):\n            self.bulbs=[]\n\n        def register(self,bulb):\n            self.bulbs.append(bulb)\n\n        def unregister(self,bulb):\n            idx=0\n            for x in list([ y.mac_addr for y in self.bulbs]):\n                if x == bulb.mac_addr:\n                    del(self.bulbs[idx])\n                    break\n                idx+=1\n\n    def readin():\n    \"\"\"Reading from stdin and displaying menu\"\"\"\n\n        selection = sys.stdin.readline().strip(\"\\n\")\n        DoSomething()\n\n    MyBulbs= bulbs()\n    loop = aio.get_event_loop()\n    coro = loop.create_datagram_endpoint(\n                partial(alix.LifxDiscovery,loop, MyBulbs), local_addr=('0.0.0.0', UDP_BROADCAST_PORT))\n    try:\n        loop.add_reader(sys.stdin,readin)\n        server = loop.create_task(coro)\n        loop.run_forever()\n    except:\n        pass\n    finally:\n        server.cancel()\n        loop.remove_reader(sys.stdin)\n        loop.close()\n\nOther things worth noting:\n\n    -  Whilst LifxDiscover uses UDP broadcast, the bulbs are\n       connected with Unicast UDP\n\n    - The socket connecting to a bulb is not closed unless the bulb is deemed to have\n      gone the way of the Dodo. I've been using that for days with no problem\n\n    - You can select to used IPv6 connection to the bulbs by passing an\n      IPv6 prefix to LifxDiscover. It's only been tried with /64 prefix.\n      If you want to use a /48 prefix, add \":\" (colon) at the end of the \n      prefix and pray. (This means 2 colons at the end!)\n\n    - I only have Original 1000, so I could not test with other types\n      of bulbs\n\n    - Unlike in lifxlan, set_waveform takes a dictionary with the right \n      keys instead of all those parameters\n\n\n=======\nHistory\n=======\n\n0.5.1 (2017-06-26)\n------------------\n\n* Initial version after fork from https://github.com/frawau/aiolifx\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/brianmay/aiolifx",
    "keywords": "lifx",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "aiolifxc",
    "platform": "",
    "project_url": "https://pypi.org/project/aiolifxc/",
    "release_url": "https://pypi.org/project/aiolifxc/0.5.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "API for local communication with LIFX devices over a LAN with asyncio.",
    "version": "0.5.1"
  },
  "releases": {
    "0.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "634199bc3990c95103f37807c979ad1c",
          "sha256": "cc8bf5750398a7a97a8c480d30f5cc458e0585ceda8de1eac75674a14624117c"
        },
        "downloads": 0,
        "filename": "aiolifxc-0.5.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "634199bc3990c95103f37807c979ad1c",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 23904,
        "upload_time": "2017-06-26T10:49:19",
        "url": "https://files.pythonhosted.org/packages/33/49/c953af3476ea42beca27012d40a8a40a69c02201df50f073e8b145d7cce7/aiolifxc-0.5.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f173e95594bcf27335744dd97b9cd3df",
          "sha256": "7ec1c6aee0e522ac643fca780e682342d7bb6313bd83ad844395d8a5477136df"
        },
        "downloads": 0,
        "filename": "aiolifxc-0.5.1.tar.gz",
        "has_sig": true,
        "md5_digest": "f173e95594bcf27335744dd97b9cd3df",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23263,
        "upload_time": "2017-06-26T10:49:16",
        "url": "https://files.pythonhosted.org/packages/40/d0/6ce333a966a2fee3fd0fc27d15a9baf44e9cad8787165eb52252bfbe9a51/aiolifxc-0.5.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "634199bc3990c95103f37807c979ad1c",
        "sha256": "cc8bf5750398a7a97a8c480d30f5cc458e0585ceda8de1eac75674a14624117c"
      },
      "downloads": 0,
      "filename": "aiolifxc-0.5.1-py2.py3-none-any.whl",
      "has_sig": true,
      "md5_digest": "634199bc3990c95103f37807c979ad1c",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 23904,
      "upload_time": "2017-06-26T10:49:19",
      "url": "https://files.pythonhosted.org/packages/33/49/c953af3476ea42beca27012d40a8a40a69c02201df50f073e8b145d7cce7/aiolifxc-0.5.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "f173e95594bcf27335744dd97b9cd3df",
        "sha256": "7ec1c6aee0e522ac643fca780e682342d7bb6313bd83ad844395d8a5477136df"
      },
      "downloads": 0,
      "filename": "aiolifxc-0.5.1.tar.gz",
      "has_sig": true,
      "md5_digest": "f173e95594bcf27335744dd97b9cd3df",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 23263,
      "upload_time": "2017-06-26T10:49:16",
      "url": "https://files.pythonhosted.org/packages/40/d0/6ce333a966a2fee3fd0fc27d15a9baf44e9cad8787165eb52252bfbe9a51/aiolifxc-0.5.1.tar.gz"
    }
  ]
}