{
  "info": {
    "author": "Sean Dague",
    "author_email": "sean@dague.net",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "=======\nmychevy\n=======\n\n\n.. image:: https://img.shields.io/pypi/v/mychevy.svg\n        :target: https://pypi.python.org/pypi/mychevy\n\n.. image:: https://img.shields.io/travis/sdague/mychevy.svg\n        :target: https://travis-ci.org/sdague/mychevy\n\n.. image:: https://readthedocs.org/projects/mychevy/badge/?version=latest\n        :target: https://mychevy.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n.. image:: https://pyup.io/repos/github/sdague/mychevy/shield.svg\n     :target: https://pyup.io/repos/github/sdague/mychevy/\n     :alt: Updates\n\n\nPython interface to My Chevy website via Selenium\n\nUnlike Tesla, GM does not provide a consumer level API to their vehicles. I\ntried to sign up for their developer program after purchasing my Chevy Bolt,\nbut so far it's all been black holed. They do provide a useful My Chevy\nwebsite, where you can log in with your OnStar credentials and see things like\nhow charged your battery is. This is all built with a javascript framework, and\nthe data loads off the OnStar network with a 60 - 120 second delay (OnStar is a\nrather slow proprietary cellular network)\n\nThis library does the craziest thing possible: uses a headless chrome\nbrowser to log into the mychevy website, wait until the OnStar data is\nretrieved, returns that information as a Python object.\n\nInstallation\n============\n\nInstallation for this library is more than just a pip install, because you must\n**also** install Google Chrome, and the Chrome Webdriver from selenium.\n\n1. Install Google Chrome (real Chrome, Chromium doesn't count)\n2. Install Chrome Web driver, put it in /usr/local/bin\n\n.. code-block:: bash\n\n   CHROME_DRIVER_VERSION=`curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE`\n   wget -N http://chromedriver.storage.googleapis.com/$CHROME_DRIVER_VERSION/chromedriver_linux64.zip -P /tmp\n   unzip /tmp/chromedriver_linux64.zip -d /tmp\n   sudo install -m 0755 -o root /tmp/chromedriver /usr/local/bin/chromedriver\n\n\n3. pip install mychevy\n\nThe last part will pull in all selenium bindings.\n\nUsage\n=====\n\nUsage is very basic.\n\n.. code-block:: python\n\n   from mychevy.mychevy import MyChevy\n\n   page = MyChevy(\"<username>\", \"<password>\")\n   # This takes up to 2 minutes to return, be patient\n   car = page.data()\n   # Percent battery charge\n   print(car.percent)\n\n\nEvery invocation of ``data()`` creates a whole separate browser to avoid\ncredential timeouts.\n\nIt is not recommended that you run this very frequently. Something like once an\nhour will give you basic data, and shouldn't overload anyone's systems.\n\nTesting\n=======\n\nBecause there are so many ways this can go wrong, a basic cli tool has been\nprovided.\n\n.. code-block::\n\n   > mychevy -c config.ini\n   Loading data, this takes up to 2 minutes...\n   <EVCar range=185 miles, bat=100%, plugged_in=True, mileage=903 miles, charging=Your battery is fully charged., charge_mode=Departure Based, eta=None, state=Plugged in(240V)>\n\nconfig.ini must include your user and password for the mychevy site in the\nfollowing format:\n\n.. code-block::\n\n   [default]\n   user = my@email.address\n   passwd = my@wes0mepa55w0rd\n\nThe ``mychevy`` command also takes the ``-S`` flag which makes the selenium\ncontrolled web browser non headless during it's execution. This can be useful\nfor eyeballing why things go wrong (there are so many ways this can go wrong).\n\nCaveats\n=======\n\nThere are so many caveats.... This software aspires to be the gloriously robust\nbubble gum and duct tape of which it has heard makes the internet go round.\n\n* Screen scraping is inherently a hack\n\n  This is screen scraping, any roll out of new UI from chevy is going to break\n  this. I'm a user, so I'll try to fix it quickly, but really this could break\n  at any time. Don't rely on the data for anything critical.\n\n* The MyChevy website OnStar link is not robust\n\n  In the first month with the Bolt I've seen two multi hour outages of the\n  mychevy website being able to connect to their OnStar backend gateway. One\n  lasted a whole day. The OnStar link from the Android App worked fine during\n  these windows of time. So it's not an OnStar failure, but it's a lack of\n  robustness somewhere on the Web side, or the gateway dedicated for serving\n  OnStar requests.\n\n* It launches a whole web browser to get a single python object\n\n  It's cool that it all works, but it's a lot of moving parts.\n\n* I have no idea what will happen if there is more than one car on the OnStar\n  network for your user.\n\nAs such, this software will always be classified Alpha on Pypi. It can and will\nbreak. For that I'm sorry. But it's the best I've got.\n\n\n* Free software: Apache Software License 2.0\n* Documentation: https://mychevy.readthedocs.io.\n\n\nFeatures\n--------\n\n* TODO\n\nCredits\n---------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.1.0 (2017-12-31)\n------------------\n\n* First release on PyPI.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/sdague/mychevy",
    "keywords": "mychevy",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mychevy",
    "platform": "",
    "project_url": "https://pypi.org/project/mychevy/",
    "release_url": "https://pypi.org/project/mychevy/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python interface to My Chevy website via Selenium",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "51d286d42e896dda35140ce3995445cf",
          "sha256": "76b18ef56baece4c52585ac48dbc48ed6c03214b7afc1aa0e5147c2c4dea0c03"
        },
        "downloads": -1,
        "filename": "mychevy-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "51d286d42e896dda35140ce3995445cf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17433,
        "upload_time": "2017-12-31T13:09:02",
        "url": "https://files.pythonhosted.org/packages/d2/47/c409dc556801173995b1848d22c367ca86fe63bd57bbecfd7115d8f5f8f3/mychevy-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "51d286d42e896dda35140ce3995445cf",
        "sha256": "76b18ef56baece4c52585ac48dbc48ed6c03214b7afc1aa0e5147c2c4dea0c03"
      },
      "downloads": -1,
      "filename": "mychevy-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "51d286d42e896dda35140ce3995445cf",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 17433,
      "upload_time": "2017-12-31T13:09:02",
      "url": "https://files.pythonhosted.org/packages/d2/47/c409dc556801173995b1848d22c367ca86fe63bd57bbecfd7115d8f5f8f3/mychevy-0.1.0.tar.gz"
    }
  ]
}