{
  "info": {
    "author": "Christian Barra",
    "author_email": "barrachri@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: AsyncIO",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "\n.. image:: https://badge.fury.io/py/rampante.svg\n   :target: https://badge.fury.io/py/rampante\n   :alt: PyPI version\n\n.. image:: https://img.shields.io/pypi/pyversions/rampante.svg\n   :target: https://pypi.org/project/rampante/\n   :alt: Python Versions\n\n.. image:: https://travis-ci.org/barrachri/rampante.svg?branch=master\n    :target: https://travis-ci.org/barrachri/rampante\n\n.. image:: https://codecov.io/gh/barrachri/rampante/branch/master/graph/badge.svg\n  :target: https://codecov.io/gh/barrachri/rampante\n\n\ud83d\udc0e Rampante\n================================================\nA fancy and opinionated nanoframework for microservices.\n\nInstallation\n===============\n\n.. code-block:: sh\n\n   pip install rampante\n\nHow to use `subscribe_on`\n============================\n\n.. code-block:: python\n\n    from rampante import subscribe_on\n\n    # The function should accept 3 params\n    # queue_name, for example could be \"user.subscribed\"\n    # data is a dictionary, it's a msgpacked message sent to Kafka\n    # producer is an instance of AIOKafkaProducer, if you want to send new events\n\n    @subscribe_on(\"user.subscribed\")\n    async def send_a_message(queue_name, data, producer):\n        log.info(\"Event received!\")\n\n    @subscribe_on(\"user.subscribed\", \"user.created\")\n    async def send_another_message(queue_name, data, producer):\n        log.info(\"Event received!\")\n\n\nExample\n========================\n\n.. code-block:: python\n\n    import asyncio\n    import logging\n\n    import msgpack\n    from aiokafka import AIOKafkaProducer\n    from rampante import scheduler, subscribe_on\n\n    log = logging.getLogger()\n    handler = logging.StreamHandler()\n    formatter = logging.Formatter(\n        '[%(asctime)s %(name)s %(levelname)s] %(message)s')\n    handler.setFormatter(formatter)\n    log.addHandler(handler)\n    log.setLevel(logging.INFO)\n\n    KAFKA_URI = 'localhost:9092'\n\n    @subscribe_on(\"user.subscribed\")\n    async def send_a_message(queue_name, data, producer):\n        log.info(\"Event received!\")\n\n    async def stop_task_manager(app):\n        \"\"\"Cancel task manager.\"\"\"\n        if 'task_manager' in app:\n            app['task_manager'].cancel()\n            await app['task_manager']\n\n    if __name__ == '__main__':\n        loop = asyncio.get_event_loop()\n        try:\n            loop.run_until_complete(scheduler(kafka_uri=KAFKA_URI, loop=loop, queue_size=10))\n        except KeyboardInterrupt:\n            log.warning(\"Shutting down!\")\n\n\nExample with aiohttp\n========================\n\n.. code-block:: python\n\n    import asyncio\n    import logging\n\n    import msgpack\n    from aiohttp import web\n    from aiokafka import AIOKafkaProducer\n    from rampante import scheduler, subscribe_on\n\n    log = logging.getLogger()\n    handler = logging.StreamHandler()\n    formatter = logging.Formatter(\n        '[%(asctime)s %(name)s %(levelname)s] %(message)s')\n    handler.setFormatter(formatter)\n    log.addHandler(handler)\n    log.setLevel(logging.INFO)\n\n    KAFKA_URI = 'localhost:9092'\n\n\n    @subscribe_on(\"user.subscribed\")\n    async def send_a_message(queue_name, data, producer):\n        log.info(\"Event received!\")\n\n\n    async def handle(request):\n        name = request.match_info.get('name', \"Anonymous\")\n        text = \"Hello, \" + name\n        body = msgpack.packb({\"message\": \"Hello\", \"priority\": 3})\n        await request.app['events_queue'].send_and_wait(\"user.subscribed\", body)\n        return web.Response(text=text)\n\n\n    async def start_event_connection(app):\n        \"\"\"Connect to Kafka.\"\"\"\n        connection = AIOKafkaProducer(loop=app.loop, bootstrap_servers=KAFKA_URI)\n        await connection.start()\n        app['events_queue'] = connection\n\n\n    async def stop_event_connection(app):\n        \"\"\"Close connection with Kafka.\"\"\"\n        if 'events_queue' in app:\n            await app['events_queue'].stop()\n\n\n    async def start_task_manager(app):\n        \"\"\"Load task manager.\"\"\"\n        app['task_manager'] = asyncio.ensure_future(\n            scheduler(kafka_uri=KAFKA_URI, loop=app.loop, queue_size=10))\n\n\n    async def stop_task_manager(app):\n        \"\"\"Cancel task manager.\"\"\"\n        if 'task_manager' in app:\n            app['task_manager'].cancel()\n            await app['task_manager']\n\n    if __name__ == '__main__':\n        app = web.Application()\n        app.router.add_get('/{name}', handle)\n        # On-startup tasks\n        app.on_startup.append(start_event_connection)\n        app.on_startup.append(start_task_manager)\n        # Clean-up tasks\n        app.on_cleanup.append(stop_task_manager)\n        app.on_cleanup.append(stop_event_connection)\n        web.run_app(app)\n\nThe name\n================================================\n\nRampante means \"rampant\" in Italian.\n\nWhy Kafka?\n================================================\n\nI like aiokafka, but I plan to switch to Redis as soon as `Stream` will be officially available.\n\nTo Do\n================================================\n\n- add circuit breaker\n- add retry\n- add logic when tasks fail\n- add consumer position\n\nPull requests are encouraged!\n\nLicense\n================================================\n\nApache 2.0\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/barrachri/rampante",
    "keywords": "",
    "license": "Apache 2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "rampante",
    "platform": "",
    "project_url": "https://pypi.org/project/rampante/",
    "release_url": "https://pypi.org/project/rampante/0.0.2/",
    "requires_dist": [
      "msgpack-python (==0.4.8)",
      "aiokafka (==0.3.1)"
    ],
    "requires_python": "",
    "summary": "A microservices nanoframework.",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4df02968c0c929de4781d5f4667e8696",
          "sha256": "c1415175f0d60525324033f40bd46de3b98745d0a428e0b97c9016d1f4fe0014"
        },
        "downloads": -1,
        "filename": "rampante-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4df02968c0c929de4781d5f4667e8696",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 2854,
        "upload_time": "2017-11-26T15:47:34",
        "url": "https://files.pythonhosted.org/packages/fa/77/26451dc6ea63812123309015665dbbb0addfafdead044f9e976285d61d5b/rampante-0.0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a14cd11ca302d761d3ab221ca53b5fb1",
          "sha256": "3565b7c07e01f20b9a830e8b6732b8c16a75891cddfc4e889f21a5044d12b6ee"
        },
        "downloads": -1,
        "filename": "rampante-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a14cd11ca302d761d3ab221ca53b5fb1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4685,
        "upload_time": "2017-11-26T15:47:35",
        "url": "https://files.pythonhosted.org/packages/9f/3a/eacfc5307eb5780d55633c3ce029e2e339d049a03ca5b9315371286864fe/rampante-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fe9b548cf70b1135dad8715177ec2332",
          "sha256": "87d378a9bf90830de5a4f0c2a76d6730dbe6c91b42868908745d6ba959f864f9"
        },
        "downloads": -1,
        "filename": "rampante-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fe9b548cf70b1135dad8715177ec2332",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 5121,
        "upload_time": "2017-11-26T17:19:42",
        "url": "https://files.pythonhosted.org/packages/53/df/75bb9d9de877bb221d0fd7fac276a5449aa1c93082e991e02db79486b4b1/rampante-0.0.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "0885d2f4e14dd600599a940bfa283839",
          "sha256": "b2d74c0597f06e9b5510616b892a38cbdb7d96de623048f3fc5e902466f50ff6"
        },
        "downloads": -1,
        "filename": "rampante-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0885d2f4e14dd600599a940bfa283839",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6020,
        "upload_time": "2017-11-26T17:19:45",
        "url": "https://files.pythonhosted.org/packages/8a/73/805a04821863933737d0409f65849d282ca0c835fa4173e43d54c7741048/rampante-0.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "fe9b548cf70b1135dad8715177ec2332",
        "sha256": "87d378a9bf90830de5a4f0c2a76d6730dbe6c91b42868908745d6ba959f864f9"
      },
      "downloads": -1,
      "filename": "rampante-0.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "fe9b548cf70b1135dad8715177ec2332",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 5121,
      "upload_time": "2017-11-26T17:19:42",
      "url": "https://files.pythonhosted.org/packages/53/df/75bb9d9de877bb221d0fd7fac276a5449aa1c93082e991e02db79486b4b1/rampante-0.0.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "0885d2f4e14dd600599a940bfa283839",
        "sha256": "b2d74c0597f06e9b5510616b892a38cbdb7d96de623048f3fc5e902466f50ff6"
      },
      "downloads": -1,
      "filename": "rampante-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "0885d2f4e14dd600599a940bfa283839",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6020,
      "upload_time": "2017-11-26T17:19:45",
      "url": "https://files.pythonhosted.org/packages/8a/73/805a04821863933737d0409f65849d282ca0c835fa4173e43d54c7741048/rampante-0.0.2.tar.gz"
    }
  ]
}