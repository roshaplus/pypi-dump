{
  "info": {
    "author": "Kazuhiko Shiozaki",
    "author_email": "kazuhiko@nexedi.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Framework :: Buildout :: Extension",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Zope Public License",
      "Programming Language :: Python",
      "Topic :: Software Development :: Build Tools",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "Rerun buildout with a python provided by buildout\n=================================================\n\nBuildout 2.0 no-longer supports using multiple versions of Python in a\nsingle buildout. This extension makes it possible to use 'yet another\nsingle' version of python, by building a specified python part and its\ndependencies first then reinvoking buildout with the executable.\n\nUsage\n-----\n\nA part to build python is required. You need to specify it by `python`\nparameter in `buildout` section, just same as buildout 1.x. The python\nsection must provide executable option that gives the path to a Python\nexecutable.\n\nAnd add slapos.rebootstrap to `extensions` parameter in `buildout` section.\n\nUse whatever python to bootstrap and run buildout. If this extension\ndetects that sys.executable used to run buildout is different than\nexecutable provided in python section, it will try to find this\nexecutable. If it does not exists, it will install this section and\nthen reinstall buildout using new python executable. Later buildout\nrun will continue using new python.\n\nExample profile and invocation\n------------------------------\n::\n\n  [buildout]\n  extensions = slapos.rebootstrap\n  python = slapospython\n  \n  parts =\n    realrun\n\n  # Uncomment the following to use a dedicated buildout directory to\n  # build rebootstrap python # that is mandatory if the major version\n  # of python is different # between buildout's python and rebootstrap\n  # python.\n  #\n  # rebootstrap-directory = rebootstrap\n  \n  [slapospython]\n  recipe = plone.recipe.command\n  stop-on-error = true\n  command = mkdir -p ${buildout:parts-directory}/${:__section_name__}/bin &&\n    cp -f /usr/bin/python ${:executable}\n  \n  [realrun]\n  recipe = plone.recipe.command\n  command =\n    echo Running with python ${buildout:executable}\n  update-command = ${:command}\n\nAfter bootstrapping and running this buildout it will print:\n\nRunning with python /path/to/buildout/parts/slapospython/bin/slapospython\n\nRunning tests\n-------------\n\nTest for this package can be run as simple as:\n\n $ python setup.py test\n\nPlease keep in mind that clean python environment is required -- the best one is\nprovided by buildout or virtualenv *WITHOUT* site packages.\n\n\nChanges\n=======\n\n3.10 (2017-03-15)\n----------------\n\n * Drop zc.buildout version pinning to prevent loop in case of version\n   change.\n\n3.9 (2017-03-15)\n----------------\n\n * Drop zc.buildout version pinning in reboot() to prevent loop in\n   case of version change.\n\n3.8 (2017-03-13)\n----------------\n\n * Use a dedicated rebootstrap directory only if\n   buildout:rebootstrap-directory is set.\n\n3.7 (2016-08-18)\n----------------\n\n * Preserve bin-directory for generate bin/buildout on the\n   appropriate location.\n\n3.6 (2016-06-30)\n----------------\n\n * Add more parameters for the use case with slapos.package.\n\n3.5 (2016-06-10)\n----------------\n\n * Explicitly specify the python interpreter and the config file when\n   invoking a new buildout process to build rebootstrap directory.\n\n3.4 (2016-06-10)\n----------------\n\n * Use a dedicated buildout directory for building a rebootstrap\n   python. The change in 3.2 was wrong because it causes infinite loop\n   of rebootstrap and build for different version of python.\n\n3.3 (2016-01-20)\n----------------\n\n * Ignore MissingSection exception in _uninstall_part().\n\n3.2 (2015-11-10)\n----------------\n\n * Support zc.buildout >= 2.0.0.\n * Same parts directory as the normal buildout is used so that we can\n   build faster and also make the code simpler.\n * Python part is now specified by `python` parameter in `buildout`\n   section.\n * Restart automatically with the original python when running python\n   part is removed.\n\n3.1 (2011-06-24)\n----------------\n\n * Support eggs parameter in rebootstrap section in order to add additional\n   eggs for rebootstrapped buildout. [\u0141ukasz Nowak]\n\n3.0 (2011-05-27)\n----------------\n\n * Renamed from slapos.tool.rebootstrap 2.4 [\u0141ukasz Nowak]\n\nTechnical documentation\n=======================\n\nSupport for extensions\n----------------------\n\n>>> import sys\n>>> mkdir(sample_buildout, 'recipes')\n>>> write(sample_buildout, 'recipes', 'setup.py',\n... \"\"\"\n... from setuptools import setup\n...\n... setup(\n...     name = \"recipes\",\n...     entry_points = {'zc.buildout':[\n...             'pyinstall = pyinstall:Pyinstall',\n...             'pyshow = pyshow:Pyshow',\n...     ],\n...     'zc.buildout.extension': ['ext = extension:extension'],},\n...     )\n... \"\"\")\n>>> write(sample_buildout, 'recipes', 'README.txt', \" \")\n>>> write(sample_buildout, 'recipes', 'extension.py',\n... \"\"\"\n... def extension(buildout):\n...     print 'Special extension run'\n... \"\"\")\n>>> write(sample_buildout, 'recipes', 'pyinstall.py',\n... \"\"\"\n... import os, zc.buildout, shutil, sys\n...\n... class Pyinstall:\n...\n...     def __init__(self, buildout, name, options):\n...         self.name, self.options = name, options\n...         self.destination = os.path.join(buildout['buildout'][\n...             'parts-directory'], self.options.get('python', name))\n...\n...     def install(self):\n...         for d in [self.destination, os.path.join(self.destination, 'bin')]:\n...           if not os.path.exists(d):\n...               os.mkdir(d)\n...         python = os.path.join(self.destination, 'bin', self.name)\n...         if not os.path.exists(python):\n...             shutil.copy(sys.executable, python)\n...         return []\n...\n...     update = install\n... \"\"\")\n>>> write(sample_buildout, 'recipes', 'pyshow.py',\n... \"\"\"\n... import os, zc.buildout, shutil, sys\n...\n... class Pyshow:\n...\n...     def __init__(self, buildout, name, options):\n...         self.name, self.options = name, options\n...\n...     def install(self):\n...         print 'Running with:', sys.executable\n...         return []\n...\n...     update = install\n... \"\"\")\n>>> write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = recipes\n... parts =\n... \"\"\")\n>>> print system(buildout),\nDevelop: '/sample-buildout/recipes'\n>>> write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = recipes\n... extensions = slapos.rebootstrap recipes\n...\n... parts =\n...   realrun\n...\n... [rebootstrap]\n... section =\n...   installpython\n... version =\n...   1\n...\n... [installpython]\n... recipe = recipes:pyinstall\n...\n... [realrun]\n... recipe = recipes:pyshow\n... \"\"\" % dict(syspython=sys.executable))\n>>> print system(buildout),\nslapos.rebootstrap: Installing section 'installpython' to provide '/sample-buildout/rebootstrap.1.parts/installpython/bin/installpython' in '/sample-buildout/rebootstrap.1.parts'\nslapos.rebootstrap: Rerunning buildout to install section installpython with arguments ['/sample-buildout/bin/buildout', 'buildout:parts=installpython', 'buildout:extensions=recipes', '/sample-buildout/rebootstrap.1.parts', 'buildout:installed=.rebootstrap.1.installed.cfg'].\nSpecial extension run\nCreating directory '/sample-buildout/rebootstrap.1.parts'.\nDevelop: '/sample-buildout/recipes'\nInstalling installpython.\nslapos.rebootstrap: \n************ REBOOTSTRAP: IMPORTANT NOTICE ************\nbin/buildout is being reinstalled right now, as new python:\n  /sample_buildout/rebootstrap.1.parts/installpython/bin/installpython\nis available, and buildout is using another python:\n  /system_python\nBuildout will be restarted automatically to have this change applied.\n************ REBOOTSTRAP: IMPORTANT NOTICE ************\n<BLANKLINE>\nGenerated script '/sample-buildout/bin/buildout'.\nSpecial extension run\nDevelop: '/sample-buildout/recipes'\nInstalling realrun.\nRunning with: /sample_buildout/rebootstrap.1.parts/installpython/bin/installpython\n\n\nDefault invocation\n------------------\n\n>>> import sys\n>>> mkdir(sample_buildout, 'recipes')\n>>> write(sample_buildout, 'recipes', 'setup.py',\n... \"\"\"\n... from setuptools import setup\n...\n... setup(\n...     name = \"recipes\",\n...     entry_points = {'zc.buildout':[\n...             'pyinstall = pyinstall:Pyinstall',\n...             'pyshow = pyshow:Pyshow',\n...     ]},\n...     )\n... \"\"\")\n>>> write(sample_buildout, 'recipes', 'README.txt', \" \")\n>>> write(sample_buildout, 'recipes', 'pyinstall.py',\n... \"\"\"\n... import os, zc.buildout, shutil, sys\n...\n... class Pyinstall:\n...\n...     def __init__(self, buildout, name, options):\n...         self.name, self.options = name, options\n...         self.destination = os.path.join(buildout['buildout'][\n...             'parts-directory'], self.options.get('python', name))\n...\n...     def install(self):\n...         for d in [self.destination, os.path.join(self.destination, 'bin')]:\n...           if not os.path.exists(d):\n...               os.mkdir(d)\n...         python = os.path.join(self.destination, 'bin', self.name)\n...         if not os.path.exists(python):\n...             shutil.copy(sys.executable, python)\n...         return []\n...\n...     update = install\n... \"\"\")\n>>> write(sample_buildout, 'recipes', 'pyshow.py',\n... \"\"\"\n... import os, zc.buildout, shutil, sys\n...\n... class Pyshow:\n...\n...     def __init__(self, buildout, name, options):\n...         self.name, self.options = name, options\n...\n...     def install(self):\n...         print 'Running with:', sys.executable\n...         return []\n...\n...     update = install\n... \"\"\")\n>>> write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = recipes\n... parts =\n... \"\"\")\n>>> print system(buildout),\nDevelop: '/sample-buildout/recipes'\n>>> write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = recipes\n... extensions = slapos.rebootstrap\n...\n... parts =\n...   realrun\n...\n... [rebootstrap]\n... section =\n...   installpython\n... version =\n...   1\n...\n... [installpython]\n... recipe = recipes:pyinstall\n...\n... [realrun]\n... recipe = recipes:pyshow\n... \"\"\" % dict(syspython=sys.executable))\n>>> print system(buildout),\nslapos.rebootstrap: Installing section 'installpython' to provide '/sample-buildout/rebootstrap.1.parts/installpython/bin/installpython' in '/sample-buildout/rebootstrap.1.parts'\nslapos.rebootstrap: Rerunning buildout to install section installpython with arguments ['/sample-buildout/bin/buildout', 'buildout:parts=installpython', 'buildout:extensions=', '/sample-buildout/rebootstrap.1.parts', 'buildout:installed=.rebootstrap.1.installed.cfg'].\nCreating directory '/sample-buildout/rebootstrap.1.parts'.\nDevelop: '/sample-buildout/recipes'\nInstalling installpython.\nslapos.rebootstrap: \n************ REBOOTSTRAP: IMPORTANT NOTICE ************\nbin/buildout is being reinstalled right now, as new python:\n  /sample_buildout/rebootstrap.1.parts/installpython/bin/installpython\nis available, and buildout is using another python:\n  /system_python\nBuildout will be restarted automatically to have this change applied.\n************ REBOOTSTRAP: IMPORTANT NOTICE ************\n<BLANKLINE>\nGenerated script '/sample-buildout/bin/buildout'.\nDevelop: '/sample-buildout/recipes'\nInstalling realrun.\nRunning with: /sample_buildout/rebootstrap.1.parts/installpython/bin/installpython\n\n\nSupport of cases when reboostrap part exists\n--------------------------------------------\n\n>>> import sys\n>>> mkdir(sample_buildout, 'recipes')\n>>> write(sample_buildout, 'recipes', 'setup.py',\n... \"\"\"\n... from setuptools import setup\n...\n... setup(\n...     name = \"recipes\",\n...     entry_points = {'zc.buildout':[\n...             'pyinstall = pyinstall:Pyinstall',\n...             'pyshow = pyshow:Pyshow',\n...     ]},\n...     )\n... \"\"\")\n>>> write(sample_buildout, 'recipes', 'README.txt', \" \")\n>>> write(sample_buildout, 'recipes', 'pyinstall.py',\n... \"\"\"\n... import os, zc.buildout, shutil, sys\n...\n... class Pyinstall:\n...\n...     def __init__(self, buildout, name, options):\n...         self.name, self.options = name, options\n...         self.destination = os.path.join(buildout['buildout'][\n...             'parts-directory'], self.options.get('python', name))\n...\n...     def install(self):\n...         for d in [self.destination, os.path.join(self.destination, 'bin')]:\n...           if not os.path.exists(d):\n...               os.mkdir(d)\n...         python = os.path.join(self.destination, 'bin', self.name)\n...         if not os.path.exists(python):\n...             shutil.copy(sys.executable, python)\n...         return []\n...\n...     update = install\n... \"\"\")\n>>> write(sample_buildout, 'recipes', 'pyshow.py',\n... \"\"\"\n... import os, zc.buildout, shutil, sys\n...\n... class Pyshow:\n...\n...     def __init__(self, buildout, name, options):\n...         self.name, self.options = name, options\n...\n...     def install(self):\n...         print 'Running with:', sys.executable\n...         return []\n...\n...     update = install\n... \"\"\")\n>>> write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = recipes\n... parts =\n... \"\"\")\n>>> print system(buildout),\nDevelop: '/sample-buildout/recipes'\n>>> write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = recipes\n... extensions = slapos.rebootstrap\n...\n... parts =\n...   realrun\n...\n... [rebootstrap]\n... section =\n...   installpython\n... version =\n...   1\n...\n... [installpython]\n... recipe = recipes:pyinstall\n...\n... [realrun]\n... recipe = recipes:pyshow\n... \"\"\" % dict(syspython=sys.executable))\n>>> import os\n>>> os.mkdir('rebootstrap.1.parts')\n>>> print system(buildout),\nslapos.rebootstrap: Installing section 'installpython' to provide '/sample-buildout/rebootstrap.1.parts/installpython/bin/installpython' in '/sample-buildout/rebootstrap.1.parts'\nslapos.rebootstrap: Rerunning buildout to install section installpython with arguments ['/sample-buildout/bin/buildout', 'buildout:parts=installpython', 'buildout:extensions=', '/sample-buildout/rebootstrap.1.parts', 'buildout:installed=.rebootstrap.1.installed.cfg'].\nDevelop: '/sample-buildout/recipes'\nInstalling installpython.\nslapos.rebootstrap: \n************ REBOOTSTRAP: IMPORTANT NOTICE ************\nbin/buildout is being reinstalled right now, as new python:\n  /sample_buildout/rebootstrap.1.parts/installpython/bin/installpython\nis available, and buildout is using another python:\n  /system_python\nBuildout will be restarted automatically to have this change applied.\n************ REBOOTSTRAP: IMPORTANT NOTICE ************\n<BLANKLINE>\nGenerated script '/sample-buildout/bin/buildout'.\nDevelop: '/sample-buildout/recipes'\nInstalling realrun.\nRunning with: /sample_buildout/rebootstrap.1.parts/installpython/bin/installpython\n\n\nSupport for additional eggs\n---------------------------\n\n>>> import sys\n>>> mkdir(sample_buildout, 'addegg')\n>>> write(sample_buildout, 'addegg', 'setup.py',\n... \"\"\"\n... from setuptools import setup\n...\n... setup(\n...     name = \"additionalegg\",\n...     entry_points = {'zc.buildout.extension':[\n...         'extension = extension:extension',\n...     ]},\n...     )\n... \"\"\")\n>>> write(sample_buildout, 'addegg', 'extension.py',\n... \"\"\"\n... def extension(buildout):\n...   print 'Extension available in buildout.'\n... \"\"\")\n>>> write(sample_buildout, 'addegg', 'README.txt', \" \")\n>>> mkdir(sample_buildout, 'recipes')\n>>> write(sample_buildout, 'recipes', 'setup.py',\n... \"\"\"\n... from setuptools import setup\n...\n... setup(\n...     name = \"recipes\",\n...     entry_points = {'zc.buildout':[\n...             'pyinstall = pyinstall:Pyinstall',\n...             'pyshow = pyshow:Pyshow',\n...     ]},\n...     )\n... \"\"\")\n>>> write(sample_buildout, 'recipes', 'README.txt', \" \")\n>>> write(sample_buildout, 'recipes', 'pyinstall.py',\n... \"\"\"\n... import os, zc.buildout, shutil, sys\n...\n... class Pyinstall:\n...\n...     def __init__(self, buildout, name, options):\n...         self.name, self.options = name, options\n...         self.destination = os.path.join(buildout['buildout'][\n...             'parts-directory'], self.options.get('python', name))\n...\n...     def install(self):\n...         for d in [self.destination, os.path.join(self.destination, 'bin')]:\n...           if not os.path.exists(d):\n...               os.mkdir(d)\n...         python = os.path.join(self.destination, 'bin', self.name)\n...         if not os.path.exists(python):\n...             shutil.copy(sys.executable, python)\n...         return []\n...\n...     update = install\n... \"\"\")\n>>> write(sample_buildout, 'recipes', 'pyshow.py',\n... \"\"\"\n... import os, zc.buildout, shutil, sys\n...\n... class Pyshow:\n...\n...     def __init__(self, buildout, name, options):\n...         self.name, self.options = name, options\n...\n...     def install(self):\n...         print 'Running with:', sys.executable\n...         return []\n...\n...     update = install\n... \"\"\")\n>>> write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = recipes addegg\n... parts =\n... \"\"\")\n>>> print system(buildout),\nDevelop: '/sample-buildout/recipes'\nDevelop: '/sample-buildout/addegg'\n>>> write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = recipes addegg\n... extensions = slapos.rebootstrap\n...\n... parts =\n...   realrun\n...\n... [rebootstrap]\n... section =\n...   installpython\n... version =\n...   1\n... eggs =\n...   additionalegg\n...\n... [installpython]\n... recipe = recipes:pyinstall\n...\n... [realrun]\n... recipe = recipes:pyshow\n... \"\"\" % dict(syspython=sys.executable))\n>>> print system(buildout),\nslapos.rebootstrap: Installing section 'installpython' to provide '/sample-buildout/rebootstrap.1.parts/installpython/bin/installpython' in '/sample-buildout/rebootstrap.1.parts'\nslapos.rebootstrap: Rerunning buildout to install section installpython with arguments ['/sample-buildout/bin/buildout', 'buildout:parts=installpython', 'buildout:extensions=', '/sample-buildout/rebootstrap.1.parts', 'buildout:installed=.rebootstrap.1.installed.cfg'].\nCreating directory '/sample-buildout/rebootstrap.1.parts'.\nDevelop: '/sample-buildout/recipes'\nDevelop: '/sample-buildout/addegg'\nInstalling installpython.\nslapos.rebootstrap: \n************ REBOOTSTRAP: IMPORTANT NOTICE ************\nbin/buildout is being reinstalled right now, as new python:\n  /sample_buildout/rebootstrap.1.parts/installpython/bin/installpython\nis available, and buildout is using another python:\n  /system_python\nBuildout will be restarted automatically to have this change applied.\n************ REBOOTSTRAP: IMPORTANT NOTICE ************\n<BLANKLINE>\nGenerated script '/sample-buildout/bin/buildout'.\nExtension available in buildout.\nDevelop: '/sample-buildout/recipes'\nDevelop: '/sample-buildout/addegg'\nInstalling realrun.\nRunning with: /sample_buildout/rebootstrap.1.parts/installpython/bin/installpython\n\n\n\nSupport of own python path\n--------------------------\n\n>>> import sys\n>>> mkdir(sample_buildout, 'recipes')\n>>> write(sample_buildout, 'recipes', 'setup.py',\n... \"\"\"\n... from setuptools import setup\n...\n... setup(\n...     name = \"recipes\",\n...     entry_points = {'zc.buildout':[\n...             'pyinstall = pyinstall:Pyinstall',\n...             'pyshow = pyshow:Pyshow',\n...     ]},\n...     )\n... \"\"\")\n>>> write(sample_buildout, 'recipes', 'README.txt', \" \")\n>>> write(sample_buildout, 'recipes', 'pyinstall.py',\n... \"\"\"\n... import os, zc.buildout, shutil, sys\n...\n... class Pyinstall:\n...\n...     def __init__(self, buildout, name, options):\n...         self.name, self.options = name, options\n...         self.destination = os.path.join(buildout['buildout'][\n...             'parts-directory'], name)\n...\n...     def install(self):\n...         for d in [self.destination, os.path.join(self.destination, 'bin')]:\n...           if not os.path.exists(d):\n...               os.mkdir(d)\n...         python = self.options.get('python', os.path.join('bin', self.name))\n...         python = os.path.join(self.destination, python)\n...         if not os.path.exists(python):\n...             shutil.copy(sys.executable, python)\n...         return []\n...\n...     update = install\n... \"\"\")\n>>> write(sample_buildout, 'recipes', 'pyshow.py',\n... \"\"\"\n... import os, zc.buildout, shutil, sys\n...\n... class Pyshow:\n...\n...     def __init__(self, buildout, name, options):\n...         self.name, self.options = name, options\n...\n...     def install(self):\n...         print 'Running with:', sys.executable\n...         return []\n...\n...     update = install\n... \"\"\")\n>>> write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = recipes\n... parts =\n... \"\"\")\n>>> print system(buildout),\nDevelop: '/sample-buildout/recipes'\n>>> write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = recipes\n... extensions = slapos.rebootstrap\n...\n... parts =\n...   realrun\n...\n... [rebootstrap]\n... section =\n...   installpython\n... version =\n...   1\n... python-path =\n...  anotherpython\n...\n... [installpython]\n... recipe = recipes:pyinstall\n... python = anotherpython\n...\n... [realrun]\n... recipe = recipes:pyshow\n... \"\"\" % dict(syspython=sys.executable))\n>>> print system(buildout),\nslapos.rebootstrap: Installing section 'installpython' to provide '/sample-buildout/rebootstrap.1.parts/installpython/anotherpython' in '/sample-buildout/rebootstrap.1.parts'\nslapos.rebootstrap: Rerunning buildout to install section installpython with arguments ['/sample-buildout/bin/buildout', 'buildout:parts=installpython', 'buildout:extensions=', '/sample-buildout/rebootstrap.1.parts', 'buildout:installed=.rebootstrap.1.installed.cfg'].\nCreating directory '/sample-buildout/rebootstrap.1.parts'.\nDevelop: '/sample-buildout/recipes'\nInstalling installpython.\nslapos.rebootstrap: \n************ REBOOTSTRAP: IMPORTANT NOTICE ************\nbin/buildout is being reinstalled right now, as new python:\n  /sample_buildout/rebootstrap.1.parts/installpython/anotherpython\nis available, and buildout is using another python:\n  /system_python\nBuildout will be restarted automatically to have this change applied.\n************ REBOOTSTRAP: IMPORTANT NOTICE ************\n<BLANKLINE>\nGenerated script '/sample-buildout/bin/buildout'.\nDevelop: '/sample-buildout/recipes'\nInstalling realrun.\nRunning with: /sample_buildout/rebootstrap.1.parts/installpython/anotherpython\n\n\nSupport of upgrade\n------------------\n\n>>> import sys\n>>> mkdir(sample_buildout, 'recipes')\n>>> write(sample_buildout, 'recipes', 'setup.py',\n... \"\"\"\n... from setuptools import setup\n...\n... setup(\n...     name = \"recipes\",\n...     entry_points = {'zc.buildout':[\n...             'pyinstall = pyinstall:Pyinstall',\n...             'pyshow = pyshow:Pyshow',\n...     ]},\n...     )\n... \"\"\")\n>>> write(sample_buildout, 'recipes', 'README.txt', \" \")\n>>> write(sample_buildout, 'recipes', 'pyinstall.py',\n... \"\"\"\n... import os, zc.buildout, shutil, sys\n...\n... class Pyinstall:\n...\n...     def __init__(self, buildout, name, options):\n...         self.name, self.options = name, options\n...         self.destination = os.path.join(buildout['buildout'][\n...             'parts-directory'], self.options.get('python', name))\n...\n...     def install(self):\n...         for d in [self.destination, os.path.join(self.destination, 'bin')]:\n...           if not os.path.exists(d):\n...               os.mkdir(d)\n...         python = os.path.join(self.destination, 'bin', self.name)\n...         if not os.path.exists(python):\n...             shutil.copy(sys.executable, python)\n...         return []\n...\n...     update = install\n... \"\"\")\n>>> write(sample_buildout, 'recipes', 'pyshow.py',\n... \"\"\"\n... import os, zc.buildout, shutil, sys\n...\n... class Pyshow:\n...\n...     def __init__(self, buildout, name, options):\n...         self.name, self.options = name, options\n...\n...     def install(self):\n...         print 'Running with:', sys.executable\n...         return []\n...\n...     update = install\n... \"\"\")\n>>> write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = recipes\n... parts =\n... \"\"\")\n>>> print system(buildout),\nDevelop: '/sample-buildout/recipes'\n>>> write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = recipes\n... extensions = slapos.rebootstrap\n...\n... parts =\n...   realrun\n...\n... [rebootstrap]\n... section =\n...   installpython\n... version =\n...   1\n...\n... [installpython]\n... recipe = recipes:pyinstall\n...\n... [realrun]\n... recipe = recipes:pyshow\n... \"\"\" % dict(syspython=sys.executable))\n>>> print system(buildout),\nslapos.rebootstrap: Installing section 'installpython' to provide '/sample-buildout/rebootstrap.1.parts/installpython/bin/installpython' in '/sample-buildout/rebootstrap.1.parts'\nslapos.rebootstrap: Rerunning buildout to install section installpython with arguments ['/sample-buildout/bin/buildout', 'buildout:parts=installpython', 'buildout:extensions=', '/sample-buildout/rebootstrap.1.parts', 'buildout:installed=.rebootstrap.1.installed.cfg'].\nCreating directory '/sample-buildout/rebootstrap.1.parts'.\nDevelop: '/sample-buildout/recipes'\nInstalling installpython.\nslapos.rebootstrap: \n************ REBOOTSTRAP: IMPORTANT NOTICE ************\nbin/buildout is being reinstalled right now, as new python:\n  /sample_buildout/rebootstrap.1.parts/installpython/bin/installpython\nis available, and buildout is using another python:\n  /system_python\nBuildout will be restarted automatically to have this change applied.\n************ REBOOTSTRAP: IMPORTANT NOTICE ************\n<BLANKLINE>\nGenerated script '/sample-buildout/bin/buildout'.\nDevelop: '/sample-buildout/recipes'\nInstalling realrun.\nRunning with: /sample_buildout/rebootstrap.1.parts/installpython/bin/installpython\n>>> write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = recipes\n... extensions = slapos.rebootstrap\n...\n... parts =\n...   realrun\n...\n... [rebootstrap]\n... section =\n...   installpython\n... version =\n...   2\n...\n... [installpython]\n... recipe = recipes:pyinstall\n...\n... [realrun]\n... recipe = recipes:pyshow\n... \"\"\" % dict(syspython=sys.executable))\n>>> print system(buildout),\nslapos.rebootstrap: Installing section 'installpython' to provide '/sample-buildout/rebootstrap.2.parts/installpython/bin/installpython' in '/sample-buildout/rebootstrap.2.parts'\nslapos.rebootstrap: Rerunning buildout to install section installpython with arguments ['/sample-buildout/bin/buildout', 'buildout:parts=installpython', 'buildout:extensions=', '/sample-buildout/rebootstrap.2.parts', 'buildout:installed=.rebootstrap.2.installed.cfg'].\nCreating directory '/sample-buildout/rebootstrap.2.parts'.\nDevelop: '/sample-buildout/recipes'\nInstalling installpython.\nslapos.rebootstrap: \n************ REBOOTSTRAP: IMPORTANT NOTICE ************\nbin/buildout is being reinstalled right now, as new python:\n  /sample_buildout/rebootstrap.2.parts/installpython/bin/installpython\nis available, and buildout is using another python:\n  /sample_buildout/rebootstrap.1.parts/installpython/bin/installpython\nBuildout will be restarted automatically to have this change applied.\n************ REBOOTSTRAP: IMPORTANT NOTICE ************\n<BLANKLINE>\nGenerated script '/sample-buildout/bin/buildout'.\nDevelop: '/sample-buildout/recipes'\nUpdating realrun.\nRunning with: /sample_buildout/rebootstrap.2.parts/installpython/bin/installpython\n>>> write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... develop = recipes\n... extensions = slapos.rebootstrap\n...\n... parts =\n...   realrun\n...\n... [rebootstrap]\n... section =\n...   installpython\n... version =\n...   1\n...\n... [installpython]\n... recipe = recipes:pyinstall\n...\n... [realrun]\n... recipe = recipes:pyshow\n... \"\"\" % dict(syspython=sys.executable))\n>>> print system(buildout),\nslapos.rebootstrap: \n************ REBOOTSTRAP: IMPORTANT NOTICE ************\nbin/buildout is being reinstalled right now, as new python:\n  /sample_buildout/rebootstrap.1.parts/installpython/bin/installpython\nis available, and buildout is using another python:\n  /sample_buildout/rebootstrap.2.parts/installpython/bin/installpython\nBuildout will be restarted automatically to have this change applied.\n************ REBOOTSTRAP: IMPORTANT NOTICE ************\n<BLANKLINE>\nGenerated script '/sample-buildout/bin/buildout'.\nDevelop: '/sample-buildout/recipes'\nUpdating realrun.\nRunning with: /sample_buildout/rebootstrap.1.parts/installpython/bin/installpython\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://lab.nexedi.com/nexedi/slapos.rebootstrap",
    "keywords": "",
    "license": "ZPL 2.1",
    "maintainer": "",
    "maintainer_email": "",
    "name": "slapos.rebootstrap",
    "platform": "",
    "project_url": "https://pypi.org/project/slapos.rebootstrap/",
    "release_url": "https://pypi.org/project/slapos.rebootstrap/3.10/",
    "requires_python": "",
    "summary": "A zc.buildout extension to solve chicken-and-egg problem of using python which is built by itself",
    "version": "3.10"
  },
  "releases": {
    "3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "162bda54b7b0290c9926902415a3e352",
          "sha256": "5554d5e5c38a268cb6c19b29368935765bd0e130c10dd983358c5bceb7a1851a"
        },
        "downloads": 2808,
        "filename": "slapos.rebootstrap-3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "162bda54b7b0290c9926902415a3e352",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7262,
        "upload_time": "2011-05-27T11:53:49",
        "url": "https://files.pythonhosted.org/packages/76/44/8ecd1eba0de92af9ff5eba70b704ba69e972ca597700fd7af689c3fbf731/slapos.rebootstrap-3.0.tar.gz"
      }
    ],
    "3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fe61dfebe1eef7b65db64a16033f496b",
          "sha256": "3ad620c3303c0dae09c57795e42f90ae61718952de5c2cfb6415986fb0ce0447"
        },
        "downloads": 7002,
        "filename": "slapos.rebootstrap-3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fe61dfebe1eef7b65db64a16033f496b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11575,
        "upload_time": "2011-06-24T14:42:30",
        "url": "https://files.pythonhosted.org/packages/8e/11/de688a5a6941a157c69550a93068f3165dffab4e78a6014854f9cc1965cb/slapos.rebootstrap-3.1.tar.gz"
      }
    ],
    "3.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "12d4353c313e2527b57c109040732648",
          "sha256": "0eb48457824df90d3662c582def55255153e916feadc05d27846d4e526cd3215"
        },
        "downloads": 26,
        "filename": "slapos.rebootstrap-3.10.tar.gz",
        "has_sig": false,
        "md5_digest": "12d4353c313e2527b57c109040732648",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11659,
        "upload_time": "2017-03-15T14:04:02",
        "url": "https://files.pythonhosted.org/packages/83/d8/61373e940c7a58bbaaf7555a0eb6b8d818b18c70928931288f60bd210cff/slapos.rebootstrap-3.10.tar.gz"
      }
    ],
    "3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7bed79eaf3046cff7986e09fe139621f",
          "sha256": "220fc84c395f74159f9a53e66440281020789f5d2d56e3849cfbecb09eff66d3"
        },
        "downloads": 727,
        "filename": "slapos.rebootstrap-3.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7bed79eaf3046cff7986e09fe139621f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10143,
        "upload_time": "2015-11-10T12:35:26",
        "url": "https://files.pythonhosted.org/packages/3a/05/c5e6049f96a91f6f80bb857d4cf1e4897d7a18f118bf4a94b1ecd60b6cfc/slapos.rebootstrap-3.2.tar.gz"
      }
    ],
    "3.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f3c1d2e91313eefbdd241c5b6ff051ba",
          "sha256": "83b151eabcc0a4e74ecf3498e675a1466a7fb4e0a6beaceb87e7e3009466b4b0"
        },
        "downloads": 295,
        "filename": "slapos.rebootstrap-3.3.tar.gz",
        "has_sig": false,
        "md5_digest": "f3c1d2e91313eefbdd241c5b6ff051ba",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10255,
        "upload_time": "2016-01-20T15:27:26",
        "url": "https://files.pythonhosted.org/packages/1d/cc/2ac5e1b35cb15f314c2db39a8921c55b63eac20a286f7c83fd4ec8f030ed/slapos.rebootstrap-3.3.tar.gz"
      }
    ],
    "3.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "14771dfa0d10e0e073a9510d1f7b8a99",
          "sha256": "7c293114a0523137ec315007bf6c66479961e74334aa2296dae03d9c71c9daf1"
        },
        "downloads": 123,
        "filename": "slapos.rebootstrap-3.4.tar.gz",
        "has_sig": false,
        "md5_digest": "14771dfa0d10e0e073a9510d1f7b8a99",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10337,
        "upload_time": "2016-06-10T10:50:40",
        "url": "https://files.pythonhosted.org/packages/60/75/ad2623fe63120361cc76b7b2a69d6ea34b1fbdce5509513f27ee376c6282/slapos.rebootstrap-3.4.tar.gz"
      }
    ],
    "3.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "74650c8b25263a336c52a2c991b629ce",
          "sha256": "1a0e761b2e75db5ce58b7637202d615ba5332d9799c206ec1dba6fcd464e4711"
        },
        "downloads": 112,
        "filename": "slapos.rebootstrap-3.5.tar.gz",
        "has_sig": false,
        "md5_digest": "74650c8b25263a336c52a2c991b629ce",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10620,
        "upload_time": "2016-06-10T13:38:33",
        "url": "https://files.pythonhosted.org/packages/21/61/60f345fd6d62b9b470d3d6745978f8a351eaf6b2d43dfa545f0889bf115c/slapos.rebootstrap-3.5.tar.gz"
      }
    ],
    "3.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bc8cd8ee90065481453c44fa20bfa19c",
          "sha256": "7750f6c67bf758da9bed21f511bd3631099e14539ba2ca6013b7abe6e868bc39"
        },
        "downloads": 504,
        "filename": "slapos.rebootstrap-3.6.tar.gz",
        "has_sig": false,
        "md5_digest": "bc8cd8ee90065481453c44fa20bfa19c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10733,
        "upload_time": "2016-06-30T11:43:57",
        "url": "https://files.pythonhosted.org/packages/6d/8f/e57cbd0d1f38b3a4e3e7a59ed0e64f4fa4ec8b7dcba3b8b525d1f8cb559d/slapos.rebootstrap-3.6.tar.gz"
      }
    ],
    "3.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cebe356c9161e2898575bc6fca129179",
          "sha256": "a8840447b890a335164cb3929be1f02a0b4dbd59497f705168b01c390beff95b"
        },
        "downloads": 117,
        "filename": "slapos.rebootstrap-3.7.tar.gz",
        "has_sig": false,
        "md5_digest": "cebe356c9161e2898575bc6fca129179",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11260,
        "upload_time": "2016-08-19T10:13:38",
        "url": "https://files.pythonhosted.org/packages/16/39/f56acb443c82d55b80c5b853ad5da3a5e45965597c3967c54897ed735aca/slapos.rebootstrap-3.7.tar.gz"
      }
    ],
    "3.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "161cc4e4eace418483aa8b2b00b7597a",
          "sha256": "3af5f59fad9d5a33467b91058bcfa0a74a1f3642e203ffb85ba20a94eeba36e6"
        },
        "downloads": 24,
        "filename": "slapos.rebootstrap-3.8.zip",
        "has_sig": false,
        "md5_digest": "161cc4e4eace418483aa8b2b00b7597a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24075,
        "upload_time": "2017-03-13T08:40:55",
        "url": "https://files.pythonhosted.org/packages/c2/18/84e0af0e04b13dd322dd5822ac4aaf220d5fc2efd97134e45a77781cd09b/slapos.rebootstrap-3.8.zip"
      }
    ],
    "3.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "50b5b0c4ac748509fb06ef89520527e2",
          "sha256": "206260974b01d896543a9dabe633f3e0fec3e4ae6890883f76d489ad13135ac9"
        },
        "downloads": 24,
        "filename": "slapos.rebootstrap-3.9.tar.gz",
        "has_sig": false,
        "md5_digest": "50b5b0c4ac748509fb06ef89520527e2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11703,
        "upload_time": "2017-03-15T08:51:08",
        "url": "https://files.pythonhosted.org/packages/c3/63/9448231ab11f8792d6c357ad886bef4b46fc66272423a84b9b43059462d8/slapos.rebootstrap-3.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "12d4353c313e2527b57c109040732648",
        "sha256": "0eb48457824df90d3662c582def55255153e916feadc05d27846d4e526cd3215"
      },
      "downloads": 26,
      "filename": "slapos.rebootstrap-3.10.tar.gz",
      "has_sig": false,
      "md5_digest": "12d4353c313e2527b57c109040732648",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 11659,
      "upload_time": "2017-03-15T14:04:02",
      "url": "https://files.pythonhosted.org/packages/83/d8/61373e940c7a58bbaaf7555a0eb6b8d818b18c70928931288f60bd210cff/slapos.rebootstrap-3.10.tar.gz"
    }
  ]
}