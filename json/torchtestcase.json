{
  "info": {
    "author": "Patrick Hohenecker",
    "author_email": "mail@paho.at",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "torch-test-case\n===============\n\n\nUsing Python's [`unittest`](https://docs.python.org/3/library/unittest.html) package turns out to be cumbersome when we\nare working with [PyTorch](http://pytorch.org/) and need to write assertions that include tensors, variables, and so\nforth.\nThe main reason for this is that PyTorch tensors are compared element-wise by default, which is why assertions provided\nby the class [`unittest.TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase) do not work\nout-of-the-box.\nA possible workaround is to use\n[`TestCase.assertTrue`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue) for any assertion\nthat we need to make, yet this commonly leads to convoluted code that is hard to read and maintain.\n\nThe module `torch-test-case` defines the class `TorchTestCase`, which extends `unittest.TestCase` such that many\nassertions support instances of various PyTorch classes.\n\n\n<!--\nInstallation\n------------\n\nThis module can be installed from PyPI:\n```\npip install torchtestcase\n```\n-->\n\n\nPyTorch Assertions\n------------------\n\nThis section describes those assertions provided by the class `TorchTestCase` that support PyTorch.\nIf you are not familiar with the package `unittest`, then read about it first\n[here](https://docs.python.org/3/library/unittest.html).\n\n\n### 1. Equality Assertions\n\n(`assertEqual`, `assertNotEqual`)\n\nEquality assertions support objects that are any kind of PyTorch tensors as well as instances of\n`torch.autograd.Variable`, `torch.nn.Parameter`, and `torch.nn.utils.rnn.PackedSequence`.\nNotice, however, that an `AssertionError` is raised if the compared objects are instances of different types:\n```python\nself.assertEqual(torch.zeros(4), autograd.Variable(torch.zeros(4))  # -> AssertionError\n```\n\n\n### 2. Order Assertions\n\n(`assertGreater`, `assertGreaterEqual`, `assertLess`, `assertLessEqual`)\n\nIn general, order assertions are assumed to be fulfilled if they hold element-wise.\nFor example:\n```pyhton\nx = torch.FloatTensor([0, 0, 1])\ny = torch.FloatTensor([1, 1, 1])\nself.assertLessEqual(x, y)  # -> no AssertionError\nself.assertLess(x, y)       # -> AssertionError\n```\nIn addition, it is possible to compare tensors, `Variables`, or `Parameters` to a number, in which case each element\nof the considered data tensor is compared to the same.\nFor example, if we want to ensure that every element of a tensor lies in the unit interval, then we may use the\nfollowing assertions:\n```python\nself.assertGreaterEqual(some_tensor, 0)\nself.assertLessEqual(some_tensor, 1)\n```\nWhen we make order assertions, then we usually do not care about the actual types of the objects involved.\nTherefore, it is possible to compare different kinds of tensors with each other as well as with `Variable`s or\n`Parameter`s:\n```python\nself.assertLess(torch.zeros(3), autograd.Variable(torch.ones(3)))  # -> no AssertionError\n```",
    "docs_url": null,
    "download_url": "https://github.com/phohenecker/torch-test-case/archive/v2017.1.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/phohenecker/torch-test-case",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "torchtestcase",
    "platform": "",
    "project_url": "https://pypi.org/project/torchtestcase/",
    "release_url": "https://pypi.org/project/torchtestcase/2017.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Extends unittest.TestCase such that assertions support PyTorch tensors and variables.",
    "version": "2017.1"
  },
  "releases": {
    "2017.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9852d74cb9359fe1624483c28369069b",
          "sha256": "f8bb0c4e3216087130f80c4237bb5e4c1e6de629d553f25fd7b85f6e33bf9b34"
        },
        "downloads": -1,
        "filename": "torchtestcase-2017.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9852d74cb9359fe1624483c28369069b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6552,
        "upload_time": "2017-11-25T17:01:04",
        "url": "https://files.pythonhosted.org/packages/c6/57/d3e662878691420824b49f09f3bb6aa7c5dfb2148072bce2ec004fd48960/torchtestcase-2017.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9852d74cb9359fe1624483c28369069b",
        "sha256": "f8bb0c4e3216087130f80c4237bb5e4c1e6de629d553f25fd7b85f6e33bf9b34"
      },
      "downloads": -1,
      "filename": "torchtestcase-2017.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9852d74cb9359fe1624483c28369069b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6552,
      "upload_time": "2017-11-25T17:01:04",
      "url": "https://files.pythonhosted.org/packages/c6/57/d3e662878691420824b49f09f3bb6aa7c5dfb2148072bce2ec004fd48960/torchtestcase-2017.1.tar.gz"
    }
  ]
}