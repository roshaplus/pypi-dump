{
  "info": {
    "author": "hayj",
    "author_email": "hj@hayj.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 1 - Planning",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Topic :: Utilities"
    ],
    "description": "WorkspaceManager\n===============\n\nIn order to use this tool, we assume:\n\n * You are familiar with pip / setuptools and python virtual envs\n * You want to organize both dependencies between your own projects and with external libs using python virtual envs\n\nRequirements\n------------\n\nThis lib work on a *workspace* which is a main folder within recursively projects and folders (which are sub-workspaces to gather projects). Here an example :\n\n\t\u2514\u2500\u2500 MyPythonWorkspace\n\t \u00a0\u00a0 \u251c\u2500\u2500 Project1\n\t \u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 project1\n\t \u00a0\u00a0 \u2502\u00a0\u00a0  \t \u2514\u2500\u2500 __init__.py\n\t \u00a0\u00a0 \u251c\u2500\u2500 Basics\n\t \u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 Project2\n\t \u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\t \u2514\u2500\u2500 project2\n\t \u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\t  \t \u2514\u2500\u2500 __init__.py\n\t \u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 Project3\n\t \u00a0\u00a0 \u2502\u00a0\u00a0  \t \u2514\u2500\u2500 project3\n\t \u00a0\u00a0 \u2502\u00a0\u00a0  \t  \t \u2514\u2500\u2500 __init__.py\n\t \u00a0\u00a0 \u2514\u2500\u2500 wm-conf.json\n\nYou need to create a blank `wm-conf.json` in the root folder to indicate which one is the main workspace.\n\nTo manage an eclipse workspace this way, you need to set MyPythonWorkspace as the workspace and add all projects as external projects, then manage them with eclipse working sets to have the same tree organization.\n\nOn Linux please install pandoc and pypandoc to handle markdown to reStructuredText convertion:\n\n\tapt-get install pandoc\n\tpip install pypandoc\n\nYou also have to install [Pew](https://github.com/berdario/pew) and [pipsi](https://pypi.python.org/pypi/pipsi) in order to use wm-pew:\n\n\tpipsi install pew\n\nAll others dependencies will be installed during the lib installation.\n\nInstallation\n------------\n\n\tpip install workspacemanager\n\nGenerate the setup file\n------------------------\n\nUsage (the default path is the current):\n\n\twm-setup [-a /path/to/the/project]\n\n 1. This function will create some files (*LICENCE.txt*, *setup.py*, *requirements.txt*...). Each file can be edited in the */path/to/the/lib/templates*. For instance, you can paste a different licence in the templates folder(default is the MIT licence)\n 2. Each file will be edited according to the username, email, date given when executing the command line\n 3. If there are no *\\_\\_init\\_\\_.py* files or an empty one, a version is added\n\nYou can add lines in the *MANIFEST.in*, choose *topics* in *setup.py*, add requirements... \n\nThen you can subscribe to PyPi and upload your project using `python setup.py sdist upload`.\n\nOr install your project on the current activated venv using `python setup.py install`\n\nYou can create `wm-conf.json` in your workspace (or edit it if it already exists) to set default values:\n\n    {\n        \"author_email\": \"your@email.com\",\n        \"author\": \"yourusername\"\n    }\n\nGenerate a venv linked to the project using Pew\n------------------------\n\n\twm-pew [-a /path/to/the/project] [-p /path/to/python]\n\t\nThis command line is equivalent to `pew new -a /path/to/the/project projectname-venv`\n\nIf a python bin is given (e.g. */usr/bin/python2.7*), the command is equivalent to `pew new -p /path/to/python -a /path/to/the/project projectname-venv`\n\nTo use the venv in eclipse PyDev, right click on your project, properties, interpreter, configure, new, add the venv path (e.g. `/home/username/.virtualenvs/projectname-venv/bin/python2.7`), ok, unselect all but the venv libs, ok, select the new venv, ok.\n\nIf this function doesn't work, add the pew path to `/bin` using : `sudo ln -s ~/.local/bin/pew /bin`\n\nInstall internal workspace dependencies on the project venv\n------------------------\n\nEach project has one or more packages with *\\_\\_init\\_\\_.py* files.\n\nCreate *local-dependencies.txt* at the root of the current project:\n\n\tcd /path/to/the/project\n\ttouch local-dependencies.txt\n\nThen add local dependencies, i.e. projects (in your workspace) that your project depends on:\n\n\techo \"Utils\" >> local-dependencies.txt\n\techo \"MachineLearningTools\" >> local-dependencies.txt\n\nThe current project and all projects in *local-dependencies.txt* must have setups files which work. And the current project must have an associated venv.\n\nThis command will install all dependencies (recursively) in the current project venv, so you can work on all project (e.g. through eclipse), install all update but work on a totally independent venv:\n\n\twm-deps [-a /path/to/the/project] [-r filename.txt]\n\nOthers\n------\n\nUse `wm-workon` to disp the pew workon command line according to the current project.\n\nUse `wm-freeze` to see which lib is installed in the linked venv.\n\nUse `wm-req` to install all requirements of *requirements.txt* in the linked venv.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "workspacemanager",
    "platform": "",
    "project_url": "https://pypi.org/project/workspacemanager/",
    "release_url": "https://pypi.org/project/workspacemanager/0.1.13/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "This tool can manage a workspace by providing some useful function (generation of the setup files, generate a virtual env according to the project name... See the readme for more informations.",
    "version": "0.1.13"
  },
  "releases": {
    "0.1.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1a7efb01d36ebd155bdbef3581be49fd",
          "sha256": "13b3887db89eaa7b2b36a12a1be4fc5d95e447eff90e923cbd9575bf51b15df7"
        },
        "downloads": 0,
        "filename": "workspacemanager-0.1.12.tar.gz",
        "has_sig": false,
        "md5_digest": "1a7efb01d36ebd155bdbef3581be49fd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22614,
        "upload_time": "2017-06-30T15:28:42",
        "url": "https://files.pythonhosted.org/packages/58/da/69bb8f8c68a2d8291851b713aadbe14780dd02953662ebd4cbbc2b0b5259/workspacemanager-0.1.12.tar.gz"
      }
    ],
    "0.1.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bd4d3a4d30b377679d79ab85c3ffa3f6",
          "sha256": "59cfa99ee51de42f06e6cf1c9055e2a95166eebf23406778bb88792c928014ae"
        },
        "downloads": 0,
        "filename": "workspacemanager-0.1.13.tar.gz",
        "has_sig": false,
        "md5_digest": "bd4d3a4d30b377679d79ab85c3ffa3f6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23459,
        "upload_time": "2017-08-16T17:20:44",
        "url": "https://files.pythonhosted.org/packages/3d/bb/3fc68b65b78fd07b11b7c455bf5a8130b43edd448af14793b12c65dccd8d/workspacemanager-0.1.13.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "bd4d3a4d30b377679d79ab85c3ffa3f6",
        "sha256": "59cfa99ee51de42f06e6cf1c9055e2a95166eebf23406778bb88792c928014ae"
      },
      "downloads": 0,
      "filename": "workspacemanager-0.1.13.tar.gz",
      "has_sig": false,
      "md5_digest": "bd4d3a4d30b377679d79ab85c3ffa3f6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 23459,
      "upload_time": "2017-08-16T17:20:44",
      "url": "https://files.pythonhosted.org/packages/3d/bb/3fc68b65b78fd07b11b7c455bf5a8130b43edd448af14793b12c65dccd8d/workspacemanager-0.1.13.tar.gz"
    }
  ]
}