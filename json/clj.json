{
  "info": {
    "author": "Baptiste Fontaine",
    "author_email": "b@ptistefontaine.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "# clj\n\n`clj` is a Python module for those times when you did too much Clojure and\ncame back to Python thinking where are all these `distinct`, `drop-while`,\n`cycle`, `first`, etc.\n\n## Core Ideas\n\n* Lazy by default. All the functions should work on arbitrary iterators and\n  return generators.\n* This is Python. We keep Python\u2019s semantics instead of trying to reproduce\n  Clojure in Python (e.g. `0` and `[]` are logically true in Clojure but false\n  in Python; `None` is not equivalent to an empty collection).\n* Don\u2019t Reinvent the Wheel. Python already provides things like `map` and\n  `filter`. We don\u2019t reimplement them unless they miss something (e.g. Python\u2019s\n  `range` can\u2019t be called without argument to yield an infinite sequence).\n\n## Support\n\n### Sequences (`clj.seqs`)\n\n`clj.seqs` aim to implement all Clojure functions that operate on sequences\n(see [the list here][seqs]).\nThey all work on iterables and return generators by default (Python\u2019s closest\nequivalent of lazy seqs). We don\u2019t support transducers.\n\n[seqs]: http://clojure.org/reference/sequences\n\n| Clojure           | `clj.seqs`      | Comment                          |\n|-------------------|:----------------|----------------------------------|\n| `distinct`        | `distinct`      |                                  |\n| `filter`          | -               | Use Python\u2019s built-in `filter`.  |\n| `remove`          | `remove`        |                                  |\n| `for`             | -               | Use `for \u2026 in`.                  |\n| `keep`            | `keep`          |                                  |\n| `keep-indexed`    | `keep_indexed`\u00a0 |                                  |\n| `cons`            | `cons`          |                                  |\n| `concat`          | `concat`        |                                  |\n| `lazy-cat`        | -               | Use `concat`.                    |\n| `mapcat`          | `mapcat`        |                                  |\n| `cycle`           | `cycle`         |                                  |\n| `interleave`      | `interleave`    |                                  |\n| `interpose`       | `interpose`     |                                  |\n| `rest`            | `rest`          |                                  |\n| `next`            | -               | Use `rest`.                      |\n| `fnext`           | -               | Use `second`.                    |\n| `nnext`           | -               | Use `rest(rest(\u2026))`              |\n| `drop`            | `drop`          |                                  |\n| `drop-while`      | `drop_while`    |                                  |\n| `nthnext`         | -               |                                  |\n| `take`            | `take`          |                                  |\n| `take-nth`        | `take_nth`      |                                  |\n| `take-while`      | `take_while`    |                                  |\n| `butlast`         | `butlast`       |                                  |\n| `drop-last`       | `drop_last`     |                                  |\n| `flatten`         | `flatten`       |                                  |\n| `reverse`         | -               | Use Python\u2019s `reversed`.         |\n| `sort`            | -               | Use Python\u2019s built-in `sort`.    |\n| `sort-by`         | -               | Use `sort(\u2026, key=your_function)`.|\n| `shuffle`         | `shuffle`       |                                  |\n| `split-at`        | `split_at`      |                                  |\n| `split-with`      | `split_with`    |                                  |\n| `partition`       | \u00a0               |                                  |\n| `partition-all`   | \u00a0               |                                  |\n| `partition-by`    | \u00a0               |                                  |\n| `map`             | -               | Use Python\u2019s built-in `map`.     |\n| `pmap`            | -               |                                  |\n| `replace`         | `replace`       |                                  |\n| `reductions`      | `reductions`    | `(reductions f i c)` becomes `reductions(f, c, i)` |\n| `map-indexed`     | `map_indexed`   |                                  |\n| `seque`           | -               |                                  |\n| `first`           | `first`\u00a0        |                                  |\n| `ffirst`          | `ffirst`        |                                  |\n| `nfirst`          | `nfirst`        |                                  |\n| `second`          | `second`        |                                  |\n| `nth`             | `nth`           |                                  |\n| `when-first`      | -               | (macro)                          |\n| `last`            | `last`          |                                  |\n| `rand-nth`        | -               | Use Python\u2019s `random.choice`.    |\n| `zipmap`          | `zipmap`        |                                  |\n| `into`            | -               |                                  |\n| `reduce`          | -               | Use Python\u2019s built-in `reduce`.  |\n| `set`             | -               | Use Python\u2019s `set`.              |\n| `vec`             | -               | Use Python\u2019s `list`.             |\n| `into-array`      | -               | Use Python\u2019s `list`.             |\n| `to-array-2d`     | -               |                                  |\n| `frequencies`     | -               | Use Python\u2019s `collections.Counter`.|\n| `group-by`        | `group_by`      |                                  |\n| `apply`           | -               | Use the `f(*args)` construct.    |\n| `not-empty`       | -               |                                  |\n| `some`            | `some`          |                                  |\n| `seq?`            | `is_seq`        |                                  |\n| `every?`          | `every`         |                                  |\n| `not-every?`      | `not_every`     |                                  |\n| `not-any?`        | `not_any`       |                                  |\n| `empty?`          | -               |                                  |\n| `doseq`           | -               | Use `for \u2026 in`                   |\n| `dorun`           | `dorun`         |                                  |\n| `doall`           | -               | Use Python\u2019s `list`.             |\n| `realized?`       | -               |                                  |\n| `seq`             | -               |                                  |\n| `vals`            | -               | Use Python\u2019s `dict.values`.      |\n| `keys`            | -               | Use Python\u2019s `dict.keys`.        |\n| `rseq`            | -               |                                  |\n| `subseq`          | \u00a0               |                                  |\n| `rsubseq`         | \u00a0               |                                  |\n| `lazy-seq`        | -               | (macro)                          |\n| `repeatedly`      | `repeatedly`    |                                  |\n| `iterate`         | `iterate`       |                                  |\n| `repeat`          | `repeat`        | `(repeat n x)` becomes `repeat(x, n)`.|\n| `range`           | `range`         | Prefer Python\u2019s `range` for everything but infinite generators.|\n| `line-seq`        | -               | Loop over an `io.BufferedReader`.|\n| `resultset-seq`   | -               |                                  |\n| `re-seq`          | -               | Use Python\u2019s `re.finditer`.      |\n| `tree-seq`        | -               |                                  |\n| `file-seq`        | -               |                                  |\n| `xml-seq`         | -               |                                  |\n| `iterator-seq`    | -               |                                  |\n| `enumeration-seq` | -               |                                  |\n\nWe also implemented `count`, which uses Python\u2019s `len` when possible and\nfallbacks on a `for` loop for other cases.\n\n### Functions (`clj.fns`)\n\n`clj.fns` defines miscellaneous functions as well as functions that work on\nfunctions.\n\n| Clojure           | `clj.fns`       | Comment                          |\n|-------------------|:----------------|----------------------------------|\n| `identity`        | `identity`      |                                  |\n| `partial`         | -               | Use Python\u2019s `functools.partial` |\n| `comp`            | `comp`          |                                  |\n| `complement`      | `complement`    |                                  |\n| `constantly`      | `constantly`    |                                  |",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/bfontaine/clj",
    "keywords": null,
    "license": "Copyright \u00a9 2016 \u2013 Baptiste Fontaine\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "maintainer": null,
    "maintainer_email": null,
    "name": "clj",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/clj/",
    "release_url": "https://pypi.org/project/clj/0.1.0/",
    "requires_python": null,
    "summary": "Clojure-like utilities",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cafaea7a8cce7ee3c6d6f596f2df6903",
          "sha256": "5ff89228e3493882f1d097c855dd4e09e049e4f645c7bbb0e3ae2454b427b89c"
        },
        "downloads": 401,
        "filename": "clj-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "cafaea7a8cce7ee3c6d6f596f2df6903",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8399,
        "upload_time": "2016-09-08T21:30:54",
        "url": "https://files.pythonhosted.org/packages/46/de/6d06743f2327f070602eb1f6dff525c92397de17fb418e206b13945e8468/clj-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "cafaea7a8cce7ee3c6d6f596f2df6903",
        "sha256": "5ff89228e3493882f1d097c855dd4e09e049e4f645c7bbb0e3ae2454b427b89c"
      },
      "downloads": 401,
      "filename": "clj-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "cafaea7a8cce7ee3c6d6f596f2df6903",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8399,
      "upload_time": "2016-09-08T21:30:54",
      "url": "https://files.pythonhosted.org/packages/46/de/6d06743f2327f070602eb1f6dff525c92397de17fb418e206b13945e8468/clj-0.1.0.tar.gz"
    }
  ]
}