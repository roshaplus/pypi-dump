{
  "info": {
    "author": "Peter Urda",
    "author_email": "noreply@urda.cc",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Utilities"
    ],
    "description": "Python NIST Randomness Beacon\n=============================\n\n**WARNING: DO NOT USE BEACON GENERATED VALUES AS SECRET CRYPTOGRAPHIC\nKEYS.**\n\nInstallation\n============\n\nPrerequisites\n-------------\n\nA required library :code:`pycrypto` is used with :code:`nistbeacon`.\n\nUbuntu, and other Linux-based users should have :code:`python3-dev` installed.\n\n.. code:: bash\n\n    apt-get install python3-dev\n\nInstalling :code:`nistbeacon`\n-----------------------------\n\nTo install the beacon library, simply use :code:`pip`:\n\n.. code:: bash\n\n    pip install nistbeacon\n\nBeacon Usage\n============\n\nIt is easy to use the beacon. Most queries are performed through\n:code:`NistBeacon` which produces :code:`NistBeaconValue` objects.\n\nBeacon Sample Code\n------------------\n\n.. code:: python\n\n    from nistbeacon import NistBeacon\n\n    # In the examples below I will be using 1447873020\n    # as my <timestamp> when required\n\n    # Current Record (or next closest)\n    # https://beacon.nist.gov/rest/record/<timestamp>\n    record = NistBeacon.get_record(1447873020)\n\n    # Previous Record\n    # https://beacon.nist.gov/rest/record/previous/<timestamp>\n    prev_record = NistBeacon.get_previous(1447873020)\n\n    # Next Record\n    # https://beacon.nist.gov/rest/record/next/<timestamp>\n    next_record = NistBeacon.get_next(1447873020)\n\n    # First Record\n    # https://beacon.nist.gov/rest/record/1378395540\n    first_record = NistBeacon.get_first_record(download=True)\n\n    # Last Record\n    # https://beacon.nist.gov/rest/record/last\n    last_record = NistBeacon.get_last_record()\n\n    # Verify the record and the record chain\n    record_chain_result = NistBeacon.chain_check(1447873020)\n\nBeacon Methods\n--------------\n\n.. code:: python\n\n    @classmethod\n    def chain_check(cls, timestamp: int) -> bool:\n        \"\"\"\n        Given a record timestamp, verify the chain integrity.\n\n        :param timestamp: UNIX time / POSIX time / Epoch time\n        :return: 'True' if the timestamp fits the chain. 'False' otherwise.\n        \"\"\"\n\n.. code:: python\n\n    @classmethod\n    def get_first_record(\n            cls,\n            download: bool=False\n    ) -> NistBeaconValue:\n        \"\"\"\n        Get the first (oldest) record available. Since the first record\n        IS a known value in the system we can load it from constants.\n\n        :param download: 'True' will always reach out to NIST to get the\n                         first record. 'False' returns a local copy.\n        :return: The first beacon value. 'None' otherwise.\n        \"\"\"\n\n.. code:: python\n\n    @classmethod\n    def get_last_record(cls) -> NistBeaconValue:\n        \"\"\"\n        Get the last (newest) record available.\n\n        :return: The last beacon value. 'None' otherwise.\n        \"\"\"\n\n.. code:: python\n\n    @classmethod\n    def get_next(cls, timestamp: int) -> NistBeaconValue:\n        \"\"\"\n        Given a record timestamp, get the next record available.\n\n        :param timestamp: UNIX time / POSIX time / Epoch time\n        :return: The next beacon value if available. 'None' otherwise.\n        \"\"\"\n\n.. code:: python\n\n    @classmethod\n    def get_previous(cls, timestamp: int) -> NistBeaconValue:\n        \"\"\"\n        Given a record timestamp, get the previous record available.\n\n        :param timestamp: UNIX time / POSIX time / Epoch time\n        :return: The previous beacon value if available. 'None; otherwise\n        \"\"\"\n\n.. code:: python\n\n    @classmethod\n    def get_record(cls, timestamp: int) -> NistBeaconValue:\n        \"\"\"\n        Get a specific record (or next closest)\n\n        :param timestamp: UNIX time / POSIX time / Epoch time\n        :return: The requested beacon value if available. 'None' otherwise.\n        \"\"\"\n\nBeacon Value\n============\n\nThe :code:`NistBeaconValue` objects act as basic python objects.\nAs one would expect, there are a number of properties and methods available\non it.\n\nBeacon Value Instance\n---------------------\n\n.. code:: python\n\n    \"\"\"\n    :param version:\n        Reported NIST randomness beacon version\n\n    :param frequency:\n        The time interval, in seconds, between expected records\n\n    :param timestamp:\n        The time the seed value was generated as the number of\n        seconds since January 1, 1970\n\n    :param seed_value:\n        A seed value represented as a 64 byte (512-bit) hex string\n        value\n\n    :param previous_output_value:\n        The SHA-512 hash value for the previous record - 64 byte hex\n        string\n\n    :param signature_value:\n        A digital signature (RSA) computed over (in order): version,\n        frequency, timeStamp, seedValue, previousHashValue, statusCode\n\n        Note: Except for version, the hash is on the byte\n        representations and not the string representations of the data\n        values\n\n    :param output_value:\n        The SHA-512 hash of the signatureValue as a 64 byte hex string\n\n    :param status_code:\n        The status code value:\n            0 - Chain intact, values all good\n            1 - Start of a new chain of values, previous hash value\n                will be all zeroes\n            2 - Time between values is greater than the frequency, but\n                the chain is still intact\n    \"\"\"\n\nBeacon Value Properties\n-----------------------\n\n.. code:: python\n\n    @property\n    def frequency(self) -> int:\n        \"\"\"\n        :return: The time interval, in seconds, between expected records\n        \"\"\"\n\n.. code:: python\n\n    @property\n    def json(self) -> str:\n        \"\"\"\n        :return: The JSON representation of the beacon, as a string\n        \"\"\"\n\n.. code:: python\n\n    @property\n    def output_value(self) -> str:\n        \"\"\"\n        :return: The SHA-512 hash of the signatureValue as a 64 byte hex string\n        \"\"\"\n\n.. code:: python\n\n    @property\n    def previous_output_value(self) -> str:\n        \"\"\"\n        :return:\n            The SHA-512 hash value for the previous record - 64 byte hex\n            string\n        \"\"\"\n\n.. code:: python\n\n    @property\n    def pseudo_random(self) -> Random:\n        \"\"\"\n        :return:\n            A python `random.Random` object that has been seeded with\n            the value's `output_value`. This is a pseudo-random\n            number generator\n        \"\"\"\n\n.. code:: python\n\n    @property\n    def seed_value(self) -> str:\n        \"\"\"\n        :return:\n            A seed value represented as a 64 byte (512-bit) hex string\n            value\n        \"\"\"\n\n.. code:: python\n\n    @property\n    def signature_value(self) -> str:\n        \"\"\"\n        :return:\n            A digital signature (RSA) computed over (in order): version,\n            frequency, timeStamp, seedValue, previousHashValue, statusCode\n\n            Note: Except for version, the hash is on the byte\n            representations and not the string representations of the data\n            values\n        \"\"\"\n\n.. code:: python\n\n    @property\n    def status_code(self) -> str:\n        \"\"\"\n        :return:\n            The status code value:\n                0 - Chain intact, values all good\n                1 - Start of a new chain of values, previous hash value\n                    will be all zeroes\n                2 - Time between values is greater than the frequency, but\n                    the chain is still intact\n        \"\"\"\n\n.. code:: python\n\n    @property\n    def timestamp(self) -> int:\n        \"\"\"\n        :return:\n            The time the seed value was generated as the number of\n            seconds since January 1, 1970\n        \"\"\"\n\n.. code:: python\n\n    @property\n    def valid_signature(self) -> bool:\n        \"\"\"\n        Shows the result of signature verification\n\n        First, required records (version, frequency, timestamp,\n        seed_value, previous_output_value) are packed together to form\n        a message. This message is then checked against the record's reported\n        signature field WITH the known NIST public key.\n\n        Second, the signature value is independently ran through a SHA512\n        hash. The result of this operation SHOULD equal the record's reported\n        output_value field.\n\n        As long as the result of the 'First' step and'ed with the 'Second'\n        step, the record is considered valid.\n\n        :return: 'True' if this record is valid. 'False' otherwise\n        \"\"\"\n\n.. code:: python\n\n    @property\n    def version(self) -> str:\n        \"\"\"\n        :return: Reported NIST randomness beacon version\n        \"\"\"\n\n.. code:: python\n\n    @property\n    def xml(self) -> str:\n        \"\"\"\n        :return: The XML representation of the beacon, as a string\n        \"\"\"\n\nBeacon Value Methods\n--------------------\n\n.. code:: python\n\n    @classmethod\n    def from_json(cls, input_json: str):\n        \"\"\"\n        Convert a string of JSON which represents a NIST randomness beacon\n        value into a 'NistBeaconValue' object.\n\n        :param input_json: JSON to build a 'Nist RandomnessBeaconValue' from\n        :return: A 'NistBeaconValue' object, 'None' otherwise\n        \"\"\"\n\n.. code:: python\n\n    @classmethod\n    def from_xml(cls, input_xml: str):\n        \"\"\"\n        Convert a string of XML which represents a NIST Randomness Beacon value\n        into a 'NistBeaconValue' object.\n\n        :param input_xml: XML to build a 'NistBeaconValue' from\n        :return: A 'NistBeaconValue' object, 'None' otherwise\n        \"\"\"\n\nContributing\n============\n\nPlease refer to the\n`CONTRIBUTING <https://github.com/urda/nistbeacon/blob/master/.github/CONTRIBUTING.md>`_\ndocument on GitHub\n\nProject Health\n==============\n\n+---------+-----------------+--------------------+\n| Branch  | Build Status    | Coverage Status    |\n+=========+=================+====================+\n| Master  | |MasterBuild|_  | |MasterCoverage|_  |\n+---------+-----------------+--------------------+\n| Develop | |DevelopBuild|_ | |DevelopCoverage|_ |\n+---------+-----------------+--------------------+\n\nReferences\n==========\n\n-  `NIST Randomness Beacon Homepage <https://beacon.nist.gov/home>`_\n-  `NIST Beacon REST API <https://beacon.nist.gov/record/0.1/beacon-0.1.0.xsd>`_\n\n.. |MasterBuild| image:: https://travis-ci.org/urda/nistbeacon.svg?branch=master\n.. _MasterBuild: https://travis-ci.org/urda/nistbeacon\n.. |MasterCoverage| image::  https://codecov.io/gh/urda/nistbeacon/branch/master/graph/badge.svg\n.. _MasterCoverage: https://codecov.io/gh/urda/nistbeacon/branch/master\n\n.. |DevelopBuild| image:: https://travis-ci.org/urda/nistbeacon.svg?branch=develop\n.. _DevelopBuild: https://travis-ci.org/urda/nistbeacon\n.. |DevelopCoverage| image:: https://codecov.io/gh/urda/nistbeacon/branch/develop/graph/badge.svg\n.. _DevelopCoverage: https://codecov.io/gh/urda/nistbeacon/branch/develop",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/urda/nistbeacon",
    "keywords": "",
    "license": "Apache License, Version 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nistbeacon",
    "platform": "",
    "project_url": "https://pypi.org/project/nistbeacon/",
    "release_url": "https://pypi.org/project/nistbeacon/0.9.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python 3 Library to access the NIST Randomness Beacon",
    "version": "0.9.3"
  },
  "releases": {
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "735b2fb26ef0d0563bf2cbdece02e2e7",
          "sha256": "fff16573759a7d57a95baed147bab6d7c55cef361bf43bdc91a4304d60e5e2e7"
        },
        "downloads": 332,
        "filename": "nistbeacon-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "735b2fb26ef0d0563bf2cbdece02e2e7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13142,
        "upload_time": "2015-12-13T02:47:12",
        "url": "https://files.pythonhosted.org/packages/81/9e/cbe7ce555366cb486ec6a2524e6e23ccfe10c2089422c4cef15357aef87b/nistbeacon-0.7.0.tar.gz"
      }
    ],
    "0.8.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e6b0ff5f7706984e06fa406a419d838a",
          "sha256": "e440083e4992ee6ac349c36d6e27e995e0d8878807660b69b9130f79db2af5ed"
        },
        "downloads": 339,
        "filename": "nistbeacon-0.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e6b0ff5f7706984e06fa406a419d838a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13358,
        "upload_time": "2015-12-13T03:22:46",
        "url": "https://files.pythonhosted.org/packages/45/59/e217fcc2fa7c9e9d4b08eaf394f42e96dad81431aa4fce116159789bf944/nistbeacon-0.8.0.tar.gz"
      }
    ],
    "0.8.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6c683426b6e00d605fef52f2613d3fc0",
          "sha256": "2a7df311e3d4c45ee101f0ef00b8d62a80809633d860cee21d7ba08feb93376b"
        },
        "downloads": 353,
        "filename": "nistbeacon-0.8.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6c683426b6e00d605fef52f2613d3fc0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13201,
        "upload_time": "2015-12-13T03:31:34",
        "url": "https://files.pythonhosted.org/packages/ff/d7/7e2be72b94bb32df7d24f4643ebabef0e8e75a8bb16c84a41231a1b181c8/nistbeacon-0.8.1.tar.gz"
      }
    ],
    "0.8.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c3bdeb7790a09ebd150f5ad397c64185",
          "sha256": "9e982d10e8f3771c58b7fe94b2edc3871f5512c9c071c4fe2f581463a9d8bd16"
        },
        "downloads": 395,
        "filename": "nistbeacon-0.8.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c3bdeb7790a09ebd150f5ad397c64185",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13167,
        "upload_time": "2015-12-20T19:53:10",
        "url": "https://files.pythonhosted.org/packages/e1/e8/5649ab97359ba4b3fcad3d4162ab2c467a9f7948402200eb329182b14dcc/nistbeacon-0.8.2.tar.gz"
      }
    ],
    "0.8.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e5e04d734a5218e6ae693b7a18249bfe",
          "sha256": "930a0646dbc0f429dc14587d7f1522ab0efa88dae7b7b2c53d1f97a0842ff034"
        },
        "downloads": 375,
        "filename": "nistbeacon-0.8.3.tar.gz",
        "has_sig": false,
        "md5_digest": "e5e04d734a5218e6ae693b7a18249bfe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13808,
        "upload_time": "2015-12-21T04:19:14",
        "url": "https://files.pythonhosted.org/packages/91/b2/81369732da8f2d2d9759957344825397b77a3ca8a1d4b0fe3f3ab5374c84/nistbeacon-0.8.3.tar.gz"
      }
    ],
    "0.9.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6da7802f4254adc86c51ed2029e3c28c",
          "sha256": "cf137abaf8afed7641f7fc412acae2cf25dfbe0c856e7b37db74db4296c0bac7"
        },
        "downloads": 637,
        "filename": "nistbeacon-0.9.0.tar.gz",
        "has_sig": false,
        "md5_digest": "6da7802f4254adc86c51ed2029e3c28c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14038,
        "upload_time": "2015-12-21T08:37:29",
        "url": "https://files.pythonhosted.org/packages/9e/65/40e16137b4fed8dd8f897eb456afa4b955dc31164a87b2d233e138ee51dd/nistbeacon-0.9.0.tar.gz"
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8bd9b734330fa25f571be9fa88a56139",
          "sha256": "aace6c4a66f1a0461d9808386e5b7be635b8d0af48ce66a4b487e1858bf77f45"
        },
        "downloads": 388,
        "filename": "nistbeacon-0.9.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8bd9b734330fa25f571be9fa88a56139",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 14660,
        "upload_time": "2015-12-31T04:18:00",
        "url": "https://files.pythonhosted.org/packages/61/b9/f5441d91104a566495e5befc6d8f535aa8a5a156c31ef6a3f4de3a9e835f/nistbeacon-0.9.1.tar.gz"
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1ad72acee69d2446c96c88d436b53702",
          "sha256": "f29056be7e0fa77f63c96a568839adaf41c7456cf4ede8f2e24327d0c68c316a"
        },
        "downloads": 122,
        "filename": "nistbeacon-0.9.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1ad72acee69d2446c96c88d436b53702",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15003,
        "upload_time": "2016-08-01T21:20:15",
        "url": "https://files.pythonhosted.org/packages/7d/93/88e550a61f6900232bff74b6f3be3f87e54170a226c65dcadb09d471dfc0/nistbeacon-0.9.2.tar.gz"
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dbd0506cb2acf380095b16c36b6fe94c",
          "sha256": "1119040ac6fb91abcf304832d7e4c4358ea86da810eb64da074976528dd8eb58"
        },
        "downloads": 0,
        "filename": "nistbeacon-0.9.3.tar.gz",
        "has_sig": true,
        "md5_digest": "dbd0506cb2acf380095b16c36b6fe94c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19848,
        "upload_time": "2017-09-11T04:18:25",
        "url": "https://files.pythonhosted.org/packages/1f/56/a1a1440fb07e2e3a7a4264bc07e68e1176c1b7dca3e29739f350d73e39c9/nistbeacon-0.9.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "dbd0506cb2acf380095b16c36b6fe94c",
        "sha256": "1119040ac6fb91abcf304832d7e4c4358ea86da810eb64da074976528dd8eb58"
      },
      "downloads": 0,
      "filename": "nistbeacon-0.9.3.tar.gz",
      "has_sig": true,
      "md5_digest": "dbd0506cb2acf380095b16c36b6fe94c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 19848,
      "upload_time": "2017-09-11T04:18:25",
      "url": "https://files.pythonhosted.org/packages/1f/56/a1a1440fb07e2e3a7a4264bc07e68e1176c1b7dca3e29739f350d73e39c9/nistbeacon-0.9.3.tar.gz"
    }
  ]
}