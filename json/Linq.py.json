{
  "info": {
    "author": "thautwarm",
    "author_email": "twshere@outlook.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "Linq.py\n=======\n\n|Build Status| |License| |codecov|\n\n-  PS: `Coverage\n   Here <https://travis-ci.org/thautwarm/Linq.py/jobs/318643137>`__.\n\nAbout Linq\n----------\n\n| The well-known EDSL in .NET, ``Language Integrated Query``, in my\n  opinion, is one of the best design in .NET environment.\n| Here is an example of C# Linq.\n\n.. code:: c#\n\n    // Calculate MSE loss.\n    /// <param name=\"Prediction\"> the prediction of the neuron network</param>\n    /// <param name=\"Expected\"> the expected target of the neuron network</param>\n\n    Prediction.Zip(Expected, (pred, expected)=> Math.Square(pred-expected)).Average()\n\nIt's so human readable and it doesn't cost much.\n\n-  Reference:\n\n   -  Microsoft .NET general introduction => `LINQ: .NET\n      Language-Integrated\n      Query <https://msdn.microsoft.com/en-us/library/bb308959.aspx>`__.\n   -  Wikipedia => `Language Integrated\n      Query <https://en.wikipedia.org/wiki/Language_Integrated_Query>`__.\n\nAnd there are so many scenes very awkward to Python programmer, using\n``Linq`` might help a lot.\n\nAwkward Scenes in Python\n------------------------\n\n.. code:: python\n\n    seq1 = range(100)\n    seq2 = range(100, 200)\n    zipped = zip(seq1, seq2)\n    mapped = map(lambda ab: ab[0] / ab[1], zipped)\n    grouped = dict();\n    group_fn = lambda x: x // 0.2\n    for e in mapped:\n        group_id = group_fn(e)\n        if group_id not in grouped:\n            grouped[group_id] = [e]\n            continue\n        grouped[group_id].append(e)\n    for e in grouped.items():\n        print(e)\n\n| The codes seems to be too long...\n| Now we extract the function ``group_by``:\n\n.. code:: python\n\n    def group_by(f, container):\n        grouped = dict()\n        for e in container:\n            group_id = f(e)\n            if group_id not in grouped:\n                grouped[group_id] = [e]\n                continue\n            grouped[group_id].append(e)\n        return grouped\n    res = group_by(lambda x: x//0.2, map(lambda ab[0]/ab[1], zip(seq1, seq2)))\n\n| Okay, it's not at fault, however, it makes me upset \u2014\u2014 why do I have\n  to write these ugly codes?\n| **Now, let us try Linq!**\n\n.. code:: python\n\n    from linq import Flow, extension_std\n    seq = Flow(range(100))\n    res = seq.Zip(range(100, 200)).Map(lambda fst, snd : fst/snd).GroupBy(lambda num: num//0.2).Unboxed()\n\nHow does `Linq.py <https://github.com/thautwarm/Linq.py>`__ work?\n-----------------------------------------------------------------\n\n| There is a core class object, ``linq.core.flow.Flow``, which just has\n  one member ``stream``.\n| When you want to get a specific extension method from ``Flow`` object,\n  the ``type`` of its ``stream`` member will be used to search whether\n  the extension method exists, in other words, extension methods are\n  binded with the type(precisely,\n  ``{type.__module__}.{type.__name__}``).\n\n.. code:: python\n\n    class Flow:\n        __slots__ = ['stream']\n\n        def __init__(self, sequence):\n            self.stream = sequence\n\n        def __getattr__(self, k):\n            for cls in self.stream.__class__.__mro__:\n                namespace = Extension['{}.{}'.format(cls.__module__, cls.__name__)]\n                if k in namespace:\n                    return partial(namespace[k], self)\n            raise NameError(\n                \"No extension method named `{}` for {}.\".format(\n                    k, '{}.{}'.format(object.__module__, object.__name__)))\n\n        def __str__(self):\n            return self.stream.__str__()\n\n        def __repr__(self):\n            return self.__str__()\n\nExtension Method\n----------------\n\n| Here are three methods for you to do so.\n| - Firstly, you can use ``extension_std`` to add extension methods for\n  all Flow objects.\n\n-  Next, you use ``extension_class(cls: type)`` to add extension methods\n   for all Flow objects whose member ``stream``'s type is named\n   ``{cls.__module}.{cls.__name__}``.\n\n-  | Finally, you can use\n     ``extension_class(cls_name: str, of_module='builtins')`` to add\n     extension methods for all Flow objects whose member ``stream``'s\n     type is named is named ``{of_module}.{cls_name}``.\n   | (This way to make extension methods is for the **implicit types**\n     in Python, each of which cannot be got except from its instances'\n     meta member ``__class__``.)\n\n.. code:: python\n\n    @extension_std  # For all Flow objects\n    def Add(self, i):\n        return Flow(self.stream + (i.stream if isinstance(i, Flow) else i)))\n\n    @extension_class(int) # Just for type `int`\n    def Add(self, i):\n        return Flow(self.stream + (i.stream if isinstance(i, Flow) else i)))\n\n    @extension_class_name('int',  of_module=int.__module__) # Also for type `int`.\n    def Add(self, i):\n        return Flow(self.stream + (i.stream if isinstance(i, Flow) else i)))\n\nDocuments of Standard Extension Methods\n---------------------------------------\n\nNote: Docs haven't been finished yet. - General(can be used by all Flow\nobjects) - `Unboxed <>`__ - `Sum <>`__ - `Enum <>`__ - `Map <>`__ -\n`Reduce <>`__ - `Then <>`__ - `Each <>`__ - `Aggregate <>`__ -\n`Zip <>`__ - `Sorted <>`__ - `ArgSorted <>`__ - `Group <>`__ -\n`GroupBy <>`__ - `Take <>`__ - `TakeWhile <>`__ - `Drop <>`__ -\n`Concat <>`__ - `ToList <>`__ - `ToTuple <>`__ - `ToDict <>`__ -\n`ToSet <>`__ - `All <>`__ - `Any <>`__\n\n-  List\n\n   -  `Extended <>`__\n   -  `Extend <>`__\n   -  `Sort <>`__\n   -  `Reversed <>`__\n   -  `Reverse <>`__\n\n-  Set\n\n   -  `Intersects <>`__\n   -  `Union <>`__\n\nHow to Contribute\n-----------------\n\n-  Design the `standard\n   library <https://github.com/thautwarm/Linq.py/tree/master/linq/standard>`__\n   for `Linq.py <https://github.com/thautwarm/Linq.py>`__.\n\n-  Write documents for the standard library and tutorials about how to\n   use `Linq.py <https://github.com/thautwarm/Linq.py>`__.\n\n-  Join `LinqPy Room <https://gitter.im/LinqPy/Lobby>`__ to discuss\n   about any aspects of\n   `Linq.py <https://github.com/thautwarm/Linq.py>`__.\n\nFeel free to pull requests here.\n\n.. |Build Status| image:: https://travis-ci.org/thautwarm/Linq.py.svg?branch=master\n   :target: https://travis-ci.org/thautwarm/Linq.py\n.. |License| image:: https://img.shields.io/badge/license-MIT-yellow.svg\n   :target: https://github.com/thautwarm/Linq.py/blob/master/LICENSE\n.. |codecov| image:: https://codecov.io/gh/thautwarm/Linq.py/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/thautwarm/Linq.py\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/thautwarm/Linq.py/",
    "keywords": "Linq",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Linq.py",
    "platform": "",
    "project_url": "https://pypi.org/project/Linq.py/",
    "release_url": "https://pypi.org/project/Linq.py/0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Language Integrated Query for Python",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f48a5023cc05df3aa500f3a48a25c472",
          "sha256": "14c391b0286e76765f0160fb361e71961002eb1f76b5bb8ef6cd98d601b798ac"
        },
        "downloads": -1,
        "filename": "Linq.py-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f48a5023cc05df3aa500f3a48a25c472",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 11845,
        "upload_time": "2017-12-25T07:15:53",
        "url": "https://files.pythonhosted.org/packages/15/11/046f37b2d70e0d273d4e30ada35288ed6661c651ee64562ccf478aa7b40c/Linq.py-0.1-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f48a5023cc05df3aa500f3a48a25c472",
        "sha256": "14c391b0286e76765f0160fb361e71961002eb1f76b5bb8ef6cd98d601b798ac"
      },
      "downloads": -1,
      "filename": "Linq.py-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "f48a5023cc05df3aa500f3a48a25c472",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "size": 11845,
      "upload_time": "2017-12-25T07:15:53",
      "url": "https://files.pythonhosted.org/packages/15/11/046f37b2d70e0d273d4e30ada35288ed6661c651ee64562ccf478aa7b40c/Linq.py-0.1-py3-none-any.whl"
    }
  ]
}