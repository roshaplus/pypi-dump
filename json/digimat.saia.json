{
  "info": {
    "author": "Frederic Hess",
    "author_email": "fhess@st-sa.ch",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "===================\nPython digimat.saia\n===================\n\nThis is a Python 2.7 (Python 3 not fully compatible yet, but will be in the future) module allowing to create **client** and/or **server** `SAIA EtherSBus <https://wiki.wireshark.org/EtherSBus>`_  nodes.\nThis code allow you to create low cost (and hopefully reliable) communication services with any EtherSBus device, reading and writing data from/to them. By data (items),\nwe mean inputs, outputs, flags and registers. More data-types may be supported in the future. In the exemple below, a local\nSBus node with address 253 (station number, or localid, or lid in our terminology) is created. \n\n.. code-block:: python\n\n    >>> from digimat.saia import SAIANode\n    >>> node=SAIANode(253)\n\nCongratulations ! You just have powered up your first EtherSNode device with 2 lines of code. A **background task handle now for you all the network SBus frames**. \nOpen your SAIA PG5 Debugger and try to read/write some data to your node. Of course, you can also talk to other SBus devices directly \nfrom your node.  To give you an idea, you will find a basic `Python interactive session demo here <https://asciinema.org/a/0q7jfTE6Ooj7RPpVBL6bWfIj2>`_. \n\n.. image:: https://st-sa.ch/img/figures/digimat-saia-asciinema.png\n   :width: 480px\n   :target: https://asciinema.org/a/0q7jfTE6Ooj7RPpVBL6bWfIj2\n\nWhen done, shutdown your node properly.\n\n.. code-block:: python\n\n    >>> node.stop()\n    >>> quit()\n\nPlease consider this work as *in progress* (**currently only partially tested**). \nAlways use the latest version of this package, as it is frequently updated ! \n\n\nNon exhaustive features list\n============================\n\nOut of the box features\n\n* EtherSbus Server (expose local data to other EtherSBus nodes)\n* EtherSBus Client (remote access to N remote EtherSBus nodes)\n* Local Server AND Remote Client(s) simultaneous communication support\n* Read/Write of local and remote Inputs/Outputs/Flags/Registers data values trough simple objects .value get/set\n* Background task (thread) managing every server+clients messages once the node is started\n* Registers value encoders allowing working transparently with float, float32 and some other 32 bits encodings\n* Automatic pooling in the background of every declered remote items\n* Node station address automatic resolution\n* Automatic read/write requests aggregations (using one message for multiple items transfer)\n* Prioritized request queuing allowing urgent transactions to be processed first, providing good \n  responsiveness even with tons of pooled items\n* Lightweight enough to be comfortably run on \"poor\" hardware systems (Raspberry Pi)\n* Compatible with the SAIA PG5 Debugger (display/write/clear orders)\n\nOptional features\n\n* Automatic *on-the-fly* local items creation when accessed by remote nodes (without prior declaration). This\n  allows very easy EtherSBus node creation, working *out-of-the-box* once launched\n* Periodic remote node discovering and declaration (trough broadcast messages)\n* Automatic remote node information retrieval (trough READ_DBX blocks transfers),\n  allowing to guess the PG5 compiler generated .map symbol file name ;) you will learn to love your .map files\n* PG5 symbols files (.map) parsing, allowing registers and flags symbolic access !\n* Dynamic objects creation iat runtime when .map file is loaded to enhance Python \n  interactive sessions experience (autocompletion)\n* Logging for local or remote debugging trough TCP/IP.\n\n\nSAIA EtherSBus\n==============\n\nThe EtherSBus is mainly an UDP encapsulated version of the serial SAIA S-Bus. The EtherSBus is `natively implemented <https://www.sbc-support.com/fr/product-category/communication-protocols/>`_\nin any SAIA nodes having a LAN port, providing a very easy way to exchange (read/write) information with 3rd party devices. Using native S-Bus protocol instead \nof something more *standard* like Modbus/IP or BACnet/IP has some advantages\n\n* No (or very few) setup is needed on the existing SAIA CPUs (means no or very few additional costs)\n* Mapping SAIA variables to Modbus/BACnet variables require additional specific config and hardware ressources that you may not have\n* Data communication using more sophisticated protocols like BACnet use more encapsulation around exchanged data. Using EtherSBus\n  is more *lightweight* and efficient.\n\nThe digimat.saia module was mainly created to partially explore the S-Bus mecanisms on Raspberry Pi devices \nbefore starting a deeper implementation on our `Digimat <https://www.st-sa.ch/digimat.html>`_ HVAC BMS infrastructures. SAIA Burgess\nhas absolutely **no implication** on this project and cannot be held responsible for any problem of any kind if you decide to use this module.\n\nAt this time, we don't have access to any S-Bus or EtherSBus protocol official specifications. If you own such documentation,\nplease forward it to us (fhess [at] st-sa [dot] ch), as SAIA doesn't want to provide it ;( If you need to learn about this protocol,\nsome good starting points may include :\n\n* `WireShark EtherSBus plugin source code <https://github.com/boundary/wireshark/blob/master/epan/dissectors/packet-sbus.c>`_\n* `SBPoll Python EtherSBus source code <http://mblogic.sourceforge.net/mbtools/sbpoll.html>`_\n* `SAIA faq <http://www.sbc-support.ch/faq>`_\n* The protocol specification *should* be theorically available upon request per email to SAIA at support [at] saia-pcd [dot] com, \n  but you will need to sign a non disclosure agreement. Ask for the \"**Utilization Agreement for Saia S-Bus Developer Documentation**\" document.\n\nUsing the SAIA PG5 debugger may also help understanding how things works. Wireshark has an excellent protocol decoder \nand you will easily find some .pcap samples by googling \"sbus pcap\". Really useful.\n\nDon't forget that the SAIA dynamic addressing won't be your friend here as you must know the address of the variable\nyou want to access (read/write). Consider fixing your variables to \"static\" addresses in your PG5 configuration (see SAIA FAQ #101533). \nWe have implemented some helpers to provide limited symbolic access using the PD5 .map file if you have it (see chapter \"Symbolic Adressing\" below).\nThis said, have a look on the *Symbolic Addressing* chapter below. There are some tricks available to help you using items tag name ;)\n\nOh, and of course, EtherSBus communication has to be enabled on your PCD device ;)\n\n\nInstallation\n============\n\nNothing specific here, just use pip (which will also install modules dependencies)\n\n.. code-block:: bash\n\n    pip install -U digimat.saia\n\n\nEtherSBus Node (Server)\n=======================\n\nOnce created, the **SAIANode** object will implicitely start a background task responsible for protocol and bus variables management.\nThe task must be stop()ed before the program termination. The node contains a server (allowing other nodes to read an write \ndata to it). The node can also donnect to other remote SBus servers, to read/write remote data. Each server (local or remote)\nhas it's own memory representation (SAIAMemory). Localnode memory is accessible trough node.memory (which is a shortcut to node.server.memory).\n\nThe **SAIAMemory** object handle every SBus variables (**inputs**, **outputs**, **flags**, **registers**). The SAIAMemory object provide a **SAIAItemFlags** object, \naccessible trough a .flags property, itself providing access to every registered SAIAItemFlag object (item). The same principle is used for inputs \n(**SAIAItemInputs**), outputs (**SAIAItemOutputs**) and registers (**SAIAItemRegisters**). Note that there are shortcuts implemented : \n*node.flags* can be used instead of *node.memory.flags*.\n\n.. code-block:: python\n\n    >>> node=SAIANode(253)\n    >>> myflag=node.memory.flags[18]\n\n    >>> myflag\n    <SAIAItemFlag(index=18, value=OFF, age=1s)>\n\n    >>> myflag.value=True\n    >>> print myflag.value\n    True\n\nThe SAIAMemory object is initially created *empty* (with no items declared). Items are dynamically instanciated \"on-the-fly\" when they are accessed. In the example above,\nthe flag 18 is created on the first call, and returned in a SAIAItemFlag object. Subsequent calls to this item will always return the same object instance.\nEach item provide some helpers methods to facilitate value manipulation\n\n.. code-block:: python\n\n    >>> myflag.off()\n    >>> myflag.on()\n    >>> myflag.toggle()\n    >>> myflag.set()\n    >>> myflag.clear()\n    >>> myflag.value=1\n    >>> myflag.value=True\n    >>> print myflag.value\n    1\n\nBy default, \"on-the-fly-item-creation\" is active. This means that any data item (flag, input, output, register) which is accessed (locally or remotely)\nwill be dynamically instanciated if it doesn't exists.  This can create a large amount of unwanted memory consumption in case of abuse or bug. This mode can\nbe disabled, and accessing a non pre-declared item will fail.\n\n.. code-block:: python\n\n    >>> node.memory.enableOnTheFlyItemCreation(False)\n    >>> print node.memory.flags[19]\n    None\n\nItems can be manually-created by \"declaring\" them, individually or by range\n\n.. code-block:: python\n\n    >>> myflag=node.memory.flags.declare(index=18)\n    >>> myflags=node.flags.declareRange(index=100, count=3)\n    >>> print myflags\n    [<SAIAItemFlag(index=100, value=OFF, age=3s)>,\n    <SAIAItemFlag(index=101, value=OFF, age=3s)>,\n    <SAIAItemFlag(index=102, value=OFF, age=3s)>]\n\nInputs, Outputs and Flags are boolean items. Registers are simple \"32 bits uint values\".\n\n.. code-block:: python\n\n    >>> myregister=node.memory.registers[0]\n    >>> myregister.value=100\n    >>> print register.value\n    100\n\nRegisters are always stored as \"raw 32 bits\" values (without encoding). Helpers are available to set/get the register value with common encodings\n\n.. code-block:: python\n\n    >>> myregister.float32=21.5\n    >>> print myregister.value\n    1101791232\n    >>> print myregister.float32\n    21.5\n\nActually, the following encoders/decoders accessors are implemented (each one is a derived class from **SAIAValueFormater**)\n\n+---------------+-----------------------------------------------------+\n| **.float32**  | IEEE float32 encoding (big-endian)                  |\n+---------------+-----------------------------------------------------+\n| **.sfloat32** | Swapped IEEE float32 encoding (little-endian)       |\n+---------------+-----------------------------------------------------+\n| **.ffp**      | Motorola Fast Floating Point encoding (SAIA Float)  |\n+---------------+-----------------------------------------------------+\n| **.float**    | Alias for FFP encodings (easier to remember)        |\n+---------------+-----------------------------------------------------+\n| **.int10**    | x10 rounded value (21.5175 is encoded as 215)       |\n+---------------+-----------------------------------------------------+\n\nAs in SAIA float values *seems* to be FFP encoded (not really sure about that), the ffp encoder is automatically used\nwhen writing a float value to a register (instead of an int)\n\n.. code-block:: python\n\n    >>> myregister.value=2\n    >>> print myregister.value\n    2\n    >>> myregister.value=2.0\n    >>> print myregister.value\n    2147483714\n    >>> print myregister.ffp\n    2.0\n    >>> print myregister.float\n    2.0\n\n\nIf for any reason you want your localnode to be read-only (for any 3rd party EtherSBus client), you can\nlock your local memory\n\n.. code-block:: python\n\n    >>> node.memory.setReadOnly()\n\nThis can be very useful to implement a data-provider-only service, simply ignoring any incoming SBus write requests. Thoses\nrequests will be NAKed by your node.\n\n\nEtherSBus Client\n================\n\nThe node object allow access to (as many) remote EtherSBus node servers you need, registered in a **SAIAServers** object\n\n.. code-block:: python\n\n    >>> server1=node.servers.declare('192.168.0.100')\n    >>> server2=node.servers.declare('192.168.0.101')\n    >>> myRemoteFlag=server1.memory.flags[5]\n\nThe declaration process provide a **SAIAServer** object, containing a **SAIAMemory** object to access remote items. Thus, **local and remote data can be manipulated \nin the same manner**. When a remote data item (input, output, flag, register) is declared, an **automatic pooling mecanism** is launched in \nthe background task (manager). A basic optimiser mecanism try to group many items per request, avoiding to launch 1 request for 1 item refresh.\n\nThe default refresh rate is **60s** per item, modifiable with a myRemoteFlag.setRefreshDelay() call.  Alternatively, the refresh rate can be specified \nfor the whole item collection, with a node.memory.flags.setRefreshDelay() call. Refresh can be triggered on demand with with theses kind of call\n\n.. code-block:: python\n\n    >>> node.servers.refresh() or node.refresh()\n    >>> server.memory.refresh() or server.refresh()\n    >>> server.memory.flags.refresh() or server.flags.refresh()\n    >>> myRemoteFlag.refresh()\n\nYou can query the elapsed time (in seconds) since the last value update (refresh) with the myRemoteFlag.age() method.  If you really need to get the very \nactual value of an item (and not the last refreshed one), you need to initiate an item.refresh() and then \nwait *a certain amount of time* allowing the read queue to be processed by the background task. \nIf you have declared thousand of items, this *may* take a while. The whole thing can be done with a simple item.read(),\nreturning the just refrehed item.value (or None in case of timeout)\n\n.. code-block:: python\n\n    >>> myRemoteFlag.read()\n    True\n\nTheses refresh orders are processed with more priority than other \"standard\" polling-read, providing better responsiveness.\nA timeout can be passed to the read() function. **Changing** (**writing**) the remote data value is fully transparent\n\n.. code-block:: python\n\n    >>> myRemoteFlag.value=1\n\nFor a non local object, **this will automatically queue a write order** in the SAIAServer object with the new given value. **The actual value of the item\nremains unchanged**. **When the write order has been executed**, **a refresh order is immediately triggered**, thus **allowing the actual value to be updated**. \nThis tend to keep the value synchonized with the remote value, even if something goes wrong. As for read() orders, the read-after-write is\nprocessed with **more priority** than standard pooling requests (more responsive). Please note that this approach can be problematic to write fast ON/OFF bursts.\n\nThe background manager try to be as reactive and idle as possible, keeping ressources for your application. We tried to\ntrap most of the possible errors, allowing using this module to be used as a standalone service. Note that automatic SAIA address \nresolution is implemented, so that only remote IP address is required to register a remote node. If known, the SAIA station address *can* be\ngiven during registration (this will avoid the initial address resolution to get the server address).\n\n.. code-block:: python\n\n    >>> server=node.servers.declare(host, lid=54, port=5050)\n\nAs with items, servers can be declared by range for more convenience, by giving the ip address of the first server. The example below creates for you\n10 servers (from 192.168.0.100 to 192.168.0.109, assigned with station addresses 200..209). \n\n.. code-block:: python\n\n    >>> servers=node.servers.declareRange('192.168.0.100', count=10, lid=200, port=5050)\n\nRemember that declared servers can be retrieved at any time by lid or by ip address using the SAIAServers object \n\n.. code-block:: python\n\n    >>> server=node.servers[200]\n    >>> server1=node.servers['192.168.0.100']\n\nThe background task poll each declared servers to maintain their running status (with READ_PCD_STATUS_OWN requests). The actual\nrun status of a server is accessible trough the .status property \n\n.. code-block:: python\n\n    >>> server.status\n    82 (0x52)\n    >>> server.isRunning()\n    True\n\nIf your remote servers are stopped, this can be annoying. You can start them with the .run() method without \nusing the PG5 or the Debugger programs \n\n.. code-block:: python\n\n    >>> server.run()\n    >>> servers.run()\n\n\nData Transfers with Remote Servers\n==================================\n\nThe SAIAServer object contains a **SAIATransferQueue** service allowing to submit and queue **SAIATransfer** jobs in the background, used\nfor processing transfers that require multiple packet exchange like *read-block*, for example. **When a remote server is declared**, **some\nREAD_DBX requests will be automatically done using a SAIATransferReadDeviceInformation with the remote server to retrieve the device \ninformation memory block**, containing this kind of config\n\n.. code-block:: python\n\n    PG5Licensee=DEMONSTRATION VERSION\n    PG5DeveloperID=CH_xxxxxxxx\n    PCName=WINFHE\n    Originator=DEMONSTRATION VERSION\n    PG5Version=V2.2.230\n    ProjectName=Test1\n    DeviceName=Device1\n    PcdType=PCD1.M2220\n    ANSICodePage=1252\n    ProgramVersion=1.0\n    ProgramID=E291E0E08F55CBEC\n    ProgramCRC=061C66CD\n    BuildDateTime=2017/08/18 17:46:50\n    DownloadDateTime=2017/08/18 17:49:47\n\nOnce retrieved, theses informations may be accessed with the server.getDeviceInfo() method (case insensitive)\n\n.. code-block:: python\n\n    >>> print server.getDeviceInfo('DeviceName')\n    >>> 'Device1'\n\nThe DeviceName, DeviceType (PcdType) and BuildDateTime can also be directly accessed as a server's property method\n\n.. code-block:: python\n\n    >>> print server.deviceName\n    >>> 'Device1'\n    >>> print server.deviceType\n    >>> 'PCD1.M2220'\n    >>> print server.buildTime\n    >>> datetime.datetime(2017, 8, 18, 17, 46, 50)\n\nYou can force a deviceInfo refresh later if anything goes wrong\n\n.. code-block:: python\n\n    >>> server.submitTransferReadDeviceInformation()\n\nIf the deviceName is compatible with Python class variable naming convention, the SAIAServer object is automatically mapped (mounted)\nto a variable with the same name (but lowercase and normalized) accessible in the node.servers (SAIAServers) object\n\n.. code-block:: python\n\n    >>> server=node.servers.device1\n\nThis is really useful in interactive sessions when combined with automatic node discovering (see below). \n\n\nNetwork nodes discovering\n=========================\n\nEvery SAIANode has a local SAIAServer object (node.server) allowing local data to be accessed by other SAIA EtherSBus clients. This local server\nhas a manager() periodically called by the background task. You can ask this task to periodically scan the network and potentially discover\nother EtherSBus servers online on the LAN\n\n.. code-block:: python\n\n    >>> node.server.enableNetworkScanner(True)\n\nThis will periodically broadcast a READ_STATIONNUMBER on the network (255.255.255.255) using a SAIATransferDiscoverNodes transfer service.\nWhen discovering mode is active, any response to this message received by the local node (not comming from a local network interface) will be \naccepted an the corresponding remote server will be automatically delared for you. For convenience, the discover process is automatically started in Python interactive mode. In fact,\nyou can decide if network scanning should be active or not at the node creation\n\n.. code-block:: python\n\n    >>> node=SAIANode()              # network scanner is enabled only in interactive sessions\n    >>> node=SAIANode(scanner=True)  # scanner is enabled\n    >>> node=SAIANode(scanner=False) # scanner is disabled\n\n\nSymbolic Addressing\n===================\n\nThe EtherSBus doesn't provide item access by name (symbol name, tag). But **if you own the PG5 .map file generated at compile time**, you may have some help by passing\nthis file during server declaration process. This will create a **SAIASymbols** object associated with the server, ready to serve you the requested **SAIASymbol**\n\n.. code-block:: python\n\n    >>> server=node.servers.declare('192.168.0.48', mapfile='xxxxx.map')\n    >>> print server.symbols.count()\n    2140\n\n    >>> symbol=server.symbols['RIO.Station_A12.Sonde3_16_Cmd_Reduit_Ch'] \n    >>> print symbol.index\n    >>> 2295\n    >>> print symbol.attribute\n    >>> 'f'\n    >>> symbol.isFlag()\n    >>> True\n\n    >>> symbol=server.symbols.register(2295)\n    >>> print symbol.tag\n    >>> 'rio.station_a12.sonde3_16_cmd_reduit_ch' \n\n**This allows bidirectional mapping between symbols names (tag) and items indexes**, **assuming that your map file is uptodate** ! Cool. The symbolic access is in fact implemented\nin all SAIAItem objects index access, so that syntaxes like this are perfectly working\n\n.. code-block:: python\n\n    >>> server.registers[2295].value=99\n    >>> print server.registers['rio.station_a12.sonde3_16_cmd_reduit_ch'].value\n    99\n\n    >>> flag=server.flags.declare('Sonde3_42_Lib')\n    >>> print flag.index\n    >>> 4634\n\nUse it carefully. For ease of use, symbolic access is implemented *case insensitive*. In interactive mode,\nyou can try to **mount** flags and registers symbols (SAIASymbol) as SAIASymbols object variables\nso that the **interpreter autocompletion** will save you some precious keystroke\n\n.. code-block:: python\n\n    >>> symbols=server.symbols\n    >>> symbols.mount()\n\n    >>> print symbols.flags.sonde3_1<TAB>\n    s.sonde3_10_defaut    s.sonde3_13_defaut      s.sonde3_19_defaut\n    s.sonde3_10_lib       s.sonde3_13_lib         s.sonde3_19_setpoint\n    s.sonde3_10_timeout   s.sonde3_13_timeout     s.sonde3_19_temp\n    s.sonde3_11_defaut    s.sonde3_14_defaut      s.sonde3_19_timeout\n    s.sonde3_11_lib       s.sonde3_14_lib         s.sonde3_1_defaut\n    s.sonde3_11_timeout   s.sonde3_14_timeout     s.sonde3_1_timeout\n    s.sonde3_12_defaut    s.sonde3_15_defaut\n    s.sonde3_12_lib       s.sonde3_15_lib\n    s.sonde3_12_timeout   s.sonde3_15_timeout\n\n    >>> print symbols.flags.sonde3_11_timeout.index\n    3936\n\nWhen Python interactive mode is detected, symbols.mount() is automatically called for you. Items declaration can also be passed \nas a SAIASymbol object, so that autocompletion is your friend\n\n.. code-block:: python\n\n    >>> server.flags.declare(symbols.flags.sonde3_11_timeout)\n    >>> server.flags.declare(symbols['sonde3_11_timeout'])\n\nAs said in the last section, we can access the deviceInformation properties, allowing to guess the .map filename. If the deviceName is \"MySuperDevice\", the associated \n.map file produced by the SAIA PG5 compiler will be \"MySuperDevice.map\" by default. In fact, this can help us to do things automagically. \n**When a server is declared, the deviceInformation block is automatically retrieved and then the a try is made to load the default associated .map file**. By default, the map\nfile has to be stored in the current directory. This can be changed with the node.setMapFileStoragePath() method.\n\nIn Python 2.7, you may need to `enable autocompletion <https://stackoverflow.com/questions/246725/how-do-i-add-tab-completion-to-the-python-shell>`_ \non your ~/.pythonrc setup file. Alternatively you can use IPython, Jupyter or something simpler like `ptpython <https://github.com/jonathanslenders/ptpython>`_ for\ninteractive sessions.\n\n\nTips & Tricks\n=============\n\nServers (SAIAServers), items (SAIAItemFlags/Registers/Inputs/Outputs) are *iterable* objects. This allows things like\n\n.. code-block:: python\n\n    >>> server.flags.declareRange(0, 4096)\n    >>> # give a little time allowing the background task to refresh thoses 4K items\n    >>> flagsThatAreON=[flag for flag in server.flags if flag.value is True]\n\n    >>> for flag in server.flags:\n    >>>    flag.value=1\n\nWhen working with registers, hex or bin representation can be useful\n\n.. code-block:: python\n\n    >>> register=server.registers[50]\n    >>> register.value=100\n    >>> register.value\n    100\n    >>> register.hex\n    '0x64'\n    >>> register.bin\n    '1100100'\n\n\nDumping & Debugging\n===================\n\nBy default, the module create and use a socket logger pointing on localhost. Launch your own tcp logger server\nand you will see the EtherSBus frames. If you don't have one, you can try our simple (and dirty) digimat.logserver\n\n.. code-block:: python\n\n    pip install -U digimat.logserver\n    python -m digimat.logserver\n\nYou can apply some basic output filtering with optional \"--filter string\" parameter. You can also give your own logger to the SAIANode\n\n.. code-block:: python\n\n    >>> node=SAIANode(253, logger=mylogger)\n\nIf you want to completely disable the logger, just pass a logger=SAIALogger().null() parameter.  Limited dump-debug can \nalso be done with objects .dump() methods. Try node.dump(), node.memory.dump(), node.memory.flags.dump(), \nnode.servers.dump(), server.dump(), etc. For debugging purposes, you can simulate a remote node \nby registering a remote pointing on yourselfi (woo!)\n\n.. code-block:: python\n\n    >>> server=node.servers.declare('127.0.0.1')\n    >>> localFlag=node.memory.flags[1]\n    >>> remoteFlag=server.memory.flags[1]\n\n    >>> print localFlag.value, remoteFlag.value\n    False, False\n\n    >>> remoteFlag.value=1\n\n    # network data synchronisation is done by the background manager task\n\n    >>> print localFlag.value\n    True\n\nIn this example, localFlag and remoteFlag points to the same data, but the remoteFlag is a networked synchonized \nmirror representation of the localFlag.\n\nSAIA* objects *.__repr__* magic method is redefined to provide some useful information about the current state of the object.\nThis can be useful to gather some informations about your data\n\n.. code-block:: python\n\n    >>> node\n    <SAIANode(lid=253, port=5050, 2 servers, booster=0)>\n\n    >>> node.servers\n    <SAIAServers(2 items)>\n\n    >>> node.servers[101]\n    <SAIAServer(host=192.168.0.49, lid=101, status=0x52)>\n\n    >>> server.memory\n    <SAIAMemory(144 items, queues 0R:0R!:0W)>\n    #\u00a00R  = number of actual pending item-read in queue (background polling/refresh process)\n    #\u00a00R! = number of actual pending urgent item-read in queue (manual refresh, read-after-write)\n    # 0W  = number of actual pending item-write in queue\n\n    >>> server.flags\n    <SAIAFlags(48 items, max=65535, readOnly=0, current=32, refresh=60s)>\n\n    >>> server.flags[28]\n    <SAIAItemFlag(index=28, value=OFF, age=8s, refresh=60s)>\n\n\nDemo Node\n=========\n\nUsing command line interpreter is cool, but for debugging, you will need to launch and relaunch your node. \nHere is a minimal empty node implementation, stopable with <CTRL-C> \n\n.. code-block:: python\n\n    from digimat.saia import SAIANode\n\n    node=SAIANode(253)\n\n    # customize your node here...\n\n    while node.isRunning():\n        try:\n            #\u00a0time.sleep(3.0)\n\n            #\u00a0using integrated node.sleep() will \n            # handle CTRL-C and propagate node.stop()\n            node.sleep(3.0)\n\n            node.dump()\n        except:\n            break\n\n    # node.stop()\n\n\nOpen your SAIA Debugger on this node, and try reading/writing some items. \nYou can also use SBus *clear* requests with i,o,f and r items. For your convenience, \nyou can run the demo node shown above with this simple command line\n\n.. code-block:: python\n\n    python -m digimat.saia\n\n\nTODO\n====\n\nDocumentation is very incomplete. Don't know if this is useful for someone. Tell it to us.\nThere is still some more locking mecanisms to implement making the background task really thread safe. The\nPython GIL make things yet wrongly safe. Python 3 compatibility.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://www.digimat.ch",
    "keywords": "",
    "license": "PSF",
    "maintainer": "",
    "maintainer_email": "",
    "name": "digimat.saia",
    "platform": "",
    "project_url": "https://pypi.org/project/digimat.saia/",
    "release_url": "https://pypi.org/project/digimat.saia/0.0.97/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "SAIA Burgess PCD EtherSBus Client+Server communication module",
    "version": "0.0.97"
  },
  "releases": {
    "0.0.70": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e829fb37c3096860415271d3fe3f3345",
          "sha256": "a75113cc5f68d27caf01f854d67ec8add73caca9fa9549e48d63affb5be5afc1"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.70.tar.gz",
        "has_sig": false,
        "md5_digest": "e829fb37c3096860415271d3fe3f3345",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 149259,
        "upload_time": "2017-08-28T10:45:55",
        "url": "https://files.pythonhosted.org/packages/ca/f0/b0f414ae3dd2dea74df7f935b9e856ca63692f970f63d9f43792e6e17745/digimat.saia-0.0.70.tar.gz"
      }
    ],
    "0.0.71": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1aebca4cd4236e407fad6c2269255a73",
          "sha256": "7efc225a96e085ab85cbd29025aeefc6057859662c69c74507374b012c85a7e5"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.71.tar.gz",
        "has_sig": false,
        "md5_digest": "1aebca4cd4236e407fad6c2269255a73",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 149944,
        "upload_time": "2017-08-29T09:22:16",
        "url": "https://files.pythonhosted.org/packages/eb/7c/7777167763ec45d0c54efa6a9b8e4f9fa74f6df0c4ae8b9751311b3a5728/digimat.saia-0.0.71.tar.gz"
      }
    ],
    "0.0.72": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e19d6b80dfa7d09411042d460795d1ba",
          "sha256": "708c700722bb76c6a14f3d66ba2bd02a92688123abbcc0b119d3e9bfced597f8"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.72.tar.gz",
        "has_sig": false,
        "md5_digest": "e19d6b80dfa7d09411042d460795d1ba",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 149977,
        "upload_time": "2017-08-29T13:53:40",
        "url": "https://files.pythonhosted.org/packages/cd/08/a3b4b660e97ff3701ad87e9ae6e2c4078947188fcc746a0676e0e700330d/digimat.saia-0.0.72.tar.gz"
      }
    ],
    "0.0.73": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8411f135fd1023b8145fd28a498c7c8d",
          "sha256": "0b5c7778794f621be0c763e269a10582f3d4c4e3e57804e8bcfceb9d78593013"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.73.tar.gz",
        "has_sig": false,
        "md5_digest": "8411f135fd1023b8145fd28a498c7c8d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 151266,
        "upload_time": "2017-08-29T20:40:23",
        "url": "https://files.pythonhosted.org/packages/11/98/921ebda5886141ed6d18c15ceb65db680dd9ebb0a6ce027f97f3bcb2f60a/digimat.saia-0.0.73.tar.gz"
      }
    ],
    "0.0.74": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9245fbaa0366d51c73ba88faeb4cdb75",
          "sha256": "780fd4b255cf7eda8a331c465b525118e810d3cf6b4daa1dc09cb82393553fa0"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.74.tar.gz",
        "has_sig": false,
        "md5_digest": "9245fbaa0366d51c73ba88faeb4cdb75",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 151540,
        "upload_time": "2017-08-29T21:09:39",
        "url": "https://files.pythonhosted.org/packages/72/f6/42b3886c11f615e057d2af80d9c4446bc296deab98164388cd384929482a/digimat.saia-0.0.74.tar.gz"
      }
    ],
    "0.0.75": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1340b4ee6aa2390d79856834dc1001be",
          "sha256": "c4006dcc21ce01cc43cc02fd4ff0995f9e1778f78256f699a1eb51565ed38d93"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.75.tar.gz",
        "has_sig": false,
        "md5_digest": "1340b4ee6aa2390d79856834dc1001be",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 151597,
        "upload_time": "2017-08-30T09:16:46",
        "url": "https://files.pythonhosted.org/packages/0f/e1/1711b50509ceec5b23964fb33480bf3abfefdd167c8347f68785af154f43/digimat.saia-0.0.75.tar.gz"
      }
    ],
    "0.0.76": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b00d7b3bd8a5a90006df846293f7103b",
          "sha256": "2bfb80b3660ff9da6066e85e11f52f5957257c30e4983c681d56579724d941a6"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.76.tar.gz",
        "has_sig": false,
        "md5_digest": "b00d7b3bd8a5a90006df846293f7103b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 151643,
        "upload_time": "2017-08-30T09:29:47",
        "url": "https://files.pythonhosted.org/packages/7c/5e/d9ca2fafb24859889f5b6464992eb449f9e6133727dcc40f56e13c396df2/digimat.saia-0.0.76.tar.gz"
      }
    ],
    "0.0.77": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a84a9061403ea826f86d325bf4cce38b",
          "sha256": "818990c427fab912ab6537b33d0c72a94a616ee8f5b67bf0056f707f98b0b0db"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.77.tar.gz",
        "has_sig": false,
        "md5_digest": "a84a9061403ea826f86d325bf4cce38b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 151725,
        "upload_time": "2017-08-30T15:45:32",
        "url": "https://files.pythonhosted.org/packages/8e/c8/b27d8e9b98bb04f22dc4f20e66654b4bdab4b964db827adfb0a8cfd769ea/digimat.saia-0.0.77.tar.gz"
      }
    ],
    "0.0.78": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a1e75367f3d4e199d9faac12da82f37b",
          "sha256": "26a7627d059ea7920ff6bd2030d2a7a5d515042528eba7a60b7949a4f8157e39"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.78.tar.gz",
        "has_sig": false,
        "md5_digest": "a1e75367f3d4e199d9faac12da82f37b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 152127,
        "upload_time": "2017-08-30T19:12:42",
        "url": "https://files.pythonhosted.org/packages/9f/74/3fc9a674fb7b65e81c4037c11575383e05be79e8157509e998c871a59a64/digimat.saia-0.0.78.tar.gz"
      }
    ],
    "0.0.79": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0c5855f6a1a48890c6f493982c0a07b1",
          "sha256": "adaf49d5d39ce2c8c1f8e426a7cd4e2eb75813214805ff0e896b12c5ee5efc0a"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.79.tar.gz",
        "has_sig": false,
        "md5_digest": "0c5855f6a1a48890c6f493982c0a07b1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 152142,
        "upload_time": "2017-08-30T19:19:41",
        "url": "https://files.pythonhosted.org/packages/be/42/8324255d56e5c9bffd7befebff7cf33637993ba62353561c09b4b2a46971/digimat.saia-0.0.79.tar.gz"
      }
    ],
    "0.0.80": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eb642813f0f5f75dedbe617d88311529",
          "sha256": "dcc908723a4997229cbd09fcf236be7b8e6783d7e189d2f8451a5bb134b952dc"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.80.tar.gz",
        "has_sig": false,
        "md5_digest": "eb642813f0f5f75dedbe617d88311529",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 152366,
        "upload_time": "2017-08-31T09:39:18",
        "url": "https://files.pythonhosted.org/packages/f6/6b/9f8bd84b07c291da01d1b88d58ac312bd76062b9ed5b80c13ffa738b6449/digimat.saia-0.0.80.tar.gz"
      }
    ],
    "0.0.81": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a14eb50e88bdfd7a8b93e4ac678ee75c",
          "sha256": "084ee59173f351375bb774298bec79c9f4a5408ca10f2de2c1fe77c10e41904b"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.81.tar.gz",
        "has_sig": false,
        "md5_digest": "a14eb50e88bdfd7a8b93e4ac678ee75c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 153527,
        "upload_time": "2017-08-31T21:22:45",
        "url": "https://files.pythonhosted.org/packages/78/90/98557813ff51c4ac9cf4ca4cb944fb898ea45240655c8d6cb0b8bc8c8a8a/digimat.saia-0.0.81.tar.gz"
      }
    ],
    "0.0.82": [
      {
        "comment_text": "",
        "digests": {
          "md5": "41970cf2398afc6e199e9f02098f285f",
          "sha256": "d0d59063ce5efb422f525930d9a23c26050d073f0e180f809845436b1847fb78"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.82.tar.gz",
        "has_sig": false,
        "md5_digest": "41970cf2398afc6e199e9f02098f285f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 153642,
        "upload_time": "2017-08-31T21:35:54",
        "url": "https://files.pythonhosted.org/packages/57/1b/02795065c34b730fd44cbcb4f210da973b5b8bffd0f4e4463afea7487ea6/digimat.saia-0.0.82.tar.gz"
      }
    ],
    "0.0.83": [
      {
        "comment_text": "",
        "digests": {
          "md5": "71ffc1f59de32c806074eab6c72409b9",
          "sha256": "813e5ddc712704ef1afd2d5801449227cddfae5d00702709e99d7d0dc4e6ced6"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.83.tar.gz",
        "has_sig": false,
        "md5_digest": "71ffc1f59de32c806074eab6c72409b9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 153826,
        "upload_time": "2017-08-31T22:05:18",
        "url": "https://files.pythonhosted.org/packages/3d/17/80ad55e99d30d44fb1f0813bee839f836b7b3e6558338ee059f5c83b2abd/digimat.saia-0.0.83.tar.gz"
      }
    ],
    "0.0.84": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5f00f2732472e0944d05f3d6a5c8657b",
          "sha256": "76ac56a42e9e9c881dc6ca25666f3b2f61c7c8f5739f393fe1414515bbee41e5"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.84.tar.gz",
        "has_sig": false,
        "md5_digest": "5f00f2732472e0944d05f3d6a5c8657b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154000,
        "upload_time": "2017-08-31T22:25:22",
        "url": "https://files.pythonhosted.org/packages/4c/c4/1b2b70bba128005a8bff1b1da3120952452989b6cfb2b5cc7a632be1fefe/digimat.saia-0.0.84.tar.gz"
      }
    ],
    "0.0.85": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2c2c6de22edc956b4e128b100c07acd8",
          "sha256": "c93b3f7dd00733bd008e7d9e699d06198c8bc0081325b5b247a28adb1da404a5"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.85.tar.gz",
        "has_sig": false,
        "md5_digest": "2c2c6de22edc956b4e128b100c07acd8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154116,
        "upload_time": "2017-08-31T22:34:28",
        "url": "https://files.pythonhosted.org/packages/c2/14/7b50248565e8069ae5232bed69f817798fbc9f5cde2f8b6eaeb35a7e6b4e/digimat.saia-0.0.85.tar.gz"
      }
    ],
    "0.0.86": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f249d89ecc279aa1fa9ed1c070c95aaf",
          "sha256": "3084200ad178d8e4b0cf6de72a8b9205db9b06725b743a4f3b8d30c86a7cfb9d"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.86.tar.gz",
        "has_sig": false,
        "md5_digest": "f249d89ecc279aa1fa9ed1c070c95aaf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154432,
        "upload_time": "2017-09-01T10:19:41",
        "url": "https://files.pythonhosted.org/packages/7e/47/4a3fc7e3b42803d24bf9b99e69e63598f27d7294328758bc19ad1f36065d/digimat.saia-0.0.86.tar.gz"
      }
    ],
    "0.0.87": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b1bbfe612c218439aac40209beea897e",
          "sha256": "f0aa23f4384f4126e8f80a8911d762d9ca793c9d90d6133794249a4f3a117e7f"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.87.tar.gz",
        "has_sig": false,
        "md5_digest": "b1bbfe612c218439aac40209beea897e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154625,
        "upload_time": "2017-09-01T10:54:52",
        "url": "https://files.pythonhosted.org/packages/46/c6/e012b553d14d70787d638be0d38f23d1811374e15c3cfd971bc04283b52b/digimat.saia-0.0.87.tar.gz"
      }
    ],
    "0.0.88": [
      {
        "comment_text": "",
        "digests": {
          "md5": "625c70f20fcefc8498aaf40623961f2c",
          "sha256": "e6e8871635751404546d7a93dc8d83618a7c0bb2e0949d81aa1c92d879020fb4"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.88.tar.gz",
        "has_sig": false,
        "md5_digest": "625c70f20fcefc8498aaf40623961f2c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154612,
        "upload_time": "2017-09-01T11:11:42",
        "url": "https://files.pythonhosted.org/packages/21/f5/7434b54e61afa220b1c8f999dab06f2c58f081265b5c72942c71debc1508/digimat.saia-0.0.88.tar.gz"
      }
    ],
    "0.0.89": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6203dbc965754d654df785f50fe82b66",
          "sha256": "d4898acb2e4416968c60e124d37792acb6ad94df144a53d3dfbe9d932b581dd6"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.89.tar.gz",
        "has_sig": false,
        "md5_digest": "6203dbc965754d654df785f50fe82b66",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154713,
        "upload_time": "2017-09-02T19:18:14",
        "url": "https://files.pythonhosted.org/packages/e1/58/9b761fd28c7339ea491e1642248fe2bb84836a102992e95811af2773ef76/digimat.saia-0.0.89.tar.gz"
      }
    ],
    "0.0.90": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8b3c021f342cc071a0e129c8b470ea99",
          "sha256": "ba044eb6c0771309d419cdc2721332565ae49994fd85e9f2bf18d1051df73454"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.90.tar.gz",
        "has_sig": false,
        "md5_digest": "8b3c021f342cc071a0e129c8b470ea99",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 155659,
        "upload_time": "2017-09-04T20:37:40",
        "url": "https://files.pythonhosted.org/packages/0d/47/f84fb290fefd9ac94392999fa8c1a9fe0494900c0a99025ce14d2b16fc3b/digimat.saia-0.0.90.tar.gz"
      }
    ],
    "0.0.91": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6f3c4eeef0e6b7ffb951f26fff80a338",
          "sha256": "d210e0106a442d6f941e8a76fec0a4ede8e062be356f888599ab2fec06218ef2"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.91.tar.gz",
        "has_sig": false,
        "md5_digest": "6f3c4eeef0e6b7ffb951f26fff80a338",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 155660,
        "upload_time": "2017-09-04T21:05:09",
        "url": "https://files.pythonhosted.org/packages/c8/2b/f68032e964b12825e1657a1710d7d253bcd640066f4b691355d5c6260f83/digimat.saia-0.0.91.tar.gz"
      }
    ],
    "0.0.92": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9858c42f506e2fc2f29676b51a9e62ec",
          "sha256": "802b39fec82e421b9e2a981de7782c12a61225f8df4c2b70059eb035419358de"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.92.tar.gz",
        "has_sig": false,
        "md5_digest": "9858c42f506e2fc2f29676b51a9e62ec",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 155684,
        "upload_time": "2017-09-05T09:40:15",
        "url": "https://files.pythonhosted.org/packages/57/4e/024eccb15c7e97bd1e8bfa90c0a686fd8391f9ba77547693b5f09698b136/digimat.saia-0.0.92.tar.gz"
      }
    ],
    "0.0.93": [
      {
        "comment_text": "",
        "digests": {
          "md5": "efdad8302e54990eae4c80b1893a3be0",
          "sha256": "cb3e00f17bbbd0777c9fb42eae3d70d32ee83691872ff6141f0760d8e795cee2"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.93.tar.gz",
        "has_sig": false,
        "md5_digest": "efdad8302e54990eae4c80b1893a3be0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 155742,
        "upload_time": "2017-09-06T11:00:27",
        "url": "https://files.pythonhosted.org/packages/ed/46/031c4574821925a69be57136aa4fa485080b85453ba999d8d7349edb0c8e/digimat.saia-0.0.93.tar.gz"
      }
    ],
    "0.0.94": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cfc386aa1fe47d8e29d6395c441fe7d2",
          "sha256": "14508530adec0d36a5384e392eb3e1b7929bdc76c6977b6254519e534e0bdb16"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.94.tar.gz",
        "has_sig": false,
        "md5_digest": "cfc386aa1fe47d8e29d6395c441fe7d2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 155911,
        "upload_time": "2017-09-06T15:30:52",
        "url": "https://files.pythonhosted.org/packages/2b/78/695642a7f1e1f8b2c3def93adc151c1818107bc50d0fd944f11cc5558520/digimat.saia-0.0.94.tar.gz"
      }
    ],
    "0.0.95": [
      {
        "comment_text": "",
        "digests": {
          "md5": "213c8e064b938030244d25c6bd520db9",
          "sha256": "601938a15242d7e7f4ecbb7a4c9ca82c5f9ee2bb8b74dd487d07a75569bdff16"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.95.tar.gz",
        "has_sig": false,
        "md5_digest": "213c8e064b938030244d25c6bd520db9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 157256,
        "upload_time": "2017-09-07T07:36:06",
        "url": "https://files.pythonhosted.org/packages/f0/d2/92410090220c03fc3b3c634a67e559abf4332312a00044cd74f768ef383b/digimat.saia-0.0.95.tar.gz"
      }
    ],
    "0.0.96": [
      {
        "comment_text": "",
        "digests": {
          "md5": "167721f66231424e2e35c3b9fea3d151",
          "sha256": "3d012e2e6fc90dd659b4a7f3ee9d5ac7b537fa8170fdbff6d8ed62d8c24aa64f"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.96.tar.gz",
        "has_sig": false,
        "md5_digest": "167721f66231424e2e35c3b9fea3d151",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 158561,
        "upload_time": "2017-09-07T07:51:42",
        "url": "https://files.pythonhosted.org/packages/9f/f7/a029a7e8052d218c49c483eedc8c8d7a33162aa30b13371005a89c492875/digimat.saia-0.0.96.tar.gz"
      }
    ],
    "0.0.97": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2948069084379080c50789b1272f7956",
          "sha256": "dafce0a1cd5e2d0e4e63b23e2c57ae7ad03b1c340f4fecfe493fa6d5776e8801"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.97.tar.gz",
        "has_sig": false,
        "md5_digest": "2948069084379080c50789b1272f7956",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 52159,
        "upload_time": "2017-09-07T12:22:03",
        "url": "https://files.pythonhosted.org/packages/fc/8e/e03e690afc130be851d9f92761f31e4a617150b662b0c982847b0dd7dda0/digimat.saia-0.0.97.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2948069084379080c50789b1272f7956",
        "sha256": "dafce0a1cd5e2d0e4e63b23e2c57ae7ad03b1c340f4fecfe493fa6d5776e8801"
      },
      "downloads": 0,
      "filename": "digimat.saia-0.0.97.tar.gz",
      "has_sig": false,
      "md5_digest": "2948069084379080c50789b1272f7956",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 52159,
      "upload_time": "2017-09-07T12:22:03",
      "url": "https://files.pythonhosted.org/packages/fc/8e/e03e690afc130be851d9f92761f31e4a617150b662b0c982847b0dd7dda0/digimat.saia-0.0.97.tar.gz"
    }
  ]
}