{
  "info": {
    "author": "Frederic Hess",
    "author_email": "fhess@st-sa.ch",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "===================\nPython digimat.saia\n===================\n\nThis is a Python 2.7 module allowing to create **client** and/or **server** `SAIA EtherSBus <https://wiki.wireshark.org/EtherSBus>`_  nodes. \nThis code allow you to create low cost (and hopefully reliable) communication services with any EtherSBus device, reading and writing data from/to them. By data (items),\nwe mean inputs, outputs, flags and registers. More data-types can be supported in the future. In the exemple below, a local\nSBus node with address 253 (station number, or localid, or lid in our terminology) is created. \n\n.. code-block:: python\n\n    >>> from digimat.saia import SAIANode\n    >>> node=SAIANode(253)\n\nCongratulations ! You just have powered up your first EtherSNode device with 2 lines of code. A background task handle now for you all the network SBus frames. \nOpen your SAIA PG5 Debugger and try to read/write some data to your node. When done, shutdown your node properly.\n\n.. code-block:: python\n\n    >>> node.stop()\n    >>> quit()\n\n\nSAIA EtherSBus\n--------------\n\nThe EtherSBus is mainly an UDP encapsulated version of the serial SAIA S-Bus. The EtherSBus is `natively implemented <https://www.sbc-support.com/fr/product-category/communication-protocols/>`_\nin any SAIA nodes having a LAN port, providing a very easy way to exchange (read/write) information with 3rd party devices. The digimat.saia module\nwas mainly created to partially explore the S-Bus mecanisms on Raspberry Pi devices before starting a deeper implementation\non our `Digimat <https://www.st-sa.ch/digimat.html>`_ HVAC BMS infrastructure. \n\nPlease consider this work as *in progress* (**buggy and incomplete**).\n\nAt this time, we don't have access to any S-Bus or EtherSBus protocol official specifications. If you own such documentation,\nplease forward it to us (fhess@st-sa.ch), as SAIA doesn't want to provide it ;( If you need to learn about this protocol,\nsome good starting points may include :\n\n* `WireShark EtherSBus plugin source code <https://github.com/boundary/wireshark/blob/master/epan/dissectors/packet-sbus.c>`_\n* `SBPoll Python EtherSBus source code <http://mblogic.sourceforge.net/mbtools/sbpoll.html>`_\n* `SAIA faq <http://www.sbc-support.ch/faq>`_\n\nUsing the SAIA PG5 debugger may also help understanding how things works. Wireshark has an excellent protocol decoder \nand you will find some .pcap samples by googling \"sbus pcap\". Really useful.\n\nDon't forget that the SAIA dynamic addressing won't be your friend here as you must know the address of the variable\nyou want read/write. Consider fixing your variables to \"static\" addresses in your PG5 configuration.\n\n\nInstallation\n------------\n\nNothing specific here, just use pip (which will also install the digimat.jobs module)\n\n.. code-block:: bash\n\n    pip install -U digimat.saia\n\n\nEtherSBus Node (Server)\n-----------------------\n\nOnce created, the SAIANode object will implicitely start a background task responsible for protocol and bus variables management.\nThe task must be stop()ed before the program termination. The node contains a server (allowing other nodes to read an write \ndata to it). The node can also donnect to other remote SBus servers, to read/write remote data. Each server (local or remote)\nhas it's own memory representation (SAIAMemory).\n\nThe SAIAMemory object handle every SBus variables (inputs, outputs, flags, registers). The SAIAMemory object provide a SAIAFlags object, \naccessible trough a .flags property, itself providing access to every registered SAIAItemFlag object (item). The same principle is used for inputs \n(SAIAItemInputs), outputs (SAIAItemOutputs) and registers (SAIAItemRegisters). Note that there are shortcuts implemented : \n*node.flags* can be used instead of *node.memory.flags*.\n\n.. code-block:: python\n\n    >>> myflag=node.memory.flags[18]\n\n    >>> myflag\n    <class 'digimat.saia.memory.SAIAItemFlag'>\n\n    >>> myflag.value=True\n    >>> print myflag.value\n    True\n\nThe SAIAMemory object is initially created *empty* (with no items declared). Items are dynamically instanciated \"on-the-fly\" when they are accessed. In the example above,\nthe flag 18 is created on the first call, and returned in a SAIAItemFlag object. Subsequent calls to this item will always return the same object instance.\nEach item provide some helpers methods to facilitate value manipulation\n\n.. code-block:: python\n\n    myflag.off()\n    myflag.on()\n    myflag.toggle()\n    myflag.set()\n    myflag.clear()\n    myflag.value=1\n    myflag.value=True\n    print myflag.value\n\nBy default, \"on-the-fly-item-creation\" is active. This means that any data item (flag, input, output, register) which is accessed (locally or remotely)\nwill be dynamically instanciated if it doesn't exists.  This can create a large amount of unwanted memory consumption in case of abuse or bug. This mode can\nbe disabled, and accessing a non pre-declared item will fail.\n\n.. code-block:: python\n\n    >>> node.memory.enableOnTheFlyItemCreation(False)\n    >>> print node.memory.flags[19]\n    None\n\nItems can created by \"declaring\" them, individually or by range\n\n.. code-block:: python\n\n    >>> myflag=node.memory.flags.declare(index=18)\n    >>> myflags=node.flags.declareRange(index=100, count=3)\n    >>> print myflags\n    [127.0.0.1(253).SAIAItemFlag[100](value=OFF, age=1502487757s),\n    127.0.0.1(253).SAIAItemFlag[101](value=OFF, age=1502487757s),\n    127.0.0.1(253).SAIAItemFlag[102](value=OFF, age=1502487757s)]\n\nInputs, Outputs and Flags are boolean items. Registers are simple \"32 bits uint values\".\n\n.. code-block:: python\n\n    >>> myregister=node.memory.registers[0]\n    >>> myregister.value=100\n    >>> print register.value\n    100\n\nRegisters are always stored as \"raw 32 bits\" values (without encoding). Helpers are available to set/get the register value with common encodings\n\n.. code-block:: python\n\n    >>> myregister.float32=21.5\n    >>> print myregister.value\n    1101791232\n    >>> print myregister.float32\n    21.5\n\nActually, the following encoders/decoders accessors are implemented\n\n+---------------+-----------------------------------------------------+\n| **.float32**  | IEEE float32 encoding (big-endian)                  |\n+---------------+-----------------------------------------------------+\n| **.sfloat32** | Swapped IEEE float32 encoding (little-endian)       |\n+---------------+-----------------------------------------------------+\n| **.ffp**      | Motorola Fast Floating Point encoding (SAIA Float)  |\n+---------------+-----------------------------------------------------+\n| **.float**    | Alias for FFP encodings (easier to remember)        |\n+---------------+-----------------------------------------------------+\n| **.int10**    | x10 rounded value (21.5175 is encoded as 215)       |\n+---------------+-----------------------------------------------------+\n\nAs in SAIA float values seems to be FFP encoded, the ffp encoder is automatically used\nwhen writing a float value to a register (instead of an int)\n\n.. code-block:: python\n\n    >>> myregister.value=2\n    >>> print myregister.value\n    2\n    >>> myregister.value=2.0\n    >>> print myregister.value\n    2147483714\n    >>> print myregister.fft\n    2.0\n\n\nIf for any reason you want your localnode to be read-only (for any 3rd party EtherSBus client), you can\nlock your local memory\n\n.. code-block:: python\n\n    >>> node.memory.setReadOnly()\n\nThis can be very useful to implement a data-provider-only service, simply ignoring any incoming SBus write requests. Thoses\nrequests will be NAKed by your node.\n\n\nEtherSBus Client\n----------------\n\nThe node object allow access to (as many) remote EtherSBus nodes you need\n\n.. code-block:: python\n\n    >>> server1=node.registerServer('192.168.0.100')\n    >>> server2=node.registerServer('192.168.0.101')\n    >>> myRemoteFlag=server1.memory.flags[5]\n\nThe registration process provide a SAIAServer object, containing a SAIAMemory object to access remote items. Local and remote data can be manipulated \nin the same manner. When a remote data item (input, output, flag, register) is declared, an automatic pooling mecanism is launched in \nthe background task (manager). The default refresh rate is 60s per item,  modifiable with a myRemoteFlag.setRefreshDelay() call.\nAlternatively, the refresh rate can be specified for the whole item collection, with a node.memory.flags.setRefreshDelay() call. \nRefresh can be triggered on demand with a myRemoteFlag.refresh() call or more globally with for example node.memory.flags.refresh() and node.memory.refresh() calls. \nYou can query the elapsed time (in seconds) since the last value update (refresh) with the myRemoteFlag.age() method. Changing the remote data value is fully transparent\n\n.. code-block:: python\n\n    >>> myRemoteFlag.value=1\n\nFor a non local object, this will automatically queue a write order in the SAIAServer object with the new given value. The actual value of the item\nremains unchanged. When the write order has been executed, a refresh order is immediately triggered, thus allowing the actual value to be updated. \nThis tend to keep the value synchonized with the remote value, even if something goes wrong. \n\nThe background manager try to be as reactive and idle as possible, keeping ressources for your application. We tried to\ntrap most of the possible errors, allowing using this module to be used as a standalone service. Note that automatic SAIA address \nresolution is implemented, so that only remote IP address is required to register a remote node. If known, the SAIA station address *can* be\ngiven during registration\n\n.. code-block:: python\n\n    >>> server=node.registerServer(host, lid=54, port=5050)\n\n\nDumping & Debugging\n-------------------\n\nBy default, the module create and use a socket logger pointing on localhost. Launch your own tcp logger server\nand you will see the EtherSBus frames. If you don't have one, you can try our simple (and dirty) digimat.logserver\n\n.. code-block:: python\n\n    pip install -U digimat.logserver\n    python -m digimat.logserver\n\nYou can apply some basic output filtering with optional \"--filter string\" parameter. \nYou can also give your own logger to the SAIANode\n\n.. code-block:: python\n\n    >>> node=SAIANode(253, logger=mylogger)\n\nLimited dump-debug can also be done with objects .dump() methods. Try node.dump(), node.memory.dump(),\nnode.memory.flags.dump(), server.dump(), etc. For debugging purposes, you can simulate a remote node \nby registering a remote pointing on yourselfi (woo!)\n\n.. code-block:: python\n\n    >>> server=node.registerServer('127.0.0.1')\n    >>> localFlag=node.memory.flags[1]\n    >>> remoteFlag=server.memory.flags[1]\n\n    >>> print localFlag.value, remoteFlag.value\n    False, False\n\n    >>> remoteFlag.value=1\n\n    # network data synchronisation is done by the background manager task\n\n    >>> print localFlag.value\n    True\n\nIn this example, localFlag and remoteFlag points to the same data, but the remoteFlag is a networked synchonized \nmirror representation of the localFlag.\n\n\nHello World\n-----------\n\nUsing command line interpreter is cool, but for debugging, you will need to launch and relaunch your node. \nHere is a minimal empty node implementation, stopable with <CTRL-C> \n\n.. code-block:: python\n\n    from digimat.saia import SAIANode\n\n    node=SAIANode(253)\n\n    # customize your node here...\n\n    while node.isRunning():\n        try:\n            #\u00a0time.sleep(3.0)\n\n            #\u00a0using integrated node.sleep() will \n            # handle CTRL-C and propagate node.stop()\n            node.sleep(3.0)\n\n            node.dump()\n        except:\n            break\n\n    # node.stop()\n\n\nOpen your SAIA Debugger on this node, and try reading/writing some items. \nYou can also use SBus *clear* requests with i,o,f and r items. For your convenience, \nyou can run the demo node above with this command line\n\n.. code-block:: python\n\n    python -m digimat.saia\n\nGood luck, Jim.\n\n\nDocumentation\n-------------\n\nTo be continued. Writing in progress ;) don't know if this is useful for someone.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://www.digimat.ch",
    "keywords": "",
    "license": "PSF",
    "maintainer": "",
    "maintainer_email": "",
    "name": "digimat.saia",
    "platform": "",
    "project_url": "https://pypi.org/project/digimat.saia/",
    "release_url": "https://pypi.org/project/digimat.saia/0.0.35/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Digimat Saia EtherSBus (partial) client+server implementation",
    "version": "0.0.35"
  },
  "releases": {
    "0.0.26": [
      {
        "comment_text": "",
        "digests": {
          "md5": "290dc81c6a723c41402ebb1568075253",
          "sha256": "cc83e37b51e4f39acb78c016149ffc1d5ff86fcf1b4a55cf19e6863e0d3aee7e"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.26.tar.gz",
        "has_sig": false,
        "md5_digest": "290dc81c6a723c41402ebb1568075253",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30766,
        "upload_time": "2017-08-15T07:23:14",
        "url": "https://files.pythonhosted.org/packages/12/f0/6c70b16e611cf768303f4ce67cea6debf52ea7435ccb4db7c0512102ecb8/digimat.saia-0.0.26.tar.gz"
      }
    ],
    "0.0.27": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8c4a49ba94d2dde6183e6aee38a62e94",
          "sha256": "30d9075b32186d604726e34f4107d410cdd692a170d53be76d5b098a14047ed7"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.27.tar.gz",
        "has_sig": false,
        "md5_digest": "8c4a49ba94d2dde6183e6aee38a62e94",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30919,
        "upload_time": "2017-08-15T12:50:37",
        "url": "https://files.pythonhosted.org/packages/01/82/e6979da38b133c80f81c13325a1913738bb68b1196dc3606c7855951d4d0/digimat.saia-0.0.27.tar.gz"
      }
    ],
    "0.0.28": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ebd6b75aa4efd5c41ec7d716d8bf34f5",
          "sha256": "14d313f9afd7c296f80cd9bae7963d59e6f6d577224df5d329ea08256ee28c0a"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.28.tar.gz",
        "has_sig": false,
        "md5_digest": "ebd6b75aa4efd5c41ec7d716d8bf34f5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31025,
        "upload_time": "2017-08-16T09:28:01",
        "url": "https://files.pythonhosted.org/packages/5d/d4/1e6bfc35e883b4856169e1405fe908712849a4a6693ac3f16db2ae53a165/digimat.saia-0.0.28.tar.gz"
      }
    ],
    "0.0.29": [
      {
        "comment_text": "",
        "digests": {
          "md5": "91b8a86c8bad25aded1f4ff0de8d5051",
          "sha256": "0ecbdfc1b895a1102b9799a13bfc2a127c2d08f8ea5e2483d4d00c05728b3351"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.29.tar.gz",
        "has_sig": false,
        "md5_digest": "91b8a86c8bad25aded1f4ff0de8d5051",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31301,
        "upload_time": "2017-08-16T11:04:32",
        "url": "https://files.pythonhosted.org/packages/16/cc/a55265b9e41ede783dc3196be58667850fcdde4d052c8af148566a6b32f1/digimat.saia-0.0.29.tar.gz"
      }
    ],
    "0.0.30": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1680d3a74b0f1f4f7db4963abb71bdce",
          "sha256": "255563e2cb6411dcb168b25119ec2447754848e822e1a95b7a7aa26b079041d5"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.30.tar.gz",
        "has_sig": false,
        "md5_digest": "1680d3a74b0f1f4f7db4963abb71bdce",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31357,
        "upload_time": "2017-08-16T11:08:48",
        "url": "https://files.pythonhosted.org/packages/85/7b/bbeeab18acc7297847b19104b1edf52da90994c530544c21034b77d9ad65/digimat.saia-0.0.30.tar.gz"
      }
    ],
    "0.0.31": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cc594709d8eec50b6b31cf0a8a41929d",
          "sha256": "fff2be1dde4b6fc33a7af9a0506a5e91e3fee3b9f89ccc61c765b60d117dd792"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.31.tar.gz",
        "has_sig": false,
        "md5_digest": "cc594709d8eec50b6b31cf0a8a41929d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31571,
        "upload_time": "2017-08-16T13:25:06",
        "url": "https://files.pythonhosted.org/packages/9a/d2/7e004df927a48141bd1678fa6106954d70f6b6e535963674afa63a617157/digimat.saia-0.0.31.tar.gz"
      }
    ],
    "0.0.32": [
      {
        "comment_text": "",
        "digests": {
          "md5": "44100150fad031f0d6f150b6b3aca3a1",
          "sha256": "fe83cf78dbb2cb169148129fced6f586d24c63369f0adb833fbb618ff128d63e"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.32.tar.gz",
        "has_sig": false,
        "md5_digest": "44100150fad031f0d6f150b6b3aca3a1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31741,
        "upload_time": "2017-08-16T14:01:23",
        "url": "https://files.pythonhosted.org/packages/36/a0/3a11520563bebe9825e1feb186e3e7ba77a3d1e001326da65278de8d35cd/digimat.saia-0.0.32.tar.gz"
      }
    ],
    "0.0.33": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a46d4a19420337b61a0b6ec8d9978fe6",
          "sha256": "4166a31ee336c5c9623dc0fcca979022b58753d50490800806a9046bb1e025fd"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.33.tar.gz",
        "has_sig": false,
        "md5_digest": "a46d4a19420337b61a0b6ec8d9978fe6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31951,
        "upload_time": "2017-08-16T14:18:01",
        "url": "https://files.pythonhosted.org/packages/59/d6/8dca1e4003207cf7a262902e2109dca1d41542e8241fb6b8c95ab3066ab3/digimat.saia-0.0.33.tar.gz"
      }
    ],
    "0.0.34": [
      {
        "comment_text": "",
        "digests": {
          "md5": "024ad5264db868ebe434073a5dd9a3a7",
          "sha256": "d9048fb5525d019de9fc18e4167be0a654250903e4d5da9a58b11ef909d40d5e"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.34.tar.gz",
        "has_sig": false,
        "md5_digest": "024ad5264db868ebe434073a5dd9a3a7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32388,
        "upload_time": "2017-08-16T15:40:22",
        "url": "https://files.pythonhosted.org/packages/60/fd/785191e19669f9a2257af5acc36d5bcf4ba8ddea4f2912e9ea0e05ea04ec/digimat.saia-0.0.34.tar.gz"
      }
    ],
    "0.0.35": [
      {
        "comment_text": "",
        "digests": {
          "md5": "27a6e8acae70eaee3951cba28432290c",
          "sha256": "b38bcb2de2176940aea35fdf64a68467399ff0e7c287c77e40fe6e2ca33daaf9"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.35.tar.gz",
        "has_sig": false,
        "md5_digest": "27a6e8acae70eaee3951cba28432290c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32442,
        "upload_time": "2017-08-16T17:08:05",
        "url": "https://files.pythonhosted.org/packages/4c/0e/08c94a95cb074b46e74195648ecf546dfd718390cb86076a418453606ced/digimat.saia-0.0.35.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "27a6e8acae70eaee3951cba28432290c",
        "sha256": "b38bcb2de2176940aea35fdf64a68467399ff0e7c287c77e40fe6e2ca33daaf9"
      },
      "downloads": 0,
      "filename": "digimat.saia-0.0.35.tar.gz",
      "has_sig": false,
      "md5_digest": "27a6e8acae70eaee3951cba28432290c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 32442,
      "upload_time": "2017-08-16T17:08:05",
      "url": "https://files.pythonhosted.org/packages/4c/0e/08c94a95cb074b46e74195648ecf546dfd718390cb86076a418453606ced/digimat.saia-0.0.35.tar.gz"
    }
  ]
}