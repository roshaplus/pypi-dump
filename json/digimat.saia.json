{
  "info": {
    "author": "Frederic Hess",
    "author_email": "fhess@splust.ch",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "===================\nPython digimat.saia\n===================\n\nThis is a Python 2.7 module allowing to create client+server **SAIA EtherSBus** nodes. In the exemple above, a local\nSBus node with address 253 (station number, or localid, or lid in our terminology) is created. \n\n.. code-block:: python\n\n    from digimat.saia import SAIANode\n\n    node=SAIANode(253)\n    node.start()\n\n    [...]\n\n    node.stop()\n\n\nSAIA EtherSBus\n--------------\n\nThis is mainly an UDP encapsulated version of the original serial SAIA S-Bus. The EtherSBus is natively implemented\nin most SAIA nodes, providing an easy way to exchange information with 3rd party devices. The digimat.saia module\nwas mainly created to partially explore the S-Bus mecanisms on Raspberry Pi devices before starting a deeper implementation\non our `Digimat <https://www.st-sa.ch/digimat>`_ HVAC BMS infrastructure. \n\nPlease consider this work as in progress (**buggy and incomplete**).\n\nAt this time, we don't have access to any S-Bus or EtherSBus protocol official specifications. If you own such documentation,\nfeel free to forward to us, as SAIA doesn't seems to provide it. Boooo. Some good starting points may include :\n\n* `SAIA faq <http://www.sbc-support.ch/faq>`_\n* `WireShark EtherSBus plugin source code <https://github.com/boundary/wireshark/blob/master/epan/dissectors/packet-sbus.c>`_\n* `SBPoll Python EtherSBus source code <http://mblogic.sourceforge.net/mbtools/sbpoll.html>`_\n\nUsing the SAIA PG5 debugger may also help understanding how things works. Wireshark (as mentionned above) has an excellent protocol decoder and you will find .pcap samples.\n\nDon't forget that the SAIA dynamic addressing won't be your friend here ! Consider fixing your variables\nto \"static\" addresses for allowing external access.\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    pip install digimat.saia\n\n\nEtherSBus Node\n--------------\n\nOnce created, the SAIANode object will implicitely start a background task responsible fot all the protocol and bus variables management.\nThe task must be stop()ed before the program termination. Basically, the node contain a server (allowing other nodes to read an write \ndata to it). The node can also register other remote SBus servers (acting as a client). Each server (local or remote) has it's own memory representation (SAIAMemory).\n\nThe SAIAMemory object handle every SBus variables (inputs, outputs, flags, registers)\n\n.. code-block:: python\n\n    myflag=node.memory.flags[18]\n    myflag.value=1\n\nThe flag 18 is automatically created a the first call, returned as a SAIAItemFlag object, \nwhich can be used to play with the flag (local or remote).\n\n.. code-block:: python\n\n    myflag.off()\n    myflag.on()\n    myflag.toggle()\n    print myflag.value\n\nThe SAIAMemory provide a SAIAFlags object, accessible trough a .flags property, itself providing access to every \nregistered SAIAItemFlag object. The same principle is used for inputs (SAIAItemInputs), outputs (SAIAItemOutputs) \nand registers (SAIAItemRegisters). Note that there are shortcuts implemented : *node.flags* can be used instead of *node.memory.flags*.\n\nOne note about the \"on the fly object creation\" : this is actually also the case for remote (read/write) requests. In case of abuse,\nthis can create a large of unwanted amount of memory consumption. Objects can also be instanced programatically\n\n.. code-block:: python\n\n    flag54=node.memory.flags.declare(54)\n    myflags=node.flags.declareRange(index=100, count=32)\n\n\nThis can be used to create higher level objects mapped to remote data via SBus. Note that \"on-the-fly\" object \ncreation upon access can be disabled, forcing items to exist before allowing access to it\n\n.. code-block:: python\n\n    node.memory.enableOnTheFlyItemCreation(False)\n\n\nEtherSBus Client\n----------------\n\nThe node allow access to remote nodes (as many as you want) \n\n.. code-block:: python\n\n    server=node.registerServer('192.168.0.100')\n    myflag=server.memory.flags[5]\n\nThe registration process provide a SAIAServer object (which is in fact a... client from the local node point of view). \nLocal and remote data can be manipulated in the same manner. When a remote data object (input, output, flag, register) is\ndeclared, an automatic pooling mecanism is launched in the background task. Refresh can also manually be \ntriggered with a myflag.refresh() call. Changing the data value is also possible with a write\n\n.. code-block:: python\n\n    myflag.value=1\n\nFor a non local object, this will queue a write order with the new value. The actual value remains unchanged. When the write\norder has been executed, a refresh order is immediately triggered, thus allowing the actual value to be updated. This tend\nto keep the value synchonized with the remote value, even if something goes wrong. \n\nThe background manager try to be as reactive and idle as possible, keeping ressources for your application. We tried to\ntrap most of the possibles error, allowing using this module as a standalone service. Note that automatic SAIA address \nresolution is implemented. Server registration needs only ip address, address (=lid) can also be given if needed\n\n.. code-block:: python\n\n    server=node.registerServer(host, lid=54, port=5050)\n\n\nDumping & Debugging\n-------------------\n\nThe module use a lot of tcp logging. Limited debug can alos be done with objects .dump() methods. Try node.dump() or node.memory.dump()\nor node.memory.flags.dump(). The local node can also be used itself, allowing protocol testing\n\n.. code-block:: python\n\n    server=node.registerServer('127.0.0.1')\n    localFlag=node.memory.flags[1]\n    remoteFlag=server.memory.flags[1]\n\nIn this example, localFlag and remoteFlag point to the same data, but the remoteFlag is a networked synchonized \nmirror representation of the localFlag.\n\nThe SAIA Debugger can be partially used with the node. This helps a lot ;)\n\n\nDocumentation\n-------------\n\nTo be continuated. There are some words to say about the registers data encoding. \nWriting in progress ;) don't knows if this is useful for someone.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://www.digimat.ch",
    "keywords": "",
    "license": "PSF",
    "maintainer": "",
    "maintainer_email": "",
    "name": "digimat.saia",
    "platform": "",
    "project_url": "https://pypi.org/project/digimat.saia/",
    "release_url": "https://pypi.org/project/digimat.saia/0.0.12/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Digimat Saia EtherSBus (partial) client+server implementation",
    "version": "0.0.12"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7f3873ab077c288856e39b9222c565d0",
          "sha256": "24e1eb1e3356de12b66dad36c7a41fff9b130689086179d4d9557d12cf7ada38"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7f3873ab077c288856e39b9222c565d0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17156,
        "upload_time": "2017-07-24T20:42:04",
        "url": "https://files.pythonhosted.org/packages/a8/f8/175de0196065fc543aba2a87551c1b622c47dfe3aad53dce193bd1e3a858/digimat.saia-0.0.1.tar.gz"
      }
    ],
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "48cb50f4e774286ccde3fad2ebb97937",
          "sha256": "8690202e92f15622c7a54fd893a9e29705d4ce2d1e344925cb2ceef97004360a"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "48cb50f4e774286ccde3fad2ebb97937",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23774,
        "upload_time": "2017-08-10T08:56:33",
        "url": "https://files.pythonhosted.org/packages/2d/c2/d8e020ff6b9322cc842deb67004158dadac959a2a4fdc295941f627ff609/digimat.saia-0.0.10.tar.gz"
      }
    ],
    "0.0.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "630abaeb364a6b4816d83b7e75dcad82",
          "sha256": "ad62ede80c9318bc67b6aa7b33f8b5df199d4a6c07d2106eac659894fa014c78"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "630abaeb364a6b4816d83b7e75dcad82",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24639,
        "upload_time": "2017-08-10T11:49:11",
        "url": "https://files.pythonhosted.org/packages/3e/fc/b0488fe8a37ec7762179769291f2d797cc065c1b9cde15cf44f9ced85fdb/digimat.saia-0.0.11.tar.gz"
      }
    ],
    "0.0.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "83f3879cbf89e4c3b2af7e2fc745dece",
          "sha256": "6c7e4632596e7aa9e77ac814cb42127abed0c47a2b4e722e5285e45eebd2293d"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "83f3879cbf89e4c3b2af7e2fc745dece",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25329,
        "upload_time": "2017-08-10T13:36:20",
        "url": "https://files.pythonhosted.org/packages/3d/10/5144190c4109f8a56522b93f3e38cc8da3a145282c68ac84dc349cc7ee43/digimat.saia-0.0.12.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4833c1f9a586b3bcc8ad615a868f7a0c",
          "sha256": "0e4d0bc542d1167e750dfd78089723bee2c69454d35ce31adbf3697e00cf3994"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4833c1f9a586b3bcc8ad615a868f7a0c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17526,
        "upload_time": "2017-07-28T16:26:11",
        "url": "https://files.pythonhosted.org/packages/d1/b0/33cf1393c352402bb8c42d07b7501a04a8d784959c7598f101f51e340771/digimat.saia-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "48233c80f409379eac51dbf5a7f03eb5",
          "sha256": "311d1ff590eb75de9184d3bedcc1593c07c73ce113884e19aa5082a55e7b94e3"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "48233c80f409379eac51dbf5a7f03eb5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20789,
        "upload_time": "2017-08-10T07:07:25",
        "url": "https://files.pythonhosted.org/packages/e9/ae/8c5b2ca2ebacb71f042e9970ec923bb2918063433853845c8cf8e15627ad/digimat.saia-0.0.3.tar.gz"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f0cb0814138b15869f9bd3646595eff7",
          "sha256": "723c4900d62c2187e2804c4bdc5634993f5cebda6bc694b5a58a07292c0fc691"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "f0cb0814138b15869f9bd3646595eff7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22052,
        "upload_time": "2017-08-10T07:15:49",
        "url": "https://files.pythonhosted.org/packages/b7/d0/22602047a8b4551af92b5b4e562b5bd7a52848da4fa2b02940739d37d233/digimat.saia-0.0.4.tar.gz"
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ac1f8cec30df27c3cbdf7c37da12d211",
          "sha256": "a0bf41661e36c06dedbefa056439ebbd46b695f99c5e5aac5429a3151869d4e1"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "ac1f8cec30df27c3cbdf7c37da12d211",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22099,
        "upload_time": "2017-08-10T07:35:21",
        "url": "https://files.pythonhosted.org/packages/28/12/c00a03411e430c0e57484d4d905ab332431b91bf4785e4b12976b519f9c2/digimat.saia-0.0.5.tar.gz"
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "059cf3854f48aafedfdc51b9116cf21c",
          "sha256": "66c569b6bb8e55aac53edc04c0231291687503357b33a7746d2dd94d3e975f64"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "059cf3854f48aafedfdc51b9116cf21c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21001,
        "upload_time": "2017-08-10T08:00:13",
        "url": "https://files.pythonhosted.org/packages/2e/16/0c778b261234f522f6da3ece1c8c0a192c880fe229d306c25247a6595652/digimat.saia-0.0.7.tar.gz"
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fae10f82c074f26752329abd50b047d2",
          "sha256": "cf419cf08c1f87bca4f830bb67ad1b6b411c8be62fc13cccee0bacdfcd8d61a7"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "fae10f82c074f26752329abd50b047d2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22351,
        "upload_time": "2017-08-10T08:02:43",
        "url": "https://files.pythonhosted.org/packages/b5/f6/b28d106a22372ef3d8923ded9e300f1a20bab4882a97d7894a532e0b41cd/digimat.saia-0.0.8.tar.gz"
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6c2d4fe20c75e57e23a95d0940aae865",
          "sha256": "a70667cdfb8355a4f7918ddcf5781fe9ed43fab31eb5ff1f70676eb38ffe4494"
        },
        "downloads": 0,
        "filename": "digimat.saia-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "6c2d4fe20c75e57e23a95d0940aae865",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22462,
        "upload_time": "2017-08-10T08:24:25",
        "url": "https://files.pythonhosted.org/packages/97/84/9b47018cae42589bbcef0b6b602cdd9be3134f5b2c464c8a762d98732b49/digimat.saia-0.0.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "83f3879cbf89e4c3b2af7e2fc745dece",
        "sha256": "6c7e4632596e7aa9e77ac814cb42127abed0c47a2b4e722e5285e45eebd2293d"
      },
      "downloads": 0,
      "filename": "digimat.saia-0.0.12.tar.gz",
      "has_sig": false,
      "md5_digest": "83f3879cbf89e4c3b2af7e2fc745dece",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 25329,
      "upload_time": "2017-08-10T13:36:20",
      "url": "https://files.pythonhosted.org/packages/3d/10/5144190c4109f8a56522b93f3e38cc8da3a145282c68ac84dc349cc7ee43/digimat.saia-0.0.12.tar.gz"
    }
  ]
}