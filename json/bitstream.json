{
  "info": {
    "author": "S\u00e9bastien Boisg\u00e9rault",
    "author_email": "Sebastien.Boisgerault@mines-paristech.fr",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Cython",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "**About this document.** It is originally a plain text file using the\n`Markdown <http://daringfireball.net/projects/markdown/>`__ syntax, but\nyou may be reading a HTML, PDF or ReST version instead. In any case, the\ncontents are subject to a `Creative Commons Attribution\n3.0 <http://creativecommons.org/licenses/by/3.0/>`__ license.\n\nWhat is Bitstream ?\n===================\n\nBitstream provides a binary data type with a stream interface for\n`Python <http://www.python.org/>`__.\n\n-  **Binary Data:** the ``BitStream`` class is a linearly ordered\n   container of bits. The standard library is only convenient to manage\n   binary data at the byte level. Consider using BitStream instead,\n   especially you need to address the bit level.\n\n-  **Stream Interface:** you can only read data at the start of a stream\n   and write data at its end. This is a very simple way to interact with\n   binary data, but it is also the pattern that comes naturally in many\n   applications. To manage binary codes and formats, in my experience,\n   random data access is not a requirement.\n\n-  **Python and Numpy Types.** BitStream has built-in readers and\n   writers for the common data types with a standard binary layout:\n   bools, ASCII strings, fixed-size integers and floating-point\n   integers.\n\n-  **User-Defined Types.** The list of supported types and binary\n   representation may be enlarged at will: new readers and writers can\n   be implemented and associated to specific data types.\n\n-  **Performance.** Bitstream is a Python C-extension module that has\n   been optimized for the common use cases. Hopefully, it will be fast\n   enough for your needs ! Under the hood, the\n   `Cython <http://www.cython.org>`__ language and compiler are used to\n   generate this extension module.\n\n-  **Open-Source:** the Bitstream software is distributed under a `MIT\n   license <http://opensource.org/licenses/MIT>`__, its documentation\n   under a `Creative Commons Attribution\n   3.0 <http://creativecommons.org/licenses/by/3.0/>`__ license. The\n   development takes place on\n   `GitHub <https://github.com/boisgera/bitstream>`__ and releases are\n   also available on `PyPi <https://pypi.python.org/pypi/bitstream/>`__.\n\nRequirements & Installation\n===========================\n\nBitstream targets `Python\n2.7 <http://www.python.org/download/releases/2.7>`__, you will need to\ninstall it first.\n\n**TODO:** move NumPy dependency here (? Dunno ...), talk about\nLinux-only platform.\n\nThen, several installation options are available: **TODO:** state\nclearly what one should do depending on the aim.\n\n-  **Easy install:** if the `pip <https://pypi.python.org/pypi/pip>`__\n   package manager is available, execute the following command as root:\n\n   ::\n\n       $ pip install bitstream\n\n   The dependencies of Bitstream will be handled automatically. If you\n   don't have root privileges, use\n   `virtualenv <https://pypi.python.org/pypi/virtualenv>`__.\n\n-  **Install from source:** the releases of Bitstream are available on\n   the `Python Package Index\n   (PyPi) <https://pypi.python.org/pypi/bitstream/>`__. Once you have\n   downloaded and unpacked the archive, to build the Bitstream module,\n   you need `setuptools <https://pypi.python.org/pypi/setuptools>`__.\n   You also need to install the `NumPy <http://www.numpy.org>`__\n   package, version 1.6.1 or later.\n\n   **TODO: test if numpy is automatically download if needed**.\n\n   Then, as root, execute\n\n   ::\n\n       $ python setup.py install\n\n-  **Hack with git:** to experiment with the latest version of\n   Bitstream, clone the GitHub repository:\n\n   ::\n\n       $ git clone git://github.com/boisgera/bitstream.git\n\n   To actually build the module, you will need everything you need to\n   build from source and will execute the same command. If in addition,\n   you want to edit the source files, you will also need the\n   `Cython <http://www.cython.org>`__ compiler, version 0.15.1 or later\n   and will execute instead:\n\n   ::\n\n       $ python setup.py install --cython\n\nGetting Started\n===============\n\nMost of the features of bitstream are available via the ``BitStream``\nclass.\n\n::\n\n    >>> from bitstream import BitStream\n\nThe module is tightly integrated with the\n`NumPy <http://www.numpy.org>`__ library. For convenience, we import all\nsymbols from its top-level module.\n\n::\n\n    >>> from numpy import *\n\nOverview of Bitstream Features\n==============================\n\n::\n\n    >>> stream = BitStream()\n    >>> stream\n    <BLANKLINE>\n    >>> stream.write(True, bool)\n    >>> stream\n    1\n    >>> stream.write(False, bool)\n    >>> stream\n    10\n    >>> stream.write(-128, int8)\n    >>> stream\n    1010000000\n    >>> stream.write(\"AB\", str)\n    >>> stream\n    10100000000100000101000010\n    >>> stream.read(bool, 2)\n    [True, False]\n    >>> stream\n    100000000100000101000010\n    >>> stream.read(int8, 1)\n    array([-128], dtype=int8)\n    >>> stream\n    0100000101000010\n    >>> stream.read(str, 2)\n    'AB'\n    >>> stream\n    <BLANKLINE>\n\nBuilt-in Readers and Writers\n============================\n\nBools\n-----\n\nWrite single bits to a bitstream with the arguments ``True`` and\n``False``:\n\n::\n\n    >>> stream = BitStream()\n    >>> stream.write(False, bool)\n    >>> stream.write(True , bool)\n    >>> stream\n    01\n\nLists of booleans may be used too write multiple bits at once:\n\n::\n\n    >>> stream = BitStream()\n    >>> stream.write([], bool)\n    >>> stream\n    <BLANKLINE>\n    >>> stream.write([False], bool)\n    >>> stream.write([True] , bool)\n    >>> stream\n    01\n    >>> stream.write([False, True], bool)\n    >>> stream\n    0101\n\nThe second argument to the ``write`` method -- the type information --\ncan also be specified with the keyword argument ``type``:\n\n::\n\n    >>> stream = BitStream()\n    >>> stream.write(False, type=bool)\n    >>> stream.write(True , type=bool)\n    >>> stream\n    01\n\nFor single bools or lists of bools, the type information is optional:\n\n::\n\n    >>> stream = BitStream()\n    >>> stream.write(False)\n    >>> stream.write(True)\n    >>> stream.write([])\n    >>> stream.write([False])\n    >>> stream.write([True])\n    >>> stream.write([False, True])\n    >>> stream\n    010101\n\nNumpy ``bool_`` scalars or one-dimensional arrays can be used instead:\n\n::\n\n    >>> bool_\n    <type 'numpy.bool_'>\n    >>> stream = BitStream()\n    >>> stream.write(bool_(False)  , bool)\n    >>> stream.write(bool_(True)   , bool)\n    >>> stream\n    01\n\n    >>> stream = BitStream()\n    >>> empty = array([], dtype=bool)\n    >>> stream.write(empty, bool)\n    >>> stream\n    <BLANKLINE>\n    >>> stream.write(array([False]), bool)\n    >>> stream.write(array([True]) , bool)\n    >>> stream.write(array([False, True]), bool)\n    >>> stream\n    0101\n\nFor such data, the type information is also optional:\n\n::\n\n    >>> stream = BitStream()\n    >>> stream.write(bool_(False))\n    >>> stream.write(bool_(True))\n    >>> stream.write(array([], dtype=bool))\n    >>> stream.write(array([False]))\n    >>> stream.write(array([True]))\n    >>> stream.write(array([False, True]))\n    >>> stream\n    010101\n\nPython and Numpy numeric types are also valid arguments: zero is\nconsidered false and nonzero numbers are considered true.\n\n**Q:** Use a predicate instead (non-zero) ? and check iff ?\n\n::\n\n    >>> small_integers = range(0, 64)\n    >>> stream = BitStream()\n    >>> for integer in small_integers:\n    ...     stream.write(integer, bool)\n    >>> stream\n    0111111111111111111111111111111111111111111111111111111111111111\n    >>> stream = BitStream()\n    >>> for integer in small_integers:\n    ...     stream.write(-integer, bool)\n    >>> stream\n    0111111111111111111111111111111111111111111111111111111111111111\n\n    >>> large_integers = [2**i for i in range(6, 64)]\n    >>> stream = BitStream()\n    >>> for integer in large_integers:\n    ...     stream.write(integer, bool)\n    >>> stream\n    1111111111111111111111111111111111111111111111111111111111\n    >>> stream = BitStream()\n    >>> for integer in large_integers:\n    ...     stream.write(-integer, bool)\n    >>> stream\n    1111111111111111111111111111111111111111111111111111111111\n\n**TODO:** use iinfo(type).min/max\n\n**TODO:** write ``sample(type, r)`` iterator.\n\n::\n\n    >>> def irange(start, stop, r=1.0):\n    ...     i = 0\n    ...     while i < stop:\n    ...         yield i\n    ...         i = max(i+1, int(i*r))\n\n    >>> unsigned = [uint8, uint16, uint32]\n    >>> for integer_type in unsigned:\n    ...     _min, _max = iinfo(integer_type).min, iinfo(integer_type).max\n    ...     for i in irange(_min, _max + 1, r=1.001):\n    ...         integer = integer_type(i)\n    ...         if integer and BitStream(integer, bool) != BitStream(True):\n    ...             type_name = integer_type.__name__\n    ...             print \"Failure for {0}({1})\".format(type_name, integer)\n\n\n\n\n\n    >>> stream = BitStream()\n    >>> stream.write(0.0, bool)\n    >>> stream.write(1.0, bool)\n    >>> stream.write(pi , bool)\n    >>> stream.write(float64(0.0), bool)\n    >>> stream.write(float64(1.0), bool)\n    >>> stream.write(float64(pi) , bool)\n    >>> stream\n    011011\n\n**TODO:** arrays of numeric type (non-bools), written as bools\n\n--------------\n\n**TODO:** Mark all following behaviors as undefined ? Probably safer ...\n\nActually, any single data written as a bool, is conceptually cast into a\nbool first, with the semantics of the ``bool`` constructor. List and\none-dimensional numpy array arguments are considered holders of multiple\ndata, each of which is converted to bool. Any other sequence type\n(strings, tuples, etc.) is considered single data.\n\n::\n\n    >>> bool(\"\")\n    False\n    >>> bool(\" \")\n    True\n    >>> bool(\"A\")\n    True\n    >>> bool(\"AAA\")\n    True\n\n    >>> stream = BitStream()\n    >>> stream.write(\"\", bool)\n    >>> stream.write(\" \", bool)\n    >>> stream.write(\"A\", bool)\n    >>> stream.write(\"AAA\", bool)\n    >>> stream\n    0111\n    >>> stream = BitStream()\n    >>> stream.write([\"\", \" \" , \"A\", \"AAA\"], bool)\n    >>> stream\n    0111\n    >>> stream = BitStream()\n    >>> stream.write(array([\"\", \" \" , \"A\", \"AAA\"]), bool)\n    >>> stream\n    0111\n\n    >>> stream = BitStream()\n    >>> stream.write(    (), bool)\n    >>> stream.write(  (0,), bool)\n    >>> stream.write((0, 0), bool)\n    >>> stream\n    011\n\n    >>> stream = BitStream()\n    >>> stream.write([[], [0], [0, 0]], bool)\n    >>> stream\n    011\n\n    >>> class BoolLike(object):\n    ...     def __init__(self, value):\n    ...         self.value = bool(value)\n    ...     def __nonzero__(self):\n    ...         return self.value\n    >>> false = BoolLike(False)\n    >>> true = BoolLike(True)\n    >>> stream = BitStream()\n    >>> stream.write(false, bool)\n    >>> stream.write(true, bool)\n    >>> stream.write([false, true], bool)\n    >>> stream\n    0101\n\nTODO:\n\n-  direct call to ``write_bool`` (import the symbol first)\n-  reader tests\n\nIntegers\n--------\n\n**TODO**\n\nFloating-Point Numbers\n----------------------\n\n::\n\n    >>> import struct\n    >>> struct.pack(\">d\", pi)\n    '@\\t!\\xfbTD-\\x18'\n\n    >>> stream = BitStream()\n    >>> stream.write(0.0)\n    >>> stream.write([1.0, 2.0, 3.0])\n    >>> stream.write(arange(4.0, 10.0))\n    >>> len(stream)\n    640\n    >>> output = stream.read(float, 10)\n    >>> type(output)\n    <type 'numpy.ndarray'>\n    >>> all(output == arange(10.0))\n    True\n\n    >>> BitStream(1.0) == BitStream(1.0, float) == BitStream(1.0, float64)\n    True\n    >>> BitStream(1.0) == BitStream([1.0]) == BitStream(ones(1))\n    True\n\nThe byte order is big endian:\n\n::\n\n    >>> BitStream(struct.pack(\">d\", pi)) == BitStream(pi)\n    True\n\nExtra Methods\n=============\n\n**TODO:**:\n\n-  length\n\n-  str, repr\n\n-  \\_extend ? Make it public ? This is low-level ... but may be\n   necesssary to implement new readers/writers. Don't specify it now, as\n   we don't specify the offsets / stream state, let the user only rely\n   on the high-level methods.\n\n-  copy\n\n-  hash, comparison.\n\nCustom Writers and Readers\n==========================\n\n::\n\n    >>> import bitstream\n\nDefinition and Registration of Writers and Readers\n--------------------------------------------------\n\nLet's define a writer for the binary representation of natural numbers:\n\n::\n\n    >>> def write_integer(stream, data):\n    ...     if isinstance(data, list):\n    ...         for integer in data:\n    ...             write_integer(stream, integer)\n    ...     else:\n    ...         integer = int(data)\n    ...         if integer < 0:\n    ...             error = \"negative integers cannot be encoded\"\n    ...             raise ValueError(error)\n    ...         bools = []\n    ...         while integer:\n    ...             bools.append(integer & 1)\n    ...             integer = integer >> 1\n    ...         bools.reverse()\n    ...         stream.write(bools, bool)\n\nWe can check that this writer behaves as expected:\n\n::\n\n    >>> stream = BitStream()\n    >>> write_integer(stream, 42)\n    >>> stream\n    101010\n    >>> write_integer(stream, [1, 2, 3])\n    >>> stream\n    10101011011\n\nThen, we can associate it to the type ``int``:\n\n::\n\n    >>> bitstream.register(int, writer=write_integer)\n\nAfter this step, ``BitStream`` will redirect all data of type ``int`` to\nthis writer:\n\n::\n\n    >>> BitStream(42)\n    101010\n    >>> BitStream([1, 2, 3])\n    11011\n\nIf the type information is explicit, other kind of data can use this\nwriter too:\n\n::\n\n    >>> BitStream(uint8(42), int)\n    101010\n    >>> BitStream(\"42\", int)\n    101010\n\nA possible implementation of the corresponding reader is given by:\n\n::\n\n    >>> def read_integer(stream, n=None):\n    ...     if n is not None:\n    ...         error = \"unsupported argument n\"\n    ...         raise NotImplementedError(error)\n    ...     else:\n    ...         integer = 0\n    ...         for _ in range(len(stream)):\n    ...             integer = integer << 1\n    ...             if stream.read(bool):\n    ...                 integer += 1\n    ...     return integer\n\n    >>> read_integer(BitStream(42))\n    42\n\nOnce this reader is registered with\n\n::\n\n    >>> bitstream.register(int, reader=read_integer)\n\nthe calls to ``read_integer`` can be made through the ``read`` method of\n``BitStream``.\n\n::\n\n    >>> BitStream(42).read(int)\n    42\n\nIn all readers, the second argument of readers, named ``n``, represents\nthe number of values to read from the stream. Here, this argument is not\nsupported, instead any call to this reader interprets the complete\nstream content as a single value.\n\nWriter and Reader Factories\n---------------------------\n\nWe actually had a legitimate reason not to support the number of values\nargument in the binary representation reader. Indeed, when the binary\nrepresentation is used to code sequence of integers instead of a single\ninteger, it becomes ambiguous: the same bitstream may represent several\nsequences of integers. For example, we have:\n\n::\n\n    >>> BitStream(255)\n    11111111\n    >>> BitStream([15, 15])\n    11111111\n    >>> BitStream([3, 7, 3, 1])\n    11111111\n    >>> BitStream([3, 3, 3, 3])\n    11111111\n\nWe say that this code is not *self-delimiting*, as there is no way to\nknow where is the boundary between the bits coding for different\nintegers.\n\nFor natural numbers with known bounds, we may solve this problem by\nsetting a number of bits to be used for each integer. However, to do\nthat, we would have to define and register a new writer for every\npossible number of bits. Instead, we register a single but configurable\nwriter, defined by a writer factory.\n\nLet's define a type tag ``uint`` whose instances hold a number of bits:\n\n::\n\n    >>> class uint(object):\n    ...     def __init__(self, num_bits):\n    ...         self.num_bits = num_bits\n\nThen, we define a factory that given a ``uint`` instance, returns a\nstream writer:\n\n::\n\n    >>> def write_uint_factory(instance):\n    ...     num_bits = instance.num_bits\n    ...     def write_uint(stream, data):\n    ...         if isinstance(data, list):\n    ...             for integer in data:\n    ...                 write_uint(stream, integer)\n    ...         else:\n    ...             integer = int(data)\n    ...             if integer < 0:\n    ...                 error = \"negative integers cannot be encoded\"\n    ...                 raise ValueError(error)\n    ...             bools = []\n    ...             for _ in range(num_bits):\n    ...                 bools.append(integer & 1)\n    ...                 integer = integer >> 1\n    ...             bools.reverse()\n    ...             stream.write(bools, bool)\n    ...     return write_uint\n\nFinally, we register this writer factory with ``bitstream``:\n\n::\n\n    >>> bitstream.register(uint, writer=write_uint_factory)\n\nTo select a writer, we use the proper instance of type tag:\n\n::\n\n    >>> BitStream(255, uint(8))\n    11111111\n    >>> BitStream(255, uint(16))\n    0000000011111111\n    >>> BitStream(42, uint(8))\n    00101010\n    >>> BitStream(0, uint(16))\n    0000000000000000\n\n**TODO: reader, give details, comment.**\n\n::\n\n    >>> def read_uint_factory(instance): # use the name factory ?\n    ...     num_bits = instance.num_bits\n    ...     def read_uint(stream, n=None):\n    ...         if n is None:\n    ...             integer = 0\n    ...             for _ in range(num_bits):\n    ...                 integer = integer << 1\n    ...                 if stream.read(bool):\n    ...                     integer += 1\n    ...             return integer\n    ...         else:\n    ...             integers = [read_uint(stream) for _ in range(n)]\n    ...             return integers\n    ...     return read_uint\n\n    >>> bitstream.register(uint, reader=read_uint_factory)\n\n    >>> stream = BitStream([0, 1, 2, 3, 4], uint(8))\n    >>> stream.read(uint(8))\n    0\n    >>> stream.read(uint(8), 1)\n    [1]\n    >>> stream.read(uint(8), 3)\n    [2, 3, 4]\n\nSnapshots (Bitstream state)\n===========================\n\n(random thought for the moment, fondations for the design of snapshots:)\n\n**TODO:** sort doc material vs dev comments, dispatch, polish.\n\nterms: snapshot (state ?), save, restore.\n\n**Goals:**\n\n-  for the implementation and error API point of view: give a mechanism\n   to roll back all operations that may end up with a \"corrupted\" stream\n   (stream content has changed but cannot deliver what the read asked\n   for), so that the mere error scheme that we have now on reader can be\n   upgraded to a real exception handling mechansim: if a read fails, the\n   stream state hasn't changed.\n\n-  offer the user with read-only and on-demand roll-back features.\n\nAdd ``save`` (returns a (read\\_offset, write\\_offset) state) and\n``restore`` (with state as an argument) or ``load`` ? We leverage the\nfact in our stream model, the data is not immutable, but no information\nis lost, only added at the end, so we may always roll back if we need\ntoo.\n\nThese two methods shall enable a true exception management (not mere\nerrors, when shit happens, we still have a usable state), AND at the\nsame time, read-only streams. Maybe higher-level constructs (with\ncontext manager ?) could be useful here to exploit those two schemes.\n\nUPDATE: if we want the save / restor NOT TO CRASH, we have to ensure of\ntwo things\n\n-  first that the state stores the id of the stream ... you can't\n   restore a state that was not created by you.\n\n-  secondly, as restore + write break the immutability of the stream,\n   save/restore pairs should only be applied in reverse order, with\n   possible drops in the restore. That should be check by the stream.\n   What I mean is that save 1, save 2, restore 2, restore 1 os OK, S1,\n   S2, R1 is ok, but S1, S2, R1, S2 is not.\n\nDesign: ``State`` class with ref to the stream attribute,\n``read_offset``, ``write_offset``, implements the comparison (?). Not\nthat simple. The idea behind the comparison is that you should always be\nable to restore an OLDER snapshot but actually if you think of it,\nthat's older in the story of emission of snapshots. So you also have to\nembed a snapshot number and base your comparison on that. As a\nconsequence, bitstream instances have nothing to store but a snapshot\nnumber (the number of the snapshot that was emitted, or 0 if no snapshot\nwas). No, this is more complex, requires some thinking. Need to track\nall restorable states in the stream ? Maybe ...\n\n**TODO.** basic doctest.\n\n::\n\n    >>> stream = BitStream()\n    >>> s0 = stream.save()\n    >>> stream.write(\"A\")\n    >>> s1 = stream.save()\n    >>> stream.write(\"B\")\n    >>> s2 = stream.save()\n    >>> stream.restore(s1)\n    >>> stream == BitStream(\"A\")\n    True\n    >>> stream.restore(s2) # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n    ...\n    ValueError: ...\n    >>> stream.write(\"C\")\n    >>> stream == BitStream(\"AC\")\n    True\n    >>> s3 = stream.save()\n    >>> stream.restore(s1)\n    >>> stream == BitStream(\"A\")\n    True\n    >>> stream.restore(s0)\n    >>> stream == BitStream(\"\")\n    True\n\nMost useful patterns:\n\n**Avoid copies.** Do read/write stuff on a stream and when you're done,\nrestore the original stream intact. Here the snapshot approach avoids a\ncopy of the bitstream. The pattern is a ``try/finally`` with a snapshot\nrestore in the finally clause.\n\n::\n\n    >>> stream = BitStream(\"ABC\")\n    >>> snapshot = stream.save()\n    >>> try:\n    ...     # turn \"ABC\" into \"BCD\"\n    ...     _ = stream.read(str, 1)\n    ...     stream.write(\"D\")\n    ... finally:\n    ...     stream.restore(snapshot)\n    >>> stream == BitStream(\"ABC\")\n    True\n\nIf an exception can be raised during the read/write, the stream is still\nrestored in the original state.\n\n::\n\n    >>> from bitstream import ReadError\n    >>> stream = BitStream(\"ABC\")\n    >>> snapshot = stream.save()\n    >>> try:\n    ...     # read too much data\n    ...     _ = stream.read(str, 4)\n    ... except ReadError:\n    ...     pass\n    ... finally:\n    ...     stream.restore(snapshot)\n    >>> stream == BitStream(\"ABC\")\n    True\n\nRemark: the pattern breaks if during the actions, an earlier snapshot is\nrestored.\n\n**Support true exceptions in readers.** Som reading actions may fail,\nbut you are not able to tell beforehand, you have to start a sequence of\nsmaller reads before you know of the big read call is going to work. A\nreader with a proper exception support will restore the orginal state of\nthe stream before raising the exception if something goes wrong.\nTypically, that means a reader code with the structure:\n\n::\n\n    >>> def reader(stream, n=None):\n    ...     snapshot = stream.save()\n    ...     try:\n    ...         pass # do what you have to do.\n    ...     except ReadError: \n    ...         stream.restore(snapshot)\n    ...         raise\n\nMake convenience functions (with context managers) for those use cases ?\nFor the \"light-weight copy\" that would be easy (under what name ?) but\nfor the reader, that's not obvious, the reader developer may be willing\nto analyze the error and customize the error message before a re-raise\n...\n\nUnit Tests\n==========\n\nThe text version of the document you are reading is also an executable\nspecification. Check that the code examples produce the expected results\nwith\n\n::\n\n    $ python -m doctest -v manual.txt\n\nExamples\n========\n\nUnary coder / Rice coder ? Huffman tree/table coder ?",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/boisgera/bitstream",
    "keywords": null,
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "bitstream",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/bitstream/",
    "release_url": "https://pypi.org/project/bitstream/2.0.3/",
    "requires_python": null,
    "summary": "A Binary Data Type with a Stream Interface",
    "version": "2.0.3"
  },
  "releases": {
    "0.0.0.dev": [],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fccbe04b819210aaec8de4630b136ac5",
          "sha256": "df9784df89841328706f5989a0c0db7ba77a5951e0fe6fdc87c7ee99885686cc"
        },
        "downloads": 1508,
        "filename": "bitstream-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "fccbe04b819210aaec8de4630b136ac5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 138034,
        "upload_time": "2014-11-02T17:39:13",
        "url": "https://files.pythonhosted.org/packages/62/0f/afd21fb5ff129c6815ca785d7c41fe0273ad7a55ebc62f3ec0e1f61c4311/bitstream-1.0.0.tar.gz"
      }
    ],
    "1.0.0-alpha.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c73b0d126fd68236bff9d32ed89b9529",
          "sha256": "e7becef62312bdcdec4089571514e0e5e4de6209a5cd316a500c6b03df973b47"
        },
        "downloads": 2539,
        "filename": "bitstream-1.0.0-alpha.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c73b0d126fd68236bff9d32ed89b9529",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 111811,
        "upload_time": "2013-05-04T11:08:53",
        "url": "https://files.pythonhosted.org/packages/59/1b/fad42a6d0e0ee80f9952dcb8b01e97d8842d110f2c35b229132fa53b327b/bitstream-1.0.0-alpha.1.tar.gz"
      }
    ],
    "1.0.0-alpha.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3c97d89d01434b3cd68c0f5fe9c31c59",
          "sha256": "e270f60bfb0b312f3fac762c0ffb122a26fd585a4b24c4caa6e27dce5565ea8e"
        },
        "downloads": 2251,
        "filename": "bitstream-1.0.0-alpha.10.tar.gz",
        "has_sig": false,
        "md5_digest": "3c97d89d01434b3cd68c0f5fe9c31c59",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 135191,
        "upload_time": "2013-11-19T11:40:02",
        "url": "https://files.pythonhosted.org/packages/22/b5/d29a57a4788d6ee16e394deab143f00a5324270a1897ebdcbe4099b22dd4/bitstream-1.0.0-alpha.10.tar.gz"
      }
    ],
    "1.0.0-alpha.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "50106c77c80edd20060d242861421e40",
          "sha256": "367e7f1535400b1994360f11d2f852f9c32d4475c1d77c685b0fdf0f4f9bc342"
        },
        "downloads": 2215,
        "filename": "bitstream-1.0.0-alpha.11.tar.gz",
        "has_sig": false,
        "md5_digest": "50106c77c80edd20060d242861421e40",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 135286,
        "upload_time": "2013-12-01T13:37:25",
        "url": "https://files.pythonhosted.org/packages/a7/d1/9864ca052aedffa513c58443325924b52c40abcef4ca142c02a194907a7c/bitstream-1.0.0-alpha.11.tar.gz"
      }
    ],
    "1.0.0-alpha.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ed53897c94765a060f2f36840c192316",
          "sha256": "db051502486486b969ebe4f001334669727ef111441968d95a759efa1b3b0041"
        },
        "downloads": 2206,
        "filename": "bitstream-1.0.0-alpha.12.tar.gz",
        "has_sig": false,
        "md5_digest": "ed53897c94765a060f2f36840c192316",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 135409,
        "upload_time": "2013-12-01T14:23:49",
        "url": "https://files.pythonhosted.org/packages/eb/52/d40cf61db5e5c1d7b5d4a75cb4b3885cae61b061b4d895c01844dbbda8d6/bitstream-1.0.0-alpha.12.tar.gz"
      }
    ],
    "1.0.0-alpha.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b8433e023b5b2322649a47dec1d2c7a2",
          "sha256": "104c110aa9a3df64fc37dfdf8e8802872d78f85e8083a57a961da698fef16034"
        },
        "downloads": 2326,
        "filename": "bitstream-1.0.0-alpha.13.tar.gz",
        "has_sig": false,
        "md5_digest": "b8433e023b5b2322649a47dec1d2c7a2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 135325,
        "upload_time": "2013-12-01T14:40:02",
        "url": "https://files.pythonhosted.org/packages/a6/b6/e589b684c26f6f165590cc55e39c46b1a3eeb61a36f18b686690adbb3291/bitstream-1.0.0-alpha.13.tar.gz"
      }
    ],
    "1.0.0-alpha.14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5cf2eff799dae9156b59826f7ab273c4",
          "sha256": "85175b67a21d90598f61c59734c091aed71c302c6fbb79c598a572ce720e34f8"
        },
        "downloads": 2185,
        "filename": "bitstream-1.0.0-alpha.14.tar.gz",
        "has_sig": false,
        "md5_digest": "5cf2eff799dae9156b59826f7ab273c4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 135252,
        "upload_time": "2014-02-18T19:13:07",
        "url": "https://files.pythonhosted.org/packages/17/53/698fd4ef3b164a948260b146983bd55d878a281fd1ade200c8a5c85ad1bb/bitstream-1.0.0-alpha.14.tar.gz"
      }
    ],
    "1.0.0-alpha.15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f114e200a6582e154d2cf1317e87a7cd",
          "sha256": "d4fdba54f4eaee62a090b1b721bcaf6b897bdf8857178fb960823e465b6fbcc5"
        },
        "downloads": 2428,
        "filename": "bitstream-1.0.0-alpha.15.tar.gz",
        "has_sig": false,
        "md5_digest": "f114e200a6582e154d2cf1317e87a7cd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 135176,
        "upload_time": "2014-03-10T13:45:09",
        "url": "https://files.pythonhosted.org/packages/1a/1f/90f439180054efd9d7ba804e1e73efafd1b5afdb015f2af004d2566d0a4c/bitstream-1.0.0-alpha.15.tar.gz"
      }
    ],
    "1.0.0-alpha.16": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e777d013d3b174d504beac3099931037",
          "sha256": "5686e1c38dc5a357395e3624fad07f63cacd66de3011f37e07b6b928e577f563"
        },
        "downloads": 1552,
        "filename": "bitstream-1.0.0-alpha.16.tar.gz",
        "has_sig": false,
        "md5_digest": "e777d013d3b174d504beac3099931037",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 138099,
        "upload_time": "2014-10-27T17:11:38",
        "url": "https://files.pythonhosted.org/packages/57/be/29483c670885643061152449d7b0d24bd182e062f31dafca0660c73464eb/bitstream-1.0.0-alpha.16.tar.gz"
      }
    ],
    "1.0.0-alpha.17": [
      {
        "comment_text": "",
        "digests": {
          "md5": "758e96b5c48de8f752b8b8fcb0777051",
          "sha256": "32d24754f2a2df32b033f25a7a0fa8f454a192a3de4678c95d22516f76c580bb"
        },
        "downloads": 1549,
        "filename": "bitstream-1.0.0-alpha.17.tar.gz",
        "has_sig": false,
        "md5_digest": "758e96b5c48de8f752b8b8fcb0777051",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 138101,
        "upload_time": "2014-10-27T17:19:05",
        "url": "https://files.pythonhosted.org/packages/ee/50/147dca02ab8c7fde4faf6990c424e85f7d7e933e954d13b169773bf57d51/bitstream-1.0.0-alpha.17.tar.gz"
      }
    ],
    "1.0.0-alpha.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c4257c078fbd856d833fac1b701099cd",
          "sha256": "d363dc127fd56236f4e98c6efc4c980a22d417b4bc450ade097d9302d55a5d6c"
        },
        "downloads": 2532,
        "filename": "bitstream-1.0.0-alpha.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c4257c078fbd856d833fac1b701099cd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 102472,
        "upload_time": "2013-05-04T15:26:51",
        "url": "https://files.pythonhosted.org/packages/23/13/5dbbea990fc338786380b285f8eafed47065c2364a10d23164bceeeeb18e/bitstream-1.0.0-alpha.2.tar.gz"
      }
    ],
    "1.0.0-alpha.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1006d62bc538af66316131df5454b0d7",
          "sha256": "31e0182c5ce0c7f42f2e58fab174cd4fd2c7b8ce13110365e27827f77bedaa8a"
        },
        "downloads": 2494,
        "filename": "bitstream-1.0.0-alpha.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1006d62bc538af66316131df5454b0d7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 107387,
        "upload_time": "2013-05-04T19:41:33",
        "url": "https://files.pythonhosted.org/packages/54/17/d09a7e5fbd9eb26038276963b097a6f0dc6471d1011107ca0466965fae71/bitstream-1.0.0-alpha.3.tar.gz"
      }
    ],
    "1.0.0-alpha.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1693febf1955bd0e641ee2167cb77fd7",
          "sha256": "08d0a050f0be2ca43ce3fc60d8af6b754b4d66dae8f8289a9032a067395f124d"
        },
        "downloads": 2499,
        "filename": "bitstream-1.0.0-alpha.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1693febf1955bd0e641ee2167cb77fd7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 111782,
        "upload_time": "2013-05-04T19:44:54",
        "url": "https://files.pythonhosted.org/packages/e1/1e/07a1344cda10257bde017c01c171e17b31c5ae92879f751747b947b93b65/bitstream-1.0.0-alpha.4.tar.gz"
      }
    ],
    "1.0.0-alpha.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d925f253019c81259eccf767c0256fbe",
          "sha256": "0eb7c94d4020c1e82acacc066ad1b00d162e2754048a3261ec248a0bfca84f74"
        },
        "downloads": 2433,
        "filename": "bitstream-1.0.0-alpha.5.tar.gz",
        "has_sig": false,
        "md5_digest": "d925f253019c81259eccf767c0256fbe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 113436,
        "upload_time": "2013-05-14T20:41:29",
        "url": "https://files.pythonhosted.org/packages/ab/00/233906fe5a94d1594f459b42b9fcc42995e4688a36e8e609aad748421f98/bitstream-1.0.0-alpha.5.tar.gz"
      }
    ],
    "1.0.0-alpha.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2b72b9de5997b9aa85e68bac748b6445",
          "sha256": "922929631684cd50ed7c433e3a5d1b2c288935f82f50cf01eb94fbebe38cb9bd"
        },
        "downloads": 2596,
        "filename": "bitstream-1.0.0-alpha.6.tar.gz",
        "has_sig": false,
        "md5_digest": "2b72b9de5997b9aa85e68bac748b6445",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 113591,
        "upload_time": "2013-05-14T20:44:56",
        "url": "https://files.pythonhosted.org/packages/52/46/2a77d5a3d8ead4de8dc3303fad34ae1e055390754a9deef562a6b7a92ba2/bitstream-1.0.0-alpha.6.tar.gz"
      }
    ],
    "1.0.0-alpha.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b8907c26de7635981457894fad2552c0",
          "sha256": "c7ef08cc4d7db58be1b0914f6b11d361bbedc75856fb284ec31a599a734c3477"
        },
        "downloads": 2226,
        "filename": "bitstream-1.0.0-alpha.7.tar.gz",
        "has_sig": false,
        "md5_digest": "b8907c26de7635981457894fad2552c0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 135176,
        "upload_time": "2013-11-19T11:15:40",
        "url": "https://files.pythonhosted.org/packages/b9/27/a39ce78b9629e00364298525563cec2ffb4ba6de9f205463a4960690b0c1/bitstream-1.0.0-alpha.7.tar.gz"
      }
    ],
    "1.0.0-alpha.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "26d8a6d6e1c76e12bb7763815b8c0b5d",
          "sha256": "3758883b2393aad8e6531982b0cc8c871f91e0738aa1592a4c475a66b7622262"
        },
        "downloads": 2234,
        "filename": "bitstream-1.0.0-alpha.8.tar.gz",
        "has_sig": false,
        "md5_digest": "26d8a6d6e1c76e12bb7763815b8c0b5d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 135111,
        "upload_time": "2013-11-19T11:23:06",
        "url": "https://files.pythonhosted.org/packages/37/28/b737e7a7eecc47cfa2ead4248a019f6d584e91af8a1c5ca6f1fe27858038/bitstream-1.0.0-alpha.8.tar.gz"
      }
    ],
    "1.0.0-alpha.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3fd84608b38f784c2d947f628824e091",
          "sha256": "b4e8582d68222870003f1d34c892fedc427b92b3170f2bbc07dfe8004dc6ac8b"
        },
        "downloads": 2229,
        "filename": "bitstream-1.0.0-alpha.9.tar.gz",
        "has_sig": false,
        "md5_digest": "3fd84608b38f784c2d947f628824e091",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 135107,
        "upload_time": "2013-11-19T11:27:54",
        "url": "https://files.pythonhosted.org/packages/b0/21/86e519f6dbf7da3225541e44fb87663fb29f81e6be71efa4e8fb476f4498/bitstream-1.0.0-alpha.9.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fa9c5c67067e5097822f21f2b5987d7b",
          "sha256": "b591d5a22393a80d898a5314a0b4b731fba174f8a6338258accf2d61a82b9a06"
        },
        "downloads": 1473,
        "filename": "bitstream-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fa9c5c67067e5097822f21f2b5987d7b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 138013,
        "upload_time": "2014-11-02T17:58:31",
        "url": "https://files.pythonhosted.org/packages/f7/5b/88fb4e0ca045e716fb2bb1870f0f26a94898481d5b98609493743d584243/bitstream-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "143c0069b41a532bb0523dbccd4dc31f",
          "sha256": "3f4cdc2d25c1d6b09468ab6bfd00002e20dbe87f236a13195781165f61236e58"
        },
        "downloads": 1438,
        "filename": "bitstream-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "143c0069b41a532bb0523dbccd4dc31f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 138014,
        "upload_time": "2014-11-03T07:31:55",
        "url": "https://files.pythonhosted.org/packages/ff/fc/2d1dd77c957e3c2be1bd847c545ada2aae18c6f0e0c60417f08ba2335f4f/bitstream-1.0.2.tar.gz"
      }
    ],
    "1.0.2-alpha.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a2ddc227964abc380d00a9038acc99d0",
          "sha256": "c72db88ef91dc00a7c534f9c14e78315f7694eb92874fdf5af0eee7fdc963cae"
        },
        "downloads": 1445,
        "filename": "bitstream-1.0.2-alpha.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a2ddc227964abc380d00a9038acc99d0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 138006,
        "upload_time": "2014-11-03T07:30:06",
        "url": "https://files.pythonhosted.org/packages/b8/e7/c0d5a22f60dda22a1c75316d5a5d9ca434dea8cb19ec77bd9f57d4e3b695/bitstream-1.0.2-alpha.1.tar.gz"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b294859b1089ea7ec65ca79bd6d2ea33",
          "sha256": "7e2e007d94aed424efa161adfa1d8633aaae31e911ecd8ca7236068cd801cb80"
        },
        "downloads": 1433,
        "filename": "bitstream-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b294859b1089ea7ec65ca79bd6d2ea33",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 137964,
        "upload_time": "2014-11-03T07:33:55",
        "url": "https://files.pythonhosted.org/packages/42/65/9fc2402e66b1a838dacb867337b14e76ecb8a2640619727bb19f88dcf71f/bitstream-1.0.3.tar.gz"
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9b9d4d245e9df1cc23e729cc55a63252",
          "sha256": "a2399ce41975b75ba0b988d33d0d894b79199c19a6131cbeb73d58b040fb1317"
        },
        "downloads": 1771,
        "filename": "bitstream-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9b9d4d245e9df1cc23e729cc55a63252",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 137965,
        "upload_time": "2014-11-03T08:41:48",
        "url": "https://files.pythonhosted.org/packages/1e/c2/f508c8ccecd49bd2f4abd691d81af470470340502dd6bda5e80317ec1954/bitstream-1.0.4.tar.gz"
      }
    ],
    "1.0.4-alpha.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "21abfdbce897d035c4983b079bc7fde0",
          "sha256": "a6c3c7bbb5a57ac34af0087225ff7e12aa0c51792501d9f82238f2f58bdecb73"
        },
        "downloads": 1420,
        "filename": "bitstream-1.0.4-alpha.1.tar.gz",
        "has_sig": false,
        "md5_digest": "21abfdbce897d035c4983b079bc7fde0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 137995,
        "upload_time": "2014-11-03T08:33:57",
        "url": "https://files.pythonhosted.org/packages/f3/4f/628b5b92f589e916a6fda9ca255beea44c76b6f807dae44469166d6b1c08/bitstream-1.0.4-alpha.1.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "37cf327296b134931b8fc9b3b45bde12",
          "sha256": "1c6728ab6f926bd23337c58ef9bff1a6dce3ba6bf1d3dc0995c8a200b30ec7e0"
        },
        "downloads": 1484,
        "filename": "bitstream-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "37cf327296b134931b8fc9b3b45bde12",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154995,
        "upload_time": "2014-11-02T17:40:06",
        "url": "https://files.pythonhosted.org/packages/8f/57/4112f8d8331e9b39e1716c34e7cd1c2af2aed2f1ebcee5e907e2c5f1d5c8/bitstream-2.0.0.tar.gz"
      }
    ],
    "2.0.0-alpha.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5b5b8b5d8a0473b0b83ed8adb5a937d9",
          "sha256": "27eaa2be28ddaef32c0495cca0505e612fbcef92804fff22967ae486dd2a95f3"
        },
        "downloads": 1585,
        "filename": "bitstream-2.0.0-alpha.2.tar.gz",
        "has_sig": false,
        "md5_digest": "5b5b8b5d8a0473b0b83ed8adb5a937d9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 155069,
        "upload_time": "2014-10-27T16:59:53",
        "url": "https://files.pythonhosted.org/packages/bc/65/58796e0dae5652d258845e3972a2d20bb9fcc179572f071ca7181412637f/bitstream-2.0.0-alpha.2.tar.gz"
      }
    ],
    "2.0.0-alpha.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9251b5ec1bf5f37c6f773ff1d7df5637",
          "sha256": "d56a76165b311296e8d294e9896bba15386413e2ec8d0728c24a98f33f604e96"
        },
        "downloads": 1525,
        "filename": "bitstream-2.0.0-alpha.3.tar.gz",
        "has_sig": false,
        "md5_digest": "9251b5ec1bf5f37c6f773ff1d7df5637",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 155062,
        "upload_time": "2014-10-27T17:13:50",
        "url": "https://files.pythonhosted.org/packages/24/00/fa7e5d1012ef4851677e8161b375e6596cff9900ec264364585a86315cb6/bitstream-2.0.0-alpha.3.tar.gz"
      }
    ],
    "2.0.0-alpha.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9ae5e52a3e7c05baea1704000626486a",
          "sha256": "e72b9c711c5162ea25ca4c238e43dafffb38cf90af09d46109307e27d5e46993"
        },
        "downloads": 1528,
        "filename": "bitstream-2.0.0-alpha.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9ae5e52a3e7c05baea1704000626486a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 155060,
        "upload_time": "2014-10-27T17:16:37",
        "url": "https://files.pythonhosted.org/packages/24/89/e11ccf46a86f0e9790636ac6acf9c687ad2d581035b3f8338bd702ddde23/bitstream-2.0.0-alpha.4.tar.gz"
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c1ca9e76a5c1e381a3f31f208925a975",
          "sha256": "98ecb1e91844555f0ad60614b81ddc739085948fa3e8f9171e574cb42fb94053"
        },
        "downloads": 1495,
        "filename": "bitstream-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c1ca9e76a5c1e381a3f31f208925a975",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154977,
        "upload_time": "2014-11-02T17:59:38",
        "url": "https://files.pythonhosted.org/packages/33/e2/53986b3d5d2a0980214844a542872817dbada352dab95c17e7bae5a87c5b/bitstream-2.0.1.tar.gz"
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "12131b6398f7e0eccc378bc1bb2b450d",
          "sha256": "911183c2aadc75b1d3f679bfce245c0b99bdbcfd3fb556e0f071170c8f4eae3f"
        },
        "downloads": 1450,
        "filename": "bitstream-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "12131b6398f7e0eccc378bc1bb2b450d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154943,
        "upload_time": "2014-11-03T07:35:53",
        "url": "https://files.pythonhosted.org/packages/5e/ba/48a987bdd11c8c3f96102a06ee7907bbef6d5ff4d84c3f174892ff1d1bd1/bitstream-2.0.2.tar.gz"
      }
    ],
    "2.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0028f51bb299734d9fa25befe9d22c29",
          "sha256": "6eb6e8ff77fddc2b51827d3a20aa0a1febd7cbbff3879d745f655eada1a2382e"
        },
        "downloads": 2890,
        "filename": "bitstream-2.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "0028f51bb299734d9fa25befe9d22c29",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 155209,
        "upload_time": "2014-11-03T09:15:45",
        "url": "https://files.pythonhosted.org/packages/4d/72/c1d6c90dd8d3997f218b6ca849dcb0235233be7c26e26e30f302e9b7284b/bitstream-2.0.3.tar.gz"
      }
    ],
    "2.0.3-alpha.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0f6d15c83e263c5bad8fb8bb65e3bf0d",
          "sha256": "8e786db0e1552843ef2e845cd5007a49d9613b50e97430db378104533f122526"
        },
        "downloads": 1447,
        "filename": "bitstream-2.0.3-alpha.1.tar.gz",
        "has_sig": false,
        "md5_digest": "0f6d15c83e263c5bad8fb8bb65e3bf0d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154983,
        "upload_time": "2014-11-03T07:39:15",
        "url": "https://files.pythonhosted.org/packages/95/8c/b0d712cb7acc352cc4646b7b19563ec91d4aef5b434049334d3623ac52ff/bitstream-2.0.3-alpha.1.tar.gz"
      }
    ],
    "2.0.3-alpha.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e5d0ea7b2e3d7b99b6aeb39adcd01609",
          "sha256": "9d58b3aa053fd59923b667c8eb46f2a8e584ab91b591f39690adbbad6864f1b4"
        },
        "downloads": 1417,
        "filename": "bitstream-2.0.3-alpha.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e5d0ea7b2e3d7b99b6aeb39adcd01609",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154967,
        "upload_time": "2014-11-03T07:40:42",
        "url": "https://files.pythonhosted.org/packages/46/f8/02110f0333e39fc55ffb8779201f5c0b2599834a46037fb73e497deb43e8/bitstream-2.0.3-alpha.2.tar.gz"
      }
    ],
    "2.0.3-alpha.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b5cd0c6619dad53a39b773b803efabc9",
          "sha256": "4fe07733e47191381230c4785410037602de5c32feca55debf1f4fc117ae2d45"
        },
        "downloads": 1431,
        "filename": "bitstream-2.0.3-alpha.3.tar.gz",
        "has_sig": false,
        "md5_digest": "b5cd0c6619dad53a39b773b803efabc9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 154970,
        "upload_time": "2014-11-03T07:42:19",
        "url": "https://files.pythonhosted.org/packages/e5/a0/03317d633b4b4720cc07caf4c3baf7be8d13f72afd4c0ce77eef7f8dff6d/bitstream-2.0.3-alpha.3.tar.gz"
      }
    ],
    "2.0.3-alpha.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "95a8d0f87c5ae62e66a01441efad0b96",
          "sha256": "147edde006843e0971fa0854a6fa27100a7c0ceb82f61e51972f7164fa704eb8"
        },
        "downloads": 1446,
        "filename": "bitstream-2.0.3-alpha.4.tar.gz",
        "has_sig": false,
        "md5_digest": "95a8d0f87c5ae62e66a01441efad0b96",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 155232,
        "upload_time": "2014-11-03T09:13:38",
        "url": "https://files.pythonhosted.org/packages/3b/4a/29537e72a12cf1d794f49cc7c2740365a9030d5017638aaaaa5154941a3f/bitstream-2.0.3-alpha.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0028f51bb299734d9fa25befe9d22c29",
        "sha256": "6eb6e8ff77fddc2b51827d3a20aa0a1febd7cbbff3879d745f655eada1a2382e"
      },
      "downloads": 2890,
      "filename": "bitstream-2.0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "0028f51bb299734d9fa25befe9d22c29",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 155209,
      "upload_time": "2014-11-03T09:15:45",
      "url": "https://files.pythonhosted.org/packages/4d/72/c1d6c90dd8d3997f218b6ca849dcb0235233be7c26e26e30f302e9b7284b/bitstream-2.0.3.tar.gz"
    }
  ]
}