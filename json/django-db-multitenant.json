{
  "info": {
    "author": "mike wakerly",
    "author_email": "opensource@hoho.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "# django-db-multitenant\n\nProvides a simple multi-tenancy solution for Django based on the concept\nof having a **single tenant per database**.\n\nThis application is still experimental, but is being used in\nproduction by the author. Contributions and discussion are welcome.\n\n**Latest Version:** v0.1.3, September 10, 2016 ([changelog](CHANGELOG.md))\n\n## Background\n\nMulti-tenancy is the ability to support multiple distinct datasets from\nthe same application server.  Each dataset usually maps to a customer\n(the tenant) and is partially or fully partitioned from all other tenant\ndata.\n\nAmong the possible approaches are:\n\n* **Isolated approach**: Separate database per tenant.\n* **Semi-isolated approach**: Shared database, separate namespaces (postgres schemas)\n  or table names/prefix per tenant.\n* **Shared approach**: Single database for all tenants.  Each table has a column\n  identifying the tenant for that row of data.\n\nThis application implements a variation of the **isolated approach**:\n\n* Each tenant has its **own database**, however\n* Other **connection details are shared** (such as password, database user).\n\ndjango-db-multitenant makes it possible (even easy) to take a Django application\ndesigned for a single tenant and use it with multiple tenants.\n\n## Operation\n\nThe main technique is as follows:\n\n1. When a request first arrives, determine desired the tenant from the ``request`` object,\n   and save it in thread-local storage.\n2. Later in the request, when a database cursor is accquired, issue an SQL\n   ``USE <tenant database name>`` for the desired tenant.\n\nStep 1 is accomplished by implementing a [mapper class](https://github.com/mik3y/django-db-multitenant/blob/master/db_multitenant/mapper.py).\nYour mapper takes a request object and returns a database name, using whatever logic you\nlike (translate hostname, inspect a HTTP header, etc).  The mapper result is saved in\nthread-local storage for later use.\n\nStep 2 determines whether the desired database has already been selected, and is skipped if\nso.  This is implemented using a\n[thin database backend wrapper](https://github.com/mik3y/django-db-multitenant/blob/master/db_multitenant/db/backends/mysql/base.py),\nwhich must be set in ``settings.DATABASES`` as the backend.\n\n## Usage\n\n### 1. Install\n\nInstall ``django-db-multitenant`` (or add it to your setup.py).\n\n```\n$ pip install django-db-multitenant\n```\n\n### 2. Implement a mapper\n\nYou must implement a sublcass of [db_multitenant.mapper](https://github.com/mik3y/django-db-multitenant/blob/master/db_multitenant/mapper.py)\nwhich determines the database name and cache prefix from the request.\n\nSome examples:\n\n* A [simple mapper](https://gist.github.com/mik3y/5959322), which uses a portion of the hostname\n  directly as the database name.\n* A [Redis-backed mapper](https://gist.github.com/mik3y/5959282), which looks up the tenant\n  using the hostname, throwing a 404 if unrecognized.\n\n### 3. Update settings.py\n\nSet the multitenant mapper by specifying the full dotted path to your implementation:\n\n```python\nMULTITENANT_MAPPER_CLASS = 'myapp.mapper.TenantMapper'\n```\n\nInstall the multitenant middleware as the *first* middleware.\n\n```python\nMIDDLEWARE_CLASSES = (\n    'db_multitenant.middleware.MultiTenantMiddleware',\n    ) + MIDDLEWARE_CLASSES\n```\n\nChange your database backend to the multitenant wrapper:\n\n```python\nDATABASES = {\n    'default': {\n        'ENGINE': 'db_multitenant.db.backends.mysql',\n        'NAME': 'devnull',\n    }\n```\n\n*Note*: Due to a current limitation, the named database must exist.  It may\nbe empty and read-only.\n\nOptionally, add the multitenant helper ``KEY_FUNCTION`` to your cache definition,\nwhich will cause cache keys to be prefixed with the value of\n``mapper.get_cache_prefix``:\n\n```python\nCACHES = {\n  'default' : {\n    'LOCATION': '127.0.0.1:11211',\n    'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',\n    'KEY_FUNCTION': 'db_multitenant.cache.helper.multitenant_key_func'\n    }\n}\n```\n\n**South Support**\n\nIf you use South, add the following to settings:\n\n```python\nSOUTH_DATABASE_ADAPTERS = {\n    'default': 'south.db.mysql'\n}\n```\n\n**Management Commands**: In order to use management commands (like syncdb)\nwith the correct tenant, inject this little hack in your settings:\n\n```python\nfrom db_multitenant.utils import update_from_env\nupdate_from_env(database_settings=DATABASES['default'],\n    cache_settings=CACHES['default'])\n```\n\nYou can then export ``$TENANT_DATABASE_NAME`` and ``TENANT_CACHE_PREFIX``\non the command line:\n\n```\n$ TENANT_DATABASE_NAME=example.com ./manage.py syncdb\n```\n\nThat's it.  Because django-db-multitenant does not define any models, there's\nno need to add it to ``INSTALLED_APPS``.\n\n## Advantages and Limitations\n\nThere is no one-size-fits-all solution for a data modeling problem such\nas multi-tenancy (see 'Alternatives'). \n\n#### Advantages\n\n* Compatibility: Your Django application doesn't need any awareness of\n  multi-tenancy.  Database-level tools (such as ``mysqldump``) just work.\n* Isolation: One tenant, one database means there's no intermingling of\n  tenant data.\n* Simplicity: Your application schemas don't need to be cluttered with\n  'Tenant' foreign key relationships.\n* Should work well with Django 1.6 connection persistence and connection\n  pooling.\n\n#### Limitations\n\n* Unorthodox.  Django does not expect this kind of dynamic database\n  connection tinkering, and there could be unexpected bugs.\n* Limited isolation.  Since the same DB credentials are used for all\n  tenants, bugs in the mapper (or anywhere else in the app) could\n  cause data corruption.\n* A valid database still needs to be specified in ``settings.DATABASE``\n  for use when the connection is first established (this should be fixed\n  eventually).\n* MySQL-only (this should be fixed eventually).\n* Overhead: requests may add up to one extra query (the ``USE <dbname>`` statement).\n\n## Alternatives and Further Reading\n\n* [django-tenant-schemas](https://github.com/bcarneiro/django-tenant-schemas) implements a semi-isolated approach using postgres schemas (and inspired this project, as well as the 'Overview' section above).\n\n## Credits and License\n\nCopyright 2013 mike wakerly (opensource@hoho.com)\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/mik3y/django-db-multitenant",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-db-multitenant",
    "platform": "",
    "project_url": "https://pypi.org/project/django-db-multitenant/",
    "release_url": "https://pypi.org/project/django-db-multitenant/0.1.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Multitenant support for Django, using one tenant per database.",
    "version": "0.1.3"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9e79a5c8fb3965eb7532991cf06b05db",
          "sha256": "ef78e71459349e1e6f1dc400c04a21ac8b0447a4599f0246db97a2bcca3dd91f"
        },
        "downloads": -1,
        "filename": "django-db-multitenant-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9e79a5c8fb3965eb7532991cf06b05db",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6769,
        "upload_time": "2013-07-09T17:55:00",
        "url": "https://files.pythonhosted.org/packages/79/c7/c2611c7c2d2c09257f337b4c0c6a85fb2240af9db2332eff28cdc705ce75/django-db-multitenant-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "00b3fd0c733cbf1f5e104a776aa26173",
          "sha256": "46216609716753927f1b0b4e43114413923704cd3f6636956b986f37ff818efb"
        },
        "downloads": -1,
        "filename": "django-db-multitenant-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "00b3fd0c733cbf1f5e104a776aa26173",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7065,
        "upload_time": "2013-07-24T21:18:33",
        "url": "https://files.pythonhosted.org/packages/2c/6e/592f28e8c51cd321dd60e54f6c415732e14c9a5c9beec93013b38df691fb/django-db-multitenant-0.1.1.tar.gz"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1880e79ee99ea4da0d58c38cd188c9f0",
          "sha256": "b9d2ea0f11135f98b10f162d8311b664f1d4d4e60f10e532f0591b6045d4bda7"
        },
        "downloads": -1,
        "filename": "django-db-multitenant-0.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1880e79ee99ea4da0d58c38cd188c9f0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7146,
        "upload_time": "2014-05-14T22:22:50",
        "url": "https://files.pythonhosted.org/packages/58/6a/6fb26f1e5dbcb4880a10f5bfcf5aea802b52d3641c82cfad45b92f1fb03f/django-db-multitenant-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2252c77e15de62779be27ebb157ec83b",
          "sha256": "1547c135bc77dea2ee7fc403bb2e971afc8a55cd06e3e09ebfb050a0cb9b727e"
        },
        "downloads": -1,
        "filename": "django-db-multitenant-0.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "2252c77e15de62779be27ebb157ec83b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7414,
        "upload_time": "2016-09-10T15:59:04",
        "url": "https://files.pythonhosted.org/packages/16/d5/595d207d460ddcf68d0569608cdb159ca1443f550e194eebfc91aebf7e86/django-db-multitenant-0.1.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2252c77e15de62779be27ebb157ec83b",
        "sha256": "1547c135bc77dea2ee7fc403bb2e971afc8a55cd06e3e09ebfb050a0cb9b727e"
      },
      "downloads": -1,
      "filename": "django-db-multitenant-0.1.3.tar.gz",
      "has_sig": false,
      "md5_digest": "2252c77e15de62779be27ebb157ec83b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7414,
      "upload_time": "2016-09-10T15:59:04",
      "url": "https://files.pythonhosted.org/packages/16/d5/595d207d460ddcf68d0569608cdb159ca1443f550e194eebfc91aebf7e86/django-db-multitenant-0.1.3.tar.gz"
    }
  ]
}