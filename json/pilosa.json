{
  "info": {
    "author": "Pilosa Engineering",
    "author_email": "dev@pilosa.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Python Client for Pilosa\n========================\n\nPython client for Pilosa high performance distributed bitmap index.\n\nChange Log\n----------\n\n-  **v0.4.0** (2017-06-08):\n\n   -  Supports Pilosa Server v0.4.0.\n   -  This version has the updated documentation.\n   -  Some light refactoring which shouldn't affect any user code.\n   -  Updated the accepted values for index, frame names and labels to\n      match with the Pilosa server.\n   -  ``Union`` queries accept 0 or more arguments. ``Intersect`` and\n      ``Difference`` queries accept 1 or more arguments.\n   -  Added ``inverse TopN`` and ``inverse Range`` calls.\n   -  Inverse enabled status of frames is not checked on the client\n      side.\n\n-  **v0.3.2** (2017-05-03):\n\n   -  Fixes a bug with getting the version of the package.\n\n-  **v0.3.1** (2017-05-01):\n\n   -  Initial version.\n   -  Supports Pilosa Server v0.3.1.\n\nRequirements\n------------\n\n-  Python 2.6 and higher or Python 3.3 and higher\n\nInstall\n-------\n\nPilosa client is on `PyPI <https://pypi.python.org/pypi/pilosa>`__. You\ncan install the library using ``pip``:\n\n::\n\n    pip install pilosa\n\nUsage\n-----\n\nQuick overview\n~~~~~~~~~~~~~~\n\nAssuming `Pilosa <https://github.com/pilosa/pilosa>`__ server is running\nat ``localhost:10101`` (the default):\n\n.. code:: python\n\n    import pilosa\n\n    # Create the default client\n    client = pilosa.Client()\n\n    # Create an Index object\n    myindex = pilosa.Index(\"myindex\")\n\n    # Make sure the index exists on the server\n    client.ensure_index(myindex)\n\n    # Create a Frame object\n    myframe = myindex.frame(\"myframe\")\n\n    # Make sure the frame exists on the server\n    client.ensure_frame(myframe)\n\n    # Send a SetBit query. PilosaError is thrown if execution of the query fails.\n    client.query(myframe.setbit(5, 42))\n\n    # Send a Bitmap query. PilosaError is thrown if execution of the query fails.\n    response = client.query(myframe.bitmap(5))\n\n    # Get the result\n    result = response.result\n\n    # Act on the result\n    if result:\n        bits = result.bitmap.bits\n        print(\"Got bits: \", bits)\n\n    # You can batch queries to improve throughput\n    response = client.query(\n        myindex.batch_query(\n            myframe.bitmap(5),\n            myframe.bitmap(10),\n        )    \n    )\n    for result in response.results:\n        # Act on the result\n        print(result)\n\nData Model and Queries\n~~~~~~~~~~~~~~~~~~~~~~\n\nIndexes and Frames\n^^^^^^^^^^^^^^^^^^\n\n*Index* and *frame*\\ s are the main data models of Pilosa. You can check\nthe `Pilosa documentation <https://www.pilosa.com/docs>`__ for more\ndetail about the data model.\n\n``Index`` constructor is used to create an index object. Note that this\ndoes not create an index on the server; the index object simply defines\nthe schema.\n\n.. code:: python\n\n    repository = pilosa.Index(\"repository\")\n\nIndexes support changing the column label and time quantum\n(*resolution*). You can pass these additional arguments to the ``Index``\nconstructor:\n\n.. code:: python\n\n    repository = pilosa.Index(\"repository\",\n        column_label=\"repo_id\", time_quantum=pilosa.TimeQuantum.YEAR_MONTH)\n\nFrames are created with a call to ``index.frame`` method:\n\n.. code:: python\n\n    stargazer = repository.frame(\"stargazer\")\n\nSimilar to index objects, you can pass custom options to the\n``index.frame`` method:\n\n.. code:: python\n\n    stargazer = repository.frame(\"stargazer\",\n        row_label=\"stargazer_id\", time_quantum=pilosa.TimeQuantum.YEAR_MONTH_DAY)\n\nQueries\n^^^^^^^\n\nOnce you have indexes and frame objects created, you can create queries\nfor them. Some of the queries work on the columns; corresponding methods\nare attached to the index. Other queries work on rows, with related\nmethods attached to frames.\n\nFor instance, ``Bitmap`` queries work on rows; use a frame object to\ncreate those queries:\n\n.. code:: python\n\n    bitmap_query = stargazer.bitmap(1, 100)  # corresponds to PQL: Bitmap(frame='stargazer', stargazer_id=1)\n\n``Union`` queries work on columns; use the index object to create them:\n\n.. code:: python\n\n    query = repository.union(bitmap_query1, bitmap_query2)\n\nIn order to increase througput, you may want to batch queries sent to\nthe Pilosa server. The ``index.batch_query`` method is used for that\npurpose:\n\n.. code:: python\n\n    query = repository.batch_query(\n        stargazer.bitmap(1, 100),\n        repository.union(stargazer.bitmap(100, 200), stargazer.bitmap(5, 100))\n    )\n\nThe recommended way of creating query objects is, using dedicated\nmethods attached to index and frame objects. But sometimes it would be\ndesirable to send raw queries to Pilosa. You can use the\n``index.raw_query`` method for that. Note that, query string is not\nvalidated before sending to the server:\n\n.. code:: python\n\n    query = repository.raw_query(\"Bitmap(frame='stargazer', stargazer_id=5)\")\n\nPlease check `Pilosa documentation <https://www.pilosa.com/docs>`__ for\nPQL details. Here is a list of methods corresponding to PQL calls:\n\nIndex:\n\n-  ``union(self, *bitmaps)``\n-  ``intersect(self, *bitmaps)``\n-  ``difference(self, *bitmaps)``\n-  ``count(self, bitmap)``\n-  ``set_column_attrs(self, column_id, attrs)``\n\nFrame:\n\n-  ``bitmap(self, row_id)``\n-  ``setbit(self, row_id, column_id, timestamp=None)``\n-  ``clearbit(self, row_id, column_id)``\n-  ``topn(self, n, bitmap=None, field=\"\", *values)``\n-  ``inverse_topn(self, n, bitmap=None, field=\"\", *values)``\n-  ``range(self, row_id, start, end)``\n-  ``set_row_attrs(self, row_id, attrs)``\n\nPilosa URI\n~~~~~~~~~~\n\nA Pilosa URI has the ``${SCHEME}://${HOST}:${PORT}`` format: \\*\n**Scheme**: Protocol of the URI. Default: ``http``. \\* **Host**:\nHostname or ipv4/ipv6 IP address. Default: localhost. \\* **Port**: Port\nnumber. Default: ``10101``.\n\nAll parts of the URI are optional, but at least one of them must be\nspecified. The following are equivalent:\n\n-  ``http://localhost:10101``\n-  ``http://localhost``\n-  ``http://:10101``\n-  ``localhost:10101``\n-  ``localhost``\n-  ``:10101``\n\nA Pilosa URI is represented by the ``pilosa.URI`` class. Below are a few\nways to create ``URI`` objects:\n\n.. code:: python\n\n    # create the default URI: http://localhost:10101\n    uri1 = pilosa.URI()\n\n    # create a URI from string address\n    uri2 = pilosa.URI.address(\"db1.pilosa.com:20202\")\n\n    # create a URI with the given host and port\n    URI uri3 = pilosa.URI(host=\"db1.pilosa.com\", port=20202);\n\nPilosa Client\n~~~~~~~~~~~~~\n\nIn order to interact with a Pilosa server, an instance of\n``pilosa.Client`` should be created. The client is thread-safe and uses\na pool of connections to the server, so we recommend creating a single\ninstance of the client and share it with other objects when necessary.\n\nIf the Pilosa server is running at the default address\n(``http://localhost:10101``) you can create the default client with\ndefault options using:\n\n.. code:: python\n\n    client = pilosa.Client()\n\nTo use a a custom server address, pass the address in the first\nargument:\n\n.. code:: python\n\n    client = pilosa.Client(\"http://db1.pilosa.com:15000\")\n\nIf you are running a cluster of Pilosa servers, you can create a\n``pilosa.Cluster`` object that keeps addresses of those servers:\n\n.. code:: python\n\n    cluster = pilosa.Cluster(\n        pilosa.URI.address(\":10101\"),\n        pilosa.URI.address(\":10110\"),\n        pilosa.URI.address(\":10111\"),\n    );\n\n    # Create a client with the cluster\n    client = pilosa.Client(cluster)\n\nIt is possible to customize the behaviour of the underlying HTTP client\nby passing client options to the ``Client`` constructor:\n\n.. code:: python\n\n    client = pilosa.Client(cluster,\n        connect_timeout=1000,  # if can't connect in  a second, close the connection\n        socket_timeout=10000,  # if no response received in 10 seconds, close the connection\n        pool_size_per_route=3,  # number of connections in the pool per host\n        rety_count=5,  # number of retries before failing the request\n    )\n\nOnce you create a client, you can create indexes, frames and start\nsending queries.\n\nHere is how you would create a index and frame:\n\n.. code:: python\n\n    # materialize repository index instance initialized before\n    client.create_index(repository)\n\n    # materialize stargazer frame instance initialized before\n    client.create_frame(stargazer)\n\nIf the index or frame exists on the server, you will receive a\n``PilosaError``. You can use ``ensure_index`` and ``ensure_frame``\nmethods to ignore existing indexes and frames.\n\nYou can send queries to a Pilosa server using the ``query`` method of\nclient objects:\n\n.. code:: python\n\n    response = client.query(frame.bitmap(5))\n\n``query`` method accepts optional ``columns`` argument:\n\n.. code:: python\n\n    response = client.query(frame.bitmap(5),\n        columns=True  # return column data in the response\n    )\n\nServer Response\n~~~~~~~~~~~~~~~\n\nWhen a query is sent to a Pilosa server, the server either fulfills the\nquery or sends an error message. In the case of an error,\n``PilosaError`` is thrown, otherwise a ``QueryResponse`` object is\nreturned.\n\nA ``QueryResponse`` object may contain zero or more results of\n``QueryResult`` type. You can access all results using the ``results``\nproperty of ``QueryResponse`` (which returns a list of ``QueryResult``\nobjects) or you can use the ``result`` property (which returns either\nthe first result or ``None`` if there are no results):\n\n.. code:: python\n\n    response = client.query(frame.bitmap(5))\n\n    # check that there's a result and act on it\n    result = response.result\n    if result:\n        # act on the result\n    }\n\n    # iterate on all results\n    for result in response.results:\n        # act on the result\n\nSimilarly, a ``QueryResponse`` object may include a number of column\nobjects, if ``columns=True`` query option was used:\n\n.. code:: python\n\n    # check that there's a column object and act on it\n    column = response.column\n    if column:\n        # act on the column\n\n    # iterate on all columns\n    for column in response.columns:\n        # act on the column\n\n``QueryResult`` objects contain:\n\n-  ``bitmap`` property to retrieve a bitmap result,\n-  ``count_items`` property to retrieve column count per row ID entries\n   returned from ``topn`` queries,\n-  ``count`` attribute to retrieve the number of rows per the given row\n   ID returned from ``count`` queries.\n\n.. code:: python\n\n    bitmap = response.bitmap\n    bits = bitmap.bits\n    attributes = bitmap.attributes\n\n    count_items = response.count_items\n\n    count = response.count\n\nContribution\n------------\n\nPlease check our `Contributor's\nGuidelines <https://github.com/pilosa/pilosa/CONTRIBUTING.md>`__.\n\n1. Sign the `Developer\n   Agreement <https://wwww.pilosa.com/developer-agreement>`__ so we can\n   include your contibution in our codebase.\n2. Fork this repo and add it as upstream:\n   ``git remote add upstream git@github.com:pilosa/python-pilosa.git``.\n3. Make sure all tests pass (use ``make test-all``) and be sure that the\n   tests cover all statements in your code (we aim for 100% test\n   coverage).\n4. Commit your code to a feature branch and send a pull request to the\n   ``master`` branch of our repo.\n\nThe sections below assume your platform has ``make``. Otherwise you can\nview the corresponding steps of the ``Makefile``.\n\nRunning tests\n~~~~~~~~~~~~~\n\nYou can run unit tests with:\n\n::\n\n    make test\n\nAnd both unit and integration tests with:\n\n::\n\n    make test-all\n\nGenerating protobuf classes\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nProtobuf classes are already checked in to source control, so this step\nis only needed when the upstream ``public.proto`` changes.\n\nBefore running the following step, make sure you have the `Protobuf\ncompiler <https://github.com/google/protobuf>`__ installed:\n\n::\n\n    make generate\n\nLicense\n-------\n\n::\n\n    Copyright 2017 Pilosa Corp.\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n    1. Redistributions of source code must retain the above copyright\n    notice, this list of conditions and the following disclaimer.\n\n    2. Redistributions in binary form must reproduce the above copyright\n    notice, this list of conditions and the following disclaimer in the\n    documentation and/or other materials provided with the distribution.\n\n    3. Neither the name of the copyright holder nor the names of its\n    contributors may be used to endorse or promote products derived\n    from this software without specific prior written permission.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n    CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n    INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n    MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n    DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n    CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n    SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n    BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n    SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n    WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n    NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n    OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\n    DAMAGE.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pilosa/python-pilosa",
    "keywords": "pilosa,pql",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pilosa",
    "platform": "",
    "project_url": "https://pypi.org/project/pilosa/",
    "release_url": "https://pypi.org/project/pilosa/0.4.0/",
    "requires_python": "",
    "summary": "Python client library for Pilosa",
    "version": "0.4.0"
  },
  "releases": {
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "043d8e171ca854ad187e66ab2cb82ecf",
          "sha256": "939c13e59aef6bd7f0fd59a08fe5ca5378632a093e259f2a0ee3a62a153f6545"
        },
        "downloads": 0,
        "filename": "pilosa-0.3.1-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "043d8e171ca854ad187e66ab2cb82ecf",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 27812,
        "upload_time": "2017-05-02T13:11:12",
        "url": "https://files.pythonhosted.org/packages/07/22/186cd8d40a63aa55cbfc26002b17944d6825ff02ac354c726c2578374c4e/pilosa-0.3.1-py2.py3-none-any.whl"
      }
    ],
    "0.3.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e050970de65b8258aaa29d886fd5101d",
          "sha256": "4386a40e27921f493320f278948cedab3255354aceb087386b2c269f17a87a61"
        },
        "downloads": 0,
        "filename": "pilosa-0.3.2-py2.py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "e050970de65b8258aaa29d886fd5101d",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 27830,
        "upload_time": "2017-05-03T16:40:49",
        "url": "https://files.pythonhosted.org/packages/b6/0e/ccbc5ab8c494cd2140b05cf1d65b5bae12fd52cf9d55091f922dfa5285c5/pilosa-0.3.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ad1575ff7a6f9dca05db48ad6042989f",
          "sha256": "7095ecd0a00136992a516c0beae84032cafb749163435b659ccaaea9146aecdc"
        },
        "downloads": 0,
        "filename": "pilosa-0.3.2.tar.gz",
        "has_sig": true,
        "md5_digest": "ad1575ff7a6f9dca05db48ad6042989f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18322,
        "upload_time": "2017-05-03T16:40:53",
        "url": "https://files.pythonhosted.org/packages/07/eb/bdaed014217ca68667f040ae8daad417c9772d0221da7031dff7293468d5/pilosa-0.3.2.tar.gz"
      }
    ],
    "0.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "457debdd4f61c56a97c19994fe549edb",
          "sha256": "a09acd591d9a2eafe4345e5711f152604d10f5e234af2ed5ff8d13dddbaf2f94"
        },
        "downloads": 0,
        "filename": "pilosa-0.4.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "457debdd4f61c56a97c19994fe549edb",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 31048,
        "upload_time": "2017-06-09T18:22:01",
        "url": "https://files.pythonhosted.org/packages/b7/51/f3ee182ba60742631ae6149f7b66dd7c3e967d97a0b793f300020dfd9937/pilosa-0.4.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "84b03bda04c96c0bdcb032d7c51075e4",
          "sha256": "cfbdc943b75d345ed0cb0aeec64c6591032509961e159906157db82286b723a1"
        },
        "downloads": 0,
        "filename": "pilosa-0.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "84b03bda04c96c0bdcb032d7c51075e4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21253,
        "upload_time": "2017-06-09T18:22:03",
        "url": "https://files.pythonhosted.org/packages/2a/00/5c747bf59c2d5283e1ea279eff78e5465495b3264edde85dfba1404d3915/pilosa-0.4.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "457debdd4f61c56a97c19994fe549edb",
        "sha256": "a09acd591d9a2eafe4345e5711f152604d10f5e234af2ed5ff8d13dddbaf2f94"
      },
      "downloads": 0,
      "filename": "pilosa-0.4.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "457debdd4f61c56a97c19994fe549edb",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 31048,
      "upload_time": "2017-06-09T18:22:01",
      "url": "https://files.pythonhosted.org/packages/b7/51/f3ee182ba60742631ae6149f7b66dd7c3e967d97a0b793f300020dfd9937/pilosa-0.4.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "84b03bda04c96c0bdcb032d7c51075e4",
        "sha256": "cfbdc943b75d345ed0cb0aeec64c6591032509961e159906157db82286b723a1"
      },
      "downloads": 0,
      "filename": "pilosa-0.4.0.tar.gz",
      "has_sig": false,
      "md5_digest": "84b03bda04c96c0bdcb032d7c51075e4",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 21253,
      "upload_time": "2017-06-09T18:22:03",
      "url": "https://files.pythonhosted.org/packages/2a/00/5c747bf59c2d5283e1ea279eff78e5465495b3264edde85dfba1404d3915/pilosa-0.4.0.tar.gz"
    }
  ]
}