{
  "info": {
    "author": "ricebook",
    "author_email": "timfeirg@ricebook.com",
    "bugtrack_url": null,
    "classifiers": [
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython"
    ],
    "description": "Eru load balance\n================\n\n[![Build Status](https://travis-ci.org/projecteru2/elb.svg?branch=master)](https://travis-ci.org/projecteru2/elb)\n[![Pypi Status](https://img.shields.io/pypi/v/elb.py.svg)](https://pypi.python.org/pypi/elb.py)\n\nELB (Eru load balance) is based on [openresty](https://openresty.org/en/). In Eru architecture, we use multiple filters to determine which upstream to forward. And by using [ngx_http_dyups_module](https://github.com/yzprofile/ngx_http_dyups_module), [citadel](https://github.com/citadel) can update upstream dynamically.\n\n### Features\n\n* update upstream dynamically\n* run by eru\n* custom strategies of network flow\n\n### Storage\n\nELB will load data from [etcd](https://github.com/coreos/etcd) when starting.\n\n### Rule\n\nIn this version, we provide two types of filter. One is for user-agent, another for path. So we design a simple protocol for describing it.\n\nThis data will store in etcd with key `/$ELBNAME/rules/$domain`.\n\nFor example:\n\n```json\n{\n    \"init\": \"r1\",\n    \"rules\": {\n        \"r1\": {\"type\": \"ua\", \"args\": {\"fail\": \"r3\", \"pattern\": \"httpie(\\\\S+)$\", \"succ\": \"r4\"}},\n        \"r2\": {\"type\": \"backend\", \"args\": {\"servername\": \"upstream1\"}},\n        \"r3\": {\"type\": \"backend\", \"args\": {\"servername\": \"upstream2\"}},\n        \"r4\": {\"type\": \"path\", \"args\": {\"regex\": true, \"pattern\": \"^\\\\/blog\\\\/(\\\\S+)$\", \"succ\": \"r2\", \"fail\": \"r3\", \"rewrite\": false}}\n    },\n}\n```\n\nYou can build a complex filter by multiple rules.\n\n### Upstream\n\nUpstream data also store in etcd with key `/$ELBNAME/upstreams/$backend/$server`.\n\nFor example\n\n```\netcdctl set /ELB/upstreams/up1/127.0.0.1:8088 \"\"\netcdctl set /ELB/upstreams/up1/127.0.0.1:8089 \"\"\netcdctl set /ELB/upstreams/up2/127.0.0.1:8089 \"max_fails=2 weight=10\"\n```\n\nUse dir to store server data will help you to asynchronous active server in upstream.\n\n### API\n\nELB have two APIs for managing.\n\n##### Domain API `/__erulb__/domain`\n\nWhen `GET` this url, it will response a json which contains domain and it's rules.\n\nFor example:\n\n```\nGET /__erulb__/domain HTTP/1.1\nAccept: */*\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nHost: 127.0.0.1:8080\nUser-Agent: HTTPie/0.9.9\n\n\n\nHTTP/1.1 200 OK\nConnection: keep-alive\nContent-Type: application/json\nDate: Mon, 25 Sep 2017 09:06:32 GMT\nServer: openresty/1.11.2.5\nTransfer-Encoding: chunked\n\n{\n    \"127.0.0.1\": {\n        \"init\": \"r1\",\n        \"rules\": {\n            \"r1\": {\n                \"args\": {\n                    \"fail\": \"r3\",\n                    \"pattern\": \"httpie(\\\\S+)$\",\n                    \"succ\": \"r4\"\n                },\n                \"type\": \"ua\"\n            },\n            \"r2\": {\n                \"args\": {\n                    \"servername\": \"up1\"\n                },\n                \"type\": \"backend\"\n            },\n            \"r3\": {\n                \"args\": {\n                    \"servername\": \"up2\"\n                },\n                \"type\": \"backend\"\n            },\n            \"r4\": {\n                \"args\": {\n                    \"fail\": \"r3\",\n                    \"pattern\": \"^\\\\/blog\\\\/(\\\\S+)$\",\n                    \"regex\": true,\n                    \"rewrite\": false,\n                    \"succ\": \"r2\"\n                },\n                \"type\": \"path\"\n            }\n        }\n    }\n}\n```\n\nIf you `PUT` this url, you have to upload a json with domains and it's rule, then ELB will update itself with their rules. For example:\n\n```\nPUT /__erulb__/domain HTTP/1.1\nAccept: application/json\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 305\nContent-Type: application/json\nHost: localhost:8080\nUser-Agent: HTTPie/0.9.4\n\n{\n    \"localhost\": {\n        \"init\": \"r1\",\n        \"rules\": {\n            \"r1\": {\n                \"args\": {\n                    \"fail\": \"r3\",\n                    \"pattern\": \"^\\\\/blog\\\\/(\\\\S+)$\",\n                    \"regex\": true,\n                    \"rewrite\": false,\n                    \"succ\": \"r2\"\n                },\n                \"type\": \"path\"\n            },\n            \"r2\": {\n                \"args\": {\n                    \"servername\": \"upstream1\"\n                },\n                \"type\": \"backend\"\n            },\n            \"r3\": {\n                \"args\": {\n                    \"servername\": \"upstream2\"\n                },\n                \"type\": \"backend\"\n            }\n        }\n    }\n}\n\nHTTP/1.1 200 OK\nConnection: keep-alive\nContent-Type: application/json\nDate: Tue, 26 Sep 2017 15:03:03 GMT\nServer: openresty/1.11.2.5\nTransfer-Encoding: chunked\n\n{\n    \"msg\": \"OK\"\n}\n```\n\nThen domain `localhost` was added. However, if somebody restart ELB, it will lose. Don't forget to store rules in etcd.\n\nIf you use `DELETE` method, you can upload a json with domains, then ELB will delete those domains.\n\n```\nDELETE /__erulb__/domain HTTP/1.1\nAccept: */*\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 0\nHost: localhost:8080\nUser-Agent: HTTPie/0.9.9\n\n[\n    \"localhost\",\n    \"127.0.0.1\"\n]\n\nHTTP/1.1 200 OK\nConnection: keep-alive\nContent-Type: application/json\nDate: Wed, 27 Sep 2017 06:36:30 GMT\nServer: openresty/1.11.2.5\nTransfer-Encoding: chunked\n\n{\n    \"msg\": \"OK\"\n}\n```\n\nDon't forget delete domains data in etcd.\n\n##### Upstream API `/__erulb__/upstream`\n\nIf you `GET` this url, elb will response a json which contains upstreams and it's backends like this:\n\n```\nGET /__erulb__/upstream HTTP/1.1\nAccept: */*\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nHost: 127.0.0.1:8080\nUser-Agent: HTTPie/0.9.9\n\n\n\nHTTP/1.1 200 OK\nConnection: keep-alive\nContent-Type: application/json\nDate: Mon, 25 Sep 2017 09:08:59 GMT\nServer: openresty/1.11.2.5\nTransfer-Encoding: chunked\n\n{\n    \"upstream1\": [\n        {\n            \"addr\": \"127.0.0.1:8089\",\n            \"fail_timeout\": 10,\n            \"max_fails\": 1,\n            \"name\": \"127.0.0.1:8089\",\n            \"weight\": 1\n        },\n        {\n            \"addr\": \"127.0.0.1:8088\",\n            \"fail_timeout\": 10,\n            \"max_fails\": 1,\n            \"name\": \"127.0.0.1:8088\",\n            \"weight\": 1\n        }\n    ],\n    \"upstream2\": [\n        {\n            \"addr\": \"127.0.0.1:8089\",\n            \"fail_timeout\": 10,\n            \"max_fails\": 2,\n            \"name\": \"127.0.0.1:8089\",\n            \"weight\": 10\n        }\n    ]\n}\n```\n\nIf you use `PUT` method, you can upload a json with upstreams and it's backends, then ELB will update itself with their upstreams. For example:\n\n```\nPUT /__erulb__/upstream HTTP/1.1\nAccept: application/json, */*\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 115\nContent-Type: application/json\nHost: localhost:8080\nUser-Agent: HTTPie/0.9.9\n\n{\n    \"up1\": {\n        \"127.0.0.1:8088\": \"\",\n        \"127.0.0.1:8089\": \"\"\n    },\n    \"up2\": {\n        \"localhost:8088\": \"\",\n        \"localhost:8089\": \"\"\n    }\n}\n\nHTTP/1.1 200 OK\nConnection: keep-alive\nContent-Type: application/json\nDate: Mon, 25 Sep 2017 09:10:58 GMT\nServer: openresty/1.11.2.5\nTransfer-Encoding: chunked\n\n{\n    \"msg\": \"OK\"\n}\n```\n\nIf you use `DELETE` method, you can upload a json with upstreams' name, then ELB will delete those upstreams.\n\n```\nDELETE /__erulb__/upstream HTTP/1.1\nAccept: application/json, */*\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 8\nContent-Type: application/json\nHost: localhost:8080\nUser-Agent: HTTPie/0.9.9\n\n[\n    \"upstream1\",\n    \"upstream2\"\n]\n\nHTTP/1.1 200 OK\nConnection: keep-alive\nContent-Type: application/json\nDate: Wed, 27 Sep 2017 06:34:51 GMT\nServer: openresty/1.11.2.5\nTransfer-Encoding: chunked\n\n{\n    \"upstream1\": true,\n    \"upstream2\": true\n}\n```\n\nDon't forget delete upstreams data in etcd.\n\n##### Dump API `/__erulb__/dump`\n\n`PUT` this url, in-memory data will be dumped into etcd. and next elb will load it automatically from etcd.\n\n```\nPUT /__erulb__/dump HTTP/1.1\nAccept: application/json, */*\nAccept-Encoding: gzip, deflate\nConnection: keep-alive\nContent-Length: 115\nContent-Type: application/json\nHost: localhost:8080\nUser-Agent: HTTPie/0.9.9\n\nHTTP/1.1 200 OK\nConnection: keep-alive\nContent-Type: application/json\nDate: Mon, 25 Sep 2017 09:10:58 GMT\nServer: openresty/1.11.2.5\nTransfer-Encoding: chunked\n\n{\n    \"msg\": \"OK\"\n}\n```\n\n### Env\n\nELB will read `ETCD`, `ELBNAME` and `STATSD` from environment.\n\nIf etcd and elbname not set, elb will use `127.0.0.1:2379` and `ELB` as default.\n\nBut if `STATSD` not set, elb will not calcuate domain status.\n\n### Dockerized ELB manually\n\nWe suggest you to run elb by ERU, however this [image](https://hub.docker.com/r/projecteru2/elb/) can standalone running.\n\n```shell\ndocker run -d --privileged \\\n  --name eru_elb_$HOSTNAME \\\n  --net host \\\n  --restart always \\\n  -e \"ETCD=<IP:PORT>\" \\\n  -e \"ELBNAME=<ELBNAME>\" \\\n  -e \"STATSD=<IP:PORT>\" \\\n  projecteru2/elb\n```\n\n### Build and Deploy by Eru itself\n\nAfter we implemented bootstrap in eru2, now you can build and deploy elb with [cli](https://github.com/projecteru2/cli) tool.\n\n1. Test source code and build image\n\n```shell\n<cli_execute_path> --name <image_name> https://goo.gl/WTGT9E\n```\n\nMake sure you can clone code by ssh protocol because libgit2 ask for it. So you need configure core with github certs. After the fresh image was named and tagged, it will be auto pushed to the remote registry which was defined in core.\n\n2. Deploy elb by eru with specific resource.\n\n```shell\n<cli_execute_path> --pod <pod_name> --entry elb --network <network_name> --image <projecteru2/elb>|<your_own_image> [--node <specify_node>] [--cpu 0.3 | --mem 1024000000] https://goo.gl/WTGT9E\n```\n\nNow you will find elb was started.\n\n### Warning\n\nBecause overlayfs with CentOS 7 has some issue, do not compile Dockerfile on CentOS 7 with overlayfs if you use early docker befor [this](https://github.com/moby/moby/issues/13108).",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/projecteru2/elb",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "elb.py",
    "platform": "",
    "project_url": "https://pypi.org/project/elb.py/",
    "release_url": "https://pypi.org/project/elb.py/0.0.4/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "ELB python client",
    "version": "0.0.4"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "471c9a8bc72949d029304d27e5fed7cc",
          "sha256": "4562b0d1a9f714334307467547cad29e9a4d0ee379f7a048ca07a0ede8beeaba"
        },
        "downloads": -1,
        "filename": "elb.py-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "471c9a8bc72949d029304d27e5fed7cc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4774,
        "upload_time": "2017-12-20T06:37:48",
        "url": "https://files.pythonhosted.org/packages/fc/79/a89f745cc4ce01b9278ec9e459ef476259388fe4d8b7bad9a7d241e200f6/elb.py-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c064d425a3af137609a5f705c935af6f",
          "sha256": "76b8a6cde6fac7ea55c35d1d319f83051169427981d3a44d3bffce418bbafdcb"
        },
        "downloads": -1,
        "filename": "elb.py-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c064d425a3af137609a5f705c935af6f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4834,
        "upload_time": "2017-12-20T16:45:13",
        "url": "https://files.pythonhosted.org/packages/96/8c/23444dcfb7e6837aeab29462f8f5e104dd82fb41faabbb4c53727f34508a/elb.py-0.0.2.tar.gz"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "09ea7310801a09a4844097bb87e4f2e2",
          "sha256": "92de392402c46ce1fcc2dcfa6d8823bd83a3d765309111f35ee5dedcec410851"
        },
        "downloads": -1,
        "filename": "elb.py-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "09ea7310801a09a4844097bb87e4f2e2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6211,
        "upload_time": "2018-01-05T13:03:45",
        "url": "https://files.pythonhosted.org/packages/ba/07/e200b68284512be2d7fe961e63ab9c011b567493de08ff81df32816309df/elb.py-0.0.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "09ea7310801a09a4844097bb87e4f2e2",
        "sha256": "92de392402c46ce1fcc2dcfa6d8823bd83a3d765309111f35ee5dedcec410851"
      },
      "downloads": -1,
      "filename": "elb.py-0.0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "09ea7310801a09a4844097bb87e4f2e2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6211,
      "upload_time": "2018-01-05T13:03:45",
      "url": "https://files.pythonhosted.org/packages/ba/07/e200b68284512be2d7fe961e63ab9c011b567493de08ff81df32816309df/elb.py-0.0.4.tar.gz"
    }
  ]
}