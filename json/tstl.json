{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Programming Language :: Python :: 2"
    ],
    "description": "TSTL: the Template Scripting Testing Language\n===========================================\n\nTSTL is a \"little\" language that makes it easy to test software.  This\nimplementation targets Python.  There is also a (beta) Java version,\nat https://github.com/flipturnapps/TSTL-Java.\n\nTSTL produces a simple, universal interface for test generators to use\n-- it essentially turns a definition of valid tests into a graph of system states with test actions as the transitions; you, the tester, can largely ignore this, and view TSTL as a testing tool supporting test generation, test replay, test reduction, and code coverage analysis, with some sophisticated additions to pure random testing to provide effective testing.\n\nTSTL is not purely an academic toy: it's been used to find (and, thus, usually, fix) \nreal faults in real code, including ESRI's ArcPy (http://desktop.arcgis.com/en/arcmap/latest/analyze/arcpy/what-is-arcpy-.htm), sortedcontainers (https://github.com/grantjenks/sorted_containers),\ngmpy2 (https://github.com/aleaxit/gmpy), sympy (http://www.sympy.org/en/index.html), pyfakefs (https://github.com/jmcgeheeiv/pyfakefs),\nPython itself (https://bugs.python.org/issue27870), and even OS X.\n\nSome of you may be asking: \"How does TSTL differ from the Hypothesis\nhttps://hypothesis.readthedocs.io/en/latest/ testing tool?\"  There are a few\nanswers.  First, TSTL is probably much less polished than Hypothesis,\nright now!  More importantly, however, Hypothesis and TSTL both\ngenerate tests, but they are primarily intended to generate different\nkinds of tests.  Hypothesis is in what we consider the QuickCheck\nfamily: if you have a function `f` that takes as input a list, a\nstring, or something more complex, Hypothesis is very likely what you\nwant to use.  If you have a set of functions, `f`, `g`, and `h`, and\nthey don't just return things, but modify invisible system state (but\nalso return things that may be inputs to other functions), you may\nwant TSTL.  You can do state-based sequence-of-method-calls testing\nwith Hypothesis, but it may be easier with TSTL, and it's what TSTL is\nbuilt for.  So, if you're testing a sorting implementation, Hypothesis\nis almost certainly much better.  If you're testing something like a\nfile system, you might want to look into TSTL.  If you're testing a\nparser that takes a string as input, both tools might be useful,\ndepending on your situation.  One additional difference is that TSTL has considerable built-in support for performing differential/reference testing, where your SUT is compared to a reference implementation, possibly with some code to handle expected differences.\n\nThe similarity is that both TSTL and Hypothesis don't look like\ntraditional unit testing.  They instead let you define the idea of a\nvalid input (either some data values, or in TSTL a sequence of method\ncalls and assignments that more resembles a traditional\ndo-some-stuff-and-then-check-it unit test) and assert general\nproperties about the behavior of a system under valid input.\n\nFor more details on TSTL, the best starting point is a comprehensive\njournal paper in STTT:\nhttps://github.com/agroce/tstl/blob/master/doc/papers/STTTjournal/maintstl.pdf.\nThere are also NASA Formal Methods (NFM) and International Symposium\non Software Testing and Analsysis (ISSTA) 2015 papers at\nhttp://www.cs.cmu.edu/~agroce/nfm15.pdf and\nhttp://www.cs.cmu.edu/~agroce/issta15.pdf, with some implementation\ndetails or concepts that are not present in the more up-to-date and\ncomplete paper.  There is a more recent paper descrbing the \"normalization\"\nidea in more detail, http://www.cs.cmu.edu/~agroce/issta17.pdf, as well as a\ntool paper describing how to use TSTL's test manipulation commands \n(http://www.cs.cmu.edu/~agroce/issta17tool.pdf).\n\nThe NFM and ISSTA papers use an early version of TSTL syntax, which marks\npools and TSTL constructs with % signs.  \"Modern\" TSTL uses <> by\ndefault, though if for some reason you need <> in your code (and to\nprepare for a future C++ version) this can be turned off and only % supported.\n\nNote that documentation below is preliminary.  A better guide to usage\nmight be to examine the examples directory and see real TSTL test\nharnesses.  The generators directory includes some simple but useful\ntesting tools for finding bugs in systems defined in TSTL.  Only the\nrandom tester is extensively tested and supports all TSTL features\nwell at this point.  Reading src/randomtester.py provides\nconsiderable guidance in how to (efficiently) use TSTL in a generic\ntesting tool, with TSTL providing an interface to the underlying\napplication/library to be tested.\n\nInstallation\n------------\n\nYou can grab a recent (but not always the latest) tstl more easily using pip.  `pip install tstl` should work fine.  If you want something even more recent you can:\n\n    git clone https://github.com/agroce/tstl.git\n    cd tstl\n    python setup.py install\n    # Might need to do a sudo on the last step if not using virtualenv\n\nNote that TSTL expects a Python 2.7 version, not Python 3.0.\nEventually we'll release a 3.0+ version, but right now the Python\ncenter-of-mass seems to still be in 2.7.  Also, you probably want to\ninstall (pip will do the trick) Ned Batchelder's coverage.py\n(https://coverage.readthedocs.io).\n\nThe documentation below is preliminary, generated by some early\nadapters of TSTL, and may not perfectly match the current version.\nUse at your own risk.  Code in examples directories should be up to\ndate.\n\nUsing TSTL\n------------\n\nTSTL installs a few standard tools: the TSTL compiler itself, `tstl` (technically all\nyou really need to do something useful); a random tester generator\n`tstl_rt`; a tool for producing standalone tests, `tstl_standalone`;\na tool for replaying TSTL test files `tstl_replay`; a tool for\ndelta-debugging and normalization of TSTL tests, `tstl_reduce`; and a tool for running a set of tests as a regression, `tstl_regress`.  The\n`tstl_reduce` tool is not essential, since the random tester performs\ndelta debugging and alpha conversion by default (you have to add\n`--normalize` to also get normalization of tests, however).\n\nThe simplest usage is to go to a directory with a .tstl file, and\ntype:\n\n    tstl mytstlfile.tstl\n    tstl_rt\n\nThe first line compiles mytstlfile.tstl and produces sut.py, which the\nrandom tester will automatically import and test.  Both tstl and the\nrandom tester take a variety of command line options, which --help\nwill show.\n\nExample\n-----\n\nThe easiest way to understand TSTL may be to examine\nexamples/AVL/avlnew.tstl (https://github.com/agroce/tstl/blob/master/examples/AVL/avlnew.tstl), which is a simple example file in the latest\nlanguage format (easier to read) (the file avlblocks.tstl has this\nsame harness in a different format).\n\nThese are pretty full-featured testers for an AVL tree class.  You can\nwrite something very quick and fairly effective with just a few lines\nof code, however:\n\n    @import avl\n    pool: <int> 3\n\tpool: <avl> 2\n\n\tproperty: <avl>.check_balanced()\n\n\t<int> := <[1..20]>\n    <avl> := avl.AVLTree()\n\n\t<avl>.insert(<int>)\n\t<avl>.delete(<int>)\n\t<avl>.find(<int>)\n    <avl>.display()\t\n\nThis says that there are two kinds of \"things\" involved in our\nAVL tree implementation testing:  `int` and `avl`.   We define (in\nPython, almost) how to create these things, and what we can do with\nthese things, and then TSTL produces sequences that match our\ndefinition.  It also checks that all AVL trees, at all times, are\nproperly balanced.  If we wanted, as in avlnew.tstl, we could also\nmake sure that our AVL tree \"acts like\" a set --- when we insert\nsomething, we can find that thing, and when we delete something, we\ncan no longer find it.\n\nNote that we start with \"raw Python\" to import the avl module, the SUT.  While TSTL\nsupports using from, aliases, and wildcards in imports, you should always\nimport the module(s) under test with a simple import.  This allows TSTL to identify\nthe code to be tested and automatically provide coverage, static analysis-aided\ntesting methods, and proper module management.  Utility code in the standard library,\non the other hand, can be imported any way you wish.\n\nIf we test this (or avlnew.tstl) for 30 seconds, something like this will appear:\n\n~/tstl/examples/AVL$ tstl_rt --timeout 30\n\n    Random testing using config=Config(swarmSwitch=None, verbose=False, fastQuickAnalysis=False, failedLogging=None, maxtests=-1, greedyStutter=False, exploit=None, seed=None, generalize=False, localize=False, uncaught=False, speed='FAST', internal=False, normalize=False, highLowSwarm=None, replayable=False, essentials=False, quickTests=False, coverfile='coverage.out', uniqueValuesAnalysis=False, swarm=False, ignoreprops=False, total=False, swarmLength=None, noreassign=False, profile=False, full=False, multiple=False, relax=False, swarmP=0.5, stutter=None, running=False, compareFails=False, nocover=False, swarmProbs=None, gendepth=None, quickAnalysis=False, exploitCeiling=0.1, logging=None, html=None, keep=False, depth=100, throughput=False, timeout=30, output=None, markov=None, startExploit=0)\n      12 [2:0]\n    -- < 2 [1:0]\n    ---- < 1 [0:0] L\n    ---- > 5 [0:0] L\n    -- > 13 [1:-1]\n    ---- > 14 [0:0] L\n    set([1, 2, 5, 12, 13, 14])\n    ...\n      11 [2:0]\n    -- < 5 [1:0]\n    ---- < 1 [0:0] L\n    ---- > 9 [0:0] L\n    -- > 14 [1:-1]\n    ---- > 18 [0:0] L\n    set([1, 5, 9, 11, 14, 18])\n    STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 17\n    STOPPING TESTING DUE TO TIMEOUT\n    80.8306709265 PERCENT COVERED\n    30.0417540073 TOTAL RUNTIME\n    236 EXECUTED\n    23517 TOTAL TEST OPERATIONS\n    10.3524413109 TIME SPENT EXECUTING TEST OPERATIONS\n    0.751145362854 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS\n    18.4323685169 TIME SPENT CHECKING PROPERTIES\n    28.7848098278 TOTAL TIME SPENT RUNNING SUT\n    0.179262161255 TIME SPENT RESTARTING\n    0.0 TIME SPENT REDUCING TEST CASES\n    224 BRANCHES COVERED\n    166 STATEMENTS COVERED\n\nFor many (but not all!) programs, a more powerful alternative to\nsimple random testing is to use swarm testing, which restricts the\nactions in each individual test (e.g., insert but no delete, or find\nbut no inorder traversals) (see\nhttp://www.cs.cmu.edu/~agroce/issta12.pdf).\n\n    ~/tstl/examples/AVL$ tstl_rt --timeout 30 --swarm\n    Random testing using config=Config(swarmSwitch=None, verbose=False, fastQuickAnalysis=False, failedLogging=None, maxtests=-1, greedyStutter=False, exploit=None, seed=None, generalize=False, localize=False, uncaught=False, speed='FAST', internal=False, normalize=False, highLowSwarm=None, replayable=False, essentials=False, quickTests=False, coverfile='coverage.out', uniqueValuesAnalysis=False, swarm=True, ignoreprops=False, total=False, swarmLength=None, noreassign=False, profile=False, full=False, multiple=False, relax=False, swarmP=0.5, stutter=None, running=False, compareFails=False, nocover=False, swarmProbs=None, gendepth=None, quickAnalysis=False, exploitCeiling=0.1, logging=None, html=None, keep=False, depth=100, throughput=False, timeout=30, output=None, markov=None, startExploit=0)\n      11 [2:0]\n    -- < 7 [1:0]\n    ...\n    STOPPING TEST DUE TO TIMEOUT, TERMINATED AT LENGTH 94\n    224 BRANCHES COVERED\n    166 STATEMENTS COVERED\n\nHere, the method is not very important; simple random testing does a\ndecent job covering the AVL tree code in just 60 seconds.  If we\nintroduce a bug by removing the `self.rebalance()` call on line 205 of\navl.py, either method will quickly report a failing test case,\nautomatically reduced.  By default, the random tester will run the test\nin a verbose mode to show in more detail what happens during the execution\nthat causes a failure.\n\n\t~/tstl/examples/AVL$ tstl_rt --timeout 30\n\tRandom testing using config=Config(swarmSwitch=None, verbose=False, fastQuickAnalysis=False, failedLogging=None, maxtests=-1, greedyStutter=False, exploit=None, seed=None, generalize=False, localize=False, uncaught=False, speed='FAST', uniqueValuesAnalysis=False, normalize=False, silentFail=False, noAlphaConvert=False, replayable=False, essentials=False, quickTests=False, coverfile='coverage.out', swarm=False, internal=False, total=False, progress=False, swarmLength=None, noreassign=False, profile=False, full=False, multiple=False, timedProgress=30, relax=False, swarmP=0.5, stutter=None, highLowSwarm=None, readQuick=False, verboseActions=False, running=False, ignoreProps=False, compareFails=False, nocover=False, swarmProbs=None, gendepth=None, quickAnalysis=False, exploitCeiling=0.1, computeFeatureStats=False, logging=None, html=None, keep=False, noExceptionMatch=False, depth=100, showActions=False, throughput=False, timeout=30, output='failure.26816.test', markov=None, startExploit=0)\n\t  11 [2:0]\n\t-- < 8 [1:0]\n\t---- < 4 [0:0] L\n\t---- > 9 [0:0] L\n\t-- > 18 [1:1]\n\t---- < 15 [0:0] L\n\tset([4, 8, 9, 11, 15, 18])\n\tPROPERLY VIOLATION\n\tERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x1032bf4d0>)\n\tTRACEBACK:\n\t  File \"/Users/alex/tstl/examples/AVL/sut.py\", line 7960, in check\n\t    assert self.p_avl[0].check_balanced()\n\tOriginal test has 98 steps\n\tREDUCING...\n\tFailed to reduce, increasing granularity to 4\n\tReduced test length to 73\n\tFailed to reduce, increasing granularity to 4\n\tReduced test length to 55\n\tFailed to reduce, increasing granularity to 4\n\tReduced test length to 41\n\tFailed to reduce, increasing granularity to 4\n\tReduced test length to 31\n\tFailed to reduce, increasing granularity to 4\n\tReduced test length to 24\n\tFailed to reduce, increasing granularity to 4\n\tFailed to reduce, increasing granularity to 8\n\tReduced test length to 20\n\tFailed to reduce, increasing granularity to 4\n\tFailed to reduce, increasing granularity to 8\n\tReduced test length to 17\n\tFailed to reduce, increasing granularity to 4\n\tFailed to reduce, increasing granularity to 8\n\tReduced test length to 14\n\tFailed to reduce, increasing granularity to 4\n\tFailed to reduce, increasing granularity to 8\n\tReduced test length to 13\n\tFailed to reduce, increasing granularity to 4\n\tFailed to reduce, increasing granularity to 8\n\tReduced test length to 11\n\tFailed to reduce, increasing granularity to 4\n\tFailed to reduce, increasing granularity to 8\n\tFailed to reduce, increasing granularity to 11\n\tReduced test has 11 steps\n\tREDUCED IN 1.02356314659 SECONDS\n\tAlpha converting test...\n\tint0 = 1                                                                 # STEP 0\n\tavl0 = avl.AVLTree()                                                     # STEP 1\n\tavl0.insert(int0)                                                        # STEP 2\n\tint0 = 6                                                                 # STEP 3\n\tavl0.insert(int0)                                                        # STEP 4\n\tint0 = 8                                                                 # STEP 5\n\tavl0.insert(int0)                                                        # STEP 6\n\tint1 = 20                                                                # STEP 7\n\tavl0.insert(int1)                                                        # STEP 8\n\tint1 = 1                                                                 # STEP 9\n\tavl0.delete(int1)                                                       # STEP 10\n\n\tSAVING TEST AS failure.26816.test\n\tFINAL VERSION OF TEST, WITH LOGGED REPLAY:\n\tint0 = 1                                                                 # STEP 0\n\tACTION: int0 = 1 \n\tint0 = None : <type 'NoneType'>\n\t=> int0 = 1 : <type 'int'>\n\t==================================================\n\tavl0 = avl.AVLTree()                                                     # STEP 1\n\tACTION: avl0 = avl.AVLTree() \n\tavl0 = None : <type 'NoneType'>\n\tavl_REF0 = None : <type 'NoneType'>\n\t=> avl0 = <avlbug2.AVLTree instance at 0x10311edd0> : <type 'instance'>\n\tREFERENCE ACTION: avl_REF0 = set()\n\t=> avl_REF0 = set([]) : <type 'set'>\n\t==================================================\n\tavl0.insert(int0)                                                        # STEP 2\n\tACTION: avl0.insert(int0) \n\tint0 = 1 : <type 'int'>\n\tavl0 = <avlbug2.AVLTree instance at 0x10311edd0> : <type 'instance'>\n\tavl_REF0 = set([]) : <type 'set'>\n\tREFERENCE ACTION: avl_REF0.add(int0)\n\t=> avl_REF0 = set([1]) : <type 'set'>\n\t==================================================\n\tint0 = 6                                                                 # STEP 3\n\tACTION: int0 = 6 \n\tint0 = 1 : <type 'int'>\n\t=> int0 = 6 : <type 'int'>\n\t==================================================\n\tavl0.insert(int0)                                                        # STEP 4\n\tACTION: avl0.insert(int0) \n\tint0 = 6 : <type 'int'>\n\tavl0 = <avlbug2.AVLTree instance at 0x10311edd0> : <type 'instance'>\n\tavl_REF0 = set([1]) : <type 'set'>\n\tREFERENCE ACTION: avl_REF0.add(int0)\n\t=> avl_REF0 = set([1, 6]) : <type 'set'>\n\t==================================================\n\tint0 = 8                                                                 # STEP 5\n\tACTION: int0 = 8 \n\tint0 = 6 : <type 'int'>\n\t=> int0 = 8 : <type 'int'>\n\t==================================================\n\tavl0.insert(int0)                                                        # STEP 6\n\tACTION: avl0.insert(int0) \n\tint0 = 8 : <type 'int'>\n\tavl0 = <avlbug2.AVLTree instance at 0x10311edd0> : <type 'instance'>\n\tavl_REF0 = set([1, 6]) : <type 'set'>\n\tREFERENCE ACTION: avl_REF0.add(int0)\n\t=> avl_REF0 = set([8, 1, 6]) : <type 'set'>\n\t==================================================\n\tint1 = 20                                                                # STEP 7\n\tACTION: int1 = 20 \n\tint1 = None : <type 'NoneType'>\n\t=> int1 = 20 : <type 'int'>\n\t==================================================\n\tavl0.insert(int1)                                                        # STEP 8\n\tACTION: avl0.insert(int1) \n\tint1 = 20 : <type 'int'>\n\tavl0 = <avlbug2.AVLTree instance at 0x10311edd0> : <type 'instance'>\n\tavl_REF0 = set([8, 1, 6]) : <type 'set'>\n\tREFERENCE ACTION: avl_REF0.add(int1)\n\t=> avl_REF0 = set([8, 1, 20, 6]) : <type 'set'>\n\t==================================================\n\tint1 = 1                                                                 # STEP 9\n\tACTION: int1 = 1 \n\tint1 = 20 : <type 'int'>\n\t=> int1 = 1 : <type 'int'>\n\t==================================================\n\tavl0.delete(int1)                                                       # STEP 10\n\tACTION: avl0.delete(int1) \n\tint1 = 1 : <type 'int'>\n\tavl0 = <avlbug2.AVLTree instance at 0x10311edd0> : <type 'instance'>\n\tavl_REF0 = set([8, 1, 20, 6]) : <type 'set'>\n\tREFERENCE ACTION: avl_REF0.discard(int1)\n\t=> avl_REF0 = set([8, 20, 6]) : <type 'set'>\n\t==================================================\n\tERROR: (<type 'exceptions.AssertionError'>, AssertionError(), <traceback object at 0x10369c128>)\n\tTRACEBACK:\n\t  File \"/Users/alex/tstl/examples/AVL/sut.py\", line 7960, in check\n\t    assert self.p_avl[0].check_balanced()\n\tSTOPPING TESTING DUE TO FAILED TEST\n\t79.552715655 PERCENT COVERED\n\t2.22598695755 TOTAL RUNTIME\n\t15 EXECUTED\n\t1498 TOTAL TEST OPERATIONS\n\t0.408244371414 TIME SPENT EXECUTING TEST OPERATIONS\n\t0.0258889198303 TIME SPENT EVALUATING GUARDS AND CHOOSING ACTIONS\n\t0.706946611404 TIME SPENT CHECKING PROPERTIES\n\t1.11519098282 TOTAL TIME SPENT RUNNING SUT\n\t0.00753235816956 TIME SPENT RESTARTING\n\t1.03021097183 TIME SPENT REDUCING TEST CASES\n\t220 BRANCHES COVERED\n\t164 STATEMENTS COVERED\n\n\nUsing `--output`, the failing test can be saved to a named file, and with the `standalone.py`\nutility, converted into a completely standalone test case that does\nnot require TSTL itself.\n\n    ~/tstl/examples/AVL$ tstl_rt --timeout 30 --output failure.test\n    Random testing using config=Config(swarmSwitch=None, verbose=False, fastQuickAnalysis=False, failedLogging=None, maxtests=-1, greedyStutter=False, exploit=None, seed=None, generalize=False, localize=False, uncaught=False, speed='FAST', internal=False, normalize=False, highLowSwarm=None, replayable=False, essentials=False, quickTests=False, coverfile='coverage.out', uniqueValuesAnalysis=False, swarm=False, ignoreprops=False, total=False, swarmLength=None, noreassign=False, profile=False, full=False, multiple=False, relax=False, swarmP=0.5, stutter=None, running=False, compareFails=False, nocover=False, swarmProbs=None, gendepth=None, quickAnalysis=False, exploitCeiling=0.1, logging=None, html=None, keep=False, depth=100, throughput=False, timeout=30, output=None, markov=None, startExploit=0)\n    ...\n    ~/tstl/examples/AVL$ tstl_reduce failure.test failure_norm.test\n    REDUCING...\n    ...\n    NORMALIZING...\n    ...\n    ~/tstl/examples/AVL$ tstl_standalone failure_norm.test failure.py\n    ~/tstl/examples/AVL$ python failure_small.py\n    Traceback (most recent call last):\n      File \"failure.py\", line 98, in <module>\n        check()\n      File \"failure.py\", line 45, in check\n        assert avl2.check_balanced()\n    AssertionError\n\nThe final useful hint for getting started is that sometimes you may want to test something\n(for example, a library implemented in C) where failing tests crash the Python interpreter.  This is possible,\nbut requires some effort.  First, run `tstl_rt` with the `--replayable` option.  This causes the generator to\nkeep a file, currtest.test, in the directory you are running testing in: this file holds the current test.  If the random tester crashes, this will include the action that caused the crash.  In a few rare cases, the behavior of past tests is also relevant to a crash (reloading the module does not really reset state of the system -- e.g., interacting with hardware).  For these cases, use `--total` and look at the file fulltest.test, which contains ALL actions ever performed by the random tester.\n\nThe currtest.test and fulltest.test files work just like normal TSTL files, and can be replayed with the replay utility or turned into standalone files.  However, for test reduction and normalization to work correctly, they must be reduced by passing the `--sandbox` argument to `tstl_reduce`.\n\nWhat about tests that fail by entering an infinite loop?  The same technique as is used for crashes works.  However, you need to run `tstl_rt` with a time limit (using ulimit if you are on UNIX-like systems, for example).  The `tstl_reduce` utility provides a `--timeout` argument to handle such tests, but this only works on systems supporting ulimit, for now.  In very rare cases, you might have a test execution lock up because, for example, the failure causes a read from standard input.  If you hit this, contact me.\n\nFinally, how do you integrate TSTL testing with more conventional approaches, e.g., pytest?  The file `test_tstl_regressions.py` in the examples directory shows one way.  If you add all your TSTL tests of interest to a `tstl_tests` directory under the directory where `sut.py` lives, you can make pytest run all your TSTL tests.  Perhaps more interestingly, this file also wraps a simple caller that forces 60 seconds of random testing to be executed by pytest, as a sanity check.  You can tweak the configuration of the random testing easily -- often, adding \"--swarm\" is a good idea.\n\nDeveloper Info\n--------------\n\nThere are no developer docs yet, which will hopefully change in the future.\nThe best shakedown test for tstl is to compile and run (using `tstl_rt`) the AVL\nexample.  Removing any call to the balancing function in the avl.py\ncode should cause TSTL to produce a failing test case.\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/agroce/tstl",
    "keywords": "testing tstl",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "tstl",
    "platform": "",
    "project_url": "https://pypi.org/project/tstl/",
    "release_url": "https://pypi.org/project/tstl/1.0.15/",
    "requires_dist": [
      "coverage"
    ],
    "requires_python": "",
    "summary": "Template scripting testing language (TSTL)",
    "version": "1.0.15"
  },
  "releases": {
    "0.1": [],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ce5e81fdc2534c6f0e7c94361f365b22",
          "sha256": "7b44cafa583fbb90cd72171cdeef124a9a11ac80953f375b92965a25356f52d5"
        },
        "downloads": 13,
        "filename": "tstl-0.9-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "ce5e81fdc2534c6f0e7c94361f365b22",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 59410,
        "upload_time": "2017-03-02T00:03:26",
        "url": "https://files.pythonhosted.org/packages/b1/e1/9d820181d5df701142f25404ac1d1176625a1844f5ae0e706e12006f16f8/tstl-0.9-py2-none-any.whl"
      }
    ],
    "0.9.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2753ab47416b124df439a644933e1719",
          "sha256": "5ff0ccd911ee563c6cc200ed5de53e269332a68aded7b74b184ff0ac9bed7b60"
        },
        "downloads": 13,
        "filename": "tstl-0.9.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "2753ab47416b124df439a644933e1719",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 59537,
        "upload_time": "2017-03-02T00:25:51",
        "url": "https://files.pythonhosted.org/packages/77/63/f764c6ef0499afa79ffb570c04b2fae92d7b54511feea900d0566f524aa4/tstl-0.9.1-py2-none-any.whl"
      }
    ],
    "0.9.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f65c2226dbaaba25809056c2979f7f9f",
          "sha256": "20c032b9d08ab16e13413d6078268911d0fb10bb5dbf8da5eafe945e390ecc34"
        },
        "downloads": 12,
        "filename": "tstl-0.9.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "f65c2226dbaaba25809056c2979f7f9f",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 59805,
        "upload_time": "2017-03-02T03:06:22",
        "url": "https://files.pythonhosted.org/packages/b9/5c/9757e3a05d07d419988953f6babf1b527a130cec1ef4ef5e8d9deed73c30/tstl-0.9.2-py2-none-any.whl"
      }
    ],
    "0.9.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cf794c334be7a3aacc41ae8b7c49dbc7",
          "sha256": "79ffd31a0039c757000c66e03b71da5dd317fed6048127027709842cd6536a22"
        },
        "downloads": 11,
        "filename": "tstl-0.9.3-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "cf794c334be7a3aacc41ae8b7c49dbc7",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 60182,
        "upload_time": "2017-03-03T01:54:19",
        "url": "https://files.pythonhosted.org/packages/de/ba/cd0b9c0eaea8bf01a09fb1520c80239e51667c4def16e36d68d3aa559336/tstl-0.9.3-py2-none-any.whl"
      }
    ],
    "0.9.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3f5f14edb3de7c59d871659d871edcd5",
          "sha256": "b4078d3dee5fb122488730800231fbc8b84fdceabccb041b63d337260d970241"
        },
        "downloads": 14,
        "filename": "tstl-0.9.4-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "3f5f14edb3de7c59d871659d871edcd5",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 60773,
        "upload_time": "2017-03-22T05:14:25",
        "url": "https://files.pythonhosted.org/packages/cd/0b/3d4b2ad748f829a98b41191a862fdf0e91bcd034258d13d1b94c1eeecb41/tstl-0.9.4-py2-none-any.whl"
      }
    ],
    "0.9.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fd7ea13d87297faff8282137e586ea1e",
          "sha256": "3478e8df7faa5d1d78c720eedc42ecbbb5504ed47f1f23542097f9417031b928"
        },
        "downloads": 18,
        "filename": "tstl-0.9.5-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "fd7ea13d87297faff8282137e586ea1e",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 60773,
        "upload_time": "2017-03-31T21:28:23",
        "url": "https://files.pythonhosted.org/packages/c4/c5/1ae6bdc8a4d5d53e6059da6c9163d2c680002f4f2f20cfb88e59a18a4727/tstl-0.9.5-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "89ad8690caab644813bdfd94ae310df0",
          "sha256": "f4826750ea382c73c150341a08b62f4fb7c0e6dfef50b7818e30f0564a26326d"
        },
        "downloads": 18,
        "filename": "tstl-0.9.5.tar.gz",
        "has_sig": false,
        "md5_digest": "89ad8690caab644813bdfd94ae310df0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 55555,
        "upload_time": "2017-03-31T21:28:27",
        "url": "https://files.pythonhosted.org/packages/61/54/7cb0e7599ef0938e667ccc6d6c717bcc535e53f8aa5471390900bc4d7317/tstl-0.9.5.tar.gz"
      }
    ],
    "0.9.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5d8eda7db6fc94245f191e181787aa5d",
          "sha256": "39f978f12993c95e65bbea0e9b741ecdb265b6888740ef3afbfc1c14bec9d850"
        },
        "downloads": 25,
        "filename": "tstl-0.9.6-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "5d8eda7db6fc94245f191e181787aa5d",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 60973,
        "upload_time": "2017-04-03T01:18:31",
        "url": "https://files.pythonhosted.org/packages/1c/9b/6b2d2d9ad2af06a550d196e6dc76a761fa9a3e9933fc7f0ad8a665db4aaa/tstl-0.9.6-py2-none-any.whl"
      }
    ],
    "0.9.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "09a4b5bec08076b9b53f7b71aa094abe",
          "sha256": "83fce5435c79166af7e1ae1be0db574765f998617313f3ff9acf97bdca873d3b"
        },
        "downloads": 0,
        "filename": "tstl-0.9.7-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "09a4b5bec08076b9b53f7b71aa094abe",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 61381,
        "upload_time": "2017-04-17T22:45:22",
        "url": "https://files.pythonhosted.org/packages/ba/3f/48964d082d430f8dda14fcb5cde0e2d792264d6cdcf8e066913309abb1e5/tstl-0.9.7-py2-none-any.whl"
      }
    ],
    "0.9.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "08932aff64c223bef6cec3c0c6757f05",
          "sha256": "689ae1045b6b824404c32f7cfa9658f50fdd0f6482e3901b0aef1c2e13123f5c"
        },
        "downloads": 0,
        "filename": "tstl-0.9.9-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "08932aff64c223bef6cec3c0c6757f05",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 64051,
        "upload_time": "2017-04-30T09:18:08",
        "url": "https://files.pythonhosted.org/packages/3d/20/018758f781e0d60acf71611bc09453877cd12149fb6e923dd2b13eea43fe/tstl-0.9.9-py2-none-any.whl"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e1896b03baa8ed6ff5588a0ba01d41d2",
          "sha256": "a7d4bec3fc525f3434fee561c70e37bbf2ea34532ba9bf5e3d98d9d4dbc5605e"
        },
        "downloads": 0,
        "filename": "tstl-1.0.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "e1896b03baa8ed6ff5588a0ba01d41d2",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 76716,
        "upload_time": "2017-05-01T20:27:30",
        "url": "https://files.pythonhosted.org/packages/34/de/b24093f704e699cd975f1e7ddefe06b990cefb9bc5cf46b8c45649ed9d9f/tstl-1.0.1-py2-none-any.whl"
      }
    ],
    "1.0.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "333f6ba6e15f94a791ca9844beb25810",
          "sha256": "5c41928ee0cb714769a73e5c74e8b35bd95749c41024f0cab41bc3f7842a1a35"
        },
        "downloads": 0,
        "filename": "tstl-1.0.10-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "333f6ba6e15f94a791ca9844beb25810",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 81700,
        "upload_time": "2017-06-16T23:09:56",
        "url": "https://files.pythonhosted.org/packages/33/ba/d812004060a4c20b70641b62fd6c4dabdcf4311065c4ae02caf1a1f64a7a/tstl-1.0.10-py2-none-any.whl"
      }
    ],
    "1.0.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8b67c642b67a1687fffbff2e1ae6b541",
          "sha256": "b57976bd3f4e99a1fd0bff62026d500b7888a73ec62a34f80d2a31a6e67d266e"
        },
        "downloads": 0,
        "filename": "tstl-1.0.11-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "8b67c642b67a1687fffbff2e1ae6b541",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 82555,
        "upload_time": "2017-06-25T22:39:37",
        "url": "https://files.pythonhosted.org/packages/e2/24/84393a4b3e014f74ee9b5006df05750d7270054984c56e0388f4bfdad1bc/tstl-1.0.11-py2-none-any.whl"
      }
    ],
    "1.0.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b281440dd3fb22e26e793dab7141fdb6",
          "sha256": "8293dd38b6f2165d90d3ccf9d20adf5a0e174c40b6c130a420de1dd6c1caa5e6"
        },
        "downloads": 0,
        "filename": "tstl-1.0.12-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "b281440dd3fb22e26e793dab7141fdb6",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 82556,
        "upload_time": "2017-06-25T23:18:37",
        "url": "https://files.pythonhosted.org/packages/a6/51/7c0fa7aee8f725b2116c24507cf5057efc65d70aa3a5b683113f19aed194/tstl-1.0.12-py2-none-any.whl"
      }
    ],
    "1.0.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eb960ba1cda2fa9b48a75e7e26dd013c",
          "sha256": "53697a38ddfa025cdf1b357cd05ca14dbd5acfac2b949e6758987127ce1d7bf5"
        },
        "downloads": 0,
        "filename": "tstl-1.0.13-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "eb960ba1cda2fa9b48a75e7e26dd013c",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 82559,
        "upload_time": "2017-06-25T23:39:19",
        "url": "https://files.pythonhosted.org/packages/f6/2c/16fe6339e5f7c45b58a175e8781010676f14b2a0eaedb25704b5a3b6f6f8/tstl-1.0.13-py2-none-any.whl"
      }
    ],
    "1.0.14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "da81d6f03938bceda39d84d210ec2650",
          "sha256": "20100d7ee45f004c057e38cb97016dadb38c14a6dd3f8772a07feffec5d6b73f"
        },
        "downloads": 0,
        "filename": "tstl-1.0.14-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "da81d6f03938bceda39d84d210ec2650",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 82960,
        "upload_time": "2017-07-02T00:44:45",
        "url": "https://files.pythonhosted.org/packages/f0/f8/9954eeb81ef8be0ce1d66392704572395773160c7c804de54937db363e81/tstl-1.0.14-py2-none-any.whl"
      }
    ],
    "1.0.15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a9242fd6fc20e5d0db721eda2f1df09d",
          "sha256": "20a119f4939946010866d01aabf8c69a0eed425c51b59f8e5f3cdef75d759ad2"
        },
        "downloads": 0,
        "filename": "tstl-1.0.15-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "a9242fd6fc20e5d0db721eda2f1df09d",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 82961,
        "upload_time": "2017-07-10T20:59:17",
        "url": "https://files.pythonhosted.org/packages/9f/a0/45af22797e6a75118f93dbfaad831a48576e3f9d130852378f47bfb00536/tstl-1.0.15-py2-none-any.whl"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "279518ede4ac4472c3d37f441eb01718",
          "sha256": "b7e92cbcafefd912e1d9233e0d70a67e5f67fb485bac581423295502a7898558"
        },
        "downloads": 0,
        "filename": "tstl-1.0.2-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "279518ede4ac4472c3d37f441eb01718",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 77064,
        "upload_time": "2017-05-01T21:09:23",
        "url": "https://files.pythonhosted.org/packages/87/40/5b4f82cae7c8eb1703c5b82f8eecb722aa65741a3581f718a7104fbc93fb/tstl-1.0.2-py2-none-any.whl"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "965c8fa4f24826d78645323d1ffe4b27",
          "sha256": "de6538882998824d85e5dd28687ae2195b96d1cfbc1d1df341f00bf6db6498b1"
        },
        "downloads": 0,
        "filename": "tstl-1.0.3-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "965c8fa4f24826d78645323d1ffe4b27",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 78692,
        "upload_time": "2017-05-02T09:21:23",
        "url": "https://files.pythonhosted.org/packages/e7/65/988749b3c7326be5e4e2aedf14c061ebf01fb15703bd549170b7841ff607/tstl-1.0.3-py2-none-any.whl"
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eeec046323a8fc9a1ce63d788b8ffbe4",
          "sha256": "a1972f28d3e52f47553410c0ff1be652deb173b061d98e1d754bdb141a331466"
        },
        "downloads": 0,
        "filename": "tstl-1.0.4-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "eeec046323a8fc9a1ce63d788b8ffbe4",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 78861,
        "upload_time": "2017-05-02T09:38:23",
        "url": "https://files.pythonhosted.org/packages/ff/d2/cd47aff78274b2c7e0fede01b8cfb0aa473ab32ae95686a1c687b6d2fcae/tstl-1.0.4-py2-none-any.whl"
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6905f31936a9d55546c42283465434d1",
          "sha256": "8a26f15f99891b3354d1a08892387283bbddf8a0620a0b0f4c4513d73ad065bd"
        },
        "downloads": 0,
        "filename": "tstl-1.0.5-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "6905f31936a9d55546c42283465434d1",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 79799,
        "upload_time": "2017-05-27T18:41:05",
        "url": "https://files.pythonhosted.org/packages/d7/52/241bcc40358afea872f9fb002f979804dec6dbde3544dcb0635b0cacf00d/tstl-1.0.5-py2-none-any.whl"
      }
    ],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "092cbc9917d07eca54d0535eedb99dfe",
          "sha256": "abdad45694538601827f72b62f90d24b8eb332d53f11335315158d0a24ea4f84"
        },
        "downloads": 0,
        "filename": "tstl-1.0.6-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "092cbc9917d07eca54d0535eedb99dfe",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 80420,
        "upload_time": "2017-06-12T10:53:50",
        "url": "https://files.pythonhosted.org/packages/81/eb/77d457716689fee1616e95a8aa5f8d513c64b640da39db1cdc68a35bb4ef/tstl-1.0.6-py2-none-any.whl"
      }
    ],
    "1.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e4fc3251e609fba6a12b149a749de58d",
          "sha256": "a98d7f5154d110b2076427b8edddea80f768d8184aecb3e5160b02150a4d0f0e"
        },
        "downloads": 0,
        "filename": "tstl-1.0.7-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "e4fc3251e609fba6a12b149a749de58d",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 80682,
        "upload_time": "2017-06-14T19:35:27",
        "url": "https://files.pythonhosted.org/packages/6e/bd/ea64b92aedc057284c81623e8daa578bcfe67c6ed9b637a29fe2ca78bce5/tstl-1.0.7-py2-none-any.whl"
      }
    ],
    "1.0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "359f3ae55cb0eaef5cb47798b34541d9",
          "sha256": "48b575eb81df727ff12d5119feeb824f55948213b2cfcfbeead8a870710ee39d"
        },
        "downloads": 0,
        "filename": "tstl-1.0.8-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "359f3ae55cb0eaef5cb47798b34541d9",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 80775,
        "upload_time": "2017-06-14T22:46:19",
        "url": "https://files.pythonhosted.org/packages/7d/a5/b8eace3fcb9caa94f8c9b6200ae204bbeaf5cc3b16a38dddb5c2f443e79d/tstl-1.0.8-py2-none-any.whl"
      }
    ],
    "1.0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "97e21c69d7632ebcb35637959747def8",
          "sha256": "14b23d7e24cf75ad0eedc04115a941283fbd1f80a222fd1ecc6dacb9f28dbc99"
        },
        "downloads": 0,
        "filename": "tstl-1.0.9-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "97e21c69d7632ebcb35637959747def8",
        "packagetype": "bdist_wheel",
        "python_version": "py2",
        "size": 81677,
        "upload_time": "2017-06-16T21:27:21",
        "url": "https://files.pythonhosted.org/packages/51/a1/eca5913c943b0f876b41940bc93c988be6915b6d593de3dfb9cd17f64e02/tstl-1.0.9-py2-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a9242fd6fc20e5d0db721eda2f1df09d",
        "sha256": "20a119f4939946010866d01aabf8c69a0eed425c51b59f8e5f3cdef75d759ad2"
      },
      "downloads": 0,
      "filename": "tstl-1.0.15-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "a9242fd6fc20e5d0db721eda2f1df09d",
      "packagetype": "bdist_wheel",
      "python_version": "py2",
      "size": 82961,
      "upload_time": "2017-07-10T20:59:17",
      "url": "https://files.pythonhosted.org/packages/9f/a0/45af22797e6a75118f93dbfaad831a48576e3f9d130852378f47bfb00536/tstl-1.0.15-py2-none-any.whl"
    }
  ]
}