{
  "info": {
    "author": "Niall Douglas and David Beazley",
    "author_email": "UNKNOWN",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development :: Build Tools"
    ],
    "description": "A C99 preprocessor written in pure Python\n=========================================\n.. role:: c(code)\n   :language: c\n\n.. |travis| image:: https://travis-ci.org/ned14/pcpp.svg?branch=master\n    :align: middle\n    :target: https://travis-ci.org/ned14/pcpp\n\n\\(C) 2017 Niall Douglas http://www.nedproductions.biz/ and (C) 2007-2017 David Beazley http://www.dabeaz.com/\n\nPyPI: https://pypi.python.org/pypi/pcpp Github: https://github.com/ned14/pcpp API reference docs: https://ned14.github.io/pcpp/\n\nTravis master branch all tests passing for Python v2 and v3: |travis|\n\nA pure universal Python C (pre-)preprocessor implementation very useful for pre-preprocessing header only\nC++ libraries into single file includes and other such build or packaging stage malarky.\nThe implementation can be used as a Python module (`see API reference <https://ned14.github.io/pcpp/>`_)\nor as a command line tool ``pcpp`` which\ncan stand in for a conventional C preprocessor (i.e. it'll accept similar arguments).\n\nA very unique facility of this C preprocessor is *partial* preprocessing so you can\nprogrammatically control how much preprocessing is done by ``pcpp`` and how much is\ndone by the C or C++ compiler's preprocessor. The ultimate control is by subclassing\nthe :c:`Preprocessor` class in Python from which you can do anything you like, however\nfor your convenience the ``pcpp`` command line tool comes with the following canned\npartial preprocessing algorithms:\n\n**passthru-defines**\n  Pass through but still execute #defines and #undefs if not always removed by\n  preprocessor logic. This ensures that including the output sets exactly the same\n  macros as if you included the original, plus include guards work.\n\n**passthru-unfound-includes**\n  If an :c:`#include` is not found, pass it through unmodified. This is very useful\n  for passing through includes of system headers.\n\n**passthru-undefined-exprs**\n  This is one of the most powerful pass through algorithms. If an expression passed to\n  :c:`#if` (or its brethern) contains an unknown macro, expand the expression with\n  known macros and pass through *unexecuted*, and then pass through the remaining block.\n  Each :c:`#elif` is evaluated in turn and if it does not contain unknown macros, it will be\n  executed immediately. Finally, any :c:`#else` clause is always passed through *unexecuted*.\n  Note that include guards normally defeat this algorithm, so those are specially detected and\n  ignored.\n\n**passthru-comments**\n  A major use case for ``pcpp`` is as a preprocessor for the `doxygen <http://www.stack.nl/~dimitri/doxygen/>`_\n  reference documentation tool whose preprocessor is unable to handle any preprocessing\n  of any complexity. ``pcpp`` can partially execute the preprocessing which doxygen\n  is incapable of, thus generating output which produces good results with doxygen.\n  Hence the ability to pass through comments containing doxygen markup is very useful.\n\nStandards (non-)compliance\n--------------------------\n``pcpp`` passes a modified edition of the `mcpp <http://mcpp.sourceforge.net/>`_ unit\ntest suite. Modifications done were to clarify ternary operators with extra brackets,\nplus those testing the unusual special quirks in expression evaluation (see detailed\ndescription below). It also passes the list of \"preprocessor torture\" expansion fragments\nin the C11 standard, correctly expanding some very complex recursive macro expansions\nwhere expansions cause new macro expansions to be formed. In this, it handily beats\nthe MSVC preprocessor and ought to handle most C99 preprocessor metaprogramming.\nIf you compare its output side-by-side to that of GCC or clang's preprocessor, results\nare extremely close indeed with blank line collapsing being the only difference.\n\nThe most non-conforming part is :c:`#if` expression\nparsing (donations of a proper yacc based parser for executing :c:`#if` expressions based on\nhttp://www.dabeaz.com/ply/ are welcome). In practice, in most real world code, you\nwon't notice the departures and if you do, the application of extra brackets to\ngroup subexpressions so Python's :c:`eval()` executes right will fix it.\n\nA full, detailed list of known non-conformance with the C99 standard is below. We have\nbeen told that ``pcpp`` does not pass the Boost.Wave preprocessor test suite, but\nthe chances of that biting most people is low. If it does, pull requests with bug\nfixes and new unit tests for the fix are welcome.\n\nNote that most of this preprocessor was written originally by David Beazley to show\noff his excellent Python Lex-Yacc library PLY (http://www.dabeaz.com/ply/) and is\nhidden in there without being at all obvious given the number of Stackoverflow\nquestions which have asked for a pure Python C preprocessor implementation. This\nimplementation fixes a lot of conformance bugs (the original was never intended to\nrigidly adhere to the C standard) and adds in a test suite based on the C11 preprocessor\ntorture samples plus the mcpp preprocessor test suite. Still, this project would\nnot be possible without David's work, so please take off your hat and give a bow towards him.\n\nCommand line tool ``pcpp``:\n---------------------------\nThe help from the command line tool ``pcpp``::\n\n    usage: pcpp [-h] [-o [path]] [-D macro[=val]] [-U macro] [-N macro] [-I path]\n                [--passthru-defines] [--passthru-unfound-includes]\n                [--passthru-unknown-exprs] [--passthru-comments]\n                [--disable-auto-pragma-once] [--line-directive [form]] [--debug]\n                [--version]\n                [input]\n\n    A pure universal Python C (pre-)preprocessor implementation very useful for\n    pre-preprocessing header only C++ libraries into single file includes and\n    other such build or packaging stage malarky.\n\n    positional arguments:\n      input                 File to preprocess\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -o [path]             Output to a file instead of stdout\n      -D macro[=val]        Predefine name as a macro [with value]\n      -U macro              Pre-undefine name as a macro\n      -N macro              Never define name as a macro, even if defined during\n                            the preprocessing.\n      -I path               Path to search for unfound #include's\n      --passthru-defines    Pass through but still execute #defines and #undefs if\n                            not always removed by preprocessor logic\n      --passthru-unfound-includes\n                            Pass through #includes not found without execution\n      --passthru-unknown-exprs\n                            Unknown macros in expressions cause preprocessor logic\n                            to be passed through instead of executed by treating\n                            unknown macros as 0L\n      --passthru-comments   Pass through comments unmodified\n      --disable-auto-pragma-once\n                            Disable the heuristics which auto apply #pragma once\n                            to #include files wholly wrapped in an obvious include\n                            guard macro\n      --line-directive [form]\n                            Form of line directive to use, defaults to #line,\n                            specify nothing to disable output of line directives\n      --debug               Generate a pcpp_debug.log file logging execution\n      --version             show program's version number and exit\n\n    Note that so pcpp can stand in for other preprocessor tooling, it ignores any\n    arguments it does not understand and any files it cannot open.\n\nQuick demo of pass through mode\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nLet us look at an example for pass through mode. Here is the original:\n\n.. code-block:: c\n\n    #if !defined(__cpp_constexpr)\n    #if __cplusplus >= 201402L\n    #define __cpp_constexpr 201304  // relaxed constexpr\n    #else\n    #define __cpp_constexpr 190000\n    #endif\n    #endif\n    #ifndef BOOSTLITE_CONSTEXPR\n    #if __cpp_constexpr >= 201304\n    #define BOOSTLITE_CONSTEXPR constexpr\n    #endif\n    #endif\n    #ifndef BOOSTLITE_CONSTEXPR\n    #define BOOSTLITE_CONSTEXPR\n    #endif\n\n``pcpp test.h --passthru-defines --passthru-unknown-exprs`` will output:\n\n.. code-block:: c\n\n    #if !defined(__cpp_constexpr)\n    #if __cplusplus >= 201402\n    #define __cpp_constexpr 201304\n    #else\n    #define __cpp_constexpr 190000\n    #endif\n    #endif\n    #ifndef BOOSTLITE_CONSTEXPR\n    #if __cpp_constexpr >= 201304\n    #define BOOSTLITE_CONSTEXPR constexpr\n    #endif\n    #endif\n    #ifndef BOOSTLITE_CONSTEXPR\n    #define BOOSTLITE_CONSTEXPR\n    #endif\n\nThis is because ``__cpp_constexpr`` was not defined, so because of the ``--passthru-unknown-exprs`` flag\nwe pass through everything inside that if block **unexecuted** i.e. defines and undefs are NOT executed by\n``pcpp``. Let's define ``__cpp_constexpr``:\n\n``pcpp test.h --passthru-defines --passthru-unknown-exprs -D __cpp_constexpr``\n\n.. code-block:: c\n\n    #line 8 \"test.h\"\n    #ifndef BOOSTLITE_CONSTEXPR\n\n\n\n    #endif\n    #ifndef BOOSTLITE_CONSTEXPR\n    #define BOOSTLITE_CONSTEXPR\n    #endif\n\nSo, big difference now. We execute the entire first if block as ``__cpp_constexpr`` is now defined, thus\nleaving whitespace. Let's try setting ``__cpp_constexpr`` a bit higher:\n\n``pcpp test.h --passthru-defines --passthru-unknown-exprs -D __cpp_constexpr=201304``\n\n.. code-block:: c\n\n    #line 8 \"test.h\"\n    #ifndef BOOSTLITE_CONSTEXPR\n\n    #define BOOSTLITE_CONSTEXPR constexpr\n\n    #endif\n\nAs you can see, the lines related to the known ``__cpp_constexpr`` are executed and removed, passing through\nany if blocks with unknown macros in the expression.\n\nWhat if you want a macro to be known but undefined? The -U (to undefine) flag has an obvious meaning in pass\nthrough mode in that it makes a macro no longer unknown, but known to be undefined.\n\n``pcpp test.h --passthru-defines --passthru-unknown-exprs -U __cpp_constexpr``\n\n.. code-block:: c\n\n    #if __cplusplus >= 201402\n    #define __cpp_constexpr 201304\n    #else\n    #define __cpp_constexpr 190000\n    #endif\n\n    #ifndef BOOSTLITE_CONSTEXPR\n\n\n\n    #endif\n    #ifndef BOOSTLITE_CONSTEXPR\n    #define BOOSTLITE_CONSTEXPR\n    #endif\n\nHere ``__cpp_constexpr`` is known to be undefined so the first clause executes, but ``__cplusplus`` is\nunknown so that entire block is passed through unexecuted. In the next test comparing ``__cpp_constexpr``\nto 201304 it is still known to be undefined, and so 0 >= 201304 is the expressions tested which is false,\nhence the following stanza is removed entirely.\n\nHelping ``pcpp`` using source code annotation\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nYou can achieve a great deal using -D (define), -U (undefine) and -N (never define) on the command line,\nbut for more complex preprocessing it gets hard to pass through the correct logic without some source code\nannotation.\n\n``pcpp`` lets you annotate which part of an if block being passed through due to use of unknown macros\nto also be executed in addition to the pass through. For this use ``__PCPP_ALWAYS_FALSE__`` or\n``__PCPP_ALWAYS_TRUE__`` which tells ``pcpp`` to temporarily start executing the passed through\npreprocessor commands e.g.\n\n.. code-block:: c\n\n    #if !defined(__cpp_constexpr)\n    #if __cplusplus >= 201402L\n    #define __cpp_constexpr 201304\n    #elif !__PCPP_ALWAYS_FALSE__     // pcpp please execute this next block\n    #define __cpp_constexpr 190000\n    #endif\n    #endif\n    #ifndef BOOSTLITE_CONSTEXPR\n    #if __cpp_constexpr >= 201304\n    #define BOOSTLITE_CONSTEXPR constexpr\n    #endif\n    #endif\n    #ifndef BOOSTLITE_CONSTEXPR\n    #define BOOSTLITE_CONSTEXPR\n    #endif\n\nNote that ``__PCPP_ALWAYS_FALSE__`` will always be false in any other preprocessor, and it is also\nfalse in ``pcpp``. However it causes ``pcpp`` to execute the define of ``__cpp_constexpr`` to 190000:\n\n``pcpp test.h --passthru-defines --passthru-unknown-exprs``\n\n.. code-block:: c\n\n    #if !defined(__cpp_constexpr)\n    #if __cplusplus >= 201402\n    #define __cpp_constexpr 201304\n    #elif 1\n    #define __cpp_constexpr 190000\n    #endif\n    #endif\n    #ifndef BOOSTLITE_CONSTEXPR\n\n\n\n    #endif\n    #ifndef BOOSTLITE_CONSTEXPR\n    #define BOOSTLITE_CONSTEXPR\n    #endif\n\nThis is one way of marking up ``#else`` clauses so they always execute in a normal preprocessor\nand also pass through with execution with ``pcpp``. You can, of course, also place ``|| __PCPP_ALWAYS_FALSE__``\nin any ``#if`` stanza to cause it to be passed through with execution, but not affect the\npreprocessing logic otherwise.\n\nWhat's implemented by the ``Preprocessor`` class:\n=================================================\n- Digraphs and Trigraphs\n- line continuation operator '``\\``'\n- C99 correct elimination of comments and maintenance of whitespace in output.\n- :c:`__DATE__`, :c:`__TIME__`, :c:`__FILE__`, :c:`__LINE__`. Note that :c:`__STDC__` et al are NOT defined by\n  default, you need to define those manually before starting preprocessing.\n- :c:`__COUNTER__`, a very common extension\n- Object :c:`#define`\n- Function :c:`#define macro(...)`\n\n  - Retokenisation and reexpansion after expansion is C99 compliant.\n\n- :c:`#undef`\n- :c:`#include \"path\"`, :c:`<path>` and :c:`PATH`\n- :c:`defined` operator\n- C operators:\n\n  - :c:`+, -, !, ~`\n  - :c:`*, /, %`\n  - :c:`+, -`\n  - :c:`<<, >>`\n  - :c:`<, <=, >, >=`\n  - :c:`==, !=`\n  - :c:`&`\n  - :c:`^`\n  - :c:`|`\n  - :c:`&&`\n  - :c:`||`\n  - :c:`x ? y : z` (partial support, see known bugs)\n\n- :c:`#if`, :c:`#ifdef`, :c:`#ifndef`, :c:`#elif`, :c:`#else`, :c:`#endif`\n- Stringizing operator #\n- Token pasting operator ##\n- :c:`#pragma once`, a very common extension\n\nAdditionally implemented by ``pcpp`` command line tool:\n-------------------------------------------------------\n- :c:`#error` (default implementation prints to stderr and increments the exit code)\n- :c:`#warning` (default implementation prints to stderr)\n\nNot implemented yet (donations of code welcome):\n------------------------------------------------\n- :c:`#pragma` anything other than once.\n- :c:`_Pragma` used to emit preprocessor calculated #pragma.\n- :c:`#line num`, :c:`num \"file\"` and :c:`NUMBER FILE`.\n\nKnown bugs (ordered from worst to least worst):\n-----------------------------------------------\n**Expression evaluation is a bit broken**\n Currently :c:`#if` expressions are evaluated by converting them into Python\n expressions and calling :c:`eval()` on them. This works surprisingly well\n most of the time, but because Python is not C, corner cases break.\n These are the known such broken corner cases:\n\n - Unary operator evaluation will break for evil expressions such as :c:`-!+!9`\n   because logical NOT in Python results in a boolean, not an integer, and\n   a unary plus or negative boolean is invalid syntax in Python\n - Similarly expressions which assume that boolean operations output either\n   a zero or a one will fail e.g. :c:`(2 || 3) == 0`\n - Python has no concept of an unsigned integer and C expressions relying\n   on unsigned integer semantics will fail badly e.g. :c:`-1 <= 0U`\n   is supposed to be evaluated as false in the C preprocessor, but it will be\n   evaluated as true under this implementation. To be honest\n   if your preprocessor logic is relying on those sorts of behaviours, you should rewrite it.\n - Without a back tracking parser, the C ternary operator is hard to accurately\n   convert into a Python ternary operation, so you need to help it by using one\n   of these two forms:\n\n   - :c:`(x) ? y : z` (z gets evaluated according to Python not C precedence)\n   - :c:`(x ? y : z)` (preferred, evaluates correctly, we inject brackets\n     around the subexpessions before sending to Python)\n\n Code donations of a proper lexing parser based on http://www.dabeaz.com/ply/ are welcome!\n\n**We do not pass the Boost.Wave preprocessor test suite**\n A lot of bugs have been fixed since this was reported, however the chances are\n that ``pcpp`` still doesn't pass it. A TODO is to port the Wave test suite to\n Python and find out how bad things are. We suspect that any failures will be\n in highly estoric use cases i.e. known illegal input. If you only use valid\n input then we expect you generally won't have trouble.\n\nCustomising your own preprocessor:\n==================================\nSee the API reference docs at https://ned14.github.io/pcpp/\n\nYou can find an example of overriding the ``on_*()`` processing hooks at https://github.com/ned14/pcpp/blob/master/pcpp/pcpp_cmd.py",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://pypi.python.org/pypi/pcpp",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pcpp",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pcpp/",
    "release_url": "https://pypi.org/project/pcpp/1.0/",
    "requires_python": null,
    "summary": "A C99 preprocessor written in pure Python",
    "version": "1.0"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d08dbd296f20cb72265bd8dccf57d251",
          "sha256": "75b5acd796416f6f3c45c5cc9495b63b5224d199c9696c0ef83c278c79f4bef4"
        },
        "downloads": 26,
        "filename": "pcpp-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d08dbd296f20cb72265bd8dccf57d251",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22238,
        "upload_time": "2017-03-13T15:25:22",
        "url": "https://files.pythonhosted.org/packages/bd/d5/a709ba86867d021620cb9aa6dce5e1137d810d35e0c80a071e8e07c19afb/pcpp-1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "d08dbd296f20cb72265bd8dccf57d251",
        "sha256": "75b5acd796416f6f3c45c5cc9495b63b5224d199c9696c0ef83c278c79f4bef4"
      },
      "downloads": 26,
      "filename": "pcpp-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "d08dbd296f20cb72265bd8dccf57d251",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 22238,
      "upload_time": "2017-03-13T15:25:22",
      "url": "https://files.pythonhosted.org/packages/bd/d5/a709ba86867d021620cb9aa6dce5e1137d810d35e0c80a071e8e07c19afb/pcpp-1.0.tar.gz"
    }
  ]
}