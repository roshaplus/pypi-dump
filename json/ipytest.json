{
  "info": {
    "author": "Christopher Prohm",
    "author_email": "mail@cprohm.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Testing"
    ],
    "description": "# ipytest - unit tests in IPython notbeooks\n\nSometimes quick experiments in IPython grow large and you find yourself wanting\nunit tests. This module aims to make testing code in IPython notebooks easy. At\nits core, it offers a test runner that execute all tests defined inside the\nnotebook environment. It is also designed to make the transfer of the tests into\nproper python modules easy.\n\nInstallation: `pip install ipytest`\n\n\n## Changes\n\n- `0.2.1`: add ipython magics to simplify test execution\n- `0.2.0`: support for using pytest inside notebooks\n- `0.1.0`: support for running `unittest.FunctionTestCase`,\n  `unittest.TestCases`, and `doctests`.\n\n\n## Features\n\n- simple interface\n- builds on standard unittest\n- support for doctests\n- support for pandas and numpy.\n- support for [pytest][pytest.org] (with all bells and whistles)\n- magics for easy execution\n\n\n## Example\n\n```python\n# In[1]:\nimport ipytest.magics\n\ndef fibonacci(i):\n    \"\"\"Compute the fibonacci sequence.\n\n    >>> [fibonacci(n) for n in range(7)]\n    [1, 1, 2, 3, 5, 8, 13]\n\n    \"\"\"\n    if i == 0 or i == 1:\n        return 1\n    return fibonacci(i - 1) + fibonacci(i - 2)\n\n# In[2]:\n%%run_pytest[clean] -qq\n\ndef test_fibonacci_0():\n    assert fibonacci(0) == 1\n\ndef test_fibonacci_1():\n    assert fibonacci(1) == 1\n\ndef test_fibonacci_2():\n    assert fibonacci(2) == 2\n\ndef test_fibonacci_3():\n    assert fibonacci(3) == 3\n\ndef test_fibonacci_4():\n    assert fibonacci(4) == 5\n\ndef test_fibonacci_5():\n    assert fibonacci(5) == 8\n\ndef test_fibonacci_6():\n    assert fibonacci(6) == 13\n\nipytest.run_tests(doctest=True)     \n```\n\n## Reference\n\n### `%%run_pytest ...`\n\nIPython magic that first executes the cell, then executes `run_pytest`.\nAny arguments passed inside the cell will be passed on directly to pytest.\nTo register use the magics, run `import ipytest.magics` first.\n\nFor example:\n\n```python\n%%run_pytest -vvv\n\n\ndef test_example():\n    ...\n\n```\n\n### `%%run_pytest[clean] ...`\n\nSame as the `%%run_pytest`, but cleans any previously found tests, i.e., only tests defined in the\ncurrent cell are executed.\n\n### ipytest.run_pytest(module=None, filename=None, pytest_options=(), pytest_plugins=())\n\nExecute tests in the passed module (defaults to __main__) with pytest.\n\n**Arguments:**\n\n- `module`: the module containing the tests.\n  If not given, `__main__` will be used.\n- `filename`: the filename of the file containing the tests.\n  It has to be a real file, e.g., a notebook name, since its existence will\n  be checked by pytest.\n  If not given, the `__file__` attribute of the passed module will be used.\n- `pytest_options`: additional options passed to pytest\n- `pytest_plugins`: additional plugins passed to pytest\n\n### ipytest.run_tests(doctest=False, items=None)\n\nRun all tests in the given items dictionary.\n\n**Arguments:**\n\n- `doctest`: if True search for doctests.\n- `items`: the globals object containing the tests. If `None` is given, the\n    globals object is determined from the call stack.\n\n### ipytest.clean_tests(pattern=\"test*\", items=None)\n\nDelete tests with names matching the given pattern.\n\nIn IPython the results of all evaluations are kept in global variables\nunless explicitly deleted. This behavior implies that when tests are renamed\nthe previous definitions will still be found if not deleted. This method\naims to simply this process.\n\nAn effecitve pattern is to start with the cell containing tests with a call\nto `clean_tests`, then defined all test cases, and finally call `run_tests`.\nThis way renaming tests works as expected.\n\n**Arguments:**\n\n- `pattern`: a glob pattern used to match the tests to delete.\n- `items`: the globals object containing the tests. If `None` is given, the\n    globals object is determined from the call stack.\n\n### ipytest.collect_tests(doctest=False, items=None)\n\nCollect all test cases and return a `unittest.TestSuite`.\n\nThe arguments are the same as for `ipytest.run_tests`.\n\n### ipytest.assert_equals(a, b, *args, **kwargs)\n\nCompare two objects and throw and exception if they are not equal.\n\nThis method uses `ipytest.get_assert_function` to determine the assert\nimplementation to use depending on the argument type.\n\n**Arguments**\n\n- `a`, `b`: the two objects to compare.\n- `args`, `kwargs`: (keyword) arguments that are passed to the underlying\n    test function. This option can, for example, be used to set the\n    tolerance when comparing `numpy.array` objects\n\n### ipytest.get_assert_function(a, b)\n\nDetermine the assert function to use depending on the arguments.\n\nIf either object is a `numpy .ndarray`, a `pandas.Series`, a\n`pandas.DataFrame`, or `pandas.Panel`, it returns the assert functions\nsupplied by `numpy` and `pandas`.\n\n### ipytest.unittest_assert_equals(a, b)\n\nCompare two objects with the `assertEqual` method of `unittest.TestCase`.\n\n\n## License\n\n    The MIT License (MIT)\n    Copyright (c) 2015 - 2016 Christopher Prohm\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the \"Software\"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE.",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": null,
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "ipytest",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/ipytest/",
    "release_url": "https://pypi.org/project/ipytest/0.2.1/",
    "requires_python": null,
    "summary": "Unit tests in IPython notebooks.",
    "version": "0.2.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ad26816caedf4346002091437657c7e0",
          "sha256": "245b9b02a0d1e049bab85fb6e2972268cde9db85bff3f71291bef10d0526f812"
        },
        "downloads": 578,
        "filename": "ipytest-0.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ad26816caedf4346002091437657c7e0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 8610,
        "upload_time": "2016-02-07T21:12:27",
        "url": "https://files.pythonhosted.org/packages/53/f9/8f2eee014c20fc78d48ad5d039240e27d3ca1ec0fc873c52fb722f4d936d/ipytest-0.1.0-py2.py3-none-any.whl"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "df192e87fb54c4e97a1fc14e2e73fc25",
          "sha256": "b75ceacb83c72bae89a70e75aa39091586e9ea07bd148ce041242086330d3d1f"
        },
        "downloads": 301,
        "filename": "ipytest-0.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "df192e87fb54c4e97a1fc14e2e73fc25",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 9597,
        "upload_time": "2016-12-24T14:09:27",
        "url": "https://files.pythonhosted.org/packages/11/54/3b567abda2e55c691b0ad4fb4fc6517d0c947c6226c294e0501f894efafb/ipytest-0.2.0-py2.py3-none-any.whl"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "32fb26287dfcab8e2a276f8edf6a3711",
          "sha256": "e2d585979957e15a468b648e56b17628d52d02a3bd0fcd050afb954411ce8692"
        },
        "downloads": 182,
        "filename": "ipytest-0.2.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "32fb26287dfcab8e2a276f8edf6a3711",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 10915,
        "upload_time": "2016-12-28T18:01:05",
        "url": "https://files.pythonhosted.org/packages/95/7f/9e36497951925358627ed00260c5bf77678b63f828e4c63610513c844b37/ipytest-0.2.1-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "32fb26287dfcab8e2a276f8edf6a3711",
        "sha256": "e2d585979957e15a468b648e56b17628d52d02a3bd0fcd050afb954411ce8692"
      },
      "downloads": 182,
      "filename": "ipytest-0.2.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "32fb26287dfcab8e2a276f8edf6a3711",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 10915,
      "upload_time": "2016-12-28T18:01:05",
      "url": "https://files.pythonhosted.org/packages/95/7f/9e36497951925358627ed00260c5bf77678b63f828e4c63610513c844b37/ipytest-0.2.1-py2.py3-none-any.whl"
    }
  ]
}