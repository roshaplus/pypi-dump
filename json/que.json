{
  "info": {
    "author": "Jay Marcyes",
    "author_email": "jay@marcyes.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Console",
      "Environment :: Plugins",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.0",
      "Programming Language :: Python :: 3.1",
      "Programming Language :: Python :: 3.2",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Internet",
      "Topic :: System :: Shells"
    ],
    "description": "Que\n===\n\nSlice and dice html on the command line using CSS selectors.\n\nQuick start\n-----------\n\nLet's say you want to grab all the links on\n**http://example.com/foo/bar**:\n\n::\n\n    $ curl http://example.com/foo/bar | que \"a->href\"\n\nLet's say that gave you 3 lines that looked like this:\n\n::\n\n    /some/url?val=1\n    /some/url2?val=2\n    /some/url3?val=3\n\nUgh, that's not very helpful, so let's modify our argument a bit:\n\n::\n\n    $ curl http://example.com/foo/bar | que \"a->http://example.com{href}\"\n\nNow, that will print:\n\n::\n\n    http://example.com/some/url?val=1\n    http://example.com/some/url2?val=2\n    http://example.com/some/url3?val=3\n\nSelecting\n---------\n\nNot sure how to use CSS Selectors?\n\n-  `Beautiful Soup CSS select\n   docs <https://www.crummy.com/software/BeautifulSoup/bs4/doc/#searching-by-css-class>`__\n-  `JQuery's CSS Selector\n   docs <http://api.jquery.com/category/selectors/>`__\n\nThe selector is divided into two parts separated by ``->``, the first\npart is the traditional selector talked about in the above links and the\nsecond part is the attributes you want to print to the screen for each\nmatch:\n\n::\n\n    $ css.selector->attribute,selector\n\nThe Selector part uses `Python's string formatting\nsyntax <https://docs.python.org/2/library/string.html#formatspec>`__ so\nyou can embed the attributes you want within a larger string.\n\nExamples\n--------\n\nFind all the \"Download\" links on a page:\n\nque has support for the the non-standard `:contains css\nselector <https://www.w3.org/TR/2001/CR-css3-selectors-20011113/#content-selectors>`__\n\n::\n\n    $ curl http://example.com | que \"a:contains(Download)->href\"\n\nSelect all the links with attribute ``data`` that starts with \"foo\":\n\n::\n\n    $ curl http://example.com | que \"a[data|=foo]->href\"\n\nInstallation\n------------\n\nYou can use pip to install stable:\n\n::\n\n    $ pip install que\n\nor the latest and greatest (which might be different than what's on\n`pypi <https://pypi.python.org/pypi/que>`__:\n\n::\n\n    $ pip install git+https://github.com/jaymon/que#egg=que\n\nNotes\n-----\n\n-  If you need a way more fully featured html command line parser, try\n   `hq <https://github.com/rbwinslow/hq>`__.\n\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/Jaymon/que",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "que",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/que/",
    "release_url": "https://pypi.org/project/que/0.0.2/",
    "requires_dist": [],
    "requires_python": null,
    "summary": "CSS selectors for parsing html on the command line",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4508fa458c23240d2e1d5eb955ef95ec",
          "sha256": "418f3f0d61a41db2e852de5133cbc759e8bddc3d8e405efdea4267f697eade55"
        },
        "downloads": 0,
        "filename": "que-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4508fa458c23240d2e1d5eb955ef95ec",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3125,
        "upload_time": "2017-05-16T09:23:24",
        "url": "https://files.pythonhosted.org/packages/77/d1/17844565881e171503324c3a03e1194874f784c1d36ecf0b815860cd3175/que-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f2fbfc70298c28cfbd4daff051a56815",
          "sha256": "c5405c29afe3cab99943fe2a0a22792768a99ee613e3f05b7df910fa71c52260"
        },
        "downloads": 0,
        "filename": "que-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f2fbfc70298c28cfbd4daff051a56815",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3489,
        "upload_time": "2017-06-30T17:15:24",
        "url": "https://files.pythonhosted.org/packages/ac/3d/779b0119f15acc2ef6d57d722dfc0f9aab564d735cfbc34df9e0b1307881/que-0.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f2fbfc70298c28cfbd4daff051a56815",
        "sha256": "c5405c29afe3cab99943fe2a0a22792768a99ee613e3f05b7df910fa71c52260"
      },
      "downloads": 0,
      "filename": "que-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f2fbfc70298c28cfbd4daff051a56815",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3489,
      "upload_time": "2017-06-30T17:15:24",
      "url": "https://files.pythonhosted.org/packages/ac/3d/779b0119f15acc2ef6d57d722dfc0f9aab564d735cfbc34df9e0b1307881/que-0.0.2.tar.gz"
    }
  ]
}