{
  "info": {
    "author": "Andre Tan",
    "author_email": "andre.sutanto.91@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Scientific/Engineering :: Bio-Informatics"
    ],
    "description": "# Pincer: In Silico PCR for Python3\n\nPincer is a Python3 tool to do in silico PCR.  \n\nProvide it with a genome assembly FASTA and primers FASTA, and it will produce amplicons where possible.\n\n## Requirements\n\nCurrently it only needs Bio.pairwise2 and Bio.SeqIO. Version will be updated.\n\n## Usage\nAs is, Pincer is ready to be used over the command line, but you may need to do \n`python3 run_Pincer.py --query <your assembly FASTA> --primers <your primers FASTA>`\n(setup.py will be made).\n\nThe required variables are:  \n`--query <FASTA>`: an assembled genome FASTA. Alignment will be checked within contigs; the longer the contigs, the better chance we have to find possible existing alignments.  \n`--primers <FASTA>`: a FASTA containing primer1 and primer2 as separate records.  \n\nPincer uses Bio.pairwise2 local alignment function, and you can manually set the score and penalty using:  \n`-match <int>`: a positive integer value for when match occurs. Default: 1  \n`-mismatch <int>`: a negative integer value (or zero) for when mismatch occurs. Default: 0  \n`-gap_open <int>`: a negative integer value (or zero) for when gap open occurs. Default: -5  \n`-gap_extend <int>`: a negative integer value (or zero) for when gap extend occurs. Default: -2  \n\nPincer will filter alignments according to the set scores, and produce amplicons where primer1 and primer2 aligned in a contig within possible product length range. \nAmplicons outside of the minimum and maximum product length will not be produced. \nThe variables are:  \n`-min_score <int>`: a positive integer value for alignment to be considered as properly aligned. Default: 16.  \n`-min_product_length <int>`: a positive integer value for minimum product length. Default: 500bps.  \n`-max_product_length <int>`: a positive integer value for maximum product length. Default: 3000bps.  \n\n`-output_filename <filename>`: a character string for if you want the amplicons sent to a file. Default: None, will print to command line.  \n\n## Output Header\n\nThe amplicons will be coupled with a slightly modified FASTA header to show where it is produced.  \n`>contig_found direction:start_pos-end_pos:size`\n  \n`contig_found`: Record.id of the contig in the genome FASTA.  \n`direction`: Sense or Antisense. FASTA sequence is by default Sense, and the reverse complement is Antisense.  \n`start_pos-end_pos`: Start and end position in the contig sequence. Note that in Antisense, the position produced is in the reverse complement of the contig sequence.  \n`size`: Size of the product amplicon (in base pairs).  \n\n## To Be Updated\n\n1. Need more unittest.\n2. Need an easy setup.py.\n\n## Contact\n\nShould you want to fill issues or contact me about anything regarding Pincer, \nyou can reach me here or on my email: andre.sutanto.91@gmail.com.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Andre-Tan/Pincer",
    "keywords": "",
    "license": "GPL-3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pincer",
    "platform": "",
    "project_url": "https://pypi.org/project/pincer/",
    "release_url": "https://pypi.org/project/pincer/1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "In Silico PCR for Python3",
    "version": "1.0"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b6880af4105131bfbad32b622685050c",
          "sha256": "87aff95f3ec77df2210b7980b5e39bb45a6a2e72fc9cf412d25c3fb744474e14"
        },
        "downloads": 0,
        "filename": "pincer-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b6880af4105131bfbad32b622685050c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3034,
        "upload_time": "2017-07-14T08:12:39",
        "url": "https://files.pythonhosted.org/packages/8f/68/ff78b6f74f94dcadd857f98b109d4f92801e54e8514df93b2d0f42a3e6f9/pincer-1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b6880af4105131bfbad32b622685050c",
        "sha256": "87aff95f3ec77df2210b7980b5e39bb45a6a2e72fc9cf412d25c3fb744474e14"
      },
      "downloads": 0,
      "filename": "pincer-1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "b6880af4105131bfbad32b622685050c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3034,
      "upload_time": "2017-07-14T08:12:39",
      "url": "https://files.pythonhosted.org/packages/8f/68/ff78b6f74f94dcadd857f98b109d4f92801e54e8514df93b2d0f42a3e6f9/pincer-1.0.tar.gz"
    }
  ]
}