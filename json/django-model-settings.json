{
  "info": {
    "author": "Interaction Consortium",
    "author_email": "studio@interaction.net.au",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Overview\n========\n\nProvides persistant settings that can be edited in the Django admin.\nSettings can be any data type via polymorphic models. You can add\nsupport for new or custom types of settings.\n\nIncludes template tags and a dict-like interface to access settings,\nwith an option to automatically create non-existent settings on first\naccess with a default value.\n\nHow to Use in Templates\n=======================\n\nLoad the tag library:\n\n::\n\n    {% load model_settings_tags %}\n\nGet a settings object that will fetch and cache all setting values on\nfirst access:\n\n::\n\n    {% get_settings as settings %}\n\n    {# Fetch and cache all the settings, then render `some_setting`. #}\n    {{ settings.some_setting }}\n\n    {# Only hits the database if `other_setting` isn't already in the cache. #}\n    {{ settings.other_setting }}\n\nSettings can be used to store snippets of content or configuration:\n\n::\n\n    {% if settings.some_boolean_configuration %}\n        ... {{ settings.some_text_content }} ...\n    {% endif %}\n\nGet a settings object that will automatically create non-existent\nsettings with an empty string as the default value:\n\n::\n\n    {% get_settings \"\" as settings %}\n\n    {# Create `new_setting`, if it doesn't already exist. #}\n    {{ settings.new_setting }}\n\nIf you only need to get one setting, or want to use a different default\nvalue for a particular setting:\n\n::\n\n    {% get_setting \"some_content\" %}\n\n    {# Get or create a boolean setting that is enabled by default. #}\n    {% get_setting \"some_feature\" True as some_feature %}\n    {% if some_feature %}...{% endif %}\n\nYou can also use the included\n``model_settings.context_processor.settings`` context processor to add\n``SETTINGS`` to all ``RequestContext`` objects. This will be a\n``SettingDict`` object that automatically creates non-existent settings\non first access with an empty string as the default value.\n\nHow to use in Views\n===================\n\nGet a dict-like object for all settings:\n\n::\n\n    from model_settings.models import Setting\n    settings = Setting.objects.as_dict()\n\nGet a settings object that only populates the cache for a subset of\nsettings:\n\n::\n\n    settings = Setting.objects.filter(name__startswith='foo').as_dict()\n\nGet a settings object that will automatically create non-existent\nsettings with an empty string as the default value:\n\n::\n\n    settings = Setting.object.as_dict(default='')\n\nCreating Settings\n=================\n\nYou can create settings of a particular type by using the\n``SettingValueModel`` subclasses:\n\n::\n\n    Boolean.objects.create(name='foo', value=True)\n    Integer.objects.create(name='bar', value=123)\n\nYou can automatically create a setting of the correct type by using the\n``Setting`` model directly:\n\n::\n\n    Setting.objects.create(name='foo', value=True)\n    Setting.objects.create(name='bar', value=123)\n\nEach ``SettingValueModel`` subclass has a ``value_type`` attribute and\nan ``is_compatible()`` method, which are used to determine whether or\nnot the subclass can store a particular value.\n\nCustom Setting Types\n====================\n\nSupport for common types of settings is built-in, e.g. boolean, date,\ndatetime, decimal, file, float, integer, text, and time. You can add\nsupport for custom types by subclassing ``Setting`` and\n``SettingValueModel``:\n\n::\n\n    class Foo(Setting, SettingValueModel):\n        value = FooField()\n        value_type = FooType\n\nIf you need more than a simple type check against ``value_type`` to\ndetermine whether or not a value is comatible, you can override the\n``is_compatible()`` method.\n\nThis method takes a value and should return ``True`` if the value is\ncompatible, or ``False`` if it is not. You can use this to create\nsub-types that are rendered differently or utilise a different widget on\nthe admin form. For example, single line and multi-line text:\n\n::\n\n    class SingleLineText(Setting, SettingValueModel):\n        value = models.CharField(max_length=255)\n\n        def is_compatible(self, value):\n            if isinstance(value, unicode) and '\\n' not in value:\n                return True\n            return False\n\n    class MultiLineText(Setting, SettingValueModel):\n        value = models.TextField()\n\n        def is_compatible(self, value):\n            if isintance(value, unicode) and '\\n' in value:\n                return True\n            return False\n\nThe ``value_type`` attribute and ``is_compatible()`` method are only by\n``Setting.objects.create()``, when it tries to determine which subclass\nto use.\n\nTo Do\n=====\n\n-  Customise label, help text, etc. for settings in the admin edit form.\n-  Add plugins for Rich Text and Raw code (HTML, CSS, JS) settings.\n-  Add tests.",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ixc/django-model-settings",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-model-settings",
    "platform": null,
    "project_url": "https://pypi.org/project/django-model-settings/",
    "release_url": "https://pypi.org/project/django-model-settings/0.3/",
    "requires_python": null,
    "summary": "Editable settings via polymorphic models with a dict-like interface and template tags.",
    "version": "0.3"
  },
  "releases": {
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b848029bad0ccc4f11f07428d2cd85f9",
          "sha256": "ca43eea13ba9dcfb55ad6e08696a8a48114b12e4a73d1a9735b9deb6df482cf2"
        },
        "downloads": 449,
        "filename": "django_model_settings-0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b848029bad0ccc4f11f07428d2cd85f9",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 16211,
        "upload_time": "2016-08-11T13:51:05",
        "url": "https://files.pythonhosted.org/packages/e8/c7/a4c87c6d80f571e7000ed1b094e6e423390b303722cb95e0fb594b6fd02b/django_model_settings-0.3-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b848029bad0ccc4f11f07428d2cd85f9",
        "sha256": "ca43eea13ba9dcfb55ad6e08696a8a48114b12e4a73d1a9735b9deb6df482cf2"
      },
      "downloads": 449,
      "filename": "django_model_settings-0.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b848029bad0ccc4f11f07428d2cd85f9",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "size": 16211,
      "upload_time": "2016-08-11T13:51:05",
      "url": "https://files.pythonhosted.org/packages/e8/c7/a4c87c6d80f571e7000ed1b094e6e423390b303722cb95e0fb594b6fd02b/django_model_settings-0.3-py2.py3-none-any.whl"
    }
  ]
}