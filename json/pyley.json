{
  "info": {
    "author": "ziyasal",
    "author_email": "sarikayaziya@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "![](https://github.com/ziyasal/pyley/raw/master/pyley.png?raw=true)\r\n\r\n\r\npyley [![Build Status](https://travis-ci.org/ziyasal/pyley.png?branch=master)](https://travis-ci.org/ziyasal/pyley)\r\n=====\r\n\r\n[Python](https://www.python.org/) client for an open-source graph database [**Cayley**](https://github.com/google/cayley)\r\n\r\n> Cayley is an open-source graph inspired by the graph database behind [Freebase](http://freebase.com/) and Google's [Knowledge Graph](http://www.google.com/insidesearch/features/search/knowledge.html). Its goal is to be a part of the developer's toolbox where [Linked Data](http://linkeddata.org/) and graph-shaped data (semantic webs, social networks, etc) in general are concerned.\r\n\r\n##Sample\r\n\r\n```python\r\n  #Create cayley client\r\n  client = CayleyClient() # this creates client with default parameters `http://localhost:64210/api/v1/query/gremlin`\r\n  #or  specify `url` and `version` parameters\r\n  client = CayleyClient(\"http://localhost:64210\",\"v1\")\r\n  \r\n  g = GraphObject()\r\n\r\n  #Query all vertices in the graph, limit to the first 5 vertices found.\r\n  g.Vertex().GetLimit(5)\r\n  \r\n  #Start with only one vertex, the literal name \"Humphrey Bogart\", and retrieve all of them.\r\n  query=g.Vertex(\"Humphrey Bogart\").All();\r\n  response = client.Send(query)\r\n  #response.result contains JSON data and response.r contains raw response\r\n  print response.result \r\n  \r\n  #`g` and `V` are synonyms for `graph` and `Vertex` respectively, as they are quite common.\r\n  query=g.V(\"Humphrey Bogart\").All()\r\n  response = client.Send(query)\r\n  \r\n  #\"Humphrey Bogart\" is a name, but not an entity. Let's find the entities with this name in our dataset.\r\n  #Follow links that are pointing In to our \"Humphrey Bogart\" node with the predicate \"name\".\r\n  query = g.V(\"Humphrey Bogart\").In(\"name\").All()\r\n  response = client.Send(query)\r\n  \r\n  #Notice that \"name\" is a generic predicate in our dataset. \r\n  #Starting with a movie gives a similar effect.\r\n  query = g.V(\"Casablanca\").In(\"name\").All()\r\n  response = client.Send(query)\r\n\r\n  #Relatedly, we can ask the reverse; all ids with the name \"Casablanca\"\r\n  query = g.V().Has(\"name\", \"Casablanca\").All()\r\n  response = client.Send(query)\r\n  \r\n  #Let's get the list of actors in the film\r\n  query = g.V().Has(\"name\", \"Casablanca\") \\\r\n                .Out(\"/film/film/starring\") \\\r\n                .Out(\"/film/performance/actor\") \\\r\n                .Out(\"name\") \\\r\n                .All()\r\n\r\n  response = client.Send(query)\r\n  \r\n  #But this is starting to get long. Let's use a morphism -- a pre-defined path stored in a variable -- as our linkage\r\n  film_to_actor = g.Morphism().Out(\"/film/film/starring\").Out(\"/film/performance/actor\")\r\n  query = g.V() \\\r\n           .Has(\"name\", \"Casablanca\") \\\r\n           .Follow(film_to_actor) \\\r\n           .Out(\"name\") \\\r\n           .All()\r\n  response = client.Send(query)\r\n\r\n  #Add data programatically to the JSON result list. Can be any JSON type.\r\n  query = g.Emit({'name': \"John Doe\", 'age': 41, 'isActor': true})\r\n  response = client.Send(query)\r\n```\r\n\r\n##Bugs\r\nIf you encounter a bug, performance issue, or malfunction, please add an [Issue](https://github.com/ziyasal/pyley/issues) with steps on how to reproduce the problem.\r\n\r\n##TODO\r\n- Improve Gremlin implementation (Basic steps implemented at the moment)\r\n- Add more tests\r\n- Add more documentation\r\n\r\n##Open Source  Projects in Use\r\n- [requests](https://github.com/kennethreitz/requests) by @kennethreitz\r\n\r\n##License\r\n\r\nCode and documentation are available according to the *MIT* License (see [LICENSE](https://github.com/ziyasal/pyley/blob/master/LICENSE)).\r\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ziyasal/pyley",
    "keywords": null,
    "license": "LICENSE",
    "maintainer": null,
    "maintainer_email": null,
    "name": "pyley",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/pyley/",
    "release_url": "https://pypi.org/project/pyley/0.1.2/",
    "requires_python": null,
    "summary": "Python client for an open-source graph database Cayley",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9a81f98379ed8aa50e364907a3395810",
          "sha256": "2795d6b3e4cba0ccab9c4bf2886d19e82106742aaf776cbda9f1cd8ac8b04b0c"
        },
        "downloads": 1688,
        "filename": "pyley-0.1.2.zip",
        "has_sig": false,
        "md5_digest": "9a81f98379ed8aa50e364907a3395810",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5284,
        "upload_time": "2015-03-02T18:38:18",
        "url": "https://files.pythonhosted.org/packages/d8/80/a0edfce43ffa7ac82a833a5030e16e59ffe7a571adfa24373d73b03ebab3/pyley-0.1.2.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9a81f98379ed8aa50e364907a3395810",
        "sha256": "2795d6b3e4cba0ccab9c4bf2886d19e82106742aaf776cbda9f1cd8ac8b04b0c"
      },
      "downloads": 1688,
      "filename": "pyley-0.1.2.zip",
      "has_sig": false,
      "md5_digest": "9a81f98379ed8aa50e364907a3395810",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5284,
      "upload_time": "2015-03-02T18:38:18",
      "url": "https://files.pythonhosted.org/packages/d8/80/a0edfce43ffa7ac82a833a5030e16e59ffe7a571adfa24373d73b03ebab3/pyley-0.1.2.zip"
    }
  ]
}