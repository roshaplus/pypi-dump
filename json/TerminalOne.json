{
  "info": {
    "author": "MediaMath",
    "author_email": "developers@mediamath.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "TerminalOne-Python\n==================\n\n.. image:: https://img.shields.io/pypi/v/TerminalOne.svg\n    :target: https://pypi.python.org/pypi/TerminalOne\n\n.. image:: https://travis-ci.org/MediaMath/t1-python.svg?branch=master\n    :target: https://travis-ci.org/MediaMath/t1-python\n\n.. image:: https://img.shields.io/pypi/dm/TerminalOne.svg\n    :target: https://pypi.python.org/pypi/TerminalOne\n\n.. image:: https://codeclimate.com/github/MediaMath/t1-python/badges/gpa.svg\n    :target: https://codeclimate.com/github/MediaMath/t1-python\n\n\nPython library for MediaMath's APIs. This library consists of\nclasses for working with T1 APIs and managing entities. It is written\nfor Python 2.7 and >=3.3. Compatibility with Python 3 is made possible\nby bundling the module `six <https://pypi.python.org/pypi/six>`__.\n\nAPI Documentation is availble at\n`https://developer.mediamath.com/docs/TerminalOne_API_Overview <https://developer.mediamath.com/docs/TerminalOne_API_Overview>`__.\n\nTable of Contents\n-----------------\n\n-  `Installation <#installation>`__\n-  `Usage <#usage>`__\n\n   -  `Service Object <#service-object>`__\n   -  `Fetching Entities and\n      Collections <#fetching-entities-and-collections>`__\n\n      -  `Collections <#collections>`__\n      -  `Searching for entities <#searching-for-entities>`__\n      -  `Entities <#entities>`__\n      -  `Child Entities <#child-entities>`__\n      -  `Reports <#reports>`__\n      -  `Appendix <#appendix>`__\n\n-  `Contact <#contact>`__\n-  `Copyright <#copyright>`__\n\nInstallation\n------------\n\nInstallation is simple with pip in a virtual environment:\n\n.. code:: bash\n\n    $ pip install TerminalOne\n\nAlternatively, download the latest tag of the\nrepository as a tarball or zip file and run:\n\n.. code:: bash\n\n    $ python setup.py install\n\nUsage\n-----\n\nService Object\n~~~~~~~~~~~~~~\n\n*class* ``terminalone.T1``\\ (*username*\\ =\\ ``None``,\n*password*\\ =\\ ``None``, *api\\_key*\\ =\\ ``None``,\n*client_secret*\\ =\\ ``None``,\n*auth\\_method*\\ =\\ ``None``, *session\\_id*\\ =\\ ``None``,\n*environment*\\ =\\ ``\"production\"``, *api\\_base*\\ =\\ ``None``,\n*token*\\ =\\ ``None``, *token_updater*\\ =\\ ``None``)\n\nThe starting point for this package. Authentication and session, entity\nretrieval, creation, etc. are handled here. Parameters:\n\n-  *username*: Username of a valid T1 user (that is, valid at\n   `https://t1.mediamath.com <https://t1.mediamath.com>`__).\n-  *password*: Password for corresponding T1 user\n-  *api\\_key*: Approved API key generated at `MediaMath's Developer\n   Portal <https://developer.mediamath.com>`__.\n-  *client_secret*: Client Secret for use with OAuth2 authentication\n-  *session\\_id*: For applications receiving a session ID instead of\n   user credentials, such as an app in T1's Apps tab. *api\\_key* should\n   still be provided.\n-  *auth\\_method*: string enum corresponding to which method of\n   authentication the session to use. Currently \"cookie\" and \"oauth2\" are\n   supported. The auth method will usually be detected, so this can be ommitted.\n   (Omission new in v1.2.0!)\n-  *token*: dict OAuth2 token as generated by the session.\n   If you have a web app, you can store the token in the browser\n   session, and then use that to generate a new T1 session.\n   See the documentation for examples.\n-  *token_updater*: function with one argument, token, to be used to\n   update your token databse on automatic token refresh. If not\n   provided, a TokenUpdated warning will be raised when a token\n   has been refreshed. This warning will carry the token\n   in its token argument.\n-  Either *environment* or *api\\_base* can be provided to specify where\n   the request goes.\n\n.. code:: python\n\n    >>> import terminalone\n    >>> t1 = terminalone.T1(\"myusername\", \"mypassword\", \"my_api_key\")\n\nIf you're a long-time user of t1-python, you'll notice this doesn't include\nthe ``auth_method`` keyword. As of v1.2.0, ``auth_method`` is no longer\nnecessary: it will be automatically detected.\n\nOAuth2 authentication is now supported. Send a client secret, redirect URI,\nand token updater in lieu of user credentials:\n\n.. code:: python\n\n    >>> t1 = terminalone.T1(api_key=\"my_api_key\", client_secret=\"secret\", redirect_uri=\"https://myapp.mediamath.com/authorize\", token_updater=update_token)\n    >>> auth_url, state = t1.authorization_url()\n    # Send user to URL and authenticate.\n    >>> token = t1.fetch_token(authorization_response_url=request.url, state=state)\n\nOnce you have this token, you can store it in the user's state. When the user\nmakes another request, you can instantiate T1 with this token:\n\n.. code:: python\n\n    >>> t1 = terminalone.T1(token=session['oauth2_token'], token_updater=update_token)\n\nIf you have a specific API base (for instance, if you are testing\nagainst a sandbox deployment) (*Note*: sandbox environments are not yet\nuseable), you can use the ``api_base`` keyword with the *domain*. For production\nendpoints, neither ``environment`` nor ``api_base`` should be provided:\n\n.. code:: python\n\n    >>> t1 = terminalone.T1(\"myusername\", \"mypassword\", \"my_api_key\", api_base=\"myqaserver.domain.com\", auth_method=\"cookie\")\n\nIf you are receiving a (cloned) session ID, for instance the norm for\napps, you will not have user credentials to log in with. Instead,\nprovide the session ID and API key:\n\n.. code:: python\n\n    >>> t1 = terminalone.T1(session_id=\"13ea5a26e77b64e7361c7ef84910c18a8d952cf0\", api_key=\"my_api_key\")\n\nFetching Entities and Collections\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nEntity and collection retrieval. Parameters:\n\n``T1.get``\\ (*collection*, *entity*\\ =\\ ``None``, *child*\\ =\\ ``None``,\n*limit*\\ =\\ ``None``, *include*\\ =\\ ``None``, *full*\\ =\\ ``None``,\n*page\\_limit*\\ =\\ ``100``, *page\\_offset*\\ =\\ ``0``,\n*sort\\_by*\\ =\\ ``\"id\"``, *get\\_all*\\ =\\ ``False``, *parent*\\ \\ ``None``,\n*query*\\ =\\ ``None``, *count*\\ =\\ ``False``)\n\n-  *collection*: T1 collection, e.g. ``\"advertisers\"``\n-  *entity*: Integer ID of entity being retrieved from T1\n-  *child*: Child object of a particular entity, e.g. ``\"dma\"``,\n   ``\"acl\"``\n-  *limit*: dict to query for relation entity, e.g.\n   ``{\"advertiser\": 123456}``\n-  *include*: str/list of relations:\n\n   -  string, e.g.\n\n      -  ``T1.get('advertiser', include='agency')``\n\n   -  list of *lateral* (non-hierarchical) relations, e.g.\n\n      -  ``T1.get('advertiser', include=['agency', 'ad_server'])``\n\n   -  list of list/strings of *hierarchical* relations, e.g.\n\n      -  ``T1.get('advertiser', include=[['agency', 'organization'],]``\n      -  ``T1.get('advertiser', include=[['agency', 'organization'], 'ad_server']``\n\n-  *full*: When retrieving multiple entities, specifies which types to\n   return the full record for. e.g.\n\n   -  ``\"campaign\"`` (full record for campaign entities returned)\n   -  ``True`` (full record of all entities returned),\n   -  ``[\"campaign\", \"advertiser\"]`` (full record for campaigns and\n      advertisers returned)\n\n-  *page\\_limit* and *page\\_offset* handle pagination. *page\\_limit*\n   specifies how many entities to return at a time, default and max of\n   100. *page\\_offset* specifies which entity to start at for that page.\n-  *sort\\_by*: sort order. Default ``\"id\"``. e.g. ``\"-id\"``, ``\"name\"``\n-  *get\\_all*: Whether to retrieve all results for a query or just a\n   single page. Mutually exclusive with *page\\_limit*/*page\\_offset*\n-  *parent*: Only return entities with this ``parent_id``. Used for\n   ``audience_segments``.\n-  *query*: Search parameters. *Note*: it's much simpler to use ``find``\n   instead of ``get``, allowing ``find`` to construct the query.\n-  *count*: bool return the number of entities as a second parameter\n-  *other_params*: dict of additional, service-specific parameters to be passed.\n\n| Raises: ``terminalone.errors.ClientError`` if *page\\_limit* > 100,\n  ``terminalone.errors.APIError`` on >399 HTTP status code.\n| Returns: If single entity is specified, returns a single entity\n  object. If multiple entities, generator yielding each entity.\n\nCollections\n^^^^^^^^^^^\n\n.. code:: python\n\n    >>> advertisers = t1.get(\"advertisers\")\n    >>> for advertiser in advertisers:\n    ...     print(advertiser)\n    ...\n    Advertiser(id=1, name=\"My Brand Advertiser\", _type=\"advertiser\")\n    ...\n\nReturns generator over the first 100 advertisers (or fewer if the user\nonly has access to fewer), ordered ascending by ID. Each entity is the\nlimited object, containing just ``id``, ``name``, and ``_type``\n(``_type`` just signifies the type returned by the API, in this case,\n\"advertiser\").\n\n.. code:: python\n\n    >>> ag_advertisers = t1.get(\"advertisers\",\n    ...                         limit={\"agency\": 123456},\n    ...                         include=\"agency\",\n    ...                         full=\"advertiser\")\n    >>> for advertiser in ag_advertisers:\n    ...     print(advertiser)\n    ...\n    Advertiser(id=1, name=\"My Brand Advertiser\", agency=Agency(id=123456, name=\"Operating Agency\", _type=\"agency\"), agency_id=123456, status=True, ...)\n    ...\n\nGenerator over up to 100 advertisers within agency ID 123456. Each\nadvertiser includes its parent agency object as an attribute. The\nadvertiser objects are the full entities, so all fields are returned.\nAgency objects are limited and have the same fields as advertisers in\nthe previous example.\n\n.. code:: python\n\n    >>> campaigns, count = t1.get(\"campaigns\",\n    ...                           get_all=True,\n    ...                           full=True,\n    ...                           sort_by=\"-updated_on\")\n    >>> print(count)\n    539\n    >>> for campaign in campaigns:\n    ...     print(campaign)\n    Campaign(id=123, name=\"Summer Acquisition\", updated_on=datetime.datetime(2015, 4, 4, 0, 15, 0, 0), ...)\n    Campaign(id=456, name=\"Spring Acquisition\", updated_on=datetime.datetime(2015, 4, 4, 0, 10, 0, 0), ...)\n    ...\n\nGenerator over every campaign accessible by the user, sorted in\ndescending order of last update. Second argument is integer number of\ncampaigns retrieved, as returned by the API. ``get_all=True`` removes\nthe need to worry about pagination \u2014\u00a0it is handled by the SDK\ninternally.\n\n.. code:: python\n\n    >>> _, count = t1.get(\"advertisers\",\n    ...                   page_limit=1,\n    ...                   count=True)\n    >>> print(count)\n    23\n\nSole purpose is to get the count of advertisers accessible by the user.\nUse ``page_limit=1`` to minimize unnecessary resources, and assign to\n``_`` to throw away the single entity retrieved.\n\nSearching for entities\n^^^^^^^^^^^^^^^^^^^^^^\n\nLimiting entities by relation ID is one way to limit entities, but we\ncan also search with more intricate queries using ``find``:\n\n``T1.find``\\ (*collection*, *variable*, *operator*, *candidates*,\n\\*\\*\\ *kwargs*)\n\n-  *collection*: T1 collection, same use as with ``get``\n-  *variable*: Field to query for, e.g. ``name``\n-  *operator*: Arithmetic operator, e.g. ``\"<\"``\n-  *candidates*: Query value, e.g. ``\"jonsmith*\"``\n-  *kwargs*: Additional keyword arguments to pass onto ``get``. All\n   keyword arguments applicable for ``get`` are applicable here as well.\n\n*module* ``terminalone.filters``\n\n-  ``IN``\n-  ``NULL``\n-  ``NOT_NULL``\n-  ``EQUALS``\n-  ``NOT_EQUALS``\n-  ``GREATER``\n-  ``GREATER_OR_EQUAL``\n-  ``LESS``\n-  ``LESS_OR_EQUAL``\n-  ``CASE_INS_STRING``\n\n.. code:: python\n\n    >>> greens = t1.find(\"atomic_creatives\",\n    ...                  \"name\",\n    ...                  terminalone.filters.CASE_INS_STRING,\n    ...                  \"*Green*\",\n    ...                  include=\"concept\",\n    ...                  get_all=True)\n\nGenerator over all creatives with \"Green\" in the name. Include concept.\n\n.. code:: python\n\n    >>> my_campaigns = t1.find(\"campaigns\",\n    ...                       \"id\",\n    ...                       terminalone.filers.IN,\n    ...                       [123, 234, 345],\n    ...                       full=True)\n\nGenerator over campaign IDs 123, 234, and 345. Note that when using\n``terminalone.filers.IN``, *variable* is automatically ID, so that\nargument is effectively ignored. Further, *candidates* must be a list of\ninteger IDs.\n\n.. code:: python\n\n    >>> pixels = t1.find(\"pixel_bundles\",\n    ...                  \"keywords\",\n    ...                  terminalone.filters.NOT_NULL,\n    ...                  None)\n\nGenerator over first 100 pixels with non-null keywords field.\n\n.. code:: python\n\n    >>> strats = t1.find(\"strategies\",\n    ...                  \"status\",\n    ...                  terminalone.filters.EQUALS,\n    ...                  True,\n    ...                  limit={\"campaign\": 123456})\n\nActive strategies within campaign ID 123456.\n\nEntities\n^^^^^^^^\n\nA specific entity can be retrieved by using ``get`` with an entity ID as\nthe second argument, or using the ``entity`` keyword. You can then\naccess that entity's properties using instance attributes:\n\n.. code:: python\n\n    >>> my_advertiser = t1.get(\"advertisers\", 111111)\n    >>> my_advertiser.id\n    111111\n\n*class* ``terminalone.Entity``\n\n-  ``set(properties)``\n   Set all data in mapping object ``properties`` to the entity.\n-  ``save(data=None)``\n   Save the entity. If ``data`` is provided, send that. Typically used\n   with no arguments.\n(*Note: you will typically interact with subclasses, not ``Entity``\nitself*)\n\nIf for some reason you need to access the object like a dictionary (for\ninstance, if you need to iterate over fields or dump to a CSV), the method\n``get_properties()`` is available. However, you shouldn't modify\n``_properties`` directly, as it will cause incorrect behaviour.\n\nOnce you have your instance, you can modify its values, and then save it\nback. A return value of ``None`` indicates success. Otherwise, an error\nis raised.\n\n.. code:: python\n\n    >>> my_advertiser.name = \"Updated name\"\n    >>> my_advertiser.save()\n    >>>\n\nCreate new entities by calling ``T1.new`` on your instance.\n\n``T1.new``\\ (*collection*, *report=None*, *properties=None*)\n\n-  *collection*: T1 collection, same as above\n-  *report*: New report object; discussed in `Reports <#reports>`__\n-  *properties*: Properties to pass into new object.\n\n.. code:: python\n\n    >>> new_properties = {\n    ...     \"name\": \"Spring Green\",\n    ...     \"status\": True,\n    ... }\n    >>> new_concept = t1.new(\"concept\", properties=new_properties)\n    >>> new_concept.advertiser_id = 123456\n    >>> new_concept.save()\n    >>>\n\n``properties`` is an optional mapping object with properties to get\npassed in. You can use a string representation of the object (such as\n``\"concept\"`` above); or, you can use the object itself from\n``terminalone.models``:\n\n.. code:: python\n\n    >>> new_concept = t1.new(terminalone.models.Concept, properties=new_properties)\n    >>> \n\nChild Entities\n^^^^^^^^^^^^^^\n\nTo retrieve child entities (for instance, ``/users/:id/permissions``), include\nthe ``child`` argument in a call to ``T1.get``:\n\n.. code:: python\n\n    >>> permissions = t1.get(\"users\", 1, child=\"permissions\")\n\n\nReports\n~~~~~~~\n\nTo use MediaMath's `Reports\nAPI <https://developer.mediamath.com/docs/read/reports_api>`__,\ninstantiate an instance with ``T1.new``:\n\n.. code:: python\n\n    >>> rpts = t1.new(\"report\")\n\n*class* ``terminalone.Report``\n\n-  ``metadata``\n   Metadata of reports available or of individual report. Calculated on\n   first call (API request made); cached for future calls.\n-  ``parameters``\n   Dictionary of request parameters\n-  ``set(data)``\n   Set request parameters with a mapping object ``data``\n-  ``report_uri(report)``\n   Get URI stub for report\n-  ``get(as_dict=False)``\n   Get report data (requires calling ``T1.new`` with a report name).\n   Returns headers and ``csv.reader``. If ``as_dict`` is True, returns\n   data as ``csv.DictReader``\n\nThis is a metadata object, and can be used to retrieve information about\nwhich reports are available.\n\n.. code:: python\n\n    >>> pprint.pprint(rpts.metadata)\n    {'reports': {...\n                 'geo': {'Description': 'Standard Geo Report',\n                         'Name': 'Geo Report',\n                         'URI_Data': 'https://api.mediamath.com/reporting/v1/std/geo',\n                         'URI_Meta': 'https://api.mediamath.com/reporting/v1/std/geo/meta'},\n    ...}\n    >>> pprint.pprint(rpts.metadata, depth=2)\n    {'reports': {'audience_index': {...},\n                 'audience_index_pixel': {...},\n                 'day_part': {...},\n                 'device_technology': {...},\n                 'geo': {...},\n                 'performance': {...},\n                 'pulse': {...},\n                 'reach_frequency': {...},\n                 'site_transparency': {...},\n                 'technology': {...},\n                 'video': {...},\n                 'watermark': {...}}}\n\nYou can retrieve the URI stub of any report by calling\n``Report.report_uri``:\n\n.. code:: python\n\n    >>> print(rpts.get_uri(\"geo\"))\n    'geo'\n\nWhich is just a short-cut to getting the final part of the path of\n``Report.metadata[report]['URI_Data']``. Getting the URI from the\nspecification is preferred to assuming that the name is the same as the\nstub. This is more directly applicable by instantiating the object for\nit:\n\n.. code:: python\n\n    >>> report = t1.new(\"report\", rpts.report_uri(\"performance\"))\n\nYou can access metadata about this report from the ``Report.metadata``\nproperty as well. To get data, first set properties about the query with\n``Report.set``, and use the ``Report.get`` method, which returns a tuple\n``(headers, data)``.:\n\n.. code:: python\n\n    >>> report.set({\n    ...     'dimensions': ['campaign_id', 'strategy_name'],\n    ...     'filter': {'campaign_id': 126173},\n    ...     'metrics': ['impressions', 'total_spend'],\n    ...     'time_rollup': 'by_day',\n    ...     'start_date': '2013-01-01',\n    ...     'end_date': '2013-12-31',\n    ...     'order': ['date'],\n    ... })\n    >>> headers, data = report.get()\n    >>> print(headers)\n    ['start_date', 'end_date', 'campaign_id', 'strategy_name', 'impressions']\n    >>> for line in data:\n    ...     # do work on line\n    ...     print(line)\n    ...\n    ['2013-06-27', '2013-06-27', '126173', 'PS', '231']\n    ...\n\n``headers`` is a list of headers, while ``data`` is a ``csv.reader``\nobject. Type casting is not present in the current version, but is\ntentatively planned for a future date.\n\nMore information about these parameters can be found\n`here <https://developer.mediamath.com/docs/read/reports_api/Data_Retrieval>`__.\n\nAppendix\n^^^^^^^^\n\nWhy don't we import the object classes directly? For instance, why\ndoesn't this work?\n\n.. code:: python\n\n    >>> from terminalone import Campaign\n\nThe answer here is that we need to keep a common session so that we can\nshare session information across requests. This allows you to work with\nmany objects, only passing in authentication information once.\n\n.. code:: python\n\n    >>> t1 = T1(\"myusername\", \"mypassword\", \"my_api_key\")\n    >>> t1.authenticate(\"cookie\")\n    >>> c = t1.new(\"campaign\")\n    >>> c.session is t1.session\n    True\n\nContact\n-------\n\nFor questions about either API workflow or this library, email\n`developers@mediamath.com <mailto:developers@mediamath.com>`__.\n\nCopyright\n---------\n\nCopyright MediaMath 2015-2017. All rights reserved.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://www.mediamath.com",
    "keywords": "",
    "license": "Apache License Version 2.0, January 2004 http://www.apache.org/licenses/",
    "maintainer": "",
    "maintainer_email": "",
    "name": "TerminalOne",
    "platform": null,
    "project_url": "https://pypi.org/project/TerminalOne/",
    "release_url": "https://pypi.org/project/TerminalOne/1.8.0/",
    "requires_python": "",
    "summary": "A package for interacting with MediaMath's TerminalOne API.",
    "version": "1.8.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1f456d218f8752a0faaff83e28628e45",
          "sha256": "05997a4c8f1af025c77442a0224d53e7a1bffcade44e07af7d23390b78c76152"
        },
        "downloads": 1264,
        "filename": "TerminalOne-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1f456d218f8752a0faaff83e28628e45",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 46095,
        "upload_time": "2015-07-09T19:02:42",
        "url": "https://files.pythonhosted.org/packages/d5/e0/113ece29d7c1755d39d7ed000eb39355963bc2792723b6f1cfff681ddc36/TerminalOne-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "39985e1ed40402e2d6f55288e39fc54a",
          "sha256": "9e823aceefcb9fbe7cc67aa1bba25a0b7fd6a4ef6c1cbf86d6f3c29f10bd9d41"
        },
        "downloads": 900,
        "filename": "TerminalOne-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "39985e1ed40402e2d6f55288e39fc54a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 47051,
        "upload_time": "2015-07-16T13:55:54",
        "url": "https://files.pythonhosted.org/packages/b5/6c/05c45fc21306470c6da80da76457dc234633845e605c209e398da2b3a75f/TerminalOne-1.0.2.tar.gz"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d53df0d5b9cb97e00a4c5b1be8ca7c0f",
          "sha256": "214f19bd3fc81c39c4d069714690c49d1301fe8379b6ec5f4dd6b85485ba6b43"
        },
        "downloads": 931,
        "filename": "TerminalOne-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "d53df0d5b9cb97e00a4c5b1be8ca7c0f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 47239,
        "upload_time": "2015-07-28T20:56:10",
        "url": "https://files.pythonhosted.org/packages/3a/62/f05a1c95df70ab5b5cf3cc808ba4fa958fee45ab6718b1295297d857d3f2/TerminalOne-1.0.3.tar.gz"
      }
    ],
    "1.0.3a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2ff082d5a123dd0830a1a0881ecf6587",
          "sha256": "b55274a5d799ef923b426ccdd5e7c0ed2fdd9f22816a5a9d957697e0d9e909d8"
        },
        "downloads": 1324,
        "filename": "TerminalOne-1.0.3a1.tar.gz",
        "has_sig": false,
        "md5_digest": "2ff082d5a123dd0830a1a0881ecf6587",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 47245,
        "upload_time": "2015-07-28T20:46:40",
        "url": "https://files.pythonhosted.org/packages/fb/87/8854503e9895a8284ef67a2d9ca35e5d2ec4edb81033bf0c35fcc0e3ed59/TerminalOne-1.0.3a1.tar.gz"
      }
    ],
    "1.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9c2f3b45d87195d8620c39db34099f70",
          "sha256": "a7e80caf75e4fe9a76358d6305c2fda5c7114c8816bb342736d98f72949c512c"
        },
        "downloads": 953,
        "filename": "TerminalOne-1.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "9c2f3b45d87195d8620c39db34099f70",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48921,
        "upload_time": "2015-08-28T18:13:20",
        "url": "https://files.pythonhosted.org/packages/5c/fd/d9af650a6203d3a76921d9b20ed6728c445ed8bbddaf997938c461735dcd/TerminalOne-1.0.4.tar.gz"
      }
    ],
    "1.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2274aa83f0779bc2c3fd46ddecabc330",
          "sha256": "5c8868cc59519a70c48e0d111611779bfaab54871364fbb74734d84041ed13d7"
        },
        "downloads": 695,
        "filename": "TerminalOne-1.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2274aa83f0779bc2c3fd46ddecabc330",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 49597,
        "upload_time": "2015-10-06T23:16:45",
        "url": "https://files.pythonhosted.org/packages/3e/7d/5d5a479827bec632cabb4df4457d35581725dd6c843019d982317880cbfa/TerminalOne-1.0.5.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b6e00946110b692be41838c3047969fa",
          "sha256": "94a47aecbb5322ef36882f5c4db5e06203764828ca210ca73b7ec4e4f84ff6cd"
        },
        "downloads": 620,
        "filename": "TerminalOne-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b6e00946110b692be41838c3047969fa",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 52032,
        "upload_time": "2015-11-06T22:48:16",
        "url": "https://files.pythonhosted.org/packages/b8/1f/5a10a10d508324621c0751bb937cf59ac58110db7605f4e6410410fcc110/TerminalOne-1.1.0.tar.gz"
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4d0247b27de02de4a54bf32b258ab915",
          "sha256": "4f210397a0a7eef27692f7887b84a0078e8e18802fb8dd424abac3967293ab64"
        },
        "downloads": 928,
        "filename": "TerminalOne-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4d0247b27de02de4a54bf32b258ab915",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 52062,
        "upload_time": "2015-12-02T16:52:45",
        "url": "https://files.pythonhosted.org/packages/bd/a7/5737a10129b86443744af3de3b9255c49c938dd114373f228446253c8ad4/TerminalOne-1.1.1.tar.gz"
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0f54b4c8c2f45157004c4309110f144c",
          "sha256": "ddd7999af013ae09d33323b6ef20effc7ec1145984a411be6b98df67fb62f2b9"
        },
        "downloads": 332,
        "filename": "TerminalOne-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "0f54b4c8c2f45157004c4309110f144c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 52678,
        "upload_time": "2016-01-25T20:55:33",
        "url": "https://files.pythonhosted.org/packages/da/31/13bfbae61031ab46a155021211231710e4c7808861ed605c299601f8df75/TerminalOne-1.1.2.tar.gz"
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "69212e9e2a90b8faff4d726cd388876c",
          "sha256": "115e693d522fb35efe23a98237f8df11508efd6602dd8a5fdd610c7d213a26ee"
        },
        "downloads": 155,
        "filename": "TerminalOne-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "69212e9e2a90b8faff4d726cd388876c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 52708,
        "upload_time": "2016-02-03T17:27:12",
        "url": "https://files.pythonhosted.org/packages/48/f0/ba7a10683f4607d3be16c534c7c4abcb548004526820d54ac9c945499aa1/TerminalOne-1.1.3.tar.gz"
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "47e9e239383fe6d2d0e1583e1d50e383",
          "sha256": "c4e39a296cbb2f090f84e1953eaa72b8ba4b87648024fbe65b7104e29fb26b04"
        },
        "downloads": 155,
        "filename": "TerminalOne-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "47e9e239383fe6d2d0e1583e1d50e383",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 53425,
        "upload_time": "2016-02-05T17:59:50",
        "url": "https://files.pythonhosted.org/packages/39/38/a3b2ac4296a5c1813a2f93dfbb35515ae4e032ccb82779a5e03ccfd83cad/TerminalOne-1.1.4.tar.gz"
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7c1698bcace40219144ee8ca2a8b377b",
          "sha256": "67bc81b3eb0e73b6c1b2d547bc9d8d929708b49d89e4c9db78eafb8b3506db27"
        },
        "downloads": 161,
        "filename": "TerminalOne-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "7c1698bcace40219144ee8ca2a8b377b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 53687,
        "upload_time": "2016-03-18T16:35:27",
        "url": "https://files.pythonhosted.org/packages/af/5a/09497a4029f7cc75f35dcb9fdc3d6aab3e81d84156d1cdf702eed3c357a9/TerminalOne-1.1.5.tar.gz"
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "146a6b0237709aafdbbe6f8f57453d2d",
          "sha256": "485c2268f413ff602c394b06f4773c64dedf054812fae13d0807cf0c26af6cf6"
        },
        "downloads": 239,
        "filename": "TerminalOne-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "146a6b0237709aafdbbe6f8f57453d2d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 54973,
        "upload_time": "2016-04-18T20:33:29",
        "url": "https://files.pythonhosted.org/packages/1c/e4/2ab1679b4432175af9d544b999b3e87f6cd2ef51627d9d93761d626c3e84/TerminalOne-1.1.6.tar.gz"
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b3d755db3f8178901456839fe63f6703",
          "sha256": "d5999e313c3c459a7974104085c78f604bb77c8abede9c3e7ab72d2bd356be7c"
        },
        "downloads": 162,
        "filename": "TerminalOne-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b3d755db3f8178901456839fe63f6703",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 57776,
        "upload_time": "2016-05-06T19:37:13",
        "url": "https://files.pythonhosted.org/packages/db/d6/8e3e6bafb336822a006311681e5198653608a449b953af9f70a7127e1b89/TerminalOne-1.2.0.tar.gz"
      }
    ],
    "1.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8d8fd36268ca1f0f446345fd2f2ac1a8",
          "sha256": "f3ebeae485804fa5e0208cac0e16416d5c13d498716c34dd8d3cd91301e87921"
        },
        "downloads": 162,
        "filename": "TerminalOne-1.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8d8fd36268ca1f0f446345fd2f2ac1a8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 57808,
        "upload_time": "2016-05-12T15:03:21",
        "url": "https://files.pythonhosted.org/packages/dc/cf/f34524a9d94d2729d4825799a7ad87595308c51dafc313a51a5803f4a100/TerminalOne-1.2.1.tar.gz"
      }
    ],
    "1.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "139452570eeb1921f61505a9fda26418",
          "sha256": "e90dadb93efdf53e51d7b8c77e84342ad360e063ce0adcb3c7a1cd12b1c1e5b9"
        },
        "downloads": 202,
        "filename": "TerminalOne-1.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "139452570eeb1921f61505a9fda26418",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 57824,
        "upload_time": "2016-06-10T15:39:57",
        "url": "https://files.pythonhosted.org/packages/02/45/4459b840a34f6f8d60adc3819dd8638654fc570a3d5b0e81bf4f65a37c76/TerminalOne-1.2.2.tar.gz"
      }
    ],
    "1.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3c2a20e49028e3c6e0ee47c53990062b",
          "sha256": "5a7437ead83342349bc4f41777709d16c4dcd85518c2eb8f1003a7e5de4780bf"
        },
        "downloads": 138,
        "filename": "TerminalOne-1.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "3c2a20e49028e3c6e0ee47c53990062b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 57762,
        "upload_time": "2016-08-15T21:00:01",
        "url": "https://files.pythonhosted.org/packages/11/77/d17f989bbc1fc8774603144885a49094b1c92e50506b0894c0c1af460376/TerminalOne-1.3.0.tar.gz"
      }
    ],
    "1.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8059d3861d8857c1582c075e5ef0daa6",
          "sha256": "b1e8d0022445e9cfcf7108e63cc3e93a1c0b44fc2b59f27e2c239aefc4760e7a"
        },
        "downloads": 178,
        "filename": "TerminalOne-1.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "8059d3861d8857c1582c075e5ef0daa6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 57770,
        "upload_time": "2016-08-16T18:23:57",
        "url": "https://files.pythonhosted.org/packages/c9/f2/163a35d3475bd3c2ee2df955556b620ecf631651752e1fcf53302a8b5064/TerminalOne-1.3.1.tar.gz"
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2a141d247fb62a910bebff7b72202ae3",
          "sha256": "16b309d37dd069929f4ea7de0f13a931e2e09e0c9ea2647de3c9751647715451"
        },
        "downloads": 424,
        "filename": "TerminalOne-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2a141d247fb62a910bebff7b72202ae3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 59656,
        "upload_time": "2016-10-04T09:45:03",
        "url": "https://files.pythonhosted.org/packages/b8/17/ea273ecd1455955ab8281d5ccf3253bd879555201dae404296ebf4e125fc/TerminalOne-1.4.0.tar.gz"
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "073eb888c0d73031251e365293701a6d",
          "sha256": "c91a94e7e9705bb3e904a313fa38845fcb6733e8209ef7fc937d55b727fab97c"
        },
        "downloads": 101,
        "filename": "TerminalOne-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "073eb888c0d73031251e365293701a6d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 59748,
        "upload_time": "2016-10-07T14:07:39",
        "url": "https://files.pythonhosted.org/packages/2c/87/524ed3f3d00bbaa2b6b646099121382ed8823eacccb37005e76260fd576b/TerminalOne-1.4.1.tar.gz"
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "43c2946f3584f59f4691228704ab10b1",
          "sha256": "26711ff9a07972b3464bf0fdb9aa8dc1f46e7feb2a83f5c87d603a96f6bfe3d4"
        },
        "downloads": 1486,
        "filename": "TerminalOne-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "43c2946f3584f59f4691228704ab10b1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 59659,
        "upload_time": "2016-10-19T10:19:59",
        "url": "https://files.pythonhosted.org/packages/e3/b6/9429795b8b449f9ea1e02cdad55044d8368fb003acc9049f8839444dc30e/TerminalOne-1.4.2.tar.gz"
      }
    ],
    "1.4.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3c7b58995c3d1eafbbfce2156c2173d4",
          "sha256": "c4cf8c7472bd566c7d5057ada6a0870b15e1f12b32dde7173188bb87e68a0b4a"
        },
        "downloads": 262,
        "filename": "TerminalOne-1.4.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3c7b58995c3d1eafbbfce2156c2173d4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 59871,
        "upload_time": "2016-10-25T16:45:50",
        "url": "https://files.pythonhosted.org/packages/53/b7/b8b2b07f9b8ffbccf2ec679c01ca1865ee51fb248f9060d14a13c6f59fa3/TerminalOne-1.4.3.tar.gz"
      }
    ],
    "1.4.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1d41bdc14fa9b936e680f7e0cd28bcd3",
          "sha256": "333820f2672917755dbbfac51fcd52e2bb11c26813aa7b7d98ea1ee56048d055"
        },
        "downloads": 68,
        "filename": "TerminalOne-1.4.4.tar.gz",
        "has_sig": false,
        "md5_digest": "1d41bdc14fa9b936e680f7e0cd28bcd3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 59823,
        "upload_time": "2016-11-08T16:30:30",
        "url": "https://files.pythonhosted.org/packages/d9/ae/40e3e2b3f4c0f94725195c4fe736adc92b1370dcd643a0521a3046ad1155/TerminalOne-1.4.4.tar.gz"
      }
    ],
    "1.4.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5b99b2cecbfd0071a2f4ebbf57f9ae7a",
          "sha256": "269a089a88a4f67b6d26b72fffdf64e4a42ac3d2dc8b2071d86facb1d8d8ee80"
        },
        "downloads": 71,
        "filename": "TerminalOne-1.4.5_1.tar.gz",
        "has_sig": false,
        "md5_digest": "5b99b2cecbfd0071a2f4ebbf57f9ae7a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 59816,
        "upload_time": "2016-11-09T16:57:57",
        "url": "https://files.pythonhosted.org/packages/e9/ad/000f4bf1b268f6b05a17387530d0ff1716be322cbaf78ba25b92ee31a406/TerminalOne-1.4.5_1.tar.gz"
      }
    ],
    "1.4.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cbf03f725ca4c585e7a327d833f9dbe4",
          "sha256": "1512e45b7cc71c5d13008f8b389eee09758fb93eacc9f11fc54b6f5285b90e12"
        },
        "downloads": 76,
        "filename": "TerminalOne-1.4.6.tar.gz",
        "has_sig": false,
        "md5_digest": "cbf03f725ca4c585e7a327d833f9dbe4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 59819,
        "upload_time": "2016-11-09T17:26:22",
        "url": "https://files.pythonhosted.org/packages/7a/6f/ad89058045b761ae2cdacff4b724db5bd8bfd167085fb28d5b3e5ef4f00b/TerminalOne-1.4.6.tar.gz"
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5da880dbb5ff8e13730a164981e830a5",
          "sha256": "dd78c53e850563770f21e6b61cf50084989f7a5fc224028b5118d7a56bbe0590"
        },
        "downloads": 56,
        "filename": "TerminalOne-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5da880dbb5ff8e13730a164981e830a5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66232,
        "upload_time": "2016-12-02T11:03:51",
        "url": "https://files.pythonhosted.org/packages/a0/91/2b24ca0c10cda078de0d49bbdf0dec071923de7e6c82761aa6a210f37043/TerminalOne-1.5.0.tar.gz"
      }
    ],
    "1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "20f22b00184f3f0477aaa663e0ae6640",
          "sha256": "5c57d71d1b9adcbf016dd692a52df29ff479ed42392bc632280ce84051ec1aad"
        },
        "downloads": 84,
        "filename": "TerminalOne-1.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "20f22b00184f3f0477aaa663e0ae6640",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66225,
        "upload_time": "2016-12-19T11:31:07",
        "url": "https://files.pythonhosted.org/packages/ad/98/66fac5d3502d0a9b6ae40573e2d7672d3fad1e379c82f670b637e0ccccb0/TerminalOne-1.5.1.tar.gz"
      }
    ],
    "1.6.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4ec90a01aabd3683fbe74f50fb836db3",
          "sha256": "af892a00fb65fc6c96a2c74de5f273e094d7d9ca53ff49c76c6f9d7d2c9ec557"
        },
        "downloads": 14,
        "filename": "TerminalOne-1.6.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4ec90a01aabd3683fbe74f50fb836db3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66789,
        "upload_time": "2017-01-17T11:43:54",
        "url": "https://files.pythonhosted.org/packages/88/e7/debbca3b507ec11a45c73de9df5e29ea2d722b90a4ca8c33819489ef2765/TerminalOne-1.6.0.tar.gz"
      }
    ],
    "1.6.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ba637d89908957864fb1486f36b155eb",
          "sha256": "47c7a867cfce4917daa7b035752f240791ddf2e39da40a86636298ce410eb120"
        },
        "downloads": 19,
        "filename": "TerminalOne-1.6.1.tar.gz",
        "has_sig": false,
        "md5_digest": "ba637d89908957864fb1486f36b155eb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 67962,
        "upload_time": "2017-01-24T16:52:27",
        "url": "https://files.pythonhosted.org/packages/98/c4/885217ef4f5246690cd26b1e691a2b16179831ed74da9928dcacab609098/TerminalOne-1.6.1.tar.gz"
      }
    ],
    "1.7.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1d083596b11966685bea211e21c5d26b",
          "sha256": "5c6880b260c187dba06e148e120a1e153440f228c4b1a50dc3f78eca54b0d81e"
        },
        "downloads": 18,
        "filename": "TerminalOne-1.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1d083596b11966685bea211e21c5d26b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66867,
        "upload_time": "2017-03-24T21:20:17",
        "url": "https://files.pythonhosted.org/packages/5a/dd/7fd5fa89a6bfb4d607fd6dfd55330757a35e7b346b095a96447439a9a95a/TerminalOne-1.7.0.tar.gz"
      }
    ],
    "1.7.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5e278b0bba604e9cacaa027fd94a3c52",
          "sha256": "87eb62b8f8e69eb8660499eabf6cf59dcb606b4655d76511b6886ffab0c3a164"
        },
        "downloads": 0,
        "filename": "TerminalOne-1.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5e278b0bba604e9cacaa027fd94a3c52",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66908,
        "upload_time": "2017-04-24T17:35:35",
        "url": "https://files.pythonhosted.org/packages/e6/0f/12dfee5f1082643e63631335a6b9fb4b1511e14afa0e81d3126fe97187fd/TerminalOne-1.7.1.tar.gz"
      }
    ],
    "1.8.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0bb44b2c1dc702b56a0aface246cc29c",
          "sha256": "4f4a902922505c2cd291d8541cd40f7882439672574a80305a3ec5b929952d3b"
        },
        "downloads": 0,
        "filename": "TerminalOne-1.8.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0bb44b2c1dc702b56a0aface246cc29c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 66931,
        "upload_time": "2017-05-01T20:42:44",
        "url": "https://files.pythonhosted.org/packages/a3/8e/9b90e9808283461e7c7d27b64fece06e781a770bf06e7c7cbd2f378ff78b/TerminalOne-1.8.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "0bb44b2c1dc702b56a0aface246cc29c",
        "sha256": "4f4a902922505c2cd291d8541cd40f7882439672574a80305a3ec5b929952d3b"
      },
      "downloads": 0,
      "filename": "TerminalOne-1.8.0.tar.gz",
      "has_sig": false,
      "md5_digest": "0bb44b2c1dc702b56a0aface246cc29c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 66931,
      "upload_time": "2017-05-01T20:42:44",
      "url": "https://files.pythonhosted.org/packages/a3/8e/9b90e9808283461e7c7d27b64fece06e781a770bf06e7c7cbd2f378ff78b/TerminalOne-1.8.0.tar.gz"
    }
  ]
}