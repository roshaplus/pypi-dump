{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "ABOUT\r\n-----\r\nThis is a native Python client library for the Kyoto Tycoon server,\r\nsupporting both Python 2 and 3. It includes significant performance\r\nimprovements and bug fixes over the (now seemingly unmaintained)\r\noriginal library by Toru Maesaka and Stephen Hamer.\r\n\r\nFor more information on Kyoto Tycoon server, please refer to:\r\n\r\n   http://fallabs.com/kyototycoon/\r\n\r\nAlong with this library we're also maintaining an updated and\r\nready-to-go fork of Kyoto Tycoon here:\r\n\r\n   https://github.com/sapo/kyoto\r\n\r\nFEATURES\r\n--------\r\nThe more efficient binary protocol is also supported along with\r\nthe HTTP protocol. It provides a performance improvement of up\r\nto 6x, but only the following operations are available:\r\n\r\n  * ``get()`` and ``get_bulk()``\r\n  * ``set()`` and ``set_bulk()``\r\n  * ``remove()`` and ``remove_bulk()``\r\n  * ``play_script()``\r\n\r\nAtomic operations aren't supported with the binary protocol,\r\nthe use of \"atomic=False\" is mandatory when using it. Operations\r\nbesides these will raise a ``NotImplementedError`` exception.\r\n\r\nIt's possible to have two KyotoTycoon objects open to the same\r\nserver in the same application, one using HTTP and the other\r\nusing the binary protocol, if necessary.\r\n\r\nThe library does automatic packing and unpacking (marshalling)\r\nof values coming from/to the database. The following data\r\nstorage formats are available by default:\r\n\r\n  * ``KT_PACKER_PICKLE`` - Python \"pickle\" format.\r\n  * ``KT_PACKER_JSON`` - JSON format (compact representation).\r\n  * ``KT_PACKER_STRING`` - Strings (UTF-8).\r\n  * ``KT_PACKER_BYTES`` - Binary data.\r\n\r\nThere is also a ``KT_PACKER_CUSTOM`` format available where you\r\ncan specify your own object to do the marshalling. This object\r\nneeds to provide the following two methods:\r\n\r\n  * ``.pack(self, data)`` - convert \"data\" to ``bytes()``\r\n  * ``.unpack(self, data)`` - convert \"data\" from ``bytes()``\r\n\r\nMarshalling is done for all methods except ``play_script()``,\r\nbecause the server can return data in more than one format at\r\nonce. The caller will most likely know the type of data that\r\nthe called script returns and must do the marshalling itself.\r\n\r\n\r\nREPLICATION SLAVE\r\n-----------------\r\nSince version 0.7.0 this library also contains a replication slave\r\nclass. This class provides a ``consume()`` generator function that\r\nreceives and parses transaction log entries from a Kyoto Tycoon\r\nmaster server into dictionaries.\r\n\r\nThis can be used to build your own custom replication schemes,\r\nlike key filtering, or react to server \"set\", \"remove\" or \"clear\"\r\ndatabase operations.\r\n\r\nDo note that only explicit operations create transaction log events.\r\nImplicit operations like key removal upon expiration don't.\r\n\r\nUnlike the client library, the replication slave always handles the\r\n\"key\" and \"value\" attributes as opaque binary data.\r\n\r\n\r\nMEMCACHE-ENABLED SERVERS\r\n------------------------\r\nKyoto Tycoon supports a subset of the memcached protocol. When a\r\nserver has this enabled including item flags, these are stored as\r\nthe last 4 bytes of the value. Since version 0.7.3 of this library,\r\nthere's a custom packer included that transparently handles this and\r\nalso includes gzip compression/decompression for scenarios where,\r\nfor example, a Python application is writing HTML pages to the Kyoto\r\nserver and an HTTP server is reading from it using a memcached client\r\nlibrary.\r\n\r\nExample::\r\n\r\n    from kyototycoon import KyotoTycoon, KT_PACKER_CUSTOM\r\n    from kyototycoon.packers import MemcachePacker\r\n\r\n    mp = MemcachePacker(gzip_enabled=True, gzip_flag=1)\r\n    kt = KyotoTycoon(pack_type=KT_PACKER_CUSTOM, custom_packer=mp)\r\n\r\n    kt.open(\"127.0.0.1\", 1978)\r\n\r\n    kt.set(\"key\", \"value\")\r\n    value = kt.get(\"key\")\r\n\r\n    kt.close()\r\n\r\nTo handle ``(value, flags)`` pairs without any additional processing,\r\nthe ``SimpleMemcachePacker`` can be used::\r\n\r\n    from kyototycoon import KyotoTycoon, KT_PACKER_CUSTOM\r\n    from kyototycoon.packers import SimpleMemcachePacker\r\n\r\n    smp = SimpleMemcachePacker()\r\n    kt = KyotoTycoon(pack_type=KT_PACKER_CUSTOM, custom_packer=smp)\r\n\r\n    kt.open(\"127.0.0.1\", 1978)\r\n\r\n    kt.set(\"key\", (\"value\", 123))\r\n    value, flags = kt.get(\"key\")\r\n\r\n    kt.close()\r\n\r\n\r\nCOMPATIBILITY\r\n-------------\r\nThis library is still not at version 1.0, which means the API and\r\nbehavior are not guaranteed to remain consistent between versions.\r\n\r\nSupport for using an error object has been removed. If you need\r\nthe old behavior for compatibility reasons, use a version up to\r\n(and including) v0.5.9. Versions later than this raise exceptions\r\non all Kyoto Tycoon errors.\r\n\r\n\r\nINSTALLATION\r\n------------\r\nYou can install the latest version of this library from source::\r\n\r\n    python setup.py build\r\n    python setup.py install\r\n\r\nOr, you can install the latest stable release from PyPI::\r\n\r\n    pip install python-kyototycoon-ng\r\n\r\n\r\nAUTHORS\r\n-------\r\n  * Carlos Rodrigues <cefrodrigues@gmail.com> (current maintainer)\r\n  * Toru Maesaka <dev@torum.net>\r\n  * Stephen Hamer <stephen.hamer@upverter.com>\r\n\r\nBinary protocol support was added based on Ulrich Mierendorff's code.\r\nYou can find the original library at the following URL:\r\n\r\n  http://www.ulrichmierendorff.com/software/kyoto_tycoon/python_library.html",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/sapo/python-kyototycoon",
    "keywords": "Kyoto Tycoon, Kyoto Cabinet, Memcache",
    "license": "BSD",
    "maintainer": "Carlos Rodrigues",
    "maintainer_email": "cefrodrigues@gmail.com",
    "name": "python-kyototycoon-ng",
    "platform": "",
    "project_url": "https://pypi.org/project/python-kyototycoon-ng/",
    "release_url": "https://pypi.org/project/python-kyototycoon-ng/0.7.3/",
    "requires_python": null,
    "summary": "Python client library for the Kyoto Tycoon key-value store",
    "version": "0.7.3"
  },
  "releases": {
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b2922bf60a35661a724d26c4f42dae96",
          "sha256": "79fc3df7fee2eb6fa528883f27cfbe6186293790e74ebd6a57d8c91f080d12e4"
        },
        "downloads": 1190,
        "filename": "python-kyototycoon-ng-0.7.1.zip",
        "has_sig": false,
        "md5_digest": "b2922bf60a35661a724d26c4f42dae96",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11840,
        "upload_time": "2014-11-29T12:36:27",
        "url": "https://files.pythonhosted.org/packages/ac/13/7a08489828a31f84085db4dab4513cf6a30524b58c268907cc117027d4c2/python-kyototycoon-ng-0.7.1.zip"
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c693a86223bdefac451775d52cb32f38",
          "sha256": "7e776ee07bf2cf810454526e9089f36a65a313f3b93a31085d3368b4aa27153d"
        },
        "downloads": 1710,
        "filename": "python-kyototycoon-ng-0.7.2.zip",
        "has_sig": false,
        "md5_digest": "c693a86223bdefac451775d52cb32f38",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12024,
        "upload_time": "2014-12-27T17:40:42",
        "url": "https://files.pythonhosted.org/packages/10/ec/7b4b0852cede1e910413fdb7b08887ac10fd4a5c96f9156ed1bc62d2c4a6/python-kyototycoon-ng-0.7.2.zip"
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1f2d534ab1119800f8a8fc23733212e0",
          "sha256": "47ae5e4c429594e1f23e94a5884e6d4de7d401f09bda7273222670e94fcc4535"
        },
        "downloads": 1704,
        "filename": "python-kyototycoon-ng-0.7.3.zip",
        "has_sig": false,
        "md5_digest": "1f2d534ab1119800f8a8fc23733212e0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13678,
        "upload_time": "2015-01-20T22:42:31",
        "url": "https://files.pythonhosted.org/packages/23/94/995bb40a9d1fba55c5a49a488f820c217385efa5d1c6c71b1a27ed9f3c41/python-kyototycoon-ng-0.7.3.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1f2d534ab1119800f8a8fc23733212e0",
        "sha256": "47ae5e4c429594e1f23e94a5884e6d4de7d401f09bda7273222670e94fcc4535"
      },
      "downloads": 1704,
      "filename": "python-kyototycoon-ng-0.7.3.zip",
      "has_sig": false,
      "md5_digest": "1f2d534ab1119800f8a8fc23733212e0",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 13678,
      "upload_time": "2015-01-20T22:42:31",
      "url": "https://files.pythonhosted.org/packages/23/94/995bb40a9d1fba55c5a49a488f820c217385efa5d1c6c71b1a27ed9f3c41/python-kyototycoon-ng-0.7.3.zip"
    }
  ]
}