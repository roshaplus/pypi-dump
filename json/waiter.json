{
  "info": {
    "author": "Aric Coady",
    "author_email": "aric.coady@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": ".. image:: https://img.shields.io/pypi/v/waiter.svg\n   :target: https://pypi.python.org/pypi/waiter/\n.. image:: https://img.shields.io/pypi/pyversions/waiter.svg\n.. image:: https://img.shields.io/pypi/status/waiter.svg\n.. image:: https://img.shields.io/travis/coady/waiter.svg\n   :target: https://travis-ci.org/coady/waiter\n.. image:: https://img.shields.io/codecov/c/github/coady/waiter.svg\n   :target: https://codecov.io/github/coady/waiter\n\nDoes Python need yet another retry / poll library?\nIt needs at least one that isn't coupled to decorators and functions.\nDecorators prevent the caller from customizing delay options.\nAnd even organizing the code around functions prevents custom handling of failures.\n\nWaiter is built around iteration instead, because the foundation of retrying / polling is a slowly executing loop.\nThe resulting interface is both easier to use and more flexible,\ndecoupling the delay algorithms from the application logic.\n\nUsage\n=========================\nSupply a number of seconds to repeat endlessly, or any iterable of seconds.\n\n.. code-block:: python\n\n   from waiter import wait\n\n   wait(1)              # 1, 1, 1, 1, ...\n   wait([1] * 3)        # 1, 1, 1\n   wait([0.5, 0.5, 60]) # circuit breaker\n\nSo any delay algorithm is easily created,\nbut constructors for common algorithms are also provided.\n\n.. code-block:: python\n\n   wait(1) + 1       # incremental backoff 1, 2, 3, 4, ...\n   w = wait(1) * 2   # exponential backoff 1, 2, 4, 8, ...\n   w[:3]             # limit attempt count 1, 2, 4\n   w <= 5            # set maximum delay   1, 2, 4, 5, 5, 5, ...\n   w.random(-1, 1)   # add random jitter\n\nThen simply use the ``wait`` object like any iterable, yielding the amount of elapsed time.\nTimeouts also supported of course.\n\n.. code-block:: python\n\n   from waiter import wait, suppress, first\n\n   for elapsed in wait(delays):           # first iteration is immediate\n      with suppress(exception):           # then each subsequent iteration sleeps as necessary\n         ...\n         break\n\n   for _ in wait(delays, timeout):        # standard convention for ignoring a loop variable\n      ...                                 # won't sleep past the timeout\n      if ...:\n         break\n\n   results = (... for _ in wait(delays))  # expressions are even easier\n   first(predicate, results[, default])   # filter for first true item\n   assert any(results)                    # perfect for tests too\n\nYes, functional versions are provided too, because now they're trivial to implement.\nThe decorator variants are simply partial applications of the corresponding methods.\nNote decorator syntax doesn't support arbitrary expressions, hence the name assignment.\n\n.. code-block:: python\n\n   backoff = wait(0.1) * 2\n\n   backoff.repeat(func, *args, **kwargs)           # generate results\n   backoff.retry(exception, func, *args, **kwargs) # return first success or re-raise exception\n   backoff.poll(predicate, func, *args, **kwargs)  # return first success or raise StopIteration\n\n   @backoff.repeating\n   @backoff.retrying(exception)\n   @backoff.polling(predicate)\n\nBut in the real world:\n\n* the function may not exist or be succinctly written as a lambda\n* the predicate may not exist or be succinctly written as a lambda\n* logging may be required\n* there may be complex handling of different exceptions or results\n\nSo consider the block form, just as decorators don't render ``with`` blocks superfluous.\nAlso note ``wait`` objects are re-iterable provided their original delays were.\n\nInstallation\n=========================\n::\n\n   $ pip install waiter\n\nDependencies\n=========================\n* Python 2.7, 3.3+\n\nTests\n=========================\n100% branch coverage. ::\n\n   $ pytest [--cov]\n\nChanges\n=========================\n0.4\n\n* Decorators support methods\n* Iterables can be throttled\n\n0.3\n\n* Waiters behave as iterables instead of iterators\n* Support for function decorators\n\n0.2\n\n* ``suppress`` context manager for exception handling\n* ``repeat`` method for decoupled iteration\n* ``first`` function for convenient filtering\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/coady/waiter",
    "keywords": "wait retry poll delay sleep timeout incremental exponential backoff",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "waiter",
    "platform": "",
    "project_url": "https://pypi.org/project/waiter/",
    "release_url": "https://pypi.org/project/waiter/0.4/",
    "requires_python": "",
    "summary": "Delayed iteration for polling and retries.",
    "version": "0.4"
  },
  "releases": {
    "0.0": [],
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5da99722398ed4cfcb8d73773cee7418",
          "sha256": "af5209449caebe319e9e22f1ed098f6e7f048f9f2a54487de9fca08c1a77670f"
        },
        "downloads": 468,
        "filename": "waiter-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5da99722398ed4cfcb8d73773cee7418",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4379,
        "upload_time": "2016-03-25T01:14:21",
        "url": "https://files.pythonhosted.org/packages/4e/17/1f61cbd244fc9d925be2346cb94df65707200305b4340fe3a7082963cdcc/waiter-0.1.tar.gz"
      }
    ],
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4d4266609e2d3ab6a476b7be22c75aeb",
          "sha256": "0e36dfe3c7cf8cab379403c112d17c1fcf634a5d81d5db224316765cf9c58089"
        },
        "downloads": 112,
        "filename": "waiter-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "4d4266609e2d3ab6a476b7be22c75aeb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4685,
        "upload_time": "2016-04-03T21:51:51",
        "url": "https://files.pythonhosted.org/packages/8e/58/e3ef5d61c12819b116db7fa9e7f27b2c383e65a0863600ab7911a8be95d1/waiter-0.2.tar.gz"
      }
    ],
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "41a51abacbb70c55ad532bb095dfd409",
          "sha256": "44a859d85bc770087ea5ae03e89dd829208ddedf84e3339e00b7267752334a2a"
        },
        "downloads": 128,
        "filename": "waiter-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "41a51abacbb70c55ad532bb095dfd409",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5126,
        "upload_time": "2016-04-29T18:54:44",
        "url": "https://files.pythonhosted.org/packages/94/b5/50f56f3546a3e2dcd5dcf12f24bb2871e642d3cc22f434f3ad01bc69114a/waiter-0.3.tar.gz"
      }
    ],
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "56061a9709251b040281d6aef7bbe28f",
          "sha256": "296de5eae8b1027ea7bd3b4208414d094bf447e43ed7c7508bb62e2fec15c082"
        },
        "downloads": 62,
        "filename": "waiter-0.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "56061a9709251b040281d6aef7bbe28f",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 6824,
        "upload_time": "2017-01-02T23:16:30",
        "url": "https://files.pythonhosted.org/packages/1a/33/b100bd61a722c3ae1d467840e5fe79219255ccaca0bda9f9c2e261c8b551/waiter-0.4-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d6d9d102bdab4e1b7b0b7d7256db2219",
          "sha256": "6852ae0770903108d5671220cf6336074085e5577b26d15e9f7eaead711f1df0"
        },
        "downloads": 67,
        "filename": "waiter-0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "d6d9d102bdab4e1b7b0b7d7256db2219",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5410,
        "upload_time": "2017-01-02T23:16:28",
        "url": "https://files.pythonhosted.org/packages/f1/25/e9f4b82920569a5926869f1b01a2761be1759cb4a8540fda6919b08bcf56/waiter-0.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "56061a9709251b040281d6aef7bbe28f",
        "sha256": "296de5eae8b1027ea7bd3b4208414d094bf447e43ed7c7508bb62e2fec15c082"
      },
      "downloads": 62,
      "filename": "waiter-0.4-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "56061a9709251b040281d6aef7bbe28f",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "size": 6824,
      "upload_time": "2017-01-02T23:16:30",
      "url": "https://files.pythonhosted.org/packages/1a/33/b100bd61a722c3ae1d467840e5fe79219255ccaca0bda9f9c2e261c8b551/waiter-0.4-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "d6d9d102bdab4e1b7b0b7d7256db2219",
        "sha256": "6852ae0770903108d5671220cf6336074085e5577b26d15e9f7eaead711f1df0"
      },
      "downloads": 67,
      "filename": "waiter-0.4.tar.gz",
      "has_sig": false,
      "md5_digest": "d6d9d102bdab4e1b7b0b7d7256db2219",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5410,
      "upload_time": "2017-01-02T23:16:28",
      "url": "https://files.pythonhosted.org/packages/f1/25/e9f4b82920569a5926869f1b01a2761be1759cb4a8540fda6919b08bcf56/waiter-0.4.tar.gz"
    }
  ]
}