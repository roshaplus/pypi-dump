{
  "info": {
    "author": "Colin Nolan",
    "author_email": "colin.nolan@sanger.ac.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "[![Build Status](https://travis-ci.org/wtsi-hgi/useintest.svg)](https://travis-ci.org/wtsi-hgi/useintest)\n[![codecov.io](https://codecov.io/gh/wtsi-hgi/useintest/graph/badge.svg)](https://codecov.io/github/wtsi-hgi/useintest)\n[![Documentation Status](https://readthedocs.org/projects/useintest/badge/?version=latest)](http://useintest.readthedocs.io/en/latest/?badge=latest)\n# Use In Test\n*I don't care how it's done, I just want to use it in my tests!*\n\n[Less blurb, more documentation - link to ReadTheDocs](https://useintest.readthedocs.io).\n\n## Key Features\n- Simple way of running services (e.g. Mongo, CouchDB, iRODS) and using executables (e.g. Samtools, icommands).\n- No knowledge of containers required.\n- No knowledge of service/executables required (how to install it, when it's ready to use, etc.).\n- Does not require the installation of anything on your local machine, aside from Docker.\n- Makes it simple to test against multiple versions of the same service or set of executables.\n- Easy to achieve test isolation.\n\n## Predefined Support\nOut of the box support for:\n\n- Mongo\n- CouchDB\n- iRODS\n- Samtools\n- GitLab\n- Gogs\n- Bissell\n- Consul\n\n## Why Use This Library?\nSoftware no longer works in isolation; with the trend towards microservices over monoliths, modern day applications \nrely on numerous external services for both data and computation.\n\nMocks can be a quick way to test against something that (should) behave like the external service that your \napplication uses. However, unless a well respected mocking framework exists, the mock you'll end up with will probably \nmake the same bad assumptions about the behaviour of service as your faulty code does!\n\nTesting with the \"real thing\" or a shared dev mirror of it is probably not a good idea during development, \nparticularly if the services that you're using hold state. You want to be able to run the tests in parallel, have \nrepeatability and have availability, be it for when you're offline or for collaborators outside of your organisation. \nYou also want to be able to wipe the slate clean and start again if something goes terribly wrong! It is unlikely you \nwill be able to do this in any kind of shared environment.\n\nThis library offers a way to just start up services and then throw them away after each test case, with no mess left \nover on your machine. It gives complete test isolation along with confidence that you're testing with services similar \nto those used in production.\n\n\n## Quick Examples\nStart up a containerised instance of Mongo:\n```python\nfrom useintest.predefined.mongo import MongoServiceController\n\n# Starts a containerised version of Mongo\ncontroller = MongoServiceController()              \nservice = controller.start_service()      \nrun_my_tests(my_application, service.host, service.port)\ncontroller.stop_service(service)\n```\n\nUse samtools in a container from the host machine via \"proxy executables\":\n```python\nfrom useintest.predefined.samtools import SamtoolsExecutablesController\n\ncontroller = SamtoolsExecutablesController()  \nexecutables_directory = controller.write_executables()\n# In the case of Samtools, there will be one executable in `executables_directory` named \"samtools\"\nrun_my_tests(my_application, executables_directory)\ncontroller.tear_down()\n```\n\n\n## Documentation\nFor more details, including information on how to setup and use the library, please [view the documentation on \nReadTheDocs](https://useintest.readthedocs.io) or read it from `/docs`.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/wtsi-hgi/useintest",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "useintest",
    "platform": "",
    "project_url": "https://pypi.org/project/useintest/",
    "release_url": "https://pypi.org/project/useintest/3.2.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "I don't care how it's done, I just want to use it in my tests!",
    "version": "3.2.0"
  },
  "releases": {
    "3.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dcc9cba856bdff983f7ed9e13e5ecee2",
          "sha256": "753f5abddf149e5f14915f38cb481baaaa197ac4d6643b9dc7c1f4c0751dea54"
        },
        "downloads": -1,
        "filename": "useintest-3.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "dcc9cba856bdff983f7ed9e13e5ecee2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32011,
        "upload_time": "2017-11-20T14:38:56",
        "url": "https://files.pythonhosted.org/packages/b4/03/e5f704a44c19b5c0fb820b99b2aba68585be857ce986eb89711b59796123/useintest-3.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "dcc9cba856bdff983f7ed9e13e5ecee2",
        "sha256": "753f5abddf149e5f14915f38cb481baaaa197ac4d6643b9dc7c1f4c0751dea54"
      },
      "downloads": -1,
      "filename": "useintest-3.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "dcc9cba856bdff983f7ed9e13e5ecee2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 32011,
      "upload_time": "2017-11-20T14:38:56",
      "url": "https://files.pythonhosted.org/packages/b4/03/e5f704a44c19b5c0fb820b99b2aba68585be857ce986eb89711b59796123/useintest-3.2.0.tar.gz"
    }
  ]
}