{
  "info": {
    "author": "Matthias Urlichs",
    "author_email": "matthias@urlichs.de",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: BSD",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3 :: Only",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: System :: Networking"
    ],
    "description": "``trio-asyncio`` is a re-implementation of the ``asyncio`` mainloop on top of\nTrio.\n\nRationale\n=========\n\nThere are quite a few asyncio-compatible libraries.\n\nOn the other hand, Trio has native concepts of tasks and task cancellation.\nAsyncio, on the other hand, is based on chaining Future objects, albeit\nwith nicer syntax.\n\nThus, being able to use asyncio libraries from Trio is useful.\n\nPrinciple of operation\n======================\n\nThe core of the \"normal\" asyncio main loop is the repeated execution of\nsynchronous code that's submitted to ``call_soon`` or\n``add_reader``/``add_writer``.\n\nEverything else within ``asyncio``, i.e. Futures and ``async``/``await``,\nis just syntactic sugar. There is no concept of a task; while a Future can\nbe cancelled, that in itself doesn't affect the code responsible for\nfulfilling it.\n\nOn the other hand, trio has genuine tasks with no separation between\nreturning a value asynchronously, and the code responsible for providing\nthat value.\n\n``trio_asyncio`` implements a task which runs (its own version of) the\nasyncio main loop. It also contains shim code which translates between these\nconcepts as transparently and correctly as possible, and it supplants a few\nof the standard loop's key functions.\n\nThis works rather well: ``trio_asyncio`` consists of just ~700 lines of\ncode (asyncio: ~8000) but passes the complete Python 3.6 test suite with no\nerrors.\n\nAuthor\n======\n\nMatthias Urlichs <matthias@urlichs.de>\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/smurfix/trio-asyncio",
    "keywords": "async",
    "license": "MIT -or- Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "trio_asyncio",
    "platform": "",
    "project_url": "https://pypi.org/project/trio_asyncio/",
    "release_url": "https://pypi.org/project/trio_asyncio/0.3/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A re-implementation of the asyncio mainloop on top of Trio",
    "version": "0.3"
  },
  "releases": {
    "0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3f45c65d9259db0de50801811ce00ec4",
          "sha256": "2b5f8e9395ddc98782672655c28f736d7c0b13a08d7ea5929920a5e98331d9f0"
        },
        "downloads": -1,
        "filename": "trio_asyncio-0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "3f45c65d9259db0de50801811ce00ec4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 99572,
        "upload_time": "2017-10-17T11:01:01",
        "url": "https://files.pythonhosted.org/packages/c6/8c/58bf80518acf0ef76e37e8d46eea8e200946ea4b818e23184efdff8ae0dc/trio_asyncio-0.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "3f45c65d9259db0de50801811ce00ec4",
        "sha256": "2b5f8e9395ddc98782672655c28f736d7c0b13a08d7ea5929920a5e98331d9f0"
      },
      "downloads": -1,
      "filename": "trio_asyncio-0.3.tar.gz",
      "has_sig": false,
      "md5_digest": "3f45c65d9259db0de50801811ce00ec4",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 99572,
      "upload_time": "2017-10-17T11:01:01",
      "url": "https://files.pythonhosted.org/packages/c6/8c/58bf80518acf0ef76e37e8d46eea8e200946ea4b818e23184efdff8ae0dc/trio_asyncio-0.3.tar.gz"
    }
  ]
}