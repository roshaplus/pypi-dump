{
  "info": {
    "author": "Aur\u00e9lien AMILIN",
    "author_email": "aurelien.amilin@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: 3.7"
    ],
    "description": "# lupin is a Python JSON object mapper\n\n[![Build Status](https://travis-ci.org/holinnn/lupin.svg)](https://travis-ci.org/holinnn/lupin)\n\nlupin is meant to help in serializing python objects to JSON and unserializing JSON data to python objects.\n\n\n## Installation\n\n```\npip install lupin\n```\n\n## Usage\n\nlupin uses schemas to create a representation of a python object.\n\nA schema is composed of fields which represents the way to load and dump an attribute of an object.\n\n### Define schemas\n\n```python\nfrom datetime import datetime\nfrom lupin import Mapper, Schema, fields as f\n\n\n# 1) Define your models\nclass Thief(object):\n    def __init__(self, name, stolen_items):\n        self.name = name\n        self.stolen_items = stolen_items\n\n\nclass Painting(object):\n    def __init__(self, name, author):\n        self.name = name\n        self.author = author\n\n\nclass Artist(object):\n    def __init__(self, name, birth_date):\n        self.name = name\n        self.birth_date = birth_date\n\n\n# 2) create a mapper\nmapper = Mapper()\n\n# 3) register a schema for each of your models you want to map to JSON objects\nartist_mapping = mapper.register(Artist, Schema({\n    \"name\": f.String(),\n    \"birthDate\": f.DateTime(binding=\"birth_date\", format=\"%Y-%m-%d\")\n}))\n\npainting_mapping = mapper.register(Painting, Schema({\n    \"name\": f.String(),\n    \"author\": f.Object(artist_mapping)\n}))\n\nmapper.register(Thief, Schema({\n    \"name\": f.String(),\n    \"stolenItems\": f.List(painting_mapping, binding=\"stolen_items\")\n}))\n\n\n# 4) create some sample data\nleonardo = Artist(name=\"Leonardo da Vinci\", birth_date=datetime(1452, 4, 15))\nmona_lisa = Painting(name=\"Mona Lisa\", author=leonardo)\narsene = Thief(name=\"Ars\u00e8ne Lupin\", stolen_items=[mona_lisa])\n```\n\n### Dump objects\n\n```python\n# use mapper to dump python objects\nassert mapper.dump(leonardo) == {\n    \"name\": \"Leonardo da Vinci\",\n    \"birthDate\": \"1452-04-15\"\n}\n\nassert mapper.dump(mona_lisa) == {\n    \"name\": \"Mona Lisa\",\n    \"author\": {\n        \"name\": \"Leonardo da Vinci\",\n        \"birthDate\": \"1452-04-15\"\n    }\n}\n\nassert mapper.dump(arsene) == {\n    \"name\": \"Ars\u00e8ne Lupin\",\n    \"stolenItems\": [\n        {\n            \"name\": \"Mona Lisa\",\n            \"author\": {\n                \"name\": \"Leonardo da Vinci\",\n                \"birthDate\": \"1452-04-15\"\n            }\n        }\n    ]\n}\n```\n\n### Load objects\n\n```python\n# use mapper to load JSON data\ndata = {\n    \"name\": \"Mona Lisa\",\n    \"author\": {\n        \"name\": \"Leonardo da Vinci\",\n        \"birthDate\": \"1452-04-15\"\n    }\n}\npainting = mapper.load(data, painting_mapping)\nartist = painting.author\n\nassert isinstance(painting, Painting)\nassert painting.name == \"Mona Lisa\"\n\nassert isinstance(artist, Artist)\nassert artist.name == \"Leonardo da Vinci\"\nassert artist.birth_date == datetime(1452, 4, 15)\n```\n\n### Polymorphic lists\n\nSometimes a list can contain multiple type of objects. In such cases you will have to use a `PolymorphicList`, you will also need to add\na key in the items schema to store the type of the object (you can use a `Constant` field).\n\nSay that our thief has level up and has stolen a diamond.\n\n```python\nclass Diamond(object):\n    def __init__(self, carat):\n        self.carat = carat\n\n\nmapper = Mapper()\n\n# Register a schema for diamonds\ndiamond_mapping = mapper.register(Diamond, Schema({\n    \"carat\": f.Field(),\n    \"type\": f.Constant(\"diamond\")  # this will be used to know which mapping to used while loading JSON\n}))\n\n# Change our painting schema in order to include a `type` field\npainting_mapping = mapper.register(Painting, Schema({\n    \"name\": f.String(),\n    \"type\": f.Constant(\"painting\"),\n    \"author\": f.Object(artist_mapping)\n}))\n\n# Use `PolymorphicList` for `stolen_items`\nthief_mapping = mapper.register(Thief, Schema({\n    \"name\": f.String(),\n    \"stolenItems\": f.PolymorphicList(on=\"type\",  # JSON key to lookup for the polymorphic type\n                                     binding=\"stolen_items\",\n                                     mappings={\n                                         \"painting\": painting_mapping,  # if `type == \"painting\"` then use painting_mapping\n                                         \"diamond\": diamond_mapping  # if `type == \"diamond\"` then use diamond_mapping\n                                     })\n}))\n\n\ndiamond = Diamond(carat=20)\narsene.stolen_items.append(diamond)\n\n# Dump object\ndata = mapper.dump(arsene)\nassert data == {\n    \"name\": \"Ars\u00e8ne Lupin\",\n    \"stolenItems\": [\n        {\n            \"name\": \"Mona Lisa\",\n            \"type\": \"painting\",\n            \"author\": {\n                \"name\": \"Leonardo da Vinci\",\n                \"birthDate\": \"1452-04-15\"\n            }\n        },\n        {\n            \"carat\": 20,\n            \"type\": \"diamond\"\n        }\n    ]\n}\n\n# Load data\nthief = mapper.load(data, thief_mapping)\nassert isinstance(thief.stolen_items[0], Painting)\nassert isinstance(thief.stolen_items[1], Diamond)\n```\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/holinnn/lupin",
    "keywords": "",
    "license": "mit",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lupin",
    "platform": "",
    "project_url": "https://pypi.org/project/lupin/",
    "release_url": "https://pypi.org/project/lupin/0.1.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "lupin is a JSON object mapper",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e4dcbf4b5de713529ec5b76ec10270d2",
          "sha256": "2acb273421482c49a8b68bf9e8ee3937304d179b297960c0c625825041c5957d"
        },
        "downloads": -1,
        "filename": "lupin-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "e4dcbf4b5de713529ec5b76ec10270d2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22273,
        "upload_time": "2017-10-17T16:41:16",
        "url": "https://files.pythonhosted.org/packages/40/84/18ae98d03c1b692988e5659ace750d5e97b0937ee35f27796ed9d7aeaf5e/lupin-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "e4dcbf4b5de713529ec5b76ec10270d2",
        "sha256": "2acb273421482c49a8b68bf9e8ee3937304d179b297960c0c625825041c5957d"
      },
      "downloads": -1,
      "filename": "lupin-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "e4dcbf4b5de713529ec5b76ec10270d2",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 22273,
      "upload_time": "2017-10-17T16:41:16",
      "url": "https://files.pythonhosted.org/packages/40/84/18ae98d03c1b692988e5659ace750d5e97b0937ee35f27796ed9d7aeaf5e/lupin-0.1.1.tar.gz"
    }
  ]
}