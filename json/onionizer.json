{
  "info": {
    "author": "",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Home-page: http://github.com/jpmelos/onionizer\nAuthor: Jo\u00e3o Sampaio\nAuthor-email: jpmelos@gmail.com\nLicense: MIT\nDescription: # onionizer\n        \n        An onion architecture enforcer.\n        \n        ## Theory\n        \n        The layered architecture (or **onion** architecture) says that imports should flow in a single direction, from the most \"internal\" modules that don't import from any other module in the project to the outer layers that can import from other modules. Drawing an example from MVC applications, the model layer should **not** import from the view layer, but they view layer can import from the model layer to execute queries on the database. In onion terms, the model layer is more internal than the view layer.\n        \n        This project is a proof-of-concept and a work in progress. It has a lot of limitations.\n        \n        ## The onion file\n        \n        The onion file describes how the imports in a package can happen.\n        \n        Imagine the following package (based on https://docs.python.org/3/tutorial/modules.html#packages):\n        \n            sound\n                __init__.py\n                effects\n                    __init__.py\n                    echo.py\n                    reverse.py\n                    surround.py\n                filters\n                    __init__.py\n                    equalizer.py\n                    karaoke.py\n                    vocoder.py\n                formats\n                    __init__.py\n                    aiff.py\n                    ogg.py\n                    wav.py\n        \n        Suppose that, in our project, that imports can happen in this fashion:\n        \n        1. Higher level of abstraction: `formats` can import from `effects` can import from `filters`.\n        1. Inside the `effects` package: `echo` can import from `reverse` can import from `surround`.\n        \n        Etc.\n        \n        The onion file would be configured like this:\n        \n            sound\n            - __init__.py\n            - formats\n            - effects\n            - filters\n        \n            sound.effects\n            - __init__.py\n            - echo.py\n            - reverse.py\n            - surround.py\n        \n            sound.formats\n            - __init__.py\n            - equalizer.py\n            - karaoke.py\n            - vocoder.py\n        \n            sound.formats\n            - __init__.py\n            - aiff.py\n            - ogg.py\n            - wav.py\n        \n        Imports can happen from up to down (`formats` package can import from `effects` and `filters`, `effects` can import from `filters`, but not from `formats`).\n        \n        Note that, in all those packages, the `__init__.py` file is at the top, meaning it can import from internal modules, but internal modules **cannot** import from it. This means that files internal to a subpackage must import from the subpackage directly addressing the modules in it. Putting the `__init__.py` file at the bottom would basically render it useless, since it wouldn't be able to import from the files in the subpackage.\n        \n        ### Project limitations\n        \n        - Only works on a single top-level package.\n        - Only works with absolute imports.\n        - Not possible to block imports among multiple files, blocks always happen from up to down in the same onion section.\n        - Not possible to ignore packages or check imports only up to a certain depth in the package.\n        \n        The goal is to remove these limitations as the project evolves.\n        \n        ## Installing onionizer\n        \n            $ pip install onionizer\n        \n        **Note:** The project is in the very early stages and breaking changes probably **will** happen.\n        \n        ## Initializing a project\n        \n        Initialize a project by issuing:\n        \n            $ cd path/to/setup.py\n            $ onion init package\n        \n        This will create the onion file (`.onion`) inside the package (`package/.onion`). You should then open the file and move the lines around to make the file correctly describe how imports happen in your project. In big projects, this file will be very big. The idea is to eventually mitigate this problem by only checking compliance up to a certain depth, and simply ignore missing modules from the onion file.\n        \n        ## Checking a project\n        \n        Check that project by issuing:\n        \n            $ onion check package\n        \nKeywords: onion architecture,layered architecture\nPlatform: UNKNOWN\nClassifier: Development Status :: 3 - Alpha\nClassifier: Environment :: Console\nClassifier: Intended Audience :: Developers\nClassifier: License :: OSI Approved :: MIT License\nClassifier: Programming Language :: Python :: 3 :: Only\nClassifier: Topic :: Software Development\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "onionizer",
    "platform": "",
    "project_url": "https://pypi.org/project/onionizer/",
    "release_url": "https://pypi.org/project/onionizer/0.1/",
    "requires_python": "",
    "summary": "An onion-architecture enforcer.",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "52fa8bc8fb062fc26193e0cbd38992d0",
          "sha256": "0e490b884698fe043d21229d8640d095469549c959aad0a315512eded962104e"
        },
        "downloads": 0,
        "filename": "onionizer-0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "52fa8bc8fb062fc26193e0cbd38992d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 7996,
        "upload_time": "2017-05-09T23:13:18",
        "url": "https://files.pythonhosted.org/packages/1e/a1/962336615e0252905a97611109200a7892ebbcf008aea38453e9cf4b36f6/onionizer-0.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "7f6b25e51d02a261da0e4cfb200cf16c",
          "sha256": "f85afc446e0f2416f2d974d11b9c32b0a82bd5b8bc64b36afbbb5ffd3026fb75"
        },
        "downloads": 0,
        "filename": "onionizer-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7f6b25e51d02a261da0e4cfb200cf16c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5250,
        "upload_time": "2017-05-09T23:13:20",
        "url": "https://files.pythonhosted.org/packages/61/4f/2c67e91c61c8fe71cc1bb2eb45b49ec840bcd758dd17590275d0456bc448/onionizer-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "52fa8bc8fb062fc26193e0cbd38992d0",
        "sha256": "0e490b884698fe043d21229d8640d095469549c959aad0a315512eded962104e"
      },
      "downloads": 0,
      "filename": "onionizer-0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "52fa8bc8fb062fc26193e0cbd38992d0",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 7996,
      "upload_time": "2017-05-09T23:13:18",
      "url": "https://files.pythonhosted.org/packages/1e/a1/962336615e0252905a97611109200a7892ebbcf008aea38453e9cf4b36f6/onionizer-0.1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "7f6b25e51d02a261da0e4cfb200cf16c",
        "sha256": "f85afc446e0f2416f2d974d11b9c32b0a82bd5b8bc64b36afbbb5ffd3026fb75"
      },
      "downloads": 0,
      "filename": "onionizer-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7f6b25e51d02a261da0e4cfb200cf16c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5250,
      "upload_time": "2017-05-09T23:13:20",
      "url": "https://files.pythonhosted.org/packages/61/4f/2c67e91c61c8fe71cc1bb2eb45b49ec840bcd758dd17590275d0456bc448/onionizer-0.1.tar.gz"
    }
  ]
}