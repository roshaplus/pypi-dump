{
  "info": {
    "author": "Sami Turcotte",
    "author_email": "samiturcotte@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Education",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Filters",
      "Topic :: Text Processing :: Markup :: HTML"
    ],
    "description": "mdx\\_bleach\r\n===========\r\n\r\n**mdx\\_bleach** is a\r\n`Python-Markdown <https://pythonhosted.org/Markdown/>`__ extension that\r\nsanitizes the output of untrusted Markdown documents based on a\r\nwhitelist. The extension is based on\r\n`Bleach <http://bleach.readthedocs.org/en/latest/>`__, a robust\r\nwhitelist-based HTML sanitizer.\r\n\r\nBy design, all HTML markup is allowed in Markdown documents. Unless\r\nwritten inside a code block, raw HTML is not escaped and is therefore\r\nrendered by the web browsers. While this is a nice authoring feature, it\r\nalso exposes some XSS vulnerabilities. That becomes a problem when the\r\nsource of a Markdown document is untrusted.\r\n\r\n**mdx\\_bleach** intends to provide a safer and more flexible alternative\r\nto Python-Markdown's `deprecated safe\r\nmode <https://pythonhosted.org/Markdown/reference.html#safe_mode>`__.\r\n\r\nInstallation\r\n------------\r\n\r\n::\r\n\r\n    pip install mdx_bleach\r\n\r\nBasic Usage\r\n-----------\r\n\r\n.. code:: python\r\n\r\n    >>> import markdown\r\n    >>> from mdx_bleach.extension import BleachExtension\r\n    >>> bleach = BleachExtension()\r\n    >>> md = markdown.Markdown(extensions=[bleach])\r\n    >>> md.convert('<span>is not allowed</span>')\r\n    u'<p>&lt;span&gt;is not allowed&lt;/span&gt;</p>'\r\n\r\nBecause the ``<span>`` tag isn't allowed by default, **mdx\\_bleach**\r\nescapes it. The default whitelists can be found in\r\n``mdx_bleach.whitelist``.\r\n\r\nConfiguration\r\n-------------\r\n\r\nTo configure **mdx\\_bleach**, pass the following keyword arguments to\r\n``BleachExtension``:\r\n\r\n-  ``tags`` Tag Whitelist\r\n-  ``attributes`` Attribute Whitelist\r\n-  ``styles`` Styles Whitelist\r\n-  ``protocols`` Protocols Whitelist\r\n-  ``strip`` Stripping Markup\r\n-  ``strip_comments`` Stripping Comments\r\n\r\nThe following example reflects the default configuration:\r\n\r\n.. code:: python\r\n\r\n    from mdx_bleach.whitelist import ALLOWED_TAGS, ALLOWED_ATTRIBUTES, ALLOWED_STYLES, ALLOWED_PROTOCOLS\r\n    bleach = BleachExtension(tags=ALLOWED_TAGS, attributes=ALLOWED_ATTRIBUTES,\r\n        styles=ALLOWED_STYLES, protocols=ALLOWED_PROTOCOLS, strip=False, strip_comments=True)\r\n    md = markdown.Markdown(extensions=[bleach])\r\n\r\nTag Whitelist\r\n~~~~~~~~~~~~~\r\n\r\nThe ``tags`` kwarg is a whitelist of allowed HTML tags. It should be a\r\nlist, tuple, or other iterable. Any other HTML tags will be escaped or\r\nstripped from the text. This applies to the HTML output that Markdown\r\nproduces.\r\n\r\nSince Markdown commonly generates HTML elements like ``p``, ``a``,\r\n``img``, etc. it is recommended to allow no less than the default tag\r\nwhitelist found in ``mdx_bleach.whitelist.ALLOWED_TAGS``.\r\n\r\nFor example:\r\n\r\n.. code:: python\r\n\r\n    >>> from mdx_bleach.whitelist import ALLOWED_TAGS\r\n    >>> bleach = BleachExtension(tags=ALLOWED_TAGS + ['small'])\r\n    >>> md = markdown.Markdown(extensions=[bleach])\r\n    >>> md.convert('<small>is allowed</small>')\r\n    u'<p><small>is allowed</small></p>'\r\n\r\nThis will allow authored ``small`` tags and any tag from the default\r\nwhitelist. Note that if a third party extension that can generate more\r\nspecific tags is installed, you might want to whitelist those additional\r\ntags as well.\r\n\r\nAttribute Whitelist\r\n~~~~~~~~~~~~~~~~~~~\r\n\r\nThe ``attributes`` kwarg is a whitelist of attributes. It can be a list,\r\nin which case the attributes are allowed for any tag, or a dictionary,\r\nin which case the keys are tag names (or a wildcard: ``*`` for all tags)\r\nand the values are lists of allowed attributes.\r\n\r\nThe default value is a conservative dictionary found in\r\n``mdx_bleach.whitelist.ALLOWED_ATTRIBUTES``. If you override the\r\n``attributes`` kwarg and still want to support images and links, make\r\nsure to allow the ``href`` and ``title`` attributes in ``<a>`` tags, as\r\nwell as the ``src``, ``title`` and ``alt`` attributes in ``<img>`` tags.\r\n\r\nFor example:\r\n\r\n.. code:: python\r\n\r\n    attrs = {\r\n        '*': ['class'],\r\n        'a': ['href', 'title', 'rel'],\r\n        'img': ['src', 'title', 'alt'],\r\n    }\r\n    bleach = BleachExtension(attributes=attrs)\r\n\r\nIn this case, the ``class`` attribute is allowed on any allowed element\r\n(from the ``tags`` argument), ``<a>`` tags are allowed to have ``href``,\r\n``title`` and ``rel`` attributes, and so on.\r\n\r\nYou can also use a callable (instead of a list). If the callable returns\r\nTrue, the attribute is allowed. Otherwise, it is stripped.\r\n\r\nFor example:\r\n\r\n.. code:: python\r\n\r\n    def filter_src(name, value):\r\n        if name in ('alt', 'title', 'height', 'width'):\r\n            return True\r\n        if name == 'src':\r\n            p = urlparse(value)\r\n            return (not p.netloc) or p.netloc == 'mydomain.com'\r\n        return False\r\n\r\nStyles Whitelist\r\n~~~~~~~~~~~~~~~~\r\n\r\nIf you allow the ``style`` attribute, you will also need to whitelist\r\nstyles authors are allowed to set, for example ``color`` and\r\n``background-color``. The default value is an empty list.\r\n\r\nFor example, to allow authors to set the color and font-weight of\r\n``span`` elements:\r\n\r\n.. code:: python\r\n\r\n    tags = ALLOWED_TAGS + ['span']\r\n    attrs = ALLOWED_ATTRIBUTES.copy()\r\n    attrs['span'] =  ['style']\r\n    styles = ['color', 'font-weight']\r\n    bleach = BleachExtension(tags=tags, attributes=attrs, styles=styles)\r\n\r\nProtocol Whitelist\r\n~~~~~~~~~~~~~~~~~~\r\n\r\nIf you allow tags that have attributes containing a URI value (like the\r\nhref attribute of an anchor tag,) you may want to adapt the accepted\r\nprotocols. The default list only allows http, https and mailto.\r\n\r\nFor example, this sets allowed protocols to http, https and smb:\r\n\r\n.. code:: python\r\n\r\n    protocols = ['http', 'https', 'smb']\r\n    bleach = BleachExtension(protocols=protocols)\r\n\r\nThis adds smb to the bleach-specified set of allowed protocols:\r\n\r\n.. code:: python\r\n\r\n    bleach = BleachExtension(protocols=ALLOWED_PROTOCOLS + ['smb'])\r\n\r\nStripping Markup\r\n~~~~~~~~~~~~~~~~\r\n\r\nBy default, Bleach *escapes* disallowed or invalid markup. For example:\r\n\r\n.. code:: python\r\n\r\n    >>> md = markdown.Markdown(extensions=[BleachExtension()])\r\n    >>> md.convert('<span>is not allowed</span>')\r\n    u'<p>&lt;span&gt;is not allowed&lt;/span&gt;'\r\n\r\nIf you would rather Bleach stripped this markup entirely, you can pass\r\n``strip=True``:\r\n\r\n.. code:: python\r\n\r\n    >>> md = markdown.Markdown(extensions=[BleachExtension(strip=True)])\r\n    >>> md.convert('<span>is not allowed</span>')\r\n    u'<p>is not allowed</p>'\r\n\r\nStripping Comments\r\n~~~~~~~~~~~~~~~~~~\r\n\r\nBy default, Bleach will strip out HTML comments. To disable this\r\nbehavior, set ``strip_comments=False``:\r\n\r\n.. code:: python\r\n\r\n    >>> html = 'my<!-- commented --> html'\r\n\r\n    >>> md = markdown.Markdown(extensions=[BleachExtension()])\r\n    >>> md.convert(html)\r\n    u'<p>my html</p>'\r\n\r\n    >>> md = markdown.Markdown(extensions=[BleachExtension(strip_comments=False)])\r\n    >>> md.convert(html)\r\n    u'<p>my<!-- commented --> html</p>'\r\n\r\nLinks\r\n-----\r\n\r\n-  `Source <https://github.com/Wenzil/mdx_bleach>`__\r\n-  `Bleach <http://bleach.readthedocs.org/en/latest/>`__\r\n-  `Markdown <http://daringfireball.net/projects/markdown/>`__\r\n-  `Python-Markdown <https://pythonhosted.org/Markdown/>`__",
    "docs_url": null,
    "download_url": "https://github.com/Wenzil/mdx_bleach/tarball/0.1.1",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Wenzil/mdx_bleach",
    "keywords": "mdx,bleach,markdown,extension,sanitize,html",
    "license": "MIT License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "mdx_bleach",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/mdx_bleach/",
    "release_url": "https://pypi.org/project/mdx_bleach/0.1.2/",
    "requires_python": null,
    "summary": "Python-Markdown extension to sanitize the output of untrusted Markdown documents.",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "58d888520a7c7b2b0ef1c2a641cc8a51",
          "sha256": "9aab63f86c644eacbf235597b0d3535f3fcf4ffc117e7971ff145f46e95af65b"
        },
        "downloads": 2082,
        "filename": "mdx_bleach-0.1.0.win32.exe",
        "has_sig": false,
        "md5_digest": "58d888520a7c7b2b0ef1c2a641cc8a51",
        "packagetype": "bdist_wininst",
        "python_version": "any",
        "size": 208896,
        "upload_time": "2015-04-16T05:55:24",
        "url": "https://files.pythonhosted.org/packages/8a/d0/e23f666b3f8f85e295abb4230e977e54c08d6013bcc6ad118169eeedd15c/mdx_bleach-0.1.0.win32.exe"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4261d6dfd77da1115806122b6ed28ae7",
          "sha256": "e051a0b268101aace1cfa2427d593a8a1d1eae35168c9b25404ae86472f480e2"
        },
        "downloads": 1109,
        "filename": "mdx_bleach-0.1.0.zip",
        "has_sig": false,
        "md5_digest": "4261d6dfd77da1115806122b6ed28ae7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13225,
        "upload_time": "2015-04-16T05:55:21",
        "url": "https://files.pythonhosted.org/packages/91/b3/9b982d5aac1accb1a91253b557c3f9f70bcd1689b0f0bd4679968f55d9bc/mdx_bleach-0.1.0.zip"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ebf1cfb13771e1919e7fe7ff14e1901f",
          "sha256": "337362256710ed207e0b7dbf3d32ad921dfbb4b4b940bfdf141103b73a51525c"
        },
        "downloads": 9,
        "filename": "mdx_bleach-0.1.1.zip",
        "has_sig": false,
        "md5_digest": "ebf1cfb13771e1919e7fe7ff14e1901f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10325,
        "upload_time": "2017-01-23T01:29:57",
        "url": "https://files.pythonhosted.org/packages/b0/5f/5538d8ff700dbc35ae3b2b9930658059681c6af06c17b8a8083f27109644/mdx_bleach-0.1.1.zip"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "750597a1108d474fe7a1c6725d610906",
          "sha256": "cd1c59b9dbc2dcb8f86d4f49b939359b2d7e7b6c490d0bf15048210b28085be8"
        },
        "downloads": 11,
        "filename": "mdx_bleach-0.1.2.zip",
        "has_sig": false,
        "md5_digest": "750597a1108d474fe7a1c6725d610906",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10334,
        "upload_time": "2017-01-31T04:54:40",
        "url": "https://files.pythonhosted.org/packages/2b/40/21b5dd4a0b2ab868973f1f378fc1b358a38fcd8a0de7cb61696a60c2e23e/mdx_bleach-0.1.2.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "750597a1108d474fe7a1c6725d610906",
        "sha256": "cd1c59b9dbc2dcb8f86d4f49b939359b2d7e7b6c490d0bf15048210b28085be8"
      },
      "downloads": 11,
      "filename": "mdx_bleach-0.1.2.zip",
      "has_sig": false,
      "md5_digest": "750597a1108d474fe7a1c6725d610906",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 10334,
      "upload_time": "2017-01-31T04:54:40",
      "url": "https://files.pythonhosted.org/packages/2b/40/21b5dd4a0b2ab868973f1f378fc1b358a38fcd8a0de7cb61696a60c2e23e/mdx_bleach-0.1.2.zip"
    }
  ]
}