{
  "info": {
    "author": "lilydjwg",
    "author_email": "lilydjwg@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "Intended Audience :: System Administrators",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3 :: Only",
      "Topic :: Internet",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Software Development",
      "Topic :: System :: Archiving :: Packaging",
      "Topic :: System :: Software Distribution",
      "Topic :: Utilities"
    ],
    "description": "**nvchecker** (short for *new version checker*) is for checking if a new version of some software has been released.\r\n\r\n.. image:: https://travis-ci.org/lilydjwg/nvchecker.svg\r\n   :alt: Build Status\r\n   :target: https://travis-ci.org/lilydjwg/nvchecker\r\n.. image:: https://badge.fury.io/py/nvchecker.svg\r\n   :alt: PyPI version\r\n   :target: http://badge.fury.io/py/nvchecker\r\n\r\nContents\r\n========\r\n\r\n* `Dependency <#dependency>`_\r\n* `Running <#running>`_\r\n* `Version Record Files <#version-record-files>`_\r\n\r\n  * `The nvtake Command <#the-nvtake-command>`_\r\n\r\n* `Version Source Files <#version-source-files>`_\r\n\r\n  * `Configuration Section <#configuration-section>`_\r\n  * `Search in a Webpage <#search-in-a-webpage>`_\r\n  * `Find with a Command <#find-with-a-command>`_\r\n  * `Check AUR <#check-aur>`_\r\n  * `Check GitHub <#check-github>`_\r\n  * `Check BitBucket <#check-bitbucket>`_\r\n  * `Check GitCafe <#check-gitcafe>`_\r\n  * `Check GitLab <#check-gitlab>`_\r\n  * `Check PyPI <#check-pypi>`_\r\n  * `Check RubyGems <#check-rubygems>`_\r\n  * `Check NPM Registry <#check-npm-registry>`_\r\n  * `Check Hackage <#check-hackage>`_\r\n  * `Check CPAN <#check-cpan>`_\r\n  * `Check Packagist <#check-packagist>`_\r\n  * `Check Local Pacman Database <#check-local-pacman-database>`_\r\n  * `Check Arch Linux official packages <#check-arch-linux-official-packages>`_\r\n  * `Check Google Code (hg repository) <#check-google-code-hg-repository>`_\r\n  * `Check Google Code (svn repository) <#check-google-code-svn-repository>`_\r\n  * `Manually updating <#manually-updating>`_\r\n  * `Version Control System (VCS) (git, hg, svn, bzr) <#version-control-system-vcs-git-hg-svn-bzr>`_\r\n  * `Other <#other>`_\r\n\r\n* `Bugs <#bugs>`_\r\n* `Footnotes <#footnotes>`_\r\n\r\nDependency\r\n==========\r\n- Python 3\r\n- Tornado\r\n- Optional pycurl\r\n- All commands used in your version source files\r\n\r\nRunning\r\n=======\r\nTo see available options::\r\n\r\n  ./nvchecker --help\r\n\r\nRun with one or more software version source files::\r\n\r\n  ./nvchecker source_file\r\n\r\nYou normally will like to specify some \"version record files\"; see below.\r\n\r\nVersion Record Files\r\n====================\r\nVersion record files record which version of the software you know or is available. They are simple key-value pairs of ``(name, version)`` seperated by a space\\ [v0.3]_::\r\n\r\n  fcitx 4.2.7\r\n  google-chrome 27.0.1453.93-200836\r\n  vim 7.3.1024\r\n\r\nSay you've got a version record file called ``old_ver.txt`` which records all your watched software and their versions, as well as some configuration entries. To update it using ``nvchecker``::\r\n\r\n  ./nvchecker source.ini\r\n\r\nSee what are updated with ``nvcmp``::\r\n\r\n  ./nvcmp source.ini\r\n\r\nManually compare the two files for updates (assuming they are sorted alphabetically; files generated by ``nvchecker`` are already sorted)::\r\n\r\n  comm -13 old_ver.txt new_ver.txt\r\n  # or say that in English:\r\n  comm -13 old_ver.txt new_ver.txt | awk '{print $1 \" has updated to version \" $2 \".\"}'\r\n  # show both old and new versions\r\n  join old_ver.txt new_ver.txt | awk '$2 != $3'\r\n\r\nThe ``nvtake`` Command\r\n----------------------\r\nThis command helps to manage version record files. It reads both old and new version record files, and a list of names given on the commandline. It then update the versions of those names in the old version record file.\r\n\r\nThis helps when you have known (and processed) some of the updated software, but not all. You can tell nvchecker that via this command instead of editing the file by hand.\r\n\r\nThis command will help most if you specify where you version record files are in your config file. See below for how to use a config file.\r\n\r\nVersion Source Files\r\n====================\r\nThe software version source files are in ini format. *Section names* is the name of the software. Following fields are used to tell nvchecker how to determine the current version of that software.\r\n\r\nSee ``sample_source.ini`` for an example.\r\n\r\nConfiguration Section\r\n---------------------\r\nA special section named ``__config__`` is special, it provides some configuration options\\ [v0.4]_.\r\n\r\nRelative path are relative to the source files, and ``~`` and environmental variables are expanded.\r\n\r\nCurrently supported options are:\r\n\r\noldver\r\n  Specify a version record file containing the old version info.\r\n\r\nnewver\r\n  Specify a version record file to store the new version info.\r\n\r\nSearch in a Webpage\r\n-------------------\r\nSearch through a specific webpage for the version string. This type of version finding has these fields:\r\n\r\nurl\r\n  The URL of the webpage to fetch.\r\n\r\nencoding\r\n  (*Optional*) The character encoding of the webpage, if ``latin1`` is not appropriate.\r\n\r\nregex\r\n  A regular expression used to find the version string.\r\n\r\n  It can have zero or one capture group. The capture group or the whole match is the version string.\r\n\r\n  When multiple version strings are found, the maximum of those is chosen.\r\n\r\nproxy\r\n  The HTTP proxy to use. The format is ``host:port``, e.g. ``localhost:8087``. This requires `pycurl <http://pycurl.sourceforge.net/>`_.\r\n\r\nuser_agent\r\n  The ``User-Agent`` header value to use. Use something more like a tool (e.g. ``curl/7.40.0``) in Europe or the real web page won't get through because cookie policies (SourceForge has this issue).\r\n\r\nFind with a Command\r\n-------------------\r\nUse a shell command line to get the version. The output is striped first, so trailing newlines do not bother.\r\n\r\ncmd\r\n  The command line to use. This will run with the system's standard shell (i.e. ``/bin/sh``).\r\n\r\nCheck AUR\r\n---------\r\nCheck `Arch User Repository <https://aur.archlinux.org/>`_ for updates.\r\n\r\naur\r\n  The package name in AUR. If empty, use the name of software (the *section name*).\r\n\r\nstrip-release\r\n  Strip the release part.\r\n\r\nCheck GitHub\r\n------------\r\nCheck `GitHub <https://github.com/>`_ for updates. The version returned is in date format ``%Y%m%d``, e.g. ``20130701``.\r\n\r\ngithub\r\n  The github repository, with author, e.g. ``lilydjwg/nvchecker``.\r\n\r\nbranch\r\n  Which branch to track? Default: ``master``.\r\n\r\nuse_latest_release\r\n  Set this to ``true`` to check for the latest release on GitHub. An annotated\r\n  tag creates a \"release\" on GitHub. It's not the same with git tags, which\r\n  includes both annotated tags and lightweight ones.\r\n\r\nuse_max_tag\r\n  Set this to ``true`` to check for the max tag on GitHub. Unlike ``use_latest_release``,\r\n  this option includes both annotated tags and lightweight ones, and return the biggest one\r\n  sorted by ``pkg_resources.parse_version``.\r\n\r\nignored_tags\r\n  Ignore certain tags while computing the max tag. Tags are separate by\r\n  whitespaces. This option must be used together with ``use_max_tag``. This can\r\n  be useful to avoid some known badly versioned tags, so the newer tags won't\r\n  be \"overridden\" by the old broken ones.\r\n\r\nAn environment variable ``NVCHECKER_GITHUB_TOKEN`` can be set to a GitHub OAuth token in order to request more frequently than anonymously.\r\n\r\nCheck BitBucket\r\n---------------\r\nCheck `BitBucket <https://bitbucket.org/>`_ for updates. The version returned is in date format ``%Y%m%d``, e.g. ``20130701``.\r\n\r\nbitbucket\r\n  The bitbucket repository, with author, e.g. ``lilydjwg/dotvim``.\r\n\r\nbranch\r\n  Which branch to track? Default is the repository's default.\r\n\r\nuse_max_tag\r\n  Set this to ``true`` to check for the max tag on BitBucket. Will return the biggest one\r\n  sorted by ``pkg_resources.parse_version``.\r\n\r\nignored_tags\r\n  Ignore certain tags while computing the max tag. Tags are separate by\r\n  whitespaces. This option must be used together with ``use_max_tag``. This can\r\n  be useful to avoid some known badly versioned tags, so the newer tags won't\r\n  be \"overridden\" by the old broken ones.\r\n\r\nCheck GitCafe\r\n-------------\r\nCheck `GitCafe <https://gitcafe.com/>`_ for updates. The version returned is in date format ``%Y%m%d``, e.g. ``20130701``.\r\n\r\ngitcafe\r\n  The gitcafe repository, with author, e.g. ``Deepin/deepin-music``.\r\n\r\nbranch\r\n  Which branch to track? Default: ``master``.\r\n\r\nAnonymously only. Authorization is not supported yet.\r\n\r\nCheck GitLab\r\n-------------\r\nCheck `GitLab <https://gitlab.com/>`_ for updates. The version returned is in date format ``%Y%m%d``, e.g. ``20130701``.\r\n\r\ngitlab\r\n  The gitlab repository, with author, e.g. ``Deepin/deepin-music``.\r\n\r\nbranch\r\n  Which branch to track? Default: ``master``.\r\n\r\nuse_max_tag\r\n  Set this to ``true`` to check for the max tag on BitBucket. Will return the biggest one\r\n  sorted by ``pkg_resources.parse_version``.\r\n\r\nignored_tags\r\n  Ignore certain tags while computing the max tag. Tags are separate by\r\n  whitespaces. This option must be used together with ``use_max_tag``. This can\r\n  be useful to avoid some known badly versioned tags, so the newer tags won't\r\n  be \"overridden\" by the old broken ones.\r\n\r\nhost\r\n  Hostname for self-hosted GitLab instance.\r\n\r\ntoken\r\n  GitLab authorization token used to call the API. If not specified, an environment variable ``NVCHECKER_GITLAB_TOKEN_host`` must provide that token. The ``host`` part is the uppercased version of the ``host`` setting, with dots (``.``) and slashes (``/``) replaced by underscores (``_``), e.g. ``NVCHECKER_GITLAB_TOKEN_GITLAB_COM``.\r\n\r\nAuthenticated only.\r\n\r\nCheck PyPI\r\n----------\r\nCheck `PyPI <https://pypi.python.org/>`_ for updates.\r\n\r\npypi\r\n  The name used on PyPI, e.g. ``PySide``.\r\n\r\nCheck RubyGems\r\n--------------\r\nCheck `RubyGems <https://rubygems.org/>`_ for updates.\r\n\r\ngems\r\n  The name used on RubyGems, e.g. ``sass``.\r\n\r\nCheck NPM Registry\r\n------------------\r\nCheck `NPM Registry <https://registry.npmjs.org/>`_ for updates.\r\n\r\nnpm\r\n  The name used on NPM Registry, e.g. ``coffee-script``.\r\n\r\nCheck Hackage\r\n-------------\r\nCheck `Hackage <https://hackage.haskell.org/>`_ for updates.\r\n\r\nhackage\r\n  The name used on Hackage, e.g. ``pandoc``.\r\n\r\nCheck CPAN\r\n--------------\r\nCheck `MetaCPAN <https://metacpan.org/>`_ for updates.\r\n\r\ncpan\r\n  The name used on CPAN, e.g. ``YAML``.\r\n\r\nCheck Packagist\r\n---------------\r\nCheck `Packagist <https://packagist.org/>`_ for updates.\r\n\r\npackagist\r\n  The name used on Packagist, e.g. ``monolog/monolog``.\r\n\r\nCheck Local Pacman Database\r\n---------------------------\r\nThis is used when you run ``nvchecker`` on an Arch Linux system and the program always keeps up with a package in your configured repositories for `Pacman`_.\r\n\r\npacman\r\n  The package name to reference to.\r\n\r\nstrip-release\r\n  Strip the release part.\r\n\r\nCheck Arch Linux official packages\r\n----------------------------------\r\nThis enables you to track the update of `Arch Linux official packages <https://www.archlinux.org/packages/>`_, without needing of pacman and an updated local Pacman databases.\r\n\r\narchpkg\r\n  Name of the Arch Linux package.\r\n\r\nstrip-release\r\n  Strip the release part.\r\n\r\nCheck Google Code (hg repository)\r\n---------------------------------\r\nCheck a mercurial (hg) repository on `Google Code <https://code.google.com/>`_ for updates. The version returned is in date format ``%Y%m%d``, e.g. ``20130701``.\r\n\r\ngcode_hg\r\n  The name used on Google Code, e.g. ``chromium-compact-language-detector``.\r\n\r\nCheck Google Code (svn repository)\r\n----------------------------------\r\nCheck a subversion (svn) repository on `Google Code <https://code.google.com/>`_ for updates. The version returned is the svn resivion number.\r\n\r\ngcode_svn\r\n  The name used on Google Code, e.g. ``cld2``.\r\n\r\nManually updating\r\n-----------------\r\nThis enables you to manually specify the version (maybe because you want to approve each release before it gets to the script).\r\n\r\nmanual\r\n  The version string.\r\n\r\nVersion Control System (VCS) (git, hg, svn, bzr)\r\n------------------------------------------------\r\nCheck a VCS repo for new commits. The version returned is currently not related to the version of the software and will increase whenever the referred VCS branch changes. This is mainly for Arch Linux.\r\n\r\nvcs\r\n  The url of the remote VCS repo, using the same syntax with a VCS url in PKGBUILD (`Pacman`_'s build script). The first VCS url found in the source array of the PKGBUILD will be used if this is left blank. (Note: for a blank ``vcs`` setting to work correctly, the PKGBUILD has to be in a directory with the name of the software under the path where nvchecker is run. Also, all the commands, if any, needed when sourcing the PKGBUILD need to be installed).\r\n\r\nuse_max_tag\r\n  Set this to ``true`` to check for the max tag. Currently only supported for ``git``.\r\n  This option returns the biggest tag sorted by ``pkg_resources.parse_version``.\r\n\r\nignored_tags\r\n  Ignore certain tags while computing the max tag. Tags are separate by\r\n  whitespaces. This option must be used together with ``use_max_tag``. This can\r\n  be useful to avoid some known badly versioned tags, so the newer tags won't\r\n  be \"overridden\" by the old broken ones.\r\n\r\nOther\r\n-----\r\nMore to come. Send me a patch or pull request if you can't wait and have written one yourself :-)\r\n\r\nBugs\r\n====\r\n* Finish writing results even on Ctrl-C or other interruption.\r\n\r\nFootnotes\r\n=========\r\n.. [v0.3] Note: with nvchecker <= 0.2, there are one more colon each line. You can use ``sed -i 's/://' FILES...`` to remove them.\r\n.. [v0.4] This is added in version 0.4, and old command-line options are removed.\r\n\r\n.. _Pacman: https://wiki.archlinux.org/index.php/Pacman",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/lilydjwg/nvchecker",
    "keywords": "new version build check",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "nvchecker",
    "platform": "any",
    "project_url": "https://pypi.org/project/nvchecker/",
    "release_url": "https://pypi.org/project/nvchecker/0.4.2/",
    "requires_python": null,
    "summary": "New version checker for software",
    "version": "0.4.2"
  },
  "releases": {
    "0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fa054b17fa48e9e5b0b6c5d0a51ccae8",
          "sha256": "4790140cd6eb6270daa95a3448b842a7b8794e393d8fbfbd6e55e6a94c394b54"
        },
        "downloads": 1725,
        "filename": "nvchecker-0.4.2.tar.gz",
        "has_sig": true,
        "md5_digest": "fa054b17fa48e9e5b0b6c5d0a51ccae8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18367,
        "upload_time": "2016-02-29T10:11:01",
        "url": "https://files.pythonhosted.org/packages/90/cb/790dfbad781cdd26ef7f7428180cb2951b841c6e8026f7927156c2605dfe/nvchecker-0.4.2.tar.gz"
      }
    ],
    "0.4.2": []
  },
  "urls": []
}