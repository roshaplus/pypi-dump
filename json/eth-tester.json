{
  "info": {
    "author": "Piper Merriam",
    "author_email": "pipermerriam@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "Ethereum Tester\n===============\n\n|Join the chat at https://gitter.im/ethereum/eth-tester|\n\n|Build Status|\n\nTools for testing ethereum based applications.\n\nInstallation\n------------\n\n.. code:: sh\n\n    pip install eth-tester\n\nQuick Start\n-----------\n\n.. code:: python\n\n    >>> from eth_tester import EthereumTester\n    >>> t = EthereumTester()\n    >>> t.get_accounts()\n    ('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n     '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e',\n     '0xDCEceAF3fc5C0a63d195d69b1A90011B7B19650D',\n     '0x598443F1880Ef585B21f1d7585Bd0577402861E5',\n     '0x13cBB8D99C6C4e0f2728C7d72606e78A29C4E224',\n     '0x77dB2BEBBA79Db42a978F896968f4afCE746ea1F',\n     '0x24143873e0E0815fdCBcfFDbe09C979CbF9Ad013',\n     '0x10A1c1CB95c92EC31D3f22C66Eef1d9f3F258c6B',\n     '0xe0FC04FA2d34a66B779fd5CEe748268032a146c0',\n     '0x90F0B1EBbbA1C1936aFF7AAf20a7878FF9e04B6c')\n    >>> t.get_balance('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n    1000000000000000000000000\n    >>> t.send_transaction({'from': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1', 'to': '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e', 'gas': 21000, 'value': 1})\n    '0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25'\n    >>> t.get_transaction_by_hash(0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25')\n    {'block_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n     'block_number': 0,\n     'data': '0x',\n     'from': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n     'gas': 21000,\n     'gas_price': 1,\n     'hash': '0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25',\n     'nonce': 0,\n     'r': 114833774457827084417823702749930473879683934597320921824765632039428214735160,\n     's': 52192522150044217242428968890330558187037131043598164958282684822175843828481,\n     'to': '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e',\n     'transaction_index': 0,\n     'v': 27,\n     'value': 1}\n\n    >>> t.get_transaction_receipt('0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25')\n    {'block_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n     'block_number': 0,\n     'contract_address': None,\n     'cumulative_gas_used': 21000,\n     'gas_used': 21000,\n     'logs': (),\n     'transaction_hash': '0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25',\n     'transaction_index': 0}\n\nDevelopment\n-----------\n\n.. code:: sh\n\n    pip install -e . -r requirements-dev.txt\n\nRunning the tests\n~~~~~~~~~~~~~~~~~\n\nYou can run the tests with:\n\n.. code:: sh\n\n    py.test tests\n\nOr you can install ``tox`` to run the full test suite.\n\nReleasing\n~~~~~~~~~\n\nPandoc is required for transforming the markdown README to the proper\nformat to render correctly on pypi.\n\nFor Debian-like systems:\n\n::\n\n    apt install pandoc\n\nOr on OSX:\n\n.. code:: sh\n\n    brew install pandoc\n\nTo release a new version:\n\n.. code:: sh\n\n    bumpversion $$VERSION_PART_TO_BUMP$$\n    git push && git push --tags\n    make release\n\nHow to bumpversion\n^^^^^^^^^^^^^^^^^^\n\nThe version format for this repo is ``{major}.{minor}.{patch}`` for\nstable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable\n(``stage`` can be alpha or beta).\n\nTo issue the next version in line, use bumpversion and specify which\npart to bump, like ``bumpversion minor`` or ``bumpversion devnum``.\n\nIf you are in a beta version, ``bumpversion stage`` will switch to a\nstable.\n\nTo issue an unstable version when the current version is stable, specify\nthe new version explicitly, like\n``bumpversion --new-version 4.0.0-alpha.1 devnum``\n\nDocumentation\n=============\n\nInput and output data formats\n-----------------------------\n\nThe ethereum tester library strictly enforces the following input\nformats and types.\n\n-  Hexidecimal values **must** be text (not byte) strings. The ``0x``\n   prefix is optional.\n-  Any address which contains mixed-case alpha characters will be\n   validated as a checksummed address as specified by\n   `EIP-55 <https://github.com/ethereum/EIPs/blob/master/EIPS/eip-55.md>`__\n-  32-byte hashes **must** be hexidecimal encoded.\n-  Numeric values **must** be in their integer representation.\n\nSimilarly, ethereum tester ensures that return values conform to similar\nrules.\n\n-  32-byte hashes will be returned in their hexidecimal encoded\n   representation.\n-  Addresses will be returned in their hexidecimal representation and\n   EIP55 checksummed.\n-  Numeric values will be returned as integers.\n\nBlock Numbers\n-------------\n\nAny ``block_number`` parameter will accept the following string values.\n\n-  ``'latest'``: for the latest mined block.\n-  ``'pending'``: for the current un-mined block.\n-  ``'earliest'``: for the genesis block.\n\n    Note: These **must** be text strings (not byte stringS)\n\n``eth_tester.EthereumTester``\n-----------------------------\n\nAPI\n~~~\n\nInstantiation\n~~~~~~~~~~~~~\n\n-  ``eth_tester.EthereumTester(backend=None, validator=None, normalizer=None, auto_mine_transactions=True, fork_blocks=None)``\n\nThe ``EthereumTester`` object is the sole API entrypoint. Instantiation\nof this object accepts the following parameters.\n\n-  ``backend``: The chain backend being used. See the `chain\n   backends <#chain-backends>`__\n-  ``validator``: The validator to used. See the\n   `validators <#validation>`__\n-  ``normalizer``: The normalizer to used. See the\n   `normalizers <#normalization>`__\n-  ``auto_mine_transactions``: If *truthy* transactions will be\n   automatically mined at the time they are submitted. See\n   ```enable_auto_mine_transactions`` <#api-enable_auto_mine_transactions>`__\n   and\n   ```disable_auto_mine_transactions`` <#api-disable_auto_mine_transactions>`__.\n-  ``fork_blocks``: configures which block numbers the various network\n   hard fork rules will be activated. See `fork-rules <#fork-rules>`__\n\n.. code:: python\n\n    >>> from eth_tester import EthereumTester\n    >>> t = EthereumTester()\n    >>> t\n    <eth_tester.main.EthereumTester at 0x102255710>\n\nFork Rules\n~~~~~~~~~~\n\nEthereum tester supports the following hard forks.\n\n-  Homestead\n-  DAO\n-  Anti DOS\n-  State Clearing\n\nBy default, all forks will be active at the genesis block (block 0).\n\nManual configuration and retrieval of fork rules can be done with the\nfollowing API.\n\n``EthereumTester.set_fork_block(fork_name, fork_block)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nSets the fork rules for the fork denoted by ``fork_name`` to activate at\n``fork_block``.\n\n``EthereumTester.get_fork_block(fork_name)``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReturns the block number on which the named fork will activate.\n\nThe ``fork_name`` parameter must be one of the following strings.\n\n-  ``\"FORK_HOMESTEAD\"``\n-  ``\"FORK_DAO\"``\n-  ``\"FORK_ANTI_DOS\"``\n-  ``\"FORK_STATE_CLEANUP\"``\n\nTime Travel\n~~~~~~~~~~~\n\nThe chain can only time travel forward in time.\n\n #### ``EthereumTester.time_travel(timestamp)``\n\nThe ``timestamp`` must be an integer, strictly greater than the current\ntimestamp of the latest block.\n\n    Note: Time traveling will result in a new block being mined.\n\nMining\n~~~~~~\n\nManually mining blocks can be done with the following API. The\n``coinbase`` parameter of these methods **must** be a hexidecimal\nencoded address.\n\n #### ``EthereumTester.mine_blocks(num_blocks=1, coinbase=None)``\n\nMines ``num_blocks`` new blocks, returning an iterable of the newly\nmined block hashes.\n\n #### ``EthereumTester.mine_block(coinbase=None)``\n\nMines a single new block, returning the mined block's hash.\n\n #### Auto-mining transactions\n\nBy default all transactions are mined immediately. This means that each\ntransaction you send will result in a new block being mined, and that\nall blocks will only ever have at most a single transaction. This\nbehavior can be controlled with the following methods.\n\n #### ``EthereumTester.enable_auto_mine_transactions()``\n\nTurns on auto-mining of transactions.\n\n #### ``EthereumTester.disable_auto_mine_transactions()``\n\nTurns **off** auto-mining of transactions.\n\nAccounts\n~~~~~~~~\n\nThe following API can be used to interact with account data. The\n``account`` parameter in these methods **must** be a hexidecimal encode\naddress.\n\n ``EthereumTester.get_accounts()``\n\nReturns an iterable of the accounts that the tester knows about. All\naccounts in this list will be EIP55 checksummed.\n\n.. code:: python\n\n    >>> t.get_accounts()\n    ('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n     '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e',\n     ...\n     '0x90F0B1EBbbA1C1936aFF7AAf20a7878FF9e04B6c')\n\n #### ``EthereumTester.add_account(private_key, password=None)``\n\nAdds a new account for the given private key. Returns the hex encoded\naddress of the added account.\n\n.. code:: python\n\n    >>> t.add_account('0x58d23b55bc9cdce1f18c2500f40ff4ab7245df9a89505e9b1fa4851f623d241d')\n    '0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd'\n\nBy default, added accounts are unlocked and do not have a password. If\nyou would like to add an account which has a password, you can supply\nthe password as the second parameter.\n\n.. code:: python\n\n    >>> t.add_account('0x58d23b55bc9cdce1f18c2500f40ff4ab7245df9a89505e9b1fa4851f623d241d', 'my-secret')\n    '0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd'\n\n ####\n``EthereumTester.unlock_account(account, password, unlock_seconds=None)``\n\nUnlocks the given account if the provided password matches.\n\nRaises a ``ValidationError`` if:\n\n-  The account is not known.\n-  The password does not match.\n-  The account was created without a password.\n\n.. code:: python\n\n    >>> t.unlock_account('0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd', 'my-secret')\n\nBy default, accounts will be unlocked indefinitely. You can however\nunlock an account for a specified amount of time by providing the\ndesired duration in seconds.\n\n.. code:: python\n\n    # unlock for 1 hour.\n    >>> t.unlock_account('0xdc544d1aa88ff8bbd2f2aec754b1f1e99e1812fd', 'my-secret', 60 * 60)\n\n #### ``EthereumTester.lock_account(account)``\n\nLocks the provide account.\n\nRaises a ``ValidationError`` if:\n\n-  The account is not known\n-  The account does not have a password.\n\n #### ``EthereumTester.get_balance(account) -> integer``\n\nReturns the balance, in wei, for the provided account.\n\n.. code:: python\n\n    >>> t.get_balance('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n    1000004999999999999999999\n\n #### ``EthereumTester.get_nonce(account) -> integer``\n\nReturns the nonce for the provided account.\n\n.. code:: python\n\n    >>> t.get_nonce('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n    1\n\n #### ``EthereumTester.get_code(account) -> hex string``\n\nReturns the code for the given account.\n\n.. code:: python\n\n    >>> t.get_code('0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1')\n    \"0x\"\n\nBlocks, Transactions, and Receipts\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n ####\n``EthereumTester.get_transaction_by_hash(transaction_hash) -> transaction-object``\n\nReturns the transaction for the given hash, raising a\n```TransactionNotFound`` <#errors-TransactionNotFound>`__ exception if\nthe transaction cannot be found.\n\n.. code:: python\n\n    >>> t.get_transaction_by_hash('0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25')\n    {'block_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n     'block_number': 0,\n     'hash': '0x140c1da1370a908e4c0f7c6e33bb97182011707c6a9aff954bef1084c8a48b25',\n     'transaction_index': 0,\n     'from': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n     'to': '0x7d577a597B2742b498Cb5Cf0C26cDCD726d39E6e',\n     'value': 1,\n     'gas': 21000,\n     'gas_price': 1,\n     'nonce': 0,\n     'data': '0x',\n     'v': 27,\n     'r': 114833774457827084417823702749930473879683934597320921824765632039428214735160,\n     's': 52192522150044217242428968890330558187037131043598164958282684822175843828481}\n\n    Note: For unmined transaction, ``transaction_index``,\n    ``block_number`` and ``block_hash`` will all be ``None``.\n\n ####\n``EthereumTester.get_block_by_number(block_number, full_transactions=False) -> block-object``\n\nReturns the block for the given ``block_number``. See `block\nnumbers <#block-numbers>`__ for named block numbers you can use. If\n``full_transactions`` is truthy, then the transactions array will be\npopulated with full transaction objects as opposed to their hashes.\n\nRaises ```BlockNotFound`` <#errors-BlockNotFound>`__ if a block for the\ngiven number cannot be found.\n\n.. code:: python\n\n    >>> t.get_block_by_numbers(1)\n    {'difficulty': 131072,\n     'extra_data': '0x0000000000000000000000000000000000000000000000000000000000000000',\n     'gas_limit': 999023468,\n     'gas_used': 0,\n     'hash': '0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd',\n     'logs_bloom': 0,\n     'miner': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n     'nonce': '0x0000000000000000',\n     'number': 1,\n     'parent_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n     'sha3_uncles': '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n     'size': 472,\n     'state_root': '0xbd92123803c9e71018617ce3dc6cbbdf130973bdbd0e14ff340c57c8a835b74b',\n     'timestamp': 1410973360,\n     'total_difficulty': 262144,\n     'transactions': (),\n     'transactions_root': '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n     'uncles': ()}\n\n ####\n``EthereumTester.get_block_by_hash(block_hash, full_transactions=True) -> block-object``\n\nReturns the block for the given ``block_hash``. The\n``full_transactions`` parameter behaves the same as in\n```get_block_by_number`` <#api-get_block_by_number>`__.\n\nRaises ```BlockNotFound`` <#errors-BlockNotFound>`__ if a block for the\ngiven hash cannot be found.\n\n.. code:: python\n\n    >>> t.get_block_by_hash('0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd')\n    {'difficulty': 131072,\n     'extra_data': '0x0000000000000000000000000000000000000000000000000000000000000000',\n     'gas_limit': 999023468,\n     'gas_used': 0,\n     'hash': '0x0f50c8ea0f67ce0b7bff51ae866159edc443bde87de2ab26010a15b777244ddd',\n     'logs_bloom': 0,\n     'miner': '0x82A978B3f5962A5b0957d9ee9eEf472EE55B42F1',\n     'nonce': '0x0000000000000000',\n     'number': 1,\n     'parent_hash': '0x89c03ecb6bbf3ff533b04a663fa98d59c9d985de806d1a9dcafaad7c993ee6e8',\n     'sha3_uncles': '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n     'size': 472,\n     'state_root': '0xbd92123803c9e71018617ce3dc6cbbdf130973bdbd0e14ff340c57c8a835b74b',\n     'timestamp': 1410973360,\n     'total_difficulty': 262144,\n     'transactions': (),\n     'transactions_root': '0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421',\n     'uncles': ()}\n\n #### ``EthereumTester.get_transaction_receipt(transaction_hash)``\n\nReturns the receipt for the given ``transaction_hash``, raising\n```TransactionNotFound`` <#errors-TransactionNotFound>`__ if no\ntransaction can be found for the given hash.\n\n.. code:: python\n\n    >>> t.get_transaction_receipt('0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b')\n     {'block_hash': '0x878f779d8bb25b25fb78fc16b8d64d70a5961310ef1689571aec632e9424290c',\n     'block_number': 2,\n     'contract_address': None,\n     'cumulative_gas_used': 23154,\n     'gas_used': 23154,\n     'logs': ({'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\n       'block_hash': '0x878f779d8bb25b25fb78fc16b8d64d70a5961310ef1689571aec632e9424290c',\n       'block_number': 2,\n       'data': '0x',\n       'log_index': 0,\n       'topics': (\n        '0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n        '0x0000000000000000000000000000000000000000000000000000000000003039'),\n       'transaction_hash': '0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b',\n       'transaction_index': 0,\n       'type': 'mined'},),\n     'transaction_hash': '0x9a7cc8b7accf54ecb1901bf4d0178f28ca457bb9f9c245692c0ca8fabef08d3b',\n     'transaction_index': 0}\n\n-  Receipts for unmined transactions will have all of ``block_hash``,\n   ``block_number`` and ``transaction_index`` set to ``None``.\n-  Receipts for transactions which create a contract will have the\n   created contract address in the ``contract_address`` field.\n\nTransaction Sending\n~~~~~~~~~~~~~~~~~~~\n\nA transaction is a formatted as a dictionary with the following keys and\nvalues.\n\n-  ``from``: The address of the account sending the transaction\n   (hexidecimal string).\n-  ``to``: The address of the account the transaction is being sent to.\n   Empty string should be used to trigger contract creation (hexidecimal\n   string).\n-  ``gas``: Sets the gas limit for transaction execution (integer).\n-  ``gas_price``: Sets the price per unit of gas in wei that will be\n   paid for transaction execution (integer).\n-  ``value``: The amount of ether in wei that should be sent with the\n   transaction (integer).\n-  ``data``: The data for the transaction (hexidecimal string).\n\nMethods\n^^^^^^^\n\n ####\n``EthereumTester.send_transaction(transaction) -> transaction_hash``\n\nSends the provided ``transaction`` object, returning the\n``transaction_hash`` for the sent transaction.\n\n #### ``EthereumTester.call(transaction, block_number='latest')``\n\nExecutes the provided ``transaction`` object at the evm state from the\nblock denoted by the ``block_number`` parameter, returning the resulting\nbytes return value from the evm.\n\n #### ``EthereumTester.estimate_gas(transaction)``\n\nExecutes the provided ``transaction`` object, measuring and returning\nthe gas consumption.\n\nLogs and Filters\n~~~~~~~~~~~~~~~~\n\n #### ``EthereumTester.create_block_filter() -> integer``\n\nCreates a new filter for newly mined blocks. Returns the ``filter_id``\nwhich can be used to retrieve the block hashes for the mined blocks.\n\n.. code:: python\n\n    >>> filter_id = t.create_block_filter()\n    >>> filter_id = t.create_block_filter()\n    >>> t.mine_blocks(3)\n    >>> t.get_only_filter_changes(filter_id)\n    ('0x07004287f82c1a7ab15d7b8baa03ac14d7e9167ab74e47e1dc4bd2213dd18431',\n     '0x5e3222c506585e1202da08c7231afdc5e472c777c245b822f44f141d335c744a',\n     '0x4051c3ba3dcca95da5db1be38e44f5b47fd1a855ba522123e3254fe3f8e271ea')\n    >>> t.mine_blocks(2)\n    >>> t.get_only_filter_changes(filter_id)\n    ('0x6649c3a7cb3c7ede3a4fd10ae9dd63775eccdafe39ace5f5a9ae81d360089fba',\n     '0x04890a08bca0ed2f1496eb29c5dc7aa66014c85377c6d9d9c2c315f85204b39c')\n    >>> t.get_all_filter_logs(filter_id)\n    ('0x07004287f82c1a7ab15d7b8baa03ac14d7e9167ab74e47e1dc4bd2213dd18431',\n     '0x5e3222c506585e1202da08c7231afdc5e472c777c245b822f44f141d335c744a',\n     '0x4051c3ba3dcca95da5db1be38e44f5b47fd1a855ba522123e3254fe3f8e271ea',\n     '0x6649c3a7cb3c7ede3a4fd10ae9dd63775eccdafe39ace5f5a9ae81d360089fba',\n     '0x04890a08bca0ed2f1496eb29c5dc7aa66014c85377c6d9d9c2c315f85204b39c')\n\n #### ``EthereumTester.create_pending_transaction_filter() -> integer``\n\nCreates a new filter for pending transactions. Returns the ``filter_id``\nwhich can be used to retrieve the transaction hashes for the pending\ntransactions.\n\n.. code:: python\n\n    >>> filter_id = t.create_pending_transaction_filter()\n    >>> t.send_transaction({...})\n    '0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566'\n    >>> t.send_transaction({...})\n    '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505'\n    >>> t.get_only_filter_changes(filter_id)\n    ('0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566',\n     '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505')\n    >>> t.send_transaction({...})\n    '0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a'\n    >>> t.get_only_filter_changes(filter_id)\n    ('0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a',)\n    >>> t.get_all_filter_logs(filter_id)\n    ('0x07f20bf9586e373ac914a40e99119c4932bee343d89ba852ccfc9af1fd541566',\n     '0xff85f7751d132b66c03e548e736f870797b0f24f3ed41dfe5fc628eb2cbc3505',\n     '0xb07801f7e8b1cfa52b64271fa2673c4b8d64cc21cdbc5fde51d5858c94c2d26a')\n\n ####\n``EthereumTester.create_log_filter(from_block=None, to_block=None, address=None, topics=None) -> integer``\n\nCreates a new filter for logs produced by transactions. The parameters\nfor this function can be used to filter the log entries.\n\n.. code:: python\n\n    >>> filter_id = t.create_log_filter()\n    >>> t.send_transaction({...})  # something that produces a log entry\n    '0x728bf75fc7d23845f328d2223df7fe9cafc6e7d23792457b625d5b60d2b22b7c'\n    >>> t.send_transaction({...})  # something that produces a log entry\n    '0x63f5b381ffd09940ce22c45a3f4e163bd743851cb6b4f43771fbf0b3c14b2f8a'\n    >>> t.get_only_filter_changes(filter_id)\n    ({'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\n      'block_hash': '0x68c0f318388003b652eae334efbed8bd345c469bd0ca77469183fc9693c23e13',\n      'block_number': 11,\n      'data': '0x',\n      'log_index': 0,\n      'topics': ('0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n       '0x0000000000000000000000000000000000000000000000000000000000003039'),\n      'transaction_hash': '0x728bf75fc7d23845f328d2223df7fe9cafc6e7d23792457b625d5b60d2b22b7c',\n      'transaction_index': 0,\n      'type': 'mined'},\n     {'address': '0xd6F084Ee15E38c4f7e091f8DD0FE6Fe4a0E203Ef',\n      'block_hash': '0x07d7e46be6f9ba53ecd4323fb99ec656e652c4b14f4b8e8a244ee7f997464725',\n      'block_number': 12,\n      'data': '0x',\n      'log_index': 0,\n      'topics': ('0xf70fe689e290d8ce2b2a388ac28db36fbb0e16a6d89c6804c461f65a1b40bb15',\n       '0x0000000000000000000000000000000000000000000000000000000000010932'),\n      'transaction_hash': '0x63f5b381ffd09940ce22c45a3f4e163bd743851cb6b4f43771fbf0b3c14b2f8a',\n      'transaction_index': 0,\n      'type': 'mined'})\n\nSee `the filtering guide <#guide-filtering>`__ for detailed information\non how to use filters.\n\n #### ``EthereumTester.delete_filter(filter_id)``\n\nRemoves the filter for the provide ``filter_id``. If no filter is found\nfor the given ``filter_id``, raises\n```FilterNotFound`` <#errors-FilterNotFound>`__.\n\n ####\n``EthereumTester.get_only_filter_changes(filter_id) -> transaction_hash or block_hash or log_entry``\n\nReturns all new values for the provided ``filter_id`` that have not\npreviously been returned through this API. Raises\n```FilterNotFound`` <#errors-FilterNotFound>`__ if no filter is found\nfor the given ``filter_id``.\n\n ####\n``EthereumTester.get_all_filter_logs(filter_id) -> transaction_hash or block_hash or log_entry``\n\nReturns all values for the provided ``filter_id``. Raises\n```FilterNotFound`` <#errors-FilterNotFound>`__ if no filter is found\nfor the given ``filter_id``.\n\nSnapshots and Resetting\n~~~~~~~~~~~~~~~~~~~~~~~\n\n #### ``EthereumTester.take_snapshot() -> snapshot_id``\n\nTakes a snapshot of the current chain state and returns the snapshot id.\n\n #### ``EthereumTester.revert_to_snapshot(snapshot_id)``\n\nReverts the chain to the chain state associated with the given\n``snapshot_id``. Raises\n```SnapshotNotFound`` <#errors-SnapshotNotFound>`__ if no snapshot is\nknow for the given id.\n\nErrors and Exceptions\n~~~~~~~~~~~~~~~~~~~~~\n\n #### ``eth_tester.exceptions.TransactionNotFound``\n\nRaised in cases where a transaction cannot be found for the provided\ntransaction hash.\n\n #### ``eth_tester.exceptions.BlockNotFound``\n\nRaised in cases where a block cannot be found for either a provided\nnumber or hash.\n\n #### ``eth_tester.exceptions.FilterNotFound``\n\nRaised in cases where a filter cannot be found for the provided filter\nid.\n\n #### ``eth_tester.exceptions.SnapshotNotFound``\n\nRaised in cases where a snapshot cannot be found for the provided\nsnapshot id.\n\nBackends\n--------\n\nEthereum tester is written using a pluggable backend system.\n\nBackend Dependencies\n~~~~~~~~~~~~~~~~~~~~\n\nEthereum tester does not install any of the dependencies needed to use\nthe various backends by default. You can however install ethereum tester\nwith the necessary dependencies using the following method.\n\n.. code:: bash\n\n    $ pip install eth-tester[<backend-name>]\n\nYou should replace ``<backend-name>`` with the name of the desired\ntesting backend. Available backends are:\n\n-  ``pyethereum16``: `PyEthereum\n   v1.6.x <https://pypi.python.org/pypi/ethereum/1.6.1>`__\n-  ``pyethereum21``: `PyEthereum\n   v2.1.0+ <https://pypi.python.org/pypi/ethereum>`__\n-  ``py-evm``: `PyEVM (alpha) <https://pypi.python.org/pypi/py-evm>`__\n   **(experimental)**\n\nSelecting a Backend\n~~~~~~~~~~~~~~~~~~~\n\nYou can select which backend in a few different ways.\n\nThe most direct way is to manually pass in the backend instance you wish\nto use.\n\n.. code:: python\n\n    >>> from eth_tester import EthereumTester\n    >>> from eth_tester.backends.pyethereum import PyEthereum16Backend\n    >>> t = EthereumTester(backend=PyEthereum16Backend())\n\nEthereum tester also supports configuration using the environment\nvariable ``ETHEREUM_TESTER_CHAIN_BACKEND``. This should be set to the\nimport path for the backend class you wish to use.\n\nAvailable Backends\n~~~~~~~~~~~~~~~~~~\n\nEthereum tester can be used with the following backends.\n\n-  PyEthereum 1.6.x (default)\n-  PyEthereum 2.0.0+ (experimental)\n-  PyEVM (experimental)\n-  MockBackend\n\nMockBackend\n^^^^^^^^^^^\n\nThis backend has limited functionality. It cannot perform any VM\ncomputations. It mocks out all of the objects and interactions.\n\n.. code:: python\n\n    >>> from eth_tester import MockBackend\n    >>> t = EthereumTester(MockBackend())\n\nPyEthereum 1.6.x\n^^^^^^^^^^^^^^^^\n\nUses the PyEthereum library at version ``v1.6.x``\n\n.. code:: python\n\n    >>> from eth_tester import PyEthereum16Backend\n    >>> t = EthereumTester(PyEthereum16Backend())\n\nPyEthereum 2.0.0+\n^^^^^^^^^^^^^^^^^\n\nUses the PyEthereum library at version ``v2.0.0+``\n\n.. code:: python\n\n    >>> from eth_tester import PyEthereum21Backend\n    >>> t = EthereumTester(PyEthereum21Backend())\n\nPyEVM (experimental)\n^^^^^^^^^^^^^^^^^^^^\n\n    **WARNING** Py-EVM is experimental and should not be relied on for\n    mission critical testing at this stage.\n\nUses the experimental Py-EVM library.\n\n.. code:: python\n\n    >>> from eth_tester import PyEVMBackend\n    >>> t = EthereumTester(PyEVMBackend())\n\nPyEthereum 2.0.x (under development)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n    Under development\n\nImplementing Custom Backends\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe base class ``eth_tester.backends.base.BaseChainBackend`` is the\nrecommended base class to begin with if you wish to write your own\nbackend.\n\nDetails on implementation are beyond the scope of this document.\n\nData Formats\n------------\n\nEthereum tester uses two formats for data.\n\n-  The *normal* format is the data format the is expected as input\n   arguments to all ``EthereumTester`` methods as well as the return\n   types from all method calls.\n-  The *canonical* format is the data format that is used internally by\n   the backend class.\n\nEthereum tester enforces strict validation rules on these formats.\n\nCanonical Formats\n~~~~~~~~~~~~~~~~~\n\nThe canonical format is intended for low level handling by backends.\n\n-  32 byte hashes: ``bytes`` of length 32\n-  Arbitrary length strings: ``bytes``\n-  Addresses: ``bytes`` of length 20\n-  Integers: ``int``\n-  Array Types: ``tuple``\n\nNormal Formats\n~~~~~~~~~~~~~~\n\nThe normal format is intended for use by end users.\n\n-  32 byte hashes: ``0x`` prefixed hexidecimal encoded text strings (not\n   byte strings)\n-  Arbitrary length strings: ``0x`` prefixed hexidecimal encoded text\n   strings (not byte strings)\n-  Addresses: ``0x`` prefixed and EIP55 checksummed hexidecimal encoded\n   text strings (not byte strings)\n-  Integers: ``int``\n-  Array Types: ``tuple``\n\nNormalization and Validation\n----------------------------\n\n    Beware! Here there be dragons... This section of the documentation\n    is only relevant if you intend to build tooling on top of this\n    library.\n\nThe ethereum tester provides strong guarantees that backends can be\nswapped out seamlessly without effecting the data formats of both the\ninput arguments and return values. This is accomplished using a two step\nprocess of strict *normalization* and *validation*.\n\nAll inputs to the methods of the ``EthereumTester`` are first validated\nthen normalized to a *canonical* format. Return values are put through\nthis process as well, first validating the data returned by the backend,\nand then normalizing it from the *canonical* format to the *normal* form\nbefore being returned.\n\n ### Normalization\n\nThe ``EthereumTester`` delegates normalization to whatever\n``normalizer`` was passed in during instantiation. If no value was\nprovided, the default normalizer will be used from\n``eth_tester.normalization.default.DefaultNormalizer``.\n\nThe specifics of this object are beyong the scope of this document.\n\n ### Validation\n\nThe ``EthereumTester`` delegates validation to whatever ``validator``\nwas passed in during instantiation. If no value was provided, the\ndefault validator will be used from\n``eth_tester.validation.default.DefaultValidator``.\n\nThe specifics of this object are beyong the scope of this document.\n\nUse with Web3.py\n================\n\nSee the `web3.py\ndocumentation <http://web3py.readthedocs.io/en/latest/>`__ for\ninformation on the ``EthereumTester`` provider which integrates with\nthis library.\n\nDevelopment\n===========\n\n.. code:: sh\n\n    pip install -e . -r requirements-dev.txt\n\nRunning the tests\n-----------------\n\nYou can run the tests with:\n\n.. code:: sh\n\n    py.test tests\n\nOr you can install ``tox`` to run the full test suite.\n\nReleasing\n---------\n\nPandoc is required for transforming the markdown README to the proper\nformat to render correctly on pypi.\n\nFor Debian-like systems:\n\n::\n\n    apt install pandoc\n\nOr on OSX:\n\n.. code:: sh\n\n    brew install pandoc\n\nTo release a new version:\n\n.. code:: sh\n\n    bumpversion $$VERSION_PART_TO_BUMP$$\n    git push && git push --tags\n    make release\n\nHow to bumpversion\n~~~~~~~~~~~~~~~~~~\n\nThe version format for this repo is ``{major}.{minor}.{patch}`` for\nstable, and ``{major}.{minor}.{patch}-{stage}.{devnum}`` for unstable\n(``stage`` can be alpha or beta).\n\nTo issue the next version in line, use bumpversion and specify which\npart to bump, like ``bumpversion minor`` or ``bumpversion devnum``.\n\nIf you are in a beta version, ``bumpversion stage`` will switch to a\nstable.\n\nTo issue an unstable version when the current version is stable, specify\nthe new version explicitly, like\n``bumpversion --new-version 4.0.0-alpha.1 devnum``\n\n.. |Join the chat at https://gitter.im/ethereum/eth-tester| image:: https://badges.gitter.im/ethereum/eth-tester.svg\n   :target: https://gitter.im/ethereum/eth-tester\n.. |Build Status| image:: https://travis-ci.org/ethereum/eth-tester.png\n   :target: https://travis-ci.org/ethereum/eth-tester\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/ethereum/eth-tester",
    "keywords": "ethereum",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eth-tester",
    "platform": "",
    "project_url": "https://pypi.org/project/eth-tester/",
    "release_url": "https://pypi.org/project/eth-tester/0.1.0b16/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Tools for testing Ethereum applications.",
    "version": "0.1.0b16"
  },
  "releases": {
    "0.1.0b10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "3bbc409aa76198ea04704180b8599fb2",
          "sha256": "2982545f1af58f199557ef6e7e0e3d9ae845dbc66d2d606092f90633a9cfe7b9"
        },
        "downloads": -1,
        "filename": "eth_tester-0.1.0b10-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "3bbc409aa76198ea04704180b8599fb2",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 56568,
        "upload_time": "2018-01-02T19:33:53",
        "url": "https://files.pythonhosted.org/packages/b6/45/490d01fa513c468fcbabe19c75b3685f597f709ba290d2201e1e88b5027b/eth_tester-0.1.0b10-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8c7df7e3c5388e10b3bf65a5ddb80449",
          "sha256": "ef11f1e9ca1c8722a603152b21618860f4dbc7a018c2c1c128a86af0efdf35f6"
        },
        "downloads": -1,
        "filename": "eth-tester-0.1.0b10.tar.gz",
        "has_sig": false,
        "md5_digest": "8c7df7e3c5388e10b3bf65a5ddb80449",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48205,
        "upload_time": "2018-01-02T19:33:44",
        "url": "https://files.pythonhosted.org/packages/4d/01/225785449f3268592e36bbf27e4a3b93ba3a6fc4b05f0cbf4a13ad7225bf/eth-tester-0.1.0b10.tar.gz"
      }
    ],
    "0.1.0b11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "65cf60472374434d1c23a9788b59bb9d",
          "sha256": "4796eb590b4b7db8a5a423059a0a5189b72565a765c8c8e46ae8b841627366ca"
        },
        "downloads": -1,
        "filename": "eth_tester-0.1.0b11-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "65cf60472374434d1c23a9788b59bb9d",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 56571,
        "upload_time": "2018-01-08T17:46:58",
        "url": "https://files.pythonhosted.org/packages/ab/b4/06f71605333ae398a6cdddda386540e7bfebbab034955c777ca412d19558/eth_tester-0.1.0b11-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "028d6ba26a0cea892aeb832130a3a113",
          "sha256": "a8ae607163e4a5c990800c4abf84783d4ef8639928d21ec9254364f779ce5905"
        },
        "downloads": -1,
        "filename": "eth-tester-0.1.0b11.tar.gz",
        "has_sig": false,
        "md5_digest": "028d6ba26a0cea892aeb832130a3a113",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48226,
        "upload_time": "2018-01-08T17:46:35",
        "url": "https://files.pythonhosted.org/packages/04/5f/f13f2bbf6c11a7211d82e75aa379ca806e6780f33884e22a5c92d48fbdc8/eth-tester-0.1.0b11.tar.gz"
      }
    ],
    "0.1.0b12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4fdba54551f30924191ac162602e2e6f",
          "sha256": "345fba3914c1b324ae06759ae450754d1a1bd91d201c60702bcaf8e38f1dc2a0"
        },
        "downloads": -1,
        "filename": "eth_tester-0.1.0b12-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4fdba54551f30924191ac162602e2e6f",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 75138,
        "upload_time": "2018-01-19T18:32:29",
        "url": "https://files.pythonhosted.org/packages/8c/53/6c4d57fa147a86d40cb19fa61e88783b9098ea02f2fdbaedfda6213afa79/eth_tester-0.1.0b12-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "eedc795a5ada79d7f4ab398a0ea9e92e",
          "sha256": "7d4967debe4bfbd0f11ecc397f42244d6b52004fba62506f359cc76705c35dbe"
        },
        "downloads": -1,
        "filename": "eth-tester-0.1.0b12.tar.gz",
        "has_sig": false,
        "md5_digest": "eedc795a5ada79d7f4ab398a0ea9e92e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 65826,
        "upload_time": "2018-01-19T18:32:26",
        "url": "https://files.pythonhosted.org/packages/45/73/803d11c85b53326633b7c9b1eaf2e4058adf493783358ba07fe4077db4ca/eth-tester-0.1.0b12.tar.gz"
      }
    ],
    "0.1.0b13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8209705b9a4e6f77375366b63e34d56d",
          "sha256": "cbf2e8dbed736672a454ba2f8e07521049500d41d721e9527f7530a2572f895a"
        },
        "downloads": -1,
        "filename": "eth_tester-0.1.0b13-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8209705b9a4e6f77375366b63e34d56d",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 58339,
        "upload_time": "2018-01-23T02:53:53",
        "url": "https://files.pythonhosted.org/packages/97/19/467771bf264837861f8e4ef56b30a53cbe5b60c611ce4bdf2007ba8492cf/eth_tester-0.1.0b13-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e1504765a8daaf0bb6ebd5d7245ef344",
          "sha256": "386586250c90d916767bd9e3f66d05808453364f5a38cb49a97a4eb8a1ce754f"
        },
        "downloads": -1,
        "filename": "eth-tester-0.1.0b13.tar.gz",
        "has_sig": false,
        "md5_digest": "e1504765a8daaf0bb6ebd5d7245ef344",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 49797,
        "upload_time": "2018-01-23T02:53:46",
        "url": "https://files.pythonhosted.org/packages/a6/25/072472d5774e32a7829a4f1c167d382b116774b89092ca0973df0172eac4/eth-tester-0.1.0b13.tar.gz"
      }
    ],
    "0.1.0b14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4f0cac5f6154dc0296c10a30a6f925cb",
          "sha256": "ad64dab6571cad762ba3859417f57a424fb8f551f0107d191c848b5319e102c8"
        },
        "downloads": -1,
        "filename": "eth_tester-0.1.0b14-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "4f0cac5f6154dc0296c10a30a6f925cb",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 58342,
        "upload_time": "2018-01-24T22:13:32",
        "url": "https://files.pythonhosted.org/packages/7f/68/0f5d0a61d732e21d93bdddc465114114f901ed23fc98904cc5f9a5c090d0/eth_tester-0.1.0b14-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c8fa1605d527b6cadf0d5db5fbe3f9c0",
          "sha256": "d2ec1ee827c06bb4ac69f21fdc42a9995f5c8ac40069f47d5540d5dc279aa734"
        },
        "downloads": -1,
        "filename": "eth-tester-0.1.0b14.tar.gz",
        "has_sig": false,
        "md5_digest": "c8fa1605d527b6cadf0d5db5fbe3f9c0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 49791,
        "upload_time": "2018-01-24T22:13:30",
        "url": "https://files.pythonhosted.org/packages/66/2e/4c20e4715d4fb835dcb55e5556a0f9b7734c4c0028f1214e8d48efe54c72/eth-tester-0.1.0b14.tar.gz"
      }
    ],
    "0.1.0b15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f8944990d33c1bea1d55fcf632be8fb0",
          "sha256": "0a04d8c0d57e62f2aaf51676db191aa5a89921a2e1db192ca6498f9afadc21f6"
        },
        "downloads": -1,
        "filename": "eth_tester-0.1.0b15-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f8944990d33c1bea1d55fcf632be8fb0",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 58432,
        "upload_time": "2018-01-26T14:07:32",
        "url": "https://files.pythonhosted.org/packages/f4/2c/9f13bd3d7a090d123252873ac86a5f0356b74b06c2dd447c900ff8b528a7/eth_tester-0.1.0b15-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "a18b73b28fe737486e82ba26eba152e2",
          "sha256": "c6b653f34f305aea02f778269f381fbda9150105702e4dd89414114dd2730775"
        },
        "downloads": -1,
        "filename": "eth-tester-0.1.0b15.tar.gz",
        "has_sig": false,
        "md5_digest": "a18b73b28fe737486e82ba26eba152e2",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 49873,
        "upload_time": "2018-01-26T14:07:29",
        "url": "https://files.pythonhosted.org/packages/b5/b0/e6589b7d6409f65f34ef6cb4a355a57d031a1f4d18fac6a20d2dbe8328d0/eth-tester-0.1.0b15.tar.gz"
      }
    ],
    "0.1.0b16": [
      {
        "comment_text": "",
        "digests": {
          "md5": "403166268bce06d43cc3acbad08ede13",
          "sha256": "5ffdc7515996ebad3defb5fd3ddf8dceacfb27f1870e9d01f39acaa5abdf3889"
        },
        "downloads": -1,
        "filename": "eth_tester-0.1.0b16-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "403166268bce06d43cc3acbad08ede13",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 75147,
        "upload_time": "2018-02-05T23:47:46",
        "url": "https://files.pythonhosted.org/packages/2c/df/c18fe283e2b08b5864ed0618f43698cd93d35218b1fa3caec50157c255a8/eth_tester-0.1.0b16-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "3484aa7eadbccd524670cfa996e11f24",
          "sha256": "f581a0967c8107dcd494dd8acc285ecd4913073fa28ee462caa0c234315adca0"
        },
        "downloads": -1,
        "filename": "eth-tester-0.1.0b16.tar.gz",
        "has_sig": false,
        "md5_digest": "3484aa7eadbccd524670cfa996e11f24",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 65017,
        "upload_time": "2018-02-05T23:47:44",
        "url": "https://files.pythonhosted.org/packages/52/da/f9bd1aae614a9f852ccaa500f56ef00701d9a8f2d308cf72beea11cc8b8c/eth-tester-0.1.0b16.tar.gz"
      }
    ],
    "0.1.0b3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ec782c95f4e91d16c0c0e94ffbc052a7",
          "sha256": "964f15fcef403cfcc8ab2894a79ad67e3e69363cc13d01dd5bca5de019f46461"
        },
        "downloads": -1,
        "filename": "eth_tester-0.1.0b3-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ec782c95f4e91d16c0c0e94ffbc052a7",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 50984,
        "upload_time": "2017-11-29T04:11:55",
        "url": "https://files.pythonhosted.org/packages/a9/1d/7e02ad072f0d3a7bbcff7c2977c382deb7f1db09827b79029f2e84df8f3d/eth_tester-0.1.0b3-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f913d71aae509498a19c58f3618e9ca9",
          "sha256": "ed96fb91ba63e63f5456ce2de44dd9e90f6e9e76b6db94a495b59ac17e48d47a"
        },
        "downloads": -1,
        "filename": "eth-tester-0.1.0b3.tar.gz",
        "has_sig": false,
        "md5_digest": "f913d71aae509498a19c58f3618e9ca9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43757,
        "upload_time": "2017-11-29T04:11:43",
        "url": "https://files.pythonhosted.org/packages/06/b2/f011008b727786ac043f790cca55854884ff06e28c98a59e377917080ab2/eth-tester-0.1.0b3.tar.gz"
      }
    ],
    "0.1.0b4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c9adbb566fdaf7637ed7d68c5bf7fbbc",
          "sha256": "5ccdbfb828b60424a0a2b4223b9875fec2e2a63a78ddca3ef55a0bd21628d158"
        },
        "downloads": -1,
        "filename": "eth_tester-0.1.0b4-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c9adbb566fdaf7637ed7d68c5bf7fbbc",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 50988,
        "upload_time": "2017-12-04T17:40:17",
        "url": "https://files.pythonhosted.org/packages/97/28/12c1ca48cdaf35dc5a6c449de1a186635bfe4cf323c19c6d68a0f4c2a58b/eth_tester-0.1.0b4-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "4d541f43fff3fd28998956af64da6cfb",
          "sha256": "b1f2fd2d455ab18c38ba29ae7028732d232db0f09300f179fc3e27edd5794185"
        },
        "downloads": -1,
        "filename": "eth-tester-0.1.0b4.tar.gz",
        "has_sig": false,
        "md5_digest": "4d541f43fff3fd28998956af64da6cfb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 43806,
        "upload_time": "2017-12-04T17:40:12",
        "url": "https://files.pythonhosted.org/packages/d9/55/9b5d17155b0abb118288ad800093956247eae10add4eb1ec075f6486dd7e/eth-tester-0.1.0b4.tar.gz"
      }
    ],
    "0.1.0b5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "797812c6373e1b2669c32a65765c46c1",
          "sha256": "acac8481055d9bddfbc0cb608e3f73f0d8346fc38d9e1e4fbd6fa678aa291ccb"
        },
        "downloads": -1,
        "filename": "eth_tester-0.1.0b5-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "797812c6373e1b2669c32a65765c46c1",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 51237,
        "upload_time": "2017-12-07T17:31:55",
        "url": "https://files.pythonhosted.org/packages/fc/b8/837289c5f482335ca44e8e35a90141bb4f6a9c386b5498d63f252b2d6218/eth_tester-0.1.0b5-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "fd79b67d8b90dd2989e05fd3607a1aae",
          "sha256": "a2293e4f6edee02bcfa577070879d6b4b976c44b6e4130ac01537c53e272566b"
        },
        "downloads": -1,
        "filename": "eth-tester-0.1.0b5.tar.gz",
        "has_sig": false,
        "md5_digest": "fd79b67d8b90dd2989e05fd3607a1aae",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 44008,
        "upload_time": "2017-12-07T17:31:53",
        "url": "https://files.pythonhosted.org/packages/e0/6c/4f44b1b9b9811740eea20065f62a900a294e6c5e63710d12bdd58021b1d2/eth-tester-0.1.0b5.tar.gz"
      }
    ],
    "0.1.0b6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "856e11a4d7501330fc800330fa4de6eb",
          "sha256": "363e7fbe70b294b15c6e77d9c5a0ffaffaa85483c30e5dcf7d828fe560ae5150"
        },
        "downloads": -1,
        "filename": "eth_tester-0.1.0b6-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "856e11a4d7501330fc800330fa4de6eb",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 56441,
        "upload_time": "2017-12-20T00:16:43",
        "url": "https://files.pythonhosted.org/packages/a8/64/e8409f63b51735234b89b0265df9e6ceb86548cae6deee90a67dced04b5e/eth_tester-0.1.0b6-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "cc590004c23d583f838b5f5a737bf537",
          "sha256": "3a69d464b4473530d7ad0a9314018ab0c6af338808c8eac1d208ad6fc62e0113"
        },
        "downloads": -1,
        "filename": "eth-tester-0.1.0b6.tar.gz",
        "has_sig": false,
        "md5_digest": "cc590004c23d583f838b5f5a737bf537",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48000,
        "upload_time": "2017-12-20T00:16:41",
        "url": "https://files.pythonhosted.org/packages/35/85/4eaf68a614419eaaf297740649e34554a77b4b72fe37f570796547d6064c/eth-tester-0.1.0b6.tar.gz"
      }
    ],
    "0.1.0b7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5c0a72febf7a10876fe43d2f81e02a07",
          "sha256": "417e67f59d5939949868f2f8db4252b226a4ec7608fa8292ef621fb2e7f046e3"
        },
        "downloads": -1,
        "filename": "eth_tester-0.1.0b7-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5c0a72febf7a10876fe43d2f81e02a07",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 56528,
        "upload_time": "2017-12-20T23:32:32",
        "url": "https://files.pythonhosted.org/packages/9a/99/b66445698d357dc05a7111020849fabd86d8bd25269766c85c4123c0ba22/eth_tester-0.1.0b7-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "28811f03b8d5f1c23dbacb04c0532019",
          "sha256": "f6aa8ff1e76f2d4d41c498a3ba74e25cc9201fe1812ed552575d83b0769fc244"
        },
        "downloads": -1,
        "filename": "eth-tester-0.1.0b7.tar.gz",
        "has_sig": false,
        "md5_digest": "28811f03b8d5f1c23dbacb04c0532019",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48092,
        "upload_time": "2017-12-20T23:32:30",
        "url": "https://files.pythonhosted.org/packages/a8/43/8511ea8368062d9605df1f8b6230b6991e9facd15120121bb27664ecc142/eth-tester-0.1.0b7.tar.gz"
      }
    ],
    "0.1.0b8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8135bb8a479f6f2be0efbe3ca42b5919",
          "sha256": "ddf661894cabeb045adeb3ab404d293abffadc76770567e8dc00d02c8642a30f"
        },
        "downloads": -1,
        "filename": "eth_tester-0.1.0b8-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8135bb8a479f6f2be0efbe3ca42b5919",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 56528,
        "upload_time": "2017-12-21T23:10:53",
        "url": "https://files.pythonhosted.org/packages/67/cd/528849015487645954a4f6e3fcda4aa3d60503ca0b6033f4d2dc21149c35/eth_tester-0.1.0b8-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "eee47705d0506605dec8fdd055004aa0",
          "sha256": "b14e1205a1149073f2ade34ae13bee65cc551b87421b581d972a401e65760554"
        },
        "downloads": -1,
        "filename": "eth-tester-0.1.0b8.tar.gz",
        "has_sig": false,
        "md5_digest": "eee47705d0506605dec8fdd055004aa0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48144,
        "upload_time": "2017-12-21T23:10:51",
        "url": "https://files.pythonhosted.org/packages/73/46/84ed6a929562c145a7a65a7e2e9dc69ad73516aa0b44ff87540eab9a6ce3/eth-tester-0.1.0b8.tar.gz"
      }
    ],
    "0.1.0b9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "96c3d6d1becdfeb6f9611a863942aca9",
          "sha256": "cb14bc9c6885ebd8614c1342fb886a788977c0ac1f884060ab0df6d5a0b40436"
        },
        "downloads": -1,
        "filename": "eth_tester-0.1.0b9-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96c3d6d1becdfeb6f9611a863942aca9",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 56526,
        "upload_time": "2017-12-22T23:21:17",
        "url": "https://files.pythonhosted.org/packages/56/8d/11fe42b16def7af12f39c10ed08224e0ae28c2eb0c7515d2de443ecbe906/eth_tester-0.1.0b9-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "9a81294186ad08c7655da1990c9450cb",
          "sha256": "5174f5abcc757f9b9b1e322b7a56e4fc5a683637cd849f1318376729b84380e4"
        },
        "downloads": -1,
        "filename": "eth-tester-0.1.0b9.tar.gz",
        "has_sig": false,
        "md5_digest": "9a81294186ad08c7655da1990c9450cb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 48145,
        "upload_time": "2017-12-22T23:21:02",
        "url": "https://files.pythonhosted.org/packages/35/a8/3bdfdea9d688078f320b0c5d715ce9ed0ec186cef9fa1c9acf81b7cb34b3/eth-tester-0.1.0b9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "403166268bce06d43cc3acbad08ede13",
        "sha256": "5ffdc7515996ebad3defb5fd3ddf8dceacfb27f1870e9d01f39acaa5abdf3889"
      },
      "downloads": -1,
      "filename": "eth_tester-0.1.0b16-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "403166268bce06d43cc3acbad08ede13",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "size": 75147,
      "upload_time": "2018-02-05T23:47:46",
      "url": "https://files.pythonhosted.org/packages/2c/df/c18fe283e2b08b5864ed0618f43698cd93d35218b1fa3caec50157c255a8/eth_tester-0.1.0b16-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "3484aa7eadbccd524670cfa996e11f24",
        "sha256": "f581a0967c8107dcd494dd8acc285ecd4913073fa28ee462caa0c234315adca0"
      },
      "downloads": -1,
      "filename": "eth-tester-0.1.0b16.tar.gz",
      "has_sig": false,
      "md5_digest": "3484aa7eadbccd524670cfa996e11f24",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 65017,
      "upload_time": "2018-02-05T23:47:44",
      "url": "https://files.pythonhosted.org/packages/52/da/f9bd1aae614a9f852ccaa500f56ef00701d9a8f2d308cf72beea11cc8b8c/eth-tester-0.1.0b16.tar.gz"
    }
  ]
}