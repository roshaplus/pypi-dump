{
  "info": {
    "author": "irma-dev",
    "author_email": "irma-dev@quarkslab.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "Irmacl: command-line tool for IRMA API\n--------------------------------------\n\n|docs|\n\nIRMA is an asynchronous and customizable analysis system for suspicious files.\nThis repository is a subproject of IRMA and contains the source code for IRMA's\nAPI client.\n\n**This api client is only made for IRMA API version 1.1.**\n\nInstallation\n````````````\n.. code-block:: bash\n\n   $ python setup.py install\n\n\nConfiguration file contains the API endpoint (full url) and some optional paramters (max number and\ndelay in second between retries)\n\n.. code-block::\n\n   [Server]\n   api_endpoint=http://172.16.1.30/api/v1.1\n   max_tries=3\n   pause=1\n\n\nand is searched in these locations in following order:\n\n* current directory\n* environment variable (\"IRMA_CONF\")\n* user home directory\n* global directory  (\"/etc/irma\")\n\n\nOnce you set up a working irma.conf settings file, you could run tests on your running IRMA server:\n\n.. code-block:: bash\n\n   $ python setup.py test\n\n\nPip Install\n-----------\n\nInstall it directly with pip:\n\n.. code-block:: bash\n\n  $ pip install irmacl\n\n\nUsage\n-----\n\n.. code-block:: python\n\n   >>> from irmacl.helpers import *\n   >>> probe_list()\n   [u'StaticAnalyzer', u'Unarchive', u'VirusBlokAda', u'VirusTotal']\n\n   >>>  tag_list()\n   [Tag malware [1], Tag clean [2], Tag suspicious [3]]\n\n   >>>  scan_files([\"./irma/tests/samples/eicar.com\"], force=True, blocking=True)\n   Scanid: ca2e8af4-0f5b-4a55-a1b8-2b8dc9ead068\n   Status: finished\n   Options: Force [True] Mimetype [True] Resubmit [True]\n   Probes finished: 2\n   Probes Total: 2\n   Date: 2015-11-24 15:43:03\n   Results: [<irma.apiclient.IrmaResults object at 0x7f3f250df890>]\n\n   >>> scan = _\n   >>> print scan.results[0]\n   Status: 1\n   Probes finished: 2\n   Probes Total: 2\n   Scanid: ca2e8af4-0f5b-4a55-a1b8-2b8dc9ead068\n   Scan Date: 2015-12-22 14:36:21\n   Filename: eicar.com\n   Filepath: ./irmacl/tests/samples\n   ParentFile SHA256: None\n   Resultid: 572f9418-ca3c-4fdf-bb35-50c11629a7e7\n   FileInfo:\n   None\n   Results: None\n\n   >>> print scan_proberesults(\"572f9418-ca3c-4fdf-bb35-50c11629a7e7\")\n   Status: 1\n   Probes finished: 2\n   Probes Total: 2\n   Scanid: ca2e8af4-0f5b-4a55-a1b8-2b8dc9ead068\n   Scan Date: 2015-12-22 14:36:21\n   Filename: eicar.com\n   Filepath: ./irmacl/tests/samples\n   ParentFile SHA256: None\n   Resultid: 572f9418-ca3c-4fdf-bb35-50c11629a7e7\n   FileInfo:\n   Size: 68\n   Sha1: 3395856ce81f2b7382dee72602f798b642f14140\n   Sha256: 275a021bbfb6489e54d471899f7db9d1663fc695ec2fe2a2c4538aabf651fd0f\n   Md5: 44d88612fea8a8f36de82e1278abb02fs\n   First Scan: 2015-11-24 14:54:12\n   Last Scan: 2015-12-22 14:36:21\n   Id: 3\n   Mimetype: EICAR virus test files\n   Tags: []\n\n   Results: [<irmacl.apiclient.IrmaProbeResult object at 0x7f3f250b9dd0>, <irmacl.apiclient.IrmaProbeResult object at 0x7f3f250b9850>]\n\n   >>> fr = _\n   >>> print fr.probe_results[0]\n   Status: 1\n   Name: VirusBlokAda (Console Scanner)\n   Category: antivirus\n   Version: 3.12.26.4\n   Duration: 1.91s\n   Results: EICAR-Test-File\n\n\nSearching for scans\n\n.. code-block:: python\n\n   >>> scan_list()\n   (89, [Scanid: ef0b9466-3132-40b7-990a-415f08377f09\n     Status: finished\n     Options: Force [True] Mimetype [True] Resubmit [True]\n     Probes finished: 1\n     Probes Total: 1\n     Date: 2015-11-24 15:04:27\n   [...]\n\n\nSearching for files\n\n.. code-block:: python\n\n   >>> file_search(name=\"ei\")\n   (1, [<irmacl.apiclient.IrmaResults at 0x7f3f250491d0>])\n\n   >>> (total, res) = _\n   >>> print res[0]\n   Status: 1\n   Probes finished: 1\n   Probes Total: 1\n   Scanid: 7ae6b759-b357-4680-8358-b134b564b1ca\n   Filename: eicar.com\n   [...]\n\n   >>> file_search(hash=\"3395856ce81f2b7382dee72602f798b642f14140\")\n   (7,\n    [<irmacl.apiclient.IrmaResults at 0x7f3f250b96d0>,\n     <irmacl.apiclient.IrmaResults at 0x7f3f24fdc1d0>,\n     <irmacl.apiclient.IrmaResults at 0x7f3f24fdca90>,\n     <irmacl.apiclient.IrmaResults at 0x7f3f24fdcdd0>,\n     <irmacl.apiclient.IrmaResults at 0x7f3f24fdc690>,\n     <irmacl.apiclient.IrmaResults at 0x7f3f2504f390>,\n     <irmacl.apiclient.IrmaResults at 0x7f3f24fea350>])\n\n   >>> file_search(hash=\"3395856ce81f2b7382dee72602f798b642f14140\", tags=[1,2])\n   (0, [])\n\n   # looking for an unexisting tagid raise IrmaError\n   >>> file_search(hash=\"3395856ce81f2b7382dee72602f798b642f14140\", tags=[100])\n   IrmaError: Error 402\n\n\nObjects (apiclient.py)\n-------\n\n**class irmacl.apiclient.IrmaFileInfo(id, size, timestamp_first_scan, timestamp_last_scan, sha1, sha256, md5, mimetype, tags)**\n\n   Bases: \"object\"\n\n   IrmaFileInfo Description for class\n\n   Variables:\n      * **id** -- id\n\n      * **timestamp_first_scan** -- timestamp when file was first\n        scanned in IRMA\n\n      * **timestamp_last_scan** -- timestamp when file was last\n        scanned in IRMA\n\n      * **size** -- size in bytes\n\n      * **md5** -- md5 hexdigest\n\n      * **sha1** -- sha1 hexdigest\n\n      * **sha256** -- sha256 hexdigest\n\n      * **mimetype** -- mimetype (based on python magic)\n\n      * **tags** -- list of tags\n\n   pdate_first_scan -- property, humanized date of first scan\n\n   pdate_last_scan -- property, humanized date of last scan\n\n   raw()\n\n**class irmacl.apiclient.IrmaProbeResult(**kwargs)**\n\n   Bases: \"object\"\n\n   IrmaProbeResult Description for class\n\n   Variables:\n      * **status** -- int probe specific (usually -1 is error, 0\n        nothing found 1 something found)\n\n      * **name** -- probe name\n\n      * **type** -- one of IrmaProbeType ('antivirus', 'external',\n        'database', 'metadata'...)\n\n      * **version** -- probe version\n\n      * **duration** -- analysis duration in seconds\n\n      * **results** -- probe results (could be str, list, dict)\n\n      * **error** -- error string (only relevant in error case when\n        status == -1)\n\n      * **external_url** -- remote url if available (only relevant\n        when type == 'external')\n\n      * **database** -- antivirus database digest (need unformatted\n        results) (only relevant when type == 'antivirus')\n\n      * **platform** -- 'linux' or 'windows' (need unformatted\n        results)\n\n   to_json()\n\n\n**class irmacl.apiclient.IrmaResults(file_infos=None, probe_results=None, **kwargs)**\n\n   Bases: \"object\"\n\n   IrmaResults Description for class\n\n   Variables:\n      * **status** -- int (0 means clean 1 at least one AV report\n        this file as a virus)\n\n      * **probes_finished** -- number of finished probes analysis\n        for current file\n\n      * **probes_total** -- number of total probes analysis for\n        current file\n\n      * **scan_id** -- id of the scan\n\n      * **scan_date** -- date of the scan\n\n      * **name** -- file name\n\n      * **path** -- file path (as sent during upload or resubmit)\n\n      * **result_id** -- id of specific results for this file and\n        this scan used to fetch probe_results through file_results\n        helper function\n\n      * **file_infos** -- IrmaFileInfo object\n\n      * **probe_results** -- list of IrmaProbeResults objects\n\n   to_json()\n\n   pscan_date -- property, humanized date of scan date\n\n\n**class irmacl.apiclient.IrmaScan(id, status, probes_finished, probes_total, date, force, resubmit_files, mimetype_filtering, results=[])**\n\n   Bases: \"object\"\n\n   IrmaScan Description for class\n\n   Variables:\n      * **id** -- id of the scan\n\n      * **status** -- int (one of IrmaScanStatus)\n\n      * **probes_finished** -- number of finished probes analysis\n        for current scan\n\n      * **probes_total** -- number of total probes analysis for\n        current scan\n\n      * **date** -- scan creation date\n\n      * **force** -- force a new analysis or not\n\n      * **resubmit_files** -- files generated by the probes should\n        be analyzed or not\n\n      * **mimetype_filtering** -- probes list should be decided\n        based on files mimetype or not\n\n      * **results** -- list of IrmaResults objects\n\n   is_finished()\n\n   is_launched()\n\n   pdate  -- property, printable date\n\n   pstatus -- property, printable status\n\n**class irmacl.apiclient.IrmaTag(id, text)**\n\n   Bases: \"object\"\n\n   IrmaTag Description for class\n\n   Variables:\n      * **id** -- id of the tag\n\n      * **text** -- tag label\n\n\nHelpers (helpers.py)\n-------\n\n**irmacl.helpers.file_download(sha256, dest_filepath, verbose=False)**\n\n   Download file identified by sha256 to dest_filepath\n\n   Parameters:\n      * **sha256** (*str of 64 chars*) -- file sha256 hash value\n\n      * **dest_filepath** (*str*) -- destination path\n\n      * **verbose** (*bool*) -- enable verbose requests (optional\n        default:False)\n\n   Returns:\n      return tuple of total files and list of results for the given\n      file\n\n   Return type:\n      tuple(int, list of IrmaResults)\n\n**irmacl.helpers.file_results(sha256, limit=None, offset=None, verbose=False)**\n\n   List all results for a given file identified by sha256\n\n   Parameters:\n      * **sha256** (*str of 64 chars*) -- file sha256 hash value\n\n      * **limit** (*int*) -- max number of files to receive\n        (optional default:25)\n\n      * **offset** (*int*) -- index of first result (optional\n        default:0)\n\n      * **verbose** (*bool*) -- enable verbose requests (optional\n        default:False)\n\n   Returns:\n      tuple(int, list of IrmaResults)\n\n**irmacl.helpers.file_search(name=None, hash=None, tags=None, limit=None, offset=None, verbose=False)**\n\n   Search a file by name or hash value\n\n   Parameters:\n      * **name** (*str*) -- name of the file ('*name*' will be\n        searched)\n\n      * **hash** (*str of (64, 40 or 32 chars)*) -- one of sha1, md5\n        or sha256 full hash value\n\n      * **tags** (*list of int*) -- list of tagid\n\n      * **limit** (*int*) -- max number of files to receive\n        (optional default:25)\n\n      * **offset** (*int*) -- index of first result (optional\n        default:0)\n\n      * **verbose** (*bool*) -- enable verbose requests (optional\n        default:False)\n\n   Returns:\n      return tuple of total files and list of matching files already\n      scanned\n\n   Return type:\n      tuple(int, list of IrmaResults)\n\n**irmacl.helpers.file_tag_add(sha256, tagid, verbose=False)**\n\n   Add a tag to a File\n\n   Parameters:\n      * **sha256** (*str of (64 chars)*) -- file sha256 hash\n\n      * **tagid** (*int*) -- tag id\n\n   Returns:\n      No return\n\n**irmacl.helpers.file_tag_remove(sha256, tagid, verbose=False)**\n\n   Remove a tag to a File\n\n   Parameters:\n      * **sha256** (*str of (64 chars)*) -- file sha256 hash\n\n      * **tagid** (*int*) -- tag id\n\n   Returns:\n      No return\n\n**irmacl.helpers.probe_list(verbose=False)**\n\n   List availables probes\n\n   Parameters:\n      **verbose** (*bool*) -- enable verbose requests (optional\n      default:False)\n\n   Returns:\n      return probe list\n\n   Return type:\n      list\n\n**irmacl.helpers.scan_add_data(scan_id, data, filename, post_max_size_M=100, verbose=False)**\n\n   Add files to an existing scan\n\n   Parameters:\n      * **scan_id** (*str*) -- the scan id\n\n      * **data** (*str*) -- data to scan\n\n      * **filename** (*str*) -- filename associated to data\n\n      * **post_max_size_M** (*int*) -- POST data max size in Mb (multiple calls to the\n        api will be done if total size is more than this limit, note that if\n        one or more file is bigger than this limit it will raise an error)\n\n      * **verbose** (*bool*) -- enable verbose requests (optional\n        default:False)\n\n   Returns:\n      return the updated scan object\n\n   Return type:\n      IrmaScan\n\n\n**irmacl.helpers.scan_add_files(scan_id, filelist, post_max_size_M=100, verbose=False)**\n\n   Add files to an existing scan\n\n   Parameters:\n      * **scan_id** (*str*) -- the scan id\n\n      * **filelist** (*list*) -- list of full path qualified files\n\n      * **post_max_size_M** (*int*) -- POST data max size in Mb (multiple calls to the\n        api will be done if total size is more than this limit, note that if\n        one or more file is bigger than this limit it will raise an error)\n\n      * **verbose** (*bool*) -- enable verbose requests (optional\n        default:False)\n\n   Returns:\n      return the updated scan object\n\n   Return type:\n      IrmaScan\n\n**irmacl.helpers.scan_cancel(scan_id, verbose=False)**\n\n   Cancel a scan\n\n   Parameters:\n      * **scan_id** (*str*) -- the scan id\n\n      * **verbose** (*bool*) -- enable verbose requests (optional\n        default:False)\n\n   Returns:\n      return the scan object\n\n   Return type:\n      IrmaScan\n\n**irmacl.helpers.scan_data(data, filename, force, post_max_size_M=100, probe=None, mimetype_filtering=None, resubmit_files=None, blocking=False,blocking_timeout=60, verbose=False)**\n\n   Wrapper around scan_new / scan_add / scan_launch\n\n   Parameters:\n      * **data** (*str*) -- data to scan\n\n      * **filename** (*str*) -- filename associated to data\n\n      * **force** (*bool*) -- if True force a new analysis of files\n        if False use existing results\n\n      * **post_max_size_M** (*int*) -- POST data max size in Mb (multiple calls to the\n        api will be done if total size is more than this limit, note that if\n        one or more file is bigger than this limit it will raise an error)\n\n      * **probe** (*list*) -- probe list to use (optional default:\n        None means all)\n\n      * **mimetype_filtering** (*bool*) -- enable probe selection\n        based on mimetype (optional default:True)\n\n      * **resubmit_files** (*bool*) -- reanalyze files produced by\n        probes (optional default:True)\n\n      * **blocking** (*bool*) -- wether or not the function call\n        should block until scan ended\n\n      * **blocking_timeout** (*int*) -- maximum amount of time\n        before timeout per file (only enabled while blocking is ON)\n\n      * **verbose** (*bool*) -- enable verbose requests (optional\n        default:False)\n\n   Returns:\n      return the scan object\n\n   Return type:\n      IrmaScan\n\n\n**irmacl.helpers.scan_files(filelist, force, post_max_size_M=100, probe=None, mimetype_filtering=None, resubmit_files=None, blocking=False,blocking_timeout=60, verbose=False)**\n\n   Wrapper around scan_new / scan_add / scan_launch\n\n   Parameters:\n      * **filelist** (*list*) -- list of full path qualified files\n\n      * **force** (*bool*) -- if True force a new analysis of files\n        if False use existing results\n\n      * **post_max_size_M** (*int*) -- POST data max size in Mb (multiple calls to the\n        api will be done if total size is more than this limit, note that if\n        one or more file is bigger than this limit it will raise an error)\n\n      * **probe** (*list*) -- probe list to use (optional default:\n        None means all)\n\n      * **mimetype_filtering** (*bool*) -- enable probe selection\n        based on mimetype (optional default:True)\n\n      * **resubmit_files** (*bool*) -- reanalyze files produced by\n        probes (optional default:True)\n\n      * **blocking** (*bool*) -- wether or not the function call\n        should block until scan ended\n\n      * **blocking_timeout** (*int*) -- maximum amount of time\n        before timeout per file (only enabled while blocking is ON)\n\n      * **verbose** (*bool*) -- enable verbose requests (optional\n        default:False)\n\n   Returns:\n      return the scan object\n\n   Return type:\n      IrmaScan\n\n**irmacl.helpers.scan_get(scan_id, verbose=False)**\n\n   Fetch a scan (useful to track scan progress with scan.pstatus)\n\n   Parameters:\n      * **scan_id** (*str*) -- the scan id\n\n      * **verbose** (*bool*) -- enable verbose requests (optional\n        default:False)\n\n   Returns:\n      return the scan object\n\n   Return type:\n      IrmaScan\n\n**irmacl.helpers.scan_launch(scan_id, force, probe=None, mimetype_filtering=None, resubmit_files=None, verbose=False)**\n\n   Launch an existing scan\n\n   Parameters:\n      * **scan_id** (*str*) -- the scan id\n\n      * **force** (*bool*) -- if True force a new analysis of files\n        if False use existing results\n\n      * **probe** (*list*) -- probe list to use (optional default\n        None means all)\n\n      * **mimetype_filtering** (*bool*) -- enable probe selection\n        based on mimetype (optional default:True)\n\n      * **resubmit_files** (*bool*) -- reanalyze files produced by\n        probes (optional default:True)\n\n      * **verbose** (*bool*) -- enable verbose requests (optional\n        default:False)\n\n   Returns:\n      return the updated scan object\n\n   Return type:\n      IrmaScan\n\n**irmacl.helpers.scan_list(limit=None, offset=None, verbose=False)**\n\n   List all scans\n\n   Parameters:\n      * **limit** (*int*) -- max number of files to receive\n        (optional default:25)\n\n      * **offset** (*int*) -- index of first result (optional\n        default:0)\n\n      * **verbose** (*bool*) -- enable verbose requests (optional\n        default:False)\n\n   Returns:\n      return tuple of total scans and list of scans\n\n   Return type:\n      tuple(int, list of IrmaScan)\n\n**irmacl.helpers.scan_new(verbose=False)**\n\n   Create a new scan\n\n   Parameters:\n      **verbose** (*bool*) -- enable verbose requests (optional\n      default:False)\n\n   Returns:\n      return the new generated scan object\n\n   Return type:\n      IrmaScan\n\n**irmacl.helpers.scan_proberesults(result_idx, formatted=True, verbose=False)**\n\n   Fetch file probe results (for a given scan\n      one scan <-> one result_idx\n\n   Parameters:\n      * **result_idx** (*str*) -- the result id\n\n      * **formatted** (*bool*) -- apply frontend formatters on\n        results (optional default:True)\n\n      * **verbose** (*bool*) -- enable verbose requests (optional\n        default:False)\n\n   Returns:\n      return a IrmaResult object\n\n   Return type:\n      IrmaResults\n\n**irmacl.helpers.tag_list(verbose=False)**\n\n   List all available tags\n\n   Returns:\n      list of existing tags\n\n   Return type:\n      list of IrmaTag\n\n**irmacl.helpers.tag_new(text, verbose=False)**\n\n   Create a new tag\n\n   Parameters:\n      **text** (*str*) -- tag label (utf8 encoded)\n\n   Returns:\n      None\n\nDocumentation\n`````````````\n\nThe full IRMA documentation is available `on Read The Docs Website`_.\n\n\nGetting help\n````````````\n\nJoin the #qb_irma channel on irc.freenode.net. Lots of helpful people hang out there.\n\n\nContribute to IRMA\n``````````````````\n\nIRMA is an ambitious project. Make yourself known on the #qb_irma channel on\nirc.freenode.net. We will be please to greet you and to find a way to get you\ninvolved in the project.\n\n\n.. |docs| image:: https://readthedocs.org/projects/irma/badge/\n    :alt: Documentation Status\n    :scale: 100%\n    :target: https://irma.readthedocs.io\n.. _on Read The Docs Website: https://irma.readthedocs.io\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/quarkslab/irma-cli",
    "keywords": "",
    "license": "ApacheV2",
    "maintainer": "",
    "maintainer_email": "",
    "name": "irmacl",
    "platform": "",
    "project_url": "https://pypi.org/project/irmacl/",
    "release_url": "https://pypi.org/project/irmacl/1.1.8-1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Irma command line tool for API v1.1",
    "version": "1.1.8-1"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9b86761d8bcc8d6300b5e1c6afd28ae1",
          "sha256": "66e85bdcc80ed1125ba5ff7528e036188696e266f5b17467ac90272a39ae52c5"
        },
        "downloads": -1,
        "filename": "irmacl-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9b86761d8bcc8d6300b5e1c6afd28ae1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13167,
        "upload_time": "2016-12-27T11:20:22",
        "url": "https://files.pythonhosted.org/packages/03/11/836f47f7200266989cd2c9152ab8c3de990b458e0ad41002ae9c6e89d243/irmacl-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6b672c8eb13141aa95c9a8a67f62eddc",
          "sha256": "810a051fa1a742603924fab9c6aee77d0c3a1e416c6223fbf4b408c892e411fe"
        },
        "downloads": -1,
        "filename": "irmacl-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6b672c8eb13141aa95c9a8a67f62eddc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13163,
        "upload_time": "2016-12-27T11:35:26",
        "url": "https://files.pythonhosted.org/packages/51/43/9d7d5283e4268337f958333de03fa74d95f6471e5ea757485fd1e7de7253/irmacl-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c5ba3d70c33a4c2bc751f3b07c2b8f1d",
          "sha256": "e6f0bf75a82d7699bcf43ae92f34f12b9099dc06557b035e4f05d5e0301ea99b"
        },
        "downloads": -1,
        "filename": "irmacl-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "c5ba3d70c33a4c2bc751f3b07c2b8f1d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13162,
        "upload_time": "2016-12-27T12:42:25",
        "url": "https://files.pythonhosted.org/packages/44/c9/e3e4ccb0abf5abbe5cf2dad4b4f3e1529dd63a7d6956d76c02c0cbcbc6fa/irmacl-1.0.2.tar.gz"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "dbcd6c6a71eed01f9070d5f1d522166f",
          "sha256": "d46b9a41a9c6512eaa50ac82d71e9a6c208b5a01629c6f42078a060813027956"
        },
        "downloads": -1,
        "filename": "irmacl-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "dbcd6c6a71eed01f9070d5f1d522166f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11828,
        "upload_time": "2017-02-09T17:21:05",
        "url": "https://files.pythonhosted.org/packages/41/cb/73c6e55dc9b52146d6ec633571db0a80623bd43460e4d4e06d6cf9e770d0/irmacl-1.0.3.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "64f5a89180955b8d2987ce4d4195bc31",
          "sha256": "b089f88f65b5a2d8b881c738a7318d76d8d67d232b166f1b9f68680fbae36c79"
        },
        "downloads": -1,
        "filename": "irmacl-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "64f5a89180955b8d2987ce4d4195bc31",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17086,
        "upload_time": "2016-12-27T11:28:55",
        "url": "https://files.pythonhosted.org/packages/c8/48/5b97f6dff00bd3427b36a11d0ef96eb11c2d12c8bab7789320e3fc8e2a17/irmacl-1.1.0.tar.gz"
      }
    ],
    "1.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "24bcc518820cd783f87abf545053b8b6",
          "sha256": "27a03fbf5e7b4174f209c2983b871d2d1a719085e575ec9a8895a72c154bd97b"
        },
        "downloads": -1,
        "filename": "irmacl-1.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "24bcc518820cd783f87abf545053b8b6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17562,
        "upload_time": "2017-01-05T13:05:48",
        "url": "https://files.pythonhosted.org/packages/e7/09/960db094e0fe810a6e9b9897d1b351429bb6de07e2d85d46f5deecc45d5f/irmacl-1.1.1.tar.gz"
      }
    ],
    "1.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8eb259c9986f52fd8dfc1ccb4e23c330",
          "sha256": "2408cb8cab8e078d6d26566b863cc89dcf4a097dfc5f395a9215385b5b9ad3e8"
        },
        "downloads": -1,
        "filename": "irmacl-1.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "8eb259c9986f52fd8dfc1ccb4e23c330",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16375,
        "upload_time": "2017-02-09T17:21:17",
        "url": "https://files.pythonhosted.org/packages/99/e1/3fefcf719ac14432a16fff6e441c27f67cb1e5ddfa66b675a52e9d2e6579/irmacl-1.1.2.tar.gz"
      }
    ],
    "1.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "25cf8f8cff6378744a6636f5ff7d8e0e",
          "sha256": "faa1de779ce6b24fc96dc9df428798a91e8bc6acdae1c276875f5042158b4a39"
        },
        "downloads": -1,
        "filename": "irmacl-1.1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "25cf8f8cff6378744a6636f5ff7d8e0e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16384,
        "upload_time": "2017-02-09T17:40:15",
        "url": "https://files.pythonhosted.org/packages/98/55/9afec3519fcd66b3d2ba644a75ddbfd5d828e4378a78205c5ce9b5c950e4/irmacl-1.1.3.tar.gz"
      }
    ],
    "1.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "049cb0939c6056e191cacadb727da8e9",
          "sha256": "55387e74878b8e8788c39d7055626ae9af4d2dd39c5df1d5b589d1b2152eb300"
        },
        "downloads": -1,
        "filename": "irmacl-1.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "049cb0939c6056e191cacadb727da8e9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16431,
        "upload_time": "2017-03-02T15:01:16",
        "url": "https://files.pythonhosted.org/packages/da/88/fc26a867ed56f36877867028a46b12d7736b1f0af39ae236ada1be6d3a30/irmacl-1.1.4.tar.gz"
      }
    ],
    "1.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "cf00904bf175d226aa625be53f5a2bd1",
          "sha256": "83a17260c1e8562ff0086b78e103e025b0a0302b12283540c29ac766ccbb2716"
        },
        "downloads": -1,
        "filename": "irmacl-1.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "cf00904bf175d226aa625be53f5a2bd1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16447,
        "upload_time": "2017-08-23T16:49:31",
        "url": "https://files.pythonhosted.org/packages/8a/e3/f47f40f0388c517b4709d112a5467a8ddc67c8a00ac8ba12a858134f788c/irmacl-1.1.5.tar.gz"
      }
    ],
    "1.1.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0a19f6ca1526c2c27404f48911ba2427",
          "sha256": "e423b7e6f40eac70f63a40b21790a9df769633f94fc0a3f5dc432886cf52126d"
        },
        "downloads": -1,
        "filename": "irmacl-1.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "0a19f6ca1526c2c27404f48911ba2427",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16578,
        "upload_time": "2017-09-01T08:35:10",
        "url": "https://files.pythonhosted.org/packages/20/da/8774d651413b23c40a4ebf0c0e9529d2b212cbb4537feaf35330f67b7846/irmacl-1.1.6.tar.gz"
      }
    ],
    "1.1.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f07b8840c1ea3636b54c6b39970b2ab9",
          "sha256": "768c40cc574bc1f79ed1c4c8de28a88e7042165995027879af883fd0b19f182b"
        },
        "downloads": -1,
        "filename": "irmacl-1.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "f07b8840c1ea3636b54c6b39970b2ab9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16426,
        "upload_time": "2017-09-19T10:30:26",
        "url": "https://files.pythonhosted.org/packages/be/e8/1111f989ef348b91299a0f083869fabd90f0d8a41e70e96278c022641675/irmacl-1.1.7.tar.gz"
      }
    ],
    "1.1.8-1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6fa7b7e91eb8fb81bcffe29b080cc557",
          "sha256": "a0df8cfc4a712bbb77db164f5b1509e225d48b3e92ca372f68141bfac9d3d026"
        },
        "downloads": -1,
        "filename": "irmacl-1.1.8-1.tar.gz",
        "has_sig": false,
        "md5_digest": "6fa7b7e91eb8fb81bcffe29b080cc557",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16653,
        "upload_time": "2017-10-20T16:43:45",
        "url": "https://files.pythonhosted.org/packages/2a/7f/f15b33c5289e1563d0992bbf3415fafc769114ca2abfd691a555ed680627/irmacl-1.1.8-1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6fa7b7e91eb8fb81bcffe29b080cc557",
        "sha256": "a0df8cfc4a712bbb77db164f5b1509e225d48b3e92ca372f68141bfac9d3d026"
      },
      "downloads": -1,
      "filename": "irmacl-1.1.8-1.tar.gz",
      "has_sig": false,
      "md5_digest": "6fa7b7e91eb8fb81bcffe29b080cc557",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 16653,
      "upload_time": "2017-10-20T16:43:45",
      "url": "https://files.pythonhosted.org/packages/2a/7f/f15b33c5289e1563d0992bbf3415fafc769114ca2abfd691a555ed680627/irmacl-1.1.8-1.tar.gz"
    }
  ]
}