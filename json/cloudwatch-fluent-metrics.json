{
  "info": {
    "author": "troylar",
    "author_email": "troylars@amazon.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "License :: OSI Approved :: BSD License",
      "Topic :: Utilities"
    ],
    "description": "# FluentMetrics\r## First Things First\rPlease make sure to review the [current AWS CloudWatch Custom Metrics pricing]( https://aws.amazon.com/cloudwatch/pricing/) before proceeding. \r## Overview\r`FluentMetrics` is an easy-to-use Python module that makes logging CloudWatch custom metrics a breeze. The goal is to provide a framework for logging detailed metrics with a minimal footprint. When you look at your code logic, you want to see your actual code logic, not line after line of metrics logging.  `FluentMetrics` lets you maximize your metrics footprint while minimizing your metrics code footprint.\r## Installation\rYou can install directly from PyPI:\r\r```sh\rpip install cloudwatch-fluent-metrics\r```\r## 'Fluent' . . . what is that?\rFluent describes an easy-to-read programming style. The goal of fluent development is to make code easier to read and reduce the amount of code required to build objects. It's easier to take a look a comparison between fluent and non-fluent style.\r#### Non-Fluent Example\r```sh\rg = Game()\rf = Frame(Name='Tom')\rf.add_score(7)\rf.add_score(3)\rg.add_frame(f)\rf = Frame(Name='Tom')\rf.add_strike()\rg.add_frame(f)\r```\r#### Non-Fluent Example with Constructor\r```sh\rg = Game()\rg.add_frame(Frame(Name='Tom', Score1=7, Score2=3)\rg.add_frame(Frame(Name='Tom', Score1=10)\r```\r#### Fluent Example\r```sh\rg = Game()\rg.add_frame(Frame().with_name('Tom').score(3).spare())\rg.add_frame(Frame().with_name('Tom').strike())\r```\rWhile the difference may seem to be nitpicking, a frame is really just a constructed object. In the first example, we're taking up three lines of code to create the object--there's nothing wrong with that. However, in the second example, we're using constructors. This is slightly more readable, but there's a great deal of logic bulked up in our constructor. In the third example, we're using fluent-style code as it starts at creating the frame and *fluently* continues until it's created the entire frame in a single line. And more importantly, *it's readable.* We're not just creating an object with a massive constructor or spending several lines of code just to create a single object.\r## Terminology Quickstart\r#### Namespaces\rEvery metric needs to live in a namespace. Since you are logging your own custom metrics, you need to provide a custom namespace for your metric. Click [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-namespaces.html) for a list of the standard AWS namespaces.\r*Example*:\rIn this example, we're creating a simple `FluentMetric` in a namespace called `Performance`. This means that every time we log a metric with `m`, we will automatically log it to the `Performance` namespace.\r```sh\rfrom fluentmetrics import FluentMetric\rm = FluentMetric().with_namespace('Performance')\r```\r#### Metric Names\rThe metric name is the thing you are actually logging. Each value that you log must be tied to a metric name. When you log a custom metric with a new metric name, the name will automatically be created if it doesn't already exist. Click [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/viewing_metrics_with_cloudwatch.html) to see existing metrics that can help you define names for your custom metrics.\r*Example*:\rIn this example, we're logging two metrics called `StartupTime` and `StuffTime` to the `Performance` namespace (we only needed to define the namespace once).\r```sh\rm = FluentMetric().with_namespace('Performance')\rm.log(MetricName='StartupTime', Value=27, Unit='Seconds')\rdo_stuff()\rm.log(MetricName='StuffTime', Value=12000, Unit='Milliseconds')\r```\r#### Values\rObviously we need to log a value with each metric. This needs to be a number since we convert this value to a `float` before sending to CloudWatch. \r**IMPORTANT**: When logging multiple values for the same custom metric within a minute, CloudWatch aggregates an average over a minute. Click [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html#publishingDataPoints) for more details.\r#### Dimensions\rA dimension defines how you want to slice and dice the metric. These are simply name-value pairs and you can define up to 10 per metric. Click [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html#usingDimensions) for more details on using dimensions.\r**IMPORTANT:** When you define multiple dimensions, CloudMetrics attaches all of those dimensions to the metric as a single combined dimension set--think of them as an aggregate primary key. For example, if you log a metric with the dimensions `os = 'linux'` and `flavor='ubunutu'` you will only be able to aggregate by **both** `os` and `flavor`. You **cannot** aggregate only by just `os` or just `flavor`. `FluentMetrics` solves this problem by automatically logging three metrics--one for `os`, one for `flavor` and then one for the combied dimensions, giving you maximum flexibility.\r*Example*:\rIn this example, we're logging boot/restart time metrics. When this code executes, we will end up with 6 metrics:\r* `BootTime` and `RestartTime` for `os`\r* `BootTime` and `RestartTime` for `instance-id`\r* `BootTime` and `RestartTime` for 'os` and `instance-id`\r```sh\rm = FluentMetric().with_namespace('Performance/EC2') \\\r                  .with_dimension('os', 'linux'). \\\r                  .with_dimension('instance-id', 'i-123456')\rboot_time = start_instance()\rm.log(MetricName='BootTime', Value=boot_time, Unit='Milliseconds')\rrestart_time = restart_instance()\rm.log(MetricName='RestartTime', Value=restart_time, Unit='Milliseconds')\r```\r#### Units\rCloudWatch has built-in logic to provide meaning to the metric values. We're not just logging a value--we're looking a value of some unit. By defining the unit type, CloudWatch will know how to properly present, aggregate and compare that value with other values. For example, if you submit a value with unit `Milliseconds`, then it can properly aggregate it up to seconds, minutes or hours. This is a list of the most current valid list of units. A more up-to-date list should be available [here](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html) under the **Unit** section,.\r```sh\r\"Seconds\"|\"Microseconds\"|\"Milliseconds\"|\"Bytes\"|\"Kilobytes\"|\"Megabytes\"|\r\"Gigabytes\"|\"Terabytes\"|\"Bits\"|\"Kilobits\"|\"Megabits\"|\"Gigabits\"|\"Terabits\"|\r\"Percent\"|\"Count\"|\"Bytes/Second\"|\"Kilobytes/Second\"|\"Megabytes/Second\"|\r\"Gigabytes/Second\"|\"Terabytes/Second\"|\"Bits/Second\"|\"Kilobits/Second\"|\r\"Megabits/Second\"|\"Gigabits/Second\"|\"Terabits/Second\"|\"Count/Second\"|\"None\"\r```\r##### Unit Shortcut Methods\rIf you don't want to type out the individual unit name, there are shortcut methods for each unit.\r\r```sh\rm = FluentMetric().with_namespace('Performance/EC2') \\\r                  .with_dimension('os', 'linux'). \\\r                  .with_dimension('instance-id', 'i-123456')\rm.seconds(MetricName='CompletionInSeconds', Value='1000')\rm.microseconds(MetricName='CompletionInMicroseconds', Value='1000')\rm.milliseconds(MetricName='CompletionInMilliseconds', Value='1000')\rm.bytes(MetricName='SizeInBytes', Value='1000')\rm.kb(MetricName='SizeInKb', Value='1000')\rm.mb(MetricName='SizeInMb', Value='1000')\rm.gb(MetricName='SizeInGb', Value='1000')\rm.tb(MetricName='SizeInTb', Value='1000')\rm.bits(MetricName='SizeInBits', Value='1000')\rm.kbits(MetricName='SizeInKilobits', Value='1000')\rm.mbits(MetricName='SizeInMegabits', Value='1000')\rm.gbits(MetricName='SizeInGigabits', Value='1000')\rm.tbits(MetricName='SizeInTerabits', Value='1000')\rm.pct(MetricName='Percent', Value='20')\rm.count(MetricName='ItemCount', Value='20')\rm.bsec(MetricName='BandwidthBytesPerSecond', Value='1000')\rm.kbsec(MetricName='BandwidthKilobytesPerSecond', Value='1000')\rm.mbsec(MetricName='BandwidthMegabytesPerSecond', Value='1000')\rm.gbsec(MetricName='BandwidthGigabytesPerSecond', Value='1000')\rm.tbsec(MetricName='BandwidthTerabytesPerSecond', Value='1000')\rm.bitsec(MetricName='BandwidthBitsPerSecond', Value='1000')\rm.kbitsec(MetricName='BandwidthKilobitsPerSecond', Value='1000')\rm.mbitsec(MetricName='BandwidthMegabitsPerSecond', Value='1000')\rm.gbitsec(MetricName='BandwidthGigabitsPerSecond', Value='1000')\rm.tbitsec(MetricName='BandwidthTerabitsPerSecond', Value='1000')\rm.countsec(MetricName='ItemCountsPerSecond', Value='1000')\r```\r#### Timers\rOne of the most common uses of logging is measuring performance. FluentMetrics allows you to activate multiple built-in timers by name and log the elapsed time in a single line of code. **NOTE:** The elapsed time value is automatically stored as unit `Milliseconds`.\r*Example*:\rIn this example, we're starting timers `workflow` and `job1` at the same time. Timers start as soon as you create them and never stop running. When you call `elapsed`, `FluentMetrics` will log the number of elapsed milliseconds with the `MetricName`.\r```sh\rm = FluentMetric()\rm.with_timer('workflow').with_timer('job1')\rdo_job1()\rm.elapsed(MetricName='Job1CompletionTime', TimerName='job1')\rm.with_timer('job2')\rdo_job2()\rm.elapsed(MetricName='Job2CompletionTime', TimerName='job2')\rfinish_workflow()\rm.elapsed(MetricName='WorkflowCompletionTime', TimerName='workflow')\r```\r#### Metric Stream ID\rA key feature of `FluentMetrics` is the metric stream ID. This ID will be added as a dimension and logged with every metric. The benefit of this dimension is to provide a distinct stream of metrics for an end-to-end operation. When you create a new instance of `FluentMetric`, you can either pass in your own value or `FluentMetrics` will generate a GUID. In CloudWatch, you can then see all of the metrics for a particular stream ID in chronological order. A metric stream can be a job, or a server or any way that you want to unique group a contiguous stream of metrics.\r*Example*:\rIn this example, we'll have two metrics in the `Performance` namespace, each with metric stream ID of `abc-123`. We can then go to CloudWatch and filter by that stream ID to see the entire operation performance at a glance.\r```sh\rm = FluentMetric().with_namespace('Performance').with_stream_id('abc-123')\rm.log(MetricName='StartupTime', Value=100, Unit='Seconds')\rdo_work()\rm.log(MetricName='WorkCompleted', Value=1000, Unit='Milliseconds')\r```\r## Use Case Quickstart\r#### #1: Least Amount of Code Required to Log a Metric\rThis is the minimal amount of work you need to log--create a `FluentMetric` with a namespace, then log a value.\r**Result**: This code will log a single value `100` for `ActiveServerCount` in the `Stats` namespace.\r```sh\rfrom fluentmetrics.metric import FluentMetric\rm = FluentMetric().with_namespace('Stats')\rm.log(MetricName='ActiveServerCount', Value='100', Unit='Count')\r```\r#### #2: Logging Multiple Metrics to the Same Namespace\rIf you are logging multiple metrics to the same namespace, this is a great use case for `FluentMetrics`. You only need to create one instance of `FluentMetric` and specify a different metric name when you call `log`. \r**Result**: This code will log a single value `100` for `ActiveServerCount` in the `Stats` namespace.\r```sh\rfrom fluentmetrics.metric import FluentMetric   \rm = FluentMetric().with_namespace('Stats')\rm.log(MetricName='ActiveServerCount', Value='10', Unit='Count') \\\r .log(MetricName='StoppedServerCount', Value='20', Unit='Count') \\\r .log(MetricName='ActiveLinuxCount', Value='50', Unit='Count') \\\r .log(MetricName='ActiveWindowsCount', Value='50', Unit='Count')\r````\r#### #3: Logging Counts\rIn the previous example, we logged a metric and identified the unit `Count`. Instead of specifying the unit, you can specify the type of object\r**Result**: This code will log a single value `100` for `ActiveServerCount` in the `Stats` namespace.\r\r```sh\rfrom fluentmetrics.metric import FluentMetric\rm = FluentMetric().with_namespace('Stats')\rm.count(MetricName='ActiveServerCount', Value='10')\r```",
    "docs_url": null,
    "download_url": "https://github.com/awslabs/cloudwatch-fluent-metrics/cloudwatch-fluent-metrics-v0.1.tgz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/awslabs/cloudwatch-fluent-metrics",
    "keywords": "metrics,logging,aws,cloudwatch",
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "cloudwatch-fluent-metrics",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/cloudwatch-fluent-metrics/",
    "release_url": "https://pypi.org/project/cloudwatch-fluent-metrics/0.1.8/",
    "requires_python": null,
    "summary": "AWS CloudWatch Fluent Metrics",
    "version": "0.1.8"
  },
  "releases": {
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b42d05df70b82c854df5c272871bbf00",
          "sha256": "4e01f30ece7ce7914e4774d9d7671e53bacb5ecd7eb3ece00688d344b1fcb0ec"
        },
        "downloads": 19,
        "filename": "cloudwatch-fluent-metrics-0.1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "b42d05df70b82c854df5c272871bbf00",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6106,
        "upload_time": "2017-04-01T13:11:40",
        "url": "https://files.pythonhosted.org/packages/2c/e1/0929474b0077f592656b0ced8d66226dae01baa8e84f8cce902773239a45/cloudwatch-fluent-metrics-0.1.4.tar.gz"
      }
    ],
    "0.1.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "53a2f8860a59063a49026e87af59896c",
          "sha256": "2e6d27c8d974e89996f619ceb4ff4adb8ef16d48cef4b39d4b1ac423b19bb0cb"
        },
        "downloads": 20,
        "filename": "cloudwatch-fluent-metrics-0.1.5.tar.gz",
        "has_sig": false,
        "md5_digest": "53a2f8860a59063a49026e87af59896c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8257,
        "upload_time": "2017-04-01T13:24:11",
        "url": "https://files.pythonhosted.org/packages/de/60/43cf0ad9656e52a01f8e845b1f000e28db9cc2371b34e9aadf682232bc0f/cloudwatch-fluent-metrics-0.1.5.tar.gz"
      }
    ],
    "0.1.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6729a176f80046714ab3717cd2624ff0",
          "sha256": "a402eb9bcc77d128329ebfff078c0db490f375d725985a6e0cc5874f4074a665"
        },
        "downloads": 20,
        "filename": "cloudwatch-fluent-metrics-0.1.6.tar.gz",
        "has_sig": false,
        "md5_digest": "6729a176f80046714ab3717cd2624ff0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8249,
        "upload_time": "2017-04-01T13:30:06",
        "url": "https://files.pythonhosted.org/packages/82/c4/06b2a34e93d01ba3d5ab2de45d62d651e3b45782968f756aee0d128eadd1/cloudwatch-fluent-metrics-0.1.6.tar.gz"
      }
    ],
    "0.1.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a848de0eb2eb840867073f5f48848122",
          "sha256": "b6459759ac9ef247e9f074c01db432a5167d692a629ea560c673c1f2176a9412"
        },
        "downloads": 23,
        "filename": "cloudwatch-fluent-metrics-0.1.7.tar.gz",
        "has_sig": false,
        "md5_digest": "a848de0eb2eb840867073f5f48848122",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8222,
        "upload_time": "2017-04-01T13:46:06",
        "url": "https://files.pythonhosted.org/packages/66/83/e8094ea08205b67e088416007a19081e1106b7bbc40383d56dd7050534c7/cloudwatch-fluent-metrics-0.1.7.tar.gz"
      }
    ],
    "0.1.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7bd455296eb801b6d0ce87667c1bec58",
          "sha256": "22511f60805a109ba077415f1c5b08bc1198f37451daf87ad7c9d40b08d1f6ce"
        },
        "downloads": 0,
        "filename": "cloudwatch-fluent-metrics-0.1.8.tar.gz",
        "has_sig": false,
        "md5_digest": "7bd455296eb801b6d0ce87667c1bec58",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8228,
        "upload_time": "2017-05-24T14:13:58",
        "url": "https://files.pythonhosted.org/packages/c0/61/8a90b3dc3cb3ca944735ea004faa7bc0cfe6f4931e527a018bb8b41ee713/cloudwatch-fluent-metrics-0.1.8.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7bd455296eb801b6d0ce87667c1bec58",
        "sha256": "22511f60805a109ba077415f1c5b08bc1198f37451daf87ad7c9d40b08d1f6ce"
      },
      "downloads": 0,
      "filename": "cloudwatch-fluent-metrics-0.1.8.tar.gz",
      "has_sig": false,
      "md5_digest": "7bd455296eb801b6d0ce87667c1bec58",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8228,
      "upload_time": "2017-05-24T14:13:58",
      "url": "https://files.pythonhosted.org/packages/c0/61/8a90b3dc3cb3ca944735ea004faa7bc0cfe6f4931e527a018bb8b41ee713/cloudwatch-fluent-metrics-0.1.8.tar.gz"
    }
  ]
}