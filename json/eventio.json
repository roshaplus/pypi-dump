{
  "info": {
    "author": "Dominik Neise, Maximilian Noethe",
    "author_email": "neised@phys.ethz.ch",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "pyeventio |Build Status|\n========================\n\nA Python (read-only) implementation of the EventIO data format invented\nby Konrad Bernloehr as used for example by the IACT extension for\nCORSIKA: https://www.ikp.kit.edu/corsika\n\nReading the data of the following Objects is currently supported:\n\n+--------+-------------------------------+\n| Code   | Description                   |\n+========+===============================+\n| 1200   | CORSIKA Run Header            |\n+--------+-------------------------------+\n| 1201   | CORSIKA Telescope Positions   |\n+--------+-------------------------------+\n| 1202   | CORSIKA Event Header          |\n+--------+-------------------------------+\n| 1203   | CORSIKA Array Offsets         |\n+--------+-------------------------------+\n| 1204   | CORSIKA Telescope Data        |\n+--------+-------------------------------+\n| 1205   | IACT Photons                  |\n+--------+-------------------------------+\n| 1209   | CORSIKA Event End Block       |\n+--------+-------------------------------+\n| 1210   | CORSIKA Run End Block         |\n+--------+-------------------------------+\n| 1211   | CORSIKA Longitudinal Block    |\n+--------+-------------------------------+\n| 1212   | CORSIKA Input Card            |\n+--------+-------------------------------+\n\nThe following blocks are known, but reading their data is not (yet)\nimplemented:\n\n+--------+-----------------------+\n| Code   | Description           |\n+========+=======================+\n| 1206   | IACT Layout           |\n+--------+-----------------------+\n| 1207   | IACT Trigger Time     |\n+--------+-----------------------+\n| 1208   | IACT PhotoElectrons   |\n+--------+-----------------------+\n\ninstall with\n------------\n\n::\n\n    pip install eventio\n\nOpen a file produced by the IACT CORSIKA extension\n--------------------------------------------------\n\nFirst Example\n~~~~~~~~~~~~~\n\nOne may iterate over an instance of ``IACTFile`` class in order to\nretrieve events. Events have a small number of fields. The most\nimportant one is the ``photon_bunches`` field, which is dictionary\nmapping telescope ids to a simple structured ``np.array``, containing\nthe typical parameters Cherekov photons bunches in Corsika have, like:\n\n-  ``x``, ``y`` coordinate in the observation plane (in cm)\n-  direction cosine ``cx``, ``cy`` in x and y direction of the incident\n   angle of the photon\n-  wavelength ``lambda`` of the photon (in nm)\n-  number of ``photons`` associated with this bunch\n-  the ``time`` since the first interaction (in ns, I believe)\n-  the production height of the photon bunch (called ``zem``)\n-  a bool flag, whether the photon was scattered in the atmosphere\n\nAn event has the following attributes: \\* ``header``: a dictionary\ncontaining the Corsika Event Header data \\* ``end_block``: a numpy array\ncontaining the Corsika Event End data \\* ``time_offset``, ``x_offset``,\n``y_offsett``, the offset of the array\n\nThis prints the number of photons for the first telescope in every\nevent:\n\n.. code:: {python}\n\n    import eventio\n\n    with eventio.IACTFile('data/telescope.dat') as f:\n        for event in f:\n            print(event.photon_buches[0]['photons'].sum())\n\nSecond Example\n~~~~~~~~~~~~~~\n\nIf you like to plot the origin of the Cherenkov photons of the first\nevent in file ``data/telescope.dat`` for the first telescope, have a\nlook into `this\nexample <https://github.com/fact-project/pyeventio/blob/new_api/examples/plot_production_3d.py>`__\n\nIt might look similar to this picture:\n\n.. figure:: https://raw.githubusercontent.com/fact-project/pyeventio/master/a_shower.png\n   :alt: an example shower\n\n   an example shower\n\nLow level access\n----------------\n\nFor more low level access to the items of an ``EventIO`` file (or to\nimplement a higher level abstraction like ``IACTFile``) one can use the\n``EventIOFile`` class which gives access to the ``Objects`` and\n``subitems`` in ``EventIO`` files.\n\nThis is how our test file looks like in the low level view:\n\n::\n\n    In [1]: import eventio\n\n    In [2]: eventio.EventIOFile('eventio/resources/one_shower.dat')\n    Out[2]: \n    EventIOFile(path=eventio/resources/one_shower.dat, objects=[\n      CorsikaRunHeader(first=0, length=1096)\n      CorsikaInputCard(first=1112, length=448)\n      CorsikaTelescopeDefinition(first=1576, length=20)\n      CorsikaEventHeader(first=1612, length=1096)\n      CorsikaArrayOffsets(first=2724, length=16)\n      CorsikaTelescopeData(first=2756, length=6136, subitems=1)\n      CorsikaEventEndBlock(first=8908, length=1096)\n      CorsikaRunEndBlock(first=10020, length=16)\n    ])\n\nAnd this is how a ``sim_telarray`` file looks like (sim\\_telarray\nobjects are not implemted yet):\n\n::\n\n    In [3]: eventio.EventIOFile('gamma_test.simtel')\n    Out[3]: \n    EventIOFile(path=../../CTA/ctapipe/ctapipe-extra/datasets/gamma_test.simtel, objects=[\n      UnknownObject[70](first=0, length=11960, subitems=131)\n      UnknownObject[70](first=11976, length=1744732, subitems=21526)\n      UnknownObject[70](first=1756724, length=838000, subitems=11186)\n      UnknownObject[2000](first=2594740, length=1876)\n        ...\n      UnknownObject[2010](first=50007852, length=1782080, subitems=19)\n      UnknownObject[2021](first=51789948, length=12)\n      UnknownObject[2026](first=51789976, length=3536)\n      UnknownObject[2010](first=51793528, length=1560656, subitems=9)\n    ])\n\n.. |Build Status| image:: https://travis-ci.org/fact-project/pyeventio.svg?branch=master\n   :target: https://travis-ci.org/fact-project/pyeventio\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/fact-project/pyeventio",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "eventio",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/eventio/",
    "release_url": "https://pypi.org/project/eventio/0.3.0/",
    "requires_python": "",
    "summary": "Python read-only implementation of the EventIO file format",
    "version": "0.3.0"
  },
  "releases": {
    "0.2.3": [],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8a404c2dee323c675464da051da0d428",
          "sha256": "fafee83ab9625f12024919eb2df316c556bd9cdbecdcfd0027e717fb9767ad91"
        },
        "downloads": 317,
        "filename": "eventio-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8a404c2dee323c675464da051da0d428",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 421669,
        "upload_time": "2016-11-25T12:12:27",
        "url": "https://files.pythonhosted.org/packages/09/01/410fc48e838d1fbe0b425312f7d714d427aa0fefa5e17e1f66b2bcd8fa6d/eventio-0.3.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8a404c2dee323c675464da051da0d428",
        "sha256": "fafee83ab9625f12024919eb2df316c556bd9cdbecdcfd0027e717fb9767ad91"
      },
      "downloads": 317,
      "filename": "eventio-0.3.0.tar.gz",
      "has_sig": false,
      "md5_digest": "8a404c2dee323c675464da051da0d428",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 421669,
      "upload_time": "2016-11-25T12:12:27",
      "url": "https://files.pythonhosted.org/packages/09/01/410fc48e838d1fbe0b425312f7d714d427aa0fefa5e17e1f66b2bcd8fa6d/eventio-0.3.0.tar.gz"
    }
  ]
}