{
  "info": {
    "author": "SUNSCRAPERS",
    "author_email": "info@sunscrapers.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Software Development :: Testing"
    ],
    "description": "djet\n====\n\n|Build Status|\n|Coverage|\n\n**Django Extended Tests** is set of helpers for easy testing of Django apps.\n\nMain features:\n\n- easy unit testing of Django views (``ViewTestCase``)\n- additional useful assertions for testing:\n\n  - response status codes (``StatusCodeAssertionsMixin``)\n  - emails (``EmailAssertionsMixin``)\n  - messages (``MessagesAssertionsMixin``)\n  - model instances (``InstanceAssertionsMixin``)\n\n- handy helpers for testing file-related code (``InMemoryStorageMixin`` and others)\n- smooth integration with Django REST Framework authentication mechanisim (``APIViewTestCase``)\n\nDeveloped by `SUNSCRAPERS <http://sunscrapers.com>`__ with passion & patience.\n\nInstallation\n============\n\nTo install **djet** use ``pip``:\n\n``$ pip install djet``\n\nWhy djet?\n=========\n\nTesting views\n-------------\n\nDjango test client performs integration tests. All middlewares, resolvers,\ndecorators and so on are tested. Just a single failure in a middleware can\nbreak all the view tests.\n\n`One technique <http://tech.novapost.fr/django-unit-test-your-views-en.html>`__\nof performing the tests was presented at DjangoCon Europe 2013 Warsaw.\nWe have always used a slightly different method, which we would like to present\nas an alternative to the DjangoCon approach.\n\n**djet** makes performing unit tests for your views easier by providing ``ViewTestCase``.\nInstead of ``self.client`` you will use ``self.factory`` which is an\nextended ``RequestFactory`` with overridden shortcuts for creating requests\n(eg. ``path`` is not required parameter).\n\nSometimes you would need middlewares to be applied in order to test the view.\nThere is an option that helps specify which middlewares should be used in\na single test or a whole test case by applying ``middleware_classes`` argument.\nThis argument should be a list of middleware classes (e.g. ``SessionMiddleware``)\nor tuples where first argument is middleware class and rest items are middleware\ntypes (from ``MiddlewareType`` class). In this case only indicated middleware methods\nwill be call.\n\nAdditional assertions\n---------------------\n\nThere are also some additional useful assertions in different mixins in\n``djet.assertions`` module.\n\nCurrently there are ``StatusCodeAssertionsMixin``, ``EmailAssertionsMixin``,\n``MessagesAssertionsMixin`` and ``InstanceAssertionsMixin``\nfull of useful assertions.\n\nRemember that if you want to use assertions eg. from ``MessagesAssertionsMixin``\nyou must also add ``middleware_classes`` required by messages to your test case.\nWe do not add them for you in mixin, because we believe those mixins shouldn't\nmess with middlewares, as they are required by your view in fact.\n\nHelpers for testing files uploads\n---------------------------------\n\nThere are three main annoying things while testing files related things in Django\nand ``djet.files`` module helps with all of them\n\nFirst thing - you will not need any files put somewhere next to fixtures anymore.\n``create_inmemory_file`` and ``create_inmemory_image`` are ready to use.\nThose helpful functions are taken from\n`great blog post by Piotr Mali\u0144ski <http://www.rkblog.rk.edu.pl/w/p/temporary-files-django-tests-and-fly-file-manipulation/>`__\nwith just a few small changes.\n\nYou can also use ``InMemoryStorage`` which deals with files being saved to disk\nduring tests and speed ups tests by keeping them in memory.\n\n``InMemoryStorageMixin`` does another great thing.\nIt replaces ``DEFAULT_FILE_STORAGE`` with ``InMemoryStorage`` for you and also\nremoves all files after test ``tearDown``, so you will no longer see any files\ncrossing between tests. You can also give here any storage you want,\nit only should implement ``clear`` method which is invoked after tearDown.\n``InMemoryStorageMixin`` cannot be used with bare ``unittest.TestCase``,\nyou have to use ``TestCase`` from Django or ``ViewTestCase`` from **djet**.\n\nOther utils\n-----------\n\n``utils.refresh`` helps you get newer version of object from database\nin a very simple way.\n\nExamples\n========\n\nWe encourage you to import whole djet modules, not classes.\n\n.. code:: python\n\n    from djet import assertions, testcases\n    from django.contrib import messages\n    from django.contrib.messages.middleware import MessageMiddleware\n    from django.contrib.sessions.middleware import SessionMiddleware\n    from yourapp.views import YourView\n    from yourapp.factories import UserFactory\n\n    class YourViewTest(assertions.StatusCodeAssertionsMixin,\n                       assertions.MessagesAssertionsMixin,\n                       testcases.ViewTestCase):\n        view_class = YourView\n        view_kwargs = {'some_kwarg': 'value'}\n        middleware_classes = [\n            SessionMiddleware,\n            (MessageMiddleware, testcases.MiddlewareType.PROCESS_REQUEST),\n        ]\n\n        def test_post_should_redirect_and_add_message_when_next_parameter(self):\n            request = self.factory.post(data={'next': '/'}, user=UserFactory())\n\n            response = self.view(request)\n\n            self.assert_redirect(response, '/')\n            self.assert_message_exists(request, messages.SUCCESS, 'Success!')\n\nIf you want to test function-based view you should do it like this:\n\n.. code:: python\n\n    class YourFunctionViewTest(testcases.ViewTestCase):\n        view_function = your_view\n\nThere is special ``create_view_object`` helper for testing single view methods,\nwhich applies the view_kwargs specified to created view object.\nYou can also provide request, args and kwargs here and they will be bounded to view,\nlike it normally happens in dispatch method.\n\nYou can always create view object with different kwargs by using\n``self.view_class`` constructor.\n\n.. code:: python\n\n    class YourViewObjectMethodTest(testcases.ViewTestCase):\n        view_class = YourView\n        view_kwargs = {'redirect_url': '/'}\n\n        def test_some_view_method(self):\n            request = self.factory.get()\n            view_object = self.create_view_object(request, 'some arg', pk=1)\n\n            view_object.some_method()\n\n            self.assertTrue(view_object.some_method_called)\n\nAn example of test using all files goodies from **djet**:\n\n.. code:: python\n\n    from djet import files\n    from django.core.files.storage import default_storage\n    from django.test.testcases import TestCase\n\n    class YourFilesTests(files.InMemoryStorageMixin, TestCase):\n\n        def test_creating_file(self):\n            created_file = files.create_inmemory_file('file.txt', 'Avada Kedavra')\n\n            default_storage.save('file.txt', created_file)\n\n            self.assertTrue(default_storage.exists('file.txt'))\n\nYou can also make assertions about the lifetime of model instances.\nThe ``assert_instance_created`` and ``assert_instance_deleted`` methods of\n``InstanceAssertionsMixin`` can be used as context managers. They ensure\nthat the code inside the ``with`` statement resulted in either creating\nor deleting a model instance.\n\n.. code:: python\n\n    from django.test import TestCase\n    from djet import assertions\n    from yourapp.models import YourModel\n\n    class YourModelTest(assertions.InstanceAssertionsMixin, TestCase):\n\n        def test_model_instance_is_created(self):\n            with self.assert_instance_created(YourModel, field='value'):\n                YourModel.objects.create(field='value')\n\nUtils example:\n\n.. code:: python\n\n    from djet import utils, testcases\n    from yourapp.models import Flower\n    from yourapp.views import ChangeFlowerView\n\n    class ChangeFlowerViewTest(testcases.ViewTestCase):\n\n        def test_changing_flower_color(self):\n            flower = Flower.objects.create(color='orange')\n            post_data = {\n                'color': 'blue',\n                'id': flower.pk\n            }\n            request = self.factory.post(data=post_data)\n\n            self.view(request)\n\n            changed_flower = utils.refresh(flower)\n            self.assertEqual('blue', changed_flower.color)\n\nBelow there is an example of Django REST Framework authentication mocking. Pay attantion to ``djet.restframework.APIViewTestCase`` base class and ``user`` parameter in request factory call.\n\n.. code:: python\n\n    from django.contrib.auth import get_user_model\n    from djet import assertions, utils, restframework\n    import views\n\n    class SetUsernameViewTest(restframework.APIViewTestCase,\n                              assertions.StatusCodeAssertionsMixin):\n        view_class = views.SetUsernameView\n  \n        def test_post_should_set_new_username(self):\n            password = 'secret'\n            user = get_user_model().objects.create_user(username='john', password=password)\n            data = {\n                'new_username': 'ringo',\n                'current_password': password,\n            }\n            request = self.factory.post(user=user, data=data)\n    \n            response = self.view(request)\n    \n            self.assert_status_equal(response, status.HTTP_200_OK)\n            user = utils.refresh(user)\n            self.assertEqual(data['new_username'], user.username)\n\nFor more comprehensive examples we really recommend to `check out how djoser library tests are crafted <https://github.com/sunscrapers/djoser/blob/master/testproject/testapp/tests.py>`__.\n\nDevelopment\n===========\n\nTo start developing on **djet**, clone the repository:\n\n``$ git clone git@github.com:sunscrapers/djet.git``\n\nIn order to run the tests create virtualenv, go to repo directory and then:\n\n``$ pip install django``\n\n``$ pip install -r requirements.txt``\n\n``$ cd testproject``\n\n``$ ./manage.py test``\n\n``$ tox``\n\n.. |Build Status| image:: https://travis-ci.org/sunscrapers/djet.png\n   :target: https://travis-ci.org/sunscrapers/djet\n\n.. |Coverage| image:: https://coveralls.io/repos/sunscrapers/djet/badge.png?branch=master\n   :target: https://coveralls.io/r/sunscrapers/djet?branch=master\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/sunscrapers/djet",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "djet",
    "platform": "",
    "project_url": "https://pypi.org/project/djet/",
    "release_url": "https://pypi.org/project/djet/0.2.1/",
    "requires_python": "",
    "summary": "Set of helpers for easy testing of Django apps.",
    "version": "0.2.1"
  },
  "releases": {
    "0.0.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "556900e3d58d7e7beb666e194e9923a6",
          "sha256": "61563cef69b3a432e2b77cb098af431b036b8cc5b7d2e0b1db8796f34361e921"
        },
        "downloads": 8818,
        "filename": "djet-0.0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "556900e3d58d7e7beb666e194e9923a6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8407,
        "upload_time": "2014-10-07T07:53:52",
        "url": "https://files.pythonhosted.org/packages/cf/0b/940dd6f1b20927b7a273a8b0349e59e4519c851cd22cf58e482bade54058/djet-0.0.10.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b63f3f1dec853f113c234918ccde3aaf",
          "sha256": "b8a38cb35ff52d156b634622c901b1ad7dddb26fd57803f07b0b69a1046995dd"
        },
        "downloads": 2354,
        "filename": "djet-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "b63f3f1dec853f113c234918ccde3aaf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3554,
        "upload_time": "2013-07-24T09:07:22",
        "url": "https://files.pythonhosted.org/packages/c8/dc/a92764e612b42a462ae36a8dd696cd242aff0a2c83da8e635ac101056210/djet-0.0.2.tar.gz"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "40417ea9641cfd8911565ece91070d3d",
          "sha256": "e4f2c81cf5cadf2e1cc8989c42343d89070ac1fab888b9d9f8f14bb13fe8dbb7"
        },
        "downloads": 2541,
        "filename": "djet-0.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "40417ea9641cfd8911565ece91070d3d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6111,
        "upload_time": "2013-07-25T12:03:33",
        "url": "https://files.pythonhosted.org/packages/31/8c/779a060689f118996e3b54631cf801c079ab7a447f86b5c9a2c057245cca/djet-0.0.3.tar.gz"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7e5dcb313b1da73f226b2fc83e0bd103",
          "sha256": "79484696098eda44aad787a6a8dd6cd24c383b725b924781b4afa080ba57aae7"
        },
        "downloads": 2261,
        "filename": "djet-0.0.4.tar.gz",
        "has_sig": false,
        "md5_digest": "7e5dcb313b1da73f226b2fc83e0bd103",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6359,
        "upload_time": "2013-10-28T09:11:36",
        "url": "https://files.pythonhosted.org/packages/6a/19/777dd2738a38e1a5dbb390dbfc1dcc77b9db6b41e09b010c59b948d389ca/djet-0.0.4.tar.gz"
      }
    ],
    "0.0.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2a83c99a0807c367be68383b9829f6f6",
          "sha256": "2e773405146df6e48b516098db1f83579b65fbe08ffd9e824d3c1518f40dd1a0"
        },
        "downloads": 2563,
        "filename": "djet-0.0.5.tar.gz",
        "has_sig": false,
        "md5_digest": "2a83c99a0807c367be68383b9829f6f6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6475,
        "upload_time": "2013-11-07T15:04:51",
        "url": "https://files.pythonhosted.org/packages/3d/d8/94787c9cdb7749d032db92331bdfae1fa3820dd7ba51904aa781293ef855/djet-0.0.5.tar.gz"
      }
    ],
    "0.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b647db96adf9aceb88355e2f4fa4bd94",
          "sha256": "caaa779a91180caccfc124554fcba3a996917c594fcafe72237a7009f33f8b45"
        },
        "downloads": 2210,
        "filename": "djet-0.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b647db96adf9aceb88355e2f4fa4bd94",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6685,
        "upload_time": "2013-11-14T13:39:28",
        "url": "https://files.pythonhosted.org/packages/54/bd/f4a3767499b63dd86231e36cb36be182fb00d1b3b135cb02b00a24da0f91/djet-0.0.6.tar.gz"
      }
    ],
    "0.0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5f267ab91066e074a7937ce783f530ad",
          "sha256": "fb03dc9c908f255f75c7dd147eb26d5cce423661c64f04ba3fb3a6e583157e3c"
        },
        "downloads": 2173,
        "filename": "djet-0.0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "5f267ab91066e074a7937ce783f530ad",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6722,
        "upload_time": "2013-11-18T12:37:16",
        "url": "https://files.pythonhosted.org/packages/22/cd/f99876eda27011be6e79efad0d75418c0296d0b5effcf11c74cfc08f12f6/djet-0.0.7.tar.gz"
      }
    ],
    "0.0.8": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f4f93f87362a98beb732ab8fea338538",
          "sha256": "f825957290d60a4c16afce894b5ac6de34e86176b16c407e8c440909c0ef9f91"
        },
        "downloads": 2082,
        "filename": "djet-0.0.8.tar.gz",
        "has_sig": false,
        "md5_digest": "f4f93f87362a98beb732ab8fea338538",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7417,
        "upload_time": "2013-11-28T13:10:40",
        "url": "https://files.pythonhosted.org/packages/8d/40/d9b2df00e4de1b8a8a366a2d1598527d9baa15de706a18a7f988e2fe1a5f/djet-0.0.8.tar.gz"
      }
    ],
    "0.0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9ef82facf44f3341a0804de4de9cea25",
          "sha256": "6b5e7834fb65a85bcc7eb8eff8cda241f00fe22f1c5d99bfff24a4779a20c975"
        },
        "downloads": 5825,
        "filename": "djet-0.0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "9ef82facf44f3341a0804de4de9cea25",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8078,
        "upload_time": "2013-12-05T13:36:57",
        "url": "https://files.pythonhosted.org/packages/d5/26/503ffbb68e1b0b5f04e73097ed4d676debae9f69c18da0d6bd46136dc681/djet-0.0.9.tar.gz"
      }
    ],
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "77f4e20fb227d2feb1c9c982bfe57030",
          "sha256": "72f96e73db4c5db9ca95266d51b9f5ee9d0206f57109970c1c5a951a2a125a92"
        },
        "downloads": 2795,
        "filename": "djet-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "77f4e20fb227d2feb1c9c982bfe57030",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9212,
        "upload_time": "2015-10-17T15:12:57",
        "url": "https://files.pythonhosted.org/packages/12/5a/471e374eaf070ed337ae3a9ad1bca54e26642d8d487a2fe489d460891cd7/djet-0.1.0.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a864e7626a8dee1117ecb647dd059c05",
          "sha256": "9a08deac9949b20309b167a2ae75fbd5c256426c952aa909233ec05cdfb894f9"
        },
        "downloads": 465,
        "filename": "djet-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a864e7626a8dee1117ecb647dd059c05",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12995,
        "upload_time": "2016-09-02T11:57:22",
        "url": "https://files.pythonhosted.org/packages/a7/c4/71e9e7702f72d08f464fb632fe574d0ea2f36dd8362ea09605abab5ac5b5/djet-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "df187b2248a7996543744da5cc9f6cc6",
          "sha256": "07b8aa824f903b9b21a0f53937d2038de66e0cfc09835a957f2c4ce7b2e3c87e"
        },
        "downloads": 214,
        "filename": "djet-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "df187b2248a7996543744da5cc9f6cc6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9422,
        "upload_time": "2017-01-03T08:44:09",
        "url": "https://files.pythonhosted.org/packages/4c/97/1537f08a1cc28618eaf6cccb1b1d730ec32ac257d32d1f18da3f97c9d757/djet-0.2.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "df187b2248a7996543744da5cc9f6cc6",
        "sha256": "07b8aa824f903b9b21a0f53937d2038de66e0cfc09835a957f2c4ce7b2e3c87e"
      },
      "downloads": 214,
      "filename": "djet-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "df187b2248a7996543744da5cc9f6cc6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9422,
      "upload_time": "2017-01-03T08:44:09",
      "url": "https://files.pythonhosted.org/packages/4c/97/1537f08a1cc28618eaf6cccb1b1d730ec32ac257d32d1f18da3f97c9d757/djet-0.2.1.tar.gz"
    }
  ]
}