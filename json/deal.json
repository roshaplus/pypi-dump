{
  "info": {
    "author": "orsinium",
    "author_email": "master_fess@mail.ru",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Plugins",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)",
      "Programming Language :: Python",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Software Development :: Quality Assurance"
    ],
    "description": "Deal\n====\n\n**Deal** -- python library for `design by\ncontract <https://en.wikipedia.org/wiki/Design_by_contract>`__ (DbC)\nprogramming.\n\nThis library contain 3 main conception from DbC:\n\n-  `Precondition <https://en.wikipedia.org/wiki/Precondition>`__ --\n   condition that must always be true just prior to the execution of\n   function.\n-  `Postcondition <https://en.wikipedia.org/wiki/Postcondition>`__ --\n   condition that must always be true just after the execution of\n   function.\n-  `Invariant <https://en.wikipedia.org/wiki/Invariant>`__ -- condition\n   that can be relied upon to be true during execution of a program. In\n   this library invariant condition check in 3 cases:\n\n   1. Before class method execution.\n   2. After class method execution.\n   3. After some class attribute setting.\n\nFeatures\n--------\n\n-  Functional declaration for conditions.\n-  Custom exceptions for best usage in try-except block.\n-  Ability to set optional error message and (or) exception class.\n-  Ability to return error message from contact.\n-  Ability to use Django Form styled validators as contracts.\n-  Attribute setting validation by invariant.\n-  Validation by invariant dynamically assigned to object attributes and\n   methods.\n-  Readable source code (all decorators implemented by classes)\n\nInstallation\n------------\n\nStable:\n\n.. code:: bash\n\n    pip install deal\n\nDev:\n\n.. code:: bash\n\n    pip install -e git+https://github.com/orsinium/deal.git#egg=deal\n\nTL;DR\n-----\n\n-  ``@pre`` -- validate function arguments (pre-validation).\n-  ``@post`` -- validate function result (post-validation).\n-  ``@inv`` -- validate class methods before and after some method\n   calling and after attribute setting.\n\nExceptions structure:\n---------------------\n\n-  ContractError (inherited from built-in AssertionError)\n\n   -  PreContractError\n   -  PostContractError\n   -  InvContractError\n\nLibrary decorators doesn't catch any exceptions raised from contracts.\n\nUsage\n-----\n\nPre (``pre``, ``require``):\n\n.. code:: python\n\n    In [1]: from deal import pre, post, inv, ContractError\n\n    In [2]: @pre(lambda *args: all(map(lambda x: x > 0, args)))\n       ...: def my_sum(*args):\n       ...:     return sum(args)\n       ...:\n\n    In [3]: my_sum(2, 3, 4)\n    Out[3]: 9\n\n    In [4]: my_sum(2, -3, 4)\n    PreContractError:\n\nPost (``post``, ``ensure``):\n\n.. code:: python\n\n    In [5]: @post(lambda x: x > 0)\n       ...: def my_sum(*args):\n       ...:     return sum(args)\n       ...:\n\n    In [6]: my_sum(2, -3, 4)\n    Out[6]: 3\n\n    In [7]: my_sum(2, -3, -4)\n    PostContractError:\n\nInv (``inv``, ``invariant``):\n\n.. code:: python\n\n    In [8]: @inv(lambda obj: obj.x > 0)\n       ...: class A:\n       ...:     x = 4\n       ...:     \n\n    In [9]: a = A()\n\n    In [10]: a.x = 10\n\n    In [11]: a.x = -10\n    InvContractError:\n\n    In [12]: A\n    Out[12]: deal.core.AInvarianted\n\nCustom message:\n\n.. code:: python\n\n    In [13]: @pre(lambda x: x > 0, \"x must be > 0\")\n        ...: def f(x):\n        ...:     return x * 2\n        ...:\n\n    In [14]: f(-2)\n    PreContractError: x must be > 0\n\nCustom exception:\n\n.. code:: python\n\n    In [15]: @pre(lambda x: x > 0, exception=AssertionError(\"x must be > 0\"))\n        ...: def f(x):\n        ...:     return x * 2\n        ...:\n\n    In [16]: f(-2)\n    AssertionError: x must be > 0\n\nValidators (nearly Django Forms style, except initialization):\n\n.. code:: python\n\n    In [17]: class Validator:\n        ...:     def __init__(self, x):\n        ...:         self.x = x\n        ...:         \n        ...:     def is_valid(self):\n        ...:         if self.x <= 0:\n        ...:             self.errors = ['x must be > 0']\n        ...:             return False\n        ...:         return True\n        ...:     \n\n    In [18]: @pre(Validator)\n        ...: def f(x):\n        ...:     return x * 2\n        ...:\n\n    In [19]: f(5)\n    Out[19]: 10\n\n    In [20]: f(-5)\n    PreContractError: ['x must be > 0']\n\nReturn error message from contract:\n\n.. code:: python\n\n    In [21]: @pre(lambda x: x > 0 or \"x must be > 0\")\n        ...: def f(x):\n        ...:     return x * 2\n        ...:\n\n    In [22]: f(-5)\n    PreContractError: x must be > 0\n\nContracts chaining:\n\n.. code:: python\n\n    In [23]: @pre(lambda x: x > 0)\n       ...: @pre(lambda x: x < 10)\n       ...: def f(x):\n       ...:     return x * 2\n       ...:\n\n    In [24]: f(5)\n    Out[24]: 10\n\n    In [25]: f(-1)\n    PreContractError:\n\n    In [26]: f(12)\n    PreContractError:\n\nContracts chaining order\n------------------------\n\n-  ``@inv``: from top to bottom.\n-  ``@pre``: from top to bottom.\n-  ``@post``: from bottom to top.\n\nPerfomance\n----------\n\n**NOTICE**: ``1 \u00b5s == 1000 ns``\n\n``@pre`` and ``@post``:\n\n.. code:: python\n\n    In [27]: f = lambda x: x\n\n    In [28]: pre_f = pre(lambda x: True)(f)\n\n    In [29]: post_f = post(lambda x: True)(f)\n\n    In [30]: %timeit f(10)\n    92.3 ns \u00b1 3.62 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n\n    In [31]: %timeit pre_f(10)\n    2.07 \u00b5s \u00b1 92.5 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\n    In [32]: %timeit post_f(10)\n    2.03 \u00b5s \u00b1 18.6 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\n+1 \u00b5s\n\n``@inv``:\n\n.. code:: python\n\n    In [33]: class A:\n        ...:     x = 4\n        ...:     \n\n    In [34]: InvA = inv(lambda obj: True)(A)\n\n    In [35]: a = A()\n\n    In [36]: inv_a = InvA()\n\n    In [37]: %timeit a.x = 10\n    76.4 ns \u00b1 1.36 ns per loop (mean \u00b1 std. dev. of 7 runs, 10000000 loops each)\n\n    In [38]: %timeit inv_a.x = 10\n    6.89 \u00b5s \u00b1 408 ns per loop (mean \u00b1 std. dev. of 7 runs, 100000 loops each)\n\n+6 \u00b5s",
    "docs_url": null,
    "download_url": "https://github.com/orsinium/deal/tarball/master",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/orsinium/deal",
    "keywords": "python contracts pre post inv invariant contracts-programming decorators functional-programming design-by-contract",
    "license": "GNU Lesser General Public License v3.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "deal",
    "platform": "",
    "project_url": "https://pypi.org/project/deal/",
    "release_url": "https://pypi.org/project/deal/1.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Programming by contract library.",
    "version": "1.1.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f75afc85f080fdc7d25c60f01db498d1",
          "sha256": "d9140d775980fbf2c4753569e4fa3825d8b144d61ff83bb6cb6f79c9142ea8ba"
        },
        "downloads": -1,
        "filename": "deal-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f75afc85f080fdc7d25c60f01db498d1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6528,
        "upload_time": "2018-01-27T08:05:04",
        "url": "https://files.pythonhosted.org/packages/d2/9c/b70e4c4d23cdb76067bc0dab6f56c4088bab52c92e967a1f142e925ad10e/deal-1.0.0.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "62d858af0f47a4fb81b3de23be54fef1",
          "sha256": "716d01a30e45484b5b6e0e470c640afbe4aa6d97480d9646d84757aa9c2087da"
        },
        "downloads": -1,
        "filename": "deal-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "62d858af0f47a4fb81b3de23be54fef1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9166,
        "upload_time": "2018-02-04T05:14:19",
        "url": "https://files.pythonhosted.org/packages/44/b9/56c2ae13b55a7f5358aa3cf8fbdd12f4895ecb02ce7eb05bdd0f74529a85/deal-1.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "62d858af0f47a4fb81b3de23be54fef1",
        "sha256": "716d01a30e45484b5b6e0e470c640afbe4aa6d97480d9646d84757aa9c2087da"
      },
      "downloads": -1,
      "filename": "deal-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "62d858af0f47a4fb81b3de23be54fef1",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9166,
      "upload_time": "2018-02-04T05:14:19",
      "url": "https://files.pythonhosted.org/packages/44/b9/56c2ae13b55a7f5358aa3cf8fbdd12f4895ecb02ce7eb05bdd0f74529a85/deal-1.1.0.tar.gz"
    }
  ]
}