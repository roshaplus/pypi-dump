{
  "info": {
    "author": "Dmitry Orlov <me@mosquito.su>",
    "author_email": "me@mosquito.su",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: MacOS",
      "Operating System :: Microsoft",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Topic :: Internet",
      "Topic :: Software Development",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "WSRPC Tornado\n=============\n\n.. image:: https://travis-ci.org/wsrpc/wsrpc-tornado.svg\n    :target: https://travis-ci.org/wsrpc/wsrpc-tornado\n    :alt: Travis CI\n\n.. image:: https://img.shields.io/pypi/v/wsrpc-tornado.svg\n    :target: https://pypi.python.org/pypi/wsrpc-tornado/\n    :alt: Latest Version\n\n.. image:: https://img.shields.io/pypi/wheel/wsrpc-tornado.svg\n    :target: https://pypi.python.org/pypi/wsrpc-tornado/\n\n.. image:: https://img.shields.io/pypi/pyversions/wsrpc-tornado.svg\n    :target: https://pypi.python.org/pypi/wsrpc-tornado/\n\n.. image:: https://img.shields.io/pypi/l/wsrpc-tornado.svg\n    :target: https://pypi.python.org/pypi/wsrpc-tornado/\n\nRemote Procedure call through WebSocket between browser and tornado.\n\nFeatures\n--------\n\n* Initiating call client function from server side.\n* Calling the server method from the client.\n* Transferring any exceptions from a client side to the server side and vise versa.\n* The frontend-library are well done for usage without any modification.\n* Fully asynchronous server-side functions.\n* Thread-based websocket handler for writing fully-synchronous code (for synchronous database drivers etc.)\n* Protected server-side methods (starts with underline never will be call from clients-side directly)\n* Asynchronous connection protocol. Server or client can call multiple methods with unpredictable ordering of answers.\n\n\nInstallation\n------------\n\nInstall via pip::\n\n    pip install wsrpc-tornado\n\n\nInstall ujson if you want::\n\n    pip install ujson\n\n\n\nSimple usage\n------------\n\nAdd the backend side\n\n\n.. code-block:: python\n\n    from time import time\n    ## If you want write async tornado code import it\n    # from from wsrpc import WebSocketRoute, WebSocket, wsrpc_static\n    ## else you should use thread-base handler\n    from wsrpc import WebSocketRoute, WebSocketThreaded as WebSocket, wsrpc_static\n\n    tornado.web.Application((\n        # js static files will available as \"/js/wsrpc.min.js\".\n        wsrpc_static(r'/js/(.*)'),\n        # WebSocket handler. Client will connect here.\n        (r\"/ws/\", WebSocket),\n        # Serve other static files\n        (r'/(.*)', tornado.web.StaticFileHandler, {\n             'path': os.path.join(project_root, 'static'),\n             'default_filename': 'index.html'\n        }),\n    ))\n\n    # This class should be call by client.\n    # Connection object will be have the instance of this class when will call route-alias.\n    class TestRoute(WebSocketRoute):\n        # This method will be executed when client will call route-alias first time.\n        def init(self, **kwargs):\n            # the python __init__ must be return \"self\". This method might return anything.\n            return kwargs\n\n        def getEpoch(self):\n            # this method named by camelCase because the client can call it.\n            return time()\n\n    # stateful request\n    # this is the route alias TestRoute as \"test1\"\n    WebSocket.ROUTES['test1'] = TestRoute\n\n    # stateless request\n    WebSocket.ROUTES['test2'] = lambda *a, **kw: True\n\n    # initialize ThreadPool. Needed when using WebSocketThreaded.\n    WebSocket.init_pool()\n\n\n\nAdd the frontend side\n\n\n.. code-block:: HTML\n\n    <script type=\"text/javascript\" src=\"/js/q.min.js\"></script>\n    <script type=\"text/javascript\" src=\"/js/wsrpc.min.js\"></script>\n    <script>\n        var url = window.location.protocol===\"https:\"?\"wss://\":\"ws://\" + window.location.host + '/ws/';\n        RPC = WSRPC(url, 5000);\n        RPC.addRoute('test', function (data) { return \"Test called\"; });\n        RPC.connect();\n\n        RPC.call('test1.getEpoch').then(function (data) {\n            console.log(data);\n        }, function (error) {\n            alert(error);\n        }).done();\n\n        RPC.call('test2').then(function (data) { console.log(data); }).done();\n    </script>\n\nReverse call from Server to Client\n----------------------------------\nbackend:\n\n.. code-block:: python\n\n        def do_notify(self):\n            awesome = 'Notification for you!'\n            yield self.socket.call('notify', result=awesome)\n\nfrontend:\n\n.. code-block:: HTML\n\n    <script>\n        var url = (window.location.protocol===\"https:\"?\"wss://\":\"ws://\") + window.location.host + '/ws/';\n        RPC = WSRPC(url, 5000);\n        RPC.addRoute('notify', function (data) { return data.result; });\n        RPC.connect();\n    </script>\n\n\nExample\n+++++++\n\nExample running there demo_.\n\n\n.. _demo: https://demo.wsrpc.info/\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/wsrpc/wsrpc-aiohttp",
    "keywords": "",
    "license": "Apache Software License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "wsrpc-aiohttp",
    "platform": "all",
    "project_url": "https://pypi.org/project/wsrpc-aiohttp/",
    "release_url": "https://pypi.org/project/wsrpc-aiohttp/0.0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "WSRPC is the RPC over WebSocket for aiohttp",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.1a0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "57b70469cb294ee1ccdff3f1496858d7",
          "sha256": "992d2f5b30717a5d22a3f1752c0ebaf8e248dbb767ff769ff3f7c5b0c1d6e1bc"
        },
        "downloads": 0,
        "filename": "wsrpc-aiohttp-0.0.1a0.tar.gz",
        "has_sig": false,
        "md5_digest": "57b70469cb294ee1ccdff3f1496858d7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 31994,
        "upload_time": "2017-08-07T07:54:41",
        "url": "https://files.pythonhosted.org/packages/f2/ca/61715413199f3abcff603e3a904f7a0b1d17b480d154f49e7d2b045bc070/wsrpc-aiohttp-0.0.1a0.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "35c834f79bd7d176d10ea1c0bd735546",
          "sha256": "b5198b9281ffa3e71e3be50d7ff93e55300f2ec9a8ca005aad312252ea77e803"
        },
        "downloads": 0,
        "filename": "wsrpc_aiohttp-0.0.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "35c834f79bd7d176d10ea1c0bd735546",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 57305,
        "upload_time": "2017-08-07T17:09:56",
        "url": "https://files.pythonhosted.org/packages/ac/c7/0427e87c4a381e9d0fce3fd3411a1be7ef7012cb78ba801778a2bb97cdb7/wsrpc_aiohttp-0.0.2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "820d8524536b0cc813c3dfc666307e46",
          "sha256": "7c166688e928c8ee5358799c388570b61939381389eb6e71fd17f623b0f4742f"
        },
        "downloads": 0,
        "filename": "wsrpc-aiohttp-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "820d8524536b0cc813c3dfc666307e46",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 52186,
        "upload_time": "2017-08-07T17:07:41",
        "url": "https://files.pythonhosted.org/packages/1d/38/dc5a507912fb111c02272e6becd5fcbfe36f08b9a9c24d4c36734617edf1/wsrpc-aiohttp-0.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "35c834f79bd7d176d10ea1c0bd735546",
        "sha256": "b5198b9281ffa3e71e3be50d7ff93e55300f2ec9a8ca005aad312252ea77e803"
      },
      "downloads": 0,
      "filename": "wsrpc_aiohttp-0.0.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "35c834f79bd7d176d10ea1c0bd735546",
      "packagetype": "bdist_wheel",
      "python_version": "3.5",
      "size": 57305,
      "upload_time": "2017-08-07T17:09:56",
      "url": "https://files.pythonhosted.org/packages/ac/c7/0427e87c4a381e9d0fce3fd3411a1be7ef7012cb78ba801778a2bb97cdb7/wsrpc_aiohttp-0.0.2-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "820d8524536b0cc813c3dfc666307e46",
        "sha256": "7c166688e928c8ee5358799c388570b61939381389eb6e71fd17f623b0f4742f"
      },
      "downloads": 0,
      "filename": "wsrpc-aiohttp-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "820d8524536b0cc813c3dfc666307e46",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 52186,
      "upload_time": "2017-08-07T17:07:41",
      "url": "https://files.pythonhosted.org/packages/1d/38/dc5a507912fb111c02272e6becd5fcbfe36f08b9a9c24d4c36734617edf1/wsrpc-aiohttp-0.0.2.tar.gz"
    }
  ]
}