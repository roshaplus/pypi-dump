{
  "info": {
    "author": "Paul Wolf",
    "author_email": "paul.wolf@yewleaf.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "LogTrace\n========\n\n|Build Status|\n\nAggregate messages to produce a log entry representing a single event or\nprocedure.\n\n::\n\n    import logging\n    from logtrace import LogTrace\n\n    logger = logging.getLogger(__name__)\n    trace = LogTrace(logger=logger)\n\n    trace.add(\"Let's get started\")\n    ...\n    trace.add(\"Later, something else happens\")\n    ...\n    trace.add(\"And finally...\")\n\n    trace.emit()\n\nYou get a single log entry like this:\n\n::\n\n    [05/Jan/2018 11:11:00] DEBUG [21, .30s] Let's get started; [65, .132s] Later, something else happens; [75, .330s] And finally...\n\nThe purpose of this module is to easily asssociate log messages together\nthat belong together.\n\nInstall\n-------\n\n::\n\n    pip install logtrace\n\nNote that this only suppports Python 3. Let me know if anyone wants\nsupport for Python 2. There are no dependencies outside the Python\nStandard Library for this module.\n\nWe respect logging levels. So, the overhead of using LogTrace is minimal\nif your log level is not effective. If your log level is\n``logging.INFO`` and you call ``logtrace.emit_debug()``, almost all\noverhead is avoided minus some function call overhead and one or two\nconditional expressions.\n\nWhat LogTrace is *not*: This is *not* a logging framework. LogTrace uses\nthe standard Python ``logging`` module. All your configuration to\n``logging`` is going to be used by LogTrace. All your handlers are going\nto act exactly as before. If you use a framework like Django, you use it\njust like you do now. No changes whatever are required to your logging\nconfiguration.\n\nWe also provide other features like\n\n-  Easily generate a UUID for the logged event.\n\n-  Timings for each message.\n\n-  Frame information for each part message, like filename, function,\n   lineno\n\n-  Any logging mechanism can be used, not just standard Python logging.\n\n-  Pass structured data (json).\n\n-  Enable log messages to be parsed\n\nWe wanted to provide something that works in perfect harmony with the\nexisting Python logging module without unnecessary duplication of\nfeatures and no external dependencies (outside the PSL).\n\n::\n\n        LogTrace(logger=None,      # we'll emit output here\n                 delimiter=\"; \",   # delimiter between messages\n                 tag='',           # add a non-unique label \n                 unique_id=False,  # create a uuid to identify the log?\n             verbosity='v'     # level of output for frame information\n                )\n\n-  ``logger``: the standard logger returned from\n   ``import logging; logger   = logging.getLogger(__name__)``. You can\n   create a ``LogTrace()`` without a logger in which case it creates one\n   called ``__name__``.\n\n-  ``delimiter``: the character(s) used between messages\n\n-  ``tag``: This is a convenience to tell LogTrace() to use hash+tag at\n   the start of every entry after calling ``.emit()`` for ease of\n   searching.\n\n-  ``unique_id``: generate a uuid to associate with the final message\n   output.\n\n-  ``verbosity``: v, vv, vvv for three levels of verbosity when adding\n   frame information\n\n``LogTrace.get_uid()``: return the unique id. If one has not been set\nduring construction of the LogTrace, a uuid is generated. Otherwise, it\nreturns the existing one.\n\n``LogTrace.set_uid(uid)``: Set a unique id. This can be done by\nconstructing ``LogTrace()`` with ``unique_id=True``. This takes normally\neither a uuid or str argument.\n\n``LogTrace.add(msg, data, backup)``: Add a message to the list. This\nwill get frame information for the call depending on the verbosity\nlevel.\n\n``LogTrace.emit_string()``: return a string that is the final log\nmessage.\n\nLogTrace.emit(): call ``logger.debug(message)``\n\nLogTrace.emit\\_error): call ``logger.error(message)``\n\nLogTrace.emit\\_info(): call ``logger.info(message)``\n\nLogTrace.emit\\_debug(): call ``logger.debug(message)``\n\nLogTrace.emit\\_warning(): call ``logger.warning(message)``\n\nLogTrace.emit\\_critical(): call ``logger.critical(message)``\n\nWhen the ``LogTrace`` is created, ``time.time()`` is recorded. Whenever\n``LogTrace.add()`` is called, the time is recorded for when the message\nis added. The final message prints the number of seconds since creating.\n\nYou probably want to avoid including ``LogTrace.add()`` in loops. You\nalso probably want to create it as a local, not a module-level variable.\nPass it as a method argument rather than using a module level instance.\nIf you do want to re-use a ``LogTrace`` and clear messages, you can call\n``LogTrace.clear()``. But be aware the uid might need to be reset\ndepending on your application requirements.\n\nExtra Data\n----------\n\n``LogTrace.add()`` has an optional parameter ``data`` that takes a\ndictionary. We keep a dict in the object and ``update()`` it whenever\nthe ``data`` parameter is used. This doesn't do anything within\n``LogTrace`` itself other than maintain the ``data`` member variable.\nBut you can accumulate data and later ship the data to a service like\nAWS S3 or whatever, like this:\n\n::\n\n    logger.info(trace.emit_string(), extra=trace.data)\n\nThis would be useful if you are using a logging handler that ships the\n``logging.LogRecord`` as JSON to some service like a document oriented\ndata store, Elasticsearch, etc.\n\nTesting\n-------\n\n::\n\n    pip install pytest\n    cd logtrace\n    pytest test.py --verbose\n\nor\n\n::\n\n    python logtrace/test.py\n\nPerformance\n-----------\n\n``LogTrace()`` appends to a list of strings everytime you call\n``add()``. But it firstly calls ``inspect.getFrameInfo()`` and builds\nthe string with that information. When ``emit()`` is called, it\nconcatenates all the strings in the list separated by ``delimiter`` and\nthen calls ``logger.info()`` or whatever method is appropriate. If the\neffective level is not the current level for the method, then the list\nwill be empty and it won't do the call to the ``logger`` method.\n\n.. |Build Status| image:: https://travis-ci.org/paul-wolf/logtrace.svg?branch=master\n   :target: https://travis-ci.org/paul-wolf/logtrace",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/paul-wolf/logtrace",
    "keywords": "",
    "license": "BSD",
    "maintainer": "",
    "maintainer_email": "",
    "name": "LogTrace",
    "platform": "",
    "project_url": "https://pypi.org/project/LogTrace/",
    "release_url": "https://pypi.org/project/LogTrace/0.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Aggregate Python log messages into a single log entry.",
    "version": "0.1.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9cd35ff150edb367dbefbb7992a9e5bb",
          "sha256": "7a81e7a24816b5fbd710daafbe08a3d301613746a862aa14743b9c7825dbefde"
        },
        "downloads": -1,
        "filename": "LogTrace-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9cd35ff150edb367dbefbb7992a9e5bb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7167,
        "upload_time": "2018-01-01T11:55:20",
        "url": "https://files.pythonhosted.org/packages/5b/3b/7493fead5403364efd0b81b53525018026261e0e05f5a3cf98880fa3f6b3/LogTrace-0.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9cd35ff150edb367dbefbb7992a9e5bb",
        "sha256": "7a81e7a24816b5fbd710daafbe08a3d301613746a862aa14743b9c7825dbefde"
      },
      "downloads": -1,
      "filename": "LogTrace-0.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9cd35ff150edb367dbefbb7992a9e5bb",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 7167,
      "upload_time": "2018-01-01T11:55:20",
      "url": "https://files.pythonhosted.org/packages/5b/3b/7493fead5403364efd0b81b53525018026261e0e05f5a3cf98880fa3f6b3/LogTrace-0.1.0.tar.gz"
    }
  ]
}