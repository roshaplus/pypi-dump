{
  "info": {
    "author": "Depop",
    "author_email": "dev@depop.com",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "popget\n======\n\n|Build Status|\n\n.. |Build Status| image:: https://circleci.com/gh/depop/popget.svg?style=shield&circle-token=66ab09119c495365d662fe170e5efcc4467e3b37\n    :alt: Build Status\n\nA simple no-bells-and-whistles REST-API client.\n\nWe use this for service--to-service requests in our heterogenous\nmicroservices environment.\n\nUsage\n-----\n\nAPIClient\n~~~~~~~~~\n\nYou will sub-class ``APIClient`` to make your API. You do not need to\ninstantiate the client, all methods are class-methods.\n\neg\n\n.. code:: python\n\n    from popget.client import APIClient, GetEndpoint\n\n    class ThingServiceClient(APIClient):\n\n        base_url = 'http://things.depop.com'\n\n        get_things = GetEndpoint(\n            '/things/{user_id}/',  # url format string\n            (('type', True),),     # required querystring param (validated on call)\n        )\n\nResults in a client method you can call like:\n\n.. code:: python\n\n    data = ThingServiceClient.get_things(user_id=2345, type='cat')\n\nWhich will perform a request like:\n\n.. code:: bash\n\n    GET http://things.depop.com/things/2345/?type=cat\n\nIf response was ``\"Content-Type: application/json\"`` then ``data`` is\nalready deserialized.\n\nUnder Python 3 there is a further distinction between ``str`` and ``bytes``.\nIf the Content-Type header contains ``text/`` then the returned value\nwill be encoded to ``str`` (by underlying ``python-requests`` lib).\nOther content types will return ``bytes``.\n\nWe use ``raise_for_status`` so anything >= 400 will raise a ``requests.HTTPError``.\n\nAPIEndpoint\n~~~~~~~~~~~\n\n``APIEndpoint`` is the base class for endpoint methods. ``GetEndpoint``,\n``PostEndpoint``, ``PutEndpoint``, ``PatchEndpoint`` and ``DeleteEndpoint``\nare provided for convenience, allowing to omit the method arg.\n\nParams from url path (format string), querystring and request headers\n(format string of value portion) will be extracted and made available\nas kwargs on the resulting callable method on your client class.\n\nThis means arg names must be unique across all three sources of args.\nThis is feasible because path and header args can be freely chosen when\nimplementing the client (they are just format string identifiers rather\nthan part of the REST API itself like querystring args are).\n\ne.g.\n\n.. code:: python\n\n    from popget.client import APIClient, APIEndpoint\n\n    class ThingServiceClient(APIClient):\n\n        get_things = APIEndpoint(\n            'GET',\n            '/things/{user_id}/',  # url (format string)\n            querystring_args=(\n                ('type', True),    # required arg\n                'offset_id',       # non-required args\n                'limit',\n            ),\n            request_headers={      # added to all requests\n                'Authorization': 'Bearer {access_token}'  # (format string)\n            }\n        )\n\nThis will give you a client with a ``get_things`` method you can call like:\n\n.. code:: python\n\n    response_data = ThingServiceClient.get_things(\n        user_id=123,\n        type='cat',\n        offset_id='65345ff34e344ab53c',\n        limit=20,\n        access_token='87a64c98b62d39e8625f',\n    )\n\nYou can still pass extra args down into the ``requests`` lib on a per-call\nbasis by using ``_request_kwargs``:\n\n.. code:: python\n\n    response_data = ThingServiceClient.get_things(\n        user_id=123,\n        type='cat',\n        offset_id='65345ff34e344ab53c',\n        limit=20,\n        access_token='87a64c98b62d39e8625f',\n        _request_kwargs={\n            'headers': {\n                'X-Depop-WTF': 'something something'\n            }\n        },\n    )\n\nAnd for calls with a request body:\n\n.. code:: python\n\n    from popget.client import APIClient, PostEndpoint, FORM_ENCODED\n\n    class ThingServiceClient(APIClient):\n\n        new_thing = PostEndpoint(\n            '/things/',\n            body_required=True,\n            body_type=FORM_ENCODED,\n            request_headers={\n                'Authorization': 'Bearer {access_token}',\n                'Content-Type': 'application/json; charset=utf-8'\n            }\n        )\n\n    response_data = ThingServiceClient.new_thing(\n        access_token='87a64c98b62d39e8625f',\n        body={\n            'type': 'dog',\n            'name': 'fido',\n        }\n    )\n\nCompatibility\n-------------\n\nThis project is tested against:\n\n=========== ===\nPython 2.7   * \nPython 3.6   * \n=========== ===\n\nRunning the tests\n-----------------\n\nCircleCI\n~~~~~~~~\n\n| The easiest way to test the full version matrix is to install the\n  CircleCI command line app:\n| https://circleci.com/docs/2.0/local-jobs/\n| (requires Docker)\n\nThe cli does not support 'workflows' at the moment so you have to run\nthe two Python version jobs separately:\n\n.. code:: bash\n\n    circleci build --job python-2.7\n\n.. code:: bash\n\n    circleci build --job python-3.6\n\npy.test (single python version)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt's also possible to run the tests locally, allowing for debugging of\nerrors that occur.\n\nDecide which Python version you want to test and create a virtualenv:\n\n.. code:: bash\n\n    pyenv virtualenv 3.6.3 popget\n    pip install -r requirements-test.txt\n    py.test -v -s --ipdb tests/",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/depop/popget",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "popget",
    "platform": "",
    "project_url": "https://pypi.org/project/popget/",
    "release_url": "https://pypi.org/project/popget/1.0.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Simple REST-API client for Python.",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "068357e2bc2b52edab8c9c3cec1cdce4",
          "sha256": "9aced050b829c21a190dfb3b3864212ba165476b4f48ef01988d5f356b4d6781"
        },
        "downloads": -1,
        "filename": "popget-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "068357e2bc2b52edab8c9c3cec1cdce4",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8174,
        "upload_time": "2017-11-13T18:32:07",
        "url": "https://files.pythonhosted.org/packages/e6/c1/e9dda838e49b1ab9a1bf1c816334f18f99e5b55f218c3d6b1903f399eace/popget-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "068357e2bc2b52edab8c9c3cec1cdce4",
        "sha256": "9aced050b829c21a190dfb3b3864212ba165476b4f48ef01988d5f356b4d6781"
      },
      "downloads": -1,
      "filename": "popget-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "068357e2bc2b52edab8c9c3cec1cdce4",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8174,
      "upload_time": "2017-11-13T18:32:07",
      "url": "https://files.pythonhosted.org/packages/e6/c1/e9dda838e49b1ab9a1bf1c816334f18f99e5b55f218c3d6b1903f399eace/popget-1.0.0.tar.gz"
    }
  ]
}