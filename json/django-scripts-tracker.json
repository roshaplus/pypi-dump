{
  "info": {
    "author": "Krzysztof Falcman",
    "author_email": "dev@krzysiekf.cba.pl",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development"
    ],
    "description": "======================\nDjango Scripts Tracker\n======================\nAn unofficial Django utility tool that tracks management scripts execution.\n\n**What does it mean \"to track script execution\"?**\n\nScripts tracker watches manage.py scripts located in ``your_app/management/commands`` directory and just after you pull\nsome new code and apply its migrations - you will get notified about new (or modified) manage.py scripts that should\nbe applied for the project to work properly.\n\n\nQuick feature preview\n=====================\n\n**Step 1** - decorate your management script handle() method with ``@tracked_script`` decorator and push it to repository::\n\n    class Command(BaseCommand):\n        help = 'Some sample script help text'\n\n        @tracked_script\n        def handle(self, *args, **options):\n            # (...)\n\n**Step 2** - anyone who pulls your changes and runs migrations, will get a notification message::\n\n    $ python manage.py migrate\n    (...)\n    Running migrations:\n      (...)\n    Checking management scripts:\n      You have 1 new and 0 modified management scripts to be applied.\n    New scripts (1):\n      your_app/management/commands/sample_management_script.py\n        Some sample script help text\n\nInstallation\n============\n\n1. Install the app using ``pip`` package manager::\n\n        pip install django-scripts-tracker\n\n2. Add ``django_scripts_tracker`` to your ``INSTALLED_APPS`` setting::\n\n        # your_app/settings.py\n        INSTALLED_APPS = [\n            # (...)\n            'django_scripts_tracker',\n        ]\n\n3. Run migrations in order to create tracker models::\n\n        python manage.py migrate\n\n4. Configure directories that should be scanned for management scripts::\n\n        # your_app/settings.py\n        COMMANDS_DIRS = [\n            'your_app/management/commands',\n            'another_app/management/commands',\n        ]\n\nUsage\n=====\n\nHow to add a new tracked script?\n--------------------------------\n1. Create a new management script under a tracked ``(...)/management/commands/`` directory (tracked directories are defined in ``COMMANDS_DIRS``).\n\n2. Decorate either ``handle()`` or ``handle_noargs()`` Command method with a ``@tracked_script`` decorator.\n\n3. Make sure that the created script file is not ingored and is within a tracked directory.\n\n\nHow to check if there are unapplied scripts?\n--------------------------------------------\nScript checking process takes place every time you perform DB migrations, but you can also invoke it manually::\n\n    python manage.py check_scripts\n\n\nHow to mark scripts as \"applied\" ones?\n--------------------------------------\nScripts are automatically marked as applied ones just after their execution.\n\nIf there are some scripts that have already been applied but the tracker lists them - it is possible to mark them\nmanually as applied ones.\n\nTo mark scripts as \"applied\" ones type in the following command::\n\n    python manage.py check_scripts --mark-all-applied",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://krzysiek555.github.io/django-scripts-tracker/",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-scripts-tracker",
    "platform": "",
    "project_url": "https://pypi.org/project/django-scripts-tracker/",
    "release_url": "https://pypi.org/project/django-scripts-tracker/0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "An unofficial Django utility tool that tracks management scripts execution",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5b5c52528a45ce548f1f00f0a2569d4c",
          "sha256": "6aa8c48bccf09e0cacafdc2e09271f914575eb9709369fb141903c78f22d49c6"
        },
        "downloads": 0,
        "filename": "django-scripts-tracker-0.1.tar.gz",
        "has_sig": true,
        "md5_digest": "5b5c52528a45ce548f1f00f0a2569d4c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 8544,
        "upload_time": "2017-10-01T21:12:28",
        "url": "https://files.pythonhosted.org/packages/44/fc/0f3085acc21353303759e7d0a2b189294d843a0e3ba12ff070e68a26b62e/django-scripts-tracker-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5b5c52528a45ce548f1f00f0a2569d4c",
        "sha256": "6aa8c48bccf09e0cacafdc2e09271f914575eb9709369fb141903c78f22d49c6"
      },
      "downloads": 0,
      "filename": "django-scripts-tracker-0.1.tar.gz",
      "has_sig": true,
      "md5_digest": "5b5c52528a45ce548f1f00f0a2569d4c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 8544,
      "upload_time": "2017-10-01T21:12:28",
      "url": "https://files.pythonhosted.org/packages/44/fc/0f3085acc21353303759e7d0a2b189294d843a0e3ba12ff070e68a26b62e/django-scripts-tracker-0.1.tar.gz"
    }
  ]
}