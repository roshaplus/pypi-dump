{
  "info": {
    "author": "Paul Olsen",
    "author_email": "python@wholeshoot.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Database :: Database Engines/Servers"
    ],
    "description": "================\nmongo_datatables\n================\n\nA script for using the jQuery plug-in DataTables server-side processing (and DataTables Editor) with MongoDB.\n\nWorks with Flask and Pymongo. Supports column sorting and filtering by multiple search terms and/or column specific\nsearches like column:keyword.\n\n----\n\n\nInstall\n=======\nYou can install with pip::\n\n    pip install mongo-datatables\n\n..\n\nBasic Usage\n===========\n\nIn your ``views.py``::\n\n    import json\n    from flask import request, render_template\n    from mongo_datatables import DataTablesServer\n    from app import mongo\n    from . import main\n\n\n    @main.route('/table-view')\n    def table_view():\n        return render_template('main/table_view.html')\n\n\n    @main.route('/mongo/<collection>')\n    def api_db(collection):\n        request_args = json.loads(request.values.get(\"args\"))\n        results = DataTablesServer(mongo, collection, request_args).output_result()\n        return json.dumps(results)\n\n\n..\n\nIn your ``table_view.html``::\n\n    {% extends \"base.html\" %}\n\n\n    {% block content %}\n        {{ super() }}\n\n        <div class=\"container\">\n\n            <h1>\n                Contracts\n            </h1>\n\n            <table id=\"dt_table\" class=\"table table-striped table-responsive\">\n                <thead>\n                <tr>\n                    <th>ExpiryDate</th>\n                    <th>ContractId</th>\n                    <th>Vendor</th>\n                    <th>Note</th>\n                </tr>\n                </thead>\n            </table>\n\n\n        </div>\n    {% endblock %}\n\n    {% block scripts %}\n        {{ super() }} // DataTables, jQuery, Bootstrap loaded here\n\n        <script>\n            $(function () {\n                $('#dt_table').DataTable({\n                    serverSide: true,\n                    ajax: {\n                        url: '{{ url_for('main.api_db', collection='contracts') }}',\n                        dataSrc: 'data',\n                        type: 'GET',\n                        data: function (args) {\n                            //args.qString = getQuerystring(); //add in querystring args, or anything else you want\n                            return {\n                                \"args\": JSON.stringify(args)\n                            };\n                        }\n                    },\n                    columns: [\n                        {data: 'ExpiryDate'},\n                        {data: 'ContractId'},\n                        {data: 'Vendor'},\n                        {data: 'Note'}\n                    ]\n                });\n\n            });\n\n            // in case you want to pass the querystring along with the request\n            function getQuerystring() {\n                var $qItems = $('#qItems');\n                $qItems.empty();\n                var hash;\n                var filters = {};\n                var q = document.URL.split('?')[1];\n                if (q != undefined) {\n                    q = q.split('&');\n                    for (var i = 0; i < q.length; i++) {\n                        hash = q[i].split('=');\n                        filters[hash[0]] = hash[1];\n                    }\n                }\n                return filters\n            }\n        </script>\n\n    {% endblock %}\n\n..\n\nAdvanced Usage, With A Custom Filter\n====================================\n\nIn your ``views.py``::\n\n    import json\n    from datetime import datetime, timedelta\n    from mongo_datatables import DataTablesEditor, DataTablesServer\n    from flask import request\n    from app import mongo\n    from . import main\n\n\n    @main.route('/support-expiry', methods=['GET'])\n    def support_expiry():\n        \"\"\"This examples receives a 'daysToExpiry' value and translates it to an Expiration Date, which can be looked\n        up in the Mongo collection.\n        \"\"\"\n\n        request_args = json.loads(request.values.get(\"args\"))\n        custom_filter = {}\n\n        # translate daysToExpiry into a filter for the ExpiryDate Mongo key\n        if 'daysToExpiry' in request_args['qString']:\n            days_to_expiry = request_args['qString'].pop('daysToExpiry', None)  # remove daysToExpiry, leave the rest\n            t = datetime.utcnow()\n            ts = t.strftime(\"%Y-%m-%d\")\n            if days_to_expiry == 'Expired':\n                custom_filter.update({\n                    'ExpiryDate': {'$lt': ts, '$ne': ''}  # ExpiryDate is before today but not equal to ''\n                })\n            else:\n                d = t + timedelta(days=int(days_to_expiry))\n                ds = d.strftime(\"%Y-%m-%d\")\n                custom_filter.update({\n                    'ExpiryDate': {'$gt': ts, '$lt': ds}  # ExpiryDate is between now and daysToExpiry from now\n                })\n\n        # add the rest of the query string to the custom filter\n        custom_filter.update(request_args['qString'])\n\n        collection = 'HardwareInventory'\n        results = DataTablesServer(mongo, collection, request_args, **custom_filter).output_result()\n        return json.dumps(results)\n\n..\n\n\nDataTables Editor Usage\n=======================\n\nIn your ``views.py``::\n\n    import json\n    from flask import request\n    from mongo_datatables import DataTablesEditor\n    from . import main\n    from app import mongo\n\n    # include the table_view and api_db views from above\n\n    @main.route('/mongo/edit/<collection>/<doc_id>', methods=['POST'])\n    def api_editor(collection, doc_id):\n        request_args = json.loads(request.values.get(\"args\"))\n        results = DataTablesEditor(mongo, collection, request_args, doc_id).output_result()\n        return json.dumps(results)\n\n..\n\nIn your ``table-view.html``::\n\n    {% extends \"base.html\" %}\n\n\n    {% block content %}\n        {{ super() }}\n\n        <div class=\"container\">\n\n            <table id=\"dt_table\" class=\"table table-striped table-responsive\">\n                <thead>\n                <tr>\n                    <th>ExpiryDate</th>\n                    <th>ContractId</th>\n                    <th>Vendor</th>\n                    <th>Note</th>\n                </tr>\n                </thead>\n            </table>\n\n\n        </div>\n    {% endblock %}\n\n    {% block scripts %}\n        {{ super() }}  // DataTables, Editor, jQuery, Bootstrap, Buttons loaded here\n\n        <script>\n\n            $(function () {\n\n                // DataTables\n                var table = $('#dt_table').DataTable({\n                    serverSide: true,\n                    ajax: {\n                        url: '{{ url_for('main.api_db', collection='contracts') }}',\n                        dataSrc: 'data',\n                        type: 'GET',\n                        data: function (args) {\n                            return {\n                                \"args\": JSON.stringify(args)\n                            };\n                        }\n                    },\n                    select: true,\n                    columns: [\n                        {data: 'ExpiryDate'},\n                        {data: 'ContractId'},\n                        {data: 'Vendor'},\n                        {data: 'Note'}\n                    ]\n                });\n\n                // Editor\n                var editor = new $.fn.dataTable.Editor({\n                    ajax: {\n                        url: '/mongo/edit/contracts/_id_',  //Editor replaces _id_ with the row ID (the Mongo _id)\n                        type: 'POST',\n                        data: function (args) {\n                            return {\n                                \"args\": JSON.stringify(args)\n                            };\n                        }\n                    },\n                    table: \"#dt_table\",\n                    fields: [\n                        {name: 'ExpiryDate'},\n                        {name: 'ContractId'},\n                        {name: 'Vendor'},\n                        {name: 'Note'}\n                    ]\n                });\n\n                // Buttons\n                new $.fn.dataTable.Buttons(table, [\n                    {extend: \"create\", editor: editor},\n                    {extend: \"edit\", editor: editor},\n                    {extend: \"remove\", editor: editor}\n                ]);\n\n                table.buttons().container()\n                        .appendTo($(table.table().container(), '.col-sm-6:eq(0)'));\n\n            });\n        </script>\n\n    {% endblock %}",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/pauljolsen/mongo_datatables",
    "keywords": "flask pymongo mongodb",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mongo-datatables",
    "platform": "",
    "project_url": "https://pypi.org/project/mongo-datatables/",
    "release_url": "https://pypi.org/project/mongo-datatables/0.1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Classes for connecting DataTables and Editor to MongoDB",
    "version": "0.1.2"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fb3f4a2fb0cc6661929fbe4f2ee1bff4",
          "sha256": "bc5f708ed7a48f574bab20c5fc53c08b56fb9cb646cd047ee09b6c2c211fa810"
        },
        "downloads": 0,
        "filename": "mongo_datatables-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "fb3f4a2fb0cc6661929fbe4f2ee1bff4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 5538,
        "upload_time": "2017-09-12T03:16:47",
        "url": "https://files.pythonhosted.org/packages/6e/18/082023fee9ff0e8a8d2b00547c59593209ec4dc184093794579bd1c5a3c3/mongo_datatables-0.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "5d73a712f27bee6d4431a85dd013e7af",
          "sha256": "3621be8d5ce8381f5c5ae9eba4b0e8945f47ceb1cd6880c28cfa41db3b6eed42"
        },
        "downloads": 0,
        "filename": "mongo_datatables-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "5d73a712f27bee6d4431a85dd013e7af",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3860,
        "upload_time": "2017-09-12T03:16:49",
        "url": "https://files.pythonhosted.org/packages/65/43/a77a64e917962f0869813c621cadb38e20439061f6b075c5afdae8fe1c61/mongo_datatables-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6d62f0aa5428d738c21d3a963a8c5a56",
          "sha256": "d73a6f420c1fb8925cbedf6dec3791afb100e274d493d75ae21d059f997d50b6"
        },
        "downloads": 0,
        "filename": "mongo_datatables-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "6d62f0aa5428d738c21d3a963a8c5a56",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 9327,
        "upload_time": "2017-09-13T04:32:53",
        "url": "https://files.pythonhosted.org/packages/97/fd/c5fca49fa58d6aa230340efc7abe73fdc4f0d9787efd7dd268bbf9ff173a/mongo_datatables-0.1.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c83da2c0adf451bf30615b858dc4b05a",
          "sha256": "cad7f3e18fbfc58d37f24e1c7123a246867767afb7101738e14ed0a7ed556bbb"
        },
        "downloads": 0,
        "filename": "mongo_datatables-0.1.1.zip",
        "has_sig": false,
        "md5_digest": "c83da2c0adf451bf30615b858dc4b05a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12591,
        "upload_time": "2017-09-13T04:32:54",
        "url": "https://files.pythonhosted.org/packages/47/91/fecad85cab4951943a1d4698a4fbd4b5a1bc738f9ee7fe3ccb690c3aadb5/mongo_datatables-0.1.1.zip"
      }
    ],
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5f5ee4c2f873f7c673c21cc305b2977e",
          "sha256": "6c831a141c808ed9ce470d19eed57930023ac4fccc8cdb1c8a3ec7f847eef329"
        },
        "downloads": 0,
        "filename": "mongo_datatables-0.1.2-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "5f5ee4c2f873f7c673c21cc305b2977e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 9334,
        "upload_time": "2017-09-13T04:50:01",
        "url": "https://files.pythonhosted.org/packages/b8/c4/83f69df65a7724bad6663aaf268ba8c8e5794d6c4ebadf7e407196169163/mongo_datatables-0.1.2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "bfd35d8ee33f840de8450b1c122b3803",
          "sha256": "ea75104ea20c776baedbecc093f56b7ec79bb2cb27c3fdc8f03ecb5c5ba6dccb"
        },
        "downloads": 0,
        "filename": "mongo_datatables-0.1.2.zip",
        "has_sig": false,
        "md5_digest": "bfd35d8ee33f840de8450b1c122b3803",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12602,
        "upload_time": "2017-09-13T04:49:44",
        "url": "https://files.pythonhosted.org/packages/f3/5b/4b9eb86a19d1eec423ad22533645d3cfc946bf405b3b0518897ae1dd9669/mongo_datatables-0.1.2.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "5f5ee4c2f873f7c673c21cc305b2977e",
        "sha256": "6c831a141c808ed9ce470d19eed57930023ac4fccc8cdb1c8a3ec7f847eef329"
      },
      "downloads": 0,
      "filename": "mongo_datatables-0.1.2-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "5f5ee4c2f873f7c673c21cc305b2977e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 9334,
      "upload_time": "2017-09-13T04:50:01",
      "url": "https://files.pythonhosted.org/packages/b8/c4/83f69df65a7724bad6663aaf268ba8c8e5794d6c4ebadf7e407196169163/mongo_datatables-0.1.2-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "bfd35d8ee33f840de8450b1c122b3803",
        "sha256": "ea75104ea20c776baedbecc093f56b7ec79bb2cb27c3fdc8f03ecb5c5ba6dccb"
      },
      "downloads": 0,
      "filename": "mongo_datatables-0.1.2.zip",
      "has_sig": false,
      "md5_digest": "bfd35d8ee33f840de8450b1c122b3803",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 12602,
      "upload_time": "2017-09-13T04:49:44",
      "url": "https://files.pythonhosted.org/packages/f3/5b/4b9eb86a19d1eec423ad22533645d3cfc946bf405b3b0518897ae1dd9669/mongo_datatables-0.1.2.zip"
    }
  ]
}