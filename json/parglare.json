{
  "info": {
    "author": "Igor R. Dejanovic",
    "author_email": "igor DOT dejanovic AT gmail DOT com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Software Development :: Compilers",
      "Topic :: Software Development :: Interpreters",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "|Build Status| |Coverage Status| |License: MIT|\n\nparglare\n========\n\nA pure Python Scannerless LR parser (will be GLR soon) with LALR or SLR\ntables.\n\nThis lib is in the early phase of development. It is not tested\nextensively yet. Do not use it for anything important.\n\nWhat is done so far\n-------------------\n\n-  Textual syntax for grammar specification. Parsed with parglare.\n-  SLR and LALR tables calculation (LALR is the default)\n-  Scannerless LR(1) parsing\n-  Scanner is integrated into parsing. This give more power as the token\n   recognition is postponed and done in the parsing context at the\n   current parsing location.\n-  Declarative associativity and priority based conflict resolution for\n   productions\n-  See the ``calc`` example, or the quick intro bellow.\n-  Lexical disambiguation strategy.\n-  The default strategy is longest-match first and then ``str`` over\n   ``regex`` match (i.e. the most specific match). Terminal priority can\n   be provided for override if necessary.\n-  Semantic actions and default actions which builds the parse tree\n   (controlled by ``actions`` and ``default_actions`` parameters for the\n   ``Parser`` class).\n-  If no actions are provided and the default actions are explicitely\n   disabled parser works as a recognizer, i.e. no reduction actions are\n   called and the only output of the parser is whether the input was\n   recognized or not.\n-  Support for language comments/whitespaces using special rule\n   ``LAYOUT``.\n-  Debug print/tracing (set ``debug=True`` and/or\n   ``layout_debug=True``\\ to the ``Parser`` instantiation).\n-  Tests\n-  Few examples (see ``examples`` folder)\n\nTODO\n----\n\n-  Docs\n-  Tables caching/loading (currently tables are calculated whenever\n   ``Parser`` is instantiated)\n-  GLR parsing (Tomita's algorithm)\n-  Error recovery\n\nQuick intro\n-----------\n\nThis is just a small example to get the general idea. This example shows\nhow to parse and evaluate expressions with 5 operations with different\npriority and associativity. Evaluation is done using semantic/reduction\nactions.\n\nUntil docs is done see the ``example`` folder and ``tests`` for more.\n\n.. code:: python\n\n    from parglare import Parser, Grammar\n\n    grammar = r\"\"\"\n    E = E '+' E  {left, 1}\n      | E '-' E  {left, 1}\n      | E '*' E  {left, 2}\n      | E '/' E  {left, 2}\n      | E '^' E  {right, 3}\n      | '(' E ')';\n    E = number;\n    number = /\\d+(\\.\\d+)?/;\n    \"\"\"\n\n    actions = {\n        \"E:0\": lambda _, nodes: nodes[0] + nodes[2],\n        \"E:1\": lambda _, nodes: nodes[0] - nodes[2],\n        \"E:2\": lambda _, nodes: nodes[0] * nodes[2],\n        \"E:3\": lambda _, nodes: nodes[0] / nodes[2],\n        \"E:4\": lambda _, nodes: nodes[0] ** nodes[2],\n        \"E:5\": lambda _, nodes: nodes[1],\n        \"E:6\": lambda _, nodes: nodes[0],\n        \"number\": lambda _, value: float(value),\n    }\n\n    g = Grammar.from_string(grammar)\n    parser = Parser(g, debug=True, actions=actions)\n\n    result = parser.parse(\"34 + 4.6 / 2 * 4^2^2 + 78\")\n\n    print(\"Result = \", result)\n\n    # Output\n    # -- Debuging/tracing output with detailed info about grammar, productions,\n    # -- terminals and nonterminals, DFA states, parsing progress,\n    # -- and at the end of the output:\n    # Result = 700.8\n\nLicense\n-------\n\nMIT\n\nPython versions\n---------------\n\nTested with 2.7, 3.3-3.6\n\nCredits\n-------\n\nInitial layout/content of this package was created with\n`Cookiecutter <https://github.com/audreyr/cookiecutter>`__ and the\n`audreyr/cookiecutter-pypackage <https://github.com/audreyr/cookiecutter-pypackage>`__\nproject template.\n\n.. |Build Status| image:: https://travis-ci.org/igordejanovic/parglare.svg?branch=master\n   :target: https://travis-ci.org/igordejanovic/parglare\n.. |Coverage Status| image:: https://coveralls.io/repos/github/igordejanovic/parglare/badge.svg?branch=master\n   :target: https://coveralls.io/github/igordejanovic/parglare?branch=master\n.. |License: MIT| image:: https://img.shields.io/badge/License-MIT-yellow.svg\n   :target: https://opensource.org/licenses/MIT\n\n\nHistory\n=======\n\n-  2016-02-02 - Version 0.1\n-  Textual syntax for grammar specification. Parsed with parglare.\n-  SLR and LALR tables calculation (LALR is the default)\n-  Scannerless LR(1) parsing\n\n   -  Scanner is integrated into parsing. This give more power as the\n      token recognition is postponed and done in the parsing context at\n      the current parsing location.\n\n-  Declarative associativity and priority based conflict resolution for\n   productions\n\n   -  See the ``calc`` example, or the quick intro bellow.\n\n-  Lexical disambiguation strategy.\n\n   -  The default strategy is longest-match first and then ``str`` over\n      ``regex`` match (i.e. the most specific match). Terminal priority\n      can be provided for override if necessary.\n\n-  Semantic actions and default actions which builds the parse tree\n   (controlled by ``actions`` and ``default_actions`` parameters for the\n   ``Parser`` class).\n\n   -  If no actions are provided and the default actions are explicitely\n      disabled parser works as a recognizer, i.e. no reduction actions\n      are called and the only output of the parser is whether the input\n      was recognized or not.\n\n-  Support for language comments/whitespaces using special rule\n   ``LAYOUT``.\n-  Debug print/tracing (set ``debug=True`` and/or\n   ``layout_debug=True``\\ to the ``Parser`` instantiation).\n-  Tests\n-  Few examples (see ``examples`` folder)",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/igordejanovic/parglare",
    "keywords": "parglare",
    "license": "MIT license",
    "maintainer": "",
    "maintainer_email": "",
    "name": "parglare",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/parglare/",
    "release_url": "https://pypi.org/project/parglare/0.1/",
    "requires_python": "",
    "summary": "A pure Python Scannerless LR (soon GLR) parser",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2d8b9551134618c0da97d0dfc35f8a79",
          "sha256": "7dce943bdbcbe69438c9ae794c42553db03d8d5dfdf2bee68b97bc59cdfc58f3"
        },
        "downloads": 13,
        "filename": "parglare-0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2d8b9551134618c0da97d0dfc35f8a79",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 19392,
        "upload_time": "2017-02-02T23:22:53",
        "url": "https://files.pythonhosted.org/packages/da/6e/bfe716781895b011d166ff45f30cdc1482b51cc75e072662ec717229fde8/parglare-0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f70aab58004c66fe5bfbb9947f99cd11",
          "sha256": "c2324b1974bc2ced8a65c32de0dfe94890ec553ab8d75599eb47b9b89f11c666"
        },
        "downloads": 11,
        "filename": "parglare-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f70aab58004c66fe5bfbb9947f99cd11",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 87898,
        "upload_time": "2017-02-02T23:22:56",
        "url": "https://files.pythonhosted.org/packages/94/86/ce6dfeb6af14cdd460d439578e83695b8847b949a65286f2a7edc2485757/parglare-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2d8b9551134618c0da97d0dfc35f8a79",
        "sha256": "7dce943bdbcbe69438c9ae794c42553db03d8d5dfdf2bee68b97bc59cdfc58f3"
      },
      "downloads": 13,
      "filename": "parglare-0.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2d8b9551134618c0da97d0dfc35f8a79",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 19392,
      "upload_time": "2017-02-02T23:22:53",
      "url": "https://files.pythonhosted.org/packages/da/6e/bfe716781895b011d166ff45f30cdc1482b51cc75e072662ec717229fde8/parglare-0.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "f70aab58004c66fe5bfbb9947f99cd11",
        "sha256": "c2324b1974bc2ced8a65c32de0dfe94890ec553ab8d75599eb47b9b89f11c666"
      },
      "downloads": 11,
      "filename": "parglare-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f70aab58004c66fe5bfbb9947f99cd11",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 87898,
      "upload_time": "2017-02-02T23:22:56",
      "url": "https://files.pythonhosted.org/packages/94/86/ce6dfeb6af14cdd460d439578e83695b8847b949a65286f2a7edc2485757/parglare-0.1.tar.gz"
    }
  ]
}