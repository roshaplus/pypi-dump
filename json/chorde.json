{
  "info": {
    "author": "Claudio Freire",
    "author_email": "klaussfreire@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)",
      "Operating System :: OS Independent",
      "Programming Language :: Cython",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "Dependencies:\n=============\n\n* numpy *(for optimizations in FilesCacheClient)*\n* python-memcached *(for MemcachedClient)*\n* pyzmq < 14 *(for coherence support)*\n* dnspython  *(for dynamic dns-based load-balancing of MemcachedClient)*\n* cython *(for optimizations in InprocCacheClient)*\n\nOptional features\n=================\n\nWhen declaring dependencies in your project, you can reference the following optional features:\n\n* mq *(everything under chorde.mq, mostly pulls pyzmq)*\n* shmem *(shared memory utils, needed for optimized files cache clients)*\n* memcache\n* elasticache\n\nBasic Usage:\n============\n\nThe simplest way to use is to create one of the supported cache clients,\nand use it directly, like\n\n.. code:: python\n\n\tfrom chorde.clients.inproc import InprocCacheClient\n\tfrom chorde import CacheMissError\n\tc = InprocCacheClient(200)\n\tc.put(3, 10, 300) # put value 10 on key 3, TTL 5min\n\tassert 10 == c.get(3)\n\ttry:\n\t\tc.get(5)\n\texcept CacheMissError:\n\t\tprint \"miss\"\n\nThis creates an In-process LRU cache. The in-process part indicates that it\nis process-private, and not shared with other processes.\n\nThere are two implementations of the LRU, with different performance\ncharacteristics. The `InprocCacheClient` can take alternative store\nimplementations as an argument, see the module for details.\n\nThe default LRUCache, accessible as `chorde.clients.inproc.Cache`,\nis a regular LRU implemented with\na priority queue and a hash table in tandem, so it has *O(log n)* writes\nand *O(1)* reads, but by default all reads entail a write (to update the\nLRU). That can be disabled by specifying custom options, see the module's\ndocumentation for more details.\n\nThere's an alternative approximate LRU, accessible in\n`chorde.clients.inproc.CuckooCache`, that implements a lazy version of\na cuckoo hash table, and has *O(1)* reads and amortized *O(1)* writes.\nIt's also quite more space-efficient than the regular LRU, so it's better\nsuited for very large caches, but its eviction strategy will be approximate,\nand thus not guaranteed to always evict the actual least-recently-used item.\n\nShared Caches\n=============\n\nThe most straightforward way to get a shared cache, is to use a memcache:\n\n.. code:: python\n\n\tfrom chorde.clients.memcached import MemcachedClient\n\tfrom chorde import CacheMissError\n\tc = MemcachedClient([\"localhost:11211\"], checksum_key = \"testing\")\n\tc.put(3, 10, 300)\n\tassert 10 == c.get(3)\n\ttry:\n\t\tc.get(5)\n\texcept CacheMissError:\n\t\tprint \"miss\"\n\nThe MemcachedClient is used just like any other client, only it talks to, in this\nexample, a local memcached listening on localhost port 11211. Multiple clients\ncan be given, and a consistent hash on the key will be used to spread the load\namong them.\n\nIf a hostname is given, and the hostname points to multiple IP addresses, the\nsame effect will be obtained, and the distribution will be dynamically updated\naccording to the TTL specified on the DNS entry. This, for example, makes the\nclient work seamlessly with Amazon ElastiCache's \"configuration endpoint\", \nwhich is a DNS entry that points to one of the cache nodes. But it only works\nlike that with single-node clusters. For multi-node clusters, use\n``chorde.clients.elasticache.ElastiCacheClient``, which goes a step further\nand queries this configuration endpoint for all the other nodes.\n\nDo beware that the key used against the memcached isn't the key given, since\nthe client supports any hashable object as key, whereas memcached only supports\na subset of string keys. MemcachedClient has none of memcached's limitations\nwith regards to key format and/or length and value size. It works around\nmemcaches limitations, by constructing a derived key that is suitable for\nmemcached. However, there is overhead in providing huge keys or values, so it's generally\ngood advise to avoid them anyway.\n\nValues in the MemcachedClient are plickled, compressed and signed with the\nchecksum key, so it is relatively safe from both malicious code injection through\npickle, and transmission errors causing cPickle to dump core (which does happen when\nit is fed unchecked data).\n\nIn case the compression becomes a bottleneck, which shouldn't be a problem unless\nit is a high-traffic cache with rarely compressible values, one can disable it.\nCheck MemcachedClient's documentation for more details.\n\nTo reduce roundtrips, all clients (in particular MemcachedClients) support\ngetMulti and getTtlMulti, to fetch multiple keys at once:\n\n.. code:: python\n\n\tfrom chorde.clients.memcached import MemcachedClient\n\tfrom chorde import CacheMissError\n\tc = MemcachedClient([\"localhost:11211\"], checksum_key = \"testing\")\n\tc.put(3, 10, 300)\n\tc.put(4, 20, 300)\n\tassert {3:10, 4:20, 5:None} == dict(c.getMulti([3,4,5], None))\n\nSee the documentation on clients.base for more details.\n\nMultilevel caches\n=================\n\nA common approach when dealing with remote caches, like the above example using\nmemcached, is to have at least two levels: the memcached itself, and an in-process\nsmall cache to avoid having to talk to the memcached all the time.\n\nThis can be done straightforwardly with the tiered clients:\n\n.. code:: python\n\n\tfrom chorde.clients.memcached import MemcachedClient\n\tfrom chorde.clients.inproc import InprocCacheClient\n\tfrom chorde.clients.tiered import TieredInclusiveClient\n\tfrom chorde import CacheMissError\n\tl1 = InprocCacheClient(10)\n\tl2 = MemcachedClient([\"localhost:11211\"], checksum_key=\"test\")\n\tc = TieredInclusiveClient(l1,l2)\n        c.put(3, 10, 300)\n        assert 10 == c.get(3)\n        try:\n                c.get(5)\n        except CacheMissError:\n                print \"miss\"\n\nHere we build an *inclusive* tiered client, in which elements on higher levels are \npromoted into the lower levels by copying, rather than swapping. This means there\nis duplication among them, but this is usually best in cases like these, where the\nupper levels are shared among processes.\n\nAn exclusive client isn't provided at this moment, since there is seldom any use \nfor the exclusive pattern on these types of caches.\n\nDecorators\n==========\n\nA more natural way to think about caching, is in that it's a decorator of plain functions.\n\nRather than explicitly putting and getting from caches, one can simply consider\ncaching as an optimization on an otherwise expensive function.\n\nDecorators in chorde.decorators provide a huge amount of functionality and flexibility,\nthese examples cover only the most basic usage:\n\nAssuming *c* is the client we want to use for caching,\n\n.. code:: python\n\n\tfrom chorde.decorators import cached\n\timport random\n\t\n\t@cached(c, ttl=300, async_ttl=-60)\n\tdef expensive_func(x):\n\t\treturn x * random.random()\n\n\tprint expensive_func(1)\n\tprint expensive_func(1) # Should return the same\n\tprint expensive_func.async()(1) # will refresh asynchronously every minute\n\tprint expensive_func.future()(1).result() # same as before, but using the futures interface\n\tprint expensive_func.peek(1) # just check the cache\n\tprint expensive_func.put(1, _cache_put=5) # write an explicit value\n\tprint expensive_func.async().lazy(1) # don't wait, raise CacheMissError if not available, compute in background\n\tprint expensive_func.future().lazy(1).result() # same as before, but using the futures interface\n\nThere, the async_ttl means the minimum TTL that triggers\nan asynchronous recomputation (you can use it to avoid ever having to wait on a recomputation).\nThe negative value makes it relative to the total TTL, so -60 always means recompute\nevery minute (60 seconds). The plain ttl is an absolute limit, no result older than\nthat will ever be returned.\n\nThe documentation on chorde.decorators.cached will have more to say about the ways of\ninvoking cached functions. \n\nIn general, the terms are:\n\n  * lazy: don't wait for computation, return a cached result or raise CacheMissError.\n    When combined with async, it will compute in the background.\n  * peek: don't compute. Similar to lazy, but it will never trigger a computation\n  * async: expensive things (computation) happen on a background threadpool.\n  * future: return futures rather than results, use the future to get notified of\n    results when they're available. Actual cache access happens on a threadpool.\n    A non-blocking way of calling.\n  * refresh: immediately recompute the value.\n\n\nIntegration with other libraries\n--------------------------------\n\nThe decorators' future() interface is especially suited for integration with other libraries that can talk to\nfutures. Chorde's futures, however, are not directly compatible with other libraries', but they can easily be\nwrapped like so:\n\n.. code:: python\n\n\timport tornado.web\n\timport tornado.gen\n\tfrom chorde.clients.async import makeFutureWrapper\n\t\n\tWF = makeFutureWrapper(tornado.web.Future)\n\t\n\t...\n\t\n\t@tornado.gen.coroutine\n\tdef get(self):\n\t\tsome_result = yield WF(some_func.future()(some_args))\n\n\nThere is a better way to integrate with tornado >= 4.0\n\n.. code:: python\n\n    from chorde.external_integration import monkey_patch_tornado\n    monkey_patch_tornado()\n\n    import tornado.web\n    import tornado.gen\n\n    ...\n\n    @tornado.gen.coroutine\n    def get(self):\n        some_result = yield some_func.future()(some_args)\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://bitbucket.org/claudiofreire/chorde/",
    "keywords": "",
    "license": "LGPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "chorde",
    "platform": "",
    "project_url": "https://pypi.org/project/chorde/",
    "release_url": "https://pypi.org/project/chorde/0.2.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Clustered Caching Library",
    "version": "0.2.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5570c4fe8216ce945869ba62d3ef37fe",
          "sha256": "28a571b37345f512feafcd21dfec60abd077a0fdb7704200069a8a9a36c41b70"
        },
        "downloads": -1,
        "filename": "chorde-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "5570c4fe8216ce945869ba62d3ef37fe",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 197248,
        "upload_time": "2016-10-12T02:46:59",
        "url": "https://files.pythonhosted.org/packages/4c/6a/584bd734cebaf0a4b81e1b7765a4bf8df251dd4095e7a36125808dca0c88/chorde-0.1.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7abfcc8aaf420da1bc46ee7fbbac3e4e",
          "sha256": "7a64111f0fa5cbb4b9b23b567d2c2d7998350757ac980f714859becf0a7e6682"
        },
        "downloads": -1,
        "filename": "chorde-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "7abfcc8aaf420da1bc46ee7fbbac3e4e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 291389,
        "upload_time": "2017-09-20T14:02:49",
        "url": "https://files.pythonhosted.org/packages/e5/a0/a132313fa91af6ad9b00e1655ff1f74c14c7f5d6611cef6b4b7ceacfc801/chorde-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "207676f3faf7f026ba47adda453903ae",
          "sha256": "77f660e5feace509217907a08564bb5c98b82b65923bf67162fd95bb212c3d51"
        },
        "downloads": -1,
        "filename": "chorde-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "207676f3faf7f026ba47adda453903ae",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 291815,
        "upload_time": "2017-10-12T17:56:41",
        "url": "https://files.pythonhosted.org/packages/5b/e9/a94e07a531e2746b862d94bcf60476d9547260b097b1308cb6131051a81d/chorde-0.2.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "207676f3faf7f026ba47adda453903ae",
        "sha256": "77f660e5feace509217907a08564bb5c98b82b65923bf67162fd95bb212c3d51"
      },
      "downloads": -1,
      "filename": "chorde-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "207676f3faf7f026ba47adda453903ae",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 291815,
      "upload_time": "2017-10-12T17:56:41",
      "url": "https://files.pythonhosted.org/packages/5b/e9/a94e07a531e2746b862d94bcf60476d9547260b097b1308cb6131051a81d/chorde-0.2.1.tar.gz"
    }
  ]
}