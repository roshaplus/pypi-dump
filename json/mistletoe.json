{
  "info": {
    "author": "Mi Yu",
    "author_email": "hello@afteryu.me",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Software Development :: Libraries :: Python Modules",
      "Topic :: Text Processing :: Markup"
    ],
    "description": "|mistletoe|\n===========\n\n|Build Status| |Coverage Status|\n\nmistletoe is a Markdown parser in pure Python, designed to be fast, modular and fully customizable.\n\nmistletoe is not simply a Markdown-to-HTML transpiler. It is designed, from the start, to parse\nMarkdown into an abstract syntax tree. You can swap out renderers for different output formats,\nwithout touching any of the core components.\n\nRemember to spell mistletoe in lowercase!\n\nFeatures\n--------\n\n-  **Fast**: mistletoe strives to be as fast as the `fastest\n   implementation <https://github.com/lepture/mistune>`__ currently available: that is, over 3 times\n   faster than `Python-Markdown <https://github.com/waylan/Python-Markdown>`__, and over 4 times\n   faster than `Python-Markdown2 <https://github.com/trentm/python-markdown2>`__.\n\n   -  mistletoe uses Python generators under the hood. If you choose not to render some lower-level\n      tokens, they will not get parsed: a huge performance improvement.\n\n   -  mistletoe uses a streaming algorithm to parse input files. Together with generators, this\n      means that mistletoe is light on memory, and by nature can deal with very large input files.\n\n-  **Modular**: mistletoe is designed with modularity in mind. Its initial goal is to provide a\n   clear and easy API to extend upon.\n\n-  **Customizable**: mistletoe wants to solve the problem: \"my Markdown is better than yours.\"\n   Markdown's syntax is, and should be, a matter of personal preference. As such, mistletoe does not\n   make sweeping decisions, but leaves much in the hands of the user.\n\nInstallation\n------------\n\nmistletoe is tested on Python 3.5, Python 3.6, and PyPy 5.8.0. Install mistletoe with pip:\n\n.. code:: sh\n\n    pip3 install mistletoe\n\nAlternatively, clone the repo:\n\n.. code:: sh\n\n    git clone https://github.com/miyuchina/mistletoe.git\n    cd mistletoe\n    pip3 install -e .\n\nUsage\n-----\n\n>From the command-line\n~~~~~~~~~~~~~~~~~~~~~\n\npip installation enables mistletoe's commandline utility. Type the following directly into your\nshell:\n\n.. code:: sh\n\n    mistletoe foo.md\n\nThis will transpile ``foo.md`` into HTML, and dump the output to stdout. To save the HTML, direct\nthe output into a file:\n\n.. code:: sh\n\n    mistletoe foo.md > out.html\n\nRunning ``mistletoe`` without specifying a file will land you in interactive mode. Like Python's\nREPL, interactive mode allows you to test how your Markdown will be interpreted by mistletoe:\n\n::\n\n    mistletoe [version 0.1 alpha] (interactive)\n    Type Ctrl-D to complete input, or Ctrl-C to exit.\n    >>> some **bold text**\n    ... and some *italics*\n    ... ^D\n    <html>\n    <body>\n    <p>some <strong>bold text</strong> and some <em>italics</em></p>\n    </body>\n    </html>\n    >>>\n\nTyping ``Ctrl-D`` tells mistletoe to interpret your input. ``Ctrl-C`` exits the program.\n\nBasic usage\n~~~~~~~~~~~\n\nHere's how you can use mistletoe in a Python script:\n\n.. code:: python\n\n    import mistletoe\n\n    with open('foo.md', 'r') as fin:\n        rendered = mistletoe.markdown(fin)\n\n``mistletoe.markdown()`` uses mistletoe's default settings: allowing HTML mixins and rendering to\nHTML.\n\nOkay, give it to me straight\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nHere's how you would manually specify extra tokens and a renderer for mistletoe. In the following\nexample, we add ``HTMLBlock`` and ``HTMLSpan`` to the normal parsing process, and use\n``HTMLRenderer`` to render the AST:\n\n.. code:: python\n\n    from mistletoe import Document\n    from mistletoe.html_token import Context\n    from mistletoe.html_renderer import render\n\n    with open('foo.md', 'r') as fin:\n        with Context():\n            rendered = render(Document(fin))\n\n... or an even more verbose version:\n\n.. code:: python\n\n    from mistletoe import Document\n    from mistletoe.html_token import Context\n    from mistletoe.html_renderer import HTMLRenderer\n\n    with open('foo.md', 'r') as fin:\n        with Context():\n            token = Document(fin)\n            renderer = HTMLRenderer()\n            rendered = renderer.render(token)\n\nDeveloper's Guide\n-----------------\n\nAlthough chances of mistletoe undergoing another crazy overhaul is very limited, its API is not\nstabilized yet. That said, however, here's an example to add GitHub-style wiki links to the parsing\nprocess, and provide a renderer for this new token.\n\nA new token\n~~~~~~~~~~~\n\nGitHub wiki links are span-level tokens, meaning that they reside inline, and don't really look like\nchunky paragraphs. To write a new span-level token, all we need to do is make a subclass of\n``SpanToken``:\n\n.. code:: python\n\n    from mistletoe.span_token import SpanToken\n\n    class GitHubWiki(SpanToken):\n        pass\n\nmistletoe uses regular expressions to search for span-level tokens in the parsing process. As a\nrefresher, GitHub wiki looks something like this: ``[[alternative text | target]]``. We define a\nclass variable, ``pattern``, that stores the compiled regex:\n\n.. code:: python\n\n    class GitHubWiki(SpanToken):\n        pattern = re.compile(r\"(\\[\\[(.+?)\\|(.+?)\\]\\])\")\n        def __init__(self, raw):\n            pass\n\nFor spiritual guidance on regexes, refer to `xkcd <https://xkcd.com/208/>`__ classics. For an actual\nrepresentation of this author parsing Markdown with regexes, refer to this brilliant\n`meme <http://www.greghendershott.com/img/grumpy-regexp-parser.png>`__ by `Greg\nHendershott <http://www.greghendershott.com/2013/11/markdown-parser-redesign.html>`__.\n\nmistletoe's span-level tokenizer will search for our pattern. When it finds a match, it will pass in\nthe first matching group as argument (``raw``). In our case, this happens to be the entire link with\nenclosing brackets, so we still need to do some dirty string manipulation:\n\n.. code:: python\n\n    alt, target = raw[2:-2].split('|', 1)\n\n``alt`` can also contain other span-level tokens. For example, ``[[*alt*|link]]`` is a GitHub link\nwith an ``Emphasis`` token as its child. To parse child tokens, simply pass it to the ``super``\nconstructor, and save off all the additional attributes we need:\n\n.. code:: python\n\n    super().__init__(alt)\n    self.target = target\n\nAfter some cleaning-up, this is what our new token class looks like:\n\n.. code:: python\n\n    from mistletoe.span_token import SpanToken\n\n    class GitHubWiki(SpanToken):\n        pattern = re.compile(r\"(\\[\\[(.+?)\\|(.+?)\\]\\])\")\n        def __init__(self, raw):\n            alt, target = raw[2:-2].split('|', 1)\n            super().__init__(alt.strip())\n            self.target = target.strip()\n\nA new renderer\n~~~~~~~~~~~~~~\n\nIf we only need to use GitHubWiki only once, we can simply create an ``HTMLRenderer`` instance, and\nappend a ``render()`` function to its ``render_map``. However, let's suppose we are writing a plugin\nfor others to use. We only need to subclass ``HTMLRenderer`` to provide reusability:\n\n.. code:: python\n\n    from mistletoe.html_renderer import HTMLRenderer\n\n    class GitHubWikiRenderer(HTMLRenderer):\n        def __init__(self, preamble=''):\n            super().__init__(preamble)\n            self.render_map['GitHubWiki'] = self.render_github_wiki\n\nThe ``super`` constructor call inherits the original ``render_map`` from ``HTMLRenderer``. We then\nadd an additional entry to the ``render_map``, pointing to our new render method:\n\n.. code:: python\n\n    def render_github_wiki(self, token):\n        template = '<a href=\"{target}\">{inner}</a>'\n        target = token.target\n        inner = self.render_inner(token)\n        return template.format(target=target, inner=inner)\n\n``self.render_inner(token)`` recursively calls ``render()`` on the child tokens of ``token``, then\njoins them together as a single string. Cleaning up, we have our new renderer class:\n\n.. code:: python\n\n    import urllib.parse\n    from mistletoe.html_renderer import HTMLRenderer\n\n    class GitHubWikiRenderer(HTMLRenderer):\n        def __init__(self, preamble=''):\n            super().__init__(preamble)\n            self.render_map['GitHubWiki'] = self.render_github_wiki\n\n        def render_github_wiki(self, token):\n            template = '<a href=\"{target}\">{inner}</a>'\n            target = urllib.parse.quote_plus(token.target)\n            inner = self.render_inner(token)\n            return template.format(target=target, inner=inner)\n\nPutting everything together\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nmistletoe's span-level tokenizer looks for tokens in the ``__all__`` variable of ``span_token``\nmodule. The magic of injecting our ``GitHubWiki`` token into the parsing process, then, is pretty\nstraight-forward:\n\n.. code:: python\n\n    import mistletoe\n\n    mistletoe.span_token.GitHubWiki = GitHubWiki\n    mistletoe.span_token.__all__.append('GitHubWiki')\n\nWhen we render, we create a new instance of ``GitHubWikiRenderer``, and call ``render()`` on the\ninput token:\n\n.. code:: python\n\n    rendered = GitHubWikiRenderer().render(token)\n\nWe are technically good to go at this point. However, the code above messes up ``span_token``'s\nglobal namespace quite a bit. The actual ``github_wiki`` module in the ``plugins/`` directory uses\nPython's context manager:\n\n.. code:: python\n\n    class Context(object):\n        def __init__(self):\n            self.renderer = GitHubWikiRenderer\n\n        def __enter__(self):\n            mistletoe.span_token.GitHubWiki = GitHubWiki\n            mistletoe.span_token.__all__.append('GitHubWiki')\n            return self\n\n        def __exit__(self, exception_type, exception_val, traceback):\n            del mistletoe.span_token.GitHubWiki\n            mistletoe.span_token.__all__.remove('GitHubWiki')\n\n        def render(self, token):\n            return self.renderer().render(token)\n\nThis allows us to use our new token like this:\n\n.. code:: python\n\n    from mistletoe import Document\n    from plugins.github_wiki import Context\n\n    with open('foo.md', 'r') as fin:\n        with Context() as c:\n            rendered = c.render(Document(fin))\n\nFor more info, take a look at the ``html_renderer`` module in mistletoe. The docstrings might give\nyou a more granular idea of customizing mistletoe to your needs.\n\nWhy mistletoe?\n--------------\n\nFor me, the question becomes: why not `mistune <https://github.com/lepture/mistune>`__? My original\nmotivation really has nothing to do with starting a competition. Here's a list of reasons I created\nmistletoe in the first place:\n\n-  I am interested in a Markdown-to-LaTeX transpiler in Python.\n-  I want to write more Python. Specifically, I want to try out some bleeding edge features in\n   Python 3.6, which, in turn, makes me love the language even more.\n-  I am stuck at home during summer vacation without an internship, which, in turn, makes me realize\n   how much I love banging out software from scratch, all by myself. Also, global warming keeps me\n   indoors.\n-  I have long wanted to write a static site generator, *from scratch, by myself.* One key piece of\n   the puzzle is my own Markdown parser. \"How hard could it be?\" (well, quite a lot harder than I\n   expected.)\n-  \"For fun,\" says David Beasley.\n\nmistletoe shares with mistune the goal that Markdown parsers should be fast, and other parser\nimplementations in Python leaves much to be desired.\n\nHere's two things mistletoe does differently from mistune:\n\n-  Per its `readme <https://github.com/lepture/mistune>`__, mistune will always be a single-file\n   script. mistletoe breaks its functionality into modules.\n-  mistune, as of now, can only render Markdown into HTML. It is relatively trivial to write a new\n   renderer for mistletoe.\n\nThe implications of these are quite profound, and there's no definite I'm- better-than-you answer.\nMistune is near perfect if one wants what it provides: I have used mistune extensively in the past,\nand had a great experience. If you want more control, however, give mistletoe a try.\n\nMy hunch is that mistletoe *will be slower* than a fully optimized mistune *when feature complete.*\nThis is because separating components into modules creates quite a bit of lookup overhead, that is\ninevitable with mistletoe but not a concern with mistune.\n\nAs of now mistletoe performs marginally better on CPython 3.6 than mistune. Parsing\n`README.md <https://github.com/jquery/jquery/blob/master/README.md>`__ of the jQuery project (whose\nsyntax mistletoe fully supports) 1000 times shows that mistletoe is as fast as mistune. Using PyPy\n(whose function overheads are better optimized than CPython), mistune takes about 7 seconds to\ncomplete the said task, whereas mistletoe takes less than 5 seconds.\n\nThis, however, is not indicative of final performance difference, as mistletoe is not yet feature\ncomplete.\n\nFinally, to quote `Raymond Hettinger <https://www.youtube.com/watch?v=voXVTjwnn-U>`__:\n\n    If you make something successful, you don't have to make something else unsuccessful.\n\nThere is infinite fun and inspiration to be found in reinventing the wheels, and proclaiming one's\nsupremacy to satisfy his or her ego, while holding those who came before in disrespect, is\nprioritizing the trivial.\n\nCopyright & License\n-------------------\n\n-  mistletoe's logo uses artwork by Daniele De Santis, under `CC BY\n   3.0 <https://creativecommons.org/licenses/by/3.0/us/>`__.\n-  The font used in the logo is `Cedarville\n   Cursive <https://fonts.google.com/specimen/Cedarville+Cursive>`__, released under `Open Font\n   License <http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=OFL_web>`__.\n-  mistletoe is released under `GNU GPLv3 <LICENSE>`__, a copyleft license.\n\n.. |mistletoe| image:: https://cdn.rawgit.com/miyuchina/mistletoe/3f0125f1/logo.svg\n.. |Build Status| image:: https://travis-ci.org/miyuchina/mistletoe.svg?branch=master\n   :target: https://travis-ci.org/miyuchina/mistletoe\n.. |Coverage Status| image:: https://coveralls.io/repos/github/miyuchina/mistletoe/badge.svg\n   :target: https://coveralls.io/github/miyuchina/mistletoe?branch=master\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/miyuchina/mistletoe",
    "keywords": "markdown lexer parser development",
    "license": "GNU GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "mistletoe",
    "platform": "",
    "project_url": "https://pypi.org/project/mistletoe/",
    "release_url": "https://pypi.org/project/mistletoe/0.1.1/",
    "requires_dist": [],
    "requires_python": "~=3.5",
    "summary": "A fast, extensible Markdown parser in pure Python.",
    "version": "0.1.1"
  },
  "releases": {
    "0.1": [],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8979dfb5c4ca5fe8938c3549a183333e",
          "sha256": "15ce6486b6511429887c0b4bbd8077ad18e0945091dbbb2a25a443248a715603"
        },
        "downloads": 0,
        "filename": "mistletoe-0.1.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8979dfb5c4ca5fe8938c3549a183333e",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 25263,
        "upload_time": "2017-07-26T04:08:40",
        "url": "https://files.pythonhosted.org/packages/31/63/13b39873ae350b1d811ff992ad404c5e671f079ebaf2b80162d01c65840d/mistletoe-0.1.1-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "8979dfb5c4ca5fe8938c3549a183333e",
        "sha256": "15ce6486b6511429887c0b4bbd8077ad18e0945091dbbb2a25a443248a715603"
      },
      "downloads": 0,
      "filename": "mistletoe-0.1.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "8979dfb5c4ca5fe8938c3549a183333e",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 25263,
      "upload_time": "2017-07-26T04:08:40",
      "url": "https://files.pythonhosted.org/packages/31/63/13b39873ae350b1d811ff992ad404c5e671f079ebaf2b80162d01c65840d/mistletoe-0.1.1-py3-none-any.whl"
    }
  ]
}