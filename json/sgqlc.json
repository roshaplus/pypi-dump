{
  "info": {
    "author": "Gustavo Sverzut Barbieri",
    "author_email": "barbieri@profusion.mobi",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Environment :: Web Environment",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Topic :: Utilities"
    ],
    "description": "`sgqlc` - Simple GraphQL Client\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIntroduction\n------------\n\nThis package offers easy to use `GraphQL <http://graphql.org>`_\nclient. It's composed by the following modules:\n\n- :mod:`sgqlc.types`: declare GraphQL in Python, base to generate and\n  interpret queries. Submodule :mod:`sgqlc.types.datetime` will\n  provide bindings for :mod:`datetime` and ISO 8601, while\n  :mod:`sgqlc.types.relay` will expose ``Node``, ``PageInfo`` and\n  ``Connection``.\n\n- :mod:`sgqlc.operation`: use declared types to generate and\n  interpret queries.\n\n- :mod:`sgqlc.endpoint`: provide access to GraphQL endpoints, notably\n  :mod:`sgqlc.endpoint.http` provides :class:`HTTPEndpoint` using\n  :mod:`urllib.request.urlopen()`.\n\n\nWhat's GraphQL?\n===============\n\nStraight from http://graphql.org:\n\n   **A query language for your API**\n\n   GraphQL is a query language for APIs and a runtime for fulfilling\n   those queries with your existing data. GraphQL provides a complete\n   and understandable description of the data in your API, gives\n   clients the power to ask for exactly what they need and nothing\n   more, makes it easier to evolve APIs over time, and enables\n   powerful developer tools.\n\nIt was created by Facebook based on their problems and solutions using\n`REST <https://en.wikipedia.org/wiki/Representational_state_transfer>`_\nto develop applications to consume their APIs. It was publicly\nannounced at\n`React.js Conf 2015 <https://reactjs.org/blog/2015/02/20/introducing-relay-and-graphql.html>`_\nand started to gain traction since then. Right now there are big names\ntransitioning from REST to GraphQL:\n`Yelp <https://www.yelp.com/developers/graphql/guides/intro>`_\n`Shopify <https://help.shopify.com/api/storefront-api/graphql>`_\nand `GitHub <https://developer.github.com/v4/>`_, that did an\nexcellent\n`post <https://githubengineering.com/the-github-graphql-api/>`_\nto explain why they did change.\n\nA short list of advantages over REST:\n\n- Built-in schema, with documentation, strong typing and\n  introspection. There is no need to use\n  `Swagger <https://swagger.io>`_ or any other external tools to play\n  with it. Actually GraphQL provides a standard in-browser IDE for\n  exploring GraphQL endpoints: https://github.com/graphql/graphiql;\n\n- Only fields you want. The queries must explicitly select which\n  fields are required, and that's all you're getting. If more fields\n  are added to the type, they **won't break** the API, since the new\n  fields won't be returned to old clients, as they didn't ask for such\n  fields. This makes much easier to keep APIs stable and **avoids\n  versioning**. Standard REST usually delivers all available fields in\n  the results, and when new fields are to be included, a new API\n  version is added (reflected in the URL path);\n\n- All data in one request. Instead of navigating hypermedia-driven\n  RESTful services, like  discovering new ``\"_links\": {\"href\"...`` and\n  executing a new HTTP request, with GraphQL you specify nested\n  queries and let the whole navigation to be done by the server. This\n  reduces latency **a lot**;\n\n- Resulting JSON object matches exactly the given query selections, if\n  you requested for ``{ parent { child { info } } }``, you're going to\n  receive the JSON object ``{\"parent\": {\"child\": {\"info\": value }}}``.\n\nFrom GitHub's\n`Migrating from REST to GraphQL <https://developer.github.com/v4/guides/migrating-from-rest/>`_\none can see these in real life::\n\n   $ curl -v https://api.github.com/orgs/github/members\n   [\n     {\n       \"login\": \"...\",\n       \"id\": 1234,\n       \"avatar_url\": \"https://avatars3.githubusercontent.com/u/...\",\n       \"gravatar_id\": \"\",\n       \"url\": \"https://api.github.com/users/...\",\n       \"html_url\": \"https://github.com/...\",\n       \"followers_url\": \"https://api.github.com/users/.../followers\",\n       \"following_url\": \"https://api.github.com/users/.../following{/other_user}\",\n       \"gists_url\": \"https://api.github.com/users/.../gists{/gist_id}\",\n       \"starred_url\": \"https://api.github.com/users/.../starred{/owner}{/repo}\",\n       \"subscriptions_url\": \"https://api.github.com/users/.../subscriptions\",\n       \"organizations_url\": \"https://api.github.com/users/.../orgs\",\n       \"repos_url\": \"https://api.github.com/users/.../repos\",\n       \"events_url\": \"https://api.github.com/users/.../events{/privacy}\",\n       \"received_events_url\": \"https://api.github.com/users/.../received_events\",\n       \"type\": \"User\",\n       \"site_admin\": true\n     },\n     ...\n   ]\n\nbrings the whole set of member information, however you just want name\nand avatar URL::\n\n   query {\n     organization(login:\"github\") { # select the organization\n       members(first: 100) {        # then select the organization's members\n         edges {  # edges + node: convention for paginated queries\n           node {\n             name\n             avatarUrl\n           }\n         }\n       }\n     }\n   }\n\nLikewise, instead of 4 HTTP requests::\n\n   curl -v https://api.github.com/repos/profusion/sgqlc/pulls/9\n   curl -v https://api.github.com/repos/profusion/sgqlc/pulls/9/commits\n   curl -v https://api.github.com/repos/profusion/sgqlc/issues/9/comments\n   curl -v https://api.github.com/repos/profusion/sgqlc/pulls/9/reviews\n\nA single GraphQL query brings all the needed information, and just the\nneeded information::\n\n   query {\n     repository(owner: \"profusion\", name: \"sgqlc\") {\n       pullRequest(number: 9) {\n         commits(first: 10) { # commits of profusion/sgqlc PR #9\n           edges {\n             node { commit { oid, message } }\n           }\n         }\n         comments(first: 10) { # comments of profusion/sgqlc PR #9\n           edges {\n             node {\n               body\n               author { login }\n             }\n           }\n         }\n         reviews(first: 10) { # reviews of profusion/sgqlc/ PR #9\n           edges { node { state } }\n         }\n       }\n     }\n   }\n\n\nMotivation to create `sgqlc`\n============================\n\nAs seen above, writing GraphQL queries is very easy and equally easy\nto interpret the results, **what was the rationale to create sgqlc?**\n\n- GraphQL has its domain-specific language (DSL), and mixing two\n  languages is always painful, as seen with SQL + Python, HTML +\n  Python... Being able to write just Python in Python is much\n  better. Not to say that GraphQL naming convention is closer to\n  Java/JavaScript, using ``aNameFormat`` instead of Python's\n  ``a_name_format``.\n\n- Navigating dict-of-stuff is bit painful:\n  ``d[\"repository\"][\"pullRequest\"][\"commits\"][\"edges\"][\"node\"]``,\n  since these are valid Python identifiers, we better write:\n  ``repository.pull_request.commits.edges.node``.\n\n- Handling new ``scalar``. GraphQL allows one to define new scalar\n  types, such as ``Date``, ``Time`` and ``DateTime``. Often these are\n  serialized as ISO 8601 strings and the user must parse them in their\n  application. We offer ``sgqlc.types.datetime`` to automatically\n  generate :class:`datetime.date`, :class:`datetime.time` and\n  :class:`datetime.datetime`.\n\n- Make it easy to write dynamic queries, including nested. As seen,\n  GraphQL can be used to fetch lots of information in one go, however\n  if what you need (arguments and fields) changes based on some\n  variable, such as user input or cached data, then you need to\n  concatenate strings to compose the final query. This can be error\n  prone and servers may block you due invalid queries. Some tools\n  \"solve\" this by parsing the query locally before sending to\n  server. However usually the indentation is screwed and reviewing it\n  is painful. We change that approach: use\n  :class:`sgqlc.operation.Operation` and it will always generate valid\n  queries, which can be printed out and properly indented. Bonus point\n  is that it can be used to later interpret the JSON results into native\n  Python objects.\n\n- Usability improvements whenever needed. For instance\n  `Relay <https://facebook.github.io/relay/>`_ published their\n  `Cursor Connections Specification <https://facebook.github.io/relay/graphql/connections.htm>`_\n  and its widely used. To load more data, you need to extend the\n  previous data with newly fetched information, updating not only the\n  nodes and edges, but also page information. This is done\n  automatically by :class:`sgqlc.types.relay.Connection`.\n\nFuture plans include to generate the Python classes from GraphQL\nschema, which can be automatically fetched from an endpoint using\nthe introspection query.\n\nInstallation\n------------\n\nAutomatic::\n\n    pip install sgqlc\n\nFrom source using ``pip``::\n\n    pip install .\n\n\nUsage\n-----\n\nTo reach a GraphQL endpoint using synchronous `HTTPEndpoint` with a\nhand-written query (see more at ``examples/basic/http-endpoint.py``):\n\n.. code-block:: python\n\n   from sgqlc.endpoint.http import HTTPEndpoint\n\n   url = 'http://server.com/graphql'\n   headers = {'Authorization': 'bearer TOKEN'}\n\n   query = 'query { ... }'\n   variables = {'varName': 'value'}\n\n   endpoint = HTTPEndpoint(url, headers)\n   data = endpoint(query, variables)\n\n\nHowever, writing GraphQL queries and later interpreting the results\nmay be cumbersome, that's solved with our ``sgqlc.types``, that is\nusually paired with ``sgqlc.operation`` to generate queries and then\ninterpret results (see more at ``examples/basic/types.py``). The\nexample below matches a subset of `GitHub API v4\n<https://developer.github.com/v4/query/>`_, in GraphQL syntax it would\nbe::\n\n   query {\n     repository(owner: \"profusion\", name: \"sgqlc\") {\n       issues(first: 100) {\n         nodes {\n           number\n           title\n         }\n         pageInfo {\n           hasNextPage\n           endCursor\n         }\n       }\n     }\n   }\n\nThe output JSON object is:\n\n.. code-block:: json\n\n   {\n     \"data\": {\n       \"repository\": {\n         \"issues\": {\n           \"nodes\": [\n             {\"number\": 1, \"title\": \"...\"},\n             {\"number\": 2, \"title\": \"...\"}\n           ]\n         },\n         \"pageInfo\": {\n            \"hasNextPage\": false,\n            \"endCursor\": \"...\"\n         }\n       }\n     }\n   }\n\n.. code-block:: python\n\n   from sgqlc.endpoint.http import HTTPEndpoint\n   from sgqlc.types import Type, Field, list_of\n   from sgqlc.types.relay import Connection, connection_args\n   from sgqlc.operation import Operation\n\n   # Declare types matching GitHub GraphQL schema:\n   class Issue(Type):\n       number = int\n       title = str\n\n   class IssueConnection(Connection):  # Connection provides page_info!\n       nodes = list_of(Issue)\n\n   class Repository(Type):\n       issues = Field(IssueConnection, args=connection_args())\n\n   class Query(Type):  # GraphQL's root\n       repository = Field(Repository, args={'owner': str, 'name': str})\n\n   # Generate an operation on Query, selecting fields:\n   op = Operation(Query)\n   # select a field, here with selection arguments, then another field:\n   issues = op.repository(owner=owner, name=name).issues(first=100)\n   # select sub-fields explicitly: { nodes { number title } }\n   issues.nodes.number()\n   issues.nodes.title()\n   # here uses __fields__() to select by name (*args)\n   issues.page_info.__fields__('has_next_page')\n   # here uses __fields__() to select by name (**kwargs)\n   issues.page_info.__fields__(end_cursor=True)\n\n   # you can print the resulting GraphQL\n   print(op)\n\n   # Call the endpoint:\n   data = endpoint(op)\n\n   # Interpret results into native objects\n   repo = (op + data).repository\n   for issue in repo.issues.nodes:\n       print(issue)\n\n\nWhy double-underscore and overloaded arithmetic methods?\n========================================================\n\nSince we don't want to cobbler GraphQL fields, we cannot provide\nnicely named methods. Then we use overloaded methods such as\n``__iadd__``, ``__add__``, ``__bytes__`` (compressed GraphQL\nrepresentation) and ``__str__`` (indented GraphQL representation).\n\nTo select fields by name ``__fields__(*names, **names_and_args)``.\nThis helps with repetitive situations and can be used to \"include all\nfields\", or \"include all except...\":\n\n.. code-block:: python\n\n  # just 'a' and 'b'\n  type_selection.__fields__('a', 'b')\n  type_selection.__fields__(a=True, b=True) # equivalent\n\n  # a(arg1: value1), b(arg2: value2):\n  type_selection.__fields__(\n      a={'arg1': value1},\n      b={'arg2': value2})\n\n  # selects all possible fields\n  type_selection.__fields__()\n\n  # all but 'a' and 'b'\n  type_selection.__fields__(__exclude__=('a', 'b'))\n  type_selection.__fields__(a=False, b=False)\n\n\nCode Generator\n--------------\n\nManually converting an existing GraphQL schema to ``sgqlc.types``\nsubclasses is boring and error prone. To aid such task we offer a code\ngenerator that outputs a Python module straight from JSON of an\nintrospection call:\n\n.. code-block:: console\n\n   user@host$ python3 -m sgqlc.introspection \\\n        --exclude-deprecated \\\n        --exclude-description \\\n        -H \"Authorization: bearer ${GH_TOKEN}\" \\\n        https://api.github.com/graphql \\\n        github_schema.json\n   user@host$ sgqlc-codegen github_schema.json github_schema.py\n\nThis generates ``github_schema`` that provides the\n:class:`sgqlc.types.Schema` instance of the same name\n``github_schema``. Then it's a matter of using that in your Python code, as in the example below from ``examples/github/github-agile-dashboard.py``:\n\n.. code-block:: python\n\n   from sgqlc.operation import Operation\n   from github_schema import github_schema as schema\n\n   op = Operation(schema.Query)  # note 'schema.'\n\n   # -- code below follows as the original usage example:\n\n   # select a field, here with selection arguments, then another field:\n   issues = op.repository(owner=owner, name=name).issues(first=100)\n   # select sub-fields explicitly: { nodes { number title } }\n   issues.nodes.number()\n   issues.nodes.title()\n   # here uses __fields__() to select by name (*args)\n   issues.page_info.__fields__('has_next_page')\n   # here uses __fields__() to select by name (**kwargs)\n   issues.page_info.__fields__(end_cursor=True)\n\n   # you can print the resulting GraphQL\n   print(op)\n\n   # Call the endpoint:\n   data = endpoint(op)\n\n   # Interpret results into native objects\n   repo = (op + data).repository\n   for issue in repo.issues.nodes:\n       print(issue)\n\n\nAuthors\n-------\n\n- `Gustavo Sverzut Barbieri <barbieri@profusion.mobi>`_\n\n\nLicense\n-------\n`sgqlc` is licensed under the `ISC <https://opensource.org/licenses/ISC>`_.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/profusion/sgqlc",
    "keywords": "graphql client http endpoint",
    "license": "ISCL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "sgqlc",
    "platform": "any",
    "project_url": "https://pypi.org/project/sgqlc/",
    "release_url": "https://pypi.org/project/sgqlc/1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Simple GraphQL Client",
    "version": "1"
  },
  "releases": {
    "1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "567accbe3f57098277a059ea22c39d99",
          "sha256": "d30bc54c524e703e60ee82a275a316c1b462c5e004bcfa5b43300150f803ec93"
        },
        "downloads": -1,
        "filename": "sgqlc-1-py3.6.egg",
        "has_sig": false,
        "md5_digest": "567accbe3f57098277a059ea22c39d99",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "size": 95662,
        "upload_time": "2018-01-26T21:09:37",
        "url": "https://files.pythonhosted.org/packages/16/69/fb6fa52a2fe2a162fa26d3bd01055621a33fda08a9d665cec3631e6f0f3f/sgqlc-1-py3.6.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "63e2b4f45209dc620f260d40981535f9",
          "sha256": "0b51ba1c748bb577859c6fcd99ea731e9ed25204d9ca4a90550eab7584b5c81c"
        },
        "downloads": -1,
        "filename": "sgqlc-1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "63e2b4f45209dc620f260d40981535f9",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 53076,
        "upload_time": "2018-01-26T21:10:14",
        "url": "https://files.pythonhosted.org/packages/ae/2f/3e250cc4d97f7547a7081e3f588f6f8f2375c1f02a5025e5c2d5db0d9b55/sgqlc-1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "5fd580c0797df7b9c23ecf962412973a",
          "sha256": "4017c57421a1df6bb4cba40098e5a96330b8938537427c0a529a3093514c5202"
        },
        "downloads": -1,
        "filename": "sgqlc-1.tar.gz",
        "has_sig": false,
        "md5_digest": "5fd580c0797df7b9c23ecf962412973a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 50099,
        "upload_time": "2018-01-26T21:04:50",
        "url": "https://files.pythonhosted.org/packages/3e/3c/ec1d93401becb13eefacd96fcb7950f99b6b3eb72df2a2ce4e6d9f42433d/sgqlc-1.tar.gz"
      }
    ],
    "1.dev20180126": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b8580d727bace8a3e6553e0f2e5e8e9a",
          "sha256": "5cf28f35e4cb6584c7086c4a03816bb36938735255fbbcf1eb59cd7424936050"
        },
        "downloads": -1,
        "filename": "sgqlc-1.dev20180126-py3.6.egg",
        "has_sig": false,
        "md5_digest": "b8580d727bace8a3e6553e0f2e5e8e9a",
        "packagetype": "bdist_egg",
        "python_version": "3.6",
        "size": 95672,
        "upload_time": "2018-01-26T21:09:24",
        "url": "https://files.pythonhosted.org/packages/2c/75/98faa7ca221990b2ac872e052f7e41d1e2adf2a19f2173799d2393116e8c/sgqlc-1.dev20180126-py3.6.egg"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "567accbe3f57098277a059ea22c39d99",
        "sha256": "d30bc54c524e703e60ee82a275a316c1b462c5e004bcfa5b43300150f803ec93"
      },
      "downloads": -1,
      "filename": "sgqlc-1-py3.6.egg",
      "has_sig": false,
      "md5_digest": "567accbe3f57098277a059ea22c39d99",
      "packagetype": "bdist_egg",
      "python_version": "3.6",
      "size": 95662,
      "upload_time": "2018-01-26T21:09:37",
      "url": "https://files.pythonhosted.org/packages/16/69/fb6fa52a2fe2a162fa26d3bd01055621a33fda08a9d665cec3631e6f0f3f/sgqlc-1-py3.6.egg"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "63e2b4f45209dc620f260d40981535f9",
        "sha256": "0b51ba1c748bb577859c6fcd99ea731e9ed25204d9ca4a90550eab7584b5c81c"
      },
      "downloads": -1,
      "filename": "sgqlc-1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "63e2b4f45209dc620f260d40981535f9",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "size": 53076,
      "upload_time": "2018-01-26T21:10:14",
      "url": "https://files.pythonhosted.org/packages/ae/2f/3e250cc4d97f7547a7081e3f588f6f8f2375c1f02a5025e5c2d5db0d9b55/sgqlc-1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "5fd580c0797df7b9c23ecf962412973a",
        "sha256": "4017c57421a1df6bb4cba40098e5a96330b8938537427c0a529a3093514c5202"
      },
      "downloads": -1,
      "filename": "sgqlc-1.tar.gz",
      "has_sig": false,
      "md5_digest": "5fd580c0797df7b9c23ecf962412973a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 50099,
      "upload_time": "2018-01-26T21:04:50",
      "url": "https://files.pythonhosted.org/packages/3e/3c/ec1d93401becb13eefacd96fcb7950f99b6b3eb72df2a2ce4e6d9f42433d/sgqlc-1.tar.gz"
    }
  ]
}