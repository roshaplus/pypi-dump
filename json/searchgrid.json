{
  "info": {
    "author": "Joel Nothman",
    "author_email": "joel.nothman@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "``searchgrid`` documentation\n============================\n\nHelps building parameter grids for :ref:`scikit-learn grid search\n<scikit-learn:grid_search>`.\n\n|version| |licence| |py-versions|\n\n|issues| |build| |docs| |coverage|\n\nSpecifying a parameter grid for\n:class:`~sklearn.model_selection.GridSearchCV`\nin Scikit-Learn can be annoying, particularly when:\n\n-  you change your code to wrap some estimator in, say, a ``Pipeline``\n   and then need to prefix all the parameters in the grid using lots of\n   ``__``\\ s\n-  you are searching over multiple grids (i.e. your ``param_grid`` is a\n   list) and you want to make a change to all of those grids\n\n``searchgrid`` allows you to define (and change) the grid together with the\nesimator, reducing effort and sometimes code.\nIt stores the parameters you want to search on each particular estimator\nobject. This makes it much more straightforward to\nspecify complex parameter grids, and means you don't need to update your\ngrid when you change the structure of your composite estimator.\n\nIt provides two main functions:\n\n-  :func:`searchgrid.set_grid` is used to specify the parameter values to be\n   searched for an estimator or GP kernel.\n-  :func:`searchgrid.make_grid_search` is used to construct the\n   ``GridSearchCV`` object using the parameter space the estimator is annotated\n   with.\n\nQuick Start\n...........\n\nIf scikit-learn is installed, then, in a terminal::\n\n    pip install searchgrid\n\nand use in Python::\n\n    from search_grid import set_grid, make_grid_search\n    estimator = set_grid(MyEstimator(), param=[value1, value2, value3])\n    search = make_grid_search(estimator, cv=..., scoring=...)\n    search.fit(X, y)\n\nOr search for the best among multiple distinct estimators/pipelines::\n\n    search = make_grid_search([estimator1, estimator2], cv=..., scoring=...)\n    search.fit(X, y)\n\nMotivating examples\n...................\n\nLet's look over some of the messy change cases. We'll get some imports out of\nthe way.::\n\n    >>> from sklearn.pipeline import Pipeline\n    >>> from sklearn.linear_model import LogisticRegression\n    >>> from sklearn.feature_selection import SelectKBest\n    >>> from sklearn.decomposition import PCA\n    >>> from searchgrid import set_grid, make_grid_search\n    >>> from sklearn.model_selection import GridSearchCV\n\nWrapping an estimator in a pipeline.\n    You had code which searched over parameters for a classifier.\n    Now you want to search for that classifier in a Pipeline.\n    With plain old scikit-learn, you have to insert ``__``\\ s and change::\n\n        >>> gs = GridSearchCV(LogisticRegression(), {'C': [.1, 1, 10]})\n\n    to::\n\n        >>> gs = GridSearchCV(Pipeline([('reduce', SelectKBest()),\n        ...                             ('clf', LogisticRegression())]),\n        ...                   {'clf__C': [.1, 1, 10]})\n\n    With ``searchgrid`` we only have to wrap our classifier in a Pipeline, and\n    do not have to change the parameter grid, adding the ``clf__`` prefix. From::\n\n        >>> lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n        >>> gs = make_grid_search(lr)\n\n    to::\n\n        >>> lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n        >>> gs = make_grid_search(Pipeline([('reduce', SelectKBest()),\n        ...                                 ('clf', lr)]))\n\n\nYou want to change the estimator being searched in a pipeline.\n    With scikit-learn, to use PCA instead of SelectKBest, you change::\n\n        >>> pipe = Pipeline([('reduce', SelectKBest()),\n        ...                  ('clf', LogisticRegression())])\n        >>> gs = GridSearchCV(pipe,\n        ...                   {'reduce__k': [5, 10, 20],\n        ...                    'clf__C': [.1, 1, 10]})\n\n    to::\n\n        >>> pipe = Pipeline([('reduce', PCA()),\n        ...                  ('clf', LogisticRegression())])\n        >>> gs = GridSearchCV(pipe,\n        ...                   {'reduce__n_components': [5, 10, 20],\n        ...                    'clf__C': [.1, 1, 10]})\n\n    Note that ``reduce__k`` became ``reduce__n_components``.\n\n    With ``searchgrid`` it's easier because you change the estimator and the\n    parameters in the same place::\n\n        >>> reduce = set_grid(SelectKBest(), k=[5, 10, 20])\n        >>> lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n        >>> pipe = Pipeline([('reduce', reduce),\n        ...                  ('clf', lr)])\n        >>> gs = make_grid_search(pipe)\n\n    becomes::\n\n        >>> reduce = set_grid(PCA(), n_components=[5, 10, 20])\n        >>> lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n        >>> pipe = Pipeline([('reduce', reduce),\n        ...                  ('clf', lr)])\n        >>> gs = make_grid_search(pipe)\n\nSearching over multiple grids.\n    You want to take the code from the previous example, but instead search\n    over feature selection and PCA reduction in the same search.\n\n    Without ``searchgrid``::\n\n        >>> pipe = Pipeline([('reduce', None),\n        ...                  ('clf', LogisticRegression())])\n        >>> gs = GridSearchCV(pipe, [{'reduce': [SelectKBest()],\n        ...                           'reduce__k': [5, 10, 20],\n        ...                           'clf__C': [.1, 1, 10]},\n        ...                          {'reduce': [PCA()],\n        ...                           'reduce__n_components': [5, 10, 20],\n        ...                           'clf__C': [.1, 1, 10]}])\n\n    With ``searchgrid``::\n\n        >>> kbest = set_grid(SelectKBest(), k=[5, 10, 20])\n        >>> pca = set_grid(PCA(), n_components=[5, 10, 20])\n        >>> lr = set_grid(LogisticRegression(), C=[.1, 1, 10])\n        >>> pipe = set_grid(Pipeline([('reduce', None),\n        ...                           ('clf', lr)]),\n        ...                 reduce=[kbest, pca])\n        >>> gs = make_grid_search(pipe)\n\n.. |py-versions| image:: https://img.shields.io/pypi/pyversions/searchgrid.svg\n    :alt: Python versions supported\n\n.. |version| image:: https://badge.fury.io/py/searchgrid.svg\n    :alt: Latest version on PyPi\n    :target: https://badge.fury.io/py/searchgrid\n\n.. |build| image:: https://travis-ci.org/jnothman/searchgrid.svg?branch=master\n    :alt: Travis CI build status\n    :scale: 100%\n    :target: https://travis-ci.org/jnothman/searchgrid\n\n.. |issues| image:: https://img.shields.io/github/issues/jnothman/searchgrid.svg\n    :alt: Issue tracker\n    :target: https://github.com/jnothman/searchgrid\n\n.. |coverage| image:: https://coveralls.io/repos/github/jnothman/searchgrid/badge.svg\n    :alt: Test coverage\n    :target: https://coveralls.io/github/jnothman/searchgrid\n\n.. |docs| image:: https://readthedocs.org/projects/searchgrid/badge/?version=latest\n     :alt: Documentation Status\n     :scale: 100%\n     :target: https://searchgrid.readthedocs.io/en/latest/?badge=latest\n\n.. |licence| image:: https://img.shields.io/badge/Licence-BSD-blue.svg\n     :target: https://opensource.org/licenses/BSD-3-Clause\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://searchgrid.readthedocs.io",
    "keywords": "",
    "license": "BSD 3-Clause License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "searchgrid",
    "platform": "",
    "project_url": "https://pypi.org/project/searchgrid/",
    "release_url": "https://pypi.org/project/searchgrid/0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Helpers for building parameter grids for scikit-learn grid search",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9a4349ef6135bae4ab35429ac6803900",
          "sha256": "7b6f832f83e77d599644dcba9f5d2f385d3c6923b23aeddb345bf1e255d60c6e"
        },
        "downloads": -1,
        "filename": "searchgrid-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "9a4349ef6135bae4ab35429ac6803900",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4885,
        "upload_time": "2017-10-19T02:22:21",
        "url": "https://files.pythonhosted.org/packages/36/8f/86cb25fd073f5054be9f75b9378dafd424e42836ba3074bc2b026f60403c/searchgrid-0.1.tar.gz"
      }
    ],
    "0.1a1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5d3ce0ba2aa34232cdf054f4c9ebc068",
          "sha256": "158f5620a5d41270ab5283a98e43da148d193134542bfbaecc887039e6963214"
        },
        "downloads": -1,
        "filename": "searchgrid-0.1a1.tar.gz",
        "has_sig": false,
        "md5_digest": "5d3ce0ba2aa34232cdf054f4c9ebc068",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3217,
        "upload_time": "2017-08-04T04:01:05",
        "url": "https://files.pythonhosted.org/packages/14/c7/e0640b497c75586a69286201696d15a23327c58f95694e20958750321505/searchgrid-0.1a1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9a4349ef6135bae4ab35429ac6803900",
        "sha256": "7b6f832f83e77d599644dcba9f5d2f385d3c6923b23aeddb345bf1e255d60c6e"
      },
      "downloads": -1,
      "filename": "searchgrid-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "9a4349ef6135bae4ab35429ac6803900",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4885,
      "upload_time": "2017-10-19T02:22:21",
      "url": "https://files.pythonhosted.org/packages/36/8f/86cb25fd073f5054be9f75b9378dafd424e42836ba3074bc2b026f60403c/searchgrid-0.1.tar.gz"
    }
  ]
}