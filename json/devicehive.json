{
  "info": {
    "author": "DataArt (http://dataart.com)",
    "author_email": "info@devicehive.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": ".. figure:: https://travis-ci.org/devicehive/devicehive-python.svg?branch=stable\n   :alt: build status\n\n   build status\n\nDevicehive\n==========\n\nCreating a client\n-----------------\n\nCreating a client with a new version of library is very simple. First of\nall you need to create custom ``Handler`` class.\n\nExample of creating custom ``Handler`` class:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            info = self.api.get_info()\n            print(info)\n\n``handle_connect`` is the only one required method. If you want to\nhandle server events you heed to implement ``handle_command_insert``,\n``handle_command_update`` and ``handle_notification`` methods. Here is\nthe example:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n        \n        def handle_connect(self):\n            self.api.subscribe_insert_commands()\n            self.api.subscribe_update_commands()\n            self.api.subscribe_notifications()\n\n        def handle_command_insert(self, command):\n            print(command.command)\n\n        def handle_command_update(self, command):\n            print(command.command)\n\n        def handle_notification(self, notification):\n            print(notification.notification)\n\nThe second step is to use ``DeviceHive`` class for creating connection\nto the server.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n    from devicehive import DeviceHive\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            self.api.subscribe_insert_commands()\n            self.api.subscribe_update_commands()\n            self.api.subscribe_notifications()\n\n        def handle_command_insert(self, command):\n            print(command.command)\n\n        def handle_command_update(self, command):\n            print(command.command)\n\n        def handle_notification(self, notification):\n            print(notification.notification)\n\n\n    url = 'http://playground.dev.devicehive.com/api/rest'\n    refresh_token = 'SOME_REFRESH_TOKEN'\n    dh = DeviceHive(SimpleHandler)\n    dh.connect(url, refresh_token=refresh_token)\n    dh.join()\n\nCustom handler args\n~~~~~~~~~~~~~~~~~~~\n\nIf you need to initialize your handler you can do it the next way:\n\n.. code:: python\n\n    from devicehive import Handler\n    from devicehive import DeviceHive\n\n\n    class SimpleHandler(Handler):\n\n        def __init__(self, api, some_arg, some_kwarg):\n            Handler.__init__(self, api)\n            self._some_arg = some_arg\n            self._some_kwarg = some_kwarg\n\n        def handle_connect(self):\n            info = self.api.get_info()\n            print(info)\n\n    dh = DeviceHive(SimpleHandler, 'some_arg', some_kwarg='some_kwarg')\n\nWebsocket protocol\n~~~~~~~~~~~~~~~~~~\n\nIf you want to use ``Websocket`` protocol you need only to specify the\nurl:\n\n.. code:: python\n\n    url = 'ws://playground.dev.devicehive.com/api/websocket'\n\nAuthentication.\n~~~~~~~~~~~~~~~\n\nThere are three ways of initial authentication:\n\n-  Using refresh token\n-  Using access token\n-  Using login and password\n\nExamples:\n\n.. code:: python\n\n    url = 'ws://playground.dev.devicehive.com/api/websocket'\n    dh.connect(url, refresh_token='SOME_REFRESH_TOKEN')\n\n.. code:: python\n\n    url = 'ws://playground.dev.devicehive.com/api/websocket'\n    dh.connect(url, access_token='SOME_ACCESS_TOKEN')\n\n.. code:: python\n\n    url = 'ws://playground.dev.devicehive.com/api/websocket'\n    dh.connect(url, login='SOME_LOGIN', password='SOME_PASSWORD')\n\nAPI\n---\n\nAll api calls may be done via ``api`` object. This object available\ninside custom handler with ``self.api``.\n\nInfo\n~~~~\n\n``self.api.get_info()`` returns ``dict`` with the next fields: \\*\n``api_version`` \\* ``server_timestamp`` \\* ``rest_server_url`` \\*\n``websocket_server_url``\n\n``self.api.get_cluster_info()`` returns ``dict`` with the next fields:\n\\* ``bootstrap.servers`` \\* ``zookeeper.connect``\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            info = self.api.get_info()\n            print(info)\n            cluster_info = self.api.get_cluster_info()\n            print(cluster_info)\n\nProperties\n~~~~~~~~~~\n\n``self.api.get_property(name)`` returns ``dict`` with the next fields:\n\\* ``entity_version`` \\* ``name`` \\* ``value``\n\n``self.api.set_property(name, value)`` returns entity version.\n\n``self.api.delete_property(name)`` does not return anything.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            name = 'user.login.lastTimeoutSent'\n            prop = self.api.get_property(name)\n            print(prop)\n            entity_version = self.api.get_property(name, 'value')\n            print(entity_version)\n            self.api.delete_property(name)\n\nTokens\n~~~~~~\n\n``self.api.create_token(user_id, expiration, actions, network_ids, device_ids)``\nreturns ``dict`` with the next fields: \\* ``access_token`` \\*\n``refresh_token``\n\nonly ``user_id`` arg is required.\n\n``self.api.refresh_token()`` refreshes the access token and returns it.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            tokens = self.api.create_token(1)\n            print(tokens)\n            access_token = self.api.refresh_token()\n            print(access_token)\n\nCommands subscription and unsubscription\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``self.api.subscribe_insert_commands(device_ids, names, timestamp)``\ndoes not return anything.\n\n``self.api.subscribe_update_commands(device_ids, names, timestamp)``\ndoes not return anything.\n\nOnly ``device_ids`` arg is required.\n\n``self.api.unsubscribe_insert_commands(device_ids)`` does not return\nanything. ``self.api.unsubscribe_update_commands(device_ids)`` does not\nreturn anything.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            device_id = 'example-device'\n            device = self.api.put_device(device_id)\n            command_name = 'example-command'\n            self.api.subscribe_insert_commands([device_id], [command_name])\n            self.api.subscribe_update_commands([device_id], [command_name])\n            command = device.send_command(command_name)\n            command.status = 'new-status'\n            command.save()\n\n        def handle_command_insert(self, command):\n            print('Command insert: %s, status: %s.' % (command.command,\n                                                       command.status))\n\n        def handle_command_update(self, command):\n            print('Command update: %s, status: %s.' % (command.command,\n                                                       command.status))\n            self.api.unsubscribe_insert_commands(['example-device'])\n            self.api.unsubscribe_update_commands(['example-device'])\n\nNotifications subscription and unsubscription\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``self.api.subscribe_notifications(device_ids, names, timestamp)`` does\nnot return anything. Only ``device_ids`` arg is required.\n\n``self.api.unsubscribe_notifications(device_ids)`` does not return\nanything.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            device_id = 'example-device'\n            device = self.api.put_device(device_id)\n            notification_name = 'example-notification'\n            self.api.subscribe_notifications([device_id], [notification_name])\n            device.send_notification(notification_name)\n\n        def handle_notification(self, notification):\n            print('Notification: %s.' % notification.notification)\n            self.api.unsubscribe_notifications(['example-device'])\n\nDevices\n~~~~~~~\n\n``self.api.list_devices(name, name_pattern, network_id, network_name, sort_field,                        sort_order, take, skip)``\nreturns list of ``Device`` objects. All args are optional.\n\n``self.api.get_device(device_id)`` returns ``Device`` object.\n\n``self.api.put_device(device_id, name, data, network_id, is_blocked)``\n\nOnly ``device_id`` arg is required.\n\nDevice object\n^^^^^^^^^^^^^\n\nProperties: \\* ``id`` (read only) \\* ``name`` \\* ``data`` \\*\n``network_id`` \\* ``is_blocked``\n\nMethods: \\* ``save()`` Does not return anything. \\* ``remove()`` Does\nnot return anything. \\* ``subscribe_insert_commands(names, timestamp)``\nDoes not return anything. All args are optional. \\*\n``unsubscribe_insert_commands()`` Does not return anything. \\*\n``subscribe_update_commands(names, timestamp)`` Does not return\nanything. All args are optional. \\* ``unsubscribe_update_commands()``\nDoes not return anything. \\*\n``list_commands(start, end, command, status, sort_field, sort_order, take,                  skip)``\nReturns list of ``Command`` objects. All args are optional. \\*\n``send_command(command_name, parameters, lifetime, timestamp, status, result)``\nReturns ``Command`` object. Only ``command_name`` is required. \\*\n``subscribe_notifications(names, timestamp)`` Does not return anything.\nAll args are optional. \\* ``unsubscribe_notifications()`` Does not\nreturn anything. \\*\n``list_notifications(start, end, notification, sort_field, sort_order, take,                       skip)``\nReturns list of ``Notification`` objects. All args are optional. \\*\n``send_notification(notification_name, parameters, timestamp)`` Returns\n``Notification`` object. Only ``notification_name`` is required.\n\nCommand object\n^^^^^^^^^^^^^^\n\nProperties: \\* ``id`` (read only) \\* ``user_id`` (read only) \\*\n``command`` (read only) \\* ``parameters`` (read only) \\* ``lifetime``\n(read only) \\* ``timestamp`` (read only) \\* ``last_updated`` (read only)\n\\* ``status`` \\* ``result``\n\nMethods: \\* ``save()`` Does not return anything.\n\nNotification object\n^^^^^^^^^^^^^^^^^^^\n\nProperties: \\* ``device_id`` (read only) \\* ``id`` (read only) \\*\n``notification`` (read only) \\* ``parameters`` (read only) \\*\n``timestamp`` (read only)\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            device_id = 'example-device'\n            device = self.api.put_device(device_id)\n            device.name = 'new-device-name'\n            device.data = {'key': 'value'}\n            device.save()\n            devices = self.api.list_devices()\n            for device in devices:\n                print('Device: %s, name: %s, data: %s' % (device.id, device.name,\n                                                          device.data))\n                device.remove()\n\nNetworks\n~~~~~~~~\n\n``self.api.list_networks(name, name_pattern, sort_field, sort_order, take, skip)``\nreturns list of ``Network`` objects. All args are optional.\n\n``self.api.get_network(network_id)`` returns ``Network`` object.\n\n``self.api.create_network(name, description)`` returns ``Network``\nobject.\n\nNetwork object\n^^^^^^^^^^^^^^\n\nProperties: \\* ``id`` (read only) \\* ``name`` \\* ``description``\n\nMethods: \\* ``save()`` Does not return anything. \\* ``remove()`` Does\nnot return anything. \\*\n``list_devices(name, name_pattern, sort_field, sort_order, take, skip)``\nReturns list of ``Device`` objects. All args are optional.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            network_name = 'example-name'\n            network_description = 'example-description'\n            network = self.api.create_network(network_name, network_description)\n            print(network.name)\n\nUsers\n~~~~~\n\n``self.api.list_users(login, login_pattern, role, status, sort_field, sort_order,                      take, skip)``\nreturns list of ``User`` objects. All args are optional.\n\n``self.api.get_current_user()`` returns ``User`` object.\n\n``self.api.get_user(user_id)`` returns ``User`` object.\n\n``self.api.create_user(self, login, password, role, data)`` returns\n``User`` object.\n\nUser object\n^^^^^^^^^^^\n\nProperties: \\* ``id`` (read only) \\* ``login`` (read only) \\*\n``last_login`` (read only) \\* ``intro_reviewed`` (read only) \\* ``role``\n\\* ``status`` \\* ``data``\n\nMethods: \\* ``save()`` Does not return anything. \\*\n``update_password(password)`` Does not return anything. \\* ``remove()``\nDoes not return anything. \\* ``list_networks()`` Returns list of\n``Network`` objects. \\* ``assign_network(network_id)`` Does not return\nanything. \\* ``unassign_network(network_id)`` Does not return anything.\n\nExample:\n\n.. code:: python\n\n    from devicehive import Handler\n    from devicehive.user import User\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            login = 'example-login'\n            password = 'example-password'\n            role = User.CLIENT_ROLE\n            data = {'key': 'value'}\n            user = self.api.create_user(login, password, role, data)\n            print(user.login)\n\nExtended example:\n-----------------\n\nHere we will create one endpoint which sends notifications and other\nendpoint which receives these notifications.\n\nOn the first we will create ``receiver.py``:\n\n.. code:: python\n\n    from devicehive import Handler\n    from devicehive import DeviceHive\n\n\n    class ReceiverHandler(Handler):\n\n        def __init__(self, api, device_id='simple-example-device',\n                     accept_command_name='accept_notifications'):\n            Handler.__init__(self, api)\n            self._device_id = device_id\n            self._accept_command_name = accept_command_name\n            self._device = None\n\n        def handle_connect(self):\n            self._device = self.api.put_device(self._device_id)\n            self._device.subscribe_insert_commands([self._accept_command_name])\n            self._device.subscribe_notifications()\n\n        def handle_command_insert(self, command):\n            print('Accept command \"%s\"' % self._accept_command_name)\n            command.status = 'accepted'\n            command.save()\n\n        def handle_notification(self, notification):\n            print('Notification \"%s\" received' % notification.notification)\n\n\n    url = 'ws://playground.dev.devicehive.com/api/websocket'\n    refresh_token = 'SOME_REFRESH_TOKEN'\n    dh = DeviceHive(ReceiverHandler)\n    dh.connect(url, refresh_token=refresh_token)\n    dh.join()\n    dh.print_exception()\n\nOn the next step we will create ``sender.py``\n\n.. code:: python\n\n    from devicehive import Handler\n    from devicehive import DeviceHive\n\n\n    class SenderHandler(Handler):\n\n        def __init__(self, api, device_id='simple-example-device',\n                     accept_command_name='accept_notifications',\n                     num_notifications=10):\n            Handler.__init__(self, api)\n            self._device_id = device_id\n            self._accept_command_name = accept_command_name\n            self._num_notifications = num_notifications\n            self._device = None\n\n        def _send_notifications(self):\n            for num_notification in range(self._num_notifications):\n                notification = '%s-notification' % num_notification\n                self._device.send_notification(notification)\n                print('Sending notification \"%s\"' % notification)\n\n        def handle_connect(self):\n            self._device = self.api.get_device(self._device_id)\n            self._device.send_command(self._accept_command_name)\n            print('Sending command \"%s\"' % self._accept_command_name)\n            self._device.subscribe_update_commands([self._accept_command_name])\n\n        def handle_command_update(self, command):\n            if command.status == 'accepted':\n                print('Command \"%s\" accepted' % self._accept_command_name)\n                self._send_notifications()\n\n\n    url = 'http://playground.dev.devicehive.com/api/rest'\n    refresh_token = 'SOME_REFRESH_TOKEN'\n    dh = DeviceHive(SenderHandler)\n    dh.connect(url, refresh_token=refresh_token)\n    dh.join()\n    dh.print_exception()\n\nRun ``python receiver.py`` in the first terminal. And\n``python sender.py`` in the second. The order of run is important.\n``receiver.py`` must be started first.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://devicehive.com",
    "keywords": "iot cloud m2m gateway embedded devicehive",
    "license": "Apache License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "devicehive",
    "platform": "",
    "project_url": "https://pypi.org/project/devicehive/",
    "release_url": "https://pypi.org/project/devicehive/2.0.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "DeviceHive Python connectivity library",
    "version": "2.0.0"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fd47cba0374ca1cb282a0bbe5ebd1cc5",
          "sha256": "902343bd8a48b162b419b21d9e7e35270a6fa471a5a98b0e694300e76f504068"
        },
        "downloads": 0,
        "filename": "devicehive-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fd47cba0374ca1cb282a0bbe5ebd1cc5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24649,
        "upload_time": "2017-08-22T11:49:35",
        "url": "https://files.pythonhosted.org/packages/40/fc/adce1ac83671395eba3a35fbcc58d0e8116f0cbc66c78095a49b90ca4ff6/devicehive-0.0.1.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ce13628adbfd4312049a9e4a69dffe9b",
          "sha256": "aa6515da703338fc1e34d4d1b2e5e89f9b18bca5c5b58de6ac3c1534fe0af71c"
        },
        "downloads": 0,
        "filename": "devicehive-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "ce13628adbfd4312049a9e4a69dffe9b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 24636,
        "upload_time": "2017-08-22T11:51:45",
        "url": "https://files.pythonhosted.org/packages/85/72/d42189201c68cfe706a8317d6b2d41fadaeb1135485357d7472aa2e233a2/devicehive-2.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ce13628adbfd4312049a9e4a69dffe9b",
        "sha256": "aa6515da703338fc1e34d4d1b2e5e89f9b18bca5c5b58de6ac3c1534fe0af71c"
      },
      "downloads": 0,
      "filename": "devicehive-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "ce13628adbfd4312049a9e4a69dffe9b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 24636,
      "upload_time": "2017-08-22T11:51:45",
      "url": "https://files.pythonhosted.org/packages/85/72/d42189201c68cfe706a8317d6b2d41fadaeb1135485357d7472aa2e233a2/devicehive-2.0.0.tar.gz"
    }
  ]
}