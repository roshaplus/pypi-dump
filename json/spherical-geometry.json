{
  "info": {
    "author": "Michael Droettboom",
    "author_email": "help@stsci.edu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "User documentation\n==================\n\n.. currentmodule:: spherical_geometry\n\nThe ``spherical_geometry`` library is a Python package for handling spherical\npolygons that represent arbitrary regions of the sky.\n\nRequirements\n------------\n\n- Python 2.7, 3.3 or 3.4\n\n- Numpy 1.5.0 or later\n\n- astropy 0.3 or later\n\n- qd-library 2.3.7 or later (optional: if not available, the\n  bundled version will be used).  To force using the system-installed\n  version, build with ``setup.py build --use-system-qd``.\n\nCoordinate representation\n-------------------------\n\nCoordinates in world space are traditionally represented by right\nascension and declination (*ra* and *dec*), or longitude and latitude.\nWhile these representations are convenient, they have discontinuities\nat the poles, making operations on them trickier at arbitrary\nlocations on the sky sphere.  Therefore, all internal operations of\nthis library are done in 3D vector space, where coordinates are\nrepresented as (*x*, *y*, *z*) vectors.  The `spherical_geometry.vector` module\ncontains functions to convert between (*ra*, *dec*) and (*x*, *y*,\n*z*) representations.\n\nWhile any (*x*, *y*, *z*) triple represents a vector and therefore a\nlocation on the sky sphere, a distinction must be made between\nnormalized coordinates that fall exactly on the unit sphere, and\nunnormalized coordinates which do not.  A normalized coordinate is\ndefined as a vector whose length is 1, i.e.:\n\n.. math::\n\n    \\sqrt{x^2 + y^2 + z^2} = 1\n\nTo prevent unnecessary recomputation, many methods in this library\nassume that the vectors passed in are already normalized.  If this is\nnot the case, `spherical_geometry.vector.normalize_vector` can be used to\nnormalize an array of vectors.\n\nWhen not working in Cartesian vectors, the library allows the user to\nwork in either degrees or radians.  All methods that require or return\nan angular value have a ``degrees`` keyword argument.  When\n``degrees`` is `True`, these measurements are in degrees, otherwise\nthey are in radians.\n\n.. warning::\n\n    Due to constraints in the precision of intersection calculations,\n    points on the sphere that are closer than :math:`2^{-32}` along a\n    Cartesian axis are automatically merged into a single point.  This\n    prevents intersections from being missed due to floating point\n    rounding error.  There is currently no implemented solution to\n    deal with points that need to be closer together.\n\nSpherical polygons\n------------------\n\nSpherical polygons are arbitrary areas on the sky sphere enclosed by\ngreat circle arcs.  They are represented by the\n`~spherical_geometry.polygon.SphericalPolygon` class.\n\nRepresentation\n``````````````\n\nThe points defining the polygon are available from the\n`~polygon.SphericalPolygon.points` property.  It is a Nx3 array where\neach row is an (*x*, *y*, *z*) vector, normalized.  The polygon points\nare explicitly closed, i.e., the first and last points are the same.\n\nWhere is the inside?\n^^^^^^^^^^^^^^^^^^^^\n\nThe edges of a polygon serve to separate the \u201cinside\u201d from the\n\u201coutside\u201d area.  On a traditional 2D planar surface, the \u201cinside\u201d is\ndefined as the finite area and the \u201coutside\u201d is the infinite area.\nHowever, since the surface of a sphere is cyclical, i.e., it wraps\naround on itself, the a spherical polygon actually defines two finite\nareas.  To specify which should be considered the \u201cinside\u201d vs. the\n\u201coutside\u201d, the definition of the polygon also has an \u201cinside point\u201d\nwhich is just any point that should be considered inside of the\npolygon.\n\nIn the following image, the inside point (marked with the red dot)\ndeclares that the area of the polygon is the green region, and not the\nwhite region.\n\n.. image:: inside.png\n\nThe inside point of the the polygon can be obtained from the\n`~polygon.SphericalPolygon.inside` property.\n\nCut lines\n^^^^^^^^^\n\nIf the polygon represents two disjoint areas or the polygon has holes,\nthose areas will be connected by cut lines.  The following image shows\na polygon made from the union of a number of cone areas which has both\na hole and a disjoint region connected by cut lines.\n\n.. image:: cutlines.png\n\nCreating spherical polygons\n```````````````````````````\n\n.. currentmodule:: spherical_geometry.polygon\n\n`SphericalPolygon` objects have 4 different constructors:\n\n  - `SphericalPolygon`: Takes an array of (*x*, *y*, *z*) points, or a\n    list of disjoint `SphericalPolygon` instances.\n\n  - `SphericalPolygon.from_radec`: Takes an array of (*ra*, *dec*)\n    points and an inside point.\n\n  - `SphericalPolygon.from_cone`: Creates a polygon from a cone on the\n    sky shere.  Takes (*ra*, *dec*, *radius*).\n\n  - `SphericalPolygon.from_wcs`: Creates a polygon from the footprint\n    of a FITS image using its WCS header keywords.  Takes a FITS\n    filename or a `astropy.io.fits.Header` object.\n\nOperations on Spherical Polygons\n````````````````````````````````\n\nOnce one has a `SphericalPolygon` object, there are a number of\noperations available:\n\n  - `~SphericalPolygon.contains_point`: Determines if the given point\n    is inside the polygon.\n\n  - `~SphericalPolygon.intersects_poly`: Determines if one polygon\n    intersects with another.\n\n  - `~SphericalPolygon.area`: Determine the area of a polygon.\n\n  - `~SphericalPolygon.union` and `~SphericalPolygon.multi_union`:\n    Return a new polygon that is the union of two or more polygons.\n\n  - `~SphericalPolygon.intersection` and\n    `~SphericalPolygon.multi_intersection`: Return a new polygon that\n    is the intersection of two or more polygons.\n\n  - `~SphericalPolygon.overlap`: Determine how much a given polygon\n    overlaps another.\n\n  - `~SphericalPolygon.to_radec`: Convert (*x*, *y*, *z*) points in the\n    polygon to (*ra*, *dec*) points.\n\n  - `~SphericalPolygon.draw`: Plots the polygon using matplotlib\u2019s\n    Basemap toolkit.  This feature is rather bare and intended\n    primarily for debugging purposes.\n\nGreat circle arcs\n-----------------\n\n.. currentmodule:: spherical_geometry.great_circle_arc\n\nAs seen above, great circle arcs are used to define the edges of the\npolygon.  The `spherical_geometry.great_circle_arc` module contains a number of\nfunctions that are useful for dealing with them.\n\n- `length`: Returns the angular distance between two points on the sphere.\n\n- `intersection`: Returns the intersection point between two great\n  circle arcs.\n\n- `intersects`: Determines if two great circle arcs intersect.\n\n- `intersects_point`: Determines if a point is along the great circle\n  arc.\n\n- `angle`: Calculate the angle between two great circle arcs.\n\n- `midpoint`: Calculate the midpoint along a great circle arc.\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://www.stsci.edu/resources/software_hardware/stsci_python",
    "keywords": null,
    "license": "BSD",
    "maintainer": null,
    "maintainer_email": null,
    "name": "spherical-geometry",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/spherical-geometry/",
    "release_url": "https://pypi.org/project/spherical-geometry/1.0.6/",
    "requires_python": null,
    "summary": "Python based tools for spherical geometry",
    "version": "1.0.6"
  },
  "releases": {
    "1.0.4": [],
    "1.0.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "49a7c0608692189edfd5a5c5098ef992",
          "sha256": "31a85b2e16b583fcbc089cdd0cc8cb5b4bb6002ca72d2fa33f491754e5ca38f7"
        },
        "downloads": 675,
        "filename": "spherical_geometry-1.0.6.tar.gz",
        "has_sig": false,
        "md5_digest": "49a7c0608692189edfd5a5c5098ef992",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 634270,
        "upload_time": "2016-03-22T14:59:18",
        "url": "https://files.pythonhosted.org/packages/d5/cd/67f402c57849bdd5ef0d696e4e2356031cf704f7ea445ffa3b7bf0f23e09/spherical_geometry-1.0.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "49a7c0608692189edfd5a5c5098ef992",
        "sha256": "31a85b2e16b583fcbc089cdd0cc8cb5b4bb6002ca72d2fa33f491754e5ca38f7"
      },
      "downloads": 675,
      "filename": "spherical_geometry-1.0.6.tar.gz",
      "has_sig": false,
      "md5_digest": "49a7c0608692189edfd5a5c5098ef992",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 634270,
      "upload_time": "2016-03-22T14:59:18",
      "url": "https://files.pythonhosted.org/packages/d5/cd/67f402c57849bdd5ef0d696e4e2356031cf704f7ea445ffa3b7bf0f23e09/spherical_geometry-1.0.6.tar.gz"
    }
  ]
}