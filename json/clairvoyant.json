{
  "info": {
    "author": "Anthony Federico",
    "author_email": "dephoona@gmail.com",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "<p align=\"center\"><img width=12.5% src=\"https://github.com/anfederico/Clairvoyant/blob/master/media/Logo.png\"></p>\n<p align=\"center\"><img width=60% src=\"https://github.com/anfederico/Clairvoyant/blob/master/media/Clairvoyant.png\"></p>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n[![PyPI version](https://badge.fury.io/py/clairvoyant.svg)](https://badge.fury.io/py/clairvoyant)\n[![Build Status](https://travis-ci.org/anfederico/Clairvoyant.svg?branch=master)](https://travis-ci.org/anfederico/Clairvoyant)\n![Dependencies](https://img.shields.io/badge/dependencies-up%20to%20date-brightgreen.svg)\n[![GitHub Issues](https://img.shields.io/github/issues/anfederico/Clairvoyant.svg)](https://github.com/anfederico/Clairvoyant/issues)\n![Contributions welcome](https://img.shields.io/badge/contributions-welcome-brightgreen.svg)\n[![License](https://img.shields.io/badge/license-MIT%20License-brightgreen.svg)](https://opensource.org/licenses/MIT)\n\n## Basic Overview\n\nUsing stock historical data, train a supervised learning algorithm with any combination of financial indicators. Rapidly backtest your model for accuracy and simulate investment portfolio performance. \n<p align=\"center\"><img width=95% src=\"https://github.com/anfederico/Waldo/blob/master/media/Schematic.png\"></p>\n\n<br>\n\n## Visualize the Learning Process\n<img src=\"https://github.com/anfederico/Clairvoyant/blob/master/media/Learning.gif\" width=40%>\n\n<br>\n\n## Install\n```python\npip install clairvoyant\n```\n\n<br>\n\n## Code Examples\n\n#### Backtesting Signal Accuracy\nDuring the testing period, the model signals to buy or sell based on its prediction for price\nmovement the following day. By putting your trading algorithm aside and testing for signal accuracy\nalone, you can rapidly build and test more reliable models.\n\n```python\nfrom clairvoyant import Backtest\nfrom pandas import read_csv\n\n# Testing performance on a single stock\n\nvariables  = [\"SSO\", \"SSC\"]     # Financial indicators of choice\ntrainStart = '2013-03-01'       # Start of training period\ntrainEnd   = '2015-07-15'       # End of training period\ntestStart  = '2015-07-16'       # Start of testing period\ntestEnd    = '2016-07-16'       # End of training period\nbuyThreshold  = 0.65            # Confidence threshold for predicting buy (default = 0.65) \nsellThreshold = 0.65            # Confidence threshold for predicting sell (default = 0.65)\nC = 1                           # Penalty parameter (default = 1)\ngamma = 10                      # Kernel coefficient (default = 10)\ncontinuedTraining = False       # Continue training during testing period? (default = false)\n\nbacktest = Backtest(variables, trainStart, trainEnd, testStart, testEnd)\n\ndata = read_csv(\"Stocks/SBUX.csv\")      # Read in data\ndata = data.round(3)                    # Round all values                  \nbacktest.stocks.append(\"SBUX\")          # Inform the model which stock is being tested\nfor i in range(0,10):                   # Run the model 10-15 times  \n    backtest.runModel(data)\n\n# Testing performance across multiple stocks\n\nstocks = [\"AAPL\", \"ADBE\", \"AMGN\", \"AMZN\",\n          \"BIIB\", \"EBAY\", \"GILD\", \"GRPN\", \n          \"INTC\", \"JBLU\", \"MSFT\", \"NFLX\", \n          \"SBUX\", \"TSLA\", \"VRTX\", \"YHOO\"]\n\nfor stock in stocks:\n    data = read_csv('Stocks/%s.csv' % stock)\n    data = data.round(3)\n    backtest.stocks.append(stock)\n    for i in range(0,10):\n        backtest.runModel(data)\n\nbacktest.displayConditions()\nbacktest.displayStats()        \n```\n\n#### View Results\n<pre>\n<b>Conditions</b>\nX1: SSO\nX2: SSC\nBuy Threshold: 65.0%\nSell Threshold: 65.0%\nC: 1\ngamma: 10\nContinued Training: False\n<br>\n<b>Stats</b>\nStock(s):\nAAPL | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nADBE | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nAMGN | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nAMZN | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nBIIB | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nEBAY | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nGILD | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nGRPN | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nINTC | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nJBLU | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nMSFT | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nNFLX | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nSBUX | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nTSLA | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nVRTX | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\nYHOO | Training: 03/01/2013-07/15/2015 Testing: 07/16/2015-07/15/2016\n<br>\nTotal Buys: 39\nBuy Accuracy: <strong style=\"color: green;\">62.86%</strong>\nTotal Sells: 20\nSell Accuracy: <strong style=\"color: green;\">70.41%</strong>\n</pre>\n\n#### Portfolio Simulation\nOnce you've established your model can accurately predict price movement a day in advance, \nsimulate a portfolio and test your performance with a particular stock. User definited trading logic\nlets you control the flow of your capital based on the model's confidence in its prediction\nand the following next day outcome.\n\n```python\nfrom clairvoyant import Portfolio\nfrom pandas import read_csv\n\nvariables  = [\"SSO\", \"SSC\", \"SSL\"]   # Financial indicators of choice\ntrainStart = '2013-03-01'            # Start of training period\ntrainEnd   = '2015-07-15'            # End of training period\ntestStart  = '2015-07-16'            # Start of testing period\ntestEnd    = '2016-07-16'            # End of training period\nbuyThreshold  = 0.65                 # Confidence threshold for predicting buy (default = 0.65) \nsellThreshold = 0.65                 # Confidence threshold for predicting sell (default = 0.65)\nC = 1                                # Penalty parameter (default = 1)\ngamma = 10                           # Kernel coefficient (default = 10)\ncontinuedTraining = False            # Continue training during testing period? (default = false)\nstartingBalance = 1000000            # Starting balance of portfolio\n\n# User defined trading logic (see below)\ndef buyLogic(self, confidence, data, testDay)\ndef sellLogic(self, confidence, data, testDay)\ndef nextDayLogic(self, prediction, nextDayPerformance, data, testDay)\n\nportfolio = Portfolio(variables, trainStart, trainEnd, testStart, testEnd)\n\ndata = read_csv(\"Stocks/YHOO.csv\")\ndata = data.round(3)\nfor i in range(0,5):\n    portfolio.runModel(data, startingBalance, buyLogic, sellLogic, nextDayLogic)\n    portfolio.displayLastRun()\n\nportfolio.displayAllRuns()\n```\n\n#### View Results\n<pre>\n<b>Run #1</b>\nBuying Power: $664488.82\nShares: 10682\nTotal Value: $<strong style=\"color: green;\">1130971.76</strong>\n<b>Run #2</b>\nBuying Power: $588062.6\nShares: 10654\nTotal Value: $<strong style=\"color: green;\">1053322.78</strong>\n<b>Run #3</b>\nBuying Power: $787542.42\nShares: 7735\nTotal Value: $<strong style=\"color: green;\">1125329.87</strong>\n<b>Run #4</b>\nBuying Power: $783145.32\nShares: 7692\nTotal Value: $<strong style=\"color: green;\">1119054.96</strong>\n<b>Run #5</b>\nBuying Power: $648025.83\nShares: 10418\nTotal Value: $<strong style=\"color: green;\">1102979.9</strong>\n<br>\n<b>Performance across all runs</b>\nRuns: 5\nAverage Performance: <strong style=\"color: green;\">10.63%</strong>\n</pre>\n\n<br>\n\n## Examples continued...\n\n#### Visualize Model\nThis feature will give you an immediate sense of how predictable your data is.\n```python\nbacktest.visualizeModel()\n```\n<img src=\"https://github.com/anfederico/Clairvoyant/blob/master/media/SBUX.png\" width=50%>\n\n#### User Defined Trading Logic\nThese functions will tell your portfolio simulation how to trade. We tried to balance simplicity and\nfunctionality to allow for intricate trading strategies.\n```python\ndef buyLogic(self, confidence, data, testDay): \n    quote = data[\"Close\"][testDay]                           # Leave as is\n    \n    if confidence >= 0.75:                                   # If model signals buy\n        shareOrder = int((self.buyingPower*0.3)/quote)       # and is 75-100% confident\n        self.buyShares(shareOrder, quote)                    # invest 30% of buying power    \n        \n    elif confidence >= 0.70:                                 # If model is 70-75% confident\n        shareOrder = int((self.buyingPower*0.2)/quote)       # invest 20% of buying power\n        self.buyShares(shareOrder, quote)\n\n    elif confidence >= 0.65:                                 # If model is 65-70% confident\n        shareOrder = int((self.buyingPower*0.1)/quote)       # invest 10% of buying power\n        self.buyShares(shareOrder, quote)\n\n                                                        \ndef sellLogic(self, confidence, data, testDay):\n    quote = data[\"Close\"][testDay]                       \n    \n    if confidence >= 0.65:                                   # If model signals sell\n        self.sellShares(self.shares, quote)                  # and is 65-100% confident\n                                                             # sell all shares    \n\ndef nextDayLogic(self, prediction, nextDayPerformance, data, testDay):\n    quote = data[\"Close\"][testDay]                        \n                                                          \n    # Case 1: Prediction is buy, price increases\n    if prediction == 1 and nextDayPerformance > 0:\n        \n        if nextDayPerformance >= 0.025:                      # If I bought shares\n            self.sellShares(self.shares, quote)              # and price increases >= 2.5%\n                                                             # sell all shares\n                            \n    # Case 2: Prediction is buy, price decreases\n    elif prediction == 1 and nextDayPerformance <= 0: pass \n\n                                                             # If I bought shares\n                                                             # and price decreases\n                                                             # hold position\n    \n    # Case 3: Prediction is sell, price decreases\n    elif prediction == -1 and nextDayPerformance <= 0:\n        \n        if nextDayPerformance <= -0.025:                     # If I sold shares\n            shareOrder = int((self.buyingPower*0.2)/quote)   # and price decreases >= 2.5%\n            self.buyShares(shareOrder, quote)                # reinvest 20% of buying power\n    \n    # Case 4: Prediction is sell, price increases\n    elif prediction == -1 and nextDayPerformance > 0: pass\n            \n                                                             # If I sold shares\n                                                             # and price increases\n                                                             # hold position\n    # Case 5: No confident prediction was made\n```\n\n#### Multivariate Functionality\nRemember, more is not always better!\n```python\nvariables = [\"SSO\"]                            # 1 feature\nvariables = [\"SSO\", \"SSC\"]                     # 2 features\nvariables = [\"SSO\", \"SSC\", \"RSI\"]              # 3 features\nvariables = [\"SSO\", \"SSC\", \"RSI\", ... , Xn]    # n features\n```\n\n#### Flexible Data Handling\nDownload historical data directly from popular distrubution sources. Clairvoyant is \nflexible with most date formats and will ignore unused columns in the dataset. If it\ncan't find the date specified, it will choose a suitable alternative.\n```text\nDate,Open,High,Low,Close,Volume,SSO,SCC\n03/01/2013,27.72,27.98,27.52,27.95,34851872,65.7894736842,-0.121\n03/04/2013,27.85,28.15,27.7,28.15,38167504,75.9450171821,0.832\n03/05/2013,28.29,28.54,28.16,28.35,41437136,84.9230769231,0.151\n03/06/2013,28.21,28.23,27.78,28.09,51448912,80.7799442897,-0.689\n03/07/2013,28.11,28.28,28.005,28.14,29197632,73.5368956743,-0.821\n```\n#### Social Sentiment Scores\nThe examples shown use data derived from a project where we are data mining \nsocial media and performing stock sentiment analysis. \n```\nhttps://github.com/anfederico/Stocktalk\n```\n",
    "docs_url": null,
    "download_url": null,
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/anfederico/Clairvoyant",
    "keywords": null,
    "license": "UNKNOWN",
    "maintainer": null,
    "maintainer_email": null,
    "name": "clairvoyant",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/clairvoyant/",
    "release_url": "https://pypi.org/project/clairvoyant/v0.7/",
    "requires_python": null,
    "summary": "Software designed to identify and monitor social/historical cues for short term stock movement",
    "version": "v0.7"
  },
  "releases": {
    "v0.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "89c477d97c5da801ad7281e9c596ce4b",
          "sha256": "322505565fe24c9447b412e97a3b33528d0a3a2f31784cee8e8c44cd42d0b29c"
        },
        "downloads": 418,
        "filename": "Clairvoyant-0.7.tar.gz",
        "has_sig": false,
        "md5_digest": "89c477d97c5da801ad7281e9c596ce4b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 3723595,
        "upload_time": "2016-10-29T02:32:11",
        "url": "https://files.pythonhosted.org/packages/51/bb/82af3de4fd8cd0ff2af0a8842ebbf8ab8c37859c1d02702d7db979d3c00f/Clairvoyant-0.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "89c477d97c5da801ad7281e9c596ce4b",
        "sha256": "322505565fe24c9447b412e97a3b33528d0a3a2f31784cee8e8c44cd42d0b29c"
      },
      "downloads": 418,
      "filename": "Clairvoyant-0.7.tar.gz",
      "has_sig": false,
      "md5_digest": "89c477d97c5da801ad7281e9c596ce4b",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 3723595,
      "upload_time": "2016-10-29T02:32:11",
      "url": "https://files.pythonhosted.org/packages/51/bb/82af3de4fd8cd0ff2af0a8842ebbf8ab8c37859c1d02702d7db979d3c00f/Clairvoyant-0.7.tar.gz"
    }
  ]
}