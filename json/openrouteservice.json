{
  "info": {
    "author": "Nils Nolde",
    "author_email": "nils.nolde@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "License :: OSI Approved :: Apache Software License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": ".. image:: https://readthedocs.org/projects/openrouteservice-py/badge/?version=latest\n   :target: http://openrouteservice-py.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\nQuickstart\n==================================================\n\nDescription\n--------------------------------------------------\nThe openrouteservice library gives you painless access to the openrouteservice_ (ORS) routing API's.\nIt performs requests against our API's for \n\n- directions_\n- `reverse geocoding`_\n- isochrones_\n- `matrix routing calculations`_\n\nFor further details, please visit:\n\n- homepage_\n- `ORS API documentation`_\n- `openrouteservice-py documentation`_\n\nBy using this library, you agree to the ORS `terms and conditions`_.\n\n.. _openrouteservice: https://go.openrouteservice.org\n.. _homepage: https://go.openrouteservice.org\n.. _`ORS API documentation`: https://go.openrouteservice.org/documentation/\n.. _`openrouteservice-py documentation`: http://openrouteservice-py.readthedocs.io/en/latest/\n.. _directions: https://go.openrouteservice.org/documentation/#/reference/directions/directions/directions-service\n.. _isochrones: https://go.openrouteservice.org/documentation/#/reference/isochrones/isochrones/isochrones-service\n.. _`reverse geocoding`: https://go.openrouteservice.org/documentation/#/reference/geocoding/geocoding/geocoding-service\n.. _`matrix routing calculations`: https://go.openrouteservice.org/documentation/#/reference/matrix/matrix/matrix-service-(post)\n.. _`terms and conditions`: https://go.openrouteservice.org/terms-of-service/\n\nRequirements\n-----------------------------\nopenrouteservice requires:\n\n- Python >= 2.7, 3.4, 3.5, 3.6\n- ``requests`` library\n\nunit testing requires additionally the following Python libraries:\n\n- ``nose``\n- ``responses``\n- ``mock``\n\nInstallation\n------------------------------\nTo install from PyPI, simply use pip::\n\t\n\tpip install openrouteservice\n\nTo install the latest and greatest from source::\n\n   \tpip install git+git://github.com/GIScience/openrouteservice-py\n\nFor ``conda`` users, you can install using ``setuptools`` (required Python package)::\n\n\tgit clone https://github.com/GIScience/openrouteservice-py\n\tpython setup.py install\n\nThis command will install the library to your PYTHONPATH. Also works in virtual environments.\n\n\nTesting\n---------------------------------\nIf you want to run the unit tests, see Requirements_. ``cd`` to the library directory and run::\n\n\tnosetests -v\n\n``-v`` flag for verbose output (recommended).\n\n\nUsage\n---------------------------------\nBasic example\n^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n\timport openrouteservice\n\n\tcoords = ((8.34234,48.23424),(8.34423,48.26424))\n\n\tclient = openrouteservice.Client(key='') # Specify your personal API key\n\troutes = client.directions(coords) \n\n\tprint routes\n\nFor convenience, all request performing module methods are wrapped inside the ``client`` class. This has the\ndisadvantage, that your IDE can't auto-show all positional and optional arguments for the \ndifferent methods. And there are a lot!\n\nThe slightly more verbose alternative, preserving your IDE's smart functions, is\n\n.. code:: python\n\n\timport openrouteservice\n\tfrom openrouteservice.directions import directions\n\n\tcoords = ((8.34234,48.23424),(8.34423,48.26424))\n\n\tclient = openrouteservice.Client(key='') # Specify your personal API key\n\troutes = directions(client, coords) # Now it shows you all arguments for .directions\n\n\nDecode Polyline\n^^^^^^^^^^^^^^^^^^^^^^^^^^\nBy default, the directions API returns `encoded polylines <https://developers.google.com/maps/documentation/utilities/polylinealgorithm>`_.\nTo decode to a ``dict``, which is GeoJSON-ready, simply do\n\n.. code:: python\n\n\timport openrouteservice\n\tfrom openrouteservice import convert\n\n\tcoords = ((8.34234,48.23424),(8.34423,48.26424))\n\n\tclient = openrouteservice.Client(key='') # Specify your personal API key\n\n\t# decode_polyline needs the geometry only\n\tgeometry = client.directions(coords)['routes'][0]['geometry']\n\n\tdecoded = convert.decode_polyline(geometry)\n\n\tprint decoded\n\n\nLocal ORS instance\n^^^^^^^^^^^^^^^^^^^^\nIf you're hosting your own ORS instance, you can alter the ``base_url`` parameter to fit your own:\n\t\n.. code:: python\n\n\timport openrouteservice\n\n\tcoords = ((8.34234,48.23424),(8.34423,48.26424))\n\n\t# key can be omitted for local host\n\tclient = openrouteservice.Client(key='',\n\t                                 base_url='https://foo/bar') \n\n\t# url is the extension for your endpoint, no trailing slashes!\n\t# params has to be passed explicitly, refer to API reference for details\n\troutes = client.request(url='/directions',\n\t                        params={'coordinates': coords,\n\t                                'profile': 'driving-hgv'\n\t                               }\n\t                        )\n\n\nSupport\n--------\n\nFor general support, contact our `Google Group`_.\n\nFor issues/bugs/enhancement suggestions, please use https://github.com/GIScience/openrouteservice-py/issues.\n\n\n.. _`Google Group`: https://groups.google.com/forum/?utm_source=digest&utm_medium=email#!forum/openrouteservice\n\n\nAcknowledgements\n-----------------\n\nThis library is based on the very elegant codebase from googlemaps_.\n\n\n.. _googlemaps: https://github.com/googlemaps/google-maps-services-python",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/GIScience/openrouteservice-py",
    "keywords": "routing accessibility router OSM ORS openrouteservice openstreetmap isochrone",
    "license": "Apache-2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "openrouteservice",
    "platform": "",
    "project_url": "https://pypi.org/project/openrouteservice/",
    "release_url": "https://pypi.org/project/openrouteservice/0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python client for requests to openrouteservice API services",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b4a27a40bf23e079c71fc080cb0e31de",
          "sha256": "80e301b90c7f0ff8d030d2a34c3fcbda081b71a1c2e3f42c6c6f66b7469da7ca"
        },
        "downloads": -1,
        "filename": "openrouteservice-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b4a27a40bf23e079c71fc080cb0e31de",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18761,
        "upload_time": "2018-02-02T14:49:18",
        "url": "https://files.pythonhosted.org/packages/03/0e/3b41bde175c6a146a9851e3ae4751f1da1372ca0ae64a3288ae99a58fd58/openrouteservice-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b4a27a40bf23e079c71fc080cb0e31de",
        "sha256": "80e301b90c7f0ff8d030d2a34c3fcbda081b71a1c2e3f42c6c6f66b7469da7ca"
      },
      "downloads": -1,
      "filename": "openrouteservice-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b4a27a40bf23e079c71fc080cb0e31de",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 18761,
      "upload_time": "2018-02-02T14:49:18",
      "url": "https://files.pythonhosted.org/packages/03/0e/3b41bde175c6a146a9851e3ae4751f1da1372ca0ae64a3288ae99a58fd58/openrouteservice-0.1.tar.gz"
    }
  ]
}