{
  "info": {
    "author": "Lovely Systems",
    "author_email": "office@lovelysystems.com",
    "bugtrack_url": null,
    "classifiers": [
      "Framework :: Pyramid",
      "Programming Language :: Python :: 3"
    ],
    "description": "====================\nLovely Pytest Docker\n====================\n\nCreate simple Pytest_ fixtures for writing integration tests based on Docker\ncontainers. The framework provides a service class to start and stop containers\nbased Docker Compose. Each single container can be started individually.\n\nSome parts of this package are taken from\nhttps://github.com/AndreLouisCaron/pytest-docker\n\n\nUsage with Pytest\n=================\n\nThe docker compose file should contain all desired containers and the ports\nshould be exposed. In the following example we want to start the app to test\nand a SQL database (Crate). Let's assume there is a ``Dockerfile`` for the app\nin the same folder as the docker compose file::\n\n    version: \"3\"\n    services:\n      app:\n        build: .\n        ports:\n          - \"8080\"\n        depends_on:\n          - \"crate\"\n\n      crate:\n        image: crate:latest\n        ports:\n          - \"4200\"\n\nIn the ``conftest.py`` file we can declare the docker fixtures for each service\nwe want to be able to start in the tests::\n\n    import pytest\n\n    @pytest.fixture(scope='session')\n    def docker_app(docker_services):\n        docker_services.start('app')\n        public_port = docker_services.wait_for_service(\"app\", 8080)\n        url = \"http://{docker_services.docker_ip}:{public_port}\".format(**locals())\n        return url\n\n    @pytest.fixture(scope='session')\n    def docker_crate(docker_services):\n        docker_services.start('crate')\n        public_port = docker_services.wait_for_service(\"crate\", 4200)\n        dsn = \"{docker_services.docker_ip}:{public_port}\".format(**locals())\n        return dsn\n\nBy default the fixture will look for the ``docker-compose.yml`` file in the\n``tests`` subfolder of the path where ``pytest.ini`` resides (or the project's\nroot directory if no ini file is given - as in the tests example). In many\ncases you will want to override the location for the docker compose files. Just\noverwrite the ``docker_compose_files`` fixture in your ``conftest.py`` file::\n\n    @pytest.fixture(scope='session')\n    def docker_compose_files(pytestconfig):\n        \"\"\"Get the docker-compose.yml absolute path.\n        Override this fixture in your tests if you need a custom location.\n        \"\"\"\n        return [\n            project_path('docker', 'docker-compose.yml'),\n        ]\n\nIn your test file declare the fixtures you want to use::\n\n    def test_something(docker_app, docker_crate):\n        # e.g. initialize database\n        ...\n        # test something (e.g. request to docker_app)\n        ...\n\nA working configuration and test example can be found in the ``tests`` folder\nof this package.\n\n\nExecution in Docker Container\n=============================\n\nIt's possible to execute a command inside one of the Docker containers. Use\nthe ``exec`` method of the ``docker_services`` fixture::\n\n    def test_exec(docker_services):\n        # the first argument is the service name of the compose file,\n        # the following arguments build the command to run\n        res = docker_services.exec('crate', 'ls', '-a')\n\n\nWait for Service\n================\n\nThe ``wait_for_service`` method of the service module checks whether the\ndocker service is really started. By default it makes a HTTP GET request to the\nserver's ``/`` endpoint. The service will retry to check until a timeout of\n30 seconds has passed.\n\nCustom Service Checker\n----------------------\n\nSome services may work differently and require a custom checker.\n\nCreate a custom service checker function which receives the IP address and the\nport as parameters::\n\n    def custom_service_checker(ip_address, port):\n        # if service is ready\n        return True\n        # otherwise return False\n\nIn the fixture provide the custom service checker function as ``check_service``\nparameter to the ``wait_for_service`` method::\n\n    @pytest.fixture(scope='session')\n    def docker_custom_service(docker_services):\n        docker_services.start('custom_service')\n        public_port = docker_services.wait_for_service(\n            \"app\",\n            8080,\n            check_service=custom_service_checker\n        )\n        url = \"http://{docker_services.docker_ip}:{public_port}\".format(**locals())\n        return url\n\n\nRun Tests\n=========\n\nTests are held in the ``tests`` directory. Running tests is done via the\npytest package with::\n\n    ./gradlew pytest\n\n\n.. _Pytest: http://doc.pytest.org\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/lovelysystems/lovely-pytest-docker",
    "keywords": "pytest testing docker compose",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "lovely-pytest-docker",
    "platform": "",
    "project_url": "https://pypi.org/project/lovely-pytest-docker/",
    "release_url": "https://pypi.org/project/lovely-pytest-docker/0.0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Pytest testing utilities with docker containers.",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7842ed71215d20c20c2b3c1d4d1c478e",
          "sha256": "0bce37360c67d8c2438ca1a9490368d4bc594e44d75de45676101c459927d9a3"
        },
        "downloads": -1,
        "filename": "lovely-pytest-docker-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7842ed71215d20c20c2b3c1d4d1c478e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5598,
        "upload_time": "2018-01-10T14:45:16",
        "url": "https://files.pythonhosted.org/packages/88/3d/d3f3fb225c91bec2a1be88902b6ad6dfc1e239ad62f56b028b8c9122fc45/lovely-pytest-docker-0.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7842ed71215d20c20c2b3c1d4d1c478e",
        "sha256": "0bce37360c67d8c2438ca1a9490368d4bc594e44d75de45676101c459927d9a3"
      },
      "downloads": -1,
      "filename": "lovely-pytest-docker-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "7842ed71215d20c20c2b3c1d4d1c478e",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5598,
      "upload_time": "2018-01-10T14:45:16",
      "url": "https://files.pythonhosted.org/packages/88/3d/d3f3fb225c91bec2a1be88902b6ad6dfc1e239ad62f56b028b8c9122fc45/lovely-pytest-docker-0.0.2.tar.gz"
    }
  ]
}