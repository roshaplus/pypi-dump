{
  "info": {
    "author": "Oliver Bristow",
    "author_email": "github+pypi@oliverbristow.co.uk",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation :: CPython",
      "Programming Language :: Python :: Implementation :: PyPy",
      "Topic :: Database",
      "Topic :: Software Development"
    ],
    "description": "|Build Status|\n\njsonstore\n=========\n\nThis module provides a class that maps keys and values from a JSON file\nonto its attributes.\n\nThe goal was to provide a convenient way of loading and saving\nconfiguration in a familiar human readable format. This is a bit more\nflexible than the\n`configparser <https://docs.python.org/3/library/configparser.html>`__\nmodule which is included with Python.\n\nThis works is tested and working on Python 2.7+ and Python 3.3+. It will\nnot work on 2.6 or lower, but is expected to work on 3.0-3.2. The tests\ndo not work in 3.2.6 due to\n`mistreating <https://travis-ci.org/Code0x58/python-jsonstore/jobs/198150401>`__\nthe \ud83d\udca9 when parsing the test code. This is also tested on pypy and pypy3.\n\nExamples\n--------\n\nBasics\n~~~~~~\n\n.. code:: python\n\n    # by default JsonStore commits on every change unless in a transaction\n    store = JsonStore('config.json')\n    store.a_string = \"something\"\n    store.a_list = [1, 2, 3]\n    store.a_dictionary = {\n      'dict-list': [{}],\n      'ln(2)': 0.69314718056,\n      'for-you': u\"\ud83d\udc90\",\n    }\n\n    # you can use [\u2026] to set/get/delete string keys\n    store['some_key'] = \"a value\"\n    # the key is split on '.'s and works on dictionaries\n    del store['a_dictionary.dict-list']\n    store['a_dictionary.new_value'] = \"old value\"\n\n    # deep copies are made when assigning values\n    my_list = ['fun']\n    store.a_list = my_list\n    assert store.a_list is not my_list\n\n    # deep copies are also returned to avoid unsanitary changes being made\n    store.a_dictionary['new_value'] = \"new value\"  # won't update the store!\n    assert store.a_dictionary['new_value'] == \"old value\"\n    assert store.a_dictionary is not store.a_dictionary\n\nTransactions\n~~~~~~~~~~~~\n\n``JsonStore`` objects can be used as `context\nmanagers <https://www.python.org/dev/peps/pep-0343/>`__ to provide\ntransactions which are rolled back in the event of an exception. The\ntransaction model is primitive; you can only nest transactions.\n\nWhile a store is put into a transaction, it will not save changes to\nfile until all of the transactions have been closed.\n\n.. code:: python\n\n    from jsonstore import JsonStore\n\n    # even with auto_commit=True, the file won't be saved until the last contexts has been closed\n    with JsonStore('config.json', indent=None, auto_commit=False) as store:\n      self.value = 1\n\n    # the context manager will roll back changes made if an exception is raised\n    store = JsonStore('config.json', indent=None)\n    try:\n      with store:\n        store.value = \"new\"\n        raise Exception\n    except Exception:\n      pass\n    # here we see the value that was saved previously\n    assert store.value == 1\n\n.. |Build Status| image:: https://travis-ci.org/Code0x58/python-jsonstore.svg?branch=master\n   :target: https://travis-ci.org/Code0x58/python-jsonstore",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/Code0x58/python-jsonstore/",
    "keywords": "json key value store",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "python-jsonstore",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/python-jsonstore/",
    "release_url": "https://pypi.org/project/python-jsonstore/1.0.0/",
    "requires_python": null,
    "summary": "File based JSON key-value store with basic transactions",
    "version": "1.0.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b0e12612cabdd03b59ed8a82ab09e4c3",
          "sha256": "e387c56edb5273708ea5b6831bf91db014b67b154592f82dc9a3a7b4275df38a"
        },
        "downloads": 0,
        "filename": "python_jsonstore-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "b0e12612cabdd03b59ed8a82ab09e4c3",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 8188,
        "upload_time": "2017-04-12T19:03:50",
        "url": "https://files.pythonhosted.org/packages/3b/9d/1753acc65d091c9459915b7490b7b81399f97de833ab73b4e6f753d58bf2/python_jsonstore-1.0.0-py2.py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "b0e12612cabdd03b59ed8a82ab09e4c3",
        "sha256": "e387c56edb5273708ea5b6831bf91db014b67b154592f82dc9a3a7b4275df38a"
      },
      "downloads": 0,
      "filename": "python_jsonstore-1.0.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "b0e12612cabdd03b59ed8a82ab09e4c3",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 8188,
      "upload_time": "2017-04-12T19:03:50",
      "url": "https://files.pythonhosted.org/packages/3b/9d/1753acc65d091c9459915b7490b7b81399f97de833ab73b4e6f753d58bf2/python_jsonstore-1.0.0-py2.py3-none-any.whl"
    }
  ]
}