{
  "info": {
    "author": "Disruptive Labs",
    "author_email": "pypi@comanage.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3"
    ],
    "description": "statu - a python state machine\n==============================\n\nstate machine for humans\n\n|Build Status|\n\nThere are two types of developers in this world: those who love state\nmachines and those who *will* eventually.\n\nWe fall in the first camp. We think it is really important to have a\ndeclarative way to define the states of an object. That\u2019s why we are\ncontinuing development of ``statu``.\n\nInstall\n-------\n\n.. code:: bash\n\n    pip install state_machine\n\n.. |Build Status| image:: https://travis-ci.org/DisruptiveLabs/statu.svg?branch=master\n   :target: https://travis-ci.org/DisruptiveLabs/statu\n\nBasic Usage\n-----------\n\n.. code:: python\n\n\n    @acts_as_state_machine\n    class Person():\n        name = 'Billy'\n\n        sleeping = State(initial=True)\n        running = State()\n        cleaning = State()\n\n        run = Event(from_states=sleeping, to_state=running)\n        cleanup = Event(from_states=running, to_state=cleaning)\n        sleep = Event(from_states=(running, cleaning), to_state=sleeping)\n\n        @before('sleep')\n        def do_one_thing(self):\n            print \"{} is sleepy\".format(self.name)\n\n        @before('sleep')\n        def do_another_thing(self):\n            print \"{} is REALLY sleepy\".format(self.name)\n\n        @after('sleep')\n        def snore(self):\n            print \"Zzzzzzzzzzzz\"\n\n        @after('sleep')\n        def big_snore(self):\n            print \"Zzzzzzzzzzzzzzzzzzzzzz\"\n\n    person = Person()\n    print person.current_state == Person.sleeping       # True\n    print person.is_sleeping                            # True\n    print person.is_running                             # False\n    person.run()\n    print person.is_running                             # True\n    person.sleep()\n\n    # Billy is sleepy\n    # Billy is REALLY sleepy\n    # Zzzzzzzzzzzz\n    # Zzzzzzzzzzzzzzzzzzzzzz\n\n    print person.is_sleeping                            # True\n\nFeatures\n--------\n\nBefore / After Callback Decorators\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can add callback hooks that get executed before or after an event\n(see example above).\n\n*Important:* if the *before* event causes an exception or returns\n``False``, the state will not change (transition is blocked) and the\n*after* event will not be executed.\n\nBlocks invalid state transitions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAn *InvalidStateTransition Exception* will be thrown if you try to move\ninto an invalid state.\n\nORM support\n-----------\n\nWe have basic support for `mongoengine`_, and `sqlalchemy`_.\n\nMongoengine\n~~~~~~~~~~~\n\nJust have your object inherit from ``mongoengine.Document`` and\nstate\\_machine will add a StringField for state.\n\n*Note:* You must explicitly call #save to persist the document to the\ndatastore.\n\n.. code:: python\n\n        @acts_as_state_machine\n        class Person(mongoengine.Document):\n            name = mongoengine.StringField(default='Billy')\n\n            sleeping = State(initial=True)\n            running = State()\n            cleaning = State()\n\n            run = Event(from_states=sleeping, to_state=running)\n            cleanup = Event(from_states=running, to_state=cleaning)\n            sleep = Event(from_states=(running, cleaning), to_state=sleeping)\n\n            @before('sleep')\n            def do_one_thing(self):\n                print \"{} is sleepy\".format(self.name)\n\n            @before('sleep')\n            def do_another_thing(self):\n                print \"{} is REALLY sleepy\".format(self.name)\n\n            @after('sleep')\n            def snore(self):\n                print \"Zzzzzzzzzzzz\"\n\n            @after('sleep')\n            def snore(self):\n                print \"Zzzzzzzzzzzzzzzzzzzzzz\"\n\n\n        person = Person()\n        person.save()\n        eq_(person.current_state, Person.sleeping)\n        assert person.is_sleeping\n        assert not person.is_running\n        person.run()\n        assert person.is_running\n        person.sleep()\n        assert person.is_sleeping\n        person.run()\n        person.save()\n\n        person2 = Person.objects(id=person.id).first()\n        assert person2.is_running\n\n.. _mongoengine: http://mongoengine.org/\n.. _sqlalchemy: http://www.sqlalchemy.org/\n\nSqlalchemy\n~~~~~~~~~~\n\nAll you need to do is have sqlalchemy manage your object. For example:\n\n.. code:: python\n\n        from sqlalchemy.ext.declarative import declarative_base\n        Base = declarative_base()\n        @acts_as_state_machine\n        class Puppy(Base):\n           ...\n\nIssues / Roadmap:\n-----------------\n\n-  Allow multiple state\\_machines per object\n-  Be able to configure the state field\n\nQuestions / Issues\n------------------\n\nFeel free to open an issue, PR, or shoot us an email at `pypi@comanage.com`\n\nThank you\n---------\n\nto `jtushman` for getting this library off the ground, and letting us fork\nand continue the development here\n\n.. _@tushman: http://twitter.com/tushman\n\nand to `aasm`_ and ruby\u2019s `state\\_machine`_ and all other state machines\nthat I loved before\n\n.. _aasm: https://github.com/aasm/aasm\n.. _state\\_machine: https://github.com/pluginaweek/state_machine\n\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/DisruptiveLabs/statu",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "statu",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/statu/",
    "release_url": "https://pypi.org/project/statu/0.3.1/",
    "requires_python": null,
    "summary": "Python State Machines for Humans",
    "version": "0.3.1"
  },
  "releases": {
    "0.3.0": [],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1628068da8abfface3d75f88f1262056",
          "sha256": "99239d9411573baef833a2d8e9c8d6ff92739b16e3103621aac6a0f30237ffb7"
        },
        "downloads": 1328,
        "filename": "statu-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1628068da8abfface3d75f88f1262056",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5078,
        "upload_time": "2015-08-21T17:14:54",
        "url": "https://files.pythonhosted.org/packages/0b/6c/a59ca862493c4a29eb9039afe5d533da8a29f0b03bde825192eecd6d8bf8/statu-0.3.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1628068da8abfface3d75f88f1262056",
        "sha256": "99239d9411573baef833a2d8e9c8d6ff92739b16e3103621aac6a0f30237ffb7"
      },
      "downloads": 1328,
      "filename": "statu-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "1628068da8abfface3d75f88f1262056",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5078,
      "upload_time": "2015-08-21T17:14:54",
      "url": "https://files.pythonhosted.org/packages/0b/6c/a59ca862493c4a29eb9039afe5d533da8a29f0b03bde825192eecd6d8bf8/statu-0.3.1.tar.gz"
    }
  ]
}