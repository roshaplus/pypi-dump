{
  "info": {
    "author": "rezemika",
    "author_email": "reze.mika@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Natural Language :: French",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Other/Nonlisted Topic"
    ],
    "description": "Humanized Opening Hours - A parser for the opening_hours fields from OSM\n========================================================================\n\n**Humanized Opening Hours** is a Python 3 module allowing a simple usage of the opening_hours fields used in OpenStreetMap. It provides especially a function to get a good-looking opening hours description from a field.\n\nAny pull request (following PEP-8) is more than welcome!\n\n```python\n>>> import humanized_opening_hours\n>>> field = \"Mo-Fr 06:00-21:00; Sa,Su 07:00-21:00\"\n>>> hoh = HumanizedOpeningHours(field)\n>>> hoh.is_open()\nTrue\n>>> hoh.next_change()\ndatetime.datetime(2017, 12, 24, 21, 0)\n>>> hohr = humanized_opening_hours.HOHRenderer(hoh)\n>>> print(hohr.description())\n'''\nMonday: 06:00 - 21:00\nTuesday: 06:00 - 21:00\nWednesday: 06:00 - 21:00\nThursday: 06:00 - 21:00\nFriday: 06:00 - 21:00\nSaturday: 07:00 - 21:00\nSunday: 07:00 - 21:00\n'''\n```\n\n**This module is still in development and bugs may occur. If you discover one, please create an issue.**\n\n# Installation\n\nThis library is so small, you can include it directly into your project.\nAlso, it is available on PyPi.\n\n    $ pip3 install osm-humanized-opening-hours\n\n# How to use it\n\nThe only mandatory argument to give to the constructor is the field, which must be a string.\nYou can also specify:\n\n- `tz` (pytz.timezone) : the timezone to use, UTC default.\n- `sanitize_only` (bool) : set it to True to not parse the field (usefull when you want only get its sanitized version).\n\n```python\nimport humanized_opening_hours, pytz\n\nfield = \"Mo-Fr 06:00-21:00; Sa,Su 07:00-21:00\"\n\nhoh = HumanizedOpeningHours(field, tz=pytz.timezone(\"Europe/Paris\"))\n```\n\n## Basic methods\n\n```python\n# To know if the facility is open at the present time. Returns a boolean. Can take a datetime.datetime moment to check for another time.\n>>> hoh.is_open()\nTrue\n\n# To know at which time the facility status (open / closed) will change. Returns a datetime.datetime object. Can take a datetime.datetime moment to check for another time.\n# If we are on December 24 before 21:00 / 09:00PM...\n>>> hoh.next_change()\ndatetime.datetime(2017, 12, 24, 21, 0)\n\n# To know how long the facility status (open / closed) will change. Returns a datetime.timedelta object. Can take a datetime.datetime moment to check for another time.\n# If we are on December 24 at 20:00 / 08:00PM...\n>>> hoh.time_before_next_change()\ndatetime.timedelta(0, 3600)\n```\n\nYou can get a sanitized version of the field given to the constructor with the *sanitize* method or the **field** attribute.\n\n```python\n# Field : \"mo-su 0930-2000\"\n>>> print(hoh.sanitize())\nMo-Su 09:30-20:00\n```\n\n## Solar hours\n\nIf the field contains solar hours (only \"sunrise\" or \"sunset\", the others are not yet supported), here is how to deal with them.\n\nFirst of all, you can easily know if you need to parse them by checking the `hoh.need_solar_hours_parsing` variable. If it is `True`, you need to parse them with a dedicated method which need to know the true solar hours.\n\n**If you try to do something with a field requiring parsing without parse it, you will get a \"NotParsedError\".**\n\nAttention, except if the facility is on the equator, this parsing will be valid only for a short period. It is recommended to rerun this function changing its \"moment\" argument (or its hours).\n\nIf you know that the sun rises at six o'clock and sets at ten o'clock, you can set it like this.\n\n```python\n# Using a tuple of tuples of integers (hour, minutes) for (sunrise, sunset).\n>>> hoh.parse_solar_hours(hours=((6, 0), (10, 0)))\n```\n\nIf you don't know solar hours, you have two methods to set them.\n\n```python\n# Using the GPS coordinates of the facility.\n>>> hoh.parse_solar_hours(coords=(38.506, -28.454))  # Pico island (in the Azores islands).\n\n# Using the astral module. You can pass to the \"moment\" argument a datetime.datetime object if you want to parse the solar hours for another date.\n>>> import astral, pytz\n>>> location = astral.Astral.Location(\"Pico Island\", \"Atlantic Ocean\", (38.506, -28.454), pytz.timezone(\"Atlantic/Azores\"), 100)\n>>> hoh.parse_solar_hours(astral_location=location)\n```\n\n## Have nice schedules\n\nThe `HOHRenderer` class allows you to get various representations of the schedules.\nIts *init* method takes an HOH object in argument, and two optional argument:\n\n- `universal` (bool) : allows to have human-readable descriptions without having to parse the solar hours (True default).\n- `lang` (str) : the language to use **(only \"en\" (default) and \"fr\" are supported for now)**.\n\nIt has several methods to retrieve useful informations.\n\nIf the facility is always open, many of the following methods won't be very usefull.\nIf you want a human-readable description, see the doc of the *description* method or use the *always_open_str* to get a simple string.\n\n### description\n\n```python\n# Field : \"Mo-Fr 06:00-21:00; Sa,Su 07:00-21:00\"\n>>> hohr = humanized_opening_hours.HOHRenderer(hoh)\n>>> print(hohr.description())\n'''\nMonday: 06:00 - 21:00\nTuesday: 06:00 - 21:00\nWednesday: 06:00 - 21:00\nThursday: 06:00 - 21:00\nFriday: 06:00 - 21:00\nSaturday: 07:00 - 21:00\nSunday: 07:00 - 21:00\n'''\n\n# Field : \"Mo-Fr 06:00-sunset; Sa,Su 07:00-21:00\"\n>>> print(hohr.description())\n'''\nMonday: 06:00 - sunset\nTuesday: 06:00 - sunset\nWednesday: 06:00 - sunset\nThursday: 06:00 - sunset\nFriday: 06:00 - sunset\nSaturday: 07:00 - 21:00\nSunday: 07:00 - 21:00\n'''\n\n# Field : \"Mo-Fr 06:00-sunset; Sa,Su 07:00-21:00\"\n# Solar hours parsed. Sunset at 21:04.\n>>> hohr = humanized_opening_hours.HOHRenderer(hoh, universal=False)\n>>> print(hohr.description())\n'''\nMonday: 06:00 - 21:04\nTuesday: 06:00 - 21:04\nWednesday: 06:00 - 21:04\nThursday: 06:00 - 21:04\nFriday: 06:00 - 21:04\nSaturday: 07:00 - 21:00\nSunday: 07:00 - 21:00\n'''\n\n# Field : \"Mo-Fr 06:00-(sunset+02:00); Sa,Su 07:00-21:00\"\n# Solar hours parsed. Sunset at 21:04.\n>>> print(hohr.description())\n'''\nMonday: 06:00 - 02:00 after sunset\nTuesday: 06:00 - 02:00 after sunset\nWednesday: 06:00 - 02:00 after sunset\nThursday: 06:00 - 02:00 after sunset\nFriday: 06:00 - 02:00 after sunset\nSaturday: 07:00 - 21:00\nSunday: 07:00 - 21:00\n'''\n\n# Field : \"Mo-Fr 06:00-(sunset+02:00); Sa,Su 07:00-21:00\"\n# Solar hours parsed. Sunset at 21:04.\n>>> print(hohr.description(universal=False))\n'''\nMonday: 06:00 - 23:04\nTuesday: 06:00 - 23:04\nWednesday: 06:00 - 23:04\nThursday: 06:00 - 23:04\nFriday: 06:00 - 23:04\nSaturday: 07:00 - 21:00\nSunday: 07:00 - 21:00\n'''\n\n# Field : \"24/7\"\n>>> hohr = humanized_opening_hours.HOHRenderer(hoh)\n>>> print(hohr.description())\n'''\nOpen 24 hours a day and 7 days a week.\n'''\n```\n\n### render_moment\n\nTakes a *Moment* (see the *Objects* section) object as argument and returns a human-readable string describing it.\n\n### render_period\n\nSame as *render_moment*, but for a *Period* object.\n\n### periods_per_day\n\nReturns a dict of seven items with tuples containing the translated name of the day and its periods.\n\n```python\n# Field : \"Mo-We 09:00-19:00\"\n>>> hohr.periods_per_day()\n'''\n{\n    0: (\"Monday\", [\"09:00 - 19:00\"]),\n    1: (\"Tuesday\", [\"09:00 - 19:00\"]),\n    2: (\"Wednesday\", [\"09:00 - 19:00\"]),\n    3: ('Thursday', []),\n    4: ('Friday', []),\n    5: ('Saturday', []),\n    6: ('Sunday', []),\n}\n'''\n```\n\n### closed_days\n\nReturns a list of human-readable exceptional closed days.\n\n```python\n# Field : \"Mo-We 09:00-19:00 ; Dec 25 off ; May 1 off\"\n>>> hohr.closed_days()\n[\"25 December\", \"1st May\"]\n```\n\n### holidays\n\nReturns a dict describing the status of the facility during holidays.\n\nHere is the dict shape.\n\n```\n{\n    \"main\": <str>,  # A string indicating whether it's open during holidays.\n    \"PH\": (\n        <bool or None>,  # True : open ; False : closed ; None : unknown.\n        <periods list (str)>  # Periods list, like those of \"periods_per_day()\".\n    ),\n    \"SH\": (\n        <bool or None>,  # True : open ; False : closed ; None : unknown.\n        <periods list (str)>  # Periods list, like those of \"periods_per_day()\".\n    ),\n}\n```\n\nExample :\n\n```python\n# Field : \"Mo-We 09:00-19:00 ; SH off ; PH 09:00-12:00\"\n>>> hohr.holidays()\n{\n    \"main\": \"Open on public holidays. Closed on school holidays.\",\n    \"PH\": (True, [\"09:00 - 12:00\"]),\n    \"SH\": (False, []),\n}\n```\n\n### set_universal\n\nThis method takes a boolean argument and allows you to update the *universal* argument of HOHR. If solar hours have not been parsed, it will raise a \"NotParsedError\". If you're brave enough, you can also update directly the *universal* attribute of HOHR.\n\n## Objetcs\n\nApart the main HumanizedOpeningHours class, HOH provides three other objects:\n- `Day` : a weekday, or public or schoold holidays;\n- `Period` : a period with two `Moment` objects : a beginning and an end;\n- `Moment` : a moment in time, which can be a beginning or an end of a period.\n\n### Day\n\nAttributes:\n- `index` (int or str) : an integer from 0 to 6 (index in a week) or \"PH\" or \"SH\" for public or school holidays;\n- `name` (str) : the OSM-like name of the day (\"Mo\", \"Su\", etc) or \"PH\" or \"SH\".\n- `periods` (list) : a list of `Period` objects included in this day;\n- `closed` (bool) : a boolean which is True if this day is explicitly set closed in the field.\n\n```python\n# Know whether there is / are opening period(s) in this day.\n>>> day.opens_today()\nTrue\n\n# Know if a day has same periods as another (i.e. they are similars).\n>>> day.has_same_periods(<day object>)\nTrue\n\n# Gets a datetime.timedelta indicating the total opening time on this day.\n>>> day.total_duration()\ndatetime.timedelta(0, 21600)\n```\n\nAll the days can be get by getting their index directly from the HOH object, or via the `get_day()` method.\n\n```python\n# To get the first day of the week.\n>>> hoh[0]\n<'Mo' Day object (1 periods)>\n\n# To get all the days of the week.\n>>> hoh[0:7]\n[<'Mo' Day object (1 periods)>, <'Tu' Day object (1 periods)>, <'We' Day object (1 periods)>, <'Th' Day object (1 periods)>, <'Fr' Day object (1 periods)>, <'Sa' Day object (1 periods)>, <'Su' Day object (1 periods)>]\n\n# To get the day representing public holidays.\n>>> hoh[\"PH\"]\n<'PH' Day object (0 periods)>\n\n# Same thing for school holidays.\n>>> hoh[\"SH\"]\n<'SH' Day object (0 periods)>\n\n# With the \"get_day() method.\n>>> hoh.get_day(0)\n<'Mo' Day object (1 periods)>\n```\n\n### Period\n\nAttributes:\n- `m1` (Moment object) : the beginning of the period;\n- `m2` (Moment object) : the end of the period.\n\n```python\n# Gets a datetime.timedelta indicating the total duration of this period.\n>>> period.duration()\ndatetime.timedelta(0, 10800)\n\n# Know if a datetime.time object is between the beginning and the end of this period (i.e. it is open at this time).\n>>> moment = datetime.time(18, 30)\n>>> moment in period\nTrue\n```\n\n### Moment\n\nAttributes:\n- `type` (str) : the type of this moment, which can be \"normal\", \"sunrise\" or \"sunset\";\n- `time_object` (datetime.time object or None) : the moment itself, not None if type is \"normal\", **not intended to be used directly**;\n- `timedelta` (datetime.timedelta object or None) : a time offset, which equals 0 if type is \"normal\" or if the solar hour has no offset.\n\n```python\n# Know if the moment can vary in time (i.e. it is a solar hour).\n>>> moment.is_variable()\nTrue\n\n# Gets a datetime.time object, or None if the moment is variable.\n>>> moment.time()\ndatetime.time(18, 30)\n```\n\n# Dependencies\n\nThis module requires the following modules, which can be installed with `pip3`.\n\n```python\npytz # To handle timezones\nastral # To computer solar hours\n```\n\n# Licence\n\nThis module is published under the AGPLv3 license, the terms of which can be found in the [LICENCE](LICENCE) file.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/rezemika/humanized_opening_hours",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "osm-humanized-opening-hours",
    "platform": "",
    "project_url": "https://pypi.org/project/osm-humanized-opening-hours/",
    "release_url": "https://pypi.org/project/osm-humanized-opening-hours/0.2.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A parser for the opening_hours fields from OpenStreetMap.",
    "version": "0.2.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2835395f0c4de8b20fb0216fd663b35e",
          "sha256": "2469622640a094324b36262e67a958cde782f7ced959edbd166ec2b71ee4875b"
        },
        "downloads": 0,
        "filename": "osm_humanized_opening_hours-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2835395f0c4de8b20fb0216fd663b35e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17030,
        "upload_time": "2017-08-05T13:24:47",
        "url": "https://files.pythonhosted.org/packages/92/e5/43d33773efffebc763bbbf1c7620191cc35e6b0844e0dd08a8b5664a066a/osm_humanized_opening_hours-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "acfe36f0e1c3dfc8149447389f4e5641",
          "sha256": "e1ff3620a53bbcfe543b8a42fe757c1ea5040e3176ec4359a53c1550b34abf9b"
        },
        "downloads": 0,
        "filename": "osm_humanized_opening_hours-0.1.1-py3.5.egg",
        "has_sig": false,
        "md5_digest": "acfe36f0e1c3dfc8149447389f4e5641",
        "packagetype": "bdist_egg",
        "python_version": "3.5",
        "size": 26701,
        "upload_time": "2017-08-06T10:34:44",
        "url": "https://files.pythonhosted.org/packages/23/93/d582345725e25908c09977d5704e384a9f000a7699e7a7561a1ba4a2aa16/osm_humanized_opening_hours-0.1.1-py3.5.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "fac4f687350f2a1381d9af7b05dd4284",
          "sha256": "0b050d13597c2c9d15e50385dc352af645012ba12e86f9f59cd82541b115dd2e"
        },
        "downloads": 0,
        "filename": "osm_humanized_opening_hours-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fac4f687350f2a1381d9af7b05dd4284",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17124,
        "upload_time": "2017-08-06T10:34:46",
        "url": "https://files.pythonhosted.org/packages/93/27/a1ebf0288ada7945216caddeb46aef626d774d1cb0c5067432887041a053/osm_humanized_opening_hours-0.1.1.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9d62b6a5d2730797ed49cb937b13d9f6",
          "sha256": "22e93c08432279207f3b7d6d298c0005b77bba55a42dfd33756488aab7391ced"
        },
        "downloads": 0,
        "filename": "osm_humanized_opening_hours-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9d62b6a5d2730797ed49cb937b13d9f6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21765,
        "upload_time": "2017-09-17T17:45:04",
        "url": "https://files.pythonhosted.org/packages/29/f3/0d3fa79ac040bd576baedbdeb1e29322889e9688099fd4b138505073ead7/osm_humanized_opening_hours-0.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9d62b6a5d2730797ed49cb937b13d9f6",
        "sha256": "22e93c08432279207f3b7d6d298c0005b77bba55a42dfd33756488aab7391ced"
      },
      "downloads": 0,
      "filename": "osm_humanized_opening_hours-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9d62b6a5d2730797ed49cb937b13d9f6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 21765,
      "upload_time": "2017-09-17T17:45:04",
      "url": "https://files.pythonhosted.org/packages/29/f3/0d3fa79ac040bd576baedbdeb1e29322889e9688099fd4b138505073ead7/osm_humanized_opening_hours-0.2.0.tar.gz"
    }
  ]
}