{
  "info": {
    "author": "rezemika",
    "author_email": "reze.mika@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "License :: OSI Approved :: GNU Affero General Public License v3",
      "Natural Language :: French",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Topic :: Other/Nonlisted Topic"
    ],
    "description": "Humanized Opening Hours - A parser for the opening_hours fields from OSM\n========================================================================\n\n**Humanized Opening Hours** is a Python 3 module allowing a simple usage of the opening_hours fields used in OpenStreetMap. It provides especially a function to get a good-looking opening hours description from a field.\n\nAny pull request (following PEP-8) is more than welcome!\n\n```python\n>>> import humanized_opening_hours\n>>> field = \"Mo-Fr 06:00-21:00; Sa,Su 07:00-21:00\"\n>>> hoh = humanized_opening_hours.HumanizedOpeningHours(field)\n>>> hoh.is_open()\nTrue\n>>> hoh.next_change()\ndatetime.datetime(2017, 12, 24, 21, 0)\n>>> hohr = humanized_opening_hours.HOHRenderer(hoh)\n>>> print(hohr.description())\n'''\nMonday: 06:00 - 21:00\nTuesday: 06:00 - 21:00\nWednesday: 06:00 - 21:00\nThursday: 06:00 - 21:00\nFriday: 06:00 - 21:00\nSaturday: 07:00 - 21:00\nSunday: 07:00 - 21:00\n'''\n```\n\n**This module is still in development and bugs may occur. If you discover one, please create an issue.**\n\n# Installation\n\nThis library is so small, you can include it directly into your project.\nAlso, it is available on PyPi.\n\n    $ pip3 install osm-humanized-opening-hours\n\n# How to use it\n\nThe only mandatory argument to give to the constructor is the field, which must be a string.\nYou can also specify:\n\n- `year` (int) : the year for which to parse the field, default the current year.\n\n```python\n>>> import humanized_opening_hours as hoh\n>>> field = \"Mo-Fr 06:00-21:00; Sa,Su 07:00-21:00\"\n>>> \n>>> oh = hoh.OHParser(field)\n>>> oh.is_open()\nTrue\n```\n\n## Basic methods\n\n```python\n# To know if the facility is open at the present time. Returns a boolean. Can take a datetime.datetime moment to check for another time.\n>>> oh.is_open()\nTrue\n\n# To know at which time the facility status (open / closed) will change. Returns a collections.namedtuple object.\n# Can take a datetime.datetime moment to check for another time.\n# If we are on December 24 before 21:00 / 09:00PM...\n>>> oh.next_change()\nNextChange(dt=datetime.datetime(2017, 12, 24, 21, 0, tzinfo=<UTC>), moment=<Moment ('21:00')>)\n```\n\nYou can get a sanitized version of the field given to the constructor with the *sanitize* staticmethod or the **sanitized_field** attribute.\n\n```python\n>>> field = \"mo-su 0930-2000\"\n>>> print(hoh.OHParser.sanitize(field))\n\"Mo-Su 09:30-20:00\"\n```\n\n## Solar hours\n\nIf the field contains solar hours, here is how to deal with them.\n\nFirst of all, you can easily know if you need to set them by checking the `OHParser.needs_solar_hours_setting` variable. If it is `True`, you need to parse them with a dedicated method which need to know the true solar hours.\n\n**If you try to do something with a field requiring setting without setting it, you will get a \"SolarHoursNotSetError\".**\n\nAttention, except if the facility is on the equator, this setting will be valid only for a short period. It is recommended to rerun this function regularly changing the its hours if your program is intended to be used over a long period of time.\n\nIf you know that the sun rises at six o'clock and sets at ten o'clock, you can set it like this.\n\n```python\n# Using a tuple of tuples of integers (hour, minutes) for (sunrise, sunset).\n>>> oh.set_solar_hours(self, sunrise_sunset=((6, 0), (10, 0)))\n```\n\nYou can also set dawn and dusk this way.\n\n```python\n# Using a tuple of tuples of integers (hour, minutes) for (sunrise, sunset).\n>>> oh.set_solar_hours(self, dawn_dusk=((6, 0), (10, 0)))\n```\n\n## Have nice schedules\n\nThe `HOHRenderer` class allows you to get various representations of the schedules.\nIts *init* method takes an OHParser object in argument, and two optional arguments:\n\n- `universal` (bool) : allows to have human-readable descriptions without having to parse the solar hours (True default).\n- `locale_name` (str) : the language to use (\"en\" default), which can be changed with the `set_locale()` method.\n\nIt has several methods to retrieve useful informations.\n\nIf the facility is always open, many of the following methods won't be very usefull.\nIf you want a human-readable description, see the doc of the [description](#description) method or use the *always_open_str* attribute to get a simple string.\n\nThis object can also be created from an OHParser instance with its `render()` method.\n\n```python\nhohr = oh.render(universal=False)\n```\n\n### <a name=\"set_locale\"></a>set_locale\n\nAllows to set a new locale for rendering. Takes a single argument: the locale_name.\n\nTo get the available locales, use the static method `HOHRenderer.available_locales()`, which returns a list of strings.\n\n### <a name=\"description\"></a>description\n\nAllows to get a pretty description of the opening hours.\n\nTakes the following arguments:\n\n- `indent` (int) : indentation of the day schedules (in spaces), 0 default.\n- `week_range` (bool) : if set to False, it will display week indexes only if necessary (True default).\n- `holidays` (bool) : defines whether to display the opening status on holidays (True default).\n\n```python\n# Field : \"Mo-Fr 06:00-21:00; Sa,Su 07:00-21:00\"\n>>> hohr = humanized_opening_hours.HOHRenderer(hoh)\n>>> print(hohr.description())\n'''\nWeeks 1\u2009\u2013\u200953:\nMonday: 06:00 - 21:00\nTuesday: 06:00 - 21:00\nWednesday: 06:00 - 21:00\nThursday: 06:00 - 21:00\nFriday: 06:00 - 21:00\nSaturday: 07:00 - 21:00\nSunday: 07:00 - 21:00\n'''\n\n>>> print(hohr.description(week_range=False))\n'''\nMonday: 06:00 - 21:00\nTuesday: 06:00 - 21:00\nWednesday: 06:00 - 21:00\nThursday: 06:00 - 21:00\nFriday: 06:00 - 21:00\nSaturday: 07:00 - 21:00\nSunday: 07:00 - 21:00\n'''\n\n>>> print(hohr.description(indent=4))\n'''\nWeeks 1\u2009\u2013\u200953:\n    Monday: 06:00 - 21:00\n    Tuesday: 06:00 - 21:00\n    Wednesday: 06:00 - 21:00\n    Thursday: 06:00 - 21:00\n    Friday: 06:00 - 21:00\n    Saturday: 07:00 - 21:00\n    Sunday: 07:00 - 21:00\n'''\n\n# Field : \"Mo-Fr 06:00-sunset; Sa,Su 07:00-21:00\"\n>>> print(hohr.description())\n'''\nWeeks 1\u2009\u2013\u200953:\nMonday: 06:00 - sunset\nTuesday: 06:00 - sunset\nWednesday: 06:00 - sunset\nThursday: 06:00 - sunset\nFriday: 06:00 - sunset\nSaturday: 07:00 - 21:00\nSunday: 07:00 - 21:00\n'''\n\n# Field : \"Mo-Fr 06:00-sunset; Sa,Su 07:00-21:00\"\n# Solar hours parsed. Sunset at 21:04.\n>>> hohr = humanized_opening_hours.HOHRenderer(hoh, universal=False)\n>>> print(hohr.description(week_range=False))\n'''\nMonday: 06:00 - 21:04\nTuesday: 06:00 - 21:04\nWednesday: 06:00 - 21:04\nThursday: 06:00 - 21:04\nFriday: 06:00 - 21:04\nSaturday: 07:00 - 21:00\nSunday: 07:00 - 21:00\n'''\n\n# Field : \"Mo-Fr 06:00-(sunset+02:00); Sa,Su 07:00-21:00\"\n# Solar hours parsed. Sunset at 21:04.\n>>> print(hohr.description(week_range=False))\n'''\nMonday: 06:00 - 02:00 after sunset\nTuesday: 06:00 - 02:00 after sunset\nWednesday: 06:00 - 02:00 after sunset\nThursday: 06:00 - 02:00 after sunset\nFriday: 06:00 - 02:00 after sunset\nSaturday: 07:00 - 21:00\nSunday: 07:00 - 21:00\n'''\n\n# Field : \"Mo-Fr 06:00-(sunset+02:00); Sa,Su 07:00-21:00\"\n# Solar hours parsed. Sunset at 21:04.\n>>> print(hohr.description(universal=False, week_range=False))\n'''\nMonday: 06:00 - 23:04\nTuesday: 06:00 - 23:04\nWednesday: 06:00 - 23:04\nThursday: 06:00 - 23:04\nFriday: 06:00 - 23:04\nSaturday: 07:00 - 21:00\nSunday: 07:00 - 21:00\n'''\n\n# Field : \"24/7\"\n>>> hohr = humanized_opening_hours.HOHRenderer(hoh)\n>>> print(hohr.description())\n'''\nOpen 24 hours a day and 7 days a week.\n'''\n```\n\n### <a name=\"get_human_names\"></a>get_human_names\n\nReturns a dict of lists with the names of months and weekdays in the current locale.\n\nExample:\n\n```python\n>>> hohr.get_human_names()\n{\n    'months': [\n        'January', 'February', 'March',\n        'April', 'May', 'June', 'July',\n        'August', 'September', 'October',\n        'November', 'December'\n    ],\n    'days': [\n        'Monday', 'Tuesday', 'Wednesday',\n        'Thursday', 'Friday', 'Saturday',\n        'Sunday'\n    ]\n}\n```\n\n### <a name=\"humanized_time_before_next_change\"></a>humanized_time_before_next_change\n\nReturns a humanized delay before the next change in opening status.\n\n```python\n>>> hohr.humanized_time_before_next_change()\n\"in 3 hours\"\n>>> hohr.humanized_time_before_next_change(word=False)\n\"3 hours\"\n```\n\n## Objects\n\nApart the main HumanizedOpeningHours class, HOH provides four other objects:\n- `Year` : the main year, containing 364 or 365 days;\n- `Day` : a weekday, or public or schoold holidays;\n- `Period` : a period with two `Moment` objects : a beginning and an end;\n- `MomentKind` : the kind of a period;\n- `Moment` : a moment in time, which can be a beginning or an end of a period.\n\n### <a name=\"day\"></a>Day\n\nAttributes:\n- `index` (int or str) : an integer from 0 to 6 (index in a week) or \"PH\" or \"SH\" for public or school holidays;\n- `periods` (list) : a list of `Period` objects included in this day;\n- `date` (datetime.date) : the date of the day;\n- `month_index` (int) : the index of the month of the day (between 0 and 11).\n\n```python\n# Know whether there is / are opening period(s) in this day.\n>>> day.opens_today()\nTrue\n```\n\n### <a name=\"period\"></a>Period\n\nAttributes:\n- `beginning` (Moment object) : the beginning of the period;\n- `end` (Moment object) : the end of the period.\n\n```python\n# To know if a period contains a solar hour, use the `is_variable()` method.\n>>> period.is_variable()\ndatetime.timedelta(0, 10800)\n\n# Know if a datetime.time object is between the beginning and the end of this period (i.e. it is open at this time).\n>>> moment = datetime.time(18, 30)\n>>> moment in period\nTrue\n```\n\n### <a name=\"momentkind\"></a>MomentKind\n\nA simple Enum with the following values:\n- `NORMAL`;\n- `SUNRISE`;\n- `SUNSET`;\n- `DAWN`;\n- `DUSK`.\n\n### <a name=\"moment\"></a>Moment\n\nAttributes:\n- `kind` (MomentKind) : the kind of this moment;\n\n```python\n# Gets a datetime.time object (localized on UTC), or None if the moment is variable.\n>>> moment.time()\ndatetime.time(18, 30, tzinfo=<UTC>)\n```\n\n# Dependencies\n\nThis module requires the following modules, which can be installed with `pip3`.\n\n```python\npytz\nisoweek\nbabel\ncopy\n```\n\n# Licence\n\nThis module is published under the AGPLv3 license, the terms of which can be found in the [LICENCE](LICENCE) file.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/rezemika/humanized_opening_hours",
    "keywords": "",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "osm-humanized-opening-hours",
    "platform": "",
    "project_url": "https://pypi.org/project/osm-humanized-opening-hours/",
    "release_url": "https://pypi.org/project/osm-humanized-opening-hours/0.3.0/",
    "requires_dist": [
      "pytz",
      "astral"
    ],
    "requires_python": "",
    "summary": "A parser for the opening_hours fields from OpenStreetMap.",
    "version": "0.3.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2835395f0c4de8b20fb0216fd663b35e",
          "sha256": "2469622640a094324b36262e67a958cde782f7ced959edbd166ec2b71ee4875b"
        },
        "downloads": -1,
        "filename": "osm_humanized_opening_hours-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2835395f0c4de8b20fb0216fd663b35e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17030,
        "upload_time": "2017-08-05T13:24:47",
        "url": "https://files.pythonhosted.org/packages/92/e5/43d33773efffebc763bbbf1c7620191cc35e6b0844e0dd08a8b5664a066a/osm_humanized_opening_hours-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "acfe36f0e1c3dfc8149447389f4e5641",
          "sha256": "e1ff3620a53bbcfe543b8a42fe757c1ea5040e3176ec4359a53c1550b34abf9b"
        },
        "downloads": -1,
        "filename": "osm_humanized_opening_hours-0.1.1-py3.5.egg",
        "has_sig": false,
        "md5_digest": "acfe36f0e1c3dfc8149447389f4e5641",
        "packagetype": "bdist_egg",
        "python_version": "3.5",
        "size": 26701,
        "upload_time": "2017-08-06T10:34:44",
        "url": "https://files.pythonhosted.org/packages/23/93/d582345725e25908c09977d5704e384a9f000a7699e7a7561a1ba4a2aa16/osm_humanized_opening_hours-0.1.1-py3.5.egg"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "fac4f687350f2a1381d9af7b05dd4284",
          "sha256": "0b050d13597c2c9d15e50385dc352af645012ba12e86f9f59cd82541b115dd2e"
        },
        "downloads": -1,
        "filename": "osm_humanized_opening_hours-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "fac4f687350f2a1381d9af7b05dd4284",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17124,
        "upload_time": "2017-08-06T10:34:46",
        "url": "https://files.pythonhosted.org/packages/93/27/a1ebf0288ada7945216caddeb46aef626d774d1cb0c5067432887041a053/osm_humanized_opening_hours-0.1.1.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9d62b6a5d2730797ed49cb937b13d9f6",
          "sha256": "22e93c08432279207f3b7d6d298c0005b77bba55a42dfd33756488aab7391ced"
        },
        "downloads": -1,
        "filename": "osm_humanized_opening_hours-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9d62b6a5d2730797ed49cb937b13d9f6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21765,
        "upload_time": "2017-09-17T17:45:04",
        "url": "https://files.pythonhosted.org/packages/29/f3/0d3fa79ac040bd576baedbdeb1e29322889e9688099fd4b138505073ead7/osm_humanized_opening_hours-0.2.0.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7024cdcc5e051361b34c3e4dc283ade4",
          "sha256": "fd4f96fac8cc60c0142e5fb77860b80424568762ce358f866b91e8fa010e5a3d"
        },
        "downloads": -1,
        "filename": "osm_humanized_opening_hours-0.3.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7024cdcc5e051361b34c3e4dc283ade4",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 39524,
        "upload_time": "2017-11-25T12:19:44",
        "url": "https://files.pythonhosted.org/packages/c1/8e/cdee3866d532623b05052c9db8ab5c41a9c2cb2bcea09dab186d015773a7/osm_humanized_opening_hours-0.3.0-py3-none-any.whl"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7024cdcc5e051361b34c3e4dc283ade4",
        "sha256": "fd4f96fac8cc60c0142e5fb77860b80424568762ce358f866b91e8fa010e5a3d"
      },
      "downloads": -1,
      "filename": "osm_humanized_opening_hours-0.3.0-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "7024cdcc5e051361b34c3e4dc283ade4",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 39524,
      "upload_time": "2017-11-25T12:19:44",
      "url": "https://files.pythonhosted.org/packages/c1/8e/cdee3866d532623b05052c9db8ab5c41a9c2cb2bcea09dab186d015773a7/osm_humanized_opening_hours-0.3.0-py3-none-any.whl"
    }
  ]
}