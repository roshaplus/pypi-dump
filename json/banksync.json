{
  "info": {
    "author": "Jason Harris",
    "author_email": "jason@jasonfharris.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Topic :: Software Development",
      "Topic :: Software Development :: Version Control",
      "Topic :: Utilities"
    ],
    "description": "Purpose\n-------\n\nThe banksync command line tool allows the easy operation of git commands\nacross a \"bank\" or \"collection\" or repositories. It allows\nsynchronization to historic configurations across the bank of repos.\n\nInstallation\n------------\n\nYou can install ``banksync`` from PyPi with a simple:\n\n::\n\n    pip install banksync\n\nQuickstart\n----------\n\nA bank is a collection of repos. The collection of repos is specified in\na *syncfile*. The syncfile typically lives in *syncrepo*. So let us\ndemonstrate this with a trivial collection of repos. The overall project\nwill be called ``animals`` and it will contain a repo ``repoFish`` and a\nrepo ``repoBirds``. The project can live anywhere but to make the\ndescription easy let us put the project in the users root directory.\n\nSo make a directory ``animals``:\n\n::\n\n    cd ~\n    mkdir animals\n    cd animals\n\nNow clone the demonstration syncrepo for the animals project using\nstandard git:\n\n::\n\n    git clone https://github.com/testbank/animalsRepoSync.git\n\nThis will clone the thin repo which records the syncfile over time. Ie\nit records the state of the repos in the bank at different times /\nstages. We now have the hierarchy:\n\n::\n\n    animals\n    \u2514\u2500\u2500 animalsRepoSync\n        \u251c\u2500\u2500 bankconfig.ini\n        \u2514\u2500\u2500 syncfile.wl\n\nNow we enter into this directory and we clone the repositories in the\nbank\n\n::\n\n    cd animalsRepoSync\n    bank clone\n\nThe clone command will clone all of the repos specified in the syncfile\nand we will now have the following layout:\n\n::\n\n    animals\n    \u251c\u2500\u2500 animalsRepoSync\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 bankconfig.ini\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 syncfile.wl\n    \u251c\u2500\u2500 repoBird\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 Bird.txt\n    \u2514\u2500\u2500 repoFish\n        \u2514\u2500\u2500 Fish.txt\n\nWe can now issue commands across the repos in the bank. From the\nsyncrepo we can execute:\n\n::\n\n    cd ~/animals/animalsRepoSync\n    bank git status\n\nWhich will execute the status command in each of the repos in the bank.\nIf we want to checkout a previous state across the repos in the project\nwe can do this via (from the syncrepo):\n\n::\n\n    git checkout master~2\n    bank sync\n\nThe last two commands just moved the syncrepo two revisions back, and\nthen synchronized the repos in the bank to the sync file at this earlier\ntime. To get all repos back to the master branch revisions you can\nsimply execute:\n\n::\n\n    bank gitall checkout master\n\nWhich will do a ``git checkout master`` on all the repos in the bank\nincluding the sync repo.\n\nSyncfile\n--------\n\nThe syncfile specifies which repositories are part of the bank, and what\nstate the repositories should be synchronized to. A typical simple sync\nfile might be the following\n\n::\n\n    more ~/animals/animalsRepoSync/syncfile.wl\n\nWhich yields:\n\n::\n\n    <|\n        \"repoFish\" -> <|\n            \"path\" -> \"repoFish\",\n            \"sha\" -> \"a27368bec17373938b1dcf73638945b89b60a9d0\",\n            \"UnixTimeStamp\" -> \"1480517200\",\n            \"date\" -> \"30 Nov 2016 - 15:46:40\",\n            \"author\" -> \"Jason Harris\",\n            \"revisionNumber\" -> \"3\",\n            \"message\" -> \"committing salmon\",\n            \"cloneURL\" -> \"https://github.com/testbank/repoFish.git\"\n        |>,\n        \"repoBird\" -> <|\n            \"path\" -> \"repoBird\",\n            \"sha\" -> \"6bf9d646b2aa224b64fb86cbddb4d7ab0f2e37d3\",\n            \"UnixTimeStamp\" -> \"1480517200\",\n            \"date\" -> \"30 Nov 2016 - 15:46:40\",\n            \"author\" -> \"Jason Harris\",\n            \"revisionNumber\" -> \"3\",\n            \"message\" -> \"committing eagle\",\n            \"cloneURL\" -> \"https://github.com/testbank/repoBird.git\"\n        |>\n    |>\n\nThe syncfile should lie inside a git repo (the syncrepo). Whenever we\nwant to record a configuration of the repos we simply alter the syncfile\nby transcribing the current state of the repos into the syncfile using\n``bank recordRepos`` with the appropriate options. We then use\n``git commit`` to record this new state / configuration in the syncrepo.\n\nSo let us add some content to repoBird in our example and then commit\nthis change.\n\n::\n\n    cd  ~/animals/repoBird\n    echo \"toucan\" >> Bird.txt\n    git commit -am \"committing toucan\"\n\nSo now we can update the syncfile with the state of the current repos in\nthe bank:\n\n::\n\n    cd ~/animals/animalsRepoSync/\n    bank recordRepos\n\nThe contents of our syncfile will now be something like:\n\n::\n\n    <|\n        \"repoFish\" -> <|\n            \"path\" -> \"repoFish\",\n            \"sha\" -> \"a27368bec17373938b1dcf73638945b89b60a9d0\",\n            \"UnixTimeStamp\" -> \"1480517200\",\n            \"date\" -> \"30 Nov 2016 - 15:46:40\",\n            \"author\" -> \"Jason Harris\",\n            \"revisionNumber\" -> \"3\",\n            \"message\" -> \"committing salmon\",\n            \"cloneURL\" -> \"https://github.com/testbank/repoFish.git\"\n        |>,\n        \"repoBird\" -> <|\n            \"path\" -> \"repoBird\",\n            \"sha\" -> \"c8fb05947c5161e484104d99f427ec082fb4e85b\",\n            \"UnixTimeStamp\" -> \"1480519159\",\n            \"date\" -> \"30 Nov 2016 - 16:19:19\",\n            \"author\" -> \"Jason Harris\",\n            \"revisionNumber\" -> \"4\",\n            \"message\" -> \"committing toucan\",\n            \"cloneURL\" -> \"https://github.com/testbank/repoBird.git\"\n        |>\n    |>\n\n(Note the sha, timestamps, and other data about the state of the repo\n``repoBird`` has changed.)\n\nSo we could now record this new overall state of the repos in the bank\nvia simply committing the file syncfile in the syncrepo.\n\n::\n\n    git commit -am \"recording the latest state of the repos in animals.\"\n\nLocations\n---------\n\nHow does the bank command know where to put the ``repoBird`` and\n``repoFish``? How does it know which syncfile to use, etc. Well in the\nsyncrepo there is the file ``bankconfig.ini``. This is a standard\npreferences file but in this example it has two important options:\n``cwd=..`` and ``syncfile=syncfile.wl``.\n\nThe cwd (ChangeWorkingDirectory) option specifies that the repo commands\nshould be executed one level up from our current working directory. So\nsince we are currently at ``~/animals/animalsRepoSync`` that means that\nthe repos paths will start from ``~/animals/``\n\nThe second option just tells us what the name of the syncfile is. We\ncould have called it ``earthanimals.wl`` if we wanted to.\n\nBank command line options\n-------------------------\n\nThe command line tool ``bank`` has several options which can be\nspecified:\n\n--syncfile \n^^^^^^^^^^^\n\nThe ``syncfile`` option specifies a syncfile. The syncfile contents\nspecify which repos are part of the bank. The various keys which are\nrecorded if present are:\\ ``path``, ``sha``, ``UnixTimeStamp``,\n``date``, ``author``, ``revisionNumber``, ``message``, and ``cloneURL``.\nAdding other keys at present will not effect or change the behavior of\nthe bank tool so you can add other info as you see fit / want to each of\nthe recorded states in the various repos.\n\n--cwd \n^^^^^^\n\nThe cwd option will change the working directory. Using this you can\nspecify the relative path to get to the base of where the path for each\nof the repos in the bank are. For instance in the layout example of the\nanimals project above, if we are in the directory\n``animals/animalsSyncRepo`` then since the path in the syncfile for\n\"Birds\" is just ``repoBird`` then relative to\n``animals/animalsSyncRepo`` we want the directory ``../repoBird``. So we\nwould use the option ``--cwd ..``\n\n--dryrun\n^^^^^^^^\n\nIf this option is specified then ``banksync`` will report what it\n*would* do but it doesn't actually do anything.\n\n--colorize \n^^^^^^^^^^^\n\nYou can specify if color is not to be used in output if for instance you\nwant the logs to be parsed in jenkins or other devops tools. (The\ndefault is ``True``, i.e. colorize the output of the bank command)\n\n--verbosity \n^^^^^^^^^^^^\n\nYou can specify how much information banksync reports. This integer\nshould be between 0, 1, 2, 3, or 4. The higher the number the more\nverbose is the reporting. The default is 2.\n\n--matching \n^^^^^^^^^^^\n\nWhen attempting to sync the constituent repos to the versions specified\nin the syncfile, how do we determine what to set the versions to? We\nwant some loose coupling in that for instance if someone runs filter\nbranch on a project or they do some rebase very early on in the history\nthen the shas will change on all the revisions in the repository. So\ninstead of finding a commit via a sha we will have to fall back to\nlooking for a matching timestamp for the revision. These are generally\nfairly unique in a project unless a lot of cherrypicking has gone on. If\nwe don't find that exact timestamp then we could fall back to the\nclosest matching revision to that timestamp. In this way at least we\nhave some hope of getting close to the configuration at the time instead\nof just giving up. Ie we get to the exact configuration if it is\navailable but if not get as close as we can. The value of the option can\nbe:\n\n-  **shaOnly**: if we can't find the exact same revision given by the\n   sha in the syncfile than give up.\n-  **timestamps**: try matching by sha first but if that fails find the\n   first revision with the same unix timestamp. (This is almost always\n   preserved across repo manipulation)\n-  **closetimestamps**: try matching by sha first, if that fails try\n   matching by timestamp. and if that fails find the revision with the\n   closest timestamp and match to that.\n\nConfig file\n-----------\n\nInstead of specifying the ``--syncfile`` and\\ ``\u2014cwd`` in each command\nyou can create a ``bankconfig.ini`` file alongside the syncfile. In the\n``bankconfig.ini`` file you can specify the default syncfile and cwd to\nuse if none is specified. Eg we could add the file\n``animals/animalsSyncRepo/bankconfig.ini`` with the following contents:\n\n::\n\n    [General]\n    cwd=..\n    syncFile=syncfile.wl\n\nThen you could omit the options to the bank command and they would be\ntaken from the bankconfig.ini file so the above example would become:\n\n::\n\n    cd animals/animalsSyncRepo\n    bank recordRepos\n    git commit -am \"recording the latest state of the repos in animals.\"\n\nYou can choose weather to include the ``bankconfig.ini`` in the syncrepo\nhistory or not. (We choose to in this example but other teams may leave\nthis to the individual developers.)\n\nCommands\n--------\n\nThe form of a bank command is ``bank <cmd> <opts>`` where ``<cmd>`` is\none of ``sync``, ``recordRepos``, ``createSyncfile``, ``bisect``,\n``clone``, ``git`` or ``gitall``\n\nbank sync \n^^^^^^^^^^\n\n``sync`` will update / checkout the revisions specified in the syncfile\nfor each of the repos specified in the bank.\n\n::\n\n    bank sync --syncfile syncfile.wl\n\nThis would checkout / update the repos given in the syncfile\n``syncfile.wl`` to the states given in the syncfile. It each repo it\ntries to checkout the version first by the given sha, and then it falls\nback to the given timestamp, and then it falls back to the closest\ntimestamp. (This fallback behavior can be controlled by the\n``--matching`` option.)\n\n::\n\n    bank sync --syncfile syncfile.wl --cwd ../other/dir\n\nThis would checkout / update the repos given in the syncfile to the\nstates given in the syncfile (but the path to each repo in the bank will\nbe prefixed by the value of the ``--cwd`` option ``../other/dir``).\n\nbank recordRepos \n^^^^^^^^^^^^^^^^^\n\n``recordRepos`` is used to transcribe the current state of the repos\ninto the syncfile. Eg:\n\n::\n\n    bank recordRepos --syncfile syncfile.wl\n\nThis would alter the contents of the syncfile and change the revisions\nstored in the syncfile.wl to match the current revisions of the\nreferenced repositories.\n\nbank createSyncfile \n^^^^^^^^^^^^^^^^^^^^\n\n``createSyncfile`` is used to generate an initial syncfile. Eg:\n\n::\n\n    bank createSyncfile --syncfile syncfile.wl repo1 repo2 ... repoN --cwd some/dir\n\nThis would generate or overwrite the syncfile.wl to contain sync points\nfor the current states of ``repo1``, ``repo2``, ... ``repoN``\n\nbank createSyncrepo \n^^^^^^^^^^^^^^^^^^^^\n\n``createSyncrepo`` is used to generate the syncrepo directory,\ninitialize a git repository there, create the syncfile and also create\nthe bankconfig.ini file. Basically it creates all the working parts of a\nsyncrepo. Eg:\n\n::\n\n    bank createSyncrepo repo1 repo2 ... repoN\n\nThis would create the directory ``syncrepo`` and fill it with a\n``syncfile.json`` and a ``bankconfig.ini``. The syncfile would contain\nthe latest states of the ``repo1``, ``repo2``, ... ``repoN``.\n\n::\n\n    bank createSyncrepo --syncreponame controlrepo --syncfilename felipe.json repo1 repo2 ... repoN\n\nWould create and initialize a syncrepo called ``controlrepo`` and inside\nthat a syncfile called ``felipe.json``.\n\nbank bisect \n^^^^^^^^^^^^\n\nYou can use ``bank bisect`` on the syncrepo to step through historic\nconfigurations looking for a configuration which produces some change.\n(Typically we are searching for a regression.) Eg if we have a\nconfiguration file in the syncrepo the following might be a typical\nbisect session:\n\n::\n\n    cd SomeSyncRepo\n    bank bisect start\n    bank bisect good 12e4f5\n    bank bisect bad master\n    <do build / test>\n    bank bisect good 78a6b9\n    <do build / test>\n    bank bisect bad ae726a\n    ...\n\nBasically we are git bisecting on the syncrepo, and after each bisect\nstep we get a new configuration, then ``bank sync`` will be run to\nsynchronize the repositories in the bank to their state at the time that\niteration of the syncfile was recorded . So ``bank bisect <arguments>``\nis basically equivalent to ``git bisect <arguments>; bank sync``\n\nDispatching git commands\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nWe can use ``bank`` to perform a git command on each repository in the\nbank. All git commands have the prefix 'git' along with the normal name\nof the git command. Eg\n\n::\n\n    bank git status --syncfile syncfile.wl\n\nWill perform a ``git status`` operation on each of the repositories in\nthe bank and print the results to stdout.\n\nIf you use ``gitall`` instead of ``git`` command, then the git command\nwill also be run in the syncrepo.\n\n::\n\n    bank gitall status --syncfile syncfile.wl\n\nWill perform a ``git status`` operation on each of the repositories in\nthe bank and print the results to stdout.\n\nTesting\n-------\n\nTo run the test suite you need ``py.test`` installed on your machine.\nThen after downloading the source code you can simply execute:\n\n::\n\n    cd banksync_Package\n    py.test",
    "docs_url": null,
    "download_url": "https://github.com/jasonfharris/banksync/tarball/0.7.6",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/jasonfharris/banksync",
    "keywords": "execute,shell,system,git,submodule",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "banksync",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/banksync/",
    "release_url": "https://pypi.org/project/banksync/0.7.6/",
    "requires_python": null,
    "summary": "A library for manipulating banks of git repositories",
    "version": "0.7.6"
  },
  "releases": {
    "0.7.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b2a7045dda9d9921e98d18b86d3eff6a",
          "sha256": "a557c684442d905f4fa347d586c08b75eee43a68e9bcaea0cfff35181a5f31c0"
        },
        "downloads": 180,
        "filename": "banksync-0.7.0.tar.gz",
        "has_sig": false,
        "md5_digest": "b2a7045dda9d9921e98d18b86d3eff6a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 10994,
        "upload_time": "2016-11-23T07:25:21",
        "url": "https://files.pythonhosted.org/packages/55/39/cfba8c7aa82768ca3aa11d3610c3c95ee945ffe2bbfe16cd1aca56f06e7b/banksync-0.7.0.tar.gz"
      }
    ],
    "0.7.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a1eba7eccf7e89a14e8bdd5ae355f064",
          "sha256": "13c98edab184284237ad9ff04739590fa12cdf1ecd5193083b1f19729b3d0b2d"
        },
        "downloads": 193,
        "filename": "banksync-0.7.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a1eba7eccf7e89a14e8bdd5ae355f064",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11160,
        "upload_time": "2016-11-23T07:41:56",
        "url": "https://files.pythonhosted.org/packages/fb/28/969ac81beacf47154e0ee3082ecbd7344c09b5dcb676cb32c5603cc962a0/banksync-0.7.1.tar.gz"
      }
    ],
    "0.7.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "320a443677d4bff0f85946a68aba89b8",
          "sha256": "71d89eb8ba8881de79e9c4d34f82552a902090e36ceeba07b1cb32c143f4fd7d"
        },
        "downloads": 55,
        "filename": "banksync-0.7.2.tar.gz",
        "has_sig": false,
        "md5_digest": "320a443677d4bff0f85946a68aba89b8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16824,
        "upload_time": "2016-11-30T18:54:18",
        "url": "https://files.pythonhosted.org/packages/0b/25/9f708ba5a376fb9840f81b85691ccef4f6b7793c8695601e0bf514fdcf11/banksync-0.7.2.tar.gz"
      }
    ],
    "0.7.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "251374ff6872f3adcd001c358d047255",
          "sha256": "ec25e300c584c411136de1b88609af406b7396e9dcfd743f46d4c370495c9a63"
        },
        "downloads": 58,
        "filename": "banksync-0.7.3.tar.gz",
        "has_sig": false,
        "md5_digest": "251374ff6872f3adcd001c358d047255",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16869,
        "upload_time": "2016-12-01T17:22:35",
        "url": "https://files.pythonhosted.org/packages/89/bf/ccf94250e4140b99e16710fda1359f6bcee682273d54b837a7a45149a18d/banksync-0.7.3.tar.gz"
      }
    ],
    "0.7.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "85068afbff668610c79e146c8e782dd0",
          "sha256": "1884b36f9bd7d418182837f926e72add714c363451a0eab0fb805e814670659b"
        },
        "downloads": 305,
        "filename": "banksync-0.7.5.tar.gz",
        "has_sig": false,
        "md5_digest": "85068afbff668610c79e146c8e782dd0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18638,
        "upload_time": "2016-12-26T09:43:54",
        "url": "https://files.pythonhosted.org/packages/32/df/a3fd149d9d3dc0090181c553e7252247523c53b9fd868d9db056e4621179/banksync-0.7.5.tar.gz"
      }
    ],
    "0.7.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9d8592f0144ccf30c7dc7adf42d6382d",
          "sha256": "043e6423cde16c9f414486affafcbbdb96c94e483bd3d5280d475bdebc30b4ca"
        },
        "downloads": 305,
        "filename": "banksync-0.7.6.tar.gz",
        "has_sig": false,
        "md5_digest": "9d8592f0144ccf30c7dc7adf42d6382d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19474,
        "upload_time": "2016-12-26T17:24:13",
        "url": "https://files.pythonhosted.org/packages/ce/66/98394f923d177069fd5bf2d0f34505e2de93bda4874558c698ec866c9961/banksync-0.7.6.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9d8592f0144ccf30c7dc7adf42d6382d",
        "sha256": "043e6423cde16c9f414486affafcbbdb96c94e483bd3d5280d475bdebc30b4ca"
      },
      "downloads": 305,
      "filename": "banksync-0.7.6.tar.gz",
      "has_sig": false,
      "md5_digest": "9d8592f0144ccf30c7dc7adf42d6382d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 19474,
      "upload_time": "2016-12-26T17:24:13",
      "url": "https://files.pythonhosted.org/packages/ce/66/98394f923d177069fd5bf2d0f34505e2de93bda4874558c698ec866c9961/banksync-0.7.6.tar.gz"
    }
  ]
}