{
  "info": {
    "author": "Oliver Nagy",
    "author_email": "olitheolix@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 2 - Pre-Alpha",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "# DS2Server\n\nA simple Space Sim inspired sandbox to experiment with machine learning.\n\n*DS2Server* flies through a (pre-rendered) space simulation. The space itself\nis occupied with many objects, most notably of cubes with a number on it.\n\n<img src=\"docs/img/cube_samples.png\">\n\nYou may think of it as a 3D version of\nthe [MNIST](http://yann.lecun.com/exdb/mnist/) data set.\n\nYour job is to build the machine learning model that can spot and identify\nthose cubes in the scene, like this one.\n\n<img src=\"docs/img/example_scene.jpg\" width=\"400\">\n\nOnce you have your model you can plug it into the Viewer application (see\n[View The Space Simulation](#View-The-Space-Simulation) section for details),\nyou can find out how well (and quickly) it identifies the objects while flying\nthrough the scene. \n\n\n## Installation\nI have only tested in Ubuntu 16.04, but since it has only Python based\ndependencies, it should work on other platforms as well (please let you me know\nif this is true) .\n\n```bash\npip install ds2server\n```\n\n## Generate Training Data\n*DS2Server* ships with 100 training images for each of the ten cubes. Each\none was rendered from a random angle.\n\n```bash\nds2generate\n```\nThis will create a new folder `./dataset` with JPG images.\nThe source images (100 rendered images for each cube) are in `./dataset/plain`,\nwhereas `./dataset/aligned` will contain images like this.\n\n<img src=\"docs/img/aligned_cubes.jpg\" width=\"400\">\n\nThis image consists of 10x10 tiles. The cubes in each row all have the same\nnumber on them, but are oriented, placed, and scaled arbitrarily inside their\nrespective tile. This layout is (hopefully) useful to build and test a spacial\n\"cube\" detector.\n\n\n## Data Augmentation\n\nOne problem with that data set is how clean it is. For instance, they all have\na perfectly black background, each image contains exactly one cube, which is\nalways in the centre, and always the same distance away from the camera...\n\nAs a quick fix, the `ds2generate` script will also have created a\n`./dataset/augmented` folder. As the name suggests, it contains a set of\naugmented images, and was created with the\nexcellent [Augmentor](https://github.com/mdbloice/Augmentor) library. However,\nthe augmentation pipeline is still very much work in progress, and your mileage\nwith the augmented images may vary.\n\n\n## View the Space Simulation\nThis consists of two parts: a web server to server the scene images, and a Qt\napplication to display them.\n\nFirst, start the server with:\n```bash\nds2server\n```\n\nThen put the following code into a file and run it. Note that almost the entire\nfile is boilerplate for Qt.\n```python\nimport sys\nimport ds2server.viewer\nimport numpy as np\n\nimport PyQt5.QtGui as QtGui\nimport PyQt5.QtCore as QtCore\nimport PyQt5.QtWidgets as QtWidgets\n\n\n# Ignore for now.\nclass MyViewer(ds2server.viewer.ViewerWidget):\n    def classifyImage(self, img):\n        pass\n\n\n# Define a camera name and assign our custom widget to manage it.\ncameras = {'Cam1': MyViewer}\n\n# Qt boilerplate to start the application.\napp = QtWidgets.QApplication(sys.argv)\nwidget = ds2server.viewer.MainWindow(cameras, host='127.0.0.1', port=9095)\nwidget.show()\napp.exec_()\n```\n\nThis should produce a Qt application that \"flies\" you through a pre-rendered\nscene.\n\nThe only lines that are not boilerplate are the `MyViewer` widget (which does\nnothing right now), and the definition of a `camera` dictionary. That dictionary\nspecifies which camera will be controlled by which widget. In this particular\nexample, we just create a simple camera and use the default widget, which will\nmerely display the scene.\n\n\n## Plug Your ML Model Into The Simulation\nThe real fun is, of course, to use ML to find and identify all the cubes. To do\nso, overload the `classifyImage` method in the previous demo like so:\n\n```python\n# For convenience.\nQPen, QColor, QRectF = QtGui.QPen, QtGui.QColor, QtCore.QRectF\nDS2Text = ds2server.viewer.DS2Text\n\nclass MyViewer(ds2server.viewer.ViewerWidget):\n    def classifyImage(self, img):\n        # `img` is always a <height, width, 3> NumPy image.\n        assert img.dtype == np.uint8\n\n        # Pass the image to your ML model.\n        # myAwesomeClassifier(img)\n\n        # Define a red bounding box.\n        x, y, width, height = 0.4, 0.2, 0.4, 0.4\n        bbox = [QPen(QColor(255, 0, 0)), QRectF(x, y, width, height)]\n\n        # Define a green text label.\n        x, y = 0.2, 0.7\n        text = [QPen(QColor(0, 255, 0)), DS2Text(x, y, 'Found Something')]\n\n        # Install the overlays.\n        self.setMLOverlays([bbox, text])\n```\n\nThe `classifyImage` method will be called for each frame, and always receives\none RGB image as a NumPy array with type Uint8. Pass that image to your\nclassifier any way you like.\n\nThen, when you have found out what is where in the scene, you can add overlays\nvia the `setMLOverlays` method to highlight it. The arguments to that method is\na list of 2-tuples. The first element in each tuple must be a `QPen` instance,\nand it defines the colour and transparency. The second argument specifies what\nto draw. Currently, only `QRect` and `DS2Textures` elements are supported.\n\nWhen you start the application again, you should see an output like this.\n\nSingle Frame | Spaceflight\n:-------------------------:|:-------------------------:\n<img src=\"docs/img/viewer_box.jpg\" width=\"400\">|<img src=\"docs/img/animated.gif\" width=\"400\">\n\n\n# What Next\n\n## Build and Train ML Models\n... obviously, since this is the whole point of this project. If you want to\nshare your designs and ideas, please let me know.\n\n\n## Better Data Augmentation\nThe current training data is very forgiving since each number has a distinct\ncolour. Early experiments suggest that the models learn the colours, rather\nthan the digits, since the performance drops sharply when I convert the images\nto black/white first.\n\n## Live Rendering\nAll the images were created by\nthe [PyHorde](https://github.com/olitheolix/pyhorde) sister project. It wraps\nthe [Horde3D](http://www.horde3d.org/) engine and uses offline rendering to\nproduce the images. Eventually I would like to use it as an optional backend\nfor live rendering. In other words, instead of following a pre-rendered flight\npath, *you* control where to fly.\n\nThis will also provide a REST API to add and manipulate objects from the\nclient.\n\n\n# Feeback\nI would be happy to hear from anyone who uses it. Does it work for you? Is\nsomething missing? Which ML models have you built for it, and how well did they\ndo?",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/olitheolix/ds2server",
    "keywords": "ds2server",
    "license": "Apache Software License 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "ds2server",
    "platform": "",
    "project_url": "https://pypi.org/project/ds2server/",
    "release_url": "https://pypi.org/project/ds2server/0.3.1/",
    "requires_python": "",
    "summary": "Fun with Machine Learning and Space Ships",
    "version": "0.3.1"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c3888d14383a3afff445caa121aae6a8",
          "sha256": "ea9a78407e6a4ef86bbfeebf4323045280246023865be26e0a1b791b6135acfd"
        },
        "downloads": 0,
        "filename": "ds2server-0.1.0-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c3888d14383a3afff445caa121aae6a8",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 19388,
        "upload_time": "2017-06-12T02:41:28",
        "url": "https://files.pythonhosted.org/packages/cd/b2/bd00adb37c73255066d6e44d99b9c9ed952f293c09e728a494a6da4410a7/ds2server-0.1.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1687eadf772734f52717c487d3718bfd",
          "sha256": "ef9d2c716c702b314efe7f783816f6c71f0f082b69ed2cb838452d1fecc489f2"
        },
        "downloads": 0,
        "filename": "ds2server-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1687eadf772734f52717c487d3718bfd",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 1898011,
        "upload_time": "2017-06-12T02:41:19",
        "url": "https://files.pythonhosted.org/packages/55/14/e84b7e1d507ff9bcfc196ae13fb93cf66afe73f424032615a7092b127905/ds2server-0.1.0.tar.gz"
      }
    ],
    "0.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "0a06cae23bce256947273ed8e8c21ea0",
          "sha256": "753f23387fe1899a83e7035287e1f727651bb8412f81de673372600498abf405"
        },
        "downloads": 0,
        "filename": "ds2server-0.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "0a06cae23bce256947273ed8e8c21ea0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19707346,
        "upload_time": "2017-06-15T00:34:33",
        "url": "https://files.pythonhosted.org/packages/ca/6d/3ae7b4ea35ed841bc57f64a2c1e463937d9d0cd4cc5096229b028b293d64/ds2server-0.3.0.tar.gz"
      }
    ],
    "0.3.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7ee9eb44b5afff4ad67161c7b7272afa",
          "sha256": "9edd6c20e041d00b9eabd4f7a93b4fd2041665d14a932a63362402ca0a3ed120"
        },
        "downloads": 0,
        "filename": "ds2server-0.3.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7ee9eb44b5afff4ad67161c7b7272afa",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19810804,
        "upload_time": "2017-06-16T09:24:09",
        "url": "https://files.pythonhosted.org/packages/c7/8b/f872122082065b06719d4d96fe6d70fea82fda6710f2bb866b97e2221d4b/ds2server-0.3.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7ee9eb44b5afff4ad67161c7b7272afa",
        "sha256": "9edd6c20e041d00b9eabd4f7a93b4fd2041665d14a932a63362402ca0a3ed120"
      },
      "downloads": 0,
      "filename": "ds2server-0.3.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7ee9eb44b5afff4ad67161c7b7272afa",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 19810804,
      "upload_time": "2017-06-16T09:24:09",
      "url": "https://files.pythonhosted.org/packages/c7/8b/f872122082065b06719d4d96fe6d70fea82fda6710f2bb866b97e2221d4b/ds2server-0.3.1.tar.gz"
    }
  ]
}