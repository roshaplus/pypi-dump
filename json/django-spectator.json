{
  "info": {
    "author": "Phil Gyford",
    "author_email": "phil@gyford.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.11",
      "Framework :: Django :: 2.0",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: Dynamic Content"
    ],
    "description": "==================\n Django Spectator\n==================\n\n.. image:: https://travis-ci.org/philgyford/django-spectator.svg?branch=master\n  :target: https://travis-ci.org/philgyford/django-spectator?branch=master\n\n.. image:: https://coveralls.io/repos/github/philgyford/django-spectator/badge.svg?branch=master\n  :target: https://coveralls.io/github/philgyford/django-spectator?branch=master\n\nTwo Django apps:\n\n* One to track book and periodical reading, including start and end dates, authors.\n* One to track events attended (movie, plays, gigs, exhibitions, comedy, dance,\n  classical), including date, venue, and people/organisations involved.\n\nFor Django 1.11 or Django 2.0 running on Python 3.5 or 3.6.\n\nIt has URLs, views and templates to create a site displaying all the data, and\nDjango admin screens to add and edit them. The templates use `Bootstrap v4-beta <https://getbootstrap.com>`_.\n\nThere are also template tags for displaying data in your own templates (see\nbelow).\n\n\n************\nInstallation\n************\n\nInstall with pip::\n\n    pip install django-spectator\n\nAdd the apps to your project's ``INSTALLED_APPS`` in ``settings.py``::\n\n    INSTALLED_APPS = [\n        ...\n        'spectator.core',\n        'spectator.events',\n        'spectator.reading',\n    ]\n\nWhile ``spectator.core`` is required, you can omit either ``spectator.events``\nor ``spectator.reading`` if you only want to use one of them.\n\nRun migrations::\n\n    ./manage.py migrate\n\nAdd to your project's ``urls.py``::\n\n    urlpatterns = [\n        # ...\n\n        url(r'^spectator/', include('spectator.core.urls')),\n    ] \n\nYou can change the initial path (``r'^spectator/'``) to whatever suits you. e.g.\nuse ``r'^'`` to have Spectator's home page be the front page of your site.\n\nOptionally get a `Google Maps JavaScript API key <https://developers.google.com/maps/documentation/javascript/get-api-key>`_ and add it to your ``settings.py`` like this::\n\n    SPECTATOR_GOOGLE_MAPS_API_KEY = 'YOUR-API-KEY'\n\nThis will enable using a map in the Django Admin to set the location of Venues,\nand the displaying of Venues' maps in the public templates.\n\nThen, go to Django Admin to add your data.\n\n\n********\nOverview\n********\n\nThere are two main parts to Spectator: Reading and Events (movies, gigs, etc). They both share Creators.\n\nCreators\n========\n\nCreators are the authors of books, directors of movies, actors in plays, groups who perfom at gigs, etc.\n\nA Creator has a name and a ``kind``, of either \"individual\" (e.g. \"Anthony Sher\") or \"group\" (e.g. \"Royal Shakespeare Company\").\n\nA Creator is associated with books, movies, events, etc. through roles, which\ninclude an optional ``role_name`` such as \"Author\", \"Illustrator\", \"Director\",\n\"Playwright\", \"Company\", etc. The roles can be given an order so that the\ncreators of a thing will be listed in the appropriate order (such as the\ndirector before a movie's actors).\n\nSee ``spectator/models/core.py`` for these models.\n\nReading\n=======\n\nA Publication is a thing that's been read, and has a ``kind`` of either \"book\"\nor \"periodical\". A Publication can optionally be part of a PublicationSeries.\ne.g. a Publication \"Vol. 3 No. 7 September 2005\" could be part of the \"The\nBeliever\" PublicationSeries.\n\nA Publication can have zero or more Readings. A Reading can have\na ``start_date`` and ``end_date``. If the ``start_date`` is set but the\n``end_date`` isn't, the Publication is currently being read. When a Reading has\nbeen completed, and an ``end_date`` added, it can be marked as ``is_finished``\nor not. If not, it's because you gave up on the Publication before getting to\nthe end.\n\nBoth ``start_date`` and ``end_date`` indicates a specific day by default. If\nyou don't know the day, or the month, a granularity can be specified indicating\nwhether the reading started/ended sometime during the month or year.\n\nSee ``spectator/models/reading.py`` for these models.\n\nEvents\n======\n\nAn Event specifies a date on which you saw a thing at a particular Venue.\nA Venue has a name and, optionally, location details. Events can be different\nkinds, e.g. \"gig\", \"movie\", \"play\".\n\nWhile an Event is a thing at a place on a day, with some optional Creators,\nsome kinds of Events are slightly more complicated.\n\nGigs, Comedy, Exhibitions and Other \n-----------------------------------\n\nEvents of kind \"gig\", \"comedy\", \"exhibition\" and \"misc\" are the simplest. A\ndate when you went to a Venue to see one or more Creators. The Event can\noptionally have a title. \"Other\" is for events that don't fit into one of the\nother kinds.\n\nPlays\n-----\n\nAn Event of kind \"play\" can have one Play object (e.g. \"King Lear\") connected to\nit. A Play is created by (optionally) one or more Creators (e.g. \"William \nShakespeare (Playwright)\"). A Play can therefore have several Events (occasions\nwhen you saw that one play), with its own Creators (e.g. \"Anthony Sher \n(Actor)\").\n\nMovies\n------\n\nAn Event of kind \"movie\" can have one Movie object connected to it. A Movie is\ncreated by (optionally) one or more Creators. It can optionally have a year and\nan IMDb ID. A Movie can therefore have several Events (occasions when you saw\nthat one film). Although you could add Creators to the Event itself, that\nprobably doesn't make sense usually, unless, there was a post-screening\ninterview or something.\n\nClassical concert\n-----------------\n\nAn Event of kind \"concert\" is when one *or more* Classical Works were \nseen/heard. A Classical Work can have zero or more Creators (e.g. \"Wolfgang\nAmadeus Mozart (Composer)\"). The Event itself can also have zero or more\nCreators (e.g. \"Ian Page (Conductor)\").\n\nDance\n-----\n\nAn Event of kind \"dance\" is when one *or more* Dance Pieces were seen. A Dance\nPiece can have zero or more Creators (e.g. \"Pina Bausch (Choreographer)\"). The\nEvent itself can also have zero or more Creators (e.g. \"English National\nBallet\").\n\n\n*************\nTemplate tags\n*************\n\nEach app, `core`, `events` and `reading`, has some template tags.\n\nEvents template tags\n====================\n\nTo use any of these in a template, first::\n\n    {% load spectator_events %}\n\nRecent Events\n-------------\n\nTo get a QuerySet of Events that happened recently::\n\n    {% recent_events num=3 as events %}\n\n    {% for event in events %}\n        <p>\n            {{ event }}<br>\n            {{ event.venue.name }}\n        </p>\n    {% endfor %}\n\nIf ``num`` is not specified, 10 are returned by default.\n\nOr to display as a Boostrap card::\n\n    {% recent_events_card num=3 %}\n\nEvents on a day\n---------------\n\nTo get a QuerySet of Events that happened on a particular day, use\n``day_events``. If ``my_date`` is a python ``date`` object::\n\n    {% day_events date=my_date as events %}\n\nAnd display the results as in the above example.\n\nOr to display as a Bootstrap card::\n\n    {% day_events_card date=my_date %}\n\nYears of Events\n---------------\n\nTo get a QuerySet of the years in which Events happened::\n\n    {% events_years as years %}\n\n    {% for year in years %}\n        {{ year|date:\"Y\" }}<br>\n    {% endfor %}\n\nOr to display as a Bootstrap card, with each year linking to the\n``EventYearArchiveView``::\n\n    {% events_years_card current_year=year %}\n\nHere, ``year`` is a date object indicating a year which shouldn't be linked.\n\nReading template tags\n=====================\n\nTo use any of these in a template, first::\n\n    {% load spectator_reading %}\n\nIn-progress Publications\n------------------------\n\nTo get a QuerySet of Publications currently being read use\n``in_progress_publications``::\n\n    {% in_progress_publications as publications %}\n\n    {% for pub in publications %}\n        <p>{{ pub }}<br>\n        {% for role in pub.roles.all %}\n            {{ role.creator.name }}\n            {% if role.role_name %}({{ role.role_name }}){% endif %}\n            <br>\n        {% endfor %}\n        </p>\n    {% endfor %}\n\nOr to display as a Bootstrap card::\n\n    {% in_progress_publications_card %}\n\nPublications being read on a day\n--------------------------------\n\nTo get a QuerySet of Publications that were being read on a particular day use\n``day_publications``. If ``my_date`` is a python ``date`` object::\n\n    {% day_publications date=my_date as publications %}\n\nAnd display the results as in the above example.\n\nOr to display as a Bootstrap card::\n\n    {% day_publications_card date=my_date %}\n\nYears of reading\n----------------\n\nTo get a QuerySet of the years in which Publications were being read::\n\n    {% reading_years as years %}\n\n    {% for year in years %}\n        {{ year|date:\"Y\" }}<br>\n    {% endfor %}\n\nOr to display as a Bootstrap card, with each year linking to the\n``ReadingYearArchiveView``::\n\n    {% reading_years_card current_year=year %}\n\nHere, ``year`` is a date object indicating a year which shouldn't be linked.\n\n\n*****************\nLocal development\n*****************\n\n``devproject/`` is a basic Django project to use the app locally. Use it like::\n\n$ pip install -r devproject/requirements.txt\n$ python setup.py develop\n$ ./devproject/manage.py migrate\n$ ./devproject/manage.py runserver\n\nRun tests with tox. Install it with::\n\n$ pip install tox\n\nRun all tests in all environments like::\n\n$ tox\n\nTo run tests in only one environment, specify it. In this case, Python 3.6 and Django 2.0::\n\n$ tox -e py36-django20\n\nTo run a specific test, add its path after ``--``, eg::\n\n$ tox -e py36-django20 -- tests.core.test_models.CreatorTestCase.test_ordering\n\nRunning the tests in all environments will generate coverage output. There will also be an ``htmlcov/`` directory containing an HTML report. You can also generate these reports without running all the other tests::\n\n$ tox -e coverage\n\nMaking a new release\n====================\n\nSo I don't forget...\n\n1. Put new changes on ``master``.\n2. Update the ``__version__`` in ``spectator.__init__.py``.\n3. Update ``CHANGES.rst``.\n4. Do ``python setup.py tag``.\n5. Do ``python setup.py publish``.\n\n\nAdding a new event type\n=======================\n\nIf it's simple (like, Gigs, Comedy, etc.) and doesn't require extra models,\nthen:\n\n* In ``spectator.events.models.Event`` add it in ``KIND_CHOICES`` and ``KIND_SLUGS``.\n* Possibly add a special case for it in ``Event.get_kind_name_plural()``.\n* Add a simple factory for it in ``spectator.events.factories``.\n* In ``tests.events.test_models.EventTestCase``:\n    * Add it to:\n        * ``test_get_kind()``\n        * ``test_valid_kind_slugs()``\n        * ``test_kind_slug()``\n        * ``test_kind_name()``\n        * ``test_kind_name_plural()``\n        * ``test_get_kinds_data()``\n    * Add a ``test_absolute_url_*()`` test for this kind.\n\nIf it involves an extra model (like Movies and Plays do) then also:\n\n* Create the new model in ``spectator.events.models`` with a matching Role\n  model (like ``MovieRole``).\n* Associate the new model by ``ForeignKey`` to the ``Event`` model.\n* Add a special case for it in ``Event.get_absolute_url()``.\n* Add a special case for it in ``Event.__str__()``.\n* Add its Admin in ``spectator.events.admin``.\n* Add any validation needed to ``spectator.events.admin.EventAdminForm``.\n* Add new URLs for the model's List and Detail views in\n  ``spectator.events.urls`` (and add tests).\n* Add the new List and Detail views in ``spectator.events.views``.\n* In ``spectator.events.views.EventDetailView.get_queryset()`` add a section to\n  adjust the queryset for this model.\n* In ``spectator.events.views.EventDetailView.get_queryset()`` add include the\n  event kind in the ``if`` clause in ``get_object()``.\n* Add templates in ``spectator/events/templates/events/`` for its List and\n  Detail views.\n* In ``spectator/core/templates/core/creator_detail.html`` add a section to\n  list the new models for a Creator.\n\nIf it involves several extra models (like Dance and Concert events do) then\nit's similar to above but absolute URLs are different; see the code for\nexamples of those.\n\n* Instead of adding the new modely by ``ForeignKey``, it's\n  a ``ManyToManyField``.\n* It doesn't have a special case in ``Event.get_absolute_url()``.\n* Add URLs and Views for the List and Detail views for the new model\n  (e.g. DancePiece).\n* Add the ``get_absolute_url()`` method for that new model.\n* Add the display of its works (e.g. DancePieces) in ``spectator/events/templates/events/event_detail.html``.\n\n\n*******\nContact\n*******\n\n* Phil Gyford\n* phil@gyford.com\n* @philgyford on Twitter\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/philgyford/django-spectator",
    "keywords": "",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-spectator",
    "platform": "",
    "project_url": "https://pypi.org/project/django-spectator/",
    "release_url": "https://pypi.org/project/django-spectator/4.1.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A Django app to track book reading, movie viewing, gig going, play watching, etc.",
    "version": "4.1.0"
  },
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4a08e80ff0594aeed1cfd9dbd6cce30d",
          "sha256": "ba705bfc97bca42a3df79e85b27c65a302ea394d58b17e561c7942b055c28b6a"
        },
        "downloads": -1,
        "filename": "django-spectator-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4a08e80ff0594aeed1cfd9dbd6cce30d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12951,
        "upload_time": "2017-03-28T14:28:01",
        "url": "https://files.pythonhosted.org/packages/d9/39/7347a80bbad02ac8a23641d4fd874ac0428c4a7bfe797f67f477461d45ed/django-spectator-1.0.1.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c33d568f81bbf970de1c10fbe333f146",
          "sha256": "55dc739fde310b0de5c3e4cfe9e753765c1f6b9e9b3f156a0a48d9d9a0ccfae5"
        },
        "downloads": -1,
        "filename": "django-spectator-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "c33d568f81bbf970de1c10fbe333f146",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 7140,
        "upload_time": "2017-04-17T13:05:09",
        "url": "https://files.pythonhosted.org/packages/9b/6a/d47543cf4060150059e0fc2a68f779a67f40a6a4cfc2b9c3039eb8f1c2f6/django-spectator-2.0.0.tar.gz"
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c6dec7cdc583dd5e515750d166dad0e1",
          "sha256": "dc694cc0072b0a9660fd55caabdaa0b1ba1ce0595b541005ecb735f247dbe19d"
        },
        "downloads": -1,
        "filename": "django-spectator-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c6dec7cdc583dd5e515750d166dad0e1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11237,
        "upload_time": "2017-04-17T15:50:12",
        "url": "https://files.pythonhosted.org/packages/89/51/397d404c9ce038b8954efe4615d3827d011c11158a1c1aeccc05b33f5c68/django-spectator-2.0.1.tar.gz"
      }
    ],
    "2.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "fa2785ce90be28372cc819c08d2f6d8d",
          "sha256": "4a4dc574aaf960a1be8c49719a735717f0106d9b863baea446f855e0913457f2"
        },
        "downloads": -1,
        "filename": "django-spectator-2.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "fa2785ce90be28372cc819c08d2f6d8d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 106373,
        "upload_time": "2017-04-17T15:52:49",
        "url": "https://files.pythonhosted.org/packages/ac/df/35f8828a74c7fdf429d63507beee18cc970a716c972b3a9bde6a0c40d0d4/django-spectator-2.0.2.tar.gz"
      }
    ],
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2450bfa1463bcd4550cda3397b54dd9d",
          "sha256": "44a4a58b45803c093bcd89594595ef1b7af4f0ea6e31329f863d15e4f47d9fe8"
        },
        "downloads": -1,
        "filename": "django-spectator-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "2450bfa1463bcd4550cda3397b54dd9d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 105364,
        "upload_time": "2017-04-17T17:44:17",
        "url": "https://files.pythonhosted.org/packages/d9/ef/d0ac7698b1a812f9976eda74cc7424713c7f8ce1c412421fbf768812aad7/django-spectator-3.0.0.tar.gz"
      }
    ],
    "3.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f08faac1c2fcc0ab3b451e384756e108",
          "sha256": "69948fbce6b8e81768b26a2d51a5de18b743430aecee94d79526f8f06a7f3955"
        },
        "downloads": -1,
        "filename": "django-spectator-3.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "f08faac1c2fcc0ab3b451e384756e108",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 106071,
        "upload_time": "2017-04-17T20:24:15",
        "url": "https://files.pythonhosted.org/packages/fa/25/cad74d942956bcbc8d337a9c0d8a72b6d0c9b5f3a9e9cd68fca4a2bb9741/django-spectator-3.1.0.tar.gz"
      }
    ],
    "3.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "06295e5a164c98c883c2d9c16627d73a",
          "sha256": "f95d3568a99a6145f44dc66d1577c14ba248536daebfb052afa94910c419253b"
        },
        "downloads": -1,
        "filename": "django-spectator-3.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "06295e5a164c98c883c2d9c16627d73a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 155115,
        "upload_time": "2017-08-22T14:56:53",
        "url": "https://files.pythonhosted.org/packages/6e/2e/8561d1e5ddccdc807ad611670963fdf59780f95d0a7c77e1f3ec00945b9d/django-spectator-3.2.1.tar.gz"
      }
    ],
    "3.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "473e0aa5187e00b5a759746e574ab16f",
          "sha256": "832ab4e4beeb015761e34bfb29e09375ebd718edd69e20843d1b49a267f4f209"
        },
        "downloads": -1,
        "filename": "django-spectator-3.2.2.tar.gz",
        "has_sig": false,
        "md5_digest": "473e0aa5187e00b5a759746e574ab16f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 155102,
        "upload_time": "2017-08-22T14:58:32",
        "url": "https://files.pythonhosted.org/packages/92/15/d07ddbb385b1e91b1d5a91d99ba688d8b15f1fed558e41560fb9ec7519fc/django-spectator-3.2.2.tar.gz"
      }
    ],
    "3.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8596a882f994528aef692ce3d6685c39",
          "sha256": "ee6548932f19d623f41135211bbe38571d12f11fee8b1eed6f00bfb13197ed60"
        },
        "downloads": -1,
        "filename": "django-spectator-3.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "8596a882f994528aef692ce3d6685c39",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 155172,
        "upload_time": "2017-10-01T10:35:42",
        "url": "https://files.pythonhosted.org/packages/82/1c/b3a256c4df7bbf577eae54eacd03a282b80475cd61e2f8d68617344360ba/django-spectator-3.2.3.tar.gz"
      }
    ],
    "3.3.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4e0048fff125fab638b2839c0771fd39",
          "sha256": "8a1a0d602b5176d125df10df4c402f6804384a47c62aecfaf73e13a8ab914e1c"
        },
        "downloads": -1,
        "filename": "django-spectator-3.3.0.tar.gz",
        "has_sig": false,
        "md5_digest": "4e0048fff125fab638b2839c0771fd39",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 162266,
        "upload_time": "2017-11-01T18:39:20",
        "url": "https://files.pythonhosted.org/packages/bf/39/98ec3a3f3640e50c3c99b96cf5ab4729c6533408f7457ebfc9df53ed09ed/django-spectator-3.3.0.tar.gz"
      }
    ],
    "4.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "07136bfef63a3e4128b170fb118edd67",
          "sha256": "63018f5ad12ff5abee1ad1938dccb791fcf274f1dd3dcba51f79f9b032f5603b"
        },
        "downloads": -1,
        "filename": "django-spectator-4.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "07136bfef63a3e4128b170fb118edd67",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 161946,
        "upload_time": "2017-12-14T14:55:04",
        "url": "https://files.pythonhosted.org/packages/53/62/bad0513704cbc40f04cb45e2036691380803b865f117cfbe37ff936c057a/django-spectator-4.0.0.tar.gz"
      }
    ],
    "4.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b3d2e65e97fae8b2fb254fb31b86f5c5",
          "sha256": "121fe7a7ad6502f4c9b09a0501b69e10f125ea92063c164bed23506ed8851012"
        },
        "downloads": -1,
        "filename": "django-spectator-4.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b3d2e65e97fae8b2fb254fb31b86f5c5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 162086,
        "upload_time": "2017-12-14T15:15:16",
        "url": "https://files.pythonhosted.org/packages/b4/30/65230e1633264031e0563a5d9b2b95df7785153d49cedd18a527bc088065/django-spectator-4.0.1.tar.gz"
      }
    ],
    "4.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "9f9f23166e783305f239d55bbaeb50be",
          "sha256": "c1499c2faaf2370de837a6014ade21c9b44b4eb337e7efdd5baa73c725f3b67b"
        },
        "downloads": -1,
        "filename": "django-spectator-4.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "9f9f23166e783305f239d55bbaeb50be",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 169755,
        "upload_time": "2017-12-30T19:01:51",
        "url": "https://files.pythonhosted.org/packages/06/c6/47ba0b5fc6ca81dfa028d1881404da605199427ac918438036d0d0b08e79/django-spectator-4.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "9f9f23166e783305f239d55bbaeb50be",
        "sha256": "c1499c2faaf2370de837a6014ade21c9b44b4eb337e7efdd5baa73c725f3b67b"
      },
      "downloads": -1,
      "filename": "django-spectator-4.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "9f9f23166e783305f239d55bbaeb50be",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 169755,
      "upload_time": "2017-12-30T19:01:51",
      "url": "https://files.pythonhosted.org/packages/06/c6/47ba0b5fc6ca81dfa028d1881404da605199427ac918438036d0d0b08e79/django-spectator-4.1.0.tar.gz"
    }
  ]
}