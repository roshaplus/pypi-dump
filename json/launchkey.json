{
  "info": {
    "author": "iovation",
    "author_email": "",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Topic :: Internet :: WWW/HTTP",
      "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
    ],
    "description": "Python SDK for LaunchKey API\n============================\n\n.. image:: https://travis-ci.org/iovation/launchkey-python.svg?branch=master\n    :target: https://travis-ci.org/iovation/launchkey-python\n\n.. _LaunchKey: https://launchkey.com\n\n.. _docs: https://docs.launchkey.com/developer/web-desktop/sdk/python/sdk-v3\n\nFor use in implementing LaunchKey_.\n\n\nDescription\n-----------\n\nUse to more easily interact with iovation's LaunchKey API.\n\nA more in-depth look at this SDK can be found at the official docs_.\n\nInstallation\n------------\n\n\n.. code-block:: bash\n\n    $ easy_install launchkey\n\nor\n\n.. code-block:: bash\n\n    $ pip install launchkey\n\nUsage\n-----\n\nUsing LaunchKey Clients\n***********************\n\nThe LaunchKey SDK is broken into credential based factories with access to functionality based clients.\n\n**Factories**\n\nFactories are based on the credentials supplied. The Organization Factory uses Organization credentials, the Directory\nFactory uses Directory credentials, and the Service Factory uses Service credentials. Each factory provides clients\nwhich are accessible to the factory. The availability is based on the hierarchy of the entities themselves. Below is a\nmatrix of available services for each factory.\n\n+--------------+---------------------+------------------+----------------+\n| Factory      | Organization Client | Directory Client | Service Client |\n+==============+=====================+==================+================+\n| Organization |         Yes         |       Yes        |      Yes       |\n+--------------+---------------------+------------------+----------------+\n| Directory    |         No          |       Yes        |      Yes       |\n+--------------+---------------------+------------------+----------------+\n| Service      |         No          |       No         |      Yes       |\n+--------------+---------------------+------------------+----------------+\n\n**Using individual clients**\n\n.. code-block:: python\n\n    from launchkey.factories import ServiceFactory, DirectoryFactory\n\n    directory_id = \"37d98bb9-ac71-44b7-9ac0-5d75e31e627a\"\n    directory_private_key = open('directory_private_key.key').read()\n    service_id = \"9ecc57e0-fb0f-4971-ba12-399b630158b0\"\n    service_private_key = open('service_private_key.key').read()\n\n    directory_factory = DirectoryFactory(directory_id, directory_private_key)\n    directory_client = directory_factory.make_directory_client()\n\n    service_factory = ServiceFactory(service_id, service_private_key)\n    service_client = service_factory.make_service_client()\n\n**Using a hierarchical client**\n\n.. code-block:: python\n\n    from launchkey.factories import OrganizationFactory\n\n    organization_id = \"bff1602d-a7b3-4dbe-875e-218c197e9ea6\"\n    organization_private_key = open('organization_private_key.key').read()\n    directory_id = \"37d98bb9-ac71-44b7-9ac0-5d75e31e627a\"\n    service_id = \"9ecc57e0-fb0f-4971-ba12-399b630158b0\"\n    user = \"my_unique_internal_identifier\"\n\n    organization_factory = OrganizationFactory(organization_id, organization_private_key)\n    directory_client = organization_factory.make_directory_client(directory_id)\n    service_client = organization_factory.make_service_client(service_id)\n\nLinking And Managing Users\n**************************\n\nIn order to link a user you will need to start the linking process then display the qrcode to them, give them the code,\nor both.\n\n.. code-block:: python\n\n    link_data = directory_client.link_device(user)\n    linking_code = link_data.code\n    qr_url = link_data.qrcode\n\nIf desired you can retrieve the user's devices and unlink then directly from the SDK\n\n.. code-block:: python\n\n    devices = directory_client.get_linked_devices(user)\n    directory_client.unlink_device(user, devices[0].id)\n\nYou can also end all of a user's sessions\n\n.. code-block:: python\n\n    directory_client.end_all_service_sessions(user)\n\nLogging A User In\n*****************\n\nCreate an auth request to initiated the login process\n\n.. code-block:: python\n\n    auth_request_id = service_client.authorize(user)\n\nUsing Dynamic Policies\n\n.. code-block:: python\n\n    from launchkey.entities.service import AuthPolicy\n    # Require 2 factors and don't allow any jailbroken or rooted devices\n    policy = AuthPolicy(any=2, jailbreak_protection=True)\n    # Also make it so the user can only log in from the Portland area\n    policy.add_geofence(latitude=45.48805749706375, longitude=-122.70492553710936, radius=27500)\n    auth_request_id = service_client.authorize(user, policy=policy)\n\n\nCheck whether a response has been received and check whether it has been authorized\n\n.. code-block:: python\n\n    from launchkey.exceptions import RequestTimedOut\n    from time import sleep\n    response = None\n    try:\n        while response is None:\n            response = service_client.get_authorization_response(auth_request_id)\n            if response is not None:\n                if response.authorized is True:\n                    # User accepted the auth, now create a session\n                    service_client.session_start(user, auth_request_id)\n                else:\n                    # User denied the auth request\n            else:\n                sleep(1)\n    except RequestTimedOut:\n        # The user did not respond to the request in the timeout period (5 minutes)\n\nWhen a user logs out\n\n.. code-block:: python\n\n    service_client.session_end(user)\n\nDealing with Webhooks\n*********************\n\nWebhooks can be used in opposition to polling. This means we will hit your app on either an auth response or\nlogout request.\n\nYou will use the same handle_webhook method for both login and logout.\n\n**Note that request.headers must be a dictionary like object.**\n\n.. code-block:: python\n\n    from flask import request\n    from launchkey.entities.service import AuthorizationResponse, SessionEndRequest\n    package = service_client.handle_webhook(request.data, request.headers)\n    if isinstance(package, AuthorizationResponse):\n        if package.authorized is True:\n            # User accepted the auth, now create a session\n            service_client.session_start(user, auth_request_id)\n        else:\n            # User denied the auth\n    elif isinstance(package, SessionEndRequest):\n        # The package will have the user hash, so use it to log the user out based on however you are handling it\n        logout_user_from_my_app(package.service_user_hash)\n\n\nRunning Tests\n-------------\n\nMac/Linux:\n\n    python setup.py test\n\nWindows:\n\n    setup.py test\n\nContributing\n------------\n\n1. Fork it\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n\nCHANGELOG for LaunchKey Python SDK\n==================================\n\n3.1.1\n-----\n\n* Added patch method for transports\n* Support for many new endpoints added involving Organization, Directory, and Service management\n* Moved all entity objects into their own submodule\n* Added UUID validation for factory entity IDs\n\n3.0.2\n-----\n\n* Improved 401 error handling\n* Bug fix for SessionEndRequest object\n* Service PINs bug fix\n\n3.0.1\n-----\n\n* Typo and manifest fixes\n* Added Unauthorized status code error handler\n* Nose version lock for test requirements\n\n3.0.0\n-----\n\n* Complete revamp for new V3 LaunchKey API\n\n2.0.1\n-----\n\n* Make tests run under Python 3.5+\n* Make PEP-8 compliant (deprecated some non-PEP-8 compliant functions)\n\n1.3.0\n-----\n\n* Python 3 compatibility.\n* Ability to send policies in auth request.\n\n1.2.7\n-----\n\n* Update manifest for new CHANGES file\n\n1.2.6\n-----\n\n* Fix for bad build regarding CHANGES.md\n\n1.2.5\n-----\n\n* Remove references to LK Identifier as the API no longer returns it.\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://www.iovation.com/",
    "keywords": "launchkey security authentication iovation multifactor mfa 2fa biometric",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "launchkey",
    "platform": "",
    "project_url": "https://pypi.org/project/launchkey/",
    "release_url": "https://pypi.org/project/launchkey/3.1.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "LaunchKey Python SDK",
    "version": "3.1.1"
  },
  "releases": {
    "3.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e1246e353052c4df26e33e50699c6e86",
          "sha256": "5b1fc3b373475c7d51c30e78817eaae0c0163294cb2879b840c2dbdfc40a6d3a"
        },
        "downloads": -1,
        "filename": "launchkey-3.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "e1246e353052c4df26e33e50699c6e86",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16167,
        "upload_time": "2017-03-20T23:44:10",
        "url": "https://files.pythonhosted.org/packages/15/1b/efb6bd0add1398053c8b65d18aeb1a271818830d08e9182000e20b083db0/launchkey-3.0.0.tar.gz"
      }
    ],
    "3.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6c016540e840d93d854d6b65fc318309",
          "sha256": "4a8fd371708bdfb8309b815254cc4d9cbabe922df35dd1ecdd8c2823885b4abf"
        },
        "downloads": -1,
        "filename": "launchkey-3.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6c016540e840d93d854d6b65fc318309",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16299,
        "upload_time": "2017-04-10T21:01:47",
        "url": "https://files.pythonhosted.org/packages/0a/15/976002d4df299024cdfcc2c0df541e626ce822ee84270620f11381442324/launchkey-3.0.1.tar.gz"
      }
    ],
    "3.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "22389e186a168b6c869053758ea938a8",
          "sha256": "f06929666cdcab661c9f53078766dff14013a63dfe59c5cf25d1c14805f03b85"
        },
        "downloads": -1,
        "filename": "launchkey-3.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "22389e186a168b6c869053758ea938a8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16355,
        "upload_time": "2017-05-09T21:04:36",
        "url": "https://files.pythonhosted.org/packages/9c/3e/a9eec47e0513b1423a8303e524ceb67dcb1ea52733dc13f9135f1ef6097f/launchkey-3.0.2.tar.gz"
      }
    ],
    "3.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f81f2ac863982ab8f4bb412127198682",
          "sha256": "a31185d90253dc144c28913943acb830b86ba7d4f0fd6b82c4896eca6034b1dd"
        },
        "downloads": -1,
        "filename": "launchkey-3.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "f81f2ac863982ab8f4bb412127198682",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 23864,
        "upload_time": "2017-11-08T19:33:13",
        "url": "https://files.pythonhosted.org/packages/de/b6/0e90f3a04e663affe1056a47a5da25ee154515e8f868726ec09d60bd8af2/launchkey-3.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "f81f2ac863982ab8f4bb412127198682",
        "sha256": "a31185d90253dc144c28913943acb830b86ba7d4f0fd6b82c4896eca6034b1dd"
      },
      "downloads": -1,
      "filename": "launchkey-3.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "f81f2ac863982ab8f4bb412127198682",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 23864,
      "upload_time": "2017-11-08T19:33:13",
      "url": "https://files.pythonhosted.org/packages/de/b6/0e90f3a04e663affe1056a47a5da25ee154515e8f868726ec09d60bd8af2/launchkey-3.1.1.tar.gz"
    }
  ]
}