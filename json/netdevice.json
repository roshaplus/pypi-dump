{
  "info": {
    "author": "Yongping Guo",
    "author_email": "guoyoooping@163.com",
    "bugtrack_url": "",
    "classifiers": [],
    "description": "netdevice\n*********\n\nPython modules to execut command on remote network device.\n\nTo install easily::\n\n    pip install -U netdevice\n\nOr to install by source code::\n\n    netdevice-x.x.tar.gz\n        pexpect-2.3.tar.gz\n        xmltodict-0.10.2.tar.gz\n        lxml-3.8.0.tar.gz\n            Python-2.7.12.tgz\n            libxml2-2.9.4.tar.gz\n\n.. attention::\n\n    lxml-3.8.0.tar.gz has some bug if you don't install to the default path,\n    you must set the LD_LIBRARY_PATH enviroment varible in such case. please\n    refer to the detail: python\u7b2c\u4e09\u65b9\u5e93lxml\u6e90\u7801\u5b89\u88c5&&\u4f7f\u7528\u7b14\u8bb0,\n    http://blog.csdn.net/slvher/article/details/25829973\n\n1. Introduction\n===============\n\nnetdevice is a python module that allow you run command on remote network\ndevices just like locally.\n\nFor example, define a network devices and show the interface on it, it's\nespecially useful for network test automation:\n\n.. code-block:: python\n\n    from netdevice import cisco, junos, linux\n    pc = linux.LinuxDevice(hostname = \"ent-vm01\",\n            host = \"10.208.172.12\",\n            username = \"dev\",\n            password = \"1234\")\n    print pc.cmd(\"ifconfig eth1\")\n\nUse help command show the documents::\n\n    import from netdevice import cisco, junos, linux\n    help(cisco)\n    help(junos)\n    help(linux)\n\n2. Feature\n==========\n\n    1) Python Based: Plenty of feature\n    2) Environmentally friendly: can run anywhere where there is python and connect to the devices.\n    3) Easy to Learn: Need know little about Python\n    4) Easy to write: One case only have several to dozens of lines.\n    5) Faster: run the testbed from local and is much faster.\n    6) object oriented: Flexible and Easy to extend\n\n3. Test architecture based on netdevice\n===========================================\n::\n\n    +---------------------------------+------------+----------------------+\n    |                                 |            | case1                |\n    |                                 |            +----------------------+\n    |  One case                       | Test Suite | ...                  |\n    |                                 |            +----------------------+\n    |                                 |            | caseN                |\n    +---------------------------------+------------+----------------------+\n    |  netdevice                                                          |\n    |                                                                     |\n    |  PC1                  DUT                  DUT                      |\n    |  +---------------+    +---------------+    +---------------+        |\n    |  | Linux devices |    | Junos devices |    | Cisco devices |  ...   |\n    |  +---------------+    +---------------+    +---------------+        |\n    |                       | Linux devices |    | Linux devices |  ...   |\n    |                       +---------------+    +---------------+        |\n    +---------------------------------------------------------------------+\n\n                     test Architecture based on netdevice\n \n4. Object description\n=====================\n\n4.1 LinuxDevice\n---------------\n\n4.1.1 Constructor\n+++++++++++++++++\n\nLinuxDevice is a common abstraction for linux like devices. There are two ways\nto define a LinuxDevice object and 4 ways to set the attribute:\n\n1) Use the global configuration, it's global and will change all the default\nvalue.\n\n.. code-block:: python\n\n    linux.default[\"username\"] = \"name1\"\n    linux.default[\"password\"] = \"1234\"\n    linux.default[\"log_file\"] = \"tmp.log\"\n    client = junos.JunosDevice(hostname = \"ent-vm01\")\n    server = junos.JunosDevice(hostname = \"ent-vm02\")\n    print client.cmd(\"ifconfig\")\n    print server.cmd(\"ifconfig\")\n\n2) Use the dictionary parameter @device, for examples:\n\n.. code-block:: python\n\n    ent_vm01 =  {\n        \"hostname\": \"ent-vm01\",\n        \"host\": \"10.208.172.12\",\n        \"username\": \"root\",\n        \"password\": \"5678\",\n        \"prompt\": \"root@ent-vm01 ~\",\n    }\n    client = linux.LinuxDevice(ent_vm01)\n    print client.cmd(\"ifconfig\")\n\n3)  Use the parameter list to pass the parameter:\n\n.. code-block:: python\n\n    client = linux.LinuxDevice(hostname = \"ent-vm01\",\n        host = \"10.208.172.12\",\n        username = \"root\",\n        password = \"5678\",\n        prompt\": \"root@ent-vm01 ~\")\n    print client.cmd(\"ifconfig\")\n\n4) Use the set method to set the attribute of the object, for example:\n\n.. code-block:: python\n\n    client = junos.JunosDevice(hostname = \"ent-vm01\")\n    client[\"prompt\"] = \"root@ent-vm01 ~\"\n    client['log_color'] = 'brown'\n    client['interfaces'] = [ { 'name': 'eth1', 'ip': '1.1.1.2/24'} ]\n\nYou can combines the above ways to set certain attribute. If certain attribute\nis set by multi means, the latter has higher priority, for example:\n\n.. code-block:: python\n\n    linux.default[\"username\"] = \"name1\"\n    linux.default[\"password\"] = \"1234\"\n    linux.default[\"log_file\"] = \"tmp.log\"\n    ent_vm01 =  {\n        \"hostname\": \"ent-vm01\",\n        \"host\": \"10.208.172.12\",\n        \"username\": \"root\",\n        \"password\": \"5678\",\n    }\n    client = linux.LinuxDevice(ent_vm01, log_color = \"green\")\n    client[\"prompt\"] = \"root@ent-vm01 tmp\"\n\n4.1.2 Attributes\n++++++++++++++++\n\nLinuxDevice operate based on its attributes. There are two kinds of attribute:\npre-defined and use-defined:\n\n1) Pre-defined attributes:\n\nLinuxDevice pre-define some attributes and if you don't provide them, the\ndefault attributes will be used. Pre-defined is used to create/connect to the\ndevices and has some pre-defined type, for examples, Attributes \"interfaces\"\nis a list of dictionary, LinuxDevice  use those attributes to init and\nconfigure the device's interfaces. for examples:\n\n.. code-block:: python\n\n    client[\"interfaces\"] = [\n        {\n            \"ip\": \"2.2.2.1/24\",\n            \"ip6\": \"2002::2/64\",\n            \"name\": \"fe-0/0/2.0\",\n            \"zone\": \"trust\"\n        },\n        {\n            \"ip\": \"3.3.3.1/24\",\n            \"ip6\": \"2003::1/64\",\n            \"name\": \"fe-0/0/6.0\",\n            \"zone\": \"untrust\"\n        }\n    ]\n\nTo know the default attribute, just construct a empty object and it will show\nthe default attribute in the log::\n\n        obj = linux.LinuxDevice()\n\nOr you can refer to the following default definition. Besides the attributes\nlisted below, you can also define whatever attributes you want.\n\n.. code-block:: python\n\n    default = {\n        # mandtory, if not given, it will fail to construct a device\n        \"hostname\":      \"\",     # A name of the devices, used for log and\n                                 # shell prompt;\n        \"name\":          \"\",     # Alias of hostname\n        \"host\":          \"\",     # A ip address or hostname that can\n                                 # connect, if not set, use the hostname;\n        \"username\":      \"\",     # Usename to login;\n        \"password\":      \"\",     # Password to login;\n        \"root_password\": \"\",     # Root password, optional for linux devices,\n                                 # mandtory for Junos devices;\n\n        # Optional, if not given, use the default\n        \"prompt\":     None,      # A shell prompt, if not given, use\n                                 # username@name, it's not correct, it's better\n                                 # destinate;\n        \"mode\":       \"ssh\",     # login method, default is ssh, support ssh\n                                 # and telnet now;\n        \"interfaces\": [\n            #{ \"ip\": \"1.1.1.1/24\", \"ip6\": \"2001::1/64\", \"name\": \"reth0\", \"zone\": \"trust\" },\n            ],                   # A list interface the device will configure;\n        \"preconfig\":  [],        # A list of cmd/configuration the device will\n                                 # configure before test;\n        \"postconfig\": [],        # A list of cmd/configuration the device will\n                                 # configure after test;\n        \"noconfig\":   False,     # If ture, will not configure the interface\n                                 # and preconfig before test;\n        \"log_file\":   None,      # log files, If not given, stdout will be\n                                 # choosed.\n        \"log_level\":  LOG_NOTICE,# log level, 0-7, the higher it's, the more log\n                                 # recorded.\n        \"log_color\":  None,      # log color, if not set will choose randomly;\n                                 # Use self.test_color() to see what each color\n                                 # looks like\n        \"log_time\":   False,     # record the log with local time;\n\n        # User can also define Whatever attributes you want.\n        # ...\n    }\n\n\n2) User-defined attributes:\n\nBesides the pre-defined attributes, user can define their own attributes,\nsince those kinds of attributes are used for user only, they can be in any\ntype, for examples:\n\n    client = junos.JunosDevice(hostname = \"ent-vm01\", location = \"Beijing\")\n    client[\"season\"] = \"summer\"\n    print client[\"season\"], client[\"city\"]\n\n4.1.3 Constant\n++++++++++++++\n\nLinuxDevice has the following variable:\n\ncolor support the following name::\n\n    'black', 'dark_gray', 'light_gray', 'blue', 'light_blue', 'green',\n    'light_green', 'cyan', 'light_cyan', 'red', 'light_red', 'purple',\n    'light_purple', 'brown', 'yellow', 'white', 'default_color', 'red_bold'\n\ntrace level support the following name::\n\n    LOG_EMERG = 0   # not used\n    LOG_ALERT = 1   # not used\n    LOG_CRIT = 2    # not used\n    LOG_ERR = 3     # Error message, maybe encounter error.\n    LOG_WARNING = 4 # + Warning message\n    LOG_NOTICE = 5  # + command executed\n    LOG_INFO = 6    # + command and output, it's the default level\n    LOG_DEBUG = 7   # + every sendline()/pexpect() return value, for debug\n    LOG_VERBOSE = 8 # + pexpect log, verbose and hard to read.\n\n4.1.4 Methods\n+++++++++++++\n\nLinuxDevice support the folowing method:\n\n    __init__(self, device = None, \\*\\*kwargs):\n\n        Constructor, create a pexpect session, configure the preconfig and\n        initialize some variables.\n\n    __del__(self):\n\n        Deconstructor, free allocated resources and restore some configuration.\n\n    cmd(self, cmd, expect = None,  \\*\\*kwargs):\n\n        This is the most import method provided by LinuxDevice: execute the\n        command on remote host and return the execution result. If the @expect\n        is found, it succeed and return immediately, or it will wait for at\n        most @timeout seconds. Whether it succeed or failed, the execution log\n        would be returned for further analysis.\n\n        If the command is non-interactive, the result is returned directly,\n        for example::\n\n            print client.cmd('ifconfig')\n\n        If the command @cmd is interactive, you may input some prompt and\n        command before you get the final result, for example::\n\n            client.cmd('ftp 1.1.1.2', expect = \"Name\")\n            client.cmd('dev', expect = \"Password\")\n            client.cmd('1234', expect = \"ftp\")\n            print client.cmd('ls', expect = \"ftp\")\n            client.cmd('bye')\n\n        @ expect: the prompt the execute is expected to include. If not\n        provided, the self[\"prompt\"] is used. For some applications, i.e ftp,\n        it will not use the system's prompt so you must give the expected\n        prompt. for example::\n\n            client.cmd('ftp 1.1.1.2', expect = \"ftp>\")\n\n        @ timeout: How many seconds to wait  before the timeout, default value\n        is 10 seconds.\n\n        [CAUTION] should increase the timeout for those who consume long time,\n        or it will failed.\n\n        @kwargs: Other options list that might be used later;\n\n    log (self, message, level = LOG_NOTICE):\n\n        record the log to file self[\"log_file\"] with the color\n        self[\"log_color\"], with the local time if self['log_time'] is True,\n        the log looks like::\n\n            [ regazara ][2017-05-16 16:02:07]: ssh login succeed.\n\n        @ message: the log to be write.\n        @ level: log level\n\n    dumps(self):\n\n        Dump all its attributes.\n\n    get_file(self, filename, localname = '.', timeout = -1):\n\n        Get file from remote host, only support scp now, will support other\n        methods later.\n\n        @filename: file to get from the host.\n\n        @localname: save name after download\n\n        @timeout: How long to wait for the files to be downloaded. If the file\n        is very big, set it to a big value or it will fail.\n\n    put_file(self, filename, remotedir, timeout = -1):\n\n        Put local file to remote host, only support scp now, will support\n        other methods later.\n\n        @filename: file to put from the local. local means the host where you\n        execute this scriopt.\n\n        @remotedir: save name after upload.\n\n        @timeout: How long to wait for the files to be uploaded. If the file\n                  is very big, set it to a big value or it will fail.\n\n    def test_color (self):\n\n        print the color name in the color.\n\n    __getitem__(self, name):\n\n        Get certain attribute, for example::\n\n            print self[\"name\"]\n\n    __setitem__(self, name, value):\n\n        Set certain attribute, for example::\n\n            self[\"color\"] = \"red\"\n\n4.2 JunosDevice\n---------------\n\n4.2.1 Constructor\n+++++++++++++++++\n\nJunosDevice is a common abstraction for Juniper network devices. It derives\nfrom LinuxDevice so it has every method of LinuxDevice, exception some of them\nare overrided. You use the similar way to define a JunosDevice, for example:\n\n.. code-block:: python\n\n    tangshan =  {\n        \"hostname\": \"tangshan\",\n        \"username\": \"dev\",\n        \"password\": \"1234\"\n        \"root_password\": \"5678\",\n        \"host\": \"10.208.128.19\",\n        \"interfaces\": [\n            {\n                \"ip\": \"1.1.1.2/24\",\n                \"ip6\": \"2001::2/64\",\n                \"name\": \"fe-0/0/2.0\",\n                \"zone\": \"untrust\"\n            },\n            {\n                \"ip\": \"4.4.4.1/24\",\n                \"ip6\": \"2004::1/64\",\n                \"name\": \"fe-0/0/6.0\",\n                \"zone\": \"trust\"\n            }\n        ],\n    }\n    dut = junos.JunosDevice(tangshan)\n    print dut[\"username\"]\n    print dut.cli(\"show security flow session\")\n\n4.1.2 Methods\n+++++++++++++\n\nBesides all the methods derived from LinuxDevice, JunosDevice support the\nfolowing extra methods:\n\n    __init__(self, device = None, \\*\\*kwargs):\n\n        Constructor, create a pexpect session, configure the preconfig and initialize some variables.\n\n    __del__(self):\n\n        Deconstructor, free allocated resources and restore some configuration.\n\n    def cmd(self, cmd, mode = \"shell\",  \\*\\*kwargs):\n    \n        Similar LinuxDevice.cmd, but add some more mode:\n\n        @ mode == \"shell\": equal LinuxDevice.cmd\n\n        @ mode == \"cli\": execute cli command in Junos, equal cli()\n\n        @ mode == \"configure\": execute configure command, equal configure()\n\n        @ mode == \"vty\": execute vty command, equal vty()\n\n    cli(self, cmd, parse = None, timeout = 30, \\*\\*kwargs):\n\n        Execute a cli command and return the execution result.\n\n        @parse: Normally, the result will be plain text or xml text. But if\n        the @parse is given, the result will be parsed and a list of\n        dictionary for @parse will be returned. It's useful to parse the xml\n        result. For example the following command return a list of session in\n        dictionary::\n        \n            sessions = dut.cli('show security flow session',\n                               parse = \"flow-session\")\n            print sessions[0]['session-identifier']\n\n        Whild the following command will return the plain text result::\n\n            output = dut.cli('show security flow session')\n            print output\n\n        @timeout: time to wait for the execute command return. default is 5\n        seconds\n\n    configure(self, cmd, \\*\\*kwargs):\n\n        Execute a configure command and return the result. For example::\n\n            dut.configure('set security flow traceoptions flag all')\n            dut.configure('set security traceoptions file flow.log size 50m')\n            dut.configure('set security traceoptions level verbose')\n            dut.configure('set security traceoptions flag all')\n            dut.configure('commit')\n\n    vty(self, cmd, \\*\\*kwargs):\n\n        Execute a vty command and return the result.\n\n        @timeout: time to wait for the execute command return. default is 5\n                 seconds\n\n        @tnp_addr: tnp address to login.\n\n        For example::\n\n            print dut.vty(\"show usp flow config\", tnp_addr = \"node0.fpc0.pic1\")\n\n    print_session (self, session):\n        \n        Convert a or lists of session in dictionary to plain text. print it as\n        show of \"show security flow session\".\n\n        @session: it could be a session or a list of session.\n\n    install_image (self, image):\n        \n        Install a image and reboot the dut, wait until it is up with all\n        SPU/SPC.\n        \n        @local: install a local image, first upload the image to /var/tmp/ on\n        the DUT and then install it.\n\n        @remote: install a image on the DUT\n\n4.3 Utilitis\n------------\n\nIn linux module, the following utilities are difined:\n\n    def sleep_with_bar (timeout, total = 50, char = '>', description = \"sleep\"):\n\n        Sleep with progress bar. something like that:\n\n        sleep 7/10[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>               ][71%]\n\n        Examples:\n\n            linux.sleep_with_bar(600)\n\n5. An example\n=============\n\nIn this example, we login the client linux device and then ftp the server.\nCheck if there is session generated on the Juniper SRX firewall. Then tear\ndown the connection:\n\n.. code-block:: python\n\n    #!/usr/bin/env python\n    from netdevice import cisco, junos, linux\n    import time\n\n    linux.default[\"username\"] = \"root\"\n    linux.default[\"password\"] = \"5678\"\n    linux.default[\"root_password\"] = \"5678\"\n    linux.default[\"log_file\"] = \"test_%d.log\" %(time.time())\n\n    regazara = {\n            \"hostname\": \"regazara\",\n            \"host\": \"regazara.englab.juniper.net\",\n            \"username\": \"dev\",\n            \"password\": \"1234\",\n            \"interfaces\": [\n                {\"name\": \"ge-7/1/0.0\", \"ip\": \"1.1.1.1/24\", \"ip6\": \"2001::1/64\", \"zone\": \"trust\" },\n                {\"name\": \"ge-7/1/1.0\", \"ip\": \"2.2.2.1/24\", \"ip6\": \"2002::1/64\", \"zone\": \"untrust\" }],\n            #\"noconfig\":  True,\n            }\n\n    ent_vm01 = {\n            \"hostname\": \"ent-vm01\",\n            \"host\": \"ent-vm01.englab.juniper.net\",\n            \"prompt\": \"root@ent-vm01 ~\",\n            \"interfaces\": [\n                { 'name': 'eth1', 'ip': '1.1.1.2/24', 'ip6': '2001::2/64'} ],\n            \"preconfig\": [\n                \"ip route add 2.2.2.0/24 via 1.1.1.1 dev eth1\",\n                \"ip -6 route add 2002::/64 via 2001::1 dev eth1\"],\n            }\n\n    ent_vm02 = {\n            \"hostname\": \"ent-vm02\",\n            \"host\": \"ent-vm02.englab.juniper.net\",\n            \"prompt\": \"root@ent-vm02 ~\",\n            \"interfaces\": [\n                { 'name': 'eth1', 'ip': '2.2.2.2/24', 'ip6': '2002::2/64'} ],\n            \"preconfig\": [\n                \"ip route add 1.1.1.0/24 via 2.2.2.1 dev eth1\",\n                \"ip -6 route add 2001::/64 via 2002::1 dev eth1\"],\n            }\n\n    dut = junos.JunosDevice(regazara)\n    client = linux.LinuxDevice(ent_vm01)\n    server = linux.LinuxDevice(ent_vm02)\n    print dut.cli(\"show version\")\n\n    # Execute test step\n    #client.cmd('ping %s -c 1' %(self.server[\"interfaces\"][0][\"ip\"].split('/')[0]))\n    client.cmd('ftp %s' %(server[\"interfaces\"][0][\"ip\"].split('/')[0]), expect = \"Name\")\n    client.cmd(server[\"username\"], expect = \"Password\")\n    client.cmd(server[\"password\"], expect = \"ftp\")\n    client.cmd('pwd', expect = \"ftp\")\n\n    # Get session in dictionary and tear down the session.\n    sessions = dut.cli('show security flow session application ftp', parse = \"flow-session\")\n    client.cmd('bye')\n\n    #dut.print_session(sessions)\n    if sessions and sessions[0][\"flow-information\"][0]['pkt-cnt'] > 0 and \\\n            sessions[0][\"flow-information\"][1]['pkt-cnt'] > 0:\n        print dut.print_session(sessions)\n        print \"Session found, pass!\"\n    else:\n        print \"Failed to find the session\"\n\n    # Get the trace for debug\n    dut.get_file(\"/var/log/flow.log\")\n\n6. Q/A\n======\n\n1) Why command wait for long time to return?\n\nNetdevice call pexpect to send the command and get the result. If the prompt\nis not set properly, it will timeout and wait for the @timeout to return.\n\n2) Why some command alwyas return timeout?\n\nFor time consue command i.g. scp, ftp get command, please set the @timeout\nproperly to avoid the command timeout.\n\nPlease make sure there is no command timeout since the output of the last\ncommand will messup the result of the next command.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/guoyoooping/networkdevice",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "netdevice",
    "platform": "",
    "project_url": "https://pypi.org/project/netdevice/",
    "release_url": "https://pypi.org/project/netdevice/0.19/",
    "requires_python": "",
    "summary": "Python modules to execute command on remote network device based on pexpect.",
    "version": "0.19"
  },
  "releases": {
    "0.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d71de3d72292d432863b610580be8d77",
          "sha256": "5278923a0ed0c7ecfb59443f9e50bfa8b5059775730a8acd3311561b8b742b5b"
        },
        "downloads": 0,
        "filename": "netdevice-0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "d71de3d72292d432863b610580be8d77",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13484,
        "upload_time": "2017-05-19T12:20:09",
        "url": "https://files.pythonhosted.org/packages/70/3b/7a8580850fbc2717a280f88b5131454865079a1d6318cfcad458b018bd24/netdevice-0.10.tar.gz"
      }
    ],
    "0.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a316f9180ba03f38e5b8444c570fc2a5",
          "sha256": "beccbbb1cf0fab0ff5912b214253e9c38792d789d6fd79a90ce4bb123f935965"
        },
        "downloads": 0,
        "filename": "netdevice-0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "a316f9180ba03f38e5b8444c570fc2a5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13514,
        "upload_time": "2017-05-19T12:27:02",
        "url": "https://files.pythonhosted.org/packages/60/b9/b69c7e8ec774c471050966545d70ed77ae0e37a9e53c66efe88e2eab4ab4/netdevice-0.11.tar.gz"
      }
    ],
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "18ad9af0dda778e56ccbb5f82b23bc7e",
          "sha256": "7fbfc22c432de7e4aba21579e6093503839217e756184d0f3c4cd439801c09a1"
        },
        "downloads": 0,
        "filename": "netdevice-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "18ad9af0dda778e56ccbb5f82b23bc7e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15146,
        "upload_time": "2017-05-27T08:16:58",
        "url": "https://files.pythonhosted.org/packages/32/04/9c697c378e2d350f9f2a53af1641b5be5242841622f45e7f7808767ca1e7/netdevice-0.12.tar.gz"
      }
    ],
    "0.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ab9251e16c2cbf92ee5bc4aa1bceeebf",
          "sha256": "fccf82cedaddff7493ceb0db3145e2949bd1b6c1345df7a2d6eda9a7c3ae634f"
        },
        "downloads": 0,
        "filename": "netdevice-0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "ab9251e16c2cbf92ee5bc4aa1bceeebf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15091,
        "upload_time": "2017-05-27T08:48:54",
        "url": "https://files.pythonhosted.org/packages/4a/25/93b8533f769ae60ec621cb49e7bc1511f54404af8ab0bba7ea7b14aa66c4/netdevice-0.13.tar.gz"
      }
    ],
    "0.14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "291bf99f1b67f6038ba58e52c2dc0d5e",
          "sha256": "ed3e6a6273da93bd32e1da84923f16d708e2a3b830c39e866381d7fc0fb963ab"
        },
        "downloads": 0,
        "filename": "netdevice-0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "291bf99f1b67f6038ba58e52c2dc0d5e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15110,
        "upload_time": "2017-05-31T08:00:36",
        "url": "https://files.pythonhosted.org/packages/4b/51/3de8f3f9cf9f8e2991546add67cec79737f1d2b70305f5ab4d39c65dcf42/netdevice-0.14.tar.gz"
      }
    ],
    "0.15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e6ab9b0e0560f9db272125259fc04d7b",
          "sha256": "35ab8ab3520849b15e3052f784b5868170df16d7e26295a153d2490a783a1c6e"
        },
        "downloads": 0,
        "filename": "netdevice-0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "e6ab9b0e0560f9db272125259fc04d7b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15098,
        "upload_time": "2017-05-31T10:59:24",
        "url": "https://files.pythonhosted.org/packages/80/b1/6c28552e9e7c8f7a132703b4ca5358ab3e2b6a9db4b016c813b675f9cf22/netdevice-0.15.tar.gz"
      }
    ],
    "0.16": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a10ea01266cafb2841a61954cf38c0c5",
          "sha256": "c4c1f045c35d0265ed9f84db182eeab67c02ec6197a7ea3848627550f9edf948"
        },
        "downloads": 0,
        "filename": "netdevice-0.16.tar.gz",
        "has_sig": false,
        "md5_digest": "a10ea01266cafb2841a61954cf38c0c5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15259,
        "upload_time": "2017-06-02T07:54:53",
        "url": "https://files.pythonhosted.org/packages/17/e0/44171bda684b6ca91179c48b5fc5477297a53c15881516310171e0d9111b/netdevice-0.16.tar.gz"
      }
    ],
    "0.17": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a2ece34395ef66cc7eac986d3294167f",
          "sha256": "0df6ec419dc8c8024833737a01c56b4398f4dcb7258dff1cc8acdadb16eaa47c"
        },
        "downloads": 0,
        "filename": "netdevice-0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "a2ece34395ef66cc7eac986d3294167f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15891,
        "upload_time": "2017-06-09T06:50:20",
        "url": "https://files.pythonhosted.org/packages/ac/33/e3d6676766157678baacf1d15bf6b9491e8160e06d90f672b0da9e647e1d/netdevice-0.17.tar.gz"
      }
    ],
    "0.18": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8fd41b226a11e0beaf7a34f47a2834bb",
          "sha256": "18d5dd49a2d171f236b7247c32cecafad85e6e0c37613d7b4e38bc8bffce63ca"
        },
        "downloads": 0,
        "filename": "netdevice-0.18.tar.gz",
        "has_sig": false,
        "md5_digest": "8fd41b226a11e0beaf7a34f47a2834bb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17112,
        "upload_time": "2017-06-13T06:32:25",
        "url": "https://files.pythonhosted.org/packages/32/5e/a8734fecf29518e845e807c9ed9bba4d9ca889c94e8da19dc7208cb5b65c/netdevice-0.18.tar.gz"
      }
    ],
    "0.19": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6f4a8c5f1741417c87aac17ffe1083c7",
          "sha256": "d0c4291d7f60a831df250f59ed286f41932a8dfb91649aeaa2e058ffd3a86c84"
        },
        "downloads": 0,
        "filename": "netdevice-0.19.tar.gz",
        "has_sig": false,
        "md5_digest": "6f4a8c5f1741417c87aac17ffe1083c7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17356,
        "upload_time": "2017-06-15T11:11:15",
        "url": "https://files.pythonhosted.org/packages/2a/15/836ee49f09a2f763d1d57e8acac511e4b79917cc424f5f31032d50504657/netdevice-0.19.tar.gz"
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "70e85d399ec3696ef63a846daec604f7",
          "sha256": "1208a34157632c18478e9ebb257c06ead7fcfa026c8c81933c20bec76c85bcef"
        },
        "downloads": 0,
        "filename": "netdevice-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "70e85d399ec3696ef63a846daec604f7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13776,
        "upload_time": "2017-05-09T02:27:24",
        "url": "https://files.pythonhosted.org/packages/f0/8e/978a5fe150912468fcff794cbf8f9f65dd1319ff7f7a607a72e884bb4b43/netdevice-0.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6f4a8c5f1741417c87aac17ffe1083c7",
        "sha256": "d0c4291d7f60a831df250f59ed286f41932a8dfb91649aeaa2e058ffd3a86c84"
      },
      "downloads": 0,
      "filename": "netdevice-0.19.tar.gz",
      "has_sig": false,
      "md5_digest": "6f4a8c5f1741417c87aac17ffe1083c7",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 17356,
      "upload_time": "2017-06-15T11:11:15",
      "url": "https://files.pythonhosted.org/packages/2a/15/836ee49f09a2f763d1d57e8acac511e4b79917cc424f5f31032d50504657/netdevice-0.19.tar.gz"
    }
  ]
}