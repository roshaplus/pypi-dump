{
  "info": {
    "author": "Yongping Guo",
    "author_email": "guoyoooping@163.com",
    "bugtrack_url": "",
    "classifiers": [],
    "description": "netdevice\n*********\n\nPython modules to execut command on remote network device.\n\nTo install easily::\n\n    pip install -U netdevice\n\nOr to install by source code::\n\n    netdevice-x.x.tar.gz\n        pexpect-2.3.tar.gz\n        xmltodict-0.10.2.tar.gz\n        lxml-3.8.0.tar.gz\n            Python-2.7.12.tgz\n            libxml2-2.9.4.tar.gz\n\n.. attention::\n\n    lxml-3.8.0.tar.gz has some bug if you don't install to the default path,\n    you must set the LD_LIBRARY_PATH enviroment varible in such case. please\n    refer to the detail: python\u7b2c\u4e09\u65b9\u5e93lxml\u6e90\u7801\u5b89\u88c5&&\u4f7f\u7528\u7b14\u8bb0,\n    http://blog.csdn.net/slvher/article/details/25829973\n\n1. Introduction\n===============\n\nnetdevice is a python module that allow you run command on remote network\ndevices just like locally. It's especially useful for network test automation:\n\nFor example, define a network devices and show the interface on it:\n\n.. code-block:: python\n\n    from netdevice import cisco, junos, linux\n    pc = linux.LinuxDevice(username = \"dev\", password = \"1234\", host = \"10.208.172.12\")\n    print pc.cmd(\"ifconfig eth1\")\n\nUse help command show the documents::\n\n    import from netdevice import cisco, junos, linux\n    help(cisco)\n    help(junos)\n    help(linux)\n\n2. Feature\n==========\n\n    1) Python Based: Plenty of features\n    2) Environmentally friendly: can run anywhere where there is python and connect to the devices.\n    3) Easy to Learn: Need know little about Python\n    4) Easy to write: One case only have several to dozens of lines.\n    5) Faster: run the testbed from local and is much faster.\n    6) object oriented: Flexible and Easy to extend\n\n3. Test architecture based on netdevice\n===========================================\n::\n\n    +---------------------------------+------------+----------------------+\n    |                                 |            | case1                |\n    |                                 |            +----------------------+\n    |  One case                       | Test Suite | ...                  |\n    |                                 |            +----------------------+\n    |                                 |            | caseN                |\n    +---------------------------------+------------+----------------------+\n    |  netdevice                                                          |\n    |                                                                     |\n    |  PC1                  DUT                  DUT                      |\n    |  +---------------+    +---------------+    +---------------+        |\n    |  | Linux devices |    | Junos devices |    | Cisco devices |  ...   |\n    |  +---------------+    +---------------+    +---------------+        |\n    |                       | Linux devices |    | Linux devices |  ...   |\n    |                       +---------------+    +---------------+        |\n    +---------------------------------------------------------------------+\n\n                     test Architecture based on netdevice\n \n4. Object overview\n==================\n\n4.1 LinuxDevice\n---------------\n\n4.1.1 Constructor\n+++++++++++++++++\n\nLinuxDevice is a common abstraction for linux like devices. By describing the\nnecessary attributes such as username, password, host, etc, you can login the\ndevices and execute some commands, and get the execution staus and the output\nas well.\n\nIt' flexible to define a LinuxDevice object.\n\n1) Use the parameter name and value to describe the device, for example:\n\n.. code-block:: python\n\n    client = linux.LinuxDevice(username = \"root\", password = \"1234\",\n        host = \"alg-vm11\")\n    server = linux.LinuxDevice(username = \"root\", password = \"1234\",\n        host = \"alg-vm12\", scheme = \"telnet\", port = \"7012\")\n    client.cmd(\"ifconfig\")\n    server.cmd(\"ifconfig\")\n\nLinuxDevice auto login the device since the autologin attribtes is True by\ndefault. you can set it as False if you want call login() explicitly. For\nexample:\n\n.. code-block:: python\n\n    client = linux.LinuxDevice(username = \"root\", password = \"1234\",\n        host = \"alg-vm11\", autologin = False)\n    client.login()\n    client.cmd(\"ifconfig\")\n\n2) Use the standard url description, that's the default way and you can pass\nthe url without parameter name:\n\n.. code-block:: python\n\n    linux.default[\"username\"] = \"name1\"\n    linux.default[\"password\"] = \"1234\"\n\n    client = junos.JunosDevice(url = \"ssh://root:5678@10.208.172.12:22\")\n    server = junos.JunosDevice(\"telnet://root:1122@10.208.172.45:7012\")\n    print client.cmd(\"ifconfig\")\n    print server.cmd(\"pwd\")\n\n3) Use the global configuration, it will change all the default value. It is\nuseful for devices with similar configuration:\n\n.. code-block:: python\n\n    linux.default[\"username\"] = \"name1\"\n    linux.default[\"password\"] = \"1234\"\n    client = junos.JunosDevice(host = \"10.208.172.12\")\n    server = junos.JunosDevice(host = \"10.208.172.45\")\n    print client.cmd(\"ifconfig\")\n    print server.cmd(\"ifconfig\")\n\n4) Use the set method to set the attribute of the object and then login. Since\nthe \"autologin\" attributes is True by default, you must set it as false at\nfirst or it will try to login with the username/password/host parameters. for\nexample:\n\n.. code-block:: python\n\n    client = junos.JunosDevice(autologin = False)\n    client['username'] = 'root'\n    client['password'] = '5678'\n    client['host'] = '10.208.172.12'\n    client['interfaces'] = [ { 'name': 'eth1', 'ip': '1.1.1.2/24'} ]\n    client.login()\n    print client.cmd(\"ifconfig\")\n\n5) Use the dictionary to describe the device, it's very useful for test script\nand test lib. for examples:\n\n.. code-block:: python\n\n    ent_vm01 =  {\n        \"name\": \"ent-vm01\",\n        \"host\": \"10.208.172.12\",\n        \"username\": \"root\",\n        \"password\": \"5678\",\n        \"port\": 22,\n    }\n    client = linux.LinuxDevice(**ent_vm01)\n    print client.cmd(\"ifconfig\")\n\nOf course you can combines the above ways to set the attribute. If certain\nattribute is set by multi means, please pay attention to the priority,\nnormally the priority is from high to low is as below:\n\n    set attributes\n    \"url =\" parameter\n    parameters list = dictionary as input parameters\n    url without \"url = \"\n    global configuration\n\nFor example:\n\n.. code-block:: python\n\n    linux.default[\"username\"] = \"name1\"\n    linux.default[\"password\"] = \"1234\"\n    linux.default[\"autologin\"] = False\n    client = linux.LinuxDevice(\"telnet://root:1122@10.208.172.45:7012\",\n        username = \"root\", password = \"1234\", host = \"alg-vm12\",\n        url = \"ssh://root:5678@10.208.172.12:22\",\n        scheme = \"telnet\", port = \"7012\")\n    client['host'] = '10.208.172.12'\n    client.login()\n\n4.1.2 Attributes\n++++++++++++++++\n\nLinuxDevice operate based on its attributes. User input those attributes and\ncan use them after that. Some attributes are pre-defined and the LinuxDevices\nwill use them when login, log, configuration and so on. use can change those\nattribtes. Other attrubutes are defined totally by users and user define how\nto use them.\n\n1) Pre-defined attributes:\n\nI list the following pre-define attributes and their default value and the\nmeaning of them.\n\n.. code-block:: python\n\n    default = {\n        # mandtory, if not given, it will fail to construct a device\n        \"scheme\":     \"ssh\",     # login method, default is ssh, support ssh\n                                 # and telnet now;\n        \"username\":      None,   # Usename to login;\n        \"host\":          None,   # A ip address or hostname that can connect\n         \n        # Optional, if not given, use the default\n        \"password\":      None,   # Password to login, could be omitted if use\n                                 # public key;\n        \"root_password\": None,   # Root password is used since some configuration\n                                 # need root privillage. If not provided, some\n                                 # configurationa or command would fail since\n                                 # privilage.\n        \"url\":       None,       # url to connect the server, use url insteading\n                                 # scheme/username/passowrd/host/port\n        \"name\":       None,      # name of the devices, only used for log. if not\n                                 # set, the first part of hostname is used.\n        \"autologin\":  True,      # If ture, will login the devices immediately.\n        \"interfaces\": [\n            #{\"name\": \"ge-7/1/0.0\", \"ip\": \"1.1.1.1/24\", \"ip6\": \"2001::1/64\", \"zone\": \"trust\" },\n            #{\"name\": \"ge-7/1/1.0\", \"ip\": \"2.2.2.1/24\", \"ip6\": \"2002::1/64\", \"zone\": \"untrust\" },\n            ],                   # A list of interfaces the device use; Will\n                                 # configure the interface onto the devices if\n                                 # autoconfig is True\n        \"preconfig\":  [],        # A list of cmd/configuration the device will\n                                 # configure before test;\n        \"postconfig\": [],        # A list of cmd/configuration the device will\n                                 # configure after test;\n        \"autoconfig\": False,     # If ture, will not configure the interface\n                                 # and preconfig automatically.\n                                  \n        # log related\n        \"log_file\":   None,      # log files, If not given, trace would only showed\n                                 # on stdout.\n        \"log_level\":  LOG_INFO,  # log level, 0-7, the higher it's, the more log\n                                 # recorded.\n        \"log_color\":  None,      # log color, if not set will choose randomly;\n                                 # Use self.test_color() to see what each color\n                                 # looks like\n        \"log_time\":   True,      # record the log with local time;\n\n        # User can also define Whatever attributes you want.\n        # ...\n    }\n\n2) User-defined attributes:\n\nBesides the pre-defined attributes, user can define their own attributes,\nsince those kinds of attributes are used for user only, they can be in any\ntype, for examples:\n\n.. code-block:: python\n\n    client = linux.LinuxDevice(\"telnet://root:1122@10.208.172.45:7012\",\n        city = \"Beijing\")\n    client[\"season\"] = \"summer\"\n    print client[\"season\"], client[\"city\"]\n\n4.1.3 Methods\n+++++++++++++\n\nLinuxDevice support the folowing method:\n\n    def __init__(self, server = None, \\*\\*kwargs):\n\n        Constructor, create a pexpect session, configure the preconfig and\n        initialize some variables. Refer part `4.1.1 Constructor`_ to see how\n        to construct a LinuxDevice object.\n\n    __del__(self):\n\n        Deconstructor, free allocated resources and restore some configuration.\n\n    def login(self, terminal_type = 'ansi', login_timeout = 10):\n\n        Connect the object with the constructor attribute.\n\n        The defualt attribute \"autologin\" is True, so normally it will be auto\n        called. Set attribute \"autologin\" as False and you must call it\n        explictly.\n\n    def relogin(self):\n\n        Kill the current session and relogin.\n\n    def cmd(self, cmd, expect = None, timeout = 20, control = False,\n            format = \"output\", command_leading = \"$ \",\n            command_color = \"no_color\", command_bg_color = \"no_color\",\n            \\*\\*kwargs):\n\n        Execute a command provided by @cmd on remote Linuxdevice and return the\n        execution result, If the @expect is found, it succeed and return\n        immediately, or it will wait for at most @timeout seconds. The return\n        result will be desginated by @format:\n        \n        @ expect: the prompt the execute is expected to include. If not\n                  provided, the self.prompt is used. For some applications,\n                  i.e ftp, it will not use the system's prompt so you must give\n                  the expected prompt.\n\n        @ timeout: Hong long to wait before it's thinked as timeout, if it\n                   timeout a \"CTRL + C\" will be trriggered, so please set the\n                   proper timeout carefully;\n\n        @ control: If it is True, send a control character to the child such as\n                   Ctrl-C or Ctrl-D. For example, to send a Ctrl-G (ASCII 7):\n\n            self.cmd('g', control = True)\n\n        @ format: If it's \"output\", the execute output of the command will be\n        returned, whether it succeed or timeout. \n\n        If it's \"status\", the execute status will be return, if return and the\n        @expect is found, it will return True, or it return False. \n        \n        If it's \"both\", the tuple (status, output) will be return and you can\n        check both of them.\n\n        @ command_leading: Which leading chars to add before command in the log.\n\n        @ command_color: Which color to show the command in the log.\n\n        @ command_bg_color: Which background color to show the command in the log.\n\n        @ output_color: Which color to show the output in the log.\n\n        @ output_bg_color: Which background color to show the output in the log.\n\n        [CAUTION]: please increase the timeout value if the command is\n        time-consuming, or it will cause failure.\n\n    def log (self, message, level = LOG_NOTICE, leading = None, color =\n    \"no_color\", bg_color = \"no_color\"):\n\n        record the log to file self[\"log_file\"] with the color\n        self[\"log_color\"], with the local time if self['log_time'] is True,\n        the log looks like::\n\n            [ regazara ][2017-05-16 16:02:07]: ssh login succeed.\n\n        @ message: The log text.\n\n        @ level: The log level of the text. Will not show if it's large than\n        the self[\"log_level\"].\n\n        @ color: The log color of the text.\n\n        @ bg_color: The log background color of the text.\n\n    dumps(self):\n\n        Dump all its attributes.\n\n    get_file(self, filename, localname = '.', timeout = -1):\n\n        Get file from remote host, only support scp now, will support other\n        methods later.\n\n        @filename: file to get from the host.\n\n        @localname: save name after download\n\n        @timeout: How long to wait for the files to be downloaded. If the file\n        is very big, set it to a big value or it will fail.\n\n    put_file(self, filename, remotedir, timeout = -1):\n\n        Put local file to remote host, only support scp now, will support\n        other methods later.\n\n        @filename: file to put from the local. local means the host where you\n        execute this scriopt.\n\n        @remotedir: save name after upload.\n\n        @timeout: How long to wait for the files to be uploaded. If the file\n                  is very big, set it to a big value or it will fail.\n\n    def test_color (self):\n\n        print the color name in the color.\n\n    __getitem__(self, name):\n\n        Get certain attribute, for example::\n\n            print self[\"name\"]\n\n    __setitem__(self, name, value):\n\n        Set certain attribute, for example::\n\n            self[\"color\"] = \"red\"\n\n4.2 JunosDevice\n---------------\n\n4.2.1 Constructor\n+++++++++++++++++\n\nJunosDevice is a common abstraction for Juniper network devices. It derives\nfrom LinuxDevice so it has every method of LinuxDevice, except some of them\nare overrided. Please use the similar way to define a JunosDevice, for\nexample:\n\n.. code-block:: python\n\n    tangshan =  {\n        \"hostname\": \"tangshan\",\n        \"username\": \"dev\",\n        \"password\": \"1234\"\n        \"root_password\": \"5678\",\n        \"host\": \"10.208.128.19\",\n        \"interfaces\": [\n            {\n                \"ip\": \"1.1.1.2/24\",\n                \"ip6\": \"2001::2/64\",\n                \"name\": \"fe-0/0/2.0\",\n                \"zone\": \"untrust\"\n            },\n            {\n                \"ip\": \"4.4.4.1/24\",\n                \"ip6\": \"2004::1/64\",\n                \"name\": \"fe-0/0/6.0\",\n                \"zone\": \"trust\"\n            }\n        ],\n    }\n    dut = junos.JunosDevice(tangshan)\n    print dut[\"username\"]\n    print dut.cli(\"show security flow session\")\n\n4.1.2 Methods\n+++++++++++++\n\nBesides all the methods derived from LinuxDevice, JunosDevice support the\nfolowing extra methods:\n\n    def cmd (self, cmd, mode = \"shell\",  \\*\\*kwargs):\n    \n        JunosDevice override the cmd() method, it has the following meaning:\n\n        @ mode == \"shell\": equal LinuxDevice.cmd\n\n        @ mode == \"cli\": execute cli command in Junos, equal cli()\n\n        @ mode == \"configure\": execute configure command, equal configure()\n\n        @ mode == \"vty\": execute vty command, equal vty()\n\n        @parse: Normally, the result will be plain text or xml text. But if\n        the @parse is given, the result will be parsed and a list of\n        dictionary for @parse will be returned. It's useful to parse the xml\n        result. For example the following command return a list of session in\n        dictionary::\n        \n            # The seesions is in dictionary format:\n            sessions = dut.cmd('show security flow session',\n                                parse = \"flow-session\", mode = \"cli\")\n            print sessions[0]['session-identifier']\n\n        @timeout: time to wait for the execute command return. default is 30\n        seconds\n\n        @tnp_addr: tnp address to login. For example::\n\n            print dut.vty(\"show usp flow config\",\n                          mode = \"vty\", tnp_addr = \"node0.fpc0.pic1\")\n\n    cli (self, cmd, parse = None, timeout = 30, \\*\\*kwargs):\n\n        equal cmd(..., mode = \"cli\")\n\n    configure(self, cmd, \\*\\*kwargs):\n\n        equal cmd(..., mode = \"configure\"), For example.\n\n        For example, Execute a configure command::\n\n            dut.configure('set security flow traceoptions flag all')\n            dut.configure('set security traceoptions file flow.log size 50m')\n            dut.configure('set security traceoptions level verbose')\n            dut.configure('set security traceoptions flag all')\n            dut.configure('commit')\n\n    vty(self, cmd, \\*\\*kwargs):\n\n        equal cmd(..., mode = \"vty\")\n\n    print_session (self, session):\n        \n        Convert a or lists of session in dictionary to plain text. print it as\n        show of \"show security flow session\".\n\n        @session: it could be a session or a list of session.\n\n    install_image (self, image):\n        \n        Install a image and reboot the dut, wait until it is up with all\n        SPU/SPC.\n        \n        @local: install a local image, first upload the image to /var/tmp/ on\n        the DUT and then install it.\n\n        @remote: install a image on the DUT\n\n4.3 Utilitis\n------------\n\nIn linux module, the following utilities are difined:\n\n    def sleep_with_bar (timeout, total = 50, char = '>', description = \"sleep\"):\n\n        Sleep with progress bar. something like that:\n\n        sleep 7/10[>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>               ][71%]\n\n        Examples:\n\n            linux.sleep_with_bar(600)\n\n    def url_parse (url, scheme = \"ssh\", username = None, password = None,\n            host = None, port = None, path = None):\n\n        urlparse.urlparse() is not correct and not what I want, so rewrite it.\n\n5. An example\n=============\n\nIn this example, we login the client linux device and then ftp the server.\nCheck if there is session generated on the Juniper SRX firewall. Then tear\ndown the connection:\n\n.. code-block:: python\n\n    #!/usr/bin/env python\n    from netdevice import cisco, junos, linux\n\n    if __name__ == '__main__':\n        dut = junos.JunosDevice(\"ssh://regress:1234@regazara.englab.juniper.net\",\n                root_password = \"5678\")\n        client = linux.LinuxDevice(username = \"root\", password = \"5678\",\n                host = \"ent-vm01.englab.juniper.net\",\n                interfaces = [ { 'name': 'eth1', 'ip': '1.1.1.2/24', 'ip6': '2001::2/64'} ])\n        server = linux.LinuxDevice(username = \"root\", password = \"5678\",\n                host = \"ent-vm02.englab.juniper.net\",\n                interfaces = [ { 'name': 'eth1', 'ip': '2.2.2.2/24', 'ip6': '2002::2/64'} ])\n\n        client.cmd(\"ip route add 2.2.2.0/24 via 1.1.1.1 dev eth1\")\n        server.cmd(\"ip route add 1.1.1.0/24 via 2.2.2.1 dev eth1\")\n        dut.cli(\"clear security flow session application ftp\")\n\n        # connect to the server and list the files.\n        client.cmd('ftp %s' %(server[\"interfaces\"][0][\"ip\"].split('/')[0]), expect = \"Name\")\n        client.cmd(server[\"username\"], expect = \"Password\")\n        client.cmd(server[\"password\"], expect = \"ftp\")\n        (status, output) = client.cmd('ls', expect = \"ftp> \", format = \"both\")\n        if status and \"226\" in output:\n            print \"ftp output is shown.\"\n        else:\n            print \"ftp failed to connect the server.\"\n\n        # check the session and tear down the connection.\n        sessions = dut.cli('show security flow session application ftp', parse = \"flow-session\")\n        client.cmd('bye')\n\n        if sessions and sessions[0][\"flow-information\"][0]['pkt-cnt'] > 0 and \\\n                sessions[0][\"flow-information\"][1]['pkt-cnt'] > 0:\n            print \"Session found, pass!\"\n        else:\n            print \"Failed to find the session\"\n\n6. Q/A\n======\n\n1) Why some command return timeout?\n\nFor time consuming command i.g. scp, ftp get command, please set the @timeout\nproperly to avoid the command timeout.\n\nPlease make sure there is no command timeout since the output of the last\ncommand will messup the result of the next command.\n\nIf a command timeout, either send a CTRL + C to kill the current session:\n\n    client.cmd(\"c\", control = True)\n\nor kill the current session and relogin the device to open a new session:\n\n    client.relogin()",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/guoyoooping/networkdevice",
    "keywords": "",
    "license": "GPLv3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "netdevice",
    "platform": "",
    "project_url": "https://pypi.org/project/netdevice/",
    "release_url": "https://pypi.org/project/netdevice/0.31/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python modules to execute command on remote network device based on pexpect.",
    "version": "0.31"
  },
  "releases": {
    "0.10": [
      {
        "comment_text": "",
        "digests": {
          "md5": "d71de3d72292d432863b610580be8d77",
          "sha256": "5278923a0ed0c7ecfb59443f9e50bfa8b5059775730a8acd3311561b8b742b5b"
        },
        "downloads": 0,
        "filename": "netdevice-0.10.tar.gz",
        "has_sig": false,
        "md5_digest": "d71de3d72292d432863b610580be8d77",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13484,
        "upload_time": "2017-05-19T12:20:09",
        "url": "https://files.pythonhosted.org/packages/70/3b/7a8580850fbc2717a280f88b5131454865079a1d6318cfcad458b018bd24/netdevice-0.10.tar.gz"
      }
    ],
    "0.11": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a316f9180ba03f38e5b8444c570fc2a5",
          "sha256": "beccbbb1cf0fab0ff5912b214253e9c38792d789d6fd79a90ce4bb123f935965"
        },
        "downloads": 0,
        "filename": "netdevice-0.11.tar.gz",
        "has_sig": false,
        "md5_digest": "a316f9180ba03f38e5b8444c570fc2a5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13514,
        "upload_time": "2017-05-19T12:27:02",
        "url": "https://files.pythonhosted.org/packages/60/b9/b69c7e8ec774c471050966545d70ed77ae0e37a9e53c66efe88e2eab4ab4/netdevice-0.11.tar.gz"
      }
    ],
    "0.12": [
      {
        "comment_text": "",
        "digests": {
          "md5": "18ad9af0dda778e56ccbb5f82b23bc7e",
          "sha256": "7fbfc22c432de7e4aba21579e6093503839217e756184d0f3c4cd439801c09a1"
        },
        "downloads": 0,
        "filename": "netdevice-0.12.tar.gz",
        "has_sig": false,
        "md5_digest": "18ad9af0dda778e56ccbb5f82b23bc7e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15146,
        "upload_time": "2017-05-27T08:16:58",
        "url": "https://files.pythonhosted.org/packages/32/04/9c697c378e2d350f9f2a53af1641b5be5242841622f45e7f7808767ca1e7/netdevice-0.12.tar.gz"
      }
    ],
    "0.13": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ab9251e16c2cbf92ee5bc4aa1bceeebf",
          "sha256": "fccf82cedaddff7493ceb0db3145e2949bd1b6c1345df7a2d6eda9a7c3ae634f"
        },
        "downloads": 0,
        "filename": "netdevice-0.13.tar.gz",
        "has_sig": false,
        "md5_digest": "ab9251e16c2cbf92ee5bc4aa1bceeebf",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15091,
        "upload_time": "2017-05-27T08:48:54",
        "url": "https://files.pythonhosted.org/packages/4a/25/93b8533f769ae60ec621cb49e7bc1511f54404af8ab0bba7ea7b14aa66c4/netdevice-0.13.tar.gz"
      }
    ],
    "0.14": [
      {
        "comment_text": "",
        "digests": {
          "md5": "291bf99f1b67f6038ba58e52c2dc0d5e",
          "sha256": "ed3e6a6273da93bd32e1da84923f16d708e2a3b830c39e866381d7fc0fb963ab"
        },
        "downloads": 0,
        "filename": "netdevice-0.14.tar.gz",
        "has_sig": false,
        "md5_digest": "291bf99f1b67f6038ba58e52c2dc0d5e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15110,
        "upload_time": "2017-05-31T08:00:36",
        "url": "https://files.pythonhosted.org/packages/4b/51/3de8f3f9cf9f8e2991546add67cec79737f1d2b70305f5ab4d39c65dcf42/netdevice-0.14.tar.gz"
      }
    ],
    "0.15": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e6ab9b0e0560f9db272125259fc04d7b",
          "sha256": "35ab8ab3520849b15e3052f784b5868170df16d7e26295a153d2490a783a1c6e"
        },
        "downloads": 0,
        "filename": "netdevice-0.15.tar.gz",
        "has_sig": false,
        "md5_digest": "e6ab9b0e0560f9db272125259fc04d7b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15098,
        "upload_time": "2017-05-31T10:59:24",
        "url": "https://files.pythonhosted.org/packages/80/b1/6c28552e9e7c8f7a132703b4ca5358ab3e2b6a9db4b016c813b675f9cf22/netdevice-0.15.tar.gz"
      }
    ],
    "0.16": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a10ea01266cafb2841a61954cf38c0c5",
          "sha256": "c4c1f045c35d0265ed9f84db182eeab67c02ec6197a7ea3848627550f9edf948"
        },
        "downloads": 0,
        "filename": "netdevice-0.16.tar.gz",
        "has_sig": false,
        "md5_digest": "a10ea01266cafb2841a61954cf38c0c5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15259,
        "upload_time": "2017-06-02T07:54:53",
        "url": "https://files.pythonhosted.org/packages/17/e0/44171bda684b6ca91179c48b5fc5477297a53c15881516310171e0d9111b/netdevice-0.16.tar.gz"
      }
    ],
    "0.17": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a2ece34395ef66cc7eac986d3294167f",
          "sha256": "0df6ec419dc8c8024833737a01c56b4398f4dcb7258dff1cc8acdadb16eaa47c"
        },
        "downloads": 0,
        "filename": "netdevice-0.17.tar.gz",
        "has_sig": false,
        "md5_digest": "a2ece34395ef66cc7eac986d3294167f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15891,
        "upload_time": "2017-06-09T06:50:20",
        "url": "https://files.pythonhosted.org/packages/ac/33/e3d6676766157678baacf1d15bf6b9491e8160e06d90f672b0da9e647e1d/netdevice-0.17.tar.gz"
      }
    ],
    "0.18": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8fd41b226a11e0beaf7a34f47a2834bb",
          "sha256": "18d5dd49a2d171f236b7247c32cecafad85e6e0c37613d7b4e38bc8bffce63ca"
        },
        "downloads": 0,
        "filename": "netdevice-0.18.tar.gz",
        "has_sig": false,
        "md5_digest": "8fd41b226a11e0beaf7a34f47a2834bb",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17112,
        "upload_time": "2017-06-13T06:32:25",
        "url": "https://files.pythonhosted.org/packages/32/5e/a8734fecf29518e845e807c9ed9bba4d9ca889c94e8da19dc7208cb5b65c/netdevice-0.18.tar.gz"
      }
    ],
    "0.19": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6f4a8c5f1741417c87aac17ffe1083c7",
          "sha256": "d0c4291d7f60a831df250f59ed286f41932a8dfb91649aeaa2e058ffd3a86c84"
        },
        "downloads": 0,
        "filename": "netdevice-0.19.tar.gz",
        "has_sig": false,
        "md5_digest": "6f4a8c5f1741417c87aac17ffe1083c7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 17356,
        "upload_time": "2017-06-15T11:11:15",
        "url": "https://files.pythonhosted.org/packages/2a/15/836ee49f09a2f763d1d57e8acac511e4b79917cc424f5f31032d50504657/netdevice-0.19.tar.gz"
      }
    ],
    "0.20": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8a714c0311f6417c365ffc49a2986fc3",
          "sha256": "0d7b96e2210f03bd2d4f9686ea223347854242bc3a7f5a0897e848082b28e67b"
        },
        "downloads": 0,
        "filename": "netdevice-0.20.tar.gz",
        "has_sig": false,
        "md5_digest": "8a714c0311f6417c365ffc49a2986fc3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18402,
        "upload_time": "2017-06-23T02:44:54",
        "url": "https://files.pythonhosted.org/packages/22/9f/e4906b1eb3020ea549a6d5b08fd54c64c662f2226f67e70ace1ce84d5dc9/netdevice-0.20.tar.gz"
      }
    ],
    "0.21": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f3fc2d0ca0b990af9ae3dd142dba2012",
          "sha256": "2c8cda41baeecbdc068b50862438b3e2dd4d14c6fb99dc4753d5e8e7dd10d0a8"
        },
        "downloads": 0,
        "filename": "netdevice-0.21.tar.gz",
        "has_sig": false,
        "md5_digest": "f3fc2d0ca0b990af9ae3dd142dba2012",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19265,
        "upload_time": "2017-06-28T06:08:03",
        "url": "https://files.pythonhosted.org/packages/14/30/8a0f69eb4bf3de6816c14b403641bf5b93ff9bdce24b5c3a050fceba4755/netdevice-0.21.tar.gz"
      }
    ],
    "0.22": [
      {
        "comment_text": "",
        "digests": {
          "md5": "55e51b22142e3692fbc94aaf306400ca",
          "sha256": "fdcb6c196aed49680adc00dc91b65aab512ecc7b25f6bbdcfc868c414fce7848"
        },
        "downloads": 0,
        "filename": "netdevice-0.22.tar.gz",
        "has_sig": false,
        "md5_digest": "55e51b22142e3692fbc94aaf306400ca",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19503,
        "upload_time": "2017-07-03T02:58:42",
        "url": "https://files.pythonhosted.org/packages/a0/96/8362ff12f3d4e8750bc26577298842b101d654bc50087491793a1c17d55f/netdevice-0.22.tar.gz"
      }
    ],
    "0.23": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e86fba2a8bac1adf068b54a6b8e27691",
          "sha256": "d6a05b56347cb6019efad4071bfecd7bbfd1930b8d8a9613fd47d2e90335f601"
        },
        "downloads": 0,
        "filename": "netdevice-0.23.tar.gz",
        "has_sig": false,
        "md5_digest": "e86fba2a8bac1adf068b54a6b8e27691",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19538,
        "upload_time": "2017-07-05T05:31:37",
        "url": "https://files.pythonhosted.org/packages/39/f7/872df5a15410801649710b398bf2cf618549605bc393ef7b7f516fffbc82/netdevice-0.23.tar.gz"
      }
    ],
    "0.24": [
      {
        "comment_text": "",
        "digests": {
          "md5": "61eb93cdb7049dd733ce4416be91555e",
          "sha256": "91c93d966f4080c85cae3692e7fa6fb08a0a73d952c76e1e39c12949446e2131"
        },
        "downloads": 0,
        "filename": "netdevice-0.24.tar.gz",
        "has_sig": false,
        "md5_digest": "61eb93cdb7049dd733ce4416be91555e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19531,
        "upload_time": "2017-07-05T05:51:29",
        "url": "https://files.pythonhosted.org/packages/81/f1/ff6ba7f0f9b74187fccde2a598bf0cb8256e2607fedd16761b505b082ce8/netdevice-0.24.tar.gz"
      }
    ],
    "0.25": [
      {
        "comment_text": "",
        "digests": {
          "md5": "17d8cd4adc8cd5fbbc74dc13833e4e68",
          "sha256": "75e0aa4b68105888e37b11c7a51f290527d10565846c5b068d43a22adde35e24"
        },
        "downloads": 0,
        "filename": "netdevice-0.25.tar.gz",
        "has_sig": false,
        "md5_digest": "17d8cd4adc8cd5fbbc74dc13833e4e68",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19541,
        "upload_time": "2017-07-05T06:05:53",
        "url": "https://files.pythonhosted.org/packages/d2/bb/bde7dc6788302a88ab4b1c3c291a392860e02e387f0492c245f89be43de3/netdevice-0.25.tar.gz"
      }
    ],
    "0.26": [
      {
        "comment_text": "",
        "digests": {
          "md5": "bc1041f29283be6d020a9489fc921446",
          "sha256": "fcd370449c7777439d789724e82a91ad566a2ff5deceeb979e906eb6a84dbc07"
        },
        "downloads": 0,
        "filename": "netdevice-0.26.tar.gz",
        "has_sig": false,
        "md5_digest": "bc1041f29283be6d020a9489fc921446",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19574,
        "upload_time": "2017-07-05T06:41:31",
        "url": "https://files.pythonhosted.org/packages/81/d6/e5571940e23bb2515123eb7e1db4efd50a32986f6d0791ab004405313c00/netdevice-0.26.tar.gz"
      }
    ],
    "0.27": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5cf98f5f8ae458e2f0586fdbb8fd4f2b",
          "sha256": "dde7fda44fe01b4945c3b3d6c477b54b4b44494459ba24523fefab343e01f46c"
        },
        "downloads": 0,
        "filename": "netdevice-0.27.tar.gz",
        "has_sig": false,
        "md5_digest": "5cf98f5f8ae458e2f0586fdbb8fd4f2b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 19613,
        "upload_time": "2017-07-05T11:08:17",
        "url": "https://files.pythonhosted.org/packages/09/fc/9988bd486097c8e41be74a90a0d6bf78848077a51b299b147b8e398327cb/netdevice-0.27.tar.gz"
      }
    ],
    "0.28": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1ff514b19a40dfbf9bd15ce609526c77",
          "sha256": "dee08fb0f1cfa099f84f5e9158b9c631798a6fe5b24638f70ee713caf194c178"
        },
        "downloads": 0,
        "filename": "netdevice-0.28.tar.gz",
        "has_sig": false,
        "md5_digest": "1ff514b19a40dfbf9bd15ce609526c77",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22332,
        "upload_time": "2017-07-06T02:01:41",
        "url": "https://files.pythonhosted.org/packages/5b/b5/c3b2dfc533e9ea4059205abd3891f85d6fcb8a669f6d0d425e83d4091989/netdevice-0.28.tar.gz"
      }
    ],
    "0.29": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1083168102a324f2e434ade1e89473c1",
          "sha256": "bb0f58b21dbfc4b7bd95192cc1526cd606e6c8315b319c2c48abafa4fcc4f4e6"
        },
        "downloads": 0,
        "filename": "netdevice-0.29.tar.gz",
        "has_sig": false,
        "md5_digest": "1083168102a324f2e434ade1e89473c1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22326,
        "upload_time": "2017-07-06T02:44:45",
        "url": "https://files.pythonhosted.org/packages/16/2c/6ac8d9d2c636a3cdee68b804bc10f031b1785526337218016a0a564943b4/netdevice-0.29.tar.gz"
      }
    ],
    "0.31": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6483405d4f8c60f6ee9ca08252d069ce",
          "sha256": "58770edde04f9208f096620e42b1ec3138b86aca16ddf4e4b6454a463d171b4d"
        },
        "downloads": 0,
        "filename": "netdevice-0.31.tar.gz",
        "has_sig": false,
        "md5_digest": "6483405d4f8c60f6ee9ca08252d069ce",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 22328,
        "upload_time": "2017-07-06T04:04:02",
        "url": "https://files.pythonhosted.org/packages/0e/d7/bd6c748bf10bc7aa69108993145b29569854027e9f6f64cb8d2d34bbc330/netdevice-0.31.tar.gz"
      }
    ],
    "0.9": [
      {
        "comment_text": "",
        "digests": {
          "md5": "70e85d399ec3696ef63a846daec604f7",
          "sha256": "1208a34157632c18478e9ebb257c06ead7fcfa026c8c81933c20bec76c85bcef"
        },
        "downloads": 0,
        "filename": "netdevice-0.9.tar.gz",
        "has_sig": false,
        "md5_digest": "70e85d399ec3696ef63a846daec604f7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13776,
        "upload_time": "2017-05-09T02:27:24",
        "url": "https://files.pythonhosted.org/packages/f0/8e/978a5fe150912468fcff794cbf8f9f65dd1319ff7f7a607a72e884bb4b43/netdevice-0.9.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6483405d4f8c60f6ee9ca08252d069ce",
        "sha256": "58770edde04f9208f096620e42b1ec3138b86aca16ddf4e4b6454a463d171b4d"
      },
      "downloads": 0,
      "filename": "netdevice-0.31.tar.gz",
      "has_sig": false,
      "md5_digest": "6483405d4f8c60f6ee9ca08252d069ce",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 22328,
      "upload_time": "2017-07-06T04:04:02",
      "url": "https://files.pythonhosted.org/packages/0e/d7/bd6c748bf10bc7aa69108993145b29569854027e9f6f64cb8d2d34bbc330/netdevice-0.31.tar.gz"
    }
  ]
}