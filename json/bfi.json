{
  "info": {
    "author": "Erik Nyquist",
    "author_email": "eknyquist@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Intended Audience :: Developers",
      "Intended Audience :: Education",
      "Intended Audience :: Information Technology",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: Apache Software License",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7"
    ],
    "description": "Brainfuck interpreter\n=====================\n\nThis is a python-based interpreter for the\n`Brainfuck <https://en.wikipedia.org/wiki/Brainfuck>`_ esoteric programming\nlanguage. ``bfi`` implements the standard optimisations for clear loop, copy\nloop, multiply loop and scan loop constructs, and is reasonably fast. The\n\"towers of hanoi\" Brainfuck program (``hanoi.b``) completes in about 2 minutes\n(compared to over an hour using a python-based interpreter with no\noptimisations),  and the mandelbrot fractal set viewer (``mandel.b``) completes\nin about 30 minutes (compared to over 2 hours using a python-based interpreter\nwith no optimisations).\n\nSome minor extra features;\n\n* Allows a maximum run-time to be set, preventing infinite loops (useful for\n  auto-generated brainfuck code)\n* stdin data can optionally be passed to the Brainfuck program as a string\n  parameter when invoking the interpreter method, and stdout data from the\n  Brainfuck program can optionally be buffered and returned as a string\n\nCheck out `BrainfuckIntern <https://github.com/eriknyquist/BrainfuckIntern>`_,\nan implementation of a genetic algorithm that writes Brainfuck programs,\nusing ``bfi`` to provide information for a useful fitness evaluation on generated\nBrainfuck programs\n\nImplementation details\n----------------------\n\n* No change on EOF\n* Tape size is configurable, default is 30,000 cells\n* Cells are one byte, valid values between 0-255. Overflow/underflow wraps\n  around\n\nInstalling\n----------\n\nUse ``pip`` to install:\n\n::\n\n    pip install bfi\n\nUsing the interpreter from the command-line\n--------------------------------------------\n\nOnce installed, the brainfuck interpreter can be invoked from the command line\nusing the ``bfi`` command. Just run ``bfi`` and pass a brainfuck source file.\nSeveral sample Brainfuck programs are provided in the ``examples`` directory\nwithin the installed package (in your system's python2.7/dist-packages\ndirectory- on linux-based systems, for example, the full path might be\n/usr/local/lib/python2.7/dist-packages/bfi/examples).\n\nIn the sample commands below, we will run \"Lost Kingdom\", a text-based adventure\ngame written in Brainfuck:\n\n::\n\n    $> cd <dist-packages-directory>/bfi/examples\n    $> bfi LostKingdom.b\n\n\nUsing the interpreter in your own code\n--------------------------------------\n\nHere is how you use the ``bfi`` module to execute some Brainfuck code\nnormally (reading data directly from stdin and writing directly to stdout):\n\n::\n\n    >>> import bfi\n    >>> with open('samples/hello_world.b', 'r') as fh:\n    ...     brainfuck_code = fh.read()\n    ...\n    >>> Brainfuck.interpret(brainfuck_code)\n\n    Hello World!\n\n\nHere is how you use the ``bfi`` module to execute some Brainfuck code without\nreading/writing the user's terminal; input is passed a parameter to\n``interpret()``, and any output is returned as a string.\n\n::\n\n    >>> input_data = \"test input\"\n    >>> ret = bfi.interpret(brainfuck_code, stdin=input_data, buffer_stdout=True)\n    >>> print ret\n\n    Hello World!\n\nReference\n---------\n\n``bfi.interpret``\n#################\n\n.. code:: python\n\n   bfi.interpret(program, stdin=None, time_limit=None, tape_size=300000, buffer_stdout=False)\n\nSimplest usage of ``bfi``. Calls ``bfi.parse`` and ``bfi.execute`` to execute\na string of brainfuck source code\n\n* **Parameter** ``program``: String. Brainfuck code to be interpreted\n* **Parameter** ``stdin``: String. stdin data for Brainfuck program. If not set,\n  input will be read directly from stdin as normal\n* **Parameter** ``time_limit``: Float. If the interpreter runs for longer than\n  ``time_limit`` seconds, return without finishing the program (NOTE: this won't\n  work if your program is blocking on a read from stdin)\n* **Parameter** ``tape_size``: String. Number of cells in the tape-- the array\n  of memory cells-- used by the Brainfuck program\n* **Parameter** ``buffer_stdout``: Boolean. If true, any output printed by the\n  Brainfuck program will be buffered and returned as a string, rather than\n  printed directly to stdout\n\n**Return value:** If ``buffer_stdout`` is set, a string containing the output\ndata is returned. Otherise, an empty string is returned. If ``time_limit`` is\nreached before the interpreter completes, ``None`` is returned.\n\n**Exceptions:** Raises ``bfi.BrainfuckSyntaxError`` for unmatched ``[`` or ``]``\ncharacters. Raises ``bfi.BrainfuckMemoryError`` for a bad cell access\n\n``bfi.parse``\n#############\n\n.. code:: python\n\n   bfi.parse(program)\n\nReads a string of brainfuck source and compiles to intermediate opcodes\n\n* **Parameter** ``program`` : String. Brainfuck source code to be parsed\n\n**Return value:** list of compiled opcodes\n\n**Exceptions** Raises ``bfi.BrainfuckSyntaxError`` for unmatched ``[`` or ``]``\ncharacters.\n\n``bfi.execute``\n###############\n\n.. code:: python\n\n   bfi.execute(opcodes, <keyword_args>)\n\nExecutes a list of compiled opcodes\n\n* **Parameter** ``opcodes`` : List. Opcodes to be executed\n\n* **Parameter** ``<keyword_args>``: ``bfi.execute`` takes the same keyword\n  arguments as ``bfi.interpret``\n\n**Return value:** If ``buffer_stdout`` is set, a string containing the output\ndata is returned. Otherise, an empty string is returned. If ``time_limit`` is\nreached before the interpreter completes, ``None`` is returned.\n\n**Exceptions** Raises ``bfi.BrainfuckMemoryError`` for bad cell access\n\nGratuitous unnecessary extras\n-----------------------------\n\nIn order to make Brainfuck code execute more efficiently, it is compiled into\nan intermediate form that takes advantage of common brainfuck idioms and\nconstructs. This intermediate form consists of 12 opcodes, 8 of which are\nsimilar to the original 8 brainfuck instructions. Here is a description of the\n12 opcodes, and what they do:\n\n+-----------------------------------+-----------------------------------------+\n|            **Opcode**             |             **Description**             |\n+-----------------------------------+-----------------------------------------+\n|          ``left <num>``           | Decrements the cell pointer by ``<num>``|\n|                                   | cells pointer outside the tape).        |\n+-----------------------------------+-----------------------------------------+\n|          ``right <num>``          | Increments the cell pointer by ``<num>``|\n|                                   | cells                                   |\n+-----------------------------------+-----------------------------------------+\n|          ``sub <num>``            | Decrements value of current cell by     |\n|                                   | ``<num>`` cells                         |\n+-----------------------------------+-----------------------------------------+\n|          ``add <num>``            | Increments value of current cell by     |\n|                                   | ``<num>`` cells                         |\n+-----------------------------------+-----------------------------------------+\n|         ``open <location>``       | ``<location>`` is an index into the list|\n|                                   | of program opcodes. If the value of     |\n|                                   | current cell is zero, jump to           |\n|                                   | ``<location>``. Otherwise, continue     |\n|                                   | execution normally (Same functionality  |\n|                                   | as brainfuck \"[\" instruction, except    |\n|                                   | jump location is stored with opcode)    |\n+-----------------------------------+-----------------------------------------+\n|         ``close <location>``      | ``<location>`` is an index into the list|\n|                                   | of program opcodes. If the value of     |\n|                                   | current cell is zero, continue execution|\n|                                   | normally. Otherwise, jump to            |\n|                                   | ``<location>`` (Same functionality as   |\n|                                   | brainfuck \"]\" instruction, except jump  |\n|                                   | location is stored with opcode)         |\n+-----------------------------------+-----------------------------------------+\n|             ``input``             | Read one character of input and write to|\n|                                   | current cell                            |\n+-----------------------------------+-----------------------------------------+\n|             ``output``            | Print value of current cell as ASCII    |\n|                                   | character                               |\n+-----------------------------------+-----------------------------------------+\n|             ``clear``             | Set value of current cell to zero       |\n+-----------------------------------+-----------------------------------------+\n|  ``copy {<off>:<mult>, ... }``    | For each key/value pair, set the value  |\n|                                   | of the cell at (current cell + ``<off>``|\n|                                   | ) to be (value of current cell *        |\n|                                   | ``<mult>``)                             |\n+-----------------------------------+-----------------------------------------+\n|             ``scanl``             | Decrement the cell pointer until it     |\n|                                   | points at a cell containing 0           |\n+-----------------------------------+-----------------------------------------+\n|             ``scanr``             | Increment the cell pointer until it     |\n|                                   | points at a cell containing 0           |\n+-----------------------------------+-----------------------------------------+\n\nIf you *really want to*, you can actually view a brainfuck program in this\nintermediate form, by using the ``bfi.parse`` method and printing the resulting\nopcodes:\n\n::\n\n    >>> with open('bfi/examples/mandel.b', 'r') as fh:\n    ...     program = fh.read()\n    ... \n    >>> opcodes = bfi.parse(program)\n    >>> for c in opcodes: print c\n    ...\n\n    add 13\n    copy {1: 2, 4: 5, 5: 2, 6: 1}\n    right 5\n    add 6\n    right 1\n    sub 3\n    right 10\n    add 15\n    open 18\n    open 11\n\n    ... (long output, truncated...)\n\nAnd of course, you can execute the compiled opcodes as many times as you like\nusing ``bfi.execute``.\n\nExample Brainfuck programs\n--------------------------\n\nI have included several random Brainfuck programs that I've found in various\nplaces. I didn't write any of these programs, I just copied them as-is\nfrom other public sources. Descriptive comments (and author's name, in some\ncases) can be seen in the Brainfuck source files themselves.\n\nA description of the example Brainfuck programs included with this package\nfollows:\n\n* **bfcl.bf**: A Brainfuck-to-ELF translator, in Brainfuck. Reads in Brainfuck\n  source from stdin and writes a Linux ELF file to stdout\n\n* **bitwidth.bf** Assorted tests for Brainfuck interpreter/compiler correctness\n\n* **collatz.b** A demonstration of the Collatz problem in Brainfuck\n\n* **eoftest.b** Tests EOF behaviour of brainfuck interpreters/compilers\n\n* **fib.b** Prints a neverending fibonacci sequence\n\n* **gameoflife.b** Conway's Game of Life in Brainfuck\n\n* **hanoi.b** Towers of Hanoi in Brainfuck\n\n* **hello_world.b** Classic \"hello, world!\" in Brainfuck\n\n* **LostKingdom.b** A text-based adventure game in Brainfuck\n\n* **mandel.b** An ASCII  mandelbrot fractal set viewer in Brainfuck\n\n* **numwarp.b** Prints an enlarged ASCII representation of numbers entered by\n  the user\n\n* **primes.bf** Prints prime numbers\n\n* **rot13.b** Prints the ROT13 encoding of the string entered by the user\n\n* **sierpinksi.b** Displays the Sierpinksi triangle\n\n* **TheBrainfuckedLoneWolf.b** ASCII asteroids-inspired top-down shooter game\n  in Brainfuck\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "http://github.com/eriknyquist/bfi",
    "keywords": "",
    "license": "Apache 2.0",
    "maintainer": "",
    "maintainer_email": "",
    "name": "bfi",
    "platform": "",
    "project_url": "https://pypi.org/project/bfi/",
    "release_url": "https://pypi.org/project/bfi/0.2.7/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A reasonably fast optimizing Brainfuck interpreter in pure python",
    "version": "0.2.7"
  },
  "releases": {
    "0.2.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b128b14d4602c8bb85ea8ac4924cc39e",
          "sha256": "ae4ff5f2cf6f8e34a4c308bb441b3f169ac42e6589e04467bb6398c49def37f6"
        },
        "downloads": 0,
        "filename": "bfi-0.2.6.tar.gz",
        "has_sig": false,
        "md5_digest": "b128b14d4602c8bb85ea8ac4924cc39e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 139128,
        "upload_time": "2017-09-14T05:26:34",
        "url": "https://files.pythonhosted.org/packages/2b/5f/5997dde740f27d2cb8c3396aff1ced54e5ee244934afb6ee1b07dc7576e0/bfi-0.2.6.tar.gz"
      }
    ],
    "0.2.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "19f870ed40d58479cd2d84b8c6a4e753",
          "sha256": "92f62717974b030cea58dd1234c2ef06b56a034765ceb230c754ca426ccd4899"
        },
        "downloads": 0,
        "filename": "bfi-0.2.7.tar.gz",
        "has_sig": false,
        "md5_digest": "19f870ed40d58479cd2d84b8c6a4e753",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 141812,
        "upload_time": "2017-09-16T18:57:58",
        "url": "https://files.pythonhosted.org/packages/82/01/ca3d3758cdc2bd9a8c3f06aa40a79a4a4e3b4dadb87658513323d1c29f9f/bfi-0.2.7.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "19f870ed40d58479cd2d84b8c6a4e753",
        "sha256": "92f62717974b030cea58dd1234c2ef06b56a034765ceb230c754ca426ccd4899"
      },
      "downloads": 0,
      "filename": "bfi-0.2.7.tar.gz",
      "has_sig": false,
      "md5_digest": "19f870ed40d58479cd2d84b8c6a4e753",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 141812,
      "upload_time": "2017-09-16T18:57:58",
      "url": "https://files.pythonhosted.org/packages/82/01/ca3d3758cdc2bd9a8c3f06aa40a79a4a4e3b4dadb87658513323d1c29f9f/bfi-0.2.7.tar.gz"
    }
  ]
}