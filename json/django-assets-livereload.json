{
  "info": {
    "author": "Jonathan L. Verner",
    "author_email": "jonathan@temno.eu",
    "bugtrack_url": null,
    "classifiers": [],
    "description": "##########################\nDjango Assets Livereload\n##########################\n\nDjango Assets Livereload is an enhanced version of the Django `staticfiles <https://docs.djangoproject.com/en/1.11/ref/contrib/staticfiles/>`_ app\nwhich was inspired by the excellent `Django Pipeline <https://django-pipeline.readthedocs.io/en/latest/index.html>`__.  Its main features are:\n\n - Asset preprocessing (compiling sass files, minifying javascript, ...)\n - Livereload functionality (automatically preprocessing an asset, copying it to\n   the static root directory and refreshing browser tabs when the asset changes)\n\nNote that it has no connection with the `Django Assets <https://django-assets.readthedocs.io>`_ package.\n\nDependencies\n============\n  - Python3 (might work on Python2 but was not tested)\n\nFor the livereload functionality\n\n  - `gevent <http://www.gevent.org/>`_, `geventwebsocket <https://gitlab.com/noppo/gevent-websocket>`_, `inotify <https://github.com/dsoprea/PyInotify>`_\n\nFor the preprocessing functionality\n\n  - `cssmin <https://github.com/zacharyvoase/cssmin>`_ for minifying css files\n  - `pyScss <https://github.com/Kronuz/pyScss>`_ (or the sass command) for compiling sass files\n  - `google's clojure compiler <https://developers.google.com/closure/compiler/>`_ (which must be available on the PATH as a `clojure` or `clojure-compiler` executable)\n    for minifying javascript\n\n\nInstallation\n============\n\n.. code-block:: bash\n\n    $ pip install django-assets-livereload\n\n\nUsing the app\n=============\n\nAs usual, to use the app include it in the ``INSTALLED_APPS`` setting in ``settings.py``:\n\n.. code-block:: python\n\n    INSTALLED_APPS = (\n        ...\n        'django.contrib.staticfiles',\n        'assets',\n    )\n\nNote that, as shown above, you need to include the standard staticfiles app as well! Next\nset the ``STATICFILES_FINDERS`` variable in ``settings.py`` to:\n\n.. code-block:: python\n\n    STATICFILES_FINDERS = (\n        'assets.finders.ManifestFinder',\n        'assets.finders.ManifestAppDirsFinder',\n    )\n\nYour app should now work exactly as before. To use the additional features you need to include a ``manifest.json`` file in the\nstatic directories. The file describes where to find the assets and how to process them. We will get to the format in a moment.\nFirst, however, it will be instructive to describe another feature of the app---the ``asset`` tag. Note that the ``asset`` tag\nis optional, the standard ``static`` tag should still work.\n\nThe ``Asset`` tag\n-----------------\n\nThe ``asset`` tag is compatible with both the standard Django template\nsystem as well as with `Jinja2 <https://docs.djangoproject.com/en/1.11/topics/templates/#django.template.backends.jinja2.Jinja2>`_.\nTo use it in Django templates, you need to load the ``asset`` library in the templates where you want to use it:\n\n.. code-block:: django\n\n    {% load asset %}\n\nYou use the tag whenever you want to reference an asset in your templates. It has a single string argument---``bundle_id``---which\nidentifies the asset you want to reference. A typical usage would be as follows:\n\n.. code-block:: django\n\n    {% asset 'myapp:javascript:jquery': %}\n\nThe ``id`` consists of three parts separated by a colon (``:``). The first part, called the *prefix*, is optional. It is used\nfor namespacing reasons. If the asset comes from an app, the prefix should be the app's name. Otherwise it should be omitted.\nThe second part is called a *scope*. A scope specifies the type of asset being referenced and controls what will be the output of\nthe asset tag. There are a few predefined scopes, but you can use arbitrary alphanumeric strings as scope identifiers. The following\ntable shows the predefined scopes with the asset tag output (the last row shows the output for scopes which are not predefined):\n\n+--------------+------------------+--------------------------------------------------------------------------------------------------+\n| **Scope**    | **Aliases**      | **Output**                                                                                       |\n+==============+==================+==================================================================================================+\n| javascript   |  js, scripts     | ``<script src='{{ url }}'></script>``                                                            |\n+--------------+------------------+--------------------------------------------------------------------------------------------------+\n| stylesheets  |  styles          | ``<link rel='stylesheet' href='{{ url }}' type='text/css'></link>``                              |\n+--------------+------------------+--------------------------------------------------------------------------------------------------+\n| images       |                  | ``src='{{ url }}'``                                                                              |\n+--------------+------------------+--------------------------------------------------------------------------------------------------+\n| all other    |                  | ``{{ url }}``                                                                                    |\n+--------------+------------------+--------------------------------------------------------------------------------------------------+\n\nThe ``{{ url }}`` in the output above is replaced by the static url of the referenced asset.\n\nThe last part of the ``bundle_id`` identifies the asset(s) being referenced. It can either be an id uniquely\nidentifying the referenced asset (in the given namespace), a path to the referenced asset (relative to some subdirectory of a static directory)\nor a pattern used to match against asset ids. The pattern can have three forms. Either it starts with a ``*`` and\nends with a ``*``. In that case all asset ids which contain the rest of the pattern match. Next if the pattern ends with\na ``*`` all ids starting with the pattern match. Finally, the pattern is interpreted as a regular expression\nand matching ids are those which match the expression at applied at the start (as tested by the ``re.match`` function).\nIf multiple ids match, the output in the above table is repeated for each matched asset.\n\nThe Manifest file\n-----------------\n\nThe special features of the app are used by supplying a manifest file which describes which assets to include and\nhow to process them. Each manifest describes a single static directory in ``settings.STATIC_DIRS``.  It is\nformatted as a `JSON <https://en.wikipedia.org/wiki/JSON>`_ file encoding a single object.\nThe keys to this object are *scopes* (see above). Each scope has a ``target_dir`` attribute which defines under\nwhat directory the static files from this scope will live. It must also include either an ``items`` key\nor a ``copy`` key.\n\nIf it contains a ``copy`` key, the value must be an object with two keys: ``sources`` and\n``pattern``. The sources is a list of subdirectory paths (relative to the top-level directory contining the ``manifest.json`` file)\nand ``pattern`` is a regular expression. When running the ``collectstatic`` command, all files in any subdirectory\nof any path specified in the ``sources`` list whose filenames match the given pattern will be copied into the ``target_dir``\nsubdirectory (possibly prefixed by the app name) of ``settings.STATIC_ROOT``.\n\n\nIf it contains an ``items`` key, this must be an object with keys being asset ids (used by the ``asset`` tag,\nsee above) and values being objects describing the given asset. An object describing an asset has to have a\n``sources`` key and can optionally contain a ``filters`` key and a ``watch`` key. The ``sources`` key should\nbe a list of filepaths (relative to the top-level directory contining the ``manifest.json`` file).\nThe content of these files will be concatenated together, optionally passed through specified filters,\nand saved to a file under the ``target_dir`` subdirectory (possibly prefixed by the app name) of\n``settings.STATIC_ROOT``. The filename is the asset id to which an optional extension\n(given by the containing scope's optional ``target_ext`` key) is appended. If the ``watch`` key is specified,\nit is a list of files changes to which will lead to a recompilation of the assset when using the\nLivereload functionality (see below)\n\nFor example if the ``myapp/static/`` directory contains the following file ``manifest.json`` file:\n\n.. code-block:: json\n\n    {\n        \"javascript\": {\n            \"target_dir\":\"js\",\n            \"target_ext\":\".js\",\n            \"items\": {\n                \"courses\":{\"sources\":[\"IS/js/controllers.js\"]},\n                \"schedule\":{\"sources\":[\"IS/js/sched.js\", \"IS/js/time.js\"]}\n            }\n        },\n        \"python\": {\n            \"target_dir\":\"python\",\n            \"copy\":{\n                    \"sources\":[\"IS/python\"],\n                    \"pattern\":\".*\\\\.py\"\n            }\n        },\n        \"stylesheets\": {\n            \"target_dir\":\"css\",\n            \"target_ext\":\".css\",\n            \"items\": {\n                \"IS\": {\"sources\":[\"IS/sass/IS.scss\"],\n                       \"watch\":[\"IS/sass/*.scss\",\"IS/sass/vendor/_bootstrap.scss\"],\n                       \"filters\":[\"sass\",\"cssmin\"]}\n            }\n        }\n    }\n\nThen, when running the ``collectstatic`` management command, the following actions will be taken:\n\n    - the contents of ``myapp/static/IS/js/controllers.js`` will be copied to ``STATIC_ROOT/myapp/js/courses.js``\n    - the contents of ``myapp/static/IS/js/sched.js`` and ``myapp/static/IS/js/time.js`` will concatenated and saved to ``STATIC_ROOT/myapp/js/schedule.js``\n    - all files living below ``myapp/static/IS/python`` and ending with a `.py` will be copied to ``STATIC_ROOT/myapp/python`` directory\n    - the file ``myapp/static/IS/sass/IS.scss`` will be compiled by sass, its output will be minified\n      using cssmin and saved to ``STATIC_ROOT/myapp/css/IS.css``\n\nAssuming the same ``manifest.json`` the following are some examples of ``asset`` tag usage in templates:\n\n.. code-block:: django\n\n    {% asset 'myapp:javascript:*' %}\n\nwould result in\n\n.. code-block:: html\n\n    <script src='STATIC_URL/myapp/js/courses.js'></script>\n    <script src='STATIC_URL/myapp/js/schedule.js'></script>\n\nOne can also specify just a single asset:\n\n.. code-block:: django\n\n    {% asset 'myapp:javascript:courses' %}\n\nresulting in\n\n.. code-block:: html\n\n    <script src='STATIC_URL/myapp/js/courses.js'></script>\n\nIncluding a stylesheet:\n\n.. code-block:: django\n\n    {% asset 'myapp:stylesheets:IS' %}\n\nresults in\n\n.. code-block:: html\n\n    <link rel='stylesheet' href='STATIC_URL/myapp/css/IS.css' type='text/css'></link>\n\nLiveReload functionality\n------------------------\n\nTo use the livereload functionality use the provided ``liveserver`` command instead of ``manage.py runserver``:\n\n.. code-block:: bash\n\n    $ ./manage.py liveserver\n\nThis will serve your static files as well as your app. When you now open the site in your browser and\nchange any of your assets (or, in case of processed files, any of the source files) your browser should\nreload with the changes visible. The browser should also reload when you change any code in your app.\n\nWhen this command is run, it creates a ``livereload.pid`` in the current directory. You can then issue\n\n.. code-block:: bash\n\n    $ ./manage.py reload\n\nto force browser refresh and\n\n.. code-block:: bash\n\n    $ ./manage.py restart\n\nto force restarting the app server.\n\nPlease note that the implementation of the livereload script is not as efficient as the official\n`livereload <http://livereload.com/>`_. Eventually, I might use the real livereload script (which has\nthe advantage of reloading only the resources that actually changed). For now, I don't think it is\nworth the effort.\n\nAlternatives\n============\n\n\n  - `Django Pipeline <https://django-pipeline.readthedocs.io/en/latest/index.html>`_ this is an excellent solution which is supported and used by big sites; the downside is that it is only geared towards stylesheets and javascript (so it doesn't handle images, for example; or other media), it doesn't have livereload functionality and its settings live in the settings.py (my personal preference is to keep the asset stuff out of the settings). If you don't need to handle images (or are fine with handling them via staticfiles) and don't need livereload, definitely go for Django Pipeline!\n  - `Django Compressor <https://django-compressor.readthedocs.io/en/latest/>`_ another nice library, haven't tried it though. Does not have livereload.\n  - `django-livereload-server <https://github.com/tjwalch/django-livereload-server>`_ livereload but without the pipeline stuff (i.e. you can't use it to compile your files whenever you change the sources)\n  -`Django Assets <https://django-assets.readthedocs.io>`_ does not have livereload, otherwise looks interesting, uses\n  the webassets python package; I personally don't like the fact that assets are defined in python source files\n\n\nLICENSE\n=======\n\nMIT License\n\nCopyright (c) 2017 Jonathan L. Verner\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://gitlab.com/Verner/django-assets-livereload",
    "keywords": "django",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-assets-livereload",
    "platform": "",
    "project_url": "https://pypi.org/project/django-assets-livereload/",
    "release_url": "https://pypi.org/project/django-assets-livereload/0.2.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Enhanced staticfiles django app.",
    "version": "0.2.1"
  },
  "releases": {
    "0.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7f941056b83a83603beff8ec06ca033c",
          "sha256": "9ee57ec9095ee74904b4528c5e986831cd645ffb7bcce4436f0aa39fd37199bb"
        },
        "downloads": -1,
        "filename": "django_assets_livereload-0.1.2-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "7f941056b83a83603beff8ec06ca033c",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 12102,
        "upload_time": "2017-06-10T22:25:00",
        "url": "https://files.pythonhosted.org/packages/b2/ff/1059db7a36a60b37ce4216ed595bd0afff125703bb7194670db6823c9b5e/django_assets_livereload-0.1.2-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "8614b661843fd0524c7f1af5378838ad",
          "sha256": "79fb73dd86fced8a9b5e02c9b3de233159192155a01c131a5e15fb6d53255f23"
        },
        "downloads": -1,
        "filename": "django-assets-livereload-0.1.2.tar.gz",
        "has_sig": true,
        "md5_digest": "8614b661843fd0524c7f1af5378838ad",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 69033,
        "upload_time": "2017-06-10T22:25:02",
        "url": "https://files.pythonhosted.org/packages/b3/4a/b6ce78ac4648e2c03d4c7c271a3f177c3dba859189bcee582626c360439a/django-assets-livereload-0.1.2.tar.gz"
      }
    ],
    "0.1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "380836bf4c139d844790b520df9cf6d0",
          "sha256": "e9251a9e3eba6aa294e0058911b553b90a77c20454a8d80bc6bff059ea8a0674"
        },
        "downloads": -1,
        "filename": "django_assets_livereload-0.1.3-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "380836bf4c139d844790b520df9cf6d0",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 78360,
        "upload_time": "2017-06-11T21:19:32",
        "url": "https://files.pythonhosted.org/packages/26/b1/2e4bfc1d45f9a127f3f440f55a47f2a74cbf321ec82fa9553eb1b5fede79/django_assets_livereload-0.1.3-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e10ad16e17277196af797f62a23e51b0",
          "sha256": "7dcbf2aed5adaeefdb8e7df082abd92e0a7d4348bfea737ce9c8b2e31e9c8641"
        },
        "downloads": -1,
        "filename": "django-assets-livereload-0.1.3.tar.gz",
        "has_sig": true,
        "md5_digest": "e10ad16e17277196af797f62a23e51b0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 69057,
        "upload_time": "2017-06-11T21:19:34",
        "url": "https://files.pythonhosted.org/packages/91/a4/c1a1fca0e3da5045ebfdbb51e1ff664079665715341c1c46949d81a2f940/django-assets-livereload-0.1.3.tar.gz"
      }
    ],
    "0.1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "eb26042dd10e9432642f260a20b8b705",
          "sha256": "1fbe2b3f708b6742f86691d27d0eb82b4fa48740969caf7b92fd8469ea2056cd"
        },
        "downloads": -1,
        "filename": "django_assets_livereload-0.1.4-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "eb26042dd10e9432642f260a20b8b705",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 78369,
        "upload_time": "2017-06-11T22:25:24",
        "url": "https://files.pythonhosted.org/packages/64/b2/708f0d429f53d6f279ffcd614eaa3f1e88628a3354f8bc597fb40eadfd6a/django_assets_livereload-0.1.4-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "302c1248972fa49f85286822de4c32ea",
          "sha256": "e31fb5bb79b0ff044ce8df74cbb270871c630829c3bc563a9cf1a6579f5a98ab"
        },
        "downloads": -1,
        "filename": "django-assets-livereload-0.1.4.tar.gz",
        "has_sig": true,
        "md5_digest": "302c1248972fa49f85286822de4c32ea",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 69090,
        "upload_time": "2017-06-11T22:25:26",
        "url": "https://files.pythonhosted.org/packages/9a/12/5c7641169f1e854bcc21354cc23591200dd221d652dbe176b02d987560fb/django-assets-livereload-0.1.4.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2a16895c682b62834710f21588c0a0ac",
          "sha256": "ed85e820409d14a4344855e5aeb53dcf06a9d78c6ee1d5accb5196e5038709dd"
        },
        "downloads": -1,
        "filename": "django_assets_livereload-0.2.0-py3-none-any.whl",
        "has_sig": true,
        "md5_digest": "2a16895c682b62834710f21588c0a0ac",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 130845,
        "upload_time": "2017-06-17T11:45:50",
        "url": "https://files.pythonhosted.org/packages/31/7d/3930fa60084d7656fe1ea1a0fde46823bc23111eec4e17ad33bff9569357/django_assets_livereload-0.2.0-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "88cca0b5ed09f18008711f44fa9202e3",
          "sha256": "d6def7822733c6cd033fac42c081615cd27d7e3139aabfdbc4b460e1b0c08042"
        },
        "downloads": -1,
        "filename": "django-assets-livereload-0.2.0.tar.gz",
        "has_sig": true,
        "md5_digest": "88cca0b5ed09f18008711f44fa9202e3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 71350,
        "upload_time": "2017-06-17T11:45:54",
        "url": "https://files.pythonhosted.org/packages/a9/7d/bcb3dfc26e5e5b58847a7fd1292b19d514c1b9ff0e05395ee2227c99407c/django-assets-livereload-0.2.0.tar.gz"
      }
    ],
    "0.2.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6a0a0469ea6302e020b5388eb600a420",
          "sha256": "0e227bff898b8257a291fbdffb7d4b7bbdcf92ee73424fad127e113c00ecd73d"
        },
        "downloads": -1,
        "filename": "django-assets-livereload-0.2.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6a0a0469ea6302e020b5388eb600a420",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 71520,
        "upload_time": "2017-10-30T19:30:36",
        "url": "https://files.pythonhosted.org/packages/52/02/63eff59121bf9441673ff9b86798279c99f0ac01d9023201702d8d757cdc/django-assets-livereload-0.2.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6a0a0469ea6302e020b5388eb600a420",
        "sha256": "0e227bff898b8257a291fbdffb7d4b7bbdcf92ee73424fad127e113c00ecd73d"
      },
      "downloads": -1,
      "filename": "django-assets-livereload-0.2.1.tar.gz",
      "has_sig": false,
      "md5_digest": "6a0a0469ea6302e020b5388eb600a420",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 71520,
      "upload_time": "2017-10-30T19:30:36",
      "url": "https://files.pythonhosted.org/packages/52/02/63eff59121bf9441673ff9b86798279c99f0ac01d9023201702d8d757cdc/django-assets-livereload-0.2.1.tar.gz"
    }
  ]
}