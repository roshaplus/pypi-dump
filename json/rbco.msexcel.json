{
  "info": {
    "author": "Rafael Oliveira",
    "author_email": "rafaelbco@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Programming Language :: Python",
      "Topic :: Software Development :: Libraries :: Python Modules"
    ],
    "description": "rbco.msexcel\n============\n\n:Author: Rafael Oliveira <rafaelbco@gmail.com>\n\nOverview\n--------\n\nProvide functions to read, parse and convert MS Excel spreadsheets into various\ndata structures.\n\nUsage\n-----\n\nTo read a MS Excel file into memory call ``xls_to_excelerator_dict(filename)``. \nThis will return a dict in the *excelerator_dict* format.\nFunctions are provided to convert between this format and the following \nformats.\n\nexcelerator_dict\n----------------\n\nA list of tuples (sheet_name, dict). dict keys are (row_num, col_num) pairs::\n\n    [\n        (\n            sheet_name,\n            {\n                (row_num, col_num): value,\n            }\n        ),\n    ]\n    \nrows_and_columns\n----------------  \n    \nNested dicts which keys sheet name, row number and column number::\n\n    {\n        sheet_name: {\n            row_num: {\n                col_num: value,\n            }\n        },\n    }\n    \nmatrix\n------\n    \nA dict mapping from sheet names to matrices, i.e, a lists of lists::\n\n    {\n        sheet_name: [\n            [v01, v02, v03, ...],\n            [v11, v12, v13, ...],\n        ]        \n    }    \n    \nstructure\n---------\n\nPerhaps the more user-friendly format: A dict mapping from\nsheet names to lists. These lists contains the rows. Each row is \nrepresented by a dict, mapping from column names to values. Column names\nare the values in the first row of the sheet::\n\n    {\n        sheet_name: [\n            {\n                col_name: value,\n            },\n        ]        \n    }\n\n\nThis format is only useful if the first row of each sheet is actually\na header row",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "UNKNOWN",
    "keywords": "xls excel",
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "rbco.msexcel",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/rbco.msexcel/",
    "release_url": "https://pypi.org/project/rbco.msexcel/0.0.4/",
    "requires_python": null,
    "summary": "Provide functions to read, parse and convert MS Excel spreadsheets into various data structures.",
    "version": "0.0.4"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b771bc420cd24ba13912d0e692b38e83",
          "sha256": "6d2f1f4674aa68f20b7b918233624f615b8ccc2118733ffccb3be4938219885d"
        },
        "downloads": 3058,
        "filename": "rbco.msexcel-0.0.1.zip",
        "has_sig": false,
        "md5_digest": "b771bc420cd24ba13912d0e692b38e83",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6653,
        "upload_time": "2009-08-21T18:01:55",
        "url": "https://files.pythonhosted.org/packages/0d/6d/dce57e5b47c08ce3d30e53d4050d2ca65e641b7ecb67447e245d9ef1193c/rbco.msexcel-0.0.1.zip"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a0f9b9a0248cc4ca77be788b4e08aa59",
          "sha256": "2dd1631fc988cd096216048e9b980aa7063504de57ab7e1d4ce51b2c93f0e1fe"
        },
        "downloads": 1685,
        "filename": "rbco.msexcel-0.0.2.zip",
        "has_sig": false,
        "md5_digest": "a0f9b9a0248cc4ca77be788b4e08aa59",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5853,
        "upload_time": "2014-01-29T14:31:19",
        "url": "https://files.pythonhosted.org/packages/5f/c7/7bbaad9958eac0e231db63da8bc04ed66977dc079c7e7db6c8a8de766b8d/rbco.msexcel-0.0.2.zip"
      }
    ],
    "0.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "5a789ed0f3b3eafb8a662f1eb7fb6446",
          "sha256": "375f6f6c69e8fa66c696d935b5a21232765e43de47ef35e70914d176a3087c54"
        },
        "downloads": 1720,
        "filename": "rbco.msexcel-0.0.3.zip",
        "has_sig": false,
        "md5_digest": "5a789ed0f3b3eafb8a662f1eb7fb6446",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6884,
        "upload_time": "2014-01-29T14:37:55",
        "url": "https://files.pythonhosted.org/packages/47/6b/dc11f06ad8b6e9cb08ab6633e4cebc24d2f43edc41d76312e074fdd4cb87/rbco.msexcel-0.0.3.zip"
      }
    ],
    "0.0.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "19c8c8c20ce0abc525affe42a1ef31f9",
          "sha256": "980a1ac9c0630a1f8e6b7ee373eb0820c25149b8c6383ae0dbe721f01a1f5274"
        },
        "downloads": 2711,
        "filename": "rbco.msexcel-0.0.4.zip",
        "has_sig": false,
        "md5_digest": "19c8c8c20ce0abc525affe42a1ef31f9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 6911,
        "upload_time": "2014-02-12T11:24:51",
        "url": "https://files.pythonhosted.org/packages/d8/5d/64c051b1207665f2188cf1a36d0402ba515d8f1f7d20ac6796125e79aef3/rbco.msexcel-0.0.4.zip"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "19c8c8c20ce0abc525affe42a1ef31f9",
        "sha256": "980a1ac9c0630a1f8e6b7ee373eb0820c25149b8c6383ae0dbe721f01a1f5274"
      },
      "downloads": 2711,
      "filename": "rbco.msexcel-0.0.4.zip",
      "has_sig": false,
      "md5_digest": "19c8c8c20ce0abc525affe42a1ef31f9",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 6911,
      "upload_time": "2014-02-12T11:24:51",
      "url": "https://files.pythonhosted.org/packages/d8/5d/64c051b1207665f2188cf1a36d0402ba515d8f1f7d20ac6796125e79aef3/rbco.msexcel-0.0.4.zip"
    }
  ]
}