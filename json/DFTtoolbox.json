{
  "info": {
    "author": "pipidog",
    "author_email": "pipidog@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Topic :: Scientific/Engineering :: Physics"
    ],
    "description": "# DFTtoolbox\nDFTtoolbox is a Python module that aims to help computational condensed \nmatter physicist or material scientists who use density functional \ntheory (DFT) codes , such as quantum espresso, abinit, elk, etc., as a \ntool to study material properties quickly build their calculations and \nanalyze the calculated results.\n\nMost DFT codes usually come with massive variables. Users are required \nto be familar with all the variable not only in the building stage but \nalso the postprocess stage. Therefore, the philosophy of DFTtoolbox is \n\"the less user input the better!\". Users only need to feed very few\nvariables to DFTtoolbox to build a DFT input file or to analyze the \ncalculated results. No painc learning curves for DFT codes \nanymore!\n\n# Prerequisite\nDFTtoolbox is a Python module which helps DFT code users quickly build an \ninput file in seconds and analyze+visuallize the output data immediately. \n\nCurrently, DFTtoolbox can support three popular DFT codes:\n- Quantum Espresso (tested in v6.1) http://www.quantum-espresso.org/\n- Abinit (tested in v8.4.2) http://www.abinit.org/\n- Elk (tested in v4.3.6) http://elk.sourceforge.net/\n\nDFTtoolbox is based on numpy and matplotlib. Before installing DFTtoolbox,\nplease make sure you have these package installed. Also, DFTtoolbox can \nonly read the crystal structure and band high-symmytry \npath in xcrysden format (.xsf and .kpf). If you're not familar with \nxcrysden, check their websit (http://www.xcrysden.org/). It is very\neasy to learn. Then you are all set ! \n\n# How does DFTtoolbox build a DFT task ?\nBefore building a input file using DFTtoolbox, the user has to prepare\nthe structure file and the k-path file in xcrysden format (.xsf and .kpf.)\nThen DFTtoolbox can:\n- initialize a ground state calculation\n  The user only need to feed very few parameters, DFTtoolbox will automatically\n  generate the input files to perform four basic ground state calculation:\n  -- self-consistent field calculation\n  -- band structure calculation\n  -- projected band structure calculation (i.e. fatband)\n  -- partial density of state calculation\n  \n- initialize a structural relaxation calculation \n  DFTtoolbox can automatically generate an input file for structural relaxation\n  by requesting \"zero\" input! DFTtoolbox will pick the values that fit for most\n  calculations for you. \n  \nNote: \nBecause DFTtoolbox is designed based on the philosophy \"the less user inputs\nthe better\". I don't want you to learn another complicated code to deal with\nthe already-very-complicated DFT codes. So the input files are only for general \npurposes and will not fit all kinds of ground state or structural relaxation \ncalculations. However even if the generated input files don't completely satisify\nyour need, it is always a good starting point for you to tweak your own input files. \n  \n# How does DFTtoolbox help analyze the results?\nOne of the painc part of DFT users is the output files are usually very complicated\nand are lack of appropriate tools to visuallize the results beaufitully and \neasily. DFTtoolbox can automatically read the output data of band calculation, \nprojected band calculation and PDOS calculations, save them in numpy array format\n(.npz files) and plot the results with publishable qualities. A convenient feature\nof DFTtoolbox is that it can combine arbitary states to plot projected band\nstructures and PDOS making it a useful tool to band character analysis. \nIn addition, if you want to use your own tools to plot the results, \nthe output .npz file can also let you load the data in numpy standard format\nimmediately, so you can postprocess your data in Python framework easily.\n\n# Is there a quick tutorial?\nYes, check (/examples/). There is a simple example FeO. I believe \nanyone can learn how to use it in a few minutes. You will find it only needs \nvery few necesary input variabless to initialize or postprocess a DFT calculation.  \nAlso, in /template/ there are template files for your to use.\n\n# Installation\n- from the tarball:\nJust download the tarball. Unzip it and put it anywhere you want. Go to the \nfolder, type:\n\npython setup.py install\n\n- from PyPI:\n\npip install DFTtoolbox\n\n# Figures Demo\nHere are examples of the figure generated by DFTtoolbox. These figure were\nobtained from ferromagnetic FeO. This example has been included in the module.\n- Fig.1 band stucture (green and blue are different spin)\n![band](https://github.com/pipidog/DFTtoolbox/raw/master/examples/abinit/lsda/band-DS2.png)\n- Fig.2 band structure projected on Fe d-orbital\n![Fatband](https://github.com/pipidog/DFTtoolbox/raw/master/examples/abinit/lsda/fatband-DS3-0.png)\n- Fig.3 PDOS (data-1: Fe d-oribtal, data-2: O p-orbital)\n![PDOS](https://github.com/pipidog/DFTtoolbox/raw/master/examples/abinit/lsda/pdos-DS4.png)",
    "docs_url": null,
    "download_url": "https://github.com/pipidog/DFTtoolbox/archive/v1.0.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/pipidog/DFTtoolbox",
    "keywords": "density-functional-theory,qantum-espresso,elk,abinit",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "DFTtoolbox",
    "platform": "",
    "project_url": "https://pypi.org/project/DFTtoolbox/",
    "release_url": "https://pypi.org/project/DFTtoolbox/1.4/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "A toolbox to initialize or postpocess several DFT codes",
    "version": "1.4"
  },
  "releases": {
    "1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "632c55785daecadd70c27d553385edb5",
          "sha256": "d02478302d398acdffc7425c3d9d6a91bd08205fea696d7f127f3197e7104e49"
        },
        "downloads": 0,
        "filename": "DFTtoolbox-1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "632c55785daecadd70c27d553385edb5",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26579,
        "upload_time": "2017-08-31T00:11:25",
        "url": "https://files.pythonhosted.org/packages/ff/36/0c791e02e9b803982c343859c6232b1ab3c9ef4315c0114f004d0709e9b5/DFTtoolbox-1.0.tar.gz"
      }
    ],
    "1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "4736cf386fbe8eadb3bc2a6f77a580fc",
          "sha256": "93d0cf25a66845674349a8855582d2e4c900dbcaa5eb44bdf2f6afc26d7de135"
        },
        "downloads": 0,
        "filename": "DFTtoolbox-1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "4736cf386fbe8eadb3bc2a6f77a580fc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 26734,
        "upload_time": "2017-09-01T21:42:29",
        "url": "https://files.pythonhosted.org/packages/5a/0b/db79db22b2bc8371073211f2f0540de30a18d2bd7cf13539f51298676bdb/DFTtoolbox-1.1.tar.gz"
      }
    ],
    "1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7e3c1e2b462ce6dea6fbbf6d1705a3f3",
          "sha256": "640f2f24b6b45a81c8510ac6f4b49897fc3f49fc4918b7b457ef8a53abf1ac34"
        },
        "downloads": 0,
        "filename": "DFTtoolbox-1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "7e3c1e2b462ce6dea6fbbf6d1705a3f3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27107,
        "upload_time": "2017-09-05T20:44:23",
        "url": "https://files.pythonhosted.org/packages/cd/79/78f0d2ae70d39fde4b387ded2604d5bc5e3620829c73dc4f7acf4f6af15e/DFTtoolbox-1.2.tar.gz"
      }
    ],
    "1.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1dc27ea44d5703d3e625aed755ff60e7",
          "sha256": "77ad099de983b58d58ecd8bff9ce7b1166103cd7367191883487d0fc651130eb"
        },
        "downloads": 0,
        "filename": "DFTtoolbox-1.3.tar.gz",
        "has_sig": false,
        "md5_digest": "1dc27ea44d5703d3e625aed755ff60e7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27557,
        "upload_time": "2017-09-06T20:15:32",
        "url": "https://files.pythonhosted.org/packages/8a/0b/e49ff2b0103e914866b0245abafec5128399f9f0390fda0d57d9d76d6f57/DFTtoolbox-1.3.tar.gz"
      }
    ],
    "1.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6a180490a2dee36e05e47c9f7ca8ad7d",
          "sha256": "83d8f2add53158a1f385b2ef4a19831b473408b02597a9500519e37ac94c74e0"
        },
        "downloads": 0,
        "filename": "DFTtoolbox-1.4.tar.gz",
        "has_sig": false,
        "md5_digest": "6a180490a2dee36e05e47c9f7ca8ad7d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 27843,
        "upload_time": "2017-09-07T17:56:31",
        "url": "https://files.pythonhosted.org/packages/8e/45/fe337213142d15de15747c88d2b9e7629b87ebfa03efc41470e748c1f112/DFTtoolbox-1.4.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "6a180490a2dee36e05e47c9f7ca8ad7d",
        "sha256": "83d8f2add53158a1f385b2ef4a19831b473408b02597a9500519e37ac94c74e0"
      },
      "downloads": 0,
      "filename": "DFTtoolbox-1.4.tar.gz",
      "has_sig": false,
      "md5_digest": "6a180490a2dee36e05e47c9f7ca8ad7d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 27843,
      "upload_time": "2017-09-07T17:56:31",
      "url": "https://files.pythonhosted.org/packages/8e/45/fe337213142d15de15747c88d2b9e7629b87ebfa03efc41470e748c1f112/DFTtoolbox-1.4.tar.gz"
    }
  ]
}