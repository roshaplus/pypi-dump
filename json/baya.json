{
  "info": {
    "author": "Counsyl Platform Team",
    "author_email": "platform@counsyl.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "# Baya\n\nBaya is a library for using nested LDAP Groups for authorization. It lets you\nput urls, methods, CBVs, and Admin views behind access control that uses nested\nLDAP groupOfNames.\n\nThis also includes an example Django site in the `tests` directory.\n\nThe Baya Weaver is a species of bird that weaves complex nests.\n\n<img src=\"media/Baya_Weaver.jpg\" width=350 title=\"Baya Weaver\" />\n\nImage courtesy [J.M.Garg](http://commons.wikimedia.org/wiki/User:J.M.Garg)\non [Wikipedia](http://commons.wikimedia.org/wiki/File:Baya_Weaver_%28Ploceus_philippinus%29-_Male_W_IMG_0732.jpg).\nThis file is licensed under the [Creative Commons Attribution 3.0 Unported](http://creativecommons.org/licenses/by/3.0/deed.en)\nlicense.\n\n# Installation\n\n```sh\npip install baya\n```\n\nIf you wish to use mockldap during your development process with Baya, you can install it as part of the optional development dependencies by using:\n\n```sh\npip install baya[development]\n```\n\n```python\nINSTALLED_APPS = (\n    ...\n    'baya',\n    ...\n)\n\n# SessionMiddleware must be active\n\nAUTHENTICATION_BACKENDS = (\n    'baya.backend.NestedLDAPGroupsBackend',\n    # If you're already using django_auth_ldap.backend.LDAPBackend, delete it\n    'django.contrib.auth.backends.ModelBackend',\n)\n```\n\n\n# LDAP Prerequisites\n\nNote that you must be using `GroupOfNames` or `GroupOfUniqueNames` and not\n`PosixGroup`. You should also emable the `memberOf` overlay (but with some\neffort we can eliminate that requirement).\n\n# Configuration\n\nYou need to set up your ldap settings. If you already have a working version\nof `django_auth_ldap` then you're nearly finished. Make sure the following\nsettings are configured:\n\n```python\nimport ldap\nfrom django_auth_ldap.config import LDAPSearch\nfrom django_auth_ldap.config import NestedGroupOfNamesType\n\nAUTH_LDAP_GROUP_TYPE = NestedGroupOfNamesType()\nAUTH_LDAP_FIND_GROUP_PERMS = True\nAUTH_LDAP_MIRROR_GROUPS = True\n\nAUTH_LDAP_BIND_DN = 'cn=auth,dc=example,dc=com'\nAUTH_LDAP_BIND_PASSWORD = 'password'\nAUTH_LDAP_SERVER_URI = 'ldaps://ldap'\n\nAUTH_LDAP_USER_SEARCH = LDAPSearch(\n    'ou=People,dc=example,dc=com',\n    ldap.SCOPE_SUBTREE,\n    '(uid=%(user)s)')\n\nAUTH_LDAP_GROUP_SEARCH = LDAPSearch(\n    'ou=Access,dc=example,dc=com',\n    ldap.SCOPE_SUBTREE,\n    \"(objectClass=groupOfNames)\"\n)\n\n# Change this to True when testing locally to disable permissions checking\nBAYA_ALLOW_ALL = False\n\n# If you have a custom, internal-only login url, you can set this:\n# (If you don't set this, baya defaults to LOGIN_URL)\nBAYA_LOGIN_URL = \"/internal/login/url\"\n```\n\nOf course, change the values to match your actual setup.\n\n## Admin configuration\n\nThe django admin requires that users logging in have the `is_staff` flag set.\nYou should add this config to your settings if you use the django admin.\nSee also [admin](#admin).\n\n```python\nAUTH_LDAP_USER_FLAGS_BY_GROUP = {\n    'is_staff': ['cn=myapp_admin,ou=Access,dc=example,dc=com'],\n}\n```\n\n## Testing access permissions\n\nYou will not always have a connection to your production LDAP server, so Baya\nsupports a couple ways to develop locally and test your views.\n\n### Disable all permissions checking\n\nBe sure to never deploy this setting to production!\n\nThe easiest way to test your app locally is to just disable Baya entirely.\nYou can do this by enabling this setting:\n\n```python\n# settings.py\nBAYA_ALLOW_ALL = True\n```\n\nThis will allow all requests to your protected views and is useful if you're\njust testing that your view works, but don't currently care about the\naccess restrictions.\n\nOne drawback to this is that you cannot test admin views, due to the way\ndjango admin interacts with django-auth-ldap. It just has to have an LDAP\ndirectory to read from. If your views are protected admin views, then go to\nthe next section \"Use python-mock-ldap\".\n\n### Use python-mock-ldap\n\nIf you want to test a few views you can use\n[mockldap](http://pythonhosted.org//mockldap/). Place the following lines in\nyour urls.py file so it runs on django startup.\n\n```python\n# urls.py\n\npatterns = (...)\n\nfrom baya.mock_ldap_helpers import mock_ldap_setup\n\nmock_ldap_instance = mock_ldap_setup(\n    extra_users=[\n        ('my_user', 'group_1'),\n        ('my_user', 'group_b'),\n        ('other_user', 'group_a'),\n    ],\n    group_lineage=[\n        ('group_a', 'group_b'),  # group_b is a child of group_a\n    ]\n)\nmock_ldap_instance.start()\n\n# And you must update the ldap bind password to use the fake one\nfrom django.conf import settings\nsettings.AUTH_LDAP_BIND_PASSWORD = 'password'\n```\n\nKeep in mind that if you are manually setting groups in your test fixtures\ndjango-auth-ldap will overwrite all of that user's groups with the groups in\nLDAP. If your tests suddenly break due to group permissions problems, that's\na likely cause. For this reason I recommend you create new test users for\neach app.\n\nFor a more complete example, see [baya.tests.directory](baya/tests/directory.py).\n\n# Usage\n\n## Syntax\n\n### baya.permissions.requires([groups, get, post])\n\n* `groups`: A `baya.membership.BaseNode` child which all `GET` and `POST`\n  requests must pass.\n* `get`: A `baya.membership.BaseNode` child which all `GET` requests must pass.\n  AND-ed with the `groups` parameter.\n* `post`: A `baya.membership.BaseNode` child which all `POST` requests must\n  pass. AND-ed with the `groups` parameter.\n\nNote that if you specify `groups` and `get` or `post`, then the roles are `&`-ed\ntogether. This lets you specify roles common to both `GET` and `POST` requests,\nas well as further restrict each method accordingly.\n\n`requires` returns a function which takes your view or urlpattern as its only\nargument.\n\n```python\nfrom baya.permissions import requires\nfrom baya.membership import RolesNode as g\n\nadmin = g('admin')\nbilling_ro = g('billing_ro')\ncustomer_service = g('customer_service')\n\n# Only an admin may access this view\nrequires(admin)(view_or_url)\n\n# Anyone with 'billing_ro' permissions may access this view, but only an admin\n# may post. These two declarations result in the same behavior:\nrequires(billing_ro, post=admin)(view_or_url)\nrequires(get=billing_ro, post=(billing_ro & admin))\n\n# Customer service or anyone with billing_ro role may access the view, but only\n# an admin or customer service may post\nrequires(get=(customer_service | billing_ro), post=(admin | customer_service))(view_or_url)\n```\n\n### DENY_ALL\n\nFor convenience, there's a `DENY_ALL` permissions node which you can use to\ncompletely disable access to a view using a given class of HTTP verbs.\n\n```python\nfrom baya.permissions import requires\nfrom baya.permissions import DENY_ALL\nfrom baya.membership import RolesNode as g\n\n@requires(get=g('billing'), post=DENY_ALL)\ndef my_view(request):\n    ...\n```\n\n## urls.py\n\nYou can protect URLs individually or an entire import:\n\nDecorating the URLs is the preferred usage, since decorating the view methods\nthemselves makes you hunt around for the permissions.\n\n```python\nfrom django.conf.urls import url\nfrom django.views.generic import ListView\n\nfrom baya import requires\nfrom baya import RolesNode as g\n\nfrom .models import Blag\n\n\nurlpatterns = [\n    # Protect a single view\n    url(r'^$', requires(g('group1'), post=g('group2'))(ListView.as_view(model=Blag))),\n    # Protect an entire URL module include\n    url(r'^billing/', requires(get=g('billing_ro'), post=g('billing'))(include('my_app.billing.urls'))),\n]\n```\n\n**Note** Typing the same `g('my_group')` over and over is tedious, verbose,\nand prone to typos. A better pattern is to define the groups you'll be using\nas constants at the module level:\n\n```python\nfrom django.conf.urls import url\nfrom django.views.generic import ListView\n\nfrom baya import requires\nfrom baya import RolesNode as g\n\nfrom .models import Blag\nfrom .models import Entry\n\nGROUP1 = g('group1')\nGROUP2 = g('group2')\nBILLING = g('billing')\nBILLING_RO = g('billing_ro')\n\nSUPER_GROUP = GROUP1 & GROUP2\n\nurlpatterns = [\n    # Protect a single view\n    url(r'^$', requires(GROUP1, post=GROUP2)(ListView.as_view(model=Blag))),\n    url(r'^super/$', requires(SUPER_GROUP)(ListView.as_view(model=Entry))),\n    # Protect an entire URL module include\n    url(r'^billing/', requires(get=BILLING_RO, post=BILLING)(include('my_app.billing.urls'))),\n]\n```\n\n\n## views.py\n\nDecorate regular method-based views. Avoid this if possible, preferring url\ndecoration.\n\n```python\nfrom django.http import HttpResponse\n\nfrom baya import requires\nfrom baya import RolesNode as g\n\n\n@requires(g('A'))\ndef my_simple_view(request):\n    return HttpResponse(\"my_simple_view response\")\n\n@requires(g('Aaa'), get=g('A_RO') | g('B_RO'), post=g('A') | g('B'))\ndef my_view(request):\n    return HttpResponse(\"my_view response\")\n```\n\n## admin\n\nThe admin site takes a little more work. Rather than use\n`django.contrib.admin.site` you will instead have to instantiate\n`baya.admin.sites.NestedGroupsAdminSite`. You will also have to use the\n`baya.admin.BayaModelAdmin` in your `ModelAdmin` classes.\n\nYou have a couple more options with django admin option classes than you\nnormally do with regular views. You can specify different permissions for\nthe django admin's create, read, update, and delete views.\n\nNote that you can also decorate the `ModelAdmins` individually or wrap them\nin `requires` at `site.register` time if you want a given permission to apply\nto every request, and not just a particular CRUD verb.\n\n```python\nfrom django.contrib import admin\nfrom django.conf.urls import url\nfrom django.shortcuts import render\n\nfrom baya import requires\nfrom baya import RolesNode as g\nfrom baya.admin import BayaModelAdmin\nfrom baya.admin.sites import NestedGroupsAdminSite\nfrom baya.permissions import DENY_ALL\n\nfrom testsite.example.models import Blag\nfrom testsite.example.models import Entry\n\n\n@requires(get=g('Aaa'), post=g('A'))\nclass BlagOptions(BayaModelAdmin):\n    fields = list_display = ['name']\n\n    def get_urls(self):\n        urls = super(BlagOptions, self).get_urls()\n\n        # This inner url ends up protected like this:\n        # requires(get=\"Aaa\", post=\"a\")(requires(\"B\")(self.inner))\n        urls += [\n            url(r'inner_admin_view',\n                requires(g('B'))(self.inner),\n                name='inner')\n        ]\n        return urls\n\n    def inner(self, request):\n        return render(...)\n\n\nclass EntryOptions(BayaModelAdmin):\n    DELETE = DENY_ALL\n\n\nclass CommentOptions(BayaModelAdmin):\n    CREATE = g('A')\n    READ = g('Aaa')\n    UPDATE = g('Aa')\n    DELETE = DENY_ALL\n\n\nsite = NestedGroupsAdminSite(name='example')\nsite.register(Blag, BlagOptions)\nsite.register(Entry, requires(g('Aa'))(EntryOptions))\nsite.register(Comment, CommentOptions)\n```\n\nNote that all of the urls returned by your model admin's `get_urls` method\nwill be protected with the appropriate permissions. You can further restrict\nadmin inner urls by using the `requires` decorator there.\n\nYou must also add configuration for the `is_staff` flag. See\n[admin configuration](#admin-configuration).\n\n# Development Set Up\n\n## Django\n\nFirst check this out and install the requirements:\n\n```sh\nmake setup\ncd testsite\n./manage.py syncdb\n```\n\nIf installation of python-ldap fails on Mac OSX with `fatal error: 'sasl.h' file not found` or similar missing header files then run the following to manualy install `python-ldap`.\n\n```sh\nsource .venv/bin/activate\npip install python-ldap \\\n   --global-option=build_ext \\\n   --global-option=\"-I$(xcrun --show-sdk-path)/usr/include/sasl\"\n```\n\nNow `make setup` should work.\n\n# Run\n\n```sh\n# in testsite/\n./manage.py runserver\n```\n\nRunserver and log in to http://localhost:8000/example/ using one of the mock\nusers in the directory module. Play around with the `@requires` decorator in\n`tests.testsite.example.admin` to see the ldap authorization working.\n\n# Testing\n```sh\nmake test\n```\n\nbuild_revision: None\nbuild_pipeline: None\nbuild_label:    None",
    "docs_url": null,
    "download_url": "https://github.com/counsyl/baya/tarball/v1.0.0",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/counsyl/baya",
    "keywords": null,
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "baya",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/baya/",
    "release_url": "https://pypi.org/project/baya/1.0.0/",
    "requires_python": null,
    "summary": "Nested LDAP Groups authorization.",
    "version": "1.0.0"
  },
  "releases": {
    "0.1.17": [
      {
        "comment_text": "",
        "digests": {
          "md5": "b30fc113cdf38bd435e9e3123c5875b8",
          "sha256": "2ed3113d4e5526142a34325a4f2bbf566e514e5868903247e608cd17dbbc010b"
        },
        "downloads": 385,
        "filename": "baya-0.1.17.tar.gz",
        "has_sig": false,
        "md5_digest": "b30fc113cdf38bd435e9e3123c5875b8",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21288,
        "upload_time": "2016-05-21T00:01:26",
        "url": "https://files.pythonhosted.org/packages/08/90/3218930eeb46f441018c1e2a321b2bdc0b826fad09b1bbd8d067a0e82037/baya-0.1.17.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "10d283dd4fbb92a19917948d191d728c",
          "sha256": "ea7921fe4014ee89cc17632cd02943f68d9158097d796298e4f1a8bf6b2f2710"
        },
        "downloads": 175,
        "filename": "baya-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "10d283dd4fbb92a19917948d191d728c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 21318,
        "upload_time": "2016-09-26T19:06:09",
        "url": "https://files.pythonhosted.org/packages/b0/4a/230be788f7be698956d4a391d1a18e773401d23083977a96c68fe51c1ad2/baya-1.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "10d283dd4fbb92a19917948d191d728c",
        "sha256": "ea7921fe4014ee89cc17632cd02943f68d9158097d796298e4f1a8bf6b2f2710"
      },
      "downloads": 175,
      "filename": "baya-1.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "10d283dd4fbb92a19917948d191d728c",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 21318,
      "upload_time": "2016-09-26T19:06:09",
      "url": "https://files.pythonhosted.org/packages/b0/4a/230be788f7be698956d4a391d1a18e773401d23083977a96c68fe51c1ad2/baya-1.0.0.tar.gz"
    }
  ]
}