{
  "info": {
    "author": "Timur Rubeko",
    "author_email": "t.rubeko@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
      "Operating System :: MacOS :: MacOS X",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX",
      "Programming Language :: Python",
      "Topic :: Software Development :: Code Generators"
    ],
    "description": "Clich\u00e9\n======\n\nClich\u00e9 is the tool to create Python application skeletons from templates.\n\nTemplates are Git repositories, support custom file patterns and virtualenv\ninstallation, as well as installation of any requirements (dependencies). \n\nWhich gives Clich\u00e9 users the ability to start new projects in just a few\nseconds.\n\nTemplates may be public Git repositories, which gives Clich\u00e9 users an ability\nto share and reuse templates. Clich\u00e9 provides few templates itself, but relies\non the community to create even more end even better templates.\n\n\nWhy using Clich\u00e9\n----------------\n\nHow many times did you start, let's say, new Flask or Django application? \n\nAnd when you do so, do you copy a basic application structure from a previous\nsimilar application implemented, and then clean up the code or rename all the\npackages?\n\nAnd how often did you forget to rename one package?\n\nAnd even if some tools provide means to create basic application structures,\nthey sometimes don't work - you probably want a more simple template, or, the\ncontrary - a more sophisticated one and the one well adapted to your needs.\n\nFinally, wouldn't it be nice to just use someone else application template\nwhich already exists?\n\nAnd this is where Clich\u00e9 stands out...\n\nFeatures\n--------\n\n- creates an application skeleton from an arbitrary Git repository, referred\n  hereafter as a *template*\n\n- the template may be any Git repository, local or hosted, private or public \n  (so, yes - templates may be shared)\n\n- templates may contain any directory structure or any files\n\n- files may contain substitution placeholders, which will be replaced with \n  values given by a user or with valid defaults\n\n- file names and directory names may contain substitution placeholders too (no\n  need to rename packages any more!)\n\n- creates a virtualenv for you, unless asked to not to\n\n- installs dependencies into the virtualenv, if any are defined in the template\n\n- is a command-line tool; it is interactive unless asked otherwise\n\n\nInstallation\n------------\n\nUse ``easy_install`` or ``pip`` to install Clich\u00e9. For example::\n\n    $ pip install cliche\n\n\nUsage\n-----\n\nClich\u00e9 installs a ``cliche`` command-line utility. Use ``--help`` to find out\nmore on its usage. Few examples are hereafter::\n\n    $ cliche --repo https://github.com/trubeko/template-sample.git\n\nwill clone the specified template repository and *expand* it into current \ndirectory - ask for values to be used in the file names and file content\npatterns (if any are defined by the template used - like root package name or\nan application title), substitute them in the template; install the virtualenv\nand populate it with dependencies if any are declared by the template\n\n::\n\n    $ cliche --repo https://github.com/trubeko/template-sample.git --directory new_app_directory\n\nwill do the same but will expand to the ``new_app_directory``\n\n::\n\n    $ cliche --force-yes --repo https://github.com/trubeko/template-sample.git\n\nwill also suppress any interactive prompts which allows it to be used in an\nautomated environment\n\n::\n\n    $ cliche --no-virtualenv --repo https://github.com/trubeko/template-sample.git\n\nwill also suppress the creation of the virtualenv, even if requirements are defined\nin the template; you can always create the virtualenv manually later, and \npopulate it with the defined requirements, as they are defined in a standard \n``pip`` requirements.txt file\n\n::\n\n    $ cliche --help\n\nwill show the detailed usage information\n\n\nCreating a template\n-------------------\n\nIn a nutshell, a template is any Git repository. It means that any Git \nrepository may be cloned via Clich\u00e9. However, it doesn't necessarily make\nsense to clone an arbitrary repository. As Clich\u00e9 adds more functionality\nthan just cloning, there are few things you can do to the repository to use\nit as the template effectively.\n\nAs a reference, one may use the sample template used to test the Clich\u00e9 tool\nitself: https://github.com/trubeko/template-sample . This template uses all\nof the Clich\u00e9 features described hereafter.\n\n\nAdd basic application structure\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nClich\u00e9 will clone the repository with Git, so it will deliver it \"as is\" at \nfirst. Commit all files you want to have in a template as you would do\nusually with Git.\n\n    Tip: add a license file to the repository; for example, all Clich\u00e9-provided\n    templates are licensed under LGPL (while Clich\u00e9 itself is under GPL)\n\n    Tip: add README explaining the expected use of the template\n\n\nUsing string substitutions\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nAny **directory name**, **file name** or text **file content** may contain a\nsubstitution placeholder, which will be replaced with a value given by the end\nuser upon the clone.\n\nPlaceholders themselves should follow the rules as defined in \n`Template stings <http://docs.python.org/2/library/string.html#template-strings>`_\nin the Python documentation. Basically, it is a ``${placeholder_name}`` or\n``$placeholder_name`` pattern. It is recommended to use the former in the\nfiles' content, and the latter in file names. Use ``$$`` to mask the ``$`` \nsymbol anywhere in the template (or otherwise it will be accepted as a \nplaceholder).\n\nFor example, typically, every application has its very own name of the root\npackage - which will be used as the package directory name and may be as well\nreferred in other source files (although, using relative imports is sometimes\na better idea). In this case, directory layout may look like::\n\n    \\src\n        \\$root_package\\__init__.py\n                      \\main.py\n    \\test\n        \\test_$root_package.py\n\nWhere ``test_$root_package.py`` may contain the following::\n\n    import unittest\n    from ${root_package} import main\n\n    class ${app_name}Test(unittest.TestCase):\n        ...\n\nIn this example we've used two *parameters*: ``root_package`` and ``app_name``.\nWhen using Clich\u00e9, parameters should be predefined in a template configuration\nfile, for them to be identified by Clich\u00e9 before expanding the template.\n\nWhen expanding the template, for every declared parameter, Clich\u00e9 will ask user\nto enter an actual value to substitute in place of it, and will as well propose\na valid default (defined in the template configuration file). Clich\u00e9 can as well\nrun in a *silent* mode (without interactive prompts), in which case it will use\ndefaults for all parameters.\n\n    Hint: if some parameter is used in the template, but is not defined in the \n    template configuration file, the template will fail to expand; declaring\n    all parameters explicitly is mandatory.\n\n\nTemplate configuration file\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe template configuration file is only used (today) to hold the parameters to\nsubstitute in the template and their defaults. It is supposed to be extended\nlater with more configuration options, but as well be kept backward-compatible\nwith older specifications.\n\nThe template configuration file is a ``template.json`` file in the root of the \ntemplate, with a predefined structure::\n\n    {\n        \"parameters\": {\n            \"param_name\": \"default_value\",\n            ...\n        }\n    }\n\nwhere ``param_name`` and ``default_value`` can be arbitrary text values, as\nlong as ``param_name`` conforms to Python's\n`Template stings <http://docs.python.org/2/library/string.html#template-strings>`_\nrequirements.\n\n\nDefining requirements (dependencies)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen expanding the template, Clich\u00e9 will install a virtualenv (unless asked \notherwise) and will as well install any dependencies declared in the \n``requirements.txt`` file, if the one exists in the template's root directory.\n\n``requirements.txt`` file is in fact consumed by ``pip``, hence the \n`file format <http://www.pip-installer.org/en/latest/cookbook.html#requirements-files>`_.\nBriefly, every line in a file declares one python package to install,\nand, optionally, required version. For example::\n\n    Flask\n    mock==1.0.1\n    nose>=1.2.1",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/trubeko/cliche",
    "keywords": null,
    "license": "GPL",
    "maintainer": null,
    "maintainer_email": null,
    "name": "cliche",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/cliche/",
    "release_url": "https://pypi.org/project/cliche/0.1/",
    "requires_python": null,
    "summary": "Tool to create Python application skeletons from templates",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c32f0b079d87c63a922306938cbb4405",
          "sha256": "d9dcd792d733d42f6277b4981ec5b3ff317a9c9be6b4b72b9b8d8cf7f5c4fb01"
        },
        "downloads": 2800,
        "filename": "cliche-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c32f0b079d87c63a922306938cbb4405",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 5714,
        "upload_time": "2013-12-09T22:08:55",
        "url": "https://files.pythonhosted.org/packages/0d/61/3ea337579fe526ba67845854ae61228ad54d02859b77a709519c4aec0a40/cliche-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "c32f0b079d87c63a922306938cbb4405",
        "sha256": "d9dcd792d733d42f6277b4981ec5b3ff317a9c9be6b4b72b9b8d8cf7f5c4fb01"
      },
      "downloads": 2800,
      "filename": "cliche-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "c32f0b079d87c63a922306938cbb4405",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 5714,
      "upload_time": "2013-12-09T22:08:55",
      "url": "https://files.pythonhosted.org/packages/0d/61/3ea337579fe526ba67845854ae61228ad54d02859b77a709519c4aec0a40/cliche-0.1.tar.gz"
    }
  ]
}