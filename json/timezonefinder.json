{
  "info": {
    "author": "J. Michelfeit",
    "author_email": "python@michelfe.it",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Localization"
    ],
    "description": "==============\ntimezonefinder\n==============\n\n.. image:: https://img.shields.io/travis/MrMinimal64/timezonefinder.svg?branch=master\n    :target: https://travis-ci.org/MrMinimal64/timezonefinder\n\n\n.. image:: https://img.shields.io/pypi/wheel/timezonefinder.svg\n    :target: https://pypi.python.org/pypi/timezonefinder\n\n\n.. image:: https://img.shields.io/pypi/v/timezonefinder.svg\n    :target: https://pypi.python.org/pypi/timezonefinder\n\n.. image:: https://anaconda.org/conda-forge/timezonefinder/badges/version.svg\n    :target: https://anaconda.org/conda-forge/timezonefinder\n\n\n\nThis is a fast and lightweight python project for looking up the corresponding\ntimezone for a given lat/lng on earth entirely offline.\n\n\nCurrent data set in use: `timezone-boundary-builder <https://github.com/evansiroky/timezone-boundary-builder>`__. version: 2017c (Oct 2017, since 2.1.1)\n\n\nNOTE: the huge underlying timezone boundary data set (s. below) in use now blew up the size of this package. It had to be changed, because the smaller \"tz_world\" data set is not being maintained any more. I originally wanted to keep this as lightweight as possible, but it is even more important that the data it is up to date.\nIn case size and speed matter more you than actuality, consider checking out older versions of timezonefinder or even timezoenfinderL.\n\nNOTE: The timezone polygons also do NOT follow the shorelines any more (as they did with tz_world). This makes the results of closest_timezone_at() somewhat meaningless (as with timezonefinderL).\n\n\nAlso see:\n`GitHub <https://github.com/MrMinimal64/timezonefinder>`__,\n`PyPI <https://pypi.python.org/pypi/timezonefinder/>`__,\n`conda-forge feedstock <https://github.com/conda-forge/timezonefinder-feedstock>`__,\n`timezone_finder <https://github.com/gunyarakun/timezone_finder>`__: ruby port,\n`timezonefinderL <https://github.com/MrMinimal64/timezonefinderL>`__: faster, lighter (but outdated) version\n`timezonefinderL GUI <http://timezonefinder.michelfe.it/gui>`__: demo and online API of timezonefinderL\n\n\nThis project is derived from and has been successfully tested against\n`pytzwhere <https://pypi.python.org/pypi/tzwhere>`__\n(`github <https://github.com/pegler/pytzwhere>`__), but aims at providing\nimproved performance and usability.\n\n``pytzwhere`` is parsing a 76MB .csv file (floats stored as strings!) completely into memory and computing shortcuts from this data on every startup.\nThis is time, memory and CPU consuming. Additionally calculating with floats is slow,\nkeeping those 4M+ floats in the RAM all the time is unnecessary and the precision of floats is not even needed in this case (s. detailed comparison and speed tests below).\n\n\nDependencies\n============\n\n(``python``)\n``numpy``\n\n**Optional:**\n\n``Numba`` (https://github.com/numba/numba) and its Requirement `llvmlite <http://llvmlite.pydata.org/en/latest/install/index.html>`_\n\n\nThis is only for precompiling the time critical algorithms. When you only look up a\nfew points once in a while, the compilation time is probably outweighing\nthe benefits. When using ``certain_timezone_at()`` and especially\n``closest_timezone_at()`` however, I highly recommend using ``numba``!\n\nInstallation\n============\n\n\nInstallation with conda: see instructions at `conda-forge feedstock <https://github.com/conda-forge/timezonefinder-feedstock>`__\n\n\nInstallation with pip:\nin the command line:\n\n::\n\n    pip install timezonefinder\n\n\n\n\n\nUsage\n=====\n\nBasics:\n-------\n\nin Python:\n\n::\n\n    from timezonefinder import TimezoneFinder\n\n    tf = TimezoneFinder()\n\n\nfor testing if numba is being used:\n(if the import of the optimized algorithms worked)\n\n::\n\n    TimezoneFinder.using_numba()   # this is a static method returning True or False\n\n\n**timezone_at():**\n\nThis is the default function to check which timezone a point lies within (similar to tzwheres ``tzNameAt()``).\nIf no timezone has been found, ``None`` is being returned.\n\n**PLEASE NOTE:** This approach is optimized for speed and the common case to only query points within a timezone.\nThe last possible timezone in proximity is always returned (without checking if the point is really included).\nSo results might be misleading for points outside of any timezone.\n\n\n::\n\n    longitude = 13.358\n    latitude = 52.5061\n    tf.timezone_at(lng=longitude, lat=latitude) # returns 'Europe/Berlin'\n\n\n**certain_timezone_at():**\n\nNOTE: The timezone polygons do NOT follow the shorelines any more!\n\nThis function is for making sure a point is really inside a timezone. It is slower, because all polygons (with shortcuts in that area)\nare checked until one polygon is matched.\n\n\n::\n\n    tf.certain_timezone_at(lng=longitude, lat=latitude) # returns 'Europe/Berlin'\n\n\n**closest_timezone_at():**\n\nNOTE: The timezone polygons do NOT follow the shorelines any more! This causes the computed distance from a timezone polygon to be not really meaninful/accurate.\n\nOnly use this when the point is not inside a polygon, because the approach otherwise makes no sense.\nThis returns the closest timezone of all polygons within +-1 degree lng and +-1 degree lat (or None).\n\n::\n\n    longitude = 12.773955\n    latitude = 55.578595\n    tf.closest_timezone_at(lng=longitude, lat=latitude) # returns 'Europe/Copenhagen'\n\nOther options:\nTo increase search radius even more, use the ``delta_degree``-option:\n\n::\n\n    tf.closest_timezone_at(lng=longitude, lat=latitude, delta_degree=3)\n\n\nThis checks all the polygons within +-3 degree lng and +-3 degree lat.\nI recommend only slowly increasing the search radius, since computation time increases quite quickly\n(with the amount of polygons which need to be evaluated). When you want to use this feature a lot,\nconsider using ``Numba`` to save computing time.\n\n\nAlso keep in mind that x degrees lat are not the same distance apart than x degree lng (earth is a sphere)!\nAs a consequence getting a result does NOT mean that there is no closer timezone! It might just not be within the area being queried.\n\nWith ``exact_computation=True`` the distance to every polygon edge is computed (way more complicated), instead of just evaluating the distances to all the vertices.\nThis only makes a real difference when polygons are very close.\n\n\nWith ``return_distances=True`` the output looks like this:\n\n( 'tz_name_of_the_closest_polygon',[ distances to every polygon in km], [tz_names of every polygon])\n\nNote that some polygons might not be tested (for example when a zone is found to be the closest already).\nTo prevent this use ``force_evaluation=True``.\n\n::\n\n    longitude = 42.1052479\n    latitude = -16.622686\n    tf.closest_timezone_at(lng=longitude, lat=latitude, delta_degree=2,\n                                        exact_computation=True, return_distances=True, force_evaluation=True)\n    '''\n    returns ('uninhabited',\n    [80.66907784731714, 217.10924866254518, 293.5467252349301, 304.5274937839159, 238.18462606485667, 267.918674688949, 207.43831938964408, 209.6790144988553, 228.42135641542546],\n    ['uninhabited', 'Indian/Antananarivo', 'Indian/Antananarivo', 'Indian/Antananarivo', 'Africa/Maputo', 'Africa/Maputo', 'Africa/Maputo', 'Africa/Maputo', 'Africa/Maputo'])\n    '''\n\n\n\n**get_geometry:**\n\n\nfor querying timezones for their geometric shape use ``get_geometry()``.\noutput format: ``[ [polygon1, hole1,...), [polygon2, ...], ...]``\nand each polygon and hole is itself formated like: ``([longitudes], [latitudes])``\nor ``[(lng1,lat1), (lng2,lat2),...]`` if ``coords_as_pairs=True``.\n\n::\n\n    tf.get_geometry(tz_name='Africa/Addis_Ababa', coords_as_pairs=True)\n\n    tf.get_geometry(tz_id=400, use_id=True)\n\n\n\n\nFurther application:\n--------------------\n\n**To maximize the chances of getting a result in a** ``Django`` **view it might look like:**\n\n::\n\n    def find_timezone(request, lat, lng):\n        lat = float(lat)\n        lng = float(lng)\n\n        try:\n            timezone_name = tf.timezone_at(lng=lng, lat=lat)\n            if timezone_name is None:\n                timezone_name = tf.closest_timezone_at(lng=lng, lat=lat)\n                # maybe even increase the search radius when it is still None\n\n        except ValueError:\n            # the coordinates were out of bounds\n            # {handle error}\n\n        # ... do something with timezone_name ...\n\n**To get an aware datetime object from the timezone name:**\n\n::\n\n    # first pip install pytz\n    from pytz import timezone, utc\n    from pytz.exceptions import UnknownTimeZoneError\n\n    # tzinfo has to be None (means naive)\n    naive_datetime = YOUR_NAIVE_DATETIME\n\n    try:\n        tz = timezone(timezone_name)\n        aware_datetime = naive_datetime.replace(tzinfo=tz)\n        aware_datetime_in_utc = aware_datetime.astimezone(utc)\n\n        naive_datetime_as_utc_converted_to_tz = tz.localize(naive_datetime)\n\n    except UnknownTimeZoneError:\n        # ... handle the error ...\n\nalso see the `pytz Doc <http://pytz.sourceforge.net/>`__.\n\n**parsing the data:**\n\n\nDownload the latest ``timezones.geojson.zip`` file from `GitHub <https://github.com/evansiroky/timezone-boundary-builder/releases>`__, unzip and\nplace the ``combined.json`` inside the timezonefinder folder. Now run the ``file_converter.py`` until the compilation of the binary files is completed.\n\n\n**Calling timezonefinder from the command line:**\n\nWith -v you get verbose output, without it only the timezone name is printed.\nInternally this is calling the function timezone_at(). Please note that this is slow.\n\n::\n\n    python timezonefinder.py lng lat [-v]\n\n\n\n\n\nKnown Issues\n============\n\nI ran tests for approx. 5M points and the only differences (in comparison to tzwhere) are due to the outdated\ndata being used by tzwhere.\n\n\nContact\n=======\n\nMost certainly there is stuff I missed, things I could have optimized even further etc. I would be really glad to get some feedback on my code.\n\n\nIf you notice that the tz data is outdated, encounter any bugs, have\nsuggestions, criticism, etc. feel free to **open an Issue**, **add a Pull Requests** on Git or ...\n\ncontact me: *[python] {*-at-*} [michelfe] {-*dot*-} [it]*\n\n\nCredits\n=======\n\nThanks to:\n\n`Adam <https://github.com/adamchainz>`__ for adding organisational features to the project and for helping me with publishing and testing routines.\n\n`cstich <https://github.com/cstich>`__ for the little conversion script (.shp to .json).\n\n`snowman2 <https://github.com/snowman2>`__ for creating the conda-forge recipe.\n\n`synapticarbors <https://github.com/synapticarbors>`__ for fixing Numba import with py27.\n\nLicense\n=======\n\n``timezonefinder`` is distributed under the terms of the MIT license\n(see LICENSE.txt).\n\n\nComparison to pytzwhere\n=======================\n\nIn comparison most notably initialisation time and memory usage are\nsignificantly reduced, while the algorithms yield the same results and are as fast or even faster\n(depending on the dependencies used, s. test results below). pytzwhere is using up to 450MB!!! of RAM while in use (with shapely and numpy active) and this package uses at most 40MB (= encountered memory consumption of the python process).\nIn some cases ``pytzwhere`` even does not find anything and ``timezonefinder`` does, for example\nwhen only one timezone is close to the point.\n\n**Similarities:**\n\n-  results\n\n-  data being used\n\n\n**Differences:**\n\n-  highly decreased memory usage\n\n-  highly reduced start up time\n\n-  usage of 32bit int (instead of 64+bit float) reduces computing time and memory consumption\n\n-  the precision of 32bit int is still high enough (according to my calculations worst resolution is 1cm at the equator -> far more precise than the discrete polygons)\n\n-  the data is stored in memory friendly binary files (approx. 41MB in total, original data 120MB .json)\n\n-  data is only being read on demand (not completely read into memory if not needed)\n\n-  precomputed shortcuts are included to quickly look up which polygons have to be checked\n\n-  available proximity algorithm ``closest_timezone_at()``\n\n-  function ``get_geometry()`` enables querying timezones for their geometric shape (= multipolygon with holes)\n\n-  further speedup possible by the use of ``numba`` (code precompilation)\n\n\n\ntest results\\*:\n===============\n\n::\n\n\n    test correctness:\n\n    results timezone_at()\n    LOCATION             | EXPECTED             | COMPUTED             | ==\n    ====================================================================\n    Arlington, TN        | America/Chicago      | America/Chicago      | OK\n    Memphis, TN          | America/Chicago      | America/Chicago      | OK\n    Anchorage, AK        | America/Anchorage    | America/Anchorage    | OK\n    Eugene, OR           | America/Los_Angeles  | America/Los_Angeles  | OK\n    Albany, NY           | America/New_York     | America/New_York     | OK\n    Moscow               | Europe/Moscow        | Europe/Moscow        | OK\n    Los Angeles          | America/Los_Angeles  | America/Los_Angeles  | OK\n    Moscow               | Europe/Moscow        | Europe/Moscow        | OK\n    Aspen, Colorado      | America/Denver       | America/Denver       | OK\n    Kiev                 | Europe/Kiev          | Europe/Kiev          | OK\n    Jogupalya            | Asia/Kolkata         | Asia/Kolkata         | OK\n    Washington DC        | America/New_York     | America/New_York     | OK\n    St Petersburg        | Europe/Moscow        | Europe/Moscow        | OK\n    Blagoveshchensk      | Asia/Yakutsk         | Asia/Yakutsk         | OK\n    Boston               | America/New_York     | America/New_York     | OK\n    Chicago              | America/Chicago      | America/Chicago      | OK\n    Orlando              | America/New_York     | America/New_York     | OK\n    Seattle              | America/Los_Angeles  | America/Los_Angeles  | OK\n    London               | Europe/London        | Europe/London        | OK\n    Church Crookham      | Europe/London        | Europe/London        | OK\n    Fleet                | Europe/London        | Europe/London        | OK\n    Paris                | Europe/Paris         | Europe/Paris         | OK\n    Macau                | Asia/Macau           | Asia/Macau           | OK\n    Russia               | Asia/Yekaterinburg   | Asia/Yekaterinburg   | OK\n    Salo                 | Europe/Helsinki      | Europe/Helsinki      | OK\n    Staffordshire        | Europe/London        | Europe/London        | OK\n    Muara                | Asia/Brunei          | Asia/Brunei          | OK\n    Puerto Montt seaport | America/Santiago     | America/Santiago     | OK\n    Akrotiri seaport     | Asia/Nicosia         | Asia/Nicosia         | OK\n    Inchon seaport       | Asia/Seoul           | Asia/Seoul           | OK\n    Nakhodka seaport     | Asia/Vladivostok     | Asia/Vladivostok     | OK\n    Truro                | Europe/London        | Europe/London        | OK\n    Aserbaid. Enklave    | Asia/Baku            | Asia/Baku            | OK\n    Tajikistani Enklave  | Asia/Dushanbe        | Asia/Dushanbe        | OK\n    Busingen Ger         | Europe/Busingen      | Europe/Busingen      | OK\n    Genf                 | Europe/Zurich        | Europe/Zurich        | OK\n    Lesotho              | Africa/Maseru        | Africa/Maseru        | OK\n    usbekish enclave     | Asia/Tashkent        | Asia/Tashkent        | OK\n    usbekish enclave     | Asia/Tashkent        | Asia/Tashkent        | OK\n    Arizona Desert 1     | America/Denver       | America/Denver       | OK\n    Arizona Desert 2     | America/Phoenix      | America/Phoenix      | OK\n    Arizona Desert 3     | America/Phoenix      | America/Phoenix      | OK\n    Far off Cornwall     | None                 | None                 | OK\n\n    certain_timezone_at():\n    LOCATION             | EXPECTED             | COMPUTED             | Status\n    ====================================================================\n    Arlington, TN        | America/Chicago      | America/Chicago      | OK\n    Memphis, TN          | America/Chicago      | America/Chicago      | OK\n    Anchorage, AK        | America/Anchorage    | America/Anchorage    | OK\n    Eugene, OR           | America/Los_Angeles  | America/Los_Angeles  | OK\n    Albany, NY           | America/New_York     | America/New_York     | OK\n    Moscow               | Europe/Moscow        | Europe/Moscow        | OK\n    Los Angeles          | America/Los_Angeles  | America/Los_Angeles  | OK\n    Moscow               | Europe/Moscow        | Europe/Moscow        | OK\n    Aspen, Colorado      | America/Denver       | America/Denver       | OK\n    Kiev                 | Europe/Kiev          | Europe/Kiev          | OK\n    Jogupalya            | Asia/Kolkata         | Asia/Kolkata         | OK\n    Washington DC        | America/New_York     | America/New_York     | OK\n    St Petersburg        | Europe/Moscow        | Europe/Moscow        | OK\n    Blagoveshchensk      | Asia/Yakutsk         | Asia/Yakutsk         | OK\n    Boston               | America/New_York     | America/New_York     | OK\n    Chicago              | America/Chicago      | America/Chicago      | OK\n    Orlando              | America/New_York     | America/New_York     | OK\n    Seattle              | America/Los_Angeles  | America/Los_Angeles  | OK\n    London               | Europe/London        | Europe/London        | OK\n    Church Crookham      | Europe/London        | Europe/London        | OK\n    Fleet                | Europe/London        | Europe/London        | OK\n    Paris                | Europe/Paris         | Europe/Paris         | OK\n    Macau                | Asia/Macau           | Asia/Macau           | OK\n    Russia               | Asia/Yekaterinburg   | Asia/Yekaterinburg   | OK\n    Salo                 | Europe/Helsinki      | Europe/Helsinki      | OK\n    Staffordshire        | Europe/London        | Europe/London        | OK\n    Muara                | Asia/Brunei          | Asia/Brunei          | OK\n    Puerto Montt seaport | America/Santiago     | America/Santiago     | OK\n    Akrotiri seaport     | Asia/Nicosia         | Asia/Nicosia         | OK\n    Inchon seaport       | Asia/Seoul           | Asia/Seoul           | OK\n    Nakhodka seaport     | Asia/Vladivostok     | Asia/Vladivostok     | OK\n    Truro                | Europe/London        | Europe/London        | OK\n    Aserbaid. Enklave    | Asia/Baku            | Asia/Baku            | OK\n    Tajikistani Enklave  | Asia/Dushanbe        | Asia/Dushanbe        | OK\n    Busingen Ger         | Europe/Busingen      | Europe/Busingen      | OK\n    Genf                 | Europe/Zurich        | Europe/Zurich        | OK\n    Lesotho              | Africa/Maseru        | Africa/Maseru        | OK\n    usbekish enclave     | Asia/Tashkent        | Asia/Tashkent        | OK\n    usbekish enclave     | Asia/Tashkent        | Asia/Tashkent        | OK\n    Arizona Desert 1     | America/Denver       | America/Denver       | OK\n    Arizona Desert 2     | America/Phoenix      | America/Phoenix      | OK\n    Arizona Desert 3     | America/Phoenix      | America/Phoenix      | OK\n    Far off Cornwall     | None                 | None                 | OK\n\n    closest_timezone_at():\n    LOCATION             | EXPECTED             | COMPUTED             | Status\n    ====================================================================\n    Arlington, TN        | America/Chicago      | America/Chicago      | OK\n    Memphis, TN          | America/Chicago      | America/Chicago      | OK\n    Anchorage, AK        | America/Anchorage    | America/Anchorage    | OK\n    Shore Lake Michigan  | America/New_York     | America/New_York     | OK\n    English Channel1     | Europe/London        | Europe/London        | OK\n    English Channel2     | Europe/Paris         | Europe/Paris         | OK\n    Oresund Bridge1      | Europe/Stockholm     | Europe/Stockholm     | OK\n    Oresund Bridge2      | Europe/Copenhagen    | Europe/Copenhagen    | OK\n\n\n    Speed Tests:\n    _________________________\n    shapely: OFF (tzwhere)\n    Numba: OFF (timezonefinder)\n\n\n    Startup times:\n    tzwhere: 0:00:07.875212\n    timezonefinder: 0:00:00.000688\n    11445.53 times faster\n\n    _________________________\n    shapely: ON (tzwhere)\n    Numba: ON (timezonefinder)\n\n\n    Startup times:\n    tzwhere: 0:00:29.365294\n    timezonefinder: 0:00:00.000888\n    33068.02 times faster\n\n\n    NOTE: all the other test are not expressive atm, because tz_where is using very outdated data\n\n\n    \\* System: MacBookPro 2,4GHz i5 (2014) 4GB RAM pytzwhere with numpy active\n\n    \\*\\*mismatch: pytzwhere finds something and then timezonefinder finds\n    something else\n\n    \\*\\*\\*realistic queries: just points within a timezone (= pytzwhere\n    yields result)\n\n    \\*\\*\\*\\*random queries: random points on earth\n\n\nChangelog\n=========\n\n2.1.2 (2017-11-20)\n------------------\n\n* bugfix: possibly uninitialized variable in closest_timezone_at()\n\n\n2.1.1 (2017-11-20)\n------------------\n\n* updated the data to `2017c <https://github.com/evansiroky/timezone-boundary-builder/releases/tag/2017c>`__\n* minor improvements in code style and readme\n* include publishing routine script\n\n\n2.1.0 (2017-05-19)\n------------------\n\n* updated the data to `2017a <https://github.com/evansiroky/timezone-boundary-builder/releases/tag/2017a>`__ (tz_world is not being maintained any more)\n* the file_converter has been updated to parse the new format of .json files\n* the new data is much bigger (based on OSM Data, +40MB). I am sorry for this but its still better than small outdated data!\n* in case size and speed matter more you than actuality, you can still check out older versions of timezonefinder(L)\n* the new timezone polygons are not limited to the coastlines, but they are including some large parts of the sea. This makes the results of closest_timezone_at() somewhat meaningless (as with timezonefinderL).\n* the polygons can not be simplified much more and as a consequence timezonefinderL is not being updated any more.\n* simplification functions (used for compiling the data for timezonefinderL) have been deleted from the file_converter\n* the readme has been updated to inform about this major change\n* some tests have been temporarily disabled (with tzwhere still using a very old version of tz_world, a comparison does not make too much sense atm)\n\n2.0.1 (2017-04-08)\n------------------\n\n* added missing package data entries (2.0.0 didn't include all necessary .bin files)\n\n\n2.0.0 (2017-04-07)\n------------------\n\n* ATTENTION: major change!: there is a second version of timezonefinder now: `timezonefinderL <https://github.com/MrMinimal64/timezonefinderL>`__. There the data has been simplified\n    for increasing speed reducing data size. Around 56% of the coordinates of the timezone polygons have been deleted there. Around 60% of the polygons (mostly small islands) have been included in the simplified polygons.\n    For any coordinate on landmass the results should stay the same, but accuracy at the shorelines is lost.\n    This eradicates the usefulness of closest_timezone_at() and certain_timezone_at() but the main use case for this package (= determining the timezone of a point on landmass) is improved.\n    In this repo timezonefinder will still be maintained with the detailed (unsimplified) data.\n* file_converter.py has been complemented and modified to perform those simplifications\n* introduction of new function get_geometry() for querying timezones for their geometric shape\n* added shortcuts_unique_id.bin for instantly returning an id if the shortcut corresponding to the coords only contains polygons of one zone\n* data is now stored in separate binaries for ease of debugging and readability\n* polygons are stored sorted after their timezone id and size\n* timezonefinder can now be called directly as a script (experimental with reduced functionality, cf. readme)\n* optimisations on point in polygon algorithm\n* small simplifications in the helper functions\n* clarification of the readme\n* clarification of the comments in the code\n* referenced the new conda-feedstock in the readme\n* referenced the new timezonefinder API/GUI\n\n\n\n1.5.7 (2016-07-21)\n------------------\n\n\n* ATTENTION: API BREAK: all functions are now keyword-args only (to prevent lng lat mix-up errors)\n* fixed a little bug with too many arguments in a @jit function\n* clarified usage of the package in the readme\n* prepared the usage of the ahead of time compilation functionality of Numba. It is not enabled yet.\n* sorting the order of polygons to check in the order of how often their zones appear, gives a speed bonus (for closest_timezone_at)\n\n\n1.5.6 (2016-06-16)\n------------------\n\n* using little endian encoding now\n* introduced test for checking the proper functionality of the helper functions\n* wrote tests for proximity algorithms\n* improved proximity algorithms: introduced exact_computation, return_distances and force_evaluation functionality (s. Readme or documentation for more info)\n\n1.5.5 (2016-06-03)\n------------------\n\n* using the newest version (2016d, May 2016) of the `tz world data`_\n* holes in the polygons which are stored in the tz_world data are now correctly stored and handled\n* rewrote the file_converter for storing the holes at the end of the timezone_data.bin\n* added specific test cases for hole handling\n* made some optimizations in the algorithms\n\n1.5.4 (2016-04-26)\n------------------\n\n* using the newest version (2016b) of the `tz world data`_\n* rewrote the file_converter for parsing a .json created from the tz_worlds .shp\n* had to temporarily fix one polygon manually which had the invalid TZID: 'America/Monterey' (should be 'America/Monterrey')\n* had to make tests less strict because tzwhere still used the old data at the time and some results were simply different now\n\n\n1.5.3 (2016-04-23)\n------------------\n\n* using 32-bit ints for storing the polygons now (instead of 64-bit): I calculated that the minimum accuracy (at the equator) is 1cm with the encoding being used. Tests passed.\n* Benefits: 18MB file instead of 35MB, another 10-30% speed boost (depending on your hardware)\n\n\n1.5.2 (2016-04-20)\n------------------\n\n* added python 2.7.6 support: replaced strings in unpack (unsupported by python 2.7.6 or earlier) with byte strings\n* timezone names are now loaded from a separate file for better modularity\n\n\n1.5.1 (2016-04-18)\n------------------\n\n* added python 2.7.8+ support:\n    Therefore I had to change the tests a little bit (some operations were not supported). This only affects output.\n    I also had to replace one part of the algorithms to prevent overflow in Python 2.7\n\n\n1.5.0 (2016-04-12)\n------------------\n\n* automatically using optimized algorithms now (when numba is installed)\n* added TimezoneFinder.using_numba() function to check if the import worked\n\n\n1.4.0 (2016-04-07)\n------------------\n\n* Added the ``file_converter.py`` to the repository: It converts the .csv from pytzwhere to another ``.csv`` and this one into the used ``.bin``.\n    Especially the shortcut computation and the boundary storage in there save a lot of reading and computation time, when deciding which timezone the coordinates are in.\n    It will help to keep the package up to date, even when the timezone data should change in the future.\n\n\n    .. _tz world data: <http://efele.net/maps/tz/world/>\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/MrMinimal64/timezonefinder",
    "keywords": "timezone coordinates latitude longitude location pytzwhere tzwhere",
    "license": "MIT licence",
    "maintainer": "",
    "maintainer_email": "",
    "name": "timezonefinder",
    "platform": "",
    "project_url": "https://pypi.org/project/timezonefinder/",
    "release_url": "https://pypi.org/project/timezonefinder/2.1.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python library to look up timezone from lat / long offline. Improved version of \"pytzwhere\".",
    "version": "2.1.2"
  },
  "releases": {
    "1.003": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e3b19f4705e0157857539c07eb0e839e",
          "sha256": "c83f3b7d050fe7e006cddf327f8d9ae252a0354c2de8ad606551da68cfaafb7f"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.003.tar.gz",
        "has_sig": false,
        "md5_digest": "e3b19f4705e0157857539c07eb0e839e",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30084277,
        "upload_time": "2016-02-29T12:44:46",
        "url": "https://files.pythonhosted.org/packages/23/21/7b99246c88d6ac08076a1a00dafbbe9abe2a504b69d460d44aec47abe964/timezonefinder-1.003.tar.gz"
      }
    ],
    "1.4.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "04ff64aa95bd39136bb7b668bf2e2233",
          "sha256": "01f3ee61422af04c0dfb40f8dbdbe2bab34054960cb2451de0e02886c6f59683"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.4.0.tar.gz",
        "has_sig": false,
        "md5_digest": "04ff64aa95bd39136bb7b668bf2e2233",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30089971,
        "upload_time": "2016-04-07T17:11:37",
        "url": "https://files.pythonhosted.org/packages/be/d3/401f094f8896d525f2581a13e0a0ae077d2e7f0636254eb06804489462c1/timezonefinder-1.4.0.tar.gz"
      }
    ],
    "1.4.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "29fb8a49d268f130c953f051f2daa3c3",
          "sha256": "27e2242f4641fd9b8357a83370cc0d89a43be873ac48a1c60e6429d14726ec82"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.4.1.tar.gz",
        "has_sig": false,
        "md5_digest": "29fb8a49d268f130c953f051f2daa3c3",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30089605,
        "upload_time": "2016-04-08T07:52:26",
        "url": "https://files.pythonhosted.org/packages/1f/fb/03218506e9f58af8d45a9a972c8306624c7533fb1b1792f56898d862b257/timezonefinder-1.4.1.tar.gz"
      }
    ],
    "1.4.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "90d1134b0dbf09822ece42686300f0a0",
          "sha256": "ea24d9887303b686fea0ba26e5c98bd1bd41eba49231b005a4007266b9c6aeeb"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.4.2.tar.gz",
        "has_sig": false,
        "md5_digest": "90d1134b0dbf09822ece42686300f0a0",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30090487,
        "upload_time": "2016-04-11T10:01:13",
        "url": "https://files.pythonhosted.org/packages/38/6e/799bdf73404f3e012118a9db7471e41632d67433a07c029551652c675ebd/timezonefinder-1.4.2.tar.gz"
      }
    ],
    "1.5.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "608076dd9ed0164cc5f3fb2ef92a654e",
          "sha256": "c20a847645f633c1cbb3e762750883d5b7bee801c6d7f950ebff87daa85a112b"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.0-py34.py35-none-any.whl",
        "has_sig": false,
        "md5_digest": "608076dd9ed0164cc5f3fb2ef92a654e",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 30093402,
        "upload_time": "2016-04-12T18:33:35",
        "url": "https://files.pythonhosted.org/packages/1a/80/adf79a224affa8e9eded3cb80e54aea4fd9e5ed7375f65a41f1062650000/timezonefinder-1.5.0-py34.py35-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "180a83fd6431ec6dfd32a396821ab99f",
          "sha256": "7ccf2ba6821bf0e0e54d4af55e53fa903624b62f28fce75dcb3b382e0ba24028"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.0.tar.gz",
        "has_sig": false,
        "md5_digest": "180a83fd6431ec6dfd32a396821ab99f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30094919,
        "upload_time": "2016-04-12T18:53:36",
        "url": "https://files.pythonhosted.org/packages/93/13/adf1b682cd569f2d4a63ad8a5c166524d349c436b6290fd64043aa21992a/timezonefinder-1.5.0.tar.gz"
      }
    ],
    "1.5.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7bfd65f9a6a72b02f26489526053f584",
          "sha256": "2ac03b498537b59b250366ec2835870374a5b8a622cae152ed5109ff4fc60c8f"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7bfd65f9a6a72b02f26489526053f584",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 30095851,
        "upload_time": "2016-04-18T07:42:45",
        "url": "https://files.pythonhosted.org/packages/31/f9/e52648cd278a9c13827314d8c6353b0cf8c457dc14069701c3883366311d/timezonefinder-1.5.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "868bd9817c6200ba20d95bc45d3dea8b",
          "sha256": "5695398458c2d5eebb61cf0ca37fad7b7cd0166bd05f2e90da76c82a394a4750"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.1.tar.gz",
        "has_sig": false,
        "md5_digest": "868bd9817c6200ba20d95bc45d3dea8b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30096239,
        "upload_time": "2016-04-18T07:42:18",
        "url": "https://files.pythonhosted.org/packages/a0/85/e8f62ba371a1ae5e0641f71b087ad53cf1c753978be1d6a740a60c081bad/timezonefinder-1.5.1.tar.gz"
      }
    ],
    "1.5.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8a093ff62c48df29c6786fe941c4201b",
          "sha256": "5df3e545bb4e0faf6c69ff7488ded277d5ef5b18a58a767f27d29d8df47f6303"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "8a093ff62c48df29c6786fe941c4201b",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 30094034,
        "upload_time": "2016-04-20T14:37:27",
        "url": "https://files.pythonhosted.org/packages/27/a2/c7692557f9b0bf7648c7fbd3993aa024f5c5a685ad2545ea621704c87713/timezonefinder-1.5.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1b85ecec870586e188a4e20b18701117",
          "sha256": "d7472f7d21eda40243123b74df7ca62f1e8d76dd6d350e063cfbe86b9a8e3cbc"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.2.tar.gz",
        "has_sig": false,
        "md5_digest": "1b85ecec870586e188a4e20b18701117",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 30092843,
        "upload_time": "2016-04-20T14:36:57",
        "url": "https://files.pythonhosted.org/packages/b1/0e/f61979878ccdae66f3899bffc6c4d4cc9befa7f975362b98ccc6d1836e85/timezonefinder-1.5.2.tar.gz"
      }
    ],
    "1.5.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2944ee9f349152bc6915f3e05ff86bb1",
          "sha256": "5960a5c59c4ed6148c925ee1ff236f3e0c3805e317b9bdc85812dcd3fb4ee02e"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2944ee9f349152bc6915f3e05ff86bb1",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 15915646,
        "upload_time": "2016-04-23T14:02:57",
        "url": "https://files.pythonhosted.org/packages/e3/b7/56a746f54827928b0f25288888c2300b4c1fc424f01e9d245068470b75b0/timezonefinder-1.5.3-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c50a9ba8c8f27351bdad7c8c61733848",
          "sha256": "db7ad73ff0d656149f1b1dfcbb04d16e14f083381af57e6ebda28ae400c58e95"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.3.tar.gz",
        "has_sig": false,
        "md5_digest": "c50a9ba8c8f27351bdad7c8c61733848",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 15908323,
        "upload_time": "2016-04-23T13:58:56",
        "url": "https://files.pythonhosted.org/packages/b0/23/c03dbccc38963d2f277d41364167cfadef3e143e65fd2693186a93e3e1ac/timezonefinder-1.5.3.tar.gz"
      }
    ],
    "1.5.4": [
      {
        "comment_text": "",
        "digests": {
          "md5": "96d34832e6ab9105a26b3a6306279d02",
          "sha256": "8f7857a5fcda61e58d6d5cae1dfce764cb2b0e4cf515549e344c028dad8efe7e"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.4-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "96d34832e6ab9105a26b3a6306279d02",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 16082143,
        "upload_time": "2016-04-26T17:24:42",
        "url": "https://files.pythonhosted.org/packages/22/32/cb90223e62d1d119ab4783d0c9cc6b8b55ebe53e726f8466553c90e8f3a5/timezonefinder-1.5.4-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e234648619616ffcd022ff600e5448ef",
          "sha256": "fbbc879496e2feb29b61730824877391a2d99db4b7d75c865da85477b49aa17b"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.4.tar.gz",
        "has_sig": false,
        "md5_digest": "e234648619616ffcd022ff600e5448ef",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16081555,
        "upload_time": "2016-04-26T17:18:13",
        "url": "https://files.pythonhosted.org/packages/52/56/57e37e9028ce7e4459d30216f5fad17ba16da88e1b7ac1cb15836e7bbaba/timezonefinder-1.5.4.tar.gz"
      }
    ],
    "1.5.5": [
      {
        "comment_text": "",
        "digests": {
          "md5": "87e6a2daa62f9921076b720b912f1686",
          "sha256": "ed2042c74be5830a68d36979e34fbcea86b4c68551401c1d85906b8e1743f694"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.5-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "87e6a2daa62f9921076b720b912f1686",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 16710721,
        "upload_time": "2016-06-03T12:57:22",
        "url": "https://files.pythonhosted.org/packages/e0/17/e934f6d7f40db8eaabf64be41f58ea0944f242eab27aaa64e997e0320bab/timezonefinder-1.5.5-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "fcdf7ea7c92c058b762588a6b8e1e93a",
          "sha256": "433a35baa8f855196e179c181573c1cc678b4a4086a0ffd91d72ddb1582dcf07"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.5.tar.gz",
        "has_sig": false,
        "md5_digest": "fcdf7ea7c92c058b762588a6b8e1e93a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16706840,
        "upload_time": "2016-06-03T12:57:09",
        "url": "https://files.pythonhosted.org/packages/ef/9d/12e157b33cb8d70c92218da73e96d184d451d5bf0ef5e2c9d77b215ff798/timezonefinder-1.5.5.tar.gz"
      }
    ],
    "1.5.6": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ffda1a08b30481b6435531741b474f2e",
          "sha256": "cc9c50b5cacc3fe153631a77db72c677b9798501a8a57c73328346dee03e4415"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.6-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ffda1a08b30481b6435531741b474f2e",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 16638149,
        "upload_time": "2016-06-16T22:28:15",
        "url": "https://files.pythonhosted.org/packages/8c/f7/a43c8f0dc8a975fadba875bdc8769d9271fbcf76733c989821ed36203cd0/timezonefinder-1.5.6-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "522f5b404c4741b513276b03741ddc07",
          "sha256": "8c3cc9a4e41b0e584cf88440a985d0e7c3c1d38e168b1fd9bd43c58a817d9e8d"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.6.tar.gz",
        "has_sig": false,
        "md5_digest": "522f5b404c4741b513276b03741ddc07",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16634835,
        "upload_time": "2016-06-16T22:27:37",
        "url": "https://files.pythonhosted.org/packages/86/45/e3480256e987eaf7e57ea089aebc6508b5239af90252a8abb5092378db6c/timezonefinder-1.5.6.tar.gz"
      }
    ],
    "1.5.7": [
      {
        "comment_text": "",
        "digests": {
          "md5": "403370e8439a10cfcb04ed6998b69e5e",
          "sha256": "f49355c64eee7084ea9dfe730e9da202e5cb54baf278e2fde142428a89362287"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.7-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "403370e8439a10cfcb04ed6998b69e5e",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 16641911,
        "upload_time": "2016-07-21T18:46:30",
        "url": "https://files.pythonhosted.org/packages/36/d6/7456e708ad89f21d2c7a176620eb967f0638105d2d007c14189f7dfe1f6b/timezonefinder-1.5.7-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "86194c7f508cc4ecce6605c30c0d150c",
          "sha256": "c9de5429aca0d991459d0103e7feaae9c8d0be4516d88018411b775abe5c4579"
        },
        "downloads": -1,
        "filename": "timezonefinder-1.5.7.tar.gz",
        "has_sig": false,
        "md5_digest": "86194c7f508cc4ecce6605c30c0d150c",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16640554,
        "upload_time": "2016-07-21T18:46:22",
        "url": "https://files.pythonhosted.org/packages/3d/83/cb5123c16824bf01b3f6c674ff552c6cb28f8efdea8beabcbe1e68c14661/timezonefinder-1.5.7.tar.gz"
      }
    ],
    "2.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "07f9696ada0f758e4e8fa30145ea635c",
          "sha256": "6fcc8a99eb3775db33bf646d3e4d5af84d57c09c0146b0f0f47f29305eed2751"
        },
        "downloads": -1,
        "filename": "timezonefinder-2.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "07f9696ada0f758e4e8fa30145ea635c",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 16636158,
        "upload_time": "2017-04-08T10:29:14",
        "url": "https://files.pythonhosted.org/packages/0c/e8/8d7acb5b4af470352dd2328ad9ca2785da408dd58bb9a9e518fdedb2186a/timezonefinder-2.0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "6b09e62561e452861111de000fc8dd3a",
          "sha256": "58a643e6ec17aa0c386b2eec6ccf2dd4fbdd5d519f2a50fe41fe181fe80e700b"
        },
        "downloads": -1,
        "filename": "timezonefinder-2.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "6b09e62561e452861111de000fc8dd3a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16649343,
        "upload_time": "2017-04-08T10:29:04",
        "url": "https://files.pythonhosted.org/packages/8f/dd/23b7262a9ae7d0b34cca801f1226c65659c336ea57cffd42258ba5658c21/timezonefinder-2.0.1.tar.gz"
      }
    ],
    "2.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "18c02ee75502e69c25c1de22ad5c66f7",
          "sha256": "3273bff518e98d0f6cce0d0a40f172cd9170159d526bea0f61eb1c11a1b3e770"
        },
        "downloads": -1,
        "filename": "timezonefinder-2.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "18c02ee75502e69c25c1de22ad5c66f7",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 33929458,
        "upload_time": "2017-05-19T21:06:40",
        "url": "https://files.pythonhosted.org/packages/8f/4b/8ea705add1f36febd4697fc9776b4e026fbc7bf24b847b27a48a05d3dc3c/timezonefinder-2.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "18713ce91611a10c4b211b16d9c400ce",
          "sha256": "f68fdc1d58f227598553a798768045407a5628b9d29ab1b26b7a24c08c74d16d"
        },
        "downloads": -1,
        "filename": "timezonefinder-2.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "18713ce91611a10c4b211b16d9c400ce",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 33937945,
        "upload_time": "2017-05-19T21:06:21",
        "url": "https://files.pythonhosted.org/packages/6c/30/24304e982dee7af78b6629492cc654b22b82adfb448063fa5af187fa2241/timezonefinder-2.1.0.tar.gz"
      }
    ],
    "2.1.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "ecd70e07632b805e73dcfef4a44cd377",
          "sha256": "0102965a619f48d9194ce23daac34e24a55d2128843d54d1be6afede1514dd0e"
        },
        "downloads": -1,
        "filename": "timezonefinder-2.1.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "ecd70e07632b805e73dcfef4a44cd377",
        "packagetype": "bdist_wheel",
        "python_version": "3.6",
        "size": 34061502,
        "upload_time": "2017-11-20T13:00:11",
        "url": "https://files.pythonhosted.org/packages/48/59/5770a96e316b2f88055018e8546cedd6ad539a7228d6b54bc210bb32f22d/timezonefinder-2.1.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "f290a23dfe59f5a033598c1a44aedd9f",
          "sha256": "c5cc89f2972153b98e1adceb651ba90901433906bb5ff9a0b84a263baaea996d"
        },
        "downloads": -1,
        "filename": "timezonefinder-2.1.2.tar.gz",
        "has_sig": false,
        "md5_digest": "f290a23dfe59f5a033598c1a44aedd9f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 34076628,
        "upload_time": "2017-11-20T12:59:38",
        "url": "https://files.pythonhosted.org/packages/24/44/650a2cf108a430e5ae005092cda54ce76748a292325fc1edf08a49ed48c8/timezonefinder-2.1.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "ecd70e07632b805e73dcfef4a44cd377",
        "sha256": "0102965a619f48d9194ce23daac34e24a55d2128843d54d1be6afede1514dd0e"
      },
      "downloads": -1,
      "filename": "timezonefinder-2.1.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "ecd70e07632b805e73dcfef4a44cd377",
      "packagetype": "bdist_wheel",
      "python_version": "3.6",
      "size": 34061502,
      "upload_time": "2017-11-20T13:00:11",
      "url": "https://files.pythonhosted.org/packages/48/59/5770a96e316b2f88055018e8546cedd6ad539a7228d6b54bc210bb32f22d/timezonefinder-2.1.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "f290a23dfe59f5a033598c1a44aedd9f",
        "sha256": "c5cc89f2972153b98e1adceb651ba90901433906bb5ff9a0b84a263baaea996d"
      },
      "downloads": -1,
      "filename": "timezonefinder-2.1.2.tar.gz",
      "has_sig": false,
      "md5_digest": "f290a23dfe59f5a033598c1a44aedd9f",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 34076628,
      "upload_time": "2017-11-20T12:59:38",
      "url": "https://files.pythonhosted.org/packages/24/44/650a2cf108a430e5ae005092cda54ce76748a292325fc1edf08a49ed48c8/timezonefinder-2.1.2.tar.gz"
    }
  ]
}