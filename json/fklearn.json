{
  "info": {
    "author": "frankchen",
    "author_email": "947118251@qq.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Programming Language :: Python :: Implementation",
      "Topic :: Software Development :: Libraries"
    ],
    "description": "Markdown and reStructuredText\n=============================\nGitHub supports several lightweight markup languages for documentation;\nthe most popular ones (generally, not just at GitHub) are **Markdown**\nand **reStructuredText**.  Markdown is sometimes considered easier to\nuse, and is often preferred when the purpose is simply to generate HTML.\nOn the other hand, reStructuredText is more extensible and powerful,\nwith native support (not just embedded HTML) for tables, as well as\nthings like automatic generation of tables of contents.\n\nUnless you are embedding text into a programming language (especially\nPython doc comments, for which purpose reStructuredText was originally\ndeveloped) you will probably choose to use Markdown for a small document\n(like this Gist once was).  But as you add more sections and features, you may\ndecide that you want the power of reStructuredText.  To avoid having to\nconvert all of your Markdown formatting when that happens, use this Gist\nas a guide to the markup syntax common to Markdown and reStructuredText.\n\nBy using only the common subset shared by these two lightweight markup\nlanguages (largely from Setext, which inspired both of them) for your\ndocuments, you can eliminate the need for conversion.  Even if you also\nuse features that are specific to one or the other, using the common\nsubset wherever possible allows for painless cut & paste between them.\n\nAnother advantage of restricting yourself to the common subset described\nhere is that the resulting source is more likely to be parsed the same way\nby different Markdown processors, which may handle some details like\nindentation slightly differently.\n\nIf you have already used Markdown-specific syntax, or you just don't\nwant to limit yourself to the (admittedly very limited) intersection of\nfunctionality in the subset, you can use **Pandoc** to convert Markdown\ninto reStructuredText - the online converter at\n<http://johnmacfarlane.net/pandoc/try> is handy if you don't happen to\nhave Haskell installed.  (In fact, you may find the extended Markdown\nsupported by Pandoc adds enough functionality that you don't need to use\nreStructuredText at all - at least, once you get Haskell and Pandoc\ninstalled.)\n\n\nThe Common Denominator\n======================\nThe basics of text formatting are common to both, a blank line (it may\ncontain spaces or tabs, but nothing else) is used to separate paragraphs\nand everything within a paragraph \"flows\" and is wrapped to the display\nwidth.  Be sure to avoid initial indentation (either of an entire\nparagraph or just the first line) for normal text, as indentation is\nsignificant to both Markdown and reStructuredText, but in different\nways.\n\nWhen writing text, you should try to wrap source lines to 72\ncharacters - but only when initially entering them - avoid re-wrapping\ntext when you edit it later, to limit the number of \"insignificant\nchanges\" in your version control system (you *are* using one, right?!).\nFeel free to use two spaces after the period at the end of a sentence\n(or not) if that is useful for your text editor - I'm looking at you,\nEmacs - since multiple spaces are treated the same as a single space.\nSimilarly, multiple blank lines are treated just like one blank line;\nyou may want to use multiple blank lines at the end of a section.\n\n\nFont Faces - Emphasis and Examples\n----------------------------------\nWithin paragraphs, inline markup provides basic formatting to add\nemphasis to particular words or phrases, most commonly by making them\n*italic* or **bold** (depending on the font, italics are often rendered\nwith an oblique face instead).  In technical writing, ``monospaced\ntext`` may be used to highlight program or function names, or for very\nshort snippets of code.\n\nAs with many types of formatting, Markdown provides multiple ways of\nspecifying font faces, one of which is also used by reStructuredText:\nitalics are marked with one asterisk (``*``) and bold face with two.  There\nmust be whitespace or other punctuation before the leading asterisks,\nand after the trailing ones; furthermore there must be no space between\nthe asterisks and the text being emphasized.  Although Markdown supports\nnesting bold and italic, reStructuredText does not (this is one of the\nrare cases where Markdown is more powerful, as there is no way to\nrepresent bold italics in reStructuredText).\n\nMonospaced text is marked with two backquotes \"``\" instead of asterisks;\nno bold or italic is possible within it (asterisks just represent\nthemselves), although in some contexts, code syntax highlighting may be\napplied.  Note that in monospaced text, multiple spaces are *not*\ncollapsed, but are preserved; however, flow and wrapping *do* occur, and\nany number of spaces may be replaced by a line break.  Markdown allows\nmonospaced text within bold or italic sections, but not vice versa -\nreStructuredText allows neither.  In summary, the common inline markup\nis the following::\n\n    Mark *italic text* with one asterisk, **bold text** with two.\n    For ``monospaced text``, use two \"backquotes\" instead.\n\nMark *italic text* with one asterisk, **bold text** with two.\nFor ``monospaced text``, use two \"backquotes\" instead.\n\n-----\n\n(Markdown allows a single backquote to indicate monospaced text, however\ndouble backquotes ar better, since they allow for embedded backquotes\nand are required for reStructuredText.)\n\n\nEscaping Markup\n---------------\nSometimes you may want to use markup characters just as themselves,\nwithout any special interpretation.  Within double backquotes used to mark\nmonospaced text (or in code blocks as described below), markup characters\nare not treated specially, but in other contexts, you must precede markup\ncharacters with a backslash (\\\\) to escape them (this applies to the\nbackslash character as well)::\n\n    \\*This\\* is not *italic* - \\\\My Pictures\\\\ is a Windows folder\n\n\\*This\\* is not *italic* - \\\\My Pictures\\\\ is a Windows folder\n\n-----\n\nWhile reStructuredText will treat a backslash before any non-whitespace\ncharacter as an escape, Markdown only treats backslash as an escape when\nit precedes one of the following characters:\n\n* \\\\   backslash\n* \\`   backtick\n* \\*   asterisk\n* \\_   underscore\n* \\{}  curly braces\n* \\[]  square brackets\n* \\()  parentheses\n* \\#   hash mark\n* \\+   plus sign\n* \\-   minus sign (hyphen)\n* \\.   dot\n* \\!   exclamation mark\n\nFor compatibility, only use backslash before one of these characters, and\nbe sure to escape any backslashes that you want to appear in the output.\n\n\nCode or Console Example Blocks\n------------------------------\nIf you have example code or console text that you want to appear with\nall line breaks and relative indentation preserved, in a monospaced text\nblock, there is no common format for Markdown and reStructuredText, but\nyou can combine the formatting for both of them by ending one paragraph\nwith a double colon ``::`` (for reStructuredText) and indenting the next\none by four or more spaces (for Markdown) to make it appear in\nmonospaced font without flow or word-wrapping::\n\n    A normal paragraph ending with ``::`` will flow and be word-wrapped::\n\n        If the next paragraph is indented by four or more spaces, it will be monospaced text, without flow (or even wrapping in some non-print cases.)\n\n        You can have multiple paragraphs like this, as long as they\n        are all indented by the same amount.\n\nA normal paragraph ending with ``::`` will flow and be word-wrapped::\n\n    If the next paragraph is indented by four or more spaces, it will be monospaced text, without flow (or even wrapping in some non-print cases.)\n\n    You can have multiple paragraphs like this, as long as they\n    are all indented by the same amount.\n\n-----\n\n(We cheat a little bit here, Markdown does not interpret the\ndouble-colon, but displays it as-is, whereas reStructuredText displays\njust a single colon, but this is not too noticeable or annoying, as long\nas you remember to use the double colon in your source.)\n\n\nLine Blocks and Hard Line Breaks\n--------------------------------\nYou may want to preserve line breaks in text blocks but don't want them\nin monospaced text; common cases are verse (poetry or lyrics), street\naddresses, and unadorned lists without bullets or numbering.  Markdown\nand reStructuredText use completely different syntax for this, but you\ncan combine the markup for both reStructuredText line blocks and\nMarkdown hard line breaks by starting each line with a vertical bar (``|``)\nand a space and ending it with two spaces.  For line breaks in the\nsource you don't want to preserve, omit the two spaces before the line\nbreak and start the next line with one to three spaces instead.  Put a\nblank line before the start and after the end of every line block.\n\nLine blocks were added to reStructuredText in Docutils version 0.3.5\nand there are some reStructuredText formatters that do not support\nthem; notably the GitHub README markup does not display them correctly.\n\nThese line blocks can also contain inline markup (which in a code\nexample block might be displayed literally), but keep any markup within\neach line, since emphasis starting on one line and ending on another\napplies to vertical bars between them, which appear in Markdown output::\n\n    | *Yuku haru ya*\n    | *tori naki uo no*\n    | *me wa namida*\n    | -- **Matsuo Bash\u014d**, The Narrow Road to Oku (*Oku no Hosomichi*),\n     Tokyo, 1996, p. 23 (Translation: Donald Keene)\n    | Spring is passing by!\n    | Birds are weeping and the eyes\n    | of fish fill with tears.\n\n| *Yuku haru ya*\n| *tori naki uo no*\n| *me wa namida*\n| -- **Matsuo Bash\u014d**, The Narrow Road to Oku (*Oku no Hosomichi*),\n Tokyo, 1996, p. 23 (Translation: Donald Keene)\n| Spring is passing by!\n| Birds are weeping and the eyes\n| of fish fill with tears.\n\n------\n\n(Again, we cheat a bit, since the Markdown output includes the vertical\nbars; but at least they make it very clear when you end a line without\nthe required two spaces, something that is quite easy to do as there is\nusually no visual indication of whether they are there or not.)\n\n\nBlock Quotations\n----------------\nWhen quoting long blocks of text from another writer, it is common\n(especially in the context of e-mail) to set it off from the main text\nby indenting it, possibly adding a vertical quotation line along the\nleft margin.  Markdown and reStructuredText use different syntax for\nthis, but you can combine their markup for block quotes by starting the\nfirst line of a quotation with one space and a right angle bracket\n(``>``), indenting all the remaining lines by one space as well (do not\nadd angle brackets to them).\n\nNote that in reStructuredText, a block quotation cannot directly follow\na code example block - if it does it will be treated as part of the\nexample.  A normal paragraph or an \"empty comment\" (a line with only two\nperiods (``..``) and blank lines before and after it) must separate\nthem.\n\nEvery block quotation must have a blank line before and after it; they\ncan use the same inline markup as ordinary paragraphs.  Nested\nquotations are possible by following a block quotation with another that\nstarts with two spaces and two right angle brackets; this allows up to\nthree levels of quotation (a fourth level is not possible since Markdown\ntreats four leading spaces as a code example).  While two right angle\nbrackets can be adjacent, three adjacent right angle brackets are a\ndoctest block (a special kind of code example block) in reStructuredText\nand must have spaces between them to prevent that interpretation::\n\n     > A block quotation will wrap and flow, and can have *inline*\n     ``markup`` just like a regular paragraph.  It will be indented on\n     the left (and possibly the right) margins, and may have a vertical\n     quotation line on the left.\n\n      >> With two spaces and two right angle brackets, a following block\n      quotation will be doubly indented, and will have a second vertical\n      quotation line along the left if quotation lines are generated.\n\n       > >> A third level of quotation is the maximum level possible.\n\n..\n\n > A block quotation will wrap and flow, and can have *inline*\n ``markup`` just like a regular paragraph.  It will be indented on\n the left (and possibly the right) margins, and may have a vertical\n quotation line on the left.\n\n  >> With two spaces and two right angle brackets, a following block\n  quotation will be doubly indented, and will have a second vertical\n  quotation line along the left if quotation lines are generated.\n\n   > >> A third level of quotation is the maximum level possible.\n\n------\n\n(The cheat here is that the reStructuredText output includes the right\nangle bracket(s) on the first line in addition to the indentation; this\nis not ideal, but is generally acceptable when used for a quotation, and\nnot just indented text.)\n\n\nTitles and Section headers\n--------------------------\nBoth Markdown and reStructuredText allow you to structure your document\nby adding header titles for sections and subsections.  While they each\nsupport a large number of levels of headers in different ways, the\ncommon subset only has two levels: titles, formed by underlining the\ntext with ``==``, and subtitles, formed by underlining with ``--``.  The\nunderlining must be on the very next line, and be at least\nas long as the (sub)title::\n\n    Section Title\n    =============\n    The Common Denominator\n    ======================\n\n    Subsection Subtitle\n    -------------------\n    Titles and Section headers\n    --------------------------\n\nNote that a blank line after the underlining is optional, but a blank\nline before the (sub)title is required.\n\n\nBulleted and Enumerated Lists\n-----------------------------\nIn addition to (sub)section headers, both Markdown and reStructuredText\nsupport itemized lists; these can be numbered (enumerated) or unnumbered\n(bulleted) and the two types of lists can be nested within themselves\nand each other.  List items are lines starting (possibly after spaces\nfor indentation) with a bullet symbol (``*``, ``-``, or ``+``) for bulleted\nlists, or a number and a period (``1.``) for enumerated lists; in both\ncases followed by one or more spaces and then the item text.  Although\nreStructuredText supports other symbols for bulleted lists and\nparentheses instead of period for enumerated lists, as well as ``#`` in\nplace of the number for auto-enumeration, Markdown only supports the\nsubset described above.\n\nThe spaces after the symbol or number determine the indentation needed\nfor additional item text on continuation lines or following paragraphs,\nas well as the symbols or numbers for sub-lists.  Symbol or number indentation\nof all items at any nesting level must be the same (even for long\nenumerated lists with two-digit numbers) but the indentation of the text\nof different items need not be the same.\n\nIf a list item contains multiple paragraphs (separated by blank lines)\nor sub-lists, the indentation of the item text must be at least four\nspaces more than the item symbol or number; this usually requires extra\nspaces between the number and period (or symbol) and the item text.\n\nA blank line is required before the first item and after the last item\nin every top-level list, but is optional between items.  A blank line\nis also required by reStructuredText before the first item of a\nsub-list; omitting it sometimes appears to work, but only because the\nsub-list is indented more than the item text.  This extra indentation\nmay cause the item text to be treated as part of a definition list and\ndisplayed in bold; in other cases, it causes the sub-list to be\nwrapped within a block quote, causing both the left and right margins\nto move inwards and creating a double-indent effect.\n\nA sub-list without a preceding blank line can also work if there is no\nitem text preceding the sub-list; but this generates odd-looking\noutput that is confusing to human readers, with the first bullet or\nnumber of the sub-list on the same line as the bullet or number of the\nitem in the enclosing list.\n\nWhile Markdown does not require a blank line before a sub-list, a blank line\nbetween items changes the inter-item spacing (typically by creating\n``<p>`` paragraph tags).  For consistent results, do not use blank lines\nbetween items unless you must (for sub-lists), in which case use blank\nlines between *all* the items at the same level (sub-list items do not\nrequire the blank lines unless there are sub-sub-lists).\n\nMarkdown ignores the actual numbers given for enumerated lists and\nalways renumbers them starting with 1, but reStructuredText requires\nthat the numbers be in sequential order; the number of the first item\nmay or may not be preserved.  For compatibility, always start enumerated\nlists with 1 and number them sequentially.  You should never mix\nenumerated and bulleted items (or different bullet symbols) at the same\nlevel; reStructuredText will reject it with an error (or, if there is a\nblank line between them, create a new list).  On the other hand,\nMarkdown processors will combine adjacent bulleted and enumerated lists\n(using the formatting of the first list); to create separate lists it is\nnot enough to have a blank line, there must be a non-list paragraph\nbetween them.\n\nBecause Markdown formatting requires additional indentation for extra\nparagraphs of item text in lists, the approach for monospaced paragraphs\ngiven above in *Code or Console Example Blocks* requires additional\nindentation of at least **eight** spaces (not just four) for example\nblocks in lists.\n\nFinally, it is a *very* good idea to make sure that your document\nsource does not contain any tab characters, especially when working\nwith multiple levels of sub-lists.  Configure your text editor to\nexpand all tabs into spaces; this will help to ensure that the initial\nindentation is consistent and avoid errors if another editor\ninterprets the tabs differently.\n\nThe following two lists summarize and provide examples of the rules for\nlists compatible with Markdown and reStructuredText::\n\n    *   Mark bulleted lists with one of three symbols followed by a space:\n\n        1. asterisk (``*``)\n        2. hyphen (``-``)\n        3. plus sign (``+``)\n\n    * Mark enumerated lists with a number, period (``.``) and a space.\n\n    * The choice of symbol does not affect the output bullet style,\n      which is solely determined by nesting level.\n      Items can be continued on following lines indented at the same\n      level as the item text on the first line, and will flow and wrap\n      normally.\n\n    *   The source indentation of item text can vary for different items\n        (but continuation lines must be indented by the same amount as\n        the item text that they are continuing).\n\n        Additional paragraphs of item text (after a blank line) also\n        require this indentation, with the extra requirement that it be\n        four to seven spaces more than the item symbol or number.\n\n        * These indentation requirements are the same for sub-list items\n          (but apply to their symbol or number, not their item text).\n\n    *   Blank lines between list items are optional, avoid them.\n\n        + If you *do* use them (for items with sub-lists or extra\n          paragraphs) put blank lines between *all* items at that level.\n\n    A non-list paragraph is required to separate adjacent enumerated and\n    bulleted lists, to keep Markdown from merging the second one into the\n    first (and using the first style for both).\n\n    1. Always put a blank line before the start of a list or sub-list.\n\n    2. Use the same bullet symbol for all items in a bulleted list.\n\n    3. Always start enumerated lists with 1.\n\n    4. Use sequentially increasing numbers for succeeding list items.\n\n    5.  Do not mix numbers and/or different bullet symbols at one level\n\n        * (but this is okay for different levels or separate sublists).\n\n    6.  Indent sub-lists by the same amount as the item text;\n        this must be 4-7 spaces more than the symbol or number.\n\n        1.  if enumerated, always start them with 1.\n\n            + (the same rules apply to sub-sub-lists, etcetera)\n\n        Additional non-sub-list paragraphs require the same indentation;\n        example blocks (after double colon ``::``) must be indented at\n        least eight spaces more than the symbol or number, like this::\n\n            * item text::\n\n                    code block\n\n    7.  Indent symbols or numbers the same amount for any one list level.\n\n        - (top-level list items should not have any leading indentation)\n\n    8.  Align two-digit enumerated items by first digit, not the period.\n\n    9.  Don't put leading zeros on enumerated items to align the periods\n\n        * (use spaces after period if you want to align the item text in source).\n\n    10. Make sure there are no tab characters in initial indentation.\n\n    11. Always put a blank line after the end of a (top-level) list.\n\n*   Mark bulleted lists with one of three symbols followed by a space:\n\n    1. asterisk (``*``)\n    2. hyphen (``-``)\n    3. plus sign (``+``)\n\n* Mark enumerated lists with a number, period (``.``) and a space.\n\n* The choice of symbol does not affect the output bullet style,\n  which is solely determined by nesting level.\n  Items can be continued on following lines indented at the same\n  level as the item text on the first line, and will flow and wrap\n  normally.\n\n*   The source indentation of item text can vary for different items\n    (but continuation lines must be indented by the same amount as\n    the item text that they are continuing).\n\n    Additional paragraphs of item text (after a blank line) also\n    require this indentation, with the extra requirement that it be\n    four to seven spaces more than the item symbol or number.\n\n    * These indentation requirements are the same for sub-list items\n      (but apply to their symbol or number, not their item text).\n\n*   Blank lines between list items are optional, avoid them.\n\n    + If you *do* use them (for items with sub-lists or extra\n      paragraphs) put blank lines between *all* items at that level.\n\nA non-list paragraph is required to separate adjacent enumerated and\nbulleted lists, to keep Markdown from merging the second one into the\nfirst (and using the first style for both).\n\n1. Always put a blank line before the start of a list or sub-list.\n\n2. Use the same bullet symbol for all items in a bulleted list.\n\n3. Always start enumerated lists with 1.\n\n4. Use sequentially increasing numbers for succeeding list items.\n\n5.  Do not mix numbers and/or different bullet symbols at one level\n\n    * (but this is okay for different levels or separate sublists).\n\n6.  Indent sub-lists by the same amount as the item text;\n    this must be 4-7 spaces more than the symbol or number.\n\n    1.  if enumerated, always start them with 1.\n\n        + (the same rules apply to sub-sub-lists, etcetera)\n\n    Additional non-sub-list paragraphs require the same indentation;\n    example blocks (after double colon ``::``) must be indented at\n    least eight spaces more than the symbol or number, like this::\n\n        * item text::\n\n                code block\n\n7.  Indent symbols or numbers the same amount for any one list level.\n\n    - (top-level list items should not have any leading indentation)\n\n8.  Align two-digit enumerated items by first digit, not the period.\n\n9.  Don't put leading zeros on enumerated items to align the periods\n\n    * (use spaces after period if you want to align the item text in source).\n\n10. Make sure there are no tab characters in initial indentation.\n\n11. Always put a blank line after the end of a (top-level) list.\n\n\nHyperlink URLs\n--------------\nMarkdown and reStructuredText use different and incompatible syntax for\narbitrary text hyperlinks, but reStructuredText will generate hyperlinks\nfor e-mail addresses or URLs, and Markdown will do so as well if they\nare enclosed in angle brackets (``<>``).  Some Markdown processors do\nnot require the angle brackets, but there is little reason to omit them,\nas they hardly affect readability, and explicitly specify whether or not\npunctuation at the end of the URL is really part of the link.  Even\nrelative URLs can be used if the protocol is explicitly specified::\n\n    The latest version of this document can be found at\n    <https://gist.github.com/1855764>; if you are viewing it there (via\n    HTTPS), you can download the Markdown/reStructuredText source at\n    <https:/gists/1855764/download>.  You can contact the author via\n    e-mail at <alex.dupuy@mac.com>.\n\nThe latest version of this document can be found at\n<https://gist.github.com/1855764>; if you are viewing it there (via\nHTTPS), you can download the Markdown/reStructuredText source at\n<https:/gists/1855764/download>.  You can contact the author via\ne-mail at <alex.dupuy@mac.com>.\n\n-----\n\n(Using the URLs directly for hyperlinks also means that even if a\nMarkdown processor has link generation disabled, a human reader can\nalways copy and paste the URL.)\n\n\nHorizontal Rules (Transitions)\n------------------------------\nYou can create a horizontal rule (a \"transition\" in reStructuredText\nterminology) by placing four or more hyphens (``-``), asterisks (``*``),\nor underscores (``_``) on a line by themselves, with blank lines before\nand after and no indentation (trailing spaces are okay, but not leading\nspaces).  Although Markdown requires only three, and allows spaces\nbetween them, reStructuredText requires four repeated punctuation\ncharacters.  Also, reStructuredText requires paragraphs before and after\nthe transition (code blocks or enumerated/bulleted list items are okay,\nbut section headers are not).\n\n-----\n\nEach of the following lines will produce a horizontal rule like the\none above::\n\n    ****\n    ______\n    ----------\n\n\nIncompatibilities\n=================\nThere are a few cases where Markdown or reStructuredText will interpret\nsomething as markup, although it is treated as ordinary text by the other,\nand these differences can cause problems for a document that is intended\nto be processed by either formatter.  In these cases, the solution is\nusually to add a backslash before the markup character so that it is not\ntreated specially by either markup processor.\n\n\n(Square) Brackets\n-----------------\nWhile the appearance of square brackets - \\[\\] - in text is not treated\nspecially by reStructuredText, some Markdown processors may attempt to\nformat the contents as a hyperlink, even if there is no following\nparenthetical URL or bracketed reference.  To prevent this, put a\nbackslash before the opening square bracket (you can also put it before\nthe closing square bracket, but this is optional).\n\n\nSolitary Backslash\n------------------\nAlthough Markdown only treats backslash as an escape character when it\nprecedes certain characters, reStructuredText treats backslash as an\nescape unless it is followed by whitespace (in which case it removes the\nbackslash *and* the whitespace).  Because of this, a single backslash\nfollowed by whitespace, or a \"C\" escape like \\\\n, that appears in\nMarkdown will be \"eaten\" by reStructuredText.  To prevent this, make sure\nto always escape any backslashes that you want to appear in the output.\n\n\nNot-Incompatible Extensions\n===========================\nBoth Markdown and reStructuredText have markup that is not interpreted\nby the other (either in the same or in an incompatible way), and which\nis not too painful to read when rendered as ordinary text.  Hyperlink\nURLs (as noted above) fall into this category for some basic Markdown\nimplementations that do not implement URL recognition.\n\n\nTables\n------\nMarkdown has no support for tables (one of its biggest weaknesses); to\ncreate them requires embedded HTML (if that is even allowed).  Some\nvariants have added table support (notably Pandoc Markdown, PHP\nMarkdown Extra, and GitHub Flavored Markdown \\[GFM]) but the syntax is\nnot consistent between all of them.  The reStructuredText format has\nthe additional advantage of being quite readable in original source\nform (basic monospaced ASCII layout).  If you indent reStructuredText\ntables by four or more spaces (and make sure that the previous paragraph\ndoes *not* end with a double colon ``::``) you will get a nicely\nformatted table in reStructuredText and a readable ASCII table in\nMarkdown.  There are two flavors of table markup in reStructuredText,\ngrid tables and simple tables.  Grid tables are trickier to generate, but\nmore flexible, and look nicer in source format::\n\n    Make sure previous paragraph does not end with ``::``.\n\n    +-------+----------+------+\n    | Table Headings   | Here |\n    +-------+----------+------+\n    | Sub   | Headings | Too  |\n    +=======+==========+======+\n    | cell  | column spanning |\n    + spans +----------+------+\n    | rows  | normal   | cell |\n    +-------+----------+------+\n    | multi | * cells can be  |\n    | line  | * formatted     |\n    | cells | * paragraphs    |\n    | too   |                 |\n    +-------+-----------------+\n\nMake sure previous paragraph does not end with ``::``.\n\n    +-------+----------+------+\n    | Table Headings   | Here |\n    +-------+----------+------+\n    | Sub   | Headings | Too  |\n    +=======+==========+======+\n    | cell  | column spanning |\n    + spans +----------+------+\n    | rows  | normal   | cell |\n    +-------+----------+------+\n    | multi | * cells can be  |\n    | line  | * formatted     |\n    | cells | * paragraphs    |\n    | too   |                 |\n    +-------+-----------------+\n\n-----\n\nA significant advantage of grid tables is that Pandoc Markdown supports\nthem, which is *not* the case for simple tables, for which Pandoc uses a\nsomewhat similar but incompatible format.  However, for Pandoc to\nactually process the formatting, the four space indentation of the grid\ntables must be removed (to prevent monospaced code block formatting).\n\nSimple tables are easier, but cells must be on a single line and cannot\nspan rows::\n\n    ===== ========= =====\n    Table Headings  Here\n    --------------- -----\n    Sub   Headings  Too\n    ===== ========= =====\n    column spanning no\n    --------------- -----\n    cell  cell      row\n    column spanning spans\n    =============== =====\n\nNote that lines between rows are optional and only needed to indicate\nwhere cells in the previous line span columns (by omitting the space).\n\n    ===== ========= =====\n    Table Headings  Here\n    --------------- -----\n    Sub   Headings  Too\n    ===== ========= =====\n    column spanning no\n    --------------- -----\n    cell  cell      row\n    column spanning spans\n    =============== =====\n\n-----\n\nApart from the ability to span rows and do block formatting within cells\nin a grid table, the actual table formatting is not affected by the use\nof grid or simple tables, and depends only on the reStructuredText\nprocessor and any style sheets it may use; for more visual compatibility\nyou may want to use the table style that most closely resembles the\noutput table.\n\nConversely, if you have a reason to prefer the \"pipe tables\" format\ndefined by PHP Markdown Extra and supported by GitHub Flavored Markdown\nand the latest version (1.10) of Pandoc, you can get reasonable results by\nmaking sure that the previous paragraph **does** end with a double colon\n``::`` which will make the table display as monospaced ASCII in\nreStructuredText.\n\n    Colons can be used to align columns in pipe tables::\n\n    | Tables        |      Are      |  Cool |\n    | ------------- |:-------------:| -----:|\n    | col 3 is      | right-aligned | $1600 |\n    | col 2 is      |    centered   |   $12 |\n    | zebra stripes |    are neat   |    $1 |\n\nColons can be used to align columns in pipe tables::\n\n| Tables        |      Are      |  Cool |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      |    centered   |   $12 |\n| zebra stripes |    are neat   |    $1 |\n\n-----\n\nAlso, just as for list indentation, it is a *very* good idea to make\nsure that no tab characters are embedded in the tables; configure your\ntext editor to expand all tabs into spaces; this will help to ensure\nthat the source ASCII display in reStructuredText or Markdown is\nproperly aligned.\n\n\nComments\n--------\nThere is no comment syntax for Markdown, but HTML comments can be used\nwith Markdown processors that allow them (raw HTML is often disabled\nfor security or other reasons, possibly with whitelisted tags allowed;\nnotably, GitHub and BitBucket README markdown disable HTML comments).\nStandard Markdown (but not most processors) requires blank lines before\nand after HTML blocks.  Comments in reStructuredText use a different\nsyntax, but it is possible to create comments that are entirely\ninvisible in reStructuredText output, and only appear as periods in\nMarkdown output (unless HTML comments are disabled).\n\nIn the following comment examples, the reStructuredText comment /\ndirective marker ``..`` is followed by two more periods so that the\nfollowing blank line does not terminate the comment.  For most Markdown\nprocessors, you can use an ``&nbsp;`` entity instead of the two\nadditional periods to reduce the visual impact; but some Markdown\nprocessors (notably the Python Markdown used by BitBucket README\nprocessing) do not support entities outside of HTML blocks.\n\nThe following block is completely hidden from reStructuredText output,\nand barely visible in Markdown output if HTML comments are allowed::\n\n    .. ..\n\n     <!--- Need blank line before this line (and the .. line above).\n     HTML comment written with 3 dashes so that Pandoc suppresses it.\n     Blank lines may appear anywhere in the comment.\n\n     All non-blank lines must be indented at least one space.\n     HTML comment close must be followed by a blank line and a line\n     that is not indented at all (if necessary that can be a line\n     with just two periods followed by another blank line).\n     --->\n\n.. ..\n\n <!--- Need blank line before this line (and the .. line above).\n HTML comment written with 3 dashes so that Pandoc suppresses it.\n Blank lines may appear anywhere in the comment.\n\n All non-blank lines must be indented at least one space.\n HTML comment close must be followed by a blank line and a line\n that is not indented at all (if necessary that can be a line\n with just two periods followed by another blank line).\n --->\n\n-----\n\nYou can also use a variation of the above to include Markdown markup\nthat will be entirely ignored by reStructuredText::\n\n    .. ..\n\n     <ul><li>Need blank line before this line (and .. line above).</li>\n     <li>Blank lines may appear anywhere in this section.</li>\n\n     <li>All non-blank lines must be indented at least one space.</li>\n     <li>HTML and text are displayed only in Markdown output.</li></ul>\n     <p>End of Markdown-only input must be followed by a blank line and\n     a line that is not indented at all (if necessary that can be a line\n     with just two dots followed by another blank line).</p>\n\n.. ..\n\n <ul><li>Need blank line before this line (and .. line above).</li>\n <li>Blank lines may appear anywhere in this section.</li>\n\n <li>All non-blank lines must be indented at least one space.</li>\n <li>HTML and text are displayed only in Markdown output.</li></ul>\n <p>End of Markdown-only input must be followed by a blank line and\n a line that is not indented at all (if necessary that can be a line\n with just two dots followed by another blank line).</p>\n\n-----\n\nYou can use another variation of the above to include reStructuredText\nmarkup that will be ignored by Markdown (except for the periods)::\n\n    .. ..\n\n     <!--- Need blank line before this line (and the .. line above).\n     HTML comment written with 3 dashes so that Pandoc suppresses it.\n     These lines not starting with .. must be indented.\n     HTML comment close must be followed by a blank line and a line\n     that is not indented at all (if necessary that can be a line\n     with just two periods followed by another blank line).\n\n    .. note:: This is a reStructuredText directive - the Markdown\n       output should be just periods\n\n    .. --->\n\n.. ..\n\n <!--- Need blank line before this line (and the .. line above).\n HTML comment written with 3 dashes so that Pandoc suppresses it.\n These lines not starting with .. must be indented.\n HTML comment close must be followed by a blank line and a line\n that is not indented at all (if necessary that can be a line\n with just two periods followed by another blank line).\n\n.. note:: This is a reStructuredText directive - the Markdown\n   output should be just periods\n\n.. --->\n\n-----\n\nNote that although HTML comments are usually marked with ``<!-- -->``\nyou should use three dashes instead of two: ``<!--- --->`` as this is\nused by Pandoc to prevent passing the comment through to the output.\n\n\nMarkdown Extensions\n===================\nUnlike reStructuredText, which is virtually identical across all its\nimplementations, there are a wide variety of semi-compatible Markdown\nextension styles; the most popular are MultiMarkdown and Markdown Extra\n(the latter implemented by PHP Markdown and Maruku, and partially by\nPython Markdown and Redcarpet); Pandoc has its own set of Markdown\nextensions, based on both Markdown Extra and reStructuredText; these\nMarkdown extensions are the most similar to reStructuredText, while the\nMarkdown Extra extensions have a smaller overlap, and the MultiMarkdown\nextensions are only compatible with reStructuredText when they are also\nidentical to parts of Markdown Extra.\n\nDefinition Lists\n----------------\nMarkdown Extra, MultiMarkdown, and Pandoc support a syntax that is\nfairly compatible with the definition list syntax in reStructuredText;\nby using the following format, definitions can be written that are\nrecognized by all of these processors.  In reStructuredText, any line\nthat is followed immediately by an indented line is a definition term,\nwith the following lines at the same indentation level forming the\ndefinition.  Markdown Extra allows an optional blank line between the\nterm and definition lines, but requires the definition to begin with a\ncolon (``:``) that is not indented by more than three spaces and is\nfollowed by a space and the definition\n\nTo be recognized as a definition list item in both reStructuredText and\nMarkdown extensions, only a single term is allowed, and it must be\nfollowed immediately (with no blank line) by the definition.  The\ndefinition must begin with an (indented) colon and a space and it and\nany continuation lines or additional paragraphs or definitions must all\nbe indented by the same amount (one to three spaces), as shown in the\nfollowing example::\n\n    term\n      : definition\n\n    longer term\n      : multi-line definition\n      a second line (will be subject to flow and wrapping)\n\n      a second paragraph in the definition\n\n    complex term\n      : first definition\n\n      : second definition\n\nterm\n  : definition\n\nlonger term\n  : multi-line definition\n  a second line (will be subject to flow and wrapping)\n\n  a second paragraph in the definition\n\ncomplex term\n  : first definition\n\n  : second definition\n\n\nFancy list numbers\n------------------\nAlthough most Markdown processors only support enumerated lists with\narabic numbers followed by periods, Pandoc also supports other list\nstyles that are compatible with reStructuredText.  In particular,\nletters (``A``) as well as roman numerals (``IV``) and alternate\npunctuation with parentheses ( ``(b)`` or ``xiv)`` ) are recognized, and\nsequences starting with numbers other than 1 (or roman numeral I or\nletter A) have the actual starting number or letter preserved in output.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://frankchen.xyz",
    "keywords": "",
    "license": "BSD License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fklearn",
    "platform": "all",
    "project_url": "https://pypi.org/project/fklearn/",
    "release_url": "https://pypi.org/project/fklearn/0.0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "The basic tool of my personal.",
    "version": "0.0.2"
  },
  "releases": {
    "0.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7e23a2a4ea023a50557b43d7733976e4",
          "sha256": "95f64490ce37e215afcdfd2031b96f5897e1467074869e42f6ece69ac48a234d"
        },
        "downloads": -1,
        "filename": "fklearn-0.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7e23a2a4ea023a50557b43d7733976e4",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 25020,
        "upload_time": "2018-02-04T12:35:57",
        "url": "https://files.pythonhosted.org/packages/81/ec/5ce347cf240f13149c3ebb50aced64947f2cfa394a420b9e8df8f82db0d1/fklearn-0.0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "c1c16a6b65576a2fd1dac475825496ac",
          "sha256": "34f2ce96fa0bea0b129dfd561e97ae8be905e1a7591fb9d7646f963c05262619"
        },
        "downloads": -1,
        "filename": "fklearn-0.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "c1c16a6b65576a2fd1dac475825496ac",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35292,
        "upload_time": "2018-02-04T12:35:59",
        "url": "https://files.pythonhosted.org/packages/4d/11/9165e9c9376cd4b7d1ea08e0814227689958a6e784c057afaa4abf0d14e3/fklearn-0.0.1.tar.gz"
      }
    ],
    "0.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "37fbffd4a66da70ba0f651b33cdcc365",
          "sha256": "65fea530373b4c4cdb015828ba4fe27288550e130f06860c25d6f87932a58f95"
        },
        "downloads": -1,
        "filename": "fklearn-0.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "37fbffd4a66da70ba0f651b33cdcc365",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 25434,
        "upload_time": "2018-02-04T13:02:38",
        "url": "https://files.pythonhosted.org/packages/80/06/2cab76c94ff137ee97635ea6f878e5fb19f55cdb010f709d7137963d4097/fklearn-0.0.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "e94c356ee311501b6c25db7dba32d33d",
          "sha256": "a65e79392e4df54be5198ed0b6b6835c24845302405c38bec819b511077665a5"
        },
        "downloads": -1,
        "filename": "fklearn-0.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e94c356ee311501b6c25db7dba32d33d",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 35486,
        "upload_time": "2018-02-04T13:02:40",
        "url": "https://files.pythonhosted.org/packages/20/b7/91af5bff5c2f886e36b39b84ca1b2603d130713d3cff1baef47945632eda/fklearn-0.0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "37fbffd4a66da70ba0f651b33cdcc365",
        "sha256": "65fea530373b4c4cdb015828ba4fe27288550e130f06860c25d6f87932a58f95"
      },
      "downloads": -1,
      "filename": "fklearn-0.0.2-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "37fbffd4a66da70ba0f651b33cdcc365",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 25434,
      "upload_time": "2018-02-04T13:02:38",
      "url": "https://files.pythonhosted.org/packages/80/06/2cab76c94ff137ee97635ea6f878e5fb19f55cdb010f709d7137963d4097/fklearn-0.0.2-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "e94c356ee311501b6c25db7dba32d33d",
        "sha256": "a65e79392e4df54be5198ed0b6b6835c24845302405c38bec819b511077665a5"
      },
      "downloads": -1,
      "filename": "fklearn-0.0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "e94c356ee311501b6c25db7dba32d33d",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 35486,
      "upload_time": "2018-02-04T13:02:40",
      "url": "https://files.pythonhosted.org/packages/20/b7/91af5bff5c2f886e36b39b84ca1b2603d130713d3cff1baef47945632eda/fklearn-0.0.2.tar.gz"
    }
  ]
}