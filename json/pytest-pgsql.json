{
  "info": {
    "author": "Clover Health",
    "author_email": "dev@cloverhealth.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Framework :: Pytest",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Database",
      "Topic :: Software Development :: Testing"
    ],
    "description": "Clean PostgreSQL Databases for Your Tests\n=========================================\n\nThe following is a summary of the complete pytest_pgsql docs, which are available\non `ReadTheDocs <http://pytest-pgsql.readthedocs.io/>`_.\n\nWhat is ``pytest_pgsql``?\n------------------------------\n\n``pytest_pgsql`` is a `pytest <https://pytest.org>`_ plugin you can use to\nwrite unit tests that utilize a temporary PostgreSQL database that gets cleaned\nup automatically after every test runs, allowing each test to run on a completely\nclean database (with some limitations).\n\nThe plugin gives you two fixtures you can use in your tests: ``postgresql_db`` and\n``transacted_postgresql_db``. Both of these give you similar interfaces to access\nto the database, but have slightly different use cases (see below).\n\nSample Usage\n------------\n\nYou can use a session, connection, or engine - the choice is up to you.\n``postgresql_db`` and ``transacted_postgresql_db`` both give you a session, but\n``postgresql_db`` exposes its engine and ``transacted_postgresql_db`` exposes its\nconnection::\n\n    def test_orm(postgresql_db):\n        instance = Person(name='Foo Bar')\n        postgresql_db.session.add(instance)\n        postgresql_db.session.commit()\n        with postgresql_db.engine.connect() as conn:\n            do_thing(conn)\n\n    def test_connection(transacted_postgresql_db):\n        instance = Person(name='Foo Bar')\n        transacted_postgresql_db.session.add(instance)\n        transacted_postgresql_db.session.commit()\n\n        transacted_postgresql_db.connection.execute('DROP TABLE my_table')\n\nFeatures\n--------\n\nThe following is a non-exhaustive list of some of the features provided to you\nby the database fixtures.\n\nManipulating Time\n~~~~~~~~~~~~~~~~~\n\nBoth database fixtures use `freezegun <https://github.com/spulec/freezegun>`_ to\nallow you to freeze time inside a block of code. You can use it in a variety of\nways:\n\nAs a context manager::\n\n    with postgresql.time.freeze('December 31st 1999 11:59:59 PM') as freezer:\n        # Time is frozen inside the database *and* Python.\n        now = postgresql_db.session.execute('SELECT NOW()').scalar()\n        assert now.date() == datetime.date(1999, 12, 31)\n        assert datetime.date.today() == datetime.date(1999, 12, 31)\n\n        # Advance time by 1 second so we roll over into the new year\n        freezer.tick()\n\n        now = postgresql_db.session.execute('SELECT NOW()').scalar()\n        assert now.date() == datetime.date(2000, 1, 1)\n\nAs a decorator::\n\n    @pytest_pgsql.freeze_time(datetime.datetime(2038, 1, 19, 3, 14, 7))\n    def test_freezing(postgresql_db):\n        today = postgresql_db.session.execute(\n            \"SELECT EXTRACT('YEAR' FROM CURRENT_DATE)\").scalar()\n        assert today.year == 2038\n        assert datetime.date.today() == datetime.date(2038, 1, 19)\n\nAnd more!\n\nGeneral-Purpose Functions\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\n``postgresql_db`` and ``transacted_postgresql_db`` provide some general-purpose\nfunctions to ease test setup and execution.\n\n- ``load_csv()`` loads a CSV file into an existing table.\n- ``run_sql_file()`` executes a SQL script, optionally performing variable binding.\n\nExtension Management\n~~~~~~~~~~~~~~~~~~~~\n\nSince version 9.1 Postgres supports `extensions <https://www.postgresql.org/docs/current/static/external-extensions.html>`_.\nYou can check for the presence of and install extensions like so::\n\n    >>> postgresql_db.is_extension_available('asdf')  # Can I install this extension?\n    False\n    >>> postgresql_db.is_extension_available('uuid-ossp')  # Maybe this one is supported...\n    True\n    >>> postgresql_db.install_extension('uuid-ossp')\n    True\n    >>> postgresql_db.is_extension_installed('uuid-ossp')\n    True\n\n``install_extension()`` has additional arguments to allow control over which schema\nthe extension is installed in, what to do if the extension is already installed,\nand so on. See the documentation for descriptions of these features.\n\nSchemas and Tables\n~~~~~~~~~~~~~~~~~~\n\nYou can create `table schemas <https://www.postgresql.org/docs/current/static/ddl-schemas.html>`_\nby calling ``create_schema()`` like so::\n\n    postgresql_db.create_schema('foo')          # Create one schema\n    postgresql_db.create_schema('foo', 'bar')   # Create multiple ones\n\nTo quickly see if a table schema exists, call ``has_schema()``::\n\n    >>> postgresql_db.has_schema('public')\n    True\n\nSimilarly, you can create tables in the database with ``create_table()``. You can\npass SQLAlchemy ``Table`` instances or ORM declarative model classes::\n\n    # Just a regular Table.\n    my_table = Table('abc', MetaData(), Column('def', Integer()))\n\n    # A declarative model works too.\n    class MyORMModel(declarative_base()):\n        id = Column(Integer, primary_key=True)\n\n    # Pass a variable amount of tables to create\n    postgresql_db.create_table(my_table, MyORMModel)\n\nInstallation\n============\n\n    pip3 install pytest-pgsql\n\n\nContributing Guide\n==================\n\nFor information on setting up pytest_pgsql for development and contributing\nchanges, view `CONTRIBUTING.rst <CONTRIBUTING.rst>`_.\n\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/CloverHealth/pytest_pgsql",
    "keywords": "",
    "license": "Copyright Clover Health, Inc.",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pytest-pgsql",
    "platform": "",
    "project_url": "https://pypi.org/project/pytest-pgsql/",
    "release_url": "https://pypi.org/project/pytest-pgsql/1.0.1/",
    "requires_dist": [
      "testing.postgresql (>=1.3.0)",
      "sqlalchemy (>=1.1.0)",
      "pytest (>=3.0.0)",
      "freezegun (>=0.3.6)"
    ],
    "requires_python": "",
    "summary": "Pytest plugins and helpers for tests using a Postgres database.",
    "version": "1.0.1"
  },
  "releases": {
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "809d4531c733f3a802340740d4347cf6",
          "sha256": "2af4848872808f35d92fb7d5d6b37769d04d539188200d134fa0afdf9e849798"
        },
        "downloads": -1,
        "filename": "pytest_pgsql-1.0.1-py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "809d4531c733f3a802340740d4347cf6",
        "packagetype": "bdist_wheel",
        "python_version": "py3",
        "size": 34377,
        "upload_time": "2017-11-27T19:09:26",
        "url": "https://files.pythonhosted.org/packages/c3/fd/62e50dd8761d37a962c1272c1b554dd50896575881f72850bc283c950f3f/pytest_pgsql-1.0.1-py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "b30af8973c5565286e054c8a1fd893b6",
          "sha256": "89135bfe68e8b407f3de4c0a1fc3db2e88fdfea39b7022a0b29a0ccfe124b259"
        },
        "downloads": -1,
        "filename": "pytest_pgsql-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "b30af8973c5565286e054c8a1fd893b6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 41180,
        "upload_time": "2017-11-27T19:09:28",
        "url": "https://files.pythonhosted.org/packages/da/2e/ea2488d1fc0595ed31b465fd497e29b34a287177b37be554a79ce178912c/pytest_pgsql-1.0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "809d4531c733f3a802340740d4347cf6",
        "sha256": "2af4848872808f35d92fb7d5d6b37769d04d539188200d134fa0afdf9e849798"
      },
      "downloads": -1,
      "filename": "pytest_pgsql-1.0.1-py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "809d4531c733f3a802340740d4347cf6",
      "packagetype": "bdist_wheel",
      "python_version": "py3",
      "size": 34377,
      "upload_time": "2017-11-27T19:09:26",
      "url": "https://files.pythonhosted.org/packages/c3/fd/62e50dd8761d37a962c1272c1b554dd50896575881f72850bc283c950f3f/pytest_pgsql-1.0.1-py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "b30af8973c5565286e054c8a1fd893b6",
        "sha256": "89135bfe68e8b407f3de4c0a1fc3db2e88fdfea39b7022a0b29a0ccfe124b259"
      },
      "downloads": -1,
      "filename": "pytest_pgsql-1.0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "b30af8973c5565286e054c8a1fd893b6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 41180,
      "upload_time": "2017-11-27T19:09:28",
      "url": "https://files.pythonhosted.org/packages/da/2e/ea2488d1fc0595ed31b465fd497e29b34a287177b37be554a79ce178912c/pytest_pgsql-1.0.1.tar.gz"
    }
  ]
}