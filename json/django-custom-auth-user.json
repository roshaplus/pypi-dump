{
  "info": {
    "author": "Anthon Alindada",
    "author_email": "anthon.alindada.435@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 3 - Alpha",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: BSD License",
      "Natural Language :: English",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "Django Custom Auth User\n=======================\n\n.. image:: https://travis-ci.org/anthon-alindada/django_custom_auth_user.svg?branch=master\n    :target: https://travis-ci.org/anthon-alindada/django_custom_auth_user\n\n.. image:: https://codecov.io/gh/anthon-alindada/django_custom_auth_user/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/anthon-alindada/django_custom_auth_user\n\nDjango custom user model and abstract user model basic token authentication.\n\nDocumentation\n-------------\n\nThe full documentation is at https://django_custom_auth_user.readthedocs.io.\n\nQuickstart\n----------\n\nInstall Django custom user::\n\n    pip install django_custom_auth_user\n\n\nAdd it to your `INSTALLED_APPS`::\n\n    INSTALLED_APPS = (\n        ...\n        'custom_auth_user',\n        ...\n    )\n\nSet your ``AUTH_USER_MODEL`` setting to use ``custom_auth_user.User``::\n\n    AUTH_USER_MODEL = 'custom_auth_user.User'\n\nCreate the database tables::\n\n    python manage.py migrate\n\nUsage\n-----\n\nCustom user\n-----------\n\nUse ``get_user_model()`` to get user. For example::\n\n    from django.contrib.auth import get_user_model\n\n    user = get_user_model().objects.get(email=\"user@cloud.com\")\n\nUse ``AUTH_USER_MODEL`` for model relations. For example::\n\n    from django.conf import settings\n    from django.db import models\n\n    class Post(models.Model):\n        author = models.ForeignKey(settings.AUTH_USER_MODEL)\n\nOr you can use ``custom_auth_user.models.AbstractUser`` to extend custom user. For example::\n\n    from custom_auth_user.models import AbstractUser\n\n    class CustomUser(AbstractUser):\n        \"\"\"\n        User model extends AbstractUser\n        \"\"\"\n        pass\n\nThen change the ``AUTH_USER_MODEL`` in settings to use new custom user::\n\n    AUTH_USER_MODEL = 'app.CustomUser'\n\nUser registration service\n-------------------------\n\nUse ``RegistrationService`` to register new user::\n\n    from custom_auth_user.user.registration import RegistrationService\n    from custom_auth_user.user.exceptions import InvalidInput\n\n    # Initialize registration service\n    registration_service = RegistrationService(\n        email=request.POST.get('email', ''),\n        username=request.POST.get('username', ''),\n        first_name=request.POST.get('first_name', ''),\n        last_name=request.POST.get('last_name', ''),\n        password=request.POST.get('password', ''))\n\n    # Catch errors here\n    try:\n        user = registration_service.run()\n    except InvalidInput:\n        errors = registration_service.get_registration_form_errors()\n\nGenerate auth token\n-------------------\n\nUse ``AuthenticateUserService`` to generate new auth token::\n\n    from custom_auth_user.auth_token.authenticate_user import AuthenticateUserService\n    from custom_auth_user.auth_token.exceptions import AuthenticationFailed\n\n    authentication_service = AuthenticateUserService(\n        email_or_username=request.POST.get('email_or_username', ''),\n        password=request.POST.get('password', ''))\n\n    try:\n        token = authentication_service.run()\n    except AuthenticationFailed:\n        # Authentication failed\n        pass\n\nToken authentication\n--------------------\n\nUse ``token_required`` decorator to authenticate header token. Get authenticated user at ``request.user``.\n\nAuthorization header must have token at the begining. Example ``token 5KxXkJYwWBsN9Zne87ncoQYYuggDBdYY``.\n\nReturn json response if authentication failed::\n\n    from custom_auth_user.auth_token.decorators import token_required\n\n    @token_required\n    def my_view(request):\n        # get authenticated user at request.user\n        pass\n\nOr you can use ``AuthenticateTokenService`` to authenticate token::\n\n    from custom_auth_user.auth_token.authenticate_token import AuthenticateTokenService\n    from custom_auth_user.auth_token.exceptions import AuthenticationFailed\n\n    authentication_service = AuthenticateTokenService(\n        auth_token=request.POST.get('token', ''))\n\n    try:\n        user = authentication_service.run()\n    except AuthenticationFailed:\n        # Authentication failed\n        pass\n\nDelete Token\n------------\n\nUse ``DeleteTokenService`` to delete token. You can use this when user logs out::\n\n    from custom_auth_user.auth_token.delete_token import DeleteTokenService\n    from custom_auth_user.auth_token.exceptions import TokenNotFound\n\n    delete_token_service = DeleteTokenService(\n        token=request.POST.get('token', ''))\n\n    try:\n        delete_token_service.run()\n    except TokenNotFound:\n        # Token not found\n        pass\n\nExtra features\n--------------\n\nUser QuerySets\n--------------\n\n::\n\n    # Get all users\n    users = User.objects.get_all()\n\n    # Get find user by id\n    user = User.objects.find_by_id(id=1)\n\n    # Get find usermame by id\n    user = User.objects.find_by_username(username='user')\n\n    # Get find email by id\n    user = User.objects.find_by_email(email='user@cloud.com')\n\n    # Filter active users\n    users = User.objects.filter_by_active()\n\n    # Filter inactive users\n    users = User.objects.filter_by_inactive()\n\n    # Filter enabled users\n    users = User.objects.filter_by_enabled()\n\n    # Filter disabled users\n    users = User.objects.filter_by_disabled()\n\nAuthToken QuerySets\n-------------------\n\n::\n\n    # Get all auth token\n    token = AuthToken.objects.get_all()\n\n    # Find by id\n    token = AuthToken.objects.find_by_id(id=1)\n\n    # Find by token\n    token = AuthToken.objects.find_by_token(token='token')\n\n    # Filter by active or unexpired tokens\n    token = AuthToken.objects.filter_by_active()\n\n    # Filter by expired token\n    token = AuthToken.objects.filter_by_expired()\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/anthon-alindada/django_custom_auth_user",
    "keywords": "django custom auth user",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-custom-auth-user",
    "platform": "",
    "project_url": "https://pypi.org/project/django-custom-auth-user/",
    "release_url": "https://pypi.org/project/django-custom-auth-user/0.1.1/",
    "requires_dist": [
      "Django (>=1.8)"
    ],
    "requires_python": "",
    "summary": "Django custom user",
    "version": "0.1.1"
  },
  "releases": {
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "2f62a4d0250ca73d429c4275a780e5d5",
          "sha256": "572ef9e0a190642a53b24ca8b4fe4bb251b7674ca00403ef7c89d86fde75899d"
        },
        "downloads": 0,
        "filename": "django_custom_auth_user-0.1.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "2f62a4d0250ca73d429c4275a780e5d5",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 21110,
        "upload_time": "2017-07-22T09:21:06",
        "url": "https://files.pythonhosted.org/packages/d4/63/bcc01bbbcb928f8513c1ffb875361fc70dd852749abad27263486a97ce67/django_custom_auth_user-0.1.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "647a88e9616770d3fff58d8062125ce6",
          "sha256": "9a5ab5b66dd04d46e343f9e507581d3abeff0fb60c3758dcc7d1db283e98796d"
        },
        "downloads": 0,
        "filename": "django-custom-auth-user-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "647a88e9616770d3fff58d8062125ce6",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12769,
        "upload_time": "2017-07-22T09:21:09",
        "url": "https://files.pythonhosted.org/packages/33/ac/b5b633d30925fd48e9e55b3345a21da200e82ef0b8e0d65d21c14b27b876/django-custom-auth-user-0.1.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "2f62a4d0250ca73d429c4275a780e5d5",
        "sha256": "572ef9e0a190642a53b24ca8b4fe4bb251b7674ca00403ef7c89d86fde75899d"
      },
      "downloads": 0,
      "filename": "django_custom_auth_user-0.1.1-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "2f62a4d0250ca73d429c4275a780e5d5",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 21110,
      "upload_time": "2017-07-22T09:21:06",
      "url": "https://files.pythonhosted.org/packages/d4/63/bcc01bbbcb928f8513c1ffb875361fc70dd852749abad27263486a97ce67/django_custom_auth_user-0.1.1-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "647a88e9616770d3fff58d8062125ce6",
        "sha256": "9a5ab5b66dd04d46e343f9e507581d3abeff0fb60c3758dcc7d1db283e98796d"
      },
      "downloads": 0,
      "filename": "django-custom-auth-user-0.1.1.tar.gz",
      "has_sig": false,
      "md5_digest": "647a88e9616770d3fff58d8062125ce6",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 12769,
      "upload_time": "2017-07-22T09:21:09",
      "url": "https://files.pythonhosted.org/packages/33/ac/b5b633d30925fd48e9e55b3345a21da200e82ef0b8e0d65d21c14b27b876/django-custom-auth-user-0.1.1.tar.gz"
    }
  ]
}