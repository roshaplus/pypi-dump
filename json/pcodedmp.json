{
  "info": {
    "author": "Vesselin Bontchev",
    "author_email": "vbontchev@yahoo.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Environment :: Console",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Natural Language :: English",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Security",
      "Topic :: Software Development :: Disassemblers",
      "Topic :: Utilities"
    ],
    "description": "pcodedmp.py - A VBA p-code disassembler\n=======================================\n\nIntroduction\n------------\n\nIt is not widely known, but macros written in VBA (Visual Basic for\nApplications; the macro programming language used in Microsoft Office)\nexist in three different executable forms, each of which can be what is\nactually executed at run time, depending on the circumstances. These\nforms are:\n\n-  *Source code*. The original source code of the macro module is\n   compressed and stored at the end of the module stream. This makes it\n   relatively easy to locate and extract and most free DFIR tools for\n   macro analysis like\n   `oledump <https://blog.didierstevens.com/programs/oledump-py/>`__ or\n   `olevba <http://www.decalage.info/python/olevba>`__ or even many\n   professional anti-virus tools look only at this form. However, most\n   of the time the source code is completely ignored by Office. In fact,\n   it is possible to remove the source code (and therefore make all\n   these tools think that there are no macros present), yet the macros\n   will still execute without any problems. I have created a `proof of\n   concept <http://bontchev.my.contact.bg/poc2.zip>`__ illustrating\n   this. Most tools will not see any macros in the documents in this\n   archive it but if opened with the corresponding Word version (that\n   matches the document name), it will display a message and will launch\n   ``calc.exe``. It is surprising that malware authors are not using\n   this trick more widely.\n\n-  *P-code*. As each VBA line is entered into the VBA editor, it is\n   immediately compiled into p-code (a pseudo code for a stack machine)\n   and stored in a different place in the module stream. The p-code is\n   precisely what is executed most of the time. In fact, even when you\n   open the source of a macro module in the VBA editor, what is\n   displayed is not the decompressed source code but the p-code\n   decompiled into source. Only if the document is opened under a\n   version of Office that uses a different VBA version from the one that\n   has been used to create the document, the stored compressed source\n   code is re-compiled into p-code and then that p-code is executed.\n   This makes it possible to open a VBA-containing document on any\n   version of Office that supports VBA and have the macros inside remain\n   executable, despite the fact that the different versions of VBA use\n   different (incompatible) p-code instructions.\n\n-  *Execodes*. When the p-code has been executed at least once, a\n   further tokenized form of it is stored elsewhere in the document (in\n   streams, the names of which begin with ``__SRP_``, followed by a\n   number). From there it can be executed much faster. However, the\n   format of the execodes is extremely complex and is specific for the\n   particular Office version (not VBA version) in which they have been\n   created. This makes them extremely non-portable. In addition, their\n   presence is not necessary - they can be removed and the macros will\n   run just fine (from the p-code).\n\nSince most of the time it is the p-code that determines what exactly a\nmacro would do (even if neither source code, nor execodes are present),\nit would make sense to have a tool that can display it. This is what\nprompted us to create this VBA p-code disassembler.\n\nInstallation\n------------\n\nThe script will work both in Python version 2.6+ and in Python 3.x. It\ndepends on Philippe Lagadec's package\n`oletools <https://github.com/decalage2/oletools>`__, so this package\nhas to be installed before using the script. It can be installed with\nthe command\n\n::\n\n    pip install oletools\n\nMake sure you have a fairly recent version of it, as the versions before\n0.50 do not support Python 3.x. If you have an older version of the\nmodule, upgrade it to the latest one with the command\n\n::\n\n    pip install oletools --upgrade\n\nUsage\n-----\n\nThe script takes as a command-line argument a list of one or more names\nof files or directories. If the name is an OLE2 document, it will be\ninspected for VBA code and the p-code of each code module will be\ndisassembled. If the name is a directory, all the files in this\ndirectory and its subdirectories will be similarly processed. In\naddition to the disassembled p-code, by default the script also displays\nthe parsed records of the ``dir`` stream, as well as the identifiers\n(variable and function names) used in the VBA modules and stored in the\n``_VBA_PROJECT`` stream.\n\nThe script supports VBA5 (Office 97, MacOffice 98), VBA6 (Office 2000 to\nOffice 2009) and VBA7 (Office 2010 and higher).\n\nThe script also accepts the following command-line options:\n\n``-h``, ``--help`` Displays a short explanation how to use the script\nand what the command-line options are.\n\n``-v``, ``--version`` Displays the version of the script.\n\n``-n``, ``--norecurse`` If a name specified on the command line is a\ndirectory, process only the files in this directory; do not process the\nfiles in its subdirectories.\n\n``-d``, ``--disasmonly`` Only the p-code will be disassembled, without\nthe parsed contents of the ``dir`` stream or the identifiers in the\n``_VBA_PROJECT`` stream.\n\n``--verbose`` The contents of the ``dir`` and ``_VBA_PROJECT`` streams\nis dumped in hex and ASCII form. In addition, the raw bytes of each\ncompiled into p-code VBA line are also dumped in hex and ASCII.\n\nFor instance, using the script on one of the documents in the `proof of\nconcept <http://bontchev.my.contact.bg/poc2.zip>`__ mentioned above\nproduces the following results:\n\n::\n\n    python pcodedmp.py -d Word2013.doc\n\n    Processing file: Word2013.doc\n    ===============================================================================\n    Module streams:\n    Macros/VBA/ThisDocument - 1517 bytes\n    Line #0:\n            FuncDefn (Private Sub Document_Open())\n    Line #1:\n            LitStr 0x001D \"This could have been a virus!\"\n            Ld vbOKOnly\n            Ld vbInformation\n            Add\n            LitStr 0x0006 \"Virus!\"\n            ArgsCall MsgBox 0x0003\n    Line #2:\n            LitStr 0x0008 \"calc.exe\"\n            Paren\n            ArgsCall Shell 0x0001\n    Line #3:\n            EndSub\n\nFor reference, it is the result of compiling the following VBA code:\n\n::\n\n    Private Sub Document_Open()\n        MsgBox \"This could have been a virus!\", vbOKOnly + vbInformation, \"Virus!\"\n        Shell(\"calc.exe\")\n    End Sub\n\nKnown problems\n--------------\n\n-  Office 2016 64-bit only: When disassembling variables declared as\n   being of custom type (e.g., ``Dim SomeVar As SomeType``), the type\n   (``As SomeType``) is not disassembled.\n\n-  Office 2016 64-bit only: The ``Private`` property of ``Sub``,\n   ``Function`` and ``Property`` declarations is not disassembled.\n\n-  Office 2016 64-bit only: The ``Declare`` part of external function\n   declarations (e.g.,\n   ``Private Declare PtrSafe Function SomeFunc Lib \"SomeLib\" Alias \"SomeName\" () As Long``)\n   is not disassembled.\n\n-  Office 2000 and higher: The type of a subroutine or function argument\n   of type ``ParamArray`` is not disassembled correctly. For instance,\n   ``Sub Foo (ParamArrag arg())`` will be disassembled as\n   ``Sub Foo (arg)``.\n\n-  All versions of Office: The ``Alias \"SomeName\"`` part of external\n   function declarations (e.g.,\n   ``Private Declare PtrSafe Function SomeFunc Lib \"SomeLib\" Alias \"SomeName\" () As Long``)\n   is not disassembled.\n\n-  All versions of Office: The ``Public`` property of custom type\n   definitions (e.g., ``Public Type SomeType``) is not disassembled.\n\n-  All versions of Office: The custom type of a subroutine or function\n   argument is not disassembled correctly and ``CustomType`` is used\n   instead. For instance, ``Sub Foo (arg As Bar)`` will be disassembled\n   as ``Sub Foo (arg As CustomType)``.\n\nI do not have access to 64-bit Office 2016 and the few samples of\ndocuments, generated by this version of Office, that I have, have been\ninsufficient for me to figure out where the corresponding information\nresides. I know where it resides in the other versions of Office, but it\nhas been moved elsewhere in 64-bit Office 2016 and the old algorithms no\nlonger work.\n\nTo do\n-----\n\n-  Implement support of VBA3 (Excel95).\n\n-  While the script should support documents created by MacOffice, this\n   has not been tested (and you know how well untested code usually\n   works). This should be tested and any bugs related to it should be\n   fixed.\n\n-  I am not an experienced Python programmer and the code is ugly.\n   Somebody more familiar with Python than me should probably rewrite\n   the script and make it look better.\n\nChange log\n----------\n\nVersion 1.0.0: Initial version.\n\nVersion 1.1.0: Storing the opcodes in a more efficient manner.\nImplemented VBA7 support. Implemented support for documents created by\nthe 64-bit version of Office.\n\nVersion 1.2.0: Disassembling the various declarations (``New``,\n``Type``, ``Dim``, ``ReDim``, ``Sub``, ``Function``, ``Property``).\n\nVersion 1.2.1: Now runs under Python 3.x too. Improved support of 64-bit\nOffice documents. Implemented support of some VBA7-specific features\n(``Friend``, ``PtrSafe``, ``LongPtr``). Improved the disassembling of\n``Dim`` declarations.\n\nVersion 1.2.2: Implemented handling of documents saved in Open XML\nformat (which is the default format of Office 2007 and higher) -\n``.docm``, ``.xlsm``, ``.pptm``.\n\nVersion 1.2.3: Fixed a few crashes and documented better some\ndisassembly failures. Converted the script into a package that can be\ninstalled with ``pip``. Use the command ``pip install pcodedmp``.\n\n\n",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/bontchev/pcodedmp",
    "keywords": "vba,p-code,disassembler",
    "license": "GPL",
    "maintainer": "",
    "maintainer_email": "",
    "name": "pcodedmp",
    "platform": "",
    "project_url": "https://pypi.org/project/pcodedmp/",
    "release_url": "https://pypi.org/project/pcodedmp/1.2.3/",
    "requires_dist": [
      "oletools (>=0.50)"
    ],
    "requires_python": "",
    "summary": "A VBA p-code disassembler",
    "version": "1.2.3"
  },
  "releases": {
    "1.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "22fe926a8855888cfdc5b41e35808217",
          "sha256": "539856f791dbd613425ae8f9e8cf4ca1766e1e73ba0bbe3f1a1890566c92a119"
        },
        "downloads": -1,
        "filename": "pcodedmp-1.2.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "22fe926a8855888cfdc5b41e35808217",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 34554,
        "upload_time": "2018-02-09T23:29:09",
        "url": "https://files.pythonhosted.org/packages/a4/70/16234b49eaf4d8fee808cb4f327be2d18c923aa4096dae53cccc8a86ecaf/pcodedmp-1.2.3-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "871a543004373fa3a76474cbaeb645a9",
          "sha256": "8ceded091b9eab9e6235638e8b1c90f384c1b57aea04cb3b104cd88e1669f4ce"
        },
        "downloads": -1,
        "filename": "pcodedmp-1.2.3.tar.gz",
        "has_sig": false,
        "md5_digest": "871a543004373fa3a76474cbaeb645a9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 18585,
        "upload_time": "2018-02-09T23:29:15",
        "url": "https://files.pythonhosted.org/packages/67/d4/6691f75e6f9bbbdad9101e1d02398806909f5991c8da1cc6ab528e71acb2/pcodedmp-1.2.3.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "22fe926a8855888cfdc5b41e35808217",
        "sha256": "539856f791dbd613425ae8f9e8cf4ca1766e1e73ba0bbe3f1a1890566c92a119"
      },
      "downloads": -1,
      "filename": "pcodedmp-1.2.3-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "22fe926a8855888cfdc5b41e35808217",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 34554,
      "upload_time": "2018-02-09T23:29:09",
      "url": "https://files.pythonhosted.org/packages/a4/70/16234b49eaf4d8fee808cb4f327be2d18c923aa4096dae53cccc8a86ecaf/pcodedmp-1.2.3-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "871a543004373fa3a76474cbaeb645a9",
        "sha256": "8ceded091b9eab9e6235638e8b1c90f384c1b57aea04cb3b104cd88e1669f4ce"
      },
      "downloads": -1,
      "filename": "pcodedmp-1.2.3.tar.gz",
      "has_sig": false,
      "md5_digest": "871a543004373fa3a76474cbaeb645a9",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 18585,
      "upload_time": "2018-02-09T23:29:15",
      "url": "https://files.pythonhosted.org/packages/67/d4/6691f75e6f9bbbdad9101e1d02398806909f5991c8da1cc6ab528e71acb2/pcodedmp-1.2.3.tar.gz"
    }
  ]
}