{
  "info": {
    "author": "bkfox",
    "author_email": "dev@bkfox.net",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Intended Audience :: Developers",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6"
    ],
    "description": "django-foxhooks\n===============\n\nHooks for Django with priorities and integration in templates. Features\ntemplate integration, priority management and handlers customization. It\nalso integrates other handler type (Once, Delay) plus function\ndecorators.\n\n\nOverview\n--------\n\nThe Hooks class manage Hook instances, that is one per event. Hook\nitself holds handlers that are triggered in order corresponding to their\npriority. A Handler basically contains basic priority information plus\nthe listener function that is called on trigger.\n\nIn foxhooks, there are two different kind of priority: regular and\nreverse. Regular is always executed before reverse and from the lowest\nto the highest ``priority`` value. Reverse is executed in the opposite\norder. This allows registering handlers that are guaranteed to be\nexecuted after all the other ones.\n\n.. code:: python\n\n    # register using base API\n    def square(handler, x):\n        return x*x\n\n    Hooks.register('calc', square, priority = 0)\n\n    # register using decorators\n    @register('calc')\n    def sum(handler, x):\n        return x+x\n\n    # triggers handlers registered for 'calc' -- returns [25, 10]\n    Hooks.trigger('calc', 5)\n\nThere are also special handlers, such as the \u201cOnce\u201d handler. Example\nusing the decorator (I\u2019m too lazy for a more complete example in this\noverview):\n\n.. code:: python\n\n    @once('calc')\n    def sub(handler, x):\n        return x*x - x\n\n    # this will trigger sub()\n    Hooks.trigger('calc', 13)\n    # this won't -- sub() has been unregistered after first trigger\n    Hooks.trigger('calc', 13)\n\nHandler registration\n~~~~~~~~~~~~~~~~~~~~\n\nIt is possible to register an handler by passing a function or an\n``Handler`` instance (or of its subclasses). In the first case,\n``Handler`` will be instanciated using given arguments; otherwise those\nvalues will be dropped.\n\n.. code:: python\n\n    def a(handler, *args, **kwargs):\n        print('a:', args, kwargs)\n\n    def b(handler, *args, **kwargs):\n        print('b:', args, kwargs)\n\n    # register directly with a function\n    ha = Hooks.register('test', a)\n\n    # we can also specify a reverse priority at 0\n    hb = Hooks.register('test', b, priority = 0, reverse = True)\n\nAn Handler can only be registered once per hook. A function however can\nbe reused for a different priority (in this case it instanciates a new\nHandler).\n\n.. code:: python\n\n    Hooks.register('test', ha)          # fails: ha yet present\n    Hooks.register('test', ha, 12)      # fails: ha yet present\n    Hooks.register('test', a)           # okay: new instance created\n    Hooks.register('test', a, 12)       # okay: new instance created\n\nDifferent Handler subclasses\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWe provide different subclass for Handlers that might be usefull in\n``foxhooks.handlers``:\n\n-  **Delay**: triggers only if event happened with a given minimal time\n   delay since previous one;\n-  **Once**: triggers only once; after that, unregister itself from the\n   hook;\n\nDecorator\n~~~~~~~~~\n\nIn order to simplify life in some cases, function decorators are\nprovided:\n\n-  ``@register``: register the function to the given hook;\n-  ``@once``: register the function using a ``Once`` handler;\n-  ``@delay``: register the functino using a ``Delay`` handler;\n\nTemplate\n--------\n\nIt is also possible to use hooks in django-templates.\n\nTODO\n\n\nUseful information\n------------------\n\nUn-Register in an triggering hook\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nWhen a trigger() loop is running on a Hook, un-registration of handlers\nwill be delayed to the end of the loop. However, the *to-be registered*\nHandler still is returned by the ``register`` method.\n\n.. code:: python\n\n    def register_in_loop(handler):\n        # this will be delayed to\n        handler = Hooks.register('test.in_loop', a)\n        # do something with handler\n        return 1\n\n    Hooks.register('test.in_loop', register_in_loop)\n\n    # only run register_in_loop()\n    Hooks.trigger('test.in_loop')\n\n    # run register_in_loop() and a()\n    Hooks.trigger('test.in_loop')\n\nError handling\n~~~~~~~~~~~~~~\n\nWhen an error occurs during a trigger, the running loop is interrupted.\nHowever, delayed un-registration are done.\n\nExample\n-------",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/bkfox/django-foxhooks",
    "keywords": "",
    "license": "LGPL3",
    "maintainer": "",
    "maintainer_email": "",
    "name": "django-foxhooks",
    "platform": "",
    "project_url": "https://pypi.org/project/django-foxhooks/",
    "release_url": "https://pypi.org/project/django-foxhooks/0.1/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Hooks for Django with priorities and integration in templates",
    "version": "0.1"
  },
  "releases": {
    "0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7cfbe421ec6cb7095d8f49440ebe3a7a",
          "sha256": "70437c32d805ec9f39ae54d820d026be551b5a0940d1617effa7abe43987925a"
        },
        "downloads": -1,
        "filename": "django-foxhooks-0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "7cfbe421ec6cb7095d8f49440ebe3a7a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 9702,
        "upload_time": "2017-12-17T16:31:55",
        "url": "https://files.pythonhosted.org/packages/56/81/0af7457dd941d72932f2e5d04c9aab1510670ae710f3819549b40fb1d113/django-foxhooks-0.1.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "7cfbe421ec6cb7095d8f49440ebe3a7a",
        "sha256": "70437c32d805ec9f39ae54d820d026be551b5a0940d1617effa7abe43987925a"
      },
      "downloads": -1,
      "filename": "django-foxhooks-0.1.tar.gz",
      "has_sig": false,
      "md5_digest": "7cfbe421ec6cb7095d8f49440ebe3a7a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 9702,
      "upload_time": "2017-12-17T16:31:55",
      "url": "https://files.pythonhosted.org/packages/56/81/0af7457dd941d72932f2e5d04c9aab1510670ae710f3819549b40fb1d113/django-foxhooks-0.1.tar.gz"
    }
  ]
}