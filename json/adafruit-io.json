{
  "info": {
    "author": "Justin Cooper",
    "author_email": "justin@adafruit.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: MacOS",
      "Operating System :: Microsoft :: Windows",
      "Operating System :: POSIX :: Linux",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Topic :: Home Automation",
      "Topic :: Software Development",
      "Topic :: System :: Hardware"
    ],
    "description": "# adafruit-io\n\nA [Python](https://www.python.org/) client for use with [io.adafruit.com](https://io.adafruit.com).  Compatible with both Python 2.7+ and Python 3.3+.\n\n## Installation\n\n### Easy Installation\n\nIf you have [pip installed](https://pip.pypa.io/en/latest/installing.html)\n(typically with ````apt-get install python-pip```` on a Debian/Ubuntu-based\nsystem) then run:\n\n    sudo pip install adafruit-io\n\nThis will automatically install the Adafruit IO Python client code for your\nPython scripts to use.  You might want to examine the examples folder in this\nGitHub repository to see examples of usage.\n\n### Manual Installation\n\nClone or download the contents of this repository.  Then navigate to the folder\nin a terminal and run the following command:\n\n    sudo python setup.py install\n\n(on Windows, and some linux-based boards such as the Yun, omit the sudo)\n\n### Raspberry Pi SSL Note\n\nOn a Raspberry Pi with Python 2.7.3 you might see warnings like:\n\n    InsecurePlatformWarning: A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. For more information, see https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning.\n\nTo remove this warning you can install better SSL support for Python by running these\ncommands in a terminal\n\n    sudo apt-get update\n    sudo apt-get install -y python-pip python-dev build-essential libffi-dev libssl-dev\n    sudo pip install requests[security]\n\nRestart the Pi and you should see the warnings disappear.\n\n\n## Usage\n\nYou must have an [Adafruit IO key](https://learn.adafruit.com/adafruit-io/api-key) to use this library and the Adafruit IO service.\nYour API key will be provided to the python library so it can authenticate your\nrequests against the Adafruit IO service.\n\nAt a high level the Adafruit IO python client provides two interfaces to the\nservice:\n\n* A thin wrapper around the REST-based API.  This is good for simple request and\n  response applications like logging data.\n\n* A MQTT client (based on [paho-mqtt](https://pypi.python.org/pypi/paho-mqtt))\n  which can publish and subscribe to feeds so it is immediately alerted of changes.\n  This is good for applications which need to know when something has changed as\n  quickly as possible.\n\nTo use either interface you'll first need to import the python client by adding\nan import such as the following at the top of your program:\n\n```python\nfrom Adafruit_IO import *\n```\n\nThen a REST API client can be created with code like:\n\n```python\naio = Client('xxxxxxxxxxxx')\n```\n\nWhere 'xxxxxxxxxxxx' is your Adafruit IO API key.\n\nAlternatively an MQTT client can be created with code like:\n\n```python\nmqtt = MQTTClient('xxxxxxxxxxxx')\n```\n\nAgain where 'xxxxxxxxxxxx' is your Adafruit IO API key.\n\nYour program can use either or both the REST API client and MQTT client,\ndepending on your needs.\n\n### Error Handling\n\nThe python client library will raise an exception if it runs into an error it\ncannot handle.  You should be prepared to catch explicit exceptions you know how\nto handle, or bubble them up to the user as an error.  Adafruit IO exceptions\ngenerally are children of the base exception type `AdafruitIOError`.\n\n### Quickstart\n\nHere's a short example of how to send a new value to a feed (creating the feed\nif it doesn't exist), and how to read the most recent value from the feed.  This\nexample uses the REST API.\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Send the value 100 to a feed called 'Foo'.\naio.send('Foo', 100)\n\n# Retrieve the most recent value from the feed 'Foo'.\n# Access the value by reading the `value` property on the returned Data object.\n# Note that all values retrieved from IO are strings so you might need to convert\n# them to an int or numeric type if you expect a number.\ndata = aio.receive('Foo')\nprint('Received value: {0}'.format(data.value))\n```\n\nIf you want to be notified of feed changes immediately without polling, consider\nusing the MQTT client.  See the [examples\\mqtt_client.py](https://github.com/adafruit/io-client-python/blob/master/examples/mqtt_client.py) for an example of using the MQTT client.\n\n### More Information\n\nSee the details below for more information about using the Adafruit IO python\nclient.  You can also print out the documentation on the client and classes by\nrunning:\n\n```\npydoc Adafruit_IO.client\npydoc Adafruit_IO.mqtt_client\npydoc Adafruit_IO.model\npydoc Adafruit_IO.errors\n```\n\n## Table of Contents\n\n* [Feeds](#feeds)\n  * [Create](#feed-creation)\n  * [Read](#feed-retrieval)\n  * [Update](#feed-updating)\n  * [Delete](#feed-deletion)\n* [Data](#data)\n  * [Create](#data-creation)\n  * [Read](#data-retrieval)\n  * [Update](#data-updating)\n  * [Delete](#data-deletion)\n  * [Helper Methods](#helper-methods)\n    * [Send](#send)\n    * [Receive](#receive)\n    * [Next](#next)\n    * [Previous](#previous)\n  * [Publishing and Subscribing](#publishing-and-subscribing)\n* [Groups](#groups)\n  * [Create](#group-creation)\n  * [Read](#group-retrieval)\n  * [Update](#group-updating)\n  * [Delete](#group-deletion)\n\n### Feeds\n\n[Feeds](https://learn.adafruit.com/adafruit-io/feeds) are the core of the Adafruit IO system. The feed holds metadata about data\nthat gets pushed, and you will have one feed for each type of data you send to\nthe system. You can have separate feeds for each sensor in a project, or you can\nuse one feed to contain JSON encoded data for all of your sensors.\n\n#### Feed Creation\n\nCreate a feed by constructing a Feed instance with at least a name specified, and\nthen pass it to the `create_feed(feed)` function:\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client, Feed\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Create Feed object with name 'Foo'.\nfeed = Feed(name='Foo')\n\n# Send the Feed to IO to create.\n# The returned object will contain all the details about the created feed.\nresult = aio.create_feed(feed)\n```\n\nNote that you can use the [send](#send) function to create a feed and send it a\nnew value in a single call.  It's recommended that you use send instead of\nmanually constructing feed instances.\n\n#### Feed Retrieval\n\nYou can get a list of your feeds by using the `feeds()` method which will return\na list of Feed instances:\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Get list of feeds.\nfeeds = aio.feeds()\n\n# Print out the feed names:\nfor f in feeds:\n    print('Feed: {0}'.format(f.name))\n```\n\nAlternatively you can retrieve the metadata for a single feed by calling\n`feeds(feed)` and passing the name, ID, or key of a feed to retrieve:\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Get feed 'Foo'\nfeed = aio.feeds('Foo')\n\n# Print out the feed metadata.\nprint(feed)\n```\n\n#### Feed Updating\n\nTODO: This is not tested in the python client yet, but calling create_feed with\na Feed instance should update the feed.\n\n#### Feed Deletion\n\nYou can delete a feed by ID, key, or name by calling `delete_feed(feed)`.\nALL data in the feed will be deleted after calling this API!\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Delete the feed with name 'Test'.\naio.delete_feed('Test')\n```\n\n### Data\n\nData represents the data contained in feeds. You can read, add, modify, and\ndelete data. There are also a few convenient methods for sending data to feeds\nand selecting certain pieces of data.\n\n#### Data Creation\n\nData can be created [after you create a feed](#data-creation), by using the\n`create_data(feed, data)` method and passing it a new Data instance a value.\nSee also the [send function](#send) for a simpler way to add a value to feed and\ncreate the feed in one call.\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client, Data\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Create a data item with value 10 in the 'Test' feed.\ndata = Data(value=10)\naio.create_data('Test', data)\n```\n\n#### Data Retrieval\n\nYou can get all of the data for a feed by using the `data(feed)` method. The\nresult will be an array of all feed data, each returned as an instance of the\nData class.  Use the value property on each Data instance to get the data value,\nand remember values are always returned as strings (so you might need to convert\nto an int or number if you expect a numeric value).\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Get an array of all data from feed 'Test'\ndata = aio.data('Test')\n\n# Print out all the results.\nfor d in data:\n    print('Data value: {0}'.format(d.value))\n```\n\nYou can also get a specific value by ID by using the `feeds(feed, data_id)`\nmethod.  This will return a single piece of feed data with the provided data ID\nif it exists in the feed.  The returned object will be an instance of the Data\nclass.\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Get a specific value by id.\n# This example assumes 1 is a valid data ID in the 'Test' feed\ndata = aio.feeds('Test', 1)\n\n# Print the value.\nprint('Data value: {0}'.format(data.value))\n```\n\n#### Data Updating\n\nTODO: This is not tested in the python client, but calling create_data with a\nData instance should update it.\n\n#### Data Deletion\n\nValues can be deleted by using the `delete(feed, data_id)` method:\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Delete a data value from feed 'Test' with ID 1.\ndata = aio.delete('Test', 1)\n```\n\n#### Helper Methods\n\nThere are a few helper methods that can make interacting with data a bit easier.\n\n##### Send\n\nYou can use the `send(feed_name, value)` method to append a new value to a\nfeed in one call.  If the specified feed does not exist it will automatically be\ncreated.  This is the recommended way to send data to Adafruit IO from the Python\nREST client.\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Add the value 98.6 to the feed 'Temperature'.\naio.send('Temperature', 98.6)\n```\n\n##### Receive\n\nYou can get the last inserted value by using the `receive(feed)` method.\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Get the last value of the temperature feed.\ndata = aio.receive('Test')\n\n# Print the value and a message if it's over 100.  Notice that the value is\n# converted from string to int because it always comes back as a string from IO.\ntemp = int(data.value)\nprint('Temperature: {0}'.format(temp))\nif temp > 100:\n    print 'Hot enough for you?'\n```\n\n##### Next\n\nYou can get the first inserted value that has not been processed (read) by using\nthe `receive_next(feed)` method.\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Get next unread value from feed 'Test'.\ndata = aio.receive_next('Test')\n\n# Print the value.\nprint('Data value: {0}'.format(data.value))\n```\n\n##### Previous\n\nYou can get the last record that has been processed (read) by using the\n`receive_previous(feed)` method.\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Get previous read value from feed 'Test'.\ndata = aio.receive_previous('Test')\n\n# Print the value.\nprint('Data value: {0}'.format(data.value))\n```\n\n#### Publishing and Subscribing\n\nYou can get a readable stream of live data from your feed using the included\nMQTT client class.\n\nTBD: Document using the MQTT client.  For now see the [examples\\mqtt_client.py](https://github.com/adafruit/io-client-python/blob/master/examples/mqtt_client.py) example which is fully documented with comments.\n\n### Groups\n\n[Groups](https://learn.adafruit.com/adafruit-io/groups) allow you to update and retrieve multiple feeds with one request. You can\nadd feeds to multiple groups.\n\n#### Group Creation\n\nTBD: Currently group creation doesn't work with the APIs.  Groups must be created\nin the UI.\n\n#### Group Retrieval\n\nYou can get a list of your groups by using the `groups()` method.  This will\nreturn a list of Group instances.  Each Group instance has metadata about the\ngroup, including a `feeds` property which is a tuple of all feeds in the group.\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Get list of groups.\ngroups = aio.groups()\n\n# Print the group names and number of feeds in the group.\nfor g in groups:\n    print('Group {0} has {1} feed(s).'.format(g.name, len(g.feeds)))\n```\n\nYou can also get a specific group by ID, key, or name by using the\n`groups(group)` method:\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Get group called 'GroupTest'.\ngroup = aio.groups('GroupTest')\n\n# Print the group name and number of feeds in the group.\nprint('Group {0} has {1} feed(s).'.format(group.name, len(group.feeds)))\n```\n\n#### Group Updating\n\nTBD This is not tested in the python client yet, but calling create_group should\nupdate a group.\n\n#### Group Deletion\n\nYou can delete a group by ID, key, or name by using the `delete_group(group)`\nmethod:\n\n```python\n# Import library and create instance of REST client.\nfrom Adafruit_IO import Client\naio = Client('YOUR ADAFRUIT IO KEY')\n\n# Delete group called 'GroupTest'.\naio.delete_group('GroupTest')\n```\n\n## Contributing\n\n1. Fork it ( http://github.com/adafruit/io-client-python/fork )\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create new Pull Request\n\n## License\nCopyright (c) 2014 Adafruit Industries. Licensed under the MIT license.",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/adafruit/io-client-python",
    "keywords": "Adafruit IO",
    "license": "MIT",
    "maintainer": null,
    "maintainer_email": null,
    "name": "adafruit-io",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/adafruit-io/",
    "release_url": "https://pypi.org/project/adafruit-io/1.1.0/",
    "requires_python": null,
    "summary": "Client library for Adafruit IO (http://io.adafruit.com/).",
    "version": "1.1.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1230afbdcd31e1055850d69df0a3092d",
          "sha256": "c52117736fce73313ba0bc1496e3873b63875f98a683d66eb86bbef33992aff1"
        },
        "downloads": 357,
        "filename": "adafruit_io-1.0.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "1230afbdcd31e1055850d69df0a3092d",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 21119,
        "upload_time": "2016-01-19T10:39:15",
        "url": "https://files.pythonhosted.org/packages/88/c5/2748b4b32da5662256abf17b462f90a2c0bef2e7e006ffaf4626f93fded4/adafruit_io-1.0.0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "d4e1efbb9943140e6be335cca600e150",
          "sha256": "b53e150f8e7c79b2e1bd31f0bf69c41316d944efe6eddc7413560eb74a12f233"
        },
        "downloads": 373,
        "filename": "adafruit-io-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "d4e1efbb9943140e6be335cca600e150",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 11943,
        "upload_time": "2016-01-19T10:39:09",
        "url": "https://files.pythonhosted.org/packages/0f/df/823d3ef307bb64dc77f4b7303c84ddbc46a625be7b52082681760ca2ff35/adafruit-io-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "6335c6f5f73e06b94753517b6c3be85d",
          "sha256": "903eec769506a1d5c07fe202a17e5472707af599bb75c91c96ea43fbe46bd86f"
        },
        "downloads": 333,
        "filename": "adafruit_io-1.0.1-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "6335c6f5f73e06b94753517b6c3be85d",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 24672,
        "upload_time": "2016-01-20T19:35:27",
        "url": "https://files.pythonhosted.org/packages/55/3d/022c69bbced439d61b3c297f853aca4b50a6c53050124f5ef8b5cc2a37cc/adafruit_io-1.0.1-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "1462c2182b03dad21df519d2307efd59",
          "sha256": "36452aea4e43d55d05d09e67b8d15a9237286b2b62a804319c92f31cc09813a9"
        },
        "downloads": 340,
        "filename": "adafruit-io-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "1462c2182b03dad21df519d2307efd59",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20249,
        "upload_time": "2016-01-20T19:35:22",
        "url": "https://files.pythonhosted.org/packages/a2/7c/16062bd943ab7e4f0f65a59150d418414deb48160681c4e45119e81d54f2/adafruit-io-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "e0baa7d0450ea0ed0b595d12cd51bbb7",
          "sha256": "86cdb492045d24cc47be3a5864e84170e71bdbdfe72508d95f3bc0c7d37de929"
        },
        "downloads": 420,
        "filename": "adafruit-io-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "e0baa7d0450ea0ed0b595d12cd51bbb7",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20261,
        "upload_time": "2016-01-20T20:10:46",
        "url": "https://files.pythonhosted.org/packages/94/65/91302c8d8796add12449afd0e933448ffbdf549458ec6a8b5d4b05fd0dc1/adafruit-io-1.0.2.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "91254db81cc3758bb76e2cf8ebc45ce2",
          "sha256": "e3a94dd09cceb03797caffc2368ad93802630ca7a1ddc23d455f363872cd5aca"
        },
        "downloads": 480,
        "filename": "adafruit_io-1.1.0-py2-none-any.whl",
        "has_sig": false,
        "md5_digest": "91254db81cc3758bb76e2cf8ebc45ce2",
        "packagetype": "bdist_wheel",
        "python_version": "2.7",
        "size": 24687,
        "upload_time": "2016-03-29T07:55:13",
        "url": "https://files.pythonhosted.org/packages/a7/dc/c8c7cc2aaad5fd56a398a218a0d8ecabb0f6fa9be51fb3b239abda34e52b/adafruit_io-1.1.0-py2-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "793ec1228fab642e0c67172d5d7c4599",
          "sha256": "4b8fac8c267cf4aa83e69a5a0de2b3da07ef532d80e95ce92995f41fe8e1c4da"
        },
        "downloads": 529,
        "filename": "adafruit-io-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "793ec1228fab642e0c67172d5d7c4599",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 20265,
        "upload_time": "2016-03-29T07:55:00",
        "url": "https://files.pythonhosted.org/packages/79/92/e8105dc473cd76a27bc137891ea4c44fda1f3f60348532e938ea6dbb6bbd/adafruit-io-1.1.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "91254db81cc3758bb76e2cf8ebc45ce2",
        "sha256": "e3a94dd09cceb03797caffc2368ad93802630ca7a1ddc23d455f363872cd5aca"
      },
      "downloads": 480,
      "filename": "adafruit_io-1.1.0-py2-none-any.whl",
      "has_sig": false,
      "md5_digest": "91254db81cc3758bb76e2cf8ebc45ce2",
      "packagetype": "bdist_wheel",
      "python_version": "2.7",
      "size": 24687,
      "upload_time": "2016-03-29T07:55:13",
      "url": "https://files.pythonhosted.org/packages/a7/dc/c8c7cc2aaad5fd56a398a218a0d8ecabb0f6fa9be51fb3b239abda34e52b/adafruit_io-1.1.0-py2-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "793ec1228fab642e0c67172d5d7c4599",
        "sha256": "4b8fac8c267cf4aa83e69a5a0de2b3da07ef532d80e95ce92995f41fe8e1c4da"
      },
      "downloads": 529,
      "filename": "adafruit-io-1.1.0.tar.gz",
      "has_sig": false,
      "md5_digest": "793ec1228fab642e0c67172d5d7c4599",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 20265,
      "upload_time": "2016-03-29T07:55:00",
      "url": "https://files.pythonhosted.org/packages/79/92/e8105dc473cd76a27bc137891ea4c44fda1f3f60348532e938ea6dbb6bbd/adafruit-io-1.1.0.tar.gz"
    }
  ]
}