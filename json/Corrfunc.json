{
  "info": {
    "author": "Manodeep Sinha",
    "author_email": "manodeep@gmail.com",
    "bugtrack_url": "",
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: MIT License",
      "Natural Language :: English",
      "Operating System :: POSIX",
      "Programming Language :: C",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.6",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5"
    ],
    "description": "|Release| |PyPI| |MIT licensed| |DOI| |ASCL| |Travis Build| |Issues| |RTD| |Landscape| |Gitter|\n\nDescription\n===========\n\nThis repo contains a set of codes to measure the following OpenMP\nparallelized clustering measures in a cosmological box (co-moving XYZ)\nor on a mock (RA, DEC, CZ). Also, contains the associated paper to be\npublished in Astronomy & Computing Journal (at some point). Read the\ndocumentation on `corrfunc.rtfd.io <http://corrfunc.rtfd.io/>`_. \n\n**NOTE** ``v2.0`` is a significant update in terms of capability and is currently *only* available by directly ``cloning`` the repo and not through ``PyPI`` (documentation on ``rtfd.io`` corresponds to ``v2.0``).\n\nWhy Should You Use it\n======================\n\n1. **Fast** Theory pair-counting is **7x** faster than ``SciPy cKDTree``, and at least **2x** faster than all existing public codes.\n2. **OpenMP Parallel** All pair-counting codes can be done in parallel (with strong scaling efficiency >~ 95% up to 10 cores)\n3. **Python Extensions** Python extensions allow you to do the compute-heavy bits using C while retaining all of the user-friendliness of python. \n4. **Weights** All correlation functions now support weights for individual points (in ``master`` branch, upcoming in `v2.0.0 <https://github.com/manodeep/Corrfunc/releases/tag/2.0.0>`_)\n5. **Modular** The code is written in a modular fashion and is easily extensible to compute arbitrary clustering statistics. \n6. **Future-proof** As I get access to newer instruction-sets, the codes will get updated to use the latest and greatest CPU features. \n\n*If you use the codes for your analysis, please star this repo -- that helps us keep track of the number of users.*\n\nBenchmark against Existing Codes\n================================\n\nPlease see this\n`gist <https://gist.github.com/manodeep/cffd9a5d77510e43ccf0>`__ for\nsome benchmarks with current codes. If you have a pair-counter that you would like to compare, please add in a corresponding function and update the timings. \n\nInstallation\n============\n\nPre-requisites\n--------------\n\n1. ``make >= 3.80``\n2. OpenMP capable compiler like ``icc``, ``gcc>=4.6`` or ``clang >= 3.7``. If\n   not available, please disable ``USE_OMP`` option option in\n   ``theory.options`` and ``mocks.options``. You might need to ask your\n   sys-admin for system-wide installs of the compiler; if you prefer to\n   install your own then ``conda install gcc`` (MAC/linux) or\n   ``(sudo) port install gcc5`` (on MAC) should work. \n3. ``gsl``. Use either\n   ``conda install -c https://conda.anaconda.org/asmeurer gsl``\n   (MAC/linux) or ``(sudo) port install gsl`` (MAC) to install ``gsl``\n   if necessary.\n4. ``python >= 2.6`` or ``python>=3.4`` for compiling the C extensions.\n5. ``numpy>=1.7`` for compiling the C extensions.\n\nPreferred Install Method\n-------------------------\n\n::\n\n    $ git clone https://github.com/manodeep/Corrfunc/\n    $ make \n    $ make install\n    $ python setup.py install (--user)\n    $ make tests \n\nAssuming you have ``gcc`` in your ``PATH``, ``make`` and\n``make install`` should compile and install the C libraries + python\nextensions within the source directory. If you would like to install the\npython C extensions in your environment, then\n``python setup.py install (--user)`` should be sufficient. If you are primarily\ninterested in the ``python`` interface, you can condense all of the steps\nby using ``python setup.py install CC=yourcompiler (--user)`` after ``git clone``.\n\nCompilation Notes\n------------------\n\n- If python and/or numpy are not available, then the C extensions will not be compiled.\n\n- Default compiler on MAC is set to ``clang``, if you want to specify a different compiler, you will have to call ``make CC=yourcompiler``\n\n\nAlternate Install Method\n-------------------------\n\nThe python package is directly installable via ``pip install Corrfunc``. However, in that case you will lose the ability to recompile the code according to your needs. Installing via `pip` is **not** recommended, please open an install issue on this repo first; doing so helps improve the code-base and saves future users from running into similar install issues. \n\nInstallation notes\n------------------\n\nIf compilation went smoothly, please run ``make tests`` to ensure the\ncode is working correctly. Depending on the hardware and compilation\noptions, the tests might take more than a few minutes. *Note that the\ntests are exhaustive and not traditional unit tests*.\n\nWhile I have tried to ensure that the package compiles and runs out of\nthe box, cross-platform compatibility turns out to be incredibly hard.\nIf you run into any issues during compilation and you have all of the\npre-requisites, please see the `FAQ <FAQ>`__ or `email\nthe Corrfunc mailing list <mailto:corrfunc@googlegroups.com>`__. Also, feel free to create a new issue\nwith the ``Installation`` label.\n\nClustering Measures on a Cosmological box\n-----------------------------------------\n\nAll codes that work on cosmological boxes with co-moving positions are\nlocated in the ``theory`` directory. The various clustering measures\nare:\n\n1. ``xi_of_r`` -- Measures auto/cross-correlations between two boxes.\n   The boxes do not need to be cubes.\n\n2. ``xi`` -- Measures 3-d auto-correlation in a cubic cosmological box.\n   Assumes PERIODIC boundary conditions.\n\n3. ``wp`` -- Measures auto 2-d point projected correlation function in a\n   cubic cosmological box. Assumes PERIODIC boundary conditions.\n\n4. ``xi_rp_pi`` -- Measures the auto/cross correlation function between\n   two boxes. The boxes do not need to be cubes.\n\n5. ``vpf`` -- Measures the void probability function + counts-in-cells.\n\nClustering measures on a Mock\n-----------------------------\n\nAll codes that work on mock catalogs (RA, DEC, CZ) are located in the\n``mocks`` directory. The various clustering measures are:\n\n1. ``DDrppi`` -- The standard auto/cross correlation between two data\n   sets. The outputs, DD, DR and RR can be combined using ``wprp`` to\n   produce the Landy-Szalay estimator for `wp(rp)`.\n\n2. ``wtheta`` -- Computes angular correlation function between two data\n   sets. The outputs from ``DDtheta_mocks`` need to be combined with\n   ``wtheta`` to get the full `\\omega(\\theta)`\n\n3. ``vpf`` -- Computes the void probability function on mocks.\n\nScience options\n===============\n\nIf you plan to use the command-line, then you will have to specify the\ncode runtime options at compile-time. For theory routines, these options\nare in the file ``theory.options`` while for the mocks, these options are\nin file ``mocks.options``. \n\n**Note** All options can be specified at \nruntime if you use the python interface or the static libraries. Each one of\nthe following ``Makefile`` option has a corresponding entry for the runtime\nlibraries. \n\nTheory (in ``theory.options``)\n-------------------------------\n\n1. ``PERIODIC`` (ignored in case of wp/xi) -- switches periodic boundary\n   conditions on/off. Enabled by default.\n\n2. ``OUTPUT_RPAVG`` -- switches on output of ``<rp>`` in each ``rp``\n   bin. Can be a massive performance hit (~ 2.2x in case of wp).\n   Disabled by default. \n\n3. ``DOUBLE_PREC`` -- switches on calculations in double precision. Disabled\n   by default (i.e., calculations are performed in single precision by default).\n   \nMocks (in ``mocks.options``)\n----------------------------\n\n1. ``OUTPUT_RPAVG`` -- switches on output of ``<rp>`` in each ``rp``\n   bin for ``DDrppi_mocks``. Enabled by default.\n\n2. ``OUTPUT_THETAAVG`` -- switches on output of in each theta bin. Can\n   be extremely slow (~5x) depending on compiler, and CPU capabilities.\n   Disabled by default.\n\n3. ``DOUBLE_PREC`` -- switches on calculations in double precision. Disabled\n   by default (i.e., calculations are performed in single precision by default).\n   \n4. ``LINK_IN_DEC`` -- creates binning in declination for ``DDtheta``. Please\n   check that for your desired limits ``\\theta``, this binning does not \n   produce incorrect results (due to numerical precision). Generally speaking,\n   if your ``\\thetamax`` (the max. ``\\theta`` to consider pairs within) is too\n   small (probaly less than 1 degree), then you should check with and without\n   this option. Errors are typically sub-percent level. \n\n5. ``LINK_IN_RA`` -- creates binning in RA once binning in DEC has been\n   enabled. Same numerical issues as ``LINK_IN_DEC``\n\n6. ``FAST_DIVIDE`` -- Disabled by default. Divisions are slow but required\n   ``DD(r_p,\\pi)``. Enabling this option, replaces\n   the divisions with a reciprocal followed by a Newton-Raphson. The code\n   will run ~20% faster at the expense of some numerical precision.\n   Please check that the loss of precision is not important for your\n   use-case. \n\n7. ``FAST_ACOS`` -- Relevant only when ``OUTPUT_THETAAVG`` is enabled. Disabled \n   by default. An ``arccos`` is required to calculate ``<\\theta>``. In absence of vectorized\n   ``arccos`` (intel compiler, ``icc`` provides one via intel Short Vector Math \n   Library), this calculation is extremely slow. However, we can approximate\n   ``arccos`` using polynomials (with `Remez Algorithm <https://en.wikipedia.org/wiki/Remez_algorithm>`_).\n   The approximations are taken from implementations released by `Geometric Tools <http://geometrictools.com/>`_.\n   Depending on the level of accuracy desired, this implementation of ``fast acos`` \n   can be tweaked in the file `utils/fast_acos.h <utils/fast_acos.h>`__. An alternate, less\n   accurate implementation is already present in that file. Please check that the loss of \n   precision is not important for your use-case. \n\n8. ``COMOVING_DIST`` -- Currently there is no support in ``Corrfunc`` for different cosmologies. However, for the\n   mocks routines like, ``DDrppi_mocks`` and ``vpf_mocks``, cosmology parameters are required to convert between\n   redshift and co-moving distance. Both ``DDrppi_mocks`` and ``vpf_mocks`` expects to receive a ``redshift`` array \n   as input; however, with this option enabled, the ``redshift`` array will be assumed to contain already converted\n   co-moving distances. So, if you have redshifts and want to use an arbitrary cosmology, then convert the redshifts\n   into co-moving distances, enable this option, and pass the co-moving distance array into the routines. \n\nRunning the codes\n=================\n\nRead the documentation on `corrfunc.rtfd.io <http://corrfunc.rtfd.io/>`_.\n\n\nUsing the command-line interface\n--------------------------------\n\nNavigate to the correct directory. Make sure that the options, set in\neither ``theory.options`` or ``mocks.options`` in the root directory are\nwhat you want. If not, edit those two files (and possibly\n``common.mk``), and recompile. Then, you can use the command-line\nexecutables in each individual subdirectory corresponding to the\nclustering measure you are interested in. For example, if you want to\ncompute the full 3-D correlation function, ``\\xi(r)``, then navigate to\n``theory/xi`` and run the executable ``xi``. If you run executables\nwithout any arguments, the message will you tell you all the required\narguments.\n\nCalling from C\n--------------\n\nLook under the ``theory/examples/run_correlations.c`` and\n``mocks/examples/run_correlations_mocks.c`` to see examples of\ncalling the C API directly. If you run the executables,\n``run_correlations`` and ``run_correlations_mocks``, the output will\nalso show how to call the command-line interface for the various\nclustering measures.\n\nCalling from Python\n-------------------\n\nIf all went well, the codes can be directly called from ``python``.\nPlease see ``Corrfunc/call_correlation_functions.py`` and\n``Corrfunc/call_correlation_functions_mocks.py`` for examples on how to\nuse the C extensions directly. Here are a few examples:\n\n.. code:: python\n\n    from __future__ import print_function\n    import os.path as path\n    import numpy as np\n    import Corrfunc\n    from Corrfunc.theory import wp\n\n    # Setup the problem for wp\n    boxsize = 500.0\n    pimax = 40.0\n    nthreads = 4\n\n    # Create a fake data-set.\n    Npts = 100000\n    x = np.float32(np.random.random(Npts))\n    y = np.float32(np.random.random(Npts))\n    z = np.float32(np.random.random(Npts))\n    x *= boxsize\n    y *= boxsize\n    z *= boxsize\n\n    # Setup the bins\n    rmin = 0.1\n    rmax = 20.0\n    nbins = 20\n    \n    # Create the bins\n    rbins = np.logspace(np.log10(0.1), np.log10(rmax), nbins)\n\n    # Call wp\n    wp_results = wp(boxsize, pimax, nthreads, rbins, x, y, z, verbose=True, output_rpavg=True)\n\n    # Print the results\n    print(\"#############################################################################\")\n    print(\"##       rmin           rmax            rpavg             wp            npairs\")\n    print(\"#############################################################################\")\n    print(wp_results)\n                                                        \n\nCommon Code options for both Mocks and Cosmological Boxes\n=========================================================\n\n1. ``USE_OMP`` -- uses OpenMP parallelization. Scaling is great for DD\n   (perfect scaling up to 12 threads in my tests) and okay (runtime\n   becomes constant ~6-8 threads in my tests) for ``DDrppi`` and ``wp``.\n   Enabled by default. The ``Makefile`` will compare the `CC` variable with\n   known OpenMP enabled compilers and set compile options accordingly. \n   Set in ``common.mk`` by default. \n\n*Optimization for your architecture*\n\n1. The values of ``bin_refine_factor`` and/or ``zbin_refine_factor`` in\n   the ``countpairs\\_\\*.c`` files control the cache-misses, and\n   consequently, the runtime. In my trial-and-error methods, I have seen\n   any values larger than 3 are always slower. But some different\n   combination of 1/2 for ``(z)bin_refine_factor`` might be faster on\n   your platform.\n\n2. If you have AVX2/AVX-512/KNC, you will need to add a new kernel within\n   the ``*_kernels.c`` and edit the runtime dispatch code to call this new\n   kernel. \n\nAuthor & Maintainers \n=====================\n\nCorrfunc was designed by Manodeep Sinha and is currently maintained by\n`Lehman Garrison <https://github.com/lgarrison>`_ and `Manodeep Sinha <https://github.com/manodeep>`_\n\nCiting\n======\n\nIf you use the code, please cite using the Zenodo DOI. The BibTex entry\nfor the code is\n\n::\n\n      @misc{manodeep_sinha_2016_61511,\n         author       = {Manodeep Sinha},\n         title        = {Corrfunc: Corrfunc-2.0.0},\n         month        = sep,\n         year         = 2016,\n         doi          = {10.5281/zenodo.61511},\n         url          = {http://dx.doi.org/10.5281/zenodo.61511}\n      }\n       \nMailing list\n============\n\nIf you have questions or comments about the package, please do so on the\nmailing list: https://groups.google.com/forum/#!forum/corrfunc\n\nLICENSE\n=======\n\nCorrfunc is released under the MIT license. Basically, do what you want\nwith the code including using it in commercial application.\n\nProject URL\n===========\n\n-  website (https://manodeep.github.io/Corrfunc/)\n-  documentation (http://corrfunc.rtfd.io/)   \n-  version control (https://github.com/manodeep/Corrfunc)\n\n.. |Release| image:: https://img.shields.io/github/release/manodeep/Corrfunc.svg\n   :target: https://github.com/manodeep/Corrfunc/releases/latest\n   :alt: Latest Release\n\n.. |PyPI| image:: https://img.shields.io/pypi/v/Corrfunc.svg\n   :target: https://pypi.python.org/pypi/Corrfunc\n   :alt: PyPI Release\n.. |MIT licensed| image:: https://img.shields.io/badge/license-MIT-blue.svg\n   :target: https://raw.githubusercontent.com/manodeep/Corrfunc/master/LICENSE\n   :alt: MIT License\n.. |DOI| image:: https://zenodo.org/badge/19184/manodeep/Corrfunc.svg\n   :target: https://zenodo.org/badge/latestdoi/19184/manodeep/Corrfunc\n   :alt: Zenodo DOI\n.. |ASCL| image:: https://img.shields.io/badge/ascl-1703.003-blue.svg?colorB=262255\n   :target: http://ascl.net/1703.003\n   :alt: ascl:1703.003\n.. |Travis Build| image:: https://travis-ci.org/manodeep/Corrfunc.svg?branch=master\n   :target: https://travis-ci.org/manodeep/Corrfunc\n   :alt: Build Status\n.. |Issues| image:: https://img.shields.io/github/issues/manodeep/Corrfunc.svg\n   :target: https://github.com/manodeep/Corrfunc/issues\n   :alt: Open Issues\n.. |RTD| image:: https://readthedocs.org/projects/corrfunc/badge/?version=master\n   :target: http://corrfunc.readthedocs.io/en/master/?badge=master\n   :alt: Documentation Status\n.. |Landscape| image:: https://landscape.io/github/manodeep/Corrfunc/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/manodeep/Corrfunc/master\n   :alt: Code Health\n\n.. |Gitter| image:: https://badges.gitter.im/Corrfunc/Lobby.svg\n   :alt: Join the chat at https://gitter.im/Corrfunc/Lobby\n   :target: https://gitter.im/Corrfunc/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge",
    "docs_url": null,
    "download_url": "https://github.com/manodeep/Corrfunc/archive/Corrfunc-2.0.0.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/manodeep/Corrfunc",
    "keywords": "correlation functions,simulations,surveys,galaxies",
    "license": "MIT",
    "maintainer": "",
    "maintainer_email": "",
    "name": "Corrfunc",
    "platform": "Linux,Mac OSX,Unix",
    "project_url": "https://pypi.org/project/Corrfunc/",
    "release_url": "https://pypi.org/project/Corrfunc/2.0.0/",
    "requires_python": "",
    "summary": "Blazing fast correlation functions on the CPU",
    "version": "2.0.0"
  },
  "releases": {
    "0.2.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "20e4a0e0f78275308cdcae23b270e9c9",
          "sha256": "8955c9b0780d5913c968856ce3456316c3fc9fb1bccaa8fc92c92e123a53e8f2"
        },
        "downloads": 191,
        "filename": "Corrfunc-0.2.2.tar.gz",
        "has_sig": true,
        "md5_digest": "20e4a0e0f78275308cdcae23b270e9c9",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32341581,
        "upload_time": "2016-02-09T07:10:32",
        "url": "https://files.pythonhosted.org/packages/9b/7d/e63bf224672af72a58a7f04490910cc83afeabe0f46006282168839e3b38/Corrfunc-0.2.2.tar.gz"
      }
    ],
    "0.2.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "320b10018fa23a27fe409dc0440ad4de",
          "sha256": "2875e22fdac535d2523b59634c62da0665c5f2d84f28a1e26d1e125dc2fd8768"
        },
        "downloads": 191,
        "filename": "Corrfunc-0.2.3.tar.gz",
        "has_sig": true,
        "md5_digest": "320b10018fa23a27fe409dc0440ad4de",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32357675,
        "upload_time": "2016-03-30T02:43:25",
        "url": "https://files.pythonhosted.org/packages/75/90/7f6c891c4b19ebf23361566228d4c67c620c058d4a40506c11eb869c32b6/Corrfunc-0.2.3.tar.gz"
      }
    ],
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1d1ec7b56bca4ddc06edc981291f4008",
          "sha256": "1a2e43c6fc4c902111d5cd43b8936e581883b334522558277c07a55a3048945a"
        },
        "downloads": 191,
        "filename": "Corrfunc-1.0.0.tar.gz",
        "has_sig": true,
        "md5_digest": "1d1ec7b56bca4ddc06edc981291f4008",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32360529,
        "upload_time": "2016-04-14T08:30:09",
        "url": "https://files.pythonhosted.org/packages/ef/3b/2a81e0cb6d05a0084bd795d11d2074e67b75cdcf78298345f477b7683f8a/Corrfunc-1.0.0.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "918ad7ed0559c601daee69f047539580",
          "sha256": "46ca28ecd0daf1baebdc37b74ac519c24fb364f5ca3fb3e36c7d7a7687c6e5b1"
        },
        "downloads": 534,
        "filename": "Corrfunc-1.1.0.tar.gz",
        "has_sig": true,
        "md5_digest": "918ad7ed0559c601daee69f047539580",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 32371854,
        "upload_time": "2016-06-08T07:53:50",
        "url": "https://files.pythonhosted.org/packages/12/0f/b6bafcb41103b65b807c29d8f045811ea82db933be7524241b28f2e3d7f9/Corrfunc-1.1.0.tar.gz"
      }
    ],
    "2.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "1ef4ba2d917929aede23efddfcfbc78a",
          "sha256": "22176ee45188a3606df298af31f869fb9073957ad4de9417d3dfae683cb621e4"
        },
        "downloads": 309,
        "filename": "Corrfunc-2.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "1ef4ba2d917929aede23efddfcfbc78a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 25948875,
        "upload_time": "2017-04-06T06:53:31",
        "url": "https://files.pythonhosted.org/packages/ee/db/20c8e79de6c26eb2cc08c0a4181b04193bbc6d0beabd40eb5ea716c06ab3/Corrfunc-2.0.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "1ef4ba2d917929aede23efddfcfbc78a",
        "sha256": "22176ee45188a3606df298af31f869fb9073957ad4de9417d3dfae683cb621e4"
      },
      "downloads": 309,
      "filename": "Corrfunc-2.0.0.tar.gz",
      "has_sig": false,
      "md5_digest": "1ef4ba2d917929aede23efddfcfbc78a",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 25948875,
      "upload_time": "2017-04-06T06:53:31",
      "url": "https://files.pythonhosted.org/packages/ee/db/20c8e79de6c26eb2cc08c0a4181b04193bbc6d0beabd40eb5ea716c06ab3/Corrfunc-2.0.0.tar.gz"
    }
  ]
}