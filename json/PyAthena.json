{
  "info": {
    "author": "laughingman7743",
    "author_email": "laughingman7743@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 4 - Beta",
      "Intended Audience :: Developers",
      "License :: OSI Approved :: MIT License",
      "Operating System :: OS Independent",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Programming Language :: Python :: 3.6",
      "Topic :: Database :: Front-Ends"
    ],
    "description": ".. image:: https://img.shields.io/pypi/pyversions/PyAthena.svg\n    :target: https://pypi.python.org/pypi/PyAthena/\n\n.. image:: https://travis-ci.org/laughingman7743/PyAthena.svg?branch=master\n    :target: https://travis-ci.org/laughingman7743/PyAthena\n\n.. image:: https://codecov.io/gh/laughingman7743/PyAthena/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/laughingman7743/PyAthena\n\n.. image:: https://img.shields.io/pypi/l/PyAthena.svg\n    :target: https://github.com/laughingman7743/PyAthena/blob/master/LICENSE\n\n\nPyAthena\n========\n\nPyAthena is a Python `DB API 2.0 (PEP 249)`_ compliant client for `Amazon Athena`_.\n\n.. _`DB API 2.0 (PEP 249)`: https://www.python.org/dev/peps/pep-0249/\n.. _`Amazon Athena`: http://docs.aws.amazon.com/athena/latest/APIReference/Welcome.html\n\nRequirements\n------------\n\n* Python\n\n  - CPython 2,7, 3,4, 3.5, 3.6\n\nInstallation\n------------\n\n.. code:: bash\n\n    $ pip install PyAthena\n\nExtra packages:\n\n+---------------+--------------------------------------+----------+\n| Package       | Install command                      | Version  |\n+===============+======================================+==========+\n| Pandas        | ``pip install PyAthena[Pandas]``     | >=0.19.0 |\n+---------------+--------------------------------------+----------+\n| SQLAlchemy    | ``pip install PyAthena[SQLAlchemy]`` | >=1.0.0  |\n+---------------+--------------------------------------+----------+\n\nUsage\n-----\n\nBasic usage\n~~~~~~~~~~~\n\n.. code:: python\n\n    from pyathena import connect\n\n    cursor = connect(aws_access_key_id='YOUR_ACCESS_KEY_ID',\n                     aws_secret_access_key='YOUR_SECRET_ACCESS_KEY',\n                     s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                     region_name='us-west-2').cursor()\n    cursor.execute(\"SELECT * FROM one_row\")\n    print(cursor.description)\n    print(cursor.fetchall())\n\nCursor iteration\n~~~~~~~~~~~~~~~~\n\n.. code:: python\n\n    from pyathena import connect\n\n    cursor = connect(aws_access_key_id='YOUR_ACCESS_KEY_ID',\n                     aws_secret_access_key='YOUR_SECRET_ACCESS_KEY',\n                     s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                     region_name='us-west-2').cursor()\n    cursor.execute(\"SELECT * FROM many_rows LIMIT 10\")\n    for row in cursor:\n        print(row)\n\nQuery with parameter\n~~~~~~~~~~~~~~~~~~~~\n\nSupported `DB API paramstyle`_ is only ``PyFormat``.\n``PyFormat`` only supports `named placeholders`_ with old ``%`` operator style and parameters specify dictionary format.\n\n.. code:: python\n\n    from pyathena import connect\n\n    cursor = connect(aws_access_key_id='YOUR_ACCESS_KEY_ID',\n                     aws_secret_access_key='YOUR_SECRET_ACCESS_KEY',\n                     s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                     region_name='us-west-2').cursor()\n    cursor.execute(\"\"\"\n                   SELECT col_string FROM one_row_complex\n                   WHERE col_string = %(param)s\n                   \"\"\", {'param': 'a string'})\n    print(cursor.fetchall())\n\nif ``%`` character is contained in your query, it must be escaped with ``%%`` like the following:\n\n.. code:: sql\n\n    SELECT col_string FROM one_row_complex\n    WHERE col_string = %(param)s OR col_string LIKE 'a%%'\n\n.. _`DB API paramstyle`: https://www.python.org/dev/peps/pep-0249/#paramstyle\n.. _`named placeholders`: https://pyformat.info/#named_placeholders\n\nSQLAlchemy\n~~~~~~~~~~\n\nInstall SQLAlchemy with ``pip install SQLAlchemy>=1.0.0`` or ``pip install PyAthena[SQLAlchemy]``.\nSupported SQLAlchemy is 1.0.0 or higher.\n\n.. code:: python\n\n    from urllib.parse import quote_plus  # PY2: from urllib import quote_plus\n    from sqlalchemy.engine import create_engine\n    from sqlalchemy.sql.expression import select\n    from sqlalchemy.sql.functions import func\n    from sqlalchemy.sql.schema import Table, MetaData\n\n    conn_str = 'awsathena+rest://{aws_access_key_id}:{aws_secret_access_key}@athena.{region_name}.amazonaws.com:443/'\\\n               '{schema_name}?s3_staging_dir={s3_staging_dir}'\n    engine = create_engine(conn_str.format(\n        aws_access_key_id=quote_plus('YOUR_ACCESS_KEY_ID'),\n        aws_secret_access_key=quote_plus('YOUR_SECRET_ACCESS_KEY'),\n        region_name='us-west-2',\n        schema_name='default',\n        s3_staging_dir=quote_plus('s3://YOUR_S3_BUCKET/path/to/')))\n    many_rows = Table('many_rows', MetaData(bind=engine), autoload=True)\n    print(select([func.count('*')], from_obj=many_rows).scalar())\n\nThe connection string has the following format:\n\n.. code:: python\n\n    awsathena+rest://{aws_access_key_id}:{aws_secret_access_key}@athena.{region_name}.amazonaws.com:443/{schema_name}?s3_staging_dir={s3_staging_dir}&...\n\nNOTE: ``s3_staging_dir`` requires quote. If ``aws_access_key_id``, ``aws_secret_access_key`` and other parameter contain special characters, quote is also required.\n\nPandas\n~~~~~~\n\nMinimal example for Pandas DataFrame:\n\n.. code:: python\n\n    from pyathena import connect\n    import pandas as pd\n\n    conn = connect(aws_access_key_id='YOUR_ACCESS_KEY_ID',\n                   aws_secret_access_key='YOUR_SECRET_ACCESS_KEY',\n                   s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                   region_name='us-west-2')\n    df = pd.read_sql(\"SELECT * FROM many_rows\", conn)\n    print(df.head())\n\nAs Pandas DataFrame:\n\n.. code:: python\n\n    from pyathena import connect\n    from pyathena.util import as_pandas\n\n    cursor = connect(aws_access_key_id='YOUR_ACCESS_KEY_ID',\n                     aws_secret_access_key='YOUR_SECRET_ACCESS_KEY',\n                     s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                     region_name='us-west-2').cursor()\n    cursor.execute(\"SELECT * FROM many_rows\")\n    df = as_pandas(cursor)\n    print(df.describe())\n\nAsynchronous Cursor\n~~~~~~~~~~~~~~~~~~~\n\nAsynchronous cursor is a simple implementation using the concurrent.futures package.\nPython 2.7 uses `backport of the concurrent.futures`_ package.\nThis cursor is not `DB API 2.0 (PEP 249)`_ compliant.\n\nYou can use the asynchronous cursor by specifying the ``cursor_class``\nwith the connect method or connection object.\n\n.. code:: python\n\n    from pyathena import connect\n    from pyathena.async_cursor import AsyncCursor\n\n    cursor = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                     region_name='us-west-2',\n                     cursor_class=AsyncCursor).cursor()\n\n.. code:: python\n\n    from pyathena import connect\n    from pyathena.async_cursor import AsyncCursor\n\n    cursor = Connection(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                        region_name='us-west-2',\n                        cursor_class=AsyncCursor).cursor()\n\nIt can also be used by specifying the cursor class when calling the connection object's cursor method.\n\n.. code:: python\n\n    from pyathena import connect\n    from pyathena.async_cursor import AsyncCursor\n\n    cursor = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                     region_name='us-west-2').cursor(AsyncCursor)\n\n.. code:: python\n\n    from pyathena import connect\n    from pyathena.async_cursor import AsyncCursor\n\n    cursor = Connection(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                        region_name='us-west-2').cursor(AsyncCursor)\n\nThe default number of workers is 5 or cpu number * 5.\nIf you want to change the number of workers you can specify like the following.\n\n.. code:: python\n\n    from pyathena import connect\n    from pyathena.async_cursor import AsyncCursor\n\n    cursor = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                     region_name='us-west-2',\n                     cursor_class=AsyncCursor).cursor(max_workers=10)\n\nThe execute method of the asynchronous cursor returns the tuple of the query ID and the `future object`_.\n\n.. code:: python\n\n    from pyathena import connect\n    from pyathena.async_cursor import AsyncCursor\n\n    cursor = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                     region_name='us-west-2',\n                     cursor_class=AsyncCursor).cursor()\n\n    query_id, future = cursor.execute(\"SELECT * FROM many_rows\")\n\nThe return value of the `future object`_ is an ``AthenaResultSet`` object.\nThis object has an interface that can fetch and iterate query results similar to synchronous cursors.\nIt also has information on the result of query execution.\n\n.. code:: python\n\n    from pyathena import connect\n    from pyathena.async_cursor import AsyncCursor\n\n    cursor = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                     region_name='us-west-2',\n                     cursor_class=AsyncCursor).cursor()\n\n    query_id, future = cursor.execute(\"SELECT * FROM many_rows\")\n    result_set = future.result()\n    print(result_set.state)\n    print(result_set.state_change_reason)\n    print(result_set.completion_date_time)\n    print(result_set.submission_date_time)\n    print(result_set.data_scanned_in_bytes)\n    print(result_set.execution_time_in_millis)\n    print(result_set.output_location)\n    print(result_set.description)\n    for row in result_set:\n        print(row)\n\n.. code:: python\n\n    from pyathena import connect\n    from pyathena.async_cursor import AsyncCursor\n\n    cursor = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                     region_name='us-west-2',\n                     cursor_class=AsyncCursor).cursor()\n\n    query_id, future = cursor.execute(\"SELECT * FROM many_rows\")\n    result_set = future.result()\n    print(result_set.fetchall())\n\nA query ID is required to cancel a query with the asynchronous cursor.\n\n.. code:: python\n\n    from pyathena import connect\n    from pyathena.async_cursor import AsyncCursor\n\n    cursor = connect(s3_staging_dir='s3://YOUR_S3_BUCKET/path/to/',\n                     region_name='us-west-2',\n                     cursor_class=AsyncCursor).cursor()\n\n    query_id, future = cursor.execute(\"SELECT * FROM many_rows\")\n    cursor.cancel(query_id)\n\nNOTE: The cancel method of the `future object`_ does not cancel the query.\n\n.. _`backport of the concurrent.futures`: https://pypi.python.org/pypi/futures\n.. _`future object`: https://docs.python.org/3/library/concurrent.futures.html#future-objects\n\nCredentials\n-----------\n\nSupport `Boto3 credentials`_.\n\n.. _`Boto3 credentials`: http://boto3.readthedocs.io/en/latest/guide/configuration.html\n\nAdditional environment variable:\n\n.. code:: bash\n\n    $ export AWS_ATHENA_S3_STAGING_DIR=s3://YOUR_S3_BUCKET/path/to/\n\nTesting\n-------\n\nDepends on the following environment variables:\n\n.. code:: bash\n\n    $ export AWS_ACCESS_KEY_ID=YOUR_ACCESS_KEY_ID\n    $ export AWS_SECRET_ACCESS_KEY=YOUR_SECRET_ACCESS_KEY\n    $ export AWS_DEFAULT_REGION=us-west-2\n    $ export AWS_ATHENA_S3_STAGING_DIR=s3://YOUR_S3_BUCKET/path/to/\n\nRun test\n~~~~~~~~\n\n.. code:: bash\n\n    $ pip install pytest awscli\n    $ scripts/test_data/upload_test_data.sh\n    $ py.test\n    $ scripts/test_data/delete_test_data.sh\n\nRun test multiple Python versions\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code:: bash\n\n    $ pip install tox awscli\n    $ scripts/test_data/upload_test_data.sh\n    $ pyenv local 2.7.13 3.4.6 3.5.3 3.6.1\n    $ tox\n    $ scripts/test_data/delete_test_data.sh",
    "docs_url": null,
    "download_url": "",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/laughingman7743/PyAthena/",
    "keywords": "",
    "license": "MIT License",
    "maintainer": "",
    "maintainer_email": "",
    "name": "PyAthena",
    "platform": "",
    "project_url": "https://pypi.org/project/PyAthena/",
    "release_url": "https://pypi.org/project/PyAthena/1.2.0/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "Python DB API 2.0 (PEP 249) compliant client for Amazon Athena",
    "version": "1.2.0"
  },
  "releases": {
    "1.0.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f1e23678368e51b9072828d6befbf5aa",
          "sha256": "1bfb7000d546ba7c342bf4d94bed2c8632e5afb342cbffd9a7ff7b9771230771"
        },
        "downloads": 0,
        "filename": "PyAthena-1.0.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f1e23678368e51b9072828d6befbf5aa",
        "packagetype": "bdist_wheel",
        "python_version": "3.5",
        "size": 15308,
        "upload_time": "2017-05-20T23:03:52",
        "url": "https://files.pythonhosted.org/packages/ce/26/7a67f35b3071167c8a4fce677cb3ae1971ea51d65d5626bac9872903a158/PyAthena-1.0.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "36c52c019799f4597c9d73e62ba30962",
          "sha256": "0e333963f19404225673e348c244f3c780e10de1b2b8ea669ba8e20ae3199db8"
        },
        "downloads": 0,
        "filename": "PyAthena-1.0.0.tar.gz",
        "has_sig": false,
        "md5_digest": "36c52c019799f4597c9d73e62ba30962",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12068,
        "upload_time": "2017-05-20T23:03:33",
        "url": "https://files.pythonhosted.org/packages/28/ea/1cac5d5ba1f484a04e96032ead8f721ce5766e262def1d5545f419ee2b17/PyAthena-1.0.0.tar.gz"
      }
    ],
    "1.0.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a0b4f7f8173fb744095c255074e1306b",
          "sha256": "5ba916a3cc3814386718f6f8049a9b85563f28ba6f77c9d40349d43da2e95f71"
        },
        "downloads": 0,
        "filename": "PyAthena-1.0.1-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "a0b4f7f8173fb744095c255074e1306b",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 16519,
        "upload_time": "2017-05-28T10:30:42",
        "url": "https://files.pythonhosted.org/packages/a8/af/df161b38d94819d673f70145a2b0842629c5557c2a7aac2b3d7635d9a7b8/PyAthena-1.0.1-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "53b0c1c03bde3376082244307e2dbbaa",
          "sha256": "cbcc20339bfedace8386da1317e539128b44af2a6f657de9fed09ed5f075c23b"
        },
        "downloads": 0,
        "filename": "PyAthena-1.0.1.tar.gz",
        "has_sig": false,
        "md5_digest": "53b0c1c03bde3376082244307e2dbbaa",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 12971,
        "upload_time": "2017-05-28T10:30:27",
        "url": "https://files.pythonhosted.org/packages/92/94/2f06a5315e0a997d59276ccd85d34cd0a91f4eec9d8f8c3c3eefa420292d/PyAthena-1.0.1.tar.gz"
      }
    ],
    "1.0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "f00a52589b0fdfc08e7918b23f31aec0",
          "sha256": "fa07421dd3182f14d5792c7bd795355b06fecb0204c93ed35bf79a8455d37064"
        },
        "downloads": 0,
        "filename": "PyAthena-1.0.2-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "f00a52589b0fdfc08e7918b23f31aec0",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 16576,
        "upload_time": "2017-06-04T07:23:39",
        "url": "https://files.pythonhosted.org/packages/06/4d/0c60f3258302a4f5f738fe4ce32ad3275100bbda56bc3c9f76697b82a6d5/PyAthena-1.0.2-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "ed5eae04cb9db05ef55272efd5577b0a",
          "sha256": "69d107feb1c8fde45ae0394a2feb5dd0a78e004a71780a66f191c41af332f323"
        },
        "downloads": 0,
        "filename": "PyAthena-1.0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "ed5eae04cb9db05ef55272efd5577b0a",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13046,
        "upload_time": "2017-06-04T07:17:03",
        "url": "https://files.pythonhosted.org/packages/8b/fa/ed08726c5a36d3c5e1be639f9c8050dbd91a6986d43e824ea593c68863ba/PyAthena-1.0.2.tar.gz"
      }
    ],
    "1.0.3": [
      {
        "comment_text": "",
        "digests": {
          "md5": "c505193cabcd172df2b8b8e3e4c606d8",
          "sha256": "56dcf2f00a56f5afedcf0221f91fc97055cf98ba8b76769157f9e08cc3cf243c"
        },
        "downloads": 0,
        "filename": "PyAthena-1.0.3-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "c505193cabcd172df2b8b8e3e4c606d8",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 16586,
        "upload_time": "2017-07-07T22:09:22",
        "url": "https://files.pythonhosted.org/packages/56/e1/d0d9febbf891632b51a70c7eeb00220ffa85fcfdd2c997273a0da6d05f62/PyAthena-1.0.3-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "94cc062e02edeb10867ea50c9a3fb739",
          "sha256": "fd4f899d7a1891b59e7a700f88e10741b7414827d08a5d898126d9875f1e6770"
        },
        "downloads": 0,
        "filename": "PyAthena-1.0.3.tar.gz",
        "has_sig": false,
        "md5_digest": "94cc062e02edeb10867ea50c9a3fb739",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13053,
        "upload_time": "2017-07-07T22:09:11",
        "url": "https://files.pythonhosted.org/packages/ba/1d/2ba0f09f89a719955de2aa726adb732ee4651e0ca028fbc93f7d4c4b9c98/PyAthena-1.0.3.tar.gz"
      }
    ],
    "1.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "7f836ef979720231efc170751ac14935",
          "sha256": "e45c57d4b52b6cc2921beae2e60f7024fa86315a90c9c23eee5321400302740c"
        },
        "downloads": 0,
        "filename": "PyAthena-1.1.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "7f836ef979720231efc170751ac14935",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 16592,
        "upload_time": "2017-07-29T02:53:23",
        "url": "https://files.pythonhosted.org/packages/25/27/10a291d2a68557b66a47d624a6485ae28c0c93fa6d0b836d24009066ceb2/PyAthena-1.1.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "38c1f6adc30dcd841937b08df35cf514",
          "sha256": "5fba2502e1c3ea59666e2bbc62114bf8f682a77954cfe294fe9f31712e59a68e"
        },
        "downloads": 0,
        "filename": "PyAthena-1.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "38c1f6adc30dcd841937b08df35cf514",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 13058,
        "upload_time": "2017-07-29T02:53:08",
        "url": "https://files.pythonhosted.org/packages/b3/ba/952a55dea307ff96e7dad81c0f90570dec7ae8ea23e78d1f55cb9516bbe5/PyAthena-1.1.0.tar.gz"
      }
    ],
    "1.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "691f990d20e70e83ba332d40f21c9044",
          "sha256": "b95317e2d08c3a7abd79d802d78ecd2f14e6a38e6bf07f33651dc4fe311f29e1"
        },
        "downloads": 0,
        "filename": "PyAthena-1.2.0-py2.py3-none-any.whl",
        "has_sig": false,
        "md5_digest": "691f990d20e70e83ba332d40f21c9044",
        "packagetype": "bdist_wheel",
        "python_version": "py2.py3",
        "size": 21873,
        "upload_time": "2017-09-24T06:06:56",
        "url": "https://files.pythonhosted.org/packages/13/75/f1a13926364ce4c5ce25ee1fe466029effb44aadb5372df0d2503b50e526/PyAthena-1.2.0-py2.py3-none-any.whl"
      },
      {
        "comment_text": "",
        "digests": {
          "md5": "526777260729810ca83150a87e02c5f1",
          "sha256": "537f177eac6b23afb4360e1b96c93baf800723174e967a7658b02118836968d2"
        },
        "downloads": 0,
        "filename": "PyAthena-1.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "526777260729810ca83150a87e02c5f1",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 16042,
        "upload_time": "2017-09-24T06:06:46",
        "url": "https://files.pythonhosted.org/packages/c7/a7/1128079cd16d2bfe95884328bca4500e28550be92b55e5f9b78c0a3e5dcf/PyAthena-1.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "691f990d20e70e83ba332d40f21c9044",
        "sha256": "b95317e2d08c3a7abd79d802d78ecd2f14e6a38e6bf07f33651dc4fe311f29e1"
      },
      "downloads": 0,
      "filename": "PyAthena-1.2.0-py2.py3-none-any.whl",
      "has_sig": false,
      "md5_digest": "691f990d20e70e83ba332d40f21c9044",
      "packagetype": "bdist_wheel",
      "python_version": "py2.py3",
      "size": 21873,
      "upload_time": "2017-09-24T06:06:56",
      "url": "https://files.pythonhosted.org/packages/13/75/f1a13926364ce4c5ce25ee1fe466029effb44aadb5372df0d2503b50e526/PyAthena-1.2.0-py2.py3-none-any.whl"
    },
    {
      "comment_text": "",
      "digests": {
        "md5": "526777260729810ca83150a87e02c5f1",
        "sha256": "537f177eac6b23afb4360e1b96c93baf800723174e967a7658b02118836968d2"
      },
      "downloads": 0,
      "filename": "PyAthena-1.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "526777260729810ca83150a87e02c5f1",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 16042,
      "upload_time": "2017-09-24T06:06:46",
      "url": "https://files.pythonhosted.org/packages/c7/a7/1128079cd16d2bfe95884328bca4500e28550be92b55e5f9b78c0a3e5dcf/PyAthena-1.2.0.tar.gz"
    }
  ]
}