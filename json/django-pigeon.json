{
  "info": {
    "author": "Lucas Connors",
    "author_email": "lucas@revolutiontech.ca",
    "bugtrack_url": null,
    "classifiers": [
      "Environment :: Web Environment",
      "Framework :: Django",
      "Framework :: Django :: 1.10",
      "Framework :: Django :: 1.8",
      "Framework :: Django :: 1.9",
      "Intended Audience :: Developers",
      "License :: OSI Approved",
      "License :: OSI Approved :: ISC License (ISCL)",
      "Operating System :: OS Independent",
      "Programming Language :: Python",
      "Programming Language :: Python :: 2.7",
      "Programming Language :: Python :: 3.4",
      "Programming Language :: Python :: 3.5",
      "Topic :: Software Development :: Testing",
      "Topic :: Utilities"
    ],
    "description": "# django-pigeon\n#### Test utilities for Django projects\n\n[![Build Status](https://travis-ci.org/RevolutionTech/django-pigeon.svg?branch=master)](https://travis-ci.org/RevolutionTech/django-pigeon)\n[![codecov](https://codecov.io/gh/RevolutionTech/django-pigeon/branch/master/graph/badge.svg)](https://codecov.io/gh/RevolutionTech/django-pigeon)\n\n## Installation\n\n```\n$ pip install django-pigeon\n```\n\n## Usage\n\ndjango-pigeon comes equipped with a `RenderTestCase` which provides an assortment of methods on top of Django's `TestCase` that assist with end-to-end testing of views in Django. Writing a test that verifies a view renders correctly is as simple as:\n\n```python\nfrom pigeon.test import RenderTestCase\n\n\nclass FooTestCase(RenderTestCase):\n\n    def testFooView(self):\n        self.assertResponseRenders('/foo/')\n```\n\nYou can also inspect the rendered response:\n\n```python\ndef testFooView(self):\n    response = self.assertResponseRenders('/foo/')\n    self.assertIn('FOO', response.content)\n```\n\nBy default, `assertResponseRenders` verifies that the status code of the response is 200, but you can change this by specifying the `status_code` keyword argument:\n\n```python\ndef testBarView404(self):\n    self.assertResponseRenders('/bar/', status_code=404)\n```\n\nYou can also make POST and PUT requests using `assertResponseRenders` by providing the `method` and `data` keywords arguments:\n\n```python\ndef testCreateFooView(self):\n    payload = {'text': 'Hello World!'}\n    self.assertResponseRenders('/foo/create/', status_code=201, method='POST', data=payload)\n```\n\nIf you are using HTML generated from Django forms, you can set `has_form_error=True` as a shortcut to check for `errorlist` in the resulting HTML:\n\n```python\ndef testCreateFooViewWithoutText(self):\n    response = self.assertResponseRenders('/foo/create/', method='POST', has_form_error=True)\n    self.assertIn('This field is required.', response.content)\n```\n\nUse `assertAPIResponseRenders` for JSON responses. `json.loads` is automatically called on the response, so the object returned is ready for inspection:\n\n```python\ndef testFooAPIView(self):\n    payload = {'text': 'Hello!'}\n    response = self.assertAPIResponseRenders('/foo/', method='POST', data=payload)\n    self.assertEquals(response['text'], 'Hello!')\n```\n\nYou can use `assertResponseRedirects` to test redirects:\n\n```python\ndef testFooRedirects(self):\n    # /foo/ redirects to /bar/\n    self.assertResponseRedirects('/foo/', '/bar/')\n```\n\nIf you have a list of views that you want to verify are rendering as 200 without adding any special assertion logic, you can simply override the `get200s` and `getAPI200s` methods, which should return a list of URLs. django-pigeon will construct test methods that check that rendering all of these URLs results in a 200:\n\n```python\nclass FooTestCase(RenderTestCase):\n\n    def get200s(self):\n        return [\n            '/foo/',\n            '/bar/',\n            '/foobar/',\n        ]\n\n    def getAPI200s(self):\n        return [\n            '/api/foo/',\n        ]\n```\n\nMost of the features in `RenderTestCase` are actually implemented in the mixin class `RenderTestCaseMixin`. You can combine `RenderTestCaseMixin` with other TestCase classes to get additional functionality:\n\n```python\nfrom django.test import TransactionTestCase\nfrom pigeon.test import RenderTestCaseMixin\n\n\nclass FooTransactionTestCase(RenderTestCaseMixin, TransactionTestCase):\n\n    def testFooView(self):\n        ...\n```\n\ndjango-pigeon supports Python 2.7, 3.4+ and Django 1.8+.\n",
    "docs_url": null,
    "download_url": "UNKNOWN",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/RevolutionTech/django-pigeon/",
    "keywords": null,
    "license": "ISC License",
    "maintainer": null,
    "maintainer_email": null,
    "name": "django-pigeon",
    "platform": "UNKNOWN",
    "project_url": "https://pypi.org/project/django-pigeon/",
    "release_url": "https://pypi.org/project/django-pigeon/0.2.0/",
    "requires_python": null,
    "summary": "Test utilities for Django projects.",
    "version": "0.2.0"
  },
  "releases": {
    "0.1.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "8cdbab6d77a045a0059a67011bae826f",
          "sha256": "e110c04d9a3db38702567eb1cb7ca3698032dc3af3eb8cecd90e2522e2cbd022"
        },
        "downloads": 9,
        "filename": "django-pigeon-0.1.0.tar.gz",
        "has_sig": false,
        "md5_digest": "8cdbab6d77a045a0059a67011bae826f",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4025,
        "upload_time": "2017-01-11T08:33:25",
        "url": "https://files.pythonhosted.org/packages/b8/3e/5e70ead74662ea4a476529f688e8e2d6a22ad8ca65aee07fcf44a4a58955/django-pigeon-0.1.0.tar.gz"
      }
    ],
    "0.1.1": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a25e10f8970c72896a512965b403941b",
          "sha256": "c5cddaa7040bad058d98cf7e8df66e534b224f665d7a83c5bc1a940f33dd72d8"
        },
        "downloads": 6,
        "filename": "django-pigeon-0.1.1.tar.gz",
        "has_sig": false,
        "md5_digest": "a25e10f8970c72896a512965b403941b",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4657,
        "upload_time": "2017-01-11T08:52:44",
        "url": "https://files.pythonhosted.org/packages/ca/4d/e232598411319bc69d610edd4ebf9bc10939c07ff760f210f491b776728f/django-pigeon-0.1.1.tar.gz"
      }
    ],
    "0.2.0": [
      {
        "comment_text": "",
        "digests": {
          "md5": "a495f2cd794808c40fa0fb37eb303231",
          "sha256": "7bcd8c55a9a5409dc89db949aa06da976932f034076b2c06ec86eb4789a9ed79"
        },
        "downloads": 13,
        "filename": "django-pigeon-0.2.0.tar.gz",
        "has_sig": false,
        "md5_digest": "a495f2cd794808c40fa0fb37eb303231",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 4726,
        "upload_time": "2017-03-02T23:56:57",
        "url": "https://files.pythonhosted.org/packages/47/9f/9ea6a246885bf14483f16d7c856b9067ec595487e4230704f1692bbd75d3/django-pigeon-0.2.0.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "a495f2cd794808c40fa0fb37eb303231",
        "sha256": "7bcd8c55a9a5409dc89db949aa06da976932f034076b2c06ec86eb4789a9ed79"
      },
      "downloads": 13,
      "filename": "django-pigeon-0.2.0.tar.gz",
      "has_sig": false,
      "md5_digest": "a495f2cd794808c40fa0fb37eb303231",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 4726,
      "upload_time": "2017-03-02T23:56:57",
      "url": "https://files.pythonhosted.org/packages/47/9f/9ea6a246885bf14483f16d7c856b9067ec595487e4230704f1692bbd75d3/django-pigeon-0.2.0.tar.gz"
    }
  ]
}