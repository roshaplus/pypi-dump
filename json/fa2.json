{
  "info": {
    "author": "Bhargav Chippada",
    "author_email": "bhargavchippada19@gmail.com",
    "bugtrack_url": null,
    "classifiers": [
      "Development Status :: 5 - Production/Stable",
      "Intended Audience :: Science/Research",
      "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
      "Programming Language :: Python :: 2",
      "Programming Language :: Python :: 3",
      "Topic :: Scientific/Engineering :: Mathematics"
    ],
    "description": "ForceAtlas2 for Python and NetworkX\n===================================\n\nA port of Gephi\u2019s Force Atlas 2 layout algorithm to Python 2 and Python\n3 (with a wrapper for NetworkX). This is the fastest python\nimplementation available with most of the features complete. It also\nsupports Barnes Hut approximation for maximum speedup.\n\nForceAtlas2 is a very fast layout algorithm for force directed graphs.\nThe implementation is based on this `paper`_ and the corresponding\n`gephi-java-code`_. Its really quick compared to the\nfruchterman reingold algorithm (spring layout) of networkx and scales\nwell to high number of nodes (>10000).\n\nInstallation\n------------\n\nInstall from pip:\n\n::\n\n    pip install fa2\n\nTo build and install run from source:\n\n::\n\n    python setup.py install\n\n**Cython is highly recommended if you are buidling from source as it will speed up by a factor of 10-100x depending on the graph**\n\nDependencies\n~~~~~~~~~~~~\n\n-  numpy (adjacency matrix as complete matrix)\n-  scipy (adjacency matrix as sparse matrix)\n-  tqdm (progressbar)\n-  Cython (10-100x speedup)\n-  networkx (To use the NetworkX wrapper function, you obviously need\n   NetworkX)\n\nUsage\n-----\n\nfrom fa2 import ForceAtlas2\n\nCreate a ForceAtlas2 object with the appropriate settings. ForceAtlas2\nclass contains two important methods:\n\n.. code:: python\n\n    forceatlas2 (G, pos, iteraions)\n    # G is a graph in 2D numpy ndarray format (or) scipy sparse matrix format\n    # pos is a numpy array (Nx2) of initial positions of nodes\n    # iterations is num of iterations to run the algorithm\n\n.. code:: python\n\n    forceatlas2_networkx_layout(G, pos, iterations)\n    # G is networkx graph\n    # pos is a dictionary, as in networkx\n    # iterations is num of iterations to run the algorithm\n\nBelow is an example usage. You can also see the feature settings of\nForceAtlas2 class.\n\n.. code-block:: python\n  \n    import networkx as nx\n    from fa2 import ForceAtlas2\n    import matplotlib.pyplot as plt\n\n    G = nx.karate_club_graph()\n\n    forceatlas2 = ForceAtlas2(\n                              # Behavior alternatives\n                              outboundAttractionDistribution=False,  # Dissuade hubs\n                              linLogMode=False,  # NOT IMPLEMENTED\n                              adjustSizes=False,  # Prevent overlap (NOT IMPLEMENTED)\n                              edgeWeightInfluence=1.0,\n\n                              # Performance\n                              jitterTolerance=1.0,  # Tolerance\n                              barnesHutOptimize=True,\n                              barnesHutTheta=1.2,\n                              multiThreaded=False,  # NOT IMPLEMENTED\n\n                              # Tuning\n                              scalingRatio=2.0,\n                              strongGravityMode=False,\n                              gravity=1.0,\n\n                              # Log\n                              verbose=True)\n\n    positions = forceatlas2.forceatlas2_networkx_layout(G, pos=None, iterations=2000)\n    nx.draw_networkx(G, positions, cmap=plt.get_cmap('jet'), node_size=50, with_labels=False)\n    plt.show()\n    \nYou can also take a look at forceatlas2.py file for understanding the\nForceAtlas2 class and its functions better.\n\nFeatures Completed\n------------------\n\n-  **barnesHutOptimize**: Barnes Hut optimization, n\u00b2 complexity to\n   n.ln(n)\n-  **gravity**: Attracts nodes to the center. Prevents islands from\n   drifting away\n-  **Dissuade Hubs**: Distributes attraction along outbound edges. Hubs\n   attract less and thus are pushed to the borders\n-  **scalingRatio**: How much repulsion you want. More makes a more\n   sparse graph\n-  **strongGravityMode**: A stronger gravity view\n-  **jitterTolerance**: How much swinging you allow. Above 1\n   discouraged. Lower gives less speed and more precision\n-  **verbose**: Shows a progressbar of iterations completed. Also, shows\n   time taken for different force computations\n-  **edgeWeightInfluence**: How much influence you give to the edges\n   weight. 0 is \u201cno influence\u201d and 1 is \u201cnormal\u201d\n\nDocumentation\n-------------\n\nYou will find all the documentation in the source code\n\nContributors\n------------\n\nContributions are highly welcome. Please submit your pull requests and\nbecome a collaborator.\n\nCopyright\n---------\n\n::\n\n    Copyright (C) 2017 Bhargav Chippada bhargavchippada19@gmail.com.\n    Licensed under the GNU GPLv3.\n\nThe files are heavily based on the java files included in Gephi, git\nrevision 2b9a7c8 and Max Shinn\u2019s port to python of the algorithm. Here I\ninclude the copyright information from those files:\n\n::\n\n    Copyright 2008-2011 Gephi\n    Authors : Mathieu Jacomy <mathieu.jacomy@gmail.com>\n    Website : http://www.gephi.org\n    Copyright 2011 Gephi Consortium. All rights reserved.\n    Portions Copyrighted 2011 Gephi Consortium.\n    The contents of this file are subject to the terms of either the\n    GNU General Public License Version 3 only (\"GPL\") or the Common\n    Development and Distribution License(\"CDDL\") (collectively, the\n    \"License\"). You may not use this file except in compliance with\n    the License.\n\n    <https://github.com/mwshinn/forceatlas2-python>\n    Copyright 2016 Max Shinn <mws41@cam.ac.uk>\n    Available under the GPLv3\n\n    Also, thanks to Eugene Bosiakov <https://github.com/bosiakov/fa2l>\n\n.. _paper: http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0098679\n.. _gephi-java-code: https://github.com/gephi/gephi/blob/master/modules/LayoutPlugin/src/main/java/org/gephi/layout/plugin/forceAtlas2/ForceAtlas2.java",
    "docs_url": null,
    "download_url": "https://github.com/bhargavchippada/forceatlas2/archive/v0.2.tar.gz",
    "downloads": {
      "last_day": 0,
      "last_month": 0,
      "last_week": 0
    },
    "home_page": "https://github.com/bhargavchippada/forceatlas2",
    "keywords": "forceatlas2,networkx,force-directed-graph,force-layout,graph",
    "license": "",
    "maintainer": "",
    "maintainer_email": "",
    "name": "fa2",
    "platform": "",
    "project_url": "https://pypi.org/project/fa2/",
    "release_url": "https://pypi.org/project/fa2/0.2/",
    "requires_dist": [],
    "requires_python": "",
    "summary": "The fastest ForceAtlas2 algorithm for Python (and NetworkX)",
    "version": "0.2"
  },
  "releases": {
    "0.2": [
      {
        "comment_text": "",
        "digests": {
          "md5": "78c84f6144739c653c03db7391e631dc",
          "sha256": "d8dcb2b6c3a53e682fb8d15ecdcbc07aaa04140fe2174fc5a90a4c41fa2de9ba"
        },
        "downloads": -1,
        "filename": "fa2-0.2.tar.gz",
        "has_sig": false,
        "md5_digest": "78c84f6144739c653c03db7391e631dc",
        "packagetype": "sdist",
        "python_version": "source",
        "size": 78787,
        "upload_time": "2017-10-28T13:08:26",
        "url": "https://files.pythonhosted.org/packages/dd/10/b2756c3e962c7bbe0b3cfbf93e23a5c40cafd6b0ef061318c343e2fcb475/fa2-0.2.tar.gz"
      }
    ]
  },
  "urls": [
    {
      "comment_text": "",
      "digests": {
        "md5": "78c84f6144739c653c03db7391e631dc",
        "sha256": "d8dcb2b6c3a53e682fb8d15ecdcbc07aaa04140fe2174fc5a90a4c41fa2de9ba"
      },
      "downloads": -1,
      "filename": "fa2-0.2.tar.gz",
      "has_sig": false,
      "md5_digest": "78c84f6144739c653c03db7391e631dc",
      "packagetype": "sdist",
      "python_version": "source",
      "size": 78787,
      "upload_time": "2017-10-28T13:08:26",
      "url": "https://files.pythonhosted.org/packages/dd/10/b2756c3e962c7bbe0b3cfbf93e23a5c40cafd6b0ef061318c343e2fcb475/fa2-0.2.tar.gz"
    }
  ]
}